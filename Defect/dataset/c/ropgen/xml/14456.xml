<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14456.c" pos:tabs="8"><function pos:start="1:1" pos:end="453:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">transcode</name><parameter_list pos:start="1:21" pos:end="1:26">(<parameter pos:start="1:22" pos:end="1:25"><decl pos:start="1:22" pos:end="1:25"><type pos:start="1:22" pos:end="1:25"><name pos:start="1:22" pos:end="1:25">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="453:1">{<block_content pos:start="5:5" pos:end="451:15">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>, <decl pos:start="5:14" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">AVFormatContext</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:23">is</name></decl>, <decl pos:start="7:26" pos:end="7:28"><type ref="prev" pos:start="7:5" pos:end="7:21"><modifier pos:start="7:26" pos:end="7:26">*</modifier></type><name pos:start="7:27" pos:end="7:28">os</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">OutputStream</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">ost</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">InputStream</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">ist</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:22">no_packet</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:23">no_packet_count</name> <init pos:start="15:25" pos:end="15:27">= <expr pos:start="15:27" pos:end="15:27"><literal type="number" pos:start="15:27" pos:end="15:27">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:23">timer_start</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="23:24"><if pos:start="21:5" pos:end="23:24">if <condition pos:start="21:8" pos:end="21:50">(<expr pos:start="21:9" pos:end="21:49"><operator pos:start="21:9" pos:end="21:9">!</operator><operator pos:start="21:10" pos:end="21:10">(</operator><name pos:start="21:11" pos:end="21:19">no_packet</name> <operator pos:start="21:21" pos:end="21:21">=</operator> <call pos:start="21:23" pos:end="21:48"><name pos:start="21:23" pos:end="21:32">av_mallocz</name><argument_list pos:start="21:33" pos:end="21:48">(<argument pos:start="21:34" pos:end="21:47"><expr pos:start="21:34" pos:end="21:47"><name pos:start="21:34" pos:end="21:47">nb_input_files</name></expr></argument>)</argument_list></call><operator pos:start="21:49" pos:end="21:49">)</operator></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:24"><block_content pos:start="23:9" pos:end="23:24">

        <expr_stmt pos:start="23:9" pos:end="23:24"><expr pos:start="23:9" pos:end="23:23"><call pos:start="23:9" pos:end="23:23"><name pos:start="23:9" pos:end="23:20">exit_program</name><argument_list pos:start="23:21" pos:end="23:23">(<argument pos:start="23:22" pos:end="23:22"><expr pos:start="23:22" pos:end="23:22"><literal type="number" pos:start="23:22" pos:end="23:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:27"><expr pos:start="27:5" pos:end="27:26"><name pos:start="27:5" pos:end="27:7">ret</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:26"><name pos:start="27:11" pos:end="27:24">transcode_init</name><argument_list pos:start="27:25" pos:end="27:26">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="31:18"><if pos:start="29:5" pos:end="31:18">if <condition pos:start="29:8" pos:end="29:16">(<expr pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">&lt;</operator> <literal type="number" pos:start="29:15" pos:end="29:15">0</literal></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:18"><block_content pos:start="31:9" pos:end="31:18">

        <goto pos:start="31:9" pos:end="31:18">goto <name pos:start="31:14" pos:end="31:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:65"><expr pos:start="35:5" pos:end="35:64"><call pos:start="35:5" pos:end="35:64"><name pos:start="35:5" pos:end="35:10">av_log</name><argument_list pos:start="35:11" pos:end="35:64">(<argument pos:start="35:12" pos:end="35:15"><expr pos:start="35:12" pos:end="35:15"><name pos:start="35:12" pos:end="35:15">NULL</name></expr></argument>, <argument pos:start="35:18" pos:end="35:28"><expr pos:start="35:18" pos:end="35:28"><name pos:start="35:18" pos:end="35:28">AV_LOG_INFO</name></expr></argument>, <argument pos:start="35:31" pos:end="35:63"><expr pos:start="35:31" pos:end="35:63"><literal type="string" pos:start="35:31" pos:end="35:63">"Press ctrl-c to stop encoding\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:16"><expr pos:start="37:5" pos:end="37:15"><call pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:13">term_init</name><argument_list pos:start="37:14" pos:end="37:15">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:31"><expr pos:start="41:5" pos:end="41:30"><name pos:start="41:5" pos:end="41:15">timer_start</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <call pos:start="41:19" pos:end="41:30"><name pos:start="41:19" pos:end="41:28">av_gettime</name><argument_list pos:start="41:29" pos:end="41:30">()</argument_list></call></expr>;</expr_stmt>



    <for pos:start="45:5" pos:end="319:5">for <control pos:start="45:9" pos:end="45:34">(<init pos:start="45:10" pos:end="45:10">;</init> <condition pos:start="45:12" pos:end="45:33"><expr pos:start="45:12" pos:end="45:32"><name pos:start="45:12" pos:end="45:27">received_sigterm</name> <operator pos:start="45:29" pos:end="45:30">==</operator> <literal type="number" pos:start="45:32" pos:end="45:32">0</literal></expr>;</condition><incr/>)</control> <block pos:start="45:36" pos:end="319:5">{<block_content pos:start="47:9" pos:end="317:37">

        <decl_stmt pos:start="47:9" pos:end="47:59"><decl pos:start="47:9" pos:end="47:22"><type pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:11">int</name></type> <name pos:start="47:13" pos:end="47:22">file_index</name></decl>, <decl pos:start="47:25" pos:end="47:33"><type ref="prev" pos:start="47:9" pos:end="47:11"/><name pos:start="47:25" pos:end="47:33">ist_index</name></decl>, <decl pos:start="47:36" pos:end="47:58"><type ref="prev" pos:start="47:9" pos:end="47:11"/><name pos:start="47:36" pos:end="47:54">past_recording_time</name> <init pos:start="47:56" pos:end="47:58">= <expr pos:start="47:58" pos:end="47:58"><literal type="number" pos:start="47:58" pos:end="47:58">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="49:9" pos:end="49:21"><decl pos:start="49:9" pos:end="49:20"><type pos:start="49:9" pos:end="49:16"><name pos:start="49:9" pos:end="49:16">AVPacket</name></type> <name pos:start="49:18" pos:end="49:20">pkt</name></decl>;</decl_stmt>

        <decl_stmt pos:start="51:9" pos:end="51:25"><decl pos:start="51:9" pos:end="51:24"><type pos:start="51:9" pos:end="51:15"><name pos:start="51:9" pos:end="51:15">int64_t</name></type> <name pos:start="51:17" pos:end="51:24">ipts_min</name></decl>;</decl_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:29"><expr pos:start="55:9" pos:end="55:28"><name pos:start="55:9" pos:end="55:16">ipts_min</name> <operator pos:start="55:18" pos:end="55:18">=</operator> <name pos:start="55:20" pos:end="55:28">INT64_MAX</name></expr>;</expr_stmt>



        <comment type="block" pos:start="59:9" pos:end="59:70">/* check if there's any stream where output is still needed */</comment>

        <for pos:start="61:9" pos:end="91:9">for <control pos:start="61:13" pos:end="61:47">(<init pos:start="61:14" pos:end="61:19"><expr pos:start="61:14" pos:end="61:18"><name pos:start="61:14" pos:end="61:14">i</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <literal type="number" pos:start="61:18" pos:end="61:18">0</literal></expr>;</init> <condition pos:start="61:21" pos:end="61:42"><expr pos:start="61:21" pos:end="61:41"><name pos:start="61:21" pos:end="61:21">i</name> <operator pos:start="61:23" pos:end="61:23">&lt;</operator> <name pos:start="61:25" pos:end="61:41">nb_output_streams</name></expr>;</condition> <incr pos:start="61:44" pos:end="61:46"><expr pos:start="61:44" pos:end="61:46"><name pos:start="61:44" pos:end="61:44">i</name><operator pos:start="61:45" pos:end="61:46">++</operator></expr></incr>)</control> <block pos:start="61:49" pos:end="91:9">{<block_content pos:start="63:13" pos:end="89:36">

            <decl_stmt pos:start="63:13" pos:end="63:27"><decl pos:start="63:13" pos:end="63:26"><type pos:start="63:13" pos:end="63:24"><name pos:start="63:13" pos:end="63:22">OutputFile</name> <modifier pos:start="63:24" pos:end="63:24">*</modifier></type><name pos:start="63:25" pos:end="63:26">of</name></decl>;</decl_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:36"><expr pos:start="65:13" pos:end="65:35"><name pos:start="65:13" pos:end="65:15">ost</name> <operator pos:start="65:17" pos:end="65:17">=</operator> <name pos:start="65:19" pos:end="65:35"><name pos:start="65:19" pos:end="65:32">output_streams</name><index pos:start="65:33" pos:end="65:35">[<expr pos:start="65:34" pos:end="65:34"><name pos:start="65:34" pos:end="65:34">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:48"><expr pos:start="67:13" pos:end="67:47"><name pos:start="67:13" pos:end="67:14">of</name>  <operator pos:start="67:17" pos:end="67:17">=</operator> <name pos:start="67:19" pos:end="67:47"><name pos:start="67:19" pos:end="67:30">output_files</name><index pos:start="67:31" pos:end="67:47">[<expr pos:start="67:32" pos:end="67:46"><name pos:start="67:32" pos:end="67:46"><name pos:start="67:32" pos:end="67:34">ost</name><operator pos:start="67:35" pos:end="67:36">-&gt;</operator><name pos:start="67:37" pos:end="67:46">file_index</name></name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:53"><expr pos:start="69:13" pos:end="69:52"><name pos:start="69:13" pos:end="69:14">os</name>  <operator pos:start="69:17" pos:end="69:17">=</operator> <name pos:start="69:19" pos:end="69:47"><name pos:start="69:19" pos:end="69:30">output_files</name><index pos:start="69:31" pos:end="69:47">[<expr pos:start="69:32" pos:end="69:46"><name pos:start="69:32" pos:end="69:46"><name pos:start="69:32" pos:end="69:34">ost</name><operator pos:start="69:35" pos:end="69:36">-&gt;</operator><name pos:start="69:37" pos:end="69:46">file_index</name></name></expr>]</index></name><operator pos:start="69:48" pos:end="69:49">-&gt;</operator><name pos:start="69:50" pos:end="69:52">ctx</name></expr>;</expr_stmt>

            <if_stmt pos:start="71:13" pos:end="75:25"><if pos:start="71:13" pos:end="75:25">if <condition pos:start="71:16" pos:end="73:68">(<expr pos:start="71:17" pos:end="73:67"><name pos:start="71:17" pos:end="71:43"><name pos:start="71:17" pos:end="71:19">ost</name><operator pos:start="71:20" pos:end="71:21">-&gt;</operator><name pos:start="71:22" pos:end="71:43">is_past_recording_time</name></name> <operator pos:start="71:45" pos:end="71:46">||</operator>

                <operator pos:start="73:17" pos:end="73:17">(</operator><name pos:start="73:18" pos:end="73:23"><name pos:start="73:18" pos:end="73:19">os</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:23">pb</name></name> <operator pos:start="73:25" pos:end="73:26">&amp;&amp;</operator> <call pos:start="73:28" pos:end="73:44"><name pos:start="73:28" pos:end="73:36">avio_tell</name><argument_list pos:start="73:37" pos:end="73:44">(<argument pos:start="73:38" pos:end="73:43"><expr pos:start="73:38" pos:end="73:43"><name pos:start="73:38" pos:end="73:43"><name pos:start="73:38" pos:end="73:39">os</name><operator pos:start="73:40" pos:end="73:41">-&gt;</operator><name pos:start="73:42" pos:end="73:43">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="73:46" pos:end="73:47">&gt;=</operator> <name pos:start="73:49" pos:end="73:66"><name pos:start="73:49" pos:end="73:50">of</name><operator pos:start="73:51" pos:end="73:52">-&gt;</operator><name pos:start="73:53" pos:end="73:66">limit_filesize</name></name><operator pos:start="73:67" pos:end="73:67">)</operator></expr>)</condition><block type="pseudo" pos:start="75:17" pos:end="75:25"><block_content pos:start="75:17" pos:end="75:25">

                <continue pos:start="75:17" pos:end="75:25">continue;</continue></block_content></block></if></if_stmt>

            <if_stmt pos:start="77:13" pos:end="87:13"><if pos:start="77:13" pos:end="87:13">if <condition pos:start="77:16" pos:end="77:52">(<expr pos:start="77:17" pos:end="77:51"><name pos:start="77:17" pos:end="77:33"><name pos:start="77:17" pos:end="77:19">ost</name><operator pos:start="77:20" pos:end="77:21">-&gt;</operator><name pos:start="77:22" pos:end="77:33">frame_number</name></name> <operator pos:start="77:35" pos:end="77:35">&gt;</operator> <name pos:start="77:37" pos:end="77:51"><name pos:start="77:37" pos:end="77:39">ost</name><operator pos:start="77:40" pos:end="77:41">-&gt;</operator><name pos:start="77:42" pos:end="77:51">max_frames</name></name></expr>)</condition> <block pos:start="77:54" pos:end="87:13">{<block_content pos:start="79:17" pos:end="85:25">

                <decl_stmt pos:start="79:17" pos:end="79:22"><decl pos:start="79:17" pos:end="79:21"><type pos:start="79:17" pos:end="79:19"><name pos:start="79:17" pos:end="79:19">int</name></type> <name pos:start="79:21" pos:end="79:21">j</name></decl>;</decl_stmt>

                <for pos:start="81:17" pos:end="83:82">for <control pos:start="81:21" pos:end="81:57">(<init pos:start="81:22" pos:end="81:27"><expr pos:start="81:22" pos:end="81:26"><name pos:start="81:22" pos:end="81:22">j</name> <operator pos:start="81:24" pos:end="81:24">=</operator> <literal type="number" pos:start="81:26" pos:end="81:26">0</literal></expr>;</init> <condition pos:start="81:29" pos:end="81:52"><expr pos:start="81:29" pos:end="81:51"><name pos:start="81:29" pos:end="81:29">j</name> <operator pos:start="81:31" pos:end="81:31">&lt;</operator> <name pos:start="81:33" pos:end="81:51"><name pos:start="81:33" pos:end="81:34">of</name><operator pos:start="81:35" pos:end="81:36">-&gt;</operator><name pos:start="81:37" pos:end="81:39">ctx</name><operator pos:start="81:40" pos:end="81:41">-&gt;</operator><name pos:start="81:42" pos:end="81:51">nb_streams</name></name></expr>;</condition> <incr pos:start="81:54" pos:end="81:56"><expr pos:start="81:54" pos:end="81:56"><name pos:start="81:54" pos:end="81:54">j</name><operator pos:start="81:55" pos:end="81:56">++</operator></expr></incr>)</control><block type="pseudo" pos:start="83:21" pos:end="83:82"><block_content pos:start="83:21" pos:end="83:82">

                    <expr_stmt pos:start="83:21" pos:end="83:82"><expr pos:start="83:21" pos:end="83:81"><name pos:start="83:21" pos:end="83:53"><name pos:start="83:21" pos:end="83:34">output_streams</name><index pos:start="83:35" pos:end="83:53">[<expr pos:start="83:36" pos:end="83:52"><name pos:start="83:36" pos:end="83:48"><name pos:start="83:36" pos:end="83:37">of</name><operator pos:start="83:38" pos:end="83:39">-&gt;</operator><name pos:start="83:40" pos:end="83:48">ost_index</name></name> <operator pos:start="83:50" pos:end="83:50">+</operator> <name pos:start="83:52" pos:end="83:52">j</name></expr>]</index></name><operator pos:start="83:54" pos:end="83:55">-&gt;</operator><name pos:start="83:56" pos:end="83:77">is_past_recording_time</name> <operator pos:start="83:79" pos:end="83:79">=</operator> <literal type="number" pos:start="83:81" pos:end="83:81">1</literal></expr>;</expr_stmt></block_content></block></for>

                <continue pos:start="85:17" pos:end="85:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:36"><expr pos:start="89:13" pos:end="89:35"><name pos:start="89:13" pos:end="89:31">past_recording_time</name> <operator pos:start="89:33" pos:end="89:33">=</operator> <literal type="number" pos:start="89:35" pos:end="89:35">0</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="93:9" pos:end="95:18"><if pos:start="93:9" pos:end="95:18">if <condition pos:start="93:12" pos:end="93:32">(<expr pos:start="93:13" pos:end="93:31"><name pos:start="93:13" pos:end="93:31">past_recording_time</name></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:18"><block_content pos:start="95:13" pos:end="95:18">

            <break pos:start="95:13" pos:end="95:18">break;</break></block_content></block></if></if_stmt>



        <comment type="block" pos:start="99:9" pos:end="101:33">/* select the stream that we must read now by looking at the

           smallest output pts */</comment>

        <expr_stmt pos:start="103:9" pos:end="103:24"><expr pos:start="103:9" pos:end="103:23"><name pos:start="103:9" pos:end="103:18">file_index</name> <operator pos:start="103:20" pos:end="103:20">=</operator> <operator pos:start="103:22" pos:end="103:22">-</operator><literal type="number" pos:start="103:23" pos:end="103:23">1</literal></expr>;</expr_stmt>

        <for pos:start="105:9" pos:end="129:9">for <control pos:start="105:13" pos:end="105:46">(<init pos:start="105:14" pos:end="105:19"><expr pos:start="105:14" pos:end="105:18"><name pos:start="105:14" pos:end="105:14">i</name> <operator pos:start="105:16" pos:end="105:16">=</operator> <literal type="number" pos:start="105:18" pos:end="105:18">0</literal></expr>;</init> <condition pos:start="105:21" pos:end="105:41"><expr pos:start="105:21" pos:end="105:40"><name pos:start="105:21" pos:end="105:21">i</name> <operator pos:start="105:23" pos:end="105:23">&lt;</operator> <name pos:start="105:25" pos:end="105:40">nb_input_streams</name></expr>;</condition> <incr pos:start="105:43" pos:end="105:45"><expr pos:start="105:43" pos:end="105:45"><name pos:start="105:43" pos:end="105:43">i</name><operator pos:start="105:44" pos:end="105:45">++</operator></expr></incr>)</control> <block pos:start="105:48" pos:end="129:9">{<block_content pos:start="107:13" pos:end="127:13">

            <decl_stmt pos:start="107:13" pos:end="107:25"><decl pos:start="107:13" pos:end="107:24"><type pos:start="107:13" pos:end="107:19"><name pos:start="107:13" pos:end="107:19">int64_t</name></type> <name pos:start="107:21" pos:end="107:24">ipts</name></decl>;</decl_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:35"><expr pos:start="109:13" pos:end="109:34"><name pos:start="109:13" pos:end="109:15">ist</name> <operator pos:start="109:17" pos:end="109:17">=</operator> <name pos:start="109:19" pos:end="109:34"><name pos:start="109:19" pos:end="109:31">input_streams</name><index pos:start="109:32" pos:end="109:34">[<expr pos:start="109:33" pos:end="109:33"><name pos:start="109:33" pos:end="109:33">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:33"><expr pos:start="111:13" pos:end="111:32"><name pos:start="111:13" pos:end="111:16">ipts</name> <operator pos:start="111:18" pos:end="111:18">=</operator> <name pos:start="111:20" pos:end="111:32"><name pos:start="111:20" pos:end="111:22">ist</name><operator pos:start="111:23" pos:end="111:24">-&gt;</operator><name pos:start="111:25" pos:end="111:32">last_dts</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="113:13" pos:end="115:25"><if pos:start="113:13" pos:end="115:25">if <condition pos:start="113:16" pos:end="113:59">(<expr pos:start="113:17" pos:end="113:58"><name pos:start="113:17" pos:end="113:28"><name pos:start="113:17" pos:end="113:19">ist</name><operator pos:start="113:20" pos:end="113:21">-&gt;</operator><name pos:start="113:22" pos:end="113:28">discard</name></name> <operator pos:start="113:30" pos:end="113:31">||</operator> <name pos:start="113:33" pos:end="113:58"><name pos:start="113:33" pos:end="113:41">no_packet</name><index pos:start="113:42" pos:end="113:58">[<expr pos:start="113:43" pos:end="113:57"><name pos:start="113:43" pos:end="113:57"><name pos:start="113:43" pos:end="113:45">ist</name><operator pos:start="113:46" pos:end="113:47">-&gt;</operator><name pos:start="113:48" pos:end="113:57">file_index</name></name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="115:17" pos:end="115:25"><block_content pos:start="115:17" pos:end="115:25">

                <continue pos:start="115:17" pos:end="115:25">continue;</continue></block_content></block></if></if_stmt>

            <if_stmt pos:start="117:13" pos:end="127:13"><if pos:start="117:13" pos:end="127:13">if <condition pos:start="117:16" pos:end="117:59">(<expr pos:start="117:17" pos:end="117:58"><operator pos:start="117:17" pos:end="117:17">!</operator><name pos:start="117:18" pos:end="117:45"><name pos:start="117:18" pos:end="117:28">input_files</name><index pos:start="117:29" pos:end="117:45">[<expr pos:start="117:30" pos:end="117:44"><name pos:start="117:30" pos:end="117:44"><name pos:start="117:30" pos:end="117:32">ist</name><operator pos:start="117:33" pos:end="117:34">-&gt;</operator><name pos:start="117:35" pos:end="117:44">file_index</name></name></expr>]</index></name><operator pos:start="117:46" pos:end="117:47">-&gt;</operator><name pos:start="117:48" pos:end="117:58">eof_reached</name></expr>)</condition> <block pos:start="117:61" pos:end="127:13">{<block_content pos:start="119:17" pos:end="125:17">

                <if_stmt pos:start="119:17" pos:end="125:17"><if pos:start="119:17" pos:end="125:17">if <condition pos:start="119:20" pos:end="119:36">(<expr pos:start="119:21" pos:end="119:35"><name pos:start="119:21" pos:end="119:24">ipts</name> <operator pos:start="119:26" pos:end="119:26">&lt;</operator> <name pos:start="119:28" pos:end="119:35">ipts_min</name></expr>)</condition> <block pos:start="119:38" pos:end="125:17">{<block_content pos:start="121:21" pos:end="123:49">

                    <expr_stmt pos:start="121:21" pos:end="121:36"><expr pos:start="121:21" pos:end="121:35"><name pos:start="121:21" pos:end="121:28">ipts_min</name> <operator pos:start="121:30" pos:end="121:30">=</operator> <name pos:start="121:32" pos:end="121:35">ipts</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="123:21" pos:end="123:49"><expr pos:start="123:21" pos:end="123:48"><name pos:start="123:21" pos:end="123:30">file_index</name> <operator pos:start="123:32" pos:end="123:32">=</operator> <name pos:start="123:34" pos:end="123:48"><name pos:start="123:34" pos:end="123:36">ist</name><operator pos:start="123:37" pos:end="123:38">-&gt;</operator><name pos:start="123:39" pos:end="123:48">file_index</name></name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <comment type="block" pos:start="131:9" pos:end="131:37">/* if none, if is finished */</comment>

        <if_stmt pos:start="133:9" pos:end="149:9"><if pos:start="133:9" pos:end="149:9">if <condition pos:start="133:12" pos:end="133:27">(<expr pos:start="133:13" pos:end="133:26"><name pos:start="133:13" pos:end="133:22">file_index</name> <operator pos:start="133:24" pos:end="133:24">&lt;</operator> <literal type="number" pos:start="133:26" pos:end="133:26">0</literal></expr>)</condition> <block pos:start="133:29" pos:end="149:9">{<block_content pos:start="135:13" pos:end="147:18">

            <if_stmt pos:start="135:13" pos:end="145:13"><if pos:start="135:13" pos:end="145:13">if <condition pos:start="135:16" pos:end="135:32">(<expr pos:start="135:17" pos:end="135:31"><name pos:start="135:17" pos:end="135:31">no_packet_count</name></expr>)</condition> <block pos:start="135:34" pos:end="145:13">{<block_content pos:start="137:17" pos:end="143:25">

                <expr_stmt pos:start="137:17" pos:end="137:36"><expr pos:start="137:17" pos:end="137:35"><name pos:start="137:17" pos:end="137:31">no_packet_count</name> <operator pos:start="137:33" pos:end="137:33">=</operator> <literal type="number" pos:start="137:35" pos:end="137:35">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="139:17" pos:end="139:53"><expr pos:start="139:17" pos:end="139:52"><call pos:start="139:17" pos:end="139:52"><name pos:start="139:17" pos:end="139:22">memset</name><argument_list pos:start="139:23" pos:end="139:52">(<argument pos:start="139:24" pos:end="139:32"><expr pos:start="139:24" pos:end="139:32"><name pos:start="139:24" pos:end="139:32">no_packet</name></expr></argument>, <argument pos:start="139:35" pos:end="139:35"><expr pos:start="139:35" pos:end="139:35"><literal type="number" pos:start="139:35" pos:end="139:35">0</literal></expr></argument>, <argument pos:start="139:38" pos:end="139:51"><expr pos:start="139:38" pos:end="139:51"><name pos:start="139:38" pos:end="139:51">nb_input_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="141:17" pos:end="141:30"><expr pos:start="141:17" pos:end="141:29"><call pos:start="141:17" pos:end="141:29"><name pos:start="141:17" pos:end="141:22">usleep</name><argument_list pos:start="141:23" pos:end="141:29">(<argument pos:start="141:24" pos:end="141:28"><expr pos:start="141:24" pos:end="141:28"><literal type="number" pos:start="141:24" pos:end="141:28">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="143:17" pos:end="143:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <break pos:start="147:13" pos:end="147:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="153:9" pos:end="153:60">/* read a frame from it and output it in the fifo */</comment>

        <expr_stmt pos:start="155:9" pos:end="155:43"><expr pos:start="155:9" pos:end="155:42"><name pos:start="155:9" pos:end="155:10">is</name>  <operator pos:start="155:13" pos:end="155:13">=</operator> <name pos:start="155:15" pos:end="155:37"><name pos:start="155:15" pos:end="155:25">input_files</name><index pos:start="155:26" pos:end="155:37">[<expr pos:start="155:27" pos:end="155:36"><name pos:start="155:27" pos:end="155:36">file_index</name></expr>]</index></name><operator pos:start="155:38" pos:end="155:39">-&gt;</operator><name pos:start="155:40" pos:end="155:42">ctx</name></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:38"><expr pos:start="157:9" pos:end="157:37"><name pos:start="157:9" pos:end="157:11">ret</name> <operator pos:start="157:13" pos:end="157:13">=</operator> <call pos:start="157:15" pos:end="157:37"><name pos:start="157:15" pos:end="157:27">av_read_frame</name><argument_list pos:start="157:28" pos:end="157:37">(<argument pos:start="157:29" pos:end="157:30"><expr pos:start="157:29" pos:end="157:30"><name pos:start="157:29" pos:end="157:30">is</name></expr></argument>, <argument pos:start="157:33" pos:end="157:36"><expr pos:start="157:33" pos:end="157:36"><operator pos:start="157:33" pos:end="157:33">&amp;</operator><name pos:start="157:34" pos:end="157:36">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="159:9" pos:end="167:9"><if pos:start="159:9" pos:end="167:9">if <condition pos:start="159:12" pos:end="159:35">(<expr pos:start="159:13" pos:end="159:34"><name pos:start="159:13" pos:end="159:15">ret</name> <operator pos:start="159:17" pos:end="159:18">==</operator> <call pos:start="159:20" pos:end="159:34"><name pos:start="159:20" pos:end="159:26">AVERROR</name><argument_list pos:start="159:27" pos:end="159:34">(<argument pos:start="159:28" pos:end="159:33"><expr pos:start="159:28" pos:end="159:33"><name pos:start="159:28" pos:end="159:33">EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="159:37" pos:end="167:9">{<block_content pos:start="161:13" pos:end="165:21">

            <expr_stmt pos:start="161:13" pos:end="161:38"><expr pos:start="161:13" pos:end="161:37"><name pos:start="161:13" pos:end="161:33"><name pos:start="161:13" pos:end="161:21">no_packet</name><index pos:start="161:22" pos:end="161:33">[<expr pos:start="161:23" pos:end="161:32"><name pos:start="161:23" pos:end="161:32">file_index</name></expr>]</index></name> <operator pos:start="161:35" pos:end="161:35">=</operator> <literal type="number" pos:start="161:37" pos:end="161:37">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:30"><expr pos:start="163:13" pos:end="163:29"><name pos:start="163:13" pos:end="163:27">no_packet_count</name><operator pos:start="163:28" pos:end="163:29">++</operator></expr>;</expr_stmt>

            <continue pos:start="165:13" pos:end="165:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="169:9" pos:end="195:9"><if pos:start="169:9" pos:end="195:9">if <condition pos:start="169:12" pos:end="169:20">(<expr pos:start="169:13" pos:end="169:19"><name pos:start="169:13" pos:end="169:15">ret</name> <operator pos:start="169:17" pos:end="169:17">&lt;</operator> <literal type="number" pos:start="169:19" pos:end="169:19">0</literal></expr>)</condition> <block pos:start="169:22" pos:end="195:9">{<block_content pos:start="171:13" pos:end="193:25">

            <expr_stmt pos:start="171:13" pos:end="171:53"><expr pos:start="171:13" pos:end="171:52"><name pos:start="171:13" pos:end="171:35"><name pos:start="171:13" pos:end="171:23">input_files</name><index pos:start="171:24" pos:end="171:35">[<expr pos:start="171:25" pos:end="171:34"><name pos:start="171:25" pos:end="171:34">file_index</name></expr>]</index></name><operator pos:start="171:36" pos:end="171:37">-&gt;</operator><name pos:start="171:38" pos:end="171:48">eof_reached</name> <operator pos:start="171:50" pos:end="171:50">=</operator> <literal type="number" pos:start="171:52" pos:end="171:52">1</literal></expr>;</expr_stmt>



            <for pos:start="175:13" pos:end="183:13">for <control pos:start="175:17" pos:end="175:69">(<init pos:start="175:18" pos:end="175:23"><expr pos:start="175:18" pos:end="175:22"><name pos:start="175:18" pos:end="175:18">i</name> <operator pos:start="175:20" pos:end="175:20">=</operator> <literal type="number" pos:start="175:22" pos:end="175:22">0</literal></expr>;</init> <condition pos:start="175:25" pos:end="175:64"><expr pos:start="175:25" pos:end="175:63"><name pos:start="175:25" pos:end="175:25">i</name> <operator pos:start="175:27" pos:end="175:27">&lt;</operator> <name pos:start="175:29" pos:end="175:51"><name pos:start="175:29" pos:end="175:39">input_files</name><index pos:start="175:40" pos:end="175:51">[<expr pos:start="175:41" pos:end="175:50"><name pos:start="175:41" pos:end="175:50">file_index</name></expr>]</index></name><operator pos:start="175:52" pos:end="175:53">-&gt;</operator><name pos:start="175:54" pos:end="175:63">nb_streams</name></expr>;</condition> <incr pos:start="175:66" pos:end="175:68"><expr pos:start="175:66" pos:end="175:68"><name pos:start="175:66" pos:end="175:66">i</name><operator pos:start="175:67" pos:end="175:68">++</operator></expr></incr>)</control> <block pos:start="175:71" pos:end="183:13">{<block_content pos:start="177:17" pos:end="181:45">

                <expr_stmt pos:start="177:17" pos:end="177:76"><expr pos:start="177:17" pos:end="177:75"><name pos:start="177:17" pos:end="177:19">ist</name> <operator pos:start="177:21" pos:end="177:21">=</operator> <name pos:start="177:23" pos:end="177:75"><name pos:start="177:23" pos:end="177:35">input_streams</name><index pos:start="177:36" pos:end="177:75">[<expr pos:start="177:37" pos:end="177:74"><name pos:start="177:37" pos:end="177:59"><name pos:start="177:37" pos:end="177:47">input_files</name><index pos:start="177:48" pos:end="177:59">[<expr pos:start="177:49" pos:end="177:58"><name pos:start="177:49" pos:end="177:58">file_index</name></expr>]</index></name><operator pos:start="177:60" pos:end="177:61">-&gt;</operator><name pos:start="177:62" pos:end="177:70">ist_index</name> <operator pos:start="177:72" pos:end="177:72">+</operator> <name pos:start="177:74" pos:end="177:74">i</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="179:17" pos:end="181:45"><if pos:start="179:17" pos:end="181:45">if <condition pos:start="179:20" pos:end="179:41">(<expr pos:start="179:21" pos:end="179:40"><name pos:start="179:21" pos:end="179:40"><name pos:start="179:21" pos:end="179:23">ist</name><operator pos:start="179:24" pos:end="179:25">-&gt;</operator><name pos:start="179:26" pos:end="179:40">decoding_needed</name></name></expr>)</condition><block type="pseudo" pos:start="181:21" pos:end="181:45"><block_content pos:start="181:21" pos:end="181:45">

                    <expr_stmt pos:start="181:21" pos:end="181:45"><expr pos:start="181:21" pos:end="181:44"><call pos:start="181:21" pos:end="181:44"><name pos:start="181:21" pos:end="181:33">output_packet</name><argument_list pos:start="181:34" pos:end="181:44">(<argument pos:start="181:35" pos:end="181:37"><expr pos:start="181:35" pos:end="181:37"><name pos:start="181:35" pos:end="181:37">ist</name></expr></argument>, <argument pos:start="181:40" pos:end="181:43"><expr pos:start="181:40" pos:end="181:43"><name pos:start="181:40" pos:end="181:43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></for>



            <if_stmt pos:start="187:13" pos:end="193:25"><if pos:start="187:13" pos:end="189:22">if <condition pos:start="187:16" pos:end="187:29">(<expr pos:start="187:17" pos:end="187:28"><name pos:start="187:17" pos:end="187:28">opt_shortest</name></expr>)</condition><block type="pseudo" pos:start="189:17" pos:end="189:22"><block_content pos:start="189:17" pos:end="189:22">

                <break pos:start="189:17" pos:end="189:22">break;</break></block_content></block></if>

            <else pos:start="191:13" pos:end="193:25">else<block type="pseudo" pos:start="193:17" pos:end="193:25"><block_content pos:start="193:17" pos:end="193:25">

                <continue pos:start="193:17" pos:end="193:25">continue;</continue></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="199:9" pos:end="199:28"><expr pos:start="199:9" pos:end="199:27"><name pos:start="199:9" pos:end="199:23">no_packet_count</name> <operator pos:start="199:25" pos:end="199:25">=</operator> <literal type="number" pos:start="199:27" pos:end="199:27">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:45"><expr pos:start="201:9" pos:end="201:44"><call pos:start="201:9" pos:end="201:44"><name pos:start="201:9" pos:end="201:14">memset</name><argument_list pos:start="201:15" pos:end="201:44">(<argument pos:start="201:16" pos:end="201:24"><expr pos:start="201:16" pos:end="201:24"><name pos:start="201:16" pos:end="201:24">no_packet</name></expr></argument>, <argument pos:start="201:27" pos:end="201:27"><expr pos:start="201:27" pos:end="201:27"><literal type="number" pos:start="201:27" pos:end="201:27">0</literal></expr></argument>, <argument pos:start="201:30" pos:end="201:43"><expr pos:start="201:30" pos:end="201:43"><name pos:start="201:30" pos:end="201:43">nb_input_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="205:9" pos:end="211:9"><if pos:start="205:9" pos:end="211:9">if <condition pos:start="205:12" pos:end="205:24">(<expr pos:start="205:13" pos:end="205:23"><name pos:start="205:13" pos:end="205:23">do_pkt_dump</name></expr>)</condition> <block pos:start="205:26" pos:end="211:9">{<block_content pos:start="207:13" pos:end="209:60">

            <expr_stmt pos:start="207:13" pos:end="209:60"><expr pos:start="207:13" pos:end="209:59"><call pos:start="207:13" pos:end="209:59"><name pos:start="207:13" pos:end="207:28">av_pkt_dump_log2</name><argument_list pos:start="207:29" pos:end="209:59">(<argument pos:start="207:30" pos:end="207:33"><expr pos:start="207:30" pos:end="207:33"><name pos:start="207:30" pos:end="207:33">NULL</name></expr></argument>, <argument pos:start="207:36" pos:end="207:47"><expr pos:start="207:36" pos:end="207:47"><name pos:start="207:36" pos:end="207:47">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="207:50" pos:end="207:53"><expr pos:start="207:50" pos:end="207:53"><operator pos:start="207:50" pos:end="207:50">&amp;</operator><name pos:start="207:51" pos:end="207:53">pkt</name></expr></argument>, <argument pos:start="207:56" pos:end="207:66"><expr pos:start="207:56" pos:end="207:66"><name pos:start="207:56" pos:end="207:66">do_hex_dump</name></expr></argument>,

                             <argument pos:start="209:30" pos:end="209:58"><expr pos:start="209:30" pos:end="209:58"><name pos:start="209:30" pos:end="209:58"><name pos:start="209:30" pos:end="209:31">is</name><operator pos:start="209:32" pos:end="209:33">-&gt;</operator><name pos:start="209:34" pos:end="209:40">streams</name><index pos:start="209:41" pos:end="209:58">[<expr pos:start="209:42" pos:end="209:57"><name pos:start="209:42" pos:end="209:57"><name pos:start="209:42" pos:end="209:44">pkt</name><operator pos:start="209:45" pos:end="209:45">.</operator><name pos:start="209:46" pos:end="209:57">stream_index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="213:9" pos:end="215:52">/* the following test is needed in case new streams appear

           dynamically in stream : we ignore them */</comment>

        <if_stmt pos:start="217:9" pos:end="219:32"><if pos:start="217:9" pos:end="219:32">if <condition pos:start="217:12" pos:end="217:68">(<expr pos:start="217:13" pos:end="217:67"><name pos:start="217:13" pos:end="217:28"><name pos:start="217:13" pos:end="217:15">pkt</name><operator pos:start="217:16" pos:end="217:16">.</operator><name pos:start="217:17" pos:end="217:28">stream_index</name></name> <operator pos:start="217:30" pos:end="217:31">&gt;=</operator> <name pos:start="217:33" pos:end="217:55"><name pos:start="217:33" pos:end="217:43">input_files</name><index pos:start="217:44" pos:end="217:55">[<expr pos:start="217:45" pos:end="217:54"><name pos:start="217:45" pos:end="217:54">file_index</name></expr>]</index></name><operator pos:start="217:56" pos:end="217:57">-&gt;</operator><name pos:start="217:58" pos:end="217:67">nb_streams</name></expr>)</condition><block type="pseudo" pos:start="219:13" pos:end="219:32"><block_content pos:start="219:13" pos:end="219:32">

            <goto pos:start="219:13" pos:end="219:32">goto <name pos:start="219:18" pos:end="219:31">discard_packet</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="221:9" pos:end="221:74"><expr pos:start="221:9" pos:end="221:73"><name pos:start="221:9" pos:end="221:17">ist_index</name> <operator pos:start="221:19" pos:end="221:19">=</operator> <name pos:start="221:21" pos:end="221:43"><name pos:start="221:21" pos:end="221:31">input_files</name><index pos:start="221:32" pos:end="221:43">[<expr pos:start="221:33" pos:end="221:42"><name pos:start="221:33" pos:end="221:42">file_index</name></expr>]</index></name><operator pos:start="221:44" pos:end="221:45">-&gt;</operator><name pos:start="221:46" pos:end="221:54">ist_index</name> <operator pos:start="221:56" pos:end="221:56">+</operator> <name pos:start="221:58" pos:end="221:73"><name pos:start="221:58" pos:end="221:60">pkt</name><operator pos:start="221:61" pos:end="221:61">.</operator><name pos:start="221:62" pos:end="221:73">stream_index</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="223:9" pos:end="223:39"><expr pos:start="223:9" pos:end="223:38"><name pos:start="223:9" pos:end="223:11">ist</name> <operator pos:start="223:13" pos:end="223:13">=</operator> <name pos:start="223:15" pos:end="223:38"><name pos:start="223:15" pos:end="223:27">input_streams</name><index pos:start="223:28" pos:end="223:38">[<expr pos:start="223:29" pos:end="223:37"><name pos:start="223:29" pos:end="223:37">ist_index</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="225:9" pos:end="227:32"><if pos:start="225:9" pos:end="227:32">if <condition pos:start="225:12" pos:end="225:25">(<expr pos:start="225:13" pos:end="225:24"><name pos:start="225:13" pos:end="225:24"><name pos:start="225:13" pos:end="225:15">ist</name><operator pos:start="225:16" pos:end="225:17">-&gt;</operator><name pos:start="225:18" pos:end="225:24">discard</name></name></expr>)</condition><block type="pseudo" pos:start="227:13" pos:end="227:32"><block_content pos:start="227:13" pos:end="227:32">

            <goto pos:start="227:13" pos:end="227:32">goto <name pos:start="227:18" pos:end="227:31">discard_packet</name>;</goto></block_content></block></if></if_stmt>



        <if_stmt pos:start="231:9" pos:end="233:113"><if pos:start="231:9" pos:end="233:113">if <condition pos:start="231:12" pos:end="231:38">(<expr pos:start="231:13" pos:end="231:37"><name pos:start="231:13" pos:end="231:19"><name pos:start="231:13" pos:end="231:15">pkt</name><operator pos:start="231:16" pos:end="231:16">.</operator><name pos:start="231:17" pos:end="231:19">dts</name></name> <operator pos:start="231:21" pos:end="231:22">!=</operator> <name pos:start="231:24" pos:end="231:37">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="233:13" pos:end="233:113"><block_content pos:start="233:13" pos:end="233:113">

            <expr_stmt pos:start="233:13" pos:end="233:113"><expr pos:start="233:13" pos:end="233:112"><name pos:start="233:13" pos:end="233:19"><name pos:start="233:13" pos:end="233:15">pkt</name><operator pos:start="233:16" pos:end="233:16">.</operator><name pos:start="233:17" pos:end="233:19">dts</name></name> <operator pos:start="233:21" pos:end="233:22">+=</operator> <call pos:start="233:24" pos:end="233:112"><name pos:start="233:24" pos:end="233:35">av_rescale_q</name><argument_list pos:start="233:36" pos:end="233:112">(<argument pos:start="233:37" pos:end="233:75"><expr pos:start="233:37" pos:end="233:75"><name pos:start="233:37" pos:end="233:64"><name pos:start="233:37" pos:end="233:47">input_files</name><index pos:start="233:48" pos:end="233:64">[<expr pos:start="233:49" pos:end="233:63"><name pos:start="233:49" pos:end="233:63"><name pos:start="233:49" pos:end="233:51">ist</name><operator pos:start="233:52" pos:end="233:53">-&gt;</operator><name pos:start="233:54" pos:end="233:63">file_index</name></name></expr>]</index></name><operator pos:start="233:65" pos:end="233:66">-&gt;</operator><name pos:start="233:67" pos:end="233:75">ts_offset</name></expr></argument>, <argument pos:start="233:78" pos:end="233:91"><expr pos:start="233:78" pos:end="233:91"><name pos:start="233:78" pos:end="233:91">AV_TIME_BASE_Q</name></expr></argument>, <argument pos:start="233:94" pos:end="233:111"><expr pos:start="233:94" pos:end="233:111"><name pos:start="233:94" pos:end="233:111"><name pos:start="233:94" pos:end="233:96">ist</name><operator pos:start="233:97" pos:end="233:98">-&gt;</operator><name pos:start="233:99" pos:end="233:100">st</name><operator pos:start="233:101" pos:end="233:102">-&gt;</operator><name pos:start="233:103" pos:end="233:111">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="235:9" pos:end="237:113"><if pos:start="235:9" pos:end="237:113">if <condition pos:start="235:12" pos:end="235:38">(<expr pos:start="235:13" pos:end="235:37"><name pos:start="235:13" pos:end="235:19"><name pos:start="235:13" pos:end="235:15">pkt</name><operator pos:start="235:16" pos:end="235:16">.</operator><name pos:start="235:17" pos:end="235:19">pts</name></name> <operator pos:start="235:21" pos:end="235:22">!=</operator> <name pos:start="235:24" pos:end="235:37">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="237:13" pos:end="237:113"><block_content pos:start="237:13" pos:end="237:113">

            <expr_stmt pos:start="237:13" pos:end="237:113"><expr pos:start="237:13" pos:end="237:112"><name pos:start="237:13" pos:end="237:19"><name pos:start="237:13" pos:end="237:15">pkt</name><operator pos:start="237:16" pos:end="237:16">.</operator><name pos:start="237:17" pos:end="237:19">pts</name></name> <operator pos:start="237:21" pos:end="237:22">+=</operator> <call pos:start="237:24" pos:end="237:112"><name pos:start="237:24" pos:end="237:35">av_rescale_q</name><argument_list pos:start="237:36" pos:end="237:112">(<argument pos:start="237:37" pos:end="237:75"><expr pos:start="237:37" pos:end="237:75"><name pos:start="237:37" pos:end="237:64"><name pos:start="237:37" pos:end="237:47">input_files</name><index pos:start="237:48" pos:end="237:64">[<expr pos:start="237:49" pos:end="237:63"><name pos:start="237:49" pos:end="237:63"><name pos:start="237:49" pos:end="237:51">ist</name><operator pos:start="237:52" pos:end="237:53">-&gt;</operator><name pos:start="237:54" pos:end="237:63">file_index</name></name></expr>]</index></name><operator pos:start="237:65" pos:end="237:66">-&gt;</operator><name pos:start="237:67" pos:end="237:75">ts_offset</name></expr></argument>, <argument pos:start="237:78" pos:end="237:91"><expr pos:start="237:78" pos:end="237:91"><name pos:start="237:78" pos:end="237:91">AV_TIME_BASE_Q</name></expr></argument>, <argument pos:start="237:94" pos:end="237:111"><expr pos:start="237:94" pos:end="237:111"><name pos:start="237:94" pos:end="237:111"><name pos:start="237:94" pos:end="237:96">ist</name><operator pos:start="237:97" pos:end="237:98">-&gt;</operator><name pos:start="237:99" pos:end="237:100">st</name><operator pos:start="237:101" pos:end="237:102">-&gt;</operator><name pos:start="237:103" pos:end="237:111">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="241:9" pos:end="243:37"><if pos:start="241:9" pos:end="243:37">if <condition pos:start="241:12" pos:end="241:38">(<expr pos:start="241:13" pos:end="241:37"><name pos:start="241:13" pos:end="241:19"><name pos:start="241:13" pos:end="241:15">pkt</name><operator pos:start="241:16" pos:end="241:16">.</operator><name pos:start="241:17" pos:end="241:19">pts</name></name> <operator pos:start="241:21" pos:end="241:22">!=</operator> <name pos:start="241:24" pos:end="241:37">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="243:13" pos:end="243:37"><block_content pos:start="243:13" pos:end="243:37">

            <expr_stmt pos:start="243:13" pos:end="243:37"><expr pos:start="243:13" pos:end="243:36"><name pos:start="243:13" pos:end="243:19"><name pos:start="243:13" pos:end="243:15">pkt</name><operator pos:start="243:16" pos:end="243:16">.</operator><name pos:start="243:17" pos:end="243:19">pts</name></name> <operator pos:start="243:21" pos:end="243:22">*=</operator> <name pos:start="243:24" pos:end="243:36"><name pos:start="243:24" pos:end="243:26">ist</name><operator pos:start="243:27" pos:end="243:28">-&gt;</operator><name pos:start="243:29" pos:end="243:36">ts_scale</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="245:9" pos:end="247:37"><if pos:start="245:9" pos:end="247:37">if <condition pos:start="245:12" pos:end="245:38">(<expr pos:start="245:13" pos:end="245:37"><name pos:start="245:13" pos:end="245:19"><name pos:start="245:13" pos:end="245:15">pkt</name><operator pos:start="245:16" pos:end="245:16">.</operator><name pos:start="245:17" pos:end="245:19">dts</name></name> <operator pos:start="245:21" pos:end="245:22">!=</operator> <name pos:start="245:24" pos:end="245:37">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="247:13" pos:end="247:37"><block_content pos:start="247:13" pos:end="247:37">

            <expr_stmt pos:start="247:13" pos:end="247:37"><expr pos:start="247:13" pos:end="247:36"><name pos:start="247:13" pos:end="247:19"><name pos:start="247:13" pos:end="247:15">pkt</name><operator pos:start="247:16" pos:end="247:16">.</operator><name pos:start="247:17" pos:end="247:19">dts</name></name> <operator pos:start="247:21" pos:end="247:22">*=</operator> <name pos:start="247:24" pos:end="247:36"><name pos:start="247:24" pos:end="247:26">ist</name><operator pos:start="247:27" pos:end="247:28">-&gt;</operator><name pos:start="247:29" pos:end="247:36">ts_scale</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="line" pos:start="251:9" pos:end="251:76">//fprintf(stderr, "next:%"PRId64" dts:%"PRId64" off:%"PRId64" %d\n",</comment>

        <comment type="line" pos:start="253:9" pos:end="253:32">//        ist-&gt;next_dts,</comment>

        <comment type="line" pos:start="255:9" pos:end="255:66">//        pkt.dts, input_files[ist-&gt;file_index].ts_offset,</comment>

        <comment type="line" pos:start="257:9" pos:end="257:46">//        ist-&gt;st-&gt;codec-&gt;codec_type);</comment>

        <if_stmt pos:start="259:9" pos:end="285:9"><if pos:start="259:9" pos:end="285:9">if <condition pos:start="259:12" pos:end="261:55">(<expr pos:start="259:13" pos:end="261:54"><name pos:start="259:13" pos:end="259:19"><name pos:start="259:13" pos:end="259:15">pkt</name><operator pos:start="259:16" pos:end="259:16">.</operator><name pos:start="259:17" pos:end="259:19">dts</name></name> <operator pos:start="259:21" pos:end="259:22">!=</operator> <name pos:start="259:24" pos:end="259:37">AV_NOPTS_VALUE</name> <operator pos:start="259:39" pos:end="259:40">&amp;&amp;</operator> <name pos:start="259:42" pos:end="259:54"><name pos:start="259:42" pos:end="259:44">ist</name><operator pos:start="259:45" pos:end="259:46">-&gt;</operator><name pos:start="259:47" pos:end="259:54">next_dts</name></name> <operator pos:start="259:56" pos:end="259:57">!=</operator> <name pos:start="259:59" pos:end="259:72">AV_NOPTS_VALUE</name>

            <operator pos:start="261:13" pos:end="261:14">&amp;&amp;</operator> <operator pos:start="261:16" pos:end="261:16">(</operator><name pos:start="261:17" pos:end="261:34"><name pos:start="261:17" pos:end="261:18">is</name><operator pos:start="261:19" pos:end="261:20">-&gt;</operator><name pos:start="261:21" pos:end="261:27">iformat</name><operator pos:start="261:28" pos:end="261:29">-&gt;</operator><name pos:start="261:30" pos:end="261:34">flags</name></name> <operator pos:start="261:36" pos:end="261:36">&amp;</operator> <name pos:start="261:38" pos:end="261:53">AVFMT_TS_DISCONT</name><operator pos:start="261:54" pos:end="261:54">)</operator></expr>)</condition> <block pos:start="261:57" pos:end="285:9">{<block_content pos:start="263:13" pos:end="283:13">

            <decl_stmt pos:start="263:13" pos:end="263:88"><decl pos:start="263:13" pos:end="263:87"><type pos:start="263:13" pos:end="263:19"><name pos:start="263:13" pos:end="263:19">int64_t</name></type> <name pos:start="263:21" pos:end="263:27">pkt_dts</name> <init pos:start="263:29" pos:end="263:87">= <expr pos:start="263:31" pos:end="263:87"><call pos:start="263:31" pos:end="263:87"><name pos:start="263:31" pos:end="263:42">av_rescale_q</name><argument_list pos:start="263:43" pos:end="263:87">(<argument pos:start="263:44" pos:end="263:50"><expr pos:start="263:44" pos:end="263:50"><name pos:start="263:44" pos:end="263:50"><name pos:start="263:44" pos:end="263:46">pkt</name><operator pos:start="263:47" pos:end="263:47">.</operator><name pos:start="263:48" pos:end="263:50">dts</name></name></expr></argument>, <argument pos:start="263:53" pos:end="263:70"><expr pos:start="263:53" pos:end="263:70"><name pos:start="263:53" pos:end="263:70"><name pos:start="263:53" pos:end="263:55">ist</name><operator pos:start="263:56" pos:end="263:57">-&gt;</operator><name pos:start="263:58" pos:end="263:59">st</name><operator pos:start="263:60" pos:end="263:61">-&gt;</operator><name pos:start="263:62" pos:end="263:70">time_base</name></name></expr></argument>, <argument pos:start="263:73" pos:end="263:86"><expr pos:start="263:73" pos:end="263:86"><name pos:start="263:73" pos:end="263:86">AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="265:13" pos:end="265:54"><decl pos:start="265:13" pos:end="265:53"><type pos:start="265:13" pos:end="265:19"><name pos:start="265:13" pos:end="265:19">int64_t</name></type> <name pos:start="265:21" pos:end="265:25">delta</name>   <init pos:start="265:29" pos:end="265:53">= <expr pos:start="265:31" pos:end="265:53"><name pos:start="265:31" pos:end="265:37">pkt_dts</name> <operator pos:start="265:39" pos:end="265:39">-</operator> <name pos:start="265:41" pos:end="265:53"><name pos:start="265:41" pos:end="265:43">ist</name><operator pos:start="265:44" pos:end="265:45">-&gt;</operator><name pos:start="265:46" pos:end="265:53">next_dts</name></name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="267:13" pos:end="283:13"><if pos:start="267:13" pos:end="283:13">if <condition pos:start="267:16" pos:end="267:117">(<expr pos:start="267:17" pos:end="267:116"><operator pos:start="267:17" pos:end="267:17">(</operator><call pos:start="267:18" pos:end="267:29"><name pos:start="267:18" pos:end="267:22">FFABS</name><argument_list pos:start="267:23" pos:end="267:29">(<argument pos:start="267:24" pos:end="267:28"><expr pos:start="267:24" pos:end="267:28"><name pos:start="267:24" pos:end="267:28">delta</name></expr></argument>)</argument_list></call> <operator pos:start="267:31" pos:end="267:31">&gt;</operator> <literal type="number" pos:start="267:33" pos:end="267:35">1LL</literal> <operator pos:start="267:37" pos:end="267:37">*</operator> <name pos:start="267:39" pos:end="267:57">dts_delta_threshold</name> <operator pos:start="267:59" pos:end="267:59">*</operator> <name pos:start="267:61" pos:end="267:72">AV_TIME_BASE</name> <operator pos:start="267:74" pos:end="267:75">||</operator> <name pos:start="267:77" pos:end="267:83">pkt_dts</name> <operator pos:start="267:85" pos:end="267:85">+</operator> <literal type="number" pos:start="267:87" pos:end="267:87">1</literal> <operator pos:start="267:89" pos:end="267:89">&lt;</operator> <name pos:start="267:91" pos:end="267:103"><name pos:start="267:91" pos:end="267:93">ist</name><operator pos:start="267:94" pos:end="267:95">-&gt;</operator><name pos:start="267:96" pos:end="267:103">last_dts</name></name><operator pos:start="267:104" pos:end="267:104">)</operator> <operator pos:start="267:106" pos:end="267:107">&amp;&amp;</operator> <operator pos:start="267:109" pos:end="267:109">!</operator><name pos:start="267:110" pos:end="267:116">copy_ts</name></expr>)</condition> <block pos:start="267:119" pos:end="283:13">{<block_content pos:start="269:17" pos:end="281:86">

                <expr_stmt pos:start="269:17" pos:end="269:65"><expr pos:start="269:17" pos:end="269:64"><name pos:start="269:17" pos:end="269:44"><name pos:start="269:17" pos:end="269:27">input_files</name><index pos:start="269:28" pos:end="269:44">[<expr pos:start="269:29" pos:end="269:43"><name pos:start="269:29" pos:end="269:43"><name pos:start="269:29" pos:end="269:31">ist</name><operator pos:start="269:32" pos:end="269:33">-&gt;</operator><name pos:start="269:34" pos:end="269:43">file_index</name></name></expr>]</index></name><operator pos:start="269:45" pos:end="269:46">-&gt;</operator><name pos:start="269:47" pos:end="269:55">ts_offset</name> <operator pos:start="269:57" pos:end="269:58">-=</operator> <name pos:start="269:60" pos:end="269:64">delta</name></expr>;</expr_stmt>

                <expr_stmt pos:start="271:17" pos:end="275:71"><expr pos:start="271:17" pos:end="275:70"><call pos:start="271:17" pos:end="275:70"><name pos:start="271:17" pos:end="271:22">av_log</name><argument_list pos:start="271:23" pos:end="275:70">(<argument pos:start="271:24" pos:end="271:27"><expr pos:start="271:24" pos:end="271:27"><name pos:start="271:24" pos:end="271:27">NULL</name></expr></argument>, <argument pos:start="271:30" pos:end="271:41"><expr pos:start="271:30" pos:end="271:41"><name pos:start="271:30" pos:end="271:41">AV_LOG_DEBUG</name></expr></argument>,

                       <argument pos:start="273:24" pos:end="273:83"><expr pos:start="273:24" pos:end="273:83"><literal type="string" pos:start="273:24" pos:end="273:50">"timestamp discontinuity %"</literal><name pos:start="273:51" pos:end="273:56">PRId64</name><literal type="string" pos:start="273:57" pos:end="273:73">", new offset= %"</literal><name pos:start="273:74" pos:end="273:79">PRId64</name><literal type="string" pos:start="273:80" pos:end="273:83">"\n"</literal></expr></argument>,

                       <argument pos:start="275:24" pos:end="275:28"><expr pos:start="275:24" pos:end="275:28"><name pos:start="275:24" pos:end="275:28">delta</name></expr></argument>, <argument pos:start="275:31" pos:end="275:69"><expr pos:start="275:31" pos:end="275:69"><name pos:start="275:31" pos:end="275:58"><name pos:start="275:31" pos:end="275:41">input_files</name><index pos:start="275:42" pos:end="275:58">[<expr pos:start="275:43" pos:end="275:57"><name pos:start="275:43" pos:end="275:57"><name pos:start="275:43" pos:end="275:45">ist</name><operator pos:start="275:46" pos:end="275:47">-&gt;</operator><name pos:start="275:48" pos:end="275:57">file_index</name></name></expr>]</index></name><operator pos:start="275:59" pos:end="275:60">-&gt;</operator><name pos:start="275:61" pos:end="275:69">ts_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="277:17" pos:end="277:82"><expr pos:start="277:17" pos:end="277:81"><name pos:start="277:17" pos:end="277:23"><name pos:start="277:17" pos:end="277:19">pkt</name><operator pos:start="277:20" pos:end="277:20">.</operator><name pos:start="277:21" pos:end="277:23">dts</name></name><operator pos:start="277:24" pos:end="277:25">-=</operator> <call pos:start="277:27" pos:end="277:81"><name pos:start="277:27" pos:end="277:38">av_rescale_q</name><argument_list pos:start="277:39" pos:end="277:81">(<argument pos:start="277:40" pos:end="277:44"><expr pos:start="277:40" pos:end="277:44"><name pos:start="277:40" pos:end="277:44">delta</name></expr></argument>, <argument pos:start="277:47" pos:end="277:60"><expr pos:start="277:47" pos:end="277:60"><name pos:start="277:47" pos:end="277:60">AV_TIME_BASE_Q</name></expr></argument>, <argument pos:start="277:63" pos:end="277:80"><expr pos:start="277:63" pos:end="277:80"><name pos:start="277:63" pos:end="277:80"><name pos:start="277:63" pos:end="277:65">ist</name><operator pos:start="277:66" pos:end="277:67">-&gt;</operator><name pos:start="277:68" pos:end="277:69">st</name><operator pos:start="277:70" pos:end="277:71">-&gt;</operator><name pos:start="277:72" pos:end="277:80">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="279:17" pos:end="281:86"><if pos:start="279:17" pos:end="281:86">if <condition pos:start="279:20" pos:end="279:46">(<expr pos:start="279:21" pos:end="279:45"><name pos:start="279:21" pos:end="279:27"><name pos:start="279:21" pos:end="279:23">pkt</name><operator pos:start="279:24" pos:end="279:24">.</operator><name pos:start="279:25" pos:end="279:27">pts</name></name> <operator pos:start="279:29" pos:end="279:30">!=</operator> <name pos:start="279:32" pos:end="279:45">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="281:21" pos:end="281:86"><block_content pos:start="281:21" pos:end="281:86">

                    <expr_stmt pos:start="281:21" pos:end="281:86"><expr pos:start="281:21" pos:end="281:85"><name pos:start="281:21" pos:end="281:27"><name pos:start="281:21" pos:end="281:23">pkt</name><operator pos:start="281:24" pos:end="281:24">.</operator><name pos:start="281:25" pos:end="281:27">pts</name></name><operator pos:start="281:28" pos:end="281:29">-=</operator> <call pos:start="281:31" pos:end="281:85"><name pos:start="281:31" pos:end="281:42">av_rescale_q</name><argument_list pos:start="281:43" pos:end="281:85">(<argument pos:start="281:44" pos:end="281:48"><expr pos:start="281:44" pos:end="281:48"><name pos:start="281:44" pos:end="281:48">delta</name></expr></argument>, <argument pos:start="281:51" pos:end="281:64"><expr pos:start="281:51" pos:end="281:64"><name pos:start="281:51" pos:end="281:64">AV_TIME_BASE_Q</name></expr></argument>, <argument pos:start="281:67" pos:end="281:84"><expr pos:start="281:67" pos:end="281:84"><name pos:start="281:67" pos:end="281:84"><name pos:start="281:67" pos:end="281:69">ist</name><operator pos:start="281:70" pos:end="281:71">-&gt;</operator><name pos:start="281:72" pos:end="281:73">st</name><operator pos:start="281:74" pos:end="281:75">-&gt;</operator><name pos:start="281:76" pos:end="281:84">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="289:9" pos:end="289:94">// fprintf(stderr,"read #%d.%d size=%d\n", ist-&gt;file_index, ist-&gt;st-&gt;index, pkt.size);</comment>

        <if_stmt pos:start="291:9" pos:end="305:9"><if pos:start="291:9" pos:end="305:9">if <condition pos:start="291:12" pos:end="291:63">(<expr pos:start="291:13" pos:end="291:62"><call pos:start="291:13" pos:end="291:36"><name pos:start="291:13" pos:end="291:25">output_packet</name><argument_list pos:start="291:26" pos:end="291:36">(<argument pos:start="291:27" pos:end="291:29"><expr pos:start="291:27" pos:end="291:29"><name pos:start="291:27" pos:end="291:29">ist</name></expr></argument>, <argument pos:start="291:32" pos:end="291:35"><expr pos:start="291:32" pos:end="291:35"><operator pos:start="291:32" pos:end="291:32">&amp;</operator><name pos:start="291:33" pos:end="291:35">pkt</name></expr></argument>)</argument_list></call> <operator pos:start="291:38" pos:end="291:38">&lt;</operator> <literal type="number" pos:start="291:40" pos:end="291:40">0</literal> <operator pos:start="291:42" pos:end="291:43">||</operator> <call pos:start="291:45" pos:end="291:58"><name pos:start="291:45" pos:end="291:56">poll_filters</name><argument_list pos:start="291:57" pos:end="291:58">()</argument_list></call> <operator pos:start="291:60" pos:end="291:60">&lt;</operator> <literal type="number" pos:start="291:62" pos:end="291:62">0</literal></expr>)</condition> <block pos:start="291:65" pos:end="305:9">{<block_content pos:start="293:13" pos:end="303:21">

            <expr_stmt pos:start="293:13" pos:end="295:52"><expr pos:start="293:13" pos:end="295:51"><call pos:start="293:13" pos:end="295:51"><name pos:start="293:13" pos:end="293:18">av_log</name><argument_list pos:start="293:19" pos:end="295:51">(<argument pos:start="293:20" pos:end="293:23"><expr pos:start="293:20" pos:end="293:23"><name pos:start="293:20" pos:end="293:23">NULL</name></expr></argument>, <argument pos:start="293:26" pos:end="293:37"><expr pos:start="293:26" pos:end="293:37"><name pos:start="293:26" pos:end="293:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="293:40" pos:end="293:77"><expr pos:start="293:40" pos:end="293:77"><literal type="string" pos:start="293:40" pos:end="293:77">"Error while decoding stream #%d:%d\n"</literal></expr></argument>,

                   <argument pos:start="295:20" pos:end="295:34"><expr pos:start="295:20" pos:end="295:34"><name pos:start="295:20" pos:end="295:34"><name pos:start="295:20" pos:end="295:22">ist</name><operator pos:start="295:23" pos:end="295:24">-&gt;</operator><name pos:start="295:25" pos:end="295:34">file_index</name></name></expr></argument>, <argument pos:start="295:37" pos:end="295:50"><expr pos:start="295:37" pos:end="295:50"><name pos:start="295:37" pos:end="295:50"><name pos:start="295:37" pos:end="295:39">ist</name><operator pos:start="295:40" pos:end="295:41">-&gt;</operator><name pos:start="295:42" pos:end="295:43">st</name><operator pos:start="295:44" pos:end="295:45">-&gt;</operator><name pos:start="295:46" pos:end="295:50">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="297:13" pos:end="299:32"><if pos:start="297:13" pos:end="299:32">if <condition pos:start="297:16" pos:end="297:30">(<expr pos:start="297:17" pos:end="297:29"><name pos:start="297:17" pos:end="297:29">exit_on_error</name></expr>)</condition><block type="pseudo" pos:start="299:17" pos:end="299:32"><block_content pos:start="299:17" pos:end="299:32">

                <expr_stmt pos:start="299:17" pos:end="299:32"><expr pos:start="299:17" pos:end="299:31"><call pos:start="299:17" pos:end="299:31"><name pos:start="299:17" pos:end="299:28">exit_program</name><argument_list pos:start="299:29" pos:end="299:31">(<argument pos:start="299:30" pos:end="299:30"><expr pos:start="299:30" pos:end="299:30"><literal type="number" pos:start="299:30" pos:end="299:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:33"><expr pos:start="301:13" pos:end="301:32"><call pos:start="301:13" pos:end="301:32"><name pos:start="301:13" pos:end="301:26">av_free_packet</name><argument_list pos:start="301:27" pos:end="301:32">(<argument pos:start="301:28" pos:end="301:31"><expr pos:start="301:28" pos:end="301:31"><operator pos:start="301:28" pos:end="301:28">&amp;</operator><name pos:start="301:29" pos:end="301:31">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="303:13" pos:end="303:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



    <label pos:start="309:5" pos:end="309:19"><name pos:start="309:5" pos:end="309:18">discard_packet</name>:</label>

        <expr_stmt pos:start="311:9" pos:end="311:29"><expr pos:start="311:9" pos:end="311:28"><call pos:start="311:9" pos:end="311:28"><name pos:start="311:9" pos:end="311:22">av_free_packet</name><argument_list pos:start="311:23" pos:end="311:28">(<argument pos:start="311:24" pos:end="311:27"><expr pos:start="311:24" pos:end="311:27"><operator pos:start="311:24" pos:end="311:24">&amp;</operator><name pos:start="311:25" pos:end="311:27">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="315:9" pos:end="315:75">/* dump report by using the output first video and audio streams */</comment>

        <expr_stmt pos:start="317:9" pos:end="317:37"><expr pos:start="317:9" pos:end="317:36"><call pos:start="317:9" pos:end="317:36"><name pos:start="317:9" pos:end="317:20">print_report</name><argument_list pos:start="317:21" pos:end="317:36">(<argument pos:start="317:22" pos:end="317:22"><expr pos:start="317:22" pos:end="317:22"><literal type="number" pos:start="317:22" pos:end="317:22">0</literal></expr></argument>, <argument pos:start="317:25" pos:end="317:35"><expr pos:start="317:25" pos:end="317:35"><name pos:start="317:25" pos:end="317:35">timer_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="323:5" pos:end="323:65">/* at the end of stream, we must flush the decoder buffers */</comment>

    <for pos:start="325:5" pos:end="335:5">for <control pos:start="325:9" pos:end="325:42">(<init pos:start="325:10" pos:end="325:15"><expr pos:start="325:10" pos:end="325:14"><name pos:start="325:10" pos:end="325:10">i</name> <operator pos:start="325:12" pos:end="325:12">=</operator> <literal type="number" pos:start="325:14" pos:end="325:14">0</literal></expr>;</init> <condition pos:start="325:17" pos:end="325:37"><expr pos:start="325:17" pos:end="325:36"><name pos:start="325:17" pos:end="325:17">i</name> <operator pos:start="325:19" pos:end="325:19">&lt;</operator> <name pos:start="325:21" pos:end="325:36">nb_input_streams</name></expr>;</condition> <incr pos:start="325:39" pos:end="325:41"><expr pos:start="325:39" pos:end="325:41"><name pos:start="325:39" pos:end="325:39">i</name><operator pos:start="325:40" pos:end="325:41">++</operator></expr></incr>)</control> <block pos:start="325:44" pos:end="335:5">{<block_content pos:start="327:9" pos:end="333:9">

        <expr_stmt pos:start="327:9" pos:end="327:31"><expr pos:start="327:9" pos:end="327:30"><name pos:start="327:9" pos:end="327:11">ist</name> <operator pos:start="327:13" pos:end="327:13">=</operator> <name pos:start="327:15" pos:end="327:30"><name pos:start="327:15" pos:end="327:27">input_streams</name><index pos:start="327:28" pos:end="327:30">[<expr pos:start="327:29" pos:end="327:29"><name pos:start="327:29" pos:end="327:29">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="329:9" pos:end="333:9"><if pos:start="329:9" pos:end="333:9">if <condition pos:start="329:12" pos:end="329:79">(<expr pos:start="329:13" pos:end="329:78"><operator pos:start="329:13" pos:end="329:13">!</operator><name pos:start="329:14" pos:end="329:41"><name pos:start="329:14" pos:end="329:24">input_files</name><index pos:start="329:25" pos:end="329:41">[<expr pos:start="329:26" pos:end="329:40"><name pos:start="329:26" pos:end="329:40"><name pos:start="329:26" pos:end="329:28">ist</name><operator pos:start="329:29" pos:end="329:30">-&gt;</operator><name pos:start="329:31" pos:end="329:40">file_index</name></name></expr>]</index></name><operator pos:start="329:42" pos:end="329:43">-&gt;</operator><name pos:start="329:44" pos:end="329:54">eof_reached</name> <operator pos:start="329:56" pos:end="329:57">&amp;&amp;</operator> <name pos:start="329:59" pos:end="329:78"><name pos:start="329:59" pos:end="329:61">ist</name><operator pos:start="329:62" pos:end="329:63">-&gt;</operator><name pos:start="329:64" pos:end="329:78">decoding_needed</name></name></expr>)</condition> <block pos:start="329:81" pos:end="333:9">{<block_content pos:start="331:13" pos:end="331:37">

            <expr_stmt pos:start="331:13" pos:end="331:37"><expr pos:start="331:13" pos:end="331:36"><call pos:start="331:13" pos:end="331:36"><name pos:start="331:13" pos:end="331:25">output_packet</name><argument_list pos:start="331:26" pos:end="331:36">(<argument pos:start="331:27" pos:end="331:29"><expr pos:start="331:27" pos:end="331:29"><name pos:start="331:27" pos:end="331:29">ist</name></expr></argument>, <argument pos:start="331:32" pos:end="331:35"><expr pos:start="331:32" pos:end="331:35"><name pos:start="331:32" pos:end="331:35">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="337:5" pos:end="337:19"><expr pos:start="337:5" pos:end="337:18"><call pos:start="337:5" pos:end="337:18"><name pos:start="337:5" pos:end="337:16">poll_filters</name><argument_list pos:start="337:17" pos:end="337:18">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="339:5" pos:end="339:21"><expr pos:start="339:5" pos:end="339:20"><call pos:start="339:5" pos:end="339:20"><name pos:start="339:5" pos:end="339:18">flush_encoders</name><argument_list pos:start="339:19" pos:end="339:20">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="343:5" pos:end="343:16"><expr pos:start="343:5" pos:end="343:15"><call pos:start="343:5" pos:end="343:15"><name pos:start="343:5" pos:end="343:13">term_exit</name><argument_list pos:start="343:14" pos:end="343:15">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="347:5" pos:end="347:52">/* write the trailer if needed and close file */</comment>

    <for pos:start="349:5" pos:end="355:5">for <control pos:start="349:9" pos:end="349:41">(<init pos:start="349:10" pos:end="349:15"><expr pos:start="349:10" pos:end="349:14"><name pos:start="349:10" pos:end="349:10">i</name> <operator pos:start="349:12" pos:end="349:12">=</operator> <literal type="number" pos:start="349:14" pos:end="349:14">0</literal></expr>;</init> <condition pos:start="349:17" pos:end="349:36"><expr pos:start="349:17" pos:end="349:35"><name pos:start="349:17" pos:end="349:17">i</name> <operator pos:start="349:19" pos:end="349:19">&lt;</operator> <name pos:start="349:21" pos:end="349:35">nb_output_files</name></expr>;</condition> <incr pos:start="349:38" pos:end="349:40"><expr pos:start="349:38" pos:end="349:40"><name pos:start="349:38" pos:end="349:38">i</name><operator pos:start="349:39" pos:end="349:40">++</operator></expr></incr>)</control> <block pos:start="349:43" pos:end="355:5">{<block_content pos:start="351:9" pos:end="353:29">

        <expr_stmt pos:start="351:9" pos:end="351:34"><expr pos:start="351:9" pos:end="351:33"><name pos:start="351:9" pos:end="351:10">os</name> <operator pos:start="351:12" pos:end="351:12">=</operator> <name pos:start="351:14" pos:end="351:28"><name pos:start="351:14" pos:end="351:25">output_files</name><index pos:start="351:26" pos:end="351:28">[<expr pos:start="351:27" pos:end="351:27"><name pos:start="351:27" pos:end="351:27">i</name></expr>]</index></name><operator pos:start="351:29" pos:end="351:30">-&gt;</operator><name pos:start="351:31" pos:end="351:33">ctx</name></expr>;</expr_stmt>

        <expr_stmt pos:start="353:9" pos:end="353:29"><expr pos:start="353:9" pos:end="353:28"><call pos:start="353:9" pos:end="353:28"><name pos:start="353:9" pos:end="353:24">av_write_trailer</name><argument_list pos:start="353:25" pos:end="353:28">(<argument pos:start="353:26" pos:end="353:27"><expr pos:start="353:26" pos:end="353:27"><name pos:start="353:26" pos:end="353:27">os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="359:5" pos:end="359:64">/* dump report by using the first video and audio streams */</comment>

    <expr_stmt pos:start="361:5" pos:end="361:33"><expr pos:start="361:5" pos:end="361:32"><call pos:start="361:5" pos:end="361:32"><name pos:start="361:5" pos:end="361:16">print_report</name><argument_list pos:start="361:17" pos:end="361:32">(<argument pos:start="361:18" pos:end="361:18"><expr pos:start="361:18" pos:end="361:18"><literal type="number" pos:start="361:18" pos:end="361:18">1</literal></expr></argument>, <argument pos:start="361:21" pos:end="361:31"><expr pos:start="361:21" pos:end="361:31"><name pos:start="361:21" pos:end="361:31">timer_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="365:5" pos:end="365:28">/* close each encoder */</comment>

    <for pos:start="367:5" pos:end="379:5">for <control pos:start="367:9" pos:end="367:43">(<init pos:start="367:10" pos:end="367:15"><expr pos:start="367:10" pos:end="367:14"><name pos:start="367:10" pos:end="367:10">i</name> <operator pos:start="367:12" pos:end="367:12">=</operator> <literal type="number" pos:start="367:14" pos:end="367:14">0</literal></expr>;</init> <condition pos:start="367:17" pos:end="367:38"><expr pos:start="367:17" pos:end="367:37"><name pos:start="367:17" pos:end="367:17">i</name> <operator pos:start="367:19" pos:end="367:19">&lt;</operator> <name pos:start="367:21" pos:end="367:37">nb_output_streams</name></expr>;</condition> <incr pos:start="367:40" pos:end="367:42"><expr pos:start="367:40" pos:end="367:42"><name pos:start="367:40" pos:end="367:40">i</name><operator pos:start="367:41" pos:end="367:42">++</operator></expr></incr>)</control> <block pos:start="367:45" pos:end="379:5">{<block_content pos:start="369:9" pos:end="377:9">

        <expr_stmt pos:start="369:9" pos:end="369:32"><expr pos:start="369:9" pos:end="369:31"><name pos:start="369:9" pos:end="369:11">ost</name> <operator pos:start="369:13" pos:end="369:13">=</operator> <name pos:start="369:15" pos:end="369:31"><name pos:start="369:15" pos:end="369:28">output_streams</name><index pos:start="369:29" pos:end="369:31">[<expr pos:start="369:30" pos:end="369:30"><name pos:start="369:30" pos:end="369:30">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="371:9" pos:end="377:9"><if pos:start="371:9" pos:end="377:9">if <condition pos:start="371:12" pos:end="371:33">(<expr pos:start="371:13" pos:end="371:32"><name pos:start="371:13" pos:end="371:32"><name pos:start="371:13" pos:end="371:15">ost</name><operator pos:start="371:16" pos:end="371:17">-&gt;</operator><name pos:start="371:18" pos:end="371:32">encoding_needed</name></name></expr>)</condition> <block pos:start="371:35" pos:end="377:9">{<block_content pos:start="373:13" pos:end="375:42">

            <expr_stmt pos:start="373:13" pos:end="373:48"><expr pos:start="373:13" pos:end="373:47"><call pos:start="373:13" pos:end="373:47"><name pos:start="373:13" pos:end="373:20">av_freep</name><argument_list pos:start="373:21" pos:end="373:47">(<argument pos:start="373:22" pos:end="373:46"><expr pos:start="373:22" pos:end="373:46"><operator pos:start="373:22" pos:end="373:22">&amp;</operator><name pos:start="373:23" pos:end="373:46"><name pos:start="373:23" pos:end="373:25">ost</name><operator pos:start="373:26" pos:end="373:27">-&gt;</operator><name pos:start="373:28" pos:end="373:29">st</name><operator pos:start="373:30" pos:end="373:31">-&gt;</operator><name pos:start="373:32" pos:end="373:36">codec</name><operator pos:start="373:37" pos:end="373:38">-&gt;</operator><name pos:start="373:39" pos:end="373:46">stats_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="375:13" pos:end="375:42"><expr pos:start="375:13" pos:end="375:41"><call pos:start="375:13" pos:end="375:41"><name pos:start="375:13" pos:end="375:25">avcodec_close</name><argument_list pos:start="375:26" pos:end="375:41">(<argument pos:start="375:27" pos:end="375:40"><expr pos:start="375:27" pos:end="375:40"><name pos:start="375:27" pos:end="375:40"><name pos:start="375:27" pos:end="375:29">ost</name><operator pos:start="375:30" pos:end="375:31">-&gt;</operator><name pos:start="375:32" pos:end="375:33">st</name><operator pos:start="375:34" pos:end="375:35">-&gt;</operator><name pos:start="375:36" pos:end="375:40">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="383:5" pos:end="383:28">/* close each decoder */</comment>

    <for pos:start="385:5" pos:end="395:5">for <control pos:start="385:9" pos:end="385:42">(<init pos:start="385:10" pos:end="385:15"><expr pos:start="385:10" pos:end="385:14"><name pos:start="385:10" pos:end="385:10">i</name> <operator pos:start="385:12" pos:end="385:12">=</operator> <literal type="number" pos:start="385:14" pos:end="385:14">0</literal></expr>;</init> <condition pos:start="385:17" pos:end="385:37"><expr pos:start="385:17" pos:end="385:36"><name pos:start="385:17" pos:end="385:17">i</name> <operator pos:start="385:19" pos:end="385:19">&lt;</operator> <name pos:start="385:21" pos:end="385:36">nb_input_streams</name></expr>;</condition> <incr pos:start="385:39" pos:end="385:41"><expr pos:start="385:39" pos:end="385:41"><name pos:start="385:39" pos:end="385:39">i</name><operator pos:start="385:40" pos:end="385:41">++</operator></expr></incr>)</control> <block pos:start="385:44" pos:end="395:5">{<block_content pos:start="387:9" pos:end="393:9">

        <expr_stmt pos:start="387:9" pos:end="387:31"><expr pos:start="387:9" pos:end="387:30"><name pos:start="387:9" pos:end="387:11">ist</name> <operator pos:start="387:13" pos:end="387:13">=</operator> <name pos:start="387:15" pos:end="387:30"><name pos:start="387:15" pos:end="387:27">input_streams</name><index pos:start="387:28" pos:end="387:30">[<expr pos:start="387:29" pos:end="387:29"><name pos:start="387:29" pos:end="387:29">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="389:9" pos:end="393:9"><if pos:start="389:9" pos:end="393:9">if <condition pos:start="389:12" pos:end="389:33">(<expr pos:start="389:13" pos:end="389:32"><name pos:start="389:13" pos:end="389:32"><name pos:start="389:13" pos:end="389:15">ist</name><operator pos:start="389:16" pos:end="389:17">-&gt;</operator><name pos:start="389:18" pos:end="389:32">decoding_needed</name></name></expr>)</condition> <block pos:start="389:35" pos:end="393:9">{<block_content pos:start="391:13" pos:end="391:42">

            <expr_stmt pos:start="391:13" pos:end="391:42"><expr pos:start="391:13" pos:end="391:41"><call pos:start="391:13" pos:end="391:41"><name pos:start="391:13" pos:end="391:25">avcodec_close</name><argument_list pos:start="391:26" pos:end="391:41">(<argument pos:start="391:27" pos:end="391:40"><expr pos:start="391:27" pos:end="391:40"><name pos:start="391:27" pos:end="391:40"><name pos:start="391:27" pos:end="391:29">ist</name><operator pos:start="391:30" pos:end="391:31">-&gt;</operator><name pos:start="391:32" pos:end="391:33">st</name><operator pos:start="391:34" pos:end="391:35">-&gt;</operator><name pos:start="391:36" pos:end="391:40">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="399:5" pos:end="399:20">/* finished ! */</comment>

    <expr_stmt pos:start="401:5" pos:end="401:12"><expr pos:start="401:5" pos:end="401:11"><name pos:start="401:5" pos:end="401:7">ret</name> <operator pos:start="401:9" pos:end="401:9">=</operator> <literal type="number" pos:start="401:11" pos:end="401:11">0</literal></expr>;</expr_stmt>



 <label pos:start="405:2" pos:end="405:6"><name pos:start="405:2" pos:end="405:5">fail</name>:</label>

    <expr_stmt pos:start="407:5" pos:end="407:25"><expr pos:start="407:5" pos:end="407:24"><call pos:start="407:5" pos:end="407:24"><name pos:start="407:5" pos:end="407:12">av_freep</name><argument_list pos:start="407:13" pos:end="407:24">(<argument pos:start="407:14" pos:end="407:23"><expr pos:start="407:14" pos:end="407:23"><operator pos:start="407:14" pos:end="407:14">&amp;</operator><name pos:start="407:15" pos:end="407:23">no_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="411:5" pos:end="449:5"><if pos:start="411:5" pos:end="449:5">if <condition pos:start="411:8" pos:end="411:23">(<expr pos:start="411:9" pos:end="411:22"><name pos:start="411:9" pos:end="411:22">output_streams</name></expr>)</condition> <block pos:start="411:25" pos:end="449:5">{<block_content pos:start="413:9" pos:end="447:9">

        <for pos:start="413:9" pos:end="447:9">for <control pos:start="413:13" pos:end="413:47">(<init pos:start="413:14" pos:end="413:19"><expr pos:start="413:14" pos:end="413:18"><name pos:start="413:14" pos:end="413:14">i</name> <operator pos:start="413:16" pos:end="413:16">=</operator> <literal type="number" pos:start="413:18" pos:end="413:18">0</literal></expr>;</init> <condition pos:start="413:21" pos:end="413:42"><expr pos:start="413:21" pos:end="413:41"><name pos:start="413:21" pos:end="413:21">i</name> <operator pos:start="413:23" pos:end="413:23">&lt;</operator> <name pos:start="413:25" pos:end="413:41">nb_output_streams</name></expr>;</condition> <incr pos:start="413:44" pos:end="413:46"><expr pos:start="413:44" pos:end="413:46"><name pos:start="413:44" pos:end="413:44">i</name><operator pos:start="413:45" pos:end="413:46">++</operator></expr></incr>)</control> <block pos:start="413:49" pos:end="447:9">{<block_content pos:start="415:13" pos:end="445:13">

            <expr_stmt pos:start="415:13" pos:end="415:36"><expr pos:start="415:13" pos:end="415:35"><name pos:start="415:13" pos:end="415:15">ost</name> <operator pos:start="415:17" pos:end="415:17">=</operator> <name pos:start="415:19" pos:end="415:35"><name pos:start="415:19" pos:end="415:32">output_streams</name><index pos:start="415:33" pos:end="415:35">[<expr pos:start="415:34" pos:end="415:34"><name pos:start="415:34" pos:end="415:34">i</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="417:13" pos:end="445:13"><if pos:start="417:13" pos:end="445:13">if <condition pos:start="417:16" pos:end="417:20">(<expr pos:start="417:17" pos:end="417:19"><name pos:start="417:17" pos:end="417:19">ost</name></expr>)</condition> <block pos:start="417:22" pos:end="445:13">{<block_content pos:start="419:17" pos:end="443:41">

                <if_stmt pos:start="419:17" pos:end="421:57"><if pos:start="419:17" pos:end="421:57">if <condition pos:start="419:20" pos:end="419:37">(<expr pos:start="419:21" pos:end="419:36"><name pos:start="419:21" pos:end="419:36"><name pos:start="419:21" pos:end="419:23">ost</name><operator pos:start="419:24" pos:end="419:25">-&gt;</operator><name pos:start="419:26" pos:end="419:36">stream_copy</name></name></expr>)</condition><block type="pseudo" pos:start="421:21" pos:end="421:57"><block_content pos:start="421:21" pos:end="421:57">

                    <expr_stmt pos:start="421:21" pos:end="421:57"><expr pos:start="421:21" pos:end="421:56"><call pos:start="421:21" pos:end="421:56"><name pos:start="421:21" pos:end="421:28">av_freep</name><argument_list pos:start="421:29" pos:end="421:56">(<argument pos:start="421:30" pos:end="421:55"><expr pos:start="421:30" pos:end="421:55"><operator pos:start="421:30" pos:end="421:30">&amp;</operator><name pos:start="421:31" pos:end="421:55"><name pos:start="421:31" pos:end="421:33">ost</name><operator pos:start="421:34" pos:end="421:35">-&gt;</operator><name pos:start="421:36" pos:end="421:37">st</name><operator pos:start="421:38" pos:end="421:39">-&gt;</operator><name pos:start="421:40" pos:end="421:44">codec</name><operator pos:start="421:45" pos:end="421:46">-&gt;</operator><name pos:start="421:47" pos:end="421:55">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="423:17" pos:end="429:17"><if pos:start="423:17" pos:end="429:17">if <condition pos:start="423:20" pos:end="423:33">(<expr pos:start="423:21" pos:end="423:32"><name pos:start="423:21" pos:end="423:32"><name pos:start="423:21" pos:end="423:23">ost</name><operator pos:start="423:24" pos:end="423:25">-&gt;</operator><name pos:start="423:26" pos:end="423:32">logfile</name></name></expr>)</condition> <block pos:start="423:35" pos:end="429:17">{<block_content pos:start="425:21" pos:end="427:40">

                    <expr_stmt pos:start="425:21" pos:end="425:41"><expr pos:start="425:21" pos:end="425:40"><call pos:start="425:21" pos:end="425:40"><name pos:start="425:21" pos:end="425:26">fclose</name><argument_list pos:start="425:27" pos:end="425:40">(<argument pos:start="425:28" pos:end="425:39"><expr pos:start="425:28" pos:end="425:39"><name pos:start="425:28" pos:end="425:39"><name pos:start="425:28" pos:end="425:30">ost</name><operator pos:start="425:31" pos:end="425:32">-&gt;</operator><name pos:start="425:33" pos:end="425:39">logfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="427:21" pos:end="427:40"><expr pos:start="427:21" pos:end="427:39"><name pos:start="427:21" pos:end="427:32"><name pos:start="427:21" pos:end="427:23">ost</name><operator pos:start="427:24" pos:end="427:25">-&gt;</operator><name pos:start="427:26" pos:end="427:32">logfile</name></name> <operator pos:start="427:34" pos:end="427:34">=</operator> <name pos:start="427:36" pos:end="427:39">NULL</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="431:17" pos:end="431:40"><expr pos:start="431:17" pos:end="431:39"><call pos:start="431:17" pos:end="431:39"><name pos:start="431:17" pos:end="431:28">av_fifo_free</name><argument_list pos:start="431:29" pos:end="431:39">(<argument pos:start="431:30" pos:end="431:38"><expr pos:start="431:30" pos:end="431:38"><name pos:start="431:30" pos:end="431:38"><name pos:start="431:30" pos:end="431:32">ost</name><operator pos:start="431:33" pos:end="431:34">-&gt;</operator><name pos:start="431:35" pos:end="431:38">fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="431:42" pos:end="433:75">/* works even if fifo is not

                                             initialized but set to zero */</comment>

                <expr_stmt pos:start="435:17" pos:end="435:59"><expr pos:start="435:17" pos:end="435:58"><call pos:start="435:17" pos:end="435:58"><name pos:start="435:17" pos:end="435:24">av_freep</name><argument_list pos:start="435:25" pos:end="435:58">(<argument pos:start="435:26" pos:end="435:57"><expr pos:start="435:26" pos:end="435:57"><operator pos:start="435:26" pos:end="435:26">&amp;</operator><name pos:start="435:27" pos:end="435:57"><name pos:start="435:27" pos:end="435:29">ost</name><operator pos:start="435:30" pos:end="435:31">-&gt;</operator><name pos:start="435:32" pos:end="435:33">st</name><operator pos:start="435:34" pos:end="435:35">-&gt;</operator><name pos:start="435:36" pos:end="435:40">codec</name><operator pos:start="435:41" pos:end="435:42">-&gt;</operator><name pos:start="435:43" pos:end="435:57">subtitle_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="437:17" pos:end="437:44"><expr pos:start="437:17" pos:end="437:43"><call pos:start="437:17" pos:end="437:43"><name pos:start="437:17" pos:end="437:23">av_free</name><argument_list pos:start="437:24" pos:end="437:43">(<argument pos:start="437:25" pos:end="437:42"><expr pos:start="437:25" pos:end="437:42"><name pos:start="437:25" pos:end="437:42"><name pos:start="437:25" pos:end="437:27">ost</name><operator pos:start="437:28" pos:end="437:29">-&gt;</operator><name pos:start="437:30" pos:end="437:42">forced_kf_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="439:17" pos:end="441:47"><if pos:start="439:17" pos:end="441:47">if <condition pos:start="439:20" pos:end="439:29">(<expr pos:start="439:21" pos:end="439:28"><name pos:start="439:21" pos:end="439:28"><name pos:start="439:21" pos:end="439:23">ost</name><operator pos:start="439:24" pos:end="439:25">-&gt;</operator><name pos:start="439:26" pos:end="439:28">avr</name></name></expr>)</condition><block type="pseudo" pos:start="441:21" pos:end="441:47"><block_content pos:start="441:21" pos:end="441:47">

                    <expr_stmt pos:start="441:21" pos:end="441:47"><expr pos:start="441:21" pos:end="441:46"><call pos:start="441:21" pos:end="441:46"><name pos:start="441:21" pos:end="441:35">avresample_free</name><argument_list pos:start="441:36" pos:end="441:46">(<argument pos:start="441:37" pos:end="441:45"><expr pos:start="441:37" pos:end="441:45"><operator pos:start="441:37" pos:end="441:37">&amp;</operator><name pos:start="441:38" pos:end="441:45"><name pos:start="441:38" pos:end="441:40">ost</name><operator pos:start="441:41" pos:end="441:42">-&gt;</operator><name pos:start="441:43" pos:end="441:45">avr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="443:17" pos:end="443:41"><expr pos:start="443:17" pos:end="443:40"><call pos:start="443:17" pos:end="443:40"><name pos:start="443:17" pos:end="443:28">av_dict_free</name><argument_list pos:start="443:29" pos:end="443:40">(<argument pos:start="443:30" pos:end="443:39"><expr pos:start="443:30" pos:end="443:39"><operator pos:start="443:30" pos:end="443:30">&amp;</operator><name pos:start="443:31" pos:end="443:39"><name pos:start="443:31" pos:end="443:33">ost</name><operator pos:start="443:34" pos:end="443:35">-&gt;</operator><name pos:start="443:36" pos:end="443:39">opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>

    <return pos:start="451:5" pos:end="451:15">return <expr pos:start="451:12" pos:end="451:14"><name pos:start="451:12" pos:end="451:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
