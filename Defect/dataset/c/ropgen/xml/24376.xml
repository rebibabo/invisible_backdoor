<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24376.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:12"><name pos:start="1:1" pos:end="1:10">QTestState</name> <modifier pos:start="1:12" pos:end="1:12">*</modifier></type><name pos:start="1:13" pos:end="1:22">qtest_init</name><parameter_list pos:start="1:23" pos:end="1:46">(<parameter pos:start="1:24" pos:end="1:45"><decl pos:start="1:24" pos:end="1:45"><type pos:start="1:24" pos:end="1:35"><specifier pos:start="1:24" pos:end="1:28">const</specifier> <name pos:start="1:30" pos:end="1:33">char</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:45">extra_args</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="131:1">{<block_content pos:start="5:5" pos:end="129:13">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">QTestState</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">sock</name></decl>, <decl pos:start="7:15" pos:end="7:21"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:21">qmpsock</name></decl>, <decl pos:start="7:24" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:24" pos:end="7:24">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">gchar</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:22">socket_path</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">gchar</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:26">qmp_socket_path</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">gchar</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:18">command</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:27">qemu_binary</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:20">sigaction</name></name></type> <name pos:start="17:22" pos:end="17:27">sigact</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:46"><expr pos:start="21:5" pos:end="21:45"><name pos:start="21:5" pos:end="21:15">qemu_binary</name> <operator pos:start="21:17" pos:end="21:17">=</operator> <call pos:start="21:19" pos:end="21:45"><name pos:start="21:19" pos:end="21:24">getenv</name><argument_list pos:start="21:25" pos:end="21:45">(<argument pos:start="21:26" pos:end="21:44"><expr pos:start="21:26" pos:end="21:44"><literal type="string" pos:start="21:26" pos:end="21:44">"QTEST_QEMU_BINARY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:34"><expr pos:start="23:5" pos:end="23:33"><call pos:start="23:5" pos:end="23:33"><name pos:start="23:5" pos:end="23:12">g_assert</name><argument_list pos:start="23:13" pos:end="23:33">(<argument pos:start="23:14" pos:end="23:32"><expr pos:start="23:14" pos:end="23:32"><name pos:start="23:14" pos:end="23:24">qemu_binary</name> <operator pos:start="23:26" pos:end="23:27">!=</operator> <name pos:start="23:29" pos:end="23:32">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:29"><expr pos:start="27:5" pos:end="27:28"><name pos:start="27:5" pos:end="27:5">s</name> <operator pos:start="27:7" pos:end="27:7">=</operator> <call pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:16">g_malloc</name><argument_list pos:start="27:17" pos:end="27:28">(<argument pos:start="27:18" pos:end="27:27"><expr pos:start="27:18" pos:end="27:27"><sizeof pos:start="27:18" pos:end="27:27">sizeof<argument_list pos:start="27:24" pos:end="27:27">(<argument pos:start="27:25" pos:end="27:26"><expr pos:start="27:25" pos:end="27:26"><operator pos:start="27:25" pos:end="27:25">*</operator><name pos:start="27:26" pos:end="27:26">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:66"><expr pos:start="31:5" pos:end="31:65"><name pos:start="31:5" pos:end="31:15">socket_path</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <call pos:start="31:19" pos:end="31:65"><name pos:start="31:19" pos:end="31:33">g_strdup_printf</name><argument_list pos:start="31:34" pos:end="31:65">(<argument pos:start="31:35" pos:end="31:54"><expr pos:start="31:35" pos:end="31:54"><literal type="string" pos:start="31:35" pos:end="31:54">"/tmp/qtest-%d.sock"</literal></expr></argument>, <argument pos:start="31:57" pos:end="31:64"><expr pos:start="31:57" pos:end="31:64"><call pos:start="31:57" pos:end="31:64"><name pos:start="31:57" pos:end="31:62">getpid</name><argument_list pos:start="31:63" pos:end="31:64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:69"><expr pos:start="33:5" pos:end="33:68"><name pos:start="33:5" pos:end="33:19">qmp_socket_path</name> <operator pos:start="33:21" pos:end="33:21">=</operator> <call pos:start="33:23" pos:end="33:68"><name pos:start="33:23" pos:end="33:37">g_strdup_printf</name><argument_list pos:start="33:38" pos:end="33:68">(<argument pos:start="33:39" pos:end="33:57"><expr pos:start="33:39" pos:end="33:57"><literal type="string" pos:start="33:39" pos:end="33:57">"/tmp/qtest-%d.qmp"</literal></expr></argument>, <argument pos:start="33:60" pos:end="33:67"><expr pos:start="33:60" pos:end="33:67"><call pos:start="33:60" pos:end="33:67"><name pos:start="33:60" pos:end="33:65">getpid</name><argument_list pos:start="33:66" pos:end="33:67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:36"><expr pos:start="37:5" pos:end="37:35"><name pos:start="37:5" pos:end="37:8">sock</name> <operator pos:start="37:10" pos:end="37:10">=</operator> <call pos:start="37:12" pos:end="37:35"><name pos:start="37:12" pos:end="37:22">init_socket</name><argument_list pos:start="37:23" pos:end="37:35">(<argument pos:start="37:24" pos:end="37:34"><expr pos:start="37:24" pos:end="37:34"><name pos:start="37:24" pos:end="37:34">socket_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:43"><expr pos:start="39:5" pos:end="39:42"><name pos:start="39:5" pos:end="39:11">qmpsock</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:42"><name pos:start="39:15" pos:end="39:25">init_socket</name><argument_list pos:start="39:26" pos:end="39:42">(<argument pos:start="39:27" pos:end="39:41"><expr pos:start="39:27" pos:end="39:41"><name pos:start="39:27" pos:end="39:41">qmp_socket_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:57">/* Catch SIGABRT to clean up on g_assert() failure */</comment>

    <expr_stmt pos:start="45:5" pos:end="51:6"><expr pos:start="45:5" pos:end="51:5"><name pos:start="45:5" pos:end="45:10">sigact</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <operator pos:start="45:14" pos:end="45:14">(</operator>struct <name pos:start="45:22" pos:end="45:30">sigaction</name><operator pos:start="45:31" pos:end="45:31">)</operator><block pos:start="45:32" pos:end="51:5">{

        <expr pos:start="47:9" pos:end="47:37"><operator pos:start="47:9" pos:end="47:9">.</operator><name pos:start="47:10" pos:end="47:19">sa_handler</name> <operator pos:start="47:21" pos:end="47:21">=</operator> <name pos:start="47:23" pos:end="47:37">sigabrt_handler</name></expr>,

        <expr pos:start="49:9" pos:end="49:32"><operator pos:start="49:9" pos:end="49:9">.</operator><name pos:start="49:10" pos:end="49:17">sa_flags</name> <operator pos:start="49:19" pos:end="49:19">=</operator> <name pos:start="49:21" pos:end="49:32">SA_RESETHAND</name></expr>,

    }</block></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:33"><expr pos:start="53:5" pos:end="53:32"><call pos:start="53:5" pos:end="53:32"><name pos:start="53:5" pos:end="53:15">sigemptyset</name><argument_list pos:start="53:16" pos:end="53:32">(<argument pos:start="53:17" pos:end="53:31"><expr pos:start="53:17" pos:end="53:31"><operator pos:start="53:17" pos:end="53:17">&amp;</operator><name pos:start="53:18" pos:end="53:31"><name pos:start="53:18" pos:end="53:23">sigact</name><operator pos:start="53:24" pos:end="53:24">.</operator><name pos:start="53:25" pos:end="53:31">sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:48"><expr pos:start="55:5" pos:end="55:47"><call pos:start="55:5" pos:end="55:47"><name pos:start="55:5" pos:end="55:13">sigaction</name><argument_list pos:start="55:14" pos:end="55:47">(<argument pos:start="55:15" pos:end="55:21"><expr pos:start="55:15" pos:end="55:21"><name pos:start="55:15" pos:end="55:21">SIGABRT</name></expr></argument>, <argument pos:start="55:24" pos:end="55:30"><expr pos:start="55:24" pos:end="55:30"><operator pos:start="55:24" pos:end="55:24">&amp;</operator><name pos:start="55:25" pos:end="55:30">sigact</name></expr></argument>, <argument pos:start="55:33" pos:end="55:46"><expr pos:start="55:33" pos:end="55:46"><operator pos:start="55:33" pos:end="55:33">&amp;</operator><name pos:start="55:34" pos:end="55:46"><name pos:start="55:34" pos:end="55:34">s</name><operator pos:start="55:35" pos:end="55:36">-&gt;</operator><name pos:start="55:37" pos:end="55:46">sigact_old</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:25"><expr pos:start="59:5" pos:end="59:24"><name pos:start="59:5" pos:end="59:15"><name pos:start="59:5" pos:end="59:5">s</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:15">qemu_pid</name></name> <operator pos:start="59:17" pos:end="59:17">=</operator> <call pos:start="59:19" pos:end="59:24"><name pos:start="59:19" pos:end="59:22">fork</name><argument_list pos:start="59:23" pos:end="59:24">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="85:5"><if pos:start="61:5" pos:end="85:5">if <condition pos:start="61:8" pos:end="61:25">(<expr pos:start="61:9" pos:end="61:24"><name pos:start="61:9" pos:end="61:19"><name pos:start="61:9" pos:end="61:9">s</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:19">qemu_pid</name></name> <operator pos:start="61:21" pos:end="61:22">==</operator> <literal type="number" pos:start="61:24" pos:end="61:24">0</literal></expr>)</condition> <block pos:start="61:27" pos:end="85:5">{<block_content pos:start="63:9" pos:end="83:16">

        <expr_stmt pos:start="63:9" pos:end="79:52"><expr pos:start="63:9" pos:end="79:51"><name pos:start="63:9" pos:end="63:15">command</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <call pos:start="63:19" pos:end="79:51"><name pos:start="63:19" pos:end="63:33">g_strdup_printf</name><argument_list pos:start="63:34" pos:end="79:51">(<argument pos:start="63:35" pos:end="75:38"><expr pos:start="63:35" pos:end="75:38"><literal type="string" pos:start="63:35" pos:end="63:44">"exec %s "</literal>

                                  <literal type="string" pos:start="65:35" pos:end="65:58">"-qtest unix:%s,nowait "</literal>

                                  <literal type="string" pos:start="67:35" pos:end="67:57">"-qtest-log /dev/null "</literal>

                                  <literal type="string" pos:start="69:35" pos:end="69:56">"-qmp unix:%s,nowait "</literal>

                                  <literal type="string" pos:start="71:35" pos:end="71:57">"-machine accel=qtest "</literal>

                                  <literal type="string" pos:start="73:35" pos:end="73:50">"-display none "</literal>

                                  <literal type="string" pos:start="75:35" pos:end="75:38">"%s"</literal></expr></argument>, <argument pos:start="75:41" pos:end="75:51"><expr pos:start="75:41" pos:end="75:51"><name pos:start="75:41" pos:end="75:51">qemu_binary</name></expr></argument>, <argument pos:start="75:54" pos:end="75:64"><expr pos:start="75:54" pos:end="75:64"><name pos:start="75:54" pos:end="75:64">socket_path</name></expr></argument>,

                                  <argument pos:start="77:35" pos:end="77:49"><expr pos:start="77:35" pos:end="77:49"><name pos:start="77:35" pos:end="77:49">qmp_socket_path</name></expr></argument>,

                                  <argument pos:start="79:35" pos:end="79:50"><expr pos:start="79:35" pos:end="79:50"><ternary pos:start="79:35" pos:end="79:50"><condition pos:start="79:35" pos:end="79:46"><expr pos:start="79:35" pos:end="79:44"><name pos:start="79:35" pos:end="79:44">extra_args</name></expr> ?</condition><then/><else pos:start="79:47" pos:end="79:50">: <expr pos:start="79:49" pos:end="79:50"><literal type="string" pos:start="79:49" pos:end="79:50">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:53"><expr pos:start="81:9" pos:end="81:52"><call pos:start="81:9" pos:end="81:52"><name pos:start="81:9" pos:end="81:14">execlp</name><argument_list pos:start="81:15" pos:end="81:52">(<argument pos:start="81:16" pos:end="81:24"><expr pos:start="81:16" pos:end="81:24"><literal type="string" pos:start="81:16" pos:end="81:24">"/bin/sh"</literal></expr></argument>, <argument pos:start="81:27" pos:end="81:30"><expr pos:start="81:27" pos:end="81:30"><literal type="string" pos:start="81:27" pos:end="81:30">"sh"</literal></expr></argument>, <argument pos:start="81:33" pos:end="81:36"><expr pos:start="81:33" pos:end="81:36"><literal type="string" pos:start="81:33" pos:end="81:36">"-c"</literal></expr></argument>, <argument pos:start="81:39" pos:end="81:45"><expr pos:start="81:39" pos:end="81:45"><name pos:start="81:39" pos:end="81:45">command</name></expr></argument>, <argument pos:start="81:48" pos:end="81:51"><expr pos:start="81:48" pos:end="81:51"><name pos:start="81:48" pos:end="81:51">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:16"><expr pos:start="83:9" pos:end="83:15"><call pos:start="83:9" pos:end="83:15"><name pos:start="83:9" pos:end="83:12">exit</name><argument_list pos:start="83:13" pos:end="83:15">(<argument pos:start="83:14" pos:end="83:14"><expr pos:start="83:14" pos:end="83:14"><literal type="number" pos:start="83:14" pos:end="83:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:32"><expr pos:start="89:5" pos:end="89:31"><name pos:start="89:5" pos:end="89:9"><name pos:start="89:5" pos:end="89:5">s</name><operator pos:start="89:6" pos:end="89:7">-&gt;</operator><name pos:start="89:8" pos:end="89:9">fd</name></name> <operator pos:start="89:11" pos:end="89:11">=</operator> <call pos:start="89:13" pos:end="89:31"><name pos:start="89:13" pos:end="89:25">socket_accept</name><argument_list pos:start="89:26" pos:end="89:31">(<argument pos:start="89:27" pos:end="89:30"><expr pos:start="89:27" pos:end="89:30"><name pos:start="89:27" pos:end="89:30">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:39"><expr pos:start="91:5" pos:end="91:38"><name pos:start="91:5" pos:end="91:13"><name pos:start="91:5" pos:end="91:5">s</name><operator pos:start="91:6" pos:end="91:7">-&gt;</operator><name pos:start="91:8" pos:end="91:13">qmp_fd</name></name> <operator pos:start="91:15" pos:end="91:15">=</operator> <call pos:start="91:17" pos:end="91:38"><name pos:start="91:17" pos:end="91:29">socket_accept</name><argument_list pos:start="91:30" pos:end="91:38">(<argument pos:start="91:31" pos:end="91:37"><expr pos:start="91:31" pos:end="91:37"><name pos:start="91:31" pos:end="91:37">qmpsock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:24"><expr pos:start="93:5" pos:end="93:23"><call pos:start="93:5" pos:end="93:23"><name pos:start="93:5" pos:end="93:10">unlink</name><argument_list pos:start="93:11" pos:end="93:23">(<argument pos:start="93:12" pos:end="93:22"><expr pos:start="93:12" pos:end="93:22"><name pos:start="93:12" pos:end="93:22">socket_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:28"><expr pos:start="95:5" pos:end="95:27"><call pos:start="95:5" pos:end="95:27"><name pos:start="95:5" pos:end="95:10">unlink</name><argument_list pos:start="95:11" pos:end="95:27">(<argument pos:start="95:12" pos:end="95:26"><expr pos:start="95:12" pos:end="95:26"><name pos:start="95:12" pos:end="95:26">qmp_socket_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:24"><expr pos:start="97:5" pos:end="97:23"><call pos:start="97:5" pos:end="97:23"><name pos:start="97:5" pos:end="97:10">g_free</name><argument_list pos:start="97:11" pos:end="97:23">(<argument pos:start="97:12" pos:end="97:22"><expr pos:start="97:12" pos:end="97:22"><name pos:start="97:12" pos:end="97:22">socket_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:28"><expr pos:start="99:5" pos:end="99:27"><call pos:start="99:5" pos:end="99:27"><name pos:start="99:5" pos:end="99:10">g_free</name><argument_list pos:start="99:11" pos:end="99:27">(<argument pos:start="99:12" pos:end="99:26"><expr pos:start="99:12" pos:end="99:26"><name pos:start="99:12" pos:end="99:26">qmp_socket_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:29"><expr pos:start="103:5" pos:end="103:28"><name pos:start="103:5" pos:end="103:9"><name pos:start="103:5" pos:end="103:5">s</name><operator pos:start="103:6" pos:end="103:7">-&gt;</operator><name pos:start="103:8" pos:end="103:9">rx</name></name> <operator pos:start="103:11" pos:end="103:11">=</operator> <call pos:start="103:13" pos:end="103:28"><name pos:start="103:13" pos:end="103:24">g_string_new</name><argument_list pos:start="103:25" pos:end="103:28">(<argument pos:start="103:26" pos:end="103:27"><expr pos:start="103:26" pos:end="103:27"><literal type="string" pos:start="103:26" pos:end="103:27">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="105:5" pos:end="109:5">for <control pos:start="105:9" pos:end="105:33">(<init pos:start="105:10" pos:end="105:15"><expr pos:start="105:10" pos:end="105:14"><name pos:start="105:10" pos:end="105:10">i</name> <operator pos:start="105:12" pos:end="105:12">=</operator> <literal type="number" pos:start="105:14" pos:end="105:14">0</literal></expr>;</init> <condition pos:start="105:17" pos:end="105:28"><expr pos:start="105:17" pos:end="105:27"><name pos:start="105:17" pos:end="105:17">i</name> <operator pos:start="105:19" pos:end="105:19">&lt;</operator> <name pos:start="105:21" pos:end="105:27">MAX_IRQ</name></expr>;</condition> <incr pos:start="105:30" pos:end="105:32"><expr pos:start="105:30" pos:end="105:32"><name pos:start="105:30" pos:end="105:30">i</name><operator pos:start="105:31" pos:end="105:32">++</operator></expr></incr>)</control> <block pos:start="105:35" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:32">

        <expr_stmt pos:start="107:9" pos:end="107:32"><expr pos:start="107:9" pos:end="107:31"><name pos:start="107:9" pos:end="107:23"><name pos:start="107:9" pos:end="107:9">s</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:20">irq_level</name><index pos:start="107:21" pos:end="107:23">[<expr pos:start="107:22" pos:end="107:22"><name pos:start="107:22" pos:end="107:22">i</name></expr>]</index></name> <operator pos:start="107:25" pos:end="107:25">=</operator> <name pos:start="107:27" pos:end="107:31">false</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="113:5" pos:end="113:57">/* Read the QMP greeting and then do the handshake */</comment>

    <expr_stmt pos:start="115:5" pos:end="115:38"><expr pos:start="115:5" pos:end="115:37"><call pos:start="115:5" pos:end="115:37"><name pos:start="115:5" pos:end="115:30">qtest_qmp_discard_response</name><argument_list pos:start="115:31" pos:end="115:37">(<argument pos:start="115:32" pos:end="115:32"><expr pos:start="115:32" pos:end="115:32"><name pos:start="115:32" pos:end="115:32">s</name></expr></argument>, <argument pos:start="115:35" pos:end="115:36"><expr pos:start="115:35" pos:end="115:36"><literal type="string" pos:start="115:35" pos:end="115:36">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:71"><expr pos:start="117:5" pos:end="117:70"><call pos:start="117:5" pos:end="117:70"><name pos:start="117:5" pos:end="117:30">qtest_qmp_discard_response</name><argument_list pos:start="117:31" pos:end="117:70">(<argument pos:start="117:32" pos:end="117:32"><expr pos:start="117:32" pos:end="117:32"><name pos:start="117:32" pos:end="117:32">s</name></expr></argument>, <argument pos:start="117:35" pos:end="117:69"><expr pos:start="117:35" pos:end="117:69"><literal type="string" pos:start="117:35" pos:end="117:69">"{ 'execute': 'qmp_capabilities' }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="121:5" pos:end="125:5"><if pos:start="121:5" pos:end="125:5">if <condition pos:start="121:8" pos:end="121:29">(<expr pos:start="121:9" pos:end="121:28"><call pos:start="121:9" pos:end="121:28"><name pos:start="121:9" pos:end="121:14">getenv</name><argument_list pos:start="121:15" pos:end="121:28">(<argument pos:start="121:16" pos:end="121:27"><expr pos:start="121:16" pos:end="121:27"><literal type="string" pos:start="121:16" pos:end="121:27">"QTEST_STOP"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="121:31" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:35">

        <expr_stmt pos:start="123:9" pos:end="123:35"><expr pos:start="123:9" pos:end="123:34"><call pos:start="123:9" pos:end="123:34"><name pos:start="123:9" pos:end="123:12">kill</name><argument_list pos:start="123:13" pos:end="123:34">(<argument pos:start="123:14" pos:end="123:24"><expr pos:start="123:14" pos:end="123:24"><name pos:start="123:14" pos:end="123:24"><name pos:start="123:14" pos:end="123:14">s</name><operator pos:start="123:15" pos:end="123:16">-&gt;</operator><name pos:start="123:17" pos:end="123:24">qemu_pid</name></name></expr></argument>, <argument pos:start="123:27" pos:end="123:33"><expr pos:start="123:27" pos:end="123:33"><name pos:start="123:27" pos:end="123:33">SIGSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="129:5" pos:end="129:13">return <expr pos:start="129:12" pos:end="129:12"><name pos:start="129:12" pos:end="129:12">s</name></expr>;</return>

</block_content>}</block></function>
</unit>
