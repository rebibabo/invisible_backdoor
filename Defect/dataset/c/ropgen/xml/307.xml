<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/307.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">YM3812UpdateOne</name><parameter_list pos:start="1:21" pos:end="1:60">(<parameter pos:start="1:22" pos:end="1:32"><decl pos:start="1:22" pos:end="1:32"><type pos:start="1:22" pos:end="1:32"><name pos:start="1:22" pos:end="1:27">FM_OPL</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:32">OPL</name></decl></parameter>, <parameter pos:start="1:35" pos:end="1:47"><decl pos:start="1:35" pos:end="1:47"><type pos:start="1:35" pos:end="1:47"><name pos:start="1:35" pos:end="1:39">INT16</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:47">buffer</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:59"><decl pos:start="1:50" pos:end="1:59"><type pos:start="1:50" pos:end="1:59"><name pos:start="1:50" pos:end="1:52">int</name></type> <name pos:start="1:54" pos:end="1:59">length</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="113:1">{<block_content pos:start="5:5" pos:end="112:0">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="7:17"><decl pos:start="7:9" pos:end="7:16"><type pos:start="7:9" pos:end="7:11"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:16">data</name></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:32"><decl pos:start="9:9" pos:end="9:31"><type pos:start="9:9" pos:end="9:19"><name pos:start="9:9" pos:end="9:17">OPLSAMPLE</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:31">= <expr pos:start="9:26" pos:end="9:31"><name pos:start="9:26" pos:end="9:31">buffer</name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="11:37"><decl pos:start="11:9" pos:end="11:36"><type pos:start="11:9" pos:end="11:14"><name pos:start="11:9" pos:end="11:14">UINT32</name></type> <name pos:start="11:16" pos:end="11:21">amsCnt</name>  <init pos:start="11:24" pos:end="11:36">= <expr pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:28">OPL</name><operator pos:start="11:29" pos:end="11:30">-&gt;</operator><name pos:start="11:31" pos:end="11:36">amsCnt</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="13:9" pos:end="13:37"><decl pos:start="13:9" pos:end="13:36"><type pos:start="13:9" pos:end="13:14"><name pos:start="13:9" pos:end="13:14">UINT32</name></type> <name pos:start="13:16" pos:end="13:21">vibCnt</name>  <init pos:start="13:24" pos:end="13:36">= <expr pos:start="13:26" pos:end="13:36"><name pos:start="13:26" pos:end="13:36"><name pos:start="13:26" pos:end="13:28">OPL</name><operator pos:start="13:29" pos:end="13:30">-&gt;</operator><name pos:start="13:31" pos:end="13:36">vibCnt</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="15:9" pos:end="15:38"><decl pos:start="15:9" pos:end="15:37"><type pos:start="15:9" pos:end="15:13"><name pos:start="15:9" pos:end="15:13">UINT8</name></type> <name pos:start="15:15" pos:end="15:19">rythm</name> <init pos:start="15:21" pos:end="15:37">= <expr pos:start="15:23" pos:end="15:37"><name pos:start="15:23" pos:end="15:32"><name pos:start="15:23" pos:end="15:25">OPL</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:32">rythm</name></name><operator pos:start="15:33" pos:end="15:33">&amp;</operator><literal type="number" pos:start="15:34" pos:end="15:37">0x20</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="17:9" pos:end="17:25"><decl pos:start="17:9" pos:end="17:18"><type pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:14">OPL_CH</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:18">CH</name></decl>,<decl pos:start="17:20" pos:end="17:24"><type ref="prev" pos:start="17:9" pos:end="17:16"><modifier pos:start="17:20" pos:end="17:20">*</modifier></type><name pos:start="17:21" pos:end="17:24">R_CH</name></decl>;</decl_stmt>



	<if_stmt pos:start="21:9" pos:end="51:9"><if pos:start="21:9" pos:end="51:9">if<condition pos:start="21:11" pos:end="21:37">( <expr pos:start="21:13" pos:end="21:35"><operator pos:start="21:13" pos:end="21:13">(</operator><name pos:start="21:14" pos:end="21:17">void</name> <operator pos:start="21:19" pos:end="21:19">*</operator><operator pos:start="21:20" pos:end="21:20">)</operator><name pos:start="21:21" pos:end="21:23">OPL</name> <operator pos:start="21:25" pos:end="21:26">!=</operator> <name pos:start="21:28" pos:end="21:35">cur_chip</name></expr> )</condition><block pos:start="21:38" pos:end="51:9">{<block_content pos:start="23:17" pos:end="49:43">

		<expr_stmt pos:start="23:17" pos:end="23:39"><expr pos:start="23:17" pos:end="23:38"><name pos:start="23:17" pos:end="23:24">cur_chip</name> <operator pos:start="23:26" pos:end="23:26">=</operator> <operator pos:start="23:28" pos:end="23:28">(</operator><name pos:start="23:29" pos:end="23:32">void</name> <operator pos:start="23:34" pos:end="23:34">*</operator><operator pos:start="23:35" pos:end="23:35">)</operator><name pos:start="23:36" pos:end="23:38">OPL</name></expr>;</expr_stmt>

		<comment type="block" pos:start="25:17" pos:end="25:38">/* channel pointers */</comment>

		<expr_stmt pos:start="27:17" pos:end="27:33"><expr pos:start="27:17" pos:end="27:32"><name pos:start="27:17" pos:end="27:20">S_CH</name> <operator pos:start="27:22" pos:end="27:22">=</operator> <name pos:start="27:24" pos:end="27:32"><name pos:start="27:24" pos:end="27:26">OPL</name><operator pos:start="27:27" pos:end="27:28">-&gt;</operator><name pos:start="27:29" pos:end="27:32">P_CH</name></name></expr>;</expr_stmt>

		<expr_stmt pos:start="29:17" pos:end="29:32"><expr pos:start="29:17" pos:end="29:31"><name pos:start="29:17" pos:end="29:20">E_CH</name> <operator pos:start="29:22" pos:end="29:22">=</operator> <operator pos:start="29:24" pos:end="29:24">&amp;</operator><name pos:start="29:25" pos:end="29:31"><name pos:start="29:25" pos:end="29:28">S_CH</name><index pos:start="29:29" pos:end="29:31">[<expr pos:start="29:30" pos:end="29:30"><literal type="number" pos:start="29:30" pos:end="29:30">9</literal></expr>]</index></name></expr>;</expr_stmt>

		<comment type="block" pos:start="31:17" pos:end="31:32">/* rythm slot */</comment>

		<expr_stmt pos:start="33:17" pos:end="33:47"><expr pos:start="33:17" pos:end="33:46"><name pos:start="33:17" pos:end="33:23">SLOT7_1</name> <operator pos:start="33:25" pos:end="33:25">=</operator> <operator pos:start="33:27" pos:end="33:27">&amp;</operator><name pos:start="33:28" pos:end="33:34"><name pos:start="33:28" pos:end="33:31">S_CH</name><index pos:start="33:32" pos:end="33:34">[<expr pos:start="33:33" pos:end="33:33"><literal type="number" pos:start="33:33" pos:end="33:33">7</literal></expr>]</index></name><operator pos:start="33:35" pos:end="33:35">.</operator><name pos:start="33:36" pos:end="33:46"><name pos:start="33:36" pos:end="33:39">SLOT</name><index pos:start="33:40" pos:end="33:46">[<expr pos:start="33:41" pos:end="33:45"><name pos:start="33:41" pos:end="33:45">SLOT1</name></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt pos:start="35:17" pos:end="35:47"><expr pos:start="35:17" pos:end="35:46"><name pos:start="35:17" pos:end="35:23">SLOT7_2</name> <operator pos:start="35:25" pos:end="35:25">=</operator> <operator pos:start="35:27" pos:end="35:27">&amp;</operator><name pos:start="35:28" pos:end="35:34"><name pos:start="35:28" pos:end="35:31">S_CH</name><index pos:start="35:32" pos:end="35:34">[<expr pos:start="35:33" pos:end="35:33"><literal type="number" pos:start="35:33" pos:end="35:33">7</literal></expr>]</index></name><operator pos:start="35:35" pos:end="35:35">.</operator><name pos:start="35:36" pos:end="35:46"><name pos:start="35:36" pos:end="35:39">SLOT</name><index pos:start="35:40" pos:end="35:46">[<expr pos:start="35:41" pos:end="35:45"><name pos:start="35:41" pos:end="35:45">SLOT2</name></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt pos:start="37:17" pos:end="37:47"><expr pos:start="37:17" pos:end="37:46"><name pos:start="37:17" pos:end="37:23">SLOT8_1</name> <operator pos:start="37:25" pos:end="37:25">=</operator> <operator pos:start="37:27" pos:end="37:27">&amp;</operator><name pos:start="37:28" pos:end="37:34"><name pos:start="37:28" pos:end="37:31">S_CH</name><index pos:start="37:32" pos:end="37:34">[<expr pos:start="37:33" pos:end="37:33"><literal type="number" pos:start="37:33" pos:end="37:33">8</literal></expr>]</index></name><operator pos:start="37:35" pos:end="37:35">.</operator><name pos:start="37:36" pos:end="37:46"><name pos:start="37:36" pos:end="37:39">SLOT</name><index pos:start="37:40" pos:end="37:46">[<expr pos:start="37:41" pos:end="37:45"><name pos:start="37:41" pos:end="37:45">SLOT1</name></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt pos:start="39:17" pos:end="39:47"><expr pos:start="39:17" pos:end="39:46"><name pos:start="39:17" pos:end="39:23">SLOT8_2</name> <operator pos:start="39:25" pos:end="39:25">=</operator> <operator pos:start="39:27" pos:end="39:27">&amp;</operator><name pos:start="39:28" pos:end="39:34"><name pos:start="39:28" pos:end="39:31">S_CH</name><index pos:start="39:32" pos:end="39:34">[<expr pos:start="39:33" pos:end="39:33"><literal type="number" pos:start="39:33" pos:end="39:33">8</literal></expr>]</index></name><operator pos:start="39:35" pos:end="39:35">.</operator><name pos:start="39:36" pos:end="39:46"><name pos:start="39:36" pos:end="39:39">SLOT</name><index pos:start="39:40" pos:end="39:46">[<expr pos:start="39:41" pos:end="39:45"><name pos:start="39:41" pos:end="39:45">SLOT2</name></expr>]</index></name></expr>;</expr_stmt>

		<comment type="block" pos:start="41:17" pos:end="41:31">/* LFO state */</comment>

		<expr_stmt pos:start="43:17" pos:end="43:39"><expr pos:start="43:17" pos:end="43:38"><name pos:start="43:17" pos:end="43:23">amsIncr</name> <operator pos:start="43:25" pos:end="43:25">=</operator> <name pos:start="43:27" pos:end="43:38"><name pos:start="43:27" pos:end="43:29">OPL</name><operator pos:start="43:30" pos:end="43:31">-&gt;</operator><name pos:start="43:32" pos:end="43:38">amsIncr</name></name></expr>;</expr_stmt>

		<expr_stmt pos:start="45:17" pos:end="45:39"><expr pos:start="45:17" pos:end="45:38"><name pos:start="45:17" pos:end="45:23">vibIncr</name> <operator pos:start="45:25" pos:end="45:25">=</operator> <name pos:start="45:27" pos:end="45:38"><name pos:start="45:27" pos:end="45:29">OPL</name><operator pos:start="45:30" pos:end="45:31">-&gt;</operator><name pos:start="45:32" pos:end="45:38">vibIncr</name></name></expr>;</expr_stmt>

		<expr_stmt pos:start="47:17" pos:end="47:43"><expr pos:start="47:17" pos:end="47:42"><name pos:start="47:17" pos:end="47:25">ams_table</name> <operator pos:start="47:27" pos:end="47:27">=</operator> <name pos:start="47:29" pos:end="47:42"><name pos:start="47:29" pos:end="47:31">OPL</name><operator pos:start="47:32" pos:end="47:33">-&gt;</operator><name pos:start="47:34" pos:end="47:42">ams_table</name></name></expr>;</expr_stmt>

		<expr_stmt pos:start="49:17" pos:end="49:43"><expr pos:start="49:17" pos:end="49:42"><name pos:start="49:17" pos:end="49:25">vib_table</name> <operator pos:start="49:27" pos:end="49:27">=</operator> <name pos:start="49:29" pos:end="49:42"><name pos:start="49:29" pos:end="49:31">OPL</name><operator pos:start="49:32" pos:end="49:33">-&gt;</operator><name pos:start="49:34" pos:end="49:42">vib_table</name></name></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="53:9" pos:end="53:39"><expr pos:start="53:9" pos:end="53:38"><name pos:start="53:9" pos:end="53:12">R_CH</name> <operator pos:start="53:14" pos:end="53:14">=</operator> <ternary pos:start="53:16" pos:end="53:38"><condition pos:start="53:16" pos:end="53:22"><expr pos:start="53:16" pos:end="53:20"><name pos:start="53:16" pos:end="53:20">rythm</name></expr> ?</condition><then pos:start="53:24" pos:end="53:31"> <expr pos:start="53:24" pos:end="53:31"><operator pos:start="53:24" pos:end="53:24">&amp;</operator><name pos:start="53:25" pos:end="53:31"><name pos:start="53:25" pos:end="53:28">S_CH</name><index pos:start="53:29" pos:end="53:31">[<expr pos:start="53:30" pos:end="53:30"><literal type="number" pos:start="53:30" pos:end="53:30">6</literal></expr>]</index></name></expr> </then><else pos:start="53:33" pos:end="53:38">: <expr pos:start="53:35" pos:end="53:38"><name pos:start="53:35" pos:end="53:38">E_CH</name></expr></else></ternary></expr>;</expr_stmt>

    <for pos:start="55:5" pos:end="89:9">for<control pos:start="55:8" pos:end="55:32">( <init pos:start="55:10" pos:end="55:13"><expr pos:start="55:10" pos:end="55:12"><name pos:start="55:10" pos:end="55:10">i</name><operator pos:start="55:11" pos:end="55:11">=</operator><literal type="number" pos:start="55:12" pos:end="55:12">0</literal></expr>;</init> <condition pos:start="55:15" pos:end="55:26"><expr pos:start="55:15" pos:end="55:24"><name pos:start="55:15" pos:end="55:15">i</name> <operator pos:start="55:17" pos:end="55:17">&lt;</operator> <name pos:start="55:19" pos:end="55:24">length</name></expr> ;</condition> <incr pos:start="55:28" pos:end="55:30"><expr pos:start="55:28" pos:end="55:30"><name pos:start="55:28" pos:end="55:28">i</name><operator pos:start="55:29" pos:end="55:30">++</operator></expr></incr> )</control>

	<block pos:start="57:9" pos:end="89:9">{<block_content pos:start="63:17" pos:end="87:43">

		<comment type="block" pos:start="59:17" pos:end="59:83">/*            channel A         channel B         channel C      */</comment>

		<comment type="block" pos:start="61:17" pos:end="61:25">/* LFO */</comment>

		<expr_stmt pos:start="63:17" pos:end="63:62"><expr pos:start="63:17" pos:end="63:61"><name pos:start="63:17" pos:end="63:19">ams</name> <operator pos:start="63:21" pos:end="63:21">=</operator> <name pos:start="63:23" pos:end="63:61"><name pos:start="63:23" pos:end="63:31">ams_table</name><index pos:start="63:32" pos:end="63:61">[<expr pos:start="63:33" pos:end="63:60"><operator pos:start="63:33" pos:end="63:33">(</operator><name pos:start="63:34" pos:end="63:39">amsCnt</name><operator pos:start="63:40" pos:end="63:41">+=</operator><name pos:start="63:42" pos:end="63:48">amsIncr</name><operator pos:start="63:49" pos:end="63:49">)</operator><operator pos:start="63:50" pos:end="63:51">&gt;&gt;</operator><name pos:start="63:52" pos:end="63:60">AMS_SHIFT</name></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt pos:start="65:17" pos:end="65:62"><expr pos:start="65:17" pos:end="65:61"><name pos:start="65:17" pos:end="65:19">vib</name> <operator pos:start="65:21" pos:end="65:21">=</operator> <name pos:start="65:23" pos:end="65:61"><name pos:start="65:23" pos:end="65:31">vib_table</name><index pos:start="65:32" pos:end="65:61">[<expr pos:start="65:33" pos:end="65:60"><operator pos:start="65:33" pos:end="65:33">(</operator><name pos:start="65:34" pos:end="65:39">vibCnt</name><operator pos:start="65:40" pos:end="65:41">+=</operator><name pos:start="65:42" pos:end="65:48">vibIncr</name><operator pos:start="65:49" pos:end="65:49">)</operator><operator pos:start="65:50" pos:end="65:51">&gt;&gt;</operator><name pos:start="65:52" pos:end="65:60">VIB_SHIFT</name></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt pos:start="67:17" pos:end="67:28"><expr pos:start="67:17" pos:end="67:27"><name pos:start="67:17" pos:end="67:23"><name pos:start="67:17" pos:end="67:20">outd</name><index pos:start="67:21" pos:end="67:23">[<expr pos:start="67:22" pos:end="67:22"><literal type="number" pos:start="67:22" pos:end="67:22">0</literal></expr>]</index></name> <operator pos:start="67:25" pos:end="67:25">=</operator> <literal type="number" pos:start="67:27" pos:end="67:27">0</literal></expr>;</expr_stmt>

		<comment type="block" pos:start="69:17" pos:end="69:29">/* FM part */</comment>

		<for pos:start="71:17" pos:end="73:40">for<control pos:start="71:20" pos:end="71:47">(<init pos:start="71:21" pos:end="71:29"><expr pos:start="71:21" pos:end="71:27"><name pos:start="71:21" pos:end="71:22">CH</name><operator pos:start="71:23" pos:end="71:23">=</operator><name pos:start="71:24" pos:end="71:27">S_CH</name></expr> ;</init> <condition pos:start="71:31" pos:end="71:41"><expr pos:start="71:31" pos:end="71:39"><name pos:start="71:31" pos:end="71:32">CH</name> <operator pos:start="71:34" pos:end="71:34">&lt;</operator> <name pos:start="71:36" pos:end="71:39">R_CH</name></expr> ;</condition> <incr pos:start="71:43" pos:end="71:46"><expr pos:start="71:43" pos:end="71:46"><name pos:start="71:43" pos:end="71:44">CH</name><operator pos:start="71:45" pos:end="71:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="73:25" pos:end="73:40"><block_content pos:start="73:25" pos:end="73:40">

			<expr_stmt pos:start="73:25" pos:end="73:40"><expr pos:start="73:25" pos:end="73:39"><call pos:start="73:25" pos:end="73:39"><name pos:start="73:25" pos:end="73:35">OPL_CALC_CH</name><argument_list pos:start="73:36" pos:end="73:39">(<argument pos:start="73:37" pos:end="73:38"><expr pos:start="73:37" pos:end="73:38"><name pos:start="73:37" pos:end="73:38">CH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

		<comment type="block" pos:start="75:17" pos:end="75:32">/* Rythn part */</comment>

		<if_stmt pos:start="77:17" pos:end="79:42"><if pos:start="77:17" pos:end="79:42">if<condition pos:start="77:19" pos:end="77:25">(<expr pos:start="77:20" pos:end="77:24"><name pos:start="77:20" pos:end="77:24">rythm</name></expr>)</condition><block type="pseudo" pos:start="79:25" pos:end="79:42"><block_content pos:start="79:25" pos:end="79:42">

			<expr_stmt pos:start="79:25" pos:end="79:42"><expr pos:start="79:25" pos:end="79:41"><call pos:start="79:25" pos:end="79:41"><name pos:start="79:25" pos:end="79:35">OPL_CALC_RH</name><argument_list pos:start="79:36" pos:end="79:41">(<argument pos:start="79:37" pos:end="79:40"><expr pos:start="79:37" pos:end="79:40"><name pos:start="79:37" pos:end="79:40">S_CH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block" pos:start="81:17" pos:end="81:33">/* limit check */</comment>

		<expr_stmt pos:start="83:17" pos:end="83:65"><expr pos:start="83:17" pos:end="83:64"><name pos:start="83:17" pos:end="83:20">data</name> <operator pos:start="83:22" pos:end="83:22">=</operator> <call pos:start="83:24" pos:end="83:64"><name pos:start="83:24" pos:end="83:28">Limit</name><argument_list pos:start="83:29" pos:end="83:64">( <argument pos:start="83:31" pos:end="83:37"><expr pos:start="83:31" pos:end="83:37"><name pos:start="83:31" pos:end="83:37"><name pos:start="83:31" pos:end="83:34">outd</name><index pos:start="83:35" pos:end="83:37">[<expr pos:start="83:36" pos:end="83:36"><literal type="number" pos:start="83:36" pos:end="83:36">0</literal></expr>]</index></name></expr></argument> , <argument pos:start="83:41" pos:end="83:50"><expr pos:start="83:41" pos:end="83:50"><name pos:start="83:41" pos:end="83:50">OPL_MAXOUT</name></expr></argument>, <argument pos:start="83:53" pos:end="83:62"><expr pos:start="83:53" pos:end="83:62"><name pos:start="83:53" pos:end="83:62">OPL_MINOUT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

		<comment type="block" pos:start="85:17" pos:end="85:43">/* store to sound buffer */</comment>

		<expr_stmt pos:start="87:17" pos:end="87:43"><expr pos:start="87:17" pos:end="87:42"><name pos:start="87:17" pos:end="87:22"><name pos:start="87:17" pos:end="87:19">buf</name><index pos:start="87:20" pos:end="87:22">[<expr pos:start="87:21" pos:end="87:21"><name pos:start="87:21" pos:end="87:21">i</name></expr>]</index></name> <operator pos:start="87:24" pos:end="87:24">=</operator> <name pos:start="87:26" pos:end="87:29">data</name> <operator pos:start="87:31" pos:end="87:32">&gt;&gt;</operator> <name pos:start="87:34" pos:end="87:42">OPL_OUTSB</name></expr>;</expr_stmt>

	</block_content>}</block></for>



	<expr_stmt pos:start="93:9" pos:end="93:29"><expr pos:start="93:9" pos:end="93:28"><name pos:start="93:9" pos:end="93:19"><name pos:start="93:9" pos:end="93:11">OPL</name><operator pos:start="93:12" pos:end="93:13">-&gt;</operator><name pos:start="93:14" pos:end="93:19">amsCnt</name></name> <operator pos:start="93:21" pos:end="93:21">=</operator> <name pos:start="93:23" pos:end="93:28">amsCnt</name></expr>;</expr_stmt>

	<expr_stmt pos:start="95:9" pos:end="98:0"><expr pos:start="95:9" pos:end="95:28"><name pos:start="95:9" pos:end="95:19"><name pos:start="95:9" pos:end="95:11">OPL</name><operator pos:start="95:12" pos:end="95:13">-&gt;</operator><name pos:start="95:14" pos:end="95:19">vibCnt</name></name> <operator pos:start="95:21" pos:end="95:21">=</operator> <name pos:start="95:23" pos:end="95:28">vibCnt</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="97:1" pos:end="97:21">#<cpp:directive pos:start="97:2" pos:end="97:6">ifdef</cpp:directive> <name pos:start="97:8" pos:end="97:21">OPL_OUTPUT_LOG</name></cpp:ifdef>

	<if_stmt pos:start="99:9" pos:end="112:0"><if pos:start="99:9" pos:end="112:0">if<condition pos:start="99:11" pos:end="99:22">(<expr pos:start="99:12" pos:end="99:21"><name pos:start="99:12" pos:end="99:21">opl_dbg_fp</name></expr>)</condition>

	<block pos:start="101:9" pos:end="112:0">{<block_content pos:start="103:17" pos:end="107:86">

		<for pos:start="103:17" pos:end="105:68">for<control pos:start="103:20" pos:end="103:79">(<init pos:start="103:21" pos:end="103:35"><expr pos:start="103:21" pos:end="103:34"><name pos:start="103:21" pos:end="103:32">opl_dbg_chip</name><operator pos:start="103:33" pos:end="103:33">=</operator><literal type="number" pos:start="103:34" pos:end="103:34">0</literal></expr>;</init><condition pos:start="103:36" pos:end="103:64"><expr pos:start="103:36" pos:end="103:63"><name pos:start="103:36" pos:end="103:47">opl_dbg_chip</name><operator pos:start="103:48" pos:end="103:48">&lt;</operator><name pos:start="103:49" pos:end="103:63">opl_dbg_maxchip</name></expr>;</condition><incr pos:start="103:65" pos:end="103:78"><expr pos:start="103:65" pos:end="103:78"><name pos:start="103:65" pos:end="103:76">opl_dbg_chip</name><operator pos:start="103:77" pos:end="103:78">++</operator></expr></incr>)</control><block type="pseudo" pos:start="105:25" pos:end="105:68"><block_content pos:start="105:25" pos:end="105:68">

			<if_stmt pos:start="105:25" pos:end="105:68"><if pos:start="105:25" pos:end="105:68">if<condition pos:start="105:27" pos:end="105:61">( <expr pos:start="105:29" pos:end="105:60"><name pos:start="105:29" pos:end="105:53"><name pos:start="105:29" pos:end="105:39">opl_dbg_opl</name><index pos:start="105:40" pos:end="105:53">[<expr pos:start="105:41" pos:end="105:52"><name pos:start="105:41" pos:end="105:52">opl_dbg_chip</name></expr>]</index></name> <operator pos:start="105:55" pos:end="105:56">==</operator> <name pos:start="105:58" pos:end="105:60">OPL</name></expr>)</condition><block type="pseudo" pos:start="105:63" pos:end="105:68"><block_content pos:start="105:63" pos:end="105:68"> <break pos:start="105:63" pos:end="105:68">break;</break></block_content></block></if></if_stmt></block_content></block></for>

		<expr_stmt pos:start="107:17" pos:end="107:86"><expr pos:start="107:17" pos:end="107:85"><call pos:start="107:17" pos:end="107:85"><name pos:start="107:17" pos:end="107:23">fprintf</name><argument_list pos:start="107:24" pos:end="107:85">(<argument pos:start="107:25" pos:end="107:34"><expr pos:start="107:25" pos:end="107:34"><name pos:start="107:25" pos:end="107:34">opl_dbg_fp</name></expr></argument>,<argument pos:start="107:36" pos:end="107:43"><expr pos:start="107:36" pos:end="107:43"><literal type="string" pos:start="107:36" pos:end="107:43">"%c%c%c"</literal></expr></argument>,<argument pos:start="107:45" pos:end="107:61"><expr pos:start="107:45" pos:end="107:61"><literal type="number" pos:start="107:45" pos:end="107:49">0x20</literal><operator pos:start="107:49" pos:end="107:49">+</operator><name pos:start="107:50" pos:end="107:61">opl_dbg_chip</name></expr></argument>,<argument pos:start="107:63" pos:end="107:73"><expr pos:start="107:63" pos:end="107:73"><name pos:start="107:63" pos:end="107:68">length</name><operator pos:start="107:69" pos:end="107:69">&amp;</operator><literal type="number" pos:start="107:70" pos:end="107:73">0xff</literal></expr></argument>,<argument pos:start="107:75" pos:end="107:84"><expr pos:start="107:75" pos:end="107:84"><name pos:start="107:75" pos:end="107:80">length</name><operator pos:start="107:81" pos:end="107:81">/</operator><literal type="number" pos:start="107:82" pos:end="107:84">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

<cpp:endif pos:start="111:1" pos:end="111:6">#<cpp:directive pos:start="111:2" pos:end="111:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
