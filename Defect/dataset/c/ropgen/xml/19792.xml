<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19792.c" pos:tabs="8"><function pos:start="1:1" pos:end="213:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:30">qcow2_alloc_cluster_offset</name><parameter_list pos:start="1:31" pos:end="3:52">(<parameter pos:start="1:32" pos:end="1:51"><decl pos:start="1:32" pos:end="1:51"><type pos:start="1:32" pos:end="1:51"><name pos:start="1:32" pos:end="1:47">BlockDriverState</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:51">bs</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:68"><decl pos:start="1:54" pos:end="1:68"><type pos:start="1:54" pos:end="1:68"><name pos:start="1:54" pos:end="1:61">uint64_t</name></type> <name pos:start="1:63" pos:end="1:68">offset</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:12"><decl pos:start="3:5" pos:end="3:12"><type pos:start="3:5" pos:end="3:12"><name pos:start="3:5" pos:end="3:7">int</name> <modifier pos:start="3:9" pos:end="3:9">*</modifier></type><name pos:start="3:10" pos:end="3:12">num</name></decl></parameter>, <parameter pos:start="3:15" pos:end="3:35"><decl pos:start="3:15" pos:end="3:35"><type pos:start="3:15" pos:end="3:35"><name pos:start="3:15" pos:end="3:22">uint64_t</name> <modifier pos:start="3:24" pos:end="3:24">*</modifier></type><name pos:start="3:25" pos:end="3:35">host_offset</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:51"><decl pos:start="3:38" pos:end="3:51"><type pos:start="3:38" pos:end="3:51"><name pos:start="3:38" pos:end="3:47">QCowL2Meta</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier><modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:51">m</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="213:1">{<block_content pos:start="7:5" pos:end="211:13">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:18">start</name></decl>, <decl pos:start="9:21" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:21" pos:end="9:29">remaining</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:27">cluster_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:22">cur_bytes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:75"><expr pos:start="19:5" pos:end="19:74"><call pos:start="19:5" pos:end="19:74"><name pos:start="19:5" pos:end="19:37">trace_qcow2_alloc_clusters_offset</name><argument_list pos:start="19:38" pos:end="19:74">(<argument pos:start="19:39" pos:end="19:59"><expr pos:start="19:39" pos:end="19:59"><call pos:start="19:39" pos:end="19:59"><name pos:start="19:39" pos:end="19:57">qemu_coroutine_self</name><argument_list pos:start="19:58" pos:end="19:59">()</argument_list></call></expr></argument>, <argument pos:start="19:62" pos:end="19:67"><expr pos:start="19:62" pos:end="19:67"><name pos:start="19:62" pos:end="19:67">offset</name></expr></argument>, <argument pos:start="19:70" pos:end="19:73"><expr pos:start="19:70" pos:end="19:73"><operator pos:start="19:70" pos:end="19:70">*</operator><name pos:start="19:71" pos:end="19:73">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:46"><expr pos:start="23:5" pos:end="23:45"><call pos:start="23:5" pos:end="23:45"><name pos:start="23:5" pos:end="23:10">assert</name><argument_list pos:start="23:11" pos:end="23:45">(<argument pos:start="23:12" pos:end="23:44"><expr pos:start="23:12" pos:end="23:44"><operator pos:start="23:12" pos:end="23:12">(</operator><name pos:start="23:13" pos:end="23:18">offset</name> <operator pos:start="23:20" pos:end="23:20">&amp;</operator> <operator pos:start="23:22" pos:end="23:22">~</operator><name pos:start="23:23" pos:end="23:38">BDRV_SECTOR_MASK</name><operator pos:start="23:39" pos:end="23:39">)</operator> <operator pos:start="23:41" pos:end="23:42">==</operator> <literal type="number" pos:start="23:44" pos:end="23:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="27:1" pos:end="27:6"><name pos:start="27:1" pos:end="27:5">again</name>:</label>

    <expr_stmt pos:start="29:5" pos:end="29:19"><expr pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:9">start</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <name pos:start="29:13" pos:end="29:18">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:41"><expr pos:start="31:5" pos:end="31:40"><name pos:start="31:5" pos:end="31:13">remaining</name> <operator pos:start="31:15" pos:end="31:15">=</operator> <operator pos:start="31:17" pos:end="31:17">*</operator><name pos:start="31:18" pos:end="31:20">num</name> <operator pos:start="31:22" pos:end="31:23">&lt;&lt;</operator> <name pos:start="31:25" pos:end="31:40">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:23"><expr pos:start="33:5" pos:end="33:22"><name pos:start="33:5" pos:end="33:18">cluster_offset</name> <operator pos:start="33:20" pos:end="33:20">=</operator> <literal type="number" pos:start="33:22" pos:end="33:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:21"><expr pos:start="35:5" pos:end="35:20"><operator pos:start="35:5" pos:end="35:5">*</operator><name pos:start="35:6" pos:end="35:16">host_offset</name> <operator pos:start="35:18" pos:end="35:18">=</operator> <literal type="number" pos:start="35:20" pos:end="35:20">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:18"><expr pos:start="37:5" pos:end="37:17"><name pos:start="37:5" pos:end="37:13">cur_bytes</name> <operator pos:start="37:15" pos:end="37:15">=</operator> <literal type="number" pos:start="37:17" pos:end="37:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:14"><expr pos:start="39:5" pos:end="39:13"><operator pos:start="39:5" pos:end="39:5">*</operator><name pos:start="39:6" pos:end="39:6">m</name> <operator pos:start="39:8" pos:end="39:8">=</operator> <name pos:start="39:10" pos:end="39:13">NULL</name></expr>;</expr_stmt>



    <while pos:start="43:5" pos:end="199:5">while <condition pos:start="43:11" pos:end="43:16">(<expr pos:start="43:12" pos:end="43:15"><name pos:start="43:12" pos:end="43:15">true</name></expr>)</condition> <block pos:start="43:18" pos:end="199:5">{<block_content pos:start="47:9" pos:end="197:9">



        <if_stmt pos:start="47:9" pos:end="51:9"><if pos:start="47:9" pos:end="51:9">if <condition pos:start="47:12" pos:end="47:26">(<expr pos:start="47:13" pos:end="47:25"><operator pos:start="47:13" pos:end="47:13">!</operator><operator pos:start="47:14" pos:end="47:14">*</operator><name pos:start="47:15" pos:end="47:25">host_offset</name></expr>)</condition> <block pos:start="47:28" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:63">

            <expr_stmt pos:start="49:13" pos:end="49:63"><expr pos:start="49:13" pos:end="49:62"><operator pos:start="49:13" pos:end="49:13">*</operator><name pos:start="49:14" pos:end="49:24">host_offset</name> <operator pos:start="49:26" pos:end="49:26">=</operator> <call pos:start="49:28" pos:end="49:62"><name pos:start="49:28" pos:end="49:43">start_of_cluster</name><argument_list pos:start="49:44" pos:end="49:62">(<argument pos:start="49:45" pos:end="49:45"><expr pos:start="49:45" pos:end="49:45"><name pos:start="49:45" pos:end="49:45">s</name></expr></argument>, <argument pos:start="49:48" pos:end="49:61"><expr pos:start="49:48" pos:end="49:61"><name pos:start="49:48" pos:end="49:61">cluster_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:39"><expr pos:start="55:9" pos:end="55:38"><call pos:start="55:9" pos:end="55:38"><name pos:start="55:9" pos:end="55:14">assert</name><argument_list pos:start="55:15" pos:end="55:38">(<argument pos:start="55:16" pos:end="55:37"><expr pos:start="55:16" pos:end="55:37"><name pos:start="55:16" pos:end="55:24">remaining</name> <operator pos:start="55:26" pos:end="55:27">&gt;=</operator> <name pos:start="55:29" pos:end="55:37">cur_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:37"><expr pos:start="59:9" pos:end="59:36"><name pos:start="59:9" pos:end="59:13">start</name>           <operator pos:start="59:25" pos:end="59:26">+=</operator> <name pos:start="59:28" pos:end="59:36">cur_bytes</name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:37"><expr pos:start="61:9" pos:end="61:36"><name pos:start="61:9" pos:end="61:17">remaining</name>       <operator pos:start="61:25" pos:end="61:26">-=</operator> <name pos:start="61:28" pos:end="61:36">cur_bytes</name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:37"><expr pos:start="63:9" pos:end="63:36"><name pos:start="63:9" pos:end="63:22">cluster_offset</name>  <operator pos:start="63:25" pos:end="63:26">+=</operator> <name pos:start="63:28" pos:end="63:36">cur_bytes</name></expr>;</expr_stmt>



        <if_stmt pos:start="67:9" pos:end="71:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:27">(<expr pos:start="67:13" pos:end="67:26"><name pos:start="67:13" pos:end="67:21">remaining</name> <operator pos:start="67:23" pos:end="67:24">==</operator> <literal type="number" pos:start="67:26" pos:end="67:26">0</literal></expr>)</condition> <block pos:start="67:29" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:18">

            <break pos:start="69:13" pos:end="69:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="75:9" pos:end="75:30"><expr pos:start="75:9" pos:end="75:29"><name pos:start="75:9" pos:end="75:17">cur_bytes</name> <operator pos:start="75:19" pos:end="75:19">=</operator> <name pos:start="75:21" pos:end="75:29">remaining</name></expr>;</expr_stmt>



        <comment type="block" pos:start="79:9" pos:end="113:11">/*

         * Now start gathering as many contiguous clusters as possible:

         *

         * 1. Check for overlaps with in-flight allocations

         *

         *      a) Overlap not in the first cluster -&gt; shorten this request and

         *         let the caller handle the rest in its next loop iteration.

         *

         *      b) Real overlaps of two requests. Yield and restart the search

         *         for contiguous clusters (the situation could have changed

         *         while we were sleeping)

         *

         *      c) TODO: Request starts in the same cluster as the in-flight

         *         allocation ends. Shorten the COW of the in-fight allocation,

         *         set cluster_offset to write to the same cluster and set up

         *         the right synchronisation between the in-flight request and

         *         the new one.

         */</comment>

        <expr_stmt pos:start="115:9" pos:end="115:60"><expr pos:start="115:9" pos:end="115:59"><name pos:start="115:9" pos:end="115:11">ret</name> <operator pos:start="115:13" pos:end="115:13">=</operator> <call pos:start="115:15" pos:end="115:59"><name pos:start="115:15" pos:end="115:33">handle_dependencies</name><argument_list pos:start="115:34" pos:end="115:59">(<argument pos:start="115:35" pos:end="115:36"><expr pos:start="115:35" pos:end="115:36"><name pos:start="115:35" pos:end="115:36">bs</name></expr></argument>, <argument pos:start="115:39" pos:end="115:43"><expr pos:start="115:39" pos:end="115:43"><name pos:start="115:39" pos:end="115:43">start</name></expr></argument>, <argument pos:start="115:46" pos:end="115:55"><expr pos:start="115:46" pos:end="115:55"><operator pos:start="115:46" pos:end="115:46">&amp;</operator><name pos:start="115:47" pos:end="115:55">cur_bytes</name></expr></argument>, <argument pos:start="115:58" pos:end="115:58"><expr pos:start="115:58" pos:end="115:58"><name pos:start="115:58" pos:end="115:58">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="117:9" pos:end="145:9"><if pos:start="117:9" pos:end="129:9">if <condition pos:start="117:12" pos:end="117:27">(<expr pos:start="117:13" pos:end="117:26"><name pos:start="117:13" pos:end="117:15">ret</name> <operator pos:start="117:17" pos:end="117:18">==</operator> <operator pos:start="117:20" pos:end="117:20">-</operator><name pos:start="117:21" pos:end="117:26">EAGAIN</name></expr>)</condition> <block pos:start="117:29" pos:end="129:9">{<block_content pos:start="125:13" pos:end="127:23">

            <comment type="block" pos:start="119:13" pos:end="123:47">/* Currently handle_dependencies() doesn't yield if we already had

             * an allocation. If it did, we would have to clean up the L2Meta

             * structs before starting over. */</comment>

            <expr_stmt pos:start="125:13" pos:end="125:31"><expr pos:start="125:13" pos:end="125:30"><call pos:start="125:13" pos:end="125:30"><name pos:start="125:13" pos:end="125:18">assert</name><argument_list pos:start="125:19" pos:end="125:30">(<argument pos:start="125:20" pos:end="125:29"><expr pos:start="125:20" pos:end="125:29"><operator pos:start="125:20" pos:end="125:20">*</operator><name pos:start="125:21" pos:end="125:21">m</name> <operator pos:start="125:23" pos:end="125:24">==</operator> <name pos:start="125:26" pos:end="125:29">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="127:13" pos:end="127:23">goto <name pos:start="127:18" pos:end="127:22">again</name>;</goto>

        </block_content>}</block></if> <if type="elseif" pos:start="129:11" pos:end="133:9">else if <condition pos:start="129:19" pos:end="129:27">(<expr pos:start="129:20" pos:end="129:26"><name pos:start="129:20" pos:end="129:22">ret</name> <operator pos:start="129:24" pos:end="129:24">&lt;</operator> <literal type="number" pos:start="129:26" pos:end="129:26">0</literal></expr>)</condition> <block pos:start="129:29" pos:end="133:9">{<block_content pos:start="131:13" pos:end="131:23">

            <return pos:start="131:13" pos:end="131:23">return <expr pos:start="131:20" pos:end="131:22"><name pos:start="131:20" pos:end="131:22">ret</name></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="133:11" pos:end="137:9">else if <condition pos:start="133:19" pos:end="133:34">(<expr pos:start="133:20" pos:end="133:33"><name pos:start="133:20" pos:end="133:28">cur_bytes</name> <operator pos:start="133:30" pos:end="133:31">==</operator> <literal type="number" pos:start="133:33" pos:end="133:33">0</literal></expr>)</condition> <block pos:start="133:36" pos:end="137:9">{<block_content pos:start="135:13" pos:end="135:18">

            <break pos:start="135:13" pos:end="135:18">break;</break>

        </block_content>}</block></if> <else pos:start="137:11" pos:end="145:9">else <block pos:start="137:16" pos:end="145:9">{<block_content>

            <comment type="block" pos:start="139:13" pos:end="143:59">/* handle_dependencies() may have decreased cur_bytes (shortened

             * the allocations below) so that the next dependency is processed

             * correctly during the next loop iteration. */</comment>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="149:9" pos:end="153:11">/*

         * 2. Count contiguous COPIED clusters.

         */</comment>

        <expr_stmt pos:start="155:9" pos:end="155:71"><expr pos:start="155:9" pos:end="155:70"><name pos:start="155:9" pos:end="155:11">ret</name> <operator pos:start="155:13" pos:end="155:13">=</operator> <call pos:start="155:15" pos:end="155:70"><name pos:start="155:15" pos:end="155:27">handle_copied</name><argument_list pos:start="155:28" pos:end="155:70">(<argument pos:start="155:29" pos:end="155:30"><expr pos:start="155:29" pos:end="155:30"><name pos:start="155:29" pos:end="155:30">bs</name></expr></argument>, <argument pos:start="155:33" pos:end="155:37"><expr pos:start="155:33" pos:end="155:37"><name pos:start="155:33" pos:end="155:37">start</name></expr></argument>, <argument pos:start="155:40" pos:end="155:54"><expr pos:start="155:40" pos:end="155:54"><operator pos:start="155:40" pos:end="155:40">&amp;</operator><name pos:start="155:41" pos:end="155:54">cluster_offset</name></expr></argument>, <argument pos:start="155:57" pos:end="155:66"><expr pos:start="155:57" pos:end="155:66"><operator pos:start="155:57" pos:end="155:57">&amp;</operator><name pos:start="155:58" pos:end="155:66">cur_bytes</name></expr></argument>, <argument pos:start="155:69" pos:end="155:69"><expr pos:start="155:69" pos:end="155:69"><name pos:start="155:69" pos:end="155:69">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="157:9" pos:end="169:9"><if pos:start="157:9" pos:end="161:9">if <condition pos:start="157:12" pos:end="157:20">(<expr pos:start="157:13" pos:end="157:19"><name pos:start="157:13" pos:end="157:15">ret</name> <operator pos:start="157:17" pos:end="157:17">&lt;</operator> <literal type="number" pos:start="157:19" pos:end="157:19">0</literal></expr>)</condition> <block pos:start="157:22" pos:end="161:9">{<block_content pos:start="159:13" pos:end="159:23">

            <return pos:start="159:13" pos:end="159:23">return <expr pos:start="159:20" pos:end="159:22"><name pos:start="159:20" pos:end="159:22">ret</name></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="161:11" pos:end="165:9">else if <condition pos:start="161:19" pos:end="161:23">(<expr pos:start="161:20" pos:end="161:22"><name pos:start="161:20" pos:end="161:22">ret</name></expr>)</condition> <block pos:start="161:25" pos:end="165:9">{<block_content pos:start="163:13" pos:end="163:21">

            <continue pos:start="163:13" pos:end="163:21">continue;</continue>

        </block_content>}</block></if> <if type="elseif" pos:start="165:11" pos:end="169:9">else if <condition pos:start="165:19" pos:end="165:34">(<expr pos:start="165:20" pos:end="165:33"><name pos:start="165:20" pos:end="165:28">cur_bytes</name> <operator pos:start="165:30" pos:end="165:31">==</operator> <literal type="number" pos:start="165:33" pos:end="165:33">0</literal></expr>)</condition> <block pos:start="165:36" pos:end="169:9">{<block_content pos:start="167:13" pos:end="167:18">

            <break pos:start="167:13" pos:end="167:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="173:9" pos:end="179:11">/*

         * 3. If the request still hasn't completed, allocate new clusters,

         *    considering any cluster_offset of steps 1c or 2.

         */</comment>

        <expr_stmt pos:start="181:9" pos:end="181:70"><expr pos:start="181:9" pos:end="181:69"><name pos:start="181:9" pos:end="181:11">ret</name> <operator pos:start="181:13" pos:end="181:13">=</operator> <call pos:start="181:15" pos:end="181:69"><name pos:start="181:15" pos:end="181:26">handle_alloc</name><argument_list pos:start="181:27" pos:end="181:69">(<argument pos:start="181:28" pos:end="181:29"><expr pos:start="181:28" pos:end="181:29"><name pos:start="181:28" pos:end="181:29">bs</name></expr></argument>, <argument pos:start="181:32" pos:end="181:36"><expr pos:start="181:32" pos:end="181:36"><name pos:start="181:32" pos:end="181:36">start</name></expr></argument>, <argument pos:start="181:39" pos:end="181:53"><expr pos:start="181:39" pos:end="181:53"><operator pos:start="181:39" pos:end="181:39">&amp;</operator><name pos:start="181:40" pos:end="181:53">cluster_offset</name></expr></argument>, <argument pos:start="181:56" pos:end="181:65"><expr pos:start="181:56" pos:end="181:65"><operator pos:start="181:56" pos:end="181:56">&amp;</operator><name pos:start="181:57" pos:end="181:65">cur_bytes</name></expr></argument>, <argument pos:start="181:68" pos:end="181:68"><expr pos:start="181:68" pos:end="181:68"><name pos:start="181:68" pos:end="181:68">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="183:9" pos:end="197:9"><if pos:start="183:9" pos:end="187:9">if <condition pos:start="183:12" pos:end="183:20">(<expr pos:start="183:13" pos:end="183:19"><name pos:start="183:13" pos:end="183:15">ret</name> <operator pos:start="183:17" pos:end="183:17">&lt;</operator> <literal type="number" pos:start="183:19" pos:end="183:19">0</literal></expr>)</condition> <block pos:start="183:22" pos:end="187:9">{<block_content pos:start="185:13" pos:end="185:23">

            <return pos:start="185:13" pos:end="185:23">return <expr pos:start="185:20" pos:end="185:22"><name pos:start="185:20" pos:end="185:22">ret</name></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="187:11" pos:end="191:9">else if <condition pos:start="187:19" pos:end="187:23">(<expr pos:start="187:20" pos:end="187:22"><name pos:start="187:20" pos:end="187:22">ret</name></expr>)</condition> <block pos:start="187:25" pos:end="191:9">{<block_content pos:start="189:13" pos:end="189:21">

            <continue pos:start="189:13" pos:end="189:21">continue;</continue>

        </block_content>}</block></if> <else pos:start="191:11" pos:end="197:9">else <block pos:start="191:16" pos:end="197:9">{<block_content pos:start="193:13" pos:end="195:18">

            <expr_stmt pos:start="193:13" pos:end="193:35"><expr pos:start="193:13" pos:end="193:34"><call pos:start="193:13" pos:end="193:34"><name pos:start="193:13" pos:end="193:18">assert</name><argument_list pos:start="193:19" pos:end="193:34">(<argument pos:start="193:20" pos:end="193:33"><expr pos:start="193:20" pos:end="193:33"><name pos:start="193:20" pos:end="193:28">cur_bytes</name> <operator pos:start="193:30" pos:end="193:31">==</operator> <literal type="number" pos:start="193:33" pos:end="193:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="195:13" pos:end="195:18">break;</break>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="203:5" pos:end="203:42"><expr pos:start="203:5" pos:end="203:41"><operator pos:start="203:5" pos:end="203:5">*</operator><name pos:start="203:6" pos:end="203:8">num</name> <operator pos:start="203:10" pos:end="203:11">-=</operator> <name pos:start="203:13" pos:end="203:21">remaining</name> <operator pos:start="203:23" pos:end="203:24">&gt;&gt;</operator> <name pos:start="203:26" pos:end="203:41">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:21"><expr pos:start="205:5" pos:end="205:20"><call pos:start="205:5" pos:end="205:20"><name pos:start="205:5" pos:end="205:10">assert</name><argument_list pos:start="205:11" pos:end="205:20">(<argument pos:start="205:12" pos:end="205:19"><expr pos:start="205:12" pos:end="205:19"><operator pos:start="205:12" pos:end="205:12">*</operator><name pos:start="205:13" pos:end="205:15">num</name> <operator pos:start="205:17" pos:end="205:17">&gt;</operator> <literal type="number" pos:start="205:19" pos:end="205:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:30"><expr pos:start="207:5" pos:end="207:29"><call pos:start="207:5" pos:end="207:29"><name pos:start="207:5" pos:end="207:10">assert</name><argument_list pos:start="207:11" pos:end="207:29">(<argument pos:start="207:12" pos:end="207:28"><expr pos:start="207:12" pos:end="207:28"><operator pos:start="207:12" pos:end="207:12">*</operator><name pos:start="207:13" pos:end="207:23">host_offset</name> <operator pos:start="207:25" pos:end="207:26">!=</operator> <literal type="number" pos:start="207:28" pos:end="207:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="211:5" pos:end="211:13">return <expr pos:start="211:12" pos:end="211:12"><literal type="number" pos:start="211:12" pos:end="211:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
