<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21332.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:38"><name pos:start="1:1" pos:end="1:13">gdb_handlesig</name> <argument_list pos:start="1:15" pos:end="1:38">(<argument pos:start="1:16" pos:end="1:28">CPUState *env</argument>, <argument pos:start="1:31" pos:end="1:37">int sig</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:3" pos:end="91:13">

  <decl_stmt pos:start="5:3" pos:end="5:14"><decl pos:start="5:3" pos:end="5:13"><type pos:start="5:3" pos:end="5:12"><name pos:start="5:3" pos:end="5:10">GDBState</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:13">s</name></decl>;</decl_stmt>

  <decl_stmt pos:start="7:3" pos:end="7:16"><decl pos:start="7:3" pos:end="7:15"><type pos:start="7:3" pos:end="7:6"><name pos:start="7:3" pos:end="7:6">char</name></type> <name pos:start="7:8" pos:end="7:15"><name pos:start="7:8" pos:end="7:10">buf</name><index pos:start="7:11" pos:end="7:15">[<expr pos:start="7:12" pos:end="7:14"><literal type="number" pos:start="7:12" pos:end="7:14">256</literal></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt pos:start="9:3" pos:end="9:8"><decl pos:start="9:3" pos:end="9:7"><type pos:start="9:3" pos:end="9:5"><name pos:start="9:3" pos:end="9:5">int</name></type> <name pos:start="9:7" pos:end="9:7">n</name></decl>;</decl_stmt>



  <expr_stmt pos:start="13:3" pos:end="13:22"><expr pos:start="13:3" pos:end="13:21"><name pos:start="13:3" pos:end="13:3">s</name> <operator pos:start="13:5" pos:end="13:5">=</operator> <name pos:start="13:7" pos:end="13:21">gdbserver_state</name></expr>;</expr_stmt>

  <if_stmt pos:start="15:3" pos:end="17:15"><if pos:start="15:3" pos:end="17:15">if <condition pos:start="15:6" pos:end="15:36">(<expr pos:start="15:7" pos:end="15:35"><name pos:start="15:7" pos:end="15:18">gdbserver_fd</name> <operator pos:start="15:20" pos:end="15:20">&lt;</operator> <literal type="number" pos:start="15:22" pos:end="15:22">0</literal> <operator pos:start="15:24" pos:end="15:25">||</operator> <name pos:start="15:27" pos:end="15:31"><name pos:start="15:27" pos:end="15:27">s</name><operator pos:start="15:28" pos:end="15:29">-&gt;</operator><name pos:start="15:30" pos:end="15:31">fd</name></name> <operator pos:start="15:33" pos:end="15:33">&lt;</operator> <literal type="number" pos:start="15:35" pos:end="15:35">0</literal></expr>)</condition><block type="pseudo" pos:start="17:5" pos:end="17:15"><block_content pos:start="17:5" pos:end="17:15">

    <return pos:start="17:5" pos:end="17:15">return <expr pos:start="17:12" pos:end="17:14"><name pos:start="17:12" pos:end="17:14">sig</name></expr>;</return></block_content></block></if></if_stmt>



  <comment type="block" pos:start="21:3" pos:end="21:45">/* disable single step if it was enabled */</comment>

  <expr_stmt pos:start="23:3" pos:end="23:26"><expr pos:start="23:3" pos:end="23:25"><call pos:start="23:3" pos:end="23:25"><name pos:start="23:3" pos:end="23:17">cpu_single_step</name><argument_list pos:start="23:18" pos:end="23:25">(<argument pos:start="23:19" pos:end="23:21"><expr pos:start="23:19" pos:end="23:21"><name pos:start="23:19" pos:end="23:21">env</name></expr></argument>, <argument pos:start="23:24" pos:end="23:24"><expr pos:start="23:24" pos:end="23:24"><literal type="number" pos:start="23:24" pos:end="23:24">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt pos:start="25:3" pos:end="25:16"><expr pos:start="25:3" pos:end="25:15"><call pos:start="25:3" pos:end="25:15"><name pos:start="25:3" pos:end="25:10">tb_flush</name><argument_list pos:start="25:11" pos:end="25:15">(<argument pos:start="25:12" pos:end="25:14"><expr pos:start="25:12" pos:end="25:14"><name pos:start="25:12" pos:end="25:14">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



  <if_stmt pos:start="29:3" pos:end="37:5"><if pos:start="29:3" pos:end="37:5">if <condition pos:start="29:6" pos:end="29:15">(<expr pos:start="29:7" pos:end="29:14"><name pos:start="29:7" pos:end="29:9">sig</name> <operator pos:start="29:11" pos:end="29:12">!=</operator> <literal type="number" pos:start="29:14" pos:end="29:14">0</literal></expr>)</condition>

    <block pos:start="31:5" pos:end="37:5">{<block_content pos:start="33:7" pos:end="35:25">

      <expr_stmt pos:start="33:7" pos:end="33:70"><expr pos:start="33:7" pos:end="33:69"><call pos:start="33:7" pos:end="33:69"><name pos:start="33:7" pos:end="33:14">snprintf</name><argument_list pos:start="33:15" pos:end="33:69">(<argument pos:start="33:16" pos:end="33:18"><expr pos:start="33:16" pos:end="33:18"><name pos:start="33:16" pos:end="33:18">buf</name></expr></argument>, <argument pos:start="33:21" pos:end="33:31"><expr pos:start="33:21" pos:end="33:31"><sizeof pos:start="33:21" pos:end="33:31">sizeof<argument_list pos:start="33:27" pos:end="33:31">(<argument pos:start="33:28" pos:end="33:30"><expr pos:start="33:28" pos:end="33:30"><name pos:start="33:28" pos:end="33:30">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="33:34" pos:end="33:40"><expr pos:start="33:34" pos:end="33:40"><literal type="string" pos:start="33:34" pos:end="33:40">"S%02x"</literal></expr></argument>, <argument pos:start="33:43" pos:end="33:68"><expr pos:start="33:43" pos:end="33:68"><call pos:start="33:43" pos:end="33:68"><name pos:start="33:43" pos:end="33:62">target_signal_to_gdb</name> <argument_list pos:start="33:64" pos:end="33:68">(<argument pos:start="33:65" pos:end="33:67"><expr pos:start="33:65" pos:end="33:67"><name pos:start="33:65" pos:end="33:67">sig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="35:7" pos:end="35:25"><expr pos:start="35:7" pos:end="35:24"><call pos:start="35:7" pos:end="35:24"><name pos:start="35:7" pos:end="35:16">put_packet</name><argument_list pos:start="35:17" pos:end="35:24">(<argument pos:start="35:18" pos:end="35:18"><expr pos:start="35:18" pos:end="35:18"><name pos:start="35:18" pos:end="35:18">s</name></expr></argument>, <argument pos:start="35:21" pos:end="35:23"><expr pos:start="35:21" pos:end="35:23"><name pos:start="35:21" pos:end="35:23">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

  <comment type="block" pos:start="39:3" pos:end="41:20">/* put_packet() might have detected that the peer terminated the 

     connection.  */</comment>

  <if_stmt pos:start="43:3" pos:end="45:17"><if pos:start="43:3" pos:end="45:17">if <condition pos:start="43:6" pos:end="43:16">(<expr pos:start="43:7" pos:end="43:15"><name pos:start="43:7" pos:end="43:11"><name pos:start="43:7" pos:end="43:7">s</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:11">fd</name></name> <operator pos:start="43:13" pos:end="43:13">&lt;</operator> <literal type="number" pos:start="43:15" pos:end="43:15">0</literal></expr>)</condition><block type="pseudo" pos:start="45:7" pos:end="45:17"><block_content pos:start="45:7" pos:end="45:17">

      <return pos:start="45:7" pos:end="45:17">return <expr pos:start="45:14" pos:end="45:16"><name pos:start="45:14" pos:end="45:16">sig</name></expr>;</return></block_content></block></if></if_stmt>



  <expr_stmt pos:start="49:3" pos:end="49:10"><expr pos:start="49:3" pos:end="49:9"><name pos:start="49:3" pos:end="49:5">sig</name> <operator pos:start="49:7" pos:end="49:7">=</operator> <literal type="number" pos:start="49:9" pos:end="49:9">0</literal></expr>;</expr_stmt>

  <expr_stmt pos:start="51:3" pos:end="51:21"><expr pos:start="51:3" pos:end="51:20"><name pos:start="51:3" pos:end="51:10"><name pos:start="51:3" pos:end="51:3">s</name><operator pos:start="51:4" pos:end="51:5">-&gt;</operator><name pos:start="51:6" pos:end="51:10">state</name></name> <operator pos:start="51:12" pos:end="51:12">=</operator> <name pos:start="51:14" pos:end="51:20">RS_IDLE</name></expr>;</expr_stmt>

  <expr_stmt pos:start="53:3" pos:end="53:23"><expr pos:start="53:3" pos:end="53:22"><name pos:start="53:3" pos:end="53:18"><name pos:start="53:3" pos:end="53:3">s</name><operator pos:start="53:4" pos:end="53:5">-&gt;</operator><name pos:start="53:6" pos:end="53:18">running_state</name></name> <operator pos:start="53:20" pos:end="53:20">=</operator> <literal type="number" pos:start="53:22" pos:end="53:22">0</literal></expr>;</expr_stmt>

  <while pos:start="55:3" pos:end="85:3">while <condition pos:start="55:9" pos:end="55:31">(<expr pos:start="55:10" pos:end="55:30"><name pos:start="55:10" pos:end="55:25"><name pos:start="55:10" pos:end="55:10">s</name><operator pos:start="55:11" pos:end="55:12">-&gt;</operator><name pos:start="55:13" pos:end="55:25">running_state</name></name> <operator pos:start="55:27" pos:end="55:28">==</operator> <literal type="number" pos:start="55:30" pos:end="55:30">0</literal></expr>)</condition> <block pos:start="55:33" pos:end="85:3">{<block_content pos:start="57:7" pos:end="83:9">

      <expr_stmt pos:start="57:7" pos:end="57:33"><expr pos:start="57:7" pos:end="57:32"><name pos:start="57:7" pos:end="57:7">n</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <call pos:start="57:11" pos:end="57:32"><name pos:start="57:11" pos:end="57:14">read</name> <argument_list pos:start="57:16" pos:end="57:32">(<argument pos:start="57:17" pos:end="57:21"><expr pos:start="57:17" pos:end="57:21"><name pos:start="57:17" pos:end="57:21"><name pos:start="57:17" pos:end="57:17">s</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:21">fd</name></name></expr></argument>, <argument pos:start="57:24" pos:end="57:26"><expr pos:start="57:24" pos:end="57:26"><name pos:start="57:24" pos:end="57:26">buf</name></expr></argument>, <argument pos:start="57:29" pos:end="57:31"><expr pos:start="57:29" pos:end="57:31"><literal type="number" pos:start="57:29" pos:end="57:31">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt pos:start="59:7" pos:end="83:9"><if pos:start="59:7" pos:end="71:9">if <condition pos:start="59:10" pos:end="59:16">(<expr pos:start="59:11" pos:end="59:15"><name pos:start="59:11" pos:end="59:11">n</name> <operator pos:start="59:13" pos:end="59:13">&gt;</operator> <literal type="number" pos:start="59:15" pos:end="59:15">0</literal></expr>)</condition>

        <block pos:start="61:9" pos:end="71:9">{<block_content pos:start="63:11" pos:end="69:38">

          <decl_stmt pos:start="63:11" pos:end="63:16"><decl pos:start="63:11" pos:end="63:15"><type pos:start="63:11" pos:end="63:13"><name pos:start="63:11" pos:end="63:13">int</name></type> <name pos:start="63:15" pos:end="63:15">i</name></decl>;</decl_stmt>



          <for pos:start="67:11" pos:end="69:38">for <control pos:start="67:15" pos:end="67:33">(<init pos:start="67:16" pos:end="67:21"><expr pos:start="67:16" pos:end="67:20"><name pos:start="67:16" pos:end="67:16">i</name> <operator pos:start="67:18" pos:end="67:18">=</operator> <literal type="number" pos:start="67:20" pos:end="67:20">0</literal></expr>;</init> <condition pos:start="67:23" pos:end="67:28"><expr pos:start="67:23" pos:end="67:27"><name pos:start="67:23" pos:end="67:23">i</name> <operator pos:start="67:25" pos:end="67:25">&lt;</operator> <name pos:start="67:27" pos:end="67:27">n</name></expr>;</condition> <incr pos:start="67:30" pos:end="67:32"><expr pos:start="67:30" pos:end="67:32"><name pos:start="67:30" pos:end="67:30">i</name><operator pos:start="67:31" pos:end="67:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="69:13" pos:end="69:38"><block_content pos:start="69:13" pos:end="69:38">

            <expr_stmt pos:start="69:13" pos:end="69:38"><expr pos:start="69:13" pos:end="69:37"><call pos:start="69:13" pos:end="69:37"><name pos:start="69:13" pos:end="69:25">gdb_read_byte</name> <argument_list pos:start="69:27" pos:end="69:37">(<argument pos:start="69:28" pos:end="69:28"><expr pos:start="69:28" pos:end="69:28"><name pos:start="69:28" pos:end="69:28">s</name></expr></argument>, <argument pos:start="69:31" pos:end="69:36"><expr pos:start="69:31" pos:end="69:36"><name pos:start="69:31" pos:end="69:36"><name pos:start="69:31" pos:end="69:33">buf</name><index pos:start="69:34" pos:end="69:36">[<expr pos:start="69:35" pos:end="69:35"><name pos:start="69:35" pos:end="69:35">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if>

      <if type="elseif" pos:start="73:7" pos:end="83:9">else if <condition pos:start="73:15" pos:end="73:41">(<expr pos:start="73:16" pos:end="73:40"><name pos:start="73:16" pos:end="73:16">n</name> <operator pos:start="73:18" pos:end="73:19">==</operator> <literal type="number" pos:start="73:21" pos:end="73:21">0</literal> <operator pos:start="73:23" pos:end="73:24">||</operator> <name pos:start="73:26" pos:end="73:30">errno</name> <operator pos:start="73:32" pos:end="73:33">!=</operator> <name pos:start="73:35" pos:end="73:40">EAGAIN</name></expr>)</condition>

        <block pos:start="75:9" pos:end="83:9">{<block_content pos:start="81:11" pos:end="81:21">

          <comment type="block" pos:start="77:11" pos:end="79:46">/* XXX: Connection closed.  Should probably wait for annother

             connection before continuing.  */</comment>

          <return pos:start="81:11" pos:end="81:21">return <expr pos:start="81:18" pos:end="81:20"><name pos:start="81:18" pos:end="81:20">sig</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

  </block_content>}</block></while>

  <expr_stmt pos:start="87:3" pos:end="87:18"><expr pos:start="87:3" pos:end="87:17"><name pos:start="87:3" pos:end="87:5">sig</name> <operator pos:start="87:7" pos:end="87:7">=</operator> <name pos:start="87:9" pos:end="87:17"><name pos:start="87:9" pos:end="87:9">s</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:17">signal</name></name></expr>;</expr_stmt>

  <expr_stmt pos:start="89:3" pos:end="89:16"><expr pos:start="89:3" pos:end="89:15"><name pos:start="89:3" pos:end="89:11"><name pos:start="89:3" pos:end="89:3">s</name><operator pos:start="89:4" pos:end="89:5">-&gt;</operator><name pos:start="89:6" pos:end="89:11">signal</name></name> <operator pos:start="89:13" pos:end="89:13">=</operator> <literal type="number" pos:start="89:15" pos:end="89:15">0</literal></expr>;</expr_stmt>

  <return pos:start="91:3" pos:end="91:13">return <expr pos:start="91:10" pos:end="91:12"><name pos:start="91:10" pos:end="91:12">sig</name></expr>;</return>

</block_content>}</block>
</unit>
