<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16052.c" pos:tabs="8"><function pos:start="1:1" pos:end="90:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">test_flush</name><parameter_list pos:start="1:23" pos:end="1:28">(<parameter pos:start="1:24" pos:end="1:27"><decl pos:start="1:24" pos:end="1:27"><type pos:start="1:24" pos:end="1:27"><name pos:start="1:24" pos:end="1:27">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="90:1">{<block_content pos:start="5:5" pos:end="87:20">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">QPCIDevice</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">QPCIBar</name></type> <name pos:start="7:13" pos:end="7:21">bmdma_bar</name></decl>, <decl pos:start="7:24" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:11"/><name pos:start="7:24" pos:end="7:30">ide_bar</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:16">data</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="17:18"><expr pos:start="13:5" pos:end="17:17"><call pos:start="13:5" pos:end="17:17"><name pos:start="13:5" pos:end="13:18">ide_test_start</name><argument_list pos:start="13:19" pos:end="17:17">(

        <argument pos:start="15:9" pos:end="15:68"><expr pos:start="15:9" pos:end="15:68"><literal type="string" pos:start="15:9" pos:end="15:68">"-drive file=blkdebug::%s,if=ide,cache=writeback,format=raw"</literal></expr></argument>,

        <argument pos:start="17:9" pos:end="17:16"><expr pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:16">tmp_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:47"><expr pos:start="21:5" pos:end="21:46"><name pos:start="21:5" pos:end="21:7">dev</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:46"><name pos:start="21:11" pos:end="21:24">get_pci_device</name><argument_list pos:start="21:25" pos:end="21:46">(<argument pos:start="21:26" pos:end="21:35"><expr pos:start="21:26" pos:end="21:35"><operator pos:start="21:26" pos:end="21:26">&amp;</operator><name pos:start="21:27" pos:end="21:35">bmdma_bar</name></expr></argument>, <argument pos:start="21:38" pos:end="21:45"><expr pos:start="21:38" pos:end="21:45"><operator pos:start="21:38" pos:end="21:38">&amp;</operator><name pos:start="21:39" pos:end="21:45">ide_bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:51"><expr pos:start="25:5" pos:end="25:50"><call pos:start="25:5" pos:end="25:50"><name pos:start="25:5" pos:end="25:26">qtest_irq_intercept_in</name><argument_list pos:start="25:27" pos:end="25:50">(<argument pos:start="25:28" pos:end="25:39"><expr pos:start="25:28" pos:end="25:39"><name pos:start="25:28" pos:end="25:39">global_qtest</name></expr></argument>, <argument pos:start="25:42" pos:end="25:49"><expr pos:start="25:42" pos:end="25:49"><literal type="string" pos:start="25:42" pos:end="25:49">"ioapic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:70">/* Dirty media so that CMD_FLUSH_CACHE will actually go to disk */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:18"><expr pos:start="31:5" pos:end="31:17"><call pos:start="31:5" pos:end="31:17"><name pos:start="31:5" pos:end="31:14">make_dirty</name><argument_list pos:start="31:15" pos:end="31:17">(<argument pos:start="31:16" pos:end="31:16"><expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:77">/* Delay the completion of the flush request until we explicitly do it */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:60"><expr pos:start="37:5" pos:end="37:59"><call pos:start="37:5" pos:end="37:59"><name pos:start="37:5" pos:end="37:10">g_free</name><argument_list pos:start="37:11" pos:end="37:59">(<argument pos:start="37:12" pos:end="37:58"><expr pos:start="37:12" pos:end="37:58"><call pos:start="37:12" pos:end="37:58"><name pos:start="37:12" pos:end="37:14">hmp</name><argument_list pos:start="37:15" pos:end="37:58">(<argument pos:start="37:16" pos:end="37:57"><expr pos:start="37:16" pos:end="37:57"><literal type="string" pos:start="37:16" pos:end="37:57">"qemu-io ide0-hd0 \"break flush_to_os A\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:40">/* FLUSH CACHE command on device 0*/</comment>

    <expr_stmt pos:start="43:5" pos:end="43:48"><expr pos:start="43:5" pos:end="43:47"><call pos:start="43:5" pos:end="43:47"><name pos:start="43:5" pos:end="43:18">qpci_io_writeb</name><argument_list pos:start="43:19" pos:end="43:47">(<argument pos:start="43:20" pos:end="43:22"><expr pos:start="43:20" pos:end="43:22"><name pos:start="43:20" pos:end="43:22">dev</name></expr></argument>, <argument pos:start="43:25" pos:end="43:31"><expr pos:start="43:25" pos:end="43:31"><name pos:start="43:25" pos:end="43:31">ide_bar</name></expr></argument>, <argument pos:start="43:34" pos:end="43:43"><expr pos:start="43:34" pos:end="43:43"><name pos:start="43:34" pos:end="43:43">reg_device</name></expr></argument>, <argument pos:start="43:46" pos:end="43:46"><expr pos:start="43:46" pos:end="43:46"><literal type="number" pos:start="43:46" pos:end="43:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:63"><expr pos:start="45:5" pos:end="45:62"><call pos:start="45:5" pos:end="45:62"><name pos:start="45:5" pos:end="45:18">qpci_io_writeb</name><argument_list pos:start="45:19" pos:end="45:62">(<argument pos:start="45:20" pos:end="45:22"><expr pos:start="45:20" pos:end="45:22"><name pos:start="45:20" pos:end="45:22">dev</name></expr></argument>, <argument pos:start="45:25" pos:end="45:31"><expr pos:start="45:25" pos:end="45:31"><name pos:start="45:25" pos:end="45:31">ide_bar</name></expr></argument>, <argument pos:start="45:34" pos:end="45:44"><expr pos:start="45:34" pos:end="45:44"><name pos:start="45:34" pos:end="45:44">reg_command</name></expr></argument>, <argument pos:start="45:47" pos:end="45:61"><expr pos:start="45:47" pos:end="45:61"><name pos:start="45:47" pos:end="45:61">CMD_FLUSH_CACHE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:48">/* Check status while request is in flight*/</comment>

    <expr_stmt pos:start="51:5" pos:end="51:51"><expr pos:start="51:5" pos:end="51:50"><name pos:start="51:5" pos:end="51:8">data</name> <operator pos:start="51:10" pos:end="51:10">=</operator> <call pos:start="51:12" pos:end="51:50"><name pos:start="51:12" pos:end="51:24">qpci_io_readb</name><argument_list pos:start="51:25" pos:end="51:50">(<argument pos:start="51:26" pos:end="51:28"><expr pos:start="51:26" pos:end="51:28"><name pos:start="51:26" pos:end="51:28">dev</name></expr></argument>, <argument pos:start="51:31" pos:end="51:37"><expr pos:start="51:31" pos:end="51:37"><name pos:start="51:31" pos:end="51:37">ide_bar</name></expr></argument>, <argument pos:start="51:40" pos:end="51:49"><expr pos:start="51:40" pos:end="51:49"><name pos:start="51:40" pos:end="51:49">reg_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:37"><expr pos:start="53:5" pos:end="53:36"><call pos:start="53:5" pos:end="53:36"><name pos:start="53:5" pos:end="53:18">assert_bit_set</name><argument_list pos:start="53:19" pos:end="53:36">(<argument pos:start="53:20" pos:end="53:23"><expr pos:start="53:20" pos:end="53:23"><name pos:start="53:20" pos:end="53:23">data</name></expr></argument>, <argument pos:start="53:26" pos:end="53:35"><expr pos:start="53:26" pos:end="53:35"><name pos:start="53:26" pos:end="53:28">BSY</name> <operator pos:start="53:30" pos:end="53:30">|</operator> <name pos:start="53:32" pos:end="53:35">DRDY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:43"><expr pos:start="55:5" pos:end="55:42"><call pos:start="55:5" pos:end="55:42"><name pos:start="55:5" pos:end="55:20">assert_bit_clear</name><argument_list pos:start="55:21" pos:end="55:42">(<argument pos:start="55:22" pos:end="55:25"><expr pos:start="55:22" pos:end="55:25"><name pos:start="55:22" pos:end="55:25">data</name></expr></argument>, <argument pos:start="55:28" pos:end="55:41"><expr pos:start="55:28" pos:end="55:41"><name pos:start="55:28" pos:end="55:29">DF</name> <operator pos:start="55:31" pos:end="55:31">|</operator> <name pos:start="55:33" pos:end="55:35">ERR</name> <operator pos:start="55:37" pos:end="55:37">|</operator> <name pos:start="55:39" pos:end="55:41">DRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="59:5" pos:end="59:30">/* Complete the command */</comment>

    <expr_stmt pos:start="61:5" pos:end="61:49"><expr pos:start="61:5" pos:end="61:48"><call pos:start="61:5" pos:end="61:48"><name pos:start="61:5" pos:end="61:10">g_free</name><argument_list pos:start="61:11" pos:end="61:48">(<argument pos:start="61:12" pos:end="61:47"><expr pos:start="61:12" pos:end="61:47"><call pos:start="61:12" pos:end="61:47"><name pos:start="61:12" pos:end="61:14">hmp</name><argument_list pos:start="61:15" pos:end="61:47">(<argument pos:start="61:16" pos:end="61:46"><expr pos:start="61:16" pos:end="61:46"><literal type="string" pos:start="61:16" pos:end="61:46">"qemu-io ide0-hd0 \"resume A\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:25">/* Check registers */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:51"><expr pos:start="67:5" pos:end="67:50"><name pos:start="67:5" pos:end="67:8">data</name> <operator pos:start="67:10" pos:end="67:10">=</operator> <call pos:start="67:12" pos:end="67:50"><name pos:start="67:12" pos:end="67:24">qpci_io_readb</name><argument_list pos:start="67:25" pos:end="67:50">(<argument pos:start="67:26" pos:end="67:28"><expr pos:start="67:26" pos:end="67:28"><name pos:start="67:26" pos:end="67:28">dev</name></expr></argument>, <argument pos:start="67:31" pos:end="67:37"><expr pos:start="67:31" pos:end="67:37"><name pos:start="67:31" pos:end="67:37">ide_bar</name></expr></argument>, <argument pos:start="67:40" pos:end="67:49"><expr pos:start="67:40" pos:end="67:49"><name pos:start="67:40" pos:end="67:49">reg_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:39"><expr pos:start="69:5" pos:end="69:38"><call pos:start="69:5" pos:end="69:38"><name pos:start="69:5" pos:end="69:19">g_assert_cmpint</name><argument_list pos:start="69:20" pos:end="69:38">(<argument pos:start="69:21" pos:end="69:30"><expr pos:start="69:21" pos:end="69:30"><name pos:start="69:21" pos:end="69:24">data</name> <operator pos:start="69:26" pos:end="69:26">&amp;</operator> <name pos:start="69:28" pos:end="69:30">DEV</name></expr></argument>, <argument pos:start="69:33" pos:end="69:34"><expr pos:start="69:33" pos:end="69:34"><operator pos:start="69:33" pos:end="69:34">==</operator></expr></argument>, <argument pos:start="69:37" pos:end="69:37"><expr pos:start="69:37" pos:end="69:37"><literal type="number" pos:start="69:37" pos:end="69:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <do pos:start="73:5" pos:end="77:25">do <block pos:start="73:8" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:55">

        <expr_stmt pos:start="75:9" pos:end="75:55"><expr pos:start="75:9" pos:end="75:54"><name pos:start="75:9" pos:end="75:12">data</name> <operator pos:start="75:14" pos:end="75:14">=</operator> <call pos:start="75:16" pos:end="75:54"><name pos:start="75:16" pos:end="75:28">qpci_io_readb</name><argument_list pos:start="75:29" pos:end="75:54">(<argument pos:start="75:30" pos:end="75:32"><expr pos:start="75:30" pos:end="75:32"><name pos:start="75:30" pos:end="75:32">dev</name></expr></argument>, <argument pos:start="75:35" pos:end="75:41"><expr pos:start="75:35" pos:end="75:41"><name pos:start="75:35" pos:end="75:41">ide_bar</name></expr></argument>, <argument pos:start="75:44" pos:end="75:53"><expr pos:start="75:44" pos:end="75:53"><name pos:start="75:44" pos:end="75:53">reg_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="77:13" pos:end="77:24">(<expr pos:start="77:14" pos:end="77:23"><name pos:start="77:14" pos:end="77:17">data</name> <operator pos:start="77:19" pos:end="77:19">&amp;</operator> <name pos:start="77:21" pos:end="77:23">BSY</name></expr>)</condition>;</do>



    <expr_stmt pos:start="81:5" pos:end="81:31"><expr pos:start="81:5" pos:end="81:30"><call pos:start="81:5" pos:end="81:30"><name pos:start="81:5" pos:end="81:18">assert_bit_set</name><argument_list pos:start="81:19" pos:end="81:30">(<argument pos:start="81:20" pos:end="81:23"><expr pos:start="81:20" pos:end="81:23"><name pos:start="81:20" pos:end="81:23">data</name></expr></argument>, <argument pos:start="81:26" pos:end="81:29"><expr pos:start="81:26" pos:end="81:29"><name pos:start="81:26" pos:end="81:29">DRDY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:49"><expr pos:start="83:5" pos:end="83:48"><call pos:start="83:5" pos:end="83:48"><name pos:start="83:5" pos:end="83:20">assert_bit_clear</name><argument_list pos:start="83:21" pos:end="83:48">(<argument pos:start="83:22" pos:end="83:25"><expr pos:start="83:22" pos:end="83:25"><name pos:start="83:22" pos:end="83:25">data</name></expr></argument>, <argument pos:start="83:28" pos:end="83:47"><expr pos:start="83:28" pos:end="83:47"><name pos:start="83:28" pos:end="83:30">BSY</name> <operator pos:start="83:32" pos:end="83:32">|</operator> <name pos:start="83:34" pos:end="83:35">DF</name> <operator pos:start="83:37" pos:end="83:37">|</operator> <name pos:start="83:39" pos:end="83:41">ERR</name> <operator pos:start="83:43" pos:end="83:43">|</operator> <name pos:start="83:45" pos:end="83:47">DRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:20"><expr pos:start="87:5" pos:end="87:19"><call pos:start="87:5" pos:end="87:19"><name pos:start="87:5" pos:end="87:17">ide_test_quit</name><argument_list pos:start="87:18" pos:end="87:19">()</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></function></unit>
