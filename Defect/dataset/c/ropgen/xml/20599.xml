<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20599.c" pos:tabs="8"><function pos:start="1:1" pos:end="216:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">cirrus_init_common</name><parameter_list pos:start="1:31" pos:end="1:77">(<parameter pos:start="1:32" pos:end="1:49"><decl pos:start="1:32" pos:end="1:49"><type pos:start="1:32" pos:end="1:49"><name pos:start="1:32" pos:end="1:45">CirrusVGAState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type> <name pos:start="1:49" pos:end="1:49">s</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:64"><decl pos:start="1:52" pos:end="1:64"><type pos:start="1:52" pos:end="1:64"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:64">device_id</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:76"><decl pos:start="1:67" pos:end="1:76"><type pos:start="1:67" pos:end="1:76"><name pos:start="1:67" pos:end="1:69">int</name></type> <name pos:start="1:71" pos:end="1:76">is_pci</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="216:1">{<block_content pos:start="5:5" pos:end="214:77">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:14"><specifier pos:start="7:5" pos:end="7:10">static</specifier> <name pos:start="7:12" pos:end="7:14">int</name></type> <name pos:start="7:16" pos:end="7:21">inited</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="51:5"><if pos:start="11:5" pos:end="51:5">if <condition pos:start="11:8" pos:end="11:16">(<expr pos:start="11:9" pos:end="11:15"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:15">inited</name></expr>)</condition> <block pos:start="11:18" pos:end="51:5">{<block_content pos:start="13:9" pos:end="49:56">

        <expr_stmt pos:start="13:9" pos:end="13:19"><expr pos:start="13:9" pos:end="13:18"><name pos:start="13:9" pos:end="13:14">inited</name> <operator pos:start="13:16" pos:end="13:16">=</operator> <literal type="number" pos:start="13:18" pos:end="13:18">1</literal></expr>;</expr_stmt>

        <for pos:start="15:9" pos:end="17:51">for<control pos:start="15:12" pos:end="15:31">(<init pos:start="15:13" pos:end="15:18"><expr pos:start="15:13" pos:end="15:17"><name pos:start="15:13" pos:end="15:13">i</name> <operator pos:start="15:15" pos:end="15:15">=</operator> <literal type="number" pos:start="15:17" pos:end="15:17">0</literal></expr>;</init><condition pos:start="15:19" pos:end="15:26"><expr pos:start="15:19" pos:end="15:25"><name pos:start="15:19" pos:end="15:19">i</name> <operator pos:start="15:21" pos:end="15:21">&lt;</operator> <literal type="number" pos:start="15:23" pos:end="15:25">256</literal></expr>;</condition> <incr pos:start="15:28" pos:end="15:30"><expr pos:start="15:28" pos:end="15:30"><name pos:start="15:28" pos:end="15:28">i</name><operator pos:start="15:29" pos:end="15:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="17:13" pos:end="17:51"><block_content pos:start="17:13" pos:end="17:51">

            <expr_stmt pos:start="17:13" pos:end="17:51"><expr pos:start="17:13" pos:end="17:50"><name pos:start="17:13" pos:end="17:27"><name pos:start="17:13" pos:end="17:24">rop_to_index</name><index pos:start="17:25" pos:end="17:27">[<expr pos:start="17:26" pos:end="17:26"><name pos:start="17:26" pos:end="17:26">i</name></expr>]</index></name> <operator pos:start="17:29" pos:end="17:29">=</operator> <name pos:start="17:31" pos:end="17:50">CIRRUS_ROP_NOP_INDEX</name></expr>;</expr_stmt></block_content></block></for> <comment type="block" pos:start="17:53" pos:end="17:65">/* nop rop */</comment>

        <expr_stmt pos:start="19:9" pos:end="19:39"><expr pos:start="19:9" pos:end="19:38"><name pos:start="19:9" pos:end="19:34"><name pos:start="19:9" pos:end="19:20">rop_to_index</name><index pos:start="19:21" pos:end="19:34">[<expr pos:start="19:22" pos:end="19:33"><name pos:start="19:22" pos:end="19:33">CIRRUS_ROP_0</name></expr>]</index></name> <operator pos:start="19:36" pos:end="19:36">=</operator> <literal type="number" pos:start="19:38" pos:end="19:38">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:49"><expr pos:start="21:9" pos:end="21:48"><name pos:start="21:9" pos:end="21:44"><name pos:start="21:9" pos:end="21:20">rop_to_index</name><index pos:start="21:21" pos:end="21:44">[<expr pos:start="21:22" pos:end="21:43"><name pos:start="21:22" pos:end="21:43">CIRRUS_ROP_SRC_AND_DST</name></expr>]</index></name> <operator pos:start="21:46" pos:end="21:46">=</operator> <literal type="number" pos:start="21:48" pos:end="21:48">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:41"><expr pos:start="23:9" pos:end="23:40"><name pos:start="23:9" pos:end="23:36"><name pos:start="23:9" pos:end="23:20">rop_to_index</name><index pos:start="23:21" pos:end="23:36">[<expr pos:start="23:22" pos:end="23:35"><name pos:start="23:22" pos:end="23:35">CIRRUS_ROP_NOP</name></expr>]</index></name> <operator pos:start="23:38" pos:end="23:38">=</operator> <literal type="number" pos:start="23:40" pos:end="23:40">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:52"><expr pos:start="25:9" pos:end="25:51"><name pos:start="25:9" pos:end="25:47"><name pos:start="25:9" pos:end="25:20">rop_to_index</name><index pos:start="25:21" pos:end="25:47">[<expr pos:start="25:22" pos:end="25:46"><name pos:start="25:22" pos:end="25:46">CIRRUS_ROP_SRC_AND_NOTDST</name></expr>]</index></name> <operator pos:start="25:49" pos:end="25:49">=</operator> <literal type="number" pos:start="25:51" pos:end="25:51">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:44"><expr pos:start="27:9" pos:end="27:43"><name pos:start="27:9" pos:end="27:39"><name pos:start="27:9" pos:end="27:20">rop_to_index</name><index pos:start="27:21" pos:end="27:39">[<expr pos:start="27:22" pos:end="27:38"><name pos:start="27:22" pos:end="27:38">CIRRUS_ROP_NOTDST</name></expr>]</index></name> <operator pos:start="27:41" pos:end="27:41">=</operator> <literal type="number" pos:start="27:43" pos:end="27:43">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:41"><expr pos:start="29:9" pos:end="29:40"><name pos:start="29:9" pos:end="29:36"><name pos:start="29:9" pos:end="29:20">rop_to_index</name><index pos:start="29:21" pos:end="29:36">[<expr pos:start="29:22" pos:end="29:35"><name pos:start="29:22" pos:end="29:35">CIRRUS_ROP_SRC</name></expr>]</index></name> <operator pos:start="29:38" pos:end="29:38">=</operator> <literal type="number" pos:start="29:40" pos:end="29:40">5</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:39"><expr pos:start="31:9" pos:end="31:38"><name pos:start="31:9" pos:end="31:34"><name pos:start="31:9" pos:end="31:20">rop_to_index</name><index pos:start="31:21" pos:end="31:34">[<expr pos:start="31:22" pos:end="31:33"><name pos:start="31:22" pos:end="31:33">CIRRUS_ROP_1</name></expr>]</index></name> <operator pos:start="31:36" pos:end="31:36">=</operator> <literal type="number" pos:start="31:38" pos:end="31:38">6</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:52"><expr pos:start="33:9" pos:end="33:51"><name pos:start="33:9" pos:end="33:47"><name pos:start="33:9" pos:end="33:20">rop_to_index</name><index pos:start="33:21" pos:end="33:47">[<expr pos:start="33:22" pos:end="33:46"><name pos:start="33:22" pos:end="33:46">CIRRUS_ROP_NOTSRC_AND_DST</name></expr>]</index></name> <operator pos:start="33:49" pos:end="33:49">=</operator> <literal type="number" pos:start="33:51" pos:end="33:51">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:49"><expr pos:start="35:9" pos:end="35:48"><name pos:start="35:9" pos:end="35:44"><name pos:start="35:9" pos:end="35:20">rop_to_index</name><index pos:start="35:21" pos:end="35:44">[<expr pos:start="35:22" pos:end="35:43"><name pos:start="35:22" pos:end="35:43">CIRRUS_ROP_SRC_XOR_DST</name></expr>]</index></name> <operator pos:start="35:46" pos:end="35:46">=</operator> <literal type="number" pos:start="35:48" pos:end="35:48">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:48"><expr pos:start="37:9" pos:end="37:47"><name pos:start="37:9" pos:end="37:43"><name pos:start="37:9" pos:end="37:20">rop_to_index</name><index pos:start="37:21" pos:end="37:43">[<expr pos:start="37:22" pos:end="37:42"><name pos:start="37:22" pos:end="37:42">CIRRUS_ROP_SRC_OR_DST</name></expr>]</index></name> <operator pos:start="37:45" pos:end="37:45">=</operator> <literal type="number" pos:start="37:47" pos:end="37:47">9</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:55"><expr pos:start="39:9" pos:end="39:54"><name pos:start="39:9" pos:end="39:49"><name pos:start="39:9" pos:end="39:20">rop_to_index</name><index pos:start="39:21" pos:end="39:49">[<expr pos:start="39:22" pos:end="39:48"><name pos:start="39:22" pos:end="39:48">CIRRUS_ROP_NOTSRC_OR_NOTDST</name></expr>]</index></name> <operator pos:start="39:51" pos:end="39:51">=</operator> <literal type="number" pos:start="39:53" pos:end="39:54">10</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:53"><expr pos:start="41:9" pos:end="41:52"><name pos:start="41:9" pos:end="41:47"><name pos:start="41:9" pos:end="41:20">rop_to_index</name><index pos:start="41:21" pos:end="41:47">[<expr pos:start="41:22" pos:end="41:46"><name pos:start="41:22" pos:end="41:46">CIRRUS_ROP_SRC_NOTXOR_DST</name></expr>]</index></name> <operator pos:start="41:49" pos:end="41:49">=</operator> <literal type="number" pos:start="41:51" pos:end="41:52">11</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:52"><expr pos:start="43:9" pos:end="43:51"><name pos:start="43:9" pos:end="43:46"><name pos:start="43:9" pos:end="43:20">rop_to_index</name><index pos:start="43:21" pos:end="43:46">[<expr pos:start="43:22" pos:end="43:45"><name pos:start="43:22" pos:end="43:45">CIRRUS_ROP_SRC_OR_NOTDST</name></expr>]</index></name> <operator pos:start="43:48" pos:end="43:48">=</operator> <literal type="number" pos:start="43:50" pos:end="43:51">12</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:45"><expr pos:start="45:9" pos:end="45:44"><name pos:start="45:9" pos:end="45:39"><name pos:start="45:9" pos:end="45:20">rop_to_index</name><index pos:start="45:21" pos:end="45:39">[<expr pos:start="45:22" pos:end="45:38"><name pos:start="45:22" pos:end="45:38">CIRRUS_ROP_NOTSRC</name></expr>]</index></name> <operator pos:start="45:41" pos:end="45:41">=</operator> <literal type="number" pos:start="45:43" pos:end="45:44">13</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:52"><expr pos:start="47:9" pos:end="47:51"><name pos:start="47:9" pos:end="47:46"><name pos:start="47:9" pos:end="47:20">rop_to_index</name><index pos:start="47:21" pos:end="47:46">[<expr pos:start="47:22" pos:end="47:45"><name pos:start="47:22" pos:end="47:45">CIRRUS_ROP_NOTSRC_OR_DST</name></expr>]</index></name> <operator pos:start="47:48" pos:end="47:48">=</operator> <literal type="number" pos:start="47:50" pos:end="47:51">14</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:56"><expr pos:start="49:9" pos:end="49:55"><name pos:start="49:9" pos:end="49:50"><name pos:start="49:9" pos:end="49:20">rop_to_index</name><index pos:start="49:21" pos:end="49:50">[<expr pos:start="49:22" pos:end="49:49"><name pos:start="49:22" pos:end="49:49">CIRRUS_ROP_NOTSRC_AND_NOTDST</name></expr>]</index></name> <operator pos:start="49:52" pos:end="49:52">=</operator> <literal type="number" pos:start="49:54" pos:end="49:55">15</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:61"><expr pos:start="55:5" pos:end="55:60"><call pos:start="55:5" pos:end="55:60"><name pos:start="55:5" pos:end="55:25">register_ioport_write</name><argument_list pos:start="55:26" pos:end="55:60">(<argument pos:start="55:27" pos:end="55:31"><expr pos:start="55:27" pos:end="55:31"><literal type="number" pos:start="55:27" pos:end="55:31">0x3c0</literal></expr></argument>, <argument pos:start="55:34" pos:end="55:35"><expr pos:start="55:34" pos:end="55:35"><literal type="number" pos:start="55:34" pos:end="55:35">16</literal></expr></argument>, <argument pos:start="55:38" pos:end="55:38"><expr pos:start="55:38" pos:end="55:38"><literal type="number" pos:start="55:38" pos:end="55:38">1</literal></expr></argument>, <argument pos:start="55:41" pos:end="55:56"><expr pos:start="55:41" pos:end="55:56"><name pos:start="55:41" pos:end="55:56">vga_ioport_write</name></expr></argument>, <argument pos:start="55:59" pos:end="55:59"><expr pos:start="55:59" pos:end="55:59"><name pos:start="55:59" pos:end="55:59">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:60"><expr pos:start="59:5" pos:end="59:59"><call pos:start="59:5" pos:end="59:59"><name pos:start="59:5" pos:end="59:25">register_ioport_write</name><argument_list pos:start="59:26" pos:end="59:59">(<argument pos:start="59:27" pos:end="59:31"><expr pos:start="59:27" pos:end="59:31"><literal type="number" pos:start="59:27" pos:end="59:31">0x3b4</literal></expr></argument>, <argument pos:start="59:34" pos:end="59:34"><expr pos:start="59:34" pos:end="59:34"><literal type="number" pos:start="59:34" pos:end="59:34">2</literal></expr></argument>, <argument pos:start="59:37" pos:end="59:37"><expr pos:start="59:37" pos:end="59:37"><literal type="number" pos:start="59:37" pos:end="59:37">1</literal></expr></argument>, <argument pos:start="59:40" pos:end="59:55"><expr pos:start="59:40" pos:end="59:55"><name pos:start="59:40" pos:end="59:55">vga_ioport_write</name></expr></argument>, <argument pos:start="59:58" pos:end="59:58"><expr pos:start="59:58" pos:end="59:58"><name pos:start="59:58" pos:end="59:58">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:60"><expr pos:start="61:5" pos:end="61:59"><call pos:start="61:5" pos:end="61:59"><name pos:start="61:5" pos:end="61:25">register_ioport_write</name><argument_list pos:start="61:26" pos:end="61:59">(<argument pos:start="61:27" pos:end="61:31"><expr pos:start="61:27" pos:end="61:31"><literal type="number" pos:start="61:27" pos:end="61:31">0x3d4</literal></expr></argument>, <argument pos:start="61:34" pos:end="61:34"><expr pos:start="61:34" pos:end="61:34"><literal type="number" pos:start="61:34" pos:end="61:34">2</literal></expr></argument>, <argument pos:start="61:37" pos:end="61:37"><expr pos:start="61:37" pos:end="61:37"><literal type="number" pos:start="61:37" pos:end="61:37">1</literal></expr></argument>, <argument pos:start="61:40" pos:end="61:55"><expr pos:start="61:40" pos:end="61:55"><name pos:start="61:40" pos:end="61:55">vga_ioport_write</name></expr></argument>, <argument pos:start="61:58" pos:end="61:58"><expr pos:start="61:58" pos:end="61:58"><name pos:start="61:58" pos:end="61:58">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:60"><expr pos:start="63:5" pos:end="63:59"><call pos:start="63:5" pos:end="63:59"><name pos:start="63:5" pos:end="63:25">register_ioport_write</name><argument_list pos:start="63:26" pos:end="63:59">(<argument pos:start="63:27" pos:end="63:31"><expr pos:start="63:27" pos:end="63:31"><literal type="number" pos:start="63:27" pos:end="63:31">0x3ba</literal></expr></argument>, <argument pos:start="63:34" pos:end="63:34"><expr pos:start="63:34" pos:end="63:34"><literal type="number" pos:start="63:34" pos:end="63:34">1</literal></expr></argument>, <argument pos:start="63:37" pos:end="63:37"><expr pos:start="63:37" pos:end="63:37"><literal type="number" pos:start="63:37" pos:end="63:37">1</literal></expr></argument>, <argument pos:start="63:40" pos:end="63:55"><expr pos:start="63:40" pos:end="63:55"><name pos:start="63:40" pos:end="63:55">vga_ioport_write</name></expr></argument>, <argument pos:start="63:58" pos:end="63:58"><expr pos:start="63:58" pos:end="63:58"><name pos:start="63:58" pos:end="63:58">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:60"><expr pos:start="65:5" pos:end="65:59"><call pos:start="65:5" pos:end="65:59"><name pos:start="65:5" pos:end="65:25">register_ioport_write</name><argument_list pos:start="65:26" pos:end="65:59">(<argument pos:start="65:27" pos:end="65:31"><expr pos:start="65:27" pos:end="65:31"><literal type="number" pos:start="65:27" pos:end="65:31">0x3da</literal></expr></argument>, <argument pos:start="65:34" pos:end="65:34"><expr pos:start="65:34" pos:end="65:34"><literal type="number" pos:start="65:34" pos:end="65:34">1</literal></expr></argument>, <argument pos:start="65:37" pos:end="65:37"><expr pos:start="65:37" pos:end="65:37"><literal type="number" pos:start="65:37" pos:end="65:37">1</literal></expr></argument>, <argument pos:start="65:40" pos:end="65:55"><expr pos:start="65:40" pos:end="65:55"><name pos:start="65:40" pos:end="65:55">vga_ioport_write</name></expr></argument>, <argument pos:start="65:58" pos:end="65:58"><expr pos:start="65:58" pos:end="65:58"><name pos:start="65:58" pos:end="65:58">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:59"><expr pos:start="69:5" pos:end="69:58"><call pos:start="69:5" pos:end="69:58"><name pos:start="69:5" pos:end="69:24">register_ioport_read</name><argument_list pos:start="69:25" pos:end="69:58">(<argument pos:start="69:26" pos:end="69:30"><expr pos:start="69:26" pos:end="69:30"><literal type="number" pos:start="69:26" pos:end="69:30">0x3c0</literal></expr></argument>, <argument pos:start="69:33" pos:end="69:34"><expr pos:start="69:33" pos:end="69:34"><literal type="number" pos:start="69:33" pos:end="69:34">16</literal></expr></argument>, <argument pos:start="69:37" pos:end="69:37"><expr pos:start="69:37" pos:end="69:37"><literal type="number" pos:start="69:37" pos:end="69:37">1</literal></expr></argument>, <argument pos:start="69:40" pos:end="69:54"><expr pos:start="69:40" pos:end="69:54"><name pos:start="69:40" pos:end="69:54">vga_ioport_read</name></expr></argument>, <argument pos:start="69:57" pos:end="69:57"><expr pos:start="69:57" pos:end="69:57"><name pos:start="69:57" pos:end="69:57">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:58"><expr pos:start="73:5" pos:end="73:57"><call pos:start="73:5" pos:end="73:57"><name pos:start="73:5" pos:end="73:24">register_ioport_read</name><argument_list pos:start="73:25" pos:end="73:57">(<argument pos:start="73:26" pos:end="73:30"><expr pos:start="73:26" pos:end="73:30"><literal type="number" pos:start="73:26" pos:end="73:30">0x3b4</literal></expr></argument>, <argument pos:start="73:33" pos:end="73:33"><expr pos:start="73:33" pos:end="73:33"><literal type="number" pos:start="73:33" pos:end="73:33">2</literal></expr></argument>, <argument pos:start="73:36" pos:end="73:36"><expr pos:start="73:36" pos:end="73:36"><literal type="number" pos:start="73:36" pos:end="73:36">1</literal></expr></argument>, <argument pos:start="73:39" pos:end="73:53"><expr pos:start="73:39" pos:end="73:53"><name pos:start="73:39" pos:end="73:53">vga_ioport_read</name></expr></argument>, <argument pos:start="73:56" pos:end="73:56"><expr pos:start="73:56" pos:end="73:56"><name pos:start="73:56" pos:end="73:56">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:58"><expr pos:start="75:5" pos:end="75:57"><call pos:start="75:5" pos:end="75:57"><name pos:start="75:5" pos:end="75:24">register_ioport_read</name><argument_list pos:start="75:25" pos:end="75:57">(<argument pos:start="75:26" pos:end="75:30"><expr pos:start="75:26" pos:end="75:30"><literal type="number" pos:start="75:26" pos:end="75:30">0x3d4</literal></expr></argument>, <argument pos:start="75:33" pos:end="75:33"><expr pos:start="75:33" pos:end="75:33"><literal type="number" pos:start="75:33" pos:end="75:33">2</literal></expr></argument>, <argument pos:start="75:36" pos:end="75:36"><expr pos:start="75:36" pos:end="75:36"><literal type="number" pos:start="75:36" pos:end="75:36">1</literal></expr></argument>, <argument pos:start="75:39" pos:end="75:53"><expr pos:start="75:39" pos:end="75:53"><name pos:start="75:39" pos:end="75:53">vga_ioport_read</name></expr></argument>, <argument pos:start="75:56" pos:end="75:56"><expr pos:start="75:56" pos:end="75:56"><name pos:start="75:56" pos:end="75:56">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:58"><expr pos:start="77:5" pos:end="77:57"><call pos:start="77:5" pos:end="77:57"><name pos:start="77:5" pos:end="77:24">register_ioport_read</name><argument_list pos:start="77:25" pos:end="77:57">(<argument pos:start="77:26" pos:end="77:30"><expr pos:start="77:26" pos:end="77:30"><literal type="number" pos:start="77:26" pos:end="77:30">0x3ba</literal></expr></argument>, <argument pos:start="77:33" pos:end="77:33"><expr pos:start="77:33" pos:end="77:33"><literal type="number" pos:start="77:33" pos:end="77:33">1</literal></expr></argument>, <argument pos:start="77:36" pos:end="77:36"><expr pos:start="77:36" pos:end="77:36"><literal type="number" pos:start="77:36" pos:end="77:36">1</literal></expr></argument>, <argument pos:start="77:39" pos:end="77:53"><expr pos:start="77:39" pos:end="77:53"><name pos:start="77:39" pos:end="77:53">vga_ioport_read</name></expr></argument>, <argument pos:start="77:56" pos:end="77:56"><expr pos:start="77:56" pos:end="77:56"><name pos:start="77:56" pos:end="77:56">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:58"><expr pos:start="79:5" pos:end="79:57"><call pos:start="79:5" pos:end="79:57"><name pos:start="79:5" pos:end="79:24">register_ioport_read</name><argument_list pos:start="79:25" pos:end="79:57">(<argument pos:start="79:26" pos:end="79:30"><expr pos:start="79:26" pos:end="79:30"><literal type="number" pos:start="79:26" pos:end="79:30">0x3da</literal></expr></argument>, <argument pos:start="79:33" pos:end="79:33"><expr pos:start="79:33" pos:end="79:33"><literal type="number" pos:start="79:33" pos:end="79:33">1</literal></expr></argument>, <argument pos:start="79:36" pos:end="79:36"><expr pos:start="79:36" pos:end="79:36"><literal type="number" pos:start="79:36" pos:end="79:36">1</literal></expr></argument>, <argument pos:start="79:39" pos:end="79:53"><expr pos:start="79:39" pos:end="79:53"><name pos:start="79:39" pos:end="79:53">vga_ioport_read</name></expr></argument>, <argument pos:start="79:56" pos:end="79:56"><expr pos:start="79:56" pos:end="79:56"><name pos:start="79:56" pos:end="79:56">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="85:68"><expr pos:start="83:5" pos:end="85:67"><name pos:start="83:5" pos:end="83:20"><name pos:start="83:5" pos:end="83:5">s</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:20">vga_io_memory</name></name> <operator pos:start="83:22" pos:end="83:22">=</operator> <call pos:start="83:24" pos:end="85:67"><name pos:start="83:24" pos:end="83:45">cpu_register_io_memory</name><argument_list pos:start="83:46" pos:end="85:67">(<argument pos:start="83:47" pos:end="83:47"><expr pos:start="83:47" pos:end="83:47"><literal type="number" pos:start="83:47" pos:end="83:47">0</literal></expr></argument>, <argument pos:start="83:50" pos:end="83:68"><expr pos:start="83:50" pos:end="83:68"><name pos:start="83:50" pos:end="83:68">cirrus_vga_mem_read</name></expr></argument>,

                                           <argument pos:start="85:44" pos:end="85:63"><expr pos:start="85:44" pos:end="85:63"><name pos:start="85:44" pos:end="85:63">cirrus_vga_mem_write</name></expr></argument>, <argument pos:start="85:66" pos:end="85:66"><expr pos:start="85:66" pos:end="85:66"><name pos:start="85:66" pos:end="85:66">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="89:51"><expr pos:start="87:5" pos:end="89:50"><call pos:start="87:5" pos:end="89:50"><name pos:start="87:5" pos:end="87:32">cpu_register_physical_memory</name><argument_list pos:start="87:33" pos:end="89:50">(<argument pos:start="87:34" pos:end="87:58"><expr pos:start="87:34" pos:end="87:58"><name pos:start="87:34" pos:end="87:45">isa_mem_base</name> <operator pos:start="87:47" pos:end="87:47">+</operator> <literal type="number" pos:start="87:49" pos:end="87:58">0x000a0000</literal></expr></argument>, <argument pos:start="87:61" pos:end="87:67"><expr pos:start="87:61" pos:end="87:67"><literal type="number" pos:start="87:61" pos:end="87:67">0x20000</literal></expr></argument>,

                                 <argument pos:start="89:34" pos:end="89:49"><expr pos:start="89:34" pos:end="89:49"><name pos:start="89:34" pos:end="89:49"><name pos:start="89:34" pos:end="89:34">s</name><operator pos:start="89:35" pos:end="89:36">-&gt;</operator><name pos:start="89:37" pos:end="89:49">vga_io_memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <expr_stmt pos:start="94:5" pos:end="94:23"><expr pos:start="94:5" pos:end="94:22"><name pos:start="94:5" pos:end="94:15"><name pos:start="94:5" pos:end="94:5">s</name><operator pos:start="94:6" pos:end="94:7">-&gt;</operator><name pos:start="94:8" pos:end="94:9">sr</name><index pos:start="94:10" pos:end="94:15">[<expr pos:start="94:11" pos:end="94:14"><literal type="number" pos:start="94:11" pos:end="94:14">0x06</literal></expr>]</index></name> <operator pos:start="94:17" pos:end="94:17">=</operator> <literal type="number" pos:start="94:19" pos:end="94:22">0x0f</literal></expr>;</expr_stmt>

    <if_stmt pos:start="96:5" pos:end="144:5"><if pos:start="96:5" pos:end="126:5">if <condition pos:start="96:8" pos:end="96:40">(<expr pos:start="96:9" pos:end="96:39"><name pos:start="96:9" pos:end="96:17">device_id</name> <operator pos:start="96:19" pos:end="96:20">==</operator> <name pos:start="96:22" pos:end="96:39">CIRRUS_ID_CLGD5446</name></expr>)</condition> <block pos:start="96:42" pos:end="126:5">{<block_content pos:start="100:9" pos:end="125:0">

        <comment type="block" pos:start="98:9" pos:end="98:50">/* 4MB 64 bit memory config, always PCI */</comment>

        <expr_stmt pos:start="100:9" pos:end="100:27"><expr pos:start="100:9" pos:end="100:26"><name pos:start="100:9" pos:end="100:19"><name pos:start="100:9" pos:end="100:9">s</name><operator pos:start="100:10" pos:end="100:11">-&gt;</operator><name pos:start="100:12" pos:end="100:13">sr</name><index pos:start="100:14" pos:end="100:19">[<expr pos:start="100:15" pos:end="100:18"><literal type="number" pos:start="100:15" pos:end="100:18">0x1F</literal></expr>]</index></name> <operator pos:start="100:21" pos:end="100:21">=</operator> <literal type="number" pos:start="100:23" pos:end="100:26">0x2d</literal></expr>;</expr_stmt>		<comment type="line" pos:start="100:41" pos:end="100:51">// MemClock</comment>

        <expr_stmt pos:start="102:9" pos:end="105:0"><expr pos:start="102:9" pos:end="102:26"><name pos:start="102:9" pos:end="102:19"><name pos:start="102:9" pos:end="102:9">s</name><operator pos:start="102:10" pos:end="102:11">-&gt;</operator><name pos:start="102:12" pos:end="102:13">gr</name><index pos:start="102:14" pos:end="102:19">[<expr pos:start="102:15" pos:end="102:18"><literal type="number" pos:start="102:15" pos:end="102:18">0x18</literal></expr>]</index></name> <operator pos:start="102:21" pos:end="102:21">=</operator> <literal type="number" pos:start="102:23" pos:end="102:26">0x0f</literal></expr>;</expr_stmt>             <comment type="line" pos:start="102:41" pos:end="102:71">// fastest memory configuration</comment>

<cpp:if pos:start="104:1" pos:end="104:5">#<cpp:directive pos:start="104:2" pos:end="104:3">if</cpp:directive> <expr pos:start="104:5" pos:end="104:5"><literal type="number" pos:start="104:5" pos:end="104:5">1</literal></expr></cpp:if>

        <expr_stmt pos:start="106:9" pos:end="106:27"><expr pos:start="106:9" pos:end="106:26"><name pos:start="106:9" pos:end="106:19"><name pos:start="106:9" pos:end="106:9">s</name><operator pos:start="106:10" pos:end="106:11">-&gt;</operator><name pos:start="106:12" pos:end="106:13">sr</name><index pos:start="106:14" pos:end="106:19">[<expr pos:start="106:15" pos:end="106:18"><literal type="number" pos:start="106:15" pos:end="106:18">0x0f</literal></expr>]</index></name> <operator pos:start="106:21" pos:end="106:21">=</operator> <literal type="number" pos:start="106:23" pos:end="106:26">0x98</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="108:9" pos:end="108:27"><expr pos:start="108:9" pos:end="108:26"><name pos:start="108:9" pos:end="108:19"><name pos:start="108:9" pos:end="108:9">s</name><operator pos:start="108:10" pos:end="108:11">-&gt;</operator><name pos:start="108:12" pos:end="108:13">sr</name><index pos:start="108:14" pos:end="108:19">[<expr pos:start="108:15" pos:end="108:18"><literal type="number" pos:start="108:15" pos:end="108:18">0x17</literal></expr>]</index></name> <operator pos:start="108:21" pos:end="108:21">=</operator> <literal type="number" pos:start="108:23" pos:end="108:26">0x20</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="110:9" pos:end="110:27"><expr pos:start="110:9" pos:end="110:26"><name pos:start="110:9" pos:end="110:19"><name pos:start="110:9" pos:end="110:9">s</name><operator pos:start="110:10" pos:end="110:11">-&gt;</operator><name pos:start="110:12" pos:end="110:13">sr</name><index pos:start="110:14" pos:end="110:19">[<expr pos:start="110:15" pos:end="110:18"><literal type="number" pos:start="110:15" pos:end="110:18">0x15</literal></expr>]</index></name> <operator pos:start="110:21" pos:end="110:21">=</operator> <literal type="number" pos:start="110:23" pos:end="110:26">0x04</literal></expr>;</expr_stmt> <comment type="block" pos:start="110:29" pos:end="110:59">/* memory size, 3=2MB, 4=4MB */</comment>

        <expr_stmt pos:start="112:9" pos:end="115:0"><expr pos:start="112:9" pos:end="112:39"><name pos:start="112:9" pos:end="112:25"><name pos:start="112:9" pos:end="112:9">s</name><operator pos:start="112:10" pos:end="112:11">-&gt;</operator><name pos:start="112:12" pos:end="112:25">real_vram_size</name></name> <operator pos:start="112:27" pos:end="112:27">=</operator> <literal type="number" pos:start="112:29" pos:end="112:32">4096</literal> <operator pos:start="112:34" pos:end="112:34">*</operator> <literal type="number" pos:start="112:36" pos:end="112:39">1024</literal></expr>;</expr_stmt>

<cpp:else pos:start="114:1" pos:end="114:5">#<cpp:directive pos:start="114:2" pos:end="114:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="116:9" pos:end="116:27"><expr pos:start="116:9" pos:end="116:26"><name pos:start="116:9" pos:end="116:19"><name pos:start="116:9" pos:end="116:9">s</name><operator pos:start="116:10" pos:end="116:11">-&gt;</operator><name pos:start="116:12" pos:end="116:13">sr</name><index pos:start="116:14" pos:end="116:19">[<expr pos:start="116:15" pos:end="116:18"><literal type="number" pos:start="116:15" pos:end="116:18">0x0f</literal></expr>]</index></name> <operator pos:start="116:21" pos:end="116:21">=</operator> <literal type="number" pos:start="116:23" pos:end="116:26">0x18</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="118:9" pos:end="118:27"><expr pos:start="118:9" pos:end="118:26"><name pos:start="118:9" pos:end="118:19"><name pos:start="118:9" pos:end="118:9">s</name><operator pos:start="118:10" pos:end="118:11">-&gt;</operator><name pos:start="118:12" pos:end="118:13">sr</name><index pos:start="118:14" pos:end="118:19">[<expr pos:start="118:15" pos:end="118:18"><literal type="number" pos:start="118:15" pos:end="118:18">0x17</literal></expr>]</index></name> <operator pos:start="118:21" pos:end="118:21">=</operator> <literal type="number" pos:start="118:23" pos:end="118:26">0x20</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="120:9" pos:end="120:27"><expr pos:start="120:9" pos:end="120:26"><name pos:start="120:9" pos:end="120:19"><name pos:start="120:9" pos:end="120:9">s</name><operator pos:start="120:10" pos:end="120:11">-&gt;</operator><name pos:start="120:12" pos:end="120:13">sr</name><index pos:start="120:14" pos:end="120:19">[<expr pos:start="120:15" pos:end="120:18"><literal type="number" pos:start="120:15" pos:end="120:18">0x15</literal></expr>]</index></name> <operator pos:start="120:21" pos:end="120:21">=</operator> <literal type="number" pos:start="120:23" pos:end="120:26">0x03</literal></expr>;</expr_stmt> <comment type="block" pos:start="120:29" pos:end="120:59">/* memory size, 3=2MB, 4=4MB */</comment>

        <expr_stmt pos:start="122:9" pos:end="125:0"><expr pos:start="122:9" pos:end="122:39"><name pos:start="122:9" pos:end="122:25"><name pos:start="122:9" pos:end="122:9">s</name><operator pos:start="122:10" pos:end="122:11">-&gt;</operator><name pos:start="122:12" pos:end="122:25">real_vram_size</name></name> <operator pos:start="122:27" pos:end="122:27">=</operator> <literal type="number" pos:start="122:29" pos:end="122:32">2048</literal> <operator pos:start="122:34" pos:end="122:34">*</operator> <literal type="number" pos:start="122:36" pos:end="122:39">1024</literal></expr>;</expr_stmt>

<cpp:endif pos:start="124:1" pos:end="124:6">#<cpp:directive pos:start="124:2" pos:end="124:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="126:7" pos:end="144:5">else <block pos:start="126:12" pos:end="144:5">{<block_content pos:start="128:9" pos:end="142:27">

        <expr_stmt pos:start="128:9" pos:end="128:27"><expr pos:start="128:9" pos:end="128:26"><name pos:start="128:9" pos:end="128:19"><name pos:start="128:9" pos:end="128:9">s</name><operator pos:start="128:10" pos:end="128:11">-&gt;</operator><name pos:start="128:12" pos:end="128:13">sr</name><index pos:start="128:14" pos:end="128:19">[<expr pos:start="128:15" pos:end="128:18"><literal type="number" pos:start="128:15" pos:end="128:18">0x1F</literal></expr>]</index></name> <operator pos:start="128:21" pos:end="128:21">=</operator> <literal type="number" pos:start="128:23" pos:end="128:26">0x22</literal></expr>;</expr_stmt>		<comment type="line" pos:start="128:41" pos:end="128:51">// MemClock</comment>

        <expr_stmt pos:start="130:9" pos:end="130:40"><expr pos:start="130:9" pos:end="130:39"><name pos:start="130:9" pos:end="130:19"><name pos:start="130:9" pos:end="130:9">s</name><operator pos:start="130:10" pos:end="130:11">-&gt;</operator><name pos:start="130:12" pos:end="130:13">sr</name><index pos:start="130:14" pos:end="130:19">[<expr pos:start="130:15" pos:end="130:18"><literal type="number" pos:start="130:15" pos:end="130:18">0x0F</literal></expr>]</index></name> <operator pos:start="130:21" pos:end="130:21">=</operator> <name pos:start="130:23" pos:end="130:39">CIRRUS_MEMSIZE_2M</name></expr>;</expr_stmt>

        <if_stmt pos:start="132:9" pos:end="138:45"><if pos:start="132:9" pos:end="134:45">if <condition pos:start="132:12" pos:end="132:19">(<expr pos:start="132:13" pos:end="132:18"><name pos:start="132:13" pos:end="132:18">is_pci</name></expr>)</condition><block type="pseudo" pos:start="134:13" pos:end="134:45"><block_content pos:start="134:13" pos:end="134:45">

            <expr_stmt pos:start="134:13" pos:end="134:45"><expr pos:start="134:13" pos:end="134:44"><name pos:start="134:13" pos:end="134:23"><name pos:start="134:13" pos:end="134:13">s</name><operator pos:start="134:14" pos:end="134:15">-&gt;</operator><name pos:start="134:16" pos:end="134:17">sr</name><index pos:start="134:18" pos:end="134:23">[<expr pos:start="134:19" pos:end="134:22"><literal type="number" pos:start="134:19" pos:end="134:22">0x17</literal></expr>]</index></name> <operator pos:start="134:25" pos:end="134:25">=</operator> <name pos:start="134:27" pos:end="134:44">CIRRUS_BUSTYPE_PCI</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="136:9" pos:end="138:45">else<block type="pseudo" pos:start="138:13" pos:end="138:45"><block_content pos:start="138:13" pos:end="138:45">

            <expr_stmt pos:start="138:13" pos:end="138:45"><expr pos:start="138:13" pos:end="138:44"><name pos:start="138:13" pos:end="138:23"><name pos:start="138:13" pos:end="138:13">s</name><operator pos:start="138:14" pos:end="138:15">-&gt;</operator><name pos:start="138:16" pos:end="138:17">sr</name><index pos:start="138:18" pos:end="138:23">[<expr pos:start="138:19" pos:end="138:22"><literal type="number" pos:start="138:19" pos:end="138:22">0x17</literal></expr>]</index></name> <operator pos:start="138:25" pos:end="138:25">=</operator> <name pos:start="138:27" pos:end="138:44">CIRRUS_BUSTYPE_ISA</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="140:9" pos:end="140:40"><expr pos:start="140:9" pos:end="140:39"><name pos:start="140:9" pos:end="140:25"><name pos:start="140:9" pos:end="140:9">s</name><operator pos:start="140:10" pos:end="140:11">-&gt;</operator><name pos:start="140:12" pos:end="140:25">real_vram_size</name></name> <operator pos:start="140:27" pos:end="140:27">=</operator> <literal type="number" pos:start="140:29" pos:end="140:32">2048</literal> <operator pos:start="140:34" pos:end="140:34">*</operator> <literal type="number" pos:start="140:36" pos:end="140:39">1024</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="142:9" pos:end="142:27"><expr pos:start="142:9" pos:end="142:26"><name pos:start="142:9" pos:end="142:19"><name pos:start="142:9" pos:end="142:9">s</name><operator pos:start="142:10" pos:end="142:11">-&gt;</operator><name pos:start="142:12" pos:end="142:13">sr</name><index pos:start="142:14" pos:end="142:19">[<expr pos:start="142:15" pos:end="142:18"><literal type="number" pos:start="142:15" pos:end="142:18">0x15</literal></expr>]</index></name> <operator pos:start="142:21" pos:end="142:21">=</operator> <literal type="number" pos:start="142:23" pos:end="142:26">0x03</literal></expr>;</expr_stmt> <comment type="block" pos:start="142:29" pos:end="142:59">/* memory size, 3=2MB, 4=4MB */</comment>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="146:5" pos:end="146:28"><expr pos:start="146:5" pos:end="146:27"><name pos:start="146:5" pos:end="146:15"><name pos:start="146:5" pos:end="146:5">s</name><operator pos:start="146:6" pos:end="146:7">-&gt;</operator><name pos:start="146:8" pos:end="146:9">cr</name><index pos:start="146:10" pos:end="146:15">[<expr pos:start="146:11" pos:end="146:14"><literal type="number" pos:start="146:11" pos:end="146:14">0x27</literal></expr>]</index></name> <operator pos:start="146:17" pos:end="146:17">=</operator> <name pos:start="146:19" pos:end="146:27">device_id</name></expr>;</expr_stmt>



    <comment type="block" pos:start="150:5" pos:end="152:21">/* Win2K seems to assume that the pattern buffer is at 0xff

       initially ! */</comment>

    <expr_stmt pos:start="154:5" pos:end="154:49"><expr pos:start="154:5" pos:end="154:48"><call pos:start="154:5" pos:end="154:48"><name pos:start="154:5" pos:end="154:10">memset</name><argument_list pos:start="154:11" pos:end="154:48">(<argument pos:start="154:12" pos:end="154:22"><expr pos:start="154:12" pos:end="154:22"><name pos:start="154:12" pos:end="154:22"><name pos:start="154:12" pos:end="154:12">s</name><operator pos:start="154:13" pos:end="154:14">-&gt;</operator><name pos:start="154:15" pos:end="154:22">vram_ptr</name></name></expr></argument>, <argument pos:start="154:25" pos:end="154:28"><expr pos:start="154:25" pos:end="154:28"><literal type="number" pos:start="154:25" pos:end="154:28">0xff</literal></expr></argument>, <argument pos:start="154:31" pos:end="154:47"><expr pos:start="154:31" pos:end="154:47"><name pos:start="154:31" pos:end="154:47"><name pos:start="154:31" pos:end="154:31">s</name><operator pos:start="154:32" pos:end="154:33">-&gt;</operator><name pos:start="154:34" pos:end="154:47">real_vram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="158:5" pos:end="158:39"><expr pos:start="158:5" pos:end="158:38"><name pos:start="158:5" pos:end="158:34"><name pos:start="158:5" pos:end="158:5">s</name><operator pos:start="158:6" pos:end="158:7">-&gt;</operator><name pos:start="158:8" pos:end="158:34">cirrus_hidden_dac_lockindex</name></name> <operator pos:start="158:36" pos:end="158:36">=</operator> <literal type="number" pos:start="158:38" pos:end="158:38">5</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="160:5" pos:end="160:34"><expr pos:start="160:5" pos:end="160:33"><name pos:start="160:5" pos:end="160:29"><name pos:start="160:5" pos:end="160:5">s</name><operator pos:start="160:6" pos:end="160:7">-&gt;</operator><name pos:start="160:8" pos:end="160:29">cirrus_hidden_dac_data</name></name> <operator pos:start="160:31" pos:end="160:31">=</operator> <literal type="number" pos:start="160:33" pos:end="160:33">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="164:5" pos:end="164:29">/* I/O handler for LFB */</comment>

    <expr_stmt pos:start="166:5" pos:end="170:34"><expr pos:start="166:5" pos:end="170:33"><name pos:start="166:5" pos:end="166:28"><name pos:start="166:5" pos:end="166:5">s</name><operator pos:start="166:6" pos:end="166:7">-&gt;</operator><name pos:start="166:8" pos:end="166:28">cirrus_linear_io_addr</name></name> <operator pos:start="166:30" pos:end="166:30">=</operator>

	<call pos:start="168:9" pos:end="170:33"><name pos:start="168:9" pos:end="168:30">cpu_register_io_memory</name><argument_list pos:start="168:31" pos:end="170:33">(<argument pos:start="168:32" pos:end="168:32"><expr pos:start="168:32" pos:end="168:32"><literal type="number" pos:start="168:32" pos:end="168:32">0</literal></expr></argument>, <argument pos:start="168:35" pos:end="168:52"><expr pos:start="168:35" pos:end="168:52"><name pos:start="168:35" pos:end="168:52">cirrus_linear_read</name></expr></argument>, <argument pos:start="168:55" pos:end="168:73"><expr pos:start="168:55" pos:end="168:73"><name pos:start="168:55" pos:end="168:73">cirrus_linear_write</name></expr></argument>,

			       <argument pos:start="170:32" pos:end="170:32"><expr pos:start="170:32" pos:end="170:32"><name pos:start="170:32" pos:end="170:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="172:5" pos:end="172:79"><expr pos:start="172:5" pos:end="172:78"><name pos:start="172:5" pos:end="172:26"><name pos:start="172:5" pos:end="172:5">s</name><operator pos:start="172:6" pos:end="172:7">-&gt;</operator><name pos:start="172:8" pos:end="172:26">cirrus_linear_write</name></name> <operator pos:start="172:28" pos:end="172:28">=</operator> <call pos:start="172:30" pos:end="172:78"><name pos:start="172:30" pos:end="172:52">cpu_get_io_memory_write</name><argument_list pos:start="172:53" pos:end="172:78">(<argument pos:start="172:54" pos:end="172:77"><expr pos:start="172:54" pos:end="172:77"><name pos:start="172:54" pos:end="172:77"><name pos:start="172:54" pos:end="172:54">s</name><operator pos:start="172:55" pos:end="172:56">-&gt;</operator><name pos:start="172:57" pos:end="172:77">cirrus_linear_io_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="176:5" pos:end="176:29">/* I/O handler for LFB */</comment>

    <expr_stmt pos:start="178:5" pos:end="182:34"><expr pos:start="178:5" pos:end="182:33"><name pos:start="178:5" pos:end="178:35"><name pos:start="178:5" pos:end="178:5">s</name><operator pos:start="178:6" pos:end="178:7">-&gt;</operator><name pos:start="178:8" pos:end="178:35">cirrus_linear_bitblt_io_addr</name></name> <operator pos:start="178:37" pos:end="178:37">=</operator>

	<call pos:start="180:9" pos:end="182:33"><name pos:start="180:9" pos:end="180:30">cpu_register_io_memory</name><argument_list pos:start="180:31" pos:end="182:33">(<argument pos:start="180:32" pos:end="180:32"><expr pos:start="180:32" pos:end="180:32"><literal type="number" pos:start="180:32" pos:end="180:32">0</literal></expr></argument>, <argument pos:start="180:35" pos:end="180:59"><expr pos:start="180:35" pos:end="180:59"><name pos:start="180:35" pos:end="180:59">cirrus_linear_bitblt_read</name></expr></argument>, <argument pos:start="180:62" pos:end="180:87"><expr pos:start="180:62" pos:end="180:87"><name pos:start="180:62" pos:end="180:87">cirrus_linear_bitblt_write</name></expr></argument>,

			       <argument pos:start="182:32" pos:end="182:32"><expr pos:start="182:32" pos:end="182:32"><name pos:start="182:32" pos:end="182:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="186:5" pos:end="186:43">/* I/O handler for memory-mapped I/O */</comment>

    <expr_stmt pos:start="188:5" pos:end="190:74"><expr pos:start="188:5" pos:end="190:73"><name pos:start="188:5" pos:end="188:26"><name pos:start="188:5" pos:end="188:5">s</name><operator pos:start="188:6" pos:end="188:7">-&gt;</operator><name pos:start="188:8" pos:end="188:26">cirrus_mmio_io_addr</name></name> <operator pos:start="188:28" pos:end="188:28">=</operator>

	<call pos:start="190:9" pos:end="190:73"><name pos:start="190:9" pos:end="190:30">cpu_register_io_memory</name><argument_list pos:start="190:31" pos:end="190:73">(<argument pos:start="190:32" pos:end="190:32"><expr pos:start="190:32" pos:end="190:32"><literal type="number" pos:start="190:32" pos:end="190:32">0</literal></expr></argument>, <argument pos:start="190:35" pos:end="190:50"><expr pos:start="190:35" pos:end="190:50"><name pos:start="190:35" pos:end="190:50">cirrus_mmio_read</name></expr></argument>, <argument pos:start="190:53" pos:end="190:69"><expr pos:start="190:53" pos:end="190:69"><name pos:start="190:53" pos:end="190:69">cirrus_mmio_write</name></expr></argument>, <argument pos:start="190:72" pos:end="190:72"><expr pos:start="190:72" pos:end="190:72"><name pos:start="190:72" pos:end="190:72">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="194:5" pos:end="194:50">/* XXX: s-&gt;vram_size must be a power of two */</comment>

    <expr_stmt pos:start="196:5" pos:end="196:48"><expr pos:start="196:5" pos:end="196:47"><name pos:start="196:5" pos:end="196:23"><name pos:start="196:5" pos:end="196:5">s</name><operator pos:start="196:6" pos:end="196:7">-&gt;</operator><name pos:start="196:8" pos:end="196:23">cirrus_addr_mask</name></name> <operator pos:start="196:25" pos:end="196:25">=</operator> <name pos:start="196:27" pos:end="196:43"><name pos:start="196:27" pos:end="196:27">s</name><operator pos:start="196:28" pos:end="196:29">-&gt;</operator><name pos:start="196:30" pos:end="196:43">real_vram_size</name></name> <operator pos:start="196:45" pos:end="196:45">-</operator> <literal type="number" pos:start="196:47" pos:end="196:47">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="198:5" pos:end="198:50"><expr pos:start="198:5" pos:end="198:49"><name pos:start="198:5" pos:end="198:23"><name pos:start="198:5" pos:end="198:5">s</name><operator pos:start="198:6" pos:end="198:7">-&gt;</operator><name pos:start="198:8" pos:end="198:23">linear_mmio_mask</name></name> <operator pos:start="198:25" pos:end="198:25">=</operator> <name pos:start="198:27" pos:end="198:43"><name pos:start="198:27" pos:end="198:27">s</name><operator pos:start="198:28" pos:end="198:29">-&gt;</operator><name pos:start="198:30" pos:end="198:43">real_vram_size</name></name> <operator pos:start="198:45" pos:end="198:45">-</operator> <literal type="number" pos:start="198:47" pos:end="198:49">256</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="202:5" pos:end="202:32"><expr pos:start="202:5" pos:end="202:31"><name pos:start="202:5" pos:end="202:14"><name pos:start="202:5" pos:end="202:5">s</name><operator pos:start="202:6" pos:end="202:7">-&gt;</operator><name pos:start="202:8" pos:end="202:14">get_bpp</name></name> <operator pos:start="202:16" pos:end="202:16">=</operator> <name pos:start="202:18" pos:end="202:31">cirrus_get_bpp</name></expr>;</expr_stmt>

    <expr_stmt pos:start="204:5" pos:end="204:40"><expr pos:start="204:5" pos:end="204:39"><name pos:start="204:5" pos:end="204:18"><name pos:start="204:5" pos:end="204:5">s</name><operator pos:start="204:6" pos:end="204:7">-&gt;</operator><name pos:start="204:8" pos:end="204:18">get_offsets</name></name> <operator pos:start="204:20" pos:end="204:20">=</operator> <name pos:start="204:22" pos:end="204:39">cirrus_get_offsets</name></expr>;</expr_stmt>

    <expr_stmt pos:start="206:5" pos:end="206:46"><expr pos:start="206:5" pos:end="206:45"><name pos:start="206:5" pos:end="206:21"><name pos:start="206:5" pos:end="206:5">s</name><operator pos:start="206:6" pos:end="206:7">-&gt;</operator><name pos:start="206:8" pos:end="206:21">get_resolution</name></name> <operator pos:start="206:23" pos:end="206:23">=</operator> <name pos:start="206:25" pos:end="206:45">cirrus_get_resolution</name></expr>;</expr_stmt>

    <expr_stmt pos:start="208:5" pos:end="208:52"><expr pos:start="208:5" pos:end="208:51"><name pos:start="208:5" pos:end="208:24"><name pos:start="208:5" pos:end="208:5">s</name><operator pos:start="208:6" pos:end="208:7">-&gt;</operator><name pos:start="208:8" pos:end="208:24">cursor_invalidate</name></name> <operator pos:start="208:26" pos:end="208:26">=</operator> <name pos:start="208:28" pos:end="208:51">cirrus_cursor_invalidate</name></expr>;</expr_stmt>

    <expr_stmt pos:start="210:5" pos:end="210:50"><expr pos:start="210:5" pos:end="210:49"><name pos:start="210:5" pos:end="210:23"><name pos:start="210:5" pos:end="210:5">s</name><operator pos:start="210:6" pos:end="210:7">-&gt;</operator><name pos:start="210:8" pos:end="210:23">cursor_draw_line</name></name> <operator pos:start="210:25" pos:end="210:25">=</operator> <name pos:start="210:27" pos:end="210:49">cirrus_cursor_draw_line</name></expr>;</expr_stmt>



    <expr_stmt pos:start="214:5" pos:end="214:77"><expr pos:start="214:5" pos:end="214:76"><call pos:start="214:5" pos:end="214:76"><name pos:start="214:5" pos:end="214:19">register_savevm</name><argument_list pos:start="214:20" pos:end="214:76">(<argument pos:start="214:21" pos:end="214:32"><expr pos:start="214:21" pos:end="214:32"><literal type="string" pos:start="214:21" pos:end="214:32">"cirrus_vga"</literal></expr></argument>, <argument pos:start="214:35" pos:end="214:35"><expr pos:start="214:35" pos:end="214:35"><literal type="number" pos:start="214:35" pos:end="214:35">0</literal></expr></argument>, <argument pos:start="214:38" pos:end="214:38"><expr pos:start="214:38" pos:end="214:38"><literal type="number" pos:start="214:38" pos:end="214:38">2</literal></expr></argument>, <argument pos:start="214:41" pos:end="214:55"><expr pos:start="214:41" pos:end="214:55"><name pos:start="214:41" pos:end="214:55">cirrus_vga_save</name></expr></argument>, <argument pos:start="214:58" pos:end="214:72"><expr pos:start="214:58" pos:end="214:72"><name pos:start="214:58" pos:end="214:72">cirrus_vga_load</name></expr></argument>, <argument pos:start="214:75" pos:end="214:75"><expr pos:start="214:75" pos:end="214:75"><name pos:start="214:75" pos:end="214:75">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function></unit>
