<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19286.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:18">MemTxResult</name></type> <name pos:start="1:20" pos:end="1:31">gic_cpu_read</name><parameter_list pos:start="1:32" pos:end="3:65">(<parameter pos:start="1:33" pos:end="1:43"><decl pos:start="1:33" pos:end="1:43"><type pos:start="1:33" pos:end="1:43"><name pos:start="1:33" pos:end="1:40">GICState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">s</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:52"><decl pos:start="1:46" pos:end="1:52"><type pos:start="1:46" pos:end="1:52"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:52">cpu</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:64"><decl pos:start="1:55" pos:end="1:64"><type pos:start="1:55" pos:end="1:64"><name pos:start="1:55" pos:end="1:57">int</name></type> <name pos:start="1:59" pos:end="1:64">offset</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:46"><decl pos:start="3:33" pos:end="3:46"><type pos:start="3:33" pos:end="3:46"><name pos:start="3:33" pos:end="3:40">uint64_t</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:46">data</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:64"><decl pos:start="3:49" pos:end="3:64"><type pos:start="3:49" pos:end="3:64"><name pos:start="3:49" pos:end="3:58">MemTxAttrs</name></type> <name pos:start="3:60" pos:end="3:64">attrs</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="97:1">{<block_content pos:start="7:5" pos:end="95:20">

    <switch pos:start="7:5" pos:end="93:5">switch <condition pos:start="7:12" pos:end="7:19">(<expr pos:start="7:13" pos:end="7:18"><name pos:start="7:13" pos:end="7:18">offset</name></expr>)</condition> <block pos:start="7:21" pos:end="93:5">{<block_content pos:start="9:5" pos:end="91:27">

    <case pos:start="9:5" pos:end="9:14">case <expr pos:start="9:10" pos:end="9:13"><literal type="number" pos:start="9:10" pos:end="9:13">0x00</literal></expr>:</case> <comment type="block" pos:start="9:16" pos:end="9:28">/* Control */</comment>

        <expr_stmt pos:start="11:9" pos:end="11:36"><expr pos:start="11:9" pos:end="11:35"><operator pos:start="11:9" pos:end="11:9">*</operator><name pos:start="11:10" pos:end="11:13">data</name> <operator pos:start="11:15" pos:end="11:15">=</operator> <name pos:start="11:17" pos:end="11:35"><name pos:start="11:17" pos:end="11:17">s</name><operator pos:start="11:18" pos:end="11:19">-&gt;</operator><name pos:start="11:20" pos:end="11:30">cpu_enabled</name><index pos:start="11:31" pos:end="11:35">[<expr pos:start="11:32" pos:end="11:34"><name pos:start="11:32" pos:end="11:34">cpu</name></expr>]</index></name></expr>;</expr_stmt>

        <break pos:start="13:9" pos:end="13:14">break;</break>

    <case pos:start="15:5" pos:end="15:14">case <expr pos:start="15:10" pos:end="15:13"><literal type="number" pos:start="15:10" pos:end="15:13">0x04</literal></expr>:</case> <comment type="block" pos:start="15:16" pos:end="15:34">/* Priority mask */</comment>

        <expr_stmt pos:start="17:9" pos:end="17:38"><expr pos:start="17:9" pos:end="17:37"><operator pos:start="17:9" pos:end="17:9">*</operator><name pos:start="17:10" pos:end="17:13">data</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <name pos:start="17:17" pos:end="17:37"><name pos:start="17:17" pos:end="17:17">s</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:32">priority_mask</name><index pos:start="17:33" pos:end="17:37">[<expr pos:start="17:34" pos:end="17:36"><name pos:start="17:34" pos:end="17:36">cpu</name></expr>]</index></name></expr>;</expr_stmt>

        <break pos:start="19:9" pos:end="19:14">break;</break>

    <case pos:start="21:5" pos:end="21:14">case <expr pos:start="21:10" pos:end="21:13"><literal type="number" pos:start="21:10" pos:end="21:13">0x08</literal></expr>:</case> <comment type="block" pos:start="21:16" pos:end="21:33">/* Binary Point */</comment>

        <if_stmt pos:start="23:9" pos:end="33:9"><if pos:start="23:9" pos:end="29:9">if <condition pos:start="23:12" pos:end="23:46">(<expr pos:start="23:13" pos:end="23:45"><name pos:start="23:13" pos:end="23:28"><name pos:start="23:13" pos:end="23:13">s</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:28">security_extn</name></name> <operator pos:start="23:30" pos:end="23:31">&amp;&amp;</operator> <operator pos:start="23:33" pos:end="23:33">!</operator><name pos:start="23:34" pos:end="23:45"><name pos:start="23:34" pos:end="23:38">attrs</name><operator pos:start="23:39" pos:end="23:39">.</operator><name pos:start="23:40" pos:end="23:45">secure</name></name></expr>)</condition> <block pos:start="23:48" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:33">

            <comment type="block" pos:start="25:13" pos:end="25:64">/* BPR is banked. Non-secure copy stored in ABPR. */</comment>

            <expr_stmt pos:start="27:13" pos:end="27:33"><expr pos:start="27:13" pos:end="27:32"><operator pos:start="27:13" pos:end="27:13">*</operator><name pos:start="27:14" pos:end="27:17">data</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <name pos:start="27:21" pos:end="27:32"><name pos:start="27:21" pos:end="27:21">s</name><operator pos:start="27:22" pos:end="27:23">-&gt;</operator><name pos:start="27:24" pos:end="27:27">abpr</name><index pos:start="27:28" pos:end="27:32">[<expr pos:start="27:29" pos:end="27:31"><name pos:start="27:29" pos:end="27:31">cpu</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="29:11" pos:end="33:9">else <block pos:start="29:16" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:32">

            <expr_stmt pos:start="31:13" pos:end="31:32"><expr pos:start="31:13" pos:end="31:31"><operator pos:start="31:13" pos:end="31:13">*</operator><name pos:start="31:14" pos:end="31:17">data</name> <operator pos:start="31:19" pos:end="31:19">=</operator> <name pos:start="31:21" pos:end="31:31"><name pos:start="31:21" pos:end="31:21">s</name><operator pos:start="31:22" pos:end="31:23">-&gt;</operator><name pos:start="31:24" pos:end="31:26">bpr</name><index pos:start="31:27" pos:end="31:31">[<expr pos:start="31:28" pos:end="31:30"><name pos:start="31:28" pos:end="31:30">cpu</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="35:9" pos:end="35:14">break;</break>

    <case pos:start="37:5" pos:end="37:14">case <expr pos:start="37:10" pos:end="37:13"><literal type="number" pos:start="37:10" pos:end="37:13">0x0c</literal></expr>:</case> <comment type="block" pos:start="37:16" pos:end="37:32">/* Acknowledge */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:44"><expr pos:start="39:9" pos:end="39:43"><operator pos:start="39:9" pos:end="39:9">*</operator><name pos:start="39:10" pos:end="39:13">data</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <call pos:start="39:17" pos:end="39:43"><name pos:start="39:17" pos:end="39:35">gic_acknowledge_irq</name><argument_list pos:start="39:36" pos:end="39:43">(<argument pos:start="39:37" pos:end="39:37"><expr pos:start="39:37" pos:end="39:37"><name pos:start="39:37" pos:end="39:37">s</name></expr></argument>, <argument pos:start="39:40" pos:end="39:42"><expr pos:start="39:40" pos:end="39:42"><name pos:start="39:40" pos:end="39:42">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    <case pos:start="43:5" pos:end="43:14">case <expr pos:start="43:10" pos:end="43:13"><literal type="number" pos:start="43:10" pos:end="43:13">0x14</literal></expr>:</case> <comment type="block" pos:start="43:16" pos:end="43:37">/* Running Priority */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:41"><expr pos:start="45:9" pos:end="45:40"><operator pos:start="45:9" pos:end="45:9">*</operator><name pos:start="45:10" pos:end="45:13">data</name> <operator pos:start="45:15" pos:end="45:15">=</operator> <name pos:start="45:17" pos:end="45:40"><name pos:start="45:17" pos:end="45:17">s</name><operator pos:start="45:18" pos:end="45:19">-&gt;</operator><name pos:start="45:20" pos:end="45:35">running_priority</name><index pos:start="45:36" pos:end="45:40">[<expr pos:start="45:37" pos:end="45:39"><name pos:start="45:37" pos:end="45:39">cpu</name></expr>]</index></name></expr>;</expr_stmt>

        <break pos:start="47:9" pos:end="47:14">break;</break>

    <case pos:start="49:5" pos:end="49:14">case <expr pos:start="49:10" pos:end="49:13"><literal type="number" pos:start="49:10" pos:end="49:13">0x18</literal></expr>:</case> <comment type="block" pos:start="49:16" pos:end="49:46">/* Highest Pending Interrupt */</comment>

        <expr_stmt pos:start="51:9" pos:end="51:40"><expr pos:start="51:9" pos:end="51:39"><operator pos:start="51:9" pos:end="51:9">*</operator><name pos:start="51:10" pos:end="51:13">data</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <name pos:start="51:17" pos:end="51:39"><name pos:start="51:17" pos:end="51:17">s</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:34">current_pending</name><index pos:start="51:35" pos:end="51:39">[<expr pos:start="51:36" pos:end="51:38"><name pos:start="51:36" pos:end="51:38">cpu</name></expr>]</index></name></expr>;</expr_stmt>

        <break pos:start="53:9" pos:end="53:14">break;</break>

    <case pos:start="55:5" pos:end="55:14">case <expr pos:start="55:10" pos:end="55:13"><literal type="number" pos:start="55:10" pos:end="55:13">0x1c</literal></expr>:</case> <comment type="block" pos:start="55:16" pos:end="55:41">/* Aliased Binary Point */</comment>

        <comment type="block" pos:start="57:9" pos:end="65:11">/* GIC v2, no security: ABPR

         * GIC v1, no security: not implemented (RAZ/WI)

         * With security extensions, secure access: ABPR (alias of NS BPR)

         * With security extensions, nonsecure access: RAZ/WI

         */</comment>

        <if_stmt pos:start="67:9" pos:end="75:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:70">(<expr pos:start="67:13" pos:end="67:69"><operator pos:start="67:13" pos:end="67:13">!</operator><call pos:start="67:14" pos:end="67:30"><name pos:start="67:14" pos:end="67:27">gic_has_groups</name><argument_list pos:start="67:28" pos:end="67:30">(<argument pos:start="67:29" pos:end="67:29"><expr pos:start="67:29" pos:end="67:29"><name pos:start="67:29" pos:end="67:29">s</name></expr></argument>)</argument_list></call> <operator pos:start="67:32" pos:end="67:33">||</operator> <operator pos:start="67:35" pos:end="67:35">(</operator><name pos:start="67:36" pos:end="67:51"><name pos:start="67:36" pos:end="67:36">s</name><operator pos:start="67:37" pos:end="67:38">-&gt;</operator><name pos:start="67:39" pos:end="67:51">security_extn</name></name> <operator pos:start="67:53" pos:end="67:54">&amp;&amp;</operator> <operator pos:start="67:56" pos:end="67:56">!</operator><name pos:start="67:57" pos:end="67:68"><name pos:start="67:57" pos:end="67:61">attrs</name><operator pos:start="67:62" pos:end="67:62">.</operator><name pos:start="67:63" pos:end="67:68">secure</name></name><operator pos:start="67:69" pos:end="67:69">)</operator></expr>)</condition> <block pos:start="67:72" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:22">

            <expr_stmt pos:start="69:13" pos:end="69:22"><expr pos:start="69:13" pos:end="69:21"><operator pos:start="69:13" pos:end="69:13">*</operator><name pos:start="69:14" pos:end="69:17">data</name> <operator pos:start="69:19" pos:end="69:19">=</operator> <literal type="number" pos:start="69:21" pos:end="69:21">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="71:11" pos:end="75:9">else <block pos:start="71:16" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:33">

            <expr_stmt pos:start="73:13" pos:end="73:33"><expr pos:start="73:13" pos:end="73:32"><operator pos:start="73:13" pos:end="73:13">*</operator><name pos:start="73:14" pos:end="73:17">data</name> <operator pos:start="73:19" pos:end="73:19">=</operator> <name pos:start="73:21" pos:end="73:32"><name pos:start="73:21" pos:end="73:21">s</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:27">abpr</name><index pos:start="73:28" pos:end="73:32">[<expr pos:start="73:29" pos:end="73:31"><name pos:start="73:29" pos:end="73:31">cpu</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <case pos:start="79:5" pos:end="79:14">case <expr pos:start="79:10" pos:end="79:13"><literal type="number" pos:start="79:10" pos:end="79:13">0xd0</literal></expr>:</case> <case pos:start="79:16" pos:end="79:25">case <expr pos:start="79:21" pos:end="79:24"><literal type="number" pos:start="79:21" pos:end="79:24">0xd4</literal></expr>:</case> <case pos:start="79:27" pos:end="79:36">case <expr pos:start="79:32" pos:end="79:35"><literal type="number" pos:start="79:32" pos:end="79:35">0xd8</literal></expr>:</case> <case pos:start="79:38" pos:end="79:47">case <expr pos:start="79:43" pos:end="79:46"><literal type="number" pos:start="79:43" pos:end="79:46">0xdc</literal></expr>:</case>

        <expr_stmt pos:start="81:9" pos:end="81:49"><expr pos:start="81:9" pos:end="81:48"><operator pos:start="81:9" pos:end="81:9">*</operator><name pos:start="81:10" pos:end="81:13">data</name> <operator pos:start="81:15" pos:end="81:15">=</operator> <name pos:start="81:17" pos:end="81:48"><name pos:start="81:17" pos:end="81:17">s</name><operator pos:start="81:18" pos:end="81:19">-&gt;</operator><name pos:start="81:20" pos:end="81:22">apr</name><index pos:start="81:23" pos:end="81:43">[<expr pos:start="81:24" pos:end="81:42"><operator pos:start="81:24" pos:end="81:24">(</operator><name pos:start="81:25" pos:end="81:30">offset</name> <operator pos:start="81:32" pos:end="81:32">-</operator> <literal type="number" pos:start="81:34" pos:end="81:37">0xd0</literal><operator pos:start="81:38" pos:end="81:38">)</operator> <operator pos:start="81:40" pos:end="81:40">/</operator> <literal type="number" pos:start="81:42" pos:end="81:42">4</literal></expr>]</index><index pos:start="81:44" pos:end="81:48">[<expr pos:start="81:45" pos:end="81:47"><name pos:start="81:45" pos:end="81:47">cpu</name></expr>]</index></name></expr>;</expr_stmt>

        <break pos:start="83:9" pos:end="83:14">break;</break>

    <default pos:start="85:5" pos:end="85:12">default:</default>

        <expr_stmt pos:start="87:9" pos:end="89:68"><expr pos:start="87:9" pos:end="89:67"><call pos:start="87:9" pos:end="89:67"><name pos:start="87:9" pos:end="87:21">qemu_log_mask</name><argument_list pos:start="87:22" pos:end="89:67">(<argument pos:start="87:23" pos:end="87:37"><expr pos:start="87:23" pos:end="87:37"><name pos:start="87:23" pos:end="87:37">LOG_GUEST_ERROR</name></expr></argument>,

                      <argument pos:start="89:23" pos:end="89:53"><expr pos:start="89:23" pos:end="89:53"><literal type="string" pos:start="89:23" pos:end="89:53">"gic_cpu_read: Bad offset %x\n"</literal></expr></argument>, <argument pos:start="89:56" pos:end="89:66"><expr pos:start="89:56" pos:end="89:66"><operator pos:start="89:56" pos:end="89:56">(</operator><name pos:start="89:57" pos:end="89:59">int</name><operator pos:start="89:60" pos:end="89:60">)</operator><name pos:start="89:61" pos:end="89:66">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="91:9" pos:end="91:27">return <expr pos:start="91:16" pos:end="91:26"><name pos:start="91:16" pos:end="91:26">MEMTX_ERROR</name></expr>;</return>

    </block_content>}</block></switch>

    <return pos:start="95:5" pos:end="95:20">return <expr pos:start="95:12" pos:end="95:19"><name pos:start="95:12" pos:end="95:19">MEMTX_OK</name></expr>;</return>

</block_content>}</block></function>
</unit>
