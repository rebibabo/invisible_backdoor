<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13292.c" pos:tabs="8"><function pos:start="1:1" pos:end="58:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:15">has_altivec</name><parameter_list pos:start="1:16" pos:end="1:21">(<parameter pos:start="1:17" pos:end="1:20"><decl pos:start="1:17" pos:end="1:20"><type pos:start="1:17" pos:end="1:20"><name pos:start="1:17" pos:end="1:20">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="58:1">{<block_content pos:start="7:5" pos:end="57:0">

<cpp:ifdef pos:start="5:1" pos:end="5:19">#<cpp:directive pos:start="5:2" pos:end="5:6">ifdef</cpp:directive> <name pos:start="5:8" pos:end="5:19">__AMIGAOS4__</name></cpp:ifdef>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:9"><name pos:start="7:5" pos:end="7:9">ULONG</name></type> <name pos:start="7:11" pos:end="7:16">result</name> <init pos:start="7:18" pos:end="7:20">= <expr pos:start="7:20" pos:end="7:20"><literal type="number" pos:start="7:20" pos:end="7:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:29"><specifier pos:start="9:5" pos:end="9:10">extern</specifier> <name pos:start="9:12" pos:end="9:27"><name pos:start="9:12" pos:end="9:17">struct</name> <name pos:start="9:19" pos:end="9:27">ExecIFace</name></name> <modifier pos:start="9:29" pos:end="9:29">*</modifier></type><name pos:start="9:30" pos:end="9:34">IExec</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:62"><expr pos:start="13:5" pos:end="13:61"><call pos:start="13:5" pos:end="13:61"><name pos:start="13:5" pos:end="13:25"><name pos:start="13:5" pos:end="13:9">IExec</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:25">GetCPUInfoTags</name></name><argument_list pos:start="13:26" pos:end="13:61">(<argument pos:start="13:27" pos:end="13:41"><expr pos:start="13:27" pos:end="13:41"><name pos:start="13:27" pos:end="13:41">GCIT_VectorUnit</name></expr></argument>, <argument pos:start="13:44" pos:end="13:50"><expr pos:start="13:44" pos:end="13:50"><operator pos:start="13:44" pos:end="13:44">&amp;</operator><name pos:start="13:45" pos:end="13:50">result</name></expr></argument>, <argument pos:start="13:53" pos:end="13:60"><expr pos:start="13:53" pos:end="13:60"><name pos:start="13:53" pos:end="13:60">TAG_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="19:0"><if pos:start="15:5" pos:end="19:0">if <condition pos:start="15:8" pos:end="15:37">(<expr pos:start="15:9" pos:end="15:36"><name pos:start="15:9" pos:end="15:14">result</name> <operator pos:start="15:16" pos:end="15:17">==</operator> <name pos:start="15:19" pos:end="15:36">VECTORTYPE_ALTIVEC</name></expr>)</condition><block type="pseudo" pos:start="15:39" pos:end="19:0"><block_content pos:start="15:39" pos:end="19:0"> <return pos:start="15:39" pos:end="19:0">return <expr pos:start="15:46" pos:end="15:46"><literal type="number" pos:start="15:46" pos:end="15:46">1</literal></expr>;</return></block_content></block></if></if_stmt>


<cpp:elif pos:start="18:1" pos:end="18:15">#<cpp:directive pos:start="18:2" pos:end="18:5">elif</cpp:directive> <expr pos:start="18:7" pos:end="18:15"><name pos:start="18:7" pos:end="18:15">__APPLE__</name></expr></cpp:elif>

    <decl_stmt pos:start="20:5" pos:end="20:42"><decl pos:start="20:5" pos:end="20:41"><type pos:start="20:5" pos:end="20:7"><name pos:start="20:5" pos:end="20:7">int</name></type> <name pos:start="20:9" pos:end="20:15"><name pos:start="20:9" pos:end="20:12">sels</name><index pos:start="20:13" pos:end="20:15">[<expr pos:start="20:14" pos:end="20:14"><literal type="number" pos:start="20:14" pos:end="20:14">2</literal></expr>]</index></name> <init pos:start="20:17" pos:end="20:41">= <expr pos:start="20:19" pos:end="20:41"><block pos:start="20:19" pos:end="20:41">{<expr pos:start="20:20" pos:end="20:25"><name pos:start="20:20" pos:end="20:25">CTL_HW</name></expr>, <expr pos:start="20:28" pos:end="20:40"><name pos:start="20:28" pos:end="20:40">HW_VECTORUNIT</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="22:5" pos:end="22:19"><decl pos:start="22:5" pos:end="22:18"><type pos:start="22:5" pos:end="22:7"><name pos:start="22:5" pos:end="22:7">int</name></type> <name pos:start="22:9" pos:end="22:14">has_vu</name> <init pos:start="22:16" pos:end="22:18">= <expr pos:start="22:18" pos:end="22:18"><literal type="number" pos:start="22:18" pos:end="22:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="24:5" pos:end="24:32"><decl pos:start="24:5" pos:end="24:31"><type pos:start="24:5" pos:end="24:10"><name pos:start="24:5" pos:end="24:10">size_t</name></type> <name pos:start="24:12" pos:end="24:14">len</name> <init pos:start="24:16" pos:end="24:31">= <expr pos:start="24:18" pos:end="24:31"><sizeof pos:start="24:18" pos:end="24:31">sizeof<argument_list pos:start="24:24" pos:end="24:31">(<argument pos:start="24:25" pos:end="24:30"><expr pos:start="24:25" pos:end="24:30"><name pos:start="24:25" pos:end="24:30">has_vu</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="26:5" pos:end="26:12"><decl pos:start="26:5" pos:end="26:11"><type pos:start="26:5" pos:end="26:7"><name pos:start="26:5" pos:end="26:7">int</name></type> <name pos:start="26:9" pos:end="26:11">err</name></decl>;</decl_stmt>



    <expr_stmt pos:start="30:5" pos:end="30:50"><expr pos:start="30:5" pos:end="30:49"><name pos:start="30:5" pos:end="30:7">err</name> <operator pos:start="30:9" pos:end="30:9">=</operator> <call pos:start="30:11" pos:end="30:49"><name pos:start="30:11" pos:end="30:16">sysctl</name><argument_list pos:start="30:17" pos:end="30:49">(<argument pos:start="30:18" pos:end="30:21"><expr pos:start="30:18" pos:end="30:21"><name pos:start="30:18" pos:end="30:21">sels</name></expr></argument>, <argument pos:start="30:24" pos:end="30:24"><expr pos:start="30:24" pos:end="30:24"><literal type="number" pos:start="30:24" pos:end="30:24">2</literal></expr></argument>, <argument pos:start="30:27" pos:end="30:33"><expr pos:start="30:27" pos:end="30:33"><operator pos:start="30:27" pos:end="30:27">&amp;</operator><name pos:start="30:28" pos:end="30:33">has_vu</name></expr></argument>, <argument pos:start="30:36" pos:end="30:39"><expr pos:start="30:36" pos:end="30:39"><operator pos:start="30:36" pos:end="30:36">&amp;</operator><name pos:start="30:37" pos:end="30:39">len</name></expr></argument>, <argument pos:start="30:42" pos:end="30:45"><expr pos:start="30:42" pos:end="30:45"><name pos:start="30:42" pos:end="30:45">NULL</name></expr></argument>, <argument pos:start="30:48" pos:end="30:48"><expr pos:start="30:48" pos:end="30:48"><literal type="number" pos:start="30:48" pos:end="30:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="34:5" pos:end="57:0"><if pos:start="34:5" pos:end="57:0">if <condition pos:start="34:8" pos:end="34:17">(<expr pos:start="34:9" pos:end="34:16"><name pos:start="34:9" pos:end="34:11">err</name> <operator pos:start="34:13" pos:end="34:14">==</operator> <literal type="number" pos:start="34:16" pos:end="34:16">0</literal></expr>)</condition><block type="pseudo" pos:start="34:19" pos:end="57:0"><block_content pos:start="34:19" pos:end="57:0"> <return pos:start="34:19" pos:end="57:0">return <expr pos:start="34:26" pos:end="34:38"><operator pos:start="34:26" pos:end="34:26">(</operator><name pos:start="34:27" pos:end="34:32">has_vu</name> <operator pos:start="34:34" pos:end="34:35">!=</operator> <literal type="number" pos:start="34:37" pos:end="34:37">0</literal><operator pos:start="34:38" pos:end="34:38">)</operator></expr>;</return></block_content></block></if></if_stmt>














<cpp:else pos:start="49:1" pos:end="49:5">#<cpp:directive pos:start="49:2" pos:end="49:5">else</cpp:directive></cpp:else>

    <comment type="line" pos:start="51:5" pos:end="51:65">// since we were compiled for altivec, just assume we have it</comment>

    <comment type="line" pos:start="53:5" pos:end="53:77">// until someone comes up with a proper way (not involving signal hacks).</comment>


<cpp:endif pos:start="56:1" pos:end="56:6">#<cpp:directive pos:start="56:2" pos:end="56:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="56:8" pos:end="56:25">/* __AMIGAOS4__ */</comment>

</block_content>}</block></function></unit>
