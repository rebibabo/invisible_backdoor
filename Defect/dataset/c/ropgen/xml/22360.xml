<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22360.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:32">openpic_gbl_read</name><parameter_list pos:start="1:33" pos:end="1:73">(<parameter pos:start="1:34" pos:end="1:45"><decl pos:start="1:34" pos:end="1:45"><type pos:start="1:34" pos:end="1:45"><name pos:start="1:34" pos:end="1:37">void</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:45">opaque</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:58"><decl pos:start="1:48" pos:end="1:58"><type pos:start="1:48" pos:end="1:58"><name pos:start="1:48" pos:end="1:53">hwaddr</name></type> <name pos:start="1:55" pos:end="1:58">addr</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:72"><decl pos:start="1:61" pos:end="1:72"><type pos:start="1:61" pos:end="1:72"><name pos:start="1:61" pos:end="1:68">unsigned</name></type> <name pos:start="1:70" pos:end="1:72">len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="109:1">{<block_content pos:start="5:5" pos:end="107:18">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">OpenPICState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:21">opp</name> <init pos:start="5:23" pos:end="5:30">= <expr pos:start="5:25" pos:end="5:30"><name pos:start="5:25" pos:end="5:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:19">retval</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:61"><expr pos:start="11:5" pos:end="11:60"><call pos:start="11:5" pos:end="11:60"><name pos:start="11:5" pos:end="11:11">DPRINTF</name><argument_list pos:start="11:12" pos:end="11:60">(<argument pos:start="11:13" pos:end="11:43"><expr pos:start="11:13" pos:end="11:43"><literal type="string" pos:start="11:13" pos:end="11:23">"%s: addr "</literal> <name pos:start="11:25" pos:end="11:38">TARGET_FMT_plx</name> <literal type="string" pos:start="11:40" pos:end="11:43">"\n"</literal></expr></argument>, <argument pos:start="11:46" pos:end="11:53"><expr pos:start="11:46" pos:end="11:53"><name pos:start="11:46" pos:end="11:53">__func__</name></expr></argument>, <argument pos:start="11:56" pos:end="11:59"><expr pos:start="11:56" pos:end="11:59"><name pos:start="11:56" pos:end="11:59">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:24"><expr pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:10">retval</name> <operator pos:start="13:12" pos:end="13:12">=</operator> <literal type="number" pos:start="13:14" pos:end="13:23">0xFFFFFFFF</literal></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="17:22"><if pos:start="15:5" pos:end="17:22">if <condition pos:start="15:8" pos:end="15:19">(<expr pos:start="15:9" pos:end="15:18"><name pos:start="15:9" pos:end="15:12">addr</name> <operator pos:start="15:14" pos:end="15:14">&amp;</operator> <literal type="number" pos:start="15:16" pos:end="15:18">0xF</literal></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:22"><block_content pos:start="17:9" pos:end="17:22">

        <return pos:start="17:9" pos:end="17:22">return <expr pos:start="17:16" pos:end="17:21"><name pos:start="17:16" pos:end="17:21">retval</name></expr>;</return></block_content></block></if></if_stmt>

    <switch pos:start="19:5" pos:end="101:5">switch <condition pos:start="19:12" pos:end="19:17">(<expr pos:start="19:13" pos:end="19:16"><name pos:start="19:13" pos:end="19:16">addr</name></expr>)</condition> <block pos:start="19:19" pos:end="101:5">{<block_content pos:start="21:5" pos:end="99:14">

    <case pos:start="21:5" pos:end="21:16">case <expr pos:start="21:10" pos:end="21:15"><literal type="number" pos:start="21:10" pos:end="21:15">0x1000</literal></expr>:</case> <comment type="block" pos:start="21:18" pos:end="21:27">/* FREP */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:27"><expr pos:start="23:9" pos:end="23:26"><name pos:start="23:9" pos:end="23:14">retval</name> <operator pos:start="23:16" pos:end="23:16">=</operator> <name pos:start="23:18" pos:end="23:26"><name pos:start="23:18" pos:end="23:20">opp</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:26">frep</name></name></expr>;</expr_stmt>

        <break pos:start="25:9" pos:end="25:14">break;</break>

    <case pos:start="27:5" pos:end="27:16">case <expr pos:start="27:10" pos:end="27:15"><literal type="number" pos:start="27:10" pos:end="27:15">0x1020</literal></expr>:</case> <comment type="block" pos:start="27:18" pos:end="27:27">/* GLBC */</comment>

        <expr_stmt pos:start="29:9" pos:end="29:27"><expr pos:start="29:9" pos:end="29:26"><name pos:start="29:9" pos:end="29:14">retval</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <name pos:start="29:18" pos:end="29:26"><name pos:start="29:18" pos:end="29:20">opp</name><operator pos:start="29:21" pos:end="29:22">-&gt;</operator><name pos:start="29:23" pos:end="29:26">glbc</name></name></expr>;</expr_stmt>

        <break pos:start="31:9" pos:end="31:14">break;</break>

    <case pos:start="33:5" pos:end="33:16">case <expr pos:start="33:10" pos:end="33:15"><literal type="number" pos:start="33:10" pos:end="33:15">0x1080</literal></expr>:</case> <comment type="block" pos:start="33:18" pos:end="33:27">/* VENI */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:27"><expr pos:start="35:9" pos:end="35:26"><name pos:start="35:9" pos:end="35:14">retval</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <name pos:start="35:18" pos:end="35:26"><name pos:start="35:18" pos:end="35:20">opp</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:26">veni</name></name></expr>;</expr_stmt>

        <break pos:start="37:9" pos:end="37:14">break;</break>

    <case pos:start="39:5" pos:end="39:16">case <expr pos:start="39:10" pos:end="39:15"><literal type="number" pos:start="39:10" pos:end="39:15">0x1090</literal></expr>:</case> <comment type="block" pos:start="39:18" pos:end="39:27">/* PINT */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:28"><expr pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:14">retval</name> <operator pos:start="41:16" pos:end="41:16">=</operator> <literal type="number" pos:start="41:18" pos:end="41:27">0x00000000</literal></expr>;</expr_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>

    <case pos:start="45:5" pos:end="45:14">case <expr pos:start="45:10" pos:end="45:13"><literal type="number" pos:start="45:10" pos:end="45:13">0x00</literal></expr>:</case> <comment type="block" pos:start="45:16" pos:end="45:52">/* Block Revision Register1 (BRR1) */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:27"><expr pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:14">retval</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <name pos:start="47:18" pos:end="47:26"><name pos:start="47:18" pos:end="47:20">opp</name><operator pos:start="47:21" pos:end="47:22">-&gt;</operator><name pos:start="47:23" pos:end="47:26">brr1</name></name></expr>;</expr_stmt>

        <break pos:start="49:9" pos:end="49:14">break;</break>

    <case pos:start="51:5" pos:end="51:14">case <expr pos:start="51:10" pos:end="51:13"><literal type="number" pos:start="51:10" pos:end="51:13">0x40</literal></expr>:</case>

    <case pos:start="53:5" pos:end="53:14">case <expr pos:start="53:10" pos:end="53:13"><literal type="number" pos:start="53:10" pos:end="53:13">0x50</literal></expr>:</case>

    <case pos:start="55:5" pos:end="55:14">case <expr pos:start="55:10" pos:end="55:13"><literal type="number" pos:start="55:10" pos:end="55:13">0x60</literal></expr>:</case>

    <case pos:start="57:5" pos:end="57:14">case <expr pos:start="57:10" pos:end="57:13"><literal type="number" pos:start="57:10" pos:end="57:13">0x70</literal></expr>:</case>

    <case pos:start="59:5" pos:end="59:14">case <expr pos:start="59:10" pos:end="59:13"><literal type="number" pos:start="59:10" pos:end="59:13">0x80</literal></expr>:</case>

    <case pos:start="61:5" pos:end="61:14">case <expr pos:start="61:10" pos:end="61:13"><literal type="number" pos:start="61:10" pos:end="61:13">0x90</literal></expr>:</case>

    <case pos:start="63:5" pos:end="63:14">case <expr pos:start="63:10" pos:end="63:13"><literal type="number" pos:start="63:10" pos:end="63:13">0xA0</literal></expr>:</case>

    <case pos:start="65:5" pos:end="65:14">case <expr pos:start="65:10" pos:end="65:13"><literal type="number" pos:start="65:10" pos:end="65:13">0xB0</literal></expr>:</case>

        <expr_stmt pos:start="67:9" pos:end="67:73"><expr pos:start="67:9" pos:end="67:72"><name pos:start="67:9" pos:end="67:14">retval</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <call pos:start="67:18" pos:end="67:72"><name pos:start="67:18" pos:end="67:42">openpic_cpu_read_internal</name><argument_list pos:start="67:43" pos:end="67:72">(<argument pos:start="67:44" pos:end="67:46"><expr pos:start="67:44" pos:end="67:46"><name pos:start="67:44" pos:end="67:46">opp</name></expr></argument>, <argument pos:start="67:49" pos:end="67:52"><expr pos:start="67:49" pos:end="67:52"><name pos:start="67:49" pos:end="67:52">addr</name></expr></argument>, <argument pos:start="67:55" pos:end="67:71"><expr pos:start="67:55" pos:end="67:71"><call pos:start="67:55" pos:end="67:71"><name pos:start="67:55" pos:end="67:69">get_current_cpu</name><argument_list pos:start="67:70" pos:end="67:71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="69:9" pos:end="69:14">break;</break>

    <case pos:start="71:5" pos:end="71:16">case <expr pos:start="71:10" pos:end="71:15"><literal type="number" pos:start="71:10" pos:end="71:15">0x10A0</literal></expr>:</case> <comment type="block" pos:start="71:18" pos:end="71:31">/* IPI_IPVP */</comment>

    <case pos:start="73:5" pos:end="73:16">case <expr pos:start="73:10" pos:end="73:15"><literal type="number" pos:start="73:10" pos:end="73:15">0x10B0</literal></expr>:</case>

    <case pos:start="75:5" pos:end="75:16">case <expr pos:start="75:10" pos:end="75:15"><literal type="number" pos:start="75:10" pos:end="75:15">0x10C0</literal></expr>:</case>

    <case pos:start="77:5" pos:end="77:16">case <expr pos:start="77:10" pos:end="77:15"><literal type="number" pos:start="77:10" pos:end="77:15">0x10D0</literal></expr>:</case>

        <block pos:start="79:9" pos:end="87:9">{<block_content pos:start="81:13" pos:end="85:64">

            <decl_stmt pos:start="81:13" pos:end="81:20"><decl pos:start="81:13" pos:end="81:19"><type pos:start="81:13" pos:end="81:15"><name pos:start="81:13" pos:end="81:15">int</name></type> <name pos:start="81:17" pos:end="81:19">idx</name></decl>;</decl_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:39"><expr pos:start="83:13" pos:end="83:38"><name pos:start="83:13" pos:end="83:15">idx</name> <operator pos:start="83:17" pos:end="83:17">=</operator> <operator pos:start="83:19" pos:end="83:19">(</operator><name pos:start="83:20" pos:end="83:23">addr</name> <operator pos:start="83:25" pos:end="83:25">-</operator> <literal type="number" pos:start="83:27" pos:end="83:32">0x10A0</literal><operator pos:start="83:33" pos:end="83:33">)</operator> <operator pos:start="83:35" pos:end="83:36">&gt;&gt;</operator> <literal type="number" pos:start="83:38" pos:end="83:38">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:64"><expr pos:start="85:13" pos:end="85:63"><name pos:start="85:13" pos:end="85:18">retval</name> <operator pos:start="85:20" pos:end="85:20">=</operator> <call pos:start="85:22" pos:end="85:63"><name pos:start="85:22" pos:end="85:37">read_IRQreg_ipvp</name><argument_list pos:start="85:38" pos:end="85:63">(<argument pos:start="85:39" pos:end="85:41"><expr pos:start="85:39" pos:end="85:41"><name pos:start="85:39" pos:end="85:41">opp</name></expr></argument>, <argument pos:start="85:44" pos:end="85:62"><expr pos:start="85:44" pos:end="85:62"><name pos:start="85:44" pos:end="85:56"><name pos:start="85:44" pos:end="85:46">opp</name><operator pos:start="85:47" pos:end="85:48">-&gt;</operator><name pos:start="85:49" pos:end="85:56">irq_ipi0</name></name> <operator pos:start="85:58" pos:end="85:58">+</operator> <name pos:start="85:60" pos:end="85:62">idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="89:9" pos:end="89:14">break;</break>

    <case pos:start="91:5" pos:end="91:16">case <expr pos:start="91:10" pos:end="91:15"><literal type="number" pos:start="91:10" pos:end="91:15">0x10E0</literal></expr>:</case> <comment type="block" pos:start="91:18" pos:end="91:27">/* SPVE */</comment>

        <expr_stmt pos:start="93:9" pos:end="93:27"><expr pos:start="93:9" pos:end="93:26"><name pos:start="93:9" pos:end="93:14">retval</name> <operator pos:start="93:16" pos:end="93:16">=</operator> <name pos:start="93:18" pos:end="93:26"><name pos:start="93:18" pos:end="93:20">opp</name><operator pos:start="93:21" pos:end="93:22">-&gt;</operator><name pos:start="93:23" pos:end="93:26">spve</name></name></expr>;</expr_stmt>

        <break pos:start="95:9" pos:end="95:14">break;</break>

    <default pos:start="97:5" pos:end="97:12">default:</default>

        <break pos:start="99:9" pos:end="99:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="103:5" pos:end="103:47"><expr pos:start="103:5" pos:end="103:46"><call pos:start="103:5" pos:end="103:46"><name pos:start="103:5" pos:end="103:11">DPRINTF</name><argument_list pos:start="103:12" pos:end="103:46">(<argument pos:start="103:13" pos:end="103:27"><expr pos:start="103:13" pos:end="103:27"><literal type="string" pos:start="103:13" pos:end="103:27">"%s: =&gt; %08x\n"</literal></expr></argument>, <argument pos:start="103:30" pos:end="103:37"><expr pos:start="103:30" pos:end="103:37"><name pos:start="103:30" pos:end="103:37">__func__</name></expr></argument>, <argument pos:start="103:40" pos:end="103:45"><expr pos:start="103:40" pos:end="103:45"><name pos:start="103:40" pos:end="103:45">retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="107:5" pos:end="107:18">return <expr pos:start="107:12" pos:end="107:17"><name pos:start="107:12" pos:end="107:17">retval</name></expr>;</return>

</block_content>}</block></function>
</unit>
