<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19318.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">decode_555</name><parameter_list pos:start="1:22" pos:end="3:49">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:40"><name pos:start="1:23" pos:end="1:36">GetByteContext</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">gB</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:55"><decl pos:start="1:43" pos:end="1:55"><type pos:start="1:43" pos:end="1:55"><name pos:start="1:43" pos:end="1:50">uint16_t</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">dst</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:67"><decl pos:start="1:58" pos:end="1:67"><type pos:start="1:58" pos:end="1:67"><name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:67">stride</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:34"><decl pos:start="3:23" pos:end="3:34"><type pos:start="3:23" pos:end="3:34"><name pos:start="3:23" pos:end="3:25">int</name></type> <name pos:start="3:27" pos:end="3:34">keyframe</name></decl></parameter>, <parameter pos:start="3:37" pos:end="3:41"><decl pos:start="3:37" pos:end="3:41"><type pos:start="3:37" pos:end="3:41"><name pos:start="3:37" pos:end="3:39">int</name></type> <name pos:start="3:41" pos:end="3:41">w</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:48"><decl pos:start="3:44" pos:end="3:48"><type pos:start="3:44" pos:end="3:48"><name pos:start="3:44" pos:end="3:46">int</name></type> <name pos:start="3:48" pos:end="3:48">h</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="113:1">{<block_content pos:start="7:5" pos:end="111:13">

    <decl_stmt pos:start="7:5" pos:end="7:52"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:19">last_symbol</name> <init pos:start="7:21" pos:end="7:23">= <expr pos:start="7:23" pos:end="7:23"><literal type="number" pos:start="7:23" pos:end="7:23">0</literal></expr></init></decl>, <decl pos:start="7:26" pos:end="7:35"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:26" pos:end="7:31">repeat</name> <init pos:start="7:33" pos:end="7:35">= <expr pos:start="7:35" pos:end="7:35"><literal type="number" pos:start="7:35" pos:end="7:35">0</literal></expr></init></decl>, <decl pos:start="7:38" pos:end="7:51"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:38" pos:end="7:47">prev_avail</name> <init pos:start="7:49" pos:end="7:51">= <expr pos:start="7:51" pos:end="7:51"><literal type="number" pos:start="7:51" pos:end="7:51">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="51:5"><if pos:start="11:5" pos:end="51:5">if <condition pos:start="11:8" pos:end="11:18">(<expr pos:start="11:9" pos:end="11:17"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:17">keyframe</name></expr>)</condition> <block pos:start="11:20" pos:end="51:5">{<block_content pos:start="13:9" pos:end="49:27">

        <decl_stmt pos:start="13:9" pos:end="32:0"><decl pos:start="13:9" pos:end="13:13"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:13">x</name></decl>, <decl pos:start="13:16" pos:end="13:16"><type ref="prev" pos:start="13:9" pos:end="13:11"/><name pos:start="13:16" pos:end="13:16">y</name></decl>, <decl pos:start="13:19" pos:end="13:22"><type ref="prev" pos:start="13:9" pos:end="13:11"/><name pos:start="13:19" pos:end="13:22">endx</name></decl>, <decl pos:start="13:25" pos:end="13:28"><type ref="prev" pos:start="13:9" pos:end="13:11"/><name pos:start="13:25" pos:end="13:28">endy</name></decl>, <decl pos:start="13:31" pos:end="13:31"><type ref="prev" pos:start="13:9" pos:end="13:11"/><name pos:start="13:31" pos:end="13:31">t</name></decl>;</decl_stmt>



<cpp:define pos:start="17:1" pos:end="31:26">#<cpp:directive pos:start="17:2" pos:end="17:7">define</cpp:directive> <cpp:macro pos:start="17:9" pos:end="17:23"><name pos:start="17:9" pos:end="17:17">READ_PAIR</name><parameter_list pos:start="17:18" pos:end="17:23">(<parameter pos:start="17:19" pos:end="17:19"><type pos:start="17:19" pos:end="17:19"><name pos:start="17:19" pos:end="17:19">a</name></type></parameter>, <parameter pos:start="17:22" pos:end="17:22"><type pos:start="17:22" pos:end="17:22"><name pos:start="17:22" pos:end="17:22">b</name></type></parameter>)</parameter_list></cpp:macro>                 \

    <cpp:value pos:start="19:5" pos:end="31:26">a  = bytestream2_get_byte(gB) &lt;&lt; 4; \

    t  = bytestream2_get_byte(gB);      \

    a |= t &gt;&gt; 4;                        \

    b  = (t &amp; 0xF) &lt;&lt; 8;                \

    b |= bytestream2_get_byte(gB);      \



        READ_PAIR(x, endx)</cpp:value></cpp:define>

        <macro pos:start="33:9" pos:end="33:26"><name pos:start="33:9" pos:end="33:17">READ_PAIR</name><argument_list pos:start="33:18" pos:end="33:26">(<argument pos:start="33:19" pos:end="33:19">y</argument>, <argument pos:start="33:22" pos:end="33:25">endy</argument>)</argument_list></macro>



        <if_stmt pos:start="37:9" pos:end="39:39"><if pos:start="37:9" pos:end="39:39">if <condition pos:start="37:12" pos:end="37:59">(<expr pos:start="37:13" pos:end="37:58"><name pos:start="37:13" pos:end="37:16">endx</name> <operator pos:start="37:18" pos:end="37:19">&gt;=</operator> <name pos:start="37:21" pos:end="37:21">w</name> <operator pos:start="37:23" pos:end="37:24">||</operator> <name pos:start="37:26" pos:end="37:29">endy</name> <operator pos:start="37:31" pos:end="37:32">&gt;=</operator> <name pos:start="37:34" pos:end="37:34">h</name> <operator pos:start="37:36" pos:end="37:37">||</operator> <name pos:start="37:39" pos:end="37:39">x</name> <operator pos:start="37:41" pos:end="37:41">&gt;</operator> <name pos:start="37:43" pos:end="37:46">endx</name> <operator pos:start="37:48" pos:end="37:49">||</operator> <name pos:start="37:51" pos:end="37:51">y</name> <operator pos:start="37:53" pos:end="37:53">&gt;</operator> <name pos:start="37:55" pos:end="37:58">endy</name></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:39"><block_content pos:start="39:13" pos:end="39:39">

            <return pos:start="39:13" pos:end="39:39">return <expr pos:start="39:20" pos:end="39:38"><name pos:start="39:20" pos:end="39:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:30"><expr pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:11">dst</name> <operator pos:start="41:13" pos:end="41:14">+=</operator> <name pos:start="41:16" pos:end="41:16">x</name> <operator pos:start="41:18" pos:end="41:18">+</operator> <name pos:start="41:20" pos:end="41:25">stride</name> <operator pos:start="41:27" pos:end="41:27">*</operator> <name pos:start="41:29" pos:end="41:29">y</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:28"><expr pos:start="43:9" pos:end="43:27"><name pos:start="43:9" pos:end="43:9">w</name>    <operator pos:start="43:14" pos:end="43:14">=</operator> <name pos:start="43:16" pos:end="43:19">endx</name> <operator pos:start="43:21" pos:end="43:21">-</operator> <name pos:start="43:23" pos:end="43:23">x</name> <operator pos:start="43:25" pos:end="43:25">+</operator> <literal type="number" pos:start="43:27" pos:end="43:27">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:28"><expr pos:start="45:9" pos:end="45:27"><name pos:start="45:9" pos:end="45:9">h</name>    <operator pos:start="45:14" pos:end="45:14">=</operator> <name pos:start="45:16" pos:end="45:19">endy</name> <operator pos:start="45:21" pos:end="45:21">-</operator> <name pos:start="45:23" pos:end="45:23">y</name> <operator pos:start="45:25" pos:end="45:25">+</operator> <literal type="number" pos:start="45:27" pos:end="45:27">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="49:27"><if pos:start="47:9" pos:end="49:27">if <condition pos:start="47:12" pos:end="47:14">(<expr pos:start="47:13" pos:end="47:13"><name pos:start="47:13" pos:end="47:13">y</name></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:27"><block_content pos:start="49:13" pos:end="49:27">

            <expr_stmt pos:start="49:13" pos:end="49:27"><expr pos:start="49:13" pos:end="49:26"><name pos:start="49:13" pos:end="49:22">prev_avail</name> <operator pos:start="49:24" pos:end="49:24">=</operator> <literal type="number" pos:start="49:26" pos:end="49:26">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <do pos:start="55:5" pos:end="107:18">do <block pos:start="55:8" pos:end="107:5">{<block_content pos:start="57:9" pos:end="105:23">

        <decl_stmt pos:start="57:9" pos:end="57:26"><decl pos:start="57:9" pos:end="57:25"><type pos:start="57:9" pos:end="57:18"><name pos:start="57:9" pos:end="57:16">uint16_t</name> <modifier pos:start="57:18" pos:end="57:18">*</modifier></type><name pos:start="57:19" pos:end="57:19">p</name> <init pos:start="57:21" pos:end="57:25">= <expr pos:start="57:23" pos:end="57:25"><name pos:start="57:23" pos:end="57:25">dst</name></expr></init></decl>;</decl_stmt>

        <do pos:start="59:9" pos:end="101:32">do <block pos:start="59:12" pos:end="101:9">{<block_content pos:start="61:13" pos:end="99:35">

            <if_stmt pos:start="61:13" pos:end="91:13"><if pos:start="61:13" pos:end="91:13">if <condition pos:start="61:16" pos:end="61:29">(<expr pos:start="61:17" pos:end="61:28"><name pos:start="61:17" pos:end="61:22">repeat</name><operator pos:start="61:23" pos:end="61:24">--</operator> <operator pos:start="61:26" pos:end="61:26">&lt;</operator> <literal type="number" pos:start="61:28" pos:end="61:28">1</literal></expr>)</condition> <block pos:start="61:31" pos:end="91:13">{<block_content pos:start="63:17" pos:end="89:42">

                <decl_stmt pos:start="63:17" pos:end="63:49"><decl pos:start="63:17" pos:end="63:48"><type pos:start="63:17" pos:end="63:19"><name pos:start="63:17" pos:end="63:19">int</name></type> <name pos:start="63:21" pos:end="63:21">b</name> <init pos:start="63:23" pos:end="63:48">= <expr pos:start="63:25" pos:end="63:48"><call pos:start="63:25" pos:end="63:48"><name pos:start="63:25" pos:end="63:44">bytestream2_get_byte</name><argument_list pos:start="63:45" pos:end="63:48">(<argument pos:start="63:46" pos:end="63:47"><expr pos:start="63:46" pos:end="63:47"><name pos:start="63:46" pos:end="63:47">gB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="65:17" pos:end="89:42"><if pos:start="65:17" pos:end="67:68">if <condition pos:start="65:20" pos:end="65:28">(<expr pos:start="65:21" pos:end="65:27"><name pos:start="65:21" pos:end="65:21">b</name> <operator pos:start="65:23" pos:end="65:23">&lt;</operator> <literal type="number" pos:start="65:25" pos:end="65:27">128</literal></expr>)</condition><block type="pseudo" pos:start="67:21" pos:end="67:68"><block_content pos:start="67:21" pos:end="67:68">

                    <expr_stmt pos:start="67:21" pos:end="67:68"><expr pos:start="67:21" pos:end="67:67"><name pos:start="67:21" pos:end="67:31">last_symbol</name> <operator pos:start="67:33" pos:end="67:33">=</operator> <name pos:start="67:35" pos:end="67:35">b</name> <operator pos:start="67:37" pos:end="67:38">&lt;&lt;</operator> <literal type="number" pos:start="67:40" pos:end="67:40">8</literal> <operator pos:start="67:42" pos:end="67:42">|</operator> <call pos:start="67:44" pos:end="67:67"><name pos:start="67:44" pos:end="67:63">bytestream2_get_byte</name><argument_list pos:start="67:64" pos:end="67:67">(<argument pos:start="67:65" pos:end="67:66"><expr pos:start="67:65" pos:end="67:66"><name pos:start="67:65" pos:end="67:66">gB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="69:17" pos:end="87:17">else if <condition pos:start="69:25" pos:end="69:33">(<expr pos:start="69:26" pos:end="69:32"><name pos:start="69:26" pos:end="69:26">b</name> <operator pos:start="69:28" pos:end="69:28">&gt;</operator> <literal type="number" pos:start="69:30" pos:end="69:32">129</literal></expr>)</condition> <block pos:start="69:35" pos:end="87:17">{<block_content pos:start="71:21" pos:end="85:21">

                    <expr_stmt pos:start="71:21" pos:end="71:31"><expr pos:start="71:21" pos:end="71:30"><name pos:start="71:21" pos:end="71:26">repeat</name> <operator pos:start="71:28" pos:end="71:28">=</operator> <literal type="number" pos:start="71:30" pos:end="71:30">0</literal></expr>;</expr_stmt>

                    <while pos:start="73:21" pos:end="75:78">while <condition pos:start="73:27" pos:end="73:37">(<expr pos:start="73:28" pos:end="73:36"><name pos:start="73:28" pos:end="73:28">b</name><operator pos:start="73:29" pos:end="73:30">--</operator> <operator pos:start="73:32" pos:end="73:32">&gt;</operator> <literal type="number" pos:start="73:34" pos:end="73:36">130</literal></expr>)</condition><block type="pseudo" pos:start="75:25" pos:end="75:78"><block_content pos:start="75:25" pos:end="75:78">

                        <expr_stmt pos:start="75:25" pos:end="75:78"><expr pos:start="75:25" pos:end="75:77"><name pos:start="75:25" pos:end="75:30">repeat</name> <operator pos:start="75:32" pos:end="75:32">=</operator> <operator pos:start="75:34" pos:end="75:34">(</operator><name pos:start="75:35" pos:end="75:40">repeat</name> <operator pos:start="75:42" pos:end="75:43">&lt;&lt;</operator> <literal type="number" pos:start="75:45" pos:end="75:45">8</literal><operator pos:start="75:46" pos:end="75:46">)</operator> <operator pos:start="75:48" pos:end="75:48">+</operator> <call pos:start="75:50" pos:end="75:73"><name pos:start="75:50" pos:end="75:69">bytestream2_get_byte</name><argument_list pos:start="75:70" pos:end="75:73">(<argument pos:start="75:71" pos:end="75:72"><expr pos:start="75:71" pos:end="75:72"><name pos:start="75:71" pos:end="75:72">gB</name></expr></argument>)</argument_list></call> <operator pos:start="75:75" pos:end="75:75">+</operator> <literal type="number" pos:start="75:77" pos:end="75:77">1</literal></expr>;</expr_stmt></block_content></block></while>

                    <if_stmt pos:start="77:21" pos:end="85:21"><if pos:start="77:21" pos:end="85:21">if <condition pos:start="77:24" pos:end="77:42">(<expr pos:start="77:25" pos:end="77:41"><name pos:start="77:25" pos:end="77:35">last_symbol</name> <operator pos:start="77:37" pos:end="77:38">==</operator> <operator pos:start="77:40" pos:end="77:40">-</operator><literal type="number" pos:start="77:41" pos:end="77:41">2</literal></expr>)</condition> <block pos:start="77:44" pos:end="85:21">{<block_content pos:start="79:25" pos:end="83:39">

                        <decl_stmt pos:start="79:25" pos:end="79:72"><decl pos:start="79:25" pos:end="79:71"><type pos:start="79:25" pos:end="79:27"><name pos:start="79:25" pos:end="79:27">int</name></type> <name pos:start="79:29" pos:end="79:32">skip</name> <init pos:start="79:34" pos:end="79:71">= <expr pos:start="79:36" pos:end="79:71"><call pos:start="79:36" pos:end="79:71"><name pos:start="79:36" pos:end="79:40">FFMIN</name><argument_list pos:start="79:41" pos:end="79:71">(<argument pos:start="79:42" pos:end="79:57"><expr pos:start="79:42" pos:end="79:57"><operator pos:start="79:42" pos:end="79:42">(</operator><name pos:start="79:43" pos:end="79:50">unsigned</name><operator pos:start="79:51" pos:end="79:51">)</operator><name pos:start="79:52" pos:end="79:57">repeat</name></expr></argument>, <argument pos:start="79:60" pos:end="79:70"><expr pos:start="79:60" pos:end="79:70"><name pos:start="79:60" pos:end="79:62">dst</name> <operator pos:start="79:64" pos:end="79:64">+</operator> <name pos:start="79:66" pos:end="79:66">w</name> <operator pos:start="79:68" pos:end="79:68">-</operator> <name pos:start="79:70" pos:end="79:70">p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="81:25" pos:end="81:39"><expr pos:start="81:25" pos:end="81:38"><name pos:start="81:25" pos:end="81:30">repeat</name> <operator pos:start="81:32" pos:end="81:33">-=</operator> <name pos:start="81:35" pos:end="81:38">skip</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="83:25" pos:end="83:39"><expr pos:start="83:25" pos:end="83:38"><name pos:start="83:25" pos:end="83:25">p</name>      <operator pos:start="83:32" pos:end="83:33">+=</operator> <name pos:start="83:35" pos:end="83:38">skip</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if> <else pos:start="87:19" pos:end="89:42">else<block type="pseudo" pos:start="89:21" pos:end="89:42"><block_content pos:start="89:21" pos:end="89:42">

                    <expr_stmt pos:start="89:21" pos:end="89:42"><expr pos:start="89:21" pos:end="89:41"><name pos:start="89:21" pos:end="89:31">last_symbol</name> <operator pos:start="89:33" pos:end="89:33">=</operator> <literal type="number" pos:start="89:35" pos:end="89:39">127</literal> <operator pos:start="89:39" pos:end="89:39">-</operator> <name pos:start="89:41" pos:end="89:41">b</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="93:13" pos:end="99:35"><if pos:start="93:13" pos:end="95:33">if <condition pos:start="93:16" pos:end="93:33">(<expr pos:start="93:17" pos:end="93:32"><name pos:start="93:17" pos:end="93:27">last_symbol</name> <operator pos:start="93:29" pos:end="93:30">&gt;=</operator> <literal type="number" pos:start="93:32" pos:end="93:32">0</literal></expr>)</condition><block type="pseudo" pos:start="95:17" pos:end="95:33"><block_content pos:start="95:17" pos:end="95:33">

                <expr_stmt pos:start="95:17" pos:end="95:33"><expr pos:start="95:17" pos:end="95:32"><operator pos:start="95:17" pos:end="95:17">*</operator><name pos:start="95:18" pos:end="95:18">p</name> <operator pos:start="95:20" pos:end="95:20">=</operator> <name pos:start="95:22" pos:end="95:32">last_symbol</name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="97:13" pos:end="99:35">else if <condition pos:start="97:21" pos:end="97:53">(<expr pos:start="97:22" pos:end="97:52"><name pos:start="97:22" pos:end="97:32">last_symbol</name> <operator pos:start="97:34" pos:end="97:35">==</operator> <operator pos:start="97:37" pos:end="97:37">-</operator><literal type="number" pos:start="97:38" pos:end="97:38">1</literal> <operator pos:start="97:40" pos:end="97:41">&amp;&amp;</operator> <name pos:start="97:43" pos:end="97:52">prev_avail</name></expr>)</condition><block type="pseudo" pos:start="99:17" pos:end="99:35"><block_content pos:start="99:17" pos:end="99:35">

                <expr_stmt pos:start="99:17" pos:end="99:35"><expr pos:start="99:17" pos:end="99:34"><operator pos:start="99:17" pos:end="99:17">*</operator><name pos:start="99:18" pos:end="99:18">p</name> <operator pos:start="99:20" pos:end="99:20">=</operator> <operator pos:start="99:22" pos:end="99:22">*</operator><operator pos:start="99:23" pos:end="99:23">(</operator><name pos:start="99:24" pos:end="99:24">p</name> <operator pos:start="99:26" pos:end="99:26">-</operator> <name pos:start="99:28" pos:end="99:33">stride</name><operator pos:start="99:34" pos:end="99:34">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block> while <condition pos:start="101:17" pos:end="101:31">(<expr pos:start="101:18" pos:end="101:30"><operator pos:start="101:18" pos:end="101:19">++</operator><name pos:start="101:20" pos:end="101:20">p</name> <operator pos:start="101:22" pos:end="101:22">&lt;</operator> <name pos:start="101:24" pos:end="101:26">dst</name> <operator pos:start="101:28" pos:end="101:28">+</operator> <name pos:start="101:30" pos:end="101:30">w</name></expr>)</condition>;</do>

        <expr_stmt pos:start="103:9" pos:end="103:28"><expr pos:start="103:9" pos:end="103:27"><name pos:start="103:9" pos:end="103:11">dst</name>       <operator pos:start="103:19" pos:end="103:20">+=</operator> <name pos:start="103:22" pos:end="103:27">stride</name></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:23"><expr pos:start="105:9" pos:end="105:22"><name pos:start="105:9" pos:end="105:18">prev_avail</name> <operator pos:start="105:20" pos:end="105:20">=</operator> <literal type="number" pos:start="105:22" pos:end="105:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="107:13" pos:end="107:17">(<expr pos:start="107:14" pos:end="107:16"><operator pos:start="107:14" pos:end="107:15">--</operator><name pos:start="107:16" pos:end="107:16">h</name></expr>)</condition>;</do>



    <return pos:start="111:5" pos:end="111:13">return <expr pos:start="111:12" pos:end="111:12"><literal type="number" pos:start="111:12" pos:end="111:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
