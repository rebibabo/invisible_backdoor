<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3056.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:17">FWCfgState</name> <modifier pos:start="1:19" pos:end="1:19">*</modifier></type><name pos:start="1:20" pos:end="1:34">bochs_bios_init</name><parameter_list pos:start="1:35" pos:end="1:74">(<parameter pos:start="1:36" pos:end="1:51"><decl pos:start="1:36" pos:end="1:51"><type pos:start="1:36" pos:end="1:51"><name pos:start="1:36" pos:end="1:47">AddressSpace</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:51">as</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:73"><decl pos:start="1:54" pos:end="1:73"><type pos:start="1:54" pos:end="1:73"><name pos:start="1:54" pos:end="1:67">PCMachineState</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:73">pcms</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="117:1">{<block_content pos:start="5:5" pos:end="115:18">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">FWCfgState</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:22">fw_cfg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">uint64_t</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:25">numa_fw_cfg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:25"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:23">CPUArchIdList</name> <modifier pos:start="11:25" pos:end="11:25">*</modifier></type><name pos:start="11:26" pos:end="11:29">cpus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:47"><decl pos:start="13:5" pos:end="13:46"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MachineClass</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:20">mc</name> <init pos:start="13:22" pos:end="13:46">= <expr pos:start="13:24" pos:end="13:46"><call pos:start="13:24" pos:end="13:46"><name pos:start="13:24" pos:end="13:40">MACHINE_GET_CLASS</name><argument_list pos:start="13:41" pos:end="13:46">(<argument pos:start="13:42" pos:end="13:45"><expr pos:start="13:42" pos:end="13:45"><name pos:start="13:42" pos:end="13:45">pcms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:72"><expr pos:start="17:5" pos:end="17:71"><name pos:start="17:5" pos:end="17:10">fw_cfg</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <call pos:start="17:14" pos:end="17:71"><name pos:start="17:14" pos:end="17:31">fw_cfg_init_io_dma</name><argument_list pos:start="17:32" pos:end="17:71">(<argument pos:start="17:33" pos:end="17:46"><expr pos:start="17:33" pos:end="17:46"><name pos:start="17:33" pos:end="17:46">FW_CFG_IO_BASE</name></expr></argument>, <argument pos:start="17:49" pos:end="17:66"><expr pos:start="17:49" pos:end="17:66"><name pos:start="17:49" pos:end="17:62">FW_CFG_IO_BASE</name> <operator pos:start="17:64" pos:end="17:64">+</operator> <literal type="number" pos:start="17:66" pos:end="17:66">4</literal></expr></argument>, <argument pos:start="17:69" pos:end="17:70"><expr pos:start="17:69" pos:end="17:70"><name pos:start="17:69" pos:end="17:70">as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:60"><expr pos:start="19:5" pos:end="19:59"><call pos:start="19:5" pos:end="19:59"><name pos:start="19:5" pos:end="19:18">fw_cfg_add_i16</name><argument_list pos:start="19:19" pos:end="19:59">(<argument pos:start="19:20" pos:end="19:25"><expr pos:start="19:20" pos:end="19:25"><name pos:start="19:20" pos:end="19:25">fw_cfg</name></expr></argument>, <argument pos:start="19:28" pos:end="19:41"><expr pos:start="19:28" pos:end="19:41"><name pos:start="19:28" pos:end="19:41">FW_CFG_NB_CPUS</name></expr></argument>, <argument pos:start="19:44" pos:end="19:58"><expr pos:start="19:44" pos:end="19:58"><name pos:start="19:44" pos:end="19:58"><name pos:start="19:44" pos:end="19:47">pcms</name><operator pos:start="19:48" pos:end="19:49">-&gt;</operator><name pos:start="19:50" pos:end="19:58">boot_cpus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="45:7">/* FW_CFG_MAX_CPUS is a bit confusing/problematic on x86:

     *

     * For machine types prior to 1.8, SeaBIOS needs FW_CFG_MAX_CPUS for

     * building MPTable, ACPI MADT, ACPI CPU hotplug and ACPI SRAT table,

     * that tables are based on xAPIC ID and QEMU&lt;-&gt;SeaBIOS interface

     * for CPU hotplug also uses APIC ID and not "CPU index".

     * This means that FW_CFG_MAX_CPUS is not the "maximum number of CPUs",

     * but the "limit to the APIC ID values SeaBIOS may see".

     *

     * So for compatibility reasons with old BIOSes we are stuck with

     * "etc/max-cpus" actually being apic_id_limit

     */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:75"><expr pos:start="47:5" pos:end="47:74"><call pos:start="47:5" pos:end="47:74"><name pos:start="47:5" pos:end="47:18">fw_cfg_add_i16</name><argument_list pos:start="47:19" pos:end="47:74">(<argument pos:start="47:20" pos:end="47:25"><expr pos:start="47:20" pos:end="47:25"><name pos:start="47:20" pos:end="47:25">fw_cfg</name></expr></argument>, <argument pos:start="47:28" pos:end="47:42"><expr pos:start="47:28" pos:end="47:42"><name pos:start="47:28" pos:end="47:42">FW_CFG_MAX_CPUS</name></expr></argument>, <argument pos:start="47:45" pos:end="47:73"><expr pos:start="47:45" pos:end="47:73"><operator pos:start="47:45" pos:end="47:45">(</operator><name pos:start="47:46" pos:end="47:53">uint16_t</name><operator pos:start="47:54" pos:end="47:54">)</operator><name pos:start="47:55" pos:end="47:73"><name pos:start="47:55" pos:end="47:58">pcms</name><operator pos:start="47:59" pos:end="47:60">-&gt;</operator><name pos:start="47:61" pos:end="47:73">apic_id_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:64"><expr pos:start="49:5" pos:end="49:63"><call pos:start="49:5" pos:end="49:63"><name pos:start="49:5" pos:end="49:18">fw_cfg_add_i64</name><argument_list pos:start="49:19" pos:end="49:63">(<argument pos:start="49:20" pos:end="49:25"><expr pos:start="49:20" pos:end="49:25"><name pos:start="49:20" pos:end="49:25">fw_cfg</name></expr></argument>, <argument pos:start="49:28" pos:end="49:42"><expr pos:start="49:28" pos:end="49:42"><name pos:start="49:28" pos:end="49:42">FW_CFG_RAM_SIZE</name></expr></argument>, <argument pos:start="49:45" pos:end="49:62"><expr pos:start="49:45" pos:end="49:62"><operator pos:start="49:45" pos:end="49:45">(</operator><name pos:start="49:46" pos:end="49:53">uint64_t</name><operator pos:start="49:54" pos:end="49:54">)</operator><name pos:start="49:55" pos:end="49:62">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="53:51"><expr pos:start="51:5" pos:end="53:50"><call pos:start="51:5" pos:end="53:50"><name pos:start="51:5" pos:end="51:20">fw_cfg_add_bytes</name><argument_list pos:start="51:21" pos:end="53:50">(<argument pos:start="51:22" pos:end="51:27"><expr pos:start="51:22" pos:end="51:27"><name pos:start="51:22" pos:end="51:27">fw_cfg</name></expr></argument>, <argument pos:start="51:30" pos:end="51:47"><expr pos:start="51:30" pos:end="51:47"><name pos:start="51:30" pos:end="51:47">FW_CFG_ACPI_TABLES</name></expr></argument>,

                     <argument pos:start="53:22" pos:end="53:32"><expr pos:start="53:22" pos:end="53:32"><name pos:start="53:22" pos:end="53:32">acpi_tables</name></expr></argument>, <argument pos:start="53:35" pos:end="53:49"><expr pos:start="53:35" pos:end="53:49"><name pos:start="53:35" pos:end="53:49">acpi_tables_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:77"><expr pos:start="55:5" pos:end="55:76"><call pos:start="55:5" pos:end="55:76"><name pos:start="55:5" pos:end="55:18">fw_cfg_add_i32</name><argument_list pos:start="55:19" pos:end="55:76">(<argument pos:start="55:20" pos:end="55:25"><expr pos:start="55:20" pos:end="55:25"><name pos:start="55:20" pos:end="55:25">fw_cfg</name></expr></argument>, <argument pos:start="55:28" pos:end="55:47"><expr pos:start="55:28" pos:end="55:47"><name pos:start="55:28" pos:end="55:47">FW_CFG_IRQ0_OVERRIDE</name></expr></argument>, <argument pos:start="55:50" pos:end="55:75"><expr pos:start="55:50" pos:end="55:75"><call pos:start="55:50" pos:end="55:75"><name pos:start="55:50" pos:end="55:73">kvm_allows_irq0_override</name><argument_list pos:start="55:74" pos:end="55:75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="61:58"><expr pos:start="59:5" pos:end="61:57"><call pos:start="59:5" pos:end="61:57"><name pos:start="59:5" pos:end="59:20">fw_cfg_add_bytes</name><argument_list pos:start="59:21" pos:end="61:57">(<argument pos:start="59:22" pos:end="59:27"><expr pos:start="59:22" pos:end="59:27"><name pos:start="59:22" pos:end="59:27">fw_cfg</name></expr></argument>, <argument pos:start="59:30" pos:end="59:46"><expr pos:start="59:30" pos:end="59:46"><name pos:start="59:30" pos:end="59:46">FW_CFG_E820_TABLE</name></expr></argument>,

                     <argument pos:start="61:22" pos:end="61:34"><expr pos:start="61:22" pos:end="61:34"><operator pos:start="61:22" pos:end="61:22">&amp;</operator><name pos:start="61:23" pos:end="61:34">e820_reserve</name></expr></argument>, <argument pos:start="61:37" pos:end="61:56"><expr pos:start="61:37" pos:end="61:56"><sizeof pos:start="61:37" pos:end="61:56">sizeof<argument_list pos:start="61:43" pos:end="61:56">(<argument pos:start="61:44" pos:end="61:55"><expr pos:start="61:44" pos:end="61:55"><name pos:start="61:44" pos:end="61:55">e820_reserve</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="65:62"><expr pos:start="63:5" pos:end="65:61"><call pos:start="63:5" pos:end="65:61"><name pos:start="63:5" pos:end="63:19">fw_cfg_add_file</name><argument_list pos:start="63:20" pos:end="65:61">(<argument pos:start="63:21" pos:end="63:26"><expr pos:start="63:21" pos:end="63:26"><name pos:start="63:21" pos:end="63:26">fw_cfg</name></expr></argument>, <argument pos:start="63:29" pos:end="63:38"><expr pos:start="63:29" pos:end="63:38"><literal type="string" pos:start="63:29" pos:end="63:38">"etc/e820"</literal></expr></argument>, <argument pos:start="63:41" pos:end="63:50"><expr pos:start="63:41" pos:end="63:50"><name pos:start="63:41" pos:end="63:50">e820_table</name></expr></argument>,

                    <argument pos:start="65:21" pos:end="65:60"><expr pos:start="65:21" pos:end="65:60"><sizeof pos:start="65:21" pos:end="65:45">sizeof<argument_list pos:start="65:27" pos:end="65:45">(<argument pos:start="65:28" pos:end="65:44"><expr pos:start="65:28" pos:end="65:44">struct <name pos:start="65:35" pos:end="65:44">e820_entry</name></expr></argument>)</argument_list></sizeof> <operator pos:start="65:47" pos:end="65:47">*</operator> <name pos:start="65:49" pos:end="65:60">e820_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:71"><expr pos:start="69:5" pos:end="69:70"><call pos:start="69:5" pos:end="69:70"><name pos:start="69:5" pos:end="69:20">fw_cfg_add_bytes</name><argument_list pos:start="69:21" pos:end="69:70">(<argument pos:start="69:22" pos:end="69:27"><expr pos:start="69:22" pos:end="69:27"><name pos:start="69:22" pos:end="69:27">fw_cfg</name></expr></argument>, <argument pos:start="69:30" pos:end="69:40"><expr pos:start="69:30" pos:end="69:40"><name pos:start="69:30" pos:end="69:40">FW_CFG_HPET</name></expr></argument>, <argument pos:start="69:43" pos:end="69:51"><expr pos:start="69:43" pos:end="69:51"><operator pos:start="69:43" pos:end="69:43">&amp;</operator><name pos:start="69:44" pos:end="69:51">hpet_cfg</name></expr></argument>, <argument pos:start="69:54" pos:end="69:69"><expr pos:start="69:54" pos:end="69:69"><sizeof pos:start="69:54" pos:end="69:69">sizeof<argument_list pos:start="69:60" pos:end="69:69">(<argument pos:start="69:61" pos:end="69:68"><expr pos:start="69:61" pos:end="69:68"><name pos:start="69:61" pos:end="69:68">hpet_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="71:5" pos:end="77:7">/* allocate memory for the NUMA channel: one (64bit) word for the number

     * of nodes, one word for each VCPU-&gt;node and one word for each node to

     * hold the amount of memory.

     */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:76"><expr pos:start="79:5" pos:end="79:75"><name pos:start="79:5" pos:end="79:15">numa_fw_cfg</name> <operator pos:start="79:17" pos:end="79:17">=</operator> <call pos:start="79:19" pos:end="79:75"><name pos:start="79:19" pos:end="79:24">g_new0</name><argument_list pos:start="79:25" pos:end="79:75">(<argument pos:start="79:26" pos:end="79:33"><expr pos:start="79:26" pos:end="79:33"><name pos:start="79:26" pos:end="79:33">uint64_t</name></expr></argument>, <argument pos:start="79:36" pos:end="79:74"><expr pos:start="79:36" pos:end="79:74"><literal type="number" pos:start="79:36" pos:end="79:38">1</literal> <operator pos:start="79:38" pos:end="79:38">+</operator> <name pos:start="79:40" pos:end="79:58"><name pos:start="79:40" pos:end="79:43">pcms</name><operator pos:start="79:44" pos:end="79:45">-&gt;</operator><name pos:start="79:46" pos:end="79:58">apic_id_limit</name></name> <operator pos:start="79:60" pos:end="79:60">+</operator> <name pos:start="79:62" pos:end="79:74">nb_numa_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:48"><expr pos:start="81:5" pos:end="81:47"><name pos:start="81:5" pos:end="81:18"><name pos:start="81:5" pos:end="81:15">numa_fw_cfg</name><index pos:start="81:16" pos:end="81:18">[<expr pos:start="81:17" pos:end="81:17"><literal type="number" pos:start="81:17" pos:end="81:17">0</literal></expr>]</index></name> <operator pos:start="81:20" pos:end="81:20">=</operator> <call pos:start="81:22" pos:end="81:47"><name pos:start="81:22" pos:end="81:32">cpu_to_le64</name><argument_list pos:start="81:33" pos:end="81:47">(<argument pos:start="81:34" pos:end="81:46"><expr pos:start="81:34" pos:end="81:46"><name pos:start="81:34" pos:end="81:46">nb_numa_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:52"><expr pos:start="83:5" pos:end="83:51"><name pos:start="83:5" pos:end="83:8">cpus</name> <operator pos:start="83:10" pos:end="83:10">=</operator> <call pos:start="83:12" pos:end="83:51"><name pos:start="83:12" pos:end="83:36"><name pos:start="83:12" pos:end="83:13">mc</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:36">possible_cpu_arch_ids</name></name><argument_list pos:start="83:37" pos:end="83:51">(<argument pos:start="83:38" pos:end="83:50"><expr pos:start="83:38" pos:end="83:50"><call pos:start="83:38" pos:end="83:50"><name pos:start="83:38" pos:end="83:44">MACHINE</name><argument_list pos:start="83:45" pos:end="83:50">(<argument pos:start="83:46" pos:end="83:49"><expr pos:start="83:46" pos:end="83:49"><name pos:start="83:46" pos:end="83:49">pcms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="85:5" pos:end="97:5">for <control pos:start="85:9" pos:end="85:35">(<init pos:start="85:10" pos:end="85:15"><expr pos:start="85:10" pos:end="85:14"><name pos:start="85:10" pos:end="85:10">i</name> <operator pos:start="85:12" pos:end="85:12">=</operator> <literal type="number" pos:start="85:14" pos:end="85:14">0</literal></expr>;</init> <condition pos:start="85:17" pos:end="85:30"><expr pos:start="85:17" pos:end="85:29"><name pos:start="85:17" pos:end="85:17">i</name> <operator pos:start="85:19" pos:end="85:19">&lt;</operator> <name pos:start="85:21" pos:end="85:29"><name pos:start="85:21" pos:end="85:24">cpus</name><operator pos:start="85:25" pos:end="85:26">-&gt;</operator><name pos:start="85:27" pos:end="85:29">len</name></name></expr>;</condition> <incr pos:start="85:32" pos:end="85:34"><expr pos:start="85:32" pos:end="85:34"><name pos:start="85:32" pos:end="85:32">i</name><operator pos:start="85:33" pos:end="85:34">++</operator></expr></incr>)</control> <block pos:start="85:37" pos:end="97:5">{<block_content pos:start="87:9" pos:end="95:9">

        <decl_stmt pos:start="87:9" pos:end="87:53"><decl pos:start="87:9" pos:end="87:52"><type pos:start="87:9" pos:end="87:20"><name pos:start="87:9" pos:end="87:16">unsigned</name> <name pos:start="87:18" pos:end="87:20">int</name></type> <name pos:start="87:22" pos:end="87:28">apic_id</name> <init pos:start="87:30" pos:end="87:52">= <expr pos:start="87:32" pos:end="87:52"><name pos:start="87:32" pos:end="87:44"><name pos:start="87:32" pos:end="87:35">cpus</name><operator pos:start="87:36" pos:end="87:37">-&gt;</operator><name pos:start="87:38" pos:end="87:41">cpus</name><index pos:start="87:42" pos:end="87:44">[<expr pos:start="87:43" pos:end="87:43"><name pos:start="87:43" pos:end="87:43">i</name></expr>]</index></name><operator pos:start="87:45" pos:end="87:45">.</operator><name pos:start="87:46" pos:end="87:52">arch_id</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:46"><expr pos:start="89:9" pos:end="89:45"><call pos:start="89:9" pos:end="89:45"><name pos:start="89:9" pos:end="89:14">assert</name><argument_list pos:start="89:15" pos:end="89:45">(<argument pos:start="89:16" pos:end="89:44"><expr pos:start="89:16" pos:end="89:44"><name pos:start="89:16" pos:end="89:22">apic_id</name> <operator pos:start="89:24" pos:end="89:24">&lt;</operator> <name pos:start="89:26" pos:end="89:44"><name pos:start="89:26" pos:end="89:29">pcms</name><operator pos:start="89:30" pos:end="89:31">-&gt;</operator><name pos:start="89:32" pos:end="89:44">apic_id_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="91:9" pos:end="95:9"><if pos:start="91:9" pos:end="95:9">if <condition pos:start="91:12" pos:end="91:44">(<expr pos:start="91:13" pos:end="91:43"><name pos:start="91:13" pos:end="91:25"><name pos:start="91:13" pos:end="91:16">cpus</name><operator pos:start="91:17" pos:end="91:18">-&gt;</operator><name pos:start="91:19" pos:end="91:22">cpus</name><index pos:start="91:23" pos:end="91:25">[<expr pos:start="91:24" pos:end="91:24"><name pos:start="91:24" pos:end="91:24">i</name></expr>]</index></name><operator pos:start="91:26" pos:end="91:26">.</operator><name pos:start="91:27" pos:end="91:43"><name pos:start="91:27" pos:end="91:31">props</name><operator pos:start="91:32" pos:end="91:32">.</operator><name pos:start="91:33" pos:end="91:43">has_node_id</name></name></expr>)</condition> <block pos:start="91:46" pos:end="95:9">{<block_content pos:start="93:13" pos:end="93:80">

            <expr_stmt pos:start="93:13" pos:end="93:80"><expr pos:start="93:13" pos:end="93:79"><name pos:start="93:13" pos:end="93:36"><name pos:start="93:13" pos:end="93:23">numa_fw_cfg</name><index pos:start="93:24" pos:end="93:36">[<expr pos:start="93:25" pos:end="93:35"><name pos:start="93:25" pos:end="93:31">apic_id</name> <operator pos:start="93:33" pos:end="93:33">+</operator> <literal type="number" pos:start="93:35" pos:end="93:35">1</literal></expr>]</index></name> <operator pos:start="93:38" pos:end="93:38">=</operator> <call pos:start="93:40" pos:end="93:79"><name pos:start="93:40" pos:end="93:50">cpu_to_le64</name><argument_list pos:start="93:51" pos:end="93:79">(<argument pos:start="93:52" pos:end="93:78"><expr pos:start="93:52" pos:end="93:78"><name pos:start="93:52" pos:end="93:64"><name pos:start="93:52" pos:end="93:55">cpus</name><operator pos:start="93:56" pos:end="93:57">-&gt;</operator><name pos:start="93:58" pos:end="93:61">cpus</name><index pos:start="93:62" pos:end="93:64">[<expr pos:start="93:63" pos:end="93:63"><name pos:start="93:63" pos:end="93:63">i</name></expr>]</index></name><operator pos:start="93:65" pos:end="93:65">.</operator><name pos:start="93:66" pos:end="93:78"><name pos:start="93:66" pos:end="93:70">props</name><operator pos:start="93:71" pos:end="93:71">.</operator><name pos:start="93:72" pos:end="93:78">node_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <for pos:start="99:5" pos:end="105:5">for <control pos:start="99:9" pos:end="99:39">(<init pos:start="99:10" pos:end="99:15"><expr pos:start="99:10" pos:end="99:14"><name pos:start="99:10" pos:end="99:10">i</name> <operator pos:start="99:12" pos:end="99:12">=</operator> <literal type="number" pos:start="99:14" pos:end="99:14">0</literal></expr>;</init> <condition pos:start="99:17" pos:end="99:34"><expr pos:start="99:17" pos:end="99:33"><name pos:start="99:17" pos:end="99:17">i</name> <operator pos:start="99:19" pos:end="99:19">&lt;</operator> <name pos:start="99:21" pos:end="99:33">nb_numa_nodes</name></expr>;</condition> <incr pos:start="99:36" pos:end="99:38"><expr pos:start="99:36" pos:end="99:38"><name pos:start="99:36" pos:end="99:36">i</name><operator pos:start="99:37" pos:end="99:38">++</operator></expr></incr>)</control> <block pos:start="99:41" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:47">

        <expr_stmt pos:start="101:9" pos:end="103:47"><expr pos:start="101:9" pos:end="103:46"><name pos:start="101:9" pos:end="101:48"><name pos:start="101:9" pos:end="101:19">numa_fw_cfg</name><index pos:start="101:20" pos:end="101:48">[<expr pos:start="101:21" pos:end="101:47"><name pos:start="101:21" pos:end="101:39"><name pos:start="101:21" pos:end="101:24">pcms</name><operator pos:start="101:25" pos:end="101:26">-&gt;</operator><name pos:start="101:27" pos:end="101:39">apic_id_limit</name></name> <operator pos:start="101:41" pos:end="101:41">+</operator> <literal type="number" pos:start="101:43" pos:end="101:43">1</literal> <operator pos:start="101:45" pos:end="101:45">+</operator> <name pos:start="101:47" pos:end="101:47">i</name></expr>]</index></name> <operator pos:start="101:50" pos:end="101:50">=</operator>

            <call pos:start="103:13" pos:end="103:46"><name pos:start="103:13" pos:end="103:23">cpu_to_le64</name><argument_list pos:start="103:24" pos:end="103:46">(<argument pos:start="103:25" pos:end="103:45"><expr pos:start="103:25" pos:end="103:45"><name pos:start="103:25" pos:end="103:36"><name pos:start="103:25" pos:end="103:33">numa_info</name><index pos:start="103:34" pos:end="103:36">[<expr pos:start="103:35" pos:end="103:35"><name pos:start="103:35" pos:end="103:35">i</name></expr>]</index></name><operator pos:start="103:37" pos:end="103:37">.</operator><name pos:start="103:38" pos:end="103:45">node_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="107:5" pos:end="111:43"><expr pos:start="107:5" pos:end="111:42"><call pos:start="107:5" pos:end="111:42"><name pos:start="107:5" pos:end="107:20">fw_cfg_add_bytes</name><argument_list pos:start="107:21" pos:end="111:42">(<argument pos:start="107:22" pos:end="107:27"><expr pos:start="107:22" pos:end="107:27"><name pos:start="107:22" pos:end="107:27">fw_cfg</name></expr></argument>, <argument pos:start="107:30" pos:end="107:40"><expr pos:start="107:30" pos:end="107:40"><name pos:start="107:30" pos:end="107:40">FW_CFG_NUMA</name></expr></argument>, <argument pos:start="107:43" pos:end="107:53"><expr pos:start="107:43" pos:end="107:53"><name pos:start="107:43" pos:end="107:53">numa_fw_cfg</name></expr></argument>,

                     <argument pos:start="109:22" pos:end="111:41"><expr pos:start="109:22" pos:end="111:41"><operator pos:start="109:22" pos:end="109:22">(</operator><literal type="number" pos:start="109:23" pos:end="109:25">1</literal> <operator pos:start="109:25" pos:end="109:25">+</operator> <name pos:start="109:27" pos:end="109:45"><name pos:start="109:27" pos:end="109:30">pcms</name><operator pos:start="109:31" pos:end="109:32">-&gt;</operator><name pos:start="109:33" pos:end="109:45">apic_id_limit</name></name> <operator pos:start="109:47" pos:end="109:47">+</operator> <name pos:start="109:49" pos:end="109:61">nb_numa_nodes</name><operator pos:start="109:62" pos:end="109:62">)</operator> <operator pos:start="109:64" pos:end="109:64">*</operator>

                     <sizeof pos:start="111:22" pos:end="111:41">sizeof<argument_list pos:start="111:28" pos:end="111:41">(<argument pos:start="111:29" pos:end="111:40"><expr pos:start="111:29" pos:end="111:40"><operator pos:start="111:29" pos:end="111:29">*</operator><name pos:start="111:30" pos:end="111:40">numa_fw_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="115:5" pos:end="115:18">return <expr pos:start="115:12" pos:end="115:17"><name pos:start="115:12" pos:end="115:17">fw_cfg</name></expr>;</return>

</block_content>}</block></function>
</unit>
