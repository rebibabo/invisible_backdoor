<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14666.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">coroutine_fn</name> <name pos:start="1:21" pos:end="1:24">void</name></type> <name pos:start="1:26" pos:end="1:45">nbd_read_reply_entry</name><parameter_list pos:start="1:46" pos:end="1:59">(<parameter pos:start="1:47" pos:end="1:58"><decl pos:start="1:47" pos:end="1:58"><type pos:start="1:47" pos:end="1:52"><name pos:start="1:47" pos:end="1:50">void</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:58">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:28">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">NBDClientSession</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:23">s</name> <init pos:start="5:25" pos:end="5:32">= <expr pos:start="5:27" pos:end="5:32"><name pos:start="5:27" pos:end="5:32">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name> <init pos:start="9:13" pos:end="9:15">= <expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:20">local_err</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>



    <while pos:start="15:5" pos:end="87:5">while <condition pos:start="15:11" pos:end="15:20">(<expr pos:start="15:12" pos:end="15:19"><operator pos:start="15:12" pos:end="15:12">!</operator><name pos:start="15:13" pos:end="15:19"><name pos:start="15:13" pos:end="15:13">s</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:19">quit</name></name></expr>)</condition> <block pos:start="15:22" pos:end="87:5">{<block_content pos:start="17:9" pos:end="85:31">

        <expr_stmt pos:start="17:9" pos:end="17:37"><expr pos:start="17:9" pos:end="17:36"><call pos:start="17:9" pos:end="17:36"><name pos:start="17:9" pos:end="17:14">assert</name><argument_list pos:start="17:15" pos:end="17:36">(<argument pos:start="17:16" pos:end="17:35"><expr pos:start="17:16" pos:end="17:35"><name pos:start="17:16" pos:end="17:30"><name pos:start="17:16" pos:end="17:16">s</name><operator pos:start="17:17" pos:end="17:18">-&gt;</operator><name pos:start="17:19" pos:end="17:23">reply</name><operator pos:start="17:24" pos:end="17:24">.</operator><name pos:start="17:25" pos:end="17:30">handle</name></name> <operator pos:start="17:32" pos:end="17:33">==</operator> <literal type="number" pos:start="17:35" pos:end="17:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:63"><expr pos:start="19:9" pos:end="19:62"><name pos:start="19:9" pos:end="19:11">ret</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:62"><name pos:start="19:15" pos:end="19:31">nbd_receive_reply</name><argument_list pos:start="19:32" pos:end="19:62">(<argument pos:start="19:33" pos:end="19:38"><expr pos:start="19:33" pos:end="19:38"><name pos:start="19:33" pos:end="19:38"><name pos:start="19:33" pos:end="19:33">s</name><operator pos:start="19:34" pos:end="19:35">-&gt;</operator><name pos:start="19:36" pos:end="19:38">ioc</name></name></expr></argument>, <argument pos:start="19:41" pos:end="19:49"><expr pos:start="19:41" pos:end="19:49"><operator pos:start="19:41" pos:end="19:41">&amp;</operator><name pos:start="19:42" pos:end="19:49"><name pos:start="19:42" pos:end="19:42">s</name><operator pos:start="19:43" pos:end="19:44">-&gt;</operator><name pos:start="19:45" pos:end="19:49">reply</name></name></expr></argument>, <argument pos:start="19:52" pos:end="19:61"><expr pos:start="19:52" pos:end="19:61"><operator pos:start="19:52" pos:end="19:52">&amp;</operator><name pos:start="19:53" pos:end="19:61">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="25:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:20">(<expr pos:start="21:13" pos:end="21:19"><name pos:start="21:13" pos:end="21:15">ret</name> <operator pos:start="21:17" pos:end="21:17">&lt;</operator> <literal type="number" pos:start="21:19" pos:end="21:19">0</literal></expr>)</condition> <block pos:start="21:22" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:40">

            <expr_stmt pos:start="23:13" pos:end="23:40"><expr pos:start="23:13" pos:end="23:39"><call pos:start="23:13" pos:end="23:39"><name pos:start="23:13" pos:end="23:28">error_report_err</name><argument_list pos:start="23:29" pos:end="23:39">(<argument pos:start="23:30" pos:end="23:38"><expr pos:start="23:30" pos:end="23:38"><name pos:start="23:30" pos:end="23:38">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:21">(<expr pos:start="27:13" pos:end="27:20"><name pos:start="27:13" pos:end="27:15">ret</name> <operator pos:start="27:17" pos:end="27:18">&lt;=</operator> <literal type="number" pos:start="27:20" pos:end="27:20">0</literal></expr>)</condition> <block pos:start="27:23" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:18">

            <break pos:start="29:13" pos:end="29:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="35:9" pos:end="41:11">/* There's no need for a mutex on the receive side, because the

         * handler acts as a synchronization point and ensures that only

         * one coroutine is called until the reply finishes.

         */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:48"><expr pos:start="43:9" pos:end="43:47"><name pos:start="43:9" pos:end="43:9">i</name> <operator pos:start="43:11" pos:end="43:11">=</operator> <call pos:start="43:13" pos:end="43:47"><name pos:start="43:13" pos:end="43:27">HANDLE_TO_INDEX</name><argument_list pos:start="43:28" pos:end="43:47">(<argument pos:start="43:29" pos:end="43:29"><expr pos:start="43:29" pos:end="43:29"><name pos:start="43:29" pos:end="43:29">s</name></expr></argument>, <argument pos:start="43:32" pos:end="43:46"><expr pos:start="43:32" pos:end="43:46"><name pos:start="43:32" pos:end="43:46"><name pos:start="43:32" pos:end="43:32">s</name><operator pos:start="43:33" pos:end="43:34">-&gt;</operator><name pos:start="43:35" pos:end="43:39">reply</name><operator pos:start="43:40" pos:end="43:40">.</operator><name pos:start="43:41" pos:end="43:46">handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="57:9"><if pos:start="45:9" pos:end="57:9">if <condition pos:start="45:12" pos:end="51:78">(<expr pos:start="45:13" pos:end="51:77"><name pos:start="45:13" pos:end="45:13">i</name> <operator pos:start="45:15" pos:end="45:16">&gt;=</operator> <name pos:start="45:18" pos:end="45:33">MAX_NBD_REQUESTS</name> <operator pos:start="45:35" pos:end="45:36">||</operator>

            <operator pos:start="47:13" pos:end="47:13">!</operator><name pos:start="47:14" pos:end="47:27"><name pos:start="47:14" pos:end="47:14">s</name><operator pos:start="47:15" pos:end="47:16">-&gt;</operator><name pos:start="47:17" pos:end="47:24">requests</name><index pos:start="47:25" pos:end="47:27">[<expr pos:start="47:26" pos:end="47:26"><name pos:start="47:26" pos:end="47:26">i</name></expr>]</index></name><operator pos:start="47:28" pos:end="47:28">.</operator><name pos:start="47:29" pos:end="47:37">coroutine</name> <operator pos:start="47:39" pos:end="47:40">||</operator>

            <operator pos:start="49:13" pos:end="49:13">!</operator><name pos:start="49:14" pos:end="49:27"><name pos:start="49:14" pos:end="49:14">s</name><operator pos:start="49:15" pos:end="49:16">-&gt;</operator><name pos:start="49:17" pos:end="49:24">requests</name><index pos:start="49:25" pos:end="49:27">[<expr pos:start="49:26" pos:end="49:26"><name pos:start="49:26" pos:end="49:26">i</name></expr>]</index></name><operator pos:start="49:28" pos:end="49:28">.</operator><name pos:start="49:29" pos:end="49:37">receiving</name> <operator pos:start="49:39" pos:end="49:40">||</operator>

            <operator pos:start="51:13" pos:end="51:13">(</operator><call pos:start="51:14" pos:end="51:47"><name pos:start="51:14" pos:end="51:36">nbd_reply_is_structured</name><argument_list pos:start="51:37" pos:end="51:47">(<argument pos:start="51:38" pos:end="51:46"><expr pos:start="51:38" pos:end="51:46"><operator pos:start="51:38" pos:end="51:38">&amp;</operator><name pos:start="51:39" pos:end="51:46"><name pos:start="51:39" pos:end="51:39">s</name><operator pos:start="51:40" pos:end="51:41">-&gt;</operator><name pos:start="51:42" pos:end="51:46">reply</name></name></expr></argument>)</argument_list></call> <operator pos:start="51:49" pos:end="51:50">&amp;&amp;</operator> <operator pos:start="51:52" pos:end="51:52">!</operator><name pos:start="51:53" pos:end="51:76"><name pos:start="51:53" pos:end="51:53">s</name><operator pos:start="51:54" pos:end="51:55">-&gt;</operator><name pos:start="51:56" pos:end="51:59">info</name><operator pos:start="51:60" pos:end="51:60">.</operator><name pos:start="51:61" pos:end="51:76">structured_reply</name></name><operator pos:start="51:77" pos:end="51:77">)</operator></expr>)</condition>

        <block pos:start="53:9" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:18">

            <break pos:start="55:13" pos:end="55:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="61:9" pos:end="81:11">/* We're woken up again by the request itself.  Note that there

         * is no race between yielding and reentering read_reply_co.  This

         * is because:

         *

         * - if the request runs on the same AioContext, it is only

         *   entered after we yield

         *

         * - if the request runs on a different AioContext, reentering

         *   read_reply_co happens through a bottom half, which can only

         *   run after we yield.

         */</comment>

        <expr_stmt pos:start="83:9" pos:end="83:46"><expr pos:start="83:9" pos:end="83:45"><call pos:start="83:9" pos:end="83:45"><name pos:start="83:9" pos:end="83:19">aio_co_wake</name><argument_list pos:start="83:20" pos:end="83:45">(<argument pos:start="83:21" pos:end="83:44"><expr pos:start="83:21" pos:end="83:44"><name pos:start="83:21" pos:end="83:34"><name pos:start="83:21" pos:end="83:21">s</name><operator pos:start="83:22" pos:end="83:23">-&gt;</operator><name pos:start="83:24" pos:end="83:31">requests</name><index pos:start="83:32" pos:end="83:34">[<expr pos:start="83:33" pos:end="83:33"><name pos:start="83:33" pos:end="83:33">i</name></expr>]</index></name><operator pos:start="83:35" pos:end="83:35">.</operator><name pos:start="83:36" pos:end="83:44">coroutine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:31"><expr pos:start="85:9" pos:end="85:30"><call pos:start="85:9" pos:end="85:30"><name pos:start="85:9" pos:end="85:28">qemu_coroutine_yield</name><argument_list pos:start="85:29" pos:end="85:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="91:5" pos:end="91:19"><expr pos:start="91:5" pos:end="91:18"><name pos:start="91:5" pos:end="91:11"><name pos:start="91:5" pos:end="91:5">s</name><operator pos:start="91:6" pos:end="91:7">-&gt;</operator><name pos:start="91:8" pos:end="91:11">quit</name></name> <operator pos:start="91:13" pos:end="91:13">=</operator> <name pos:start="91:15" pos:end="91:18">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:36"><expr pos:start="93:5" pos:end="93:35"><call pos:start="93:5" pos:end="93:35"><name pos:start="93:5" pos:end="93:32">nbd_recv_coroutines_wake_all</name><argument_list pos:start="93:33" pos:end="93:35">(<argument pos:start="93:34" pos:end="93:34"><expr pos:start="93:34" pos:end="93:34"><name pos:start="93:34" pos:end="93:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:28"><expr pos:start="95:5" pos:end="95:27"><name pos:start="95:5" pos:end="95:20"><name pos:start="95:5" pos:end="95:5">s</name><operator pos:start="95:6" pos:end="95:7">-&gt;</operator><name pos:start="95:8" pos:end="95:20">read_reply_co</name></name> <operator pos:start="95:22" pos:end="95:22">=</operator> <name pos:start="95:24" pos:end="95:27">NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
