<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11422.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:27">hap_init</name><parameter_list pos:start="1:28" pos:end="1:50">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:44"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="141:1">{<block_content pos:start="5:5" pos:end="139:13">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">HapContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">ctx</name> <init pos:start="5:21" pos:end="5:38">= <expr pos:start="5:23" pos:end="5:38"><name pos:start="5:23" pos:end="5:38"><name pos:start="5:23" pos:end="5:27">avctx</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">ratio</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:29">corrected_chunk_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:73"><decl pos:start="11:5" pos:end="11:72"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name> <init pos:start="11:13" pos:end="11:72">= <expr pos:start="11:15" pos:end="11:72"><call pos:start="11:15" pos:end="11:72"><name pos:start="11:15" pos:end="11:33">av_image_check_size</name><argument_list pos:start="11:34" pos:end="11:72">(<argument pos:start="11:35" pos:end="11:46"><expr pos:start="11:35" pos:end="11:46"><name pos:start="11:35" pos:end="11:46"><name pos:start="11:35" pos:end="11:39">avctx</name><operator pos:start="11:40" pos:end="11:41">-&gt;</operator><name pos:start="11:42" pos:end="11:46">width</name></name></expr></argument>, <argument pos:start="11:49" pos:end="11:61"><expr pos:start="11:49" pos:end="11:61"><name pos:start="11:49" pos:end="11:61"><name pos:start="11:49" pos:end="11:53">avctx</name><operator pos:start="11:54" pos:end="11:55">-&gt;</operator><name pos:start="11:56" pos:end="11:61">height</name></name></expr></argument>, <argument pos:start="11:64" pos:end="11:64"><expr pos:start="11:64" pos:end="11:64"><literal type="number" pos:start="11:64" pos:end="11:64">0</literal></expr></argument>, <argument pos:start="11:67" pos:end="11:71"><expr pos:start="11:67" pos:end="11:71"><name pos:start="11:67" pos:end="11:71">avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:16">(<expr pos:start="15:9" pos:end="15:15"><name pos:start="15:9" pos:end="15:11">ret</name> <operator pos:start="15:13" pos:end="15:13">&lt;</operator> <literal type="number" pos:start="15:15" pos:end="15:15">0</literal></expr>)</condition> <block pos:start="15:18" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:19">

        <expr_stmt pos:start="17:9" pos:end="19:44"><expr pos:start="17:9" pos:end="19:43"><call pos:start="17:9" pos:end="19:43"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="19:43">(<argument pos:start="17:16" pos:end="17:20"><expr pos:start="17:16" pos:end="17:20"><name pos:start="17:16" pos:end="17:20">avctx</name></expr></argument>, <argument pos:start="17:23" pos:end="17:34"><expr pos:start="17:23" pos:end="17:34"><name pos:start="17:23" pos:end="17:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="17:37" pos:end="17:65"><expr pos:start="17:37" pos:end="17:65"><literal type="string" pos:start="17:37" pos:end="17:65">"Invalid video size %dx%d.\n"</literal></expr></argument>,

               <argument pos:start="19:16" pos:end="19:27"><expr pos:start="19:16" pos:end="19:27"><name pos:start="19:16" pos:end="19:27"><name pos:start="19:16" pos:end="19:20">avctx</name><operator pos:start="19:21" pos:end="19:22">-&gt;</operator><name pos:start="19:23" pos:end="19:27">width</name></name></expr></argument>, <argument pos:start="19:30" pos:end="19:42"><expr pos:start="19:30" pos:end="19:42"><name pos:start="19:30" pos:end="19:42"><name pos:start="19:30" pos:end="19:34">avctx</name><operator pos:start="19:35" pos:end="19:36">-&gt;</operator><name pos:start="19:37" pos:end="19:42">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:19">return <expr pos:start="21:16" pos:end="21:18"><name pos:start="21:16" pos:end="21:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:46">(<expr pos:start="27:9" pos:end="27:45"><name pos:start="27:9" pos:end="27:20"><name pos:start="27:9" pos:end="27:13">avctx</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:20">width</name></name> <operator pos:start="27:22" pos:end="27:22">%</operator> <literal type="number" pos:start="27:24" pos:end="27:24">4</literal> <operator pos:start="27:26" pos:end="27:27">||</operator> <name pos:start="27:29" pos:end="27:41"><name pos:start="27:29" pos:end="27:33">avctx</name><operator pos:start="27:34" pos:end="27:35">-&gt;</operator><name pos:start="27:36" pos:end="27:41">height</name></name> <operator pos:start="27:43" pos:end="27:43">%</operator> <literal type="number" pos:start="27:45" pos:end="27:45">4</literal></expr>)</condition> <block pos:start="27:48" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:35">

        <expr_stmt pos:start="29:9" pos:end="31:44"><expr pos:start="29:9" pos:end="31:43"><call pos:start="29:9" pos:end="31:43"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="31:43">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:37" pos:end="29:78"><expr pos:start="29:37" pos:end="29:78"><literal type="string" pos:start="29:37" pos:end="29:78">"Video size %dx%d is not multiple of 4.\n"</literal></expr></argument>,

               <argument pos:start="31:16" pos:end="31:27"><expr pos:start="31:16" pos:end="31:27"><name pos:start="31:16" pos:end="31:27"><name pos:start="31:16" pos:end="31:20">avctx</name><operator pos:start="31:21" pos:end="31:22">-&gt;</operator><name pos:start="31:23" pos:end="31:27">width</name></name></expr></argument>, <argument pos:start="31:30" pos:end="31:42"><expr pos:start="31:30" pos:end="31:42"><name pos:start="31:30" pos:end="31:42"><name pos:start="31:30" pos:end="31:34">avctx</name><operator pos:start="31:35" pos:end="31:36">-&gt;</operator><name pos:start="31:37" pos:end="31:42">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:35">return <expr pos:start="33:16" pos:end="33:34"><name pos:start="33:16" pos:end="33:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:38"><expr pos:start="39:5" pos:end="39:37"><call pos:start="39:5" pos:end="39:37"><name pos:start="39:5" pos:end="39:25">ff_texturedspenc_init</name><argument_list pos:start="39:26" pos:end="39:37">(<argument pos:start="39:27" pos:end="39:36"><expr pos:start="39:27" pos:end="39:36"><operator pos:start="39:27" pos:end="39:27">&amp;</operator><name pos:start="39:28" pos:end="39:36"><name pos:start="39:28" pos:end="39:30">ctx</name><operator pos:start="39:31" pos:end="39:32">-&gt;</operator><name pos:start="39:33" pos:end="39:36">dxtc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="43:5" pos:end="87:5">switch <condition pos:start="43:12" pos:end="43:29">(<expr pos:start="43:13" pos:end="43:28"><name pos:start="43:13" pos:end="43:28"><name pos:start="43:13" pos:end="43:15">ctx</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:28">opt_tex_fmt</name></name></expr>)</condition> <block pos:start="43:31" pos:end="87:5">{<block_content pos:start="45:5" pos:end="85:35">

    <case pos:start="45:5" pos:end="45:25">case <expr pos:start="45:10" pos:end="45:24"><name pos:start="45:10" pos:end="45:24">HAP_FMT_RGBDXT1</name></expr>:</case>

        <expr_stmt pos:start="47:9" pos:end="47:18"><expr pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:13">ratio</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <literal type="number" pos:start="47:17" pos:end="47:17">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:53"><expr pos:start="49:9" pos:end="49:52"><name pos:start="49:9" pos:end="49:24"><name pos:start="49:9" pos:end="49:13">avctx</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:24">codec_tag</name></name> <operator pos:start="49:26" pos:end="49:26">=</operator> <call pos:start="49:28" pos:end="49:52"><name pos:start="49:28" pos:end="49:32">MKTAG</name><argument_list pos:start="49:33" pos:end="49:52">(<argument pos:start="49:34" pos:end="49:36"><expr pos:start="49:34" pos:end="49:36"><literal type="char" pos:start="49:34" pos:end="49:36">'H'</literal></expr></argument>, <argument pos:start="49:39" pos:end="49:41"><expr pos:start="49:39" pos:end="49:41"><literal type="char" pos:start="49:39" pos:end="49:41">'a'</literal></expr></argument>, <argument pos:start="49:44" pos:end="49:46"><expr pos:start="49:44" pos:end="49:46"><literal type="char" pos:start="49:44" pos:end="49:46">'p'</literal></expr></argument>, <argument pos:start="49:49" pos:end="49:51"><expr pos:start="49:49" pos:end="49:51"><literal type="char" pos:start="49:49" pos:end="49:51">'1'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:42"><expr pos:start="51:9" pos:end="51:41"><name pos:start="51:9" pos:end="51:36"><name pos:start="51:9" pos:end="51:13">avctx</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:36">bits_per_coded_sample</name></name> <operator pos:start="51:38" pos:end="51:38">=</operator> <literal type="number" pos:start="51:40" pos:end="51:41">24</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:44"><expr pos:start="53:9" pos:end="53:43"><name pos:start="53:9" pos:end="53:20"><name pos:start="53:9" pos:end="53:11">ctx</name><operator pos:start="53:12" pos:end="53:13">-&gt;</operator><name pos:start="53:14" pos:end="53:20">tex_fun</name></name> <operator pos:start="53:22" pos:end="53:22">=</operator> <name pos:start="53:24" pos:end="53:43"><name pos:start="53:24" pos:end="53:26">ctx</name><operator pos:start="53:27" pos:end="53:28">-&gt;</operator><name pos:start="53:29" pos:end="53:32">dxtc</name><operator pos:start="53:33" pos:end="53:33">.</operator><name pos:start="53:34" pos:end="53:43">dxt1_block</name></name></expr>;</expr_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    <case pos:start="57:5" pos:end="57:26">case <expr pos:start="57:10" pos:end="57:25"><name pos:start="57:10" pos:end="57:25">HAP_FMT_RGBADXT5</name></expr>:</case>

        <expr_stmt pos:start="59:9" pos:end="59:18"><expr pos:start="59:9" pos:end="59:17"><name pos:start="59:9" pos:end="59:13">ratio</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <literal type="number" pos:start="59:17" pos:end="59:17">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:53"><expr pos:start="61:9" pos:end="61:52"><name pos:start="61:9" pos:end="61:24"><name pos:start="61:9" pos:end="61:13">avctx</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:24">codec_tag</name></name> <operator pos:start="61:26" pos:end="61:26">=</operator> <call pos:start="61:28" pos:end="61:52"><name pos:start="61:28" pos:end="61:32">MKTAG</name><argument_list pos:start="61:33" pos:end="61:52">(<argument pos:start="61:34" pos:end="61:36"><expr pos:start="61:34" pos:end="61:36"><literal type="char" pos:start="61:34" pos:end="61:36">'H'</literal></expr></argument>, <argument pos:start="61:39" pos:end="61:41"><expr pos:start="61:39" pos:end="61:41"><literal type="char" pos:start="61:39" pos:end="61:41">'a'</literal></expr></argument>, <argument pos:start="61:44" pos:end="61:46"><expr pos:start="61:44" pos:end="61:46"><literal type="char" pos:start="61:44" pos:end="61:46">'p'</literal></expr></argument>, <argument pos:start="61:49" pos:end="61:51"><expr pos:start="61:49" pos:end="61:51"><literal type="char" pos:start="61:49" pos:end="61:51">'5'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:42"><expr pos:start="63:9" pos:end="63:41"><name pos:start="63:9" pos:end="63:36"><name pos:start="63:9" pos:end="63:13">avctx</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:36">bits_per_coded_sample</name></name> <operator pos:start="63:38" pos:end="63:38">=</operator> <literal type="number" pos:start="63:40" pos:end="63:41">32</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:44"><expr pos:start="65:9" pos:end="65:43"><name pos:start="65:9" pos:end="65:20"><name pos:start="65:9" pos:end="65:11">ctx</name><operator pos:start="65:12" pos:end="65:13">-&gt;</operator><name pos:start="65:14" pos:end="65:20">tex_fun</name></name> <operator pos:start="65:22" pos:end="65:22">=</operator> <name pos:start="65:24" pos:end="65:43"><name pos:start="65:24" pos:end="65:26">ctx</name><operator pos:start="65:27" pos:end="65:28">-&gt;</operator><name pos:start="65:29" pos:end="65:32">dxtc</name><operator pos:start="65:33" pos:end="65:33">.</operator><name pos:start="65:34" pos:end="65:43">dxt5_block</name></name></expr>;</expr_stmt>

        <break pos:start="67:9" pos:end="67:14">break;</break>

    <case pos:start="69:5" pos:end="69:27">case <expr pos:start="69:10" pos:end="69:26"><name pos:start="69:10" pos:end="69:26">HAP_FMT_YCOCGDXT5</name></expr>:</case>

        <expr_stmt pos:start="71:9" pos:end="71:18"><expr pos:start="71:9" pos:end="71:17"><name pos:start="71:9" pos:end="71:13">ratio</name> <operator pos:start="71:15" pos:end="71:15">=</operator> <literal type="number" pos:start="71:17" pos:end="71:17">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:53"><expr pos:start="73:9" pos:end="73:52"><name pos:start="73:9" pos:end="73:24"><name pos:start="73:9" pos:end="73:13">avctx</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:24">codec_tag</name></name> <operator pos:start="73:26" pos:end="73:26">=</operator> <call pos:start="73:28" pos:end="73:52"><name pos:start="73:28" pos:end="73:32">MKTAG</name><argument_list pos:start="73:33" pos:end="73:52">(<argument pos:start="73:34" pos:end="73:36"><expr pos:start="73:34" pos:end="73:36"><literal type="char" pos:start="73:34" pos:end="73:36">'H'</literal></expr></argument>, <argument pos:start="73:39" pos:end="73:41"><expr pos:start="73:39" pos:end="73:41"><literal type="char" pos:start="73:39" pos:end="73:41">'a'</literal></expr></argument>, <argument pos:start="73:44" pos:end="73:46"><expr pos:start="73:44" pos:end="73:46"><literal type="char" pos:start="73:44" pos:end="73:46">'p'</literal></expr></argument>, <argument pos:start="73:49" pos:end="73:51"><expr pos:start="73:49" pos:end="73:51"><literal type="char" pos:start="73:49" pos:end="73:51">'Y'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:42"><expr pos:start="75:9" pos:end="75:41"><name pos:start="75:9" pos:end="75:36"><name pos:start="75:9" pos:end="75:13">avctx</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:36">bits_per_coded_sample</name></name> <operator pos:start="75:38" pos:end="75:38">=</operator> <literal type="number" pos:start="75:40" pos:end="75:41">24</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:46"><expr pos:start="77:9" pos:end="77:45"><name pos:start="77:9" pos:end="77:20"><name pos:start="77:9" pos:end="77:11">ctx</name><operator pos:start="77:12" pos:end="77:13">-&gt;</operator><name pos:start="77:14" pos:end="77:20">tex_fun</name></name> <operator pos:start="77:22" pos:end="77:22">=</operator> <name pos:start="77:24" pos:end="77:45"><name pos:start="77:24" pos:end="77:26">ctx</name><operator pos:start="77:27" pos:end="77:28">-&gt;</operator><name pos:start="77:29" pos:end="77:32">dxtc</name><operator pos:start="77:33" pos:end="77:33">.</operator><name pos:start="77:34" pos:end="77:45">dxt5ys_block</name></name></expr>;</expr_stmt>

        <break pos:start="79:9" pos:end="79:14">break;</break>

    <default pos:start="81:5" pos:end="81:12">default:</default>

        <expr_stmt pos:start="83:9" pos:end="83:79"><expr pos:start="83:9" pos:end="83:78"><call pos:start="83:9" pos:end="83:78"><name pos:start="83:9" pos:end="83:14">av_log</name><argument_list pos:start="83:15" pos:end="83:78">(<argument pos:start="83:16" pos:end="83:20"><expr pos:start="83:16" pos:end="83:20"><name pos:start="83:16" pos:end="83:20">avctx</name></expr></argument>, <argument pos:start="83:23" pos:end="83:34"><expr pos:start="83:23" pos:end="83:34"><name pos:start="83:23" pos:end="83:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="83:37" pos:end="83:59"><expr pos:start="83:37" pos:end="83:59"><literal type="string" pos:start="83:37" pos:end="83:59">"Invalid format %02X\n"</literal></expr></argument>, <argument pos:start="83:62" pos:end="83:77"><expr pos:start="83:62" pos:end="83:77"><name pos:start="83:62" pos:end="83:77"><name pos:start="83:62" pos:end="83:64">ctx</name><operator pos:start="83:65" pos:end="83:66">-&gt;</operator><name pos:start="83:67" pos:end="83:77">opt_tex_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="85:9" pos:end="85:35">return <expr pos:start="85:16" pos:end="85:34"><name pos:start="85:16" pos:end="85:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></switch>



    <comment type="block" pos:start="91:5" pos:end="93:63">/* Texture compression ratio is constant, so can we computer

     * beforehand the final size of the uncompressed buffer. */</comment>

    <expr_stmt pos:start="95:5" pos:end="97:74"><expr pos:start="95:5" pos:end="97:73"><name pos:start="95:5" pos:end="95:17"><name pos:start="95:5" pos:end="95:7">ctx</name><operator pos:start="95:8" pos:end="95:9">-&gt;</operator><name pos:start="95:10" pos:end="95:17">tex_size</name></name>   <operator pos:start="95:21" pos:end="95:21">=</operator> <call pos:start="95:23" pos:end="95:61"><name pos:start="95:23" pos:end="95:29">FFALIGN</name><argument_list pos:start="95:30" pos:end="95:61">(<argument pos:start="95:31" pos:end="95:42"><expr pos:start="95:31" pos:end="95:42"><name pos:start="95:31" pos:end="95:42"><name pos:start="95:31" pos:end="95:35">avctx</name><operator pos:start="95:36" pos:end="95:37">-&gt;</operator><name pos:start="95:38" pos:end="95:42">width</name></name></expr></argument>,  <argument pos:start="95:46" pos:end="95:60"><expr pos:start="95:46" pos:end="95:60"><name pos:start="95:46" pos:end="95:60">TEXTURE_BLOCK_W</name></expr></argument>)</argument_list></call> <operator pos:start="95:63" pos:end="95:63">*</operator>

                      <call pos:start="97:23" pos:end="97:61"><name pos:start="97:23" pos:end="97:29">FFALIGN</name><argument_list pos:start="97:30" pos:end="97:61">(<argument pos:start="97:31" pos:end="97:43"><expr pos:start="97:31" pos:end="97:43"><name pos:start="97:31" pos:end="97:43"><name pos:start="97:31" pos:end="97:35">avctx</name><operator pos:start="97:36" pos:end="97:37">-&gt;</operator><name pos:start="97:38" pos:end="97:43">height</name></name></expr></argument>, <argument pos:start="97:46" pos:end="97:60"><expr pos:start="97:46" pos:end="97:60"><name pos:start="97:46" pos:end="97:60">TEXTURE_BLOCK_H</name></expr></argument>)</argument_list></call> <operator pos:start="97:63" pos:end="97:63">*</operator> <literal type="number" pos:start="97:65" pos:end="97:65">4</literal> <operator pos:start="97:67" pos:end="97:67">/</operator> <name pos:start="97:69" pos:end="97:73">ratio</name></expr>;</expr_stmt>



    <comment type="block" pos:start="101:5" pos:end="101:67">/* Round the chunk count to divide evenly on DXT block edges */</comment>

    <expr_stmt pos:start="103:5" pos:end="103:77"><expr pos:start="103:5" pos:end="103:76"><name pos:start="103:5" pos:end="103:25">corrected_chunk_count</name> <operator pos:start="103:27" pos:end="103:27">=</operator> <call pos:start="103:29" pos:end="103:76"><name pos:start="103:29" pos:end="103:35">av_clip</name><argument_list pos:start="103:36" pos:end="103:76">(<argument pos:start="103:37" pos:end="103:56"><expr pos:start="103:37" pos:end="103:56"><name pos:start="103:37" pos:end="103:56"><name pos:start="103:37" pos:end="103:39">ctx</name><operator pos:start="103:40" pos:end="103:41">-&gt;</operator><name pos:start="103:42" pos:end="103:56">opt_chunk_count</name></name></expr></argument>, <argument pos:start="103:59" pos:end="103:59"><expr pos:start="103:59" pos:end="103:59"><literal type="number" pos:start="103:59" pos:end="103:59">1</literal></expr></argument>, <argument pos:start="103:62" pos:end="103:75"><expr pos:start="103:62" pos:end="103:75"><name pos:start="103:62" pos:end="103:75">HAP_MAX_CHUNKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="105:5" pos:end="109:5">while <condition pos:start="105:11" pos:end="105:71">(<expr pos:start="105:12" pos:end="105:70"><operator pos:start="105:12" pos:end="105:12">(</operator><name pos:start="105:13" pos:end="105:25"><name pos:start="105:13" pos:end="105:15">ctx</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:25">tex_size</name></name> <operator pos:start="105:27" pos:end="105:27">/</operator> <operator pos:start="105:29" pos:end="105:29">(</operator><literal type="number" pos:start="105:30" pos:end="105:31">64</literal> <operator pos:start="105:33" pos:end="105:33">/</operator> <name pos:start="105:35" pos:end="105:39">ratio</name><operator pos:start="105:40" pos:end="105:40">)</operator><operator pos:start="105:41" pos:end="105:41">)</operator> <operator pos:start="105:43" pos:end="105:43">%</operator> <name pos:start="105:45" pos:end="105:65">corrected_chunk_count</name> <operator pos:start="105:67" pos:end="105:68">!=</operator> <literal type="number" pos:start="105:70" pos:end="105:70">0</literal></expr>)</condition> <block pos:start="105:73" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:32">

        <expr_stmt pos:start="107:9" pos:end="107:32"><expr pos:start="107:9" pos:end="107:31"><name pos:start="107:9" pos:end="107:29">corrected_chunk_count</name><operator pos:start="107:30" pos:end="107:31">--</operator></expr>;</expr_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="111:5" pos:end="117:5"><if pos:start="111:5" pos:end="117:5">if <condition pos:start="111:8" pos:end="111:54">(<expr pos:start="111:9" pos:end="111:53"><name pos:start="111:9" pos:end="111:29">corrected_chunk_count</name> <operator pos:start="111:31" pos:end="111:32">!=</operator> <name pos:start="111:34" pos:end="111:53"><name pos:start="111:34" pos:end="111:36">ctx</name><operator pos:start="111:37" pos:end="111:38">-&gt;</operator><name pos:start="111:39" pos:end="111:53">opt_chunk_count</name></name></expr>)</condition> <block pos:start="111:56" pos:end="117:5">{<block_content pos:start="113:9" pos:end="115:81">

        <expr_stmt pos:start="113:9" pos:end="115:81"><expr pos:start="113:9" pos:end="115:80"><call pos:start="113:9" pos:end="115:80"><name pos:start="113:9" pos:end="113:14">av_log</name><argument_list pos:start="113:15" pos:end="115:80">(<argument pos:start="113:16" pos:end="113:20"><expr pos:start="113:16" pos:end="113:20"><name pos:start="113:16" pos:end="113:20">avctx</name></expr></argument>, <argument pos:start="113:23" pos:end="113:33"><expr pos:start="113:23" pos:end="113:33"><name pos:start="113:23" pos:end="113:33">AV_LOG_INFO</name></expr></argument>, <argument pos:start="113:36" pos:end="113:71"><expr pos:start="113:36" pos:end="113:71"><literal type="string" pos:start="113:36" pos:end="113:71">"%d chunks requested but %d used.\n"</literal></expr></argument>,

                                    <argument pos:start="115:37" pos:end="115:56"><expr pos:start="115:37" pos:end="115:56"><name pos:start="115:37" pos:end="115:56"><name pos:start="115:37" pos:end="115:39">ctx</name><operator pos:start="115:40" pos:end="115:41">-&gt;</operator><name pos:start="115:42" pos:end="115:56">opt_chunk_count</name></name></expr></argument>, <argument pos:start="115:59" pos:end="115:79"><expr pos:start="115:59" pos:end="115:79"><name pos:start="115:59" pos:end="115:79">corrected_chunk_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:64"><expr pos:start="119:5" pos:end="119:63"><name pos:start="119:5" pos:end="119:7">ret</name> <operator pos:start="119:9" pos:end="119:9">=</operator> <call pos:start="119:11" pos:end="119:63"><name pos:start="119:11" pos:end="119:32">ff_hap_set_chunk_count</name><argument_list pos:start="119:33" pos:end="119:63">(<argument pos:start="119:34" pos:end="119:36"><expr pos:start="119:34" pos:end="119:36"><name pos:start="119:34" pos:end="119:36">ctx</name></expr></argument>, <argument pos:start="119:39" pos:end="119:59"><expr pos:start="119:39" pos:end="119:59"><name pos:start="119:39" pos:end="119:59">corrected_chunk_count</name></expr></argument>, <argument pos:start="119:62" pos:end="119:62"><expr pos:start="119:62" pos:end="119:62"><literal type="number" pos:start="119:62" pos:end="119:62">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="123:19"><if pos:start="121:5" pos:end="123:19">if <condition pos:start="121:8" pos:end="121:17">(<expr pos:start="121:9" pos:end="121:16"><name pos:start="121:9" pos:end="121:11">ret</name> <operator pos:start="121:13" pos:end="121:14">!=</operator> <literal type="number" pos:start="121:16" pos:end="121:16">0</literal></expr>)</condition><block type="pseudo" pos:start="123:9" pos:end="123:19"><block_content pos:start="123:9" pos:end="123:19">

        <return pos:start="123:9" pos:end="123:19">return <expr pos:start="123:16" pos:end="123:18"><name pos:start="123:16" pos:end="123:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:90"><expr pos:start="127:5" pos:end="127:89"><name pos:start="127:5" pos:end="127:19"><name pos:start="127:5" pos:end="127:7">ctx</name><operator pos:start="127:8" pos:end="127:9">-&gt;</operator><name pos:start="127:10" pos:end="127:19">max_snappy</name></name> <operator pos:start="127:21" pos:end="127:21">=</operator> <call pos:start="127:23" pos:end="127:89"><name pos:start="127:23" pos:end="127:50">snappy_max_compressed_length</name><argument_list pos:start="127:51" pos:end="127:89">(<argument pos:start="127:52" pos:end="127:88"><expr pos:start="127:52" pos:end="127:88"><name pos:start="127:52" pos:end="127:64"><name pos:start="127:52" pos:end="127:54">ctx</name><operator pos:start="127:55" pos:end="127:56">-&gt;</operator><name pos:start="127:57" pos:end="127:64">tex_size</name></name> <operator pos:start="127:66" pos:end="127:66">/</operator> <name pos:start="127:68" pos:end="127:88">corrected_chunk_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:45"><expr pos:start="131:5" pos:end="131:44"><name pos:start="131:5" pos:end="131:16"><name pos:start="131:5" pos:end="131:7">ctx</name><operator pos:start="131:8" pos:end="131:9">-&gt;</operator><name pos:start="131:10" pos:end="131:16">tex_buf</name></name>  <operator pos:start="131:19" pos:end="131:19">=</operator> <call pos:start="131:21" pos:end="131:44"><name pos:start="131:21" pos:end="131:29">av_malloc</name><argument_list pos:start="131:30" pos:end="131:44">(<argument pos:start="131:31" pos:end="131:43"><expr pos:start="131:31" pos:end="131:43"><name pos:start="131:31" pos:end="131:43"><name pos:start="131:31" pos:end="131:33">ctx</name><operator pos:start="131:34" pos:end="131:35">-&gt;</operator><name pos:start="131:36" pos:end="131:43">tex_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="133:5" pos:end="135:31"><if pos:start="133:5" pos:end="135:31">if <condition pos:start="133:8" pos:end="133:22">(<expr pos:start="133:9" pos:end="133:21"><operator pos:start="133:9" pos:end="133:9">!</operator><name pos:start="133:10" pos:end="133:21"><name pos:start="133:10" pos:end="133:12">ctx</name><operator pos:start="133:13" pos:end="133:14">-&gt;</operator><name pos:start="133:15" pos:end="133:21">tex_buf</name></name></expr>)</condition><block type="pseudo" pos:start="135:9" pos:end="135:31"><block_content pos:start="135:9" pos:end="135:31">

        <return pos:start="135:9" pos:end="135:31">return <expr pos:start="135:16" pos:end="135:30"><call pos:start="135:16" pos:end="135:30"><name pos:start="135:16" pos:end="135:22">AVERROR</name><argument_list pos:start="135:23" pos:end="135:30">(<argument pos:start="135:24" pos:end="135:29"><expr pos:start="135:24" pos:end="135:29"><name pos:start="135:24" pos:end="135:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="139:5" pos:end="139:13">return <expr pos:start="139:12" pos:end="139:12"><literal type="number" pos:start="139:12" pos:end="139:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
