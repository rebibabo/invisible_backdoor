<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13052.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:31">qmp_block_dirty_bitmap_add</name><parameter_list pos:start="1:32" pos:end="5:45">(<parameter pos:start="1:33" pos:end="1:48"><decl pos:start="1:33" pos:end="1:48"><type pos:start="1:33" pos:end="1:48"><specifier pos:start="1:33" pos:end="1:37">const</specifier> <name pos:start="1:39" pos:end="1:42">char</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:48">node</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:66"><decl pos:start="1:51" pos:end="1:66"><type pos:start="1:51" pos:end="1:66"><specifier pos:start="1:51" pos:end="1:55">const</specifier> <name pos:start="1:57" pos:end="1:60">char</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:66">name</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:52"><decl pos:start="3:33" pos:end="3:52"><type pos:start="3:33" pos:end="3:52"><name pos:start="3:33" pos:end="3:36">bool</name></type> <name pos:start="3:38" pos:end="3:52">has_granularity</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:74"><decl pos:start="3:55" pos:end="3:74"><type pos:start="3:55" pos:end="3:74"><name pos:start="3:55" pos:end="3:62">uint32_t</name></type> <name pos:start="3:64" pos:end="3:74">granularity</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:44"><decl pos:start="5:33" pos:end="5:44"><type pos:start="5:33" pos:end="5:44"><name pos:start="5:33" pos:end="5:37">Error</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier><modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:44">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="71:1">{<block_content pos:start="9:5" pos:end="69:37">

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">AioContext</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:27">aio_context</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:24">bs</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:33">(<expr pos:start="15:9" pos:end="15:32"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:13">name</name> <operator pos:start="15:15" pos:end="15:16">||</operator> <name pos:start="15:18" pos:end="15:24"><name pos:start="15:18" pos:end="15:21">name</name><index pos:start="15:22" pos:end="15:24">[<expr pos:start="15:23" pos:end="15:23"><literal type="number" pos:start="15:23" pos:end="15:23">0</literal></expr>]</index></name> <operator pos:start="15:26" pos:end="15:27">==</operator> <literal type="char" pos:start="15:29" pos:end="15:32">'\0'</literal></expr>)</condition> <block pos:start="15:35" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:15">

        <expr_stmt pos:start="17:9" pos:end="17:56"><expr pos:start="17:9" pos:end="17:55"><call pos:start="17:9" pos:end="17:55"><name pos:start="17:9" pos:end="17:18">error_setg</name><argument_list pos:start="17:19" pos:end="17:55">(<argument pos:start="17:20" pos:end="17:23"><expr pos:start="17:20" pos:end="17:23"><name pos:start="17:20" pos:end="17:23">errp</name></expr></argument>, <argument pos:start="17:26" pos:end="17:54"><expr pos:start="17:26" pos:end="17:54"><literal type="string" pos:start="17:26" pos:end="17:54">"Bitmap name cannot be empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:42"><expr pos:start="25:5" pos:end="25:41"><name pos:start="25:5" pos:end="25:6">bs</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <call pos:start="25:10" pos:end="25:41"><name pos:start="25:10" pos:end="25:23">bdrv_lookup_bs</name><argument_list pos:start="25:24" pos:end="25:41">(<argument pos:start="25:25" pos:end="25:28"><expr pos:start="25:25" pos:end="25:28"><name pos:start="25:25" pos:end="25:28">node</name></expr></argument>, <argument pos:start="25:31" pos:end="25:34"><expr pos:start="25:31" pos:end="25:34"><name pos:start="25:31" pos:end="25:34">node</name></expr></argument>, <argument pos:start="25:37" pos:end="25:40"><expr pos:start="25:37" pos:end="25:40"><name pos:start="25:37" pos:end="25:40">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:12">(<expr pos:start="27:9" pos:end="27:11"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:11">bs</name></expr>)</condition> <block pos:start="27:14" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:15">

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:43"><expr pos:start="35:5" pos:end="35:42"><name pos:start="35:5" pos:end="35:15">aio_context</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:42"><name pos:start="35:19" pos:end="35:38">bdrv_get_aio_context</name><argument_list pos:start="35:39" pos:end="35:42">(<argument pos:start="35:40" pos:end="35:41"><expr pos:start="35:40" pos:end="35:41"><name pos:start="35:40" pos:end="35:41">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:37"><expr pos:start="37:5" pos:end="37:36"><call pos:start="37:5" pos:end="37:36"><name pos:start="37:5" pos:end="37:23">aio_context_acquire</name><argument_list pos:start="37:24" pos:end="37:36">(<argument pos:start="37:25" pos:end="37:35"><expr pos:start="37:25" pos:end="37:35"><name pos:start="37:25" pos:end="37:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="59:5"><if pos:start="41:5" pos:end="53:5">if <condition pos:start="41:8" pos:end="41:24">(<expr pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:23">has_granularity</name></expr>)</condition> <block pos:start="41:26" pos:end="53:5">{<block_content pos:start="43:9" pos:end="51:9">

        <if_stmt pos:start="43:9" pos:end="51:9"><if pos:start="43:9" pos:end="51:9">if <condition pos:start="43:12" pos:end="43:61">(<expr pos:start="43:13" pos:end="43:60"><name pos:start="43:13" pos:end="43:23">granularity</name> <operator pos:start="43:25" pos:end="43:25">&lt;</operator> <literal type="number" pos:start="43:27" pos:end="43:29">512</literal> <operator pos:start="43:31" pos:end="43:32">||</operator> <operator pos:start="43:34" pos:end="43:34">!</operator><call pos:start="43:35" pos:end="43:60"><name pos:start="43:35" pos:end="43:47">is_power_of_2</name><argument_list pos:start="43:48" pos:end="43:60">(<argument pos:start="43:49" pos:end="43:59"><expr pos:start="43:49" pos:end="43:59"><name pos:start="43:49" pos:end="43:59">granularity</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:63" pos:end="51:9">{<block_content pos:start="45:13" pos:end="49:21">

            <expr_stmt pos:start="45:13" pos:end="47:49"><expr pos:start="45:13" pos:end="47:48"><call pos:start="45:13" pos:end="47:48"><name pos:start="45:13" pos:end="45:22">error_setg</name><argument_list pos:start="45:23" pos:end="47:48">(<argument pos:start="45:24" pos:end="45:27"><expr pos:start="45:24" pos:end="45:27"><name pos:start="45:24" pos:end="45:27">errp</name></expr></argument>, <argument pos:start="45:30" pos:end="47:47"><expr pos:start="45:30" pos:end="47:47"><literal type="string" pos:start="45:30" pos:end="45:62">"Granularity must be power of 2 "</literal>

                             <literal type="string" pos:start="47:30" pos:end="47:47">"and at least 512"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="49:13" pos:end="49:21">goto <name pos:start="49:18" pos:end="49:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="53:7" pos:end="59:5">else <block pos:start="53:12" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:62">

        <comment type="block" pos:start="55:9" pos:end="55:52">/* Default to cluster size, if available: */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:62"><expr pos:start="57:9" pos:end="57:61"><name pos:start="57:9" pos:end="57:19">granularity</name> <operator pos:start="57:21" pos:end="57:21">=</operator> <call pos:start="57:23" pos:end="57:61"><name pos:start="57:23" pos:end="57:57">bdrv_get_default_bitmap_granularity</name><argument_list pos:start="57:58" pos:end="57:61">(<argument pos:start="57:59" pos:end="57:60"><expr pos:start="57:59" pos:end="57:60"><name pos:start="57:59" pos:end="57:60">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:58"><expr pos:start="63:5" pos:end="63:57"><call pos:start="63:5" pos:end="63:57"><name pos:start="63:5" pos:end="63:28">bdrv_create_dirty_bitmap</name><argument_list pos:start="63:29" pos:end="63:57">(<argument pos:start="63:30" pos:end="63:31"><expr pos:start="63:30" pos:end="63:31"><name pos:start="63:30" pos:end="63:31">bs</name></expr></argument>, <argument pos:start="63:34" pos:end="63:44"><expr pos:start="63:34" pos:end="63:44"><name pos:start="63:34" pos:end="63:44">granularity</name></expr></argument>, <argument pos:start="63:47" pos:end="63:50"><expr pos:start="63:47" pos:end="63:50"><name pos:start="63:47" pos:end="63:50">name</name></expr></argument>, <argument pos:start="63:53" pos:end="63:56"><expr pos:start="63:53" pos:end="63:56"><name pos:start="63:53" pos:end="63:56">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



 <label pos:start="67:2" pos:end="67:5"><name pos:start="67:2" pos:end="67:4">out</name>:</label>

    <expr_stmt pos:start="69:5" pos:end="69:37"><expr pos:start="69:5" pos:end="69:36"><call pos:start="69:5" pos:end="69:36"><name pos:start="69:5" pos:end="69:23">aio_context_release</name><argument_list pos:start="69:24" pos:end="69:36">(<argument pos:start="69:25" pos:end="69:35"><expr pos:start="69:25" pos:end="69:35"><name pos:start="69:25" pos:end="69:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
