<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9888.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:6"><name pos:start="1:1" pos:end="1:4">char</name> <modifier pos:start="1:6" pos:end="1:6">*</modifier></type><name pos:start="1:7" pos:end="1:30">socket_address_to_string</name><parameter_list pos:start="1:31" pos:end="1:72">(<parameter pos:start="1:32" pos:end="1:57"><decl pos:start="1:32" pos:end="1:57"><type pos:start="1:32" pos:end="1:57"><name pos:start="1:32" pos:end="1:51"><name pos:start="1:32" pos:end="1:37">struct</name> <name pos:start="1:39" pos:end="1:51">SocketAddress</name></name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">addr</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:71"><decl pos:start="1:60" pos:end="1:71"><type pos:start="1:60" pos:end="1:71"><name pos:start="1:60" pos:end="1:64">Error</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier><modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:71">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:15">

    <decl_stmt pos:start="5:5" pos:end="5:14"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">char</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:13">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">InetSocketAddress</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:27">inet</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:45"><decl pos:start="9:5" pos:end="9:44"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:44"><name pos:start="9:10" pos:end="9:18">host_port</name><index pos:start="9:19" pos:end="9:44">[<expr pos:start="9:20" pos:end="9:43"><name pos:start="9:20" pos:end="9:35">INET6_ADDRSTRLEN</name> <operator pos:start="9:37" pos:end="9:37">+</operator> <literal type="number" pos:start="9:39" pos:end="9:39">5</literal> <operator pos:start="9:41" pos:end="9:41">+</operator> <literal type="number" pos:start="9:43" pos:end="9:43">4</literal></expr>]</index></name></decl>;</decl_stmt>



    <switch pos:start="13:5" pos:end="77:5">switch <condition pos:start="13:12" pos:end="13:23">(<expr pos:start="13:13" pos:end="13:22"><name pos:start="13:13" pos:end="13:22"><name pos:start="13:13" pos:end="13:16">addr</name><operator pos:start="13:17" pos:end="13:18">-&gt;</operator><name pos:start="13:19" pos:end="13:22">type</name></name></expr>)</condition> <block pos:start="13:25" pos:end="77:5">{<block_content pos:start="15:5" pos:end="75:20">

    <case pos:start="15:5" pos:end="15:34">case <expr pos:start="15:10" pos:end="15:33"><name pos:start="15:10" pos:end="15:33">SOCKET_ADDRESS_KIND_INET</name></expr>:</case>

        <expr_stmt pos:start="17:9" pos:end="17:33"><expr pos:start="17:9" pos:end="17:32"><name pos:start="17:9" pos:end="17:12">inet</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <name pos:start="17:16" pos:end="17:32"><name pos:start="17:16" pos:end="17:19">addr</name><operator pos:start="17:20" pos:end="17:21">-&gt;</operator><name pos:start="17:22" pos:end="17:22">u</name><operator pos:start="17:23" pos:end="17:23">.</operator><name pos:start="17:24" pos:end="17:27">inet</name><operator pos:start="17:28" pos:end="17:28">.</operator><name pos:start="17:29" pos:end="17:32">data</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="19:9" pos:end="35:9"><if pos:start="19:9" pos:end="27:9">if <condition pos:start="19:12" pos:end="19:44">(<expr pos:start="19:13" pos:end="19:43"><call pos:start="19:13" pos:end="19:35"><name pos:start="19:13" pos:end="19:18">strchr</name><argument_list pos:start="19:19" pos:end="19:35">(<argument pos:start="19:20" pos:end="19:29"><expr pos:start="19:20" pos:end="19:29"><name pos:start="19:20" pos:end="19:29"><name pos:start="19:20" pos:end="19:23">inet</name><operator pos:start="19:24" pos:end="19:25">-&gt;</operator><name pos:start="19:26" pos:end="19:29">host</name></name></expr></argument>, <argument pos:start="19:32" pos:end="19:34"><expr pos:start="19:32" pos:end="19:34"><literal type="char" pos:start="19:32" pos:end="19:34">':'</literal></expr></argument>)</argument_list></call> <operator pos:start="19:37" pos:end="19:38">==</operator> <name pos:start="19:40" pos:end="19:43">NULL</name></expr>)</condition> <block pos:start="19:46" pos:end="27:9">{<block_content pos:start="21:13" pos:end="25:38">

            <expr_stmt pos:start="21:13" pos:end="23:32"><expr pos:start="21:13" pos:end="23:31"><call pos:start="21:13" pos:end="23:31"><name pos:start="21:13" pos:end="21:20">snprintf</name><argument_list pos:start="21:21" pos:end="23:31">(<argument pos:start="21:22" pos:end="21:30"><expr pos:start="21:22" pos:end="21:30"><name pos:start="21:22" pos:end="21:30">host_port</name></expr></argument>, <argument pos:start="21:33" pos:end="21:49"><expr pos:start="21:33" pos:end="21:49"><sizeof pos:start="21:33" pos:end="21:49">sizeof<argument_list pos:start="21:39" pos:end="21:49">(<argument pos:start="21:40" pos:end="21:48"><expr pos:start="21:40" pos:end="21:48"><name pos:start="21:40" pos:end="21:48">host_port</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="21:52" pos:end="21:58"><expr pos:start="21:52" pos:end="21:58"><literal type="string" pos:start="21:52" pos:end="21:58">"%s:%s"</literal></expr></argument>, <argument pos:start="21:61" pos:end="21:70"><expr pos:start="21:61" pos:end="21:70"><name pos:start="21:61" pos:end="21:70"><name pos:start="21:61" pos:end="21:64">inet</name><operator pos:start="21:65" pos:end="21:66">-&gt;</operator><name pos:start="21:67" pos:end="21:70">host</name></name></expr></argument>,

                    <argument pos:start="23:21" pos:end="23:30"><expr pos:start="23:21" pos:end="23:30"><name pos:start="23:21" pos:end="23:30"><name pos:start="23:21" pos:end="23:24">inet</name><operator pos:start="23:25" pos:end="23:26">-&gt;</operator><name pos:start="23:27" pos:end="23:30">port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:38"><expr pos:start="25:13" pos:end="25:37"><name pos:start="25:13" pos:end="25:15">buf</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <call pos:start="25:19" pos:end="25:37"><name pos:start="25:19" pos:end="25:26">g_strdup</name><argument_list pos:start="25:27" pos:end="25:37">(<argument pos:start="25:28" pos:end="25:36"><expr pos:start="25:28" pos:end="25:36"><name pos:start="25:28" pos:end="25:36">host_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="27:11" pos:end="35:9">else <block pos:start="27:16" pos:end="35:9">{<block_content pos:start="29:13" pos:end="33:38">

            <expr_stmt pos:start="29:13" pos:end="31:32"><expr pos:start="29:13" pos:end="31:31"><call pos:start="29:13" pos:end="31:31"><name pos:start="29:13" pos:end="29:20">snprintf</name><argument_list pos:start="29:21" pos:end="31:31">(<argument pos:start="29:22" pos:end="29:30"><expr pos:start="29:22" pos:end="29:30"><name pos:start="29:22" pos:end="29:30">host_port</name></expr></argument>, <argument pos:start="29:33" pos:end="29:49"><expr pos:start="29:33" pos:end="29:49"><sizeof pos:start="29:33" pos:end="29:49">sizeof<argument_list pos:start="29:39" pos:end="29:49">(<argument pos:start="29:40" pos:end="29:48"><expr pos:start="29:40" pos:end="29:48"><name pos:start="29:40" pos:end="29:48">host_port</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="29:52" pos:end="29:60"><expr pos:start="29:52" pos:end="29:60"><literal type="string" pos:start="29:52" pos:end="29:60">"[%s]:%s"</literal></expr></argument>, <argument pos:start="29:63" pos:end="29:72"><expr pos:start="29:63" pos:end="29:72"><name pos:start="29:63" pos:end="29:72"><name pos:start="29:63" pos:end="29:66">inet</name><operator pos:start="29:67" pos:end="29:68">-&gt;</operator><name pos:start="29:69" pos:end="29:72">host</name></name></expr></argument>,

                    <argument pos:start="31:21" pos:end="31:30"><expr pos:start="31:21" pos:end="31:30"><name pos:start="31:21" pos:end="31:30"><name pos:start="31:21" pos:end="31:24">inet</name><operator pos:start="31:25" pos:end="31:26">-&gt;</operator><name pos:start="31:27" pos:end="31:30">port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:38"><expr pos:start="33:13" pos:end="33:37"><name pos:start="33:13" pos:end="33:15">buf</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <call pos:start="33:19" pos:end="33:37"><name pos:start="33:19" pos:end="33:26">g_strdup</name><argument_list pos:start="33:27" pos:end="33:37">(<argument pos:start="33:28" pos:end="33:36"><expr pos:start="33:28" pos:end="33:36"><name pos:start="33:28" pos:end="33:36">host_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="37:9" pos:end="37:14">break;</break>



    <case pos:start="41:5" pos:end="41:34">case <expr pos:start="41:10" pos:end="41:33"><name pos:start="41:10" pos:end="41:33">SOCKET_ADDRESS_KIND_UNIX</name></expr>:</case>

        <expr_stmt pos:start="43:9" pos:end="43:50"><expr pos:start="43:9" pos:end="43:49"><name pos:start="43:9" pos:end="43:11">buf</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="43:49"><name pos:start="43:15" pos:end="43:22">g_strdup</name><argument_list pos:start="43:23" pos:end="43:49">(<argument pos:start="43:24" pos:end="43:48"><expr pos:start="43:24" pos:end="43:48"><name pos:start="43:24" pos:end="43:48"><name pos:start="43:24" pos:end="43:27">addr</name><operator pos:start="43:28" pos:end="43:29">-&gt;</operator><name pos:start="43:30" pos:end="43:30">u</name><operator pos:start="43:31" pos:end="43:31">.</operator><name pos:start="43:32" pos:end="43:37">q_unix</name><operator pos:start="43:38" pos:end="43:38">.</operator><name pos:start="43:39" pos:end="43:42">data</name><operator pos:start="43:43" pos:end="43:44">-&gt;</operator><name pos:start="43:45" pos:end="43:48">path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="45:9" pos:end="45:14">break;</break>



    <case pos:start="49:5" pos:end="49:32">case <expr pos:start="49:10" pos:end="49:31"><name pos:start="49:10" pos:end="49:31">SOCKET_ADDRESS_KIND_FD</name></expr>:</case>

        <expr_stmt pos:start="51:9" pos:end="51:45"><expr pos:start="51:9" pos:end="51:44"><name pos:start="51:9" pos:end="51:11">buf</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <call pos:start="51:15" pos:end="51:44"><name pos:start="51:15" pos:end="51:22">g_strdup</name><argument_list pos:start="51:23" pos:end="51:44">(<argument pos:start="51:24" pos:end="51:43"><expr pos:start="51:24" pos:end="51:43"><name pos:start="51:24" pos:end="51:43"><name pos:start="51:24" pos:end="51:27">addr</name><operator pos:start="51:28" pos:end="51:29">-&gt;</operator><name pos:start="51:30" pos:end="51:30">u</name><operator pos:start="51:31" pos:end="51:31">.</operator><name pos:start="51:32" pos:end="51:33">fd</name><operator pos:start="51:34" pos:end="51:34">.</operator><name pos:start="51:35" pos:end="51:38">data</name><operator pos:start="51:39" pos:end="51:40">-&gt;</operator><name pos:start="51:41" pos:end="51:43">str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="53:9" pos:end="53:14">break;</break>



    <case pos:start="57:5" pos:end="57:35">case <expr pos:start="57:10" pos:end="57:34"><name pos:start="57:10" pos:end="57:34">SOCKET_ADDRESS_KIND_VSOCK</name></expr>:</case>

        <expr_stmt pos:start="59:9" pos:end="63:56"><expr pos:start="59:9" pos:end="63:55"><name pos:start="59:9" pos:end="59:11">buf</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="63:55"><name pos:start="59:15" pos:end="59:29">g_strdup_printf</name><argument_list pos:start="59:30" pos:end="63:55">(<argument pos:start="59:31" pos:end="59:37"><expr pos:start="59:31" pos:end="59:37"><literal type="string" pos:start="59:31" pos:end="59:37">"%s:%s"</literal></expr></argument>,

                              <argument pos:start="61:31" pos:end="61:53"><expr pos:start="61:31" pos:end="61:53"><name pos:start="61:31" pos:end="61:53"><name pos:start="61:31" pos:end="61:34">addr</name><operator pos:start="61:35" pos:end="61:36">-&gt;</operator><name pos:start="61:37" pos:end="61:37">u</name><operator pos:start="61:38" pos:end="61:38">.</operator><name pos:start="61:39" pos:end="61:43">vsock</name><operator pos:start="61:44" pos:end="61:44">.</operator><name pos:start="61:45" pos:end="61:48">data</name><operator pos:start="61:49" pos:end="61:50">-&gt;</operator><name pos:start="61:51" pos:end="61:53">cid</name></name></expr></argument>,

                              <argument pos:start="63:31" pos:end="63:54"><expr pos:start="63:31" pos:end="63:54"><name pos:start="63:31" pos:end="63:54"><name pos:start="63:31" pos:end="63:34">addr</name><operator pos:start="63:35" pos:end="63:36">-&gt;</operator><name pos:start="63:37" pos:end="63:37">u</name><operator pos:start="63:38" pos:end="63:38">.</operator><name pos:start="63:39" pos:end="63:43">vsock</name><operator pos:start="63:44" pos:end="63:44">.</operator><name pos:start="63:45" pos:end="63:48">data</name><operator pos:start="63:49" pos:end="63:50">-&gt;</operator><name pos:start="63:51" pos:end="63:54">port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="65:9" pos:end="65:14">break;</break>



    <default pos:start="69:5" pos:end="69:12">default:</default>

        <expr_stmt pos:start="71:9" pos:end="73:31"><expr pos:start="71:9" pos:end="73:30"><call pos:start="71:9" pos:end="73:30"><name pos:start="71:9" pos:end="71:18">error_setg</name><argument_list pos:start="71:19" pos:end="73:30">(<argument pos:start="71:20" pos:end="71:23"><expr pos:start="71:20" pos:end="71:23"><name pos:start="71:20" pos:end="71:23">errp</name></expr></argument>, <argument pos:start="71:26" pos:end="71:55"><expr pos:start="71:26" pos:end="71:55"><literal type="string" pos:start="71:26" pos:end="71:55">"socket family %d unsupported"</literal></expr></argument>,

                   <argument pos:start="73:20" pos:end="73:29"><expr pos:start="73:20" pos:end="73:29"><name pos:start="73:20" pos:end="73:29"><name pos:start="73:20" pos:end="73:23">addr</name><operator pos:start="73:24" pos:end="73:25">-&gt;</operator><name pos:start="73:26" pos:end="73:29">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:20">return <expr pos:start="75:16" pos:end="75:19"><name pos:start="75:16" pos:end="75:19">NULL</name></expr>;</return>

    </block_content>}</block></switch>

    <return pos:start="79:5" pos:end="79:15">return <expr pos:start="79:12" pos:end="79:14"><name pos:start="79:12" pos:end="79:14">buf</name></expr>;</return>

</block_content>}</block></function>
</unit>
