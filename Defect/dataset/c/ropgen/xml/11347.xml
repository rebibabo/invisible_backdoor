<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11347.c" pos:tabs="8"><function pos:start="1:1" pos:end="311:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">rpl_read_header</name><parameter_list pos:start="1:27" pos:end="1:46">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:44"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="311:1">{<block_content pos:start="5:5" pos:end="309:13">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">AVIOContext</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:19">pb</name> <init pos:start="5:21" pos:end="5:27">= <expr pos:start="5:23" pos:end="5:27"><name pos:start="5:23" pos:end="5:27"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:27">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">RPLContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">rpl</name> <init pos:start="7:21" pos:end="7:34">= <expr pos:start="7:23" pos:end="7:34"><name pos:start="7:23" pos:end="7:34"><name pos:start="7:23" pos:end="7:23">s</name><operator pos:start="7:24" pos:end="7:25">-&gt;</operator><name pos:start="7:26" pos:end="7:34">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">AVStream</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:17">vst</name> <init pos:start="9:19" pos:end="9:24">= <expr pos:start="9:21" pos:end="9:24"><name pos:start="9:21" pos:end="9:24">NULL</name></expr></init></decl>, <decl pos:start="9:27" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:14"><modifier pos:start="9:27" pos:end="9:27">*</modifier></type><name pos:start="9:28" pos:end="9:30">ast</name> <init pos:start="9:32" pos:end="9:37">= <expr pos:start="9:34" pos:end="9:37"><name pos:start="9:34" pos:end="9:37">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:24">total_audio_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">error</name> <init pos:start="13:15" pos:end="13:17">= <expr pos:start="13:17" pos:end="13:17"><literal type="number" pos:start="13:17" pos:end="13:17">0</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:14">i</name></decl>;</decl_stmt>



    <decl_stmt pos:start="21:5" pos:end="21:65"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">int32_t</name></type> <name pos:start="21:13" pos:end="21:24">audio_format</name></decl>, <decl pos:start="21:27" pos:end="21:46"><type ref="prev" pos:start="21:5" pos:end="21:11"/><name pos:start="21:27" pos:end="21:46">chunk_catalog_offset</name></decl>, <decl pos:start="21:49" pos:end="21:64"><type ref="prev" pos:start="21:5" pos:end="21:11"/><name pos:start="21:49" pos:end="21:64">number_of_chunks</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:14">AVRational</name></type> <name pos:start="23:16" pos:end="23:18">fps</name></decl>;</decl_stmt>



    <decl_stmt pos:start="27:5" pos:end="27:31"><decl pos:start="27:5" pos:end="27:30"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">char</name></type> <name pos:start="27:10" pos:end="27:30"><name pos:start="27:10" pos:end="27:13">line</name><index pos:start="27:14" pos:end="27:30">[<expr pos:start="27:15" pos:end="27:29"><name pos:start="27:15" pos:end="27:29">RPL_LINE_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>



    <comment type="line" pos:start="31:5" pos:end="31:59">// The header for RPL/ARMovie files is 21 lines of text</comment>

    <comment type="line" pos:start="33:5" pos:end="33:67">// containing the various header fields.  The fields are always</comment>

    <comment type="line" pos:start="35:5" pos:end="35:58">// in the same order, and other text besides the first</comment>

    <comment type="line" pos:start="37:5" pos:end="37:38">// number usually isn't important.</comment>

    <comment type="line" pos:start="39:5" pos:end="39:57">// (The spec says that there exists some significance</comment>

    <comment type="line" pos:start="41:5" pos:end="41:52">// for the text in a few cases; samples needed.)</comment>

    <expr_stmt pos:start="43:5" pos:end="43:47"><expr pos:start="43:5" pos:end="43:46"><name pos:start="43:5" pos:end="43:9">error</name> <operator pos:start="43:11" pos:end="43:12">|=</operator> <call pos:start="43:14" pos:end="43:46"><name pos:start="43:14" pos:end="43:22">read_line</name><argument_list pos:start="43:23" pos:end="43:46">(<argument pos:start="43:24" pos:end="43:25"><expr pos:start="43:24" pos:end="43:25"><name pos:start="43:24" pos:end="43:25">pb</name></expr></argument>, <argument pos:start="43:28" pos:end="43:31"><expr pos:start="43:28" pos:end="43:31"><name pos:start="43:28" pos:end="43:31">line</name></expr></argument>, <argument pos:start="43:34" pos:end="43:45"><expr pos:start="43:34" pos:end="43:45"><sizeof pos:start="43:34" pos:end="43:45">sizeof<argument_list pos:start="43:40" pos:end="43:45">(<argument pos:start="43:41" pos:end="43:44"><expr pos:start="43:41" pos:end="43:44"><name pos:start="43:41" pos:end="43:44">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="line" pos:start="43:54" pos:end="43:63">// ARMovie</comment>

    <expr_stmt pos:start="45:5" pos:end="45:47"><expr pos:start="45:5" pos:end="45:46"><name pos:start="45:5" pos:end="45:9">error</name> <operator pos:start="45:11" pos:end="45:12">|=</operator> <call pos:start="45:14" pos:end="45:46"><name pos:start="45:14" pos:end="45:22">read_line</name><argument_list pos:start="45:23" pos:end="45:46">(<argument pos:start="45:24" pos:end="45:25"><expr pos:start="45:24" pos:end="45:25"><name pos:start="45:24" pos:end="45:25">pb</name></expr></argument>, <argument pos:start="45:28" pos:end="45:31"><expr pos:start="45:28" pos:end="45:31"><name pos:start="45:28" pos:end="45:31">line</name></expr></argument>, <argument pos:start="45:34" pos:end="45:45"><expr pos:start="45:34" pos:end="45:45"><sizeof pos:start="45:34" pos:end="45:45">sizeof<argument_list pos:start="45:40" pos:end="45:45">(<argument pos:start="45:41" pos:end="45:44"><expr pos:start="45:41" pos:end="45:44"><name pos:start="45:41" pos:end="45:44">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="line" pos:start="45:54" pos:end="45:66">// movie name</comment>

    <expr_stmt pos:start="47:5" pos:end="47:52"><expr pos:start="47:5" pos:end="47:51"><call pos:start="47:5" pos:end="47:51"><name pos:start="47:5" pos:end="47:15">av_dict_set</name><argument_list pos:start="47:16" pos:end="47:51">(<argument pos:start="47:17" pos:end="47:28"><expr pos:start="47:17" pos:end="47:28"><operator pos:start="47:17" pos:end="47:17">&amp;</operator><name pos:start="47:18" pos:end="47:28"><name pos:start="47:18" pos:end="47:18">s</name><operator pos:start="47:19" pos:end="47:20">-&gt;</operator><name pos:start="47:21" pos:end="47:28">metadata</name></name></expr></argument>, <argument pos:start="47:31" pos:end="47:37"><expr pos:start="47:31" pos:end="47:37"><literal type="string" pos:start="47:31" pos:end="47:37">"title"</literal></expr></argument>    , <argument pos:start="47:44" pos:end="47:47"><expr pos:start="47:44" pos:end="47:47"><name pos:start="47:44" pos:end="47:47">line</name></expr></argument>, <argument pos:start="47:50" pos:end="47:50"><expr pos:start="47:50" pos:end="47:50"><literal type="number" pos:start="47:50" pos:end="47:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:47"><expr pos:start="49:5" pos:end="49:46"><name pos:start="49:5" pos:end="49:9">error</name> <operator pos:start="49:11" pos:end="49:12">|=</operator> <call pos:start="49:14" pos:end="49:46"><name pos:start="49:14" pos:end="49:22">read_line</name><argument_list pos:start="49:23" pos:end="49:46">(<argument pos:start="49:24" pos:end="49:25"><expr pos:start="49:24" pos:end="49:25"><name pos:start="49:24" pos:end="49:25">pb</name></expr></argument>, <argument pos:start="49:28" pos:end="49:31"><expr pos:start="49:28" pos:end="49:31"><name pos:start="49:28" pos:end="49:31">line</name></expr></argument>, <argument pos:start="49:34" pos:end="49:45"><expr pos:start="49:34" pos:end="49:45"><sizeof pos:start="49:34" pos:end="49:45">sizeof<argument_list pos:start="49:40" pos:end="49:45">(<argument pos:start="49:41" pos:end="49:44"><expr pos:start="49:41" pos:end="49:44"><name pos:start="49:41" pos:end="49:44">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="line" pos:start="49:54" pos:end="49:70">// date/copyright</comment>

    <expr_stmt pos:start="51:5" pos:end="51:52"><expr pos:start="51:5" pos:end="51:51"><call pos:start="51:5" pos:end="51:51"><name pos:start="51:5" pos:end="51:15">av_dict_set</name><argument_list pos:start="51:16" pos:end="51:51">(<argument pos:start="51:17" pos:end="51:28"><expr pos:start="51:17" pos:end="51:28"><operator pos:start="51:17" pos:end="51:17">&amp;</operator><name pos:start="51:18" pos:end="51:28"><name pos:start="51:18" pos:end="51:18">s</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:28">metadata</name></name></expr></argument>, <argument pos:start="51:31" pos:end="51:41"><expr pos:start="51:31" pos:end="51:41"><literal type="string" pos:start="51:31" pos:end="51:41">"copyright"</literal></expr></argument>, <argument pos:start="51:44" pos:end="51:47"><expr pos:start="51:44" pos:end="51:47"><name pos:start="51:44" pos:end="51:47">line</name></expr></argument>, <argument pos:start="51:50" pos:end="51:50"><expr pos:start="51:50" pos:end="51:50"><literal type="number" pos:start="51:50" pos:end="51:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:47"><expr pos:start="53:5" pos:end="53:46"><name pos:start="53:5" pos:end="53:9">error</name> <operator pos:start="53:11" pos:end="53:12">|=</operator> <call pos:start="53:14" pos:end="53:46"><name pos:start="53:14" pos:end="53:22">read_line</name><argument_list pos:start="53:23" pos:end="53:46">(<argument pos:start="53:24" pos:end="53:25"><expr pos:start="53:24" pos:end="53:25"><name pos:start="53:24" pos:end="53:25">pb</name></expr></argument>, <argument pos:start="53:28" pos:end="53:31"><expr pos:start="53:28" pos:end="53:31"><name pos:start="53:28" pos:end="53:31">line</name></expr></argument>, <argument pos:start="53:34" pos:end="53:45"><expr pos:start="53:34" pos:end="53:45"><sizeof pos:start="53:34" pos:end="53:45">sizeof<argument_list pos:start="53:40" pos:end="53:45">(<argument pos:start="53:41" pos:end="53:44"><expr pos:start="53:41" pos:end="53:44"><name pos:start="53:41" pos:end="53:44">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="line" pos:start="53:54" pos:end="53:72">// author and other</comment>

    <expr_stmt pos:start="55:5" pos:end="55:52"><expr pos:start="55:5" pos:end="55:51"><call pos:start="55:5" pos:end="55:51"><name pos:start="55:5" pos:end="55:15">av_dict_set</name><argument_list pos:start="55:16" pos:end="55:51">(<argument pos:start="55:17" pos:end="55:28"><expr pos:start="55:17" pos:end="55:28"><operator pos:start="55:17" pos:end="55:17">&amp;</operator><name pos:start="55:18" pos:end="55:28"><name pos:start="55:18" pos:end="55:18">s</name><operator pos:start="55:19" pos:end="55:20">-&gt;</operator><name pos:start="55:21" pos:end="55:28">metadata</name></name></expr></argument>, <argument pos:start="55:31" pos:end="55:38"><expr pos:start="55:31" pos:end="55:38"><literal type="string" pos:start="55:31" pos:end="55:38">"author"</literal></expr></argument>   , <argument pos:start="55:44" pos:end="55:47"><expr pos:start="55:44" pos:end="55:47"><name pos:start="55:44" pos:end="55:47">line</name></expr></argument>, <argument pos:start="55:50" pos:end="55:50"><expr pos:start="55:50" pos:end="55:50"><literal type="number" pos:start="55:50" pos:end="55:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="59:5" pos:end="59:20">// video headers</comment>

    <expr_stmt pos:start="61:5" pos:end="61:39"><expr pos:start="61:5" pos:end="61:38"><name pos:start="61:5" pos:end="61:7">vst</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:38"><name pos:start="61:11" pos:end="61:29">avformat_new_stream</name><argument_list pos:start="61:30" pos:end="61:38">(<argument pos:start="61:31" pos:end="61:31"><expr pos:start="61:31" pos:end="61:31"><name pos:start="61:31" pos:end="61:31">s</name></expr></argument>, <argument pos:start="61:34" pos:end="61:37"><expr pos:start="61:34" pos:end="61:37"><name pos:start="61:34" pos:end="61:37">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="65:31"><if pos:start="63:5" pos:end="65:31">if <condition pos:start="63:8" pos:end="63:13">(<expr pos:start="63:9" pos:end="63:12"><operator pos:start="63:9" pos:end="63:9">!</operator><name pos:start="63:10" pos:end="63:12">vst</name></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:31"><block_content pos:start="65:9" pos:end="65:31">

        <return pos:start="65:9" pos:end="65:31">return <expr pos:start="65:16" pos:end="65:30"><call pos:start="65:16" pos:end="65:30"><name pos:start="65:16" pos:end="65:22">AVERROR</name><argument_list pos:start="65:23" pos:end="65:30">(<argument pos:start="65:24" pos:end="65:29"><expr pos:start="65:24" pos:end="65:29"><name pos:start="65:24" pos:end="65:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:53"><expr pos:start="67:5" pos:end="67:52"><name pos:start="67:5" pos:end="67:26"><name pos:start="67:5" pos:end="67:7">vst</name><operator pos:start="67:8" pos:end="67:9">-&gt;</operator><name pos:start="67:10" pos:end="67:14">codec</name><operator pos:start="67:15" pos:end="67:16">-&gt;</operator><name pos:start="67:17" pos:end="67:26">codec_type</name></name>      <operator pos:start="67:33" pos:end="67:33">=</operator> <name pos:start="67:35" pos:end="67:52">AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:64"><expr pos:start="69:5" pos:end="69:63"><name pos:start="69:5" pos:end="69:25"><name pos:start="69:5" pos:end="69:7">vst</name><operator pos:start="69:8" pos:end="69:9">-&gt;</operator><name pos:start="69:10" pos:end="69:14">codec</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:25">codec_tag</name></name>       <operator pos:start="69:33" pos:end="69:33">=</operator> <call pos:start="69:35" pos:end="69:63"><name pos:start="69:35" pos:end="69:51">read_line_and_int</name><argument_list pos:start="69:52" pos:end="69:63">(<argument pos:start="69:53" pos:end="69:54"><expr pos:start="69:53" pos:end="69:54"><name pos:start="69:53" pos:end="69:54">pb</name></expr></argument>, <argument pos:start="69:57" pos:end="69:62"><expr pos:start="69:57" pos:end="69:62"><operator pos:start="69:57" pos:end="69:57">&amp;</operator><name pos:start="69:58" pos:end="69:62">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="69:67" pos:end="69:81">// video format</comment>

    <expr_stmt pos:start="71:5" pos:end="71:64"><expr pos:start="71:5" pos:end="71:63"><name pos:start="71:5" pos:end="71:21"><name pos:start="71:5" pos:end="71:7">vst</name><operator pos:start="71:8" pos:end="71:9">-&gt;</operator><name pos:start="71:10" pos:end="71:14">codec</name><operator pos:start="71:15" pos:end="71:16">-&gt;</operator><name pos:start="71:17" pos:end="71:21">width</name></name>           <operator pos:start="71:33" pos:end="71:33">=</operator> <call pos:start="71:35" pos:end="71:63"><name pos:start="71:35" pos:end="71:51">read_line_and_int</name><argument_list pos:start="71:52" pos:end="71:63">(<argument pos:start="71:53" pos:end="71:54"><expr pos:start="71:53" pos:end="71:54"><name pos:start="71:53" pos:end="71:54">pb</name></expr></argument>, <argument pos:start="71:57" pos:end="71:62"><expr pos:start="71:57" pos:end="71:62"><operator pos:start="71:57" pos:end="71:57">&amp;</operator><name pos:start="71:58" pos:end="71:62">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="71:67" pos:end="71:80">// video width</comment>

    <expr_stmt pos:start="73:5" pos:end="73:64"><expr pos:start="73:5" pos:end="73:63"><name pos:start="73:5" pos:end="73:22"><name pos:start="73:5" pos:end="73:7">vst</name><operator pos:start="73:8" pos:end="73:9">-&gt;</operator><name pos:start="73:10" pos:end="73:14">codec</name><operator pos:start="73:15" pos:end="73:16">-&gt;</operator><name pos:start="73:17" pos:end="73:22">height</name></name>          <operator pos:start="73:33" pos:end="73:33">=</operator> <call pos:start="73:35" pos:end="73:63"><name pos:start="73:35" pos:end="73:51">read_line_and_int</name><argument_list pos:start="73:52" pos:end="73:63">(<argument pos:start="73:53" pos:end="73:54"><expr pos:start="73:53" pos:end="73:54"><name pos:start="73:53" pos:end="73:54">pb</name></expr></argument>, <argument pos:start="73:57" pos:end="73:62"><expr pos:start="73:57" pos:end="73:62"><operator pos:start="73:57" pos:end="73:57">&amp;</operator><name pos:start="73:58" pos:end="73:62">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="73:67" pos:end="73:81">// video height</comment>

    <expr_stmt pos:start="75:5" pos:end="75:70"><expr pos:start="75:5" pos:end="75:69"><name pos:start="75:5" pos:end="75:37"><name pos:start="75:5" pos:end="75:7">vst</name><operator pos:start="75:8" pos:end="75:9">-&gt;</operator><name pos:start="75:10" pos:end="75:14">codec</name><operator pos:start="75:15" pos:end="75:16">-&gt;</operator><name pos:start="75:17" pos:end="75:37">bits_per_coded_sample</name></name> <operator pos:start="75:39" pos:end="75:39">=</operator> <call pos:start="75:41" pos:end="75:69"><name pos:start="75:41" pos:end="75:57">read_line_and_int</name><argument_list pos:start="75:58" pos:end="75:69">(<argument pos:start="75:59" pos:end="75:60"><expr pos:start="75:59" pos:end="75:60"><name pos:start="75:59" pos:end="75:60">pb</name></expr></argument>, <argument pos:start="75:63" pos:end="75:68"><expr pos:start="75:63" pos:end="75:68"><operator pos:start="75:63" pos:end="75:63">&amp;</operator><name pos:start="75:64" pos:end="75:68">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="75:73" pos:end="75:96">// video bits per sample</comment>

    <expr_stmt pos:start="77:5" pos:end="77:47"><expr pos:start="77:5" pos:end="77:46"><name pos:start="77:5" pos:end="77:9">error</name> <operator pos:start="77:11" pos:end="77:12">|=</operator> <call pos:start="77:14" pos:end="77:46"><name pos:start="77:14" pos:end="77:22">read_line</name><argument_list pos:start="77:23" pos:end="77:46">(<argument pos:start="77:24" pos:end="77:25"><expr pos:start="77:24" pos:end="77:25"><name pos:start="77:24" pos:end="77:25">pb</name></expr></argument>, <argument pos:start="77:28" pos:end="77:31"><expr pos:start="77:28" pos:end="77:31"><name pos:start="77:28" pos:end="77:31">line</name></expr></argument>, <argument pos:start="77:34" pos:end="77:45"><expr pos:start="77:34" pos:end="77:45"><sizeof pos:start="77:34" pos:end="77:45">sizeof<argument_list pos:start="77:40" pos:end="77:45">(<argument pos:start="77:41" pos:end="77:44"><expr pos:start="77:41" pos:end="77:44"><name pos:start="77:41" pos:end="77:44">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>                   <comment type="line" pos:start="77:67" pos:end="77:92">// video frames per second</comment>

    <expr_stmt pos:start="79:5" pos:end="79:33"><expr pos:start="79:5" pos:end="79:32"><name pos:start="79:5" pos:end="79:7">fps</name> <operator pos:start="79:9" pos:end="79:9">=</operator> <call pos:start="79:11" pos:end="79:32"><name pos:start="79:11" pos:end="79:18">read_fps</name><argument_list pos:start="79:19" pos:end="79:32">(<argument pos:start="79:20" pos:end="79:23"><expr pos:start="79:20" pos:end="79:23"><name pos:start="79:20" pos:end="79:23">line</name></expr></argument>, <argument pos:start="79:26" pos:end="79:31"><expr pos:start="79:26" pos:end="79:31"><operator pos:start="79:26" pos:end="79:26">&amp;</operator><name pos:start="79:27" pos:end="79:31">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:51"><expr pos:start="81:5" pos:end="81:50"><call pos:start="81:5" pos:end="81:50"><name pos:start="81:5" pos:end="81:23">avpriv_set_pts_info</name><argument_list pos:start="81:24" pos:end="81:50">(<argument pos:start="81:25" pos:end="81:27"><expr pos:start="81:25" pos:end="81:27"><name pos:start="81:25" pos:end="81:27">vst</name></expr></argument>, <argument pos:start="81:30" pos:end="81:31"><expr pos:start="81:30" pos:end="81:31"><literal type="number" pos:start="81:30" pos:end="81:31">32</literal></expr></argument>, <argument pos:start="81:34" pos:end="81:40"><expr pos:start="81:34" pos:end="81:40"><name pos:start="81:34" pos:end="81:40"><name pos:start="81:34" pos:end="81:36">fps</name><operator pos:start="81:37" pos:end="81:37">.</operator><name pos:start="81:38" pos:end="81:40">den</name></name></expr></argument>, <argument pos:start="81:43" pos:end="81:49"><expr pos:start="81:43" pos:end="81:49"><name pos:start="81:43" pos:end="81:49"><name pos:start="81:43" pos:end="81:45">fps</name><operator pos:start="81:46" pos:end="81:46">.</operator><name pos:start="81:47" pos:end="81:49">num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="85:5" pos:end="85:33">// Figure out the video codec</comment>

    <switch pos:start="87:5" pos:end="123:5">switch <condition pos:start="87:12" pos:end="87:34">(<expr pos:start="87:13" pos:end="87:33"><name pos:start="87:13" pos:end="87:33"><name pos:start="87:13" pos:end="87:15">vst</name><operator pos:start="87:16" pos:end="87:17">-&gt;</operator><name pos:start="87:18" pos:end="87:22">codec</name><operator pos:start="87:23" pos:end="87:24">-&gt;</operator><name pos:start="87:25" pos:end="87:33">codec_tag</name></name></expr>)</condition> <block pos:start="87:36" pos:end="123:5">{<block_content pos:start="99:9" pos:end="121:52">

<cpp:if pos:start="89:1" pos:end="89:5">#<cpp:directive pos:start="89:2" pos:end="89:3">if</cpp:directive> <expr pos:start="89:5" pos:end="89:5"><literal type="number" pos:start="89:5" pos:end="89:5">0</literal></expr></cpp:if>

        case 122:

            vst-&gt;codec-&gt;codec_id = AV_CODEC_ID_ESCAPE122;

            break;

<cpp:endif pos:start="97:1" pos:end="97:6">#<cpp:directive pos:start="97:2" pos:end="97:6">endif</cpp:directive></cpp:endif>

        <case pos:start="99:9" pos:end="99:17">case <expr pos:start="99:14" pos:end="99:16"><literal type="number" pos:start="99:14" pos:end="99:16">124</literal></expr>:</case>

            <expr_stmt pos:start="101:13" pos:end="101:57"><expr pos:start="101:13" pos:end="101:56"><name pos:start="101:13" pos:end="101:32"><name pos:start="101:13" pos:end="101:15">vst</name><operator pos:start="101:16" pos:end="101:17">-&gt;</operator><name pos:start="101:18" pos:end="101:22">codec</name><operator pos:start="101:23" pos:end="101:24">-&gt;</operator><name pos:start="101:25" pos:end="101:32">codec_id</name></name> <operator pos:start="101:34" pos:end="101:34">=</operator> <name pos:start="101:36" pos:end="101:56">AV_CODEC_ID_ESCAPE124</name></expr>;</expr_stmt>

            <comment type="line" pos:start="103:13" pos:end="103:59">// The header is wrong here, at least sometimes</comment>

            <expr_stmt pos:start="105:13" pos:end="105:51"><expr pos:start="105:13" pos:end="105:50"><name pos:start="105:13" pos:end="105:45"><name pos:start="105:13" pos:end="105:15">vst</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:22">codec</name><operator pos:start="105:23" pos:end="105:24">-&gt;</operator><name pos:start="105:25" pos:end="105:45">bits_per_coded_sample</name></name> <operator pos:start="105:47" pos:end="105:47">=</operator> <literal type="number" pos:start="105:49" pos:end="105:50">16</literal></expr>;</expr_stmt>

            <break pos:start="107:13" pos:end="107:18">break;</break>

        <case pos:start="109:9" pos:end="109:17">case <expr pos:start="109:14" pos:end="109:16"><literal type="number" pos:start="109:14" pos:end="109:16">130</literal></expr>:</case>

            <expr_stmt pos:start="111:13" pos:end="111:57"><expr pos:start="111:13" pos:end="111:56"><name pos:start="111:13" pos:end="111:32"><name pos:start="111:13" pos:end="111:15">vst</name><operator pos:start="111:16" pos:end="111:17">-&gt;</operator><name pos:start="111:18" pos:end="111:22">codec</name><operator pos:start="111:23" pos:end="111:24">-&gt;</operator><name pos:start="111:25" pos:end="111:32">codec_id</name></name> <operator pos:start="111:34" pos:end="111:34">=</operator> <name pos:start="111:36" pos:end="111:56">AV_CODEC_ID_ESCAPE130</name></expr>;</expr_stmt>

            <break pos:start="113:13" pos:end="113:18">break;</break>

        <default pos:start="115:9" pos:end="115:16">default:</default>

            <expr_stmt pos:start="117:13" pos:end="119:65"><expr pos:start="117:13" pos:end="119:64"><call pos:start="117:13" pos:end="119:64"><name pos:start="117:13" pos:end="117:41">avpriv_report_missing_feature</name><argument_list pos:start="117:42" pos:end="119:64">(<argument pos:start="117:43" pos:end="117:43"><expr pos:start="117:43" pos:end="117:43"><name pos:start="117:43" pos:end="117:43">s</name></expr></argument>, <argument pos:start="117:46" pos:end="117:62"><expr pos:start="117:46" pos:end="117:62"><literal type="string" pos:start="117:46" pos:end="117:62">"Video format %i"</literal></expr></argument>,

                                          <argument pos:start="119:43" pos:end="119:63"><expr pos:start="119:43" pos:end="119:63"><name pos:start="119:43" pos:end="119:63"><name pos:start="119:43" pos:end="119:45">vst</name><operator pos:start="119:46" pos:end="119:47">-&gt;</operator><name pos:start="119:48" pos:end="119:52">codec</name><operator pos:start="119:53" pos:end="119:54">-&gt;</operator><name pos:start="119:55" pos:end="119:63">codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:52"><expr pos:start="121:13" pos:end="121:51"><name pos:start="121:13" pos:end="121:32"><name pos:start="121:13" pos:end="121:15">vst</name><operator pos:start="121:16" pos:end="121:17">-&gt;</operator><name pos:start="121:18" pos:end="121:22">codec</name><operator pos:start="121:23" pos:end="121:24">-&gt;</operator><name pos:start="121:25" pos:end="121:32">codec_id</name></name> <operator pos:start="121:34" pos:end="121:34">=</operator> <name pos:start="121:36" pos:end="121:51">AV_CODEC_ID_NONE</name></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <comment type="line" pos:start="127:5" pos:end="127:20">// Audio headers</comment>



    <comment type="line" pos:start="131:5" pos:end="131:63">// ARMovie supports multiple audio tracks; I don't have any</comment>

    <comment type="line" pos:start="133:5" pos:end="133:64">// samples, though. This code will ignore additional tracks.</comment>

    <expr_stmt pos:start="135:5" pos:end="135:49"><expr pos:start="135:5" pos:end="135:48"><name pos:start="135:5" pos:end="135:16">audio_format</name> <operator pos:start="135:18" pos:end="135:18">=</operator> <call pos:start="135:20" pos:end="135:48"><name pos:start="135:20" pos:end="135:36">read_line_and_int</name><argument_list pos:start="135:37" pos:end="135:48">(<argument pos:start="135:38" pos:end="135:39"><expr pos:start="135:38" pos:end="135:39"><name pos:start="135:38" pos:end="135:39">pb</name></expr></argument>, <argument pos:start="135:42" pos:end="135:47"><expr pos:start="135:42" pos:end="135:47"><operator pos:start="135:42" pos:end="135:42">&amp;</operator><name pos:start="135:43" pos:end="135:47">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="135:52" pos:end="135:69">// audio format ID</comment>

    <if_stmt pos:start="137:5" pos:end="231:5"><if pos:start="137:5" pos:end="225:5">if <condition pos:start="137:8" pos:end="137:21">(<expr pos:start="137:9" pos:end="137:20"><name pos:start="137:9" pos:end="137:20">audio_format</name></expr>)</condition> <block pos:start="137:23" pos:end="225:5">{<block_content pos:start="139:9" pos:end="223:62">

        <expr_stmt pos:start="139:9" pos:end="139:43"><expr pos:start="139:9" pos:end="139:42"><name pos:start="139:9" pos:end="139:11">ast</name> <operator pos:start="139:13" pos:end="139:13">=</operator> <call pos:start="139:15" pos:end="139:42"><name pos:start="139:15" pos:end="139:33">avformat_new_stream</name><argument_list pos:start="139:34" pos:end="139:42">(<argument pos:start="139:35" pos:end="139:35"><expr pos:start="139:35" pos:end="139:35"><name pos:start="139:35" pos:end="139:35">s</name></expr></argument>, <argument pos:start="139:38" pos:end="139:41"><expr pos:start="139:38" pos:end="139:41"><name pos:start="139:38" pos:end="139:41">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="141:9" pos:end="143:35"><if pos:start="141:9" pos:end="143:35">if <condition pos:start="141:12" pos:end="141:17">(<expr pos:start="141:13" pos:end="141:16"><operator pos:start="141:13" pos:end="141:13">!</operator><name pos:start="141:14" pos:end="141:16">ast</name></expr>)</condition><block type="pseudo" pos:start="143:13" pos:end="143:35"><block_content pos:start="143:13" pos:end="143:35">

            <return pos:start="143:13" pos:end="143:35">return <expr pos:start="143:20" pos:end="143:34"><call pos:start="143:20" pos:end="143:34"><name pos:start="143:20" pos:end="143:26">AVERROR</name><argument_list pos:start="143:27" pos:end="143:34">(<argument pos:start="143:28" pos:end="143:33"><expr pos:start="143:28" pos:end="143:33"><name pos:start="143:28" pos:end="143:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:57"><expr pos:start="145:9" pos:end="145:56"><name pos:start="145:9" pos:end="145:30"><name pos:start="145:9" pos:end="145:11">ast</name><operator pos:start="145:12" pos:end="145:13">-&gt;</operator><name pos:start="145:14" pos:end="145:18">codec</name><operator pos:start="145:19" pos:end="145:20">-&gt;</operator><name pos:start="145:21" pos:end="145:30">codec_type</name></name>      <operator pos:start="145:37" pos:end="145:37">=</operator> <name pos:start="145:39" pos:end="145:56">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:51"><expr pos:start="147:9" pos:end="147:50"><name pos:start="147:9" pos:end="147:29"><name pos:start="147:9" pos:end="147:11">ast</name><operator pos:start="147:12" pos:end="147:13">-&gt;</operator><name pos:start="147:14" pos:end="147:18">codec</name><operator pos:start="147:19" pos:end="147:20">-&gt;</operator><name pos:start="147:21" pos:end="147:29">codec_tag</name></name>       <operator pos:start="147:37" pos:end="147:37">=</operator> <name pos:start="147:39" pos:end="147:50">audio_format</name></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:68"><expr pos:start="149:9" pos:end="149:67"><name pos:start="149:9" pos:end="149:31"><name pos:start="149:9" pos:end="149:11">ast</name><operator pos:start="149:12" pos:end="149:13">-&gt;</operator><name pos:start="149:14" pos:end="149:18">codec</name><operator pos:start="149:19" pos:end="149:20">-&gt;</operator><name pos:start="149:21" pos:end="149:31">sample_rate</name></name>     <operator pos:start="149:37" pos:end="149:37">=</operator> <call pos:start="149:39" pos:end="149:67"><name pos:start="149:39" pos:end="149:55">read_line_and_int</name><argument_list pos:start="149:56" pos:end="149:67">(<argument pos:start="149:57" pos:end="149:58"><expr pos:start="149:57" pos:end="149:58"><name pos:start="149:57" pos:end="149:58">pb</name></expr></argument>, <argument pos:start="149:61" pos:end="149:66"><expr pos:start="149:61" pos:end="149:66"><operator pos:start="149:61" pos:end="149:61">&amp;</operator><name pos:start="149:62" pos:end="149:66">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="149:71" pos:end="149:86">// audio bitrate</comment>

        <expr_stmt pos:start="151:9" pos:end="151:68"><expr pos:start="151:9" pos:end="151:67"><name pos:start="151:9" pos:end="151:28"><name pos:start="151:9" pos:end="151:11">ast</name><operator pos:start="151:12" pos:end="151:13">-&gt;</operator><name pos:start="151:14" pos:end="151:18">codec</name><operator pos:start="151:19" pos:end="151:20">-&gt;</operator><name pos:start="151:21" pos:end="151:28">channels</name></name>        <operator pos:start="151:37" pos:end="151:37">=</operator> <call pos:start="151:39" pos:end="151:67"><name pos:start="151:39" pos:end="151:55">read_line_and_int</name><argument_list pos:start="151:56" pos:end="151:67">(<argument pos:start="151:57" pos:end="151:58"><expr pos:start="151:57" pos:end="151:58"><name pos:start="151:57" pos:end="151:58">pb</name></expr></argument>, <argument pos:start="151:61" pos:end="151:66"><expr pos:start="151:61" pos:end="151:66"><operator pos:start="151:61" pos:end="151:61">&amp;</operator><name pos:start="151:62" pos:end="151:66">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="151:71" pos:end="151:97">// number of audio channels</comment>

        <expr_stmt pos:start="153:9" pos:end="153:74"><expr pos:start="153:9" pos:end="153:73"><name pos:start="153:9" pos:end="153:41"><name pos:start="153:9" pos:end="153:11">ast</name><operator pos:start="153:12" pos:end="153:13">-&gt;</operator><name pos:start="153:14" pos:end="153:18">codec</name><operator pos:start="153:19" pos:end="153:20">-&gt;</operator><name pos:start="153:21" pos:end="153:41">bits_per_coded_sample</name></name> <operator pos:start="153:43" pos:end="153:43">=</operator> <call pos:start="153:45" pos:end="153:73"><name pos:start="153:45" pos:end="153:61">read_line_and_int</name><argument_list pos:start="153:62" pos:end="153:73">(<argument pos:start="153:63" pos:end="153:64"><expr pos:start="153:63" pos:end="153:64"><name pos:start="153:63" pos:end="153:64">pb</name></expr></argument>, <argument pos:start="153:67" pos:end="153:72"><expr pos:start="153:67" pos:end="153:72"><operator pos:start="153:67" pos:end="153:67">&amp;</operator><name pos:start="153:68" pos:end="153:72">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="153:77" pos:end="153:100">// audio bits per sample</comment>

        <comment type="line" pos:start="155:9" pos:end="155:71">// At least one sample uses 0 for ADPCM, which is really 4 bits</comment>

        <comment type="line" pos:start="157:9" pos:end="157:22">// per sample.</comment>

        <if_stmt pos:start="159:9" pos:end="161:50"><if pos:start="159:9" pos:end="161:50">if <condition pos:start="159:12" pos:end="159:51">(<expr pos:start="159:13" pos:end="159:50"><name pos:start="159:13" pos:end="159:45"><name pos:start="159:13" pos:end="159:15">ast</name><operator pos:start="159:16" pos:end="159:17">-&gt;</operator><name pos:start="159:18" pos:end="159:22">codec</name><operator pos:start="159:23" pos:end="159:24">-&gt;</operator><name pos:start="159:25" pos:end="159:45">bits_per_coded_sample</name></name> <operator pos:start="159:47" pos:end="159:48">==</operator> <literal type="number" pos:start="159:50" pos:end="159:50">0</literal></expr>)</condition><block type="pseudo" pos:start="161:13" pos:end="161:50"><block_content pos:start="161:13" pos:end="161:50">

            <expr_stmt pos:start="161:13" pos:end="161:50"><expr pos:start="161:13" pos:end="161:49"><name pos:start="161:13" pos:end="161:45"><name pos:start="161:13" pos:end="161:15">ast</name><operator pos:start="161:16" pos:end="161:17">-&gt;</operator><name pos:start="161:18" pos:end="161:22">codec</name><operator pos:start="161:23" pos:end="161:24">-&gt;</operator><name pos:start="161:25" pos:end="161:45">bits_per_coded_sample</name></name> <operator pos:start="161:47" pos:end="161:47">=</operator> <literal type="number" pos:start="161:49" pos:end="161:49">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="165:9" pos:end="169:52"><expr pos:start="165:9" pos:end="169:51"><name pos:start="165:9" pos:end="165:28"><name pos:start="165:9" pos:end="165:11">ast</name><operator pos:start="165:12" pos:end="165:13">-&gt;</operator><name pos:start="165:14" pos:end="165:18">codec</name><operator pos:start="165:19" pos:end="165:20">-&gt;</operator><name pos:start="165:21" pos:end="165:28">bit_rate</name></name> <operator pos:start="165:30" pos:end="165:30">=</operator> <name pos:start="165:32" pos:end="165:54"><name pos:start="165:32" pos:end="165:34">ast</name><operator pos:start="165:35" pos:end="165:36">-&gt;</operator><name pos:start="165:37" pos:end="165:41">codec</name><operator pos:start="165:42" pos:end="165:43">-&gt;</operator><name pos:start="165:44" pos:end="165:54">sample_rate</name></name> <operator pos:start="165:56" pos:end="165:56">*</operator>

                               <name pos:start="167:32" pos:end="167:64"><name pos:start="167:32" pos:end="167:34">ast</name><operator pos:start="167:35" pos:end="167:36">-&gt;</operator><name pos:start="167:37" pos:end="167:41">codec</name><operator pos:start="167:42" pos:end="167:43">-&gt;</operator><name pos:start="167:44" pos:end="167:64">bits_per_coded_sample</name></name> <operator pos:start="167:66" pos:end="167:66">*</operator>

                               <name pos:start="169:32" pos:end="169:51"><name pos:start="169:32" pos:end="169:34">ast</name><operator pos:start="169:35" pos:end="169:36">-&gt;</operator><name pos:start="169:37" pos:end="169:41">codec</name><operator pos:start="169:42" pos:end="169:43">-&gt;</operator><name pos:start="169:44" pos:end="169:51">channels</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="173:9" pos:end="173:48"><expr pos:start="173:9" pos:end="173:47"><name pos:start="173:9" pos:end="173:28"><name pos:start="173:9" pos:end="173:11">ast</name><operator pos:start="173:12" pos:end="173:13">-&gt;</operator><name pos:start="173:14" pos:end="173:18">codec</name><operator pos:start="173:19" pos:end="173:20">-&gt;</operator><name pos:start="173:21" pos:end="173:28">codec_id</name></name> <operator pos:start="173:30" pos:end="173:30">=</operator> <name pos:start="173:32" pos:end="173:47">AV_CODEC_ID_NONE</name></expr>;</expr_stmt>

        <switch pos:start="175:9" pos:end="217:9">switch <condition pos:start="175:16" pos:end="175:29">(<expr pos:start="175:17" pos:end="175:28"><name pos:start="175:17" pos:end="175:28">audio_format</name></expr>)</condition> <block pos:start="175:31" pos:end="217:9">{<block_content pos:start="177:13" pos:end="215:22">

            <case pos:start="177:13" pos:end="177:19">case <expr pos:start="177:18" pos:end="177:18"><literal type="number" pos:start="177:18" pos:end="177:18">1</literal></expr>:</case>

                <if_stmt pos:start="179:17" pos:end="187:17"><if pos:start="179:17" pos:end="187:17">if <condition pos:start="179:20" pos:end="179:60">(<expr pos:start="179:21" pos:end="179:59"><name pos:start="179:21" pos:end="179:53"><name pos:start="179:21" pos:end="179:23">ast</name><operator pos:start="179:24" pos:end="179:25">-&gt;</operator><name pos:start="179:26" pos:end="179:30">codec</name><operator pos:start="179:31" pos:end="179:32">-&gt;</operator><name pos:start="179:33" pos:end="179:53">bits_per_coded_sample</name></name> <operator pos:start="179:55" pos:end="179:56">==</operator> <literal type="number" pos:start="179:58" pos:end="179:59">16</literal></expr>)</condition> <block pos:start="179:62" pos:end="187:17">{<block_content pos:start="183:21" pos:end="185:26">

                    <comment type="line" pos:start="181:21" pos:end="181:52">// 16-bit audio is always signed</comment>

                    <expr_stmt pos:start="183:21" pos:end="183:65"><expr pos:start="183:21" pos:end="183:64"><name pos:start="183:21" pos:end="183:40"><name pos:start="183:21" pos:end="183:23">ast</name><operator pos:start="183:24" pos:end="183:25">-&gt;</operator><name pos:start="183:26" pos:end="183:30">codec</name><operator pos:start="183:31" pos:end="183:32">-&gt;</operator><name pos:start="183:33" pos:end="183:40">codec_id</name></name> <operator pos:start="183:42" pos:end="183:42">=</operator> <name pos:start="183:44" pos:end="183:64">AV_CODEC_ID_PCM_S16LE</name></expr>;</expr_stmt>

                    <break pos:start="185:21" pos:end="185:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <comment type="line" pos:start="189:17" pos:end="189:77">// There are some other formats listed as legal per the spec;</comment>

                <comment type="line" pos:start="191:17" pos:end="191:34">// samples needed.</comment>

                <break pos:start="193:17" pos:end="193:22">break;</break>

            <case pos:start="195:13" pos:end="195:21">case <expr pos:start="195:18" pos:end="195:20"><literal type="number" pos:start="195:18" pos:end="195:20">101</literal></expr>:</case>

                <if_stmt pos:start="197:17" pos:end="213:17"><if pos:start="197:17" pos:end="207:17">if <condition pos:start="197:20" pos:end="197:59">(<expr pos:start="197:21" pos:end="197:58"><name pos:start="197:21" pos:end="197:53"><name pos:start="197:21" pos:end="197:23">ast</name><operator pos:start="197:24" pos:end="197:25">-&gt;</operator><name pos:start="197:26" pos:end="197:30">codec</name><operator pos:start="197:31" pos:end="197:32">-&gt;</operator><name pos:start="197:33" pos:end="197:53">bits_per_coded_sample</name></name> <operator pos:start="197:55" pos:end="197:56">==</operator> <literal type="number" pos:start="197:58" pos:end="197:58">8</literal></expr>)</condition> <block pos:start="197:61" pos:end="207:17">{<block_content pos:start="203:21" pos:end="205:26">

                    <comment type="line" pos:start="199:21" pos:end="199:70">// The samples with this kind of audio that I have</comment>

                    <comment type="line" pos:start="201:21" pos:end="201:40">// are all unsigned.</comment>

                    <expr_stmt pos:start="203:21" pos:end="203:62"><expr pos:start="203:21" pos:end="203:61"><name pos:start="203:21" pos:end="203:40"><name pos:start="203:21" pos:end="203:23">ast</name><operator pos:start="203:24" pos:end="203:25">-&gt;</operator><name pos:start="203:26" pos:end="203:30">codec</name><operator pos:start="203:31" pos:end="203:32">-&gt;</operator><name pos:start="203:33" pos:end="203:40">codec_id</name></name> <operator pos:start="203:42" pos:end="203:42">=</operator> <name pos:start="203:44" pos:end="203:61">AV_CODEC_ID_PCM_U8</name></expr>;</expr_stmt>

                    <break pos:start="205:21" pos:end="205:26">break;</break>

                </block_content>}</block></if> <if type="elseif" pos:start="207:19" pos:end="213:17">else if <condition pos:start="207:27" pos:end="207:66">(<expr pos:start="207:28" pos:end="207:65"><name pos:start="207:28" pos:end="207:60"><name pos:start="207:28" pos:end="207:30">ast</name><operator pos:start="207:31" pos:end="207:32">-&gt;</operator><name pos:start="207:33" pos:end="207:37">codec</name><operator pos:start="207:38" pos:end="207:39">-&gt;</operator><name pos:start="207:40" pos:end="207:60">bits_per_coded_sample</name></name> <operator pos:start="207:62" pos:end="207:63">==</operator> <literal type="number" pos:start="207:65" pos:end="207:65">4</literal></expr>)</condition> <block pos:start="207:68" pos:end="213:17">{<block_content pos:start="209:21" pos:end="211:26">

                    <expr_stmt pos:start="209:21" pos:end="209:73"><expr pos:start="209:21" pos:end="209:72"><name pos:start="209:21" pos:end="209:40"><name pos:start="209:21" pos:end="209:23">ast</name><operator pos:start="209:24" pos:end="209:25">-&gt;</operator><name pos:start="209:26" pos:end="209:30">codec</name><operator pos:start="209:31" pos:end="209:32">-&gt;</operator><name pos:start="209:33" pos:end="209:40">codec_id</name></name> <operator pos:start="209:42" pos:end="209:42">=</operator> <name pos:start="209:44" pos:end="209:72">AV_CODEC_ID_ADPCM_IMA_EA_SEAD</name></expr>;</expr_stmt>

                    <break pos:start="211:21" pos:end="211:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <break pos:start="215:17" pos:end="215:22">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="219:9" pos:end="221:70"><if pos:start="219:9" pos:end="221:70">if <condition pos:start="219:12" pos:end="219:53">(<expr pos:start="219:13" pos:end="219:52"><name pos:start="219:13" pos:end="219:32"><name pos:start="219:13" pos:end="219:15">ast</name><operator pos:start="219:16" pos:end="219:17">-&gt;</operator><name pos:start="219:18" pos:end="219:22">codec</name><operator pos:start="219:23" pos:end="219:24">-&gt;</operator><name pos:start="219:25" pos:end="219:32">codec_id</name></name> <operator pos:start="219:34" pos:end="219:35">==</operator> <name pos:start="219:37" pos:end="219:52">AV_CODEC_ID_NONE</name></expr>)</condition><block type="pseudo" pos:start="221:13" pos:end="221:70"><block_content pos:start="221:13" pos:end="221:70">

            <expr_stmt pos:start="221:13" pos:end="221:70"><expr pos:start="221:13" pos:end="221:69"><call pos:start="221:13" pos:end="221:69"><name pos:start="221:13" pos:end="221:33">avpriv_request_sample</name><argument_list pos:start="221:34" pos:end="221:69">(<argument pos:start="221:35" pos:end="221:35"><expr pos:start="221:35" pos:end="221:35"><name pos:start="221:35" pos:end="221:35">s</name></expr></argument>, <argument pos:start="221:38" pos:end="221:54"><expr pos:start="221:38" pos:end="221:54"><literal type="string" pos:start="221:38" pos:end="221:54">"Audio format %i"</literal></expr></argument>, <argument pos:start="221:57" pos:end="221:68"><expr pos:start="221:57" pos:end="221:68"><name pos:start="221:57" pos:end="221:68">audio_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="223:9" pos:end="223:62"><expr pos:start="223:9" pos:end="223:61"><call pos:start="223:9" pos:end="223:61"><name pos:start="223:9" pos:end="223:27">avpriv_set_pts_info</name><argument_list pos:start="223:28" pos:end="223:61">(<argument pos:start="223:29" pos:end="223:31"><expr pos:start="223:29" pos:end="223:31"><name pos:start="223:29" pos:end="223:31">ast</name></expr></argument>, <argument pos:start="223:34" pos:end="223:35"><expr pos:start="223:34" pos:end="223:35"><literal type="number" pos:start="223:34" pos:end="223:35">32</literal></expr></argument>, <argument pos:start="223:38" pos:end="223:38"><expr pos:start="223:38" pos:end="223:38"><literal type="number" pos:start="223:38" pos:end="223:38">1</literal></expr></argument>, <argument pos:start="223:41" pos:end="223:60"><expr pos:start="223:41" pos:end="223:60"><name pos:start="223:41" pos:end="223:60"><name pos:start="223:41" pos:end="223:43">ast</name><operator pos:start="223:44" pos:end="223:45">-&gt;</operator><name pos:start="223:46" pos:end="223:50">codec</name><operator pos:start="223:51" pos:end="223:52">-&gt;</operator><name pos:start="223:53" pos:end="223:60">bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="225:7" pos:end="231:5">else <block pos:start="225:12" pos:end="231:5">{<block_content pos:start="227:9" pos:end="229:55">

        <for pos:start="227:9" pos:end="229:55">for <control pos:start="227:13" pos:end="227:31">(<init pos:start="227:14" pos:end="227:19"><expr pos:start="227:14" pos:end="227:18"><name pos:start="227:14" pos:end="227:14">i</name> <operator pos:start="227:16" pos:end="227:16">=</operator> <literal type="number" pos:start="227:18" pos:end="227:18">0</literal></expr>;</init> <condition pos:start="227:21" pos:end="227:26"><expr pos:start="227:21" pos:end="227:25"><name pos:start="227:21" pos:end="227:21">i</name> <operator pos:start="227:23" pos:end="227:23">&lt;</operator> <literal type="number" pos:start="227:25" pos:end="227:25">3</literal></expr>;</condition> <incr pos:start="227:28" pos:end="227:30"><expr pos:start="227:28" pos:end="227:30"><name pos:start="227:28" pos:end="227:28">i</name><operator pos:start="227:29" pos:end="227:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="229:13" pos:end="229:55"><block_content pos:start="229:13" pos:end="229:55">

            <expr_stmt pos:start="229:13" pos:end="229:55"><expr pos:start="229:13" pos:end="229:54"><name pos:start="229:13" pos:end="229:17">error</name> <operator pos:start="229:19" pos:end="229:20">|=</operator> <call pos:start="229:22" pos:end="229:54"><name pos:start="229:22" pos:end="229:30">read_line</name><argument_list pos:start="229:31" pos:end="229:54">(<argument pos:start="229:32" pos:end="229:33"><expr pos:start="229:32" pos:end="229:33"><name pos:start="229:32" pos:end="229:33">pb</name></expr></argument>, <argument pos:start="229:36" pos:end="229:39"><expr pos:start="229:36" pos:end="229:39"><name pos:start="229:36" pos:end="229:39">line</name></expr></argument>, <argument pos:start="229:42" pos:end="229:53"><expr pos:start="229:42" pos:end="229:53"><sizeof pos:start="229:42" pos:end="229:53">sizeof<argument_list pos:start="229:48" pos:end="229:53">(<argument pos:start="229:49" pos:end="229:52"><expr pos:start="229:49" pos:end="229:52"><name pos:start="229:49" pos:end="229:52">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="235:5" pos:end="235:58"><expr pos:start="235:5" pos:end="235:57"><name pos:start="235:5" pos:end="235:25"><name pos:start="235:5" pos:end="235:7">rpl</name><operator pos:start="235:8" pos:end="235:9">-&gt;</operator><name pos:start="235:10" pos:end="235:25">frames_per_chunk</name></name> <operator pos:start="235:27" pos:end="235:27">=</operator> <call pos:start="235:29" pos:end="235:57"><name pos:start="235:29" pos:end="235:45">read_line_and_int</name><argument_list pos:start="235:46" pos:end="235:57">(<argument pos:start="235:47" pos:end="235:48"><expr pos:start="235:47" pos:end="235:48"><name pos:start="235:47" pos:end="235:48">pb</name></expr></argument>, <argument pos:start="235:51" pos:end="235:56"><expr pos:start="235:51" pos:end="235:56"><operator pos:start="235:51" pos:end="235:51">&amp;</operator><name pos:start="235:52" pos:end="235:56">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="235:61" pos:end="235:85">// video frames per chunk</comment>

    <if_stmt pos:start="237:5" pos:end="243:72"><if pos:start="237:5" pos:end="243:72">if <condition pos:start="237:8" pos:end="237:66">(<expr pos:start="237:9" pos:end="237:65"><name pos:start="237:9" pos:end="237:29"><name pos:start="237:9" pos:end="237:11">rpl</name><operator pos:start="237:12" pos:end="237:13">-&gt;</operator><name pos:start="237:14" pos:end="237:29">frames_per_chunk</name></name> <operator pos:start="237:31" pos:end="237:31">&gt;</operator> <literal type="number" pos:start="237:33" pos:end="237:33">1</literal> <operator pos:start="237:35" pos:end="237:36">&amp;&amp;</operator> <name pos:start="237:38" pos:end="237:58"><name pos:start="237:38" pos:end="237:40">vst</name><operator pos:start="237:41" pos:end="237:42">-&gt;</operator><name pos:start="237:43" pos:end="237:47">codec</name><operator pos:start="237:48" pos:end="237:49">-&gt;</operator><name pos:start="237:50" pos:end="237:58">codec_tag</name></name> <operator pos:start="237:60" pos:end="237:61">!=</operator> <literal type="number" pos:start="237:63" pos:end="237:65">124</literal></expr>)</condition><block type="pseudo" pos:start="239:9" pos:end="243:72"><block_content pos:start="239:9" pos:end="243:72">

        <expr_stmt pos:start="239:9" pos:end="243:72"><expr pos:start="239:9" pos:end="243:71"><call pos:start="239:9" pos:end="243:71"><name pos:start="239:9" pos:end="239:14">av_log</name><argument_list pos:start="239:15" pos:end="243:71">(<argument pos:start="239:16" pos:end="239:16"><expr pos:start="239:16" pos:end="239:16"><name pos:start="239:16" pos:end="239:16">s</name></expr></argument>, <argument pos:start="239:19" pos:end="239:32"><expr pos:start="239:19" pos:end="239:32"><name pos:start="239:19" pos:end="239:32">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="241:16" pos:end="243:47"><expr pos:start="241:16" pos:end="243:47"><literal type="string" pos:start="241:16" pos:end="241:69">"Don't know how to split frames for video format %i. "</literal>

               <literal type="string" pos:start="243:16" pos:end="243:47">"Video stream will be broken!\n"</literal></expr></argument>, <argument pos:start="243:50" pos:end="243:70"><expr pos:start="243:50" pos:end="243:70"><name pos:start="243:50" pos:end="243:70"><name pos:start="243:50" pos:end="243:52">vst</name><operator pos:start="243:53" pos:end="243:54">-&gt;</operator><name pos:start="243:55" pos:end="243:59">codec</name><operator pos:start="243:60" pos:end="243:61">-&gt;</operator><name pos:start="243:62" pos:end="243:70">codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="247:5" pos:end="247:53"><expr pos:start="247:5" pos:end="247:52"><name pos:start="247:5" pos:end="247:20">number_of_chunks</name> <operator pos:start="247:22" pos:end="247:22">=</operator> <call pos:start="247:24" pos:end="247:52"><name pos:start="247:24" pos:end="247:40">read_line_and_int</name><argument_list pos:start="247:41" pos:end="247:52">(<argument pos:start="247:42" pos:end="247:43"><expr pos:start="247:42" pos:end="247:43"><name pos:start="247:42" pos:end="247:43">pb</name></expr></argument>, <argument pos:start="247:46" pos:end="247:51"><expr pos:start="247:46" pos:end="247:51"><operator pos:start="247:46" pos:end="247:46">&amp;</operator><name pos:start="247:47" pos:end="247:51">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="247:56" pos:end="247:86">// number of chunks in the file</comment>

    <comment type="line" pos:start="249:5" pos:end="249:72">// The number in the header is actually the index of the last chunk.</comment>

    <expr_stmt pos:start="251:5" pos:end="251:23"><expr pos:start="251:5" pos:end="251:22"><name pos:start="251:5" pos:end="251:20">number_of_chunks</name><operator pos:start="251:21" pos:end="251:22">++</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="255:5" pos:end="255:47"><expr pos:start="255:5" pos:end="255:46"><name pos:start="255:5" pos:end="255:9">error</name> <operator pos:start="255:11" pos:end="255:12">|=</operator> <call pos:start="255:14" pos:end="255:46"><name pos:start="255:14" pos:end="255:22">read_line</name><argument_list pos:start="255:23" pos:end="255:46">(<argument pos:start="255:24" pos:end="255:25"><expr pos:start="255:24" pos:end="255:25"><name pos:start="255:24" pos:end="255:25">pb</name></expr></argument>, <argument pos:start="255:28" pos:end="255:31"><expr pos:start="255:28" pos:end="255:31"><name pos:start="255:28" pos:end="255:31">line</name></expr></argument>, <argument pos:start="255:34" pos:end="255:45"><expr pos:start="255:34" pos:end="255:45"><sizeof pos:start="255:34" pos:end="255:45">sizeof<argument_list pos:start="255:40" pos:end="255:45">(<argument pos:start="255:41" pos:end="255:44"><expr pos:start="255:41" pos:end="255:44"><name pos:start="255:41" pos:end="255:44">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="255:50" pos:end="255:78">// "even" chunk size in bytes</comment>

    <expr_stmt pos:start="257:5" pos:end="257:47"><expr pos:start="257:5" pos:end="257:46"><name pos:start="257:5" pos:end="257:9">error</name> <operator pos:start="257:11" pos:end="257:12">|=</operator> <call pos:start="257:14" pos:end="257:46"><name pos:start="257:14" pos:end="257:22">read_line</name><argument_list pos:start="257:23" pos:end="257:46">(<argument pos:start="257:24" pos:end="257:25"><expr pos:start="257:24" pos:end="257:25"><name pos:start="257:24" pos:end="257:25">pb</name></expr></argument>, <argument pos:start="257:28" pos:end="257:31"><expr pos:start="257:28" pos:end="257:31"><name pos:start="257:28" pos:end="257:31">line</name></expr></argument>, <argument pos:start="257:34" pos:end="257:45"><expr pos:start="257:34" pos:end="257:45"><sizeof pos:start="257:34" pos:end="257:45">sizeof<argument_list pos:start="257:40" pos:end="257:45">(<argument pos:start="257:41" pos:end="257:44"><expr pos:start="257:41" pos:end="257:44"><name pos:start="257:41" pos:end="257:44">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="257:50" pos:end="257:77">// "odd" chunk size in bytes</comment>

    <expr_stmt pos:start="259:5" pos:end="261:38"><expr pos:start="259:5" pos:end="261:37"><name pos:start="259:5" pos:end="259:24">chunk_catalog_offset</name> <operator pos:start="259:26" pos:end="259:26">=</operator>                       <comment type="line" pos:start="259:50" pos:end="259:81">// offset of the "chunk catalog"</comment>

        <call pos:start="261:9" pos:end="261:37"><name pos:start="261:9" pos:end="261:25">read_line_and_int</name><argument_list pos:start="261:26" pos:end="261:37">(<argument pos:start="261:27" pos:end="261:28"><expr pos:start="261:27" pos:end="261:28"><name pos:start="261:27" pos:end="261:28">pb</name></expr></argument>, <argument pos:start="261:31" pos:end="261:36"><expr pos:start="261:31" pos:end="261:36"><operator pos:start="261:31" pos:end="261:31">&amp;</operator><name pos:start="261:32" pos:end="261:36">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>           <comment type="line" pos:start="261:50" pos:end="261:66">//   (file index)</comment>

    <expr_stmt pos:start="263:5" pos:end="263:47"><expr pos:start="263:5" pos:end="263:46"><name pos:start="263:5" pos:end="263:9">error</name> <operator pos:start="263:11" pos:end="263:12">|=</operator> <call pos:start="263:14" pos:end="263:46"><name pos:start="263:14" pos:end="263:22">read_line</name><argument_list pos:start="263:23" pos:end="263:46">(<argument pos:start="263:24" pos:end="263:25"><expr pos:start="263:24" pos:end="263:25"><name pos:start="263:24" pos:end="263:25">pb</name></expr></argument>, <argument pos:start="263:28" pos:end="263:31"><expr pos:start="263:28" pos:end="263:31"><name pos:start="263:28" pos:end="263:31">line</name></expr></argument>, <argument pos:start="263:34" pos:end="263:45"><expr pos:start="263:34" pos:end="263:45"><sizeof pos:start="263:34" pos:end="263:45">sizeof<argument_list pos:start="263:40" pos:end="263:45">(<argument pos:start="263:41" pos:end="263:44"><expr pos:start="263:41" pos:end="263:44"><name pos:start="263:41" pos:end="263:44">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="263:50" pos:end="263:78">// offset to "helpful" sprite</comment>

    <expr_stmt pos:start="265:5" pos:end="265:47"><expr pos:start="265:5" pos:end="265:46"><name pos:start="265:5" pos:end="265:9">error</name> <operator pos:start="265:11" pos:end="265:12">|=</operator> <call pos:start="265:14" pos:end="265:46"><name pos:start="265:14" pos:end="265:22">read_line</name><argument_list pos:start="265:23" pos:end="265:46">(<argument pos:start="265:24" pos:end="265:25"><expr pos:start="265:24" pos:end="265:25"><name pos:start="265:24" pos:end="265:25">pb</name></expr></argument>, <argument pos:start="265:28" pos:end="265:31"><expr pos:start="265:28" pos:end="265:31"><name pos:start="265:28" pos:end="265:31">line</name></expr></argument>, <argument pos:start="265:34" pos:end="265:45"><expr pos:start="265:34" pos:end="265:45"><sizeof pos:start="265:34" pos:end="265:45">sizeof<argument_list pos:start="265:40" pos:end="265:45">(<argument pos:start="265:41" pos:end="265:44"><expr pos:start="265:41" pos:end="265:44"><name pos:start="265:41" pos:end="265:44">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="265:50" pos:end="265:76">// size of "helpful" sprite</comment>

    <expr_stmt pos:start="267:5" pos:end="267:47"><expr pos:start="267:5" pos:end="267:46"><name pos:start="267:5" pos:end="267:9">error</name> <operator pos:start="267:11" pos:end="267:12">|=</operator> <call pos:start="267:14" pos:end="267:46"><name pos:start="267:14" pos:end="267:22">read_line</name><argument_list pos:start="267:23" pos:end="267:46">(<argument pos:start="267:24" pos:end="267:25"><expr pos:start="267:24" pos:end="267:25"><name pos:start="267:24" pos:end="267:25">pb</name></expr></argument>, <argument pos:start="267:28" pos:end="267:31"><expr pos:start="267:28" pos:end="267:31"><name pos:start="267:28" pos:end="267:31">line</name></expr></argument>, <argument pos:start="267:34" pos:end="267:45"><expr pos:start="267:34" pos:end="267:45"><sizeof pos:start="267:34" pos:end="267:45">sizeof<argument_list pos:start="267:40" pos:end="267:45">(<argument pos:start="267:41" pos:end="267:44"><expr pos:start="267:41" pos:end="267:44"><name pos:start="267:41" pos:end="267:44">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="267:50" pos:end="267:76">// offset to key frame list</comment>



    <comment type="line" pos:start="271:5" pos:end="271:21">// Read the index</comment>

    <expr_stmt pos:start="273:5" pos:end="273:50"><expr pos:start="273:5" pos:end="273:49"><call pos:start="273:5" pos:end="273:49"><name pos:start="273:5" pos:end="273:13">avio_seek</name><argument_list pos:start="273:14" pos:end="273:49">(<argument pos:start="273:15" pos:end="273:16"><expr pos:start="273:15" pos:end="273:16"><name pos:start="273:15" pos:end="273:16">pb</name></expr></argument>, <argument pos:start="273:19" pos:end="273:38"><expr pos:start="273:19" pos:end="273:38"><name pos:start="273:19" pos:end="273:38">chunk_catalog_offset</name></expr></argument>, <argument pos:start="273:41" pos:end="273:48"><expr pos:start="273:41" pos:end="273:48"><name pos:start="273:41" pos:end="273:48">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="275:5" pos:end="275:25"><expr pos:start="275:5" pos:end="275:24"><name pos:start="275:5" pos:end="275:20">total_audio_size</name> <operator pos:start="275:22" pos:end="275:22">=</operator> <literal type="number" pos:start="275:24" pos:end="275:24">0</literal></expr>;</expr_stmt>

    <for pos:start="277:5" pos:end="301:5">for <control pos:start="277:9" pos:end="277:52">(<init pos:start="277:10" pos:end="277:15"><expr pos:start="277:10" pos:end="277:14"><name pos:start="277:10" pos:end="277:10">i</name> <operator pos:start="277:12" pos:end="277:12">=</operator> <literal type="number" pos:start="277:14" pos:end="277:14">0</literal></expr>;</init> <condition pos:start="277:17" pos:end="277:47"><expr pos:start="277:17" pos:end="277:46"><operator pos:start="277:17" pos:end="277:17">!</operator><name pos:start="277:18" pos:end="277:22">error</name> <operator pos:start="277:24" pos:end="277:25">&amp;&amp;</operator> <name pos:start="277:27" pos:end="277:27">i</name> <operator pos:start="277:29" pos:end="277:29">&lt;</operator> <name pos:start="277:31" pos:end="277:46">number_of_chunks</name></expr>;</condition> <incr pos:start="277:49" pos:end="277:51"><expr pos:start="277:49" pos:end="277:51"><name pos:start="277:49" pos:end="277:49">i</name><operator pos:start="277:50" pos:end="277:51">++</operator></expr></incr>)</control> <block pos:start="277:54" pos:end="301:5">{<block_content pos:start="279:9" pos:end="299:43">

        <decl_stmt pos:start="279:9" pos:end="279:47"><decl pos:start="279:9" pos:end="279:22"><type pos:start="279:9" pos:end="279:15"><name pos:start="279:9" pos:end="279:15">int64_t</name></type> <name pos:start="279:17" pos:end="279:22">offset</name></decl>, <decl pos:start="279:25" pos:end="279:34"><type ref="prev" pos:start="279:9" pos:end="279:15"/><name pos:start="279:25" pos:end="279:34">video_size</name></decl>, <decl pos:start="279:37" pos:end="279:46"><type ref="prev" pos:start="279:9" pos:end="279:15"/><name pos:start="279:37" pos:end="279:46">audio_size</name></decl>;</decl_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:51"><expr pos:start="281:9" pos:end="281:50"><name pos:start="281:9" pos:end="281:13">error</name> <operator pos:start="281:15" pos:end="281:16">|=</operator> <call pos:start="281:18" pos:end="281:50"><name pos:start="281:18" pos:end="281:26">read_line</name><argument_list pos:start="281:27" pos:end="281:50">(<argument pos:start="281:28" pos:end="281:29"><expr pos:start="281:28" pos:end="281:29"><name pos:start="281:28" pos:end="281:29">pb</name></expr></argument>, <argument pos:start="281:32" pos:end="281:35"><expr pos:start="281:32" pos:end="281:35"><name pos:start="281:32" pos:end="281:35">line</name></expr></argument>, <argument pos:start="281:38" pos:end="281:49"><expr pos:start="281:38" pos:end="281:49"><sizeof pos:start="281:38" pos:end="281:49">sizeof<argument_list pos:start="281:44" pos:end="281:49">(<argument pos:start="281:45" pos:end="281:48"><expr pos:start="281:45" pos:end="281:48"><name pos:start="281:45" pos:end="281:48">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="283:9" pos:end="287:23"><if pos:start="283:9" pos:end="287:23">if <condition pos:start="283:12" pos:end="285:59">(<expr pos:start="283:13" pos:end="285:58"><literal type="number" pos:start="283:13" pos:end="283:13">3</literal> <operator pos:start="283:15" pos:end="283:16">!=</operator> <call pos:start="283:18" pos:end="285:58"><name pos:start="283:18" pos:end="283:23">sscanf</name><argument_list pos:start="283:24" pos:end="285:58">(<argument pos:start="283:25" pos:end="283:28"><expr pos:start="283:25" pos:end="283:28"><name pos:start="283:25" pos:end="283:28">line</name></expr></argument>, <argument pos:start="283:31" pos:end="283:63"><expr pos:start="283:31" pos:end="283:63"><literal type="string" pos:start="283:31" pos:end="283:33">"%"</literal><name pos:start="283:34" pos:end="283:39">SCNd64</name><literal type="string" pos:start="283:40" pos:end="283:45">" , %"</literal><name pos:start="283:46" pos:end="283:51">SCNd64</name><literal type="string" pos:start="283:52" pos:end="283:57">" ; %"</literal><name pos:start="283:58" pos:end="283:63">SCNd64</name></expr></argument>,

                        <argument pos:start="285:25" pos:end="285:31"><expr pos:start="285:25" pos:end="285:31"><operator pos:start="285:25" pos:end="285:25">&amp;</operator><name pos:start="285:26" pos:end="285:31">offset</name></expr></argument>, <argument pos:start="285:34" pos:end="285:44"><expr pos:start="285:34" pos:end="285:44"><operator pos:start="285:34" pos:end="285:34">&amp;</operator><name pos:start="285:35" pos:end="285:44">video_size</name></expr></argument>, <argument pos:start="285:47" pos:end="285:57"><expr pos:start="285:47" pos:end="285:57"><operator pos:start="285:47" pos:end="285:47">&amp;</operator><name pos:start="285:48" pos:end="285:57">audio_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="287:13" pos:end="287:23"><block_content pos:start="287:13" pos:end="287:23">

            <expr_stmt pos:start="287:13" pos:end="287:23"><expr pos:start="287:13" pos:end="287:22"><name pos:start="287:13" pos:end="287:17">error</name> <operator pos:start="287:19" pos:end="287:19">=</operator> <operator pos:start="287:21" pos:end="287:21">-</operator><literal type="number" pos:start="287:22" pos:end="287:22">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="289:9" pos:end="291:65"><expr pos:start="289:9" pos:end="291:64"><call pos:start="289:9" pos:end="291:64"><name pos:start="289:9" pos:end="289:26">av_add_index_entry</name><argument_list pos:start="289:27" pos:end="291:64">(<argument pos:start="289:28" pos:end="289:30"><expr pos:start="289:28" pos:end="289:30"><name pos:start="289:28" pos:end="289:30">vst</name></expr></argument>, <argument pos:start="289:33" pos:end="289:38"><expr pos:start="289:33" pos:end="289:38"><name pos:start="289:33" pos:end="289:38">offset</name></expr></argument>, <argument pos:start="289:41" pos:end="289:65"><expr pos:start="289:41" pos:end="289:65"><name pos:start="289:41" pos:end="289:41">i</name> <operator pos:start="289:43" pos:end="289:43">*</operator> <name pos:start="289:45" pos:end="289:65"><name pos:start="289:45" pos:end="289:47">rpl</name><operator pos:start="289:48" pos:end="289:49">-&gt;</operator><name pos:start="289:50" pos:end="289:65">frames_per_chunk</name></name></expr></argument>,

                           <argument pos:start="291:28" pos:end="291:37"><expr pos:start="291:28" pos:end="291:37"><name pos:start="291:28" pos:end="291:37">video_size</name></expr></argument>, <argument pos:start="291:40" pos:end="291:60"><expr pos:start="291:40" pos:end="291:60"><name pos:start="291:40" pos:end="291:60"><name pos:start="291:40" pos:end="291:42">rpl</name><operator pos:start="291:43" pos:end="291:44">-&gt;</operator><name pos:start="291:45" pos:end="291:60">frames_per_chunk</name></name></expr></argument>, <argument pos:start="291:63" pos:end="291:63"><expr pos:start="291:63" pos:end="291:63"><literal type="number" pos:start="291:63" pos:end="291:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="293:9" pos:end="297:62"><if pos:start="293:9" pos:end="297:62">if <condition pos:start="293:12" pos:end="293:16">(<expr pos:start="293:13" pos:end="293:15"><name pos:start="293:13" pos:end="293:15">ast</name></expr>)</condition><block type="pseudo" pos:start="295:13" pos:end="297:62"><block_content pos:start="295:13" pos:end="297:62">

            <expr_stmt pos:start="295:13" pos:end="297:62"><expr pos:start="295:13" pos:end="297:61"><call pos:start="295:13" pos:end="297:61"><name pos:start="295:13" pos:end="295:30">av_add_index_entry</name><argument_list pos:start="295:31" pos:end="297:61">(<argument pos:start="295:32" pos:end="295:34"><expr pos:start="295:32" pos:end="295:34"><name pos:start="295:32" pos:end="295:34">ast</name></expr></argument>, <argument pos:start="295:37" pos:end="295:55"><expr pos:start="295:37" pos:end="295:55"><name pos:start="295:37" pos:end="295:42">offset</name> <operator pos:start="295:44" pos:end="295:44">+</operator> <name pos:start="295:46" pos:end="295:55">video_size</name></expr></argument>, <argument pos:start="295:58" pos:end="295:73"><expr pos:start="295:58" pos:end="295:73"><name pos:start="295:58" pos:end="295:73">total_audio_size</name></expr></argument>,

                               <argument pos:start="297:32" pos:end="297:41"><expr pos:start="297:32" pos:end="297:41"><name pos:start="297:32" pos:end="297:41">audio_size</name></expr></argument>, <argument pos:start="297:44" pos:end="297:57"><expr pos:start="297:44" pos:end="297:57"><name pos:start="297:44" pos:end="297:53">audio_size</name> <operator pos:start="297:55" pos:end="297:55">*</operator> <literal type="number" pos:start="297:57" pos:end="297:57">8</literal></expr></argument>, <argument pos:start="297:60" pos:end="297:60"><expr pos:start="297:60" pos:end="297:60"><literal type="number" pos:start="297:60" pos:end="297:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="299:9" pos:end="299:43"><expr pos:start="299:9" pos:end="299:42"><name pos:start="299:9" pos:end="299:24">total_audio_size</name> <operator pos:start="299:26" pos:end="299:27">+=</operator> <name pos:start="299:29" pos:end="299:38">audio_size</name> <operator pos:start="299:40" pos:end="299:40">*</operator> <literal type="number" pos:start="299:42" pos:end="299:42">8</literal></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="305:5" pos:end="305:35"><if pos:start="305:5" pos:end="305:35">if <condition pos:start="305:8" pos:end="305:14">(<expr pos:start="305:9" pos:end="305:13"><name pos:start="305:9" pos:end="305:13">error</name></expr>)</condition><block type="pseudo" pos:start="305:16" pos:end="305:35"><block_content pos:start="305:16" pos:end="305:35"> <return pos:start="305:16" pos:end="305:35">return <expr pos:start="305:23" pos:end="305:34"><call pos:start="305:23" pos:end="305:34"><name pos:start="305:23" pos:end="305:29">AVERROR</name><argument_list pos:start="305:30" pos:end="305:34">(<argument pos:start="305:31" pos:end="305:33"><expr pos:start="305:31" pos:end="305:33"><name pos:start="305:31" pos:end="305:33">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="309:5" pos:end="309:13">return <expr pos:start="309:12" pos:end="309:12"><literal type="number" pos:start="309:12" pos:end="309:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
