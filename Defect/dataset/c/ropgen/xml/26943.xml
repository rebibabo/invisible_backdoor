<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26943.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:38">openpic_cpu_write_internal</name><parameter_list pos:start="1:39" pos:end="3:61">(<parameter pos:start="1:40" pos:end="1:51"><decl pos:start="1:40" pos:end="1:51"><type pos:start="1:40" pos:end="1:51"><name pos:start="1:40" pos:end="1:43">void</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:51">opaque</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:64"><decl pos:start="1:54" pos:end="1:64"><type pos:start="1:54" pos:end="1:64"><name pos:start="1:54" pos:end="1:59">hwaddr</name></type> <name pos:start="1:61" pos:end="1:64">addr</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:51"><decl pos:start="3:40" pos:end="3:51"><type pos:start="3:40" pos:end="3:51"><name pos:start="3:40" pos:end="3:47">uint32_t</name></type> <name pos:start="3:49" pos:end="3:51">val</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:60"><decl pos:start="3:54" pos:end="3:60"><type pos:start="3:54" pos:end="3:60"><name pos:start="3:54" pos:end="3:56">int</name></type> <name pos:start="3:58" pos:end="3:60">idx</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="113:1">{<block_content pos:start="7:5" pos:end="111:5">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">openpic_t</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:18">opp</name> <init pos:start="7:20" pos:end="7:27">= <expr pos:start="7:22" pos:end="7:27"><name pos:start="7:22" pos:end="7:27">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">IRQ_src_t</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:18">src</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">IRQ_dst_t</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:18">dst</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">s_IRQ</name></decl>, <decl pos:start="13:16" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:16" pos:end="13:20">n_IRQ</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="19:23"><expr pos:start="17:5" pos:end="19:22"><call pos:start="17:5" pos:end="19:22"><name pos:start="17:5" pos:end="17:11">DPRINTF</name><argument_list pos:start="17:12" pos:end="19:22">(<argument pos:start="17:13" pos:end="17:58"><expr pos:start="17:13" pos:end="17:58"><literal type="string" pos:start="17:13" pos:end="17:30">"%s: cpu %d addr "</literal> <name pos:start="17:32" pos:end="17:45">TARGET_FMT_plx</name> <literal type="string" pos:start="17:47" pos:end="17:58">" &lt;= %08x\n"</literal></expr></argument>, <argument pos:start="17:61" pos:end="17:68"><expr pos:start="17:61" pos:end="17:68"><name pos:start="17:61" pos:end="17:68">__func__</name></expr></argument>, <argument pos:start="17:71" pos:end="17:73"><expr pos:start="17:71" pos:end="17:73"><name pos:start="17:71" pos:end="17:73">idx</name></expr></argument>,

            <argument pos:start="19:13" pos:end="19:16"><expr pos:start="19:13" pos:end="19:16"><name pos:start="19:13" pos:end="19:16">addr</name></expr></argument>, <argument pos:start="19:19" pos:end="19:21"><expr pos:start="19:19" pos:end="19:21"><name pos:start="19:19" pos:end="19:21">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="23:15"><if pos:start="21:5" pos:end="23:15">if <condition pos:start="21:8" pos:end="21:19">(<expr pos:start="21:9" pos:end="21:18"><name pos:start="21:9" pos:end="21:12">addr</name> <operator pos:start="21:14" pos:end="21:14">&amp;</operator> <literal type="number" pos:start="21:16" pos:end="21:18">0xF</literal></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:15"><block_content pos:start="23:9" pos:end="23:15">

        <return pos:start="23:9" pos:end="23:15">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:25"><expr pos:start="25:5" pos:end="25:24"><name pos:start="25:5" pos:end="25:7">dst</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <operator pos:start="25:11" pos:end="25:11">&amp;</operator><name pos:start="25:12" pos:end="25:24"><name pos:start="25:12" pos:end="25:14">opp</name><operator pos:start="25:15" pos:end="25:16">-&gt;</operator><name pos:start="25:17" pos:end="25:19">dst</name><index pos:start="25:20" pos:end="25:24">[<expr pos:start="25:21" pos:end="25:23"><name pos:start="25:21" pos:end="25:23">idx</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:18"><expr pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:8">addr</name> <operator pos:start="27:10" pos:end="27:11">&amp;=</operator> <literal type="number" pos:start="27:13" pos:end="27:17">0xFF0</literal></expr>;</expr_stmt>

    <switch pos:start="29:5" pos:end="111:5">switch <condition pos:start="29:12" pos:end="29:17">(<expr pos:start="29:13" pos:end="29:16"><name pos:start="29:13" pos:end="29:16">addr</name></expr>)</condition> <block pos:start="29:19" pos:end="111:5">{<block_content pos:start="31:5" pos:end="109:14">

    <case pos:start="31:5" pos:end="31:14">case <expr pos:start="31:10" pos:end="31:13"><literal type="number" pos:start="31:10" pos:end="31:13">0x40</literal></expr>:</case> <comment type="block" pos:start="31:16" pos:end="31:26">/* IPIDR */</comment>

    <case pos:start="33:5" pos:end="33:14">case <expr pos:start="33:10" pos:end="33:13"><literal type="number" pos:start="33:10" pos:end="33:13">0x50</literal></expr>:</case>

    <case pos:start="35:5" pos:end="35:14">case <expr pos:start="35:10" pos:end="35:13"><literal type="number" pos:start="35:10" pos:end="35:13">0x60</literal></expr>:</case>

    <case pos:start="37:5" pos:end="37:14">case <expr pos:start="37:10" pos:end="37:13"><literal type="number" pos:start="37:10" pos:end="37:13">0x70</literal></expr>:</case>

        <expr_stmt pos:start="39:9" pos:end="39:33"><expr pos:start="39:9" pos:end="39:32"><name pos:start="39:9" pos:end="39:11">idx</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <operator pos:start="39:15" pos:end="39:15">(</operator><name pos:start="39:16" pos:end="39:19">addr</name> <operator pos:start="39:21" pos:end="39:21">-</operator> <literal type="number" pos:start="39:23" pos:end="39:26">0x40</literal><operator pos:start="39:27" pos:end="39:27">)</operator> <operator pos:start="39:29" pos:end="39:30">&gt;&gt;</operator> <literal type="number" pos:start="39:32" pos:end="39:32">4</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="41:9" pos:end="41:72">/* we use IDE as mask which CPUs to deliver the IPI to still. */</comment>

        <expr_stmt pos:start="43:9" pos:end="45:66"><expr pos:start="43:9" pos:end="45:65"><call pos:start="43:9" pos:end="45:65"><name pos:start="43:9" pos:end="43:24">write_IRQreg_ide</name><argument_list pos:start="43:25" pos:end="45:65">(<argument pos:start="43:26" pos:end="43:28"><expr pos:start="43:26" pos:end="43:28"><name pos:start="43:26" pos:end="43:28">opp</name></expr></argument>, <argument pos:start="43:31" pos:end="43:49"><expr pos:start="43:31" pos:end="43:49"><name pos:start="43:31" pos:end="43:43"><name pos:start="43:31" pos:end="43:33">opp</name><operator pos:start="43:34" pos:end="43:35">-&gt;</operator><name pos:start="43:36" pos:end="43:43">irq_ipi0</name></name> <operator pos:start="43:45" pos:end="43:45">+</operator> <name pos:start="43:47" pos:end="43:49">idx</name></expr></argument>,

                         <argument pos:start="45:26" pos:end="45:64"><expr pos:start="45:26" pos:end="45:64"><name pos:start="45:26" pos:end="45:54"><name pos:start="45:26" pos:end="45:28">opp</name><operator pos:start="45:29" pos:end="45:30">-&gt;</operator><name pos:start="45:31" pos:end="45:33">src</name><index pos:start="45:34" pos:end="45:54">[<expr pos:start="45:35" pos:end="45:53"><name pos:start="45:35" pos:end="45:47"><name pos:start="45:35" pos:end="45:37">opp</name><operator pos:start="45:38" pos:end="45:39">-&gt;</operator><name pos:start="45:40" pos:end="45:47">irq_ipi0</name></name> <operator pos:start="45:49" pos:end="45:49">+</operator> <name pos:start="45:51" pos:end="45:53">idx</name></expr>]</index></name><operator pos:start="45:55" pos:end="45:55">.</operator><name pos:start="45:56" pos:end="45:58">ide</name> <operator pos:start="45:60" pos:end="45:60">|</operator> <name pos:start="45:62" pos:end="45:64">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:53"><expr pos:start="47:9" pos:end="47:52"><call pos:start="47:9" pos:end="47:52"><name pos:start="47:9" pos:end="47:23">openpic_set_irq</name><argument_list pos:start="47:24" pos:end="47:52">(<argument pos:start="47:25" pos:end="47:27"><expr pos:start="47:25" pos:end="47:27"><name pos:start="47:25" pos:end="47:27">opp</name></expr></argument>, <argument pos:start="47:30" pos:end="47:48"><expr pos:start="47:30" pos:end="47:48"><name pos:start="47:30" pos:end="47:42"><name pos:start="47:30" pos:end="47:32">opp</name><operator pos:start="47:33" pos:end="47:34">-&gt;</operator><name pos:start="47:35" pos:end="47:42">irq_ipi0</name></name> <operator pos:start="47:44" pos:end="47:44">+</operator> <name pos:start="47:46" pos:end="47:48">idx</name></expr></argument>, <argument pos:start="47:51" pos:end="47:51"><expr pos:start="47:51" pos:end="47:51"><literal type="number" pos:start="47:51" pos:end="47:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:53"><expr pos:start="49:9" pos:end="49:52"><call pos:start="49:9" pos:end="49:52"><name pos:start="49:9" pos:end="49:23">openpic_set_irq</name><argument_list pos:start="49:24" pos:end="49:52">(<argument pos:start="49:25" pos:end="49:27"><expr pos:start="49:25" pos:end="49:27"><name pos:start="49:25" pos:end="49:27">opp</name></expr></argument>, <argument pos:start="49:30" pos:end="49:48"><expr pos:start="49:30" pos:end="49:48"><name pos:start="49:30" pos:end="49:42"><name pos:start="49:30" pos:end="49:32">opp</name><operator pos:start="49:33" pos:end="49:34">-&gt;</operator><name pos:start="49:35" pos:end="49:42">irq_ipi0</name></name> <operator pos:start="49:44" pos:end="49:44">+</operator> <name pos:start="49:46" pos:end="49:48">idx</name></expr></argument>, <argument pos:start="49:51" pos:end="49:51"><expr pos:start="49:51" pos:end="49:51"><literal type="number" pos:start="49:51" pos:end="49:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="51:9" pos:end="51:14">break;</break>

    <case pos:start="53:5" pos:end="53:14">case <expr pos:start="53:10" pos:end="53:13"><literal type="number" pos:start="53:10" pos:end="53:13">0x80</literal></expr>:</case> <comment type="block" pos:start="53:16" pos:end="53:25">/* PCTP */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:37"><expr pos:start="55:9" pos:end="55:36"><name pos:start="55:9" pos:end="55:17"><name pos:start="55:9" pos:end="55:11">dst</name><operator pos:start="55:12" pos:end="55:13">-&gt;</operator><name pos:start="55:14" pos:end="55:17">pctp</name></name> <operator pos:start="55:19" pos:end="55:19">=</operator> <name pos:start="55:21" pos:end="55:23">val</name> <operator pos:start="55:25" pos:end="55:25">&amp;</operator> <literal type="number" pos:start="55:27" pos:end="55:36">0x0000000F</literal></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <case pos:start="59:5" pos:end="59:14">case <expr pos:start="59:10" pos:end="59:13"><literal type="number" pos:start="59:10" pos:end="59:13">0x90</literal></expr>:</case> <comment type="block" pos:start="59:16" pos:end="59:27">/* WHOAMI */</comment>

        <comment type="block" pos:start="61:9" pos:end="61:32">/* Read-only register */</comment>

        <break pos:start="63:9" pos:end="63:14">break;</break>

    <case pos:start="65:5" pos:end="65:14">case <expr pos:start="65:10" pos:end="65:13"><literal type="number" pos:start="65:10" pos:end="65:13">0xA0</literal></expr>:</case> <comment type="block" pos:start="65:16" pos:end="65:25">/* PIAC */</comment>

        <comment type="block" pos:start="67:9" pos:end="67:32">/* Read-only register */</comment>

        <break pos:start="69:9" pos:end="69:14">break;</break>

    <case pos:start="71:5" pos:end="71:14">case <expr pos:start="71:10" pos:end="71:13"><literal type="number" pos:start="71:10" pos:end="71:13">0xB0</literal></expr>:</case> <comment type="block" pos:start="71:16" pos:end="71:25">/* PEOI */</comment>

        <expr_stmt pos:start="73:9" pos:end="73:26"><expr pos:start="73:9" pos:end="73:25"><call pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:15">DPRINTF</name><argument_list pos:start="73:16" pos:end="73:25">(<argument pos:start="73:17" pos:end="73:24"><expr pos:start="73:17" pos:end="73:24"><literal type="string" pos:start="73:17" pos:end="73:24">"PEOI\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:51"><expr pos:start="75:9" pos:end="75:50"><name pos:start="75:9" pos:end="75:13">s_IRQ</name> <operator pos:start="75:15" pos:end="75:15">=</operator> <call pos:start="75:17" pos:end="75:50"><name pos:start="75:17" pos:end="75:28">IRQ_get_next</name><argument_list pos:start="75:29" pos:end="75:50">(<argument pos:start="75:30" pos:end="75:32"><expr pos:start="75:30" pos:end="75:32"><name pos:start="75:30" pos:end="75:32">opp</name></expr></argument>, <argument pos:start="75:35" pos:end="75:49"><expr pos:start="75:35" pos:end="75:49"><operator pos:start="75:35" pos:end="75:35">&amp;</operator><name pos:start="75:36" pos:end="75:49"><name pos:start="75:36" pos:end="75:38">dst</name><operator pos:start="75:39" pos:end="75:40">-&gt;</operator><name pos:start="75:41" pos:end="75:49">servicing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:45"><expr pos:start="77:9" pos:end="77:44"><call pos:start="77:9" pos:end="77:44"><name pos:start="77:9" pos:end="77:20">IRQ_resetbit</name><argument_list pos:start="77:21" pos:end="77:44">(<argument pos:start="77:22" pos:end="77:36"><expr pos:start="77:22" pos:end="77:36"><operator pos:start="77:22" pos:end="77:22">&amp;</operator><name pos:start="77:23" pos:end="77:36"><name pos:start="77:23" pos:end="77:25">dst</name><operator pos:start="77:26" pos:end="77:27">-&gt;</operator><name pos:start="77:28" pos:end="77:36">servicing</name></name></expr></argument>, <argument pos:start="77:39" pos:end="77:43"><expr pos:start="77:39" pos:end="77:43"><name pos:start="77:39" pos:end="77:43">s_IRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:33"><expr pos:start="79:9" pos:end="79:32"><name pos:start="79:9" pos:end="79:27"><name pos:start="79:9" pos:end="79:11">dst</name><operator pos:start="79:12" pos:end="79:13">-&gt;</operator><name pos:start="79:14" pos:end="79:22">servicing</name><operator pos:start="79:23" pos:end="79:23">.</operator><name pos:start="79:24" pos:end="79:27">next</name></name> <operator pos:start="79:29" pos:end="79:29">=</operator> <operator pos:start="79:31" pos:end="79:31">-</operator><literal type="number" pos:start="79:32" pos:end="79:32">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="81:9" pos:end="81:39">/* Set up next servicing IRQ */</comment>

        <expr_stmt pos:start="83:9" pos:end="83:51"><expr pos:start="83:9" pos:end="83:50"><name pos:start="83:9" pos:end="83:13">s_IRQ</name> <operator pos:start="83:15" pos:end="83:15">=</operator> <call pos:start="83:17" pos:end="83:50"><name pos:start="83:17" pos:end="83:28">IRQ_get_next</name><argument_list pos:start="83:29" pos:end="83:50">(<argument pos:start="83:30" pos:end="83:32"><expr pos:start="83:30" pos:end="83:32"><name pos:start="83:30" pos:end="83:32">opp</name></expr></argument>, <argument pos:start="83:35" pos:end="83:49"><expr pos:start="83:35" pos:end="83:49"><operator pos:start="83:35" pos:end="83:35">&amp;</operator><name pos:start="83:36" pos:end="83:49"><name pos:start="83:36" pos:end="83:38">dst</name><operator pos:start="83:39" pos:end="83:40">-&gt;</operator><name pos:start="83:41" pos:end="83:49">servicing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="85:9" pos:end="85:38">/* Check queued interrupts. */</comment>

        <expr_stmt pos:start="87:9" pos:end="87:48"><expr pos:start="87:9" pos:end="87:47"><name pos:start="87:9" pos:end="87:13">n_IRQ</name> <operator pos:start="87:15" pos:end="87:15">=</operator> <call pos:start="87:17" pos:end="87:47"><name pos:start="87:17" pos:end="87:28">IRQ_get_next</name><argument_list pos:start="87:29" pos:end="87:47">(<argument pos:start="87:30" pos:end="87:32"><expr pos:start="87:30" pos:end="87:32"><name pos:start="87:30" pos:end="87:32">opp</name></expr></argument>, <argument pos:start="87:35" pos:end="87:46"><expr pos:start="87:35" pos:end="87:46"><operator pos:start="87:35" pos:end="87:35">&amp;</operator><name pos:start="87:36" pos:end="87:46"><name pos:start="87:36" pos:end="87:38">dst</name><operator pos:start="87:39" pos:end="87:40">-&gt;</operator><name pos:start="87:41" pos:end="87:46">raised</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:31"><expr pos:start="89:9" pos:end="89:30"><name pos:start="89:9" pos:end="89:11">src</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <operator pos:start="89:15" pos:end="89:15">&amp;</operator><name pos:start="89:16" pos:end="89:30"><name pos:start="89:16" pos:end="89:18">opp</name><operator pos:start="89:19" pos:end="89:20">-&gt;</operator><name pos:start="89:21" pos:end="89:23">src</name><index pos:start="89:24" pos:end="89:30">[<expr pos:start="89:25" pos:end="89:29"><name pos:start="89:25" pos:end="89:29">n_IRQ</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="91:9" pos:end="103:9"><if pos:start="91:9" pos:end="103:9">if <condition pos:start="91:12" pos:end="95:65">(<expr pos:start="91:13" pos:end="95:64"><name pos:start="91:13" pos:end="91:17">n_IRQ</name> <operator pos:start="91:19" pos:end="91:20">!=</operator> <operator pos:start="91:22" pos:end="91:22">-</operator><literal type="number" pos:start="91:23" pos:end="91:23">1</literal> <operator pos:start="91:25" pos:end="91:26">&amp;&amp;</operator>

            <operator pos:start="93:13" pos:end="93:13">(</operator><name pos:start="93:14" pos:end="93:18">s_IRQ</name> <operator pos:start="93:20" pos:end="93:21">==</operator> <operator pos:start="93:23" pos:end="93:23">-</operator><literal type="number" pos:start="93:24" pos:end="93:24">1</literal> <operator pos:start="93:26" pos:end="93:27">||</operator>

             <call pos:start="95:14" pos:end="95:37"><name pos:start="95:14" pos:end="95:26">IPVP_PRIORITY</name><argument_list pos:start="95:27" pos:end="95:37">(<argument pos:start="95:28" pos:end="95:36"><expr pos:start="95:28" pos:end="95:36"><name pos:start="95:28" pos:end="95:36"><name pos:start="95:28" pos:end="95:30">src</name><operator pos:start="95:31" pos:end="95:32">-&gt;</operator><name pos:start="95:33" pos:end="95:36">ipvp</name></name></expr></argument>)</argument_list></call> <operator pos:start="95:39" pos:end="95:39">&gt;</operator> <name pos:start="95:41" pos:end="95:63"><name pos:start="95:41" pos:end="95:43">dst</name><operator pos:start="95:44" pos:end="95:45">-&gt;</operator><name pos:start="95:46" pos:end="95:54">servicing</name><operator pos:start="95:55" pos:end="95:55">.</operator><name pos:start="95:56" pos:end="95:63">priority</name></name><operator pos:start="95:64" pos:end="95:64">)</operator></expr>)</condition> <block pos:start="95:67" pos:end="103:9">{<block_content pos:start="97:13" pos:end="101:42">

            <expr_stmt pos:start="97:13" pos:end="99:32"><expr pos:start="97:13" pos:end="99:31"><call pos:start="97:13" pos:end="99:31"><name pos:start="97:13" pos:end="97:19">DPRINTF</name><argument_list pos:start="97:20" pos:end="99:31">(<argument pos:start="97:21" pos:end="97:62"><expr pos:start="97:21" pos:end="97:62"><literal type="string" pos:start="97:21" pos:end="97:62">"Raise OpenPIC INT output cpu %d irq %d\n"</literal></expr></argument>,

                    <argument pos:start="99:21" pos:end="99:23"><expr pos:start="99:21" pos:end="99:23"><name pos:start="99:21" pos:end="99:23">idx</name></expr></argument>, <argument pos:start="99:26" pos:end="99:30"><expr pos:start="99:26" pos:end="99:30"><name pos:start="99:26" pos:end="99:30">n_IRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:42"><expr pos:start="101:13" pos:end="101:41"><call pos:start="101:13" pos:end="101:41"><name pos:start="101:13" pos:end="101:26"><name pos:start="101:13" pos:end="101:15">opp</name><operator pos:start="101:16" pos:end="101:17">-&gt;</operator><name pos:start="101:18" pos:end="101:26">irq_raise</name></name><argument_list pos:start="101:27" pos:end="101:41">(<argument pos:start="101:28" pos:end="101:30"><expr pos:start="101:28" pos:end="101:30"><name pos:start="101:28" pos:end="101:30">opp</name></expr></argument>, <argument pos:start="101:33" pos:end="101:35"><expr pos:start="101:33" pos:end="101:35"><name pos:start="101:33" pos:end="101:35">idx</name></expr></argument>, <argument pos:start="101:38" pos:end="101:40"><expr pos:start="101:38" pos:end="101:40"><name pos:start="101:38" pos:end="101:40">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="105:9" pos:end="105:14">break;</break>

    <default pos:start="107:5" pos:end="107:12">default:</default>

        <break pos:start="109:9" pos:end="109:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
