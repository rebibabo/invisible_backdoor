<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5419.c" pos:tabs="8"><function pos:start="1:1" pos:end="149:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">libx265_encode_frame</name><parameter_list pos:start="1:32" pos:end="3:68">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:68"><decl pos:start="1:56" pos:end="1:68"><type pos:start="1:56" pos:end="1:68"><name pos:start="1:56" pos:end="1:63">AVPacket</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:68">pkt</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:50"><decl pos:start="3:33" pos:end="3:50"><type pos:start="3:33" pos:end="3:50"><specifier pos:start="3:33" pos:end="3:37">const</specifier> <name pos:start="3:39" pos:end="3:45">AVFrame</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:50">pic</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:67"><decl pos:start="3:53" pos:end="3:67"><type pos:start="3:53" pos:end="3:67"><name pos:start="3:53" pos:end="3:55">int</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:67">got_packet</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="149:1">{<block_content pos:start="7:5" pos:end="147:13">

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:42"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">libx265Context</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:23">ctx</name> <init pos:start="7:25" pos:end="7:42">= <expr pos:start="7:27" pos:end="7:42"><name pos:start="7:27" pos:end="7:42"><name pos:start="7:27" pos:end="7:31">avctx</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">x265_picture</name></type> <name pos:start="9:18" pos:end="9:24">x265pic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:41"><decl pos:start="11:5" pos:end="11:40"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16">x265_picture</name></type> <name pos:start="11:18" pos:end="11:28">x265pic_out</name> <init pos:start="11:30" pos:end="11:40">= <expr pos:start="11:32" pos:end="11:40"><block pos:start="11:32" pos:end="11:40">{ <expr pos:start="11:34" pos:end="11:38"><block pos:start="11:34" pos:end="11:38">{ <expr pos:start="11:36" pos:end="11:36"><literal type="number" pos:start="11:36" pos:end="11:36">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">x265_nal</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:17">nal</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:16">dst</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:15">payload</name> <init pos:start="17:17" pos:end="17:19">= <expr pos:start="17:19" pos:end="17:19"><literal type="number" pos:start="17:19" pos:end="17:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:13"><decl pos:start="19:5" pos:end="19:12"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:12">nnal</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:12"><decl pos:start="21:5" pos:end="21:11"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:10"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:45"><expr pos:start="27:5" pos:end="27:44"><call pos:start="27:5" pos:end="27:44"><name pos:start="27:5" pos:end="27:21">x265_picture_init</name><argument_list pos:start="27:22" pos:end="27:44">(<argument pos:start="27:23" pos:end="27:33"><expr pos:start="27:23" pos:end="27:33"><name pos:start="27:23" pos:end="27:33"><name pos:start="27:23" pos:end="27:25">ctx</name><operator pos:start="27:26" pos:end="27:27">-&gt;</operator><name pos:start="27:28" pos:end="27:33">params</name></name></expr></argument>, <argument pos:start="27:36" pos:end="27:43"><expr pos:start="27:36" pos:end="27:43"><operator pos:start="27:36" pos:end="27:36">&amp;</operator><name pos:start="27:37" pos:end="27:43">x265pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="57:5"><if pos:start="31:5" pos:end="57:5">if <condition pos:start="31:8" pos:end="31:12">(<expr pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">pic</name></expr>)</condition> <block pos:start="31:14" pos:end="57:5">{<block_content pos:start="33:9" pos:end="55:43">

        <for pos:start="33:9" pos:end="39:9">for <control pos:start="33:13" pos:end="33:31">(<init pos:start="33:14" pos:end="33:19"><expr pos:start="33:14" pos:end="33:18"><name pos:start="33:14" pos:end="33:14">i</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <literal type="number" pos:start="33:18" pos:end="33:18">0</literal></expr>;</init> <condition pos:start="33:21" pos:end="33:26"><expr pos:start="33:21" pos:end="33:25"><name pos:start="33:21" pos:end="33:21">i</name> <operator pos:start="33:23" pos:end="33:23">&lt;</operator> <literal type="number" pos:start="33:25" pos:end="33:25">3</literal></expr>;</condition> <incr pos:start="33:28" pos:end="33:30"><expr pos:start="33:28" pos:end="33:30"><name pos:start="33:28" pos:end="33:28">i</name><operator pos:start="33:29" pos:end="33:30">++</operator></expr></incr>)</control> <block pos:start="33:33" pos:end="39:9">{<block_content pos:start="35:12" pos:end="37:48">

           <expr_stmt pos:start="35:12" pos:end="35:44"><expr pos:start="35:12" pos:end="35:43"><name pos:start="35:12" pos:end="35:28"><name pos:start="35:12" pos:end="35:18">x265pic</name><operator pos:start="35:19" pos:end="35:19">.</operator><name pos:start="35:20" pos:end="35:25">planes</name><index pos:start="35:26" pos:end="35:28">[<expr pos:start="35:27" pos:end="35:27"><name pos:start="35:27" pos:end="35:27">i</name></expr>]</index></name> <operator pos:start="35:30" pos:end="35:30">=</operator> <name pos:start="35:32" pos:end="35:43"><name pos:start="35:32" pos:end="35:34">pic</name><operator pos:start="35:35" pos:end="35:36">-&gt;</operator><name pos:start="35:37" pos:end="35:40">data</name><index pos:start="35:41" pos:end="35:43">[<expr pos:start="35:42" pos:end="35:42"><name pos:start="35:42" pos:end="35:42">i</name></expr>]</index></name></expr>;</expr_stmt>

           <expr_stmt pos:start="37:12" pos:end="37:48"><expr pos:start="37:12" pos:end="37:47"><name pos:start="37:12" pos:end="37:28"><name pos:start="37:12" pos:end="37:18">x265pic</name><operator pos:start="37:19" pos:end="37:19">.</operator><name pos:start="37:20" pos:end="37:25">stride</name><index pos:start="37:26" pos:end="37:28">[<expr pos:start="37:27" pos:end="37:27"><name pos:start="37:27" pos:end="37:27">i</name></expr>]</index></name> <operator pos:start="37:30" pos:end="37:30">=</operator> <name pos:start="37:32" pos:end="37:47"><name pos:start="37:32" pos:end="37:34">pic</name><operator pos:start="37:35" pos:end="37:36">-&gt;</operator><name pos:start="37:37" pos:end="37:44">linesize</name><index pos:start="37:45" pos:end="37:47">[<expr pos:start="37:46" pos:end="37:46"><name pos:start="37:46" pos:end="37:46">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="43:9" pos:end="43:36"><expr pos:start="43:9" pos:end="43:35"><name pos:start="43:9" pos:end="43:19"><name pos:start="43:9" pos:end="43:15">x265pic</name><operator pos:start="43:16" pos:end="43:16">.</operator><name pos:start="43:17" pos:end="43:19">pts</name></name>      <operator pos:start="43:26" pos:end="43:26">=</operator> <name pos:start="43:28" pos:end="43:35"><name pos:start="43:28" pos:end="43:30">pic</name><operator pos:start="43:31" pos:end="43:32">-&gt;</operator><name pos:start="43:33" pos:end="43:35">pts</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:89"><expr pos:start="45:9" pos:end="45:88"><name pos:start="45:9" pos:end="45:24"><name pos:start="45:9" pos:end="45:15">x265pic</name><operator pos:start="45:16" pos:end="45:16">.</operator><name pos:start="45:17" pos:end="45:24">bitDepth</name></name> <operator pos:start="45:26" pos:end="45:26">=</operator> <call pos:start="45:28" pos:end="45:62"><name pos:start="45:28" pos:end="45:46">av_pix_fmt_desc_get</name><argument_list pos:start="45:47" pos:end="45:62">(<argument pos:start="45:48" pos:end="45:61"><expr pos:start="45:48" pos:end="45:61"><name pos:start="45:48" pos:end="45:61"><name pos:start="45:48" pos:end="45:52">avctx</name><operator pos:start="45:53" pos:end="45:54">-&gt;</operator><name pos:start="45:55" pos:end="45:61">pix_fmt</name></name></expr></argument>)</argument_list></call><operator pos:start="45:63" pos:end="45:64">-&gt;</operator><name pos:start="45:65" pos:end="45:71"><name pos:start="45:65" pos:end="45:68">comp</name><index pos:start="45:69" pos:end="45:71">[<expr pos:start="45:70" pos:end="45:70"><literal type="number" pos:start="45:70" pos:end="45:70">0</literal></expr>]</index></name><operator pos:start="45:72" pos:end="45:72">.</operator><name pos:start="45:73" pos:end="45:84">depth_minus1</name> <operator pos:start="45:86" pos:end="45:86">+</operator> <literal type="number" pos:start="45:88" pos:end="45:88">1</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="49:9" pos:end="55:43"><expr pos:start="49:9" pos:end="55:42"><name pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:15">x265pic</name><operator pos:start="49:16" pos:end="49:16">.</operator><name pos:start="49:17" pos:end="49:25">sliceType</name></name> <operator pos:start="49:27" pos:end="49:27">=</operator> <ternary pos:start="49:29" pos:end="55:42"><condition pos:start="49:29" pos:end="49:65"><expr pos:start="49:29" pos:end="49:63"><name pos:start="49:29" pos:end="49:42"><name pos:start="49:29" pos:end="49:31">pic</name><operator pos:start="49:32" pos:end="49:33">-&gt;</operator><name pos:start="49:34" pos:end="49:42">pict_type</name></name> <operator pos:start="49:44" pos:end="49:45">==</operator> <name pos:start="49:47" pos:end="49:63">AV_PICTURE_TYPE_I</name></expr> ?</condition><then pos:start="49:67" pos:end="49:77"> <expr pos:start="49:67" pos:end="49:77"><name pos:start="49:67" pos:end="49:77">X265_TYPE_I</name></expr> </then><else pos:start="49:79" pos:end="55:42">:

                            <expr pos:start="51:29" pos:end="55:42"><ternary pos:start="51:29" pos:end="55:42"><condition pos:start="51:29" pos:end="51:65"><expr pos:start="51:29" pos:end="51:63"><name pos:start="51:29" pos:end="51:42"><name pos:start="51:29" pos:end="51:31">pic</name><operator pos:start="51:32" pos:end="51:33">-&gt;</operator><name pos:start="51:34" pos:end="51:42">pict_type</name></name> <operator pos:start="51:44" pos:end="51:45">==</operator> <name pos:start="51:47" pos:end="51:63">AV_PICTURE_TYPE_P</name></expr> ?</condition><then pos:start="51:67" pos:end="51:77"> <expr pos:start="51:67" pos:end="51:77"><name pos:start="51:67" pos:end="51:77">X265_TYPE_P</name></expr> </then><else pos:start="51:79" pos:end="55:42">:

                            <expr pos:start="53:29" pos:end="55:42"><ternary pos:start="53:29" pos:end="55:42"><condition pos:start="53:29" pos:end="53:65"><expr pos:start="53:29" pos:end="53:63"><name pos:start="53:29" pos:end="53:42"><name pos:start="53:29" pos:end="53:31">pic</name><operator pos:start="53:32" pos:end="53:33">-&gt;</operator><name pos:start="53:34" pos:end="53:42">pict_type</name></name> <operator pos:start="53:44" pos:end="53:45">==</operator> <name pos:start="53:47" pos:end="53:63">AV_PICTURE_TYPE_B</name></expr> ?</condition><then pos:start="53:67" pos:end="53:77"> <expr pos:start="53:67" pos:end="53:77"><name pos:start="53:67" pos:end="53:77">X265_TYPE_B</name></expr> </then><else pos:start="53:79" pos:end="55:42">:

                            <expr pos:start="55:29" pos:end="55:42"><name pos:start="55:29" pos:end="55:42">X265_TYPE_AUTO</name></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="63:67"><expr pos:start="61:5" pos:end="63:66"><name pos:start="61:5" pos:end="61:7">ret</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="63:66"><name pos:start="61:11" pos:end="61:29">x265_encoder_encode</name><argument_list pos:start="61:30" pos:end="63:66">(<argument pos:start="61:31" pos:end="61:42"><expr pos:start="61:31" pos:end="61:42"><name pos:start="61:31" pos:end="61:42"><name pos:start="61:31" pos:end="61:33">ctx</name><operator pos:start="61:34" pos:end="61:35">-&gt;</operator><name pos:start="61:36" pos:end="61:42">encoder</name></name></expr></argument>, <argument pos:start="61:45" pos:end="61:48"><expr pos:start="61:45" pos:end="61:48"><operator pos:start="61:45" pos:end="61:45">&amp;</operator><name pos:start="61:46" pos:end="61:48">nal</name></expr></argument>, <argument pos:start="61:51" pos:end="61:55"><expr pos:start="61:51" pos:end="61:55"><operator pos:start="61:51" pos:end="61:51">&amp;</operator><name pos:start="61:52" pos:end="61:55">nnal</name></expr></argument>,

                              <argument pos:start="63:31" pos:end="63:51"><expr pos:start="63:31" pos:end="63:51"><ternary pos:start="63:31" pos:end="63:51"><condition pos:start="63:31" pos:end="63:35"><expr pos:start="63:31" pos:end="63:33"><name pos:start="63:31" pos:end="63:33">pic</name></expr> ?</condition><then pos:start="63:37" pos:end="63:44"> <expr pos:start="63:37" pos:end="63:44"><operator pos:start="63:37" pos:end="63:37">&amp;</operator><name pos:start="63:38" pos:end="63:44">x265pic</name></expr> </then><else pos:start="63:46" pos:end="63:51">: <expr pos:start="63:48" pos:end="63:51"><name pos:start="63:48" pos:end="63:51">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="63:54" pos:end="63:65"><expr pos:start="63:54" pos:end="63:65"><operator pos:start="63:54" pos:end="63:54">&amp;</operator><name pos:start="63:55" pos:end="63:65">x265pic_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="67:31"><if pos:start="65:5" pos:end="67:31">if <condition pos:start="65:8" pos:end="65:16">(<expr pos:start="65:9" pos:end="65:15"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:13">&lt;</operator> <literal type="number" pos:start="65:15" pos:end="65:15">0</literal></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:31"><block_content pos:start="67:9" pos:end="67:31">

        <return pos:start="67:9" pos:end="67:31">return <expr pos:start="67:16" pos:end="67:30"><name pos:start="67:16" pos:end="67:30">AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="71:5" pos:end="73:17"><if pos:start="71:5" pos:end="73:17">if <condition pos:start="71:8" pos:end="71:14">(<expr pos:start="71:9" pos:end="71:13"><operator pos:start="71:9" pos:end="71:9">!</operator><name pos:start="71:10" pos:end="71:13">nnal</name></expr>)</condition><block type="pseudo" pos:start="73:9" pos:end="73:17"><block_content pos:start="73:9" pos:end="73:17">

        <return pos:start="73:9" pos:end="73:17">return <expr pos:start="73:16" pos:end="73:16"><literal type="number" pos:start="73:16" pos:end="73:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <for pos:start="77:5" pos:end="79:36">for <control pos:start="77:9" pos:end="77:30">(<init pos:start="77:10" pos:end="77:15"><expr pos:start="77:10" pos:end="77:14"><name pos:start="77:10" pos:end="77:10">i</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <literal type="number" pos:start="77:14" pos:end="77:14">0</literal></expr>;</init> <condition pos:start="77:17" pos:end="77:25"><expr pos:start="77:17" pos:end="77:24"><name pos:start="77:17" pos:end="77:17">i</name> <operator pos:start="77:19" pos:end="77:19">&lt;</operator> <name pos:start="77:21" pos:end="77:24">nnal</name></expr>;</condition> <incr pos:start="77:27" pos:end="77:29"><expr pos:start="77:27" pos:end="77:29"><name pos:start="77:27" pos:end="77:27">i</name><operator pos:start="77:28" pos:end="77:29">++</operator></expr></incr>)</control><block type="pseudo" pos:start="79:9" pos:end="79:36"><block_content pos:start="79:9" pos:end="79:36">

        <expr_stmt pos:start="79:9" pos:end="79:36"><expr pos:start="79:9" pos:end="79:35"><name pos:start="79:9" pos:end="79:15">payload</name> <operator pos:start="79:17" pos:end="79:18">+=</operator> <name pos:start="79:20" pos:end="79:25"><name pos:start="79:20" pos:end="79:22">nal</name><index pos:start="79:23" pos:end="79:25">[<expr pos:start="79:24" pos:end="79:24"><name pos:start="79:24" pos:end="79:24">i</name></expr>]</index></name><operator pos:start="79:26" pos:end="79:26">.</operator><name pos:start="79:27" pos:end="79:35">sizeBytes</name></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="83:5" pos:end="83:40"><expr pos:start="83:5" pos:end="83:39"><name pos:start="83:5" pos:end="83:7">ret</name> <operator pos:start="83:9" pos:end="83:9">=</operator> <call pos:start="83:11" pos:end="83:39"><name pos:start="83:11" pos:end="83:25">ff_alloc_packet</name><argument_list pos:start="83:26" pos:end="83:39">(<argument pos:start="83:27" pos:end="83:29"><expr pos:start="83:27" pos:end="83:29"><name pos:start="83:27" pos:end="83:29">pkt</name></expr></argument>, <argument pos:start="83:32" pos:end="83:38"><expr pos:start="83:32" pos:end="83:38"><name pos:start="83:32" pos:end="83:38">payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="91:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:16">(<expr pos:start="85:9" pos:end="85:15"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">&lt;</operator> <literal type="number" pos:start="85:15" pos:end="85:15">0</literal></expr>)</condition> <block pos:start="85:18" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:19">

        <expr_stmt pos:start="87:9" pos:end="87:70"><expr pos:start="87:9" pos:end="87:69"><call pos:start="87:9" pos:end="87:69"><name pos:start="87:9" pos:end="87:14">av_log</name><argument_list pos:start="87:15" pos:end="87:69">(<argument pos:start="87:16" pos:end="87:20"><expr pos:start="87:16" pos:end="87:20"><name pos:start="87:16" pos:end="87:20">avctx</name></expr></argument>, <argument pos:start="87:23" pos:end="87:34"><expr pos:start="87:23" pos:end="87:34"><name pos:start="87:23" pos:end="87:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="87:37" pos:end="87:68"><expr pos:start="87:37" pos:end="87:68"><literal type="string" pos:start="87:37" pos:end="87:68">"Error getting output packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="89:9" pos:end="89:19">return <expr pos:start="89:16" pos:end="89:18"><name pos:start="89:16" pos:end="89:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:20"><expr pos:start="93:5" pos:end="93:19"><name pos:start="93:5" pos:end="93:7">dst</name> <operator pos:start="93:9" pos:end="93:9">=</operator> <name pos:start="93:11" pos:end="93:19"><name pos:start="93:11" pos:end="93:13">pkt</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:19">data</name></name></expr>;</expr_stmt>



    <for pos:start="97:5" pos:end="109:5">for <control pos:start="97:9" pos:end="97:30">(<init pos:start="97:10" pos:end="97:15"><expr pos:start="97:10" pos:end="97:14"><name pos:start="97:10" pos:end="97:10">i</name> <operator pos:start="97:12" pos:end="97:12">=</operator> <literal type="number" pos:start="97:14" pos:end="97:14">0</literal></expr>;</init> <condition pos:start="97:17" pos:end="97:25"><expr pos:start="97:17" pos:end="97:24"><name pos:start="97:17" pos:end="97:17">i</name> <operator pos:start="97:19" pos:end="97:19">&lt;</operator> <name pos:start="97:21" pos:end="97:24">nnal</name></expr>;</condition> <incr pos:start="97:27" pos:end="97:29"><expr pos:start="97:27" pos:end="97:29"><name pos:start="97:27" pos:end="97:27">i</name><operator pos:start="97:28" pos:end="97:29">++</operator></expr></incr>)</control> <block pos:start="97:32" pos:end="109:5">{<block_content pos:start="99:9" pos:end="107:42">

        <expr_stmt pos:start="99:9" pos:end="99:54"><expr pos:start="99:9" pos:end="99:53"><call pos:start="99:9" pos:end="99:53"><name pos:start="99:9" pos:end="99:14">memcpy</name><argument_list pos:start="99:15" pos:end="99:53">(<argument pos:start="99:16" pos:end="99:18"><expr pos:start="99:16" pos:end="99:18"><name pos:start="99:16" pos:end="99:18">dst</name></expr></argument>, <argument pos:start="99:21" pos:end="99:34"><expr pos:start="99:21" pos:end="99:34"><name pos:start="99:21" pos:end="99:26"><name pos:start="99:21" pos:end="99:23">nal</name><index pos:start="99:24" pos:end="99:26">[<expr pos:start="99:25" pos:end="99:25"><name pos:start="99:25" pos:end="99:25">i</name></expr>]</index></name><operator pos:start="99:27" pos:end="99:27">.</operator><name pos:start="99:28" pos:end="99:34">payload</name></expr></argument>, <argument pos:start="99:37" pos:end="99:52"><expr pos:start="99:37" pos:end="99:52"><name pos:start="99:37" pos:end="99:42"><name pos:start="99:37" pos:end="99:39">nal</name><index pos:start="99:40" pos:end="99:42">[<expr pos:start="99:41" pos:end="99:41"><name pos:start="99:41" pos:end="99:41">i</name></expr>]</index></name><operator pos:start="99:43" pos:end="99:43">.</operator><name pos:start="99:44" pos:end="99:52">sizeBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:32"><expr pos:start="101:9" pos:end="101:31"><name pos:start="101:9" pos:end="101:11">dst</name> <operator pos:start="101:13" pos:end="101:14">+=</operator> <name pos:start="101:16" pos:end="101:21"><name pos:start="101:16" pos:end="101:18">nal</name><index pos:start="101:19" pos:end="101:21">[<expr pos:start="101:20" pos:end="101:20"><name pos:start="101:20" pos:end="101:20">i</name></expr>]</index></name><operator pos:start="101:22" pos:end="101:22">.</operator><name pos:start="101:23" pos:end="101:31">sizeBytes</name></expr>;</expr_stmt>



        <if_stmt pos:start="105:9" pos:end="107:42"><if pos:start="105:9" pos:end="107:42">if <condition pos:start="105:12" pos:end="105:37">(<expr pos:start="105:13" pos:end="105:36"><call pos:start="105:13" pos:end="105:36"><name pos:start="105:13" pos:end="105:23">is_keyframe</name><argument_list pos:start="105:24" pos:end="105:36">(<argument pos:start="105:25" pos:end="105:35"><expr pos:start="105:25" pos:end="105:35"><name pos:start="105:25" pos:end="105:30"><name pos:start="105:25" pos:end="105:27">nal</name><index pos:start="105:28" pos:end="105:30">[<expr pos:start="105:29" pos:end="105:29"><name pos:start="105:29" pos:end="105:29">i</name></expr>]</index></name><operator pos:start="105:31" pos:end="105:31">.</operator><name pos:start="105:32" pos:end="105:35">type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="107:13" pos:end="107:42"><block_content pos:start="107:13" pos:end="107:42">

            <expr_stmt pos:start="107:13" pos:end="107:42"><expr pos:start="107:13" pos:end="107:41"><name pos:start="107:13" pos:end="107:22"><name pos:start="107:13" pos:end="107:15">pkt</name><operator pos:start="107:16" pos:end="107:17">-&gt;</operator><name pos:start="107:18" pos:end="107:22">flags</name></name> <operator pos:start="107:24" pos:end="107:25">|=</operator> <name pos:start="107:27" pos:end="107:41">AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="113:5" pos:end="113:31"><expr pos:start="113:5" pos:end="113:30"><name pos:start="113:5" pos:end="113:12"><name pos:start="113:5" pos:end="113:7">pkt</name><operator pos:start="113:8" pos:end="113:9">-&gt;</operator><name pos:start="113:10" pos:end="113:12">pts</name></name> <operator pos:start="113:14" pos:end="113:14">=</operator> <name pos:start="113:16" pos:end="113:30"><name pos:start="113:16" pos:end="113:26">x265pic_out</name><operator pos:start="113:27" pos:end="113:27">.</operator><name pos:start="113:28" pos:end="113:30">pts</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:31"><expr pos:start="115:5" pos:end="115:30"><name pos:start="115:5" pos:end="115:12"><name pos:start="115:5" pos:end="115:7">pkt</name><operator pos:start="115:8" pos:end="115:9">-&gt;</operator><name pos:start="115:10" pos:end="115:12">dts</name></name> <operator pos:start="115:14" pos:end="115:14">=</operator> <name pos:start="115:16" pos:end="115:30"><name pos:start="115:16" pos:end="115:26">x265pic_out</name><operator pos:start="115:27" pos:end="115:27">.</operator><name pos:start="115:28" pos:end="115:30">dts</name></name></expr>;</expr_stmt>



    <switch pos:start="119:5" pos:end="141:5">switch <condition pos:start="119:12" pos:end="119:34">(<expr pos:start="119:13" pos:end="119:33"><name pos:start="119:13" pos:end="119:33"><name pos:start="119:13" pos:end="119:23">x265pic_out</name><operator pos:start="119:24" pos:end="119:24">.</operator><name pos:start="119:25" pos:end="119:33">sliceType</name></name></expr>)</condition> <block pos:start="119:36" pos:end="141:5">{<block_content pos:start="121:5" pos:end="139:14">

    <case pos:start="121:5" pos:end="121:23">case <expr pos:start="121:10" pos:end="121:22"><name pos:start="121:10" pos:end="121:22">X265_TYPE_IDR</name></expr>:</case>

    <case pos:start="123:5" pos:end="123:21">case <expr pos:start="123:10" pos:end="123:20"><name pos:start="123:10" pos:end="123:20">X265_TYPE_I</name></expr>:</case>

        <expr_stmt pos:start="125:9" pos:end="125:58"><expr pos:start="125:9" pos:end="125:57"><name pos:start="125:9" pos:end="125:37"><name pos:start="125:9" pos:end="125:13">avctx</name><operator pos:start="125:14" pos:end="125:15">-&gt;</operator><name pos:start="125:16" pos:end="125:26">coded_frame</name><operator pos:start="125:27" pos:end="125:28">-&gt;</operator><name pos:start="125:29" pos:end="125:37">pict_type</name></name> <operator pos:start="125:39" pos:end="125:39">=</operator> <name pos:start="125:41" pos:end="125:57">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

        <break pos:start="127:9" pos:end="127:14">break;</break>

    <case pos:start="129:5" pos:end="129:21">case <expr pos:start="129:10" pos:end="129:20"><name pos:start="129:10" pos:end="129:20">X265_TYPE_P</name></expr>:</case>

        <expr_stmt pos:start="131:9" pos:end="131:58"><expr pos:start="131:9" pos:end="131:57"><name pos:start="131:9" pos:end="131:37"><name pos:start="131:9" pos:end="131:13">avctx</name><operator pos:start="131:14" pos:end="131:15">-&gt;</operator><name pos:start="131:16" pos:end="131:26">coded_frame</name><operator pos:start="131:27" pos:end="131:28">-&gt;</operator><name pos:start="131:29" pos:end="131:37">pict_type</name></name> <operator pos:start="131:39" pos:end="131:39">=</operator> <name pos:start="131:41" pos:end="131:57">AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

        <break pos:start="133:9" pos:end="133:14">break;</break>

    <case pos:start="135:5" pos:end="135:21">case <expr pos:start="135:10" pos:end="135:20"><name pos:start="135:10" pos:end="135:20">X265_TYPE_B</name></expr>:</case>

        <expr_stmt pos:start="137:9" pos:end="137:58"><expr pos:start="137:9" pos:end="137:57"><name pos:start="137:9" pos:end="137:37"><name pos:start="137:9" pos:end="137:13">avctx</name><operator pos:start="137:14" pos:end="137:15">-&gt;</operator><name pos:start="137:16" pos:end="137:26">coded_frame</name><operator pos:start="137:27" pos:end="137:28">-&gt;</operator><name pos:start="137:29" pos:end="137:37">pict_type</name></name> <operator pos:start="137:39" pos:end="137:39">=</operator> <name pos:start="137:41" pos:end="137:57">AV_PICTURE_TYPE_B</name></expr>;</expr_stmt>

        <break pos:start="139:9" pos:end="139:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="145:5" pos:end="145:20"><expr pos:start="145:5" pos:end="145:19"><operator pos:start="145:5" pos:end="145:5">*</operator><name pos:start="145:6" pos:end="145:15">got_packet</name> <operator pos:start="145:17" pos:end="145:17">=</operator> <literal type="number" pos:start="145:19" pos:end="145:19">1</literal></expr>;</expr_stmt>

    <return pos:start="147:5" pos:end="147:13">return <expr pos:start="147:12" pos:end="147:12"><literal type="number" pos:start="147:12" pos:end="147:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
