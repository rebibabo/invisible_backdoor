<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20508.c" pos:tabs="8"><function pos:start="1:1" pos:end="295:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">virtio_ccw_device_init</name><parameter_list pos:start="1:34" pos:end="1:75">(<parameter pos:start="1:35" pos:end="1:54"><decl pos:start="1:35" pos:end="1:54"><type pos:start="1:35" pos:end="1:54"><name pos:start="1:35" pos:end="1:49">VirtioCcwDevice</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:54">dev</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:74"><decl pos:start="1:57" pos:end="1:74"><type pos:start="1:57" pos:end="1:74"><name pos:start="1:57" pos:end="1:68">VirtIODevice</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:74">vdev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="295:1">{<block_content pos:start="5:5" pos:end="293:15">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:22">cssid</name> <init pos:start="5:24" pos:end="5:26">= <expr pos:start="5:26" pos:end="5:26"><literal type="number" pos:start="5:26" pos:end="5:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:21">ssid</name> <init pos:start="7:23" pos:end="7:25">= <expr pos:start="7:25" pos:end="7:25"><literal type="number" pos:start="7:25" pos:end="7:25">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:22">schid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:22">devno</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">bool</name></type> <name pos:start="13:10" pos:end="13:19">have_devno</name> <init pos:start="13:21" pos:end="13:27">= <expr pos:start="13:23" pos:end="13:27"><name pos:start="13:23" pos:end="13:27">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:14">found</name> <init pos:start="15:16" pos:end="15:22">= <expr pos:start="15:18" pos:end="15:22"><name pos:start="15:18" pos:end="15:22">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">SubchDev</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:17">sch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:12"><decl pos:start="21:5" pos:end="21:11"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:11">num</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:38"><decl pos:start="23:5" pos:end="23:37"><type pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:15">DeviceState</name> <modifier pos:start="23:17" pos:end="23:17">*</modifier></type><name pos:start="23:18" pos:end="23:23">parent</name> <init pos:start="23:25" pos:end="23:37">= <expr pos:start="23:27" pos:end="23:37"><call pos:start="23:27" pos:end="23:37"><name pos:start="23:27" pos:end="23:32">DEVICE</name><argument_list pos:start="23:33" pos:end="23:37">(<argument pos:start="23:34" pos:end="23:36"><expr pos:start="23:34" pos:end="23:36"><name pos:start="23:34" pos:end="23:36">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:38"><expr pos:start="27:5" pos:end="27:37"><name pos:start="27:5" pos:end="27:7">sch</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:37"><name pos:start="27:11" pos:end="27:19">g_malloc0</name><argument_list pos:start="27:20" pos:end="27:37">(<argument pos:start="27:21" pos:end="27:36"><expr pos:start="27:21" pos:end="27:36"><sizeof pos:start="27:21" pos:end="27:36">sizeof<argument_list pos:start="27:27" pos:end="27:36">(<argument pos:start="27:28" pos:end="27:35"><expr pos:start="27:28" pos:end="27:35"><name pos:start="27:28" pos:end="27:35">SubchDev</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:27"><expr pos:start="31:5" pos:end="31:26"><name pos:start="31:5" pos:end="31:20"><name pos:start="31:5" pos:end="31:7">sch</name><operator pos:start="31:8" pos:end="31:9">-&gt;</operator><name pos:start="31:10" pos:end="31:20">driver_data</name></name> <operator pos:start="31:22" pos:end="31:22">=</operator> <name pos:start="31:24" pos:end="31:26">dev</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:19"><expr pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:12"><name pos:start="33:5" pos:end="33:7">dev</name><operator pos:start="33:8" pos:end="33:9">-&gt;</operator><name pos:start="33:10" pos:end="33:12">sch</name></name> <operator pos:start="33:14" pos:end="33:14">=</operator> <name pos:start="33:16" pos:end="33:18">sch</name></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:27"><expr pos:start="37:5" pos:end="37:26"><name pos:start="37:5" pos:end="37:19"><name pos:start="37:5" pos:end="37:7">dev</name><operator pos:start="37:8" pos:end="37:9">-&gt;</operator><name pos:start="37:10" pos:end="37:19">indicators</name></name> <operator pos:start="37:21" pos:end="37:21">=</operator> <name pos:start="37:23" pos:end="37:26">NULL</name></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:42">/* Initialize subchannel structure. */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:28"><expr pos:start="43:5" pos:end="43:27"><name pos:start="43:5" pos:end="43:21"><name pos:start="43:5" pos:end="43:7">sch</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:21">channel_prog</name></name> <operator pos:start="43:23" pos:end="43:23">=</operator> <literal type="number" pos:start="43:25" pos:end="43:27">0x0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:32"><expr pos:start="45:5" pos:end="45:31"><name pos:start="45:5" pos:end="45:23"><name pos:start="45:5" pos:end="45:7">sch</name><operator pos:start="45:8" pos:end="45:9">-&gt;</operator><name pos:start="45:10" pos:end="45:23">last_cmd_valid</name></name> <operator pos:start="45:25" pos:end="45:25">=</operator> <name pos:start="45:27" pos:end="45:31">false</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:32"><expr pos:start="47:5" pos:end="47:31"><name pos:start="47:5" pos:end="47:23"><name pos:start="47:5" pos:end="47:7">sch</name><operator pos:start="47:8" pos:end="47:9">-&gt;</operator><name pos:start="47:10" pos:end="47:23">thinint_active</name></name> <operator pos:start="47:25" pos:end="47:25">=</operator> <name pos:start="47:27" pos:end="47:31">false</name></expr>;</expr_stmt>

    <comment type="block" pos:start="49:5" pos:end="55:7">/*

     * Use a device number if provided. Otherwise, fall back to subchannel

     * number.

     */</comment>

    <if_stmt pos:start="57:5" pos:end="117:5"><if pos:start="57:5" pos:end="117:5">if <condition pos:start="57:8" pos:end="57:20">(<expr pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:11">dev</name><operator pos:start="57:12" pos:end="57:13">-&gt;</operator><name pos:start="57:14" pos:end="57:19">bus_id</name></name></expr>)</condition> <block pos:start="57:22" pos:end="117:5">{<block_content pos:start="59:9" pos:end="115:9">

        <expr_stmt pos:start="59:9" pos:end="59:71"><expr pos:start="59:9" pos:end="59:70"><name pos:start="59:9" pos:end="59:11">num</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="59:70"><name pos:start="59:15" pos:end="59:20">sscanf</name><argument_list pos:start="59:21" pos:end="59:70">(<argument pos:start="59:22" pos:end="59:32"><expr pos:start="59:22" pos:end="59:32"><name pos:start="59:22" pos:end="59:32"><name pos:start="59:22" pos:end="59:24">dev</name><operator pos:start="59:25" pos:end="59:26">-&gt;</operator><name pos:start="59:27" pos:end="59:32">bus_id</name></name></expr></argument>, <argument pos:start="59:35" pos:end="59:46"><expr pos:start="59:35" pos:end="59:46"><literal type="string" pos:start="59:35" pos:end="59:46">"%x.%x.%04x"</literal></expr></argument>, <argument pos:start="59:49" pos:end="59:54"><expr pos:start="59:49" pos:end="59:54"><operator pos:start="59:49" pos:end="59:49">&amp;</operator><name pos:start="59:50" pos:end="59:54">cssid</name></expr></argument>, <argument pos:start="59:57" pos:end="59:61"><expr pos:start="59:57" pos:end="59:61"><operator pos:start="59:57" pos:end="59:57">&amp;</operator><name pos:start="59:58" pos:end="59:61">ssid</name></expr></argument>, <argument pos:start="59:64" pos:end="59:69"><expr pos:start="59:64" pos:end="59:69"><operator pos:start="59:64" pos:end="59:64">&amp;</operator><name pos:start="59:65" pos:end="59:69">devno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="115:9"><if pos:start="61:9" pos:end="107:9">if <condition pos:start="61:12" pos:end="61:21">(<expr pos:start="61:13" pos:end="61:20"><name pos:start="61:13" pos:end="61:15">num</name> <operator pos:start="61:17" pos:end="61:18">==</operator> <literal type="number" pos:start="61:20" pos:end="61:20">3</literal></expr>)</condition> <block pos:start="61:23" pos:end="107:9">{<block_content pos:start="63:13" pos:end="105:30">

            <if_stmt pos:start="63:13" pos:end="73:13"><if pos:start="63:13" pos:end="73:13">if <condition pos:start="63:16" pos:end="63:57">(<expr pos:start="63:17" pos:end="63:56"><operator pos:start="63:17" pos:end="63:17">(</operator><name pos:start="63:18" pos:end="63:22">cssid</name> <operator pos:start="63:24" pos:end="63:24">&gt;</operator> <name pos:start="63:26" pos:end="63:34">MAX_CSSID</name><operator pos:start="63:35" pos:end="63:35">)</operator> <operator pos:start="63:37" pos:end="63:38">||</operator> <operator pos:start="63:40" pos:end="63:40">(</operator><name pos:start="63:41" pos:end="63:44">ssid</name> <operator pos:start="63:46" pos:end="63:46">&gt;</operator> <name pos:start="63:48" pos:end="63:55">MAX_SSID</name><operator pos:start="63:56" pos:end="63:56">)</operator></expr>)</condition> <block pos:start="63:59" pos:end="73:13">{<block_content pos:start="65:17" pos:end="71:29">

                <expr_stmt pos:start="65:17" pos:end="65:30"><expr pos:start="65:17" pos:end="65:29"><name pos:start="65:17" pos:end="65:19">ret</name> <operator pos:start="65:21" pos:end="65:21">=</operator> <operator pos:start="65:23" pos:end="65:23">-</operator><name pos:start="65:24" pos:end="65:29">EINVAL</name></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="69:42"><expr pos:start="67:17" pos:end="69:41"><call pos:start="67:17" pos:end="69:41"><name pos:start="67:17" pos:end="67:28">error_report</name><argument_list pos:start="67:29" pos:end="69:41">(<argument pos:start="67:30" pos:end="67:71"><expr pos:start="67:30" pos:end="67:71"><literal type="string" pos:start="67:30" pos:end="67:71">"Invalid cssid or ssid: cssid %x, ssid %x"</literal></expr></argument>,

                             <argument pos:start="69:30" pos:end="69:34"><expr pos:start="69:30" pos:end="69:34"><name pos:start="69:30" pos:end="69:34">cssid</name></expr></argument>, <argument pos:start="69:37" pos:end="69:40"><expr pos:start="69:37" pos:end="69:40"><name pos:start="69:37" pos:end="69:40">ssid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="71:17" pos:end="71:29">goto <name pos:start="71:22" pos:end="71:28">out_err</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="75:13" pos:end="75:47">/* Enforce use of virtual cssid. */</comment>

            <if_stmt pos:start="77:13" pos:end="85:13"><if pos:start="77:13" pos:end="85:13">if <condition pos:start="77:16" pos:end="77:39">(<expr pos:start="77:17" pos:end="77:38"><name pos:start="77:17" pos:end="77:21">cssid</name> <operator pos:start="77:23" pos:end="77:24">!=</operator> <name pos:start="77:26" pos:end="77:38">VIRTUAL_CSSID</name></expr>)</condition> <block pos:start="77:41" pos:end="85:13">{<block_content pos:start="79:17" pos:end="83:29">

                <expr_stmt pos:start="79:17" pos:end="79:30"><expr pos:start="79:17" pos:end="79:29"><name pos:start="79:17" pos:end="79:19">ret</name> <operator pos:start="79:21" pos:end="79:21">=</operator> <operator pos:start="79:23" pos:end="79:23">-</operator><name pos:start="79:24" pos:end="79:29">EINVAL</name></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:77"><expr pos:start="81:17" pos:end="81:76"><call pos:start="81:17" pos:end="81:76"><name pos:start="81:17" pos:end="81:28">error_report</name><argument_list pos:start="81:29" pos:end="81:76">(<argument pos:start="81:30" pos:end="81:68"><expr pos:start="81:30" pos:end="81:68"><literal type="string" pos:start="81:30" pos:end="81:68">"cssid %x not valid for virtio devices"</literal></expr></argument>, <argument pos:start="81:71" pos:end="81:75"><expr pos:start="81:71" pos:end="81:75"><name pos:start="81:71" pos:end="81:75">cssid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="83:17" pos:end="83:29">goto <name pos:start="83:22" pos:end="83:28">out_err</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="87:13" pos:end="97:13"><if pos:start="87:13" pos:end="97:13">if <condition pos:start="87:16" pos:end="87:51">(<expr pos:start="87:17" pos:end="87:50"><call pos:start="87:17" pos:end="87:50"><name pos:start="87:17" pos:end="87:30">css_devno_used</name><argument_list pos:start="87:31" pos:end="87:50">(<argument pos:start="87:32" pos:end="87:36"><expr pos:start="87:32" pos:end="87:36"><name pos:start="87:32" pos:end="87:36">cssid</name></expr></argument>, <argument pos:start="87:39" pos:end="87:42"><expr pos:start="87:39" pos:end="87:42"><name pos:start="87:39" pos:end="87:42">ssid</name></expr></argument>, <argument pos:start="87:45" pos:end="87:49"><expr pos:start="87:45" pos:end="87:49"><name pos:start="87:45" pos:end="87:49">devno</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:53" pos:end="97:13">{<block_content pos:start="89:17" pos:end="95:29">

                <expr_stmt pos:start="89:17" pos:end="89:30"><expr pos:start="89:17" pos:end="89:29"><name pos:start="89:17" pos:end="89:19">ret</name> <operator pos:start="89:21" pos:end="89:21">=</operator> <operator pos:start="89:23" pos:end="89:23">-</operator><name pos:start="89:24" pos:end="89:29">EEXIST</name></expr>;</expr_stmt>

                <expr_stmt pos:start="91:17" pos:end="93:36"><expr pos:start="91:17" pos:end="93:35"><call pos:start="91:17" pos:end="93:35"><name pos:start="91:17" pos:end="91:28">error_report</name><argument_list pos:start="91:29" pos:end="93:35">(<argument pos:start="91:30" pos:end="91:63"><expr pos:start="91:30" pos:end="91:63"><literal type="string" pos:start="91:30" pos:end="91:63">"Device %x.%x.%04x already exists"</literal></expr></argument>, <argument pos:start="91:66" pos:end="91:70"><expr pos:start="91:66" pos:end="91:70"><name pos:start="91:66" pos:end="91:70">cssid</name></expr></argument>, <argument pos:start="91:73" pos:end="91:76"><expr pos:start="91:73" pos:end="91:76"><name pos:start="91:73" pos:end="91:76">ssid</name></expr></argument>,

                             <argument pos:start="93:30" pos:end="93:34"><expr pos:start="93:30" pos:end="93:34"><name pos:start="93:30" pos:end="93:34">devno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="95:17" pos:end="95:29">goto <name pos:start="95:22" pos:end="95:28">out_err</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:31"><expr pos:start="99:13" pos:end="99:30"><name pos:start="99:13" pos:end="99:22"><name pos:start="99:13" pos:end="99:15">sch</name><operator pos:start="99:16" pos:end="99:17">-&gt;</operator><name pos:start="99:18" pos:end="99:22">cssid</name></name> <operator pos:start="99:24" pos:end="99:24">=</operator> <name pos:start="99:26" pos:end="99:30">cssid</name></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:29"><expr pos:start="101:13" pos:end="101:28"><name pos:start="101:13" pos:end="101:21"><name pos:start="101:13" pos:end="101:15">sch</name><operator pos:start="101:16" pos:end="101:17">-&gt;</operator><name pos:start="101:18" pos:end="101:21">ssid</name></name> <operator pos:start="101:23" pos:end="101:23">=</operator> <name pos:start="101:25" pos:end="101:28">ssid</name></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:31"><expr pos:start="103:13" pos:end="103:30"><name pos:start="103:13" pos:end="103:22"><name pos:start="103:13" pos:end="103:15">sch</name><operator pos:start="103:16" pos:end="103:17">-&gt;</operator><name pos:start="103:18" pos:end="103:22">devno</name></name> <operator pos:start="103:24" pos:end="103:24">=</operator> <name pos:start="103:26" pos:end="103:30">devno</name></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:30"><expr pos:start="105:13" pos:end="105:29"><name pos:start="105:13" pos:end="105:22">have_devno</name> <operator pos:start="105:24" pos:end="105:24">=</operator> <name pos:start="105:26" pos:end="105:29">true</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="107:11" pos:end="115:9">else <block pos:start="107:16" pos:end="115:9">{<block_content pos:start="109:13" pos:end="113:25">

            <expr_stmt pos:start="109:13" pos:end="109:26"><expr pos:start="109:13" pos:end="109:25"><name pos:start="109:13" pos:end="109:15">ret</name> <operator pos:start="109:17" pos:end="109:17">=</operator> <operator pos:start="109:19" pos:end="109:19">-</operator><name pos:start="109:20" pos:end="109:25">EINVAL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:72"><expr pos:start="111:13" pos:end="111:71"><call pos:start="111:13" pos:end="111:71"><name pos:start="111:13" pos:end="111:24">error_report</name><argument_list pos:start="111:25" pos:end="111:71">(<argument pos:start="111:26" pos:end="111:57"><expr pos:start="111:26" pos:end="111:57"><literal type="string" pos:start="111:26" pos:end="111:57">"Malformed devno parameter '%s'"</literal></expr></argument>, <argument pos:start="111:60" pos:end="111:70"><expr pos:start="111:60" pos:end="111:70"><name pos:start="111:60" pos:end="111:70"><name pos:start="111:60" pos:end="111:62">dev</name><operator pos:start="111:63" pos:end="111:64">-&gt;</operator><name pos:start="111:65" pos:end="111:70">bus_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="113:13" pos:end="113:25">goto <name pos:start="113:18" pos:end="113:24">out_err</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="121:5" pos:end="121:32">/* Find the next free id. */</comment>

    <if_stmt pos:start="123:5" pos:end="239:5"><if pos:start="123:5" pos:end="157:5">if <condition pos:start="123:8" pos:end="123:19">(<expr pos:start="123:9" pos:end="123:18"><name pos:start="123:9" pos:end="123:18">have_devno</name></expr>)</condition> <block pos:start="123:21" pos:end="157:5">{<block_content pos:start="125:9" pos:end="155:55">

        <for pos:start="125:9" pos:end="139:9">for <control pos:start="125:13" pos:end="125:52">(<init pos:start="125:14" pos:end="125:23"><expr pos:start="125:14" pos:end="125:22"><name pos:start="125:14" pos:end="125:18">schid</name> <operator pos:start="125:20" pos:end="125:20">=</operator> <literal type="number" pos:start="125:22" pos:end="125:22">0</literal></expr>;</init> <condition pos:start="125:25" pos:end="125:43"><expr pos:start="125:25" pos:end="125:42"><name pos:start="125:25" pos:end="125:29">schid</name> <operator pos:start="125:31" pos:end="125:32">&lt;=</operator> <name pos:start="125:34" pos:end="125:42">MAX_SCHID</name></expr>;</condition> <incr pos:start="125:45" pos:end="125:51"><expr pos:start="125:45" pos:end="125:51"><name pos:start="125:45" pos:end="125:49">schid</name><operator pos:start="125:50" pos:end="125:51">++</operator></expr></incr>)</control> <block pos:start="125:54" pos:end="139:9">{<block_content pos:start="127:13" pos:end="137:13">

            <if_stmt pos:start="127:13" pos:end="137:13"><if pos:start="127:13" pos:end="137:13">if <condition pos:start="127:16" pos:end="127:55">(<expr pos:start="127:17" pos:end="127:54"><operator pos:start="127:17" pos:end="127:17">!</operator><call pos:start="127:18" pos:end="127:54"><name pos:start="127:18" pos:end="127:31">css_find_subch</name><argument_list pos:start="127:32" pos:end="127:54">(<argument pos:start="127:33" pos:end="127:33"><expr pos:start="127:33" pos:end="127:33"><literal type="number" pos:start="127:33" pos:end="127:33">1</literal></expr></argument>, <argument pos:start="127:36" pos:end="127:40"><expr pos:start="127:36" pos:end="127:40"><name pos:start="127:36" pos:end="127:40">cssid</name></expr></argument>, <argument pos:start="127:43" pos:end="127:46"><expr pos:start="127:43" pos:end="127:46"><name pos:start="127:43" pos:end="127:46">ssid</name></expr></argument>, <argument pos:start="127:49" pos:end="127:53"><expr pos:start="127:49" pos:end="127:53"><name pos:start="127:49" pos:end="127:53">schid</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="127:57" pos:end="137:13">{<block_content pos:start="129:17" pos:end="135:22">

                <expr_stmt pos:start="129:17" pos:end="129:35"><expr pos:start="129:17" pos:end="129:34"><name pos:start="129:17" pos:end="129:26"><name pos:start="129:17" pos:end="129:19">sch</name><operator pos:start="129:20" pos:end="129:21">-&gt;</operator><name pos:start="129:22" pos:end="129:26">schid</name></name> <operator pos:start="129:28" pos:end="129:28">=</operator> <name pos:start="129:30" pos:end="129:34">schid</name></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:65"><expr pos:start="131:17" pos:end="131:64"><call pos:start="131:17" pos:end="131:64"><name pos:start="131:17" pos:end="131:32">css_subch_assign</name><argument_list pos:start="131:33" pos:end="131:64">(<argument pos:start="131:34" pos:end="131:38"><expr pos:start="131:34" pos:end="131:38"><name pos:start="131:34" pos:end="131:38">cssid</name></expr></argument>, <argument pos:start="131:41" pos:end="131:44"><expr pos:start="131:41" pos:end="131:44"><name pos:start="131:41" pos:end="131:44">ssid</name></expr></argument>, <argument pos:start="131:47" pos:end="131:51"><expr pos:start="131:47" pos:end="131:51"><name pos:start="131:47" pos:end="131:51">schid</name></expr></argument>, <argument pos:start="131:54" pos:end="131:58"><expr pos:start="131:54" pos:end="131:58"><name pos:start="131:54" pos:end="131:58">devno</name></expr></argument>, <argument pos:start="131:61" pos:end="131:63"><expr pos:start="131:61" pos:end="131:63"><name pos:start="131:61" pos:end="131:63">sch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:29"><expr pos:start="133:17" pos:end="133:28"><name pos:start="133:17" pos:end="133:21">found</name> <operator pos:start="133:23" pos:end="133:23">=</operator> <name pos:start="133:25" pos:end="133:28">true</name></expr>;</expr_stmt>

                <break pos:start="135:17" pos:end="135:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="141:9" pos:end="151:9"><if pos:start="141:9" pos:end="151:9">if <condition pos:start="141:12" pos:end="141:19">(<expr pos:start="141:13" pos:end="141:18"><operator pos:start="141:13" pos:end="141:13">!</operator><name pos:start="141:14" pos:end="141:18">found</name></expr>)</condition> <block pos:start="141:21" pos:end="151:9">{<block_content pos:start="143:13" pos:end="149:25">

            <expr_stmt pos:start="143:13" pos:end="143:26"><expr pos:start="143:13" pos:end="143:25"><name pos:start="143:13" pos:end="143:15">ret</name> <operator pos:start="143:17" pos:end="143:17">=</operator> <operator pos:start="143:19" pos:end="143:19">-</operator><name pos:start="143:20" pos:end="143:25">ENODEV</name></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="147:32"><expr pos:start="145:13" pos:end="147:31"><call pos:start="145:13" pos:end="147:31"><name pos:start="145:13" pos:end="145:24">error_report</name><argument_list pos:start="145:25" pos:end="147:31">(<argument pos:start="145:26" pos:end="145:66"><expr pos:start="145:26" pos:end="145:66"><literal type="string" pos:start="145:26" pos:end="145:66">"No free subchannel found for %x.%x.%04x"</literal></expr></argument>, <argument pos:start="145:69" pos:end="145:73"><expr pos:start="145:69" pos:end="145:73"><name pos:start="145:69" pos:end="145:73">cssid</name></expr></argument>, <argument pos:start="145:76" pos:end="145:79"><expr pos:start="145:76" pos:end="145:79"><name pos:start="145:76" pos:end="145:79">ssid</name></expr></argument>,

                         <argument pos:start="147:26" pos:end="147:30"><expr pos:start="147:26" pos:end="147:30"><name pos:start="147:26" pos:end="147:30">devno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="149:13" pos:end="149:25">goto <name pos:start="149:18" pos:end="149:24">out_err</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="153:9" pos:end="155:55"><expr pos:start="153:9" pos:end="155:54"><call pos:start="153:9" pos:end="155:54"><name pos:start="153:9" pos:end="153:35">trace_virtio_ccw_new_device</name><argument_list pos:start="153:36" pos:end="155:54">(<argument pos:start="153:37" pos:end="153:41"><expr pos:start="153:37" pos:end="153:41"><name pos:start="153:37" pos:end="153:41">cssid</name></expr></argument>, <argument pos:start="153:44" pos:end="153:47"><expr pos:start="153:44" pos:end="153:47"><name pos:start="153:44" pos:end="153:47">ssid</name></expr></argument>, <argument pos:start="153:50" pos:end="153:54"><expr pos:start="153:50" pos:end="153:54"><name pos:start="153:50" pos:end="153:54">schid</name></expr></argument>, <argument pos:start="153:57" pos:end="153:61"><expr pos:start="153:57" pos:end="153:61"><name pos:start="153:57" pos:end="153:61">devno</name></expr></argument>,

                                    <argument pos:start="155:37" pos:end="155:53"><expr pos:start="155:37" pos:end="155:53"><literal type="string" pos:start="155:37" pos:end="155:53">"user-configured"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="157:7" pos:end="239:5">else <block pos:start="157:12" pos:end="239:5">{<block_content pos:start="159:9" pos:end="237:55">

        <expr_stmt pos:start="159:9" pos:end="159:30"><expr pos:start="159:9" pos:end="159:29"><name pos:start="159:9" pos:end="159:13">cssid</name> <operator pos:start="159:15" pos:end="159:15">=</operator> <name pos:start="159:17" pos:end="159:29">VIRTUAL_CSSID</name></expr>;</expr_stmt>

        <for pos:start="161:9" pos:end="223:9">for <control pos:start="161:13" pos:end="161:48">(<init pos:start="161:14" pos:end="161:22"><expr pos:start="161:14" pos:end="161:21"><name pos:start="161:14" pos:end="161:17">ssid</name> <operator pos:start="161:19" pos:end="161:19">=</operator> <literal type="number" pos:start="161:21" pos:end="161:21">0</literal></expr>;</init> <condition pos:start="161:24" pos:end="161:40"><expr pos:start="161:24" pos:end="161:39"><name pos:start="161:24" pos:end="161:27">ssid</name> <operator pos:start="161:29" pos:end="161:30">&lt;=</operator> <name pos:start="161:32" pos:end="161:39">MAX_SSID</name></expr>;</condition> <incr pos:start="161:42" pos:end="161:47"><expr pos:start="161:42" pos:end="161:47"><name pos:start="161:42" pos:end="161:45">ssid</name><operator pos:start="161:46" pos:end="161:47">++</operator></expr></incr>)</control> <block pos:start="161:50" pos:end="223:9">{<block_content pos:start="163:13" pos:end="221:13">

            <for pos:start="163:13" pos:end="215:13">for <control pos:start="163:17" pos:end="163:56">(<init pos:start="163:18" pos:end="163:27"><expr pos:start="163:18" pos:end="163:26"><name pos:start="163:18" pos:end="163:22">schid</name> <operator pos:start="163:24" pos:end="163:24">=</operator> <literal type="number" pos:start="163:26" pos:end="163:26">0</literal></expr>;</init> <condition pos:start="163:29" pos:end="163:47"><expr pos:start="163:29" pos:end="163:46"><name pos:start="163:29" pos:end="163:33">schid</name> <operator pos:start="163:35" pos:end="163:36">&lt;=</operator> <name pos:start="163:38" pos:end="163:46">MAX_SCHID</name></expr>;</condition> <incr pos:start="163:49" pos:end="163:55"><expr pos:start="163:49" pos:end="163:55"><name pos:start="163:49" pos:end="163:53">schid</name><operator pos:start="163:54" pos:end="163:55">++</operator></expr></incr>)</control> <block pos:start="163:58" pos:end="215:13">{<block_content pos:start="165:17" pos:end="213:17">

                <if_stmt pos:start="165:17" pos:end="213:17"><if pos:start="165:17" pos:end="213:17">if <condition pos:start="165:20" pos:end="165:59">(<expr pos:start="165:21" pos:end="165:58"><operator pos:start="165:21" pos:end="165:21">!</operator><call pos:start="165:22" pos:end="165:58"><name pos:start="165:22" pos:end="165:35">css_find_subch</name><argument_list pos:start="165:36" pos:end="165:58">(<argument pos:start="165:37" pos:end="165:37"><expr pos:start="165:37" pos:end="165:37"><literal type="number" pos:start="165:37" pos:end="165:37">1</literal></expr></argument>, <argument pos:start="165:40" pos:end="165:44"><expr pos:start="165:40" pos:end="165:44"><name pos:start="165:40" pos:end="165:44">cssid</name></expr></argument>, <argument pos:start="165:47" pos:end="165:50"><expr pos:start="165:47" pos:end="165:50"><name pos:start="165:47" pos:end="165:50">ssid</name></expr></argument>, <argument pos:start="165:53" pos:end="165:57"><expr pos:start="165:53" pos:end="165:57"><name pos:start="165:53" pos:end="165:57">schid</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="165:61" pos:end="213:17">{<block_content pos:start="167:21" pos:end="211:26">

                    <expr_stmt pos:start="167:21" pos:end="167:39"><expr pos:start="167:21" pos:end="167:38"><name pos:start="167:21" pos:end="167:30"><name pos:start="167:21" pos:end="167:23">sch</name><operator pos:start="167:24" pos:end="167:25">-&gt;</operator><name pos:start="167:26" pos:end="167:30">cssid</name></name> <operator pos:start="167:32" pos:end="167:32">=</operator> <name pos:start="167:34" pos:end="167:38">cssid</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="169:21" pos:end="169:37"><expr pos:start="169:21" pos:end="169:36"><name pos:start="169:21" pos:end="169:29"><name pos:start="169:21" pos:end="169:23">sch</name><operator pos:start="169:24" pos:end="169:25">-&gt;</operator><name pos:start="169:26" pos:end="169:29">ssid</name></name> <operator pos:start="169:31" pos:end="169:31">=</operator> <name pos:start="169:33" pos:end="169:36">ssid</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="171:21" pos:end="171:39"><expr pos:start="171:21" pos:end="171:38"><name pos:start="171:21" pos:end="171:30"><name pos:start="171:21" pos:end="171:23">sch</name><operator pos:start="171:24" pos:end="171:25">-&gt;</operator><name pos:start="171:26" pos:end="171:30">schid</name></name> <operator pos:start="171:32" pos:end="171:32">=</operator> <name pos:start="171:34" pos:end="171:38">schid</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="173:21" pos:end="173:34"><expr pos:start="173:21" pos:end="173:33"><name pos:start="173:21" pos:end="173:25">devno</name> <operator pos:start="173:27" pos:end="173:27">=</operator> <name pos:start="173:29" pos:end="173:33">schid</name></expr>;</expr_stmt>

                    <comment type="block" pos:start="175:21" pos:end="181:23">/*

                     * If the devno is already taken, look further in this

                     * subchannel set.

                     */</comment>

                    <while pos:start="183:21" pos:end="203:21">while <condition pos:start="183:27" pos:end="183:62">(<expr pos:start="183:28" pos:end="183:61"><call pos:start="183:28" pos:end="183:61"><name pos:start="183:28" pos:end="183:41">css_devno_used</name><argument_list pos:start="183:42" pos:end="183:61">(<argument pos:start="183:43" pos:end="183:47"><expr pos:start="183:43" pos:end="183:47"><name pos:start="183:43" pos:end="183:47">cssid</name></expr></argument>, <argument pos:start="183:50" pos:end="183:53"><expr pos:start="183:50" pos:end="183:53"><name pos:start="183:50" pos:end="183:53">ssid</name></expr></argument>, <argument pos:start="183:56" pos:end="183:60"><expr pos:start="183:56" pos:end="183:60"><name pos:start="183:56" pos:end="183:60">devno</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="183:64" pos:end="203:21">{<block_content pos:start="185:25" pos:end="201:25">

                        <if_stmt pos:start="185:25" pos:end="201:25"><if pos:start="185:25" pos:end="189:25">if <condition pos:start="185:28" pos:end="185:47">(<expr pos:start="185:29" pos:end="185:46"><name pos:start="185:29" pos:end="185:33">devno</name> <operator pos:start="185:35" pos:end="185:36">==</operator> <name pos:start="185:38" pos:end="185:46">MAX_SCHID</name></expr>)</condition> <block pos:start="185:49" pos:end="189:25">{<block_content pos:start="187:29" pos:end="187:38">

                            <expr_stmt pos:start="187:29" pos:end="187:38"><expr pos:start="187:29" pos:end="187:37"><name pos:start="187:29" pos:end="187:33">devno</name> <operator pos:start="187:35" pos:end="187:35">=</operator> <literal type="number" pos:start="187:37" pos:end="187:37">0</literal></expr>;</expr_stmt>

                        </block_content>}</block></if> <if type="elseif" pos:start="189:27" pos:end="197:25">else if <condition pos:start="189:35" pos:end="189:54">(<expr pos:start="189:36" pos:end="189:53"><name pos:start="189:36" pos:end="189:40">devno</name> <operator pos:start="189:42" pos:end="189:43">==</operator> <name pos:start="189:45" pos:end="189:49">schid</name> <operator pos:start="189:51" pos:end="189:51">-</operator> <literal type="number" pos:start="189:53" pos:end="189:53">1</literal></expr>)</condition> <block pos:start="189:56" pos:end="197:25">{<block_content pos:start="191:29" pos:end="195:41">

                            <expr_stmt pos:start="191:29" pos:end="191:42"><expr pos:start="191:29" pos:end="191:41"><name pos:start="191:29" pos:end="191:31">ret</name> <operator pos:start="191:33" pos:end="191:33">=</operator> <operator pos:start="191:35" pos:end="191:35">-</operator><name pos:start="191:36" pos:end="191:41">ENODEV</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="193:29" pos:end="193:64"><expr pos:start="193:29" pos:end="193:63"><call pos:start="193:29" pos:end="193:63"><name pos:start="193:29" pos:end="193:40">error_report</name><argument_list pos:start="193:41" pos:end="193:63">(<argument pos:start="193:42" pos:end="193:62"><expr pos:start="193:42" pos:end="193:62"><literal type="string" pos:start="193:42" pos:end="193:62">"No free devno found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <goto pos:start="195:29" pos:end="195:41">goto <name pos:start="195:34" pos:end="195:40">out_err</name>;</goto>

                        </block_content>}</block></if> <else pos:start="197:27" pos:end="201:25">else <block pos:start="197:32" pos:end="201:25">{<block_content pos:start="199:29" pos:end="199:36">

                            <expr_stmt pos:start="199:29" pos:end="199:36"><expr pos:start="199:29" pos:end="199:35"><name pos:start="199:29" pos:end="199:33">devno</name><operator pos:start="199:34" pos:end="199:35">++</operator></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></while>

                    <expr_stmt pos:start="205:21" pos:end="205:39"><expr pos:start="205:21" pos:end="205:38"><name pos:start="205:21" pos:end="205:30"><name pos:start="205:21" pos:end="205:23">sch</name><operator pos:start="205:24" pos:end="205:25">-&gt;</operator><name pos:start="205:26" pos:end="205:30">devno</name></name> <operator pos:start="205:32" pos:end="205:32">=</operator> <name pos:start="205:34" pos:end="205:38">devno</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="207:21" pos:end="207:69"><expr pos:start="207:21" pos:end="207:68"><call pos:start="207:21" pos:end="207:68"><name pos:start="207:21" pos:end="207:36">css_subch_assign</name><argument_list pos:start="207:37" pos:end="207:68">(<argument pos:start="207:38" pos:end="207:42"><expr pos:start="207:38" pos:end="207:42"><name pos:start="207:38" pos:end="207:42">cssid</name></expr></argument>, <argument pos:start="207:45" pos:end="207:48"><expr pos:start="207:45" pos:end="207:48"><name pos:start="207:45" pos:end="207:48">ssid</name></expr></argument>, <argument pos:start="207:51" pos:end="207:55"><expr pos:start="207:51" pos:end="207:55"><name pos:start="207:51" pos:end="207:55">schid</name></expr></argument>, <argument pos:start="207:58" pos:end="207:62"><expr pos:start="207:58" pos:end="207:62"><name pos:start="207:58" pos:end="207:62">devno</name></expr></argument>, <argument pos:start="207:65" pos:end="207:67"><expr pos:start="207:65" pos:end="207:67"><name pos:start="207:65" pos:end="207:67">sch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="209:21" pos:end="209:33"><expr pos:start="209:21" pos:end="209:32"><name pos:start="209:21" pos:end="209:25">found</name> <operator pos:start="209:27" pos:end="209:27">=</operator> <name pos:start="209:29" pos:end="209:32">true</name></expr>;</expr_stmt>

                    <break pos:start="211:21" pos:end="211:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="217:13" pos:end="221:13"><if pos:start="217:13" pos:end="221:13">if <condition pos:start="217:16" pos:end="217:22">(<expr pos:start="217:17" pos:end="217:21"><name pos:start="217:17" pos:end="217:21">found</name></expr>)</condition> <block pos:start="217:24" pos:end="221:13">{<block_content pos:start="219:17" pos:end="219:22">

                <break pos:start="219:17" pos:end="219:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="225:9" pos:end="233:9"><if pos:start="225:9" pos:end="233:9">if <condition pos:start="225:12" pos:end="225:19">(<expr pos:start="225:13" pos:end="225:18"><operator pos:start="225:13" pos:end="225:13">!</operator><name pos:start="225:14" pos:end="225:18">found</name></expr>)</condition> <block pos:start="225:21" pos:end="233:9">{<block_content pos:start="227:13" pos:end="231:25">

            <expr_stmt pos:start="227:13" pos:end="227:26"><expr pos:start="227:13" pos:end="227:25"><name pos:start="227:13" pos:end="227:15">ret</name> <operator pos:start="227:17" pos:end="227:17">=</operator> <operator pos:start="227:19" pos:end="227:19">-</operator><name pos:start="227:20" pos:end="227:25">ENODEV</name></expr>;</expr_stmt>

            <expr_stmt pos:start="229:13" pos:end="229:63"><expr pos:start="229:13" pos:end="229:62"><call pos:start="229:13" pos:end="229:62"><name pos:start="229:13" pos:end="229:24">error_report</name><argument_list pos:start="229:25" pos:end="229:62">(<argument pos:start="229:26" pos:end="229:61"><expr pos:start="229:26" pos:end="229:61"><literal type="string" pos:start="229:26" pos:end="229:61">"Virtual channel subsystem is full!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="231:13" pos:end="231:25">goto <name pos:start="231:18" pos:end="231:24">out_err</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="235:9" pos:end="237:55"><expr pos:start="235:9" pos:end="237:54"><call pos:start="235:9" pos:end="237:54"><name pos:start="235:9" pos:end="235:35">trace_virtio_ccw_new_device</name><argument_list pos:start="235:36" pos:end="237:54">(<argument pos:start="235:37" pos:end="235:41"><expr pos:start="235:37" pos:end="235:41"><name pos:start="235:37" pos:end="235:41">cssid</name></expr></argument>, <argument pos:start="235:44" pos:end="235:47"><expr pos:start="235:44" pos:end="235:47"><name pos:start="235:44" pos:end="235:47">ssid</name></expr></argument>, <argument pos:start="235:50" pos:end="235:54"><expr pos:start="235:50" pos:end="235:54"><name pos:start="235:50" pos:end="235:54">schid</name></expr></argument>, <argument pos:start="235:57" pos:end="235:61"><expr pos:start="235:57" pos:end="235:61"><name pos:start="235:57" pos:end="235:61">devno</name></expr></argument>,

                                    <argument pos:start="237:37" pos:end="237:53"><expr pos:start="237:37" pos:end="237:53"><literal type="string" pos:start="237:37" pos:end="237:53">"auto-configured"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="243:5" pos:end="243:30">/* Build initial schib. */</comment>

    <expr_stmt pos:start="245:5" pos:end="245:63"><expr pos:start="245:5" pos:end="245:62"><call pos:start="245:5" pos:end="245:62"><name pos:start="245:5" pos:end="245:31">css_sch_build_virtual_schib</name><argument_list pos:start="245:32" pos:end="245:62">(<argument pos:start="245:33" pos:end="245:35"><expr pos:start="245:33" pos:end="245:35"><name pos:start="245:33" pos:end="245:35">sch</name></expr></argument>, <argument pos:start="245:38" pos:end="245:38"><expr pos:start="245:38" pos:end="245:38"><literal type="number" pos:start="245:38" pos:end="245:38">0</literal></expr></argument>, <argument pos:start="245:41" pos:end="245:61"><expr pos:start="245:41" pos:end="245:61"><name pos:start="245:41" pos:end="245:61">VIRTIO_CCW_CHPID_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="249:5" pos:end="249:32"><expr pos:start="249:5" pos:end="249:31"><name pos:start="249:5" pos:end="249:15"><name pos:start="249:5" pos:end="249:7">sch</name><operator pos:start="249:8" pos:end="249:9">-&gt;</operator><name pos:start="249:10" pos:end="249:15">ccw_cb</name></name> <operator pos:start="249:17" pos:end="249:17">=</operator> <name pos:start="249:19" pos:end="249:31">virtio_ccw_cb</name></expr>;</expr_stmt>



    <comment type="block" pos:start="253:5" pos:end="253:29">/* Build senseid data. */</comment>

    <expr_stmt pos:start="255:5" pos:end="255:41"><expr pos:start="255:5" pos:end="255:40"><call pos:start="255:5" pos:end="255:40"><name pos:start="255:5" pos:end="255:10">memset</name><argument_list pos:start="255:11" pos:end="255:40">(<argument pos:start="255:12" pos:end="255:19"><expr pos:start="255:12" pos:end="255:19"><operator pos:start="255:12" pos:end="255:12">&amp;</operator><name pos:start="255:13" pos:end="255:19"><name pos:start="255:13" pos:end="255:15">sch</name><operator pos:start="255:16" pos:end="255:17">-&gt;</operator><name pos:start="255:18" pos:end="255:19">id</name></name></expr></argument>, <argument pos:start="255:22" pos:end="255:22"><expr pos:start="255:22" pos:end="255:22"><literal type="number" pos:start="255:22" pos:end="255:22">0</literal></expr></argument>, <argument pos:start="255:25" pos:end="255:39"><expr pos:start="255:25" pos:end="255:39"><sizeof pos:start="255:25" pos:end="255:39">sizeof<argument_list pos:start="255:31" pos:end="255:39">(<argument pos:start="255:32" pos:end="255:38"><expr pos:start="255:32" pos:end="255:38"><name pos:start="255:32" pos:end="255:38">SenseId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:28"><expr pos:start="257:5" pos:end="257:27"><name pos:start="257:5" pos:end="257:20"><name pos:start="257:5" pos:end="257:7">sch</name><operator pos:start="257:8" pos:end="257:9">-&gt;</operator><name pos:start="257:10" pos:end="257:11">id</name><operator pos:start="257:12" pos:end="257:12">.</operator><name pos:start="257:13" pos:end="257:20">reserved</name></name> <operator pos:start="257:22" pos:end="257:22">=</operator> <literal type="number" pos:start="257:24" pos:end="257:27">0xff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="259:5" pos:end="259:41"><expr pos:start="259:5" pos:end="259:40"><name pos:start="259:5" pos:end="259:19"><name pos:start="259:5" pos:end="259:7">sch</name><operator pos:start="259:8" pos:end="259:9">-&gt;</operator><name pos:start="259:10" pos:end="259:11">id</name><operator pos:start="259:12" pos:end="259:12">.</operator><name pos:start="259:13" pos:end="259:19">cu_type</name></name> <operator pos:start="259:21" pos:end="259:21">=</operator> <name pos:start="259:23" pos:end="259:40">VIRTIO_CCW_CU_TYPE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="261:5" pos:end="261:39"><expr pos:start="261:5" pos:end="261:38"><name pos:start="261:5" pos:end="261:20"><name pos:start="261:5" pos:end="261:7">sch</name><operator pos:start="261:8" pos:end="261:9">-&gt;</operator><name pos:start="261:10" pos:end="261:11">id</name><operator pos:start="261:12" pos:end="261:12">.</operator><name pos:start="261:13" pos:end="261:20">cu_model</name></name> <operator pos:start="261:22" pos:end="261:22">=</operator> <name pos:start="261:24" pos:end="261:38"><name pos:start="261:24" pos:end="261:27">vdev</name><operator pos:start="261:28" pos:end="261:29">-&gt;</operator><name pos:start="261:30" pos:end="261:38">device_id</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="265:5" pos:end="265:50">/* Only the first 32 feature bits are used. */</comment>

    <expr_stmt pos:start="267:5" pos:end="269:80"><expr pos:start="267:5" pos:end="269:79"><name pos:start="267:5" pos:end="267:25"><name pos:start="267:5" pos:end="267:7">dev</name><operator pos:start="267:8" pos:end="267:9">-&gt;</operator><name pos:start="267:10" pos:end="267:22">host_features</name><index pos:start="267:23" pos:end="267:25">[<expr pos:start="267:24" pos:end="267:24"><literal type="number" pos:start="267:24" pos:end="267:24">0</literal></expr>]</index></name> <operator pos:start="267:27" pos:end="267:27">=</operator> <call pos:start="267:29" pos:end="269:79"><name pos:start="267:29" pos:end="267:56">virtio_bus_get_vdev_features</name><argument_list pos:start="267:57" pos:end="269:79">(<argument pos:start="267:58" pos:end="267:66"><expr pos:start="267:58" pos:end="267:66"><operator pos:start="267:58" pos:end="267:58">&amp;</operator><name pos:start="267:59" pos:end="267:66"><name pos:start="267:59" pos:end="267:61">dev</name><operator pos:start="267:62" pos:end="267:63">-&gt;</operator><name pos:start="267:64" pos:end="267:66">bus</name></name></expr></argument>,

                                                         <argument pos:start="269:58" pos:end="269:78"><expr pos:start="269:58" pos:end="269:78"><name pos:start="269:58" pos:end="269:78"><name pos:start="269:58" pos:end="269:60">dev</name><operator pos:start="269:61" pos:end="269:62">-&gt;</operator><name pos:start="269:63" pos:end="269:75">host_features</name><index pos:start="269:76" pos:end="269:78">[<expr pos:start="269:77" pos:end="269:77"><literal type="number" pos:start="269:77" pos:end="269:77">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="273:5" pos:end="273:61"><expr pos:start="273:5" pos:end="273:60"><name pos:start="273:5" pos:end="273:25"><name pos:start="273:5" pos:end="273:7">dev</name><operator pos:start="273:8" pos:end="273:9">-&gt;</operator><name pos:start="273:10" pos:end="273:22">host_features</name><index pos:start="273:23" pos:end="273:25">[<expr pos:start="273:24" pos:end="273:24"><literal type="number" pos:start="273:24" pos:end="273:24">0</literal></expr>]</index></name> <operator pos:start="273:27" pos:end="273:28">|=</operator> <literal type="number" pos:start="273:30" pos:end="273:32">0x1</literal> <operator pos:start="273:34" pos:end="273:35">&lt;&lt;</operator> <name pos:start="273:37" pos:end="273:60">VIRTIO_F_NOTIFY_ON_EMPTY</name></expr>;</expr_stmt>

    <expr_stmt pos:start="275:5" pos:end="275:57"><expr pos:start="275:5" pos:end="275:56"><name pos:start="275:5" pos:end="275:25"><name pos:start="275:5" pos:end="275:7">dev</name><operator pos:start="275:8" pos:end="275:9">-&gt;</operator><name pos:start="275:10" pos:end="275:22">host_features</name><index pos:start="275:23" pos:end="275:25">[<expr pos:start="275:24" pos:end="275:24"><literal type="number" pos:start="275:24" pos:end="275:24">0</literal></expr>]</index></name> <operator pos:start="275:27" pos:end="275:28">|=</operator> <literal type="number" pos:start="275:30" pos:end="275:32">0x1</literal> <operator pos:start="275:34" pos:end="275:35">&lt;&lt;</operator> <name pos:start="275:37" pos:end="275:56">VIRTIO_F_BAD_FEATURE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="279:5" pos:end="281:49"><expr pos:start="279:5" pos:end="281:48"><call pos:start="279:5" pos:end="281:48"><name pos:start="279:5" pos:end="279:25">css_generate_sch_crws</name><argument_list pos:start="279:26" pos:end="281:48">(<argument pos:start="279:27" pos:end="279:36"><expr pos:start="279:27" pos:end="279:36"><name pos:start="279:27" pos:end="279:36"><name pos:start="279:27" pos:end="279:29">sch</name><operator pos:start="279:30" pos:end="279:31">-&gt;</operator><name pos:start="279:32" pos:end="279:36">cssid</name></name></expr></argument>, <argument pos:start="279:39" pos:end="279:47"><expr pos:start="279:39" pos:end="279:47"><name pos:start="279:39" pos:end="279:47"><name pos:start="279:39" pos:end="279:41">sch</name><operator pos:start="279:42" pos:end="279:43">-&gt;</operator><name pos:start="279:44" pos:end="279:47">ssid</name></name></expr></argument>, <argument pos:start="279:50" pos:end="279:59"><expr pos:start="279:50" pos:end="279:59"><name pos:start="279:50" pos:end="279:59"><name pos:start="279:50" pos:end="279:52">sch</name><operator pos:start="279:53" pos:end="279:54">-&gt;</operator><name pos:start="279:55" pos:end="279:59">schid</name></name></expr></argument>,

                          <argument pos:start="281:27" pos:end="281:44"><expr pos:start="281:27" pos:end="281:44"><name pos:start="281:27" pos:end="281:44"><name pos:start="281:27" pos:end="281:32">parent</name><operator pos:start="281:33" pos:end="281:34">-&gt;</operator><name pos:start="281:35" pos:end="281:44">hotplugged</name></name></expr></argument>, <argument pos:start="281:47" pos:end="281:47"><expr pos:start="281:47" pos:end="281:47"><literal type="number" pos:start="281:47" pos:end="281:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="283:5" pos:end="283:13">return <expr pos:start="283:12" pos:end="283:12"><literal type="number" pos:start="283:12" pos:end="283:12">0</literal></expr>;</return>



<label pos:start="287:1" pos:end="287:8"><name pos:start="287:1" pos:end="287:7">out_err</name>:</label>

    <expr_stmt pos:start="289:5" pos:end="289:20"><expr pos:start="289:5" pos:end="289:19"><name pos:start="289:5" pos:end="289:12"><name pos:start="289:5" pos:end="289:7">dev</name><operator pos:start="289:8" pos:end="289:9">-&gt;</operator><name pos:start="289:10" pos:end="289:12">sch</name></name> <operator pos:start="289:14" pos:end="289:14">=</operator> <name pos:start="289:16" pos:end="289:19">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:16"><expr pos:start="291:5" pos:end="291:15"><call pos:start="291:5" pos:end="291:15"><name pos:start="291:5" pos:end="291:10">g_free</name><argument_list pos:start="291:11" pos:end="291:15">(<argument pos:start="291:12" pos:end="291:14"><expr pos:start="291:12" pos:end="291:14"><name pos:start="291:12" pos:end="291:14">sch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="293:5" pos:end="293:15">return <expr pos:start="293:12" pos:end="293:14"><name pos:start="293:12" pos:end="293:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
