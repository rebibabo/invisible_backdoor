<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16688.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int32_t</name></type> <name pos:start="1:16" pos:end="1:32">bmdma_prepare_buf</name><parameter_list pos:start="1:33" pos:end="1:60">(<parameter pos:start="1:34" pos:end="1:44"><decl pos:start="1:34" pos:end="1:44"><type pos:start="1:34" pos:end="1:44"><name pos:start="1:34" pos:end="1:39">IDEDMA</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">dma</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:59"><decl pos:start="1:47" pos:end="1:59"><type pos:start="1:47" pos:end="1:59"><name pos:start="1:47" pos:end="1:53">int32_t</name></type> <name pos:start="1:55" pos:end="1:59">limit</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="119:1">{<block_content pos:start="5:5" pos:end="117:14">

    <decl_stmt pos:start="5:5" pos:end="5:53"><decl pos:start="5:5" pos:end="5:52"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">BMDMAState</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:18">bm</name> <init pos:start="5:20" pos:end="5:52">= <expr pos:start="5:22" pos:end="5:52"><call pos:start="5:22" pos:end="5:52"><name pos:start="5:22" pos:end="5:30">DO_UPCAST</name><argument_list pos:start="5:31" pos:end="5:52">(<argument pos:start="5:32" pos:end="5:41"><expr pos:start="5:32" pos:end="5:41"><name pos:start="5:32" pos:end="5:41">BMDMAState</name></expr></argument>, <argument pos:start="5:44" pos:end="5:46"><expr pos:start="5:44" pos:end="5:46"><name pos:start="5:44" pos:end="5:46">dma</name></expr></argument>, <argument pos:start="5:49" pos:end="5:51"><expr pos:start="5:49" pos:end="5:51"><name pos:start="5:49" pos:end="5:51">dma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">IDEState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">s</name> <init pos:start="7:17" pos:end="7:37">= <expr pos:start="7:19" pos:end="7:37"><call pos:start="7:19" pos:end="7:37"><name pos:start="7:19" pos:end="7:33">bmdma_active_if</name><argument_list pos:start="7:34" pos:end="7:37">(<argument pos:start="7:35" pos:end="7:36"><expr pos:start="7:35" pos:end="7:36"><name pos:start="7:35" pos:end="7:36">bm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:49"><decl pos:start="9:5" pos:end="9:48"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">PCIDevice</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:22">pci_dev</name> <init pos:start="9:24" pos:end="9:48">= <expr pos:start="9:26" pos:end="9:48"><call pos:start="9:26" pos:end="9:48"><name pos:start="9:26" pos:end="9:35">PCI_DEVICE</name><argument_list pos:start="9:36" pos:end="9:48">(<argument pos:start="9:37" pos:end="9:47"><expr pos:start="9:37" pos:end="9:47"><name pos:start="9:37" pos:end="9:47"><name pos:start="9:37" pos:end="9:38">bm</name><operator pos:start="9:39" pos:end="9:40">-&gt;</operator><name pos:start="9:41" pos:end="9:47">pci_dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <struct pos:start="11:5" pos:end="17:10">struct <block pos:start="11:12" pos:end="17:5">{

        <decl_stmt pos:start="13:9" pos:end="13:22"><decl pos:start="13:9" pos:end="13:21"><type pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:16">uint32_t</name></type> <name pos:start="13:18" pos:end="13:21">addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:22"><decl pos:start="15:9" pos:end="15:21"><type pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:16">uint32_t</name></type> <name pos:start="15:18" pos:end="15:21">size</name></decl>;</decl_stmt>

    }</block> <decl pos:start="17:7" pos:end="17:9"><name pos:start="17:7" pos:end="17:9">prd</name></decl>;</struct>

    <decl_stmt pos:start="19:5" pos:end="19:15"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">l</name></decl>, <decl pos:start="19:12" pos:end="19:14"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:12" pos:end="19:14">len</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="25:66"><expr pos:start="23:5" pos:end="25:65"><call pos:start="23:5" pos:end="25:65"><name pos:start="23:5" pos:end="23:23">pci_dma_sglist_init</name><argument_list pos:start="23:24" pos:end="25:65">(<argument pos:start="23:25" pos:end="23:30"><expr pos:start="23:25" pos:end="23:30"><operator pos:start="23:25" pos:end="23:25">&amp;</operator><name pos:start="23:26" pos:end="23:30"><name pos:start="23:26" pos:end="23:26">s</name><operator pos:start="23:27" pos:end="23:28">-&gt;</operator><name pos:start="23:29" pos:end="23:30">sg</name></name></expr></argument>, <argument pos:start="23:33" pos:end="23:39"><expr pos:start="23:33" pos:end="23:39"><name pos:start="23:33" pos:end="23:39">pci_dev</name></expr></argument>,

                        <argument pos:start="25:25" pos:end="25:64"><expr pos:start="25:25" pos:end="25:64"><name pos:start="25:25" pos:end="25:34"><name pos:start="25:25" pos:end="25:25">s</name><operator pos:start="25:26" pos:end="25:27">-&gt;</operator><name pos:start="25:28" pos:end="25:34">nsector</name></name> <operator pos:start="25:36" pos:end="25:36">/</operator> <operator pos:start="25:38" pos:end="25:38">(</operator><name pos:start="25:39" pos:end="25:53">BMDMA_PAGE_SIZE</name> <operator pos:start="25:55" pos:end="25:55">/</operator> <literal type="number" pos:start="25:57" pos:end="25:59">512</literal><operator pos:start="25:60" pos:end="25:60">)</operator> <operator pos:start="25:62" pos:end="25:62">+</operator> <literal type="number" pos:start="25:64" pos:end="25:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:26"><expr pos:start="27:5" pos:end="27:25"><name pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:21">io_buffer_size</name></name> <operator pos:start="27:23" pos:end="27:23">=</operator> <literal type="number" pos:start="27:25" pos:end="27:25">0</literal></expr>;</expr_stmt>

    <for pos:start="29:5" pos:end="109:5">for<control pos:start="29:8" pos:end="29:11">(<init pos:start="29:9" pos:end="29:9">;</init><condition pos:start="29:10" pos:end="29:10">;</condition><incr/>)</control> <block pos:start="29:13" pos:end="109:5">{<block_content pos:start="31:9" pos:end="107:9">

        <if_stmt pos:start="31:9" pos:end="63:9"><if pos:start="31:9" pos:end="63:9">if <condition pos:start="31:12" pos:end="31:33">(<expr pos:start="31:13" pos:end="31:32"><name pos:start="31:13" pos:end="31:27"><name pos:start="31:13" pos:end="31:14">bm</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:27">cur_prd_len</name></name> <operator pos:start="31:29" pos:end="31:30">==</operator> <literal type="number" pos:start="31:32" pos:end="31:32">0</literal></expr>)</condition> <block pos:start="31:35" pos:end="63:9">{<block_content pos:start="35:13" pos:end="61:55">

            <comment type="block" pos:start="33:13" pos:end="33:61">/* end of table (with a fail safe of one page) */</comment>

            <if_stmt pos:start="35:13" pos:end="41:13"><if pos:start="35:13" pos:end="41:13">if <condition pos:start="35:16" pos:end="37:61">(<expr pos:start="35:17" pos:end="37:60"><name pos:start="35:17" pos:end="35:32"><name pos:start="35:17" pos:end="35:18">bm</name><operator pos:start="35:19" pos:end="35:20">-&gt;</operator><name pos:start="35:21" pos:end="35:32">cur_prd_last</name></name> <operator pos:start="35:34" pos:end="35:35">||</operator>

                <operator pos:start="37:17" pos:end="37:17">(</operator><name pos:start="37:18" pos:end="37:29"><name pos:start="37:18" pos:end="37:19">bm</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:29">cur_addr</name></name> <operator pos:start="37:31" pos:end="37:31">-</operator> <name pos:start="37:33" pos:end="37:40"><name pos:start="37:33" pos:end="37:34">bm</name><operator pos:start="37:35" pos:end="37:36">-&gt;</operator><name pos:start="37:37" pos:end="37:40">addr</name></name><operator pos:start="37:41" pos:end="37:41">)</operator> <operator pos:start="37:43" pos:end="37:44">&gt;=</operator> <name pos:start="37:46" pos:end="37:60">BMDMA_PAGE_SIZE</name></expr>)</condition> <block pos:start="37:63" pos:end="41:13">{<block_content pos:start="39:17" pos:end="39:34">

                <return pos:start="39:17" pos:end="39:34">return <expr pos:start="39:24" pos:end="39:33"><name pos:start="39:24" pos:end="39:33"><name pos:start="39:24" pos:end="39:24">s</name><operator pos:start="39:25" pos:end="39:26">-&gt;</operator><name pos:start="39:27" pos:end="39:28">sg</name><operator pos:start="39:29" pos:end="39:29">.</operator><name pos:start="39:30" pos:end="39:33">size</name></name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:57"><expr pos:start="43:13" pos:end="43:56"><call pos:start="43:13" pos:end="43:56"><name pos:start="43:13" pos:end="43:24">pci_dma_read</name><argument_list pos:start="43:25" pos:end="43:56">(<argument pos:start="43:26" pos:end="43:32"><expr pos:start="43:26" pos:end="43:32"><name pos:start="43:26" pos:end="43:32">pci_dev</name></expr></argument>, <argument pos:start="43:35" pos:end="43:46"><expr pos:start="43:35" pos:end="43:46"><name pos:start="43:35" pos:end="43:46"><name pos:start="43:35" pos:end="43:36">bm</name><operator pos:start="43:37" pos:end="43:38">-&gt;</operator><name pos:start="43:39" pos:end="43:46">cur_addr</name></name></expr></argument>, <argument pos:start="43:49" pos:end="43:52"><expr pos:start="43:49" pos:end="43:52"><operator pos:start="43:49" pos:end="43:49">&amp;</operator><name pos:start="43:50" pos:end="43:52">prd</name></expr></argument>, <argument pos:start="43:55" pos:end="43:55"><expr pos:start="43:55" pos:end="43:55"><literal type="number" pos:start="43:55" pos:end="43:55">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:30"><expr pos:start="45:13" pos:end="45:29"><name pos:start="45:13" pos:end="45:24"><name pos:start="45:13" pos:end="45:14">bm</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:24">cur_addr</name></name> <operator pos:start="45:26" pos:end="45:27">+=</operator> <literal type="number" pos:start="45:29" pos:end="45:29">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:45"><expr pos:start="47:13" pos:end="47:44"><name pos:start="47:13" pos:end="47:20"><name pos:start="47:13" pos:end="47:15">prd</name><operator pos:start="47:16" pos:end="47:16">.</operator><name pos:start="47:17" pos:end="47:20">addr</name></name> <operator pos:start="47:22" pos:end="47:22">=</operator> <call pos:start="47:24" pos:end="47:44"><name pos:start="47:24" pos:end="47:34">le32_to_cpu</name><argument_list pos:start="47:35" pos:end="47:44">(<argument pos:start="47:36" pos:end="47:43"><expr pos:start="47:36" pos:end="47:43"><name pos:start="47:36" pos:end="47:43"><name pos:start="47:36" pos:end="47:38">prd</name><operator pos:start="47:39" pos:end="47:39">.</operator><name pos:start="47:40" pos:end="47:43">addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:45"><expr pos:start="49:13" pos:end="49:44"><name pos:start="49:13" pos:end="49:20"><name pos:start="49:13" pos:end="49:15">prd</name><operator pos:start="49:16" pos:end="49:16">.</operator><name pos:start="49:17" pos:end="49:20">size</name></name> <operator pos:start="49:22" pos:end="49:22">=</operator> <call pos:start="49:24" pos:end="49:44"><name pos:start="49:24" pos:end="49:34">le32_to_cpu</name><argument_list pos:start="49:35" pos:end="49:44">(<argument pos:start="49:36" pos:end="49:43"><expr pos:start="49:36" pos:end="49:43"><name pos:start="49:36" pos:end="49:43"><name pos:start="49:36" pos:end="49:38">prd</name><operator pos:start="49:39" pos:end="49:39">.</operator><name pos:start="49:40" pos:end="49:43">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:36"><expr pos:start="51:13" pos:end="51:35"><name pos:start="51:13" pos:end="51:15">len</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <name pos:start="51:19" pos:end="51:26"><name pos:start="51:19" pos:end="51:21">prd</name><operator pos:start="51:22" pos:end="51:22">.</operator><name pos:start="51:23" pos:end="51:26">size</name></name> <operator pos:start="51:28" pos:end="51:28">&amp;</operator> <literal type="number" pos:start="51:30" pos:end="51:35">0xfffe</literal></expr>;</expr_stmt>

            <if_stmt pos:start="53:13" pos:end="55:30"><if pos:start="53:13" pos:end="55:30">if <condition pos:start="53:16" pos:end="53:25">(<expr pos:start="53:17" pos:end="53:24"><name pos:start="53:17" pos:end="53:19">len</name> <operator pos:start="53:21" pos:end="53:22">==</operator> <literal type="number" pos:start="53:24" pos:end="53:24">0</literal></expr>)</condition><block type="pseudo" pos:start="55:17" pos:end="55:30"><block_content pos:start="55:17" pos:end="55:30">

                <expr_stmt pos:start="55:17" pos:end="55:30"><expr pos:start="55:17" pos:end="55:29"><name pos:start="55:17" pos:end="55:19">len</name> <operator pos:start="55:21" pos:end="55:21">=</operator> <literal type="number" pos:start="55:23" pos:end="55:29">0x10000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:34"><expr pos:start="57:13" pos:end="57:33"><name pos:start="57:13" pos:end="57:27"><name pos:start="57:13" pos:end="57:14">bm</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:27">cur_prd_len</name></name> <operator pos:start="57:29" pos:end="57:29">=</operator> <name pos:start="57:31" pos:end="57:33">len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:40"><expr pos:start="59:13" pos:end="59:39"><name pos:start="59:13" pos:end="59:28"><name pos:start="59:13" pos:end="59:14">bm</name><operator pos:start="59:15" pos:end="59:16">-&gt;</operator><name pos:start="59:17" pos:end="59:28">cur_prd_addr</name></name> <operator pos:start="59:30" pos:end="59:30">=</operator> <name pos:start="59:32" pos:end="59:39"><name pos:start="59:32" pos:end="59:34">prd</name><operator pos:start="59:35" pos:end="59:35">.</operator><name pos:start="59:36" pos:end="59:39">addr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:55"><expr pos:start="61:13" pos:end="61:54"><name pos:start="61:13" pos:end="61:28"><name pos:start="61:13" pos:end="61:14">bm</name><operator pos:start="61:15" pos:end="61:16">-&gt;</operator><name pos:start="61:17" pos:end="61:28">cur_prd_last</name></name> <operator pos:start="61:30" pos:end="61:30">=</operator> <operator pos:start="61:32" pos:end="61:32">(</operator><name pos:start="61:33" pos:end="61:40"><name pos:start="61:33" pos:end="61:35">prd</name><operator pos:start="61:36" pos:end="61:36">.</operator><name pos:start="61:37" pos:end="61:40">size</name></name> <operator pos:start="61:42" pos:end="61:42">&amp;</operator> <literal type="number" pos:start="61:44" pos:end="61:53">0x80000000</literal><operator pos:start="61:54" pos:end="61:54">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:28"><expr pos:start="65:9" pos:end="65:27"><name pos:start="65:9" pos:end="65:9">l</name> <operator pos:start="65:11" pos:end="65:11">=</operator> <name pos:start="65:13" pos:end="65:27"><name pos:start="65:13" pos:end="65:14">bm</name><operator pos:start="65:15" pos:end="65:16">-&gt;</operator><name pos:start="65:17" pos:end="65:27">cur_prd_len</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="107:9"><if pos:start="67:9" pos:end="107:9">if <condition pos:start="67:12" pos:end="67:18">(<expr pos:start="67:13" pos:end="67:17"><name pos:start="67:13" pos:end="67:13">l</name> <operator pos:start="67:15" pos:end="67:15">&gt;</operator> <literal type="number" pos:start="67:17" pos:end="67:17">0</literal></expr>)</condition> <block pos:start="67:20" pos:end="107:9">{<block_content pos:start="69:13" pos:end="105:35">

            <decl_stmt pos:start="69:13" pos:end="69:28"><decl pos:start="69:13" pos:end="69:27"><type pos:start="69:13" pos:end="69:20"><name pos:start="69:13" pos:end="69:20">uint64_t</name></type> <name pos:start="69:22" pos:end="69:27">sg_len</name></decl>;</decl_stmt>



            <comment type="block" pos:start="73:13" pos:end="75:55">/* Don't add extra bytes to the SGList; consume any remaining

             * PRDs from the guest, but ignore them. */</comment>

            <expr_stmt pos:start="77:13" pos:end="77:62"><expr pos:start="77:13" pos:end="77:61"><name pos:start="77:13" pos:end="77:18">sg_len</name> <operator pos:start="77:20" pos:end="77:20">=</operator> <call pos:start="77:22" pos:end="77:61"><name pos:start="77:22" pos:end="77:24">MIN</name><argument_list pos:start="77:25" pos:end="77:61">(<argument pos:start="77:26" pos:end="77:43"><expr pos:start="77:26" pos:end="77:43"><name pos:start="77:26" pos:end="77:30">limit</name> <operator pos:start="77:32" pos:end="77:32">-</operator> <name pos:start="77:34" pos:end="77:43"><name pos:start="77:34" pos:end="77:34">s</name><operator pos:start="77:35" pos:end="77:36">-&gt;</operator><name pos:start="77:37" pos:end="77:38">sg</name><operator pos:start="77:39" pos:end="77:39">.</operator><name pos:start="77:40" pos:end="77:43">size</name></name></expr></argument>, <argument pos:start="77:46" pos:end="77:60"><expr pos:start="77:46" pos:end="77:60"><name pos:start="77:46" pos:end="77:60"><name pos:start="77:46" pos:end="77:47">bm</name><operator pos:start="77:48" pos:end="77:49">-&gt;</operator><name pos:start="77:50" pos:end="77:60">cur_prd_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="79:13" pos:end="83:13"><if pos:start="79:13" pos:end="83:13">if <condition pos:start="79:16" pos:end="79:23">(<expr pos:start="79:17" pos:end="79:22"><name pos:start="79:17" pos:end="79:22">sg_len</name></expr>)</condition> <block pos:start="79:25" pos:end="83:13">{<block_content pos:start="81:17" pos:end="81:66">

                <expr_stmt pos:start="81:17" pos:end="81:66"><expr pos:start="81:17" pos:end="81:65"><call pos:start="81:17" pos:end="81:65"><name pos:start="81:17" pos:end="81:31">qemu_sglist_add</name><argument_list pos:start="81:32" pos:end="81:65">(<argument pos:start="81:33" pos:end="81:38"><expr pos:start="81:33" pos:end="81:38"><operator pos:start="81:33" pos:end="81:33">&amp;</operator><name pos:start="81:34" pos:end="81:38"><name pos:start="81:34" pos:end="81:34">s</name><operator pos:start="81:35" pos:end="81:36">-&gt;</operator><name pos:start="81:37" pos:end="81:38">sg</name></name></expr></argument>, <argument pos:start="81:41" pos:end="81:56"><expr pos:start="81:41" pos:end="81:56"><name pos:start="81:41" pos:end="81:56"><name pos:start="81:41" pos:end="81:42">bm</name><operator pos:start="81:43" pos:end="81:44">-&gt;</operator><name pos:start="81:45" pos:end="81:56">cur_prd_addr</name></name></expr></argument>, <argument pos:start="81:59" pos:end="81:64"><expr pos:start="81:59" pos:end="81:64"><name pos:start="81:59" pos:end="81:64">sg_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="87:13" pos:end="91:66">/* Note: We limit the max transfer to be 2GiB.

             * This should accommodate the largest ATA transaction

             * for LBA48 (65,536 sectors) and 32K sector sizes. */</comment>

            <if_stmt pos:start="93:13" pos:end="99:13"><if pos:start="93:13" pos:end="99:13">if <condition pos:start="93:16" pos:end="93:39">(<expr pos:start="93:17" pos:end="93:38"><name pos:start="93:17" pos:end="93:26"><name pos:start="93:17" pos:end="93:17">s</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:21">sg</name><operator pos:start="93:22" pos:end="93:22">.</operator><name pos:start="93:23" pos:end="93:26">size</name></name> <operator pos:start="93:28" pos:end="93:28">&gt;</operator> <name pos:start="93:30" pos:end="93:38">INT32_MAX</name></expr>)</condition> <block pos:start="93:41" pos:end="99:13">{<block_content pos:start="95:17" pos:end="97:22">

                <expr_stmt pos:start="95:17" pos:end="95:70"><expr pos:start="95:17" pos:end="95:69"><call pos:start="95:17" pos:end="95:69"><name pos:start="95:17" pos:end="95:28">error_report</name><argument_list pos:start="95:29" pos:end="95:69">(<argument pos:start="95:30" pos:end="95:68"><expr pos:start="95:30" pos:end="95:68"><literal type="string" pos:start="95:30" pos:end="95:68">"IDE: sglist describes more than 2GiB."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="97:17" pos:end="97:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:34"><expr pos:start="101:13" pos:end="101:33"><name pos:start="101:13" pos:end="101:28"><name pos:start="101:13" pos:end="101:14">bm</name><operator pos:start="101:15" pos:end="101:16">-&gt;</operator><name pos:start="101:17" pos:end="101:28">cur_prd_addr</name></name> <operator pos:start="101:30" pos:end="101:31">+=</operator> <name pos:start="101:33" pos:end="101:33">l</name></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:33"><expr pos:start="103:13" pos:end="103:32"><name pos:start="103:13" pos:end="103:27"><name pos:start="103:13" pos:end="103:14">bm</name><operator pos:start="103:15" pos:end="103:16">-&gt;</operator><name pos:start="103:17" pos:end="103:27">cur_prd_len</name></name> <operator pos:start="103:29" pos:end="103:30">-=</operator> <name pos:start="103:32" pos:end="103:32">l</name></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:35"><expr pos:start="105:13" pos:end="105:34"><name pos:start="105:13" pos:end="105:29"><name pos:start="105:13" pos:end="105:13">s</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:29">io_buffer_size</name></name> <operator pos:start="105:31" pos:end="105:32">+=</operator> <name pos:start="105:34" pos:end="105:34">l</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="113:5" pos:end="113:32"><expr pos:start="113:5" pos:end="113:31"><call pos:start="113:5" pos:end="113:31"><name pos:start="113:5" pos:end="113:23">qemu_sglist_destroy</name><argument_list pos:start="113:24" pos:end="113:31">(<argument pos:start="113:25" pos:end="113:30"><expr pos:start="113:25" pos:end="113:30"><operator pos:start="113:25" pos:end="113:25">&amp;</operator><name pos:start="113:26" pos:end="113:30"><name pos:start="113:26" pos:end="113:26">s</name><operator pos:start="113:27" pos:end="113:28">-&gt;</operator><name pos:start="113:29" pos:end="113:30">sg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:26"><expr pos:start="115:5" pos:end="115:25"><name pos:start="115:5" pos:end="115:21"><name pos:start="115:5" pos:end="115:5">s</name><operator pos:start="115:6" pos:end="115:7">-&gt;</operator><name pos:start="115:8" pos:end="115:21">io_buffer_size</name></name> <operator pos:start="115:23" pos:end="115:23">=</operator> <literal type="number" pos:start="115:25" pos:end="115:25">0</literal></expr>;</expr_stmt>

    <return pos:start="117:5" pos:end="117:14">return <expr pos:start="117:12" pos:end="117:13"><operator pos:start="117:12" pos:end="117:12">-</operator><literal type="number" pos:start="117:13" pos:end="117:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
