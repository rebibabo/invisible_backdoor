<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6031.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:52"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">lm32_evr_init</name><parameter_list pos:start="1:26" pos:end="1:52">(<parameter pos:start="1:27" pos:end="1:51"><decl pos:start="1:27" pos:end="1:51"><type pos:start="1:27" pos:end="1:47"><name pos:start="1:27" pos:end="1:45">QEMUMachineInitArgs</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:51">args</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="65:52">{<block_content pos:start="3:5" pos:end="65:52">
    <decl_stmt pos:start="3:5" pos:end="3:44"><decl pos:start="3:5" pos:end="3:43"><type pos:start="3:5" pos:end="3:16"><specifier pos:start="3:5" pos:end="3:9">const</specifier> <name pos:start="3:11" pos:end="3:14">char</name> <modifier pos:start="3:16" pos:end="3:16">*</modifier></type><name pos:start="3:17" pos:end="3:25">cpu_model</name> <init pos:start="3:27" pos:end="3:43">= <expr pos:start="3:29" pos:end="3:43"><name pos:start="3:29" pos:end="3:43"><name pos:start="3:29" pos:end="3:32">args</name><operator pos:start="3:33" pos:end="3:34">-&gt;</operator><name pos:start="3:35" pos:end="3:43">cpu_model</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:56"><decl pos:start="4:5" pos:end="4:55"><type pos:start="4:5" pos:end="4:16"><specifier pos:start="4:5" pos:end="4:9">const</specifier> <name pos:start="4:11" pos:end="4:14">char</name> <modifier pos:start="4:16" pos:end="4:16">*</modifier></type><name pos:start="4:17" pos:end="4:31">kernel_filename</name> <init pos:start="4:33" pos:end="4:55">= <expr pos:start="4:35" pos:end="4:55"><name pos:start="4:35" pos:end="4:55"><name pos:start="4:35" pos:end="4:38">args</name><operator pos:start="4:39" pos:end="4:40">-&gt;</operator><name pos:start="4:41" pos:end="4:55">kernel_filename</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">LM32CPU</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">cpu</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:22"><decl pos:start="6:5" pos:end="6:21"><type pos:start="6:5" pos:end="6:18"><name pos:start="6:5" pos:end="6:16">CPULM32State</name> <modifier pos:start="6:18" pos:end="6:18">*</modifier></type><name pos:start="6:19" pos:end="6:21">env</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">DriveInfo</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:20">dinfo</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:59"><decl pos:start="8:5" pos:end="8:58"><type pos:start="8:5" pos:end="8:18"><name pos:start="8:5" pos:end="8:16">MemoryRegion</name> <modifier pos:start="8:18" pos:end="8:18">*</modifier></type><name pos:start="8:19" pos:end="8:35">address_space_mem</name> <init pos:start="8:37" pos:end="8:58">=  <expr pos:start="8:40" pos:end="8:58"><call pos:start="8:40" pos:end="8:58"><name pos:start="8:40" pos:end="8:56">get_system_memory</name><argument_list pos:start="8:57" pos:end="8:58">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:52"><decl pos:start="9:5" pos:end="9:51"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">MemoryRegion</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:26">phys_ram</name> <init pos:start="9:28" pos:end="9:51">= <expr pos:start="9:30" pos:end="9:51"><call pos:start="9:30" pos:end="9:51"><name pos:start="9:30" pos:end="9:34">g_new</name><argument_list pos:start="9:35" pos:end="9:51">(<argument pos:start="9:36" pos:end="9:47"><expr pos:start="9:36" pos:end="9:47"><name pos:start="9:36" pos:end="9:47">MemoryRegion</name></expr></argument>, <argument pos:start="9:50" pos:end="9:50"><expr pos:start="9:50" pos:end="9:50"><literal type="number" pos:start="9:50" pos:end="9:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:31"><decl pos:start="10:5" pos:end="10:21"><type pos:start="10:5" pos:end="10:14"><name pos:start="10:5" pos:end="10:12">qemu_irq</name> <modifier pos:start="10:14" pos:end="10:14">*</modifier></type><name pos:start="10:15" pos:end="10:21">cpu_irq</name></decl>, <decl pos:start="10:24" pos:end="10:30"><type ref="prev" pos:start="10:5" pos:end="10:14"/><name pos:start="10:24" pos:end="10:30"><name pos:start="10:24" pos:end="10:26">irq</name><index pos:start="10:27" pos:end="10:30">[<expr pos:start="10:28" pos:end="10:29"><literal type="number" pos:start="10:28" pos:end="10:29">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">ResetInfo</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:25">reset_info</name></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:10"><decl pos:start="12:5" pos:end="12:9"><type pos:start="12:5" pos:end="12:7"><name pos:start="12:5" pos:end="12:7">int</name></type> <name pos:start="12:9" pos:end="12:9">i</name></decl>;</decl_stmt>
    <comment type="block" pos:start="13:5" pos:end="13:20">/* memory map */</comment>
    <decl_stmt pos:start="14:5" pos:end="14:36"><decl pos:start="14:5" pos:end="14:35"><type pos:start="14:5" pos:end="14:10"><name pos:start="14:5" pos:end="14:10">hwaddr</name></type> <name pos:start="14:12" pos:end="14:21">flash_base</name>  <init pos:start="14:24" pos:end="14:35">= <expr pos:start="14:26" pos:end="14:35"><literal type="number" pos:start="14:26" pos:end="14:35">0x04000000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="15:5" pos:end="15:48"><decl pos:start="15:5" pos:end="15:47"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:10">size_t</name></type> <name pos:start="15:12" pos:end="15:28">flash_sector_size</name>       <init pos:start="15:36" pos:end="15:47">= <expr pos:start="15:38" pos:end="15:47"><literal type="number" pos:start="15:38" pos:end="15:40">256</literal> <operator pos:start="15:42" pos:end="15:42">*</operator> <literal type="number" pos:start="15:44" pos:end="15:47">1024</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="16:5" pos:end="16:54"><decl pos:start="16:5" pos:end="16:53"><type pos:start="16:5" pos:end="16:10"><name pos:start="16:5" pos:end="16:10">size_t</name></type> <name pos:start="16:12" pos:end="16:21">flash_size</name>              <init pos:start="16:36" pos:end="16:53">= <expr pos:start="16:38" pos:end="16:53"><literal type="number" pos:start="16:38" pos:end="16:39">32</literal> <operator pos:start="16:41" pos:end="16:41">*</operator> <literal type="number" pos:start="16:43" pos:end="16:46">1024</literal> <operator pos:start="16:48" pos:end="16:48">*</operator> <literal type="number" pos:start="16:50" pos:end="16:53">1024</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="17:5" pos:end="17:36"><decl pos:start="17:5" pos:end="17:35"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">hwaddr</name></type> <name pos:start="17:12" pos:end="17:19">ram_base</name>    <init pos:start="17:24" pos:end="17:35">= <expr pos:start="17:26" pos:end="17:35"><literal type="number" pos:start="17:26" pos:end="17:35">0x08000000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="18:5" pos:end="18:54"><decl pos:start="18:5" pos:end="18:53"><type pos:start="18:5" pos:end="18:10"><name pos:start="18:5" pos:end="18:10">size_t</name></type> <name pos:start="18:12" pos:end="18:19">ram_size</name>                <init pos:start="18:36" pos:end="18:53">= <expr pos:start="18:38" pos:end="18:53"><literal type="number" pos:start="18:38" pos:end="18:39">64</literal> <operator pos:start="18:41" pos:end="18:41">*</operator> <literal type="number" pos:start="18:43" pos:end="18:46">1024</literal> <operator pos:start="18:48" pos:end="18:48">*</operator> <literal type="number" pos:start="18:50" pos:end="18:53">1024</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="19:5" pos:end="19:36"><decl pos:start="19:5" pos:end="19:35"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:10">hwaddr</name></type> <name pos:start="19:12" pos:end="19:22">timer0_base</name> <init pos:start="19:24" pos:end="19:35">= <expr pos:start="19:26" pos:end="19:35"><literal type="number" pos:start="19:26" pos:end="19:35">0x80002000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="20:5" pos:end="20:36"><decl pos:start="20:5" pos:end="20:35"><type pos:start="20:5" pos:end="20:10"><name pos:start="20:5" pos:end="20:10">hwaddr</name></type> <name pos:start="20:12" pos:end="20:21">uart0_base</name>  <init pos:start="20:24" pos:end="20:35">= <expr pos:start="20:26" pos:end="20:35"><literal type="number" pos:start="20:26" pos:end="20:35">0x80006000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="21:5" pos:end="21:36"><decl pos:start="21:5" pos:end="21:35"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:10">hwaddr</name></type> <name pos:start="21:12" pos:end="21:22">timer1_base</name> <init pos:start="21:24" pos:end="21:35">= <expr pos:start="21:26" pos:end="21:35"><literal type="number" pos:start="21:26" pos:end="21:35">0x8000a000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="22:5" pos:end="22:39"><decl pos:start="22:5" pos:end="22:38"><type pos:start="22:5" pos:end="22:7"><name pos:start="22:5" pos:end="22:7">int</name></type> <name pos:start="22:9" pos:end="22:17">uart0_irq</name>                  <init pos:start="22:36" pos:end="22:38">= <expr pos:start="22:38" pos:end="22:38"><literal type="number" pos:start="22:38" pos:end="22:38">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="23:5" pos:end="23:39"><decl pos:start="23:5" pos:end="23:38"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:18">timer0_irq</name>                 <init pos:start="23:36" pos:end="23:38">= <expr pos:start="23:38" pos:end="23:38"><literal type="number" pos:start="23:38" pos:end="23:38">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="24:5" pos:end="24:39"><decl pos:start="24:5" pos:end="24:38"><type pos:start="24:5" pos:end="24:7"><name pos:start="24:5" pos:end="24:7">int</name></type> <name pos:start="24:9" pos:end="24:18">timer1_irq</name>                 <init pos:start="24:36" pos:end="24:38">= <expr pos:start="24:38" pos:end="24:38"><literal type="number" pos:start="24:38" pos:end="24:38">3</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="25:5" pos:end="25:46"><expr pos:start="25:5" pos:end="25:45"><name pos:start="25:5" pos:end="25:14">reset_info</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <call pos:start="25:18" pos:end="25:45"><name pos:start="25:18" pos:end="25:26">g_malloc0</name><argument_list pos:start="25:27" pos:end="25:45">(<argument pos:start="25:28" pos:end="25:44"><expr pos:start="25:28" pos:end="25:44"><sizeof pos:start="25:28" pos:end="25:44">sizeof<argument_list pos:start="25:34" pos:end="25:44">(<argument pos:start="25:35" pos:end="25:43"><expr pos:start="25:35" pos:end="25:43"><name pos:start="25:35" pos:end="25:43">ResetInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="26:5" pos:end="65:52"><if pos:start="26:5" pos:end="65:52">if <condition pos:start="26:8" pos:end="26:26">(<expr pos:start="26:9" pos:end="26:25"><name pos:start="26:9" pos:end="26:17">cpu_model</name> <operator pos:start="26:19" pos:end="26:20">==</operator> <name pos:start="26:22" pos:end="26:25">NULL</name></expr>)</condition> <block pos:start="26:28" pos:end="65:52">{<block_content pos:start="27:9" pos:end="65:52">
        <expr_stmt pos:start="27:9" pos:end="27:32"><expr pos:start="27:9" pos:end="27:31"><name pos:start="27:9" pos:end="27:17">cpu_model</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <literal type="string" pos:start="27:21" pos:end="27:31">"lm32-full"</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="28:5" pos:end="28:35"><expr pos:start="28:5" pos:end="28:34"><name pos:start="28:5" pos:end="28:7">cpu</name> <operator pos:start="28:9" pos:end="28:9">=</operator> <call pos:start="28:11" pos:end="28:34"><name pos:start="28:11" pos:end="28:23">cpu_lm32_init</name><argument_list pos:start="28:24" pos:end="28:34">(<argument pos:start="28:25" pos:end="28:33"><expr pos:start="28:25" pos:end="28:33"><name pos:start="28:25" pos:end="28:33">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="29:5" pos:end="29:20"><expr pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:7">env</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <operator pos:start="29:11" pos:end="29:11">&amp;</operator><name pos:start="29:12" pos:end="29:19"><name pos:start="29:12" pos:end="29:14">cpu</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:19">env</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="30:5" pos:end="30:26"><expr pos:start="30:5" pos:end="30:25"><name pos:start="30:5" pos:end="30:19"><name pos:start="30:5" pos:end="30:14">reset_info</name><operator pos:start="30:15" pos:end="30:16">-&gt;</operator><name pos:start="30:17" pos:end="30:19">cpu</name></name> <operator pos:start="30:21" pos:end="30:21">=</operator> <name pos:start="30:23" pos:end="30:25">cpu</name></expr>;</expr_stmt>
    <expr_stmt pos:start="31:5" pos:end="31:40"><expr pos:start="31:5" pos:end="31:39"><name pos:start="31:5" pos:end="31:26"><name pos:start="31:5" pos:end="31:14">reset_info</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:26">flash_base</name></name> <operator pos:start="31:28" pos:end="31:28">=</operator> <name pos:start="31:30" pos:end="31:39">flash_base</name></expr>;</expr_stmt>
    <expr_stmt pos:start="32:5" pos:end="32:71"><expr pos:start="32:5" pos:end="32:70"><call pos:start="32:5" pos:end="32:70"><name pos:start="32:5" pos:end="32:26">memory_region_init_ram</name><argument_list pos:start="32:27" pos:end="32:70">(<argument pos:start="32:28" pos:end="32:35"><expr pos:start="32:28" pos:end="32:35"><name pos:start="32:28" pos:end="32:35">phys_ram</name></expr></argument>, <argument pos:start="32:38" pos:end="32:41"><expr pos:start="32:38" pos:end="32:41"><name pos:start="32:38" pos:end="32:41">NULL</name></expr></argument>, <argument pos:start="32:44" pos:end="32:59"><expr pos:start="32:44" pos:end="32:59"><literal type="string" pos:start="32:44" pos:end="32:59">"lm32_evr.sdram"</literal></expr></argument>, <argument pos:start="32:62" pos:end="32:69"><expr pos:start="32:62" pos:end="32:69"><name pos:start="32:62" pos:end="32:69">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="33:5" pos:end="33:42"><expr pos:start="33:5" pos:end="33:41"><call pos:start="33:5" pos:end="33:41"><name pos:start="33:5" pos:end="33:31">vmstate_register_ram_global</name><argument_list pos:start="33:32" pos:end="33:41">(<argument pos:start="33:33" pos:end="33:40"><expr pos:start="33:33" pos:end="33:40"><name pos:start="33:33" pos:end="33:40">phys_ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="34:5" pos:end="34:71"><expr pos:start="34:5" pos:end="34:70"><call pos:start="34:5" pos:end="34:70"><name pos:start="34:5" pos:end="34:31">memory_region_add_subregion</name><argument_list pos:start="34:32" pos:end="34:70">(<argument pos:start="34:33" pos:end="34:49"><expr pos:start="34:33" pos:end="34:49"><name pos:start="34:33" pos:end="34:49">address_space_mem</name></expr></argument>, <argument pos:start="34:52" pos:end="34:59"><expr pos:start="34:52" pos:end="34:59"><name pos:start="34:52" pos:end="34:59">ram_base</name></expr></argument>, <argument pos:start="34:62" pos:end="34:69"><expr pos:start="34:62" pos:end="34:69"><name pos:start="34:62" pos:end="34:69">phys_ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="35:5" pos:end="35:39"><expr pos:start="35:5" pos:end="35:38"><name pos:start="35:5" pos:end="35:9">dinfo</name> <operator pos:start="35:11" pos:end="35:11">=</operator> <call pos:start="35:13" pos:end="35:38"><name pos:start="35:13" pos:end="35:21">drive_get</name><argument_list pos:start="35:22" pos:end="35:38">(<argument pos:start="35:23" pos:end="35:31"><expr pos:start="35:23" pos:end="35:31"><name pos:start="35:23" pos:end="35:31">IF_PFLASH</name></expr></argument>, <argument pos:start="35:34" pos:end="35:34"><expr pos:start="35:34" pos:end="35:34"><literal type="number" pos:start="35:34" pos:end="35:34">0</literal></expr></argument>, <argument pos:start="35:37" pos:end="35:37"><expr pos:start="35:37" pos:end="35:37"><literal type="number" pos:start="35:37" pos:end="35:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="36:5" pos:end="36:28">/* Spansion S29NS128P */</comment>
    <expr_stmt pos:start="37:5" pos:end="40:67"><expr pos:start="37:5" pos:end="40:66"><call pos:start="37:5" pos:end="40:66"><name pos:start="37:5" pos:end="37:25">pflash_cfi02_register</name><argument_list pos:start="37:26" pos:end="40:66">(<argument pos:start="37:27" pos:end="37:36"><expr pos:start="37:27" pos:end="37:36"><name pos:start="37:27" pos:end="37:36">flash_base</name></expr></argument>, <argument pos:start="37:39" pos:end="37:42"><expr pos:start="37:39" pos:end="37:42"><name pos:start="37:39" pos:end="37:42">NULL</name></expr></argument>, <argument pos:start="37:45" pos:end="37:60"><expr pos:start="37:45" pos:end="37:60"><literal type="string" pos:start="37:45" pos:end="37:60">"lm32_evr.flash"</literal></expr></argument>, <argument pos:start="37:63" pos:end="37:72"><expr pos:start="37:63" pos:end="37:72"><name pos:start="37:63" pos:end="37:72">flash_size</name></expr></argument>,
                          <argument pos:start="38:27" pos:end="38:52"><expr pos:start="38:27" pos:end="38:52"><ternary pos:start="38:27" pos:end="38:52"><condition pos:start="38:27" pos:end="38:33"><expr pos:start="38:27" pos:end="38:31"><name pos:start="38:27" pos:end="38:31">dinfo</name></expr> ?</condition><then pos:start="38:35" pos:end="38:45"> <expr pos:start="38:35" pos:end="38:45"><name pos:start="38:35" pos:end="38:45"><name pos:start="38:35" pos:end="38:39">dinfo</name><operator pos:start="38:40" pos:end="38:41">-&gt;</operator><name pos:start="38:42" pos:end="38:45">bdrv</name></name></expr> </then><else pos:start="38:47" pos:end="38:52">: <expr pos:start="38:49" pos:end="38:52"><name pos:start="38:49" pos:end="38:52">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="38:55" pos:end="38:71"><expr pos:start="38:55" pos:end="38:71"><name pos:start="38:55" pos:end="38:71">flash_sector_size</name></expr></argument>,
                          <argument pos:start="39:27" pos:end="39:56"><expr pos:start="39:27" pos:end="39:56"><name pos:start="39:27" pos:end="39:36">flash_size</name> <operator pos:start="39:38" pos:end="39:38">/</operator> <name pos:start="39:40" pos:end="39:56">flash_sector_size</name></expr></argument>, <argument pos:start="39:59" pos:end="39:59"><expr pos:start="39:59" pos:end="39:59"><literal type="number" pos:start="39:59" pos:end="39:59">1</literal></expr></argument>, <argument pos:start="39:62" pos:end="39:62"><expr pos:start="39:62" pos:end="39:62"><literal type="number" pos:start="39:62" pos:end="39:62">2</literal></expr></argument>,
                          <argument pos:start="40:27" pos:end="40:30"><expr pos:start="40:27" pos:end="40:30"><literal type="number" pos:start="40:27" pos:end="40:30">0x01</literal></expr></argument>, <argument pos:start="40:33" pos:end="40:36"><expr pos:start="40:33" pos:end="40:36"><literal type="number" pos:start="40:33" pos:end="40:36">0x7e</literal></expr></argument>, <argument pos:start="40:39" pos:end="40:42"><expr pos:start="40:39" pos:end="40:42"><literal type="number" pos:start="40:39" pos:end="40:42">0x43</literal></expr></argument>, <argument pos:start="40:45" pos:end="40:48"><expr pos:start="40:45" pos:end="40:48"><literal type="number" pos:start="40:45" pos:end="40:48">0x00</literal></expr></argument>, <argument pos:start="40:51" pos:end="40:55"><expr pos:start="40:51" pos:end="40:55"><literal type="number" pos:start="40:51" pos:end="40:55">0x555</literal></expr></argument>, <argument pos:start="40:58" pos:end="40:62"><expr pos:start="40:58" pos:end="40:62"><literal type="number" pos:start="40:58" pos:end="40:62">0x2aa</literal></expr></argument>, <argument pos:start="40:65" pos:end="40:65"><expr pos:start="40:65" pos:end="40:65"><literal type="number" pos:start="40:65" pos:end="40:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="41:5" pos:end="41:26">/* create irq lines */</comment>
    <expr_stmt pos:start="42:5" pos:end="42:58"><expr pos:start="42:5" pos:end="42:57"><name pos:start="42:5" pos:end="42:11">cpu_irq</name> <operator pos:start="42:13" pos:end="42:13">=</operator> <call pos:start="42:15" pos:end="42:57"><name pos:start="42:15" pos:end="42:32">qemu_allocate_irqs</name><argument_list pos:start="42:33" pos:end="42:57">(<argument pos:start="42:34" pos:end="42:48"><expr pos:start="42:34" pos:end="42:48"><name pos:start="42:34" pos:end="42:48">cpu_irq_handler</name></expr></argument>, <argument pos:start="42:51" pos:end="42:53"><expr pos:start="42:51" pos:end="42:53"><name pos:start="42:51" pos:end="42:53">cpu</name></expr></argument>, <argument pos:start="42:56" pos:end="42:56"><expr pos:start="42:56" pos:end="42:56"><literal type="number" pos:start="42:56" pos:end="42:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="43:5" pos:end="43:45"><expr pos:start="43:5" pos:end="43:44"><name pos:start="43:5" pos:end="43:18"><name pos:start="43:5" pos:end="43:7">env</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:18">pic_state</name></name> <operator pos:start="43:20" pos:end="43:20">=</operator> <call pos:start="43:22" pos:end="43:44"><name pos:start="43:22" pos:end="43:34">lm32_pic_init</name><argument_list pos:start="43:35" pos:end="43:44">(<argument pos:start="43:36" pos:end="43:43"><expr pos:start="43:36" pos:end="43:43"><operator pos:start="43:36" pos:end="43:36">*</operator><name pos:start="43:37" pos:end="43:43">cpu_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="44:5" pos:end="65:52">for <control pos:start="44:9" pos:end="44:28">(<init pos:start="44:10" pos:end="44:15"><expr pos:start="44:10" pos:end="44:14"><name pos:start="44:10" pos:end="44:10">i</name> <operator pos:start="44:12" pos:end="44:12">=</operator> <literal type="number" pos:start="44:14" pos:end="44:14">0</literal></expr>;</init> <condition pos:start="44:17" pos:end="44:23"><expr pos:start="44:17" pos:end="44:22"><name pos:start="44:17" pos:end="44:17">i</name> <operator pos:start="44:19" pos:end="44:19">&lt;</operator> <literal type="number" pos:start="44:21" pos:end="44:22">32</literal></expr>;</condition> <incr pos:start="44:25" pos:end="44:27"><expr pos:start="44:25" pos:end="44:27"><name pos:start="44:25" pos:end="44:25">i</name><operator pos:start="44:26" pos:end="44:27">++</operator></expr></incr>)</control> <block pos:start="44:30" pos:end="65:52">{<block_content pos:start="45:9" pos:end="65:52">
        <expr_stmt pos:start="45:9" pos:end="45:53"><expr pos:start="45:9" pos:end="45:52"><name pos:start="45:9" pos:end="45:14"><name pos:start="45:9" pos:end="45:11">irq</name><index pos:start="45:12" pos:end="45:14">[<expr pos:start="45:13" pos:end="45:13"><name pos:start="45:13" pos:end="45:13">i</name></expr>]</index></name> <operator pos:start="45:16" pos:end="45:16">=</operator> <call pos:start="45:18" pos:end="45:52"><name pos:start="45:18" pos:end="45:33">qdev_get_gpio_in</name><argument_list pos:start="45:34" pos:end="45:52">(<argument pos:start="45:35" pos:end="45:48"><expr pos:start="45:35" pos:end="45:48"><name pos:start="45:35" pos:end="45:48"><name pos:start="45:35" pos:end="45:37">env</name><operator pos:start="45:38" pos:end="45:39">-&gt;</operator><name pos:start="45:40" pos:end="45:48">pic_state</name></name></expr></argument>, <argument pos:start="45:51" pos:end="45:51"><expr pos:start="45:51" pos:end="45:51"><name pos:start="45:51" pos:end="45:51">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="46:5" pos:end="46:66"><expr pos:start="46:5" pos:end="46:65"><call pos:start="46:5" pos:end="46:65"><name pos:start="46:5" pos:end="46:24">sysbus_create_simple</name><argument_list pos:start="46:25" pos:end="46:65">(<argument pos:start="46:26" pos:end="46:36"><expr pos:start="46:26" pos:end="46:36"><literal type="string" pos:start="46:26" pos:end="46:36">"lm32-uart"</literal></expr></argument>, <argument pos:start="46:39" pos:end="46:48"><expr pos:start="46:39" pos:end="46:48"><name pos:start="46:39" pos:end="46:48">uart0_base</name></expr></argument>, <argument pos:start="46:51" pos:end="46:64"><expr pos:start="46:51" pos:end="46:64"><name pos:start="46:51" pos:end="46:64"><name pos:start="46:51" pos:end="46:53">irq</name><index pos:start="46:54" pos:end="46:64">[<expr pos:start="46:55" pos:end="46:63"><name pos:start="46:55" pos:end="46:63">uart0_irq</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="47:5" pos:end="47:69"><expr pos:start="47:5" pos:end="47:68"><call pos:start="47:5" pos:end="47:68"><name pos:start="47:5" pos:end="47:24">sysbus_create_simple</name><argument_list pos:start="47:25" pos:end="47:68">(<argument pos:start="47:26" pos:end="47:37"><expr pos:start="47:26" pos:end="47:37"><literal type="string" pos:start="47:26" pos:end="47:37">"lm32-timer"</literal></expr></argument>, <argument pos:start="47:40" pos:end="47:50"><expr pos:start="47:40" pos:end="47:50"><name pos:start="47:40" pos:end="47:50">timer0_base</name></expr></argument>, <argument pos:start="47:53" pos:end="47:67"><expr pos:start="47:53" pos:end="47:67"><name pos:start="47:53" pos:end="47:67"><name pos:start="47:53" pos:end="47:55">irq</name><index pos:start="47:56" pos:end="47:67">[<expr pos:start="47:57" pos:end="47:66"><name pos:start="47:57" pos:end="47:66">timer0_irq</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="48:5" pos:end="48:69"><expr pos:start="48:5" pos:end="48:68"><call pos:start="48:5" pos:end="48:68"><name pos:start="48:5" pos:end="48:24">sysbus_create_simple</name><argument_list pos:start="48:25" pos:end="48:68">(<argument pos:start="48:26" pos:end="48:37"><expr pos:start="48:26" pos:end="48:37"><literal type="string" pos:start="48:26" pos:end="48:37">"lm32-timer"</literal></expr></argument>, <argument pos:start="48:40" pos:end="48:50"><expr pos:start="48:40" pos:end="48:50"><name pos:start="48:40" pos:end="48:50">timer1_base</name></expr></argument>, <argument pos:start="48:53" pos:end="48:67"><expr pos:start="48:53" pos:end="48:67"><name pos:start="48:53" pos:end="48:67"><name pos:start="48:53" pos:end="48:55">irq</name><index pos:start="48:56" pos:end="48:67">[<expr pos:start="48:57" pos:end="48:66"><name pos:start="48:57" pos:end="48:66">timer1_irq</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="49:5" pos:end="49:49">/* make sure juart isn't the first chardev */</comment>
    <expr_stmt pos:start="50:5" pos:end="50:41"><expr pos:start="50:5" pos:end="50:40"><name pos:start="50:5" pos:end="50:20"><name pos:start="50:5" pos:end="50:7">env</name><operator pos:start="50:8" pos:end="50:9">-&gt;</operator><name pos:start="50:10" pos:end="50:20">juart_state</name></name> <operator pos:start="50:22" pos:end="50:22">=</operator> <call pos:start="50:24" pos:end="50:40"><name pos:start="50:24" pos:end="50:38">lm32_juart_init</name><argument_list pos:start="50:39" pos:end="50:40">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="51:5" pos:end="51:42"><expr pos:start="51:5" pos:end="51:41"><name pos:start="51:5" pos:end="51:28"><name pos:start="51:5" pos:end="51:14">reset_info</name><operator pos:start="51:15" pos:end="51:16">-&gt;</operator><name pos:start="51:17" pos:end="51:28">bootstrap_pc</name></name> <operator pos:start="51:30" pos:end="51:30">=</operator> <name pos:start="51:32" pos:end="51:41">flash_base</name></expr>;</expr_stmt>
    <if_stmt pos:start="52:5" pos:end="65:52"><if pos:start="52:5" pos:end="65:52">if <condition pos:start="52:8" pos:end="52:24">(<expr pos:start="52:9" pos:end="52:23"><name pos:start="52:9" pos:end="52:23">kernel_filename</name></expr>)</condition> <block pos:start="52:26" pos:end="65:52">{<block_content pos:start="53:9" pos:end="65:52">
        <decl_stmt pos:start="53:9" pos:end="53:23"><decl pos:start="53:9" pos:end="53:22"><type pos:start="53:9" pos:end="53:16"><name pos:start="53:9" pos:end="53:16">uint64_t</name></type> <name pos:start="53:18" pos:end="53:22">entry</name></decl>;</decl_stmt>
        <decl_stmt pos:start="54:9" pos:end="54:24"><decl pos:start="54:9" pos:end="54:23"><type pos:start="54:9" pos:end="54:11"><name pos:start="54:9" pos:end="54:11">int</name></type> <name pos:start="54:13" pos:end="54:23">kernel_size</name></decl>;</decl_stmt>
        <expr_stmt pos:start="55:9" pos:end="56:50"><expr pos:start="55:9" pos:end="56:49"><name pos:start="55:9" pos:end="55:19">kernel_size</name> <operator pos:start="55:21" pos:end="55:21">=</operator> <call pos:start="55:23" pos:end="56:49"><name pos:start="55:23" pos:end="55:30">load_elf</name><argument_list pos:start="55:31" pos:end="56:49">(<argument pos:start="55:32" pos:end="55:46"><expr pos:start="55:32" pos:end="55:46"><name pos:start="55:32" pos:end="55:46">kernel_filename</name></expr></argument>, <argument pos:start="55:49" pos:end="55:52"><expr pos:start="55:49" pos:end="55:52"><name pos:start="55:49" pos:end="55:52">NULL</name></expr></argument>, <argument pos:start="55:55" pos:end="55:58"><expr pos:start="55:55" pos:end="55:58"><name pos:start="55:55" pos:end="55:58">NULL</name></expr></argument>, <argument pos:start="55:61" pos:end="55:66"><expr pos:start="55:61" pos:end="55:66"><operator pos:start="55:61" pos:end="55:61">&amp;</operator><name pos:start="55:62" pos:end="55:66">entry</name></expr></argument>, <argument pos:start="55:69" pos:end="55:72"><expr pos:start="55:69" pos:end="55:72"><name pos:start="55:69" pos:end="55:72">NULL</name></expr></argument>, <argument pos:start="55:75" pos:end="55:78"><expr pos:start="55:75" pos:end="55:78"><name pos:start="55:75" pos:end="55:78">NULL</name></expr></argument>,
                               <argument pos:start="56:32" pos:end="56:32"><expr pos:start="56:32" pos:end="56:32"><literal type="number" pos:start="56:32" pos:end="56:32">1</literal></expr></argument>, <argument pos:start="56:35" pos:end="56:45"><expr pos:start="56:35" pos:end="56:45"><name pos:start="56:35" pos:end="56:45">ELF_MACHINE</name></expr></argument>, <argument pos:start="56:48" pos:end="56:48"><expr pos:start="56:48" pos:end="56:48"><literal type="number" pos:start="56:48" pos:end="56:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="57:9" pos:end="57:41"><expr pos:start="57:9" pos:end="57:40"><name pos:start="57:9" pos:end="57:32"><name pos:start="57:9" pos:end="57:18">reset_info</name><operator pos:start="57:19" pos:end="57:20">-&gt;</operator><name pos:start="57:21" pos:end="57:32">bootstrap_pc</name></name> <operator pos:start="57:34" pos:end="57:34">=</operator> <name pos:start="57:36" pos:end="57:40">entry</name></expr>;</expr_stmt>
        <if_stmt pos:start="58:9" pos:end="65:52"><if pos:start="58:9" pos:end="65:52">if <condition pos:start="58:12" pos:end="58:28">(<expr pos:start="58:13" pos:end="58:27"><name pos:start="58:13" pos:end="58:23">kernel_size</name> <operator pos:start="58:25" pos:end="58:25">&lt;</operator> <literal type="number" pos:start="58:27" pos:end="58:27">0</literal></expr>)</condition> <block pos:start="58:30" pos:end="65:52">{<block_content pos:start="59:13" pos:end="65:52">
            <expr_stmt pos:start="59:13" pos:end="60:56"><expr pos:start="59:13" pos:end="60:55"><name pos:start="59:13" pos:end="59:23">kernel_size</name> <operator pos:start="59:25" pos:end="59:25">=</operator> <call pos:start="59:27" pos:end="60:55"><name pos:start="59:27" pos:end="59:45">load_image_targphys</name><argument_list pos:start="59:46" pos:end="60:55">(<argument pos:start="59:47" pos:end="59:61"><expr pos:start="59:47" pos:end="59:61"><name pos:start="59:47" pos:end="59:61">kernel_filename</name></expr></argument>, <argument pos:start="59:64" pos:end="59:71"><expr pos:start="59:64" pos:end="59:71"><name pos:start="59:64" pos:end="59:71">ram_base</name></expr></argument>,
                                              <argument pos:start="60:47" pos:end="60:54"><expr pos:start="60:47" pos:end="60:54"><name pos:start="60:47" pos:end="60:54">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="61:13" pos:end="61:48"><expr pos:start="61:13" pos:end="61:47"><name pos:start="61:13" pos:end="61:36"><name pos:start="61:13" pos:end="61:22">reset_info</name><operator pos:start="61:23" pos:end="61:24">-&gt;</operator><name pos:start="61:25" pos:end="61:36">bootstrap_pc</name></name> <operator pos:start="61:38" pos:end="61:38">=</operator> <name pos:start="61:40" pos:end="61:47">ram_base</name></expr>;</expr_stmt>
        <if_stmt pos:start="62:9" pos:end="65:52"><if pos:start="62:9" pos:end="65:52">if <condition pos:start="62:12" pos:end="62:28">(<expr pos:start="62:13" pos:end="62:27"><name pos:start="62:13" pos:end="62:23">kernel_size</name> <operator pos:start="62:25" pos:end="62:25">&lt;</operator> <literal type="number" pos:start="62:27" pos:end="62:27">0</literal></expr>)</condition> <block pos:start="62:30" pos:end="65:52">{<block_content pos:start="63:13" pos:end="65:52">
            <expr_stmt pos:start="63:13" pos:end="64:37"><expr pos:start="63:13" pos:end="64:36"><call pos:start="63:13" pos:end="64:36"><name pos:start="63:13" pos:end="63:19">fprintf</name><argument_list pos:start="63:20" pos:end="64:36">(<argument pos:start="63:21" pos:end="63:26"><expr pos:start="63:21" pos:end="63:26"><name pos:start="63:21" pos:end="63:26">stderr</name></expr></argument>, <argument pos:start="63:29" pos:end="63:64"><expr pos:start="63:29" pos:end="63:64"><literal type="string" pos:start="63:29" pos:end="63:64">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,
                    <argument pos:start="64:21" pos:end="64:35"><expr pos:start="64:21" pos:end="64:35"><name pos:start="64:21" pos:end="64:35">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="65:5" pos:end="65:52"><expr pos:start="65:5" pos:end="65:51"><call pos:start="65:5" pos:end="65:51"><name pos:start="65:5" pos:end="65:23">qemu_register_reset</name><argument_list pos:start="65:24" pos:end="65:51">(<argument pos:start="65:25" pos:end="65:38"><expr pos:start="65:25" pos:end="65:38"><name pos:start="65:25" pos:end="65:38">main_cpu_reset</name></expr></argument>, <argument pos:start="65:41" pos:end="65:50"><expr pos:start="65:41" pos:end="65:50"><name pos:start="65:41" pos:end="65:50">reset_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></function></unit>
