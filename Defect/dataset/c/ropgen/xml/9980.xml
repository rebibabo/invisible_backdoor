<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9980.c" pos:tabs="8"><function pos:start="1:1" pos:end="193:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:26">ff_hevc_decode_nal_vps</name><parameter_list pos:start="1:27" pos:end="1:42">(<parameter pos:start="1:28" pos:end="1:41"><decl pos:start="1:28" pos:end="1:41"><type pos:start="1:28" pos:end="1:40"><name pos:start="1:28" pos:end="1:38">HEVCContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="193:1">{<block_content pos:start="5:5" pos:end="191:31">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>,<decl pos:start="5:11" pos:end="5:11"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:11" pos:end="5:11">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">GetBitContext</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:21">gb</name> <init pos:start="7:23" pos:end="7:37">= <expr pos:start="7:25" pos:end="7:37"><operator pos:start="7:25" pos:end="7:25">&amp;</operator><name pos:start="7:26" pos:end="7:37"><name pos:start="7:26" pos:end="7:26">s</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:34">HEVClc</name><operator pos:start="7:35" pos:end="7:35">.</operator><name pos:start="7:36" pos:end="7:37">gb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">vps_id</name> <init pos:start="9:16" pos:end="9:18">= <expr pos:start="9:18" pos:end="9:18"><literal type="number" pos:start="9:18" pos:end="9:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">HEVCVPS</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:16">vps</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:58"><decl pos:start="13:5" pos:end="13:57"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">AVBufferRef</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:24">vps_buf</name> <init pos:start="13:26" pos:end="13:57">= <expr pos:start="13:28" pos:end="13:57"><call pos:start="13:28" pos:end="13:57"><name pos:start="13:28" pos:end="13:43">av_buffer_allocz</name><argument_list pos:start="13:44" pos:end="13:57">(<argument pos:start="13:45" pos:end="13:56"><expr pos:start="13:45" pos:end="13:56"><sizeof pos:start="13:45" pos:end="13:56">sizeof<argument_list pos:start="13:51" pos:end="13:56">(<argument pos:start="13:52" pos:end="13:55"><expr pos:start="13:52" pos:end="13:55"><operator pos:start="13:52" pos:end="13:52">*</operator><name pos:start="13:53" pos:end="13:55">vps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="19:29"><if pos:start="17:5" pos:end="19:29">if <condition pos:start="17:8" pos:end="17:17">(<expr pos:start="17:9" pos:end="17:16"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:16">vps_buf</name></expr>)</condition><block type="pseudo" pos:start="19:7" pos:end="19:29"><block_content pos:start="19:7" pos:end="19:29">

      <return pos:start="19:7" pos:end="19:29">return <expr pos:start="19:14" pos:end="19:28"><call pos:start="19:14" pos:end="19:28"><name pos:start="19:14" pos:end="19:20">AVERROR</name><argument_list pos:start="19:21" pos:end="19:28">(<argument pos:start="19:22" pos:end="19:27"><expr pos:start="19:22" pos:end="19:27"><name pos:start="19:22" pos:end="19:27">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:34"><expr pos:start="21:5" pos:end="21:33"><name pos:start="21:5" pos:end="21:7">vps</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <operator pos:start="21:11" pos:end="21:11">(</operator><name pos:start="21:12" pos:end="21:18">HEVCVPS</name><operator pos:start="21:19" pos:end="21:19">*</operator><operator pos:start="21:20" pos:end="21:20">)</operator><name pos:start="21:21" pos:end="21:33"><name pos:start="21:21" pos:end="21:27">vps_buf</name><operator pos:start="21:28" pos:end="21:29">-&gt;</operator><name pos:start="21:30" pos:end="21:33">data</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:53"><expr pos:start="25:5" pos:end="25:52"><call pos:start="25:5" pos:end="25:52"><name pos:start="25:5" pos:end="25:10">av_log</name><argument_list pos:start="25:11" pos:end="25:52">(<argument pos:start="25:12" pos:end="25:19"><expr pos:start="25:12" pos:end="25:19"><name pos:start="25:12" pos:end="25:19"><name pos:start="25:12" pos:end="25:12">s</name><operator pos:start="25:13" pos:end="25:14">-&gt;</operator><name pos:start="25:15" pos:end="25:19">avctx</name></name></expr></argument>, <argument pos:start="25:22" pos:end="25:33"><expr pos:start="25:22" pos:end="25:33"><name pos:start="25:22" pos:end="25:33">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="25:36" pos:end="25:51"><expr pos:start="25:36" pos:end="25:51"><literal type="string" pos:start="25:36" pos:end="25:51">"Decoding VPS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:29"><expr pos:start="29:5" pos:end="29:28"><name pos:start="29:5" pos:end="29:10">vps_id</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <call pos:start="29:14" pos:end="29:28"><name pos:start="29:14" pos:end="29:21">get_bits</name><argument_list pos:start="29:22" pos:end="29:28">(<argument pos:start="29:23" pos:end="29:24"><expr pos:start="29:23" pos:end="29:24"><name pos:start="29:23" pos:end="29:24">gb</name></expr></argument>, <argument pos:start="29:27" pos:end="29:27"><expr pos:start="29:27" pos:end="29:27"><literal type="number" pos:start="29:27" pos:end="29:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:32">(<expr pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:14">vps_id</name> <operator pos:start="31:16" pos:end="31:17">&gt;=</operator> <name pos:start="31:19" pos:end="31:31">MAX_VPS_COUNT</name></expr>)</condition> <block pos:start="31:34" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:17">

        <expr_stmt pos:start="33:9" pos:end="33:76"><expr pos:start="33:9" pos:end="33:75"><call pos:start="33:9" pos:end="33:75"><name pos:start="33:9" pos:end="33:14">av_log</name><argument_list pos:start="33:15" pos:end="33:75">(<argument pos:start="33:16" pos:end="33:23"><expr pos:start="33:16" pos:end="33:23"><name pos:start="33:16" pos:end="33:23"><name pos:start="33:16" pos:end="33:16">s</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:23">avctx</name></name></expr></argument>, <argument pos:start="33:26" pos:end="33:37"><expr pos:start="33:26" pos:end="33:37"><name pos:start="33:26" pos:end="33:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="33:40" pos:end="33:66"><expr pos:start="33:40" pos:end="33:66"><literal type="string" pos:start="33:40" pos:end="33:66">"VPS id out of range: %d\n"</literal></expr></argument>, <argument pos:start="33:69" pos:end="33:74"><expr pos:start="33:69" pos:end="33:74"><name pos:start="33:69" pos:end="33:74">vps_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="35:9" pos:end="35:17">goto <name pos:start="35:14" pos:end="35:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:29">(<expr pos:start="41:9" pos:end="41:28"><call pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:16">get_bits</name><argument_list pos:start="41:17" pos:end="41:23">(<argument pos:start="41:18" pos:end="41:19"><expr pos:start="41:18" pos:end="41:19"><name pos:start="41:18" pos:end="41:19">gb</name></expr></argument>, <argument pos:start="41:22" pos:end="41:22"><expr pos:start="41:22" pos:end="41:22"><literal type="number" pos:start="41:22" pos:end="41:22">2</literal></expr></argument>)</argument_list></call> <operator pos:start="41:25" pos:end="41:26">!=</operator> <literal type="number" pos:start="41:28" pos:end="41:28">3</literal></expr>)</condition> <block pos:start="41:31" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:17"> <comment type="line" pos:start="41:33" pos:end="41:59">// vps_reserved_three_2bits</comment>

        <expr_stmt pos:start="43:9" pos:end="43:82"><expr pos:start="43:9" pos:end="43:81"><call pos:start="43:9" pos:end="43:81"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="43:81">(<argument pos:start="43:16" pos:end="43:23"><expr pos:start="43:16" pos:end="43:23"><name pos:start="43:16" pos:end="43:23"><name pos:start="43:16" pos:end="43:16">s</name><operator pos:start="43:17" pos:end="43:18">-&gt;</operator><name pos:start="43:19" pos:end="43:23">avctx</name></name></expr></argument>, <argument pos:start="43:26" pos:end="43:37"><expr pos:start="43:26" pos:end="43:37"><name pos:start="43:26" pos:end="43:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:40" pos:end="43:80"><expr pos:start="43:40" pos:end="43:80"><literal type="string" pos:start="43:40" pos:end="43:80">"vps_reserved_three_2bits is not three\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="45:9" pos:end="45:17">goto <name pos:start="45:14" pos:end="45:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:60"><expr pos:start="51:5" pos:end="51:59"><name pos:start="51:5" pos:end="51:23"><name pos:start="51:5" pos:end="51:7">vps</name><operator pos:start="51:8" pos:end="51:9">-&gt;</operator><name pos:start="51:10" pos:end="51:23">vps_max_layers</name></name>               <operator pos:start="51:39" pos:end="51:39">=</operator> <call pos:start="51:41" pos:end="51:55"><name pos:start="51:41" pos:end="51:48">get_bits</name><argument_list pos:start="51:49" pos:end="51:55">(<argument pos:start="51:50" pos:end="51:51"><expr pos:start="51:50" pos:end="51:51"><name pos:start="51:50" pos:end="51:51">gb</name></expr></argument>, <argument pos:start="51:54" pos:end="51:54"><expr pos:start="51:54" pos:end="51:54"><literal type="number" pos:start="51:54" pos:end="51:54">6</literal></expr></argument>)</argument_list></call> <operator pos:start="51:57" pos:end="51:57">+</operator> <literal type="number" pos:start="51:59" pos:end="51:59">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:60"><expr pos:start="53:5" pos:end="53:59"><name pos:start="53:5" pos:end="53:27"><name pos:start="53:5" pos:end="53:7">vps</name><operator pos:start="53:8" pos:end="53:9">-&gt;</operator><name pos:start="53:10" pos:end="53:27">vps_max_sub_layers</name></name>           <operator pos:start="53:39" pos:end="53:39">=</operator> <call pos:start="53:41" pos:end="53:55"><name pos:start="53:41" pos:end="53:48">get_bits</name><argument_list pos:start="53:49" pos:end="53:55">(<argument pos:start="53:50" pos:end="53:51"><expr pos:start="53:50" pos:end="53:51"><name pos:start="53:50" pos:end="53:51">gb</name></expr></argument>, <argument pos:start="53:54" pos:end="53:54"><expr pos:start="53:54" pos:end="53:54"><literal type="number" pos:start="53:54" pos:end="53:54">3</literal></expr></argument>)</argument_list></call> <operator pos:start="53:57" pos:end="53:57">+</operator> <literal type="number" pos:start="53:59" pos:end="53:59">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:54"><expr pos:start="55:5" pos:end="55:53"><name pos:start="55:5" pos:end="55:37"><name pos:start="55:5" pos:end="55:7">vps</name><operator pos:start="55:8" pos:end="55:9">-&gt;</operator><name pos:start="55:10" pos:end="55:37">vps_temporal_id_nesting_flag</name></name> <operator pos:start="55:39" pos:end="55:39">=</operator> <call pos:start="55:41" pos:end="55:53"><name pos:start="55:41" pos:end="55:49">get_bits1</name><argument_list pos:start="55:50" pos:end="55:53">(<argument pos:start="55:51" pos:end="55:52"><expr pos:start="55:51" pos:end="55:52"><name pos:start="55:51" pos:end="55:52">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="59:5" pos:end="65:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:35">(<expr pos:start="59:9" pos:end="59:34"><call pos:start="59:9" pos:end="59:24"><name pos:start="59:9" pos:end="59:16">get_bits</name><argument_list pos:start="59:17" pos:end="59:24">(<argument pos:start="59:18" pos:end="59:19"><expr pos:start="59:18" pos:end="59:19"><name pos:start="59:18" pos:end="59:19">gb</name></expr></argument>, <argument pos:start="59:22" pos:end="59:23"><expr pos:start="59:22" pos:end="59:23"><literal type="number" pos:start="59:22" pos:end="59:23">16</literal></expr></argument>)</argument_list></call> <operator pos:start="59:26" pos:end="59:27">!=</operator> <literal type="number" pos:start="59:29" pos:end="59:34">0xffff</literal></expr>)</condition> <block pos:start="59:37" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:17"> <comment type="line" pos:start="59:39" pos:end="59:65">// vps_reserved_ffff_16bits</comment>

        <expr_stmt pos:start="61:9" pos:end="61:83"><expr pos:start="61:9" pos:end="61:82"><call pos:start="61:9" pos:end="61:82"><name pos:start="61:9" pos:end="61:14">av_log</name><argument_list pos:start="61:15" pos:end="61:82">(<argument pos:start="61:16" pos:end="61:23"><expr pos:start="61:16" pos:end="61:23"><name pos:start="61:16" pos:end="61:23"><name pos:start="61:16" pos:end="61:16">s</name><operator pos:start="61:17" pos:end="61:18">-&gt;</operator><name pos:start="61:19" pos:end="61:23">avctx</name></name></expr></argument>, <argument pos:start="61:26" pos:end="61:37"><expr pos:start="61:26" pos:end="61:37"><name pos:start="61:26" pos:end="61:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="61:40" pos:end="61:81"><expr pos:start="61:40" pos:end="61:81"><literal type="string" pos:start="61:40" pos:end="61:81">"vps_reserved_ffff_16bits is not 0xffff\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="63:9" pos:end="63:17">goto <name pos:start="63:14" pos:end="63:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="69:5" pos:end="77:5"><if pos:start="69:5" pos:end="77:5">if <condition pos:start="69:8" pos:end="69:49">(<expr pos:start="69:9" pos:end="69:48"><name pos:start="69:9" pos:end="69:31"><name pos:start="69:9" pos:end="69:11">vps</name><operator pos:start="69:12" pos:end="69:13">-&gt;</operator><name pos:start="69:14" pos:end="69:31">vps_max_sub_layers</name></name> <operator pos:start="69:33" pos:end="69:33">&gt;</operator> <name pos:start="69:35" pos:end="69:48">MAX_SUB_LAYERS</name></expr>)</condition> <block pos:start="69:51" pos:end="77:5">{<block_content pos:start="71:9" pos:end="75:17">

        <expr_stmt pos:start="71:9" pos:end="73:40"><expr pos:start="71:9" pos:end="73:39"><call pos:start="71:9" pos:end="73:39"><name pos:start="71:9" pos:end="71:14">av_log</name><argument_list pos:start="71:15" pos:end="73:39">(<argument pos:start="71:16" pos:end="71:23"><expr pos:start="71:16" pos:end="71:23"><name pos:start="71:16" pos:end="71:23"><name pos:start="71:16" pos:end="71:16">s</name><operator pos:start="71:17" pos:end="71:18">-&gt;</operator><name pos:start="71:19" pos:end="71:23">avctx</name></name></expr></argument>, <argument pos:start="71:26" pos:end="71:37"><expr pos:start="71:26" pos:end="71:37"><name pos:start="71:26" pos:end="71:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="71:40" pos:end="71:78"><expr pos:start="71:40" pos:end="71:78"><literal type="string" pos:start="71:40" pos:end="71:78">"vps_max_sub_layers out of range: %d\n"</literal></expr></argument>,

               <argument pos:start="73:16" pos:end="73:38"><expr pos:start="73:16" pos:end="73:38"><name pos:start="73:16" pos:end="73:38"><name pos:start="73:16" pos:end="73:18">vps</name><operator pos:start="73:19" pos:end="73:20">-&gt;</operator><name pos:start="73:21" pos:end="73:38">vps_max_sub_layers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="75:9" pos:end="75:17">goto <name pos:start="75:14" pos:end="75:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:86">(<expr pos:start="81:9" pos:end="81:85"><call pos:start="81:9" pos:end="81:81"><name pos:start="81:9" pos:end="81:33">decode_profile_tier_level</name><argument_list pos:start="81:34" pos:end="81:81">(<argument pos:start="81:35" pos:end="81:44"><expr pos:start="81:35" pos:end="81:44"><operator pos:start="81:35" pos:end="81:35">&amp;</operator><name pos:start="81:36" pos:end="81:44"><name pos:start="81:36" pos:end="81:36">s</name><operator pos:start="81:37" pos:end="81:38">-&gt;</operator><name pos:start="81:39" pos:end="81:44">HEVClc</name></name></expr></argument>, <argument pos:start="81:47" pos:end="81:55"><expr pos:start="81:47" pos:end="81:55"><operator pos:start="81:47" pos:end="81:47">&amp;</operator><name pos:start="81:48" pos:end="81:55"><name pos:start="81:48" pos:end="81:50">vps</name><operator pos:start="81:51" pos:end="81:52">-&gt;</operator><name pos:start="81:53" pos:end="81:55">ptl</name></name></expr></argument>, <argument pos:start="81:58" pos:end="81:80"><expr pos:start="81:58" pos:end="81:80"><name pos:start="81:58" pos:end="81:80"><name pos:start="81:58" pos:end="81:60">vps</name><operator pos:start="81:61" pos:end="81:62">-&gt;</operator><name pos:start="81:63" pos:end="81:80">vps_max_sub_layers</name></name></expr></argument>)</argument_list></call> <operator pos:start="81:83" pos:end="81:83">&lt;</operator> <literal type="number" pos:start="81:85" pos:end="81:85">0</literal></expr>)</condition> <block pos:start="81:88" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:17">

        <expr_stmt pos:start="83:9" pos:end="83:79"><expr pos:start="83:9" pos:end="83:78"><call pos:start="83:9" pos:end="83:78"><name pos:start="83:9" pos:end="83:14">av_log</name><argument_list pos:start="83:15" pos:end="83:78">(<argument pos:start="83:16" pos:end="83:23"><expr pos:start="83:16" pos:end="83:23"><name pos:start="83:16" pos:end="83:23"><name pos:start="83:16" pos:end="83:16">s</name><operator pos:start="83:17" pos:end="83:18">-&gt;</operator><name pos:start="83:19" pos:end="83:23">avctx</name></name></expr></argument>, <argument pos:start="83:26" pos:end="83:37"><expr pos:start="83:26" pos:end="83:37"><name pos:start="83:26" pos:end="83:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="83:40" pos:end="83:77"><expr pos:start="83:40" pos:end="83:77"><literal type="string" pos:start="83:40" pos:end="83:77">"Error decoding profile tier level.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="85:9" pos:end="85:17">goto <name pos:start="85:14" pos:end="85:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:66"><expr pos:start="89:5" pos:end="89:65"><name pos:start="89:5" pos:end="89:49"><name pos:start="89:5" pos:end="89:7">vps</name><operator pos:start="89:8" pos:end="89:9">-&gt;</operator><name pos:start="89:10" pos:end="89:49">vps_sub_layer_ordering_info_present_flag</name></name> <operator pos:start="89:51" pos:end="89:51">=</operator> <call pos:start="89:53" pos:end="89:65"><name pos:start="89:53" pos:end="89:61">get_bits1</name><argument_list pos:start="89:62" pos:end="89:65">(<argument pos:start="89:63" pos:end="89:64"><expr pos:start="89:63" pos:end="89:64"><name pos:start="89:63" pos:end="89:64">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:88"><expr pos:start="93:5" pos:end="93:87"><name pos:start="93:5" pos:end="93:5">i</name> <operator pos:start="93:7" pos:end="93:7">=</operator> <ternary pos:start="93:9" pos:end="93:87"><condition pos:start="93:9" pos:end="93:55"><expr pos:start="93:9" pos:end="93:53"><name pos:start="93:9" pos:end="93:53"><name pos:start="93:9" pos:end="93:11">vps</name><operator pos:start="93:12" pos:end="93:13">-&gt;</operator><name pos:start="93:14" pos:end="93:53">vps_sub_layer_ordering_info_present_flag</name></name></expr> ?</condition><then pos:start="93:57" pos:end="93:57"> <expr pos:start="93:57" pos:end="93:57"><literal type="number" pos:start="93:57" pos:end="93:57">0</literal></expr> </then><else pos:start="93:59" pos:end="93:87">: <expr pos:start="93:61" pos:end="93:87"><name pos:start="93:61" pos:end="93:83"><name pos:start="93:61" pos:end="93:63">vps</name><operator pos:start="93:64" pos:end="93:65">-&gt;</operator><name pos:start="93:66" pos:end="93:83">vps_max_sub_layers</name></name> <operator pos:start="93:85" pos:end="93:85">-</operator> <literal type="number" pos:start="93:87" pos:end="93:87">1</literal></expr></else></ternary></expr>;</expr_stmt>

    <for pos:start="95:5" pos:end="125:5">for <control pos:start="95:9" pos:end="95:44">(<init pos:start="95:10" pos:end="95:10">;</init> <condition pos:start="95:12" pos:end="95:39"><expr pos:start="95:12" pos:end="95:38"><name pos:start="95:12" pos:end="95:12">i</name> <operator pos:start="95:14" pos:end="95:14">&lt;</operator> <name pos:start="95:16" pos:end="95:38"><name pos:start="95:16" pos:end="95:18">vps</name><operator pos:start="95:19" pos:end="95:20">-&gt;</operator><name pos:start="95:21" pos:end="95:38">vps_max_sub_layers</name></name></expr>;</condition> <incr pos:start="95:41" pos:end="95:43"><expr pos:start="95:41" pos:end="95:43"><name pos:start="95:41" pos:end="95:41">i</name><operator pos:start="95:42" pos:end="95:43">++</operator></expr></incr>)</control> <block pos:start="95:46" pos:end="125:5">{<block_content pos:start="97:9" pos:end="123:9">

        <expr_stmt pos:start="97:9" pos:end="97:71"><expr pos:start="97:9" pos:end="97:70"><name pos:start="97:9" pos:end="97:41"><name pos:start="97:9" pos:end="97:11">vps</name><operator pos:start="97:12" pos:end="97:13">-&gt;</operator><name pos:start="97:14" pos:end="97:38">vps_max_dec_pic_buffering</name><index pos:start="97:39" pos:end="97:41">[<expr pos:start="97:40" pos:end="97:40"><name pos:start="97:40" pos:end="97:40">i</name></expr>]</index></name> <operator pos:start="97:43" pos:end="97:43">=</operator> <call pos:start="97:45" pos:end="97:66"><name pos:start="97:45" pos:end="97:62">get_ue_golomb_long</name><argument_list pos:start="97:63" pos:end="97:66">(<argument pos:start="97:64" pos:end="97:65"><expr pos:start="97:64" pos:end="97:65"><name pos:start="97:64" pos:end="97:65">gb</name></expr></argument>)</argument_list></call> <operator pos:start="97:68" pos:end="97:68">+</operator> <literal type="number" pos:start="97:70" pos:end="97:70">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:67"><expr pos:start="99:9" pos:end="99:66"><name pos:start="99:9" pos:end="99:36"><name pos:start="99:9" pos:end="99:11">vps</name><operator pos:start="99:12" pos:end="99:13">-&gt;</operator><name pos:start="99:14" pos:end="99:33">vps_num_reorder_pics</name><index pos:start="99:34" pos:end="99:36">[<expr pos:start="99:35" pos:end="99:35"><name pos:start="99:35" pos:end="99:35">i</name></expr>]</index></name>      <operator pos:start="99:43" pos:end="99:43">=</operator> <call pos:start="99:45" pos:end="99:66"><name pos:start="99:45" pos:end="99:62">get_ue_golomb_long</name><argument_list pos:start="99:63" pos:end="99:66">(<argument pos:start="99:64" pos:end="99:65"><expr pos:start="99:64" pos:end="99:65"><name pos:start="99:64" pos:end="99:65">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:71"><expr pos:start="101:9" pos:end="101:70"><name pos:start="101:9" pos:end="101:40"><name pos:start="101:9" pos:end="101:11">vps</name><operator pos:start="101:12" pos:end="101:13">-&gt;</operator><name pos:start="101:14" pos:end="101:37">vps_max_latency_increase</name><index pos:start="101:38" pos:end="101:40">[<expr pos:start="101:39" pos:end="101:39"><name pos:start="101:39" pos:end="101:39">i</name></expr>]</index></name>  <operator pos:start="101:43" pos:end="101:43">=</operator> <call pos:start="101:45" pos:end="101:66"><name pos:start="101:45" pos:end="101:62">get_ue_golomb_long</name><argument_list pos:start="101:63" pos:end="101:66">(<argument pos:start="101:64" pos:end="101:65"><expr pos:start="101:64" pos:end="101:65"><name pos:start="101:64" pos:end="101:65">gb</name></expr></argument>)</argument_list></call> <operator pos:start="101:68" pos:end="101:68">-</operator> <literal type="number" pos:start="101:70" pos:end="101:70">1</literal></expr>;</expr_stmt>



        <if_stmt pos:start="105:9" pos:end="113:9"><if pos:start="105:9" pos:end="113:9">if <condition pos:start="105:12" pos:end="105:61">(<expr pos:start="105:13" pos:end="105:60"><name pos:start="105:13" pos:end="105:45"><name pos:start="105:13" pos:end="105:15">vps</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:42">vps_max_dec_pic_buffering</name><index pos:start="105:43" pos:end="105:45">[<expr pos:start="105:44" pos:end="105:44"><name pos:start="105:44" pos:end="105:44">i</name></expr>]</index></name> <operator pos:start="105:47" pos:end="105:47">&gt;</operator> <name pos:start="105:49" pos:end="105:60">MAX_DPB_SIZE</name></expr>)</condition> <block pos:start="105:63" pos:end="113:9">{<block_content pos:start="107:13" pos:end="111:21">

            <expr_stmt pos:start="107:13" pos:end="109:58"><expr pos:start="107:13" pos:end="109:57"><call pos:start="107:13" pos:end="109:57"><name pos:start="107:13" pos:end="107:18">av_log</name><argument_list pos:start="107:19" pos:end="109:57">(<argument pos:start="107:20" pos:end="107:27"><expr pos:start="107:20" pos:end="107:27"><name pos:start="107:20" pos:end="107:27"><name pos:start="107:20" pos:end="107:20">s</name><operator pos:start="107:21" pos:end="107:22">-&gt;</operator><name pos:start="107:23" pos:end="107:27">avctx</name></name></expr></argument>, <argument pos:start="107:30" pos:end="107:41"><expr pos:start="107:30" pos:end="107:41"><name pos:start="107:30" pos:end="107:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="107:44" pos:end="107:96"><expr pos:start="107:44" pos:end="107:96"><literal type="string" pos:start="107:44" pos:end="107:96">"vps_max_dec_pic_buffering_minus1 out of range: %d\n"</literal></expr></argument>,

                   <argument pos:start="109:20" pos:end="109:56"><expr pos:start="109:20" pos:end="109:56"><name pos:start="109:20" pos:end="109:52"><name pos:start="109:20" pos:end="109:22">vps</name><operator pos:start="109:23" pos:end="109:24">-&gt;</operator><name pos:start="109:25" pos:end="109:49">vps_max_dec_pic_buffering</name><index pos:start="109:50" pos:end="109:52">[<expr pos:start="109:51" pos:end="109:51"><name pos:start="109:51" pos:end="109:51">i</name></expr>]</index></name> <operator pos:start="109:54" pos:end="109:54">-</operator> <literal type="number" pos:start="109:56" pos:end="109:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="111:13" pos:end="111:21">goto <name pos:start="111:18" pos:end="111:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="115:9" pos:end="123:9"><if pos:start="115:9" pos:end="123:9">if <condition pos:start="115:12" pos:end="115:81">(<expr pos:start="115:13" pos:end="115:80"><name pos:start="115:13" pos:end="115:40"><name pos:start="115:13" pos:end="115:15">vps</name><operator pos:start="115:16" pos:end="115:17">-&gt;</operator><name pos:start="115:18" pos:end="115:37">vps_num_reorder_pics</name><index pos:start="115:38" pos:end="115:40">[<expr pos:start="115:39" pos:end="115:39"><name pos:start="115:39" pos:end="115:39">i</name></expr>]</index></name> <operator pos:start="115:42" pos:end="115:42">&gt;</operator> <name pos:start="115:44" pos:end="115:76"><name pos:start="115:44" pos:end="115:46">vps</name><operator pos:start="115:47" pos:end="115:48">-&gt;</operator><name pos:start="115:49" pos:end="115:73">vps_max_dec_pic_buffering</name><index pos:start="115:74" pos:end="115:76">[<expr pos:start="115:75" pos:end="115:75"><name pos:start="115:75" pos:end="115:75">i</name></expr>]</index></name> <operator pos:start="115:78" pos:end="115:78">-</operator> <literal type="number" pos:start="115:80" pos:end="115:80">1</literal></expr>)</condition> <block pos:start="115:83" pos:end="123:9">{<block_content pos:start="117:13" pos:end="121:21">

            <expr_stmt pos:start="117:13" pos:end="119:49"><expr pos:start="117:13" pos:end="119:48"><call pos:start="117:13" pos:end="119:48"><name pos:start="117:13" pos:end="117:18">av_log</name><argument_list pos:start="117:19" pos:end="119:48">(<argument pos:start="117:20" pos:end="117:27"><expr pos:start="117:20" pos:end="117:27"><name pos:start="117:20" pos:end="117:27"><name pos:start="117:20" pos:end="117:20">s</name><operator pos:start="117:21" pos:end="117:22">-&gt;</operator><name pos:start="117:23" pos:end="117:27">avctx</name></name></expr></argument>, <argument pos:start="117:30" pos:end="117:41"><expr pos:start="117:30" pos:end="117:41"><name pos:start="117:30" pos:end="117:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="117:44" pos:end="117:88"><expr pos:start="117:44" pos:end="117:88"><literal type="string" pos:start="117:44" pos:end="117:88">"vps_max_num_reorder_pics out of range: %d\n"</literal></expr></argument>,

                   <argument pos:start="119:20" pos:end="119:47"><expr pos:start="119:20" pos:end="119:47"><name pos:start="119:20" pos:end="119:47"><name pos:start="119:20" pos:end="119:22">vps</name><operator pos:start="119:23" pos:end="119:24">-&gt;</operator><name pos:start="119:25" pos:end="119:44">vps_num_reorder_pics</name><index pos:start="119:45" pos:end="119:47">[<expr pos:start="119:46" pos:end="119:46"><name pos:start="119:46" pos:end="119:46">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="121:13" pos:end="121:21">goto <name pos:start="121:18" pos:end="121:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="129:5" pos:end="129:46"><expr pos:start="129:5" pos:end="129:45"><name pos:start="129:5" pos:end="129:25"><name pos:start="129:5" pos:end="129:7">vps</name><operator pos:start="129:8" pos:end="129:9">-&gt;</operator><name pos:start="129:10" pos:end="129:25">vps_max_layer_id</name></name>   <operator pos:start="129:29" pos:end="129:29">=</operator> <call pos:start="129:31" pos:end="129:45"><name pos:start="129:31" pos:end="129:38">get_bits</name><argument_list pos:start="129:39" pos:end="129:45">(<argument pos:start="129:40" pos:end="129:41"><expr pos:start="129:40" pos:end="129:41"><name pos:start="129:40" pos:end="129:41">gb</name></expr></argument>, <argument pos:start="129:44" pos:end="129:44"><expr pos:start="129:44" pos:end="129:44"><literal type="number" pos:start="129:44" pos:end="129:44">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:57"><expr pos:start="131:5" pos:end="131:56"><name pos:start="131:5" pos:end="131:27"><name pos:start="131:5" pos:end="131:7">vps</name><operator pos:start="131:8" pos:end="131:9">-&gt;</operator><name pos:start="131:10" pos:end="131:27">vps_num_layer_sets</name></name> <operator pos:start="131:29" pos:end="131:29">=</operator> <call pos:start="131:31" pos:end="131:52"><name pos:start="131:31" pos:end="131:48">get_ue_golomb_long</name><argument_list pos:start="131:49" pos:end="131:52">(<argument pos:start="131:50" pos:end="131:51"><expr pos:start="131:50" pos:end="131:51"><name pos:start="131:50" pos:end="131:51">gb</name></expr></argument>)</argument_list></call> <operator pos:start="131:54" pos:end="131:54">+</operator> <literal type="number" pos:start="131:56" pos:end="131:56">1</literal></expr>;</expr_stmt>

    <for pos:start="133:5" pos:end="137:29">for <control pos:start="133:9" pos:end="133:49">(<init pos:start="133:10" pos:end="133:15"><expr pos:start="133:10" pos:end="133:14"><name pos:start="133:10" pos:end="133:10">i</name> <operator pos:start="133:12" pos:end="133:12">=</operator> <literal type="number" pos:start="133:14" pos:end="133:14">1</literal></expr>;</init> <condition pos:start="133:17" pos:end="133:44"><expr pos:start="133:17" pos:end="133:43"><name pos:start="133:17" pos:end="133:17">i</name> <operator pos:start="133:19" pos:end="133:19">&lt;</operator> <name pos:start="133:21" pos:end="133:43"><name pos:start="133:21" pos:end="133:23">vps</name><operator pos:start="133:24" pos:end="133:25">-&gt;</operator><name pos:start="133:26" pos:end="133:43">vps_num_layer_sets</name></name></expr>;</condition> <incr pos:start="133:46" pos:end="133:48"><expr pos:start="133:46" pos:end="133:48"><name pos:start="133:46" pos:end="133:46">i</name><operator pos:start="133:47" pos:end="133:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="135:9" pos:end="137:29"><block_content pos:start="135:9" pos:end="137:29">

        <for pos:start="135:9" pos:end="137:29">for <control pos:start="135:13" pos:end="135:52">(<init pos:start="135:14" pos:end="135:19"><expr pos:start="135:14" pos:end="135:18"><name pos:start="135:14" pos:end="135:14">j</name> <operator pos:start="135:16" pos:end="135:16">=</operator> <literal type="number" pos:start="135:18" pos:end="135:18">0</literal></expr>;</init> <condition pos:start="135:21" pos:end="135:47"><expr pos:start="135:21" pos:end="135:46"><name pos:start="135:21" pos:end="135:21">j</name> <operator pos:start="135:23" pos:end="135:24">&lt;=</operator> <name pos:start="135:26" pos:end="135:46"><name pos:start="135:26" pos:end="135:28">vps</name><operator pos:start="135:29" pos:end="135:30">-&gt;</operator><name pos:start="135:31" pos:end="135:46">vps_max_layer_id</name></name></expr>;</condition> <incr pos:start="135:49" pos:end="135:51"><expr pos:start="135:49" pos:end="135:51"><name pos:start="135:49" pos:end="135:49">j</name><operator pos:start="135:50" pos:end="135:51">++</operator></expr></incr>)</control><block type="pseudo" pos:start="137:13" pos:end="137:29"><block_content pos:start="137:13" pos:end="137:29">

            <expr_stmt pos:start="137:13" pos:end="137:29"><expr pos:start="137:13" pos:end="137:28"><call pos:start="137:13" pos:end="137:28"><name pos:start="137:13" pos:end="137:21">skip_bits</name><argument_list pos:start="137:22" pos:end="137:28">(<argument pos:start="137:23" pos:end="137:24"><expr pos:start="137:23" pos:end="137:24"><name pos:start="137:23" pos:end="137:24">gb</name></expr></argument>, <argument pos:start="137:27" pos:end="137:27"><expr pos:start="137:27" pos:end="137:27"><literal type="number" pos:start="137:27" pos:end="137:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>  <comment type="line" pos:start="137:32" pos:end="137:62">// layer_id_included_flag[i][j]</comment>



    <expr_stmt pos:start="141:5" pos:end="141:54"><expr pos:start="141:5" pos:end="141:53"><name pos:start="141:5" pos:end="141:37"><name pos:start="141:5" pos:end="141:7">vps</name><operator pos:start="141:8" pos:end="141:9">-&gt;</operator><name pos:start="141:10" pos:end="141:37">vps_timing_info_present_flag</name></name> <operator pos:start="141:39" pos:end="141:39">=</operator> <call pos:start="141:41" pos:end="141:53"><name pos:start="141:41" pos:end="141:49">get_bits1</name><argument_list pos:start="141:50" pos:end="141:53">(<argument pos:start="141:51" pos:end="141:52"><expr pos:start="141:51" pos:end="141:52"><name pos:start="141:51" pos:end="141:52">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="143:5" pos:end="173:5"><if pos:start="143:5" pos:end="173:5">if <condition pos:start="143:8" pos:end="143:42">(<expr pos:start="143:9" pos:end="143:41"><name pos:start="143:9" pos:end="143:41"><name pos:start="143:9" pos:end="143:11">vps</name><operator pos:start="143:12" pos:end="143:13">-&gt;</operator><name pos:start="143:14" pos:end="143:41">vps_timing_info_present_flag</name></name></expr>)</condition> <block pos:start="143:44" pos:end="173:5">{<block_content pos:start="145:9" pos:end="171:9">

        <expr_stmt pos:start="145:9" pos:end="145:73"><expr pos:start="145:9" pos:end="145:72"><name pos:start="145:9" pos:end="145:34"><name pos:start="145:9" pos:end="145:11">vps</name><operator pos:start="145:12" pos:end="145:13">-&gt;</operator><name pos:start="145:14" pos:end="145:34">vps_num_units_in_tick</name></name>               <operator pos:start="145:50" pos:end="145:50">=</operator> <call pos:start="145:52" pos:end="145:72"><name pos:start="145:52" pos:end="145:64">get_bits_long</name><argument_list pos:start="145:65" pos:end="145:72">(<argument pos:start="145:66" pos:end="145:67"><expr pos:start="145:66" pos:end="145:67"><name pos:start="145:66" pos:end="145:67">gb</name></expr></argument>, <argument pos:start="145:70" pos:end="145:71"><expr pos:start="145:70" pos:end="145:71"><literal type="number" pos:start="145:70" pos:end="145:71">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:73"><expr pos:start="147:9" pos:end="147:72"><name pos:start="147:9" pos:end="147:27"><name pos:start="147:9" pos:end="147:11">vps</name><operator pos:start="147:12" pos:end="147:13">-&gt;</operator><name pos:start="147:14" pos:end="147:27">vps_time_scale</name></name>                      <operator pos:start="147:50" pos:end="147:50">=</operator> <call pos:start="147:52" pos:end="147:72"><name pos:start="147:52" pos:end="147:64">get_bits_long</name><argument_list pos:start="147:65" pos:end="147:72">(<argument pos:start="147:66" pos:end="147:67"><expr pos:start="147:66" pos:end="147:67"><name pos:start="147:66" pos:end="147:67">gb</name></expr></argument>, <argument pos:start="147:70" pos:end="147:71"><expr pos:start="147:70" pos:end="147:71"><literal type="number" pos:start="147:70" pos:end="147:71">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:65"><expr pos:start="149:9" pos:end="149:64"><name pos:start="149:9" pos:end="149:48"><name pos:start="149:9" pos:end="149:11">vps</name><operator pos:start="149:12" pos:end="149:13">-&gt;</operator><name pos:start="149:14" pos:end="149:48">vps_poc_proportional_to_timing_flag</name></name> <operator pos:start="149:50" pos:end="149:50">=</operator> <call pos:start="149:52" pos:end="149:64"><name pos:start="149:52" pos:end="149:60">get_bits1</name><argument_list pos:start="149:61" pos:end="149:64">(<argument pos:start="149:62" pos:end="149:63"><expr pos:start="149:62" pos:end="149:63"><name pos:start="149:62" pos:end="149:63">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="151:9" pos:end="153:73"><if pos:start="151:9" pos:end="153:73">if <condition pos:start="151:12" pos:end="151:53">(<expr pos:start="151:13" pos:end="151:52"><name pos:start="151:13" pos:end="151:52"><name pos:start="151:13" pos:end="151:15">vps</name><operator pos:start="151:16" pos:end="151:17">-&gt;</operator><name pos:start="151:18" pos:end="151:52">vps_poc_proportional_to_timing_flag</name></name></expr>)</condition><block type="pseudo" pos:start="153:13" pos:end="153:73"><block_content pos:start="153:13" pos:end="153:73">

            <expr_stmt pos:start="153:13" pos:end="153:73"><expr pos:start="153:13" pos:end="153:72"><name pos:start="153:13" pos:end="153:43"><name pos:start="153:13" pos:end="153:15">vps</name><operator pos:start="153:16" pos:end="153:17">-&gt;</operator><name pos:start="153:18" pos:end="153:43">vps_num_ticks_poc_diff_one</name></name> <operator pos:start="153:45" pos:end="153:45">=</operator> <call pos:start="153:47" pos:end="153:68"><name pos:start="153:47" pos:end="153:64">get_ue_golomb_long</name><argument_list pos:start="153:65" pos:end="153:68">(<argument pos:start="153:66" pos:end="153:67"><expr pos:start="153:66" pos:end="153:67"><name pos:start="153:66" pos:end="153:67">gb</name></expr></argument>)</argument_list></call> <operator pos:start="153:70" pos:end="153:70">+</operator> <literal type="number" pos:start="153:72" pos:end="153:72">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:61"><expr pos:start="155:9" pos:end="155:60"><name pos:start="155:9" pos:end="155:35"><name pos:start="155:9" pos:end="155:11">vps</name><operator pos:start="155:12" pos:end="155:13">-&gt;</operator><name pos:start="155:14" pos:end="155:35">vps_num_hrd_parameters</name></name> <operator pos:start="155:37" pos:end="155:37">=</operator> <call pos:start="155:39" pos:end="155:60"><name pos:start="155:39" pos:end="155:56">get_ue_golomb_long</name><argument_list pos:start="155:57" pos:end="155:60">(<argument pos:start="155:58" pos:end="155:59"><expr pos:start="155:58" pos:end="155:59"><name pos:start="155:58" pos:end="155:59">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="157:9" pos:end="171:9">for <control pos:start="157:13" pos:end="157:57">(<init pos:start="157:14" pos:end="157:19"><expr pos:start="157:14" pos:end="157:18"><name pos:start="157:14" pos:end="157:14">i</name> <operator pos:start="157:16" pos:end="157:16">=</operator> <literal type="number" pos:start="157:18" pos:end="157:18">0</literal></expr>;</init> <condition pos:start="157:21" pos:end="157:52"><expr pos:start="157:21" pos:end="157:51"><name pos:start="157:21" pos:end="157:21">i</name> <operator pos:start="157:23" pos:end="157:23">&lt;</operator> <name pos:start="157:25" pos:end="157:51"><name pos:start="157:25" pos:end="157:27">vps</name><operator pos:start="157:28" pos:end="157:29">-&gt;</operator><name pos:start="157:30" pos:end="157:51">vps_num_hrd_parameters</name></name></expr>;</condition> <incr pos:start="157:54" pos:end="157:56"><expr pos:start="157:54" pos:end="157:56"><name pos:start="157:54" pos:end="157:54">i</name><operator pos:start="157:55" pos:end="157:56">++</operator></expr></incr>)</control> <block pos:start="157:59" pos:end="171:9">{<block_content pos:start="159:13" pos:end="169:71">

            <decl_stmt pos:start="159:13" pos:end="159:39"><decl pos:start="159:13" pos:end="159:38"><type pos:start="159:13" pos:end="159:15"><name pos:start="159:13" pos:end="159:15">int</name></type> <name pos:start="159:17" pos:end="159:34">common_inf_present</name> <init pos:start="159:36" pos:end="159:38">= <expr pos:start="159:38" pos:end="159:38"><literal type="number" pos:start="159:38" pos:end="159:38">1</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="163:13" pos:end="163:35"><expr pos:start="163:13" pos:end="163:34"><call pos:start="163:13" pos:end="163:34"><name pos:start="163:13" pos:end="163:30">get_ue_golomb_long</name><argument_list pos:start="163:31" pos:end="163:34">(<argument pos:start="163:32" pos:end="163:33"><expr pos:start="163:32" pos:end="163:33"><name pos:start="163:32" pos:end="163:33">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="163:37" pos:end="163:56">// hrd_layer_set_idx</comment>

            <if_stmt pos:start="165:13" pos:end="167:51"><if pos:start="165:13" pos:end="167:51">if <condition pos:start="165:16" pos:end="165:18">(<expr pos:start="165:17" pos:end="165:17"><name pos:start="165:17" pos:end="165:17">i</name></expr>)</condition><block type="pseudo" pos:start="167:17" pos:end="167:51"><block_content pos:start="167:17" pos:end="167:51">

                <expr_stmt pos:start="167:17" pos:end="167:51"><expr pos:start="167:17" pos:end="167:50"><name pos:start="167:17" pos:end="167:34">common_inf_present</name> <operator pos:start="167:36" pos:end="167:36">=</operator> <call pos:start="167:38" pos:end="167:50"><name pos:start="167:38" pos:end="167:46">get_bits1</name><argument_list pos:start="167:47" pos:end="167:50">(<argument pos:start="167:48" pos:end="167:49"><expr pos:start="167:48" pos:end="167:49"><name pos:start="167:48" pos:end="167:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:71"><expr pos:start="169:13" pos:end="169:70"><call pos:start="169:13" pos:end="169:70"><name pos:start="169:13" pos:end="169:22">decode_hrd</name><argument_list pos:start="169:23" pos:end="169:70">(<argument pos:start="169:24" pos:end="169:24"><expr pos:start="169:24" pos:end="169:24"><name pos:start="169:24" pos:end="169:24">s</name></expr></argument>, <argument pos:start="169:27" pos:end="169:44"><expr pos:start="169:27" pos:end="169:44"><name pos:start="169:27" pos:end="169:44">common_inf_present</name></expr></argument>, <argument pos:start="169:47" pos:end="169:69"><expr pos:start="169:47" pos:end="169:69"><name pos:start="169:47" pos:end="169:69"><name pos:start="169:47" pos:end="169:49">vps</name><operator pos:start="169:50" pos:end="169:51">-&gt;</operator><name pos:start="169:52" pos:end="169:69">vps_max_sub_layers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:18"><expr pos:start="175:5" pos:end="175:17"><call pos:start="175:5" pos:end="175:17"><name pos:start="175:5" pos:end="175:13">get_bits1</name><argument_list pos:start="175:14" pos:end="175:17">(<argument pos:start="175:15" pos:end="175:16"><expr pos:start="175:15" pos:end="175:16"><name pos:start="175:15" pos:end="175:16">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="175:20" pos:end="175:43">/* vps_extension_flag */</comment>



    <expr_stmt pos:start="179:5" pos:end="179:42"><expr pos:start="179:5" pos:end="179:41"><call pos:start="179:5" pos:end="179:41"><name pos:start="179:5" pos:end="179:19">av_buffer_unref</name><argument_list pos:start="179:20" pos:end="179:41">(<argument pos:start="179:21" pos:end="179:40"><expr pos:start="179:21" pos:end="179:40"><operator pos:start="179:21" pos:end="179:21">&amp;</operator><name pos:start="179:22" pos:end="179:40"><name pos:start="179:22" pos:end="179:22">s</name><operator pos:start="179:23" pos:end="179:24">-&gt;</operator><name pos:start="179:25" pos:end="179:32">vps_list</name><index pos:start="179:33" pos:end="179:40">[<expr pos:start="179:34" pos:end="179:39"><name pos:start="179:34" pos:end="179:39">vps_id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:34"><expr pos:start="181:5" pos:end="181:33"><name pos:start="181:5" pos:end="181:23"><name pos:start="181:5" pos:end="181:5">s</name><operator pos:start="181:6" pos:end="181:7">-&gt;</operator><name pos:start="181:8" pos:end="181:15">vps_list</name><index pos:start="181:16" pos:end="181:23">[<expr pos:start="181:17" pos:end="181:22"><name pos:start="181:17" pos:end="181:22">vps_id</name></expr>]</index></name> <operator pos:start="181:25" pos:end="181:25">=</operator> <name pos:start="181:27" pos:end="181:33">vps_buf</name></expr>;</expr_stmt>

    <return pos:start="183:5" pos:end="183:13">return <expr pos:start="183:12" pos:end="183:12"><literal type="number" pos:start="183:12" pos:end="183:12">0</literal></expr>;</return>



<label pos:start="187:1" pos:end="187:4"><name pos:start="187:1" pos:end="187:3">err</name>:</label>

    <expr_stmt pos:start="189:5" pos:end="189:30"><expr pos:start="189:5" pos:end="189:29"><call pos:start="189:5" pos:end="189:29"><name pos:start="189:5" pos:end="189:19">av_buffer_unref</name><argument_list pos:start="189:20" pos:end="189:29">(<argument pos:start="189:21" pos:end="189:28"><expr pos:start="189:21" pos:end="189:28"><operator pos:start="189:21" pos:end="189:21">&amp;</operator><name pos:start="189:22" pos:end="189:28">vps_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="191:5" pos:end="191:31">return <expr pos:start="191:12" pos:end="191:30"><name pos:start="191:12" pos:end="191:30">AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></function>
</unit>
