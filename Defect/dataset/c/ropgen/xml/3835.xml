<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3835.c" pos:tabs="8"><function pos:start="1:1" pos:end="43:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint32_t</name></type> <name pos:start="1:17" pos:end="1:35">arm_v7m_load_vector</name><parameter_list pos:start="1:36" pos:end="1:48">(<parameter pos:start="1:37" pos:end="1:47"><decl pos:start="1:37" pos:end="1:47"><type pos:start="1:37" pos:end="1:44"><name pos:start="1:37" pos:end="1:42">ARMCPU</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="43:1">{<block_content pos:start="5:5" pos:end="41:16">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">cs</name> <init pos:start="5:18" pos:end="5:27">= <expr pos:start="5:20" pos:end="5:27"><call pos:start="5:20" pos:end="5:27"><name pos:start="5:20" pos:end="5:22">CPU</name><argument_list pos:start="5:23" pos:end="5:27">(<argument pos:start="5:24" pos:end="5:26"><expr pos:start="5:24" pos:end="5:26"><name pos:start="5:24" pos:end="5:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">CPUARMState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">env</name> <init pos:start="7:22" pos:end="7:32">= <expr pos:start="7:24" pos:end="7:32"><operator pos:start="7:24" pos:end="7:24">&amp;</operator><name pos:start="7:25" pos:end="7:32"><name pos:start="7:25" pos:end="7:27">cpu</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:15">MemTxResult</name></type> <name pos:start="9:17" pos:end="9:22">result</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:59"><decl pos:start="11:5" pos:end="11:58"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">hwaddr</name></type> <name pos:start="11:12" pos:end="11:14">vec</name> <init pos:start="11:16" pos:end="11:58">= <expr pos:start="11:18" pos:end="11:58"><name pos:start="11:18" pos:end="11:33"><name pos:start="11:18" pos:end="11:20">env</name><operator pos:start="11:21" pos:end="11:22">-&gt;</operator><name pos:start="11:23" pos:end="11:25">v7m</name><operator pos:start="11:26" pos:end="11:26">.</operator><name pos:start="11:27" pos:end="11:33">vecbase</name></name> <operator pos:start="11:35" pos:end="11:35">+</operator> <name pos:start="11:37" pos:end="11:54"><name pos:start="11:37" pos:end="11:39">env</name><operator pos:start="11:40" pos:end="11:41">-&gt;</operator><name pos:start="11:42" pos:end="11:44">v7m</name><operator pos:start="11:45" pos:end="11:45">.</operator><name pos:start="11:46" pos:end="11:54">exception</name></name> <operator pos:start="11:56" pos:end="11:56">*</operator> <literal type="number" pos:start="11:58" pos:end="11:58">4</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:17">addr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="19:62"><expr pos:start="17:5" pos:end="19:61"><name pos:start="17:5" pos:end="17:8">addr</name> <operator pos:start="17:10" pos:end="17:10">=</operator> <call pos:start="17:12" pos:end="19:61"><name pos:start="17:12" pos:end="17:28">address_space_ldl</name><argument_list pos:start="17:29" pos:end="19:61">(<argument pos:start="17:30" pos:end="17:35"><expr pos:start="17:30" pos:end="17:35"><name pos:start="17:30" pos:end="17:35"><name pos:start="17:30" pos:end="17:31">cs</name><operator pos:start="17:32" pos:end="17:33">-&gt;</operator><name pos:start="17:34" pos:end="17:35">as</name></name></expr></argument>, <argument pos:start="17:38" pos:end="17:40"><expr pos:start="17:38" pos:end="17:40"><name pos:start="17:38" pos:end="17:40">vec</name></expr></argument>,

                             <argument pos:start="19:30" pos:end="19:51"><expr pos:start="19:30" pos:end="19:51"><name pos:start="19:30" pos:end="19:51">MEMTXATTRS_UNSPECIFIED</name></expr></argument>, <argument pos:start="19:54" pos:end="19:60"><expr pos:start="19:54" pos:end="19:60"><operator pos:start="19:54" pos:end="19:54">&amp;</operator><name pos:start="19:55" pos:end="19:60">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="39:5"><if pos:start="21:5" pos:end="39:5">if <condition pos:start="21:8" pos:end="21:27">(<expr pos:start="21:9" pos:end="21:26"><name pos:start="21:9" pos:end="21:14">result</name> <operator pos:start="21:16" pos:end="21:17">!=</operator> <name pos:start="21:19" pos:end="21:26">MEMTX_OK</name></expr>)</condition> <block pos:start="21:29" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:49">

        <comment type="block" pos:start="23:9" pos:end="33:11">/* Architecturally this should cause a HardFault setting HSFR.VECTTBL,

         * which would then be immediately followed by our failing to load

         * the entry vector for that HardFault, which is a Lockup case.

         * Since we don't model Lockup, we just report this guest error

         * via cpu_abort().

         */</comment>

        <expr_stmt pos:start="35:9" pos:end="37:49"><expr pos:start="35:9" pos:end="37:48"><call pos:start="35:9" pos:end="37:48"><name pos:start="35:9" pos:end="35:17">cpu_abort</name><argument_list pos:start="35:18" pos:end="37:48">(<argument pos:start="35:19" pos:end="35:20"><expr pos:start="35:19" pos:end="35:20"><name pos:start="35:19" pos:end="35:20">cs</name></expr></argument>, <argument pos:start="35:23" pos:end="37:32"><expr pos:start="35:23" pos:end="37:32"><literal type="string" pos:start="35:23" pos:end="35:67">"Failed to read from exception vector table "</literal>

                  <literal type="string" pos:start="37:19" pos:end="37:32">"entry %08x\n"</literal></expr></argument>, <argument pos:start="37:35" pos:end="37:47"><expr pos:start="37:35" pos:end="37:47"><operator pos:start="37:35" pos:end="37:35">(</operator><name pos:start="37:36" pos:end="37:43">unsigned</name><operator pos:start="37:44" pos:end="37:44">)</operator><name pos:start="37:45" pos:end="37:47">vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="41:5" pos:end="41:16">return <expr pos:start="41:12" pos:end="41:15"><name pos:start="41:12" pos:end="41:15">addr</name></expr>;</return>

</block_content>}</block></function>
</unit>
