<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23081.c" pos:tabs="8"><function pos:start="1:1" pos:end="439:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:39">helper_ret_protected</name><parameter_list pos:start="1:40" pos:end="3:64">(<parameter pos:start="1:41" pos:end="1:56"><decl pos:start="1:41" pos:end="1:56"><type pos:start="1:41" pos:end="1:56"><name pos:start="1:41" pos:end="1:51">CPUX86State</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">env</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:67"><decl pos:start="1:59" pos:end="1:67"><type pos:start="1:59" pos:end="1:67"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:67">shift</name></decl></parameter>,

                                        <parameter pos:start="3:41" pos:end="3:51"><decl pos:start="3:41" pos:end="3:51"><type pos:start="3:41" pos:end="3:51"><name pos:start="3:41" pos:end="3:43">int</name></type> <name pos:start="3:45" pos:end="3:51">is_iret</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:63"><decl pos:start="3:54" pos:end="3:63"><type pos:start="3:54" pos:end="3:63"><name pos:start="3:54" pos:end="3:56">int</name></type> <name pos:start="3:58" pos:end="3:63">addend</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="439:1">{<block_content pos:start="7:5" pos:end="437:31">

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:19">new_cs</name></decl>, <decl pos:start="7:22" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:22" pos:end="7:31">new_eflags</name></decl>, <decl pos:start="7:34" pos:end="7:39"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:34" pos:end="7:39">new_ss</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:44"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:19">new_es</name></decl>, <decl pos:start="9:22" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:22" pos:end="9:27">new_ds</name></decl>, <decl pos:start="9:30" pos:end="9:35"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:30" pos:end="9:35">new_fs</name></decl>, <decl pos:start="9:38" pos:end="9:43"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:38" pos:end="9:43">new_gs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:15">e1</name></decl>, <decl pos:start="11:18" pos:end="11:19"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:18" pos:end="11:19">e2</name></decl>, <decl pos:start="11:22" pos:end="11:26"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:22" pos:end="11:26">ss_e1</name></decl>, <decl pos:start="11:29" pos:end="11:33"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:29" pos:end="11:33">ss_e2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:41"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">cpl</name></decl>, <decl pos:start="13:14" pos:end="13:16"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:14" pos:end="13:16">dpl</name></decl>, <decl pos:start="13:19" pos:end="13:21"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:19" pos:end="13:21">rpl</name></decl>, <decl pos:start="13:24" pos:end="13:34"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:24" pos:end="13:34">eflags_mask</name></decl>, <decl pos:start="13:37" pos:end="13:40"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:37" pos:end="13:40">iopl</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="20:0"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16">target_ulong</name></type> <name pos:start="15:18" pos:end="15:20">ssp</name></decl>, <decl pos:start="15:23" pos:end="15:24"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:23" pos:end="15:24">sp</name></decl>, <decl pos:start="15:27" pos:end="15:33"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:27" pos:end="15:33">new_eip</name></decl>, <decl pos:start="15:36" pos:end="15:42"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:36" pos:end="15:42">new_esp</name></decl>, <decl pos:start="15:45" pos:end="15:51"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:45" pos:end="15:51">sp_mask</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="19:1" pos:end="19:20">#<cpp:directive pos:start="19:2" pos:end="19:6">ifdef</cpp:directive> <name pos:start="19:8" pos:end="19:20">TARGET_X86_64</name></cpp:ifdef>

    <if_stmt pos:start="21:5" pos:end="33:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:19">(<expr pos:start="21:9" pos:end="21:18"><name pos:start="21:9" pos:end="21:13">shift</name> <operator pos:start="21:15" pos:end="21:16">==</operator> <literal type="number" pos:start="21:18" pos:end="21:18">2</literal></expr>)</condition> <block pos:start="21:21" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:21">

        <expr_stmt pos:start="23:9" pos:end="23:21"><expr pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:15">sp_mask</name> <operator pos:start="23:17" pos:end="23:17">=</operator> <operator pos:start="23:19" pos:end="23:19">-</operator><literal type="number" pos:start="23:20" pos:end="23:20">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="25:7" pos:end="33:5">else

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>

    <block pos:start="29:5" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:53">

        <expr_stmt pos:start="31:9" pos:end="31:53"><expr pos:start="31:9" pos:end="31:52"><name pos:start="31:9" pos:end="31:15">sp_mask</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <call pos:start="31:19" pos:end="31:52"><name pos:start="31:19" pos:end="31:29">get_sp_mask</name><argument_list pos:start="31:30" pos:end="31:52">(<argument pos:start="31:31" pos:end="31:51"><expr pos:start="31:31" pos:end="31:51"><name pos:start="31:31" pos:end="31:45"><name pos:start="31:31" pos:end="31:33">env</name><operator pos:start="31:34" pos:end="31:35">-&gt;</operator><name pos:start="31:36" pos:end="31:39">segs</name><index pos:start="31:40" pos:end="31:45">[<expr pos:start="31:41" pos:end="31:44"><name pos:start="31:41" pos:end="31:44">R_SS</name></expr>]</index></name><operator pos:start="31:46" pos:end="31:46">.</operator><name pos:start="31:47" pos:end="31:51">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:26"><expr pos:start="35:5" pos:end="35:25"><name pos:start="35:5" pos:end="35:6">sp</name> <operator pos:start="35:8" pos:end="35:8">=</operator> <name pos:start="35:10" pos:end="35:25"><name pos:start="35:10" pos:end="35:12">env</name><operator pos:start="35:13" pos:end="35:14">-&gt;</operator><name pos:start="35:15" pos:end="35:18">regs</name><index pos:start="35:19" pos:end="35:25">[<expr pos:start="35:20" pos:end="35:24"><name pos:start="35:20" pos:end="35:24">R_ESP</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:31"><expr pos:start="37:5" pos:end="37:30"><name pos:start="37:5" pos:end="37:7">ssp</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <name pos:start="37:11" pos:end="37:25"><name pos:start="37:11" pos:end="37:13">env</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:19">segs</name><index pos:start="37:20" pos:end="37:25">[<expr pos:start="37:21" pos:end="37:24"><name pos:start="37:21" pos:end="37:24">R_SS</name></expr>]</index></name><operator pos:start="37:26" pos:end="37:26">.</operator><name pos:start="37:27" pos:end="37:30">base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="42:0"><expr pos:start="39:5" pos:end="39:18"><name pos:start="39:5" pos:end="39:14">new_eflags</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <literal type="number" pos:start="39:18" pos:end="39:18">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="39:21" pos:end="39:39">/* avoid warning */</comment>

<cpp:ifdef pos:start="41:1" pos:end="41:20">#<cpp:directive pos:start="41:2" pos:end="41:6">ifdef</cpp:directive> <name pos:start="41:8" pos:end="41:20">TARGET_X86_64</name></cpp:ifdef>

    <if_stmt pos:start="43:5" pos:end="101:5"><if pos:start="43:5" pos:end="57:5">if <condition pos:start="43:8" pos:end="43:19">(<expr pos:start="43:9" pos:end="43:18"><name pos:start="43:9" pos:end="43:13">shift</name> <operator pos:start="43:15" pos:end="43:16">==</operator> <literal type="number" pos:start="43:18" pos:end="43:18">2</literal></expr>)</condition> <block pos:start="43:21" pos:end="57:5">{<block_content pos:start="45:9" pos:end="55:9">

        <expr_stmt pos:start="45:9" pos:end="45:26"><expr pos:start="45:9" pos:end="45:25"><call pos:start="45:9" pos:end="45:25"><name pos:start="45:9" pos:end="45:12">POPQ</name><argument_list pos:start="45:13" pos:end="45:25">(<argument pos:start="45:14" pos:end="45:15"><expr pos:start="45:14" pos:end="45:15"><name pos:start="45:14" pos:end="45:15">sp</name></expr></argument>, <argument pos:start="45:18" pos:end="45:24"><expr pos:start="45:18" pos:end="45:24"><name pos:start="45:18" pos:end="45:24">new_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:25"><expr pos:start="47:9" pos:end="47:24"><call pos:start="47:9" pos:end="47:24"><name pos:start="47:9" pos:end="47:12">POPQ</name><argument_list pos:start="47:13" pos:end="47:24">(<argument pos:start="47:14" pos:end="47:15"><expr pos:start="47:14" pos:end="47:15"><name pos:start="47:14" pos:end="47:15">sp</name></expr></argument>, <argument pos:start="47:18" pos:end="47:23"><expr pos:start="47:18" pos:end="47:23"><name pos:start="47:18" pos:end="47:23">new_cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:25"><expr pos:start="49:9" pos:end="49:24"><name pos:start="49:9" pos:end="49:14">new_cs</name> <operator pos:start="49:16" pos:end="49:17">&amp;=</operator> <literal type="number" pos:start="49:19" pos:end="49:24">0xffff</literal></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:20">(<expr pos:start="51:13" pos:end="51:19"><name pos:start="51:13" pos:end="51:19">is_iret</name></expr>)</condition> <block pos:start="51:22" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:33">

            <expr_stmt pos:start="53:13" pos:end="53:33"><expr pos:start="53:13" pos:end="53:32"><call pos:start="53:13" pos:end="53:32"><name pos:start="53:13" pos:end="53:16">POPQ</name><argument_list pos:start="53:17" pos:end="53:32">(<argument pos:start="53:18" pos:end="53:19"><expr pos:start="53:18" pos:end="53:19"><name pos:start="53:18" pos:end="53:19">sp</name></expr></argument>, <argument pos:start="53:22" pos:end="53:31"><expr pos:start="53:22" pos:end="53:31"><name pos:start="53:22" pos:end="53:31">new_eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="57:7" pos:end="101:5">else

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>

    <block pos:start="61:5" pos:end="101:5">{<block_content pos:start="63:9" pos:end="99:9">

        <if_stmt pos:start="63:9" pos:end="99:9"><if pos:start="63:9" pos:end="85:9">if <condition pos:start="63:12" pos:end="63:23">(<expr pos:start="63:13" pos:end="63:22"><name pos:start="63:13" pos:end="63:17">shift</name> <operator pos:start="63:19" pos:end="63:20">==</operator> <literal type="number" pos:start="63:22" pos:end="63:22">1</literal></expr>)</condition> <block pos:start="63:25" pos:end="85:9">{<block_content pos:start="67:13" pos:end="83:13">

            <comment type="block" pos:start="65:13" pos:end="65:25">/* 32 bits */</comment>

            <expr_stmt pos:start="67:13" pos:end="67:44"><expr pos:start="67:13" pos:end="67:43"><call pos:start="67:13" pos:end="67:43"><name pos:start="67:13" pos:end="67:16">POPL</name><argument_list pos:start="67:17" pos:end="67:43">(<argument pos:start="67:18" pos:end="67:20"><expr pos:start="67:18" pos:end="67:20"><name pos:start="67:18" pos:end="67:20">ssp</name></expr></argument>, <argument pos:start="67:23" pos:end="67:24"><expr pos:start="67:23" pos:end="67:24"><name pos:start="67:23" pos:end="67:24">sp</name></expr></argument>, <argument pos:start="67:27" pos:end="67:33"><expr pos:start="67:27" pos:end="67:33"><name pos:start="67:27" pos:end="67:33">sp_mask</name></expr></argument>, <argument pos:start="67:36" pos:end="67:42"><expr pos:start="67:36" pos:end="67:42"><name pos:start="67:36" pos:end="67:42">new_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:43"><expr pos:start="69:13" pos:end="69:42"><call pos:start="69:13" pos:end="69:42"><name pos:start="69:13" pos:end="69:16">POPL</name><argument_list pos:start="69:17" pos:end="69:42">(<argument pos:start="69:18" pos:end="69:20"><expr pos:start="69:18" pos:end="69:20"><name pos:start="69:18" pos:end="69:20">ssp</name></expr></argument>, <argument pos:start="69:23" pos:end="69:24"><expr pos:start="69:23" pos:end="69:24"><name pos:start="69:23" pos:end="69:24">sp</name></expr></argument>, <argument pos:start="69:27" pos:end="69:33"><expr pos:start="69:27" pos:end="69:33"><name pos:start="69:27" pos:end="69:33">sp_mask</name></expr></argument>, <argument pos:start="69:36" pos:end="69:41"><expr pos:start="69:36" pos:end="69:41"><name pos:start="69:36" pos:end="69:41">new_cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:29"><expr pos:start="71:13" pos:end="71:28"><name pos:start="71:13" pos:end="71:18">new_cs</name> <operator pos:start="71:20" pos:end="71:21">&amp;=</operator> <literal type="number" pos:start="71:23" pos:end="71:28">0xffff</literal></expr>;</expr_stmt>

            <if_stmt pos:start="73:13" pos:end="83:13"><if pos:start="73:13" pos:end="83:13">if <condition pos:start="73:16" pos:end="73:24">(<expr pos:start="73:17" pos:end="73:23"><name pos:start="73:17" pos:end="73:23">is_iret</name></expr>)</condition> <block pos:start="73:26" pos:end="83:13">{<block_content pos:start="75:17" pos:end="81:17">

                <expr_stmt pos:start="75:17" pos:end="75:51"><expr pos:start="75:17" pos:end="75:50"><call pos:start="75:17" pos:end="75:50"><name pos:start="75:17" pos:end="75:20">POPL</name><argument_list pos:start="75:21" pos:end="75:50">(<argument pos:start="75:22" pos:end="75:24"><expr pos:start="75:22" pos:end="75:24"><name pos:start="75:22" pos:end="75:24">ssp</name></expr></argument>, <argument pos:start="75:27" pos:end="75:28"><expr pos:start="75:27" pos:end="75:28"><name pos:start="75:27" pos:end="75:28">sp</name></expr></argument>, <argument pos:start="75:31" pos:end="75:37"><expr pos:start="75:31" pos:end="75:37"><name pos:start="75:31" pos:end="75:37">sp_mask</name></expr></argument>, <argument pos:start="75:40" pos:end="75:49"><expr pos:start="75:40" pos:end="75:49"><name pos:start="75:40" pos:end="75:49">new_eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="77:17" pos:end="81:17"><if pos:start="77:17" pos:end="81:17">if <condition pos:start="77:20" pos:end="77:41">(<expr pos:start="77:21" pos:end="77:40"><name pos:start="77:21" pos:end="77:30">new_eflags</name> <operator pos:start="77:32" pos:end="77:32">&amp;</operator> <name pos:start="77:34" pos:end="77:40">VM_MASK</name></expr>)</condition> <block pos:start="77:43" pos:end="81:17">{<block_content pos:start="79:21" pos:end="79:40">

                    <goto pos:start="79:21" pos:end="79:40">goto <name pos:start="79:26" pos:end="79:39">return_to_vm86</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="85:11" pos:end="99:9">else <block pos:start="85:16" pos:end="99:9">{<block_content pos:start="89:13" pos:end="97:13">

            <comment type="block" pos:start="87:13" pos:end="87:25">/* 16 bits */</comment>

            <expr_stmt pos:start="89:13" pos:end="89:44"><expr pos:start="89:13" pos:end="89:43"><call pos:start="89:13" pos:end="89:43"><name pos:start="89:13" pos:end="89:16">POPW</name><argument_list pos:start="89:17" pos:end="89:43">(<argument pos:start="89:18" pos:end="89:20"><expr pos:start="89:18" pos:end="89:20"><name pos:start="89:18" pos:end="89:20">ssp</name></expr></argument>, <argument pos:start="89:23" pos:end="89:24"><expr pos:start="89:23" pos:end="89:24"><name pos:start="89:23" pos:end="89:24">sp</name></expr></argument>, <argument pos:start="89:27" pos:end="89:33"><expr pos:start="89:27" pos:end="89:33"><name pos:start="89:27" pos:end="89:33">sp_mask</name></expr></argument>, <argument pos:start="89:36" pos:end="89:42"><expr pos:start="89:36" pos:end="89:42"><name pos:start="89:36" pos:end="89:42">new_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:43"><expr pos:start="91:13" pos:end="91:42"><call pos:start="91:13" pos:end="91:42"><name pos:start="91:13" pos:end="91:16">POPW</name><argument_list pos:start="91:17" pos:end="91:42">(<argument pos:start="91:18" pos:end="91:20"><expr pos:start="91:18" pos:end="91:20"><name pos:start="91:18" pos:end="91:20">ssp</name></expr></argument>, <argument pos:start="91:23" pos:end="91:24"><expr pos:start="91:23" pos:end="91:24"><name pos:start="91:23" pos:end="91:24">sp</name></expr></argument>, <argument pos:start="91:27" pos:end="91:33"><expr pos:start="91:27" pos:end="91:33"><name pos:start="91:27" pos:end="91:33">sp_mask</name></expr></argument>, <argument pos:start="91:36" pos:end="91:41"><expr pos:start="91:36" pos:end="91:41"><name pos:start="91:36" pos:end="91:41">new_cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="93:13" pos:end="97:13"><if pos:start="93:13" pos:end="97:13">if <condition pos:start="93:16" pos:end="93:24">(<expr pos:start="93:17" pos:end="93:23"><name pos:start="93:17" pos:end="93:23">is_iret</name></expr>)</condition> <block pos:start="93:26" pos:end="97:13">{<block_content pos:start="95:17" pos:end="95:51">

                <expr_stmt pos:start="95:17" pos:end="95:51"><expr pos:start="95:17" pos:end="95:50"><call pos:start="95:17" pos:end="95:50"><name pos:start="95:17" pos:end="95:20">POPW</name><argument_list pos:start="95:21" pos:end="95:50">(<argument pos:start="95:22" pos:end="95:24"><expr pos:start="95:22" pos:end="95:24"><name pos:start="95:22" pos:end="95:24">ssp</name></expr></argument>, <argument pos:start="95:27" pos:end="95:28"><expr pos:start="95:27" pos:end="95:28"><name pos:start="95:27" pos:end="95:28">sp</name></expr></argument>, <argument pos:start="95:31" pos:end="95:37"><expr pos:start="95:31" pos:end="95:37"><name pos:start="95:31" pos:end="95:37">sp_mask</name></expr></argument>, <argument pos:start="95:40" pos:end="95:49"><expr pos:start="95:40" pos:end="95:49"><name pos:start="95:40" pos:end="95:49">new_eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="103:5" pos:end="105:46"><expr pos:start="103:5" pos:end="105:45"><call pos:start="103:5" pos:end="105:45"><name pos:start="103:5" pos:end="103:13">LOG_PCALL</name><argument_list pos:start="103:14" pos:end="105:45">(<argument pos:start="103:15" pos:end="103:66"><expr pos:start="103:15" pos:end="103:66"><literal type="string" pos:start="103:15" pos:end="103:30">"lret new %04x:"</literal> <name pos:start="103:32" pos:end="103:44">TARGET_FMT_lx</name> <literal type="string" pos:start="103:46" pos:end="103:66">" s=%d addend=0x%x\n"</literal></expr></argument>,

              <argument pos:start="105:15" pos:end="105:20"><expr pos:start="105:15" pos:end="105:20"><name pos:start="105:15" pos:end="105:20">new_cs</name></expr></argument>, <argument pos:start="105:23" pos:end="105:29"><expr pos:start="105:23" pos:end="105:29"><name pos:start="105:23" pos:end="105:29">new_eip</name></expr></argument>, <argument pos:start="105:32" pos:end="105:36"><expr pos:start="105:32" pos:end="105:36"><name pos:start="105:32" pos:end="105:36">shift</name></expr></argument>, <argument pos:start="105:39" pos:end="105:44"><expr pos:start="105:39" pos:end="105:44"><name pos:start="105:39" pos:end="105:44">addend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:47"><expr pos:start="107:5" pos:end="107:46"><call pos:start="107:5" pos:end="107:46"><name pos:start="107:5" pos:end="107:19">LOG_PCALL_STATE</name><argument_list pos:start="107:20" pos:end="107:46">(<argument pos:start="107:21" pos:end="107:45"><expr pos:start="107:21" pos:end="107:45"><call pos:start="107:21" pos:end="107:45"><name pos:start="107:21" pos:end="107:23">CPU</name><argument_list pos:start="107:24" pos:end="107:45">(<argument pos:start="107:25" pos:end="107:44"><expr pos:start="107:25" pos:end="107:44"><call pos:start="107:25" pos:end="107:44"><name pos:start="107:25" pos:end="107:39">x86_env_get_cpu</name><argument_list pos:start="107:40" pos:end="107:44">(<argument pos:start="107:41" pos:end="107:43"><expr pos:start="107:41" pos:end="107:43"><name pos:start="107:41" pos:end="107:43">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="113:5"><if pos:start="109:5" pos:end="113:5">if <condition pos:start="109:8" pos:end="109:31">(<expr pos:start="109:9" pos:end="109:30"><operator pos:start="109:9" pos:end="109:9">(</operator><name pos:start="109:10" pos:end="109:15">new_cs</name> <operator pos:start="109:17" pos:end="109:17">&amp;</operator> <literal type="number" pos:start="109:19" pos:end="109:24">0xfffc</literal><operator pos:start="109:25" pos:end="109:25">)</operator> <operator pos:start="109:27" pos:end="109:28">==</operator> <literal type="number" pos:start="109:30" pos:end="109:30">0</literal></expr>)</condition> <block pos:start="109:33" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:62">

        <expr_stmt pos:start="111:9" pos:end="111:62"><expr pos:start="111:9" pos:end="111:61"><call pos:start="111:9" pos:end="111:61"><name pos:start="111:9" pos:end="111:27">raise_exception_err</name><argument_list pos:start="111:28" pos:end="111:61">(<argument pos:start="111:29" pos:end="111:31"><expr pos:start="111:29" pos:end="111:31"><name pos:start="111:29" pos:end="111:31">env</name></expr></argument>, <argument pos:start="111:34" pos:end="111:43"><expr pos:start="111:34" pos:end="111:43"><name pos:start="111:34" pos:end="111:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="111:46" pos:end="111:60"><expr pos:start="111:46" pos:end="111:60"><name pos:start="111:46" pos:end="111:51">new_cs</name> <operator pos:start="111:53" pos:end="111:53">&amp;</operator> <literal type="number" pos:start="111:55" pos:end="111:60">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="115:5" pos:end="119:5"><if pos:start="115:5" pos:end="119:5">if <condition pos:start="115:8" pos:end="115:49">(<expr pos:start="115:9" pos:end="115:48"><call pos:start="115:9" pos:end="115:43"><name pos:start="115:9" pos:end="115:20">load_segment</name><argument_list pos:start="115:21" pos:end="115:43">(<argument pos:start="115:22" pos:end="115:24"><expr pos:start="115:22" pos:end="115:24"><name pos:start="115:22" pos:end="115:24">env</name></expr></argument>, <argument pos:start="115:27" pos:end="115:29"><expr pos:start="115:27" pos:end="115:29"><operator pos:start="115:27" pos:end="115:27">&amp;</operator><name pos:start="115:28" pos:end="115:29">e1</name></expr></argument>, <argument pos:start="115:32" pos:end="115:34"><expr pos:start="115:32" pos:end="115:34"><operator pos:start="115:32" pos:end="115:32">&amp;</operator><name pos:start="115:33" pos:end="115:34">e2</name></expr></argument>, <argument pos:start="115:37" pos:end="115:42"><expr pos:start="115:37" pos:end="115:42"><name pos:start="115:37" pos:end="115:42">new_cs</name></expr></argument>)</argument_list></call> <operator pos:start="115:45" pos:end="115:46">!=</operator> <literal type="number" pos:start="115:48" pos:end="115:48">0</literal></expr>)</condition> <block pos:start="115:51" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:62">

        <expr_stmt pos:start="117:9" pos:end="117:62"><expr pos:start="117:9" pos:end="117:61"><call pos:start="117:9" pos:end="117:61"><name pos:start="117:9" pos:end="117:27">raise_exception_err</name><argument_list pos:start="117:28" pos:end="117:61">(<argument pos:start="117:29" pos:end="117:31"><expr pos:start="117:29" pos:end="117:31"><name pos:start="117:29" pos:end="117:31">env</name></expr></argument>, <argument pos:start="117:34" pos:end="117:43"><expr pos:start="117:34" pos:end="117:43"><name pos:start="117:34" pos:end="117:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="117:46" pos:end="117:60"><expr pos:start="117:46" pos:end="117:60"><name pos:start="117:46" pos:end="117:51">new_cs</name> <operator pos:start="117:53" pos:end="117:53">&amp;</operator> <literal type="number" pos:start="117:55" pos:end="117:60">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="121:5" pos:end="127:5"><if pos:start="121:5" pos:end="127:5">if <condition pos:start="121:8" pos:end="123:29">(<expr pos:start="121:9" pos:end="123:28"><operator pos:start="121:9" pos:end="121:9">!</operator><operator pos:start="121:10" pos:end="121:10">(</operator><name pos:start="121:11" pos:end="121:12">e2</name> <operator pos:start="121:14" pos:end="121:14">&amp;</operator> <name pos:start="121:16" pos:end="121:26">DESC_S_MASK</name><operator pos:start="121:27" pos:end="121:27">)</operator> <operator pos:start="121:29" pos:end="121:30">||</operator>

        <operator pos:start="123:9" pos:end="123:9">!</operator><operator pos:start="123:10" pos:end="123:10">(</operator><name pos:start="123:11" pos:end="123:12">e2</name> <operator pos:start="123:14" pos:end="123:14">&amp;</operator> <name pos:start="123:16" pos:end="123:27">DESC_CS_MASK</name><operator pos:start="123:28" pos:end="123:28">)</operator></expr>)</condition> <block pos:start="123:31" pos:end="127:5">{<block_content pos:start="125:9" pos:end="125:62">

        <expr_stmt pos:start="125:9" pos:end="125:62"><expr pos:start="125:9" pos:end="125:61"><call pos:start="125:9" pos:end="125:61"><name pos:start="125:9" pos:end="125:27">raise_exception_err</name><argument_list pos:start="125:28" pos:end="125:61">(<argument pos:start="125:29" pos:end="125:31"><expr pos:start="125:29" pos:end="125:31"><name pos:start="125:29" pos:end="125:31">env</name></expr></argument>, <argument pos:start="125:34" pos:end="125:43"><expr pos:start="125:34" pos:end="125:43"><name pos:start="125:34" pos:end="125:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="125:46" pos:end="125:60"><expr pos:start="125:46" pos:end="125:60"><name pos:start="125:46" pos:end="125:51">new_cs</name> <operator pos:start="125:53" pos:end="125:53">&amp;</operator> <literal type="number" pos:start="125:55" pos:end="125:60">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:36"><expr pos:start="129:5" pos:end="129:35"><name pos:start="129:5" pos:end="129:7">cpl</name> <operator pos:start="129:9" pos:end="129:9">=</operator> <name pos:start="129:11" pos:end="129:21"><name pos:start="129:11" pos:end="129:13">env</name><operator pos:start="129:14" pos:end="129:15">-&gt;</operator><name pos:start="129:16" pos:end="129:21">hflags</name></name> <operator pos:start="129:23" pos:end="129:23">&amp;</operator> <name pos:start="129:25" pos:end="129:35">HF_CPL_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:21"><expr pos:start="131:5" pos:end="131:20"><name pos:start="131:5" pos:end="131:7">rpl</name> <operator pos:start="131:9" pos:end="131:9">=</operator> <name pos:start="131:11" pos:end="131:16">new_cs</name> <operator pos:start="131:18" pos:end="131:18">&amp;</operator> <literal type="number" pos:start="131:20" pos:end="131:20">3</literal></expr>;</expr_stmt>

    <if_stmt pos:start="133:5" pos:end="137:5"><if pos:start="133:5" pos:end="137:5">if <condition pos:start="133:8" pos:end="133:18">(<expr pos:start="133:9" pos:end="133:17"><name pos:start="133:9" pos:end="133:11">rpl</name> <operator pos:start="133:13" pos:end="133:13">&lt;</operator> <name pos:start="133:15" pos:end="133:17">cpl</name></expr>)</condition> <block pos:start="133:20" pos:end="137:5">{<block_content pos:start="135:9" pos:end="135:62">

        <expr_stmt pos:start="135:9" pos:end="135:62"><expr pos:start="135:9" pos:end="135:61"><call pos:start="135:9" pos:end="135:61"><name pos:start="135:9" pos:end="135:27">raise_exception_err</name><argument_list pos:start="135:28" pos:end="135:61">(<argument pos:start="135:29" pos:end="135:31"><expr pos:start="135:29" pos:end="135:31"><name pos:start="135:29" pos:end="135:31">env</name></expr></argument>, <argument pos:start="135:34" pos:end="135:43"><expr pos:start="135:34" pos:end="135:43"><name pos:start="135:34" pos:end="135:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="135:46" pos:end="135:60"><expr pos:start="135:46" pos:end="135:60"><name pos:start="135:46" pos:end="135:51">new_cs</name> <operator pos:start="135:53" pos:end="135:53">&amp;</operator> <literal type="number" pos:start="135:55" pos:end="135:60">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:37"><expr pos:start="139:5" pos:end="139:36"><name pos:start="139:5" pos:end="139:7">dpl</name> <operator pos:start="139:9" pos:end="139:9">=</operator> <operator pos:start="139:11" pos:end="139:11">(</operator><name pos:start="139:12" pos:end="139:13">e2</name> <operator pos:start="139:15" pos:end="139:16">&gt;&gt;</operator> <name pos:start="139:18" pos:end="139:31">DESC_DPL_SHIFT</name><operator pos:start="139:32" pos:end="139:32">)</operator> <operator pos:start="139:34" pos:end="139:34">&amp;</operator> <literal type="number" pos:start="139:36" pos:end="139:36">3</literal></expr>;</expr_stmt>

    <if_stmt pos:start="141:5" pos:end="157:5"><if pos:start="141:5" pos:end="149:5">if <condition pos:start="141:8" pos:end="141:25">(<expr pos:start="141:9" pos:end="141:24"><name pos:start="141:9" pos:end="141:10">e2</name> <operator pos:start="141:12" pos:end="141:12">&amp;</operator> <name pos:start="141:14" pos:end="141:24">DESC_C_MASK</name></expr>)</condition> <block pos:start="141:27" pos:end="149:5">{<block_content pos:start="143:9" pos:end="147:9">

        <if_stmt pos:start="143:9" pos:end="147:9"><if pos:start="143:9" pos:end="147:9">if <condition pos:start="143:12" pos:end="143:22">(<expr pos:start="143:13" pos:end="143:21"><name pos:start="143:13" pos:end="143:15">dpl</name> <operator pos:start="143:17" pos:end="143:17">&gt;</operator> <name pos:start="143:19" pos:end="143:21">rpl</name></expr>)</condition> <block pos:start="143:24" pos:end="147:9">{<block_content pos:start="145:13" pos:end="145:66">

            <expr_stmt pos:start="145:13" pos:end="145:66"><expr pos:start="145:13" pos:end="145:65"><call pos:start="145:13" pos:end="145:65"><name pos:start="145:13" pos:end="145:31">raise_exception_err</name><argument_list pos:start="145:32" pos:end="145:65">(<argument pos:start="145:33" pos:end="145:35"><expr pos:start="145:33" pos:end="145:35"><name pos:start="145:33" pos:end="145:35">env</name></expr></argument>, <argument pos:start="145:38" pos:end="145:47"><expr pos:start="145:38" pos:end="145:47"><name pos:start="145:38" pos:end="145:47">EXCP0D_GPF</name></expr></argument>, <argument pos:start="145:50" pos:end="145:64"><expr pos:start="145:50" pos:end="145:64"><name pos:start="145:50" pos:end="145:55">new_cs</name> <operator pos:start="145:57" pos:end="145:57">&amp;</operator> <literal type="number" pos:start="145:59" pos:end="145:64">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="149:7" pos:end="157:5">else <block pos:start="149:12" pos:end="157:5">{<block_content pos:start="151:9" pos:end="155:9">

        <if_stmt pos:start="151:9" pos:end="155:9"><if pos:start="151:9" pos:end="155:9">if <condition pos:start="151:12" pos:end="151:23">(<expr pos:start="151:13" pos:end="151:22"><name pos:start="151:13" pos:end="151:15">dpl</name> <operator pos:start="151:17" pos:end="151:18">!=</operator> <name pos:start="151:20" pos:end="151:22">rpl</name></expr>)</condition> <block pos:start="151:25" pos:end="155:9">{<block_content pos:start="153:13" pos:end="153:66">

            <expr_stmt pos:start="153:13" pos:end="153:66"><expr pos:start="153:13" pos:end="153:65"><call pos:start="153:13" pos:end="153:65"><name pos:start="153:13" pos:end="153:31">raise_exception_err</name><argument_list pos:start="153:32" pos:end="153:65">(<argument pos:start="153:33" pos:end="153:35"><expr pos:start="153:33" pos:end="153:35"><name pos:start="153:33" pos:end="153:35">env</name></expr></argument>, <argument pos:start="153:38" pos:end="153:47"><expr pos:start="153:38" pos:end="153:47"><name pos:start="153:38" pos:end="153:47">EXCP0D_GPF</name></expr></argument>, <argument pos:start="153:50" pos:end="153:64"><expr pos:start="153:50" pos:end="153:64"><name pos:start="153:50" pos:end="153:55">new_cs</name> <operator pos:start="153:57" pos:end="153:57">&amp;</operator> <literal type="number" pos:start="153:59" pos:end="153:64">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="159:5" pos:end="163:5"><if pos:start="159:5" pos:end="163:5">if <condition pos:start="159:8" pos:end="159:28">(<expr pos:start="159:9" pos:end="159:27"><operator pos:start="159:9" pos:end="159:9">!</operator><operator pos:start="159:10" pos:end="159:10">(</operator><name pos:start="159:11" pos:end="159:12">e2</name> <operator pos:start="159:14" pos:end="159:14">&amp;</operator> <name pos:start="159:16" pos:end="159:26">DESC_P_MASK</name><operator pos:start="159:27" pos:end="159:27">)</operator></expr>)</condition> <block pos:start="159:30" pos:end="163:5">{<block_content pos:start="161:9" pos:end="161:64">

        <expr_stmt pos:start="161:9" pos:end="161:64"><expr pos:start="161:9" pos:end="161:63"><call pos:start="161:9" pos:end="161:63"><name pos:start="161:9" pos:end="161:27">raise_exception_err</name><argument_list pos:start="161:28" pos:end="161:63">(<argument pos:start="161:29" pos:end="161:31"><expr pos:start="161:29" pos:end="161:31"><name pos:start="161:29" pos:end="161:31">env</name></expr></argument>, <argument pos:start="161:34" pos:end="161:45"><expr pos:start="161:34" pos:end="161:45"><name pos:start="161:34" pos:end="161:45">EXCP0B_NOSEG</name></expr></argument>, <argument pos:start="161:48" pos:end="161:62"><expr pos:start="161:48" pos:end="161:62"><name pos:start="161:48" pos:end="161:53">new_cs</name> <operator pos:start="161:55" pos:end="161:55">&amp;</operator> <literal type="number" pos:start="161:57" pos:end="161:62">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="167:5" pos:end="167:17"><expr pos:start="167:5" pos:end="167:16"><name pos:start="167:5" pos:end="167:6">sp</name> <operator pos:start="167:8" pos:end="167:9">+=</operator> <name pos:start="167:11" pos:end="167:16">addend</name></expr>;</expr_stmt>

    <if_stmt pos:start="169:5" pos:end="355:5"><if pos:start="169:5" pos:end="183:5">if <condition pos:start="169:8" pos:end="171:67">(<expr pos:start="169:9" pos:end="171:66"><name pos:start="169:9" pos:end="169:11">rpl</name> <operator pos:start="169:13" pos:end="169:14">==</operator> <name pos:start="169:16" pos:end="169:18">cpl</name> <operator pos:start="169:20" pos:end="169:21">&amp;&amp;</operator> <operator pos:start="169:23" pos:end="169:23">(</operator><operator pos:start="169:24" pos:end="169:24">!</operator><operator pos:start="169:25" pos:end="169:25">(</operator><name pos:start="169:26" pos:end="169:36"><name pos:start="169:26" pos:end="169:28">env</name><operator pos:start="169:29" pos:end="169:30">-&gt;</operator><name pos:start="169:31" pos:end="169:36">hflags</name></name> <operator pos:start="169:38" pos:end="169:38">&amp;</operator> <name pos:start="169:40" pos:end="169:51">HF_CS64_MASK</name><operator pos:start="169:52" pos:end="169:52">)</operator> <operator pos:start="169:54" pos:end="169:55">||</operator>

                       <operator pos:start="171:24" pos:end="171:24">(</operator><operator pos:start="171:25" pos:end="171:25">(</operator><name pos:start="171:26" pos:end="171:36"><name pos:start="171:26" pos:end="171:28">env</name><operator pos:start="171:29" pos:end="171:30">-&gt;</operator><name pos:start="171:31" pos:end="171:36">hflags</name></name> <operator pos:start="171:38" pos:end="171:38">&amp;</operator> <name pos:start="171:40" pos:end="171:51">HF_CS64_MASK</name><operator pos:start="171:52" pos:end="171:52">)</operator> <operator pos:start="171:54" pos:end="171:55">&amp;&amp;</operator> <operator pos:start="171:57" pos:end="171:57">!</operator><name pos:start="171:58" pos:end="171:64">is_iret</name><operator pos:start="171:65" pos:end="171:65">)</operator><operator pos:start="171:66" pos:end="171:66">)</operator></expr>)</condition> <block pos:start="171:69" pos:end="183:5">{<block_content pos:start="175:9" pos:end="181:27">

        <comment type="block" pos:start="173:9" pos:end="173:44">/* return to same privilege level */</comment>

        <expr_stmt pos:start="175:9" pos:end="181:27"><expr pos:start="175:9" pos:end="181:26"><call pos:start="175:9" pos:end="181:26"><name pos:start="175:9" pos:end="175:30">cpu_x86_load_seg_cache</name><argument_list pos:start="175:31" pos:end="181:26">(<argument pos:start="175:32" pos:end="175:34"><expr pos:start="175:32" pos:end="175:34"><name pos:start="175:32" pos:end="175:34">env</name></expr></argument>, <argument pos:start="175:37" pos:end="175:40"><expr pos:start="175:37" pos:end="175:40"><name pos:start="175:37" pos:end="175:40">R_CS</name></expr></argument>, <argument pos:start="175:43" pos:end="175:48"><expr pos:start="175:43" pos:end="175:48"><name pos:start="175:43" pos:end="175:48">new_cs</name></expr></argument>,

                       <argument pos:start="177:24" pos:end="177:43"><expr pos:start="177:24" pos:end="177:43"><call pos:start="177:24" pos:end="177:43"><name pos:start="177:24" pos:end="177:35">get_seg_base</name><argument_list pos:start="177:36" pos:end="177:43">(<argument pos:start="177:37" pos:end="177:38"><expr pos:start="177:37" pos:end="177:38"><name pos:start="177:37" pos:end="177:38">e1</name></expr></argument>, <argument pos:start="177:41" pos:end="177:42"><expr pos:start="177:41" pos:end="177:42"><name pos:start="177:41" pos:end="177:42">e2</name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="179:24" pos:end="179:44"><expr pos:start="179:24" pos:end="179:44"><call pos:start="179:24" pos:end="179:44"><name pos:start="179:24" pos:end="179:36">get_seg_limit</name><argument_list pos:start="179:37" pos:end="179:44">(<argument pos:start="179:38" pos:end="179:39"><expr pos:start="179:38" pos:end="179:39"><name pos:start="179:38" pos:end="179:39">e1</name></expr></argument>, <argument pos:start="179:42" pos:end="179:43"><expr pos:start="179:42" pos:end="179:43"><name pos:start="179:42" pos:end="179:43">e2</name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="181:24" pos:end="181:25"><expr pos:start="181:24" pos:end="181:25"><name pos:start="181:24" pos:end="181:25">e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="183:7" pos:end="355:5">else <block pos:start="183:12" pos:end="355:5">{<block_content pos:start="189:9" pos:end="353:21">

        <comment type="block" pos:start="185:9" pos:end="185:49">/* return to different privilege level */</comment>

<cpp:ifdef pos:start="187:1" pos:end="187:20">#<cpp:directive pos:start="187:2" pos:end="187:6">ifdef</cpp:directive> <name pos:start="187:8" pos:end="187:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="189:9" pos:end="223:9"><if pos:start="189:9" pos:end="197:9">if <condition pos:start="189:12" pos:end="189:23">(<expr pos:start="189:13" pos:end="189:22"><name pos:start="189:13" pos:end="189:17">shift</name> <operator pos:start="189:19" pos:end="189:20">==</operator> <literal type="number" pos:start="189:22" pos:end="189:22">2</literal></expr>)</condition> <block pos:start="189:25" pos:end="197:9">{<block_content pos:start="191:13" pos:end="195:29">

            <expr_stmt pos:start="191:13" pos:end="191:30"><expr pos:start="191:13" pos:end="191:29"><call pos:start="191:13" pos:end="191:29"><name pos:start="191:13" pos:end="191:16">POPQ</name><argument_list pos:start="191:17" pos:end="191:29">(<argument pos:start="191:18" pos:end="191:19"><expr pos:start="191:18" pos:end="191:19"><name pos:start="191:18" pos:end="191:19">sp</name></expr></argument>, <argument pos:start="191:22" pos:end="191:28"><expr pos:start="191:22" pos:end="191:28"><name pos:start="191:22" pos:end="191:28">new_esp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:29"><expr pos:start="193:13" pos:end="193:28"><call pos:start="193:13" pos:end="193:28"><name pos:start="193:13" pos:end="193:16">POPQ</name><argument_list pos:start="193:17" pos:end="193:28">(<argument pos:start="193:18" pos:end="193:19"><expr pos:start="193:18" pos:end="193:19"><name pos:start="193:18" pos:end="193:19">sp</name></expr></argument>, <argument pos:start="193:22" pos:end="193:27"><expr pos:start="193:22" pos:end="193:27"><name pos:start="193:22" pos:end="193:27">new_ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:29"><expr pos:start="195:13" pos:end="195:28"><name pos:start="195:13" pos:end="195:18">new_ss</name> <operator pos:start="195:20" pos:end="195:21">&amp;=</operator> <literal type="number" pos:start="195:23" pos:end="195:28">0xffff</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="197:11" pos:end="223:9">else

<cpp:endif pos:start="199:1" pos:end="199:6">#<cpp:directive pos:start="199:2" pos:end="199:6">endif</cpp:directive></cpp:endif>

        <block pos:start="201:9" pos:end="223:9">{<block_content pos:start="203:13" pos:end="221:13">

            <if_stmt pos:start="203:13" pos:end="221:13"><if pos:start="203:13" pos:end="213:13">if <condition pos:start="203:16" pos:end="203:27">(<expr pos:start="203:17" pos:end="203:26"><name pos:start="203:17" pos:end="203:21">shift</name> <operator pos:start="203:23" pos:end="203:24">==</operator> <literal type="number" pos:start="203:26" pos:end="203:26">1</literal></expr>)</condition> <block pos:start="203:29" pos:end="213:13">{<block_content pos:start="207:17" pos:end="211:33">

                <comment type="block" pos:start="205:17" pos:end="205:29">/* 32 bits */</comment>

                <expr_stmt pos:start="207:17" pos:end="207:48"><expr pos:start="207:17" pos:end="207:47"><call pos:start="207:17" pos:end="207:47"><name pos:start="207:17" pos:end="207:20">POPL</name><argument_list pos:start="207:21" pos:end="207:47">(<argument pos:start="207:22" pos:end="207:24"><expr pos:start="207:22" pos:end="207:24"><name pos:start="207:22" pos:end="207:24">ssp</name></expr></argument>, <argument pos:start="207:27" pos:end="207:28"><expr pos:start="207:27" pos:end="207:28"><name pos:start="207:27" pos:end="207:28">sp</name></expr></argument>, <argument pos:start="207:31" pos:end="207:37"><expr pos:start="207:31" pos:end="207:37"><name pos:start="207:31" pos:end="207:37">sp_mask</name></expr></argument>, <argument pos:start="207:40" pos:end="207:46"><expr pos:start="207:40" pos:end="207:46"><name pos:start="207:40" pos:end="207:46">new_esp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="209:17" pos:end="209:47"><expr pos:start="209:17" pos:end="209:46"><call pos:start="209:17" pos:end="209:46"><name pos:start="209:17" pos:end="209:20">POPL</name><argument_list pos:start="209:21" pos:end="209:46">(<argument pos:start="209:22" pos:end="209:24"><expr pos:start="209:22" pos:end="209:24"><name pos:start="209:22" pos:end="209:24">ssp</name></expr></argument>, <argument pos:start="209:27" pos:end="209:28"><expr pos:start="209:27" pos:end="209:28"><name pos:start="209:27" pos:end="209:28">sp</name></expr></argument>, <argument pos:start="209:31" pos:end="209:37"><expr pos:start="209:31" pos:end="209:37"><name pos:start="209:31" pos:end="209:37">sp_mask</name></expr></argument>, <argument pos:start="209:40" pos:end="209:45"><expr pos:start="209:40" pos:end="209:45"><name pos:start="209:40" pos:end="209:45">new_ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="211:17" pos:end="211:33"><expr pos:start="211:17" pos:end="211:32"><name pos:start="211:17" pos:end="211:22">new_ss</name> <operator pos:start="211:24" pos:end="211:25">&amp;=</operator> <literal type="number" pos:start="211:27" pos:end="211:32">0xffff</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="213:15" pos:end="221:13">else <block pos:start="213:20" pos:end="221:13">{<block_content pos:start="217:17" pos:end="219:47">

                <comment type="block" pos:start="215:17" pos:end="215:29">/* 16 bits */</comment>

                <expr_stmt pos:start="217:17" pos:end="217:48"><expr pos:start="217:17" pos:end="217:47"><call pos:start="217:17" pos:end="217:47"><name pos:start="217:17" pos:end="217:20">POPW</name><argument_list pos:start="217:21" pos:end="217:47">(<argument pos:start="217:22" pos:end="217:24"><expr pos:start="217:22" pos:end="217:24"><name pos:start="217:22" pos:end="217:24">ssp</name></expr></argument>, <argument pos:start="217:27" pos:end="217:28"><expr pos:start="217:27" pos:end="217:28"><name pos:start="217:27" pos:end="217:28">sp</name></expr></argument>, <argument pos:start="217:31" pos:end="217:37"><expr pos:start="217:31" pos:end="217:37"><name pos:start="217:31" pos:end="217:37">sp_mask</name></expr></argument>, <argument pos:start="217:40" pos:end="217:46"><expr pos:start="217:40" pos:end="217:46"><name pos:start="217:40" pos:end="217:46">new_esp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="219:17" pos:end="219:47"><expr pos:start="219:17" pos:end="219:46"><call pos:start="219:17" pos:end="219:46"><name pos:start="219:17" pos:end="219:20">POPW</name><argument_list pos:start="219:21" pos:end="219:46">(<argument pos:start="219:22" pos:end="219:24"><expr pos:start="219:22" pos:end="219:24"><name pos:start="219:22" pos:end="219:24">ssp</name></expr></argument>, <argument pos:start="219:27" pos:end="219:28"><expr pos:start="219:27" pos:end="219:28"><name pos:start="219:27" pos:end="219:28">sp</name></expr></argument>, <argument pos:start="219:31" pos:end="219:37"><expr pos:start="219:31" pos:end="219:37"><name pos:start="219:31" pos:end="219:37">sp_mask</name></expr></argument>, <argument pos:start="219:40" pos:end="219:45"><expr pos:start="219:40" pos:end="219:45"><name pos:start="219:40" pos:end="219:45">new_ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="225:9" pos:end="227:35"><expr pos:start="225:9" pos:end="227:34"><call pos:start="225:9" pos:end="227:34"><name pos:start="225:9" pos:end="225:17">LOG_PCALL</name><argument_list pos:start="225:18" pos:end="227:34">(<argument pos:start="225:19" pos:end="225:55"><expr pos:start="225:19" pos:end="225:55"><literal type="string" pos:start="225:19" pos:end="225:36">"new ss:esp=%04x:"</literal> <name pos:start="225:38" pos:end="225:50">TARGET_FMT_lx</name> <literal type="string" pos:start="225:52" pos:end="225:55">"\n"</literal></expr></argument>,

                  <argument pos:start="227:19" pos:end="227:24"><expr pos:start="227:19" pos:end="227:24"><name pos:start="227:19" pos:end="227:24">new_ss</name></expr></argument>, <argument pos:start="227:27" pos:end="227:33"><expr pos:start="227:27" pos:end="227:33"><name pos:start="227:27" pos:end="227:33">new_esp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="229:9" pos:end="307:9"><if pos:start="229:9" pos:end="261:9">if <condition pos:start="229:12" pos:end="229:35">(<expr pos:start="229:13" pos:end="229:34"><operator pos:start="229:13" pos:end="229:13">(</operator><name pos:start="229:14" pos:end="229:19">new_ss</name> <operator pos:start="229:21" pos:end="229:21">&amp;</operator> <literal type="number" pos:start="229:23" pos:end="229:28">0xfffc</literal><operator pos:start="229:29" pos:end="229:29">)</operator> <operator pos:start="229:31" pos:end="229:32">==</operator> <literal type="number" pos:start="229:34" pos:end="229:34">0</literal></expr>)</condition> <block pos:start="229:37" pos:end="261:9">{<block_content pos:start="237:13" pos:end="259:13">

<cpp:ifdef pos:start="231:1" pos:end="231:20">#<cpp:directive pos:start="231:2" pos:end="231:6">ifdef</cpp:directive> <name pos:start="231:8" pos:end="231:20">TARGET_X86_64</name></cpp:ifdef>

            <comment type="block" pos:start="233:13" pos:end="233:61">/* NULL ss is allowed in long mode if cpl != 3 */</comment>

            <comment type="block" pos:start="235:13" pos:end="235:33">/* XXX: test CS64? */</comment>

            <if_stmt pos:start="237:13" pos:end="259:13"><if pos:start="237:13" pos:end="251:13">if <condition pos:start="237:16" pos:end="237:56">(<expr pos:start="237:17" pos:end="237:55"><operator pos:start="237:17" pos:end="237:17">(</operator><name pos:start="237:18" pos:end="237:28"><name pos:start="237:18" pos:end="237:20">env</name><operator pos:start="237:21" pos:end="237:22">-&gt;</operator><name pos:start="237:23" pos:end="237:28">hflags</name></name> <operator pos:start="237:30" pos:end="237:30">&amp;</operator> <name pos:start="237:32" pos:end="237:42">HF_LMA_MASK</name><operator pos:start="237:43" pos:end="237:43">)</operator> <operator pos:start="237:45" pos:end="237:46">&amp;&amp;</operator> <name pos:start="237:48" pos:end="237:50">rpl</name> <operator pos:start="237:52" pos:end="237:53">!=</operator> <literal type="number" pos:start="237:55" pos:end="237:55">3</literal></expr>)</condition> <block pos:start="237:58" pos:end="251:13">{<block_content pos:start="239:17" pos:end="249:36">

                <expr_stmt pos:start="239:17" pos:end="247:66"><expr pos:start="239:17" pos:end="247:65"><call pos:start="239:17" pos:end="247:65"><name pos:start="239:17" pos:end="239:38">cpu_x86_load_seg_cache</name><argument_list pos:start="239:39" pos:end="247:65">(<argument pos:start="239:40" pos:end="239:42"><expr pos:start="239:40" pos:end="239:42"><name pos:start="239:40" pos:end="239:42">env</name></expr></argument>, <argument pos:start="239:45" pos:end="239:48"><expr pos:start="239:45" pos:end="239:48"><name pos:start="239:45" pos:end="239:48">R_SS</name></expr></argument>, <argument pos:start="239:51" pos:end="239:56"><expr pos:start="239:51" pos:end="239:56"><name pos:start="239:51" pos:end="239:56">new_ss</name></expr></argument>,

                                       <argument pos:start="241:40" pos:end="241:40"><expr pos:start="241:40" pos:end="241:40"><literal type="number" pos:start="241:40" pos:end="241:40">0</literal></expr></argument>, <argument pos:start="241:43" pos:end="241:52"><expr pos:start="241:43" pos:end="241:52"><literal type="number" pos:start="241:43" pos:end="241:52">0xffffffff</literal></expr></argument>,

                                       <argument pos:start="243:40" pos:end="247:64"><expr pos:start="243:40" pos:end="247:64"><name pos:start="243:40" pos:end="243:50">DESC_G_MASK</name> <operator pos:start="243:52" pos:end="243:52">|</operator> <name pos:start="243:54" pos:end="243:64">DESC_B_MASK</name> <operator pos:start="243:66" pos:end="243:66">|</operator> <name pos:start="243:68" pos:end="243:78">DESC_P_MASK</name> <operator pos:start="243:80" pos:end="243:80">|</operator>

                                       <name pos:start="245:40" pos:end="245:50">DESC_S_MASK</name> <operator pos:start="245:52" pos:end="245:52">|</operator> <operator pos:start="245:54" pos:end="245:54">(</operator><name pos:start="245:55" pos:end="245:57">rpl</name> <operator pos:start="245:59" pos:end="245:60">&lt;&lt;</operator> <name pos:start="245:62" pos:end="245:75">DESC_DPL_SHIFT</name><operator pos:start="245:76" pos:end="245:76">)</operator> <operator pos:start="245:78" pos:end="245:78">|</operator>

                                       <name pos:start="247:40" pos:end="247:50">DESC_W_MASK</name> <operator pos:start="247:52" pos:end="247:52">|</operator> <name pos:start="247:54" pos:end="247:64">DESC_A_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="249:17" pos:end="249:36"><expr pos:start="249:17" pos:end="249:35"><name pos:start="249:17" pos:end="249:21">ss_e2</name> <operator pos:start="249:23" pos:end="249:23">=</operator> <name pos:start="249:25" pos:end="249:35">DESC_B_MASK</name></expr>;</expr_stmt> <comment type="block" pos:start="249:38" pos:end="249:69">/* XXX: should not be needed? */</comment>

            </block_content>}</block></if> <else pos:start="251:15" pos:end="259:13">else

<cpp:endif pos:start="253:1" pos:end="253:6">#<cpp:directive pos:start="253:2" pos:end="253:6">endif</cpp:directive></cpp:endif>

            <block pos:start="255:13" pos:end="259:13">{<block_content pos:start="257:17" pos:end="257:56">

                <expr_stmt pos:start="257:17" pos:end="257:56"><expr pos:start="257:17" pos:end="257:55"><call pos:start="257:17" pos:end="257:55"><name pos:start="257:17" pos:end="257:35">raise_exception_err</name><argument_list pos:start="257:36" pos:end="257:55">(<argument pos:start="257:37" pos:end="257:39"><expr pos:start="257:37" pos:end="257:39"><name pos:start="257:37" pos:end="257:39">env</name></expr></argument>, <argument pos:start="257:42" pos:end="257:51"><expr pos:start="257:42" pos:end="257:51"><name pos:start="257:42" pos:end="257:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="257:54" pos:end="257:54"><expr pos:start="257:54" pos:end="257:54"><literal type="number" pos:start="257:54" pos:end="257:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="261:11" pos:end="307:9">else <block pos:start="261:16" pos:end="307:9">{<block_content pos:start="263:13" pos:end="305:42">

            <if_stmt pos:start="263:13" pos:end="267:13"><if pos:start="263:13" pos:end="267:13">if <condition pos:start="263:16" pos:end="263:36">(<expr pos:start="263:17" pos:end="263:35"><operator pos:start="263:17" pos:end="263:17">(</operator><name pos:start="263:18" pos:end="263:23">new_ss</name> <operator pos:start="263:25" pos:end="263:25">&amp;</operator> <literal type="number" pos:start="263:27" pos:end="263:27">3</literal><operator pos:start="263:28" pos:end="263:28">)</operator> <operator pos:start="263:30" pos:end="263:31">!=</operator> <name pos:start="263:33" pos:end="263:35">rpl</name></expr>)</condition> <block pos:start="263:38" pos:end="267:13">{<block_content pos:start="265:17" pos:end="265:70">

                <expr_stmt pos:start="265:17" pos:end="265:70"><expr pos:start="265:17" pos:end="265:69"><call pos:start="265:17" pos:end="265:69"><name pos:start="265:17" pos:end="265:35">raise_exception_err</name><argument_list pos:start="265:36" pos:end="265:69">(<argument pos:start="265:37" pos:end="265:39"><expr pos:start="265:37" pos:end="265:39"><name pos:start="265:37" pos:end="265:39">env</name></expr></argument>, <argument pos:start="265:42" pos:end="265:51"><expr pos:start="265:42" pos:end="265:51"><name pos:start="265:42" pos:end="265:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="265:54" pos:end="265:68"><expr pos:start="265:54" pos:end="265:68"><name pos:start="265:54" pos:end="265:59">new_ss</name> <operator pos:start="265:61" pos:end="265:61">&amp;</operator> <literal type="number" pos:start="265:63" pos:end="265:68">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="269:13" pos:end="273:13"><if pos:start="269:13" pos:end="273:13">if <condition pos:start="269:16" pos:end="269:63">(<expr pos:start="269:17" pos:end="269:62"><call pos:start="269:17" pos:end="269:57"><name pos:start="269:17" pos:end="269:28">load_segment</name><argument_list pos:start="269:29" pos:end="269:57">(<argument pos:start="269:30" pos:end="269:32"><expr pos:start="269:30" pos:end="269:32"><name pos:start="269:30" pos:end="269:32">env</name></expr></argument>, <argument pos:start="269:35" pos:end="269:40"><expr pos:start="269:35" pos:end="269:40"><operator pos:start="269:35" pos:end="269:35">&amp;</operator><name pos:start="269:36" pos:end="269:40">ss_e1</name></expr></argument>, <argument pos:start="269:43" pos:end="269:48"><expr pos:start="269:43" pos:end="269:48"><operator pos:start="269:43" pos:end="269:43">&amp;</operator><name pos:start="269:44" pos:end="269:48">ss_e2</name></expr></argument>, <argument pos:start="269:51" pos:end="269:56"><expr pos:start="269:51" pos:end="269:56"><name pos:start="269:51" pos:end="269:56">new_ss</name></expr></argument>)</argument_list></call> <operator pos:start="269:59" pos:end="269:60">!=</operator> <literal type="number" pos:start="269:62" pos:end="269:62">0</literal></expr>)</condition> <block pos:start="269:65" pos:end="273:13">{<block_content pos:start="271:17" pos:end="271:70">

                <expr_stmt pos:start="271:17" pos:end="271:70"><expr pos:start="271:17" pos:end="271:69"><call pos:start="271:17" pos:end="271:69"><name pos:start="271:17" pos:end="271:35">raise_exception_err</name><argument_list pos:start="271:36" pos:end="271:69">(<argument pos:start="271:37" pos:end="271:39"><expr pos:start="271:37" pos:end="271:39"><name pos:start="271:37" pos:end="271:39">env</name></expr></argument>, <argument pos:start="271:42" pos:end="271:51"><expr pos:start="271:42" pos:end="271:51"><name pos:start="271:42" pos:end="271:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="271:54" pos:end="271:68"><expr pos:start="271:54" pos:end="271:68"><name pos:start="271:54" pos:end="271:59">new_ss</name> <operator pos:start="271:61" pos:end="271:61">&amp;</operator> <literal type="number" pos:start="271:63" pos:end="271:68">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="275:13" pos:end="283:13"><if pos:start="275:13" pos:end="283:13">if <condition pos:start="275:16" pos:end="279:39">(<expr pos:start="275:17" pos:end="279:38"><operator pos:start="275:17" pos:end="275:17">!</operator><operator pos:start="275:18" pos:end="275:18">(</operator><name pos:start="275:19" pos:end="275:23">ss_e2</name> <operator pos:start="275:25" pos:end="275:25">&amp;</operator> <name pos:start="275:27" pos:end="275:37">DESC_S_MASK</name><operator pos:start="275:38" pos:end="275:38">)</operator> <operator pos:start="275:40" pos:end="275:41">||</operator>

                <operator pos:start="277:17" pos:end="277:17">(</operator><name pos:start="277:18" pos:end="277:22">ss_e2</name> <operator pos:start="277:24" pos:end="277:24">&amp;</operator> <name pos:start="277:26" pos:end="277:37">DESC_CS_MASK</name><operator pos:start="277:38" pos:end="277:38">)</operator> <operator pos:start="277:40" pos:end="277:41">||</operator>

                <operator pos:start="279:17" pos:end="279:17">!</operator><operator pos:start="279:18" pos:end="279:18">(</operator><name pos:start="279:19" pos:end="279:23">ss_e2</name> <operator pos:start="279:25" pos:end="279:25">&amp;</operator> <name pos:start="279:27" pos:end="279:37">DESC_W_MASK</name><operator pos:start="279:38" pos:end="279:38">)</operator></expr>)</condition> <block pos:start="279:41" pos:end="283:13">{<block_content pos:start="281:17" pos:end="281:70">

                <expr_stmt pos:start="281:17" pos:end="281:70"><expr pos:start="281:17" pos:end="281:69"><call pos:start="281:17" pos:end="281:69"><name pos:start="281:17" pos:end="281:35">raise_exception_err</name><argument_list pos:start="281:36" pos:end="281:69">(<argument pos:start="281:37" pos:end="281:39"><expr pos:start="281:37" pos:end="281:39"><name pos:start="281:37" pos:end="281:39">env</name></expr></argument>, <argument pos:start="281:42" pos:end="281:51"><expr pos:start="281:42" pos:end="281:51"><name pos:start="281:42" pos:end="281:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="281:54" pos:end="281:68"><expr pos:start="281:54" pos:end="281:68"><name pos:start="281:54" pos:end="281:59">new_ss</name> <operator pos:start="281:61" pos:end="281:61">&amp;</operator> <literal type="number" pos:start="281:63" pos:end="281:68">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="285:13" pos:end="285:48"><expr pos:start="285:13" pos:end="285:47"><name pos:start="285:13" pos:end="285:15">dpl</name> <operator pos:start="285:17" pos:end="285:17">=</operator> <operator pos:start="285:19" pos:end="285:19">(</operator><name pos:start="285:20" pos:end="285:24">ss_e2</name> <operator pos:start="285:26" pos:end="285:27">&gt;&gt;</operator> <name pos:start="285:29" pos:end="285:42">DESC_DPL_SHIFT</name><operator pos:start="285:43" pos:end="285:43">)</operator> <operator pos:start="285:45" pos:end="285:45">&amp;</operator> <literal type="number" pos:start="285:47" pos:end="285:47">3</literal></expr>;</expr_stmt>

            <if_stmt pos:start="287:13" pos:end="291:13"><if pos:start="287:13" pos:end="291:13">if <condition pos:start="287:16" pos:end="287:27">(<expr pos:start="287:17" pos:end="287:26"><name pos:start="287:17" pos:end="287:19">dpl</name> <operator pos:start="287:21" pos:end="287:22">!=</operator> <name pos:start="287:24" pos:end="287:26">rpl</name></expr>)</condition> <block pos:start="287:29" pos:end="291:13">{<block_content pos:start="289:17" pos:end="289:70">

                <expr_stmt pos:start="289:17" pos:end="289:70"><expr pos:start="289:17" pos:end="289:69"><call pos:start="289:17" pos:end="289:69"><name pos:start="289:17" pos:end="289:35">raise_exception_err</name><argument_list pos:start="289:36" pos:end="289:69">(<argument pos:start="289:37" pos:end="289:39"><expr pos:start="289:37" pos:end="289:39"><name pos:start="289:37" pos:end="289:39">env</name></expr></argument>, <argument pos:start="289:42" pos:end="289:51"><expr pos:start="289:42" pos:end="289:51"><name pos:start="289:42" pos:end="289:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="289:54" pos:end="289:68"><expr pos:start="289:54" pos:end="289:68"><name pos:start="289:54" pos:end="289:59">new_ss</name> <operator pos:start="289:61" pos:end="289:61">&amp;</operator> <literal type="number" pos:start="289:63" pos:end="289:68">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="293:13" pos:end="297:13"><if pos:start="293:13" pos:end="297:13">if <condition pos:start="293:16" pos:end="293:39">(<expr pos:start="293:17" pos:end="293:38"><operator pos:start="293:17" pos:end="293:17">!</operator><operator pos:start="293:18" pos:end="293:18">(</operator><name pos:start="293:19" pos:end="293:23">ss_e2</name> <operator pos:start="293:25" pos:end="293:25">&amp;</operator> <name pos:start="293:27" pos:end="293:37">DESC_P_MASK</name><operator pos:start="293:38" pos:end="293:38">)</operator></expr>)</condition> <block pos:start="293:41" pos:end="297:13">{<block_content pos:start="295:17" pos:end="295:72">

                <expr_stmt pos:start="295:17" pos:end="295:72"><expr pos:start="295:17" pos:end="295:71"><call pos:start="295:17" pos:end="295:71"><name pos:start="295:17" pos:end="295:35">raise_exception_err</name><argument_list pos:start="295:36" pos:end="295:71">(<argument pos:start="295:37" pos:end="295:39"><expr pos:start="295:37" pos:end="295:39"><name pos:start="295:37" pos:end="295:39">env</name></expr></argument>, <argument pos:start="295:42" pos:end="295:53"><expr pos:start="295:42" pos:end="295:53"><name pos:start="295:42" pos:end="295:53">EXCP0B_NOSEG</name></expr></argument>, <argument pos:start="295:56" pos:end="295:70"><expr pos:start="295:56" pos:end="295:70"><name pos:start="295:56" pos:end="295:61">new_ss</name> <operator pos:start="295:63" pos:end="295:63">&amp;</operator> <literal type="number" pos:start="295:65" pos:end="295:70">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="299:13" pos:end="305:42"><expr pos:start="299:13" pos:end="305:41"><call pos:start="299:13" pos:end="305:41"><name pos:start="299:13" pos:end="299:34">cpu_x86_load_seg_cache</name><argument_list pos:start="299:35" pos:end="305:41">(<argument pos:start="299:36" pos:end="299:38"><expr pos:start="299:36" pos:end="299:38"><name pos:start="299:36" pos:end="299:38">env</name></expr></argument>, <argument pos:start="299:41" pos:end="299:44"><expr pos:start="299:41" pos:end="299:44"><name pos:start="299:41" pos:end="299:44">R_SS</name></expr></argument>, <argument pos:start="299:47" pos:end="299:52"><expr pos:start="299:47" pos:end="299:52"><name pos:start="299:47" pos:end="299:52">new_ss</name></expr></argument>,

                                   <argument pos:start="301:36" pos:end="301:61"><expr pos:start="301:36" pos:end="301:61"><call pos:start="301:36" pos:end="301:61"><name pos:start="301:36" pos:end="301:47">get_seg_base</name><argument_list pos:start="301:48" pos:end="301:61">(<argument pos:start="301:49" pos:end="301:53"><expr pos:start="301:49" pos:end="301:53"><name pos:start="301:49" pos:end="301:53">ss_e1</name></expr></argument>, <argument pos:start="301:56" pos:end="301:60"><expr pos:start="301:56" pos:end="301:60"><name pos:start="301:56" pos:end="301:60">ss_e2</name></expr></argument>)</argument_list></call></expr></argument>,

                                   <argument pos:start="303:36" pos:end="303:62"><expr pos:start="303:36" pos:end="303:62"><call pos:start="303:36" pos:end="303:62"><name pos:start="303:36" pos:end="303:48">get_seg_limit</name><argument_list pos:start="303:49" pos:end="303:62">(<argument pos:start="303:50" pos:end="303:54"><expr pos:start="303:50" pos:end="303:54"><name pos:start="303:50" pos:end="303:54">ss_e1</name></expr></argument>, <argument pos:start="303:57" pos:end="303:61"><expr pos:start="303:57" pos:end="303:61"><name pos:start="303:57" pos:end="303:61">ss_e2</name></expr></argument>)</argument_list></call></expr></argument>,

                                   <argument pos:start="305:36" pos:end="305:40"><expr pos:start="305:36" pos:end="305:40"><name pos:start="305:36" pos:end="305:40">ss_e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="311:9" pos:end="317:27"><expr pos:start="311:9" pos:end="317:26"><call pos:start="311:9" pos:end="317:26"><name pos:start="311:9" pos:end="311:30">cpu_x86_load_seg_cache</name><argument_list pos:start="311:31" pos:end="317:26">(<argument pos:start="311:32" pos:end="311:34"><expr pos:start="311:32" pos:end="311:34"><name pos:start="311:32" pos:end="311:34">env</name></expr></argument>, <argument pos:start="311:37" pos:end="311:40"><expr pos:start="311:37" pos:end="311:40"><name pos:start="311:37" pos:end="311:40">R_CS</name></expr></argument>, <argument pos:start="311:43" pos:end="311:48"><expr pos:start="311:43" pos:end="311:48"><name pos:start="311:43" pos:end="311:48">new_cs</name></expr></argument>,

                       <argument pos:start="313:24" pos:end="313:43"><expr pos:start="313:24" pos:end="313:43"><call pos:start="313:24" pos:end="313:43"><name pos:start="313:24" pos:end="313:35">get_seg_base</name><argument_list pos:start="313:36" pos:end="313:43">(<argument pos:start="313:37" pos:end="313:38"><expr pos:start="313:37" pos:end="313:38"><name pos:start="313:37" pos:end="313:38">e1</name></expr></argument>, <argument pos:start="313:41" pos:end="313:42"><expr pos:start="313:41" pos:end="313:42"><name pos:start="313:41" pos:end="313:42">e2</name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="315:24" pos:end="315:44"><expr pos:start="315:24" pos:end="315:44"><call pos:start="315:24" pos:end="315:44"><name pos:start="315:24" pos:end="315:36">get_seg_limit</name><argument_list pos:start="315:37" pos:end="315:44">(<argument pos:start="315:38" pos:end="315:39"><expr pos:start="315:38" pos:end="315:39"><name pos:start="315:38" pos:end="315:39">e1</name></expr></argument>, <argument pos:start="315:42" pos:end="315:43"><expr pos:start="315:42" pos:end="315:43"><name pos:start="315:42" pos:end="315:43">e2</name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="317:24" pos:end="317:25"><expr pos:start="317:24" pos:end="317:25"><name pos:start="317:24" pos:end="317:25">e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="319:9" pos:end="319:34"><expr pos:start="319:9" pos:end="319:33"><call pos:start="319:9" pos:end="319:33"><name pos:start="319:9" pos:end="319:23">cpu_x86_set_cpl</name><argument_list pos:start="319:24" pos:end="319:33">(<argument pos:start="319:25" pos:end="319:27"><expr pos:start="319:25" pos:end="319:27"><name pos:start="319:25" pos:end="319:27">env</name></expr></argument>, <argument pos:start="319:30" pos:end="319:32"><expr pos:start="319:30" pos:end="319:32"><name pos:start="319:30" pos:end="319:32">rpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="321:9" pos:end="324:0"><expr pos:start="321:9" pos:end="321:20"><name pos:start="321:9" pos:end="321:10">sp</name> <operator pos:start="321:12" pos:end="321:12">=</operator> <name pos:start="321:14" pos:end="321:20">new_esp</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="323:1" pos:end="323:20">#<cpp:directive pos:start="323:2" pos:end="323:6">ifdef</cpp:directive> <name pos:start="323:8" pos:end="323:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="325:9" pos:end="337:9"><if pos:start="325:9" pos:end="329:9">if <condition pos:start="325:12" pos:end="325:39">(<expr pos:start="325:13" pos:end="325:38"><name pos:start="325:13" pos:end="325:23"><name pos:start="325:13" pos:end="325:15">env</name><operator pos:start="325:16" pos:end="325:17">-&gt;</operator><name pos:start="325:18" pos:end="325:23">hflags</name></name> <operator pos:start="325:25" pos:end="325:25">&amp;</operator> <name pos:start="325:27" pos:end="325:38">HF_CS64_MASK</name></expr>)</condition> <block pos:start="325:41" pos:end="329:9">{<block_content pos:start="327:13" pos:end="327:25">

            <expr_stmt pos:start="327:13" pos:end="327:25"><expr pos:start="327:13" pos:end="327:24"><name pos:start="327:13" pos:end="327:19">sp_mask</name> <operator pos:start="327:21" pos:end="327:21">=</operator> <operator pos:start="327:23" pos:end="327:23">-</operator><literal type="number" pos:start="327:24" pos:end="327:24">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="329:11" pos:end="337:9">else

<cpp:endif pos:start="331:1" pos:end="331:6">#<cpp:directive pos:start="331:2" pos:end="331:6">endif</cpp:directive></cpp:endif>

        <block pos:start="333:9" pos:end="337:9">{<block_content pos:start="335:13" pos:end="335:41">

            <expr_stmt pos:start="335:13" pos:end="335:41"><expr pos:start="335:13" pos:end="335:40"><name pos:start="335:13" pos:end="335:19">sp_mask</name> <operator pos:start="335:21" pos:end="335:21">=</operator> <call pos:start="335:23" pos:end="335:40"><name pos:start="335:23" pos:end="335:33">get_sp_mask</name><argument_list pos:start="335:34" pos:end="335:40">(<argument pos:start="335:35" pos:end="335:39"><expr pos:start="335:35" pos:end="335:39"><name pos:start="335:35" pos:end="335:39">ss_e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="341:9" pos:end="341:36">/* validate data segments */</comment>

        <expr_stmt pos:start="343:9" pos:end="343:37"><expr pos:start="343:9" pos:end="343:36"><call pos:start="343:9" pos:end="343:36"><name pos:start="343:9" pos:end="343:20">validate_seg</name><argument_list pos:start="343:21" pos:end="343:36">(<argument pos:start="343:22" pos:end="343:24"><expr pos:start="343:22" pos:end="343:24"><name pos:start="343:22" pos:end="343:24">env</name></expr></argument>, <argument pos:start="343:27" pos:end="343:30"><expr pos:start="343:27" pos:end="343:30"><name pos:start="343:27" pos:end="343:30">R_ES</name></expr></argument>, <argument pos:start="343:33" pos:end="343:35"><expr pos:start="343:33" pos:end="343:35"><name pos:start="343:33" pos:end="343:35">rpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="345:9" pos:end="345:37"><expr pos:start="345:9" pos:end="345:36"><call pos:start="345:9" pos:end="345:36"><name pos:start="345:9" pos:end="345:20">validate_seg</name><argument_list pos:start="345:21" pos:end="345:36">(<argument pos:start="345:22" pos:end="345:24"><expr pos:start="345:22" pos:end="345:24"><name pos:start="345:22" pos:end="345:24">env</name></expr></argument>, <argument pos:start="345:27" pos:end="345:30"><expr pos:start="345:27" pos:end="345:30"><name pos:start="345:27" pos:end="345:30">R_DS</name></expr></argument>, <argument pos:start="345:33" pos:end="345:35"><expr pos:start="345:33" pos:end="345:35"><name pos:start="345:33" pos:end="345:35">rpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="347:9" pos:end="347:37"><expr pos:start="347:9" pos:end="347:36"><call pos:start="347:9" pos:end="347:36"><name pos:start="347:9" pos:end="347:20">validate_seg</name><argument_list pos:start="347:21" pos:end="347:36">(<argument pos:start="347:22" pos:end="347:24"><expr pos:start="347:22" pos:end="347:24"><name pos:start="347:22" pos:end="347:24">env</name></expr></argument>, <argument pos:start="347:27" pos:end="347:30"><expr pos:start="347:27" pos:end="347:30"><name pos:start="347:27" pos:end="347:30">R_FS</name></expr></argument>, <argument pos:start="347:33" pos:end="347:35"><expr pos:start="347:33" pos:end="347:35"><name pos:start="347:33" pos:end="347:35">rpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="349:9" pos:end="349:37"><expr pos:start="349:9" pos:end="349:36"><call pos:start="349:9" pos:end="349:36"><name pos:start="349:9" pos:end="349:20">validate_seg</name><argument_list pos:start="349:21" pos:end="349:36">(<argument pos:start="349:22" pos:end="349:24"><expr pos:start="349:22" pos:end="349:24"><name pos:start="349:22" pos:end="349:24">env</name></expr></argument>, <argument pos:start="349:27" pos:end="349:30"><expr pos:start="349:27" pos:end="349:30"><name pos:start="349:27" pos:end="349:30">R_GS</name></expr></argument>, <argument pos:start="349:33" pos:end="349:35"><expr pos:start="349:33" pos:end="349:35"><name pos:start="349:33" pos:end="349:35">rpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="353:9" pos:end="353:21"><expr pos:start="353:9" pos:end="353:20"><name pos:start="353:9" pos:end="353:10">sp</name> <operator pos:start="353:12" pos:end="353:13">+=</operator> <name pos:start="353:15" pos:end="353:20">addend</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="357:5" pos:end="357:25"><expr pos:start="357:5" pos:end="357:24"><call pos:start="357:5" pos:end="357:24"><name pos:start="357:5" pos:end="357:11">SET_ESP</name><argument_list pos:start="357:12" pos:end="357:24">(<argument pos:start="357:13" pos:end="357:14"><expr pos:start="357:13" pos:end="357:14"><name pos:start="357:13" pos:end="357:14">sp</name></expr></argument>, <argument pos:start="357:17" pos:end="357:23"><expr pos:start="357:17" pos:end="357:23"><name pos:start="357:17" pos:end="357:23">sp_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="359:5" pos:end="359:23"><expr pos:start="359:5" pos:end="359:22"><name pos:start="359:5" pos:end="359:12"><name pos:start="359:5" pos:end="359:7">env</name><operator pos:start="359:8" pos:end="359:9">-&gt;</operator><name pos:start="359:10" pos:end="359:12">eip</name></name> <operator pos:start="359:14" pos:end="359:14">=</operator> <name pos:start="359:16" pos:end="359:22">new_eip</name></expr>;</expr_stmt>

    <if_stmt pos:start="361:5" pos:end="389:5"><if pos:start="361:5" pos:end="389:5">if <condition pos:start="361:8" pos:end="361:16">(<expr pos:start="361:9" pos:end="361:15"><name pos:start="361:9" pos:end="361:15">is_iret</name></expr>)</condition> <block pos:start="361:18" pos:end="389:5">{<block_content pos:start="365:9" pos:end="387:54">

        <comment type="block" pos:start="363:9" pos:end="363:42">/* NOTE: 'cpl' is the _old_ CPL */</comment>

        <expr_stmt pos:start="365:9" pos:end="365:70"><expr pos:start="365:9" pos:end="365:69"><name pos:start="365:9" pos:end="365:19">eflags_mask</name> <operator pos:start="365:21" pos:end="365:21">=</operator> <name pos:start="365:23" pos:end="365:29">TF_MASK</name> <operator pos:start="365:31" pos:end="365:31">|</operator> <name pos:start="365:33" pos:end="365:39">AC_MASK</name> <operator pos:start="365:41" pos:end="365:41">|</operator> <name pos:start="365:43" pos:end="365:49">ID_MASK</name> <operator pos:start="365:51" pos:end="365:51">|</operator> <name pos:start="365:53" pos:end="365:59">RF_MASK</name> <operator pos:start="365:61" pos:end="365:61">|</operator> <name pos:start="365:63" pos:end="365:69">NT_MASK</name></expr>;</expr_stmt>

        <if_stmt pos:start="367:9" pos:end="371:9"><if pos:start="367:9" pos:end="371:9">if <condition pos:start="367:12" pos:end="367:21">(<expr pos:start="367:13" pos:end="367:20"><name pos:start="367:13" pos:end="367:15">cpl</name> <operator pos:start="367:17" pos:end="367:18">==</operator> <literal type="number" pos:start="367:20" pos:end="367:20">0</literal></expr>)</condition> <block pos:start="367:23" pos:end="371:9">{<block_content pos:start="369:13" pos:end="369:37">

            <expr_stmt pos:start="369:13" pos:end="369:37"><expr pos:start="369:13" pos:end="369:36"><name pos:start="369:13" pos:end="369:23">eflags_mask</name> <operator pos:start="369:25" pos:end="369:26">|=</operator> <name pos:start="369:28" pos:end="369:36">IOPL_MASK</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="373:9" pos:end="373:47"><expr pos:start="373:9" pos:end="373:46"><name pos:start="373:9" pos:end="373:12">iopl</name> <operator pos:start="373:14" pos:end="373:14">=</operator> <operator pos:start="373:16" pos:end="373:16">(</operator><name pos:start="373:17" pos:end="373:27"><name pos:start="373:17" pos:end="373:19">env</name><operator pos:start="373:20" pos:end="373:21">-&gt;</operator><name pos:start="373:22" pos:end="373:27">eflags</name></name> <operator pos:start="373:29" pos:end="373:30">&gt;&gt;</operator> <name pos:start="373:32" pos:end="373:41">IOPL_SHIFT</name><operator pos:start="373:42" pos:end="373:42">)</operator> <operator pos:start="373:44" pos:end="373:44">&amp;</operator> <literal type="number" pos:start="373:46" pos:end="373:46">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="375:9" pos:end="379:9"><if pos:start="375:9" pos:end="379:9">if <condition pos:start="375:12" pos:end="375:24">(<expr pos:start="375:13" pos:end="375:23"><name pos:start="375:13" pos:end="375:15">cpl</name> <operator pos:start="375:17" pos:end="375:18">&lt;=</operator> <name pos:start="375:20" pos:end="375:23">iopl</name></expr>)</condition> <block pos:start="375:26" pos:end="379:9">{<block_content pos:start="377:13" pos:end="377:35">

            <expr_stmt pos:start="377:13" pos:end="377:35"><expr pos:start="377:13" pos:end="377:34"><name pos:start="377:13" pos:end="377:23">eflags_mask</name> <operator pos:start="377:25" pos:end="377:26">|=</operator> <name pos:start="377:28" pos:end="377:34">IF_MASK</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="381:9" pos:end="385:9"><if pos:start="381:9" pos:end="385:9">if <condition pos:start="381:12" pos:end="381:23">(<expr pos:start="381:13" pos:end="381:22"><name pos:start="381:13" pos:end="381:17">shift</name> <operator pos:start="381:19" pos:end="381:20">==</operator> <literal type="number" pos:start="381:22" pos:end="381:22">0</literal></expr>)</condition> <block pos:start="381:25" pos:end="385:9">{<block_content pos:start="383:13" pos:end="383:34">

            <expr_stmt pos:start="383:13" pos:end="383:34"><expr pos:start="383:13" pos:end="383:33"><name pos:start="383:13" pos:end="383:23">eflags_mask</name> <operator pos:start="383:25" pos:end="383:26">&amp;=</operator> <literal type="number" pos:start="383:28" pos:end="383:33">0xffff</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="387:9" pos:end="387:54"><expr pos:start="387:9" pos:end="387:53"><call pos:start="387:9" pos:end="387:53"><name pos:start="387:9" pos:end="387:23">cpu_load_eflags</name><argument_list pos:start="387:24" pos:end="387:53">(<argument pos:start="387:25" pos:end="387:27"><expr pos:start="387:25" pos:end="387:27"><name pos:start="387:25" pos:end="387:27">env</name></expr></argument>, <argument pos:start="387:30" pos:end="387:39"><expr pos:start="387:30" pos:end="387:39"><name pos:start="387:30" pos:end="387:39">new_eflags</name></expr></argument>, <argument pos:start="387:42" pos:end="387:52"><expr pos:start="387:42" pos:end="387:52"><name pos:start="387:42" pos:end="387:52">eflags_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="391:5" pos:end="391:11">return;</return>



 <label pos:start="395:2" pos:end="395:16"><name pos:start="395:2" pos:end="395:15">return_to_vm86</name>:</label>

    <expr_stmt pos:start="397:5" pos:end="397:36"><expr pos:start="397:5" pos:end="397:35"><call pos:start="397:5" pos:end="397:35"><name pos:start="397:5" pos:end="397:8">POPL</name><argument_list pos:start="397:9" pos:end="397:35">(<argument pos:start="397:10" pos:end="397:12"><expr pos:start="397:10" pos:end="397:12"><name pos:start="397:10" pos:end="397:12">ssp</name></expr></argument>, <argument pos:start="397:15" pos:end="397:16"><expr pos:start="397:15" pos:end="397:16"><name pos:start="397:15" pos:end="397:16">sp</name></expr></argument>, <argument pos:start="397:19" pos:end="397:25"><expr pos:start="397:19" pos:end="397:25"><name pos:start="397:19" pos:end="397:25">sp_mask</name></expr></argument>, <argument pos:start="397:28" pos:end="397:34"><expr pos:start="397:28" pos:end="397:34"><name pos:start="397:28" pos:end="397:34">new_esp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="399:5" pos:end="399:35"><expr pos:start="399:5" pos:end="399:34"><call pos:start="399:5" pos:end="399:34"><name pos:start="399:5" pos:end="399:8">POPL</name><argument_list pos:start="399:9" pos:end="399:34">(<argument pos:start="399:10" pos:end="399:12"><expr pos:start="399:10" pos:end="399:12"><name pos:start="399:10" pos:end="399:12">ssp</name></expr></argument>, <argument pos:start="399:15" pos:end="399:16"><expr pos:start="399:15" pos:end="399:16"><name pos:start="399:15" pos:end="399:16">sp</name></expr></argument>, <argument pos:start="399:19" pos:end="399:25"><expr pos:start="399:19" pos:end="399:25"><name pos:start="399:19" pos:end="399:25">sp_mask</name></expr></argument>, <argument pos:start="399:28" pos:end="399:33"><expr pos:start="399:28" pos:end="399:33"><name pos:start="399:28" pos:end="399:33">new_ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="401:5" pos:end="401:35"><expr pos:start="401:5" pos:end="401:34"><call pos:start="401:5" pos:end="401:34"><name pos:start="401:5" pos:end="401:8">POPL</name><argument_list pos:start="401:9" pos:end="401:34">(<argument pos:start="401:10" pos:end="401:12"><expr pos:start="401:10" pos:end="401:12"><name pos:start="401:10" pos:end="401:12">ssp</name></expr></argument>, <argument pos:start="401:15" pos:end="401:16"><expr pos:start="401:15" pos:end="401:16"><name pos:start="401:15" pos:end="401:16">sp</name></expr></argument>, <argument pos:start="401:19" pos:end="401:25"><expr pos:start="401:19" pos:end="401:25"><name pos:start="401:19" pos:end="401:25">sp_mask</name></expr></argument>, <argument pos:start="401:28" pos:end="401:33"><expr pos:start="401:28" pos:end="401:33"><name pos:start="401:28" pos:end="401:33">new_es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="403:5" pos:end="403:35"><expr pos:start="403:5" pos:end="403:34"><call pos:start="403:5" pos:end="403:34"><name pos:start="403:5" pos:end="403:8">POPL</name><argument_list pos:start="403:9" pos:end="403:34">(<argument pos:start="403:10" pos:end="403:12"><expr pos:start="403:10" pos:end="403:12"><name pos:start="403:10" pos:end="403:12">ssp</name></expr></argument>, <argument pos:start="403:15" pos:end="403:16"><expr pos:start="403:15" pos:end="403:16"><name pos:start="403:15" pos:end="403:16">sp</name></expr></argument>, <argument pos:start="403:19" pos:end="403:25"><expr pos:start="403:19" pos:end="403:25"><name pos:start="403:19" pos:end="403:25">sp_mask</name></expr></argument>, <argument pos:start="403:28" pos:end="403:33"><expr pos:start="403:28" pos:end="403:33"><name pos:start="403:28" pos:end="403:33">new_ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="405:5" pos:end="405:35"><expr pos:start="405:5" pos:end="405:34"><call pos:start="405:5" pos:end="405:34"><name pos:start="405:5" pos:end="405:8">POPL</name><argument_list pos:start="405:9" pos:end="405:34">(<argument pos:start="405:10" pos:end="405:12"><expr pos:start="405:10" pos:end="405:12"><name pos:start="405:10" pos:end="405:12">ssp</name></expr></argument>, <argument pos:start="405:15" pos:end="405:16"><expr pos:start="405:15" pos:end="405:16"><name pos:start="405:15" pos:end="405:16">sp</name></expr></argument>, <argument pos:start="405:19" pos:end="405:25"><expr pos:start="405:19" pos:end="405:25"><name pos:start="405:19" pos:end="405:25">sp_mask</name></expr></argument>, <argument pos:start="405:28" pos:end="405:33"><expr pos:start="405:28" pos:end="405:33"><name pos:start="405:28" pos:end="405:33">new_fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="407:5" pos:end="407:35"><expr pos:start="407:5" pos:end="407:34"><call pos:start="407:5" pos:end="407:34"><name pos:start="407:5" pos:end="407:8">POPL</name><argument_list pos:start="407:9" pos:end="407:34">(<argument pos:start="407:10" pos:end="407:12"><expr pos:start="407:10" pos:end="407:12"><name pos:start="407:10" pos:end="407:12">ssp</name></expr></argument>, <argument pos:start="407:15" pos:end="407:16"><expr pos:start="407:15" pos:end="407:16"><name pos:start="407:15" pos:end="407:16">sp</name></expr></argument>, <argument pos:start="407:19" pos:end="407:25"><expr pos:start="407:19" pos:end="407:25"><name pos:start="407:19" pos:end="407:25">sp_mask</name></expr></argument>, <argument pos:start="407:28" pos:end="407:33"><expr pos:start="407:28" pos:end="407:33"><name pos:start="407:28" pos:end="407:33">new_gs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="411:5" pos:end="411:32">/* modify processor state */</comment>

    <expr_stmt pos:start="413:5" pos:end="417:30"><expr pos:start="413:5" pos:end="417:29"><call pos:start="413:5" pos:end="417:29"><name pos:start="413:5" pos:end="413:19">cpu_load_eflags</name><argument_list pos:start="413:20" pos:end="417:29">(<argument pos:start="413:21" pos:end="413:23"><expr pos:start="413:21" pos:end="413:23"><name pos:start="413:21" pos:end="413:23">env</name></expr></argument>, <argument pos:start="413:26" pos:end="413:35"><expr pos:start="413:26" pos:end="413:35"><name pos:start="413:26" pos:end="413:35">new_eflags</name></expr></argument>, <argument pos:start="413:38" pos:end="417:28"><expr pos:start="413:38" pos:end="417:28"><name pos:start="413:38" pos:end="413:44">TF_MASK</name> <operator pos:start="413:46" pos:end="413:46">|</operator> <name pos:start="413:48" pos:end="413:54">AC_MASK</name> <operator pos:start="413:56" pos:end="413:56">|</operator> <name pos:start="413:58" pos:end="413:64">ID_MASK</name> <operator pos:start="413:66" pos:end="413:66">|</operator>

                    <name pos:start="415:21" pos:end="415:27">IF_MASK</name> <operator pos:start="415:29" pos:end="415:29">|</operator> <name pos:start="415:31" pos:end="415:39">IOPL_MASK</name> <operator pos:start="415:41" pos:end="415:41">|</operator> <name pos:start="415:43" pos:end="415:49">VM_MASK</name> <operator pos:start="415:51" pos:end="415:51">|</operator> <name pos:start="415:53" pos:end="415:59">NT_MASK</name> <operator pos:start="415:61" pos:end="415:61">|</operator> <name pos:start="415:63" pos:end="415:70">VIF_MASK</name> <operator pos:start="415:72" pos:end="415:72">|</operator>

                    <name pos:start="417:21" pos:end="417:28">VIP_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="419:5" pos:end="419:44"><expr pos:start="419:5" pos:end="419:43"><call pos:start="419:5" pos:end="419:43"><name pos:start="419:5" pos:end="419:15">load_seg_vm</name><argument_list pos:start="419:16" pos:end="419:43">(<argument pos:start="419:17" pos:end="419:19"><expr pos:start="419:17" pos:end="419:19"><name pos:start="419:17" pos:end="419:19">env</name></expr></argument>, <argument pos:start="419:22" pos:end="419:25"><expr pos:start="419:22" pos:end="419:25"><name pos:start="419:22" pos:end="419:25">R_CS</name></expr></argument>, <argument pos:start="419:28" pos:end="419:42"><expr pos:start="419:28" pos:end="419:42"><name pos:start="419:28" pos:end="419:33">new_cs</name> <operator pos:start="419:35" pos:end="419:35">&amp;</operator> <literal type="number" pos:start="419:37" pos:end="419:42">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="421:5" pos:end="421:28"><expr pos:start="421:5" pos:end="421:27"><call pos:start="421:5" pos:end="421:27"><name pos:start="421:5" pos:end="421:19">cpu_x86_set_cpl</name><argument_list pos:start="421:20" pos:end="421:27">(<argument pos:start="421:21" pos:end="421:23"><expr pos:start="421:21" pos:end="421:23"><name pos:start="421:21" pos:end="421:23">env</name></expr></argument>, <argument pos:start="421:26" pos:end="421:26"><expr pos:start="421:26" pos:end="421:26"><literal type="number" pos:start="421:26" pos:end="421:26">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="423:5" pos:end="423:44"><expr pos:start="423:5" pos:end="423:43"><call pos:start="423:5" pos:end="423:43"><name pos:start="423:5" pos:end="423:15">load_seg_vm</name><argument_list pos:start="423:16" pos:end="423:43">(<argument pos:start="423:17" pos:end="423:19"><expr pos:start="423:17" pos:end="423:19"><name pos:start="423:17" pos:end="423:19">env</name></expr></argument>, <argument pos:start="423:22" pos:end="423:25"><expr pos:start="423:22" pos:end="423:25"><name pos:start="423:22" pos:end="423:25">R_SS</name></expr></argument>, <argument pos:start="423:28" pos:end="423:42"><expr pos:start="423:28" pos:end="423:42"><name pos:start="423:28" pos:end="423:33">new_ss</name> <operator pos:start="423:35" pos:end="423:35">&amp;</operator> <literal type="number" pos:start="423:37" pos:end="423:42">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="425:5" pos:end="425:44"><expr pos:start="425:5" pos:end="425:43"><call pos:start="425:5" pos:end="425:43"><name pos:start="425:5" pos:end="425:15">load_seg_vm</name><argument_list pos:start="425:16" pos:end="425:43">(<argument pos:start="425:17" pos:end="425:19"><expr pos:start="425:17" pos:end="425:19"><name pos:start="425:17" pos:end="425:19">env</name></expr></argument>, <argument pos:start="425:22" pos:end="425:25"><expr pos:start="425:22" pos:end="425:25"><name pos:start="425:22" pos:end="425:25">R_ES</name></expr></argument>, <argument pos:start="425:28" pos:end="425:42"><expr pos:start="425:28" pos:end="425:42"><name pos:start="425:28" pos:end="425:33">new_es</name> <operator pos:start="425:35" pos:end="425:35">&amp;</operator> <literal type="number" pos:start="425:37" pos:end="425:42">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="427:5" pos:end="427:44"><expr pos:start="427:5" pos:end="427:43"><call pos:start="427:5" pos:end="427:43"><name pos:start="427:5" pos:end="427:15">load_seg_vm</name><argument_list pos:start="427:16" pos:end="427:43">(<argument pos:start="427:17" pos:end="427:19"><expr pos:start="427:17" pos:end="427:19"><name pos:start="427:17" pos:end="427:19">env</name></expr></argument>, <argument pos:start="427:22" pos:end="427:25"><expr pos:start="427:22" pos:end="427:25"><name pos:start="427:22" pos:end="427:25">R_DS</name></expr></argument>, <argument pos:start="427:28" pos:end="427:42"><expr pos:start="427:28" pos:end="427:42"><name pos:start="427:28" pos:end="427:33">new_ds</name> <operator pos:start="427:35" pos:end="427:35">&amp;</operator> <literal type="number" pos:start="427:37" pos:end="427:42">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="429:5" pos:end="429:44"><expr pos:start="429:5" pos:end="429:43"><call pos:start="429:5" pos:end="429:43"><name pos:start="429:5" pos:end="429:15">load_seg_vm</name><argument_list pos:start="429:16" pos:end="429:43">(<argument pos:start="429:17" pos:end="429:19"><expr pos:start="429:17" pos:end="429:19"><name pos:start="429:17" pos:end="429:19">env</name></expr></argument>, <argument pos:start="429:22" pos:end="429:25"><expr pos:start="429:22" pos:end="429:25"><name pos:start="429:22" pos:end="429:25">R_FS</name></expr></argument>, <argument pos:start="429:28" pos:end="429:42"><expr pos:start="429:28" pos:end="429:42"><name pos:start="429:28" pos:end="429:33">new_fs</name> <operator pos:start="429:35" pos:end="429:35">&amp;</operator> <literal type="number" pos:start="429:37" pos:end="429:42">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="431:5" pos:end="431:44"><expr pos:start="431:5" pos:end="431:43"><call pos:start="431:5" pos:end="431:43"><name pos:start="431:5" pos:end="431:15">load_seg_vm</name><argument_list pos:start="431:16" pos:end="431:43">(<argument pos:start="431:17" pos:end="431:19"><expr pos:start="431:17" pos:end="431:19"><name pos:start="431:17" pos:end="431:19">env</name></expr></argument>, <argument pos:start="431:22" pos:end="431:25"><expr pos:start="431:22" pos:end="431:25"><name pos:start="431:22" pos:end="431:25">R_GS</name></expr></argument>, <argument pos:start="431:28" pos:end="431:42"><expr pos:start="431:28" pos:end="431:42"><name pos:start="431:28" pos:end="431:33">new_gs</name> <operator pos:start="431:35" pos:end="431:35">&amp;</operator> <literal type="number" pos:start="431:37" pos:end="431:42">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="435:5" pos:end="435:32"><expr pos:start="435:5" pos:end="435:31"><name pos:start="435:5" pos:end="435:12"><name pos:start="435:5" pos:end="435:7">env</name><operator pos:start="435:8" pos:end="435:9">-&gt;</operator><name pos:start="435:10" pos:end="435:12">eip</name></name> <operator pos:start="435:14" pos:end="435:14">=</operator> <name pos:start="435:16" pos:end="435:22">new_eip</name> <operator pos:start="435:24" pos:end="435:24">&amp;</operator> <literal type="number" pos:start="435:26" pos:end="435:31">0xffff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="437:5" pos:end="437:31"><expr pos:start="437:5" pos:end="437:30"><name pos:start="437:5" pos:end="437:20"><name pos:start="437:5" pos:end="437:7">env</name><operator pos:start="437:8" pos:end="437:9">-&gt;</operator><name pos:start="437:10" pos:end="437:13">regs</name><index pos:start="437:14" pos:end="437:20">[<expr pos:start="437:15" pos:end="437:19"><name pos:start="437:15" pos:end="437:19">R_ESP</name></expr>]</index></name> <operator pos:start="437:22" pos:end="437:22">=</operator> <name pos:start="437:24" pos:end="437:30">new_esp</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
