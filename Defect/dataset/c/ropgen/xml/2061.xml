<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2061.c" pos:tabs="8"><function pos:start="1:1" pos:end="227:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">xan_wc3_decode_frame</name><parameter_list pos:start="1:33" pos:end="1:47">(<parameter pos:start="1:34" pos:end="1:46"><decl pos:start="1:34" pos:end="1:46"><type pos:start="1:34" pos:end="1:45"><name pos:start="1:34" pos:end="1:43">XanContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>)</parameter_list> <block pos:start="1:49" pos:end="227:1">{<block_content pos:start="5:5" pos:end="225:5">



    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">width</name> <init pos:start="5:15" pos:end="5:31">= <expr pos:start="5:17" pos:end="5:31"><name pos:start="5:17" pos:end="5:31"><name pos:start="5:17" pos:end="5:17">s</name><operator pos:start="5:18" pos:end="5:19">-&gt;</operator><name pos:start="5:20" pos:end="5:24">avctx</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:31">width</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">height</name> <init pos:start="7:16" pos:end="7:33">= <expr pos:start="7:18" pos:end="7:33"><name pos:start="7:18" pos:end="7:33"><name pos:start="7:18" pos:end="7:18">s</name><operator pos:start="7:19" pos:end="7:20">-&gt;</operator><name pos:start="7:21" pos:end="7:25">avctx</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">height</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:20">total_pixels</name> <init pos:start="9:22" pos:end="9:37">= <expr pos:start="9:24" pos:end="9:37"><name pos:start="9:24" pos:end="9:28">width</name> <operator pos:start="9:30" pos:end="9:30">*</operator> <name pos:start="9:32" pos:end="9:37">height</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">char</name></type> <name pos:start="11:19" pos:end="11:24">opcode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">char</name></type> <name pos:start="13:19" pos:end="13:22">flag</name> <init pos:start="13:24" pos:end="13:26">= <expr pos:start="13:26" pos:end="13:26"><literal type="number" pos:start="13:26" pos:end="13:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">size</name> <init pos:start="15:14" pos:end="15:16">= <expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:16">motion_x</name></decl>, <decl pos:start="17:19" pos:end="17:26"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:19" pos:end="17:26">motion_y</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:13"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">x</name></decl>, <decl pos:start="19:12" pos:end="19:12"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:12" pos:end="19:12">y</name></decl>;</decl_stmt>



    <decl_stmt pos:start="23:5" pos:end="23:46"><decl pos:start="23:5" pos:end="23:45"><type pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:12">unsigned</name> <name pos:start="23:14" pos:end="23:17">char</name> <modifier pos:start="23:19" pos:end="23:19">*</modifier></type><name pos:start="23:20" pos:end="23:32">opcode_buffer</name> <init pos:start="23:34" pos:end="23:45">= <expr pos:start="23:36" pos:end="23:45"><name pos:start="23:36" pos:end="23:45"><name pos:start="23:36" pos:end="23:36">s</name><operator pos:start="23:37" pos:end="23:38">-&gt;</operator><name pos:start="23:39" pos:end="23:45">buffer1</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:45"><decl pos:start="25:5" pos:end="25:44"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:26">opcode_buffer_size</name> <init pos:start="25:28" pos:end="25:44">= <expr pos:start="25:30" pos:end="25:44"><name pos:start="25:30" pos:end="25:44"><name pos:start="25:30" pos:end="25:30">s</name><operator pos:start="25:31" pos:end="25:32">-&gt;</operator><name pos:start="25:33" pos:end="25:44">buffer1_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:55"><decl pos:start="27:5" pos:end="27:54"><type pos:start="27:5" pos:end="27:25"><specifier pos:start="27:5" pos:end="27:9">const</specifier> <name pos:start="27:11" pos:end="27:18">unsigned</name> <name pos:start="27:20" pos:end="27:23">char</name> <modifier pos:start="27:25" pos:end="27:25">*</modifier></type><name pos:start="27:26" pos:end="27:41">imagedata_buffer</name> <init pos:start="27:43" pos:end="27:54">= <expr pos:start="27:45" pos:end="27:54"><name pos:start="27:45" pos:end="27:54"><name pos:start="27:45" pos:end="27:45">s</name><operator pos:start="27:46" pos:end="27:47">-&gt;</operator><name pos:start="27:48" pos:end="27:54">buffer2</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:58">/* pointers to segments inside the compressed chunk */</comment>

    <decl_stmt pos:start="33:5" pos:end="33:41"><decl pos:start="33:5" pos:end="33:40"><type pos:start="33:5" pos:end="33:25"><specifier pos:start="33:5" pos:end="33:9">const</specifier> <name pos:start="33:11" pos:end="33:18">unsigned</name> <name pos:start="33:20" pos:end="33:23">char</name> <modifier pos:start="33:25" pos:end="33:25">*</modifier></type><name pos:start="33:26" pos:end="33:40">huffman_segment</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:38"><decl pos:start="35:5" pos:end="35:37"><type pos:start="35:5" pos:end="35:25"><specifier pos:start="35:5" pos:end="35:9">const</specifier> <name pos:start="35:11" pos:end="35:18">unsigned</name> <name pos:start="35:20" pos:end="35:23">char</name> <modifier pos:start="35:25" pos:end="35:25">*</modifier></type><name pos:start="35:26" pos:end="35:37">size_segment</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:40"><decl pos:start="37:5" pos:end="37:39"><type pos:start="37:5" pos:end="37:25"><specifier pos:start="37:5" pos:end="37:9">const</specifier> <name pos:start="37:11" pos:end="37:18">unsigned</name> <name pos:start="37:20" pos:end="37:23">char</name> <modifier pos:start="37:25" pos:end="37:25">*</modifier></type><name pos:start="37:26" pos:end="37:39">vector_segment</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:43"><decl pos:start="39:5" pos:end="39:42"><type pos:start="39:5" pos:end="39:25"><specifier pos:start="39:5" pos:end="39:9">const</specifier> <name pos:start="39:11" pos:end="39:18">unsigned</name> <name pos:start="39:20" pos:end="39:23">char</name> <modifier pos:start="39:25" pos:end="39:25">*</modifier></type><name pos:start="39:26" pos:end="39:42">imagedata_segment</name></decl>;</decl_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:53"><expr pos:start="43:5" pos:end="43:52"><name pos:start="43:5" pos:end="43:19">huffman_segment</name> <operator pos:start="43:21" pos:end="43:21">=</operator>   <name pos:start="43:25" pos:end="43:30"><name pos:start="43:25" pos:end="43:25">s</name><operator pos:start="43:26" pos:end="43:27">-&gt;</operator><name pos:start="43:28" pos:end="43:30">buf</name></name> <operator pos:start="43:32" pos:end="43:32">+</operator> <call pos:start="43:34" pos:end="43:52"><name pos:start="43:34" pos:end="43:40">AV_RL16</name><argument_list pos:start="43:41" pos:end="43:52">(<argument pos:start="43:42" pos:end="43:51"><expr pos:start="43:42" pos:end="43:51"><operator pos:start="43:42" pos:end="43:42">&amp;</operator><name pos:start="43:43" pos:end="43:51"><name pos:start="43:43" pos:end="43:43">s</name><operator pos:start="43:44" pos:end="43:45">-&gt;</operator><name pos:start="43:46" pos:end="43:48">buf</name><index pos:start="43:49" pos:end="43:51">[<expr pos:start="43:50" pos:end="43:50"><literal type="number" pos:start="43:50" pos:end="43:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:53"><expr pos:start="45:5" pos:end="45:52"><name pos:start="45:5" pos:end="45:16">size_segment</name> <operator pos:start="45:18" pos:end="45:18">=</operator>      <name pos:start="45:25" pos:end="45:30"><name pos:start="45:25" pos:end="45:25">s</name><operator pos:start="45:26" pos:end="45:27">-&gt;</operator><name pos:start="45:28" pos:end="45:30">buf</name></name> <operator pos:start="45:32" pos:end="45:32">+</operator> <call pos:start="45:34" pos:end="45:52"><name pos:start="45:34" pos:end="45:40">AV_RL16</name><argument_list pos:start="45:41" pos:end="45:52">(<argument pos:start="45:42" pos:end="45:51"><expr pos:start="45:42" pos:end="45:51"><operator pos:start="45:42" pos:end="45:42">&amp;</operator><name pos:start="45:43" pos:end="45:51"><name pos:start="45:43" pos:end="45:43">s</name><operator pos:start="45:44" pos:end="45:45">-&gt;</operator><name pos:start="45:46" pos:end="45:48">buf</name><index pos:start="45:49" pos:end="45:51">[<expr pos:start="45:50" pos:end="45:50"><literal type="number" pos:start="45:50" pos:end="45:50">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:53"><expr pos:start="47:5" pos:end="47:52"><name pos:start="47:5" pos:end="47:18">vector_segment</name> <operator pos:start="47:20" pos:end="47:20">=</operator>    <name pos:start="47:25" pos:end="47:30"><name pos:start="47:25" pos:end="47:25">s</name><operator pos:start="47:26" pos:end="47:27">-&gt;</operator><name pos:start="47:28" pos:end="47:30">buf</name></name> <operator pos:start="47:32" pos:end="47:32">+</operator> <call pos:start="47:34" pos:end="47:52"><name pos:start="47:34" pos:end="47:40">AV_RL16</name><argument_list pos:start="47:41" pos:end="47:52">(<argument pos:start="47:42" pos:end="47:51"><expr pos:start="47:42" pos:end="47:51"><operator pos:start="47:42" pos:end="47:42">&amp;</operator><name pos:start="47:43" pos:end="47:51"><name pos:start="47:43" pos:end="47:43">s</name><operator pos:start="47:44" pos:end="47:45">-&gt;</operator><name pos:start="47:46" pos:end="47:48">buf</name><index pos:start="47:49" pos:end="47:51">[<expr pos:start="47:50" pos:end="47:50"><literal type="number" pos:start="47:50" pos:end="47:50">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:53"><expr pos:start="49:5" pos:end="49:52"><name pos:start="49:5" pos:end="49:21">imagedata_segment</name> <operator pos:start="49:23" pos:end="49:23">=</operator> <name pos:start="49:25" pos:end="49:30"><name pos:start="49:25" pos:end="49:25">s</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:30">buf</name></name> <operator pos:start="49:32" pos:end="49:32">+</operator> <call pos:start="49:34" pos:end="49:52"><name pos:start="49:34" pos:end="49:40">AV_RL16</name><argument_list pos:start="49:41" pos:end="49:52">(<argument pos:start="49:42" pos:end="49:51"><expr pos:start="49:42" pos:end="49:51"><operator pos:start="49:42" pos:end="49:42">&amp;</operator><name pos:start="49:43" pos:end="49:51"><name pos:start="49:43" pos:end="49:43">s</name><operator pos:start="49:44" pos:end="49:45">-&gt;</operator><name pos:start="49:46" pos:end="49:48">buf</name><index pos:start="49:49" pos:end="49:51">[<expr pos:start="49:50" pos:end="49:50"><literal type="number" pos:start="49:50" pos:end="49:50">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="55:79"><expr pos:start="53:5" pos:end="55:78"><call pos:start="53:5" pos:end="55:78"><name pos:start="53:5" pos:end="53:22">xan_huffman_decode</name><argument_list pos:start="53:23" pos:end="55:78">(<argument pos:start="53:24" pos:end="53:36"><expr pos:start="53:24" pos:end="53:36"><name pos:start="53:24" pos:end="53:36">opcode_buffer</name></expr></argument>, <argument pos:start="53:39" pos:end="53:56"><expr pos:start="53:39" pos:end="53:56"><name pos:start="53:39" pos:end="53:56">opcode_buffer_size</name></expr></argument>,

                       <argument pos:start="55:24" pos:end="55:38"><expr pos:start="55:24" pos:end="55:38"><name pos:start="55:24" pos:end="55:38">huffman_segment</name></expr></argument>, <argument pos:start="55:41" pos:end="55:76"><expr pos:start="55:41" pos:end="55:76"><name pos:start="55:41" pos:end="55:47"><name pos:start="55:41" pos:end="55:41">s</name><operator pos:start="55:42" pos:end="55:43">-&gt;</operator><name pos:start="55:44" pos:end="55:47">size</name></name> <operator pos:start="55:49" pos:end="55:49">-</operator> <operator pos:start="55:51" pos:end="55:51">(</operator><name pos:start="55:52" pos:end="55:66">huffman_segment</name> <operator pos:start="55:68" pos:end="55:68">-</operator> <name pos:start="55:70" pos:end="55:75"><name pos:start="55:70" pos:end="55:70">s</name><operator pos:start="55:71" pos:end="55:72">-&gt;</operator><name pos:start="55:73" pos:end="55:75">buf</name></name><operator pos:start="55:76" pos:end="55:76">)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="59:5" pos:end="65:49"><if pos:start="59:5" pos:end="61:71">if <condition pos:start="59:8" pos:end="59:34">(<expr pos:start="59:9" pos:end="59:33"><name pos:start="59:9" pos:end="59:28"><name pos:start="59:9" pos:end="59:25">imagedata_segment</name><index pos:start="59:26" pos:end="59:28">[<expr pos:start="59:27" pos:end="59:27"><literal type="number" pos:start="59:27" pos:end="59:27">0</literal></expr>]</index></name> <operator pos:start="59:30" pos:end="59:31">==</operator> <literal type="number" pos:start="59:33" pos:end="59:33">2</literal></expr>)</condition><block type="pseudo" pos:start="61:9" pos:end="61:71"><block_content pos:start="61:9" pos:end="61:71">

        <expr_stmt pos:start="61:9" pos:end="61:71"><expr pos:start="61:9" pos:end="61:70"><call pos:start="61:9" pos:end="61:70"><name pos:start="61:9" pos:end="61:18">xan_unpack</name><argument_list pos:start="61:19" pos:end="61:70">(<argument pos:start="61:20" pos:end="61:29"><expr pos:start="61:20" pos:end="61:29"><name pos:start="61:20" pos:end="61:29"><name pos:start="61:20" pos:end="61:20">s</name><operator pos:start="61:21" pos:end="61:22">-&gt;</operator><name pos:start="61:23" pos:end="61:29">buffer2</name></name></expr></argument>, <argument pos:start="61:32" pos:end="61:52"><expr pos:start="61:32" pos:end="61:52"><operator pos:start="61:32" pos:end="61:32">&amp;</operator><name pos:start="61:33" pos:end="61:52"><name pos:start="61:33" pos:end="61:49">imagedata_segment</name><index pos:start="61:50" pos:end="61:52">[<expr pos:start="61:51" pos:end="61:51"><literal type="number" pos:start="61:51" pos:end="61:51">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="61:55" pos:end="61:69"><expr pos:start="61:55" pos:end="61:69"><name pos:start="61:55" pos:end="61:69"><name pos:start="61:55" pos:end="61:55">s</name><operator pos:start="61:56" pos:end="61:57">-&gt;</operator><name pos:start="61:58" pos:end="61:69">buffer2_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="63:5" pos:end="65:49">else<block type="pseudo" pos:start="65:9" pos:end="65:49"><block_content pos:start="65:9" pos:end="65:49">

        <expr_stmt pos:start="65:9" pos:end="65:49"><expr pos:start="65:9" pos:end="65:48"><name pos:start="65:9" pos:end="65:24">imagedata_buffer</name> <operator pos:start="65:26" pos:end="65:26">=</operator> <operator pos:start="65:28" pos:end="65:28">&amp;</operator><name pos:start="65:29" pos:end="65:48"><name pos:start="65:29" pos:end="65:45">imagedata_segment</name><index pos:start="65:46" pos:end="65:48">[<expr pos:start="65:47" pos:end="65:47"><literal type="number" pos:start="65:47" pos:end="65:47">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <comment type="block" pos:start="69:5" pos:end="69:58">/* use the decoded data segments to build the frame */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:14"><expr pos:start="71:5" pos:end="71:13"><name pos:start="71:5" pos:end="71:5">x</name> <operator pos:start="71:7" pos:end="71:7">=</operator> <name pos:start="71:9" pos:end="71:9">y</name> <operator pos:start="71:11" pos:end="71:11">=</operator> <literal type="number" pos:start="71:13" pos:end="71:13">0</literal></expr>;</expr_stmt>

    <while pos:start="73:5" pos:end="225:5">while <condition pos:start="73:11" pos:end="73:24">(<expr pos:start="73:12" pos:end="73:23"><name pos:start="73:12" pos:end="73:23">total_pixels</name></expr>)</condition> <block pos:start="73:26" pos:end="225:5">{<block_content pos:start="77:9" pos:end="223:32">



        <expr_stmt pos:start="77:9" pos:end="77:34"><expr pos:start="77:9" pos:end="77:33"><name pos:start="77:9" pos:end="77:14">opcode</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <operator pos:start="77:18" pos:end="77:18">*</operator><name pos:start="77:19" pos:end="77:31">opcode_buffer</name><operator pos:start="77:32" pos:end="77:33">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:17"><expr pos:start="79:9" pos:end="79:16"><name pos:start="79:9" pos:end="79:12">size</name> <operator pos:start="79:14" pos:end="79:14">=</operator> <literal type="number" pos:start="79:16" pos:end="79:16">0</literal></expr>;</expr_stmt>



        <switch pos:start="83:9" pos:end="169:9">switch <condition pos:start="83:16" pos:end="83:23">(<expr pos:start="83:17" pos:end="83:22"><name pos:start="83:17" pos:end="83:22">opcode</name></expr>)</condition> <block pos:start="83:25" pos:end="169:9">{<block_content pos:start="87:9" pos:end="167:18">



        <case pos:start="87:9" pos:end="87:15">case <expr pos:start="87:14" pos:end="87:14"><literal type="number" pos:start="87:14" pos:end="87:14">0</literal></expr>:</case>

            <expr_stmt pos:start="89:13" pos:end="89:22"><expr pos:start="89:13" pos:end="89:21"><name pos:start="89:13" pos:end="89:16">flag</name> <operator pos:start="89:18" pos:end="89:19">^=</operator> <literal type="number" pos:start="89:21" pos:end="89:21">1</literal></expr>;</expr_stmt>

            <continue pos:start="91:13" pos:end="91:21">continue;</continue>



        <case pos:start="95:9" pos:end="95:15">case <expr pos:start="95:14" pos:end="95:14"><literal type="number" pos:start="95:14" pos:end="95:14">1</literal></expr>:</case>

        <case pos:start="97:9" pos:end="97:15">case <expr pos:start="97:14" pos:end="97:14"><literal type="number" pos:start="97:14" pos:end="97:14">2</literal></expr>:</case>

        <case pos:start="99:9" pos:end="99:15">case <expr pos:start="99:14" pos:end="99:14"><literal type="number" pos:start="99:14" pos:end="99:14">3</literal></expr>:</case>

        <case pos:start="101:9" pos:end="101:15">case <expr pos:start="101:14" pos:end="101:14"><literal type="number" pos:start="101:14" pos:end="101:14">4</literal></expr>:</case>

        <case pos:start="103:9" pos:end="103:15">case <expr pos:start="103:14" pos:end="103:14"><literal type="number" pos:start="103:14" pos:end="103:14">5</literal></expr>:</case>

        <case pos:start="105:9" pos:end="105:15">case <expr pos:start="105:14" pos:end="105:14"><literal type="number" pos:start="105:14" pos:end="105:14">6</literal></expr>:</case>

        <case pos:start="107:9" pos:end="107:15">case <expr pos:start="107:14" pos:end="107:14"><literal type="number" pos:start="107:14" pos:end="107:14">7</literal></expr>:</case>

        <case pos:start="109:9" pos:end="109:15">case <expr pos:start="109:14" pos:end="109:14"><literal type="number" pos:start="109:14" pos:end="109:14">8</literal></expr>:</case>

            <expr_stmt pos:start="111:13" pos:end="111:26"><expr pos:start="111:13" pos:end="111:25"><name pos:start="111:13" pos:end="111:16">size</name> <operator pos:start="111:18" pos:end="111:18">=</operator> <name pos:start="111:20" pos:end="111:25">opcode</name></expr>;</expr_stmt>

            <break pos:start="113:13" pos:end="113:18">break;</break>



        <case pos:start="117:9" pos:end="117:16">case <expr pos:start="117:14" pos:end="117:15"><literal type="number" pos:start="117:14" pos:end="117:15">12</literal></expr>:</case>

        <case pos:start="119:9" pos:end="119:16">case <expr pos:start="119:14" pos:end="119:15"><literal type="number" pos:start="119:14" pos:end="119:15">13</literal></expr>:</case>

        <case pos:start="121:9" pos:end="121:16">case <expr pos:start="121:14" pos:end="121:15"><literal type="number" pos:start="121:14" pos:end="121:15">14</literal></expr>:</case>

        <case pos:start="123:9" pos:end="123:16">case <expr pos:start="123:14" pos:end="123:15"><literal type="number" pos:start="123:14" pos:end="123:15">15</literal></expr>:</case>

        <case pos:start="125:9" pos:end="125:16">case <expr pos:start="125:14" pos:end="125:15"><literal type="number" pos:start="125:14" pos:end="125:15">16</literal></expr>:</case>

        <case pos:start="127:9" pos:end="127:16">case <expr pos:start="127:14" pos:end="127:15"><literal type="number" pos:start="127:14" pos:end="127:15">17</literal></expr>:</case>

        <case pos:start="129:9" pos:end="129:16">case <expr pos:start="129:14" pos:end="129:15"><literal type="number" pos:start="129:14" pos:end="129:15">18</literal></expr>:</case>

            <expr_stmt pos:start="131:13" pos:end="131:34"><expr pos:start="131:13" pos:end="131:33"><name pos:start="131:13" pos:end="131:16">size</name> <operator pos:start="131:18" pos:end="131:19">+=</operator> <operator pos:start="131:21" pos:end="131:21">(</operator><name pos:start="131:22" pos:end="131:27">opcode</name> <operator pos:start="131:29" pos:end="131:29">-</operator> <literal type="number" pos:start="131:31" pos:end="131:32">10</literal><operator pos:start="131:33" pos:end="131:33">)</operator></expr>;</expr_stmt>

            <break pos:start="133:13" pos:end="133:18">break;</break>



        <case pos:start="137:9" pos:end="137:15">case <expr pos:start="137:14" pos:end="137:14"><literal type="number" pos:start="137:14" pos:end="137:14">9</literal></expr>:</case>

        <case pos:start="139:9" pos:end="139:16">case <expr pos:start="139:14" pos:end="139:15"><literal type="number" pos:start="139:14" pos:end="139:15">19</literal></expr>:</case>

            <expr_stmt pos:start="141:13" pos:end="141:35"><expr pos:start="141:13" pos:end="141:34"><name pos:start="141:13" pos:end="141:16">size</name> <operator pos:start="141:18" pos:end="141:18">=</operator> <operator pos:start="141:20" pos:end="141:20">*</operator><name pos:start="141:21" pos:end="141:32">size_segment</name><operator pos:start="141:33" pos:end="141:34">++</operator></expr>;</expr_stmt>

            <break pos:start="143:13" pos:end="143:18">break;</break>



        <case pos:start="147:9" pos:end="147:16">case <expr pos:start="147:14" pos:end="147:15"><literal type="number" pos:start="147:14" pos:end="147:15">10</literal></expr>:</case>

        <case pos:start="149:9" pos:end="149:16">case <expr pos:start="149:14" pos:end="149:15"><literal type="number" pos:start="149:14" pos:end="149:15">20</literal></expr>:</case>

            <expr_stmt pos:start="151:13" pos:end="151:45"><expr pos:start="151:13" pos:end="151:44"><name pos:start="151:13" pos:end="151:16">size</name> <operator pos:start="151:18" pos:end="151:18">=</operator> <call pos:start="151:20" pos:end="151:44"><name pos:start="151:20" pos:end="151:26">AV_RB16</name><argument_list pos:start="151:27" pos:end="151:44">(<argument pos:start="151:28" pos:end="151:43"><expr pos:start="151:28" pos:end="151:43"><operator pos:start="151:28" pos:end="151:28">&amp;</operator><name pos:start="151:29" pos:end="151:43"><name pos:start="151:29" pos:end="151:40">size_segment</name><index pos:start="151:41" pos:end="151:43">[<expr pos:start="151:42" pos:end="151:42"><literal type="number" pos:start="151:42" pos:end="151:42">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:30"><expr pos:start="153:13" pos:end="153:29"><name pos:start="153:13" pos:end="153:24">size_segment</name> <operator pos:start="153:26" pos:end="153:27">+=</operator> <literal type="number" pos:start="153:29" pos:end="153:29">2</literal></expr>;</expr_stmt>

            <break pos:start="155:13" pos:end="155:18">break;</break>



        <case pos:start="159:9" pos:end="159:16">case <expr pos:start="159:14" pos:end="159:15"><literal type="number" pos:start="159:14" pos:end="159:15">11</literal></expr>:</case>

        <case pos:start="161:9" pos:end="161:16">case <expr pos:start="161:14" pos:end="161:15"><literal type="number" pos:start="161:14" pos:end="161:15">21</literal></expr>:</case>

            <expr_stmt pos:start="163:13" pos:end="163:41"><expr pos:start="163:13" pos:end="163:40"><name pos:start="163:13" pos:end="163:16">size</name> <operator pos:start="163:18" pos:end="163:18">=</operator> <call pos:start="163:20" pos:end="163:40"><name pos:start="163:20" pos:end="163:26">AV_RB24</name><argument_list pos:start="163:27" pos:end="163:40">(<argument pos:start="163:28" pos:end="163:39"><expr pos:start="163:28" pos:end="163:39"><name pos:start="163:28" pos:end="163:39">size_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:30"><expr pos:start="165:13" pos:end="165:29"><name pos:start="165:13" pos:end="165:24">size_segment</name> <operator pos:start="165:26" pos:end="165:27">+=</operator> <literal type="number" pos:start="165:29" pos:end="165:29">3</literal></expr>;</expr_stmt>

            <break pos:start="167:13" pos:end="167:18">break;</break>

        </block_content>}</block></switch>



        <if_stmt pos:start="173:9" pos:end="213:9"><if pos:start="173:9" pos:end="193:9">if <condition pos:start="173:12" pos:end="173:24">(<expr pos:start="173:13" pos:end="173:23"><name pos:start="173:13" pos:end="173:18">opcode</name> <operator pos:start="173:20" pos:end="173:20">&lt;</operator> <literal type="number" pos:start="173:22" pos:end="173:23">12</literal></expr>)</condition> <block pos:start="173:26" pos:end="193:9">{<block_content pos:start="175:13" pos:end="191:13">

            <expr_stmt pos:start="175:13" pos:end="175:22"><expr pos:start="175:13" pos:end="175:21"><name pos:start="175:13" pos:end="175:16">flag</name> <operator pos:start="175:18" pos:end="175:19">^=</operator> <literal type="number" pos:start="175:21" pos:end="175:21">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="177:13" pos:end="191:13"><if pos:start="177:13" pos:end="183:13">if <condition pos:start="177:16" pos:end="177:21">(<expr pos:start="177:17" pos:end="177:20"><name pos:start="177:17" pos:end="177:20">flag</name></expr>)</condition> <block pos:start="177:23" pos:end="183:13">{<block_content pos:start="181:17" pos:end="181:60">

                <comment type="block" pos:start="179:17" pos:end="179:71">/* run of (size) pixels is unchanged from last frame */</comment>

                <expr_stmt pos:start="181:17" pos:end="181:60"><expr pos:start="181:17" pos:end="181:59"><call pos:start="181:17" pos:end="181:59"><name pos:start="181:17" pos:end="181:38">xan_wc3_copy_pixel_run</name><argument_list pos:start="181:39" pos:end="181:59">(<argument pos:start="181:40" pos:end="181:40"><expr pos:start="181:40" pos:end="181:40"><name pos:start="181:40" pos:end="181:40">s</name></expr></argument>, <argument pos:start="181:43" pos:end="181:43"><expr pos:start="181:43" pos:end="181:43"><name pos:start="181:43" pos:end="181:43">x</name></expr></argument>, <argument pos:start="181:46" pos:end="181:46"><expr pos:start="181:46" pos:end="181:46"><name pos:start="181:46" pos:end="181:46">y</name></expr></argument>, <argument pos:start="181:49" pos:end="181:52"><expr pos:start="181:49" pos:end="181:52"><name pos:start="181:49" pos:end="181:52">size</name></expr></argument>, <argument pos:start="181:55" pos:end="181:55"><expr pos:start="181:55" pos:end="181:55"><literal type="number" pos:start="181:55" pos:end="181:55">0</literal></expr></argument>, <argument pos:start="181:58" pos:end="181:58"><expr pos:start="181:58" pos:end="181:58"><literal type="number" pos:start="181:58" pos:end="181:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="183:15" pos:end="191:13">else <block pos:start="183:20" pos:end="191:13">{<block_content pos:start="187:17" pos:end="189:41">

                <comment type="block" pos:start="185:17" pos:end="185:66">/* output a run of pixels from imagedata_buffer */</comment>

                <expr_stmt pos:start="187:17" pos:end="187:74"><expr pos:start="187:17" pos:end="187:73"><call pos:start="187:17" pos:end="187:73"><name pos:start="187:17" pos:end="187:40">xan_wc3_output_pixel_run</name><argument_list pos:start="187:41" pos:end="187:73">(<argument pos:start="187:42" pos:end="187:42"><expr pos:start="187:42" pos:end="187:42"><name pos:start="187:42" pos:end="187:42">s</name></expr></argument>, <argument pos:start="187:45" pos:end="187:60"><expr pos:start="187:45" pos:end="187:60"><name pos:start="187:45" pos:end="187:60">imagedata_buffer</name></expr></argument>, <argument pos:start="187:63" pos:end="187:63"><expr pos:start="187:63" pos:end="187:63"><name pos:start="187:63" pos:end="187:63">x</name></expr></argument>, <argument pos:start="187:66" pos:end="187:66"><expr pos:start="187:66" pos:end="187:66"><name pos:start="187:66" pos:end="187:66">y</name></expr></argument>, <argument pos:start="187:69" pos:end="187:72"><expr pos:start="187:69" pos:end="187:72"><name pos:start="187:69" pos:end="187:72">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="189:17" pos:end="189:41"><expr pos:start="189:17" pos:end="189:40"><name pos:start="189:17" pos:end="189:32">imagedata_buffer</name> <operator pos:start="189:34" pos:end="189:35">+=</operator> <name pos:start="189:37" pos:end="189:40">size</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="193:11" pos:end="213:9">else <block pos:start="193:16" pos:end="213:9">{<block_content pos:start="197:13" pos:end="211:21">

            <comment type="block" pos:start="195:13" pos:end="195:63">/* run-based motion compensation from last frame */</comment>

            <expr_stmt pos:start="197:13" pos:end="197:61"><expr pos:start="197:13" pos:end="197:60"><name pos:start="197:13" pos:end="197:20">motion_x</name> <operator pos:start="197:22" pos:end="197:22">=</operator> <call pos:start="197:24" pos:end="197:60"><name pos:start="197:24" pos:end="197:34">sign_extend</name><argument_list pos:start="197:35" pos:end="197:60">(<argument pos:start="197:36" pos:end="197:55"><expr pos:start="197:36" pos:end="197:55"><operator pos:start="197:36" pos:end="197:36">*</operator><name pos:start="197:37" pos:end="197:50">vector_segment</name> <operator pos:start="197:52" pos:end="197:53">&gt;&gt;</operator> <literal type="number" pos:start="197:55" pos:end="197:55">4</literal></expr></argument>,  <argument pos:start="197:59" pos:end="197:59"><expr pos:start="197:59" pos:end="197:59"><literal type="number" pos:start="197:59" pos:end="197:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="199:13" pos:end="199:61"><expr pos:start="199:13" pos:end="199:60"><name pos:start="199:13" pos:end="199:20">motion_y</name> <operator pos:start="199:22" pos:end="199:22">=</operator> <call pos:start="199:24" pos:end="199:60"><name pos:start="199:24" pos:end="199:34">sign_extend</name><argument_list pos:start="199:35" pos:end="199:60">(<argument pos:start="199:36" pos:end="199:56"><expr pos:start="199:36" pos:end="199:56"><operator pos:start="199:36" pos:end="199:36">*</operator><name pos:start="199:37" pos:end="199:50">vector_segment</name> <operator pos:start="199:52" pos:end="199:52">&amp;</operator> <literal type="number" pos:start="199:54" pos:end="199:56">0xF</literal></expr></argument>, <argument pos:start="199:59" pos:end="199:59"><expr pos:start="199:59" pos:end="199:59"><literal type="number" pos:start="199:59" pos:end="199:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:29"><expr pos:start="201:13" pos:end="201:28"><name pos:start="201:13" pos:end="201:26">vector_segment</name><operator pos:start="201:27" pos:end="201:28">++</operator></expr>;</expr_stmt>



            <comment type="block" pos:start="205:13" pos:end="205:62">/* copy a run of pixels from the previous frame */</comment>

            <expr_stmt pos:start="207:13" pos:end="207:70"><expr pos:start="207:13" pos:end="207:69"><call pos:start="207:13" pos:end="207:69"><name pos:start="207:13" pos:end="207:34">xan_wc3_copy_pixel_run</name><argument_list pos:start="207:35" pos:end="207:69">(<argument pos:start="207:36" pos:end="207:36"><expr pos:start="207:36" pos:end="207:36"><name pos:start="207:36" pos:end="207:36">s</name></expr></argument>, <argument pos:start="207:39" pos:end="207:39"><expr pos:start="207:39" pos:end="207:39"><name pos:start="207:39" pos:end="207:39">x</name></expr></argument>, <argument pos:start="207:42" pos:end="207:42"><expr pos:start="207:42" pos:end="207:42"><name pos:start="207:42" pos:end="207:42">y</name></expr></argument>, <argument pos:start="207:45" pos:end="207:48"><expr pos:start="207:45" pos:end="207:48"><name pos:start="207:45" pos:end="207:48">size</name></expr></argument>, <argument pos:start="207:51" pos:end="207:58"><expr pos:start="207:51" pos:end="207:58"><name pos:start="207:51" pos:end="207:58">motion_x</name></expr></argument>, <argument pos:start="207:61" pos:end="207:68"><expr pos:start="207:61" pos:end="207:68"><name pos:start="207:61" pos:end="207:68">motion_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="211:13" pos:end="211:21"><expr pos:start="211:13" pos:end="211:20"><name pos:start="211:13" pos:end="211:16">flag</name> <operator pos:start="211:18" pos:end="211:18">=</operator> <literal type="number" pos:start="211:20" pos:end="211:20">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="217:9" pos:end="217:35">/* coordinate accounting */</comment>

        <expr_stmt pos:start="219:9" pos:end="219:29"><expr pos:start="219:9" pos:end="219:28"><name pos:start="219:9" pos:end="219:20">total_pixels</name> <operator pos:start="219:22" pos:end="219:23">-=</operator> <name pos:start="219:25" pos:end="219:28">size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="221:9" pos:end="221:32"><expr pos:start="221:9" pos:end="221:31"><name pos:start="221:9" pos:end="221:9">y</name> <operator pos:start="221:11" pos:end="221:12">+=</operator> <operator pos:start="221:14" pos:end="221:14">(</operator><name pos:start="221:15" pos:end="221:15">x</name> <operator pos:start="221:17" pos:end="221:17">+</operator> <name pos:start="221:19" pos:end="221:22">size</name><operator pos:start="221:23" pos:end="221:23">)</operator> <operator pos:start="221:25" pos:end="221:25">/</operator> <name pos:start="221:27" pos:end="221:31">width</name></expr>;</expr_stmt>

        <expr_stmt pos:start="223:9" pos:end="223:32"><expr pos:start="223:9" pos:end="223:31"><name pos:start="223:9" pos:end="223:9">x</name>  <operator pos:start="223:12" pos:end="223:12">=</operator> <operator pos:start="223:14" pos:end="223:14">(</operator><name pos:start="223:15" pos:end="223:15">x</name> <operator pos:start="223:17" pos:end="223:17">+</operator> <name pos:start="223:19" pos:end="223:22">size</name><operator pos:start="223:23" pos:end="223:23">)</operator> <operator pos:start="223:25" pos:end="223:25">%</operator> <name pos:start="223:27" pos:end="223:31">width</name></expr>;</expr_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
