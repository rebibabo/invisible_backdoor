<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19447.c" pos:tabs="8"><function pos:start="1:1" pos:end="473:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">ac3_parse_audio_block</name><parameter_list pos:start="1:33" pos:end="1:67">(<parameter pos:start="1:34" pos:end="1:55"><decl pos:start="1:34" pos:end="1:55"><type pos:start="1:34" pos:end="1:55"><name pos:start="1:34" pos:end="1:49">AC3DecodeContext</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type> <name pos:start="1:53" pos:end="1:55">ctx</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:66"><decl pos:start="1:58" pos:end="1:66"><type pos:start="1:58" pos:end="1:66"><name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:66">index</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="473:1">{<block_content pos:start="5:5" pos:end="471:13">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">ac3_audio_block</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:23">ab</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><operator pos:start="5:27" pos:end="5:27">&amp;</operator><name pos:start="5:28" pos:end="5:43"><name pos:start="5:28" pos:end="5:30">ctx</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:43">audio_block</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">nfchans</name> <init pos:start="7:17" pos:end="7:34">= <expr pos:start="7:19" pos:end="7:34"><name pos:start="7:19" pos:end="7:34"><name pos:start="7:19" pos:end="7:21">ctx</name><operator pos:start="7:22" pos:end="7:23">-&gt;</operator><name pos:start="7:24" pos:end="7:26">bsi</name><operator pos:start="7:27" pos:end="7:27">.</operator><name pos:start="7:28" pos:end="7:34">nfchans</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">acmod</name> <init pos:start="9:15" pos:end="9:30">= <expr pos:start="9:17" pos:end="9:30"><name pos:start="9:17" pos:end="9:30"><name pos:start="9:17" pos:end="9:19">ctx</name><operator pos:start="9:20" pos:end="9:21">-&gt;</operator><name pos:start="9:22" pos:end="9:24">bsi</name><operator pos:start="9:25" pos:end="9:25">.</operator><name pos:start="9:26" pos:end="9:30">acmod</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:14"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:14">bnd</name></decl>, <decl pos:start="11:17" pos:end="11:20"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:17" pos:end="11:20">rbnd</name></decl>, <decl pos:start="11:23" pos:end="11:25"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:23" pos:end="11:25">grp</name></decl>, <decl pos:start="11:28" pos:end="11:30"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:28" pos:end="11:30">seg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17">GetBitContext</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:21">gb</name> <init pos:start="13:23" pos:end="13:32">= <expr pos:start="13:25" pos:end="13:32"><operator pos:start="13:25" pos:end="13:25">&amp;</operator><name pos:start="13:26" pos:end="13:32"><name pos:start="13:26" pos:end="13:28">ctx</name><operator pos:start="13:29" pos:end="13:30">-&gt;</operator><name pos:start="13:31" pos:end="13:32">gb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:33"><decl pos:start="15:5" pos:end="15:32"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">uint32_t</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:19">flags</name> <init pos:start="15:21" pos:end="15:32">= <expr pos:start="15:23" pos:end="15:32"><operator pos:start="15:23" pos:end="15:23">&amp;</operator><name pos:start="15:24" pos:end="15:32"><name pos:start="15:24" pos:end="15:25">ab</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:32">flags</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:23">bit_alloc_flags</name> <init pos:start="17:25" pos:end="17:27">= <expr pos:start="17:27" pos:end="17:27"><literal type="number" pos:start="17:27" pos:end="17:27">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:9"><name pos:start="19:5" pos:end="19:9">float</name></type> <name pos:start="19:11" pos:end="19:16">drange</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:15"><expr pos:start="23:5" pos:end="23:14"><operator pos:start="23:5" pos:end="23:5">*</operator><name pos:start="23:6" pos:end="23:10">flags</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <literal type="number" pos:start="23:14" pos:end="23:14">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:18"><expr pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:6">ab</name><operator pos:start="25:7" pos:end="25:8">-&gt;</operator><name pos:start="25:9" pos:end="25:13">blksw</name></name> <operator pos:start="25:15" pos:end="25:15">=</operator> <literal type="number" pos:start="25:17" pos:end="25:17">0</literal></expr>;</expr_stmt>

    <for pos:start="27:5" pos:end="29:30">for <control pos:start="27:9" pos:end="27:27">(<init pos:start="27:10" pos:end="27:15"><expr pos:start="27:10" pos:end="27:14"><name pos:start="27:10" pos:end="27:10">i</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr>;</init> <condition pos:start="27:17" pos:end="27:22"><expr pos:start="27:17" pos:end="27:21"><name pos:start="27:17" pos:end="27:17">i</name> <operator pos:start="27:19" pos:end="27:19">&lt;</operator> <literal type="number" pos:start="27:21" pos:end="27:21">5</literal></expr>;</condition> <incr pos:start="27:24" pos:end="27:26"><expr pos:start="27:24" pos:end="27:26"><name pos:start="27:24" pos:end="27:24">i</name><operator pos:start="27:25" pos:end="27:26">++</operator></expr></incr>)</control><block type="pseudo" pos:start="29:9" pos:end="29:30"><block_content pos:start="29:9" pos:end="29:30">

        <expr_stmt pos:start="29:9" pos:end="29:30"><expr pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:23"><name pos:start="29:9" pos:end="29:10">ab</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:20">chcoeffs</name><index pos:start="29:21" pos:end="29:23">[<expr pos:start="29:22" pos:end="29:22"><name pos:start="29:22" pos:end="29:22">i</name></expr>]</index></name> <operator pos:start="29:25" pos:end="29:25">=</operator> <literal type="number" pos:start="29:27" pos:end="29:29">1.0</literal></expr>;</expr_stmt></block_content></block></for>

    <for pos:start="31:5" pos:end="33:42">for <control pos:start="31:9" pos:end="31:33">(<init pos:start="31:10" pos:end="31:15"><expr pos:start="31:10" pos:end="31:14"><name pos:start="31:10" pos:end="31:10">i</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <literal type="number" pos:start="31:14" pos:end="31:14">0</literal></expr>;</init> <condition pos:start="31:17" pos:end="31:28"><expr pos:start="31:17" pos:end="31:27"><name pos:start="31:17" pos:end="31:17">i</name> <operator pos:start="31:19" pos:end="31:19">&lt;</operator> <name pos:start="31:21" pos:end="31:27">nfchans</name></expr>;</condition> <incr pos:start="31:30" pos:end="31:32"><expr pos:start="31:30" pos:end="31:32"><name pos:start="31:30" pos:end="31:30">i</name><operator pos:start="31:31" pos:end="31:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="33:9" pos:end="33:42"><block_content pos:start="33:9" pos:end="33:42"> <comment type="block" pos:start="31:35" pos:end="31:56">/*block switch flag */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:42"><expr pos:start="33:9" pos:end="33:41"><name pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:10">ab</name><operator pos:start="33:11" pos:end="33:12">-&gt;</operator><name pos:start="33:13" pos:end="33:17">blksw</name></name> <operator pos:start="33:19" pos:end="33:20">|=</operator> <call pos:start="33:22" pos:end="33:36"><name pos:start="33:22" pos:end="33:29">get_bits</name><argument_list pos:start="33:30" pos:end="33:36">(<argument pos:start="33:31" pos:end="33:32"><expr pos:start="33:31" pos:end="33:32"><name pos:start="33:31" pos:end="33:32">gb</name></expr></argument>, <argument pos:start="33:35" pos:end="33:35"><expr pos:start="33:35" pos:end="33:35"><literal type="number" pos:start="33:35" pos:end="33:35">1</literal></expr></argument>)</argument_list></call> <operator pos:start="33:38" pos:end="33:39">&lt;&lt;</operator> <name pos:start="33:41" pos:end="33:41">i</name></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt pos:start="35:5" pos:end="35:21"><expr pos:start="35:5" pos:end="35:20"><name pos:start="35:5" pos:end="35:16"><name pos:start="35:5" pos:end="35:6">ab</name><operator pos:start="35:7" pos:end="35:8">-&gt;</operator><name pos:start="35:9" pos:end="35:16">dithflag</name></name> <operator pos:start="35:18" pos:end="35:18">=</operator> <literal type="number" pos:start="35:20" pos:end="35:20">0</literal></expr>;</expr_stmt>

    <for pos:start="37:5" pos:end="39:45">for <control pos:start="37:9" pos:end="37:33">(<init pos:start="37:10" pos:end="37:15"><expr pos:start="37:10" pos:end="37:14"><name pos:start="37:10" pos:end="37:10">i</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <literal type="number" pos:start="37:14" pos:end="37:14">0</literal></expr>;</init> <condition pos:start="37:17" pos:end="37:28"><expr pos:start="37:17" pos:end="37:27"><name pos:start="37:17" pos:end="37:17">i</name> <operator pos:start="37:19" pos:end="37:19">&lt;</operator> <name pos:start="37:21" pos:end="37:27">nfchans</name></expr>;</condition> <incr pos:start="37:30" pos:end="37:32"><expr pos:start="37:30" pos:end="37:32"><name pos:start="37:30" pos:end="37:30">i</name><operator pos:start="37:31" pos:end="37:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="39:9" pos:end="39:45"><block_content pos:start="39:9" pos:end="39:45"> <comment type="block" pos:start="37:35" pos:end="37:54">/* dithering flag */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:45"><expr pos:start="39:9" pos:end="39:44"><name pos:start="39:9" pos:end="39:20"><name pos:start="39:9" pos:end="39:10">ab</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:20">dithflag</name></name> <operator pos:start="39:22" pos:end="39:23">|=</operator> <call pos:start="39:25" pos:end="39:39"><name pos:start="39:25" pos:end="39:32">get_bits</name><argument_list pos:start="39:33" pos:end="39:39">(<argument pos:start="39:34" pos:end="39:35"><expr pos:start="39:34" pos:end="39:35"><name pos:start="39:34" pos:end="39:35">gb</name></expr></argument>, <argument pos:start="39:38" pos:end="39:38"><expr pos:start="39:38" pos:end="39:38"><literal type="number" pos:start="39:38" pos:end="39:38">1</literal></expr></argument>)</argument_list></call> <operator pos:start="39:41" pos:end="39:42">&lt;&lt;</operator> <name pos:start="39:44" pos:end="39:44">i</name></expr>;</expr_stmt></block_content></block></for>

    <if_stmt pos:start="41:5" pos:end="53:5"><if pos:start="41:5" pos:end="53:5">if <condition pos:start="41:8" pos:end="41:24">(<expr pos:start="41:9" pos:end="41:23"><call pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:16">get_bits</name><argument_list pos:start="41:17" pos:end="41:23">(<argument pos:start="41:18" pos:end="41:19"><expr pos:start="41:18" pos:end="41:19"><name pos:start="41:18" pos:end="41:19">gb</name></expr></argument>, <argument pos:start="41:22" pos:end="41:22"><expr pos:start="41:22" pos:end="41:22"><literal type="number" pos:start="41:22" pos:end="41:22">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:26" pos:end="53:5">{<block_content pos:start="43:9" pos:end="51:38"> <comment type="block" pos:start="41:28" pos:end="41:46">/* dynamic range */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:33"><expr pos:start="43:9" pos:end="43:32"><operator pos:start="43:9" pos:end="43:9">*</operator><name pos:start="43:10" pos:end="43:14">flags</name> <operator pos:start="43:16" pos:end="43:17">|=</operator> <name pos:start="43:19" pos:end="43:32">AC3_AB_DYNRNGE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:37"><expr pos:start="45:9" pos:end="45:36"><name pos:start="45:9" pos:end="45:18"><name pos:start="45:9" pos:end="45:10">ab</name><operator pos:start="45:11" pos:end="45:12">-&gt;</operator><name pos:start="45:13" pos:end="45:18">dynrng</name></name> <operator pos:start="45:20" pos:end="45:20">=</operator> <call pos:start="45:22" pos:end="45:36"><name pos:start="45:22" pos:end="45:29">get_bits</name><argument_list pos:start="45:30" pos:end="45:36">(<argument pos:start="45:31" pos:end="45:32"><expr pos:start="45:31" pos:end="45:32"><name pos:start="45:31" pos:end="45:32">gb</name></expr></argument>, <argument pos:start="45:35" pos:end="45:35"><expr pos:start="45:35" pos:end="45:35"><literal type="number" pos:start="45:35" pos:end="45:35">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:95"><expr pos:start="47:9" pos:end="47:94"><name pos:start="47:9" pos:end="47:14">drange</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <operator pos:start="47:18" pos:end="47:18">(</operator><operator pos:start="47:19" pos:end="47:19">(</operator><operator pos:start="47:20" pos:end="47:20">(</operator><operator pos:start="47:21" pos:end="47:21">(</operator><name pos:start="47:22" pos:end="47:31"><name pos:start="47:22" pos:end="47:23">ab</name><operator pos:start="47:24" pos:end="47:25">-&gt;</operator><name pos:start="47:26" pos:end="47:31">dynrng</name></name> <operator pos:start="47:33" pos:end="47:33">&amp;</operator> <literal type="number" pos:start="47:35" pos:end="47:38">0x1f</literal><operator pos:start="47:39" pos:end="47:39">)</operator> <operator pos:start="47:41" pos:end="47:41">|</operator> <literal type="number" pos:start="47:43" pos:end="47:46">0x20</literal><operator pos:start="47:47" pos:end="47:47">)</operator> <operator pos:start="47:49" pos:end="47:50">&lt;&lt;</operator> <literal type="number" pos:start="47:52" pos:end="47:53">13</literal><operator pos:start="47:54" pos:end="47:54">)</operator> <operator pos:start="47:56" pos:end="47:56">*</operator> <name pos:start="47:58" pos:end="47:93"><name pos:start="47:58" pos:end="47:70">scale_factors</name><index pos:start="47:71" pos:end="47:93">[<expr pos:start="47:72" pos:end="47:92"><literal type="number" pos:start="47:72" pos:end="47:74">3</literal> <operator pos:start="47:74" pos:end="47:74">-</operator> <operator pos:start="47:76" pos:end="47:76">(</operator><name pos:start="47:77" pos:end="47:86"><name pos:start="47:77" pos:end="47:78">ab</name><operator pos:start="47:79" pos:end="47:80">-&gt;</operator><name pos:start="47:81" pos:end="47:86">dynrng</name></name> <operator pos:start="47:88" pos:end="47:89">&gt;&gt;</operator> <literal type="number" pos:start="47:91" pos:end="47:91">5</literal><operator pos:start="47:92" pos:end="47:92">)</operator></expr>]</index></name><operator pos:start="47:94" pos:end="47:94">)</operator></expr>;</expr_stmt>

        <for pos:start="49:9" pos:end="51:38">for <control pos:start="49:13" pos:end="49:37">(<init pos:start="49:14" pos:end="49:19"><expr pos:start="49:14" pos:end="49:18"><name pos:start="49:14" pos:end="49:14">i</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <literal type="number" pos:start="49:18" pos:end="49:18">0</literal></expr>;</init> <condition pos:start="49:21" pos:end="49:32"><expr pos:start="49:21" pos:end="49:31"><name pos:start="49:21" pos:end="49:21">i</name> <operator pos:start="49:23" pos:end="49:23">&lt;</operator> <name pos:start="49:25" pos:end="49:31">nfchans</name></expr>;</condition> <incr pos:start="49:34" pos:end="49:36"><expr pos:start="49:34" pos:end="49:36"><name pos:start="49:34" pos:end="49:34">i</name><operator pos:start="49:35" pos:end="49:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="51:13" pos:end="51:38"><block_content pos:start="51:13" pos:end="51:38">

            <expr_stmt pos:start="51:13" pos:end="51:38"><expr pos:start="51:13" pos:end="51:37"><name pos:start="51:13" pos:end="51:27"><name pos:start="51:13" pos:end="51:14">ab</name><operator pos:start="51:15" pos:end="51:16">-&gt;</operator><name pos:start="51:17" pos:end="51:24">chcoeffs</name><index pos:start="51:25" pos:end="51:27">[<expr pos:start="51:26" pos:end="51:26"><name pos:start="51:26" pos:end="51:26">i</name></expr>]</index></name> <operator pos:start="51:29" pos:end="51:30">*=</operator> <name pos:start="51:32" pos:end="51:37">drange</name></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="55:5" pos:end="69:5"><if pos:start="55:5" pos:end="69:5">if <condition pos:start="55:8" pos:end="55:22">(<expr pos:start="55:9" pos:end="55:21"><name pos:start="55:9" pos:end="55:13">acmod</name> <operator pos:start="55:15" pos:end="55:16">==</operator> <literal type="number" pos:start="55:18" pos:end="55:21">0x00</literal></expr>)</condition> <block pos:start="55:24" pos:end="69:5">{<block_content pos:start="57:9" pos:end="67:9"> <comment type="block" pos:start="55:26" pos:end="55:53">/* dynamic range 1+1 mode */</comment>

        <if_stmt pos:start="57:9" pos:end="67:9"><if pos:start="57:9" pos:end="67:9">if <condition pos:start="57:12" pos:end="57:28">(<expr pos:start="57:13" pos:end="57:27"><call pos:start="57:13" pos:end="57:27"><name pos:start="57:13" pos:end="57:20">get_bits</name><argument_list pos:start="57:21" pos:end="57:27">(<argument pos:start="57:22" pos:end="57:23"><expr pos:start="57:22" pos:end="57:23"><name pos:start="57:22" pos:end="57:23">gb</name></expr></argument>, <argument pos:start="57:26" pos:end="57:26"><expr pos:start="57:26" pos:end="57:26"><literal type="number" pos:start="57:26" pos:end="57:26">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:30" pos:end="67:9">{<block_content pos:start="59:13" pos:end="65:38">

            <expr_stmt pos:start="59:13" pos:end="59:38"><expr pos:start="59:13" pos:end="59:37"><operator pos:start="59:13" pos:end="59:13">*</operator><name pos:start="59:14" pos:end="59:18">flags</name> <operator pos:start="59:20" pos:end="59:21">|=</operator> <name pos:start="59:23" pos:end="59:37">AC3_AB_DYNRNG2E</name></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:42"><expr pos:start="61:13" pos:end="61:41"><name pos:start="61:13" pos:end="61:23"><name pos:start="61:13" pos:end="61:14">ab</name><operator pos:start="61:15" pos:end="61:16">-&gt;</operator><name pos:start="61:17" pos:end="61:23">dynrng2</name></name> <operator pos:start="61:25" pos:end="61:25">=</operator> <call pos:start="61:27" pos:end="61:41"><name pos:start="61:27" pos:end="61:34">get_bits</name><argument_list pos:start="61:35" pos:end="61:41">(<argument pos:start="61:36" pos:end="61:37"><expr pos:start="61:36" pos:end="61:37"><name pos:start="61:36" pos:end="61:37">gb</name></expr></argument>, <argument pos:start="61:40" pos:end="61:40"><expr pos:start="61:40" pos:end="61:40"><literal type="number" pos:start="61:40" pos:end="61:40">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:101"><expr pos:start="63:13" pos:end="63:100"><name pos:start="63:13" pos:end="63:18">drange</name> <operator pos:start="63:20" pos:end="63:20">=</operator> <operator pos:start="63:22" pos:end="63:22">(</operator><operator pos:start="63:23" pos:end="63:23">(</operator><operator pos:start="63:24" pos:end="63:24">(</operator><operator pos:start="63:25" pos:end="63:25">(</operator><name pos:start="63:26" pos:end="63:36"><name pos:start="63:26" pos:end="63:27">ab</name><operator pos:start="63:28" pos:end="63:29">-&gt;</operator><name pos:start="63:30" pos:end="63:36">dynrng2</name></name> <operator pos:start="63:38" pos:end="63:38">&amp;</operator> <literal type="number" pos:start="63:40" pos:end="63:43">0x1f</literal><operator pos:start="63:44" pos:end="63:44">)</operator> <operator pos:start="63:46" pos:end="63:46">|</operator> <literal type="number" pos:start="63:48" pos:end="63:51">0x20</literal><operator pos:start="63:52" pos:end="63:52">)</operator> <operator pos:start="63:54" pos:end="63:55">&lt;&lt;</operator> <literal type="number" pos:start="63:57" pos:end="63:58">13</literal><operator pos:start="63:59" pos:end="63:59">)</operator> <operator pos:start="63:61" pos:end="63:61">*</operator> <name pos:start="63:63" pos:end="63:99"><name pos:start="63:63" pos:end="63:75">scale_factors</name><index pos:start="63:76" pos:end="63:99">[<expr pos:start="63:77" pos:end="63:98"><literal type="number" pos:start="63:77" pos:end="63:79">3</literal> <operator pos:start="63:79" pos:end="63:79">-</operator> <operator pos:start="63:81" pos:end="63:81">(</operator><name pos:start="63:82" pos:end="63:92"><name pos:start="63:82" pos:end="63:83">ab</name><operator pos:start="63:84" pos:end="63:85">-&gt;</operator><name pos:start="63:86" pos:end="63:92">dynrng2</name></name> <operator pos:start="63:94" pos:end="63:95">&gt;&gt;</operator> <literal type="number" pos:start="63:97" pos:end="63:97">5</literal><operator pos:start="63:98" pos:end="63:98">)</operator></expr>]</index></name><operator pos:start="63:100" pos:end="63:100">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:38"><expr pos:start="65:13" pos:end="65:37"><name pos:start="65:13" pos:end="65:27"><name pos:start="65:13" pos:end="65:14">ab</name><operator pos:start="65:15" pos:end="65:16">-&gt;</operator><name pos:start="65:17" pos:end="65:24">chcoeffs</name><index pos:start="65:25" pos:end="65:27">[<expr pos:start="65:26" pos:end="65:26"><literal type="number" pos:start="65:26" pos:end="65:26">1</literal></expr>]</index></name> <operator pos:start="65:29" pos:end="65:30">*=</operator> <name pos:start="65:32" pos:end="65:37">drange</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:28"><expr pos:start="71:5" pos:end="71:27"><call pos:start="71:5" pos:end="71:27"><name pos:start="71:5" pos:end="71:22">get_downmix_coeffs</name><argument_list pos:start="71:23" pos:end="71:27">(<argument pos:start="71:24" pos:end="71:26"><expr pos:start="71:24" pos:end="71:26"><name pos:start="71:24" pos:end="71:26">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:20"><expr pos:start="73:5" pos:end="73:19"><name pos:start="73:5" pos:end="73:15"><name pos:start="73:5" pos:end="73:6">ab</name><operator pos:start="73:7" pos:end="73:8">-&gt;</operator><name pos:start="73:9" pos:end="73:15">chincpl</name></name> <operator pos:start="73:17" pos:end="73:17">=</operator> <literal type="number" pos:start="73:19" pos:end="73:19">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="115:5"><if pos:start="75:5" pos:end="115:5">if <condition pos:start="75:8" pos:end="75:24">(<expr pos:start="75:9" pos:end="75:23"><call pos:start="75:9" pos:end="75:23"><name pos:start="75:9" pos:end="75:16">get_bits</name><argument_list pos:start="75:17" pos:end="75:23">(<argument pos:start="75:18" pos:end="75:19"><expr pos:start="75:18" pos:end="75:19"><name pos:start="75:18" pos:end="75:19">gb</name></expr></argument>, <argument pos:start="75:22" pos:end="75:22"><expr pos:start="75:22" pos:end="75:22"><literal type="number" pos:start="75:22" pos:end="75:22">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:26" pos:end="115:5">{<block_content pos:start="77:9" pos:end="113:9"> <comment type="block" pos:start="75:28" pos:end="75:50">/* coupling strategy */</comment>

        <expr_stmt pos:start="77:9" pos:end="77:33"><expr pos:start="77:9" pos:end="77:32"><operator pos:start="77:9" pos:end="77:9">*</operator><name pos:start="77:10" pos:end="77:14">flags</name> <operator pos:start="77:16" pos:end="77:17">|=</operator> <name pos:start="77:19" pos:end="77:32">AC3_AB_CPLSTRE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:27"><expr pos:start="79:9" pos:end="79:26"><name pos:start="79:9" pos:end="79:22"><name pos:start="79:9" pos:end="79:10">ab</name><operator pos:start="79:11" pos:end="79:12">-&gt;</operator><name pos:start="79:13" pos:end="79:22">cplbndstrc</name></name> <operator pos:start="79:24" pos:end="79:24">=</operator> <literal type="number" pos:start="79:26" pos:end="79:26">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="113:9"><if pos:start="81:9" pos:end="113:9">if <condition pos:start="81:12" pos:end="81:28">(<expr pos:start="81:13" pos:end="81:27"><call pos:start="81:13" pos:end="81:27"><name pos:start="81:13" pos:end="81:20">get_bits</name><argument_list pos:start="81:21" pos:end="81:27">(<argument pos:start="81:22" pos:end="81:23"><expr pos:start="81:22" pos:end="81:23"><name pos:start="81:22" pos:end="81:23">gb</name></expr></argument>, <argument pos:start="81:26" pos:end="81:26"><expr pos:start="81:26" pos:end="81:26"><literal type="number" pos:start="81:26" pos:end="81:26">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:30" pos:end="113:9">{<block_content pos:start="83:13" pos:end="111:17"> <comment type="block" pos:start="81:32" pos:end="81:52">/* coupling in use */</comment>

            <expr_stmt pos:start="83:13" pos:end="83:36"><expr pos:start="83:13" pos:end="83:35"><operator pos:start="83:13" pos:end="83:13">*</operator><name pos:start="83:14" pos:end="83:18">flags</name> <operator pos:start="83:20" pos:end="83:21">|=</operator> <name pos:start="83:23" pos:end="83:35">AC3_AB_CPLINU</name></expr>;</expr_stmt>

            <for pos:start="85:13" pos:end="87:52">for <control pos:start="85:17" pos:end="85:41">(<init pos:start="85:18" pos:end="85:23"><expr pos:start="85:18" pos:end="85:22"><name pos:start="85:18" pos:end="85:18">i</name> <operator pos:start="85:20" pos:end="85:20">=</operator> <literal type="number" pos:start="85:22" pos:end="85:22">0</literal></expr>;</init> <condition pos:start="85:25" pos:end="85:36"><expr pos:start="85:25" pos:end="85:35"><name pos:start="85:25" pos:end="85:25">i</name> <operator pos:start="85:27" pos:end="85:27">&lt;</operator> <name pos:start="85:29" pos:end="85:35">nfchans</name></expr>;</condition> <incr pos:start="85:38" pos:end="85:40"><expr pos:start="85:38" pos:end="85:40"><name pos:start="85:38" pos:end="85:38">i</name><operator pos:start="85:39" pos:end="85:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="87:17" pos:end="87:52"><block_content pos:start="87:17" pos:end="87:52">

                <expr_stmt pos:start="87:17" pos:end="87:52"><expr pos:start="87:17" pos:end="87:51"><name pos:start="87:17" pos:end="87:27"><name pos:start="87:17" pos:end="87:18">ab</name><operator pos:start="87:19" pos:end="87:20">-&gt;</operator><name pos:start="87:21" pos:end="87:27">chincpl</name></name> <operator pos:start="87:29" pos:end="87:30">|=</operator> <call pos:start="87:32" pos:end="87:46"><name pos:start="87:32" pos:end="87:39">get_bits</name><argument_list pos:start="87:40" pos:end="87:46">(<argument pos:start="87:41" pos:end="87:42"><expr pos:start="87:41" pos:end="87:42"><name pos:start="87:41" pos:end="87:42">gb</name></expr></argument>, <argument pos:start="87:45" pos:end="87:45"><expr pos:start="87:45" pos:end="87:45"><literal type="number" pos:start="87:45" pos:end="87:45">1</literal></expr></argument>)</argument_list></call> <operator pos:start="87:48" pos:end="87:49">&lt;&lt;</operator> <name pos:start="87:51" pos:end="87:51">i</name></expr>;</expr_stmt></block_content></block></for>

            <if_stmt pos:start="89:13" pos:end="93:47"><if pos:start="89:13" pos:end="93:47">if <condition pos:start="89:16" pos:end="89:30">(<expr pos:start="89:17" pos:end="89:29"><name pos:start="89:17" pos:end="89:21">acmod</name> <operator pos:start="89:23" pos:end="89:24">==</operator> <literal type="number" pos:start="89:26" pos:end="89:29">0x02</literal></expr>)</condition><block type="pseudo" pos:start="91:17" pos:end="93:47"><block_content pos:start="91:17" pos:end="93:47">

                <if_stmt pos:start="91:17" pos:end="93:47"><if pos:start="91:17" pos:end="93:47">if <condition pos:start="91:20" pos:end="91:36">(<expr pos:start="91:21" pos:end="91:35"><call pos:start="91:21" pos:end="91:35"><name pos:start="91:21" pos:end="91:28">get_bits</name><argument_list pos:start="91:29" pos:end="91:35">(<argument pos:start="91:30" pos:end="91:31"><expr pos:start="91:30" pos:end="91:31"><name pos:start="91:30" pos:end="91:31">gb</name></expr></argument>, <argument pos:start="91:34" pos:end="91:34"><expr pos:start="91:34" pos:end="91:34"><literal type="number" pos:start="91:34" pos:end="91:34">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="93:21" pos:end="93:47"><block_content pos:start="93:21" pos:end="93:47"> <comment type="block" pos:start="91:38" pos:end="91:60">/* phase flag in use */</comment>

                    <expr_stmt pos:start="93:21" pos:end="93:47"><expr pos:start="93:21" pos:end="93:46"><operator pos:start="93:21" pos:end="93:21">*</operator><name pos:start="93:22" pos:end="93:26">flags</name> <operator pos:start="93:28" pos:end="93:29">|=</operator> <name pos:start="93:31" pos:end="93:46">AC3_AB_PHSFLGINU</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:42"><expr pos:start="95:13" pos:end="95:41"><name pos:start="95:13" pos:end="95:23"><name pos:start="95:13" pos:end="95:14">ab</name><operator pos:start="95:15" pos:end="95:16">-&gt;</operator><name pos:start="95:17" pos:end="95:23">cplbegf</name></name> <operator pos:start="95:25" pos:end="95:25">=</operator> <call pos:start="95:27" pos:end="95:41"><name pos:start="95:27" pos:end="95:34">get_bits</name><argument_list pos:start="95:35" pos:end="95:41">(<argument pos:start="95:36" pos:end="95:37"><expr pos:start="95:36" pos:end="95:37"><name pos:start="95:36" pos:end="95:37">gb</name></expr></argument>, <argument pos:start="95:40" pos:end="95:40"><expr pos:start="95:40" pos:end="95:40"><literal type="number" pos:start="95:40" pos:end="95:40">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:42"><expr pos:start="97:13" pos:end="97:41"><name pos:start="97:13" pos:end="97:23"><name pos:start="97:13" pos:end="97:14">ab</name><operator pos:start="97:15" pos:end="97:16">-&gt;</operator><name pos:start="97:17" pos:end="97:23">cplendf</name></name> <operator pos:start="97:25" pos:end="97:25">=</operator> <call pos:start="97:27" pos:end="97:41"><name pos:start="97:27" pos:end="97:34">get_bits</name><argument_list pos:start="97:35" pos:end="97:41">(<argument pos:start="97:36" pos:end="97:37"><expr pos:start="97:36" pos:end="97:37"><name pos:start="97:36" pos:end="97:37">gb</name></expr></argument>, <argument pos:start="97:40" pos:end="97:40"><expr pos:start="97:40" pos:end="97:40"><literal type="number" pos:start="97:40" pos:end="97:40">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:72"><expr pos:start="99:13" pos:end="99:71"><call pos:start="99:13" pos:end="99:71"><name pos:start="99:13" pos:end="99:18">assert</name><argument_list pos:start="99:19" pos:end="99:71">(<argument pos:start="99:20" pos:end="99:70"><expr pos:start="99:20" pos:end="99:70"><operator pos:start="99:20" pos:end="99:20">(</operator><name pos:start="99:21" pos:end="99:33"><name pos:start="99:21" pos:end="99:22">ab</name><operator pos:start="99:23" pos:end="99:24">-&gt;</operator><name pos:start="99:25" pos:end="99:33">ncplsubnd</name></name> <operator pos:start="99:35" pos:end="99:35">=</operator> <literal type="number" pos:start="99:37" pos:end="99:39">3</literal> <operator pos:start="99:39" pos:end="99:39">+</operator> <name pos:start="99:41" pos:end="99:51"><name pos:start="99:41" pos:end="99:42">ab</name><operator pos:start="99:43" pos:end="99:44">-&gt;</operator><name pos:start="99:45" pos:end="99:51">cplendf</name></name> <operator pos:start="99:53" pos:end="99:53">-</operator> <name pos:start="99:55" pos:end="99:65"><name pos:start="99:55" pos:end="99:56">ab</name><operator pos:start="99:57" pos:end="99:58">-&gt;</operator><name pos:start="99:59" pos:end="99:65">cplbegf</name></name><operator pos:start="99:66" pos:end="99:66">)</operator> <operator pos:start="99:68" pos:end="99:68">&gt;</operator> <literal type="number" pos:start="99:70" pos:end="99:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:40"><expr pos:start="101:13" pos:end="101:39"><name pos:start="101:13" pos:end="101:23"><name pos:start="101:13" pos:end="101:14">ab</name><operator pos:start="101:15" pos:end="101:16">-&gt;</operator><name pos:start="101:17" pos:end="101:23">ncplbnd</name></name> <operator pos:start="101:25" pos:end="101:25">=</operator> <name pos:start="101:27" pos:end="101:39"><name pos:start="101:27" pos:end="101:28">ab</name><operator pos:start="101:29" pos:end="101:30">-&gt;</operator><name pos:start="101:31" pos:end="101:39">ncplsubnd</name></name></expr>;</expr_stmt>

            <for pos:start="103:13" pos:end="111:17">for <control pos:start="103:17" pos:end="103:51">(<init pos:start="103:18" pos:end="103:23"><expr pos:start="103:18" pos:end="103:22"><name pos:start="103:18" pos:end="103:18">i</name> <operator pos:start="103:20" pos:end="103:20">=</operator> <literal type="number" pos:start="103:22" pos:end="103:22">0</literal></expr>;</init> <condition pos:start="103:25" pos:end="103:46"><expr pos:start="103:25" pos:end="103:45"><name pos:start="103:25" pos:end="103:25">i</name> <operator pos:start="103:27" pos:end="103:27">&lt;</operator> <name pos:start="103:29" pos:end="103:41"><name pos:start="103:29" pos:end="103:30">ab</name><operator pos:start="103:31" pos:end="103:32">-&gt;</operator><name pos:start="103:33" pos:end="103:41">ncplsubnd</name></name> <operator pos:start="103:43" pos:end="103:43">-</operator> <literal type="number" pos:start="103:45" pos:end="103:45">1</literal></expr>;</condition> <incr pos:start="103:48" pos:end="103:50"><expr pos:start="103:48" pos:end="103:50"><name pos:start="103:48" pos:end="103:48">i</name><operator pos:start="103:49" pos:end="103:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="105:17" pos:end="111:17"><block_content pos:start="105:17" pos:end="111:17"> <comment type="block" pos:start="103:53" pos:end="103:81">/* coupling band structure */</comment>

                <if_stmt pos:start="105:17" pos:end="111:17"><if pos:start="105:17" pos:end="111:17">if <condition pos:start="105:20" pos:end="105:36">(<expr pos:start="105:21" pos:end="105:35"><call pos:start="105:21" pos:end="105:35"><name pos:start="105:21" pos:end="105:28">get_bits</name><argument_list pos:start="105:29" pos:end="105:35">(<argument pos:start="105:30" pos:end="105:31"><expr pos:start="105:30" pos:end="105:31"><name pos:start="105:30" pos:end="105:31">gb</name></expr></argument>, <argument pos:start="105:34" pos:end="105:34"><expr pos:start="105:34" pos:end="105:34"><literal type="number" pos:start="105:34" pos:end="105:34">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="105:38" pos:end="111:17">{<block_content pos:start="107:21" pos:end="109:34">

                    <expr_stmt pos:start="107:21" pos:end="107:45"><expr pos:start="107:21" pos:end="107:44"><name pos:start="107:21" pos:end="107:34"><name pos:start="107:21" pos:end="107:22">ab</name><operator pos:start="107:23" pos:end="107:24">-&gt;</operator><name pos:start="107:25" pos:end="107:34">cplbndstrc</name></name> <operator pos:start="107:36" pos:end="107:37">|=</operator> <literal type="number" pos:start="107:39" pos:end="107:39">1</literal> <operator pos:start="107:41" pos:end="107:42">&lt;&lt;</operator> <name pos:start="107:44" pos:end="107:44">i</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="109:21" pos:end="109:34"><expr pos:start="109:21" pos:end="109:33"><name pos:start="109:21" pos:end="109:31"><name pos:start="109:21" pos:end="109:22">ab</name><operator pos:start="109:23" pos:end="109:24">-&gt;</operator><name pos:start="109:25" pos:end="109:31">ncplbnd</name></name><operator pos:start="109:32" pos:end="109:33">--</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt></block_content></block></for>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="117:5" pos:end="141:5"><if pos:start="117:5" pos:end="141:5">if <condition pos:start="117:8" pos:end="117:31">(<expr pos:start="117:9" pos:end="117:30"><operator pos:start="117:9" pos:end="117:9">*</operator><name pos:start="117:10" pos:end="117:14">flags</name> <operator pos:start="117:16" pos:end="117:16">&amp;</operator> <name pos:start="117:18" pos:end="117:30">AC3_AB_CPLINU</name></expr>)</condition> <block pos:start="117:33" pos:end="141:5">{<block_content pos:start="119:9" pos:end="139:17">

        <expr_stmt pos:start="119:9" pos:end="119:23"><expr pos:start="119:9" pos:end="119:22"><name pos:start="119:9" pos:end="119:18"><name pos:start="119:9" pos:end="119:10">ab</name><operator pos:start="119:11" pos:end="119:12">-&gt;</operator><name pos:start="119:13" pos:end="119:18">cplcoe</name></name> <operator pos:start="119:20" pos:end="119:20">=</operator> <literal type="number" pos:start="119:22" pos:end="119:22">0</literal></expr>;</expr_stmt>

        <for pos:start="121:9" pos:end="139:17">for <control pos:start="121:13" pos:end="121:37">(<init pos:start="121:14" pos:end="121:19"><expr pos:start="121:14" pos:end="121:18"><name pos:start="121:14" pos:end="121:14">i</name> <operator pos:start="121:16" pos:end="121:16">=</operator> <literal type="number" pos:start="121:18" pos:end="121:18">0</literal></expr>;</init> <condition pos:start="121:21" pos:end="121:32"><expr pos:start="121:21" pos:end="121:31"><name pos:start="121:21" pos:end="121:21">i</name> <operator pos:start="121:23" pos:end="121:23">&lt;</operator> <name pos:start="121:25" pos:end="121:31">nfchans</name></expr>;</condition> <incr pos:start="121:34" pos:end="121:36"><expr pos:start="121:34" pos:end="121:36"><name pos:start="121:34" pos:end="121:34">i</name><operator pos:start="121:35" pos:end="121:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="123:13" pos:end="139:17"><block_content pos:start="123:13" pos:end="139:17">

            <if_stmt pos:start="123:13" pos:end="139:17"><if pos:start="123:13" pos:end="139:17">if <condition pos:start="123:16" pos:end="123:39">(<expr pos:start="123:17" pos:end="123:38"><name pos:start="123:17" pos:end="123:27"><name pos:start="123:17" pos:end="123:18">ab</name><operator pos:start="123:19" pos:end="123:20">-&gt;</operator><name pos:start="123:21" pos:end="123:27">chincpl</name></name> <operator pos:start="123:29" pos:end="123:29">&amp;</operator> <operator pos:start="123:31" pos:end="123:31">(</operator><literal type="number" pos:start="123:32" pos:end="123:32">1</literal> <operator pos:start="123:34" pos:end="123:35">&lt;&lt;</operator> <name pos:start="123:37" pos:end="123:37">i</name><operator pos:start="123:38" pos:end="123:38">)</operator></expr>)</condition><block type="pseudo" pos:start="125:17" pos:end="139:17"><block_content pos:start="125:17" pos:end="139:17">

                <if_stmt pos:start="125:17" pos:end="139:17"><if pos:start="125:17" pos:end="139:17">if <condition pos:start="125:20" pos:end="125:36">(<expr pos:start="125:21" pos:end="125:35"><call pos:start="125:21" pos:end="125:35"><name pos:start="125:21" pos:end="125:28">get_bits</name><argument_list pos:start="125:29" pos:end="125:35">(<argument pos:start="125:30" pos:end="125:31"><expr pos:start="125:30" pos:end="125:31"><name pos:start="125:30" pos:end="125:31">gb</name></expr></argument>, <argument pos:start="125:34" pos:end="125:34"><expr pos:start="125:34" pos:end="125:34"><literal type="number" pos:start="125:34" pos:end="125:34">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="125:38" pos:end="139:17">{<block_content pos:start="127:21" pos:end="137:21"> <comment type="block" pos:start="125:40" pos:end="125:66">/* coupling co-ordinates */</comment>

                    <expr_stmt pos:start="127:21" pos:end="127:41"><expr pos:start="127:21" pos:end="127:40"><name pos:start="127:21" pos:end="127:30"><name pos:start="127:21" pos:end="127:22">ab</name><operator pos:start="127:23" pos:end="127:24">-&gt;</operator><name pos:start="127:25" pos:end="127:30">cplcoe</name></name> <operator pos:start="127:32" pos:end="127:33">|=</operator> <literal type="number" pos:start="127:35" pos:end="127:35">1</literal> <operator pos:start="127:37" pos:end="127:38">&lt;&lt;</operator> <name pos:start="127:40" pos:end="127:40">i</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="129:21" pos:end="129:55"><expr pos:start="129:21" pos:end="129:54"><name pos:start="129:21" pos:end="129:36"><name pos:start="129:21" pos:end="129:22">ab</name><operator pos:start="129:23" pos:end="129:24">-&gt;</operator><name pos:start="129:25" pos:end="129:33">mstrcplco</name><index pos:start="129:34" pos:end="129:36">[<expr pos:start="129:35" pos:end="129:35"><name pos:start="129:35" pos:end="129:35">i</name></expr>]</index></name> <operator pos:start="129:38" pos:end="129:38">=</operator> <call pos:start="129:40" pos:end="129:54"><name pos:start="129:40" pos:end="129:47">get_bits</name><argument_list pos:start="129:48" pos:end="129:54">(<argument pos:start="129:49" pos:end="129:50"><expr pos:start="129:49" pos:end="129:50"><name pos:start="129:49" pos:end="129:50">gb</name></expr></argument>, <argument pos:start="129:53" pos:end="129:53"><expr pos:start="129:53" pos:end="129:53"><literal type="number" pos:start="129:53" pos:end="129:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="131:21" pos:end="137:21">for <control pos:start="131:25" pos:end="131:59">(<init pos:start="131:26" pos:end="131:33"><expr pos:start="131:26" pos:end="131:32"><name pos:start="131:26" pos:end="131:28">bnd</name> <operator pos:start="131:30" pos:end="131:30">=</operator> <literal type="number" pos:start="131:32" pos:end="131:32">0</literal></expr>;</init> <condition pos:start="131:35" pos:end="131:52"><expr pos:start="131:35" pos:end="131:51"><name pos:start="131:35" pos:end="131:37">bnd</name> <operator pos:start="131:39" pos:end="131:39">&lt;</operator> <name pos:start="131:41" pos:end="131:51"><name pos:start="131:41" pos:end="131:42">ab</name><operator pos:start="131:43" pos:end="131:44">-&gt;</operator><name pos:start="131:45" pos:end="131:51">ncplbnd</name></name></expr>;</condition> <incr pos:start="131:54" pos:end="131:58"><expr pos:start="131:54" pos:end="131:58"><name pos:start="131:54" pos:end="131:56">bnd</name><operator pos:start="131:57" pos:end="131:58">++</operator></expr></incr>)</control> <block pos:start="131:61" pos:end="137:21">{<block_content pos:start="133:25" pos:end="135:64">

                        <expr_stmt pos:start="133:25" pos:end="133:63"><expr pos:start="133:25" pos:end="133:62"><name pos:start="133:25" pos:end="133:44"><name pos:start="133:25" pos:end="133:26">ab</name><operator pos:start="133:27" pos:end="133:28">-&gt;</operator><name pos:start="133:29" pos:end="133:36">cplcoexp</name><index pos:start="133:37" pos:end="133:39">[<expr pos:start="133:38" pos:end="133:38"><name pos:start="133:38" pos:end="133:38">i</name></expr>]</index><index pos:start="133:40" pos:end="133:44">[<expr pos:start="133:41" pos:end="133:43"><name pos:start="133:41" pos:end="133:43">bnd</name></expr>]</index></name> <operator pos:start="133:46" pos:end="133:46">=</operator> <call pos:start="133:48" pos:end="133:62"><name pos:start="133:48" pos:end="133:55">get_bits</name><argument_list pos:start="133:56" pos:end="133:62">(<argument pos:start="133:57" pos:end="133:58"><expr pos:start="133:57" pos:end="133:58"><name pos:start="133:57" pos:end="133:58">gb</name></expr></argument>, <argument pos:start="133:61" pos:end="133:61"><expr pos:start="133:61" pos:end="133:61"><literal type="number" pos:start="133:61" pos:end="133:61">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="135:25" pos:end="135:64"><expr pos:start="135:25" pos:end="135:63"><name pos:start="135:25" pos:end="135:45"><name pos:start="135:25" pos:end="135:26">ab</name><operator pos:start="135:27" pos:end="135:28">-&gt;</operator><name pos:start="135:29" pos:end="135:37">cplcomant</name><index pos:start="135:38" pos:end="135:40">[<expr pos:start="135:39" pos:end="135:39"><name pos:start="135:39" pos:end="135:39">i</name></expr>]</index><index pos:start="135:41" pos:end="135:45">[<expr pos:start="135:42" pos:end="135:44"><name pos:start="135:42" pos:end="135:44">bnd</name></expr>]</index></name> <operator pos:start="135:47" pos:end="135:47">=</operator> <call pos:start="135:49" pos:end="135:63"><name pos:start="135:49" pos:end="135:56">get_bits</name><argument_list pos:start="135:57" pos:end="135:63">(<argument pos:start="135:58" pos:end="135:59"><expr pos:start="135:58" pos:end="135:59"><name pos:start="135:58" pos:end="135:59">gb</name></expr></argument>, <argument pos:start="135:62" pos:end="135:62"><expr pos:start="135:62" pos:end="135:62"><literal type="number" pos:start="135:62" pos:end="135:62">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:19"><expr pos:start="143:5" pos:end="143:18"><name pos:start="143:5" pos:end="143:14"><name pos:start="143:5" pos:end="143:6">ab</name><operator pos:start="143:7" pos:end="143:8">-&gt;</operator><name pos:start="143:9" pos:end="143:14">phsflg</name></name> <operator pos:start="143:16" pos:end="143:16">=</operator> <literal type="number" pos:start="143:18" pos:end="143:18">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="145:5" pos:end="153:5"><if pos:start="145:5" pos:end="153:5">if <condition pos:start="145:8" pos:end="145:100">(<expr pos:start="145:9" pos:end="145:99"><operator pos:start="145:9" pos:end="145:9">(</operator><name pos:start="145:10" pos:end="145:14">acmod</name> <operator pos:start="145:16" pos:end="145:17">==</operator> <literal type="number" pos:start="145:19" pos:end="145:22">0x02</literal><operator pos:start="145:23" pos:end="145:23">)</operator> <operator pos:start="145:25" pos:end="145:26">&amp;&amp;</operator> <operator pos:start="145:28" pos:end="145:28">(</operator><operator pos:start="145:29" pos:end="145:29">*</operator><name pos:start="145:30" pos:end="145:34">flags</name> <operator pos:start="145:36" pos:end="145:36">&amp;</operator> <name pos:start="145:38" pos:end="145:53">AC3_AB_PHSFLGINU</name><operator pos:start="145:54" pos:end="145:54">)</operator> <operator pos:start="145:56" pos:end="145:57">&amp;&amp;</operator> <operator pos:start="145:59" pos:end="145:59">(</operator><name pos:start="145:60" pos:end="145:69"><name pos:start="145:60" pos:end="145:61">ab</name><operator pos:start="145:62" pos:end="145:63">-&gt;</operator><name pos:start="145:64" pos:end="145:69">cplcoe</name></name> <operator pos:start="145:71" pos:end="145:71">&amp;</operator> <literal type="number" pos:start="145:73" pos:end="145:73">1</literal> <operator pos:start="145:75" pos:end="145:76">||</operator> <name pos:start="145:78" pos:end="145:87"><name pos:start="145:78" pos:end="145:79">ab</name><operator pos:start="145:80" pos:end="145:81">-&gt;</operator><name pos:start="145:82" pos:end="145:87">cplcoe</name></name> <operator pos:start="145:89" pos:end="145:89">&amp;</operator> <operator pos:start="145:91" pos:end="145:91">(</operator><literal type="number" pos:start="145:92" pos:end="145:92">1</literal> <operator pos:start="145:94" pos:end="145:95">&lt;&lt;</operator> <literal type="number" pos:start="145:97" pos:end="145:97">1</literal><operator pos:start="145:98" pos:end="145:98">)</operator><operator pos:start="145:99" pos:end="145:99">)</operator></expr>)</condition> <block pos:start="145:102" pos:end="153:5">{<block_content pos:start="147:9" pos:end="151:39">

        <for pos:start="147:9" pos:end="151:39">for <control pos:start="147:13" pos:end="147:47">(<init pos:start="147:14" pos:end="147:21"><expr pos:start="147:14" pos:end="147:20"><name pos:start="147:14" pos:end="147:16">bnd</name> <operator pos:start="147:18" pos:end="147:18">=</operator> <literal type="number" pos:start="147:20" pos:end="147:20">0</literal></expr>;</init> <condition pos:start="147:23" pos:end="147:40"><expr pos:start="147:23" pos:end="147:39"><name pos:start="147:23" pos:end="147:25">bnd</name> <operator pos:start="147:27" pos:end="147:27">&lt;</operator> <name pos:start="147:29" pos:end="147:39"><name pos:start="147:29" pos:end="147:30">ab</name><operator pos:start="147:31" pos:end="147:32">-&gt;</operator><name pos:start="147:33" pos:end="147:39">ncplbnd</name></name></expr>;</condition> <incr pos:start="147:42" pos:end="147:46"><expr pos:start="147:42" pos:end="147:46"><name pos:start="147:42" pos:end="147:44">bnd</name><operator pos:start="147:45" pos:end="147:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="149:13" pos:end="151:39"><block_content pos:start="149:13" pos:end="151:39">

            <if_stmt pos:start="149:13" pos:end="151:39"><if pos:start="149:13" pos:end="151:39">if <condition pos:start="149:16" pos:end="149:32">(<expr pos:start="149:17" pos:end="149:31"><call pos:start="149:17" pos:end="149:31"><name pos:start="149:17" pos:end="149:24">get_bits</name><argument_list pos:start="149:25" pos:end="149:31">(<argument pos:start="149:26" pos:end="149:27"><expr pos:start="149:26" pos:end="149:27"><name pos:start="149:26" pos:end="149:27">gb</name></expr></argument>, <argument pos:start="149:30" pos:end="149:30"><expr pos:start="149:30" pos:end="149:30"><literal type="number" pos:start="149:30" pos:end="149:30">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="151:17" pos:end="151:39"><block_content pos:start="151:17" pos:end="151:39">

                <expr_stmt pos:start="151:17" pos:end="151:39"><expr pos:start="151:17" pos:end="151:38"><name pos:start="151:17" pos:end="151:26"><name pos:start="151:17" pos:end="151:18">ab</name><operator pos:start="151:19" pos:end="151:20">-&gt;</operator><name pos:start="151:21" pos:end="151:26">phsflg</name></name> <operator pos:start="151:28" pos:end="151:29">|=</operator> <literal type="number" pos:start="151:31" pos:end="151:31">1</literal> <operator pos:start="151:33" pos:end="151:34">&lt;&lt;</operator> <name pos:start="151:36" pos:end="151:38">bnd</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:39"><expr pos:start="155:5" pos:end="155:38"><call pos:start="155:5" pos:end="155:38"><name pos:start="155:5" pos:end="155:33">generate_coupling_coordinates</name><argument_list pos:start="155:34" pos:end="155:38">(<argument pos:start="155:35" pos:end="155:37"><expr pos:start="155:35" pos:end="155:37"><name pos:start="155:35" pos:end="155:37">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:21"><expr pos:start="157:5" pos:end="157:20"><name pos:start="157:5" pos:end="157:16"><name pos:start="157:5" pos:end="157:6">ab</name><operator pos:start="157:7" pos:end="157:8">-&gt;</operator><name pos:start="157:9" pos:end="157:16">rematflg</name></name> <operator pos:start="157:18" pos:end="157:18">=</operator> <literal type="number" pos:start="157:20" pos:end="157:20">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="159:5" pos:end="183:9"><if pos:start="159:5" pos:end="183:9">if <condition pos:start="159:8" pos:end="159:22">(<expr pos:start="159:9" pos:end="159:21"><name pos:start="159:9" pos:end="159:13">acmod</name> <operator pos:start="159:15" pos:end="159:16">==</operator> <literal type="number" pos:start="159:18" pos:end="159:21">0x02</literal></expr>)</condition><block type="pseudo" pos:start="161:9" pos:end="183:9"><block_content pos:start="161:9" pos:end="183:9"> <comment type="block" pos:start="159:24" pos:end="159:40">/* rematrixing */</comment>

        <if_stmt pos:start="161:9" pos:end="183:9"><if pos:start="161:9" pos:end="183:9">if <condition pos:start="161:12" pos:end="161:28">(<expr pos:start="161:13" pos:end="161:27"><call pos:start="161:13" pos:end="161:27"><name pos:start="161:13" pos:end="161:20">get_bits</name><argument_list pos:start="161:21" pos:end="161:27">(<argument pos:start="161:22" pos:end="161:23"><expr pos:start="161:22" pos:end="161:23"><name pos:start="161:22" pos:end="161:23">gb</name></expr></argument>, <argument pos:start="161:26" pos:end="161:26"><expr pos:start="161:26" pos:end="161:26"><literal type="number" pos:start="161:26" pos:end="161:26">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="161:30" pos:end="183:9">{<block_content pos:start="163:13" pos:end="181:59">

            <expr_stmt pos:start="163:13" pos:end="163:38"><expr pos:start="163:13" pos:end="163:37"><operator pos:start="163:13" pos:end="163:13">*</operator><name pos:start="163:14" pos:end="163:18">flags</name> <operator pos:start="163:20" pos:end="163:21">|=</operator> <name pos:start="163:23" pos:end="163:37">AC3_AB_REMATSTR</name></expr>;</expr_stmt>

            <if_stmt pos:start="165:13" pos:end="181:59"><if pos:start="165:13" pos:end="169:59">if <condition pos:start="165:16" pos:end="165:61">(<expr pos:start="165:17" pos:end="165:60"><name pos:start="165:17" pos:end="165:27"><name pos:start="165:17" pos:end="165:18">ab</name><operator pos:start="165:19" pos:end="165:20">-&gt;</operator><name pos:start="165:21" pos:end="165:27">cplbegf</name></name> <operator pos:start="165:29" pos:end="165:29">&gt;</operator> <literal type="number" pos:start="165:31" pos:end="165:31">2</literal> <operator pos:start="165:33" pos:end="165:34">||</operator> <operator pos:start="165:36" pos:end="165:36">!</operator><operator pos:start="165:37" pos:end="165:37">(</operator><operator pos:start="165:38" pos:end="165:38">*</operator><name pos:start="165:39" pos:end="165:43">flags</name> <operator pos:start="165:45" pos:end="165:45">&amp;</operator> <name pos:start="165:47" pos:end="165:59">AC3_AB_CPLINU</name><operator pos:start="165:60" pos:end="165:60">)</operator></expr>)</condition><block type="pseudo" pos:start="167:17" pos:end="169:59"><block_content pos:start="167:17" pos:end="169:59">

                <for pos:start="167:17" pos:end="169:59">for <control pos:start="167:21" pos:end="167:48">(<init pos:start="167:22" pos:end="167:30"><expr pos:start="167:22" pos:end="167:29"><name pos:start="167:22" pos:end="167:25">rbnd</name> <operator pos:start="167:27" pos:end="167:27">=</operator> <literal type="number" pos:start="167:29" pos:end="167:29">0</literal></expr>;</init> <condition pos:start="167:32" pos:end="167:40"><expr pos:start="167:32" pos:end="167:39"><name pos:start="167:32" pos:end="167:35">rbnd</name> <operator pos:start="167:37" pos:end="167:37">&lt;</operator> <literal type="number" pos:start="167:39" pos:end="167:39">4</literal></expr>;</condition> <incr pos:start="167:42" pos:end="167:47"><expr pos:start="167:42" pos:end="167:47"><name pos:start="167:42" pos:end="167:45">rbnd</name><operator pos:start="167:46" pos:end="167:47">++</operator></expr></incr>)</control><block type="pseudo" pos:start="169:21" pos:end="169:59"><block_content pos:start="169:21" pos:end="169:59">

                    <expr_stmt pos:start="169:21" pos:end="169:59"><expr pos:start="169:21" pos:end="169:58"><name pos:start="169:21" pos:end="169:32"><name pos:start="169:21" pos:end="169:22">ab</name><operator pos:start="169:23" pos:end="169:24">-&gt;</operator><name pos:start="169:25" pos:end="169:32">rematflg</name></name> <operator pos:start="169:34" pos:end="169:35">|=</operator> <call pos:start="169:37" pos:end="169:51"><name pos:start="169:37" pos:end="169:44">get_bits</name><argument_list pos:start="169:45" pos:end="169:51">(<argument pos:start="169:46" pos:end="169:47"><expr pos:start="169:46" pos:end="169:47"><name pos:start="169:46" pos:end="169:47">gb</name></expr></argument>, <argument pos:start="169:50" pos:end="169:50"><expr pos:start="169:50" pos:end="169:50"><literal type="number" pos:start="169:50" pos:end="169:50">1</literal></expr></argument>)</argument_list></call> <operator pos:start="169:53" pos:end="169:54">&lt;&lt;</operator> <name pos:start="169:56" pos:end="169:58">bnd</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

            <if type="elseif" pos:start="171:13" pos:end="175:59">else if <condition pos:start="171:21" pos:end="171:83">(<expr pos:start="171:22" pos:end="171:82"><name pos:start="171:22" pos:end="171:32"><name pos:start="171:22" pos:end="171:23">ab</name><operator pos:start="171:24" pos:end="171:25">-&gt;</operator><name pos:start="171:26" pos:end="171:32">cplbegf</name></name> <operator pos:start="171:34" pos:end="171:34">&gt;</operator> <literal type="number" pos:start="171:36" pos:end="171:36">0</literal> <operator pos:start="171:38" pos:end="171:39">&amp;&amp;</operator> <name pos:start="171:41" pos:end="171:51"><name pos:start="171:41" pos:end="171:42">ab</name><operator pos:start="171:43" pos:end="171:44">-&gt;</operator><name pos:start="171:45" pos:end="171:51">cplbegf</name></name> <operator pos:start="171:53" pos:end="171:54">&lt;=</operator> <literal type="number" pos:start="171:56" pos:end="171:56">2</literal> <operator pos:start="171:58" pos:end="171:59">&amp;&amp;</operator> <operator pos:start="171:61" pos:end="171:61">*</operator><name pos:start="171:62" pos:end="171:66">flags</name> <operator pos:start="171:68" pos:end="171:68">&amp;</operator> <name pos:start="171:70" pos:end="171:82">AC3_AB_CPLINU</name></expr>)</condition><block type="pseudo" pos:start="173:17" pos:end="175:59"><block_content pos:start="173:17" pos:end="175:59">

                <for pos:start="173:17" pos:end="175:59">for <control pos:start="173:21" pos:end="173:48">(<init pos:start="173:22" pos:end="173:30"><expr pos:start="173:22" pos:end="173:29"><name pos:start="173:22" pos:end="173:25">rbnd</name> <operator pos:start="173:27" pos:end="173:27">=</operator> <literal type="number" pos:start="173:29" pos:end="173:29">0</literal></expr>;</init> <condition pos:start="173:32" pos:end="173:40"><expr pos:start="173:32" pos:end="173:39"><name pos:start="173:32" pos:end="173:35">rbnd</name> <operator pos:start="173:37" pos:end="173:37">&lt;</operator> <literal type="number" pos:start="173:39" pos:end="173:39">3</literal></expr>;</condition> <incr pos:start="173:42" pos:end="173:47"><expr pos:start="173:42" pos:end="173:47"><name pos:start="173:42" pos:end="173:45">rbnd</name><operator pos:start="173:46" pos:end="173:47">++</operator></expr></incr>)</control><block type="pseudo" pos:start="175:21" pos:end="175:59"><block_content pos:start="175:21" pos:end="175:59">

                    <expr_stmt pos:start="175:21" pos:end="175:59"><expr pos:start="175:21" pos:end="175:58"><name pos:start="175:21" pos:end="175:32"><name pos:start="175:21" pos:end="175:22">ab</name><operator pos:start="175:23" pos:end="175:24">-&gt;</operator><name pos:start="175:25" pos:end="175:32">rematflg</name></name> <operator pos:start="175:34" pos:end="175:35">|=</operator> <call pos:start="175:37" pos:end="175:51"><name pos:start="175:37" pos:end="175:44">get_bits</name><argument_list pos:start="175:45" pos:end="175:51">(<argument pos:start="175:46" pos:end="175:47"><expr pos:start="175:46" pos:end="175:47"><name pos:start="175:46" pos:end="175:47">gb</name></expr></argument>, <argument pos:start="175:50" pos:end="175:50"><expr pos:start="175:50" pos:end="175:50"><literal type="number" pos:start="175:50" pos:end="175:50">1</literal></expr></argument>)</argument_list></call> <operator pos:start="175:53" pos:end="175:54">&lt;&lt;</operator> <name pos:start="175:56" pos:end="175:58">bnd</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

            <if type="elseif" pos:start="177:13" pos:end="181:59">else if <condition pos:start="177:21" pos:end="177:62">(<expr pos:start="177:22" pos:end="177:61"><operator pos:start="177:22" pos:end="177:22">!</operator><operator pos:start="177:23" pos:end="177:23">(</operator><name pos:start="177:24" pos:end="177:34"><name pos:start="177:24" pos:end="177:25">ab</name><operator pos:start="177:26" pos:end="177:27">-&gt;</operator><name pos:start="177:28" pos:end="177:34">cplbegf</name></name><operator pos:start="177:35" pos:end="177:35">)</operator> <operator pos:start="177:37" pos:end="177:38">&amp;&amp;</operator> <operator pos:start="177:40" pos:end="177:40">*</operator><name pos:start="177:41" pos:end="177:45">flags</name> <operator pos:start="177:47" pos:end="177:47">&amp;</operator> <name pos:start="177:49" pos:end="177:61">AC3_AB_CPLINU</name></expr>)</condition><block type="pseudo" pos:start="179:17" pos:end="181:59"><block_content pos:start="179:17" pos:end="181:59">

                <for pos:start="179:17" pos:end="181:59">for <control pos:start="179:21" pos:end="179:48">(<init pos:start="179:22" pos:end="179:30"><expr pos:start="179:22" pos:end="179:29"><name pos:start="179:22" pos:end="179:25">rbnd</name> <operator pos:start="179:27" pos:end="179:27">=</operator> <literal type="number" pos:start="179:29" pos:end="179:29">0</literal></expr>;</init> <condition pos:start="179:32" pos:end="179:40"><expr pos:start="179:32" pos:end="179:39"><name pos:start="179:32" pos:end="179:35">rbnd</name> <operator pos:start="179:37" pos:end="179:37">&lt;</operator> <literal type="number" pos:start="179:39" pos:end="179:39">2</literal></expr>;</condition> <incr pos:start="179:42" pos:end="179:47"><expr pos:start="179:42" pos:end="179:47"><name pos:start="179:42" pos:end="179:45">rbnd</name><operator pos:start="179:46" pos:end="179:47">++</operator></expr></incr>)</control><block type="pseudo" pos:start="181:21" pos:end="181:59"><block_content pos:start="181:21" pos:end="181:59">

                    <expr_stmt pos:start="181:21" pos:end="181:59"><expr pos:start="181:21" pos:end="181:58"><name pos:start="181:21" pos:end="181:32"><name pos:start="181:21" pos:end="181:22">ab</name><operator pos:start="181:23" pos:end="181:24">-&gt;</operator><name pos:start="181:25" pos:end="181:32">rematflg</name></name> <operator pos:start="181:34" pos:end="181:35">|=</operator> <call pos:start="181:37" pos:end="181:51"><name pos:start="181:37" pos:end="181:44">get_bits</name><argument_list pos:start="181:45" pos:end="181:51">(<argument pos:start="181:46" pos:end="181:47"><expr pos:start="181:46" pos:end="181:47"><name pos:start="181:46" pos:end="181:47">gb</name></expr></argument>, <argument pos:start="181:50" pos:end="181:50"><expr pos:start="181:50" pos:end="181:50"><literal type="number" pos:start="181:50" pos:end="181:50">1</literal></expr></argument>)</argument_list></call> <operator pos:start="181:53" pos:end="181:54">&lt;&lt;</operator> <name pos:start="181:56" pos:end="181:58">bnd</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="185:5" pos:end="187:40"><if pos:start="185:5" pos:end="187:40">if <condition pos:start="185:8" pos:end="185:31">(<expr pos:start="185:9" pos:end="185:30"><operator pos:start="185:9" pos:end="185:9">*</operator><name pos:start="185:10" pos:end="185:14">flags</name> <operator pos:start="185:16" pos:end="185:16">&amp;</operator> <name pos:start="185:18" pos:end="185:30">AC3_AB_CPLINU</name></expr>)</condition><block type="pseudo" pos:start="187:9" pos:end="187:40"><block_content pos:start="187:9" pos:end="187:40"> <comment type="block" pos:start="185:33" pos:end="185:64">/* coupling exponent strategy */</comment>

        <expr_stmt pos:start="187:9" pos:end="187:40"><expr pos:start="187:9" pos:end="187:39"><name pos:start="187:9" pos:end="187:21"><name pos:start="187:9" pos:end="187:10">ab</name><operator pos:start="187:11" pos:end="187:12">-&gt;</operator><name pos:start="187:13" pos:end="187:21">cplexpstr</name></name> <operator pos:start="187:23" pos:end="187:23">=</operator> <call pos:start="187:25" pos:end="187:39"><name pos:start="187:25" pos:end="187:32">get_bits</name><argument_list pos:start="187:33" pos:end="187:39">(<argument pos:start="187:34" pos:end="187:35"><expr pos:start="187:34" pos:end="187:35"><name pos:start="187:34" pos:end="187:35">gb</name></expr></argument>, <argument pos:start="187:38" pos:end="187:38"><expr pos:start="187:38" pos:end="187:38"><literal type="number" pos:start="187:38" pos:end="187:38">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="189:5" pos:end="191:42">for <control pos:start="189:9" pos:end="189:33">(<init pos:start="189:10" pos:end="189:15"><expr pos:start="189:10" pos:end="189:14"><name pos:start="189:10" pos:end="189:10">i</name> <operator pos:start="189:12" pos:end="189:12">=</operator> <literal type="number" pos:start="189:14" pos:end="189:14">0</literal></expr>;</init> <condition pos:start="189:17" pos:end="189:28"><expr pos:start="189:17" pos:end="189:27"><name pos:start="189:17" pos:end="189:17">i</name> <operator pos:start="189:19" pos:end="189:19">&lt;</operator> <name pos:start="189:21" pos:end="189:27">nfchans</name></expr>;</condition> <incr pos:start="189:30" pos:end="189:32"><expr pos:start="189:30" pos:end="189:32"><name pos:start="189:30" pos:end="189:30">i</name><operator pos:start="189:31" pos:end="189:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="191:9" pos:end="191:42"><block_content pos:start="191:9" pos:end="191:42"> <comment type="block" pos:start="189:35" pos:end="189:65">/* channel exponent strategy */</comment>

        <expr_stmt pos:start="191:9" pos:end="191:42"><expr pos:start="191:9" pos:end="191:41"><name pos:start="191:9" pos:end="191:23"><name pos:start="191:9" pos:end="191:10">ab</name><operator pos:start="191:11" pos:end="191:12">-&gt;</operator><name pos:start="191:13" pos:end="191:20">chexpstr</name><index pos:start="191:21" pos:end="191:23">[<expr pos:start="191:22" pos:end="191:22"><name pos:start="191:22" pos:end="191:22">i</name></expr>]</index></name> <operator pos:start="191:25" pos:end="191:25">=</operator> <call pos:start="191:27" pos:end="191:41"><name pos:start="191:27" pos:end="191:34">get_bits</name><argument_list pos:start="191:35" pos:end="191:41">(<argument pos:start="191:36" pos:end="191:37"><expr pos:start="191:36" pos:end="191:37"><name pos:start="191:36" pos:end="191:37">gb</name></expr></argument>, <argument pos:start="191:40" pos:end="191:40"><expr pos:start="191:40" pos:end="191:40"><literal type="number" pos:start="191:40" pos:end="191:40">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <if_stmt pos:start="193:5" pos:end="195:40"><if pos:start="193:5" pos:end="195:40">if <condition pos:start="193:8" pos:end="193:39">(<expr pos:start="193:9" pos:end="193:38"><name pos:start="193:9" pos:end="193:22"><name pos:start="193:9" pos:end="193:11">ctx</name><operator pos:start="193:12" pos:end="193:13">-&gt;</operator><name pos:start="193:14" pos:end="193:16">bsi</name><operator pos:start="193:17" pos:end="193:17">.</operator><name pos:start="193:18" pos:end="193:22">flags</name></name> <operator pos:start="193:24" pos:end="193:24">&amp;</operator> <name pos:start="193:26" pos:end="193:38">AC3_BSI_LFEON</name></expr>)</condition><block type="pseudo" pos:start="195:9" pos:end="195:40"><block_content pos:start="195:9" pos:end="195:40"> <comment type="block" pos:start="193:41" pos:end="193:67">/* lfe exponent strategy */</comment>

        <expr_stmt pos:start="195:9" pos:end="195:40"><expr pos:start="195:9" pos:end="195:39"><name pos:start="195:9" pos:end="195:21"><name pos:start="195:9" pos:end="195:10">ab</name><operator pos:start="195:11" pos:end="195:12">-&gt;</operator><name pos:start="195:13" pos:end="195:21">lfeexpstr</name></name> <operator pos:start="195:23" pos:end="195:23">=</operator> <call pos:start="195:25" pos:end="195:39"><name pos:start="195:25" pos:end="195:32">get_bits</name><argument_list pos:start="195:33" pos:end="195:39">(<argument pos:start="195:34" pos:end="195:35"><expr pos:start="195:34" pos:end="195:35"><name pos:start="195:34" pos:end="195:35">gb</name></expr></argument>, <argument pos:start="195:38" pos:end="195:38"><expr pos:start="195:38" pos:end="195:38"><literal type="number" pos:start="195:38" pos:end="195:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="197:5" pos:end="207:13">for <control pos:start="197:9" pos:end="197:33">(<init pos:start="197:10" pos:end="197:15"><expr pos:start="197:10" pos:end="197:14"><name pos:start="197:10" pos:end="197:10">i</name> <operator pos:start="197:12" pos:end="197:12">=</operator> <literal type="number" pos:start="197:14" pos:end="197:14">0</literal></expr>;</init> <condition pos:start="197:17" pos:end="197:28"><expr pos:start="197:17" pos:end="197:27"><name pos:start="197:17" pos:end="197:17">i</name> <operator pos:start="197:19" pos:end="197:19">&lt;</operator> <name pos:start="197:21" pos:end="197:27">nfchans</name></expr>;</condition> <incr pos:start="197:30" pos:end="197:32"><expr pos:start="197:30" pos:end="197:32"><name pos:start="197:30" pos:end="197:30">i</name><operator pos:start="197:31" pos:end="197:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="199:9" pos:end="207:13"><block_content pos:start="199:9" pos:end="207:13"> <comment type="block" pos:start="197:35" pos:end="197:62">/* channel bandwidth code */</comment>

        <if_stmt pos:start="199:9" pos:end="207:13"><if pos:start="199:9" pos:end="207:13">if <condition pos:start="199:12" pos:end="199:48">(<expr pos:start="199:13" pos:end="199:47"><name pos:start="199:13" pos:end="199:27"><name pos:start="199:13" pos:end="199:14">ab</name><operator pos:start="199:15" pos:end="199:16">-&gt;</operator><name pos:start="199:17" pos:end="199:24">chexpstr</name><index pos:start="199:25" pos:end="199:27">[<expr pos:start="199:26" pos:end="199:26"><name pos:start="199:26" pos:end="199:26">i</name></expr>]</index></name> <operator pos:start="199:29" pos:end="199:30">!=</operator> <name pos:start="199:32" pos:end="199:47">AC3_EXPSTR_REUSE</name></expr>)</condition><block type="pseudo" pos:start="201:13" pos:end="207:13"><block_content pos:start="201:13" pos:end="207:13">

            <if_stmt pos:start="201:13" pos:end="207:13"><if pos:start="201:13" pos:end="207:13">if <condition pos:start="201:16" pos:end="201:42">(<expr pos:start="201:17" pos:end="201:41"><operator pos:start="201:17" pos:end="201:17">!</operator><operator pos:start="201:18" pos:end="201:18">(</operator><name pos:start="201:19" pos:end="201:29"><name pos:start="201:19" pos:end="201:20">ab</name><operator pos:start="201:21" pos:end="201:22">-&gt;</operator><name pos:start="201:23" pos:end="201:29">chincpl</name></name> <operator pos:start="201:31" pos:end="201:31">&amp;</operator> <operator pos:start="201:33" pos:end="201:33">(</operator><literal type="number" pos:start="201:34" pos:end="201:34">1</literal> <operator pos:start="201:36" pos:end="201:37">&lt;&lt;</operator> <name pos:start="201:39" pos:end="201:39">i</name><operator pos:start="201:40" pos:end="201:40">)</operator><operator pos:start="201:41" pos:end="201:41">)</operator></expr>)</condition> <block pos:start="201:44" pos:end="207:13">{<block_content pos:start="203:17" pos:end="205:46">

                <expr_stmt pos:start="203:17" pos:end="203:49"><expr pos:start="203:17" pos:end="203:48"><name pos:start="203:17" pos:end="203:30"><name pos:start="203:17" pos:end="203:18">ab</name><operator pos:start="203:19" pos:end="203:20">-&gt;</operator><name pos:start="203:21" pos:end="203:27">chbwcod</name><index pos:start="203:28" pos:end="203:30">[<expr pos:start="203:29" pos:end="203:29"><name pos:start="203:29" pos:end="203:29">i</name></expr>]</index></name> <operator pos:start="203:32" pos:end="203:32">=</operator> <call pos:start="203:34" pos:end="203:48"><name pos:start="203:34" pos:end="203:41">get_bits</name><argument_list pos:start="203:42" pos:end="203:48">(<argument pos:start="203:43" pos:end="203:44"><expr pos:start="203:43" pos:end="203:44"><name pos:start="203:43" pos:end="203:44">gb</name></expr></argument>, <argument pos:start="203:47" pos:end="203:47"><expr pos:start="203:47" pos:end="203:47"><literal type="number" pos:start="203:47" pos:end="203:47">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="205:17" pos:end="205:46"><expr pos:start="205:17" pos:end="205:45"><call pos:start="205:17" pos:end="205:45"><name pos:start="205:17" pos:end="205:22">assert</name> <argument_list pos:start="205:24" pos:end="205:45">(<argument pos:start="205:25" pos:end="205:44"><expr pos:start="205:25" pos:end="205:44"><name pos:start="205:25" pos:end="205:38"><name pos:start="205:25" pos:end="205:26">ab</name><operator pos:start="205:27" pos:end="205:28">-&gt;</operator><name pos:start="205:29" pos:end="205:35">chbwcod</name><index pos:start="205:36" pos:end="205:38">[<expr pos:start="205:37" pos:end="205:37"><name pos:start="205:37" pos:end="205:37">i</name></expr>]</index></name> <operator pos:start="205:40" pos:end="205:41">&lt;=</operator> <literal type="number" pos:start="205:43" pos:end="205:44">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>

    <if_stmt pos:start="209:5" pos:end="227:9"><if pos:start="209:5" pos:end="227:9">if <condition pos:start="209:8" pos:end="209:31">(<expr pos:start="209:9" pos:end="209:30"><operator pos:start="209:9" pos:end="209:9">*</operator><name pos:start="209:10" pos:end="209:14">flags</name> <operator pos:start="209:16" pos:end="209:16">&amp;</operator> <name pos:start="209:18" pos:end="209:30">AC3_AB_CPLINU</name></expr>)</condition><block type="pseudo" pos:start="211:9" pos:end="227:9"><block_content pos:start="211:9" pos:end="227:9">

        <if_stmt pos:start="211:9" pos:end="227:9"><if pos:start="211:9" pos:end="227:9">if <condition pos:start="211:12" pos:end="211:46">(<expr pos:start="211:13" pos:end="211:45"><name pos:start="211:13" pos:end="211:25"><name pos:start="211:13" pos:end="211:14">ab</name><operator pos:start="211:15" pos:end="211:16">-&gt;</operator><name pos:start="211:17" pos:end="211:25">cplexpstr</name></name> <operator pos:start="211:27" pos:end="211:28">!=</operator> <name pos:start="211:30" pos:end="211:45">AC3_EXPSTR_REUSE</name></expr>)</condition> <block pos:start="211:48" pos:end="227:9">{<block_content pos:start="213:13" pos:end="225:51"><comment type="block" pos:start="211:49" pos:end="211:72">/* coupling exponents */</comment>

            <expr_stmt pos:start="213:13" pos:end="213:34"><expr pos:start="213:13" pos:end="213:33"><name pos:start="213:13" pos:end="213:27">bit_alloc_flags</name> <operator pos:start="213:29" pos:end="213:30">|=</operator> <literal type="number" pos:start="213:32" pos:end="213:33">64</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:49"><expr pos:start="215:13" pos:end="215:48"><name pos:start="215:13" pos:end="215:25"><name pos:start="215:13" pos:end="215:14">ab</name><operator pos:start="215:15" pos:end="215:16">-&gt;</operator><name pos:start="215:17" pos:end="215:25">cplabsexp</name></name> <operator pos:start="215:27" pos:end="215:27">=</operator> <call pos:start="215:29" pos:end="215:43"><name pos:start="215:29" pos:end="215:36">get_bits</name><argument_list pos:start="215:37" pos:end="215:43">(<argument pos:start="215:38" pos:end="215:39"><expr pos:start="215:38" pos:end="215:39"><name pos:start="215:38" pos:end="215:39">gb</name></expr></argument>, <argument pos:start="215:42" pos:end="215:42"><expr pos:start="215:42" pos:end="215:42"><literal type="number" pos:start="215:42" pos:end="215:42">4</literal></expr></argument>)</argument_list></call> <operator pos:start="215:45" pos:end="215:46">&lt;&lt;</operator> <literal type="number" pos:start="215:48" pos:end="215:48">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:54"><expr pos:start="217:13" pos:end="217:53"><name pos:start="217:13" pos:end="217:27"><name pos:start="217:13" pos:end="217:14">ab</name><operator pos:start="217:15" pos:end="217:16">-&gt;</operator><name pos:start="217:17" pos:end="217:27">cplstrtmant</name></name> <operator pos:start="217:29" pos:end="217:29">=</operator> <operator pos:start="217:31" pos:end="217:31">(</operator><name pos:start="217:32" pos:end="217:42"><name pos:start="217:32" pos:end="217:33">ab</name><operator pos:start="217:34" pos:end="217:35">-&gt;</operator><name pos:start="217:36" pos:end="217:42">cplbegf</name></name> <operator pos:start="217:44" pos:end="217:44">*</operator> <literal type="number" pos:start="217:46" pos:end="217:47">12</literal><operator pos:start="217:48" pos:end="217:48">)</operator> <operator pos:start="217:50" pos:end="217:50">+</operator> <literal type="number" pos:start="217:52" pos:end="217:53">37</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:62"><expr pos:start="219:13" pos:end="219:61"><name pos:start="219:13" pos:end="219:26"><name pos:start="219:13" pos:end="219:14">ab</name><operator pos:start="219:15" pos:end="219:16">-&gt;</operator><name pos:start="219:17" pos:end="219:26">cplendmant</name></name> <operator pos:start="219:28" pos:end="219:28">=</operator> <operator pos:start="219:30" pos:end="219:30">(</operator><operator pos:start="219:31" pos:end="219:31">(</operator><name pos:start="219:32" pos:end="219:45"><name pos:start="219:32" pos:end="219:33">ab</name><operator pos:start="219:34" pos:end="219:35">-&gt;</operator><name pos:start="219:36" pos:end="219:45">cplendmant</name></name> <operator pos:start="219:47" pos:end="219:47">+</operator> <literal type="number" pos:start="219:49" pos:end="219:49">3</literal><operator pos:start="219:50" pos:end="219:50">)</operator> <operator pos:start="219:52" pos:end="219:52">*</operator> <literal type="number" pos:start="219:54" pos:end="219:55">12</literal><operator pos:start="219:56" pos:end="219:56">)</operator> <operator pos:start="219:58" pos:end="219:58">+</operator> <literal type="number" pos:start="219:60" pos:end="219:61">37</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:91"><expr pos:start="221:13" pos:end="221:90"><name pos:start="221:13" pos:end="221:24"><name pos:start="221:13" pos:end="221:14">ab</name><operator pos:start="221:15" pos:end="221:16">-&gt;</operator><name pos:start="221:17" pos:end="221:24">ncplgrps</name></name> <operator pos:start="221:26" pos:end="221:26">=</operator> <operator pos:start="221:28" pos:end="221:28">(</operator><name pos:start="221:29" pos:end="221:42"><name pos:start="221:29" pos:end="221:30">ab</name><operator pos:start="221:31" pos:end="221:32">-&gt;</operator><name pos:start="221:33" pos:end="221:42">cplendmant</name></name> <operator pos:start="221:44" pos:end="221:44">-</operator> <name pos:start="221:46" pos:end="221:60"><name pos:start="221:46" pos:end="221:47">ab</name><operator pos:start="221:48" pos:end="221:49">-&gt;</operator><name pos:start="221:50" pos:end="221:60">cplstrtmant</name></name><operator pos:start="221:61" pos:end="221:61">)</operator> <operator pos:start="221:63" pos:end="221:63">/</operator> <operator pos:start="221:65" pos:end="221:65">(</operator><literal type="number" pos:start="221:66" pos:end="221:66">3</literal> <operator pos:start="221:68" pos:end="221:69">&lt;&lt;</operator> <operator pos:start="221:71" pos:end="221:71">(</operator><name pos:start="221:72" pos:end="221:84"><name pos:start="221:72" pos:end="221:73">ab</name><operator pos:start="221:74" pos:end="221:75">-&gt;</operator><name pos:start="221:76" pos:end="221:84">cplexpstr</name></name> <operator pos:start="221:86" pos:end="221:86">-</operator> <literal type="number" pos:start="221:88" pos:end="221:88">1</literal><operator pos:start="221:89" pos:end="221:89">)</operator><operator pos:start="221:90" pos:end="221:90">)</operator></expr>;</expr_stmt>

            <for pos:start="223:13" pos:end="225:51">for <control pos:start="223:17" pos:end="223:52">(<init pos:start="223:18" pos:end="223:25"><expr pos:start="223:18" pos:end="223:24"><name pos:start="223:18" pos:end="223:20">grp</name> <operator pos:start="223:22" pos:end="223:22">=</operator> <literal type="number" pos:start="223:24" pos:end="223:24">0</literal></expr>;</init> <condition pos:start="223:27" pos:end="223:45"><expr pos:start="223:27" pos:end="223:44"><name pos:start="223:27" pos:end="223:29">grp</name> <operator pos:start="223:31" pos:end="223:31">&lt;</operator> <name pos:start="223:33" pos:end="223:44"><name pos:start="223:33" pos:end="223:34">ab</name><operator pos:start="223:35" pos:end="223:36">-&gt;</operator><name pos:start="223:37" pos:end="223:44">ncplgrps</name></name></expr>;</condition> <incr pos:start="223:47" pos:end="223:51"><expr pos:start="223:47" pos:end="223:51"><name pos:start="223:47" pos:end="223:49">grp</name><operator pos:start="223:50" pos:end="223:51">++</operator></expr></incr>)</control><block type="pseudo" pos:start="225:17" pos:end="225:51"><block_content pos:start="225:17" pos:end="225:51">

                <expr_stmt pos:start="225:17" pos:end="225:51"><expr pos:start="225:17" pos:end="225:50"><name pos:start="225:17" pos:end="225:32"><name pos:start="225:17" pos:end="225:18">ab</name><operator pos:start="225:19" pos:end="225:20">-&gt;</operator><name pos:start="225:21" pos:end="225:27">cplexps</name><index pos:start="225:28" pos:end="225:32">[<expr pos:start="225:29" pos:end="225:31"><name pos:start="225:29" pos:end="225:31">grp</name></expr>]</index></name> <operator pos:start="225:34" pos:end="225:34">=</operator> <call pos:start="225:36" pos:end="225:50"><name pos:start="225:36" pos:end="225:43">get_bits</name><argument_list pos:start="225:44" pos:end="225:50">(<argument pos:start="225:45" pos:end="225:46"><expr pos:start="225:45" pos:end="225:46"><name pos:start="225:45" pos:end="225:46">gb</name></expr></argument>, <argument pos:start="225:49" pos:end="225:49"><expr pos:start="225:49" pos:end="225:49"><literal type="number" pos:start="225:49" pos:end="225:49">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

    <for pos:start="229:5" pos:end="255:9">for <control pos:start="229:9" pos:end="229:33">(<init pos:start="229:10" pos:end="229:15"><expr pos:start="229:10" pos:end="229:14"><name pos:start="229:10" pos:end="229:10">i</name> <operator pos:start="229:12" pos:end="229:12">=</operator> <literal type="number" pos:start="229:14" pos:end="229:14">0</literal></expr>;</init> <condition pos:start="229:17" pos:end="229:28"><expr pos:start="229:17" pos:end="229:27"><name pos:start="229:17" pos:end="229:17">i</name> <operator pos:start="229:19" pos:end="229:19">&lt;</operator> <name pos:start="229:21" pos:end="229:27">nfchans</name></expr>;</condition> <incr pos:start="229:30" pos:end="229:32"><expr pos:start="229:30" pos:end="229:32"><name pos:start="229:30" pos:end="229:30">i</name><operator pos:start="229:31" pos:end="229:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="231:9" pos:end="255:9"><block_content pos:start="231:9" pos:end="255:9"> <comment type="block" pos:start="229:35" pos:end="229:61">/* fbw channel exponents */</comment>

        <if_stmt pos:start="231:9" pos:end="255:9"><if pos:start="231:9" pos:end="255:9">if <condition pos:start="231:12" pos:end="231:48">(<expr pos:start="231:13" pos:end="231:47"><name pos:start="231:13" pos:end="231:27"><name pos:start="231:13" pos:end="231:14">ab</name><operator pos:start="231:15" pos:end="231:16">-&gt;</operator><name pos:start="231:17" pos:end="231:24">chexpstr</name><index pos:start="231:25" pos:end="231:27">[<expr pos:start="231:26" pos:end="231:26"><name pos:start="231:26" pos:end="231:26">i</name></expr>]</index></name> <operator pos:start="231:29" pos:end="231:30">!=</operator> <name pos:start="231:32" pos:end="231:47">AC3_EXPSTR_REUSE</name></expr>)</condition> <block pos:start="231:50" pos:end="255:9">{<block_content pos:start="233:13" pos:end="253:45">

            <expr_stmt pos:start="233:13" pos:end="233:38"><expr pos:start="233:13" pos:end="233:37"><name pos:start="233:13" pos:end="233:27">bit_alloc_flags</name> <operator pos:start="233:29" pos:end="233:30">|=</operator> <literal type="number" pos:start="233:32" pos:end="233:32">1</literal> <operator pos:start="233:34" pos:end="233:35">&lt;&lt;</operator> <name pos:start="233:37" pos:end="233:37">i</name></expr>;</expr_stmt>

            <if_stmt pos:start="235:13" pos:end="241:66"><if pos:start="235:13" pos:end="237:57">if <condition pos:start="235:16" pos:end="235:39">(<expr pos:start="235:17" pos:end="235:38"><name pos:start="235:17" pos:end="235:27"><name pos:start="235:17" pos:end="235:18">ab</name><operator pos:start="235:19" pos:end="235:20">-&gt;</operator><name pos:start="235:21" pos:end="235:27">chincpl</name></name> <operator pos:start="235:29" pos:end="235:29">&amp;</operator> <operator pos:start="235:31" pos:end="235:31">(</operator><literal type="number" pos:start="235:32" pos:end="235:32">1</literal> <operator pos:start="235:34" pos:end="235:35">&lt;&lt;</operator> <name pos:start="235:37" pos:end="235:37">i</name><operator pos:start="235:38" pos:end="235:38">)</operator></expr>)</condition><block type="pseudo" pos:start="237:17" pos:end="237:57"><block_content pos:start="237:17" pos:end="237:57">

                <expr_stmt pos:start="237:17" pos:end="237:57"><expr pos:start="237:17" pos:end="237:56"><name pos:start="237:17" pos:end="237:30"><name pos:start="237:17" pos:end="237:18">ab</name><operator pos:start="237:19" pos:end="237:20">-&gt;</operator><name pos:start="237:21" pos:end="237:27">endmant</name><index pos:start="237:28" pos:end="237:30">[<expr pos:start="237:29" pos:end="237:29"><name pos:start="237:29" pos:end="237:29">i</name></expr>]</index></name> <operator pos:start="237:32" pos:end="237:32">=</operator> <operator pos:start="237:34" pos:end="237:34">(</operator><name pos:start="237:35" pos:end="237:45"><name pos:start="237:35" pos:end="237:36">ab</name><operator pos:start="237:37" pos:end="237:38">-&gt;</operator><name pos:start="237:39" pos:end="237:45">cplbegf</name></name> <operator pos:start="237:47" pos:end="237:47">*</operator> <literal type="number" pos:start="237:49" pos:end="237:50">12</literal><operator pos:start="237:51" pos:end="237:51">)</operator> <operator pos:start="237:53" pos:end="237:53">+</operator> <literal type="number" pos:start="237:55" pos:end="237:56">37</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="239:13" pos:end="241:66">else<block type="pseudo" pos:start="241:17" pos:end="241:66"><block_content pos:start="241:17" pos:end="241:66">

                <expr_stmt pos:start="241:17" pos:end="241:66"><expr pos:start="241:17" pos:end="241:65"><name pos:start="241:17" pos:end="241:30"><name pos:start="241:17" pos:end="241:18">ab</name><operator pos:start="241:19" pos:end="241:20">-&gt;</operator><name pos:start="241:21" pos:end="241:27">endmant</name><index pos:start="241:28" pos:end="241:30">[<expr pos:start="241:29" pos:end="241:29"><name pos:start="241:29" pos:end="241:29">i</name></expr>]</index></name> <operator pos:start="241:32" pos:end="241:32">=</operator> <operator pos:start="241:34" pos:end="241:34">(</operator><operator pos:start="241:35" pos:end="241:35">(</operator><name pos:start="241:36" pos:end="241:49"><name pos:start="241:36" pos:end="241:37">ab</name><operator pos:start="241:38" pos:end="241:39">-&gt;</operator><name pos:start="241:40" pos:end="241:46">chbwcod</name><index pos:start="241:47" pos:end="241:49">[<expr pos:start="241:48" pos:end="241:48"><name pos:start="241:48" pos:end="241:48">i</name></expr>]</index></name> <operator pos:start="241:51" pos:end="241:51">+</operator> <literal type="number" pos:start="241:53" pos:end="241:53">3</literal><operator pos:start="241:54" pos:end="241:54">)</operator> <operator pos:start="241:56" pos:end="241:56">*</operator> <literal type="number" pos:start="241:58" pos:end="241:59">12</literal><operator pos:start="241:60" pos:end="241:60">)</operator> <operator pos:start="241:62" pos:end="241:62">+</operator> <literal type="number" pos:start="241:64" pos:end="241:65">37</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="243:13" pos:end="245:99"><expr pos:start="243:13" pos:end="245:98"><name pos:start="243:13" pos:end="243:26"><name pos:start="243:13" pos:end="243:14">ab</name><operator pos:start="243:15" pos:end="243:16">-&gt;</operator><name pos:start="243:17" pos:end="243:23">nchgrps</name><index pos:start="243:24" pos:end="243:26">[<expr pos:start="243:25" pos:end="243:25"><name pos:start="243:25" pos:end="243:25">i</name></expr>]</index></name> <operator pos:start="243:28" pos:end="243:28">=</operator>

                <operator pos:start="245:17" pos:end="245:17">(</operator><name pos:start="245:18" pos:end="245:31"><name pos:start="245:18" pos:end="245:19">ab</name><operator pos:start="245:20" pos:end="245:21">-&gt;</operator><name pos:start="245:22" pos:end="245:28">endmant</name><index pos:start="245:29" pos:end="245:31">[<expr pos:start="245:30" pos:end="245:30"><name pos:start="245:30" pos:end="245:30">i</name></expr>]</index></name> <operator pos:start="245:33" pos:end="245:33">+</operator> <operator pos:start="245:35" pos:end="245:35">(</operator><literal type="number" pos:start="245:36" pos:end="245:36">3</literal> <operator pos:start="245:38" pos:end="245:39">&lt;&lt;</operator> <operator pos:start="245:41" pos:end="245:41">(</operator><name pos:start="245:42" pos:end="245:56"><name pos:start="245:42" pos:end="245:43">ab</name><operator pos:start="245:44" pos:end="245:45">-&gt;</operator><name pos:start="245:46" pos:end="245:53">chexpstr</name><index pos:start="245:54" pos:end="245:56">[<expr pos:start="245:55" pos:end="245:55"><name pos:start="245:55" pos:end="245:55">i</name></expr>]</index></name> <operator pos:start="245:58" pos:end="245:58">-</operator> <literal type="number" pos:start="245:60" pos:end="245:60">1</literal><operator pos:start="245:61" pos:end="245:61">)</operator><operator pos:start="245:62" pos:end="245:62">)</operator> <operator pos:start="245:64" pos:end="245:64">-</operator> <literal type="number" pos:start="245:66" pos:end="245:66">4</literal><operator pos:start="245:67" pos:end="245:67">)</operator> <operator pos:start="245:69" pos:end="245:69">/</operator> <operator pos:start="245:71" pos:end="245:71">(</operator><literal type="number" pos:start="245:72" pos:end="245:72">3</literal> <operator pos:start="245:74" pos:end="245:75">&lt;&lt;</operator> <operator pos:start="245:77" pos:end="245:77">(</operator><name pos:start="245:78" pos:end="245:92"><name pos:start="245:78" pos:end="245:79">ab</name><operator pos:start="245:80" pos:end="245:81">-&gt;</operator><name pos:start="245:82" pos:end="245:89">chexpstr</name><index pos:start="245:90" pos:end="245:92">[<expr pos:start="245:91" pos:end="245:91"><name pos:start="245:91" pos:end="245:91">i</name></expr>]</index></name> <operator pos:start="245:94" pos:end="245:94">-</operator> <literal type="number" pos:start="245:96" pos:end="245:96">1</literal><operator pos:start="245:97" pos:end="245:97">)</operator><operator pos:start="245:98" pos:end="245:98">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:63"><expr pos:start="247:13" pos:end="247:62"><name pos:start="247:13" pos:end="247:26"><name pos:start="247:13" pos:end="247:14">ab</name><operator pos:start="247:15" pos:end="247:16">-&gt;</operator><name pos:start="247:17" pos:end="247:20">exps</name><index pos:start="247:21" pos:end="247:23">[<expr pos:start="247:22" pos:end="247:22"><name pos:start="247:22" pos:end="247:22">i</name></expr>]</index><index pos:start="247:24" pos:end="247:26">[<expr pos:start="247:25" pos:end="247:25"><literal type="number" pos:start="247:25" pos:end="247:25">0</literal></expr>]</index></name> <operator pos:start="247:28" pos:end="247:28">=</operator> <name pos:start="247:30" pos:end="247:44"><name pos:start="247:30" pos:end="247:31">ab</name><operator pos:start="247:32" pos:end="247:33">-&gt;</operator><name pos:start="247:34" pos:end="247:38">dexps</name><index pos:start="247:39" pos:end="247:41">[<expr pos:start="247:40" pos:end="247:40"><name pos:start="247:40" pos:end="247:40">i</name></expr>]</index><index pos:start="247:42" pos:end="247:44">[<expr pos:start="247:43" pos:end="247:43"><literal type="number" pos:start="247:43" pos:end="247:43">0</literal></expr>]</index></name> <operator pos:start="247:46" pos:end="247:46">=</operator> <call pos:start="247:48" pos:end="247:62"><name pos:start="247:48" pos:end="247:55">get_bits</name><argument_list pos:start="247:56" pos:end="247:62">(<argument pos:start="247:57" pos:end="247:58"><expr pos:start="247:57" pos:end="247:58"><name pos:start="247:57" pos:end="247:58">gb</name></expr></argument>, <argument pos:start="247:61" pos:end="247:61"><expr pos:start="247:61" pos:end="247:61"><literal type="number" pos:start="247:61" pos:end="247:61">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="249:13" pos:end="251:51">for <control pos:start="249:17" pos:end="249:55">(<init pos:start="249:18" pos:end="249:25"><expr pos:start="249:18" pos:end="249:24"><name pos:start="249:18" pos:end="249:20">grp</name> <operator pos:start="249:22" pos:end="249:22">=</operator> <literal type="number" pos:start="249:24" pos:end="249:24">1</literal></expr>;</init> <condition pos:start="249:27" pos:end="249:48"><expr pos:start="249:27" pos:end="249:47"><name pos:start="249:27" pos:end="249:29">grp</name> <operator pos:start="249:31" pos:end="249:32">&lt;=</operator> <name pos:start="249:34" pos:end="249:47"><name pos:start="249:34" pos:end="249:35">ab</name><operator pos:start="249:36" pos:end="249:37">-&gt;</operator><name pos:start="249:38" pos:end="249:44">nchgrps</name><index pos:start="249:45" pos:end="249:47">[<expr pos:start="249:46" pos:end="249:46"><name pos:start="249:46" pos:end="249:46">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="249:50" pos:end="249:54"><expr pos:start="249:50" pos:end="249:54"><name pos:start="249:50" pos:end="249:52">grp</name><operator pos:start="249:53" pos:end="249:54">++</operator></expr></incr>)</control><block type="pseudo" pos:start="251:17" pos:end="251:51"><block_content pos:start="251:17" pos:end="251:51">

                <expr_stmt pos:start="251:17" pos:end="251:51"><expr pos:start="251:17" pos:end="251:50"><name pos:start="251:17" pos:end="251:32"><name pos:start="251:17" pos:end="251:18">ab</name><operator pos:start="251:19" pos:end="251:20">-&gt;</operator><name pos:start="251:21" pos:end="251:24">exps</name><index pos:start="251:25" pos:end="251:27">[<expr pos:start="251:26" pos:end="251:26"><name pos:start="251:26" pos:end="251:26">i</name></expr>]</index><index pos:start="251:28" pos:end="251:32">[<expr pos:start="251:29" pos:end="251:31"><name pos:start="251:29" pos:end="251:31">grp</name></expr>]</index></name> <operator pos:start="251:34" pos:end="251:34">=</operator> <call pos:start="251:36" pos:end="251:50"><name pos:start="251:36" pos:end="251:43">get_bits</name><argument_list pos:start="251:44" pos:end="251:50">(<argument pos:start="251:45" pos:end="251:46"><expr pos:start="251:45" pos:end="251:46"><name pos:start="251:45" pos:end="251:46">gb</name></expr></argument>, <argument pos:start="251:49" pos:end="251:49"><expr pos:start="251:49" pos:end="251:49"><literal type="number" pos:start="251:49" pos:end="251:49">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="253:13" pos:end="253:45"><expr pos:start="253:13" pos:end="253:44"><name pos:start="253:13" pos:end="253:26"><name pos:start="253:13" pos:end="253:14">ab</name><operator pos:start="253:15" pos:end="253:16">-&gt;</operator><name pos:start="253:17" pos:end="253:23">gainrng</name><index pos:start="253:24" pos:end="253:26">[<expr pos:start="253:25" pos:end="253:25"><name pos:start="253:25" pos:end="253:25">i</name></expr>]</index></name> <operator pos:start="253:28" pos:end="253:28">=</operator> <call pos:start="253:30" pos:end="253:44"><name pos:start="253:30" pos:end="253:37">get_bits</name><argument_list pos:start="253:38" pos:end="253:44">(<argument pos:start="253:39" pos:end="253:40"><expr pos:start="253:39" pos:end="253:40"><name pos:start="253:39" pos:end="253:40">gb</name></expr></argument>, <argument pos:start="253:43" pos:end="253:43"><expr pos:start="253:43" pos:end="253:43"><literal type="number" pos:start="253:43" pos:end="253:43">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt></block_content></block></for>

    <if_stmt pos:start="257:5" pos:end="269:9"><if pos:start="257:5" pos:end="269:9">if <condition pos:start="257:8" pos:end="257:39">(<expr pos:start="257:9" pos:end="257:38"><name pos:start="257:9" pos:end="257:22"><name pos:start="257:9" pos:end="257:11">ctx</name><operator pos:start="257:12" pos:end="257:13">-&gt;</operator><name pos:start="257:14" pos:end="257:16">bsi</name><operator pos:start="257:17" pos:end="257:17">.</operator><name pos:start="257:18" pos:end="257:22">flags</name></name> <operator pos:start="257:24" pos:end="257:24">&amp;</operator> <name pos:start="257:26" pos:end="257:38">AC3_BSI_LFEON</name></expr>)</condition><block type="pseudo" pos:start="259:9" pos:end="269:9"><block_content pos:start="259:9" pos:end="269:9"> <comment type="block" pos:start="257:41" pos:end="257:59">/* lfe exponents */</comment>

        <if_stmt pos:start="259:9" pos:end="269:9"><if pos:start="259:9" pos:end="269:9">if <condition pos:start="259:12" pos:end="259:46">(<expr pos:start="259:13" pos:end="259:45"><name pos:start="259:13" pos:end="259:25"><name pos:start="259:13" pos:end="259:14">ab</name><operator pos:start="259:15" pos:end="259:16">-&gt;</operator><name pos:start="259:17" pos:end="259:25">lfeexpstr</name></name> <operator pos:start="259:27" pos:end="259:28">!=</operator> <name pos:start="259:30" pos:end="259:45">AC3_EXPSTR_REUSE</name></expr>)</condition> <block pos:start="259:48" pos:end="269:9">{<block_content pos:start="261:13" pos:end="267:45">

            <expr_stmt pos:start="261:13" pos:end="261:34"><expr pos:start="261:13" pos:end="261:33"><name pos:start="261:13" pos:end="261:27">bit_alloc_flags</name> <operator pos:start="261:29" pos:end="261:30">|=</operator> <literal type="number" pos:start="261:32" pos:end="261:33">32</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="263:13" pos:end="263:63"><expr pos:start="263:13" pos:end="263:62"><name pos:start="263:13" pos:end="263:26"><name pos:start="263:13" pos:end="263:14">ab</name><operator pos:start="263:15" pos:end="263:16">-&gt;</operator><name pos:start="263:17" pos:end="263:23">lfeexps</name><index pos:start="263:24" pos:end="263:26">[<expr pos:start="263:25" pos:end="263:25"><literal type="number" pos:start="263:25" pos:end="263:25">0</literal></expr>]</index></name> <operator pos:start="263:28" pos:end="263:28">=</operator> <name pos:start="263:30" pos:end="263:44"><name pos:start="263:30" pos:end="263:31">ab</name><operator pos:start="263:32" pos:end="263:33">-&gt;</operator><name pos:start="263:34" pos:end="263:41">dlfeexps</name><index pos:start="263:42" pos:end="263:44">[<expr pos:start="263:43" pos:end="263:43"><literal type="number" pos:start="263:43" pos:end="263:43">0</literal></expr>]</index></name> <operator pos:start="263:46" pos:end="263:46">=</operator> <call pos:start="263:48" pos:end="263:62"><name pos:start="263:48" pos:end="263:55">get_bits</name><argument_list pos:start="263:56" pos:end="263:62">(<argument pos:start="263:57" pos:end="263:58"><expr pos:start="263:57" pos:end="263:58"><name pos:start="263:57" pos:end="263:58">gb</name></expr></argument>, <argument pos:start="263:61" pos:end="263:61"><expr pos:start="263:61" pos:end="263:61"><literal type="number" pos:start="263:61" pos:end="263:61">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="265:13" pos:end="265:45"><expr pos:start="265:13" pos:end="265:44"><name pos:start="265:13" pos:end="265:26"><name pos:start="265:13" pos:end="265:14">ab</name><operator pos:start="265:15" pos:end="265:16">-&gt;</operator><name pos:start="265:17" pos:end="265:23">lfeexps</name><index pos:start="265:24" pos:end="265:26">[<expr pos:start="265:25" pos:end="265:25"><literal type="number" pos:start="265:25" pos:end="265:25">1</literal></expr>]</index></name> <operator pos:start="265:28" pos:end="265:28">=</operator> <call pos:start="265:30" pos:end="265:44"><name pos:start="265:30" pos:end="265:37">get_bits</name><argument_list pos:start="265:38" pos:end="265:44">(<argument pos:start="265:39" pos:end="265:40"><expr pos:start="265:39" pos:end="265:40"><name pos:start="265:39" pos:end="265:40">gb</name></expr></argument>, <argument pos:start="265:43" pos:end="265:43"><expr pos:start="265:43" pos:end="265:43"><literal type="number" pos:start="265:43" pos:end="265:43">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="267:13" pos:end="267:45"><expr pos:start="267:13" pos:end="267:44"><name pos:start="267:13" pos:end="267:26"><name pos:start="267:13" pos:end="267:14">ab</name><operator pos:start="267:15" pos:end="267:16">-&gt;</operator><name pos:start="267:17" pos:end="267:23">lfeexps</name><index pos:start="267:24" pos:end="267:26">[<expr pos:start="267:25" pos:end="267:25"><literal type="number" pos:start="267:25" pos:end="267:25">2</literal></expr>]</index></name> <operator pos:start="267:28" pos:end="267:28">=</operator> <call pos:start="267:30" pos:end="267:44"><name pos:start="267:30" pos:end="267:37">get_bits</name><argument_list pos:start="267:38" pos:end="267:44">(<argument pos:start="267:39" pos:end="267:40"><expr pos:start="267:39" pos:end="267:40"><name pos:start="267:39" pos:end="267:40">gb</name></expr></argument>, <argument pos:start="267:43" pos:end="267:43"><expr pos:start="267:43" pos:end="267:43"><literal type="number" pos:start="267:43" pos:end="267:43">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="271:5" pos:end="277:5"><if pos:start="271:5" pos:end="277:5">if <condition pos:start="271:8" pos:end="271:30">(<expr pos:start="271:9" pos:end="271:29"><call pos:start="271:9" pos:end="271:29"><name pos:start="271:9" pos:end="271:24">decode_exponents</name><argument_list pos:start="271:25" pos:end="271:29">(<argument pos:start="271:26" pos:end="271:28"><expr pos:start="271:26" pos:end="271:28"><name pos:start="271:26" pos:end="271:28">ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="271:32" pos:end="277:5">{<block_content pos:start="273:9" pos:end="275:18"><comment type="block" pos:start="271:33" pos:end="271:73">/* decode the exponents for this block */</comment>

        <expr_stmt pos:start="273:9" pos:end="273:64"><expr pos:start="273:9" pos:end="273:63"><call pos:start="273:9" pos:end="273:63"><name pos:start="273:9" pos:end="273:14">av_log</name><argument_list pos:start="273:15" pos:end="273:63">(<argument pos:start="273:16" pos:end="273:19"><expr pos:start="273:16" pos:end="273:19"><name pos:start="273:16" pos:end="273:19">NULL</name></expr></argument>, <argument pos:start="273:22" pos:end="273:33"><expr pos:start="273:22" pos:end="273:33"><name pos:start="273:22" pos:end="273:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="273:36" pos:end="273:62"><expr pos:start="273:36" pos:end="273:62"><literal type="string" pos:start="273:36" pos:end="273:62">"Error parsing exponents\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="275:9" pos:end="275:18">return <expr pos:start="275:16" pos:end="275:17"><operator pos:start="275:16" pos:end="275:16">-</operator><literal type="number" pos:start="275:17" pos:end="275:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="281:5" pos:end="297:5"><if pos:start="281:5" pos:end="297:5">if <condition pos:start="281:8" pos:end="281:24">(<expr pos:start="281:9" pos:end="281:23"><call pos:start="281:9" pos:end="281:23"><name pos:start="281:9" pos:end="281:16">get_bits</name><argument_list pos:start="281:17" pos:end="281:23">(<argument pos:start="281:18" pos:end="281:19"><expr pos:start="281:18" pos:end="281:19"><name pos:start="281:18" pos:end="281:19">gb</name></expr></argument>, <argument pos:start="281:22" pos:end="281:22"><expr pos:start="281:22" pos:end="281:22"><literal type="number" pos:start="281:22" pos:end="281:22">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="281:26" pos:end="297:5">{<block_content pos:start="283:9" pos:end="295:39"> <comment type="block" pos:start="281:28" pos:end="281:59">/* bit allocation information */</comment>

        <expr_stmt pos:start="283:9" pos:end="283:30"><expr pos:start="283:9" pos:end="283:29"><operator pos:start="283:9" pos:end="283:9">*</operator><name pos:start="283:10" pos:end="283:14">flags</name> <operator pos:start="283:16" pos:end="283:17">|=</operator> <name pos:start="283:19" pos:end="283:29">AC3_AB_BAIE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="285:9" pos:end="285:31"><expr pos:start="285:9" pos:end="285:30"><name pos:start="285:9" pos:end="285:23">bit_alloc_flags</name> <operator pos:start="285:25" pos:end="285:26">|=</operator> <literal type="number" pos:start="285:28" pos:end="285:30">127</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="287:9" pos:end="287:38"><expr pos:start="287:9" pos:end="287:37"><name pos:start="287:9" pos:end="287:19"><name pos:start="287:9" pos:end="287:10">ab</name><operator pos:start="287:11" pos:end="287:12">-&gt;</operator><name pos:start="287:13" pos:end="287:19">sdcycod</name></name> <operator pos:start="287:21" pos:end="287:21">=</operator> <call pos:start="287:23" pos:end="287:37"><name pos:start="287:23" pos:end="287:30">get_bits</name><argument_list pos:start="287:31" pos:end="287:37">(<argument pos:start="287:32" pos:end="287:33"><expr pos:start="287:32" pos:end="287:33"><name pos:start="287:32" pos:end="287:33">gb</name></expr></argument>, <argument pos:start="287:36" pos:end="287:36"><expr pos:start="287:36" pos:end="287:36"><literal type="number" pos:start="287:36" pos:end="287:36">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:38"><expr pos:start="289:9" pos:end="289:37"><name pos:start="289:9" pos:end="289:19"><name pos:start="289:9" pos:end="289:10">ab</name><operator pos:start="289:11" pos:end="289:12">-&gt;</operator><name pos:start="289:13" pos:end="289:19">fdcycod</name></name> <operator pos:start="289:21" pos:end="289:21">=</operator> <call pos:start="289:23" pos:end="289:37"><name pos:start="289:23" pos:end="289:30">get_bits</name><argument_list pos:start="289:31" pos:end="289:37">(<argument pos:start="289:32" pos:end="289:33"><expr pos:start="289:32" pos:end="289:33"><name pos:start="289:32" pos:end="289:33">gb</name></expr></argument>, <argument pos:start="289:36" pos:end="289:36"><expr pos:start="289:36" pos:end="289:36"><literal type="number" pos:start="289:36" pos:end="289:36">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="291:9" pos:end="291:39"><expr pos:start="291:9" pos:end="291:38"><name pos:start="291:9" pos:end="291:20"><name pos:start="291:9" pos:end="291:10">ab</name><operator pos:start="291:11" pos:end="291:12">-&gt;</operator><name pos:start="291:13" pos:end="291:20">sgaincod</name></name> <operator pos:start="291:22" pos:end="291:22">=</operator> <call pos:start="291:24" pos:end="291:38"><name pos:start="291:24" pos:end="291:31">get_bits</name><argument_list pos:start="291:32" pos:end="291:38">(<argument pos:start="291:33" pos:end="291:34"><expr pos:start="291:33" pos:end="291:34"><name pos:start="291:33" pos:end="291:34">gb</name></expr></argument>, <argument pos:start="291:37" pos:end="291:37"><expr pos:start="291:37" pos:end="291:37"><literal type="number" pos:start="291:37" pos:end="291:37">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="293:9" pos:end="293:38"><expr pos:start="293:9" pos:end="293:37"><name pos:start="293:9" pos:end="293:19"><name pos:start="293:9" pos:end="293:10">ab</name><operator pos:start="293:11" pos:end="293:12">-&gt;</operator><name pos:start="293:13" pos:end="293:19">dbpbcod</name></name> <operator pos:start="293:21" pos:end="293:21">=</operator> <call pos:start="293:23" pos:end="293:37"><name pos:start="293:23" pos:end="293:30">get_bits</name><argument_list pos:start="293:31" pos:end="293:37">(<argument pos:start="293:32" pos:end="293:33"><expr pos:start="293:32" pos:end="293:33"><name pos:start="293:32" pos:end="293:33">gb</name></expr></argument>, <argument pos:start="293:36" pos:end="293:36"><expr pos:start="293:36" pos:end="293:36"><literal type="number" pos:start="293:36" pos:end="293:36">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="295:9" pos:end="295:39"><expr pos:start="295:9" pos:end="295:38"><name pos:start="295:9" pos:end="295:20"><name pos:start="295:9" pos:end="295:10">ab</name><operator pos:start="295:11" pos:end="295:12">-&gt;</operator><name pos:start="295:13" pos:end="295:20">floorcod</name></name> <operator pos:start="295:22" pos:end="295:22">=</operator> <call pos:start="295:24" pos:end="295:38"><name pos:start="295:24" pos:end="295:31">get_bits</name><argument_list pos:start="295:32" pos:end="295:38">(<argument pos:start="295:33" pos:end="295:34"><expr pos:start="295:33" pos:end="295:34"><name pos:start="295:33" pos:end="295:34">gb</name></expr></argument>, <argument pos:start="295:37" pos:end="295:37"><expr pos:start="295:37" pos:end="295:37"><literal type="number" pos:start="295:37" pos:end="295:37">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="299:5" pos:end="331:5"><if pos:start="299:5" pos:end="331:5">if <condition pos:start="299:8" pos:end="299:24">(<expr pos:start="299:9" pos:end="299:23"><call pos:start="299:9" pos:end="299:23"><name pos:start="299:9" pos:end="299:16">get_bits</name><argument_list pos:start="299:17" pos:end="299:23">(<argument pos:start="299:18" pos:end="299:19"><expr pos:start="299:18" pos:end="299:19"><name pos:start="299:18" pos:end="299:19">gb</name></expr></argument>, <argument pos:start="299:22" pos:end="299:22"><expr pos:start="299:22" pos:end="299:22"><literal type="number" pos:start="299:22" pos:end="299:22">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="299:26" pos:end="331:5">{<block_content pos:start="301:9" pos:end="329:9"> <comment type="block" pos:start="299:28" pos:end="299:42">/* snroffset */</comment>

        <expr_stmt pos:start="301:9" pos:end="301:35"><expr pos:start="301:9" pos:end="301:34"><operator pos:start="301:9" pos:end="301:9">*</operator><name pos:start="301:10" pos:end="301:14">flags</name> <operator pos:start="301:16" pos:end="301:17">|=</operator> <name pos:start="301:19" pos:end="301:34">AC3_AB_SNROFFSTE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="303:9" pos:end="303:31"><expr pos:start="303:9" pos:end="303:30"><name pos:start="303:9" pos:end="303:23">bit_alloc_flags</name> <operator pos:start="303:25" pos:end="303:26">|=</operator> <literal type="number" pos:start="303:28" pos:end="303:30">127</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="305:9" pos:end="305:40"><expr pos:start="305:9" pos:end="305:39"><name pos:start="305:9" pos:end="305:21"><name pos:start="305:9" pos:end="305:10">ab</name><operator pos:start="305:11" pos:end="305:12">-&gt;</operator><name pos:start="305:13" pos:end="305:21">csnroffst</name></name> <operator pos:start="305:23" pos:end="305:23">=</operator> <call pos:start="305:25" pos:end="305:39"><name pos:start="305:25" pos:end="305:32">get_bits</name><argument_list pos:start="305:33" pos:end="305:39">(<argument pos:start="305:34" pos:end="305:35"><expr pos:start="305:34" pos:end="305:35"><name pos:start="305:34" pos:end="305:35">gb</name></expr></argument>, <argument pos:start="305:38" pos:end="305:38"><expr pos:start="305:38" pos:end="305:38"><literal type="number" pos:start="305:38" pos:end="305:38">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="307:9" pos:end="313:9"><if pos:start="307:9" pos:end="313:9">if <condition pos:start="307:12" pos:end="307:35">(<expr pos:start="307:13" pos:end="307:34"><operator pos:start="307:13" pos:end="307:13">*</operator><name pos:start="307:14" pos:end="307:18">flags</name> <operator pos:start="307:20" pos:end="307:20">&amp;</operator> <name pos:start="307:22" pos:end="307:34">AC3_AB_CPLINU</name></expr>)</condition> <block pos:start="307:37" pos:end="313:9">{<block_content pos:start="309:13" pos:end="311:46"> <comment type="block" pos:start="307:39" pos:end="307:86">/* couling fine snr offset and fast gain code */</comment>

            <expr_stmt pos:start="309:13" pos:end="309:47"><expr pos:start="309:13" pos:end="309:46"><name pos:start="309:13" pos:end="309:28"><name pos:start="309:13" pos:end="309:14">ab</name><operator pos:start="309:15" pos:end="309:16">-&gt;</operator><name pos:start="309:17" pos:end="309:28">cplfsnroffst</name></name> <operator pos:start="309:30" pos:end="309:30">=</operator> <call pos:start="309:32" pos:end="309:46"><name pos:start="309:32" pos:end="309:39">get_bits</name><argument_list pos:start="309:40" pos:end="309:46">(<argument pos:start="309:41" pos:end="309:42"><expr pos:start="309:41" pos:end="309:42"><name pos:start="309:41" pos:end="309:42">gb</name></expr></argument>, <argument pos:start="309:45" pos:end="309:45"><expr pos:start="309:45" pos:end="309:45"><literal type="number" pos:start="309:45" pos:end="309:45">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="311:13" pos:end="311:46"><expr pos:start="311:13" pos:end="311:45"><name pos:start="311:13" pos:end="311:27"><name pos:start="311:13" pos:end="311:14">ab</name><operator pos:start="311:15" pos:end="311:16">-&gt;</operator><name pos:start="311:17" pos:end="311:27">cplfgaincod</name></name> <operator pos:start="311:29" pos:end="311:29">=</operator> <call pos:start="311:31" pos:end="311:45"><name pos:start="311:31" pos:end="311:38">get_bits</name><argument_list pos:start="311:39" pos:end="311:45">(<argument pos:start="311:40" pos:end="311:41"><expr pos:start="311:40" pos:end="311:41"><name pos:start="311:40" pos:end="311:41">gb</name></expr></argument>, <argument pos:start="311:44" pos:end="311:44"><expr pos:start="311:44" pos:end="311:44"><literal type="number" pos:start="311:44" pos:end="311:44">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <for pos:start="315:9" pos:end="321:9">for <control pos:start="315:13" pos:end="315:37">(<init pos:start="315:14" pos:end="315:19"><expr pos:start="315:14" pos:end="315:18"><name pos:start="315:14" pos:end="315:14">i</name> <operator pos:start="315:16" pos:end="315:16">=</operator> <literal type="number" pos:start="315:18" pos:end="315:18">0</literal></expr>;</init> <condition pos:start="315:21" pos:end="315:32"><expr pos:start="315:21" pos:end="315:31"><name pos:start="315:21" pos:end="315:21">i</name> <operator pos:start="315:23" pos:end="315:23">&lt;</operator> <name pos:start="315:25" pos:end="315:31">nfchans</name></expr>;</condition> <incr pos:start="315:34" pos:end="315:36"><expr pos:start="315:34" pos:end="315:36"><name pos:start="315:34" pos:end="315:34">i</name><operator pos:start="315:35" pos:end="315:36">++</operator></expr></incr>)</control> <block pos:start="315:39" pos:end="321:9">{<block_content pos:start="317:13" pos:end="319:46"> <comment type="block" pos:start="315:41" pos:end="315:88">/* channel fine snr offset and fast gain code */</comment>

            <expr_stmt pos:start="317:13" pos:end="317:47"><expr pos:start="317:13" pos:end="317:46"><name pos:start="317:13" pos:end="317:28"><name pos:start="317:13" pos:end="317:14">ab</name><operator pos:start="317:15" pos:end="317:16">-&gt;</operator><name pos:start="317:17" pos:end="317:25">fsnroffst</name><index pos:start="317:26" pos:end="317:28">[<expr pos:start="317:27" pos:end="317:27"><name pos:start="317:27" pos:end="317:27">i</name></expr>]</index></name> <operator pos:start="317:30" pos:end="317:30">=</operator> <call pos:start="317:32" pos:end="317:46"><name pos:start="317:32" pos:end="317:39">get_bits</name><argument_list pos:start="317:40" pos:end="317:46">(<argument pos:start="317:41" pos:end="317:42"><expr pos:start="317:41" pos:end="317:42"><name pos:start="317:41" pos:end="317:42">gb</name></expr></argument>, <argument pos:start="317:45" pos:end="317:45"><expr pos:start="317:45" pos:end="317:45"><literal type="number" pos:start="317:45" pos:end="317:45">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="319:13" pos:end="319:46"><expr pos:start="319:13" pos:end="319:45"><name pos:start="319:13" pos:end="319:27"><name pos:start="319:13" pos:end="319:14">ab</name><operator pos:start="319:15" pos:end="319:16">-&gt;</operator><name pos:start="319:17" pos:end="319:24">fgaincod</name><index pos:start="319:25" pos:end="319:27">[<expr pos:start="319:26" pos:end="319:26"><name pos:start="319:26" pos:end="319:26">i</name></expr>]</index></name> <operator pos:start="319:29" pos:end="319:29">=</operator> <call pos:start="319:31" pos:end="319:45"><name pos:start="319:31" pos:end="319:38">get_bits</name><argument_list pos:start="319:39" pos:end="319:45">(<argument pos:start="319:40" pos:end="319:41"><expr pos:start="319:40" pos:end="319:41"><name pos:start="319:40" pos:end="319:41">gb</name></expr></argument>, <argument pos:start="319:44" pos:end="319:44"><expr pos:start="319:44" pos:end="319:44"><literal type="number" pos:start="319:44" pos:end="319:44">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="323:9" pos:end="329:9"><if pos:start="323:9" pos:end="329:9">if <condition pos:start="323:12" pos:end="323:43">(<expr pos:start="323:13" pos:end="323:42"><name pos:start="323:13" pos:end="323:26"><name pos:start="323:13" pos:end="323:15">ctx</name><operator pos:start="323:16" pos:end="323:17">-&gt;</operator><name pos:start="323:18" pos:end="323:20">bsi</name><operator pos:start="323:21" pos:end="323:21">.</operator><name pos:start="323:22" pos:end="323:26">flags</name></name> <operator pos:start="323:28" pos:end="323:28">&amp;</operator> <name pos:start="323:30" pos:end="323:42">AC3_BSI_LFEON</name></expr>)</condition> <block pos:start="323:45" pos:end="329:9">{<block_content pos:start="325:13" pos:end="327:46"> <comment type="block" pos:start="323:47" pos:end="323:90">/* lfe fine snr offset and fast gain code */</comment>

            <expr_stmt pos:start="325:13" pos:end="325:47"><expr pos:start="325:13" pos:end="325:46"><name pos:start="325:13" pos:end="325:28"><name pos:start="325:13" pos:end="325:14">ab</name><operator pos:start="325:15" pos:end="325:16">-&gt;</operator><name pos:start="325:17" pos:end="325:28">lfefsnroffst</name></name> <operator pos:start="325:30" pos:end="325:30">=</operator> <call pos:start="325:32" pos:end="325:46"><name pos:start="325:32" pos:end="325:39">get_bits</name><argument_list pos:start="325:40" pos:end="325:46">(<argument pos:start="325:41" pos:end="325:42"><expr pos:start="325:41" pos:end="325:42"><name pos:start="325:41" pos:end="325:42">gb</name></expr></argument>, <argument pos:start="325:45" pos:end="325:45"><expr pos:start="325:45" pos:end="325:45"><literal type="number" pos:start="325:45" pos:end="325:45">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="327:13" pos:end="327:46"><expr pos:start="327:13" pos:end="327:45"><name pos:start="327:13" pos:end="327:27"><name pos:start="327:13" pos:end="327:14">ab</name><operator pos:start="327:15" pos:end="327:16">-&gt;</operator><name pos:start="327:17" pos:end="327:27">lfefgaincod</name></name> <operator pos:start="327:29" pos:end="327:29">=</operator> <call pos:start="327:31" pos:end="327:45"><name pos:start="327:31" pos:end="327:38">get_bits</name><argument_list pos:start="327:39" pos:end="327:45">(<argument pos:start="327:40" pos:end="327:41"><expr pos:start="327:40" pos:end="327:41"><name pos:start="327:40" pos:end="327:41">gb</name></expr></argument>, <argument pos:start="327:44" pos:end="327:44"><expr pos:start="327:44" pos:end="327:44"><literal type="number" pos:start="327:44" pos:end="327:44">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="333:5" pos:end="345:9"><if pos:start="333:5" pos:end="345:9">if <condition pos:start="333:8" pos:end="333:31">(<expr pos:start="333:9" pos:end="333:30"><operator pos:start="333:9" pos:end="333:9">*</operator><name pos:start="333:10" pos:end="333:14">flags</name> <operator pos:start="333:16" pos:end="333:16">&amp;</operator> <name pos:start="333:18" pos:end="333:30">AC3_AB_CPLINU</name></expr>)</condition><block type="pseudo" pos:start="335:9" pos:end="345:9"><block_content pos:start="335:9" pos:end="345:9">

        <if_stmt pos:start="335:9" pos:end="345:9"><if pos:start="335:9" pos:end="345:9">if <condition pos:start="335:12" pos:end="335:28">(<expr pos:start="335:13" pos:end="335:27"><call pos:start="335:13" pos:end="335:27"><name pos:start="335:13" pos:end="335:20">get_bits</name><argument_list pos:start="335:21" pos:end="335:27">(<argument pos:start="335:22" pos:end="335:23"><expr pos:start="335:22" pos:end="335:23"><name pos:start="335:22" pos:end="335:23">gb</name></expr></argument>, <argument pos:start="335:26" pos:end="335:26"><expr pos:start="335:26" pos:end="335:26"><literal type="number" pos:start="335:26" pos:end="335:26">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="335:30" pos:end="345:9">{<block_content pos:start="337:13" pos:end="343:43"> <comment type="block" pos:start="335:32" pos:end="335:62">/* coupling leak information */</comment>

            <expr_stmt pos:start="337:13" pos:end="337:34"><expr pos:start="337:13" pos:end="337:33"><name pos:start="337:13" pos:end="337:27">bit_alloc_flags</name> <operator pos:start="337:29" pos:end="337:30">|=</operator> <literal type="number" pos:start="337:32" pos:end="337:33">64</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="339:13" pos:end="339:38"><expr pos:start="339:13" pos:end="339:37"><operator pos:start="339:13" pos:end="339:13">*</operator><name pos:start="339:14" pos:end="339:18">flags</name> <operator pos:start="339:20" pos:end="339:21">|=</operator> <name pos:start="339:23" pos:end="339:37">AC3_AB_CPLLEAKE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="341:13" pos:end="341:43"><expr pos:start="341:13" pos:end="341:42"><name pos:start="341:13" pos:end="341:24"><name pos:start="341:13" pos:end="341:14">ab</name><operator pos:start="341:15" pos:end="341:16">-&gt;</operator><name pos:start="341:17" pos:end="341:24">cplfleak</name></name> <operator pos:start="341:26" pos:end="341:26">=</operator> <call pos:start="341:28" pos:end="341:42"><name pos:start="341:28" pos:end="341:35">get_bits</name><argument_list pos:start="341:36" pos:end="341:42">(<argument pos:start="341:37" pos:end="341:38"><expr pos:start="341:37" pos:end="341:38"><name pos:start="341:37" pos:end="341:38">gb</name></expr></argument>, <argument pos:start="341:41" pos:end="341:41"><expr pos:start="341:41" pos:end="341:41"><literal type="number" pos:start="341:41" pos:end="341:41">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="343:13" pos:end="343:43"><expr pos:start="343:13" pos:end="343:42"><name pos:start="343:13" pos:end="343:24"><name pos:start="343:13" pos:end="343:14">ab</name><operator pos:start="343:15" pos:end="343:16">-&gt;</operator><name pos:start="343:17" pos:end="343:24">cplsleak</name></name> <operator pos:start="343:26" pos:end="343:26">=</operator> <call pos:start="343:28" pos:end="343:42"><name pos:start="343:28" pos:end="343:35">get_bits</name><argument_list pos:start="343:36" pos:end="343:42">(<argument pos:start="343:37" pos:end="343:38"><expr pos:start="343:37" pos:end="343:38"><name pos:start="343:37" pos:end="343:38">gb</name></expr></argument>, <argument pos:start="343:41" pos:end="343:41"><expr pos:start="343:41" pos:end="343:41"><literal type="number" pos:start="343:41" pos:end="343:41">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="347:5" pos:end="417:5"><if pos:start="347:5" pos:end="417:5">if <condition pos:start="347:8" pos:end="347:24">(<expr pos:start="347:9" pos:end="347:23"><call pos:start="347:9" pos:end="347:23"><name pos:start="347:9" pos:end="347:16">get_bits</name><argument_list pos:start="347:17" pos:end="347:23">(<argument pos:start="347:18" pos:end="347:19"><expr pos:start="347:18" pos:end="347:19"><name pos:start="347:18" pos:end="347:19">gb</name></expr></argument>, <argument pos:start="347:22" pos:end="347:22"><expr pos:start="347:22" pos:end="347:22"><literal type="number" pos:start="347:22" pos:end="347:22">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="347:26" pos:end="417:5">{<block_content pos:start="349:9" pos:end="415:13"> <comment type="block" pos:start="347:28" pos:end="347:65">/* delta bit allocation information */</comment>

        <expr_stmt pos:start="349:9" pos:end="349:34"><expr pos:start="349:9" pos:end="349:33"><operator pos:start="349:9" pos:end="349:9">*</operator><name pos:start="349:10" pos:end="349:14">flags</name> <operator pos:start="349:16" pos:end="349:17">|=</operator> <name pos:start="349:19" pos:end="349:33">AC3_AB_DELTBAIE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="351:9" pos:end="351:31"><expr pos:start="351:9" pos:end="351:30"><name pos:start="351:9" pos:end="351:23">bit_alloc_flags</name> <operator pos:start="351:25" pos:end="351:26">|=</operator> <literal type="number" pos:start="351:28" pos:end="351:30">127</literal></expr>;</expr_stmt>

        <if_stmt pos:start="353:9" pos:end="365:9"><if pos:start="353:9" pos:end="365:9">if <condition pos:start="353:12" pos:end="353:35">(<expr pos:start="353:13" pos:end="353:34"><operator pos:start="353:13" pos:end="353:13">*</operator><name pos:start="353:14" pos:end="353:18">flags</name> <operator pos:start="353:20" pos:end="353:20">&amp;</operator> <name pos:start="353:22" pos:end="353:34">AC3_AB_CPLINU</name></expr>)</condition> <block pos:start="353:37" pos:end="365:9">{<block_content pos:start="355:13" pos:end="363:13">

            <expr_stmt pos:start="355:13" pos:end="355:45"><expr pos:start="355:13" pos:end="355:44"><name pos:start="355:13" pos:end="355:26"><name pos:start="355:13" pos:end="355:14">ab</name><operator pos:start="355:15" pos:end="355:16">-&gt;</operator><name pos:start="355:17" pos:end="355:26">cpldeltbae</name></name> <operator pos:start="355:28" pos:end="355:28">=</operator> <call pos:start="355:30" pos:end="355:44"><name pos:start="355:30" pos:end="355:37">get_bits</name><argument_list pos:start="355:38" pos:end="355:44">(<argument pos:start="355:39" pos:end="355:40"><expr pos:start="355:39" pos:end="355:40"><name pos:start="355:39" pos:end="355:40">gb</name></expr></argument>, <argument pos:start="355:43" pos:end="355:43"><expr pos:start="355:43" pos:end="355:43"><literal type="number" pos:start="355:43" pos:end="355:43">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="357:13" pos:end="363:13"><if pos:start="357:13" pos:end="363:13">if <condition pos:start="357:16" pos:end="357:54">(<expr pos:start="357:17" pos:end="357:53"><name pos:start="357:17" pos:end="357:30"><name pos:start="357:17" pos:end="357:18">ab</name><operator pos:start="357:19" pos:end="357:20">-&gt;</operator><name pos:start="357:21" pos:end="357:30">cpldeltbae</name></name> <operator pos:start="357:32" pos:end="357:33">==</operator> <name pos:start="357:35" pos:end="357:53">AC3_DBASTR_RESERVED</name></expr>)</condition> <block pos:start="357:56" pos:end="363:13">{<block_content pos:start="359:17" pos:end="361:26">

                <expr_stmt pos:start="359:17" pos:end="359:96"><expr pos:start="359:17" pos:end="359:95"><call pos:start="359:17" pos:end="359:95"><name pos:start="359:17" pos:end="359:22">av_log</name><argument_list pos:start="359:23" pos:end="359:95">(<argument pos:start="359:24" pos:end="359:27"><expr pos:start="359:24" pos:end="359:27"><name pos:start="359:24" pos:end="359:27">NULL</name></expr></argument>, <argument pos:start="359:30" pos:end="359:41"><expr pos:start="359:30" pos:end="359:41"><name pos:start="359:30" pos:end="359:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="359:44" pos:end="359:94"><expr pos:start="359:44" pos:end="359:94"><literal type="string" pos:start="359:44" pos:end="359:94">"coupling delta bit allocation strategy reserved\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="361:17" pos:end="361:26">return <expr pos:start="361:24" pos:end="361:25"><operator pos:start="361:24" pos:end="361:24">-</operator><literal type="number" pos:start="361:25" pos:end="361:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <for pos:start="367:9" pos:end="379:9">for <control pos:start="367:13" pos:end="367:37">(<init pos:start="367:14" pos:end="367:19"><expr pos:start="367:14" pos:end="367:18"><name pos:start="367:14" pos:end="367:14">i</name> <operator pos:start="367:16" pos:end="367:16">=</operator> <literal type="number" pos:start="367:18" pos:end="367:18">0</literal></expr>;</init> <condition pos:start="367:21" pos:end="367:32"><expr pos:start="367:21" pos:end="367:31"><name pos:start="367:21" pos:end="367:21">i</name> <operator pos:start="367:23" pos:end="367:23">&lt;</operator> <name pos:start="367:25" pos:end="367:31">nfchans</name></expr>;</condition> <incr pos:start="367:34" pos:end="367:36"><expr pos:start="367:34" pos:end="367:36"><name pos:start="367:34" pos:end="367:34">i</name><operator pos:start="367:35" pos:end="367:36">++</operator></expr></incr>)</control> <block pos:start="367:39" pos:end="379:9">{<block_content pos:start="369:13" pos:end="377:13">

            <expr_stmt pos:start="369:13" pos:end="369:45"><expr pos:start="369:13" pos:end="369:44"><name pos:start="369:13" pos:end="369:26"><name pos:start="369:13" pos:end="369:14">ab</name><operator pos:start="369:15" pos:end="369:16">-&gt;</operator><name pos:start="369:17" pos:end="369:23">deltbae</name><index pos:start="369:24" pos:end="369:26">[<expr pos:start="369:25" pos:end="369:25"><name pos:start="369:25" pos:end="369:25">i</name></expr>]</index></name> <operator pos:start="369:28" pos:end="369:28">=</operator> <call pos:start="369:30" pos:end="369:44"><name pos:start="369:30" pos:end="369:37">get_bits</name><argument_list pos:start="369:38" pos:end="369:44">(<argument pos:start="369:39" pos:end="369:40"><expr pos:start="369:39" pos:end="369:40"><name pos:start="369:39" pos:end="369:40">gb</name></expr></argument>, <argument pos:start="369:43" pos:end="369:43"><expr pos:start="369:43" pos:end="369:43"><literal type="number" pos:start="369:43" pos:end="369:43">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="371:13" pos:end="377:13"><if pos:start="371:13" pos:end="377:13">if <condition pos:start="371:16" pos:end="371:54">(<expr pos:start="371:17" pos:end="371:53"><name pos:start="371:17" pos:end="371:30"><name pos:start="371:17" pos:end="371:18">ab</name><operator pos:start="371:19" pos:end="371:20">-&gt;</operator><name pos:start="371:21" pos:end="371:27">deltbae</name><index pos:start="371:28" pos:end="371:30">[<expr pos:start="371:29" pos:end="371:29"><name pos:start="371:29" pos:end="371:29">i</name></expr>]</index></name> <operator pos:start="371:32" pos:end="371:33">==</operator> <name pos:start="371:35" pos:end="371:53">AC3_DBASTR_RESERVED</name></expr>)</condition> <block pos:start="371:56" pos:end="377:13">{<block_content pos:start="373:17" pos:end="375:26">

                <expr_stmt pos:start="373:17" pos:end="373:87"><expr pos:start="373:17" pos:end="373:86"><call pos:start="373:17" pos:end="373:86"><name pos:start="373:17" pos:end="373:22">av_log</name><argument_list pos:start="373:23" pos:end="373:86">(<argument pos:start="373:24" pos:end="373:27"><expr pos:start="373:24" pos:end="373:27"><name pos:start="373:24" pos:end="373:27">NULL</name></expr></argument>, <argument pos:start="373:30" pos:end="373:41"><expr pos:start="373:30" pos:end="373:41"><name pos:start="373:30" pos:end="373:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="373:44" pos:end="373:85"><expr pos:start="373:44" pos:end="373:85"><literal type="string" pos:start="373:44" pos:end="373:85">"delta bit allocation strategy reserved\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="375:17" pos:end="375:26">return <expr pos:start="375:24" pos:end="375:25"><operator pos:start="375:24" pos:end="375:24">-</operator><literal type="number" pos:start="375:25" pos:end="375:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="381:9" pos:end="397:13"><if pos:start="381:9" pos:end="397:13">if <condition pos:start="381:12" pos:end="381:35">(<expr pos:start="381:13" pos:end="381:34"><operator pos:start="381:13" pos:end="381:13">*</operator><name pos:start="381:14" pos:end="381:18">flags</name> <operator pos:start="381:20" pos:end="381:20">&amp;</operator> <name pos:start="381:22" pos:end="381:34">AC3_AB_CPLINU</name></expr>)</condition><block type="pseudo" pos:start="383:13" pos:end="397:13"><block_content pos:start="383:13" pos:end="397:13">

            <if_stmt pos:start="383:13" pos:end="397:13"><if pos:start="383:13" pos:end="397:13">if <condition pos:start="383:16" pos:end="383:49">(<expr pos:start="383:17" pos:end="383:48"><name pos:start="383:17" pos:end="383:30"><name pos:start="383:17" pos:end="383:18">ab</name><operator pos:start="383:19" pos:end="383:20">-&gt;</operator><name pos:start="383:21" pos:end="383:30">cpldeltbae</name></name> <operator pos:start="383:32" pos:end="383:33">==</operator> <name pos:start="383:35" pos:end="383:48">AC3_DBASTR_NEW</name></expr>)</condition> <block pos:start="383:51" pos:end="397:13">{<block_content pos:start="385:17" pos:end="395:17"> <comment type="block" pos:start="383:53" pos:end="383:102">/*coupling delta offset, len and bit allocation */</comment>

                <expr_stmt pos:start="385:17" pos:end="385:50"><expr pos:start="385:17" pos:end="385:49"><name pos:start="385:17" pos:end="385:31"><name pos:start="385:17" pos:end="385:18">ab</name><operator pos:start="385:19" pos:end="385:20">-&gt;</operator><name pos:start="385:21" pos:end="385:31">cpldeltnseg</name></name> <operator pos:start="385:33" pos:end="385:33">=</operator> <call pos:start="385:35" pos:end="385:49"><name pos:start="385:35" pos:end="385:42">get_bits</name><argument_list pos:start="385:43" pos:end="385:49">(<argument pos:start="385:44" pos:end="385:45"><expr pos:start="385:44" pos:end="385:45"><name pos:start="385:44" pos:end="385:45">gb</name></expr></argument>, <argument pos:start="385:48" pos:end="385:48"><expr pos:start="385:48" pos:end="385:48"><literal type="number" pos:start="385:48" pos:end="385:48">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="387:17" pos:end="395:17">for <control pos:start="387:21" pos:end="387:60">(<init pos:start="387:22" pos:end="387:29"><expr pos:start="387:22" pos:end="387:28"><name pos:start="387:22" pos:end="387:24">seg</name> <operator pos:start="387:26" pos:end="387:26">=</operator> <literal type="number" pos:start="387:28" pos:end="387:28">0</literal></expr>;</init> <condition pos:start="387:31" pos:end="387:53"><expr pos:start="387:31" pos:end="387:52"><name pos:start="387:31" pos:end="387:33">seg</name> <operator pos:start="387:35" pos:end="387:36">&lt;=</operator> <name pos:start="387:38" pos:end="387:52"><name pos:start="387:38" pos:end="387:39">ab</name><operator pos:start="387:40" pos:end="387:41">-&gt;</operator><name pos:start="387:42" pos:end="387:52">cpldeltnseg</name></name></expr>;</condition> <incr pos:start="387:55" pos:end="387:59"><expr pos:start="387:55" pos:end="387:59"><name pos:start="387:55" pos:end="387:57">seg</name><operator pos:start="387:58" pos:end="387:59">++</operator></expr></incr>)</control> <block pos:start="387:62" pos:end="395:17">{<block_content pos:start="389:21" pos:end="393:57">

                    <expr_stmt pos:start="389:21" pos:end="389:60"><expr pos:start="389:21" pos:end="389:59"><name pos:start="389:21" pos:end="389:41"><name pos:start="389:21" pos:end="389:22">ab</name><operator pos:start="389:23" pos:end="389:24">-&gt;</operator><name pos:start="389:25" pos:end="389:36">cpldeltoffst</name><index pos:start="389:37" pos:end="389:41">[<expr pos:start="389:38" pos:end="389:40"><name pos:start="389:38" pos:end="389:40">seg</name></expr>]</index></name> <operator pos:start="389:43" pos:end="389:43">=</operator> <call pos:start="389:45" pos:end="389:59"><name pos:start="389:45" pos:end="389:52">get_bits</name><argument_list pos:start="389:53" pos:end="389:59">(<argument pos:start="389:54" pos:end="389:55"><expr pos:start="389:54" pos:end="389:55"><name pos:start="389:54" pos:end="389:55">gb</name></expr></argument>, <argument pos:start="389:58" pos:end="389:58"><expr pos:start="389:58" pos:end="389:58"><literal type="number" pos:start="389:58" pos:end="389:58">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="391:21" pos:end="391:58"><expr pos:start="391:21" pos:end="391:57"><name pos:start="391:21" pos:end="391:39"><name pos:start="391:21" pos:end="391:22">ab</name><operator pos:start="391:23" pos:end="391:24">-&gt;</operator><name pos:start="391:25" pos:end="391:34">cpldeltlen</name><index pos:start="391:35" pos:end="391:39">[<expr pos:start="391:36" pos:end="391:38"><name pos:start="391:36" pos:end="391:38">seg</name></expr>]</index></name> <operator pos:start="391:41" pos:end="391:41">=</operator> <call pos:start="391:43" pos:end="391:57"><name pos:start="391:43" pos:end="391:50">get_bits</name><argument_list pos:start="391:51" pos:end="391:57">(<argument pos:start="391:52" pos:end="391:53"><expr pos:start="391:52" pos:end="391:53"><name pos:start="391:52" pos:end="391:53">gb</name></expr></argument>, <argument pos:start="391:56" pos:end="391:56"><expr pos:start="391:56" pos:end="391:56"><literal type="number" pos:start="391:56" pos:end="391:56">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="393:21" pos:end="393:57"><expr pos:start="393:21" pos:end="393:56"><name pos:start="393:21" pos:end="393:38"><name pos:start="393:21" pos:end="393:22">ab</name><operator pos:start="393:23" pos:end="393:24">-&gt;</operator><name pos:start="393:25" pos:end="393:33">cpldeltba</name><index pos:start="393:34" pos:end="393:38">[<expr pos:start="393:35" pos:end="393:37"><name pos:start="393:35" pos:end="393:37">seg</name></expr>]</index></name> <operator pos:start="393:40" pos:end="393:40">=</operator> <call pos:start="393:42" pos:end="393:56"><name pos:start="393:42" pos:end="393:49">get_bits</name><argument_list pos:start="393:50" pos:end="393:56">(<argument pos:start="393:51" pos:end="393:52"><expr pos:start="393:51" pos:end="393:52"><name pos:start="393:51" pos:end="393:52">gb</name></expr></argument>, <argument pos:start="393:55" pos:end="393:55"><expr pos:start="393:55" pos:end="393:55"><literal type="number" pos:start="393:55" pos:end="393:55">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

        <for pos:start="399:9" pos:end="415:13">for <control pos:start="399:13" pos:end="399:37">(<init pos:start="399:14" pos:end="399:19"><expr pos:start="399:14" pos:end="399:18"><name pos:start="399:14" pos:end="399:14">i</name> <operator pos:start="399:16" pos:end="399:16">=</operator> <literal type="number" pos:start="399:18" pos:end="399:18">0</literal></expr>;</init> <condition pos:start="399:21" pos:end="399:32"><expr pos:start="399:21" pos:end="399:31"><name pos:start="399:21" pos:end="399:21">i</name> <operator pos:start="399:23" pos:end="399:23">&lt;</operator> <name pos:start="399:25" pos:end="399:31">nfchans</name></expr>;</condition> <incr pos:start="399:34" pos:end="399:36"><expr pos:start="399:34" pos:end="399:36"><name pos:start="399:34" pos:end="399:34">i</name><operator pos:start="399:35" pos:end="399:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="401:13" pos:end="415:13"><block_content pos:start="401:13" pos:end="415:13">

            <if_stmt pos:start="401:13" pos:end="415:13"><if pos:start="401:13" pos:end="415:13">if <condition pos:start="401:16" pos:end="401:49">(<expr pos:start="401:17" pos:end="401:48"><name pos:start="401:17" pos:end="401:30"><name pos:start="401:17" pos:end="401:18">ab</name><operator pos:start="401:19" pos:end="401:20">-&gt;</operator><name pos:start="401:21" pos:end="401:27">deltbae</name><index pos:start="401:28" pos:end="401:30">[<expr pos:start="401:29" pos:end="401:29"><name pos:start="401:29" pos:end="401:29">i</name></expr>]</index></name> <operator pos:start="401:32" pos:end="401:33">==</operator> <name pos:start="401:35" pos:end="401:48">AC3_DBASTR_NEW</name></expr>)</condition> <block pos:start="401:51" pos:end="415:13">{<block_content pos:start="403:17" pos:end="413:17"><comment type="block" pos:start="401:52" pos:end="401:100">/*channel delta offset, len and bit allocation */</comment>

                <expr_stmt pos:start="403:17" pos:end="403:50"><expr pos:start="403:17" pos:end="403:49"><name pos:start="403:17" pos:end="403:31"><name pos:start="403:17" pos:end="403:18">ab</name><operator pos:start="403:19" pos:end="403:20">-&gt;</operator><name pos:start="403:21" pos:end="403:28">deltnseg</name><index pos:start="403:29" pos:end="403:31">[<expr pos:start="403:30" pos:end="403:30"><name pos:start="403:30" pos:end="403:30">i</name></expr>]</index></name> <operator pos:start="403:33" pos:end="403:33">=</operator> <call pos:start="403:35" pos:end="403:49"><name pos:start="403:35" pos:end="403:42">get_bits</name><argument_list pos:start="403:43" pos:end="403:49">(<argument pos:start="403:44" pos:end="403:45"><expr pos:start="403:44" pos:end="403:45"><name pos:start="403:44" pos:end="403:45">gb</name></expr></argument>, <argument pos:start="403:48" pos:end="403:48"><expr pos:start="403:48" pos:end="403:48"><literal type="number" pos:start="403:48" pos:end="403:48">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="405:17" pos:end="413:17">for <control pos:start="405:21" pos:end="405:60">(<init pos:start="405:22" pos:end="405:29"><expr pos:start="405:22" pos:end="405:28"><name pos:start="405:22" pos:end="405:24">seg</name> <operator pos:start="405:26" pos:end="405:26">=</operator> <literal type="number" pos:start="405:28" pos:end="405:28">0</literal></expr>;</init> <condition pos:start="405:31" pos:end="405:53"><expr pos:start="405:31" pos:end="405:52"><name pos:start="405:31" pos:end="405:33">seg</name> <operator pos:start="405:35" pos:end="405:36">&lt;=</operator> <name pos:start="405:38" pos:end="405:52"><name pos:start="405:38" pos:end="405:39">ab</name><operator pos:start="405:40" pos:end="405:41">-&gt;</operator><name pos:start="405:42" pos:end="405:49">deltnseg</name><index pos:start="405:50" pos:end="405:52">[<expr pos:start="405:51" pos:end="405:51"><name pos:start="405:51" pos:end="405:51">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="405:55" pos:end="405:59"><expr pos:start="405:55" pos:end="405:59"><name pos:start="405:55" pos:end="405:57">seg</name><operator pos:start="405:58" pos:end="405:59">++</operator></expr></incr>)</control> <block pos:start="405:62" pos:end="413:17">{<block_content pos:start="407:21" pos:end="411:57">

                    <expr_stmt pos:start="407:21" pos:end="407:60"><expr pos:start="407:21" pos:end="407:59"><name pos:start="407:21" pos:end="407:41"><name pos:start="407:21" pos:end="407:22">ab</name><operator pos:start="407:23" pos:end="407:24">-&gt;</operator><name pos:start="407:25" pos:end="407:33">deltoffst</name><index pos:start="407:34" pos:end="407:36">[<expr pos:start="407:35" pos:end="407:35"><name pos:start="407:35" pos:end="407:35">i</name></expr>]</index><index pos:start="407:37" pos:end="407:41">[<expr pos:start="407:38" pos:end="407:40"><name pos:start="407:38" pos:end="407:40">seg</name></expr>]</index></name> <operator pos:start="407:43" pos:end="407:43">=</operator> <call pos:start="407:45" pos:end="407:59"><name pos:start="407:45" pos:end="407:52">get_bits</name><argument_list pos:start="407:53" pos:end="407:59">(<argument pos:start="407:54" pos:end="407:55"><expr pos:start="407:54" pos:end="407:55"><name pos:start="407:54" pos:end="407:55">gb</name></expr></argument>, <argument pos:start="407:58" pos:end="407:58"><expr pos:start="407:58" pos:end="407:58"><literal type="number" pos:start="407:58" pos:end="407:58">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="409:21" pos:end="409:58"><expr pos:start="409:21" pos:end="409:57"><name pos:start="409:21" pos:end="409:39"><name pos:start="409:21" pos:end="409:22">ab</name><operator pos:start="409:23" pos:end="409:24">-&gt;</operator><name pos:start="409:25" pos:end="409:31">deltlen</name><index pos:start="409:32" pos:end="409:34">[<expr pos:start="409:33" pos:end="409:33"><name pos:start="409:33" pos:end="409:33">i</name></expr>]</index><index pos:start="409:35" pos:end="409:39">[<expr pos:start="409:36" pos:end="409:38"><name pos:start="409:36" pos:end="409:38">seg</name></expr>]</index></name> <operator pos:start="409:41" pos:end="409:41">=</operator> <call pos:start="409:43" pos:end="409:57"><name pos:start="409:43" pos:end="409:50">get_bits</name><argument_list pos:start="409:51" pos:end="409:57">(<argument pos:start="409:52" pos:end="409:53"><expr pos:start="409:52" pos:end="409:53"><name pos:start="409:52" pos:end="409:53">gb</name></expr></argument>, <argument pos:start="409:56" pos:end="409:56"><expr pos:start="409:56" pos:end="409:56"><literal type="number" pos:start="409:56" pos:end="409:56">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="411:21" pos:end="411:57"><expr pos:start="411:21" pos:end="411:56"><name pos:start="411:21" pos:end="411:38"><name pos:start="411:21" pos:end="411:22">ab</name><operator pos:start="411:23" pos:end="411:24">-&gt;</operator><name pos:start="411:25" pos:end="411:30">deltba</name><index pos:start="411:31" pos:end="411:33">[<expr pos:start="411:32" pos:end="411:32"><name pos:start="411:32" pos:end="411:32">i</name></expr>]</index><index pos:start="411:34" pos:end="411:38">[<expr pos:start="411:35" pos:end="411:37"><name pos:start="411:35" pos:end="411:37">seg</name></expr>]</index></name> <operator pos:start="411:40" pos:end="411:40">=</operator> <call pos:start="411:42" pos:end="411:56"><name pos:start="411:42" pos:end="411:49">get_bits</name><argument_list pos:start="411:50" pos:end="411:56">(<argument pos:start="411:51" pos:end="411:52"><expr pos:start="411:51" pos:end="411:52"><name pos:start="411:51" pos:end="411:52">gb</name></expr></argument>, <argument pos:start="411:55" pos:end="411:55"><expr pos:start="411:55" pos:end="411:55"><literal type="number" pos:start="411:55" pos:end="411:55">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt></block_content></block></for>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="419:5" pos:end="425:5"><if pos:start="419:5" pos:end="425:5">if <condition pos:start="419:8" pos:end="419:49">(<expr pos:start="419:9" pos:end="419:48"><call pos:start="419:9" pos:end="419:48"><name pos:start="419:9" pos:end="419:25">do_bit_allocation</name> <argument_list pos:start="419:27" pos:end="419:48">(<argument pos:start="419:28" pos:end="419:30"><expr pos:start="419:28" pos:end="419:30"><name pos:start="419:28" pos:end="419:30">ctx</name></expr></argument>, <argument pos:start="419:33" pos:end="419:47"><expr pos:start="419:33" pos:end="419:47"><name pos:start="419:33" pos:end="419:47">bit_alloc_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <comment type="block" pos:start="419:51" pos:end="419:82">/* perform the bit allocation */</comment> <block pos:start="419:84" pos:end="425:5">{<block_content pos:start="421:9" pos:end="423:18">

        <expr_stmt pos:start="421:9" pos:end="421:72"><expr pos:start="421:9" pos:end="421:71"><call pos:start="421:9" pos:end="421:71"><name pos:start="421:9" pos:end="421:14">av_log</name><argument_list pos:start="421:15" pos:end="421:71">(<argument pos:start="421:16" pos:end="421:19"><expr pos:start="421:16" pos:end="421:19"><name pos:start="421:16" pos:end="421:19">NULL</name></expr></argument>, <argument pos:start="421:22" pos:end="421:33"><expr pos:start="421:22" pos:end="421:33"><name pos:start="421:22" pos:end="421:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="421:36" pos:end="421:70"><expr pos:start="421:36" pos:end="421:70"><literal type="string" pos:start="421:36" pos:end="421:70">"Error in bit allocation routine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="423:9" pos:end="423:18">return <expr pos:start="423:16" pos:end="423:17"><operator pos:start="423:16" pos:end="423:16">-</operator><literal type="number" pos:start="423:17" pos:end="423:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="427:5" pos:end="441:5"><if pos:start="427:5" pos:end="441:5">if <condition pos:start="427:8" pos:end="427:24">(<expr pos:start="427:9" pos:end="427:23"><call pos:start="427:9" pos:end="427:23"><name pos:start="427:9" pos:end="427:16">get_bits</name><argument_list pos:start="427:17" pos:end="427:23">(<argument pos:start="427:18" pos:end="427:19"><expr pos:start="427:18" pos:end="427:19"><name pos:start="427:18" pos:end="427:19">gb</name></expr></argument>, <argument pos:start="427:22" pos:end="427:22"><expr pos:start="427:22" pos:end="427:22"><literal type="number" pos:start="427:22" pos:end="427:22">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="427:26" pos:end="441:5">{<block_content pos:start="429:9" pos:end="439:9"> <comment type="block" pos:start="427:28" pos:end="427:50">/* unused dummy data */</comment>

        <expr_stmt pos:start="429:9" pos:end="429:32"><expr pos:start="429:9" pos:end="429:31"><operator pos:start="429:9" pos:end="429:9">*</operator><name pos:start="429:10" pos:end="429:14">flags</name> <operator pos:start="429:16" pos:end="429:17">|=</operator> <name pos:start="429:19" pos:end="429:31">AC3_AB_SKIPLE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="431:9" pos:end="431:36"><expr pos:start="431:9" pos:end="431:35"><name pos:start="431:9" pos:end="431:17"><name pos:start="431:9" pos:end="431:10">ab</name><operator pos:start="431:11" pos:end="431:12">-&gt;</operator><name pos:start="431:13" pos:end="431:17">skipl</name></name> <operator pos:start="431:19" pos:end="431:19">=</operator> <call pos:start="431:21" pos:end="431:35"><name pos:start="431:21" pos:end="431:28">get_bits</name><argument_list pos:start="431:29" pos:end="431:35">(<argument pos:start="431:30" pos:end="431:31"><expr pos:start="431:30" pos:end="431:31"><name pos:start="431:30" pos:end="431:31">gb</name></expr></argument>, <argument pos:start="431:34" pos:end="431:34"><expr pos:start="431:34" pos:end="431:34"><literal type="number" pos:start="431:34" pos:end="431:34">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while pos:start="433:9" pos:end="439:9">while <condition pos:start="433:15" pos:end="433:25">(<expr pos:start="433:16" pos:end="433:24"><name pos:start="433:16" pos:end="433:24"><name pos:start="433:16" pos:end="433:17">ab</name><operator pos:start="433:18" pos:end="433:19">-&gt;</operator><name pos:start="433:20" pos:end="433:24">skipl</name></name></expr>)</condition> <block pos:start="433:27" pos:end="439:9">{<block_content pos:start="435:13" pos:end="437:24">

            <expr_stmt pos:start="435:13" pos:end="435:28"><expr pos:start="435:13" pos:end="435:27"><call pos:start="435:13" pos:end="435:27"><name pos:start="435:13" pos:end="435:20">get_bits</name><argument_list pos:start="435:21" pos:end="435:27">(<argument pos:start="435:22" pos:end="435:23"><expr pos:start="435:22" pos:end="435:23"><name pos:start="435:22" pos:end="435:23">gb</name></expr></argument>, <argument pos:start="435:26" pos:end="435:26"><expr pos:start="435:26" pos:end="435:26"><literal type="number" pos:start="435:26" pos:end="435:26">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="437:13" pos:end="437:24"><expr pos:start="437:13" pos:end="437:23"><name pos:start="437:13" pos:end="437:21"><name pos:start="437:13" pos:end="437:14">ab</name><operator pos:start="437:15" pos:end="437:16">-&gt;</operator><name pos:start="437:17" pos:end="437:21">skipl</name></name><operator pos:start="437:22" pos:end="437:23">--</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="443:5" pos:end="447:7">/* unpack the transform coefficients

     * * this also uncouples channels if coupling is in use.

     */</comment>

    <if_stmt pos:start="449:5" pos:end="455:5"><if pos:start="449:5" pos:end="455:5">if <condition pos:start="449:8" pos:end="449:34">(<expr pos:start="449:9" pos:end="449:33"><call pos:start="449:9" pos:end="449:33"><name pos:start="449:9" pos:end="449:28">get_transform_coeffs</name><argument_list pos:start="449:29" pos:end="449:33">(<argument pos:start="449:30" pos:end="449:32"><expr pos:start="449:30" pos:end="449:32"><name pos:start="449:30" pos:end="449:32">ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="449:36" pos:end="455:5">{<block_content pos:start="451:9" pos:end="453:18">

        <expr_stmt pos:start="451:9" pos:end="451:78"><expr pos:start="451:9" pos:end="451:77"><call pos:start="451:9" pos:end="451:77"><name pos:start="451:9" pos:end="451:14">av_log</name><argument_list pos:start="451:15" pos:end="451:77">(<argument pos:start="451:16" pos:end="451:19"><expr pos:start="451:16" pos:end="451:19"><name pos:start="451:16" pos:end="451:19">NULL</name></expr></argument>, <argument pos:start="451:22" pos:end="451:33"><expr pos:start="451:22" pos:end="451:33"><name pos:start="451:22" pos:end="451:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="451:36" pos:end="451:76"><expr pos:start="451:36" pos:end="451:76"><literal type="string" pos:start="451:36" pos:end="451:76">"Error in routine get_transform_coeffs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="453:9" pos:end="453:18">return <expr pos:start="453:16" pos:end="453:17"><operator pos:start="453:16" pos:end="453:16">-</operator><literal type="number" pos:start="453:17" pos:end="453:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="457:5" pos:end="457:55">/* recover coefficients if rematrixing is in use */</comment>

    <if_stmt pos:start="459:5" pos:end="461:28"><if pos:start="459:5" pos:end="461:28">if <condition pos:start="459:8" pos:end="459:33">(<expr pos:start="459:9" pos:end="459:32"><operator pos:start="459:9" pos:end="459:9">*</operator><name pos:start="459:10" pos:end="459:14">flags</name> <operator pos:start="459:16" pos:end="459:16">&amp;</operator> <name pos:start="459:18" pos:end="459:32">AC3_AB_REMATSTR</name></expr>)</condition><block type="pseudo" pos:start="461:9" pos:end="461:28"><block_content pos:start="461:9" pos:end="461:28">

        <expr_stmt pos:start="461:9" pos:end="461:28"><expr pos:start="461:9" pos:end="461:27"><call pos:start="461:9" pos:end="461:27"><name pos:start="461:9" pos:end="461:22">do_rematrixing</name><argument_list pos:start="461:23" pos:end="461:27">(<argument pos:start="461:24" pos:end="461:26"><expr pos:start="461:24" pos:end="461:26"><name pos:start="461:24" pos:end="461:26">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="465:5" pos:end="467:24"><if pos:start="465:5" pos:end="467:24">if <condition pos:start="465:8" pos:end="465:45">(<expr pos:start="465:9" pos:end="465:44"><name pos:start="465:9" pos:end="465:19"><name pos:start="465:9" pos:end="465:11">ctx</name><operator pos:start="465:12" pos:end="465:13">-&gt;</operator><name pos:start="465:14" pos:end="465:19">output</name></name> <operator pos:start="465:21" pos:end="465:22">!=</operator> <name pos:start="465:24" pos:end="465:44">AC3_OUTPUT_UNMODIFIED</name></expr>)</condition><block type="pseudo" pos:start="467:9" pos:end="467:24"><block_content pos:start="467:9" pos:end="467:24">

        <expr_stmt pos:start="467:9" pos:end="467:24"><expr pos:start="467:9" pos:end="467:23"><call pos:start="467:9" pos:end="467:23"><name pos:start="467:9" pos:end="467:18">do_downmix</name><argument_list pos:start="467:19" pos:end="467:23">(<argument pos:start="467:20" pos:end="467:22"><expr pos:start="467:20" pos:end="467:22"><name pos:start="467:20" pos:end="467:22">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="471:5" pos:end="471:13">return <expr pos:start="471:12" pos:end="471:12"><literal type="number" pos:start="471:12" pos:end="471:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
