<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3725.c" pos:tabs="8"><function pos:start="1:1" pos:end="130:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int64_t</name></type> <name pos:start="1:16" pos:end="1:26">load_kernel</name> <parameter_list pos:start="1:28" pos:end="1:46">(<parameter pos:start="1:29" pos:end="1:45"><decl pos:start="1:29" pos:end="1:45"><type pos:start="1:29" pos:end="1:42"><name pos:start="1:29" pos:end="1:40">CPUMIPSState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="130:1">{<block_content pos:start="5:5" pos:end="128:24">

    <decl_stmt pos:start="5:5" pos:end="5:50"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:24">kernel_entry</name></decl>, <decl pos:start="5:27" pos:end="5:36"><type ref="prev" pos:start="5:5" pos:end="5:11"/><name pos:start="5:27" pos:end="5:36">kernel_low</name></decl>, <decl pos:start="5:39" pos:end="5:49"><type ref="prev" pos:start="5:5" pos:end="5:11"/><name pos:start="5:39" pos:end="5:49">kernel_high</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">index</name> <init pos:start="7:15" pos:end="7:17">= <expr pos:start="7:17" pos:end="7:17"><literal type="number" pos:start="7:17" pos:end="7:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">long</name></type> <name pos:start="9:10" pos:end="9:20">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:14">ram_addr_t</name></type> <name pos:start="11:16" pos:end="11:28">initrd_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">uint32_t</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:22">prom_buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">long</name></type> <name pos:start="15:10" pos:end="15:18">prom_size</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="31:5"><if pos:start="19:5" pos:end="31:5">if <condition pos:start="19:8" pos:end="23:66">(<expr pos:start="19:9" pos:end="23:65"><call pos:start="19:9" pos:end="23:61"><name pos:start="19:9" pos:end="19:16">load_elf</name><argument_list pos:start="19:17" pos:end="23:61">(<argument pos:start="19:18" pos:end="19:45"><expr pos:start="19:18" pos:end="19:45"><name pos:start="19:18" pos:end="19:45"><name pos:start="19:18" pos:end="19:29">loaderparams</name><operator pos:start="19:30" pos:end="19:30">.</operator><name pos:start="19:31" pos:end="19:45">kernel_filename</name></name></expr></argument>, <argument pos:start="19:48" pos:end="19:69"><expr pos:start="19:48" pos:end="19:69"><name pos:start="19:48" pos:end="19:69">cpu_mips_kseg0_to_phys</name></expr></argument>, <argument pos:start="19:72" pos:end="19:75"><expr pos:start="19:72" pos:end="19:75"><name pos:start="19:72" pos:end="19:75">NULL</name></expr></argument>,

                 <argument pos:start="21:18" pos:end="21:42"><expr pos:start="21:18" pos:end="21:42"><operator pos:start="21:18" pos:end="21:18">(</operator><name pos:start="21:19" pos:end="21:26">uint64_t</name> <operator pos:start="21:28" pos:end="21:28">*</operator><operator pos:start="21:29" pos:end="21:29">)</operator><operator pos:start="21:30" pos:end="21:30">&amp;</operator><name pos:start="21:31" pos:end="21:42">kernel_entry</name></expr></argument>, <argument pos:start="21:45" pos:end="21:67"><expr pos:start="21:45" pos:end="21:67"><operator pos:start="21:45" pos:end="21:45">(</operator><name pos:start="21:46" pos:end="21:53">uint64_t</name> <operator pos:start="21:55" pos:end="21:55">*</operator><operator pos:start="21:56" pos:end="21:56">)</operator><operator pos:start="21:57" pos:end="21:57">&amp;</operator><name pos:start="21:58" pos:end="21:67">kernel_low</name></expr></argument>,

                 <argument pos:start="23:18" pos:end="23:41"><expr pos:start="23:18" pos:end="23:41"><operator pos:start="23:18" pos:end="23:18">(</operator><name pos:start="23:19" pos:end="23:26">uint64_t</name> <operator pos:start="23:28" pos:end="23:28">*</operator><operator pos:start="23:29" pos:end="23:29">)</operator><operator pos:start="23:30" pos:end="23:30">&amp;</operator><name pos:start="23:31" pos:end="23:41">kernel_high</name></expr></argument>, <argument pos:start="23:44" pos:end="23:44"><expr pos:start="23:44" pos:end="23:44"><literal type="number" pos:start="23:44" pos:end="23:44">0</literal></expr></argument>, <argument pos:start="23:47" pos:end="23:57"><expr pos:start="23:47" pos:end="23:57"><name pos:start="23:47" pos:end="23:57">ELF_MACHINE</name></expr></argument>, <argument pos:start="23:60" pos:end="23:60"><expr pos:start="23:60" pos:end="23:60"><literal type="number" pos:start="23:60" pos:end="23:60">1</literal></expr></argument>)</argument_list></call> <operator pos:start="23:63" pos:end="23:63">&lt;</operator> <literal type="number" pos:start="23:65" pos:end="23:65">0</literal></expr>)</condition> <block pos:start="23:68" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:16">

        <expr_stmt pos:start="25:9" pos:end="27:46"><expr pos:start="25:9" pos:end="27:45"><call pos:start="25:9" pos:end="27:45"><name pos:start="25:9" pos:end="25:15">fprintf</name><argument_list pos:start="25:16" pos:end="27:45">(<argument pos:start="25:17" pos:end="25:22"><expr pos:start="25:17" pos:end="25:22"><name pos:start="25:17" pos:end="25:22">stderr</name></expr></argument>, <argument pos:start="25:25" pos:end="25:60"><expr pos:start="25:25" pos:end="25:60"><literal type="string" pos:start="25:25" pos:end="25:60">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                <argument pos:start="27:17" pos:end="27:44"><expr pos:start="27:17" pos:end="27:44"><name pos:start="27:17" pos:end="27:44"><name pos:start="27:17" pos:end="27:28">loaderparams</name><operator pos:start="27:29" pos:end="27:29">.</operator><name pos:start="27:30" pos:end="27:44">kernel_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:16"><expr pos:start="29:9" pos:end="29:15"><call pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:12">exit</name><argument_list pos:start="29:13" pos:end="29:15">(<argument pos:start="29:14" pos:end="29:14"><expr pos:start="29:14" pos:end="29:14"><literal type="number" pos:start="29:14" pos:end="29:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:21">/* load initrd */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:20"><expr pos:start="37:5" pos:end="37:19"><name pos:start="37:5" pos:end="37:15">initrd_size</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <literal type="number" pos:start="37:19" pos:end="37:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:22"><expr pos:start="39:5" pos:end="39:21"><name pos:start="39:5" pos:end="39:17">initrd_offset</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <literal type="number" pos:start="39:21" pos:end="39:21">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="77:5"><if pos:start="41:5" pos:end="77:5">if <condition pos:start="41:8" pos:end="41:37">(<expr pos:start="41:9" pos:end="41:36"><name pos:start="41:9" pos:end="41:36"><name pos:start="41:9" pos:end="41:20">loaderparams</name><operator pos:start="41:21" pos:end="41:21">.</operator><name pos:start="41:22" pos:end="41:36">initrd_filename</name></name></expr>)</condition> <block pos:start="41:39" pos:end="77:5">{<block_content pos:start="43:9" pos:end="75:9">

        <expr_stmt pos:start="43:9" pos:end="43:68"><expr pos:start="43:9" pos:end="43:67"><name pos:start="43:9" pos:end="43:19">initrd_size</name> <operator pos:start="43:21" pos:end="43:21">=</operator> <call pos:start="43:23" pos:end="43:67"><name pos:start="43:23" pos:end="43:36">get_image_size</name> <argument_list pos:start="43:38" pos:end="43:67">(<argument pos:start="43:39" pos:end="43:66"><expr pos:start="43:39" pos:end="43:66"><name pos:start="43:39" pos:end="43:66"><name pos:start="43:39" pos:end="43:50">loaderparams</name><operator pos:start="43:51" pos:end="43:51">.</operator><name pos:start="43:52" pos:end="43:66">initrd_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="65:9"><if pos:start="45:9" pos:end="65:9">if <condition pos:start="45:12" pos:end="45:28">(<expr pos:start="45:13" pos:end="45:27"><name pos:start="45:13" pos:end="45:23">initrd_size</name> <operator pos:start="45:25" pos:end="45:25">&gt;</operator> <literal type="number" pos:start="45:27" pos:end="45:27">0</literal></expr>)</condition> <block pos:start="45:30" pos:end="65:9">{<block_content pos:start="47:13" pos:end="63:78">

            <expr_stmt pos:start="47:13" pos:end="47:81"><expr pos:start="47:13" pos:end="47:80"><name pos:start="47:13" pos:end="47:25">initrd_offset</name> <operator pos:start="47:27" pos:end="47:27">=</operator> <operator pos:start="47:29" pos:end="47:29">(</operator><name pos:start="47:30" pos:end="47:40">kernel_high</name> <operator pos:start="47:42" pos:end="47:42">+</operator> <operator pos:start="47:44" pos:end="47:44">~</operator><name pos:start="47:45" pos:end="47:60">INITRD_PAGE_MASK</name><operator pos:start="47:61" pos:end="47:61">)</operator> <operator pos:start="47:63" pos:end="47:63">&amp;</operator> <name pos:start="47:65" pos:end="47:80">INITRD_PAGE_MASK</name></expr>;</expr_stmt>

            <if_stmt pos:start="49:13" pos:end="59:13"><if pos:start="49:13" pos:end="59:13">if <condition pos:start="49:16" pos:end="49:55">(<expr pos:start="49:17" pos:end="49:54"><name pos:start="49:17" pos:end="49:29">initrd_offset</name> <operator pos:start="49:31" pos:end="49:31">+</operator> <name pos:start="49:33" pos:end="49:43">initrd_size</name> <operator pos:start="49:45" pos:end="49:45">&gt;</operator> <name pos:start="49:47" pos:end="49:54">ram_size</name></expr>)</condition> <block pos:start="49:57" pos:end="59:13">{<block_content pos:start="51:17" pos:end="57:24">

                <expr_stmt pos:start="51:17" pos:end="55:54"><expr pos:start="51:17" pos:end="55:53"><call pos:start="51:17" pos:end="55:53"><name pos:start="51:17" pos:end="51:23">fprintf</name><argument_list pos:start="51:24" pos:end="55:53">(<argument pos:start="51:25" pos:end="51:30"><expr pos:start="51:25" pos:end="51:30"><name pos:start="51:25" pos:end="51:30">stderr</name></expr></argument>,

                        <argument pos:start="53:25" pos:end="53:76"><expr pos:start="53:25" pos:end="53:76"><literal type="string" pos:start="53:25" pos:end="53:76">"qemu: memory too small for initial ram disk '%s'\n"</literal></expr></argument>,

                        <argument pos:start="55:25" pos:end="55:52"><expr pos:start="55:25" pos:end="55:52"><name pos:start="55:25" pos:end="55:52"><name pos:start="55:25" pos:end="55:36">loaderparams</name><operator pos:start="55:37" pos:end="55:37">.</operator><name pos:start="55:38" pos:end="55:52">initrd_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:24"><expr pos:start="57:17" pos:end="57:23"><call pos:start="57:17" pos:end="57:23"><name pos:start="57:17" pos:end="57:20">exit</name><argument_list pos:start="57:21" pos:end="57:23">(<argument pos:start="57:22" pos:end="57:22"><expr pos:start="57:22" pos:end="57:22"><literal type="number" pos:start="57:22" pos:end="57:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="61:13" pos:end="63:78"><expr pos:start="61:13" pos:end="63:77"><name pos:start="61:13" pos:end="61:23">initrd_size</name> <operator pos:start="61:25" pos:end="61:25">=</operator> <call pos:start="61:27" pos:end="63:77"><name pos:start="61:27" pos:end="61:45">load_image_targphys</name><argument_list pos:start="61:46" pos:end="63:77">(<argument pos:start="61:47" pos:end="61:74"><expr pos:start="61:47" pos:end="61:74"><name pos:start="61:47" pos:end="61:74"><name pos:start="61:47" pos:end="61:58">loaderparams</name><operator pos:start="61:59" pos:end="61:59">.</operator><name pos:start="61:60" pos:end="61:74">initrd_filename</name></name></expr></argument>,

                                     <argument pos:start="63:38" pos:end="63:50"><expr pos:start="63:38" pos:end="63:50"><name pos:start="63:38" pos:end="63:50">initrd_offset</name></expr></argument>, <argument pos:start="63:53" pos:end="63:76"><expr pos:start="63:53" pos:end="63:76"><name pos:start="63:53" pos:end="63:60">ram_size</name> <operator pos:start="63:62" pos:end="63:62">-</operator> <name pos:start="63:64" pos:end="63:76">initrd_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="67:9" pos:end="75:9"><if pos:start="67:9" pos:end="75:9">if <condition pos:start="67:12" pos:end="67:45">(<expr pos:start="67:13" pos:end="67:44"><name pos:start="67:13" pos:end="67:23">initrd_size</name> <operator pos:start="67:25" pos:end="67:26">==</operator> <operator pos:start="67:28" pos:end="67:28">(</operator><name pos:start="67:29" pos:end="67:40">target_ulong</name><operator pos:start="67:41" pos:end="67:41">)</operator> <operator pos:start="67:43" pos:end="67:43">-</operator><literal type="number" pos:start="67:44" pos:end="67:44">1</literal></expr>)</condition> <block pos:start="67:47" pos:end="75:9">{<block_content pos:start="69:13" pos:end="73:20">

            <expr_stmt pos:start="69:13" pos:end="71:50"><expr pos:start="69:13" pos:end="71:49"><call pos:start="69:13" pos:end="71:49"><name pos:start="69:13" pos:end="69:19">fprintf</name><argument_list pos:start="69:20" pos:end="71:49">(<argument pos:start="69:21" pos:end="69:26"><expr pos:start="69:21" pos:end="69:26"><name pos:start="69:21" pos:end="69:26">stderr</name></expr></argument>, <argument pos:start="69:29" pos:end="69:74"><expr pos:start="69:29" pos:end="69:74"><literal type="string" pos:start="69:29" pos:end="69:74">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                    <argument pos:start="71:21" pos:end="71:48"><expr pos:start="71:21" pos:end="71:48"><name pos:start="71:21" pos:end="71:48"><name pos:start="71:21" pos:end="71:32">loaderparams</name><operator pos:start="71:33" pos:end="71:33">.</operator><name pos:start="71:34" pos:end="71:48">initrd_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:20"><expr pos:start="73:13" pos:end="73:19"><call pos:start="73:13" pos:end="73:19"><name pos:start="73:13" pos:end="73:16">exit</name><argument_list pos:start="73:17" pos:end="73:19">(<argument pos:start="73:18" pos:end="73:18"><expr pos:start="73:18" pos:end="73:18"><literal type="number" pos:start="73:18" pos:end="73:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="81:5" pos:end="81:32">/* Setup prom parameters. */</comment>

    <expr_stmt pos:start="83:5" pos:end="83:70"><expr pos:start="83:5" pos:end="83:69"><name pos:start="83:5" pos:end="83:13">prom_size</name> <operator pos:start="83:15" pos:end="83:15">=</operator> <name pos:start="83:17" pos:end="83:31">ENVP_NB_ENTRIES</name> <operator pos:start="83:33" pos:end="83:33">*</operator> <operator pos:start="83:35" pos:end="83:35">(</operator><sizeof pos:start="83:36" pos:end="83:50">sizeof<argument_list pos:start="83:42" pos:end="83:50">(<argument pos:start="83:43" pos:end="83:49"><expr pos:start="83:43" pos:end="83:49"><name pos:start="83:43" pos:end="83:49">int32_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="83:52" pos:end="83:52">+</operator> <name pos:start="83:54" pos:end="83:68">ENVP_ENTRY_SIZE</name><operator pos:start="83:69" pos:end="83:69">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:35"><expr pos:start="85:5" pos:end="85:34"><name pos:start="85:5" pos:end="85:12">prom_buf</name> <operator pos:start="85:14" pos:end="85:14">=</operator> <call pos:start="85:16" pos:end="85:34"><name pos:start="85:16" pos:end="85:23">g_malloc</name><argument_list pos:start="85:24" pos:end="85:34">(<argument pos:start="85:25" pos:end="85:33"><expr pos:start="85:25" pos:end="85:33"><name pos:start="85:25" pos:end="85:33">prom_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:68"><expr pos:start="89:5" pos:end="89:67"><call pos:start="89:5" pos:end="89:67"><name pos:start="89:5" pos:end="89:12">prom_set</name><argument_list pos:start="89:13" pos:end="89:67">(<argument pos:start="89:14" pos:end="89:21"><expr pos:start="89:14" pos:end="89:21"><name pos:start="89:14" pos:end="89:21">prom_buf</name></expr></argument>, <argument pos:start="89:24" pos:end="89:30"><expr pos:start="89:24" pos:end="89:30"><name pos:start="89:24" pos:end="89:28">index</name><operator pos:start="89:29" pos:end="89:30">++</operator></expr></argument>, <argument pos:start="89:33" pos:end="89:36"><expr pos:start="89:33" pos:end="89:36"><literal type="string" pos:start="89:33" pos:end="89:36">"%s"</literal></expr></argument>, <argument pos:start="89:39" pos:end="89:66"><expr pos:start="89:39" pos:end="89:66"><name pos:start="89:39" pos:end="89:66"><name pos:start="89:39" pos:end="89:50">loaderparams</name><operator pos:start="89:51" pos:end="89:51">.</operator><name pos:start="89:52" pos:end="89:66">kernel_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="103:5"><if pos:start="91:5" pos:end="99:5">if <condition pos:start="91:8" pos:end="91:24">(<expr pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:19">initrd_size</name> <operator pos:start="91:21" pos:end="91:21">&gt;</operator> <literal type="number" pos:start="91:23" pos:end="91:23">0</literal></expr>)</condition> <block pos:start="91:26" pos:end="99:5">{<block_content pos:start="93:9" pos:end="97:46">

        <expr_stmt pos:start="93:9" pos:end="97:46"><expr pos:start="93:9" pos:end="97:45"><call pos:start="93:9" pos:end="97:45"><name pos:start="93:9" pos:end="93:16">prom_set</name><argument_list pos:start="93:17" pos:end="97:45">(<argument pos:start="93:18" pos:end="93:25"><expr pos:start="93:18" pos:end="93:25"><name pos:start="93:18" pos:end="93:25">prom_buf</name></expr></argument>, <argument pos:start="93:28" pos:end="93:34"><expr pos:start="93:28" pos:end="93:34"><name pos:start="93:28" pos:end="93:32">index</name><operator pos:start="93:33" pos:end="93:34">++</operator></expr></argument>, <argument pos:start="93:37" pos:end="93:75"><expr pos:start="93:37" pos:end="93:75"><literal type="string" pos:start="93:37" pos:end="93:50">"rd_start=0x%"</literal> <name pos:start="93:52" pos:end="93:57">PRIx64</name> <literal type="string" pos:start="93:59" pos:end="93:75">" rd_size=%li %s"</literal></expr></argument>,

                 <argument pos:start="95:18" pos:end="95:60"><expr pos:start="95:18" pos:end="95:60"><call pos:start="95:18" pos:end="95:60"><name pos:start="95:18" pos:end="95:39">cpu_mips_phys_to_kseg0</name><argument_list pos:start="95:40" pos:end="95:60">(<argument pos:start="95:41" pos:end="95:44"><expr pos:start="95:41" pos:end="95:44"><name pos:start="95:41" pos:end="95:44">NULL</name></expr></argument>, <argument pos:start="95:47" pos:end="95:59"><expr pos:start="95:47" pos:end="95:59"><name pos:start="95:47" pos:end="95:59">initrd_offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="95:63" pos:end="95:73"><expr pos:start="95:63" pos:end="95:73"><name pos:start="95:63" pos:end="95:73">initrd_size</name></expr></argument>,

                 <argument pos:start="97:18" pos:end="97:44"><expr pos:start="97:18" pos:end="97:44"><name pos:start="97:18" pos:end="97:44"><name pos:start="97:18" pos:end="97:29">loaderparams</name><operator pos:start="97:30" pos:end="97:30">.</operator><name pos:start="97:31" pos:end="97:44">kernel_cmdline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="99:7" pos:end="103:5">else <block pos:start="99:12" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:71">

        <expr_stmt pos:start="101:9" pos:end="101:71"><expr pos:start="101:9" pos:end="101:70"><call pos:start="101:9" pos:end="101:70"><name pos:start="101:9" pos:end="101:16">prom_set</name><argument_list pos:start="101:17" pos:end="101:70">(<argument pos:start="101:18" pos:end="101:25"><expr pos:start="101:18" pos:end="101:25"><name pos:start="101:18" pos:end="101:25">prom_buf</name></expr></argument>, <argument pos:start="101:28" pos:end="101:34"><expr pos:start="101:28" pos:end="101:34"><name pos:start="101:28" pos:end="101:32">index</name><operator pos:start="101:33" pos:end="101:34">++</operator></expr></argument>, <argument pos:start="101:37" pos:end="101:40"><expr pos:start="101:37" pos:end="101:40"><literal type="string" pos:start="101:37" pos:end="101:40">"%s"</literal></expr></argument>, <argument pos:start="101:43" pos:end="101:69"><expr pos:start="101:43" pos:end="101:69"><name pos:start="101:43" pos:end="101:69"><name pos:start="101:43" pos:end="101:54">loaderparams</name><operator pos:start="101:55" pos:end="101:55">.</operator><name pos:start="101:56" pos:end="101:69">kernel_cmdline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="107:5" pos:end="107:45">/* Setup minimum environment variables */</comment>

    <expr_stmt pos:start="109:5" pos:end="109:53"><expr pos:start="109:5" pos:end="109:52"><call pos:start="109:5" pos:end="109:52"><name pos:start="109:5" pos:end="109:12">prom_set</name><argument_list pos:start="109:13" pos:end="109:52">(<argument pos:start="109:14" pos:end="109:21"><expr pos:start="109:14" pos:end="109:21"><name pos:start="109:14" pos:end="109:21">prom_buf</name></expr></argument>, <argument pos:start="109:24" pos:end="109:30"><expr pos:start="109:24" pos:end="109:30"><name pos:start="109:24" pos:end="109:28">index</name><operator pos:start="109:29" pos:end="109:30">++</operator></expr></argument>, <argument pos:start="109:33" pos:end="109:51"><expr pos:start="109:33" pos:end="109:51"><literal type="string" pos:start="109:33" pos:end="109:51">"busclock=33000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:54"><expr pos:start="111:5" pos:end="111:53"><call pos:start="111:5" pos:end="111:53"><name pos:start="111:5" pos:end="111:12">prom_set</name><argument_list pos:start="111:13" pos:end="111:53">(<argument pos:start="111:14" pos:end="111:21"><expr pos:start="111:14" pos:end="111:21"><name pos:start="111:14" pos:end="111:21">prom_buf</name></expr></argument>, <argument pos:start="111:24" pos:end="111:30"><expr pos:start="111:24" pos:end="111:30"><name pos:start="111:24" pos:end="111:28">index</name><operator pos:start="111:29" pos:end="111:30">++</operator></expr></argument>, <argument pos:start="111:33" pos:end="111:52"><expr pos:start="111:33" pos:end="111:52"><literal type="string" pos:start="111:33" pos:end="111:52">"cpuclock=100000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:79"><expr pos:start="113:5" pos:end="113:78"><call pos:start="113:5" pos:end="113:78"><name pos:start="113:5" pos:end="113:12">prom_set</name><argument_list pos:start="113:13" pos:end="113:78">(<argument pos:start="113:14" pos:end="113:21"><expr pos:start="113:14" pos:end="113:21"><name pos:start="113:14" pos:end="113:21">prom_buf</name></expr></argument>, <argument pos:start="113:24" pos:end="113:30"><expr pos:start="113:24" pos:end="113:30"><name pos:start="113:24" pos:end="113:28">index</name><operator pos:start="113:29" pos:end="113:30">++</operator></expr></argument>, <argument pos:start="113:33" pos:end="113:44"><expr pos:start="113:33" pos:end="113:44"><literal type="string" pos:start="113:33" pos:end="113:44">"memsize=%i"</literal></expr></argument>, <argument pos:start="113:47" pos:end="113:77"><expr pos:start="113:47" pos:end="113:77"><name pos:start="113:47" pos:end="113:67"><name pos:start="113:47" pos:end="113:58">loaderparams</name><operator pos:start="113:59" pos:end="113:59">.</operator><name pos:start="113:60" pos:end="113:67">ram_size</name></name><operator pos:start="113:68" pos:end="113:68">/</operator><literal type="number" pos:start="113:69" pos:end="113:72">1024</literal><operator pos:start="113:73" pos:end="113:73">/</operator><literal type="number" pos:start="113:74" pos:end="113:77">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:53"><expr pos:start="115:5" pos:end="115:52"><call pos:start="115:5" pos:end="115:52"><name pos:start="115:5" pos:end="115:12">prom_set</name><argument_list pos:start="115:13" pos:end="115:52">(<argument pos:start="115:14" pos:end="115:21"><expr pos:start="115:14" pos:end="115:21"><name pos:start="115:14" pos:end="115:21">prom_buf</name></expr></argument>, <argument pos:start="115:24" pos:end="115:30"><expr pos:start="115:24" pos:end="115:30"><name pos:start="115:24" pos:end="115:28">index</name><operator pos:start="115:29" pos:end="115:30">++</operator></expr></argument>, <argument pos:start="115:33" pos:end="115:51"><expr pos:start="115:33" pos:end="115:51"><literal type="string" pos:start="115:33" pos:end="115:51">"modetty0=38400n8r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:38"><expr pos:start="117:5" pos:end="117:37"><call pos:start="117:5" pos:end="117:37"><name pos:start="117:5" pos:end="117:12">prom_set</name><argument_list pos:start="117:13" pos:end="117:37">(<argument pos:start="117:14" pos:end="117:21"><expr pos:start="117:14" pos:end="117:21"><name pos:start="117:14" pos:end="117:21">prom_buf</name></expr></argument>, <argument pos:start="117:24" pos:end="117:30"><expr pos:start="117:24" pos:end="117:30"><name pos:start="117:24" pos:end="117:28">index</name><operator pos:start="117:29" pos:end="117:30">++</operator></expr></argument>, <argument pos:start="117:33" pos:end="117:36"><expr pos:start="117:33" pos:end="117:36"><name pos:start="117:33" pos:end="117:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="121:5" pos:end="123:64"><expr pos:start="121:5" pos:end="123:63"><call pos:start="121:5" pos:end="123:63"><name pos:start="121:5" pos:end="121:22">rom_add_blob_fixed</name><argument_list pos:start="121:23" pos:end="123:63">(<argument pos:start="121:24" pos:end="121:29"><expr pos:start="121:24" pos:end="121:29"><literal type="string" pos:start="121:24" pos:end="121:29">"prom"</literal></expr></argument>, <argument pos:start="121:32" pos:end="121:39"><expr pos:start="121:32" pos:end="121:39"><name pos:start="121:32" pos:end="121:39">prom_buf</name></expr></argument>, <argument pos:start="121:42" pos:end="121:50"><expr pos:start="121:42" pos:end="121:50"><name pos:start="121:42" pos:end="121:50">prom_size</name></expr></argument>,

                       <argument pos:start="123:24" pos:end="123:62"><expr pos:start="123:24" pos:end="123:62"><call pos:start="123:24" pos:end="123:62"><name pos:start="123:24" pos:end="123:45">cpu_mips_kseg0_to_phys</name><argument_list pos:start="123:46" pos:end="123:62">(<argument pos:start="123:47" pos:end="123:50"><expr pos:start="123:47" pos:end="123:50"><name pos:start="123:47" pos:end="123:50">NULL</name></expr></argument>, <argument pos:start="123:53" pos:end="123:61"><expr pos:start="123:53" pos:end="123:61"><name pos:start="123:53" pos:end="123:61">ENVP_ADDR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <return pos:start="128:5" pos:end="128:24">return <expr pos:start="128:12" pos:end="128:23"><name pos:start="128:12" pos:end="128:23">kernel_entry</name></expr>;</return>

</block_content>}</block></function></unit>
