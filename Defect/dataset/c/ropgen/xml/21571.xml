<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21571.c" pos:tabs="8"><function pos:start="1:1" pos:end="409:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <name pos:start="1:13" pos:end="1:24">coroutine_fn</name></type> <name pos:start="1:26" pos:end="1:35">mirror_run</name><parameter_list pos:start="1:36" pos:end="1:49">(<parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:42"><name pos:start="1:37" pos:end="1:40">void</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:48">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="409:1">{<block_content pos:start="5:5" pos:end="407:64">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">MirrorBlockJob</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:30">= <expr pos:start="5:25" pos:end="5:30"><name pos:start="5:25" pos:end="5:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">MirrorExitData</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:24">data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:39"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">bs</name> <init pos:start="9:26" pos:end="9:39">= <expr pos:start="9:28" pos:end="9:39"><name pos:start="9:28" pos:end="9:39"><name pos:start="9:28" pos:end="9:28">s</name><operator pos:start="9:29" pos:end="9:30">-&gt;</operator><name pos:start="9:31" pos:end="9:36">common</name><operator pos:start="9:37" pos:end="9:37">.</operator><name pos:start="9:38" pos:end="9:39">bs</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:55"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:22">sector_num</name></decl>, <decl pos:start="11:25" pos:end="11:27"><type ref="prev" pos:start="11:5" pos:end="11:11"/><name pos:start="11:25" pos:end="11:27">end</name></decl>, <decl pos:start="11:30" pos:end="11:46"><type ref="prev" pos:start="11:5" pos:end="11:11"/><name pos:start="11:30" pos:end="11:46">sectors_per_chunk</name></decl>, <decl pos:start="11:49" pos:end="11:54"><type ref="prev" pos:start="11:5" pos:end="11:11"/><name pos:start="11:49" pos:end="11:54">length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:26">last_pause_ns</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:19">BlockDriverInfo</name></type> <name pos:start="15:21" pos:end="15:23">bdi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:32"><decl pos:start="17:5" pos:end="17:31"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">char</name></type> <name pos:start="17:10" pos:end="17:31"><name pos:start="17:10" pos:end="17:25">backing_filename</name><index pos:start="17:26" pos:end="17:31">[<expr pos:start="17:27" pos:end="17:30"><literal type="number" pos:start="17:27" pos:end="17:30">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:16"><decl pos:start="19:5" pos:end="19:15"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name> <init pos:start="19:13" pos:end="19:15">= <expr pos:start="19:15" pos:end="19:15"><literal type="number" pos:start="19:15" pos:end="19:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">n</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:43">(<expr pos:start="25:9" pos:end="25:42"><call pos:start="25:9" pos:end="25:42"><name pos:start="25:9" pos:end="25:30">block_job_is_cancelled</name><argument_list pos:start="25:31" pos:end="25:42">(<argument pos:start="25:32" pos:end="25:41"><expr pos:start="25:32" pos:end="25:41"><operator pos:start="25:32" pos:end="25:32">&amp;</operator><name pos:start="25:33" pos:end="25:41"><name pos:start="25:33" pos:end="25:33">s</name><operator pos:start="25:34" pos:end="25:35">-&gt;</operator><name pos:start="25:36" pos:end="25:41">common</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:45" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:28">

        <goto pos:start="27:9" pos:end="27:28">goto <name pos:start="27:14" pos:end="27:27">immediate_exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:40"><expr pos:start="33:5" pos:end="33:39"><name pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:18">bdev_length</name></name> <operator pos:start="33:20" pos:end="33:20">=</operator> <call pos:start="33:22" pos:end="33:39"><name pos:start="33:22" pos:end="33:35">bdrv_getlength</name><argument_list pos:start="33:36" pos:end="33:39">(<argument pos:start="33:37" pos:end="33:38"><expr pos:start="33:37" pos:end="33:38"><name pos:start="33:37" pos:end="33:38">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="59:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:27">(<expr pos:start="35:9" pos:end="35:26"><name pos:start="35:9" pos:end="35:22"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:22">bdev_length</name></name> <operator pos:start="35:24" pos:end="35:24">&lt;</operator> <literal type="number" pos:start="35:26" pos:end="35:26">0</literal></expr>)</condition> <block pos:start="35:29" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:28">

        <expr_stmt pos:start="37:9" pos:end="37:29"><expr pos:start="37:9" pos:end="37:28"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <name pos:start="37:15" pos:end="37:28"><name pos:start="37:15" pos:end="37:15">s</name><operator pos:start="37:16" pos:end="37:17">-&gt;</operator><name pos:start="37:18" pos:end="37:28">bdev_length</name></name></expr>;</expr_stmt>

        <goto pos:start="39:9" pos:end="39:28">goto <name pos:start="39:14" pos:end="39:27">immediate_exit</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="41:7" pos:end="59:5">else if <condition pos:start="41:15" pos:end="41:35">(<expr pos:start="41:16" pos:end="41:34"><name pos:start="41:16" pos:end="41:29"><name pos:start="41:16" pos:end="41:16">s</name><operator pos:start="41:17" pos:end="41:18">-&gt;</operator><name pos:start="41:19" pos:end="41:29">bdev_length</name></name> <operator pos:start="41:31" pos:end="41:32">==</operator> <literal type="number" pos:start="41:34" pos:end="41:34">0</literal></expr>)</condition> <block pos:start="41:37" pos:end="59:5">{<block_content pos:start="45:9" pos:end="57:28">

        <comment type="block" pos:start="43:9" pos:end="43:59">/* Report BLOCK_JOB_READY and wait for complete. */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:42"><expr pos:start="45:9" pos:end="45:41"><call pos:start="45:9" pos:end="45:41"><name pos:start="45:9" pos:end="45:29">block_job_event_ready</name><argument_list pos:start="45:30" pos:end="45:41">(<argument pos:start="45:31" pos:end="45:40"><expr pos:start="45:31" pos:end="45:40"><operator pos:start="45:31" pos:end="45:31">&amp;</operator><name pos:start="45:32" pos:end="45:40"><name pos:start="45:32" pos:end="45:32">s</name><operator pos:start="45:33" pos:end="45:34">-&gt;</operator><name pos:start="45:35" pos:end="45:40">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:25"><expr pos:start="47:9" pos:end="47:24"><name pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:17">synced</name></name> <operator pos:start="47:19" pos:end="47:19">=</operator> <name pos:start="47:21" pos:end="47:24">true</name></expr>;</expr_stmt>

        <while pos:start="49:9" pos:end="53:9">while <condition pos:start="49:15" pos:end="49:74">(<expr pos:start="49:16" pos:end="49:73"><operator pos:start="49:16" pos:end="49:16">!</operator><call pos:start="49:17" pos:end="49:50"><name pos:start="49:17" pos:end="49:38">block_job_is_cancelled</name><argument_list pos:start="49:39" pos:end="49:50">(<argument pos:start="49:40" pos:end="49:49"><expr pos:start="49:40" pos:end="49:49"><operator pos:start="49:40" pos:end="49:40">&amp;</operator><name pos:start="49:41" pos:end="49:49"><name pos:start="49:41" pos:end="49:41">s</name><operator pos:start="49:42" pos:end="49:43">-&gt;</operator><name pos:start="49:44" pos:end="49:49">common</name></name></expr></argument>)</argument_list></call> <operator pos:start="49:52" pos:end="49:53">&amp;&amp;</operator> <operator pos:start="49:55" pos:end="49:55">!</operator><name pos:start="49:56" pos:end="49:73"><name pos:start="49:56" pos:end="49:56">s</name><operator pos:start="49:57" pos:end="49:58">-&gt;</operator><name pos:start="49:59" pos:end="49:73">should_complete</name></name></expr>)</condition> <block pos:start="49:76" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:40">

            <expr_stmt pos:start="51:13" pos:end="51:40"><expr pos:start="51:13" pos:end="51:39"><call pos:start="51:13" pos:end="51:39"><name pos:start="51:13" pos:end="51:27">block_job_yield</name><argument_list pos:start="51:28" pos:end="51:39">(<argument pos:start="51:29" pos:end="51:38"><expr pos:start="51:29" pos:end="51:38"><operator pos:start="51:29" pos:end="51:29">&amp;</operator><name pos:start="51:30" pos:end="51:38"><name pos:start="51:30" pos:end="51:30">s</name><operator pos:start="51:31" pos:end="51:32">-&gt;</operator><name pos:start="51:33" pos:end="51:38">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="55:9" pos:end="55:36"><expr pos:start="55:9" pos:end="55:35"><name pos:start="55:9" pos:end="55:27"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:17">common</name><operator pos:start="55:18" pos:end="55:18">.</operator><name pos:start="55:19" pos:end="55:27">cancelled</name></name> <operator pos:start="55:29" pos:end="55:29">=</operator> <name pos:start="55:31" pos:end="55:35">false</name></expr>;</expr_stmt>

        <goto pos:start="57:9" pos:end="57:28">goto <name pos:start="57:14" pos:end="57:27">immediate_exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:58"><expr pos:start="63:5" pos:end="63:57"><name pos:start="63:5" pos:end="63:10">length</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <call pos:start="63:14" pos:end="63:57"><name pos:start="63:14" pos:end="63:25">DIV_ROUND_UP</name><argument_list pos:start="63:26" pos:end="63:57">(<argument pos:start="63:27" pos:end="63:40"><expr pos:start="63:27" pos:end="63:40"><name pos:start="63:27" pos:end="63:40"><name pos:start="63:27" pos:end="63:27">s</name><operator pos:start="63:28" pos:end="63:29">-&gt;</operator><name pos:start="63:30" pos:end="63:40">bdev_length</name></name></expr></argument>, <argument pos:start="63:43" pos:end="63:56"><expr pos:start="63:43" pos:end="63:56"><name pos:start="63:43" pos:end="63:56"><name pos:start="63:43" pos:end="63:43">s</name><operator pos:start="63:44" pos:end="63:45">-&gt;</operator><name pos:start="63:46" pos:end="63:56">granularity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:45"><expr pos:start="65:5" pos:end="65:44"><name pos:start="65:5" pos:end="65:23"><name pos:start="65:5" pos:end="65:5">s</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:23">in_flight_bitmap</name></name> <operator pos:start="65:25" pos:end="65:25">=</operator> <call pos:start="65:27" pos:end="65:44"><name pos:start="65:27" pos:end="65:36">bitmap_new</name><argument_list pos:start="65:37" pos:end="65:44">(<argument pos:start="65:38" pos:end="65:43"><expr pos:start="65:38" pos:end="65:43"><name pos:start="65:38" pos:end="65:43">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="69:5" pos:end="75:7">/* If we have no backing file yet in the destination, we cannot let

     * the destination do COW.  Instead, we copy sectors around the

     * dirty data if needed.  We need a bitmap to do that.

     */</comment>

    <expr_stmt pos:start="77:5" pos:end="79:56"><expr pos:start="77:5" pos:end="79:55"><call pos:start="77:5" pos:end="79:55"><name pos:start="77:5" pos:end="77:29">bdrv_get_backing_filename</name><argument_list pos:start="77:30" pos:end="79:55">(<argument pos:start="77:31" pos:end="77:39"><expr pos:start="77:31" pos:end="77:39"><name pos:start="77:31" pos:end="77:39"><name pos:start="77:31" pos:end="77:31">s</name><operator pos:start="77:32" pos:end="77:33">-&gt;</operator><name pos:start="77:34" pos:end="77:39">target</name></name></expr></argument>, <argument pos:start="77:42" pos:end="77:57"><expr pos:start="77:42" pos:end="77:57"><name pos:start="77:42" pos:end="77:57">backing_filename</name></expr></argument>,

                              <argument pos:start="79:31" pos:end="79:54"><expr pos:start="79:31" pos:end="79:54"><sizeof pos:start="79:31" pos:end="79:54">sizeof<argument_list pos:start="79:37" pos:end="79:54">(<argument pos:start="79:38" pos:end="79:53"><expr pos:start="79:38" pos:end="79:53"><name pos:start="79:38" pos:end="79:53">backing_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="99:5"><if pos:start="81:5" pos:end="99:5">if <condition pos:start="81:8" pos:end="81:54">(<expr pos:start="81:9" pos:end="81:53"><name pos:start="81:9" pos:end="81:27"><name pos:start="81:9" pos:end="81:24">backing_filename</name><index pos:start="81:25" pos:end="81:27">[<expr pos:start="81:26" pos:end="81:26"><literal type="number" pos:start="81:26" pos:end="81:26">0</literal></expr>]</index></name> <operator pos:start="81:29" pos:end="81:30">&amp;&amp;</operator> <operator pos:start="81:32" pos:end="81:32">!</operator><name pos:start="81:33" pos:end="81:53"><name pos:start="81:33" pos:end="81:33">s</name><operator pos:start="81:34" pos:end="81:35">-&gt;</operator><name pos:start="81:36" pos:end="81:41">target</name><operator pos:start="81:42" pos:end="81:43">-&gt;</operator><name pos:start="81:44" pos:end="81:53">backing_hd</name></name></expr>)</condition> <block pos:start="81:56" pos:end="99:5">{<block_content pos:start="83:9" pos:end="97:9">

        <expr_stmt pos:start="83:9" pos:end="83:45"><expr pos:start="83:9" pos:end="83:44"><name pos:start="83:9" pos:end="83:11">ret</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <call pos:start="83:15" pos:end="83:44"><name pos:start="83:15" pos:end="83:27">bdrv_get_info</name><argument_list pos:start="83:28" pos:end="83:44">(<argument pos:start="83:29" pos:end="83:37"><expr pos:start="83:29" pos:end="83:37"><name pos:start="83:29" pos:end="83:37"><name pos:start="83:29" pos:end="83:29">s</name><operator pos:start="83:30" pos:end="83:31">-&gt;</operator><name pos:start="83:32" pos:end="83:37">target</name></name></expr></argument>, <argument pos:start="83:40" pos:end="83:43"><expr pos:start="83:40" pos:end="83:43"><operator pos:start="83:40" pos:end="83:40">&amp;</operator><name pos:start="83:41" pos:end="83:43">bdi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="85:9" pos:end="89:9"><if pos:start="85:9" pos:end="89:9">if <condition pos:start="85:12" pos:end="85:20">(<expr pos:start="85:13" pos:end="85:19"><name pos:start="85:13" pos:end="85:15">ret</name> <operator pos:start="85:17" pos:end="85:17">&lt;</operator> <literal type="number" pos:start="85:19" pos:end="85:19">0</literal></expr>)</condition> <block pos:start="85:22" pos:end="89:9">{<block_content pos:start="87:13" pos:end="87:32">

            <goto pos:start="87:13" pos:end="87:32">goto <name pos:start="87:18" pos:end="87:31">immediate_exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="91:9" pos:end="97:9"><if pos:start="91:9" pos:end="97:9">if <condition pos:start="91:12" pos:end="91:46">(<expr pos:start="91:13" pos:end="91:45"><name pos:start="91:13" pos:end="91:26"><name pos:start="91:13" pos:end="91:13">s</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:26">granularity</name></name> <operator pos:start="91:28" pos:end="91:28">&lt;</operator> <name pos:start="91:30" pos:end="91:45"><name pos:start="91:30" pos:end="91:32">bdi</name><operator pos:start="91:33" pos:end="91:33">.</operator><name pos:start="91:34" pos:end="91:45">cluster_size</name></name></expr>)</condition> <block pos:start="91:48" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:47">

            <expr_stmt pos:start="93:13" pos:end="93:61"><expr pos:start="93:13" pos:end="93:60"><name pos:start="93:13" pos:end="93:23"><name pos:start="93:13" pos:end="93:13">s</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:23">buf_size</name></name> <operator pos:start="93:25" pos:end="93:25">=</operator> <call pos:start="93:27" pos:end="93:60"><name pos:start="93:27" pos:end="93:29">MAX</name><argument_list pos:start="93:30" pos:end="93:60">(<argument pos:start="93:31" pos:end="93:41"><expr pos:start="93:31" pos:end="93:41"><name pos:start="93:31" pos:end="93:41"><name pos:start="93:31" pos:end="93:31">s</name><operator pos:start="93:32" pos:end="93:33">-&gt;</operator><name pos:start="93:34" pos:end="93:41">buf_size</name></name></expr></argument>, <argument pos:start="93:44" pos:end="93:59"><expr pos:start="93:44" pos:end="93:59"><name pos:start="93:44" pos:end="93:59"><name pos:start="93:44" pos:end="93:46">bdi</name><operator pos:start="93:47" pos:end="93:47">.</operator><name pos:start="93:48" pos:end="93:59">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:47"><expr pos:start="95:13" pos:end="95:46"><name pos:start="95:13" pos:end="95:25"><name pos:start="95:13" pos:end="95:13">s</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:25">cow_bitmap</name></name> <operator pos:start="95:27" pos:end="95:27">=</operator> <call pos:start="95:29" pos:end="95:46"><name pos:start="95:29" pos:end="95:38">bitmap_new</name><argument_list pos:start="95:39" pos:end="95:46">(<argument pos:start="95:40" pos:end="95:45"><expr pos:start="95:40" pos:end="95:45"><name pos:start="95:40" pos:end="95:45">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:44"><expr pos:start="103:5" pos:end="103:43"><name pos:start="103:5" pos:end="103:7">end</name> <operator pos:start="103:9" pos:end="103:9">=</operator> <name pos:start="103:11" pos:end="103:24"><name pos:start="103:11" pos:end="103:11">s</name><operator pos:start="103:12" pos:end="103:13">-&gt;</operator><name pos:start="103:14" pos:end="103:24">bdev_length</name></name> <operator pos:start="103:26" pos:end="103:26">/</operator> <name pos:start="103:28" pos:end="103:43">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:50"><expr pos:start="105:5" pos:end="105:49"><name pos:start="105:5" pos:end="105:10"><name pos:start="105:5" pos:end="105:5">s</name><operator pos:start="105:6" pos:end="105:7">-&gt;</operator><name pos:start="105:8" pos:end="105:10">buf</name></name> <operator pos:start="105:12" pos:end="105:12">=</operator> <call pos:start="105:14" pos:end="105:49"><name pos:start="105:14" pos:end="105:32">qemu_try_blockalign</name><argument_list pos:start="105:33" pos:end="105:49">(<argument pos:start="105:34" pos:end="105:35"><expr pos:start="105:34" pos:end="105:35"><name pos:start="105:34" pos:end="105:35">bs</name></expr></argument>, <argument pos:start="105:38" pos:end="105:48"><expr pos:start="105:38" pos:end="105:48"><name pos:start="105:38" pos:end="105:48"><name pos:start="105:38" pos:end="105:38">s</name><operator pos:start="105:39" pos:end="105:40">-&gt;</operator><name pos:start="105:41" pos:end="105:48">buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="107:5" pos:end="113:5"><if pos:start="107:5" pos:end="113:5">if <condition pos:start="107:8" pos:end="107:23">(<expr pos:start="107:9" pos:end="107:22"><name pos:start="107:9" pos:end="107:14"><name pos:start="107:9" pos:end="107:9">s</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:14">buf</name></name> <operator pos:start="107:16" pos:end="107:17">==</operator> <name pos:start="107:19" pos:end="107:22">NULL</name></expr>)</condition> <block pos:start="107:25" pos:end="113:5">{<block_content pos:start="109:9" pos:end="111:28">

        <expr_stmt pos:start="109:9" pos:end="109:22"><expr pos:start="109:9" pos:end="109:21"><name pos:start="109:9" pos:end="109:11">ret</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <operator pos:start="109:15" pos:end="109:15">-</operator><name pos:start="109:16" pos:end="109:21">ENOMEM</name></expr>;</expr_stmt>

        <goto pos:start="111:9" pos:end="111:28">goto <name pos:start="111:14" pos:end="111:27">immediate_exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:59"><expr pos:start="117:5" pos:end="117:58"><name pos:start="117:5" pos:end="117:21">sectors_per_chunk</name> <operator pos:start="117:23" pos:end="117:23">=</operator> <name pos:start="117:25" pos:end="117:38"><name pos:start="117:25" pos:end="117:25">s</name><operator pos:start="117:26" pos:end="117:27">-&gt;</operator><name pos:start="117:28" pos:end="117:38">granularity</name></name> <operator pos:start="117:40" pos:end="117:41">&gt;&gt;</operator> <name pos:start="117:43" pos:end="117:58">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:24"><expr pos:start="119:5" pos:end="119:23"><call pos:start="119:5" pos:end="119:23"><name pos:start="119:5" pos:end="119:20">mirror_free_init</name><argument_list pos:start="119:21" pos:end="119:23">(<argument pos:start="119:22" pos:end="119:22"><expr pos:start="119:22" pos:end="119:22"><name pos:start="119:22" pos:end="119:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="123:5" pos:end="163:5"><if pos:start="123:5" pos:end="163:5">if <condition pos:start="123:8" pos:end="123:25">(<expr pos:start="123:9" pos:end="123:24"><operator pos:start="123:9" pos:end="123:9">!</operator><name pos:start="123:10" pos:end="123:24"><name pos:start="123:10" pos:end="123:10">s</name><operator pos:start="123:11" pos:end="123:12">-&gt;</operator><name pos:start="123:13" pos:end="123:24">is_none_mode</name></name></expr>)</condition> <block pos:start="123:27" pos:end="163:5">{<block_content pos:start="127:9" pos:end="161:9">

        <comment type="block" pos:start="125:9" pos:end="125:79">/* First part, loop on the sectors and initialize the dirty bitmap.  */</comment>

        <decl_stmt pos:start="127:9" pos:end="127:41"><decl pos:start="127:9" pos:end="127:40"><type pos:start="127:9" pos:end="127:26"><name pos:start="127:9" pos:end="127:24">BlockDriverState</name> <modifier pos:start="127:26" pos:end="127:26">*</modifier></type><name pos:start="127:27" pos:end="127:30">base</name> <init pos:start="127:32" pos:end="127:40">= <expr pos:start="127:34" pos:end="127:40"><name pos:start="127:34" pos:end="127:40"><name pos:start="127:34" pos:end="127:34">s</name><operator pos:start="127:35" pos:end="127:36">-&gt;</operator><name pos:start="127:37" pos:end="127:40">base</name></name></expr></init></decl>;</decl_stmt>

        <for pos:start="129:9" pos:end="161:9">for <control pos:start="129:13" pos:end="129:48">(<init pos:start="129:14" pos:end="129:28"><expr pos:start="129:14" pos:end="129:27"><name pos:start="129:14" pos:end="129:23">sector_num</name> <operator pos:start="129:25" pos:end="129:25">=</operator> <literal type="number" pos:start="129:27" pos:end="129:27">0</literal></expr>;</init> <condition pos:start="129:30" pos:end="129:46"><expr pos:start="129:30" pos:end="129:45"><name pos:start="129:30" pos:end="129:39">sector_num</name> <operator pos:start="129:41" pos:end="129:41">&lt;</operator> <name pos:start="129:43" pos:end="129:45">end</name></expr>;</condition> <incr/>)</control> <block pos:start="129:50" pos:end="161:9">{<block_content pos:start="131:13" pos:end="159:13">

            <decl_stmt pos:start="131:13" pos:end="131:70"><decl pos:start="131:13" pos:end="131:69"><type pos:start="131:13" pos:end="131:19"><name pos:start="131:13" pos:end="131:19">int64_t</name></type> <name pos:start="131:21" pos:end="131:24">next</name> <init pos:start="131:26" pos:end="131:69">= <expr pos:start="131:28" pos:end="131:69"><operator pos:start="131:28" pos:end="131:28">(</operator><name pos:start="131:29" pos:end="131:38">sector_num</name> <operator pos:start="131:40" pos:end="131:40">|</operator> <operator pos:start="131:42" pos:end="131:42">(</operator><name pos:start="131:43" pos:end="131:59">sectors_per_chunk</name> <operator pos:start="131:61" pos:end="131:61">-</operator> <literal type="number" pos:start="131:63" pos:end="131:63">1</literal><operator pos:start="131:64" pos:end="131:64">)</operator><operator pos:start="131:65" pos:end="131:65">)</operator> <operator pos:start="131:67" pos:end="131:67">+</operator> <literal type="number" pos:start="131:69" pos:end="131:69">1</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="133:13" pos:end="135:77"><expr pos:start="133:13" pos:end="135:76"><name pos:start="133:13" pos:end="133:15">ret</name> <operator pos:start="133:17" pos:end="133:17">=</operator> <call pos:start="133:19" pos:end="135:76"><name pos:start="133:19" pos:end="133:41">bdrv_is_allocated_above</name><argument_list pos:start="133:42" pos:end="135:76">(<argument pos:start="133:43" pos:end="133:44"><expr pos:start="133:43" pos:end="133:44"><name pos:start="133:43" pos:end="133:44">bs</name></expr></argument>, <argument pos:start="133:47" pos:end="133:50"><expr pos:start="133:47" pos:end="133:50"><name pos:start="133:47" pos:end="133:50">base</name></expr></argument>,

                                          <argument pos:start="135:43" pos:end="135:52"><expr pos:start="135:43" pos:end="135:52"><name pos:start="135:43" pos:end="135:52">sector_num</name></expr></argument>, <argument pos:start="135:55" pos:end="135:71"><expr pos:start="135:55" pos:end="135:71"><name pos:start="135:55" pos:end="135:58">next</name> <operator pos:start="135:60" pos:end="135:60">-</operator> <name pos:start="135:62" pos:end="135:71">sector_num</name></expr></argument>, <argument pos:start="135:74" pos:end="135:75"><expr pos:start="135:74" pos:end="135:75"><operator pos:start="135:74" pos:end="135:74">&amp;</operator><name pos:start="135:75" pos:end="135:75">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="139:13" pos:end="143:13"><if pos:start="139:13" pos:end="143:13">if <condition pos:start="139:16" pos:end="139:24">(<expr pos:start="139:17" pos:end="139:23"><name pos:start="139:17" pos:end="139:19">ret</name> <operator pos:start="139:21" pos:end="139:21">&lt;</operator> <literal type="number" pos:start="139:23" pos:end="139:23">0</literal></expr>)</condition> <block pos:start="139:26" pos:end="143:13">{<block_content pos:start="141:17" pos:end="141:36">

                <goto pos:start="141:17" pos:end="141:36">goto <name pos:start="141:22" pos:end="141:35">immediate_exit</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="147:13" pos:end="147:26"><expr pos:start="147:13" pos:end="147:25"><call pos:start="147:13" pos:end="147:25"><name pos:start="147:13" pos:end="147:18">assert</name><argument_list pos:start="147:19" pos:end="147:25">(<argument pos:start="147:20" pos:end="147:24"><expr pos:start="147:20" pos:end="147:24"><name pos:start="147:20" pos:end="147:20">n</name> <operator pos:start="147:22" pos:end="147:22">&gt;</operator> <literal type="number" pos:start="147:24" pos:end="147:24">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="149:13" pos:end="159:13"><if pos:start="149:13" pos:end="155:13">if <condition pos:start="149:16" pos:end="149:25">(<expr pos:start="149:17" pos:end="149:24"><name pos:start="149:17" pos:end="149:19">ret</name> <operator pos:start="149:21" pos:end="149:22">==</operator> <literal type="number" pos:start="149:24" pos:end="149:24">1</literal></expr>)</condition> <block pos:start="149:27" pos:end="155:13">{<block_content pos:start="151:17" pos:end="153:34">

                <expr_stmt pos:start="151:17" pos:end="151:50"><expr pos:start="151:17" pos:end="151:49"><call pos:start="151:17" pos:end="151:49"><name pos:start="151:17" pos:end="151:30">bdrv_set_dirty</name><argument_list pos:start="151:31" pos:end="151:49">(<argument pos:start="151:32" pos:end="151:33"><expr pos:start="151:32" pos:end="151:33"><name pos:start="151:32" pos:end="151:33">bs</name></expr></argument>, <argument pos:start="151:36" pos:end="151:45"><expr pos:start="151:36" pos:end="151:45"><name pos:start="151:36" pos:end="151:45">sector_num</name></expr></argument>, <argument pos:start="151:48" pos:end="151:48"><expr pos:start="151:48" pos:end="151:48"><name pos:start="151:48" pos:end="151:48">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="153:17" pos:end="153:34"><expr pos:start="153:17" pos:end="153:33"><name pos:start="153:17" pos:end="153:26">sector_num</name> <operator pos:start="153:28" pos:end="153:28">=</operator> <name pos:start="153:30" pos:end="153:33">next</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="155:15" pos:end="159:13">else <block pos:start="155:20" pos:end="159:13">{<block_content pos:start="157:17" pos:end="157:32">

                <expr_stmt pos:start="157:17" pos:end="157:32"><expr pos:start="157:17" pos:end="157:31"><name pos:start="157:17" pos:end="157:26">sector_num</name> <operator pos:start="157:28" pos:end="157:29">+=</operator> <name pos:start="157:31" pos:end="157:31">n</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="167:5" pos:end="167:55"><expr pos:start="167:5" pos:end="167:54"><call pos:start="167:5" pos:end="167:54"><name pos:start="167:5" pos:end="167:24">bdrv_dirty_iter_init</name><argument_list pos:start="167:25" pos:end="167:54">(<argument pos:start="167:26" pos:end="167:27"><expr pos:start="167:26" pos:end="167:27"><name pos:start="167:26" pos:end="167:27">bs</name></expr></argument>, <argument pos:start="167:30" pos:end="167:44"><expr pos:start="167:30" pos:end="167:44"><name pos:start="167:30" pos:end="167:44"><name pos:start="167:30" pos:end="167:30">s</name><operator pos:start="167:31" pos:end="167:32">-&gt;</operator><name pos:start="167:33" pos:end="167:44">dirty_bitmap</name></name></expr></argument>, <argument pos:start="167:47" pos:end="167:53"><expr pos:start="167:47" pos:end="167:53"><operator pos:start="167:47" pos:end="167:47">&amp;</operator><name pos:start="167:48" pos:end="167:53"><name pos:start="167:48" pos:end="167:48">s</name><operator pos:start="167:49" pos:end="167:50">-&gt;</operator><name pos:start="167:51" pos:end="167:53">hbi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:59"><expr pos:start="169:5" pos:end="169:58"><name pos:start="169:5" pos:end="169:17">last_pause_ns</name> <operator pos:start="169:19" pos:end="169:19">=</operator> <call pos:start="169:21" pos:end="169:58"><name pos:start="169:21" pos:end="169:37">qemu_clock_get_ns</name><argument_list pos:start="169:38" pos:end="169:58">(<argument pos:start="169:39" pos:end="169:57"><expr pos:start="169:39" pos:end="169:57"><name pos:start="169:39" pos:end="169:57">QEMU_CLOCK_REALTIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="171:5" pos:end="365:5">for <control pos:start="171:9" pos:end="171:12">(<init pos:start="171:10" pos:end="171:10">;</init><condition pos:start="171:11" pos:end="171:11">;</condition><incr/>)</control> <block pos:start="171:14" pos:end="365:5">{<block_content pos:start="173:9" pos:end="363:63">

        <decl_stmt pos:start="173:9" pos:end="173:30"><decl pos:start="173:9" pos:end="173:29"><type pos:start="173:9" pos:end="173:16"><name pos:start="173:9" pos:end="173:16">uint64_t</name></type> <name pos:start="173:18" pos:end="173:25">delay_ns</name> <init pos:start="173:27" pos:end="173:29">= <expr pos:start="173:29" pos:end="173:29"><literal type="number" pos:start="173:29" pos:end="173:29">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="175:9" pos:end="175:20"><decl pos:start="175:9" pos:end="175:19"><type pos:start="175:9" pos:end="175:15"><name pos:start="175:9" pos:end="175:15">int64_t</name></type> <name pos:start="175:17" pos:end="175:19">cnt</name></decl>;</decl_stmt>

        <decl_stmt pos:start="177:9" pos:end="177:29"><decl pos:start="177:9" pos:end="177:28"><type pos:start="177:9" pos:end="177:12"><name pos:start="177:9" pos:end="177:12">bool</name></type> <name pos:start="177:14" pos:end="177:28">should_complete</name></decl>;</decl_stmt>



        <if_stmt pos:start="181:9" pos:end="187:9"><if pos:start="181:9" pos:end="187:9">if <condition pos:start="181:12" pos:end="181:23">(<expr pos:start="181:13" pos:end="181:22"><name pos:start="181:13" pos:end="181:18"><name pos:start="181:13" pos:end="181:13">s</name><operator pos:start="181:14" pos:end="181:15">-&gt;</operator><name pos:start="181:16" pos:end="181:18">ret</name></name> <operator pos:start="181:20" pos:end="181:20">&lt;</operator> <literal type="number" pos:start="181:22" pos:end="181:22">0</literal></expr>)</condition> <block pos:start="181:25" pos:end="187:9">{<block_content pos:start="183:13" pos:end="185:32">

            <expr_stmt pos:start="183:13" pos:end="183:25"><expr pos:start="183:13" pos:end="183:24"><name pos:start="183:13" pos:end="183:15">ret</name> <operator pos:start="183:17" pos:end="183:17">=</operator> <name pos:start="183:19" pos:end="183:24"><name pos:start="183:19" pos:end="183:19">s</name><operator pos:start="183:20" pos:end="183:21">-&gt;</operator><name pos:start="183:22" pos:end="183:24">ret</name></name></expr>;</expr_stmt>

            <goto pos:start="185:13" pos:end="185:32">goto <name pos:start="185:18" pos:end="185:31">immediate_exit</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="191:9" pos:end="191:56"><expr pos:start="191:9" pos:end="191:55"><name pos:start="191:9" pos:end="191:11">cnt</name> <operator pos:start="191:13" pos:end="191:13">=</operator> <call pos:start="191:15" pos:end="191:55"><name pos:start="191:15" pos:end="191:34">bdrv_get_dirty_count</name><argument_list pos:start="191:35" pos:end="191:55">(<argument pos:start="191:36" pos:end="191:37"><expr pos:start="191:36" pos:end="191:37"><name pos:start="191:36" pos:end="191:37">bs</name></expr></argument>, <argument pos:start="191:40" pos:end="191:54"><expr pos:start="191:40" pos:end="191:54"><name pos:start="191:40" pos:end="191:54"><name pos:start="191:40" pos:end="191:40">s</name><operator pos:start="191:41" pos:end="191:42">-&gt;</operator><name pos:start="191:43" pos:end="191:54">dirty_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="193:9" pos:end="199:78">/* s-&gt;common.offset contains the number of bytes already processed so

         * far, cnt is the number of dirty sectors remaining and

         * s-&gt;sectors_in_flight is the number of sectors currently being

         * processed; together those are the current total operation length */</comment>

        <expr_stmt pos:start="201:9" pos:end="203:72"><expr pos:start="201:9" pos:end="203:71"><name pos:start="201:9" pos:end="201:21"><name pos:start="201:9" pos:end="201:9">s</name><operator pos:start="201:10" pos:end="201:11">-&gt;</operator><name pos:start="201:12" pos:end="201:17">common</name><operator pos:start="201:18" pos:end="201:18">.</operator><name pos:start="201:19" pos:end="201:21">len</name></name> <operator pos:start="201:23" pos:end="201:23">=</operator> <name pos:start="201:25" pos:end="201:40"><name pos:start="201:25" pos:end="201:25">s</name><operator pos:start="201:26" pos:end="201:27">-&gt;</operator><name pos:start="201:28" pos:end="201:33">common</name><operator pos:start="201:34" pos:end="201:34">.</operator><name pos:start="201:35" pos:end="201:40">offset</name></name> <operator pos:start="201:42" pos:end="201:42">+</operator>

                        <operator pos:start="203:25" pos:end="203:25">(</operator><name pos:start="203:26" pos:end="203:28">cnt</name> <operator pos:start="203:30" pos:end="203:30">+</operator> <name pos:start="203:32" pos:end="203:51"><name pos:start="203:32" pos:end="203:32">s</name><operator pos:start="203:33" pos:end="203:34">-&gt;</operator><name pos:start="203:35" pos:end="203:51">sectors_in_flight</name></name><operator pos:start="203:52" pos:end="203:52">)</operator> <operator pos:start="203:54" pos:end="203:54">*</operator> <name pos:start="203:56" pos:end="203:71">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>



        <comment type="block" pos:start="207:9" pos:end="215:11">/* Note that even when no rate limit is applied we need to yield

         * periodically with no pending I/O so that qemu_aio_flush() returns.

         * We do so every SLICE_TIME nanoseconds, or when there is an error,

         * or when the source is clean, whichever comes first.

         */</comment>

        <if_stmt pos:start="217:9" pos:end="243:9"><if pos:start="217:9" pos:end="243:9">if <condition pos:start="217:12" pos:end="219:60">(<expr pos:start="217:13" pos:end="219:59"><call pos:start="217:13" pos:end="217:50"><name pos:start="217:13" pos:end="217:29">qemu_clock_get_ns</name><argument_list pos:start="217:30" pos:end="217:50">(<argument pos:start="217:31" pos:end="217:49"><expr pos:start="217:31" pos:end="217:49"><name pos:start="217:31" pos:end="217:49">QEMU_CLOCK_REALTIME</name></expr></argument>)</argument_list></call> <operator pos:start="217:52" pos:end="217:52">-</operator> <name pos:start="217:54" pos:end="217:66">last_pause_ns</name> <operator pos:start="217:68" pos:end="217:68">&lt;</operator> <name pos:start="217:70" pos:end="217:79">SLICE_TIME</name> <operator pos:start="217:81" pos:end="217:82">&amp;&amp;</operator>

            <name pos:start="219:13" pos:end="219:30"><name pos:start="219:13" pos:end="219:13">s</name><operator pos:start="219:14" pos:end="219:15">-&gt;</operator><name pos:start="219:16" pos:end="219:21">common</name><operator pos:start="219:22" pos:end="219:22">.</operator><name pos:start="219:23" pos:end="219:30">iostatus</name></name> <operator pos:start="219:32" pos:end="219:33">==</operator> <name pos:start="219:35" pos:end="219:59">BLOCK_DEVICE_IO_STATUS_OK</name></expr>)</condition> <block pos:start="219:62" pos:end="243:9">{<block_content pos:start="221:13" pos:end="241:13">

            <if_stmt pos:start="221:13" pos:end="241:13"><if pos:start="221:13" pos:end="231:13">if <condition pos:start="221:16" pos:end="223:47">(<expr pos:start="221:17" pos:end="223:46"><name pos:start="221:17" pos:end="221:28"><name pos:start="221:17" pos:end="221:17">s</name><operator pos:start="221:18" pos:end="221:19">-&gt;</operator><name pos:start="221:20" pos:end="221:28">in_flight</name></name> <operator pos:start="221:30" pos:end="221:31">==</operator> <name pos:start="221:33" pos:end="221:45">MAX_IN_FLIGHT</name> <operator pos:start="221:47" pos:end="221:48">||</operator> <name pos:start="221:50" pos:end="221:66"><name pos:start="221:50" pos:end="221:50">s</name><operator pos:start="221:51" pos:end="221:52">-&gt;</operator><name pos:start="221:53" pos:end="221:66">buf_free_count</name></name> <operator pos:start="221:68" pos:end="221:69">==</operator> <literal type="number" pos:start="221:71" pos:end="221:71">0</literal> <operator pos:start="221:73" pos:end="221:74">||</operator>

                <operator pos:start="223:17" pos:end="223:17">(</operator><name pos:start="223:18" pos:end="223:20">cnt</name> <operator pos:start="223:22" pos:end="223:23">==</operator> <literal type="number" pos:start="223:25" pos:end="223:25">0</literal> <operator pos:start="223:27" pos:end="223:28">&amp;&amp;</operator> <name pos:start="223:30" pos:end="223:41"><name pos:start="223:30" pos:end="223:30">s</name><operator pos:start="223:31" pos:end="223:32">-&gt;</operator><name pos:start="223:33" pos:end="223:41">in_flight</name></name> <operator pos:start="223:43" pos:end="223:43">&gt;</operator> <literal type="number" pos:start="223:45" pos:end="223:45">0</literal><operator pos:start="223:46" pos:end="223:46">)</operator></expr>)</condition> <block pos:start="223:49" pos:end="231:13">{<block_content pos:start="225:17" pos:end="229:25">

                <expr_stmt pos:start="225:17" pos:end="225:76"><expr pos:start="225:17" pos:end="225:75"><call pos:start="225:17" pos:end="225:75"><name pos:start="225:17" pos:end="225:34">trace_mirror_yield</name><argument_list pos:start="225:35" pos:end="225:75">(<argument pos:start="225:36" pos:end="225:36"><expr pos:start="225:36" pos:end="225:36"><name pos:start="225:36" pos:end="225:36">s</name></expr></argument>, <argument pos:start="225:39" pos:end="225:50"><expr pos:start="225:39" pos:end="225:50"><name pos:start="225:39" pos:end="225:50"><name pos:start="225:39" pos:end="225:39">s</name><operator pos:start="225:40" pos:end="225:41">-&gt;</operator><name pos:start="225:42" pos:end="225:50">in_flight</name></name></expr></argument>, <argument pos:start="225:53" pos:end="225:69"><expr pos:start="225:53" pos:end="225:69"><name pos:start="225:53" pos:end="225:69"><name pos:start="225:53" pos:end="225:53">s</name><operator pos:start="225:54" pos:end="225:55">-&gt;</operator><name pos:start="225:56" pos:end="225:69">buf_free_count</name></name></expr></argument>, <argument pos:start="225:72" pos:end="225:74"><expr pos:start="225:72" pos:end="225:74"><name pos:start="225:72" pos:end="225:74">cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="227:17" pos:end="227:39"><expr pos:start="227:17" pos:end="227:38"><call pos:start="227:17" pos:end="227:38"><name pos:start="227:17" pos:end="227:36">qemu_coroutine_yield</name><argument_list pos:start="227:37" pos:end="227:38">()</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="229:17" pos:end="229:25">continue;</continue>

            </block_content>}</block></if> <if type="elseif" pos:start="231:15" pos:end="241:13">else if <condition pos:start="231:23" pos:end="231:32">(<expr pos:start="231:24" pos:end="231:31"><name pos:start="231:24" pos:end="231:26">cnt</name> <operator pos:start="231:28" pos:end="231:29">!=</operator> <literal type="number" pos:start="231:31" pos:end="231:31">0</literal></expr>)</condition> <block pos:start="231:34" pos:end="241:13">{<block_content pos:start="233:17" pos:end="239:17">

                <expr_stmt pos:start="233:17" pos:end="233:47"><expr pos:start="233:17" pos:end="233:46"><name pos:start="233:17" pos:end="233:24">delay_ns</name> <operator pos:start="233:26" pos:end="233:26">=</operator> <call pos:start="233:28" pos:end="233:46"><name pos:start="233:28" pos:end="233:43">mirror_iteration</name><argument_list pos:start="233:44" pos:end="233:46">(<argument pos:start="233:45" pos:end="233:45"><expr pos:start="233:45" pos:end="233:45"><name pos:start="233:45" pos:end="233:45">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="235:17" pos:end="239:17"><if pos:start="235:17" pos:end="239:17">if <condition pos:start="235:20" pos:end="235:34">(<expr pos:start="235:21" pos:end="235:33"><name pos:start="235:21" pos:end="235:28">delay_ns</name> <operator pos:start="235:30" pos:end="235:31">==</operator> <literal type="number" pos:start="235:33" pos:end="235:33">0</literal></expr>)</condition> <block pos:start="235:36" pos:end="239:17">{<block_content pos:start="237:21" pos:end="237:29">

                    <continue pos:start="237:21" pos:end="237:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="247:9" pos:end="247:32"><expr pos:start="247:9" pos:end="247:31"><name pos:start="247:9" pos:end="247:23">should_complete</name> <operator pos:start="247:25" pos:end="247:25">=</operator> <name pos:start="247:27" pos:end="247:31">false</name></expr>;</expr_stmt>

        <if_stmt pos:start="249:9" pos:end="295:9"><if pos:start="249:9" pos:end="295:9">if <condition pos:start="249:12" pos:end="249:42">(<expr pos:start="249:13" pos:end="249:41"><name pos:start="249:13" pos:end="249:24"><name pos:start="249:13" pos:end="249:13">s</name><operator pos:start="249:14" pos:end="249:15">-&gt;</operator><name pos:start="249:16" pos:end="249:24">in_flight</name></name> <operator pos:start="249:26" pos:end="249:27">==</operator> <literal type="number" pos:start="249:29" pos:end="249:29">0</literal> <operator pos:start="249:31" pos:end="249:32">&amp;&amp;</operator> <name pos:start="249:34" pos:end="249:36">cnt</name> <operator pos:start="249:38" pos:end="249:39">==</operator> <literal type="number" pos:start="249:41" pos:end="249:41">0</literal></expr>)</condition> <block pos:start="249:44" pos:end="295:9">{<block_content pos:start="251:13" pos:end="293:13">

            <expr_stmt pos:start="251:13" pos:end="251:41"><expr pos:start="251:13" pos:end="251:40"><call pos:start="251:13" pos:end="251:40"><name pos:start="251:13" pos:end="251:37">trace_mirror_before_flush</name><argument_list pos:start="251:38" pos:end="251:40">(<argument pos:start="251:39" pos:end="251:39"><expr pos:start="251:39" pos:end="251:39"><name pos:start="251:39" pos:end="251:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:40"><expr pos:start="253:13" pos:end="253:39"><name pos:start="253:13" pos:end="253:15">ret</name> <operator pos:start="253:17" pos:end="253:17">=</operator> <call pos:start="253:19" pos:end="253:39"><name pos:start="253:19" pos:end="253:28">bdrv_flush</name><argument_list pos:start="253:29" pos:end="253:39">(<argument pos:start="253:30" pos:end="253:38"><expr pos:start="253:30" pos:end="253:38"><name pos:start="253:30" pos:end="253:38"><name pos:start="253:30" pos:end="253:30">s</name><operator pos:start="253:31" pos:end="253:32">-&gt;</operator><name pos:start="253:33" pos:end="253:38">target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="255:13" pos:end="293:13"><if pos:start="255:13" pos:end="265:13">if <condition pos:start="255:16" pos:end="255:24">(<expr pos:start="255:17" pos:end="255:23"><name pos:start="255:17" pos:end="255:19">ret</name> <operator pos:start="255:21" pos:end="255:21">&lt;</operator> <literal type="number" pos:start="255:23" pos:end="255:23">0</literal></expr>)</condition> <block pos:start="255:26" pos:end="265:13">{<block_content pos:start="257:17" pos:end="263:17">

                <if_stmt pos:start="257:17" pos:end="263:17"><if pos:start="257:17" pos:end="263:17">if <condition pos:start="257:20" pos:end="259:46">(<expr pos:start="257:21" pos:end="259:45"><call pos:start="257:21" pos:end="257:55"><name pos:start="257:21" pos:end="257:39">mirror_error_action</name><argument_list pos:start="257:40" pos:end="257:55">(<argument pos:start="257:41" pos:end="257:41"><expr pos:start="257:41" pos:end="257:41"><name pos:start="257:41" pos:end="257:41">s</name></expr></argument>, <argument pos:start="257:44" pos:end="257:48"><expr pos:start="257:44" pos:end="257:48"><name pos:start="257:44" pos:end="257:48">false</name></expr></argument>, <argument pos:start="257:51" pos:end="257:54"><expr pos:start="257:51" pos:end="257:54"><operator pos:start="257:51" pos:end="257:51">-</operator><name pos:start="257:52" pos:end="257:54">ret</name></expr></argument>)</argument_list></call> <operator pos:start="257:57" pos:end="257:58">==</operator>

                    <name pos:start="259:21" pos:end="259:45">BLOCK_ERROR_ACTION_REPORT</name></expr>)</condition> <block pos:start="259:48" pos:end="263:17">{<block_content pos:start="261:21" pos:end="261:40">

                    <goto pos:start="261:21" pos:end="261:40">goto <name pos:start="261:26" pos:end="261:39">immediate_exit</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="265:15" pos:end="293:13">else <block pos:start="265:20" pos:end="293:13">{<block_content pos:start="277:17" pos:end="291:64">

                <comment type="block" pos:start="267:17" pos:end="275:19">/* We're out of the streaming phase.  From now on, if the job

                 * is cancelled we will actually complete all pending I/O and

                 * report completion.  This way, block-job-cancel will leave

                 * the target in a consistent state.

                 */</comment>

                <if_stmt pos:start="277:17" pos:end="283:17"><if pos:start="277:17" pos:end="283:17">if <condition pos:start="277:20" pos:end="277:31">(<expr pos:start="277:21" pos:end="277:30"><operator pos:start="277:21" pos:end="277:21">!</operator><name pos:start="277:22" pos:end="277:30"><name pos:start="277:22" pos:end="277:22">s</name><operator pos:start="277:23" pos:end="277:24">-&gt;</operator><name pos:start="277:25" pos:end="277:30">synced</name></name></expr>)</condition> <block pos:start="277:33" pos:end="283:17">{<block_content pos:start="279:21" pos:end="281:37">

                    <expr_stmt pos:start="279:21" pos:end="279:54"><expr pos:start="279:21" pos:end="279:53"><call pos:start="279:21" pos:end="279:53"><name pos:start="279:21" pos:end="279:41">block_job_event_ready</name><argument_list pos:start="279:42" pos:end="279:53">(<argument pos:start="279:43" pos:end="279:52"><expr pos:start="279:43" pos:end="279:52"><operator pos:start="279:43" pos:end="279:43">&amp;</operator><name pos:start="279:44" pos:end="279:52"><name pos:start="279:44" pos:end="279:44">s</name><operator pos:start="279:45" pos:end="279:46">-&gt;</operator><name pos:start="279:47" pos:end="279:52">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="281:21" pos:end="281:37"><expr pos:start="281:21" pos:end="281:36"><name pos:start="281:21" pos:end="281:29"><name pos:start="281:21" pos:end="281:21">s</name><operator pos:start="281:22" pos:end="281:23">-&gt;</operator><name pos:start="281:24" pos:end="281:29">synced</name></name> <operator pos:start="281:31" pos:end="281:31">=</operator> <name pos:start="281:33" pos:end="281:36">true</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="287:17" pos:end="289:55"><expr pos:start="287:17" pos:end="289:54"><name pos:start="287:17" pos:end="287:31">should_complete</name> <operator pos:start="287:33" pos:end="287:33">=</operator> <name pos:start="287:35" pos:end="287:52"><name pos:start="287:35" pos:end="287:35">s</name><operator pos:start="287:36" pos:end="287:37">-&gt;</operator><name pos:start="287:38" pos:end="287:52">should_complete</name></name> <operator pos:start="287:54" pos:end="287:55">||</operator>

                    <call pos:start="289:21" pos:end="289:54"><name pos:start="289:21" pos:end="289:42">block_job_is_cancelled</name><argument_list pos:start="289:43" pos:end="289:54">(<argument pos:start="289:44" pos:end="289:53"><expr pos:start="289:44" pos:end="289:53"><operator pos:start="289:44" pos:end="289:44">&amp;</operator><name pos:start="289:45" pos:end="289:53"><name pos:start="289:45" pos:end="289:45">s</name><operator pos:start="289:46" pos:end="289:47">-&gt;</operator><name pos:start="289:48" pos:end="289:53">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="291:17" pos:end="291:64"><expr pos:start="291:17" pos:end="291:63"><name pos:start="291:17" pos:end="291:19">cnt</name> <operator pos:start="291:21" pos:end="291:21">=</operator> <call pos:start="291:23" pos:end="291:63"><name pos:start="291:23" pos:end="291:42">bdrv_get_dirty_count</name><argument_list pos:start="291:43" pos:end="291:63">(<argument pos:start="291:44" pos:end="291:45"><expr pos:start="291:44" pos:end="291:45"><name pos:start="291:44" pos:end="291:45">bs</name></expr></argument>, <argument pos:start="291:48" pos:end="291:62"><expr pos:start="291:48" pos:end="291:62"><name pos:start="291:48" pos:end="291:62"><name pos:start="291:48" pos:end="291:48">s</name><operator pos:start="291:49" pos:end="291:50">-&gt;</operator><name pos:start="291:51" pos:end="291:62">dirty_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="299:9" pos:end="323:9"><if pos:start="299:9" pos:end="323:9">if <condition pos:start="299:12" pos:end="299:40">(<expr pos:start="299:13" pos:end="299:39"><name pos:start="299:13" pos:end="299:15">cnt</name> <operator pos:start="299:17" pos:end="299:18">==</operator> <literal type="number" pos:start="299:20" pos:end="299:20">0</literal> <operator pos:start="299:22" pos:end="299:23">&amp;&amp;</operator> <name pos:start="299:25" pos:end="299:39">should_complete</name></expr>)</condition> <block pos:start="299:42" pos:end="323:9">{<block_content pos:start="317:13" pos:end="321:60">

            <comment type="block" pos:start="301:13" pos:end="315:15">/* The dirty bitmap is not updated while operations are pending.

             * If we're about to exit, wait for pending operations before

             * calling bdrv_get_dirty_count(bs), or we may exit while the

             * source has dirty data to copy!

             *

             * Note that I/O can be submitted by the guest while

             * mirror_populate runs.

             */</comment>

            <expr_stmt pos:start="317:13" pos:end="317:46"><expr pos:start="317:13" pos:end="317:45"><call pos:start="317:13" pos:end="317:45"><name pos:start="317:13" pos:end="317:37">trace_mirror_before_drain</name><argument_list pos:start="317:38" pos:end="317:45">(<argument pos:start="317:39" pos:end="317:39"><expr pos:start="317:39" pos:end="317:39"><name pos:start="317:39" pos:end="317:39">s</name></expr></argument>, <argument pos:start="317:42" pos:end="317:44"><expr pos:start="317:42" pos:end="317:44"><name pos:start="317:42" pos:end="317:44">cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="319:13" pos:end="319:27"><expr pos:start="319:13" pos:end="319:26"><call pos:start="319:13" pos:end="319:26"><name pos:start="319:13" pos:end="319:22">bdrv_drain</name><argument_list pos:start="319:23" pos:end="319:26">(<argument pos:start="319:24" pos:end="319:25"><expr pos:start="319:24" pos:end="319:25"><name pos:start="319:24" pos:end="319:25">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="321:13" pos:end="321:60"><expr pos:start="321:13" pos:end="321:59"><name pos:start="321:13" pos:end="321:15">cnt</name> <operator pos:start="321:17" pos:end="321:17">=</operator> <call pos:start="321:19" pos:end="321:59"><name pos:start="321:19" pos:end="321:38">bdrv_get_dirty_count</name><argument_list pos:start="321:39" pos:end="321:59">(<argument pos:start="321:40" pos:end="321:41"><expr pos:start="321:40" pos:end="321:41"><name pos:start="321:40" pos:end="321:41">bs</name></expr></argument>, <argument pos:start="321:44" pos:end="321:58"><expr pos:start="321:44" pos:end="321:58"><name pos:start="321:44" pos:end="321:58"><name pos:start="321:44" pos:end="321:44">s</name><operator pos:start="321:45" pos:end="321:46">-&gt;</operator><name pos:start="321:47" pos:end="321:58">dirty_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="327:9" pos:end="327:16"><expr pos:start="327:9" pos:end="327:15"><name pos:start="327:9" pos:end="327:11">ret</name> <operator pos:start="327:13" pos:end="327:13">=</operator> <literal type="number" pos:start="327:15" pos:end="327:15">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="329:9" pos:end="329:63"><expr pos:start="329:9" pos:end="329:62"><call pos:start="329:9" pos:end="329:62"><name pos:start="329:9" pos:end="329:33">trace_mirror_before_sleep</name><argument_list pos:start="329:34" pos:end="329:62">(<argument pos:start="329:35" pos:end="329:35"><expr pos:start="329:35" pos:end="329:35"><name pos:start="329:35" pos:end="329:35">s</name></expr></argument>, <argument pos:start="329:38" pos:end="329:40"><expr pos:start="329:38" pos:end="329:40"><name pos:start="329:38" pos:end="329:40">cnt</name></expr></argument>, <argument pos:start="329:43" pos:end="329:51"><expr pos:start="329:43" pos:end="329:51"><name pos:start="329:43" pos:end="329:51"><name pos:start="329:43" pos:end="329:43">s</name><operator pos:start="329:44" pos:end="329:45">-&gt;</operator><name pos:start="329:46" pos:end="329:51">synced</name></name></expr></argument>, <argument pos:start="329:54" pos:end="329:61"><expr pos:start="329:54" pos:end="329:61"><name pos:start="329:54" pos:end="329:61">delay_ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="331:9" pos:end="361:9"><if pos:start="331:9" pos:end="341:9">if <condition pos:start="331:12" pos:end="331:23">(<expr pos:start="331:13" pos:end="331:22"><operator pos:start="331:13" pos:end="331:13">!</operator><name pos:start="331:14" pos:end="331:22"><name pos:start="331:14" pos:end="331:14">s</name><operator pos:start="331:15" pos:end="331:16">-&gt;</operator><name pos:start="331:17" pos:end="331:22">synced</name></name></expr>)</condition> <block pos:start="331:25" pos:end="341:9">{<block_content pos:start="333:13" pos:end="339:13">

            <expr_stmt pos:start="333:13" pos:end="333:74"><expr pos:start="333:13" pos:end="333:73"><call pos:start="333:13" pos:end="333:73"><name pos:start="333:13" pos:end="333:30">block_job_sleep_ns</name><argument_list pos:start="333:31" pos:end="333:73">(<argument pos:start="333:32" pos:end="333:41"><expr pos:start="333:32" pos:end="333:41"><operator pos:start="333:32" pos:end="333:32">&amp;</operator><name pos:start="333:33" pos:end="333:41"><name pos:start="333:33" pos:end="333:33">s</name><operator pos:start="333:34" pos:end="333:35">-&gt;</operator><name pos:start="333:36" pos:end="333:41">common</name></name></expr></argument>, <argument pos:start="333:44" pos:end="333:62"><expr pos:start="333:44" pos:end="333:62"><name pos:start="333:44" pos:end="333:62">QEMU_CLOCK_REALTIME</name></expr></argument>, <argument pos:start="333:65" pos:end="333:72"><expr pos:start="333:65" pos:end="333:72"><name pos:start="333:65" pos:end="333:72">delay_ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="335:13" pos:end="339:13"><if pos:start="335:13" pos:end="339:13">if <condition pos:start="335:16" pos:end="335:51">(<expr pos:start="335:17" pos:end="335:50"><call pos:start="335:17" pos:end="335:50"><name pos:start="335:17" pos:end="335:38">block_job_is_cancelled</name><argument_list pos:start="335:39" pos:end="335:50">(<argument pos:start="335:40" pos:end="335:49"><expr pos:start="335:40" pos:end="335:49"><operator pos:start="335:40" pos:end="335:40">&amp;</operator><name pos:start="335:41" pos:end="335:49"><name pos:start="335:41" pos:end="335:41">s</name><operator pos:start="335:42" pos:end="335:43">-&gt;</operator><name pos:start="335:44" pos:end="335:49">common</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="335:53" pos:end="339:13">{<block_content pos:start="337:17" pos:end="337:22">

                <break pos:start="337:17" pos:end="337:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="341:11" pos:end="347:9">else if <condition pos:start="341:19" pos:end="341:36">(<expr pos:start="341:20" pos:end="341:35"><operator pos:start="341:20" pos:end="341:20">!</operator><name pos:start="341:21" pos:end="341:35">should_complete</name></expr>)</condition> <block pos:start="341:38" pos:end="347:9">{<block_content pos:start="343:13" pos:end="345:74">

            <expr_stmt pos:start="343:13" pos:end="343:72"><expr pos:start="343:13" pos:end="343:71"><name pos:start="343:13" pos:end="343:20">delay_ns</name> <operator pos:start="343:22" pos:end="343:22">=</operator> <operator pos:start="343:24" pos:end="343:24">(</operator><ternary pos:start="343:25" pos:end="343:70"><condition pos:start="343:25" pos:end="343:55"><expr pos:start="343:25" pos:end="343:53"><name pos:start="343:25" pos:end="343:36"><name pos:start="343:25" pos:end="343:25">s</name><operator pos:start="343:26" pos:end="343:27">-&gt;</operator><name pos:start="343:28" pos:end="343:36">in_flight</name></name> <operator pos:start="343:38" pos:end="343:39">==</operator> <literal type="number" pos:start="343:41" pos:end="343:41">0</literal> <operator pos:start="343:43" pos:end="343:44">&amp;&amp;</operator> <name pos:start="343:46" pos:end="343:48">cnt</name> <operator pos:start="343:50" pos:end="343:51">==</operator> <literal type="number" pos:start="343:53" pos:end="343:53">0</literal></expr> ?</condition><then pos:start="343:57" pos:end="343:66"> <expr pos:start="343:57" pos:end="343:66"><name pos:start="343:57" pos:end="343:66">SLICE_TIME</name></expr> </then><else pos:start="343:68" pos:end="343:70">: <expr pos:start="343:70" pos:end="343:70"><literal type="number" pos:start="343:70" pos:end="343:70">0</literal></expr></else></ternary><operator pos:start="343:71" pos:end="343:71">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="345:13" pos:end="345:74"><expr pos:start="345:13" pos:end="345:73"><call pos:start="345:13" pos:end="345:73"><name pos:start="345:13" pos:end="345:30">block_job_sleep_ns</name><argument_list pos:start="345:31" pos:end="345:73">(<argument pos:start="345:32" pos:end="345:41"><expr pos:start="345:32" pos:end="345:41"><operator pos:start="345:32" pos:end="345:32">&amp;</operator><name pos:start="345:33" pos:end="345:41"><name pos:start="345:33" pos:end="345:33">s</name><operator pos:start="345:34" pos:end="345:35">-&gt;</operator><name pos:start="345:36" pos:end="345:41">common</name></name></expr></argument>, <argument pos:start="345:44" pos:end="345:62"><expr pos:start="345:44" pos:end="345:62"><name pos:start="345:44" pos:end="345:62">QEMU_CLOCK_REALTIME</name></expr></argument>, <argument pos:start="345:65" pos:end="345:72"><expr pos:start="345:65" pos:end="345:72"><name pos:start="345:65" pos:end="345:72">delay_ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="347:11" pos:end="361:9">else if <condition pos:start="347:19" pos:end="347:28">(<expr pos:start="347:20" pos:end="347:27"><name pos:start="347:20" pos:end="347:22">cnt</name> <operator pos:start="347:24" pos:end="347:25">==</operator> <literal type="number" pos:start="347:27" pos:end="347:27">0</literal></expr>)</condition> <block pos:start="347:30" pos:end="361:9">{<block_content pos:start="355:13" pos:end="359:18">

            <comment type="block" pos:start="349:13" pos:end="353:15">/* The two disks are in sync.  Exit and report successful

             * completion.

             */</comment>

            <expr_stmt pos:start="355:13" pos:end="355:55"><expr pos:start="355:13" pos:end="355:54"><call pos:start="355:13" pos:end="355:54"><name pos:start="355:13" pos:end="355:18">assert</name><argument_list pos:start="355:19" pos:end="355:54">(<argument pos:start="355:20" pos:end="355:53"><expr pos:start="355:20" pos:end="355:53"><call pos:start="355:20" pos:end="355:53"><name pos:start="355:20" pos:end="355:30">QLIST_EMPTY</name><argument_list pos:start="355:31" pos:end="355:53">(<argument pos:start="355:32" pos:end="355:52"><expr pos:start="355:32" pos:end="355:52"><operator pos:start="355:32" pos:end="355:32">&amp;</operator><name pos:start="355:33" pos:end="355:52"><name pos:start="355:33" pos:end="355:34">bs</name><operator pos:start="355:35" pos:end="355:36">-&gt;</operator><name pos:start="355:37" pos:end="355:52">tracked_requests</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="357:13" pos:end="357:40"><expr pos:start="357:13" pos:end="357:39"><name pos:start="357:13" pos:end="357:31"><name pos:start="357:13" pos:end="357:13">s</name><operator pos:start="357:14" pos:end="357:15">-&gt;</operator><name pos:start="357:16" pos:end="357:21">common</name><operator pos:start="357:22" pos:end="357:22">.</operator><name pos:start="357:23" pos:end="357:31">cancelled</name></name> <operator pos:start="357:33" pos:end="357:33">=</operator> <name pos:start="357:35" pos:end="357:39">false</name></expr>;</expr_stmt>

            <break pos:start="359:13" pos:end="359:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="363:9" pos:end="363:63"><expr pos:start="363:9" pos:end="363:62"><name pos:start="363:9" pos:end="363:21">last_pause_ns</name> <operator pos:start="363:23" pos:end="363:23">=</operator> <call pos:start="363:25" pos:end="363:62"><name pos:start="363:25" pos:end="363:41">qemu_clock_get_ns</name><argument_list pos:start="363:42" pos:end="363:62">(<argument pos:start="363:43" pos:end="363:61"><expr pos:start="363:43" pos:end="363:61"><name pos:start="363:43" pos:end="363:61">QEMU_CLOCK_REALTIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



<label pos:start="369:1" pos:end="369:15"><name pos:start="369:1" pos:end="369:14">immediate_exit</name>:</label>

    <if_stmt pos:start="371:5" pos:end="385:5"><if pos:start="371:5" pos:end="385:5">if <condition pos:start="371:8" pos:end="371:25">(<expr pos:start="371:9" pos:end="371:24"><name pos:start="371:9" pos:end="371:20"><name pos:start="371:9" pos:end="371:9">s</name><operator pos:start="371:10" pos:end="371:11">-&gt;</operator><name pos:start="371:12" pos:end="371:20">in_flight</name></name> <operator pos:start="371:22" pos:end="371:22">&gt;</operator> <literal type="number" pos:start="371:24" pos:end="371:24">0</literal></expr>)</condition> <block pos:start="371:27" pos:end="385:5">{<block_content pos:start="381:9" pos:end="383:24">

        <comment type="block" pos:start="373:9" pos:end="379:11">/* We get here only if something went wrong.  Either the job failed,

         * or it was cancelled prematurely so that we do not guarantee that

         * the target is a copy of the source.

         */</comment>

        <expr_stmt pos:start="381:9" pos:end="381:78"><expr pos:start="381:9" pos:end="381:77"><call pos:start="381:9" pos:end="381:77"><name pos:start="381:9" pos:end="381:14">assert</name><argument_list pos:start="381:15" pos:end="381:77">(<argument pos:start="381:16" pos:end="381:76"><expr pos:start="381:16" pos:end="381:76"><name pos:start="381:16" pos:end="381:18">ret</name> <operator pos:start="381:20" pos:end="381:20">&lt;</operator> <literal type="number" pos:start="381:22" pos:end="381:22">0</literal> <operator pos:start="381:24" pos:end="381:25">||</operator> <operator pos:start="381:27" pos:end="381:27">(</operator><operator pos:start="381:28" pos:end="381:28">!</operator><name pos:start="381:29" pos:end="381:37"><name pos:start="381:29" pos:end="381:29">s</name><operator pos:start="381:30" pos:end="381:31">-&gt;</operator><name pos:start="381:32" pos:end="381:37">synced</name></name> <operator pos:start="381:39" pos:end="381:40">&amp;&amp;</operator> <call pos:start="381:42" pos:end="381:75"><name pos:start="381:42" pos:end="381:63">block_job_is_cancelled</name><argument_list pos:start="381:64" pos:end="381:75">(<argument pos:start="381:65" pos:end="381:74"><expr pos:start="381:65" pos:end="381:74"><operator pos:start="381:65" pos:end="381:65">&amp;</operator><name pos:start="381:66" pos:end="381:74"><name pos:start="381:66" pos:end="381:66">s</name><operator pos:start="381:67" pos:end="381:68">-&gt;</operator><name pos:start="381:69" pos:end="381:74">common</name></name></expr></argument>)</argument_list></call><operator pos:start="381:76" pos:end="381:76">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="383:9" pos:end="383:24"><expr pos:start="383:9" pos:end="383:23"><call pos:start="383:9" pos:end="383:23"><name pos:start="383:9" pos:end="383:20">mirror_drain</name><argument_list pos:start="383:21" pos:end="383:23">(<argument pos:start="383:22" pos:end="383:22"><expr pos:start="383:22" pos:end="383:22"><name pos:start="383:22" pos:end="383:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="389:5" pos:end="389:30"><expr pos:start="389:5" pos:end="389:29"><call pos:start="389:5" pos:end="389:29"><name pos:start="389:5" pos:end="389:10">assert</name><argument_list pos:start="389:11" pos:end="389:29">(<argument pos:start="389:12" pos:end="389:28"><expr pos:start="389:12" pos:end="389:28"><name pos:start="389:12" pos:end="389:23"><name pos:start="389:12" pos:end="389:12">s</name><operator pos:start="389:13" pos:end="389:14">-&gt;</operator><name pos:start="389:15" pos:end="389:23">in_flight</name></name> <operator pos:start="389:25" pos:end="389:26">==</operator> <literal type="number" pos:start="389:28" pos:end="389:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="391:5" pos:end="391:23"><expr pos:start="391:5" pos:end="391:22"><call pos:start="391:5" pos:end="391:22"><name pos:start="391:5" pos:end="391:14">qemu_vfree</name><argument_list pos:start="391:15" pos:end="391:22">(<argument pos:start="391:16" pos:end="391:21"><expr pos:start="391:16" pos:end="391:21"><name pos:start="391:16" pos:end="391:21"><name pos:start="391:16" pos:end="391:16">s</name><operator pos:start="391:17" pos:end="391:18">-&gt;</operator><name pos:start="391:19" pos:end="391:21">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="393:5" pos:end="393:26"><expr pos:start="393:5" pos:end="393:25"><call pos:start="393:5" pos:end="393:25"><name pos:start="393:5" pos:end="393:10">g_free</name><argument_list pos:start="393:11" pos:end="393:25">(<argument pos:start="393:12" pos:end="393:24"><expr pos:start="393:12" pos:end="393:24"><name pos:start="393:12" pos:end="393:24"><name pos:start="393:12" pos:end="393:12">s</name><operator pos:start="393:13" pos:end="393:14">-&gt;</operator><name pos:start="393:15" pos:end="393:24">cow_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="395:5" pos:end="395:32"><expr pos:start="395:5" pos:end="395:31"><call pos:start="395:5" pos:end="395:31"><name pos:start="395:5" pos:end="395:10">g_free</name><argument_list pos:start="395:11" pos:end="395:31">(<argument pos:start="395:12" pos:end="395:30"><expr pos:start="395:12" pos:end="395:30"><name pos:start="395:12" pos:end="395:30"><name pos:start="395:12" pos:end="395:12">s</name><operator pos:start="395:13" pos:end="395:14">-&gt;</operator><name pos:start="395:15" pos:end="395:30">in_flight_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="397:5" pos:end="397:51"><expr pos:start="397:5" pos:end="397:50"><call pos:start="397:5" pos:end="397:50"><name pos:start="397:5" pos:end="397:29">bdrv_release_dirty_bitmap</name><argument_list pos:start="397:30" pos:end="397:50">(<argument pos:start="397:31" pos:end="397:32"><expr pos:start="397:31" pos:end="397:32"><name pos:start="397:31" pos:end="397:32">bs</name></expr></argument>, <argument pos:start="397:35" pos:end="397:49"><expr pos:start="397:35" pos:end="397:49"><name pos:start="397:35" pos:end="397:49"><name pos:start="397:35" pos:end="397:35">s</name><operator pos:start="397:36" pos:end="397:37">-&gt;</operator><name pos:start="397:38" pos:end="397:49">dirty_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="399:5" pos:end="399:37"><expr pos:start="399:5" pos:end="399:36"><call pos:start="399:5" pos:end="399:36"><name pos:start="399:5" pos:end="399:25">bdrv_iostatus_disable</name><argument_list pos:start="399:26" pos:end="399:36">(<argument pos:start="399:27" pos:end="399:35"><expr pos:start="399:27" pos:end="399:35"><name pos:start="399:27" pos:end="399:35"><name pos:start="399:27" pos:end="399:27">s</name><operator pos:start="399:28" pos:end="399:29">-&gt;</operator><name pos:start="399:30" pos:end="399:35">target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="403:5" pos:end="403:35"><expr pos:start="403:5" pos:end="403:34"><name pos:start="403:5" pos:end="403:8">data</name> <operator pos:start="403:10" pos:end="403:10">=</operator> <call pos:start="403:12" pos:end="403:34"><name pos:start="403:12" pos:end="403:19">g_malloc</name><argument_list pos:start="403:20" pos:end="403:34">(<argument pos:start="403:21" pos:end="403:33"><expr pos:start="403:21" pos:end="403:33"><sizeof pos:start="403:21" pos:end="403:33">sizeof<argument_list pos:start="403:27" pos:end="403:33">(<argument pos:start="403:28" pos:end="403:32"><expr pos:start="403:28" pos:end="403:32"><operator pos:start="403:28" pos:end="403:28">*</operator><name pos:start="403:29" pos:end="403:32">data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="405:5" pos:end="405:20"><expr pos:start="405:5" pos:end="405:19"><name pos:start="405:5" pos:end="405:13"><name pos:start="405:5" pos:end="405:8">data</name><operator pos:start="405:9" pos:end="405:10">-&gt;</operator><name pos:start="405:11" pos:end="405:13">ret</name></name> <operator pos:start="405:15" pos:end="405:15">=</operator> <name pos:start="405:17" pos:end="405:19">ret</name></expr>;</expr_stmt>

    <expr_stmt pos:start="407:5" pos:end="407:64"><expr pos:start="407:5" pos:end="407:63"><call pos:start="407:5" pos:end="407:63"><name pos:start="407:5" pos:end="407:32">block_job_defer_to_main_loop</name><argument_list pos:start="407:33" pos:end="407:63">(<argument pos:start="407:34" pos:end="407:43"><expr pos:start="407:34" pos:end="407:43"><operator pos:start="407:34" pos:end="407:34">&amp;</operator><name pos:start="407:35" pos:end="407:43"><name pos:start="407:35" pos:end="407:35">s</name><operator pos:start="407:36" pos:end="407:37">-&gt;</operator><name pos:start="407:38" pos:end="407:43">common</name></name></expr></argument>, <argument pos:start="407:46" pos:end="407:56"><expr pos:start="407:46" pos:end="407:56"><name pos:start="407:46" pos:end="407:56">mirror_exit</name></expr></argument>, <argument pos:start="407:59" pos:end="407:62"><expr pos:start="407:59" pos:end="407:62"><name pos:start="407:59" pos:end="407:62">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
