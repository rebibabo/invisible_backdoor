<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4340.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">parse_adaptation_sets</name><parameter_list pos:start="1:33" pos:end="1:52">(<parameter pos:start="1:34" pos:end="1:51"><decl pos:start="1:34" pos:end="1:51"><type pos:start="1:34" pos:end="1:50"><name pos:start="1:34" pos:end="1:48">AVFormatContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:51">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="83:1">{<block_content pos:start="5:5" pos:end="81:13">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:22">WebMDashMuxContext</name> <modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:25">w</name> <init pos:start="5:27" pos:end="5:40">= <expr pos:start="5:29" pos:end="5:40"><name pos:start="5:29" pos:end="5:40"><name pos:start="5:29" pos:end="5:29">s</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:11">p</name> <init pos:start="7:13" pos:end="7:32">= <expr pos:start="7:15" pos:end="7:32"><name pos:start="7:15" pos:end="7:32"><name pos:start="7:15" pos:end="7:15">w</name><operator pos:start="7:16" pos:end="7:17">-&gt;</operator><name pos:start="7:18" pos:end="7:32">adaptation_sets</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:11">q</name></decl>;</decl_stmt>

    <enum pos:start="11:5" pos:end="11:55">enum <block pos:start="11:10" pos:end="11:48">{ <decl pos:start="11:12" pos:end="11:18"><name pos:start="11:12" pos:end="11:18">new_set</name></decl>, <decl pos:start="11:21" pos:end="11:29"><name pos:start="11:21" pos:end="11:29">parsed_id</name></decl>, <decl pos:start="11:32" pos:end="11:46"><name pos:start="11:32" pos:end="11:46">parsing_streams</name></decl> }</block> <decl pos:start="11:50" pos:end="11:54"><name pos:start="11:50" pos:end="11:54">state</name></decl>;</enum>

    <comment type="line" pos:start="13:5" pos:end="13:59">// syntax id=0,streams=0,1,2 id=1,streams=3,4 and so on</comment>

    <expr_stmt pos:start="15:5" pos:end="15:20"><expr pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:9">state</name> <operator pos:start="15:11" pos:end="15:11">=</operator> <name pos:start="15:13" pos:end="15:19">new_set</name></expr>;</expr_stmt>

    <while pos:start="17:5" pos:end="79:5">while <condition pos:start="17:11" pos:end="17:63">(<expr pos:start="17:12" pos:end="17:62"><name pos:start="17:12" pos:end="17:12">p</name> <operator pos:start="17:14" pos:end="17:14">&lt;</operator> <name pos:start="17:16" pos:end="17:33"><name pos:start="17:16" pos:end="17:16">w</name><operator pos:start="17:17" pos:end="17:18">-&gt;</operator><name pos:start="17:19" pos:end="17:33">adaptation_sets</name></name> <operator pos:start="17:35" pos:end="17:35">+</operator> <call pos:start="17:37" pos:end="17:62"><name pos:start="17:37" pos:end="17:42">strlen</name><argument_list pos:start="17:43" pos:end="17:62">(<argument pos:start="17:44" pos:end="17:61"><expr pos:start="17:44" pos:end="17:61"><name pos:start="17:44" pos:end="17:61"><name pos:start="17:44" pos:end="17:44">w</name><operator pos:start="17:45" pos:end="17:46">-&gt;</operator><name pos:start="17:47" pos:end="17:61">adaptation_sets</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:65" pos:end="79:5">{<block_content pos:start="19:9" pos:end="77:9">

        <if_stmt pos:start="19:9" pos:end="77:9"><if pos:start="19:9" pos:end="21:21">if <condition pos:start="19:12" pos:end="19:22">(<expr pos:start="19:13" pos:end="19:21"><operator pos:start="19:13" pos:end="19:13">*</operator><name pos:start="19:14" pos:end="19:14">p</name> <operator pos:start="19:16" pos:end="19:17">==</operator> <literal type="char" pos:start="19:19" pos:end="19:21">' '</literal></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:21"><block_content pos:start="21:13" pos:end="21:21">

            <continue pos:start="21:13" pos:end="21:21">continue;</continue></block_content></block></if>

        <if type="elseif" pos:start="23:9" pos:end="45:9">else if <condition pos:start="23:17" pos:end="23:59">(<expr pos:start="23:18" pos:end="23:58"><name pos:start="23:18" pos:end="23:22">state</name> <operator pos:start="23:24" pos:end="23:25">==</operator> <name pos:start="23:27" pos:end="23:33">new_set</name> <operator pos:start="23:35" pos:end="23:36">&amp;&amp;</operator> <operator pos:start="23:38" pos:end="23:38">!</operator><call pos:start="23:39" pos:end="23:58"><name pos:start="23:39" pos:end="23:45">strncmp</name><argument_list pos:start="23:46" pos:end="23:58">(<argument pos:start="23:47" pos:end="23:47"><expr pos:start="23:47" pos:end="23:47"><name pos:start="23:47" pos:end="23:47">p</name></expr></argument>, <argument pos:start="23:50" pos:end="23:54"><expr pos:start="23:50" pos:end="23:54"><literal type="string" pos:start="23:50" pos:end="23:54">"id="</literal></expr></argument>, <argument pos:start="23:57" pos:end="23:57"><expr pos:start="23:57" pos:end="23:57"><literal type="number" pos:start="23:57" pos:end="23:57">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:61" pos:end="45:9">{<block_content pos:start="25:13" pos:end="43:30">

            <expr_stmt pos:start="25:13" pos:end="25:67"><expr pos:start="25:13" pos:end="25:66"><name pos:start="25:13" pos:end="25:17"><name pos:start="25:13" pos:end="25:13">w</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:17">as</name></name> <operator pos:start="25:19" pos:end="25:19">=</operator> <call pos:start="25:21" pos:end="25:66"><name pos:start="25:21" pos:end="25:30">av_realloc</name><argument_list pos:start="25:31" pos:end="25:66">(<argument pos:start="25:32" pos:end="25:36"><expr pos:start="25:32" pos:end="25:36"><name pos:start="25:32" pos:end="25:36"><name pos:start="25:32" pos:end="25:32">w</name><operator pos:start="25:33" pos:end="25:34">-&gt;</operator><name pos:start="25:35" pos:end="25:36">as</name></name></expr></argument>, <argument pos:start="25:39" pos:end="25:65"><expr pos:start="25:39" pos:end="25:65"><sizeof pos:start="25:39" pos:end="25:52">sizeof<argument_list pos:start="25:45" pos:end="25:52">(<argument pos:start="25:46" pos:end="25:51"><expr pos:start="25:46" pos:end="25:51"><operator pos:start="25:46" pos:end="25:46">*</operator><name pos:start="25:47" pos:end="25:51"><name pos:start="25:47" pos:end="25:47">w</name><operator pos:start="25:48" pos:end="25:49">-&gt;</operator><name pos:start="25:50" pos:end="25:51">as</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="25:54" pos:end="25:54">*</operator> <operator pos:start="25:56" pos:end="25:57">++</operator><name pos:start="25:58" pos:end="25:65"><name pos:start="25:58" pos:end="25:58">w</name><operator pos:start="25:59" pos:end="25:60">-&gt;</operator><name pos:start="25:61" pos:end="25:65">nb_as</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="27:13" pos:end="27:41"><if pos:start="27:13" pos:end="27:41">if <condition pos:start="27:16" pos:end="27:30">(<expr pos:start="27:17" pos:end="27:29"><name pos:start="27:17" pos:end="27:21"><name pos:start="27:17" pos:end="27:17">w</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:21">as</name></name> <operator pos:start="27:23" pos:end="27:24">==</operator> <name pos:start="27:26" pos:end="27:29">NULL</name></expr>)</condition><block type="pseudo" pos:start="27:32" pos:end="27:41"><block_content pos:start="27:32" pos:end="27:41"> <return pos:start="27:32" pos:end="27:41">return <expr pos:start="27:39" pos:end="27:40"><operator pos:start="27:39" pos:end="27:39">-</operator><literal type="number" pos:start="27:40" pos:end="27:40">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:47"><expr pos:start="29:13" pos:end="29:46"><name pos:start="29:13" pos:end="29:31"><name pos:start="29:13" pos:end="29:13">w</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:17">as</name><index pos:start="29:18" pos:end="29:31">[<expr pos:start="29:19" pos:end="29:30"><name pos:start="29:19" pos:end="29:26"><name pos:start="29:19" pos:end="29:19">w</name><operator pos:start="29:20" pos:end="29:21">-&gt;</operator><name pos:start="29:22" pos:end="29:26">nb_as</name></name> <operator pos:start="29:28" pos:end="29:28">-</operator> <literal type="number" pos:start="29:30" pos:end="29:30">1</literal></expr>]</index></name><operator pos:start="29:32" pos:end="29:32">.</operator><name pos:start="29:33" pos:end="29:42">nb_streams</name> <operator pos:start="29:44" pos:end="29:44">=</operator> <literal type="number" pos:start="29:46" pos:end="29:46">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:47"><expr pos:start="31:13" pos:end="31:46"><name pos:start="31:13" pos:end="31:31"><name pos:start="31:13" pos:end="31:13">w</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:17">as</name><index pos:start="31:18" pos:end="31:31">[<expr pos:start="31:19" pos:end="31:30"><name pos:start="31:19" pos:end="31:26"><name pos:start="31:19" pos:end="31:19">w</name><operator pos:start="31:20" pos:end="31:21">-&gt;</operator><name pos:start="31:22" pos:end="31:26">nb_as</name></name> <operator pos:start="31:28" pos:end="31:28">-</operator> <literal type="number" pos:start="31:30" pos:end="31:30">1</literal></expr>]</index></name><operator pos:start="31:32" pos:end="31:32">.</operator><name pos:start="31:33" pos:end="31:39">streams</name> <operator pos:start="31:41" pos:end="31:41">=</operator> <name pos:start="31:43" pos:end="31:46">NULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:19"><expr pos:start="33:13" pos:end="33:18"><name pos:start="33:13" pos:end="33:13">p</name> <operator pos:start="33:15" pos:end="33:16">+=</operator> <literal type="number" pos:start="33:18" pos:end="33:18">3</literal></expr>;</expr_stmt> <comment type="line" pos:start="33:21" pos:end="33:36">// consume "id="</comment>

            <expr_stmt pos:start="35:13" pos:end="35:39"><expr pos:start="35:13" pos:end="35:38"><name pos:start="35:13" pos:end="35:13">q</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <name pos:start="35:17" pos:end="35:35"><name pos:start="35:17" pos:end="35:17">w</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:21">as</name><index pos:start="35:22" pos:end="35:35">[<expr pos:start="35:23" pos:end="35:34"><name pos:start="35:23" pos:end="35:30"><name pos:start="35:23" pos:end="35:23">w</name><operator pos:start="35:24" pos:end="35:25">-&gt;</operator><name pos:start="35:26" pos:end="35:30">nb_as</name></name> <operator pos:start="35:32" pos:end="35:32">-</operator> <literal type="number" pos:start="35:34" pos:end="35:34">1</literal></expr>]</index></name><operator pos:start="35:36" pos:end="35:36">.</operator><name pos:start="35:37" pos:end="35:38">id</name></expr>;</expr_stmt>

            <while pos:start="37:13" pos:end="37:42">while <condition pos:start="37:19" pos:end="37:29">(<expr pos:start="37:20" pos:end="37:28"><operator pos:start="37:20" pos:end="37:20">*</operator><name pos:start="37:21" pos:end="37:21">p</name> <operator pos:start="37:23" pos:end="37:24">!=</operator> <literal type="char" pos:start="37:26" pos:end="37:28">','</literal></expr>)</condition><block type="pseudo" pos:start="37:31" pos:end="37:42"><block_content pos:start="37:31" pos:end="37:42"> <expr_stmt pos:start="37:31" pos:end="37:42"><expr pos:start="37:31" pos:end="37:41"><operator pos:start="37:31" pos:end="37:31">*</operator><name pos:start="37:32" pos:end="37:32">q</name><operator pos:start="37:33" pos:end="37:34">++</operator> <operator pos:start="37:36" pos:end="37:36">=</operator> <operator pos:start="37:38" pos:end="37:38">*</operator><name pos:start="37:39" pos:end="37:39">p</name><operator pos:start="37:40" pos:end="37:41">++</operator></expr>;</expr_stmt></block_content></block></while>

            <expr_stmt pos:start="39:13" pos:end="39:19"><expr pos:start="39:13" pos:end="39:18"><operator pos:start="39:13" pos:end="39:13">*</operator><name pos:start="39:14" pos:end="39:14">q</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <literal type="number" pos:start="39:18" pos:end="39:18">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:16"><expr pos:start="41:13" pos:end="41:15"><name pos:start="41:13" pos:end="41:13">p</name><operator pos:start="41:14" pos:end="41:15">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:30"><expr pos:start="43:13" pos:end="43:29"><name pos:start="43:13" pos:end="43:17">state</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <name pos:start="43:21" pos:end="43:29">parsed_id</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="45:11" pos:end="51:9">else if <condition pos:start="45:19" pos:end="45:68">(<expr pos:start="45:20" pos:end="45:67"><name pos:start="45:20" pos:end="45:24">state</name> <operator pos:start="45:26" pos:end="45:27">==</operator> <name pos:start="45:29" pos:end="45:37">parsed_id</name> <operator pos:start="45:39" pos:end="45:40">&amp;&amp;</operator> <operator pos:start="45:42" pos:end="45:42">!</operator><call pos:start="45:43" pos:end="45:67"><name pos:start="45:43" pos:end="45:49">strncmp</name><argument_list pos:start="45:50" pos:end="45:67">(<argument pos:start="45:51" pos:end="45:51"><expr pos:start="45:51" pos:end="45:51"><name pos:start="45:51" pos:end="45:51">p</name></expr></argument>, <argument pos:start="45:54" pos:end="45:63"><expr pos:start="45:54" pos:end="45:63"><literal type="string" pos:start="45:54" pos:end="45:63">"streams="</literal></expr></argument>, <argument pos:start="45:66" pos:end="45:66"><expr pos:start="45:66" pos:end="45:66"><literal type="number" pos:start="45:66" pos:end="45:66">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:70" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:36">

            <expr_stmt pos:start="47:13" pos:end="47:19"><expr pos:start="47:13" pos:end="47:18"><name pos:start="47:13" pos:end="47:13">p</name> <operator pos:start="47:15" pos:end="47:16">+=</operator> <literal type="number" pos:start="47:18" pos:end="47:18">8</literal></expr>;</expr_stmt> <comment type="line" pos:start="47:21" pos:end="47:41">// consume "streams="</comment>

            <expr_stmt pos:start="49:13" pos:end="49:36"><expr pos:start="49:13" pos:end="49:35"><name pos:start="49:13" pos:end="49:17">state</name> <operator pos:start="49:19" pos:end="49:19">=</operator> <name pos:start="49:21" pos:end="49:35">parsing_streams</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="51:11" pos:end="73:9">else if <condition pos:start="51:19" pos:end="51:44">(<expr pos:start="51:20" pos:end="51:43"><name pos:start="51:20" pos:end="51:24">state</name> <operator pos:start="51:26" pos:end="51:27">==</operator> <name pos:start="51:29" pos:end="51:43">parsing_streams</name></expr>)</condition> <block pos:start="51:46" pos:end="73:9">{<block_content pos:start="53:13" pos:end="71:20">

            <decl_stmt pos:start="53:13" pos:end="53:60"><decl pos:start="53:13" pos:end="53:59"><type pos:start="53:13" pos:end="53:34"><name pos:start="53:13" pos:end="53:32"><name pos:start="53:13" pos:end="53:18">struct</name> <name pos:start="53:20" pos:end="53:32">AdaptationSet</name></name> <modifier pos:start="53:34" pos:end="53:34">*</modifier></type><name pos:start="53:35" pos:end="53:36">as</name> <init pos:start="53:38" pos:end="53:59">= <expr pos:start="53:40" pos:end="53:59"><operator pos:start="53:40" pos:end="53:40">&amp;</operator><name pos:start="53:41" pos:end="53:59"><name pos:start="53:41" pos:end="53:41">w</name><operator pos:start="53:42" pos:end="53:43">-&gt;</operator><name pos:start="53:44" pos:end="53:45">as</name><index pos:start="53:46" pos:end="53:59">[<expr pos:start="53:47" pos:end="53:58"><name pos:start="53:47" pos:end="53:54"><name pos:start="53:47" pos:end="53:47">w</name><operator pos:start="53:48" pos:end="53:49">-&gt;</operator><name pos:start="53:50" pos:end="53:54">nb_as</name></name> <operator pos:start="53:56" pos:end="53:56">-</operator> <literal type="number" pos:start="53:58" pos:end="53:58">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:18"><expr pos:start="55:13" pos:end="55:17"><name pos:start="55:13" pos:end="55:13">q</name> <operator pos:start="55:15" pos:end="55:15">=</operator> <name pos:start="55:17" pos:end="55:17">p</name></expr>;</expr_stmt>

            <while pos:start="57:13" pos:end="57:61">while <condition pos:start="57:19" pos:end="57:56">(<expr pos:start="57:20" pos:end="57:55"><operator pos:start="57:20" pos:end="57:20">*</operator><name pos:start="57:21" pos:end="57:21">q</name> <operator pos:start="57:23" pos:end="57:24">!=</operator> <literal type="char" pos:start="57:26" pos:end="57:29">'\0'</literal> <operator pos:start="57:31" pos:end="57:32">&amp;&amp;</operator> <operator pos:start="57:34" pos:end="57:34">*</operator><name pos:start="57:35" pos:end="57:35">q</name> <operator pos:start="57:37" pos:end="57:38">!=</operator> <literal type="char" pos:start="57:40" pos:end="57:42">','</literal> <operator pos:start="57:44" pos:end="57:45">&amp;&amp;</operator> <operator pos:start="57:47" pos:end="57:47">*</operator><name pos:start="57:48" pos:end="57:48">q</name> <operator pos:start="57:50" pos:end="57:51">!=</operator> <literal type="char" pos:start="57:53" pos:end="57:55">' '</literal></expr>)</condition><block type="pseudo" pos:start="57:58" pos:end="57:61"><block_content pos:start="57:58" pos:end="57:61"> <expr_stmt pos:start="57:58" pos:end="57:61"><expr pos:start="57:58" pos:end="57:60"><name pos:start="57:58" pos:end="57:58">q</name><operator pos:start="57:59" pos:end="57:60">++</operator></expr>;</expr_stmt></block_content></block></while>

            <expr_stmt pos:start="59:13" pos:end="59:91"><expr pos:start="59:13" pos:end="59:90"><name pos:start="59:13" pos:end="59:23"><name pos:start="59:13" pos:end="59:14">as</name><operator pos:start="59:15" pos:end="59:16">-&gt;</operator><name pos:start="59:17" pos:end="59:23">streams</name></name> <operator pos:start="59:25" pos:end="59:25">=</operator> <call pos:start="59:27" pos:end="59:90"><name pos:start="59:27" pos:end="59:36">av_realloc</name><argument_list pos:start="59:37" pos:end="59:90">(<argument pos:start="59:38" pos:end="59:48"><expr pos:start="59:38" pos:end="59:48"><name pos:start="59:38" pos:end="59:48"><name pos:start="59:38" pos:end="59:39">as</name><operator pos:start="59:40" pos:end="59:41">-&gt;</operator><name pos:start="59:42" pos:end="59:48">streams</name></name></expr></argument>, <argument pos:start="59:51" pos:end="59:89"><expr pos:start="59:51" pos:end="59:89"><sizeof pos:start="59:51" pos:end="59:70">sizeof<argument_list pos:start="59:57" pos:end="59:70">(<argument pos:start="59:58" pos:end="59:69"><expr pos:start="59:58" pos:end="59:69"><operator pos:start="59:58" pos:end="59:58">*</operator><name pos:start="59:59" pos:end="59:69"><name pos:start="59:59" pos:end="59:60">as</name><operator pos:start="59:61" pos:end="59:62">-&gt;</operator><name pos:start="59:63" pos:end="59:69">streams</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="59:72" pos:end="59:72">*</operator> <operator pos:start="59:74" pos:end="59:75">++</operator><name pos:start="59:76" pos:end="59:89"><name pos:start="59:76" pos:end="59:77">as</name><operator pos:start="59:78" pos:end="59:79">-&gt;</operator><name pos:start="59:80" pos:end="59:89">nb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="61:13" pos:end="61:47"><if pos:start="61:13" pos:end="61:47">if <condition pos:start="61:16" pos:end="61:36">(<expr pos:start="61:17" pos:end="61:35"><name pos:start="61:17" pos:end="61:27"><name pos:start="61:17" pos:end="61:18">as</name><operator pos:start="61:19" pos:end="61:20">-&gt;</operator><name pos:start="61:21" pos:end="61:27">streams</name></name> <operator pos:start="61:29" pos:end="61:30">==</operator> <name pos:start="61:32" pos:end="61:35">NULL</name></expr>)</condition><block type="pseudo" pos:start="61:38" pos:end="61:47"><block_content pos:start="61:38" pos:end="61:47"> <return pos:start="61:38" pos:end="61:47">return <expr pos:start="61:45" pos:end="61:46"><operator pos:start="61:45" pos:end="61:45">-</operator><literal type="number" pos:start="61:46" pos:end="61:46">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:67"><expr pos:start="63:13" pos:end="63:66"><name pos:start="63:13" pos:end="63:43"><name pos:start="63:13" pos:end="63:14">as</name><operator pos:start="63:15" pos:end="63:16">-&gt;</operator><name pos:start="63:17" pos:end="63:23">streams</name><index pos:start="63:24" pos:end="63:43">[<expr pos:start="63:25" pos:end="63:42"><name pos:start="63:25" pos:end="63:38"><name pos:start="63:25" pos:end="63:26">as</name><operator pos:start="63:27" pos:end="63:28">-&gt;</operator><name pos:start="63:29" pos:end="63:38">nb_streams</name></name> <operator pos:start="63:40" pos:end="63:40">-</operator> <literal type="number" pos:start="63:42" pos:end="63:42">1</literal></expr>]</index></name> <operator pos:start="63:45" pos:end="63:45">=</operator> <call pos:start="63:47" pos:end="63:66"><name pos:start="63:47" pos:end="63:56">to_integer</name><argument_list pos:start="63:57" pos:end="63:66">(<argument pos:start="63:58" pos:end="63:58"><expr pos:start="63:58" pos:end="63:58"><name pos:start="63:58" pos:end="63:58">p</name></expr></argument>, <argument pos:start="63:61" pos:end="63:65"><expr pos:start="63:61" pos:end="63:65"><name pos:start="63:61" pos:end="63:61">q</name> <operator pos:start="63:63" pos:end="63:63">-</operator> <name pos:start="63:65" pos:end="63:65">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="65:13" pos:end="65:63"><if pos:start="65:13" pos:end="65:63">if <condition pos:start="65:16" pos:end="65:52">(<expr pos:start="65:17" pos:end="65:51"><name pos:start="65:17" pos:end="65:47"><name pos:start="65:17" pos:end="65:18">as</name><operator pos:start="65:19" pos:end="65:20">-&gt;</operator><name pos:start="65:21" pos:end="65:27">streams</name><index pos:start="65:28" pos:end="65:47">[<expr pos:start="65:29" pos:end="65:46"><name pos:start="65:29" pos:end="65:42"><name pos:start="65:29" pos:end="65:30">as</name><operator pos:start="65:31" pos:end="65:32">-&gt;</operator><name pos:start="65:33" pos:end="65:42">nb_streams</name></name> <operator pos:start="65:44" pos:end="65:44">-</operator> <literal type="number" pos:start="65:46" pos:end="65:46">1</literal></expr>]</index></name> <operator pos:start="65:49" pos:end="65:49">&lt;</operator> <literal type="number" pos:start="65:51" pos:end="65:51">0</literal></expr>)</condition><block type="pseudo" pos:start="65:54" pos:end="65:63"><block_content pos:start="65:54" pos:end="65:63"> <return pos:start="65:54" pos:end="65:63">return <expr pos:start="65:61" pos:end="65:62"><operator pos:start="65:61" pos:end="65:61">-</operator><literal type="number" pos:start="65:62" pos:end="65:62">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="67:13" pos:end="67:34"><if pos:start="67:13" pos:end="67:34">if <condition pos:start="67:16" pos:end="67:27">(<expr pos:start="67:17" pos:end="67:26"><operator pos:start="67:17" pos:end="67:17">*</operator><name pos:start="67:18" pos:end="67:18">q</name> <operator pos:start="67:20" pos:end="67:21">==</operator> <literal type="char" pos:start="67:23" pos:end="67:26">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="67:29" pos:end="67:34"><block_content pos:start="67:29" pos:end="67:34"> <break pos:start="67:29" pos:end="67:34">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="69:13" pos:end="69:43"><if pos:start="69:13" pos:end="69:43">if <condition pos:start="69:16" pos:end="69:26">(<expr pos:start="69:17" pos:end="69:25"><operator pos:start="69:17" pos:end="69:17">*</operator><name pos:start="69:18" pos:end="69:18">q</name> <operator pos:start="69:20" pos:end="69:21">==</operator> <literal type="char" pos:start="69:23" pos:end="69:25">' '</literal></expr>)</condition><block type="pseudo" pos:start="69:28" pos:end="69:43"><block_content pos:start="69:28" pos:end="69:43"> <expr_stmt pos:start="69:28" pos:end="69:43"><expr pos:start="69:28" pos:end="69:42"><name pos:start="69:28" pos:end="69:32">state</name> <operator pos:start="69:34" pos:end="69:34">=</operator> <name pos:start="69:36" pos:end="69:42">new_set</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:20"><expr pos:start="71:13" pos:end="71:19"><name pos:start="71:13" pos:end="71:13">p</name> <operator pos:start="71:15" pos:end="71:15">=</operator> <operator pos:start="71:17" pos:end="71:18">++</operator><name pos:start="71:19" pos:end="71:19">q</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="73:11" pos:end="77:9">else <block pos:start="73:16" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:22">

            <return pos:start="75:13" pos:end="75:22">return <expr pos:start="75:20" pos:end="75:21"><operator pos:start="75:20" pos:end="75:20">-</operator><literal type="number" pos:start="75:21" pos:end="75:21">1</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>

    <return pos:start="81:5" pos:end="81:13">return <expr pos:start="81:12" pos:end="81:12"><literal type="number" pos:start="81:12" pos:end="81:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
