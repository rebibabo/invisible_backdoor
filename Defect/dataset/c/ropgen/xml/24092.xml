<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24092.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">find_image_format</name><parameter_list pos:start="1:29" pos:end="3:62">(<parameter pos:start="1:30" pos:end="1:49"><decl pos:start="1:30" pos:end="1:49"><type pos:start="1:30" pos:end="1:49"><name pos:start="1:30" pos:end="1:45">BlockDriverState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:49">bs</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:71"><decl pos:start="1:52" pos:end="1:71"><type pos:start="1:52" pos:end="1:71"><specifier pos:start="1:52" pos:end="1:56">const</specifier> <name pos:start="1:58" pos:end="1:61">char</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:71">filename</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:47"><decl pos:start="3:30" pos:end="3:47"><type pos:start="3:30" pos:end="3:47"><name pos:start="3:30" pos:end="3:40">BlockDriver</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier><modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:47">pdrv</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:61"><decl pos:start="3:50" pos:end="3:61"><type pos:start="3:50" pos:end="3:61"><name pos:start="3:50" pos:end="3:54">Error</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier><modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:61">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="59:1">{<block_content pos:start="7:5" pos:end="57:15">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">BlockDriver</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">drv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:37"><name pos:start="9:13" pos:end="9:15">buf</name><index pos:start="9:16" pos:end="9:37">[<expr pos:start="9:17" pos:end="9:36"><name pos:start="9:17" pos:end="9:36">BLOCK_PROBE_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name> <init pos:start="11:13" pos:end="11:15">= <expr pos:start="11:15" pos:end="11:15"><literal type="number" pos:start="11:15" pos:end="11:15">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:78">/* Return the raw BlockDriver * to scsi-generic devices or empty drives */</comment>

    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:67">(<expr pos:start="17:9" pos:end="17:66"><name pos:start="17:9" pos:end="17:14"><name pos:start="17:9" pos:end="17:10">bs</name><operator pos:start="17:11" pos:end="17:12">-&gt;</operator><name pos:start="17:13" pos:end="17:14">sg</name></name> <operator pos:start="17:16" pos:end="17:17">||</operator> <operator pos:start="17:19" pos:end="17:19">!</operator><call pos:start="17:20" pos:end="17:39"><name pos:start="17:20" pos:end="17:35">bdrv_is_inserted</name><argument_list pos:start="17:36" pos:end="17:39">(<argument pos:start="17:37" pos:end="17:38"><expr pos:start="17:37" pos:end="17:38"><name pos:start="17:37" pos:end="17:38">bs</name></expr></argument>)</argument_list></call> <operator pos:start="17:41" pos:end="17:42">||</operator> <call pos:start="17:44" pos:end="17:61"><name pos:start="17:44" pos:end="17:57">bdrv_getlength</name><argument_list pos:start="17:58" pos:end="17:61">(<argument pos:start="17:59" pos:end="17:60"><expr pos:start="17:59" pos:end="17:60"><name pos:start="17:59" pos:end="17:60">bs</name></expr></argument>)</argument_list></call> <operator pos:start="17:63" pos:end="17:64">==</operator> <literal type="number" pos:start="17:66" pos:end="17:66">0</literal></expr>)</condition> <block pos:start="17:69" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:19">

        <expr_stmt pos:start="19:9" pos:end="19:26"><expr pos:start="19:9" pos:end="19:25"><operator pos:start="19:9" pos:end="19:9">*</operator><name pos:start="19:10" pos:end="19:13">pdrv</name> <operator pos:start="19:15" pos:end="19:15">=</operator> <operator pos:start="19:17" pos:end="19:17">&amp;</operator><name pos:start="19:18" pos:end="19:25">bdrv_raw</name></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:19">return <expr pos:start="21:16" pos:end="21:18"><name pos:start="21:16" pos:end="21:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:46"><expr pos:start="27:5" pos:end="27:45"><name pos:start="27:5" pos:end="27:7">ret</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:45"><name pos:start="27:11" pos:end="27:20">bdrv_pread</name><argument_list pos:start="27:21" pos:end="27:45">(<argument pos:start="27:22" pos:end="27:23"><expr pos:start="27:22" pos:end="27:23"><name pos:start="27:22" pos:end="27:23">bs</name></expr></argument>, <argument pos:start="27:26" pos:end="27:26"><expr pos:start="27:26" pos:end="27:26"><literal type="number" pos:start="27:26" pos:end="27:26">0</literal></expr></argument>, <argument pos:start="27:29" pos:end="27:31"><expr pos:start="27:29" pos:end="27:31"><name pos:start="27:29" pos:end="27:31">buf</name></expr></argument>, <argument pos:start="27:34" pos:end="27:44"><expr pos:start="27:34" pos:end="27:44"><sizeof pos:start="27:34" pos:end="27:44">sizeof<argument_list pos:start="27:40" pos:end="27:44">(<argument pos:start="27:41" pos:end="27:43"><expr pos:start="27:41" pos:end="27:43"><name pos:start="27:41" pos:end="27:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="39:5"><if pos:start="29:5" pos:end="39:5">if <condition pos:start="29:8" pos:end="29:16">(<expr pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">&lt;</operator> <literal type="number" pos:start="29:15" pos:end="29:15">0</literal></expr>)</condition> <block pos:start="29:18" pos:end="39:5">{<block_content pos:start="31:9" pos:end="37:19">

        <expr_stmt pos:start="31:9" pos:end="33:35"><expr pos:start="31:9" pos:end="33:34"><call pos:start="31:9" pos:end="33:34"><name pos:start="31:9" pos:end="31:24">error_setg_errno</name><argument_list pos:start="31:25" pos:end="33:34">(<argument pos:start="31:26" pos:end="31:29"><expr pos:start="31:26" pos:end="31:29"><name pos:start="31:26" pos:end="31:29">errp</name></expr></argument>, <argument pos:start="31:32" pos:end="31:35"><expr pos:start="31:32" pos:end="31:35"><operator pos:start="31:32" pos:end="31:32">-</operator><name pos:start="31:33" pos:end="31:35">ret</name></expr></argument>, <argument pos:start="31:38" pos:end="33:33"><expr pos:start="31:38" pos:end="33:33"><literal type="string" pos:start="31:38" pos:end="31:80">"Could not read image for determining its "</literal>

                         <literal type="string" pos:start="33:26" pos:end="33:33">"format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:21"><expr pos:start="35:9" pos:end="35:20"><operator pos:start="35:9" pos:end="35:9">*</operator><name pos:start="35:10" pos:end="35:13">pdrv</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <name pos:start="35:17" pos:end="35:20">NULL</name></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:19">return <expr pos:start="37:16" pos:end="37:18"><name pos:start="37:16" pos:end="37:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:45"><expr pos:start="43:5" pos:end="43:44"><name pos:start="43:5" pos:end="43:7">drv</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <call pos:start="43:11" pos:end="43:44"><name pos:start="43:11" pos:end="43:24">bdrv_probe_all</name><argument_list pos:start="43:25" pos:end="43:44">(<argument pos:start="43:26" pos:end="43:28"><expr pos:start="43:26" pos:end="43:28"><name pos:start="43:26" pos:end="43:28">buf</name></expr></argument>, <argument pos:start="43:31" pos:end="43:33"><expr pos:start="43:31" pos:end="43:33"><name pos:start="43:31" pos:end="43:33">ret</name></expr></argument>, <argument pos:start="43:36" pos:end="43:43"><expr pos:start="43:36" pos:end="43:43"><name pos:start="43:36" pos:end="43:43">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="53:5"><if pos:start="45:5" pos:end="53:5">if <condition pos:start="45:8" pos:end="45:13">(<expr pos:start="45:9" pos:end="45:12"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:12">drv</name></expr>)</condition> <block pos:start="45:15" pos:end="53:5">{<block_content pos:start="47:9" pos:end="51:22">

        <expr_stmt pos:start="47:9" pos:end="49:35"><expr pos:start="47:9" pos:end="49:34"><call pos:start="47:9" pos:end="49:34"><name pos:start="47:9" pos:end="47:18">error_setg</name><argument_list pos:start="47:19" pos:end="49:34">(<argument pos:start="47:20" pos:end="47:23"><expr pos:start="47:20" pos:end="47:23"><name pos:start="47:20" pos:end="47:23">errp</name></expr></argument>, <argument pos:start="47:26" pos:end="49:33"><expr pos:start="47:26" pos:end="49:33"><literal type="string" pos:start="47:26" pos:end="47:75">"Could not determine image format: No compatible "</literal>

                   <literal type="string" pos:start="49:20" pos:end="49:33">"driver found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:22"><expr pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:11">ret</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <operator pos:start="51:15" pos:end="51:15">-</operator><name pos:start="51:16" pos:end="51:21">ENOENT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:16"><expr pos:start="55:5" pos:end="55:15"><operator pos:start="55:5" pos:end="55:5">*</operator><name pos:start="55:6" pos:end="55:9">pdrv</name> <operator pos:start="55:11" pos:end="55:11">=</operator> <name pos:start="55:13" pos:end="55:15">drv</name></expr>;</expr_stmt>

    <return pos:start="57:5" pos:end="57:15">return <expr pos:start="57:12" pos:end="57:14"><name pos:start="57:12" pos:end="57:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
