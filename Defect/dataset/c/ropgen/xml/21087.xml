<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21087.c" pos:tabs="8"><function pos:start="1:1" pos:end="179:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:44">bdrv_aligned_pwritev</name><parameter_list pos:start="1:45" pos:end="5:49">(<parameter pos:start="1:46" pos:end="1:65"><decl pos:start="1:46" pos:end="1:65"><type pos:start="1:46" pos:end="1:65"><name pos:start="1:46" pos:end="1:61">BlockDriverState</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:65">bs</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:27"><decl pos:start="3:5" pos:end="3:27"><type pos:start="3:5" pos:end="3:27"><name pos:start="3:5" pos:end="3:22">BdrvTrackedRequest</name> <modifier pos:start="3:24" pos:end="3:24">*</modifier></type><name pos:start="3:25" pos:end="3:27">req</name></decl></parameter>, <parameter pos:start="3:30" pos:end="3:43"><decl pos:start="3:30" pos:end="3:43"><type pos:start="3:30" pos:end="3:43"><name pos:start="3:30" pos:end="3:36">int64_t</name></type> <name pos:start="3:38" pos:end="3:43">offset</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:63"><decl pos:start="3:46" pos:end="3:63"><type pos:start="3:46" pos:end="3:63"><name pos:start="3:46" pos:end="3:53">unsigned</name> <name pos:start="3:55" pos:end="3:57">int</name></type> <name pos:start="3:59" pos:end="3:63">bytes</name></decl></parameter>,

    <parameter pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:17">align</name></decl></parameter>, <parameter pos:start="5:20" pos:end="5:37"><decl pos:start="5:20" pos:end="5:37"><type pos:start="5:20" pos:end="5:37"><name pos:start="5:20" pos:end="5:31">QEMUIOVector</name> <modifier pos:start="5:33" pos:end="5:33">*</modifier></type><name pos:start="5:34" pos:end="5:37">qiov</name></decl></parameter>, <parameter pos:start="5:40" pos:end="5:48"><decl pos:start="5:40" pos:end="5:48"><type pos:start="5:40" pos:end="5:48"><name pos:start="5:40" pos:end="5:42">int</name></type> <name pos:start="5:44" pos:end="5:48">flags</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="179:1">{<block_content pos:start="9:5" pos:end="177:15">

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">BlockDriver</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">drv</name> <init pos:start="9:22" pos:end="9:30">= <expr pos:start="9:24" pos:end="9:30"><name pos:start="9:24" pos:end="9:30"><name pos:start="9:24" pos:end="9:25">bs</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:30">drv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:15">waited</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:54"><decl pos:start="17:5" pos:end="17:53"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:24">start_sector</name> <init pos:start="17:26" pos:end="17:53">= <expr pos:start="17:28" pos:end="17:53"><name pos:start="17:28" pos:end="17:33">offset</name> <operator pos:start="17:35" pos:end="17:36">&gt;&gt;</operator> <name pos:start="17:38" pos:end="17:53">BDRV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:72"><decl pos:start="19:5" pos:end="19:71"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">int64_t</name></type> <name pos:start="19:13" pos:end="19:22">end_sector</name> <init pos:start="19:24" pos:end="19:71">= <expr pos:start="19:26" pos:end="19:71"><call pos:start="19:26" pos:end="19:71"><name pos:start="19:26" pos:end="19:37">DIV_ROUND_UP</name><argument_list pos:start="19:38" pos:end="19:71">(<argument pos:start="19:39" pos:end="19:52"><expr pos:start="19:39" pos:end="19:52"><name pos:start="19:39" pos:end="19:44">offset</name> <operator pos:start="19:46" pos:end="19:46">+</operator> <name pos:start="19:48" pos:end="19:52">bytes</name></expr></argument>, <argument pos:start="19:55" pos:end="19:70"><expr pos:start="19:55" pos:end="19:70"><name pos:start="19:55" pos:end="19:70">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:37"><decl pos:start="21:5" pos:end="21:36"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:28">bytes_remaining</name> <init pos:start="21:30" pos:end="21:36">= <expr pos:start="21:32" pos:end="21:36"><name pos:start="21:32" pos:end="21:36">bytes</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:20">max_transfer</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:33"><expr pos:start="27:5" pos:end="27:32"><call pos:start="27:5" pos:end="27:32"><name pos:start="27:5" pos:end="27:10">assert</name><argument_list pos:start="27:11" pos:end="27:32">(<argument pos:start="27:12" pos:end="27:31"><expr pos:start="27:12" pos:end="27:31"><call pos:start="27:12" pos:end="27:31"><name pos:start="27:12" pos:end="27:24">is_power_of_2</name><argument_list pos:start="27:25" pos:end="27:31">(<argument pos:start="27:26" pos:end="27:30"><expr pos:start="27:26" pos:end="27:30"><name pos:start="27:26" pos:end="27:30">align</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:40"><expr pos:start="29:5" pos:end="29:39"><call pos:start="29:5" pos:end="29:39"><name pos:start="29:5" pos:end="29:10">assert</name><argument_list pos:start="29:11" pos:end="29:39">(<argument pos:start="29:12" pos:end="29:38"><expr pos:start="29:12" pos:end="29:38"><operator pos:start="29:12" pos:end="29:12">(</operator><name pos:start="29:13" pos:end="29:18">offset</name> <operator pos:start="29:20" pos:end="29:20">&amp;</operator> <operator pos:start="29:22" pos:end="29:22">(</operator><name pos:start="29:23" pos:end="29:27">align</name> <operator pos:start="29:29" pos:end="29:29">-</operator> <literal type="number" pos:start="29:31" pos:end="29:31">1</literal><operator pos:start="29:32" pos:end="29:32">)</operator><operator pos:start="29:33" pos:end="29:33">)</operator> <operator pos:start="29:35" pos:end="29:36">==</operator> <literal type="number" pos:start="29:38" pos:end="29:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:39"><expr pos:start="31:5" pos:end="31:38"><call pos:start="31:5" pos:end="31:38"><name pos:start="31:5" pos:end="31:10">assert</name><argument_list pos:start="31:11" pos:end="31:38">(<argument pos:start="31:12" pos:end="31:37"><expr pos:start="31:12" pos:end="31:37"><operator pos:start="31:12" pos:end="31:12">(</operator><name pos:start="31:13" pos:end="31:17">bytes</name> <operator pos:start="31:19" pos:end="31:19">&amp;</operator> <operator pos:start="31:21" pos:end="31:21">(</operator><name pos:start="31:22" pos:end="31:26">align</name> <operator pos:start="31:28" pos:end="31:28">-</operator> <literal type="number" pos:start="31:30" pos:end="31:30">1</literal><operator pos:start="31:31" pos:end="31:31">)</operator><operator pos:start="31:32" pos:end="31:32">)</operator> <operator pos:start="31:34" pos:end="31:35">==</operator> <literal type="number" pos:start="31:37" pos:end="31:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:41"><expr pos:start="33:5" pos:end="33:40"><call pos:start="33:5" pos:end="33:40"><name pos:start="33:5" pos:end="33:10">assert</name><argument_list pos:start="33:11" pos:end="33:40">(<argument pos:start="33:12" pos:end="33:39"><expr pos:start="33:12" pos:end="33:39"><operator pos:start="33:12" pos:end="33:12">!</operator><name pos:start="33:13" pos:end="33:16">qiov</name> <operator pos:start="33:18" pos:end="33:19">||</operator> <name pos:start="33:21" pos:end="33:25">bytes</name> <operator pos:start="33:27" pos:end="33:28">==</operator> <name pos:start="33:30" pos:end="33:39"><name pos:start="33:30" pos:end="33:33">qiov</name><operator pos:start="33:34" pos:end="33:35">-&gt;</operator><name pos:start="33:36" pos:end="33:39">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:49"><expr pos:start="35:5" pos:end="35:48"><call pos:start="35:5" pos:end="35:48"><name pos:start="35:5" pos:end="35:10">assert</name><argument_list pos:start="35:11" pos:end="35:48">(<argument pos:start="35:12" pos:end="35:47"><expr pos:start="35:12" pos:end="35:47"><operator pos:start="35:12" pos:end="35:12">(</operator><name pos:start="35:13" pos:end="35:26"><name pos:start="35:13" pos:end="35:14">bs</name><operator pos:start="35:15" pos:end="35:16">-&gt;</operator><name pos:start="35:17" pos:end="35:26">open_flags</name></name> <operator pos:start="35:28" pos:end="35:28">&amp;</operator> <name pos:start="35:30" pos:end="35:41">BDRV_O_NO_IO</name><operator pos:start="35:42" pos:end="35:42">)</operator> <operator pos:start="35:44" pos:end="35:45">==</operator> <literal type="number" pos:start="35:47" pos:end="35:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:38"><expr pos:start="37:5" pos:end="37:37"><call pos:start="37:5" pos:end="37:37"><name pos:start="37:5" pos:end="37:10">assert</name><argument_list pos:start="37:11" pos:end="37:37">(<argument pos:start="37:12" pos:end="37:36"><expr pos:start="37:12" pos:end="37:36"><operator pos:start="37:12" pos:end="37:12">!</operator><operator pos:start="37:13" pos:end="37:13">(</operator><name pos:start="37:14" pos:end="37:18">flags</name> <operator pos:start="37:20" pos:end="37:20">&amp;</operator> <operator pos:start="37:22" pos:end="37:22">~</operator><name pos:start="37:23" pos:end="37:35">BDRV_REQ_MASK</name><operator pos:start="37:36" pos:end="37:36">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="41:42"><expr pos:start="39:5" pos:end="41:41"><name pos:start="39:5" pos:end="39:16">max_transfer</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <call pos:start="39:20" pos:end="41:41"><name pos:start="39:20" pos:end="39:34">QEMU_ALIGN_DOWN</name><argument_list pos:start="39:35" pos:end="41:41">(<argument pos:start="39:36" pos:end="39:77"><expr pos:start="39:36" pos:end="39:77"><call pos:start="39:36" pos:end="39:77"><name pos:start="39:36" pos:end="39:47">MIN_NON_ZERO</name><argument_list pos:start="39:48" pos:end="39:77">(<argument pos:start="39:49" pos:end="39:67"><expr pos:start="39:49" pos:end="39:67"><name pos:start="39:49" pos:end="39:67"><name pos:start="39:49" pos:end="39:50">bs</name><operator pos:start="39:51" pos:end="39:52">-&gt;</operator><name pos:start="39:53" pos:end="39:54">bl</name><operator pos:start="39:55" pos:end="39:55">.</operator><name pos:start="39:56" pos:end="39:67">max_transfer</name></name></expr></argument>, <argument pos:start="39:70" pos:end="39:76"><expr pos:start="39:70" pos:end="39:76"><name pos:start="39:70" pos:end="39:76">INT_MAX</name></expr></argument>)</argument_list></call></expr></argument>,

                                   <argument pos:start="41:36" pos:end="41:40"><expr pos:start="41:36" pos:end="41:40"><name pos:start="41:36" pos:end="41:40">align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:44"><expr pos:start="45:5" pos:end="45:43"><name pos:start="45:5" pos:end="45:10">waited</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <call pos:start="45:14" pos:end="45:43"><name pos:start="45:14" pos:end="45:38">wait_serialising_requests</name><argument_list pos:start="45:39" pos:end="45:43">(<argument pos:start="45:40" pos:end="45:42"><expr pos:start="45:40" pos:end="45:42"><name pos:start="45:40" pos:end="45:42">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:41"><expr pos:start="47:5" pos:end="47:40"><call pos:start="47:5" pos:end="47:40"><name pos:start="47:5" pos:end="47:10">assert</name><argument_list pos:start="47:11" pos:end="47:40">(<argument pos:start="47:12" pos:end="47:39"><expr pos:start="47:12" pos:end="47:39"><operator pos:start="47:12" pos:end="47:12">!</operator><name pos:start="47:13" pos:end="47:18">waited</name> <operator pos:start="47:20" pos:end="47:21">||</operator> <operator pos:start="47:23" pos:end="47:23">!</operator><name pos:start="47:24" pos:end="47:39"><name pos:start="47:24" pos:end="47:26">req</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:39">serialising</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:42"><expr pos:start="49:5" pos:end="49:41"><call pos:start="49:5" pos:end="49:41"><name pos:start="49:5" pos:end="49:10">assert</name><argument_list pos:start="49:11" pos:end="49:41">(<argument pos:start="49:12" pos:end="49:40"><expr pos:start="49:12" pos:end="49:40"><name pos:start="49:12" pos:end="49:30"><name pos:start="49:12" pos:end="49:14">req</name><operator pos:start="49:15" pos:end="49:16">-&gt;</operator><name pos:start="49:17" pos:end="49:30">overlap_offset</name></name> <operator pos:start="49:32" pos:end="49:33">&lt;=</operator> <name pos:start="49:35" pos:end="49:40">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:71"><expr pos:start="51:5" pos:end="51:70"><call pos:start="51:5" pos:end="51:70"><name pos:start="51:5" pos:end="51:10">assert</name><argument_list pos:start="51:11" pos:end="51:70">(<argument pos:start="51:12" pos:end="51:69"><expr pos:start="51:12" pos:end="51:69"><name pos:start="51:12" pos:end="51:17">offset</name> <operator pos:start="51:19" pos:end="51:19">+</operator> <name pos:start="51:21" pos:end="51:25">bytes</name> <operator pos:start="51:27" pos:end="51:28">&lt;=</operator> <name pos:start="51:30" pos:end="51:48"><name pos:start="51:30" pos:end="51:32">req</name><operator pos:start="51:33" pos:end="51:34">-&gt;</operator><name pos:start="51:35" pos:end="51:48">overlap_offset</name></name> <operator pos:start="51:50" pos:end="51:50">+</operator> <name pos:start="51:52" pos:end="51:69"><name pos:start="51:52" pos:end="51:54">req</name><operator pos:start="51:55" pos:end="51:56">-&gt;</operator><name pos:start="51:57" pos:end="51:69">overlap_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:77"><expr pos:start="55:5" pos:end="55:76"><name pos:start="55:5" pos:end="55:7">ret</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="55:76"><name pos:start="55:11" pos:end="55:42">notifier_with_return_list_notify</name><argument_list pos:start="55:43" pos:end="55:76">(<argument pos:start="55:44" pos:end="55:70"><expr pos:start="55:44" pos:end="55:70"><operator pos:start="55:44" pos:end="55:44">&amp;</operator><name pos:start="55:45" pos:end="55:70"><name pos:start="55:45" pos:end="55:46">bs</name><operator pos:start="55:47" pos:end="55:48">-&gt;</operator><name pos:start="55:49" pos:end="55:70">before_write_notifiers</name></name></expr></argument>, <argument pos:start="55:73" pos:end="55:75"><expr pos:start="55:73" pos:end="55:75"><name pos:start="55:73" pos:end="55:75">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="59:5" pos:end="73:5"><if pos:start="59:5" pos:end="73:5">if <condition pos:start="59:8" pos:end="63:33">(<expr pos:start="59:9" pos:end="63:32"><operator pos:start="59:9" pos:end="59:9">!</operator><name pos:start="59:10" pos:end="59:12">ret</name> <operator pos:start="59:14" pos:end="59:15">&amp;&amp;</operator> <name pos:start="59:17" pos:end="59:33"><name pos:start="59:17" pos:end="59:18">bs</name><operator pos:start="59:19" pos:end="59:20">-&gt;</operator><name pos:start="59:21" pos:end="59:33">detect_zeroes</name></name> <operator pos:start="59:35" pos:end="59:36">!=</operator> <name pos:start="59:38" pos:end="59:71">BLOCKDEV_DETECT_ZEROES_OPTIONS_OFF</name> <operator pos:start="59:73" pos:end="59:74">&amp;&amp;</operator>

        <operator pos:start="61:9" pos:end="61:9">!</operator><operator pos:start="61:10" pos:end="61:10">(</operator><name pos:start="61:11" pos:end="61:15">flags</name> <operator pos:start="61:17" pos:end="61:17">&amp;</operator> <name pos:start="61:19" pos:end="61:37">BDRV_REQ_ZERO_WRITE</name><operator pos:start="61:38" pos:end="61:38">)</operator> <operator pos:start="61:40" pos:end="61:41">&amp;&amp;</operator> <name pos:start="61:43" pos:end="61:68"><name pos:start="61:43" pos:end="61:45">drv</name><operator pos:start="61:46" pos:end="61:47">-&gt;</operator><name pos:start="61:48" pos:end="61:68">bdrv_co_pwrite_zeroes</name></name> <operator pos:start="61:70" pos:end="61:71">&amp;&amp;</operator>

        <call pos:start="63:9" pos:end="63:32"><name pos:start="63:9" pos:end="63:26">qemu_iovec_is_zero</name><argument_list pos:start="63:27" pos:end="63:32">(<argument pos:start="63:28" pos:end="63:31"><expr pos:start="63:28" pos:end="63:31"><name pos:start="63:28" pos:end="63:31">qiov</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:35" pos:end="73:5">{<block_content pos:start="65:9" pos:end="71:9">

        <expr_stmt pos:start="65:9" pos:end="65:37"><expr pos:start="65:9" pos:end="65:36"><name pos:start="65:9" pos:end="65:13">flags</name> <operator pos:start="65:15" pos:end="65:16">|=</operator> <name pos:start="65:18" pos:end="65:36">BDRV_REQ_ZERO_WRITE</name></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="71:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:70">(<expr pos:start="67:13" pos:end="67:69"><name pos:start="67:13" pos:end="67:29"><name pos:start="67:13" pos:end="67:14">bs</name><operator pos:start="67:15" pos:end="67:16">-&gt;</operator><name pos:start="67:17" pos:end="67:29">detect_zeroes</name></name> <operator pos:start="67:31" pos:end="67:32">==</operator> <name pos:start="67:34" pos:end="67:69">BLOCKDEV_DETECT_ZEROES_OPTIONS_UNMAP</name></expr>)</condition> <block pos:start="67:72" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:40">

            <expr_stmt pos:start="69:13" pos:end="69:40"><expr pos:start="69:13" pos:end="69:39"><name pos:start="69:13" pos:end="69:17">flags</name> <operator pos:start="69:19" pos:end="69:20">|=</operator> <name pos:start="69:22" pos:end="69:39">BDRV_REQ_MAY_UNMAP</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="77:5" pos:end="147:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:16">(<expr pos:start="77:9" pos:end="77:15"><name pos:start="77:9" pos:end="77:11">ret</name> <operator pos:start="77:13" pos:end="77:13">&lt;</operator> <literal type="number" pos:start="77:15" pos:end="77:15">0</literal></expr>)</condition> <block pos:start="77:18" pos:end="81:5">{<block_content>

        <comment type="block" pos:start="79:9" pos:end="79:69">/* Do nothing, write notifier decided to fail this request */</comment>

    </block_content>}</block></if> <if type="elseif" pos:start="81:7" pos:end="87:5">else if <condition pos:start="81:15" pos:end="81:43">(<expr pos:start="81:16" pos:end="81:42"><name pos:start="81:16" pos:end="81:20">flags</name> <operator pos:start="81:22" pos:end="81:22">&amp;</operator> <name pos:start="81:24" pos:end="81:42">BDRV_REQ_ZERO_WRITE</name></expr>)</condition> <block pos:start="81:45" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:65">

        <expr_stmt pos:start="83:9" pos:end="83:50"><expr pos:start="83:9" pos:end="83:49"><call pos:start="83:9" pos:end="83:49"><name pos:start="83:9" pos:end="83:24">bdrv_debug_event</name><argument_list pos:start="83:25" pos:end="83:49">(<argument pos:start="83:26" pos:end="83:27"><expr pos:start="83:26" pos:end="83:27"><name pos:start="83:26" pos:end="83:27">bs</name></expr></argument>, <argument pos:start="83:30" pos:end="83:48"><expr pos:start="83:30" pos:end="83:48"><name pos:start="83:30" pos:end="83:48">BLKDBG_PWRITEV_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:65"><expr pos:start="85:9" pos:end="85:64"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <call pos:start="85:15" pos:end="85:64"><name pos:start="85:15" pos:end="85:38">bdrv_co_do_pwrite_zeroes</name><argument_list pos:start="85:39" pos:end="85:64">(<argument pos:start="85:40" pos:end="85:41"><expr pos:start="85:40" pos:end="85:41"><name pos:start="85:40" pos:end="85:41">bs</name></expr></argument>, <argument pos:start="85:44" pos:end="85:49"><expr pos:start="85:44" pos:end="85:49"><name pos:start="85:44" pos:end="85:49">offset</name></expr></argument>, <argument pos:start="85:52" pos:end="85:56"><expr pos:start="85:52" pos:end="85:56"><name pos:start="85:52" pos:end="85:56">bytes</name></expr></argument>, <argument pos:start="85:59" pos:end="85:63"><expr pos:start="85:59" pos:end="85:63"><name pos:start="85:59" pos:end="85:63">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="87:7" pos:end="91:5">else if <condition pos:start="87:15" pos:end="87:49">(<expr pos:start="87:16" pos:end="87:48"><name pos:start="87:16" pos:end="87:20">flags</name> <operator pos:start="87:22" pos:end="87:22">&amp;</operator> <name pos:start="87:24" pos:end="87:48">BDRV_REQ_WRITE_COMPRESSED</name></expr>)</condition> <block pos:start="87:51" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:70">

        <expr_stmt pos:start="89:9" pos:end="89:70"><expr pos:start="89:9" pos:end="89:69"><name pos:start="89:9" pos:end="89:11">ret</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <call pos:start="89:15" pos:end="89:69"><name pos:start="89:15" pos:end="89:44">bdrv_driver_pwritev_compressed</name><argument_list pos:start="89:45" pos:end="89:69">(<argument pos:start="89:46" pos:end="89:47"><expr pos:start="89:46" pos:end="89:47"><name pos:start="89:46" pos:end="89:47">bs</name></expr></argument>, <argument pos:start="89:50" pos:end="89:55"><expr pos:start="89:50" pos:end="89:55"><name pos:start="89:50" pos:end="89:55">offset</name></expr></argument>, <argument pos:start="89:58" pos:end="89:62"><expr pos:start="89:58" pos:end="89:62"><name pos:start="89:58" pos:end="89:62">bytes</name></expr></argument>, <argument pos:start="89:65" pos:end="89:68"><expr pos:start="89:65" pos:end="89:68"><name pos:start="89:65" pos:end="89:68">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="91:7" pos:end="97:5">else if <condition pos:start="91:15" pos:end="91:37">(<expr pos:start="91:16" pos:end="91:36"><name pos:start="91:16" pos:end="91:20">bytes</name> <operator pos:start="91:22" pos:end="91:23">&lt;=</operator> <name pos:start="91:25" pos:end="91:36">max_transfer</name></expr>)</condition> <block pos:start="91:39" pos:end="97:5">{<block_content pos:start="93:9" pos:end="95:66">

        <expr_stmt pos:start="93:9" pos:end="93:45"><expr pos:start="93:9" pos:end="93:44"><call pos:start="93:9" pos:end="93:44"><name pos:start="93:9" pos:end="93:24">bdrv_debug_event</name><argument_list pos:start="93:25" pos:end="93:44">(<argument pos:start="93:26" pos:end="93:27"><expr pos:start="93:26" pos:end="93:27"><name pos:start="93:26" pos:end="93:27">bs</name></expr></argument>, <argument pos:start="93:30" pos:end="93:43"><expr pos:start="93:30" pos:end="93:43"><name pos:start="93:30" pos:end="93:43">BLKDBG_PWRITEV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:66"><expr pos:start="95:9" pos:end="95:65"><name pos:start="95:9" pos:end="95:11">ret</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <call pos:start="95:15" pos:end="95:65"><name pos:start="95:15" pos:end="95:33">bdrv_driver_pwritev</name><argument_list pos:start="95:34" pos:end="95:65">(<argument pos:start="95:35" pos:end="95:36"><expr pos:start="95:35" pos:end="95:36"><name pos:start="95:35" pos:end="95:36">bs</name></expr></argument>, <argument pos:start="95:39" pos:end="95:44"><expr pos:start="95:39" pos:end="95:44"><name pos:start="95:39" pos:end="95:44">offset</name></expr></argument>, <argument pos:start="95:47" pos:end="95:51"><expr pos:start="95:47" pos:end="95:51"><name pos:start="95:47" pos:end="95:51">bytes</name></expr></argument>, <argument pos:start="95:54" pos:end="95:57"><expr pos:start="95:54" pos:end="95:57"><name pos:start="95:54" pos:end="95:57">qiov</name></expr></argument>, <argument pos:start="95:60" pos:end="95:64"><expr pos:start="95:60" pos:end="95:64"><name pos:start="95:60" pos:end="95:64">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="97:7" pos:end="147:5">else <block pos:start="97:12" pos:end="147:5">{<block_content pos:start="99:9" pos:end="145:9">

        <expr_stmt pos:start="99:9" pos:end="99:45"><expr pos:start="99:9" pos:end="99:44"><call pos:start="99:9" pos:end="99:44"><name pos:start="99:9" pos:end="99:24">bdrv_debug_event</name><argument_list pos:start="99:25" pos:end="99:44">(<argument pos:start="99:26" pos:end="99:27"><expr pos:start="99:26" pos:end="99:27"><name pos:start="99:26" pos:end="99:27">bs</name></expr></argument>, <argument pos:start="99:30" pos:end="99:43"><expr pos:start="99:30" pos:end="99:43"><name pos:start="99:30" pos:end="99:43">BLKDBG_PWRITEV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while pos:start="101:9" pos:end="145:9">while <condition pos:start="101:15" pos:end="101:31">(<expr pos:start="101:16" pos:end="101:30"><name pos:start="101:16" pos:end="101:30">bytes_remaining</name></expr>)</condition> <block pos:start="101:33" pos:end="145:9">{<block_content pos:start="103:13" pos:end="143:35">

            <decl_stmt pos:start="103:13" pos:end="103:57"><decl pos:start="103:13" pos:end="103:56"><type pos:start="103:13" pos:end="103:15"><name pos:start="103:13" pos:end="103:15">int</name></type> <name pos:start="103:17" pos:end="103:19">num</name> <init pos:start="103:21" pos:end="103:56">= <expr pos:start="103:23" pos:end="103:56"><call pos:start="103:23" pos:end="103:56"><name pos:start="103:23" pos:end="103:25">MIN</name><argument_list pos:start="103:26" pos:end="103:56">(<argument pos:start="103:27" pos:end="103:41"><expr pos:start="103:27" pos:end="103:41"><name pos:start="103:27" pos:end="103:41">bytes_remaining</name></expr></argument>, <argument pos:start="103:44" pos:end="103:55"><expr pos:start="103:44" pos:end="103:55"><name pos:start="103:44" pos:end="103:55">max_transfer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="105:13" pos:end="105:36"><decl pos:start="105:13" pos:end="105:35"><type pos:start="105:13" pos:end="105:24"><name pos:start="105:13" pos:end="105:24">QEMUIOVector</name></type> <name pos:start="105:26" pos:end="105:35">local_qiov</name></decl>;</decl_stmt>

            <decl_stmt pos:start="107:13" pos:end="107:36"><decl pos:start="107:13" pos:end="107:35"><type pos:start="107:13" pos:end="107:15"><name pos:start="107:13" pos:end="107:15">int</name></type> <name pos:start="107:17" pos:end="107:27">local_flags</name> <init pos:start="107:29" pos:end="107:35">= <expr pos:start="107:31" pos:end="107:35"><name pos:start="107:31" pos:end="107:35">flags</name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="111:13" pos:end="111:24"><expr pos:start="111:13" pos:end="111:23"><call pos:start="111:13" pos:end="111:23"><name pos:start="111:13" pos:end="111:18">assert</name><argument_list pos:start="111:19" pos:end="111:23">(<argument pos:start="111:20" pos:end="111:22"><expr pos:start="111:20" pos:end="111:22"><name pos:start="111:20" pos:end="111:22">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="113:13" pos:end="123:13"><if pos:start="113:13" pos:end="123:13">if <condition pos:start="113:16" pos:end="115:60">(<expr pos:start="113:17" pos:end="115:59"><name pos:start="113:17" pos:end="113:19">num</name> <operator pos:start="113:21" pos:end="113:21">&lt;</operator> <name pos:start="113:23" pos:end="113:37">bytes_remaining</name> <operator pos:start="113:39" pos:end="113:40">&amp;&amp;</operator> <operator pos:start="113:42" pos:end="113:42">(</operator><name pos:start="113:43" pos:end="113:47">flags</name> <operator pos:start="113:49" pos:end="113:49">&amp;</operator> <name pos:start="113:51" pos:end="113:62">BDRV_REQ_FUA</name><operator pos:start="113:63" pos:end="113:63">)</operator> <operator pos:start="113:65" pos:end="113:66">&amp;&amp;</operator>

                <operator pos:start="115:17" pos:end="115:17">!</operator><operator pos:start="115:18" pos:end="115:18">(</operator><name pos:start="115:19" pos:end="115:43"><name pos:start="115:19" pos:end="115:20">bs</name><operator pos:start="115:21" pos:end="115:22">-&gt;</operator><name pos:start="115:23" pos:end="115:43">supported_write_flags</name></name> <operator pos:start="115:45" pos:end="115:45">&amp;</operator> <name pos:start="115:47" pos:end="115:58">BDRV_REQ_FUA</name><operator pos:start="115:59" pos:end="115:59">)</operator></expr>)</condition> <block pos:start="115:62" pos:end="123:13">{<block_content pos:start="121:17" pos:end="121:45">

                <comment type="block" pos:start="117:17" pos:end="119:57">/* If FUA is going to be emulated by flush, we only

                 * need to flush on the last iteration */</comment>

                <expr_stmt pos:start="121:17" pos:end="121:45"><expr pos:start="121:17" pos:end="121:44"><name pos:start="121:17" pos:end="121:27">local_flags</name> <operator pos:start="121:29" pos:end="121:30">&amp;=</operator> <operator pos:start="121:32" pos:end="121:32">~</operator><name pos:start="121:33" pos:end="121:44">BDRV_REQ_FUA</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:53"><expr pos:start="125:13" pos:end="125:52"><call pos:start="125:13" pos:end="125:52"><name pos:start="125:13" pos:end="125:27">qemu_iovec_init</name><argument_list pos:start="125:28" pos:end="125:52">(<argument pos:start="125:29" pos:end="125:39"><expr pos:start="125:29" pos:end="125:39"><operator pos:start="125:29" pos:end="125:29">&amp;</operator><name pos:start="125:30" pos:end="125:39">local_qiov</name></expr></argument>, <argument pos:start="125:42" pos:end="125:51"><expr pos:start="125:42" pos:end="125:51"><name pos:start="125:42" pos:end="125:51"><name pos:start="125:42" pos:end="125:45">qiov</name><operator pos:start="125:46" pos:end="125:47">-&gt;</operator><name pos:start="125:48" pos:end="125:51">niov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:79"><expr pos:start="127:13" pos:end="127:78"><call pos:start="127:13" pos:end="127:78"><name pos:start="127:13" pos:end="127:29">qemu_iovec_concat</name><argument_list pos:start="127:30" pos:end="127:78">(<argument pos:start="127:31" pos:end="127:41"><expr pos:start="127:31" pos:end="127:41"><operator pos:start="127:31" pos:end="127:31">&amp;</operator><name pos:start="127:32" pos:end="127:41">local_qiov</name></expr></argument>, <argument pos:start="127:44" pos:end="127:47"><expr pos:start="127:44" pos:end="127:47"><name pos:start="127:44" pos:end="127:47">qiov</name></expr></argument>, <argument pos:start="127:50" pos:end="127:72"><expr pos:start="127:50" pos:end="127:72"><name pos:start="127:50" pos:end="127:54">bytes</name> <operator pos:start="127:56" pos:end="127:56">-</operator> <name pos:start="127:58" pos:end="127:72">bytes_remaining</name></expr></argument>, <argument pos:start="127:75" pos:end="127:77"><expr pos:start="127:75" pos:end="127:77"><name pos:start="127:75" pos:end="127:77">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="131:13" pos:end="133:69"><expr pos:start="131:13" pos:end="133:68"><name pos:start="131:13" pos:end="131:15">ret</name> <operator pos:start="131:17" pos:end="131:17">=</operator> <call pos:start="131:19" pos:end="133:68"><name pos:start="131:19" pos:end="131:37">bdrv_driver_pwritev</name><argument_list pos:start="131:38" pos:end="133:68">(<argument pos:start="131:39" pos:end="131:40"><expr pos:start="131:39" pos:end="131:40"><name pos:start="131:39" pos:end="131:40">bs</name></expr></argument>, <argument pos:start="131:43" pos:end="131:74"><expr pos:start="131:43" pos:end="131:74"><name pos:start="131:43" pos:end="131:48">offset</name> <operator pos:start="131:50" pos:end="131:50">+</operator> <name pos:start="131:52" pos:end="131:56">bytes</name> <operator pos:start="131:58" pos:end="131:58">-</operator> <name pos:start="131:60" pos:end="131:74">bytes_remaining</name></expr></argument>,

                                      <argument pos:start="133:39" pos:end="133:41"><expr pos:start="133:39" pos:end="133:41"><name pos:start="133:39" pos:end="133:41">num</name></expr></argument>, <argument pos:start="133:44" pos:end="133:54"><expr pos:start="133:44" pos:end="133:54"><operator pos:start="133:44" pos:end="133:44">&amp;</operator><name pos:start="133:45" pos:end="133:54">local_qiov</name></expr></argument>, <argument pos:start="133:57" pos:end="133:67"><expr pos:start="133:57" pos:end="133:67"><name pos:start="133:57" pos:end="133:67">local_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:44"><expr pos:start="135:13" pos:end="135:43"><call pos:start="135:13" pos:end="135:43"><name pos:start="135:13" pos:end="135:30">qemu_iovec_destroy</name><argument_list pos:start="135:31" pos:end="135:43">(<argument pos:start="135:32" pos:end="135:42"><expr pos:start="135:32" pos:end="135:42"><operator pos:start="135:32" pos:end="135:32">&amp;</operator><name pos:start="135:33" pos:end="135:42">local_qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="137:13" pos:end="141:13"><if pos:start="137:13" pos:end="141:13">if <condition pos:start="137:16" pos:end="137:24">(<expr pos:start="137:17" pos:end="137:23"><name pos:start="137:17" pos:end="137:19">ret</name> <operator pos:start="137:21" pos:end="137:21">&lt;</operator> <literal type="number" pos:start="137:23" pos:end="137:23">0</literal></expr>)</condition> <block pos:start="137:26" pos:end="141:13">{<block_content pos:start="139:17" pos:end="139:22">

                <break pos:start="139:17" pos:end="139:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:35"><expr pos:start="143:13" pos:end="143:34"><name pos:start="143:13" pos:end="143:27">bytes_remaining</name> <operator pos:start="143:29" pos:end="143:30">-=</operator> <name pos:start="143:32" pos:end="143:34">num</name></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:46"><expr pos:start="149:5" pos:end="149:45"><call pos:start="149:5" pos:end="149:45"><name pos:start="149:5" pos:end="149:20">bdrv_debug_event</name><argument_list pos:start="149:21" pos:end="149:45">(<argument pos:start="149:22" pos:end="149:23"><expr pos:start="149:22" pos:end="149:23"><name pos:start="149:22" pos:end="149:23">bs</name></expr></argument>, <argument pos:start="149:26" pos:end="149:44"><expr pos:start="149:26" pos:end="149:44"><name pos:start="149:26" pos:end="149:44">BLKDBG_PWRITEV_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="153:5" pos:end="153:20"><expr pos:start="153:5" pos:end="153:19"><operator pos:start="153:5" pos:end="153:6">++</operator><name pos:start="153:7" pos:end="153:19"><name pos:start="153:7" pos:end="153:8">bs</name><operator pos:start="153:9" pos:end="153:10">-&gt;</operator><name pos:start="153:11" pos:end="153:19">write_gen</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:64"><expr pos:start="155:5" pos:end="155:63"><call pos:start="155:5" pos:end="155:63"><name pos:start="155:5" pos:end="155:18">bdrv_set_dirty</name><argument_list pos:start="155:19" pos:end="155:63">(<argument pos:start="155:20" pos:end="155:21"><expr pos:start="155:20" pos:end="155:21"><name pos:start="155:20" pos:end="155:21">bs</name></expr></argument>, <argument pos:start="155:24" pos:end="155:35"><expr pos:start="155:24" pos:end="155:35"><name pos:start="155:24" pos:end="155:35">start_sector</name></expr></argument>, <argument pos:start="155:38" pos:end="155:62"><expr pos:start="155:38" pos:end="155:62"><name pos:start="155:38" pos:end="155:47">end_sector</name> <operator pos:start="155:49" pos:end="155:49">-</operator> <name pos:start="155:51" pos:end="155:62">start_sector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="159:5" pos:end="163:5"><if pos:start="159:5" pos:end="163:5">if <condition pos:start="159:8" pos:end="159:47">(<expr pos:start="159:9" pos:end="159:46"><name pos:start="159:9" pos:end="159:29"><name pos:start="159:9" pos:end="159:10">bs</name><operator pos:start="159:11" pos:end="159:12">-&gt;</operator><name pos:start="159:13" pos:end="159:29">wr_highest_offset</name></name> <operator pos:start="159:31" pos:end="159:31">&lt;</operator> <name pos:start="159:33" pos:end="159:38">offset</name> <operator pos:start="159:40" pos:end="159:40">+</operator> <name pos:start="159:42" pos:end="159:46">bytes</name></expr>)</condition> <block pos:start="159:49" pos:end="163:5">{<block_content pos:start="161:9" pos:end="161:47">

        <expr_stmt pos:start="161:9" pos:end="161:47"><expr pos:start="161:9" pos:end="161:46"><name pos:start="161:9" pos:end="161:29"><name pos:start="161:9" pos:end="161:10">bs</name><operator pos:start="161:11" pos:end="161:12">-&gt;</operator><name pos:start="161:13" pos:end="161:29">wr_highest_offset</name></name> <operator pos:start="161:31" pos:end="161:31">=</operator> <name pos:start="161:33" pos:end="161:38">offset</name> <operator pos:start="161:40" pos:end="161:40">+</operator> <name pos:start="161:42" pos:end="161:46">bytes</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="167:5" pos:end="173:5"><if pos:start="167:5" pos:end="173:5">if <condition pos:start="167:8" pos:end="167:17">(<expr pos:start="167:9" pos:end="167:16"><name pos:start="167:9" pos:end="167:11">ret</name> <operator pos:start="167:13" pos:end="167:14">&gt;=</operator> <literal type="number" pos:start="167:16" pos:end="167:16">0</literal></expr>)</condition> <block pos:start="167:19" pos:end="173:5">{<block_content pos:start="169:9" pos:end="171:16">

        <expr_stmt pos:start="169:9" pos:end="169:63"><expr pos:start="169:9" pos:end="169:62"><name pos:start="169:9" pos:end="169:25"><name pos:start="169:9" pos:end="169:10">bs</name><operator pos:start="169:11" pos:end="169:12">-&gt;</operator><name pos:start="169:13" pos:end="169:25">total_sectors</name></name> <operator pos:start="169:27" pos:end="169:27">=</operator> <call pos:start="169:29" pos:end="169:62"><name pos:start="169:29" pos:end="169:31">MAX</name><argument_list pos:start="169:32" pos:end="169:62">(<argument pos:start="169:33" pos:end="169:49"><expr pos:start="169:33" pos:end="169:49"><name pos:start="169:33" pos:end="169:49"><name pos:start="169:33" pos:end="169:34">bs</name><operator pos:start="169:35" pos:end="169:36">-&gt;</operator><name pos:start="169:37" pos:end="169:49">total_sectors</name></name></expr></argument>, <argument pos:start="169:52" pos:end="169:61"><expr pos:start="169:52" pos:end="169:61"><name pos:start="169:52" pos:end="169:61">end_sector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:16"><expr pos:start="171:9" pos:end="171:15"><name pos:start="171:9" pos:end="171:11">ret</name> <operator pos:start="171:13" pos:end="171:13">=</operator> <literal type="number" pos:start="171:15" pos:end="171:15">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="177:5" pos:end="177:15">return <expr pos:start="177:12" pos:end="177:14"><name pos:start="177:12" pos:end="177:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
