<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11878.c" pos:tabs="8"><function pos:start="1:1" pos:end="931:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:12">cpu_exec</name><parameter_list pos:start="1:13" pos:end="1:28">(<parameter pos:start="1:14" pos:end="1:27"><decl pos:start="1:14" pos:end="1:27"><type pos:start="1:14" pos:end="1:23"><name pos:start="1:14" pos:end="1:21">CPUState</name> <modifier pos:start="1:23" pos:end="1:23">*</modifier></type><name pos:start="1:24" pos:end="1:27">env1</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="931:1">{<block_content pos:start="13:5" pos:end="929:15">

<cpp:define pos:start="5:1" pos:end="5:27">#<cpp:directive pos:start="5:2" pos:end="5:7">define</cpp:directive> <cpp:macro pos:start="5:9" pos:end="5:25"><name pos:start="5:9" pos:end="5:25">DECLARE_HOST_REGS</name></cpp:macro> <cpp:value pos:start="5:27" pos:end="5:27">1</cpp:value></cpp:define>

<cpp:include pos:start="7:1" pos:end="7:28">#<cpp:directive pos:start="7:2" pos:end="7:8">include</cpp:directive> <cpp:file pos:start="7:10" pos:end="7:28">"hostregs_helper.h"</cpp:file></cpp:include>

<cpp:if pos:start="9:1" pos:end="9:25">#<cpp:directive pos:start="9:2" pos:end="9:3">if</cpp:directive> <expr pos:start="9:5" pos:end="9:25"><call pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:11">defined</name><argument_list pos:start="9:12" pos:end="9:25">(<argument pos:start="9:13" pos:end="9:24"><expr pos:start="9:13" pos:end="9:24"><name pos:start="9:13" pos:end="9:24">TARGET_SPARC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if pos:start="11:1" pos:end="11:24">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:24"><call pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:11">defined</name><argument_list pos:start="11:12" pos:end="11:24">(<argument pos:start="11:13" pos:end="11:23"><expr pos:start="11:13" pos:end="11:23"><name pos:start="11:13" pos:end="11:23">reg_REGWPTR</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="13:5" pos:end="18:0"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">uint32_t</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:27">saved_regwptr</name></decl>;</decl_stmt>

<cpp:endif pos:start="15:1" pos:end="15:6">#<cpp:directive pos:start="15:2" pos:end="15:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>, <decl pos:start="19:14" pos:end="19:30"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:14" pos:end="19:30">interrupt_request</name></decl>;</decl_stmt>

    <function_decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">long</name></type> (<modifier pos:start="21:11" pos:end="21:11">*</modifier><name pos:start="21:12" pos:end="21:19">gen_func</name>)<parameter_list pos:start="21:21" pos:end="21:26">(<parameter pos:start="21:22" pos:end="21:25"><decl pos:start="21:22" pos:end="21:25"><type pos:start="21:22" pos:end="21:25"><name pos:start="21:22" pos:end="21:25">void</name></type></decl></parameter>)</parameter_list>;</function_decl>

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:20">TranslationBlock</name> <modifier pos:start="23:22" pos:end="23:22">*</modifier></type><name pos:start="23:23" pos:end="23:24">tb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:20"><decl pos:start="25:5" pos:end="25:19"><type pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:11">uint8_t</name> <modifier pos:start="25:13" pos:end="25:13">*</modifier></type><name pos:start="25:14" pos:end="25:19">tc_ptr</name></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="31:27"><if pos:start="29:5" pos:end="31:27">if <condition pos:start="29:8" pos:end="29:40">(<expr pos:start="29:9" pos:end="29:39"><call pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:18">cpu_halted</name><argument_list pos:start="29:19" pos:end="29:24">(<argument pos:start="29:20" pos:end="29:23"><expr pos:start="29:20" pos:end="29:23"><name pos:start="29:20" pos:end="29:23">env1</name></expr></argument>)</argument_list></call> <operator pos:start="29:26" pos:end="29:27">==</operator> <name pos:start="29:29" pos:end="29:39">EXCP_HALTED</name></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:27"><block_content pos:start="31:9" pos:end="31:27">

        <return pos:start="31:9" pos:end="31:27">return <expr pos:start="31:16" pos:end="31:26"><name pos:start="31:16" pos:end="31:26">EXCP_HALTED</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="44:0"><expr pos:start="35:5" pos:end="35:25"><name pos:start="35:5" pos:end="35:18">cpu_single_env</name> <operator pos:start="35:20" pos:end="35:20">=</operator> <name pos:start="35:22" pos:end="35:25">env1</name></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:40">/* first we save global registers */</comment>

<cpp:define pos:start="41:1" pos:end="41:24">#<cpp:directive pos:start="41:2" pos:end="41:7">define</cpp:directive> <cpp:macro pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:22">SAVE_HOST_REGS</name></cpp:macro> <cpp:value pos:start="41:24" pos:end="41:24">1</cpp:value></cpp:define>

<cpp:include pos:start="43:1" pos:end="43:28">#<cpp:directive pos:start="43:2" pos:end="43:8">include</cpp:directive> <cpp:file pos:start="43:10" pos:end="43:28">"hostregs_helper.h"</cpp:file></cpp:include>

    <expr_stmt pos:start="45:5" pos:end="45:15"><expr pos:start="45:5" pos:end="45:14"><name pos:start="45:5" pos:end="45:7">env</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <name pos:start="45:11" pos:end="45:14">env1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:19"><expr pos:start="47:5" pos:end="47:18"><call pos:start="47:5" pos:end="47:18"><name pos:start="47:5" pos:end="47:16">SAVE_GLOBALS</name><argument_list pos:start="47:17" pos:end="47:18">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="54:0"><expr pos:start="51:5" pos:end="51:17"><call pos:start="51:5" pos:end="51:17"><name pos:start="51:5" pos:end="51:15">env_to_regs</name><argument_list pos:start="51:16" pos:end="51:17">()</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="53:1" pos:end="53:24">#<cpp:directive pos:start="53:2" pos:end="53:3">if</cpp:directive> <expr pos:start="53:5" pos:end="53:24"><call pos:start="53:5" pos:end="53:24"><name pos:start="53:5" pos:end="53:11">defined</name><argument_list pos:start="53:12" pos:end="53:24">(<argument pos:start="53:13" pos:end="53:23"><expr pos:start="53:13" pos:end="53:23"><name pos:start="53:13" pos:end="53:23">TARGET_I386</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="55:5" pos:end="55:44">/* put eflags in CPU temporary format */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:69"><expr pos:start="57:5" pos:end="57:68"><name pos:start="57:5" pos:end="57:10">CC_SRC</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <name pos:start="57:14" pos:end="57:24"><name pos:start="57:14" pos:end="57:16">env</name><operator pos:start="57:17" pos:end="57:18">-&gt;</operator><name pos:start="57:19" pos:end="57:24">eflags</name></name> <operator pos:start="57:26" pos:end="57:26">&amp;</operator> <operator pos:start="57:28" pos:end="57:28">(</operator><name pos:start="57:29" pos:end="57:32">CC_O</name> <operator pos:start="57:34" pos:end="57:34">|</operator> <name pos:start="57:36" pos:end="57:39">CC_S</name> <operator pos:start="57:41" pos:end="57:41">|</operator> <name pos:start="57:43" pos:end="57:46">CC_Z</name> <operator pos:start="57:48" pos:end="57:48">|</operator> <name pos:start="57:50" pos:end="57:53">CC_A</name> <operator pos:start="57:55" pos:end="57:55">|</operator> <name pos:start="57:57" pos:end="57:60">CC_P</name> <operator pos:start="57:62" pos:end="57:62">|</operator> <name pos:start="57:64" pos:end="57:67">CC_C</name><operator pos:start="57:68" pos:end="57:68">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:45"><expr pos:start="59:5" pos:end="59:44"><name pos:start="59:5" pos:end="59:6">DF</name> <operator pos:start="59:8" pos:end="59:8">=</operator> <literal type="number" pos:start="59:10" pos:end="59:12">1</literal> <operator pos:start="59:12" pos:end="59:12">-</operator> <operator pos:start="59:14" pos:end="59:14">(</operator><literal type="number" pos:start="59:15" pos:end="59:15">2</literal> <operator pos:start="59:17" pos:end="59:17">*</operator> <operator pos:start="59:19" pos:end="59:19">(</operator><operator pos:start="59:20" pos:end="59:20">(</operator><name pos:start="59:21" pos:end="59:31"><name pos:start="59:21" pos:end="59:23">env</name><operator pos:start="59:24" pos:end="59:25">-&gt;</operator><name pos:start="59:26" pos:end="59:31">eflags</name></name> <operator pos:start="59:33" pos:end="59:34">&gt;&gt;</operator> <literal type="number" pos:start="59:36" pos:end="59:37">10</literal><operator pos:start="59:38" pos:end="59:38">)</operator> <operator pos:start="59:40" pos:end="59:40">&amp;</operator> <literal type="number" pos:start="59:42" pos:end="59:42">1</literal><operator pos:start="59:43" pos:end="59:43">)</operator><operator pos:start="59:44" pos:end="59:44">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:25"><expr pos:start="61:5" pos:end="61:24"><name pos:start="61:5" pos:end="61:9">CC_OP</name> <operator pos:start="61:11" pos:end="61:11">=</operator> <name pos:start="61:13" pos:end="61:24">CC_OP_EFLAGS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="68:0"><expr pos:start="63:5" pos:end="63:71"><name pos:start="63:5" pos:end="63:15"><name pos:start="63:5" pos:end="63:7">env</name><operator pos:start="63:8" pos:end="63:9">-&gt;</operator><name pos:start="63:10" pos:end="63:15">eflags</name></name> <operator pos:start="63:17" pos:end="63:18">&amp;=</operator> <operator pos:start="63:20" pos:end="63:20">~</operator><operator pos:start="63:21" pos:end="63:21">(</operator><name pos:start="63:22" pos:end="63:28">DF_MASK</name> <operator pos:start="63:30" pos:end="63:30">|</operator> <name pos:start="63:32" pos:end="63:35">CC_O</name> <operator pos:start="63:37" pos:end="63:37">|</operator> <name pos:start="63:39" pos:end="63:42">CC_S</name> <operator pos:start="63:44" pos:end="63:44">|</operator> <name pos:start="63:46" pos:end="63:49">CC_Z</name> <operator pos:start="63:51" pos:end="63:51">|</operator> <name pos:start="63:53" pos:end="63:56">CC_A</name> <operator pos:start="63:58" pos:end="63:58">|</operator> <name pos:start="63:60" pos:end="63:63">CC_P</name> <operator pos:start="63:65" pos:end="63:65">|</operator> <name pos:start="63:67" pos:end="63:70">CC_C</name><operator pos:start="63:71" pos:end="63:71">)</operator></expr>;</expr_stmt>

<cpp:elif pos:start="65:1" pos:end="65:27">#<cpp:directive pos:start="65:2" pos:end="65:5">elif</cpp:directive> <expr pos:start="65:7" pos:end="65:27"><call pos:start="65:7" pos:end="65:27"><name pos:start="65:7" pos:end="65:13">defined</name><argument_list pos:start="65:14" pos:end="65:27">(<argument pos:start="65:15" pos:end="65:26"><expr pos:start="65:15" pos:end="65:26"><name pos:start="65:15" pos:end="65:26">TARGET_SPARC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:if pos:start="67:1" pos:end="67:24">#<cpp:directive pos:start="67:2" pos:end="67:3">if</cpp:directive> <expr pos:start="67:5" pos:end="67:24"><call pos:start="67:5" pos:end="67:24"><name pos:start="67:5" pos:end="67:11">defined</name><argument_list pos:start="67:12" pos:end="67:24">(<argument pos:start="67:13" pos:end="67:23"><expr pos:start="67:13" pos:end="67:23"><name pos:start="67:13" pos:end="67:23">reg_REGWPTR</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="69:5" pos:end="74:0"><expr pos:start="69:5" pos:end="69:27"><name pos:start="69:5" pos:end="69:17">saved_regwptr</name> <operator pos:start="69:19" pos:end="69:19">=</operator> <name pos:start="69:21" pos:end="69:27">REGWPTR</name></expr>;</expr_stmt>

<cpp:endif pos:start="71:1" pos:end="71:6">#<cpp:directive pos:start="71:2" pos:end="71:6">endif</cpp:directive></cpp:endif>

<cpp:elif pos:start="73:1" pos:end="73:26">#<cpp:directive pos:start="73:2" pos:end="73:5">elif</cpp:directive> <expr pos:start="73:7" pos:end="73:26"><call pos:start="73:7" pos:end="73:26"><name pos:start="73:7" pos:end="73:13">defined</name><argument_list pos:start="73:14" pos:end="73:26">(<argument pos:start="73:15" pos:end="73:25"><expr pos:start="73:15" pos:end="73:25"><name pos:start="73:15" pos:end="73:25">TARGET_M68K</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt pos:start="75:5" pos:end="75:29"><expr pos:start="75:5" pos:end="75:28"><name pos:start="75:5" pos:end="75:14"><name pos:start="75:5" pos:end="75:7">env</name><operator pos:start="75:8" pos:end="75:9">-&gt;</operator><name pos:start="75:10" pos:end="75:14">cc_op</name></name> <operator pos:start="75:16" pos:end="75:16">=</operator> <name pos:start="75:18" pos:end="75:28">CC_OP_FLAGS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:33"><expr pos:start="77:5" pos:end="77:32"><name pos:start="77:5" pos:end="77:16"><name pos:start="77:5" pos:end="77:7">env</name><operator pos:start="77:8" pos:end="77:9">-&gt;</operator><name pos:start="77:10" pos:end="77:16">cc_dest</name></name> <operator pos:start="77:18" pos:end="77:18">=</operator> <name pos:start="77:20" pos:end="77:26"><name pos:start="77:20" pos:end="77:22">env</name><operator pos:start="77:23" pos:end="77:24">-&gt;</operator><name pos:start="77:25" pos:end="77:26">sr</name></name> <operator pos:start="77:28" pos:end="77:28">&amp;</operator> <literal type="number" pos:start="77:30" pos:end="77:32">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="100:0"><expr pos:start="79:5" pos:end="79:34"><name pos:start="79:5" pos:end="79:13"><name pos:start="79:5" pos:end="79:7">env</name><operator pos:start="79:8" pos:end="79:9">-&gt;</operator><name pos:start="79:10" pos:end="79:13">cc_x</name></name> <operator pos:start="79:15" pos:end="79:15">=</operator> <operator pos:start="79:17" pos:end="79:17">(</operator><name pos:start="79:18" pos:end="79:24"><name pos:start="79:18" pos:end="79:20">env</name><operator pos:start="79:21" pos:end="79:22">-&gt;</operator><name pos:start="79:23" pos:end="79:24">sr</name></name> <operator pos:start="79:26" pos:end="79:27">&gt;&gt;</operator> <literal type="number" pos:start="79:29" pos:end="79:29">4</literal><operator pos:start="79:30" pos:end="79:30">)</operator> <operator pos:start="79:32" pos:end="79:32">&amp;</operator> <literal type="number" pos:start="79:34" pos:end="79:34">1</literal></expr>;</expr_stmt>

<cpp:elif pos:start="81:1" pos:end="81:27">#<cpp:directive pos:start="81:2" pos:end="81:5">elif</cpp:directive> <expr pos:start="81:7" pos:end="81:27"><call pos:start="81:7" pos:end="81:27"><name pos:start="81:7" pos:end="81:13">defined</name><argument_list pos:start="81:14" pos:end="81:27">(<argument pos:start="81:15" pos:end="81:26"><expr pos:start="81:15" pos:end="81:26"><name pos:start="81:15" pos:end="81:26">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:elif pos:start="83:1" pos:end="83:25">#<cpp:directive pos:start="83:2" pos:end="83:5">elif</cpp:directive> <expr pos:start="83:7" pos:end="83:25"><call pos:start="83:7" pos:end="83:25"><name pos:start="83:7" pos:end="83:13">defined</name><argument_list pos:start="83:14" pos:end="83:25">(<argument pos:start="83:15" pos:end="83:24"><expr pos:start="83:15" pos:end="83:24"><name pos:start="83:15" pos:end="83:24">TARGET_ARM</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:elif pos:start="85:1" pos:end="85:25">#<cpp:directive pos:start="85:2" pos:end="85:5">elif</cpp:directive> <expr pos:start="85:7" pos:end="85:25"><call pos:start="85:7" pos:end="85:25"><name pos:start="85:7" pos:end="85:13">defined</name><argument_list pos:start="85:14" pos:end="85:25">(<argument pos:start="85:15" pos:end="85:24"><expr pos:start="85:15" pos:end="85:24"><name pos:start="85:15" pos:end="85:24">TARGET_PPC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:elif pos:start="87:1" pos:end="87:26">#<cpp:directive pos:start="87:2" pos:end="87:5">elif</cpp:directive> <expr pos:start="87:7" pos:end="87:26"><call pos:start="87:7" pos:end="87:26"><name pos:start="87:7" pos:end="87:13">defined</name><argument_list pos:start="87:14" pos:end="87:26">(<argument pos:start="87:15" pos:end="87:25"><expr pos:start="87:15" pos:end="87:25"><name pos:start="87:15" pos:end="87:25">TARGET_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:elif pos:start="89:1" pos:end="89:25">#<cpp:directive pos:start="89:2" pos:end="89:5">elif</cpp:directive> <expr pos:start="89:7" pos:end="89:25"><call pos:start="89:7" pos:end="89:25"><name pos:start="89:7" pos:end="89:13">defined</name><argument_list pos:start="89:14" pos:end="89:25">(<argument pos:start="89:15" pos:end="89:24"><expr pos:start="89:15" pos:end="89:24"><name pos:start="89:15" pos:end="89:24">TARGET_SH4</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:elif pos:start="91:1" pos:end="91:26">#<cpp:directive pos:start="91:2" pos:end="91:5">elif</cpp:directive> <expr pos:start="91:7" pos:end="91:26"><call pos:start="91:7" pos:end="91:26"><name pos:start="91:7" pos:end="91:13">defined</name><argument_list pos:start="91:14" pos:end="91:26">(<argument pos:start="91:15" pos:end="91:25"><expr pos:start="91:15" pos:end="91:25"><name pos:start="91:15" pos:end="91:25">TARGET_CRIS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <comment type="block" pos:start="93:5" pos:end="93:15">/* XXXXX */</comment>

<cpp:else pos:start="95:1" pos:end="95:5">#<cpp:directive pos:start="95:2" pos:end="95:5">else</cpp:directive></cpp:else>

<cpp:error pos:start="97:1" pos:end="97:29">#<cpp:directive pos:start="97:2" pos:end="97:6">error</cpp:directive> unsupported target CPU</cpp:error>

<cpp:endif pos:start="99:1" pos:end="99:6">#<cpp:directive pos:start="99:2" pos:end="99:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="101:5" pos:end="101:30"><expr pos:start="101:5" pos:end="101:29"><name pos:start="101:5" pos:end="101:24"><name pos:start="101:5" pos:end="101:7">env</name><operator pos:start="101:8" pos:end="101:9">-&gt;</operator><name pos:start="101:10" pos:end="101:24">exception_index</name></name> <operator pos:start="101:26" pos:end="101:26">=</operator> <operator pos:start="101:28" pos:end="101:28">-</operator><literal type="number" pos:start="101:29" pos:end="101:29">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="105:5" pos:end="105:55">/* prepare setjmp context for exception handling */</comment>

    <for pos:start="107:5" pos:end="870:0">for<control pos:start="107:8" pos:end="107:11">(<init pos:start="107:9" pos:end="107:9">;</init><condition pos:start="107:10" pos:end="107:10">;</condition><incr/>)</control> <block pos:start="107:13" pos:end="870:0">{<block_content pos:start="109:9" pos:end="861:9">

        <if_stmt pos:start="109:9" pos:end="861:9"><if pos:start="109:9" pos:end="857:9">if <condition pos:start="109:12" pos:end="109:38">(<expr pos:start="109:13" pos:end="109:37"><call pos:start="109:13" pos:end="109:32"><name pos:start="109:13" pos:end="109:18">setjmp</name><argument_list pos:start="109:19" pos:end="109:32">(<argument pos:start="109:20" pos:end="109:31"><expr pos:start="109:20" pos:end="109:31"><name pos:start="109:20" pos:end="109:31"><name pos:start="109:20" pos:end="109:22">env</name><operator pos:start="109:23" pos:end="109:24">-&gt;</operator><name pos:start="109:25" pos:end="109:31">jmp_env</name></name></expr></argument>)</argument_list></call> <operator pos:start="109:34" pos:end="109:35">==</operator> <literal type="number" pos:start="109:37" pos:end="109:37">0</literal></expr>)</condition> <block pos:start="109:40" pos:end="857:9">{<block_content pos:start="111:13" pos:end="855:13">

            <expr_stmt pos:start="111:13" pos:end="111:35"><expr pos:start="111:13" pos:end="111:34"><name pos:start="111:13" pos:end="111:27"><name pos:start="111:13" pos:end="111:15">env</name><operator pos:start="111:16" pos:end="111:17">-&gt;</operator><name pos:start="111:18" pos:end="111:27">current_tb</name></name> <operator pos:start="111:29" pos:end="111:29">=</operator> <name pos:start="111:31" pos:end="111:34">NULL</name></expr>;</expr_stmt>

            <comment type="block" pos:start="113:13" pos:end="113:64">/* if an exception is pending, we execute it here */</comment>

            <if_stmt pos:start="115:13" pos:end="212:0"><if pos:start="115:13" pos:end="212:0">if <condition pos:start="115:16" pos:end="115:42">(<expr pos:start="115:17" pos:end="115:41"><name pos:start="115:17" pos:end="115:36"><name pos:start="115:17" pos:end="115:19">env</name><operator pos:start="115:20" pos:end="115:21">-&gt;</operator><name pos:start="115:22" pos:end="115:36">exception_index</name></name> <operator pos:start="115:38" pos:end="115:39">&gt;=</operator> <literal type="number" pos:start="115:41" pos:end="115:41">0</literal></expr>)</condition> <block pos:start="115:44" pos:end="212:0">{<block_content pos:start="117:17" pos:end="207:42">

                <if_stmt pos:start="117:17" pos:end="205:17"><if pos:start="117:17" pos:end="125:17">if <condition pos:start="117:20" pos:end="117:59">(<expr pos:start="117:21" pos:end="117:58"><name pos:start="117:21" pos:end="117:40"><name pos:start="117:21" pos:end="117:23">env</name><operator pos:start="117:24" pos:end="117:25">-&gt;</operator><name pos:start="117:26" pos:end="117:40">exception_index</name></name> <operator pos:start="117:42" pos:end="117:43">&gt;=</operator> <name pos:start="117:45" pos:end="117:58">EXCP_INTERRUPT</name></expr>)</condition> <block pos:start="117:61" pos:end="125:17">{<block_content pos:start="121:21" pos:end="123:26">

                    <comment type="block" pos:start="119:21" pos:end="119:66">/* exit request from the cpu execution loop */</comment>

                    <expr_stmt pos:start="121:21" pos:end="121:47"><expr pos:start="121:21" pos:end="121:46"><name pos:start="121:21" pos:end="121:23">ret</name> <operator pos:start="121:25" pos:end="121:25">=</operator> <name pos:start="121:27" pos:end="121:46"><name pos:start="121:27" pos:end="121:29">env</name><operator pos:start="121:30" pos:end="121:31">-&gt;</operator><name pos:start="121:32" pos:end="121:46">exception_index</name></name></expr>;</expr_stmt>

                    <break pos:start="123:21" pos:end="123:26">break;</break>

                </block_content>}</block></if> <if type="elseif" pos:start="125:19" pos:end="149:17">else if <condition pos:start="125:27" pos:end="125:47">(<expr pos:start="125:28" pos:end="125:46"><name pos:start="125:28" pos:end="125:46"><name pos:start="125:28" pos:end="125:30">env</name><operator pos:start="125:31" pos:end="125:32">-&gt;</operator><name pos:start="125:33" pos:end="125:46">user_mode_only</name></name></expr>)</condition> <block pos:start="125:49" pos:end="149:17">{<block_content pos:start="135:21" pos:end="147:26">

                    <comment type="block" pos:start="127:21" pos:end="131:30">/* if user mode only, we simulate a fake exception

                       which will be handled outside the cpu execution

                       loop */</comment>

<cpp:if pos:start="133:1" pos:end="133:24">#<cpp:directive pos:start="133:2" pos:end="133:3">if</cpp:directive> <expr pos:start="133:5" pos:end="133:24"><call pos:start="133:5" pos:end="133:24"><name pos:start="133:5" pos:end="133:11">defined</name><argument_list pos:start="133:12" pos:end="133:24">(<argument pos:start="133:13" pos:end="133:23"><expr pos:start="133:13" pos:end="133:23"><name pos:start="133:13" pos:end="133:23">TARGET_I386</name></expr></argument>)</argument_list></call></expr></cpp:if>

                    <expr_stmt pos:start="135:21" pos:end="144:0"><expr pos:start="135:21" pos:end="141:62"><call pos:start="135:21" pos:end="141:62"><name pos:start="135:21" pos:end="135:37">do_interrupt_user</name><argument_list pos:start="135:38" pos:end="141:62">(<argument pos:start="135:39" pos:end="135:58"><expr pos:start="135:39" pos:end="135:58"><name pos:start="135:39" pos:end="135:58"><name pos:start="135:39" pos:end="135:41">env</name><operator pos:start="135:42" pos:end="135:43">-&gt;</operator><name pos:start="135:44" pos:end="135:58">exception_index</name></name></expr></argument>,

                                      <argument pos:start="137:39" pos:end="137:59"><expr pos:start="137:39" pos:end="137:59"><name pos:start="137:39" pos:end="137:59"><name pos:start="137:39" pos:end="137:41">env</name><operator pos:start="137:42" pos:end="137:43">-&gt;</operator><name pos:start="137:44" pos:end="137:59">exception_is_int</name></name></expr></argument>,

                                      <argument pos:start="139:39" pos:end="139:53"><expr pos:start="139:39" pos:end="139:53"><name pos:start="139:39" pos:end="139:53"><name pos:start="139:39" pos:end="139:41">env</name><operator pos:start="139:42" pos:end="139:43">-&gt;</operator><name pos:start="139:44" pos:end="139:53">error_code</name></name></expr></argument>,

                                      <argument pos:start="141:39" pos:end="141:61"><expr pos:start="141:39" pos:end="141:61"><name pos:start="141:39" pos:end="141:61"><name pos:start="141:39" pos:end="141:41">env</name><operator pos:start="141:42" pos:end="141:43">-&gt;</operator><name pos:start="141:44" pos:end="141:61">exception_next_eip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="143:1" pos:end="143:6">#<cpp:directive pos:start="143:2" pos:end="143:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="145:21" pos:end="145:47"><expr pos:start="145:21" pos:end="145:46"><name pos:start="145:21" pos:end="145:23">ret</name> <operator pos:start="145:25" pos:end="145:25">=</operator> <name pos:start="145:27" pos:end="145:46"><name pos:start="145:27" pos:end="145:29">env</name><operator pos:start="145:30" pos:end="145:31">-&gt;</operator><name pos:start="145:32" pos:end="145:46">exception_index</name></name></expr>;</expr_stmt>

                    <break pos:start="147:21" pos:end="147:26">break;</break>

                </block_content>}</block></if> <else pos:start="149:19" pos:end="205:17">else <block pos:start="149:24" pos:end="205:17">{<block_content pos:start="159:21" pos:end="204:0">

<cpp:if pos:start="151:1" pos:end="151:24">#<cpp:directive pos:start="151:2" pos:end="151:3">if</cpp:directive> <expr pos:start="151:5" pos:end="151:24"><call pos:start="151:5" pos:end="151:24"><name pos:start="151:5" pos:end="151:11">defined</name><argument_list pos:start="151:12" pos:end="151:24">(<argument pos:start="151:13" pos:end="151:23"><expr pos:start="151:13" pos:end="151:23"><name pos:start="151:13" pos:end="151:23">TARGET_I386</name></expr></argument>)</argument_list></call></expr></cpp:if>

                    <comment type="block" pos:start="153:21" pos:end="157:54">/* simulate a real cpu exception. On i386, it can

                       trigger new exceptions, but we do not handle

                       double or triple faults yet. */</comment>

                    <expr_stmt pos:start="159:21" pos:end="165:61"><expr pos:start="159:21" pos:end="165:60"><call pos:start="159:21" pos:end="165:60"><name pos:start="159:21" pos:end="159:32">do_interrupt</name><argument_list pos:start="159:33" pos:end="165:60">(<argument pos:start="159:34" pos:end="159:53"><expr pos:start="159:34" pos:end="159:53"><name pos:start="159:34" pos:end="159:53"><name pos:start="159:34" pos:end="159:36">env</name><operator pos:start="159:37" pos:end="159:38">-&gt;</operator><name pos:start="159:39" pos:end="159:53">exception_index</name></name></expr></argument>,

                                 <argument pos:start="161:34" pos:end="161:54"><expr pos:start="161:34" pos:end="161:54"><name pos:start="161:34" pos:end="161:54"><name pos:start="161:34" pos:end="161:36">env</name><operator pos:start="161:37" pos:end="161:38">-&gt;</operator><name pos:start="161:39" pos:end="161:54">exception_is_int</name></name></expr></argument>,

                                 <argument pos:start="163:34" pos:end="163:48"><expr pos:start="163:34" pos:end="163:48"><name pos:start="163:34" pos:end="163:48"><name pos:start="163:34" pos:end="163:36">env</name><operator pos:start="163:37" pos:end="163:38">-&gt;</operator><name pos:start="163:39" pos:end="163:48">error_code</name></name></expr></argument>,

                                 <argument pos:start="165:34" pos:end="165:56"><expr pos:start="165:34" pos:end="165:56"><name pos:start="165:34" pos:end="165:56"><name pos:start="165:34" pos:end="165:36">env</name><operator pos:start="165:37" pos:end="165:38">-&gt;</operator><name pos:start="165:39" pos:end="165:56">exception_next_eip</name></name></expr></argument>, <argument pos:start="165:59" pos:end="165:59"><expr pos:start="165:59" pos:end="165:59"><literal type="number" pos:start="165:59" pos:end="165:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="167:21" pos:end="167:48">/* successfully delivered */</comment>

                    <expr_stmt pos:start="169:21" pos:end="172:0"><expr pos:start="169:21" pos:end="169:43"><name pos:start="169:21" pos:end="169:38"><name pos:start="169:21" pos:end="169:23">env</name><operator pos:start="169:24" pos:end="169:25">-&gt;</operator><name pos:start="169:26" pos:end="169:38">old_exception</name></name> <operator pos:start="169:40" pos:end="169:40">=</operator> <operator pos:start="169:42" pos:end="169:42">-</operator><literal type="number" pos:start="169:43" pos:end="169:43">1</literal></expr>;</expr_stmt>

<cpp:elif pos:start="171:1" pos:end="171:25">#<cpp:directive pos:start="171:2" pos:end="171:5">elif</cpp:directive> <expr pos:start="171:7" pos:end="171:25"><call pos:start="171:7" pos:end="171:25"><name pos:start="171:7" pos:end="171:13">defined</name><argument_list pos:start="171:14" pos:end="171:25">(<argument pos:start="171:15" pos:end="171:24"><expr pos:start="171:15" pos:end="171:24"><name pos:start="171:15" pos:end="171:24">TARGET_PPC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

                    <expr_stmt pos:start="173:21" pos:end="176:0"><expr pos:start="173:21" pos:end="173:37"><call pos:start="173:21" pos:end="173:37"><name pos:start="173:21" pos:end="173:32">do_interrupt</name><argument_list pos:start="173:33" pos:end="173:37">(<argument pos:start="173:34" pos:end="173:36"><expr pos:start="173:34" pos:end="173:36"><name pos:start="173:34" pos:end="173:36">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif pos:start="175:1" pos:end="175:26">#<cpp:directive pos:start="175:2" pos:end="175:5">elif</cpp:directive> <expr pos:start="175:7" pos:end="175:26"><call pos:start="175:7" pos:end="175:26"><name pos:start="175:7" pos:end="175:13">defined</name><argument_list pos:start="175:14" pos:end="175:26">(<argument pos:start="175:15" pos:end="175:25"><expr pos:start="175:15" pos:end="175:25"><name pos:start="175:15" pos:end="175:25">TARGET_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

                    <expr_stmt pos:start="177:21" pos:end="180:0"><expr pos:start="177:21" pos:end="177:37"><call pos:start="177:21" pos:end="177:37"><name pos:start="177:21" pos:end="177:32">do_interrupt</name><argument_list pos:start="177:33" pos:end="177:37">(<argument pos:start="177:34" pos:end="177:36"><expr pos:start="177:34" pos:end="177:36"><name pos:start="177:34" pos:end="177:36">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif pos:start="179:1" pos:end="179:27">#<cpp:directive pos:start="179:2" pos:end="179:5">elif</cpp:directive> <expr pos:start="179:7" pos:end="179:27"><call pos:start="179:7" pos:end="179:27"><name pos:start="179:7" pos:end="179:13">defined</name><argument_list pos:start="179:14" pos:end="179:27">(<argument pos:start="179:15" pos:end="179:26"><expr pos:start="179:15" pos:end="179:26"><name pos:start="179:15" pos:end="179:26">TARGET_SPARC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

                    <expr_stmt pos:start="181:21" pos:end="184:0"><expr pos:start="181:21" pos:end="181:54"><call pos:start="181:21" pos:end="181:54"><name pos:start="181:21" pos:end="181:32">do_interrupt</name><argument_list pos:start="181:33" pos:end="181:54">(<argument pos:start="181:34" pos:end="181:53"><expr pos:start="181:34" pos:end="181:53"><name pos:start="181:34" pos:end="181:53"><name pos:start="181:34" pos:end="181:36">env</name><operator pos:start="181:37" pos:end="181:38">-&gt;</operator><name pos:start="181:39" pos:end="181:53">exception_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif pos:start="183:1" pos:end="183:25">#<cpp:directive pos:start="183:2" pos:end="183:5">elif</cpp:directive> <expr pos:start="183:7" pos:end="183:25"><call pos:start="183:7" pos:end="183:25"><name pos:start="183:7" pos:end="183:13">defined</name><argument_list pos:start="183:14" pos:end="183:25">(<argument pos:start="183:15" pos:end="183:24"><expr pos:start="183:15" pos:end="183:24"><name pos:start="183:15" pos:end="183:24">TARGET_ARM</name></expr></argument>)</argument_list></call></expr></cpp:elif>

                    <expr_stmt pos:start="185:21" pos:end="188:0"><expr pos:start="185:21" pos:end="185:37"><call pos:start="185:21" pos:end="185:37"><name pos:start="185:21" pos:end="185:32">do_interrupt</name><argument_list pos:start="185:33" pos:end="185:37">(<argument pos:start="185:34" pos:end="185:36"><expr pos:start="185:34" pos:end="185:36"><name pos:start="185:34" pos:end="185:36">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif pos:start="187:1" pos:end="187:25">#<cpp:directive pos:start="187:2" pos:end="187:5">elif</cpp:directive> <expr pos:start="187:7" pos:end="187:25"><call pos:start="187:7" pos:end="187:25"><name pos:start="187:7" pos:end="187:13">defined</name><argument_list pos:start="187:14" pos:end="187:25">(<argument pos:start="187:15" pos:end="187:24"><expr pos:start="187:15" pos:end="187:24"><name pos:start="187:15" pos:end="187:24">TARGET_SH4</name></expr></argument>)</argument_list></call></expr></cpp:elif>

		    <expr_stmt pos:start="189:21" pos:end="192:0"><expr pos:start="189:21" pos:end="189:37"><call pos:start="189:21" pos:end="189:37"><name pos:start="189:21" pos:end="189:32">do_interrupt</name><argument_list pos:start="189:33" pos:end="189:37">(<argument pos:start="189:34" pos:end="189:36"><expr pos:start="189:34" pos:end="189:36"><name pos:start="189:34" pos:end="189:36">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif pos:start="191:1" pos:end="191:27">#<cpp:directive pos:start="191:2" pos:end="191:5">elif</cpp:directive> <expr pos:start="191:7" pos:end="191:27"><call pos:start="191:7" pos:end="191:27"><name pos:start="191:7" pos:end="191:13">defined</name><argument_list pos:start="191:14" pos:end="191:27">(<argument pos:start="191:15" pos:end="191:26"><expr pos:start="191:15" pos:end="191:26"><name pos:start="191:15" pos:end="191:26">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:elif>

                    <expr_stmt pos:start="193:21" pos:end="196:0"><expr pos:start="193:21" pos:end="193:37"><call pos:start="193:21" pos:end="193:37"><name pos:start="193:21" pos:end="193:32">do_interrupt</name><argument_list pos:start="193:33" pos:end="193:37">(<argument pos:start="193:34" pos:end="193:36"><expr pos:start="193:34" pos:end="193:36"><name pos:start="193:34" pos:end="193:36">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif pos:start="195:1" pos:end="195:26">#<cpp:directive pos:start="195:2" pos:end="195:5">elif</cpp:directive> <expr pos:start="195:7" pos:end="195:26"><call pos:start="195:7" pos:end="195:26"><name pos:start="195:7" pos:end="195:13">defined</name><argument_list pos:start="195:14" pos:end="195:26">(<argument pos:start="195:15" pos:end="195:25"><expr pos:start="195:15" pos:end="195:25"><name pos:start="195:15" pos:end="195:25">TARGET_CRIS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

                    <expr_stmt pos:start="197:21" pos:end="200:0"><expr pos:start="197:21" pos:end="197:37"><call pos:start="197:21" pos:end="197:37"><name pos:start="197:21" pos:end="197:32">do_interrupt</name><argument_list pos:start="197:33" pos:end="197:37">(<argument pos:start="197:34" pos:end="197:36"><expr pos:start="197:34" pos:end="197:36"><name pos:start="197:34" pos:end="197:36">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif pos:start="199:1" pos:end="199:26">#<cpp:directive pos:start="199:2" pos:end="199:5">elif</cpp:directive> <expr pos:start="199:7" pos:end="199:26"><call pos:start="199:7" pos:end="199:26"><name pos:start="199:7" pos:end="199:13">defined</name><argument_list pos:start="199:14" pos:end="199:26">(<argument pos:start="199:15" pos:end="199:25"><expr pos:start="199:15" pos:end="199:25"><name pos:start="199:15" pos:end="199:25">TARGET_M68K</name></expr></argument>)</argument_list></call></expr></cpp:elif>

                    <expr_stmt pos:start="201:21" pos:end="204:0"><expr pos:start="201:21" pos:end="201:35"><call pos:start="201:21" pos:end="201:35"><name pos:start="201:21" pos:end="201:32">do_interrupt</name><argument_list pos:start="201:33" pos:end="201:35">(<argument pos:start="201:34" pos:end="201:34"><expr pos:start="201:34" pos:end="201:34"><literal type="number" pos:start="201:34" pos:end="201:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="203:1" pos:end="203:6">#<cpp:directive pos:start="203:2" pos:end="203:6">endif</cpp:directive></cpp:endif>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="207:17" pos:end="207:42"><expr pos:start="207:17" pos:end="207:41"><name pos:start="207:17" pos:end="207:36"><name pos:start="207:17" pos:end="207:19">env</name><operator pos:start="207:20" pos:end="207:21">-&gt;</operator><name pos:start="207:22" pos:end="207:36">exception_index</name></name> <operator pos:start="207:38" pos:end="207:38">=</operator> <operator pos:start="207:40" pos:end="207:40">-</operator><literal type="number" pos:start="207:41" pos:end="207:41">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="211:1" pos:end="211:16">#<cpp:directive pos:start="211:2" pos:end="211:6">ifdef</cpp:directive> <name pos:start="211:8" pos:end="211:16">USE_KQEMU</name></cpp:ifdef>

            <if_stmt pos:start="213:13" pos:end="260:0"><if pos:start="213:13" pos:end="260:0">if <condition pos:start="213:16" pos:end="213:64">(<expr pos:start="213:17" pos:end="213:63"><call pos:start="213:17" pos:end="213:32"><name pos:start="213:17" pos:end="213:27">kqemu_is_ok</name><argument_list pos:start="213:28" pos:end="213:32">(<argument pos:start="213:29" pos:end="213:31"><expr pos:start="213:29" pos:end="213:31"><name pos:start="213:29" pos:end="213:31">env</name></expr></argument>)</argument_list></call> <operator pos:start="213:34" pos:end="213:35">&amp;&amp;</operator> <name pos:start="213:37" pos:end="213:58"><name pos:start="213:37" pos:end="213:39">env</name><operator pos:start="213:40" pos:end="213:41">-&gt;</operator><name pos:start="213:42" pos:end="213:58">interrupt_request</name></name> <operator pos:start="213:60" pos:end="213:61">==</operator> <literal type="number" pos:start="213:63" pos:end="213:63">0</literal></expr>)</condition> <block pos:start="213:66" pos:end="260:0">{<block_content pos:start="215:17" pos:end="255:17">

                <decl_stmt pos:start="215:17" pos:end="215:24"><decl pos:start="215:17" pos:end="215:23"><type pos:start="215:17" pos:end="215:19"><name pos:start="215:17" pos:end="215:19">int</name></type> <name pos:start="215:21" pos:end="215:23">ret</name></decl>;</decl_stmt>

                <expr_stmt pos:start="217:17" pos:end="217:91"><expr pos:start="217:17" pos:end="217:90"><name pos:start="217:17" pos:end="217:27"><name pos:start="217:17" pos:end="217:19">env</name><operator pos:start="217:20" pos:end="217:21">-&gt;</operator><name pos:start="217:22" pos:end="217:27">eflags</name></name> <operator pos:start="217:29" pos:end="217:29">=</operator> <name pos:start="217:31" pos:end="217:41"><name pos:start="217:31" pos:end="217:33">env</name><operator pos:start="217:34" pos:end="217:35">-&gt;</operator><name pos:start="217:36" pos:end="217:41">eflags</name></name> <operator pos:start="217:43" pos:end="217:43">|</operator> <name pos:start="217:45" pos:end="217:59"><name pos:start="217:45" pos:end="217:52">cc_table</name><index pos:start="217:53" pos:end="217:59">[<expr pos:start="217:54" pos:end="217:58"><name pos:start="217:54" pos:end="217:58">CC_OP</name></expr>]</index></name><operator pos:start="217:60" pos:end="217:60">.</operator><call pos:start="217:61" pos:end="217:73"><name pos:start="217:61" pos:end="217:71">compute_all</name><argument_list pos:start="217:72" pos:end="217:73">()</argument_list></call> <operator pos:start="217:75" pos:end="217:75">|</operator> <operator pos:start="217:77" pos:end="217:77">(</operator><name pos:start="217:78" pos:end="217:79">DF</name> <operator pos:start="217:81" pos:end="217:81">&amp;</operator> <name pos:start="217:83" pos:end="217:89">DF_MASK</name><operator pos:start="217:90" pos:end="217:90">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="219:17" pos:end="219:42"><expr pos:start="219:17" pos:end="219:41"><name pos:start="219:17" pos:end="219:19">ret</name> <operator pos:start="219:21" pos:end="219:21">=</operator> <call pos:start="219:23" pos:end="219:41"><name pos:start="219:23" pos:end="219:36">kqemu_cpu_exec</name><argument_list pos:start="219:37" pos:end="219:41">(<argument pos:start="219:38" pos:end="219:40"><expr pos:start="219:38" pos:end="219:40"><name pos:start="219:38" pos:end="219:40">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="221:17" pos:end="221:56">/* put eflags in CPU temporary format */</comment>

                <expr_stmt pos:start="223:17" pos:end="223:81"><expr pos:start="223:17" pos:end="223:80"><name pos:start="223:17" pos:end="223:22">CC_SRC</name> <operator pos:start="223:24" pos:end="223:24">=</operator> <name pos:start="223:26" pos:end="223:36"><name pos:start="223:26" pos:end="223:28">env</name><operator pos:start="223:29" pos:end="223:30">-&gt;</operator><name pos:start="223:31" pos:end="223:36">eflags</name></name> <operator pos:start="223:38" pos:end="223:38">&amp;</operator> <operator pos:start="223:40" pos:end="223:40">(</operator><name pos:start="223:41" pos:end="223:44">CC_O</name> <operator pos:start="223:46" pos:end="223:46">|</operator> <name pos:start="223:48" pos:end="223:51">CC_S</name> <operator pos:start="223:53" pos:end="223:53">|</operator> <name pos:start="223:55" pos:end="223:58">CC_Z</name> <operator pos:start="223:60" pos:end="223:60">|</operator> <name pos:start="223:62" pos:end="223:65">CC_A</name> <operator pos:start="223:67" pos:end="223:67">|</operator> <name pos:start="223:69" pos:end="223:72">CC_P</name> <operator pos:start="223:74" pos:end="223:74">|</operator> <name pos:start="223:76" pos:end="223:79">CC_C</name><operator pos:start="223:80" pos:end="223:80">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="225:17" pos:end="225:57"><expr pos:start="225:17" pos:end="225:56"><name pos:start="225:17" pos:end="225:18">DF</name> <operator pos:start="225:20" pos:end="225:20">=</operator> <literal type="number" pos:start="225:22" pos:end="225:24">1</literal> <operator pos:start="225:24" pos:end="225:24">-</operator> <operator pos:start="225:26" pos:end="225:26">(</operator><literal type="number" pos:start="225:27" pos:end="225:27">2</literal> <operator pos:start="225:29" pos:end="225:29">*</operator> <operator pos:start="225:31" pos:end="225:31">(</operator><operator pos:start="225:32" pos:end="225:32">(</operator><name pos:start="225:33" pos:end="225:43"><name pos:start="225:33" pos:end="225:35">env</name><operator pos:start="225:36" pos:end="225:37">-&gt;</operator><name pos:start="225:38" pos:end="225:43">eflags</name></name> <operator pos:start="225:45" pos:end="225:46">&gt;&gt;</operator> <literal type="number" pos:start="225:48" pos:end="225:49">10</literal><operator pos:start="225:50" pos:end="225:50">)</operator> <operator pos:start="225:52" pos:end="225:52">&amp;</operator> <literal type="number" pos:start="225:54" pos:end="225:54">1</literal><operator pos:start="225:55" pos:end="225:55">)</operator><operator pos:start="225:56" pos:end="225:56">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="227:17" pos:end="227:37"><expr pos:start="227:17" pos:end="227:36"><name pos:start="227:17" pos:end="227:21">CC_OP</name> <operator pos:start="227:23" pos:end="227:23">=</operator> <name pos:start="227:25" pos:end="227:36">CC_OP_EFLAGS</name></expr>;</expr_stmt>

                <expr_stmt pos:start="229:17" pos:end="229:84"><expr pos:start="229:17" pos:end="229:83"><name pos:start="229:17" pos:end="229:27"><name pos:start="229:17" pos:end="229:19">env</name><operator pos:start="229:20" pos:end="229:21">-&gt;</operator><name pos:start="229:22" pos:end="229:27">eflags</name></name> <operator pos:start="229:29" pos:end="229:30">&amp;=</operator> <operator pos:start="229:32" pos:end="229:32">~</operator><operator pos:start="229:33" pos:end="229:33">(</operator><name pos:start="229:34" pos:end="229:40">DF_MASK</name> <operator pos:start="229:42" pos:end="229:42">|</operator> <name pos:start="229:44" pos:end="229:47">CC_O</name> <operator pos:start="229:49" pos:end="229:49">|</operator> <name pos:start="229:51" pos:end="229:54">CC_S</name> <operator pos:start="229:56" pos:end="229:56">|</operator> <name pos:start="229:58" pos:end="229:61">CC_Z</name> <operator pos:start="229:63" pos:end="229:63">|</operator> <name pos:start="229:65" pos:end="229:68">CC_A</name> <operator pos:start="229:70" pos:end="229:70">|</operator> <name pos:start="229:72" pos:end="229:75">CC_P</name> <operator pos:start="229:77" pos:end="229:77">|</operator> <name pos:start="229:79" pos:end="229:82">CC_C</name><operator pos:start="229:83" pos:end="229:83">)</operator></expr>;</expr_stmt>

                <if_stmt pos:start="231:17" pos:end="255:17"><if pos:start="231:17" pos:end="237:17">if <condition pos:start="231:20" pos:end="231:29">(<expr pos:start="231:21" pos:end="231:28"><name pos:start="231:21" pos:end="231:23">ret</name> <operator pos:start="231:25" pos:end="231:26">==</operator> <literal type="number" pos:start="231:28" pos:end="231:28">1</literal></expr>)</condition> <block pos:start="231:31" pos:end="237:17">{<block_content pos:start="235:21" pos:end="235:45">

                    <comment type="block" pos:start="233:21" pos:end="233:35">/* exception */</comment>

                    <expr_stmt pos:start="235:21" pos:end="235:45"><expr pos:start="235:21" pos:end="235:44"><call pos:start="235:21" pos:end="235:44"><name pos:start="235:21" pos:end="235:27">longjmp</name><argument_list pos:start="235:28" pos:end="235:44">(<argument pos:start="235:29" pos:end="235:40"><expr pos:start="235:29" pos:end="235:40"><name pos:start="235:29" pos:end="235:40"><name pos:start="235:29" pos:end="235:31">env</name><operator pos:start="235:32" pos:end="235:33">-&gt;</operator><name pos:start="235:34" pos:end="235:40">jmp_env</name></name></expr></argument>, <argument pos:start="235:43" pos:end="235:43"><expr pos:start="235:43" pos:end="235:43"><literal type="number" pos:start="235:43" pos:end="235:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="237:19" pos:end="241:17">else if <condition pos:start="237:27" pos:end="237:36">(<expr pos:start="237:28" pos:end="237:35"><name pos:start="237:28" pos:end="237:30">ret</name> <operator pos:start="237:32" pos:end="237:33">==</operator> <literal type="number" pos:start="237:35" pos:end="237:35">2</literal></expr>)</condition> <block pos:start="237:38" pos:end="241:17">{<block_content>

                    <comment type="block" pos:start="239:21" pos:end="239:50">/* softmmu execution needed */</comment>

                </block_content>}</block></if> <else pos:start="241:19" pos:end="255:17">else <block pos:start="241:24" pos:end="255:17">{<block_content pos:start="243:21" pos:end="253:21">

                    <if_stmt pos:start="243:21" pos:end="253:21"><if pos:start="243:21" pos:end="247:21">if <condition pos:start="243:24" pos:end="243:52">(<expr pos:start="243:25" pos:end="243:51"><name pos:start="243:25" pos:end="243:46"><name pos:start="243:25" pos:end="243:27">env</name><operator pos:start="243:28" pos:end="243:29">-&gt;</operator><name pos:start="243:30" pos:end="243:46">interrupt_request</name></name> <operator pos:start="243:48" pos:end="243:49">!=</operator> <literal type="number" pos:start="243:51" pos:end="243:51">0</literal></expr>)</condition> <block pos:start="243:54" pos:end="247:21">{<block_content>

                        <comment type="block" pos:start="245:25" pos:end="245:76">/* hardware interrupt will be executed just after */</comment>

                    </block_content>}</block></if> <else pos:start="247:23" pos:end="253:21">else <block pos:start="247:28" pos:end="253:21">{<block_content pos:start="251:25" pos:end="251:49">

                        <comment type="block" pos:start="249:25" pos:end="249:51">/* otherwise, we restart */</comment>

                        <expr_stmt pos:start="251:25" pos:end="251:49"><expr pos:start="251:25" pos:end="251:48"><call pos:start="251:25" pos:end="251:48"><name pos:start="251:25" pos:end="251:31">longjmp</name><argument_list pos:start="251:32" pos:end="251:48">(<argument pos:start="251:33" pos:end="251:44"><expr pos:start="251:33" pos:end="251:44"><name pos:start="251:33" pos:end="251:44"><name pos:start="251:33" pos:end="251:35">env</name><operator pos:start="251:36" pos:end="251:37">-&gt;</operator><name pos:start="251:38" pos:end="251:44">jmp_env</name></name></expr></argument>, <argument pos:start="251:47" pos:end="251:47"><expr pos:start="251:47" pos:end="251:47"><literal type="number" pos:start="251:47" pos:end="251:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="259:1" pos:end="259:6">#<cpp:directive pos:start="259:2" pos:end="259:6">endif</cpp:directive></cpp:endif>



            <expr_stmt pos:start="263:13" pos:end="263:19"><expr pos:start="263:13" pos:end="263:18"><name pos:start="263:13" pos:end="263:14">T0</name> <operator pos:start="263:16" pos:end="263:16">=</operator> <literal type="number" pos:start="263:18" pos:end="263:18">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="263:21" pos:end="263:50">/* force lookup of first TB */</comment>

            <for pos:start="265:13" pos:end="855:13">for<control pos:start="265:16" pos:end="265:19">(<init pos:start="265:17" pos:end="265:17">;</init><condition pos:start="265:18" pos:end="265:18">;</condition><incr/>)</control> <block pos:start="265:21" pos:end="855:13">{<block_content pos:start="267:17" pos:end="854:0">

                <expr_stmt pos:start="267:17" pos:end="267:31"><expr pos:start="267:17" pos:end="267:30"><call pos:start="267:17" pos:end="267:30"><name pos:start="267:17" pos:end="267:28">SAVE_GLOBALS</name><argument_list pos:start="267:29" pos:end="267:30">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="269:17" pos:end="269:59"><expr pos:start="269:17" pos:end="269:58"><name pos:start="269:17" pos:end="269:33">interrupt_request</name> <operator pos:start="269:35" pos:end="269:35">=</operator> <name pos:start="269:37" pos:end="269:58"><name pos:start="269:37" pos:end="269:39">env</name><operator pos:start="269:40" pos:end="269:41">-&gt;</operator><name pos:start="269:42" pos:end="269:58">interrupt_request</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="271:17" pos:end="620:0"><if pos:start="271:17" pos:end="620:0">if <condition pos:start="271:20" pos:end="279:33">(<expr pos:start="271:21" pos:end="278:0"><call pos:start="271:21" pos:end="274:0"><name pos:start="271:21" pos:end="271:36">__builtin_expect</name><argument_list pos:start="271:37" pos:end="274:0">(<argument pos:start="271:38" pos:end="271:54"><expr pos:start="271:38" pos:end="271:54"><name pos:start="271:38" pos:end="271:54">interrupt_request</name></expr></argument>, <argument pos:start="271:57" pos:end="271:57"><expr pos:start="271:57" pos:end="271:57"><literal type="number" pos:start="271:57" pos:end="271:57">0</literal></expr></argument>)</argument_list></call>

<cpp:if pos:start="273:1" pos:end="273:24">#<cpp:directive pos:start="273:2" pos:end="273:3">if</cpp:directive> <expr pos:start="273:5" pos:end="273:24"><call pos:start="273:5" pos:end="273:24"><name pos:start="273:5" pos:end="273:11">defined</name><argument_list pos:start="273:12" pos:end="273:24">(<argument pos:start="273:13" pos:end="273:23"><expr pos:start="273:13" pos:end="273:23"><name pos:start="273:13" pos:end="273:23">TARGET_I386</name></expr></argument>)</argument_list></call></expr></cpp:if>

			<operator pos:start="275:25" pos:end="275:26">&amp;&amp;</operator> <name pos:start="275:28" pos:end="275:38"><name pos:start="275:28" pos:end="275:30">env</name><operator pos:start="275:31" pos:end="275:32">-&gt;</operator><name pos:start="275:33" pos:end="275:38">hflags</name></name> <operator pos:start="275:40" pos:end="275:40">&amp;</operator> <name pos:start="275:42" pos:end="278:0">HF_GIF_MASK</name></expr>

<cpp:endif pos:start="277:1" pos:end="277:6">#<cpp:directive pos:start="277:2" pos:end="277:6">endif</cpp:directive></cpp:endif>

				)</condition> <block pos:start="279:35" pos:end="620:0">{<block_content pos:start="281:21" pos:end="615:21">

                    <if_stmt pos:start="281:21" pos:end="294:0"><if pos:start="281:21" pos:end="294:0">if <condition pos:start="281:24" pos:end="281:64">(<expr pos:start="281:25" pos:end="281:63"><name pos:start="281:25" pos:end="281:41">interrupt_request</name> <operator pos:start="281:43" pos:end="281:43">&amp;</operator> <name pos:start="281:45" pos:end="281:63">CPU_INTERRUPT_DEBUG</name></expr>)</condition> <block pos:start="281:66" pos:end="294:0">{<block_content pos:start="283:25" pos:end="287:40">

                        <expr_stmt pos:start="283:25" pos:end="283:71"><expr pos:start="283:25" pos:end="283:70"><name pos:start="283:25" pos:end="283:46"><name pos:start="283:25" pos:end="283:27">env</name><operator pos:start="283:28" pos:end="283:29">-&gt;</operator><name pos:start="283:30" pos:end="283:46">interrupt_request</name></name> <operator pos:start="283:48" pos:end="283:49">&amp;=</operator> <operator pos:start="283:51" pos:end="283:51">~</operator><name pos:start="283:52" pos:end="283:70">CPU_INTERRUPT_DEBUG</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="285:25" pos:end="285:58"><expr pos:start="285:25" pos:end="285:57"><name pos:start="285:25" pos:end="285:44"><name pos:start="285:25" pos:end="285:27">env</name><operator pos:start="285:28" pos:end="285:29">-&gt;</operator><name pos:start="285:30" pos:end="285:44">exception_index</name></name> <operator pos:start="285:46" pos:end="285:46">=</operator> <name pos:start="285:48" pos:end="285:57">EXCP_DEBUG</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="287:25" pos:end="287:40"><expr pos:start="287:25" pos:end="287:39"><call pos:start="287:25" pos:end="287:39"><name pos:start="287:25" pos:end="287:37">cpu_loop_exit</name><argument_list pos:start="287:38" pos:end="287:39">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

<cpp:if pos:start="291:1" pos:end="293:72">#<cpp:directive pos:start="291:2" pos:end="291:3">if</cpp:directive> <expr pos:start="291:5" pos:end="293:72"><call pos:start="291:5" pos:end="291:23"><name pos:start="291:5" pos:end="291:11">defined</name><argument_list pos:start="291:12" pos:end="291:23">(<argument pos:start="291:13" pos:end="291:22"><expr pos:start="291:13" pos:end="291:22"><name pos:start="291:13" pos:end="291:22">TARGET_ARM</name></expr></argument>)</argument_list></call> <operator pos:start="291:25" pos:end="291:26">||</operator> <call pos:start="291:28" pos:end="291:48"><name pos:start="291:28" pos:end="291:34">defined</name><argument_list pos:start="291:35" pos:end="291:48">(<argument pos:start="291:36" pos:end="291:47"><expr pos:start="291:36" pos:end="291:47"><name pos:start="291:36" pos:end="291:47">TARGET_SPARC</name></expr></argument>)</argument_list></call> <operator pos:start="291:50" pos:end="291:51">||</operator> <call pos:start="291:53" pos:end="291:72"><name pos:start="291:53" pos:end="291:59">defined</name><argument_list pos:start="291:60" pos:end="291:72">(<argument pos:start="291:61" pos:end="291:71"><expr pos:start="291:61" pos:end="291:71"><name pos:start="291:61" pos:end="291:71">TARGET_MIPS</name></expr></argument>)</argument_list></call> <operator pos:start="291:74" pos:end="291:75">||</operator> \

    <call pos:start="293:5" pos:end="293:23"><name pos:start="293:5" pos:end="293:11">defined</name><argument_list pos:start="293:12" pos:end="293:23">(<argument pos:start="293:13" pos:end="293:22"><expr pos:start="293:13" pos:end="293:22"><name pos:start="293:13" pos:end="293:22">TARGET_PPC</name></expr></argument>)</argument_list></call> <operator pos:start="293:25" pos:end="293:26">||</operator> <call pos:start="293:28" pos:end="293:48"><name pos:start="293:28" pos:end="293:34">defined</name><argument_list pos:start="293:35" pos:end="293:48">(<argument pos:start="293:36" pos:end="293:47"><expr pos:start="293:36" pos:end="293:47"><name pos:start="293:36" pos:end="293:47">TARGET_ALPHA</name></expr></argument>)</argument_list></call> <operator pos:start="293:50" pos:end="293:51">||</operator> <call pos:start="293:53" pos:end="293:72"><name pos:start="293:53" pos:end="293:59">defined</name><argument_list pos:start="293:60" pos:end="293:72">(<argument pos:start="293:61" pos:end="293:71"><expr pos:start="293:61" pos:end="293:71"><name pos:start="293:61" pos:end="293:71">TARGET_CRIS</name></expr></argument>)</argument_list></call></expr></cpp:if>

                    <if_stmt pos:start="295:21" pos:end="310:0"><if pos:start="295:21" pos:end="310:0">if <condition pos:start="295:24" pos:end="295:63">(<expr pos:start="295:25" pos:end="295:62"><name pos:start="295:25" pos:end="295:41">interrupt_request</name> <operator pos:start="295:43" pos:end="295:43">&amp;</operator> <name pos:start="295:45" pos:end="295:62">CPU_INTERRUPT_HALT</name></expr>)</condition> <block pos:start="295:65" pos:end="310:0">{<block_content pos:start="297:25" pos:end="303:40">

                        <expr_stmt pos:start="297:25" pos:end="297:70"><expr pos:start="297:25" pos:end="297:69"><name pos:start="297:25" pos:end="297:46"><name pos:start="297:25" pos:end="297:27">env</name><operator pos:start="297:28" pos:end="297:29">-&gt;</operator><name pos:start="297:30" pos:end="297:46">interrupt_request</name></name> <operator pos:start="297:48" pos:end="297:49">&amp;=</operator> <operator pos:start="297:51" pos:end="297:51">~</operator><name pos:start="297:52" pos:end="297:69">CPU_INTERRUPT_HALT</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="299:25" pos:end="299:40"><expr pos:start="299:25" pos:end="299:39"><name pos:start="299:25" pos:end="299:35"><name pos:start="299:25" pos:end="299:27">env</name><operator pos:start="299:28" pos:end="299:29">-&gt;</operator><name pos:start="299:30" pos:end="299:35">halted</name></name> <operator pos:start="299:37" pos:end="299:37">=</operator> <literal type="number" pos:start="299:39" pos:end="299:39">1</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="301:25" pos:end="301:56"><expr pos:start="301:25" pos:end="301:55"><name pos:start="301:25" pos:end="301:44"><name pos:start="301:25" pos:end="301:27">env</name><operator pos:start="301:28" pos:end="301:29">-&gt;</operator><name pos:start="301:30" pos:end="301:44">exception_index</name></name> <operator pos:start="301:46" pos:end="301:46">=</operator> <name pos:start="301:48" pos:end="301:55">EXCP_HLT</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="303:25" pos:end="303:40"><expr pos:start="303:25" pos:end="303:39"><call pos:start="303:25" pos:end="303:39"><name pos:start="303:25" pos:end="303:37">cpu_loop_exit</name><argument_list pos:start="303:38" pos:end="303:39">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="307:1" pos:end="307:6">#<cpp:directive pos:start="307:2" pos:end="307:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="309:1" pos:end="309:24">#<cpp:directive pos:start="309:2" pos:end="309:3">if</cpp:directive> <expr pos:start="309:5" pos:end="309:24"><call pos:start="309:5" pos:end="309:24"><name pos:start="309:5" pos:end="309:11">defined</name><argument_list pos:start="309:12" pos:end="309:24">(<argument pos:start="309:13" pos:end="309:23"><expr pos:start="309:13" pos:end="309:23"><name pos:start="309:13" pos:end="309:23">TARGET_I386</name></expr></argument>)</argument_list></call></expr></cpp:if>

                    <if_stmt pos:start="311:21" pos:end="406:0"><if pos:start="311:21" pos:end="323:21">if <condition pos:start="311:24" pos:end="313:53">(<expr pos:start="311:25" pos:end="313:52"><operator pos:start="311:25" pos:end="311:25">(</operator><name pos:start="311:26" pos:end="311:42">interrupt_request</name> <operator pos:start="311:44" pos:end="311:44">&amp;</operator> <name pos:start="311:46" pos:end="311:62">CPU_INTERRUPT_SMI</name><operator pos:start="311:63" pos:end="311:63">)</operator> <operator pos:start="311:65" pos:end="311:66">&amp;&amp;</operator>

                        <operator pos:start="313:25" pos:end="313:25">!</operator><operator pos:start="313:26" pos:end="313:26">(</operator><name pos:start="313:27" pos:end="313:37"><name pos:start="313:27" pos:end="313:29">env</name><operator pos:start="313:30" pos:end="313:31">-&gt;</operator><name pos:start="313:32" pos:end="313:37">hflags</name></name> <operator pos:start="313:39" pos:end="313:39">&amp;</operator> <name pos:start="313:41" pos:end="313:51">HF_SMM_MASK</name><operator pos:start="313:52" pos:end="313:52">)</operator></expr>)</condition> <block pos:start="313:55" pos:end="323:21">{<block_content pos:start="315:25" pos:end="321:36">

                        <expr_stmt pos:start="315:25" pos:end="315:58"><expr pos:start="315:25" pos:end="315:57"><call pos:start="315:25" pos:end="315:57"><name pos:start="315:25" pos:end="315:43">svm_check_intercept</name><argument_list pos:start="315:44" pos:end="315:57">(<argument pos:start="315:45" pos:end="315:56"><expr pos:start="315:45" pos:end="315:56"><name pos:start="315:45" pos:end="315:56">SVM_EXIT_SMI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="317:25" pos:end="317:69"><expr pos:start="317:25" pos:end="317:68"><name pos:start="317:25" pos:end="317:46"><name pos:start="317:25" pos:end="317:27">env</name><operator pos:start="317:28" pos:end="317:29">-&gt;</operator><name pos:start="317:30" pos:end="317:46">interrupt_request</name></name> <operator pos:start="317:48" pos:end="317:49">&amp;=</operator> <operator pos:start="317:51" pos:end="317:51">~</operator><name pos:start="317:52" pos:end="317:68">CPU_INTERRUPT_SMI</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="319:25" pos:end="319:39"><expr pos:start="319:25" pos:end="319:38"><call pos:start="319:25" pos:end="319:38"><name pos:start="319:25" pos:end="319:36">do_smm_enter</name><argument_list pos:start="319:37" pos:end="319:38">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="321:25" pos:end="321:36"><expr pos:start="321:25" pos:end="321:35"><name pos:start="321:25" pos:end="321:35">BREAK_CHAIN</name></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="323:23" pos:end="335:21">else if <condition pos:start="323:31" pos:end="325:53">(<expr pos:start="323:32" pos:end="325:52"><operator pos:start="323:32" pos:end="323:32">(</operator><name pos:start="323:33" pos:end="323:49">interrupt_request</name> <operator pos:start="323:51" pos:end="323:51">&amp;</operator> <name pos:start="323:53" pos:end="323:69">CPU_INTERRUPT_NMI</name><operator pos:start="323:70" pos:end="323:70">)</operator> <operator pos:start="323:72" pos:end="323:73">&amp;&amp;</operator>

                        <operator pos:start="325:25" pos:end="325:25">!</operator><operator pos:start="325:26" pos:end="325:26">(</operator><name pos:start="325:27" pos:end="325:37"><name pos:start="325:27" pos:end="325:29">env</name><operator pos:start="325:30" pos:end="325:31">-&gt;</operator><name pos:start="325:32" pos:end="325:37">hflags</name></name> <operator pos:start="325:39" pos:end="325:39">&amp;</operator> <name pos:start="325:41" pos:end="325:51">HF_NMI_MASK</name><operator pos:start="325:52" pos:end="325:52">)</operator></expr>)</condition> <block pos:start="325:55" pos:end="335:21">{<block_content pos:start="327:25" pos:end="333:36">

                        <expr_stmt pos:start="327:25" pos:end="327:69"><expr pos:start="327:25" pos:end="327:68"><name pos:start="327:25" pos:end="327:46"><name pos:start="327:25" pos:end="327:27">env</name><operator pos:start="327:28" pos:end="327:29">-&gt;</operator><name pos:start="327:30" pos:end="327:46">interrupt_request</name></name> <operator pos:start="327:48" pos:end="327:49">&amp;=</operator> <operator pos:start="327:51" pos:end="327:51">~</operator><name pos:start="327:52" pos:end="327:68">CPU_INTERRUPT_NMI</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="329:25" pos:end="329:51"><expr pos:start="329:25" pos:end="329:50"><name pos:start="329:25" pos:end="329:35"><name pos:start="329:25" pos:end="329:27">env</name><operator pos:start="329:28" pos:end="329:29">-&gt;</operator><name pos:start="329:30" pos:end="329:35">hflags</name></name> <operator pos:start="329:37" pos:end="329:38">|=</operator> <name pos:start="329:40" pos:end="329:50">HF_NMI_MASK</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="331:25" pos:end="331:61"><expr pos:start="331:25" pos:end="331:60"><call pos:start="331:25" pos:end="331:60"><name pos:start="331:25" pos:end="331:36">do_interrupt</name><argument_list pos:start="331:37" pos:end="331:60">(<argument pos:start="331:38" pos:end="331:47"><expr pos:start="331:38" pos:end="331:47"><name pos:start="331:38" pos:end="331:47">EXCP02_NMI</name></expr></argument>, <argument pos:start="331:50" pos:end="331:50"><expr pos:start="331:50" pos:end="331:50"><literal type="number" pos:start="331:50" pos:end="331:50">0</literal></expr></argument>, <argument pos:start="331:53" pos:end="331:53"><expr pos:start="331:53" pos:end="331:53"><literal type="number" pos:start="331:53" pos:end="331:53">0</literal></expr></argument>, <argument pos:start="331:56" pos:end="331:56"><expr pos:start="331:56" pos:end="331:56"><literal type="number" pos:start="331:56" pos:end="331:56">0</literal></expr></argument>, <argument pos:start="331:59" pos:end="331:59"><expr pos:start="331:59" pos:end="331:59"><literal type="number" pos:start="331:59" pos:end="331:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="333:25" pos:end="333:36"><expr pos:start="333:25" pos:end="333:35"><name pos:start="333:25" pos:end="333:35">BREAK_CHAIN</name></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="335:23" pos:end="365:21">else if <condition pos:start="335:31" pos:end="339:61">(<expr pos:start="335:32" pos:end="339:60"><operator pos:start="335:32" pos:end="335:32">(</operator><name pos:start="335:33" pos:end="335:49">interrupt_request</name> <operator pos:start="335:51" pos:end="335:51">&amp;</operator> <name pos:start="335:53" pos:end="335:70">CPU_INTERRUPT_HARD</name><operator pos:start="335:71" pos:end="335:71">)</operator> <operator pos:start="335:73" pos:end="335:74">&amp;&amp;</operator>

                        <operator pos:start="337:25" pos:end="337:25">(</operator><name pos:start="337:26" pos:end="337:36"><name pos:start="337:26" pos:end="337:28">env</name><operator pos:start="337:29" pos:end="337:30">-&gt;</operator><name pos:start="337:31" pos:end="337:36">eflags</name></name> <operator pos:start="337:38" pos:end="337:38">&amp;</operator> <name pos:start="337:40" pos:end="337:46">IF_MASK</name> <operator pos:start="337:48" pos:end="337:49">||</operator> <name pos:start="337:51" pos:end="337:61"><name pos:start="337:51" pos:end="337:53">env</name><operator pos:start="337:54" pos:end="337:55">-&gt;</operator><name pos:start="337:56" pos:end="337:61">hflags</name></name> <operator pos:start="337:63" pos:end="337:63">&amp;</operator> <name pos:start="337:65" pos:end="337:75">HF_HIF_MASK</name><operator pos:start="337:76" pos:end="337:76">)</operator> <operator pos:start="337:78" pos:end="337:79">&amp;&amp;</operator>

                        <operator pos:start="339:25" pos:end="339:25">!</operator><operator pos:start="339:26" pos:end="339:26">(</operator><name pos:start="339:27" pos:end="339:37"><name pos:start="339:27" pos:end="339:29">env</name><operator pos:start="339:30" pos:end="339:31">-&gt;</operator><name pos:start="339:32" pos:end="339:37">hflags</name></name> <operator pos:start="339:39" pos:end="339:39">&amp;</operator> <name pos:start="339:41" pos:end="339:59">HF_INHIBIT_IRQ_MASK</name><operator pos:start="339:60" pos:end="339:60">)</operator></expr>)</condition> <block pos:start="339:63" pos:end="365:21">{<block_content pos:start="341:25" pos:end="364:0">

                        <decl_stmt pos:start="341:25" pos:end="341:34"><decl pos:start="341:25" pos:end="341:33"><type pos:start="341:25" pos:end="341:27"><name pos:start="341:25" pos:end="341:27">int</name></type> <name pos:start="341:29" pos:end="341:33">intno</name></decl>;</decl_stmt>

                        <expr_stmt pos:start="343:25" pos:end="343:59"><expr pos:start="343:25" pos:end="343:58"><call pos:start="343:25" pos:end="343:58"><name pos:start="343:25" pos:end="343:43">svm_check_intercept</name><argument_list pos:start="343:44" pos:end="343:58">(<argument pos:start="343:45" pos:end="343:57"><expr pos:start="343:45" pos:end="343:57"><name pos:start="343:45" pos:end="343:57">SVM_EXIT_INTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="345:25" pos:end="345:93"><expr pos:start="345:25" pos:end="345:92"><name pos:start="345:25" pos:end="345:46"><name pos:start="345:25" pos:end="345:27">env</name><operator pos:start="345:28" pos:end="345:29">-&gt;</operator><name pos:start="345:30" pos:end="345:46">interrupt_request</name></name> <operator pos:start="345:48" pos:end="345:49">&amp;=</operator> <operator pos:start="345:51" pos:end="345:51">~</operator><operator pos:start="345:52" pos:end="345:52">(</operator><name pos:start="345:53" pos:end="345:70">CPU_INTERRUPT_HARD</name> <operator pos:start="345:72" pos:end="345:72">|</operator> <name pos:start="345:74" pos:end="345:91">CPU_INTERRUPT_VIRQ</name><operator pos:start="345:92" pos:end="345:92">)</operator></expr>;</expr_stmt>

                        <expr_stmt pos:start="347:25" pos:end="347:59"><expr pos:start="347:25" pos:end="347:58"><name pos:start="347:25" pos:end="347:29">intno</name> <operator pos:start="347:31" pos:end="347:31">=</operator> <call pos:start="347:33" pos:end="347:58"><name pos:start="347:33" pos:end="347:53">cpu_get_pic_interrupt</name><argument_list pos:start="347:54" pos:end="347:58">(<argument pos:start="347:55" pos:end="347:57"><expr pos:start="347:55" pos:end="347:57"><name pos:start="347:55" pos:end="347:57">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="349:25" pos:end="353:25"><if pos:start="349:25" pos:end="353:25">if <condition pos:start="349:28" pos:end="349:57">(<expr pos:start="349:29" pos:end="349:56"><name pos:start="349:29" pos:end="349:36">loglevel</name> <operator pos:start="349:38" pos:end="349:38">&amp;</operator> <name pos:start="349:40" pos:end="349:56">CPU_LOG_TB_IN_ASM</name></expr>)</condition> <block pos:start="349:59" pos:end="353:25">{<block_content pos:start="351:29" pos:end="351:87">

                            <expr_stmt pos:start="351:29" pos:end="351:87"><expr pos:start="351:29" pos:end="351:86"><call pos:start="351:29" pos:end="351:86"><name pos:start="351:29" pos:end="351:35">fprintf</name><argument_list pos:start="351:36" pos:end="351:86">(<argument pos:start="351:37" pos:end="351:43"><expr pos:start="351:37" pos:end="351:43"><name pos:start="351:37" pos:end="351:43">logfile</name></expr></argument>, <argument pos:start="351:46" pos:end="351:78"><expr pos:start="351:46" pos:end="351:78"><literal type="string" pos:start="351:46" pos:end="351:78">"Servicing hardware INT=0x%02x\n"</literal></expr></argument>, <argument pos:start="351:81" pos:end="351:85"><expr pos:start="351:81" pos:end="351:85"><name pos:start="351:81" pos:end="351:85">intno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="355:25" pos:end="355:56"><expr pos:start="355:25" pos:end="355:55"><call pos:start="355:25" pos:end="355:55"><name pos:start="355:25" pos:end="355:36">do_interrupt</name><argument_list pos:start="355:37" pos:end="355:55">(<argument pos:start="355:38" pos:end="355:42"><expr pos:start="355:38" pos:end="355:42"><name pos:start="355:38" pos:end="355:42">intno</name></expr></argument>, <argument pos:start="355:45" pos:end="355:45"><expr pos:start="355:45" pos:end="355:45"><literal type="number" pos:start="355:45" pos:end="355:45">0</literal></expr></argument>, <argument pos:start="355:48" pos:end="355:48"><expr pos:start="355:48" pos:end="355:48"><literal type="number" pos:start="355:48" pos:end="355:48">0</literal></expr></argument>, <argument pos:start="355:51" pos:end="355:51"><expr pos:start="355:51" pos:end="355:51"><literal type="number" pos:start="355:51" pos:end="355:51">0</literal></expr></argument>, <argument pos:start="355:54" pos:end="355:54"><expr pos:start="355:54" pos:end="355:54"><literal type="number" pos:start="355:54" pos:end="355:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="block" pos:start="357:25" pos:end="359:58">/* ensure that no TB jump will be modified as

                           the program flow was changed */</comment>

                        <expr_stmt pos:start="361:25" pos:end="364:0"><expr pos:start="361:25" pos:end="361:35"><name pos:start="361:25" pos:end="361:35">BREAK_CHAIN</name></expr>;</expr_stmt>

<cpp:if pos:start="363:1" pos:end="363:30">#<cpp:directive pos:start="363:2" pos:end="363:3">if</cpp:directive> <expr pos:start="363:5" pos:end="363:30"><operator pos:start="363:5" pos:end="363:5">!</operator><call pos:start="363:6" pos:end="363:30"><name pos:start="363:6" pos:end="363:12">defined</name><argument_list pos:start="363:13" pos:end="363:30">(<argument pos:start="363:14" pos:end="363:29"><expr pos:start="363:14" pos:end="363:29"><name pos:start="363:14" pos:end="363:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

                    </block_content>}</block></if> <if type="elseif" pos:start="365:23" pos:end="406:0">else if <condition pos:start="365:31" pos:end="367:88">(<expr pos:start="365:32" pos:end="367:87"><operator pos:start="365:32" pos:end="365:32">(</operator><name pos:start="365:33" pos:end="365:49">interrupt_request</name> <operator pos:start="365:51" pos:end="365:51">&amp;</operator> <name pos:start="365:53" pos:end="365:70">CPU_INTERRUPT_VIRQ</name><operator pos:start="365:71" pos:end="365:71">)</operator> <operator pos:start="365:73" pos:end="365:74">&amp;&amp;</operator>

                        <operator pos:start="367:25" pos:end="367:25">(</operator><name pos:start="367:26" pos:end="367:36"><name pos:start="367:26" pos:end="367:28">env</name><operator pos:start="367:29" pos:end="367:30">-&gt;</operator><name pos:start="367:31" pos:end="367:36">eflags</name></name> <operator pos:start="367:38" pos:end="367:38">&amp;</operator> <name pos:start="367:40" pos:end="367:46">IF_MASK</name><operator pos:start="367:47" pos:end="367:47">)</operator> <operator pos:start="367:49" pos:end="367:50">&amp;&amp;</operator> <operator pos:start="367:52" pos:end="367:52">!</operator><operator pos:start="367:53" pos:end="367:53">(</operator><name pos:start="367:54" pos:end="367:64"><name pos:start="367:54" pos:end="367:56">env</name><operator pos:start="367:57" pos:end="367:58">-&gt;</operator><name pos:start="367:59" pos:end="367:64">hflags</name></name> <operator pos:start="367:66" pos:end="367:66">&amp;</operator> <name pos:start="367:68" pos:end="367:86">HF_INHIBIT_IRQ_MASK</name><operator pos:start="367:87" pos:end="367:87">)</operator></expr>)</condition> <block pos:start="367:90" pos:end="406:0">{<block_content pos:start="369:26" pos:end="392:0">

                         <decl_stmt pos:start="369:26" pos:end="369:35"><decl pos:start="369:26" pos:end="369:34"><type pos:start="369:26" pos:end="369:28"><name pos:start="369:26" pos:end="369:28">int</name></type> <name pos:start="369:30" pos:end="369:34">intno</name></decl>;</decl_stmt>

                         <comment type="block" pos:start="371:26" pos:end="371:61">/* FIXME: this should respect TPR */</comment>

                         <expr_stmt pos:start="373:26" pos:end="373:71"><expr pos:start="373:26" pos:end="373:70"><name pos:start="373:26" pos:end="373:47"><name pos:start="373:26" pos:end="373:28">env</name><operator pos:start="373:29" pos:end="373:30">-&gt;</operator><name pos:start="373:31" pos:end="373:47">interrupt_request</name></name> <operator pos:start="373:49" pos:end="373:50">&amp;=</operator> <operator pos:start="373:52" pos:end="373:52">~</operator><name pos:start="373:53" pos:end="373:70">CPU_INTERRUPT_VIRQ</name></expr>;</expr_stmt>

                         <expr_stmt pos:start="375:26" pos:end="375:61"><expr pos:start="375:26" pos:end="375:60"><call pos:start="375:26" pos:end="375:60"><name pos:start="375:26" pos:end="375:44">svm_check_intercept</name><argument_list pos:start="375:45" pos:end="375:60">(<argument pos:start="375:46" pos:end="375:59"><expr pos:start="375:46" pos:end="375:59"><name pos:start="375:46" pos:end="375:59">SVM_EXIT_VINTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                         <expr_stmt pos:start="377:26" pos:end="377:100"><expr pos:start="377:26" pos:end="377:99"><name pos:start="377:26" pos:end="377:30">intno</name> <operator pos:start="377:32" pos:end="377:32">=</operator> <call pos:start="377:34" pos:end="377:99"><name pos:start="377:34" pos:end="377:41">ldl_phys</name><argument_list pos:start="377:42" pos:end="377:99">(<argument pos:start="377:43" pos:end="377:98"><expr pos:start="377:43" pos:end="377:98"><name pos:start="377:43" pos:end="377:54"><name pos:start="377:43" pos:end="377:45">env</name><operator pos:start="377:46" pos:end="377:47">-&gt;</operator><name pos:start="377:48" pos:end="377:54">vm_vmcb</name></name> <operator pos:start="377:56" pos:end="377:56">+</operator> <call pos:start="377:58" pos:end="377:98"><name pos:start="377:58" pos:end="377:65">offsetof</name><argument_list pos:start="377:66" pos:end="377:98">(<argument pos:start="377:67" pos:end="377:77"><expr pos:start="377:67" pos:end="377:77">struct <name pos:start="377:74" pos:end="377:77">vmcb</name></expr></argument>, <argument pos:start="377:80" pos:end="377:97"><expr pos:start="377:80" pos:end="377:97"><name pos:start="377:80" pos:end="377:97"><name pos:start="377:80" pos:end="377:86">control</name><operator pos:start="377:87" pos:end="377:87">.</operator><name pos:start="377:88" pos:end="377:97">int_vector</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                         <if_stmt pos:start="379:26" pos:end="381:96"><if pos:start="379:26" pos:end="381:96">if <condition pos:start="379:29" pos:end="379:58">(<expr pos:start="379:30" pos:end="379:57"><name pos:start="379:30" pos:end="379:37">loglevel</name> <operator pos:start="379:39" pos:end="379:39">&amp;</operator> <name pos:start="379:41" pos:end="379:57">CPU_LOG_TB_IN_ASM</name></expr>)</condition><block type="pseudo" pos:start="381:30" pos:end="381:96"><block_content pos:start="381:30" pos:end="381:96">

                             <expr_stmt pos:start="381:30" pos:end="381:96"><expr pos:start="381:30" pos:end="381:95"><call pos:start="381:30" pos:end="381:95"><name pos:start="381:30" pos:end="381:36">fprintf</name><argument_list pos:start="381:37" pos:end="381:95">(<argument pos:start="381:38" pos:end="381:44"><expr pos:start="381:38" pos:end="381:44"><name pos:start="381:38" pos:end="381:44">logfile</name></expr></argument>, <argument pos:start="381:47" pos:end="381:87"><expr pos:start="381:47" pos:end="381:87"><literal type="string" pos:start="381:47" pos:end="381:87">"Servicing virtual hardware INT=0x%02x\n"</literal></expr></argument>, <argument pos:start="381:90" pos:end="381:94"><expr pos:start="381:90" pos:end="381:94"><name pos:start="381:90" pos:end="381:94">intno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	                 <expr_stmt pos:start="383:26" pos:end="383:58"><expr pos:start="383:26" pos:end="383:57"><call pos:start="383:26" pos:end="383:57"><name pos:start="383:26" pos:end="383:37">do_interrupt</name><argument_list pos:start="383:38" pos:end="383:57">(<argument pos:start="383:39" pos:end="383:43"><expr pos:start="383:39" pos:end="383:43"><name pos:start="383:39" pos:end="383:43">intno</name></expr></argument>, <argument pos:start="383:46" pos:end="383:46"><expr pos:start="383:46" pos:end="383:46"><literal type="number" pos:start="383:46" pos:end="383:46">0</literal></expr></argument>, <argument pos:start="383:49" pos:end="383:49"><expr pos:start="383:49" pos:end="383:49"><literal type="number" pos:start="383:49" pos:end="383:49">0</literal></expr></argument>, <argument pos:start="383:52" pos:end="383:53"><expr pos:start="383:52" pos:end="383:53"><operator pos:start="383:52" pos:end="383:52">-</operator><literal type="number" pos:start="383:53" pos:end="383:53">1</literal></expr></argument>, <argument pos:start="383:56" pos:end="383:56"><expr pos:start="383:56" pos:end="383:56"><literal type="number" pos:start="383:56" pos:end="383:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                         <expr_stmt pos:start="385:26" pos:end="387:113"><expr pos:start="385:26" pos:end="387:112"><call pos:start="385:26" pos:end="387:112"><name pos:start="385:26" pos:end="385:33">stl_phys</name><argument_list pos:start="385:34" pos:end="387:112">(<argument pos:start="385:35" pos:end="385:87"><expr pos:start="385:35" pos:end="385:87"><name pos:start="385:35" pos:end="385:46"><name pos:start="385:35" pos:end="385:37">env</name><operator pos:start="385:38" pos:end="385:39">-&gt;</operator><name pos:start="385:40" pos:end="385:46">vm_vmcb</name></name> <operator pos:start="385:48" pos:end="385:48">+</operator> <call pos:start="385:50" pos:end="385:87"><name pos:start="385:50" pos:end="385:57">offsetof</name><argument_list pos:start="385:58" pos:end="385:87">(<argument pos:start="385:59" pos:end="385:69"><expr pos:start="385:59" pos:end="385:69">struct <name pos:start="385:66" pos:end="385:69">vmcb</name></expr></argument>, <argument pos:start="385:72" pos:end="385:86"><expr pos:start="385:72" pos:end="385:86"><name pos:start="385:72" pos:end="385:86"><name pos:start="385:72" pos:end="385:78">control</name><operator pos:start="385:79" pos:end="385:79">.</operator><name pos:start="385:80" pos:end="385:86">int_ctl</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="387:35" pos:end="387:111"><expr pos:start="387:35" pos:end="387:111"><call pos:start="387:35" pos:end="387:97"><name pos:start="387:35" pos:end="387:42">ldl_phys</name><argument_list pos:start="387:43" pos:end="387:97">(<argument pos:start="387:44" pos:end="387:96"><expr pos:start="387:44" pos:end="387:96"><name pos:start="387:44" pos:end="387:55"><name pos:start="387:44" pos:end="387:46">env</name><operator pos:start="387:47" pos:end="387:48">-&gt;</operator><name pos:start="387:49" pos:end="387:55">vm_vmcb</name></name> <operator pos:start="387:57" pos:end="387:57">+</operator> <call pos:start="387:59" pos:end="387:96"><name pos:start="387:59" pos:end="387:66">offsetof</name><argument_list pos:start="387:67" pos:end="387:96">(<argument pos:start="387:68" pos:end="387:78"><expr pos:start="387:68" pos:end="387:78">struct <name pos:start="387:75" pos:end="387:78">vmcb</name></expr></argument>, <argument pos:start="387:81" pos:end="387:95"><expr pos:start="387:81" pos:end="387:95"><name pos:start="387:81" pos:end="387:95"><name pos:start="387:81" pos:end="387:87">control</name><operator pos:start="387:88" pos:end="387:88">.</operator><name pos:start="387:89" pos:end="387:95">int_ctl</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="387:99" pos:end="387:99">&amp;</operator> <operator pos:start="387:101" pos:end="387:101">~</operator><name pos:start="387:102" pos:end="387:111">V_IRQ_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="389:25" pos:end="392:0"><expr pos:start="389:25" pos:end="389:35"><name pos:start="389:25" pos:end="389:35">BREAK_CHAIN</name></expr>;</expr_stmt>

<cpp:endif pos:start="391:1" pos:end="391:6">#<cpp:directive pos:start="391:2" pos:end="391:6">endif</cpp:directive></cpp:endif>

                    </block_content>}</block></if></if_stmt>

<cpp:elif pos:start="395:1" pos:end="395:25">#<cpp:directive pos:start="395:2" pos:end="395:5">elif</cpp:directive> <expr pos:start="395:7" pos:end="395:25"><call pos:start="395:7" pos:end="395:25"><name pos:start="395:7" pos:end="395:13">defined</name><argument_list pos:start="395:14" pos:end="395:25">(<argument pos:start="395:15" pos:end="395:24"><expr pos:start="395:15" pos:end="395:24"><name pos:start="395:15" pos:end="395:24">TARGET_PPC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:if pos:start="397:1" pos:end="397:5">#<cpp:directive pos:start="397:2" pos:end="397:3">if</cpp:directive> <expr pos:start="397:5" pos:end="397:5"><literal type="number" pos:start="397:5" pos:end="397:5">0</literal></expr></cpp:if>

                    if ((interrupt_request &amp; CPU_INTERRUPT_RESET)) {

                        cpu_ppc_reset(env);

                    }

<cpp:endif pos:start="405:1" pos:end="405:6">#<cpp:directive pos:start="405:2" pos:end="405:6">endif</cpp:directive></cpp:endif>

                    <if_stmt pos:start="407:21" pos:end="420:0"><if pos:start="407:21" pos:end="420:0">if <condition pos:start="407:24" pos:end="407:63">(<expr pos:start="407:25" pos:end="407:62"><name pos:start="407:25" pos:end="407:41">interrupt_request</name> <operator pos:start="407:43" pos:end="407:43">&amp;</operator> <name pos:start="407:45" pos:end="407:62">CPU_INTERRUPT_HARD</name></expr>)</condition> <block pos:start="407:65" pos:end="420:0">{<block_content pos:start="409:25" pos:end="415:36">

                        <expr_stmt pos:start="409:25" pos:end="409:46"><expr pos:start="409:25" pos:end="409:45"><call pos:start="409:25" pos:end="409:45"><name pos:start="409:25" pos:end="409:40">ppc_hw_interrupt</name><argument_list pos:start="409:41" pos:end="409:45">(<argument pos:start="409:42" pos:end="409:44"><expr pos:start="409:42" pos:end="409:44"><name pos:start="409:42" pos:end="409:44">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="411:25" pos:end="413:74"><if pos:start="411:25" pos:end="413:74">if <condition pos:start="411:28" pos:end="411:57">(<expr pos:start="411:29" pos:end="411:56"><name pos:start="411:29" pos:end="411:51"><name pos:start="411:29" pos:end="411:31">env</name><operator pos:start="411:32" pos:end="411:33">-&gt;</operator><name pos:start="411:34" pos:end="411:51">pending_interrupts</name></name> <operator pos:start="411:53" pos:end="411:54">==</operator> <literal type="number" pos:start="411:56" pos:end="411:56">0</literal></expr>)</condition><block type="pseudo" pos:start="413:29" pos:end="413:74"><block_content pos:start="413:29" pos:end="413:74">

                            <expr_stmt pos:start="413:29" pos:end="413:74"><expr pos:start="413:29" pos:end="413:73"><name pos:start="413:29" pos:end="413:50"><name pos:start="413:29" pos:end="413:31">env</name><operator pos:start="413:32" pos:end="413:33">-&gt;</operator><name pos:start="413:34" pos:end="413:50">interrupt_request</name></name> <operator pos:start="413:52" pos:end="413:53">&amp;=</operator> <operator pos:start="413:55" pos:end="413:55">~</operator><name pos:start="413:56" pos:end="413:73">CPU_INTERRUPT_HARD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="415:25" pos:end="415:36"><expr pos:start="415:25" pos:end="415:35"><name pos:start="415:25" pos:end="415:35">BREAK_CHAIN</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

<cpp:elif pos:start="419:1" pos:end="419:26">#<cpp:directive pos:start="419:2" pos:end="419:5">elif</cpp:directive> <expr pos:start="419:7" pos:end="419:26"><call pos:start="419:7" pos:end="419:26"><name pos:start="419:7" pos:end="419:13">defined</name><argument_list pos:start="419:14" pos:end="419:26">(<argument pos:start="419:15" pos:end="419:25"><expr pos:start="419:15" pos:end="419:25"><name pos:start="419:15" pos:end="419:25">TARGET_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

                    <if_stmt pos:start="421:21" pos:end="446:0"><if pos:start="421:21" pos:end="446:0">if <condition pos:start="421:24" pos:end="431:55">(<expr pos:start="421:25" pos:end="431:54"><operator pos:start="421:25" pos:end="421:25">(</operator><name pos:start="421:26" pos:end="421:42">interrupt_request</name> <operator pos:start="421:44" pos:end="421:44">&amp;</operator> <name pos:start="421:46" pos:end="421:63">CPU_INTERRUPT_HARD</name><operator pos:start="421:64" pos:end="421:64">)</operator> <operator pos:start="421:66" pos:end="421:67">&amp;&amp;</operator>

                        <operator pos:start="423:25" pos:end="423:25">(</operator><name pos:start="423:26" pos:end="423:40"><name pos:start="423:26" pos:end="423:28">env</name><operator pos:start="423:29" pos:end="423:30">-&gt;</operator><name pos:start="423:31" pos:end="423:40">CP0_Status</name></name> <operator pos:start="423:42" pos:end="423:42">&amp;</operator> <name pos:start="423:44" pos:end="423:57"><name pos:start="423:44" pos:end="423:46">env</name><operator pos:start="423:47" pos:end="423:48">-&gt;</operator><name pos:start="423:49" pos:end="423:57">CP0_Cause</name></name> <operator pos:start="423:59" pos:end="423:59">&amp;</operator> <name pos:start="423:61" pos:end="423:73">CP0Ca_IP_mask</name><operator pos:start="423:74" pos:end="423:74">)</operator> <operator pos:start="423:76" pos:end="423:77">&amp;&amp;</operator>

                        <operator pos:start="425:25" pos:end="425:25">(</operator><name pos:start="425:26" pos:end="425:40"><name pos:start="425:26" pos:end="425:28">env</name><operator pos:start="425:29" pos:end="425:30">-&gt;</operator><name pos:start="425:31" pos:end="425:40">CP0_Status</name></name> <operator pos:start="425:42" pos:end="425:42">&amp;</operator> <operator pos:start="425:44" pos:end="425:44">(</operator><literal type="number" pos:start="425:45" pos:end="425:45">1</literal> <operator pos:start="425:47" pos:end="425:48">&lt;&lt;</operator> <name pos:start="425:50" pos:end="425:57">CP0St_IE</name><operator pos:start="425:58" pos:end="425:58">)</operator><operator pos:start="425:59" pos:end="425:59">)</operator> <operator pos:start="425:61" pos:end="425:62">&amp;&amp;</operator>

                        <operator pos:start="427:25" pos:end="427:25">!</operator><operator pos:start="427:26" pos:end="427:26">(</operator><name pos:start="427:27" pos:end="427:41"><name pos:start="427:27" pos:end="427:29">env</name><operator pos:start="427:30" pos:end="427:31">-&gt;</operator><name pos:start="427:32" pos:end="427:41">CP0_Status</name></name> <operator pos:start="427:43" pos:end="427:43">&amp;</operator> <operator pos:start="427:45" pos:end="427:45">(</operator><literal type="number" pos:start="427:46" pos:end="427:46">1</literal> <operator pos:start="427:48" pos:end="427:49">&lt;&lt;</operator> <name pos:start="427:51" pos:end="427:59">CP0St_EXL</name><operator pos:start="427:60" pos:end="427:60">)</operator><operator pos:start="427:61" pos:end="427:61">)</operator> <operator pos:start="427:63" pos:end="427:64">&amp;&amp;</operator>

                        <operator pos:start="429:25" pos:end="429:25">!</operator><operator pos:start="429:26" pos:end="429:26">(</operator><name pos:start="429:27" pos:end="429:41"><name pos:start="429:27" pos:end="429:29">env</name><operator pos:start="429:30" pos:end="429:31">-&gt;</operator><name pos:start="429:32" pos:end="429:41">CP0_Status</name></name> <operator pos:start="429:43" pos:end="429:43">&amp;</operator> <operator pos:start="429:45" pos:end="429:45">(</operator><literal type="number" pos:start="429:46" pos:end="429:46">1</literal> <operator pos:start="429:48" pos:end="429:49">&lt;&lt;</operator> <name pos:start="429:51" pos:end="429:59">CP0St_ERL</name><operator pos:start="429:60" pos:end="429:60">)</operator><operator pos:start="429:61" pos:end="429:61">)</operator> <operator pos:start="429:63" pos:end="429:64">&amp;&amp;</operator>

                        <operator pos:start="431:25" pos:end="431:25">!</operator><operator pos:start="431:26" pos:end="431:26">(</operator><name pos:start="431:27" pos:end="431:37"><name pos:start="431:27" pos:end="431:29">env</name><operator pos:start="431:30" pos:end="431:31">-&gt;</operator><name pos:start="431:32" pos:end="431:37">hflags</name></name> <operator pos:start="431:39" pos:end="431:39">&amp;</operator> <name pos:start="431:41" pos:end="431:53">MIPS_HFLAG_DM</name><operator pos:start="431:54" pos:end="431:54">)</operator></expr>)</condition> <block pos:start="431:57" pos:end="446:0">{<block_content pos:start="435:25" pos:end="441:36">

                        <comment type="block" pos:start="433:25" pos:end="433:38">/* Raise it */</comment>

                        <expr_stmt pos:start="435:25" pos:end="435:66"><expr pos:start="435:25" pos:end="435:65"><name pos:start="435:25" pos:end="435:44"><name pos:start="435:25" pos:end="435:27">env</name><operator pos:start="435:28" pos:end="435:29">-&gt;</operator><name pos:start="435:30" pos:end="435:44">exception_index</name></name> <operator pos:start="435:46" pos:end="435:46">=</operator> <name pos:start="435:48" pos:end="435:65">EXCP_EXT_INTERRUPT</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="437:25" pos:end="437:44"><expr pos:start="437:25" pos:end="437:43"><name pos:start="437:25" pos:end="437:39"><name pos:start="437:25" pos:end="437:27">env</name><operator pos:start="437:28" pos:end="437:29">-&gt;</operator><name pos:start="437:30" pos:end="437:39">error_code</name></name> <operator pos:start="437:41" pos:end="437:41">=</operator> <literal type="number" pos:start="437:43" pos:end="437:43">0</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="439:25" pos:end="439:42"><expr pos:start="439:25" pos:end="439:41"><call pos:start="439:25" pos:end="439:41"><name pos:start="439:25" pos:end="439:36">do_interrupt</name><argument_list pos:start="439:37" pos:end="439:41">(<argument pos:start="439:38" pos:end="439:40"><expr pos:start="439:38" pos:end="439:40"><name pos:start="439:38" pos:end="439:40">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="441:25" pos:end="441:36"><expr pos:start="441:25" pos:end="441:35"><name pos:start="441:25" pos:end="441:35">BREAK_CHAIN</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

<cpp:elif pos:start="445:1" pos:end="445:27">#<cpp:directive pos:start="445:2" pos:end="445:5">elif</cpp:directive> <expr pos:start="445:7" pos:end="445:27"><call pos:start="445:7" pos:end="445:27"><name pos:start="445:7" pos:end="445:13">defined</name><argument_list pos:start="445:14" pos:end="445:27">(<argument pos:start="445:15" pos:end="445:26"><expr pos:start="445:15" pos:end="445:26"><name pos:start="445:15" pos:end="445:26">TARGET_SPARC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

                    <if_stmt pos:start="447:21" pos:end="488:0"><if pos:start="447:21" pos:end="479:21">if <condition pos:start="447:24" pos:end="449:42">(<expr pos:start="447:25" pos:end="449:41"><operator pos:start="447:25" pos:end="447:25">(</operator><name pos:start="447:26" pos:end="447:42">interrupt_request</name> <operator pos:start="447:44" pos:end="447:44">&amp;</operator> <name pos:start="447:46" pos:end="447:63">CPU_INTERRUPT_HARD</name><operator pos:start="447:64" pos:end="447:64">)</operator> <operator pos:start="447:66" pos:end="447:67">&amp;&amp;</operator>

			<operator pos:start="449:25" pos:end="449:25">(</operator><name pos:start="449:26" pos:end="449:35"><name pos:start="449:26" pos:end="449:28">env</name><operator pos:start="449:29" pos:end="449:30">-&gt;</operator><name pos:start="449:31" pos:end="449:35">psret</name></name> <operator pos:start="449:37" pos:end="449:38">!=</operator> <literal type="number" pos:start="449:40" pos:end="449:40">0</literal><operator pos:start="449:41" pos:end="449:41">)</operator></expr>)</condition> <block pos:start="449:44" pos:end="479:21">{<block_content pos:start="451:25" pos:end="477:25">

			<decl_stmt pos:start="451:25" pos:end="451:60"><decl pos:start="451:25" pos:end="451:59"><type pos:start="451:25" pos:end="451:27"><name pos:start="451:25" pos:end="451:27">int</name></type> <name pos:start="451:29" pos:end="451:31">pil</name> <init pos:start="451:33" pos:end="451:59">= <expr pos:start="451:35" pos:end="451:59"><name pos:start="451:35" pos:end="451:54"><name pos:start="451:35" pos:end="451:37">env</name><operator pos:start="451:38" pos:end="451:39">-&gt;</operator><name pos:start="451:40" pos:end="451:54">interrupt_index</name></name> <operator pos:start="451:56" pos:end="451:56">&amp;</operator> <literal type="number" pos:start="451:58" pos:end="451:59">15</literal></expr></init></decl>;</decl_stmt>

			<decl_stmt pos:start="453:25" pos:end="453:63"><decl pos:start="453:25" pos:end="453:62"><type pos:start="453:25" pos:end="453:27"><name pos:start="453:25" pos:end="453:27">int</name></type> <name pos:start="453:29" pos:end="453:32">type</name> <init pos:start="453:34" pos:end="453:62">= <expr pos:start="453:36" pos:end="453:62"><name pos:start="453:36" pos:end="453:55"><name pos:start="453:36" pos:end="453:38">env</name><operator pos:start="453:39" pos:end="453:40">-&gt;</operator><name pos:start="453:41" pos:end="453:55">interrupt_index</name></name> <operator pos:start="453:57" pos:end="453:57">&amp;</operator> <literal type="number" pos:start="453:59" pos:end="453:62">0xf0</literal></expr></init></decl>;</decl_stmt>



			<if_stmt pos:start="457:25" pos:end="477:25"><if pos:start="457:25" pos:end="477:25">if <condition pos:start="457:28" pos:end="461:46">(<expr pos:start="457:29" pos:end="461:45"><operator pos:start="457:29" pos:end="457:29">(</operator><operator pos:start="457:30" pos:end="457:30">(</operator><name pos:start="457:31" pos:end="457:34">type</name> <operator pos:start="457:36" pos:end="457:37">==</operator> <name pos:start="457:39" pos:end="457:47">TT_EXTINT</name><operator pos:start="457:48" pos:end="457:48">)</operator> <operator pos:start="457:50" pos:end="457:51">&amp;&amp;</operator>

			     <operator pos:start="459:30" pos:end="459:30">(</operator><name pos:start="459:31" pos:end="459:33">pil</name> <operator pos:start="459:35" pos:end="459:36">==</operator> <literal type="number" pos:start="459:38" pos:end="459:39">15</literal> <operator pos:start="459:41" pos:end="459:42">||</operator> <name pos:start="459:44" pos:end="459:46">pil</name> <operator pos:start="459:48" pos:end="459:48">&gt;</operator> <name pos:start="459:50" pos:end="459:60"><name pos:start="459:50" pos:end="459:52">env</name><operator pos:start="459:53" pos:end="459:54">-&gt;</operator><name pos:start="459:55" pos:end="459:60">psrpil</name></name><operator pos:start="459:61" pos:end="459:61">)</operator><operator pos:start="459:62" pos:end="459:62">)</operator> <operator pos:start="459:64" pos:end="459:65">||</operator>

			    <name pos:start="461:29" pos:end="461:32">type</name> <operator pos:start="461:34" pos:end="461:35">!=</operator> <name pos:start="461:37" pos:end="461:45">TT_EXTINT</name></expr>)</condition> <block pos:start="461:48" pos:end="477:25">{<block_content pos:start="463:29" pos:end="475:36">

			    <expr_stmt pos:start="463:29" pos:end="463:74"><expr pos:start="463:29" pos:end="463:73"><name pos:start="463:29" pos:end="463:50"><name pos:start="463:29" pos:end="463:31">env</name><operator pos:start="463:32" pos:end="463:33">-&gt;</operator><name pos:start="463:34" pos:end="463:50">interrupt_request</name></name> <operator pos:start="463:52" pos:end="463:53">&amp;=</operator> <operator pos:start="463:55" pos:end="463:55">~</operator><name pos:start="463:56" pos:end="463:73">CPU_INTERRUPT_HARD</name></expr>;</expr_stmt>

			    <expr_stmt pos:start="465:29" pos:end="465:63"><expr pos:start="465:29" pos:end="465:62"><call pos:start="465:29" pos:end="465:62"><name pos:start="465:29" pos:end="465:40">do_interrupt</name><argument_list pos:start="465:41" pos:end="465:62">(<argument pos:start="465:42" pos:end="465:61"><expr pos:start="465:42" pos:end="465:61"><name pos:start="465:42" pos:end="465:61"><name pos:start="465:42" pos:end="465:44">env</name><operator pos:start="465:45" pos:end="465:46">-&gt;</operator><name pos:start="465:47" pos:end="465:61">interrupt_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			    <expr_stmt pos:start="467:29" pos:end="470:0"><expr pos:start="467:29" pos:end="467:52"><name pos:start="467:29" pos:end="467:48"><name pos:start="467:29" pos:end="467:31">env</name><operator pos:start="467:32" pos:end="467:33">-&gt;</operator><name pos:start="467:34" pos:end="467:48">interrupt_index</name></name> <operator pos:start="467:50" pos:end="467:50">=</operator> <literal type="number" pos:start="467:52" pos:end="467:52">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="469:1" pos:end="469:58">#<cpp:directive pos:start="469:2" pos:end="469:3">if</cpp:directive> <expr pos:start="469:5" pos:end="469:58"><operator pos:start="469:5" pos:end="469:5">!</operator><call pos:start="469:6" pos:end="469:28"><name pos:start="469:6" pos:end="469:12">defined</name><argument_list pos:start="469:13" pos:end="469:28">(<argument pos:start="469:14" pos:end="469:27"><expr pos:start="469:14" pos:end="469:27"><name pos:start="469:14" pos:end="469:27">TARGET_SPARC64</name></expr></argument>)</argument_list></call> <operator pos:start="469:30" pos:end="469:31">&amp;&amp;</operator> <operator pos:start="469:33" pos:end="469:33">!</operator><call pos:start="469:34" pos:end="469:58"><name pos:start="469:34" pos:end="469:40">defined</name><argument_list pos:start="469:41" pos:end="469:58">(<argument pos:start="469:42" pos:end="469:57"><expr pos:start="469:42" pos:end="469:57"><name pos:start="469:42" pos:end="469:57">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

                            <expr_stmt pos:start="471:29" pos:end="474:0"><expr pos:start="471:29" pos:end="471:47"><call pos:start="471:29" pos:end="471:47"><name pos:start="471:29" pos:end="471:42">cpu_check_irqs</name><argument_list pos:start="471:43" pos:end="471:47">(<argument pos:start="471:44" pos:end="471:46"><expr pos:start="471:44" pos:end="471:46"><name pos:start="471:44" pos:end="471:46">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="473:1" pos:end="473:6">#<cpp:directive pos:start="473:2" pos:end="473:6">endif</cpp:directive></cpp:endif>

                        <expr_stmt pos:start="475:25" pos:end="475:36"><expr pos:start="475:25" pos:end="475:35"><name pos:start="475:25" pos:end="475:35">BREAK_CHAIN</name></expr>;</expr_stmt>

			</block_content>}</block></if></if_stmt>

		    </block_content>}</block></if> <if type="elseif" pos:start="479:23" pos:end="488:0">else if <condition pos:start="479:31" pos:end="479:71">(<expr pos:start="479:32" pos:end="479:70"><name pos:start="479:32" pos:end="479:48">interrupt_request</name> <operator pos:start="479:50" pos:end="479:50">&amp;</operator> <name pos:start="479:52" pos:end="479:70">CPU_INTERRUPT_TIMER</name></expr>)</condition> <block pos:start="479:73" pos:end="488:0">{<block_content pos:start="483:25" pos:end="483:71">

			<comment type="line" pos:start="481:25" pos:end="481:54">//do_interrupt(0, 0, 0, 0, 0);</comment>

			<expr_stmt pos:start="483:25" pos:end="483:71"><expr pos:start="483:25" pos:end="483:70"><name pos:start="483:25" pos:end="483:46"><name pos:start="483:25" pos:end="483:27">env</name><operator pos:start="483:28" pos:end="483:29">-&gt;</operator><name pos:start="483:30" pos:end="483:46">interrupt_request</name></name> <operator pos:start="483:48" pos:end="483:49">&amp;=</operator> <operator pos:start="483:51" pos:end="483:51">~</operator><name pos:start="483:52" pos:end="483:70">CPU_INTERRUPT_TIMER</name></expr>;</expr_stmt>

		    </block_content>}</block></if></if_stmt>

<cpp:elif pos:start="487:1" pos:end="487:25">#<cpp:directive pos:start="487:2" pos:end="487:5">elif</cpp:directive> <expr pos:start="487:7" pos:end="487:25"><call pos:start="487:7" pos:end="487:25"><name pos:start="487:7" pos:end="487:13">defined</name><argument_list pos:start="487:14" pos:end="487:25">(<argument pos:start="487:15" pos:end="487:24"><expr pos:start="487:15" pos:end="487:24"><name pos:start="487:15" pos:end="487:24">TARGET_ARM</name></expr></argument>)</argument_list></call></expr></cpp:elif>

                    <if_stmt pos:start="489:21" pos:end="499:21"><if pos:start="489:21" pos:end="499:21">if <condition pos:start="489:24" pos:end="491:58">(<expr pos:start="489:25" pos:end="491:57"><name pos:start="489:25" pos:end="489:41">interrupt_request</name> <operator pos:start="489:43" pos:end="489:43">&amp;</operator> <name pos:start="489:45" pos:end="489:61">CPU_INTERRUPT_FIQ</name>

                        <operator pos:start="491:25" pos:end="491:26">&amp;&amp;</operator> <operator pos:start="491:28" pos:end="491:28">!</operator><operator pos:start="491:29" pos:end="491:29">(</operator><name pos:start="491:30" pos:end="491:47"><name pos:start="491:30" pos:end="491:32">env</name><operator pos:start="491:33" pos:end="491:34">-&gt;</operator><name pos:start="491:35" pos:end="491:47">uncached_cpsr</name></name> <operator pos:start="491:49" pos:end="491:49">&amp;</operator> <name pos:start="491:51" pos:end="491:56">CPSR_F</name><operator pos:start="491:57" pos:end="491:57">)</operator></expr>)</condition> <block pos:start="491:60" pos:end="499:21">{<block_content pos:start="493:25" pos:end="497:36">

                        <expr_stmt pos:start="493:25" pos:end="493:56"><expr pos:start="493:25" pos:end="493:55"><name pos:start="493:25" pos:end="493:44"><name pos:start="493:25" pos:end="493:27">env</name><operator pos:start="493:28" pos:end="493:29">-&gt;</operator><name pos:start="493:30" pos:end="493:44">exception_index</name></name> <operator pos:start="493:46" pos:end="493:46">=</operator> <name pos:start="493:48" pos:end="493:55">EXCP_FIQ</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="495:25" pos:end="495:42"><expr pos:start="495:25" pos:end="495:41"><call pos:start="495:25" pos:end="495:41"><name pos:start="495:25" pos:end="495:36">do_interrupt</name><argument_list pos:start="495:37" pos:end="495:41">(<argument pos:start="495:38" pos:end="495:40"><expr pos:start="495:38" pos:end="495:40"><name pos:start="495:38" pos:end="495:40">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="497:25" pos:end="497:36"><expr pos:start="497:25" pos:end="497:35"><name pos:start="497:25" pos:end="497:35">BREAK_CHAIN</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <comment type="block" pos:start="501:21" pos:end="517:55">/* ARMv7-M interrupt return works by loading a magic value

                       into the PC.  On real hardware the load causes the

                       return to occur.  The qemu implementation performs the

                       jump normally, then does the exception return when the

                       CPU tries to execute code at the magic address.

                       This will cause the magic PC value to be pushed to

                       the stack if an interrupt occured at the wrong time.

                       We avoid this by disabling interrupts when

                       pc contains a magic address.  */</comment>

                    <if_stmt pos:start="519:21" pos:end="534:0"><if pos:start="519:21" pos:end="534:0">if <condition pos:start="519:24" pos:end="523:63">(<expr pos:start="519:25" pos:end="523:62"><name pos:start="519:25" pos:end="519:41">interrupt_request</name> <operator pos:start="519:43" pos:end="519:43">&amp;</operator> <name pos:start="519:45" pos:end="519:62">CPU_INTERRUPT_HARD</name>

                        <operator pos:start="521:25" pos:end="521:26">&amp;&amp;</operator> <operator pos:start="521:28" pos:end="521:28">(</operator><operator pos:start="521:29" pos:end="521:29">(</operator><call pos:start="521:30" pos:end="521:38"><name pos:start="521:30" pos:end="521:33">IS_M</name><argument_list pos:start="521:34" pos:end="521:38">(<argument pos:start="521:35" pos:end="521:37"><expr pos:start="521:35" pos:end="521:37"><name pos:start="521:35" pos:end="521:37">env</name></expr></argument>)</argument_list></call> <operator pos:start="521:40" pos:end="521:41">&amp;&amp;</operator> <name pos:start="521:43" pos:end="521:55"><name pos:start="521:43" pos:end="521:45">env</name><operator pos:start="521:46" pos:end="521:47">-&gt;</operator><name pos:start="521:48" pos:end="521:51">regs</name><index pos:start="521:52" pos:end="521:55">[<expr pos:start="521:53" pos:end="521:54"><literal type="number" pos:start="521:53" pos:end="521:54">15</literal></expr>]</index></name> <operator pos:start="521:57" pos:end="521:57">&lt;</operator> <literal type="number" pos:start="521:59" pos:end="521:68">0xfffffff0</literal><operator pos:start="521:69" pos:end="521:69">)</operator>

                            <operator pos:start="523:29" pos:end="523:30">||</operator> <operator pos:start="523:32" pos:end="523:32">!</operator><operator pos:start="523:33" pos:end="523:33">(</operator><name pos:start="523:34" pos:end="523:51"><name pos:start="523:34" pos:end="523:36">env</name><operator pos:start="523:37" pos:end="523:38">-&gt;</operator><name pos:start="523:39" pos:end="523:51">uncached_cpsr</name></name> <operator pos:start="523:53" pos:end="523:53">&amp;</operator> <name pos:start="523:55" pos:end="523:60">CPSR_I</name><operator pos:start="523:61" pos:end="523:61">)</operator><operator pos:start="523:62" pos:end="523:62">)</operator></expr>)</condition> <block pos:start="523:65" pos:end="534:0">{<block_content pos:start="525:25" pos:end="529:36">

                        <expr_stmt pos:start="525:25" pos:end="525:56"><expr pos:start="525:25" pos:end="525:55"><name pos:start="525:25" pos:end="525:44"><name pos:start="525:25" pos:end="525:27">env</name><operator pos:start="525:28" pos:end="525:29">-&gt;</operator><name pos:start="525:30" pos:end="525:44">exception_index</name></name> <operator pos:start="525:46" pos:end="525:46">=</operator> <name pos:start="525:48" pos:end="525:55">EXCP_IRQ</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="527:25" pos:end="527:42"><expr pos:start="527:25" pos:end="527:41"><call pos:start="527:25" pos:end="527:41"><name pos:start="527:25" pos:end="527:36">do_interrupt</name><argument_list pos:start="527:37" pos:end="527:41">(<argument pos:start="527:38" pos:end="527:40"><expr pos:start="527:38" pos:end="527:40"><name pos:start="527:38" pos:end="527:40">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="529:25" pos:end="529:36"><expr pos:start="529:25" pos:end="529:35"><name pos:start="529:25" pos:end="529:35">BREAK_CHAIN</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

<cpp:elif pos:start="533:1" pos:end="533:25">#<cpp:directive pos:start="533:2" pos:end="533:5">elif</cpp:directive> <expr pos:start="533:7" pos:end="533:25"><call pos:start="533:7" pos:end="533:25"><name pos:start="533:7" pos:end="533:13">defined</name><argument_list pos:start="533:14" pos:end="533:25">(<argument pos:start="533:15" pos:end="533:24"><expr pos:start="533:15" pos:end="533:24"><name pos:start="533:15" pos:end="533:24">TARGET_SH4</name></expr></argument>)</argument_list></call></expr></cpp:elif>

                    <if_stmt pos:start="535:21" pos:end="544:0"><if pos:start="535:21" pos:end="544:0">if <condition pos:start="535:24" pos:end="535:63">(<expr pos:start="535:25" pos:end="535:62"><name pos:start="535:25" pos:end="535:41">interrupt_request</name> <operator pos:start="535:43" pos:end="535:43">&amp;</operator> <name pos:start="535:45" pos:end="535:62">CPU_INTERRUPT_HARD</name></expr>)</condition> <block pos:start="535:65" pos:end="544:0">{<block_content pos:start="537:25" pos:end="539:36">

                        <expr_stmt pos:start="537:25" pos:end="537:42"><expr pos:start="537:25" pos:end="537:41"><call pos:start="537:25" pos:end="537:41"><name pos:start="537:25" pos:end="537:36">do_interrupt</name><argument_list pos:start="537:37" pos:end="537:41">(<argument pos:start="537:38" pos:end="537:40"><expr pos:start="537:38" pos:end="537:40"><name pos:start="537:38" pos:end="537:40">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="539:25" pos:end="539:36"><expr pos:start="539:25" pos:end="539:35"><name pos:start="539:25" pos:end="539:35">BREAK_CHAIN</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

<cpp:elif pos:start="543:1" pos:end="543:27">#<cpp:directive pos:start="543:2" pos:end="543:5">elif</cpp:directive> <expr pos:start="543:7" pos:end="543:27"><call pos:start="543:7" pos:end="543:27"><name pos:start="543:7" pos:end="543:13">defined</name><argument_list pos:start="543:14" pos:end="543:27">(<argument pos:start="543:15" pos:end="543:26"><expr pos:start="543:15" pos:end="543:26"><name pos:start="543:15" pos:end="543:26">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:elif>

                    <if_stmt pos:start="545:21" pos:end="554:0"><if pos:start="545:21" pos:end="554:0">if <condition pos:start="545:24" pos:end="545:63">(<expr pos:start="545:25" pos:end="545:62"><name pos:start="545:25" pos:end="545:41">interrupt_request</name> <operator pos:start="545:43" pos:end="545:43">&amp;</operator> <name pos:start="545:45" pos:end="545:62">CPU_INTERRUPT_HARD</name></expr>)</condition> <block pos:start="545:65" pos:end="554:0">{<block_content pos:start="547:25" pos:end="549:36">

                        <expr_stmt pos:start="547:25" pos:end="547:42"><expr pos:start="547:25" pos:end="547:41"><call pos:start="547:25" pos:end="547:41"><name pos:start="547:25" pos:end="547:36">do_interrupt</name><argument_list pos:start="547:37" pos:end="547:41">(<argument pos:start="547:38" pos:end="547:40"><expr pos:start="547:38" pos:end="547:40"><name pos:start="547:38" pos:end="547:40">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="549:25" pos:end="549:36"><expr pos:start="549:25" pos:end="549:35"><name pos:start="549:25" pos:end="549:35">BREAK_CHAIN</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

<cpp:elif pos:start="553:1" pos:end="553:26">#<cpp:directive pos:start="553:2" pos:end="553:5">elif</cpp:directive> <expr pos:start="553:7" pos:end="553:26"><call pos:start="553:7" pos:end="553:26"><name pos:start="553:7" pos:end="553:13">defined</name><argument_list pos:start="553:14" pos:end="553:26">(<argument pos:start="553:15" pos:end="553:25"><expr pos:start="553:15" pos:end="553:25"><name pos:start="553:15" pos:end="553:25">TARGET_CRIS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

                    <if_stmt pos:start="555:21" pos:end="564:0"><if pos:start="555:21" pos:end="564:0">if <condition pos:start="555:24" pos:end="555:63">(<expr pos:start="555:25" pos:end="555:62"><name pos:start="555:25" pos:end="555:41">interrupt_request</name> <operator pos:start="555:43" pos:end="555:43">&amp;</operator> <name pos:start="555:45" pos:end="555:62">CPU_INTERRUPT_HARD</name></expr>)</condition> <block pos:start="555:65" pos:end="564:0">{<block_content pos:start="557:25" pos:end="559:36">

                        <expr_stmt pos:start="557:25" pos:end="557:42"><expr pos:start="557:25" pos:end="557:41"><call pos:start="557:25" pos:end="557:41"><name pos:start="557:25" pos:end="557:36">do_interrupt</name><argument_list pos:start="557:37" pos:end="557:41">(<argument pos:start="557:38" pos:end="557:40"><expr pos:start="557:38" pos:end="557:40"><name pos:start="557:38" pos:end="557:40">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="559:25" pos:end="559:36"><expr pos:start="559:25" pos:end="559:35"><name pos:start="559:25" pos:end="559:35">BREAK_CHAIN</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

<cpp:elif pos:start="563:1" pos:end="563:26">#<cpp:directive pos:start="563:2" pos:end="563:5">elif</cpp:directive> <expr pos:start="563:7" pos:end="563:26"><call pos:start="563:7" pos:end="563:26"><name pos:start="563:7" pos:end="563:13">defined</name><argument_list pos:start="563:14" pos:end="563:26">(<argument pos:start="563:15" pos:end="563:25"><expr pos:start="563:15" pos:end="563:25"><name pos:start="563:15" pos:end="563:25">TARGET_M68K</name></expr></argument>)</argument_list></call></expr></cpp:elif>

                    <if_stmt pos:start="565:21" pos:end="590:0"><if pos:start="565:21" pos:end="590:0">if <condition pos:start="565:24" pos:end="569:49">(<expr pos:start="565:25" pos:end="569:48"><name pos:start="565:25" pos:end="565:41">interrupt_request</name> <operator pos:start="565:43" pos:end="565:43">&amp;</operator> <name pos:start="565:45" pos:end="565:62">CPU_INTERRUPT_HARD</name>

                        <operator pos:start="567:25" pos:end="567:26">&amp;&amp;</operator> <operator pos:start="567:28" pos:end="567:28">(</operator><operator pos:start="567:29" pos:end="567:29">(</operator><name pos:start="567:30" pos:end="567:36"><name pos:start="567:30" pos:end="567:32">env</name><operator pos:start="567:33" pos:end="567:34">-&gt;</operator><name pos:start="567:35" pos:end="567:36">sr</name></name> <operator pos:start="567:38" pos:end="567:38">&amp;</operator> <name pos:start="567:40" pos:end="567:43">SR_I</name><operator pos:start="567:44" pos:end="567:44">)</operator> <operator pos:start="567:46" pos:end="567:47">&gt;&gt;</operator> <name pos:start="567:49" pos:end="567:58">SR_I_SHIFT</name><operator pos:start="567:59" pos:end="567:59">)</operator>

                            <operator pos:start="569:29" pos:end="569:29">&lt;</operator> <name pos:start="569:31" pos:end="569:48"><name pos:start="569:31" pos:end="569:33">env</name><operator pos:start="569:34" pos:end="569:35">-&gt;</operator><name pos:start="569:36" pos:end="569:48">pending_level</name></name></expr>)</condition> <block pos:start="569:51" pos:end="590:0">{<block_content pos:start="581:25" pos:end="585:36">

                        <comment type="block" pos:start="571:25" pos:end="579:47">/* Real hardware gets the interrupt vector via an

                           IACK cycle at this point.  Current emulated

                           hardware doesn't rely on this, so we

                           provide/save the vector when the interrupt is

                           first signalled.  */</comment>

                        <expr_stmt pos:start="581:25" pos:end="581:67"><expr pos:start="581:25" pos:end="581:66"><name pos:start="581:25" pos:end="581:44"><name pos:start="581:25" pos:end="581:27">env</name><operator pos:start="581:28" pos:end="581:29">-&gt;</operator><name pos:start="581:30" pos:end="581:44">exception_index</name></name> <operator pos:start="581:46" pos:end="581:46">=</operator> <name pos:start="581:48" pos:end="581:66"><name pos:start="581:48" pos:end="581:50">env</name><operator pos:start="581:51" pos:end="581:52">-&gt;</operator><name pos:start="581:53" pos:end="581:66">pending_vector</name></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="583:25" pos:end="583:40"><expr pos:start="583:25" pos:end="583:39"><call pos:start="583:25" pos:end="583:39"><name pos:start="583:25" pos:end="583:36">do_interrupt</name><argument_list pos:start="583:37" pos:end="583:39">(<argument pos:start="583:38" pos:end="583:38"><expr pos:start="583:38" pos:end="583:38"><literal type="number" pos:start="583:38" pos:end="583:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="585:25" pos:end="585:36"><expr pos:start="585:25" pos:end="585:35"><name pos:start="585:25" pos:end="585:35">BREAK_CHAIN</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="589:1" pos:end="589:6">#<cpp:directive pos:start="589:2" pos:end="589:6">endif</cpp:directive></cpp:endif>

                   <comment type="block" pos:start="591:20" pos:end="593:71">/* Don't use the cached interupt_request value,

                      do_interrupt may have updated the EXITTB flag. */</comment>

                    <if_stmt pos:start="595:21" pos:end="605:21"><if pos:start="595:21" pos:end="605:21">if <condition pos:start="595:24" pos:end="595:70">(<expr pos:start="595:25" pos:end="595:69"><name pos:start="595:25" pos:end="595:46"><name pos:start="595:25" pos:end="595:27">env</name><operator pos:start="595:28" pos:end="595:29">-&gt;</operator><name pos:start="595:30" pos:end="595:46">interrupt_request</name></name> <operator pos:start="595:48" pos:end="595:48">&amp;</operator> <name pos:start="595:50" pos:end="595:69">CPU_INTERRUPT_EXITTB</name></expr>)</condition> <block pos:start="595:72" pos:end="605:21">{<block_content pos:start="597:25" pos:end="603:36">

                        <expr_stmt pos:start="597:25" pos:end="597:72"><expr pos:start="597:25" pos:end="597:71"><name pos:start="597:25" pos:end="597:46"><name pos:start="597:25" pos:end="597:27">env</name><operator pos:start="597:28" pos:end="597:29">-&gt;</operator><name pos:start="597:30" pos:end="597:46">interrupt_request</name></name> <operator pos:start="597:48" pos:end="597:49">&amp;=</operator> <operator pos:start="597:51" pos:end="597:51">~</operator><name pos:start="597:52" pos:end="597:71">CPU_INTERRUPT_EXITTB</name></expr>;</expr_stmt>

                        <comment type="block" pos:start="599:25" pos:end="601:58">/* ensure that no TB jump will be modified as

                           the program flow was changed */</comment>

                        <expr_stmt pos:start="603:25" pos:end="603:36"><expr pos:start="603:25" pos:end="603:35"><name pos:start="603:25" pos:end="603:35">BREAK_CHAIN</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="607:21" pos:end="615:21"><if pos:start="607:21" pos:end="615:21">if <condition pos:start="607:24" pos:end="607:63">(<expr pos:start="607:25" pos:end="607:62"><name pos:start="607:25" pos:end="607:41">interrupt_request</name> <operator pos:start="607:43" pos:end="607:43">&amp;</operator> <name pos:start="607:45" pos:end="607:62">CPU_INTERRUPT_EXIT</name></expr>)</condition> <block pos:start="607:65" pos:end="615:21">{<block_content pos:start="609:25" pos:end="613:40">

                        <expr_stmt pos:start="609:25" pos:end="609:70"><expr pos:start="609:25" pos:end="609:69"><name pos:start="609:25" pos:end="609:46"><name pos:start="609:25" pos:end="609:27">env</name><operator pos:start="609:28" pos:end="609:29">-&gt;</operator><name pos:start="609:30" pos:end="609:46">interrupt_request</name></name> <operator pos:start="609:48" pos:end="609:49">&amp;=</operator> <operator pos:start="609:51" pos:end="609:51">~</operator><name pos:start="609:52" pos:end="609:69">CPU_INTERRUPT_EXIT</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="611:25" pos:end="611:62"><expr pos:start="611:25" pos:end="611:61"><name pos:start="611:25" pos:end="611:44"><name pos:start="611:25" pos:end="611:27">env</name><operator pos:start="611:28" pos:end="611:29">-&gt;</operator><name pos:start="611:30" pos:end="611:44">exception_index</name></name> <operator pos:start="611:46" pos:end="611:46">=</operator> <name pos:start="611:48" pos:end="611:61">EXCP_INTERRUPT</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="613:25" pos:end="613:40"><expr pos:start="613:25" pos:end="613:39"><call pos:start="613:25" pos:end="613:39"><name pos:start="613:25" pos:end="613:37">cpu_loop_exit</name><argument_list pos:start="613:38" pos:end="613:39">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="619:1" pos:end="619:17">#<cpp:directive pos:start="619:2" pos:end="619:6">ifdef</cpp:directive> <name pos:start="619:8" pos:end="619:17">DEBUG_EXEC</name></cpp:ifdef>

                <if_stmt pos:start="621:17" pos:end="688:0"><if pos:start="621:17" pos:end="688:0">if <condition pos:start="621:20" pos:end="621:48">(<expr pos:start="621:21" pos:end="621:47"><operator pos:start="621:21" pos:end="621:21">(</operator><name pos:start="621:22" pos:end="621:29">loglevel</name> <operator pos:start="621:31" pos:end="621:31">&amp;</operator> <name pos:start="621:33" pos:end="621:46">CPU_LOG_TB_CPU</name><operator pos:start="621:47" pos:end="621:47">)</operator></expr>)</condition> <block pos:start="621:50" pos:end="688:0">{<block_content pos:start="625:21" pos:end="684:0">

                    <comment type="block" pos:start="623:21" pos:end="623:58">/* restore flags in standard format */</comment>

                    <expr_stmt pos:start="625:21" pos:end="628:0"><expr pos:start="625:21" pos:end="625:33"><call pos:start="625:21" pos:end="625:33"><name pos:start="625:21" pos:end="625:31">regs_to_env</name><argument_list pos:start="625:32" pos:end="625:33">()</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="627:1" pos:end="627:24">#<cpp:directive pos:start="627:2" pos:end="627:3">if</cpp:directive> <expr pos:start="627:5" pos:end="627:24"><call pos:start="627:5" pos:end="627:24"><name pos:start="627:5" pos:end="627:11">defined</name><argument_list pos:start="627:12" pos:end="627:24">(<argument pos:start="627:13" pos:end="627:23"><expr pos:start="627:13" pos:end="627:23"><name pos:start="627:13" pos:end="627:23">TARGET_I386</name></expr></argument>)</argument_list></call></expr></cpp:if>

                    <expr_stmt pos:start="629:21" pos:end="629:95"><expr pos:start="629:21" pos:end="629:94"><name pos:start="629:21" pos:end="629:31"><name pos:start="629:21" pos:end="629:23">env</name><operator pos:start="629:24" pos:end="629:25">-&gt;</operator><name pos:start="629:26" pos:end="629:31">eflags</name></name> <operator pos:start="629:33" pos:end="629:33">=</operator> <name pos:start="629:35" pos:end="629:45"><name pos:start="629:35" pos:end="629:37">env</name><operator pos:start="629:38" pos:end="629:39">-&gt;</operator><name pos:start="629:40" pos:end="629:45">eflags</name></name> <operator pos:start="629:47" pos:end="629:47">|</operator> <name pos:start="629:49" pos:end="629:63"><name pos:start="629:49" pos:end="629:56">cc_table</name><index pos:start="629:57" pos:end="629:63">[<expr pos:start="629:58" pos:end="629:62"><name pos:start="629:58" pos:end="629:62">CC_OP</name></expr>]</index></name><operator pos:start="629:64" pos:end="629:64">.</operator><call pos:start="629:65" pos:end="629:77"><name pos:start="629:65" pos:end="629:75">compute_all</name><argument_list pos:start="629:76" pos:end="629:77">()</argument_list></call> <operator pos:start="629:79" pos:end="629:79">|</operator> <operator pos:start="629:81" pos:end="629:81">(</operator><name pos:start="629:82" pos:end="629:83">DF</name> <operator pos:start="629:85" pos:end="629:85">&amp;</operator> <name pos:start="629:87" pos:end="629:93">DF_MASK</name><operator pos:start="629:94" pos:end="629:94">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="631:21" pos:end="631:73"><expr pos:start="631:21" pos:end="631:72"><call pos:start="631:21" pos:end="631:72"><name pos:start="631:21" pos:end="631:34">cpu_dump_state</name><argument_list pos:start="631:35" pos:end="631:72">(<argument pos:start="631:36" pos:end="631:38"><expr pos:start="631:36" pos:end="631:38"><name pos:start="631:36" pos:end="631:38">env</name></expr></argument>, <argument pos:start="631:41" pos:end="631:47"><expr pos:start="631:41" pos:end="631:47"><name pos:start="631:41" pos:end="631:47">logfile</name></expr></argument>, <argument pos:start="631:50" pos:end="631:56"><expr pos:start="631:50" pos:end="631:56"><name pos:start="631:50" pos:end="631:56">fprintf</name></expr></argument>, <argument pos:start="631:59" pos:end="631:71"><expr pos:start="631:59" pos:end="631:71"><name pos:start="631:59" pos:end="631:71">X86_DUMP_CCOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="633:21" pos:end="636:0"><expr pos:start="633:21" pos:end="633:87"><name pos:start="633:21" pos:end="633:31"><name pos:start="633:21" pos:end="633:23">env</name><operator pos:start="633:24" pos:end="633:25">-&gt;</operator><name pos:start="633:26" pos:end="633:31">eflags</name></name> <operator pos:start="633:33" pos:end="633:34">&amp;=</operator> <operator pos:start="633:36" pos:end="633:36">~</operator><operator pos:start="633:37" pos:end="633:37">(</operator><name pos:start="633:38" pos:end="633:44">DF_MASK</name> <operator pos:start="633:46" pos:end="633:46">|</operator> <name pos:start="633:48" pos:end="633:51">CC_O</name> <operator pos:start="633:53" pos:end="633:53">|</operator> <name pos:start="633:55" pos:end="633:58">CC_S</name> <operator pos:start="633:60" pos:end="633:60">|</operator> <name pos:start="633:62" pos:end="633:65">CC_Z</name> <operator pos:start="633:67" pos:end="633:67">|</operator> <name pos:start="633:69" pos:end="633:72">CC_A</name> <operator pos:start="633:74" pos:end="633:74">|</operator> <name pos:start="633:76" pos:end="633:79">CC_P</name> <operator pos:start="633:81" pos:end="633:81">|</operator> <name pos:start="633:83" pos:end="633:86">CC_C</name><operator pos:start="633:87" pos:end="633:87">)</operator></expr>;</expr_stmt>

<cpp:elif pos:start="635:1" pos:end="635:25">#<cpp:directive pos:start="635:2" pos:end="635:5">elif</cpp:directive> <expr pos:start="635:7" pos:end="635:25"><call pos:start="635:7" pos:end="635:25"><name pos:start="635:7" pos:end="635:13">defined</name><argument_list pos:start="635:14" pos:end="635:25">(<argument pos:start="635:15" pos:end="635:24"><expr pos:start="635:15" pos:end="635:24"><name pos:start="635:15" pos:end="635:24">TARGET_ARM</name></expr></argument>)</argument_list></call></expr></cpp:elif>

                    <expr_stmt pos:start="637:21" pos:end="640:0"><expr pos:start="637:21" pos:end="637:60"><call pos:start="637:21" pos:end="637:60"><name pos:start="637:21" pos:end="637:34">cpu_dump_state</name><argument_list pos:start="637:35" pos:end="637:60">(<argument pos:start="637:36" pos:end="637:38"><expr pos:start="637:36" pos:end="637:38"><name pos:start="637:36" pos:end="637:38">env</name></expr></argument>, <argument pos:start="637:41" pos:end="637:47"><expr pos:start="637:41" pos:end="637:47"><name pos:start="637:41" pos:end="637:47">logfile</name></expr></argument>, <argument pos:start="637:50" pos:end="637:56"><expr pos:start="637:50" pos:end="637:56"><name pos:start="637:50" pos:end="637:56">fprintf</name></expr></argument>, <argument pos:start="637:59" pos:end="637:59"><expr pos:start="637:59" pos:end="637:59"><literal type="number" pos:start="637:59" pos:end="637:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif pos:start="639:1" pos:end="639:27">#<cpp:directive pos:start="639:2" pos:end="639:5">elif</cpp:directive> <expr pos:start="639:7" pos:end="639:27"><call pos:start="639:7" pos:end="639:27"><name pos:start="639:7" pos:end="639:13">defined</name><argument_list pos:start="639:14" pos:end="639:27">(<argument pos:start="639:15" pos:end="639:26"><expr pos:start="639:15" pos:end="639:26"><name pos:start="639:15" pos:end="639:26">TARGET_SPARC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

		    <expr_stmt pos:start="641:21" pos:end="641:61"><expr pos:start="641:21" pos:end="641:60"><name pos:start="641:21" pos:end="641:27">REGWPTR</name> <operator pos:start="641:29" pos:end="641:29">=</operator> <name pos:start="641:31" pos:end="641:42"><name pos:start="641:31" pos:end="641:33">env</name><operator pos:start="641:34" pos:end="641:35">-&gt;</operator><name pos:start="641:36" pos:end="641:42">regbase</name></name> <operator pos:start="641:44" pos:end="641:44">+</operator> <operator pos:start="641:46" pos:end="641:46">(</operator><name pos:start="641:47" pos:end="641:54"><name pos:start="641:47" pos:end="641:49">env</name><operator pos:start="641:50" pos:end="641:51">-&gt;</operator><name pos:start="641:52" pos:end="641:54">cwp</name></name> <operator pos:start="641:56" pos:end="641:56">*</operator> <literal type="number" pos:start="641:58" pos:end="641:59">16</literal><operator pos:start="641:60" pos:end="641:60">)</operator></expr>;</expr_stmt>

		    <expr_stmt pos:start="643:21" pos:end="643:43"><expr pos:start="643:21" pos:end="643:42"><name pos:start="643:21" pos:end="643:32"><name pos:start="643:21" pos:end="643:23">env</name><operator pos:start="643:24" pos:end="643:25">-&gt;</operator><name pos:start="643:26" pos:end="643:32">regwptr</name></name> <operator pos:start="643:34" pos:end="643:34">=</operator> <name pos:start="643:36" pos:end="643:42">REGWPTR</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="645:21" pos:end="648:0"><expr pos:start="645:21" pos:end="645:60"><call pos:start="645:21" pos:end="645:60"><name pos:start="645:21" pos:end="645:34">cpu_dump_state</name><argument_list pos:start="645:35" pos:end="645:60">(<argument pos:start="645:36" pos:end="645:38"><expr pos:start="645:36" pos:end="645:38"><name pos:start="645:36" pos:end="645:38">env</name></expr></argument>, <argument pos:start="645:41" pos:end="645:47"><expr pos:start="645:41" pos:end="645:47"><name pos:start="645:41" pos:end="645:47">logfile</name></expr></argument>, <argument pos:start="645:50" pos:end="645:56"><expr pos:start="645:50" pos:end="645:56"><name pos:start="645:50" pos:end="645:56">fprintf</name></expr></argument>, <argument pos:start="645:59" pos:end="645:59"><expr pos:start="645:59" pos:end="645:59"><literal type="number" pos:start="645:59" pos:end="645:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif pos:start="647:1" pos:end="647:25">#<cpp:directive pos:start="647:2" pos:end="647:5">elif</cpp:directive> <expr pos:start="647:7" pos:end="647:25"><call pos:start="647:7" pos:end="647:25"><name pos:start="647:7" pos:end="647:13">defined</name><argument_list pos:start="647:14" pos:end="647:25">(<argument pos:start="647:15" pos:end="647:24"><expr pos:start="647:15" pos:end="647:24"><name pos:start="647:15" pos:end="647:24">TARGET_PPC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

                    <expr_stmt pos:start="649:21" pos:end="652:0"><expr pos:start="649:21" pos:end="649:60"><call pos:start="649:21" pos:end="649:60"><name pos:start="649:21" pos:end="649:34">cpu_dump_state</name><argument_list pos:start="649:35" pos:end="649:60">(<argument pos:start="649:36" pos:end="649:38"><expr pos:start="649:36" pos:end="649:38"><name pos:start="649:36" pos:end="649:38">env</name></expr></argument>, <argument pos:start="649:41" pos:end="649:47"><expr pos:start="649:41" pos:end="649:47"><name pos:start="649:41" pos:end="649:47">logfile</name></expr></argument>, <argument pos:start="649:50" pos:end="649:56"><expr pos:start="649:50" pos:end="649:56"><name pos:start="649:50" pos:end="649:56">fprintf</name></expr></argument>, <argument pos:start="649:59" pos:end="649:59"><expr pos:start="649:59" pos:end="649:59"><literal type="number" pos:start="649:59" pos:end="649:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif pos:start="651:1" pos:end="651:26">#<cpp:directive pos:start="651:2" pos:end="651:5">elif</cpp:directive> <expr pos:start="651:7" pos:end="651:26"><call pos:start="651:7" pos:end="651:26"><name pos:start="651:7" pos:end="651:13">defined</name><argument_list pos:start="651:14" pos:end="651:26">(<argument pos:start="651:15" pos:end="651:25"><expr pos:start="651:15" pos:end="651:25"><name pos:start="651:15" pos:end="651:25">TARGET_M68K</name></expr></argument>)</argument_list></call></expr></cpp:elif>

                    <expr_stmt pos:start="653:21" pos:end="653:58"><expr pos:start="653:21" pos:end="653:57"><call pos:start="653:21" pos:end="653:57"><name pos:start="653:21" pos:end="653:40">cpu_m68k_flush_flags</name><argument_list pos:start="653:41" pos:end="653:57">(<argument pos:start="653:42" pos:end="653:44"><expr pos:start="653:42" pos:end="653:44"><name pos:start="653:42" pos:end="653:44">env</name></expr></argument>, <argument pos:start="653:47" pos:end="653:56"><expr pos:start="653:47" pos:end="653:56"><name pos:start="653:47" pos:end="653:56"><name pos:start="653:47" pos:end="653:49">env</name><operator pos:start="653:50" pos:end="653:51">-&gt;</operator><name pos:start="653:52" pos:end="653:56">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="655:21" pos:end="655:45"><expr pos:start="655:21" pos:end="655:44"><name pos:start="655:21" pos:end="655:30"><name pos:start="655:21" pos:end="655:23">env</name><operator pos:start="655:24" pos:end="655:25">-&gt;</operator><name pos:start="655:26" pos:end="655:30">cc_op</name></name> <operator pos:start="655:32" pos:end="655:32">=</operator> <name pos:start="655:34" pos:end="655:44">CC_OP_FLAGS</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="657:21" pos:end="659:64"><expr pos:start="657:21" pos:end="659:63"><name pos:start="657:21" pos:end="657:27"><name pos:start="657:21" pos:end="657:23">env</name><operator pos:start="657:24" pos:end="657:25">-&gt;</operator><name pos:start="657:26" pos:end="657:27">sr</name></name> <operator pos:start="657:29" pos:end="657:29">=</operator> <operator pos:start="657:31" pos:end="657:31">(</operator><name pos:start="657:32" pos:end="657:38"><name pos:start="657:32" pos:end="657:34">env</name><operator pos:start="657:35" pos:end="657:36">-&gt;</operator><name pos:start="657:37" pos:end="657:38">sr</name></name> <operator pos:start="657:40" pos:end="657:40">&amp;</operator> <literal type="number" pos:start="657:42" pos:end="657:47">0xffe0</literal><operator pos:start="657:48" pos:end="657:48">)</operator>

                              <operator pos:start="659:31" pos:end="659:31">|</operator> <name pos:start="659:33" pos:end="659:44"><name pos:start="659:33" pos:end="659:35">env</name><operator pos:start="659:36" pos:end="659:37">-&gt;</operator><name pos:start="659:38" pos:end="659:44">cc_dest</name></name> <operator pos:start="659:46" pos:end="659:46">|</operator> <operator pos:start="659:48" pos:end="659:48">(</operator><name pos:start="659:49" pos:end="659:57"><name pos:start="659:49" pos:end="659:51">env</name><operator pos:start="659:52" pos:end="659:53">-&gt;</operator><name pos:start="659:54" pos:end="659:57">cc_x</name></name> <operator pos:start="659:59" pos:end="659:60">&lt;&lt;</operator> <literal type="number" pos:start="659:62" pos:end="659:62">4</literal><operator pos:start="659:63" pos:end="659:63">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="661:21" pos:end="664:0"><expr pos:start="661:21" pos:end="661:60"><call pos:start="661:21" pos:end="661:60"><name pos:start="661:21" pos:end="661:34">cpu_dump_state</name><argument_list pos:start="661:35" pos:end="661:60">(<argument pos:start="661:36" pos:end="661:38"><expr pos:start="661:36" pos:end="661:38"><name pos:start="661:36" pos:end="661:38">env</name></expr></argument>, <argument pos:start="661:41" pos:end="661:47"><expr pos:start="661:41" pos:end="661:47"><name pos:start="661:41" pos:end="661:47">logfile</name></expr></argument>, <argument pos:start="661:50" pos:end="661:56"><expr pos:start="661:50" pos:end="661:56"><name pos:start="661:50" pos:end="661:56">fprintf</name></expr></argument>, <argument pos:start="661:59" pos:end="661:59"><expr pos:start="661:59" pos:end="661:59"><literal type="number" pos:start="661:59" pos:end="661:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif pos:start="663:1" pos:end="663:26">#<cpp:directive pos:start="663:2" pos:end="663:5">elif</cpp:directive> <expr pos:start="663:7" pos:end="663:26"><call pos:start="663:7" pos:end="663:26"><name pos:start="663:7" pos:end="663:13">defined</name><argument_list pos:start="663:14" pos:end="663:26">(<argument pos:start="663:15" pos:end="663:25"><expr pos:start="663:15" pos:end="663:25"><name pos:start="663:15" pos:end="663:25">TARGET_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

                    <expr_stmt pos:start="665:21" pos:end="668:0"><expr pos:start="665:21" pos:end="665:60"><call pos:start="665:21" pos:end="665:60"><name pos:start="665:21" pos:end="665:34">cpu_dump_state</name><argument_list pos:start="665:35" pos:end="665:60">(<argument pos:start="665:36" pos:end="665:38"><expr pos:start="665:36" pos:end="665:38"><name pos:start="665:36" pos:end="665:38">env</name></expr></argument>, <argument pos:start="665:41" pos:end="665:47"><expr pos:start="665:41" pos:end="665:47"><name pos:start="665:41" pos:end="665:47">logfile</name></expr></argument>, <argument pos:start="665:50" pos:end="665:56"><expr pos:start="665:50" pos:end="665:56"><name pos:start="665:50" pos:end="665:56">fprintf</name></expr></argument>, <argument pos:start="665:59" pos:end="665:59"><expr pos:start="665:59" pos:end="665:59"><literal type="number" pos:start="665:59" pos:end="665:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif pos:start="667:1" pos:end="667:25">#<cpp:directive pos:start="667:2" pos:end="667:5">elif</cpp:directive> <expr pos:start="667:7" pos:end="667:25"><call pos:start="667:7" pos:end="667:25"><name pos:start="667:7" pos:end="667:13">defined</name><argument_list pos:start="667:14" pos:end="667:25">(<argument pos:start="667:15" pos:end="667:24"><expr pos:start="667:15" pos:end="667:24"><name pos:start="667:15" pos:end="667:24">TARGET_SH4</name></expr></argument>)</argument_list></call></expr></cpp:elif>

		    <expr_stmt pos:start="669:21" pos:end="672:0"><expr pos:start="669:21" pos:end="669:60"><call pos:start="669:21" pos:end="669:60"><name pos:start="669:21" pos:end="669:34">cpu_dump_state</name><argument_list pos:start="669:35" pos:end="669:60">(<argument pos:start="669:36" pos:end="669:38"><expr pos:start="669:36" pos:end="669:38"><name pos:start="669:36" pos:end="669:38">env</name></expr></argument>, <argument pos:start="669:41" pos:end="669:47"><expr pos:start="669:41" pos:end="669:47"><name pos:start="669:41" pos:end="669:47">logfile</name></expr></argument>, <argument pos:start="669:50" pos:end="669:56"><expr pos:start="669:50" pos:end="669:56"><name pos:start="669:50" pos:end="669:56">fprintf</name></expr></argument>, <argument pos:start="669:59" pos:end="669:59"><expr pos:start="669:59" pos:end="669:59"><literal type="number" pos:start="669:59" pos:end="669:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif pos:start="671:1" pos:end="671:27">#<cpp:directive pos:start="671:2" pos:end="671:5">elif</cpp:directive> <expr pos:start="671:7" pos:end="671:27"><call pos:start="671:7" pos:end="671:27"><name pos:start="671:7" pos:end="671:13">defined</name><argument_list pos:start="671:14" pos:end="671:27">(<argument pos:start="671:15" pos:end="671:26"><expr pos:start="671:15" pos:end="671:26"><name pos:start="671:15" pos:end="671:26">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:elif>

                    <expr_stmt pos:start="673:21" pos:end="676:0"><expr pos:start="673:21" pos:end="673:60"><call pos:start="673:21" pos:end="673:60"><name pos:start="673:21" pos:end="673:34">cpu_dump_state</name><argument_list pos:start="673:35" pos:end="673:60">(<argument pos:start="673:36" pos:end="673:38"><expr pos:start="673:36" pos:end="673:38"><name pos:start="673:36" pos:end="673:38">env</name></expr></argument>, <argument pos:start="673:41" pos:end="673:47"><expr pos:start="673:41" pos:end="673:47"><name pos:start="673:41" pos:end="673:47">logfile</name></expr></argument>, <argument pos:start="673:50" pos:end="673:56"><expr pos:start="673:50" pos:end="673:56"><name pos:start="673:50" pos:end="673:56">fprintf</name></expr></argument>, <argument pos:start="673:59" pos:end="673:59"><expr pos:start="673:59" pos:end="673:59"><literal type="number" pos:start="673:59" pos:end="673:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif pos:start="675:1" pos:end="675:26">#<cpp:directive pos:start="675:2" pos:end="675:5">elif</cpp:directive> <expr pos:start="675:7" pos:end="675:26"><call pos:start="675:7" pos:end="675:26"><name pos:start="675:7" pos:end="675:13">defined</name><argument_list pos:start="675:14" pos:end="675:26">(<argument pos:start="675:15" pos:end="675:25"><expr pos:start="675:15" pos:end="675:25"><name pos:start="675:15" pos:end="675:25">TARGET_CRIS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

                    <expr_stmt pos:start="677:21" pos:end="684:0"><expr pos:start="677:21" pos:end="677:60"><call pos:start="677:21" pos:end="677:60"><name pos:start="677:21" pos:end="677:34">cpu_dump_state</name><argument_list pos:start="677:35" pos:end="677:60">(<argument pos:start="677:36" pos:end="677:38"><expr pos:start="677:36" pos:end="677:38"><name pos:start="677:36" pos:end="677:38">env</name></expr></argument>, <argument pos:start="677:41" pos:end="677:47"><expr pos:start="677:41" pos:end="677:47"><name pos:start="677:41" pos:end="677:47">logfile</name></expr></argument>, <argument pos:start="677:50" pos:end="677:56"><expr pos:start="677:50" pos:end="677:56"><name pos:start="677:50" pos:end="677:56">fprintf</name></expr></argument>, <argument pos:start="677:59" pos:end="677:59"><expr pos:start="677:59" pos:end="677:59"><literal type="number" pos:start="677:59" pos:end="677:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="679:1" pos:end="679:5">#<cpp:directive pos:start="679:2" pos:end="679:5">else</cpp:directive></cpp:else>

<cpp:error pos:start="681:1" pos:end="681:29">#<cpp:directive pos:start="681:2" pos:end="681:6">error</cpp:directive> unsupported target CPU</cpp:error>

<cpp:endif pos:start="683:1" pos:end="683:6">#<cpp:directive pos:start="683:2" pos:end="683:6">endif</cpp:directive></cpp:endif>

                </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="687:1" pos:end="687:6">#<cpp:directive pos:start="687:2" pos:end="687:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="689:17" pos:end="692:0"><expr pos:start="689:17" pos:end="689:35"><name pos:start="689:17" pos:end="689:18">tb</name> <operator pos:start="689:20" pos:end="689:20">=</operator> <call pos:start="689:22" pos:end="689:35"><name pos:start="689:22" pos:end="689:33">tb_find_fast</name><argument_list pos:start="689:34" pos:end="689:35">()</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="691:1" pos:end="691:17">#<cpp:directive pos:start="691:2" pos:end="691:6">ifdef</cpp:directive> <name pos:start="691:8" pos:end="691:17">DEBUG_EXEC</name></cpp:ifdef>

                <if_stmt pos:start="693:17" pos:end="704:0"><if pos:start="693:17" pos:end="704:0">if <condition pos:start="693:20" pos:end="693:46">(<expr pos:start="693:21" pos:end="693:45"><operator pos:start="693:21" pos:end="693:21">(</operator><name pos:start="693:22" pos:end="693:29">loglevel</name> <operator pos:start="693:31" pos:end="693:31">&amp;</operator> <name pos:start="693:33" pos:end="693:44">CPU_LOG_EXEC</name><operator pos:start="693:45" pos:end="693:45">)</operator></expr>)</condition> <block pos:start="693:48" pos:end="704:0">{<block_content pos:start="695:21" pos:end="699:51">

                    <expr_stmt pos:start="695:21" pos:end="699:51"><expr pos:start="695:21" pos:end="699:50"><call pos:start="695:21" pos:end="699:50"><name pos:start="695:21" pos:end="695:27">fprintf</name><argument_list pos:start="695:28" pos:end="699:50">(<argument pos:start="695:29" pos:end="695:35"><expr pos:start="695:29" pos:end="695:35"><name pos:start="695:29" pos:end="695:35">logfile</name></expr></argument>, <argument pos:start="695:38" pos:end="695:77"><expr pos:start="695:38" pos:end="695:77"><literal type="string" pos:start="695:38" pos:end="695:54">"Trace 0x%08lx ["</literal> <name pos:start="695:56" pos:end="695:68">TARGET_FMT_lx</name> <literal type="string" pos:start="695:70" pos:end="695:77">"] %s\n"</literal></expr></argument>,

                            <argument pos:start="697:29" pos:end="697:44"><expr pos:start="697:29" pos:end="697:44"><operator pos:start="697:29" pos:end="697:29">(</operator><name pos:start="697:30" pos:end="697:33">long</name><operator pos:start="697:34" pos:end="697:34">)</operator><name pos:start="697:35" pos:end="697:44"><name pos:start="697:35" pos:end="697:36">tb</name><operator pos:start="697:37" pos:end="697:38">-&gt;</operator><name pos:start="697:39" pos:end="697:44">tc_ptr</name></name></expr></argument>, <argument pos:start="697:47" pos:end="697:52"><expr pos:start="697:47" pos:end="697:52"><name pos:start="697:47" pos:end="697:52"><name pos:start="697:47" pos:end="697:48">tb</name><operator pos:start="697:49" pos:end="697:50">-&gt;</operator><name pos:start="697:51" pos:end="697:52">pc</name></name></expr></argument>,

                            <argument pos:start="699:29" pos:end="699:49"><expr pos:start="699:29" pos:end="699:49"><call pos:start="699:29" pos:end="699:49"><name pos:start="699:29" pos:end="699:41">lookup_symbol</name><argument_list pos:start="699:42" pos:end="699:49">(<argument pos:start="699:43" pos:end="699:48"><expr pos:start="699:43" pos:end="699:48"><name pos:start="699:43" pos:end="699:48"><name pos:start="699:43" pos:end="699:44">tb</name><operator pos:start="699:45" pos:end="699:46">-&gt;</operator><name pos:start="699:47" pos:end="699:48">pc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="703:1" pos:end="703:6">#<cpp:directive pos:start="703:2" pos:end="703:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="705:17" pos:end="705:34"><expr pos:start="705:17" pos:end="705:33"><call pos:start="705:17" pos:end="705:33"><name pos:start="705:17" pos:end="705:31">RESTORE_GLOBALS</name><argument_list pos:start="705:32" pos:end="705:33">()</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="707:17" pos:end="711:27">/* see if we can patch the calling TB. When the TB

                   spans two pages, we cannot safely do a direct

                   jump. */</comment>

                <block pos:start="713:17" pos:end="733:17">{<block_content pos:start="715:21" pos:end="731:17">

                    <if_stmt pos:start="715:21" pos:end="731:17"><if pos:start="715:21" pos:end="731:17">if <condition pos:start="715:24" pos:end="723:47">(<expr pos:start="715:25" pos:end="723:46"><name pos:start="715:25" pos:end="715:26">T0</name> <operator pos:start="715:28" pos:end="715:29">!=</operator> <literal type="number" pos:start="715:31" pos:end="715:31">0</literal> <operator pos:start="715:33" pos:end="718:0">&amp;&amp;</operator>

<cpp:if pos:start="717:1" pos:end="717:13">#<cpp:directive pos:start="717:2" pos:end="717:3">if</cpp:directive> <expr pos:start="717:5" pos:end="717:13"><name pos:start="717:5" pos:end="717:13">USE_KQEMU</name></expr></cpp:if>

                        <operator pos:start="719:25" pos:end="719:25">(</operator><name pos:start="719:26" pos:end="719:43"><name pos:start="719:26" pos:end="719:28">env</name><operator pos:start="719:29" pos:end="719:30">-&gt;</operator><name pos:start="719:31" pos:end="719:43">kqemu_enabled</name></name> <operator pos:start="719:45" pos:end="719:46">!=</operator> <literal type="number" pos:start="719:48" pos:end="719:48">2</literal><operator pos:start="719:49" pos:end="719:49">)</operator> <operator pos:start="719:51" pos:end="722:0">&amp;&amp;</operator>

<cpp:endif pos:start="721:1" pos:end="721:6">#<cpp:directive pos:start="721:2" pos:end="721:6">endif</cpp:directive></cpp:endif>

                        <name pos:start="723:25" pos:end="723:40"><name pos:start="723:25" pos:end="723:26">tb</name><operator pos:start="723:27" pos:end="723:28">-&gt;</operator><name pos:start="723:29" pos:end="723:37">page_addr</name><index pos:start="723:38" pos:end="723:40">[<expr pos:start="723:39" pos:end="723:39"><literal type="number" pos:start="723:39" pos:end="723:39">1</literal></expr>]</index></name> <operator pos:start="723:42" pos:end="723:43">==</operator> <operator pos:start="723:45" pos:end="723:45">-</operator><literal type="number" pos:start="723:46" pos:end="723:46">1</literal></expr>)</condition> <block pos:start="723:49" pos:end="731:17">{<block_content pos:start="725:21" pos:end="729:42">

                    <expr_stmt pos:start="725:21" pos:end="725:40"><expr pos:start="725:21" pos:end="725:39"><call pos:start="725:21" pos:end="725:39"><name pos:start="725:21" pos:end="725:29">spin_lock</name><argument_list pos:start="725:30" pos:end="725:39">(<argument pos:start="725:31" pos:end="725:38"><expr pos:start="725:31" pos:end="725:38"><operator pos:start="725:31" pos:end="725:31">&amp;</operator><name pos:start="725:32" pos:end="725:38">tb_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="727:21" pos:end="727:81"><expr pos:start="727:21" pos:end="727:80"><call pos:start="727:21" pos:end="727:80"><name pos:start="727:21" pos:end="727:31">tb_add_jump</name><argument_list pos:start="727:32" pos:end="727:80">(<argument pos:start="727:33" pos:end="727:67"><expr pos:start="727:33" pos:end="727:67"><operator pos:start="727:33" pos:end="727:33">(</operator><name pos:start="727:34" pos:end="727:49">TranslationBlock</name> <operator pos:start="727:51" pos:end="727:51">*</operator><operator pos:start="727:52" pos:end="727:52">)</operator><operator pos:start="727:53" pos:end="727:53">(</operator><name pos:start="727:54" pos:end="727:57">long</name><operator pos:start="727:58" pos:end="727:58">)</operator><operator pos:start="727:59" pos:end="727:59">(</operator><name pos:start="727:60" pos:end="727:61">T0</name> <operator pos:start="727:63" pos:end="727:63">&amp;</operator> <operator pos:start="727:65" pos:end="727:65">~</operator><literal type="number" pos:start="727:66" pos:end="727:66">3</literal><operator pos:start="727:67" pos:end="727:67">)</operator></expr></argument>, <argument pos:start="727:70" pos:end="727:75"><expr pos:start="727:70" pos:end="727:75"><name pos:start="727:70" pos:end="727:71">T0</name> <operator pos:start="727:73" pos:end="727:73">&amp;</operator> <literal type="number" pos:start="727:75" pos:end="727:75">3</literal></expr></argument>, <argument pos:start="727:78" pos:end="727:79"><expr pos:start="727:78" pos:end="727:79"><name pos:start="727:78" pos:end="727:79">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="729:21" pos:end="729:42"><expr pos:start="729:21" pos:end="729:41"><call pos:start="729:21" pos:end="729:41"><name pos:start="729:21" pos:end="729:31">spin_unlock</name><argument_list pos:start="729:32" pos:end="729:41">(<argument pos:start="729:33" pos:end="729:40"><expr pos:start="729:33" pos:end="729:40"><operator pos:start="729:33" pos:end="729:33">&amp;</operator><name pos:start="729:34" pos:end="729:40">tb_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                </block_content>}</block>

                <expr_stmt pos:start="735:17" pos:end="735:36"><expr pos:start="735:17" pos:end="735:35"><name pos:start="735:17" pos:end="735:22">tc_ptr</name> <operator pos:start="735:24" pos:end="735:24">=</operator> <name pos:start="735:26" pos:end="735:35"><name pos:start="735:26" pos:end="735:27">tb</name><operator pos:start="735:28" pos:end="735:29">-&gt;</operator><name pos:start="735:30" pos:end="735:35">tc_ptr</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="737:17" pos:end="737:37"><expr pos:start="737:17" pos:end="737:36"><name pos:start="737:17" pos:end="737:31"><name pos:start="737:17" pos:end="737:19">env</name><operator pos:start="737:20" pos:end="737:21">-&gt;</operator><name pos:start="737:22" pos:end="737:31">current_tb</name></name> <operator pos:start="737:33" pos:end="737:33">=</operator> <name pos:start="737:35" pos:end="737:36">tb</name></expr>;</expr_stmt>

                <comment type="block" pos:start="739:17" pos:end="739:48">/* execute the generated code */</comment>

                <expr_stmt pos:start="741:17" pos:end="744:0"><expr pos:start="741:17" pos:end="741:41"><name pos:start="741:17" pos:end="741:24">gen_func</name> <operator pos:start="741:26" pos:end="741:26">=</operator> <operator pos:start="741:28" pos:end="741:28">(</operator><name pos:start="741:29" pos:end="741:32">void</name> <operator pos:start="741:34" pos:end="741:34">*</operator><operator pos:start="741:35" pos:end="741:35">)</operator><name pos:start="741:36" pos:end="741:41">tc_ptr</name></expr>;</expr_stmt>

<cpp:if pos:start="743:1" pos:end="743:22">#<cpp:directive pos:start="743:2" pos:end="743:3">if</cpp:directive> <expr pos:start="743:5" pos:end="743:22"><call pos:start="743:5" pos:end="743:22"><name pos:start="743:5" pos:end="743:11">defined</name><argument_list pos:start="743:12" pos:end="743:22">(<argument pos:start="743:13" pos:end="743:21"><expr pos:start="743:13" pos:end="743:21"><name pos:start="743:13" pos:end="743:21">__sparc__</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <asm pos:start="745:17" pos:end="762:0">__asm__ <specifier pos:start="745:25" pos:end="745:36">__volatile__</specifier>("call	%0\n\t"

                                     "mov	%%o7,%%i0"

                                     : <comment type="block" pos:start="749:40" pos:end="749:55">/* no outputs */</comment>

                                     : "r" (gen_func)

                                     : "i0", "i1", "i2", "i3", "i4", "i5",

                                       "o0", "o1", "o2", "o3", "o4", "o5",

                                       "l0", "l1", "l2", "l3", "l4", "l5",

                                       "l6", "l7");</asm>

<cpp:elif pos:start="761:1" pos:end="761:23">#<cpp:directive pos:start="761:2" pos:end="761:5">elif</cpp:directive> <expr pos:start="761:7" pos:end="761:23"><call pos:start="761:7" pos:end="761:23"><name pos:start="761:7" pos:end="761:13">defined</name><argument_list pos:start="761:14" pos:end="761:23">(<argument pos:start="761:15" pos:end="761:22"><expr pos:start="761:15" pos:end="761:22"><name pos:start="761:15" pos:end="761:22">__hppa__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

                <asm pos:start="763:17" pos:end="784:0">asm <specifier pos:start="763:21" pos:end="763:28">volatile</specifier> ("ble  0(%%sr4,%1)\n"

                              "copy %%r31,%%r18\n"

                              "copy %%r28,%0\n"

                              : "=r" (T0)

                              : "r" (gen_func)

                              : "r1", "r2", "r3", "r4", "r5", "r6", "r7",

                                "r8", "r9", "r10", "r11", "r12", "r13",

                                "r18", "r19", "r20", "r21", "r22", "r23",

                                "r24", "r25", "r26", "r27", "r28", "r29",

                                "r30", "r31");</asm>

<cpp:elif pos:start="783:1" pos:end="783:22">#<cpp:directive pos:start="783:2" pos:end="783:5">elif</cpp:directive> <expr pos:start="783:7" pos:end="783:22"><call pos:start="783:7" pos:end="783:22"><name pos:start="783:7" pos:end="783:13">defined</name><argument_list pos:start="783:14" pos:end="783:22">(<argument pos:start="783:15" pos:end="783:21"><expr pos:start="783:15" pos:end="783:21"><name pos:start="783:15" pos:end="783:21">__arm__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

                <asm pos:start="785:17" pos:end="798:0">asm <specifier pos:start="785:21" pos:end="785:28">volatile</specifier> ("mov pc, %0\n\t"

                              ".global exec_loop\n\t"

                              "exec_loop:\n\t"

                              : <comment type="block" pos:start="791:33" pos:end="791:48">/* no outputs */</comment>

                              : "r" (gen_func)

                              : "r1", "r2", "r3", "r8", "r9", "r10", "r12", "r14");</asm>

<cpp:elif pos:start="797:1" pos:end="797:21">#<cpp:directive pos:start="797:2" pos:end="797:5">elif</cpp:directive> <expr pos:start="797:7" pos:end="797:21"><call pos:start="797:7" pos:end="797:21"><name pos:start="797:7" pos:end="797:13">defined</name><argument_list pos:start="797:14" pos:end="797:21">(<argument pos:start="797:15" pos:end="797:20"><expr pos:start="797:15" pos:end="797:20"><name pos:start="797:15" pos:end="797:20">__ia64</name></expr></argument>)</argument_list></call></expr></cpp:elif>

		<struct pos:start="799:17" pos:end="805:21">struct <name pos:start="799:24" pos:end="799:27">fptr</name> <block pos:start="799:29" pos:end="805:17">{

			<decl_stmt pos:start="801:25" pos:end="801:33"><decl pos:start="801:25" pos:end="801:32"><type pos:start="801:25" pos:end="801:30"><name pos:start="801:25" pos:end="801:28">void</name> <modifier pos:start="801:30" pos:end="801:30">*</modifier></type><name pos:start="801:31" pos:end="801:32">ip</name></decl>;</decl_stmt>

			<decl_stmt pos:start="803:25" pos:end="803:33"><decl pos:start="803:25" pos:end="803:32"><type pos:start="803:25" pos:end="803:30"><name pos:start="803:25" pos:end="803:28">void</name> <modifier pos:start="803:30" pos:end="803:30">*</modifier></type><name pos:start="803:31" pos:end="803:32">gp</name></decl>;</decl_stmt>

		}</block> <decl pos:start="805:19" pos:end="805:20"><name pos:start="805:19" pos:end="805:20">fp</name></decl>;</struct>



		<expr_stmt pos:start="809:17" pos:end="809:31"><expr pos:start="809:17" pos:end="809:30"><name pos:start="809:17" pos:end="809:21"><name pos:start="809:17" pos:end="809:18">fp</name><operator pos:start="809:19" pos:end="809:19">.</operator><name pos:start="809:20" pos:end="809:21">ip</name></name> <operator pos:start="809:23" pos:end="809:23">=</operator> <name pos:start="809:25" pos:end="809:30">tc_ptr</name></expr>;</expr_stmt>

		<expr_stmt pos:start="811:17" pos:end="811:56"><expr pos:start="811:17" pos:end="811:55"><name pos:start="811:17" pos:end="811:21"><name pos:start="811:17" pos:end="811:18">fp</name><operator pos:start="811:19" pos:end="811:19">.</operator><name pos:start="811:20" pos:end="811:21">gp</name></name> <operator pos:start="811:23" pos:end="811:23">=</operator> <name pos:start="811:25" pos:end="811:39">code_gen_buffer</name> <operator pos:start="811:41" pos:end="811:41">+</operator> <literal type="number" pos:start="811:43" pos:end="811:43">2</literal> <operator pos:start="811:45" pos:end="811:45">*</operator> <operator pos:start="811:47" pos:end="811:47">(</operator><literal type="number" pos:start="811:48" pos:end="811:48">1</literal> <operator pos:start="811:50" pos:end="811:51">&lt;&lt;</operator> <literal type="number" pos:start="811:53" pos:end="811:54">20</literal><operator pos:start="811:55" pos:end="811:55">)</operator></expr>;</expr_stmt>

		<expr_stmt pos:start="813:17" pos:end="816:0"><expr pos:start="813:17" pos:end="813:41"><operator pos:start="813:17" pos:end="813:17">(</operator><operator pos:start="813:18" pos:end="813:18">*</operator><operator pos:start="813:19" pos:end="813:19">(</operator><call pos:start="813:20" pos:end="813:33"><call pos:start="813:20" pos:end="813:27"><name pos:start="813:20" pos:end="813:23">void</name> <argument_list pos:start="813:25" pos:end="813:27">(<argument pos:start="813:26" pos:end="813:26"><expr pos:start="813:26" pos:end="813:26"><operator pos:start="813:26" pos:end="813:26">*</operator></expr></argument>)</argument_list></call><argument_list pos:start="813:28" pos:end="813:33">(<argument pos:start="813:29" pos:end="813:32"><expr pos:start="813:29" pos:end="813:32"><name pos:start="813:29" pos:end="813:32">void</name></expr></argument>)</argument_list></call><operator pos:start="813:34" pos:end="813:34">)</operator> <operator pos:start="813:36" pos:end="813:36">&amp;</operator><name pos:start="813:37" pos:end="813:38">fp</name><operator pos:start="813:39" pos:end="813:39">)</operator><operator pos:start="813:40" pos:end="813:40">(</operator><operator pos:start="813:41" pos:end="813:41">)</operator></expr>;</expr_stmt>

<cpp:else pos:start="815:1" pos:end="815:5">#<cpp:directive pos:start="815:2" pos:end="815:5">else</cpp:directive></cpp:else>

                <expr_stmt pos:start="817:17" pos:end="820:0"><expr pos:start="817:17" pos:end="817:31"><name pos:start="817:17" pos:end="817:18">T0</name> <operator pos:start="817:20" pos:end="817:20">=</operator> <call pos:start="817:22" pos:end="817:31"><name pos:start="817:22" pos:end="817:29">gen_func</name><argument_list pos:start="817:30" pos:end="817:31">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="819:1" pos:end="819:6">#<cpp:directive pos:start="819:2" pos:end="819:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="821:17" pos:end="828:0"><expr pos:start="821:17" pos:end="821:38"><name pos:start="821:17" pos:end="821:31"><name pos:start="821:17" pos:end="821:19">env</name><operator pos:start="821:20" pos:end="821:21">-&gt;</operator><name pos:start="821:22" pos:end="821:31">current_tb</name></name> <operator pos:start="821:33" pos:end="821:33">=</operator> <name pos:start="821:35" pos:end="821:38">NULL</name></expr>;</expr_stmt>

                <comment type="block" pos:start="823:17" pos:end="825:52">/* reset soft MMU for next block (it can currently

                   only be set by a memory fault) */</comment>

<cpp:if pos:start="827:1" pos:end="827:52">#<cpp:directive pos:start="827:2" pos:end="827:3">if</cpp:directive> <expr pos:start="827:5" pos:end="827:52"><call pos:start="827:5" pos:end="827:24"><name pos:start="827:5" pos:end="827:11">defined</name><argument_list pos:start="827:12" pos:end="827:24">(<argument pos:start="827:13" pos:end="827:23"><expr pos:start="827:13" pos:end="827:23"><name pos:start="827:13" pos:end="827:23">TARGET_I386</name></expr></argument>)</argument_list></call> <operator pos:start="827:26" pos:end="827:27">&amp;&amp;</operator> <operator pos:start="827:29" pos:end="827:29">!</operator><call pos:start="827:30" pos:end="827:52"><name pos:start="827:30" pos:end="827:36">defined</name><argument_list pos:start="827:37" pos:end="827:52">(<argument pos:start="827:38" pos:end="827:51"><expr pos:start="827:38" pos:end="827:51"><name pos:start="827:38" pos:end="827:51">CONFIG_SOFTMMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <if_stmt pos:start="829:17" pos:end="844:0"><if pos:start="829:17" pos:end="844:0">if <condition pos:start="829:20" pos:end="829:50">(<expr pos:start="829:21" pos:end="829:49"><name pos:start="829:21" pos:end="829:31"><name pos:start="829:21" pos:end="829:23">env</name><operator pos:start="829:24" pos:end="829:25">-&gt;</operator><name pos:start="829:26" pos:end="829:31">hflags</name></name> <operator pos:start="829:33" pos:end="829:33">&amp;</operator> <name pos:start="829:35" pos:end="829:49">HF_SOFTMMU_MASK</name></expr>)</condition> <block pos:start="829:52" pos:end="844:0">{<block_content pos:start="831:21" pos:end="835:27">

                    <expr_stmt pos:start="831:21" pos:end="831:52"><expr pos:start="831:21" pos:end="831:51"><name pos:start="831:21" pos:end="831:31"><name pos:start="831:21" pos:end="831:23">env</name><operator pos:start="831:24" pos:end="831:25">-&gt;</operator><name pos:start="831:26" pos:end="831:31">hflags</name></name> <operator pos:start="831:33" pos:end="831:34">&amp;=</operator> <operator pos:start="831:36" pos:end="831:36">~</operator><name pos:start="831:37" pos:end="831:51">HF_SOFTMMU_MASK</name></expr>;</expr_stmt>

                    <comment type="block" pos:start="833:21" pos:end="833:63">/* do not allow linking to another block */</comment>

                    <expr_stmt pos:start="835:21" pos:end="835:27"><expr pos:start="835:21" pos:end="835:26"><name pos:start="835:21" pos:end="835:22">T0</name> <operator pos:start="835:24" pos:end="835:24">=</operator> <literal type="number" pos:start="835:26" pos:end="835:26">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="839:1" pos:end="839:6">#<cpp:directive pos:start="839:2" pos:end="839:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="841:1" pos:end="841:22">#<cpp:directive pos:start="841:2" pos:end="841:3">if</cpp:directive> <expr pos:start="841:5" pos:end="841:22"><call pos:start="841:5" pos:end="841:22"><name pos:start="841:5" pos:end="841:11">defined</name><argument_list pos:start="841:12" pos:end="841:22">(<argument pos:start="841:13" pos:end="841:21"><expr pos:start="841:13" pos:end="841:21"><name pos:start="841:13" pos:end="841:21">USE_KQEMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define pos:start="843:1" pos:end="843:44">#<cpp:directive pos:start="843:2" pos:end="843:7">define</cpp:directive> <cpp:macro pos:start="843:9" pos:end="843:31"><name pos:start="843:9" pos:end="843:31">MIN_CYCLE_BEFORE_SWITCH</name></cpp:macro> <cpp:value pos:start="843:33" pos:end="843:44">(100 * 1000)</cpp:value></cpp:define>

                <if_stmt pos:start="845:17" pos:end="854:0"><if pos:start="845:17" pos:end="854:0">if <condition pos:start="845:20" pos:end="847:89">(<expr pos:start="845:21" pos:end="847:88"><call pos:start="845:21" pos:end="845:36"><name pos:start="845:21" pos:end="845:31">kqemu_is_ok</name><argument_list pos:start="845:32" pos:end="845:36">(<argument pos:start="845:33" pos:end="845:35"><expr pos:start="845:33" pos:end="845:35"><name pos:start="845:33" pos:end="845:35">env</name></expr></argument>)</argument_list></call> <operator pos:start="845:38" pos:end="845:39">&amp;&amp;</operator>

                    <operator pos:start="847:21" pos:end="847:21">(</operator><call pos:start="847:22" pos:end="847:40"><name pos:start="847:22" pos:end="847:38">cpu_get_time_fast</name><argument_list pos:start="847:39" pos:end="847:40">()</argument_list></call> <operator pos:start="847:42" pos:end="847:42">-</operator> <name pos:start="847:44" pos:end="847:60"><name pos:start="847:44" pos:end="847:46">env</name><operator pos:start="847:47" pos:end="847:48">-&gt;</operator><name pos:start="847:49" pos:end="847:60">last_io_time</name></name><operator pos:start="847:61" pos:end="847:61">)</operator> <operator pos:start="847:63" pos:end="847:64">&gt;=</operator> <name pos:start="847:66" pos:end="847:88">MIN_CYCLE_BEFORE_SWITCH</name></expr>)</condition> <block pos:start="847:91" pos:end="854:0">{<block_content pos:start="849:21" pos:end="849:36">

                    <expr_stmt pos:start="849:21" pos:end="849:36"><expr pos:start="849:21" pos:end="849:35"><call pos:start="849:21" pos:end="849:35"><name pos:start="849:21" pos:end="849:33">cpu_loop_exit</name><argument_list pos:start="849:34" pos:end="849:35">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="853:1" pos:end="853:6">#<cpp:directive pos:start="853:2" pos:end="853:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></for> <comment type="block" pos:start="855:15" pos:end="855:27">/* for(;;) */</comment>

        </block_content>}</block></if> <else pos:start="857:11" pos:end="861:9">else <block pos:start="857:16" pos:end="861:9">{<block_content pos:start="859:13" pos:end="859:26">

            <expr_stmt pos:start="859:13" pos:end="859:26"><expr pos:start="859:13" pos:end="859:25"><call pos:start="859:13" pos:end="859:25"><name pos:start="859:13" pos:end="859:23">env_to_regs</name><argument_list pos:start="859:24" pos:end="859:25">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for> <comment type="block" pos:start="863:7" pos:end="863:19">/* for(;;) */</comment>





<cpp:if pos:start="869:1" pos:end="869:24">#<cpp:directive pos:start="869:2" pos:end="869:3">if</cpp:directive> <expr pos:start="869:5" pos:end="869:24"><call pos:start="869:5" pos:end="869:24"><name pos:start="869:5" pos:end="869:11">defined</name><argument_list pos:start="869:12" pos:end="869:24">(<argument pos:start="869:13" pos:end="869:23"><expr pos:start="869:13" pos:end="869:23"><name pos:start="869:13" pos:end="869:23">TARGET_I386</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="871:5" pos:end="871:42">/* restore flags in standard format */</comment>

    <expr_stmt pos:start="873:5" pos:end="882:0"><expr pos:start="873:5" pos:end="873:78"><name pos:start="873:5" pos:end="873:15"><name pos:start="873:5" pos:end="873:7">env</name><operator pos:start="873:8" pos:end="873:9">-&gt;</operator><name pos:start="873:10" pos:end="873:15">eflags</name></name> <operator pos:start="873:17" pos:end="873:17">=</operator> <name pos:start="873:19" pos:end="873:29"><name pos:start="873:19" pos:end="873:21">env</name><operator pos:start="873:22" pos:end="873:23">-&gt;</operator><name pos:start="873:24" pos:end="873:29">eflags</name></name> <operator pos:start="873:31" pos:end="873:31">|</operator> <name pos:start="873:33" pos:end="873:47"><name pos:start="873:33" pos:end="873:40">cc_table</name><index pos:start="873:41" pos:end="873:47">[<expr pos:start="873:42" pos:end="873:46"><name pos:start="873:42" pos:end="873:46">CC_OP</name></expr>]</index></name><operator pos:start="873:48" pos:end="873:48">.</operator><call pos:start="873:49" pos:end="873:61"><name pos:start="873:49" pos:end="873:59">compute_all</name><argument_list pos:start="873:60" pos:end="873:61">()</argument_list></call> <operator pos:start="873:63" pos:end="873:63">|</operator> <operator pos:start="873:65" pos:end="873:65">(</operator><name pos:start="873:66" pos:end="873:67">DF</name> <operator pos:start="873:69" pos:end="873:69">&amp;</operator> <name pos:start="873:71" pos:end="873:77">DF_MASK</name><operator pos:start="873:78" pos:end="873:78">)</operator></expr>;</expr_stmt>

<cpp:elif pos:start="875:1" pos:end="875:25">#<cpp:directive pos:start="875:2" pos:end="875:5">elif</cpp:directive> <expr pos:start="875:7" pos:end="875:25"><call pos:start="875:7" pos:end="875:25"><name pos:start="875:7" pos:end="875:13">defined</name><argument_list pos:start="875:14" pos:end="875:25">(<argument pos:start="875:15" pos:end="875:24"><expr pos:start="875:15" pos:end="875:24"><name pos:start="875:15" pos:end="875:24">TARGET_ARM</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <comment type="block" pos:start="877:5" pos:end="877:55">/* XXX: Save/restore host fpu exception state?.  */</comment>

<cpp:elif pos:start="879:1" pos:end="879:27">#<cpp:directive pos:start="879:2" pos:end="879:5">elif</cpp:directive> <expr pos:start="879:7" pos:end="879:27"><call pos:start="879:7" pos:end="879:27"><name pos:start="879:7" pos:end="879:13">defined</name><argument_list pos:start="879:14" pos:end="879:27">(<argument pos:start="879:15" pos:end="879:26"><expr pos:start="879:15" pos:end="879:26"><name pos:start="879:15" pos:end="879:26">TARGET_SPARC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:if pos:start="881:1" pos:end="881:24">#<cpp:directive pos:start="881:2" pos:end="881:3">if</cpp:directive> <expr pos:start="881:5" pos:end="881:24"><call pos:start="881:5" pos:end="881:24"><name pos:start="881:5" pos:end="881:11">defined</name><argument_list pos:start="881:12" pos:end="881:24">(<argument pos:start="881:13" pos:end="881:23"><expr pos:start="881:13" pos:end="881:23"><name pos:start="881:13" pos:end="881:23">reg_REGWPTR</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="883:5" pos:end="890:0"><expr pos:start="883:5" pos:end="883:27"><name pos:start="883:5" pos:end="883:11">REGWPTR</name> <operator pos:start="883:13" pos:end="883:13">=</operator> <name pos:start="883:15" pos:end="883:27">saved_regwptr</name></expr>;</expr_stmt>

<cpp:endif pos:start="885:1" pos:end="885:6">#<cpp:directive pos:start="885:2" pos:end="885:6">endif</cpp:directive></cpp:endif>

<cpp:elif pos:start="887:1" pos:end="887:25">#<cpp:directive pos:start="887:2" pos:end="887:5">elif</cpp:directive> <expr pos:start="887:7" pos:end="887:25"><call pos:start="887:7" pos:end="887:25"><name pos:start="887:7" pos:end="887:13">defined</name><argument_list pos:start="887:14" pos:end="887:25">(<argument pos:start="887:15" pos:end="887:24"><expr pos:start="887:15" pos:end="887:24"><name pos:start="887:15" pos:end="887:24">TARGET_PPC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:elif pos:start="889:1" pos:end="889:26">#<cpp:directive pos:start="889:2" pos:end="889:5">elif</cpp:directive> <expr pos:start="889:7" pos:end="889:26"><call pos:start="889:7" pos:end="889:26"><name pos:start="889:7" pos:end="889:13">defined</name><argument_list pos:start="889:14" pos:end="889:26">(<argument pos:start="889:15" pos:end="889:25"><expr pos:start="889:15" pos:end="889:25"><name pos:start="889:15" pos:end="889:25">TARGET_M68K</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt pos:start="891:5" pos:end="891:42"><expr pos:start="891:5" pos:end="891:41"><call pos:start="891:5" pos:end="891:41"><name pos:start="891:5" pos:end="891:24">cpu_m68k_flush_flags</name><argument_list pos:start="891:25" pos:end="891:41">(<argument pos:start="891:26" pos:end="891:28"><expr pos:start="891:26" pos:end="891:28"><name pos:start="891:26" pos:end="891:28">env</name></expr></argument>, <argument pos:start="891:31" pos:end="891:40"><expr pos:start="891:31" pos:end="891:40"><name pos:start="891:31" pos:end="891:40"><name pos:start="891:31" pos:end="891:33">env</name><operator pos:start="891:34" pos:end="891:35">-&gt;</operator><name pos:start="891:36" pos:end="891:40">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="893:5" pos:end="893:29"><expr pos:start="893:5" pos:end="893:28"><name pos:start="893:5" pos:end="893:14"><name pos:start="893:5" pos:end="893:7">env</name><operator pos:start="893:8" pos:end="893:9">-&gt;</operator><name pos:start="893:10" pos:end="893:14">cc_op</name></name> <operator pos:start="893:16" pos:end="893:16">=</operator> <name pos:start="893:18" pos:end="893:28">CC_OP_FLAGS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="895:5" pos:end="914:0"><expr pos:start="895:5" pos:end="897:47"><name pos:start="895:5" pos:end="895:11"><name pos:start="895:5" pos:end="895:7">env</name><operator pos:start="895:8" pos:end="895:9">-&gt;</operator><name pos:start="895:10" pos:end="895:11">sr</name></name> <operator pos:start="895:13" pos:end="895:13">=</operator> <operator pos:start="895:15" pos:end="895:15">(</operator><name pos:start="895:16" pos:end="895:22"><name pos:start="895:16" pos:end="895:18">env</name><operator pos:start="895:19" pos:end="895:20">-&gt;</operator><name pos:start="895:21" pos:end="895:22">sr</name></name> <operator pos:start="895:24" pos:end="895:24">&amp;</operator> <literal type="number" pos:start="895:26" pos:end="895:31">0xffe0</literal><operator pos:start="895:32" pos:end="895:32">)</operator>

              <operator pos:start="897:15" pos:end="897:15">|</operator> <name pos:start="897:17" pos:end="897:28"><name pos:start="897:17" pos:end="897:19">env</name><operator pos:start="897:20" pos:end="897:21">-&gt;</operator><name pos:start="897:22" pos:end="897:28">cc_dest</name></name> <operator pos:start="897:30" pos:end="897:30">|</operator> <operator pos:start="897:32" pos:end="897:32">(</operator><name pos:start="897:33" pos:end="897:41"><name pos:start="897:33" pos:end="897:35">env</name><operator pos:start="897:36" pos:end="897:37">-&gt;</operator><name pos:start="897:38" pos:end="897:41">cc_x</name></name> <operator pos:start="897:43" pos:end="897:44">&lt;&lt;</operator> <literal type="number" pos:start="897:46" pos:end="897:46">4</literal><operator pos:start="897:47" pos:end="897:47">)</operator></expr>;</expr_stmt>

<cpp:elif pos:start="899:1" pos:end="899:26">#<cpp:directive pos:start="899:2" pos:end="899:5">elif</cpp:directive> <expr pos:start="899:7" pos:end="899:26"><call pos:start="899:7" pos:end="899:26"><name pos:start="899:7" pos:end="899:13">defined</name><argument_list pos:start="899:14" pos:end="899:26">(<argument pos:start="899:15" pos:end="899:25"><expr pos:start="899:15" pos:end="899:25"><name pos:start="899:15" pos:end="899:25">TARGET_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:elif pos:start="901:1" pos:end="901:25">#<cpp:directive pos:start="901:2" pos:end="901:5">elif</cpp:directive> <expr pos:start="901:7" pos:end="901:25"><call pos:start="901:7" pos:end="901:25"><name pos:start="901:7" pos:end="901:13">defined</name><argument_list pos:start="901:14" pos:end="901:25">(<argument pos:start="901:15" pos:end="901:24"><expr pos:start="901:15" pos:end="901:24"><name pos:start="901:15" pos:end="901:24">TARGET_SH4</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:elif pos:start="903:1" pos:end="903:27">#<cpp:directive pos:start="903:2" pos:end="903:5">elif</cpp:directive> <expr pos:start="903:7" pos:end="903:27"><call pos:start="903:7" pos:end="903:27"><name pos:start="903:7" pos:end="903:13">defined</name><argument_list pos:start="903:14" pos:end="903:27">(<argument pos:start="903:15" pos:end="903:26"><expr pos:start="903:15" pos:end="903:26"><name pos:start="903:15" pos:end="903:26">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:elif pos:start="905:1" pos:end="905:26">#<cpp:directive pos:start="905:2" pos:end="905:5">elif</cpp:directive> <expr pos:start="905:7" pos:end="905:26"><call pos:start="905:7" pos:end="905:26"><name pos:start="905:7" pos:end="905:13">defined</name><argument_list pos:start="905:14" pos:end="905:26">(<argument pos:start="905:15" pos:end="905:25"><expr pos:start="905:15" pos:end="905:25"><name pos:start="905:15" pos:end="905:25">TARGET_CRIS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <comment type="block" pos:start="907:5" pos:end="907:15">/* XXXXX */</comment>

<cpp:else pos:start="909:1" pos:end="909:5">#<cpp:directive pos:start="909:2" pos:end="909:5">else</cpp:directive></cpp:else>

<cpp:error pos:start="911:1" pos:end="911:29">#<cpp:directive pos:start="911:2" pos:end="911:6">error</cpp:directive> unsupported target CPU</cpp:error>

<cpp:endif pos:start="913:1" pos:end="913:6">#<cpp:directive pos:start="913:2" pos:end="913:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="917:5" pos:end="917:34">/* restore global registers */</comment>

    <expr_stmt pos:start="919:5" pos:end="922:0"><expr pos:start="919:5" pos:end="919:21"><call pos:start="919:5" pos:end="919:21"><name pos:start="919:5" pos:end="919:19">RESTORE_GLOBALS</name><argument_list pos:start="919:20" pos:end="919:21">()</argument_list></call></expr>;</expr_stmt>

<cpp:include pos:start="921:1" pos:end="921:28">#<cpp:directive pos:start="921:2" pos:end="921:8">include</cpp:directive> <cpp:file pos:start="921:10" pos:end="921:28">"hostregs_helper.h"</cpp:file></cpp:include>



    <comment type="block" pos:start="925:5" pos:end="925:65">/* fail safe : never use cpu_single_env outside cpu_exec() */</comment>

    <expr_stmt pos:start="927:5" pos:end="927:26"><expr pos:start="927:5" pos:end="927:25"><name pos:start="927:5" pos:end="927:18">cpu_single_env</name> <operator pos:start="927:20" pos:end="927:20">=</operator> <name pos:start="927:22" pos:end="927:25">NULL</name></expr>;</expr_stmt>

    <return pos:start="929:5" pos:end="929:15">return <expr pos:start="929:12" pos:end="929:14"><name pos:start="929:12" pos:end="929:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
