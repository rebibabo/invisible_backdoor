<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26977.c" pos:tabs="8"><function pos:start="1:1" pos:end="411:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">http_prepare_data</name><parameter_list pos:start="1:29" pos:end="1:59">(<parameter pos:start="1:30" pos:end="1:43"><decl pos:start="1:30" pos:end="1:43"><type pos:start="1:30" pos:end="1:43"><name pos:start="1:30" pos:end="1:40">HTTPContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">c</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:58"><decl pos:start="1:46" pos:end="1:58"><type pos:start="1:46" pos:end="1:58"><name pos:start="1:46" pos:end="1:49">long</name></type> <name pos:start="1:51" pos:end="1:58">cur_time</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="411:1">{<block_content pos:start="5:5" pos:end="409:13">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>



    <switch pos:start="9:5" pos:end="407:5">switch<condition pos:start="9:11" pos:end="9:20">(<expr pos:start="9:12" pos:end="9:19"><name pos:start="9:12" pos:end="9:19"><name pos:start="9:12" pos:end="9:12">c</name><operator pos:start="9:13" pos:end="9:14">-&gt;</operator><name pos:start="9:15" pos:end="9:19">state</name></name></expr>)</condition> <block pos:start="9:22" pos:end="407:5">{<block_content pos:start="11:5" pos:end="405:14">

    <case pos:start="11:5" pos:end="11:36">case <expr pos:start="11:10" pos:end="11:35"><name pos:start="11:10" pos:end="11:35">HTTPSTATE_SEND_DATA_HEADER</name></expr>:</case>

        <expr_stmt pos:start="13:9" pos:end="13:51"><expr pos:start="13:9" pos:end="13:50"><call pos:start="13:9" pos:end="13:50"><name pos:start="13:9" pos:end="13:14">memset</name><argument_list pos:start="13:15" pos:end="13:50">(<argument pos:start="13:16" pos:end="13:26"><expr pos:start="13:16" pos:end="13:26"><operator pos:start="13:16" pos:end="13:16">&amp;</operator><name pos:start="13:17" pos:end="13:26"><name pos:start="13:17" pos:end="13:17">c</name><operator pos:start="13:18" pos:end="13:19">-&gt;</operator><name pos:start="13:20" pos:end="13:26">fmt_ctx</name></name></expr></argument>, <argument pos:start="13:29" pos:end="13:29"><expr pos:start="13:29" pos:end="13:29"><literal type="number" pos:start="13:29" pos:end="13:29">0</literal></expr></argument>, <argument pos:start="13:32" pos:end="13:49"><expr pos:start="13:32" pos:end="13:49"><sizeof pos:start="13:32" pos:end="13:49">sizeof<argument_list pos:start="13:38" pos:end="13:49">(<argument pos:start="13:39" pos:end="13:48"><expr pos:start="13:39" pos:end="13:48"><name pos:start="13:39" pos:end="13:48"><name pos:start="13:39" pos:end="13:39">c</name><operator pos:start="13:40" pos:end="13:41">-&gt;</operator><name pos:start="13:42" pos:end="13:48">fmt_ctx</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:81"><expr pos:start="15:9" pos:end="15:80"><call pos:start="15:9" pos:end="15:80"><name pos:start="15:9" pos:end="15:15">pstrcpy</name><argument_list pos:start="15:16" pos:end="15:80">(<argument pos:start="15:17" pos:end="15:33"><expr pos:start="15:17" pos:end="15:33"><name pos:start="15:17" pos:end="15:33"><name pos:start="15:17" pos:end="15:17">c</name><operator pos:start="15:18" pos:end="15:19">-&gt;</operator><name pos:start="15:20" pos:end="15:26">fmt_ctx</name><operator pos:start="15:27" pos:end="15:27">.</operator><name pos:start="15:28" pos:end="15:33">author</name></name></expr></argument>, <argument pos:start="15:36" pos:end="15:60"><expr pos:start="15:36" pos:end="15:60"><sizeof pos:start="15:36" pos:end="15:60">sizeof<argument_list pos:start="15:42" pos:end="15:60">(<argument pos:start="15:43" pos:end="15:59"><expr pos:start="15:43" pos:end="15:59"><name pos:start="15:43" pos:end="15:59"><name pos:start="15:43" pos:end="15:43">c</name><operator pos:start="15:44" pos:end="15:45">-&gt;</operator><name pos:start="15:46" pos:end="15:52">fmt_ctx</name><operator pos:start="15:53" pos:end="15:53">.</operator><name pos:start="15:54" pos:end="15:59">author</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="15:63" pos:end="15:79"><expr pos:start="15:63" pos:end="15:79"><name pos:start="15:63" pos:end="15:79"><name pos:start="15:63" pos:end="15:63">c</name><operator pos:start="15:64" pos:end="15:65">-&gt;</operator><name pos:start="15:66" pos:end="15:71">stream</name><operator pos:start="15:72" pos:end="15:73">-&gt;</operator><name pos:start="15:74" pos:end="15:79">author</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:84"><expr pos:start="17:9" pos:end="17:83"><call pos:start="17:9" pos:end="17:83"><name pos:start="17:9" pos:end="17:15">pstrcpy</name><argument_list pos:start="17:16" pos:end="17:83">(<argument pos:start="17:17" pos:end="17:34"><expr pos:start="17:17" pos:end="17:34"><name pos:start="17:17" pos:end="17:34"><name pos:start="17:17" pos:end="17:17">c</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:26">fmt_ctx</name><operator pos:start="17:27" pos:end="17:27">.</operator><name pos:start="17:28" pos:end="17:34">comment</name></name></expr></argument>, <argument pos:start="17:37" pos:end="17:62"><expr pos:start="17:37" pos:end="17:62"><sizeof pos:start="17:37" pos:end="17:62">sizeof<argument_list pos:start="17:43" pos:end="17:62">(<argument pos:start="17:44" pos:end="17:61"><expr pos:start="17:44" pos:end="17:61"><name pos:start="17:44" pos:end="17:61"><name pos:start="17:44" pos:end="17:44">c</name><operator pos:start="17:45" pos:end="17:46">-&gt;</operator><name pos:start="17:47" pos:end="17:53">fmt_ctx</name><operator pos:start="17:54" pos:end="17:54">.</operator><name pos:start="17:55" pos:end="17:61">comment</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="17:65" pos:end="17:82"><expr pos:start="17:65" pos:end="17:82"><name pos:start="17:65" pos:end="17:82"><name pos:start="17:65" pos:end="17:65">c</name><operator pos:start="17:66" pos:end="17:67">-&gt;</operator><name pos:start="17:68" pos:end="17:73">stream</name><operator pos:start="17:74" pos:end="17:75">-&gt;</operator><name pos:start="17:76" pos:end="17:82">comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:90"><expr pos:start="19:9" pos:end="19:89"><call pos:start="19:9" pos:end="19:89"><name pos:start="19:9" pos:end="19:15">pstrcpy</name><argument_list pos:start="19:16" pos:end="19:89">(<argument pos:start="19:17" pos:end="19:36"><expr pos:start="19:17" pos:end="19:36"><name pos:start="19:17" pos:end="19:36"><name pos:start="19:17" pos:end="19:17">c</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:26">fmt_ctx</name><operator pos:start="19:27" pos:end="19:27">.</operator><name pos:start="19:28" pos:end="19:36">copyright</name></name></expr></argument>, <argument pos:start="19:39" pos:end="19:66"><expr pos:start="19:39" pos:end="19:66"><sizeof pos:start="19:39" pos:end="19:66">sizeof<argument_list pos:start="19:45" pos:end="19:66">(<argument pos:start="19:46" pos:end="19:65"><expr pos:start="19:46" pos:end="19:65"><name pos:start="19:46" pos:end="19:65"><name pos:start="19:46" pos:end="19:46">c</name><operator pos:start="19:47" pos:end="19:48">-&gt;</operator><name pos:start="19:49" pos:end="19:55">fmt_ctx</name><operator pos:start="19:56" pos:end="19:56">.</operator><name pos:start="19:57" pos:end="19:65">copyright</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="19:69" pos:end="19:88"><expr pos:start="19:69" pos:end="19:88"><name pos:start="19:69" pos:end="19:88"><name pos:start="19:69" pos:end="19:69">c</name><operator pos:start="19:70" pos:end="19:71">-&gt;</operator><name pos:start="19:72" pos:end="19:77">stream</name><operator pos:start="19:78" pos:end="19:79">-&gt;</operator><name pos:start="19:80" pos:end="19:88">copyright</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:78"><expr pos:start="21:9" pos:end="21:77"><call pos:start="21:9" pos:end="21:77"><name pos:start="21:9" pos:end="21:15">pstrcpy</name><argument_list pos:start="21:16" pos:end="21:77">(<argument pos:start="21:17" pos:end="21:32"><expr pos:start="21:17" pos:end="21:32"><name pos:start="21:17" pos:end="21:32"><name pos:start="21:17" pos:end="21:17">c</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:26">fmt_ctx</name><operator pos:start="21:27" pos:end="21:27">.</operator><name pos:start="21:28" pos:end="21:32">title</name></name></expr></argument>, <argument pos:start="21:35" pos:end="21:58"><expr pos:start="21:35" pos:end="21:58"><sizeof pos:start="21:35" pos:end="21:58">sizeof<argument_list pos:start="21:41" pos:end="21:58">(<argument pos:start="21:42" pos:end="21:57"><expr pos:start="21:42" pos:end="21:57"><name pos:start="21:42" pos:end="21:57"><name pos:start="21:42" pos:end="21:42">c</name><operator pos:start="21:43" pos:end="21:44">-&gt;</operator><name pos:start="21:45" pos:end="21:51">fmt_ctx</name><operator pos:start="21:52" pos:end="21:52">.</operator><name pos:start="21:53" pos:end="21:57">title</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="21:61" pos:end="21:76"><expr pos:start="21:61" pos:end="21:76"><name pos:start="21:61" pos:end="21:76"><name pos:start="21:61" pos:end="21:61">c</name><operator pos:start="21:62" pos:end="21:63">-&gt;</operator><name pos:start="21:64" pos:end="21:69">stream</name><operator pos:start="21:70" pos:end="21:71">-&gt;</operator><name pos:start="21:72" pos:end="21:76">title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="25:9" pos:end="85:9"><if pos:start="25:9" pos:end="59:9">if <condition pos:start="25:12" pos:end="25:28">(<expr pos:start="25:13" pos:end="25:27"><name pos:start="25:13" pos:end="25:27"><name pos:start="25:13" pos:end="25:13">c</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:21">stream</name><operator pos:start="25:22" pos:end="25:23">-&gt;</operator><name pos:start="25:24" pos:end="25:27">feed</name></name></expr>)</condition> <block pos:start="25:30" pos:end="59:9">{<block_content pos:start="29:13" pos:end="57:33">

            <comment type="block" pos:start="27:13" pos:end="27:62">/* open output stream by using specified codecs */</comment>

            <expr_stmt pos:start="29:13" pos:end="29:48"><expr pos:start="29:13" pos:end="29:47"><name pos:start="29:13" pos:end="29:30"><name pos:start="29:13" pos:end="29:13">c</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:22">fmt_ctx</name><operator pos:start="29:23" pos:end="29:23">.</operator><name pos:start="29:24" pos:end="29:30">oformat</name></name> <operator pos:start="29:32" pos:end="29:32">=</operator> <name pos:start="29:34" pos:end="29:47"><name pos:start="29:34" pos:end="29:34">c</name><operator pos:start="29:35" pos:end="29:36">-&gt;</operator><name pos:start="29:37" pos:end="29:42">stream</name><operator pos:start="29:43" pos:end="29:44">-&gt;</operator><name pos:start="29:45" pos:end="29:47">fmt</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:58"><expr pos:start="31:13" pos:end="31:57"><name pos:start="31:13" pos:end="31:33"><name pos:start="31:13" pos:end="31:13">c</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:22">fmt_ctx</name><operator pos:start="31:23" pos:end="31:23">.</operator><name pos:start="31:24" pos:end="31:33">nb_streams</name></name> <operator pos:start="31:35" pos:end="31:35">=</operator> <name pos:start="31:37" pos:end="31:57"><name pos:start="31:37" pos:end="31:37">c</name><operator pos:start="31:38" pos:end="31:39">-&gt;</operator><name pos:start="31:40" pos:end="31:45">stream</name><operator pos:start="31:46" pos:end="31:47">-&gt;</operator><name pos:start="31:48" pos:end="31:57">nb_streams</name></name></expr>;</expr_stmt>

            <for pos:start="33:13" pos:end="55:13">for<control pos:start="33:16" pos:end="33:48">(<init pos:start="33:17" pos:end="33:20"><expr pos:start="33:17" pos:end="33:19"><name pos:start="33:17" pos:end="33:17">i</name><operator pos:start="33:18" pos:end="33:18">=</operator><literal type="number" pos:start="33:19" pos:end="33:19">0</literal></expr>;</init><condition pos:start="33:21" pos:end="33:44"><expr pos:start="33:21" pos:end="33:43"><name pos:start="33:21" pos:end="33:21">i</name><operator pos:start="33:22" pos:end="33:22">&lt;</operator><name pos:start="33:23" pos:end="33:43"><name pos:start="33:23" pos:end="33:23">c</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:32">fmt_ctx</name><operator pos:start="33:33" pos:end="33:33">.</operator><name pos:start="33:34" pos:end="33:43">nb_streams</name></name></expr>;</condition><incr pos:start="33:45" pos:end="33:47"><expr pos:start="33:45" pos:end="33:47"><name pos:start="33:45" pos:end="33:45">i</name><operator pos:start="33:46" pos:end="33:47">++</operator></expr></incr>)</control> <block pos:start="33:50" pos:end="55:13">{<block_content pos:start="35:17" pos:end="51:43">

                <decl_stmt pos:start="35:17" pos:end="35:29"><decl pos:start="35:17" pos:end="35:28"><type pos:start="35:17" pos:end="35:26"><name pos:start="35:17" pos:end="35:24">AVStream</name> <modifier pos:start="35:26" pos:end="35:26">*</modifier></type><name pos:start="35:27" pos:end="35:28">st</name></decl>;</decl_stmt>

                <expr_stmt pos:start="37:17" pos:end="37:50"><expr pos:start="37:17" pos:end="37:49"><name pos:start="37:17" pos:end="37:18">st</name> <operator pos:start="37:20" pos:end="37:20">=</operator> <call pos:start="37:22" pos:end="37:49"><name pos:start="37:22" pos:end="37:31">av_mallocz</name><argument_list pos:start="37:32" pos:end="37:49">(<argument pos:start="37:33" pos:end="37:48"><expr pos:start="37:33" pos:end="37:48"><sizeof pos:start="37:33" pos:end="37:48">sizeof<argument_list pos:start="37:39" pos:end="37:48">(<argument pos:start="37:40" pos:end="37:47"><expr pos:start="37:40" pos:end="37:47"><name pos:start="37:40" pos:end="37:47">AVStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="39:17" pos:end="39:43"><expr pos:start="39:17" pos:end="39:42"><name pos:start="39:17" pos:end="39:37"><name pos:start="39:17" pos:end="39:17">c</name><operator pos:start="39:18" pos:end="39:19">-&gt;</operator><name pos:start="39:20" pos:end="39:26">fmt_ctx</name><operator pos:start="39:27" pos:end="39:27">.</operator><name pos:start="39:28" pos:end="39:34">streams</name><index pos:start="39:35" pos:end="39:37">[<expr pos:start="39:36" pos:end="39:36"><name pos:start="39:36" pos:end="39:36">i</name></expr>]</index></name> <operator pos:start="39:39" pos:end="39:39">=</operator> <name pos:start="39:41" pos:end="39:42">st</name></expr>;</expr_stmt>

                <if_stmt pos:start="41:17" pos:end="47:103"><if pos:start="41:17" pos:end="43:72">if <condition pos:start="41:20" pos:end="41:49">(<expr pos:start="41:21" pos:end="41:48"><name pos:start="41:21" pos:end="41:35"><name pos:start="41:21" pos:end="41:21">c</name><operator pos:start="41:22" pos:end="41:23">-&gt;</operator><name pos:start="41:24" pos:end="41:29">stream</name><operator pos:start="41:30" pos:end="41:31">-&gt;</operator><name pos:start="41:32" pos:end="41:35">feed</name></name> <operator pos:start="41:37" pos:end="41:38">==</operator> <name pos:start="41:40" pos:end="41:48"><name pos:start="41:40" pos:end="41:40">c</name><operator pos:start="41:41" pos:end="41:42">-&gt;</operator><name pos:start="41:43" pos:end="41:48">stream</name></name></expr>)</condition><block type="pseudo" pos:start="43:21" pos:end="43:72"><block_content pos:start="43:21" pos:end="43:72">

                    <expr_stmt pos:start="43:21" pos:end="43:72"><expr pos:start="43:21" pos:end="43:71"><call pos:start="43:21" pos:end="43:71"><name pos:start="43:21" pos:end="43:26">memcpy</name><argument_list pos:start="43:27" pos:end="43:71">(<argument pos:start="43:28" pos:end="43:29"><expr pos:start="43:28" pos:end="43:29"><name pos:start="43:28" pos:end="43:29">st</name></expr></argument>, <argument pos:start="43:32" pos:end="43:52"><expr pos:start="43:32" pos:end="43:52"><name pos:start="43:32" pos:end="43:52"><name pos:start="43:32" pos:end="43:32">c</name><operator pos:start="43:33" pos:end="43:34">-&gt;</operator><name pos:start="43:35" pos:end="43:40">stream</name><operator pos:start="43:41" pos:end="43:42">-&gt;</operator><name pos:start="43:43" pos:end="43:49">streams</name><index pos:start="43:50" pos:end="43:52">[<expr pos:start="43:51" pos:end="43:51"><name pos:start="43:51" pos:end="43:51">i</name></expr>]</index></name></expr></argument>, <argument pos:start="43:55" pos:end="43:70"><expr pos:start="43:55" pos:end="43:70"><sizeof pos:start="43:55" pos:end="43:70">sizeof<argument_list pos:start="43:61" pos:end="43:70">(<argument pos:start="43:62" pos:end="43:69"><expr pos:start="43:62" pos:end="43:69"><name pos:start="43:62" pos:end="43:69">AVStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="45:17" pos:end="47:103">else<block type="pseudo" pos:start="47:21" pos:end="47:103"><block_content pos:start="47:21" pos:end="47:103">

                    <expr_stmt pos:start="47:21" pos:end="47:103"><expr pos:start="47:21" pos:end="47:102"><call pos:start="47:21" pos:end="47:102"><name pos:start="47:21" pos:end="47:26">memcpy</name><argument_list pos:start="47:27" pos:end="47:102">(<argument pos:start="47:28" pos:end="47:29"><expr pos:start="47:28" pos:end="47:29"><name pos:start="47:28" pos:end="47:29">st</name></expr></argument>, <argument pos:start="47:32" pos:end="47:83"><expr pos:start="47:32" pos:end="47:83"><name pos:start="47:32" pos:end="47:83"><name pos:start="47:32" pos:end="47:32">c</name><operator pos:start="47:33" pos:end="47:34">-&gt;</operator><name pos:start="47:35" pos:end="47:40">stream</name><operator pos:start="47:41" pos:end="47:42">-&gt;</operator><name pos:start="47:43" pos:end="47:46">feed</name><operator pos:start="47:47" pos:end="47:48">-&gt;</operator><name pos:start="47:49" pos:end="47:55">streams</name><index pos:start="47:56" pos:end="47:83">[<expr pos:start="47:57" pos:end="47:82"><name pos:start="47:57" pos:end="47:82"><name pos:start="47:57" pos:end="47:57">c</name><operator pos:start="47:58" pos:end="47:59">-&gt;</operator><name pos:start="47:60" pos:end="47:65">stream</name><operator pos:start="47:66" pos:end="47:67">-&gt;</operator><name pos:start="47:68" pos:end="47:79">feed_streams</name><index pos:start="47:80" pos:end="47:82">[<expr pos:start="47:81" pos:end="47:81"><name pos:start="47:81" pos:end="47:81">i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="47:86" pos:end="47:101"><expr pos:start="47:86" pos:end="47:101"><sizeof pos:start="47:86" pos:end="47:101">sizeof<argument_list pos:start="47:92" pos:end="47:101">(<argument pos:start="47:93" pos:end="47:100"><expr pos:start="47:93" pos:end="47:100"><name pos:start="47:93" pos:end="47:100">AVStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



                <expr_stmt pos:start="51:17" pos:end="51:43"><expr pos:start="51:17" pos:end="51:42"><name pos:start="51:17" pos:end="51:38"><name pos:start="51:17" pos:end="51:18">st</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:25">codec</name><operator pos:start="51:26" pos:end="51:26">.</operator><name pos:start="51:27" pos:end="51:38">frame_number</name></name> <operator pos:start="51:40" pos:end="51:40">=</operator> <literal type="number" pos:start="51:42" pos:end="51:42">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="51:45" pos:end="53:72">/* XXX: should be done in

                                               AVStream, not in codec */</comment>

            </block_content>}</block></for>

            <expr_stmt pos:start="57:13" pos:end="57:33"><expr pos:start="57:13" pos:end="57:32"><name pos:start="57:13" pos:end="57:28"><name pos:start="57:13" pos:end="57:13">c</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:28">got_key_frame</name></name> <operator pos:start="57:30" pos:end="57:30">=</operator> <literal type="number" pos:start="57:32" pos:end="57:32">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="59:11" pos:end="85:9">else <block pos:start="59:16" pos:end="85:9">{<block_content pos:start="63:13" pos:end="83:33">

            <comment type="block" pos:start="61:13" pos:end="61:70">/* open output stream by using codecs in specified file */</comment>

            <expr_stmt pos:start="63:13" pos:end="63:48"><expr pos:start="63:13" pos:end="63:47"><name pos:start="63:13" pos:end="63:30"><name pos:start="63:13" pos:end="63:13">c</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:22">fmt_ctx</name><operator pos:start="63:23" pos:end="63:23">.</operator><name pos:start="63:24" pos:end="63:30">oformat</name></name> <operator pos:start="63:32" pos:end="63:32">=</operator> <name pos:start="63:34" pos:end="63:47"><name pos:start="63:34" pos:end="63:34">c</name><operator pos:start="63:35" pos:end="63:36">-&gt;</operator><name pos:start="63:37" pos:end="63:42">stream</name><operator pos:start="63:43" pos:end="63:44">-&gt;</operator><name pos:start="63:45" pos:end="63:47">fmt</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:58"><expr pos:start="65:13" pos:end="65:57"><name pos:start="65:13" pos:end="65:33"><name pos:start="65:13" pos:end="65:13">c</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:22">fmt_ctx</name><operator pos:start="65:23" pos:end="65:23">.</operator><name pos:start="65:24" pos:end="65:33">nb_streams</name></name> <operator pos:start="65:35" pos:end="65:35">=</operator> <name pos:start="65:37" pos:end="65:57"><name pos:start="65:37" pos:end="65:37">c</name><operator pos:start="65:38" pos:end="65:39">-&gt;</operator><name pos:start="65:40" pos:end="65:45">fmt_in</name><operator pos:start="65:46" pos:end="65:47">-&gt;</operator><name pos:start="65:48" pos:end="65:57">nb_streams</name></name></expr>;</expr_stmt>

            <for pos:start="67:13" pos:end="81:13">for<control pos:start="67:16" pos:end="67:48">(<init pos:start="67:17" pos:end="67:20"><expr pos:start="67:17" pos:end="67:19"><name pos:start="67:17" pos:end="67:17">i</name><operator pos:start="67:18" pos:end="67:18">=</operator><literal type="number" pos:start="67:19" pos:end="67:19">0</literal></expr>;</init><condition pos:start="67:21" pos:end="67:44"><expr pos:start="67:21" pos:end="67:43"><name pos:start="67:21" pos:end="67:21">i</name><operator pos:start="67:22" pos:end="67:22">&lt;</operator><name pos:start="67:23" pos:end="67:43"><name pos:start="67:23" pos:end="67:23">c</name><operator pos:start="67:24" pos:end="67:25">-&gt;</operator><name pos:start="67:26" pos:end="67:32">fmt_ctx</name><operator pos:start="67:33" pos:end="67:33">.</operator><name pos:start="67:34" pos:end="67:43">nb_streams</name></name></expr>;</condition><incr pos:start="67:45" pos:end="67:47"><expr pos:start="67:45" pos:end="67:47"><name pos:start="67:45" pos:end="67:45">i</name><operator pos:start="67:46" pos:end="67:47">++</operator></expr></incr>)</control> <block pos:start="67:50" pos:end="81:13">{<block_content pos:start="69:17" pos:end="77:43">

                <decl_stmt pos:start="69:17" pos:end="69:29"><decl pos:start="69:17" pos:end="69:28"><type pos:start="69:17" pos:end="69:26"><name pos:start="69:17" pos:end="69:24">AVStream</name> <modifier pos:start="69:26" pos:end="69:26">*</modifier></type><name pos:start="69:27" pos:end="69:28">st</name></decl>;</decl_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:50"><expr pos:start="71:17" pos:end="71:49"><name pos:start="71:17" pos:end="71:18">st</name> <operator pos:start="71:20" pos:end="71:20">=</operator> <call pos:start="71:22" pos:end="71:49"><name pos:start="71:22" pos:end="71:31">av_mallocz</name><argument_list pos:start="71:32" pos:end="71:49">(<argument pos:start="71:33" pos:end="71:48"><expr pos:start="71:33" pos:end="71:48"><sizeof pos:start="71:33" pos:end="71:48">sizeof<argument_list pos:start="71:39" pos:end="71:48">(<argument pos:start="71:40" pos:end="71:47"><expr pos:start="71:40" pos:end="71:47"><name pos:start="71:40" pos:end="71:47">AVStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="73:17" pos:end="73:43"><expr pos:start="73:17" pos:end="73:42"><name pos:start="73:17" pos:end="73:37"><name pos:start="73:17" pos:end="73:17">c</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:26">fmt_ctx</name><operator pos:start="73:27" pos:end="73:27">.</operator><name pos:start="73:28" pos:end="73:34">streams</name><index pos:start="73:35" pos:end="73:37">[<expr pos:start="73:36" pos:end="73:36"><name pos:start="73:36" pos:end="73:36">i</name></expr>]</index></name> <operator pos:start="73:39" pos:end="73:39">=</operator> <name pos:start="73:41" pos:end="73:42">st</name></expr>;</expr_stmt>

                <expr_stmt pos:start="75:17" pos:end="75:68"><expr pos:start="75:17" pos:end="75:67"><call pos:start="75:17" pos:end="75:67"><name pos:start="75:17" pos:end="75:22">memcpy</name><argument_list pos:start="75:23" pos:end="75:67">(<argument pos:start="75:24" pos:end="75:25"><expr pos:start="75:24" pos:end="75:25"><name pos:start="75:24" pos:end="75:25">st</name></expr></argument>, <argument pos:start="75:28" pos:end="75:48"><expr pos:start="75:28" pos:end="75:48"><name pos:start="75:28" pos:end="75:48"><name pos:start="75:28" pos:end="75:28">c</name><operator pos:start="75:29" pos:end="75:30">-&gt;</operator><name pos:start="75:31" pos:end="75:36">fmt_in</name><operator pos:start="75:37" pos:end="75:38">-&gt;</operator><name pos:start="75:39" pos:end="75:45">streams</name><index pos:start="75:46" pos:end="75:48">[<expr pos:start="75:47" pos:end="75:47"><name pos:start="75:47" pos:end="75:47">i</name></expr>]</index></name></expr></argument>, <argument pos:start="75:51" pos:end="75:66"><expr pos:start="75:51" pos:end="75:66"><sizeof pos:start="75:51" pos:end="75:66">sizeof<argument_list pos:start="75:57" pos:end="75:66">(<argument pos:start="75:58" pos:end="75:65"><expr pos:start="75:58" pos:end="75:65"><name pos:start="75:58" pos:end="75:65">AVStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:43"><expr pos:start="77:17" pos:end="77:42"><name pos:start="77:17" pos:end="77:38"><name pos:start="77:17" pos:end="77:18">st</name><operator pos:start="77:19" pos:end="77:20">-&gt;</operator><name pos:start="77:21" pos:end="77:25">codec</name><operator pos:start="77:26" pos:end="77:26">.</operator><name pos:start="77:27" pos:end="77:38">frame_number</name></name> <operator pos:start="77:40" pos:end="77:40">=</operator> <literal type="number" pos:start="77:42" pos:end="77:42">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="77:45" pos:end="79:72">/* XXX: should be done in

                                               AVStream, not in codec */</comment>

            </block_content>}</block></for>

            <expr_stmt pos:start="83:13" pos:end="83:33"><expr pos:start="83:13" pos:end="83:32"><name pos:start="83:13" pos:end="83:28"><name pos:start="83:13" pos:end="83:13">c</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:28">got_key_frame</name></name> <operator pos:start="83:30" pos:end="83:30">=</operator> <literal type="number" pos:start="83:32" pos:end="83:32">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="87:9" pos:end="89:59"><expr pos:start="87:9" pos:end="89:58"><call pos:start="87:9" pos:end="89:58"><name pos:start="87:9" pos:end="87:21">init_put_byte</name><argument_list pos:start="87:22" pos:end="89:58">(<argument pos:start="87:23" pos:end="87:36"><expr pos:start="87:23" pos:end="87:36"><operator pos:start="87:23" pos:end="87:23">&amp;</operator><name pos:start="87:24" pos:end="87:36"><name pos:start="87:24" pos:end="87:24">c</name><operator pos:start="87:25" pos:end="87:26">-&gt;</operator><name pos:start="87:27" pos:end="87:33">fmt_ctx</name><operator pos:start="87:34" pos:end="87:34">.</operator><name pos:start="87:35" pos:end="87:36">pb</name></name></expr></argument>, <argument pos:start="87:39" pos:end="87:48"><expr pos:start="87:39" pos:end="87:48"><name pos:start="87:39" pos:end="87:48"><name pos:start="87:39" pos:end="87:39">c</name><operator pos:start="87:40" pos:end="87:41">-&gt;</operator><name pos:start="87:42" pos:end="87:48">pbuffer</name></name></expr></argument>, <argument pos:start="87:51" pos:end="87:65"><expr pos:start="87:51" pos:end="87:65"><name pos:start="87:51" pos:end="87:65"><name pos:start="87:51" pos:end="87:51">c</name><operator pos:start="87:52" pos:end="87:53">-&gt;</operator><name pos:start="87:54" pos:end="87:65">pbuffer_size</name></name></expr></argument>,

                      <argument pos:start="89:23" pos:end="89:23"><expr pos:start="89:23" pos:end="89:23"><literal type="number" pos:start="89:23" pos:end="89:23">1</literal></expr></argument>, <argument pos:start="89:26" pos:end="89:26"><expr pos:start="89:26" pos:end="89:26"><name pos:start="89:26" pos:end="89:26">c</name></expr></argument>, <argument pos:start="89:29" pos:end="89:32"><expr pos:start="89:29" pos:end="89:32"><name pos:start="89:29" pos:end="89:32">NULL</name></expr></argument>, <argument pos:start="89:35" pos:end="89:51"><expr pos:start="89:35" pos:end="89:51"><name pos:start="89:35" pos:end="89:51">http_write_packet</name></expr></argument>, <argument pos:start="89:54" pos:end="89:57"><expr pos:start="89:54" pos:end="89:57"><name pos:start="89:54" pos:end="89:57">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:38"><expr pos:start="91:9" pos:end="91:37"><name pos:start="91:9" pos:end="91:33"><name pos:start="91:9" pos:end="91:9">c</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:18">fmt_ctx</name><operator pos:start="91:19" pos:end="91:19">.</operator><name pos:start="91:20" pos:end="91:21">pb</name><operator pos:start="91:22" pos:end="91:22">.</operator><name pos:start="91:23" pos:end="91:33">is_streamed</name></name> <operator pos:start="91:35" pos:end="91:35">=</operator> <literal type="number" pos:start="91:37" pos:end="91:37">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="93:9" pos:end="93:28">/* prepare header */</comment>

        <expr_stmt pos:start="95:9" pos:end="95:37"><expr pos:start="95:9" pos:end="95:36"><call pos:start="95:9" pos:end="95:36"><name pos:start="95:9" pos:end="95:23">av_write_header</name><argument_list pos:start="95:24" pos:end="95:36">(<argument pos:start="95:25" pos:end="95:35"><expr pos:start="95:25" pos:end="95:35"><operator pos:start="95:25" pos:end="95:25">&amp;</operator><name pos:start="95:26" pos:end="95:35"><name pos:start="95:26" pos:end="95:26">c</name><operator pos:start="95:27" pos:end="95:28">-&gt;</operator><name pos:start="95:29" pos:end="95:35">fmt_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:39"><expr pos:start="97:9" pos:end="97:38"><name pos:start="97:9" pos:end="97:16"><name pos:start="97:9" pos:end="97:9">c</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:16">state</name></name> <operator pos:start="97:18" pos:end="97:18">=</operator> <name pos:start="97:20" pos:end="97:38">HTTPSTATE_SEND_DATA</name></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:32"><expr pos:start="99:9" pos:end="99:31"><name pos:start="99:9" pos:end="99:27"><name pos:start="99:9" pos:end="99:9">c</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:27">last_packet_sent</name></name> <operator pos:start="99:29" pos:end="99:29">=</operator> <literal type="number" pos:start="99:31" pos:end="99:31">0</literal></expr>;</expr_stmt>

        <break pos:start="101:9" pos:end="101:14">break;</break>

    <case pos:start="103:5" pos:end="220:0">case <expr pos:start="103:10" pos:end="103:28"><name pos:start="103:10" pos:end="103:28">HTTPSTATE_SEND_DATA</name></expr>:</case>

        <comment type="block" pos:start="105:9" pos:end="105:31">/* find a new packet */</comment>

<cpp:if pos:start="107:1" pos:end="107:5">#<cpp:directive pos:start="107:2" pos:end="107:3">if</cpp:directive> <expr pos:start="107:5" pos:end="107:5"><literal type="number" pos:start="107:5" pos:end="107:5">0</literal></expr></cpp:if>

        fifo_total_size = http_fifo_write_count - c-&gt;last_http_fifo_write_count;

        if (fifo_total_size &gt;= ((3 * FIFO_MAX_SIZE) / 4)) {

            <comment type="block" pos:start="113:13" pos:end="115:51">/* overflow : resync. We suppose that wptr is at this

               point a pointer to a valid packet */</comment>

            c-&gt;rptr = http_fifo.wptr;

            c-&gt;got_key_frame = 0;

        }

        

        start_rptr = c-&gt;rptr;

        if (fifo_read(&amp;http_fifo, (UINT8 *)&amp;hdr, sizeof(hdr), &amp;c-&gt;rptr) &lt; 0)

            return 0;

        payload_size = ntohs(hdr.payload_size);

        payload = av_malloc(payload_size);

        if (fifo_read(&amp;http_fifo, payload, payload_size, &amp;c-&gt;rptr) &lt; 0) {

            <comment type="block" pos:start="137:13" pos:end="137:45">/* cannot read all the payload */</comment>

            av_free(payload);

            c-&gt;rptr = start_rptr;

            return 0;

        }

        

        c-&gt;last_http_fifo_write_count = http_fifo_write_count - 

            fifo_size(&amp;http_fifo, c-&gt;rptr);

        

        if (c-&gt;stream-&gt;stream_type != STREAM_TYPE_MASTER) {

            <comment type="block" pos:start="157:13" pos:end="157:66">/* test if the packet can be handled by this format */</comment>

            ret = 0;

            for(i=0;i&lt;c-&gt;fmt_ctx.nb_streams;i++) {

                AVStream *st = c-&gt;fmt_ctx.streams[i];

                if (test_header(&amp;hdr, &amp;st-&gt;codec)) {

                    <comment type="block" pos:start="167:21" pos:end="167:65">/* only begin sending when got a key frame */</comment>

                    if (st-&gt;codec.key_frame)

                        c-&gt;got_key_frame |= 1 &lt;&lt; i;

                    if (c-&gt;got_key_frame &amp; (1 &lt;&lt; i)) {

                        ret = c-&gt;fmt_ctx.format-&gt;write_packet(&amp;c-&gt;fmt_ctx, i,

                                                                   payload, payload_size);

                    }

                    break;

                }

            }

            if (ret) {

                <comment type="block" pos:start="189:17" pos:end="189:43">/* must send trailer now */</comment>

                c-&gt;state = HTTPSTATE_SEND_DATA_TRAILER;

            }

        } else {

            <comment type="block" pos:start="197:13" pos:end="197:47">/* master case : send everything */</comment>

            char *q;

            q = c-&gt;buffer;

            memcpy(q, &amp;hdr, sizeof(hdr));

            q += sizeof(hdr);

            memcpy(q, payload, payload_size);

            q += payload_size;

            c-&gt;buffer_ptr = c-&gt;buffer;

            c-&gt;buffer_end = q;

        }

        av_free(payload);

<cpp:endif pos:start="219:1" pos:end="219:6">#<cpp:directive pos:start="219:2" pos:end="219:6">endif</cpp:directive></cpp:endif>

        <block pos:start="221:9" pos:end="385:9">{<block_content pos:start="223:13" pos:end="383:13">

            <decl_stmt pos:start="223:13" pos:end="223:25"><decl pos:start="223:13" pos:end="223:24"><type pos:start="223:13" pos:end="223:20"><name pos:start="223:13" pos:end="223:20">AVPacket</name></type> <name pos:start="223:22" pos:end="223:24">pkt</name></decl>;</decl_stmt>



            <comment type="block" pos:start="227:13" pos:end="227:53">/* read a packet from the input stream */</comment>

            <if_stmt pos:start="229:13" pos:end="237:13"><if pos:start="229:13" pos:end="237:13">if <condition pos:start="229:16" pos:end="229:32">(<expr pos:start="229:17" pos:end="229:31"><name pos:start="229:17" pos:end="229:31"><name pos:start="229:17" pos:end="229:17">c</name><operator pos:start="229:18" pos:end="229:19">-&gt;</operator><name pos:start="229:20" pos:end="229:25">stream</name><operator pos:start="229:26" pos:end="229:27">-&gt;</operator><name pos:start="229:28" pos:end="229:31">feed</name></name></expr>)</condition> <block pos:start="229:34" pos:end="237:13">{<block_content pos:start="231:17" pos:end="235:64">

                <expr_stmt pos:start="231:17" pos:end="235:64"><expr pos:start="231:17" pos:end="235:63"><call pos:start="231:17" pos:end="235:63"><name pos:start="231:17" pos:end="231:35">ffm_set_write_index</name><argument_list pos:start="231:36" pos:end="235:63">(<argument pos:start="231:37" pos:end="231:45"><expr pos:start="231:37" pos:end="231:45"><name pos:start="231:37" pos:end="231:45"><name pos:start="231:37" pos:end="231:37">c</name><operator pos:start="231:38" pos:end="231:39">-&gt;</operator><name pos:start="231:40" pos:end="231:45">fmt_in</name></name></expr></argument>, 

                                    <argument pos:start="233:37" pos:end="233:69"><expr pos:start="233:37" pos:end="233:69"><name pos:start="233:37" pos:end="233:69"><name pos:start="233:37" pos:end="233:37">c</name><operator pos:start="233:38" pos:end="233:39">-&gt;</operator><name pos:start="233:40" pos:end="233:45">stream</name><operator pos:start="233:46" pos:end="233:47">-&gt;</operator><name pos:start="233:48" pos:end="233:51">feed</name><operator pos:start="233:52" pos:end="233:53">-&gt;</operator><name pos:start="233:54" pos:end="233:69">feed_write_index</name></name></expr></argument>,

                                    <argument pos:start="235:37" pos:end="235:62"><expr pos:start="235:37" pos:end="235:62"><name pos:start="235:37" pos:end="235:62"><name pos:start="235:37" pos:end="235:37">c</name><operator pos:start="235:38" pos:end="235:39">-&gt;</operator><name pos:start="235:40" pos:end="235:45">stream</name><operator pos:start="235:46" pos:end="235:47">-&gt;</operator><name pos:start="235:48" pos:end="235:51">feed</name><operator pos:start="235:52" pos:end="235:53">-&gt;</operator><name pos:start="235:54" pos:end="235:62">feed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="241:13" pos:end="383:13"><if pos:start="241:13" pos:end="249:13">if <condition pos:start="241:16" pos:end="243:67">(<expr pos:start="241:17" pos:end="243:66"><name pos:start="241:17" pos:end="241:35"><name pos:start="241:17" pos:end="241:17">c</name><operator pos:start="241:18" pos:end="241:19">-&gt;</operator><name pos:start="241:20" pos:end="241:25">stream</name><operator pos:start="241:26" pos:end="241:27">-&gt;</operator><name pos:start="241:28" pos:end="241:35">max_time</name></name> <operator pos:start="241:37" pos:end="241:38">&amp;&amp;</operator> 

                <name pos:start="243:17" pos:end="243:35"><name pos:start="243:17" pos:end="243:17">c</name><operator pos:start="243:18" pos:end="243:19">-&gt;</operator><name pos:start="243:20" pos:end="243:25">stream</name><operator pos:start="243:26" pos:end="243:27">-&gt;</operator><name pos:start="243:28" pos:end="243:35">max_time</name></name> <operator pos:start="243:37" pos:end="243:37">+</operator> <name pos:start="243:39" pos:end="243:51"><name pos:start="243:39" pos:end="243:39">c</name><operator pos:start="243:40" pos:end="243:41">-&gt;</operator><name pos:start="243:42" pos:end="243:51">start_time</name></name> <operator pos:start="243:53" pos:end="243:53">-</operator> <name pos:start="243:55" pos:end="243:62">cur_time</name> <operator pos:start="243:64" pos:end="243:64">&lt;</operator> <literal type="number" pos:start="243:66" pos:end="243:66">0</literal></expr>)</condition> <block pos:start="243:69" pos:end="249:13">{<block_content pos:start="247:17" pos:end="247:55">

                <comment type="block" pos:start="245:17" pos:end="245:39">/* We have timed out */</comment>

                <expr_stmt pos:start="247:17" pos:end="247:55"><expr pos:start="247:17" pos:end="247:54"><name pos:start="247:17" pos:end="247:24"><name pos:start="247:17" pos:end="247:17">c</name><operator pos:start="247:18" pos:end="247:19">-&gt;</operator><name pos:start="247:20" pos:end="247:24">state</name></name> <operator pos:start="247:26" pos:end="247:26">=</operator> <name pos:start="247:28" pos:end="247:54">HTTPSTATE_SEND_DATA_TRAILER</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="249:15" pos:end="269:13">else if <condition pos:start="249:23" pos:end="249:59">(<expr pos:start="249:24" pos:end="249:58"><call pos:start="249:24" pos:end="249:54"><name pos:start="249:24" pos:end="249:37">av_read_packet</name><argument_list pos:start="249:38" pos:end="249:54">(<argument pos:start="249:39" pos:end="249:47"><expr pos:start="249:39" pos:end="249:47"><name pos:start="249:39" pos:end="249:47"><name pos:start="249:39" pos:end="249:39">c</name><operator pos:start="249:40" pos:end="249:41">-&gt;</operator><name pos:start="249:42" pos:end="249:47">fmt_in</name></name></expr></argument>, <argument pos:start="249:50" pos:end="249:53"><expr pos:start="249:50" pos:end="249:53"><operator pos:start="249:50" pos:end="249:50">&amp;</operator><name pos:start="249:51" pos:end="249:53">pkt</name></expr></argument>)</argument_list></call> <operator pos:start="249:56" pos:end="249:56">&lt;</operator> <literal type="number" pos:start="249:58" pos:end="249:58">0</literal></expr>)</condition> <block pos:start="249:61" pos:end="269:13">{<block_content pos:start="251:17" pos:end="267:17">

                <if_stmt pos:start="251:17" pos:end="267:17"><if pos:start="251:17" pos:end="261:17">if <condition pos:start="251:20" pos:end="251:68">(<expr pos:start="251:21" pos:end="251:67"><name pos:start="251:21" pos:end="251:35"><name pos:start="251:21" pos:end="251:21">c</name><operator pos:start="251:22" pos:end="251:23">-&gt;</operator><name pos:start="251:24" pos:end="251:29">stream</name><operator pos:start="251:30" pos:end="251:31">-&gt;</operator><name pos:start="251:32" pos:end="251:35">feed</name></name> <operator pos:start="251:37" pos:end="251:38">&amp;&amp;</operator> <name pos:start="251:40" pos:end="251:67"><name pos:start="251:40" pos:end="251:40">c</name><operator pos:start="251:41" pos:end="251:42">-&gt;</operator><name pos:start="251:43" pos:end="251:48">stream</name><operator pos:start="251:49" pos:end="251:50">-&gt;</operator><name pos:start="251:51" pos:end="251:54">feed</name><operator pos:start="251:55" pos:end="251:56">-&gt;</operator><name pos:start="251:57" pos:end="251:67">feed_opened</name></name></expr>)</condition> <block pos:start="251:70" pos:end="261:17">{<block_content pos:start="257:21" pos:end="259:29">

                    <comment type="block" pos:start="253:21" pos:end="255:62">/* if coming from feed, it means we reached the end of the

                       ffm file, so must wait for more data */</comment>

                    <expr_stmt pos:start="257:21" pos:end="257:51"><expr pos:start="257:21" pos:end="257:50"><name pos:start="257:21" pos:end="257:28"><name pos:start="257:21" pos:end="257:21">c</name><operator pos:start="257:22" pos:end="257:23">-&gt;</operator><name pos:start="257:24" pos:end="257:28">state</name></name> <operator pos:start="257:30" pos:end="257:30">=</operator> <name pos:start="257:32" pos:end="257:50">HTTPSTATE_WAIT_FEED</name></expr>;</expr_stmt>

                    <return pos:start="259:21" pos:end="259:29">return <expr pos:start="259:28" pos:end="259:28"><literal type="number" pos:start="259:28" pos:end="259:28">1</literal></expr>;</return> <comment type="block" pos:start="259:31" pos:end="259:49">/* state changed */</comment>

                </block_content>}</block></if> <else pos:start="261:19" pos:end="267:17">else <block pos:start="261:24" pos:end="267:17">{<block_content pos:start="265:21" pos:end="265:59">

                    <comment type="block" pos:start="263:21" pos:end="263:68">/* must send trailer now because eof or error */</comment>

                    <expr_stmt pos:start="265:21" pos:end="265:59"><expr pos:start="265:21" pos:end="265:58"><name pos:start="265:21" pos:end="265:28"><name pos:start="265:21" pos:end="265:21">c</name><operator pos:start="265:22" pos:end="265:23">-&gt;</operator><name pos:start="265:24" pos:end="265:28">state</name></name> <operator pos:start="265:30" pos:end="265:30">=</operator> <name pos:start="265:32" pos:end="265:58">HTTPSTATE_SEND_DATA_TRAILER</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="269:15" pos:end="383:13">else <block pos:start="269:20" pos:end="383:13">{<block_content pos:start="273:17" pos:end="381:37">

                <comment type="block" pos:start="271:17" pos:end="271:55">/* send it to the appropriate stream */</comment>

                <if_stmt pos:start="273:17" pos:end="377:17"><if pos:start="273:17" pos:end="339:17">if <condition pos:start="273:20" pos:end="273:36">(<expr pos:start="273:21" pos:end="273:35"><name pos:start="273:21" pos:end="273:35"><name pos:start="273:21" pos:end="273:21">c</name><operator pos:start="273:22" pos:end="273:23">-&gt;</operator><name pos:start="273:24" pos:end="273:29">stream</name><operator pos:start="273:30" pos:end="273:31">-&gt;</operator><name pos:start="273:32" pos:end="273:35">feed</name></name></expr>)</condition> <block pos:start="273:38" pos:end="339:17">{<block_content pos:start="277:21" pos:end="337:21">

                    <comment type="block" pos:start="275:21" pos:end="275:72">/* if coming from a feed, select the right stream */</comment>

                    <if_stmt pos:start="277:21" pos:end="301:21"><if pos:start="277:21" pos:end="301:21">if <condition pos:start="277:24" pos:end="277:42">(<expr pos:start="277:25" pos:end="277:41"><name pos:start="277:25" pos:end="277:41"><name pos:start="277:25" pos:end="277:25">c</name><operator pos:start="277:26" pos:end="277:27">-&gt;</operator><name pos:start="277:28" pos:end="277:41">switch_pending</name></name></expr>)</condition> <block pos:start="277:44" pos:end="301:21">{<block_content pos:start="279:25" pos:end="299:25">

                        <expr_stmt pos:start="279:25" pos:end="279:46"><expr pos:start="279:25" pos:end="279:45"><name pos:start="279:25" pos:end="279:41"><name pos:start="279:25" pos:end="279:25">c</name><operator pos:start="279:26" pos:end="279:27">-&gt;</operator><name pos:start="279:28" pos:end="279:41">switch_pending</name></name> <operator pos:start="279:43" pos:end="279:43">=</operator> <literal type="number" pos:start="279:45" pos:end="279:45">0</literal></expr>;</expr_stmt>

                        <for pos:start="281:25" pos:end="299:25">for<control pos:start="281:28" pos:end="281:60">(<init pos:start="281:29" pos:end="281:32"><expr pos:start="281:29" pos:end="281:31"><name pos:start="281:29" pos:end="281:29">i</name><operator pos:start="281:30" pos:end="281:30">=</operator><literal type="number" pos:start="281:31" pos:end="281:31">0</literal></expr>;</init><condition pos:start="281:33" pos:end="281:56"><expr pos:start="281:33" pos:end="281:55"><name pos:start="281:33" pos:end="281:33">i</name><operator pos:start="281:34" pos:end="281:34">&lt;</operator><name pos:start="281:35" pos:end="281:55"><name pos:start="281:35" pos:end="281:35">c</name><operator pos:start="281:36" pos:end="281:37">-&gt;</operator><name pos:start="281:38" pos:end="281:43">stream</name><operator pos:start="281:44" pos:end="281:45">-&gt;</operator><name pos:start="281:46" pos:end="281:55">nb_streams</name></name></expr>;</condition><incr pos:start="281:57" pos:end="281:59"><expr pos:start="281:57" pos:end="281:59"><name pos:start="281:57" pos:end="281:57">i</name><operator pos:start="281:58" pos:end="281:59">++</operator></expr></incr>)</control> <block pos:start="281:62" pos:end="299:25">{<block_content pos:start="283:29" pos:end="297:29">

                            <if_stmt pos:start="283:29" pos:end="291:29"><if pos:start="283:29" pos:end="291:29">if <condition pos:start="283:32" pos:end="283:78">(<expr pos:start="283:33" pos:end="283:77"><name pos:start="283:33" pos:end="283:57"><name pos:start="283:33" pos:end="283:33">c</name><operator pos:start="283:34" pos:end="283:35">-&gt;</operator><name pos:start="283:36" pos:end="283:54">switch_feed_streams</name><index pos:start="283:55" pos:end="283:57">[<expr pos:start="283:56" pos:end="283:56"><name pos:start="283:56" pos:end="283:56">i</name></expr>]</index></name> <operator pos:start="283:59" pos:end="283:60">==</operator> <name pos:start="283:62" pos:end="283:77"><name pos:start="283:62" pos:end="283:64">pkt</name><operator pos:start="283:65" pos:end="283:65">.</operator><name pos:start="283:66" pos:end="283:77">stream_index</name></name></expr>)</condition> <block pos:start="283:80" pos:end="291:29">{<block_content pos:start="285:33" pos:end="289:33">

                                <if_stmt pos:start="285:33" pos:end="289:33"><if pos:start="285:33" pos:end="289:33">if <condition pos:start="285:36" pos:end="285:61">(<expr pos:start="285:37" pos:end="285:60"><name pos:start="285:37" pos:end="285:45"><name pos:start="285:37" pos:end="285:39">pkt</name><operator pos:start="285:40" pos:end="285:40">.</operator><name pos:start="285:41" pos:end="285:45">flags</name></name> <operator pos:start="285:47" pos:end="285:47">&amp;</operator> <name pos:start="285:49" pos:end="285:60">PKT_FLAG_KEY</name></expr>)</condition> <block pos:start="285:63" pos:end="289:33">{<block_content pos:start="287:37" pos:end="287:59">

                                    <expr_stmt pos:start="287:37" pos:end="287:59"><expr pos:start="287:37" pos:end="287:58"><call pos:start="287:37" pos:end="287:58"><name pos:start="287:37" pos:end="287:52">do_switch_stream</name><argument_list pos:start="287:53" pos:end="287:58">(<argument pos:start="287:54" pos:end="287:54"><expr pos:start="287:54" pos:end="287:54"><name pos:start="287:54" pos:end="287:54">c</name></expr></argument>, <argument pos:start="287:57" pos:end="287:57"><expr pos:start="287:57" pos:end="287:57"><name pos:start="287:57" pos:end="287:57">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block></if></if_stmt>

                            </block_content>}</block></if></if_stmt>

                            <if_stmt pos:start="293:29" pos:end="297:29"><if pos:start="293:29" pos:end="297:29">if <condition pos:start="293:32" pos:end="293:63">(<expr pos:start="293:33" pos:end="293:62"><name pos:start="293:33" pos:end="293:57"><name pos:start="293:33" pos:end="293:33">c</name><operator pos:start="293:34" pos:end="293:35">-&gt;</operator><name pos:start="293:36" pos:end="293:54">switch_feed_streams</name><index pos:start="293:55" pos:end="293:57">[<expr pos:start="293:56" pos:end="293:56"><name pos:start="293:56" pos:end="293:56">i</name></expr>]</index></name> <operator pos:start="293:59" pos:end="293:60">&gt;=</operator> <literal type="number" pos:start="293:62" pos:end="293:62">0</literal></expr>)</condition> <block pos:start="293:65" pos:end="297:29">{<block_content pos:start="295:33" pos:end="295:54">

                                <expr_stmt pos:start="295:33" pos:end="295:54"><expr pos:start="295:33" pos:end="295:53"><name pos:start="295:33" pos:end="295:49"><name pos:start="295:33" pos:end="295:33">c</name><operator pos:start="295:34" pos:end="295:35">-&gt;</operator><name pos:start="295:36" pos:end="295:49">switch_pending</name></name> <operator pos:start="295:51" pos:end="295:51">=</operator> <literal type="number" pos:start="295:53" pos:end="295:53">1</literal></expr>;</expr_stmt>

                            </block_content>}</block></if></if_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></if></if_stmt>

                    <for pos:start="303:21" pos:end="337:21">for<control pos:start="303:24" pos:end="303:56">(<init pos:start="303:25" pos:end="303:28"><expr pos:start="303:25" pos:end="303:27"><name pos:start="303:25" pos:end="303:25">i</name><operator pos:start="303:26" pos:end="303:26">=</operator><literal type="number" pos:start="303:27" pos:end="303:27">0</literal></expr>;</init><condition pos:start="303:29" pos:end="303:52"><expr pos:start="303:29" pos:end="303:51"><name pos:start="303:29" pos:end="303:29">i</name><operator pos:start="303:30" pos:end="303:30">&lt;</operator><name pos:start="303:31" pos:end="303:51"><name pos:start="303:31" pos:end="303:31">c</name><operator pos:start="303:32" pos:end="303:33">-&gt;</operator><name pos:start="303:34" pos:end="303:39">stream</name><operator pos:start="303:40" pos:end="303:41">-&gt;</operator><name pos:start="303:42" pos:end="303:51">nb_streams</name></name></expr>;</condition><incr pos:start="303:53" pos:end="303:55"><expr pos:start="303:53" pos:end="303:55"><name pos:start="303:53" pos:end="303:53">i</name><operator pos:start="303:54" pos:end="303:55">++</operator></expr></incr>)</control> <block pos:start="303:58" pos:end="337:21">{<block_content pos:start="305:25" pos:end="335:25">

                        <if_stmt pos:start="305:25" pos:end="335:25"><if pos:start="305:25" pos:end="335:25">if <condition pos:start="305:28" pos:end="305:67">(<expr pos:start="305:29" pos:end="305:66"><name pos:start="305:29" pos:end="305:46"><name pos:start="305:29" pos:end="305:29">c</name><operator pos:start="305:30" pos:end="305:31">-&gt;</operator><name pos:start="305:32" pos:end="305:43">feed_streams</name><index pos:start="305:44" pos:end="305:46">[<expr pos:start="305:45" pos:end="305:45"><name pos:start="305:45" pos:end="305:45">i</name></expr>]</index></name> <operator pos:start="305:48" pos:end="305:49">==</operator> <name pos:start="305:51" pos:end="305:66"><name pos:start="305:51" pos:end="305:53">pkt</name><operator pos:start="305:54" pos:end="305:54">.</operator><name pos:start="305:55" pos:end="305:66">stream_index</name></name></expr>)</condition> <block pos:start="305:69" pos:end="335:25">{<block_content pos:start="307:29" pos:end="333:29">

                            <expr_stmt pos:start="307:29" pos:end="307:49"><expr pos:start="307:29" pos:end="307:48"><name pos:start="307:29" pos:end="307:44"><name pos:start="307:29" pos:end="307:31">pkt</name><operator pos:start="307:32" pos:end="307:32">.</operator><name pos:start="307:33" pos:end="307:44">stream_index</name></name> <operator pos:start="307:46" pos:end="307:46">=</operator> <name pos:start="307:48" pos:end="307:48">i</name></expr>;</expr_stmt>

                            <if_stmt pos:start="309:29" pos:end="313:29"><if pos:start="309:29" pos:end="313:29">if <condition pos:start="309:32" pos:end="309:57">(<expr pos:start="309:33" pos:end="309:56"><name pos:start="309:33" pos:end="309:41"><name pos:start="309:33" pos:end="309:35">pkt</name><operator pos:start="309:36" pos:end="309:36">.</operator><name pos:start="309:37" pos:end="309:41">flags</name></name> <operator pos:start="309:43" pos:end="309:43">&amp;</operator> <name pos:start="309:45" pos:end="309:56">PKT_FLAG_KEY</name></expr>)</condition> <block pos:start="309:59" pos:end="313:29">{<block_content pos:start="311:33" pos:end="311:59">

                                <expr_stmt pos:start="311:33" pos:end="311:59"><expr pos:start="311:33" pos:end="311:58"><name pos:start="311:33" pos:end="311:48"><name pos:start="311:33" pos:end="311:33">c</name><operator pos:start="311:34" pos:end="311:35">-&gt;</operator><name pos:start="311:36" pos:end="311:48">got_key_frame</name></name> <operator pos:start="311:50" pos:end="311:51">|=</operator> <literal type="number" pos:start="311:53" pos:end="311:53">1</literal> <operator pos:start="311:55" pos:end="311:56">&lt;&lt;</operator> <name pos:start="311:58" pos:end="311:58">i</name></expr>;</expr_stmt>

                            </block_content>}</block></if></if_stmt>

                            <comment type="block" pos:start="315:29" pos:end="327:31">/* See if we have all the key frames, then 

                             * we start to send. This logic is not quite

                             * right, but it works for the case of a 

                             * single video stream with one or more

                             * audio streams (for which every frame is 

                             * typically a key frame). 

                             */</comment>

                            <if_stmt pos:start="329:29" pos:end="333:29"><if pos:start="329:29" pos:end="333:29">if <condition pos:start="329:32" pos:end="329:109">(<expr pos:start="329:33" pos:end="329:108"><operator pos:start="329:33" pos:end="329:33">!</operator><name pos:start="329:34" pos:end="329:55"><name pos:start="329:34" pos:end="329:34">c</name><operator pos:start="329:35" pos:end="329:36">-&gt;</operator><name pos:start="329:37" pos:end="329:42">stream</name><operator pos:start="329:43" pos:end="329:44">-&gt;</operator><name pos:start="329:45" pos:end="329:55">send_on_key</name></name> <operator pos:start="329:57" pos:end="329:58">||</operator> <operator pos:start="329:60" pos:end="329:60">(</operator><operator pos:start="329:61" pos:end="329:61">(</operator><name pos:start="329:62" pos:end="329:77"><name pos:start="329:62" pos:end="329:62">c</name><operator pos:start="329:63" pos:end="329:64">-&gt;</operator><name pos:start="329:65" pos:end="329:77">got_key_frame</name></name> <operator pos:start="329:79" pos:end="329:79">+</operator> <literal type="number" pos:start="329:81" pos:end="329:81">1</literal><operator pos:start="329:82" pos:end="329:82">)</operator> <operator pos:start="329:84" pos:end="329:85">&gt;&gt;</operator> <name pos:start="329:87" pos:end="329:107"><name pos:start="329:87" pos:end="329:87">c</name><operator pos:start="329:88" pos:end="329:89">-&gt;</operator><name pos:start="329:90" pos:end="329:95">stream</name><operator pos:start="329:96" pos:end="329:97">-&gt;</operator><name pos:start="329:98" pos:end="329:107">nb_streams</name></name><operator pos:start="329:108" pos:end="329:108">)</operator></expr>)</condition> <block pos:start="329:111" pos:end="333:29">{<block_content pos:start="331:33" pos:end="331:45">

                                <goto pos:start="331:33" pos:end="331:45">goto <name pos:start="331:38" pos:end="331:44">send_it</name>;</goto>

                            </block_content>}</block></if></if_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if> <else pos:start="339:19" pos:end="377:17">else <block pos:start="339:24" pos:end="377:17">{<block_content pos:start="341:21" pos:end="375:42">

                    <decl_stmt pos:start="341:21" pos:end="341:42"><decl pos:start="341:21" pos:end="341:41"><type pos:start="341:21" pos:end="341:36"><name pos:start="341:21" pos:end="341:34">AVCodecContext</name> <modifier pos:start="341:36" pos:end="341:36">*</modifier></type><name pos:start="341:37" pos:end="341:41">codec</name></decl>;</decl_stmt>

                <label pos:start="343:17" pos:end="343:24"><name pos:start="343:17" pos:end="343:23">send_it</name>:</label>

                    <comment type="block" pos:start="345:21" pos:end="345:36">/* Fudge here */</comment>

                    <expr_stmt pos:start="347:21" pos:end="347:73"><expr pos:start="347:21" pos:end="347:72"><name pos:start="347:21" pos:end="347:25">codec</name> <operator pos:start="347:27" pos:end="347:27">=</operator> <operator pos:start="347:29" pos:end="347:29">&amp;</operator><name pos:start="347:30" pos:end="347:65"><name pos:start="347:30" pos:end="347:30">c</name><operator pos:start="347:31" pos:end="347:32">-&gt;</operator><name pos:start="347:33" pos:end="347:39">fmt_ctx</name><operator pos:start="347:40" pos:end="347:40">.</operator><name pos:start="347:41" pos:end="347:47">streams</name><index pos:start="347:48" pos:end="347:65">[<expr pos:start="347:49" pos:end="347:64"><name pos:start="347:49" pos:end="347:64"><name pos:start="347:49" pos:end="347:51">pkt</name><operator pos:start="347:52" pos:end="347:52">.</operator><name pos:start="347:53" pos:end="347:64">stream_index</name></name></expr>]</index></name><operator pos:start="347:66" pos:end="347:67">-&gt;</operator><name pos:start="347:68" pos:end="347:72">codec</name></expr>;</expr_stmt>



                    <expr_stmt pos:start="351:21" pos:end="356:0"><expr pos:start="351:21" pos:end="351:72"><name pos:start="351:21" pos:end="351:36"><name pos:start="351:21" pos:end="351:25">codec</name><operator pos:start="351:26" pos:end="351:27">-&gt;</operator><name pos:start="351:28" pos:end="351:36">key_frame</name></name> <operator pos:start="351:38" pos:end="351:38">=</operator> <operator pos:start="351:40" pos:end="351:40">(</operator><operator pos:start="351:41" pos:end="351:41">(</operator><name pos:start="351:42" pos:end="351:50"><name pos:start="351:42" pos:end="351:44">pkt</name><operator pos:start="351:45" pos:end="351:45">.</operator><name pos:start="351:46" pos:end="351:50">flags</name></name> <operator pos:start="351:52" pos:end="351:52">&amp;</operator> <name pos:start="351:54" pos:end="351:65">PKT_FLAG_KEY</name><operator pos:start="351:66" pos:end="351:66">)</operator> <operator pos:start="351:68" pos:end="351:69">!=</operator> <literal type="number" pos:start="351:71" pos:end="351:71">0</literal><operator pos:start="351:72" pos:end="351:72">)</operator></expr>;</expr_stmt>



<cpp:ifdef pos:start="355:1" pos:end="355:11">#<cpp:directive pos:start="355:2" pos:end="355:6">ifdef</cpp:directive> <name pos:start="355:8" pos:end="355:11">PJSG</name></cpp:ifdef>

                    <if_stmt pos:start="357:21" pos:end="366:0"><if pos:start="357:21" pos:end="366:0">if <condition pos:start="357:24" pos:end="357:62">(<expr pos:start="357:25" pos:end="357:61"><name pos:start="357:25" pos:end="357:41"><name pos:start="357:25" pos:end="357:29">codec</name><operator pos:start="357:30" pos:end="357:31">-&gt;</operator><name pos:start="357:32" pos:end="357:41">codec_type</name></name> <operator pos:start="357:43" pos:end="357:44">==</operator> <name pos:start="357:46" pos:end="357:61">CODEC_TYPE_AUDIO</name></expr>)</condition> <block pos:start="357:64" pos:end="366:0">{<block_content pos:start="359:25" pos:end="359:99">

                        <expr_stmt pos:start="359:25" pos:end="359:99"><expr pos:start="359:25" pos:end="359:98"><name pos:start="359:25" pos:end="359:41"><name pos:start="359:25" pos:end="359:29">codec</name><operator pos:start="359:30" pos:end="359:31">-&gt;</operator><name pos:start="359:32" pos:end="359:41">frame_size</name></name> <operator pos:start="359:43" pos:end="359:43">=</operator> <operator pos:start="359:45" pos:end="359:45">(</operator><name pos:start="359:46" pos:end="359:63"><name pos:start="359:46" pos:end="359:50">codec</name><operator pos:start="359:51" pos:end="359:52">-&gt;</operator><name pos:start="359:53" pos:end="359:63">sample_rate</name></name> <operator pos:start="359:65" pos:end="359:65">*</operator> <name pos:start="359:67" pos:end="359:78"><name pos:start="359:67" pos:end="359:69">pkt</name><operator pos:start="359:70" pos:end="359:70">.</operator><name pos:start="359:71" pos:end="359:78">duration</name></name> <operator pos:start="359:80" pos:end="359:80">+</operator> <literal type="number" pos:start="359:82" pos:end="359:87">500000</literal><operator pos:start="359:88" pos:end="359:88">)</operator> <operator pos:start="359:90" pos:end="359:90">/</operator> <literal type="number" pos:start="359:92" pos:end="359:98">1000000</literal></expr>;</expr_stmt>

                        <comment type="block" pos:start="361:25" pos:end="361:139">/* printf("Calculated size %d, from sr %d, duration %d\n", codec-&gt;frame_size, codec-&gt;sample_rate, pkt.duration); */</comment>

                    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="365:1" pos:end="365:6">#<cpp:directive pos:start="365:2" pos:end="365:6">endif</cpp:directive></cpp:endif>



                    <if_stmt pos:start="369:21" pos:end="371:63"><if pos:start="369:21" pos:end="371:63">if <condition pos:start="369:24" pos:end="369:62">(<expr pos:start="369:25" pos:end="369:61"><call pos:start="369:25" pos:end="369:61"><name pos:start="369:25" pos:end="369:39">av_write_packet</name><argument_list pos:start="369:40" pos:end="369:61">(<argument pos:start="369:41" pos:end="369:51"><expr pos:start="369:41" pos:end="369:51"><operator pos:start="369:41" pos:end="369:41">&amp;</operator><name pos:start="369:42" pos:end="369:51"><name pos:start="369:42" pos:end="369:42">c</name><operator pos:start="369:43" pos:end="369:44">-&gt;</operator><name pos:start="369:45" pos:end="369:51">fmt_ctx</name></name></expr></argument>, <argument pos:start="369:54" pos:end="369:57"><expr pos:start="369:54" pos:end="369:57"><operator pos:start="369:54" pos:end="369:54">&amp;</operator><name pos:start="369:55" pos:end="369:57">pkt</name></expr></argument>, <argument pos:start="369:60" pos:end="369:60"><expr pos:start="369:60" pos:end="369:60"><literal type="number" pos:start="369:60" pos:end="369:60">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="371:25" pos:end="371:63"><block_content pos:start="371:25" pos:end="371:63">

                        <expr_stmt pos:start="371:25" pos:end="371:63"><expr pos:start="371:25" pos:end="371:62"><name pos:start="371:25" pos:end="371:32"><name pos:start="371:25" pos:end="371:25">c</name><operator pos:start="371:26" pos:end="371:27">-&gt;</operator><name pos:start="371:28" pos:end="371:32">state</name></name> <operator pos:start="371:34" pos:end="371:34">=</operator> <name pos:start="371:36" pos:end="371:62">HTTPSTATE_SEND_DATA_TRAILER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="375:21" pos:end="375:42"><expr pos:start="375:21" pos:end="375:41"><name pos:start="375:21" pos:end="375:39"><name pos:start="375:21" pos:end="375:25">codec</name><operator pos:start="375:26" pos:end="375:27">-&gt;</operator><name pos:start="375:28" pos:end="375:39">frame_number</name></name><operator pos:start="375:40" pos:end="375:41">++</operator></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <expr_stmt pos:start="381:17" pos:end="381:37"><expr pos:start="381:17" pos:end="381:36"><call pos:start="381:17" pos:end="381:36"><name pos:start="381:17" pos:end="381:30">av_free_packet</name><argument_list pos:start="381:31" pos:end="381:36">(<argument pos:start="381:32" pos:end="381:35"><expr pos:start="381:32" pos:end="381:35"><operator pos:start="381:32" pos:end="381:32">&amp;</operator><name pos:start="381:33" pos:end="381:35">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="387:9" pos:end="387:14">break;</break>

    <default pos:start="389:5" pos:end="389:12">default:</default>

    <case pos:start="391:5" pos:end="391:37">case <expr pos:start="391:10" pos:end="391:36"><name pos:start="391:10" pos:end="391:36">HTTPSTATE_SEND_DATA_TRAILER</name></expr>:</case>

        <comment type="block" pos:start="393:9" pos:end="393:32">/* last packet test ? */</comment>

        <if_stmt pos:start="395:9" pos:end="397:22"><if pos:start="395:9" pos:end="397:22">if <condition pos:start="395:12" pos:end="395:32">(<expr pos:start="395:13" pos:end="395:31"><name pos:start="395:13" pos:end="395:31"><name pos:start="395:13" pos:end="395:13">c</name><operator pos:start="395:14" pos:end="395:15">-&gt;</operator><name pos:start="395:16" pos:end="395:31">last_packet_sent</name></name></expr>)</condition><block type="pseudo" pos:start="397:13" pos:end="397:22"><block_content pos:start="397:13" pos:end="397:22">

            <return pos:start="397:13" pos:end="397:22">return <expr pos:start="397:20" pos:end="397:21"><operator pos:start="397:20" pos:end="397:20">-</operator><literal type="number" pos:start="397:21" pos:end="397:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="399:9" pos:end="399:28">/* prepare header */</comment>

        <expr_stmt pos:start="401:9" pos:end="401:38"><expr pos:start="401:9" pos:end="401:37"><call pos:start="401:9" pos:end="401:37"><name pos:start="401:9" pos:end="401:24">av_write_trailer</name><argument_list pos:start="401:25" pos:end="401:37">(<argument pos:start="401:26" pos:end="401:36"><expr pos:start="401:26" pos:end="401:36"><operator pos:start="401:26" pos:end="401:26">&amp;</operator><name pos:start="401:27" pos:end="401:36"><name pos:start="401:27" pos:end="401:27">c</name><operator pos:start="401:28" pos:end="401:29">-&gt;</operator><name pos:start="401:30" pos:end="401:36">fmt_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="403:9" pos:end="403:32"><expr pos:start="403:9" pos:end="403:31"><name pos:start="403:9" pos:end="403:27"><name pos:start="403:9" pos:end="403:9">c</name><operator pos:start="403:10" pos:end="403:11">-&gt;</operator><name pos:start="403:12" pos:end="403:27">last_packet_sent</name></name> <operator pos:start="403:29" pos:end="403:29">=</operator> <literal type="number" pos:start="403:31" pos:end="403:31">1</literal></expr>;</expr_stmt>

        <break pos:start="405:9" pos:end="405:14">break;</break>

    </block_content>}</block></switch>

    <return pos:start="409:5" pos:end="409:13">return <expr pos:start="409:12" pos:end="409:12"><literal type="number" pos:start="409:12" pos:end="409:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
