<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15465.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">ehci_state_fetchentry</name><parameter_list pos:start="1:33" pos:end="1:60">(<parameter pos:start="1:34" pos:end="1:48"><decl pos:start="1:34" pos:end="1:48"><type pos:start="1:34" pos:end="1:48"><name pos:start="1:34" pos:end="1:42">EHCIState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:48">ehci</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:59"><decl pos:start="1:51" pos:end="1:59"><type pos:start="1:51" pos:end="1:59"><name pos:start="1:51" pos:end="1:53">int</name></type> <name pos:start="1:55" pos:end="1:59">async</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:17">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">again</name> <init pos:start="5:15" pos:end="5:17">= <expr pos:start="5:17" pos:end="5:17"><literal type="number" pos:start="5:17" pos:end="5:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:54"><decl pos:start="7:5" pos:end="7:53"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:18">entry</name> <init pos:start="7:20" pos:end="7:53">= <expr pos:start="7:22" pos:end="7:53"><call pos:start="7:22" pos:end="7:53"><name pos:start="7:22" pos:end="7:40">ehci_get_fetch_addr</name><argument_list pos:start="7:41" pos:end="7:53">(<argument pos:start="7:42" pos:end="7:45"><expr pos:start="7:42" pos:end="7:45"><name pos:start="7:42" pos:end="7:45">ehci</name></expr></argument>, <argument pos:start="7:48" pos:end="7:52"><expr pos:start="7:48" pos:end="7:52"><name pos:start="7:48" pos:end="7:52">async</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="19:5"><if pos:start="11:5" pos:end="19:5">if <condition pos:start="11:8" pos:end="11:23">(<expr pos:start="11:9" pos:end="11:22"><name pos:start="11:9" pos:end="11:13">entry</name> <operator pos:start="11:15" pos:end="11:15">&lt;</operator> <literal type="number" pos:start="11:17" pos:end="11:22">0x1000</literal></expr>)</condition> <block pos:start="11:25" pos:end="19:5">{<block_content pos:start="13:9" pos:end="17:17">

        <expr_stmt pos:start="13:9" pos:end="13:63"><expr pos:start="13:9" pos:end="13:62"><call pos:start="13:9" pos:end="13:62"><name pos:start="13:9" pos:end="13:15">DPRINTF</name><argument_list pos:start="13:16" pos:end="13:62">(<argument pos:start="13:17" pos:end="13:54"><expr pos:start="13:17" pos:end="13:54"><literal type="string" pos:start="13:17" pos:end="13:54">"fetchentry: entry invalid (0x%08x)\n"</literal></expr></argument>, <argument pos:start="13:57" pos:end="13:61"><expr pos:start="13:57" pos:end="13:61"><name pos:start="13:57" pos:end="13:61">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:48"><expr pos:start="15:9" pos:end="15:47"><call pos:start="15:9" pos:end="15:47"><name pos:start="15:9" pos:end="15:22">ehci_set_state</name><argument_list pos:start="15:23" pos:end="15:47">(<argument pos:start="15:24" pos:end="15:27"><expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">ehci</name></expr></argument>, <argument pos:start="15:30" pos:end="15:34"><expr pos:start="15:30" pos:end="15:34"><name pos:start="15:30" pos:end="15:34">async</name></expr></argument>, <argument pos:start="15:37" pos:end="15:46"><expr pos:start="15:37" pos:end="15:46"><name pos:start="15:37" pos:end="15:46">EST_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="17:9" pos:end="17:17">goto <name pos:start="17:14" pos:end="17:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:48">/* section 4.8, only QH in async schedule */</comment>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:58">(<expr pos:start="25:9" pos:end="25:57"><name pos:start="25:9" pos:end="25:13">async</name> <operator pos:start="25:15" pos:end="25:16">&amp;&amp;</operator> <operator pos:start="25:18" pos:end="25:18">(</operator><call pos:start="25:19" pos:end="25:39"><name pos:start="25:19" pos:end="25:32">NLPTR_TYPE_GET</name><argument_list pos:start="25:33" pos:end="25:39">(<argument pos:start="25:34" pos:end="25:38"><expr pos:start="25:34" pos:end="25:38"><name pos:start="25:34" pos:end="25:38">entry</name></expr></argument>)</argument_list></call> <operator pos:start="25:41" pos:end="25:42">!=</operator> <name pos:start="25:44" pos:end="25:56">NLPTR_TYPE_QH</name><operator pos:start="25:57" pos:end="25:57">)</operator></expr>)</condition> <block pos:start="25:60" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:18">

        <expr_stmt pos:start="27:9" pos:end="27:70"><expr pos:start="27:9" pos:end="27:69"><call pos:start="27:9" pos:end="27:69"><name pos:start="27:9" pos:end="27:15">fprintf</name><argument_list pos:start="27:16" pos:end="27:69">(<argument pos:start="27:17" pos:end="27:22"><expr pos:start="27:17" pos:end="27:22"><name pos:start="27:17" pos:end="27:22">stderr</name></expr></argument>, <argument pos:start="27:25" pos:end="27:68"><expr pos:start="27:25" pos:end="27:68"><literal type="string" pos:start="27:25" pos:end="27:68">"non queue head request in async schedule\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="35:5" pos:end="77:5">switch <condition pos:start="35:12" pos:end="35:34">(<expr pos:start="35:13" pos:end="35:33"><call pos:start="35:13" pos:end="35:33"><name pos:start="35:13" pos:end="35:26">NLPTR_TYPE_GET</name><argument_list pos:start="35:27" pos:end="35:33">(<argument pos:start="35:28" pos:end="35:32"><expr pos:start="35:28" pos:end="35:32"><name pos:start="35:28" pos:end="35:32">entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:36" pos:end="77:5">{<block_content pos:start="37:5" pos:end="75:18">

    <case pos:start="37:5" pos:end="37:23">case <expr pos:start="37:10" pos:end="37:22"><name pos:start="37:10" pos:end="37:22">NLPTR_TYPE_QH</name></expr>:</case>

        <expr_stmt pos:start="39:9" pos:end="39:49"><expr pos:start="39:9" pos:end="39:48"><call pos:start="39:9" pos:end="39:48"><name pos:start="39:9" pos:end="39:22">ehci_set_state</name><argument_list pos:start="39:23" pos:end="39:48">(<argument pos:start="39:24" pos:end="39:27"><expr pos:start="39:24" pos:end="39:27"><name pos:start="39:24" pos:end="39:27">ehci</name></expr></argument>, <argument pos:start="39:30" pos:end="39:34"><expr pos:start="39:30" pos:end="39:34"><name pos:start="39:30" pos:end="39:34">async</name></expr></argument>, <argument pos:start="39:37" pos:end="39:47"><expr pos:start="39:37" pos:end="39:47"><name pos:start="39:37" pos:end="39:47">EST_FETCHQH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:18"><expr pos:start="41:9" pos:end="41:17"><name pos:start="41:9" pos:end="41:13">again</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <literal type="number" pos:start="41:17" pos:end="41:17">1</literal></expr>;</expr_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>



    <case pos:start="47:5" pos:end="47:24">case <expr pos:start="47:10" pos:end="47:23"><name pos:start="47:10" pos:end="47:23">NLPTR_TYPE_ITD</name></expr>:</case>

        <expr_stmt pos:start="49:9" pos:end="49:50"><expr pos:start="49:9" pos:end="49:49"><call pos:start="49:9" pos:end="49:49"><name pos:start="49:9" pos:end="49:22">ehci_set_state</name><argument_list pos:start="49:23" pos:end="49:49">(<argument pos:start="49:24" pos:end="49:27"><expr pos:start="49:24" pos:end="49:27"><name pos:start="49:24" pos:end="49:27">ehci</name></expr></argument>, <argument pos:start="49:30" pos:end="49:34"><expr pos:start="49:30" pos:end="49:34"><name pos:start="49:30" pos:end="49:34">async</name></expr></argument>, <argument pos:start="49:37" pos:end="49:48"><expr pos:start="49:37" pos:end="49:48"><name pos:start="49:37" pos:end="49:48">EST_FETCHITD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:18"><expr pos:start="51:9" pos:end="51:17"><name pos:start="51:9" pos:end="51:13">again</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <literal type="number" pos:start="51:17" pos:end="51:17">1</literal></expr>;</expr_stmt>

        <break pos:start="53:9" pos:end="53:14">break;</break>



    <case pos:start="57:5" pos:end="57:26">case <expr pos:start="57:10" pos:end="57:25"><name pos:start="57:10" pos:end="57:25">NLPTR_TYPE_STITD</name></expr>:</case>

        <expr_stmt pos:start="59:9" pos:end="59:51"><expr pos:start="59:9" pos:end="59:50"><call pos:start="59:9" pos:end="59:50"><name pos:start="59:9" pos:end="59:22">ehci_set_state</name><argument_list pos:start="59:23" pos:end="59:50">(<argument pos:start="59:24" pos:end="59:27"><expr pos:start="59:24" pos:end="59:27"><name pos:start="59:24" pos:end="59:27">ehci</name></expr></argument>, <argument pos:start="59:30" pos:end="59:34"><expr pos:start="59:30" pos:end="59:34"><name pos:start="59:30" pos:end="59:34">async</name></expr></argument>, <argument pos:start="59:37" pos:end="59:49"><expr pos:start="59:37" pos:end="59:49"><name pos:start="59:37" pos:end="59:49">EST_FETCHSITD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:18"><expr pos:start="61:9" pos:end="61:17"><name pos:start="61:9" pos:end="61:13">again</name> <operator pos:start="61:15" pos:end="61:15">=</operator> <literal type="number" pos:start="61:17" pos:end="61:17">1</literal></expr>;</expr_stmt>

        <break pos:start="63:9" pos:end="63:14">break;</break>



    <default pos:start="67:5" pos:end="67:12">default:</default>

        <comment type="block" pos:start="69:9" pos:end="69:36">/* TODO: handle FSTN type */</comment>

        <expr_stmt pos:start="71:9" pos:end="73:78"><expr pos:start="71:9" pos:end="73:77"><call pos:start="71:9" pos:end="73:77"><name pos:start="71:9" pos:end="71:15">fprintf</name><argument_list pos:start="71:16" pos:end="73:77">(<argument pos:start="71:17" pos:end="71:22"><expr pos:start="71:17" pos:end="71:22"><name pos:start="71:17" pos:end="71:22">stderr</name></expr></argument>, <argument pos:start="71:25" pos:end="73:46"><expr pos:start="71:25" pos:end="73:46"><literal type="string" pos:start="71:25" pos:end="71:64">"FETCHENTRY: entry at %X is of type %d "</literal>

                <literal type="string" pos:start="73:17" pos:end="73:46">"which is not supported yet\n"</literal></expr></argument>, <argument pos:start="73:49" pos:end="73:53"><expr pos:start="73:49" pos:end="73:53"><name pos:start="73:49" pos:end="73:53">entry</name></expr></argument>, <argument pos:start="73:56" pos:end="73:76"><expr pos:start="73:56" pos:end="73:76"><call pos:start="73:56" pos:end="73:76"><name pos:start="73:56" pos:end="73:69">NLPTR_TYPE_GET</name><argument_list pos:start="73:70" pos:end="73:76">(<argument pos:start="73:71" pos:end="73:75"><expr pos:start="73:71" pos:end="73:75"><name pos:start="73:71" pos:end="73:75">entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:18">return <expr pos:start="75:16" pos:end="75:17"><operator pos:start="75:16" pos:end="75:16">-</operator><literal type="number" pos:start="75:17" pos:end="75:17">1</literal></expr>;</return>

    </block_content>}</block></switch>



<label pos:start="81:1" pos:end="81:4"><name pos:start="81:1" pos:end="81:3">out</name>:</label>

    <return pos:start="83:5" pos:end="83:17">return <expr pos:start="83:12" pos:end="83:16"><name pos:start="83:12" pos:end="83:16">again</name></expr>;</return>

</block_content>}</block></function>
</unit>
