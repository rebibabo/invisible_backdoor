<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26340.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:44">sch_handle_start_func_passthrough</name><parameter_list pos:start="1:45" pos:end="1:59">(<parameter pos:start="1:46" pos:end="1:58"><decl pos:start="1:46" pos:end="1:58"><type pos:start="1:46" pos:end="1:55"><name pos:start="1:46" pos:end="1:53">SubchDev</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:58">sch</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="7:5" pos:end="87:15">



    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">PMCW</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:11">p</name> <init pos:start="7:13" pos:end="7:36">= <expr pos:start="7:15" pos:end="7:36"><operator pos:start="7:15" pos:end="7:15">&amp;</operator><name pos:start="7:16" pos:end="7:36"><name pos:start="7:16" pos:end="7:18">sch</name><operator pos:start="7:19" pos:end="7:20">-&gt;</operator><name pos:start="7:21" pos:end="7:31">curr_status</name><operator pos:start="7:32" pos:end="7:32">.</operator><name pos:start="7:33" pos:end="7:36">pmcw</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">SCSW</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:11">s</name> <init pos:start="9:13" pos:end="9:36">= <expr pos:start="9:15" pos:end="9:36"><operator pos:start="9:15" pos:end="9:15">&amp;</operator><name pos:start="9:16" pos:end="9:36"><name pos:start="9:16" pos:end="9:18">sch</name><operator pos:start="9:19" pos:end="9:20">-&gt;</operator><name pos:start="9:21" pos:end="9:31">curr_status</name><operator pos:start="9:32" pos:end="9:32">.</operator><name pos:start="9:33" pos:end="9:36">scsw</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:7">ORB</name> <modifier pos:start="15:9" pos:end="15:9">*</modifier></type><name pos:start="15:10" pos:end="15:12">orb</name> <init pos:start="15:14" pos:end="15:24">= <expr pos:start="15:16" pos:end="15:24"><operator pos:start="15:16" pos:end="15:16">&amp;</operator><name pos:start="15:17" pos:end="15:24"><name pos:start="15:17" pos:end="15:19">sch</name><operator pos:start="15:20" pos:end="15:21">-&gt;</operator><name pos:start="15:22" pos:end="15:24">orb</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:36">(<expr pos:start="17:9" pos:end="17:35"><operator pos:start="17:9" pos:end="17:9">!</operator><operator pos:start="17:10" pos:end="17:10">(</operator><name pos:start="17:11" pos:end="17:17"><name pos:start="17:11" pos:end="17:11">s</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:17">ctrl</name></name> <operator pos:start="17:19" pos:end="17:19">&amp;</operator> <name pos:start="17:21" pos:end="17:34">SCSW_ACTL_SUSP</name><operator pos:start="17:35" pos:end="17:35">)</operator></expr>)</condition> <block pos:start="17:38" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:34">

        <expr_stmt pos:start="19:9" pos:end="19:28"><expr pos:start="19:9" pos:end="19:27"><call pos:start="19:9" pos:end="19:27"><name pos:start="19:9" pos:end="19:14">assert</name><argument_list pos:start="19:15" pos:end="19:27">(<argument pos:start="19:16" pos:end="19:26"><expr pos:start="19:16" pos:end="19:26"><name pos:start="19:16" pos:end="19:18">orb</name> <operator pos:start="19:20" pos:end="19:21">!=</operator> <name pos:start="19:23" pos:end="19:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:34"><expr pos:start="21:9" pos:end="21:33"><name pos:start="21:9" pos:end="21:18"><name pos:start="21:9" pos:end="21:9">p</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:18">intparm</name></name> <operator pos:start="21:20" pos:end="21:20">=</operator> <name pos:start="21:22" pos:end="21:33"><name pos:start="21:22" pos:end="21:24">orb</name><operator pos:start="21:25" pos:end="21:26">-&gt;</operator><name pos:start="21:27" pos:end="21:33">intparm</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="27:5" pos:end="33:7">/*

     * Only support prefetch enable mode.

     * Only support 64bit addressing idal.

     */</comment>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="37:43">(<expr pos:start="35:9" pos:end="37:42"><operator pos:start="35:9" pos:end="35:9">!</operator><operator pos:start="35:10" pos:end="35:10">(</operator><name pos:start="35:11" pos:end="35:20"><name pos:start="35:11" pos:end="35:13">orb</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:20">ctrl0</name></name> <operator pos:start="35:22" pos:end="35:22">&amp;</operator> <name pos:start="35:24" pos:end="35:42">ORB_CTRL0_MASK_PFCH</name><operator pos:start="35:43" pos:end="35:43">)</operator> <operator pos:start="35:45" pos:end="35:46">||</operator>

        <operator pos:start="37:9" pos:end="37:9">!</operator><operator pos:start="37:10" pos:end="37:10">(</operator><name pos:start="37:11" pos:end="37:20"><name pos:start="37:11" pos:end="37:13">orb</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:20">ctrl0</name></name> <operator pos:start="37:22" pos:end="37:22">&amp;</operator> <name pos:start="37:24" pos:end="37:41">ORB_CTRL0_MASK_C64</name><operator pos:start="37:42" pos:end="37:42">)</operator></expr>)</condition> <block pos:start="37:45" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:23">

        <return pos:start="39:9" pos:end="39:23">return <expr pos:start="39:16" pos:end="39:22"><operator pos:start="39:16" pos:end="39:16">-</operator><name pos:start="39:17" pos:end="39:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:57"><expr pos:start="45:5" pos:end="45:56"><name pos:start="45:5" pos:end="45:7">ret</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:56"><name pos:start="45:11" pos:end="45:30">s390_ccw_cmd_request</name><argument_list pos:start="45:31" pos:end="45:56">(<argument pos:start="45:32" pos:end="45:34"><expr pos:start="45:32" pos:end="45:34"><name pos:start="45:32" pos:end="45:34">orb</name></expr></argument>, <argument pos:start="45:37" pos:end="45:37"><expr pos:start="45:37" pos:end="45:37"><name pos:start="45:37" pos:end="45:37">s</name></expr></argument>, <argument pos:start="45:40" pos:end="45:55"><expr pos:start="45:40" pos:end="45:55"><name pos:start="45:40" pos:end="45:55"><name pos:start="45:40" pos:end="45:42">sch</name><operator pos:start="45:43" pos:end="45:44">-&gt;</operator><name pos:start="45:45" pos:end="45:55">driver_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="47:5" pos:end="83:5">switch <condition pos:start="47:12" pos:end="47:16">(<expr pos:start="47:13" pos:end="47:15"><name pos:start="47:13" pos:end="47:15">ret</name></expr>)</condition> <block pos:start="47:18" pos:end="83:5">{<block_content pos:start="51:5" pos:end="81:13">

    <comment type="block" pos:start="49:5" pos:end="49:78">/* Currently we don't update control block and just return the cc code. */</comment>

    <case pos:start="51:5" pos:end="51:11">case <expr pos:start="51:10" pos:end="51:10"><literal type="number" pos:start="51:10" pos:end="51:10">0</literal></expr>:</case>

        <break pos:start="53:9" pos:end="53:14">break;</break>

    <case pos:start="55:5" pos:end="55:16">case <expr pos:start="55:10" pos:end="55:15"><operator pos:start="55:10" pos:end="55:10">-</operator><name pos:start="55:11" pos:end="55:15">EBUSY</name></expr>:</case>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <case pos:start="59:5" pos:end="59:17">case <expr pos:start="59:10" pos:end="59:16"><operator pos:start="59:10" pos:end="59:10">-</operator><name pos:start="59:11" pos:end="59:16">ENODEV</name></expr>:</case>

        <break pos:start="61:9" pos:end="61:14">break;</break>

    <case pos:start="63:5" pos:end="63:17">case <expr pos:start="63:10" pos:end="63:16"><operator pos:start="63:10" pos:end="63:10">-</operator><name pos:start="63:11" pos:end="63:16">EACCES</name></expr>:</case>

        <comment type="block" pos:start="65:9" pos:end="65:64">/* Let's reflect an inaccessible host device by cc 3. */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:22"><expr pos:start="67:9" pos:end="67:21"><name pos:start="67:9" pos:end="67:11">ret</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <operator pos:start="67:15" pos:end="67:15">-</operator><name pos:start="67:16" pos:end="67:21">ENODEV</name></expr>;</expr_stmt>

        <break pos:start="69:9" pos:end="69:14">break;</break>

    <default pos:start="71:5" pos:end="71:12">default:</default>

       <comment type="block" pos:start="73:8" pos:end="79:10">/*

        * All other return codes will trigger a program check,

        * or set cc to 1.

        */</comment>

       <break pos:start="81:8" pos:end="81:13">break;</break>

    </block_content>}</block></switch><empty_stmt pos:start="83:6" pos:end="83:6">;</empty_stmt>



    <return pos:start="87:5" pos:end="87:15">return <expr pos:start="87:12" pos:end="87:14"><name pos:start="87:12" pos:end="87:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
