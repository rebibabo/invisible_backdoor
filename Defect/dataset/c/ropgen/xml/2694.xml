<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2694.c" pos:tabs="8"><function pos:start="1:1" pos:end="82:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">sami_paragraph_to_ass</name><parameter_list pos:start="1:33" pos:end="1:72">(<parameter pos:start="1:34" pos:end="1:54"><decl pos:start="1:34" pos:end="1:54"><type pos:start="1:34" pos:end="1:54"><name pos:start="1:34" pos:end="1:47">AVCodecContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:54">avctx</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:71"><decl pos:start="1:57" pos:end="1:71"><type pos:start="1:57" pos:end="1:71"><specifier pos:start="1:57" pos:end="1:61">const</specifier> <name pos:start="1:63" pos:end="1:66">char</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:71">src</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="82:1">{<block_content pos:start="3:5" pos:end="81:15">
    <decl_stmt pos:start="3:5" pos:end="3:41"><decl pos:start="3:5" pos:end="3:40"><type pos:start="3:5" pos:end="3:17"><name pos:start="3:5" pos:end="3:15">SAMIContext</name> <modifier pos:start="3:17" pos:end="3:17">*</modifier></type><name pos:start="3:18" pos:end="3:21">sami</name> <init pos:start="3:23" pos:end="3:40">= <expr pos:start="3:25" pos:end="3:40"><name pos:start="3:25" pos:end="3:40"><name pos:start="3:25" pos:end="3:29">avctx</name><operator pos:start="3:30" pos:end="3:31">-&gt;</operator><name pos:start="3:32" pos:end="3:40">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:16"><decl pos:start="4:5" pos:end="4:15"><type pos:start="4:5" pos:end="4:7"><name pos:start="4:5" pos:end="4:7">int</name></type> <name pos:start="4:9" pos:end="4:11">ret</name> <init pos:start="4:13" pos:end="4:15">= <expr pos:start="4:15" pos:end="4:15"><literal type="number" pos:start="4:15" pos:end="4:15">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">char</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:13">tag</name> <init pos:start="5:15" pos:end="5:20">= <expr pos:start="5:17" pos:end="5:20"><name pos:start="5:17" pos:end="5:20">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:34"><decl pos:start="6:5" pos:end="6:33"><type pos:start="6:5" pos:end="6:10"><name pos:start="6:5" pos:end="6:8">char</name> <modifier pos:start="6:10" pos:end="6:10">*</modifier></type><name pos:start="6:11" pos:end="6:16">dupsrc</name> <init pos:start="6:18" pos:end="6:33">= <expr pos:start="6:20" pos:end="6:33"><call pos:start="6:20" pos:end="6:33"><name pos:start="6:20" pos:end="6:28">av_strdup</name><argument_list pos:start="6:29" pos:end="6:33">(<argument pos:start="6:30" pos:end="6:32"><expr pos:start="6:30" pos:end="6:32"><name pos:start="6:30" pos:end="6:32">src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:11">p</name> <init pos:start="7:13" pos:end="7:20">= <expr pos:start="7:15" pos:end="7:20"><name pos:start="7:15" pos:end="7:20">dupsrc</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:51"><decl pos:start="8:5" pos:end="8:50"><type pos:start="8:5" pos:end="8:14"><name pos:start="8:5" pos:end="8:12">AVBPrint</name> <modifier pos:start="8:14" pos:end="8:14">*</modifier></type><name pos:start="8:15" pos:end="8:25">dst_content</name> <init pos:start="8:27" pos:end="8:50">= <expr pos:start="8:29" pos:end="8:50"><operator pos:start="8:29" pos:end="8:29">&amp;</operator><name pos:start="8:30" pos:end="8:50"><name pos:start="8:30" pos:end="8:33">sami</name><operator pos:start="8:34" pos:end="8:35">-&gt;</operator><name pos:start="8:36" pos:end="8:50">encoded_content</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:49"><decl pos:start="9:5" pos:end="9:48"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">AVBPrint</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:24">dst_source</name> <init pos:start="9:26" pos:end="9:48">= <expr pos:start="9:28" pos:end="9:48"><operator pos:start="9:28" pos:end="9:28">&amp;</operator><name pos:start="9:29" pos:end="9:48"><name pos:start="9:29" pos:end="9:32">sami</name><operator pos:start="9:33" pos:end="9:34">-&gt;</operator><name pos:start="9:35" pos:end="9:48">encoded_source</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:44"><expr pos:start="10:5" pos:end="10:43"><call pos:start="10:5" pos:end="10:43"><name pos:start="10:5" pos:end="10:19">av_bprint_clear</name><argument_list pos:start="10:20" pos:end="10:43">(<argument pos:start="10:21" pos:end="10:42"><expr pos:start="10:21" pos:end="10:42"><operator pos:start="10:21" pos:end="10:21">&amp;</operator><name pos:start="10:22" pos:end="10:42"><name pos:start="10:22" pos:end="10:25">sami</name><operator pos:start="10:26" pos:end="10:27">-&gt;</operator><name pos:start="10:28" pos:end="10:42">encoded_content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:36"><expr pos:start="11:5" pos:end="11:35"><call pos:start="11:5" pos:end="11:35"><name pos:start="11:5" pos:end="11:19">av_bprint_clear</name><argument_list pos:start="11:20" pos:end="11:35">(<argument pos:start="11:21" pos:end="11:34"><expr pos:start="11:21" pos:end="11:34"><operator pos:start="11:21" pos:end="11:21">&amp;</operator><name pos:start="11:22" pos:end="11:34"><name pos:start="11:22" pos:end="11:25">sami</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:34">content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:43"><expr pos:start="12:5" pos:end="12:42"><call pos:start="12:5" pos:end="12:42"><name pos:start="12:5" pos:end="12:19">av_bprint_clear</name><argument_list pos:start="12:20" pos:end="12:42">(<argument pos:start="12:21" pos:end="12:41"><expr pos:start="12:21" pos:end="12:41"><operator pos:start="12:21" pos:end="12:21">&amp;</operator><name pos:start="12:22" pos:end="12:41"><name pos:start="12:22" pos:end="12:25">sami</name><operator pos:start="12:26" pos:end="12:27">-&gt;</operator><name pos:start="12:28" pos:end="12:41">encoded_source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="13:5" pos:end="67:5">for <control pos:start="13:9" pos:end="13:12">(<init pos:start="13:10" pos:end="13:10">;</init><condition pos:start="13:11" pos:end="13:11">;</condition><incr/>)</control> <block pos:start="13:14" pos:end="67:5">{<block_content pos:start="14:9" pos:end="66:9">
        <decl_stmt pos:start="14:9" pos:end="14:29"><decl pos:start="14:9" pos:end="14:28"><type pos:start="14:9" pos:end="14:14"><name pos:start="14:9" pos:end="14:12">char</name> <modifier pos:start="14:14" pos:end="14:14">*</modifier></type><name pos:start="14:15" pos:end="14:21">saveptr</name> <init pos:start="14:23" pos:end="14:28">= <expr pos:start="14:25" pos:end="14:28"><name pos:start="14:25" pos:end="14:28">NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="15:9" pos:end="15:34"><decl pos:start="15:9" pos:end="15:33"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:29">prev_chr_is_space</name> <init pos:start="15:31" pos:end="15:33">= <expr pos:start="15:33" pos:end="15:33"><literal type="number" pos:start="15:33" pos:end="15:33">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="16:9" pos:end="16:39"><decl pos:start="16:9" pos:end="16:38"><type pos:start="16:9" pos:end="16:18"><name pos:start="16:9" pos:end="16:16">AVBPrint</name> <modifier pos:start="16:18" pos:end="16:18">*</modifier></type><name pos:start="16:19" pos:end="16:21">dst</name> <init pos:start="16:23" pos:end="16:38">= <expr pos:start="16:25" pos:end="16:38"><operator pos:start="16:25" pos:end="16:25">&amp;</operator><name pos:start="16:26" pos:end="16:38"><name pos:start="16:26" pos:end="16:29">sami</name><operator pos:start="16:30" pos:end="16:31">-&gt;</operator><name pos:start="16:32" pos:end="16:38">content</name></name></expr></init></decl>;</decl_stmt>
        <comment type="block" pos:start="17:9" pos:end="17:43">/* parse &amp; extract paragraph tag */</comment>
        <expr_stmt pos:start="18:9" pos:end="18:32"><expr pos:start="18:9" pos:end="18:31"><name pos:start="18:9" pos:end="18:9">p</name> <operator pos:start="18:11" pos:end="18:11">=</operator> <call pos:start="18:13" pos:end="18:31"><name pos:start="18:13" pos:end="18:22">av_stristr</name><argument_list pos:start="18:23" pos:end="18:31">(<argument pos:start="18:24" pos:end="18:24"><expr pos:start="18:24" pos:end="18:24"><name pos:start="18:24" pos:end="18:24">p</name></expr></argument>, <argument pos:start="18:27" pos:end="18:30"><expr pos:start="18:27" pos:end="18:30"><literal type="string" pos:start="18:27" pos:end="18:30">"&lt;P"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="19:9" pos:end="20:18"><if pos:start="19:9" pos:end="20:18">if <condition pos:start="19:12" pos:end="19:15">(<expr pos:start="19:13" pos:end="19:14"><operator pos:start="19:13" pos:end="19:13">!</operator><name pos:start="19:14" pos:end="19:14">p</name></expr>)</condition><block type="pseudo" pos:start="20:13" pos:end="20:18"><block_content pos:start="20:13" pos:end="20:18">
            <break pos:start="20:13" pos:end="20:18">break;</break></block_content></block></if></if_stmt>
        <if_stmt pos:start="21:9" pos:end="24:9"><if pos:start="21:9" pos:end="24:9">if <condition pos:start="21:12" pos:end="21:45">(<expr pos:start="21:13" pos:end="21:44"><name pos:start="21:13" pos:end="21:16"><name pos:start="21:13" pos:end="21:13">p</name><index pos:start="21:14" pos:end="21:16">[<expr pos:start="21:15" pos:end="21:15"><literal type="number" pos:start="21:15" pos:end="21:15">2</literal></expr>]</index></name> <operator pos:start="21:18" pos:end="21:19">!=</operator> <literal type="char" pos:start="21:21" pos:end="21:23">'&gt;'</literal> <operator pos:start="21:25" pos:end="21:26">&amp;&amp;</operator> <operator pos:start="21:28" pos:end="21:28">!</operator><call pos:start="21:29" pos:end="21:44"><name pos:start="21:29" pos:end="21:38">av_isspace</name><argument_list pos:start="21:39" pos:end="21:44">(<argument pos:start="21:40" pos:end="21:43"><expr pos:start="21:40" pos:end="21:43"><name pos:start="21:40" pos:end="21:43"><name pos:start="21:40" pos:end="21:40">p</name><index pos:start="21:41" pos:end="21:43">[<expr pos:start="21:42" pos:end="21:42"><literal type="number" pos:start="21:42" pos:end="21:42">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:47" pos:end="24:9">{<block_content pos:start="22:13" pos:end="23:21"> <comment type="line" pos:start="21:49" pos:end="21:90">// avoid confusion with tags such as &lt;PRE&gt;</comment>
            <expr_stmt pos:start="22:13" pos:end="22:16"><expr pos:start="22:13" pos:end="22:15"><name pos:start="22:13" pos:end="22:13">p</name><operator pos:start="22:14" pos:end="22:15">++</operator></expr>;</expr_stmt>
            <continue pos:start="23:13" pos:end="23:21">continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="25:9" pos:end="26:35"><if pos:start="25:9" pos:end="26:35">if <condition pos:start="25:12" pos:end="25:21">(<expr pos:start="25:13" pos:end="25:20"><name pos:start="25:13" pos:end="25:20"><name pos:start="25:13" pos:end="25:15">dst</name><operator pos:start="25:16" pos:end="25:17">-&gt;</operator><name pos:start="25:18" pos:end="25:20">len</name></name></expr>)</condition><block type="pseudo" pos:start="26:13" pos:end="26:35"><block_content pos:start="26:13" pos:end="26:35"> <comment type="line" pos:start="25:23" pos:end="25:85">// add a separator with the previous paragraph if there was one</comment>
            <expr_stmt pos:start="26:13" pos:end="26:35"><expr pos:start="26:13" pos:end="26:34"><call pos:start="26:13" pos:end="26:34"><name pos:start="26:13" pos:end="26:22">av_bprintf</name><argument_list pos:start="26:23" pos:end="26:34">(<argument pos:start="26:24" pos:end="26:26"><expr pos:start="26:24" pos:end="26:26"><name pos:start="26:24" pos:end="26:26">dst</name></expr></argument>, <argument pos:start="26:29" pos:end="26:33"><expr pos:start="26:29" pos:end="26:33"><literal type="string" pos:start="26:29" pos:end="26:33">"\\N"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="27:9" pos:end="27:42"><expr pos:start="27:9" pos:end="27:41"><name pos:start="27:9" pos:end="27:11">tag</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <call pos:start="27:15" pos:end="27:41"><name pos:start="27:15" pos:end="27:23">av_strtok</name><argument_list pos:start="27:24" pos:end="27:41">(<argument pos:start="27:25" pos:end="27:25"><expr pos:start="27:25" pos:end="27:25"><name pos:start="27:25" pos:end="27:25">p</name></expr></argument>, <argument pos:start="27:28" pos:end="27:30"><expr pos:start="27:28" pos:end="27:30"><literal type="string" pos:start="27:28" pos:end="27:30">"&gt;"</literal></expr></argument>, <argument pos:start="27:33" pos:end="27:40"><expr pos:start="27:33" pos:end="27:40"><operator pos:start="27:33" pos:end="27:33">&amp;</operator><name pos:start="27:34" pos:end="27:40">saveptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="28:9" pos:end="29:18"><if pos:start="28:9" pos:end="29:18">if <condition pos:start="28:12" pos:end="28:29">(<expr pos:start="28:13" pos:end="28:28"><operator pos:start="28:13" pos:end="28:13">!</operator><name pos:start="28:14" pos:end="28:16">tag</name> <operator pos:start="28:18" pos:end="28:19">||</operator> <operator pos:start="28:21" pos:end="28:21">!</operator><name pos:start="28:22" pos:end="28:28">saveptr</name></expr>)</condition><block type="pseudo" pos:start="29:13" pos:end="29:18"><block_content pos:start="29:13" pos:end="29:18">
            <break pos:start="29:13" pos:end="29:18">break;</break></block_content></block></if></if_stmt>
        <expr_stmt pos:start="30:9" pos:end="30:20"><expr pos:start="30:9" pos:end="30:19"><name pos:start="30:9" pos:end="30:9">p</name> <operator pos:start="30:11" pos:end="30:11">=</operator> <name pos:start="30:13" pos:end="30:19">saveptr</name></expr>;</expr_stmt>
        <comment type="block" pos:start="31:9" pos:end="31:75">/* check if the current paragraph is the "source" (speaker name) */</comment>
        <if_stmt pos:start="32:9" pos:end="35:9"><if pos:start="32:9" pos:end="35:9">if <condition pos:start="32:12" pos:end="32:77">(<expr pos:start="32:13" pos:end="32:76"><call pos:start="32:13" pos:end="32:40"><name pos:start="32:13" pos:end="32:22">av_stristr</name><argument_list pos:start="32:23" pos:end="32:40">(<argument pos:start="32:24" pos:end="32:26"><expr pos:start="32:24" pos:end="32:26"><name pos:start="32:24" pos:end="32:26">tag</name></expr></argument>, <argument pos:start="32:29" pos:end="32:39"><expr pos:start="32:29" pos:end="32:39"><literal type="string" pos:start="32:29" pos:end="32:39">"ID=Source"</literal></expr></argument>)</argument_list></call> <operator pos:start="32:42" pos:end="32:43">||</operator> <call pos:start="32:45" pos:end="32:76"><name pos:start="32:45" pos:end="32:54">av_stristr</name><argument_list pos:start="32:55" pos:end="32:76">(<argument pos:start="32:56" pos:end="32:58"><expr pos:start="32:56" pos:end="32:58"><name pos:start="32:56" pos:end="32:58">tag</name></expr></argument>, <argument pos:start="32:61" pos:end="32:75"><expr pos:start="32:61" pos:end="32:75"><literal type="string" pos:start="32:61" pos:end="32:75">"ID=\"Source\""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="32:79" pos:end="35:9">{<block_content pos:start="33:13" pos:end="34:33">
            <expr_stmt pos:start="33:13" pos:end="33:32"><expr pos:start="33:13" pos:end="33:31"><name pos:start="33:13" pos:end="33:15">dst</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <operator pos:start="33:19" pos:end="33:19">&amp;</operator><name pos:start="33:20" pos:end="33:31"><name pos:start="33:20" pos:end="33:23">sami</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:31">source</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="34:13" pos:end="34:33"><expr pos:start="34:13" pos:end="34:32"><call pos:start="34:13" pos:end="34:32"><name pos:start="34:13" pos:end="34:27">av_bprint_clear</name><argument_list pos:start="34:28" pos:end="34:32">(<argument pos:start="34:29" pos:end="34:31"><expr pos:start="34:29" pos:end="34:31"><name pos:start="34:29" pos:end="34:31">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="36:9" pos:end="36:45">/* if empty event -&gt; skip subtitle */</comment>
        <while pos:start="37:9" pos:end="38:16">while <condition pos:start="37:15" pos:end="37:30">(<expr pos:start="37:16" pos:end="37:29"><call pos:start="37:16" pos:end="37:29"><name pos:start="37:16" pos:end="37:25">av_isspace</name><argument_list pos:start="37:26" pos:end="37:29">(<argument pos:start="37:27" pos:end="37:28"><expr pos:start="37:27" pos:end="37:28"><operator pos:start="37:27" pos:end="37:27">*</operator><name pos:start="37:28" pos:end="37:28">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="38:13" pos:end="38:16"><block_content pos:start="38:13" pos:end="38:16">
            <expr_stmt pos:start="38:13" pos:end="38:16"><expr pos:start="38:13" pos:end="38:15"><name pos:start="38:13" pos:end="38:13">p</name><operator pos:start="38:14" pos:end="38:15">++</operator></expr>;</expr_stmt></block_content></block></while>
        <if_stmt pos:start="39:9" pos:end="42:9"><if pos:start="39:9" pos:end="42:9">if <condition pos:start="39:12" pos:end="39:37">(<expr pos:start="39:13" pos:end="39:36"><operator pos:start="39:13" pos:end="39:13">!</operator><call pos:start="39:14" pos:end="39:36"><name pos:start="39:14" pos:end="39:20">strncmp</name><argument_list pos:start="39:21" pos:end="39:36">(<argument pos:start="39:22" pos:end="39:22"><expr pos:start="39:22" pos:end="39:22"><name pos:start="39:22" pos:end="39:22">p</name></expr></argument>, <argument pos:start="39:25" pos:end="39:32"><expr pos:start="39:25" pos:end="39:32"><literal type="string" pos:start="39:25" pos:end="39:32">"&amp;nbsp;"</literal></expr></argument>, <argument pos:start="39:35" pos:end="39:35"><expr pos:start="39:35" pos:end="39:35"><literal type="number" pos:start="39:35" pos:end="39:35">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:39" pos:end="42:9">{<block_content pos:start="40:13" pos:end="41:21">
            <expr_stmt pos:start="40:13" pos:end="40:21"><expr pos:start="40:13" pos:end="40:20"><name pos:start="40:13" pos:end="40:15">ret</name> <operator pos:start="40:17" pos:end="40:17">=</operator> <operator pos:start="40:19" pos:end="40:19">-</operator><literal type="number" pos:start="40:20" pos:end="40:20">1</literal></expr>;</expr_stmt>
            <goto pos:start="41:13" pos:end="41:21">goto <name pos:start="41:18" pos:end="41:20">end</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="43:9" pos:end="43:58">/* extract the text, stripping most of the tags */</comment>
        <while pos:start="44:9" pos:end="66:9">while <condition pos:start="44:15" pos:end="44:18">(<expr pos:start="44:16" pos:end="44:17"><operator pos:start="44:16" pos:end="44:16">*</operator><name pos:start="44:17" pos:end="44:17">p</name></expr>)</condition> <block pos:start="44:20" pos:end="66:9">{<block_content pos:start="45:13" pos:end="65:16">
            <if_stmt pos:start="45:13" pos:end="48:13"><if pos:start="45:13" pos:end="48:13">if <condition pos:start="45:16" pos:end="45:26">(<expr pos:start="45:17" pos:end="45:25"><operator pos:start="45:17" pos:end="45:17">*</operator><name pos:start="45:18" pos:end="45:18">p</name> <operator pos:start="45:20" pos:end="45:21">==</operator> <literal type="char" pos:start="45:23" pos:end="45:25">'&lt;'</literal></expr>)</condition> <block pos:start="45:28" pos:end="48:13">{<block_content pos:start="46:17" pos:end="47:26">
                <if_stmt pos:start="46:17" pos:end="47:26"><if pos:start="46:17" pos:end="47:26">if <condition pos:start="46:20" pos:end="46:85">(<expr pos:start="46:21" pos:end="46:84"><operator pos:start="46:21" pos:end="46:21">!</operator><call pos:start="46:22" pos:end="46:47"><name pos:start="46:22" pos:end="46:35">av_strncasecmp</name><argument_list pos:start="46:36" pos:end="46:47">(<argument pos:start="46:37" pos:end="46:37"><expr pos:start="46:37" pos:end="46:37"><name pos:start="46:37" pos:end="46:37">p</name></expr></argument>, <argument pos:start="46:40" pos:end="46:43"><expr pos:start="46:40" pos:end="46:43"><literal type="string" pos:start="46:40" pos:end="46:43">"&lt;P"</literal></expr></argument>, <argument pos:start="46:46" pos:end="46:46"><expr pos:start="46:46" pos:end="46:46"><literal type="number" pos:start="46:46" pos:end="46:46">2</literal></expr></argument>)</argument_list></call> <operator pos:start="46:49" pos:end="46:50">&amp;&amp;</operator> <operator pos:start="46:52" pos:end="46:52">(</operator><name pos:start="46:53" pos:end="46:56"><name pos:start="46:53" pos:end="46:53">p</name><index pos:start="46:54" pos:end="46:56">[<expr pos:start="46:55" pos:end="46:55"><literal type="number" pos:start="46:55" pos:end="46:55">2</literal></expr>]</index></name> <operator pos:start="46:58" pos:end="46:59">==</operator> <literal type="char" pos:start="46:61" pos:end="46:63">'&gt;'</literal> <operator pos:start="46:65" pos:end="46:66">||</operator> <call pos:start="46:68" pos:end="46:83"><name pos:start="46:68" pos:end="46:77">av_isspace</name><argument_list pos:start="46:78" pos:end="46:83">(<argument pos:start="46:79" pos:end="46:82"><expr pos:start="46:79" pos:end="46:82"><name pos:start="46:79" pos:end="46:82"><name pos:start="46:79" pos:end="46:79">p</name><index pos:start="46:80" pos:end="46:82">[<expr pos:start="46:81" pos:end="46:81"><literal type="number" pos:start="46:81" pos:end="46:81">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="46:84" pos:end="46:84">)</operator></expr>)</condition><block type="pseudo" pos:start="47:21" pos:end="47:26"><block_content pos:start="47:21" pos:end="47:26">
                    <break pos:start="47:21" pos:end="47:26">break;</break></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="49:13" pos:end="59:13"><if pos:start="49:13" pos:end="59:13">if <condition pos:start="49:16" pos:end="49:45">(<expr pos:start="49:17" pos:end="49:44"><operator pos:start="49:17" pos:end="49:17">!</operator><call pos:start="49:18" pos:end="49:44"><name pos:start="49:18" pos:end="49:31">av_strncasecmp</name><argument_list pos:start="49:32" pos:end="49:44">(<argument pos:start="49:33" pos:end="49:33"><expr pos:start="49:33" pos:end="49:33"><name pos:start="49:33" pos:end="49:33">p</name></expr></argument>, <argument pos:start="49:36" pos:end="49:40"><expr pos:start="49:36" pos:end="49:40"><literal type="string" pos:start="49:36" pos:end="49:40">"&lt;BR"</literal></expr></argument>, <argument pos:start="49:43" pos:end="49:43"><expr pos:start="49:43" pos:end="49:43"><literal type="number" pos:start="49:43" pos:end="49:43">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:47" pos:end="59:13">{<block_content pos:start="50:17" pos:end="58:25">
                <expr_stmt pos:start="50:17" pos:end="50:39"><expr pos:start="50:17" pos:end="50:38"><call pos:start="50:17" pos:end="50:38"><name pos:start="50:17" pos:end="50:26">av_bprintf</name><argument_list pos:start="50:27" pos:end="50:38">(<argument pos:start="50:28" pos:end="50:30"><expr pos:start="50:28" pos:end="50:30"><name pos:start="50:28" pos:end="50:30">dst</name></expr></argument>, <argument pos:start="50:33" pos:end="50:37"><expr pos:start="50:33" pos:end="50:37"><literal type="string" pos:start="50:33" pos:end="50:37">"\\N"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="51:17" pos:end="51:20"><expr pos:start="51:17" pos:end="51:19"><name pos:start="51:17" pos:end="51:17">p</name><operator pos:start="51:18" pos:end="51:19">++</operator></expr>;</expr_stmt>
                <while pos:start="52:17" pos:end="53:24">while <condition pos:start="52:23" pos:end="52:39">(<expr pos:start="52:24" pos:end="52:38"><operator pos:start="52:24" pos:end="52:24">*</operator><name pos:start="52:25" pos:end="52:25">p</name> <operator pos:start="52:27" pos:end="52:28">&amp;&amp;</operator> <operator pos:start="52:30" pos:end="52:30">*</operator><name pos:start="52:31" pos:end="52:31">p</name> <operator pos:start="52:33" pos:end="52:34">!=</operator> <literal type="char" pos:start="52:36" pos:end="52:38">'&gt;'</literal></expr>)</condition><block type="pseudo" pos:start="53:21" pos:end="53:24"><block_content pos:start="53:21" pos:end="53:24">
                    <expr_stmt pos:start="53:21" pos:end="53:24"><expr pos:start="53:21" pos:end="53:23"><name pos:start="53:21" pos:end="53:21">p</name><operator pos:start="53:22" pos:end="53:23">++</operator></expr>;</expr_stmt></block_content></block></while>
                <if_stmt pos:start="54:17" pos:end="55:26"><if pos:start="54:17" pos:end="55:26">if <condition pos:start="54:20" pos:end="54:24">(<expr pos:start="54:21" pos:end="54:23"><operator pos:start="54:21" pos:end="54:21">!</operator><operator pos:start="54:22" pos:end="54:22">*</operator><name pos:start="54:23" pos:end="54:23">p</name></expr>)</condition><block type="pseudo" pos:start="55:21" pos:end="55:26"><block_content pos:start="55:21" pos:end="55:26">
                    <break pos:start="55:21" pos:end="55:26">break;</break></block_content></block></if></if_stmt>
                <if_stmt pos:start="56:17" pos:end="57:24"><if pos:start="56:17" pos:end="57:24">if <condition pos:start="56:20" pos:end="56:30">(<expr pos:start="56:21" pos:end="56:29"><operator pos:start="56:21" pos:end="56:21">*</operator><name pos:start="56:22" pos:end="56:22">p</name> <operator pos:start="56:24" pos:end="56:25">==</operator> <literal type="char" pos:start="56:27" pos:end="56:29">'&gt;'</literal></expr>)</condition><block type="pseudo" pos:start="57:21" pos:end="57:24"><block_content pos:start="57:21" pos:end="57:24">
                    <expr_stmt pos:start="57:21" pos:end="57:24"><expr pos:start="57:21" pos:end="57:23"><name pos:start="57:21" pos:end="57:21">p</name><operator pos:start="57:22" pos:end="57:23">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <continue pos:start="58:17" pos:end="58:25">continue;</continue>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="60:13" pos:end="63:45"><if pos:start="60:13" pos:end="61:44">if <condition pos:start="60:16" pos:end="60:32">(<expr pos:start="60:17" pos:end="60:31"><operator pos:start="60:17" pos:end="60:17">!</operator><call pos:start="60:18" pos:end="60:31"><name pos:start="60:18" pos:end="60:27">av_isspace</name><argument_list pos:start="60:28" pos:end="60:31">(<argument pos:start="60:29" pos:end="60:30"><expr pos:start="60:29" pos:end="60:30"><operator pos:start="60:29" pos:end="60:29">*</operator><name pos:start="60:30" pos:end="60:30">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="61:17" pos:end="61:44"><block_content pos:start="61:17" pos:end="61:44">
                <expr_stmt pos:start="61:17" pos:end="61:44"><expr pos:start="61:17" pos:end="61:43"><call pos:start="61:17" pos:end="61:43"><name pos:start="61:17" pos:end="61:31">av_bprint_chars</name><argument_list pos:start="61:32" pos:end="61:43">(<argument pos:start="61:33" pos:end="61:35"><expr pos:start="61:33" pos:end="61:35"><name pos:start="61:33" pos:end="61:35">dst</name></expr></argument>, <argument pos:start="61:38" pos:end="61:39"><expr pos:start="61:38" pos:end="61:39"><operator pos:start="61:38" pos:end="61:38">*</operator><name pos:start="61:39" pos:end="61:39">p</name></expr></argument>, <argument pos:start="61:42" pos:end="61:42"><expr pos:start="61:42" pos:end="61:42"><literal type="number" pos:start="61:42" pos:end="61:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif" pos:start="62:13" pos:end="63:45">else if <condition pos:start="62:21" pos:end="62:40">(<expr pos:start="62:22" pos:end="62:39"><operator pos:start="62:22" pos:end="62:22">!</operator><name pos:start="62:23" pos:end="62:39">prev_chr_is_space</name></expr>)</condition><block type="pseudo" pos:start="63:17" pos:end="63:45"><block_content pos:start="63:17" pos:end="63:45">
                <expr_stmt pos:start="63:17" pos:end="63:45"><expr pos:start="63:17" pos:end="63:44"><call pos:start="63:17" pos:end="63:44"><name pos:start="63:17" pos:end="63:31">av_bprint_chars</name><argument_list pos:start="63:32" pos:end="63:44">(<argument pos:start="63:33" pos:end="63:35"><expr pos:start="63:33" pos:end="63:35"><name pos:start="63:33" pos:end="63:35">dst</name></expr></argument>, <argument pos:start="63:38" pos:end="63:40"><expr pos:start="63:38" pos:end="63:40"><literal type="char" pos:start="63:38" pos:end="63:40">' '</literal></expr></argument>, <argument pos:start="63:43" pos:end="63:43"><expr pos:start="63:43" pos:end="63:43"><literal type="number" pos:start="63:43" pos:end="63:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="64:13" pos:end="64:47"><expr pos:start="64:13" pos:end="64:46"><name pos:start="64:13" pos:end="64:29">prev_chr_is_space</name> <operator pos:start="64:31" pos:end="64:31">=</operator> <call pos:start="64:33" pos:end="64:46"><name pos:start="64:33" pos:end="64:42">av_isspace</name><argument_list pos:start="64:43" pos:end="64:46">(<argument pos:start="64:44" pos:end="64:45"><expr pos:start="64:44" pos:end="64:45"><operator pos:start="64:44" pos:end="64:44">*</operator><name pos:start="64:45" pos:end="64:45">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="65:13" pos:end="65:16"><expr pos:start="65:13" pos:end="65:15"><name pos:start="65:13" pos:end="65:13">p</name><operator pos:start="65:14" pos:end="65:15">++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></for>
    <expr_stmt pos:start="68:5" pos:end="68:33"><expr pos:start="68:5" pos:end="68:32"><call pos:start="68:5" pos:end="68:32"><name pos:start="68:5" pos:end="68:19">av_bprint_clear</name><argument_list pos:start="68:20" pos:end="68:32">(<argument pos:start="68:21" pos:end="68:31"><expr pos:start="68:21" pos:end="68:31"><operator pos:start="68:21" pos:end="68:21">&amp;</operator><name pos:start="68:22" pos:end="68:31"><name pos:start="68:22" pos:end="68:25">sami</name><operator pos:start="68:26" pos:end="68:27">-&gt;</operator><name pos:start="68:28" pos:end="68:31">full</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="69:5" pos:end="74:5"><if pos:start="69:5" pos:end="74:5">if <condition pos:start="69:8" pos:end="69:25">(<expr pos:start="69:9" pos:end="69:24"><name pos:start="69:9" pos:end="69:24"><name pos:start="69:9" pos:end="69:12">sami</name><operator pos:start="69:13" pos:end="69:14">-&gt;</operator><name pos:start="69:15" pos:end="69:20">source</name><operator pos:start="69:21" pos:end="69:21">.</operator><name pos:start="69:22" pos:end="69:24">len</name></name></expr>)</condition> <block pos:start="69:27" pos:end="74:5">{<block_content pos:start="70:9" pos:end="73:79">
        <expr_stmt pos:start="70:9" pos:end="70:72"><expr pos:start="70:9" pos:end="70:71"><name pos:start="70:9" pos:end="70:11">ret</name> <operator pos:start="70:13" pos:end="70:13">=</operator> <call pos:start="70:15" pos:end="70:71"><name pos:start="70:15" pos:end="70:34">ff_htmlmarkup_to_ass</name><argument_list pos:start="70:35" pos:end="70:71">(<argument pos:start="70:36" pos:end="70:40"><expr pos:start="70:36" pos:end="70:40"><name pos:start="70:36" pos:end="70:40">avctx</name></expr></argument>, <argument pos:start="70:43" pos:end="70:52"><expr pos:start="70:43" pos:end="70:52"><name pos:start="70:43" pos:end="70:52">dst_source</name></expr></argument>, <argument pos:start="70:55" pos:end="70:70"><expr pos:start="70:55" pos:end="70:70"><name pos:start="70:55" pos:end="70:70"><name pos:start="70:55" pos:end="70:58">sami</name><operator pos:start="70:59" pos:end="70:60">-&gt;</operator><name pos:start="70:61" pos:end="70:66">source</name><operator pos:start="70:67" pos:end="70:67">.</operator><name pos:start="70:68" pos:end="70:70">str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="71:9" pos:end="72:21"><if pos:start="71:9" pos:end="72:21">if <condition pos:start="71:12" pos:end="71:20">(<expr pos:start="71:13" pos:end="71:19"><name pos:start="71:13" pos:end="71:15">ret</name> <operator pos:start="71:17" pos:end="71:17">&lt;</operator> <literal type="number" pos:start="71:19" pos:end="71:19">0</literal></expr>)</condition><block type="pseudo" pos:start="72:13" pos:end="72:21"><block_content pos:start="72:13" pos:end="72:21">
            <goto pos:start="72:13" pos:end="72:21">goto <name pos:start="72:18" pos:end="72:20">end</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="73:9" pos:end="73:79"><expr pos:start="73:9" pos:end="73:78"><call pos:start="73:9" pos:end="73:78"><name pos:start="73:9" pos:end="73:18">av_bprintf</name><argument_list pos:start="73:19" pos:end="73:78">(<argument pos:start="73:20" pos:end="73:30"><expr pos:start="73:20" pos:end="73:30"><operator pos:start="73:20" pos:end="73:20">&amp;</operator><name pos:start="73:21" pos:end="73:30"><name pos:start="73:21" pos:end="73:24">sami</name><operator pos:start="73:25" pos:end="73:26">-&gt;</operator><name pos:start="73:27" pos:end="73:30">full</name></name></expr></argument>, <argument pos:start="73:33" pos:end="73:51"><expr pos:start="73:33" pos:end="73:51"><literal type="string" pos:start="73:33" pos:end="73:51">"{\\i1}%s{\\i0}\\N"</literal></expr></argument>, <argument pos:start="73:54" pos:end="73:77"><expr pos:start="73:54" pos:end="73:77"><name pos:start="73:54" pos:end="73:77"><name pos:start="73:54" pos:end="73:57">sami</name><operator pos:start="73:58" pos:end="73:59">-&gt;</operator><name pos:start="73:60" pos:end="73:73">encoded_source</name><operator pos:start="73:74" pos:end="73:74">.</operator><name pos:start="73:75" pos:end="73:77">str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="75:5" pos:end="75:70"><expr pos:start="75:5" pos:end="75:69"><name pos:start="75:5" pos:end="75:7">ret</name> <operator pos:start="75:9" pos:end="75:9">=</operator> <call pos:start="75:11" pos:end="75:69"><name pos:start="75:11" pos:end="75:30">ff_htmlmarkup_to_ass</name><argument_list pos:start="75:31" pos:end="75:69">(<argument pos:start="75:32" pos:end="75:36"><expr pos:start="75:32" pos:end="75:36"><name pos:start="75:32" pos:end="75:36">avctx</name></expr></argument>, <argument pos:start="75:39" pos:end="75:49"><expr pos:start="75:39" pos:end="75:49"><name pos:start="75:39" pos:end="75:49">dst_content</name></expr></argument>, <argument pos:start="75:52" pos:end="75:68"><expr pos:start="75:52" pos:end="75:68"><name pos:start="75:52" pos:end="75:68"><name pos:start="75:52" pos:end="75:55">sami</name><operator pos:start="75:56" pos:end="75:57">-&gt;</operator><name pos:start="75:58" pos:end="75:64">content</name><operator pos:start="75:65" pos:end="75:65">.</operator><name pos:start="75:66" pos:end="75:68">str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="76:5" pos:end="77:17"><if pos:start="76:5" pos:end="77:17">if <condition pos:start="76:8" pos:end="76:16">(<expr pos:start="76:9" pos:end="76:15"><name pos:start="76:9" pos:end="76:11">ret</name> <operator pos:start="76:13" pos:end="76:13">&lt;</operator> <literal type="number" pos:start="76:15" pos:end="76:15">0</literal></expr>)</condition><block type="pseudo" pos:start="77:9" pos:end="77:17"><block_content pos:start="77:9" pos:end="77:17">
        <goto pos:start="77:9" pos:end="77:17">goto <name pos:start="77:14" pos:end="77:16">end</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt pos:start="78:5" pos:end="78:61"><expr pos:start="78:5" pos:end="78:60"><call pos:start="78:5" pos:end="78:60"><name pos:start="78:5" pos:end="78:14">av_bprintf</name><argument_list pos:start="78:15" pos:end="78:60">(<argument pos:start="78:16" pos:end="78:26"><expr pos:start="78:16" pos:end="78:26"><operator pos:start="78:16" pos:end="78:16">&amp;</operator><name pos:start="78:17" pos:end="78:26"><name pos:start="78:17" pos:end="78:20">sami</name><operator pos:start="78:21" pos:end="78:22">-&gt;</operator><name pos:start="78:23" pos:end="78:26">full</name></name></expr></argument>, <argument pos:start="78:29" pos:end="78:32"><expr pos:start="78:29" pos:end="78:32"><literal type="string" pos:start="78:29" pos:end="78:32">"%s"</literal></expr></argument>, <argument pos:start="78:35" pos:end="78:59"><expr pos:start="78:35" pos:end="78:59"><name pos:start="78:35" pos:end="78:59"><name pos:start="78:35" pos:end="78:38">sami</name><operator pos:start="78:39" pos:end="78:40">-&gt;</operator><name pos:start="78:41" pos:end="78:55">encoded_content</name><operator pos:start="78:56" pos:end="78:56">.</operator><name pos:start="78:57" pos:end="78:59">str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label pos:start="79:1" pos:end="79:4"><name pos:start="79:1" pos:end="79:3">end</name>:</label>
    <expr_stmt pos:start="80:5" pos:end="80:20"><expr pos:start="80:5" pos:end="80:19"><call pos:start="80:5" pos:end="80:19"><name pos:start="80:5" pos:end="80:11">av_free</name><argument_list pos:start="80:12" pos:end="80:19">(<argument pos:start="80:13" pos:end="80:18"><expr pos:start="80:13" pos:end="80:18"><name pos:start="80:13" pos:end="80:18">dupsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="81:5" pos:end="81:15">return <expr pos:start="81:12" pos:end="81:14"><name pos:start="81:12" pos:end="81:14">ret</name></expr>;</return>
</block_content>}</block></function></unit>
