<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12258.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:35">cpu_loop_exec_tb</name><parameter_list pos:start="1:36" pos:end="5:51">(<parameter pos:start="1:37" pos:end="1:49"><decl pos:start="1:37" pos:end="1:49"><type pos:start="1:37" pos:end="1:49"><name pos:start="1:37" pos:end="1:44">CPUState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">cpu</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:71"><decl pos:start="1:52" pos:end="1:71"><type pos:start="1:52" pos:end="1:71"><name pos:start="1:52" pos:end="1:67">TranslationBlock</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:71">tb</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:62"><decl pos:start="3:37" pos:end="3:62"><type pos:start="3:37" pos:end="3:62"><name pos:start="3:37" pos:end="3:52">TranslationBlock</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier><modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:62">last_tb</name></decl></parameter>, <parameter pos:start="3:65" pos:end="3:76"><decl pos:start="3:65" pos:end="3:76"><type pos:start="3:65" pos:end="3:76"><name pos:start="3:65" pos:end="3:67">int</name> <modifier pos:start="3:69" pos:end="3:69">*</modifier></type><name pos:start="3:70" pos:end="3:76">tb_exit</name></decl></parameter>,

                                    <parameter pos:start="5:37" pos:end="5:50"><decl pos:start="5:37" pos:end="5:50"><type pos:start="5:37" pos:end="5:50"><name pos:start="5:37" pos:end="5:46">SyncClocks</name> <modifier pos:start="5:48" pos:end="5:48">*</modifier></type><name pos:start="5:49" pos:end="5:50">sc</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="117:1">{<block_content pos:start="9:5" pos:end="115:5">

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:13">uintptr_t</name></type> <name pos:start="9:15" pos:end="9:17">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:50">(<expr pos:start="13:9" pos:end="13:49"><call pos:start="13:9" pos:end="13:49"><name pos:start="13:9" pos:end="13:16">unlikely</name><argument_list pos:start="13:17" pos:end="13:49">(<argument pos:start="13:18" pos:end="13:48"><expr pos:start="13:18" pos:end="13:48"><call pos:start="13:18" pos:end="13:48"><name pos:start="13:18" pos:end="13:28">atomic_read</name><argument_list pos:start="13:29" pos:end="13:48">(<argument pos:start="13:30" pos:end="13:47"><expr pos:start="13:30" pos:end="13:47"><operator pos:start="13:30" pos:end="13:30">&amp;</operator><name pos:start="13:31" pos:end="13:47"><name pos:start="13:31" pos:end="13:33">cpu</name><operator pos:start="13:34" pos:end="13:35">-&gt;</operator><name pos:start="13:36" pos:end="13:47">exit_request</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:52" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:15">

        <return pos:start="15:9" pos:end="15:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:30"><expr pos:start="21:5" pos:end="21:29"><call pos:start="21:5" pos:end="21:29"><name pos:start="21:5" pos:end="21:17">trace_exec_tb</name><argument_list pos:start="21:18" pos:end="21:29">(<argument pos:start="21:19" pos:end="21:20"><expr pos:start="21:19" pos:end="21:20"><name pos:start="21:19" pos:end="21:20">tb</name></expr></argument>, <argument pos:start="21:23" pos:end="21:28"><expr pos:start="21:23" pos:end="21:28"><name pos:start="21:23" pos:end="21:28"><name pos:start="21:23" pos:end="21:24">tb</name><operator pos:start="21:25" pos:end="21:26">-&gt;</operator><name pos:start="21:27" pos:end="21:28">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:31"><expr pos:start="23:5" pos:end="23:30"><name pos:start="23:5" pos:end="23:7">ret</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:30"><name pos:start="23:11" pos:end="23:21">cpu_tb_exec</name><argument_list pos:start="23:22" pos:end="23:30">(<argument pos:start="23:23" pos:end="23:25"><expr pos:start="23:23" pos:end="23:25"><name pos:start="23:23" pos:end="23:25">cpu</name></expr></argument>, <argument pos:start="23:28" pos:end="23:29"><expr pos:start="23:28" pos:end="23:29"><name pos:start="23:28" pos:end="23:29">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:57"><expr pos:start="25:5" pos:end="25:56"><operator pos:start="25:5" pos:end="25:5">*</operator><name pos:start="25:6" pos:end="25:12">last_tb</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <operator pos:start="25:16" pos:end="25:16">(</operator><name pos:start="25:17" pos:end="25:32">TranslationBlock</name> <operator pos:start="25:34" pos:end="25:34">*</operator><operator pos:start="25:35" pos:end="25:35">)</operator><operator pos:start="25:36" pos:end="25:36">(</operator><name pos:start="25:37" pos:end="25:39">ret</name> <operator pos:start="25:41" pos:end="25:41">&amp;</operator> <operator pos:start="25:43" pos:end="25:43">~</operator><name pos:start="25:44" pos:end="25:55">TB_EXIT_MASK</name><operator pos:start="25:56" pos:end="25:56">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:34"><expr pos:start="27:5" pos:end="27:33"><operator pos:start="27:5" pos:end="27:5">*</operator><name pos:start="27:6" pos:end="27:12">tb_exit</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <name pos:start="27:16" pos:end="27:18">ret</name> <operator pos:start="27:20" pos:end="27:20">&amp;</operator> <name pos:start="27:22" pos:end="27:33">TB_EXIT_MASK</name></expr>;</expr_stmt>

    <switch pos:start="29:5" pos:end="115:5">switch <condition pos:start="29:12" pos:end="29:21">(<expr pos:start="29:13" pos:end="29:20"><operator pos:start="29:13" pos:end="29:13">*</operator><name pos:start="29:14" pos:end="29:20">tb_exit</name></expr>)</condition> <block pos:start="29:23" pos:end="115:5">{<block_content pos:start="31:5" pos:end="113:14">

    <case pos:start="31:5" pos:end="31:27">case <expr pos:start="31:10" pos:end="31:26"><name pos:start="31:10" pos:end="31:26">TB_EXIT_REQUESTED</name></expr>:</case>

        <comment type="block" pos:start="33:9" pos:end="51:11">/* Something asked us to stop executing

         * chained TBs; just continue round the main

         * loop. Whatever requested the exit will also

         * have set something else (eg exit_request or

         * interrupt_request) which we will handle

         * next time around the loop.  But we need to

         * ensure the tcg_exit_req read in generated code

         * comes before the next read of cpu-&gt;exit_request

         * or cpu-&gt;interrupt_request.

         */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:18"><expr pos:start="53:9" pos:end="53:17"><call pos:start="53:9" pos:end="53:17"><name pos:start="53:9" pos:end="53:15">smp_rmb</name><argument_list pos:start="53:16" pos:end="53:17">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:24"><expr pos:start="55:9" pos:end="55:23"><operator pos:start="55:9" pos:end="55:9">*</operator><name pos:start="55:10" pos:end="55:16">last_tb</name> <operator pos:start="55:18" pos:end="55:18">=</operator> <name pos:start="55:20" pos:end="55:23">NULL</name></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <case pos:start="59:5" pos:end="59:32">case <expr pos:start="59:10" pos:end="59:31"><name pos:start="59:10" pos:end="59:31">TB_EXIT_ICOUNT_EXPIRED</name></expr>:</case>

    <block pos:start="61:5" pos:end="109:5">{<block_content pos:start="67:9" pos:end="108:0">

        <comment type="block" pos:start="63:9" pos:end="63:43">/* Instruction counter expired.  */</comment>

<cpp:ifdef pos:start="65:1" pos:end="65:23">#<cpp:directive pos:start="65:2" pos:end="65:6">ifdef</cpp:directive> <name pos:start="65:8" pos:end="65:23">CONFIG_USER_ONLY</name></cpp:ifdef>

        <expr_stmt pos:start="67:9" pos:end="70:0"><expr pos:start="67:9" pos:end="67:15"><call pos:start="67:9" pos:end="67:15"><name pos:start="67:9" pos:end="67:13">abort</name><argument_list pos:start="67:14" pos:end="67:15">()</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="69:1" pos:end="69:5">#<cpp:directive pos:start="69:2" pos:end="69:5">else</cpp:directive></cpp:else>

        <decl_stmt pos:start="71:9" pos:end="71:46"><decl pos:start="71:9" pos:end="71:45"><type pos:start="71:9" pos:end="71:11"><name pos:start="71:9" pos:end="71:11">int</name></type> <name pos:start="71:13" pos:end="71:22">insns_left</name> <init pos:start="71:24" pos:end="71:45">= <expr pos:start="71:26" pos:end="71:45"><name pos:start="71:26" pos:end="71:45"><name pos:start="71:26" pos:end="71:28">cpu</name><operator pos:start="71:29" pos:end="71:30">-&gt;</operator><name pos:start="71:31" pos:end="71:41">icount_decr</name><operator pos:start="71:42" pos:end="71:42">.</operator><name pos:start="71:43" pos:end="71:45">u32</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="73:9" pos:end="103:9"><if pos:start="73:9" pos:end="85:9">if <condition pos:start="73:12" pos:end="73:49">(<expr pos:start="73:13" pos:end="73:48"><name pos:start="73:13" pos:end="73:29"><name pos:start="73:13" pos:end="73:15">cpu</name><operator pos:start="73:16" pos:end="73:17">-&gt;</operator><name pos:start="73:18" pos:end="73:29">icount_extra</name></name> <operator pos:start="73:31" pos:end="73:32">&amp;&amp;</operator> <name pos:start="73:34" pos:end="73:43">insns_left</name> <operator pos:start="73:45" pos:end="73:46">&gt;=</operator> <literal type="number" pos:start="73:48" pos:end="73:48">0</literal></expr>)</condition> <block pos:start="73:51" pos:end="85:9">{<block_content pos:start="77:13" pos:end="83:50">

            <comment type="block" pos:start="75:13" pos:end="75:61">/* Refill decrementer and continue execution.  */</comment>

            <expr_stmt pos:start="77:13" pos:end="77:44"><expr pos:start="77:13" pos:end="77:43"><name pos:start="77:13" pos:end="77:29"><name pos:start="77:13" pos:end="77:15">cpu</name><operator pos:start="77:16" pos:end="77:17">-&gt;</operator><name pos:start="77:18" pos:end="77:29">icount_extra</name></name> <operator pos:start="77:31" pos:end="77:32">+=</operator> <name pos:start="77:34" pos:end="77:43">insns_left</name></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:56"><expr pos:start="79:13" pos:end="79:55"><name pos:start="79:13" pos:end="79:22">insns_left</name> <operator pos:start="79:24" pos:end="79:24">=</operator> <call pos:start="79:26" pos:end="79:55"><name pos:start="79:26" pos:end="79:28">MIN</name><argument_list pos:start="79:29" pos:end="79:55">(<argument pos:start="79:30" pos:end="79:35"><expr pos:start="79:30" pos:end="79:35"><literal type="number" pos:start="79:30" pos:end="79:35">0xffff</literal></expr></argument>, <argument pos:start="79:38" pos:end="79:54"><expr pos:start="79:38" pos:end="79:54"><name pos:start="79:38" pos:end="79:54"><name pos:start="79:38" pos:end="79:40">cpu</name><operator pos:start="79:41" pos:end="79:42">-&gt;</operator><name pos:start="79:43" pos:end="79:54">icount_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:44"><expr pos:start="81:13" pos:end="81:43"><name pos:start="81:13" pos:end="81:29"><name pos:start="81:13" pos:end="81:15">cpu</name><operator pos:start="81:16" pos:end="81:17">-&gt;</operator><name pos:start="81:18" pos:end="81:29">icount_extra</name></name> <operator pos:start="81:31" pos:end="81:32">-=</operator> <name pos:start="81:34" pos:end="81:43">insns_left</name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:50"><expr pos:start="83:13" pos:end="83:49"><name pos:start="83:13" pos:end="83:36"><name pos:start="83:13" pos:end="83:15">cpu</name><operator pos:start="83:16" pos:end="83:17">-&gt;</operator><name pos:start="83:18" pos:end="83:28">icount_decr</name><operator pos:start="83:29" pos:end="83:29">.</operator><name pos:start="83:30" pos:end="83:32">u16</name><operator pos:start="83:33" pos:end="83:33">.</operator><name pos:start="83:34" pos:end="83:36">low</name></name> <operator pos:start="83:38" pos:end="83:38">=</operator> <name pos:start="83:40" pos:end="83:49">insns_left</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="85:11" pos:end="103:9">else <block pos:start="85:16" pos:end="103:9">{<block_content pos:start="87:13" pos:end="101:31">

            <if_stmt pos:start="87:13" pos:end="95:13"><if pos:start="87:13" pos:end="95:13">if <condition pos:start="87:16" pos:end="87:31">(<expr pos:start="87:17" pos:end="87:30"><name pos:start="87:17" pos:end="87:26">insns_left</name> <operator pos:start="87:28" pos:end="87:28">&gt;</operator> <literal type="number" pos:start="87:30" pos:end="87:30">0</literal></expr>)</condition> <block pos:start="87:33" pos:end="95:13">{<block_content pos:start="91:17" pos:end="93:38">

                <comment type="block" pos:start="89:17" pos:end="89:54">/* Execute remaining instructions.  */</comment>

                <expr_stmt pos:start="91:17" pos:end="91:67"><expr pos:start="91:17" pos:end="91:66"><call pos:start="91:17" pos:end="91:66"><name pos:start="91:17" pos:end="91:32">cpu_exec_nocache</name><argument_list pos:start="91:33" pos:end="91:66">(<argument pos:start="91:34" pos:end="91:36"><expr pos:start="91:34" pos:end="91:36"><name pos:start="91:34" pos:end="91:36">cpu</name></expr></argument>, <argument pos:start="91:39" pos:end="91:48"><expr pos:start="91:39" pos:end="91:48"><name pos:start="91:39" pos:end="91:48">insns_left</name></expr></argument>, <argument pos:start="91:51" pos:end="91:58"><expr pos:start="91:51" pos:end="91:58"><operator pos:start="91:51" pos:end="91:51">*</operator><name pos:start="91:52" pos:end="91:58">last_tb</name></expr></argument>, <argument pos:start="91:61" pos:end="91:65"><expr pos:start="91:61" pos:end="91:65"><name pos:start="91:61" pos:end="91:65">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:38"><expr pos:start="93:17" pos:end="93:37"><call pos:start="93:17" pos:end="93:37"><name pos:start="93:17" pos:end="93:28">align_clocks</name><argument_list pos:start="93:29" pos:end="93:37">(<argument pos:start="93:30" pos:end="93:31"><expr pos:start="93:30" pos:end="93:31"><name pos:start="93:30" pos:end="93:31">sc</name></expr></argument>, <argument pos:start="93:34" pos:end="93:36"><expr pos:start="93:34" pos:end="93:36"><name pos:start="93:34" pos:end="93:36">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:50"><expr pos:start="97:13" pos:end="97:49"><name pos:start="97:13" pos:end="97:32"><name pos:start="97:13" pos:end="97:15">cpu</name><operator pos:start="97:16" pos:end="97:17">-&gt;</operator><name pos:start="97:18" pos:end="97:32">exception_index</name></name> <operator pos:start="97:34" pos:end="97:34">=</operator> <name pos:start="97:36" pos:end="97:49">EXCP_INTERRUPT</name></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:28"><expr pos:start="99:13" pos:end="99:27"><operator pos:start="99:13" pos:end="99:13">*</operator><name pos:start="99:14" pos:end="99:20">last_tb</name> <operator pos:start="99:22" pos:end="99:22">=</operator> <name pos:start="99:24" pos:end="99:27">NULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:31"><expr pos:start="101:13" pos:end="101:30"><call pos:start="101:13" pos:end="101:30"><name pos:start="101:13" pos:end="101:25">cpu_loop_exit</name><argument_list pos:start="101:26" pos:end="101:30">(<argument pos:start="101:27" pos:end="101:29"><expr pos:start="101:27" pos:end="101:29"><name pos:start="101:27" pos:end="101:29">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="105:9" pos:end="108:0">break;</break>

<cpp:endif pos:start="107:1" pos:end="107:6">#<cpp:directive pos:start="107:2" pos:end="107:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block>

    <default pos:start="111:5" pos:end="111:12">default:</default>

        <break pos:start="113:9" pos:end="113:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
