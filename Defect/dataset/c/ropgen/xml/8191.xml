<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8191.c" pos:tabs="8"><function pos:start="1:1" pos:end="43:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">mxf_read_sequence</name><parameter_list pos:start="1:29" pos:end="1:79">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:40">MXFSequence</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:50">sequence</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:69"><decl pos:start="1:53" pos:end="1:69"><type pos:start="1:53" pos:end="1:69"><name pos:start="1:53" pos:end="1:65">ByteIOContext</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:69">pb</name></decl></parameter>, <parameter pos:start="1:72" pos:end="1:78"><decl pos:start="1:72" pos:end="1:78"><type pos:start="1:72" pos:end="1:78"><name pos:start="1:72" pos:end="1:74">int</name></type> <name pos:start="1:76" pos:end="1:78">tag</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="43:1">{<block_content pos:start="5:5" pos:end="41:13">

    <switch pos:start="5:5" pos:end="39:5">switch<condition pos:start="5:11" pos:end="5:15">(<expr pos:start="5:12" pos:end="5:14"><name pos:start="5:12" pos:end="5:14">tag</name></expr>)</condition> <block pos:start="5:17" pos:end="39:5">{<block_content pos:start="7:5" pos:end="37:14">

    <case pos:start="7:5" pos:end="7:16">case <expr pos:start="7:10" pos:end="7:15"><literal type="number" pos:start="7:10" pos:end="7:15">0x0202</literal></expr>:</case>

        <expr_stmt pos:start="9:9" pos:end="9:42"><expr pos:start="9:9" pos:end="9:41"><name pos:start="9:9" pos:end="9:26"><name pos:start="9:9" pos:end="9:16">sequence</name><operator pos:start="9:17" pos:end="9:18">-&gt;</operator><name pos:start="9:19" pos:end="9:26">duration</name></name> <operator pos:start="9:28" pos:end="9:28">=</operator> <call pos:start="9:30" pos:end="9:41"><name pos:start="9:30" pos:end="9:37">get_be64</name><argument_list pos:start="9:38" pos:end="9:41">(<argument pos:start="9:39" pos:end="9:40"><expr pos:start="9:39" pos:end="9:40"><name pos:start="9:39" pos:end="9:40">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="11:9" pos:end="11:14">break;</break>

    <case pos:start="13:5" pos:end="13:16">case <expr pos:start="13:10" pos:end="13:15"><literal type="number" pos:start="13:10" pos:end="13:15">0x0201</literal></expr>:</case>

        <expr_stmt pos:start="15:9" pos:end="15:57"><expr pos:start="15:9" pos:end="15:56"><call pos:start="15:9" pos:end="15:56"><name pos:start="15:9" pos:end="15:18">get_buffer</name><argument_list pos:start="15:19" pos:end="15:56">(<argument pos:start="15:20" pos:end="15:21"><expr pos:start="15:20" pos:end="15:21"><name pos:start="15:20" pos:end="15:21">pb</name></expr></argument>, <argument pos:start="15:24" pos:end="15:51"><expr pos:start="15:24" pos:end="15:51"><name pos:start="15:24" pos:end="15:51"><name pos:start="15:24" pos:end="15:31">sequence</name><operator pos:start="15:32" pos:end="15:33">-&gt;</operator><name pos:start="15:34" pos:end="15:51">data_definition_ul</name></name></expr></argument>, <argument pos:start="15:54" pos:end="15:55"><expr pos:start="15:54" pos:end="15:55"><literal type="number" pos:start="15:54" pos:end="15:55">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="17:9" pos:end="17:14">break;</break>

    <case pos:start="19:5" pos:end="19:16">case <expr pos:start="19:10" pos:end="19:15"><literal type="number" pos:start="19:10" pos:end="19:15">0x1001</literal></expr>:</case>

        <expr_stmt pos:start="21:9" pos:end="21:61"><expr pos:start="21:9" pos:end="21:60"><name pos:start="21:9" pos:end="21:45"><name pos:start="21:9" pos:end="21:16">sequence</name><operator pos:start="21:17" pos:end="21:18">-&gt;</operator><name pos:start="21:19" pos:end="21:45">structural_components_count</name></name> <operator pos:start="21:47" pos:end="21:47">=</operator> <call pos:start="21:49" pos:end="21:60"><name pos:start="21:49" pos:end="21:56">get_be32</name><argument_list pos:start="21:57" pos:end="21:60">(<argument pos:start="21:58" pos:end="21:59"><expr pos:start="21:58" pos:end="21:59"><name pos:start="21:58" pos:end="21:59">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="25:22"><if pos:start="23:9" pos:end="25:22">if <condition pos:start="23:12" pos:end="23:76">(<expr pos:start="23:13" pos:end="23:75"><name pos:start="23:13" pos:end="23:49"><name pos:start="23:13" pos:end="23:20">sequence</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:49">structural_components_count</name></name> <operator pos:start="23:51" pos:end="23:52">&gt;=</operator> <name pos:start="23:54" pos:end="23:61">UINT_MAX</name> <operator pos:start="23:63" pos:end="23:63">/</operator> <sizeof pos:start="23:65" pos:end="23:75">sizeof<argument_list pos:start="23:71" pos:end="23:75">(<argument pos:start="23:72" pos:end="23:74"><expr pos:start="23:72" pos:end="23:74"><name pos:start="23:72" pos:end="23:74">UID</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:22"><block_content pos:start="25:13" pos:end="25:22">

            <return pos:start="25:13" pos:end="25:22">return <expr pos:start="25:20" pos:end="25:21"><operator pos:start="25:20" pos:end="25:20">-</operator><literal type="number" pos:start="25:21" pos:end="25:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:110"><expr pos:start="27:9" pos:end="27:109"><name pos:start="27:9" pos:end="27:44"><name pos:start="27:9" pos:end="27:16">sequence</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:44">structural_components_refs</name></name> <operator pos:start="27:46" pos:end="27:46">=</operator> <call pos:start="27:48" pos:end="27:109"><name pos:start="27:48" pos:end="27:56">av_malloc</name><argument_list pos:start="27:57" pos:end="27:109">(<argument pos:start="27:58" pos:end="27:108"><expr pos:start="27:58" pos:end="27:108"><name pos:start="27:58" pos:end="27:94"><name pos:start="27:58" pos:end="27:65">sequence</name><operator pos:start="27:66" pos:end="27:67">-&gt;</operator><name pos:start="27:68" pos:end="27:94">structural_components_count</name></name> <operator pos:start="27:96" pos:end="27:96">*</operator> <sizeof pos:start="27:98" pos:end="27:108">sizeof<argument_list pos:start="27:104" pos:end="27:108">(<argument pos:start="27:105" pos:end="27:107"><expr pos:start="27:105" pos:end="27:107"><name pos:start="27:105" pos:end="27:107">UID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="31:22"><if pos:start="29:9" pos:end="31:22">if <condition pos:start="29:12" pos:end="29:50">(<expr pos:start="29:13" pos:end="29:49"><operator pos:start="29:13" pos:end="29:13">!</operator><name pos:start="29:14" pos:end="29:49"><name pos:start="29:14" pos:end="29:21">sequence</name><operator pos:start="29:22" pos:end="29:23">-&gt;</operator><name pos:start="29:24" pos:end="29:49">structural_components_refs</name></name></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:22"><block_content pos:start="31:13" pos:end="31:22">

            <return pos:start="31:13" pos:end="31:22">return <expr pos:start="31:20" pos:end="31:21"><operator pos:start="31:20" pos:end="31:20">-</operator><literal type="number" pos:start="31:21" pos:end="31:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:25"><expr pos:start="33:9" pos:end="33:24"><call pos:start="33:9" pos:end="33:24"><name pos:start="33:9" pos:end="33:17">url_fskip</name><argument_list pos:start="33:18" pos:end="33:24">(<argument pos:start="33:19" pos:end="33:20"><expr pos:start="33:19" pos:end="33:20"><name pos:start="33:19" pos:end="33:20">pb</name></expr></argument>, <argument pos:start="33:23" pos:end="33:23"><expr pos:start="33:23" pos:end="33:23"><literal type="number" pos:start="33:23" pos:end="33:23">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="33:27" pos:end="33:85">/* useless size of objects, always 16 according to specs */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:125"><expr pos:start="35:9" pos:end="35:124"><call pos:start="35:9" pos:end="35:124"><name pos:start="35:9" pos:end="35:18">get_buffer</name><argument_list pos:start="35:19" pos:end="35:124">(<argument pos:start="35:20" pos:end="35:21"><expr pos:start="35:20" pos:end="35:21"><name pos:start="35:20" pos:end="35:21">pb</name></expr></argument>, <argument pos:start="35:24" pos:end="35:70"><expr pos:start="35:24" pos:end="35:70"><operator pos:start="35:24" pos:end="35:24">(</operator><name pos:start="35:25" pos:end="35:31">uint8_t</name> <operator pos:start="35:33" pos:end="35:33">*</operator><operator pos:start="35:34" pos:end="35:34">)</operator><name pos:start="35:35" pos:end="35:70"><name pos:start="35:35" pos:end="35:42">sequence</name><operator pos:start="35:43" pos:end="35:44">-&gt;</operator><name pos:start="35:45" pos:end="35:70">structural_components_refs</name></name></expr></argument>, <argument pos:start="35:73" pos:end="35:123"><expr pos:start="35:73" pos:end="35:123"><name pos:start="35:73" pos:end="35:109"><name pos:start="35:73" pos:end="35:80">sequence</name><operator pos:start="35:81" pos:end="35:82">-&gt;</operator><name pos:start="35:83" pos:end="35:109">structural_components_count</name></name> <operator pos:start="35:111" pos:end="35:111">*</operator> <sizeof pos:start="35:113" pos:end="35:123">sizeof<argument_list pos:start="35:119" pos:end="35:123">(<argument pos:start="35:120" pos:end="35:122"><expr pos:start="35:120" pos:end="35:122"><name pos:start="35:120" pos:end="35:122">UID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="37:9" pos:end="37:14">break;</break>

    </block_content>}</block></switch>

    <return pos:start="41:5" pos:end="41:13">return <expr pos:start="41:12" pos:end="41:12"><literal type="number" pos:start="41:12" pos:end="41:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
