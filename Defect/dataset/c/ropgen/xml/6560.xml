<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6560.c" pos:tabs="8"><function pos:start="1:1" pos:end="185:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:41">protocol_client_auth_sasl_step</name><parameter_list pos:start="1:42" pos:end="1:82">(<parameter pos:start="1:43" pos:end="1:54"><decl pos:start="1:43" pos:end="1:54"><type pos:start="1:43" pos:end="1:54"><name pos:start="1:43" pos:end="1:50">VncState</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:54">vs</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:69"><decl pos:start="1:57" pos:end="1:69"><type pos:start="1:57" pos:end="1:69"><name pos:start="1:57" pos:end="1:63">uint8_t</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:69">data</name></decl></parameter>, <parameter pos:start="1:72" pos:end="1:81"><decl pos:start="1:72" pos:end="1:81"><type pos:start="1:72" pos:end="1:81"><name pos:start="1:72" pos:end="1:77">size_t</name></type> <name pos:start="1:79" pos:end="1:81">len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="185:1">{<block_content pos:start="5:5" pos:end="183:14">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:20">datalen</name> <init pos:start="5:22" pos:end="5:26">= <expr pos:start="5:24" pos:end="5:26"><name pos:start="5:24" pos:end="5:26">len</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">serverout</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:29">serveroutlen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:20">clientdata</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">NULL</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:61">/* NB, distinction of NULL vs "" is *critical* in SASL */</comment>

    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="27:5">if <condition pos:start="19:8" pos:end="19:16">(<expr pos:start="19:9" pos:end="19:15"><name pos:start="19:9" pos:end="19:15">datalen</name></expr>)</condition> <block pos:start="19:18" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:18">

        <expr_stmt pos:start="21:9" pos:end="21:33"><expr pos:start="21:9" pos:end="21:32"><name pos:start="21:9" pos:end="21:18">clientdata</name> <operator pos:start="21:20" pos:end="21:20">=</operator> <operator pos:start="21:22" pos:end="21:22">(</operator><name pos:start="21:23" pos:end="21:26">char</name><operator pos:start="21:27" pos:end="21:27">*</operator><operator pos:start="21:28" pos:end="21:28">)</operator><name pos:start="21:29" pos:end="21:32">data</name></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:37"><expr pos:start="23:9" pos:end="23:36"><name pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:18">clientdata</name><index pos:start="23:19" pos:end="23:29">[<expr pos:start="23:20" pos:end="23:28"><name pos:start="23:20" pos:end="23:26">datalen</name><operator pos:start="23:27" pos:end="23:27">-</operator><literal type="number" pos:start="23:28" pos:end="23:28">1</literal></expr>]</index></name> <operator pos:start="23:31" pos:end="23:31">=</operator> <literal type="char" pos:start="23:33" pos:end="23:36">'\0'</literal></expr>;</expr_stmt> <comment type="block" pos:start="23:39" pos:end="23:77">/* Wire includes '\0', but make sure */</comment>

        <expr_stmt pos:start="25:9" pos:end="25:18"><expr pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:15">datalen</name><operator pos:start="25:16" pos:end="25:17">--</operator></expr>;</expr_stmt> <comment type="block" pos:start="25:20" pos:end="25:71">/* Don't count NULL byte when passing to _start() */</comment>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="33:35"><expr pos:start="31:5" pos:end="33:34"><call pos:start="31:5" pos:end="33:34"><name pos:start="31:5" pos:end="31:13">VNC_DEBUG</name><argument_list pos:start="31:14" pos:end="33:34">(<argument pos:start="31:15" pos:end="31:52"><expr pos:start="31:15" pos:end="31:52"><literal type="string" pos:start="31:15" pos:end="31:52">"Step using SASL Data %p (%d bytes)\n"</literal></expr></argument>,

              <argument pos:start="33:15" pos:end="33:24"><expr pos:start="33:15" pos:end="33:24"><name pos:start="33:15" pos:end="33:24">clientdata</name></expr></argument>, <argument pos:start="33:27" pos:end="33:33"><expr pos:start="33:27" pos:end="33:33"><name pos:start="33:27" pos:end="33:33">datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="43:42"><expr pos:start="35:5" pos:end="43:41"><name pos:start="35:5" pos:end="35:7">err</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="43:41"><name pos:start="35:11" pos:end="35:26">sasl_server_step</name><argument_list pos:start="35:27" pos:end="43:41">(<argument pos:start="35:28" pos:end="35:40"><expr pos:start="35:28" pos:end="35:40"><name pos:start="35:28" pos:end="35:40"><name pos:start="35:28" pos:end="35:29">vs</name><operator pos:start="35:30" pos:end="35:31">-&gt;</operator><name pos:start="35:32" pos:end="35:35">sasl</name><operator pos:start="35:36" pos:end="35:36">.</operator><name pos:start="35:37" pos:end="35:40">conn</name></name></expr></argument>,

                           <argument pos:start="37:28" pos:end="37:37"><expr pos:start="37:28" pos:end="37:37"><name pos:start="37:28" pos:end="37:37">clientdata</name></expr></argument>,

                           <argument pos:start="39:28" pos:end="39:34"><expr pos:start="39:28" pos:end="39:34"><name pos:start="39:28" pos:end="39:34">datalen</name></expr></argument>,

                           <argument pos:start="41:28" pos:end="41:37"><expr pos:start="41:28" pos:end="41:37"><operator pos:start="41:28" pos:end="41:28">&amp;</operator><name pos:start="41:29" pos:end="41:37">serverout</name></expr></argument>,

                           <argument pos:start="43:28" pos:end="43:40"><expr pos:start="43:28" pos:end="43:40"><operator pos:start="43:28" pos:end="43:28">&amp;</operator><name pos:start="43:29" pos:end="43:40">serveroutlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="59:5"><if pos:start="45:5" pos:end="59:5">if <condition pos:start="45:8" pos:end="47:29">(<expr pos:start="45:9" pos:end="47:28"><name pos:start="45:9" pos:end="45:11">err</name> <operator pos:start="45:13" pos:end="45:14">!=</operator> <name pos:start="45:16" pos:end="45:22">SASL_OK</name> <operator pos:start="45:24" pos:end="45:25">&amp;&amp;</operator>

        <name pos:start="47:9" pos:end="47:11">err</name> <operator pos:start="47:13" pos:end="47:14">!=</operator> <name pos:start="47:16" pos:end="47:28">SASL_CONTINUE</name></expr>)</condition> <block pos:start="47:31" pos:end="59:5">{<block_content pos:start="49:9" pos:end="57:23">

        <expr_stmt pos:start="49:9" pos:end="51:54"><expr pos:start="49:9" pos:end="51:53"><call pos:start="49:9" pos:end="51:53"><name pos:start="49:9" pos:end="49:17">VNC_DEBUG</name><argument_list pos:start="49:18" pos:end="51:53">(<argument pos:start="49:19" pos:end="49:46"><expr pos:start="49:19" pos:end="49:46"><literal type="string" pos:start="49:19" pos:end="49:46">"sasl step failed %d (%s)\n"</literal></expr></argument>,

                  <argument pos:start="51:19" pos:end="51:21"><expr pos:start="51:19" pos:end="51:21"><name pos:start="51:19" pos:end="51:21">err</name></expr></argument>, <argument pos:start="51:24" pos:end="51:52"><expr pos:start="51:24" pos:end="51:52"><call pos:start="51:24" pos:end="51:52"><name pos:start="51:24" pos:end="51:37">sasl_errdetail</name><argument_list pos:start="51:38" pos:end="51:52">(<argument pos:start="51:39" pos:end="51:51"><expr pos:start="51:39" pos:end="51:51"><name pos:start="51:39" pos:end="51:51"><name pos:start="51:39" pos:end="51:40">vs</name><operator pos:start="51:41" pos:end="51:42">-&gt;</operator><name pos:start="51:43" pos:end="51:46">sasl</name><operator pos:start="51:47" pos:end="51:47">.</operator><name pos:start="51:48" pos:end="51:51">conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:37"><expr pos:start="53:9" pos:end="53:36"><call pos:start="53:9" pos:end="53:36"><name pos:start="53:9" pos:end="53:20">sasl_dispose</name><argument_list pos:start="53:21" pos:end="53:36">(<argument pos:start="53:22" pos:end="53:35"><expr pos:start="53:22" pos:end="53:35"><operator pos:start="53:22" pos:end="53:22">&amp;</operator><name pos:start="53:23" pos:end="53:35"><name pos:start="53:23" pos:end="53:24">vs</name><operator pos:start="53:25" pos:end="53:26">-&gt;</operator><name pos:start="53:27" pos:end="53:30">sasl</name><operator pos:start="53:31" pos:end="53:31">.</operator><name pos:start="53:32" pos:end="53:35">conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:29"><expr pos:start="55:9" pos:end="55:28"><name pos:start="55:9" pos:end="55:21"><name pos:start="55:9" pos:end="55:10">vs</name><operator pos:start="55:11" pos:end="55:12">-&gt;</operator><name pos:start="55:13" pos:end="55:16">sasl</name><operator pos:start="55:17" pos:end="55:17">.</operator><name pos:start="55:18" pos:end="55:21">conn</name></name> <operator pos:start="55:23" pos:end="55:23">=</operator> <name pos:start="55:25" pos:end="55:28">NULL</name></expr>;</expr_stmt>

        <goto pos:start="57:9" pos:end="57:23">goto <name pos:start="57:14" pos:end="57:22">authabort</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="63:5" pos:end="75:5"><if pos:start="63:5" pos:end="75:5">if <condition pos:start="63:8" pos:end="63:41">(<expr pos:start="63:9" pos:end="63:40"><name pos:start="63:9" pos:end="63:20">serveroutlen</name> <operator pos:start="63:22" pos:end="63:22">&gt;</operator> <name pos:start="63:24" pos:end="63:40">SASL_DATA_MAX_LEN</name></expr>)</condition> <block pos:start="63:43" pos:end="75:5">{<block_content pos:start="65:9" pos:end="73:23">

        <expr_stmt pos:start="65:9" pos:end="67:32"><expr pos:start="65:9" pos:end="67:31"><call pos:start="65:9" pos:end="67:31"><name pos:start="65:9" pos:end="65:17">VNC_DEBUG</name><argument_list pos:start="65:18" pos:end="67:31">(<argument pos:start="65:19" pos:end="65:54"><expr pos:start="65:19" pos:end="65:54"><literal type="string" pos:start="65:19" pos:end="65:54">"sasl step reply data too long %d\n"</literal></expr></argument>,

                  <argument pos:start="67:19" pos:end="67:30"><expr pos:start="67:19" pos:end="67:30"><name pos:start="67:19" pos:end="67:30">serveroutlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:37"><expr pos:start="69:9" pos:end="69:36"><call pos:start="69:9" pos:end="69:36"><name pos:start="69:9" pos:end="69:20">sasl_dispose</name><argument_list pos:start="69:21" pos:end="69:36">(<argument pos:start="69:22" pos:end="69:35"><expr pos:start="69:22" pos:end="69:35"><operator pos:start="69:22" pos:end="69:22">&amp;</operator><name pos:start="69:23" pos:end="69:35"><name pos:start="69:23" pos:end="69:24">vs</name><operator pos:start="69:25" pos:end="69:26">-&gt;</operator><name pos:start="69:27" pos:end="69:30">sasl</name><operator pos:start="69:31" pos:end="69:31">.</operator><name pos:start="69:32" pos:end="69:35">conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:29"><expr pos:start="71:9" pos:end="71:28"><name pos:start="71:9" pos:end="71:21"><name pos:start="71:9" pos:end="71:10">vs</name><operator pos:start="71:11" pos:end="71:12">-&gt;</operator><name pos:start="71:13" pos:end="71:16">sasl</name><operator pos:start="71:17" pos:end="71:17">.</operator><name pos:start="71:18" pos:end="71:21">conn</name></name> <operator pos:start="71:23" pos:end="71:23">=</operator> <name pos:start="71:25" pos:end="71:28">NULL</name></expr>;</expr_stmt>

        <goto pos:start="73:9" pos:end="73:23">goto <name pos:start="73:14" pos:end="73:22">authabort</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="81:47"><expr pos:start="79:5" pos:end="81:46"><call pos:start="79:5" pos:end="81:46"><name pos:start="79:5" pos:end="79:13">VNC_DEBUG</name><argument_list pos:start="79:14" pos:end="81:46">(<argument pos:start="79:15" pos:end="79:52"><expr pos:start="79:15" pos:end="79:52"><literal type="string" pos:start="79:15" pos:end="79:52">"SASL return data %d bytes, nil; %d\n"</literal></expr></argument>,

              <argument pos:start="81:15" pos:end="81:26"><expr pos:start="81:15" pos:end="81:26"><name pos:start="81:15" pos:end="81:26">serveroutlen</name></expr></argument>, <argument pos:start="81:29" pos:end="81:45"><expr pos:start="81:29" pos:end="81:45"><ternary pos:start="81:29" pos:end="81:45"><condition pos:start="81:29" pos:end="81:39"><expr pos:start="81:29" pos:end="81:37"><name pos:start="81:29" pos:end="81:37">serverout</name></expr> ?</condition><then pos:start="81:41" pos:end="81:41"> <expr pos:start="81:41" pos:end="81:41"><literal type="number" pos:start="81:41" pos:end="81:41">0</literal></expr> </then><else pos:start="81:43" pos:end="81:45">: <expr pos:start="81:45" pos:end="81:45"><literal type="number" pos:start="81:45" pos:end="81:45">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="85:5" pos:end="95:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:21">(<expr pos:start="85:9" pos:end="85:20"><name pos:start="85:9" pos:end="85:20">serveroutlen</name></expr>)</condition> <block pos:start="85:23" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:51">

        <expr_stmt pos:start="87:9" pos:end="87:44"><expr pos:start="87:9" pos:end="87:43"><call pos:start="87:9" pos:end="87:43"><name pos:start="87:9" pos:end="87:21">vnc_write_u32</name><argument_list pos:start="87:22" pos:end="87:43">(<argument pos:start="87:23" pos:end="87:24"><expr pos:start="87:23" pos:end="87:24"><name pos:start="87:23" pos:end="87:24">vs</name></expr></argument>, <argument pos:start="87:27" pos:end="87:42"><expr pos:start="87:27" pos:end="87:42"><name pos:start="87:27" pos:end="87:38">serveroutlen</name> <operator pos:start="87:40" pos:end="87:40">+</operator> <literal type="number" pos:start="87:42" pos:end="87:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:51"><expr pos:start="89:9" pos:end="89:50"><call pos:start="89:9" pos:end="89:50"><name pos:start="89:9" pos:end="89:17">vnc_write</name><argument_list pos:start="89:18" pos:end="89:50">(<argument pos:start="89:19" pos:end="89:20"><expr pos:start="89:19" pos:end="89:20"><name pos:start="89:19" pos:end="89:20">vs</name></expr></argument>, <argument pos:start="89:23" pos:end="89:31"><expr pos:start="89:23" pos:end="89:31"><name pos:start="89:23" pos:end="89:31">serverout</name></expr></argument>, <argument pos:start="89:34" pos:end="89:49"><expr pos:start="89:34" pos:end="89:49"><name pos:start="89:34" pos:end="89:45">serveroutlen</name> <operator pos:start="89:47" pos:end="89:47">+</operator> <literal type="number" pos:start="89:49" pos:end="89:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="91:7" pos:end="95:5">else <block pos:start="91:12" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:29">

        <expr_stmt pos:start="93:9" pos:end="93:29"><expr pos:start="93:9" pos:end="93:28"><call pos:start="93:9" pos:end="93:28"><name pos:start="93:9" pos:end="93:21">vnc_write_u32</name><argument_list pos:start="93:22" pos:end="93:28">(<argument pos:start="93:23" pos:end="93:24"><expr pos:start="93:23" pos:end="93:24"><name pos:start="93:23" pos:end="93:24">vs</name></expr></argument>, <argument pos:start="93:27" pos:end="93:27"><expr pos:start="93:27" pos:end="93:27"><literal type="number" pos:start="93:27" pos:end="93:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:34">/* Whether auth is complete */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:51"><expr pos:start="101:5" pos:end="101:50"><call pos:start="101:5" pos:end="101:50"><name pos:start="101:5" pos:end="101:16">vnc_write_u8</name><argument_list pos:start="101:17" pos:end="101:50">(<argument pos:start="101:18" pos:end="101:19"><expr pos:start="101:18" pos:end="101:19"><name pos:start="101:18" pos:end="101:19">vs</name></expr></argument>, <argument pos:start="101:22" pos:end="101:49"><expr pos:start="101:22" pos:end="101:49"><ternary pos:start="101:22" pos:end="101:49"><condition pos:start="101:22" pos:end="101:43"><expr pos:start="101:22" pos:end="101:41"><name pos:start="101:22" pos:end="101:24">err</name> <operator pos:start="101:26" pos:end="101:27">==</operator> <name pos:start="101:29" pos:end="101:41">SASL_CONTINUE</name></expr> ?</condition><then pos:start="101:45" pos:end="101:45"> <expr pos:start="101:45" pos:end="101:45"><literal type="number" pos:start="101:45" pos:end="101:45">0</literal></expr> </then><else pos:start="101:47" pos:end="101:49">: <expr pos:start="101:49" pos:end="101:49"><literal type="number" pos:start="101:49" pos:end="101:49">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="105:5" pos:end="155:5"><if pos:start="105:5" pos:end="113:5">if <condition pos:start="105:8" pos:end="105:29">(<expr pos:start="105:9" pos:end="105:28"><name pos:start="105:9" pos:end="105:11">err</name> <operator pos:start="105:13" pos:end="105:14">==</operator> <name pos:start="105:16" pos:end="105:28">SASL_CONTINUE</name></expr>)</condition> <block pos:start="105:31" pos:end="113:5">{<block_content pos:start="107:9" pos:end="111:65">

        <expr_stmt pos:start="107:9" pos:end="107:58"><expr pos:start="107:9" pos:end="107:57"><call pos:start="107:9" pos:end="107:57"><name pos:start="107:9" pos:end="107:17">VNC_DEBUG</name><argument_list pos:start="107:18" pos:end="107:57">(<argument pos:start="107:19" pos:end="107:22"><expr pos:start="107:19" pos:end="107:22"><literal type="string" pos:start="107:19" pos:end="107:22">"%s"</literal></expr></argument>, <argument pos:start="107:25" pos:end="107:56"><expr pos:start="107:25" pos:end="107:56"><literal type="string" pos:start="107:25" pos:end="107:56">"Authentication must continue\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="109:9" pos:end="109:34">/* Wait for step length */</comment>

        <expr_stmt pos:start="111:9" pos:end="111:65"><expr pos:start="111:9" pos:end="111:64"><call pos:start="111:9" pos:end="111:64"><name pos:start="111:9" pos:end="111:21">vnc_read_when</name><argument_list pos:start="111:22" pos:end="111:64">(<argument pos:start="111:23" pos:end="111:24"><expr pos:start="111:23" pos:end="111:24"><name pos:start="111:23" pos:end="111:24">vs</name></expr></argument>, <argument pos:start="111:27" pos:end="111:60"><expr pos:start="111:27" pos:end="111:60"><name pos:start="111:27" pos:end="111:60">protocol_client_auth_sasl_step_len</name></expr></argument>, <argument pos:start="111:63" pos:end="111:63"><expr pos:start="111:63" pos:end="111:63"><literal type="number" pos:start="111:63" pos:end="111:63">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="113:7" pos:end="155:5">else <block pos:start="113:12" pos:end="155:5">{<block_content pos:start="115:9" pos:end="153:30">

        <if_stmt pos:start="115:9" pos:end="121:9"><if pos:start="115:9" pos:end="121:9">if <condition pos:start="115:12" pos:end="115:41">(<expr pos:start="115:13" pos:end="115:40"><operator pos:start="115:13" pos:end="115:13">!</operator><call pos:start="115:14" pos:end="115:40"><name pos:start="115:14" pos:end="115:36">vnc_auth_sasl_check_ssf</name><argument_list pos:start="115:37" pos:end="115:40">(<argument pos:start="115:38" pos:end="115:39"><expr pos:start="115:38" pos:end="115:39"><name pos:start="115:38" pos:end="115:39">vs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:43" pos:end="121:9">{<block_content pos:start="117:13" pos:end="119:28">

            <expr_stmt pos:start="117:13" pos:end="117:76"><expr pos:start="117:13" pos:end="117:75"><call pos:start="117:13" pos:end="117:75"><name pos:start="117:13" pos:end="117:21">VNC_DEBUG</name><argument_list pos:start="117:22" pos:end="117:75">(<argument pos:start="117:23" pos:end="117:65"><expr pos:start="117:23" pos:end="117:65"><literal type="string" pos:start="117:23" pos:end="117:65">"Authentication rejected for weak SSF %p\n"</literal></expr></argument>, <argument pos:start="117:68" pos:end="117:74"><expr pos:start="117:68" pos:end="117:74"><name pos:start="117:68" pos:end="117:74"><name pos:start="117:68" pos:end="117:69">vs</name><operator pos:start="117:70" pos:end="117:71">-&gt;</operator><name pos:start="117:72" pos:end="117:74">ioc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="119:13" pos:end="119:28">goto <name pos:start="119:18" pos:end="119:27">authreject</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="125:9" pos:end="125:42">/* Check username whitelist ACL */</comment>

        <if_stmt pos:start="127:9" pos:end="133:9"><if pos:start="127:9" pos:end="133:9">if <condition pos:start="127:12" pos:end="127:47">(<expr pos:start="127:13" pos:end="127:46"><call pos:start="127:13" pos:end="127:42"><name pos:start="127:13" pos:end="127:38">vnc_auth_sasl_check_access</name><argument_list pos:start="127:39" pos:end="127:42">(<argument pos:start="127:40" pos:end="127:41"><expr pos:start="127:40" pos:end="127:41"><name pos:start="127:40" pos:end="127:41">vs</name></expr></argument>)</argument_list></call> <operator pos:start="127:44" pos:end="127:44">&lt;</operator> <literal type="number" pos:start="127:46" pos:end="127:46">0</literal></expr>)</condition> <block pos:start="127:49" pos:end="133:9">{<block_content pos:start="129:13" pos:end="131:28">

            <expr_stmt pos:start="129:13" pos:end="129:71"><expr pos:start="129:13" pos:end="129:70"><call pos:start="129:13" pos:end="129:70"><name pos:start="129:13" pos:end="129:21">VNC_DEBUG</name><argument_list pos:start="129:22" pos:end="129:70">(<argument pos:start="129:23" pos:end="129:60"><expr pos:start="129:23" pos:end="129:60"><literal type="string" pos:start="129:23" pos:end="129:60">"Authentication rejected for ACL %p\n"</literal></expr></argument>, <argument pos:start="129:63" pos:end="129:69"><expr pos:start="129:63" pos:end="129:69"><name pos:start="129:63" pos:end="129:69"><name pos:start="129:63" pos:end="129:64">vs</name><operator pos:start="129:65" pos:end="129:66">-&gt;</operator><name pos:start="129:67" pos:end="129:69">ioc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="131:13" pos:end="131:28">goto <name pos:start="131:18" pos:end="131:27">authreject</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="137:9" pos:end="137:61"><expr pos:start="137:9" pos:end="137:60"><call pos:start="137:9" pos:end="137:60"><name pos:start="137:9" pos:end="137:17">VNC_DEBUG</name><argument_list pos:start="137:18" pos:end="137:60">(<argument pos:start="137:19" pos:end="137:50"><expr pos:start="137:19" pos:end="137:50"><literal type="string" pos:start="137:19" pos:end="137:50">"Authentication successful %p\n"</literal></expr></argument>, <argument pos:start="137:53" pos:end="137:59"><expr pos:start="137:53" pos:end="137:59"><name pos:start="137:53" pos:end="137:59"><name pos:start="137:53" pos:end="137:54">vs</name><operator pos:start="137:55" pos:end="137:56">-&gt;</operator><name pos:start="137:57" pos:end="137:59">ioc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:29"><expr pos:start="139:9" pos:end="139:28"><call pos:start="139:9" pos:end="139:28"><name pos:start="139:9" pos:end="139:21">vnc_write_u32</name><argument_list pos:start="139:22" pos:end="139:28">(<argument pos:start="139:23" pos:end="139:24"><expr pos:start="139:23" pos:end="139:24"><name pos:start="139:23" pos:end="139:24">vs</name></expr></argument>, <argument pos:start="139:27" pos:end="139:27"><expr pos:start="139:27" pos:end="139:27"><literal type="number" pos:start="139:27" pos:end="139:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="139:31" pos:end="139:47">/* Accept auth */</comment>

        <comment type="block" pos:start="141:9" pos:end="147:11">/*

         * Delay writing in SSF encoded mode until pending output

         * buffer is written

         */</comment>

        <if_stmt pos:start="149:9" pos:end="151:54"><if pos:start="149:9" pos:end="151:54">if <condition pos:start="149:12" pos:end="149:28">(<expr pos:start="149:13" pos:end="149:27"><name pos:start="149:13" pos:end="149:27"><name pos:start="149:13" pos:end="149:14">vs</name><operator pos:start="149:15" pos:end="149:16">-&gt;</operator><name pos:start="149:17" pos:end="149:20">sasl</name><operator pos:start="149:21" pos:end="149:21">.</operator><name pos:start="149:22" pos:end="149:27">runSSF</name></name></expr>)</condition><block type="pseudo" pos:start="151:13" pos:end="151:54"><block_content pos:start="151:13" pos:end="151:54">

            <expr_stmt pos:start="151:13" pos:end="151:54"><expr pos:start="151:13" pos:end="151:53"><name pos:start="151:13" pos:end="151:33"><name pos:start="151:13" pos:end="151:14">vs</name><operator pos:start="151:15" pos:end="151:16">-&gt;</operator><name pos:start="151:17" pos:end="151:20">sasl</name><operator pos:start="151:21" pos:end="151:21">.</operator><name pos:start="151:22" pos:end="151:33">waitWriteSSF</name></name> <operator pos:start="151:35" pos:end="151:35">=</operator> <name pos:start="151:37" pos:end="151:53"><name pos:start="151:37" pos:end="151:38">vs</name><operator pos:start="151:39" pos:end="151:40">-&gt;</operator><name pos:start="151:41" pos:end="151:46">output</name><operator pos:start="151:47" pos:end="151:47">.</operator><name pos:start="151:48" pos:end="151:53">offset</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:30"><expr pos:start="153:9" pos:end="153:29"><call pos:start="153:9" pos:end="153:29"><name pos:start="153:9" pos:end="153:25">start_client_init</name><argument_list pos:start="153:26" pos:end="153:29">(<argument pos:start="153:27" pos:end="153:28"><expr pos:start="153:27" pos:end="153:28"><name pos:start="153:27" pos:end="153:28">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="159:5" pos:end="159:13">return <expr pos:start="159:12" pos:end="159:12"><literal type="number" pos:start="159:12" pos:end="159:12">0</literal></expr>;</return>



 <label pos:start="163:2" pos:end="163:12"><name pos:start="163:2" pos:end="163:11">authreject</name>:</label>

    <expr_stmt pos:start="165:5" pos:end="165:25"><expr pos:start="165:5" pos:end="165:24"><call pos:start="165:5" pos:end="165:24"><name pos:start="165:5" pos:end="165:17">vnc_write_u32</name><argument_list pos:start="165:18" pos:end="165:24">(<argument pos:start="165:19" pos:end="165:20"><expr pos:start="165:19" pos:end="165:20"><name pos:start="165:19" pos:end="165:20">vs</name></expr></argument>, <argument pos:start="165:23" pos:end="165:23"><expr pos:start="165:23" pos:end="165:23"><literal type="number" pos:start="165:23" pos:end="165:23">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="165:27" pos:end="165:43">/* Reject auth */</comment>

    <expr_stmt pos:start="167:5" pos:end="167:55"><expr pos:start="167:5" pos:end="167:54"><call pos:start="167:5" pos:end="167:54"><name pos:start="167:5" pos:end="167:17">vnc_write_u32</name><argument_list pos:start="167:18" pos:end="167:54">(<argument pos:start="167:19" pos:end="167:20"><expr pos:start="167:19" pos:end="167:20"><name pos:start="167:19" pos:end="167:20">vs</name></expr></argument>, <argument pos:start="167:23" pos:end="167:53"><expr pos:start="167:23" pos:end="167:53"><sizeof pos:start="167:23" pos:end="167:53">sizeof<argument_list pos:start="167:29" pos:end="167:53">(<argument pos:start="167:30" pos:end="167:52"><expr pos:start="167:30" pos:end="167:52"><literal type="string" pos:start="167:30" pos:end="167:52">"Authentication failed"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:76"><expr pos:start="169:5" pos:end="169:75"><call pos:start="169:5" pos:end="169:75"><name pos:start="169:5" pos:end="169:13">vnc_write</name><argument_list pos:start="169:14" pos:end="169:75">(<argument pos:start="169:15" pos:end="169:16"><expr pos:start="169:15" pos:end="169:16"><name pos:start="169:15" pos:end="169:16">vs</name></expr></argument>, <argument pos:start="169:19" pos:end="169:41"><expr pos:start="169:19" pos:end="169:41"><literal type="string" pos:start="169:19" pos:end="169:41">"Authentication failed"</literal></expr></argument>, <argument pos:start="169:44" pos:end="169:74"><expr pos:start="169:44" pos:end="169:74"><sizeof pos:start="169:44" pos:end="169:74">sizeof<argument_list pos:start="169:50" pos:end="169:74">(<argument pos:start="169:51" pos:end="169:73"><expr pos:start="169:51" pos:end="169:73"><literal type="string" pos:start="169:51" pos:end="169:73">"Authentication failed"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:18"><expr pos:start="171:5" pos:end="171:17"><call pos:start="171:5" pos:end="171:17"><name pos:start="171:5" pos:end="171:13">vnc_flush</name><argument_list pos:start="171:14" pos:end="171:17">(<argument pos:start="171:15" pos:end="171:16"><expr pos:start="171:15" pos:end="171:16"><name pos:start="171:15" pos:end="171:16">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:25"><expr pos:start="173:5" pos:end="173:24"><call pos:start="173:5" pos:end="173:24"><name pos:start="173:5" pos:end="173:20">vnc_client_error</name><argument_list pos:start="173:21" pos:end="173:24">(<argument pos:start="173:22" pos:end="173:23"><expr pos:start="173:22" pos:end="173:23"><name pos:start="173:22" pos:end="173:23">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="175:5" pos:end="175:14">return <expr pos:start="175:12" pos:end="175:13"><operator pos:start="175:12" pos:end="175:12">-</operator><literal type="number" pos:start="175:13" pos:end="175:13">1</literal></expr>;</return>



 <label pos:start="179:2" pos:end="179:11"><name pos:start="179:2" pos:end="179:10">authabort</name>:</label>

    <expr_stmt pos:start="181:5" pos:end="181:25"><expr pos:start="181:5" pos:end="181:24"><call pos:start="181:5" pos:end="181:24"><name pos:start="181:5" pos:end="181:20">vnc_client_error</name><argument_list pos:start="181:21" pos:end="181:24">(<argument pos:start="181:22" pos:end="181:23"><expr pos:start="181:22" pos:end="181:23"><name pos:start="181:22" pos:end="181:23">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="183:5" pos:end="183:14">return <expr pos:start="183:12" pos:end="183:13"><operator pos:start="183:12" pos:end="183:12">-</operator><literal type="number" pos:start="183:13" pos:end="183:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
