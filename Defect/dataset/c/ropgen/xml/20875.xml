<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20875.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:30">nbd_client_thread</name><parameter_list pos:start="1:31" pos:end="1:41">(<parameter pos:start="1:32" pos:end="1:40"><decl pos:start="1:32" pos:end="1:40"><type pos:start="1:32" pos:end="1:37"><name pos:start="1:32" pos:end="1:35">void</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="111:1">{<block_content pos:start="5:5" pos:end="109:33">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">char</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:16">device</name> <init pos:start="5:18" pos:end="5:22">= <expr pos:start="5:20" pos:end="5:22"><name pos:start="5:20" pos:end="5:22">arg</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:9"><name pos:start="7:5" pos:end="7:9">off_t</name></type> <name pos:start="7:11" pos:end="7:14">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:20">blocksize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:21">nbdflags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:10"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:10">fd</name></decl>, <decl pos:start="13:13" pos:end="13:16"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:13" pos:end="13:16">sock</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:32"><decl pos:start="17:5" pos:end="17:31"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:13">pthread_t</name></type> <name pos:start="17:15" pos:end="17:31">show_parts_thread</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:42"><expr pos:start="21:5" pos:end="21:41"><name pos:start="21:5" pos:end="21:8">sock</name> <operator pos:start="21:10" pos:end="21:10">=</operator> <call pos:start="21:12" pos:end="21:41"><name pos:start="21:12" pos:end="21:31">unix_socket_outgoing</name><argument_list pos:start="21:32" pos:end="21:41">(<argument pos:start="21:33" pos:end="21:40"><expr pos:start="21:33" pos:end="21:40"><name pos:start="21:33" pos:end="21:40">sockpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:17">(<expr pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:12">sock</name> <operator pos:start="23:14" pos:end="23:14">&lt;</operator> <literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr>)</condition> <block pos:start="23:19" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:17">

        <goto pos:start="25:9" pos:end="25:17">goto <name pos:start="25:14" pos:end="25:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="33:51"><expr pos:start="31:5" pos:end="33:50"><name pos:start="31:5" pos:end="31:7">ret</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="33:50"><name pos:start="31:11" pos:end="31:31">nbd_receive_negotiate</name><argument_list pos:start="31:32" pos:end="33:50">(<argument pos:start="31:33" pos:end="31:36"><expr pos:start="31:33" pos:end="31:36"><name pos:start="31:33" pos:end="31:36">sock</name></expr></argument>, <argument pos:start="31:39" pos:end="31:42"><expr pos:start="31:39" pos:end="31:42"><name pos:start="31:39" pos:end="31:42">NULL</name></expr></argument>, <argument pos:start="31:45" pos:end="31:53"><expr pos:start="31:45" pos:end="31:53"><operator pos:start="31:45" pos:end="31:45">&amp;</operator><name pos:start="31:46" pos:end="31:53">nbdflags</name></expr></argument>,

                                <argument pos:start="33:33" pos:end="33:37"><expr pos:start="33:33" pos:end="33:37"><operator pos:start="33:33" pos:end="33:33">&amp;</operator><name pos:start="33:34" pos:end="33:37">size</name></expr></argument>, <argument pos:start="33:40" pos:end="33:49"><expr pos:start="33:40" pos:end="33:49"><operator pos:start="33:40" pos:end="33:40">&amp;</operator><name pos:start="33:41" pos:end="33:49">blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:16">(<expr pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">&lt;</operator> <literal type="number" pos:start="35:15" pos:end="35:15">0</literal></expr>)</condition> <block pos:start="35:18" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:17">

        <goto pos:start="37:9" pos:end="37:17">goto <name pos:start="37:14" pos:end="37:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:30"><expr pos:start="43:5" pos:end="43:29"><name pos:start="43:5" pos:end="43:6">fd</name> <operator pos:start="43:8" pos:end="43:8">=</operator> <call pos:start="43:10" pos:end="43:29"><name pos:start="43:10" pos:end="43:13">open</name><argument_list pos:start="43:14" pos:end="43:29">(<argument pos:start="43:15" pos:end="43:20"><expr pos:start="43:15" pos:end="43:20"><name pos:start="43:15" pos:end="43:20">device</name></expr></argument>, <argument pos:start="43:23" pos:end="43:28"><expr pos:start="43:23" pos:end="43:28"><name pos:start="43:23" pos:end="43:28">O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="53:5"><if pos:start="45:5" pos:end="53:5">if <condition pos:start="45:8" pos:end="45:15">(<expr pos:start="45:9" pos:end="45:14"><name pos:start="45:9" pos:end="45:10">fd</name> <operator pos:start="45:12" pos:end="45:12">&lt;</operator> <literal type="number" pos:start="45:14" pos:end="45:14">0</literal></expr>)</condition> <block pos:start="45:17" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:17">

        <comment type="block" pos:start="47:9" pos:end="47:51">/* Linux-only, we can use %m in printf.  */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:57"><expr pos:start="49:9" pos:end="49:56"><call pos:start="49:9" pos:end="49:56"><name pos:start="49:9" pos:end="49:15">fprintf</name><argument_list pos:start="49:16" pos:end="49:56">(<argument pos:start="49:17" pos:end="49:22"><expr pos:start="49:17" pos:end="49:22"><name pos:start="49:17" pos:end="49:22">stderr</name></expr></argument>, <argument pos:start="49:25" pos:end="49:47"><expr pos:start="49:25" pos:end="49:47"><literal type="string" pos:start="49:25" pos:end="49:47">"Failed to open %s: %m"</literal></expr></argument>, <argument pos:start="49:50" pos:end="49:55"><expr pos:start="49:50" pos:end="49:55"><name pos:start="49:50" pos:end="49:55">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="51:9" pos:end="51:17">goto <name pos:start="51:14" pos:end="51:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:56"><expr pos:start="57:5" pos:end="57:55"><name pos:start="57:5" pos:end="57:7">ret</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <call pos:start="57:11" pos:end="57:55"><name pos:start="57:11" pos:end="57:18">nbd_init</name><argument_list pos:start="57:19" pos:end="57:55">(<argument pos:start="57:20" pos:end="57:21"><expr pos:start="57:20" pos:end="57:21"><name pos:start="57:20" pos:end="57:21">fd</name></expr></argument>, <argument pos:start="57:24" pos:end="57:27"><expr pos:start="57:24" pos:end="57:27"><name pos:start="57:24" pos:end="57:27">sock</name></expr></argument>, <argument pos:start="57:30" pos:end="57:37"><expr pos:start="57:30" pos:end="57:37"><name pos:start="57:30" pos:end="57:37">nbdflags</name></expr></argument>, <argument pos:start="57:40" pos:end="57:43"><expr pos:start="57:40" pos:end="57:43"><name pos:start="57:40" pos:end="57:43">size</name></expr></argument>, <argument pos:start="57:46" pos:end="57:54"><expr pos:start="57:46" pos:end="57:54"><name pos:start="57:46" pos:end="57:54">blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:16">(<expr pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">&lt;</operator> <literal type="number" pos:start="59:15" pos:end="59:15">0</literal></expr>)</condition> <block pos:start="59:18" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:17">

        <goto pos:start="61:9" pos:end="61:17">goto <name pos:start="61:14" pos:end="61:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:32">/* update partition table */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:65"><expr pos:start="69:5" pos:end="69:64"><call pos:start="69:5" pos:end="69:64"><name pos:start="69:5" pos:end="69:18">pthread_create</name><argument_list pos:start="69:19" pos:end="69:64">(<argument pos:start="69:20" pos:end="69:37"><expr pos:start="69:20" pos:end="69:37"><operator pos:start="69:20" pos:end="69:20">&amp;</operator><name pos:start="69:21" pos:end="69:37">show_parts_thread</name></expr></argument>, <argument pos:start="69:40" pos:end="69:43"><expr pos:start="69:40" pos:end="69:43"><name pos:start="69:40" pos:end="69:43">NULL</name></expr></argument>, <argument pos:start="69:46" pos:end="69:55"><expr pos:start="69:46" pos:end="69:55"><name pos:start="69:46" pos:end="69:55">show_parts</name></expr></argument>, <argument pos:start="69:58" pos:end="69:63"><expr pos:start="69:58" pos:end="69:63"><name pos:start="69:58" pos:end="69:63">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="73:5" pos:end="85:5"><if pos:start="73:5" pos:end="79:5">if <condition pos:start="73:8" pos:end="73:16">(<expr pos:start="73:9" pos:end="73:15"><name pos:start="73:9" pos:end="73:15">verbose</name></expr>)</condition> <block pos:start="73:18" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:33">

        <expr_stmt pos:start="75:9" pos:end="77:33"><expr pos:start="75:9" pos:end="77:32"><call pos:start="75:9" pos:end="77:32"><name pos:start="75:9" pos:end="75:15">fprintf</name><argument_list pos:start="75:16" pos:end="77:32">(<argument pos:start="75:17" pos:end="75:22"><expr pos:start="75:17" pos:end="75:22"><name pos:start="75:17" pos:end="75:22">stderr</name></expr></argument>, <argument pos:start="75:25" pos:end="75:64"><expr pos:start="75:25" pos:end="75:64"><literal type="string" pos:start="75:25" pos:end="75:64">"NBD device %s is now connected to %s\n"</literal></expr></argument>,

                <argument pos:start="77:17" pos:end="77:22"><expr pos:start="77:17" pos:end="77:22"><name pos:start="77:17" pos:end="77:22">device</name></expr></argument>, <argument pos:start="77:25" pos:end="77:31"><expr pos:start="77:25" pos:end="77:31"><name pos:start="77:25" pos:end="77:31">srcpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="79:7" pos:end="85:5">else <block pos:start="79:12" pos:end="85:5">{<block_content pos:start="83:9" pos:end="83:43">

        <comment type="block" pos:start="81:9" pos:end="81:63">/* Close stderr so that the qemu-nbd process exits.  */</comment>

        <expr_stmt pos:start="83:9" pos:end="83:43"><expr pos:start="83:9" pos:end="83:42"><call pos:start="83:9" pos:end="83:42"><name pos:start="83:9" pos:end="83:12">dup2</name><argument_list pos:start="83:13" pos:end="83:42">(<argument pos:start="83:14" pos:end="83:26"><expr pos:start="83:14" pos:end="83:26"><name pos:start="83:14" pos:end="83:26">STDOUT_FILENO</name></expr></argument>, <argument pos:start="83:29" pos:end="83:41"><expr pos:start="83:29" pos:end="83:41"><name pos:start="83:29" pos:end="83:41">STDERR_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:25"><expr pos:start="89:5" pos:end="89:24"><name pos:start="89:5" pos:end="89:7">ret</name> <operator pos:start="89:9" pos:end="89:9">=</operator> <call pos:start="89:11" pos:end="89:24"><name pos:start="89:11" pos:end="89:20">nbd_client</name><argument_list pos:start="89:21" pos:end="89:24">(<argument pos:start="89:22" pos:end="89:23"><expr pos:start="89:22" pos:end="89:23"><name pos:start="89:22" pos:end="89:23">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="95:5"><if pos:start="91:5" pos:end="95:5">if <condition pos:start="91:8" pos:end="91:12">(<expr pos:start="91:9" pos:end="91:11"><name pos:start="91:9" pos:end="91:11">ret</name></expr>)</condition> <block pos:start="91:14" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:17">

        <goto pos:start="93:9" pos:end="93:17">goto <name pos:start="93:14" pos:end="93:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:14"><expr pos:start="97:5" pos:end="97:13"><call pos:start="97:5" pos:end="97:13"><name pos:start="97:5" pos:end="97:9">close</name><argument_list pos:start="97:10" pos:end="97:13">(<argument pos:start="97:11" pos:end="97:12"><expr pos:start="97:11" pos:end="97:12"><name pos:start="97:11" pos:end="97:12">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:28"><expr pos:start="99:5" pos:end="99:27"><call pos:start="99:5" pos:end="99:27"><name pos:start="99:5" pos:end="99:8">kill</name><argument_list pos:start="99:9" pos:end="99:27">(<argument pos:start="99:10" pos:end="99:17"><expr pos:start="99:10" pos:end="99:17"><call pos:start="99:10" pos:end="99:17"><name pos:start="99:10" pos:end="99:15">getpid</name><argument_list pos:start="99:16" pos:end="99:17">()</argument_list></call></expr></argument>, <argument pos:start="99:20" pos:end="99:26"><expr pos:start="99:20" pos:end="99:26"><name pos:start="99:20" pos:end="99:26">SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="101:5" pos:end="101:33">return <expr pos:start="101:12" pos:end="101:32"><operator pos:start="101:12" pos:end="101:12">(</operator><name pos:start="101:13" pos:end="101:16">void</name> <operator pos:start="101:18" pos:end="101:18">*</operator><operator pos:start="101:19" pos:end="101:19">)</operator> <name pos:start="101:21" pos:end="101:32">EXIT_SUCCESS</name></expr>;</return>



<label pos:start="105:1" pos:end="105:4"><name pos:start="105:1" pos:end="105:3">out</name>:</label>

    <expr_stmt pos:start="107:5" pos:end="107:28"><expr pos:start="107:5" pos:end="107:27"><call pos:start="107:5" pos:end="107:27"><name pos:start="107:5" pos:end="107:8">kill</name><argument_list pos:start="107:9" pos:end="107:27">(<argument pos:start="107:10" pos:end="107:17"><expr pos:start="107:10" pos:end="107:17"><call pos:start="107:10" pos:end="107:17"><name pos:start="107:10" pos:end="107:15">getpid</name><argument_list pos:start="107:16" pos:end="107:17">()</argument_list></call></expr></argument>, <argument pos:start="107:20" pos:end="107:26"><expr pos:start="107:20" pos:end="107:26"><name pos:start="107:20" pos:end="107:26">SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="109:5" pos:end="109:33">return <expr pos:start="109:12" pos:end="109:32"><operator pos:start="109:12" pos:end="109:12">(</operator><name pos:start="109:13" pos:end="109:16">void</name> <operator pos:start="109:18" pos:end="109:18">*</operator><operator pos:start="109:19" pos:end="109:19">)</operator> <name pos:start="109:21" pos:end="109:32">EXIT_FAILURE</name></expr>;</return>

</block_content>}</block></function>
</unit>
