<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26469.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:15">gic_update</name><parameter_list pos:start="1:16" pos:end="1:28">(<parameter pos:start="1:17" pos:end="1:27"><decl pos:start="1:17" pos:end="1:27"><type pos:start="1:17" pos:end="1:26"><name pos:start="1:17" pos:end="1:24">GICState</name> <modifier pos:start="1:26" pos:end="1:26">*</modifier></type><name pos:start="1:27" pos:end="1:27">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="75:1">{<block_content pos:start="5:5" pos:end="73:5">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:16">best_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">best_prio</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13">level</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:11"><decl pos:start="15:5" pos:end="15:10"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:10">cm</name></decl>;</decl_stmt>



    <for pos:start="19:5" pos:end="73:5">for <control pos:start="19:9" pos:end="19:42">(<init pos:start="19:10" pos:end="19:17"><expr pos:start="19:10" pos:end="19:16"><name pos:start="19:10" pos:end="19:12">cpu</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <literal type="number" pos:start="19:16" pos:end="19:16">0</literal></expr>;</init> <condition pos:start="19:19" pos:end="19:35"><expr pos:start="19:19" pos:end="19:34"><name pos:start="19:19" pos:end="19:21">cpu</name> <operator pos:start="19:23" pos:end="19:23">&lt;</operator> <call pos:start="19:25" pos:end="19:34"><name pos:start="19:25" pos:end="19:31">NUM_CPU</name><argument_list pos:start="19:32" pos:end="19:34">(<argument pos:start="19:33" pos:end="19:33"><expr pos:start="19:33" pos:end="19:33"><name pos:start="19:33" pos:end="19:33">s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="19:37" pos:end="19:41"><expr pos:start="19:37" pos:end="19:41"><name pos:start="19:37" pos:end="19:39">cpu</name><operator pos:start="19:40" pos:end="19:41">++</operator></expr></incr>)</control> <block pos:start="19:44" pos:end="73:5">{<block_content pos:start="21:9" pos:end="71:48">

        <expr_stmt pos:start="21:9" pos:end="21:22"><expr pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:10">cm</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <literal type="number" pos:start="21:14" pos:end="21:14">1</literal> <operator pos:start="21:16" pos:end="21:17">&lt;&lt;</operator> <name pos:start="21:19" pos:end="21:21">cpu</name></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:39"><expr pos:start="23:9" pos:end="23:38"><name pos:start="23:9" pos:end="23:31"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:26">current_pending</name><index pos:start="23:27" pos:end="23:31">[<expr pos:start="23:28" pos:end="23:30"><name pos:start="23:28" pos:end="23:30">cpu</name></expr>]</index></name> <operator pos:start="23:33" pos:end="23:33">=</operator> <literal type="number" pos:start="23:35" pos:end="23:38">1023</literal></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="31:9"><if pos:start="25:9" pos:end="31:9">if <condition pos:start="25:12" pos:end="25:48">(<expr pos:start="25:13" pos:end="25:47"><operator pos:start="25:13" pos:end="25:13">!</operator><name pos:start="25:14" pos:end="25:23"><name pos:start="25:14" pos:end="25:14">s</name><operator pos:start="25:15" pos:end="25:16">-&gt;</operator><name pos:start="25:17" pos:end="25:23">enabled</name></name> <operator pos:start="25:25" pos:end="25:26">||</operator> <operator pos:start="25:28" pos:end="25:28">!</operator><name pos:start="25:29" pos:end="25:47"><name pos:start="25:29" pos:end="25:29">s</name><operator pos:start="25:30" pos:end="25:31">-&gt;</operator><name pos:start="25:32" pos:end="25:42">cpu_enabled</name><index pos:start="25:43" pos:end="25:47">[<expr pos:start="25:44" pos:end="25:46"><name pos:start="25:44" pos:end="25:46">cpu</name></expr>]</index></name></expr>)</condition> <block pos:start="25:50" pos:end="31:9">{<block_content pos:start="27:13" pos:end="29:19">

            <expr_stmt pos:start="27:13" pos:end="27:47"><expr pos:start="27:13" pos:end="27:46"><call pos:start="27:13" pos:end="27:46"><name pos:start="27:13" pos:end="27:26">qemu_irq_lower</name><argument_list pos:start="27:27" pos:end="27:46">(<argument pos:start="27:28" pos:end="27:45"><expr pos:start="27:28" pos:end="27:45"><name pos:start="27:28" pos:end="27:45"><name pos:start="27:28" pos:end="27:28">s</name><operator pos:start="27:29" pos:end="27:30">-&gt;</operator><name pos:start="27:31" pos:end="27:40">parent_irq</name><index pos:start="27:41" pos:end="27:45">[<expr pos:start="27:42" pos:end="27:44"><name pos:start="27:42" pos:end="27:44">cpu</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="29:13" pos:end="29:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:26"><expr pos:start="33:9" pos:end="33:25"><name pos:start="33:9" pos:end="33:17">best_prio</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <literal type="number" pos:start="33:21" pos:end="33:25">0x100</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:24"><expr pos:start="35:9" pos:end="35:23"><name pos:start="35:9" pos:end="35:16">best_irq</name> <operator pos:start="35:18" pos:end="35:18">=</operator> <literal type="number" pos:start="35:20" pos:end="35:23">1023</literal></expr>;</expr_stmt>

        <for pos:start="37:9" pos:end="53:9">for <control pos:start="37:13" pos:end="37:46">(<init pos:start="37:14" pos:end="37:21"><expr pos:start="37:14" pos:end="37:20"><name pos:start="37:14" pos:end="37:16">irq</name> <operator pos:start="37:18" pos:end="37:18">=</operator> <literal type="number" pos:start="37:20" pos:end="37:20">0</literal></expr>;</init> <condition pos:start="37:23" pos:end="37:39"><expr pos:start="37:23" pos:end="37:38"><name pos:start="37:23" pos:end="37:25">irq</name> <operator pos:start="37:27" pos:end="37:27">&lt;</operator> <name pos:start="37:29" pos:end="37:38"><name pos:start="37:29" pos:end="37:29">s</name><operator pos:start="37:30" pos:end="37:31">-&gt;</operator><name pos:start="37:32" pos:end="37:38">num_irq</name></name></expr>;</condition> <incr pos:start="37:41" pos:end="37:45"><expr pos:start="37:41" pos:end="37:45"><name pos:start="37:41" pos:end="37:43">irq</name><operator pos:start="37:44" pos:end="37:45">++</operator></expr></incr>)</control> <block pos:start="37:48" pos:end="53:9">{<block_content pos:start="39:13" pos:end="51:13">

            <if_stmt pos:start="39:13" pos:end="51:13"><if pos:start="39:13" pos:end="51:13">if <condition pos:start="39:16" pos:end="41:61">(<expr pos:start="39:17" pos:end="41:60"><call pos:start="39:17" pos:end="39:41"><name pos:start="39:17" pos:end="39:32">GIC_TEST_ENABLED</name><argument_list pos:start="39:33" pos:end="39:41">(<argument pos:start="39:34" pos:end="39:36"><expr pos:start="39:34" pos:end="39:36"><name pos:start="39:34" pos:end="39:36">irq</name></expr></argument>, <argument pos:start="39:39" pos:end="39:40"><expr pos:start="39:39" pos:end="39:40"><name pos:start="39:39" pos:end="39:40">cm</name></expr></argument>)</argument_list></call> <operator pos:start="39:43" pos:end="39:44">&amp;&amp;</operator> <call pos:start="39:46" pos:end="39:73"><name pos:start="39:46" pos:end="39:61">gic_test_pending</name><argument_list pos:start="39:62" pos:end="39:73">(<argument pos:start="39:63" pos:end="39:63"><expr pos:start="39:63" pos:end="39:63"><name pos:start="39:63" pos:end="39:63">s</name></expr></argument>, <argument pos:start="39:66" pos:end="39:68"><expr pos:start="39:66" pos:end="39:68"><name pos:start="39:66" pos:end="39:68">irq</name></expr></argument>, <argument pos:start="39:71" pos:end="39:72"><expr pos:start="39:71" pos:end="39:72"><name pos:start="39:71" pos:end="39:72">cm</name></expr></argument>)</argument_list></call> <operator pos:start="39:75" pos:end="39:76">&amp;&amp;</operator>

                <operator pos:start="41:17" pos:end="41:17">(</operator><name pos:start="41:18" pos:end="41:20">irq</name> <operator pos:start="41:22" pos:end="41:22">&lt;</operator> <name pos:start="41:24" pos:end="41:35">GIC_INTERNAL</name> <operator pos:start="41:37" pos:end="41:38">||</operator> <call pos:start="41:40" pos:end="41:54"><name pos:start="41:40" pos:end="41:49">GIC_TARGET</name><argument_list pos:start="41:50" pos:end="41:54">(<argument pos:start="41:51" pos:end="41:53"><expr pos:start="41:51" pos:end="41:53"><name pos:start="41:51" pos:end="41:53">irq</name></expr></argument>)</argument_list></call> <operator pos:start="41:56" pos:end="41:56">&amp;</operator> <name pos:start="41:58" pos:end="41:59">cm</name><operator pos:start="41:60" pos:end="41:60">)</operator></expr>)</condition> <block pos:start="41:63" pos:end="51:13">{<block_content pos:start="43:17" pos:end="49:17">

                <if_stmt pos:start="43:17" pos:end="49:17"><if pos:start="43:17" pos:end="49:17">if <condition pos:start="43:20" pos:end="43:59">(<expr pos:start="43:21" pos:end="43:58"><call pos:start="43:21" pos:end="43:46"><name pos:start="43:21" pos:end="43:36">GIC_GET_PRIORITY</name><argument_list pos:start="43:37" pos:end="43:46">(<argument pos:start="43:38" pos:end="43:40"><expr pos:start="43:38" pos:end="43:40"><name pos:start="43:38" pos:end="43:40">irq</name></expr></argument>, <argument pos:start="43:43" pos:end="43:45"><expr pos:start="43:43" pos:end="43:45"><name pos:start="43:43" pos:end="43:45">cpu</name></expr></argument>)</argument_list></call> <operator pos:start="43:48" pos:end="43:48">&lt;</operator> <name pos:start="43:50" pos:end="43:58">best_prio</name></expr>)</condition> <block pos:start="43:61" pos:end="49:17">{<block_content pos:start="45:21" pos:end="47:35">

                    <expr_stmt pos:start="45:21" pos:end="45:59"><expr pos:start="45:21" pos:end="45:58"><name pos:start="45:21" pos:end="45:29">best_prio</name> <operator pos:start="45:31" pos:end="45:31">=</operator> <call pos:start="45:33" pos:end="45:58"><name pos:start="45:33" pos:end="45:48">GIC_GET_PRIORITY</name><argument_list pos:start="45:49" pos:end="45:58">(<argument pos:start="45:50" pos:end="45:52"><expr pos:start="45:50" pos:end="45:52"><name pos:start="45:50" pos:end="45:52">irq</name></expr></argument>, <argument pos:start="45:55" pos:end="45:57"><expr pos:start="45:55" pos:end="45:57"><name pos:start="45:55" pos:end="45:57">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="47:21" pos:end="47:35"><expr pos:start="47:21" pos:end="47:34"><name pos:start="47:21" pos:end="47:28">best_irq</name> <operator pos:start="47:30" pos:end="47:30">=</operator> <name pos:start="47:32" pos:end="47:34">irq</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="55:9" pos:end="55:18"><expr pos:start="55:9" pos:end="55:17"><name pos:start="55:9" pos:end="55:13">level</name> <operator pos:start="55:15" pos:end="55:15">=</operator> <literal type="number" pos:start="55:17" pos:end="55:17">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="69:9"><if pos:start="57:9" pos:end="69:9">if <condition pos:start="57:12" pos:end="57:46">(<expr pos:start="57:13" pos:end="57:45"><name pos:start="57:13" pos:end="57:21">best_prio</name> <operator pos:start="57:23" pos:end="57:23">&lt;</operator> <name pos:start="57:25" pos:end="57:45"><name pos:start="57:25" pos:end="57:25">s</name><operator pos:start="57:26" pos:end="57:27">-&gt;</operator><name pos:start="57:28" pos:end="57:40">priority_mask</name><index pos:start="57:41" pos:end="57:45">[<expr pos:start="57:42" pos:end="57:44"><name pos:start="57:42" pos:end="57:44">cpu</name></expr>]</index></name></expr>)</condition> <block pos:start="57:48" pos:end="69:9">{<block_content pos:start="59:13" pos:end="67:13">

            <expr_stmt pos:start="59:13" pos:end="59:47"><expr pos:start="59:13" pos:end="59:46"><name pos:start="59:13" pos:end="59:35"><name pos:start="59:13" pos:end="59:13">s</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:30">current_pending</name><index pos:start="59:31" pos:end="59:35">[<expr pos:start="59:32" pos:end="59:34"><name pos:start="59:32" pos:end="59:34">cpu</name></expr>]</index></name> <operator pos:start="59:37" pos:end="59:37">=</operator> <name pos:start="59:39" pos:end="59:46">best_irq</name></expr>;</expr_stmt>

            <if_stmt pos:start="61:13" pos:end="67:13"><if pos:start="61:13" pos:end="67:13">if <condition pos:start="61:16" pos:end="61:53">(<expr pos:start="61:17" pos:end="61:52"><name pos:start="61:17" pos:end="61:25">best_prio</name> <operator pos:start="61:27" pos:end="61:27">&lt;</operator> <name pos:start="61:29" pos:end="61:52"><name pos:start="61:29" pos:end="61:29">s</name><operator pos:start="61:30" pos:end="61:31">-&gt;</operator><name pos:start="61:32" pos:end="61:47">running_priority</name><index pos:start="61:48" pos:end="61:52">[<expr pos:start="61:49" pos:end="61:51"><name pos:start="61:49" pos:end="61:51">cpu</name></expr>]</index></name></expr>)</condition> <block pos:start="61:55" pos:end="67:13">{<block_content pos:start="63:17" pos:end="65:26">

                <expr_stmt pos:start="63:17" pos:end="63:75"><expr pos:start="63:17" pos:end="63:74"><call pos:start="63:17" pos:end="63:74"><name pos:start="63:17" pos:end="63:23">DPRINTF</name><argument_list pos:start="63:24" pos:end="63:74">(<argument pos:start="63:25" pos:end="63:58"><expr pos:start="63:25" pos:end="63:58"><literal type="string" pos:start="63:25" pos:end="63:58">"Raised pending IRQ %d (cpu %d)\n"</literal></expr></argument>, <argument pos:start="63:61" pos:end="63:68"><expr pos:start="63:61" pos:end="63:68"><name pos:start="63:61" pos:end="63:68">best_irq</name></expr></argument>, <argument pos:start="63:71" pos:end="63:73"><expr pos:start="63:71" pos:end="63:73"><name pos:start="63:71" pos:end="63:73">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="65:17" pos:end="65:26"><expr pos:start="65:17" pos:end="65:25"><name pos:start="65:17" pos:end="65:21">level</name> <operator pos:start="65:23" pos:end="65:23">=</operator> <literal type="number" pos:start="65:25" pos:end="65:25">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:48"><expr pos:start="71:9" pos:end="71:47"><call pos:start="71:9" pos:end="71:47"><name pos:start="71:9" pos:end="71:20">qemu_set_irq</name><argument_list pos:start="71:21" pos:end="71:47">(<argument pos:start="71:22" pos:end="71:39"><expr pos:start="71:22" pos:end="71:39"><name pos:start="71:22" pos:end="71:39"><name pos:start="71:22" pos:end="71:22">s</name><operator pos:start="71:23" pos:end="71:24">-&gt;</operator><name pos:start="71:25" pos:end="71:34">parent_irq</name><index pos:start="71:35" pos:end="71:39">[<expr pos:start="71:36" pos:end="71:38"><name pos:start="71:36" pos:end="71:38">cpu</name></expr>]</index></name></expr></argument>, <argument pos:start="71:42" pos:end="71:46"><expr pos:start="71:42" pos:end="71:46"><name pos:start="71:42" pos:end="71:46">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
