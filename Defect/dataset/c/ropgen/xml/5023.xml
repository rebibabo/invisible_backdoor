<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5023.c" pos:tabs="8"><function pos:start="1:1" pos:end="43:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:13">hmp_cont</name><parameter_list pos:start="1:14" pos:end="1:47">(<parameter pos:start="1:15" pos:end="1:26"><decl pos:start="1:15" pos:end="1:26"><type pos:start="1:15" pos:end="1:26"><name pos:start="1:15" pos:end="1:21">Monitor</name> <modifier pos:start="1:23" pos:end="1:23">*</modifier></type><name pos:start="1:24" pos:end="1:26">mon</name></decl></parameter>, <parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:46"><specifier pos:start="1:29" pos:end="1:33">const</specifier> <name pos:start="1:35" pos:end="1:39">QDict</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">qdict</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="43:1">{<block_content pos:start="5:5" pos:end="41:5">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">Error</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:15">errp</name> <init pos:start="5:17" pos:end="5:22">= <expr pos:start="5:19" pos:end="5:22"><name pos:start="5:19" pos:end="5:22">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:20"><expr pos:start="9:5" pos:end="9:19"><call pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:12">qmp_cont</name><argument_list pos:start="9:13" pos:end="9:19">(<argument pos:start="9:14" pos:end="9:18"><expr pos:start="9:14" pos:end="9:18"><operator pos:start="9:14" pos:end="9:14">&amp;</operator><name pos:start="9:15" pos:end="9:18">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="11:5" pos:end="41:5"><if pos:start="11:5" pos:end="41:5">if <condition pos:start="11:8" pos:end="11:28">(<expr pos:start="11:9" pos:end="11:27"><call pos:start="11:9" pos:end="11:27"><name pos:start="11:9" pos:end="11:20">error_is_set</name><argument_list pos:start="11:21" pos:end="11:27">(<argument pos:start="11:22" pos:end="11:26"><expr pos:start="11:22" pos:end="11:26"><operator pos:start="11:22" pos:end="11:22">&amp;</operator><name pos:start="11:23" pos:end="11:26">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:30" pos:end="41:5">{<block_content pos:start="13:9" pos:end="39:37">

        <if_stmt pos:start="13:9" pos:end="37:9"><if pos:start="13:9" pos:end="37:9">if <condition pos:start="13:12" pos:end="13:55">(<expr pos:start="13:13" pos:end="13:54"><call pos:start="13:13" pos:end="13:54"><name pos:start="13:13" pos:end="13:25">error_is_type</name><argument_list pos:start="13:26" pos:end="13:54">(<argument pos:start="13:27" pos:end="13:30"><expr pos:start="13:27" pos:end="13:30"><name pos:start="13:27" pos:end="13:30">errp</name></expr></argument>, <argument pos:start="13:33" pos:end="13:53"><expr pos:start="13:33" pos:end="13:53"><name pos:start="13:33" pos:end="13:53">QERR_DEVICE_ENCRYPTED</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:57" pos:end="37:9">{<block_content pos:start="15:13" pos:end="35:19">

            <decl_stmt pos:start="15:13" pos:end="15:31"><decl pos:start="15:13" pos:end="15:30"><type pos:start="15:13" pos:end="15:24"><specifier pos:start="15:13" pos:end="15:17">const</specifier> <name pos:start="15:19" pos:end="15:22">char</name> <modifier pos:start="15:24" pos:end="15:24">*</modifier></type><name pos:start="15:25" pos:end="15:30">device</name></decl>;</decl_stmt>



            <comment type="block" pos:start="19:13" pos:end="21:27">/* The device is encrypted. Ask the user for the password

               and retry */</comment>



            <expr_stmt pos:start="25:13" pos:end="25:53"><expr pos:start="25:13" pos:end="25:52"><name pos:start="25:13" pos:end="25:18">device</name> <operator pos:start="25:20" pos:end="25:20">=</operator> <call pos:start="25:22" pos:end="25:52"><name pos:start="25:22" pos:end="25:36">error_get_field</name><argument_list pos:start="25:37" pos:end="25:52">(<argument pos:start="25:38" pos:end="25:41"><expr pos:start="25:38" pos:end="25:41"><name pos:start="25:38" pos:end="25:41">errp</name></expr></argument>, <argument pos:start="25:44" pos:end="25:51"><expr pos:start="25:44" pos:end="25:51"><literal type="string" pos:start="25:44" pos:end="25:51">"device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:35"><expr pos:start="27:13" pos:end="27:34"><call pos:start="27:13" pos:end="27:34"><name pos:start="27:13" pos:end="27:18">assert</name><argument_list pos:start="27:19" pos:end="27:34">(<argument pos:start="27:20" pos:end="27:33"><expr pos:start="27:20" pos:end="27:33"><name pos:start="27:20" pos:end="27:25">device</name> <operator pos:start="27:27" pos:end="27:28">!=</operator> <name pos:start="27:30" pos:end="27:33">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="31:13" pos:end="31:73"><expr pos:start="31:13" pos:end="31:72"><call pos:start="31:13" pos:end="31:72"><name pos:start="31:13" pos:end="31:41">monitor_read_block_device_key</name><argument_list pos:start="31:42" pos:end="31:72">(<argument pos:start="31:43" pos:end="31:45"><expr pos:start="31:43" pos:end="31:45"><name pos:start="31:43" pos:end="31:45">mon</name></expr></argument>, <argument pos:start="31:48" pos:end="31:53"><expr pos:start="31:48" pos:end="31:53"><name pos:start="31:48" pos:end="31:53">device</name></expr></argument>, <argument pos:start="31:56" pos:end="31:66"><expr pos:start="31:56" pos:end="31:66"><name pos:start="31:56" pos:end="31:66">hmp_cont_cb</name></expr></argument>, <argument pos:start="31:69" pos:end="31:71"><expr pos:start="31:69" pos:end="31:71"><name pos:start="31:69" pos:end="31:71">mon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:29"><expr pos:start="33:13" pos:end="33:28"><call pos:start="33:13" pos:end="33:28"><name pos:start="33:13" pos:end="33:22">error_free</name><argument_list pos:start="33:23" pos:end="33:28">(<argument pos:start="33:24" pos:end="33:27"><expr pos:start="33:24" pos:end="33:27"><name pos:start="33:24" pos:end="33:27">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="35:13" pos:end="35:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:37"><expr pos:start="39:9" pos:end="39:36"><call pos:start="39:9" pos:end="39:36"><name pos:start="39:9" pos:end="39:24">hmp_handle_error</name><argument_list pos:start="39:25" pos:end="39:36">(<argument pos:start="39:26" pos:end="39:28"><expr pos:start="39:26" pos:end="39:28"><name pos:start="39:26" pos:end="39:28">mon</name></expr></argument>, <argument pos:start="39:31" pos:end="39:35"><expr pos:start="39:31" pos:end="39:35"><operator pos:start="39:31" pos:end="39:31">&amp;</operator><name pos:start="39:32" pos:end="39:35">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
