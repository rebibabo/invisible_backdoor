<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18417.c" pos:tabs="8"><function pos:start="1:1" pos:end="251:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">pcm_encode_frame</name><parameter_list pos:start="1:28" pos:end="3:75">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:48"><decl pos:start="3:29" pos:end="3:48"><type pos:start="3:29" pos:end="3:48"><name pos:start="3:29" pos:end="3:36">unsigned</name> <name pos:start="3:38" pos:end="3:41">char</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:48">frame</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:62"><decl pos:start="3:51" pos:end="3:62"><type pos:start="3:51" pos:end="3:62"><name pos:start="3:51" pos:end="3:53">int</name></type> <name pos:start="3:55" pos:end="3:62">buf_size</name></decl></parameter>, <parameter pos:start="3:65" pos:end="3:74"><decl pos:start="3:65" pos:end="3:74"><type pos:start="3:65" pos:end="3:74"><name pos:start="3:65" pos:end="3:68">void</name> <modifier pos:start="3:70" pos:end="3:70">*</modifier></type><name pos:start="3:71" pos:end="3:74">data</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="251:1">{<block_content pos:start="7:5" pos:end="249:23">

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">n</name></decl>, <decl pos:start="7:12" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:22">sample_size</name></decl>, <decl pos:start="7:25" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:25" pos:end="7:25">v</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:17"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:15">short</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:24">samples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">char</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:22">dst</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:19"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:17">uint8_t</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:24">srcu8</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:35"><decl pos:start="15:5" pos:end="15:34"><type pos:start="15:5" pos:end="15:19"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">int16_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:34">samples_int16_t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:35"><decl pos:start="17:5" pos:end="17:34"><type pos:start="17:5" pos:end="17:19"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:17">int32_t</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:34">samples_int32_t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:35"><decl pos:start="19:5" pos:end="19:34"><type pos:start="19:5" pos:end="19:19"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:17">int64_t</name> <modifier pos:start="19:19" pos:end="19:19">*</modifier></type><name pos:start="19:20" pos:end="19:34">samples_int64_t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:37"><decl pos:start="21:5" pos:end="21:36"><type pos:start="21:5" pos:end="21:20"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:18">uint16_t</name> <modifier pos:start="21:20" pos:end="21:20">*</modifier></type><name pos:start="21:21" pos:end="21:36">samples_uint16_t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:37"><decl pos:start="23:5" pos:end="23:36"><type pos:start="23:5" pos:end="23:20"><specifier pos:start="23:5" pos:end="23:9">const</specifier> <name pos:start="23:11" pos:end="23:18">uint32_t</name> <modifier pos:start="23:20" pos:end="23:20">*</modifier></type><name pos:start="23:21" pos:end="23:36">samples_uint32_t</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:61"><expr pos:start="27:5" pos:end="27:60"><name pos:start="27:5" pos:end="27:15">sample_size</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <call pos:start="27:19" pos:end="27:58"><name pos:start="27:19" pos:end="27:40">av_get_bits_per_sample</name><argument_list pos:start="27:41" pos:end="27:58">(<argument pos:start="27:42" pos:end="27:57"><expr pos:start="27:42" pos:end="27:57"><name pos:start="27:42" pos:end="27:57"><name pos:start="27:42" pos:end="27:46">avctx</name><operator pos:start="27:47" pos:end="27:48">-&gt;</operator><name pos:start="27:49" pos:end="27:53">codec</name><operator pos:start="27:54" pos:end="27:55">-&gt;</operator><name pos:start="27:56" pos:end="27:57">id</name></name></expr></argument>)</argument_list></call><operator pos:start="27:59" pos:end="27:59">/</operator><literal type="number" pos:start="27:60" pos:end="27:60">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:31"><expr pos:start="29:5" pos:end="29:30"><name pos:start="29:5" pos:end="29:5">n</name> <operator pos:start="29:7" pos:end="29:7">=</operator> <name pos:start="29:9" pos:end="29:16">buf_size</name> <operator pos:start="29:18" pos:end="29:18">/</operator> <name pos:start="29:20" pos:end="29:30">sample_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:19"><expr pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:11">samples</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:18">data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:16"><expr pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:7">dst</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <name pos:start="33:11" pos:end="33:15">frame</name></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:56">(<expr pos:start="37:9" pos:end="37:55"><name pos:start="37:9" pos:end="37:25"><name pos:start="37:9" pos:end="37:13">avctx</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:25">sample_fmt</name></name><operator pos:start="37:26" pos:end="37:27">!=</operator><name pos:start="37:28" pos:end="37:55"><name pos:start="37:28" pos:end="37:32">avctx</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:39">codec</name><operator pos:start="37:40" pos:end="37:41">-&gt;</operator><name pos:start="37:42" pos:end="37:52">sample_fmts</name><index pos:start="37:53" pos:end="37:55">[<expr pos:start="37:54" pos:end="37:54"><literal type="number" pos:start="37:54" pos:end="37:54">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="37:58" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:18">

        <expr_stmt pos:start="39:9" pos:end="39:60"><expr pos:start="39:9" pos:end="39:59"><call pos:start="39:9" pos:end="39:59"><name pos:start="39:9" pos:end="39:14">av_log</name><argument_list pos:start="39:15" pos:end="39:59">(<argument pos:start="39:16" pos:end="39:20"><expr pos:start="39:16" pos:end="39:20"><name pos:start="39:16" pos:end="39:20">avctx</name></expr></argument>, <argument pos:start="39:23" pos:end="39:34"><expr pos:start="39:23" pos:end="39:34"><name pos:start="39:23" pos:end="39:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="39:37" pos:end="39:58"><expr pos:start="39:37" pos:end="39:58"><literal type="string" pos:start="39:37" pos:end="39:58">"invalid sample_fmt\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:18">return <expr pos:start="41:16" pos:end="41:17"><operator pos:start="41:16" pos:end="41:16">-</operator><literal type="number" pos:start="41:17" pos:end="41:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="47:5" pos:end="243:5">switch<condition pos:start="47:11" pos:end="47:28">(<expr pos:start="47:12" pos:end="47:27"><name pos:start="47:12" pos:end="47:27"><name pos:start="47:12" pos:end="47:16">avctx</name><operator pos:start="47:17" pos:end="47:18">-&gt;</operator><name pos:start="47:19" pos:end="47:23">codec</name><operator pos:start="47:24" pos:end="47:25">-&gt;</operator><name pos:start="47:26" pos:end="47:27">id</name></name></expr>)</condition> <block pos:start="47:30" pos:end="243:5">{<block_content pos:start="49:5" pos:end="241:18">

    <case pos:start="49:5" pos:end="49:28">case <expr pos:start="49:10" pos:end="49:27"><name pos:start="49:10" pos:end="49:27">CODEC_ID_PCM_U32LE</name></expr>:</case>

        <macro pos:start="51:9" pos:end="51:62"><name pos:start="51:9" pos:end="51:14">ENCODE</name><argument_list pos:start="51:15" pos:end="51:62">(<argument pos:start="51:16" pos:end="51:23">uint32_t</argument>, <argument pos:start="51:26" pos:end="51:29">le32</argument>, <argument pos:start="51:32" pos:end="51:38">samples</argument>, <argument pos:start="51:41" pos:end="51:43">dst</argument>, <argument pos:start="51:46" pos:end="51:46">n</argument>, <argument pos:start="51:49" pos:end="51:49"><literal type="number" pos:start="51:49" pos:end="51:49">0</literal></argument>, <argument pos:start="51:52" pos:end="51:61"><literal type="number" pos:start="51:52" pos:end="51:61">0x80000000</literal></argument>)</argument_list></macro>

        <break pos:start="53:9" pos:end="53:14">break;</break>

    <case pos:start="55:5" pos:end="55:28">case <expr pos:start="55:10" pos:end="55:27"><name pos:start="55:10" pos:end="55:27">CODEC_ID_PCM_U32BE</name></expr>:</case>

        <macro pos:start="57:9" pos:end="57:62"><name pos:start="57:9" pos:end="57:14">ENCODE</name><argument_list pos:start="57:15" pos:end="57:62">(<argument pos:start="57:16" pos:end="57:23">uint32_t</argument>, <argument pos:start="57:26" pos:end="57:29">be32</argument>, <argument pos:start="57:32" pos:end="57:38">samples</argument>, <argument pos:start="57:41" pos:end="57:43">dst</argument>, <argument pos:start="57:46" pos:end="57:46">n</argument>, <argument pos:start="57:49" pos:end="57:49"><literal type="number" pos:start="57:49" pos:end="57:49">0</literal></argument>, <argument pos:start="57:52" pos:end="57:61"><literal type="number" pos:start="57:52" pos:end="57:61">0x80000000</literal></argument>)</argument_list></macro>

        <break pos:start="59:9" pos:end="59:14">break;</break>

    <case pos:start="61:5" pos:end="61:28">case <expr pos:start="61:10" pos:end="61:27"><name pos:start="61:10" pos:end="61:27">CODEC_ID_PCM_S24LE</name></expr>:</case>

        <macro pos:start="63:9" pos:end="63:52"><name pos:start="63:9" pos:end="63:14">ENCODE</name><argument_list pos:start="63:15" pos:end="63:52">(<argument pos:start="63:16" pos:end="63:22">int32_t</argument>, <argument pos:start="63:25" pos:end="63:28">le24</argument>, <argument pos:start="63:31" pos:end="63:37">samples</argument>, <argument pos:start="63:40" pos:end="63:42">dst</argument>, <argument pos:start="63:45" pos:end="63:45">n</argument>, <argument pos:start="63:48" pos:end="63:48"><literal type="number" pos:start="63:48" pos:end="63:48">8</literal></argument>, <argument pos:start="63:51" pos:end="63:51"><literal type="number" pos:start="63:51" pos:end="63:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="65:9" pos:end="65:14">break;</break>

    <case pos:start="67:5" pos:end="67:28">case <expr pos:start="67:10" pos:end="67:27"><name pos:start="67:10" pos:end="67:27">CODEC_ID_PCM_S24BE</name></expr>:</case>

        <macro pos:start="69:9" pos:end="69:52"><name pos:start="69:9" pos:end="69:14">ENCODE</name><argument_list pos:start="69:15" pos:end="69:52">(<argument pos:start="69:16" pos:end="69:22">int32_t</argument>, <argument pos:start="69:25" pos:end="69:28">be24</argument>, <argument pos:start="69:31" pos:end="69:37">samples</argument>, <argument pos:start="69:40" pos:end="69:42">dst</argument>, <argument pos:start="69:45" pos:end="69:45">n</argument>, <argument pos:start="69:48" pos:end="69:48"><literal type="number" pos:start="69:48" pos:end="69:48">8</literal></argument>, <argument pos:start="69:51" pos:end="69:51"><literal type="number" pos:start="69:51" pos:end="69:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="71:9" pos:end="71:14">break;</break>

    <case pos:start="73:5" pos:end="73:28">case <expr pos:start="73:10" pos:end="73:27"><name pos:start="73:10" pos:end="73:27">CODEC_ID_PCM_U24LE</name></expr>:</case>

        <macro pos:start="75:9" pos:end="75:60"><name pos:start="75:9" pos:end="75:14">ENCODE</name><argument_list pos:start="75:15" pos:end="75:60">(<argument pos:start="75:16" pos:end="75:23">uint32_t</argument>, <argument pos:start="75:26" pos:end="75:29">le24</argument>, <argument pos:start="75:32" pos:end="75:38">samples</argument>, <argument pos:start="75:41" pos:end="75:43">dst</argument>, <argument pos:start="75:46" pos:end="75:46">n</argument>, <argument pos:start="75:49" pos:end="75:49"><literal type="number" pos:start="75:49" pos:end="75:49">8</literal></argument>, <argument pos:start="75:52" pos:end="75:59"><literal type="number" pos:start="75:52" pos:end="75:59">0x800000</literal></argument>)</argument_list></macro>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <case pos:start="79:5" pos:end="79:28">case <expr pos:start="79:10" pos:end="79:27"><name pos:start="79:10" pos:end="79:27">CODEC_ID_PCM_U24BE</name></expr>:</case>

        <macro pos:start="81:9" pos:end="81:60"><name pos:start="81:9" pos:end="81:14">ENCODE</name><argument_list pos:start="81:15" pos:end="81:60">(<argument pos:start="81:16" pos:end="81:23">uint32_t</argument>, <argument pos:start="81:26" pos:end="81:29">be24</argument>, <argument pos:start="81:32" pos:end="81:38">samples</argument>, <argument pos:start="81:41" pos:end="81:43">dst</argument>, <argument pos:start="81:46" pos:end="81:46">n</argument>, <argument pos:start="81:49" pos:end="81:49"><literal type="number" pos:start="81:49" pos:end="81:49">8</literal></argument>, <argument pos:start="81:52" pos:end="81:59"><literal type="number" pos:start="81:52" pos:end="81:59">0x800000</literal></argument>)</argument_list></macro>

        <break pos:start="83:9" pos:end="83:14">break;</break>

    <case pos:start="85:5" pos:end="85:30">case <expr pos:start="85:10" pos:end="85:29"><name pos:start="85:10" pos:end="85:29">CODEC_ID_PCM_S24DAUD</name></expr>:</case>

        <for pos:start="87:9" pos:end="99:9">for<control pos:start="87:12" pos:end="87:21">(<init pos:start="87:13" pos:end="87:13">;</init><condition pos:start="87:14" pos:end="87:17"><expr pos:start="87:14" pos:end="87:16"><name pos:start="87:14" pos:end="87:14">n</name><operator pos:start="87:15" pos:end="87:15">&gt;</operator><literal type="number" pos:start="87:16" pos:end="87:16">0</literal></expr>;</condition><incr pos:start="87:18" pos:end="87:20"><expr pos:start="87:18" pos:end="87:20"><name pos:start="87:18" pos:end="87:18">n</name><operator pos:start="87:19" pos:end="87:20">--</operator></expr></incr>)</control> <block pos:start="87:23" pos:end="99:9">{<block_content pos:start="89:13" pos:end="97:22">

            <decl_stmt pos:start="89:13" pos:end="91:62"><decl pos:start="89:13" pos:end="91:61"><type pos:start="89:13" pos:end="89:20"><name pos:start="89:13" pos:end="89:20">uint32_t</name></type> <name pos:start="89:22" pos:end="89:24">tmp</name> <init pos:start="89:26" pos:end="91:61">= <expr pos:start="89:28" pos:end="91:61"><name pos:start="89:28" pos:end="89:61"><name pos:start="89:28" pos:end="89:37">av_reverse</name><index pos:start="89:38" pos:end="89:61">[<expr pos:start="89:39" pos:end="89:60"><operator pos:start="89:39" pos:end="89:39">(</operator><operator pos:start="89:40" pos:end="89:40">*</operator><name pos:start="89:41" pos:end="89:47">samples</name> <operator pos:start="89:49" pos:end="89:50">&gt;&gt;</operator> <literal type="number" pos:start="89:52" pos:end="89:52">8</literal><operator pos:start="89:53" pos:end="89:53">)</operator> <operator pos:start="89:55" pos:end="89:55">&amp;</operator> <literal type="number" pos:start="89:57" pos:end="89:60">0xff</literal></expr>]</index></name> <operator pos:start="89:63" pos:end="89:63">+</operator>

                           <operator pos:start="91:28" pos:end="91:28">(</operator><name pos:start="91:29" pos:end="91:55"><name pos:start="91:29" pos:end="91:38">av_reverse</name><index pos:start="91:39" pos:end="91:55">[<expr pos:start="91:40" pos:end="91:54"><operator pos:start="91:40" pos:end="91:40">*</operator><name pos:start="91:41" pos:end="91:47">samples</name> <operator pos:start="91:49" pos:end="91:49">&amp;</operator> <literal type="number" pos:start="91:51" pos:end="91:54">0xff</literal></expr>]</index></name> <operator pos:start="91:57" pos:end="91:58">&lt;&lt;</operator> <literal type="number" pos:start="91:60" pos:end="91:60">8</literal><operator pos:start="91:61" pos:end="91:61">)</operator></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:22"><expr pos:start="93:13" pos:end="93:21"><name pos:start="93:13" pos:end="93:15">tmp</name> <operator pos:start="93:17" pos:end="93:19">&lt;&lt;=</operator> <literal type="number" pos:start="93:21" pos:end="93:21">4</literal></expr>;</expr_stmt> <comment type="line" pos:start="93:24" pos:end="93:50">// sync flags would go here</comment>

            <expr_stmt pos:start="95:13" pos:end="95:43"><expr pos:start="95:13" pos:end="95:42"><call pos:start="95:13" pos:end="95:42"><name pos:start="95:13" pos:end="95:31">bytestream_put_be24</name><argument_list pos:start="95:32" pos:end="95:42">(<argument pos:start="95:33" pos:end="95:36"><expr pos:start="95:33" pos:end="95:36"><operator pos:start="95:33" pos:end="95:33">&amp;</operator><name pos:start="95:34" pos:end="95:36">dst</name></expr></argument>, <argument pos:start="95:39" pos:end="95:41"><expr pos:start="95:39" pos:end="95:41"><name pos:start="95:39" pos:end="95:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:22"><expr pos:start="97:13" pos:end="97:21"><name pos:start="97:13" pos:end="97:19">samples</name><operator pos:start="97:20" pos:end="97:21">++</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="101:9" pos:end="101:14">break;</break>

    <case pos:start="103:5" pos:end="103:28">case <expr pos:start="103:10" pos:end="103:27"><name pos:start="103:10" pos:end="103:27">CODEC_ID_PCM_U16LE</name></expr>:</case>

        <macro pos:start="105:9" pos:end="105:58"><name pos:start="105:9" pos:end="105:14">ENCODE</name><argument_list pos:start="105:15" pos:end="105:58">(<argument pos:start="105:16" pos:end="105:23">uint16_t</argument>, <argument pos:start="105:26" pos:end="105:29">le16</argument>, <argument pos:start="105:32" pos:end="105:38">samples</argument>, <argument pos:start="105:41" pos:end="105:43">dst</argument>, <argument pos:start="105:46" pos:end="105:46">n</argument>, <argument pos:start="105:49" pos:end="105:49"><literal type="number" pos:start="105:49" pos:end="105:49">0</literal></argument>, <argument pos:start="105:52" pos:end="105:57"><literal type="number" pos:start="105:52" pos:end="105:57">0x8000</literal></argument>)</argument_list></macro>

        <break pos:start="107:9" pos:end="107:14">break;</break>

    <case pos:start="109:5" pos:end="109:28">case <expr pos:start="109:10" pos:end="109:27"><name pos:start="109:10" pos:end="109:27">CODEC_ID_PCM_U16BE</name></expr>:</case>

        <macro pos:start="111:9" pos:end="111:58"><name pos:start="111:9" pos:end="111:14">ENCODE</name><argument_list pos:start="111:15" pos:end="111:58">(<argument pos:start="111:16" pos:end="111:23">uint16_t</argument>, <argument pos:start="111:26" pos:end="111:29">be16</argument>, <argument pos:start="111:32" pos:end="111:38">samples</argument>, <argument pos:start="111:41" pos:end="111:43">dst</argument>, <argument pos:start="111:46" pos:end="111:46">n</argument>, <argument pos:start="111:49" pos:end="111:49"><literal type="number" pos:start="111:49" pos:end="111:49">0</literal></argument>, <argument pos:start="111:52" pos:end="111:57"><literal type="number" pos:start="111:52" pos:end="111:57">0x8000</literal></argument>)</argument_list></macro>

        <break pos:start="113:9" pos:end="113:14">break;</break>

    <case pos:start="115:5" pos:end="115:25">case <expr pos:start="115:10" pos:end="115:24"><name pos:start="115:10" pos:end="115:24">CODEC_ID_PCM_S8</name></expr>:</case>

        <expr_stmt pos:start="117:9" pos:end="117:20"><expr pos:start="117:9" pos:end="117:19"><name pos:start="117:9" pos:end="117:13">srcu8</name><operator pos:start="117:14" pos:end="117:14">=</operator> <name pos:start="117:16" pos:end="117:19">data</name></expr>;</expr_stmt>

        <for pos:start="119:9" pos:end="125:9">for<control pos:start="119:12" pos:end="119:21">(<init pos:start="119:13" pos:end="119:13">;</init><condition pos:start="119:14" pos:end="119:17"><expr pos:start="119:14" pos:end="119:16"><name pos:start="119:14" pos:end="119:14">n</name><operator pos:start="119:15" pos:end="119:15">&gt;</operator><literal type="number" pos:start="119:16" pos:end="119:16">0</literal></expr>;</condition><incr pos:start="119:18" pos:end="119:20"><expr pos:start="119:18" pos:end="119:20"><name pos:start="119:18" pos:end="119:18">n</name><operator pos:start="119:19" pos:end="119:20">--</operator></expr></incr>)</control> <block pos:start="119:23" pos:end="125:9">{<block_content pos:start="121:13" pos:end="123:29">

            <expr_stmt pos:start="121:13" pos:end="121:25"><expr pos:start="121:13" pos:end="121:24"><name pos:start="121:13" pos:end="121:13">v</name> <operator pos:start="121:15" pos:end="121:15">=</operator> <operator pos:start="121:17" pos:end="121:17">*</operator><name pos:start="121:18" pos:end="121:22">srcu8</name><operator pos:start="121:23" pos:end="121:24">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:29"><expr pos:start="123:13" pos:end="123:28"><operator pos:start="123:13" pos:end="123:13">*</operator><name pos:start="123:14" pos:end="123:16">dst</name><operator pos:start="123:17" pos:end="123:18">++</operator> <operator pos:start="123:20" pos:end="123:20">=</operator> <name pos:start="123:22" pos:end="123:22">v</name> <operator pos:start="123:24" pos:end="123:24">-</operator> <literal type="number" pos:start="123:26" pos:end="123:28">128</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="127:9" pos:end="130:0">break;</break>

<cpp:if pos:start="129:1" pos:end="129:18">#<cpp:directive pos:start="129:2" pos:end="129:3">if</cpp:directive> <expr pos:start="129:5" pos:end="129:18"><name pos:start="129:5" pos:end="129:18">HAVE_BIGENDIAN</name></expr></cpp:if>

    <case pos:start="131:5" pos:end="131:28">case <expr pos:start="131:10" pos:end="131:27"><name pos:start="131:10" pos:end="131:27">CODEC_ID_PCM_F64LE</name></expr>:</case>

        <macro pos:start="133:9" pos:end="133:52"><name pos:start="133:9" pos:end="133:14">ENCODE</name><argument_list pos:start="133:15" pos:end="133:52">(<argument pos:start="133:16" pos:end="133:22">int64_t</argument>, <argument pos:start="133:25" pos:end="133:28">le64</argument>, <argument pos:start="133:31" pos:end="133:37">samples</argument>, <argument pos:start="133:40" pos:end="133:42">dst</argument>, <argument pos:start="133:45" pos:end="133:45">n</argument>, <argument pos:start="133:48" pos:end="133:48"><literal type="number" pos:start="133:48" pos:end="133:48">0</literal></argument>, <argument pos:start="133:51" pos:end="133:51"><literal type="number" pos:start="133:51" pos:end="133:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="135:9" pos:end="135:14">break;</break>

    <case pos:start="137:5" pos:end="137:28">case <expr pos:start="137:10" pos:end="137:27"><name pos:start="137:10" pos:end="137:27">CODEC_ID_PCM_S32LE</name></expr>:</case>

    <case pos:start="139:5" pos:end="139:28">case <expr pos:start="139:10" pos:end="139:27"><name pos:start="139:10" pos:end="139:27">CODEC_ID_PCM_F32LE</name></expr>:</case>

        <macro pos:start="141:9" pos:end="141:52"><name pos:start="141:9" pos:end="141:14">ENCODE</name><argument_list pos:start="141:15" pos:end="141:52">(<argument pos:start="141:16" pos:end="141:22">int32_t</argument>, <argument pos:start="141:25" pos:end="141:28">le32</argument>, <argument pos:start="141:31" pos:end="141:37">samples</argument>, <argument pos:start="141:40" pos:end="141:42">dst</argument>, <argument pos:start="141:45" pos:end="141:45">n</argument>, <argument pos:start="141:48" pos:end="141:48"><literal type="number" pos:start="141:48" pos:end="141:48">0</literal></argument>, <argument pos:start="141:51" pos:end="141:51"><literal type="number" pos:start="141:51" pos:end="141:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="143:9" pos:end="143:14">break;</break>

    <case pos:start="145:5" pos:end="145:28">case <expr pos:start="145:10" pos:end="145:27"><name pos:start="145:10" pos:end="145:27">CODEC_ID_PCM_S16LE</name></expr>:</case>

        <macro pos:start="147:9" pos:end="147:52"><name pos:start="147:9" pos:end="147:14">ENCODE</name><argument_list pos:start="147:15" pos:end="147:52">(<argument pos:start="147:16" pos:end="147:22">int16_t</argument>, <argument pos:start="147:25" pos:end="147:28">le16</argument>, <argument pos:start="147:31" pos:end="147:37">samples</argument>, <argument pos:start="147:40" pos:end="147:42">dst</argument>, <argument pos:start="147:45" pos:end="147:45">n</argument>, <argument pos:start="147:48" pos:end="147:48"><literal type="number" pos:start="147:48" pos:end="147:48">0</literal></argument>, <argument pos:start="147:51" pos:end="147:51"><literal type="number" pos:start="147:51" pos:end="147:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="149:9" pos:end="149:14">break;</break>

    <case pos:start="151:5" pos:end="151:28">case <expr pos:start="151:10" pos:end="151:27"><name pos:start="151:10" pos:end="151:27">CODEC_ID_PCM_F64BE</name></expr>:</case>

    <case pos:start="153:5" pos:end="153:28">case <expr pos:start="153:10" pos:end="153:27"><name pos:start="153:10" pos:end="153:27">CODEC_ID_PCM_F32BE</name></expr>:</case>

    <case pos:start="155:5" pos:end="155:28">case <expr pos:start="155:10" pos:end="155:27"><name pos:start="155:10" pos:end="155:27">CODEC_ID_PCM_S32BE</name></expr>:</case>

    <case pos:start="157:5" pos:end="160:0">case <expr pos:start="157:10" pos:end="157:27"><name pos:start="157:10" pos:end="157:27">CODEC_ID_PCM_S16BE</name></expr>:</case>

<cpp:else pos:start="159:1" pos:end="159:5">#<cpp:directive pos:start="159:2" pos:end="159:5">else</cpp:directive></cpp:else>

    <case pos:start="161:5" pos:end="161:28">case <expr pos:start="161:10" pos:end="161:27"><name pos:start="161:10" pos:end="161:27">CODEC_ID_PCM_F64BE</name></expr>:</case>

        <macro pos:start="163:9" pos:end="163:52"><name pos:start="163:9" pos:end="163:14">ENCODE</name><argument_list pos:start="163:15" pos:end="163:52">(<argument pos:start="163:16" pos:end="163:22">int64_t</argument>, <argument pos:start="163:25" pos:end="163:28">be64</argument>, <argument pos:start="163:31" pos:end="163:37">samples</argument>, <argument pos:start="163:40" pos:end="163:42">dst</argument>, <argument pos:start="163:45" pos:end="163:45">n</argument>, <argument pos:start="163:48" pos:end="163:48"><literal type="number" pos:start="163:48" pos:end="163:48">0</literal></argument>, <argument pos:start="163:51" pos:end="163:51"><literal type="number" pos:start="163:51" pos:end="163:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="165:9" pos:end="165:14">break;</break>

    <case pos:start="167:5" pos:end="167:28">case <expr pos:start="167:10" pos:end="167:27"><name pos:start="167:10" pos:end="167:27">CODEC_ID_PCM_F32BE</name></expr>:</case>

    <case pos:start="169:5" pos:end="169:28">case <expr pos:start="169:10" pos:end="169:27"><name pos:start="169:10" pos:end="169:27">CODEC_ID_PCM_S32BE</name></expr>:</case>

        <macro pos:start="171:9" pos:end="171:52"><name pos:start="171:9" pos:end="171:14">ENCODE</name><argument_list pos:start="171:15" pos:end="171:52">(<argument pos:start="171:16" pos:end="171:22">int32_t</argument>, <argument pos:start="171:25" pos:end="171:28">be32</argument>, <argument pos:start="171:31" pos:end="171:37">samples</argument>, <argument pos:start="171:40" pos:end="171:42">dst</argument>, <argument pos:start="171:45" pos:end="171:45">n</argument>, <argument pos:start="171:48" pos:end="171:48"><literal type="number" pos:start="171:48" pos:end="171:48">0</literal></argument>, <argument pos:start="171:51" pos:end="171:51"><literal type="number" pos:start="171:51" pos:end="171:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="173:9" pos:end="173:14">break;</break>

    <case pos:start="175:5" pos:end="175:28">case <expr pos:start="175:10" pos:end="175:27"><name pos:start="175:10" pos:end="175:27">CODEC_ID_PCM_S16BE</name></expr>:</case>

        <macro pos:start="177:9" pos:end="177:52"><name pos:start="177:9" pos:end="177:14">ENCODE</name><argument_list pos:start="177:15" pos:end="177:52">(<argument pos:start="177:16" pos:end="177:22">int16_t</argument>, <argument pos:start="177:25" pos:end="177:28">be16</argument>, <argument pos:start="177:31" pos:end="177:37">samples</argument>, <argument pos:start="177:40" pos:end="177:42">dst</argument>, <argument pos:start="177:45" pos:end="177:45">n</argument>, <argument pos:start="177:48" pos:end="177:48"><literal type="number" pos:start="177:48" pos:end="177:48">0</literal></argument>, <argument pos:start="177:51" pos:end="177:51"><literal type="number" pos:start="177:51" pos:end="177:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="179:9" pos:end="179:14">break;</break>

    <case pos:start="181:5" pos:end="181:28">case <expr pos:start="181:10" pos:end="181:27"><name pos:start="181:10" pos:end="181:27">CODEC_ID_PCM_F64LE</name></expr>:</case>

    <case pos:start="183:5" pos:end="183:28">case <expr pos:start="183:10" pos:end="183:27"><name pos:start="183:10" pos:end="183:27">CODEC_ID_PCM_F32LE</name></expr>:</case>

    <case pos:start="185:5" pos:end="185:28">case <expr pos:start="185:10" pos:end="185:27"><name pos:start="185:10" pos:end="185:27">CODEC_ID_PCM_S32LE</name></expr>:</case>

    <case pos:start="187:5" pos:end="190:0">case <expr pos:start="187:10" pos:end="187:27"><name pos:start="187:10" pos:end="187:27">CODEC_ID_PCM_S16LE</name></expr>:</case>

<cpp:endif pos:start="189:1" pos:end="189:6">#<cpp:directive pos:start="189:2" pos:end="189:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="189:8" pos:end="189:27">/* HAVE_BIGENDIAN */</comment>

    <case pos:start="191:5" pos:end="191:25">case <expr pos:start="191:10" pos:end="191:24"><name pos:start="191:10" pos:end="191:24">CODEC_ID_PCM_U8</name></expr>:</case>

        <expr_stmt pos:start="193:9" pos:end="193:44"><expr pos:start="193:9" pos:end="193:43"><call pos:start="193:9" pos:end="193:43"><name pos:start="193:9" pos:end="193:14">memcpy</name><argument_list pos:start="193:15" pos:end="193:43">(<argument pos:start="193:16" pos:end="193:18"><expr pos:start="193:16" pos:end="193:18"><name pos:start="193:16" pos:end="193:18">dst</name></expr></argument>, <argument pos:start="193:21" pos:end="193:27"><expr pos:start="193:21" pos:end="193:27"><name pos:start="193:21" pos:end="193:27">samples</name></expr></argument>, <argument pos:start="193:30" pos:end="193:42"><expr pos:start="193:30" pos:end="193:42"><name pos:start="193:30" pos:end="193:30">n</name><operator pos:start="193:31" pos:end="193:31">*</operator><name pos:start="193:32" pos:end="193:42">sample_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:29"><expr pos:start="195:9" pos:end="195:28"><name pos:start="195:9" pos:end="195:11">dst</name> <operator pos:start="195:13" pos:end="195:14">+=</operator> <name pos:start="195:16" pos:end="195:16">n</name><operator pos:start="195:17" pos:end="195:17">*</operator><name pos:start="195:18" pos:end="195:28">sample_size</name></expr>;</expr_stmt>

        <break pos:start="197:9" pos:end="197:14">break;</break>

    <case pos:start="199:5" pos:end="199:27">case <expr pos:start="199:10" pos:end="199:26"><name pos:start="199:10" pos:end="199:26">CODEC_ID_PCM_ZORK</name></expr>:</case>

        <for pos:start="201:9" pos:end="211:9">for<control pos:start="201:12" pos:end="201:21">(<init pos:start="201:13" pos:end="201:13">;</init><condition pos:start="201:14" pos:end="201:17"><expr pos:start="201:14" pos:end="201:16"><name pos:start="201:14" pos:end="201:14">n</name><operator pos:start="201:15" pos:end="201:15">&gt;</operator><literal type="number" pos:start="201:16" pos:end="201:16">0</literal></expr>;</condition><incr pos:start="201:18" pos:end="201:20"><expr pos:start="201:18" pos:end="201:20"><name pos:start="201:18" pos:end="201:18">n</name><operator pos:start="201:19" pos:end="201:20">--</operator></expr></incr>)</control> <block pos:start="201:23" pos:end="211:9">{<block_content pos:start="203:13" pos:end="209:23">

            <expr_stmt pos:start="203:13" pos:end="203:31"><expr pos:start="203:13" pos:end="203:30"><name pos:start="203:13" pos:end="203:13">v</name><operator pos:start="203:14" pos:end="203:14">=</operator> <operator pos:start="203:16" pos:end="203:16">*</operator><name pos:start="203:17" pos:end="203:23">samples</name><operator pos:start="203:24" pos:end="203:25">++</operator> <operator pos:start="203:27" pos:end="203:28">&gt;&gt;</operator> <literal type="number" pos:start="203:30" pos:end="203:30">8</literal></expr>;</expr_stmt>

            <if_stmt pos:start="205:13" pos:end="207:30"><if pos:start="205:13" pos:end="205:29">if<condition pos:start="205:15" pos:end="205:19">(<expr pos:start="205:16" pos:end="205:18"><name pos:start="205:16" pos:end="205:16">v</name><operator pos:start="205:17" pos:end="205:17">&lt;</operator><literal type="number" pos:start="205:18" pos:end="205:18">0</literal></expr>)</condition><block type="pseudo" pos:start="205:23" pos:end="205:29"><block_content pos:start="205:23" pos:end="205:29">   <expr_stmt pos:start="205:23" pos:end="205:29"><expr pos:start="205:23" pos:end="205:28"><name pos:start="205:23" pos:end="205:23">v</name> <operator pos:start="205:25" pos:end="205:25">=</operator> <operator pos:start="205:27" pos:end="205:27">-</operator><name pos:start="205:28" pos:end="205:28">v</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="207:13" pos:end="207:30">else<block type="pseudo" pos:start="207:23" pos:end="207:30"><block_content pos:start="207:23" pos:end="207:30">      <expr_stmt pos:start="207:23" pos:end="207:30"><expr pos:start="207:23" pos:end="207:29"><name pos:start="207:23" pos:end="207:23">v</name><operator pos:start="207:24" pos:end="207:25">+=</operator> <literal type="number" pos:start="207:27" pos:end="207:29">128</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="209:13" pos:end="209:23"><expr pos:start="209:13" pos:end="209:22"><operator pos:start="209:13" pos:end="209:13">*</operator><name pos:start="209:14" pos:end="209:16">dst</name><operator pos:start="209:17" pos:end="209:18">++</operator> <operator pos:start="209:20" pos:end="209:20">=</operator> <name pos:start="209:22" pos:end="209:22">v</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="213:9" pos:end="213:14">break;</break>

    <case pos:start="215:5" pos:end="215:27">case <expr pos:start="215:10" pos:end="215:26"><name pos:start="215:10" pos:end="215:26">CODEC_ID_PCM_ALAW</name></expr>:</case>

        <for pos:start="217:9" pos:end="223:9">for<control pos:start="217:12" pos:end="217:21">(<init pos:start="217:13" pos:end="217:13">;</init><condition pos:start="217:14" pos:end="217:17"><expr pos:start="217:14" pos:end="217:16"><name pos:start="217:14" pos:end="217:14">n</name><operator pos:start="217:15" pos:end="217:15">&gt;</operator><literal type="number" pos:start="217:16" pos:end="217:16">0</literal></expr>;</condition><incr pos:start="217:18" pos:end="217:20"><expr pos:start="217:18" pos:end="217:20"><name pos:start="217:18" pos:end="217:18">n</name><operator pos:start="217:19" pos:end="217:20">--</operator></expr></incr>)</control> <block pos:start="217:23" pos:end="223:9">{<block_content pos:start="219:13" pos:end="221:54">

            <expr_stmt pos:start="219:13" pos:end="219:27"><expr pos:start="219:13" pos:end="219:26"><name pos:start="219:13" pos:end="219:13">v</name> <operator pos:start="219:15" pos:end="219:15">=</operator> <operator pos:start="219:17" pos:end="219:17">*</operator><name pos:start="219:18" pos:end="219:24">samples</name><operator pos:start="219:25" pos:end="219:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:54"><expr pos:start="221:13" pos:end="221:53"><operator pos:start="221:13" pos:end="221:13">*</operator><name pos:start="221:14" pos:end="221:16">dst</name><operator pos:start="221:17" pos:end="221:18">++</operator> <operator pos:start="221:20" pos:end="221:20">=</operator> <name pos:start="221:22" pos:end="221:53"><name pos:start="221:22" pos:end="221:35">linear_to_alaw</name><index pos:start="221:36" pos:end="221:53">[<expr pos:start="221:37" pos:end="221:52"><operator pos:start="221:37" pos:end="221:37">(</operator><name pos:start="221:38" pos:end="221:38">v</name> <operator pos:start="221:40" pos:end="221:40">+</operator> <literal type="number" pos:start="221:42" pos:end="221:46">32768</literal><operator pos:start="221:47" pos:end="221:47">)</operator> <operator pos:start="221:49" pos:end="221:50">&gt;&gt;</operator> <literal type="number" pos:start="221:52" pos:end="221:52">2</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="225:9" pos:end="225:14">break;</break>

    <case pos:start="227:5" pos:end="227:28">case <expr pos:start="227:10" pos:end="227:27"><name pos:start="227:10" pos:end="227:27">CODEC_ID_PCM_MULAW</name></expr>:</case>

        <for pos:start="229:9" pos:end="235:9">for<control pos:start="229:12" pos:end="229:21">(<init pos:start="229:13" pos:end="229:13">;</init><condition pos:start="229:14" pos:end="229:17"><expr pos:start="229:14" pos:end="229:16"><name pos:start="229:14" pos:end="229:14">n</name><operator pos:start="229:15" pos:end="229:15">&gt;</operator><literal type="number" pos:start="229:16" pos:end="229:16">0</literal></expr>;</condition><incr pos:start="229:18" pos:end="229:20"><expr pos:start="229:18" pos:end="229:20"><name pos:start="229:18" pos:end="229:18">n</name><operator pos:start="229:19" pos:end="229:20">--</operator></expr></incr>)</control> <block pos:start="229:23" pos:end="235:9">{<block_content pos:start="231:13" pos:end="233:54">

            <expr_stmt pos:start="231:13" pos:end="231:27"><expr pos:start="231:13" pos:end="231:26"><name pos:start="231:13" pos:end="231:13">v</name> <operator pos:start="231:15" pos:end="231:15">=</operator> <operator pos:start="231:17" pos:end="231:17">*</operator><name pos:start="231:18" pos:end="231:24">samples</name><operator pos:start="231:25" pos:end="231:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:54"><expr pos:start="233:13" pos:end="233:53"><operator pos:start="233:13" pos:end="233:13">*</operator><name pos:start="233:14" pos:end="233:16">dst</name><operator pos:start="233:17" pos:end="233:18">++</operator> <operator pos:start="233:20" pos:end="233:20">=</operator> <name pos:start="233:22" pos:end="233:53"><name pos:start="233:22" pos:end="233:35">linear_to_ulaw</name><index pos:start="233:36" pos:end="233:53">[<expr pos:start="233:37" pos:end="233:52"><operator pos:start="233:37" pos:end="233:37">(</operator><name pos:start="233:38" pos:end="233:38">v</name> <operator pos:start="233:40" pos:end="233:40">+</operator> <literal type="number" pos:start="233:42" pos:end="233:46">32768</literal><operator pos:start="233:47" pos:end="233:47">)</operator> <operator pos:start="233:49" pos:end="233:50">&gt;&gt;</operator> <literal type="number" pos:start="233:52" pos:end="233:52">2</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="237:9" pos:end="237:14">break;</break>

    <default pos:start="239:5" pos:end="239:12">default:</default>

        <return pos:start="241:9" pos:end="241:18">return <expr pos:start="241:16" pos:end="241:17"><operator pos:start="241:16" pos:end="241:16">-</operator><literal type="number" pos:start="241:17" pos:end="241:17">1</literal></expr>;</return>

    </block_content>}</block></switch>

    <comment type="line" pos:start="245:5" pos:end="245:74">//avctx-&gt;frame_size = (dst - frame) / (sample_size * avctx-&gt;channels);</comment>



    <return pos:start="249:5" pos:end="249:23">return <expr pos:start="249:12" pos:end="249:22"><name pos:start="249:12" pos:end="249:14">dst</name> <operator pos:start="249:16" pos:end="249:16">-</operator> <name pos:start="249:18" pos:end="249:22">frame</name></expr>;</return>

</block_content>}</block></function>
</unit>
