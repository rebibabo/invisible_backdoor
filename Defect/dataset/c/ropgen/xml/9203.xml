<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9203.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:40">aarch64_tr_init_disas_context</name><parameter_list pos:start="1:41" pos:end="3:70">(<parameter pos:start="1:42" pos:end="1:65"><decl pos:start="1:42" pos:end="1:65"><type pos:start="1:42" pos:end="1:65"><name pos:start="1:42" pos:end="1:57">DisasContextBase</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:65">dcbase</name></decl></parameter>,

                                         <parameter pos:start="3:42" pos:end="3:54"><decl pos:start="3:42" pos:end="3:54"><type pos:start="3:42" pos:end="3:54"><name pos:start="3:42" pos:end="3:49">CPUState</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:54">cpu</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:69"><decl pos:start="3:57" pos:end="3:69"><type pos:start="3:57" pos:end="3:69"><name pos:start="3:57" pos:end="3:59">int</name></type> <name pos:start="3:61" pos:end="3:69">max_insns</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="121:1">{<block_content pos:start="7:5" pos:end="119:21">

    <decl_stmt pos:start="7:5" pos:end="7:64"><decl pos:start="7:5" pos:end="7:63"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">DisasContext</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:20">dc</name> <init pos:start="7:22" pos:end="7:63">= <expr pos:start="7:24" pos:end="7:63"><call pos:start="7:24" pos:end="7:63"><name pos:start="7:24" pos:end="7:35">container_of</name><argument_list pos:start="7:36" pos:end="7:63">(<argument pos:start="7:37" pos:end="7:42"><expr pos:start="7:37" pos:end="7:42"><name pos:start="7:37" pos:end="7:42">dcbase</name></expr></argument>, <argument pos:start="7:45" pos:end="7:56"><expr pos:start="7:45" pos:end="7:56"><name pos:start="7:45" pos:end="7:56">DisasContext</name></expr></argument>, <argument pos:start="7:59" pos:end="7:62"><expr pos:start="7:59" pos:end="7:62"><name pos:start="7:59" pos:end="7:62">base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">CPUARMState</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">env</name> <init pos:start="9:22" pos:end="9:35">= <expr pos:start="9:24" pos:end="9:35"><name pos:start="9:24" pos:end="9:35"><name pos:start="9:24" pos:end="9:26">cpu</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:35">env_ptr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:43"><decl pos:start="11:5" pos:end="11:42"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:10">ARMCPU</name> <modifier pos:start="11:12" pos:end="11:12">*</modifier></type><name pos:start="11:13" pos:end="11:19">arm_cpu</name> <init pos:start="11:21" pos:end="11:42">= <expr pos:start="11:23" pos:end="11:42"><call pos:start="11:23" pos:end="11:42"><name pos:start="11:23" pos:end="11:37">arm_env_get_cpu</name><argument_list pos:start="11:38" pos:end="11:42">(<argument pos:start="11:39" pos:end="11:41"><expr pos:start="11:39" pos:end="11:41"><name pos:start="11:39" pos:end="11:41">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:31"><expr pos:start="15:5" pos:end="15:30"><name pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:6">dc</name><operator pos:start="15:7" pos:end="15:8">-&gt;</operator><name pos:start="15:9" pos:end="15:10">pc</name></name> <operator pos:start="15:12" pos:end="15:12">=</operator> <name pos:start="15:14" pos:end="15:30"><name pos:start="15:14" pos:end="15:15">dc</name><operator pos:start="15:16" pos:end="15:17">-&gt;</operator><name pos:start="15:18" pos:end="15:21">base</name><operator pos:start="15:22" pos:end="15:22">.</operator><name pos:start="15:23" pos:end="15:30">pc_first</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:20"><expr pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:6">dc</name><operator pos:start="17:7" pos:end="17:8">-&gt;</operator><name pos:start="17:9" pos:end="17:15">condjmp</name></name> <operator pos:start="17:17" pos:end="17:17">=</operator> <literal type="number" pos:start="17:19" pos:end="17:19">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:20"><expr pos:start="21:5" pos:end="21:19"><name pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:6">dc</name><operator pos:start="21:7" pos:end="21:8">-&gt;</operator><name pos:start="21:9" pos:end="21:15">aarch64</name></name> <operator pos:start="21:17" pos:end="21:17">=</operator> <literal type="number" pos:start="21:19" pos:end="21:19">1</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="23:5" pos:end="27:7">/* If we are coming from secure EL0 in a system with a 32-bit EL3, then

     * there is no secure EL1, so we route exceptions to EL3.

     */</comment>

    <expr_stmt pos:start="29:5" pos:end="31:55"><expr pos:start="29:5" pos:end="31:54"><name pos:start="29:5" pos:end="29:28"><name pos:start="29:5" pos:end="29:6">dc</name><operator pos:start="29:7" pos:end="29:8">-&gt;</operator><name pos:start="29:9" pos:end="29:28">secure_routed_to_el3</name></name> <operator pos:start="29:30" pos:end="29:30">=</operator> <call pos:start="29:32" pos:end="29:64"><name pos:start="29:32" pos:end="29:42">arm_feature</name><argument_list pos:start="29:43" pos:end="29:64">(<argument pos:start="29:44" pos:end="29:46"><expr pos:start="29:44" pos:end="29:46"><name pos:start="29:44" pos:end="29:46">env</name></expr></argument>, <argument pos:start="29:49" pos:end="29:63"><expr pos:start="29:49" pos:end="29:63"><name pos:start="29:49" pos:end="29:63">ARM_FEATURE_EL3</name></expr></argument>)</argument_list></call> <operator pos:start="29:66" pos:end="29:67">&amp;&amp;</operator>

                               <operator pos:start="31:32" pos:end="31:32">!</operator><call pos:start="31:33" pos:end="31:54"><name pos:start="31:33" pos:end="31:46">arm_el_is_aa64</name><argument_list pos:start="31:47" pos:end="31:54">(<argument pos:start="31:48" pos:end="31:50"><expr pos:start="31:48" pos:end="31:50"><name pos:start="31:48" pos:end="31:50">env</name></expr></argument>, <argument pos:start="31:53" pos:end="31:53"><expr pos:start="31:53" pos:end="31:53"><literal type="number" pos:start="31:53" pos:end="31:53">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:18"><expr pos:start="33:5" pos:end="33:17"><name pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:6">dc</name><operator pos:start="33:7" pos:end="33:8">-&gt;</operator><name pos:start="33:9" pos:end="33:13">thumb</name></name> <operator pos:start="33:15" pos:end="33:15">=</operator> <literal type="number" pos:start="33:17" pos:end="33:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:20"><expr pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:15"><name pos:start="35:5" pos:end="35:6">dc</name><operator pos:start="35:7" pos:end="35:8">-&gt;</operator><name pos:start="35:9" pos:end="35:15">sctlr_b</name></name> <operator pos:start="35:17" pos:end="35:17">=</operator> <literal type="number" pos:start="35:19" pos:end="35:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:73"><expr pos:start="37:5" pos:end="37:72"><name pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:6">dc</name><operator pos:start="37:7" pos:end="37:8">-&gt;</operator><name pos:start="37:9" pos:end="37:15">be_data</name></name> <operator pos:start="37:17" pos:end="37:17">=</operator> <ternary pos:start="37:19" pos:end="37:72"><condition pos:start="37:19" pos:end="37:58"><expr pos:start="37:19" pos:end="37:56"><call pos:start="37:19" pos:end="37:56"><name pos:start="37:19" pos:end="37:36">ARM_TBFLAG_BE_DATA</name><argument_list pos:start="37:37" pos:end="37:56">(<argument pos:start="37:38" pos:end="37:55"><expr pos:start="37:38" pos:end="37:55"><name pos:start="37:38" pos:end="37:55"><name pos:start="37:38" pos:end="37:39">dc</name><operator pos:start="37:40" pos:end="37:41">-&gt;</operator><name pos:start="37:42" pos:end="37:45">base</name><operator pos:start="37:46" pos:end="37:46">.</operator><name pos:start="37:47" pos:end="37:48">tb</name><operator pos:start="37:49" pos:end="37:50">-&gt;</operator><name pos:start="37:51" pos:end="37:55">flags</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="37:60" pos:end="37:64"> <expr pos:start="37:60" pos:end="37:64"><name pos:start="37:60" pos:end="37:64">MO_BE</name></expr> </then><else pos:start="37:66" pos:end="37:72">: <expr pos:start="37:68" pos:end="37:72"><name pos:start="37:68" pos:end="37:72">MO_LE</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:26"><expr pos:start="39:5" pos:end="39:25"><name pos:start="39:5" pos:end="39:21"><name pos:start="39:5" pos:end="39:6">dc</name><operator pos:start="39:7" pos:end="39:8">-&gt;</operator><name pos:start="39:9" pos:end="39:21">condexec_mask</name></name> <operator pos:start="39:23" pos:end="39:23">=</operator> <literal type="number" pos:start="39:25" pos:end="39:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:26"><expr pos:start="41:5" pos:end="41:25"><name pos:start="41:5" pos:end="41:21"><name pos:start="41:5" pos:end="41:6">dc</name><operator pos:start="41:7" pos:end="41:8">-&gt;</operator><name pos:start="41:9" pos:end="41:21">condexec_cond</name></name> <operator pos:start="41:23" pos:end="41:23">=</operator> <literal type="number" pos:start="41:25" pos:end="41:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:82"><expr pos:start="43:5" pos:end="43:81"><name pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:6">dc</name><operator pos:start="43:7" pos:end="43:8">-&gt;</operator><name pos:start="43:9" pos:end="43:15">mmu_idx</name></name> <operator pos:start="43:17" pos:end="43:17">=</operator> <call pos:start="43:19" pos:end="43:81"><name pos:start="43:19" pos:end="43:37">core_to_arm_mmu_idx</name><argument_list pos:start="43:38" pos:end="43:81">(<argument pos:start="43:39" pos:end="43:41"><expr pos:start="43:39" pos:end="43:41"><name pos:start="43:39" pos:end="43:41">env</name></expr></argument>, <argument pos:start="43:44" pos:end="43:80"><expr pos:start="43:44" pos:end="43:80"><call pos:start="43:44" pos:end="43:80"><name pos:start="43:44" pos:end="43:60">ARM_TBFLAG_MMUIDX</name><argument_list pos:start="43:61" pos:end="43:80">(<argument pos:start="43:62" pos:end="43:79"><expr pos:start="43:62" pos:end="43:79"><name pos:start="43:62" pos:end="43:79"><name pos:start="43:62" pos:end="43:63">dc</name><operator pos:start="43:64" pos:end="43:65">-&gt;</operator><name pos:start="43:66" pos:end="43:69">base</name><operator pos:start="43:70" pos:end="43:70">.</operator><name pos:start="43:71" pos:end="43:72">tb</name><operator pos:start="43:73" pos:end="43:74">-&gt;</operator><name pos:start="43:75" pos:end="43:79">flags</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:51"><expr pos:start="45:5" pos:end="45:50"><name pos:start="45:5" pos:end="45:12"><name pos:start="45:5" pos:end="45:6">dc</name><operator pos:start="45:7" pos:end="45:8">-&gt;</operator><name pos:start="45:9" pos:end="45:12">tbi0</name></name> <operator pos:start="45:14" pos:end="45:14">=</operator> <call pos:start="45:16" pos:end="45:50"><name pos:start="45:16" pos:end="45:30">ARM_TBFLAG_TBI0</name><argument_list pos:start="45:31" pos:end="45:50">(<argument pos:start="45:32" pos:end="45:49"><expr pos:start="45:32" pos:end="45:49"><name pos:start="45:32" pos:end="45:49"><name pos:start="45:32" pos:end="45:33">dc</name><operator pos:start="45:34" pos:end="45:35">-&gt;</operator><name pos:start="45:36" pos:end="45:39">base</name><operator pos:start="45:40" pos:end="45:40">.</operator><name pos:start="45:41" pos:end="45:42">tb</name><operator pos:start="45:43" pos:end="45:44">-&gt;</operator><name pos:start="45:45" pos:end="45:49">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:51"><expr pos:start="47:5" pos:end="47:50"><name pos:start="47:5" pos:end="47:12"><name pos:start="47:5" pos:end="47:6">dc</name><operator pos:start="47:7" pos:end="47:8">-&gt;</operator><name pos:start="47:9" pos:end="47:12">tbi1</name></name> <operator pos:start="47:14" pos:end="47:14">=</operator> <call pos:start="47:16" pos:end="47:50"><name pos:start="47:16" pos:end="47:30">ARM_TBFLAG_TBI1</name><argument_list pos:start="47:31" pos:end="47:50">(<argument pos:start="47:32" pos:end="47:49"><expr pos:start="47:32" pos:end="47:49"><name pos:start="47:32" pos:end="47:49"><name pos:start="47:32" pos:end="47:33">dc</name><operator pos:start="47:34" pos:end="47:35">-&gt;</operator><name pos:start="47:36" pos:end="47:39">base</name><operator pos:start="47:40" pos:end="47:40">.</operator><name pos:start="47:41" pos:end="47:42">tb</name><operator pos:start="47:43" pos:end="47:44">-&gt;</operator><name pos:start="47:45" pos:end="47:49">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="52:0"><expr pos:start="49:5" pos:end="49:51"><name pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:6">dc</name><operator pos:start="49:7" pos:end="49:8">-&gt;</operator><name pos:start="49:9" pos:end="49:18">current_el</name></name> <operator pos:start="49:20" pos:end="49:20">=</operator> <call pos:start="49:22" pos:end="49:51"><name pos:start="49:22" pos:end="49:38">arm_mmu_idx_to_el</name><argument_list pos:start="49:39" pos:end="49:51">(<argument pos:start="49:40" pos:end="49:50"><expr pos:start="49:40" pos:end="49:50"><name pos:start="49:40" pos:end="49:50"><name pos:start="49:40" pos:end="49:41">dc</name><operator pos:start="49:42" pos:end="49:43">-&gt;</operator><name pos:start="49:44" pos:end="49:50">mmu_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="51:1" pos:end="51:30">#<cpp:directive pos:start="51:2" pos:end="51:3">if</cpp:directive> <expr pos:start="51:5" pos:end="51:30"><operator pos:start="51:5" pos:end="51:5">!</operator><call pos:start="51:6" pos:end="51:30"><name pos:start="51:6" pos:end="51:12">defined</name><argument_list pos:start="51:13" pos:end="51:30">(<argument pos:start="51:14" pos:end="51:29"><expr pos:start="51:14" pos:end="51:29"><name pos:start="51:14" pos:end="51:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="53:5" pos:end="56:0"><expr pos:start="53:5" pos:end="53:36"><name pos:start="53:5" pos:end="53:12"><name pos:start="53:5" pos:end="53:6">dc</name><operator pos:start="53:7" pos:end="53:8">-&gt;</operator><name pos:start="53:9" pos:end="53:12">user</name></name> <operator pos:start="53:14" pos:end="53:14">=</operator> <operator pos:start="53:16" pos:end="53:16">(</operator><name pos:start="53:17" pos:end="53:30"><name pos:start="53:17" pos:end="53:18">dc</name><operator pos:start="53:19" pos:end="53:20">-&gt;</operator><name pos:start="53:21" pos:end="53:30">current_el</name></name> <operator pos:start="53:32" pos:end="53:33">==</operator> <literal type="number" pos:start="53:35" pos:end="53:35">0</literal><operator pos:start="53:36" pos:end="53:36">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="55:1" pos:end="55:6">#<cpp:directive pos:start="55:2" pos:end="55:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="57:5" pos:end="57:61"><expr pos:start="57:5" pos:end="57:60"><name pos:start="57:5" pos:end="57:18"><name pos:start="57:5" pos:end="57:6">dc</name><operator pos:start="57:7" pos:end="57:8">-&gt;</operator><name pos:start="57:9" pos:end="57:18">fp_excp_el</name></name> <operator pos:start="57:20" pos:end="57:20">=</operator> <call pos:start="57:22" pos:end="57:60"><name pos:start="57:22" pos:end="57:40">ARM_TBFLAG_FPEXC_EL</name><argument_list pos:start="57:41" pos:end="57:60">(<argument pos:start="57:42" pos:end="57:59"><expr pos:start="57:42" pos:end="57:59"><name pos:start="57:42" pos:end="57:59"><name pos:start="57:42" pos:end="57:43">dc</name><operator pos:start="57:44" pos:end="57:45">-&gt;</operator><name pos:start="57:46" pos:end="57:49">base</name><operator pos:start="57:50" pos:end="57:50">.</operator><name pos:start="57:51" pos:end="57:52">tb</name><operator pos:start="57:53" pos:end="57:54">-&gt;</operator><name pos:start="57:55" pos:end="57:59">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:20"><expr pos:start="59:5" pos:end="59:19"><name pos:start="59:5" pos:end="59:15"><name pos:start="59:5" pos:end="59:6">dc</name><operator pos:start="59:7" pos:end="59:8">-&gt;</operator><name pos:start="59:9" pos:end="59:15">vec_len</name></name> <operator pos:start="59:17" pos:end="59:17">=</operator> <literal type="number" pos:start="59:19" pos:end="59:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:23"><expr pos:start="61:5" pos:end="61:22"><name pos:start="61:5" pos:end="61:18"><name pos:start="61:5" pos:end="61:6">dc</name><operator pos:start="61:7" pos:end="61:8">-&gt;</operator><name pos:start="61:9" pos:end="61:18">vec_stride</name></name> <operator pos:start="61:20" pos:end="61:20">=</operator> <literal type="number" pos:start="61:22" pos:end="61:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:35"><expr pos:start="63:5" pos:end="63:34"><name pos:start="63:5" pos:end="63:15"><name pos:start="63:5" pos:end="63:6">dc</name><operator pos:start="63:7" pos:end="63:8">-&gt;</operator><name pos:start="63:9" pos:end="63:15">cp_regs</name></name> <operator pos:start="63:17" pos:end="63:17">=</operator> <name pos:start="63:19" pos:end="63:34"><name pos:start="63:19" pos:end="63:25">arm_cpu</name><operator pos:start="63:26" pos:end="63:27">-&gt;</operator><name pos:start="63:28" pos:end="63:34">cp_regs</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:33"><expr pos:start="65:5" pos:end="65:32"><name pos:start="65:5" pos:end="65:16"><name pos:start="65:5" pos:end="65:6">dc</name><operator pos:start="65:7" pos:end="65:8">-&gt;</operator><name pos:start="65:9" pos:end="65:16">features</name></name> <operator pos:start="65:18" pos:end="65:18">=</operator> <name pos:start="65:20" pos:end="65:32"><name pos:start="65:20" pos:end="65:22">env</name><operator pos:start="65:23" pos:end="65:24">-&gt;</operator><name pos:start="65:25" pos:end="65:32">features</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="69:5" pos:end="97:7">/* Single step state. The code-generation logic here is:

     *  SS_ACTIVE == 0:

     *   generate code with no special handling for single-stepping (except

     *   that anything that can make us go to SS_ACTIVE == 1 must end the TB;

     *   this happens anyway because those changes are all system register or

     *   PSTATE writes).

     *  SS_ACTIVE == 1, PSTATE.SS == 1: (active-not-pending)

     *   emit code for one insn

     *   emit code to clear PSTATE.SS

     *   emit code to generate software step exception for completed step

     *   end TB (as usual for having generated an exception)

     *  SS_ACTIVE == 1, PSTATE.SS == 0: (active-pending)

     *   emit code to generate a software step exception

     *   end the TB

     */</comment>

    <expr_stmt pos:start="99:5" pos:end="99:61"><expr pos:start="99:5" pos:end="99:60"><name pos:start="99:5" pos:end="99:17"><name pos:start="99:5" pos:end="99:6">dc</name><operator pos:start="99:7" pos:end="99:8">-&gt;</operator><name pos:start="99:9" pos:end="99:17">ss_active</name></name> <operator pos:start="99:19" pos:end="99:19">=</operator> <call pos:start="99:21" pos:end="99:60"><name pos:start="99:21" pos:end="99:40">ARM_TBFLAG_SS_ACTIVE</name><argument_list pos:start="99:41" pos:end="99:60">(<argument pos:start="99:42" pos:end="99:59"><expr pos:start="99:42" pos:end="99:59"><name pos:start="99:42" pos:end="99:59"><name pos:start="99:42" pos:end="99:43">dc</name><operator pos:start="99:44" pos:end="99:45">-&gt;</operator><name pos:start="99:46" pos:end="99:49">base</name><operator pos:start="99:50" pos:end="99:50">.</operator><name pos:start="99:51" pos:end="99:52">tb</name><operator pos:start="99:53" pos:end="99:54">-&gt;</operator><name pos:start="99:55" pos:end="99:59">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:61"><expr pos:start="101:5" pos:end="101:60"><name pos:start="101:5" pos:end="101:17"><name pos:start="101:5" pos:end="101:6">dc</name><operator pos:start="101:7" pos:end="101:8">-&gt;</operator><name pos:start="101:9" pos:end="101:17">pstate_ss</name></name> <operator pos:start="101:19" pos:end="101:19">=</operator> <call pos:start="101:21" pos:end="101:60"><name pos:start="101:21" pos:end="101:40">ARM_TBFLAG_PSTATE_SS</name><argument_list pos:start="101:41" pos:end="101:60">(<argument pos:start="101:42" pos:end="101:59"><expr pos:start="101:42" pos:end="101:59"><name pos:start="101:42" pos:end="101:59"><name pos:start="101:42" pos:end="101:43">dc</name><operator pos:start="101:44" pos:end="101:45">-&gt;</operator><name pos:start="101:46" pos:end="101:49">base</name><operator pos:start="101:50" pos:end="101:50">.</operator><name pos:start="101:51" pos:end="101:52">tb</name><operator pos:start="101:53" pos:end="101:54">-&gt;</operator><name pos:start="101:55" pos:end="101:59">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:24"><expr pos:start="103:5" pos:end="103:23"><name pos:start="103:5" pos:end="103:15"><name pos:start="103:5" pos:end="103:6">dc</name><operator pos:start="103:7" pos:end="103:8">-&gt;</operator><name pos:start="103:9" pos:end="103:15">is_ldex</name></name> <operator pos:start="103:17" pos:end="103:17">=</operator> <name pos:start="103:19" pos:end="103:23">false</name></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:66"><expr pos:start="105:5" pos:end="105:65"><name pos:start="105:5" pos:end="105:18"><name pos:start="105:5" pos:end="105:6">dc</name><operator pos:start="105:7" pos:end="105:8">-&gt;</operator><name pos:start="105:9" pos:end="105:18">ss_same_el</name></name> <operator pos:start="105:20" pos:end="105:20">=</operator> <operator pos:start="105:22" pos:end="105:22">(</operator><call pos:start="105:23" pos:end="105:46"><name pos:start="105:23" pos:end="105:41">arm_debug_target_el</name><argument_list pos:start="105:42" pos:end="105:46">(<argument pos:start="105:43" pos:end="105:45"><expr pos:start="105:43" pos:end="105:45"><name pos:start="105:43" pos:end="105:45">env</name></expr></argument>)</argument_list></call> <operator pos:start="105:48" pos:end="105:49">==</operator> <name pos:start="105:51" pos:end="105:64"><name pos:start="105:51" pos:end="105:52">dc</name><operator pos:start="105:53" pos:end="105:54">-&gt;</operator><name pos:start="105:55" pos:end="105:64">current_el</name></name><operator pos:start="105:65" pos:end="105:65">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="109:5" pos:end="111:66"><expr pos:start="109:5" pos:end="111:65"><name pos:start="109:5" pos:end="109:23"><name pos:start="109:5" pos:end="109:6">dc</name><operator pos:start="109:7" pos:end="109:8">-&gt;</operator><name pos:start="109:9" pos:end="109:23">next_page_start</name></name> <operator pos:start="109:25" pos:end="109:25">=</operator>

        <operator pos:start="111:9" pos:end="111:9">(</operator><name pos:start="111:10" pos:end="111:26"><name pos:start="111:10" pos:end="111:11">dc</name><operator pos:start="111:12" pos:end="111:13">-&gt;</operator><name pos:start="111:14" pos:end="111:17">base</name><operator pos:start="111:18" pos:end="111:18">.</operator><name pos:start="111:19" pos:end="111:26">pc_first</name></name> <operator pos:start="111:28" pos:end="111:28">&amp;</operator> <name pos:start="111:30" pos:end="111:45">TARGET_PAGE_MASK</name><operator pos:start="111:46" pos:end="111:46">)</operator> <operator pos:start="111:48" pos:end="111:48">+</operator> <name pos:start="111:50" pos:end="111:65">TARGET_PAGE_SIZE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:27"><expr pos:start="115:5" pos:end="115:26"><call pos:start="115:5" pos:end="115:26"><name pos:start="115:5" pos:end="115:22">init_tmp_a64_array</name><argument_list pos:start="115:23" pos:end="115:26">(<argument pos:start="115:24" pos:end="115:25"><expr pos:start="115:24" pos:end="115:25"><name pos:start="115:24" pos:end="115:25">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="119:5" pos:end="119:21">return <expr pos:start="119:12" pos:end="119:20"><name pos:start="119:12" pos:end="119:20">max_insns</name></expr>;</return>

</block_content>}</block></function>
</unit>
