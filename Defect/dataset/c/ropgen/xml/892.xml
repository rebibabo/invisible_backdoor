<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/892.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:23">qcow2_zero_clusters</name><parameter_list pos:start="1:24" pos:end="1:78">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:44"><name pos:start="1:25" pos:end="1:40">BlockDriverState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">bs</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:61"><decl pos:start="1:47" pos:end="1:61"><type pos:start="1:47" pos:end="1:61"><name pos:start="1:47" pos:end="1:54">uint64_t</name></type> <name pos:start="1:56" pos:end="1:61">offset</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:77"><decl pos:start="1:64" pos:end="1:77"><type pos:start="1:64" pos:end="1:77"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:77">nb_sectors</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:15">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">BDRVQcow2State</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:34">= <expr pos:start="5:25" pos:end="5:34"><name pos:start="5:25" pos:end="5:34"><name pos:start="5:25" pos:end="5:26">bs</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:28">nb_clusters</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:64">/* The zero flag is only supported by version 3 and newer */</comment>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:28">(<expr pos:start="15:9" pos:end="15:27"><name pos:start="15:9" pos:end="15:23"><name pos:start="15:9" pos:end="15:9">s</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:23">qcow_version</name></name> <operator pos:start="15:25" pos:end="15:25">&lt;</operator> <literal type="number" pos:start="15:27" pos:end="15:27">3</literal></expr>)</condition> <block pos:start="15:30" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:24">

        <return pos:start="17:9" pos:end="17:24">return <expr pos:start="17:16" pos:end="17:23"><operator pos:start="17:16" pos:end="17:16">-</operator><name pos:start="17:17" pos:end="17:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:60">/* Each L2 table is handled by its own loop iteration */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:70"><expr pos:start="25:5" pos:end="25:69"><name pos:start="25:5" pos:end="25:15">nb_clusters</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <call pos:start="25:19" pos:end="25:69"><name pos:start="25:19" pos:end="25:34">size_to_clusters</name><argument_list pos:start="25:35" pos:end="25:69">(<argument pos:start="25:36" pos:end="25:36"><expr pos:start="25:36" pos:end="25:36"><name pos:start="25:36" pos:end="25:36">s</name></expr></argument>, <argument pos:start="25:39" pos:end="25:68"><expr pos:start="25:39" pos:end="25:68"><name pos:start="25:39" pos:end="25:48">nb_sectors</name> <operator pos:start="25:50" pos:end="25:51">&lt;&lt;</operator> <name pos:start="25:53" pos:end="25:68">BDRV_SECTOR_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:29"><expr pos:start="29:5" pos:end="29:28"><name pos:start="29:5" pos:end="29:21"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:21">cache_discards</name></name> <operator pos:start="29:23" pos:end="29:23">=</operator> <name pos:start="29:25" pos:end="29:28">true</name></expr>;</expr_stmt>



    <while pos:start="33:5" pos:end="49:5">while <condition pos:start="33:11" pos:end="33:27">(<expr pos:start="33:12" pos:end="33:26"><name pos:start="33:12" pos:end="33:22">nb_clusters</name> <operator pos:start="33:24" pos:end="33:24">&gt;</operator> <literal type="number" pos:start="33:26" pos:end="33:26">0</literal></expr>)</condition> <block pos:start="33:29" pos:end="49:5">{<block_content pos:start="35:9" pos:end="47:42">

        <expr_stmt pos:start="35:9" pos:end="35:54"><expr pos:start="35:9" pos:end="35:53"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="35:53"><name pos:start="35:15" pos:end="35:28">zero_single_l2</name><argument_list pos:start="35:29" pos:end="35:53">(<argument pos:start="35:30" pos:end="35:31"><expr pos:start="35:30" pos:end="35:31"><name pos:start="35:30" pos:end="35:31">bs</name></expr></argument>, <argument pos:start="35:34" pos:end="35:39"><expr pos:start="35:34" pos:end="35:39"><name pos:start="35:34" pos:end="35:39">offset</name></expr></argument>, <argument pos:start="35:42" pos:end="35:52"><expr pos:start="35:42" pos:end="35:52"><name pos:start="35:42" pos:end="35:52">nb_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:20">(<expr pos:start="37:13" pos:end="37:19"><name pos:start="37:13" pos:end="37:15">ret</name> <operator pos:start="37:17" pos:end="37:17">&lt;</operator> <literal type="number" pos:start="37:19" pos:end="37:19">0</literal></expr>)</condition> <block pos:start="37:22" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:22">

            <goto pos:start="39:13" pos:end="39:22">goto <name pos:start="39:18" pos:end="39:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:27"><expr pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:19">nb_clusters</name> <operator pos:start="45:21" pos:end="45:22">-=</operator> <name pos:start="45:24" pos:end="45:26">ret</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:42"><expr pos:start="47:9" pos:end="47:41"><name pos:start="47:9" pos:end="47:14">offset</name> <operator pos:start="47:16" pos:end="47:17">+=</operator> <operator pos:start="47:19" pos:end="47:19">(</operator><name pos:start="47:20" pos:end="47:22">ret</name> <operator pos:start="47:24" pos:end="47:24">*</operator> <name pos:start="47:26" pos:end="47:40"><name pos:start="47:26" pos:end="47:26">s</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:40">cluster_size</name></name><operator pos:start="47:41" pos:end="47:41">)</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="53:5" pos:end="53:12"><expr pos:start="53:5" pos:end="53:11"><name pos:start="53:5" pos:end="53:7">ret</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <literal type="number" pos:start="53:11" pos:end="53:11">0</literal></expr>;</expr_stmt>

<label pos:start="55:1" pos:end="55:5"><name pos:start="55:1" pos:end="55:4">fail</name>:</label>

    <expr_stmt pos:start="57:5" pos:end="57:30"><expr pos:start="57:5" pos:end="57:29"><name pos:start="57:5" pos:end="57:21"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:21">cache_discards</name></name> <operator pos:start="57:23" pos:end="57:23">=</operator> <name pos:start="57:25" pos:end="57:29">false</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:36"><expr pos:start="59:5" pos:end="59:35"><call pos:start="59:5" pos:end="59:35"><name pos:start="59:5" pos:end="59:26">qcow2_process_discards</name><argument_list pos:start="59:27" pos:end="59:35">(<argument pos:start="59:28" pos:end="59:29"><expr pos:start="59:28" pos:end="59:29"><name pos:start="59:28" pos:end="59:29">bs</name></expr></argument>, <argument pos:start="59:32" pos:end="59:34"><expr pos:start="59:32" pos:end="59:34"><name pos:start="59:32" pos:end="59:34">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="63:5" pos:end="63:15">return <expr pos:start="63:12" pos:end="63:14"><name pos:start="63:12" pos:end="63:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
