<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6169.c" pos:tabs="8"><function pos:start="1:1" pos:end="145:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:23">qcow2_grow_l1_table</name><parameter_list pos:start="1:24" pos:end="1:76">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:44"><name pos:start="1:25" pos:end="1:40">BlockDriverState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">bs</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:58"><decl pos:start="1:47" pos:end="1:58"><type pos:start="1:47" pos:end="1:58"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:58">min_size</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:75"><decl pos:start="1:61" pos:end="1:75"><type pos:start="1:61" pos:end="1:75"><name pos:start="1:61" pos:end="1:64">bool</name></type> <name pos:start="1:66" pos:end="1:75">exact_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="145:1">{<block_content pos:start="5:5" pos:end="143:15">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">BDRVQcowState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:33">= <expr pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:25">bs</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:19">new_l1_size</name></decl>, <decl pos:start="7:22" pos:end="7:33"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:22" pos:end="7:33">new_l1_size2</name></decl>, <decl pos:start="7:36" pos:end="7:38"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:36" pos:end="7:38">ret</name></decl>, <decl pos:start="7:41" pos:end="7:41"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:41" pos:end="7:41">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">uint64_t</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:26">new_l1_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:31">new_l1_table_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:20"><name pos:start="13:13" pos:end="13:16">data</name><index pos:start="13:17" pos:end="13:20">[<expr pos:start="13:18" pos:end="13:19"><literal type="number" pos:start="13:18" pos:end="13:19">12</literal></expr>]</index></name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="19:17"><if pos:start="17:5" pos:end="19:17">if <condition pos:start="17:8" pos:end="17:31">(<expr pos:start="17:9" pos:end="17:30"><name pos:start="17:9" pos:end="17:16">min_size</name> <operator pos:start="17:18" pos:end="17:19">&lt;=</operator> <name pos:start="17:21" pos:end="17:30"><name pos:start="17:21" pos:end="17:21">s</name><operator pos:start="17:22" pos:end="17:23">-&gt;</operator><name pos:start="17:24" pos:end="17:30">l1_size</name></name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:17"><block_content pos:start="19:9" pos:end="19:17">

        <return pos:start="19:9" pos:end="19:17">return <expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="50:0"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:19">(<expr pos:start="23:9" pos:end="23:18"><name pos:start="23:9" pos:end="23:18">exact_size</name></expr>)</condition> <block pos:start="23:21" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:31">

        <expr_stmt pos:start="25:9" pos:end="25:31"><expr pos:start="25:9" pos:end="25:30"><name pos:start="25:9" pos:end="25:19">new_l1_size</name> <operator pos:start="25:21" pos:end="25:21">=</operator> <name pos:start="25:23" pos:end="25:30">min_size</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="27:7" pos:end="50:0">else <block pos:start="27:12" pos:end="50:0">{<block_content pos:start="31:9" pos:end="43:9">

        <comment type="block" pos:start="29:9" pos:end="29:72">/* Bump size up to reduce the number of times we have to grow */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:33"><expr pos:start="31:9" pos:end="31:32"><name pos:start="31:9" pos:end="31:19">new_l1_size</name> <operator pos:start="31:21" pos:end="31:21">=</operator> <name pos:start="31:23" pos:end="31:32"><name pos:start="31:23" pos:end="31:23">s</name><operator pos:start="31:24" pos:end="31:25">-&gt;</operator><name pos:start="31:26" pos:end="31:32">l1_size</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:29">(<expr pos:start="33:13" pos:end="33:28"><name pos:start="33:13" pos:end="33:23">new_l1_size</name> <operator pos:start="33:25" pos:end="33:26">==</operator> <literal type="number" pos:start="33:28" pos:end="33:28">0</literal></expr>)</condition> <block pos:start="33:31" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:28">

            <expr_stmt pos:start="35:13" pos:end="35:28"><expr pos:start="35:13" pos:end="35:27"><name pos:start="35:13" pos:end="35:23">new_l1_size</name> <operator pos:start="35:25" pos:end="35:25">=</operator> <literal type="number" pos:start="35:27" pos:end="35:27">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <while pos:start="39:9" pos:end="43:9">while <condition pos:start="39:15" pos:end="39:38">(<expr pos:start="39:16" pos:end="39:37"><name pos:start="39:16" pos:end="39:23">min_size</name> <operator pos:start="39:25" pos:end="39:25">&gt;</operator> <name pos:start="39:27" pos:end="39:37">new_l1_size</name></expr>)</condition> <block pos:start="39:40" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:52">

            <expr_stmt pos:start="41:13" pos:end="41:52"><expr pos:start="41:13" pos:end="41:51"><name pos:start="41:13" pos:end="41:23">new_l1_size</name> <operator pos:start="41:25" pos:end="41:25">=</operator> <operator pos:start="41:27" pos:end="41:27">(</operator><name pos:start="41:28" pos:end="41:38">new_l1_size</name> <operator pos:start="41:40" pos:end="41:40">*</operator> <literal type="number" pos:start="41:42" pos:end="41:44">3</literal> <operator pos:start="41:44" pos:end="41:44">+</operator> <literal type="number" pos:start="41:46" pos:end="41:46">1</literal><operator pos:start="41:47" pos:end="41:47">)</operator> <operator pos:start="41:49" pos:end="41:49">/</operator> <literal type="number" pos:start="41:51" pos:end="41:51">2</literal></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></else></if_stmt>



<cpp:ifdef pos:start="49:1" pos:end="49:19">#<cpp:directive pos:start="49:2" pos:end="49:6">ifdef</cpp:directive> <name pos:start="49:8" pos:end="49:19">DEBUG_ALLOC2</name></cpp:ifdef>

    <expr_stmt pos:start="51:5" pos:end="54:0"><expr pos:start="51:5" pos:end="51:77"><call pos:start="51:5" pos:end="51:77"><name pos:start="51:5" pos:end="51:11">fprintf</name><argument_list pos:start="51:12" pos:end="51:77">(<argument pos:start="51:13" pos:end="51:18"><expr pos:start="51:13" pos:end="51:18"><name pos:start="51:13" pos:end="51:18">stderr</name></expr></argument>, <argument pos:start="51:21" pos:end="51:51"><expr pos:start="51:21" pos:end="51:51"><literal type="string" pos:start="51:21" pos:end="51:51">"grow l1_table from %d to %d\n"</literal></expr></argument>, <argument pos:start="51:54" pos:end="51:63"><expr pos:start="51:54" pos:end="51:63"><name pos:start="51:54" pos:end="51:63"><name pos:start="51:54" pos:end="51:54">s</name><operator pos:start="51:55" pos:end="51:56">-&gt;</operator><name pos:start="51:57" pos:end="51:63">l1_size</name></name></expr></argument>, <argument pos:start="51:66" pos:end="51:76"><expr pos:start="51:66" pos:end="51:76"><name pos:start="51:66" pos:end="51:76">new_l1_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="57:5" pos:end="57:50"><expr pos:start="57:5" pos:end="57:49"><name pos:start="57:5" pos:end="57:16">new_l1_size2</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <sizeof pos:start="57:20" pos:end="57:35">sizeof<argument_list pos:start="57:26" pos:end="57:35">(<argument pos:start="57:27" pos:end="57:34"><expr pos:start="57:27" pos:end="57:34"><name pos:start="57:27" pos:end="57:34">uint64_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="57:37" pos:end="57:37">*</operator> <name pos:start="57:39" pos:end="57:49">new_l1_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:62"><expr pos:start="59:5" pos:end="59:61"><name pos:start="59:5" pos:end="59:16">new_l1_table</name> <operator pos:start="59:18" pos:end="59:18">=</operator> <call pos:start="59:20" pos:end="59:61"><name pos:start="59:20" pos:end="59:28">g_malloc0</name><argument_list pos:start="59:29" pos:end="59:61">(<argument pos:start="59:30" pos:end="59:60"><expr pos:start="59:30" pos:end="59:60"><call pos:start="59:30" pos:end="59:60"><name pos:start="59:30" pos:end="59:41">align_offset</name><argument_list pos:start="59:42" pos:end="59:60">(<argument pos:start="59:43" pos:end="59:54"><expr pos:start="59:43" pos:end="59:54"><name pos:start="59:43" pos:end="59:54">new_l1_size2</name></expr></argument>, <argument pos:start="59:57" pos:end="59:59"><expr pos:start="59:57" pos:end="59:59"><literal type="number" pos:start="59:57" pos:end="59:59">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:69"><expr pos:start="61:5" pos:end="61:68"><call pos:start="61:5" pos:end="61:68"><name pos:start="61:5" pos:end="61:10">memcpy</name><argument_list pos:start="61:11" pos:end="61:68">(<argument pos:start="61:12" pos:end="61:23"><expr pos:start="61:12" pos:end="61:23"><name pos:start="61:12" pos:end="61:23">new_l1_table</name></expr></argument>, <argument pos:start="61:26" pos:end="61:36"><expr pos:start="61:26" pos:end="61:36"><name pos:start="61:26" pos:end="61:36"><name pos:start="61:26" pos:end="61:26">s</name><operator pos:start="61:27" pos:end="61:28">-&gt;</operator><name pos:start="61:29" pos:end="61:36">l1_table</name></name></expr></argument>, <argument pos:start="61:39" pos:end="61:67"><expr pos:start="61:39" pos:end="61:67"><name pos:start="61:39" pos:end="61:48"><name pos:start="61:39" pos:end="61:39">s</name><operator pos:start="61:40" pos:end="61:41">-&gt;</operator><name pos:start="61:42" pos:end="61:48">l1_size</name></name> <operator pos:start="61:50" pos:end="61:50">*</operator> <sizeof pos:start="61:52" pos:end="61:67">sizeof<argument_list pos:start="61:58" pos:end="61:67">(<argument pos:start="61:59" pos:end="61:66"><expr pos:start="61:59" pos:end="61:66"><name pos:start="61:59" pos:end="61:66">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:44">/* write new table (align to cluster) */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:55"><expr pos:start="67:5" pos:end="67:54"><call pos:start="67:5" pos:end="67:54"><name pos:start="67:5" pos:end="67:16">BLKDBG_EVENT</name><argument_list pos:start="67:17" pos:end="67:54">(<argument pos:start="67:18" pos:end="67:25"><expr pos:start="67:18" pos:end="67:25"><name pos:start="67:18" pos:end="67:25"><name pos:start="67:18" pos:end="67:19">bs</name><operator pos:start="67:20" pos:end="67:21">-&gt;</operator><name pos:start="67:22" pos:end="67:25">file</name></name></expr></argument>, <argument pos:start="67:28" pos:end="67:53"><expr pos:start="67:28" pos:end="67:53"><name pos:start="67:28" pos:end="67:53">BLKDBG_L1_GROW_ALLOC_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:65"><expr pos:start="69:5" pos:end="69:64"><name pos:start="69:5" pos:end="69:23">new_l1_table_offset</name> <operator pos:start="69:25" pos:end="69:25">=</operator> <call pos:start="69:27" pos:end="69:64"><name pos:start="69:27" pos:end="69:46">qcow2_alloc_clusters</name><argument_list pos:start="69:47" pos:end="69:64">(<argument pos:start="69:48" pos:end="69:49"><expr pos:start="69:48" pos:end="69:49"><name pos:start="69:48" pos:end="69:49">bs</name></expr></argument>, <argument pos:start="69:52" pos:end="69:63"><expr pos:start="69:52" pos:end="69:63"><name pos:start="69:52" pos:end="69:63">new_l1_size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="77:5"><if pos:start="71:5" pos:end="77:5">if <condition pos:start="71:8" pos:end="71:32">(<expr pos:start="71:9" pos:end="71:31"><name pos:start="71:9" pos:end="71:27">new_l1_table_offset</name> <operator pos:start="71:29" pos:end="71:29">&lt;</operator> <literal type="number" pos:start="71:31" pos:end="71:31">0</literal></expr>)</condition> <block pos:start="71:34" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:35">

        <expr_stmt pos:start="73:9" pos:end="73:29"><expr pos:start="73:9" pos:end="73:28"><call pos:start="73:9" pos:end="73:28"><name pos:start="73:9" pos:end="73:14">g_free</name><argument_list pos:start="73:15" pos:end="73:28">(<argument pos:start="73:16" pos:end="73:27"><expr pos:start="73:16" pos:end="73:27"><name pos:start="73:16" pos:end="73:27">new_l1_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:35">return <expr pos:start="75:16" pos:end="75:34"><name pos:start="75:16" pos:end="75:34">new_l1_table_offset</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:57"><expr pos:start="81:5" pos:end="81:56"><name pos:start="81:5" pos:end="81:7">ret</name> <operator pos:start="81:9" pos:end="81:9">=</operator> <call pos:start="81:11" pos:end="81:56"><name pos:start="81:11" pos:end="81:27">qcow2_cache_flush</name><argument_list pos:start="81:28" pos:end="81:56">(<argument pos:start="81:29" pos:end="81:30"><expr pos:start="81:29" pos:end="81:30"><name pos:start="81:29" pos:end="81:30">bs</name></expr></argument>, <argument pos:start="81:33" pos:end="81:55"><expr pos:start="81:33" pos:end="81:55"><name pos:start="81:33" pos:end="81:55"><name pos:start="81:33" pos:end="81:33">s</name><operator pos:start="81:34" pos:end="81:35">-&gt;</operator><name pos:start="81:36" pos:end="81:55">refcount_block_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="87:5"><if pos:start="83:5" pos:end="87:5">if <condition pos:start="83:8" pos:end="83:16">(<expr pos:start="83:9" pos:end="83:15"><name pos:start="83:9" pos:end="83:11">ret</name> <operator pos:start="83:13" pos:end="83:13">&lt;</operator> <literal type="number" pos:start="83:15" pos:end="83:15">0</literal></expr>)</condition> <block pos:start="83:18" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:18">

        <goto pos:start="85:9" pos:end="85:18">goto <name pos:start="85:14" pos:end="85:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:55"><expr pos:start="91:5" pos:end="91:54"><call pos:start="91:5" pos:end="91:54"><name pos:start="91:5" pos:end="91:16">BLKDBG_EVENT</name><argument_list pos:start="91:17" pos:end="91:54">(<argument pos:start="91:18" pos:end="91:25"><expr pos:start="91:18" pos:end="91:25"><name pos:start="91:18" pos:end="91:25"><name pos:start="91:18" pos:end="91:19">bs</name><operator pos:start="91:20" pos:end="91:21">-&gt;</operator><name pos:start="91:22" pos:end="91:25">file</name></name></expr></argument>, <argument pos:start="91:28" pos:end="91:53"><expr pos:start="91:28" pos:end="91:53"><name pos:start="91:28" pos:end="91:53">BLKDBG_L1_GROW_WRITE_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="93:5" pos:end="95:55">for<control pos:start="93:8" pos:end="93:35">(<init pos:start="93:9" pos:end="93:14"><expr pos:start="93:9" pos:end="93:13"><name pos:start="93:9" pos:end="93:9">i</name> <operator pos:start="93:11" pos:end="93:11">=</operator> <literal type="number" pos:start="93:13" pos:end="93:13">0</literal></expr>;</init> <condition pos:start="93:16" pos:end="93:30"><expr pos:start="93:16" pos:end="93:29"><name pos:start="93:16" pos:end="93:16">i</name> <operator pos:start="93:18" pos:end="93:18">&lt;</operator> <name pos:start="93:20" pos:end="93:29"><name pos:start="93:20" pos:end="93:20">s</name><operator pos:start="93:21" pos:end="93:22">-&gt;</operator><name pos:start="93:23" pos:end="93:29">l1_size</name></name></expr>;</condition> <incr pos:start="93:32" pos:end="93:34"><expr pos:start="93:32" pos:end="93:34"><name pos:start="93:32" pos:end="93:32">i</name><operator pos:start="93:33" pos:end="93:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="95:9" pos:end="95:55"><block_content pos:start="95:9" pos:end="95:55">

        <expr_stmt pos:start="95:9" pos:end="95:55"><expr pos:start="95:9" pos:end="95:54"><name pos:start="95:9" pos:end="95:23"><name pos:start="95:9" pos:end="95:20">new_l1_table</name><index pos:start="95:21" pos:end="95:23">[<expr pos:start="95:22" pos:end="95:22"><name pos:start="95:22" pos:end="95:22">i</name></expr>]</index></name> <operator pos:start="95:25" pos:end="95:25">=</operator> <call pos:start="95:27" pos:end="95:54"><name pos:start="95:27" pos:end="95:37">cpu_to_be64</name><argument_list pos:start="95:38" pos:end="95:54">(<argument pos:start="95:39" pos:end="95:53"><expr pos:start="95:39" pos:end="95:53"><name pos:start="95:39" pos:end="95:53"><name pos:start="95:39" pos:end="95:50">new_l1_table</name><index pos:start="95:51" pos:end="95:53">[<expr pos:start="95:52" pos:end="95:52"><name pos:start="95:52" pos:end="95:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt pos:start="97:5" pos:end="97:86"><expr pos:start="97:5" pos:end="97:85"><name pos:start="97:5" pos:end="97:7">ret</name> <operator pos:start="97:9" pos:end="97:9">=</operator> <call pos:start="97:11" pos:end="97:85"><name pos:start="97:11" pos:end="97:26">bdrv_pwrite_sync</name><argument_list pos:start="97:27" pos:end="97:85">(<argument pos:start="97:28" pos:end="97:35"><expr pos:start="97:28" pos:end="97:35"><name pos:start="97:28" pos:end="97:35"><name pos:start="97:28" pos:end="97:29">bs</name><operator pos:start="97:30" pos:end="97:31">-&gt;</operator><name pos:start="97:32" pos:end="97:35">file</name></name></expr></argument>, <argument pos:start="97:38" pos:end="97:56"><expr pos:start="97:38" pos:end="97:56"><name pos:start="97:38" pos:end="97:56">new_l1_table_offset</name></expr></argument>, <argument pos:start="97:59" pos:end="97:70"><expr pos:start="97:59" pos:end="97:70"><name pos:start="97:59" pos:end="97:70">new_l1_table</name></expr></argument>, <argument pos:start="97:73" pos:end="97:84"><expr pos:start="97:73" pos:end="97:84"><name pos:start="97:73" pos:end="97:84">new_l1_size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="101:18"><if pos:start="99:5" pos:end="101:18">if <condition pos:start="99:8" pos:end="99:16">(<expr pos:start="99:9" pos:end="99:15"><name pos:start="99:9" pos:end="99:11">ret</name> <operator pos:start="99:13" pos:end="99:13">&lt;</operator> <literal type="number" pos:start="99:15" pos:end="99:15">0</literal></expr>)</condition><block type="pseudo" pos:start="101:9" pos:end="101:18"><block_content pos:start="101:9" pos:end="101:18">

        <goto pos:start="101:9" pos:end="101:18">goto <name pos:start="101:14" pos:end="101:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <for pos:start="103:5" pos:end="105:55">for<control pos:start="103:8" pos:end="103:35">(<init pos:start="103:9" pos:end="103:14"><expr pos:start="103:9" pos:end="103:13"><name pos:start="103:9" pos:end="103:9">i</name> <operator pos:start="103:11" pos:end="103:11">=</operator> <literal type="number" pos:start="103:13" pos:end="103:13">0</literal></expr>;</init> <condition pos:start="103:16" pos:end="103:30"><expr pos:start="103:16" pos:end="103:29"><name pos:start="103:16" pos:end="103:16">i</name> <operator pos:start="103:18" pos:end="103:18">&lt;</operator> <name pos:start="103:20" pos:end="103:29"><name pos:start="103:20" pos:end="103:20">s</name><operator pos:start="103:21" pos:end="103:22">-&gt;</operator><name pos:start="103:23" pos:end="103:29">l1_size</name></name></expr>;</condition> <incr pos:start="103:32" pos:end="103:34"><expr pos:start="103:32" pos:end="103:34"><name pos:start="103:32" pos:end="103:32">i</name><operator pos:start="103:33" pos:end="103:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="105:9" pos:end="105:55"><block_content pos:start="105:9" pos:end="105:55">

        <expr_stmt pos:start="105:9" pos:end="105:55"><expr pos:start="105:9" pos:end="105:54"><name pos:start="105:9" pos:end="105:23"><name pos:start="105:9" pos:end="105:20">new_l1_table</name><index pos:start="105:21" pos:end="105:23">[<expr pos:start="105:22" pos:end="105:22"><name pos:start="105:22" pos:end="105:22">i</name></expr>]</index></name> <operator pos:start="105:25" pos:end="105:25">=</operator> <call pos:start="105:27" pos:end="105:54"><name pos:start="105:27" pos:end="105:37">be64_to_cpu</name><argument_list pos:start="105:38" pos:end="105:54">(<argument pos:start="105:39" pos:end="105:53"><expr pos:start="105:39" pos:end="105:53"><name pos:start="105:39" pos:end="105:53"><name pos:start="105:39" pos:end="105:50">new_l1_table</name><index pos:start="105:51" pos:end="105:53">[<expr pos:start="105:52" pos:end="105:52"><name pos:start="105:52" pos:end="105:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <comment type="block" pos:start="109:5" pos:end="109:23">/* set new table */</comment>

    <expr_stmt pos:start="111:5" pos:end="111:58"><expr pos:start="111:5" pos:end="111:57"><call pos:start="111:5" pos:end="111:57"><name pos:start="111:5" pos:end="111:16">BLKDBG_EVENT</name><argument_list pos:start="111:17" pos:end="111:57">(<argument pos:start="111:18" pos:end="111:25"><expr pos:start="111:18" pos:end="111:25"><name pos:start="111:18" pos:end="111:25"><name pos:start="111:18" pos:end="111:19">bs</name><operator pos:start="111:20" pos:end="111:21">-&gt;</operator><name pos:start="111:22" pos:end="111:25">file</name></name></expr></argument>, <argument pos:start="111:28" pos:end="111:56"><expr pos:start="111:28" pos:end="111:56"><name pos:start="111:28" pos:end="111:56">BLKDBG_L1_GROW_ACTIVATE_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:47"><expr pos:start="113:5" pos:end="113:46"><call pos:start="113:5" pos:end="113:46"><name pos:start="113:5" pos:end="113:16">cpu_to_be32w</name><argument_list pos:start="113:17" pos:end="113:46">(<argument pos:start="113:18" pos:end="113:32"><expr pos:start="113:18" pos:end="113:32"><operator pos:start="113:18" pos:end="113:18">(</operator><name pos:start="113:19" pos:end="113:26">uint32_t</name><operator pos:start="113:27" pos:end="113:27">*</operator><operator pos:start="113:28" pos:end="113:28">)</operator><name pos:start="113:29" pos:end="113:32">data</name></expr></argument>, <argument pos:start="113:35" pos:end="113:45"><expr pos:start="113:35" pos:end="113:45"><name pos:start="113:35" pos:end="113:45">new_l1_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:62"><expr pos:start="115:5" pos:end="115:61"><call pos:start="115:5" pos:end="115:61"><name pos:start="115:5" pos:end="115:17">cpu_to_be64wu</name><argument_list pos:start="115:18" pos:end="115:61">(<argument pos:start="115:19" pos:end="115:39"><expr pos:start="115:19" pos:end="115:39"><operator pos:start="115:19" pos:end="115:19">(</operator><name pos:start="115:20" pos:end="115:27">uint64_t</name><operator pos:start="115:28" pos:end="115:28">*</operator><operator pos:start="115:29" pos:end="115:29">)</operator><operator pos:start="115:30" pos:end="115:30">(</operator><name pos:start="115:31" pos:end="115:34">data</name> <operator pos:start="115:36" pos:end="115:36">+</operator> <literal type="number" pos:start="115:38" pos:end="115:38">4</literal><operator pos:start="115:39" pos:end="115:39">)</operator></expr></argument>, <argument pos:start="115:42" pos:end="115:60"><expr pos:start="115:42" pos:end="115:60"><name pos:start="115:42" pos:end="115:60">new_l1_table_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:87"><expr pos:start="117:5" pos:end="117:86"><name pos:start="117:5" pos:end="117:7">ret</name> <operator pos:start="117:9" pos:end="117:9">=</operator> <call pos:start="117:11" pos:end="117:86"><name pos:start="117:11" pos:end="117:26">bdrv_pwrite_sync</name><argument_list pos:start="117:27" pos:end="117:86">(<argument pos:start="117:28" pos:end="117:35"><expr pos:start="117:28" pos:end="117:35"><name pos:start="117:28" pos:end="117:35"><name pos:start="117:28" pos:end="117:29">bs</name><operator pos:start="117:30" pos:end="117:31">-&gt;</operator><name pos:start="117:32" pos:end="117:35">file</name></name></expr></argument>, <argument pos:start="117:38" pos:end="117:66"><expr pos:start="117:38" pos:end="117:66"><call pos:start="117:38" pos:end="117:66"><name pos:start="117:38" pos:end="117:45">offsetof</name><argument_list pos:start="117:46" pos:end="117:66">(<argument pos:start="117:47" pos:end="117:56"><expr pos:start="117:47" pos:end="117:56"><name pos:start="117:47" pos:end="117:56">QCowHeader</name></expr></argument>, <argument pos:start="117:59" pos:end="117:65"><expr pos:start="117:59" pos:end="117:65"><name pos:start="117:59" pos:end="117:65">l1_size</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="117:69" pos:end="117:72"><expr pos:start="117:69" pos:end="117:72"><name pos:start="117:69" pos:end="117:72">data</name></expr></argument>,<argument pos:start="117:74" pos:end="117:85"><expr pos:start="117:74" pos:end="117:85"><sizeof pos:start="117:74" pos:end="117:85">sizeof<argument_list pos:start="117:80" pos:end="117:85">(<argument pos:start="117:81" pos:end="117:84"><expr pos:start="117:81" pos:end="117:84"><name pos:start="117:81" pos:end="117:84">data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="119:5" pos:end="123:5"><if pos:start="119:5" pos:end="123:5">if <condition pos:start="119:8" pos:end="119:16">(<expr pos:start="119:9" pos:end="119:15"><name pos:start="119:9" pos:end="119:11">ret</name> <operator pos:start="119:13" pos:end="119:13">&lt;</operator> <literal type="number" pos:start="119:15" pos:end="119:15">0</literal></expr>)</condition> <block pos:start="119:18" pos:end="123:5">{<block_content pos:start="121:9" pos:end="121:18">

        <goto pos:start="121:9" pos:end="121:18">goto <name pos:start="121:14" pos:end="121:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:24"><expr pos:start="125:5" pos:end="125:23"><call pos:start="125:5" pos:end="125:23"><name pos:start="125:5" pos:end="125:10">g_free</name><argument_list pos:start="125:11" pos:end="125:23">(<argument pos:start="125:12" pos:end="125:22"><expr pos:start="125:12" pos:end="125:22"><name pos:start="125:12" pos:end="125:22"><name pos:start="125:12" pos:end="125:12">s</name><operator pos:start="125:13" pos:end="125:14">-&gt;</operator><name pos:start="125:15" pos:end="125:22">l1_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:79"><expr pos:start="127:5" pos:end="127:78"><call pos:start="127:5" pos:end="127:78"><name pos:start="127:5" pos:end="127:23">qcow2_free_clusters</name><argument_list pos:start="127:24" pos:end="127:78">(<argument pos:start="127:25" pos:end="127:26"><expr pos:start="127:25" pos:end="127:26"><name pos:start="127:25" pos:end="127:26">bs</name></expr></argument>, <argument pos:start="127:29" pos:end="127:46"><expr pos:start="127:29" pos:end="127:46"><name pos:start="127:29" pos:end="127:46"><name pos:start="127:29" pos:end="127:29">s</name><operator pos:start="127:30" pos:end="127:31">-&gt;</operator><name pos:start="127:32" pos:end="127:46">l1_table_offset</name></name></expr></argument>, <argument pos:start="127:49" pos:end="127:77"><expr pos:start="127:49" pos:end="127:77"><name pos:start="127:49" pos:end="127:58"><name pos:start="127:49" pos:end="127:49">s</name><operator pos:start="127:50" pos:end="127:51">-&gt;</operator><name pos:start="127:52" pos:end="127:58">l1_size</name></name> <operator pos:start="127:60" pos:end="127:60">*</operator> <sizeof pos:start="127:62" pos:end="127:77">sizeof<argument_list pos:start="127:68" pos:end="127:77">(<argument pos:start="127:69" pos:end="127:76"><expr pos:start="127:69" pos:end="127:76"><name pos:start="127:69" pos:end="127:76">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:45"><expr pos:start="129:5" pos:end="129:44"><name pos:start="129:5" pos:end="129:22"><name pos:start="129:5" pos:end="129:5">s</name><operator pos:start="129:6" pos:end="129:7">-&gt;</operator><name pos:start="129:8" pos:end="129:22">l1_table_offset</name></name> <operator pos:start="129:24" pos:end="129:24">=</operator> <name pos:start="129:26" pos:end="129:44">new_l1_table_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:31"><expr pos:start="131:5" pos:end="131:30"><name pos:start="131:5" pos:end="131:15"><name pos:start="131:5" pos:end="131:5">s</name><operator pos:start="131:6" pos:end="131:7">-&gt;</operator><name pos:start="131:8" pos:end="131:15">l1_table</name></name> <operator pos:start="131:17" pos:end="131:17">=</operator> <name pos:start="131:19" pos:end="131:30">new_l1_table</name></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:29"><expr pos:start="133:5" pos:end="133:28"><name pos:start="133:5" pos:end="133:14"><name pos:start="133:5" pos:end="133:5">s</name><operator pos:start="133:6" pos:end="133:7">-&gt;</operator><name pos:start="133:8" pos:end="133:14">l1_size</name></name> <operator pos:start="133:16" pos:end="133:16">=</operator> <name pos:start="133:18" pos:end="133:28">new_l1_size</name></expr>;</expr_stmt>

    <return pos:start="135:5" pos:end="135:13">return <expr pos:start="135:12" pos:end="135:12"><literal type="number" pos:start="135:12" pos:end="135:12">0</literal></expr>;</return>

 <label pos:start="137:2" pos:end="137:6"><name pos:start="137:2" pos:end="137:5">fail</name>:</label>

    <expr_stmt pos:start="139:5" pos:end="139:25"><expr pos:start="139:5" pos:end="139:24"><call pos:start="139:5" pos:end="139:24"><name pos:start="139:5" pos:end="139:10">g_free</name><argument_list pos:start="139:11" pos:end="139:24">(<argument pos:start="139:12" pos:end="139:23"><expr pos:start="139:12" pos:end="139:23"><name pos:start="139:12" pos:end="139:23">new_l1_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:63"><expr pos:start="141:5" pos:end="141:62"><call pos:start="141:5" pos:end="141:62"><name pos:start="141:5" pos:end="141:23">qcow2_free_clusters</name><argument_list pos:start="141:24" pos:end="141:62">(<argument pos:start="141:25" pos:end="141:26"><expr pos:start="141:25" pos:end="141:26"><name pos:start="141:25" pos:end="141:26">bs</name></expr></argument>, <argument pos:start="141:29" pos:end="141:47"><expr pos:start="141:29" pos:end="141:47"><name pos:start="141:29" pos:end="141:47">new_l1_table_offset</name></expr></argument>, <argument pos:start="141:50" pos:end="141:61"><expr pos:start="141:50" pos:end="141:61"><name pos:start="141:50" pos:end="141:61">new_l1_size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="143:5" pos:end="143:15">return <expr pos:start="143:12" pos:end="143:14"><name pos:start="143:12" pos:end="143:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
