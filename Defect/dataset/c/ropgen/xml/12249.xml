<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12249.c" pos:tabs="8"><function pos:start="1:1" pos:end="38:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:27">get_block</name><parameter_list pos:start="1:28" pos:end="2:50">(<parameter pos:start="1:29" pos:end="1:45"><decl pos:start="1:29" pos:end="1:45"><type pos:start="1:29" pos:end="1:45"><name pos:start="1:29" pos:end="1:41">GetBitContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:45">gb</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:61"><decl pos:start="1:48" pos:end="1:61"><type pos:start="1:48" pos:end="1:61"><name pos:start="1:48" pos:end="1:54">DCTELEM</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:61">block</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:82"><decl pos:start="1:64" pos:end="1:82"><type pos:start="1:64" pos:end="1:82"><specifier pos:start="1:64" pos:end="1:68">const</specifier> <name pos:start="1:70" pos:end="1:76">uint8_t</name> <modifier pos:start="1:78" pos:end="1:78">*</modifier></type><name pos:start="1:79" pos:end="1:82">scan</name></decl></parameter>,
                            <parameter pos:start="2:29" pos:end="2:49"><decl pos:start="2:29" pos:end="2:49"><type pos:start="2:29" pos:end="2:49"><specifier pos:start="2:29" pos:end="2:33">const</specifier> <name pos:start="2:35" pos:end="2:42">uint32_t</name> <modifier pos:start="2:44" pos:end="2:44">*</modifier></type><name pos:start="2:45" pos:end="2:49">quant</name></decl></parameter>)</parameter_list> <block pos:start="2:52" pos:end="38:1">{<block_content pos:start="3:5" pos:end="37:13">
    <decl_stmt pos:start="3:5" pos:end="3:20"><decl pos:start="3:5" pos:end="3:13"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:13">coeff</name></decl>, <decl pos:start="3:16" pos:end="3:16"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:16" pos:end="3:16">i</name></decl>, <decl pos:start="3:19" pos:end="3:19"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:19" pos:end="3:19">n</name></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:14"><decl pos:start="4:5" pos:end="4:13"><type pos:start="4:5" pos:end="4:10"><name pos:start="4:5" pos:end="4:10">int8_t</name></type> <name pos:start="4:12" pos:end="4:13">ac</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:14">dc</name> <init pos:start="5:16" pos:end="5:32">= <expr pos:start="5:18" pos:end="5:32"><call pos:start="5:18" pos:end="5:32"><name pos:start="5:18" pos:end="5:25">get_bits</name><argument_list pos:start="5:26" pos:end="5:32">(<argument pos:start="5:27" pos:end="5:28"><expr pos:start="5:27" pos:end="5:28"><name pos:start="5:27" pos:end="5:28">gb</name></expr></argument>, <argument pos:start="5:31" pos:end="5:31"><expr pos:start="5:31" pos:end="5:31"><literal type="number" pos:start="5:31" pos:end="5:31">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line" pos:start="6:5" pos:end="6:22">// block not coded</comment>
    <if_stmt pos:start="7:5" pos:end="9:28"><if pos:start="7:5" pos:end="9:28">if <condition pos:start="7:8" pos:end="7:18">(<expr pos:start="7:9" pos:end="7:17"><name pos:start="7:9" pos:end="7:10">dc</name> <operator pos:start="7:12" pos:end="7:13">==</operator> <literal type="number" pos:start="7:15" pos:end="7:17">255</literal></expr>)</condition><block type="pseudo" pos:start="9:5" pos:end="9:28"><block_content pos:start="9:5" pos:end="9:28">
    <comment type="line" pos:start="8:5" pos:end="8:38">// number of non-zero coefficients</comment>
    <expr_stmt pos:start="9:5" pos:end="9:28"><expr pos:start="9:5" pos:end="9:27"><name pos:start="9:5" pos:end="9:9">coeff</name> <operator pos:start="9:11" pos:end="9:11">=</operator> <call pos:start="9:13" pos:end="9:27"><name pos:start="9:13" pos:end="9:20">get_bits</name><argument_list pos:start="9:21" pos:end="9:27">(<argument pos:start="9:22" pos:end="9:23"><expr pos:start="9:22" pos:end="9:23"><name pos:start="9:22" pos:end="9:23">gb</name></expr></argument>, <argument pos:start="9:26" pos:end="9:26"><expr pos:start="9:26" pos:end="9:26"><literal type="number" pos:start="9:26" pos:end="9:26">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="line" pos:start="10:5" pos:end="10:73">// normally we would only need to clear the (63 - coeff) last values,</comment>
    <comment type="line" pos:start="11:5" pos:end="11:76">// but since we do not know where they are we just clear the whole block</comment>
    <expr_stmt pos:start="12:5" pos:end="12:43"><expr pos:start="12:5" pos:end="12:42"><call pos:start="12:5" pos:end="12:42"><name pos:start="12:5" pos:end="12:10">memset</name><argument_list pos:start="12:11" pos:end="12:42">(<argument pos:start="12:12" pos:end="12:16"><expr pos:start="12:12" pos:end="12:16"><name pos:start="12:12" pos:end="12:16">block</name></expr></argument>, <argument pos:start="12:19" pos:end="12:19"><expr pos:start="12:19" pos:end="12:19"><literal type="number" pos:start="12:19" pos:end="12:19">0</literal></expr></argument>, <argument pos:start="12:22" pos:end="12:41"><expr pos:start="12:22" pos:end="12:41"><literal type="number" pos:start="12:22" pos:end="12:23">64</literal> <operator pos:start="12:25" pos:end="12:25">*</operator> <sizeof pos:start="12:27" pos:end="12:41">sizeof<argument_list pos:start="12:33" pos:end="12:41">(<argument pos:start="12:34" pos:end="12:40"><expr pos:start="12:34" pos:end="12:40"><name pos:start="12:34" pos:end="12:40">DCTELEM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:start="13:5" pos:end="13:29">// 2 bits per coefficient</comment>
    <while pos:start="14:5" pos:end="19:5">while <condition pos:start="14:11" pos:end="14:17">(<expr pos:start="14:12" pos:end="14:16"><name pos:start="14:12" pos:end="14:16">coeff</name></expr>)</condition> <block pos:start="14:19" pos:end="19:5">{<block_content pos:start="15:9" pos:end="18:22">
        <expr_stmt pos:start="15:9" pos:end="15:30"><expr pos:start="15:9" pos:end="15:29"><name pos:start="15:9" pos:end="15:10">ac</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <call pos:start="15:14" pos:end="15:29"><name pos:start="15:14" pos:end="15:22">get_sbits</name><argument_list pos:start="15:23" pos:end="15:29">(<argument pos:start="15:24" pos:end="15:25"><expr pos:start="15:24" pos:end="15:25"><name pos:start="15:24" pos:end="15:25">gb</name></expr></argument>, <argument pos:start="15:28" pos:end="15:28"><expr pos:start="15:28" pos:end="15:28"><literal type="number" pos:start="15:28" pos:end="15:28">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="16:9" pos:end="17:18"><if pos:start="16:9" pos:end="17:18">if <condition pos:start="16:12" pos:end="16:21">(<expr pos:start="16:13" pos:end="16:20"><name pos:start="16:13" pos:end="16:14">ac</name> <operator pos:start="16:16" pos:end="16:17">==</operator> <operator pos:start="16:19" pos:end="16:19">-</operator><literal type="number" pos:start="16:20" pos:end="16:20">2</literal></expr>)</condition><block type="pseudo" pos:start="17:13" pos:end="17:18"><block_content pos:start="17:13" pos:end="17:18">
            <break pos:start="17:13" pos:end="17:18">break;</break></block_content></block></if></if_stmt> <comment type="line" pos:start="17:20" pos:end="17:45">// continue with more bits</comment>
        <expr_stmt pos:start="18:9" pos:end="18:22"><expr pos:start="18:9" pos:end="18:21"><call pos:start="18:9" pos:end="18:21"><name pos:start="18:9" pos:end="18:17">PUT_COEFF</name><argument_list pos:start="18:18" pos:end="18:21">(<argument pos:start="18:19" pos:end="18:20"><expr pos:start="18:19" pos:end="18:20"><name pos:start="18:19" pos:end="18:20">ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <comment type="line" pos:start="20:5" pos:end="20:29">// 4 bits per coefficient</comment>
    <expr_stmt pos:start="21:5" pos:end="21:13"><expr pos:start="21:5" pos:end="21:12"><call pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:9">ALIGN</name><argument_list pos:start="21:10" pos:end="21:12">(<argument pos:start="21:11" pos:end="21:11"><expr pos:start="21:11" pos:end="21:11"><literal type="number" pos:start="21:11" pos:end="21:11">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="22:5" pos:end="28:5"><if pos:start="22:5" pos:end="28:5">if <condition pos:start="22:8" pos:end="22:62">(<expr pos:start="22:9" pos:end="22:61"><call pos:start="22:9" pos:end="22:26"><name pos:start="22:9" pos:end="22:22">get_bits_count</name><argument_list pos:start="22:23" pos:end="22:26">(<argument pos:start="22:24" pos:end="22:25"><expr pos:start="22:24" pos:end="22:25"><name pos:start="22:24" pos:end="22:25">gb</name></expr></argument>)</argument_list></call> <operator pos:start="22:28" pos:end="22:28">+</operator> <operator pos:start="22:30" pos:end="22:30">(</operator><name pos:start="22:31" pos:end="22:35">coeff</name> <operator pos:start="22:37" pos:end="22:38">&lt;&lt;</operator> <literal type="number" pos:start="22:40" pos:end="22:40">2</literal><operator pos:start="22:41" pos:end="22:41">)</operator> <operator pos:start="22:43" pos:end="22:44">&gt;=</operator> <name pos:start="22:46" pos:end="22:61"><name pos:start="22:46" pos:end="22:47">gb</name><operator pos:start="22:48" pos:end="22:49">-&gt;</operator><name pos:start="22:50" pos:end="22:61">size_in_bits</name></name></expr>)</condition><block type="pseudo" pos:start="23:5" pos:end="28:5"><block_content pos:start="23:5" pos:end="28:5">
    <while pos:start="23:5" pos:end="28:5">while <condition pos:start="23:11" pos:end="23:17">(<expr pos:start="23:12" pos:end="23:16"><name pos:start="23:12" pos:end="23:16">coeff</name></expr>)</condition> <block pos:start="23:19" pos:end="28:5">{<block_content pos:start="24:9" pos:end="27:22">
        <expr_stmt pos:start="24:9" pos:end="24:30"><expr pos:start="24:9" pos:end="24:29"><name pos:start="24:9" pos:end="24:10">ac</name> <operator pos:start="24:12" pos:end="24:12">=</operator> <call pos:start="24:14" pos:end="24:29"><name pos:start="24:14" pos:end="24:22">get_sbits</name><argument_list pos:start="24:23" pos:end="24:29">(<argument pos:start="24:24" pos:end="24:25"><expr pos:start="24:24" pos:end="24:25"><name pos:start="24:24" pos:end="24:25">gb</name></expr></argument>, <argument pos:start="24:28" pos:end="24:28"><expr pos:start="24:28" pos:end="24:28"><literal type="number" pos:start="24:28" pos:end="24:28">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="25:9" pos:end="26:18"><if pos:start="25:9" pos:end="26:18">if <condition pos:start="25:12" pos:end="25:21">(<expr pos:start="25:13" pos:end="25:20"><name pos:start="25:13" pos:end="25:14">ac</name> <operator pos:start="25:16" pos:end="25:17">==</operator> <operator pos:start="25:19" pos:end="25:19">-</operator><literal type="number" pos:start="25:20" pos:end="25:20">8</literal></expr>)</condition><block type="pseudo" pos:start="26:13" pos:end="26:18"><block_content pos:start="26:13" pos:end="26:18">
            <break pos:start="26:13" pos:end="26:18">break;</break></block_content></block></if></if_stmt> <comment type="line" pos:start="26:20" pos:end="26:45">// continue with more bits</comment>
        <expr_stmt pos:start="27:9" pos:end="27:22"><expr pos:start="27:9" pos:end="27:21"><call pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:17">PUT_COEFF</name><argument_list pos:start="27:18" pos:end="27:21">(<argument pos:start="27:19" pos:end="27:20"><expr pos:start="27:19" pos:end="27:20"><name pos:start="27:19" pos:end="27:20">ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while></block_content></block></if></if_stmt>
    <comment type="line" pos:start="29:5" pos:end="29:29">// 8 bits per coefficient</comment>
    <expr_stmt pos:start="30:5" pos:end="30:13"><expr pos:start="30:5" pos:end="30:12"><call pos:start="30:5" pos:end="30:12"><name pos:start="30:5" pos:end="30:9">ALIGN</name><argument_list pos:start="30:10" pos:end="30:12">(<argument pos:start="30:11" pos:end="30:11"><expr pos:start="30:11" pos:end="30:11"><literal type="number" pos:start="30:11" pos:end="30:11">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:62">(<expr pos:start="31:9" pos:end="31:61"><call pos:start="31:9" pos:end="31:26"><name pos:start="31:9" pos:end="31:22">get_bits_count</name><argument_list pos:start="31:23" pos:end="31:26">(<argument pos:start="31:24" pos:end="31:25"><expr pos:start="31:24" pos:end="31:25"><name pos:start="31:24" pos:end="31:25">gb</name></expr></argument>)</argument_list></call> <operator pos:start="31:28" pos:end="31:28">+</operator> <operator pos:start="31:30" pos:end="31:30">(</operator><name pos:start="31:31" pos:end="31:35">coeff</name> <operator pos:start="31:37" pos:end="31:38">&lt;&lt;</operator> <literal type="number" pos:start="31:40" pos:end="31:40">3</literal><operator pos:start="31:41" pos:end="31:41">)</operator> <operator pos:start="31:43" pos:end="31:44">&gt;=</operator> <name pos:start="31:46" pos:end="31:61"><name pos:start="31:46" pos:end="31:47">gb</name><operator pos:start="31:48" pos:end="31:49">-&gt;</operator><name pos:start="31:50" pos:end="31:61">size_in_bits</name></name></expr>)</condition><block type="pseudo" pos:start="32:5" pos:end="35:5"><block_content pos:start="32:5" pos:end="35:5">
    <while pos:start="32:5" pos:end="35:5">while <condition pos:start="32:11" pos:end="32:17">(<expr pos:start="32:12" pos:end="32:16"><name pos:start="32:12" pos:end="32:16">coeff</name></expr>)</condition> <block pos:start="32:19" pos:end="35:5">{<block_content pos:start="33:9" pos:end="34:22">
        <expr_stmt pos:start="33:9" pos:end="33:30"><expr pos:start="33:9" pos:end="33:29"><name pos:start="33:9" pos:end="33:10">ac</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <call pos:start="33:14" pos:end="33:29"><name pos:start="33:14" pos:end="33:22">get_sbits</name><argument_list pos:start="33:23" pos:end="33:29">(<argument pos:start="33:24" pos:end="33:25"><expr pos:start="33:24" pos:end="33:25"><name pos:start="33:24" pos:end="33:25">gb</name></expr></argument>, <argument pos:start="33:28" pos:end="33:28"><expr pos:start="33:28" pos:end="33:28"><literal type="number" pos:start="33:28" pos:end="33:28">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="34:9" pos:end="34:22"><expr pos:start="34:9" pos:end="34:21"><call pos:start="34:9" pos:end="34:21"><name pos:start="34:9" pos:end="34:17">PUT_COEFF</name><argument_list pos:start="34:18" pos:end="34:21">(<argument pos:start="34:19" pos:end="34:20"><expr pos:start="34:19" pos:end="34:20"><name pos:start="34:19" pos:end="34:20">ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while></block_content></block></if></if_stmt>
    <expr_stmt pos:start="36:5" pos:end="36:18"><expr pos:start="36:5" pos:end="36:17"><call pos:start="36:5" pos:end="36:17"><name pos:start="36:5" pos:end="36:13">PUT_COEFF</name><argument_list pos:start="36:14" pos:end="36:17">(<argument pos:start="36:15" pos:end="36:16"><expr pos:start="36:15" pos:end="36:16"><name pos:start="36:15" pos:end="36:16">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="37:5" pos:end="37:13">return <expr pos:start="37:12" pos:end="37:12"><literal type="number" pos:start="37:12" pos:end="37:12">1</literal></expr>;</return>
</block_content>}</block></function></unit>
