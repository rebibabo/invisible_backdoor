<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24675.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_frame</name><parameter_list pos:start="1:24" pos:end="3:40">(<parameter pos:start="1:25" pos:end="1:46"><decl pos:start="1:25" pos:end="1:46"><type pos:start="1:25" pos:end="1:46"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type> <name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:58"><decl pos:start="1:49" pos:end="1:58"><type pos:start="1:49" pos:end="1:58"><name pos:start="1:49" pos:end="1:52">void</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:58">data</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:74"><decl pos:start="1:61" pos:end="1:74"><type pos:start="1:61" pos:end="1:74"><name pos:start="1:61" pos:end="1:63">int</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:74">data_size</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:39"><decl pos:start="3:25" pos:end="3:39"><type pos:start="3:25" pos:end="3:39"><name pos:start="3:25" pos:end="3:32">AVPacket</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:39">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="119:1">{<block_content pos:start="7:5" pos:end="117:20">

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name>  <init pos:start="7:25" pos:end="7:37">= <expr pos:start="7:27" pos:end="7:37"><name pos:start="7:27" pos:end="7:37"><name pos:start="7:27" pos:end="7:31">avpkt</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:37">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name>        <init pos:start="9:25" pos:end="9:37">= <expr pos:start="9:27" pos:end="9:37"><name pos:start="9:27" pos:end="9:37"><name pos:start="9:27" pos:end="9:31">avpkt</name><operator pos:start="9:32" pos:end="9:33">-&gt;</operator><name pos:start="9:34" pos:end="9:37">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:43"><decl pos:start="11:5" pos:end="11:42"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">MPADecodeContext</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:23">s</name> <init pos:start="11:25" pos:end="11:42">= <expr pos:start="11:27" pos:end="11:42"><name pos:start="11:27" pos:end="11:42"><name pos:start="11:27" pos:end="11:31">avctx</name><operator pos:start="11:32" pos:end="11:33">-&gt;</operator><name pos:start="11:34" pos:end="11:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:19">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:16">out_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:32"><decl pos:start="17:5" pos:end="17:31"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">OUT_INT</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:24">out_samples</name> <init pos:start="17:26" pos:end="17:31">= <expr pos:start="17:28" pos:end="17:31"><name pos:start="17:28" pos:end="17:31">data</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="23:35"><if pos:start="21:5" pos:end="23:35">if <condition pos:start="21:8" pos:end="21:31">(<expr pos:start="21:9" pos:end="21:30"><name pos:start="21:9" pos:end="21:16">buf_size</name> <operator pos:start="21:18" pos:end="21:18">&lt;</operator> <name pos:start="21:20" pos:end="21:30">HEADER_SIZE</name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:35"><block_content pos:start="23:9" pos:end="23:35">

        <return pos:start="23:9" pos:end="23:35">return <expr pos:start="23:16" pos:end="23:34"><name pos:start="23:16" pos:end="23:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:26"><expr pos:start="27:5" pos:end="27:25"><name pos:start="27:5" pos:end="27:10">header</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <call pos:start="27:14" pos:end="27:25"><name pos:start="27:14" pos:end="27:20">AV_RB32</name><argument_list pos:start="27:21" pos:end="27:25">(<argument pos:start="27:22" pos:end="27:24"><expr pos:start="27:22" pos:end="27:24"><name pos:start="27:22" pos:end="27:24">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:40">(<expr pos:start="29:9" pos:end="29:39"><call pos:start="29:9" pos:end="29:35"><name pos:start="29:9" pos:end="29:27">ff_mpa_check_header</name><argument_list pos:start="29:28" pos:end="29:35">(<argument pos:start="29:29" pos:end="29:34"><expr pos:start="29:29" pos:end="29:34"><name pos:start="29:29" pos:end="29:34">header</name></expr></argument>)</argument_list></call> <operator pos:start="29:37" pos:end="29:37">&lt;</operator> <literal type="number" pos:start="29:39" pos:end="29:39">0</literal></expr>)</condition> <block pos:start="29:42" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:35">

        <expr_stmt pos:start="31:9" pos:end="31:56"><expr pos:start="31:9" pos:end="31:55"><call pos:start="31:9" pos:end="31:55"><name pos:start="31:9" pos:end="31:14">av_log</name><argument_list pos:start="31:15" pos:end="31:55">(<argument pos:start="31:16" pos:end="31:20"><expr pos:start="31:16" pos:end="31:20"><name pos:start="31:16" pos:end="31:20">avctx</name></expr></argument>, <argument pos:start="31:23" pos:end="31:34"><expr pos:start="31:23" pos:end="31:34"><name pos:start="31:23" pos:end="31:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:37" pos:end="31:54"><expr pos:start="31:37" pos:end="31:54"><literal type="string" pos:start="31:37" pos:end="31:54">"Header missing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:35">return <expr pos:start="33:16" pos:end="33:34"><name pos:start="33:16" pos:end="33:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="47:5">if <condition pos:start="39:8" pos:end="39:74">(<expr pos:start="39:9" pos:end="39:73"><call pos:start="39:9" pos:end="39:68"><name pos:start="39:9" pos:end="39:38">avpriv_mpegaudio_decode_header</name><argument_list pos:start="39:39" pos:end="39:68">(<argument pos:start="39:40" pos:end="39:59"><expr pos:start="39:40" pos:end="39:59"><operator pos:start="39:40" pos:end="39:40">(</operator><name pos:start="39:41" pos:end="39:55">MPADecodeHeader</name> <operator pos:start="39:57" pos:end="39:57">*</operator><operator pos:start="39:58" pos:end="39:58">)</operator><name pos:start="39:59" pos:end="39:59">s</name></expr></argument>, <argument pos:start="39:62" pos:end="39:67"><expr pos:start="39:62" pos:end="39:67"><name pos:start="39:62" pos:end="39:67">header</name></expr></argument>)</argument_list></call> <operator pos:start="39:70" pos:end="39:71">==</operator> <literal type="number" pos:start="39:73" pos:end="39:73">1</literal></expr>)</condition> <block pos:start="39:76" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:35">

        <comment type="block" pos:start="41:9" pos:end="41:56">/* free format: prepare to compute frame size */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:27"><expr pos:start="43:9" pos:end="43:26"><name pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:21">frame_size</name></name> <operator pos:start="43:23" pos:end="43:23">=</operator> <operator pos:start="43:25" pos:end="43:25">-</operator><literal type="number" pos:start="43:26" pos:end="43:26">1</literal></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:35">return <expr pos:start="45:16" pos:end="45:34"><name pos:start="45:16" pos:end="45:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="49:5" pos:end="49:27">/* update codec info */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:43"><expr pos:start="51:5" pos:end="51:42"><name pos:start="51:5" pos:end="51:19"><name pos:start="51:5" pos:end="51:9">avctx</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:19">channels</name></name>       <operator pos:start="51:27" pos:end="51:27">=</operator> <name pos:start="51:29" pos:end="51:42"><name pos:start="51:29" pos:end="51:29">s</name><operator pos:start="51:30" pos:end="51:31">-&gt;</operator><name pos:start="51:32" pos:end="51:42">nb_channels</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:90"><expr pos:start="53:5" pos:end="53:89"><name pos:start="53:5" pos:end="53:25"><name pos:start="53:5" pos:end="53:9">avctx</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:25">channel_layout</name></name> <operator pos:start="53:27" pos:end="53:27">=</operator> <ternary pos:start="53:29" pos:end="53:89"><condition pos:start="53:29" pos:end="53:49"><expr pos:start="53:29" pos:end="53:47"><name pos:start="53:29" pos:end="53:42"><name pos:start="53:29" pos:end="53:29">s</name><operator pos:start="53:30" pos:end="53:31">-&gt;</operator><name pos:start="53:32" pos:end="53:42">nb_channels</name></name> <operator pos:start="53:44" pos:end="53:45">==</operator> <literal type="number" pos:start="53:47" pos:end="53:47">1</literal></expr> ?</condition><then pos:start="53:51" pos:end="53:67"> <expr pos:start="53:51" pos:end="53:67"><name pos:start="53:51" pos:end="53:67">AV_CH_LAYOUT_MONO</name></expr> </then><else pos:start="53:69" pos:end="53:89">: <expr pos:start="53:71" pos:end="53:89"><name pos:start="53:71" pos:end="53:89">AV_CH_LAYOUT_STEREO</name></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="57:38"><if pos:start="55:5" pos:end="57:38">if <condition pos:start="55:8" pos:end="55:25">(<expr pos:start="55:9" pos:end="55:24"><operator pos:start="55:9" pos:end="55:9">!</operator><name pos:start="55:10" pos:end="55:24"><name pos:start="55:10" pos:end="55:14">avctx</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:24">bit_rate</name></name></expr>)</condition><block type="pseudo" pos:start="57:9" pos:end="57:38"><block_content pos:start="57:9" pos:end="57:38">

        <expr_stmt pos:start="57:9" pos:end="57:38"><expr pos:start="57:9" pos:end="57:37"><name pos:start="57:9" pos:end="57:23"><name pos:start="57:9" pos:end="57:13">avctx</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:23">bit_rate</name></name> <operator pos:start="57:25" pos:end="57:25">=</operator> <name pos:start="57:27" pos:end="57:37"><name pos:start="57:27" pos:end="57:27">s</name><operator pos:start="57:28" pos:end="57:29">-&gt;</operator><name pos:start="57:30" pos:end="57:37">bit_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:29"><expr pos:start="59:5" pos:end="59:28"><name pos:start="59:5" pos:end="59:17"><name pos:start="59:5" pos:end="59:9">avctx</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:17">sub_id</name></name> <operator pos:start="59:19" pos:end="59:19">=</operator> <name pos:start="59:21" pos:end="59:28"><name pos:start="59:21" pos:end="59:21">s</name><operator pos:start="59:22" pos:end="59:23">-&gt;</operator><name pos:start="59:24" pos:end="59:28">layer</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="65:31"><if pos:start="63:5" pos:end="65:31">if <condition pos:start="63:8" pos:end="63:62">(<expr pos:start="63:9" pos:end="63:61"><operator pos:start="63:9" pos:end="63:9">*</operator><name pos:start="63:10" pos:end="63:18">data_size</name> <operator pos:start="63:20" pos:end="63:20">&lt;</operator> <literal type="number" pos:start="63:22" pos:end="63:25">1152</literal> <operator pos:start="63:27" pos:end="63:27">*</operator> <name pos:start="63:29" pos:end="63:43"><name pos:start="63:29" pos:end="63:33">avctx</name><operator pos:start="63:34" pos:end="63:35">-&gt;</operator><name pos:start="63:36" pos:end="63:43">channels</name></name> <operator pos:start="63:45" pos:end="63:45">*</operator> <sizeof pos:start="63:47" pos:end="63:61">sizeof<argument_list pos:start="63:53" pos:end="63:61">(<argument pos:start="63:54" pos:end="63:60"><expr pos:start="63:54" pos:end="63:60"><name pos:start="63:54" pos:end="63:60">OUT_INT</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:31"><block_content pos:start="65:9" pos:end="65:31">

        <return pos:start="65:9" pos:end="65:31">return <expr pos:start="65:16" pos:end="65:30"><call pos:start="65:16" pos:end="65:30"><name pos:start="65:16" pos:end="65:22">AVERROR</name><argument_list pos:start="65:23" pos:end="65:30">(<argument pos:start="65:24" pos:end="65:29"><expr pos:start="65:24" pos:end="65:29"><name pos:start="65:24" pos:end="65:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:19"><expr pos:start="67:5" pos:end="67:18"><operator pos:start="67:5" pos:end="67:5">*</operator><name pos:start="67:6" pos:end="67:14">data_size</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <literal type="number" pos:start="67:18" pos:end="67:18">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="71:5" pos:end="83:5"><if pos:start="71:5" pos:end="77:5">if <condition pos:start="71:8" pos:end="71:55">(<expr pos:start="71:9" pos:end="71:54"><name pos:start="71:9" pos:end="71:21"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:21">frame_size</name></name> <operator pos:start="71:23" pos:end="71:24">&lt;=</operator> <literal type="number" pos:start="71:26" pos:end="71:26">0</literal> <operator pos:start="71:28" pos:end="71:29">||</operator> <name pos:start="71:31" pos:end="71:43"><name pos:start="71:31" pos:end="71:31">s</name><operator pos:start="71:32" pos:end="71:33">-&gt;</operator><name pos:start="71:34" pos:end="71:43">frame_size</name></name> <operator pos:start="71:45" pos:end="71:45">&gt;</operator> <name pos:start="71:47" pos:end="71:54">buf_size</name></expr>)</condition> <block pos:start="71:57" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:35">

        <expr_stmt pos:start="73:9" pos:end="73:58"><expr pos:start="73:9" pos:end="73:57"><call pos:start="73:9" pos:end="73:57"><name pos:start="73:9" pos:end="73:14">av_log</name><argument_list pos:start="73:15" pos:end="73:57">(<argument pos:start="73:16" pos:end="73:20"><expr pos:start="73:16" pos:end="73:20"><name pos:start="73:16" pos:end="73:20">avctx</name></expr></argument>, <argument pos:start="73:23" pos:end="73:34"><expr pos:start="73:23" pos:end="73:34"><name pos:start="73:23" pos:end="73:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="73:37" pos:end="73:56"><expr pos:start="73:37" pos:end="73:56"><literal type="string" pos:start="73:37" pos:end="73:56">"incomplete frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:35">return <expr pos:start="75:16" pos:end="75:34"><name pos:start="75:16" pos:end="75:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="77:7" pos:end="83:5">else if <condition pos:start="77:15" pos:end="77:40">(<expr pos:start="77:16" pos:end="77:39"><name pos:start="77:16" pos:end="77:28"><name pos:start="77:16" pos:end="77:16">s</name><operator pos:start="77:17" pos:end="77:18">-&gt;</operator><name pos:start="77:19" pos:end="77:28">frame_size</name></name> <operator pos:start="77:30" pos:end="77:30">&lt;</operator> <name pos:start="77:32" pos:end="77:39">buf_size</name></expr>)</condition> <block pos:start="77:42" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:32">

        <expr_stmt pos:start="79:9" pos:end="79:62"><expr pos:start="79:9" pos:end="79:61"><call pos:start="79:9" pos:end="79:61"><name pos:start="79:9" pos:end="79:14">av_log</name><argument_list pos:start="79:15" pos:end="79:61">(<argument pos:start="79:16" pos:end="79:20"><expr pos:start="79:16" pos:end="79:20"><name pos:start="79:16" pos:end="79:20">avctx</name></expr></argument>, <argument pos:start="79:23" pos:end="79:34"><expr pos:start="79:23" pos:end="79:34"><name pos:start="79:23" pos:end="79:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="79:37" pos:end="79:60"><expr pos:start="79:37" pos:end="79:60"><literal type="string" pos:start="79:37" pos:end="79:60">"incorrect frame size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:32"><expr pos:start="81:9" pos:end="81:31"><name pos:start="81:9" pos:end="81:16">buf_size</name><operator pos:start="81:17" pos:end="81:17">=</operator> <name pos:start="81:19" pos:end="81:31"><name pos:start="81:19" pos:end="81:19">s</name><operator pos:start="81:20" pos:end="81:21">-&gt;</operator><name pos:start="81:22" pos:end="81:31">frame_size</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:62"><expr pos:start="87:5" pos:end="87:61"><name pos:start="87:5" pos:end="87:12">out_size</name> <operator pos:start="87:14" pos:end="87:14">=</operator> <call pos:start="87:16" pos:end="87:61"><name pos:start="87:16" pos:end="87:30">mp_decode_frame</name><argument_list pos:start="87:31" pos:end="87:61">(<argument pos:start="87:32" pos:end="87:32"><expr pos:start="87:32" pos:end="87:32"><name pos:start="87:32" pos:end="87:32">s</name></expr></argument>, <argument pos:start="87:35" pos:end="87:45"><expr pos:start="87:35" pos:end="87:45"><name pos:start="87:35" pos:end="87:45">out_samples</name></expr></argument>, <argument pos:start="87:48" pos:end="87:50"><expr pos:start="87:48" pos:end="87:50"><name pos:start="87:48" pos:end="87:50">buf</name></expr></argument>, <argument pos:start="87:53" pos:end="87:60"><expr pos:start="87:53" pos:end="87:60"><name pos:start="87:53" pos:end="87:60">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="113:5"><if pos:start="89:5" pos:end="97:5">if <condition pos:start="89:8" pos:end="89:22">(<expr pos:start="89:9" pos:end="89:21"><name pos:start="89:9" pos:end="89:16">out_size</name> <operator pos:start="89:18" pos:end="89:19">&gt;=</operator> <literal type="number" pos:start="89:21" pos:end="89:21">0</literal></expr>)</condition> <block pos:start="89:24" pos:end="97:5">{<block_content pos:start="91:9" pos:end="93:44">

        <expr_stmt pos:start="91:9" pos:end="91:38"><expr pos:start="91:9" pos:end="91:37"><operator pos:start="91:9" pos:end="91:9">*</operator><name pos:start="91:10" pos:end="91:18">data_size</name>         <operator pos:start="91:28" pos:end="91:28">=</operator> <name pos:start="91:30" pos:end="91:37">out_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:44"><expr pos:start="93:9" pos:end="93:43"><name pos:start="93:9" pos:end="93:26"><name pos:start="93:9" pos:end="93:13">avctx</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:26">sample_rate</name></name> <operator pos:start="93:28" pos:end="93:28">=</operator> <name pos:start="93:30" pos:end="93:43"><name pos:start="93:30" pos:end="93:30">s</name><operator pos:start="93:31" pos:end="93:32">-&gt;</operator><name pos:start="93:33" pos:end="93:43">sample_rate</name></name></expr>;</expr_stmt>

        <comment type="line" pos:start="95:9" pos:end="95:73">//FIXME maybe move the other codec info stuff from above here too</comment>

    </block_content>}</block></if> <else pos:start="97:7" pos:end="113:5">else <block pos:start="97:12" pos:end="113:5">{<block_content pos:start="99:9" pos:end="111:28">

        <expr_stmt pos:start="99:9" pos:end="99:80"><expr pos:start="99:9" pos:end="99:79"><call pos:start="99:9" pos:end="99:79"><name pos:start="99:9" pos:end="99:14">av_log</name><argument_list pos:start="99:15" pos:end="99:79">(<argument pos:start="99:16" pos:end="99:20"><expr pos:start="99:16" pos:end="99:20"><name pos:start="99:16" pos:end="99:20">avctx</name></expr></argument>, <argument pos:start="99:23" pos:end="99:34"><expr pos:start="99:23" pos:end="99:34"><name pos:start="99:23" pos:end="99:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="99:37" pos:end="99:78"><expr pos:start="99:37" pos:end="99:78"><literal type="string" pos:start="99:37" pos:end="99:78">"Error while decoding MPEG audio frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="101:9" pos:end="107:21">/* Only return an error if the bad frame makes up the whole packet.

           If there is more data in the packet, just consume the bad frame

           instead of returning an error, which would discard the whole

           packet. */</comment>

        <if_stmt pos:start="109:9" pos:end="111:28"><if pos:start="109:9" pos:end="111:28">if <condition pos:start="109:12" pos:end="109:36">(<expr pos:start="109:13" pos:end="109:35"><name pos:start="109:13" pos:end="109:20">buf_size</name> <operator pos:start="109:22" pos:end="109:23">==</operator> <name pos:start="109:25" pos:end="109:35"><name pos:start="109:25" pos:end="109:29">avpkt</name><operator pos:start="109:30" pos:end="109:31">-&gt;</operator><name pos:start="109:32" pos:end="109:35">size</name></name></expr>)</condition><block type="pseudo" pos:start="111:13" pos:end="111:28"><block_content pos:start="111:13" pos:end="111:28">

            <return pos:start="111:13" pos:end="111:28">return <expr pos:start="111:20" pos:end="111:27"><name pos:start="111:20" pos:end="111:27">out_size</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:22"><expr pos:start="115:5" pos:end="115:21"><name pos:start="115:5" pos:end="115:17"><name pos:start="115:5" pos:end="115:5">s</name><operator pos:start="115:6" pos:end="115:7">-&gt;</operator><name pos:start="115:8" pos:end="115:17">frame_size</name></name> <operator pos:start="115:19" pos:end="115:19">=</operator> <literal type="number" pos:start="115:21" pos:end="115:21">0</literal></expr>;</expr_stmt>

    <return pos:start="117:5" pos:end="117:20">return <expr pos:start="117:12" pos:end="117:19"><name pos:start="117:12" pos:end="117:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
