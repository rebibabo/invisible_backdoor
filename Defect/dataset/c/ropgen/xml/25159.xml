<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25159.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:51"><name pos:start="1:1" pos:end="1:14">envlist_setenv</name><argument_list pos:start="1:15" pos:end="1:51">(<argument pos:start="1:16" pos:end="1:33">envlist_t *envlist</argument>, <argument pos:start="1:36" pos:end="1:50">const char *env</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:9" pos:end="83:19">

	<decl_stmt pos:start="5:9" pos:end="5:43"><decl pos:start="5:9" pos:end="5:42"><type pos:start="5:9" pos:end="5:30"><name pos:start="5:9" pos:end="5:28"><name pos:start="5:9" pos:end="5:14">struct</name> <name pos:start="5:16" pos:end="5:28">envlist_entry</name></name> <modifier pos:start="5:30" pos:end="5:30">*</modifier></type><name pos:start="5:31" pos:end="5:35">entry</name> <init pos:start="5:37" pos:end="5:42">= <expr pos:start="5:39" pos:end="5:42"><name pos:start="5:39" pos:end="5:42">NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="7:28"><decl pos:start="7:9" pos:end="7:27"><type pos:start="7:9" pos:end="7:20"><specifier pos:start="7:9" pos:end="7:13">const</specifier> <name pos:start="7:15" pos:end="7:18">char</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:27">eq_sign</name></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:27"><decl pos:start="9:9" pos:end="9:26"><type pos:start="9:9" pos:end="9:14"><name pos:start="9:9" pos:end="9:14">size_t</name></type> <name pos:start="9:16" pos:end="9:26">envname_len</name></decl>;</decl_stmt>



	<if_stmt pos:start="13:9" pos:end="15:32"><if pos:start="13:9" pos:end="15:32">if <condition pos:start="13:12" pos:end="13:47">(<expr pos:start="13:13" pos:end="13:46"><operator pos:start="13:13" pos:end="13:13">(</operator><name pos:start="13:14" pos:end="13:20">envlist</name> <operator pos:start="13:22" pos:end="13:23">==</operator> <name pos:start="13:25" pos:end="13:28">NULL</name><operator pos:start="13:29" pos:end="13:29">)</operator> <operator pos:start="13:31" pos:end="13:32">||</operator> <operator pos:start="13:34" pos:end="13:34">(</operator><name pos:start="13:35" pos:end="13:37">env</name> <operator pos:start="13:39" pos:end="13:40">==</operator> <name pos:start="13:42" pos:end="13:45">NULL</name><operator pos:start="13:46" pos:end="13:46">)</operator></expr>)</condition><block type="pseudo" pos:start="15:17" pos:end="15:32"><block_content pos:start="15:17" pos:end="15:32">

		<return pos:start="15:17" pos:end="15:32">return <expr pos:start="15:24" pos:end="15:31"><operator pos:start="15:24" pos:end="15:24">(</operator><name pos:start="15:25" pos:end="15:30">EINVAL</name><operator pos:start="15:31" pos:end="15:31">)</operator></expr>;</return></block_content></block></if></if_stmt>



	<comment type="block" pos:start="19:9" pos:end="19:53">/* find out first equals sign in given env */</comment>

	<if_stmt pos:start="21:9" pos:end="23:32"><if pos:start="21:9" pos:end="23:32">if <condition pos:start="21:12" pos:end="21:49">(<expr pos:start="21:13" pos:end="21:48"><operator pos:start="21:13" pos:end="21:13">(</operator><name pos:start="21:14" pos:end="21:20">eq_sign</name> <operator pos:start="21:22" pos:end="21:22">=</operator> <call pos:start="21:24" pos:end="21:39"><name pos:start="21:24" pos:end="21:29">strchr</name><argument_list pos:start="21:30" pos:end="21:39">(<argument pos:start="21:31" pos:end="21:33"><expr pos:start="21:31" pos:end="21:33"><name pos:start="21:31" pos:end="21:33">env</name></expr></argument>, <argument pos:start="21:36" pos:end="21:38"><expr pos:start="21:36" pos:end="21:38"><literal type="char" pos:start="21:36" pos:end="21:38">'='</literal></expr></argument>)</argument_list></call><operator pos:start="21:40" pos:end="21:40">)</operator> <operator pos:start="21:42" pos:end="21:43">==</operator> <name pos:start="21:45" pos:end="21:48">NULL</name></expr>)</condition><block type="pseudo" pos:start="23:17" pos:end="23:32"><block_content pos:start="23:17" pos:end="23:32">

		<return pos:start="23:17" pos:end="23:32">return <expr pos:start="23:24" pos:end="23:31"><operator pos:start="23:24" pos:end="23:24">(</operator><name pos:start="23:25" pos:end="23:30">EINVAL</name><operator pos:start="23:31" pos:end="23:31">)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt pos:start="25:9" pos:end="25:40"><expr pos:start="25:9" pos:end="25:39"><name pos:start="25:9" pos:end="25:19">envname_len</name> <operator pos:start="25:21" pos:end="25:21">=</operator> <name pos:start="25:23" pos:end="25:29">eq_sign</name> <operator pos:start="25:31" pos:end="25:31">-</operator> <name pos:start="25:33" pos:end="25:35">env</name> <operator pos:start="25:37" pos:end="25:37">+</operator> <literal type="number" pos:start="25:39" pos:end="25:39">1</literal></expr>;</expr_stmt>



	<comment type="block" pos:start="29:9" pos:end="37:11">/*

	 * If there already exists variable with given name

	 * we remove and release it before allocating a whole

	 * new entry.

	 */</comment>

	<for pos:start="39:9" pos:end="47:9">for <control pos:start="39:13" pos:end="41:43">(<init pos:start="39:14" pos:end="39:50"><expr pos:start="39:14" pos:end="39:49"><name pos:start="39:14" pos:end="39:18">entry</name> <operator pos:start="39:20" pos:end="39:20">=</operator> <name pos:start="39:22" pos:end="39:49"><name pos:start="39:22" pos:end="39:28">envlist</name><operator pos:start="39:29" pos:end="39:30">-&gt;</operator><name pos:start="39:31" pos:end="39:40">el_entries</name><operator pos:start="39:41" pos:end="39:41">.</operator><name pos:start="39:42" pos:end="39:49">lh_first</name></name></expr>;</init> <condition pos:start="39:52" pos:end="39:65"><expr pos:start="39:52" pos:end="39:64"><name pos:start="39:52" pos:end="39:56">entry</name> <operator pos:start="39:58" pos:end="39:59">!=</operator> <name pos:start="39:61" pos:end="39:64">NULL</name></expr>;</condition>

	    <incr pos:start="41:13" pos:end="41:42"><expr pos:start="41:13" pos:end="41:42"><name pos:start="41:13" pos:end="41:17">entry</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <name pos:start="41:21" pos:end="41:42"><name pos:start="41:21" pos:end="41:25">entry</name><operator pos:start="41:26" pos:end="41:27">-&gt;</operator><name pos:start="41:28" pos:end="41:34">ev_link</name><operator pos:start="41:35" pos:end="41:35">.</operator><name pos:start="41:36" pos:end="41:42">le_next</name></name></expr></incr>)</control> <block pos:start="41:45" pos:end="47:9">{<block_content pos:start="43:17" pos:end="45:30">

		<if_stmt pos:start="43:17" pos:end="45:30"><if pos:start="43:17" pos:end="45:30">if <condition pos:start="43:20" pos:end="43:66">(<expr pos:start="43:21" pos:end="43:65"><call pos:start="43:21" pos:end="43:60"><name pos:start="43:21" pos:end="43:27">strncmp</name><argument_list pos:start="43:28" pos:end="43:60">(<argument pos:start="43:29" pos:end="43:41"><expr pos:start="43:29" pos:end="43:41"><name pos:start="43:29" pos:end="43:41"><name pos:start="43:29" pos:end="43:33">entry</name><operator pos:start="43:34" pos:end="43:35">-&gt;</operator><name pos:start="43:36" pos:end="43:41">ev_var</name></name></expr></argument>, <argument pos:start="43:44" pos:end="43:46"><expr pos:start="43:44" pos:end="43:46"><name pos:start="43:44" pos:end="43:46">env</name></expr></argument>, <argument pos:start="43:49" pos:end="43:59"><expr pos:start="43:49" pos:end="43:59"><name pos:start="43:49" pos:end="43:59">envname_len</name></expr></argument>)</argument_list></call> <operator pos:start="43:62" pos:end="43:63">==</operator> <literal type="number" pos:start="43:65" pos:end="43:65">0</literal></expr>)</condition><block type="pseudo" pos:start="45:25" pos:end="45:30"><block_content pos:start="45:25" pos:end="45:30">

			<break pos:start="45:25" pos:end="45:30">break;</break></block_content></block></if></if_stmt>

	</block_content>}</block></for>



	<if_stmt pos:start="51:9" pos:end="63:9"><if pos:start="51:9" pos:end="59:9">if <condition pos:start="51:12" pos:end="51:26">(<expr pos:start="51:13" pos:end="51:25"><name pos:start="51:13" pos:end="51:17">entry</name> <operator pos:start="51:19" pos:end="51:20">!=</operator> <name pos:start="51:22" pos:end="51:25">NULL</name></expr>)</condition> <block pos:start="51:28" pos:end="59:9">{<block_content pos:start="53:17" pos:end="57:28">

		<expr_stmt pos:start="53:17" pos:end="53:45"><expr pos:start="53:17" pos:end="53:44"><call pos:start="53:17" pos:end="53:44"><name pos:start="53:17" pos:end="53:28">QLIST_REMOVE</name><argument_list pos:start="53:29" pos:end="53:44">(<argument pos:start="53:30" pos:end="53:34"><expr pos:start="53:30" pos:end="53:34"><name pos:start="53:30" pos:end="53:34">entry</name></expr></argument>, <argument pos:start="53:37" pos:end="53:43"><expr pos:start="53:37" pos:end="53:43"><name pos:start="53:37" pos:end="53:43">ev_link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="55:17" pos:end="55:44"><expr pos:start="55:17" pos:end="55:43"><call pos:start="55:17" pos:end="55:43"><name pos:start="55:17" pos:end="55:20">free</name><argument_list pos:start="55:21" pos:end="55:43">(<argument pos:start="55:22" pos:end="55:42"><expr pos:start="55:22" pos:end="55:42"><operator pos:start="55:22" pos:end="55:22">(</operator><name pos:start="55:23" pos:end="55:26">char</name> <operator pos:start="55:28" pos:end="55:28">*</operator><operator pos:start="55:29" pos:end="55:29">)</operator><name pos:start="55:30" pos:end="55:42"><name pos:start="55:30" pos:end="55:34">entry</name><operator pos:start="55:35" pos:end="55:36">-&gt;</operator><name pos:start="55:37" pos:end="55:42">ev_var</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="57:17" pos:end="57:28"><expr pos:start="57:17" pos:end="57:27"><call pos:start="57:17" pos:end="57:27"><name pos:start="57:17" pos:end="57:20">free</name><argument_list pos:start="57:21" pos:end="57:27">(<argument pos:start="57:22" pos:end="57:26"><expr pos:start="57:22" pos:end="57:26"><name pos:start="57:22" pos:end="57:26">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="59:11" pos:end="63:9">else <block pos:start="59:16" pos:end="63:9">{<block_content pos:start="61:17" pos:end="61:36">

		<expr_stmt pos:start="61:17" pos:end="61:36"><expr pos:start="61:17" pos:end="61:35"><name pos:start="61:17" pos:end="61:33"><name pos:start="61:17" pos:end="61:23">envlist</name><operator pos:start="61:24" pos:end="61:25">-&gt;</operator><name pos:start="61:26" pos:end="61:33">el_count</name></name><operator pos:start="61:34" pos:end="61:35">++</operator></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>



	<if_stmt pos:start="67:9" pos:end="69:31"><if pos:start="67:9" pos:end="69:31">if <condition pos:start="67:12" pos:end="67:54">(<expr pos:start="67:13" pos:end="67:53"><operator pos:start="67:13" pos:end="67:13">(</operator><name pos:start="67:14" pos:end="67:18">entry</name> <operator pos:start="67:20" pos:end="67:20">=</operator> <call pos:start="67:22" pos:end="67:44"><name pos:start="67:22" pos:end="67:27">malloc</name><argument_list pos:start="67:28" pos:end="67:44">(<argument pos:start="67:29" pos:end="67:43"><expr pos:start="67:29" pos:end="67:43"><sizeof pos:start="67:29" pos:end="67:43">sizeof <argument_list pos:start="67:36" pos:end="67:43">(<argument pos:start="67:37" pos:end="67:42"><expr pos:start="67:37" pos:end="67:42"><operator pos:start="67:37" pos:end="67:37">*</operator><name pos:start="67:38" pos:end="67:42">entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator pos:start="67:45" pos:end="67:45">)</operator> <operator pos:start="67:47" pos:end="67:48">==</operator> <name pos:start="67:50" pos:end="67:53">NULL</name></expr>)</condition><block type="pseudo" pos:start="69:17" pos:end="69:31"><block_content pos:start="69:17" pos:end="69:31">

		<return pos:start="69:17" pos:end="69:31">return <expr pos:start="69:24" pos:end="69:30"><operator pos:start="69:24" pos:end="69:24">(</operator><name pos:start="69:25" pos:end="69:29">errno</name><operator pos:start="69:30" pos:end="69:30">)</operator></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt pos:start="71:9" pos:end="77:9"><if pos:start="71:9" pos:end="77:9">if <condition pos:start="71:12" pos:end="71:50">(<expr pos:start="71:13" pos:end="71:49"><operator pos:start="71:13" pos:end="71:13">(</operator><name pos:start="71:14" pos:end="71:26"><name pos:start="71:14" pos:end="71:18">entry</name><operator pos:start="71:19" pos:end="71:20">-&gt;</operator><name pos:start="71:21" pos:end="71:26">ev_var</name></name> <operator pos:start="71:28" pos:end="71:28">=</operator> <call pos:start="71:30" pos:end="71:40"><name pos:start="71:30" pos:end="71:35">strdup</name><argument_list pos:start="71:36" pos:end="71:40">(<argument pos:start="71:37" pos:end="71:39"><expr pos:start="71:37" pos:end="71:39"><name pos:start="71:37" pos:end="71:39">env</name></expr></argument>)</argument_list></call><operator pos:start="71:41" pos:end="71:41">)</operator> <operator pos:start="71:43" pos:end="71:44">==</operator> <name pos:start="71:46" pos:end="71:49">NULL</name></expr>)</condition> <block pos:start="71:52" pos:end="77:9">{<block_content pos:start="73:17" pos:end="75:31">

		<expr_stmt pos:start="73:17" pos:end="73:28"><expr pos:start="73:17" pos:end="73:27"><call pos:start="73:17" pos:end="73:27"><name pos:start="73:17" pos:end="73:20">free</name><argument_list pos:start="73:21" pos:end="73:27">(<argument pos:start="73:22" pos:end="73:26"><expr pos:start="73:22" pos:end="73:26"><name pos:start="73:22" pos:end="73:26">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="75:17" pos:end="75:31">return <expr pos:start="75:24" pos:end="75:30"><operator pos:start="75:24" pos:end="75:24">(</operator><name pos:start="75:25" pos:end="75:29">errno</name><operator pos:start="75:30" pos:end="75:30">)</operator></expr>;</return>

	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="79:9" pos:end="79:64"><expr pos:start="79:9" pos:end="79:63"><call pos:start="79:9" pos:end="79:63"><name pos:start="79:9" pos:end="79:25">QLIST_INSERT_HEAD</name><argument_list pos:start="79:26" pos:end="79:63">(<argument pos:start="79:27" pos:end="79:46"><expr pos:start="79:27" pos:end="79:46"><operator pos:start="79:27" pos:end="79:27">&amp;</operator><name pos:start="79:28" pos:end="79:46"><name pos:start="79:28" pos:end="79:34">envlist</name><operator pos:start="79:35" pos:end="79:36">-&gt;</operator><name pos:start="79:37" pos:end="79:46">el_entries</name></name></expr></argument>, <argument pos:start="79:49" pos:end="79:53"><expr pos:start="79:49" pos:end="79:53"><name pos:start="79:49" pos:end="79:53">entry</name></expr></argument>, <argument pos:start="79:56" pos:end="79:62"><expr pos:start="79:56" pos:end="79:62"><name pos:start="79:56" pos:end="79:62">ev_link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<return pos:start="83:9" pos:end="83:19">return <expr pos:start="83:16" pos:end="83:18"><operator pos:start="83:16" pos:end="83:16">(</operator><literal type="number" pos:start="83:17" pos:end="83:17">0</literal><operator pos:start="83:18" pos:end="83:18">)</operator></expr>;</return>

</block_content>}</block>
</unit>
