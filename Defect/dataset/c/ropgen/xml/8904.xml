<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8904.c" pos:tabs="8"><function pos:start="1:1" pos:end="209:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">handle_sys</name><parameter_list pos:start="1:23" pos:end="5:75">(<parameter pos:start="1:24" pos:end="1:38"><decl pos:start="1:24" pos:end="1:38"><type pos:start="1:24" pos:end="1:38"><name pos:start="1:24" pos:end="1:35">DisasContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:53"><decl pos:start="1:41" pos:end="1:53"><type pos:start="1:41" pos:end="1:53"><name pos:start="1:41" pos:end="1:48">uint32_t</name></type> <name pos:start="1:50" pos:end="1:53">insn</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:66"><decl pos:start="1:56" pos:end="1:66"><type pos:start="1:56" pos:end="1:66"><name pos:start="1:56" pos:end="1:59">bool</name></type> <name pos:start="1:61" pos:end="1:66">isread</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:39"><decl pos:start="3:24" pos:end="3:39"><type pos:start="3:24" pos:end="3:39"><name pos:start="3:24" pos:end="3:31">unsigned</name> <name pos:start="3:33" pos:end="3:35">int</name></type> <name pos:start="3:37" pos:end="3:39">op0</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:57"><decl pos:start="3:42" pos:end="3:57"><type pos:start="3:42" pos:end="3:57"><name pos:start="3:42" pos:end="3:49">unsigned</name> <name pos:start="3:51" pos:end="3:53">int</name></type> <name pos:start="3:55" pos:end="3:57">op1</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:75"><decl pos:start="3:60" pos:end="3:75"><type pos:start="3:60" pos:end="3:75"><name pos:start="3:60" pos:end="3:67">unsigned</name> <name pos:start="3:69" pos:end="3:71">int</name></type> <name pos:start="3:73" pos:end="3:75">op2</name></decl></parameter>,

                       <parameter pos:start="5:24" pos:end="5:39"><decl pos:start="5:24" pos:end="5:39"><type pos:start="5:24" pos:end="5:39"><name pos:start="5:24" pos:end="5:31">unsigned</name> <name pos:start="5:33" pos:end="5:35">int</name></type> <name pos:start="5:37" pos:end="5:39">crn</name></decl></parameter>, <parameter pos:start="5:42" pos:end="5:57"><decl pos:start="5:42" pos:end="5:57"><type pos:start="5:42" pos:end="5:57"><name pos:start="5:42" pos:end="5:49">unsigned</name> <name pos:start="5:51" pos:end="5:53">int</name></type> <name pos:start="5:55" pos:end="5:57">crm</name></decl></parameter>, <parameter pos:start="5:60" pos:end="5:74"><decl pos:start="5:60" pos:end="5:74"><type pos:start="5:60" pos:end="5:74"><name pos:start="5:60" pos:end="5:67">unsigned</name> <name pos:start="5:69" pos:end="5:71">int</name></type> <name pos:start="5:73" pos:end="5:74">rt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="209:1">{<block_content pos:start="9:5" pos:end="207:5">

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:24"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:22">ARMCPRegInfo</name> <modifier pos:start="9:24" pos:end="9:24">*</modifier></type><name pos:start="9:25" pos:end="9:26">ri</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">TCGv_i64</name></type> <name pos:start="11:14" pos:end="11:19">tcg_rt</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="19:73"><expr pos:start="15:5" pos:end="19:72"><name pos:start="15:5" pos:end="15:6">ri</name> <operator pos:start="15:8" pos:end="15:8">=</operator> <call pos:start="15:10" pos:end="19:72"><name pos:start="15:10" pos:end="15:27">get_arm_cp_reginfo</name><argument_list pos:start="15:28" pos:end="19:72">(<argument pos:start="15:29" pos:end="15:38"><expr pos:start="15:29" pos:end="15:38"><name pos:start="15:29" pos:end="15:38"><name pos:start="15:29" pos:end="15:29">s</name><operator pos:start="15:30" pos:end="15:31">-&gt;</operator><name pos:start="15:32" pos:end="15:38">cp_regs</name></name></expr></argument>,

                            <argument pos:start="17:29" pos:end="19:71"><expr pos:start="17:29" pos:end="19:71"><call pos:start="17:29" pos:end="19:71"><name pos:start="17:29" pos:end="17:46">ENCODE_AA64_CP_REG</name><argument_list pos:start="17:47" pos:end="19:71">(<argument pos:start="17:48" pos:end="17:69"><expr pos:start="17:48" pos:end="17:69"><name pos:start="17:48" pos:end="17:69">CP_REG_ARM64_SYSREG_CP</name></expr></argument>,

                                               <argument pos:start="19:48" pos:end="19:50"><expr pos:start="19:48" pos:end="19:50"><name pos:start="19:48" pos:end="19:50">crn</name></expr></argument>, <argument pos:start="19:53" pos:end="19:55"><expr pos:start="19:53" pos:end="19:55"><name pos:start="19:53" pos:end="19:55">crm</name></expr></argument>, <argument pos:start="19:58" pos:end="19:60"><expr pos:start="19:58" pos:end="19:60"><name pos:start="19:58" pos:end="19:60">op0</name></expr></argument>, <argument pos:start="19:63" pos:end="19:65"><expr pos:start="19:63" pos:end="19:65"><name pos:start="19:63" pos:end="19:65">op1</name></expr></argument>, <argument pos:start="19:68" pos:end="19:70"><expr pos:start="19:68" pos:end="19:70"><name pos:start="19:68" pos:end="19:70">op2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="41:5"><if pos:start="23:5" pos:end="41:5">if <condition pos:start="23:8" pos:end="23:12">(<expr pos:start="23:9" pos:end="23:11"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:11">ri</name></expr>)</condition> <block pos:start="23:14" pos:end="41:5">{<block_content pos:start="31:9" pos:end="39:15">

        <comment type="block" pos:start="25:9" pos:end="29:11">/* Unknown register; this might be a guest error or a QEMU

         * unimplemented feature.

         */</comment>

        <expr_stmt pos:start="31:9" pos:end="35:74"><expr pos:start="31:9" pos:end="35:73"><call pos:start="31:9" pos:end="35:73"><name pos:start="31:9" pos:end="31:21">qemu_log_mask</name><argument_list pos:start="31:22" pos:end="35:73">(<argument pos:start="31:23" pos:end="31:31"><expr pos:start="31:23" pos:end="31:31"><name pos:start="31:23" pos:end="31:31">LOG_UNIMP</name></expr></argument>, <argument pos:start="31:34" pos:end="33:76"><expr pos:start="31:34" pos:end="33:76"><literal type="string" pos:start="31:34" pos:end="31:68">"%s access to unsupported AArch64 "</literal>

                      <literal type="string" pos:start="33:23" pos:end="33:76">"system register op0:%d op1:%d crn:%d crm:%d op2:%d\n"</literal></expr></argument>,

                      <argument pos:start="35:23" pos:end="35:47"><expr pos:start="35:23" pos:end="35:47"><ternary pos:start="35:23" pos:end="35:47"><condition pos:start="35:23" pos:end="35:30"><expr pos:start="35:23" pos:end="35:28"><name pos:start="35:23" pos:end="35:28">isread</name></expr> ?</condition><then pos:start="35:32" pos:end="35:37"> <expr pos:start="35:32" pos:end="35:37"><literal type="string" pos:start="35:32" pos:end="35:37">"read"</literal></expr> </then><else pos:start="35:39" pos:end="35:47">: <expr pos:start="35:41" pos:end="35:47"><literal type="string" pos:start="35:41" pos:end="35:47">"write"</literal></expr></else></ternary></expr></argument>, <argument pos:start="35:50" pos:end="35:52"><expr pos:start="35:50" pos:end="35:52"><name pos:start="35:50" pos:end="35:52">op0</name></expr></argument>, <argument pos:start="35:55" pos:end="35:57"><expr pos:start="35:55" pos:end="35:57"><name pos:start="35:55" pos:end="35:57">op1</name></expr></argument>, <argument pos:start="35:60" pos:end="35:62"><expr pos:start="35:60" pos:end="35:62"><name pos:start="35:60" pos:end="35:62">crn</name></expr></argument>, <argument pos:start="35:65" pos:end="35:67"><expr pos:start="35:65" pos:end="35:67"><name pos:start="35:65" pos:end="35:67">crm</name></expr></argument>, <argument pos:start="35:70" pos:end="35:72"><expr pos:start="35:70" pos:end="35:72"><name pos:start="35:70" pos:end="35:72">op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:32"><expr pos:start="37:9" pos:end="37:31"><call pos:start="37:9" pos:end="37:31"><name pos:start="37:9" pos:end="37:28">unallocated_encoding</name><argument_list pos:start="37:29" pos:end="37:31">(<argument pos:start="37:30" pos:end="37:30"><expr pos:start="37:30" pos:end="37:30"><name pos:start="37:30" pos:end="37:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:34">/* Check access permissions */</comment>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:49">(<expr pos:start="47:9" pos:end="47:48"><operator pos:start="47:9" pos:end="47:9">!</operator><call pos:start="47:10" pos:end="47:48"><name pos:start="47:10" pos:end="47:21">cp_access_ok</name><argument_list pos:start="47:22" pos:end="47:48">(<argument pos:start="47:23" pos:end="47:35"><expr pos:start="47:23" pos:end="47:35"><name pos:start="47:23" pos:end="47:35"><name pos:start="47:23" pos:end="47:23">s</name><operator pos:start="47:24" pos:end="47:25">-&gt;</operator><name pos:start="47:26" pos:end="47:35">current_pl</name></name></expr></argument>, <argument pos:start="47:38" pos:end="47:39"><expr pos:start="47:38" pos:end="47:39"><name pos:start="47:38" pos:end="47:39">ri</name></expr></argument>, <argument pos:start="47:42" pos:end="47:47"><expr pos:start="47:42" pos:end="47:47"><name pos:start="47:42" pos:end="47:47">isread</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:51" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:15">

        <expr_stmt pos:start="49:9" pos:end="49:32"><expr pos:start="49:9" pos:end="49:31"><call pos:start="49:9" pos:end="49:31"><name pos:start="49:9" pos:end="49:28">unallocated_encoding</name><argument_list pos:start="49:29" pos:end="49:31">(<argument pos:start="49:30" pos:end="49:30"><expr pos:start="49:30" pos:end="49:30"><name pos:start="49:30" pos:end="49:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="75:5"><if pos:start="57:5" pos:end="75:5">if <condition pos:start="57:8" pos:end="57:21">(<expr pos:start="57:9" pos:end="57:20"><name pos:start="57:9" pos:end="57:20"><name pos:start="57:9" pos:end="57:10">ri</name><operator pos:start="57:11" pos:end="57:12">-&gt;</operator><name pos:start="57:13" pos:end="57:20">accessfn</name></name></expr>)</condition> <block pos:start="57:23" pos:end="75:5">{<block_content pos:start="65:9" pos:end="73:34">

        <comment type="block" pos:start="59:9" pos:end="63:11">/* Emit code to perform further access permissions checks at

         * runtime; this may result in an exception.

         */</comment>

        <decl_stmt pos:start="65:9" pos:end="65:24"><decl pos:start="65:9" pos:end="65:23"><type pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:16">TCGv_ptr</name></type> <name pos:start="65:18" pos:end="65:23">tmpptr</name></decl>;</decl_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:37"><expr pos:start="67:9" pos:end="67:36"><call pos:start="67:9" pos:end="67:36"><name pos:start="67:9" pos:end="67:25">gen_a64_set_pc_im</name><argument_list pos:start="67:26" pos:end="67:36">(<argument pos:start="67:27" pos:end="67:35"><expr pos:start="67:27" pos:end="67:35"><name pos:start="67:27" pos:end="67:31"><name pos:start="67:27" pos:end="67:27">s</name><operator pos:start="67:28" pos:end="67:29">-&gt;</operator><name pos:start="67:30" pos:end="67:31">pc</name></name> <operator pos:start="67:33" pos:end="67:33">-</operator> <literal type="number" pos:start="67:35" pos:end="67:35">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:35"><expr pos:start="69:9" pos:end="69:34"><name pos:start="69:9" pos:end="69:14">tmpptr</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <call pos:start="69:18" pos:end="69:34"><name pos:start="69:18" pos:end="69:30">tcg_const_ptr</name><argument_list pos:start="69:31" pos:end="69:34">(<argument pos:start="69:32" pos:end="69:33"><expr pos:start="69:32" pos:end="69:33"><name pos:start="69:32" pos:end="69:33">ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:56"><expr pos:start="71:9" pos:end="71:55"><call pos:start="71:9" pos:end="71:55"><name pos:start="71:9" pos:end="71:38">gen_helper_access_check_cp_reg</name><argument_list pos:start="71:39" pos:end="71:55">(<argument pos:start="71:40" pos:end="71:46"><expr pos:start="71:40" pos:end="71:46"><name pos:start="71:40" pos:end="71:46">cpu_env</name></expr></argument>, <argument pos:start="71:49" pos:end="71:54"><expr pos:start="71:49" pos:end="71:54"><name pos:start="71:49" pos:end="71:54">tmpptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:34"><expr pos:start="73:9" pos:end="73:33"><call pos:start="73:9" pos:end="73:33"><name pos:start="73:9" pos:end="73:25">tcg_temp_free_ptr</name><argument_list pos:start="73:26" pos:end="73:33">(<argument pos:start="73:27" pos:end="73:32"><expr pos:start="73:27" pos:end="73:32"><name pos:start="73:27" pos:end="73:32">tmpptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:36">/* Handle special cases first */</comment>

    <switch pos:start="81:5" pos:end="121:5">switch <condition pos:start="81:12" pos:end="81:61">(<expr pos:start="81:13" pos:end="81:60"><name pos:start="81:13" pos:end="81:20"><name pos:start="81:13" pos:end="81:14">ri</name><operator pos:start="81:15" pos:end="81:16">-&gt;</operator><name pos:start="81:17" pos:end="81:20">type</name></name> <operator pos:start="81:22" pos:end="81:22">&amp;</operator> <operator pos:start="81:24" pos:end="81:24">~</operator><operator pos:start="81:25" pos:end="81:25">(</operator><name pos:start="81:26" pos:end="81:41">ARM_CP_FLAG_MASK</name> <operator pos:start="81:43" pos:end="81:43">&amp;</operator> <operator pos:start="81:45" pos:end="81:45">~</operator><name pos:start="81:46" pos:end="81:59">ARM_CP_SPECIAL</name><operator pos:start="81:60" pos:end="81:60">)</operator></expr>)</condition> <block pos:start="81:63" pos:end="121:5">{<block_content pos:start="83:5" pos:end="119:14">

    <case pos:start="83:5" pos:end="83:20">case <expr pos:start="83:10" pos:end="83:19"><name pos:start="83:10" pos:end="83:19">ARM_CP_NOP</name></expr>:</case>

        <return pos:start="85:9" pos:end="85:15">return;</return>

    <case pos:start="87:5" pos:end="87:21">case <expr pos:start="87:10" pos:end="87:20"><name pos:start="87:10" pos:end="87:20">ARM_CP_NZCV</name></expr>:</case>

        <expr_stmt pos:start="89:9" pos:end="89:32"><expr pos:start="89:9" pos:end="89:31"><name pos:start="89:9" pos:end="89:14">tcg_rt</name> <operator pos:start="89:16" pos:end="89:16">=</operator> <call pos:start="89:18" pos:end="89:31"><name pos:start="89:18" pos:end="89:24">cpu_reg</name><argument_list pos:start="89:25" pos:end="89:31">(<argument pos:start="89:26" pos:end="89:26"><expr pos:start="89:26" pos:end="89:26"><name pos:start="89:26" pos:end="89:26">s</name></expr></argument>, <argument pos:start="89:29" pos:end="89:30"><expr pos:start="89:29" pos:end="89:30"><name pos:start="89:29" pos:end="89:30">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="91:9" pos:end="99:9"><if pos:start="91:9" pos:end="95:9">if <condition pos:start="91:12" pos:end="91:19">(<expr pos:start="91:13" pos:end="91:18"><name pos:start="91:13" pos:end="91:18">isread</name></expr>)</condition> <block pos:start="91:21" pos:end="95:9">{<block_content pos:start="93:13" pos:end="93:33">

            <expr_stmt pos:start="93:13" pos:end="93:33"><expr pos:start="93:13" pos:end="93:32"><call pos:start="93:13" pos:end="93:32"><name pos:start="93:13" pos:end="93:24">gen_get_nzcv</name><argument_list pos:start="93:25" pos:end="93:32">(<argument pos:start="93:26" pos:end="93:31"><expr pos:start="93:26" pos:end="93:31"><name pos:start="93:26" pos:end="93:31">tcg_rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="95:11" pos:end="99:9">else <block pos:start="95:16" pos:end="99:9">{<block_content pos:start="97:13" pos:end="97:33">

            <expr_stmt pos:start="97:13" pos:end="97:33"><expr pos:start="97:13" pos:end="97:32"><call pos:start="97:13" pos:end="97:32"><name pos:start="97:13" pos:end="97:24">gen_set_nzcv</name><argument_list pos:start="97:25" pos:end="97:32">(<argument pos:start="97:26" pos:end="97:31"><expr pos:start="97:26" pos:end="97:31"><name pos:start="97:26" pos:end="97:31">tcg_rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <return pos:start="101:9" pos:end="101:15">return;</return>

    <case pos:start="103:5" pos:end="103:26">case <expr pos:start="103:10" pos:end="103:25"><name pos:start="103:10" pos:end="103:25">ARM_CP_CURRENTEL</name></expr>:</case>

        <comment type="block" pos:start="105:9" pos:end="109:11">/* Reads as current EL value from pstate, which is

         * guaranteed to be constant by the tb flags.

         */</comment>

        <expr_stmt pos:start="111:9" pos:end="111:32"><expr pos:start="111:9" pos:end="111:31"><name pos:start="111:9" pos:end="111:14">tcg_rt</name> <operator pos:start="111:16" pos:end="111:16">=</operator> <call pos:start="111:18" pos:end="111:31"><name pos:start="111:18" pos:end="111:24">cpu_reg</name><argument_list pos:start="111:25" pos:end="111:31">(<argument pos:start="111:26" pos:end="111:26"><expr pos:start="111:26" pos:end="111:26"><name pos:start="111:26" pos:end="111:26">s</name></expr></argument>, <argument pos:start="111:29" pos:end="111:30"><expr pos:start="111:29" pos:end="111:30"><name pos:start="111:29" pos:end="111:30">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:53"><expr pos:start="113:9" pos:end="113:52"><call pos:start="113:9" pos:end="113:52"><name pos:start="113:9" pos:end="113:24">tcg_gen_movi_i64</name><argument_list pos:start="113:25" pos:end="113:52">(<argument pos:start="113:26" pos:end="113:31"><expr pos:start="113:26" pos:end="113:31"><name pos:start="113:26" pos:end="113:31">tcg_rt</name></expr></argument>, <argument pos:start="113:34" pos:end="113:51"><expr pos:start="113:34" pos:end="113:51"><name pos:start="113:34" pos:end="113:46"><name pos:start="113:34" pos:end="113:34">s</name><operator pos:start="113:35" pos:end="113:36">-&gt;</operator><name pos:start="113:37" pos:end="113:46">current_pl</name></name> <operator pos:start="113:48" pos:end="113:49">&lt;&lt;</operator> <literal type="number" pos:start="113:51" pos:end="113:51">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="115:9" pos:end="115:15">return;</return>

    <default pos:start="117:5" pos:end="117:12">default:</default>

        <break pos:start="119:9" pos:end="119:14">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="125:5" pos:end="129:5"><if pos:start="125:5" pos:end="129:5">if <condition pos:start="125:8" pos:end="125:45">(<expr pos:start="125:9" pos:end="125:44"><name pos:start="125:9" pos:end="125:18">use_icount</name> <operator pos:start="125:20" pos:end="125:21">&amp;&amp;</operator> <operator pos:start="125:23" pos:end="125:23">(</operator><name pos:start="125:24" pos:end="125:31"><name pos:start="125:24" pos:end="125:25">ri</name><operator pos:start="125:26" pos:end="125:27">-&gt;</operator><name pos:start="125:28" pos:end="125:31">type</name></name> <operator pos:start="125:33" pos:end="125:33">&amp;</operator> <name pos:start="125:35" pos:end="125:43">ARM_CP_IO</name><operator pos:start="125:44" pos:end="125:44">)</operator></expr>)</condition> <block pos:start="125:47" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:23">

        <expr_stmt pos:start="127:9" pos:end="127:23"><expr pos:start="127:9" pos:end="127:22"><call pos:start="127:9" pos:end="127:22"><name pos:start="127:9" pos:end="127:20">gen_io_start</name><argument_list pos:start="127:21" pos:end="127:22">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:28"><expr pos:start="133:5" pos:end="133:27"><name pos:start="133:5" pos:end="133:10">tcg_rt</name> <operator pos:start="133:12" pos:end="133:12">=</operator> <call pos:start="133:14" pos:end="133:27"><name pos:start="133:14" pos:end="133:20">cpu_reg</name><argument_list pos:start="133:21" pos:end="133:27">(<argument pos:start="133:22" pos:end="133:22"><expr pos:start="133:22" pos:end="133:22"><name pos:start="133:22" pos:end="133:22">s</name></expr></argument>, <argument pos:start="133:25" pos:end="133:26"><expr pos:start="133:25" pos:end="133:26"><name pos:start="133:25" pos:end="133:26">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="137:5" pos:end="183:5"><if pos:start="137:5" pos:end="159:5">if <condition pos:start="137:8" pos:end="137:15">(<expr pos:start="137:9" pos:end="137:14"><name pos:start="137:9" pos:end="137:14">isread</name></expr>)</condition> <block pos:start="137:17" pos:end="159:5">{<block_content pos:start="139:9" pos:end="157:9">

        <if_stmt pos:start="139:9" pos:end="157:9"><if pos:start="139:9" pos:end="143:9">if <condition pos:start="139:12" pos:end="139:36">(<expr pos:start="139:13" pos:end="139:35"><name pos:start="139:13" pos:end="139:20"><name pos:start="139:13" pos:end="139:14">ri</name><operator pos:start="139:15" pos:end="139:16">-&gt;</operator><name pos:start="139:17" pos:end="139:20">type</name></name> <operator pos:start="139:22" pos:end="139:22">&amp;</operator> <name pos:start="139:24" pos:end="139:35">ARM_CP_CONST</name></expr>)</condition> <block pos:start="139:38" pos:end="143:9">{<block_content pos:start="141:13" pos:end="141:53">

            <expr_stmt pos:start="141:13" pos:end="141:53"><expr pos:start="141:13" pos:end="141:52"><call pos:start="141:13" pos:end="141:52"><name pos:start="141:13" pos:end="141:28">tcg_gen_movi_i64</name><argument_list pos:start="141:29" pos:end="141:52">(<argument pos:start="141:30" pos:end="141:35"><expr pos:start="141:30" pos:end="141:35"><name pos:start="141:30" pos:end="141:35">tcg_rt</name></expr></argument>, <argument pos:start="141:38" pos:end="141:51"><expr pos:start="141:38" pos:end="141:51"><name pos:start="141:38" pos:end="141:51"><name pos:start="141:38" pos:end="141:39">ri</name><operator pos:start="141:40" pos:end="141:41">-&gt;</operator><name pos:start="141:42" pos:end="141:51">resetvalue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="143:11" pos:end="153:9">else if <condition pos:start="143:19" pos:end="143:30">(<expr pos:start="143:20" pos:end="143:29"><name pos:start="143:20" pos:end="143:29"><name pos:start="143:20" pos:end="143:21">ri</name><operator pos:start="143:22" pos:end="143:23">-&gt;</operator><name pos:start="143:24" pos:end="143:29">readfn</name></name></expr>)</condition> <block pos:start="143:32" pos:end="153:9">{<block_content pos:start="145:13" pos:end="151:38">

            <decl_stmt pos:start="145:13" pos:end="145:28"><decl pos:start="145:13" pos:end="145:27"><type pos:start="145:13" pos:end="145:20"><name pos:start="145:13" pos:end="145:20">TCGv_ptr</name></type> <name pos:start="145:22" pos:end="145:27">tmpptr</name></decl>;</decl_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:39"><expr pos:start="147:13" pos:end="147:38"><name pos:start="147:13" pos:end="147:18">tmpptr</name> <operator pos:start="147:20" pos:end="147:20">=</operator> <call pos:start="147:22" pos:end="147:38"><name pos:start="147:22" pos:end="147:34">tcg_const_ptr</name><argument_list pos:start="147:35" pos:end="147:38">(<argument pos:start="147:36" pos:end="147:37"><expr pos:start="147:36" pos:end="147:37"><name pos:start="147:36" pos:end="147:37">ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:61"><expr pos:start="149:13" pos:end="149:60"><call pos:start="149:13" pos:end="149:60"><name pos:start="149:13" pos:end="149:35">gen_helper_get_cp_reg64</name><argument_list pos:start="149:36" pos:end="149:60">(<argument pos:start="149:37" pos:end="149:42"><expr pos:start="149:37" pos:end="149:42"><name pos:start="149:37" pos:end="149:42">tcg_rt</name></expr></argument>, <argument pos:start="149:45" pos:end="149:51"><expr pos:start="149:45" pos:end="149:51"><name pos:start="149:45" pos:end="149:51">cpu_env</name></expr></argument>, <argument pos:start="149:54" pos:end="149:59"><expr pos:start="149:54" pos:end="149:59"><name pos:start="149:54" pos:end="149:59">tmpptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:38"><expr pos:start="151:13" pos:end="151:37"><call pos:start="151:13" pos:end="151:37"><name pos:start="151:13" pos:end="151:29">tcg_temp_free_ptr</name><argument_list pos:start="151:30" pos:end="151:37">(<argument pos:start="151:31" pos:end="151:36"><expr pos:start="151:31" pos:end="151:36"><name pos:start="151:31" pos:end="151:36">tmpptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="153:11" pos:end="157:9">else <block pos:start="153:16" pos:end="157:9">{<block_content pos:start="155:13" pos:end="155:61">

            <expr_stmt pos:start="155:13" pos:end="155:61"><expr pos:start="155:13" pos:end="155:60"><call pos:start="155:13" pos:end="155:60"><name pos:start="155:13" pos:end="155:26">tcg_gen_ld_i64</name><argument_list pos:start="155:27" pos:end="155:60">(<argument pos:start="155:28" pos:end="155:33"><expr pos:start="155:28" pos:end="155:33"><name pos:start="155:28" pos:end="155:33">tcg_rt</name></expr></argument>, <argument pos:start="155:36" pos:end="155:42"><expr pos:start="155:36" pos:end="155:42"><name pos:start="155:36" pos:end="155:42">cpu_env</name></expr></argument>, <argument pos:start="155:45" pos:end="155:59"><expr pos:start="155:45" pos:end="155:59"><name pos:start="155:45" pos:end="155:59"><name pos:start="155:45" pos:end="155:46">ri</name><operator pos:start="155:47" pos:end="155:48">-&gt;</operator><name pos:start="155:49" pos:end="155:59">fieldoffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="159:7" pos:end="183:5">else <block pos:start="159:12" pos:end="183:5">{<block_content pos:start="161:9" pos:end="181:9">

        <if_stmt pos:start="161:9" pos:end="181:9"><if pos:start="161:9" pos:end="167:9">if <condition pos:start="161:12" pos:end="161:36">(<expr pos:start="161:13" pos:end="161:35"><name pos:start="161:13" pos:end="161:20"><name pos:start="161:13" pos:end="161:14">ri</name><operator pos:start="161:15" pos:end="161:16">-&gt;</operator><name pos:start="161:17" pos:end="161:20">type</name></name> <operator pos:start="161:22" pos:end="161:22">&amp;</operator> <name pos:start="161:24" pos:end="161:35">ARM_CP_CONST</name></expr>)</condition> <block pos:start="161:38" pos:end="167:9">{<block_content pos:start="165:13" pos:end="165:19">

            <comment type="block" pos:start="163:13" pos:end="163:69">/* If not forbidden by access permissions, treat as WI */</comment>

            <return pos:start="165:13" pos:end="165:19">return;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="167:11" pos:end="177:9">else if <condition pos:start="167:19" pos:end="167:31">(<expr pos:start="167:20" pos:end="167:30"><name pos:start="167:20" pos:end="167:30"><name pos:start="167:20" pos:end="167:21">ri</name><operator pos:start="167:22" pos:end="167:23">-&gt;</operator><name pos:start="167:24" pos:end="167:30">writefn</name></name></expr>)</condition> <block pos:start="167:33" pos:end="177:9">{<block_content pos:start="169:13" pos:end="175:38">

            <decl_stmt pos:start="169:13" pos:end="169:28"><decl pos:start="169:13" pos:end="169:27"><type pos:start="169:13" pos:end="169:20"><name pos:start="169:13" pos:end="169:20">TCGv_ptr</name></type> <name pos:start="169:22" pos:end="169:27">tmpptr</name></decl>;</decl_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:39"><expr pos:start="171:13" pos:end="171:38"><name pos:start="171:13" pos:end="171:18">tmpptr</name> <operator pos:start="171:20" pos:end="171:20">=</operator> <call pos:start="171:22" pos:end="171:38"><name pos:start="171:22" pos:end="171:34">tcg_const_ptr</name><argument_list pos:start="171:35" pos:end="171:38">(<argument pos:start="171:36" pos:end="171:37"><expr pos:start="171:36" pos:end="171:37"><name pos:start="171:36" pos:end="171:37">ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:61"><expr pos:start="173:13" pos:end="173:60"><call pos:start="173:13" pos:end="173:60"><name pos:start="173:13" pos:end="173:35">gen_helper_set_cp_reg64</name><argument_list pos:start="173:36" pos:end="173:60">(<argument pos:start="173:37" pos:end="173:43"><expr pos:start="173:37" pos:end="173:43"><name pos:start="173:37" pos:end="173:43">cpu_env</name></expr></argument>, <argument pos:start="173:46" pos:end="173:51"><expr pos:start="173:46" pos:end="173:51"><name pos:start="173:46" pos:end="173:51">tmpptr</name></expr></argument>, <argument pos:start="173:54" pos:end="173:59"><expr pos:start="173:54" pos:end="173:59"><name pos:start="173:54" pos:end="173:59">tcg_rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:38"><expr pos:start="175:13" pos:end="175:37"><call pos:start="175:13" pos:end="175:37"><name pos:start="175:13" pos:end="175:29">tcg_temp_free_ptr</name><argument_list pos:start="175:30" pos:end="175:37">(<argument pos:start="175:31" pos:end="175:36"><expr pos:start="175:31" pos:end="175:36"><name pos:start="175:31" pos:end="175:36">tmpptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="177:11" pos:end="181:9">else <block pos:start="177:16" pos:end="181:9">{<block_content pos:start="179:13" pos:end="179:61">

            <expr_stmt pos:start="179:13" pos:end="179:61"><expr pos:start="179:13" pos:end="179:60"><call pos:start="179:13" pos:end="179:60"><name pos:start="179:13" pos:end="179:26">tcg_gen_st_i64</name><argument_list pos:start="179:27" pos:end="179:60">(<argument pos:start="179:28" pos:end="179:33"><expr pos:start="179:28" pos:end="179:33"><name pos:start="179:28" pos:end="179:33">tcg_rt</name></expr></argument>, <argument pos:start="179:36" pos:end="179:42"><expr pos:start="179:36" pos:end="179:42"><name pos:start="179:36" pos:end="179:42">cpu_env</name></expr></argument>, <argument pos:start="179:45" pos:end="179:59"><expr pos:start="179:45" pos:end="179:59"><name pos:start="179:45" pos:end="179:59"><name pos:start="179:45" pos:end="179:46">ri</name><operator pos:start="179:47" pos:end="179:48">-&gt;</operator><name pos:start="179:49" pos:end="179:59">fieldoffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="187:5" pos:end="207:5"><if pos:start="187:5" pos:end="195:5">if <condition pos:start="187:8" pos:end="187:45">(<expr pos:start="187:9" pos:end="187:44"><name pos:start="187:9" pos:end="187:18">use_icount</name> <operator pos:start="187:20" pos:end="187:21">&amp;&amp;</operator> <operator pos:start="187:23" pos:end="187:23">(</operator><name pos:start="187:24" pos:end="187:31"><name pos:start="187:24" pos:end="187:25">ri</name><operator pos:start="187:26" pos:end="187:27">-&gt;</operator><name pos:start="187:28" pos:end="187:31">type</name></name> <operator pos:start="187:33" pos:end="187:33">&amp;</operator> <name pos:start="187:35" pos:end="187:43">ARM_CP_IO</name><operator pos:start="187:44" pos:end="187:44">)</operator></expr>)</condition> <block pos:start="187:47" pos:end="195:5">{<block_content pos:start="191:9" pos:end="193:33">

        <comment type="block" pos:start="189:9" pos:end="189:73">/* I/O operations must end the TB here (whether read or write) */</comment>

        <expr_stmt pos:start="191:9" pos:end="191:21"><expr pos:start="191:9" pos:end="191:20"><call pos:start="191:9" pos:end="191:20"><name pos:start="191:9" pos:end="191:18">gen_io_end</name><argument_list pos:start="191:19" pos:end="191:20">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:33"><expr pos:start="193:9" pos:end="193:32"><name pos:start="193:9" pos:end="193:17"><name pos:start="193:9" pos:end="193:9">s</name><operator pos:start="193:10" pos:end="193:11">-&gt;</operator><name pos:start="193:12" pos:end="193:17">is_jmp</name></name> <operator pos:start="193:19" pos:end="193:19">=</operator> <name pos:start="193:21" pos:end="193:32">DISAS_UPDATE</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="195:7" pos:end="207:5">else if <condition pos:start="195:15" pos:end="195:63">(<expr pos:start="195:16" pos:end="195:62"><operator pos:start="195:16" pos:end="195:16">!</operator><name pos:start="195:17" pos:end="195:22">isread</name> <operator pos:start="195:24" pos:end="195:25">&amp;&amp;</operator> <operator pos:start="195:27" pos:end="195:27">!</operator><operator pos:start="195:28" pos:end="195:28">(</operator><name pos:start="195:29" pos:end="195:36"><name pos:start="195:29" pos:end="195:30">ri</name><operator pos:start="195:31" pos:end="195:32">-&gt;</operator><name pos:start="195:33" pos:end="195:36">type</name></name> <operator pos:start="195:38" pos:end="195:38">&amp;</operator> <name pos:start="195:40" pos:end="195:61">ARM_CP_SUPPRESS_TB_END</name><operator pos:start="195:62" pos:end="195:62">)</operator></expr>)</condition> <block pos:start="195:65" pos:end="207:5">{<block_content pos:start="205:9" pos:end="205:33">

        <comment type="block" pos:start="197:9" pos:end="203:11">/* We default to ending the TB on a coprocessor register write,

         * but allow this to be suppressed by the register definition

         * (usually only necessary to work around guest bugs).

         */</comment>

        <expr_stmt pos:start="205:9" pos:end="205:33"><expr pos:start="205:9" pos:end="205:32"><name pos:start="205:9" pos:end="205:17"><name pos:start="205:9" pos:end="205:9">s</name><operator pos:start="205:10" pos:end="205:11">-&gt;</operator><name pos:start="205:12" pos:end="205:17">is_jmp</name></name> <operator pos:start="205:19" pos:end="205:19">=</operator> <name pos:start="205:21" pos:end="205:32">DISAS_UPDATE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
