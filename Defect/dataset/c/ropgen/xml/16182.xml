<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16182.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int64_t</name></type> <name pos:start="1:16" pos:end="1:35">alloc_clusters_noref</name><parameter_list pos:start="1:36" pos:end="1:72">(<parameter pos:start="1:37" pos:end="1:56"><decl pos:start="1:37" pos:end="1:56"><type pos:start="1:37" pos:end="1:56"><name pos:start="1:37" pos:end="1:52">BlockDriverState</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:56">bs</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:71"><decl pos:start="1:59" pos:end="1:71"><type pos:start="1:59" pos:end="1:71"><name pos:start="1:59" pos:end="1:66">uint64_t</name></type> <name pos:start="1:68" pos:end="1:71">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:68">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">BDRVQcowState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:33">= <expr pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:25">bs</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:14">i</name></decl>, <decl pos:start="7:17" pos:end="7:27"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:17" pos:end="7:27">nb_clusters</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">refcount</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:44"><expr pos:start="13:5" pos:end="13:43"><name pos:start="13:5" pos:end="13:15">nb_clusters</name> <operator pos:start="13:17" pos:end="13:17">=</operator> <call pos:start="13:19" pos:end="13:43"><name pos:start="13:19" pos:end="13:34">size_to_clusters</name><argument_list pos:start="13:35" pos:end="13:43">(<argument pos:start="13:36" pos:end="13:36"><expr pos:start="13:36" pos:end="13:36"><name pos:start="13:36" pos:end="13:36">s</name></expr></argument>, <argument pos:start="13:39" pos:end="13:42"><expr pos:start="13:39" pos:end="13:42"><name pos:start="13:39" pos:end="13:42">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="15:1" pos:end="15:6"><name pos:start="15:1" pos:end="15:5">retry</name>:</label>

    <for pos:start="17:5" pos:end="35:5">for<control pos:start="17:8" pos:end="17:36">(<init pos:start="17:9" pos:end="17:14"><expr pos:start="17:9" pos:end="17:13"><name pos:start="17:9" pos:end="17:9">i</name> <operator pos:start="17:11" pos:end="17:11">=</operator> <literal type="number" pos:start="17:13" pos:end="17:13">0</literal></expr>;</init> <condition pos:start="17:16" pos:end="17:31"><expr pos:start="17:16" pos:end="17:30"><name pos:start="17:16" pos:end="17:16">i</name> <operator pos:start="17:18" pos:end="17:18">&lt;</operator> <name pos:start="17:20" pos:end="17:30">nb_clusters</name></expr>;</condition> <incr pos:start="17:33" pos:end="17:35"><expr pos:start="17:33" pos:end="17:35"><name pos:start="17:33" pos:end="17:33">i</name><operator pos:start="17:34" pos:end="17:35">++</operator></expr></incr>)</control> <block pos:start="17:38" pos:end="35:5">{<block_content pos:start="19:9" pos:end="33:9">

        <decl_stmt pos:start="19:9" pos:end="19:62"><decl pos:start="19:9" pos:end="19:61"><type pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:16">uint64_t</name></type> <name pos:start="19:18" pos:end="19:35">next_cluster_index</name> <init pos:start="19:37" pos:end="19:61">= <expr pos:start="19:39" pos:end="19:61"><name pos:start="19:39" pos:end="19:59"><name pos:start="19:39" pos:end="19:39">s</name><operator pos:start="19:40" pos:end="19:41">-&gt;</operator><name pos:start="19:42" pos:end="19:59">free_cluster_index</name></name><operator pos:start="19:60" pos:end="19:61">++</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:56"><expr pos:start="21:9" pos:end="21:55"><name pos:start="21:9" pos:end="21:16">refcount</name> <operator pos:start="21:18" pos:end="21:18">=</operator> <call pos:start="21:20" pos:end="21:55"><name pos:start="21:20" pos:end="21:31">get_refcount</name><argument_list pos:start="21:32" pos:end="21:55">(<argument pos:start="21:33" pos:end="21:34"><expr pos:start="21:33" pos:end="21:34"><name pos:start="21:33" pos:end="21:34">bs</name></expr></argument>, <argument pos:start="21:37" pos:end="21:54"><expr pos:start="21:37" pos:end="21:54"><name pos:start="21:37" pos:end="21:54">next_cluster_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="25:9" pos:end="33:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:25">(<expr pos:start="25:13" pos:end="25:24"><name pos:start="25:13" pos:end="25:20">refcount</name> <operator pos:start="25:22" pos:end="25:22">&lt;</operator> <literal type="number" pos:start="25:24" pos:end="25:24">0</literal></expr>)</condition> <block pos:start="25:27" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:28">

            <return pos:start="27:13" pos:end="27:28">return <expr pos:start="27:20" pos:end="27:27"><name pos:start="27:20" pos:end="27:27">refcount</name></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="29:11" pos:end="33:9">else if <condition pos:start="29:19" pos:end="29:33">(<expr pos:start="29:20" pos:end="29:32"><name pos:start="29:20" pos:end="29:27">refcount</name> <operator pos:start="29:29" pos:end="29:30">!=</operator> <literal type="number" pos:start="29:32" pos:end="29:32">0</literal></expr>)</condition> <block pos:start="29:35" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:23">

            <goto pos:start="31:13" pos:end="31:23">goto <name pos:start="31:18" pos:end="31:22">retry</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="39:5" pos:end="41:23">/* Make sure that all offsets in the "allocated" range are representable

     * in an int64_t */</comment>

    <if_stmt pos:start="43:5" pos:end="52:0"><if pos:start="43:5" pos:end="52:0">if <condition pos:start="43:8" pos:end="43:67">(<expr pos:start="43:9" pos:end="43:66"><name pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:29">free_cluster_index</name></name> <operator pos:start="43:31" pos:end="43:31">-</operator> <literal type="number" pos:start="43:33" pos:end="43:33">1</literal> <operator pos:start="43:35" pos:end="43:35">&gt;</operator> <operator pos:start="43:37" pos:end="43:37">(</operator><name pos:start="43:38" pos:end="43:46">INT64_MAX</name> <operator pos:start="43:48" pos:end="43:49">&gt;&gt;</operator> <name pos:start="43:51" pos:end="43:65"><name pos:start="43:51" pos:end="43:51">s</name><operator pos:start="43:52" pos:end="43:53">-&gt;</operator><name pos:start="43:54" pos:end="43:65">cluster_bits</name></name><operator pos:start="43:66" pos:end="43:66">)</operator></expr>)</condition> <block pos:start="43:69" pos:end="52:0">{<block_content pos:start="45:9" pos:end="45:22">

        <return pos:start="45:9" pos:end="45:22">return <expr pos:start="45:16" pos:end="45:21"><operator pos:start="45:16" pos:end="45:16">-</operator><name pos:start="45:17" pos:end="45:21">EFBIG</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="51:1" pos:end="51:19">#<cpp:directive pos:start="51:2" pos:end="51:6">ifdef</cpp:directive> <name pos:start="51:8" pos:end="51:19">DEBUG_ALLOC2</name></cpp:ifdef>

    <expr_stmt pos:start="53:5" pos:end="60:0"><expr pos:start="53:5" pos:end="57:69"><call pos:start="53:5" pos:end="57:69"><name pos:start="53:5" pos:end="53:11">fprintf</name><argument_list pos:start="53:12" pos:end="57:69">(<argument pos:start="53:13" pos:end="53:18"><expr pos:start="53:13" pos:end="53:18"><name pos:start="53:13" pos:end="53:18">stderr</name></expr></argument>, <argument pos:start="53:21" pos:end="53:71"><expr pos:start="53:21" pos:end="53:71"><literal type="string" pos:start="53:21" pos:end="53:44">"alloc_clusters: size=%"</literal> <name pos:start="53:46" pos:end="53:51">PRId64</name> <literal type="string" pos:start="53:53" pos:end="53:59">" -&gt; %"</literal> <name pos:start="53:61" pos:end="53:66">PRId64</name> <literal type="string" pos:start="53:68" pos:end="53:71">"\n"</literal></expr></argument>,

            <argument pos:start="55:13" pos:end="55:16"><expr pos:start="55:13" pos:end="55:16"><name pos:start="55:13" pos:end="55:16">size</name></expr></argument>,

            <argument pos:start="57:13" pos:end="57:68"><expr pos:start="57:13" pos:end="57:68"><operator pos:start="57:13" pos:end="57:13">(</operator><name pos:start="57:14" pos:end="57:34"><name pos:start="57:14" pos:end="57:14">s</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:34">free_cluster_index</name></name> <operator pos:start="57:36" pos:end="57:36">-</operator> <name pos:start="57:38" pos:end="57:48">nb_clusters</name><operator pos:start="57:49" pos:end="57:49">)</operator> <operator pos:start="57:51" pos:end="57:52">&lt;&lt;</operator> <name pos:start="57:54" pos:end="57:68"><name pos:start="57:54" pos:end="57:54">s</name><operator pos:start="57:55" pos:end="57:56">-&gt;</operator><name pos:start="57:57" pos:end="57:68">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>

    <return pos:start="61:5" pos:end="61:68">return <expr pos:start="61:12" pos:end="61:67"><operator pos:start="61:12" pos:end="61:12">(</operator><name pos:start="61:13" pos:end="61:33"><name pos:start="61:13" pos:end="61:13">s</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:33">free_cluster_index</name></name> <operator pos:start="61:35" pos:end="61:35">-</operator> <name pos:start="61:37" pos:end="61:47">nb_clusters</name><operator pos:start="61:48" pos:end="61:48">)</operator> <operator pos:start="61:50" pos:end="61:51">&lt;&lt;</operator> <name pos:start="61:53" pos:end="61:67"><name pos:start="61:53" pos:end="61:53">s</name><operator pos:start="61:54" pos:end="61:55">-&gt;</operator><name pos:start="61:56" pos:end="61:67">cluster_bits</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
