<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15454.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:37"><name pos:start="1:1" pos:end="1:13">gdb_handlesig</name><argument_list pos:start="1:14" pos:end="1:37">(<argument pos:start="1:15" pos:end="1:27">CPUState *cpu</argument>, <argument pos:start="1:30" pos:end="1:36">int sig</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="91:1">{<block_content pos:start="5:5" pos:end="89:15">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">GDBState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:17"><name pos:start="7:10" pos:end="7:12">buf</name><index pos:start="7:13" pos:end="7:17">[<expr pos:start="7:14" pos:end="7:16"><literal type="number" pos:start="7:14" pos:end="7:16">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">n</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:24"><expr pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:5">s</name> <operator pos:start="13:7" pos:end="13:7">=</operator> <name pos:start="13:9" pos:end="13:23">gdbserver_state</name></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:38">(<expr pos:start="15:9" pos:end="15:37"><name pos:start="15:9" pos:end="15:20">gdbserver_fd</name> <operator pos:start="15:22" pos:end="15:22">&lt;</operator> <literal type="number" pos:start="15:24" pos:end="15:24">0</literal> <operator pos:start="15:26" pos:end="15:27">||</operator> <name pos:start="15:29" pos:end="15:33"><name pos:start="15:29" pos:end="15:29">s</name><operator pos:start="15:30" pos:end="15:31">-&gt;</operator><name pos:start="15:32" pos:end="15:33">fd</name></name> <operator pos:start="15:35" pos:end="15:35">&lt;</operator> <literal type="number" pos:start="15:37" pos:end="15:37">0</literal></expr>)</condition> <block pos:start="15:40" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:19">

        <return pos:start="17:9" pos:end="17:19">return <expr pos:start="17:16" pos:end="17:18"><name pos:start="17:16" pos:end="17:18">sig</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:47">/* disable single step if it was enabled */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:28"><expr pos:start="25:5" pos:end="25:27"><call pos:start="25:5" pos:end="25:27"><name pos:start="25:5" pos:end="25:19">cpu_single_step</name><argument_list pos:start="25:20" pos:end="25:27">(<argument pos:start="25:21" pos:end="25:23"><expr pos:start="25:21" pos:end="25:23"><name pos:start="25:21" pos:end="25:23">cpu</name></expr></argument>, <argument pos:start="25:26" pos:end="25:26"><expr pos:start="25:26" pos:end="25:26"><literal type="number" pos:start="25:26" pos:end="25:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:18"><expr pos:start="27:5" pos:end="27:17"><call pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:12">tb_flush</name><argument_list pos:start="27:13" pos:end="27:17">(<argument pos:start="27:14" pos:end="27:16"><expr pos:start="27:14" pos:end="27:16"><name pos:start="27:14" pos:end="27:16">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:17">(<expr pos:start="31:9" pos:end="31:16"><name pos:start="31:9" pos:end="31:11">sig</name> <operator pos:start="31:13" pos:end="31:14">!=</operator> <literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>)</condition> <block pos:start="31:19" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:27">

        <expr_stmt pos:start="33:9" pos:end="33:71"><expr pos:start="33:9" pos:end="33:70"><call pos:start="33:9" pos:end="33:70"><name pos:start="33:9" pos:end="33:16">snprintf</name><argument_list pos:start="33:17" pos:end="33:70">(<argument pos:start="33:18" pos:end="33:20"><expr pos:start="33:18" pos:end="33:20"><name pos:start="33:18" pos:end="33:20">buf</name></expr></argument>, <argument pos:start="33:23" pos:end="33:33"><expr pos:start="33:23" pos:end="33:33"><sizeof pos:start="33:23" pos:end="33:33">sizeof<argument_list pos:start="33:29" pos:end="33:33">(<argument pos:start="33:30" pos:end="33:32"><expr pos:start="33:30" pos:end="33:32"><name pos:start="33:30" pos:end="33:32">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="33:36" pos:end="33:42"><expr pos:start="33:36" pos:end="33:42"><literal type="string" pos:start="33:36" pos:end="33:42">"S%02x"</literal></expr></argument>, <argument pos:start="33:45" pos:end="33:69"><expr pos:start="33:45" pos:end="33:69"><call pos:start="33:45" pos:end="33:69"><name pos:start="33:45" pos:end="33:64">target_signal_to_gdb</name><argument_list pos:start="33:65" pos:end="33:69">(<argument pos:start="33:66" pos:end="33:68"><expr pos:start="33:66" pos:end="33:68"><name pos:start="33:66" pos:end="33:68">sig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:27"><expr pos:start="35:9" pos:end="35:26"><call pos:start="35:9" pos:end="35:26"><name pos:start="35:9" pos:end="35:18">put_packet</name><argument_list pos:start="35:19" pos:end="35:26">(<argument pos:start="35:20" pos:end="35:20"><expr pos:start="35:20" pos:end="35:20"><name pos:start="35:20" pos:end="35:20">s</name></expr></argument>, <argument pos:start="35:23" pos:end="35:25"><expr pos:start="35:23" pos:end="35:25"><name pos:start="35:23" pos:end="35:25">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="39:5" pos:end="41:22">/* put_packet() might have detected that the peer terminated the

       connection.  */</comment>

    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:18">(<expr pos:start="43:9" pos:end="43:17"><name pos:start="43:9" pos:end="43:13"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:13">fd</name></name> <operator pos:start="43:15" pos:end="43:15">&lt;</operator> <literal type="number" pos:start="43:17" pos:end="43:17">0</literal></expr>)</condition> <block pos:start="43:20" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:19">

        <return pos:start="45:9" pos:end="45:19">return <expr pos:start="45:16" pos:end="45:18"><name pos:start="45:16" pos:end="45:18">sig</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:12"><expr pos:start="51:5" pos:end="51:11"><name pos:start="51:5" pos:end="51:7">sig</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <literal type="number" pos:start="51:11" pos:end="51:11">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:23"><expr pos:start="53:5" pos:end="53:22"><name pos:start="53:5" pos:end="53:12"><name pos:start="53:5" pos:end="53:5">s</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:12">state</name></name> <operator pos:start="53:14" pos:end="53:14">=</operator> <name pos:start="53:16" pos:end="53:22">RS_IDLE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:25"><expr pos:start="55:5" pos:end="55:24"><name pos:start="55:5" pos:end="55:20"><name pos:start="55:5" pos:end="55:5">s</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:20">running_state</name></name> <operator pos:start="55:22" pos:end="55:22">=</operator> <literal type="number" pos:start="55:24" pos:end="55:24">0</literal></expr>;</expr_stmt>

    <while pos:start="57:5" pos:end="83:5">while <condition pos:start="57:11" pos:end="57:33">(<expr pos:start="57:12" pos:end="57:32"><name pos:start="57:12" pos:end="57:27"><name pos:start="57:12" pos:end="57:12">s</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:27">running_state</name></name> <operator pos:start="57:29" pos:end="57:30">==</operator> <literal type="number" pos:start="57:32" pos:end="57:32">0</literal></expr>)</condition> <block pos:start="57:35" pos:end="83:5">{<block_content pos:start="59:9" pos:end="81:9">

        <expr_stmt pos:start="59:9" pos:end="59:34"><expr pos:start="59:9" pos:end="59:33"><name pos:start="59:9" pos:end="59:9">n</name> <operator pos:start="59:11" pos:end="59:11">=</operator> <call pos:start="59:13" pos:end="59:33"><name pos:start="59:13" pos:end="59:16">read</name><argument_list pos:start="59:17" pos:end="59:33">(<argument pos:start="59:18" pos:end="59:22"><expr pos:start="59:18" pos:end="59:22"><name pos:start="59:18" pos:end="59:22"><name pos:start="59:18" pos:end="59:18">s</name><operator pos:start="59:19" pos:end="59:20">-&gt;</operator><name pos:start="59:21" pos:end="59:22">fd</name></name></expr></argument>, <argument pos:start="59:25" pos:end="59:27"><expr pos:start="59:25" pos:end="59:27"><name pos:start="59:25" pos:end="59:27">buf</name></expr></argument>, <argument pos:start="59:30" pos:end="59:32"><expr pos:start="59:30" pos:end="59:32"><literal type="number" pos:start="59:30" pos:end="59:32">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="81:9"><if pos:start="61:9" pos:end="73:9">if <condition pos:start="61:12" pos:end="61:18">(<expr pos:start="61:13" pos:end="61:17"><name pos:start="61:13" pos:end="61:13">n</name> <operator pos:start="61:15" pos:end="61:15">&gt;</operator> <literal type="number" pos:start="61:17" pos:end="61:17">0</literal></expr>)</condition> <block pos:start="61:20" pos:end="73:9">{<block_content pos:start="63:13" pos:end="71:13">

            <decl_stmt pos:start="63:13" pos:end="63:18"><decl pos:start="63:13" pos:end="63:17"><type pos:start="63:13" pos:end="63:15"><name pos:start="63:13" pos:end="63:15">int</name></type> <name pos:start="63:17" pos:end="63:17">i</name></decl>;</decl_stmt>



            <for pos:start="67:13" pos:end="71:13">for <control pos:start="67:17" pos:end="67:35">(<init pos:start="67:18" pos:end="67:23"><expr pos:start="67:18" pos:end="67:22"><name pos:start="67:18" pos:end="67:18">i</name> <operator pos:start="67:20" pos:end="67:20">=</operator> <literal type="number" pos:start="67:22" pos:end="67:22">0</literal></expr>;</init> <condition pos:start="67:25" pos:end="67:30"><expr pos:start="67:25" pos:end="67:29"><name pos:start="67:25" pos:end="67:25">i</name> <operator pos:start="67:27" pos:end="67:27">&lt;</operator> <name pos:start="67:29" pos:end="67:29">n</name></expr>;</condition> <incr pos:start="67:32" pos:end="67:34"><expr pos:start="67:32" pos:end="67:34"><name pos:start="67:32" pos:end="67:32">i</name><operator pos:start="67:33" pos:end="67:34">++</operator></expr></incr>)</control> <block pos:start="67:37" pos:end="71:13">{<block_content pos:start="69:17" pos:end="69:41">

                <expr_stmt pos:start="69:17" pos:end="69:41"><expr pos:start="69:17" pos:end="69:40"><call pos:start="69:17" pos:end="69:40"><name pos:start="69:17" pos:end="69:29">gdb_read_byte</name><argument_list pos:start="69:30" pos:end="69:40">(<argument pos:start="69:31" pos:end="69:31"><expr pos:start="69:31" pos:end="69:31"><name pos:start="69:31" pos:end="69:31">s</name></expr></argument>, <argument pos:start="69:34" pos:end="69:39"><expr pos:start="69:34" pos:end="69:39"><name pos:start="69:34" pos:end="69:39"><name pos:start="69:34" pos:end="69:36">buf</name><index pos:start="69:37" pos:end="69:39">[<expr pos:start="69:38" pos:end="69:38"><name pos:start="69:38" pos:end="69:38">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <if type="elseif" pos:start="73:11" pos:end="81:9">else if <condition pos:start="73:19" pos:end="73:45">(<expr pos:start="73:20" pos:end="73:44"><name pos:start="73:20" pos:end="73:20">n</name> <operator pos:start="73:22" pos:end="73:23">==</operator> <literal type="number" pos:start="73:25" pos:end="73:25">0</literal> <operator pos:start="73:27" pos:end="73:28">||</operator> <name pos:start="73:30" pos:end="73:34">errno</name> <operator pos:start="73:36" pos:end="73:37">!=</operator> <name pos:start="73:39" pos:end="73:44">EAGAIN</name></expr>)</condition> <block pos:start="73:47" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:23">

            <comment type="block" pos:start="75:13" pos:end="77:48">/* XXX: Connection closed.  Should probably wait for another

               connection before continuing.  */</comment>

            <return pos:start="79:13" pos:end="79:23">return <expr pos:start="79:20" pos:end="79:22"><name pos:start="79:20" pos:end="79:22">sig</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="85:5" pos:end="85:20"><expr pos:start="85:5" pos:end="85:19"><name pos:start="85:5" pos:end="85:7">sig</name> <operator pos:start="85:9" pos:end="85:9">=</operator> <name pos:start="85:11" pos:end="85:19"><name pos:start="85:11" pos:end="85:11">s</name><operator pos:start="85:12" pos:end="85:13">-&gt;</operator><name pos:start="85:14" pos:end="85:19">signal</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:18"><expr pos:start="87:5" pos:end="87:17"><name pos:start="87:5" pos:end="87:13"><name pos:start="87:5" pos:end="87:5">s</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:13">signal</name></name> <operator pos:start="87:15" pos:end="87:15">=</operator> <literal type="number" pos:start="87:17" pos:end="87:17">0</literal></expr>;</expr_stmt>

    <return pos:start="89:5" pos:end="89:15">return <expr pos:start="89:12" pos:end="89:14"><name pos:start="89:12" pos:end="89:14">sig</name></expr>;</return>

</block_content>}</block>
</unit>
