<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27294.c" pos:tabs="8"><function pos:start="1:1" pos:end="943:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <name pos:start="1:13" pos:end="1:18">RENAME</name></type>(<name pos:start="1:20" pos:end="1:30">postProcess</name>)<parameter_list pos:start="1:32" pos:end="3:97">(<parameter pos:start="1:33" pos:end="1:51"><decl pos:start="1:33" pos:end="1:51"><type pos:start="1:33" pos:end="1:49"><specifier pos:start="1:33" pos:end="1:37">const</specifier> <name pos:start="1:39" pos:end="1:45">uint8_t</name></type> <name pos:start="1:47" pos:end="1:51"><name pos:start="1:47" pos:end="1:49">src</name><index pos:start="1:50" pos:end="1:51">[]</index></name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:66"><decl pos:start="1:54" pos:end="1:66"><type pos:start="1:54" pos:end="1:66"><name pos:start="1:54" pos:end="1:56">int</name></type> <name pos:start="1:58" pos:end="1:66">srcStride</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:81"><decl pos:start="1:69" pos:end="1:81"><type pos:start="1:69" pos:end="1:79"><name pos:start="1:69" pos:end="1:75">uint8_t</name></type> <name pos:start="1:77" pos:end="1:81"><name pos:start="1:77" pos:end="1:79">dst</name><index pos:start="1:80" pos:end="1:81">[]</index></name></decl></parameter>, <parameter pos:start="1:84" pos:end="1:96"><decl pos:start="1:84" pos:end="1:96"><type pos:start="1:84" pos:end="1:96"><name pos:start="1:84" pos:end="1:86">int</name></type> <name pos:start="1:88" pos:end="1:96">dstStride</name></decl></parameter>, <parameter pos:start="1:99" pos:end="1:107"><decl pos:start="1:99" pos:end="1:107"><type pos:start="1:99" pos:end="1:107"><name pos:start="1:99" pos:end="1:101">int</name></type> <name pos:start="1:103" pos:end="1:107">width</name></decl></parameter>, <parameter pos:start="1:110" pos:end="1:119"><decl pos:start="1:110" pos:end="1:119"><type pos:start="1:110" pos:end="1:119"><name pos:start="1:110" pos:end="1:112">int</name></type> <name pos:start="1:114" pos:end="1:119">height</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:54"><decl pos:start="3:33" pos:end="3:54"><type pos:start="3:33" pos:end="3:52"><specifier pos:start="3:33" pos:end="3:37">const</specifier> <name pos:start="3:39" pos:end="3:48">QP_STORE_T</name></type> <name pos:start="3:50" pos:end="3:54"><name pos:start="3:50" pos:end="3:52">QPs</name><index pos:start="3:53" pos:end="3:54">[]</index></name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:68"><decl pos:start="3:57" pos:end="3:68"><type pos:start="3:57" pos:end="3:68"><name pos:start="3:57" pos:end="3:59">int</name></type> <name pos:start="3:61" pos:end="3:68">QPStride</name></decl></parameter>, <parameter pos:start="3:71" pos:end="3:81"><decl pos:start="3:71" pos:end="3:81"><type pos:start="3:71" pos:end="3:81"><name pos:start="3:71" pos:end="3:73">int</name></type> <name pos:start="3:75" pos:end="3:81">isColor</name></decl></parameter>, <parameter pos:start="3:84" pos:end="3:96"><decl pos:start="3:84" pos:end="3:96"><type pos:start="3:84" pos:end="3:96"><name pos:start="3:84" pos:end="3:92">PPContext</name> <modifier pos:start="3:94" pos:end="3:94">*</modifier></type><name pos:start="3:95" pos:end="3:96">c2</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="943:1">{<block_content pos:start="7:5" pos:end="939:11">

    <expr_stmt pos:start="7:5" pos:end="7:42"><expr pos:start="7:5" pos:end="7:41"><call pos:start="7:5" pos:end="7:36"><name pos:start="7:5" pos:end="7:19">DECLARE_ALIGNED</name><argument_list pos:start="7:20" pos:end="7:36">(<argument pos:start="7:21" pos:end="7:21"><expr pos:start="7:21" pos:end="7:21"><literal type="number" pos:start="7:21" pos:end="7:21">8</literal></expr></argument>, <argument pos:start="7:24" pos:end="7:32"><expr pos:start="7:24" pos:end="7:32"><name pos:start="7:24" pos:end="7:32">PPContext</name></expr></argument>, <argument pos:start="7:35" pos:end="7:35"><expr pos:start="7:35" pos:end="7:35"><name pos:start="7:35" pos:end="7:35">c</name></expr></argument>)</argument_list></call><operator pos:start="7:37" pos:end="7:37">=</operator> <operator pos:start="7:39" pos:end="7:39">*</operator><name pos:start="7:40" pos:end="7:41">c2</name></expr>;</expr_stmt> <comment type="line" pos:start="7:44" pos:end="7:76">//copy to stack for faster access</comment>

    <decl_stmt pos:start="9:5" pos:end="12:0"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">x</name></decl>,<decl pos:start="9:11" pos:end="9:11"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:11" pos:end="9:11">y</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="11:1" pos:end="11:28">#<cpp:directive pos:start="11:2" pos:end="11:6">ifdef</cpp:directive> <name pos:start="11:8" pos:end="11:28">TEMPLATE_PP_TIME_MODE</name></cpp:ifdef>

    <decl_stmt pos:start="13:5" pos:end="16:0"><decl pos:start="13:5" pos:end="13:41"><type pos:start="13:5" pos:end="13:13"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:13">int</name></type> <name pos:start="13:15" pos:end="13:18">mode</name><init pos:start="13:19" pos:end="13:41">= <expr pos:start="13:21" pos:end="13:41"><name pos:start="13:21" pos:end="13:41">TEMPLATE_PP_TIME_MODE</name></expr></init></decl>;</decl_stmt>

<cpp:else pos:start="15:1" pos:end="15:5">#<cpp:directive pos:start="15:2" pos:end="15:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="17:5" pos:end="20:0"><decl pos:start="17:5" pos:end="17:67"><type pos:start="17:5" pos:end="17:13"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:13">int</name></type> <name pos:start="17:15" pos:end="17:18">mode</name><init pos:start="17:19" pos:end="17:67">= <expr pos:start="17:21" pos:end="17:67"><ternary pos:start="17:21" pos:end="17:67"><condition pos:start="17:21" pos:end="17:29"><expr pos:start="17:21" pos:end="17:27"><name pos:start="17:21" pos:end="17:27">isColor</name></expr> ?</condition><then pos:start="17:31" pos:end="17:48"> <expr pos:start="17:31" pos:end="17:48"><name pos:start="17:31" pos:end="17:48"><name pos:start="17:31" pos:end="17:31">c</name><operator pos:start="17:32" pos:end="17:32">.</operator><name pos:start="17:33" pos:end="17:38">ppMode</name><operator pos:start="17:39" pos:end="17:39">.</operator><name pos:start="17:40" pos:end="17:48">chromMode</name></name></expr> </then><else pos:start="17:50" pos:end="17:67">: <expr pos:start="17:52" pos:end="17:67"><name pos:start="17:52" pos:end="17:67"><name pos:start="17:52" pos:end="17:52">c</name><operator pos:start="17:53" pos:end="17:53">.</operator><name pos:start="17:54" pos:end="17:59">ppMode</name><operator pos:start="17:60" pos:end="17:60">.</operator><name pos:start="17:61" pos:end="17:67">lumMode</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="21:5" pos:end="21:27"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:13">black</name><init pos:start="21:14" pos:end="21:15">=<expr pos:start="21:15" pos:end="21:15"><literal type="number" pos:start="21:15" pos:end="21:15">0</literal></expr></init></decl>, <decl pos:start="21:18" pos:end="21:26"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:18" pos:end="21:22">white</name><init pos:start="21:23" pos:end="21:26">=<expr pos:start="21:24" pos:end="21:26"><literal type="number" pos:start="21:24" pos:end="21:26">255</literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="21:29" pos:end="21:78">// blackest black and whitest white in the picture</comment>

    <decl_stmt pos:start="23:5" pos:end="23:30"><decl pos:start="23:5" pos:end="23:29"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:20">QPCorrecture</name><init pos:start="23:21" pos:end="23:29">= <expr pos:start="23:23" pos:end="23:29"><literal type="number" pos:start="23:23" pos:end="23:25">256</literal><operator pos:start="23:26" pos:end="23:26">*</operator><literal type="number" pos:start="23:27" pos:end="23:29">256</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="27:5" pos:end="30:0"><decl pos:start="27:5" pos:end="27:17"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:17">copyAhead</name></decl>;</decl_stmt>

<cpp:if pos:start="29:1" pos:end="29:19">#<cpp:directive pos:start="29:2" pos:end="29:3">if</cpp:directive> <expr pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:19">TEMPLATE_PP_MMX</name></expr></cpp:if>

    <decl_stmt pos:start="31:5" pos:end="34:0"><decl pos:start="31:5" pos:end="31:9"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:9">i</name></decl>;</decl_stmt>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>



    <decl_stmt pos:start="37:5" pos:end="37:59"><decl pos:start="37:5" pos:end="37:58"><type pos:start="37:5" pos:end="37:13"><specifier pos:start="37:5" pos:end="37:9">const</specifier> <name pos:start="37:11" pos:end="37:13">int</name></type> <name pos:start="37:15" pos:end="37:22">qpHShift</name><init pos:start="37:23" pos:end="37:58">= <expr pos:start="37:25" pos:end="37:58"><ternary pos:start="37:25" pos:end="37:58"><condition pos:start="37:25" pos:end="37:33"><expr pos:start="37:25" pos:end="37:31"><name pos:start="37:25" pos:end="37:31">isColor</name></expr> ?</condition><then pos:start="37:35" pos:end="37:54"> <expr pos:start="37:35" pos:end="37:54"><literal type="number" pos:start="37:35" pos:end="37:36">4</literal><operator pos:start="37:36" pos:end="37:36">-</operator><name pos:start="37:37" pos:end="37:54"><name pos:start="37:37" pos:end="37:37">c</name><operator pos:start="37:38" pos:end="37:38">.</operator><name pos:start="37:39" pos:end="37:54">hChromaSubSample</name></name></expr> </then><else pos:start="37:56" pos:end="37:58">: <expr pos:start="37:58" pos:end="37:58"><literal type="number" pos:start="37:58" pos:end="37:58">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:59"><decl pos:start="39:5" pos:end="39:58"><type pos:start="39:5" pos:end="39:13"><specifier pos:start="39:5" pos:end="39:9">const</specifier> <name pos:start="39:11" pos:end="39:13">int</name></type> <name pos:start="39:15" pos:end="39:22">qpVShift</name><init pos:start="39:23" pos:end="39:58">= <expr pos:start="39:25" pos:end="39:58"><ternary pos:start="39:25" pos:end="39:58"><condition pos:start="39:25" pos:end="39:33"><expr pos:start="39:25" pos:end="39:31"><name pos:start="39:25" pos:end="39:31">isColor</name></expr> ?</condition><then pos:start="39:35" pos:end="39:54"> <expr pos:start="39:35" pos:end="39:54"><literal type="number" pos:start="39:35" pos:end="39:36">4</literal><operator pos:start="39:36" pos:end="39:36">-</operator><name pos:start="39:37" pos:end="39:54"><name pos:start="39:37" pos:end="39:37">c</name><operator pos:start="39:38" pos:end="39:38">.</operator><name pos:start="39:39" pos:end="39:54">vChromaSubSample</name></name></expr> </then><else pos:start="39:56" pos:end="39:58">: <expr pos:start="39:58" pos:end="39:58"><literal type="number" pos:start="39:58" pos:end="39:58">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>



    <comment type="line" pos:start="43:5" pos:end="43:18">//FIXME remove</comment>

    <decl_stmt pos:start="45:5" pos:end="45:46"><decl pos:start="45:5" pos:end="45:45"><type pos:start="45:5" pos:end="45:20"><name pos:start="45:5" pos:end="45:12">uint64_t</name> <modifier pos:start="45:14" pos:end="45:14">*</modifier> <specifier pos:start="45:16" pos:end="45:20">const</specifier></type> <name pos:start="45:22" pos:end="45:31">yHistogram</name><init pos:start="45:32" pos:end="45:45">= <expr pos:start="45:34" pos:end="45:45"><name pos:start="45:34" pos:end="45:45"><name pos:start="45:34" pos:end="45:34">c</name><operator pos:start="45:35" pos:end="45:35">.</operator><name pos:start="45:36" pos:end="45:45">yHistogram</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:82"><decl pos:start="47:5" pos:end="47:81"><type pos:start="47:5" pos:end="47:19"><name pos:start="47:5" pos:end="47:11">uint8_t</name> <modifier pos:start="47:13" pos:end="47:13">*</modifier> <specifier pos:start="47:15" pos:end="47:19">const</specifier></type> <name pos:start="47:21" pos:end="47:27">tempSrc</name><init pos:start="47:28" pos:end="47:81">= <expr pos:start="47:30" pos:end="47:81"><ternary pos:start="47:30" pos:end="47:81"><condition pos:start="47:30" pos:end="47:44"><expr pos:start="47:30" pos:end="47:42"><name pos:start="47:30" pos:end="47:38">srcStride</name> <operator pos:start="47:40" pos:end="47:40">&gt;</operator> <literal type="number" pos:start="47:42" pos:end="47:42">0</literal></expr> ?</condition><then pos:start="47:46" pos:end="47:54"> <expr pos:start="47:46" pos:end="47:54"><name pos:start="47:46" pos:end="47:54"><name pos:start="47:46" pos:end="47:46">c</name><operator pos:start="47:47" pos:end="47:47">.</operator><name pos:start="47:48" pos:end="47:54">tempSrc</name></name></expr> </then><else pos:start="47:56" pos:end="47:81">: <expr pos:start="47:58" pos:end="47:81"><name pos:start="47:58" pos:end="47:66"><name pos:start="47:58" pos:end="47:58">c</name><operator pos:start="47:59" pos:end="47:59">.</operator><name pos:start="47:60" pos:end="47:66">tempSrc</name></name> <operator pos:start="47:68" pos:end="47:68">-</operator> <literal type="number" pos:start="47:70" pos:end="47:71">23</literal><operator pos:start="47:72" pos:end="47:72">*</operator><name pos:start="47:73" pos:end="47:81">srcStride</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:89"><decl pos:start="49:5" pos:end="49:88"><type pos:start="49:5" pos:end="49:19"><name pos:start="49:5" pos:end="49:11">uint8_t</name> <modifier pos:start="49:13" pos:end="49:13">*</modifier> <specifier pos:start="49:15" pos:end="49:19">const</specifier></type> <name pos:start="49:21" pos:end="49:27">tempDst</name><init pos:start="49:28" pos:end="49:88">= <expr pos:start="49:30" pos:end="49:88"><operator pos:start="49:30" pos:end="49:30">(</operator><ternary pos:start="49:31" pos:end="49:82"><condition pos:start="49:31" pos:end="49:45"><expr pos:start="49:31" pos:end="49:43"><name pos:start="49:31" pos:end="49:39">dstStride</name> <operator pos:start="49:41" pos:end="49:41">&gt;</operator> <literal type="number" pos:start="49:43" pos:end="49:43">0</literal></expr> ?</condition><then pos:start="49:47" pos:end="49:55"> <expr pos:start="49:47" pos:end="49:55"><name pos:start="49:47" pos:end="49:55"><name pos:start="49:47" pos:end="49:47">c</name><operator pos:start="49:48" pos:end="49:48">.</operator><name pos:start="49:49" pos:end="49:55">tempDst</name></name></expr> </then><else pos:start="49:57" pos:end="49:82">: <expr pos:start="49:59" pos:end="49:82"><name pos:start="49:59" pos:end="49:67"><name pos:start="49:59" pos:end="49:59">c</name><operator pos:start="49:60" pos:end="49:60">.</operator><name pos:start="49:61" pos:end="49:67">tempDst</name></name> <operator pos:start="49:69" pos:end="49:69">-</operator> <literal type="number" pos:start="49:71" pos:end="49:72">23</literal><operator pos:start="49:73" pos:end="49:73">*</operator><name pos:start="49:74" pos:end="49:82">dstStride</name></expr></else></ternary><operator pos:start="49:83" pos:end="49:83">)</operator> <operator pos:start="49:85" pos:end="49:85">+</operator> <literal type="number" pos:start="49:87" pos:end="49:88">32</literal></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:start="51:5" pos:end="51:64">//const int mbWidth= isColor ? (width+7)&gt;&gt;3 : (width+15)&gt;&gt;4;</comment>



    <if_stmt pos:start="55:5" pos:end="68:0"><if pos:start="55:5" pos:end="68:0">if <condition pos:start="55:8" pos:end="55:25">(<expr pos:start="55:9" pos:end="55:24"><name pos:start="55:9" pos:end="55:12">mode</name> <operator pos:start="55:14" pos:end="55:14">&amp;</operator> <name pos:start="55:16" pos:end="55:24">VISUALIZE</name></expr>)</condition><block pos:start="55:26" pos:end="68:0">{<block_content pos:start="57:9" pos:end="61:9">

        <if_stmt pos:start="57:9" pos:end="61:9"><if pos:start="57:9" pos:end="61:9">if<condition pos:start="57:11" pos:end="57:68">(<expr pos:start="57:12" pos:end="57:67"><operator pos:start="57:12" pos:end="57:12">!</operator><operator pos:start="57:13" pos:end="57:13">(</operator><name pos:start="57:14" pos:end="57:17">mode</name> <operator pos:start="57:19" pos:end="57:19">&amp;</operator> <operator pos:start="57:21" pos:end="57:21">(</operator><name pos:start="57:22" pos:end="57:32">V_A_DEBLOCK</name> <operator pos:start="57:34" pos:end="57:34">|</operator> <name pos:start="57:36" pos:end="57:46">H_A_DEBLOCK</name><operator pos:start="57:47" pos:end="57:47">)</operator><operator pos:start="57:48" pos:end="57:48">)</operator> <operator pos:start="57:50" pos:end="57:51">||</operator> <name pos:start="57:53" pos:end="57:67">TEMPLATE_PP_MMX</name></expr>)</condition> <block pos:start="57:70" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:132">

            <expr_stmt pos:start="59:13" pos:end="59:132"><expr pos:start="59:13" pos:end="59:131"><call pos:start="59:13" pos:end="59:131"><name pos:start="59:13" pos:end="59:18">av_log</name><argument_list pos:start="59:19" pos:end="59:131">(<argument pos:start="59:20" pos:end="59:21"><expr pos:start="59:20" pos:end="59:21"><name pos:start="59:20" pos:end="59:21">c2</name></expr></argument>, <argument pos:start="59:24" pos:end="59:37"><expr pos:start="59:24" pos:end="59:37"><name pos:start="59:24" pos:end="59:37">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="59:40" pos:end="59:130"><expr pos:start="59:40" pos:end="59:130"><literal type="string" pos:start="59:40" pos:end="59:130">"Visualization is currently only supported with the accurate deblock filter without SIMD\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="67:1" pos:end="67:19">#<cpp:directive pos:start="67:2" pos:end="67:3">if</cpp:directive> <expr pos:start="67:5" pos:end="67:19"><name pos:start="67:5" pos:end="67:19">TEMPLATE_PP_MMX</name></expr></cpp:if>

    <for pos:start="69:5" pos:end="86:0">for<control pos:start="69:8" pos:end="69:23">(<init pos:start="69:9" pos:end="69:12"><expr pos:start="69:9" pos:end="69:11"><name pos:start="69:9" pos:end="69:9">i</name><operator pos:start="69:10" pos:end="69:10">=</operator><literal type="number" pos:start="69:11" pos:end="69:11">0</literal></expr>;</init> <condition pos:start="69:14" pos:end="69:18"><expr pos:start="69:14" pos:end="69:17"><name pos:start="69:14" pos:end="69:14">i</name><operator pos:start="69:15" pos:end="69:15">&lt;</operator><literal type="number" pos:start="69:16" pos:end="69:17">57</literal></expr>;</condition> <incr pos:start="69:20" pos:end="69:22"><expr pos:start="69:20" pos:end="69:22"><name pos:start="69:20" pos:end="69:20">i</name><operator pos:start="69:21" pos:end="69:22">++</operator></expr></incr>)</control><block pos:start="69:24" pos:end="86:0">{<block_content pos:start="71:9" pos:end="81:51">

        <decl_stmt pos:start="71:9" pos:end="71:53"><decl pos:start="71:9" pos:end="71:52"><type pos:start="71:9" pos:end="71:11"><name pos:start="71:9" pos:end="71:11">int</name></type> <name pos:start="71:13" pos:end="71:18">offset</name><init pos:start="71:19" pos:end="71:52">= <expr pos:start="71:21" pos:end="71:52"><operator pos:start="71:21" pos:end="71:21">(</operator><operator pos:start="71:22" pos:end="71:22">(</operator><name pos:start="71:23" pos:end="71:23">i</name><operator pos:start="71:24" pos:end="71:24">*</operator><name pos:start="71:25" pos:end="71:43"><name pos:start="71:25" pos:end="71:25">c</name><operator pos:start="71:26" pos:end="71:26">.</operator><name pos:start="71:27" pos:end="71:32">ppMode</name><operator pos:start="71:33" pos:end="71:33">.</operator><name pos:start="71:34" pos:end="71:43">baseDcDiff</name></name><operator pos:start="71:44" pos:end="71:44">)</operator><operator pos:start="71:45" pos:end="71:46">&gt;&gt;</operator><literal type="number" pos:start="71:47" pos:end="71:47">8</literal><operator pos:start="71:48" pos:end="71:48">)</operator> <operator pos:start="71:50" pos:end="71:50">+</operator> <literal type="number" pos:start="71:52" pos:end="71:52">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="73:9" pos:end="73:36"><decl pos:start="73:9" pos:end="73:35"><type pos:start="73:9" pos:end="73:11"><name pos:start="73:9" pos:end="73:11">int</name></type> <name pos:start="73:13" pos:end="73:21">threshold</name><init pos:start="73:22" pos:end="73:35">= <expr pos:start="73:24" pos:end="73:35"><name pos:start="73:24" pos:end="73:29">offset</name><operator pos:start="73:30" pos:end="73:30">*</operator><literal type="number" pos:start="73:31" pos:end="73:33">2</literal> <operator pos:start="73:33" pos:end="73:33">+</operator> <literal type="number" pos:start="73:35" pos:end="73:35">1</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:40"><expr pos:start="75:9" pos:end="75:39"><name pos:start="75:9" pos:end="75:24"><name pos:start="75:9" pos:end="75:9">c</name><operator pos:start="75:10" pos:end="75:10">.</operator><name pos:start="75:11" pos:end="75:21">mmxDcOffset</name><index pos:start="75:22" pos:end="75:24">[<expr pos:start="75:23" pos:end="75:23"><name pos:start="75:23" pos:end="75:23">i</name></expr>]</index></name><operator pos:start="75:25" pos:end="75:25">=</operator> <literal type="number" pos:start="75:27" pos:end="75:32">0x7F</literal> <operator pos:start="75:32" pos:end="75:32">-</operator> <name pos:start="75:34" pos:end="75:39">offset</name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:46"><expr pos:start="77:9" pos:end="77:45"><name pos:start="77:9" pos:end="77:27"><name pos:start="77:9" pos:end="77:9">c</name><operator pos:start="77:10" pos:end="77:10">.</operator><name pos:start="77:11" pos:end="77:24">mmxDcThreshold</name><index pos:start="77:25" pos:end="77:27">[<expr pos:start="77:26" pos:end="77:26"><name pos:start="77:26" pos:end="77:26">i</name></expr>]</index></name><operator pos:start="77:28" pos:end="77:28">=</operator> <literal type="number" pos:start="77:30" pos:end="77:35">0x7F</literal> <operator pos:start="77:35" pos:end="77:35">-</operator> <name pos:start="77:37" pos:end="77:45">threshold</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:48"><expr pos:start="79:9" pos:end="79:47"><name pos:start="79:9" pos:end="79:24"><name pos:start="79:9" pos:end="79:9">c</name><operator pos:start="79:10" pos:end="79:10">.</operator><name pos:start="79:11" pos:end="79:21">mmxDcOffset</name><index pos:start="79:22" pos:end="79:24">[<expr pos:start="79:23" pos:end="79:23"><name pos:start="79:23" pos:end="79:23">i</name></expr>]</index></name><operator pos:start="79:25" pos:end="79:26">*=</operator> <literal type="number" pos:start="79:28" pos:end="79:47">0x0101010101010101LL</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:51"><expr pos:start="81:9" pos:end="81:50"><name pos:start="81:9" pos:end="81:27"><name pos:start="81:9" pos:end="81:9">c</name><operator pos:start="81:10" pos:end="81:10">.</operator><name pos:start="81:11" pos:end="81:24">mmxDcThreshold</name><index pos:start="81:25" pos:end="81:27">[<expr pos:start="81:26" pos:end="81:26"><name pos:start="81:26" pos:end="81:26">i</name></expr>]</index></name><operator pos:start="81:28" pos:end="81:29">*=</operator> <literal type="number" pos:start="81:31" pos:end="81:50">0x0101010101010101LL</literal></expr>;</expr_stmt>

    </block_content>}</block></for>

<cpp:endif pos:start="85:1" pos:end="85:6">#<cpp:directive pos:start="85:2" pos:end="85:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="89:5" pos:end="111:21"><if pos:start="89:5" pos:end="89:52">if<condition pos:start="89:7" pos:end="89:38">(<expr pos:start="89:8" pos:end="89:37"><name pos:start="89:8" pos:end="89:11">mode</name> <operator pos:start="89:13" pos:end="89:13">&amp;</operator> <name pos:start="89:15" pos:end="89:37">CUBIC_IPOL_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="89:40" pos:end="89:52"><block_content pos:start="89:40" pos:end="89:52"> <expr_stmt pos:start="89:40" pos:end="89:52"><expr pos:start="89:40" pos:end="89:51"><name pos:start="89:40" pos:end="89:48">copyAhead</name><operator pos:start="89:49" pos:end="89:49">=</operator><literal type="number" pos:start="89:50" pos:end="89:51">16</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="91:5" pos:end="95:60">else if<condition pos:start="91:12" pos:end="95:46">(   <expr pos:start="91:16" pos:end="95:45"><operator pos:start="91:16" pos:end="91:16">(</operator><name pos:start="91:17" pos:end="91:20">mode</name> <operator pos:start="91:22" pos:end="91:22">&amp;</operator> <name pos:start="91:24" pos:end="91:48">LINEAR_BLEND_DEINT_FILTER</name><operator pos:start="91:49" pos:end="91:49">)</operator>

            <operator pos:start="93:13" pos:end="93:14">||</operator> <operator pos:start="93:16" pos:end="93:16">(</operator><name pos:start="93:17" pos:end="93:20">mode</name> <operator pos:start="93:22" pos:end="93:22">&amp;</operator> <name pos:start="93:24" pos:end="93:42">FFMPEG_DEINT_FILTER</name><operator pos:start="93:43" pos:end="93:43">)</operator>

            <operator pos:start="95:13" pos:end="95:14">||</operator> <operator pos:start="95:16" pos:end="95:16">(</operator><name pos:start="95:17" pos:end="95:20">mode</name> <operator pos:start="95:22" pos:end="95:22">&amp;</operator> <name pos:start="95:24" pos:end="95:44">LOWPASS5_DEINT_FILTER</name><operator pos:start="95:45" pos:end="95:45">)</operator></expr>)</condition><block type="pseudo" pos:start="95:48" pos:end="95:60"><block_content pos:start="95:48" pos:end="95:60"> <expr_stmt pos:start="95:48" pos:end="95:60"><expr pos:start="95:48" pos:end="95:59"><name pos:start="95:48" pos:end="95:56">copyAhead</name><operator pos:start="95:57" pos:end="95:57">=</operator><literal type="number" pos:start="95:58" pos:end="95:59">14</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="97:5" pos:end="103:50">else if<condition pos:start="97:12" pos:end="103:36">(   <expr pos:start="97:16" pos:end="103:35"><operator pos:start="97:16" pos:end="97:16">(</operator><name pos:start="97:17" pos:end="97:20">mode</name> <operator pos:start="97:22" pos:end="97:22">&amp;</operator> <name pos:start="97:24" pos:end="97:32">V_DEBLOCK</name><operator pos:start="97:33" pos:end="97:33">)</operator>

            <operator pos:start="99:13" pos:end="99:14">||</operator> <operator pos:start="99:16" pos:end="99:16">(</operator><name pos:start="99:17" pos:end="99:20">mode</name> <operator pos:start="99:22" pos:end="99:22">&amp;</operator> <name pos:start="99:24" pos:end="99:47">LINEAR_IPOL_DEINT_FILTER</name><operator pos:start="99:48" pos:end="99:48">)</operator>

            <operator pos:start="101:13" pos:end="101:14">||</operator> <operator pos:start="101:16" pos:end="101:16">(</operator><name pos:start="101:17" pos:end="101:20">mode</name> <operator pos:start="101:22" pos:end="101:22">&amp;</operator> <name pos:start="101:24" pos:end="101:42">MEDIAN_DEINT_FILTER</name><operator pos:start="101:43" pos:end="101:43">)</operator>

            <operator pos:start="103:13" pos:end="103:14">||</operator> <operator pos:start="103:16" pos:end="103:16">(</operator><name pos:start="103:17" pos:end="103:20">mode</name> <operator pos:start="103:22" pos:end="103:22">&amp;</operator> <name pos:start="103:24" pos:end="103:34">V_A_DEBLOCK</name><operator pos:start="103:35" pos:end="103:35">)</operator></expr>)</condition><block type="pseudo" pos:start="103:38" pos:end="103:50"><block_content pos:start="103:38" pos:end="103:50"> <expr_stmt pos:start="103:38" pos:end="103:50"><expr pos:start="103:38" pos:end="103:49"><name pos:start="103:38" pos:end="103:46">copyAhead</name><operator pos:start="103:47" pos:end="103:47">=</operator><literal type="number" pos:start="103:48" pos:end="103:49">13</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="105:5" pos:end="105:45">else if<condition pos:start="105:12" pos:end="105:31">(<expr pos:start="105:13" pos:end="105:30"><name pos:start="105:13" pos:end="105:16">mode</name> <operator pos:start="105:18" pos:end="105:18">&amp;</operator> <name pos:start="105:20" pos:end="105:30">V_X1_FILTER</name></expr>)</condition><block type="pseudo" pos:start="105:33" pos:end="105:45"><block_content pos:start="105:33" pos:end="105:45"> <expr_stmt pos:start="105:33" pos:end="105:45"><expr pos:start="105:33" pos:end="105:44"><name pos:start="105:33" pos:end="105:41">copyAhead</name><operator pos:start="105:42" pos:end="105:42">=</operator><literal type="number" pos:start="105:43" pos:end="105:44">11</literal></expr>;</expr_stmt></block_content></block></if>

<comment type="line" pos:start="107:1" pos:end="107:48">//    else if(mode &amp; V_RK1_FILTER) copyAhead=10;</comment>

    <if type="elseif" pos:start="109:5" pos:end="109:39">else if<condition pos:start="109:12" pos:end="109:26">(<expr pos:start="109:13" pos:end="109:25"><name pos:start="109:13" pos:end="109:16">mode</name> <operator pos:start="109:18" pos:end="109:18">&amp;</operator> <name pos:start="109:20" pos:end="109:25">DERING</name></expr>)</condition><block type="pseudo" pos:start="109:28" pos:end="109:39"><block_content pos:start="109:28" pos:end="109:39"> <expr_stmt pos:start="109:28" pos:end="109:39"><expr pos:start="109:28" pos:end="109:38"><name pos:start="109:28" pos:end="109:36">copyAhead</name><operator pos:start="109:37" pos:end="109:37">=</operator><literal type="number" pos:start="109:38" pos:end="109:38">9</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="111:5" pos:end="111:21">else<block type="pseudo" pos:start="111:10" pos:end="111:21"><block_content pos:start="111:10" pos:end="111:21"> <expr_stmt pos:start="111:10" pos:end="111:21"><expr pos:start="111:10" pos:end="111:20"><name pos:start="111:10" pos:end="111:18">copyAhead</name><operator pos:start="111:19" pos:end="111:19">=</operator><literal type="number" pos:start="111:20" pos:end="111:20">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:18"><expr pos:start="115:5" pos:end="115:17"><name pos:start="115:5" pos:end="115:13">copyAhead</name><operator pos:start="115:14" pos:end="115:15">-=</operator> <literal type="number" pos:start="115:17" pos:end="115:17">8</literal></expr>;</expr_stmt>



    <if_stmt pos:start="119:5" pos:end="223:5"><if pos:start="119:5" pos:end="215:5">if<condition pos:start="119:7" pos:end="119:16">(<expr pos:start="119:8" pos:end="119:15"><operator pos:start="119:8" pos:end="119:8">!</operator><name pos:start="119:9" pos:end="119:15">isColor</name></expr>)</condition><block pos:start="119:17" pos:end="215:5">{<block_content pos:start="121:9" pos:end="213:58">

        <decl_stmt pos:start="121:9" pos:end="121:24"><decl pos:start="121:9" pos:end="121:23"><type pos:start="121:9" pos:end="121:16"><name pos:start="121:9" pos:end="121:16">uint64_t</name></type> <name pos:start="121:18" pos:end="121:20">sum</name><init pos:start="121:21" pos:end="121:23">= <expr pos:start="121:23" pos:end="121:23"><literal type="number" pos:start="121:23" pos:end="121:23">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="123:9" pos:end="123:14"><decl pos:start="123:9" pos:end="123:13"><type pos:start="123:9" pos:end="123:11"><name pos:start="123:9" pos:end="123:11">int</name></type> <name pos:start="123:13" pos:end="123:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="125:9" pos:end="125:28"><decl pos:start="125:9" pos:end="125:27"><type pos:start="125:9" pos:end="125:16"><name pos:start="125:9" pos:end="125:16">uint64_t</name></type> <name pos:start="125:18" pos:end="125:27">maxClipped</name></decl>;</decl_stmt>

        <decl_stmt pos:start="127:9" pos:end="127:25"><decl pos:start="127:9" pos:end="127:24"><type pos:start="127:9" pos:end="127:16"><name pos:start="127:9" pos:end="127:16">uint64_t</name></type> <name pos:start="127:18" pos:end="127:24">clipped</name></decl>;</decl_stmt>

        <decl_stmt pos:start="129:9" pos:end="129:21"><decl pos:start="129:9" pos:end="129:20"><type pos:start="129:9" pos:end="129:14"><name pos:start="129:9" pos:end="129:14">double</name></type> <name pos:start="129:16" pos:end="129:20">scale</name></decl>;</decl_stmt>



        <expr_stmt pos:start="133:9" pos:end="133:21"><expr pos:start="133:9" pos:end="133:20"><name pos:start="133:9" pos:end="133:18"><name pos:start="133:9" pos:end="133:9">c</name><operator pos:start="133:10" pos:end="133:10">.</operator><name pos:start="133:11" pos:end="133:18">frameNum</name></name><operator pos:start="133:19" pos:end="133:20">++</operator></expr>;</expr_stmt>

        <comment type="line" pos:start="135:9" pos:end="135:48">// first frame is fscked so we ignore it</comment>

        <if_stmt pos:start="137:9" pos:end="137:76"><if pos:start="137:9" pos:end="137:76">if<condition pos:start="137:11" pos:end="137:27">(<expr pos:start="137:12" pos:end="137:26"><name pos:start="137:12" pos:end="137:21"><name pos:start="137:12" pos:end="137:12">c</name><operator pos:start="137:13" pos:end="137:13">.</operator><name pos:start="137:14" pos:end="137:21">frameNum</name></name> <operator pos:start="137:23" pos:end="137:24">==</operator> <literal type="number" pos:start="137:26" pos:end="137:26">1</literal></expr>)</condition><block type="pseudo" pos:start="137:29" pos:end="137:76"><block_content pos:start="137:29" pos:end="137:76"> <expr_stmt pos:start="137:29" pos:end="137:76"><expr pos:start="137:29" pos:end="137:75"><name pos:start="137:29" pos:end="137:41"><name pos:start="137:29" pos:end="137:38">yHistogram</name><index pos:start="137:39" pos:end="137:41">[<expr pos:start="137:40" pos:end="137:40"><literal type="number" pos:start="137:40" pos:end="137:40">0</literal></expr>]</index></name><operator pos:start="137:42" pos:end="137:42">=</operator> <name pos:start="137:44" pos:end="137:48">width</name><operator pos:start="137:49" pos:end="137:49">*</operator><operator pos:start="137:50" pos:end="137:50">(</operator><name pos:start="137:51" pos:end="137:58">uint64_t</name><operator pos:start="137:59" pos:end="137:59">)</operator><name pos:start="137:60" pos:end="137:65">height</name><operator pos:start="137:66" pos:end="137:66">/</operator><literal type="number" pos:start="137:67" pos:end="137:68">64</literal><operator pos:start="137:69" pos:end="137:69">*</operator><literal type="number" pos:start="137:70" pos:end="137:71">15</literal><operator pos:start="137:72" pos:end="137:72">/</operator><literal type="number" pos:start="137:73" pos:end="137:75">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <for pos:start="141:9" pos:end="145:9">for<control pos:start="141:12" pos:end="141:28">(<init pos:start="141:13" pos:end="141:16"><expr pos:start="141:13" pos:end="141:15"><name pos:start="141:13" pos:end="141:13">i</name><operator pos:start="141:14" pos:end="141:14">=</operator><literal type="number" pos:start="141:15" pos:end="141:15">0</literal></expr>;</init> <condition pos:start="141:18" pos:end="141:23"><expr pos:start="141:18" pos:end="141:22"><name pos:start="141:18" pos:end="141:18">i</name><operator pos:start="141:19" pos:end="141:19">&lt;</operator><literal type="number" pos:start="141:20" pos:end="141:22">256</literal></expr>;</condition> <incr pos:start="141:25" pos:end="141:27"><expr pos:start="141:25" pos:end="141:27"><name pos:start="141:25" pos:end="141:25">i</name><operator pos:start="141:26" pos:end="141:27">++</operator></expr></incr>)</control><block pos:start="141:29" pos:end="145:9">{<block_content pos:start="143:13" pos:end="143:32">

            <expr_stmt pos:start="143:13" pos:end="143:32"><expr pos:start="143:13" pos:end="143:31"><name pos:start="143:13" pos:end="143:15">sum</name><operator pos:start="143:16" pos:end="143:17">+=</operator> <name pos:start="143:19" pos:end="143:31"><name pos:start="143:19" pos:end="143:28">yHistogram</name><index pos:start="143:29" pos:end="143:31">[<expr pos:start="143:30" pos:end="143:30"><name pos:start="143:30" pos:end="143:30">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="149:9" pos:end="149:61">/* We always get a completely black picture first. */</comment>

        <expr_stmt pos:start="151:9" pos:end="151:67"><expr pos:start="151:9" pos:end="151:66"><name pos:start="151:9" pos:end="151:18">maxClipped</name><operator pos:start="151:19" pos:end="151:19">=</operator> <operator pos:start="151:21" pos:end="151:21">(</operator><name pos:start="151:22" pos:end="151:29">uint64_t</name><operator pos:start="151:30" pos:end="151:30">)</operator><operator pos:start="151:31" pos:end="151:31">(</operator><name pos:start="151:32" pos:end="151:34">sum</name> <operator pos:start="151:36" pos:end="151:36">*</operator> <name pos:start="151:38" pos:end="151:65"><name pos:start="151:38" pos:end="151:38">c</name><operator pos:start="151:39" pos:end="151:39">.</operator><name pos:start="151:40" pos:end="151:45">ppMode</name><operator pos:start="151:46" pos:end="151:46">.</operator><name pos:start="151:47" pos:end="151:65">maxClippedThreshold</name></name><operator pos:start="151:66" pos:end="151:66">)</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="155:9" pos:end="155:21"><expr pos:start="155:9" pos:end="155:20"><name pos:start="155:9" pos:end="155:15">clipped</name><operator pos:start="155:16" pos:end="155:16">=</operator> <name pos:start="155:18" pos:end="155:20">sum</name></expr>;</expr_stmt>

        <for pos:start="157:9" pos:end="163:9">for<control pos:start="157:12" pos:end="157:40">(<init pos:start="157:13" pos:end="157:22"><expr pos:start="157:13" pos:end="157:21"><name pos:start="157:13" pos:end="157:17">black</name><operator pos:start="157:18" pos:end="157:18">=</operator><literal type="number" pos:start="157:19" pos:end="157:21">255</literal></expr>;</init> <condition pos:start="157:24" pos:end="157:31"><expr pos:start="157:24" pos:end="157:30"><name pos:start="157:24" pos:end="157:28">black</name><operator pos:start="157:29" pos:end="157:29">&gt;</operator><literal type="number" pos:start="157:30" pos:end="157:30">0</literal></expr>;</condition> <incr pos:start="157:33" pos:end="157:39"><expr pos:start="157:33" pos:end="157:39"><name pos:start="157:33" pos:end="157:37">black</name><operator pos:start="157:38" pos:end="157:39">--</operator></expr></incr>)</control><block pos:start="157:41" pos:end="163:9">{<block_content pos:start="159:13" pos:end="161:40">

            <if_stmt pos:start="159:13" pos:end="159:43"><if pos:start="159:13" pos:end="159:43">if<condition pos:start="159:15" pos:end="159:36">(<expr pos:start="159:16" pos:end="159:35"><name pos:start="159:16" pos:end="159:22">clipped</name> <operator pos:start="159:24" pos:end="159:24">&lt;</operator> <name pos:start="159:26" pos:end="159:35">maxClipped</name></expr>)</condition><block type="pseudo" pos:start="159:38" pos:end="159:43"><block_content pos:start="159:38" pos:end="159:43"> <break pos:start="159:38" pos:end="159:43">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:40"><expr pos:start="161:13" pos:end="161:39"><name pos:start="161:13" pos:end="161:19">clipped</name><operator pos:start="161:20" pos:end="161:21">-=</operator> <name pos:start="161:23" pos:end="161:39"><name pos:start="161:23" pos:end="161:32">yHistogram</name><index pos:start="161:33" pos:end="161:39">[<expr pos:start="161:34" pos:end="161:38"><name pos:start="161:34" pos:end="161:38">black</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="167:9" pos:end="167:21"><expr pos:start="167:9" pos:end="167:20"><name pos:start="167:9" pos:end="167:15">clipped</name><operator pos:start="167:16" pos:end="167:16">=</operator> <name pos:start="167:18" pos:end="167:20">sum</name></expr>;</expr_stmt>

        <for pos:start="169:9" pos:end="175:9">for<control pos:start="169:12" pos:end="169:40">(<init pos:start="169:13" pos:end="169:20"><expr pos:start="169:13" pos:end="169:19"><name pos:start="169:13" pos:end="169:17">white</name><operator pos:start="169:18" pos:end="169:18">=</operator><literal type="number" pos:start="169:19" pos:end="169:19">0</literal></expr>;</init> <condition pos:start="169:22" pos:end="169:31"><expr pos:start="169:22" pos:end="169:30"><name pos:start="169:22" pos:end="169:26">white</name><operator pos:start="169:27" pos:end="169:27">&lt;</operator><literal type="number" pos:start="169:28" pos:end="169:30">256</literal></expr>;</condition> <incr pos:start="169:33" pos:end="169:39"><expr pos:start="169:33" pos:end="169:39"><name pos:start="169:33" pos:end="169:37">white</name><operator pos:start="169:38" pos:end="169:39">++</operator></expr></incr>)</control><block pos:start="169:41" pos:end="175:9">{<block_content pos:start="171:13" pos:end="173:40">

            <if_stmt pos:start="171:13" pos:end="171:43"><if pos:start="171:13" pos:end="171:43">if<condition pos:start="171:15" pos:end="171:36">(<expr pos:start="171:16" pos:end="171:35"><name pos:start="171:16" pos:end="171:22">clipped</name> <operator pos:start="171:24" pos:end="171:24">&lt;</operator> <name pos:start="171:26" pos:end="171:35">maxClipped</name></expr>)</condition><block type="pseudo" pos:start="171:38" pos:end="171:43"><block_content pos:start="171:38" pos:end="171:43"> <break pos:start="171:38" pos:end="171:43">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:40"><expr pos:start="173:13" pos:end="173:39"><name pos:start="173:13" pos:end="173:19">clipped</name><operator pos:start="173:20" pos:end="173:21">-=</operator> <name pos:start="173:23" pos:end="173:39"><name pos:start="173:23" pos:end="173:32">yHistogram</name><index pos:start="173:33" pos:end="173:39">[<expr pos:start="173:34" pos:end="173:38"><name pos:start="173:34" pos:end="173:38">white</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="179:9" pos:end="184:0"><expr pos:start="179:9" pos:end="179:92"><name pos:start="179:9" pos:end="179:13">scale</name><operator pos:start="179:14" pos:end="179:14">=</operator> <operator pos:start="179:16" pos:end="179:16">(</operator><name pos:start="179:17" pos:end="179:22">double</name><operator pos:start="179:23" pos:end="179:23">)</operator><operator pos:start="179:24" pos:end="179:24">(</operator><name pos:start="179:25" pos:end="179:44"><name pos:start="179:25" pos:end="179:25">c</name><operator pos:start="179:26" pos:end="179:26">.</operator><name pos:start="179:27" pos:end="179:32">ppMode</name><operator pos:start="179:33" pos:end="179:33">.</operator><name pos:start="179:34" pos:end="179:44">maxAllowedY</name></name> <operator pos:start="179:46" pos:end="179:46">-</operator> <name pos:start="179:48" pos:end="179:67"><name pos:start="179:48" pos:end="179:48">c</name><operator pos:start="179:49" pos:end="179:49">.</operator><name pos:start="179:50" pos:end="179:55">ppMode</name><operator pos:start="179:56" pos:end="179:56">.</operator><name pos:start="179:57" pos:end="179:67">minAllowedY</name></name><operator pos:start="179:68" pos:end="179:68">)</operator> <operator pos:start="179:70" pos:end="179:70">/</operator> <operator pos:start="179:72" pos:end="179:72">(</operator><name pos:start="179:73" pos:end="179:78">double</name><operator pos:start="179:79" pos:end="179:79">)</operator><operator pos:start="179:80" pos:end="179:80">(</operator><name pos:start="179:81" pos:end="179:85">white</name><operator pos:start="179:86" pos:end="179:86">-</operator><name pos:start="179:87" pos:end="179:91">black</name><operator pos:start="179:92" pos:end="179:92">)</operator></expr>;</expr_stmt>



<cpp:if pos:start="183:1" pos:end="183:22">#<cpp:directive pos:start="183:2" pos:end="183:3">if</cpp:directive> <expr pos:start="183:5" pos:end="183:22"><name pos:start="183:5" pos:end="183:22">TEMPLATE_PP_MMXEXT</name></expr></cpp:if>

        <expr_stmt pos:start="185:9" pos:end="185:54"><expr pos:start="185:9" pos:end="185:53"><name pos:start="185:9" pos:end="185:22"><name pos:start="185:9" pos:end="185:9">c</name><operator pos:start="185:10" pos:end="185:10">.</operator><name pos:start="185:11" pos:end="185:22">packedYScale</name></name><operator pos:start="185:23" pos:end="185:23">=</operator> <operator pos:start="185:25" pos:end="185:25">(</operator><name pos:start="185:26" pos:end="185:33">uint16_t</name><operator pos:start="185:34" pos:end="185:34">)</operator><operator pos:start="185:35" pos:end="185:35">(</operator><name pos:start="185:36" pos:end="185:40">scale</name><operator pos:start="185:41" pos:end="185:41">*</operator><literal type="number" pos:start="185:42" pos:end="185:48">256.0</literal> <operator pos:start="185:48" pos:end="185:48">+</operator> <literal type="number" pos:start="185:50" pos:end="185:52">0.5</literal><operator pos:start="185:53" pos:end="185:53">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="190:0"><expr pos:start="187:9" pos:end="187:86"><name pos:start="187:9" pos:end="187:23"><name pos:start="187:9" pos:end="187:9">c</name><operator pos:start="187:10" pos:end="187:10">.</operator><name pos:start="187:11" pos:end="187:23">packedYOffset</name></name><operator pos:start="187:24" pos:end="187:24">=</operator> <operator pos:start="187:26" pos:end="187:26">(</operator><operator pos:start="187:27" pos:end="187:27">(</operator><operator pos:start="187:28" pos:end="187:28">(</operator><name pos:start="187:29" pos:end="187:33">black</name><operator pos:start="187:34" pos:end="187:34">*</operator><name pos:start="187:35" pos:end="187:48"><name pos:start="187:35" pos:end="187:35">c</name><operator pos:start="187:36" pos:end="187:36">.</operator><name pos:start="187:37" pos:end="187:48">packedYScale</name></name><operator pos:start="187:49" pos:end="187:49">)</operator><operator pos:start="187:50" pos:end="187:51">&gt;&gt;</operator><literal type="number" pos:start="187:52" pos:end="187:52">8</literal><operator pos:start="187:53" pos:end="187:53">)</operator> <operator pos:start="187:55" pos:end="187:55">-</operator> <name pos:start="187:57" pos:end="187:76"><name pos:start="187:57" pos:end="187:57">c</name><operator pos:start="187:58" pos:end="187:58">.</operator><name pos:start="187:59" pos:end="187:64">ppMode</name><operator pos:start="187:65" pos:end="187:65">.</operator><name pos:start="187:66" pos:end="187:76">minAllowedY</name></name><operator pos:start="187:77" pos:end="187:77">)</operator> <operator pos:start="187:79" pos:end="187:79">&amp;</operator> <literal type="number" pos:start="187:81" pos:end="187:86">0xFFFF</literal></expr>;</expr_stmt>

<cpp:else pos:start="189:1" pos:end="189:5">#<cpp:directive pos:start="189:2" pos:end="189:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="191:9" pos:end="191:55"><expr pos:start="191:9" pos:end="191:54"><name pos:start="191:9" pos:end="191:22"><name pos:start="191:9" pos:end="191:9">c</name><operator pos:start="191:10" pos:end="191:10">.</operator><name pos:start="191:11" pos:end="191:22">packedYScale</name></name><operator pos:start="191:23" pos:end="191:23">=</operator> <operator pos:start="191:25" pos:end="191:25">(</operator><name pos:start="191:26" pos:end="191:33">uint16_t</name><operator pos:start="191:34" pos:end="191:34">)</operator><operator pos:start="191:35" pos:end="191:35">(</operator><name pos:start="191:36" pos:end="191:40">scale</name><operator pos:start="191:41" pos:end="191:41">*</operator><literal type="number" pos:start="191:42" pos:end="191:49">1024.0</literal> <operator pos:start="191:49" pos:end="191:49">+</operator> <literal type="number" pos:start="191:51" pos:end="191:53">0.5</literal><operator pos:start="191:54" pos:end="191:54">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="196:0"><expr pos:start="193:9" pos:end="193:64"><name pos:start="193:9" pos:end="193:23"><name pos:start="193:9" pos:end="193:9">c</name><operator pos:start="193:10" pos:end="193:10">.</operator><name pos:start="193:11" pos:end="193:23">packedYOffset</name></name><operator pos:start="193:24" pos:end="193:24">=</operator> <operator pos:start="193:26" pos:end="193:26">(</operator><name pos:start="193:27" pos:end="193:31">black</name> <operator pos:start="193:33" pos:end="193:33">-</operator> <name pos:start="193:35" pos:end="193:54"><name pos:start="193:35" pos:end="193:35">c</name><operator pos:start="193:36" pos:end="193:36">.</operator><name pos:start="193:37" pos:end="193:42">ppMode</name><operator pos:start="193:43" pos:end="193:43">.</operator><name pos:start="193:44" pos:end="193:54">minAllowedY</name></name><operator pos:start="193:55" pos:end="193:55">)</operator> <operator pos:start="193:57" pos:end="193:57">&amp;</operator> <literal type="number" pos:start="193:59" pos:end="193:64">0xFFFF</literal></expr>;</expr_stmt>

<cpp:endif pos:start="195:1" pos:end="195:6">#<cpp:directive pos:start="195:2" pos:end="195:6">endif</cpp:directive></cpp:endif>



        <expr_stmt pos:start="199:9" pos:end="199:46"><expr pos:start="199:9" pos:end="199:45"><name pos:start="199:9" pos:end="199:23"><name pos:start="199:9" pos:end="199:9">c</name><operator pos:start="199:10" pos:end="199:10">.</operator><name pos:start="199:11" pos:end="199:23">packedYOffset</name></name><operator pos:start="199:24" pos:end="199:25">|=</operator> <name pos:start="199:27" pos:end="199:41"><name pos:start="199:27" pos:end="199:27">c</name><operator pos:start="199:28" pos:end="199:28">.</operator><name pos:start="199:29" pos:end="199:41">packedYOffset</name></name><operator pos:start="199:42" pos:end="199:43">&lt;&lt;</operator><literal type="number" pos:start="199:44" pos:end="199:45">32</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:46"><expr pos:start="201:9" pos:end="201:45"><name pos:start="201:9" pos:end="201:23"><name pos:start="201:9" pos:end="201:9">c</name><operator pos:start="201:10" pos:end="201:10">.</operator><name pos:start="201:11" pos:end="201:23">packedYOffset</name></name><operator pos:start="201:24" pos:end="201:25">|=</operator> <name pos:start="201:27" pos:end="201:41"><name pos:start="201:27" pos:end="201:27">c</name><operator pos:start="201:28" pos:end="201:28">.</operator><name pos:start="201:29" pos:end="201:41">packedYOffset</name></name><operator pos:start="201:42" pos:end="201:43">&lt;&lt;</operator><literal type="number" pos:start="201:44" pos:end="201:45">16</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="205:9" pos:end="205:44"><expr pos:start="205:9" pos:end="205:43"><name pos:start="205:9" pos:end="205:22"><name pos:start="205:9" pos:end="205:9">c</name><operator pos:start="205:10" pos:end="205:10">.</operator><name pos:start="205:11" pos:end="205:22">packedYScale</name></name><operator pos:start="205:23" pos:end="205:24">|=</operator> <name pos:start="205:26" pos:end="205:39"><name pos:start="205:26" pos:end="205:26">c</name><operator pos:start="205:27" pos:end="205:27">.</operator><name pos:start="205:28" pos:end="205:39">packedYScale</name></name><operator pos:start="205:40" pos:end="205:41">&lt;&lt;</operator><literal type="number" pos:start="205:42" pos:end="205:43">32</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:44"><expr pos:start="207:9" pos:end="207:43"><name pos:start="207:9" pos:end="207:22"><name pos:start="207:9" pos:end="207:9">c</name><operator pos:start="207:10" pos:end="207:10">.</operator><name pos:start="207:11" pos:end="207:22">packedYScale</name></name><operator pos:start="207:23" pos:end="207:24">|=</operator> <name pos:start="207:26" pos:end="207:39"><name pos:start="207:26" pos:end="207:26">c</name><operator pos:start="207:27" pos:end="207:27">.</operator><name pos:start="207:28" pos:end="207:39">packedYScale</name></name><operator pos:start="207:40" pos:end="207:41">&lt;&lt;</operator><literal type="number" pos:start="207:42" pos:end="207:43">16</literal></expr>;</expr_stmt>



        <if_stmt pos:start="211:9" pos:end="213:58"><if pos:start="211:9" pos:end="211:77">if<condition pos:start="211:11" pos:end="211:28">(<expr pos:start="211:12" pos:end="211:27"><name pos:start="211:12" pos:end="211:15">mode</name> <operator pos:start="211:17" pos:end="211:17">&amp;</operator> <name pos:start="211:19" pos:end="211:27">LEVEL_FIX</name></expr>)</condition><block type="pseudo" pos:start="211:37" pos:end="211:77"><block_content pos:start="211:37" pos:end="211:77">        <expr_stmt pos:start="211:37" pos:end="211:77"><expr pos:start="211:37" pos:end="211:76"><name pos:start="211:37" pos:end="211:48">QPCorrecture</name><operator pos:start="211:49" pos:end="211:49">=</operator> <operator pos:start="211:51" pos:end="211:51">(</operator><name pos:start="211:52" pos:end="211:54">int</name><operator pos:start="211:55" pos:end="211:55">)</operator><operator pos:start="211:56" pos:end="211:56">(</operator><name pos:start="211:57" pos:end="211:61">scale</name><operator pos:start="211:62" pos:end="211:62">*</operator><literal type="number" pos:start="211:63" pos:end="211:65">256</literal><operator pos:start="211:66" pos:end="211:66">*</operator><literal type="number" pos:start="211:67" pos:end="211:71">256</literal> <operator pos:start="211:71" pos:end="211:71">+</operator> <literal type="number" pos:start="211:73" pos:end="211:75">0.5</literal><operator pos:start="211:76" pos:end="211:76">)</operator></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="213:9" pos:end="213:58">else<block type="pseudo" pos:start="213:37" pos:end="213:58"><block_content pos:start="213:37" pos:end="213:58">                        <expr_stmt pos:start="213:37" pos:end="213:58"><expr pos:start="213:37" pos:end="213:57"><name pos:start="213:37" pos:end="213:48">QPCorrecture</name><operator pos:start="213:49" pos:end="213:49">=</operator> <literal type="number" pos:start="213:51" pos:end="213:53">256</literal><operator pos:start="213:54" pos:end="213:54">*</operator><literal type="number" pos:start="213:55" pos:end="213:57">256</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if><else pos:start="215:6" pos:end="223:5">else<block pos:start="215:10" pos:end="223:5">{<block_content pos:start="217:9" pos:end="221:30">

        <expr_stmt pos:start="217:9" pos:end="217:45"><expr pos:start="217:9" pos:end="217:44"><name pos:start="217:9" pos:end="217:22"><name pos:start="217:9" pos:end="217:9">c</name><operator pos:start="217:10" pos:end="217:10">.</operator><name pos:start="217:11" pos:end="217:22">packedYScale</name></name><operator pos:start="217:23" pos:end="217:23">=</operator> <literal type="number" pos:start="217:25" pos:end="217:44">0x0100010001000100LL</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:27"><expr pos:start="219:9" pos:end="219:26"><name pos:start="219:9" pos:end="219:23"><name pos:start="219:9" pos:end="219:9">c</name><operator pos:start="219:10" pos:end="219:10">.</operator><name pos:start="219:11" pos:end="219:23">packedYOffset</name></name><operator pos:start="219:24" pos:end="219:24">=</operator> <literal type="number" pos:start="219:26" pos:end="219:26">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="221:9" pos:end="221:30"><expr pos:start="221:9" pos:end="221:29"><name pos:start="221:9" pos:end="221:20">QPCorrecture</name><operator pos:start="221:21" pos:end="221:21">=</operator> <literal type="number" pos:start="221:23" pos:end="221:25">256</literal><operator pos:start="221:26" pos:end="221:26">*</operator><literal type="number" pos:start="221:27" pos:end="221:29">256</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="227:5" pos:end="227:48">/* copy &amp; deinterlace first row of blocks */</comment>

    <expr_stmt pos:start="229:5" pos:end="229:18"><expr pos:start="229:5" pos:end="229:17"><name pos:start="229:5" pos:end="229:5">y</name><operator pos:start="229:6" pos:end="229:6">=</operator><operator pos:start="229:7" pos:end="229:7">-</operator><name pos:start="229:8" pos:end="229:17">BLOCK_SIZE</name></expr>;</expr_stmt>

    <block pos:start="231:5" pos:end="383:5">{<block_content pos:start="233:9" pos:end="381:9">

        <decl_stmt pos:start="233:9" pos:end="233:53"><decl pos:start="233:9" pos:end="233:52"><type pos:start="233:9" pos:end="233:23"><specifier pos:start="233:9" pos:end="233:13">const</specifier> <name pos:start="233:15" pos:end="233:21">uint8_t</name> <modifier pos:start="233:23" pos:end="233:23">*</modifier></type><name pos:start="233:24" pos:end="233:31">srcBlock</name><init pos:start="233:32" pos:end="233:52">= <expr pos:start="233:34" pos:end="233:52"><operator pos:start="233:34" pos:end="233:34">&amp;</operator><operator pos:start="233:35" pos:end="233:35">(</operator><name pos:start="233:36" pos:end="233:51"><name pos:start="233:36" pos:end="233:38">src</name><index pos:start="233:39" pos:end="233:51">[<expr pos:start="233:40" pos:end="233:50"><name pos:start="233:40" pos:end="233:40">y</name><operator pos:start="233:41" pos:end="233:41">*</operator><name pos:start="233:42" pos:end="233:50">srcStride</name></expr>]</index></name><operator pos:start="233:52" pos:end="233:52">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="235:9" pos:end="235:47"><decl pos:start="235:9" pos:end="235:46"><type pos:start="235:9" pos:end="235:17"><name pos:start="235:9" pos:end="235:15">uint8_t</name> <modifier pos:start="235:17" pos:end="235:17">*</modifier></type><name pos:start="235:18" pos:end="235:25">dstBlock</name><init pos:start="235:26" pos:end="235:46">= <expr pos:start="235:28" pos:end="235:46"><name pos:start="235:28" pos:end="235:34">tempDst</name> <operator pos:start="235:36" pos:end="235:36">+</operator> <name pos:start="235:38" pos:end="235:46">dstStride</name></expr></init></decl>;</decl_stmt>



        <comment type="line" pos:start="239:9" pos:end="239:91">// From this point on it is guaranteed that we can read and write 16 lines downward</comment>

        <comment type="line" pos:start="241:9" pos:end="241:75">// finish 1 block before the next otherwise we might have a problem</comment>

        <comment type="line" pos:start="243:9" pos:end="243:86">// with the L1 Cache of the P4 ... or only a few blocks at a time or something</comment>

        <for pos:start="245:9" pos:end="365:9">for<control pos:start="245:12" pos:end="245:40">(<init pos:start="245:13" pos:end="245:16"><expr pos:start="245:13" pos:end="245:15"><name pos:start="245:13" pos:end="245:13">x</name><operator pos:start="245:14" pos:end="245:14">=</operator><literal type="number" pos:start="245:15" pos:end="245:15">0</literal></expr>;</init> <condition pos:start="245:18" pos:end="245:25"><expr pos:start="245:18" pos:end="245:24"><name pos:start="245:18" pos:end="245:18">x</name><operator pos:start="245:19" pos:end="245:19">&lt;</operator><name pos:start="245:20" pos:end="245:24">width</name></expr>;</condition> <incr pos:start="245:27" pos:end="245:39"><expr pos:start="245:27" pos:end="245:39"><name pos:start="245:27" pos:end="245:27">x</name><operator pos:start="245:28" pos:end="245:29">+=</operator><name pos:start="245:30" pos:end="245:39">BLOCK_SIZE</name></expr></incr>)</control><block pos:start="245:41" pos:end="365:9">{<block_content pos:start="265:13" pos:end="363:24">



<cpp:if pos:start="249:1" pos:end="249:36">#<cpp:directive pos:start="249:2" pos:end="249:3">if</cpp:directive> <expr pos:start="249:5" pos:end="249:36"><name pos:start="249:5" pos:end="249:22">TEMPLATE_PP_MMXEXT</name> <operator pos:start="249:24" pos:end="249:25">&amp;&amp;</operator> <name pos:start="249:27" pos:end="249:36">HAVE_6REGS</name></expr></cpp:if>

<comment type="block" pos:start="251:1" pos:end="261:2">/*

            prefetchnta(srcBlock + (((x&gt;&gt;2)&amp;6) + 5)*srcStride + 32);

            prefetchnta(srcBlock + (((x&gt;&gt;2)&amp;6) + 6)*srcStride + 32);

            prefetcht0(dstBlock + (((x&gt;&gt;2)&amp;6) + 5)*dstStride + 32);

            prefetcht0(dstBlock + (((x&gt;&gt;2)&amp;6) + 6)*dstStride + 32);

*/</comment>



            <asm pos:start="265:13" pos:end="318:0">__asm__(

                "mov %4, %%"REG_a"              \n\t"

                "shr $2, %%"REG_a"              \n\t"

                "and $6, %%"REG_a"              \n\t"

                "add %5, %%"REG_a"              \n\t"

                "mov %%"REG_a", %%"REG_d"       \n\t"

                "imul %1, %%"REG_a"             \n\t"

                "imul %3, %%"REG_d"             \n\t"

                "prefetchnta 32(%%"REG_a", %0)  \n\t"

                "prefetcht0 32(%%"REG_d", %2)   \n\t"

                "add %1, %%"REG_a"              \n\t"

                "add %3, %%"REG_d"              \n\t"

                "prefetchnta 32(%%"REG_a", %0)  \n\t"

                "prefetcht0 32(%%"REG_d", %2)   \n\t"

                :: "r" (srcBlock), "r" ((x86_reg)srcStride), "r" (dstBlock), "r" ((x86_reg)dstStride),

                "g" ((x86_reg)x), "g" ((x86_reg)copyAhead)

                : "%"REG_a, "%"REG_d

            );</asm>



<cpp:elif pos:start="303:1" pos:end="303:23">#<cpp:directive pos:start="303:2" pos:end="303:5">elif</cpp:directive> <expr pos:start="303:7" pos:end="303:23"><name pos:start="303:7" pos:end="303:23">TEMPLATE_PP_3DNOW</name></expr></cpp:elif>

<comment type="line" pos:start="305:1" pos:end="305:95">//FIXME check if this is faster on an 3dnow chip or if it is faster without the prefetch or ...</comment>

<comment type="block" pos:start="307:1" pos:end="315:2">/*          prefetch(srcBlock + (((x&gt;&gt;3)&amp;3) + 5)*srcStride + 32);

            prefetch(srcBlock + (((x&gt;&gt;3)&amp;3) + 9)*srcStride + 32);

            prefetchw(dstBlock + (((x&gt;&gt;3)&amp;3) + 5)*dstStride + 32);

            prefetchw(dstBlock + (((x&gt;&gt;3)&amp;3) + 9)*dstStride + 32);

*/</comment>

<cpp:endif pos:start="317:1" pos:end="317:6">#<cpp:directive pos:start="317:2" pos:end="317:6">endif</cpp:directive></cpp:endif>



            <expr_stmt pos:start="321:13" pos:end="323:101"><expr pos:start="321:13" pos:end="323:100"><call pos:start="321:13" pos:end="323:100"><call pos:start="321:13" pos:end="321:29"><name pos:start="321:13" pos:end="321:18">RENAME</name><argument_list pos:start="321:19" pos:end="321:29">(<argument pos:start="321:20" pos:end="321:28"><expr pos:start="321:20" pos:end="321:28"><name pos:start="321:20" pos:end="321:28">blockCopy</name></expr></argument>)</argument_list></call><argument_list pos:start="321:30" pos:end="323:100">(<argument pos:start="321:31" pos:end="321:52"><expr pos:start="321:31" pos:end="321:52"><name pos:start="321:31" pos:end="321:38">dstBlock</name> <operator pos:start="321:40" pos:end="321:40">+</operator> <name pos:start="321:42" pos:end="321:50">dstStride</name><operator pos:start="321:51" pos:end="321:51">*</operator><literal type="number" pos:start="321:52" pos:end="321:52">8</literal></expr></argument>, <argument pos:start="321:55" pos:end="321:63"><expr pos:start="321:55" pos:end="321:63"><name pos:start="321:55" pos:end="321:63">dstStride</name></expr></argument>,

                              <argument pos:start="323:31" pos:end="323:52"><expr pos:start="323:31" pos:end="323:52"><name pos:start="323:31" pos:end="323:38">srcBlock</name> <operator pos:start="323:40" pos:end="323:40">+</operator> <name pos:start="323:42" pos:end="323:50">srcStride</name><operator pos:start="323:51" pos:end="323:51">*</operator><literal type="number" pos:start="323:52" pos:end="323:52">8</literal></expr></argument>, <argument pos:start="323:55" pos:end="323:63"><expr pos:start="323:55" pos:end="323:63"><name pos:start="323:55" pos:end="323:63">srcStride</name></expr></argument>, <argument pos:start="323:66" pos:end="323:81"><expr pos:start="323:66" pos:end="323:81"><name pos:start="323:66" pos:end="323:69">mode</name> <operator pos:start="323:71" pos:end="323:71">&amp;</operator> <name pos:start="323:73" pos:end="323:81">LEVEL_FIX</name></expr></argument>, <argument pos:start="323:84" pos:end="323:99"><expr pos:start="323:84" pos:end="323:99"><operator pos:start="323:84" pos:end="323:84">&amp;</operator><name pos:start="323:85" pos:end="323:99"><name pos:start="323:85" pos:end="323:85">c</name><operator pos:start="323:86" pos:end="323:86">.</operator><name pos:start="323:87" pos:end="323:99">packedYOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="327:13" pos:end="327:65"><expr pos:start="327:13" pos:end="327:64"><call pos:start="327:13" pos:end="327:64"><call pos:start="327:13" pos:end="327:29"><name pos:start="327:13" pos:end="327:18">RENAME</name><argument_list pos:start="327:19" pos:end="327:29">(<argument pos:start="327:20" pos:end="327:28"><expr pos:start="327:20" pos:end="327:28"><name pos:start="327:20" pos:end="327:28">duplicate</name></expr></argument>)</argument_list></call><argument_list pos:start="327:30" pos:end="327:64">(<argument pos:start="327:31" pos:end="327:52"><expr pos:start="327:31" pos:end="327:52"><name pos:start="327:31" pos:end="327:38">dstBlock</name> <operator pos:start="327:40" pos:end="327:40">+</operator> <name pos:start="327:42" pos:end="327:50">dstStride</name><operator pos:start="327:51" pos:end="327:51">*</operator><literal type="number" pos:start="327:52" pos:end="327:52">8</literal></expr></argument>, <argument pos:start="327:55" pos:end="327:63"><expr pos:start="327:55" pos:end="327:63"><name pos:start="327:55" pos:end="327:63">dstStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="331:13" pos:end="353:101"><if pos:start="331:13" pos:end="333:74">if<condition pos:start="331:15" pos:end="331:47">(<expr pos:start="331:16" pos:end="331:46"><name pos:start="331:16" pos:end="331:19">mode</name> <operator pos:start="331:21" pos:end="331:21">&amp;</operator> <name pos:start="331:23" pos:end="331:46">LINEAR_IPOL_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="333:17" pos:end="333:74"><block_content pos:start="333:17" pos:end="333:74">

                <function_decl pos:start="333:17" pos:end="333:74"><type pos:start="333:17" pos:end="333:22"><name pos:start="333:17" pos:end="333:22">RENAME</name></type>(<name pos:start="333:24" pos:end="333:51">deInterlaceInterpolateLinear</name>)<parameter_list pos:start="333:53" pos:end="333:73">(<parameter pos:start="333:54" pos:end="333:61"><decl pos:start="333:54" pos:end="333:61"><type pos:start="333:54" pos:end="333:61"><name pos:start="333:54" pos:end="333:61">dstBlock</name></type></decl></parameter>, <parameter pos:start="333:64" pos:end="333:72"><decl pos:start="333:64" pos:end="333:72"><type pos:start="333:64" pos:end="333:72"><name pos:start="333:64" pos:end="333:72">dstStride</name></type></decl></parameter>)</parameter_list>;</function_decl></block_content></block></if>

            <if type="elseif" pos:start="335:13" pos:end="337:85">else if<condition pos:start="335:20" pos:end="335:53">(<expr pos:start="335:21" pos:end="335:52"><name pos:start="335:21" pos:end="335:24">mode</name> <operator pos:start="335:26" pos:end="335:26">&amp;</operator> <name pos:start="335:28" pos:end="335:52">LINEAR_BLEND_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="337:17" pos:end="337:85"><block_content pos:start="337:17" pos:end="337:85">

                <expr_stmt pos:start="337:17" pos:end="337:85"><expr pos:start="337:17" pos:end="337:84"><call pos:start="337:17" pos:end="337:84"><call pos:start="337:17" pos:end="337:46"><name pos:start="337:17" pos:end="337:22">RENAME</name><argument_list pos:start="337:23" pos:end="337:46">(<argument pos:start="337:24" pos:end="337:45"><expr pos:start="337:24" pos:end="337:45"><name pos:start="337:24" pos:end="337:45">deInterlaceBlendLinear</name></expr></argument>)</argument_list></call><argument_list pos:start="337:47" pos:end="337:84">(<argument pos:start="337:48" pos:end="337:55"><expr pos:start="337:48" pos:end="337:55"><name pos:start="337:48" pos:end="337:55">dstBlock</name></expr></argument>, <argument pos:start="337:58" pos:end="337:66"><expr pos:start="337:58" pos:end="337:66"><name pos:start="337:58" pos:end="337:66">dstStride</name></expr></argument>, <argument pos:start="337:69" pos:end="337:83"><expr pos:start="337:69" pos:end="337:83"><name pos:start="337:69" pos:end="337:79"><name pos:start="337:69" pos:end="337:69">c</name><operator pos:start="337:70" pos:end="337:70">.</operator><name pos:start="337:71" pos:end="337:79">deintTemp</name></name> <operator pos:start="337:81" pos:end="337:81">+</operator> <name pos:start="337:83" pos:end="337:83">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="339:13" pos:end="341:63">else if<condition pos:start="339:20" pos:end="339:47">(<expr pos:start="339:21" pos:end="339:46"><name pos:start="339:21" pos:end="339:24">mode</name> <operator pos:start="339:26" pos:end="339:26">&amp;</operator> <name pos:start="339:28" pos:end="339:46">MEDIAN_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="341:17" pos:end="341:63"><block_content pos:start="341:17" pos:end="341:63">

                <function_decl pos:start="341:17" pos:end="341:63"><type pos:start="341:17" pos:end="341:22"><name pos:start="341:17" pos:end="341:22">RENAME</name></type>(<name pos:start="341:24" pos:end="341:40">deInterlaceMedian</name>)<parameter_list pos:start="341:42" pos:end="341:62">(<parameter pos:start="341:43" pos:end="341:50"><decl pos:start="341:43" pos:end="341:50"><type pos:start="341:43" pos:end="341:50"><name pos:start="341:43" pos:end="341:50">dstBlock</name></type></decl></parameter>, <parameter pos:start="341:53" pos:end="341:61"><decl pos:start="341:53" pos:end="341:61"><type pos:start="341:53" pos:end="341:61"><name pos:start="341:53" pos:end="341:61">dstStride</name></type></decl></parameter>)</parameter_list>;</function_decl></block_content></block></if>

            <if type="elseif" pos:start="343:13" pos:end="345:73">else if<condition pos:start="343:20" pos:end="343:51">(<expr pos:start="343:21" pos:end="343:50"><name pos:start="343:21" pos:end="343:24">mode</name> <operator pos:start="343:26" pos:end="343:26">&amp;</operator> <name pos:start="343:28" pos:end="343:50">CUBIC_IPOL_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="345:17" pos:end="345:73"><block_content pos:start="345:17" pos:end="345:73">

                <function_decl pos:start="345:17" pos:end="345:73"><type pos:start="345:17" pos:end="345:22"><name pos:start="345:17" pos:end="345:22">RENAME</name></type>(<name pos:start="345:24" pos:end="345:50">deInterlaceInterpolateCubic</name>)<parameter_list pos:start="345:52" pos:end="345:72">(<parameter pos:start="345:53" pos:end="345:60"><decl pos:start="345:53" pos:end="345:60"><type pos:start="345:53" pos:end="345:60"><name pos:start="345:53" pos:end="345:60">dstBlock</name></type></decl></parameter>, <parameter pos:start="345:63" pos:end="345:71"><decl pos:start="345:63" pos:end="345:71"><type pos:start="345:63" pos:end="345:71"><name pos:start="345:63" pos:end="345:71">dstStride</name></type></decl></parameter>)</parameter_list>;</function_decl></block_content></block></if>

            <if type="elseif" pos:start="347:13" pos:end="349:76">else if<condition pos:start="347:20" pos:end="347:47">(<expr pos:start="347:21" pos:end="347:46"><name pos:start="347:21" pos:end="347:24">mode</name> <operator pos:start="347:26" pos:end="347:26">&amp;</operator> <name pos:start="347:28" pos:end="347:46">FFMPEG_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="349:17" pos:end="349:76"><block_content pos:start="349:17" pos:end="349:76">

                <expr_stmt pos:start="349:17" pos:end="349:76"><expr pos:start="349:17" pos:end="349:75"><call pos:start="349:17" pos:end="349:75"><call pos:start="349:17" pos:end="349:37"><name pos:start="349:17" pos:end="349:22">RENAME</name><argument_list pos:start="349:23" pos:end="349:37">(<argument pos:start="349:24" pos:end="349:36"><expr pos:start="349:24" pos:end="349:36"><name pos:start="349:24" pos:end="349:36">deInterlaceFF</name></expr></argument>)</argument_list></call><argument_list pos:start="349:38" pos:end="349:75">(<argument pos:start="349:39" pos:end="349:46"><expr pos:start="349:39" pos:end="349:46"><name pos:start="349:39" pos:end="349:46">dstBlock</name></expr></argument>, <argument pos:start="349:49" pos:end="349:57"><expr pos:start="349:49" pos:end="349:57"><name pos:start="349:49" pos:end="349:57">dstStride</name></expr></argument>, <argument pos:start="349:60" pos:end="349:74"><expr pos:start="349:60" pos:end="349:74"><name pos:start="349:60" pos:end="349:70"><name pos:start="349:60" pos:end="349:60">c</name><operator pos:start="349:61" pos:end="349:61">.</operator><name pos:start="349:62" pos:end="349:70">deintTemp</name></name> <operator pos:start="349:72" pos:end="349:72">+</operator> <name pos:start="349:74" pos:end="349:74">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="351:13" pos:end="353:101">else if<condition pos:start="351:20" pos:end="351:49">(<expr pos:start="351:21" pos:end="351:48"><name pos:start="351:21" pos:end="351:24">mode</name> <operator pos:start="351:26" pos:end="351:26">&amp;</operator> <name pos:start="351:28" pos:end="351:48">LOWPASS5_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="353:17" pos:end="353:101"><block_content pos:start="353:17" pos:end="353:101">

                <expr_stmt pos:start="353:17" pos:end="353:101"><expr pos:start="353:17" pos:end="353:100"><call pos:start="353:17" pos:end="353:100"><call pos:start="353:17" pos:end="353:37"><name pos:start="353:17" pos:end="353:22">RENAME</name><argument_list pos:start="353:23" pos:end="353:37">(<argument pos:start="353:24" pos:end="353:36"><expr pos:start="353:24" pos:end="353:36"><name pos:start="353:24" pos:end="353:36">deInterlaceL5</name></expr></argument>)</argument_list></call><argument_list pos:start="353:38" pos:end="353:100">(<argument pos:start="353:39" pos:end="353:46"><expr pos:start="353:39" pos:end="353:46"><name pos:start="353:39" pos:end="353:46">dstBlock</name></expr></argument>, <argument pos:start="353:49" pos:end="353:57"><expr pos:start="353:49" pos:end="353:57"><name pos:start="353:49" pos:end="353:57">dstStride</name></expr></argument>, <argument pos:start="353:60" pos:end="353:74"><expr pos:start="353:60" pos:end="353:74"><name pos:start="353:60" pos:end="353:70"><name pos:start="353:60" pos:end="353:60">c</name><operator pos:start="353:61" pos:end="353:61">.</operator><name pos:start="353:62" pos:end="353:70">deintTemp</name></name> <operator pos:start="353:72" pos:end="353:72">+</operator> <name pos:start="353:74" pos:end="353:74">x</name></expr></argument>, <argument pos:start="353:77" pos:end="353:99"><expr pos:start="353:77" pos:end="353:99"><name pos:start="353:77" pos:end="353:87"><name pos:start="353:77" pos:end="353:77">c</name><operator pos:start="353:78" pos:end="353:78">.</operator><name pos:start="353:79" pos:end="353:87">deintTemp</name></name> <operator pos:start="353:89" pos:end="353:89">+</operator> <name pos:start="353:91" pos:end="353:95">width</name> <operator pos:start="353:97" pos:end="353:97">+</operator> <name pos:start="353:99" pos:end="353:99">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<comment type="block" pos:start="355:1" pos:end="359:2">/*          else if(mode &amp; CUBIC_BLEND_DEINT_FILTER)

                RENAME(deInterlaceBlendCubic)(dstBlock, dstStride);

*/</comment>

            <expr_stmt pos:start="361:13" pos:end="361:24"><expr pos:start="361:13" pos:end="361:23"><name pos:start="361:13" pos:end="361:20">dstBlock</name><operator pos:start="361:21" pos:end="361:22">+=</operator><literal type="number" pos:start="361:23" pos:end="361:23">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="363:13" pos:end="363:24"><expr pos:start="363:13" pos:end="363:23"><name pos:start="363:13" pos:end="363:20">srcBlock</name><operator pos:start="363:21" pos:end="363:22">+=</operator><literal type="number" pos:start="363:23" pos:end="363:23">8</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="367:9" pos:end="381:9"><if pos:start="367:9" pos:end="369:70">if<condition pos:start="367:11" pos:end="367:35">(<expr pos:start="367:12" pos:end="367:34"><name pos:start="367:12" pos:end="367:16">width</name><operator pos:start="367:17" pos:end="367:18">==</operator><call pos:start="367:19" pos:end="367:34"><name pos:start="367:19" pos:end="367:23">FFABS</name><argument_list pos:start="367:24" pos:end="367:34">(<argument pos:start="367:25" pos:end="367:33"><expr pos:start="367:25" pos:end="367:33"><name pos:start="367:25" pos:end="367:33">dstStride</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="369:13" pos:end="369:70"><block_content pos:start="369:13" pos:end="369:70">

            <expr_stmt pos:start="369:13" pos:end="369:70"><expr pos:start="369:13" pos:end="369:69"><call pos:start="369:13" pos:end="369:69"><name pos:start="369:13" pos:end="369:19">linecpy</name><argument_list pos:start="369:20" pos:end="369:69">(<argument pos:start="369:21" pos:end="369:23"><expr pos:start="369:21" pos:end="369:23"><name pos:start="369:21" pos:end="369:23">dst</name></expr></argument>, <argument pos:start="369:26" pos:end="369:46"><expr pos:start="369:26" pos:end="369:46"><name pos:start="369:26" pos:end="369:32">tempDst</name> <operator pos:start="369:34" pos:end="369:34">+</operator> <literal type="number" pos:start="369:36" pos:end="369:36">9</literal><operator pos:start="369:37" pos:end="369:37">*</operator><name pos:start="369:38" pos:end="369:46">dstStride</name></expr></argument>, <argument pos:start="369:49" pos:end="369:57"><expr pos:start="369:49" pos:end="369:57"><name pos:start="369:49" pos:end="369:57">copyAhead</name></expr></argument>, <argument pos:start="369:60" pos:end="369:68"><expr pos:start="369:60" pos:end="369:68"><name pos:start="369:60" pos:end="369:68">dstStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="371:9" pos:end="381:9">else<block pos:start="371:13" pos:end="381:9">{<block_content pos:start="373:13" pos:end="379:13">

            <decl_stmt pos:start="373:13" pos:end="373:18"><decl pos:start="373:13" pos:end="373:17"><type pos:start="373:13" pos:end="373:15"><name pos:start="373:13" pos:end="373:15">int</name></type> <name pos:start="373:17" pos:end="373:17">i</name></decl>;</decl_stmt>

            <for pos:start="375:13" pos:end="379:13">for<control pos:start="375:16" pos:end="375:38">(<init pos:start="375:17" pos:end="375:20"><expr pos:start="375:17" pos:end="375:19"><name pos:start="375:17" pos:end="375:17">i</name><operator pos:start="375:18" pos:end="375:18">=</operator><literal type="number" pos:start="375:19" pos:end="375:19">0</literal></expr>;</init> <condition pos:start="375:22" pos:end="375:33"><expr pos:start="375:22" pos:end="375:32"><name pos:start="375:22" pos:end="375:22">i</name><operator pos:start="375:23" pos:end="375:23">&lt;</operator><name pos:start="375:24" pos:end="375:32">copyAhead</name></expr>;</condition> <incr pos:start="375:35" pos:end="375:37"><expr pos:start="375:35" pos:end="375:37"><name pos:start="375:35" pos:end="375:35">i</name><operator pos:start="375:36" pos:end="375:37">++</operator></expr></incr>)</control><block pos:start="375:39" pos:end="379:13">{<block_content pos:start="377:17" pos:end="377:76">

                <expr_stmt pos:start="377:17" pos:end="377:76"><expr pos:start="377:17" pos:end="377:75"><call pos:start="377:17" pos:end="377:75"><name pos:start="377:17" pos:end="377:22">memcpy</name><argument_list pos:start="377:23" pos:end="377:75">(<argument pos:start="377:24" pos:end="377:40"><expr pos:start="377:24" pos:end="377:40"><name pos:start="377:24" pos:end="377:26">dst</name> <operator pos:start="377:28" pos:end="377:28">+</operator> <name pos:start="377:30" pos:end="377:30">i</name><operator pos:start="377:31" pos:end="377:31">*</operator><name pos:start="377:32" pos:end="377:40">dstStride</name></expr></argument>, <argument pos:start="377:43" pos:end="377:67"><expr pos:start="377:43" pos:end="377:67"><name pos:start="377:43" pos:end="377:49">tempDst</name> <operator pos:start="377:51" pos:end="377:51">+</operator> <operator pos:start="377:53" pos:end="377:53">(</operator><literal type="number" pos:start="377:54" pos:end="377:55">9</literal><operator pos:start="377:55" pos:end="377:55">+</operator><name pos:start="377:56" pos:end="377:56">i</name><operator pos:start="377:57" pos:end="377:57">)</operator><operator pos:start="377:58" pos:end="377:58">*</operator><name pos:start="377:59" pos:end="377:67">dstStride</name></expr></argument>, <argument pos:start="377:70" pos:end="377:74"><expr pos:start="377:70" pos:end="377:74"><name pos:start="377:70" pos:end="377:74">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block>



    <for pos:start="387:5" pos:end="882:0">for<control pos:start="387:8" pos:end="387:37">(<init pos:start="387:9" pos:end="387:12"><expr pos:start="387:9" pos:end="387:11"><name pos:start="387:9" pos:end="387:9">y</name><operator pos:start="387:10" pos:end="387:10">=</operator><literal type="number" pos:start="387:11" pos:end="387:11">0</literal></expr>;</init> <condition pos:start="387:14" pos:end="387:22"><expr pos:start="387:14" pos:end="387:21"><name pos:start="387:14" pos:end="387:14">y</name><operator pos:start="387:15" pos:end="387:15">&lt;</operator><name pos:start="387:16" pos:end="387:21">height</name></expr>;</condition> <incr pos:start="387:24" pos:end="387:36"><expr pos:start="387:24" pos:end="387:36"><name pos:start="387:24" pos:end="387:24">y</name><operator pos:start="387:25" pos:end="387:26">+=</operator><name pos:start="387:27" pos:end="387:36">BLOCK_SIZE</name></expr></incr>)</control><block pos:start="387:38" pos:end="882:0">{<block_content pos:start="391:9" pos:end="859:9">

        <comment type="line" pos:start="389:9" pos:end="389:64">//1% speedup if these are here instead of the inner loop</comment>

        <decl_stmt pos:start="391:9" pos:end="391:53"><decl pos:start="391:9" pos:end="391:52"><type pos:start="391:9" pos:end="391:23"><specifier pos:start="391:9" pos:end="391:13">const</specifier> <name pos:start="391:15" pos:end="391:21">uint8_t</name> <modifier pos:start="391:23" pos:end="391:23">*</modifier></type><name pos:start="391:24" pos:end="391:31">srcBlock</name><init pos:start="391:32" pos:end="391:52">= <expr pos:start="391:34" pos:end="391:52"><operator pos:start="391:34" pos:end="391:34">&amp;</operator><operator pos:start="391:35" pos:end="391:35">(</operator><name pos:start="391:36" pos:end="391:51"><name pos:start="391:36" pos:end="391:38">src</name><index pos:start="391:39" pos:end="391:51">[<expr pos:start="391:40" pos:end="391:50"><name pos:start="391:40" pos:end="391:40">y</name><operator pos:start="391:41" pos:end="391:41">*</operator><name pos:start="391:42" pos:end="391:50">srcStride</name></expr>]</index></name><operator pos:start="391:52" pos:end="391:52">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="393:9" pos:end="396:0"><decl pos:start="393:9" pos:end="393:46"><type pos:start="393:9" pos:end="393:17"><name pos:start="393:9" pos:end="393:15">uint8_t</name> <modifier pos:start="393:17" pos:end="393:17">*</modifier></type><name pos:start="393:18" pos:end="393:25">dstBlock</name><init pos:start="393:26" pos:end="393:46">= <expr pos:start="393:28" pos:end="393:46"><operator pos:start="393:28" pos:end="393:28">&amp;</operator><operator pos:start="393:29" pos:end="393:29">(</operator><name pos:start="393:30" pos:end="393:45"><name pos:start="393:30" pos:end="393:32">dst</name><index pos:start="393:33" pos:end="393:45">[<expr pos:start="393:34" pos:end="393:44"><name pos:start="393:34" pos:end="393:34">y</name><operator pos:start="393:35" pos:end="393:35">*</operator><name pos:start="393:36" pos:end="393:44">dstStride</name></expr>]</index></name><operator pos:start="393:46" pos:end="393:46">)</operator></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="395:1" pos:end="395:19">#<cpp:directive pos:start="395:2" pos:end="395:3">if</cpp:directive> <expr pos:start="395:5" pos:end="395:19"><name pos:start="395:5" pos:end="395:19">TEMPLATE_PP_MMX</name></expr></cpp:if>

        <decl_stmt pos:start="397:9" pos:end="397:42"><decl pos:start="397:9" pos:end="397:41"><type pos:start="397:9" pos:end="397:17"><name pos:start="397:9" pos:end="397:15">uint8_t</name> <modifier pos:start="397:17" pos:end="397:17">*</modifier></type><name pos:start="397:18" pos:end="397:27">tempBlock1</name><init pos:start="397:28" pos:end="397:41">= <expr pos:start="397:30" pos:end="397:41"><name pos:start="397:30" pos:end="397:41"><name pos:start="397:30" pos:end="397:30">c</name><operator pos:start="397:31" pos:end="397:31">.</operator><name pos:start="397:32" pos:end="397:41">tempBlocks</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="399:9" pos:end="402:0"><decl pos:start="399:9" pos:end="399:45"><type pos:start="399:9" pos:end="399:17"><name pos:start="399:9" pos:end="399:15">uint8_t</name> <modifier pos:start="399:17" pos:end="399:17">*</modifier></type><name pos:start="399:18" pos:end="399:27">tempBlock2</name><init pos:start="399:28" pos:end="399:45">= <expr pos:start="399:30" pos:end="399:45"><name pos:start="399:30" pos:end="399:41"><name pos:start="399:30" pos:end="399:30">c</name><operator pos:start="399:31" pos:end="399:31">.</operator><name pos:start="399:32" pos:end="399:41">tempBlocks</name></name> <operator pos:start="399:43" pos:end="399:43">+</operator> <literal type="number" pos:start="399:45" pos:end="399:45">8</literal></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="401:1" pos:end="401:6">#<cpp:directive pos:start="401:2" pos:end="401:6">endif</cpp:directive></cpp:endif>

        <decl_stmt pos:start="403:9" pos:end="403:58"><decl pos:start="403:9" pos:end="403:57"><type pos:start="403:9" pos:end="403:22"><specifier pos:start="403:9" pos:end="403:13">const</specifier> <name pos:start="403:15" pos:end="403:20">int8_t</name> <modifier pos:start="403:22" pos:end="403:22">*</modifier></type><name pos:start="403:23" pos:end="403:27">QPptr</name><init pos:start="403:28" pos:end="403:57">= <expr pos:start="403:30" pos:end="403:57"><operator pos:start="403:30" pos:end="403:30">&amp;</operator><name pos:start="403:31" pos:end="403:57"><name pos:start="403:31" pos:end="403:33">QPs</name><index pos:start="403:34" pos:end="403:57">[<expr pos:start="403:35" pos:end="403:56"><operator pos:start="403:35" pos:end="403:35">(</operator><name pos:start="403:36" pos:end="403:36">y</name><operator pos:start="403:37" pos:end="403:38">&gt;&gt;</operator><name pos:start="403:39" pos:end="403:46">qpVShift</name><operator pos:start="403:47" pos:end="403:47">)</operator><operator pos:start="403:48" pos:end="403:48">*</operator><name pos:start="403:49" pos:end="403:56">QPStride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="405:9" pos:end="405:73"><decl pos:start="405:9" pos:end="405:72"><type pos:start="405:9" pos:end="405:16"><name pos:start="405:9" pos:end="405:14">int8_t</name> <modifier pos:start="405:16" pos:end="405:16">*</modifier></type><name pos:start="405:17" pos:end="405:25">nonBQPptr</name><init pos:start="405:26" pos:end="405:72">= <expr pos:start="405:28" pos:end="405:72"><operator pos:start="405:28" pos:end="405:28">&amp;</operator><name pos:start="405:29" pos:end="405:72"><name pos:start="405:29" pos:end="405:29">c</name><operator pos:start="405:30" pos:end="405:30">.</operator><name pos:start="405:31" pos:end="405:41">nonBQPTable</name><index pos:start="405:42" pos:end="405:72">[<expr pos:start="405:43" pos:end="405:71"><operator pos:start="405:43" pos:end="405:43">(</operator><name pos:start="405:44" pos:end="405:44">y</name><operator pos:start="405:45" pos:end="405:46">&gt;&gt;</operator><name pos:start="405:47" pos:end="405:54">qpVShift</name><operator pos:start="405:55" pos:end="405:55">)</operator><operator pos:start="405:56" pos:end="405:56">*</operator><call pos:start="405:57" pos:end="405:71"><name pos:start="405:57" pos:end="405:61">FFABS</name><argument_list pos:start="405:62" pos:end="405:71">(<argument pos:start="405:63" pos:end="405:70"><expr pos:start="405:63" pos:end="405:70"><name pos:start="405:63" pos:end="405:70">QPStride</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="407:9" pos:end="407:17"><decl pos:start="407:9" pos:end="407:16"><type pos:start="407:9" pos:end="407:11"><name pos:start="407:9" pos:end="407:11">int</name></type> <name pos:start="407:13" pos:end="407:14">QP</name><init pos:start="407:15" pos:end="407:16">=<expr pos:start="407:16" pos:end="407:16"><literal type="number" pos:start="407:16" pos:end="407:16">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="409:9" pos:end="411:48">/* can we mess with a 8x16 block from srcBlock/dstBlock downwards and 1 line upwards

           if not than use a temporary buffer */</comment>

        <if_stmt pos:start="413:9" pos:end="453:9"><if pos:start="413:9" pos:end="453:9">if<condition pos:start="413:11" pos:end="413:26">(<expr pos:start="413:12" pos:end="413:25"><name pos:start="413:12" pos:end="413:12">y</name><operator pos:start="413:13" pos:end="413:13">+</operator><literal type="number" pos:start="413:14" pos:end="413:15">15</literal> <operator pos:start="413:17" pos:end="413:18">&gt;=</operator> <name pos:start="413:20" pos:end="413:25">height</name></expr>)</condition><block pos:start="413:27" pos:end="453:9">{<block_content pos:start="415:13" pos:end="451:30">

            <decl_stmt pos:start="415:13" pos:end="415:18"><decl pos:start="415:13" pos:end="415:17"><type pos:start="415:13" pos:end="415:15"><name pos:start="415:13" pos:end="415:15">int</name></type> <name pos:start="415:17" pos:end="415:17">i</name></decl>;</decl_stmt>

            <comment type="block" pos:start="417:13" pos:end="419:40">/* copy from line (copyAhead) to (copyAhead+7) of src, these will be copied with

               blockcopy to dst later */</comment>

            <expr_stmt pos:start="421:13" pos:end="423:61"><expr pos:start="421:13" pos:end="423:60"><call pos:start="421:13" pos:end="423:60"><name pos:start="421:13" pos:end="421:19">linecpy</name><argument_list pos:start="421:20" pos:end="423:60">(<argument pos:start="421:21" pos:end="421:49"><expr pos:start="421:21" pos:end="421:49"><name pos:start="421:21" pos:end="421:27">tempSrc</name> <operator pos:start="421:29" pos:end="421:29">+</operator> <name pos:start="421:31" pos:end="421:39">srcStride</name><operator pos:start="421:40" pos:end="421:40">*</operator><name pos:start="421:41" pos:end="421:49">copyAhead</name></expr></argument>, <argument pos:start="421:52" pos:end="421:81"><expr pos:start="421:52" pos:end="421:81"><name pos:start="421:52" pos:end="421:59">srcBlock</name> <operator pos:start="421:61" pos:end="421:61">+</operator> <name pos:start="421:63" pos:end="421:71">srcStride</name><operator pos:start="421:72" pos:end="421:72">*</operator><name pos:start="421:73" pos:end="421:81">copyAhead</name></expr></argument>,

                    <argument pos:start="423:21" pos:end="423:48"><expr pos:start="423:21" pos:end="423:48"><call pos:start="423:21" pos:end="423:48"><name pos:start="423:21" pos:end="423:25">FFMAX</name><argument_list pos:start="423:26" pos:end="423:48">(<argument pos:start="423:27" pos:end="423:44"><expr pos:start="423:27" pos:end="423:44"><name pos:start="423:27" pos:end="423:32">height</name><operator pos:start="423:33" pos:end="423:33">-</operator><name pos:start="423:34" pos:end="423:34">y</name><operator pos:start="423:35" pos:end="423:35">-</operator><name pos:start="423:36" pos:end="423:44">copyAhead</name></expr></argument>, <argument pos:start="423:47" pos:end="423:47"><expr pos:start="423:47" pos:end="423:47"><literal type="number" pos:start="423:47" pos:end="423:47">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="423:51" pos:end="423:59"><expr pos:start="423:51" pos:end="423:59"><name pos:start="423:51" pos:end="423:59">srcStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="427:13" pos:end="427:86">/* duplicate last line of src to fill the void up to line (copyAhead+7) */</comment>

            <for pos:start="429:13" pos:end="431:96">for<control pos:start="429:16" pos:end="429:57">(<init pos:start="429:17" pos:end="429:37"><expr pos:start="429:17" pos:end="429:36"><name pos:start="429:17" pos:end="429:17">i</name><operator pos:start="429:18" pos:end="429:18">=</operator><call pos:start="429:19" pos:end="429:36"><name pos:start="429:19" pos:end="429:23">FFMAX</name><argument_list pos:start="429:24" pos:end="429:36">(<argument pos:start="429:25" pos:end="429:32"><expr pos:start="429:25" pos:end="429:32"><name pos:start="429:25" pos:end="429:30">height</name><operator pos:start="429:31" pos:end="429:31">-</operator><name pos:start="429:32" pos:end="429:32">y</name></expr></argument>, <argument pos:start="429:35" pos:end="429:35"><expr pos:start="429:35" pos:end="429:35"><literal type="number" pos:start="429:35" pos:end="429:35">8</literal></expr></argument>)</argument_list></call></expr>;</init> <condition pos:start="429:39" pos:end="429:52"><expr pos:start="429:39" pos:end="429:51"><name pos:start="429:39" pos:end="429:39">i</name><operator pos:start="429:40" pos:end="429:40">&lt;</operator><name pos:start="429:41" pos:end="429:49">copyAhead</name><operator pos:start="429:50" pos:end="429:50">+</operator><literal type="number" pos:start="429:51" pos:end="429:51">8</literal></expr>;</condition> <incr pos:start="429:54" pos:end="429:56"><expr pos:start="429:54" pos:end="429:56"><name pos:start="429:54" pos:end="429:54">i</name><operator pos:start="429:55" pos:end="429:56">++</operator></expr></incr>)</control><block type="pseudo" pos:start="431:21" pos:end="431:96"><block_content pos:start="431:21" pos:end="431:96">

                    <expr_stmt pos:start="431:21" pos:end="431:96"><expr pos:start="431:21" pos:end="431:95"><call pos:start="431:21" pos:end="431:95"><name pos:start="431:21" pos:end="431:26">memcpy</name><argument_list pos:start="431:27" pos:end="431:95">(<argument pos:start="431:28" pos:end="431:48"><expr pos:start="431:28" pos:end="431:48"><name pos:start="431:28" pos:end="431:34">tempSrc</name> <operator pos:start="431:36" pos:end="431:36">+</operator> <name pos:start="431:38" pos:end="431:46">srcStride</name><operator pos:start="431:47" pos:end="431:47">*</operator><name pos:start="431:48" pos:end="431:48">i</name></expr></argument>, <argument pos:start="431:51" pos:end="431:76"><expr pos:start="431:51" pos:end="431:76"><name pos:start="431:51" pos:end="431:53">src</name> <operator pos:start="431:55" pos:end="431:55">+</operator> <name pos:start="431:57" pos:end="431:65">srcStride</name><operator pos:start="431:66" pos:end="431:66">*</operator><operator pos:start="431:67" pos:end="431:67">(</operator><name pos:start="431:68" pos:end="431:73">height</name><operator pos:start="431:74" pos:end="431:74">-</operator><literal type="number" pos:start="431:75" pos:end="431:75">1</literal><operator pos:start="431:76" pos:end="431:76">)</operator></expr></argument>, <argument pos:start="431:79" pos:end="431:94"><expr pos:start="431:79" pos:end="431:94"><call pos:start="431:79" pos:end="431:94"><name pos:start="431:79" pos:end="431:83">FFABS</name><argument_list pos:start="431:84" pos:end="431:94">(<argument pos:start="431:85" pos:end="431:93"><expr pos:start="431:85" pos:end="431:93"><name pos:start="431:85" pos:end="431:93">srcStride</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



            <comment type="block" pos:start="435:13" pos:end="435:81">/* copy up to (copyAhead+1) lines of dst (line -1 to (copyAhead-1))*/</comment>

            <expr_stmt pos:start="437:13" pos:end="437:94"><expr pos:start="437:13" pos:end="437:93"><call pos:start="437:13" pos:end="437:93"><name pos:start="437:13" pos:end="437:19">linecpy</name><argument_list pos:start="437:20" pos:end="437:93">(<argument pos:start="437:21" pos:end="437:27"><expr pos:start="437:21" pos:end="437:27"><name pos:start="437:21" pos:end="437:27">tempDst</name></expr></argument>, <argument pos:start="437:30" pos:end="437:49"><expr pos:start="437:30" pos:end="437:49"><name pos:start="437:30" pos:end="437:37">dstBlock</name> <operator pos:start="437:39" pos:end="437:39">-</operator> <name pos:start="437:41" pos:end="437:49">dstStride</name></expr></argument>, <argument pos:start="437:52" pos:end="437:81"><expr pos:start="437:52" pos:end="437:81"><call pos:start="437:52" pos:end="437:81"><name pos:start="437:52" pos:end="437:56">FFMIN</name><argument_list pos:start="437:57" pos:end="437:81">(<argument pos:start="437:58" pos:end="437:67"><expr pos:start="437:58" pos:end="437:67"><name pos:start="437:58" pos:end="437:63">height</name><operator pos:start="437:64" pos:end="437:64">-</operator><name pos:start="437:65" pos:end="437:65">y</name><operator pos:start="437:66" pos:end="437:66">+</operator><literal type="number" pos:start="437:67" pos:end="437:67">1</literal></expr></argument>, <argument pos:start="437:70" pos:end="437:80"><expr pos:start="437:70" pos:end="437:80"><name pos:start="437:70" pos:end="437:78">copyAhead</name><operator pos:start="437:79" pos:end="437:79">+</operator><literal type="number" pos:start="437:80" pos:end="437:80">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="437:84" pos:end="437:92"><expr pos:start="437:84" pos:end="437:92"><name pos:start="437:84" pos:end="437:92">dstStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="441:13" pos:end="441:84">/* duplicate last line of dst to fill the void up to line (copyAhead) */</comment>

            <for pos:start="443:13" pos:end="445:96">for<control pos:start="443:16" pos:end="443:48">(<init pos:start="443:17" pos:end="443:29"><expr pos:start="443:17" pos:end="443:28"><name pos:start="443:17" pos:end="443:17">i</name><operator pos:start="443:18" pos:end="443:18">=</operator><name pos:start="443:19" pos:end="443:24">height</name><operator pos:start="443:25" pos:end="443:25">-</operator><name pos:start="443:26" pos:end="443:26">y</name><operator pos:start="443:27" pos:end="443:27">+</operator><literal type="number" pos:start="443:28" pos:end="443:28">1</literal></expr>;</init> <condition pos:start="443:31" pos:end="443:43"><expr pos:start="443:31" pos:end="443:42"><name pos:start="443:31" pos:end="443:31">i</name><operator pos:start="443:32" pos:end="443:33">&lt;=</operator><name pos:start="443:34" pos:end="443:42">copyAhead</name></expr>;</condition> <incr pos:start="443:45" pos:end="443:47"><expr pos:start="443:45" pos:end="443:47"><name pos:start="443:45" pos:end="443:45">i</name><operator pos:start="443:46" pos:end="443:47">++</operator></expr></incr>)</control><block type="pseudo" pos:start="445:21" pos:end="445:96"><block_content pos:start="445:21" pos:end="445:96">

                    <expr_stmt pos:start="445:21" pos:end="445:96"><expr pos:start="445:21" pos:end="445:95"><call pos:start="445:21" pos:end="445:95"><name pos:start="445:21" pos:end="445:26">memcpy</name><argument_list pos:start="445:27" pos:end="445:95">(<argument pos:start="445:28" pos:end="445:48"><expr pos:start="445:28" pos:end="445:48"><name pos:start="445:28" pos:end="445:34">tempDst</name> <operator pos:start="445:36" pos:end="445:36">+</operator> <name pos:start="445:38" pos:end="445:46">dstStride</name><operator pos:start="445:47" pos:end="445:47">*</operator><name pos:start="445:48" pos:end="445:48">i</name></expr></argument>, <argument pos:start="445:51" pos:end="445:76"><expr pos:start="445:51" pos:end="445:76"><name pos:start="445:51" pos:end="445:53">dst</name> <operator pos:start="445:55" pos:end="445:55">+</operator> <name pos:start="445:57" pos:end="445:65">dstStride</name><operator pos:start="445:66" pos:end="445:66">*</operator><operator pos:start="445:67" pos:end="445:67">(</operator><name pos:start="445:68" pos:end="445:73">height</name><operator pos:start="445:74" pos:end="445:74">-</operator><literal type="number" pos:start="445:75" pos:end="445:75">1</literal><operator pos:start="445:76" pos:end="445:76">)</operator></expr></argument>, <argument pos:start="445:79" pos:end="445:94"><expr pos:start="445:79" pos:end="445:94"><call pos:start="445:79" pos:end="445:94"><name pos:start="445:79" pos:end="445:83">FFABS</name><argument_list pos:start="445:84" pos:end="445:94">(<argument pos:start="445:85" pos:end="445:93"><expr pos:start="445:85" pos:end="445:93"><name pos:start="445:85" pos:end="445:93">dstStride</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



            <expr_stmt pos:start="449:13" pos:end="449:42"><expr pos:start="449:13" pos:end="449:41"><name pos:start="449:13" pos:end="449:20">dstBlock</name><operator pos:start="449:21" pos:end="449:21">=</operator> <name pos:start="449:23" pos:end="449:29">tempDst</name> <operator pos:start="449:31" pos:end="449:31">+</operator> <name pos:start="449:33" pos:end="449:41">dstStride</name></expr>;</expr_stmt>

            <expr_stmt pos:start="451:13" pos:end="451:30"><expr pos:start="451:13" pos:end="451:29"><name pos:start="451:13" pos:end="451:20">srcBlock</name><operator pos:start="451:21" pos:end="451:21">=</operator> <name pos:start="451:23" pos:end="451:29">tempSrc</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="457:9" pos:end="457:91">// From this point on it is guaranteed that we can read and write 16 lines downward</comment>

        <comment type="line" pos:start="459:9" pos:end="459:75">// finish 1 block before the next otherwise we might have a problem</comment>

        <comment type="line" pos:start="461:9" pos:end="461:86">// with the L1 Cache of the P4 ... or only a few blocks at a time or something</comment>

        <for pos:start="463:9" pos:end="811:9">for<control pos:start="463:12" pos:end="463:40">(<init pos:start="463:13" pos:end="463:16"><expr pos:start="463:13" pos:end="463:15"><name pos:start="463:13" pos:end="463:13">x</name><operator pos:start="463:14" pos:end="463:14">=</operator><literal type="number" pos:start="463:15" pos:end="463:15">0</literal></expr>;</init> <condition pos:start="463:18" pos:end="463:25"><expr pos:start="463:18" pos:end="463:24"><name pos:start="463:18" pos:end="463:18">x</name><operator pos:start="463:19" pos:end="463:19">&lt;</operator><name pos:start="463:20" pos:end="463:24">width</name></expr>;</condition> <incr pos:start="463:27" pos:end="463:39"><expr pos:start="463:27" pos:end="463:39"><name pos:start="463:27" pos:end="463:27">x</name><operator pos:start="463:28" pos:end="463:29">+=</operator><name pos:start="463:30" pos:end="463:39">BLOCK_SIZE</name></expr></incr>)</control><block pos:start="463:41" pos:end="811:9">{<block_content pos:start="465:13" pos:end="810:0">

            <decl_stmt pos:start="465:13" pos:end="468:0"><decl pos:start="465:13" pos:end="465:39"><type pos:start="465:13" pos:end="465:21"><specifier pos:start="465:13" pos:end="465:17">const</specifier> <name pos:start="465:19" pos:end="465:21">int</name></type> <name pos:start="465:23" pos:end="465:28">stride</name><init pos:start="465:29" pos:end="465:39">= <expr pos:start="465:31" pos:end="465:39"><name pos:start="465:31" pos:end="465:39">dstStride</name></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="467:1" pos:end="467:19">#<cpp:directive pos:start="467:2" pos:end="467:3">if</cpp:directive> <expr pos:start="467:5" pos:end="467:19"><name pos:start="467:5" pos:end="467:19">TEMPLATE_PP_MMX</name></expr></cpp:if>

            <decl_stmt pos:start="469:13" pos:end="472:0"><decl pos:start="469:13" pos:end="469:28"><type pos:start="469:13" pos:end="469:21"><name pos:start="469:13" pos:end="469:19">uint8_t</name> <modifier pos:start="469:21" pos:end="469:21">*</modifier></type><name pos:start="469:22" pos:end="469:28">tmpXchg</name></decl>;</decl_stmt>

<cpp:endif pos:start="471:1" pos:end="471:6">#<cpp:directive pos:start="471:2" pos:end="471:6">endif</cpp:directive></cpp:endif>

            <if_stmt pos:start="473:13" pos:end="491:13"><if pos:start="473:13" pos:end="479:13">if<condition pos:start="473:15" pos:end="473:23">(<expr pos:start="473:16" pos:end="473:22"><name pos:start="473:16" pos:end="473:22">isColor</name></expr>)</condition><block pos:start="473:24" pos:end="479:13">{<block_content pos:start="475:17" pos:end="477:49">

                <expr_stmt pos:start="475:17" pos:end="475:39"><expr pos:start="475:17" pos:end="475:38"><name pos:start="475:17" pos:end="475:18">QP</name><operator pos:start="475:19" pos:end="475:19">=</operator> <name pos:start="475:21" pos:end="475:38"><name pos:start="475:21" pos:end="475:25">QPptr</name><index pos:start="475:26" pos:end="475:38">[<expr pos:start="475:27" pos:end="475:37"><name pos:start="475:27" pos:end="475:27">x</name><operator pos:start="475:28" pos:end="475:29">&gt;&gt;</operator><name pos:start="475:30" pos:end="475:37">qpHShift</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="477:17" pos:end="477:49"><expr pos:start="477:17" pos:end="477:48"><name pos:start="477:17" pos:end="477:24"><name pos:start="477:17" pos:end="477:17">c</name><operator pos:start="477:18" pos:end="477:18">.</operator><name pos:start="477:19" pos:end="477:24">nonBQP</name></name><operator pos:start="477:25" pos:end="477:25">=</operator> <name pos:start="477:27" pos:end="477:48"><name pos:start="477:27" pos:end="477:35">nonBQPptr</name><index pos:start="477:36" pos:end="477:48">[<expr pos:start="477:37" pos:end="477:47"><name pos:start="477:37" pos:end="477:37">x</name><operator pos:start="477:38" pos:end="477:39">&gt;&gt;</operator><name pos:start="477:40" pos:end="477:47">qpHShift</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if><else pos:start="479:14" pos:end="491:13">else<block pos:start="479:18" pos:end="491:13">{<block_content pos:start="481:17" pos:end="489:59">

                <expr_stmt pos:start="481:17" pos:end="481:32"><expr pos:start="481:17" pos:end="481:31"><name pos:start="481:17" pos:end="481:18">QP</name><operator pos:start="481:19" pos:end="481:19">=</operator> <name pos:start="481:21" pos:end="481:31"><name pos:start="481:21" pos:end="481:25">QPptr</name><index pos:start="481:26" pos:end="481:31">[<expr pos:start="481:27" pos:end="481:30"><name pos:start="481:27" pos:end="481:27">x</name><operator pos:start="481:28" pos:end="481:29">&gt;&gt;</operator><literal type="number" pos:start="481:30" pos:end="481:30">4</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="483:17" pos:end="483:53"><expr pos:start="483:17" pos:end="483:52"><name pos:start="483:17" pos:end="483:18">QP</name><operator pos:start="483:19" pos:end="483:19">=</operator> <operator pos:start="483:21" pos:end="483:21">(</operator><name pos:start="483:22" pos:end="483:23">QP</name><operator pos:start="483:24" pos:end="483:24">*</operator> <name pos:start="483:26" pos:end="483:37">QPCorrecture</name> <operator pos:start="483:39" pos:end="483:39">+</operator> <literal type="number" pos:start="483:41" pos:end="483:43">256</literal><operator pos:start="483:44" pos:end="483:44">*</operator><literal type="number" pos:start="483:45" pos:end="483:47">128</literal><operator pos:start="483:48" pos:end="483:48">)</operator><operator pos:start="483:49" pos:end="483:50">&gt;&gt;</operator><literal type="number" pos:start="483:51" pos:end="483:52">16</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="485:17" pos:end="485:42"><expr pos:start="485:17" pos:end="485:41"><name pos:start="485:17" pos:end="485:24"><name pos:start="485:17" pos:end="485:17">c</name><operator pos:start="485:18" pos:end="485:18">.</operator><name pos:start="485:19" pos:end="485:24">nonBQP</name></name><operator pos:start="485:25" pos:end="485:25">=</operator> <name pos:start="485:27" pos:end="485:41"><name pos:start="485:27" pos:end="485:35">nonBQPptr</name><index pos:start="485:36" pos:end="485:41">[<expr pos:start="485:37" pos:end="485:40"><name pos:start="485:37" pos:end="485:37">x</name><operator pos:start="485:38" pos:end="485:39">&gt;&gt;</operator><literal type="number" pos:start="485:40" pos:end="485:40">4</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="487:17" pos:end="487:65"><expr pos:start="487:17" pos:end="487:64"><name pos:start="487:17" pos:end="487:24"><name pos:start="487:17" pos:end="487:17">c</name><operator pos:start="487:18" pos:end="487:18">.</operator><name pos:start="487:19" pos:end="487:24">nonBQP</name></name><operator pos:start="487:25" pos:end="487:25">=</operator> <operator pos:start="487:27" pos:end="487:27">(</operator><name pos:start="487:28" pos:end="487:35"><name pos:start="487:28" pos:end="487:28">c</name><operator pos:start="487:29" pos:end="487:29">.</operator><name pos:start="487:30" pos:end="487:35">nonBQP</name></name><operator pos:start="487:36" pos:end="487:36">*</operator> <name pos:start="487:38" pos:end="487:49">QPCorrecture</name> <operator pos:start="487:51" pos:end="487:51">+</operator> <literal type="number" pos:start="487:53" pos:end="487:55">256</literal><operator pos:start="487:56" pos:end="487:56">*</operator><literal type="number" pos:start="487:57" pos:end="487:59">128</literal><operator pos:start="487:60" pos:end="487:60">)</operator><operator pos:start="487:61" pos:end="487:62">&gt;&gt;</operator><literal type="number" pos:start="487:63" pos:end="487:64">16</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="489:17" pos:end="489:59"><expr pos:start="489:17" pos:end="489:58"><name pos:start="489:17" pos:end="489:56"><name pos:start="489:17" pos:end="489:26">yHistogram</name><index pos:start="489:27" pos:end="489:56">[ <expr pos:start="489:29" pos:end="489:54"><name pos:start="489:29" pos:end="489:54"><name pos:start="489:29" pos:end="489:36">srcBlock</name><index pos:start="489:37" pos:end="489:54">[<expr pos:start="489:38" pos:end="489:53"><name pos:start="489:38" pos:end="489:46">srcStride</name><operator pos:start="489:47" pos:end="489:47">*</operator><literal type="number" pos:start="489:48" pos:end="489:49">12</literal> <operator pos:start="489:51" pos:end="489:51">+</operator> <literal type="number" pos:start="489:53" pos:end="489:53">4</literal></expr>]</index></name></expr> ]</index></name><operator pos:start="489:57" pos:end="489:58">++</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="493:13" pos:end="496:0"><expr pos:start="493:13" pos:end="493:20"><name pos:start="493:13" pos:end="493:16"><name pos:start="493:13" pos:end="493:13">c</name><operator pos:start="493:14" pos:end="493:14">.</operator><name pos:start="493:15" pos:end="493:16">QP</name></name><operator pos:start="493:17" pos:end="493:17">=</operator> <name pos:start="493:19" pos:end="493:20">QP</name></expr>;</expr_stmt>

<cpp:if pos:start="495:1" pos:end="495:19">#<cpp:directive pos:start="495:2" pos:end="495:3">if</cpp:directive> <expr pos:start="495:5" pos:end="495:19"><name pos:start="495:5" pos:end="495:19">TEMPLATE_PP_MMX</name></expr></cpp:if>

            <asm pos:start="497:13" pos:end="522:0">__asm__ <specifier pos:start="497:21" pos:end="497:28">volatile</specifier>(

                "movd %1, %%mm7         \n\t"

                "packuswb %%mm7, %%mm7  \n\t" <comment type="line" pos:start="501:47" pos:end="501:73">// 0, 0, 0, QP, 0, 0, 0, QP</comment>

                "packuswb %%mm7, %%mm7  \n\t" <comment type="line" pos:start="503:47" pos:end="503:73">// 0,QP, 0, QP, 0,QP, 0, QP</comment>

                "packuswb %%mm7, %%mm7  \n\t" <comment type="line" pos:start="505:47" pos:end="505:59">// QP,..., QP</comment>

                "movq %%mm7, %0         \n\t"

                : "=m" (c.pQPb)

                : "r" (QP)

            );</asm>

<cpp:endif pos:start="515:1" pos:end="515:6">#<cpp:directive pos:start="515:2" pos:end="515:6">endif</cpp:directive></cpp:endif>





<cpp:if pos:start="521:1" pos:end="521:36">#<cpp:directive pos:start="521:2" pos:end="521:3">if</cpp:directive> <expr pos:start="521:5" pos:end="521:36"><name pos:start="521:5" pos:end="521:22">TEMPLATE_PP_MMXEXT</name> <operator pos:start="521:24" pos:end="521:25">&amp;&amp;</operator> <name pos:start="521:27" pos:end="521:36">HAVE_6REGS</name></expr></cpp:if>

<comment type="block" pos:start="523:1" pos:end="533:2">/*

            prefetchnta(srcBlock + (((x&gt;&gt;2)&amp;6) + 5)*srcStride + 32);

            prefetchnta(srcBlock + (((x&gt;&gt;2)&amp;6) + 6)*srcStride + 32);

            prefetcht0(dstBlock + (((x&gt;&gt;2)&amp;6) + 5)*dstStride + 32);

            prefetcht0(dstBlock + (((x&gt;&gt;2)&amp;6) + 6)*dstStride + 32);

*/</comment>



            <asm pos:start="537:13" pos:end="590:0">__asm__(

                "mov %4, %%"REG_a"              \n\t"

                "shr $2, %%"REG_a"              \n\t"

                "and $6, %%"REG_a"              \n\t"

                "add %5, %%"REG_a"              \n\t"

                "mov %%"REG_a", %%"REG_d"       \n\t"

                "imul %1, %%"REG_a"             \n\t"

                "imul %3, %%"REG_d"             \n\t"

                "prefetchnta 32(%%"REG_a", %0)  \n\t"

                "prefetcht0 32(%%"REG_d", %2)   \n\t"

                "add %1, %%"REG_a"              \n\t"

                "add %3, %%"REG_d"              \n\t"

                "prefetchnta 32(%%"REG_a", %0)  \n\t"

                "prefetcht0 32(%%"REG_d", %2)   \n\t"

                :: "r" (srcBlock), "r" ((x86_reg)srcStride), "r" (dstBlock), "r" ((x86_reg)dstStride),

                "g" ((x86_reg)x), "g" ((x86_reg)copyAhead)

                : "%"REG_a, "%"REG_d

            );</asm>



<cpp:elif pos:start="575:1" pos:end="575:23">#<cpp:directive pos:start="575:2" pos:end="575:5">elif</cpp:directive> <expr pos:start="575:7" pos:end="575:23"><name pos:start="575:7" pos:end="575:23">TEMPLATE_PP_3DNOW</name></expr></cpp:elif>

<comment type="line" pos:start="577:1" pos:end="577:95">//FIXME check if this is faster on an 3dnow chip or if it is faster without the prefetch or ...</comment>

<comment type="block" pos:start="579:1" pos:end="587:2">/*          prefetch(srcBlock + (((x&gt;&gt;3)&amp;3) + 5)*srcStride + 32);

            prefetch(srcBlock + (((x&gt;&gt;3)&amp;3) + 9)*srcStride + 32);

            prefetchw(dstBlock + (((x&gt;&gt;3)&amp;3) + 5)*dstStride + 32);

            prefetchw(dstBlock + (((x&gt;&gt;3)&amp;3) + 9)*dstStride + 32);

*/</comment>

<cpp:endif pos:start="589:1" pos:end="589:6">#<cpp:directive pos:start="589:2" pos:end="589:6">endif</cpp:directive></cpp:endif>



            <expr_stmt pos:start="593:13" pos:end="595:109"><expr pos:start="593:13" pos:end="595:108"><call pos:start="593:13" pos:end="595:108"><call pos:start="593:13" pos:end="593:29"><name pos:start="593:13" pos:end="593:18">RENAME</name><argument_list pos:start="593:19" pos:end="593:29">(<argument pos:start="593:20" pos:end="593:28"><expr pos:start="593:20" pos:end="593:28"><name pos:start="593:20" pos:end="593:28">blockCopy</name></expr></argument>)</argument_list></call><argument_list pos:start="593:30" pos:end="595:108">(<argument pos:start="593:31" pos:end="593:60"><expr pos:start="593:31" pos:end="593:60"><name pos:start="593:31" pos:end="593:38">dstBlock</name> <operator pos:start="593:40" pos:end="593:40">+</operator> <name pos:start="593:42" pos:end="593:50">dstStride</name><operator pos:start="593:51" pos:end="593:51">*</operator><name pos:start="593:52" pos:end="593:60">copyAhead</name></expr></argument>, <argument pos:start="593:63" pos:end="593:71"><expr pos:start="593:63" pos:end="593:71"><name pos:start="593:63" pos:end="593:71">dstStride</name></expr></argument>,

                              <argument pos:start="595:31" pos:end="595:60"><expr pos:start="595:31" pos:end="595:60"><name pos:start="595:31" pos:end="595:38">srcBlock</name> <operator pos:start="595:40" pos:end="595:40">+</operator> <name pos:start="595:42" pos:end="595:50">srcStride</name><operator pos:start="595:51" pos:end="595:51">*</operator><name pos:start="595:52" pos:end="595:60">copyAhead</name></expr></argument>, <argument pos:start="595:63" pos:end="595:71"><expr pos:start="595:63" pos:end="595:71"><name pos:start="595:63" pos:end="595:71">srcStride</name></expr></argument>, <argument pos:start="595:74" pos:end="595:89"><expr pos:start="595:74" pos:end="595:89"><name pos:start="595:74" pos:end="595:77">mode</name> <operator pos:start="595:79" pos:end="595:79">&amp;</operator> <name pos:start="595:81" pos:end="595:89">LEVEL_FIX</name></expr></argument>, <argument pos:start="595:92" pos:end="595:107"><expr pos:start="595:92" pos:end="595:107"><operator pos:start="595:92" pos:end="595:92">&amp;</operator><name pos:start="595:93" pos:end="595:107"><name pos:start="595:93" pos:end="595:93">c</name><operator pos:start="595:94" pos:end="595:94">.</operator><name pos:start="595:95" pos:end="595:107">packedYOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="599:13" pos:end="621:101"><if pos:start="599:13" pos:end="601:74">if<condition pos:start="599:15" pos:end="599:47">(<expr pos:start="599:16" pos:end="599:46"><name pos:start="599:16" pos:end="599:19">mode</name> <operator pos:start="599:21" pos:end="599:21">&amp;</operator> <name pos:start="599:23" pos:end="599:46">LINEAR_IPOL_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="601:17" pos:end="601:74"><block_content pos:start="601:17" pos:end="601:74">

                <function_decl pos:start="601:17" pos:end="601:74"><type pos:start="601:17" pos:end="601:22"><name pos:start="601:17" pos:end="601:22">RENAME</name></type>(<name pos:start="601:24" pos:end="601:51">deInterlaceInterpolateLinear</name>)<parameter_list pos:start="601:53" pos:end="601:73">(<parameter pos:start="601:54" pos:end="601:61"><decl pos:start="601:54" pos:end="601:61"><type pos:start="601:54" pos:end="601:61"><name pos:start="601:54" pos:end="601:61">dstBlock</name></type></decl></parameter>, <parameter pos:start="601:64" pos:end="601:72"><decl pos:start="601:64" pos:end="601:72"><type pos:start="601:64" pos:end="601:72"><name pos:start="601:64" pos:end="601:72">dstStride</name></type></decl></parameter>)</parameter_list>;</function_decl></block_content></block></if>

            <if type="elseif" pos:start="603:13" pos:end="605:85">else if<condition pos:start="603:20" pos:end="603:53">(<expr pos:start="603:21" pos:end="603:52"><name pos:start="603:21" pos:end="603:24">mode</name> <operator pos:start="603:26" pos:end="603:26">&amp;</operator> <name pos:start="603:28" pos:end="603:52">LINEAR_BLEND_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="605:17" pos:end="605:85"><block_content pos:start="605:17" pos:end="605:85">

                <expr_stmt pos:start="605:17" pos:end="605:85"><expr pos:start="605:17" pos:end="605:84"><call pos:start="605:17" pos:end="605:84"><call pos:start="605:17" pos:end="605:46"><name pos:start="605:17" pos:end="605:22">RENAME</name><argument_list pos:start="605:23" pos:end="605:46">(<argument pos:start="605:24" pos:end="605:45"><expr pos:start="605:24" pos:end="605:45"><name pos:start="605:24" pos:end="605:45">deInterlaceBlendLinear</name></expr></argument>)</argument_list></call><argument_list pos:start="605:47" pos:end="605:84">(<argument pos:start="605:48" pos:end="605:55"><expr pos:start="605:48" pos:end="605:55"><name pos:start="605:48" pos:end="605:55">dstBlock</name></expr></argument>, <argument pos:start="605:58" pos:end="605:66"><expr pos:start="605:58" pos:end="605:66"><name pos:start="605:58" pos:end="605:66">dstStride</name></expr></argument>, <argument pos:start="605:69" pos:end="605:83"><expr pos:start="605:69" pos:end="605:83"><name pos:start="605:69" pos:end="605:79"><name pos:start="605:69" pos:end="605:69">c</name><operator pos:start="605:70" pos:end="605:70">.</operator><name pos:start="605:71" pos:end="605:79">deintTemp</name></name> <operator pos:start="605:81" pos:end="605:81">+</operator> <name pos:start="605:83" pos:end="605:83">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="607:13" pos:end="609:63">else if<condition pos:start="607:20" pos:end="607:47">(<expr pos:start="607:21" pos:end="607:46"><name pos:start="607:21" pos:end="607:24">mode</name> <operator pos:start="607:26" pos:end="607:26">&amp;</operator> <name pos:start="607:28" pos:end="607:46">MEDIAN_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="609:17" pos:end="609:63"><block_content pos:start="609:17" pos:end="609:63">

                <function_decl pos:start="609:17" pos:end="609:63"><type pos:start="609:17" pos:end="609:22"><name pos:start="609:17" pos:end="609:22">RENAME</name></type>(<name pos:start="609:24" pos:end="609:40">deInterlaceMedian</name>)<parameter_list pos:start="609:42" pos:end="609:62">(<parameter pos:start="609:43" pos:end="609:50"><decl pos:start="609:43" pos:end="609:50"><type pos:start="609:43" pos:end="609:50"><name pos:start="609:43" pos:end="609:50">dstBlock</name></type></decl></parameter>, <parameter pos:start="609:53" pos:end="609:61"><decl pos:start="609:53" pos:end="609:61"><type pos:start="609:53" pos:end="609:61"><name pos:start="609:53" pos:end="609:61">dstStride</name></type></decl></parameter>)</parameter_list>;</function_decl></block_content></block></if>

            <if type="elseif" pos:start="611:13" pos:end="613:73">else if<condition pos:start="611:20" pos:end="611:51">(<expr pos:start="611:21" pos:end="611:50"><name pos:start="611:21" pos:end="611:24">mode</name> <operator pos:start="611:26" pos:end="611:26">&amp;</operator> <name pos:start="611:28" pos:end="611:50">CUBIC_IPOL_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="613:17" pos:end="613:73"><block_content pos:start="613:17" pos:end="613:73">

                <function_decl pos:start="613:17" pos:end="613:73"><type pos:start="613:17" pos:end="613:22"><name pos:start="613:17" pos:end="613:22">RENAME</name></type>(<name pos:start="613:24" pos:end="613:50">deInterlaceInterpolateCubic</name>)<parameter_list pos:start="613:52" pos:end="613:72">(<parameter pos:start="613:53" pos:end="613:60"><decl pos:start="613:53" pos:end="613:60"><type pos:start="613:53" pos:end="613:60"><name pos:start="613:53" pos:end="613:60">dstBlock</name></type></decl></parameter>, <parameter pos:start="613:63" pos:end="613:71"><decl pos:start="613:63" pos:end="613:71"><type pos:start="613:63" pos:end="613:71"><name pos:start="613:63" pos:end="613:71">dstStride</name></type></decl></parameter>)</parameter_list>;</function_decl></block_content></block></if>

            <if type="elseif" pos:start="615:13" pos:end="617:76">else if<condition pos:start="615:20" pos:end="615:47">(<expr pos:start="615:21" pos:end="615:46"><name pos:start="615:21" pos:end="615:24">mode</name> <operator pos:start="615:26" pos:end="615:26">&amp;</operator> <name pos:start="615:28" pos:end="615:46">FFMPEG_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="617:17" pos:end="617:76"><block_content pos:start="617:17" pos:end="617:76">

                <expr_stmt pos:start="617:17" pos:end="617:76"><expr pos:start="617:17" pos:end="617:75"><call pos:start="617:17" pos:end="617:75"><call pos:start="617:17" pos:end="617:37"><name pos:start="617:17" pos:end="617:22">RENAME</name><argument_list pos:start="617:23" pos:end="617:37">(<argument pos:start="617:24" pos:end="617:36"><expr pos:start="617:24" pos:end="617:36"><name pos:start="617:24" pos:end="617:36">deInterlaceFF</name></expr></argument>)</argument_list></call><argument_list pos:start="617:38" pos:end="617:75">(<argument pos:start="617:39" pos:end="617:46"><expr pos:start="617:39" pos:end="617:46"><name pos:start="617:39" pos:end="617:46">dstBlock</name></expr></argument>, <argument pos:start="617:49" pos:end="617:57"><expr pos:start="617:49" pos:end="617:57"><name pos:start="617:49" pos:end="617:57">dstStride</name></expr></argument>, <argument pos:start="617:60" pos:end="617:74"><expr pos:start="617:60" pos:end="617:74"><name pos:start="617:60" pos:end="617:70"><name pos:start="617:60" pos:end="617:60">c</name><operator pos:start="617:61" pos:end="617:61">.</operator><name pos:start="617:62" pos:end="617:70">deintTemp</name></name> <operator pos:start="617:72" pos:end="617:72">+</operator> <name pos:start="617:74" pos:end="617:74">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="619:13" pos:end="621:101">else if<condition pos:start="619:20" pos:end="619:49">(<expr pos:start="619:21" pos:end="619:48"><name pos:start="619:21" pos:end="619:24">mode</name> <operator pos:start="619:26" pos:end="619:26">&amp;</operator> <name pos:start="619:28" pos:end="619:48">LOWPASS5_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="621:17" pos:end="621:101"><block_content pos:start="621:17" pos:end="621:101">

                <expr_stmt pos:start="621:17" pos:end="621:101"><expr pos:start="621:17" pos:end="621:100"><call pos:start="621:17" pos:end="621:100"><call pos:start="621:17" pos:end="621:37"><name pos:start="621:17" pos:end="621:22">RENAME</name><argument_list pos:start="621:23" pos:end="621:37">(<argument pos:start="621:24" pos:end="621:36"><expr pos:start="621:24" pos:end="621:36"><name pos:start="621:24" pos:end="621:36">deInterlaceL5</name></expr></argument>)</argument_list></call><argument_list pos:start="621:38" pos:end="621:100">(<argument pos:start="621:39" pos:end="621:46"><expr pos:start="621:39" pos:end="621:46"><name pos:start="621:39" pos:end="621:46">dstBlock</name></expr></argument>, <argument pos:start="621:49" pos:end="621:57"><expr pos:start="621:49" pos:end="621:57"><name pos:start="621:49" pos:end="621:57">dstStride</name></expr></argument>, <argument pos:start="621:60" pos:end="621:74"><expr pos:start="621:60" pos:end="621:74"><name pos:start="621:60" pos:end="621:70"><name pos:start="621:60" pos:end="621:60">c</name><operator pos:start="621:61" pos:end="621:61">.</operator><name pos:start="621:62" pos:end="621:70">deintTemp</name></name> <operator pos:start="621:72" pos:end="621:72">+</operator> <name pos:start="621:74" pos:end="621:74">x</name></expr></argument>, <argument pos:start="621:77" pos:end="621:99"><expr pos:start="621:77" pos:end="621:99"><name pos:start="621:77" pos:end="621:87"><name pos:start="621:77" pos:end="621:77">c</name><operator pos:start="621:78" pos:end="621:78">.</operator><name pos:start="621:79" pos:end="621:87">deintTemp</name></name> <operator pos:start="621:89" pos:end="621:89">+</operator> <name pos:start="621:91" pos:end="621:95">width</name> <operator pos:start="621:97" pos:end="621:97">+</operator> <name pos:start="621:99" pos:end="621:99">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<comment type="block" pos:start="623:1" pos:end="627:2">/*          else if(mode &amp; CUBIC_BLEND_DEINT_FILTER)

                RENAME(deInterlaceBlendCubic)(dstBlock, dstStride);

*/</comment>



            <comment type="block" pos:start="631:13" pos:end="631:50">/* only deblock if we have 2 blocks */</comment>

            <if_stmt pos:start="633:13" pos:end="664:0"><if pos:start="633:13" pos:end="664:0">if<condition pos:start="633:15" pos:end="633:30">(<expr pos:start="633:16" pos:end="633:29"><name pos:start="633:16" pos:end="633:16">y</name> <operator pos:start="633:18" pos:end="633:18">+</operator> <literal type="number" pos:start="633:20" pos:end="633:20">8</literal> <operator pos:start="633:22" pos:end="633:22">&lt;</operator> <name pos:start="633:24" pos:end="633:29">height</name></expr>)</condition><block pos:start="633:31" pos:end="664:0">{<block_content pos:start="635:17" pos:end="657:17">

                <if_stmt pos:start="635:17" pos:end="657:17"><if pos:start="635:17" pos:end="637:63">if<condition pos:start="635:19" pos:end="635:38">(<expr pos:start="635:20" pos:end="635:37"><name pos:start="635:20" pos:end="635:23">mode</name> <operator pos:start="635:25" pos:end="635:25">&amp;</operator> <name pos:start="635:27" pos:end="635:37">V_X1_FILTER</name></expr>)</condition><block type="pseudo" pos:start="637:21" pos:end="637:63"><block_content pos:start="637:21" pos:end="637:63">

                    <expr_stmt pos:start="637:21" pos:end="637:63"><expr pos:start="637:21" pos:end="637:62"><call pos:start="637:21" pos:end="637:62"><call pos:start="637:21" pos:end="637:40"><name pos:start="637:21" pos:end="637:26">RENAME</name><argument_list pos:start="637:27" pos:end="637:40">(<argument pos:start="637:28" pos:end="637:39"><expr pos:start="637:28" pos:end="637:39"><name pos:start="637:28" pos:end="637:39">vertX1Filter</name></expr></argument>)</argument_list></call><argument_list pos:start="637:41" pos:end="637:62">(<argument pos:start="637:42" pos:end="637:49"><expr pos:start="637:42" pos:end="637:49"><name pos:start="637:42" pos:end="637:49">dstBlock</name></expr></argument>, <argument pos:start="637:52" pos:end="637:57"><expr pos:start="637:52" pos:end="637:57"><name pos:start="637:52" pos:end="637:57">stride</name></expr></argument>, <argument pos:start="637:60" pos:end="637:61"><expr pos:start="637:60" pos:end="637:61"><operator pos:start="637:60" pos:end="637:60">&amp;</operator><name pos:start="637:61" pos:end="637:61">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="639:17" pos:end="653:17">else if<condition pos:start="639:24" pos:end="639:41">(<expr pos:start="639:25" pos:end="639:40"><name pos:start="639:25" pos:end="639:28">mode</name> <operator pos:start="639:30" pos:end="639:30">&amp;</operator> <name pos:start="639:32" pos:end="639:40">V_DEBLOCK</name></expr>)</condition><block pos:start="639:42" pos:end="653:17">{<block_content pos:start="641:21" pos:end="651:70">

                    <decl_stmt pos:start="641:21" pos:end="641:76"><decl pos:start="641:21" pos:end="641:75"><type pos:start="641:21" pos:end="641:29"><specifier pos:start="641:21" pos:end="641:25">const</specifier> <name pos:start="641:27" pos:end="641:29">int</name></type> <name pos:start="641:31" pos:end="641:31">t</name><init pos:start="641:32" pos:end="641:75">= <expr pos:start="641:34" pos:end="641:75"><call pos:start="641:34" pos:end="641:75"><call pos:start="641:34" pos:end="641:53"><name pos:start="641:34" pos:end="641:39">RENAME</name><argument_list pos:start="641:40" pos:end="641:53">(<argument pos:start="641:41" pos:end="641:52"><expr pos:start="641:41" pos:end="641:52"><name pos:start="641:41" pos:end="641:52">vertClassify</name></expr></argument>)</argument_list></call><argument_list pos:start="641:54" pos:end="641:75">(<argument pos:start="641:55" pos:end="641:62"><expr pos:start="641:55" pos:end="641:62"><name pos:start="641:55" pos:end="641:62">dstBlock</name></expr></argument>, <argument pos:start="641:65" pos:end="641:70"><expr pos:start="641:65" pos:end="641:70"><name pos:start="641:65" pos:end="641:70">stride</name></expr></argument>, <argument pos:start="641:73" pos:end="641:74"><expr pos:start="641:73" pos:end="641:74"><operator pos:start="641:73" pos:end="641:73">&amp;</operator><name pos:start="641:74" pos:end="641:74">c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                    <if_stmt pos:start="645:21" pos:end="651:70"><if pos:start="645:21" pos:end="647:68">if<condition pos:start="645:23" pos:end="645:28">(<expr pos:start="645:24" pos:end="645:27"><name pos:start="645:24" pos:end="645:24">t</name><operator pos:start="645:25" pos:end="645:26">==</operator><literal type="number" pos:start="645:27" pos:end="645:27">1</literal></expr>)</condition><block type="pseudo" pos:start="647:25" pos:end="647:68"><block_content pos:start="647:25" pos:end="647:68">

                        <expr_stmt pos:start="647:25" pos:end="647:68"><expr pos:start="647:25" pos:end="647:67"><call pos:start="647:25" pos:end="647:67"><call pos:start="647:25" pos:end="647:45"><name pos:start="647:25" pos:end="647:30">RENAME</name><argument_list pos:start="647:31" pos:end="647:45">(<argument pos:start="647:32" pos:end="647:44"><expr pos:start="647:32" pos:end="647:44"><name pos:start="647:32" pos:end="647:44">doVertLowPass</name></expr></argument>)</argument_list></call><argument_list pos:start="647:46" pos:end="647:67">(<argument pos:start="647:47" pos:end="647:54"><expr pos:start="647:47" pos:end="647:54"><name pos:start="647:47" pos:end="647:54">dstBlock</name></expr></argument>, <argument pos:start="647:57" pos:end="647:62"><expr pos:start="647:57" pos:end="647:62"><name pos:start="647:57" pos:end="647:62">stride</name></expr></argument>, <argument pos:start="647:65" pos:end="647:66"><expr pos:start="647:65" pos:end="647:66"><operator pos:start="647:65" pos:end="647:65">&amp;</operator><name pos:start="647:66" pos:end="647:66">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="649:21" pos:end="651:70">else if<condition pos:start="649:28" pos:end="649:33">(<expr pos:start="649:29" pos:end="649:32"><name pos:start="649:29" pos:end="649:29">t</name><operator pos:start="649:30" pos:end="649:31">==</operator><literal type="number" pos:start="649:32" pos:end="649:32">2</literal></expr>)</condition><block type="pseudo" pos:start="651:25" pos:end="651:70"><block_content pos:start="651:25" pos:end="651:70">

                        <expr_stmt pos:start="651:25" pos:end="651:70"><expr pos:start="651:25" pos:end="651:69"><call pos:start="651:25" pos:end="651:69"><call pos:start="651:25" pos:end="651:47"><name pos:start="651:25" pos:end="651:30">RENAME</name><argument_list pos:start="651:31" pos:end="651:47">(<argument pos:start="651:32" pos:end="651:46"><expr pos:start="651:32" pos:end="651:46"><name pos:start="651:32" pos:end="651:46">doVertDefFilter</name></expr></argument>)</argument_list></call><argument_list pos:start="651:48" pos:end="651:69">(<argument pos:start="651:49" pos:end="651:56"><expr pos:start="651:49" pos:end="651:56"><name pos:start="651:49" pos:end="651:56">dstBlock</name></expr></argument>, <argument pos:start="651:59" pos:end="651:64"><expr pos:start="651:59" pos:end="651:64"><name pos:start="651:59" pos:end="651:64">stride</name></expr></argument>, <argument pos:start="651:67" pos:end="651:68"><expr pos:start="651:67" pos:end="651:68"><operator pos:start="651:67" pos:end="651:67">&amp;</operator><name pos:start="651:68" pos:end="651:68">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if><if type="elseif" pos:start="653:18" pos:end="657:17">else if<condition pos:start="653:25" pos:end="653:44">(<expr pos:start="653:26" pos:end="653:43"><name pos:start="653:26" pos:end="653:29">mode</name> <operator pos:start="653:31" pos:end="653:31">&amp;</operator> <name pos:start="653:33" pos:end="653:43">V_A_DEBLOCK</name></expr>)</condition><block pos:start="653:45" pos:end="657:17">{<block_content pos:start="655:21" pos:end="655:72">

                    <expr_stmt pos:start="655:21" pos:end="655:72"><expr pos:start="655:21" pos:end="655:71"><call pos:start="655:21" pos:end="655:71"><call pos:start="655:21" pos:end="655:40"><name pos:start="655:21" pos:end="655:26">RENAME</name><argument_list pos:start="655:27" pos:end="655:40">(<argument pos:start="655:28" pos:end="655:39"><expr pos:start="655:28" pos:end="655:39"><name pos:start="655:28" pos:end="655:39">do_a_deblock</name></expr></argument>)</argument_list></call><argument_list pos:start="655:41" pos:end="655:71">(<argument pos:start="655:42" pos:end="655:49"><expr pos:start="655:42" pos:end="655:49"><name pos:start="655:42" pos:end="655:49">dstBlock</name></expr></argument>, <argument pos:start="655:52" pos:end="655:57"><expr pos:start="655:52" pos:end="655:57"><name pos:start="655:52" pos:end="655:57">stride</name></expr></argument>, <argument pos:start="655:60" pos:end="655:60"><expr pos:start="655:60" pos:end="655:60"><literal type="number" pos:start="655:60" pos:end="655:60">1</literal></expr></argument>, <argument pos:start="655:63" pos:end="655:64"><expr pos:start="655:63" pos:end="655:64"><operator pos:start="655:63" pos:end="655:63">&amp;</operator><name pos:start="655:64" pos:end="655:64">c</name></expr></argument>, <argument pos:start="655:67" pos:end="655:70"><expr pos:start="655:67" pos:end="655:70"><name pos:start="655:67" pos:end="655:70">mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



<cpp:if pos:start="663:1" pos:end="663:19">#<cpp:directive pos:start="663:2" pos:end="663:3">if</cpp:directive> <expr pos:start="663:5" pos:end="663:19"><name pos:start="663:5" pos:end="663:19">TEMPLATE_PP_MMX</name></expr></cpp:if>

            <function_decl pos:start="665:13" pos:end="668:0"><type pos:start="665:13" pos:end="665:18"><name pos:start="665:13" pos:end="665:18">RENAME</name></type>(<name pos:start="665:20" pos:end="665:29">transpose1</name>)<parameter_list pos:start="665:31" pos:end="665:75">(<parameter pos:start="665:32" pos:end="665:41"><decl pos:start="665:32" pos:end="665:41"><type pos:start="665:32" pos:end="665:41"><name pos:start="665:32" pos:end="665:41">tempBlock1</name></type></decl></parameter>, <parameter pos:start="665:44" pos:end="665:53"><decl pos:start="665:44" pos:end="665:53"><type pos:start="665:44" pos:end="665:53"><name pos:start="665:44" pos:end="665:53">tempBlock2</name></type></decl></parameter>, <parameter pos:start="665:56" pos:end="665:63"><decl pos:start="665:56" pos:end="665:63"><type pos:start="665:56" pos:end="665:63"><name pos:start="665:56" pos:end="665:63">dstBlock</name></type></decl></parameter>, <parameter pos:start="665:66" pos:end="665:74"><decl pos:start="665:66" pos:end="665:74"><type pos:start="665:66" pos:end="665:74"><name pos:start="665:66" pos:end="665:74">dstStride</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif pos:start="667:1" pos:end="667:6">#<cpp:directive pos:start="667:2" pos:end="667:6">endif</cpp:directive></cpp:endif>

            <comment type="block" pos:start="669:13" pos:end="669:79">/* check if we have a previous block to deblock it with dstBlock */</comment>

            <if_stmt pos:start="671:13" pos:end="791:13"><if pos:start="671:13" pos:end="791:13">if<condition pos:start="671:15" pos:end="671:26">(<expr pos:start="671:16" pos:end="671:25"><name pos:start="671:16" pos:end="671:16">x</name> <operator pos:start="671:18" pos:end="671:18">-</operator> <literal type="number" pos:start="671:20" pos:end="671:20">8</literal> <operator pos:start="671:22" pos:end="671:23">&gt;=</operator> <literal type="number" pos:start="671:25" pos:end="671:25">0</literal></expr>)</condition><block pos:start="671:27" pos:end="791:13">{<block_content pos:start="675:17" pos:end="789:17">

<cpp:if pos:start="673:1" pos:end="673:19">#<cpp:directive pos:start="673:2" pos:end="673:3">if</cpp:directive> <expr pos:start="673:5" pos:end="673:19"><name pos:start="673:5" pos:end="673:19">TEMPLATE_PP_MMX</name></expr></cpp:if>

                <if_stmt pos:start="675:17" pos:end="699:17"><if pos:start="675:17" pos:end="677:65">if<condition pos:start="675:19" pos:end="675:38">(<expr pos:start="675:20" pos:end="675:37"><name pos:start="675:20" pos:end="675:23">mode</name> <operator pos:start="675:25" pos:end="675:25">&amp;</operator> <name pos:start="675:27" pos:end="675:37">H_X1_FILTER</name></expr>)</condition><block type="pseudo" pos:start="677:25" pos:end="677:65"><block_content pos:start="677:25" pos:end="677:65">

                        <expr_stmt pos:start="677:25" pos:end="677:65"><expr pos:start="677:25" pos:end="677:64"><call pos:start="677:25" pos:end="677:64"><call pos:start="677:25" pos:end="677:44"><name pos:start="677:25" pos:end="677:30">RENAME</name><argument_list pos:start="677:31" pos:end="677:44">(<argument pos:start="677:32" pos:end="677:43"><expr pos:start="677:32" pos:end="677:43"><name pos:start="677:32" pos:end="677:43">vertX1Filter</name></expr></argument>)</argument_list></call><argument_list pos:start="677:45" pos:end="677:64">(<argument pos:start="677:46" pos:end="677:55"><expr pos:start="677:46" pos:end="677:55"><name pos:start="677:46" pos:end="677:55">tempBlock1</name></expr></argument>, <argument pos:start="677:58" pos:end="677:59"><expr pos:start="677:58" pos:end="677:59"><literal type="number" pos:start="677:58" pos:end="677:59">16</literal></expr></argument>, <argument pos:start="677:62" pos:end="677:63"><expr pos:start="677:62" pos:end="677:63"><operator pos:start="677:62" pos:end="677:62">&amp;</operator><name pos:start="677:63" pos:end="677:63">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="679:17" pos:end="695:17">else if<condition pos:start="679:24" pos:end="679:41">(<expr pos:start="679:25" pos:end="679:40"><name pos:start="679:25" pos:end="679:28">mode</name> <operator pos:start="679:30" pos:end="679:30">&amp;</operator> <name pos:start="679:32" pos:end="679:40">H_DEBLOCK</name></expr>)</condition><block pos:start="679:42" pos:end="695:17">{<block_content pos:start="683:21" pos:end="693:68">

<comment type="line" pos:start="681:1" pos:end="681:13">//START_TIMER</comment>

                    <decl_stmt pos:start="683:21" pos:end="683:74"><decl pos:start="683:21" pos:end="683:73"><type pos:start="683:21" pos:end="683:29"><specifier pos:start="683:21" pos:end="683:25">const</specifier> <name pos:start="683:27" pos:end="683:29">int</name></type> <name pos:start="683:31" pos:end="683:31">t</name><init pos:start="683:32" pos:end="683:73">= <expr pos:start="683:34" pos:end="683:73"><call pos:start="683:34" pos:end="683:73"><call pos:start="683:34" pos:end="683:53"><name pos:start="683:34" pos:end="683:39">RENAME</name><argument_list pos:start="683:40" pos:end="683:53">(<argument pos:start="683:41" pos:end="683:52"><expr pos:start="683:41" pos:end="683:52"><name pos:start="683:41" pos:end="683:52">vertClassify</name></expr></argument>)</argument_list></call><argument_list pos:start="683:54" pos:end="683:73">(<argument pos:start="683:55" pos:end="683:64"><expr pos:start="683:55" pos:end="683:64"><name pos:start="683:55" pos:end="683:64">tempBlock1</name></expr></argument>, <argument pos:start="683:67" pos:end="683:68"><expr pos:start="683:67" pos:end="683:68"><literal type="number" pos:start="683:67" pos:end="683:68">16</literal></expr></argument>, <argument pos:start="683:71" pos:end="683:72"><expr pos:start="683:71" pos:end="683:72"><operator pos:start="683:71" pos:end="683:71">&amp;</operator><name pos:start="683:72" pos:end="683:72">c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<comment type="line" pos:start="685:1" pos:end="685:27">//STOP_TIMER("dc &amp; minmax")</comment>

                    <if_stmt pos:start="687:21" pos:end="693:68"><if pos:start="687:21" pos:end="689:66">if<condition pos:start="687:23" pos:end="687:28">(<expr pos:start="687:24" pos:end="687:27"><name pos:start="687:24" pos:end="687:24">t</name><operator pos:start="687:25" pos:end="687:26">==</operator><literal type="number" pos:start="687:27" pos:end="687:27">1</literal></expr>)</condition><block type="pseudo" pos:start="689:25" pos:end="689:66"><block_content pos:start="689:25" pos:end="689:66">

                        <expr_stmt pos:start="689:25" pos:end="689:66"><expr pos:start="689:25" pos:end="689:65"><call pos:start="689:25" pos:end="689:65"><call pos:start="689:25" pos:end="689:45"><name pos:start="689:25" pos:end="689:30">RENAME</name><argument_list pos:start="689:31" pos:end="689:45">(<argument pos:start="689:32" pos:end="689:44"><expr pos:start="689:32" pos:end="689:44"><name pos:start="689:32" pos:end="689:44">doVertLowPass</name></expr></argument>)</argument_list></call><argument_list pos:start="689:46" pos:end="689:65">(<argument pos:start="689:47" pos:end="689:56"><expr pos:start="689:47" pos:end="689:56"><name pos:start="689:47" pos:end="689:56">tempBlock1</name></expr></argument>, <argument pos:start="689:59" pos:end="689:60"><expr pos:start="689:59" pos:end="689:60"><literal type="number" pos:start="689:59" pos:end="689:60">16</literal></expr></argument>, <argument pos:start="689:63" pos:end="689:64"><expr pos:start="689:63" pos:end="689:64"><operator pos:start="689:63" pos:end="689:63">&amp;</operator><name pos:start="689:64" pos:end="689:64">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="691:21" pos:end="693:68">else if<condition pos:start="691:28" pos:end="691:33">(<expr pos:start="691:29" pos:end="691:32"><name pos:start="691:29" pos:end="691:29">t</name><operator pos:start="691:30" pos:end="691:31">==</operator><literal type="number" pos:start="691:32" pos:end="691:32">2</literal></expr>)</condition><block type="pseudo" pos:start="693:25" pos:end="693:68"><block_content pos:start="693:25" pos:end="693:68">

                        <expr_stmt pos:start="693:25" pos:end="693:68"><expr pos:start="693:25" pos:end="693:67"><call pos:start="693:25" pos:end="693:67"><call pos:start="693:25" pos:end="693:47"><name pos:start="693:25" pos:end="693:30">RENAME</name><argument_list pos:start="693:31" pos:end="693:47">(<argument pos:start="693:32" pos:end="693:46"><expr pos:start="693:32" pos:end="693:46"><name pos:start="693:32" pos:end="693:46">doVertDefFilter</name></expr></argument>)</argument_list></call><argument_list pos:start="693:48" pos:end="693:67">(<argument pos:start="693:49" pos:end="693:58"><expr pos:start="693:49" pos:end="693:58"><name pos:start="693:49" pos:end="693:58">tempBlock1</name></expr></argument>, <argument pos:start="693:61" pos:end="693:62"><expr pos:start="693:61" pos:end="693:62"><literal type="number" pos:start="693:61" pos:end="693:62">16</literal></expr></argument>, <argument pos:start="693:65" pos:end="693:66"><expr pos:start="693:65" pos:end="693:66"><operator pos:start="693:65" pos:end="693:65">&amp;</operator><name pos:start="693:66" pos:end="693:66">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if><if type="elseif" pos:start="695:18" pos:end="699:17">else if<condition pos:start="695:25" pos:end="695:44">(<expr pos:start="695:26" pos:end="695:43"><name pos:start="695:26" pos:end="695:29">mode</name> <operator pos:start="695:31" pos:end="695:31">&amp;</operator> <name pos:start="695:33" pos:end="695:43">H_A_DEBLOCK</name></expr>)</condition><block pos:start="695:45" pos:end="699:17">{<block_content pos:start="697:25" pos:end="697:74">

                        <expr_stmt pos:start="697:25" pos:end="697:74"><expr pos:start="697:25" pos:end="697:73"><call pos:start="697:25" pos:end="697:73"><call pos:start="697:25" pos:end="697:44"><name pos:start="697:25" pos:end="697:30">RENAME</name><argument_list pos:start="697:31" pos:end="697:44">(<argument pos:start="697:32" pos:end="697:43"><expr pos:start="697:32" pos:end="697:43"><name pos:start="697:32" pos:end="697:43">do_a_deblock</name></expr></argument>)</argument_list></call><argument_list pos:start="697:45" pos:end="697:73">(<argument pos:start="697:46" pos:end="697:55"><expr pos:start="697:46" pos:end="697:55"><name pos:start="697:46" pos:end="697:55">tempBlock1</name></expr></argument>, <argument pos:start="697:58" pos:end="697:59"><expr pos:start="697:58" pos:end="697:59"><literal type="number" pos:start="697:58" pos:end="697:59">16</literal></expr></argument>, <argument pos:start="697:62" pos:end="697:62"><expr pos:start="697:62" pos:end="697:62"><literal type="number" pos:start="697:62" pos:end="697:62">1</literal></expr></argument>, <argument pos:start="697:65" pos:end="697:66"><expr pos:start="697:65" pos:end="697:66"><operator pos:start="697:65" pos:end="697:65">&amp;</operator><name pos:start="697:66" pos:end="697:66">c</name></expr></argument>, <argument pos:start="697:69" pos:end="697:72"><expr pos:start="697:69" pos:end="697:72"><name pos:start="697:69" pos:end="697:72">mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="703:17" pos:end="708:0"><expr pos:start="703:17" pos:end="703:76"><call pos:start="703:17" pos:end="703:76"><call pos:start="703:17" pos:end="703:34"><name pos:start="703:17" pos:end="703:22">RENAME</name><argument_list pos:start="703:23" pos:end="703:34">(<argument pos:start="703:24" pos:end="703:33"><expr pos:start="703:24" pos:end="703:33"><name pos:start="703:24" pos:end="703:33">transpose2</name></expr></argument>)</argument_list></call><argument_list pos:start="703:35" pos:end="703:76">(<argument pos:start="703:36" pos:end="703:45"><expr pos:start="703:36" pos:end="703:45"><name pos:start="703:36" pos:end="703:43">dstBlock</name><operator pos:start="703:44" pos:end="703:44">-</operator><literal type="number" pos:start="703:45" pos:end="703:45">4</literal></expr></argument>, <argument pos:start="703:48" pos:end="703:56"><expr pos:start="703:48" pos:end="703:56"><name pos:start="703:48" pos:end="703:56">dstStride</name></expr></argument>, <argument pos:start="703:59" pos:end="703:75"><expr pos:start="703:59" pos:end="703:75"><name pos:start="703:59" pos:end="703:68">tempBlock1</name> <operator pos:start="703:70" pos:end="703:70">+</operator> <literal type="number" pos:start="703:72" pos:end="703:72">4</literal><operator pos:start="703:73" pos:end="703:73">*</operator><literal type="number" pos:start="703:74" pos:end="703:75">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:else pos:start="707:1" pos:end="707:5">#<cpp:directive pos:start="707:2" pos:end="707:5">else</cpp:directive></cpp:else>

                <if_stmt pos:start="709:17" pos:end="766:0"><if pos:start="709:17" pos:end="711:58">if<condition pos:start="709:19" pos:end="709:38">(<expr pos:start="709:20" pos:end="709:37"><name pos:start="709:20" pos:end="709:23">mode</name> <operator pos:start="709:25" pos:end="709:25">&amp;</operator> <name pos:start="709:27" pos:end="709:37">H_X1_FILTER</name></expr>)</condition><block type="pseudo" pos:start="711:21" pos:end="711:58"><block_content pos:start="711:21" pos:end="711:58">

                    <expr_stmt pos:start="711:21" pos:end="711:58"><expr pos:start="711:21" pos:end="711:57"><call pos:start="711:21" pos:end="711:57"><name pos:start="711:21" pos:end="711:33">horizX1Filter</name><argument_list pos:start="711:34" pos:end="711:57">(<argument pos:start="711:35" pos:end="711:44"><expr pos:start="711:35" pos:end="711:44"><name pos:start="711:35" pos:end="711:42">dstBlock</name><operator pos:start="711:43" pos:end="711:43">-</operator><literal type="number" pos:start="711:44" pos:end="711:44">4</literal></expr></argument>, <argument pos:start="711:47" pos:end="711:52"><expr pos:start="711:47" pos:end="711:52"><name pos:start="711:47" pos:end="711:52">stride</name></expr></argument>, <argument pos:start="711:55" pos:end="711:56"><expr pos:start="711:55" pos:end="711:56"><name pos:start="711:55" pos:end="711:56">QP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="713:17" pos:end="759:17">else if<condition pos:start="713:24" pos:end="713:41">(<expr pos:start="713:25" pos:end="713:40"><name pos:start="713:25" pos:end="713:28">mode</name> <operator pos:start="713:30" pos:end="713:30">&amp;</operator> <name pos:start="713:32" pos:end="713:40">H_DEBLOCK</name></expr>)</condition><block pos:start="713:42" pos:end="759:17">{<block_content pos:start="717:21" pos:end="758:0">

<cpp:if pos:start="715:1" pos:end="715:23">#<cpp:directive pos:start="715:2" pos:end="715:3">if</cpp:directive> <expr pos:start="715:5" pos:end="715:23"><name pos:start="715:5" pos:end="715:23">TEMPLATE_PP_ALTIVEC</name></expr></cpp:if>

                    <macro pos:start="717:21" pos:end="717:65"><name pos:start="717:21" pos:end="717:35">DECLARE_ALIGNED</name><argument_list pos:start="717:36" pos:end="717:65">(<argument pos:start="717:37" pos:end="717:38"><literal type="number" pos:start="717:37" pos:end="717:38">16</literal></argument>, <argument pos:start="717:41" pos:end="717:53">unsigned char</argument>, <argument pos:start="717:56" pos:end="717:64">tempBlock</argument>)</argument_list></macro><expr_stmt pos:start="717:66" pos:end="717:71"><expr pos:start="717:66" pos:end="717:70"><index pos:start="717:66" pos:end="717:70">[<expr pos:start="717:67" pos:end="717:69"><literal type="number" pos:start="717:67" pos:end="717:69">272</literal></expr>]</index></expr>;</expr_stmt>

                    <decl_stmt pos:start="719:21" pos:end="719:26"><decl pos:start="719:21" pos:end="719:25"><type pos:start="719:21" pos:end="719:23"><name pos:start="719:21" pos:end="719:23">int</name></type> <name pos:start="719:25" pos:end="719:25">t</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="721:21" pos:end="721:101"><expr pos:start="721:21" pos:end="721:100"><call pos:start="721:21" pos:end="721:100"><name pos:start="721:21" pos:end="721:61">transpose_16x8_char_toPackedAlign_altivec</name><argument_list pos:start="721:62" pos:end="721:100">(<argument pos:start="721:63" pos:end="721:71"><expr pos:start="721:63" pos:end="721:71"><name pos:start="721:63" pos:end="721:71">tempBlock</name></expr></argument>, <argument pos:start="721:74" pos:end="721:91"><expr pos:start="721:74" pos:end="721:91"><name pos:start="721:74" pos:end="721:81">dstBlock</name> <operator pos:start="721:83" pos:end="721:83">-</operator> <operator pos:start="721:85" pos:end="721:85">(</operator><literal type="number" pos:start="721:86" pos:end="721:88">4</literal> <operator pos:start="721:88" pos:end="721:88">+</operator> <literal type="number" pos:start="721:90" pos:end="721:90">1</literal><operator pos:start="721:91" pos:end="721:91">)</operator></expr></argument>, <argument pos:start="721:94" pos:end="721:99"><expr pos:start="721:94" pos:end="721:99"><name pos:start="721:94" pos:end="721:99">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="725:21" pos:end="725:67"><expr pos:start="725:21" pos:end="725:66"><name pos:start="725:21" pos:end="725:21">t</name> <operator pos:start="725:23" pos:end="725:23">=</operator> <call pos:start="725:25" pos:end="725:66"><name pos:start="725:25" pos:end="725:44">vertClassify_altivec</name><argument_list pos:start="725:45" pos:end="725:66">(<argument pos:start="725:46" pos:end="725:57"><expr pos:start="725:46" pos:end="725:57"><name pos:start="725:46" pos:end="725:54">tempBlock</name><operator pos:start="725:55" pos:end="725:55">-</operator><literal type="number" pos:start="725:56" pos:end="725:57">48</literal></expr></argument>, <argument pos:start="725:60" pos:end="725:61"><expr pos:start="725:60" pos:end="725:61"><literal type="number" pos:start="725:60" pos:end="725:61">16</literal></expr></argument>, <argument pos:start="725:64" pos:end="725:65"><expr pos:start="725:64" pos:end="725:65"><operator pos:start="725:64" pos:end="725:64">&amp;</operator><name pos:start="725:65" pos:end="725:65">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="727:21" pos:end="744:0"><if pos:start="727:21" pos:end="733:21">if<condition pos:start="727:23" pos:end="727:28">(<expr pos:start="727:24" pos:end="727:27"><name pos:start="727:24" pos:end="727:24">t</name><operator pos:start="727:25" pos:end="727:26">==</operator><literal type="number" pos:start="727:27" pos:end="727:27">1</literal></expr>)</condition> <block pos:start="727:30" pos:end="733:21">{<block_content pos:start="729:25" pos:end="731:107">

                        <expr_stmt pos:start="729:25" pos:end="729:68"><expr pos:start="729:25" pos:end="729:67"><call pos:start="729:25" pos:end="729:67"><name pos:start="729:25" pos:end="729:45">doVertLowPass_altivec</name><argument_list pos:start="729:46" pos:end="729:67">(<argument pos:start="729:47" pos:end="729:58"><expr pos:start="729:47" pos:end="729:58"><name pos:start="729:47" pos:end="729:55">tempBlock</name><operator pos:start="729:56" pos:end="729:56">-</operator><literal type="number" pos:start="729:57" pos:end="729:58">48</literal></expr></argument>, <argument pos:start="729:61" pos:end="729:62"><expr pos:start="729:61" pos:end="729:62"><literal type="number" pos:start="729:61" pos:end="729:62">16</literal></expr></argument>, <argument pos:start="729:65" pos:end="729:66"><expr pos:start="729:65" pos:end="729:66"><operator pos:start="729:65" pos:end="729:65">&amp;</operator><name pos:start="729:66" pos:end="729:66">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="731:25" pos:end="731:107"><expr pos:start="731:25" pos:end="731:106"><call pos:start="731:25" pos:end="731:106"><name pos:start="731:25" pos:end="731:67">transpose_8x16_char_fromPackedAlign_altivec</name><argument_list pos:start="731:68" pos:end="731:106">(<argument pos:start="731:69" pos:end="731:86"><expr pos:start="731:69" pos:end="731:86"><name pos:start="731:69" pos:end="731:76">dstBlock</name> <operator pos:start="731:78" pos:end="731:78">-</operator> <operator pos:start="731:80" pos:end="731:80">(</operator><literal type="number" pos:start="731:81" pos:end="731:83">4</literal> <operator pos:start="731:83" pos:end="731:83">+</operator> <literal type="number" pos:start="731:85" pos:end="731:85">1</literal><operator pos:start="731:86" pos:end="731:86">)</operator></expr></argument>, <argument pos:start="731:89" pos:end="731:97"><expr pos:start="731:89" pos:end="731:97"><name pos:start="731:89" pos:end="731:97">tempBlock</name></expr></argument>, <argument pos:start="731:100" pos:end="731:105"><expr pos:start="731:100" pos:end="731:105"><name pos:start="731:100" pos:end="731:105">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if>

                    <if type="elseif" pos:start="735:21" pos:end="744:0">else if<condition pos:start="735:28" pos:end="735:33">(<expr pos:start="735:29" pos:end="735:32"><name pos:start="735:29" pos:end="735:29">t</name><operator pos:start="735:30" pos:end="735:31">==</operator><literal type="number" pos:start="735:32" pos:end="735:32">2</literal></expr>)</condition> <block pos:start="735:35" pos:end="744:0">{<block_content pos:start="737:25" pos:end="739:107">

                        <expr_stmt pos:start="737:25" pos:end="737:70"><expr pos:start="737:25" pos:end="737:69"><call pos:start="737:25" pos:end="737:69"><name pos:start="737:25" pos:end="737:47">doVertDefFilter_altivec</name><argument_list pos:start="737:48" pos:end="737:69">(<argument pos:start="737:49" pos:end="737:60"><expr pos:start="737:49" pos:end="737:60"><name pos:start="737:49" pos:end="737:57">tempBlock</name><operator pos:start="737:58" pos:end="737:58">-</operator><literal type="number" pos:start="737:59" pos:end="737:60">48</literal></expr></argument>, <argument pos:start="737:63" pos:end="737:64"><expr pos:start="737:63" pos:end="737:64"><literal type="number" pos:start="737:63" pos:end="737:64">16</literal></expr></argument>, <argument pos:start="737:67" pos:end="737:68"><expr pos:start="737:67" pos:end="737:68"><operator pos:start="737:67" pos:end="737:67">&amp;</operator><name pos:start="737:68" pos:end="737:68">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="739:25" pos:end="739:107"><expr pos:start="739:25" pos:end="739:106"><call pos:start="739:25" pos:end="739:106"><name pos:start="739:25" pos:end="739:67">transpose_8x16_char_fromPackedAlign_altivec</name><argument_list pos:start="739:68" pos:end="739:106">(<argument pos:start="739:69" pos:end="739:86"><expr pos:start="739:69" pos:end="739:86"><name pos:start="739:69" pos:end="739:76">dstBlock</name> <operator pos:start="739:78" pos:end="739:78">-</operator> <operator pos:start="739:80" pos:end="739:80">(</operator><literal type="number" pos:start="739:81" pos:end="739:83">4</literal> <operator pos:start="739:83" pos:end="739:83">+</operator> <literal type="number" pos:start="739:85" pos:end="739:85">1</literal><operator pos:start="739:86" pos:end="739:86">)</operator></expr></argument>, <argument pos:start="739:89" pos:end="739:97"><expr pos:start="739:89" pos:end="739:97"><name pos:start="739:89" pos:end="739:97">tempBlock</name></expr></argument>, <argument pos:start="739:100" pos:end="739:105"><expr pos:start="739:100" pos:end="739:105"><name pos:start="739:100" pos:end="739:105">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

<cpp:else pos:start="743:1" pos:end="743:5">#<cpp:directive pos:start="743:2" pos:end="743:5">else</cpp:directive></cpp:else>

                    <decl_stmt pos:start="745:21" pos:end="745:79"><decl pos:start="745:21" pos:end="745:78"><type pos:start="745:21" pos:end="745:29"><specifier pos:start="745:21" pos:end="745:25">const</specifier> <name pos:start="745:27" pos:end="745:29">int</name></type> <name pos:start="745:31" pos:end="745:31">t</name><init pos:start="745:32" pos:end="745:78">= <expr pos:start="745:34" pos:end="745:78"><call pos:start="745:34" pos:end="745:78"><call pos:start="745:34" pos:end="745:54"><name pos:start="745:34" pos:end="745:39">RENAME</name><argument_list pos:start="745:40" pos:end="745:54">(<argument pos:start="745:41" pos:end="745:53"><expr pos:start="745:41" pos:end="745:53"><name pos:start="745:41" pos:end="745:53">horizClassify</name></expr></argument>)</argument_list></call><argument_list pos:start="745:55" pos:end="745:78">(<argument pos:start="745:56" pos:end="745:65"><expr pos:start="745:56" pos:end="745:65"><name pos:start="745:56" pos:end="745:63">dstBlock</name><operator pos:start="745:64" pos:end="745:64">-</operator><literal type="number" pos:start="745:65" pos:end="745:65">4</literal></expr></argument>, <argument pos:start="745:68" pos:end="745:73"><expr pos:start="745:68" pos:end="745:73"><name pos:start="745:68" pos:end="745:73">stride</name></expr></argument>, <argument pos:start="745:76" pos:end="745:77"><expr pos:start="745:76" pos:end="745:77"><operator pos:start="745:76" pos:end="745:76">&amp;</operator><name pos:start="745:77" pos:end="745:77">c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                    <if_stmt pos:start="749:21" pos:end="758:0"><if pos:start="749:21" pos:end="751:71">if<condition pos:start="749:23" pos:end="749:28">(<expr pos:start="749:24" pos:end="749:27"><name pos:start="749:24" pos:end="749:24">t</name><operator pos:start="749:25" pos:end="749:26">==</operator><literal type="number" pos:start="749:27" pos:end="749:27">1</literal></expr>)</condition><block type="pseudo" pos:start="751:25" pos:end="751:71"><block_content pos:start="751:25" pos:end="751:71">

                        <expr_stmt pos:start="751:25" pos:end="751:71"><expr pos:start="751:25" pos:end="751:70"><call pos:start="751:25" pos:end="751:70"><call pos:start="751:25" pos:end="751:46"><name pos:start="751:25" pos:end="751:30">RENAME</name><argument_list pos:start="751:31" pos:end="751:46">(<argument pos:start="751:32" pos:end="751:45"><expr pos:start="751:32" pos:end="751:45"><name pos:start="751:32" pos:end="751:45">doHorizLowPass</name></expr></argument>)</argument_list></call><argument_list pos:start="751:47" pos:end="751:70">(<argument pos:start="751:48" pos:end="751:57"><expr pos:start="751:48" pos:end="751:57"><name pos:start="751:48" pos:end="751:55">dstBlock</name><operator pos:start="751:56" pos:end="751:56">-</operator><literal type="number" pos:start="751:57" pos:end="751:57">4</literal></expr></argument>, <argument pos:start="751:60" pos:end="751:65"><expr pos:start="751:60" pos:end="751:65"><name pos:start="751:60" pos:end="751:65">stride</name></expr></argument>, <argument pos:start="751:68" pos:end="751:69"><expr pos:start="751:68" pos:end="751:69"><operator pos:start="751:68" pos:end="751:68">&amp;</operator><name pos:start="751:69" pos:end="751:69">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="753:21" pos:end="758:0">else if<condition pos:start="753:28" pos:end="753:33">(<expr pos:start="753:29" pos:end="753:32"><name pos:start="753:29" pos:end="753:29">t</name><operator pos:start="753:30" pos:end="753:31">==</operator><literal type="number" pos:start="753:32" pos:end="753:32">2</literal></expr>)</condition><block type="pseudo" pos:start="755:25" pos:end="758:0"><block_content pos:start="755:25" pos:end="758:0">

                        <expr_stmt pos:start="755:25" pos:end="758:0"><expr pos:start="755:25" pos:end="755:72"><call pos:start="755:25" pos:end="755:72"><call pos:start="755:25" pos:end="755:48"><name pos:start="755:25" pos:end="755:30">RENAME</name><argument_list pos:start="755:31" pos:end="755:48">(<argument pos:start="755:32" pos:end="755:47"><expr pos:start="755:32" pos:end="755:47"><name pos:start="755:32" pos:end="755:47">doHorizDefFilter</name></expr></argument>)</argument_list></call><argument_list pos:start="755:49" pos:end="755:72">(<argument pos:start="755:50" pos:end="755:59"><expr pos:start="755:50" pos:end="755:59"><name pos:start="755:50" pos:end="755:57">dstBlock</name><operator pos:start="755:58" pos:end="755:58">-</operator><literal type="number" pos:start="755:59" pos:end="755:59">4</literal></expr></argument>, <argument pos:start="755:62" pos:end="755:67"><expr pos:start="755:62" pos:end="755:67"><name pos:start="755:62" pos:end="755:67">stride</name></expr></argument>, <argument pos:start="755:70" pos:end="755:71"><expr pos:start="755:70" pos:end="755:71"><operator pos:start="755:70" pos:end="755:70">&amp;</operator><name pos:start="755:71" pos:end="755:71">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="757:1" pos:end="757:6">#<cpp:directive pos:start="757:2" pos:end="757:6">endif</cpp:directive></cpp:endif>

                </block_content>}</block></if><if type="elseif" pos:start="759:18" pos:end="766:0">else if<condition pos:start="759:25" pos:end="759:44">(<expr pos:start="759:26" pos:end="759:43"><name pos:start="759:26" pos:end="759:29">mode</name> <operator pos:start="759:31" pos:end="759:31">&amp;</operator> <name pos:start="759:33" pos:end="759:43">H_A_DEBLOCK</name></expr>)</condition><block pos:start="759:45" pos:end="766:0">{<block_content pos:start="761:21" pos:end="761:74">

                    <expr_stmt pos:start="761:21" pos:end="761:74"><expr pos:start="761:21" pos:end="761:73"><call pos:start="761:21" pos:end="761:73"><call pos:start="761:21" pos:end="761:40"><name pos:start="761:21" pos:end="761:26">RENAME</name><argument_list pos:start="761:27" pos:end="761:40">(<argument pos:start="761:28" pos:end="761:39"><expr pos:start="761:28" pos:end="761:39"><name pos:start="761:28" pos:end="761:39">do_a_deblock</name></expr></argument>)</argument_list></call><argument_list pos:start="761:41" pos:end="761:73">(<argument pos:start="761:42" pos:end="761:51"><expr pos:start="761:42" pos:end="761:51"><name pos:start="761:42" pos:end="761:49">dstBlock</name><operator pos:start="761:50" pos:end="761:50">-</operator><literal type="number" pos:start="761:51" pos:end="761:51">8</literal></expr></argument>, <argument pos:start="761:54" pos:end="761:54"><expr pos:start="761:54" pos:end="761:54"><literal type="number" pos:start="761:54" pos:end="761:54">1</literal></expr></argument>, <argument pos:start="761:57" pos:end="761:62"><expr pos:start="761:57" pos:end="761:62"><name pos:start="761:57" pos:end="761:62">stride</name></expr></argument>, <argument pos:start="761:65" pos:end="761:66"><expr pos:start="761:65" pos:end="761:66"><operator pos:start="761:65" pos:end="761:65">&amp;</operator><name pos:start="761:66" pos:end="761:66">c</name></expr></argument>, <argument pos:start="761:69" pos:end="761:72"><expr pos:start="761:69" pos:end="761:72"><name pos:start="761:69" pos:end="761:72">mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="765:1" pos:end="765:6">#<cpp:directive pos:start="765:2" pos:end="765:6">endif</cpp:directive></cpp:endif> <comment type="line" pos:start="765:8" pos:end="765:24">//TEMPLATE_PP_MMX</comment>

                <if_stmt pos:start="767:17" pos:end="773:17"><if pos:start="767:17" pos:end="773:17">if<condition pos:start="767:19" pos:end="767:33">(<expr pos:start="767:20" pos:end="767:32"><name pos:start="767:20" pos:end="767:23">mode</name> <operator pos:start="767:25" pos:end="767:25">&amp;</operator> <name pos:start="767:27" pos:end="767:32">DERING</name></expr>)</condition><block pos:start="767:34" pos:end="773:17">{<block_content pos:start="771:21" pos:end="771:78">

                <comment type="line" pos:start="769:17" pos:end="769:41">//FIXME filter first line</comment>

                    <if_stmt pos:start="771:21" pos:end="771:78"><if pos:start="771:21" pos:end="771:78">if<condition pos:start="771:23" pos:end="771:27">(<expr pos:start="771:24" pos:end="771:26"><name pos:start="771:24" pos:end="771:24">y</name><operator pos:start="771:25" pos:end="771:25">&gt;</operator><literal type="number" pos:start="771:26" pos:end="771:26">0</literal></expr>)</condition><block type="pseudo" pos:start="771:29" pos:end="771:78"><block_content pos:start="771:29" pos:end="771:78"> <expr_stmt pos:start="771:29" pos:end="771:78"><expr pos:start="771:29" pos:end="771:77"><call pos:start="771:29" pos:end="771:77"><call pos:start="771:29" pos:end="771:42"><name pos:start="771:29" pos:end="771:34">RENAME</name><argument_list pos:start="771:35" pos:end="771:42">(<argument pos:start="771:36" pos:end="771:41"><expr pos:start="771:36" pos:end="771:41"><name pos:start="771:36" pos:end="771:41">dering</name></expr></argument>)</argument_list></call><argument_list pos:start="771:43" pos:end="771:77">(<argument pos:start="771:44" pos:end="771:64"><expr pos:start="771:44" pos:end="771:64"><name pos:start="771:44" pos:end="771:51">dstBlock</name> <operator pos:start="771:53" pos:end="771:53">-</operator> <name pos:start="771:55" pos:end="771:60">stride</name> <operator pos:start="771:62" pos:end="771:62">-</operator> <literal type="number" pos:start="771:64" pos:end="771:64">8</literal></expr></argument>, <argument pos:start="771:67" pos:end="771:72"><expr pos:start="771:67" pos:end="771:72"><name pos:start="771:67" pos:end="771:72">stride</name></expr></argument>, <argument pos:start="771:75" pos:end="771:76"><expr pos:start="771:75" pos:end="771:76"><operator pos:start="771:75" pos:end="771:75">&amp;</operator><name pos:start="771:76" pos:end="771:76">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="777:17" pos:end="789:17"><if pos:start="777:17" pos:end="789:17">if<condition pos:start="777:19" pos:end="777:44">(<expr pos:start="777:20" pos:end="777:43"><name pos:start="777:20" pos:end="777:23">mode</name> <operator pos:start="777:25" pos:end="777:25">&amp;</operator> <name pos:start="777:27" pos:end="777:43">TEMP_NOISE_FILTER</name></expr>)</condition>

                <block pos:start="779:17" pos:end="789:17">{<block_content pos:start="781:21" pos:end="787:50">

                    <expr_stmt pos:start="781:21" pos:end="787:50"><expr pos:start="781:21" pos:end="787:49"><call pos:start="781:21" pos:end="787:49"><call pos:start="781:21" pos:end="781:44"><name pos:start="781:21" pos:end="781:26">RENAME</name><argument_list pos:start="781:27" pos:end="781:44">(<argument pos:start="781:28" pos:end="781:43"><expr pos:start="781:28" pos:end="781:43"><name pos:start="781:28" pos:end="781:43">tempNoiseReducer</name></expr></argument>)</argument_list></call><argument_list pos:start="781:45" pos:end="787:49">(<argument pos:start="781:46" pos:end="781:55"><expr pos:start="781:46" pos:end="781:55"><name pos:start="781:46" pos:end="781:53">dstBlock</name><operator pos:start="781:54" pos:end="781:54">-</operator><literal type="number" pos:start="781:55" pos:end="781:55">8</literal></expr></argument>, <argument pos:start="781:58" pos:end="781:63"><expr pos:start="781:58" pos:end="781:63"><name pos:start="781:58" pos:end="781:63">stride</name></expr></argument>,

                            <argument pos:start="783:29" pos:end="783:68"><expr pos:start="783:29" pos:end="783:68"><name pos:start="783:29" pos:end="783:50"><name pos:start="783:29" pos:end="783:29">c</name><operator pos:start="783:30" pos:end="783:30">.</operator><name pos:start="783:31" pos:end="783:41">tempBlurred</name><index pos:start="783:42" pos:end="783:50">[<expr pos:start="783:43" pos:end="783:49"><name pos:start="783:43" pos:end="783:49">isColor</name></expr>]</index></name> <operator pos:start="783:52" pos:end="783:52">+</operator> <name pos:start="783:54" pos:end="783:54">y</name><operator pos:start="783:55" pos:end="783:55">*</operator><name pos:start="783:56" pos:end="783:64">dstStride</name> <operator pos:start="783:66" pos:end="783:66">+</operator> <name pos:start="783:68" pos:end="783:68">x</name></expr></argument>,

                            <argument pos:start="785:29" pos:end="785:82"><expr pos:start="785:29" pos:end="785:82"><name pos:start="785:29" pos:end="785:54"><name pos:start="785:29" pos:end="785:29">c</name><operator pos:start="785:30" pos:end="785:30">.</operator><name pos:start="785:31" pos:end="785:45">tempBlurredPast</name><index pos:start="785:46" pos:end="785:54">[<expr pos:start="785:47" pos:end="785:53"><name pos:start="785:47" pos:end="785:53">isColor</name></expr>]</index></name> <operator pos:start="785:56" pos:end="785:56">+</operator> <operator pos:start="785:58" pos:end="785:58">(</operator><name pos:start="785:59" pos:end="785:59">y</name><operator pos:start="785:60" pos:end="785:61">&gt;&gt;</operator><literal type="number" pos:start="785:62" pos:end="785:62">3</literal><operator pos:start="785:63" pos:end="785:63">)</operator><operator pos:start="785:64" pos:end="785:64">*</operator><literal type="number" pos:start="785:65" pos:end="785:69">256</literal> <operator pos:start="785:69" pos:end="785:69">+</operator> <operator pos:start="785:71" pos:end="785:71">(</operator><name pos:start="785:72" pos:end="785:72">x</name><operator pos:start="785:73" pos:end="785:74">&gt;&gt;</operator><literal type="number" pos:start="785:75" pos:end="785:75">3</literal><operator pos:start="785:76" pos:end="785:76">)</operator> <operator pos:start="785:78" pos:end="785:78">+</operator> <literal type="number" pos:start="785:80" pos:end="785:82">256</literal></expr></argument>,

                            <argument pos:start="787:29" pos:end="787:48"><expr pos:start="787:29" pos:end="787:48"><name pos:start="787:29" pos:end="787:48"><name pos:start="787:29" pos:end="787:29">c</name><operator pos:start="787:30" pos:end="787:30">.</operator><name pos:start="787:31" pos:end="787:36">ppMode</name><operator pos:start="787:37" pos:end="787:37">.</operator><name pos:start="787:38" pos:end="787:48">maxTmpNoise</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="795:13" pos:end="795:24"><expr pos:start="795:13" pos:end="795:23"><name pos:start="795:13" pos:end="795:20">dstBlock</name><operator pos:start="795:21" pos:end="795:22">+=</operator><literal type="number" pos:start="795:23" pos:end="795:23">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="797:13" pos:end="802:0"><expr pos:start="797:13" pos:end="797:23"><name pos:start="797:13" pos:end="797:20">srcBlock</name><operator pos:start="797:21" pos:end="797:22">+=</operator><literal type="number" pos:start="797:23" pos:end="797:23">8</literal></expr>;</expr_stmt>



<cpp:if pos:start="801:1" pos:end="801:19">#<cpp:directive pos:start="801:2" pos:end="801:3">if</cpp:directive> <expr pos:start="801:5" pos:end="801:19"><name pos:start="801:5" pos:end="801:19">TEMPLATE_PP_MMX</name></expr></cpp:if>

            <expr_stmt pos:start="803:13" pos:end="803:32"><expr pos:start="803:13" pos:end="803:31"><name pos:start="803:13" pos:end="803:19">tmpXchg</name><operator pos:start="803:20" pos:end="803:20">=</operator> <name pos:start="803:22" pos:end="803:31">tempBlock1</name></expr>;</expr_stmt>

            <expr_stmt pos:start="805:13" pos:end="805:35"><expr pos:start="805:13" pos:end="805:34"><name pos:start="805:13" pos:end="805:22">tempBlock1</name><operator pos:start="805:23" pos:end="805:23">=</operator> <name pos:start="805:25" pos:end="805:34">tempBlock2</name></expr>;</expr_stmt>

            <expr_stmt pos:start="807:13" pos:end="810:0"><expr pos:start="807:13" pos:end="807:32"><name pos:start="807:13" pos:end="807:22">tempBlock2</name> <operator pos:start="807:24" pos:end="807:24">=</operator> <name pos:start="807:26" pos:end="807:32">tmpXchg</name></expr>;</expr_stmt>

<cpp:endif pos:start="809:1" pos:end="809:6">#<cpp:directive pos:start="809:2" pos:end="809:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></for>



        <if_stmt pos:start="815:9" pos:end="819:9"><if pos:start="815:9" pos:end="819:9">if<condition pos:start="815:11" pos:end="815:25">(<expr pos:start="815:12" pos:end="815:24"><name pos:start="815:12" pos:end="815:15">mode</name> <operator pos:start="815:17" pos:end="815:17">&amp;</operator> <name pos:start="815:19" pos:end="815:24">DERING</name></expr>)</condition><block pos:start="815:26" pos:end="819:9">{<block_content pos:start="817:13" pos:end="817:78">

            <if_stmt pos:start="817:13" pos:end="817:78"><if pos:start="817:13" pos:end="817:78">if<condition pos:start="817:15" pos:end="817:21">(<expr pos:start="817:16" pos:end="817:20"><name pos:start="817:16" pos:end="817:16">y</name> <operator pos:start="817:18" pos:end="817:18">&gt;</operator> <literal type="number" pos:start="817:20" pos:end="817:20">0</literal></expr>)</condition><block type="pseudo" pos:start="817:23" pos:end="817:78"><block_content pos:start="817:23" pos:end="817:78"> <expr_stmt pos:start="817:23" pos:end="817:78"><expr pos:start="817:23" pos:end="817:77"><call pos:start="817:23" pos:end="817:77"><call pos:start="817:23" pos:end="817:36"><name pos:start="817:23" pos:end="817:28">RENAME</name><argument_list pos:start="817:29" pos:end="817:36">(<argument pos:start="817:30" pos:end="817:35"><expr pos:start="817:30" pos:end="817:35"><name pos:start="817:30" pos:end="817:35">dering</name></expr></argument>)</argument_list></call><argument_list pos:start="817:37" pos:end="817:77">(<argument pos:start="817:38" pos:end="817:61"><expr pos:start="817:38" pos:end="817:61"><name pos:start="817:38" pos:end="817:45">dstBlock</name> <operator pos:start="817:47" pos:end="817:47">-</operator> <name pos:start="817:49" pos:end="817:57">dstStride</name> <operator pos:start="817:59" pos:end="817:59">-</operator> <literal type="number" pos:start="817:61" pos:end="817:61">8</literal></expr></argument>, <argument pos:start="817:64" pos:end="817:72"><expr pos:start="817:64" pos:end="817:72"><name pos:start="817:64" pos:end="817:72">dstStride</name></expr></argument>, <argument pos:start="817:75" pos:end="817:76"><expr pos:start="817:75" pos:end="817:76"><operator pos:start="817:75" pos:end="817:75">&amp;</operator><name pos:start="817:76" pos:end="817:76">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="823:9" pos:end="833:9"><if pos:start="823:9" pos:end="833:9">if<condition pos:start="823:11" pos:end="823:38">(<expr pos:start="823:12" pos:end="823:37"><operator pos:start="823:12" pos:end="823:12">(</operator><name pos:start="823:13" pos:end="823:16">mode</name> <operator pos:start="823:18" pos:end="823:18">&amp;</operator> <name pos:start="823:20" pos:end="823:36">TEMP_NOISE_FILTER</name><operator pos:start="823:37" pos:end="823:37">)</operator></expr>)</condition><block pos:start="823:39" pos:end="833:9">{<block_content pos:start="825:13" pos:end="831:42">

            <expr_stmt pos:start="825:13" pos:end="831:42"><expr pos:start="825:13" pos:end="831:41"><call pos:start="825:13" pos:end="831:41"><call pos:start="825:13" pos:end="825:36"><name pos:start="825:13" pos:end="825:18">RENAME</name><argument_list pos:start="825:19" pos:end="825:36">(<argument pos:start="825:20" pos:end="825:35"><expr pos:start="825:20" pos:end="825:35"><name pos:start="825:20" pos:end="825:35">tempNoiseReducer</name></expr></argument>)</argument_list></call><argument_list pos:start="825:37" pos:end="831:41">(<argument pos:start="825:38" pos:end="825:47"><expr pos:start="825:38" pos:end="825:47"><name pos:start="825:38" pos:end="825:45">dstBlock</name><operator pos:start="825:46" pos:end="825:46">-</operator><literal type="number" pos:start="825:47" pos:end="825:47">8</literal></expr></argument>, <argument pos:start="825:50" pos:end="825:58"><expr pos:start="825:50" pos:end="825:58"><name pos:start="825:50" pos:end="825:58">dstStride</name></expr></argument>,

                    <argument pos:start="827:21" pos:end="827:60"><expr pos:start="827:21" pos:end="827:60"><name pos:start="827:21" pos:end="827:42"><name pos:start="827:21" pos:end="827:21">c</name><operator pos:start="827:22" pos:end="827:22">.</operator><name pos:start="827:23" pos:end="827:33">tempBlurred</name><index pos:start="827:34" pos:end="827:42">[<expr pos:start="827:35" pos:end="827:41"><name pos:start="827:35" pos:end="827:41">isColor</name></expr>]</index></name> <operator pos:start="827:44" pos:end="827:44">+</operator> <name pos:start="827:46" pos:end="827:46">y</name><operator pos:start="827:47" pos:end="827:47">*</operator><name pos:start="827:48" pos:end="827:56">dstStride</name> <operator pos:start="827:58" pos:end="827:58">+</operator> <name pos:start="827:60" pos:end="827:60">x</name></expr></argument>,

                    <argument pos:start="829:21" pos:end="829:74"><expr pos:start="829:21" pos:end="829:74"><name pos:start="829:21" pos:end="829:46"><name pos:start="829:21" pos:end="829:21">c</name><operator pos:start="829:22" pos:end="829:22">.</operator><name pos:start="829:23" pos:end="829:37">tempBlurredPast</name><index pos:start="829:38" pos:end="829:46">[<expr pos:start="829:39" pos:end="829:45"><name pos:start="829:39" pos:end="829:45">isColor</name></expr>]</index></name> <operator pos:start="829:48" pos:end="829:48">+</operator> <operator pos:start="829:50" pos:end="829:50">(</operator><name pos:start="829:51" pos:end="829:51">y</name><operator pos:start="829:52" pos:end="829:53">&gt;&gt;</operator><literal type="number" pos:start="829:54" pos:end="829:54">3</literal><operator pos:start="829:55" pos:end="829:55">)</operator><operator pos:start="829:56" pos:end="829:56">*</operator><literal type="number" pos:start="829:57" pos:end="829:61">256</literal> <operator pos:start="829:61" pos:end="829:61">+</operator> <operator pos:start="829:63" pos:end="829:63">(</operator><name pos:start="829:64" pos:end="829:64">x</name><operator pos:start="829:65" pos:end="829:66">&gt;&gt;</operator><literal type="number" pos:start="829:67" pos:end="829:67">3</literal><operator pos:start="829:68" pos:end="829:68">)</operator> <operator pos:start="829:70" pos:end="829:70">+</operator> <literal type="number" pos:start="829:72" pos:end="829:74">256</literal></expr></argument>,

                    <argument pos:start="831:21" pos:end="831:40"><expr pos:start="831:21" pos:end="831:40"><name pos:start="831:21" pos:end="831:40"><name pos:start="831:21" pos:end="831:21">c</name><operator pos:start="831:22" pos:end="831:22">.</operator><name pos:start="831:23" pos:end="831:28">ppMode</name><operator pos:start="831:29" pos:end="831:29">.</operator><name pos:start="831:30" pos:end="831:40">maxTmpNoise</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="837:9" pos:end="837:55">/* did we use a tmp buffer for the last lines*/</comment>

        <if_stmt pos:start="839:9" pos:end="859:9"><if pos:start="839:9" pos:end="859:9">if<condition pos:start="839:11" pos:end="839:26">(<expr pos:start="839:12" pos:end="839:25"><name pos:start="839:12" pos:end="839:12">y</name><operator pos:start="839:13" pos:end="839:13">+</operator><literal type="number" pos:start="839:14" pos:end="839:15">15</literal> <operator pos:start="839:17" pos:end="839:18">&gt;=</operator> <name pos:start="839:20" pos:end="839:25">height</name></expr>)</condition><block pos:start="839:27" pos:end="859:9">{<block_content pos:start="841:13" pos:end="857:13">

            <decl_stmt pos:start="841:13" pos:end="841:51"><decl pos:start="841:13" pos:end="841:50"><type pos:start="841:13" pos:end="841:21"><name pos:start="841:13" pos:end="841:19">uint8_t</name> <modifier pos:start="841:21" pos:end="841:21">*</modifier></type><name pos:start="841:22" pos:end="841:29">dstBlock</name><init pos:start="841:30" pos:end="841:50">= <expr pos:start="841:32" pos:end="841:50"><operator pos:start="841:32" pos:end="841:32">&amp;</operator><operator pos:start="841:33" pos:end="841:33">(</operator><name pos:start="841:34" pos:end="841:49"><name pos:start="841:34" pos:end="841:36">dst</name><index pos:start="841:37" pos:end="841:49">[<expr pos:start="841:38" pos:end="841:48"><name pos:start="841:38" pos:end="841:38">y</name><operator pos:start="841:39" pos:end="841:39">*</operator><name pos:start="841:40" pos:end="841:48">dstStride</name></expr>]</index></name><operator pos:start="841:50" pos:end="841:50">)</operator></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="843:13" pos:end="857:13"><if pos:start="843:13" pos:end="845:76">if<condition pos:start="843:15" pos:end="843:39">(<expr pos:start="843:16" pos:end="843:38"><name pos:start="843:16" pos:end="843:20">width</name><operator pos:start="843:21" pos:end="843:22">==</operator><call pos:start="843:23" pos:end="843:38"><name pos:start="843:23" pos:end="843:27">FFABS</name><argument_list pos:start="843:28" pos:end="843:38">(<argument pos:start="843:29" pos:end="843:37"><expr pos:start="843:29" pos:end="843:37"><name pos:start="843:29" pos:end="843:37">dstStride</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="845:17" pos:end="845:76"><block_content pos:start="845:17" pos:end="845:76">

                <expr_stmt pos:start="845:17" pos:end="845:76"><expr pos:start="845:17" pos:end="845:75"><call pos:start="845:17" pos:end="845:75"><name pos:start="845:17" pos:end="845:23">linecpy</name><argument_list pos:start="845:24" pos:end="845:75">(<argument pos:start="845:25" pos:end="845:32"><expr pos:start="845:25" pos:end="845:32"><name pos:start="845:25" pos:end="845:32">dstBlock</name></expr></argument>, <argument pos:start="845:35" pos:end="845:53"><expr pos:start="845:35" pos:end="845:53"><name pos:start="845:35" pos:end="845:41">tempDst</name> <operator pos:start="845:43" pos:end="845:43">+</operator> <name pos:start="845:45" pos:end="845:53">dstStride</name></expr></argument>, <argument pos:start="845:56" pos:end="845:63"><expr pos:start="845:56" pos:end="845:63"><name pos:start="845:56" pos:end="845:61">height</name><operator pos:start="845:62" pos:end="845:62">-</operator><name pos:start="845:63" pos:end="845:63">y</name></expr></argument>, <argument pos:start="845:66" pos:end="845:74"><expr pos:start="845:66" pos:end="845:74"><name pos:start="845:66" pos:end="845:74">dstStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="847:13" pos:end="857:13">else<block pos:start="847:17" pos:end="857:13">{<block_content pos:start="849:17" pos:end="855:17">

                <decl_stmt pos:start="849:17" pos:end="849:22"><decl pos:start="849:17" pos:end="849:21"><type pos:start="849:17" pos:end="849:19"><name pos:start="849:17" pos:end="849:19">int</name></type> <name pos:start="849:21" pos:end="849:21">i</name></decl>;</decl_stmt>

                <for pos:start="851:17" pos:end="855:17">for<control pos:start="851:20" pos:end="851:41">(<init pos:start="851:21" pos:end="851:24"><expr pos:start="851:21" pos:end="851:23"><name pos:start="851:21" pos:end="851:21">i</name><operator pos:start="851:22" pos:end="851:22">=</operator><literal type="number" pos:start="851:23" pos:end="851:23">0</literal></expr>;</init> <condition pos:start="851:26" pos:end="851:36"><expr pos:start="851:26" pos:end="851:35"><name pos:start="851:26" pos:end="851:26">i</name><operator pos:start="851:27" pos:end="851:27">&lt;</operator><name pos:start="851:28" pos:end="851:33">height</name><operator pos:start="851:34" pos:end="851:34">-</operator><name pos:start="851:35" pos:end="851:35">y</name></expr>;</condition> <incr pos:start="851:38" pos:end="851:40"><expr pos:start="851:38" pos:end="851:40"><name pos:start="851:38" pos:end="851:38">i</name><operator pos:start="851:39" pos:end="851:40">++</operator></expr></incr>)</control><block pos:start="851:42" pos:end="855:17">{<block_content pos:start="853:21" pos:end="853:85">

                    <expr_stmt pos:start="853:21" pos:end="853:85"><expr pos:start="853:21" pos:end="853:84"><call pos:start="853:21" pos:end="853:84"><name pos:start="853:21" pos:end="853:26">memcpy</name><argument_list pos:start="853:27" pos:end="853:84">(<argument pos:start="853:28" pos:end="853:49"><expr pos:start="853:28" pos:end="853:49"><name pos:start="853:28" pos:end="853:35">dstBlock</name> <operator pos:start="853:37" pos:end="853:37">+</operator> <name pos:start="853:39" pos:end="853:39">i</name><operator pos:start="853:40" pos:end="853:40">*</operator><name pos:start="853:41" pos:end="853:49">dstStride</name></expr></argument>, <argument pos:start="853:52" pos:end="853:76"><expr pos:start="853:52" pos:end="853:76"><name pos:start="853:52" pos:end="853:58">tempDst</name> <operator pos:start="853:60" pos:end="853:60">+</operator> <operator pos:start="853:62" pos:end="853:62">(</operator><name pos:start="853:63" pos:end="853:63">i</name><operator pos:start="853:64" pos:end="853:64">+</operator><literal type="number" pos:start="853:65" pos:end="853:65">1</literal><operator pos:start="853:66" pos:end="853:66">)</operator><operator pos:start="853:67" pos:end="853:67">*</operator><name pos:start="853:68" pos:end="853:76">dstStride</name></expr></argument>, <argument pos:start="853:79" pos:end="853:83"><expr pos:start="853:79" pos:end="853:83"><name pos:start="853:79" pos:end="853:83">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

<comment type="block" pos:start="861:1" pos:end="877:11">/*

        for(x=0; x&lt;width; x+=32){

            volatile int i;

            i+=   dstBlock[x + 7*dstStride] + dstBlock[x + 8*dstStride]

                + dstBlock[x + 9*dstStride] + dstBlock[x +10*dstStride]

                + dstBlock[x +11*dstStride] + dstBlock[x +12*dstStride];

                + dstBlock[x +13*dstStride]

                + dstBlock[x +14*dstStride] + dstBlock[x +15*dstStride];

        }*/</comment>

    </block_content>}</block></for>

<cpp:if pos:start="881:1" pos:end="881:23">#<cpp:directive pos:start="881:2" pos:end="881:3">if</cpp:directive>   <expr pos:start="881:7" pos:end="881:23"><name pos:start="881:7" pos:end="881:23">TEMPLATE_PP_3DNOW</name></expr></cpp:if>

    <asm pos:start="883:5" pos:end="886:0">__asm__ <specifier pos:start="883:13" pos:end="883:20">volatile</specifier>("femms");</asm>

<cpp:elif pos:start="885:1" pos:end="885:21">#<cpp:directive pos:start="885:2" pos:end="885:5">elif</cpp:directive> <expr pos:start="885:7" pos:end="885:21"><name pos:start="885:7" pos:end="885:21">TEMPLATE_PP_MMX</name></expr></cpp:elif>

    <asm pos:start="887:5" pos:end="894:0">__asm__ <specifier pos:start="887:13" pos:end="887:20">volatile</specifier>("emms");</asm>

<cpp:endif pos:start="889:1" pos:end="889:6">#<cpp:directive pos:start="889:2" pos:end="889:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="893:1" pos:end="893:23">#<cpp:directive pos:start="893:2" pos:end="893:6">ifdef</cpp:directive> <name pos:start="893:8" pos:end="893:23">DEBUG_BRIGHTNESS</name></cpp:ifdef>

    <if_stmt pos:start="895:5" pos:end="936:0"><if pos:start="895:5" pos:end="936:0">if<condition pos:start="895:7" pos:end="895:16">(<expr pos:start="895:8" pos:end="895:15"><operator pos:start="895:8" pos:end="895:8">!</operator><name pos:start="895:9" pos:end="895:15">isColor</name></expr>)</condition><block pos:start="895:17" pos:end="936:0">{<block_content pos:start="897:9" pos:end="931:9">

        <decl_stmt pos:start="897:9" pos:end="897:18"><decl pos:start="897:9" pos:end="897:17"><type pos:start="897:9" pos:end="897:11"><name pos:start="897:9" pos:end="897:11">int</name></type> <name pos:start="897:13" pos:end="897:15">max</name><init pos:start="897:16" pos:end="897:17">=<expr pos:start="897:17" pos:end="897:17"><literal type="number" pos:start="897:17" pos:end="897:17">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="899:9" pos:end="899:14"><decl pos:start="899:9" pos:end="899:13"><type pos:start="899:9" pos:end="899:11"><name pos:start="899:9" pos:end="899:11">int</name></type> <name pos:start="899:13" pos:end="899:13">i</name></decl>;</decl_stmt>

        <for pos:start="901:9" pos:end="903:54">for<control pos:start="901:12" pos:end="901:28">(<init pos:start="901:13" pos:end="901:16"><expr pos:start="901:13" pos:end="901:15"><name pos:start="901:13" pos:end="901:13">i</name><operator pos:start="901:14" pos:end="901:14">=</operator><literal type="number" pos:start="901:15" pos:end="901:15">0</literal></expr>;</init> <condition pos:start="901:18" pos:end="901:23"><expr pos:start="901:18" pos:end="901:22"><name pos:start="901:18" pos:end="901:18">i</name><operator pos:start="901:19" pos:end="901:19">&lt;</operator><literal type="number" pos:start="901:20" pos:end="901:22">256</literal></expr>;</condition> <incr pos:start="901:25" pos:end="901:27"><expr pos:start="901:25" pos:end="901:27"><name pos:start="901:25" pos:end="901:25">i</name><operator pos:start="901:26" pos:end="901:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="903:13" pos:end="903:54"><block_content pos:start="903:13" pos:end="903:54">

            <if_stmt pos:start="903:13" pos:end="903:54"><if pos:start="903:13" pos:end="903:54">if<condition pos:start="903:15" pos:end="903:35">(<expr pos:start="903:16" pos:end="903:34"><name pos:start="903:16" pos:end="903:28"><name pos:start="903:16" pos:end="903:25">yHistogram</name><index pos:start="903:26" pos:end="903:28">[<expr pos:start="903:27" pos:end="903:27"><name pos:start="903:27" pos:end="903:27">i</name></expr>]</index></name> <operator pos:start="903:30" pos:end="903:30">&gt;</operator> <name pos:start="903:32" pos:end="903:34">max</name></expr>)</condition><block type="pseudo" pos:start="903:37" pos:end="903:54"><block_content pos:start="903:37" pos:end="903:54"> <expr_stmt pos:start="903:37" pos:end="903:54"><expr pos:start="903:37" pos:end="903:53"><name pos:start="903:37" pos:end="903:39">max</name><operator pos:start="903:40" pos:end="903:40">=</operator><name pos:start="903:41" pos:end="903:53"><name pos:start="903:41" pos:end="903:50">yHistogram</name><index pos:start="903:51" pos:end="903:53">[<expr pos:start="903:52" pos:end="903:52"><name pos:start="903:52" pos:end="903:52">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>



        <for pos:start="907:9" pos:end="921:9">for<control pos:start="907:12" pos:end="907:28">(<init pos:start="907:13" pos:end="907:16"><expr pos:start="907:13" pos:end="907:15"><name pos:start="907:13" pos:end="907:13">i</name><operator pos:start="907:14" pos:end="907:14">=</operator><literal type="number" pos:start="907:15" pos:end="907:15">1</literal></expr>;</init> <condition pos:start="907:18" pos:end="907:23"><expr pos:start="907:18" pos:end="907:22"><name pos:start="907:18" pos:end="907:18">i</name><operator pos:start="907:19" pos:end="907:19">&lt;</operator><literal type="number" pos:start="907:20" pos:end="907:22">256</literal></expr>;</condition> <incr pos:start="907:25" pos:end="907:27"><expr pos:start="907:25" pos:end="907:27"><name pos:start="907:25" pos:end="907:25">i</name><operator pos:start="907:26" pos:end="907:27">++</operator></expr></incr>)</control><block pos:start="907:29" pos:end="921:9">{<block_content pos:start="909:13" pos:end="919:43">

            <decl_stmt pos:start="909:13" pos:end="909:18"><decl pos:start="909:13" pos:end="909:17"><type pos:start="909:13" pos:end="909:15"><name pos:start="909:13" pos:end="909:15">int</name></type> <name pos:start="909:17" pos:end="909:17">x</name></decl>;</decl_stmt>

            <decl_stmt pos:start="911:13" pos:end="911:50"><decl pos:start="911:13" pos:end="911:49"><type pos:start="911:13" pos:end="911:15"><name pos:start="911:13" pos:end="911:15">int</name></type> <name pos:start="911:17" pos:end="911:21">start</name><init pos:start="911:22" pos:end="911:49">=<expr pos:start="911:23" pos:end="911:49"><name pos:start="911:23" pos:end="911:37"><name pos:start="911:23" pos:end="911:32">yHistogram</name><index pos:start="911:33" pos:end="911:37">[<expr pos:start="911:34" pos:end="911:36"><name pos:start="911:34" pos:end="911:34">i</name><operator pos:start="911:35" pos:end="911:35">-</operator><literal type="number" pos:start="911:36" pos:end="911:36">1</literal></expr>]</index></name><operator pos:start="911:38" pos:end="911:38">/</operator><operator pos:start="911:39" pos:end="911:39">(</operator><name pos:start="911:40" pos:end="911:42">max</name><operator pos:start="911:43" pos:end="911:43">/</operator><literal type="number" pos:start="911:44" pos:end="911:47">256</literal><operator pos:start="911:47" pos:end="911:47">+</operator><literal type="number" pos:start="911:48" pos:end="911:48">1</literal><operator pos:start="911:49" pos:end="911:49">)</operator></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="913:13" pos:end="913:46"><decl pos:start="913:13" pos:end="913:45"><type pos:start="913:13" pos:end="913:15"><name pos:start="913:13" pos:end="913:15">int</name></type> <name pos:start="913:17" pos:end="913:19">end</name><init pos:start="913:20" pos:end="913:45">=<expr pos:start="913:21" pos:end="913:45"><name pos:start="913:21" pos:end="913:33"><name pos:start="913:21" pos:end="913:30">yHistogram</name><index pos:start="913:31" pos:end="913:33">[<expr pos:start="913:32" pos:end="913:32"><name pos:start="913:32" pos:end="913:32">i</name></expr>]</index></name><operator pos:start="913:34" pos:end="913:34">/</operator><operator pos:start="913:35" pos:end="913:35">(</operator><name pos:start="913:36" pos:end="913:38">max</name><operator pos:start="913:39" pos:end="913:39">/</operator><literal type="number" pos:start="913:40" pos:end="913:43">256</literal><operator pos:start="913:43" pos:end="913:43">+</operator><literal type="number" pos:start="913:44" pos:end="913:44">1</literal><operator pos:start="913:45" pos:end="913:45">)</operator></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="915:13" pos:end="915:42"><decl pos:start="915:13" pos:end="915:41"><type pos:start="915:13" pos:end="915:15"><name pos:start="915:13" pos:end="915:15">int</name></type> <name pos:start="915:17" pos:end="915:19">inc</name><init pos:start="915:20" pos:end="915:41">= <expr pos:start="915:22" pos:end="915:41"><ternary pos:start="915:22" pos:end="915:41"><condition pos:start="915:22" pos:end="915:34"><expr pos:start="915:22" pos:end="915:32"><name pos:start="915:22" pos:end="915:24">end</name> <operator pos:start="915:26" pos:end="915:26">&gt;</operator> <name pos:start="915:28" pos:end="915:32">start</name></expr> ?</condition><then pos:start="915:36" pos:end="915:36"> <expr pos:start="915:36" pos:end="915:36"><literal type="number" pos:start="915:36" pos:end="915:36">1</literal></expr> </then><else pos:start="915:38" pos:end="915:41">: <expr pos:start="915:40" pos:end="915:41"><operator pos:start="915:40" pos:end="915:40">-</operator><literal type="number" pos:start="915:41" pos:end="915:41">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <for pos:start="917:13" pos:end="919:43">for<control pos:start="917:16" pos:end="917:44">(<init pos:start="917:17" pos:end="917:24"><expr pos:start="917:17" pos:end="917:23"><name pos:start="917:17" pos:end="917:17">x</name><operator pos:start="917:18" pos:end="917:18">=</operator><name pos:start="917:19" pos:end="917:23">start</name></expr>;</init> <condition pos:start="917:26" pos:end="917:36"><expr pos:start="917:26" pos:end="917:35"><name pos:start="917:26" pos:end="917:26">x</name><operator pos:start="917:27" pos:end="917:28">!=</operator><name pos:start="917:29" pos:end="917:31">end</name><operator pos:start="917:32" pos:end="917:32">+</operator><name pos:start="917:33" pos:end="917:35">inc</name></expr>;</condition> <incr pos:start="917:38" pos:end="917:43"><expr pos:start="917:38" pos:end="917:43"><name pos:start="917:38" pos:end="917:38">x</name><operator pos:start="917:39" pos:end="917:40">+=</operator><name pos:start="917:41" pos:end="917:43">inc</name></expr></incr>)</control><block type="pseudo" pos:start="919:17" pos:end="919:43"><block_content pos:start="919:17" pos:end="919:43">

                <expr_stmt pos:start="919:17" pos:end="919:43"><expr pos:start="919:17" pos:end="919:42"><name pos:start="919:17" pos:end="919:37"><name pos:start="919:17" pos:end="919:19">dst</name><index pos:start="919:20" pos:end="919:37">[ <expr pos:start="919:22" pos:end="919:36"><name pos:start="919:22" pos:end="919:22">i</name><operator pos:start="919:23" pos:end="919:23">*</operator><name pos:start="919:24" pos:end="919:32">dstStride</name> <operator pos:start="919:34" pos:end="919:34">+</operator> <name pos:start="919:36" pos:end="919:36">x</name></expr>]</index></name><operator pos:start="919:38" pos:end="919:39">+=</operator><literal type="number" pos:start="919:40" pos:end="919:42">128</literal></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></for>



        <for pos:start="925:9" pos:end="931:9">for<control pos:start="925:12" pos:end="925:29">(<init pos:start="925:13" pos:end="925:16"><expr pos:start="925:13" pos:end="925:15"><name pos:start="925:13" pos:end="925:13">i</name><operator pos:start="925:14" pos:end="925:14">=</operator><literal type="number" pos:start="925:15" pos:end="925:15">0</literal></expr>;</init> <condition pos:start="925:18" pos:end="925:23"><expr pos:start="925:18" pos:end="925:22"><name pos:start="925:18" pos:end="925:18">i</name><operator pos:start="925:19" pos:end="925:19">&lt;</operator><literal type="number" pos:start="925:20" pos:end="925:22">100</literal></expr>;</condition> <incr pos:start="925:25" pos:end="925:28"><expr pos:start="925:25" pos:end="925:28"><name pos:start="925:25" pos:end="925:25">i</name><operator pos:start="925:26" pos:end="925:27">+=</operator><literal type="number" pos:start="925:28" pos:end="925:28">2</literal></expr></incr>)</control><block pos:start="925:30" pos:end="931:9">{<block_content pos:start="927:13" pos:end="929:45">

            <expr_stmt pos:start="927:13" pos:end="927:45"><expr pos:start="927:13" pos:end="927:44"><name pos:start="927:13" pos:end="927:39"><name pos:start="927:13" pos:end="927:15">dst</name><index pos:start="927:16" pos:end="927:39">[ <expr pos:start="927:18" pos:end="927:38"><operator pos:start="927:18" pos:end="927:18">(</operator><name pos:start="927:19" pos:end="927:23">white</name><operator pos:start="927:24" pos:end="927:24">)</operator><operator pos:start="927:25" pos:end="927:25">*</operator><name pos:start="927:26" pos:end="927:34">dstStride</name> <operator pos:start="927:36" pos:end="927:36">+</operator> <name pos:start="927:38" pos:end="927:38">i</name></expr>]</index></name><operator pos:start="927:40" pos:end="927:41">+=</operator><literal type="number" pos:start="927:42" pos:end="927:44">128</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="929:13" pos:end="929:45"><expr pos:start="929:13" pos:end="929:44"><name pos:start="929:13" pos:end="929:39"><name pos:start="929:13" pos:end="929:15">dst</name><index pos:start="929:16" pos:end="929:39">[ <expr pos:start="929:18" pos:end="929:38"><operator pos:start="929:18" pos:end="929:18">(</operator><name pos:start="929:19" pos:end="929:23">black</name><operator pos:start="929:24" pos:end="929:24">)</operator><operator pos:start="929:25" pos:end="929:25">*</operator><name pos:start="929:26" pos:end="929:34">dstStride</name> <operator pos:start="929:36" pos:end="929:36">+</operator> <name pos:start="929:38" pos:end="929:38">i</name></expr>]</index></name><operator pos:start="929:40" pos:end="929:41">+=</operator><literal type="number" pos:start="929:42" pos:end="929:44">128</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="935:1" pos:end="935:6">#<cpp:directive pos:start="935:2" pos:end="935:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="939:5" pos:end="939:11"><expr pos:start="939:5" pos:end="939:10"><operator pos:start="939:5" pos:end="939:5">*</operator><name pos:start="939:6" pos:end="939:7">c2</name><operator pos:start="939:8" pos:end="939:8">=</operator> <name pos:start="939:10" pos:end="939:10">c</name></expr>;</expr_stmt> <comment type="line" pos:start="939:13" pos:end="939:37">//copy local context back</comment>



</block_content>}</block></function>
</unit>
