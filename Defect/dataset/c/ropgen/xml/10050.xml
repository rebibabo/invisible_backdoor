<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10050.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:15">msi_notify</name><parameter_list pos:start="1:16" pos:end="1:52">(<parameter pos:start="1:17" pos:end="1:30"><decl pos:start="1:17" pos:end="1:30"><type pos:start="1:17" pos:end="1:30"><name pos:start="1:17" pos:end="1:25">PCIDevice</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:30">dev</name></decl></parameter>, <parameter pos:start="1:33" pos:end="1:51"><decl pos:start="1:33" pos:end="1:51"><type pos:start="1:33" pos:end="1:51"><name pos:start="1:33" pos:end="1:40">unsigned</name> <name pos:start="1:42" pos:end="1:44">int</name></type> <name pos:start="1:46" pos:end="1:51">vector</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="47:1">{<block_content pos:start="5:5" pos:end="45:62">

    <decl_stmt pos:start="5:5" pos:end="5:68"><decl pos:start="5:5" pos:end="5:67"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint16_t</name></type> <name pos:start="5:14" pos:end="5:18">flags</name> <init pos:start="5:20" pos:end="5:67">= <expr pos:start="5:22" pos:end="5:67"><call pos:start="5:22" pos:end="5:67"><name pos:start="5:22" pos:end="5:33">pci_get_word</name><argument_list pos:start="5:34" pos:end="5:67">(<argument pos:start="5:35" pos:end="5:66"><expr pos:start="5:35" pos:end="5:66"><name pos:start="5:35" pos:end="5:45"><name pos:start="5:35" pos:end="5:37">dev</name><operator pos:start="5:38" pos:end="5:39">-&gt;</operator><name pos:start="5:40" pos:end="5:45">config</name></name> <operator pos:start="5:47" pos:end="5:47">+</operator> <call pos:start="5:49" pos:end="5:66"><name pos:start="5:49" pos:end="5:61">msi_flags_off</name><argument_list pos:start="5:62" pos:end="5:66">(<argument pos:start="5:63" pos:end="5:65"><expr pos:start="5:63" pos:end="5:65"><name pos:start="5:63" pos:end="5:65">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:48"><decl pos:start="7:5" pos:end="7:47"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:17">msi64bit</name> <init pos:start="7:19" pos:end="7:47">= <expr pos:start="7:21" pos:end="7:47"><name pos:start="7:21" pos:end="7:25">flags</name> <operator pos:start="7:27" pos:end="7:27">&amp;</operator> <name pos:start="7:29" pos:end="7:47">PCI_MSI_FLAGS_64BIT</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:52"><decl pos:start="9:5" pos:end="9:51"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:27">nr_vectors</name> <init pos:start="9:29" pos:end="9:51">= <expr pos:start="9:31" pos:end="9:51"><call pos:start="9:31" pos:end="9:51"><name pos:start="9:31" pos:end="9:44">msi_nr_vectors</name><argument_list pos:start="9:45" pos:end="9:51">(<argument pos:start="9:46" pos:end="9:50"><expr pos:start="9:46" pos:end="9:50"><name pos:start="9:46" pos:end="9:50">flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:14">MSIMessage</name></type> <name pos:start="11:16" pos:end="11:18">msg</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:32"><expr pos:start="15:5" pos:end="15:31"><call pos:start="15:5" pos:end="15:31"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:31">(<argument pos:start="15:12" pos:end="15:30"><expr pos:start="15:12" pos:end="15:30"><name pos:start="15:12" pos:end="15:17">vector</name> <operator pos:start="15:19" pos:end="15:19">&lt;</operator> <name pos:start="15:21" pos:end="15:30">nr_vectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="29:5"><if pos:start="17:5" pos:end="29:5">if <condition pos:start="17:8" pos:end="17:35">(<expr pos:start="17:9" pos:end="17:34"><call pos:start="17:9" pos:end="17:34"><name pos:start="17:9" pos:end="17:21">msi_is_masked</name><argument_list pos:start="17:22" pos:end="17:34">(<argument pos:start="17:23" pos:end="17:25"><expr pos:start="17:23" pos:end="17:25"><name pos:start="17:23" pos:end="17:25">dev</name></expr></argument>, <argument pos:start="17:28" pos:end="17:33"><expr pos:start="17:28" pos:end="17:33"><name pos:start="17:28" pos:end="17:33">vector</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:37" pos:end="29:5">{<block_content pos:start="19:9" pos:end="27:15">

        <expr_stmt pos:start="19:9" pos:end="19:46"><expr pos:start="19:9" pos:end="19:45"><call pos:start="19:9" pos:end="19:45"><name pos:start="19:9" pos:end="19:14">assert</name><argument_list pos:start="19:15" pos:end="19:45">(<argument pos:start="19:16" pos:end="19:44"><expr pos:start="19:16" pos:end="19:44"><name pos:start="19:16" pos:end="19:20">flags</name> <operator pos:start="19:22" pos:end="19:22">&amp;</operator> <name pos:start="19:24" pos:end="19:44">PCI_MSI_FLAGS_MASKBIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="23:72"><expr pos:start="21:9" pos:end="23:71"><call pos:start="21:9" pos:end="23:71"><name pos:start="21:9" pos:end="21:34">pci_long_test_and_set_mask</name><argument_list pos:start="21:35" pos:end="23:71">(

            <argument pos:start="23:13" pos:end="23:56"><expr pos:start="23:13" pos:end="23:56"><name pos:start="23:13" pos:end="23:23"><name pos:start="23:13" pos:end="23:15">dev</name><operator pos:start="23:16" pos:end="23:17">-&gt;</operator><name pos:start="23:18" pos:end="23:23">config</name></name> <operator pos:start="23:25" pos:end="23:25">+</operator> <call pos:start="23:27" pos:end="23:56"><name pos:start="23:27" pos:end="23:41">msi_pending_off</name><argument_list pos:start="23:42" pos:end="23:56">(<argument pos:start="23:43" pos:end="23:45"><expr pos:start="23:43" pos:end="23:45"><name pos:start="23:43" pos:end="23:45">dev</name></expr></argument>, <argument pos:start="23:48" pos:end="23:55"><expr pos:start="23:48" pos:end="23:55"><name pos:start="23:48" pos:end="23:55">msi64bit</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="23:59" pos:end="23:70"><expr pos:start="23:59" pos:end="23:70"><literal type="number" pos:start="23:59" pos:end="23:60">1U</literal> <operator pos:start="23:62" pos:end="23:63">&lt;&lt;</operator> <name pos:start="23:65" pos:end="23:70">vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:61"><expr pos:start="25:9" pos:end="25:60"><call pos:start="25:9" pos:end="25:60"><name pos:start="25:9" pos:end="25:22">MSI_DEV_PRINTF</name><argument_list pos:start="25:23" pos:end="25:60">(<argument pos:start="25:24" pos:end="25:26"><expr pos:start="25:24" pos:end="25:26"><name pos:start="25:24" pos:end="25:26">dev</name></expr></argument>, <argument pos:start="25:29" pos:end="25:51"><expr pos:start="25:29" pos:end="25:51"><literal type="string" pos:start="25:29" pos:end="25:51">"pending vector 0x%x\n"</literal></expr></argument>, <argument pos:start="25:54" pos:end="25:59"><expr pos:start="25:54" pos:end="25:59"><name pos:start="25:54" pos:end="25:59">vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:39"><expr pos:start="33:5" pos:end="33:38"><name pos:start="33:5" pos:end="33:7">msg</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:38"><name pos:start="33:11" pos:end="33:25">msi_get_message</name><argument_list pos:start="33:26" pos:end="33:38">(<argument pos:start="33:27" pos:end="33:29"><expr pos:start="33:27" pos:end="33:29"><name pos:start="33:27" pos:end="33:29">dev</name></expr></argument>, <argument pos:start="33:32" pos:end="33:37"><expr pos:start="33:32" pos:end="33:37"><name pos:start="33:32" pos:end="33:37">vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="43:50"><expr pos:start="37:5" pos:end="43:49"><call pos:start="37:5" pos:end="43:49"><name pos:start="37:5" pos:end="37:18">MSI_DEV_PRINTF</name><argument_list pos:start="37:19" pos:end="43:49">(<argument pos:start="37:20" pos:end="37:22"><expr pos:start="37:20" pos:end="37:22"><name pos:start="37:20" pos:end="37:22">dev</name></expr></argument>,

                   <argument pos:start="39:20" pos:end="41:62"><expr pos:start="39:20" pos:end="41:62"><literal type="string" pos:start="39:20" pos:end="39:39">"notify vector 0x%x"</literal>

                   <literal type="string" pos:start="41:20" pos:end="41:34">" address: 0x%"</literal><name pos:start="41:35" pos:end="41:40">PRIx64</name><literal type="string" pos:start="41:41" pos:end="41:52">" data: 0x%"</literal><name pos:start="41:53" pos:end="41:58">PRIx32</name><literal type="string" pos:start="41:59" pos:end="41:62">"\n"</literal></expr></argument>,

                   <argument pos:start="43:20" pos:end="43:25"><expr pos:start="43:20" pos:end="43:25"><name pos:start="43:20" pos:end="43:25">vector</name></expr></argument>, <argument pos:start="43:28" pos:end="43:38"><expr pos:start="43:28" pos:end="43:38"><name pos:start="43:28" pos:end="43:38"><name pos:start="43:28" pos:end="43:30">msg</name><operator pos:start="43:31" pos:end="43:31">.</operator><name pos:start="43:32" pos:end="43:38">address</name></name></expr></argument>, <argument pos:start="43:41" pos:end="43:48"><expr pos:start="43:41" pos:end="43:48"><name pos:start="43:41" pos:end="43:48"><name pos:start="43:41" pos:end="43:43">msg</name><operator pos:start="43:44" pos:end="43:44">.</operator><name pos:start="43:45" pos:end="43:48">data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:62"><expr pos:start="45:5" pos:end="45:61"><call pos:start="45:5" pos:end="45:61"><name pos:start="45:5" pos:end="45:15">stl_le_phys</name><argument_list pos:start="45:16" pos:end="45:61">(<argument pos:start="45:17" pos:end="45:37"><expr pos:start="45:17" pos:end="45:37"><operator pos:start="45:17" pos:end="45:17">&amp;</operator><name pos:start="45:18" pos:end="45:37">address_space_memory</name></expr></argument>, <argument pos:start="45:40" pos:end="45:50"><expr pos:start="45:40" pos:end="45:50"><name pos:start="45:40" pos:end="45:50"><name pos:start="45:40" pos:end="45:42">msg</name><operator pos:start="45:43" pos:end="45:43">.</operator><name pos:start="45:44" pos:end="45:50">address</name></name></expr></argument>, <argument pos:start="45:53" pos:end="45:60"><expr pos:start="45:53" pos:end="45:60"><name pos:start="45:53" pos:end="45:60"><name pos:start="45:53" pos:end="45:55">msg</name><operator pos:start="45:56" pos:end="45:56">.</operator><name pos:start="45:57" pos:end="45:60">data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
