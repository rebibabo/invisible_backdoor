<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/726.c" pos:tabs="8"><function pos:start="1:1" pos:end="721:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">decode_gusa</name><parameter_list pos:start="1:23" pos:end="1:76">(<parameter pos:start="1:24" pos:end="1:40"><decl pos:start="1:24" pos:end="1:40"><type pos:start="1:24" pos:end="1:40"><name pos:start="1:24" pos:end="1:35">DisasContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">ctx</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:58"><decl pos:start="1:43" pos:end="1:58"><type pos:start="1:43" pos:end="1:58"><name pos:start="1:43" pos:end="1:53">CPUSH4State</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:58">env</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:75"><decl pos:start="1:61" pos:end="1:75"><type pos:start="1:61" pos:end="1:75"><name pos:start="1:61" pos:end="1:63">int</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:75">pmax_insns</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="721:1">{<block_content pos:start="5:5" pos:end="719:13">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint16_t</name></type> <name pos:start="5:14" pos:end="5:21"><name pos:start="5:14" pos:end="5:18">insns</name><index pos:start="5:19" pos:end="5:21">[<expr pos:start="5:20" pos:end="5:20"><literal type="number" pos:start="5:20" pos:end="5:20">5</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">ld_adr</name></decl>, <decl pos:start="7:17" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:17" pos:end="7:22">ld_dst</name></decl>, <decl pos:start="7:25" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:25" pos:end="7:30">ld_mop</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">op_dst</name></decl>, <decl pos:start="9:17" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:17" pos:end="9:22">op_src</name></decl>, <decl pos:start="9:25" pos:end="9:30"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:25" pos:end="9:30">op_opc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:14">mv_src</name></decl>, <decl pos:start="11:17" pos:end="11:22"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:17" pos:end="11:22">mt_dst</name></decl>, <decl pos:start="11:25" pos:end="11:30"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:25" pos:end="11:30">st_src</name></decl>, <decl pos:start="11:33" pos:end="11:38"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:33" pos:end="11:38">st_mop</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">TCGv</name></type> <name pos:start="13:10" pos:end="13:15">op_arg</name></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:15">pc</name> <init pos:start="17:17" pos:end="17:25">= <expr pos:start="17:19" pos:end="17:25"><name pos:start="17:19" pos:end="17:25"><name pos:start="17:19" pos:end="17:21">ctx</name><operator pos:start="17:22" pos:end="17:23">-&gt;</operator><name pos:start="17:24" pos:end="17:25">pc</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:39"><decl pos:start="19:5" pos:end="19:38"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:19">pc_end</name> <init pos:start="19:21" pos:end="19:38">= <expr pos:start="19:23" pos:end="19:38"><name pos:start="19:23" pos:end="19:38"><name pos:start="19:23" pos:end="19:25">ctx</name><operator pos:start="19:26" pos:end="19:27">-&gt;</operator><name pos:start="19:28" pos:end="19:29">tb</name><operator pos:start="19:30" pos:end="19:31">-&gt;</operator><name pos:start="19:32" pos:end="19:38">cs_base</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:57"><decl pos:start="21:5" pos:end="21:56"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:14">backup</name> <init pos:start="21:16" pos:end="21:56">= <expr pos:start="21:18" pos:end="21:56"><call pos:start="21:18" pos:end="21:56"><name pos:start="21:18" pos:end="21:27">sextract32</name><argument_list pos:start="21:28" pos:end="21:56">(<argument pos:start="21:29" pos:end="21:40"><expr pos:start="21:29" pos:end="21:40"><name pos:start="21:29" pos:end="21:40"><name pos:start="21:29" pos:end="21:31">ctx</name><operator pos:start="21:32" pos:end="21:33">-&gt;</operator><name pos:start="21:34" pos:end="21:40">tbflags</name></name></expr></argument>, <argument pos:start="21:43" pos:end="21:52"><expr pos:start="21:43" pos:end="21:52"><name pos:start="21:43" pos:end="21:52">GUSA_SHIFT</name></expr></argument>, <argument pos:start="21:55" pos:end="21:55"><expr pos:start="21:55" pos:end="21:55"><literal type="number" pos:start="21:55" pos:end="21:55">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:38"><decl pos:start="23:5" pos:end="23:37"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:17">max_insns</name> <init pos:start="23:19" pos:end="23:37">= <expr pos:start="23:21" pos:end="23:37"><operator pos:start="23:21" pos:end="23:21">(</operator><name pos:start="23:22" pos:end="23:27">pc_end</name> <operator pos:start="23:29" pos:end="23:29">-</operator> <name pos:start="23:31" pos:end="23:32">pc</name><operator pos:start="23:33" pos:end="23:33">)</operator> <operator pos:start="23:35" pos:end="23:35">/</operator> <literal type="number" pos:start="23:37" pos:end="23:37">2</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:10"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="39:5"><if pos:start="29:5" pos:end="39:5">if <condition pos:start="29:8" pos:end="29:47">(<expr pos:start="29:9" pos:end="29:46"><name pos:start="29:9" pos:end="29:10">pc</name> <operator pos:start="29:12" pos:end="29:13">!=</operator> <name pos:start="29:15" pos:end="29:20">pc_end</name> <operator pos:start="29:22" pos:end="29:22">+</operator> <name pos:start="29:24" pos:end="29:29">backup</name> <operator pos:start="29:31" pos:end="29:32">||</operator> <name pos:start="29:34" pos:end="29:42">max_insns</name> <operator pos:start="29:44" pos:end="29:44">&lt;</operator> <literal type="number" pos:start="29:46" pos:end="29:46">2</literal></expr>)</condition> <block pos:start="29:49" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:17">

        <comment type="block" pos:start="31:9" pos:end="33:63">/* This is a malformed gUSA region.  Don't do anything special,

           since the interpreter is likely to get confused.  */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:36"><expr pos:start="35:9" pos:end="35:35"><name pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:11">ctx</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:21">envflags</name></name> <operator pos:start="35:23" pos:end="35:24">&amp;=</operator> <operator pos:start="35:26" pos:end="35:26">~</operator><name pos:start="35:27" pos:end="35:35">GUSA_MASK</name></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:17">return <expr pos:start="37:16" pos:end="37:16"><literal type="number" pos:start="37:16" pos:end="37:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="43:5" pos:end="55:5"><if pos:start="43:5" pos:end="55:5">if <condition pos:start="43:8" pos:end="43:38">(<expr pos:start="43:9" pos:end="43:37"><name pos:start="43:9" pos:end="43:20"><name pos:start="43:9" pos:end="43:11">ctx</name><operator pos:start="43:12" pos:end="43:13">-&gt;</operator><name pos:start="43:14" pos:end="43:20">tbflags</name></name> <operator pos:start="43:22" pos:end="43:22">&amp;</operator> <name pos:start="43:24" pos:end="43:37">GUSA_EXCLUSIVE</name></expr>)</condition> <block pos:start="43:40" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:17">

        <comment type="block" pos:start="45:9" pos:end="49:42">/* Regardless of single-stepping or the end of the page,

           we must complete execution of the gUSA region while

           holding the exclusive lock.  */</comment>

        <expr_stmt pos:start="51:9" pos:end="51:32"><expr pos:start="51:9" pos:end="51:31"><operator pos:start="51:9" pos:end="51:9">*</operator><name pos:start="51:10" pos:end="51:19">pmax_insns</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <name pos:start="51:23" pos:end="51:31">max_insns</name></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:17">return <expr pos:start="53:16" pos:end="53:16"><literal type="number" pos:start="53:16" pos:end="53:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="59:5" pos:end="61:61">/* The state machine below will consume only a few insns.

       If there are more than that in a region, fail now.  */</comment>

    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:38">(<expr pos:start="63:9" pos:end="63:37"><name pos:start="63:9" pos:end="63:17">max_insns</name> <operator pos:start="63:19" pos:end="63:19">&gt;</operator> <call pos:start="63:21" pos:end="63:37"><name pos:start="63:21" pos:end="63:30">ARRAY_SIZE</name><argument_list pos:start="63:31" pos:end="63:37">(<argument pos:start="63:32" pos:end="63:36"><expr pos:start="63:32" pos:end="63:36"><name pos:start="63:32" pos:end="63:36">insns</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:40" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:18">

        <goto pos:start="65:9" pos:end="65:18">goto <name pos:start="65:14" pos:end="65:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:48">/* Read all of the insns for the region.  */</comment>

    <for pos:start="73:5" pos:end="77:5">for <control pos:start="73:9" pos:end="73:35">(<init pos:start="73:10" pos:end="73:15"><expr pos:start="73:10" pos:end="73:14"><name pos:start="73:10" pos:end="73:10">i</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <literal type="number" pos:start="73:14" pos:end="73:14">0</literal></expr>;</init> <condition pos:start="73:17" pos:end="73:30"><expr pos:start="73:17" pos:end="73:29"><name pos:start="73:17" pos:end="73:17">i</name> <operator pos:start="73:19" pos:end="73:19">&lt;</operator> <name pos:start="73:21" pos:end="73:29">max_insns</name></expr>;</condition> <incr pos:start="73:32" pos:end="73:34"><expr pos:start="73:32" pos:end="73:34"><operator pos:start="73:32" pos:end="73:33">++</operator><name pos:start="73:34" pos:end="73:34">i</name></expr></incr>)</control> <block pos:start="73:37" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:50">

        <expr_stmt pos:start="75:9" pos:end="75:50"><expr pos:start="75:9" pos:end="75:49"><name pos:start="75:9" pos:end="75:16"><name pos:start="75:9" pos:end="75:13">insns</name><index pos:start="75:14" pos:end="75:16">[<expr pos:start="75:15" pos:end="75:15"><name pos:start="75:15" pos:end="75:15">i</name></expr>]</index></name> <operator pos:start="75:18" pos:end="75:18">=</operator> <call pos:start="75:20" pos:end="75:49"><name pos:start="75:20" pos:end="75:32">cpu_lduw_code</name><argument_list pos:start="75:33" pos:end="75:49">(<argument pos:start="75:34" pos:end="75:36"><expr pos:start="75:34" pos:end="75:36"><name pos:start="75:34" pos:end="75:36">env</name></expr></argument>, <argument pos:start="75:39" pos:end="75:48"><expr pos:start="75:39" pos:end="75:48"><name pos:start="75:39" pos:end="75:40">pc</name> <operator pos:start="75:42" pos:end="75:42">+</operator> <name pos:start="75:44" pos:end="75:44">i</name> <operator pos:start="75:46" pos:end="75:46">*</operator> <literal type="number" pos:start="75:48" pos:end="75:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="81:5" pos:end="81:34"><expr pos:start="81:5" pos:end="81:33"><name pos:start="81:5" pos:end="81:10">ld_adr</name> <operator pos:start="81:12" pos:end="81:12">=</operator> <name pos:start="81:14" pos:end="81:19">ld_dst</name> <operator pos:start="81:21" pos:end="81:21">=</operator> <name pos:start="81:23" pos:end="81:28">ld_mop</name> <operator pos:start="81:30" pos:end="81:30">=</operator> <operator pos:start="81:32" pos:end="81:32">-</operator><literal type="number" pos:start="81:33" pos:end="81:33">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:16"><expr pos:start="83:5" pos:end="83:15"><name pos:start="83:5" pos:end="83:10">mv_src</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <operator pos:start="83:14" pos:end="83:14">-</operator><literal type="number" pos:start="83:15" pos:end="83:15">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:34"><expr pos:start="85:5" pos:end="85:33"><name pos:start="85:5" pos:end="85:10">op_dst</name> <operator pos:start="85:12" pos:end="85:12">=</operator> <name pos:start="85:14" pos:end="85:19">op_src</name> <operator pos:start="85:21" pos:end="85:21">=</operator> <name pos:start="85:23" pos:end="85:28">op_opc</name> <operator pos:start="85:30" pos:end="85:30">=</operator> <operator pos:start="85:32" pos:end="85:32">-</operator><literal type="number" pos:start="85:33" pos:end="85:33">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:16"><expr pos:start="87:5" pos:end="87:15"><name pos:start="87:5" pos:end="87:10">mt_dst</name> <operator pos:start="87:12" pos:end="87:12">=</operator> <operator pos:start="87:14" pos:end="87:14">-</operator><literal type="number" pos:start="87:15" pos:end="87:15">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:25"><expr pos:start="89:5" pos:end="89:24"><name pos:start="89:5" pos:end="89:10">st_src</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <name pos:start="89:14" pos:end="89:19">st_mop</name> <operator pos:start="89:21" pos:end="89:21">=</operator> <operator pos:start="89:23" pos:end="89:23">-</operator><literal type="number" pos:start="89:24" pos:end="89:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:24"><expr pos:start="91:5" pos:end="91:23"><call pos:start="91:5" pos:end="91:23"><name pos:start="91:5" pos:end="91:15">TCGV_UNUSED</name><argument_list pos:start="91:16" pos:end="91:23">(<argument pos:start="91:17" pos:end="91:22"><expr pos:start="91:17" pos:end="91:22"><name pos:start="91:17" pos:end="91:22">op_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="100:0"><expr pos:start="93:5" pos:end="93:9"><name pos:start="93:5" pos:end="93:5">i</name> <operator pos:start="93:7" pos:end="93:7">=</operator> <literal type="number" pos:start="93:9" pos:end="93:9">0</literal></expr>;</expr_stmt>



<cpp:define pos:start="97:1" pos:end="99:77">#<cpp:directive pos:start="97:2" pos:end="97:7">define</cpp:directive> <cpp:macro pos:start="97:9" pos:end="97:17"><name pos:start="97:9" pos:end="97:17">NEXT_INSN</name></cpp:macro> \

    <cpp:value pos:start="99:5" pos:end="99:77">do { if (i &gt;= max_insns) goto fail; ctx-&gt;opcode = insns[i++]; } while (0)</cpp:value></cpp:define>



    <comment type="block" pos:start="103:5" pos:end="107:7">/*

     * Expect a load to begin the region.

     */</comment>

    <expr_stmt pos:start="109:5" pos:end="109:14"><expr pos:start="109:5" pos:end="109:13"><name pos:start="109:5" pos:end="109:13">NEXT_INSN</name></expr>;</expr_stmt>

    <switch pos:start="111:5" pos:end="135:5">switch <condition pos:start="111:12" pos:end="111:33">(<expr pos:start="111:13" pos:end="111:32"><name pos:start="111:13" pos:end="111:23"><name pos:start="111:13" pos:end="111:15">ctx</name><operator pos:start="111:16" pos:end="111:17">-&gt;</operator><name pos:start="111:18" pos:end="111:23">opcode</name></name> <operator pos:start="111:25" pos:end="111:25">&amp;</operator> <literal type="number" pos:start="111:27" pos:end="111:32">0xf00f</literal></expr>)</condition> <block pos:start="111:35" pos:end="135:5">{<block_content pos:start="113:5" pos:end="133:18">

    <case pos:start="113:5" pos:end="113:16">case <expr pos:start="113:10" pos:end="113:15"><literal type="number" pos:start="113:10" pos:end="113:15">0x6000</literal></expr>:</case> <comment type="block" pos:start="113:18" pos:end="113:35">/* mov.b @Rm,Rn */</comment>

        <expr_stmt pos:start="115:9" pos:end="115:23"><expr pos:start="115:9" pos:end="115:22"><name pos:start="115:9" pos:end="115:14">ld_mop</name> <operator pos:start="115:16" pos:end="115:16">=</operator> <name pos:start="115:18" pos:end="115:22">MO_SB</name></expr>;</expr_stmt>

        <break pos:start="117:9" pos:end="117:14">break;</break>

    <case pos:start="119:5" pos:end="119:16">case <expr pos:start="119:10" pos:end="119:15"><literal type="number" pos:start="119:10" pos:end="119:15">0x6001</literal></expr>:</case> <comment type="block" pos:start="119:18" pos:end="119:35">/* mov.w @Rm,Rn */</comment>

        <expr_stmt pos:start="121:9" pos:end="121:25"><expr pos:start="121:9" pos:end="121:24"><name pos:start="121:9" pos:end="121:14">ld_mop</name> <operator pos:start="121:16" pos:end="121:16">=</operator> <name pos:start="121:18" pos:end="121:24">MO_TESW</name></expr>;</expr_stmt>

        <break pos:start="123:9" pos:end="123:14">break;</break>

    <case pos:start="125:5" pos:end="125:16">case <expr pos:start="125:10" pos:end="125:15"><literal type="number" pos:start="125:10" pos:end="125:15">0x6002</literal></expr>:</case> <comment type="block" pos:start="125:18" pos:end="125:35">/* mov.l @Rm,Rn */</comment>

        <expr_stmt pos:start="127:9" pos:end="127:25"><expr pos:start="127:9" pos:end="127:24"><name pos:start="127:9" pos:end="127:14">ld_mop</name> <operator pos:start="127:16" pos:end="127:16">=</operator> <name pos:start="127:18" pos:end="127:24">MO_TESL</name></expr>;</expr_stmt>

        <break pos:start="129:9" pos:end="129:14">break;</break>

    <default pos:start="131:5" pos:end="131:12">default:</default>

        <goto pos:start="133:9" pos:end="133:18">goto <name pos:start="133:14" pos:end="133:17">fail</name>;</goto>

    </block_content>}</block></switch>

    <expr_stmt pos:start="137:5" pos:end="137:18"><expr pos:start="137:5" pos:end="137:17"><name pos:start="137:5" pos:end="137:10">ld_adr</name> <operator pos:start="137:12" pos:end="137:12">=</operator> <name pos:start="137:14" pos:end="137:17">B7_4</name></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:19"><expr pos:start="139:5" pos:end="139:18"><name pos:start="139:5" pos:end="139:10">ld_dst</name> <operator pos:start="139:12" pos:end="139:12">=</operator> <name pos:start="139:14" pos:end="139:18">B11_8</name></expr>;</expr_stmt>

    <if_stmt pos:start="141:5" pos:end="145:5"><if pos:start="141:5" pos:end="145:5">if <condition pos:start="141:8" pos:end="141:25">(<expr pos:start="141:9" pos:end="141:24"><name pos:start="141:9" pos:end="141:14">ld_adr</name> <operator pos:start="141:16" pos:end="141:17">==</operator> <name pos:start="141:19" pos:end="141:24">ld_dst</name></expr>)</condition> <block pos:start="141:27" pos:end="145:5">{<block_content pos:start="143:9" pos:end="143:18">

        <goto pos:start="143:9" pos:end="143:18">goto <name pos:start="143:14" pos:end="143:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="147:5" pos:end="147:74">/* Unless we see a mov, any two-operand operation must use ld_dst.  */</comment>

    <expr_stmt pos:start="149:5" pos:end="149:20"><expr pos:start="149:5" pos:end="149:19"><name pos:start="149:5" pos:end="149:10">op_dst</name> <operator pos:start="149:12" pos:end="149:12">=</operator> <name pos:start="149:14" pos:end="149:19">ld_dst</name></expr>;</expr_stmt>



    <comment type="block" pos:start="153:5" pos:end="157:7">/*

     * Expect an optional register move.

     */</comment>

    <expr_stmt pos:start="159:5" pos:end="159:14"><expr pos:start="159:5" pos:end="159:13"><name pos:start="159:5" pos:end="159:13">NEXT_INSN</name></expr>;</expr_stmt>

    <switch pos:start="161:5" pos:end="201:5">switch <condition pos:start="161:12" pos:end="161:33">(<expr pos:start="161:13" pos:end="161:32"><name pos:start="161:13" pos:end="161:23"><name pos:start="161:13" pos:end="161:15">ctx</name><operator pos:start="161:16" pos:end="161:17">-&gt;</operator><name pos:start="161:18" pos:end="161:23">opcode</name></name> <operator pos:start="161:25" pos:end="161:25">&amp;</operator> <literal type="number" pos:start="161:27" pos:end="161:32">0xf00f</literal></expr>)</condition> <block pos:start="161:35" pos:end="201:5">{<block_content pos:start="163:5" pos:end="199:12">

    <case pos:start="163:5" pos:end="163:16">case <expr pos:start="163:10" pos:end="163:15"><literal type="number" pos:start="163:10" pos:end="163:15">0x6003</literal></expr>:</case> <comment type="block" pos:start="163:18" pos:end="163:32">/* mov Rm,Rn */</comment>

        <comment type="block" pos:start="165:9" pos:end="169:49">/* Here we want to recognize ld_dst being saved for later consumtion,

           or for another input register being copied so that ld_dst need not

           be clobbered during the operation.  */</comment>

        <expr_stmt pos:start="171:9" pos:end="171:23"><expr pos:start="171:9" pos:end="171:22"><name pos:start="171:9" pos:end="171:14">op_dst</name> <operator pos:start="171:16" pos:end="171:16">=</operator> <name pos:start="171:18" pos:end="171:22">B11_8</name></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:22"><expr pos:start="173:9" pos:end="173:21"><name pos:start="173:9" pos:end="173:14">mv_src</name> <operator pos:start="173:16" pos:end="173:16">=</operator> <name pos:start="173:18" pos:end="173:21">B7_4</name></expr>;</expr_stmt>

        <if_stmt pos:start="175:9" pos:end="181:9"><if pos:start="175:9" pos:end="181:9">if <condition pos:start="175:12" pos:end="175:29">(<expr pos:start="175:13" pos:end="175:28"><name pos:start="175:13" pos:end="175:18">op_dst</name> <operator pos:start="175:20" pos:end="175:21">==</operator> <name pos:start="175:23" pos:end="175:28">ld_dst</name></expr>)</condition> <block pos:start="175:31" pos:end="181:9">{<block_content pos:start="179:13" pos:end="179:22">

            <comment type="block" pos:start="177:13" pos:end="177:47">/* Overwriting the load output.  */</comment>

            <goto pos:start="179:13" pos:end="179:22">goto <name pos:start="179:18" pos:end="179:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="183:9" pos:end="189:9"><if pos:start="183:9" pos:end="189:9">if <condition pos:start="183:12" pos:end="183:29">(<expr pos:start="183:13" pos:end="183:28"><name pos:start="183:13" pos:end="183:18">mv_src</name> <operator pos:start="183:20" pos:end="183:21">!=</operator> <name pos:start="183:23" pos:end="183:28">ld_dst</name></expr>)</condition> <block pos:start="183:31" pos:end="189:9">{<block_content pos:start="187:13" pos:end="187:28">

            <comment type="block" pos:start="185:13" pos:end="185:75">/* Copying a new input; constrain op_src to match the load.  */</comment>

            <expr_stmt pos:start="187:13" pos:end="187:28"><expr pos:start="187:13" pos:end="187:27"><name pos:start="187:13" pos:end="187:18">op_src</name> <operator pos:start="187:20" pos:end="187:20">=</operator> <name pos:start="187:22" pos:end="187:27">ld_dst</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="191:9" pos:end="191:14">break;</break>



    <default pos:start="195:5" pos:end="195:12">default:</default>

        <comment type="block" pos:start="197:9" pos:end="197:52">/* Put back and re-examine as operation.  */</comment>

        <expr_stmt pos:start="199:9" pos:end="199:12"><expr pos:start="199:9" pos:end="199:11"><operator pos:start="199:9" pos:end="199:10">--</operator><name pos:start="199:11" pos:end="199:11">i</name></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <comment type="block" pos:start="205:5" pos:end="209:7">/*

     * Expect the operation.

     */</comment>

    <expr_stmt pos:start="211:5" pos:end="211:14"><expr pos:start="211:5" pos:end="211:13"><name pos:start="211:5" pos:end="211:13">NEXT_INSN</name></expr>;</expr_stmt>

    <switch pos:start="213:5" pos:end="423:5">switch <condition pos:start="213:12" pos:end="213:33">(<expr pos:start="213:13" pos:end="213:32"><name pos:start="213:13" pos:end="213:23"><name pos:start="213:13" pos:end="213:15">ctx</name><operator pos:start="213:16" pos:end="213:17">-&gt;</operator><name pos:start="213:18" pos:end="213:23">opcode</name></name> <operator pos:start="213:25" pos:end="213:25">&amp;</operator> <literal type="number" pos:start="213:27" pos:end="213:32">0xf00f</literal></expr>)</condition> <block pos:start="213:35" pos:end="423:5">{<block_content pos:start="215:5" pos:end="421:12">

    <case pos:start="215:5" pos:end="215:16">case <expr pos:start="215:10" pos:end="215:15"><literal type="number" pos:start="215:10" pos:end="215:15">0x300c</literal></expr>:</case> <comment type="block" pos:start="215:18" pos:end="215:32">/* add Rm,Rn */</comment>

        <expr_stmt pos:start="217:9" pos:end="217:34"><expr pos:start="217:9" pos:end="217:33"><name pos:start="217:9" pos:end="217:14">op_opc</name> <operator pos:start="217:16" pos:end="217:16">=</operator> <name pos:start="217:18" pos:end="217:33">INDEX_op_add_i32</name></expr>;</expr_stmt>

        <goto pos:start="219:9" pos:end="219:23">goto <name pos:start="219:14" pos:end="219:22">do_reg_op</name>;</goto>

    <case pos:start="221:5" pos:end="221:16">case <expr pos:start="221:10" pos:end="221:15"><literal type="number" pos:start="221:10" pos:end="221:15">0x2009</literal></expr>:</case> <comment type="block" pos:start="221:18" pos:end="221:32">/* and Rm,Rn */</comment>

        <expr_stmt pos:start="223:9" pos:end="223:34"><expr pos:start="223:9" pos:end="223:33"><name pos:start="223:9" pos:end="223:14">op_opc</name> <operator pos:start="223:16" pos:end="223:16">=</operator> <name pos:start="223:18" pos:end="223:33">INDEX_op_and_i32</name></expr>;</expr_stmt>

        <goto pos:start="225:9" pos:end="225:23">goto <name pos:start="225:14" pos:end="225:22">do_reg_op</name>;</goto>

    <case pos:start="227:5" pos:end="227:16">case <expr pos:start="227:10" pos:end="227:15"><literal type="number" pos:start="227:10" pos:end="227:15">0x200a</literal></expr>:</case> <comment type="block" pos:start="227:18" pos:end="227:32">/* xor Rm,Rn */</comment>

        <expr_stmt pos:start="229:9" pos:end="229:34"><expr pos:start="229:9" pos:end="229:33"><name pos:start="229:9" pos:end="229:14">op_opc</name> <operator pos:start="229:16" pos:end="229:16">=</operator> <name pos:start="229:18" pos:end="229:33">INDEX_op_xor_i32</name></expr>;</expr_stmt>

        <goto pos:start="231:9" pos:end="231:23">goto <name pos:start="231:14" pos:end="231:22">do_reg_op</name>;</goto>

    <case pos:start="233:5" pos:end="233:16">case <expr pos:start="233:10" pos:end="233:15"><literal type="number" pos:start="233:10" pos:end="233:15">0x200b</literal></expr>:</case> <comment type="block" pos:start="233:18" pos:end="233:31">/* or Rm,Rn */</comment>

        <expr_stmt pos:start="235:9" pos:end="235:33"><expr pos:start="235:9" pos:end="235:32"><name pos:start="235:9" pos:end="235:14">op_opc</name> <operator pos:start="235:16" pos:end="235:16">=</operator> <name pos:start="235:18" pos:end="235:32">INDEX_op_or_i32</name></expr>;</expr_stmt>

    <label pos:start="237:5" pos:end="237:14"><name pos:start="237:5" pos:end="237:13">do_reg_op</name>:</label>

        <comment type="block" pos:start="239:9" pos:end="241:53">/* The operation register should be as expected, and the

           other input cannot depend on the load.  */</comment>

        <if_stmt pos:start="243:9" pos:end="247:9"><if pos:start="243:9" pos:end="247:9">if <condition pos:start="243:12" pos:end="243:28">(<expr pos:start="243:13" pos:end="243:27"><name pos:start="243:13" pos:end="243:18">op_dst</name> <operator pos:start="243:20" pos:end="243:21">!=</operator> <name pos:start="243:23" pos:end="243:27">B11_8</name></expr>)</condition> <block pos:start="243:30" pos:end="247:9">{<block_content pos:start="245:13" pos:end="245:22">

            <goto pos:start="245:13" pos:end="245:22">goto <name pos:start="245:18" pos:end="245:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="249:9" pos:end="271:9"><if pos:start="249:9" pos:end="255:9">if <condition pos:start="249:12" pos:end="249:23">(<expr pos:start="249:13" pos:end="249:22"><name pos:start="249:13" pos:end="249:18">op_src</name> <operator pos:start="249:20" pos:end="249:20">&lt;</operator> <literal type="number" pos:start="249:22" pos:end="249:22">0</literal></expr>)</condition> <block pos:start="249:25" pos:end="255:9">{<block_content pos:start="253:13" pos:end="253:26">

            <comment type="block" pos:start="251:13" pos:end="251:40">/* Unconstrainted input.  */</comment>

            <expr_stmt pos:start="253:13" pos:end="253:26"><expr pos:start="253:13" pos:end="253:25"><name pos:start="253:13" pos:end="253:18">op_src</name> <operator pos:start="253:20" pos:end="253:20">=</operator> <name pos:start="253:22" pos:end="253:25">B7_4</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="255:11" pos:end="267:9">else if <condition pos:start="255:19" pos:end="255:34">(<expr pos:start="255:20" pos:end="255:33"><name pos:start="255:20" pos:end="255:25">op_src</name> <operator pos:start="255:27" pos:end="255:28">==</operator> <name pos:start="255:30" pos:end="255:33">B7_4</name></expr>)</condition> <block pos:start="255:36" pos:end="267:9">{<block_content pos:start="265:13" pos:end="265:28">

            <comment type="block" pos:start="257:13" pos:end="263:53">/* Constrained input matched load.  All operations are

               commutative; "swap" them by "moving" the load output

               to the (implicit) first argument and the move source

               to the (explicit) second argument.  */</comment>

            <expr_stmt pos:start="265:13" pos:end="265:28"><expr pos:start="265:13" pos:end="265:27"><name pos:start="265:13" pos:end="265:18">op_src</name> <operator pos:start="265:20" pos:end="265:20">=</operator> <name pos:start="265:22" pos:end="265:27">mv_src</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="267:11" pos:end="271:9">else <block pos:start="267:16" pos:end="271:9">{<block_content pos:start="269:13" pos:end="269:22">

            <goto pos:start="269:13" pos:end="269:22">goto <name pos:start="269:18" pos:end="269:21">fail</name>;</goto>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:29"><expr pos:start="273:9" pos:end="273:28"><name pos:start="273:9" pos:end="273:14">op_arg</name> <operator pos:start="273:16" pos:end="273:16">=</operator> <call pos:start="273:18" pos:end="273:28"><name pos:start="273:18" pos:end="273:20">REG</name><argument_list pos:start="273:21" pos:end="273:28">(<argument pos:start="273:22" pos:end="273:27"><expr pos:start="273:22" pos:end="273:27"><name pos:start="273:22" pos:end="273:27">op_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="275:9" pos:end="275:14">break;</break>



    <case pos:start="279:5" pos:end="279:16">case <expr pos:start="279:10" pos:end="279:15"><literal type="number" pos:start="279:10" pos:end="279:15">0x6007</literal></expr>:</case> <comment type="block" pos:start="279:18" pos:end="279:32">/* not Rm,Rn */</comment>

        <if_stmt pos:start="281:9" pos:end="285:9"><if pos:start="281:9" pos:end="285:9">if <condition pos:start="281:12" pos:end="281:42">(<expr pos:start="281:13" pos:end="281:41"><name pos:start="281:13" pos:end="281:18">ld_dst</name> <operator pos:start="281:20" pos:end="281:21">!=</operator> <name pos:start="281:23" pos:end="281:26">B7_4</name> <operator pos:start="281:28" pos:end="281:29">||</operator> <name pos:start="281:31" pos:end="281:36">mv_src</name> <operator pos:start="281:38" pos:end="281:39">&gt;=</operator> <literal type="number" pos:start="281:41" pos:end="281:41">0</literal></expr>)</condition> <block pos:start="281:44" pos:end="285:9">{<block_content pos:start="283:13" pos:end="283:22">

            <goto pos:start="283:13" pos:end="283:22">goto <name pos:start="283:18" pos:end="283:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="287:9" pos:end="287:23"><expr pos:start="287:9" pos:end="287:22"><name pos:start="287:9" pos:end="287:14">op_dst</name> <operator pos:start="287:16" pos:end="287:16">=</operator> <name pos:start="287:18" pos:end="287:22">B11_8</name></expr>;</expr_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:34"><expr pos:start="289:9" pos:end="289:33"><name pos:start="289:9" pos:end="289:14">op_opc</name> <operator pos:start="289:16" pos:end="289:16">=</operator> <name pos:start="289:18" pos:end="289:33">INDEX_op_xor_i32</name></expr>;</expr_stmt>

        <expr_stmt pos:start="291:9" pos:end="291:35"><expr pos:start="291:9" pos:end="291:34"><name pos:start="291:9" pos:end="291:14">op_arg</name> <operator pos:start="291:16" pos:end="291:16">=</operator> <call pos:start="291:18" pos:end="291:34"><name pos:start="291:18" pos:end="291:30">tcg_const_i32</name><argument_list pos:start="291:31" pos:end="291:34">(<argument pos:start="291:32" pos:end="291:33"><expr pos:start="291:32" pos:end="291:33"><operator pos:start="291:32" pos:end="291:32">-</operator><literal type="number" pos:start="291:33" pos:end="291:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="293:9" pos:end="293:14">break;</break>



    <case pos:start="297:5" pos:end="297:27">case <expr pos:start="297:10" pos:end="297:26"><literal type="number" pos:start="297:10" pos:end="297:15">0x7000</literal> <operator pos:start="297:17" pos:end="297:19">...</operator> <literal type="number" pos:start="297:21" pos:end="297:26">0x700f</literal></expr>:</case> <comment type="block" pos:start="297:29" pos:end="297:45">/* add #imm,Rn */</comment>

        <if_stmt pos:start="299:9" pos:end="303:9"><if pos:start="299:9" pos:end="303:9">if <condition pos:start="299:12" pos:end="299:43">(<expr pos:start="299:13" pos:end="299:42"><name pos:start="299:13" pos:end="299:18">op_dst</name> <operator pos:start="299:20" pos:end="299:21">!=</operator> <name pos:start="299:23" pos:end="299:27">B11_8</name> <operator pos:start="299:29" pos:end="299:30">||</operator> <name pos:start="299:32" pos:end="299:37">mv_src</name> <operator pos:start="299:39" pos:end="299:40">&gt;=</operator> <literal type="number" pos:start="299:42" pos:end="299:42">0</literal></expr>)</condition> <block pos:start="299:45" pos:end="303:9">{<block_content pos:start="301:13" pos:end="301:22">

            <goto pos:start="301:13" pos:end="301:22">goto <name pos:start="301:18" pos:end="301:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="305:9" pos:end="305:34"><expr pos:start="305:9" pos:end="305:33"><name pos:start="305:9" pos:end="305:14">op_opc</name> <operator pos:start="305:16" pos:end="305:16">=</operator> <name pos:start="305:18" pos:end="305:33">INDEX_op_add_i32</name></expr>;</expr_stmt>

        <expr_stmt pos:start="307:9" pos:end="307:38"><expr pos:start="307:9" pos:end="307:37"><name pos:start="307:9" pos:end="307:14">op_arg</name> <operator pos:start="307:16" pos:end="307:16">=</operator> <call pos:start="307:18" pos:end="307:37"><name pos:start="307:18" pos:end="307:30">tcg_const_i32</name><argument_list pos:start="307:31" pos:end="307:37">(<argument pos:start="307:32" pos:end="307:36"><expr pos:start="307:32" pos:end="307:36"><name pos:start="307:32" pos:end="307:36">B7_0s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="309:9" pos:end="309:14">break;</break>



    <case pos:start="313:5" pos:end="313:16">case <expr pos:start="313:10" pos:end="313:15"><literal type="number" pos:start="313:10" pos:end="313:15">0x3000</literal></expr>:</case> <comment type="block" pos:start="313:18" pos:end="313:35">/* cmp/eq Rm,Rn */</comment>

        <comment type="block" pos:start="315:9" pos:end="319:54">/* Looking for the middle of a compare-and-swap sequence,

           beginning with the compare.  Operands can be either order,

           but with only one overlapping the load.  */</comment>

        <if_stmt pos:start="321:9" pos:end="325:9"><if pos:start="321:9" pos:end="325:9">if <condition pos:start="321:12" pos:end="321:69">(<expr pos:start="321:13" pos:end="321:68"><operator pos:start="321:13" pos:end="321:13">(</operator><name pos:start="321:14" pos:end="321:19">ld_dst</name> <operator pos:start="321:21" pos:end="321:22">==</operator> <name pos:start="321:24" pos:end="321:28">B11_8</name><operator pos:start="321:29" pos:end="321:29">)</operator> <operator pos:start="321:31" pos:end="321:31">+</operator> <operator pos:start="321:33" pos:end="321:33">(</operator><name pos:start="321:34" pos:end="321:39">ld_dst</name> <operator pos:start="321:41" pos:end="321:42">==</operator> <name pos:start="321:44" pos:end="321:47">B7_4</name><operator pos:start="321:48" pos:end="321:48">)</operator> <operator pos:start="321:50" pos:end="321:51">!=</operator> <literal type="number" pos:start="321:53" pos:end="321:53">1</literal> <operator pos:start="321:55" pos:end="321:56">||</operator> <name pos:start="321:58" pos:end="321:63">mv_src</name> <operator pos:start="321:65" pos:end="321:66">&gt;=</operator> <literal type="number" pos:start="321:68" pos:end="321:68">0</literal></expr>)</condition> <block pos:start="321:71" pos:end="325:9">{<block_content pos:start="323:13" pos:end="323:22">

            <goto pos:start="323:13" pos:end="323:22">goto <name pos:start="323:18" pos:end="323:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="327:9" pos:end="327:38"><expr pos:start="327:9" pos:end="327:37"><name pos:start="327:9" pos:end="327:14">op_opc</name> <operator pos:start="327:16" pos:end="327:16">=</operator> <name pos:start="327:18" pos:end="327:37">INDEX_op_setcond_i32</name></expr>;</expr_stmt>  <comment type="block" pos:start="327:41" pos:end="327:57">/* placeholder */</comment>

        <expr_stmt pos:start="329:9" pos:end="329:50"><expr pos:start="329:9" pos:end="329:49"><name pos:start="329:9" pos:end="329:14">op_src</name> <operator pos:start="329:16" pos:end="329:16">=</operator> <operator pos:start="329:18" pos:end="329:18">(</operator><ternary pos:start="329:19" pos:end="329:48"><condition pos:start="329:19" pos:end="329:35"><expr pos:start="329:19" pos:end="329:33"><name pos:start="329:19" pos:end="329:24">ld_dst</name> <operator pos:start="329:26" pos:end="329:27">==</operator> <name pos:start="329:29" pos:end="329:33">B11_8</name></expr> ?</condition><then pos:start="329:37" pos:end="329:40"> <expr pos:start="329:37" pos:end="329:40"><name pos:start="329:37" pos:end="329:40">B7_4</name></expr> </then><else pos:start="329:42" pos:end="329:48">: <expr pos:start="329:44" pos:end="329:48"><name pos:start="329:44" pos:end="329:48">B11_8</name></expr></else></ternary><operator pos:start="329:49" pos:end="329:49">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="331:9" pos:end="331:29"><expr pos:start="331:9" pos:end="331:28"><name pos:start="331:9" pos:end="331:14">op_arg</name> <operator pos:start="331:16" pos:end="331:16">=</operator> <call pos:start="331:18" pos:end="331:28"><name pos:start="331:18" pos:end="331:20">REG</name><argument_list pos:start="331:21" pos:end="331:28">(<argument pos:start="331:22" pos:end="331:27"><expr pos:start="331:22" pos:end="331:27"><name pos:start="331:22" pos:end="331:27">op_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="335:9" pos:end="335:18"><expr pos:start="335:9" pos:end="335:17"><name pos:start="335:9" pos:end="335:17">NEXT_INSN</name></expr>;</expr_stmt>

        <switch pos:start="337:9" pos:end="381:9">switch <condition pos:start="337:16" pos:end="337:37">(<expr pos:start="337:17" pos:end="337:36"><name pos:start="337:17" pos:end="337:27"><name pos:start="337:17" pos:end="337:19">ctx</name><operator pos:start="337:20" pos:end="337:21">-&gt;</operator><name pos:start="337:22" pos:end="337:27">opcode</name></name> <operator pos:start="337:29" pos:end="337:29">&amp;</operator> <literal type="number" pos:start="337:31" pos:end="337:36">0xff00</literal></expr>)</condition> <block pos:start="337:39" pos:end="381:9">{<block_content pos:start="339:9" pos:end="379:22">

        <case pos:start="339:9" pos:end="339:20">case <expr pos:start="339:14" pos:end="339:19"><literal type="number" pos:start="339:14" pos:end="339:19">0x8b00</literal></expr>:</case> <comment type="block" pos:start="339:22" pos:end="339:35">/* bf label */</comment>

        <case pos:start="341:9" pos:end="341:20">case <expr pos:start="341:14" pos:end="341:19"><literal type="number" pos:start="341:14" pos:end="341:19">0x8f00</literal></expr>:</case> <comment type="block" pos:start="341:22" pos:end="341:37">/* bf/s label */</comment>

            <if_stmt pos:start="343:13" pos:end="347:13"><if pos:start="343:13" pos:end="347:13">if <condition pos:start="343:16" pos:end="343:51">(<expr pos:start="343:17" pos:end="343:50"><name pos:start="343:17" pos:end="343:18">pc</name> <operator pos:start="343:20" pos:end="343:20">+</operator> <operator pos:start="343:22" pos:end="343:22">(</operator><name pos:start="343:23" pos:end="343:23">i</name> <operator pos:start="343:25" pos:end="343:25">+</operator> <literal type="number" pos:start="343:27" pos:end="343:29">1</literal> <operator pos:start="343:29" pos:end="343:29">+</operator> <name pos:start="343:31" pos:end="343:35">B7_0s</name><operator pos:start="343:36" pos:end="343:36">)</operator> <operator pos:start="343:38" pos:end="343:38">*</operator> <literal type="number" pos:start="343:40" pos:end="343:40">2</literal> <operator pos:start="343:42" pos:end="343:43">!=</operator> <name pos:start="343:45" pos:end="343:50">pc_end</name></expr>)</condition> <block pos:start="343:53" pos:end="347:13">{<block_content pos:start="345:17" pos:end="345:26">

                <goto pos:start="345:17" pos:end="345:26">goto <name pos:start="345:22" pos:end="345:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="349:13" pos:end="353:13"><if pos:start="349:13" pos:end="353:13">if <condition pos:start="349:16" pos:end="349:49">(<expr pos:start="349:17" pos:end="349:48"><operator pos:start="349:17" pos:end="349:17">(</operator><name pos:start="349:18" pos:end="349:28"><name pos:start="349:18" pos:end="349:20">ctx</name><operator pos:start="349:21" pos:end="349:22">-&gt;</operator><name pos:start="349:23" pos:end="349:28">opcode</name></name> <operator pos:start="349:30" pos:end="349:30">&amp;</operator> <literal type="number" pos:start="349:32" pos:end="349:37">0xff00</literal><operator pos:start="349:38" pos:end="349:38">)</operator> <operator pos:start="349:40" pos:end="349:41">==</operator> <literal type="number" pos:start="349:43" pos:end="349:48">0x8b00</literal></expr>)</condition> <block pos:start="349:51" pos:end="353:13">{<block_content pos:start="351:17" pos:end="351:22"> <comment type="block" pos:start="349:53" pos:end="349:66">/* bf label */</comment>

                <break pos:start="351:17" pos:end="351:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="355:13" pos:end="359:58">/* We're looking to unconditionally modify Rn with the

               result of the comparison, within the delay slot of

               the branch.  This is used by older gcc.  */</comment>

            <expr_stmt pos:start="361:13" pos:end="361:22"><expr pos:start="361:13" pos:end="361:21"><name pos:start="361:13" pos:end="361:21">NEXT_INSN</name></expr>;</expr_stmt>

            <if_stmt pos:start="363:13" pos:end="371:13"><if pos:start="363:13" pos:end="367:13">if <condition pos:start="363:16" pos:end="363:49">(<expr pos:start="363:17" pos:end="363:48"><operator pos:start="363:17" pos:end="363:17">(</operator><name pos:start="363:18" pos:end="363:28"><name pos:start="363:18" pos:end="363:20">ctx</name><operator pos:start="363:21" pos:end="363:22">-&gt;</operator><name pos:start="363:23" pos:end="363:28">opcode</name></name> <operator pos:start="363:30" pos:end="363:30">&amp;</operator> <literal type="number" pos:start="363:32" pos:end="363:37">0xf0ff</literal><operator pos:start="363:38" pos:end="363:38">)</operator> <operator pos:start="363:40" pos:end="363:41">==</operator> <literal type="number" pos:start="363:43" pos:end="363:48">0x0029</literal></expr>)</condition> <block pos:start="363:51" pos:end="367:13">{<block_content pos:start="365:17" pos:end="365:31"> <comment type="block" pos:start="363:53" pos:end="363:65">/* movt Rn */</comment>

                <expr_stmt pos:start="365:17" pos:end="365:31"><expr pos:start="365:17" pos:end="365:30"><name pos:start="365:17" pos:end="365:22">mt_dst</name> <operator pos:start="365:24" pos:end="365:24">=</operator> <name pos:start="365:26" pos:end="365:30">B11_8</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="367:15" pos:end="371:13">else <block pos:start="367:20" pos:end="371:13">{<block_content pos:start="369:17" pos:end="369:26">

                <goto pos:start="369:17" pos:end="369:26">goto <name pos:start="369:22" pos:end="369:25">fail</name>;</goto>

            </block_content>}</block></else></if_stmt>

            <break pos:start="373:13" pos:end="373:18">break;</break>



        <default pos:start="377:9" pos:end="377:16">default:</default>

            <goto pos:start="379:13" pos:end="379:22">goto <name pos:start="379:18" pos:end="379:21">fail</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="383:9" pos:end="383:14">break;</break>



    <case pos:start="387:5" pos:end="387:16">case <expr pos:start="387:10" pos:end="387:15"><literal type="number" pos:start="387:10" pos:end="387:15">0x2008</literal></expr>:</case> <comment type="block" pos:start="387:18" pos:end="387:32">/* tst Rm,Rn */</comment>

        <comment type="block" pos:start="389:9" pos:end="389:59">/* Looking for a compare-and-swap against zero.  */</comment>

        <if_stmt pos:start="391:9" pos:end="395:9"><if pos:start="391:9" pos:end="395:9">if <condition pos:start="391:12" pos:end="391:61">(<expr pos:start="391:13" pos:end="391:60"><name pos:start="391:13" pos:end="391:18">ld_dst</name> <operator pos:start="391:20" pos:end="391:21">!=</operator> <name pos:start="391:23" pos:end="391:27">B11_8</name> <operator pos:start="391:29" pos:end="391:30">||</operator> <name pos:start="391:32" pos:end="391:37">ld_dst</name> <operator pos:start="391:39" pos:end="391:40">!=</operator> <name pos:start="391:42" pos:end="391:45">B7_4</name> <operator pos:start="391:47" pos:end="391:48">||</operator> <name pos:start="391:50" pos:end="391:55">mv_src</name> <operator pos:start="391:57" pos:end="391:58">&gt;=</operator> <literal type="number" pos:start="391:60" pos:end="391:60">0</literal></expr>)</condition> <block pos:start="391:63" pos:end="395:9">{<block_content pos:start="393:13" pos:end="393:22">

            <goto pos:start="393:13" pos:end="393:22">goto <name pos:start="393:18" pos:end="393:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="397:9" pos:end="397:38"><expr pos:start="397:9" pos:end="397:37"><name pos:start="397:9" pos:end="397:14">op_opc</name> <operator pos:start="397:16" pos:end="397:16">=</operator> <name pos:start="397:18" pos:end="397:37">INDEX_op_setcond_i32</name></expr>;</expr_stmt>

        <expr_stmt pos:start="399:9" pos:end="399:34"><expr pos:start="399:9" pos:end="399:33"><name pos:start="399:9" pos:end="399:14">op_arg</name> <operator pos:start="399:16" pos:end="399:16">=</operator> <call pos:start="399:18" pos:end="399:33"><name pos:start="399:18" pos:end="399:30">tcg_const_i32</name><argument_list pos:start="399:31" pos:end="399:33">(<argument pos:start="399:32" pos:end="399:32"><expr pos:start="399:32" pos:end="399:32"><literal type="number" pos:start="399:32" pos:end="399:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="403:9" pos:end="403:18"><expr pos:start="403:9" pos:end="403:17"><name pos:start="403:9" pos:end="403:17">NEXT_INSN</name></expr>;</expr_stmt>

        <if_stmt pos:start="405:9" pos:end="411:9"><if pos:start="405:9" pos:end="411:9">if <condition pos:start="405:12" pos:end="407:50">(<expr pos:start="405:13" pos:end="407:49"><operator pos:start="405:13" pos:end="405:13">(</operator><name pos:start="405:14" pos:end="405:24"><name pos:start="405:14" pos:end="405:16">ctx</name><operator pos:start="405:17" pos:end="405:18">-&gt;</operator><name pos:start="405:19" pos:end="405:24">opcode</name></name> <operator pos:start="405:26" pos:end="405:26">&amp;</operator> <literal type="number" pos:start="405:28" pos:end="405:33">0xff00</literal><operator pos:start="405:34" pos:end="405:34">)</operator> <operator pos:start="405:36" pos:end="405:37">!=</operator> <literal type="number" pos:start="405:39" pos:end="405:44">0x8900</literal> <comment type="block" pos:start="405:46" pos:end="405:59">/* bt label */</comment>

            <operator pos:start="407:13" pos:end="407:14">||</operator> <name pos:start="407:16" pos:end="407:17">pc</name> <operator pos:start="407:19" pos:end="407:19">+</operator> <operator pos:start="407:21" pos:end="407:21">(</operator><name pos:start="407:22" pos:end="407:22">i</name> <operator pos:start="407:24" pos:end="407:24">+</operator> <literal type="number" pos:start="407:26" pos:end="407:28">1</literal> <operator pos:start="407:28" pos:end="407:28">+</operator> <name pos:start="407:30" pos:end="407:34">B7_0s</name><operator pos:start="407:35" pos:end="407:35">)</operator> <operator pos:start="407:37" pos:end="407:37">*</operator> <literal type="number" pos:start="407:39" pos:end="407:39">2</literal> <operator pos:start="407:41" pos:end="407:42">!=</operator> <name pos:start="407:44" pos:end="407:49">pc_end</name></expr>)</condition> <block pos:start="407:52" pos:end="411:9">{<block_content pos:start="409:13" pos:end="409:22">

            <goto pos:start="409:13" pos:end="409:22">goto <name pos:start="409:18" pos:end="409:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="413:9" pos:end="413:14">break;</break>



    <default pos:start="417:5" pos:end="417:12">default:</default>

        <comment type="block" pos:start="419:9" pos:end="419:48">/* Put back and re-examine as store.  */</comment>

        <expr_stmt pos:start="421:9" pos:end="421:12"><expr pos:start="421:9" pos:end="421:11"><operator pos:start="421:9" pos:end="421:10">--</operator><name pos:start="421:11" pos:end="421:11">i</name></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <comment type="block" pos:start="427:5" pos:end="431:7">/*

     * Expect the store.

     */</comment>

    <comment type="block" pos:start="433:5" pos:end="433:43">/* The store must be the last insn.  */</comment>

    <if_stmt pos:start="435:5" pos:end="439:5"><if pos:start="435:5" pos:end="439:5">if <condition pos:start="435:8" pos:end="435:27">(<expr pos:start="435:9" pos:end="435:26"><name pos:start="435:9" pos:end="435:9">i</name> <operator pos:start="435:11" pos:end="435:12">!=</operator> <name pos:start="435:14" pos:end="435:22">max_insns</name> <operator pos:start="435:24" pos:end="435:24">-</operator> <literal type="number" pos:start="435:26" pos:end="435:26">1</literal></expr>)</condition> <block pos:start="435:29" pos:end="439:5">{<block_content pos:start="437:9" pos:end="437:18">

        <goto pos:start="437:9" pos:end="437:18">goto <name pos:start="437:14" pos:end="437:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="441:5" pos:end="441:14"><expr pos:start="441:5" pos:end="441:13"><name pos:start="441:5" pos:end="441:13">NEXT_INSN</name></expr>;</expr_stmt>

    <switch pos:start="443:5" pos:end="467:5">switch <condition pos:start="443:12" pos:end="443:33">(<expr pos:start="443:13" pos:end="443:32"><name pos:start="443:13" pos:end="443:23"><name pos:start="443:13" pos:end="443:15">ctx</name><operator pos:start="443:16" pos:end="443:17">-&gt;</operator><name pos:start="443:18" pos:end="443:23">opcode</name></name> <operator pos:start="443:25" pos:end="443:25">&amp;</operator> <literal type="number" pos:start="443:27" pos:end="443:32">0xf00f</literal></expr>)</condition> <block pos:start="443:35" pos:end="467:5">{<block_content pos:start="445:5" pos:end="465:18">

    <case pos:start="445:5" pos:end="445:16">case <expr pos:start="445:10" pos:end="445:15"><literal type="number" pos:start="445:10" pos:end="445:15">0x2000</literal></expr>:</case> <comment type="block" pos:start="445:18" pos:end="445:35">/* mov.b Rm,@Rn */</comment>

        <expr_stmt pos:start="447:9" pos:end="447:23"><expr pos:start="447:9" pos:end="447:22"><name pos:start="447:9" pos:end="447:14">st_mop</name> <operator pos:start="447:16" pos:end="447:16">=</operator> <name pos:start="447:18" pos:end="447:22">MO_UB</name></expr>;</expr_stmt>

        <break pos:start="449:9" pos:end="449:14">break;</break>

    <case pos:start="451:5" pos:end="451:16">case <expr pos:start="451:10" pos:end="451:15"><literal type="number" pos:start="451:10" pos:end="451:15">0x2001</literal></expr>:</case> <comment type="block" pos:start="451:18" pos:end="451:35">/* mov.w Rm,@Rn */</comment>

        <expr_stmt pos:start="453:9" pos:end="453:23"><expr pos:start="453:9" pos:end="453:22"><name pos:start="453:9" pos:end="453:14">st_mop</name> <operator pos:start="453:16" pos:end="453:16">=</operator> <name pos:start="453:18" pos:end="453:22">MO_UW</name></expr>;</expr_stmt>

        <break pos:start="455:9" pos:end="455:14">break;</break>

    <case pos:start="457:5" pos:end="457:16">case <expr pos:start="457:10" pos:end="457:15"><literal type="number" pos:start="457:10" pos:end="457:15">0x2002</literal></expr>:</case> <comment type="block" pos:start="457:18" pos:end="457:35">/* mov.l Rm,@Rn */</comment>

        <expr_stmt pos:start="459:9" pos:end="459:23"><expr pos:start="459:9" pos:end="459:22"><name pos:start="459:9" pos:end="459:14">st_mop</name> <operator pos:start="459:16" pos:end="459:16">=</operator> <name pos:start="459:18" pos:end="459:22">MO_UL</name></expr>;</expr_stmt>

        <break pos:start="461:9" pos:end="461:14">break;</break>

    <default pos:start="463:5" pos:end="463:12">default:</default>

        <goto pos:start="465:9" pos:end="465:18">goto <name pos:start="465:14" pos:end="465:17">fail</name>;</goto>

    </block_content>}</block></switch>

    <comment type="block" pos:start="469:5" pos:end="469:41">/* The store must match the load.  */</comment>

    <if_stmt pos:start="471:5" pos:end="475:5"><if pos:start="471:5" pos:end="475:5">if <condition pos:start="471:8" pos:end="471:56">(<expr pos:start="471:9" pos:end="471:55"><name pos:start="471:9" pos:end="471:14">ld_adr</name> <operator pos:start="471:16" pos:end="471:17">!=</operator> <name pos:start="471:19" pos:end="471:23">B11_8</name> <operator pos:start="471:25" pos:end="471:26">||</operator> <name pos:start="471:28" pos:end="471:33">st_mop</name> <operator pos:start="471:35" pos:end="471:36">!=</operator> <operator pos:start="471:38" pos:end="471:38">(</operator><name pos:start="471:39" pos:end="471:44">ld_mop</name> <operator pos:start="471:46" pos:end="471:46">&amp;</operator> <name pos:start="471:48" pos:end="471:54">MO_SIZE</name><operator pos:start="471:55" pos:end="471:55">)</operator></expr>)</condition> <block pos:start="471:58" pos:end="475:5">{<block_content pos:start="473:9" pos:end="473:18">

        <goto pos:start="473:9" pos:end="473:18">goto <name pos:start="473:14" pos:end="473:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="477:5" pos:end="482:0"><expr pos:start="477:5" pos:end="477:17"><name pos:start="477:5" pos:end="477:10">st_src</name> <operator pos:start="477:12" pos:end="477:12">=</operator> <name pos:start="477:14" pos:end="477:17">B7_4</name></expr>;</expr_stmt>



<cpp:undef pos:start="481:1" pos:end="481:16">#<cpp:directive pos:start="481:2" pos:end="481:6">undef</cpp:directive> <name pos:start="481:8" pos:end="481:16">NEXT_INSN</name></cpp:undef>



    <comment type="block" pos:start="485:5" pos:end="489:7">/*

     * Emit the operation.

     */</comment>

    <expr_stmt pos:start="491:5" pos:end="491:42"><expr pos:start="491:5" pos:end="491:41"><call pos:start="491:5" pos:end="491:41"><name pos:start="491:5" pos:end="491:22">tcg_gen_insn_start</name><argument_list pos:start="491:23" pos:end="491:41">(<argument pos:start="491:24" pos:end="491:25"><expr pos:start="491:24" pos:end="491:25"><name pos:start="491:24" pos:end="491:25">pc</name></expr></argument>, <argument pos:start="491:28" pos:end="491:40"><expr pos:start="491:28" pos:end="491:40"><name pos:start="491:28" pos:end="491:40"><name pos:start="491:28" pos:end="491:30">ctx</name><operator pos:start="491:31" pos:end="491:32">-&gt;</operator><name pos:start="491:33" pos:end="491:40">envflags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="493:5" pos:end="661:5">switch <condition pos:start="493:12" pos:end="493:19">(<expr pos:start="493:13" pos:end="493:18"><name pos:start="493:13" pos:end="493:18">op_opc</name></expr>)</condition> <block pos:start="493:21" pos:end="661:5">{<block_content pos:start="495:5" pos:end="659:31">

    <case pos:start="495:5" pos:end="495:12">case <expr pos:start="495:10" pos:end="495:11"><operator pos:start="495:10" pos:end="495:10">-</operator><literal type="number" pos:start="495:11" pos:end="495:11">1</literal></expr>:</case>

        <comment type="block" pos:start="497:9" pos:end="497:62">/* No operation found.  Look for exchange pattern.  */</comment>

        <if_stmt pos:start="499:9" pos:end="503:9"><if pos:start="499:9" pos:end="503:9">if <condition pos:start="499:12" pos:end="499:44">(<expr pos:start="499:13" pos:end="499:43"><name pos:start="499:13" pos:end="499:18">st_src</name> <operator pos:start="499:20" pos:end="499:21">==</operator> <name pos:start="499:23" pos:end="499:28">ld_dst</name> <operator pos:start="499:30" pos:end="499:31">||</operator> <name pos:start="499:33" pos:end="499:38">mv_src</name> <operator pos:start="499:40" pos:end="499:41">&gt;=</operator> <literal type="number" pos:start="499:43" pos:end="499:43">0</literal></expr>)</condition> <block pos:start="499:46" pos:end="503:9">{<block_content pos:start="501:13" pos:end="501:22">

            <goto pos:start="501:13" pos:end="501:22">goto <name pos:start="501:18" pos:end="501:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="505:9" pos:end="507:53"><expr pos:start="505:9" pos:end="507:52"><call pos:start="505:9" pos:end="507:52"><name pos:start="505:9" pos:end="505:31">tcg_gen_atomic_xchg_i32</name><argument_list pos:start="505:32" pos:end="507:52">(<argument pos:start="505:33" pos:end="505:43"><expr pos:start="505:33" pos:end="505:43"><call pos:start="505:33" pos:end="505:43"><name pos:start="505:33" pos:end="505:35">REG</name><argument_list pos:start="505:36" pos:end="505:43">(<argument pos:start="505:37" pos:end="505:42"><expr pos:start="505:37" pos:end="505:42"><name pos:start="505:37" pos:end="505:42">ld_dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="505:46" pos:end="505:56"><expr pos:start="505:46" pos:end="505:56"><call pos:start="505:46" pos:end="505:56"><name pos:start="505:46" pos:end="505:48">REG</name><argument_list pos:start="505:49" pos:end="505:56">(<argument pos:start="505:50" pos:end="505:55"><expr pos:start="505:50" pos:end="505:55"><name pos:start="505:50" pos:end="505:55">ld_adr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="505:59" pos:end="505:69"><expr pos:start="505:59" pos:end="505:69"><call pos:start="505:59" pos:end="505:69"><name pos:start="505:59" pos:end="505:61">REG</name><argument_list pos:start="505:62" pos:end="505:69">(<argument pos:start="505:63" pos:end="505:68"><expr pos:start="505:63" pos:end="505:68"><name pos:start="505:63" pos:end="505:68">st_src</name></expr></argument>)</argument_list></call></expr></argument>,

                                <argument pos:start="507:33" pos:end="507:43"><expr pos:start="507:33" pos:end="507:43"><name pos:start="507:33" pos:end="507:43"><name pos:start="507:33" pos:end="507:35">ctx</name><operator pos:start="507:36" pos:end="507:37">-&gt;</operator><name pos:start="507:38" pos:end="507:43">memidx</name></name></expr></argument>, <argument pos:start="507:46" pos:end="507:51"><expr pos:start="507:46" pos:end="507:51"><name pos:start="507:46" pos:end="507:51">ld_mop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="509:9" pos:end="509:14">break;</break>



    <case pos:start="513:5" pos:end="513:26">case <expr pos:start="513:10" pos:end="513:25"><name pos:start="513:10" pos:end="513:25">INDEX_op_add_i32</name></expr>:</case>

        <if_stmt pos:start="515:9" pos:end="519:9"><if pos:start="515:9" pos:end="519:9">if <condition pos:start="515:12" pos:end="515:29">(<expr pos:start="515:13" pos:end="515:28"><name pos:start="515:13" pos:end="515:18">op_dst</name> <operator pos:start="515:20" pos:end="515:21">!=</operator> <name pos:start="515:23" pos:end="515:28">st_src</name></expr>)</condition> <block pos:start="515:31" pos:end="519:9">{<block_content pos:start="517:13" pos:end="517:22">

            <goto pos:start="517:13" pos:end="517:22">goto <name pos:start="517:18" pos:end="517:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="521:9" pos:end="543:9"><if pos:start="521:9" pos:end="527:9">if <condition pos:start="521:12" pos:end="521:48">(<expr pos:start="521:13" pos:end="521:47"><name pos:start="521:13" pos:end="521:18">op_dst</name> <operator pos:start="521:20" pos:end="521:21">==</operator> <name pos:start="521:23" pos:end="521:28">ld_dst</name> <operator pos:start="521:30" pos:end="521:31">&amp;&amp;</operator> <name pos:start="521:33" pos:end="521:38">st_mop</name> <operator pos:start="521:40" pos:end="521:41">==</operator> <name pos:start="521:43" pos:end="521:47">MO_UL</name></expr>)</condition> <block pos:start="521:50" pos:end="527:9">{<block_content pos:start="523:13" pos:end="525:70">

            <expr_stmt pos:start="523:13" pos:end="525:70"><expr pos:start="523:13" pos:end="525:69"><call pos:start="523:13" pos:end="525:69"><name pos:start="523:13" pos:end="523:40">tcg_gen_atomic_add_fetch_i32</name><argument_list pos:start="523:41" pos:end="525:69">(<argument pos:start="523:42" pos:end="523:52"><expr pos:start="523:42" pos:end="523:52"><call pos:start="523:42" pos:end="523:52"><name pos:start="523:42" pos:end="523:44">REG</name><argument_list pos:start="523:45" pos:end="523:52">(<argument pos:start="523:46" pos:end="523:51"><expr pos:start="523:46" pos:end="523:51"><name pos:start="523:46" pos:end="523:51">ld_dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="523:55" pos:end="523:65"><expr pos:start="523:55" pos:end="523:65"><call pos:start="523:55" pos:end="523:65"><name pos:start="523:55" pos:end="523:57">REG</name><argument_list pos:start="523:58" pos:end="523:65">(<argument pos:start="523:59" pos:end="523:64"><expr pos:start="523:59" pos:end="523:64"><name pos:start="523:59" pos:end="523:64">ld_adr</name></expr></argument>)</argument_list></call></expr></argument>,

                                         <argument pos:start="525:42" pos:end="525:47"><expr pos:start="525:42" pos:end="525:47"><name pos:start="525:42" pos:end="525:47">op_arg</name></expr></argument>, <argument pos:start="525:50" pos:end="525:60"><expr pos:start="525:50" pos:end="525:60"><name pos:start="525:50" pos:end="525:60"><name pos:start="525:50" pos:end="525:52">ctx</name><operator pos:start="525:53" pos:end="525:54">-&gt;</operator><name pos:start="525:55" pos:end="525:60">memidx</name></name></expr></argument>, <argument pos:start="525:63" pos:end="525:68"><expr pos:start="525:63" pos:end="525:68"><name pos:start="525:63" pos:end="525:68">ld_mop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="527:11" pos:end="543:9">else <block pos:start="527:16" pos:end="543:9">{<block_content pos:start="529:13" pos:end="541:13">

            <expr_stmt pos:start="529:13" pos:end="531:70"><expr pos:start="529:13" pos:end="531:69"><call pos:start="529:13" pos:end="531:69"><name pos:start="529:13" pos:end="529:40">tcg_gen_atomic_fetch_add_i32</name><argument_list pos:start="529:41" pos:end="531:69">(<argument pos:start="529:42" pos:end="529:52"><expr pos:start="529:42" pos:end="529:52"><call pos:start="529:42" pos:end="529:52"><name pos:start="529:42" pos:end="529:44">REG</name><argument_list pos:start="529:45" pos:end="529:52">(<argument pos:start="529:46" pos:end="529:51"><expr pos:start="529:46" pos:end="529:51"><name pos:start="529:46" pos:end="529:51">ld_dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="529:55" pos:end="529:65"><expr pos:start="529:55" pos:end="529:65"><call pos:start="529:55" pos:end="529:65"><name pos:start="529:55" pos:end="529:57">REG</name><argument_list pos:start="529:58" pos:end="529:65">(<argument pos:start="529:59" pos:end="529:64"><expr pos:start="529:59" pos:end="529:64"><name pos:start="529:59" pos:end="529:64">ld_adr</name></expr></argument>)</argument_list></call></expr></argument>,

                                         <argument pos:start="531:42" pos:end="531:47"><expr pos:start="531:42" pos:end="531:47"><name pos:start="531:42" pos:end="531:47">op_arg</name></expr></argument>, <argument pos:start="531:50" pos:end="531:60"><expr pos:start="531:50" pos:end="531:60"><name pos:start="531:50" pos:end="531:60"><name pos:start="531:50" pos:end="531:52">ctx</name><operator pos:start="531:53" pos:end="531:54">-&gt;</operator><name pos:start="531:55" pos:end="531:60">memidx</name></name></expr></argument>, <argument pos:start="531:63" pos:end="531:68"><expr pos:start="531:63" pos:end="531:68"><name pos:start="531:63" pos:end="531:68">ld_mop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="533:13" pos:end="541:13"><if pos:start="533:13" pos:end="541:13">if <condition pos:start="533:16" pos:end="533:33">(<expr pos:start="533:17" pos:end="533:32"><name pos:start="533:17" pos:end="533:22">op_dst</name> <operator pos:start="533:24" pos:end="533:25">!=</operator> <name pos:start="533:27" pos:end="533:32">ld_dst</name></expr>)</condition> <block pos:start="533:35" pos:end="541:13">{<block_content pos:start="539:17" pos:end="539:66">

                <comment type="block" pos:start="535:17" pos:end="537:67">/* Note that mop sizes &lt; 4 cannot use add_fetch

                   because it won't carry into the higher bits.  */</comment>

                <expr_stmt pos:start="539:17" pos:end="539:66"><expr pos:start="539:17" pos:end="539:65"><call pos:start="539:17" pos:end="539:65"><name pos:start="539:17" pos:end="539:31">tcg_gen_add_i32</name><argument_list pos:start="539:32" pos:end="539:65">(<argument pos:start="539:33" pos:end="539:43"><expr pos:start="539:33" pos:end="539:43"><call pos:start="539:33" pos:end="539:43"><name pos:start="539:33" pos:end="539:35">REG</name><argument_list pos:start="539:36" pos:end="539:43">(<argument pos:start="539:37" pos:end="539:42"><expr pos:start="539:37" pos:end="539:42"><name pos:start="539:37" pos:end="539:42">op_dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="539:46" pos:end="539:56"><expr pos:start="539:46" pos:end="539:56"><call pos:start="539:46" pos:end="539:56"><name pos:start="539:46" pos:end="539:48">REG</name><argument_list pos:start="539:49" pos:end="539:56">(<argument pos:start="539:50" pos:end="539:55"><expr pos:start="539:50" pos:end="539:55"><name pos:start="539:50" pos:end="539:55">ld_dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="539:59" pos:end="539:64"><expr pos:start="539:59" pos:end="539:64"><name pos:start="539:59" pos:end="539:64">op_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="545:9" pos:end="545:14">break;</break>



    <case pos:start="549:5" pos:end="549:26">case <expr pos:start="549:10" pos:end="549:25"><name pos:start="549:10" pos:end="549:25">INDEX_op_and_i32</name></expr>:</case>

        <if_stmt pos:start="551:9" pos:end="555:9"><if pos:start="551:9" pos:end="555:9">if <condition pos:start="551:12" pos:end="551:29">(<expr pos:start="551:13" pos:end="551:28"><name pos:start="551:13" pos:end="551:18">op_dst</name> <operator pos:start="551:20" pos:end="551:21">!=</operator> <name pos:start="551:23" pos:end="551:28">st_src</name></expr>)</condition> <block pos:start="551:31" pos:end="555:9">{<block_content pos:start="553:13" pos:end="553:22">

            <goto pos:start="553:13" pos:end="553:22">goto <name pos:start="553:18" pos:end="553:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="557:9" pos:end="571:9"><if pos:start="557:9" pos:end="563:9">if <condition pos:start="557:12" pos:end="557:29">(<expr pos:start="557:13" pos:end="557:28"><name pos:start="557:13" pos:end="557:18">op_dst</name> <operator pos:start="557:20" pos:end="557:21">==</operator> <name pos:start="557:23" pos:end="557:28">ld_dst</name></expr>)</condition> <block pos:start="557:31" pos:end="563:9">{<block_content pos:start="559:13" pos:end="561:70">

            <expr_stmt pos:start="559:13" pos:end="561:70"><expr pos:start="559:13" pos:end="561:69"><call pos:start="559:13" pos:end="561:69"><name pos:start="559:13" pos:end="559:40">tcg_gen_atomic_and_fetch_i32</name><argument_list pos:start="559:41" pos:end="561:69">(<argument pos:start="559:42" pos:end="559:52"><expr pos:start="559:42" pos:end="559:52"><call pos:start="559:42" pos:end="559:52"><name pos:start="559:42" pos:end="559:44">REG</name><argument_list pos:start="559:45" pos:end="559:52">(<argument pos:start="559:46" pos:end="559:51"><expr pos:start="559:46" pos:end="559:51"><name pos:start="559:46" pos:end="559:51">ld_dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="559:55" pos:end="559:65"><expr pos:start="559:55" pos:end="559:65"><call pos:start="559:55" pos:end="559:65"><name pos:start="559:55" pos:end="559:57">REG</name><argument_list pos:start="559:58" pos:end="559:65">(<argument pos:start="559:59" pos:end="559:64"><expr pos:start="559:59" pos:end="559:64"><name pos:start="559:59" pos:end="559:64">ld_adr</name></expr></argument>)</argument_list></call></expr></argument>,

                                         <argument pos:start="561:42" pos:end="561:47"><expr pos:start="561:42" pos:end="561:47"><name pos:start="561:42" pos:end="561:47">op_arg</name></expr></argument>, <argument pos:start="561:50" pos:end="561:60"><expr pos:start="561:50" pos:end="561:60"><name pos:start="561:50" pos:end="561:60"><name pos:start="561:50" pos:end="561:52">ctx</name><operator pos:start="561:53" pos:end="561:54">-&gt;</operator><name pos:start="561:55" pos:end="561:60">memidx</name></name></expr></argument>, <argument pos:start="561:63" pos:end="561:68"><expr pos:start="561:63" pos:end="561:68"><name pos:start="561:63" pos:end="561:68">ld_mop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="563:11" pos:end="571:9">else <block pos:start="563:16" pos:end="571:9">{<block_content pos:start="565:13" pos:end="569:62">

            <expr_stmt pos:start="565:13" pos:end="567:70"><expr pos:start="565:13" pos:end="567:69"><call pos:start="565:13" pos:end="567:69"><name pos:start="565:13" pos:end="565:40">tcg_gen_atomic_fetch_and_i32</name><argument_list pos:start="565:41" pos:end="567:69">(<argument pos:start="565:42" pos:end="565:52"><expr pos:start="565:42" pos:end="565:52"><call pos:start="565:42" pos:end="565:52"><name pos:start="565:42" pos:end="565:44">REG</name><argument_list pos:start="565:45" pos:end="565:52">(<argument pos:start="565:46" pos:end="565:51"><expr pos:start="565:46" pos:end="565:51"><name pos:start="565:46" pos:end="565:51">ld_dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="565:55" pos:end="565:65"><expr pos:start="565:55" pos:end="565:65"><call pos:start="565:55" pos:end="565:65"><name pos:start="565:55" pos:end="565:57">REG</name><argument_list pos:start="565:58" pos:end="565:65">(<argument pos:start="565:59" pos:end="565:64"><expr pos:start="565:59" pos:end="565:64"><name pos:start="565:59" pos:end="565:64">ld_adr</name></expr></argument>)</argument_list></call></expr></argument>,

                                         <argument pos:start="567:42" pos:end="567:47"><expr pos:start="567:42" pos:end="567:47"><name pos:start="567:42" pos:end="567:47">op_arg</name></expr></argument>, <argument pos:start="567:50" pos:end="567:60"><expr pos:start="567:50" pos:end="567:60"><name pos:start="567:50" pos:end="567:60"><name pos:start="567:50" pos:end="567:52">ctx</name><operator pos:start="567:53" pos:end="567:54">-&gt;</operator><name pos:start="567:55" pos:end="567:60">memidx</name></name></expr></argument>, <argument pos:start="567:63" pos:end="567:68"><expr pos:start="567:63" pos:end="567:68"><name pos:start="567:63" pos:end="567:68">ld_mop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="569:13" pos:end="569:62"><expr pos:start="569:13" pos:end="569:61"><call pos:start="569:13" pos:end="569:61"><name pos:start="569:13" pos:end="569:27">tcg_gen_and_i32</name><argument_list pos:start="569:28" pos:end="569:61">(<argument pos:start="569:29" pos:end="569:39"><expr pos:start="569:29" pos:end="569:39"><call pos:start="569:29" pos:end="569:39"><name pos:start="569:29" pos:end="569:31">REG</name><argument_list pos:start="569:32" pos:end="569:39">(<argument pos:start="569:33" pos:end="569:38"><expr pos:start="569:33" pos:end="569:38"><name pos:start="569:33" pos:end="569:38">op_dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="569:42" pos:end="569:52"><expr pos:start="569:42" pos:end="569:52"><call pos:start="569:42" pos:end="569:52"><name pos:start="569:42" pos:end="569:44">REG</name><argument_list pos:start="569:45" pos:end="569:52">(<argument pos:start="569:46" pos:end="569:51"><expr pos:start="569:46" pos:end="569:51"><name pos:start="569:46" pos:end="569:51">ld_dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="569:55" pos:end="569:60"><expr pos:start="569:55" pos:end="569:60"><name pos:start="569:55" pos:end="569:60">op_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="573:9" pos:end="573:14">break;</break>



    <case pos:start="577:5" pos:end="577:25">case <expr pos:start="577:10" pos:end="577:24"><name pos:start="577:10" pos:end="577:24">INDEX_op_or_i32</name></expr>:</case>

        <if_stmt pos:start="579:9" pos:end="583:9"><if pos:start="579:9" pos:end="583:9">if <condition pos:start="579:12" pos:end="579:29">(<expr pos:start="579:13" pos:end="579:28"><name pos:start="579:13" pos:end="579:18">op_dst</name> <operator pos:start="579:20" pos:end="579:21">!=</operator> <name pos:start="579:23" pos:end="579:28">st_src</name></expr>)</condition> <block pos:start="579:31" pos:end="583:9">{<block_content pos:start="581:13" pos:end="581:22">

            <goto pos:start="581:13" pos:end="581:22">goto <name pos:start="581:18" pos:end="581:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="585:9" pos:end="599:9"><if pos:start="585:9" pos:end="591:9">if <condition pos:start="585:12" pos:end="585:29">(<expr pos:start="585:13" pos:end="585:28"><name pos:start="585:13" pos:end="585:18">op_dst</name> <operator pos:start="585:20" pos:end="585:21">==</operator> <name pos:start="585:23" pos:end="585:28">ld_dst</name></expr>)</condition> <block pos:start="585:31" pos:end="591:9">{<block_content pos:start="587:13" pos:end="589:69">

            <expr_stmt pos:start="587:13" pos:end="589:69"><expr pos:start="587:13" pos:end="589:68"><call pos:start="587:13" pos:end="589:68"><name pos:start="587:13" pos:end="587:39">tcg_gen_atomic_or_fetch_i32</name><argument_list pos:start="587:40" pos:end="589:68">(<argument pos:start="587:41" pos:end="587:51"><expr pos:start="587:41" pos:end="587:51"><call pos:start="587:41" pos:end="587:51"><name pos:start="587:41" pos:end="587:43">REG</name><argument_list pos:start="587:44" pos:end="587:51">(<argument pos:start="587:45" pos:end="587:50"><expr pos:start="587:45" pos:end="587:50"><name pos:start="587:45" pos:end="587:50">ld_dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="587:54" pos:end="587:64"><expr pos:start="587:54" pos:end="587:64"><call pos:start="587:54" pos:end="587:64"><name pos:start="587:54" pos:end="587:56">REG</name><argument_list pos:start="587:57" pos:end="587:64">(<argument pos:start="587:58" pos:end="587:63"><expr pos:start="587:58" pos:end="587:63"><name pos:start="587:58" pos:end="587:63">ld_adr</name></expr></argument>)</argument_list></call></expr></argument>,

                                        <argument pos:start="589:41" pos:end="589:46"><expr pos:start="589:41" pos:end="589:46"><name pos:start="589:41" pos:end="589:46">op_arg</name></expr></argument>, <argument pos:start="589:49" pos:end="589:59"><expr pos:start="589:49" pos:end="589:59"><name pos:start="589:49" pos:end="589:59"><name pos:start="589:49" pos:end="589:51">ctx</name><operator pos:start="589:52" pos:end="589:53">-&gt;</operator><name pos:start="589:54" pos:end="589:59">memidx</name></name></expr></argument>, <argument pos:start="589:62" pos:end="589:67"><expr pos:start="589:62" pos:end="589:67"><name pos:start="589:62" pos:end="589:67">ld_mop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="591:11" pos:end="599:9">else <block pos:start="591:16" pos:end="599:9">{<block_content pos:start="593:13" pos:end="597:61">

            <expr_stmt pos:start="593:13" pos:end="595:69"><expr pos:start="593:13" pos:end="595:68"><call pos:start="593:13" pos:end="595:68"><name pos:start="593:13" pos:end="593:39">tcg_gen_atomic_fetch_or_i32</name><argument_list pos:start="593:40" pos:end="595:68">(<argument pos:start="593:41" pos:end="593:51"><expr pos:start="593:41" pos:end="593:51"><call pos:start="593:41" pos:end="593:51"><name pos:start="593:41" pos:end="593:43">REG</name><argument_list pos:start="593:44" pos:end="593:51">(<argument pos:start="593:45" pos:end="593:50"><expr pos:start="593:45" pos:end="593:50"><name pos:start="593:45" pos:end="593:50">ld_dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="593:54" pos:end="593:64"><expr pos:start="593:54" pos:end="593:64"><call pos:start="593:54" pos:end="593:64"><name pos:start="593:54" pos:end="593:56">REG</name><argument_list pos:start="593:57" pos:end="593:64">(<argument pos:start="593:58" pos:end="593:63"><expr pos:start="593:58" pos:end="593:63"><name pos:start="593:58" pos:end="593:63">ld_adr</name></expr></argument>)</argument_list></call></expr></argument>,

                                        <argument pos:start="595:41" pos:end="595:46"><expr pos:start="595:41" pos:end="595:46"><name pos:start="595:41" pos:end="595:46">op_arg</name></expr></argument>, <argument pos:start="595:49" pos:end="595:59"><expr pos:start="595:49" pos:end="595:59"><name pos:start="595:49" pos:end="595:59"><name pos:start="595:49" pos:end="595:51">ctx</name><operator pos:start="595:52" pos:end="595:53">-&gt;</operator><name pos:start="595:54" pos:end="595:59">memidx</name></name></expr></argument>, <argument pos:start="595:62" pos:end="595:67"><expr pos:start="595:62" pos:end="595:67"><name pos:start="595:62" pos:end="595:67">ld_mop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="597:13" pos:end="597:61"><expr pos:start="597:13" pos:end="597:60"><call pos:start="597:13" pos:end="597:60"><name pos:start="597:13" pos:end="597:26">tcg_gen_or_i32</name><argument_list pos:start="597:27" pos:end="597:60">(<argument pos:start="597:28" pos:end="597:38"><expr pos:start="597:28" pos:end="597:38"><call pos:start="597:28" pos:end="597:38"><name pos:start="597:28" pos:end="597:30">REG</name><argument_list pos:start="597:31" pos:end="597:38">(<argument pos:start="597:32" pos:end="597:37"><expr pos:start="597:32" pos:end="597:37"><name pos:start="597:32" pos:end="597:37">op_dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="597:41" pos:end="597:51"><expr pos:start="597:41" pos:end="597:51"><call pos:start="597:41" pos:end="597:51"><name pos:start="597:41" pos:end="597:43">REG</name><argument_list pos:start="597:44" pos:end="597:51">(<argument pos:start="597:45" pos:end="597:50"><expr pos:start="597:45" pos:end="597:50"><name pos:start="597:45" pos:end="597:50">ld_dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="597:54" pos:end="597:59"><expr pos:start="597:54" pos:end="597:59"><name pos:start="597:54" pos:end="597:59">op_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="601:9" pos:end="601:14">break;</break>



    <case pos:start="605:5" pos:end="605:26">case <expr pos:start="605:10" pos:end="605:25"><name pos:start="605:10" pos:end="605:25">INDEX_op_xor_i32</name></expr>:</case>

        <if_stmt pos:start="607:9" pos:end="611:9"><if pos:start="607:9" pos:end="611:9">if <condition pos:start="607:12" pos:end="607:29">(<expr pos:start="607:13" pos:end="607:28"><name pos:start="607:13" pos:end="607:18">op_dst</name> <operator pos:start="607:20" pos:end="607:21">!=</operator> <name pos:start="607:23" pos:end="607:28">st_src</name></expr>)</condition> <block pos:start="607:31" pos:end="611:9">{<block_content pos:start="609:13" pos:end="609:22">

            <goto pos:start="609:13" pos:end="609:22">goto <name pos:start="609:18" pos:end="609:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="613:9" pos:end="627:9"><if pos:start="613:9" pos:end="619:9">if <condition pos:start="613:12" pos:end="613:29">(<expr pos:start="613:13" pos:end="613:28"><name pos:start="613:13" pos:end="613:18">op_dst</name> <operator pos:start="613:20" pos:end="613:21">==</operator> <name pos:start="613:23" pos:end="613:28">ld_dst</name></expr>)</condition> <block pos:start="613:31" pos:end="619:9">{<block_content pos:start="615:13" pos:end="617:70">

            <expr_stmt pos:start="615:13" pos:end="617:70"><expr pos:start="615:13" pos:end="617:69"><call pos:start="615:13" pos:end="617:69"><name pos:start="615:13" pos:end="615:40">tcg_gen_atomic_xor_fetch_i32</name><argument_list pos:start="615:41" pos:end="617:69">(<argument pos:start="615:42" pos:end="615:52"><expr pos:start="615:42" pos:end="615:52"><call pos:start="615:42" pos:end="615:52"><name pos:start="615:42" pos:end="615:44">REG</name><argument_list pos:start="615:45" pos:end="615:52">(<argument pos:start="615:46" pos:end="615:51"><expr pos:start="615:46" pos:end="615:51"><name pos:start="615:46" pos:end="615:51">ld_dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="615:55" pos:end="615:65"><expr pos:start="615:55" pos:end="615:65"><call pos:start="615:55" pos:end="615:65"><name pos:start="615:55" pos:end="615:57">REG</name><argument_list pos:start="615:58" pos:end="615:65">(<argument pos:start="615:59" pos:end="615:64"><expr pos:start="615:59" pos:end="615:64"><name pos:start="615:59" pos:end="615:64">ld_adr</name></expr></argument>)</argument_list></call></expr></argument>,

                                         <argument pos:start="617:42" pos:end="617:47"><expr pos:start="617:42" pos:end="617:47"><name pos:start="617:42" pos:end="617:47">op_arg</name></expr></argument>, <argument pos:start="617:50" pos:end="617:60"><expr pos:start="617:50" pos:end="617:60"><name pos:start="617:50" pos:end="617:60"><name pos:start="617:50" pos:end="617:52">ctx</name><operator pos:start="617:53" pos:end="617:54">-&gt;</operator><name pos:start="617:55" pos:end="617:60">memidx</name></name></expr></argument>, <argument pos:start="617:63" pos:end="617:68"><expr pos:start="617:63" pos:end="617:68"><name pos:start="617:63" pos:end="617:68">ld_mop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="619:11" pos:end="627:9">else <block pos:start="619:16" pos:end="627:9">{<block_content pos:start="621:13" pos:end="625:62">

            <expr_stmt pos:start="621:13" pos:end="623:70"><expr pos:start="621:13" pos:end="623:69"><call pos:start="621:13" pos:end="623:69"><name pos:start="621:13" pos:end="621:40">tcg_gen_atomic_fetch_xor_i32</name><argument_list pos:start="621:41" pos:end="623:69">(<argument pos:start="621:42" pos:end="621:52"><expr pos:start="621:42" pos:end="621:52"><call pos:start="621:42" pos:end="621:52"><name pos:start="621:42" pos:end="621:44">REG</name><argument_list pos:start="621:45" pos:end="621:52">(<argument pos:start="621:46" pos:end="621:51"><expr pos:start="621:46" pos:end="621:51"><name pos:start="621:46" pos:end="621:51">ld_dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="621:55" pos:end="621:65"><expr pos:start="621:55" pos:end="621:65"><call pos:start="621:55" pos:end="621:65"><name pos:start="621:55" pos:end="621:57">REG</name><argument_list pos:start="621:58" pos:end="621:65">(<argument pos:start="621:59" pos:end="621:64"><expr pos:start="621:59" pos:end="621:64"><name pos:start="621:59" pos:end="621:64">ld_adr</name></expr></argument>)</argument_list></call></expr></argument>,

                                         <argument pos:start="623:42" pos:end="623:47"><expr pos:start="623:42" pos:end="623:47"><name pos:start="623:42" pos:end="623:47">op_arg</name></expr></argument>, <argument pos:start="623:50" pos:end="623:60"><expr pos:start="623:50" pos:end="623:60"><name pos:start="623:50" pos:end="623:60"><name pos:start="623:50" pos:end="623:52">ctx</name><operator pos:start="623:53" pos:end="623:54">-&gt;</operator><name pos:start="623:55" pos:end="623:60">memidx</name></name></expr></argument>, <argument pos:start="623:63" pos:end="623:68"><expr pos:start="623:63" pos:end="623:68"><name pos:start="623:63" pos:end="623:68">ld_mop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="625:13" pos:end="625:62"><expr pos:start="625:13" pos:end="625:61"><call pos:start="625:13" pos:end="625:61"><name pos:start="625:13" pos:end="625:27">tcg_gen_xor_i32</name><argument_list pos:start="625:28" pos:end="625:61">(<argument pos:start="625:29" pos:end="625:39"><expr pos:start="625:29" pos:end="625:39"><call pos:start="625:29" pos:end="625:39"><name pos:start="625:29" pos:end="625:31">REG</name><argument_list pos:start="625:32" pos:end="625:39">(<argument pos:start="625:33" pos:end="625:38"><expr pos:start="625:33" pos:end="625:38"><name pos:start="625:33" pos:end="625:38">op_dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="625:42" pos:end="625:52"><expr pos:start="625:42" pos:end="625:52"><call pos:start="625:42" pos:end="625:52"><name pos:start="625:42" pos:end="625:44">REG</name><argument_list pos:start="625:45" pos:end="625:52">(<argument pos:start="625:46" pos:end="625:51"><expr pos:start="625:46" pos:end="625:51"><name pos:start="625:46" pos:end="625:51">ld_dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="625:55" pos:end="625:60"><expr pos:start="625:55" pos:end="625:60"><name pos:start="625:55" pos:end="625:60">op_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="629:9" pos:end="629:14">break;</break>



    <case pos:start="633:5" pos:end="633:30">case <expr pos:start="633:10" pos:end="633:29"><name pos:start="633:10" pos:end="633:29">INDEX_op_setcond_i32</name></expr>:</case>

        <if_stmt pos:start="635:9" pos:end="639:9"><if pos:start="635:9" pos:end="639:9">if <condition pos:start="635:12" pos:end="635:29">(<expr pos:start="635:13" pos:end="635:28"><name pos:start="635:13" pos:end="635:18">st_src</name> <operator pos:start="635:20" pos:end="635:21">==</operator> <name pos:start="635:23" pos:end="635:28">ld_dst</name></expr>)</condition> <block pos:start="635:31" pos:end="639:9">{<block_content pos:start="637:13" pos:end="637:22">

            <goto pos:start="637:13" pos:end="637:22">goto <name pos:start="637:18" pos:end="637:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="641:9" pos:end="643:69"><expr pos:start="641:9" pos:end="643:68"><call pos:start="641:9" pos:end="643:68"><name pos:start="641:9" pos:end="641:34">tcg_gen_atomic_cmpxchg_i32</name><argument_list pos:start="641:35" pos:end="643:68">(<argument pos:start="641:36" pos:end="641:46"><expr pos:start="641:36" pos:end="641:46"><call pos:start="641:36" pos:end="641:46"><name pos:start="641:36" pos:end="641:38">REG</name><argument_list pos:start="641:39" pos:end="641:46">(<argument pos:start="641:40" pos:end="641:45"><expr pos:start="641:40" pos:end="641:45"><name pos:start="641:40" pos:end="641:45">ld_dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="641:49" pos:end="641:59"><expr pos:start="641:49" pos:end="641:59"><call pos:start="641:49" pos:end="641:59"><name pos:start="641:49" pos:end="641:51">REG</name><argument_list pos:start="641:52" pos:end="641:59">(<argument pos:start="641:53" pos:end="641:58"><expr pos:start="641:53" pos:end="641:58"><name pos:start="641:53" pos:end="641:58">ld_adr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="641:62" pos:end="641:67"><expr pos:start="641:62" pos:end="641:67"><name pos:start="641:62" pos:end="641:67">op_arg</name></expr></argument>,

                                   <argument pos:start="643:36" pos:end="643:46"><expr pos:start="643:36" pos:end="643:46"><call pos:start="643:36" pos:end="643:46"><name pos:start="643:36" pos:end="643:38">REG</name><argument_list pos:start="643:39" pos:end="643:46">(<argument pos:start="643:40" pos:end="643:45"><expr pos:start="643:40" pos:end="643:45"><name pos:start="643:40" pos:end="643:45">st_src</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="643:49" pos:end="643:59"><expr pos:start="643:49" pos:end="643:59"><name pos:start="643:49" pos:end="643:59"><name pos:start="643:49" pos:end="643:51">ctx</name><operator pos:start="643:52" pos:end="643:53">-&gt;</operator><name pos:start="643:54" pos:end="643:59">memidx</name></name></expr></argument>, <argument pos:start="643:62" pos:end="643:67"><expr pos:start="643:62" pos:end="643:67"><name pos:start="643:62" pos:end="643:67">ld_mop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="645:9" pos:end="645:72"><expr pos:start="645:9" pos:end="645:71"><call pos:start="645:9" pos:end="645:71"><name pos:start="645:9" pos:end="645:27">tcg_gen_setcond_i32</name><argument_list pos:start="645:28" pos:end="645:71">(<argument pos:start="645:29" pos:end="645:39"><expr pos:start="645:29" pos:end="645:39"><name pos:start="645:29" pos:end="645:39">TCG_COND_EQ</name></expr></argument>, <argument pos:start="645:42" pos:end="645:49"><expr pos:start="645:42" pos:end="645:49"><name pos:start="645:42" pos:end="645:49">cpu_sr_t</name></expr></argument>, <argument pos:start="645:52" pos:end="645:62"><expr pos:start="645:52" pos:end="645:62"><call pos:start="645:52" pos:end="645:62"><name pos:start="645:52" pos:end="645:54">REG</name><argument_list pos:start="645:55" pos:end="645:62">(<argument pos:start="645:56" pos:end="645:61"><expr pos:start="645:56" pos:end="645:61"><name pos:start="645:56" pos:end="645:61">ld_dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="645:65" pos:end="645:70"><expr pos:start="645:65" pos:end="645:70"><name pos:start="645:65" pos:end="645:70">op_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="647:9" pos:end="651:9"><if pos:start="647:9" pos:end="651:9">if <condition pos:start="647:12" pos:end="647:24">(<expr pos:start="647:13" pos:end="647:23"><name pos:start="647:13" pos:end="647:18">mt_dst</name> <operator pos:start="647:20" pos:end="647:21">&gt;=</operator> <literal type="number" pos:start="647:23" pos:end="647:23">0</literal></expr>)</condition> <block pos:start="647:26" pos:end="651:9">{<block_content pos:start="649:13" pos:end="649:51">

            <expr_stmt pos:start="649:13" pos:end="649:51"><expr pos:start="649:13" pos:end="649:50"><call pos:start="649:13" pos:end="649:50"><name pos:start="649:13" pos:end="649:27">tcg_gen_mov_i32</name><argument_list pos:start="649:28" pos:end="649:50">(<argument pos:start="649:29" pos:end="649:39"><expr pos:start="649:29" pos:end="649:39"><call pos:start="649:29" pos:end="649:39"><name pos:start="649:29" pos:end="649:31">REG</name><argument_list pos:start="649:32" pos:end="649:39">(<argument pos:start="649:33" pos:end="649:38"><expr pos:start="649:33" pos:end="649:38"><name pos:start="649:33" pos:end="649:38">mt_dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="649:42" pos:end="649:49"><expr pos:start="649:42" pos:end="649:49"><name pos:start="649:42" pos:end="649:49">cpu_sr_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="653:9" pos:end="653:14">break;</break>



    <default pos:start="657:5" pos:end="657:12">default:</default>

        <expr_stmt pos:start="659:9" pos:end="659:31"><expr pos:start="659:9" pos:end="659:30"><call pos:start="659:9" pos:end="659:30"><name pos:start="659:9" pos:end="659:28">g_assert_not_reached</name><argument_list pos:start="659:29" pos:end="659:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <comment type="block" pos:start="665:5" pos:end="665:73">/* If op_src is not a valid register, then op_arg was a constant.  */</comment>

    <if_stmt pos:start="667:5" pos:end="671:5"><if pos:start="667:5" pos:end="671:5">if <condition pos:start="667:8" pos:end="667:19">(<expr pos:start="667:9" pos:end="667:18"><name pos:start="667:9" pos:end="667:14">op_src</name> <operator pos:start="667:16" pos:end="667:16">&lt;</operator> <literal type="number" pos:start="667:18" pos:end="667:18">0</literal></expr>)</condition> <block pos:start="667:21" pos:end="671:5">{<block_content pos:start="669:9" pos:end="669:34">

        <expr_stmt pos:start="669:9" pos:end="669:34"><expr pos:start="669:9" pos:end="669:33"><call pos:start="669:9" pos:end="669:33"><name pos:start="669:9" pos:end="669:25">tcg_temp_free_i32</name><argument_list pos:start="669:26" pos:end="669:33">(<argument pos:start="669:27" pos:end="669:32"><expr pos:start="669:27" pos:end="669:32"><name pos:start="669:27" pos:end="669:32">op_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="675:5" pos:end="675:49">/* The entire region has been translated.  */</comment>

    <expr_stmt pos:start="677:5" pos:end="677:32"><expr pos:start="677:5" pos:end="677:31"><name pos:start="677:5" pos:end="677:17"><name pos:start="677:5" pos:end="677:7">ctx</name><operator pos:start="677:8" pos:end="677:9">-&gt;</operator><name pos:start="677:10" pos:end="677:17">envflags</name></name> <operator pos:start="677:19" pos:end="677:20">&amp;=</operator> <operator pos:start="677:22" pos:end="677:22">~</operator><name pos:start="677:23" pos:end="677:31">GUSA_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="679:5" pos:end="679:21"><expr pos:start="679:5" pos:end="679:20"><name pos:start="679:5" pos:end="679:11"><name pos:start="679:5" pos:end="679:7">ctx</name><operator pos:start="679:8" pos:end="679:9">-&gt;</operator><name pos:start="679:10" pos:end="679:11">pc</name></name> <operator pos:start="679:13" pos:end="679:13">=</operator> <name pos:start="679:15" pos:end="679:20">pc_end</name></expr>;</expr_stmt>

    <return pos:start="681:5" pos:end="681:21">return <expr pos:start="681:12" pos:end="681:20"><name pos:start="681:12" pos:end="681:20">max_insns</name></expr>;</return>



 <label pos:start="685:2" pos:end="685:6"><name pos:start="685:2" pos:end="685:5">fail</name>:</label>

    <expr_stmt pos:start="687:5" pos:end="689:30"><expr pos:start="687:5" pos:end="689:29"><call pos:start="687:5" pos:end="689:29"><name pos:start="687:5" pos:end="687:17">qemu_log_mask</name><argument_list pos:start="687:18" pos:end="689:29">(<argument pos:start="687:19" pos:end="687:27"><expr pos:start="687:19" pos:end="687:27"><name pos:start="687:19" pos:end="687:27">LOG_UNIMP</name></expr></argument>, <argument pos:start="687:30" pos:end="687:69"><expr pos:start="687:30" pos:end="687:69"><literal type="string" pos:start="687:30" pos:end="687:69">"Unrecognized gUSA sequence %08x-%08x\n"</literal></expr></argument>,

                  <argument pos:start="689:19" pos:end="689:20"><expr pos:start="689:19" pos:end="689:20"><name pos:start="689:19" pos:end="689:20">pc</name></expr></argument>, <argument pos:start="689:23" pos:end="689:28"><expr pos:start="689:23" pos:end="689:28"><name pos:start="689:23" pos:end="689:28">pc_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="693:5" pos:end="695:59">/* Restart with the EXCLUSIVE bit set, within a TB run via

       cpu_exec_step_atomic holding the exclusive lock.  */</comment>

    <expr_stmt pos:start="697:5" pos:end="697:42"><expr pos:start="697:5" pos:end="697:41"><call pos:start="697:5" pos:end="697:41"><name pos:start="697:5" pos:end="697:22">tcg_gen_insn_start</name><argument_list pos:start="697:23" pos:end="697:41">(<argument pos:start="697:24" pos:end="697:25"><expr pos:start="697:24" pos:end="697:25"><name pos:start="697:24" pos:end="697:25">pc</name></expr></argument>, <argument pos:start="697:28" pos:end="697:40"><expr pos:start="697:28" pos:end="697:40"><name pos:start="697:28" pos:end="697:40"><name pos:start="697:28" pos:end="697:30">ctx</name><operator pos:start="697:31" pos:end="697:32">-&gt;</operator><name pos:start="697:33" pos:end="697:40">envflags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="699:5" pos:end="699:36"><expr pos:start="699:5" pos:end="699:35"><name pos:start="699:5" pos:end="699:17"><name pos:start="699:5" pos:end="699:7">ctx</name><operator pos:start="699:8" pos:end="699:9">-&gt;</operator><name pos:start="699:10" pos:end="699:17">envflags</name></name> <operator pos:start="699:19" pos:end="699:20">|=</operator> <name pos:start="699:22" pos:end="699:35">GUSA_EXCLUSIVE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="701:5" pos:end="701:35"><expr pos:start="701:5" pos:end="701:34"><call pos:start="701:5" pos:end="701:34"><name pos:start="701:5" pos:end="701:22">gen_save_cpu_state</name><argument_list pos:start="701:23" pos:end="701:34">(<argument pos:start="701:24" pos:end="701:26"><expr pos:start="701:24" pos:end="701:26"><name pos:start="701:24" pos:end="701:26">ctx</name></expr></argument>, <argument pos:start="701:29" pos:end="701:33"><expr pos:start="701:29" pos:end="701:33"><name pos:start="701:29" pos:end="701:33">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="703:5" pos:end="703:34"><expr pos:start="703:5" pos:end="703:33"><call pos:start="703:5" pos:end="703:33"><name pos:start="703:5" pos:end="703:24">gen_helper_exclusive</name><argument_list pos:start="703:25" pos:end="703:33">(<argument pos:start="703:26" pos:end="703:32"><expr pos:start="703:26" pos:end="703:32"><name pos:start="703:26" pos:end="703:32">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="705:5" pos:end="705:26"><expr pos:start="705:5" pos:end="705:25"><name pos:start="705:5" pos:end="705:15"><name pos:start="705:5" pos:end="705:7">ctx</name><operator pos:start="705:8" pos:end="705:9">-&gt;</operator><name pos:start="705:10" pos:end="705:15">bstate</name></name> <operator pos:start="705:17" pos:end="705:17">=</operator> <name pos:start="705:19" pos:end="705:25">BS_EXCP</name></expr>;</expr_stmt>



    <comment type="block" pos:start="709:5" pos:end="715:35">/* We're not executing an instruction, but we must report one for the

       purposes of accounting within the TB.  We might as well report the

       entire region consumed via ctx-&gt;pc so that it's immediately available

       in the disassembly dump.  */</comment>

    <expr_stmt pos:start="717:5" pos:end="717:21"><expr pos:start="717:5" pos:end="717:20"><name pos:start="717:5" pos:end="717:11"><name pos:start="717:5" pos:end="717:7">ctx</name><operator pos:start="717:8" pos:end="717:9">-&gt;</operator><name pos:start="717:10" pos:end="717:11">pc</name></name> <operator pos:start="717:13" pos:end="717:13">=</operator> <name pos:start="717:15" pos:end="717:20">pc_end</name></expr>;</expr_stmt>

    <return pos:start="719:5" pos:end="719:13">return <expr pos:start="719:12" pos:end="719:12"><literal type="number" pos:start="719:12" pos:end="719:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
