<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7181.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:19">ff_lock_avcodec</name><parameter_list pos:start="1:20" pos:end="1:66">(<parameter pos:start="1:21" pos:end="1:43"><decl pos:start="1:21" pos:end="1:43"><type pos:start="1:21" pos:end="1:43"><name pos:start="1:21" pos:end="1:34">AVCodecContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:43">log_ctx</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:65"><decl pos:start="1:46" pos:end="1:65"><type pos:start="1:46" pos:end="1:65"><specifier pos:start="1:46" pos:end="1:50">const</specifier> <name pos:start="1:52" pos:end="1:58">AVCodec</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:65">codec</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:13">

    <if_stmt pos:start="5:5" pos:end="7:17"><if pos:start="5:5" pos:end="7:17">if <condition pos:start="5:8" pos:end="5:76">(<expr pos:start="5:9" pos:end="5:75"><name pos:start="5:9" pos:end="5:28"><name pos:start="5:9" pos:end="5:13">codec</name><operator pos:start="5:14" pos:end="5:15">-&gt;</operator><name pos:start="5:16" pos:end="5:28">caps_internal</name></name> <operator pos:start="5:30" pos:end="5:30">&amp;</operator> <name pos:start="5:32" pos:end="5:59">FF_CODEC_CAP_INIT_THREADSAFE</name> <operator pos:start="5:61" pos:end="5:62">||</operator> <operator pos:start="5:64" pos:end="5:64">!</operator><name pos:start="5:65" pos:end="5:75"><name pos:start="5:65" pos:end="5:69">codec</name><operator pos:start="5:70" pos:end="5:71">-&gt;</operator><name pos:start="5:72" pos:end="5:75">init</name></name></expr>)</condition><block type="pseudo" pos:start="7:9" pos:end="7:17"><block_content pos:start="7:9" pos:end="7:17">

        <return pos:start="7:9" pos:end="7:17">return <expr pos:start="7:16" pos:end="7:16"><literal type="number" pos:start="7:16" pos:end="7:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="11:5" pos:end="13:18"><if pos:start="11:5" pos:end="13:18">if <condition pos:start="11:8" pos:end="11:36">(<expr pos:start="11:9" pos:end="11:35"><call pos:start="11:9" pos:end="11:35"><name pos:start="11:9" pos:end="11:21">ff_mutex_lock</name><argument_list pos:start="11:22" pos:end="11:35">(<argument pos:start="11:23" pos:end="11:34"><expr pos:start="11:23" pos:end="11:34"><operator pos:start="11:23" pos:end="11:23">&amp;</operator><name pos:start="11:24" pos:end="11:34">codec_mutex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:18"><block_content pos:start="13:9" pos:end="13:18">

        <return pos:start="13:9" pos:end="13:18">return <expr pos:start="13:16" pos:end="13:17"><operator pos:start="13:16" pos:end="13:16">-</operator><literal type="number" pos:start="13:17" pos:end="13:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="17:5" pos:end="33:5"><if pos:start="17:5" pos:end="33:5">if <condition pos:start="17:8" pos:end="17:55">(<expr pos:start="17:9" pos:end="17:54"><call pos:start="17:9" pos:end="17:54"><name pos:start="17:9" pos:end="17:24">atomic_fetch_add</name><argument_list pos:start="17:25" pos:end="17:54">(<argument pos:start="17:26" pos:end="17:50"><expr pos:start="17:26" pos:end="17:50"><operator pos:start="17:26" pos:end="17:26">&amp;</operator><name pos:start="17:27" pos:end="17:50">entangled_thread_counter</name></expr></argument>, <argument pos:start="17:53" pos:end="17:53"><expr pos:start="17:53" pos:end="17:53"><literal type="number" pos:start="17:53" pos:end="17:53">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:57" pos:end="33:5">{<block_content pos:start="19:9" pos:end="31:31">

        <expr_stmt pos:start="19:9" pos:end="25:55"><expr pos:start="19:9" pos:end="25:54"><call pos:start="19:9" pos:end="25:54"><name pos:start="19:9" pos:end="19:14">av_log</name><argument_list pos:start="19:15" pos:end="25:54">(<argument pos:start="19:16" pos:end="19:22"><expr pos:start="19:16" pos:end="19:22"><name pos:start="19:16" pos:end="19:22">log_ctx</name></expr></argument>, <argument pos:start="19:25" pos:end="19:36"><expr pos:start="19:25" pos:end="19:36"><name pos:start="19:25" pos:end="19:36">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="21:16" pos:end="23:70"><expr pos:start="21:16" pos:end="23:70"><literal type="string" pos:start="21:16" pos:end="21:70">"Insufficient thread locking. At least %d threads are "</literal>

               <literal type="string" pos:start="23:16" pos:end="23:70">"calling avcodec_open2() at the same time right now.\n"</literal></expr></argument>,

               <argument pos:start="25:16" pos:end="25:53"><expr pos:start="25:16" pos:end="25:53"><call pos:start="25:16" pos:end="25:53"><name pos:start="25:16" pos:end="25:26">atomic_load</name><argument_list pos:start="25:27" pos:end="25:53">(<argument pos:start="25:28" pos:end="25:52"><expr pos:start="25:28" pos:end="25:52"><operator pos:start="25:28" pos:end="25:28">&amp;</operator><name pos:start="25:29" pos:end="25:52">entangled_thread_counter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:30"><expr pos:start="27:9" pos:end="27:29"><name pos:start="27:9" pos:end="27:25">ff_avcodec_locked</name> <operator pos:start="27:27" pos:end="27:27">=</operator> <literal type="number" pos:start="27:29" pos:end="27:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:33"><expr pos:start="29:9" pos:end="29:32"><call pos:start="29:9" pos:end="29:32"><name pos:start="29:9" pos:end="29:25">ff_unlock_avcodec</name><argument_list pos:start="29:26" pos:end="29:32">(<argument pos:start="29:27" pos:end="29:31"><expr pos:start="29:27" pos:end="29:31"><name pos:start="29:27" pos:end="29:31">codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:31">return <expr pos:start="31:16" pos:end="31:30"><call pos:start="31:16" pos:end="31:30"><name pos:start="31:16" pos:end="31:22">AVERROR</name><argument_list pos:start="31:23" pos:end="31:30">(<argument pos:start="31:24" pos:end="31:29"><expr pos:start="31:24" pos:end="31:29"><name pos:start="31:24" pos:end="31:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:35"><expr pos:start="35:5" pos:end="35:34"><call pos:start="35:5" pos:end="35:34"><name pos:start="35:5" pos:end="35:14">av_assert0</name><argument_list pos:start="35:15" pos:end="35:34">(<argument pos:start="35:16" pos:end="35:33"><expr pos:start="35:16" pos:end="35:33"><operator pos:start="35:16" pos:end="35:16">!</operator><name pos:start="35:17" pos:end="35:33">ff_avcodec_locked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:26"><expr pos:start="37:5" pos:end="37:25"><name pos:start="37:5" pos:end="37:21">ff_avcodec_locked</name> <operator pos:start="37:23" pos:end="37:23">=</operator> <literal type="number" pos:start="37:25" pos:end="37:25">1</literal></expr>;</expr_stmt>

    <return pos:start="39:5" pos:end="39:13">return <expr pos:start="39:12" pos:end="39:12"><literal type="number" pos:start="39:12" pos:end="39:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
