<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20529.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:19">z2_init</name><parameter_list pos:start="1:20" pos:end="1:42">(<parameter pos:start="1:21" pos:end="1:41"><decl pos:start="1:21" pos:end="1:41"><type pos:start="1:21" pos:end="1:34"><name pos:start="1:21" pos:end="1:32">MachineState</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:41">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="141:1">{<block_content pos:start="5:5" pos:end="139:41">

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:25">cpu_model</name> <init pos:start="5:27" pos:end="5:46">= <expr pos:start="5:29" pos:end="5:46"><name pos:start="5:29" pos:end="5:46"><name pos:start="5:29" pos:end="5:35">machine</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:59"><decl pos:start="7:5" pos:end="7:58"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:31">kernel_filename</name> <init pos:start="7:33" pos:end="7:58">= <expr pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:41">machine</name><operator pos:start="7:42" pos:end="7:43">-&gt;</operator><name pos:start="7:44" pos:end="7:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:57"><decl pos:start="9:5" pos:end="9:56"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:30">kernel_cmdline</name> <init pos:start="9:32" pos:end="9:56">= <expr pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:40">machine</name><operator pos:start="9:41" pos:end="9:42">-&gt;</operator><name pos:start="9:43" pos:end="9:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:59"><decl pos:start="11:5" pos:end="11:58"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:31">initrd_filename</name> <init pos:start="11:33" pos:end="11:58">= <expr pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:41">machine</name><operator pos:start="11:42" pos:end="11:43">-&gt;</operator><name pos:start="11:44" pos:end="11:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:58"><decl pos:start="13:5" pos:end="13:57"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MemoryRegion</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:35">address_space_mem</name> <init pos:start="13:37" pos:end="13:57">= <expr pos:start="13:39" pos:end="13:57"><call pos:start="13:39" pos:end="13:57"><name pos:start="13:39" pos:end="13:55">get_system_memory</name><argument_list pos:start="13:56" pos:end="13:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:34"><decl pos:start="15:5" pos:end="15:33"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:23">sector_len</name> <init pos:start="15:25" pos:end="15:33">= <expr pos:start="15:27" pos:end="15:33"><literal type="number" pos:start="15:27" pos:end="15:33">0x10000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:15">PXA2xxState</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:20">mpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:13">DriveInfo</name> <modifier pos:start="19:15" pos:end="19:15">*</modifier></type><name pos:start="19:16" pos:end="19:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:11"><decl pos:start="21:5" pos:end="21:10"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:10">be</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:17"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:8">void</name> <modifier pos:start="23:10" pos:end="23:10">*</modifier></type><name pos:start="23:11" pos:end="23:16">z2_lcd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:16"><decl pos:start="25:5" pos:end="25:15"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:10">I2CBus</name> <modifier pos:start="25:12" pos:end="25:12">*</modifier></type><name pos:start="25:13" pos:end="25:15">bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:20"><decl pos:start="27:5" pos:end="27:19"><type pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:15">DeviceState</name> <modifier pos:start="27:17" pos:end="27:17">*</modifier></type><name pos:start="27:18" pos:end="27:19">wm</name></decl>;</decl_stmt>



    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:19">(<expr pos:start="31:9" pos:end="31:18"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:18">cpu_model</name></expr>)</condition> <block pos:start="31:21" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:32">

        <expr_stmt pos:start="33:9" pos:end="33:32"><expr pos:start="33:9" pos:end="33:31"><name pos:start="33:9" pos:end="33:17">cpu_model</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <literal type="string" pos:start="33:21" pos:end="33:31">"pxa270-c5"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:28">/* Setup CPU &amp; memory */</comment>

    <expr_stmt pos:start="41:5" pos:end="46:0"><expr pos:start="41:5" pos:end="41:70"><name pos:start="41:5" pos:end="41:7">mpu</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:70"><name pos:start="41:11" pos:end="41:21">pxa270_init</name><argument_list pos:start="41:22" pos:end="41:70">(<argument pos:start="41:23" pos:end="41:39"><expr pos:start="41:23" pos:end="41:39"><name pos:start="41:23" pos:end="41:39">address_space_mem</name></expr></argument>, <argument pos:start="41:42" pos:end="41:58"><expr pos:start="41:42" pos:end="41:58"><name pos:start="41:42" pos:end="41:58"><name pos:start="41:42" pos:end="41:49">z2_binfo</name><operator pos:start="41:50" pos:end="41:50">.</operator><name pos:start="41:51" pos:end="41:58">ram_size</name></name></expr></argument>, <argument pos:start="41:61" pos:end="41:69"><expr pos:start="41:61" pos:end="41:69"><name pos:start="41:61" pos:end="41:69">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="45:1" pos:end="45:29">#<cpp:directive pos:start="45:2" pos:end="45:6">ifdef</cpp:directive> <name pos:start="45:8" pos:end="45:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="47:5" pos:end="50:0"><expr pos:start="47:5" pos:end="47:10"><name pos:start="47:5" pos:end="47:6">be</name> <operator pos:start="47:8" pos:end="47:8">=</operator> <literal type="number" pos:start="47:10" pos:end="47:10">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="49:1" pos:end="49:5">#<cpp:directive pos:start="49:2" pos:end="49:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="51:5" pos:end="54:0"><expr pos:start="51:5" pos:end="51:10"><name pos:start="51:5" pos:end="51:6">be</name> <operator pos:start="51:8" pos:end="51:8">=</operator> <literal type="number" pos:start="51:10" pos:end="51:10">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="55:5" pos:end="55:39"><expr pos:start="55:5" pos:end="55:38"><name pos:start="55:5" pos:end="55:9">dinfo</name> <operator pos:start="55:11" pos:end="55:11">=</operator> <call pos:start="55:13" pos:end="55:38"><name pos:start="55:13" pos:end="55:21">drive_get</name><argument_list pos:start="55:22" pos:end="55:38">(<argument pos:start="55:23" pos:end="55:31"><expr pos:start="55:23" pos:end="55:31"><name pos:start="55:23" pos:end="55:31">IF_PFLASH</name></expr></argument>, <argument pos:start="55:34" pos:end="55:34"><expr pos:start="55:34" pos:end="55:34"><literal type="number" pos:start="55:34" pos:end="55:34">0</literal></expr></argument>, <argument pos:start="55:37" pos:end="55:37"><expr pos:start="55:37" pos:end="55:37"><literal type="number" pos:start="55:37" pos:end="55:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="65:5"><if pos:start="57:5" pos:end="65:5">if <condition pos:start="57:8" pos:end="57:35">(<expr pos:start="57:9" pos:end="57:34"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:14">dinfo</name> <operator pos:start="57:16" pos:end="57:17">&amp;&amp;</operator> <operator pos:start="57:19" pos:end="57:19">!</operator><call pos:start="57:20" pos:end="57:34"><name pos:start="57:20" pos:end="57:32">qtest_enabled</name><argument_list pos:start="57:33" pos:end="57:34">()</argument_list></call></expr>)</condition> <block pos:start="57:37" pos:end="65:5">{<block_content pos:start="59:9" pos:end="63:16">

        <expr_stmt pos:start="59:9" pos:end="61:40"><expr pos:start="59:9" pos:end="61:39"><call pos:start="59:9" pos:end="61:39"><name pos:start="59:9" pos:end="59:15">fprintf</name><argument_list pos:start="59:16" pos:end="61:39">(<argument pos:start="59:17" pos:end="59:22"><expr pos:start="59:17" pos:end="59:22"><name pos:start="59:17" pos:end="59:22">stderr</name></expr></argument>, <argument pos:start="59:25" pos:end="61:38"><expr pos:start="59:25" pos:end="61:38"><literal type="string" pos:start="59:25" pos:end="59:61">"Flash image must be given with the "</literal>

                <literal type="string" pos:start="61:17" pos:end="61:38">"'pflash' parameter\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:16"><expr pos:start="63:9" pos:end="63:15"><call pos:start="63:9" pos:end="63:15"><name pos:start="63:9" pos:end="63:12">exit</name><argument_list pos:start="63:13" pos:end="63:15">(<argument pos:start="63:14" pos:end="63:14"><expr pos:start="63:14" pos:end="63:14"><literal type="number" pos:start="63:14" pos:end="63:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="69:5" pos:end="83:5"><if pos:start="69:5" pos:end="83:5">if <condition pos:start="69:8" pos:end="77:50">(<expr pos:start="69:9" pos:end="77:49"><operator pos:start="69:9" pos:end="69:9">!</operator><call pos:start="69:10" pos:end="77:49"><name pos:start="69:10" pos:end="69:30">pflash_cfi01_register</name><argument_list pos:start="69:31" pos:end="77:49">(<argument pos:start="69:32" pos:end="69:44"><expr pos:start="69:32" pos:end="69:44"><name pos:start="69:32" pos:end="69:44">Z2_FLASH_BASE</name></expr></argument>,

                               <argument pos:start="71:32" pos:end="71:35"><expr pos:start="71:32" pos:end="71:35"><name pos:start="71:32" pos:end="71:35">NULL</name></expr></argument>, <argument pos:start="71:38" pos:end="71:48"><expr pos:start="71:38" pos:end="71:48"><literal type="string" pos:start="71:38" pos:end="71:48">"z2.flash0"</literal></expr></argument>, <argument pos:start="71:51" pos:end="71:63"><expr pos:start="71:51" pos:end="71:63"><name pos:start="71:51" pos:end="71:63">Z2_FLASH_SIZE</name></expr></argument>,

                               <argument pos:start="73:32" pos:end="73:80"><expr pos:start="73:32" pos:end="73:80"><ternary pos:start="73:32" pos:end="73:80"><condition pos:start="73:32" pos:end="73:38"><expr pos:start="73:32" pos:end="73:36"><name pos:start="73:32" pos:end="73:36">dinfo</name></expr> ?</condition><then pos:start="73:40" pos:end="73:73"> <expr pos:start="73:40" pos:end="73:73"><call pos:start="73:40" pos:end="73:73"><name pos:start="73:40" pos:end="73:45">blk_bs</name><argument_list pos:start="73:46" pos:end="73:73">(<argument pos:start="73:47" pos:end="73:72"><expr pos:start="73:47" pos:end="73:72"><call pos:start="73:47" pos:end="73:72"><name pos:start="73:47" pos:end="73:65">blk_by_legacy_dinfo</name><argument_list pos:start="73:66" pos:end="73:72">(<argument pos:start="73:67" pos:end="73:71"><expr pos:start="73:67" pos:end="73:71"><name pos:start="73:67" pos:end="73:71">dinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else pos:start="73:75" pos:end="73:80">: <expr pos:start="73:77" pos:end="73:80"><name pos:start="73:77" pos:end="73:80">NULL</name></expr></else></ternary></expr></argument>,

                               <argument pos:start="75:32" pos:end="75:41"><expr pos:start="75:32" pos:end="75:41"><name pos:start="75:32" pos:end="75:41">sector_len</name></expr></argument>, <argument pos:start="75:44" pos:end="75:69"><expr pos:start="75:44" pos:end="75:69"><name pos:start="75:44" pos:end="75:56">Z2_FLASH_SIZE</name> <operator pos:start="75:58" pos:end="75:58">/</operator> <name pos:start="75:60" pos:end="75:69">sector_len</name></expr></argument>,

                               <argument pos:start="77:32" pos:end="77:32"><expr pos:start="77:32" pos:end="77:32"><literal type="number" pos:start="77:32" pos:end="77:32">4</literal></expr></argument>, <argument pos:start="77:35" pos:end="77:35"><expr pos:start="77:35" pos:end="77:35"><literal type="number" pos:start="77:35" pos:end="77:35">0</literal></expr></argument>, <argument pos:start="77:38" pos:end="77:38"><expr pos:start="77:38" pos:end="77:38"><literal type="number" pos:start="77:38" pos:end="77:38">0</literal></expr></argument>, <argument pos:start="77:41" pos:end="77:41"><expr pos:start="77:41" pos:end="77:41"><literal type="number" pos:start="77:41" pos:end="77:41">0</literal></expr></argument>, <argument pos:start="77:44" pos:end="77:44"><expr pos:start="77:44" pos:end="77:44"><literal type="number" pos:start="77:44" pos:end="77:44">0</literal></expr></argument>, <argument pos:start="77:47" pos:end="77:48"><expr pos:start="77:47" pos:end="77:48"><name pos:start="77:47" pos:end="77:48">be</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="77:52" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:16">

        <expr_stmt pos:start="79:9" pos:end="79:67"><expr pos:start="79:9" pos:end="79:66"><call pos:start="79:9" pos:end="79:66"><name pos:start="79:9" pos:end="79:15">fprintf</name><argument_list pos:start="79:16" pos:end="79:66">(<argument pos:start="79:17" pos:end="79:22"><expr pos:start="79:17" pos:end="79:22"><name pos:start="79:17" pos:end="79:22">stderr</name></expr></argument>, <argument pos:start="79:25" pos:end="79:65"><expr pos:start="79:25" pos:end="79:65"><literal type="string" pos:start="79:25" pos:end="79:65">"qemu: Error registering flash memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:16"><expr pos:start="81:9" pos:end="81:15"><call pos:start="81:9" pos:end="81:15"><name pos:start="81:9" pos:end="81:12">exit</name><argument_list pos:start="81:13" pos:end="81:15">(<argument pos:start="81:14" pos:end="81:14"><expr pos:start="81:14" pos:end="81:14"><literal type="number" pos:start="81:14" pos:end="81:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:22">/* setup keypad */</comment>

    <expr_stmt pos:start="89:5" pos:end="89:48"><expr pos:start="89:5" pos:end="89:47"><call pos:start="89:5" pos:end="89:47"><name pos:start="89:5" pos:end="89:26">pxa27x_register_keypad</name><argument_list pos:start="89:27" pos:end="89:47">(<argument pos:start="89:28" pos:end="89:34"><expr pos:start="89:28" pos:end="89:34"><name pos:start="89:28" pos:end="89:34"><name pos:start="89:28" pos:end="89:30">mpu</name><operator pos:start="89:31" pos:end="89:32">-&gt;</operator><name pos:start="89:33" pos:end="89:34">kp</name></name></expr></argument>, <argument pos:start="89:37" pos:end="89:39"><expr pos:start="89:37" pos:end="89:39"><name pos:start="89:37" pos:end="89:39">map</name></expr></argument>, <argument pos:start="89:42" pos:end="89:46"><expr pos:start="89:42" pos:end="89:46"><literal type="number" pos:start="89:42" pos:end="89:46">0x100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="93:5" pos:end="93:21">/* MMC/SD host */</comment>

    <expr_stmt pos:start="95:5" pos:end="99:56"><expr pos:start="95:5" pos:end="99:55"><call pos:start="95:5" pos:end="99:55"><name pos:start="95:5" pos:end="95:24">pxa2xx_mmci_handlers</name><argument_list pos:start="95:25" pos:end="99:55">(<argument pos:start="95:26" pos:end="95:33"><expr pos:start="95:26" pos:end="95:33"><name pos:start="95:26" pos:end="95:33"><name pos:start="95:26" pos:end="95:28">mpu</name><operator pos:start="95:29" pos:end="95:30">-&gt;</operator><name pos:start="95:31" pos:end="95:33">mmc</name></name></expr></argument>,

        <argument pos:start="97:9" pos:end="97:12"><expr pos:start="97:9" pos:end="97:12"><name pos:start="97:9" pos:end="97:12">NULL</name></expr></argument>,

        <argument pos:start="99:9" pos:end="99:54"><expr pos:start="99:9" pos:end="99:54"><call pos:start="99:9" pos:end="99:54"><name pos:start="99:9" pos:end="99:24">qdev_get_gpio_in</name><argument_list pos:start="99:25" pos:end="99:54">(<argument pos:start="99:26" pos:end="99:34"><expr pos:start="99:26" pos:end="99:34"><name pos:start="99:26" pos:end="99:34"><name pos:start="99:26" pos:end="99:28">mpu</name><operator pos:start="99:29" pos:end="99:30">-&gt;</operator><name pos:start="99:31" pos:end="99:34">gpio</name></name></expr></argument>, <argument pos:start="99:37" pos:end="99:53"><expr pos:start="99:37" pos:end="99:53"><name pos:start="99:37" pos:end="99:53">Z2_GPIO_SD_DETECT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:42"><expr pos:start="103:5" pos:end="103:41"><call pos:start="103:5" pos:end="103:41"><name pos:start="103:5" pos:end="103:24">type_register_static</name><argument_list pos:start="103:25" pos:end="103:41">(<argument pos:start="103:26" pos:end="103:40"><expr pos:start="103:26" pos:end="103:40"><operator pos:start="103:26" pos:end="103:26">&amp;</operator><name pos:start="103:27" pos:end="103:40">zipit_lcd_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:39"><expr pos:start="105:5" pos:end="105:38"><call pos:start="105:5" pos:end="105:38"><name pos:start="105:5" pos:end="105:24">type_register_static</name><argument_list pos:start="105:25" pos:end="105:38">(<argument pos:start="105:26" pos:end="105:37"><expr pos:start="105:26" pos:end="105:37"><operator pos:start="105:26" pos:end="105:26">&amp;</operator><name pos:start="105:27" pos:end="105:37">aer915_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:56"><expr pos:start="107:5" pos:end="107:55"><name pos:start="107:5" pos:end="107:10">z2_lcd</name> <operator pos:start="107:12" pos:end="107:12">=</operator> <call pos:start="107:14" pos:end="107:55"><name pos:start="107:14" pos:end="107:29">ssi_create_slave</name><argument_list pos:start="107:30" pos:end="107:55">(<argument pos:start="107:31" pos:end="107:41"><expr pos:start="107:31" pos:end="107:41"><name pos:start="107:31" pos:end="107:41"><name pos:start="107:31" pos:end="107:33">mpu</name><operator pos:start="107:34" pos:end="107:35">-&gt;</operator><name pos:start="107:36" pos:end="107:38">ssp</name><index pos:start="107:39" pos:end="107:41">[<expr pos:start="107:40" pos:end="107:40"><literal type="number" pos:start="107:40" pos:end="107:40">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="107:44" pos:end="107:54"><expr pos:start="107:44" pos:end="107:54"><literal type="string" pos:start="107:44" pos:end="107:54">"zipit-lcd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:38"><expr pos:start="109:5" pos:end="109:37"><name pos:start="109:5" pos:end="109:7">bus</name> <operator pos:start="109:9" pos:end="109:9">=</operator> <call pos:start="109:11" pos:end="109:37"><name pos:start="109:11" pos:end="109:24">pxa2xx_i2c_bus</name><argument_list pos:start="109:25" pos:end="109:37">(<argument pos:start="109:26" pos:end="109:36"><expr pos:start="109:26" pos:end="109:36"><name pos:start="109:26" pos:end="109:36"><name pos:start="109:26" pos:end="109:28">mpu</name><operator pos:start="109:29" pos:end="109:30">-&gt;</operator><name pos:start="109:31" pos:end="109:33">i2c</name><index pos:start="109:34" pos:end="109:36">[<expr pos:start="109:35" pos:end="109:35"><literal type="number" pos:start="109:35" pos:end="109:35">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:45"><expr pos:start="111:5" pos:end="111:44"><call pos:start="111:5" pos:end="111:44"><name pos:start="111:5" pos:end="111:20">i2c_create_slave</name><argument_list pos:start="111:21" pos:end="111:44">(<argument pos:start="111:22" pos:end="111:24"><expr pos:start="111:22" pos:end="111:24"><name pos:start="111:22" pos:end="111:24">bus</name></expr></argument>, <argument pos:start="111:27" pos:end="111:37"><expr pos:start="111:27" pos:end="111:37"><name pos:start="111:27" pos:end="111:37">TYPE_AER915</name></expr></argument>, <argument pos:start="111:40" pos:end="111:43"><expr pos:start="111:40" pos:end="111:43"><literal type="number" pos:start="111:40" pos:end="111:43">0x55</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:47"><expr pos:start="113:5" pos:end="113:46"><name pos:start="113:5" pos:end="113:6">wm</name> <operator pos:start="113:8" pos:end="113:8">=</operator> <call pos:start="113:10" pos:end="113:46"><name pos:start="113:10" pos:end="113:25">i2c_create_slave</name><argument_list pos:start="113:26" pos:end="113:46">(<argument pos:start="113:27" pos:end="113:29"><expr pos:start="113:27" pos:end="113:29"><name pos:start="113:27" pos:end="113:29">bus</name></expr></argument>, <argument pos:start="113:32" pos:end="113:39"><expr pos:start="113:32" pos:end="113:39"><literal type="string" pos:start="113:32" pos:end="113:39">"wm8750"</literal></expr></argument>, <argument pos:start="113:42" pos:end="113:45"><expr pos:start="113:42" pos:end="113:45"><literal type="number" pos:start="113:42" pos:end="113:45">0x1b</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:26"><expr pos:start="115:5" pos:end="115:25"><name pos:start="115:5" pos:end="115:20"><name pos:start="115:5" pos:end="115:7">mpu</name><operator pos:start="115:8" pos:end="115:9">-&gt;</operator><name pos:start="115:10" pos:end="115:12">i2s</name><operator pos:start="115:13" pos:end="115:14">-&gt;</operator><name pos:start="115:15" pos:end="115:20">opaque</name></name> <operator pos:start="115:22" pos:end="115:22">=</operator> <name pos:start="115:24" pos:end="115:25">wm</name></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:41"><expr pos:start="117:5" pos:end="117:40"><name pos:start="117:5" pos:end="117:23"><name pos:start="117:5" pos:end="117:7">mpu</name><operator pos:start="117:8" pos:end="117:9">-&gt;</operator><name pos:start="117:10" pos:end="117:12">i2s</name><operator pos:start="117:13" pos:end="117:14">-&gt;</operator><name pos:start="117:15" pos:end="117:23">codec_out</name></name> <operator pos:start="117:25" pos:end="117:25">=</operator> <name pos:start="117:27" pos:end="117:40">wm8750_dac_dat</name></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:40"><expr pos:start="119:5" pos:end="119:39"><name pos:start="119:5" pos:end="119:22"><name pos:start="119:5" pos:end="119:7">mpu</name><operator pos:start="119:8" pos:end="119:9">-&gt;</operator><name pos:start="119:10" pos:end="119:12">i2s</name><operator pos:start="119:13" pos:end="119:14">-&gt;</operator><name pos:start="119:15" pos:end="119:22">codec_in</name></name> <operator pos:start="119:24" pos:end="119:24">=</operator> <name pos:start="119:26" pos:end="119:39">wm8750_adc_dat</name></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:58"><expr pos:start="121:5" pos:end="121:57"><call pos:start="121:5" pos:end="121:57"><name pos:start="121:5" pos:end="121:23">wm8750_data_req_set</name><argument_list pos:start="121:24" pos:end="121:57">(<argument pos:start="121:25" pos:end="121:26"><expr pos:start="121:25" pos:end="121:26"><name pos:start="121:25" pos:end="121:26">wm</name></expr></argument>, <argument pos:start="121:29" pos:end="121:46"><expr pos:start="121:29" pos:end="121:46"><name pos:start="121:29" pos:end="121:46"><name pos:start="121:29" pos:end="121:31">mpu</name><operator pos:start="121:32" pos:end="121:33">-&gt;</operator><name pos:start="121:34" pos:end="121:36">i2s</name><operator pos:start="121:37" pos:end="121:38">-&gt;</operator><name pos:start="121:39" pos:end="121:46">data_req</name></name></expr></argument>, <argument pos:start="121:49" pos:end="121:56"><expr pos:start="121:49" pos:end="121:56"><name pos:start="121:49" pos:end="121:56"><name pos:start="121:49" pos:end="121:51">mpu</name><operator pos:start="121:52" pos:end="121:53">-&gt;</operator><name pos:start="121:54" pos:end="121:56">i2s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="125:5" pos:end="127:67"><expr pos:start="125:5" pos:end="127:66"><call pos:start="125:5" pos:end="127:66"><name pos:start="125:5" pos:end="125:25">qdev_connect_gpio_out</name><argument_list pos:start="125:26" pos:end="127:66">(<argument pos:start="125:27" pos:end="125:35"><expr pos:start="125:27" pos:end="125:35"><name pos:start="125:27" pos:end="125:35"><name pos:start="125:27" pos:end="125:29">mpu</name><operator pos:start="125:30" pos:end="125:31">-&gt;</operator><name pos:start="125:32" pos:end="125:35">gpio</name></name></expr></argument>, <argument pos:start="125:38" pos:end="125:51"><expr pos:start="125:38" pos:end="125:51"><name pos:start="125:38" pos:end="125:51">Z2_GPIO_LCD_CS</name></expr></argument>,

                          <argument pos:start="127:27" pos:end="127:65"><expr pos:start="127:27" pos:end="127:65"><call pos:start="127:27" pos:end="127:65"><name pos:start="127:27" pos:end="127:43">qemu_allocate_irq</name><argument_list pos:start="127:44" pos:end="127:65">(<argument pos:start="127:45" pos:end="127:53"><expr pos:start="127:45" pos:end="127:53"><name pos:start="127:45" pos:end="127:53">z2_lcd_cs</name></expr></argument>, <argument pos:start="127:56" pos:end="127:61"><expr pos:start="127:56" pos:end="127:61"><name pos:start="127:56" pos:end="127:61">z2_lcd</name></expr></argument>, <argument pos:start="127:64" pos:end="127:64"><expr pos:start="127:64" pos:end="127:64"><literal type="number" pos:start="127:64" pos:end="127:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:47"><expr pos:start="131:5" pos:end="131:46"><name pos:start="131:5" pos:end="131:28"><name pos:start="131:5" pos:end="131:12">z2_binfo</name><operator pos:start="131:13" pos:end="131:13">.</operator><name pos:start="131:14" pos:end="131:28">kernel_filename</name></name> <operator pos:start="131:30" pos:end="131:30">=</operator> <name pos:start="131:32" pos:end="131:46">kernel_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:45"><expr pos:start="133:5" pos:end="133:44"><name pos:start="133:5" pos:end="133:27"><name pos:start="133:5" pos:end="133:12">z2_binfo</name><operator pos:start="133:13" pos:end="133:13">.</operator><name pos:start="133:14" pos:end="133:27">kernel_cmdline</name></name> <operator pos:start="133:29" pos:end="133:29">=</operator> <name pos:start="133:31" pos:end="133:44">kernel_cmdline</name></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:47"><expr pos:start="135:5" pos:end="135:46"><name pos:start="135:5" pos:end="135:28"><name pos:start="135:5" pos:end="135:12">z2_binfo</name><operator pos:start="135:13" pos:end="135:13">.</operator><name pos:start="135:14" pos:end="135:28">initrd_filename</name></name> <operator pos:start="135:30" pos:end="135:30">=</operator> <name pos:start="135:32" pos:end="135:46">initrd_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:30"><expr pos:start="137:5" pos:end="137:29"><name pos:start="137:5" pos:end="137:21"><name pos:start="137:5" pos:end="137:12">z2_binfo</name><operator pos:start="137:13" pos:end="137:13">.</operator><name pos:start="137:14" pos:end="137:21">board_id</name></name> <operator pos:start="137:23" pos:end="137:23">=</operator> <literal type="number" pos:start="137:25" pos:end="137:29">0x6dd</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:41"><expr pos:start="139:5" pos:end="139:40"><call pos:start="139:5" pos:end="139:40"><name pos:start="139:5" pos:end="139:19">arm_load_kernel</name><argument_list pos:start="139:20" pos:end="139:40">(<argument pos:start="139:21" pos:end="139:28"><expr pos:start="139:21" pos:end="139:28"><name pos:start="139:21" pos:end="139:28"><name pos:start="139:21" pos:end="139:23">mpu</name><operator pos:start="139:24" pos:end="139:25">-&gt;</operator><name pos:start="139:26" pos:end="139:28">cpu</name></name></expr></argument>, <argument pos:start="139:31" pos:end="139:39"><expr pos:start="139:31" pos:end="139:39"><operator pos:start="139:31" pos:end="139:31">&amp;</operator><name pos:start="139:32" pos:end="139:39">z2_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
