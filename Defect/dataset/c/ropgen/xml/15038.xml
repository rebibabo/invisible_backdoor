<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15038.c" pos:tabs="8"><function pos:start="1:1" pos:end="287:1"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">target_ulong</name></type> <name pos:start="1:21" pos:end="1:49">h_client_architecture_support</name><parameter_list pos:start="1:50" pos:end="7:69">(<parameter pos:start="1:51" pos:end="1:65"><decl pos:start="1:51" pos:end="1:65"><type pos:start="1:51" pos:end="1:65"><name pos:start="1:51" pos:end="1:60">PowerPCCPU</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:65">cpu</name></decl></parameter>,

                                                  <parameter pos:start="3:51" pos:end="3:74"><decl pos:start="3:51" pos:end="3:74"><type pos:start="3:51" pos:end="3:74"><name pos:start="3:51" pos:end="3:67">sPAPRMachineState</name> <modifier pos:start="3:69" pos:end="3:69">*</modifier></type><name pos:start="3:70" pos:end="3:74">spapr</name></decl></parameter>,

                                                  <parameter pos:start="5:51" pos:end="5:69"><decl pos:start="5:51" pos:end="5:69"><type pos:start="5:51" pos:end="5:69"><name pos:start="5:51" pos:end="5:62">target_ulong</name></type> <name pos:start="5:64" pos:end="5:69">opcode</name></decl></parameter>,

                                                  <parameter pos:start="7:51" pos:end="7:68"><decl pos:start="7:51" pos:end="7:68"><type pos:start="7:51" pos:end="7:68"><name pos:start="7:51" pos:end="7:62">target_ulong</name> <modifier pos:start="7:64" pos:end="7:64">*</modifier></type><name pos:start="7:65" pos:end="7:68">args</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="287:1">{<block_content pos:start="13:5" pos:end="285:21">

    <comment type="block" pos:start="11:5" pos:end="11:40">/* Working address in data buffer */</comment>

    <decl_stmt pos:start="13:5" pos:end="13:52"><decl pos:start="13:5" pos:end="13:51"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">target_ulong</name></type> <name pos:start="13:18" pos:end="13:21">addr</name> <init pos:start="13:23" pos:end="13:51">= <expr pos:start="13:25" pos:end="13:51"><call pos:start="13:25" pos:end="13:51"><name pos:start="13:25" pos:end="13:42">ppc64_phys_to_real</name><argument_list pos:start="13:43" pos:end="13:51">(<argument pos:start="13:44" pos:end="13:50"><expr pos:start="13:44" pos:end="13:50"><name pos:start="13:44" pos:end="13:50"><name pos:start="13:44" pos:end="13:47">args</name><index pos:start="13:48" pos:end="13:50">[<expr pos:start="13:49" pos:end="13:49"><literal type="number" pos:start="13:49" pos:end="13:49">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16">target_ulong</name></type> <name pos:start="15:18" pos:end="15:25">ov_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:20">cas_pvr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:73"><decl pos:start="19:5" pos:end="19:32"><type pos:start="19:5" pos:end="19:23"><name pos:start="19:5" pos:end="19:21">sPAPROptionVector</name> <modifier pos:start="19:23" pos:end="19:23">*</modifier></type><name pos:start="19:24" pos:end="19:32">ov1_guest</name></decl>, <decl pos:start="19:35" pos:end="19:44"><type ref="prev" pos:start="19:5" pos:end="19:23"><modifier pos:start="19:35" pos:end="19:35">*</modifier></type><name pos:start="19:36" pos:end="19:44">ov5_guest</name></decl>, <decl pos:start="19:47" pos:end="19:58"><type ref="prev" pos:start="19:5" pos:end="19:23"><modifier pos:start="19:47" pos:end="19:47">*</modifier></type><name pos:start="19:48" pos:end="19:58">ov5_cas_old</name></decl>, <decl pos:start="19:61" pos:end="19:72"><type ref="prev" pos:start="19:5" pos:end="19:23"><modifier pos:start="19:61" pos:end="19:61">*</modifier></type><name pos:start="19:62" pos:end="19:72">ov5_updates</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">bool</name></type> <name pos:start="21:10" pos:end="21:20">guest_radix</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:9">Error</name> <modifier pos:start="23:11" pos:end="23:11">*</modifier></type><name pos:start="23:12" pos:end="23:20">local_err</name> <init pos:start="23:22" pos:end="23:27">= <expr pos:start="23:24" pos:end="23:27"><name pos:start="23:24" pos:end="23:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:36"><decl pos:start="25:5" pos:end="25:35"><type pos:start="25:5" pos:end="25:8"><name pos:start="25:5" pos:end="25:8">bool</name></type> <name pos:start="25:10" pos:end="25:27">raw_mode_supported</name> <init pos:start="25:29" pos:end="25:35">= <expr pos:start="25:31" pos:end="25:35"><name pos:start="25:31" pos:end="25:35">false</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:80"><expr pos:start="29:5" pos:end="29:79"><name pos:start="29:5" pos:end="29:11">cas_pvr</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="29:79"><name pos:start="29:15" pos:end="29:27">cas_check_pvr</name><argument_list pos:start="29:28" pos:end="29:79">(<argument pos:start="29:29" pos:end="29:33"><expr pos:start="29:29" pos:end="29:33"><name pos:start="29:29" pos:end="29:33">spapr</name></expr></argument>, <argument pos:start="29:36" pos:end="29:38"><expr pos:start="29:36" pos:end="29:38"><name pos:start="29:36" pos:end="29:38">cpu</name></expr></argument>, <argument pos:start="29:41" pos:end="29:45"><expr pos:start="29:41" pos:end="29:45"><operator pos:start="29:41" pos:end="29:41">&amp;</operator><name pos:start="29:42" pos:end="29:45">addr</name></expr></argument>, <argument pos:start="29:48" pos:end="29:66"><expr pos:start="29:48" pos:end="29:66"><operator pos:start="29:48" pos:end="29:48">&amp;</operator><name pos:start="29:49" pos:end="29:66">raw_mode_supported</name></expr></argument>, <argument pos:start="29:69" pos:end="29:78"><expr pos:start="29:69" pos:end="29:78"><operator pos:start="29:69" pos:end="29:69">&amp;</operator><name pos:start="29:70" pos:end="29:78">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:18">(<expr pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:17">local_err</name></expr>)</condition> <block pos:start="31:20" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:26">

        <expr_stmt pos:start="33:9" pos:end="33:36"><expr pos:start="33:9" pos:end="33:35"><call pos:start="33:9" pos:end="33:35"><name pos:start="33:9" pos:end="33:24">error_report_err</name><argument_list pos:start="33:25" pos:end="33:35">(<argument pos:start="33:26" pos:end="33:34"><expr pos:start="33:26" pos:end="33:34"><name pos:start="33:26" pos:end="33:34">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:26">return <expr pos:start="35:16" pos:end="35:25"><name pos:start="35:16" pos:end="35:25">H_HARDWARE</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:21">/* Update CPUs */</comment>

    <if_stmt pos:start="43:5" pos:end="67:5"><if pos:start="43:5" pos:end="67:5">if <condition pos:start="43:8" pos:end="43:35">(<expr pos:start="43:9" pos:end="43:34"><name pos:start="43:9" pos:end="43:23"><name pos:start="43:9" pos:end="43:11">cpu</name><operator pos:start="43:12" pos:end="43:13">-&gt;</operator><name pos:start="43:14" pos:end="43:23">compat_pvr</name></name> <operator pos:start="43:25" pos:end="43:26">!=</operator> <name pos:start="43:28" pos:end="43:34">cas_pvr</name></expr>)</condition> <block pos:start="43:37" pos:end="67:5">{<block_content pos:start="45:9" pos:end="65:9">

        <expr_stmt pos:start="45:9" pos:end="45:48"><expr pos:start="45:9" pos:end="45:47"><call pos:start="45:9" pos:end="45:47"><name pos:start="45:9" pos:end="45:26">ppc_set_compat_all</name><argument_list pos:start="45:27" pos:end="45:47">(<argument pos:start="45:28" pos:end="45:34"><expr pos:start="45:28" pos:end="45:34"><name pos:start="45:28" pos:end="45:34">cas_pvr</name></expr></argument>, <argument pos:start="45:37" pos:end="45:46"><expr pos:start="45:37" pos:end="45:46"><operator pos:start="45:37" pos:end="45:37">&amp;</operator><name pos:start="45:38" pos:end="45:46">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="65:9"><if pos:start="47:9" pos:end="65:9">if <condition pos:start="47:12" pos:end="47:22">(<expr pos:start="47:13" pos:end="47:21"><name pos:start="47:13" pos:end="47:21">local_err</name></expr>)</condition> <block pos:start="47:24" pos:end="65:9">{<block_content pos:start="55:13" pos:end="63:29">

            <comment type="block" pos:start="49:13" pos:end="53:15">/* We fail to set compat mode (likely because running with KVM PR),

             * but maybe we can fallback to raw mode if the guest supports it.

             */</comment>

            <if_stmt pos:start="55:13" pos:end="61:13"><if pos:start="55:13" pos:end="61:13">if <condition pos:start="55:16" pos:end="55:36">(<expr pos:start="55:17" pos:end="55:35"><operator pos:start="55:17" pos:end="55:17">!</operator><name pos:start="55:18" pos:end="55:35">raw_mode_supported</name></expr>)</condition> <block pos:start="55:38" pos:end="61:13">{<block_content pos:start="57:17" pos:end="59:34">

                <expr_stmt pos:start="57:17" pos:end="57:44"><expr pos:start="57:17" pos:end="57:43"><call pos:start="57:17" pos:end="57:43"><name pos:start="57:17" pos:end="57:32">error_report_err</name><argument_list pos:start="57:33" pos:end="57:43">(<argument pos:start="57:34" pos:end="57:42"><expr pos:start="57:34" pos:end="57:42"><name pos:start="57:34" pos:end="57:42">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="59:17" pos:end="59:34">return <expr pos:start="59:24" pos:end="59:33"><name pos:start="59:24" pos:end="59:33">H_HARDWARE</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:29"><expr pos:start="63:13" pos:end="63:28"><name pos:start="63:13" pos:end="63:21">local_err</name> <operator pos:start="63:23" pos:end="63:23">=</operator> <name pos:start="63:25" pos:end="63:28">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:78">/* For the future use: here @ov_table points to the first option vector */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:20"><expr pos:start="73:5" pos:end="73:19"><name pos:start="73:5" pos:end="73:12">ov_table</name> <operator pos:start="73:14" pos:end="73:14">=</operator> <name pos:start="73:16" pos:end="73:19">addr</name></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:53"><expr pos:start="77:5" pos:end="77:52"><name pos:start="77:5" pos:end="77:13">ov1_guest</name> <operator pos:start="77:15" pos:end="77:15">=</operator> <call pos:start="77:17" pos:end="77:52"><name pos:start="77:17" pos:end="77:39">spapr_ovec_parse_vector</name><argument_list pos:start="77:40" pos:end="77:52">(<argument pos:start="77:41" pos:end="77:48"><expr pos:start="77:41" pos:end="77:48"><name pos:start="77:41" pos:end="77:48">ov_table</name></expr></argument>, <argument pos:start="77:51" pos:end="77:51"><expr pos:start="77:51" pos:end="77:51"><literal type="number" pos:start="77:51" pos:end="77:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:53"><expr pos:start="79:5" pos:end="79:52"><name pos:start="79:5" pos:end="79:13">ov5_guest</name> <operator pos:start="79:15" pos:end="79:15">=</operator> <call pos:start="79:17" pos:end="79:52"><name pos:start="79:17" pos:end="79:39">spapr_ovec_parse_vector</name><argument_list pos:start="79:40" pos:end="79:52">(<argument pos:start="79:41" pos:end="79:48"><expr pos:start="79:41" pos:end="79:48"><name pos:start="79:41" pos:end="79:48">ov_table</name></expr></argument>, <argument pos:start="79:51" pos:end="79:51"><expr pos:start="79:51" pos:end="79:51"><literal type="number" pos:start="79:51" pos:end="79:51">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:49">(<expr pos:start="81:9" pos:end="81:48"><call pos:start="81:9" pos:end="81:48"><name pos:start="81:9" pos:end="81:23">spapr_ovec_test</name><argument_list pos:start="81:24" pos:end="81:48">(<argument pos:start="81:25" pos:end="81:33"><expr pos:start="81:25" pos:end="81:33"><name pos:start="81:25" pos:end="81:33">ov5_guest</name></expr></argument>, <argument pos:start="81:36" pos:end="81:47"><expr pos:start="81:36" pos:end="81:47"><name pos:start="81:36" pos:end="81:47">OV5_MMU_BOTH</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:51" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:27">

        <expr_stmt pos:start="83:9" pos:end="83:78"><expr pos:start="83:9" pos:end="83:77"><call pos:start="83:9" pos:end="83:77"><name pos:start="83:9" pos:end="83:20">error_report</name><argument_list pos:start="83:21" pos:end="83:77">(<argument pos:start="83:22" pos:end="83:76"><expr pos:start="83:22" pos:end="83:76"><literal type="string" pos:start="83:22" pos:end="83:76">"guest requested hash and radix MMU, which is invalid."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:27"><expr pos:start="85:9" pos:end="85:26"><call pos:start="85:9" pos:end="85:26"><name pos:start="85:9" pos:end="85:12">exit</name><argument_list pos:start="85:13" pos:end="85:26">(<argument pos:start="85:14" pos:end="85:25"><expr pos:start="85:14" pos:end="85:25"><name pos:start="85:14" pos:end="85:25">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="89:5" pos:end="89:66">/* The radix/hash bit in byte 24 requires special handling: */</comment>

    <expr_stmt pos:start="91:5" pos:end="91:64"><expr pos:start="91:5" pos:end="91:63"><name pos:start="91:5" pos:end="91:15">guest_radix</name> <operator pos:start="91:17" pos:end="91:17">=</operator> <call pos:start="91:19" pos:end="91:63"><name pos:start="91:19" pos:end="91:33">spapr_ovec_test</name><argument_list pos:start="91:34" pos:end="91:63">(<argument pos:start="91:35" pos:end="91:43"><expr pos:start="91:35" pos:end="91:43"><name pos:start="91:35" pos:end="91:43">ov5_guest</name></expr></argument>, <argument pos:start="91:46" pos:end="91:62"><expr pos:start="91:46" pos:end="91:62"><name pos:start="91:46" pos:end="91:62">OV5_MMU_RADIX_300</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:51"><expr pos:start="93:5" pos:end="93:50"><call pos:start="93:5" pos:end="93:50"><name pos:start="93:5" pos:end="93:20">spapr_ovec_clear</name><argument_list pos:start="93:21" pos:end="93:50">(<argument pos:start="93:22" pos:end="93:30"><expr pos:start="93:22" pos:end="93:30"><name pos:start="93:22" pos:end="93:30">ov5_guest</name></expr></argument>, <argument pos:start="93:33" pos:end="93:49"><expr pos:start="93:33" pos:end="93:49"><name pos:start="93:33" pos:end="93:49">OV5_MMU_RADIX_300</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="97:5" pos:end="117:7">/*

     * HPT resizing is a bit of a special case, because when enabled

     * we assume an HPT guest will support it until it says it

     * doesn't, instead of assuming it won't support it until it says

     * it does.  Strictly speaking that approach could break for

     * guests which don't make a CAS call, but those are so old we

     * don't care about them.  Without that assumption we'd have to

     * make at least a temporary allocation of an HPT sized for max

     * memory, which could be impossibly difficult under KVM HV if

     * maxram is large.

     */</comment>

    <if_stmt pos:start="119:5" pos:end="163:5"><if pos:start="119:5" pos:end="163:5">if <condition pos:start="119:8" pos:end="119:68">(<expr pos:start="119:9" pos:end="119:67"><operator pos:start="119:9" pos:end="119:9">!</operator><name pos:start="119:10" pos:end="119:20">guest_radix</name> <operator pos:start="119:22" pos:end="119:23">&amp;&amp;</operator> <operator pos:start="119:25" pos:end="119:25">!</operator><call pos:start="119:26" pos:end="119:67"><name pos:start="119:26" pos:end="119:40">spapr_ovec_test</name><argument_list pos:start="119:41" pos:end="119:67">(<argument pos:start="119:42" pos:end="119:50"><expr pos:start="119:42" pos:end="119:50"><name pos:start="119:42" pos:end="119:50">ov5_guest</name></expr></argument>, <argument pos:start="119:53" pos:end="119:66"><expr pos:start="119:53" pos:end="119:66"><name pos:start="119:53" pos:end="119:66">OV5_HPT_RESIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="119:70" pos:end="163:5">{<block_content pos:start="121:9" pos:end="161:9">

        <decl_stmt pos:start="121:9" pos:end="121:80"><decl pos:start="121:9" pos:end="121:79"><type pos:start="121:9" pos:end="121:11"><name pos:start="121:9" pos:end="121:11">int</name></type> <name pos:start="121:13" pos:end="121:20">maxshift</name> <init pos:start="121:22" pos:end="121:79">= <expr pos:start="121:24" pos:end="121:79"><call pos:start="121:24" pos:end="121:79"><name pos:start="121:24" pos:end="121:50">spapr_hpt_shift_for_ramsize</name><argument_list pos:start="121:51" pos:end="121:79">(<argument pos:start="121:52" pos:end="121:78"><expr pos:start="121:52" pos:end="121:78"><call pos:start="121:52" pos:end="121:65"><name pos:start="121:52" pos:end="121:58">MACHINE</name><argument_list pos:start="121:59" pos:end="121:65">(<argument pos:start="121:60" pos:end="121:64"><expr pos:start="121:60" pos:end="121:64"><name pos:start="121:60" pos:end="121:64">spapr</name></expr></argument>)</argument_list></call><operator pos:start="121:66" pos:end="121:67">-&gt;</operator><name pos:start="121:68" pos:end="121:78">maxram_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="125:9" pos:end="133:9"><if pos:start="125:9" pos:end="133:9">if <condition pos:start="125:12" pos:end="125:59">(<expr pos:start="125:13" pos:end="125:58"><name pos:start="125:13" pos:end="125:29"><name pos:start="125:13" pos:end="125:17">spapr</name><operator pos:start="125:18" pos:end="125:19">-&gt;</operator><name pos:start="125:20" pos:end="125:29">resize_hpt</name></name> <operator pos:start="125:31" pos:end="125:32">==</operator> <name pos:start="125:34" pos:end="125:58">SPAPR_RESIZE_HPT_REQUIRED</name></expr>)</condition> <block pos:start="125:61" pos:end="133:9">{<block_content pos:start="127:13" pos:end="131:20">

            <expr_stmt pos:start="127:13" pos:end="129:110"><expr pos:start="127:13" pos:end="129:109"><call pos:start="127:13" pos:end="129:109"><name pos:start="127:13" pos:end="127:24">error_report</name><argument_list pos:start="127:25" pos:end="129:109">(

                <argument pos:start="129:17" pos:end="129:108"><expr pos:start="129:17" pos:end="129:108"><literal type="string" pos:start="129:17" pos:end="129:108">"h_client_architecture_support: Guest doesn't support HPT resizing, but resize-hpt=required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:20"><expr pos:start="131:13" pos:end="131:19"><call pos:start="131:13" pos:end="131:19"><name pos:start="131:13" pos:end="131:16">exit</name><argument_list pos:start="131:17" pos:end="131:19">(<argument pos:start="131:18" pos:end="131:18"><expr pos:start="131:18" pos:end="131:18"><literal type="number" pos:start="131:18" pos:end="131:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="137:9" pos:end="161:9"><if pos:start="137:9" pos:end="161:9">if <condition pos:start="137:12" pos:end="137:41">(<expr pos:start="137:13" pos:end="137:40"><name pos:start="137:13" pos:end="137:29"><name pos:start="137:13" pos:end="137:17">spapr</name><operator pos:start="137:18" pos:end="137:19">-&gt;</operator><name pos:start="137:20" pos:end="137:29">htab_shift</name></name> <operator pos:start="137:31" pos:end="137:31">&lt;</operator> <name pos:start="137:33" pos:end="137:40">maxshift</name></expr>)</condition> <block pos:start="137:43" pos:end="161:9">{<block_content pos:start="147:13" pos:end="159:13">

            <comment type="block" pos:start="139:13" pos:end="145:47">/* Guest doesn't know about HPT resizing, so we

             * pre-emptively resize for the maximum permitted RAM.  At

             * the point this is called, nothing should have been

             * entered into the existing HPT */</comment>

            <expr_stmt pos:start="147:13" pos:end="147:64"><expr pos:start="147:13" pos:end="147:63"><call pos:start="147:13" pos:end="147:63"><name pos:start="147:13" pos:end="147:32">spapr_reallocate_hpt</name><argument_list pos:start="147:33" pos:end="147:63">(<argument pos:start="147:34" pos:end="147:38"><expr pos:start="147:34" pos:end="147:38"><name pos:start="147:34" pos:end="147:38">spapr</name></expr></argument>, <argument pos:start="147:41" pos:end="147:48"><expr pos:start="147:41" pos:end="147:48"><name pos:start="147:41" pos:end="147:48">maxshift</name></expr></argument>, <argument pos:start="147:51" pos:end="147:62"><expr pos:start="147:51" pos:end="147:62"><operator pos:start="147:51" pos:end="147:51">&amp;</operator><name pos:start="147:52" pos:end="147:62">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="149:13" pos:end="159:13"><if pos:start="149:13" pos:end="159:13">if <condition pos:start="149:16" pos:end="149:30">(<expr pos:start="149:17" pos:end="149:29"><call pos:start="149:17" pos:end="149:29"><name pos:start="149:17" pos:end="149:27">kvm_enabled</name><argument_list pos:start="149:28" pos:end="149:29">()</argument_list></call></expr>)</condition> <block pos:start="149:32" pos:end="159:13">{<block_content pos:start="153:17" pos:end="157:41">

                <comment type="block" pos:start="151:17" pos:end="151:56">/* For KVM PR, update the HPT pointer */</comment>

                <decl_stmt pos:start="153:17" pos:end="155:47"><decl pos:start="153:17" pos:end="155:46"><type pos:start="153:17" pos:end="153:28"><name pos:start="153:17" pos:end="153:28">target_ulong</name></type> <name pos:start="153:30" pos:end="153:33">sdr1</name> <init pos:start="153:35" pos:end="155:46">= <expr pos:start="153:37" pos:end="155:46"><operator pos:start="153:37" pos:end="153:37">(</operator><name pos:start="153:38" pos:end="153:49">target_ulong</name><operator pos:start="153:50" pos:end="153:50">)</operator><operator pos:start="153:51" pos:end="153:51">(</operator><name pos:start="153:52" pos:end="153:60">uintptr_t</name><operator pos:start="153:61" pos:end="153:61">)</operator><name pos:start="153:62" pos:end="153:72"><name pos:start="153:62" pos:end="153:66">spapr</name><operator pos:start="153:67" pos:end="153:68">-&gt;</operator><name pos:start="153:69" pos:end="153:72">htab</name></name>

                    <operator pos:start="155:21" pos:end="155:21">|</operator> <operator pos:start="155:23" pos:end="155:23">(</operator><name pos:start="155:24" pos:end="155:40"><name pos:start="155:24" pos:end="155:28">spapr</name><operator pos:start="155:29" pos:end="155:30">-&gt;</operator><name pos:start="155:31" pos:end="155:40">htab_shift</name></name> <operator pos:start="155:42" pos:end="155:42">-</operator> <literal type="number" pos:start="155:44" pos:end="155:45">18</literal><operator pos:start="155:46" pos:end="155:46">)</operator></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="157:17" pos:end="157:41"><expr pos:start="157:17" pos:end="157:40"><call pos:start="157:17" pos:end="157:40"><name pos:start="157:17" pos:end="157:34">kvmppc_update_sdr1</name><argument_list pos:start="157:35" pos:end="157:40">(<argument pos:start="157:36" pos:end="157:39"><expr pos:start="157:36" pos:end="157:39"><name pos:start="157:36" pos:end="157:39">sdr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="167:5" pos:end="179:7">/* NOTE: there are actually a number of ov5 bits where input from the

     * guest is always zero, and the platform/QEMU enables them independently

     * of guest input. To model these properly we'd want some sort of mask,

     * but since they only currently apply to memory migration as defined

     * by LoPAPR 1.1, 14.5.4.8, which QEMU doesn't implement, we don't need

     * to worry about this for now.

     */</comment>

    <expr_stmt pos:start="181:5" pos:end="181:51"><expr pos:start="181:5" pos:end="181:50"><name pos:start="181:5" pos:end="181:15">ov5_cas_old</name> <operator pos:start="181:17" pos:end="181:17">=</operator> <call pos:start="181:19" pos:end="181:50"><name pos:start="181:19" pos:end="181:34">spapr_ovec_clone</name><argument_list pos:start="181:35" pos:end="181:50">(<argument pos:start="181:36" pos:end="181:49"><expr pos:start="181:36" pos:end="181:49"><name pos:start="181:36" pos:end="181:49"><name pos:start="181:36" pos:end="181:40">spapr</name><operator pos:start="181:41" pos:end="181:42">-&gt;</operator><name pos:start="181:43" pos:end="181:49">ov5_cas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="185:5" pos:end="191:7">/* also clear the radix/hash bit from the current ov5_cas bits to

     * be in sync with the newly ov5 bits. Else the radix bit will be

     * seen as being removed and this will generate a reset loop

     */</comment>

    <expr_stmt pos:start="193:5" pos:end="193:53"><expr pos:start="193:5" pos:end="193:52"><call pos:start="193:5" pos:end="193:52"><name pos:start="193:5" pos:end="193:20">spapr_ovec_clear</name><argument_list pos:start="193:21" pos:end="193:52">(<argument pos:start="193:22" pos:end="193:32"><expr pos:start="193:22" pos:end="193:32"><name pos:start="193:22" pos:end="193:32">ov5_cas_old</name></expr></argument>, <argument pos:start="193:35" pos:end="193:51"><expr pos:start="193:35" pos:end="193:51"><name pos:start="193:35" pos:end="193:51">OV5_MMU_RADIX_300</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="197:5" pos:end="197:51">/* full range of negotiated ov5 capabilities */</comment>

    <expr_stmt pos:start="199:5" pos:end="199:64"><expr pos:start="199:5" pos:end="199:63"><call pos:start="199:5" pos:end="199:63"><name pos:start="199:5" pos:end="199:24">spapr_ovec_intersect</name><argument_list pos:start="199:25" pos:end="199:63">(<argument pos:start="199:26" pos:end="199:39"><expr pos:start="199:26" pos:end="199:39"><name pos:start="199:26" pos:end="199:39"><name pos:start="199:26" pos:end="199:30">spapr</name><operator pos:start="199:31" pos:end="199:32">-&gt;</operator><name pos:start="199:33" pos:end="199:39">ov5_cas</name></name></expr></argument>, <argument pos:start="199:42" pos:end="199:51"><expr pos:start="199:42" pos:end="199:51"><name pos:start="199:42" pos:end="199:51"><name pos:start="199:42" pos:end="199:46">spapr</name><operator pos:start="199:47" pos:end="199:48">-&gt;</operator><name pos:start="199:49" pos:end="199:51">ov5</name></name></expr></argument>, <argument pos:start="199:54" pos:end="199:62"><expr pos:start="199:54" pos:end="199:62"><name pos:start="199:54" pos:end="199:62">ov5_guest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:34"><expr pos:start="201:5" pos:end="201:33"><call pos:start="201:5" pos:end="201:33"><name pos:start="201:5" pos:end="201:22">spapr_ovec_cleanup</name><argument_list pos:start="201:23" pos:end="201:33">(<argument pos:start="201:24" pos:end="201:32"><expr pos:start="201:24" pos:end="201:32"><name pos:start="201:24" pos:end="201:32">ov5_guest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="203:5" pos:end="207:7">/* capabilities that have been added since CAS-generated guest reset.

     * if capabilities have since been removed, generate another reset

     */</comment>

    <expr_stmt pos:start="209:5" pos:end="209:35"><expr pos:start="209:5" pos:end="209:34"><name pos:start="209:5" pos:end="209:15">ov5_updates</name> <operator pos:start="209:17" pos:end="209:17">=</operator> <call pos:start="209:19" pos:end="209:34"><name pos:start="209:19" pos:end="209:32">spapr_ovec_new</name><argument_list pos:start="209:33" pos:end="209:34">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="213:69"><expr pos:start="211:5" pos:end="213:68"><name pos:start="211:5" pos:end="211:21"><name pos:start="211:5" pos:end="211:9">spapr</name><operator pos:start="211:10" pos:end="211:11">-&gt;</operator><name pos:start="211:12" pos:end="211:21">cas_reboot</name></name> <operator pos:start="211:23" pos:end="211:23">=</operator> <call pos:start="211:25" pos:end="213:68"><name pos:start="211:25" pos:end="211:39">spapr_ovec_diff</name><argument_list pos:start="211:40" pos:end="213:68">(<argument pos:start="211:41" pos:end="211:51"><expr pos:start="211:41" pos:end="211:51"><name pos:start="211:41" pos:end="211:51">ov5_updates</name></expr></argument>,

                                        <argument pos:start="213:41" pos:end="213:51"><expr pos:start="213:41" pos:end="213:51"><name pos:start="213:41" pos:end="213:51">ov5_cas_old</name></expr></argument>, <argument pos:start="213:54" pos:end="213:67"><expr pos:start="213:54" pos:end="213:67"><name pos:start="213:54" pos:end="213:67"><name pos:start="213:54" pos:end="213:58">spapr</name><operator pos:start="213:59" pos:end="213:60">-&gt;</operator><name pos:start="213:61" pos:end="213:67">ov5_cas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="215:5" pos:end="217:75">/* Now that processing is finished, set the radix/hash bit for the

     * guest if it requested a valid mode; otherwise terminate the boot. */</comment>

    <if_stmt pos:start="219:5" pos:end="243:5"><if pos:start="219:5" pos:end="231:5">if <condition pos:start="219:8" pos:end="219:20">(<expr pos:start="219:9" pos:end="219:19"><name pos:start="219:9" pos:end="219:19">guest_radix</name></expr>)</condition> <block pos:start="219:22" pos:end="231:5">{<block_content pos:start="221:9" pos:end="229:58">

        <if_stmt pos:start="221:9" pos:end="227:9"><if pos:start="221:9" pos:end="227:9">if <condition pos:start="221:12" pos:end="221:57">(<expr pos:start="221:13" pos:end="221:56"><call pos:start="221:13" pos:end="221:25"><name pos:start="221:13" pos:end="221:23">kvm_enabled</name><argument_list pos:start="221:24" pos:end="221:25">()</argument_list></call> <operator pos:start="221:27" pos:end="221:28">&amp;&amp;</operator> <operator pos:start="221:30" pos:end="221:30">!</operator><call pos:start="221:31" pos:end="221:56"><name pos:start="221:31" pos:end="221:54">kvmppc_has_cap_mmu_radix</name><argument_list pos:start="221:55" pos:end="221:56">()</argument_list></call></expr>)</condition> <block pos:start="221:59" pos:end="227:9">{<block_content pos:start="223:13" pos:end="225:31">

            <expr_stmt pos:start="223:13" pos:end="223:74"><expr pos:start="223:13" pos:end="223:73"><call pos:start="223:13" pos:end="223:73"><name pos:start="223:13" pos:end="223:24">error_report</name><argument_list pos:start="223:25" pos:end="223:73">(<argument pos:start="223:26" pos:end="223:72"><expr pos:start="223:26" pos:end="223:72"><literal type="string" pos:start="223:26" pos:end="223:72">"Guest requested unavailable MMU mode (radix)."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="225:13" pos:end="225:31"><expr pos:start="225:13" pos:end="225:30"><call pos:start="225:13" pos:end="225:30"><name pos:start="225:13" pos:end="225:16">exit</name><argument_list pos:start="225:17" pos:end="225:30">(<argument pos:start="225:18" pos:end="225:29"><expr pos:start="225:18" pos:end="225:29"><name pos:start="225:18" pos:end="225:29">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:58"><expr pos:start="229:9" pos:end="229:57"><call pos:start="229:9" pos:end="229:57"><name pos:start="229:9" pos:end="229:22">spapr_ovec_set</name><argument_list pos:start="229:23" pos:end="229:57">(<argument pos:start="229:24" pos:end="229:37"><expr pos:start="229:24" pos:end="229:37"><name pos:start="229:24" pos:end="229:37"><name pos:start="229:24" pos:end="229:28">spapr</name><operator pos:start="229:29" pos:end="229:30">-&gt;</operator><name pos:start="229:31" pos:end="229:37">ov5_cas</name></name></expr></argument>, <argument pos:start="229:40" pos:end="229:56"><expr pos:start="229:40" pos:end="229:56"><name pos:start="229:40" pos:end="229:56">OV5_MMU_RADIX_300</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="231:7" pos:end="243:5">else <block pos:start="231:12" pos:end="243:5">{<block_content pos:start="233:9" pos:end="241:9">

        <if_stmt pos:start="233:9" pos:end="241:9"><if pos:start="233:9" pos:end="241:9">if <condition pos:start="233:12" pos:end="235:45">(<expr pos:start="233:13" pos:end="235:44"><call pos:start="233:13" pos:end="233:25"><name pos:start="233:13" pos:end="233:23">kvm_enabled</name><argument_list pos:start="233:24" pos:end="233:25">()</argument_list></call> <operator pos:start="233:27" pos:end="233:28">&amp;&amp;</operator> <call pos:start="233:30" pos:end="233:55"><name pos:start="233:30" pos:end="233:53">kvmppc_has_cap_mmu_radix</name><argument_list pos:start="233:54" pos:end="233:55">()</argument_list></call>

            <operator pos:start="235:13" pos:end="235:14">&amp;&amp;</operator> <operator pos:start="235:16" pos:end="235:16">!</operator><call pos:start="235:17" pos:end="235:44"><name pos:start="235:17" pos:end="235:42">kvmppc_has_cap_mmu_hash_v3</name><argument_list pos:start="235:43" pos:end="235:44">()</argument_list></call></expr>)</condition> <block pos:start="235:47" pos:end="241:9">{<block_content pos:start="237:13" pos:end="239:31">

            <expr_stmt pos:start="237:13" pos:end="237:73"><expr pos:start="237:13" pos:end="237:72"><call pos:start="237:13" pos:end="237:72"><name pos:start="237:13" pos:end="237:24">error_report</name><argument_list pos:start="237:25" pos:end="237:72">(<argument pos:start="237:26" pos:end="237:71"><expr pos:start="237:26" pos:end="237:71"><literal type="string" pos:start="237:26" pos:end="237:71">"Guest requested unavailable MMU mode (hash)."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:31"><expr pos:start="239:13" pos:end="239:30"><call pos:start="239:13" pos:end="239:30"><name pos:start="239:13" pos:end="239:16">exit</name><argument_list pos:start="239:17" pos:end="239:30">(<argument pos:start="239:18" pos:end="239:29"><expr pos:start="239:18" pos:end="239:29"><name pos:start="239:18" pos:end="239:29">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="245:5" pos:end="247:72"><expr pos:start="245:5" pos:end="247:71"><name pos:start="245:5" pos:end="245:38"><name pos:start="245:5" pos:end="245:9">spapr</name><operator pos:start="245:10" pos:end="245:11">-&gt;</operator><name pos:start="245:12" pos:end="245:38">cas_legacy_guest_workaround</name></name> <operator pos:start="245:40" pos:end="245:40">=</operator> <operator pos:start="245:42" pos:end="245:42">!</operator><call pos:start="245:43" pos:end="247:71"><name pos:start="245:43" pos:end="245:57">spapr_ovec_test</name><argument_list pos:start="245:58" pos:end="247:71">(<argument pos:start="245:59" pos:end="245:67"><expr pos:start="245:59" pos:end="245:67"><name pos:start="245:59" pos:end="245:67">ov1_guest</name></expr></argument>,

                                                          <argument pos:start="247:59" pos:end="247:70"><expr pos:start="247:59" pos:end="247:70"><name pos:start="247:59" pos:end="247:70">OV1_PPC_3_00</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="249:5" pos:end="257:5"><if pos:start="249:5" pos:end="257:5">if <condition pos:start="249:8" pos:end="249:27">(<expr pos:start="249:9" pos:end="249:26"><operator pos:start="249:9" pos:end="249:9">!</operator><name pos:start="249:10" pos:end="249:26"><name pos:start="249:10" pos:end="249:14">spapr</name><operator pos:start="249:15" pos:end="249:16">-&gt;</operator><name pos:start="249:17" pos:end="249:26">cas_reboot</name></name></expr>)</condition> <block pos:start="249:29" pos:end="257:5">{<block_content pos:start="251:9" pos:end="255:61">

        <expr_stmt pos:start="251:9" pos:end="255:61"><expr pos:start="251:9" pos:end="255:60"><name pos:start="251:9" pos:end="251:25"><name pos:start="251:9" pos:end="251:13">spapr</name><operator pos:start="251:14" pos:end="251:15">-&gt;</operator><name pos:start="251:16" pos:end="251:25">cas_reboot</name></name> <operator pos:start="251:27" pos:end="251:27">=</operator>

            <operator pos:start="253:13" pos:end="253:13">(</operator><call pos:start="253:14" pos:end="255:54"><name pos:start="253:14" pos:end="253:41">spapr_h_cas_compose_response</name><argument_list pos:start="253:42" pos:end="255:54">(<argument pos:start="253:43" pos:end="253:47"><expr pos:start="253:43" pos:end="253:47"><name pos:start="253:43" pos:end="253:47">spapr</name></expr></argument>, <argument pos:start="253:50" pos:end="253:56"><expr pos:start="253:50" pos:end="253:56"><name pos:start="253:50" pos:end="253:56"><name pos:start="253:50" pos:end="253:53">args</name><index pos:start="253:54" pos:end="253:56">[<expr pos:start="253:55" pos:end="253:55"><literal type="number" pos:start="253:55" pos:end="253:55">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="253:59" pos:end="253:65"><expr pos:start="253:59" pos:end="253:65"><name pos:start="253:59" pos:end="253:65"><name pos:start="253:59" pos:end="253:62">args</name><index pos:start="253:63" pos:end="253:65">[<expr pos:start="253:64" pos:end="253:64"><literal type="number" pos:start="253:64" pos:end="253:64">2</literal></expr>]</index></name></expr></argument>,

                                          <argument pos:start="255:43" pos:end="255:53"><expr pos:start="255:43" pos:end="255:53"><name pos:start="255:43" pos:end="255:53">ov5_updates</name></expr></argument>)</argument_list></call> <operator pos:start="255:56" pos:end="255:57">!=</operator> <literal type="number" pos:start="255:59" pos:end="255:59">0</literal><operator pos:start="255:60" pos:end="255:60">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="259:5" pos:end="259:36"><expr pos:start="259:5" pos:end="259:35"><call pos:start="259:5" pos:end="259:35"><name pos:start="259:5" pos:end="259:22">spapr_ovec_cleanup</name><argument_list pos:start="259:23" pos:end="259:35">(<argument pos:start="259:24" pos:end="259:34"><expr pos:start="259:24" pos:end="259:34"><name pos:start="259:24" pos:end="259:34">ov5_updates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="263:5" pos:end="281:5"><if pos:start="263:5" pos:end="267:5">if <condition pos:start="263:8" pos:end="263:26">(<expr pos:start="263:9" pos:end="263:25"><name pos:start="263:9" pos:end="263:25"><name pos:start="263:9" pos:end="263:13">spapr</name><operator pos:start="263:14" pos:end="263:15">-&gt;</operator><name pos:start="263:16" pos:end="263:25">cas_reboot</name></name></expr>)</condition> <block pos:start="263:28" pos:end="267:5">{<block_content pos:start="265:9" pos:end="265:62">

        <expr_stmt pos:start="265:9" pos:end="265:62"><expr pos:start="265:9" pos:end="265:61"><call pos:start="265:9" pos:end="265:61"><name pos:start="265:9" pos:end="265:33">qemu_system_reset_request</name><argument_list pos:start="265:34" pos:end="265:61">(<argument pos:start="265:35" pos:end="265:60"><expr pos:start="265:35" pos:end="265:60"><name pos:start="265:35" pos:end="265:60">SHUTDOWN_CAUSE_GUEST_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="267:7" pos:end="281:5">else <block pos:start="267:12" pos:end="281:5">{<block_content pos:start="273:9" pos:end="279:9">

        <comment type="block" pos:start="269:9" pos:end="271:79">/* If ppc_spapr_reset() did not set up a HPT but one is necessary

         * (because the guest isn't going to use radix) then set it up here. */</comment>

        <if_stmt pos:start="273:9" pos:end="279:9"><if pos:start="273:9" pos:end="279:9">if <condition pos:start="273:12" pos:end="273:60">(<expr pos:start="273:13" pos:end="273:59"><operator pos:start="273:13" pos:end="273:13">(</operator><name pos:start="273:14" pos:end="273:30"><name pos:start="273:14" pos:end="273:18">spapr</name><operator pos:start="273:19" pos:end="273:20">-&gt;</operator><name pos:start="273:21" pos:end="273:30">patb_entry</name></name> <operator pos:start="273:32" pos:end="273:32">&amp;</operator> <name pos:start="273:34" pos:end="273:42">PATBE1_GR</name><operator pos:start="273:43" pos:end="273:43">)</operator> <operator pos:start="273:45" pos:end="273:46">&amp;&amp;</operator> <operator pos:start="273:48" pos:end="273:48">!</operator><name pos:start="273:49" pos:end="273:59">guest_radix</name></expr>)</condition> <block pos:start="273:62" pos:end="279:9">{<block_content pos:start="277:13" pos:end="277:44">

            <comment type="block" pos:start="275:13" pos:end="275:42">/* legacy hash or new hash: */</comment>

            <expr_stmt pos:start="277:13" pos:end="277:44"><expr pos:start="277:13" pos:end="277:43"><call pos:start="277:13" pos:end="277:43"><name pos:start="277:13" pos:end="277:36">spapr_setup_hpt_and_vrma</name><argument_list pos:start="277:37" pos:end="277:43">(<argument pos:start="277:38" pos:end="277:42"><expr pos:start="277:38" pos:end="277:42"><name pos:start="277:38" pos:end="277:42">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="285:5" pos:end="285:21">return <expr pos:start="285:12" pos:end="285:20"><name pos:start="285:12" pos:end="285:20">H_SUCCESS</name></expr>;</return>

</block_content>}</block></function>
</unit>
