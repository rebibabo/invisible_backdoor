<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21378.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">qemu_rdma_source_init</name><parameter_list pos:start="1:33" pos:end="1:79">(<parameter pos:start="1:34" pos:end="1:50"><decl pos:start="1:34" pos:end="1:50"><type pos:start="1:34" pos:end="1:50"><name pos:start="1:34" pos:end="1:44">RDMAContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:50">rdma</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:64"><decl pos:start="1:53" pos:end="1:64"><type pos:start="1:53" pos:end="1:64"><name pos:start="1:53" pos:end="1:57">Error</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier><modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">errp</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:78"><decl pos:start="1:67" pos:end="1:78"><type pos:start="1:67" pos:end="1:78"><name pos:start="1:67" pos:end="1:70">bool</name></type> <name pos:start="1:72" pos:end="1:78">pin_all</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="101:14">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>, <decl pos:start="5:14" pos:end="5:16"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:16">idx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:49"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Error</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:20">local_err</name> <init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>, <decl pos:start="7:30" pos:end="7:48"><type ref="prev" pos:start="7:5" pos:end="7:11"><modifier pos:start="7:30" pos:end="7:30">*</modifier><modifier pos:start="7:31" pos:end="7:31">*</modifier></type><name pos:start="7:32" pos:end="7:35">temp</name> <init pos:start="7:37" pos:end="7:48">= <expr pos:start="7:39" pos:end="7:48"><operator pos:start="7:39" pos:end="7:39">&amp;</operator><name pos:start="7:40" pos:end="7:48">local_err</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="17:7">/*

     * Will be validated against destination's actual capabilities

     * after the connect() completes.

     */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:28"><expr pos:start="19:5" pos:end="19:27"><name pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:8">rdma</name><operator pos:start="19:9" pos:end="19:10">-&gt;</operator><name pos:start="19:11" pos:end="19:17">pin_all</name></name> <operator pos:start="19:19" pos:end="19:19">=</operator> <name pos:start="19:21" pos:end="19:27">pin_all</name></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:45"><expr pos:start="23:5" pos:end="23:44"><name pos:start="23:5" pos:end="23:7">ret</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:44"><name pos:start="23:11" pos:end="23:32">qemu_rdma_resolve_host</name><argument_list pos:start="23:33" pos:end="23:44">(<argument pos:start="23:34" pos:end="23:37"><expr pos:start="23:34" pos:end="23:37"><name pos:start="23:34" pos:end="23:37">rdma</name></expr></argument>, <argument pos:start="23:40" pos:end="23:43"><expr pos:start="23:40" pos:end="23:43"><name pos:start="23:40" pos:end="23:43">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:12">(<expr pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">ret</name></expr>)</condition> <block pos:start="25:14" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:34">

        <goto pos:start="27:9" pos:end="27:34">goto <name pos:start="27:14" pos:end="27:33">err_rdma_source_init</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:38"><expr pos:start="33:5" pos:end="33:37"><name pos:start="33:5" pos:end="33:7">ret</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:37"><name pos:start="33:11" pos:end="33:31">qemu_rdma_alloc_pd_cq</name><argument_list pos:start="33:32" pos:end="33:37">(<argument pos:start="33:33" pos:end="33:36"><expr pos:start="33:33" pos:end="33:36"><name pos:start="33:33" pos:end="33:36">rdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="45:5"><if pos:start="35:5" pos:end="45:5">if <condition pos:start="35:8" pos:end="35:12">(<expr pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:11">ret</name></expr>)</condition> <block pos:start="35:14" pos:end="45:5">{<block_content pos:start="37:9" pos:end="43:34">

        <expr_stmt pos:start="37:9" pos:end="41:60"><expr pos:start="37:9" pos:end="41:59"><call pos:start="37:9" pos:end="41:59"><name pos:start="37:9" pos:end="37:13">ERROR</name><argument_list pos:start="37:14" pos:end="41:59">(<argument pos:start="37:15" pos:end="37:18"><expr pos:start="37:15" pos:end="37:18"><name pos:start="37:15" pos:end="37:18">temp</name></expr></argument>, <argument pos:start="37:21" pos:end="41:58"><expr pos:start="37:21" pos:end="41:58"><literal type="string" pos:start="37:21" pos:end="37:78">"rdma migration: error allocating pd and cq! Your mlock()"</literal>

                    <literal type="string" pos:start="39:21" pos:end="39:77">" limits may be too low. Please check $ ulimit -a # and "</literal>

                    <literal type="string" pos:start="41:21" pos:end="41:58">"search for 'ulimit -l' in the output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="43:9" pos:end="43:34">goto <name pos:start="43:14" pos:end="43:33">err_rdma_source_init</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:35"><expr pos:start="49:5" pos:end="49:34"><name pos:start="49:5" pos:end="49:7">ret</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <call pos:start="49:11" pos:end="49:34"><name pos:start="49:11" pos:end="49:28">qemu_rdma_alloc_qp</name><argument_list pos:start="49:29" pos:end="49:34">(<argument pos:start="49:30" pos:end="49:33"><expr pos:start="49:30" pos:end="49:33"><name pos:start="49:30" pos:end="49:33">rdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:12">(<expr pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">ret</name></expr>)</condition> <block pos:start="51:14" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:34">

        <expr_stmt pos:start="53:9" pos:end="53:60"><expr pos:start="53:9" pos:end="53:59"><call pos:start="53:9" pos:end="53:59"><name pos:start="53:9" pos:end="53:13">ERROR</name><argument_list pos:start="53:14" pos:end="53:59">(<argument pos:start="53:15" pos:end="53:18"><expr pos:start="53:15" pos:end="53:18"><name pos:start="53:15" pos:end="53:18">temp</name></expr></argument>, <argument pos:start="53:21" pos:end="53:58"><expr pos:start="53:21" pos:end="53:58"><literal type="string" pos:start="53:21" pos:end="53:58">"rdma migration: error allocating qp!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="55:9" pos:end="55:34">goto <name pos:start="55:14" pos:end="55:33">err_rdma_source_init</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:42"><expr pos:start="61:5" pos:end="61:41"><name pos:start="61:5" pos:end="61:7">ret</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:41"><name pos:start="61:11" pos:end="61:35">qemu_rdma_init_ram_blocks</name><argument_list pos:start="61:36" pos:end="61:41">(<argument pos:start="61:37" pos:end="61:40"><expr pos:start="61:37" pos:end="61:40"><name pos:start="61:37" pos:end="61:40">rdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:12">(<expr pos:start="63:9" pos:end="63:11"><name pos:start="63:9" pos:end="63:11">ret</name></expr>)</condition> <block pos:start="63:14" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:34">

        <expr_stmt pos:start="65:9" pos:end="65:70"><expr pos:start="65:9" pos:end="65:69"><call pos:start="65:9" pos:end="65:69"><name pos:start="65:9" pos:end="65:13">ERROR</name><argument_list pos:start="65:14" pos:end="65:69">(<argument pos:start="65:15" pos:end="65:18"><expr pos:start="65:15" pos:end="65:18"><name pos:start="65:15" pos:end="65:18">temp</name></expr></argument>, <argument pos:start="65:21" pos:end="65:68"><expr pos:start="65:21" pos:end="65:68"><literal type="string" pos:start="65:21" pos:end="65:68">"rdma migration: error initializing ram blocks!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="67:9" pos:end="67:34">goto <name pos:start="67:14" pos:end="67:33">err_rdma_source_init</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <for pos:start="73:5" pos:end="87:5">for <control pos:start="73:9" pos:end="73:45">(<init pos:start="73:10" pos:end="73:17"><expr pos:start="73:10" pos:end="73:16"><name pos:start="73:10" pos:end="73:12">idx</name> <operator pos:start="73:14" pos:end="73:14">=</operator> <literal type="number" pos:start="73:16" pos:end="73:16">0</literal></expr>;</init> <condition pos:start="73:19" pos:end="73:38"><expr pos:start="73:19" pos:end="73:37"><name pos:start="73:19" pos:end="73:21">idx</name> <operator pos:start="73:23" pos:end="73:23">&lt;</operator> <name pos:start="73:25" pos:end="73:37">RDMA_WRID_MAX</name></expr>;</condition> <incr pos:start="73:40" pos:end="73:44"><expr pos:start="73:40" pos:end="73:44"><name pos:start="73:40" pos:end="73:42">idx</name><operator pos:start="73:43" pos:end="73:44">++</operator></expr></incr>)</control> <block pos:start="73:47" pos:end="87:5">{<block_content pos:start="75:9" pos:end="85:9">

        <expr_stmt pos:start="75:9" pos:end="75:47"><expr pos:start="75:9" pos:end="75:46"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="75:46"><name pos:start="75:15" pos:end="75:35">qemu_rdma_reg_control</name><argument_list pos:start="75:36" pos:end="75:46">(<argument pos:start="75:37" pos:end="75:40"><expr pos:start="75:37" pos:end="75:40"><name pos:start="75:37" pos:end="75:40">rdma</name></expr></argument>, <argument pos:start="75:43" pos:end="75:45"><expr pos:start="75:43" pos:end="75:45"><name pos:start="75:43" pos:end="75:45">idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="85:9"><if pos:start="77:9" pos:end="85:9">if <condition pos:start="77:12" pos:end="77:16">(<expr pos:start="77:13" pos:end="77:15"><name pos:start="77:13" pos:end="77:15">ret</name></expr>)</condition> <block pos:start="77:18" pos:end="85:9">{<block_content pos:start="79:13" pos:end="83:38">

            <expr_stmt pos:start="79:13" pos:end="81:65"><expr pos:start="79:13" pos:end="81:64"><call pos:start="79:13" pos:end="81:64"><name pos:start="79:13" pos:end="79:17">ERROR</name><argument_list pos:start="79:18" pos:end="81:64">(<argument pos:start="79:19" pos:end="79:22"><expr pos:start="79:19" pos:end="79:22"><name pos:start="79:19" pos:end="79:22">temp</name></expr></argument>, <argument pos:start="79:25" pos:end="79:71"><expr pos:start="79:25" pos:end="79:71"><literal type="string" pos:start="79:25" pos:end="79:71">"rdma migration: error registering %d control!"</literal></expr></argument>,

                                                            <argument pos:start="81:61" pos:end="81:63"><expr pos:start="81:61" pos:end="81:63"><name pos:start="81:61" pos:end="81:63">idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="83:13" pos:end="83:38">goto <name pos:start="83:18" pos:end="83:37">err_rdma_source_init</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <return pos:start="91:5" pos:end="91:13">return <expr pos:start="91:12" pos:end="91:12"><literal type="number" pos:start="91:12" pos:end="91:12">0</literal></expr>;</return>



<label pos:start="95:1" pos:end="95:21"><name pos:start="95:1" pos:end="95:20">err_rdma_source_init</name>:</label>

    <expr_stmt pos:start="97:5" pos:end="97:37"><expr pos:start="97:5" pos:end="97:36"><call pos:start="97:5" pos:end="97:36"><name pos:start="97:5" pos:end="97:19">error_propagate</name><argument_list pos:start="97:20" pos:end="97:36">(<argument pos:start="97:21" pos:end="97:24"><expr pos:start="97:21" pos:end="97:24"><name pos:start="97:21" pos:end="97:24">errp</name></expr></argument>, <argument pos:start="97:27" pos:end="97:35"><expr pos:start="97:27" pos:end="97:35"><name pos:start="97:27" pos:end="97:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:28"><expr pos:start="99:5" pos:end="99:27"><call pos:start="99:5" pos:end="99:27"><name pos:start="99:5" pos:end="99:21">qemu_rdma_cleanup</name><argument_list pos:start="99:22" pos:end="99:27">(<argument pos:start="99:23" pos:end="99:26"><expr pos:start="99:23" pos:end="99:26"><name pos:start="99:23" pos:end="99:26">rdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="101:5" pos:end="101:14">return <expr pos:start="101:12" pos:end="101:13"><operator pos:start="101:12" pos:end="101:12">-</operator><literal type="number" pos:start="101:13" pos:end="101:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
