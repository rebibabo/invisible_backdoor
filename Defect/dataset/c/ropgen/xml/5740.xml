<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5740.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">pix_sum_altivec</name><parameter_list pos:start="1:27" pos:end="1:55">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:34">uint8_t</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">pix</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:54"><decl pos:start="1:42" pos:end="1:54"><type pos:start="1:42" pos:end="1:54"><name pos:start="1:42" pos:end="1:44">int</name></type> <name pos:start="1:46" pos:end="1:54">line_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="53:1">{<block_content pos:start="5:5" pos:end="51:13">

    <decl_stmt pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="9:53"><decl pos:start="7:5" pos:end="9:52"><type pos:start="7:5" pos:end="7:29"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:16">vector</name> <name pos:start="7:18" pos:end="7:25">unsigned</name> <name pos:start="7:27" pos:end="7:29">int</name></type> <name pos:start="7:31" pos:end="7:34">zero</name> <init pos:start="7:36" pos:end="9:52">=

        <expr pos:start="9:9" pos:end="9:52"><operator pos:start="9:9" pos:end="9:9">(</operator><specifier pos:start="9:10" pos:end="9:14">const</specifier> <name pos:start="9:16" pos:end="9:21">vector</name> <name pos:start="9:23" pos:end="9:30">unsigned</name> <name pos:start="9:32" pos:end="9:34">int</name><operator pos:start="9:35" pos:end="9:35">)</operator> <call pos:start="9:37" pos:end="9:52"><name pos:start="9:37" pos:end="9:49">vec_splat_u32</name><argument_list pos:start="9:50" pos:end="9:52">(<argument pos:start="9:51" pos:end="9:51"><expr pos:start="9:51" pos:end="9:51"><literal type="number" pos:start="9:51" pos:end="9:51">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:69"><decl pos:start="11:5" pos:end="11:68"><type pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:10">vector</name> <name pos:start="11:12" pos:end="11:19">unsigned</name> <name pos:start="11:21" pos:end="11:23">int</name></type> <name pos:start="11:25" pos:end="11:27">sad</name> <init pos:start="11:29" pos:end="11:68">= <expr pos:start="11:31" pos:end="11:68"><operator pos:start="11:31" pos:end="11:31">(</operator><name pos:start="11:32" pos:end="11:37">vector</name> <name pos:start="11:39" pos:end="11:46">unsigned</name> <name pos:start="11:48" pos:end="11:50">int</name><operator pos:start="11:51" pos:end="11:51">)</operator> <call pos:start="11:53" pos:end="11:68"><name pos:start="11:53" pos:end="11:65">vec_splat_u32</name><argument_list pos:start="11:66" pos:end="11:68">(<argument pos:start="11:67" pos:end="11:67"><expr pos:start="11:67" pos:end="11:67"><literal type="number" pos:start="11:67" pos:end="11:67">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:10">vector</name> <name pos:start="13:12" pos:end="13:17">signed</name> <name pos:start="13:19" pos:end="13:21">int</name></type> <name pos:start="13:23" pos:end="13:30">sumdiffs</name></decl>;</decl_stmt>



    <for pos:start="17:5" pos:end="39:5">for <control pos:start="17:9" pos:end="17:28">(<init pos:start="17:10" pos:end="17:15"><expr pos:start="17:10" pos:end="17:14"><name pos:start="17:10" pos:end="17:10">i</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr>;</init> <condition pos:start="17:17" pos:end="17:23"><expr pos:start="17:17" pos:end="17:22"><name pos:start="17:17" pos:end="17:17">i</name> <operator pos:start="17:19" pos:end="17:19">&lt;</operator> <literal type="number" pos:start="17:21" pos:end="17:22">16</literal></expr>;</condition> <incr pos:start="17:25" pos:end="17:27"><expr pos:start="17:25" pos:end="17:27"><name pos:start="17:25" pos:end="17:25">i</name><operator pos:start="17:26" pos:end="17:27">++</operator></expr></incr>)</control> <block pos:start="17:30" pos:end="39:5">{<block_content pos:start="27:9" pos:end="37:25">

        <comment type="block" pos:start="19:9" pos:end="19:63">/* Read the potentially unaligned 16 pixels into t1. */</comment>

        <comment type="line" pos:start="21:9" pos:end="21:54">//vector unsigned char pixl = vec_ld(0,  pix);</comment>

        <comment type="line" pos:start="23:9" pos:end="23:54">//vector unsigned char pixr = vec_ld(15, pix);</comment>

        <comment type="line" pos:start="25:9" pos:end="25:65">//vector unsigned char t1   = vec_perm(pixl, pixr, perm);</comment>

        <decl_stmt pos:start="27:9" pos:end="27:56"><decl pos:start="27:9" pos:end="27:55"><type pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:14">vector</name> <name pos:start="27:16" pos:end="27:23">unsigned</name> <name pos:start="27:25" pos:end="27:28">char</name></type> <name pos:start="27:30" pos:end="27:31">t1</name>   <init pos:start="27:35" pos:end="27:55">= <expr pos:start="27:37" pos:end="27:55"><call pos:start="27:37" pos:end="27:55"><name pos:start="27:37" pos:end="27:46">vec_vsx_ld</name><argument_list pos:start="27:47" pos:end="27:55">(<argument pos:start="27:48" pos:end="27:48"><expr pos:start="27:48" pos:end="27:48"><literal type="number" pos:start="27:48" pos:end="27:48">0</literal></expr></argument>,  <argument pos:start="27:52" pos:end="27:54"><expr pos:start="27:52" pos:end="27:54"><name pos:start="27:52" pos:end="27:54">pix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="31:9" pos:end="31:73">/* Add each 4 pixel group together and put 4 results into sad. */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:33"><expr pos:start="33:9" pos:end="33:32"><name pos:start="33:9" pos:end="33:11">sad</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <call pos:start="33:15" pos:end="33:32"><name pos:start="33:15" pos:end="33:23">vec_sum4s</name><argument_list pos:start="33:24" pos:end="33:32">(<argument pos:start="33:25" pos:end="33:26"><expr pos:start="33:25" pos:end="33:26"><name pos:start="33:25" pos:end="33:26">t1</name></expr></argument>, <argument pos:start="33:29" pos:end="33:31"><expr pos:start="33:29" pos:end="33:31"><name pos:start="33:29" pos:end="33:31">sad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:25"><expr pos:start="37:9" pos:end="37:24"><name pos:start="37:9" pos:end="37:11">pix</name> <operator pos:start="37:13" pos:end="37:14">+=</operator> <name pos:start="37:16" pos:end="37:24">line_size</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="43:5" pos:end="43:66">/* Sum up the four partial sums, and put the result into s. */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:75"><expr pos:start="45:5" pos:end="45:74"><name pos:start="45:5" pos:end="45:12">sumdiffs</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <call pos:start="45:16" pos:end="45:74"><name pos:start="45:16" pos:end="45:23">vec_sums</name><argument_list pos:start="45:24" pos:end="45:74">(<argument pos:start="45:25" pos:end="45:47"><expr pos:start="45:25" pos:end="45:47"><operator pos:start="45:25" pos:end="45:25">(</operator><name pos:start="45:26" pos:end="45:31">vector</name> <name pos:start="45:33" pos:end="45:38">signed</name> <name pos:start="45:40" pos:end="45:42">int</name><operator pos:start="45:43" pos:end="45:43">)</operator> <name pos:start="45:45" pos:end="45:47">sad</name></expr></argument>, <argument pos:start="45:50" pos:end="45:73"><expr pos:start="45:50" pos:end="45:73"><operator pos:start="45:50" pos:end="45:50">(</operator><name pos:start="45:51" pos:end="45:56">vector</name> <name pos:start="45:58" pos:end="45:63">signed</name> <name pos:start="45:65" pos:end="45:67">int</name><operator pos:start="45:68" pos:end="45:68">)</operator> <name pos:start="45:70" pos:end="45:73">zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:38"><expr pos:start="47:5" pos:end="47:37"><name pos:start="47:5" pos:end="47:12">sumdiffs</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <call pos:start="47:16" pos:end="47:37"><name pos:start="47:16" pos:end="47:24">vec_splat</name><argument_list pos:start="47:25" pos:end="47:37">(<argument pos:start="47:26" pos:end="47:33"><expr pos:start="47:26" pos:end="47:33"><name pos:start="47:26" pos:end="47:33">sumdiffs</name></expr></argument>, <argument pos:start="47:36" pos:end="47:36"><expr pos:start="47:36" pos:end="47:36"><literal type="number" pos:start="47:36" pos:end="47:36">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:32"><expr pos:start="49:5" pos:end="49:31"><call pos:start="49:5" pos:end="49:31"><name pos:start="49:5" pos:end="49:14">vec_vsx_st</name><argument_list pos:start="49:15" pos:end="49:31">(<argument pos:start="49:16" pos:end="49:23"><expr pos:start="49:16" pos:end="49:23"><name pos:start="49:16" pos:end="49:23">sumdiffs</name></expr></argument>, <argument pos:start="49:26" pos:end="49:26"><expr pos:start="49:26" pos:end="49:26"><literal type="number" pos:start="49:26" pos:end="49:26">0</literal></expr></argument>, <argument pos:start="49:29" pos:end="49:30"><expr pos:start="49:29" pos:end="49:30"><operator pos:start="49:29" pos:end="49:29">&amp;</operator><name pos:start="49:30" pos:end="49:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="51:5" pos:end="51:13">return <expr pos:start="51:12" pos:end="51:12"><name pos:start="51:12" pos:end="51:12">s</name></expr>;</return>

</block_content>}</block></function>
</unit>
