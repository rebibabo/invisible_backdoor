<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2396.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:6"><name pos:start="1:1" pos:end="1:4">void</name> <modifier pos:start="1:6" pos:end="1:6">*</modifier></type><name pos:start="1:7" pos:end="1:16">qpci_iomap</name><parameter_list pos:start="1:17" pos:end="1:63">(<parameter pos:start="1:18" pos:end="1:32"><decl pos:start="1:18" pos:end="1:32"><type pos:start="1:18" pos:end="1:32"><name pos:start="1:18" pos:end="1:27">QPCIDevice</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:32">dev</name></decl></parameter>, <parameter pos:start="1:35" pos:end="1:43"><decl pos:start="1:35" pos:end="1:43"><type pos:start="1:35" pos:end="1:43"><name pos:start="1:35" pos:end="1:37">int</name></type> <name pos:start="1:39" pos:end="1:43">barno</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:62"><decl pos:start="1:46" pos:end="1:62"><type pos:start="1:46" pos:end="1:62"><name pos:start="1:46" pos:end="1:53">uint64_t</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:62">sizeptr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="109:1">{<block_content pos:start="5:5" pos:end="107:34">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">QPCIBus</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">bus</name> <init pos:start="5:18" pos:end="5:27">= <expr pos:start="5:20" pos:end="5:27"><name pos:start="5:20" pos:end="5:27"><name pos:start="5:20" pos:end="5:22">dev</name><operator pos:start="5:23" pos:end="5:24">-&gt;</operator><name pos:start="5:25" pos:end="5:27">bus</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="13:6"><decl pos:start="7:5" pos:end="13:5"><type pos:start="7:5" pos:end="7:20"><specifier pos:start="7:5" pos:end="7:10">static</specifier> <specifier pos:start="7:12" pos:end="7:16">const</specifier> <name pos:start="7:18" pos:end="7:20">int</name></type> <name pos:start="7:22" pos:end="7:34"><name pos:start="7:22" pos:end="7:32">bar_reg_map</name><index pos:start="7:33" pos:end="7:34">[]</index></name> <init pos:start="7:36" pos:end="13:5">= <expr pos:start="7:38" pos:end="13:5"><block pos:start="7:38" pos:end="13:5">{

        <expr pos:start="9:9" pos:end="9:26"><name pos:start="9:9" pos:end="9:26">PCI_BASE_ADDRESS_0</name></expr>, <expr pos:start="9:29" pos:end="9:46"><name pos:start="9:29" pos:end="9:46">PCI_BASE_ADDRESS_1</name></expr>, <expr pos:start="9:49" pos:end="9:66"><name pos:start="9:49" pos:end="9:66">PCI_BASE_ADDRESS_2</name></expr>,

        <expr pos:start="11:9" pos:end="11:26"><name pos:start="11:9" pos:end="11:26">PCI_BASE_ADDRESS_3</name></expr>, <expr pos:start="11:29" pos:end="11:46"><name pos:start="11:29" pos:end="11:46">PCI_BASE_ADDRESS_4</name></expr>, <expr pos:start="11:49" pos:end="11:66"><name pos:start="11:49" pos:end="11:66">PCI_BASE_ADDRESS_5</name></expr>,

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:15">bar_reg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:17">addr</name></decl>, <decl pos:start="17:20" pos:end="17:23"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:20" pos:end="17:23">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:20">io_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:17"><decl pos:start="21:5" pos:end="21:16"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:16">loc</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:39"><expr pos:start="25:5" pos:end="25:38"><call pos:start="25:5" pos:end="25:38"><name pos:start="25:5" pos:end="25:12">g_assert</name><argument_list pos:start="25:13" pos:end="25:38">(<argument pos:start="25:14" pos:end="25:37"><expr pos:start="25:14" pos:end="25:37"><name pos:start="25:14" pos:end="25:18">barno</name> <operator pos:start="25:20" pos:end="25:21">&gt;=</operator> <literal type="number" pos:start="25:23" pos:end="25:23">0</literal> <operator pos:start="25:25" pos:end="25:26">&amp;&amp;</operator> <name pos:start="25:28" pos:end="25:32">barno</name> <operator pos:start="25:34" pos:end="25:35">&lt;=</operator> <literal type="number" pos:start="25:37" pos:end="25:37">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:33"><expr pos:start="27:5" pos:end="27:32"><name pos:start="27:5" pos:end="27:11">bar_reg</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <name pos:start="27:15" pos:end="27:32"><name pos:start="27:15" pos:end="27:25">bar_reg_map</name><index pos:start="27:26" pos:end="27:32">[<expr pos:start="27:27" pos:end="27:31"><name pos:start="27:27" pos:end="27:31">barno</name></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:49"><expr pos:start="31:5" pos:end="31:48"><call pos:start="31:5" pos:end="31:48"><name pos:start="31:5" pos:end="31:22">qpci_config_writel</name><argument_list pos:start="31:23" pos:end="31:48">(<argument pos:start="31:24" pos:end="31:26"><expr pos:start="31:24" pos:end="31:26"><name pos:start="31:24" pos:end="31:26">dev</name></expr></argument>, <argument pos:start="31:29" pos:end="31:35"><expr pos:start="31:29" pos:end="31:35"><name pos:start="31:29" pos:end="31:35">bar_reg</name></expr></argument>, <argument pos:start="31:38" pos:end="31:47"><expr pos:start="31:38" pos:end="31:47"><literal type="number" pos:start="31:38" pos:end="31:47">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:43"><expr pos:start="33:5" pos:end="33:42"><name pos:start="33:5" pos:end="33:8">addr</name> <operator pos:start="33:10" pos:end="33:10">=</operator> <call pos:start="33:12" pos:end="33:42"><name pos:start="33:12" pos:end="33:28">qpci_config_readl</name><argument_list pos:start="33:29" pos:end="33:42">(<argument pos:start="33:30" pos:end="33:32"><expr pos:start="33:30" pos:end="33:32"><name pos:start="33:30" pos:end="33:32">dev</name></expr></argument>, <argument pos:start="33:35" pos:end="33:41"><expr pos:start="33:35" pos:end="33:41"><name pos:start="33:35" pos:end="33:41">bar_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:44"><expr pos:start="37:5" pos:end="37:43"><name pos:start="37:5" pos:end="37:11">io_type</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <name pos:start="37:15" pos:end="37:18">addr</name> <operator pos:start="37:20" pos:end="37:20">&amp;</operator> <name pos:start="37:22" pos:end="37:43">PCI_BASE_ADDRESS_SPACE</name></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:45">(<expr pos:start="39:9" pos:end="39:44"><name pos:start="39:9" pos:end="39:15">io_type</name> <operator pos:start="39:17" pos:end="39:18">==</operator> <name pos:start="39:20" pos:end="39:44">PCI_BASE_ADDRESS_SPACE_IO</name></expr>)</condition> <block pos:start="39:47" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:41">

        <expr_stmt pos:start="41:9" pos:end="41:41"><expr pos:start="41:9" pos:end="41:40"><name pos:start="41:9" pos:end="41:12">addr</name> <operator pos:start="41:14" pos:end="41:15">&amp;=</operator> <name pos:start="41:17" pos:end="41:40">PCI_BASE_ADDRESS_IO_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="43:7" pos:end="47:5">else <block pos:start="43:12" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:42">

        <expr_stmt pos:start="45:9" pos:end="45:42"><expr pos:start="45:9" pos:end="45:41"><name pos:start="45:9" pos:end="45:12">addr</name> <operator pos:start="45:14" pos:end="45:15">&amp;=</operator> <name pos:start="45:17" pos:end="45:41">PCI_BASE_ADDRESS_MEM_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:19"><expr pos:start="51:5" pos:end="51:18"><call pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:12">g_assert</name><argument_list pos:start="51:13" pos:end="51:18">(<argument pos:start="51:14" pos:end="51:17"><expr pos:start="51:14" pos:end="51:17"><name pos:start="51:14" pos:end="51:17">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="51:21" pos:end="51:52">/* Must have *some* size bits */</comment>



    <expr_stmt pos:start="55:5" pos:end="55:29"><expr pos:start="55:5" pos:end="55:28"><name pos:start="55:5" pos:end="55:8">size</name> <operator pos:start="55:10" pos:end="55:10">=</operator> <literal type="number" pos:start="55:12" pos:end="55:13">1U</literal> <operator pos:start="55:15" pos:end="55:16">&lt;&lt;</operator> <call pos:start="55:18" pos:end="55:28"><name pos:start="55:18" pos:end="55:22">ctz32</name><argument_list pos:start="55:23" pos:end="55:28">(<argument pos:start="55:24" pos:end="55:27"><expr pos:start="55:24" pos:end="55:27"><name pos:start="55:24" pos:end="55:27">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:16">(<expr pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:15">sizeptr</name></expr>)</condition> <block pos:start="57:18" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:24">

        <expr_stmt pos:start="59:9" pos:end="59:24"><expr pos:start="59:9" pos:end="59:23"><operator pos:start="59:9" pos:end="59:9">*</operator><name pos:start="59:10" pos:end="59:16">sizeptr</name> <operator pos:start="59:18" pos:end="59:18">=</operator> <name pos:start="59:20" pos:end="59:23">size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="65:5" pos:end="103:5"><if pos:start="65:5" pos:end="83:5">if <condition pos:start="65:8" pos:end="65:45">(<expr pos:start="65:9" pos:end="65:44"><name pos:start="65:9" pos:end="65:15">io_type</name> <operator pos:start="65:17" pos:end="65:18">==</operator> <name pos:start="65:20" pos:end="65:44">PCI_BASE_ADDRESS_SPACE_IO</name></expr>)</condition> <block pos:start="65:47" pos:end="83:5">{<block_content pos:start="67:9" pos:end="81:74">

        <expr_stmt pos:start="67:9" pos:end="67:54"><expr pos:start="67:9" pos:end="67:53"><name pos:start="67:9" pos:end="67:11">loc</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <call pos:start="67:15" pos:end="67:53"><name pos:start="67:15" pos:end="67:27">QEMU_ALIGN_UP</name><argument_list pos:start="67:28" pos:end="67:53">(<argument pos:start="67:29" pos:end="67:46"><expr pos:start="67:29" pos:end="67:46"><name pos:start="67:29" pos:end="67:46"><name pos:start="67:29" pos:end="67:31">bus</name><operator pos:start="67:32" pos:end="67:33">-&gt;</operator><name pos:start="67:34" pos:end="67:46">pio_alloc_ptr</name></name></expr></argument>, <argument pos:start="67:49" pos:end="67:52"><expr pos:start="67:49" pos:end="67:52"><name pos:start="67:49" pos:end="67:52">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:44"><expr pos:start="71:9" pos:end="71:43"><call pos:start="71:9" pos:end="71:43"><name pos:start="71:9" pos:end="71:16">g_assert</name><argument_list pos:start="71:17" pos:end="71:43">(<argument pos:start="71:18" pos:end="71:42"><expr pos:start="71:18" pos:end="71:42"><name pos:start="71:18" pos:end="71:20">loc</name> <operator pos:start="71:22" pos:end="71:23">&gt;=</operator> <name pos:start="71:25" pos:end="71:42"><name pos:start="71:25" pos:end="71:27">bus</name><operator pos:start="71:28" pos:end="71:29">-&gt;</operator><name pos:start="71:30" pos:end="71:42">pio_alloc_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:47"><expr pos:start="73:9" pos:end="73:46"><call pos:start="73:9" pos:end="73:46"><name pos:start="73:9" pos:end="73:16">g_assert</name><argument_list pos:start="73:17" pos:end="73:46">(<argument pos:start="73:18" pos:end="73:45"><expr pos:start="73:18" pos:end="73:45"><name pos:start="73:18" pos:end="73:20">loc</name> <operator pos:start="73:22" pos:end="73:22">+</operator> <name pos:start="73:24" pos:end="73:27">size</name> <operator pos:start="73:29" pos:end="73:30">&lt;=</operator> <name pos:start="73:32" pos:end="73:45">QPCI_PIO_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="73:49" pos:end="73:74">/* Keep PIO below 64kiB */</comment>



        <expr_stmt pos:start="77:9" pos:end="77:40"><expr pos:start="77:9" pos:end="77:39"><name pos:start="77:9" pos:end="77:26"><name pos:start="77:9" pos:end="77:11">bus</name><operator pos:start="77:12" pos:end="77:13">-&gt;</operator><name pos:start="77:14" pos:end="77:26">pio_alloc_ptr</name></name> <operator pos:start="77:28" pos:end="77:28">=</operator> <name pos:start="77:30" pos:end="77:32">loc</name> <operator pos:start="77:34" pos:end="77:34">+</operator> <name pos:start="77:36" pos:end="77:39">size</name></expr>;</expr_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:74"><expr pos:start="81:9" pos:end="81:73"><call pos:start="81:9" pos:end="81:73"><name pos:start="81:9" pos:end="81:26">qpci_config_writel</name><argument_list pos:start="81:27" pos:end="81:73">(<argument pos:start="81:28" pos:end="81:30"><expr pos:start="81:28" pos:end="81:30"><name pos:start="81:28" pos:end="81:30">dev</name></expr></argument>, <argument pos:start="81:33" pos:end="81:39"><expr pos:start="81:33" pos:end="81:39"><name pos:start="81:33" pos:end="81:39">bar_reg</name></expr></argument>, <argument pos:start="81:42" pos:end="81:72"><expr pos:start="81:42" pos:end="81:72"><name pos:start="81:42" pos:end="81:44">loc</name> <operator pos:start="81:46" pos:end="81:46">|</operator> <name pos:start="81:48" pos:end="81:72">PCI_BASE_ADDRESS_SPACE_IO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="83:7" pos:end="103:5">else <block pos:start="83:12" pos:end="103:5">{<block_content pos:start="85:9" pos:end="101:46">

        <expr_stmt pos:start="85:9" pos:end="85:55"><expr pos:start="85:9" pos:end="85:54"><name pos:start="85:9" pos:end="85:11">loc</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <call pos:start="85:15" pos:end="85:54"><name pos:start="85:15" pos:end="85:27">QEMU_ALIGN_UP</name><argument_list pos:start="85:28" pos:end="85:54">(<argument pos:start="85:29" pos:end="85:47"><expr pos:start="85:29" pos:end="85:47"><name pos:start="85:29" pos:end="85:47"><name pos:start="85:29" pos:end="85:31">bus</name><operator pos:start="85:32" pos:end="85:33">-&gt;</operator><name pos:start="85:34" pos:end="85:47">mmio_alloc_ptr</name></name></expr></argument>, <argument pos:start="85:50" pos:end="85:53"><expr pos:start="85:50" pos:end="85:53"><name pos:start="85:50" pos:end="85:53">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="89:9" pos:end="89:29">/* Check for space */</comment>

        <expr_stmt pos:start="91:9" pos:end="91:45"><expr pos:start="91:9" pos:end="91:44"><call pos:start="91:9" pos:end="91:44"><name pos:start="91:9" pos:end="91:16">g_assert</name><argument_list pos:start="91:17" pos:end="91:44">(<argument pos:start="91:18" pos:end="91:43"><expr pos:start="91:18" pos:end="91:43"><name pos:start="91:18" pos:end="91:20">loc</name> <operator pos:start="91:22" pos:end="91:23">&gt;=</operator> <name pos:start="91:25" pos:end="91:43"><name pos:start="91:25" pos:end="91:27">bus</name><operator pos:start="91:28" pos:end="91:29">-&gt;</operator><name pos:start="91:30" pos:end="91:43">mmio_alloc_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:48"><expr pos:start="93:9" pos:end="93:47"><call pos:start="93:9" pos:end="93:47"><name pos:start="93:9" pos:end="93:16">g_assert</name><argument_list pos:start="93:17" pos:end="93:47">(<argument pos:start="93:18" pos:end="93:46"><expr pos:start="93:18" pos:end="93:46"><name pos:start="93:18" pos:end="93:20">loc</name> <operator pos:start="93:22" pos:end="93:22">+</operator> <name pos:start="93:24" pos:end="93:27">size</name> <operator pos:start="93:29" pos:end="93:30">&lt;=</operator> <name pos:start="93:32" pos:end="93:46"><name pos:start="93:32" pos:end="93:34">bus</name><operator pos:start="93:35" pos:end="93:36">-&gt;</operator><name pos:start="93:37" pos:end="93:46">mmio_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="97:9" pos:end="97:41"><expr pos:start="97:9" pos:end="97:40"><name pos:start="97:9" pos:end="97:27"><name pos:start="97:9" pos:end="97:11">bus</name><operator pos:start="97:12" pos:end="97:13">-&gt;</operator><name pos:start="97:14" pos:end="97:27">mmio_alloc_ptr</name></name> <operator pos:start="97:29" pos:end="97:29">=</operator> <name pos:start="97:31" pos:end="97:33">loc</name> <operator pos:start="97:35" pos:end="97:35">+</operator> <name pos:start="97:37" pos:end="97:40">size</name></expr>;</expr_stmt>



        <expr_stmt pos:start="101:9" pos:end="101:46"><expr pos:start="101:9" pos:end="101:45"><call pos:start="101:9" pos:end="101:45"><name pos:start="101:9" pos:end="101:26">qpci_config_writel</name><argument_list pos:start="101:27" pos:end="101:45">(<argument pos:start="101:28" pos:end="101:30"><expr pos:start="101:28" pos:end="101:30"><name pos:start="101:28" pos:end="101:30">dev</name></expr></argument>, <argument pos:start="101:33" pos:end="101:39"><expr pos:start="101:33" pos:end="101:39"><name pos:start="101:33" pos:end="101:39">bar_reg</name></expr></argument>, <argument pos:start="101:42" pos:end="101:44"><expr pos:start="101:42" pos:end="101:44"><name pos:start="101:42" pos:end="101:44">loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="107:5" pos:end="107:34">return <expr pos:start="107:12" pos:end="107:33"><operator pos:start="107:12" pos:end="107:12">(</operator><name pos:start="107:13" pos:end="107:16">void</name> <operator pos:start="107:18" pos:end="107:18">*</operator><operator pos:start="107:19" pos:end="107:19">)</operator><operator pos:start="107:20" pos:end="107:20">(</operator><name pos:start="107:21" pos:end="107:29">uintptr_t</name><operator pos:start="107:30" pos:end="107:30">)</operator><name pos:start="107:31" pos:end="107:33">loc</name></expr>;</return>

</block_content>}</block></function>
</unit>
