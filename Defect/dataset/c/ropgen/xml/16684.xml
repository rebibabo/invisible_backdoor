<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16684.c" pos:tabs="8"><function pos:start="1:1" pos:end="263:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">qpeg_decode_inter</name><parameter_list pos:start="1:30" pos:end="7:47">(<parameter pos:start="1:31" pos:end="1:47"><decl pos:start="1:31" pos:end="1:47"><type pos:start="1:31" pos:end="1:47"><name pos:start="1:31" pos:end="1:41">QpegContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:47">qctx</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:61"><decl pos:start="1:50" pos:end="1:61"><type pos:start="1:50" pos:end="1:61"><name pos:start="1:50" pos:end="1:56">uint8_t</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:61">dst</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:40"><decl pos:start="3:31" pos:end="3:40"><type pos:start="3:31" pos:end="3:40"><name pos:start="3:31" pos:end="3:33">int</name></type> <name pos:start="3:35" pos:end="3:40">stride</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:51"><decl pos:start="3:43" pos:end="3:51"><type pos:start="3:43" pos:end="3:51"><name pos:start="3:43" pos:end="3:45">int</name></type> <name pos:start="3:47" pos:end="3:51">width</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:63"><decl pos:start="3:54" pos:end="3:63"><type pos:start="3:54" pos:end="3:63"><name pos:start="3:54" pos:end="3:56">int</name></type> <name pos:start="3:58" pos:end="3:63">height</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:39"><decl pos:start="5:31" pos:end="5:39"><type pos:start="5:31" pos:end="5:39"><name pos:start="5:31" pos:end="5:33">int</name></type> <name pos:start="5:35" pos:end="5:39">delta</name></decl></parameter>, <parameter pos:start="5:42" pos:end="5:62"><decl pos:start="5:42" pos:end="5:62"><type pos:start="5:42" pos:end="5:62"><specifier pos:start="5:42" pos:end="5:46">const</specifier> <name pos:start="5:48" pos:end="5:54">uint8_t</name> <modifier pos:start="5:56" pos:end="5:56">*</modifier></type><name pos:start="5:57" pos:end="5:62">ctable</name></decl></parameter>,

                              <parameter pos:start="7:31" pos:end="7:46"><decl pos:start="7:31" pos:end="7:46"><type pos:start="7:31" pos:end="7:46"><name pos:start="7:31" pos:end="7:37">uint8_t</name> <modifier pos:start="7:39" pos:end="7:39">*</modifier></type><name pos:start="7:40" pos:end="7:46">refdata</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="263:1">{<block_content pos:start="11:5" pos:end="261:5">

    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:12"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:12">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:13"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">code</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:14">filled</name> <init pos:start="15:16" pos:end="15:18">= <expr pos:start="15:18" pos:end="15:18"><literal type="number" pos:start="15:18" pos:end="15:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:19">orig_height</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:25">/* copy prev frame */</comment>

    <for pos:start="23:5" pos:end="25:65">for<control pos:start="23:8" pos:end="23:31">(<init pos:start="23:9" pos:end="23:14"><expr pos:start="23:9" pos:end="23:13"><name pos:start="23:9" pos:end="23:9">i</name> <operator pos:start="23:11" pos:end="23:11">=</operator> <literal type="number" pos:start="23:13" pos:end="23:13">0</literal></expr>;</init> <condition pos:start="23:16" pos:end="23:26"><expr pos:start="23:16" pos:end="23:25"><name pos:start="23:16" pos:end="23:16">i</name> <operator pos:start="23:18" pos:end="23:18">&lt;</operator> <name pos:start="23:20" pos:end="23:25">height</name></expr>;</condition> <incr pos:start="23:28" pos:end="23:30"><expr pos:start="23:28" pos:end="23:30"><name pos:start="23:28" pos:end="23:28">i</name><operator pos:start="23:29" pos:end="23:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="25:9" pos:end="25:65"><block_content pos:start="25:9" pos:end="25:65">

        <expr_stmt pos:start="25:9" pos:end="25:65"><expr pos:start="25:9" pos:end="25:64"><call pos:start="25:9" pos:end="25:64"><name pos:start="25:9" pos:end="25:14">memcpy</name><argument_list pos:start="25:15" pos:end="25:64">(<argument pos:start="25:16" pos:end="25:36"><expr pos:start="25:16" pos:end="25:36"><name pos:start="25:16" pos:end="25:22">refdata</name> <operator pos:start="25:24" pos:end="25:24">+</operator> <operator pos:start="25:26" pos:end="25:26">(</operator><name pos:start="25:27" pos:end="25:27">i</name> <operator pos:start="25:29" pos:end="25:29">*</operator> <name pos:start="25:31" pos:end="25:35">width</name><operator pos:start="25:36" pos:end="25:36">)</operator></expr></argument>, <argument pos:start="25:39" pos:end="25:56"><expr pos:start="25:39" pos:end="25:56"><name pos:start="25:39" pos:end="25:41">dst</name> <operator pos:start="25:43" pos:end="25:43">+</operator> <operator pos:start="25:45" pos:end="25:45">(</operator><name pos:start="25:46" pos:end="25:46">i</name> <operator pos:start="25:48" pos:end="25:48">*</operator> <name pos:start="25:50" pos:end="25:55">stride</name><operator pos:start="25:56" pos:end="25:56">)</operator></expr></argument>, <argument pos:start="25:59" pos:end="25:63"><expr pos:start="25:59" pos:end="25:63"><name pos:start="25:59" pos:end="25:63">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="29:5" pos:end="29:25"><expr pos:start="29:5" pos:end="29:24"><name pos:start="29:5" pos:end="29:15">orig_height</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <name pos:start="29:19" pos:end="29:24">height</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:13"><expr pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:10">height</name><operator pos:start="31:11" pos:end="31:12">--</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:32"><expr pos:start="33:5" pos:end="33:31"><name pos:start="33:5" pos:end="33:7">dst</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <name pos:start="33:11" pos:end="33:13">dst</name> <operator pos:start="33:15" pos:end="33:15">+</operator> <name pos:start="33:17" pos:end="33:22">height</name> <operator pos:start="33:24" pos:end="33:24">*</operator> <name pos:start="33:26" pos:end="33:31">stride</name></expr>;</expr_stmt>



    <while pos:start="37:5" pos:end="261:5">while <condition pos:start="37:11" pos:end="37:76">(<expr pos:start="37:12" pos:end="37:75"><operator pos:start="37:12" pos:end="37:12">(</operator><call pos:start="37:13" pos:end="37:53"><name pos:start="37:13" pos:end="37:38">bytestream2_get_bytes_left</name><argument_list pos:start="37:39" pos:end="37:53">(<argument pos:start="37:40" pos:end="37:52"><expr pos:start="37:40" pos:end="37:52"><operator pos:start="37:40" pos:end="37:40">&amp;</operator><name pos:start="37:41" pos:end="37:52"><name pos:start="37:41" pos:end="37:44">qctx</name><operator pos:start="37:45" pos:end="37:46">-&gt;</operator><name pos:start="37:47" pos:end="37:52">buffer</name></name></expr></argument>)</argument_list></call> <operator pos:start="37:55" pos:end="37:55">&gt;</operator> <literal type="number" pos:start="37:57" pos:end="37:57">0</literal><operator pos:start="37:58" pos:end="37:58">)</operator> <operator pos:start="37:60" pos:end="37:61">&amp;&amp;</operator> <operator pos:start="37:63" pos:end="37:63">(</operator><name pos:start="37:64" pos:end="37:69">height</name> <operator pos:start="37:71" pos:end="37:72">&gt;=</operator> <literal type="number" pos:start="37:74" pos:end="37:74">0</literal><operator pos:start="37:75" pos:end="37:75">)</operator></expr>)</condition> <block pos:start="37:78" pos:end="261:5">{<block_content pos:start="39:9" pos:end="259:9">

        <expr_stmt pos:start="39:9" pos:end="39:51"><expr pos:start="39:9" pos:end="39:50"><name pos:start="39:9" pos:end="39:12">code</name> <operator pos:start="39:14" pos:end="39:14">=</operator> <call pos:start="39:16" pos:end="39:50"><name pos:start="39:16" pos:end="39:35">bytestream2_get_byte</name><argument_list pos:start="39:36" pos:end="39:50">(<argument pos:start="39:37" pos:end="39:49"><expr pos:start="39:37" pos:end="39:49"><operator pos:start="39:37" pos:end="39:37">&amp;</operator><name pos:start="39:38" pos:end="39:49"><name pos:start="39:38" pos:end="39:41">qctx</name><operator pos:start="39:42" pos:end="39:43">-&gt;</operator><name pos:start="39:44" pos:end="39:49">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="43:9" pos:end="131:9"><if pos:start="43:9" pos:end="131:9">if<condition pos:start="43:11" pos:end="43:17">(<expr pos:start="43:12" pos:end="43:16"><name pos:start="43:12" pos:end="43:16">delta</name></expr>)</condition> <block pos:start="43:19" pos:end="131:9">{<block_content pos:start="47:13" pos:end="129:13">

            <comment type="block" pos:start="45:13" pos:end="45:37">/* motion compensation */</comment>

            <while pos:start="47:13" pos:end="129:13">while<condition pos:start="47:18" pos:end="47:40">(<expr pos:start="47:19" pos:end="47:39"><operator pos:start="47:19" pos:end="47:19">(</operator><name pos:start="47:20" pos:end="47:23">code</name> <operator pos:start="47:25" pos:end="47:25">&amp;</operator> <literal type="number" pos:start="47:27" pos:end="47:30">0xF0</literal><operator pos:start="47:31" pos:end="47:31">)</operator> <operator pos:start="47:33" pos:end="47:34">==</operator> <literal type="number" pos:start="47:36" pos:end="47:39">0xF0</literal></expr>)</condition> <block pos:start="47:42" pos:end="129:13">{<block_content pos:start="49:17" pos:end="127:59">

                <if_stmt pos:start="49:17" pos:end="125:17"><if pos:start="49:17" pos:end="125:17">if<condition pos:start="49:19" pos:end="49:30">(<expr pos:start="49:20" pos:end="49:29"><name pos:start="49:20" pos:end="49:24">delta</name> <operator pos:start="49:26" pos:end="49:27">==</operator> <literal type="number" pos:start="49:29" pos:end="49:29">1</literal></expr>)</condition> <block pos:start="49:32" pos:end="125:17">{<block_content pos:start="51:21" pos:end="123:21">

                    <decl_stmt pos:start="51:21" pos:end="51:31"><decl pos:start="51:21" pos:end="51:30"><type pos:start="51:21" pos:end="51:23"><name pos:start="51:21" pos:end="51:23">int</name></type> <name pos:start="51:25" pos:end="51:30">me_idx</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="53:21" pos:end="53:47"><decl pos:start="53:21" pos:end="53:28"><type pos:start="53:21" pos:end="53:23"><name pos:start="53:21" pos:end="53:23">int</name></type> <name pos:start="53:25" pos:end="53:28">me_w</name></decl>, <decl pos:start="53:31" pos:end="53:34"><type ref="prev" pos:start="53:21" pos:end="53:23"/><name pos:start="53:31" pos:end="53:34">me_h</name></decl>, <decl pos:start="53:37" pos:end="53:40"><type ref="prev" pos:start="53:21" pos:end="53:23"/><name pos:start="53:37" pos:end="53:40">me_x</name></decl>, <decl pos:start="53:43" pos:end="53:46"><type ref="prev" pos:start="53:21" pos:end="53:23"/><name pos:start="53:43" pos:end="53:46">me_y</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="55:21" pos:end="55:38"><decl pos:start="55:21" pos:end="55:37"><type pos:start="55:21" pos:end="55:29"><name pos:start="55:21" pos:end="55:27">uint8_t</name> <modifier pos:start="55:29" pos:end="55:29">*</modifier></type><name pos:start="55:30" pos:end="55:37">me_plane</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="57:21" pos:end="57:34"><decl pos:start="57:21" pos:end="57:28"><type pos:start="57:21" pos:end="57:23"><name pos:start="57:21" pos:end="57:23">int</name></type> <name pos:start="57:25" pos:end="57:28">corr</name></decl>, <decl pos:start="57:31" pos:end="57:33"><type ref="prev" pos:start="57:21" pos:end="57:23"/><name pos:start="57:31" pos:end="57:33">val</name></decl>;</decl_stmt>



                    <comment type="block" pos:start="61:21" pos:end="61:49">/* get block size by index */</comment>

                    <expr_stmt pos:start="63:21" pos:end="63:40"><expr pos:start="63:21" pos:end="63:39"><name pos:start="63:21" pos:end="63:26">me_idx</name> <operator pos:start="63:28" pos:end="63:28">=</operator> <name pos:start="63:30" pos:end="63:33">code</name> <operator pos:start="63:35" pos:end="63:35">&amp;</operator> <literal type="number" pos:start="63:37" pos:end="63:39">0xF</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="65:21" pos:end="65:48"><expr pos:start="65:21" pos:end="65:47"><name pos:start="65:21" pos:end="65:24">me_w</name> <operator pos:start="65:26" pos:end="65:26">=</operator> <name pos:start="65:28" pos:end="65:47"><name pos:start="65:28" pos:end="65:39">qpeg_table_w</name><index pos:start="65:40" pos:end="65:47">[<expr pos:start="65:41" pos:end="65:46"><name pos:start="65:41" pos:end="65:46">me_idx</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="67:21" pos:end="67:48"><expr pos:start="67:21" pos:end="67:47"><name pos:start="67:21" pos:end="67:24">me_h</name> <operator pos:start="67:26" pos:end="67:26">=</operator> <name pos:start="67:28" pos:end="67:47"><name pos:start="67:28" pos:end="67:39">qpeg_table_h</name><index pos:start="67:40" pos:end="67:47">[<expr pos:start="67:41" pos:end="67:46"><name pos:start="67:41" pos:end="67:46">me_idx</name></expr>]</index></name></expr>;</expr_stmt>



                    <comment type="block" pos:start="71:21" pos:end="71:47">/* extract motion vector */</comment>

                    <expr_stmt pos:start="73:21" pos:end="73:63"><expr pos:start="73:21" pos:end="73:62"><name pos:start="73:21" pos:end="73:24">corr</name> <operator pos:start="73:26" pos:end="73:26">=</operator> <call pos:start="73:28" pos:end="73:62"><name pos:start="73:28" pos:end="73:47">bytestream2_get_byte</name><argument_list pos:start="73:48" pos:end="73:62">(<argument pos:start="73:49" pos:end="73:61"><expr pos:start="73:49" pos:end="73:61"><operator pos:start="73:49" pos:end="73:49">&amp;</operator><name pos:start="73:50" pos:end="73:61"><name pos:start="73:50" pos:end="73:53">qctx</name><operator pos:start="73:54" pos:end="73:55">-&gt;</operator><name pos:start="73:56" pos:end="73:61">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="77:21" pos:end="77:36"><expr pos:start="77:21" pos:end="77:35"><name pos:start="77:21" pos:end="77:23">val</name> <operator pos:start="77:25" pos:end="77:25">=</operator> <name pos:start="77:27" pos:end="77:30">corr</name> <operator pos:start="77:32" pos:end="77:33">&gt;&gt;</operator> <literal type="number" pos:start="77:35" pos:end="77:35">4</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="79:21" pos:end="81:34"><if pos:start="79:21" pos:end="81:34">if<condition pos:start="79:23" pos:end="79:31">(<expr pos:start="79:24" pos:end="79:30"><name pos:start="79:24" pos:end="79:26">val</name> <operator pos:start="79:28" pos:end="79:28">&gt;</operator> <literal type="number" pos:start="79:30" pos:end="79:30">7</literal></expr>)</condition><block type="pseudo" pos:start="81:25" pos:end="81:34"><block_content pos:start="81:25" pos:end="81:34">

                        <expr_stmt pos:start="81:25" pos:end="81:34"><expr pos:start="81:25" pos:end="81:33"><name pos:start="81:25" pos:end="81:27">val</name> <operator pos:start="81:29" pos:end="81:30">-=</operator> <literal type="number" pos:start="81:32" pos:end="81:33">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="83:21" pos:end="83:31"><expr pos:start="83:21" pos:end="83:30"><name pos:start="83:21" pos:end="83:24">me_x</name> <operator pos:start="83:26" pos:end="83:26">=</operator> <name pos:start="83:28" pos:end="83:30">val</name></expr>;</expr_stmt>



                    <expr_stmt pos:start="87:21" pos:end="87:37"><expr pos:start="87:21" pos:end="87:36"><name pos:start="87:21" pos:end="87:23">val</name> <operator pos:start="87:25" pos:end="87:25">=</operator> <name pos:start="87:27" pos:end="87:30">corr</name> <operator pos:start="87:32" pos:end="87:32">&amp;</operator> <literal type="number" pos:start="87:34" pos:end="87:36">0xF</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="89:21" pos:end="91:34"><if pos:start="89:21" pos:end="91:34">if<condition pos:start="89:23" pos:end="89:31">(<expr pos:start="89:24" pos:end="89:30"><name pos:start="89:24" pos:end="89:26">val</name> <operator pos:start="89:28" pos:end="89:28">&gt;</operator> <literal type="number" pos:start="89:30" pos:end="89:30">7</literal></expr>)</condition><block type="pseudo" pos:start="91:25" pos:end="91:34"><block_content pos:start="91:25" pos:end="91:34">

                        <expr_stmt pos:start="91:25" pos:end="91:34"><expr pos:start="91:25" pos:end="91:33"><name pos:start="91:25" pos:end="91:27">val</name> <operator pos:start="91:29" pos:end="91:30">-=</operator> <literal type="number" pos:start="91:32" pos:end="91:33">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="93:21" pos:end="93:31"><expr pos:start="93:21" pos:end="93:30"><name pos:start="93:21" pos:end="93:24">me_y</name> <operator pos:start="93:26" pos:end="93:26">=</operator> <name pos:start="93:28" pos:end="93:30">val</name></expr>;</expr_stmt>



                    <comment type="block" pos:start="97:21" pos:end="97:45">/* check motion vector */</comment>

                    <if_stmt pos:start="99:21" pos:end="123:21"><if pos:start="99:21" pos:end="107:71">if <condition pos:start="99:24" pos:end="103:70">(<expr pos:start="99:25" pos:end="103:69"><operator pos:start="99:25" pos:end="99:25">(</operator><name pos:start="99:26" pos:end="99:29">me_x</name> <operator pos:start="99:31" pos:end="99:31">+</operator> <name pos:start="99:33" pos:end="99:38">filled</name> <operator pos:start="99:40" pos:end="99:40">&lt;</operator> <literal type="number" pos:start="99:42" pos:end="99:42">0</literal><operator pos:start="99:43" pos:end="99:43">)</operator> <operator pos:start="99:45" pos:end="99:46">||</operator> <operator pos:start="99:48" pos:end="99:48">(</operator><name pos:start="99:49" pos:end="99:52">me_x</name> <operator pos:start="99:54" pos:end="99:54">+</operator> <name pos:start="99:56" pos:end="99:59">me_w</name> <operator pos:start="99:61" pos:end="99:61">+</operator> <name pos:start="99:63" pos:end="99:68">filled</name> <operator pos:start="99:70" pos:end="99:70">&gt;</operator> <name pos:start="99:72" pos:end="99:76">width</name><operator pos:start="99:77" pos:end="99:77">)</operator> <operator pos:start="99:79" pos:end="99:80">||</operator>

                       <operator pos:start="101:24" pos:end="101:24">(</operator><name pos:start="101:25" pos:end="101:30">height</name> <operator pos:start="101:32" pos:end="101:32">-</operator> <name pos:start="101:34" pos:end="101:37">me_y</name> <operator pos:start="101:39" pos:end="101:39">-</operator> <name pos:start="101:41" pos:end="101:44">me_h</name> <operator pos:start="101:46" pos:end="101:46">&lt;</operator> <literal type="number" pos:start="101:48" pos:end="101:48">0</literal><operator pos:start="101:49" pos:end="101:49">)</operator> <operator pos:start="101:51" pos:end="101:52">||</operator> <operator pos:start="101:54" pos:end="101:54">(</operator><name pos:start="101:55" pos:end="101:60">height</name> <operator pos:start="101:62" pos:end="101:62">-</operator> <name pos:start="101:64" pos:end="101:67">me_y</name> <operator pos:start="101:69" pos:end="101:69">&gt;</operator> <name pos:start="101:71" pos:end="101:81">orig_height</name><operator pos:start="101:82" pos:end="101:82">)</operator> <operator pos:start="101:84" pos:end="101:85">||</operator>

                       <operator pos:start="103:24" pos:end="103:24">(</operator><name pos:start="103:25" pos:end="103:30">filled</name> <operator pos:start="103:32" pos:end="103:32">+</operator> <name pos:start="103:34" pos:end="103:37">me_w</name> <operator pos:start="103:39" pos:end="103:39">&gt;</operator> <name pos:start="103:41" pos:end="103:45">width</name><operator pos:start="103:46" pos:end="103:46">)</operator> <operator pos:start="103:48" pos:end="103:49">||</operator> <operator pos:start="103:51" pos:end="103:51">(</operator><name pos:start="103:52" pos:end="103:57">height</name> <operator pos:start="103:59" pos:end="103:59">-</operator> <name pos:start="103:61" pos:end="103:64">me_h</name> <operator pos:start="103:66" pos:end="103:66">&lt;</operator> <literal type="number" pos:start="103:68" pos:end="103:68">0</literal><operator pos:start="103:69" pos:end="103:69">)</operator></expr>)</condition><block type="pseudo" pos:start="105:25" pos:end="107:71"><block_content pos:start="105:25" pos:end="107:71">

                        <expr_stmt pos:start="105:25" pos:end="107:71"><expr pos:start="105:25" pos:end="107:70"><call pos:start="105:25" pos:end="107:70"><name pos:start="105:25" pos:end="105:30">av_log</name><argument_list pos:start="105:31" pos:end="107:70">(<argument pos:start="105:32" pos:end="105:35"><expr pos:start="105:32" pos:end="105:35"><name pos:start="105:32" pos:end="105:35">NULL</name></expr></argument>, <argument pos:start="105:38" pos:end="105:49"><expr pos:start="105:38" pos:end="105:49"><name pos:start="105:38" pos:end="105:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="105:52" pos:end="105:109"><expr pos:start="105:52" pos:end="105:109"><literal type="string" pos:start="105:52" pos:end="105:109">"Bogus motion vector (%i,%i), block size %ix%i at %i,%i\n"</literal></expr></argument>,

                               <argument pos:start="107:32" pos:end="107:35"><expr pos:start="107:32" pos:end="107:35"><name pos:start="107:32" pos:end="107:35">me_x</name></expr></argument>, <argument pos:start="107:38" pos:end="107:41"><expr pos:start="107:38" pos:end="107:41"><name pos:start="107:38" pos:end="107:41">me_y</name></expr></argument>, <argument pos:start="107:44" pos:end="107:47"><expr pos:start="107:44" pos:end="107:47"><name pos:start="107:44" pos:end="107:47">me_w</name></expr></argument>, <argument pos:start="107:50" pos:end="107:53"><expr pos:start="107:50" pos:end="107:53"><name pos:start="107:50" pos:end="107:53">me_h</name></expr></argument>, <argument pos:start="107:56" pos:end="107:61"><expr pos:start="107:56" pos:end="107:61"><name pos:start="107:56" pos:end="107:61">filled</name></expr></argument>, <argument pos:start="107:64" pos:end="107:69"><expr pos:start="107:64" pos:end="107:69"><name pos:start="107:64" pos:end="107:69">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="109:21" pos:end="123:21">else <block pos:start="109:26" pos:end="123:21">{<block_content pos:start="113:25" pos:end="121:25">

                        <comment type="block" pos:start="111:25" pos:end="111:52">/* do motion compensation */</comment>

                        <expr_stmt pos:start="113:25" pos:end="113:87"><expr pos:start="113:25" pos:end="113:86"><name pos:start="113:25" pos:end="113:32">me_plane</name> <operator pos:start="113:34" pos:end="113:34">=</operator> <name pos:start="113:36" pos:end="113:42">refdata</name> <operator pos:start="113:44" pos:end="113:44">+</operator> <operator pos:start="113:46" pos:end="113:46">(</operator><name pos:start="113:47" pos:end="113:52">filled</name> <operator pos:start="113:54" pos:end="113:54">+</operator> <name pos:start="113:56" pos:end="113:59">me_x</name><operator pos:start="113:60" pos:end="113:60">)</operator> <operator pos:start="113:62" pos:end="113:62">+</operator> <operator pos:start="113:64" pos:end="113:64">(</operator><name pos:start="113:65" pos:end="113:70">height</name> <operator pos:start="113:72" pos:end="113:72">-</operator> <name pos:start="113:74" pos:end="113:77">me_y</name><operator pos:start="113:78" pos:end="113:78">)</operator> <operator pos:start="113:80" pos:end="113:80">*</operator> <name pos:start="113:82" pos:end="113:86">width</name></expr>;</expr_stmt>

                        <for pos:start="115:25" pos:end="121:25">for<control pos:start="115:28" pos:end="115:49">(<init pos:start="115:29" pos:end="115:34"><expr pos:start="115:29" pos:end="115:33"><name pos:start="115:29" pos:end="115:29">j</name> <operator pos:start="115:31" pos:end="115:31">=</operator> <literal type="number" pos:start="115:33" pos:end="115:33">0</literal></expr>;</init> <condition pos:start="115:36" pos:end="115:44"><expr pos:start="115:36" pos:end="115:43"><name pos:start="115:36" pos:end="115:36">j</name> <operator pos:start="115:38" pos:end="115:38">&lt;</operator> <name pos:start="115:40" pos:end="115:43">me_h</name></expr>;</condition> <incr pos:start="115:46" pos:end="115:48"><expr pos:start="115:46" pos:end="115:48"><name pos:start="115:46" pos:end="115:46">j</name><operator pos:start="115:47" pos:end="115:48">++</operator></expr></incr>)</control> <block pos:start="115:51" pos:end="121:25">{<block_content pos:start="117:29" pos:end="119:91">

                            <for pos:start="117:29" pos:end="119:91">for<control pos:start="117:32" pos:end="117:53">(<init pos:start="117:33" pos:end="117:38"><expr pos:start="117:33" pos:end="117:37"><name pos:start="117:33" pos:end="117:33">i</name> <operator pos:start="117:35" pos:end="117:35">=</operator> <literal type="number" pos:start="117:37" pos:end="117:37">0</literal></expr>;</init> <condition pos:start="117:40" pos:end="117:48"><expr pos:start="117:40" pos:end="117:47"><name pos:start="117:40" pos:end="117:40">i</name> <operator pos:start="117:42" pos:end="117:42">&lt;</operator> <name pos:start="117:44" pos:end="117:47">me_w</name></expr>;</condition> <incr pos:start="117:50" pos:end="117:52"><expr pos:start="117:50" pos:end="117:52"><name pos:start="117:50" pos:end="117:50">i</name><operator pos:start="117:51" pos:end="117:52">++</operator></expr></incr>)</control><block type="pseudo" pos:start="119:33" pos:end="119:91"><block_content pos:start="119:33" pos:end="119:91">

                                <expr_stmt pos:start="119:33" pos:end="119:91"><expr pos:start="119:33" pos:end="119:90"><name pos:start="119:33" pos:end="119:62"><name pos:start="119:33" pos:end="119:35">dst</name><index pos:start="119:36" pos:end="119:62">[<expr pos:start="119:37" pos:end="119:61"><name pos:start="119:37" pos:end="119:42">filled</name> <operator pos:start="119:44" pos:end="119:44">+</operator> <name pos:start="119:46" pos:end="119:46">i</name> <operator pos:start="119:48" pos:end="119:48">-</operator> <operator pos:start="119:50" pos:end="119:50">(</operator><name pos:start="119:51" pos:end="119:51">j</name> <operator pos:start="119:53" pos:end="119:53">*</operator> <name pos:start="119:55" pos:end="119:60">stride</name><operator pos:start="119:61" pos:end="119:61">)</operator></expr>]</index></name> <operator pos:start="119:64" pos:end="119:64">=</operator> <name pos:start="119:66" pos:end="119:90"><name pos:start="119:66" pos:end="119:73">me_plane</name><index pos:start="119:74" pos:end="119:90">[<expr pos:start="119:75" pos:end="119:89"><name pos:start="119:75" pos:end="119:75">i</name> <operator pos:start="119:77" pos:end="119:77">-</operator> <operator pos:start="119:79" pos:end="119:79">(</operator><name pos:start="119:80" pos:end="119:80">j</name> <operator pos:start="119:82" pos:end="119:82">*</operator> <name pos:start="119:84" pos:end="119:88">width</name><operator pos:start="119:89" pos:end="119:89">)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></for>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:59"><expr pos:start="127:17" pos:end="127:58"><name pos:start="127:17" pos:end="127:20">code</name> <operator pos:start="127:22" pos:end="127:22">=</operator> <call pos:start="127:24" pos:end="127:58"><name pos:start="127:24" pos:end="127:43">bytestream2_get_byte</name><argument_list pos:start="127:44" pos:end="127:58">(<argument pos:start="127:45" pos:end="127:57"><expr pos:start="127:45" pos:end="127:57"><operator pos:start="127:45" pos:end="127:45">&amp;</operator><name pos:start="127:46" pos:end="127:57"><name pos:start="127:46" pos:end="127:49">qctx</name><operator pos:start="127:50" pos:end="127:51">-&gt;</operator><name pos:start="127:52" pos:end="127:57">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="135:9" pos:end="137:18"><if pos:start="135:9" pos:end="137:18">if<condition pos:start="135:11" pos:end="135:24">(<expr pos:start="135:12" pos:end="135:23"><name pos:start="135:12" pos:end="135:15">code</name> <operator pos:start="135:17" pos:end="135:18">==</operator> <literal type="number" pos:start="135:20" pos:end="135:23">0xE0</literal></expr>)</condition><block type="pseudo" pos:start="137:13" pos:end="137:18"><block_content pos:start="137:13" pos:end="137:18"> <comment type="block" pos:start="135:26" pos:end="135:50">/* end-of-picture code */</comment>

            <break pos:start="137:13" pos:end="137:18">break;</break></block_content></block></if></if_stmt>

        <if_stmt pos:start="139:9" pos:end="259:9"><if pos:start="139:9" pos:end="169:9">if<condition pos:start="139:11" pos:end="139:23">(<expr pos:start="139:12" pos:end="139:22"><name pos:start="139:12" pos:end="139:15">code</name> <operator pos:start="139:17" pos:end="139:17">&gt;</operator> <literal type="number" pos:start="139:19" pos:end="139:22">0xE0</literal></expr>)</condition> <block pos:start="139:25" pos:end="169:9">{<block_content pos:start="141:13" pos:end="167:13"> <comment type="block" pos:start="139:27" pos:end="139:52">/* run code: 0xE1..0xFF */</comment>

            <decl_stmt pos:start="141:13" pos:end="141:18"><decl pos:start="141:13" pos:end="141:17"><type pos:start="141:13" pos:end="141:15"><name pos:start="141:13" pos:end="141:15">int</name></type> <name pos:start="141:17" pos:end="141:17">p</name></decl>;</decl_stmt>



            <expr_stmt pos:start="145:13" pos:end="145:25"><expr pos:start="145:13" pos:end="145:24"><name pos:start="145:13" pos:end="145:16">code</name> <operator pos:start="145:18" pos:end="145:19">&amp;=</operator> <literal type="number" pos:start="145:21" pos:end="145:24">0x1F</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:52"><expr pos:start="147:13" pos:end="147:51"><name pos:start="147:13" pos:end="147:13">p</name> <operator pos:start="147:15" pos:end="147:15">=</operator> <call pos:start="147:17" pos:end="147:51"><name pos:start="147:17" pos:end="147:36">bytestream2_get_byte</name><argument_list pos:start="147:37" pos:end="147:51">(<argument pos:start="147:38" pos:end="147:50"><expr pos:start="147:38" pos:end="147:50"><operator pos:start="147:38" pos:end="147:38">&amp;</operator><name pos:start="147:39" pos:end="147:50"><name pos:start="147:39" pos:end="147:42">qctx</name><operator pos:start="147:43" pos:end="147:44">-&gt;</operator><name pos:start="147:45" pos:end="147:50">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="149:13" pos:end="167:13">for<control pos:start="149:16" pos:end="149:38">(<init pos:start="149:17" pos:end="149:22"><expr pos:start="149:17" pos:end="149:21"><name pos:start="149:17" pos:end="149:17">i</name> <operator pos:start="149:19" pos:end="149:19">=</operator> <literal type="number" pos:start="149:21" pos:end="149:21">0</literal></expr>;</init> <condition pos:start="149:24" pos:end="149:33"><expr pos:start="149:24" pos:end="149:32"><name pos:start="149:24" pos:end="149:24">i</name> <operator pos:start="149:26" pos:end="149:27">&lt;=</operator> <name pos:start="149:29" pos:end="149:32">code</name></expr>;</condition> <incr pos:start="149:35" pos:end="149:37"><expr pos:start="149:35" pos:end="149:37"><name pos:start="149:35" pos:end="149:35">i</name><operator pos:start="149:36" pos:end="149:37">++</operator></expr></incr>)</control> <block pos:start="149:40" pos:end="167:13">{<block_content pos:start="151:17" pos:end="165:17">

                <expr_stmt pos:start="151:17" pos:end="151:34"><expr pos:start="151:17" pos:end="151:33"><name pos:start="151:17" pos:end="151:29"><name pos:start="151:17" pos:end="151:19">dst</name><index pos:start="151:20" pos:end="151:29">[<expr pos:start="151:21" pos:end="151:28"><name pos:start="151:21" pos:end="151:26">filled</name><operator pos:start="151:27" pos:end="151:28">++</operator></expr>]</index></name> <operator pos:start="151:31" pos:end="151:31">=</operator> <name pos:start="151:33" pos:end="151:33">p</name></expr>;</expr_stmt>

                <if_stmt pos:start="153:17" pos:end="165:17"><if pos:start="153:17" pos:end="165:17">if<condition pos:start="153:19" pos:end="153:35">(<expr pos:start="153:20" pos:end="153:34"><name pos:start="153:20" pos:end="153:25">filled</name> <operator pos:start="153:27" pos:end="153:28">&gt;=</operator> <name pos:start="153:30" pos:end="153:34">width</name></expr>)</condition> <block pos:start="153:37" pos:end="165:17">{<block_content pos:start="155:21" pos:end="163:30">

                    <expr_stmt pos:start="155:21" pos:end="155:31"><expr pos:start="155:21" pos:end="155:30"><name pos:start="155:21" pos:end="155:26">filled</name> <operator pos:start="155:28" pos:end="155:28">=</operator> <literal type="number" pos:start="155:30" pos:end="155:30">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="157:21" pos:end="157:34"><expr pos:start="157:21" pos:end="157:33"><name pos:start="157:21" pos:end="157:23">dst</name> <operator pos:start="157:25" pos:end="157:26">-=</operator> <name pos:start="157:28" pos:end="157:33">stride</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="159:21" pos:end="159:29"><expr pos:start="159:21" pos:end="159:28"><name pos:start="159:21" pos:end="159:26">height</name><operator pos:start="159:27" pos:end="159:28">--</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="161:21" pos:end="163:30"><if pos:start="161:21" pos:end="163:30">if <condition pos:start="161:24" pos:end="161:35">(<expr pos:start="161:25" pos:end="161:34"><name pos:start="161:25" pos:end="161:30">height</name> <operator pos:start="161:32" pos:end="161:32">&lt;</operator> <literal type="number" pos:start="161:34" pos:end="161:34">0</literal></expr>)</condition><block type="pseudo" pos:start="163:25" pos:end="163:30"><block_content pos:start="163:25" pos:end="163:30">

                        <break pos:start="163:25" pos:end="163:30">break;</break></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <if type="elseif" pos:start="169:11" pos:end="195:9">else if<condition pos:start="169:18" pos:end="169:31">(<expr pos:start="169:19" pos:end="169:30"><name pos:start="169:19" pos:end="169:22">code</name> <operator pos:start="169:24" pos:end="169:25">&gt;=</operator> <literal type="number" pos:start="169:27" pos:end="169:30">0xC0</literal></expr>)</condition> <block pos:start="169:33" pos:end="195:9">{<block_content pos:start="171:13" pos:end="193:13"> <comment type="block" pos:start="169:35" pos:end="169:61">/* copy code: 0xC0..0xDF */</comment>

            <expr_stmt pos:start="171:13" pos:end="171:25"><expr pos:start="171:13" pos:end="171:24"><name pos:start="171:13" pos:end="171:16">code</name> <operator pos:start="171:18" pos:end="171:19">&amp;=</operator> <literal type="number" pos:start="171:21" pos:end="171:24">0x1F</literal></expr>;</expr_stmt>



            <for pos:start="175:13" pos:end="193:13">for<control pos:start="175:16" pos:end="175:38">(<init pos:start="175:17" pos:end="175:22"><expr pos:start="175:17" pos:end="175:21"><name pos:start="175:17" pos:end="175:17">i</name> <operator pos:start="175:19" pos:end="175:19">=</operator> <literal type="number" pos:start="175:21" pos:end="175:21">0</literal></expr>;</init> <condition pos:start="175:24" pos:end="175:33"><expr pos:start="175:24" pos:end="175:32"><name pos:start="175:24" pos:end="175:24">i</name> <operator pos:start="175:26" pos:end="175:27">&lt;=</operator> <name pos:start="175:29" pos:end="175:32">code</name></expr>;</condition> <incr pos:start="175:35" pos:end="175:37"><expr pos:start="175:35" pos:end="175:37"><name pos:start="175:35" pos:end="175:35">i</name><operator pos:start="175:36" pos:end="175:37">++</operator></expr></incr>)</control> <block pos:start="175:40" pos:end="193:13">{<block_content pos:start="177:17" pos:end="191:17">

                <expr_stmt pos:start="177:17" pos:end="177:68"><expr pos:start="177:17" pos:end="177:67"><name pos:start="177:17" pos:end="177:29"><name pos:start="177:17" pos:end="177:19">dst</name><index pos:start="177:20" pos:end="177:29">[<expr pos:start="177:21" pos:end="177:28"><name pos:start="177:21" pos:end="177:26">filled</name><operator pos:start="177:27" pos:end="177:28">++</operator></expr>]</index></name> <operator pos:start="177:31" pos:end="177:31">=</operator> <call pos:start="177:33" pos:end="177:67"><name pos:start="177:33" pos:end="177:52">bytestream2_get_byte</name><argument_list pos:start="177:53" pos:end="177:67">(<argument pos:start="177:54" pos:end="177:66"><expr pos:start="177:54" pos:end="177:66"><operator pos:start="177:54" pos:end="177:54">&amp;</operator><name pos:start="177:55" pos:end="177:66"><name pos:start="177:55" pos:end="177:58">qctx</name><operator pos:start="177:59" pos:end="177:60">-&gt;</operator><name pos:start="177:61" pos:end="177:66">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="179:17" pos:end="191:17"><if pos:start="179:17" pos:end="191:17">if<condition pos:start="179:19" pos:end="179:35">(<expr pos:start="179:20" pos:end="179:34"><name pos:start="179:20" pos:end="179:25">filled</name> <operator pos:start="179:27" pos:end="179:28">&gt;=</operator> <name pos:start="179:30" pos:end="179:34">width</name></expr>)</condition> <block pos:start="179:37" pos:end="191:17">{<block_content pos:start="181:21" pos:end="189:30">

                    <expr_stmt pos:start="181:21" pos:end="181:31"><expr pos:start="181:21" pos:end="181:30"><name pos:start="181:21" pos:end="181:26">filled</name> <operator pos:start="181:28" pos:end="181:28">=</operator> <literal type="number" pos:start="181:30" pos:end="181:30">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="183:21" pos:end="183:34"><expr pos:start="183:21" pos:end="183:33"><name pos:start="183:21" pos:end="183:23">dst</name> <operator pos:start="183:25" pos:end="183:26">-=</operator> <name pos:start="183:28" pos:end="183:33">stride</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="185:21" pos:end="185:29"><expr pos:start="185:21" pos:end="185:28"><name pos:start="185:21" pos:end="185:26">height</name><operator pos:start="185:27" pos:end="185:28">--</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="187:21" pos:end="189:30"><if pos:start="187:21" pos:end="189:30">if <condition pos:start="187:24" pos:end="187:35">(<expr pos:start="187:25" pos:end="187:34"><name pos:start="187:25" pos:end="187:30">height</name> <operator pos:start="187:32" pos:end="187:32">&lt;</operator> <literal type="number" pos:start="187:34" pos:end="187:34">0</literal></expr>)</condition><block type="pseudo" pos:start="189:25" pos:end="189:30"><block_content pos:start="189:25" pos:end="189:30">

                        <break pos:start="189:25" pos:end="189:30">break;</break></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <if type="elseif" pos:start="195:11" pos:end="235:9">else if<condition pos:start="195:18" pos:end="195:31">(<expr pos:start="195:19" pos:end="195:30"><name pos:start="195:19" pos:end="195:22">code</name> <operator pos:start="195:24" pos:end="195:25">&gt;=</operator> <literal type="number" pos:start="195:27" pos:end="195:30">0x80</literal></expr>)</condition> <block pos:start="195:33" pos:end="235:9">{<block_content pos:start="197:13" pos:end="233:13"> <comment type="block" pos:start="195:35" pos:end="195:61">/* skip code: 0x80..0xBF */</comment>

            <decl_stmt pos:start="197:13" pos:end="197:21"><decl pos:start="197:13" pos:end="197:20"><type pos:start="197:13" pos:end="197:15"><name pos:start="197:13" pos:end="197:15">int</name></type> <name pos:start="197:17" pos:end="197:20">skip</name></decl>;</decl_stmt>



            <expr_stmt pos:start="201:13" pos:end="201:25"><expr pos:start="201:13" pos:end="201:24"><name pos:start="201:13" pos:end="201:16">code</name> <operator pos:start="201:18" pos:end="201:19">&amp;=</operator> <literal type="number" pos:start="201:21" pos:end="201:24">0x3F</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="203:13" pos:end="205:63">/* codes 0x80 and 0x81 are actually escape codes,

               skip value minus constant is in the next byte */</comment>

            <if_stmt pos:start="207:13" pos:end="217:28"><if pos:start="207:13" pos:end="209:65">if<condition pos:start="207:15" pos:end="207:21">(<expr pos:start="207:16" pos:end="207:20"><operator pos:start="207:16" pos:end="207:16">!</operator><name pos:start="207:17" pos:end="207:20">code</name></expr>)</condition><block type="pseudo" pos:start="209:17" pos:end="209:65"><block_content pos:start="209:17" pos:end="209:65">

                <expr_stmt pos:start="209:17" pos:end="209:65"><expr pos:start="209:17" pos:end="209:64"><name pos:start="209:17" pos:end="209:20">skip</name> <operator pos:start="209:22" pos:end="209:22">=</operator> <call pos:start="209:24" pos:end="209:58"><name pos:start="209:24" pos:end="209:43">bytestream2_get_byte</name><argument_list pos:start="209:44" pos:end="209:58">(<argument pos:start="209:45" pos:end="209:57"><expr pos:start="209:45" pos:end="209:57"><operator pos:start="209:45" pos:end="209:45">&amp;</operator><name pos:start="209:46" pos:end="209:57"><name pos:start="209:46" pos:end="209:49">qctx</name><operator pos:start="209:50" pos:end="209:51">-&gt;</operator><name pos:start="209:52" pos:end="209:57">buffer</name></name></expr></argument>)</argument_list></call> <operator pos:start="209:60" pos:end="209:60">+</operator>  <literal type="number" pos:start="209:63" pos:end="209:64">64</literal></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="211:13" pos:end="213:65">else if<condition pos:start="211:20" pos:end="211:30">(<expr pos:start="211:21" pos:end="211:29"><name pos:start="211:21" pos:end="211:24">code</name> <operator pos:start="211:26" pos:end="211:27">==</operator> <literal type="number" pos:start="211:29" pos:end="211:29">1</literal></expr>)</condition><block type="pseudo" pos:start="213:17" pos:end="213:65"><block_content pos:start="213:17" pos:end="213:65">

                <expr_stmt pos:start="213:17" pos:end="213:65"><expr pos:start="213:17" pos:end="213:64"><name pos:start="213:17" pos:end="213:20">skip</name> <operator pos:start="213:22" pos:end="213:22">=</operator> <call pos:start="213:24" pos:end="213:58"><name pos:start="213:24" pos:end="213:43">bytestream2_get_byte</name><argument_list pos:start="213:44" pos:end="213:58">(<argument pos:start="213:45" pos:end="213:57"><expr pos:start="213:45" pos:end="213:57"><operator pos:start="213:45" pos:end="213:45">&amp;</operator><name pos:start="213:46" pos:end="213:57"><name pos:start="213:46" pos:end="213:49">qctx</name><operator pos:start="213:50" pos:end="213:51">-&gt;</operator><name pos:start="213:52" pos:end="213:57">buffer</name></name></expr></argument>)</argument_list></call> <operator pos:start="213:60" pos:end="213:60">+</operator> <literal type="number" pos:start="213:62" pos:end="213:64">320</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="215:13" pos:end="217:28">else<block type="pseudo" pos:start="217:17" pos:end="217:28"><block_content pos:start="217:17" pos:end="217:28">

                <expr_stmt pos:start="217:17" pos:end="217:28"><expr pos:start="217:17" pos:end="217:27"><name pos:start="217:17" pos:end="217:20">skip</name> <operator pos:start="217:22" pos:end="217:22">=</operator> <name pos:start="217:24" pos:end="217:27">code</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:27"><expr pos:start="219:13" pos:end="219:26"><name pos:start="219:13" pos:end="219:18">filled</name> <operator pos:start="219:20" pos:end="219:21">+=</operator> <name pos:start="219:23" pos:end="219:26">skip</name></expr>;</expr_stmt>

            <while pos:start="221:13" pos:end="233:13">while<condition pos:start="221:18" pos:end="221:35">( <expr pos:start="221:20" pos:end="221:34"><name pos:start="221:20" pos:end="221:25">filled</name> <operator pos:start="221:27" pos:end="221:28">&gt;=</operator> <name pos:start="221:30" pos:end="221:34">width</name></expr>)</condition> <block pos:start="221:37" pos:end="233:13">{<block_content pos:start="223:17" pos:end="231:26">

                <expr_stmt pos:start="223:17" pos:end="223:32"><expr pos:start="223:17" pos:end="223:31"><name pos:start="223:17" pos:end="223:22">filled</name> <operator pos:start="223:24" pos:end="223:25">-=</operator> <name pos:start="223:27" pos:end="223:31">width</name></expr>;</expr_stmt>

                <expr_stmt pos:start="225:17" pos:end="225:30"><expr pos:start="225:17" pos:end="225:29"><name pos:start="225:17" pos:end="225:19">dst</name> <operator pos:start="225:21" pos:end="225:22">-=</operator> <name pos:start="225:24" pos:end="225:29">stride</name></expr>;</expr_stmt>

                <expr_stmt pos:start="227:17" pos:end="227:25"><expr pos:start="227:17" pos:end="227:24"><name pos:start="227:17" pos:end="227:22">height</name><operator pos:start="227:23" pos:end="227:24">--</operator></expr>;</expr_stmt>

                <if_stmt pos:start="229:17" pos:end="231:26"><if pos:start="229:17" pos:end="231:26">if<condition pos:start="229:19" pos:end="229:30">(<expr pos:start="229:20" pos:end="229:29"><name pos:start="229:20" pos:end="229:25">height</name> <operator pos:start="229:27" pos:end="229:27">&lt;</operator> <literal type="number" pos:start="229:29" pos:end="229:29">0</literal></expr>)</condition><block type="pseudo" pos:start="231:21" pos:end="231:26"><block_content pos:start="231:21" pos:end="231:26">

                    <break pos:start="231:21" pos:end="231:26">break;</break></block_content></block></if></if_stmt>

            </block_content>}</block></while>

        </block_content>}</block></if> <else pos:start="235:11" pos:end="259:9">else <block pos:start="235:16" pos:end="259:9">{<block_content pos:start="239:13" pos:end="257:13">

            <comment type="block" pos:start="237:13" pos:end="237:53">/* zero code treated as one-pixel skip */</comment>

            <if_stmt pos:start="239:13" pos:end="247:25"><if pos:start="239:13" pos:end="243:13">if<condition pos:start="239:15" pos:end="239:20">(<expr pos:start="239:16" pos:end="239:19"><name pos:start="239:16" pos:end="239:19">code</name></expr>)</condition> <block pos:start="239:22" pos:end="243:13">{<block_content pos:start="241:17" pos:end="241:52">

                <expr_stmt pos:start="241:17" pos:end="241:52"><expr pos:start="241:17" pos:end="241:51"><name pos:start="241:17" pos:end="241:29"><name pos:start="241:17" pos:end="241:19">dst</name><index pos:start="241:20" pos:end="241:29">[<expr pos:start="241:21" pos:end="241:28"><name pos:start="241:21" pos:end="241:26">filled</name><operator pos:start="241:27" pos:end="241:28">++</operator></expr>]</index></name> <operator pos:start="241:31" pos:end="241:31">=</operator> <name pos:start="241:33" pos:end="241:51"><name pos:start="241:33" pos:end="241:38">ctable</name><index pos:start="241:39" pos:end="241:51">[<expr pos:start="241:40" pos:end="241:50"><name pos:start="241:40" pos:end="241:43">code</name> <operator pos:start="241:45" pos:end="241:45">&amp;</operator> <literal type="number" pos:start="241:47" pos:end="241:50">0x7F</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if>

            <else pos:start="245:13" pos:end="247:25">else<block type="pseudo" pos:start="247:17" pos:end="247:25"><block_content pos:start="247:17" pos:end="247:25">

                <expr_stmt pos:start="247:17" pos:end="247:25"><expr pos:start="247:17" pos:end="247:24"><name pos:start="247:17" pos:end="247:22">filled</name><operator pos:start="247:23" pos:end="247:24">++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="249:13" pos:end="257:13"><if pos:start="249:13" pos:end="257:13">if<condition pos:start="249:15" pos:end="249:31">(<expr pos:start="249:16" pos:end="249:30"><name pos:start="249:16" pos:end="249:21">filled</name> <operator pos:start="249:23" pos:end="249:24">&gt;=</operator> <name pos:start="249:26" pos:end="249:30">width</name></expr>)</condition> <block pos:start="249:33" pos:end="257:13">{<block_content pos:start="251:17" pos:end="255:25">

                <expr_stmt pos:start="251:17" pos:end="251:27"><expr pos:start="251:17" pos:end="251:26"><name pos:start="251:17" pos:end="251:22">filled</name> <operator pos:start="251:24" pos:end="251:24">=</operator> <literal type="number" pos:start="251:26" pos:end="251:26">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="253:17" pos:end="253:30"><expr pos:start="253:17" pos:end="253:29"><name pos:start="253:17" pos:end="253:19">dst</name> <operator pos:start="253:21" pos:end="253:22">-=</operator> <name pos:start="253:24" pos:end="253:29">stride</name></expr>;</expr_stmt>

                <expr_stmt pos:start="255:17" pos:end="255:25"><expr pos:start="255:17" pos:end="255:24"><name pos:start="255:17" pos:end="255:22">height</name><operator pos:start="255:23" pos:end="255:24">--</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
