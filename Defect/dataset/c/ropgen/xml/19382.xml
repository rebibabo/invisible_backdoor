<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19382.c" pos:tabs="8"><function pos:start="1:1" pos:end="341:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">encode_frame</name><parameter_list pos:start="1:24" pos:end="3:62">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:60"><decl pos:start="1:48" pos:end="1:60"><type pos:start="1:48" pos:end="1:60"><name pos:start="1:48" pos:end="1:55">AVPacket</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:60">pkt</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:44"><decl pos:start="3:25" pos:end="3:44"><type pos:start="3:25" pos:end="3:44"><specifier pos:start="3:25" pos:end="3:29">const</specifier> <name pos:start="3:31" pos:end="3:37">AVFrame</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:44">frame</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:61"><decl pos:start="3:47" pos:end="3:61"><type pos:start="3:47" pos:end="3:61"><name pos:start="3:47" pos:end="3:49">int</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:61">got_packet</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="341:1">{<block_content pos:start="7:5" pos:end="339:13">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">SgiContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">s</name> <init pos:start="7:19" pos:end="7:36">= <expr pos:start="7:21" pos:end="7:36"><name pos:start="7:21" pos:end="7:36"><name pos:start="7:21" pos:end="7:25">avctx</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:25"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">AVFrame</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier> <specifier pos:start="9:21" pos:end="9:25">const</specifier></type> <name pos:start="9:27" pos:end="9:27">p</name> <init pos:start="9:29" pos:end="9:35">= <expr pos:start="9:31" pos:end="9:35"><name pos:start="9:31" pos:end="9:35">frame</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:18">PutByteContext</name></type> <name pos:start="11:20" pos:end="11:22">pbc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:19">in_buf</name></decl>, <decl pos:start="13:22" pos:end="13:32"><type ref="prev" pos:start="13:5" pos:end="13:13"><modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:32">encode_buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:40"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">x</name></decl>, <decl pos:start="15:12" pos:end="15:12"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:12">y</name></decl>, <decl pos:start="15:15" pos:end="15:15"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:15" pos:end="15:15">z</name></decl>, <decl pos:start="15:18" pos:end="15:23"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:18" pos:end="15:23">length</name></decl>, <decl pos:start="15:26" pos:end="15:34"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:26" pos:end="15:34">tablesize</name></decl>, <decl pos:start="15:37" pos:end="15:39"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:37" pos:end="15:39">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:49"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name></type> <name pos:start="17:18" pos:end="17:22">width</name></decl>, <decl pos:start="17:25" pos:end="17:30"><type ref="prev" pos:start="17:5" pos:end="17:16"/><name pos:start="17:25" pos:end="17:30">height</name></decl>, <decl pos:start="17:33" pos:end="17:37"><type ref="prev" pos:start="17:5" pos:end="17:16"/><name pos:start="17:33" pos:end="17:37">depth</name></decl>, <decl pos:start="17:40" pos:end="17:48"><type ref="prev" pos:start="17:5" pos:end="17:16"/><name pos:start="17:40" pos:end="17:48">dimension</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="24:0"><decl pos:start="19:5" pos:end="19:34"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:16">int</name></type> <name pos:start="19:18" pos:end="19:34">bytes_per_channel</name></decl>, <decl pos:start="19:37" pos:end="19:42"><type ref="prev" pos:start="19:5" pos:end="19:16"/><name pos:start="19:37" pos:end="19:42">pixmax</name></decl>, <decl pos:start="19:45" pos:end="19:50"><type ref="prev" pos:start="19:5" pos:end="19:16"/><name pos:start="19:45" pos:end="19:50">put_be</name></decl>;</decl_stmt>



<cpp:if pos:start="23:1" pos:end="23:22">#<cpp:directive pos:start="23:2" pos:end="23:3">if</cpp:directive> <expr pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:22">FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt pos:start="25:1" pos:end="27:54"><decl pos:start="25:1" pos:end="27:53"><type pos:start="25:1" pos:end="25:31"><name pos:start="25:1" pos:end="25:31">FF_DISABLE_DEPRECATION_WARNINGS</name></type>

    <name pos:start="27:5" pos:end="27:33"><name pos:start="27:5" pos:end="27:9">avctx</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:22">coded_frame</name><operator pos:start="27:23" pos:end="27:24">-&gt;</operator><name pos:start="27:25" pos:end="27:33">pict_type</name></name> <init pos:start="27:35" pos:end="27:53">= <expr pos:start="27:37" pos:end="27:53"><name pos:start="27:37" pos:end="27:53">AV_PICTURE_TYPE_I</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:38"><expr pos:start="29:5" pos:end="29:37"><name pos:start="29:5" pos:end="29:33"><name pos:start="29:5" pos:end="29:9">avctx</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:22">coded_frame</name><operator pos:start="29:23" pos:end="29:24">-&gt;</operator><name pos:start="29:25" pos:end="29:33">key_frame</name></name> <operator pos:start="29:35" pos:end="29:35">=</operator> <literal type="number" pos:start="29:37" pos:end="29:37">1</literal></expr>;</expr_stmt>

<expr_stmt pos:start="31:1" pos:end="39:31"><expr pos:start="31:1" pos:end="39:31"><name pos:start="31:1" pos:end="38:0">FF_ENABLE_DEPRECATION_WARNINGS</name>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>



<cpp:if pos:start="37:1" pos:end="37:21">#<cpp:directive pos:start="37:2" pos:end="37:3">if</cpp:directive> <expr pos:start="37:5" pos:end="37:21"><name pos:start="37:5" pos:end="37:21">FF_API_CODER_TYPE</name></expr></cpp:if>

<name pos:start="39:1" pos:end="39:31">FF_DISABLE_DEPRECATION_WARNINGS</name></expr></expr_stmt>

    <if_stmt pos:start="41:5" pos:end="43:19"><if pos:start="41:5" pos:end="43:19">if <condition pos:start="41:8" pos:end="41:47">(<expr pos:start="41:9" pos:end="41:46"><name pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:13">avctx</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:25">coder_type</name></name> <operator pos:start="41:27" pos:end="41:28">==</operator> <name pos:start="41:30" pos:end="41:46">FF_CODER_TYPE_RAW</name></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:19"><block_content pos:start="43:9" pos:end="43:19">

        <expr_stmt pos:start="43:9" pos:end="43:19"><expr pos:start="43:9" pos:end="43:18"><name pos:start="43:9" pos:end="43:14"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:14">rle</name></name> <operator pos:start="43:16" pos:end="43:16">=</operator> <literal type="number" pos:start="43:18" pos:end="43:18">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt pos:start="45:1" pos:end="51:26"><decl pos:start="45:1" pos:end="51:25"><type pos:start="45:1" pos:end="48:0"><name pos:start="45:1" pos:end="48:0">FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif pos:start="47:1" pos:end="47:6">#<cpp:directive pos:start="47:2" pos:end="47:6">endif</cpp:directive></cpp:endif>



    <name pos:start="51:5" pos:end="51:9">width</name>  <init pos:start="51:12" pos:end="51:25">= <expr pos:start="51:14" pos:end="51:25"><name pos:start="51:14" pos:end="51:25"><name pos:start="51:14" pos:end="51:18">avctx</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:25">width</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:27"><expr pos:start="53:5" pos:end="53:26"><name pos:start="53:5" pos:end="53:10">height</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <name pos:start="53:14" pos:end="53:26"><name pos:start="53:14" pos:end="53:18">avctx</name><operator pos:start="53:19" pos:end="53:20">-&gt;</operator><name pos:start="53:21" pos:end="53:26">height</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:26"><expr pos:start="55:5" pos:end="55:25"><name pos:start="55:5" pos:end="55:21">bytes_per_channel</name> <operator pos:start="55:23" pos:end="55:23">=</operator> <literal type="number" pos:start="55:25" pos:end="55:25">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:18"><expr pos:start="57:5" pos:end="57:17"><name pos:start="57:5" pos:end="57:10">pixmax</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="number" pos:start="57:14" pos:end="57:17">0xFF</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:28"><expr pos:start="59:5" pos:end="59:27"><name pos:start="59:5" pos:end="59:10">put_be</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <name pos:start="59:14" pos:end="59:27">HAVE_BIGENDIAN</name></expr>;</expr_stmt>



    <switch pos:start="63:5" pos:end="141:5">switch <condition pos:start="63:12" pos:end="63:27">(<expr pos:start="63:13" pos:end="63:26"><name pos:start="63:13" pos:end="63:26"><name pos:start="63:13" pos:end="63:17">avctx</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:26">pix_fmt</name></name></expr>)</condition> <block pos:start="63:29" pos:end="141:5">{<block_content pos:start="65:5" pos:end="139:35">

    <case pos:start="65:5" pos:end="65:26">case <expr pos:start="65:10" pos:end="65:25"><name pos:start="65:10" pos:end="65:25">AV_PIX_FMT_GRAY8</name></expr>:</case>

        <expr_stmt pos:start="67:9" pos:end="67:36"><expr pos:start="67:9" pos:end="67:35"><name pos:start="67:9" pos:end="67:17">dimension</name> <operator pos:start="67:19" pos:end="67:19">=</operator> <name pos:start="67:21" pos:end="67:35">SGI_SINGLE_CHAN</name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:34"><expr pos:start="69:9" pos:end="69:33"><name pos:start="69:9" pos:end="69:13">depth</name>     <operator pos:start="69:19" pos:end="69:19">=</operator> <name pos:start="69:21" pos:end="69:33">SGI_GRAYSCALE</name></expr>;</expr_stmt>

        <break pos:start="71:9" pos:end="71:14">break;</break>

    <case pos:start="73:5" pos:end="73:26">case <expr pos:start="73:10" pos:end="73:25"><name pos:start="73:10" pos:end="73:25">AV_PIX_FMT_RGB24</name></expr>:</case>

        <expr_stmt pos:start="75:9" pos:end="75:35"><expr pos:start="75:9" pos:end="75:34"><name pos:start="75:9" pos:end="75:17">dimension</name> <operator pos:start="75:19" pos:end="75:19">=</operator> <name pos:start="75:21" pos:end="75:34">SGI_MULTI_CHAN</name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:28"><expr pos:start="77:9" pos:end="77:27"><name pos:start="77:9" pos:end="77:13">depth</name>     <operator pos:start="77:19" pos:end="77:19">=</operator> <name pos:start="77:21" pos:end="77:27">SGI_RGB</name></expr>;</expr_stmt>

        <break pos:start="79:9" pos:end="79:14">break;</break>

    <case pos:start="81:5" pos:end="81:25">case <expr pos:start="81:10" pos:end="81:24"><name pos:start="81:10" pos:end="81:24">AV_PIX_FMT_RGBA</name></expr>:</case>

        <expr_stmt pos:start="83:9" pos:end="83:35"><expr pos:start="83:9" pos:end="83:34"><name pos:start="83:9" pos:end="83:17">dimension</name> <operator pos:start="83:19" pos:end="83:19">=</operator> <name pos:start="83:21" pos:end="83:34">SGI_MULTI_CHAN</name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:29"><expr pos:start="85:9" pos:end="85:28"><name pos:start="85:9" pos:end="85:13">depth</name>     <operator pos:start="85:19" pos:end="85:19">=</operator> <name pos:start="85:21" pos:end="85:28">SGI_RGBA</name></expr>;</expr_stmt>

        <break pos:start="87:9" pos:end="87:14">break;</break>

    <case pos:start="89:5" pos:end="89:29">case <expr pos:start="89:10" pos:end="89:28"><name pos:start="89:10" pos:end="89:28">AV_PIX_FMT_GRAY16LE</name></expr>:</case>

        <expr_stmt pos:start="91:9" pos:end="91:33"><expr pos:start="91:9" pos:end="91:32"><name pos:start="91:9" pos:end="91:14">put_be</name> <operator pos:start="91:16" pos:end="91:16">=</operator> <operator pos:start="91:18" pos:end="91:18">!</operator><name pos:start="91:19" pos:end="91:32">HAVE_BIGENDIAN</name></expr>;</expr_stmt>

    <case pos:start="93:5" pos:end="93:29">case <expr pos:start="93:10" pos:end="93:28"><name pos:start="93:10" pos:end="93:28">AV_PIX_FMT_GRAY16BE</name></expr>:</case>

        <expr_stmt pos:start="95:9" pos:end="95:30"><expr pos:start="95:9" pos:end="95:29"><name pos:start="95:9" pos:end="95:25">bytes_per_channel</name> <operator pos:start="95:27" pos:end="95:27">=</operator> <literal type="number" pos:start="95:29" pos:end="95:29">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:24"><expr pos:start="97:9" pos:end="97:23"><name pos:start="97:9" pos:end="97:14">pixmax</name> <operator pos:start="97:16" pos:end="97:16">=</operator> <literal type="number" pos:start="97:18" pos:end="97:23">0xFFFF</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:36"><expr pos:start="99:9" pos:end="99:35"><name pos:start="99:9" pos:end="99:17">dimension</name> <operator pos:start="99:19" pos:end="99:19">=</operator> <name pos:start="99:21" pos:end="99:35">SGI_SINGLE_CHAN</name></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:34"><expr pos:start="101:9" pos:end="101:33"><name pos:start="101:9" pos:end="101:13">depth</name>     <operator pos:start="101:19" pos:end="101:19">=</operator> <name pos:start="101:21" pos:end="101:33">SGI_GRAYSCALE</name></expr>;</expr_stmt>

        <break pos:start="103:9" pos:end="103:14">break;</break>

    <case pos:start="105:5" pos:end="105:28">case <expr pos:start="105:10" pos:end="105:27"><name pos:start="105:10" pos:end="105:27">AV_PIX_FMT_RGB48LE</name></expr>:</case>

        <expr_stmt pos:start="107:9" pos:end="107:33"><expr pos:start="107:9" pos:end="107:32"><name pos:start="107:9" pos:end="107:14">put_be</name> <operator pos:start="107:16" pos:end="107:16">=</operator> <operator pos:start="107:18" pos:end="107:18">!</operator><name pos:start="107:19" pos:end="107:32">HAVE_BIGENDIAN</name></expr>;</expr_stmt>

    <case pos:start="109:5" pos:end="109:28">case <expr pos:start="109:10" pos:end="109:27"><name pos:start="109:10" pos:end="109:27">AV_PIX_FMT_RGB48BE</name></expr>:</case>

        <expr_stmt pos:start="111:9" pos:end="111:30"><expr pos:start="111:9" pos:end="111:29"><name pos:start="111:9" pos:end="111:25">bytes_per_channel</name> <operator pos:start="111:27" pos:end="111:27">=</operator> <literal type="number" pos:start="111:29" pos:end="111:29">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:24"><expr pos:start="113:9" pos:end="113:23"><name pos:start="113:9" pos:end="113:14">pixmax</name> <operator pos:start="113:16" pos:end="113:16">=</operator> <literal type="number" pos:start="113:18" pos:end="113:23">0xFFFF</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:35"><expr pos:start="115:9" pos:end="115:34"><name pos:start="115:9" pos:end="115:17">dimension</name> <operator pos:start="115:19" pos:end="115:19">=</operator> <name pos:start="115:21" pos:end="115:34">SGI_MULTI_CHAN</name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:28"><expr pos:start="117:9" pos:end="117:27"><name pos:start="117:9" pos:end="117:13">depth</name>     <operator pos:start="117:19" pos:end="117:19">=</operator> <name pos:start="117:21" pos:end="117:27">SGI_RGB</name></expr>;</expr_stmt>

        <break pos:start="119:9" pos:end="119:14">break;</break>

    <case pos:start="121:5" pos:end="121:29">case <expr pos:start="121:10" pos:end="121:28"><name pos:start="121:10" pos:end="121:28">AV_PIX_FMT_RGBA64LE</name></expr>:</case>

        <expr_stmt pos:start="123:9" pos:end="123:33"><expr pos:start="123:9" pos:end="123:32"><name pos:start="123:9" pos:end="123:14">put_be</name> <operator pos:start="123:16" pos:end="123:16">=</operator> <operator pos:start="123:18" pos:end="123:18">!</operator><name pos:start="123:19" pos:end="123:32">HAVE_BIGENDIAN</name></expr>;</expr_stmt>

    <case pos:start="125:5" pos:end="125:29">case <expr pos:start="125:10" pos:end="125:28"><name pos:start="125:10" pos:end="125:28">AV_PIX_FMT_RGBA64BE</name></expr>:</case>

        <expr_stmt pos:start="127:9" pos:end="127:30"><expr pos:start="127:9" pos:end="127:29"><name pos:start="127:9" pos:end="127:25">bytes_per_channel</name> <operator pos:start="127:27" pos:end="127:27">=</operator> <literal type="number" pos:start="127:29" pos:end="127:29">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:24"><expr pos:start="129:9" pos:end="129:23"><name pos:start="129:9" pos:end="129:14">pixmax</name> <operator pos:start="129:16" pos:end="129:16">=</operator> <literal type="number" pos:start="129:18" pos:end="129:23">0xFFFF</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:35"><expr pos:start="131:9" pos:end="131:34"><name pos:start="131:9" pos:end="131:17">dimension</name> <operator pos:start="131:19" pos:end="131:19">=</operator> <name pos:start="131:21" pos:end="131:34">SGI_MULTI_CHAN</name></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:29"><expr pos:start="133:9" pos:end="133:28"><name pos:start="133:9" pos:end="133:13">depth</name>     <operator pos:start="133:19" pos:end="133:19">=</operator> <name pos:start="133:21" pos:end="133:28">SGI_RGBA</name></expr>;</expr_stmt>

        <break pos:start="135:9" pos:end="135:14">break;</break>

    <default pos:start="137:5" pos:end="137:12">default:</default>

        <return pos:start="139:9" pos:end="139:35">return <expr pos:start="139:16" pos:end="139:34"><name pos:start="139:16" pos:end="139:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="145:5" pos:end="145:35"><expr pos:start="145:5" pos:end="145:34"><name pos:start="145:5" pos:end="145:13">tablesize</name> <operator pos:start="145:15" pos:end="145:15">=</operator> <name pos:start="145:17" pos:end="145:21">depth</name> <operator pos:start="145:23" pos:end="145:23">*</operator> <name pos:start="145:25" pos:end="145:30">height</name> <operator pos:start="145:32" pos:end="145:32">*</operator> <literal type="number" pos:start="145:34" pos:end="145:34">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:29"><expr pos:start="147:5" pos:end="147:28"><name pos:start="147:5" pos:end="147:10">length</name> <operator pos:start="147:12" pos:end="147:12">=</operator> <name pos:start="147:14" pos:end="147:28">SGI_HEADER_SIZE</name></expr>;</expr_stmt>

    <if_stmt pos:start="149:5" pos:end="155:67"><if pos:start="149:5" pos:end="151:41">if <condition pos:start="149:8" pos:end="149:16">(<expr pos:start="149:9" pos:end="149:15"><operator pos:start="149:9" pos:end="149:9">!</operator><name pos:start="149:10" pos:end="149:15"><name pos:start="149:10" pos:end="149:10">s</name><operator pos:start="149:11" pos:end="149:12">-&gt;</operator><name pos:start="149:13" pos:end="149:15">rle</name></name></expr>)</condition><block type="pseudo" pos:start="151:9" pos:end="151:41"><block_content pos:start="151:9" pos:end="151:41">

        <expr_stmt pos:start="151:9" pos:end="151:41"><expr pos:start="151:9" pos:end="151:40"><name pos:start="151:9" pos:end="151:14">length</name> <operator pos:start="151:16" pos:end="151:17">+=</operator> <name pos:start="151:19" pos:end="151:23">depth</name> <operator pos:start="151:25" pos:end="151:25">*</operator> <name pos:start="151:27" pos:end="151:32">height</name> <operator pos:start="151:34" pos:end="151:34">*</operator> <name pos:start="151:36" pos:end="151:40">width</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="153:5" pos:end="155:67">else<block type="pseudo" pos:start="155:9" pos:end="155:67"><block_content pos:start="155:9" pos:end="155:67"> <comment type="line" pos:start="153:10" pos:end="153:69">// assume sgi_rle_encode() produces at most 2x size of input</comment>

        <expr_stmt pos:start="155:9" pos:end="155:67"><expr pos:start="155:9" pos:end="155:66"><name pos:start="155:9" pos:end="155:14">length</name> <operator pos:start="155:16" pos:end="155:17">+=</operator> <name pos:start="155:19" pos:end="155:27">tablesize</name> <operator pos:start="155:29" pos:end="155:29">*</operator> <literal type="number" pos:start="155:31" pos:end="155:33">2</literal> <operator pos:start="155:33" pos:end="155:33">+</operator> <name pos:start="155:35" pos:end="155:39">depth</name> <operator pos:start="155:41" pos:end="155:41">*</operator> <name pos:start="155:43" pos:end="155:48">height</name> <operator pos:start="155:50" pos:end="155:50">*</operator> <operator pos:start="155:52" pos:end="155:52">(</operator><literal type="number" pos:start="155:53" pos:end="155:53">2</literal> <operator pos:start="155:55" pos:end="155:55">*</operator> <name pos:start="155:57" pos:end="155:61">width</name> <operator pos:start="155:63" pos:end="155:63">+</operator> <literal type="number" pos:start="155:65" pos:end="155:65">1</literal><operator pos:start="155:66" pos:end="155:66">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="159:5" pos:end="165:5"><if pos:start="159:5" pos:end="165:5">if <condition pos:start="159:8" pos:end="159:69">(<expr pos:start="159:9" pos:end="159:68"><operator pos:start="159:9" pos:end="159:9">(</operator><name pos:start="159:10" pos:end="159:12">ret</name> <operator pos:start="159:14" pos:end="159:14">=</operator> <call pos:start="159:16" pos:end="159:63"><name pos:start="159:16" pos:end="159:30">ff_alloc_packet</name><argument_list pos:start="159:31" pos:end="159:63">(<argument pos:start="159:32" pos:end="159:34"><expr pos:start="159:32" pos:end="159:34"><name pos:start="159:32" pos:end="159:34">pkt</name></expr></argument>, <argument pos:start="159:37" pos:end="159:62"><expr pos:start="159:37" pos:end="159:62"><name pos:start="159:37" pos:end="159:53">bytes_per_channel</name> <operator pos:start="159:55" pos:end="159:55">*</operator> <name pos:start="159:57" pos:end="159:62">length</name></expr></argument>)</argument_list></call><operator pos:start="159:64" pos:end="159:64">)</operator> <operator pos:start="159:66" pos:end="159:66">&lt;</operator> <literal type="number" pos:start="159:68" pos:end="159:68">0</literal></expr>)</condition> <block pos:start="159:71" pos:end="165:5">{<block_content pos:start="161:9" pos:end="163:19">

        <expr_stmt pos:start="161:9" pos:end="161:89"><expr pos:start="161:9" pos:end="161:88"><call pos:start="161:9" pos:end="161:88"><name pos:start="161:9" pos:end="161:14">av_log</name><argument_list pos:start="161:15" pos:end="161:88">(<argument pos:start="161:16" pos:end="161:20"><expr pos:start="161:16" pos:end="161:20"><name pos:start="161:16" pos:end="161:20">avctx</name></expr></argument>, <argument pos:start="161:23" pos:end="161:34"><expr pos:start="161:23" pos:end="161:34"><name pos:start="161:23" pos:end="161:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="161:37" pos:end="161:79"><expr pos:start="161:37" pos:end="161:79"><literal type="string" pos:start="161:37" pos:end="161:79">"Error getting output packet of size %d.\n"</literal></expr></argument>, <argument pos:start="161:82" pos:end="161:87"><expr pos:start="161:82" pos:end="161:87"><name pos:start="161:82" pos:end="161:87">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="163:9" pos:end="163:19">return <expr pos:start="163:16" pos:end="163:18"><name pos:start="163:16" pos:end="163:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="169:5" pos:end="169:56"><expr pos:start="169:5" pos:end="169:55"><call pos:start="169:5" pos:end="169:55"><name pos:start="169:5" pos:end="169:27">bytestream2_init_writer</name><argument_list pos:start="169:28" pos:end="169:55">(<argument pos:start="169:29" pos:end="169:32"><expr pos:start="169:29" pos:end="169:32"><operator pos:start="169:29" pos:end="169:29">&amp;</operator><name pos:start="169:30" pos:end="169:32">pbc</name></expr></argument>, <argument pos:start="169:35" pos:end="169:43"><expr pos:start="169:35" pos:end="169:43"><name pos:start="169:35" pos:end="169:43"><name pos:start="169:35" pos:end="169:37">pkt</name><operator pos:start="169:38" pos:end="169:39">-&gt;</operator><name pos:start="169:40" pos:end="169:43">data</name></name></expr></argument>, <argument pos:start="169:46" pos:end="169:54"><expr pos:start="169:46" pos:end="169:54"><name pos:start="169:46" pos:end="169:54"><name pos:start="169:46" pos:end="169:48">pkt</name><operator pos:start="169:49" pos:end="169:50">-&gt;</operator><name pos:start="169:51" pos:end="169:54">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="173:5" pos:end="173:24">/* Encode header. */</comment>

    <expr_stmt pos:start="175:5" pos:end="175:42"><expr pos:start="175:5" pos:end="175:41"><call pos:start="175:5" pos:end="175:41"><name pos:start="175:5" pos:end="175:24">bytestream2_put_be16</name><argument_list pos:start="175:25" pos:end="175:41">(<argument pos:start="175:26" pos:end="175:29"><expr pos:start="175:26" pos:end="175:29"><operator pos:start="175:26" pos:end="175:26">&amp;</operator><name pos:start="175:27" pos:end="175:29">pbc</name></expr></argument>, <argument pos:start="175:32" pos:end="175:40"><expr pos:start="175:32" pos:end="175:40"><name pos:start="175:32" pos:end="175:40">SGI_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:39"><expr pos:start="177:5" pos:end="177:38"><call pos:start="177:5" pos:end="177:38"><name pos:start="177:5" pos:end="177:24">bytestream2_put_byte</name><argument_list pos:start="177:25" pos:end="177:38">(<argument pos:start="177:26" pos:end="177:29"><expr pos:start="177:26" pos:end="177:29"><operator pos:start="177:26" pos:end="177:26">&amp;</operator><name pos:start="177:27" pos:end="177:29">pbc</name></expr></argument>, <argument pos:start="177:32" pos:end="177:37"><expr pos:start="177:32" pos:end="177:37"><name pos:start="177:32" pos:end="177:37"><name pos:start="177:32" pos:end="177:32">s</name><operator pos:start="177:33" pos:end="177:34">-&gt;</operator><name pos:start="177:35" pos:end="177:37">rle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="177:41" pos:end="177:64">/* RLE 1 - VERBATIM 0 */</comment>

    <expr_stmt pos:start="179:5" pos:end="179:50"><expr pos:start="179:5" pos:end="179:49"><call pos:start="179:5" pos:end="179:49"><name pos:start="179:5" pos:end="179:24">bytestream2_put_byte</name><argument_list pos:start="179:25" pos:end="179:49">(<argument pos:start="179:26" pos:end="179:29"><expr pos:start="179:26" pos:end="179:29"><operator pos:start="179:26" pos:end="179:26">&amp;</operator><name pos:start="179:27" pos:end="179:29">pbc</name></expr></argument>, <argument pos:start="179:32" pos:end="179:48"><expr pos:start="179:32" pos:end="179:48"><name pos:start="179:32" pos:end="179:48">bytes_per_channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:42"><expr pos:start="181:5" pos:end="181:41"><call pos:start="181:5" pos:end="181:41"><name pos:start="181:5" pos:end="181:24">bytestream2_put_be16</name><argument_list pos:start="181:25" pos:end="181:41">(<argument pos:start="181:26" pos:end="181:29"><expr pos:start="181:26" pos:end="181:29"><operator pos:start="181:26" pos:end="181:26">&amp;</operator><name pos:start="181:27" pos:end="181:29">pbc</name></expr></argument>, <argument pos:start="181:32" pos:end="181:40"><expr pos:start="181:32" pos:end="181:40"><name pos:start="181:32" pos:end="181:40">dimension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:38"><expr pos:start="183:5" pos:end="183:37"><call pos:start="183:5" pos:end="183:37"><name pos:start="183:5" pos:end="183:24">bytestream2_put_be16</name><argument_list pos:start="183:25" pos:end="183:37">(<argument pos:start="183:26" pos:end="183:29"><expr pos:start="183:26" pos:end="183:29"><operator pos:start="183:26" pos:end="183:26">&amp;</operator><name pos:start="183:27" pos:end="183:29">pbc</name></expr></argument>, <argument pos:start="183:32" pos:end="183:36"><expr pos:start="183:32" pos:end="183:36"><name pos:start="183:32" pos:end="183:36">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:39"><expr pos:start="185:5" pos:end="185:38"><call pos:start="185:5" pos:end="185:38"><name pos:start="185:5" pos:end="185:24">bytestream2_put_be16</name><argument_list pos:start="185:25" pos:end="185:38">(<argument pos:start="185:26" pos:end="185:29"><expr pos:start="185:26" pos:end="185:29"><operator pos:start="185:26" pos:end="185:26">&amp;</operator><name pos:start="185:27" pos:end="185:29">pbc</name></expr></argument>, <argument pos:start="185:32" pos:end="185:37"><expr pos:start="185:32" pos:end="185:37"><name pos:start="185:32" pos:end="185:37">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:38"><expr pos:start="187:5" pos:end="187:37"><call pos:start="187:5" pos:end="187:37"><name pos:start="187:5" pos:end="187:24">bytestream2_put_be16</name><argument_list pos:start="187:25" pos:end="187:37">(<argument pos:start="187:26" pos:end="187:29"><expr pos:start="187:26" pos:end="187:29"><operator pos:start="187:26" pos:end="187:26">&amp;</operator><name pos:start="187:27" pos:end="187:29">pbc</name></expr></argument>, <argument pos:start="187:32" pos:end="187:36"><expr pos:start="187:32" pos:end="187:36"><name pos:start="187:32" pos:end="187:36">depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="191:5" pos:end="191:35"><expr pos:start="191:5" pos:end="191:34"><call pos:start="191:5" pos:end="191:34"><name pos:start="191:5" pos:end="191:24">bytestream2_put_be32</name><argument_list pos:start="191:25" pos:end="191:34">(<argument pos:start="191:26" pos:end="191:29"><expr pos:start="191:26" pos:end="191:29"><operator pos:start="191:26" pos:end="191:26">&amp;</operator><name pos:start="191:27" pos:end="191:29">pbc</name></expr></argument>, <argument pos:start="191:32" pos:end="191:33"><expr pos:start="191:32" pos:end="191:33"><literal type="number" pos:start="191:32" pos:end="191:33">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="191:37" pos:end="191:48">/* pixmin */</comment>

    <expr_stmt pos:start="193:5" pos:end="193:39"><expr pos:start="193:5" pos:end="193:38"><call pos:start="193:5" pos:end="193:38"><name pos:start="193:5" pos:end="193:24">bytestream2_put_be32</name><argument_list pos:start="193:25" pos:end="193:38">(<argument pos:start="193:26" pos:end="193:29"><expr pos:start="193:26" pos:end="193:29"><operator pos:start="193:26" pos:end="193:26">&amp;</operator><name pos:start="193:27" pos:end="193:29">pbc</name></expr></argument>, <argument pos:start="193:32" pos:end="193:37"><expr pos:start="193:32" pos:end="193:37"><name pos:start="193:32" pos:end="193:37">pixmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:35"><expr pos:start="195:5" pos:end="195:34"><call pos:start="195:5" pos:end="195:34"><name pos:start="195:5" pos:end="195:24">bytestream2_put_be32</name><argument_list pos:start="195:25" pos:end="195:34">(<argument pos:start="195:26" pos:end="195:29"><expr pos:start="195:26" pos:end="195:29"><operator pos:start="195:26" pos:end="195:26">&amp;</operator><name pos:start="195:27" pos:end="195:29">pbc</name></expr></argument>, <argument pos:start="195:32" pos:end="195:33"><expr pos:start="195:32" pos:end="195:33"><literal type="number" pos:start="195:32" pos:end="195:33">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="195:37" pos:end="195:47">/* dummy */</comment>



    <comment type="block" pos:start="199:5" pos:end="199:14">/* name */</comment>

    <expr_stmt pos:start="201:5" pos:end="201:33"><expr pos:start="201:5" pos:end="201:32"><call pos:start="201:5" pos:end="201:32"><name pos:start="201:5" pos:end="201:22">bytestream2_skip_p</name><argument_list pos:start="201:23" pos:end="201:32">(<argument pos:start="201:24" pos:end="201:27"><expr pos:start="201:24" pos:end="201:27"><operator pos:start="201:24" pos:end="201:24">&amp;</operator><name pos:start="201:25" pos:end="201:27">pbc</name></expr></argument>, <argument pos:start="201:30" pos:end="201:31"><expr pos:start="201:30" pos:end="201:31"><literal type="number" pos:start="201:30" pos:end="201:31">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="205:5" pos:end="205:18">/* colormap */</comment>

    <expr_stmt pos:start="207:5" pos:end="207:35"><expr pos:start="207:5" pos:end="207:34"><call pos:start="207:5" pos:end="207:34"><name pos:start="207:5" pos:end="207:24">bytestream2_put_be32</name><argument_list pos:start="207:25" pos:end="207:34">(<argument pos:start="207:26" pos:end="207:29"><expr pos:start="207:26" pos:end="207:29"><operator pos:start="207:26" pos:end="207:26">&amp;</operator><name pos:start="207:27" pos:end="207:29">pbc</name></expr></argument>, <argument pos:start="207:32" pos:end="207:33"><expr pos:start="207:32" pos:end="207:33"><literal type="number" pos:start="207:32" pos:end="207:33">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="211:5" pos:end="211:52">/* The rest of the 512 byte header is unused. */</comment>

    <expr_stmt pos:start="213:5" pos:end="213:34"><expr pos:start="213:5" pos:end="213:33"><call pos:start="213:5" pos:end="213:33"><name pos:start="213:5" pos:end="213:22">bytestream2_skip_p</name><argument_list pos:start="213:23" pos:end="213:33">(<argument pos:start="213:24" pos:end="213:27"><expr pos:start="213:24" pos:end="213:27"><operator pos:start="213:24" pos:end="213:24">&amp;</operator><name pos:start="213:25" pos:end="213:27">pbc</name></expr></argument>, <argument pos:start="213:30" pos:end="213:32"><expr pos:start="213:30" pos:end="213:32"><literal type="number" pos:start="213:30" pos:end="213:32">404</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="217:5" pos:end="325:5"><if pos:start="217:5" pos:end="291:5">if <condition pos:start="217:8" pos:end="217:15">(<expr pos:start="217:9" pos:end="217:14"><name pos:start="217:9" pos:end="217:14"><name pos:start="217:9" pos:end="217:9">s</name><operator pos:start="217:10" pos:end="217:11">-&gt;</operator><name pos:start="217:12" pos:end="217:14">rle</name></name></expr>)</condition> <block pos:start="217:17" pos:end="291:5">{<block_content pos:start="219:9" pos:end="289:28">

        <decl_stmt pos:start="219:9" pos:end="219:46"><decl pos:start="219:9" pos:end="219:33"><type pos:start="219:9" pos:end="219:22"><name pos:start="219:9" pos:end="219:22">PutByteContext</name></type> <name pos:start="219:24" pos:end="219:33">taboff_pcb</name></decl>, <decl pos:start="219:36" pos:end="219:45"><type ref="prev" pos:start="219:9" pos:end="219:22"/><name pos:start="219:36" pos:end="219:45">tablen_pcb</name></decl>;</decl_stmt>



        <comment type="block" pos:start="223:9" pos:end="223:36">/* Skip RLE offset table. */</comment>

        <expr_stmt pos:start="225:9" pos:end="225:68"><expr pos:start="225:9" pos:end="225:67"><call pos:start="225:9" pos:end="225:67"><name pos:start="225:9" pos:end="225:31">bytestream2_init_writer</name><argument_list pos:start="225:32" pos:end="225:67">(<argument pos:start="225:33" pos:end="225:43"><expr pos:start="225:33" pos:end="225:43"><operator pos:start="225:33" pos:end="225:33">&amp;</operator><name pos:start="225:34" pos:end="225:43">taboff_pcb</name></expr></argument>, <argument pos:start="225:46" pos:end="225:55"><expr pos:start="225:46" pos:end="225:55"><name pos:start="225:46" pos:end="225:55"><name pos:start="225:46" pos:end="225:48">pbc</name><operator pos:start="225:49" pos:end="225:49">.</operator><name pos:start="225:50" pos:end="225:55">buffer</name></name></expr></argument>, <argument pos:start="225:58" pos:end="225:66"><expr pos:start="225:58" pos:end="225:66"><name pos:start="225:58" pos:end="225:66">tablesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:44"><expr pos:start="227:9" pos:end="227:43"><call pos:start="227:9" pos:end="227:43"><name pos:start="227:9" pos:end="227:26">bytestream2_skip_p</name><argument_list pos:start="227:27" pos:end="227:43">(<argument pos:start="227:28" pos:end="227:31"><expr pos:start="227:28" pos:end="227:31"><operator pos:start="227:28" pos:end="227:28">&amp;</operator><name pos:start="227:29" pos:end="227:31">pbc</name></expr></argument>, <argument pos:start="227:34" pos:end="227:42"><expr pos:start="227:34" pos:end="227:42"><name pos:start="227:34" pos:end="227:42">tablesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="231:9" pos:end="231:36">/* Skip RLE length table. */</comment>

        <expr_stmt pos:start="233:9" pos:end="233:68"><expr pos:start="233:9" pos:end="233:67"><call pos:start="233:9" pos:end="233:67"><name pos:start="233:9" pos:end="233:31">bytestream2_init_writer</name><argument_list pos:start="233:32" pos:end="233:67">(<argument pos:start="233:33" pos:end="233:43"><expr pos:start="233:33" pos:end="233:43"><operator pos:start="233:33" pos:end="233:33">&amp;</operator><name pos:start="233:34" pos:end="233:43">tablen_pcb</name></expr></argument>, <argument pos:start="233:46" pos:end="233:55"><expr pos:start="233:46" pos:end="233:55"><name pos:start="233:46" pos:end="233:55"><name pos:start="233:46" pos:end="233:48">pbc</name><operator pos:start="233:49" pos:end="233:49">.</operator><name pos:start="233:50" pos:end="233:55">buffer</name></name></expr></argument>, <argument pos:start="233:58" pos:end="233:66"><expr pos:start="233:58" pos:end="233:66"><name pos:start="233:58" pos:end="233:66">tablesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:44"><expr pos:start="235:9" pos:end="235:43"><call pos:start="235:9" pos:end="235:43"><name pos:start="235:9" pos:end="235:26">bytestream2_skip_p</name><argument_list pos:start="235:27" pos:end="235:43">(<argument pos:start="235:28" pos:end="235:31"><expr pos:start="235:28" pos:end="235:31"><operator pos:start="235:28" pos:end="235:28">&amp;</operator><name pos:start="235:29" pos:end="235:31">pbc</name></expr></argument>, <argument pos:start="235:34" pos:end="235:42"><expr pos:start="235:34" pos:end="235:42"><name pos:start="235:34" pos:end="235:42">tablesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="239:9" pos:end="239:54">/* Make an intermediate consecutive buffer. */</comment>

        <if_stmt pos:start="241:9" pos:end="243:35"><if pos:start="241:9" pos:end="243:35">if <condition pos:start="241:12" pos:end="241:65">(<expr pos:start="241:13" pos:end="241:64"><operator pos:start="241:13" pos:end="241:13">!</operator><operator pos:start="241:14" pos:end="241:14">(</operator><name pos:start="241:15" pos:end="241:24">encode_buf</name> <operator pos:start="241:26" pos:end="241:26">=</operator> <call pos:start="241:28" pos:end="241:63"><name pos:start="241:28" pos:end="241:36">av_malloc</name><argument_list pos:start="241:37" pos:end="241:63">(<argument pos:start="241:38" pos:end="241:62"><expr pos:start="241:38" pos:end="241:62"><name pos:start="241:38" pos:end="241:42">width</name> <operator pos:start="241:44" pos:end="241:44">*</operator> <name pos:start="241:46" pos:end="241:62">bytes_per_channel</name></expr></argument>)</argument_list></call><operator pos:start="241:64" pos:end="241:64">)</operator></expr>)</condition><block type="pseudo" pos:start="243:13" pos:end="243:35"><block_content pos:start="243:13" pos:end="243:35">

            <return pos:start="243:13" pos:end="243:35">return <expr pos:start="243:20" pos:end="243:34"><call pos:start="243:20" pos:end="243:34"><name pos:start="243:20" pos:end="243:26">AVERROR</name><argument_list pos:start="243:27" pos:end="243:34">(<argument pos:start="243:28" pos:end="243:33"><expr pos:start="243:28" pos:end="243:33"><name pos:start="243:28" pos:end="243:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



        <for pos:start="247:9" pos:end="285:9">for <control pos:start="247:13" pos:end="247:35">(<init pos:start="247:14" pos:end="247:19"><expr pos:start="247:14" pos:end="247:18"><name pos:start="247:14" pos:end="247:14">z</name> <operator pos:start="247:16" pos:end="247:16">=</operator> <literal type="number" pos:start="247:18" pos:end="247:18">0</literal></expr>;</init> <condition pos:start="247:21" pos:end="247:30"><expr pos:start="247:21" pos:end="247:29"><name pos:start="247:21" pos:end="247:21">z</name> <operator pos:start="247:23" pos:end="247:23">&lt;</operator> <name pos:start="247:25" pos:end="247:29">depth</name></expr>;</condition> <incr pos:start="247:32" pos:end="247:34"><expr pos:start="247:32" pos:end="247:34"><name pos:start="247:32" pos:end="247:32">z</name><operator pos:start="247:33" pos:end="247:34">++</operator></expr></incr>)</control> <block pos:start="247:37" pos:end="285:9">{<block_content pos:start="249:13" pos:end="283:13">

            <expr_stmt pos:start="249:13" pos:end="249:88"><expr pos:start="249:13" pos:end="249:87"><name pos:start="249:13" pos:end="249:18">in_buf</name> <operator pos:start="249:20" pos:end="249:20">=</operator> <name pos:start="249:22" pos:end="249:31"><name pos:start="249:22" pos:end="249:22">p</name><operator pos:start="249:23" pos:end="249:24">-&gt;</operator><name pos:start="249:25" pos:end="249:28">data</name><index pos:start="249:29" pos:end="249:31">[<expr pos:start="249:30" pos:end="249:30"><literal type="number" pos:start="249:30" pos:end="249:30">0</literal></expr>]</index></name> <operator pos:start="249:33" pos:end="249:33">+</operator> <name pos:start="249:35" pos:end="249:48"><name pos:start="249:35" pos:end="249:35">p</name><operator pos:start="249:36" pos:end="249:37">-&gt;</operator><name pos:start="249:38" pos:end="249:45">linesize</name><index pos:start="249:46" pos:end="249:48">[<expr pos:start="249:47" pos:end="249:47"><literal type="number" pos:start="249:47" pos:end="249:47">0</literal></expr>]</index></name> <operator pos:start="249:50" pos:end="249:50">*</operator> <operator pos:start="249:52" pos:end="249:52">(</operator><name pos:start="249:53" pos:end="249:58">height</name> <operator pos:start="249:60" pos:end="249:60">-</operator> <literal type="number" pos:start="249:62" pos:end="249:62">1</literal><operator pos:start="249:63" pos:end="249:63">)</operator> <operator pos:start="249:65" pos:end="249:65">+</operator> <name pos:start="249:67" pos:end="249:67">z</name> <operator pos:start="249:69" pos:end="249:69">*</operator> <name pos:start="249:71" pos:end="249:87">bytes_per_channel</name></expr>;</expr_stmt>



            <for pos:start="253:13" pos:end="283:13">for <control pos:start="253:17" pos:end="253:40">(<init pos:start="253:18" pos:end="253:23"><expr pos:start="253:18" pos:end="253:22"><name pos:start="253:18" pos:end="253:18">y</name> <operator pos:start="253:20" pos:end="253:20">=</operator> <literal type="number" pos:start="253:22" pos:end="253:22">0</literal></expr>;</init> <condition pos:start="253:25" pos:end="253:35"><expr pos:start="253:25" pos:end="253:34"><name pos:start="253:25" pos:end="253:25">y</name> <operator pos:start="253:27" pos:end="253:27">&lt;</operator> <name pos:start="253:29" pos:end="253:34">height</name></expr>;</condition> <incr pos:start="253:37" pos:end="253:39"><expr pos:start="253:37" pos:end="253:39"><name pos:start="253:37" pos:end="253:37">y</name><operator pos:start="253:38" pos:end="253:39">++</operator></expr></incr>)</control> <block pos:start="253:42" pos:end="283:13">{<block_content pos:start="255:17" pos:end="281:41">

                <expr_stmt pos:start="255:17" pos:end="255:76"><expr pos:start="255:17" pos:end="255:75"><call pos:start="255:17" pos:end="255:75"><name pos:start="255:17" pos:end="255:36">bytestream2_put_be32</name><argument_list pos:start="255:37" pos:end="255:75">(<argument pos:start="255:38" pos:end="255:48"><expr pos:start="255:38" pos:end="255:48"><operator pos:start="255:38" pos:end="255:38">&amp;</operator><name pos:start="255:39" pos:end="255:48">taboff_pcb</name></expr></argument>, <argument pos:start="255:51" pos:end="255:74"><expr pos:start="255:51" pos:end="255:74"><call pos:start="255:51" pos:end="255:74"><name pos:start="255:51" pos:end="255:68">bytestream2_tell_p</name><argument_list pos:start="255:69" pos:end="255:74">(<argument pos:start="255:70" pos:end="255:73"><expr pos:start="255:70" pos:end="255:73"><operator pos:start="255:70" pos:end="255:70">&amp;</operator><name pos:start="255:71" pos:end="255:73">pbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <for pos:start="259:17" pos:end="261:54">for <control pos:start="259:21" pos:end="259:82">(<init pos:start="259:22" pos:end="259:27"><expr pos:start="259:22" pos:end="259:26"><name pos:start="259:22" pos:end="259:22">x</name> <operator pos:start="259:24" pos:end="259:24">=</operator> <literal type="number" pos:start="259:26" pos:end="259:26">0</literal></expr>;</init> <condition pos:start="259:29" pos:end="259:58"><expr pos:start="259:29" pos:end="259:57"><name pos:start="259:29" pos:end="259:29">x</name> <operator pos:start="259:31" pos:end="259:31">&lt;</operator> <name pos:start="259:33" pos:end="259:37">width</name> <operator pos:start="259:39" pos:end="259:39">*</operator> <name pos:start="259:41" pos:end="259:57">bytes_per_channel</name></expr>;</condition> <incr pos:start="259:60" pos:end="259:81"><expr pos:start="259:60" pos:end="259:81"><name pos:start="259:60" pos:end="259:60">x</name> <operator pos:start="259:62" pos:end="259:63">+=</operator> <name pos:start="259:65" pos:end="259:81">bytes_per_channel</name></expr></incr>)</control><block type="pseudo" pos:start="261:21" pos:end="261:54"><block_content pos:start="261:21" pos:end="261:54">

                    <expr_stmt pos:start="261:21" pos:end="261:54"><expr pos:start="261:21" pos:end="261:53"><name pos:start="261:21" pos:end="261:33"><name pos:start="261:21" pos:end="261:30">encode_buf</name><index pos:start="261:31" pos:end="261:33">[<expr pos:start="261:32" pos:end="261:32"><name pos:start="261:32" pos:end="261:32">x</name></expr>]</index></name> <operator pos:start="261:35" pos:end="261:35">=</operator> <name pos:start="261:37" pos:end="261:53"><name pos:start="261:37" pos:end="261:42">in_buf</name><index pos:start="261:43" pos:end="261:53">[<expr pos:start="261:44" pos:end="261:52"><name pos:start="261:44" pos:end="261:48">depth</name> <operator pos:start="261:50" pos:end="261:50">*</operator> <name pos:start="261:52" pos:end="261:52">x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



                <expr_stmt pos:start="265:17" pos:end="267:59"><expr pos:start="265:17" pos:end="267:58"><name pos:start="265:17" pos:end="265:22">length</name> <operator pos:start="265:24" pos:end="265:24">=</operator> <call pos:start="265:26" pos:end="267:58"><name pos:start="265:26" pos:end="265:39">sgi_rle_encode</name><argument_list pos:start="265:40" pos:end="267:58">(<argument pos:start="265:41" pos:end="265:44"><expr pos:start="265:41" pos:end="265:44"><operator pos:start="265:41" pos:end="265:41">&amp;</operator><name pos:start="265:42" pos:end="265:44">pbc</name></expr></argument>, <argument pos:start="265:47" pos:end="265:56"><expr pos:start="265:47" pos:end="265:56"><name pos:start="265:47" pos:end="265:56">encode_buf</name></expr></argument>, <argument pos:start="265:59" pos:end="265:63"><expr pos:start="265:59" pos:end="265:63"><name pos:start="265:59" pos:end="265:63">width</name></expr></argument>,

                                        <argument pos:start="267:41" pos:end="267:57"><expr pos:start="267:41" pos:end="267:57"><name pos:start="267:41" pos:end="267:57">bytes_per_channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="269:17" pos:end="275:17"><if pos:start="269:17" pos:end="275:17">if <condition pos:start="269:20" pos:end="269:31">(<expr pos:start="269:21" pos:end="269:30"><name pos:start="269:21" pos:end="269:26">length</name> <operator pos:start="269:28" pos:end="269:28">&lt;</operator> <literal type="number" pos:start="269:30" pos:end="269:30">1</literal></expr>)</condition> <block pos:start="269:33" pos:end="275:17">{<block_content pos:start="271:21" pos:end="273:47">

                    <expr_stmt pos:start="271:21" pos:end="271:40"><expr pos:start="271:21" pos:end="271:39"><call pos:start="271:21" pos:end="271:39"><name pos:start="271:21" pos:end="271:27">av_free</name><argument_list pos:start="271:28" pos:end="271:39">(<argument pos:start="271:29" pos:end="271:38"><expr pos:start="271:29" pos:end="271:38"><name pos:start="271:29" pos:end="271:38">encode_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="273:21" pos:end="273:47">return <expr pos:start="273:28" pos:end="273:46"><name pos:start="273:28" pos:end="273:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="279:17" pos:end="279:58"><expr pos:start="279:17" pos:end="279:57"><call pos:start="279:17" pos:end="279:57"><name pos:start="279:17" pos:end="279:36">bytestream2_put_be32</name><argument_list pos:start="279:37" pos:end="279:57">(<argument pos:start="279:38" pos:end="279:48"><expr pos:start="279:38" pos:end="279:48"><operator pos:start="279:38" pos:end="279:38">&amp;</operator><name pos:start="279:39" pos:end="279:48">tablen_pcb</name></expr></argument>, <argument pos:start="279:51" pos:end="279:56"><expr pos:start="279:51" pos:end="279:56"><name pos:start="279:51" pos:end="279:56">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="281:17" pos:end="281:41"><expr pos:start="281:17" pos:end="281:40"><name pos:start="281:17" pos:end="281:22">in_buf</name> <operator pos:start="281:24" pos:end="281:25">-=</operator> <name pos:start="281:27" pos:end="281:40"><name pos:start="281:27" pos:end="281:27">p</name><operator pos:start="281:28" pos:end="281:29">-&gt;</operator><name pos:start="281:30" pos:end="281:37">linesize</name><index pos:start="281:38" pos:end="281:40">[<expr pos:start="281:39" pos:end="281:39"><literal type="number" pos:start="281:39" pos:end="281:39">0</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>



        <expr_stmt pos:start="289:9" pos:end="289:28"><expr pos:start="289:9" pos:end="289:27"><call pos:start="289:9" pos:end="289:27"><name pos:start="289:9" pos:end="289:15">av_free</name><argument_list pos:start="289:16" pos:end="289:27">(<argument pos:start="289:17" pos:end="289:26"><expr pos:start="289:17" pos:end="289:26"><name pos:start="289:17" pos:end="289:26">encode_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="291:7" pos:end="325:5">else <block pos:start="291:12" pos:end="325:5">{<block_content pos:start="293:9" pos:end="323:9">

        <for pos:start="293:9" pos:end="323:9">for <control pos:start="293:13" pos:end="293:35">(<init pos:start="293:14" pos:end="293:19"><expr pos:start="293:14" pos:end="293:18"><name pos:start="293:14" pos:end="293:14">z</name> <operator pos:start="293:16" pos:end="293:16">=</operator> <literal type="number" pos:start="293:18" pos:end="293:18">0</literal></expr>;</init> <condition pos:start="293:21" pos:end="293:30"><expr pos:start="293:21" pos:end="293:29"><name pos:start="293:21" pos:end="293:21">z</name> <operator pos:start="293:23" pos:end="293:23">&lt;</operator> <name pos:start="293:25" pos:end="293:29">depth</name></expr>;</condition> <incr pos:start="293:32" pos:end="293:34"><expr pos:start="293:32" pos:end="293:34"><name pos:start="293:32" pos:end="293:32">z</name><operator pos:start="293:33" pos:end="293:34">++</operator></expr></incr>)</control> <block pos:start="293:37" pos:end="323:9">{<block_content pos:start="295:13" pos:end="321:13">

            <expr_stmt pos:start="295:13" pos:end="295:88"><expr pos:start="295:13" pos:end="295:87"><name pos:start="295:13" pos:end="295:18">in_buf</name> <operator pos:start="295:20" pos:end="295:20">=</operator> <name pos:start="295:22" pos:end="295:31"><name pos:start="295:22" pos:end="295:22">p</name><operator pos:start="295:23" pos:end="295:24">-&gt;</operator><name pos:start="295:25" pos:end="295:28">data</name><index pos:start="295:29" pos:end="295:31">[<expr pos:start="295:30" pos:end="295:30"><literal type="number" pos:start="295:30" pos:end="295:30">0</literal></expr>]</index></name> <operator pos:start="295:33" pos:end="295:33">+</operator> <name pos:start="295:35" pos:end="295:48"><name pos:start="295:35" pos:end="295:35">p</name><operator pos:start="295:36" pos:end="295:37">-&gt;</operator><name pos:start="295:38" pos:end="295:45">linesize</name><index pos:start="295:46" pos:end="295:48">[<expr pos:start="295:47" pos:end="295:47"><literal type="number" pos:start="295:47" pos:end="295:47">0</literal></expr>]</index></name> <operator pos:start="295:50" pos:end="295:50">*</operator> <operator pos:start="295:52" pos:end="295:52">(</operator><name pos:start="295:53" pos:end="295:58">height</name> <operator pos:start="295:60" pos:end="295:60">-</operator> <literal type="number" pos:start="295:62" pos:end="295:62">1</literal><operator pos:start="295:63" pos:end="295:63">)</operator> <operator pos:start="295:65" pos:end="295:65">+</operator> <name pos:start="295:67" pos:end="295:67">z</name> <operator pos:start="295:69" pos:end="295:69">*</operator> <name pos:start="295:71" pos:end="295:87">bytes_per_channel</name></expr>;</expr_stmt>



            <for pos:start="299:13" pos:end="321:13">for <control pos:start="299:17" pos:end="299:40">(<init pos:start="299:18" pos:end="299:23"><expr pos:start="299:18" pos:end="299:22"><name pos:start="299:18" pos:end="299:18">y</name> <operator pos:start="299:20" pos:end="299:20">=</operator> <literal type="number" pos:start="299:22" pos:end="299:22">0</literal></expr>;</init> <condition pos:start="299:25" pos:end="299:35"><expr pos:start="299:25" pos:end="299:34"><name pos:start="299:25" pos:end="299:25">y</name> <operator pos:start="299:27" pos:end="299:27">&lt;</operator> <name pos:start="299:29" pos:end="299:34">height</name></expr>;</condition> <incr pos:start="299:37" pos:end="299:39"><expr pos:start="299:37" pos:end="299:39"><name pos:start="299:37" pos:end="299:37">y</name><operator pos:start="299:38" pos:end="299:39">++</operator></expr></incr>)</control> <block pos:start="299:42" pos:end="321:13">{<block_content pos:start="301:17" pos:end="319:41">

                <for pos:start="301:17" pos:end="315:80">for <control pos:start="301:21" pos:end="301:58">(<init pos:start="301:22" pos:end="301:27"><expr pos:start="301:22" pos:end="301:26"><name pos:start="301:22" pos:end="301:22">x</name> <operator pos:start="301:24" pos:end="301:24">=</operator> <literal type="number" pos:start="301:26" pos:end="301:26">0</literal></expr>;</init> <condition pos:start="301:29" pos:end="301:46"><expr pos:start="301:29" pos:end="301:45"><name pos:start="301:29" pos:end="301:29">x</name> <operator pos:start="301:31" pos:end="301:31">&lt;</operator> <name pos:start="301:33" pos:end="301:37">width</name> <operator pos:start="301:39" pos:end="301:39">*</operator> <name pos:start="301:41" pos:end="301:45">depth</name></expr>;</condition> <incr pos:start="301:48" pos:end="301:57"><expr pos:start="301:48" pos:end="301:57"><name pos:start="301:48" pos:end="301:48">x</name> <operator pos:start="301:50" pos:end="301:51">+=</operator> <name pos:start="301:53" pos:end="301:57">depth</name></expr></incr>)</control><block type="pseudo" pos:start="303:21" pos:end="315:80"><block_content pos:start="303:21" pos:end="315:80">

                    <if_stmt pos:start="303:21" pos:end="315:80"><if pos:start="303:21" pos:end="305:62">if <condition pos:start="303:24" pos:end="303:47">(<expr pos:start="303:25" pos:end="303:46"><name pos:start="303:25" pos:end="303:41">bytes_per_channel</name> <operator pos:start="303:43" pos:end="303:44">==</operator> <literal type="number" pos:start="303:46" pos:end="303:46">1</literal></expr>)</condition><block type="pseudo" pos:start="305:25" pos:end="305:62"><block_content pos:start="305:25" pos:end="305:62">

                        <expr_stmt pos:start="305:25" pos:end="305:62"><expr pos:start="305:25" pos:end="305:61"><call pos:start="305:25" pos:end="305:61"><name pos:start="305:25" pos:end="305:44">bytestream2_put_byte</name><argument_list pos:start="305:45" pos:end="305:61">(<argument pos:start="305:46" pos:end="305:49"><expr pos:start="305:46" pos:end="305:49"><operator pos:start="305:46" pos:end="305:46">&amp;</operator><name pos:start="305:47" pos:end="305:49">pbc</name></expr></argument>, <argument pos:start="305:52" pos:end="305:60"><expr pos:start="305:52" pos:end="305:60"><name pos:start="305:52" pos:end="305:60"><name pos:start="305:52" pos:end="305:57">in_buf</name><index pos:start="305:58" pos:end="305:60">[<expr pos:start="305:59" pos:end="305:59"><name pos:start="305:59" pos:end="305:59">x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="307:21" pos:end="311:80">else

                        if <condition pos:start="309:28" pos:end="309:35">(<expr pos:start="309:29" pos:end="309:34"><name pos:start="309:29" pos:end="309:34">put_be</name></expr>)</condition><block type="pseudo" pos:start="311:29" pos:end="311:80"><block_content pos:start="311:29" pos:end="311:80">

                            <expr_stmt pos:start="311:29" pos:end="311:80"><expr pos:start="311:29" pos:end="311:79"><call pos:start="311:29" pos:end="311:79"><name pos:start="311:29" pos:end="311:48">bytestream2_put_be16</name><argument_list pos:start="311:49" pos:end="311:79">(<argument pos:start="311:50" pos:end="311:53"><expr pos:start="311:50" pos:end="311:53"><operator pos:start="311:50" pos:end="311:50">&amp;</operator><name pos:start="311:51" pos:end="311:53">pbc</name></expr></argument>, <argument pos:start="311:56" pos:end="311:78"><expr pos:start="311:56" pos:end="311:78"><operator pos:start="311:56" pos:end="311:56">(</operator><operator pos:start="311:57" pos:end="311:57">(</operator><name pos:start="311:58" pos:end="311:65">uint16_t</name> <operator pos:start="311:67" pos:end="311:67">*</operator><operator pos:start="311:68" pos:end="311:68">)</operator><name pos:start="311:69" pos:end="311:74">in_buf</name><operator pos:start="311:75" pos:end="311:75">)</operator><index pos:start="311:76" pos:end="311:78">[<expr pos:start="311:77" pos:end="311:77"><name pos:start="311:77" pos:end="311:77">x</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="313:25" pos:end="315:80">else<block type="pseudo" pos:start="315:29" pos:end="315:80"><block_content pos:start="315:29" pos:end="315:80">

                            <expr_stmt pos:start="315:29" pos:end="315:80"><expr pos:start="315:29" pos:end="315:79"><call pos:start="315:29" pos:end="315:79"><name pos:start="315:29" pos:end="315:48">bytestream2_put_le16</name><argument_list pos:start="315:49" pos:end="315:79">(<argument pos:start="315:50" pos:end="315:53"><expr pos:start="315:50" pos:end="315:53"><operator pos:start="315:50" pos:end="315:50">&amp;</operator><name pos:start="315:51" pos:end="315:53">pbc</name></expr></argument>, <argument pos:start="315:56" pos:end="315:78"><expr pos:start="315:56" pos:end="315:78"><operator pos:start="315:56" pos:end="315:56">(</operator><operator pos:start="315:57" pos:end="315:57">(</operator><name pos:start="315:58" pos:end="315:65">uint16_t</name> <operator pos:start="315:67" pos:end="315:67">*</operator><operator pos:start="315:68" pos:end="315:68">)</operator><name pos:start="315:69" pos:end="315:74">in_buf</name><operator pos:start="315:75" pos:end="315:75">)</operator><index pos:start="315:76" pos:end="315:78">[<expr pos:start="315:77" pos:end="315:77"><name pos:start="315:77" pos:end="315:77">x</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>



                <expr_stmt pos:start="319:17" pos:end="319:41"><expr pos:start="319:17" pos:end="319:40"><name pos:start="319:17" pos:end="319:22">in_buf</name> <operator pos:start="319:24" pos:end="319:25">-=</operator> <name pos:start="319:27" pos:end="319:40"><name pos:start="319:27" pos:end="319:27">p</name><operator pos:start="319:28" pos:end="319:29">-&gt;</operator><name pos:start="319:30" pos:end="319:37">linesize</name><index pos:start="319:38" pos:end="319:40">[<expr pos:start="319:39" pos:end="319:39"><literal type="number" pos:start="319:39" pos:end="319:39">0</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="329:5" pos:end="329:22">/* total length */</comment>

    <expr_stmt pos:start="331:5" pos:end="331:43"><expr pos:start="331:5" pos:end="331:42"><name pos:start="331:5" pos:end="331:13"><name pos:start="331:5" pos:end="331:7">pkt</name><operator pos:start="331:8" pos:end="331:9">-&gt;</operator><name pos:start="331:10" pos:end="331:13">size</name></name>   <operator pos:start="331:17" pos:end="331:17">=</operator> <call pos:start="331:19" pos:end="331:42"><name pos:start="331:19" pos:end="331:36">bytestream2_tell_p</name><argument_list pos:start="331:37" pos:end="331:42">(<argument pos:start="331:38" pos:end="331:41"><expr pos:start="331:38" pos:end="331:41"><operator pos:start="331:38" pos:end="331:38">&amp;</operator><name pos:start="331:39" pos:end="331:41">pbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="333:5" pos:end="333:34"><expr pos:start="333:5" pos:end="333:33"><name pos:start="333:5" pos:end="333:14"><name pos:start="333:5" pos:end="333:7">pkt</name><operator pos:start="333:8" pos:end="333:9">-&gt;</operator><name pos:start="333:10" pos:end="333:14">flags</name></name> <operator pos:start="333:16" pos:end="333:17">|=</operator> <name pos:start="333:19" pos:end="333:33">AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

    <expr_stmt pos:start="335:5" pos:end="335:20"><expr pos:start="335:5" pos:end="335:19"><operator pos:start="335:5" pos:end="335:5">*</operator><name pos:start="335:6" pos:end="335:15">got_packet</name> <operator pos:start="335:17" pos:end="335:17">=</operator> <literal type="number" pos:start="335:19" pos:end="335:19">1</literal></expr>;</expr_stmt>



    <return pos:start="339:5" pos:end="339:13">return <expr pos:start="339:12" pos:end="339:12"><literal type="number" pos:start="339:12" pos:end="339:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
