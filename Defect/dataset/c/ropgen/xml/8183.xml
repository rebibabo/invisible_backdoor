<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8183.c" pos:tabs="8"><function pos:start="1:1" pos:end="463:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_frame</name><parameter_list pos:start="1:24" pos:end="5:45">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:39"><decl pos:start="3:30" pos:end="3:39"><type pos:start="3:30" pos:end="3:39"><name pos:start="3:30" pos:end="3:33">void</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">data</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:55"><decl pos:start="3:42" pos:end="3:55"><type pos:start="3:42" pos:end="3:55"><name pos:start="3:42" pos:end="3:44">int</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:55">data_size</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:44"><decl pos:start="5:30" pos:end="5:44"><type pos:start="5:30" pos:end="5:44"><name pos:start="5:30" pos:end="5:37">AVPacket</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:44">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="463:1">{<block_content pos:start="9:5" pos:end="461:54">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:38"><decl pos:start="13:5" pos:end="13:37"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">H264Context</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:18">h</name> <init pos:start="13:20" pos:end="13:37">= <expr pos:start="13:22" pos:end="13:37"><name pos:start="13:22" pos:end="13:37"><name pos:start="13:22" pos:end="13:26">avctx</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:18">MpegEncContext</name> <modifier pos:start="15:20" pos:end="15:20">*</modifier></type><name pos:start="15:21" pos:end="15:21">s</name> <init pos:start="15:23" pos:end="15:29">= <expr pos:start="15:25" pos:end="15:29"><operator pos:start="15:25" pos:end="15:25">&amp;</operator><name pos:start="15:26" pos:end="15:29"><name pos:start="15:26" pos:end="15:26">h</name><operator pos:start="15:27" pos:end="15:28">-&gt;</operator><name pos:start="15:29" pos:end="15:29">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">AVFrame</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:17">pict</name> <init pos:start="17:19" pos:end="17:24">= <expr pos:start="17:21" pos:end="17:24"><name pos:start="17:21" pos:end="17:24">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:17">buf_index</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:27"><expr pos:start="23:5" pos:end="23:26"><name pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:12">flags</name></name><operator pos:start="23:13" pos:end="23:13">=</operator> <name pos:start="23:15" pos:end="23:26"><name pos:start="23:15" pos:end="23:19">avctx</name><operator pos:start="23:20" pos:end="23:21">-&gt;</operator><name pos:start="23:22" pos:end="23:26">flags</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:29"><expr pos:start="25:5" pos:end="25:28"><name pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:13">flags2</name></name><operator pos:start="25:14" pos:end="25:14">=</operator> <name pos:start="25:16" pos:end="25:28"><name pos:start="25:16" pos:end="25:20">avctx</name><operator pos:start="25:21" pos:end="25:22">-&gt;</operator><name pos:start="25:23" pos:end="25:28">flags2</name></name></expr>;</expr_stmt>



   <comment type="block" pos:start="29:4" pos:end="29:59">/* end of stream, output what is still in the buffers */</comment>

    <if_stmt pos:start="31:5" pos:end="75:5"><if pos:start="31:5" pos:end="75:5">if <condition pos:start="31:8" pos:end="31:22">(<expr pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:16">buf_size</name> <operator pos:start="31:18" pos:end="31:19">==</operator> <literal type="number" pos:start="31:21" pos:end="31:21">0</literal></expr>)</condition> <block pos:start="31:24" pos:end="75:5">{<block_content pos:start="33:9" pos:end="73:17">

        <decl_stmt pos:start="33:9" pos:end="33:21"><decl pos:start="33:9" pos:end="33:20"><type pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:15">Picture</name> <modifier pos:start="33:17" pos:end="33:17">*</modifier></type><name pos:start="33:18" pos:end="33:20">out</name></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:23"><decl pos:start="35:9" pos:end="35:13"><type pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:11">int</name></type> <name pos:start="35:13" pos:end="35:13">i</name></decl>, <decl pos:start="35:16" pos:end="35:22"><type ref="prev" pos:start="35:9" pos:end="35:11"/><name pos:start="35:16" pos:end="35:22">out_idx</name></decl>;</decl_stmt>



<comment type="line" pos:start="39:1" pos:end="39:49">//FIXME factorize this with the output code below</comment>

        <expr_stmt pos:start="41:9" pos:end="41:32"><expr pos:start="41:9" pos:end="41:31"><name pos:start="41:9" pos:end="41:11">out</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <name pos:start="41:15" pos:end="41:31"><name pos:start="41:15" pos:end="41:15">h</name><operator pos:start="41:16" pos:end="41:17">-&gt;</operator><name pos:start="41:18" pos:end="41:28">delayed_pic</name><index pos:start="41:29" pos:end="41:31">[<expr pos:start="41:30" pos:end="41:30"><literal type="number" pos:start="41:30" pos:end="41:30">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:20"><expr pos:start="43:9" pos:end="43:19"><name pos:start="43:9" pos:end="43:15">out_idx</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <literal type="number" pos:start="43:19" pos:end="43:19">0</literal></expr>;</expr_stmt>

        <for pos:start="45:9" pos:end="53:13">for<control pos:start="45:12" pos:end="45:101">(<init pos:start="45:13" pos:end="45:16"><expr pos:start="45:13" pos:end="45:15"><name pos:start="45:13" pos:end="45:13">i</name><operator pos:start="45:14" pos:end="45:14">=</operator><literal type="number" pos:start="45:15" pos:end="45:15">1</literal></expr>;</init> <condition pos:start="45:18" pos:end="45:96"><expr pos:start="45:18" pos:end="45:95"><name pos:start="45:18" pos:end="45:34"><name pos:start="45:18" pos:end="45:18">h</name><operator pos:start="45:19" pos:end="45:20">-&gt;</operator><name pos:start="45:21" pos:end="45:31">delayed_pic</name><index pos:start="45:32" pos:end="45:34">[<expr pos:start="45:33" pos:end="45:33"><name pos:start="45:33" pos:end="45:33">i</name></expr>]</index></name> <operator pos:start="45:36" pos:end="45:37">&amp;&amp;</operator> <operator pos:start="45:39" pos:end="45:39">(</operator><name pos:start="45:40" pos:end="45:56"><name pos:start="45:40" pos:end="45:40">h</name><operator pos:start="45:41" pos:end="45:42">-&gt;</operator><name pos:start="45:43" pos:end="45:53">delayed_pic</name><index pos:start="45:54" pos:end="45:56">[<expr pos:start="45:55" pos:end="45:55"><name pos:start="45:55" pos:end="45:55">i</name></expr>]</index></name><operator pos:start="45:57" pos:end="45:58">-&gt;</operator><name pos:start="45:59" pos:end="45:61">poc</name> <operator pos:start="45:63" pos:end="45:64">&amp;&amp;</operator> <operator pos:start="45:66" pos:end="45:66">!</operator><name pos:start="45:67" pos:end="45:83"><name pos:start="45:67" pos:end="45:67">h</name><operator pos:start="45:68" pos:end="45:69">-&gt;</operator><name pos:start="45:70" pos:end="45:80">delayed_pic</name><index pos:start="45:81" pos:end="45:83">[<expr pos:start="45:82" pos:end="45:82"><name pos:start="45:82" pos:end="45:82">i</name></expr>]</index></name><operator pos:start="45:84" pos:end="45:85">-&gt;</operator><name pos:start="45:86" pos:end="45:94">key_frame</name><operator pos:start="45:95" pos:end="45:95">)</operator></expr>;</condition> <incr pos:start="45:98" pos:end="45:100"><expr pos:start="45:98" pos:end="45:100"><name pos:start="45:98" pos:end="45:98">i</name><operator pos:start="45:99" pos:end="45:100">++</operator></expr></incr>)</control><block type="pseudo" pos:start="47:13" pos:end="53:13"><block_content pos:start="47:13" pos:end="53:13">

            <if_stmt pos:start="47:13" pos:end="53:13"><if pos:start="47:13" pos:end="53:13">if<condition pos:start="47:15" pos:end="47:49">(<expr pos:start="47:16" pos:end="47:48"><name pos:start="47:16" pos:end="47:32"><name pos:start="47:16" pos:end="47:16">h</name><operator pos:start="47:17" pos:end="47:18">-&gt;</operator><name pos:start="47:19" pos:end="47:29">delayed_pic</name><index pos:start="47:30" pos:end="47:32">[<expr pos:start="47:31" pos:end="47:31"><name pos:start="47:31" pos:end="47:31">i</name></expr>]</index></name><operator pos:start="47:33" pos:end="47:34">-&gt;</operator><name pos:start="47:35" pos:end="47:37">poc</name> <operator pos:start="47:39" pos:end="47:39">&lt;</operator> <name pos:start="47:41" pos:end="47:48"><name pos:start="47:41" pos:end="47:43">out</name><operator pos:start="47:44" pos:end="47:45">-&gt;</operator><name pos:start="47:46" pos:end="47:48">poc</name></name></expr>)</condition><block pos:start="47:50" pos:end="53:13">{<block_content pos:start="49:17" pos:end="51:28">

                <expr_stmt pos:start="49:17" pos:end="49:40"><expr pos:start="49:17" pos:end="49:39"><name pos:start="49:17" pos:end="49:19">out</name> <operator pos:start="49:21" pos:end="49:21">=</operator> <name pos:start="49:23" pos:end="49:39"><name pos:start="49:23" pos:end="49:23">h</name><operator pos:start="49:24" pos:end="49:25">-&gt;</operator><name pos:start="49:26" pos:end="49:36">delayed_pic</name><index pos:start="49:37" pos:end="49:39">[<expr pos:start="49:38" pos:end="49:38"><name pos:start="49:38" pos:end="49:38">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="51:17" pos:end="51:28"><expr pos:start="51:17" pos:end="51:27"><name pos:start="51:17" pos:end="51:23">out_idx</name> <operator pos:start="51:25" pos:end="51:25">=</operator> <name pos:start="51:27" pos:end="51:27">i</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt></block_content></block></for>



        <for pos:start="57:9" pos:end="59:52">for<control pos:start="57:12" pos:end="57:46">(<init pos:start="57:13" pos:end="57:22"><expr pos:start="57:13" pos:end="57:21"><name pos:start="57:13" pos:end="57:13">i</name><operator pos:start="57:14" pos:end="57:14">=</operator><name pos:start="57:15" pos:end="57:21">out_idx</name></expr>;</init> <condition pos:start="57:24" pos:end="57:41"><expr pos:start="57:24" pos:end="57:40"><name pos:start="57:24" pos:end="57:40"><name pos:start="57:24" pos:end="57:24">h</name><operator pos:start="57:25" pos:end="57:26">-&gt;</operator><name pos:start="57:27" pos:end="57:37">delayed_pic</name><index pos:start="57:38" pos:end="57:40">[<expr pos:start="57:39" pos:end="57:39"><name pos:start="57:39" pos:end="57:39">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="57:43" pos:end="57:45"><expr pos:start="57:43" pos:end="57:45"><name pos:start="57:43" pos:end="57:43">i</name><operator pos:start="57:44" pos:end="57:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="59:13" pos:end="59:52"><block_content pos:start="59:13" pos:end="59:52">

            <expr_stmt pos:start="59:13" pos:end="59:52"><expr pos:start="59:13" pos:end="59:51"><name pos:start="59:13" pos:end="59:29"><name pos:start="59:13" pos:end="59:13">h</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:26">delayed_pic</name><index pos:start="59:27" pos:end="59:29">[<expr pos:start="59:28" pos:end="59:28"><name pos:start="59:28" pos:end="59:28">i</name></expr>]</index></name> <operator pos:start="59:31" pos:end="59:31">=</operator> <name pos:start="59:33" pos:end="59:51"><name pos:start="59:33" pos:end="59:33">h</name><operator pos:start="59:34" pos:end="59:35">-&gt;</operator><name pos:start="59:36" pos:end="59:46">delayed_pic</name><index pos:start="59:47" pos:end="59:51">[<expr pos:start="59:48" pos:end="59:50"><name pos:start="59:48" pos:end="59:48">i</name><operator pos:start="59:49" pos:end="59:49">+</operator><literal type="number" pos:start="59:50" pos:end="59:50">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



        <if_stmt pos:start="63:9" pos:end="69:9"><if pos:start="63:9" pos:end="69:9">if<condition pos:start="63:11" pos:end="63:15">(<expr pos:start="63:12" pos:end="63:14"><name pos:start="63:12" pos:end="63:14">out</name></expr>)</condition><block pos:start="63:16" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:34">

            <expr_stmt pos:start="65:13" pos:end="65:41"><expr pos:start="65:13" pos:end="65:40"><operator pos:start="65:13" pos:end="65:13">*</operator><name pos:start="65:14" pos:end="65:22">data_size</name> <operator pos:start="65:24" pos:end="65:24">=</operator> <sizeof pos:start="65:26" pos:end="65:40">sizeof<argument_list pos:start="65:32" pos:end="65:40">(<argument pos:start="65:33" pos:end="65:39"><expr pos:start="65:33" pos:end="65:39"><name pos:start="65:33" pos:end="65:39">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:34"><expr pos:start="67:13" pos:end="67:33"><operator pos:start="67:13" pos:end="67:13">*</operator><name pos:start="67:14" pos:end="67:17">pict</name><operator pos:start="67:18" pos:end="67:18">=</operator> <operator pos:start="67:20" pos:end="67:20">*</operator><operator pos:start="67:21" pos:end="67:21">(</operator><name pos:start="67:22" pos:end="67:28">AVFrame</name><operator pos:start="67:29" pos:end="67:29">*</operator><operator pos:start="67:30" pos:end="67:30">)</operator><name pos:start="67:31" pos:end="67:33">out</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <return pos:start="73:9" pos:end="73:17">return <expr pos:start="73:16" pos:end="73:16"><literal type="number" pos:start="73:16" pos:end="73:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="79:5" pos:end="157:5"><if pos:start="79:5" pos:end="157:5">if<condition pos:start="79:7" pos:end="79:33">(<expr pos:start="79:8" pos:end="79:32"><name pos:start="79:8" pos:end="79:16"><name pos:start="79:8" pos:end="79:8">h</name><operator pos:start="79:9" pos:end="79:10">-&gt;</operator><name pos:start="79:11" pos:end="79:16">is_avc</name></name> <operator pos:start="79:18" pos:end="79:19">&amp;&amp;</operator> <operator pos:start="79:21" pos:end="79:21">!</operator><name pos:start="79:22" pos:end="79:32"><name pos:start="79:22" pos:end="79:22">h</name><operator pos:start="79:23" pos:end="79:24">-&gt;</operator><name pos:start="79:25" pos:end="79:32">got_avcC</name></name></expr>)</condition> <block pos:start="79:35" pos:end="157:5">{<block_content pos:start="81:9" pos:end="155:24">

        <decl_stmt pos:start="81:9" pos:end="81:28"><decl pos:start="81:9" pos:end="81:13"><type pos:start="81:9" pos:end="81:11"><name pos:start="81:9" pos:end="81:11">int</name></type> <name pos:start="81:13" pos:end="81:13">i</name></decl>, <decl pos:start="81:16" pos:end="81:18"><type ref="prev" pos:start="81:9" pos:end="81:11"/><name pos:start="81:16" pos:end="81:18">cnt</name></decl>, <decl pos:start="81:21" pos:end="81:27"><type ref="prev" pos:start="81:9" pos:end="81:11"/><name pos:start="81:21" pos:end="81:27">nalsize</name></decl>;</decl_stmt>

        <decl_stmt pos:start="83:9" pos:end="83:44"><decl pos:start="83:9" pos:end="83:43"><type pos:start="83:9" pos:end="83:23"><name pos:start="83:9" pos:end="83:16">unsigned</name> <name pos:start="83:18" pos:end="83:21">char</name> <modifier pos:start="83:23" pos:end="83:23">*</modifier></type><name pos:start="83:24" pos:end="83:24">p</name> <init pos:start="83:26" pos:end="83:43">= <expr pos:start="83:28" pos:end="83:43"><name pos:start="83:28" pos:end="83:43"><name pos:start="83:28" pos:end="83:32">avctx</name><operator pos:start="83:33" pos:end="83:34">-&gt;</operator><name pos:start="83:35" pos:end="83:43">extradata</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="85:9" pos:end="91:9"><if pos:start="85:9" pos:end="91:9">if<condition pos:start="85:11" pos:end="85:37">(<expr pos:start="85:12" pos:end="85:36"><name pos:start="85:12" pos:end="85:32"><name pos:start="85:12" pos:end="85:16">avctx</name><operator pos:start="85:17" pos:end="85:18">-&gt;</operator><name pos:start="85:19" pos:end="85:32">extradata_size</name></name> <operator pos:start="85:34" pos:end="85:34">&lt;</operator> <literal type="number" pos:start="85:36" pos:end="85:36">7</literal></expr>)</condition> <block pos:start="85:39" pos:end="91:9">{<block_content pos:start="87:13" pos:end="89:22">

            <expr_stmt pos:start="87:13" pos:end="87:60"><expr pos:start="87:13" pos:end="87:59"><call pos:start="87:13" pos:end="87:59"><name pos:start="87:13" pos:end="87:18">av_log</name><argument_list pos:start="87:19" pos:end="87:59">(<argument pos:start="87:20" pos:end="87:24"><expr pos:start="87:20" pos:end="87:24"><name pos:start="87:20" pos:end="87:24">avctx</name></expr></argument>, <argument pos:start="87:27" pos:end="87:38"><expr pos:start="87:27" pos:end="87:38"><name pos:start="87:27" pos:end="87:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="87:41" pos:end="87:58"><expr pos:start="87:41" pos:end="87:58"><literal type="string" pos:start="87:41" pos:end="87:58">"avcC too short\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="89:13" pos:end="89:22">return <expr pos:start="89:20" pos:end="89:21"><operator pos:start="89:20" pos:end="89:20">-</operator><literal type="number" pos:start="89:21" pos:end="89:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="93:9" pos:end="99:9"><if pos:start="93:9" pos:end="99:9">if<condition pos:start="93:11" pos:end="93:19">(<expr pos:start="93:12" pos:end="93:18"><operator pos:start="93:12" pos:end="93:12">*</operator><name pos:start="93:13" pos:end="93:13">p</name> <operator pos:start="93:15" pos:end="93:16">!=</operator> <literal type="number" pos:start="93:18" pos:end="93:18">1</literal></expr>)</condition> <block pos:start="93:21" pos:end="99:9">{<block_content pos:start="95:13" pos:end="97:22">

            <expr_stmt pos:start="95:13" pos:end="95:73"><expr pos:start="95:13" pos:end="95:72"><call pos:start="95:13" pos:end="95:72"><name pos:start="95:13" pos:end="95:18">av_log</name><argument_list pos:start="95:19" pos:end="95:72">(<argument pos:start="95:20" pos:end="95:24"><expr pos:start="95:20" pos:end="95:24"><name pos:start="95:20" pos:end="95:24">avctx</name></expr></argument>, <argument pos:start="95:27" pos:end="95:38"><expr pos:start="95:27" pos:end="95:38"><name pos:start="95:27" pos:end="95:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="95:41" pos:end="95:67"><expr pos:start="95:41" pos:end="95:67"><literal type="string" pos:start="95:41" pos:end="95:67">"Unknown avcC version %d\n"</literal></expr></argument>, <argument pos:start="95:70" pos:end="95:71"><expr pos:start="95:70" pos:end="95:71"><operator pos:start="95:70" pos:end="95:70">*</operator><name pos:start="95:71" pos:end="95:71">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="97:13" pos:end="97:22">return <expr pos:start="97:20" pos:end="97:21"><operator pos:start="97:20" pos:end="97:20">-</operator><literal type="number" pos:start="97:21" pos:end="97:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="101:9" pos:end="103:66">/* sps and pps in the avcC always have length coded with 2 bytes,

           so put a fake nal_length_size = 2 while parsing them */</comment>

        <expr_stmt pos:start="105:9" pos:end="105:31"><expr pos:start="105:9" pos:end="105:30"><name pos:start="105:9" pos:end="105:26"><name pos:start="105:9" pos:end="105:9">h</name><operator pos:start="105:10" pos:end="105:11">-&gt;</operator><name pos:start="105:12" pos:end="105:26">nal_length_size</name></name> <operator pos:start="105:28" pos:end="105:28">=</operator> <literal type="number" pos:start="105:30" pos:end="105:30">2</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="107:9" pos:end="107:31">// Decode sps from avcC</comment>

        <expr_stmt pos:start="109:9" pos:end="109:28"><expr pos:start="109:9" pos:end="109:27"><name pos:start="109:9" pos:end="109:11">cnt</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <operator pos:start="109:15" pos:end="109:15">*</operator><operator pos:start="109:16" pos:end="109:16">(</operator><name pos:start="109:17" pos:end="109:17">p</name><operator pos:start="109:18" pos:end="109:18">+</operator><literal type="number" pos:start="109:19" pos:end="109:19">5</literal><operator pos:start="109:20" pos:end="109:20">)</operator> <operator pos:start="109:22" pos:end="109:22">&amp;</operator> <literal type="number" pos:start="109:24" pos:end="109:27">0x1f</literal></expr>;</expr_stmt> <comment type="line" pos:start="109:30" pos:end="109:45">// Number of sps</comment>

        <expr_stmt pos:start="111:9" pos:end="111:15"><expr pos:start="111:9" pos:end="111:14"><name pos:start="111:9" pos:end="111:9">p</name> <operator pos:start="111:11" pos:end="111:12">+=</operator> <literal type="number" pos:start="111:14" pos:end="111:14">6</literal></expr>;</expr_stmt>

        <for pos:start="113:9" pos:end="127:9">for <control pos:start="113:13" pos:end="113:33">(<init pos:start="113:14" pos:end="113:19"><expr pos:start="113:14" pos:end="113:18"><name pos:start="113:14" pos:end="113:14">i</name> <operator pos:start="113:16" pos:end="113:16">=</operator> <literal type="number" pos:start="113:18" pos:end="113:18">0</literal></expr>;</init> <condition pos:start="113:21" pos:end="113:28"><expr pos:start="113:21" pos:end="113:27"><name pos:start="113:21" pos:end="113:21">i</name> <operator pos:start="113:23" pos:end="113:23">&lt;</operator> <name pos:start="113:25" pos:end="113:27">cnt</name></expr>;</condition> <incr pos:start="113:30" pos:end="113:32"><expr pos:start="113:30" pos:end="113:32"><name pos:start="113:30" pos:end="113:30">i</name><operator pos:start="113:31" pos:end="113:32">++</operator></expr></incr>)</control> <block pos:start="113:35" pos:end="127:9">{<block_content pos:start="115:13" pos:end="125:25">

            <expr_stmt pos:start="115:13" pos:end="115:37"><expr pos:start="115:13" pos:end="115:36"><name pos:start="115:13" pos:end="115:19">nalsize</name> <operator pos:start="115:21" pos:end="115:21">=</operator> <call pos:start="115:23" pos:end="115:32"><name pos:start="115:23" pos:end="115:29">AV_RB16</name><argument_list pos:start="115:30" pos:end="115:32">(<argument pos:start="115:31" pos:end="115:31"><expr pos:start="115:31" pos:end="115:31"><name pos:start="115:31" pos:end="115:31">p</name></expr></argument>)</argument_list></call> <operator pos:start="115:34" pos:end="115:34">+</operator> <literal type="number" pos:start="115:36" pos:end="115:36">2</literal></expr>;</expr_stmt>

            <if_stmt pos:start="117:13" pos:end="123:13"><if pos:start="117:13" pos:end="123:13">if<condition pos:start="117:15" pos:end="117:51">(<expr pos:start="117:16" pos:end="117:50"><call pos:start="117:16" pos:end="117:46"><name pos:start="117:16" pos:end="117:31">decode_nal_units</name><argument_list pos:start="117:32" pos:end="117:46">(<argument pos:start="117:33" pos:end="117:33"><expr pos:start="117:33" pos:end="117:33"><name pos:start="117:33" pos:end="117:33">h</name></expr></argument>, <argument pos:start="117:36" pos:end="117:36"><expr pos:start="117:36" pos:end="117:36"><name pos:start="117:36" pos:end="117:36">p</name></expr></argument>, <argument pos:start="117:39" pos:end="117:45"><expr pos:start="117:39" pos:end="117:45"><name pos:start="117:39" pos:end="117:45">nalsize</name></expr></argument>)</argument_list></call> <operator pos:start="117:48" pos:end="117:48">&lt;</operator> <literal type="number" pos:start="117:50" pos:end="117:50">0</literal></expr>)</condition> <block pos:start="117:53" pos:end="123:13">{<block_content pos:start="119:17" pos:end="121:26">

                <expr_stmt pos:start="119:17" pos:end="119:85"><expr pos:start="119:17" pos:end="119:84"><call pos:start="119:17" pos:end="119:84"><name pos:start="119:17" pos:end="119:22">av_log</name><argument_list pos:start="119:23" pos:end="119:84">(<argument pos:start="119:24" pos:end="119:28"><expr pos:start="119:24" pos:end="119:28"><name pos:start="119:24" pos:end="119:28">avctx</name></expr></argument>, <argument pos:start="119:31" pos:end="119:42"><expr pos:start="119:31" pos:end="119:42"><name pos:start="119:31" pos:end="119:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="119:45" pos:end="119:80"><expr pos:start="119:45" pos:end="119:80"><literal type="string" pos:start="119:45" pos:end="119:80">"Decoding sps %d from avcC failed\n"</literal></expr></argument>, <argument pos:start="119:83" pos:end="119:83"><expr pos:start="119:83" pos:end="119:83"><name pos:start="119:83" pos:end="119:83">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="121:17" pos:end="121:26">return <expr pos:start="121:24" pos:end="121:25"><operator pos:start="121:24" pos:end="121:24">-</operator><literal type="number" pos:start="121:25" pos:end="121:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:25"><expr pos:start="125:13" pos:end="125:24"><name pos:start="125:13" pos:end="125:13">p</name> <operator pos:start="125:15" pos:end="125:16">+=</operator> <name pos:start="125:18" pos:end="125:24">nalsize</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <comment type="line" pos:start="129:9" pos:end="129:31">// Decode pps from avcC</comment>

        <expr_stmt pos:start="131:9" pos:end="131:21"><expr pos:start="131:9" pos:end="131:20"><name pos:start="131:9" pos:end="131:11">cnt</name> <operator pos:start="131:13" pos:end="131:13">=</operator> <operator pos:start="131:15" pos:end="131:15">*</operator><operator pos:start="131:16" pos:end="131:16">(</operator><name pos:start="131:17" pos:end="131:17">p</name><operator pos:start="131:18" pos:end="131:19">++</operator><operator pos:start="131:20" pos:end="131:20">)</operator></expr>;</expr_stmt> <comment type="line" pos:start="131:23" pos:end="131:38">// Number of pps</comment>

        <for pos:start="133:9" pos:end="147:9">for <control pos:start="133:13" pos:end="133:33">(<init pos:start="133:14" pos:end="133:19"><expr pos:start="133:14" pos:end="133:18"><name pos:start="133:14" pos:end="133:14">i</name> <operator pos:start="133:16" pos:end="133:16">=</operator> <literal type="number" pos:start="133:18" pos:end="133:18">0</literal></expr>;</init> <condition pos:start="133:21" pos:end="133:28"><expr pos:start="133:21" pos:end="133:27"><name pos:start="133:21" pos:end="133:21">i</name> <operator pos:start="133:23" pos:end="133:23">&lt;</operator> <name pos:start="133:25" pos:end="133:27">cnt</name></expr>;</condition> <incr pos:start="133:30" pos:end="133:32"><expr pos:start="133:30" pos:end="133:32"><name pos:start="133:30" pos:end="133:30">i</name><operator pos:start="133:31" pos:end="133:32">++</operator></expr></incr>)</control> <block pos:start="133:35" pos:end="147:9">{<block_content pos:start="135:13" pos:end="145:25">

            <expr_stmt pos:start="135:13" pos:end="135:37"><expr pos:start="135:13" pos:end="135:36"><name pos:start="135:13" pos:end="135:19">nalsize</name> <operator pos:start="135:21" pos:end="135:21">=</operator> <call pos:start="135:23" pos:end="135:32"><name pos:start="135:23" pos:end="135:29">AV_RB16</name><argument_list pos:start="135:30" pos:end="135:32">(<argument pos:start="135:31" pos:end="135:31"><expr pos:start="135:31" pos:end="135:31"><name pos:start="135:31" pos:end="135:31">p</name></expr></argument>)</argument_list></call> <operator pos:start="135:34" pos:end="135:34">+</operator> <literal type="number" pos:start="135:36" pos:end="135:36">2</literal></expr>;</expr_stmt>

            <if_stmt pos:start="137:13" pos:end="143:13"><if pos:start="137:13" pos:end="143:13">if<condition pos:start="137:15" pos:end="137:59">(<expr pos:start="137:16" pos:end="137:58"><call pos:start="137:16" pos:end="137:46"><name pos:start="137:16" pos:end="137:31">decode_nal_units</name><argument_list pos:start="137:32" pos:end="137:46">(<argument pos:start="137:33" pos:end="137:33"><expr pos:start="137:33" pos:end="137:33"><name pos:start="137:33" pos:end="137:33">h</name></expr></argument>, <argument pos:start="137:36" pos:end="137:36"><expr pos:start="137:36" pos:end="137:36"><name pos:start="137:36" pos:end="137:36">p</name></expr></argument>, <argument pos:start="137:39" pos:end="137:45"><expr pos:start="137:39" pos:end="137:45"><name pos:start="137:39" pos:end="137:45">nalsize</name></expr></argument>)</argument_list></call>  <operator pos:start="137:49" pos:end="137:50">!=</operator> <name pos:start="137:52" pos:end="137:58">nalsize</name></expr>)</condition> <block pos:start="137:61" pos:end="143:13">{<block_content pos:start="139:17" pos:end="141:26">

                <expr_stmt pos:start="139:17" pos:end="139:85"><expr pos:start="139:17" pos:end="139:84"><call pos:start="139:17" pos:end="139:84"><name pos:start="139:17" pos:end="139:22">av_log</name><argument_list pos:start="139:23" pos:end="139:84">(<argument pos:start="139:24" pos:end="139:28"><expr pos:start="139:24" pos:end="139:28"><name pos:start="139:24" pos:end="139:28">avctx</name></expr></argument>, <argument pos:start="139:31" pos:end="139:42"><expr pos:start="139:31" pos:end="139:42"><name pos:start="139:31" pos:end="139:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="139:45" pos:end="139:80"><expr pos:start="139:45" pos:end="139:80"><literal type="string" pos:start="139:45" pos:end="139:80">"Decoding pps %d from avcC failed\n"</literal></expr></argument>, <argument pos:start="139:83" pos:end="139:83"><expr pos:start="139:83" pos:end="139:83"><name pos:start="139:83" pos:end="139:83">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="141:17" pos:end="141:26">return <expr pos:start="141:24" pos:end="141:25"><operator pos:start="141:24" pos:end="141:24">-</operator><literal type="number" pos:start="141:25" pos:end="141:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:25"><expr pos:start="145:13" pos:end="145:24"><name pos:start="145:13" pos:end="145:13">p</name> <operator pos:start="145:15" pos:end="145:16">+=</operator> <name pos:start="145:18" pos:end="145:24">nalsize</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <comment type="line" pos:start="149:9" pos:end="149:84">// Now store right nal length size, that will be use to parse all other nals</comment>

        <expr_stmt pos:start="151:9" pos:end="151:73"><expr pos:start="151:9" pos:end="151:72"><name pos:start="151:9" pos:end="151:26"><name pos:start="151:9" pos:end="151:9">h</name><operator pos:start="151:10" pos:end="151:11">-&gt;</operator><name pos:start="151:12" pos:end="151:26">nal_length_size</name></name> <operator pos:start="151:28" pos:end="151:28">=</operator> <operator pos:start="151:30" pos:end="151:30">(</operator><operator pos:start="151:31" pos:end="151:31">(</operator><operator pos:start="151:32" pos:end="151:32">*</operator><operator pos:start="151:33" pos:end="151:33">(</operator><operator pos:start="151:34" pos:end="151:34">(</operator><operator pos:start="151:35" pos:end="151:35">(</operator><name pos:start="151:36" pos:end="151:39">char</name><operator pos:start="151:40" pos:end="151:40">*</operator><operator pos:start="151:41" pos:end="151:41">)</operator><operator pos:start="151:42" pos:end="151:42">(</operator><name pos:start="151:43" pos:end="151:58"><name pos:start="151:43" pos:end="151:47">avctx</name><operator pos:start="151:48" pos:end="151:49">-&gt;</operator><name pos:start="151:50" pos:end="151:58">extradata</name></name><operator pos:start="151:59" pos:end="151:59">)</operator><operator pos:start="151:60" pos:end="151:60">)</operator><operator pos:start="151:61" pos:end="151:61">+</operator><literal type="number" pos:start="151:62" pos:end="151:62">4</literal><operator pos:start="151:63" pos:end="151:63">)</operator><operator pos:start="151:64" pos:end="151:64">)</operator><operator pos:start="151:65" pos:end="151:65">&amp;</operator><literal type="number" pos:start="151:66" pos:end="151:69">0x03</literal><operator pos:start="151:70" pos:end="151:70">)</operator><operator pos:start="151:71" pos:end="151:71">+</operator><literal type="number" pos:start="151:72" pos:end="151:72">1</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="153:9" pos:end="153:30">// Do not reparse avcC</comment>

        <expr_stmt pos:start="155:9" pos:end="155:24"><expr pos:start="155:9" pos:end="155:23"><name pos:start="155:9" pos:end="155:19"><name pos:start="155:9" pos:end="155:9">h</name><operator pos:start="155:10" pos:end="155:11">-&gt;</operator><name pos:start="155:12" pos:end="155:19">got_avcC</name></name> <operator pos:start="155:21" pos:end="155:21">=</operator> <literal type="number" pos:start="155:23" pos:end="155:23">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="161:5" pos:end="169:5"><if pos:start="161:5" pos:end="169:5">if<condition pos:start="161:7" pos:end="161:62">(<expr pos:start="161:8" pos:end="161:61"><operator pos:start="161:8" pos:end="161:8">!</operator><name pos:start="161:9" pos:end="161:19"><name pos:start="161:9" pos:end="161:9">h</name><operator pos:start="161:10" pos:end="161:11">-&gt;</operator><name pos:start="161:12" pos:end="161:19">got_avcC</name></name> <operator pos:start="161:21" pos:end="161:22">&amp;&amp;</operator> <operator pos:start="161:24" pos:end="161:24">!</operator><name pos:start="161:25" pos:end="161:33"><name pos:start="161:25" pos:end="161:25">h</name><operator pos:start="161:26" pos:end="161:27">-&gt;</operator><name pos:start="161:28" pos:end="161:33">is_avc</name></name> <operator pos:start="161:35" pos:end="161:36">&amp;&amp;</operator> <name pos:start="161:38" pos:end="161:61"><name pos:start="161:38" pos:end="161:38">s</name><operator pos:start="161:39" pos:end="161:40">-&gt;</operator><name pos:start="161:41" pos:end="161:45">avctx</name><operator pos:start="161:46" pos:end="161:47">-&gt;</operator><name pos:start="161:48" pos:end="161:61">extradata_size</name></name></expr>)</condition><block pos:start="161:63" pos:end="169:5">{<block_content pos:start="163:9" pos:end="167:24">

        <if_stmt pos:start="163:9" pos:end="165:22"><if pos:start="163:9" pos:end="165:22">if<condition pos:start="163:11" pos:end="163:82">(<expr pos:start="163:12" pos:end="163:81"><call pos:start="163:12" pos:end="163:77"><name pos:start="163:12" pos:end="163:27">decode_nal_units</name><argument_list pos:start="163:28" pos:end="163:77">(<argument pos:start="163:29" pos:end="163:29"><expr pos:start="163:29" pos:end="163:29"><name pos:start="163:29" pos:end="163:29">h</name></expr></argument>, <argument pos:start="163:32" pos:end="163:50"><expr pos:start="163:32" pos:end="163:50"><name pos:start="163:32" pos:end="163:50"><name pos:start="163:32" pos:end="163:32">s</name><operator pos:start="163:33" pos:end="163:34">-&gt;</operator><name pos:start="163:35" pos:end="163:39">avctx</name><operator pos:start="163:40" pos:end="163:41">-&gt;</operator><name pos:start="163:42" pos:end="163:50">extradata</name></name></expr></argument>, <argument pos:start="163:53" pos:end="163:76"><expr pos:start="163:53" pos:end="163:76"><name pos:start="163:53" pos:end="163:76"><name pos:start="163:53" pos:end="163:53">s</name><operator pos:start="163:54" pos:end="163:55">-&gt;</operator><name pos:start="163:56" pos:end="163:60">avctx</name><operator pos:start="163:61" pos:end="163:62">-&gt;</operator><name pos:start="163:63" pos:end="163:76">extradata_size</name></name></expr></argument>)</argument_list></call> <operator pos:start="163:79" pos:end="163:79">&lt;</operator> <literal type="number" pos:start="163:81" pos:end="163:81">0</literal></expr>)</condition><block type="pseudo" pos:start="165:13" pos:end="165:22"><block_content pos:start="165:13" pos:end="165:22">

            <return pos:start="165:13" pos:end="165:22">return <expr pos:start="165:20" pos:end="165:21"><operator pos:start="165:20" pos:end="165:20">-</operator><literal type="number" pos:start="165:21" pos:end="165:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:24"><expr pos:start="167:9" pos:end="167:23"><name pos:start="167:9" pos:end="167:19"><name pos:start="167:9" pos:end="167:9">h</name><operator pos:start="167:10" pos:end="167:11">-&gt;</operator><name pos:start="167:12" pos:end="167:19">got_avcC</name></name> <operator pos:start="167:21" pos:end="167:21">=</operator> <literal type="number" pos:start="167:23" pos:end="167:23">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:49"><expr pos:start="173:5" pos:end="173:48"><name pos:start="173:5" pos:end="173:13">buf_index</name><operator pos:start="173:14" pos:end="173:14">=</operator><call pos:start="173:15" pos:end="173:48"><name pos:start="173:15" pos:end="173:30">decode_nal_units</name><argument_list pos:start="173:31" pos:end="173:48">(<argument pos:start="173:32" pos:end="173:32"><expr pos:start="173:32" pos:end="173:32"><name pos:start="173:32" pos:end="173:32">h</name></expr></argument>, <argument pos:start="173:35" pos:end="173:37"><expr pos:start="173:35" pos:end="173:37"><name pos:start="173:35" pos:end="173:37">buf</name></expr></argument>, <argument pos:start="173:40" pos:end="173:47"><expr pos:start="173:40" pos:end="173:47"><name pos:start="173:40" pos:end="173:47">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="175:5" pos:end="177:18"><if pos:start="175:5" pos:end="177:18">if<condition pos:start="175:7" pos:end="175:21">(<expr pos:start="175:8" pos:end="175:20"><name pos:start="175:8" pos:end="175:16">buf_index</name> <operator pos:start="175:18" pos:end="175:18">&lt;</operator> <literal type="number" pos:start="175:20" pos:end="175:20">0</literal></expr>)</condition><block type="pseudo" pos:start="177:9" pos:end="177:18"><block_content pos:start="177:9" pos:end="177:18">

        <return pos:start="177:9" pos:end="177:18">return <expr pos:start="177:16" pos:end="177:17"><operator pos:start="177:16" pos:end="177:16">-</operator><literal type="number" pos:start="177:17" pos:end="177:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="181:5" pos:end="189:5"><if pos:start="181:5" pos:end="189:5">if<condition pos:start="181:7" pos:end="181:68">(<expr pos:start="181:8" pos:end="181:67"><operator pos:start="181:8" pos:end="181:8">!</operator><operator pos:start="181:9" pos:end="181:9">(</operator><name pos:start="181:10" pos:end="181:18"><name pos:start="181:10" pos:end="181:10">s</name><operator pos:start="181:11" pos:end="181:12">-&gt;</operator><name pos:start="181:13" pos:end="181:18">flags2</name></name> <operator pos:start="181:20" pos:end="181:20">&amp;</operator> <name pos:start="181:22" pos:end="181:39">CODEC_FLAG2_CHUNKS</name><operator pos:start="181:40" pos:end="181:40">)</operator> <operator pos:start="181:42" pos:end="181:43">&amp;&amp;</operator> <operator pos:start="181:45" pos:end="181:45">!</operator><name pos:start="181:46" pos:end="181:67"><name pos:start="181:46" pos:end="181:46">s</name><operator pos:start="181:47" pos:end="181:48">-&gt;</operator><name pos:start="181:49" pos:end="181:67">current_picture_ptr</name></name></expr>)</condition><block pos:start="181:69" pos:end="189:5">{<block_content pos:start="183:9" pos:end="187:18">

        <if_stmt pos:start="183:9" pos:end="183:75"><if pos:start="183:9" pos:end="183:75">if <condition pos:start="183:12" pos:end="183:65">(<expr pos:start="183:13" pos:end="183:64"><name pos:start="183:13" pos:end="183:29"><name pos:start="183:13" pos:end="183:17">avctx</name><operator pos:start="183:18" pos:end="183:19">-&gt;</operator><name pos:start="183:20" pos:end="183:29">skip_frame</name></name> <operator pos:start="183:31" pos:end="183:32">&gt;=</operator> <name pos:start="183:34" pos:end="183:49">AVDISCARD_NONREF</name> <operator pos:start="183:51" pos:end="183:52">||</operator> <name pos:start="183:54" pos:end="183:64"><name pos:start="183:54" pos:end="183:54">s</name><operator pos:start="183:55" pos:end="183:56">-&gt;</operator><name pos:start="183:57" pos:end="183:64">hurry_up</name></name></expr>)</condition><block type="pseudo" pos:start="183:67" pos:end="183:75"><block_content pos:start="183:67" pos:end="183:75"> <return pos:start="183:67" pos:end="183:75">return <expr pos:start="183:74" pos:end="183:74"><literal type="number" pos:start="183:74" pos:end="183:74">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:51"><expr pos:start="185:9" pos:end="185:50"><call pos:start="185:9" pos:end="185:50"><name pos:start="185:9" pos:end="185:14">av_log</name><argument_list pos:start="185:15" pos:end="185:50">(<argument pos:start="185:16" pos:end="185:20"><expr pos:start="185:16" pos:end="185:20"><name pos:start="185:16" pos:end="185:20">avctx</name></expr></argument>, <argument pos:start="185:23" pos:end="185:34"><expr pos:start="185:23" pos:end="185:34"><name pos:start="185:23" pos:end="185:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="185:37" pos:end="185:49"><expr pos:start="185:37" pos:end="185:49"><literal type="string" pos:start="185:37" pos:end="185:49">"no frame!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="187:9" pos:end="187:18">return <expr pos:start="187:16" pos:end="187:17"><operator pos:start="187:16" pos:end="187:16">-</operator><literal type="number" pos:start="187:17" pos:end="187:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="193:5" pos:end="439:5"><if pos:start="193:5" pos:end="439:5">if<condition pos:start="193:7" pos:end="193:86">(<expr pos:start="193:8" pos:end="193:85"><operator pos:start="193:8" pos:end="193:8">!</operator><operator pos:start="193:9" pos:end="193:9">(</operator><name pos:start="193:10" pos:end="193:18"><name pos:start="193:10" pos:end="193:10">s</name><operator pos:start="193:11" pos:end="193:12">-&gt;</operator><name pos:start="193:13" pos:end="193:18">flags2</name></name> <operator pos:start="193:20" pos:end="193:20">&amp;</operator> <name pos:start="193:22" pos:end="193:39">CODEC_FLAG2_CHUNKS</name><operator pos:start="193:40" pos:end="193:40">)</operator> <operator pos:start="193:42" pos:end="193:43">||</operator> <operator pos:start="193:45" pos:end="193:45">(</operator><name pos:start="193:46" pos:end="193:52"><name pos:start="193:46" pos:end="193:46">s</name><operator pos:start="193:47" pos:end="193:48">-&gt;</operator><name pos:start="193:49" pos:end="193:52">mb_y</name></name> <operator pos:start="193:54" pos:end="193:55">&gt;=</operator> <name pos:start="193:57" pos:end="193:68"><name pos:start="193:57" pos:end="193:57">s</name><operator pos:start="193:58" pos:end="193:59">-&gt;</operator><name pos:start="193:60" pos:end="193:68">mb_height</name></name> <operator pos:start="193:70" pos:end="193:71">&amp;&amp;</operator> <name pos:start="193:73" pos:end="193:84"><name pos:start="193:73" pos:end="193:73">s</name><operator pos:start="193:74" pos:end="193:75">-&gt;</operator><name pos:start="193:76" pos:end="193:84">mb_height</name></name><operator pos:start="193:85" pos:end="193:85">)</operator></expr>)</condition><block pos:start="193:87" pos:end="439:5">{<block_content pos:start="195:9" pos:end="437:9">

        <decl_stmt pos:start="195:9" pos:end="195:46"><decl pos:start="195:9" pos:end="195:45"><type pos:start="195:9" pos:end="195:17"><name pos:start="195:9" pos:end="195:15">Picture</name> <modifier pos:start="195:17" pos:end="195:17">*</modifier></type><name pos:start="195:18" pos:end="195:20">out</name> <init pos:start="195:22" pos:end="195:45">= <expr pos:start="195:24" pos:end="195:45"><name pos:start="195:24" pos:end="195:45"><name pos:start="195:24" pos:end="195:24">s</name><operator pos:start="195:25" pos:end="195:26">-&gt;</operator><name pos:start="195:27" pos:end="195:45">current_picture_ptr</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="197:9" pos:end="197:46"><decl pos:start="197:9" pos:end="197:45"><type pos:start="197:9" pos:end="197:17"><name pos:start="197:9" pos:end="197:15">Picture</name> <modifier pos:start="197:17" pos:end="197:17">*</modifier></type><name pos:start="197:18" pos:end="197:20">cur</name> <init pos:start="197:22" pos:end="197:45">= <expr pos:start="197:24" pos:end="197:45"><name pos:start="197:24" pos:end="197:45"><name pos:start="197:24" pos:end="197:24">s</name><operator pos:start="197:25" pos:end="197:26">-&gt;</operator><name pos:start="197:27" pos:end="197:45">current_picture_ptr</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="199:9" pos:end="199:54"><decl pos:start="199:9" pos:end="199:13"><type pos:start="199:9" pos:end="199:11"><name pos:start="199:9" pos:end="199:11">int</name></type> <name pos:start="199:13" pos:end="199:13">i</name></decl>, <decl pos:start="199:16" pos:end="199:19"><type ref="prev" pos:start="199:9" pos:end="199:11"/><name pos:start="199:16" pos:end="199:19">pics</name></decl>, <decl pos:start="199:22" pos:end="199:30"><type ref="prev" pos:start="199:9" pos:end="199:11"/><name pos:start="199:22" pos:end="199:30">cross_idr</name></decl>, <decl pos:start="199:33" pos:end="199:44"><type ref="prev" pos:start="199:9" pos:end="199:11"/><name pos:start="199:33" pos:end="199:44">out_of_order</name></decl>, <decl pos:start="199:47" pos:end="199:53"><type ref="prev" pos:start="199:9" pos:end="199:11"/><name pos:start="199:47" pos:end="199:53">out_idx</name></decl>;</decl_stmt>



        <expr_stmt pos:start="203:9" pos:end="203:21"><expr pos:start="203:9" pos:end="203:20"><call pos:start="203:9" pos:end="203:20"><name pos:start="203:9" pos:end="203:17">field_end</name><argument_list pos:start="203:18" pos:end="203:20">(<argument pos:start="203:19" pos:end="203:19"><expr pos:start="203:19" pos:end="203:19"><name pos:start="203:19" pos:end="203:19">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="207:9" pos:end="437:9"><if pos:start="207:9" pos:end="215:9">if <condition pos:start="207:12" pos:end="207:69">(<expr pos:start="207:13" pos:end="207:68"><name pos:start="207:13" pos:end="207:29"><name pos:start="207:13" pos:end="207:15">cur</name><operator pos:start="207:16" pos:end="207:17">-&gt;</operator><name pos:start="207:18" pos:end="207:26">field_poc</name><index pos:start="207:27" pos:end="207:29">[<expr pos:start="207:28" pos:end="207:28"><literal type="number" pos:start="207:28" pos:end="207:28">0</literal></expr>]</index></name><operator pos:start="207:30" pos:end="207:31">==</operator><name pos:start="207:32" pos:end="207:38">INT_MAX</name> <operator pos:start="207:40" pos:end="207:41">||</operator> <name pos:start="207:43" pos:end="207:59"><name pos:start="207:43" pos:end="207:45">cur</name><operator pos:start="207:46" pos:end="207:47">-&gt;</operator><name pos:start="207:48" pos:end="207:56">field_poc</name><index pos:start="207:57" pos:end="207:59">[<expr pos:start="207:58" pos:end="207:58"><literal type="number" pos:start="207:58" pos:end="207:58">1</literal></expr>]</index></name><operator pos:start="207:60" pos:end="207:61">==</operator><name pos:start="207:62" pos:end="207:68">INT_MAX</name></expr>)</condition> <block pos:start="207:71" pos:end="215:9">{<block_content pos:start="211:13" pos:end="211:27">

            <comment type="block" pos:start="209:13" pos:end="209:40">/* Wait for second field. */</comment>

            <expr_stmt pos:start="211:13" pos:end="211:27"><expr pos:start="211:13" pos:end="211:26"><operator pos:start="211:13" pos:end="211:13">*</operator><name pos:start="211:14" pos:end="211:22">data_size</name> <operator pos:start="211:24" pos:end="211:24">=</operator> <literal type="number" pos:start="211:26" pos:end="211:26">0</literal></expr>;</expr_stmt>



        </block_content>}</block></if> <else pos:start="215:11" pos:end="437:9">else <block pos:start="215:16" pos:end="437:9">{<block_content pos:start="217:13" pos:end="435:13">

            <expr_stmt pos:start="217:13" pos:end="217:33"><expr pos:start="217:13" pos:end="217:32"><name pos:start="217:13" pos:end="217:28"><name pos:start="217:13" pos:end="217:15">cur</name><operator pos:start="217:16" pos:end="217:17">-&gt;</operator><name pos:start="217:18" pos:end="217:28">repeat_pict</name></name> <operator pos:start="217:30" pos:end="217:30">=</operator> <literal type="number" pos:start="217:32" pos:end="217:32">0</literal></expr>;</expr_stmt>



            <comment type="block" pos:start="221:13" pos:end="221:60">/* Signal interlacing information externally. */</comment>

            <comment type="block" pos:start="223:13" pos:end="223:100">/* Prioritize picture timing SEI information over used decoding process if it exists. */</comment>

            <if_stmt pos:start="225:13" pos:end="231:63"><if pos:start="225:13" pos:end="227:71">if <condition pos:start="225:16" pos:end="225:31">(<expr pos:start="225:17" pos:end="225:30"><name pos:start="225:17" pos:end="225:30"><name pos:start="225:17" pos:end="225:17">h</name><operator pos:start="225:18" pos:end="225:19">-&gt;</operator><name pos:start="225:20" pos:end="225:30">sei_ct_type</name></name></expr>)</condition><block type="pseudo" pos:start="227:17" pos:end="227:71"><block_content pos:start="227:17" pos:end="227:71">

                <expr_stmt pos:start="227:17" pos:end="227:71"><expr pos:start="227:17" pos:end="227:70"><name pos:start="227:17" pos:end="227:37"><name pos:start="227:17" pos:end="227:19">cur</name><operator pos:start="227:20" pos:end="227:21">-&gt;</operator><name pos:start="227:22" pos:end="227:37">interlaced_frame</name></name> <operator pos:start="227:39" pos:end="227:39">=</operator> <operator pos:start="227:41" pos:end="227:41">(</operator><name pos:start="227:42" pos:end="227:55"><name pos:start="227:42" pos:end="227:42">h</name><operator pos:start="227:43" pos:end="227:44">-&gt;</operator><name pos:start="227:45" pos:end="227:55">sei_ct_type</name></name> <operator pos:start="227:57" pos:end="227:57">&amp;</operator> <operator pos:start="227:59" pos:end="227:59">(</operator><literal type="number" pos:start="227:60" pos:end="227:60">1</literal><operator pos:start="227:61" pos:end="227:62">&lt;&lt;</operator><literal type="number" pos:start="227:63" pos:end="227:63">1</literal><operator pos:start="227:64" pos:end="227:64">)</operator><operator pos:start="227:65" pos:end="227:65">)</operator> <operator pos:start="227:67" pos:end="227:68">!=</operator> <literal type="number" pos:start="227:70" pos:end="227:70">0</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="229:13" pos:end="231:63">else<block type="pseudo" pos:start="231:17" pos:end="231:63"><block_content pos:start="231:17" pos:end="231:63">

                <expr_stmt pos:start="231:17" pos:end="231:63"><expr pos:start="231:17" pos:end="231:62"><name pos:start="231:17" pos:end="231:37"><name pos:start="231:17" pos:end="231:19">cur</name><operator pos:start="231:20" pos:end="231:21">-&gt;</operator><name pos:start="231:22" pos:end="231:37">interlaced_frame</name></name> <operator pos:start="231:39" pos:end="231:39">=</operator> <name pos:start="231:41" pos:end="231:62">FIELD_OR_MBAFF_PICTURE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <if_stmt pos:start="235:13" pos:end="279:13"><if pos:start="235:13" pos:end="273:13">if<condition pos:start="235:15" pos:end="235:46">(<expr pos:start="235:16" pos:end="235:45"><name pos:start="235:16" pos:end="235:45"><name pos:start="235:16" pos:end="235:16">h</name><operator pos:start="235:17" pos:end="235:18">-&gt;</operator><name pos:start="235:19" pos:end="235:21">sps</name><operator pos:start="235:22" pos:end="235:22">.</operator><name pos:start="235:23" pos:end="235:45">pic_struct_present_flag</name></name></expr>)</condition><block pos:start="235:47" pos:end="273:13">{<block_content pos:start="237:17" pos:end="271:17">

                <switch pos:start="237:17" pos:end="271:17">switch <condition pos:start="237:24" pos:end="237:42">(<expr pos:start="237:25" pos:end="237:41"><name pos:start="237:25" pos:end="237:41"><name pos:start="237:25" pos:end="237:25">h</name><operator pos:start="237:26" pos:end="237:27">-&gt;</operator><name pos:start="237:28" pos:end="237:41">sei_pic_struct</name></name></expr>)</condition>

                <block pos:start="239:17" pos:end="271:17">{<block_content pos:start="241:17" pos:end="269:26">

                <case pos:start="241:17" pos:end="241:51">case <expr pos:start="241:22" pos:end="241:50"><name pos:start="241:22" pos:end="241:50">SEI_PIC_STRUCT_TOP_BOTTOM_TOP</name></expr>:</case>

                <case pos:start="243:17" pos:end="243:54">case <expr pos:start="243:22" pos:end="243:53"><name pos:start="243:22" pos:end="243:53">SEI_PIC_STRUCT_BOTTOM_TOP_BOTTOM</name></expr>:</case>

                    <comment type="line" pos:start="245:21" pos:end="245:91">// Signal the possibility of telecined film externally (pic_struct 5,6)</comment>

                    <comment type="line" pos:start="247:21" pos:end="247:97">// From these hints, let the applications decide if they apply deinterlacing.</comment>

                    <expr_stmt pos:start="249:21" pos:end="249:41"><expr pos:start="249:21" pos:end="249:40"><name pos:start="249:21" pos:end="249:36"><name pos:start="249:21" pos:end="249:23">cur</name><operator pos:start="249:24" pos:end="249:25">-&gt;</operator><name pos:start="249:26" pos:end="249:36">repeat_pict</name></name> <operator pos:start="249:38" pos:end="249:38">=</operator> <literal type="number" pos:start="249:40" pos:end="249:40">1</literal></expr>;</expr_stmt>

                    <break pos:start="251:21" pos:end="251:26">break;</break>

                <case pos:start="253:17" pos:end="253:51">case <expr pos:start="253:22" pos:end="253:50"><name pos:start="253:22" pos:end="253:50">SEI_PIC_STRUCT_FRAME_DOUBLING</name></expr>:</case>

                    <comment type="line" pos:start="255:21" pos:end="255:90">// Force progressive here, as doubling interlaced frame is a bad idea.</comment>

                    <expr_stmt pos:start="257:21" pos:end="257:46"><expr pos:start="257:21" pos:end="257:45"><name pos:start="257:21" pos:end="257:41"><name pos:start="257:21" pos:end="257:23">cur</name><operator pos:start="257:24" pos:end="257:25">-&gt;</operator><name pos:start="257:26" pos:end="257:41">interlaced_frame</name></name> <operator pos:start="257:43" pos:end="257:43">=</operator> <literal type="number" pos:start="257:45" pos:end="257:45">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="259:21" pos:end="259:41"><expr pos:start="259:21" pos:end="259:40"><name pos:start="259:21" pos:end="259:36"><name pos:start="259:21" pos:end="259:23">cur</name><operator pos:start="259:24" pos:end="259:25">-&gt;</operator><name pos:start="259:26" pos:end="259:36">repeat_pict</name></name> <operator pos:start="259:38" pos:end="259:38">=</operator> <literal type="number" pos:start="259:40" pos:end="259:40">2</literal></expr>;</expr_stmt>

                    <break pos:start="261:21" pos:end="261:26">break;</break>

                <case pos:start="263:17" pos:end="263:51">case <expr pos:start="263:22" pos:end="263:50"><name pos:start="263:22" pos:end="263:50">SEI_PIC_STRUCT_FRAME_TRIPLING</name></expr>:</case>

                    <expr_stmt pos:start="265:21" pos:end="265:46"><expr pos:start="265:21" pos:end="265:45"><name pos:start="265:21" pos:end="265:41"><name pos:start="265:21" pos:end="265:23">cur</name><operator pos:start="265:24" pos:end="265:25">-&gt;</operator><name pos:start="265:26" pos:end="265:41">interlaced_frame</name></name> <operator pos:start="265:43" pos:end="265:43">=</operator> <literal type="number" pos:start="265:45" pos:end="265:45">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="267:21" pos:end="267:41"><expr pos:start="267:21" pos:end="267:40"><name pos:start="267:21" pos:end="267:36"><name pos:start="267:21" pos:end="267:23">cur</name><operator pos:start="267:24" pos:end="267:25">-&gt;</operator><name pos:start="267:26" pos:end="267:36">repeat_pict</name></name> <operator pos:start="267:38" pos:end="267:38">=</operator> <literal type="number" pos:start="267:40" pos:end="267:40">4</literal></expr>;</expr_stmt>

                    <break pos:start="269:21" pos:end="269:26">break;</break>

                </block_content>}</block></switch>

            </block_content>}</block></if><else pos:start="273:14" pos:end="279:13">else<block pos:start="273:18" pos:end="279:13">{<block_content pos:start="277:17" pos:end="277:63">

                <comment type="block" pos:start="275:17" pos:end="275:73">/* Derive interlacing flag from used decoding process. */</comment>

                <expr_stmt pos:start="277:17" pos:end="277:63"><expr pos:start="277:17" pos:end="277:62"><name pos:start="277:17" pos:end="277:37"><name pos:start="277:17" pos:end="277:19">cur</name><operator pos:start="277:20" pos:end="277:21">-&gt;</operator><name pos:start="277:22" pos:end="277:37">interlaced_frame</name></name> <operator pos:start="277:39" pos:end="277:39">=</operator> <name pos:start="277:41" pos:end="277:62">FIELD_OR_MBAFF_PICTURE</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="283:13" pos:end="313:13"><if pos:start="283:13" pos:end="289:13">if <condition pos:start="283:16" pos:end="283:55">(<expr pos:start="283:17" pos:end="283:54"><name pos:start="283:17" pos:end="283:33"><name pos:start="283:17" pos:end="283:19">cur</name><operator pos:start="283:20" pos:end="283:21">-&gt;</operator><name pos:start="283:22" pos:end="283:30">field_poc</name><index pos:start="283:31" pos:end="283:33">[<expr pos:start="283:32" pos:end="283:32"><literal type="number" pos:start="283:32" pos:end="283:32">0</literal></expr>]</index></name> <operator pos:start="283:35" pos:end="283:36">!=</operator> <name pos:start="283:38" pos:end="283:54"><name pos:start="283:38" pos:end="283:40">cur</name><operator pos:start="283:41" pos:end="283:42">-&gt;</operator><name pos:start="283:43" pos:end="283:51">field_poc</name><index pos:start="283:52" pos:end="283:54">[<expr pos:start="283:53" pos:end="283:53"><literal type="number" pos:start="283:53" pos:end="283:53">1</literal></expr>]</index></name></expr>)</condition><block pos:start="283:56" pos:end="289:13">{<block_content pos:start="287:17" pos:end="287:77">

                <comment type="block" pos:start="285:17" pos:end="285:61">/* Derive top_field_first from field pocs. */</comment>

                <expr_stmt pos:start="287:17" pos:end="287:77"><expr pos:start="287:17" pos:end="287:76"><name pos:start="287:17" pos:end="287:36"><name pos:start="287:17" pos:end="287:19">cur</name><operator pos:start="287:20" pos:end="287:21">-&gt;</operator><name pos:start="287:22" pos:end="287:36">top_field_first</name></name> <operator pos:start="287:38" pos:end="287:38">=</operator> <name pos:start="287:40" pos:end="287:56"><name pos:start="287:40" pos:end="287:42">cur</name><operator pos:start="287:43" pos:end="287:44">-&gt;</operator><name pos:start="287:45" pos:end="287:53">field_poc</name><index pos:start="287:54" pos:end="287:56">[<expr pos:start="287:55" pos:end="287:55"><literal type="number" pos:start="287:55" pos:end="287:55">0</literal></expr>]</index></name> <operator pos:start="287:58" pos:end="287:58">&lt;</operator> <name pos:start="287:60" pos:end="287:76"><name pos:start="287:60" pos:end="287:62">cur</name><operator pos:start="287:63" pos:end="287:64">-&gt;</operator><name pos:start="287:65" pos:end="287:73">field_poc</name><index pos:start="287:74" pos:end="287:76">[<expr pos:start="287:75" pos:end="287:75"><literal type="number" pos:start="287:75" pos:end="287:75">1</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if><else pos:start="289:14" pos:end="313:13">else<block pos:start="289:18" pos:end="313:13">{<block_content pos:start="291:17" pos:end="311:17">

                <if_stmt pos:start="291:17" pos:end="311:17"><if pos:start="291:17" pos:end="305:17">if<condition pos:start="291:19" pos:end="291:75">(<expr pos:start="291:20" pos:end="291:74"><name pos:start="291:20" pos:end="291:40"><name pos:start="291:20" pos:end="291:22">cur</name><operator pos:start="291:23" pos:end="291:24">-&gt;</operator><name pos:start="291:25" pos:end="291:40">interlaced_frame</name></name> <operator pos:start="291:42" pos:end="291:43">||</operator> <name pos:start="291:45" pos:end="291:74"><name pos:start="291:45" pos:end="291:45">h</name><operator pos:start="291:46" pos:end="291:47">-&gt;</operator><name pos:start="291:48" pos:end="291:50">sps</name><operator pos:start="291:51" pos:end="291:51">.</operator><name pos:start="291:52" pos:end="291:74">pic_struct_present_flag</name></name></expr>)</condition><block pos:start="291:76" pos:end="305:17">{<block_content pos:start="295:21" pos:end="303:49">

                    <comment type="block" pos:start="293:21" pos:end="293:127">/* Use picture timing SEI information. Even if it is a information of a past frame, better than nothing. */</comment>

                    <if_stmt pos:start="295:21" pos:end="303:49"><if pos:start="295:21" pos:end="299:49">if<condition pos:start="295:23" pos:end="297:76">(<expr pos:start="295:24" pos:end="297:75"><name pos:start="295:24" pos:end="295:40"><name pos:start="295:24" pos:end="295:24">h</name><operator pos:start="295:25" pos:end="295:26">-&gt;</operator><name pos:start="295:27" pos:end="295:40">sei_pic_struct</name></name> <operator pos:start="295:42" pos:end="295:43">==</operator> <name pos:start="295:45" pos:end="295:69">SEI_PIC_STRUCT_TOP_BOTTOM</name>

                      <operator pos:start="297:23" pos:end="297:24">||</operator> <name pos:start="297:26" pos:end="297:42"><name pos:start="297:26" pos:end="297:26">h</name><operator pos:start="297:27" pos:end="297:28">-&gt;</operator><name pos:start="297:29" pos:end="297:42">sei_pic_struct</name></name> <operator pos:start="297:44" pos:end="297:45">==</operator> <name pos:start="297:47" pos:end="297:75">SEI_PIC_STRUCT_TOP_BOTTOM_TOP</name></expr>)</condition><block type="pseudo" pos:start="299:25" pos:end="299:49"><block_content pos:start="299:25" pos:end="299:49">

                        <expr_stmt pos:start="299:25" pos:end="299:49"><expr pos:start="299:25" pos:end="299:48"><name pos:start="299:25" pos:end="299:44"><name pos:start="299:25" pos:end="299:27">cur</name><operator pos:start="299:28" pos:end="299:29">-&gt;</operator><name pos:start="299:30" pos:end="299:44">top_field_first</name></name> <operator pos:start="299:46" pos:end="299:46">=</operator> <literal type="number" pos:start="299:48" pos:end="299:48">1</literal></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="301:21" pos:end="303:49">else<block type="pseudo" pos:start="303:25" pos:end="303:49"><block_content pos:start="303:25" pos:end="303:49">

                        <expr_stmt pos:start="303:25" pos:end="303:49"><expr pos:start="303:25" pos:end="303:48"><name pos:start="303:25" pos:end="303:44"><name pos:start="303:25" pos:end="303:27">cur</name><operator pos:start="303:28" pos:end="303:29">-&gt;</operator><name pos:start="303:30" pos:end="303:44">top_field_first</name></name> <operator pos:start="303:46" pos:end="303:46">=</operator> <literal type="number" pos:start="303:48" pos:end="303:48">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                </block_content>}</block></if><else pos:start="305:18" pos:end="311:17">else<block pos:start="305:22" pos:end="311:17">{<block_content pos:start="309:21" pos:end="309:45">

                    <comment type="block" pos:start="307:21" pos:end="307:49">/* Most likely progressive */</comment>

                    <expr_stmt pos:start="309:21" pos:end="309:45"><expr pos:start="309:21" pos:end="309:44"><name pos:start="309:21" pos:end="309:40"><name pos:start="309:21" pos:end="309:23">cur</name><operator pos:start="309:24" pos:end="309:25">-&gt;</operator><name pos:start="309:26" pos:end="309:40">top_field_first</name></name> <operator pos:start="309:42" pos:end="309:42">=</operator> <literal type="number" pos:start="309:44" pos:end="309:44">0</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>



        <comment type="line" pos:start="317:9" pos:end="317:62">//FIXME do something with unavailable reference frames</comment>



            <comment type="block" pos:start="321:13" pos:end="321:50">/* Sort B-frames into display order */</comment>



            <if_stmt pos:start="325:13" pos:end="333:13"><if pos:start="325:13" pos:end="333:13">if<condition pos:start="325:15" pos:end="327:69">(<expr pos:start="325:16" pos:end="327:68"><name pos:start="325:16" pos:end="325:48"><name pos:start="325:16" pos:end="325:16">h</name><operator pos:start="325:17" pos:end="325:18">-&gt;</operator><name pos:start="325:19" pos:end="325:21">sps</name><operator pos:start="325:22" pos:end="325:22">.</operator><name pos:start="325:23" pos:end="325:48">bitstream_restriction_flag</name></name>

               <operator pos:start="327:16" pos:end="327:17">&amp;&amp;</operator> <name pos:start="327:19" pos:end="327:40"><name pos:start="327:19" pos:end="327:19">s</name><operator pos:start="327:20" pos:end="327:21">-&gt;</operator><name pos:start="327:22" pos:end="327:26">avctx</name><operator pos:start="327:27" pos:end="327:28">-&gt;</operator><name pos:start="327:29" pos:end="327:40">has_b_frames</name></name> <operator pos:start="327:42" pos:end="327:42">&lt;</operator> <name pos:start="327:44" pos:end="327:68"><name pos:start="327:44" pos:end="327:44">h</name><operator pos:start="327:45" pos:end="327:46">-&gt;</operator><name pos:start="327:47" pos:end="327:49">sps</name><operator pos:start="327:50" pos:end="327:50">.</operator><name pos:start="327:51" pos:end="327:68">num_reorder_frames</name></name></expr>)</condition><block pos:start="327:70" pos:end="333:13">{<block_content pos:start="329:17" pos:end="331:33">

                <expr_stmt pos:start="329:17" pos:end="329:67"><expr pos:start="329:17" pos:end="329:66"><name pos:start="329:17" pos:end="329:38"><name pos:start="329:17" pos:end="329:17">s</name><operator pos:start="329:18" pos:end="329:19">-&gt;</operator><name pos:start="329:20" pos:end="329:24">avctx</name><operator pos:start="329:25" pos:end="329:26">-&gt;</operator><name pos:start="329:27" pos:end="329:38">has_b_frames</name></name> <operator pos:start="329:40" pos:end="329:40">=</operator> <name pos:start="329:42" pos:end="329:66"><name pos:start="329:42" pos:end="329:42">h</name><operator pos:start="329:43" pos:end="329:44">-&gt;</operator><name pos:start="329:45" pos:end="329:47">sps</name><operator pos:start="329:48" pos:end="329:48">.</operator><name pos:start="329:49" pos:end="329:66">num_reorder_frames</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="331:17" pos:end="331:33"><expr pos:start="331:17" pos:end="331:32"><name pos:start="331:17" pos:end="331:28"><name pos:start="331:17" pos:end="331:17">s</name><operator pos:start="331:18" pos:end="331:19">-&gt;</operator><name pos:start="331:20" pos:end="331:28">low_delay</name></name> <operator pos:start="331:30" pos:end="331:30">=</operator> <literal type="number" pos:start="331:32" pos:end="331:32">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="337:13" pos:end="345:13"><if pos:start="337:13" pos:end="345:13">if<condition pos:start="337:15" pos:end="339:53">(   <expr pos:start="337:19" pos:end="339:52"><name pos:start="337:19" pos:end="337:49"><name pos:start="337:19" pos:end="337:19">s</name><operator pos:start="337:20" pos:end="337:21">-&gt;</operator><name pos:start="337:22" pos:end="337:26">avctx</name><operator pos:start="337:27" pos:end="337:28">-&gt;</operator><name pos:start="337:29" pos:end="337:49">strict_std_compliance</name></name> <operator pos:start="337:51" pos:end="337:52">&gt;=</operator> <name pos:start="337:54" pos:end="337:73">FF_COMPLIANCE_STRICT</name>

               <operator pos:start="339:16" pos:end="339:17">&amp;&amp;</operator> <operator pos:start="339:19" pos:end="339:19">!</operator><name pos:start="339:20" pos:end="339:52"><name pos:start="339:20" pos:end="339:20">h</name><operator pos:start="339:21" pos:end="339:22">-&gt;</operator><name pos:start="339:23" pos:end="339:25">sps</name><operator pos:start="339:26" pos:end="339:26">.</operator><name pos:start="339:27" pos:end="339:52">bitstream_restriction_flag</name></name></expr>)</condition><block pos:start="339:54" pos:end="345:13">{<block_content pos:start="341:17" pos:end="343:32">

                <expr_stmt pos:start="341:17" pos:end="341:62"><expr pos:start="341:17" pos:end="341:61"><name pos:start="341:17" pos:end="341:38"><name pos:start="341:17" pos:end="341:17">s</name><operator pos:start="341:18" pos:end="341:19">-&gt;</operator><name pos:start="341:20" pos:end="341:24">avctx</name><operator pos:start="341:25" pos:end="341:26">-&gt;</operator><name pos:start="341:27" pos:end="341:38">has_b_frames</name></name><operator pos:start="341:39" pos:end="341:39">=</operator> <name pos:start="341:41" pos:end="341:61">MAX_DELAYED_PIC_COUNT</name></expr>;</expr_stmt>

                <expr_stmt pos:start="343:17" pos:end="343:32"><expr pos:start="343:17" pos:end="343:31"><name pos:start="343:17" pos:end="343:28"><name pos:start="343:17" pos:end="343:17">s</name><operator pos:start="343:18" pos:end="343:19">-&gt;</operator><name pos:start="343:20" pos:end="343:28">low_delay</name></name><operator pos:start="343:29" pos:end="343:29">=</operator> <literal type="number" pos:start="343:31" pos:end="343:31">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="349:13" pos:end="349:21"><expr pos:start="349:13" pos:end="349:20"><name pos:start="349:13" pos:end="349:16">pics</name> <operator pos:start="349:18" pos:end="349:18">=</operator> <literal type="number" pos:start="349:20" pos:end="349:20">0</literal></expr>;</expr_stmt>

            <while pos:start="351:13" pos:end="351:47">while<condition pos:start="351:18" pos:end="351:39">(<expr pos:start="351:19" pos:end="351:38"><name pos:start="351:19" pos:end="351:38"><name pos:start="351:19" pos:end="351:19">h</name><operator pos:start="351:20" pos:end="351:21">-&gt;</operator><name pos:start="351:22" pos:end="351:32">delayed_pic</name><index pos:start="351:33" pos:end="351:38">[<expr pos:start="351:34" pos:end="351:37"><name pos:start="351:34" pos:end="351:37">pics</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="351:41" pos:end="351:47"><block_content pos:start="351:41" pos:end="351:47"> <expr_stmt pos:start="351:41" pos:end="351:47"><expr pos:start="351:41" pos:end="351:46"><name pos:start="351:41" pos:end="351:44">pics</name><operator pos:start="351:45" pos:end="351:46">++</operator></expr>;</expr_stmt></block_content></block></while>



            <expr_stmt pos:start="355:13" pos:end="355:50"><expr pos:start="355:13" pos:end="355:49"><call pos:start="355:13" pos:end="355:49"><name pos:start="355:13" pos:end="355:18">assert</name><argument_list pos:start="355:19" pos:end="355:49">(<argument pos:start="355:20" pos:end="355:48"><expr pos:start="355:20" pos:end="355:48"><name pos:start="355:20" pos:end="355:23">pics</name> <operator pos:start="355:25" pos:end="355:26">&lt;=</operator> <name pos:start="355:28" pos:end="355:48">MAX_DELAYED_PIC_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="359:13" pos:end="359:41"><expr pos:start="359:13" pos:end="359:40"><name pos:start="359:13" pos:end="359:34"><name pos:start="359:13" pos:end="359:13">h</name><operator pos:start="359:14" pos:end="359:15">-&gt;</operator><name pos:start="359:16" pos:end="359:26">delayed_pic</name><index pos:start="359:27" pos:end="359:34">[<expr pos:start="359:28" pos:end="359:33"><name pos:start="359:28" pos:end="359:31">pics</name><operator pos:start="359:32" pos:end="359:33">++</operator></expr>]</index></name> <operator pos:start="359:36" pos:end="359:36">=</operator> <name pos:start="359:38" pos:end="359:40">cur</name></expr>;</expr_stmt>

            <if_stmt pos:start="361:13" pos:end="363:49"><if pos:start="361:13" pos:end="363:49">if<condition pos:start="361:15" pos:end="361:35">(<expr pos:start="361:16" pos:end="361:34"><name pos:start="361:16" pos:end="361:29"><name pos:start="361:16" pos:end="361:18">cur</name><operator pos:start="361:19" pos:end="361:20">-&gt;</operator><name pos:start="361:21" pos:end="361:29">reference</name></name> <operator pos:start="361:31" pos:end="361:32">==</operator> <literal type="number" pos:start="361:34" pos:end="361:34">0</literal></expr>)</condition><block type="pseudo" pos:start="363:17" pos:end="363:49"><block_content pos:start="363:17" pos:end="363:49">

                <expr_stmt pos:start="363:17" pos:end="363:49"><expr pos:start="363:17" pos:end="363:48"><name pos:start="363:17" pos:end="363:30"><name pos:start="363:17" pos:end="363:19">cur</name><operator pos:start="363:20" pos:end="363:21">-&gt;</operator><name pos:start="363:22" pos:end="363:30">reference</name></name> <operator pos:start="363:32" pos:end="363:32">=</operator> <name pos:start="363:34" pos:end="363:48">DELAYED_PIC_REF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="367:13" pos:end="367:36"><expr pos:start="367:13" pos:end="367:35"><name pos:start="367:13" pos:end="367:15">out</name> <operator pos:start="367:17" pos:end="367:17">=</operator> <name pos:start="367:19" pos:end="367:35"><name pos:start="367:19" pos:end="367:19">h</name><operator pos:start="367:20" pos:end="367:21">-&gt;</operator><name pos:start="367:22" pos:end="367:32">delayed_pic</name><index pos:start="367:33" pos:end="367:35">[<expr pos:start="367:34" pos:end="367:34"><literal type="number" pos:start="367:34" pos:end="367:34">0</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="369:13" pos:end="369:24"><expr pos:start="369:13" pos:end="369:23"><name pos:start="369:13" pos:end="369:19">out_idx</name> <operator pos:start="369:21" pos:end="369:21">=</operator> <literal type="number" pos:start="369:23" pos:end="369:23">0</literal></expr>;</expr_stmt>

            <for pos:start="371:13" pos:end="379:17">for<control pos:start="371:16" pos:end="371:105">(<init pos:start="371:17" pos:end="371:20"><expr pos:start="371:17" pos:end="371:19"><name pos:start="371:17" pos:end="371:17">i</name><operator pos:start="371:18" pos:end="371:18">=</operator><literal type="number" pos:start="371:19" pos:end="371:19">1</literal></expr>;</init> <condition pos:start="371:22" pos:end="371:100"><expr pos:start="371:22" pos:end="371:99"><name pos:start="371:22" pos:end="371:38"><name pos:start="371:22" pos:end="371:22">h</name><operator pos:start="371:23" pos:end="371:24">-&gt;</operator><name pos:start="371:25" pos:end="371:35">delayed_pic</name><index pos:start="371:36" pos:end="371:38">[<expr pos:start="371:37" pos:end="371:37"><name pos:start="371:37" pos:end="371:37">i</name></expr>]</index></name> <operator pos:start="371:40" pos:end="371:41">&amp;&amp;</operator> <operator pos:start="371:43" pos:end="371:43">(</operator><name pos:start="371:44" pos:end="371:60"><name pos:start="371:44" pos:end="371:44">h</name><operator pos:start="371:45" pos:end="371:46">-&gt;</operator><name pos:start="371:47" pos:end="371:57">delayed_pic</name><index pos:start="371:58" pos:end="371:60">[<expr pos:start="371:59" pos:end="371:59"><name pos:start="371:59" pos:end="371:59">i</name></expr>]</index></name><operator pos:start="371:61" pos:end="371:62">-&gt;</operator><name pos:start="371:63" pos:end="371:65">poc</name> <operator pos:start="371:67" pos:end="371:68">&amp;&amp;</operator> <operator pos:start="371:70" pos:end="371:70">!</operator><name pos:start="371:71" pos:end="371:87"><name pos:start="371:71" pos:end="371:71">h</name><operator pos:start="371:72" pos:end="371:73">-&gt;</operator><name pos:start="371:74" pos:end="371:84">delayed_pic</name><index pos:start="371:85" pos:end="371:87">[<expr pos:start="371:86" pos:end="371:86"><name pos:start="371:86" pos:end="371:86">i</name></expr>]</index></name><operator pos:start="371:88" pos:end="371:89">-&gt;</operator><name pos:start="371:90" pos:end="371:98">key_frame</name><operator pos:start="371:99" pos:end="371:99">)</operator></expr>;</condition> <incr pos:start="371:102" pos:end="371:104"><expr pos:start="371:102" pos:end="371:104"><name pos:start="371:102" pos:end="371:102">i</name><operator pos:start="371:103" pos:end="371:104">++</operator></expr></incr>)</control><block type="pseudo" pos:start="373:17" pos:end="379:17"><block_content pos:start="373:17" pos:end="379:17">

                <if_stmt pos:start="373:17" pos:end="379:17"><if pos:start="373:17" pos:end="379:17">if<condition pos:start="373:19" pos:end="373:53">(<expr pos:start="373:20" pos:end="373:52"><name pos:start="373:20" pos:end="373:36"><name pos:start="373:20" pos:end="373:20">h</name><operator pos:start="373:21" pos:end="373:22">-&gt;</operator><name pos:start="373:23" pos:end="373:33">delayed_pic</name><index pos:start="373:34" pos:end="373:36">[<expr pos:start="373:35" pos:end="373:35"><name pos:start="373:35" pos:end="373:35">i</name></expr>]</index></name><operator pos:start="373:37" pos:end="373:38">-&gt;</operator><name pos:start="373:39" pos:end="373:41">poc</name> <operator pos:start="373:43" pos:end="373:43">&lt;</operator> <name pos:start="373:45" pos:end="373:52"><name pos:start="373:45" pos:end="373:47">out</name><operator pos:start="373:48" pos:end="373:49">-&gt;</operator><name pos:start="373:50" pos:end="373:52">poc</name></name></expr>)</condition><block pos:start="373:54" pos:end="379:17">{<block_content pos:start="375:21" pos:end="377:32">

                    <expr_stmt pos:start="375:21" pos:end="375:44"><expr pos:start="375:21" pos:end="375:43"><name pos:start="375:21" pos:end="375:23">out</name> <operator pos:start="375:25" pos:end="375:25">=</operator> <name pos:start="375:27" pos:end="375:43"><name pos:start="375:27" pos:end="375:27">h</name><operator pos:start="375:28" pos:end="375:29">-&gt;</operator><name pos:start="375:30" pos:end="375:40">delayed_pic</name><index pos:start="375:41" pos:end="375:43">[<expr pos:start="375:42" pos:end="375:42"><name pos:start="375:42" pos:end="375:42">i</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="377:21" pos:end="377:32"><expr pos:start="377:21" pos:end="377:31"><name pos:start="377:21" pos:end="377:27">out_idx</name> <operator pos:start="377:29" pos:end="377:29">=</operator> <name pos:start="377:31" pos:end="377:31">i</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt></block_content></block></for>

            <expr_stmt pos:start="381:13" pos:end="381:103"><expr pos:start="381:13" pos:end="381:102"><name pos:start="381:13" pos:end="381:21">cross_idr</name> <operator pos:start="381:23" pos:end="381:23">=</operator> <operator pos:start="381:25" pos:end="381:25">!</operator><name pos:start="381:26" pos:end="381:42"><name pos:start="381:26" pos:end="381:26">h</name><operator pos:start="381:27" pos:end="381:28">-&gt;</operator><name pos:start="381:29" pos:end="381:39">delayed_pic</name><index pos:start="381:40" pos:end="381:42">[<expr pos:start="381:41" pos:end="381:41"><literal type="number" pos:start="381:41" pos:end="381:41">0</literal></expr>]</index></name><operator pos:start="381:43" pos:end="381:44">-&gt;</operator><name pos:start="381:45" pos:end="381:47">poc</name> <operator pos:start="381:49" pos:end="381:50">||</operator> <operator pos:start="381:52" pos:end="381:52">!</operator><operator pos:start="381:53" pos:end="381:53">!</operator><name pos:start="381:54" pos:end="381:70"><name pos:start="381:54" pos:end="381:54">h</name><operator pos:start="381:55" pos:end="381:56">-&gt;</operator><name pos:start="381:57" pos:end="381:67">delayed_pic</name><index pos:start="381:68" pos:end="381:70">[<expr pos:start="381:69" pos:end="381:69"><name pos:start="381:69" pos:end="381:69">i</name></expr>]</index></name> <operator pos:start="381:72" pos:end="381:73">||</operator> <name pos:start="381:75" pos:end="381:91"><name pos:start="381:75" pos:end="381:75">h</name><operator pos:start="381:76" pos:end="381:77">-&gt;</operator><name pos:start="381:78" pos:end="381:88">delayed_pic</name><index pos:start="381:89" pos:end="381:91">[<expr pos:start="381:90" pos:end="381:90"><literal type="number" pos:start="381:90" pos:end="381:90">0</literal></expr>]</index></name><operator pos:start="381:92" pos:end="381:93">-&gt;</operator><name pos:start="381:94" pos:end="381:102">key_frame</name></expr>;</expr_stmt>



            <expr_stmt pos:start="385:13" pos:end="385:68"><expr pos:start="385:13" pos:end="385:67"><name pos:start="385:13" pos:end="385:24">out_of_order</name> <operator pos:start="385:26" pos:end="385:26">=</operator> <operator pos:start="385:28" pos:end="385:28">!</operator><name pos:start="385:29" pos:end="385:37">cross_idr</name> <operator pos:start="385:39" pos:end="385:40">&amp;&amp;</operator> <name pos:start="385:42" pos:end="385:49"><name pos:start="385:42" pos:end="385:44">out</name><operator pos:start="385:45" pos:end="385:46">-&gt;</operator><name pos:start="385:47" pos:end="385:49">poc</name></name> <operator pos:start="385:51" pos:end="385:51">&lt;</operator> <name pos:start="385:53" pos:end="385:67"><name pos:start="385:53" pos:end="385:53">h</name><operator pos:start="385:54" pos:end="385:55">-&gt;</operator><name pos:start="385:56" pos:end="385:67">outputed_poc</name></name></expr>;</expr_stmt>



            <if_stmt pos:start="389:13" pos:end="407:13"><if pos:start="389:13" pos:end="391:19">if<condition pos:start="389:15" pos:end="389:104">(<expr pos:start="389:16" pos:end="389:103"><name pos:start="389:16" pos:end="389:48"><name pos:start="389:16" pos:end="389:16">h</name><operator pos:start="389:17" pos:end="389:18">-&gt;</operator><name pos:start="389:19" pos:end="389:21">sps</name><operator pos:start="389:22" pos:end="389:22">.</operator><name pos:start="389:23" pos:end="389:48">bitstream_restriction_flag</name></name> <operator pos:start="389:50" pos:end="389:51">&amp;&amp;</operator> <name pos:start="389:53" pos:end="389:74"><name pos:start="389:53" pos:end="389:53">s</name><operator pos:start="389:54" pos:end="389:55">-&gt;</operator><name pos:start="389:56" pos:end="389:60">avctx</name><operator pos:start="389:61" pos:end="389:62">-&gt;</operator><name pos:start="389:63" pos:end="389:74">has_b_frames</name></name> <operator pos:start="389:76" pos:end="389:77">&gt;=</operator> <name pos:start="389:79" pos:end="389:103"><name pos:start="389:79" pos:end="389:79">h</name><operator pos:start="389:80" pos:end="389:81">-&gt;</operator><name pos:start="389:82" pos:end="389:84">sps</name><operator pos:start="389:85" pos:end="389:85">.</operator><name pos:start="389:86" pos:end="389:103">num_reorder_frames</name></name></expr>)</condition>

                <block pos:start="391:17" pos:end="391:19">{<block_content> </block_content>}</block></if>

            <if type="elseif" pos:start="393:13" pos:end="407:13">else if<condition pos:start="393:20" pos:end="399:50">(<expr pos:start="393:21" pos:end="399:49"><operator pos:start="393:21" pos:end="393:21">(</operator><name pos:start="393:22" pos:end="393:33">out_of_order</name> <operator pos:start="393:35" pos:end="393:36">&amp;&amp;</operator> <name pos:start="393:38" pos:end="393:41">pics</name><operator pos:start="393:42" pos:end="393:42">-</operator><literal type="number" pos:start="393:43" pos:end="393:43">1</literal> <operator pos:start="393:45" pos:end="393:46">==</operator> <name pos:start="393:48" pos:end="393:69"><name pos:start="393:48" pos:end="393:48">s</name><operator pos:start="393:49" pos:end="393:50">-&gt;</operator><name pos:start="393:51" pos:end="393:55">avctx</name><operator pos:start="393:56" pos:end="393:57">-&gt;</operator><name pos:start="393:58" pos:end="393:69">has_b_frames</name></name> <operator pos:start="393:71" pos:end="393:72">&amp;&amp;</operator> <name pos:start="393:74" pos:end="393:95"><name pos:start="393:74" pos:end="393:74">s</name><operator pos:start="393:75" pos:end="393:76">-&gt;</operator><name pos:start="393:77" pos:end="393:81">avctx</name><operator pos:start="393:82" pos:end="393:83">-&gt;</operator><name pos:start="393:84" pos:end="393:95">has_b_frames</name></name> <operator pos:start="393:97" pos:end="393:97">&lt;</operator> <name pos:start="393:99" pos:end="393:119">MAX_DELAYED_PIC_COUNT</name><operator pos:start="393:120" pos:end="393:120">)</operator>

               <operator pos:start="395:16" pos:end="395:17">||</operator> <operator pos:start="395:19" pos:end="395:19">(</operator><name pos:start="395:20" pos:end="395:31"><name pos:start="395:20" pos:end="395:20">s</name><operator pos:start="395:21" pos:end="395:22">-&gt;</operator><name pos:start="395:23" pos:end="395:31">low_delay</name></name> <operator pos:start="395:33" pos:end="395:34">&amp;&amp;</operator>

                <operator pos:start="397:17" pos:end="397:17">(</operator><operator pos:start="397:18" pos:end="397:18">(</operator><operator pos:start="397:19" pos:end="397:19">!</operator><name pos:start="397:20" pos:end="397:28">cross_idr</name> <operator pos:start="397:30" pos:end="397:31">&amp;&amp;</operator> <name pos:start="397:33" pos:end="397:40"><name pos:start="397:33" pos:end="397:35">out</name><operator pos:start="397:36" pos:end="397:37">-&gt;</operator><name pos:start="397:38" pos:end="397:40">poc</name></name> <operator pos:start="397:42" pos:end="397:42">&gt;</operator> <name pos:start="397:44" pos:end="397:58"><name pos:start="397:44" pos:end="397:44">h</name><operator pos:start="397:45" pos:end="397:46">-&gt;</operator><name pos:start="397:47" pos:end="397:58">outputed_poc</name></name> <operator pos:start="397:60" pos:end="397:60">+</operator> <literal type="number" pos:start="397:62" pos:end="397:62">2</literal><operator pos:start="397:63" pos:end="397:63">)</operator>

                 <operator pos:start="399:18" pos:end="399:19">||</operator> <name pos:start="399:21" pos:end="399:34"><name pos:start="399:21" pos:end="399:23">cur</name><operator pos:start="399:24" pos:end="399:25">-&gt;</operator><name pos:start="399:26" pos:end="399:34">pict_type</name></name> <operator pos:start="399:36" pos:end="399:37">==</operator> <name pos:start="399:39" pos:end="399:47">FF_B_TYPE</name><operator pos:start="399:48" pos:end="399:48">)</operator><operator pos:start="399:49" pos:end="399:49">)</operator></expr>)</condition>

            <block pos:start="401:13" pos:end="407:13">{<block_content pos:start="403:17" pos:end="405:41">

                <expr_stmt pos:start="403:17" pos:end="403:33"><expr pos:start="403:17" pos:end="403:32"><name pos:start="403:17" pos:end="403:28"><name pos:start="403:17" pos:end="403:17">s</name><operator pos:start="403:18" pos:end="403:19">-&gt;</operator><name pos:start="403:20" pos:end="403:28">low_delay</name></name> <operator pos:start="403:30" pos:end="403:30">=</operator> <literal type="number" pos:start="403:32" pos:end="403:32">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="405:17" pos:end="405:41"><expr pos:start="405:17" pos:end="405:40"><name pos:start="405:17" pos:end="405:38"><name pos:start="405:17" pos:end="405:17">s</name><operator pos:start="405:18" pos:end="405:19">-&gt;</operator><name pos:start="405:20" pos:end="405:24">avctx</name><operator pos:start="405:25" pos:end="405:26">-&gt;</operator><name pos:start="405:27" pos:end="405:38">has_b_frames</name></name><operator pos:start="405:39" pos:end="405:40">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="411:13" pos:end="419:13"><if pos:start="411:13" pos:end="419:13">if<condition pos:start="411:15" pos:end="411:61">(<expr pos:start="411:16" pos:end="411:60"><name pos:start="411:16" pos:end="411:27">out_of_order</name> <operator pos:start="411:29" pos:end="411:30">||</operator> <name pos:start="411:32" pos:end="411:35">pics</name> <operator pos:start="411:37" pos:end="411:37">&gt;</operator> <name pos:start="411:39" pos:end="411:60"><name pos:start="411:39" pos:end="411:39">s</name><operator pos:start="411:40" pos:end="411:41">-&gt;</operator><name pos:start="411:42" pos:end="411:46">avctx</name><operator pos:start="411:47" pos:end="411:48">-&gt;</operator><name pos:start="411:49" pos:end="411:60">has_b_frames</name></name></expr>)</condition><block pos:start="411:62" pos:end="419:13">{<block_content pos:start="413:17" pos:end="417:60">

                <expr_stmt pos:start="413:17" pos:end="413:51"><expr pos:start="413:17" pos:end="413:50"><name pos:start="413:17" pos:end="413:30"><name pos:start="413:17" pos:end="413:19">out</name><operator pos:start="413:20" pos:end="413:21">-&gt;</operator><name pos:start="413:22" pos:end="413:30">reference</name></name> <operator pos:start="413:32" pos:end="413:33">&amp;=</operator> <operator pos:start="413:35" pos:end="413:35">~</operator><name pos:start="413:36" pos:end="413:50">DELAYED_PIC_REF</name></expr>;</expr_stmt>

                <for pos:start="415:17" pos:end="417:60">for<control pos:start="415:20" pos:end="415:54">(<init pos:start="415:21" pos:end="415:30"><expr pos:start="415:21" pos:end="415:29"><name pos:start="415:21" pos:end="415:21">i</name><operator pos:start="415:22" pos:end="415:22">=</operator><name pos:start="415:23" pos:end="415:29">out_idx</name></expr>;</init> <condition pos:start="415:32" pos:end="415:49"><expr pos:start="415:32" pos:end="415:48"><name pos:start="415:32" pos:end="415:48"><name pos:start="415:32" pos:end="415:32">h</name><operator pos:start="415:33" pos:end="415:34">-&gt;</operator><name pos:start="415:35" pos:end="415:45">delayed_pic</name><index pos:start="415:46" pos:end="415:48">[<expr pos:start="415:47" pos:end="415:47"><name pos:start="415:47" pos:end="415:47">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="415:51" pos:end="415:53"><expr pos:start="415:51" pos:end="415:53"><name pos:start="415:51" pos:end="415:51">i</name><operator pos:start="415:52" pos:end="415:53">++</operator></expr></incr>)</control><block type="pseudo" pos:start="417:21" pos:end="417:60"><block_content pos:start="417:21" pos:end="417:60">

                    <expr_stmt pos:start="417:21" pos:end="417:60"><expr pos:start="417:21" pos:end="417:59"><name pos:start="417:21" pos:end="417:37"><name pos:start="417:21" pos:end="417:21">h</name><operator pos:start="417:22" pos:end="417:23">-&gt;</operator><name pos:start="417:24" pos:end="417:34">delayed_pic</name><index pos:start="417:35" pos:end="417:37">[<expr pos:start="417:36" pos:end="417:36"><name pos:start="417:36" pos:end="417:36">i</name></expr>]</index></name> <operator pos:start="417:39" pos:end="417:39">=</operator> <name pos:start="417:41" pos:end="417:59"><name pos:start="417:41" pos:end="417:41">h</name><operator pos:start="417:42" pos:end="417:43">-&gt;</operator><name pos:start="417:44" pos:end="417:54">delayed_pic</name><index pos:start="417:55" pos:end="417:59">[<expr pos:start="417:56" pos:end="417:58"><name pos:start="417:56" pos:end="417:56">i</name><operator pos:start="417:57" pos:end="417:57">+</operator><literal type="number" pos:start="417:58" pos:end="417:58">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="421:13" pos:end="435:13"><if pos:start="421:13" pos:end="431:13">if<condition pos:start="421:15" pos:end="421:62">(<expr pos:start="421:16" pos:end="421:61"><operator pos:start="421:16" pos:end="421:16">!</operator><name pos:start="421:17" pos:end="421:28">out_of_order</name> <operator pos:start="421:30" pos:end="421:31">&amp;&amp;</operator> <name pos:start="421:33" pos:end="421:36">pics</name> <operator pos:start="421:38" pos:end="421:38">&gt;</operator> <name pos:start="421:40" pos:end="421:61"><name pos:start="421:40" pos:end="421:40">s</name><operator pos:start="421:41" pos:end="421:42">-&gt;</operator><name pos:start="421:43" pos:end="421:47">avctx</name><operator pos:start="421:48" pos:end="421:49">-&gt;</operator><name pos:start="421:50" pos:end="421:61">has_b_frames</name></name></expr>)</condition><block pos:start="421:63" pos:end="431:13">{<block_content pos:start="423:17" pos:end="429:38">

                <expr_stmt pos:start="423:17" pos:end="423:45"><expr pos:start="423:17" pos:end="423:44"><operator pos:start="423:17" pos:end="423:17">*</operator><name pos:start="423:18" pos:end="423:26">data_size</name> <operator pos:start="423:28" pos:end="423:28">=</operator> <sizeof pos:start="423:30" pos:end="423:44">sizeof<argument_list pos:start="423:36" pos:end="423:44">(<argument pos:start="423:37" pos:end="423:43"><expr pos:start="423:37" pos:end="423:43"><name pos:start="423:37" pos:end="423:43">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



                <expr_stmt pos:start="427:17" pos:end="427:43"><expr pos:start="427:17" pos:end="427:42"><name pos:start="427:17" pos:end="427:31"><name pos:start="427:17" pos:end="427:17">h</name><operator pos:start="427:18" pos:end="427:19">-&gt;</operator><name pos:start="427:20" pos:end="427:31">outputed_poc</name></name> <operator pos:start="427:33" pos:end="427:33">=</operator> <name pos:start="427:35" pos:end="427:42"><name pos:start="427:35" pos:end="427:37">out</name><operator pos:start="427:38" pos:end="427:39">-&gt;</operator><name pos:start="427:40" pos:end="427:42">poc</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="429:17" pos:end="429:38"><expr pos:start="429:17" pos:end="429:37"><operator pos:start="429:17" pos:end="429:17">*</operator><name pos:start="429:18" pos:end="429:21">pict</name><operator pos:start="429:22" pos:end="429:22">=</operator> <operator pos:start="429:24" pos:end="429:24">*</operator><operator pos:start="429:25" pos:end="429:25">(</operator><name pos:start="429:26" pos:end="429:32">AVFrame</name><operator pos:start="429:33" pos:end="429:33">*</operator><operator pos:start="429:34" pos:end="429:34">)</operator><name pos:start="429:35" pos:end="429:37">out</name></expr>;</expr_stmt>

            </block_content>}</block></if><else pos:start="431:14" pos:end="435:13">else<block pos:start="431:18" pos:end="435:13">{<block_content pos:start="433:17" pos:end="433:60">

                <expr_stmt pos:start="433:17" pos:end="433:60"><expr pos:start="433:17" pos:end="433:59"><call pos:start="433:17" pos:end="433:59"><name pos:start="433:17" pos:end="433:22">av_log</name><argument_list pos:start="433:23" pos:end="433:59">(<argument pos:start="433:24" pos:end="433:28"><expr pos:start="433:24" pos:end="433:28"><name pos:start="433:24" pos:end="433:28">avctx</name></expr></argument>, <argument pos:start="433:31" pos:end="433:42"><expr pos:start="433:31" pos:end="433:42"><name pos:start="433:31" pos:end="433:42">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="433:45" pos:end="433:58"><expr pos:start="433:45" pos:end="433:58"><literal type="string" pos:start="433:45" pos:end="433:58">"no picture\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="443:5" pos:end="443:41"><expr pos:start="443:5" pos:end="443:40"><call pos:start="443:5" pos:end="443:40"><name pos:start="443:5" pos:end="443:10">assert</name><argument_list pos:start="443:11" pos:end="443:40">(<argument pos:start="443:12" pos:end="443:39"><expr pos:start="443:12" pos:end="443:39"><name pos:start="443:12" pos:end="443:24"><name pos:start="443:12" pos:end="443:15">pict</name><operator pos:start="443:16" pos:end="443:17">-&gt;</operator><name pos:start="443:18" pos:end="443:21">data</name><index pos:start="443:22" pos:end="443:24">[<expr pos:start="443:23" pos:end="443:23"><literal type="number" pos:start="443:23" pos:end="443:23">0</literal></expr>]</index></name> <operator pos:start="443:26" pos:end="443:27">||</operator> <operator pos:start="443:29" pos:end="443:29">!</operator><operator pos:start="443:30" pos:end="443:30">*</operator><name pos:start="443:31" pos:end="443:39">data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="445:5" pos:end="460:0"><expr pos:start="445:5" pos:end="445:32"><call pos:start="445:5" pos:end="445:32"><name pos:start="445:5" pos:end="445:23">ff_print_debug_info</name><argument_list pos:start="445:24" pos:end="445:32">(<argument pos:start="445:25" pos:end="445:25"><expr pos:start="445:25" pos:end="445:25"><name pos:start="445:25" pos:end="445:25">s</name></expr></argument>, <argument pos:start="445:28" pos:end="445:31"><expr pos:start="445:28" pos:end="445:31"><name pos:start="445:28" pos:end="445:31">pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:start="447:1" pos:end="447:41">//printf("out %d\n", (int)pict-&gt;data[0]);</comment>

<cpp:if pos:start="449:1" pos:end="449:5">#<cpp:directive pos:start="449:2" pos:end="449:3">if</cpp:directive> <expr pos:start="449:5" pos:end="449:5"><literal type="number" pos:start="449:5" pos:end="449:5">0</literal></expr></cpp:if> <comment type="line" pos:start="449:7" pos:end="449:9">//?</comment>



    <comment type="block" pos:start="453:5" pos:end="453:58">/* Return the Picture timestamp as the frame number */</comment>

    <comment type="block" pos:start="455:5" pos:end="455:58">/* we subtract 1 because it is added on utils.c     */</comment>

    avctx-&gt;frame_number = s-&gt;picture_number - 1;

<cpp:endif pos:start="459:1" pos:end="459:6">#<cpp:directive pos:start="459:2" pos:end="459:6">endif</cpp:directive></cpp:endif>

    <return pos:start="461:5" pos:end="461:54">return <expr pos:start="461:12" pos:end="461:53"><call pos:start="461:12" pos:end="461:53"><name pos:start="461:12" pos:end="461:29">get_consumed_bytes</name><argument_list pos:start="461:30" pos:end="461:53">(<argument pos:start="461:31" pos:end="461:31"><expr pos:start="461:31" pos:end="461:31"><name pos:start="461:31" pos:end="461:31">s</name></expr></argument>, <argument pos:start="461:34" pos:end="461:42"><expr pos:start="461:34" pos:end="461:42"><name pos:start="461:34" pos:end="461:42">buf_index</name></expr></argument>, <argument pos:start="461:45" pos:end="461:52"><expr pos:start="461:45" pos:end="461:52"><name pos:start="461:45" pos:end="461:52">buf_size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
