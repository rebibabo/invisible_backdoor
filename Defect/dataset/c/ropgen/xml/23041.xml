<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23041.c" pos:tabs="8"><function pos:start="1:1" pos:end="181:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">msi_write_config</name><parameter_list pos:start="1:22" pos:end="1:75">(<parameter pos:start="1:23" pos:end="1:36"><decl pos:start="1:23" pos:end="1:36"><type pos:start="1:23" pos:end="1:36"><name pos:start="1:23" pos:end="1:31">PCIDevice</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">dev</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:51"><decl pos:start="1:39" pos:end="1:51"><type pos:start="1:39" pos:end="1:51"><name pos:start="1:39" pos:end="1:46">uint32_t</name></type> <name pos:start="1:48" pos:end="1:51">addr</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:65"><decl pos:start="1:54" pos:end="1:65"><type pos:start="1:54" pos:end="1:65"><name pos:start="1:54" pos:end="1:61">uint32_t</name></type> <name pos:start="1:63" pos:end="1:65">val</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:74"><decl pos:start="1:68" pos:end="1:74"><type pos:start="1:68" pos:end="1:74"><name pos:start="1:68" pos:end="1:70">int</name></type> <name pos:start="1:72" pos:end="1:74">len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="181:1">{<block_content pos:start="5:5" pos:end="179:5">

    <decl_stmt pos:start="5:5" pos:end="5:68"><decl pos:start="5:5" pos:end="5:67"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint16_t</name></type> <name pos:start="5:14" pos:end="5:18">flags</name> <init pos:start="5:20" pos:end="5:67">= <expr pos:start="5:22" pos:end="5:67"><call pos:start="5:22" pos:end="5:67"><name pos:start="5:22" pos:end="5:33">pci_get_word</name><argument_list pos:start="5:34" pos:end="5:67">(<argument pos:start="5:35" pos:end="5:66"><expr pos:start="5:35" pos:end="5:66"><name pos:start="5:35" pos:end="5:45"><name pos:start="5:35" pos:end="5:37">dev</name><operator pos:start="5:38" pos:end="5:39">-&gt;</operator><name pos:start="5:40" pos:end="5:45">config</name></name> <operator pos:start="5:47" pos:end="5:47">+</operator> <call pos:start="5:49" pos:end="5:66"><name pos:start="5:49" pos:end="5:61">msi_flags_off</name><argument_list pos:start="5:62" pos:end="5:66">(<argument pos:start="5:63" pos:end="5:65"><expr pos:start="5:63" pos:end="5:65"><name pos:start="5:63" pos:end="5:65">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:48"><decl pos:start="7:5" pos:end="7:47"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:17">msi64bit</name> <init pos:start="7:19" pos:end="7:47">= <expr pos:start="7:21" pos:end="7:47"><name pos:start="7:21" pos:end="7:25">flags</name> <operator pos:start="7:27" pos:end="7:27">&amp;</operator> <name pos:start="7:29" pos:end="7:47">PCI_MSI_FLAGS_64BIT</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:61"><decl pos:start="9:5" pos:end="9:60"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:28">msi_per_vector_mask</name> <init pos:start="9:30" pos:end="9:60">= <expr pos:start="9:32" pos:end="9:60"><name pos:start="9:32" pos:end="9:36">flags</name> <operator pos:start="9:38" pos:end="9:38">&amp;</operator> <name pos:start="9:40" pos:end="9:60">PCI_MSI_FLAGS_MASKBIT</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:27">nr_vectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:24">log_num_vecs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">uint8_t</name></type> <name pos:start="15:13" pos:end="15:24">log_max_vecs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name></type> <name pos:start="17:18" pos:end="17:23">vector</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:20">pending</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="32:0"><if pos:start="23:5" pos:end="32:0">if <condition pos:start="23:8" pos:end="23:72">(<expr pos:start="23:9" pos:end="23:71"><operator pos:start="23:9" pos:end="23:9">!</operator><call pos:start="23:10" pos:end="23:71"><name pos:start="23:10" pos:end="23:23">ranges_overlap</name><argument_list pos:start="23:24" pos:end="23:71">(<argument pos:start="23:25" pos:end="23:28"><expr pos:start="23:25" pos:end="23:28"><name pos:start="23:25" pos:end="23:28">addr</name></expr></argument>, <argument pos:start="23:31" pos:end="23:33"><expr pos:start="23:31" pos:end="23:33"><name pos:start="23:31" pos:end="23:33">len</name></expr></argument>, <argument pos:start="23:36" pos:end="23:47"><expr pos:start="23:36" pos:end="23:47"><name pos:start="23:36" pos:end="23:47"><name pos:start="23:36" pos:end="23:38">dev</name><operator pos:start="23:39" pos:end="23:40">-&gt;</operator><name pos:start="23:41" pos:end="23:47">msi_cap</name></name></expr></argument>, <argument pos:start="23:50" pos:end="23:70"><expr pos:start="23:50" pos:end="23:70"><call pos:start="23:50" pos:end="23:70"><name pos:start="23:50" pos:end="23:63">msi_cap_sizeof</name><argument_list pos:start="23:64" pos:end="23:70">(<argument pos:start="23:65" pos:end="23:69"><expr pos:start="23:65" pos:end="23:69"><name pos:start="23:65" pos:end="23:69">flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:74" pos:end="32:0">{<block_content pos:start="25:9" pos:end="25:15">

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="31:1" pos:end="31:16">#<cpp:directive pos:start="31:2" pos:end="31:6">ifdef</cpp:directive> <name pos:start="31:8" pos:end="31:16">MSI_DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="33:5" pos:end="35:35"><expr pos:start="33:5" pos:end="35:34"><call pos:start="33:5" pos:end="35:34"><name pos:start="33:5" pos:end="33:18">MSI_DEV_PRINTF</name><argument_list pos:start="33:19" pos:end="35:34">(<argument pos:start="33:20" pos:end="33:22"><expr pos:start="33:20" pos:end="33:22"><name pos:start="33:20" pos:end="33:22">dev</name></expr></argument>, <argument pos:start="33:25" pos:end="33:67"><expr pos:start="33:25" pos:end="33:67"><literal type="string" pos:start="33:25" pos:end="33:34">"addr 0x%"</literal><name pos:start="33:35" pos:end="33:40">PRIx32</name><literal type="string" pos:start="33:41" pos:end="33:50">" val 0x%"</literal><name pos:start="33:51" pos:end="33:56">PRIx32</name><literal type="string" pos:start="33:57" pos:end="33:67">" len %d\n"</literal></expr></argument>,

                   <argument pos:start="35:20" pos:end="35:23"><expr pos:start="35:20" pos:end="35:23"><name pos:start="35:20" pos:end="35:23">addr</name></expr></argument>, <argument pos:start="35:26" pos:end="35:28"><expr pos:start="35:26" pos:end="35:28"><name pos:start="35:26" pos:end="35:28">val</name></expr></argument>, <argument pos:start="35:31" pos:end="35:33"><expr pos:start="35:31" pos:end="35:33"><name pos:start="35:31" pos:end="35:33">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="41:72"><expr pos:start="37:5" pos:end="41:71"><call pos:start="37:5" pos:end="41:71"><name pos:start="37:5" pos:end="37:18">MSI_DEV_PRINTF</name><argument_list pos:start="37:19" pos:end="41:71">(<argument pos:start="37:20" pos:end="37:22"><expr pos:start="37:20" pos:end="37:22"><name pos:start="37:20" pos:end="37:22">dev</name></expr></argument>, <argument pos:start="37:25" pos:end="37:62"><expr pos:start="37:25" pos:end="37:62"><literal type="string" pos:start="37:25" pos:end="37:35">"ctrl: 0x%"</literal><name pos:start="37:36" pos:end="37:41">PRIx16</name><literal type="string" pos:start="37:42" pos:end="37:56">" address: 0x%"</literal><name pos:start="37:57" pos:end="37:62">PRIx32</name></expr></argument>,

                   <argument pos:start="39:20" pos:end="39:24"><expr pos:start="39:20" pos:end="39:24"><name pos:start="39:20" pos:end="39:24">flags</name></expr></argument>,

                   <argument pos:start="41:20" pos:end="41:70"><expr pos:start="41:20" pos:end="41:70"><call pos:start="41:20" pos:end="41:70"><name pos:start="41:20" pos:end="41:31">pci_get_long</name><argument_list pos:start="41:32" pos:end="41:70">(<argument pos:start="41:33" pos:end="41:69"><expr pos:start="41:33" pos:end="41:69"><name pos:start="41:33" pos:end="41:43"><name pos:start="41:33" pos:end="41:35">dev</name><operator pos:start="41:36" pos:end="41:37">-&gt;</operator><name pos:start="41:38" pos:end="41:43">config</name></name> <operator pos:start="41:45" pos:end="41:45">+</operator> <call pos:start="41:47" pos:end="41:69"><name pos:start="41:47" pos:end="41:64">msi_address_lo_off</name><argument_list pos:start="41:65" pos:end="41:69">(<argument pos:start="41:66" pos:end="41:68"><expr pos:start="41:66" pos:end="41:68"><name pos:start="41:66" pos:end="41:68">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:17">(<expr pos:start="43:9" pos:end="43:16"><name pos:start="43:9" pos:end="43:16">msi64bit</name></expr>)</condition> <block pos:start="43:19" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:69">

        <expr_stmt pos:start="45:9" pos:end="47:69"><expr pos:start="45:9" pos:end="47:68"><call pos:start="45:9" pos:end="47:68"><name pos:start="45:9" pos:end="45:15">fprintf</name><argument_list pos:start="45:16" pos:end="47:68">(<argument pos:start="45:17" pos:end="45:22"><expr pos:start="45:17" pos:end="45:22"><name pos:start="45:17" pos:end="45:22">stderr</name></expr></argument>, <argument pos:start="45:25" pos:end="45:48"><expr pos:start="45:25" pos:end="45:48"><literal type="string" pos:start="45:25" pos:end="45:42">" address-hi: 0x%"</literal><name pos:start="45:43" pos:end="45:48">PRIx32</name></expr></argument>,

                <argument pos:start="47:17" pos:end="47:67"><expr pos:start="47:17" pos:end="47:67"><call pos:start="47:17" pos:end="47:67"><name pos:start="47:17" pos:end="47:28">pci_get_long</name><argument_list pos:start="47:29" pos:end="47:67">(<argument pos:start="47:30" pos:end="47:66"><expr pos:start="47:30" pos:end="47:66"><name pos:start="47:30" pos:end="47:40"><name pos:start="47:30" pos:end="47:32">dev</name><operator pos:start="47:33" pos:end="47:34">-&gt;</operator><name pos:start="47:35" pos:end="47:40">config</name></name> <operator pos:start="47:42" pos:end="47:42">+</operator> <call pos:start="47:44" pos:end="47:66"><name pos:start="47:44" pos:end="47:61">msi_address_hi_off</name><argument_list pos:start="47:62" pos:end="47:66">(<argument pos:start="47:63" pos:end="47:65"><expr pos:start="47:63" pos:end="47:65"><name pos:start="47:63" pos:end="47:65">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="51:5" pos:end="53:69"><expr pos:start="51:5" pos:end="53:68"><call pos:start="51:5" pos:end="53:68"><name pos:start="51:5" pos:end="51:11">fprintf</name><argument_list pos:start="51:12" pos:end="53:68">(<argument pos:start="51:13" pos:end="51:18"><expr pos:start="51:13" pos:end="51:18"><name pos:start="51:13" pos:end="51:18">stderr</name></expr></argument>, <argument pos:start="51:21" pos:end="51:38"><expr pos:start="51:21" pos:end="51:38"><literal type="string" pos:start="51:21" pos:end="51:32">" data: 0x%"</literal><name pos:start="51:33" pos:end="51:38">PRIx16</name></expr></argument>,

            <argument pos:start="53:13" pos:end="53:67"><expr pos:start="53:13" pos:end="53:67"><call pos:start="53:13" pos:end="53:67"><name pos:start="53:13" pos:end="53:24">pci_get_word</name><argument_list pos:start="53:25" pos:end="53:67">(<argument pos:start="53:26" pos:end="53:66"><expr pos:start="53:26" pos:end="53:66"><name pos:start="53:26" pos:end="53:36"><name pos:start="53:26" pos:end="53:28">dev</name><operator pos:start="53:29" pos:end="53:30">-&gt;</operator><name pos:start="53:31" pos:end="53:36">config</name></name> <operator pos:start="53:38" pos:end="53:38">+</operator> <call pos:start="53:40" pos:end="53:66"><name pos:start="53:40" pos:end="53:51">msi_data_off</name><argument_list pos:start="53:52" pos:end="53:66">(<argument pos:start="53:53" pos:end="53:55"><expr pos:start="53:53" pos:end="53:55"><name pos:start="53:53" pos:end="53:55">dev</name></expr></argument>, <argument pos:start="53:58" pos:end="53:65"><expr pos:start="53:58" pos:end="53:65"><name pos:start="53:58" pos:end="53:65">msi64bit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:38">(<expr pos:start="55:9" pos:end="55:37"><name pos:start="55:9" pos:end="55:13">flags</name> <operator pos:start="55:15" pos:end="55:15">&amp;</operator> <name pos:start="55:17" pos:end="55:37">PCI_MSI_FLAGS_MASKBIT</name></expr>)</condition> <block pos:start="55:40" pos:end="63:5">{<block_content pos:start="57:9" pos:end="61:76">

        <expr_stmt pos:start="57:9" pos:end="61:76"><expr pos:start="57:9" pos:end="61:75"><call pos:start="57:9" pos:end="61:75"><name pos:start="57:9" pos:end="57:15">fprintf</name><argument_list pos:start="57:16" pos:end="61:75">(<argument pos:start="57:17" pos:end="57:22"><expr pos:start="57:17" pos:end="57:22"><name pos:start="57:17" pos:end="57:22">stderr</name></expr></argument>, <argument pos:start="57:25" pos:end="57:61"><expr pos:start="57:25" pos:end="57:61"><literal type="string" pos:start="57:25" pos:end="57:35">" mask 0x%"</literal><name pos:start="57:36" pos:end="57:41">PRIx32</name><literal type="string" pos:start="57:42" pos:end="57:55">" pending 0x%"</literal><name pos:start="57:56" pos:end="57:61">PRIx32</name></expr></argument>,

                <argument pos:start="59:17" pos:end="59:71"><expr pos:start="59:17" pos:end="59:71"><call pos:start="59:17" pos:end="59:71"><name pos:start="59:17" pos:end="59:28">pci_get_long</name><argument_list pos:start="59:29" pos:end="59:71">(<argument pos:start="59:30" pos:end="59:70"><expr pos:start="59:30" pos:end="59:70"><name pos:start="59:30" pos:end="59:40"><name pos:start="59:30" pos:end="59:32">dev</name><operator pos:start="59:33" pos:end="59:34">-&gt;</operator><name pos:start="59:35" pos:end="59:40">config</name></name> <operator pos:start="59:42" pos:end="59:42">+</operator> <call pos:start="59:44" pos:end="59:70"><name pos:start="59:44" pos:end="59:55">msi_mask_off</name><argument_list pos:start="59:56" pos:end="59:70">(<argument pos:start="59:57" pos:end="59:59"><expr pos:start="59:57" pos:end="59:59"><name pos:start="59:57" pos:end="59:59">dev</name></expr></argument>, <argument pos:start="59:62" pos:end="59:69"><expr pos:start="59:62" pos:end="59:69"><name pos:start="59:62" pos:end="59:69">msi64bit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                <argument pos:start="61:17" pos:end="61:74"><expr pos:start="61:17" pos:end="61:74"><call pos:start="61:17" pos:end="61:74"><name pos:start="61:17" pos:end="61:28">pci_get_long</name><argument_list pos:start="61:29" pos:end="61:74">(<argument pos:start="61:30" pos:end="61:73"><expr pos:start="61:30" pos:end="61:73"><name pos:start="61:30" pos:end="61:40"><name pos:start="61:30" pos:end="61:32">dev</name><operator pos:start="61:33" pos:end="61:34">-&gt;</operator><name pos:start="61:35" pos:end="61:40">config</name></name> <operator pos:start="61:42" pos:end="61:42">+</operator> <call pos:start="61:44" pos:end="61:73"><name pos:start="61:44" pos:end="61:58">msi_pending_off</name><argument_list pos:start="61:59" pos:end="61:73">(<argument pos:start="61:60" pos:end="61:62"><expr pos:start="61:60" pos:end="61:62"><name pos:start="61:60" pos:end="61:62">dev</name></expr></argument>, <argument pos:start="61:65" pos:end="61:72"><expr pos:start="61:65" pos:end="61:72"><name pos:start="61:65" pos:end="61:72">msi64bit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="68:0"><expr pos:start="65:5" pos:end="65:25"><call pos:start="65:5" pos:end="65:25"><name pos:start="65:5" pos:end="65:11">fprintf</name><argument_list pos:start="65:12" pos:end="65:25">(<argument pos:start="65:13" pos:end="65:18"><expr pos:start="65:13" pos:end="65:18"><name pos:start="65:13" pos:end="65:18">stderr</name></expr></argument>, <argument pos:start="65:21" pos:end="65:24"><expr pos:start="65:21" pos:end="65:24"><literal type="string" pos:start="65:21" pos:end="65:24">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="67:1" pos:end="67:6">#<cpp:directive pos:start="67:2" pos:end="67:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="71:5" pos:end="75:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:40">(<expr pos:start="71:9" pos:end="71:39"><operator pos:start="71:9" pos:end="71:9">!</operator><operator pos:start="71:10" pos:end="71:10">(</operator><name pos:start="71:11" pos:end="71:15">flags</name> <operator pos:start="71:17" pos:end="71:17">&amp;</operator> <name pos:start="71:19" pos:end="71:38">PCI_MSI_FLAGS_ENABLE</name><operator pos:start="71:39" pos:end="71:39">)</operator></expr>)</condition> <block pos:start="71:42" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:15">

        <return pos:start="73:9" pos:end="73:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="99:7">/*

     * Now MSI is enabled, clear INTx# interrupts.

     * the driver is prohibited from writing enable bit to mask

     * a service request. But the guest OS could do this.

     * So we just discard the interrupts as moderate fallback.

     *

     * 6.8.3.3. Enabling Operation

     *   While enabled for MSI or MSI-X operation, a function is prohibited

     *   from using its INTx# pin (if implemented) to request

     *   service (MSI, MSI-X, and INTx# are mutually exclusive).

     */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:34"><expr pos:start="101:5" pos:end="101:33"><call pos:start="101:5" pos:end="101:33"><name pos:start="101:5" pos:end="101:28">pci_device_deassert_intx</name><argument_list pos:start="101:29" pos:end="101:33">(<argument pos:start="101:30" pos:end="101:32"><expr pos:start="101:30" pos:end="101:32"><name pos:start="101:30" pos:end="101:32">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="105:5" pos:end="113:7">/*

     * nr_vectors might be set bigger than capable. So clamp it.

     * This is not legal by spec, so we can do anything we like,

     * just don't crash the host

     */</comment>

    <expr_stmt pos:start="115:5" pos:end="117:72"><expr pos:start="115:5" pos:end="117:71"><name pos:start="115:5" pos:end="115:16">log_num_vecs</name> <operator pos:start="115:18" pos:end="115:18">=</operator>

        <operator pos:start="117:9" pos:end="117:9">(</operator><name pos:start="117:10" pos:end="117:14">flags</name> <operator pos:start="117:16" pos:end="117:16">&amp;</operator> <name pos:start="117:18" pos:end="117:36">PCI_MSI_FLAGS_QSIZE</name><operator pos:start="117:37" pos:end="117:37">)</operator> <operator pos:start="117:39" pos:end="117:40">&gt;&gt;</operator> <operator pos:start="117:42" pos:end="117:42">(</operator><call pos:start="117:43" pos:end="117:66"><name pos:start="117:43" pos:end="117:45">ffs</name><argument_list pos:start="117:46" pos:end="117:66">(<argument pos:start="117:47" pos:end="117:65"><expr pos:start="117:47" pos:end="117:65"><name pos:start="117:47" pos:end="117:65">PCI_MSI_FLAGS_QSIZE</name></expr></argument>)</argument_list></call> <operator pos:start="117:68" pos:end="117:68">-</operator> <literal type="number" pos:start="117:70" pos:end="117:70">1</literal><operator pos:start="117:71" pos:end="117:71">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="121:72"><expr pos:start="119:5" pos:end="121:71"><name pos:start="119:5" pos:end="119:16">log_max_vecs</name> <operator pos:start="119:18" pos:end="119:18">=</operator>

        <operator pos:start="121:9" pos:end="121:9">(</operator><name pos:start="121:10" pos:end="121:14">flags</name> <operator pos:start="121:16" pos:end="121:16">&amp;</operator> <name pos:start="121:18" pos:end="121:36">PCI_MSI_FLAGS_QMASK</name><operator pos:start="121:37" pos:end="121:37">)</operator> <operator pos:start="121:39" pos:end="121:40">&gt;&gt;</operator> <operator pos:start="121:42" pos:end="121:42">(</operator><call pos:start="121:43" pos:end="121:66"><name pos:start="121:43" pos:end="121:45">ffs</name><argument_list pos:start="121:46" pos:end="121:66">(<argument pos:start="121:47" pos:end="121:65"><expr pos:start="121:47" pos:end="121:65"><name pos:start="121:47" pos:end="121:65">PCI_MSI_FLAGS_QMASK</name></expr></argument>)</argument_list></call> <operator pos:start="121:68" pos:end="121:68">-</operator> <literal type="number" pos:start="121:70" pos:end="121:70">1</literal><operator pos:start="121:71" pos:end="121:71">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="123:5" pos:end="131:5"><if pos:start="123:5" pos:end="131:5">if <condition pos:start="123:8" pos:end="123:36">(<expr pos:start="123:9" pos:end="123:35"><name pos:start="123:9" pos:end="123:20">log_num_vecs</name> <operator pos:start="123:22" pos:end="123:22">&gt;</operator> <name pos:start="123:24" pos:end="123:35">log_max_vecs</name></expr>)</condition> <block pos:start="123:38" pos:end="131:5">{<block_content pos:start="125:9" pos:end="129:62">

        <expr_stmt pos:start="125:9" pos:end="125:38"><expr pos:start="125:9" pos:end="125:37"><name pos:start="125:9" pos:end="125:13">flags</name> <operator pos:start="125:15" pos:end="125:16">&amp;=</operator> <operator pos:start="125:18" pos:end="125:18">~</operator><name pos:start="125:19" pos:end="125:37">PCI_MSI_FLAGS_QSIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:64"><expr pos:start="127:9" pos:end="127:63"><name pos:start="127:9" pos:end="127:13">flags</name> <operator pos:start="127:15" pos:end="127:16">|=</operator> <name pos:start="127:18" pos:end="127:29">log_max_vecs</name> <operator pos:start="127:31" pos:end="127:32">&lt;&lt;</operator> <operator pos:start="127:34" pos:end="127:34">(</operator><call pos:start="127:35" pos:end="127:58"><name pos:start="127:35" pos:end="127:37">ffs</name><argument_list pos:start="127:38" pos:end="127:58">(<argument pos:start="127:39" pos:end="127:57"><expr pos:start="127:39" pos:end="127:57"><name pos:start="127:39" pos:end="127:57">PCI_MSI_FLAGS_QSIZE</name></expr></argument>)</argument_list></call> <operator pos:start="127:60" pos:end="127:60">-</operator> <literal type="number" pos:start="127:62" pos:end="127:62">1</literal><operator pos:start="127:63" pos:end="127:63">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:62"><expr pos:start="129:9" pos:end="129:61"><call pos:start="129:9" pos:end="129:61"><name pos:start="129:9" pos:end="129:20">pci_set_word</name><argument_list pos:start="129:21" pos:end="129:61">(<argument pos:start="129:22" pos:end="129:53"><expr pos:start="129:22" pos:end="129:53"><name pos:start="129:22" pos:end="129:32"><name pos:start="129:22" pos:end="129:24">dev</name><operator pos:start="129:25" pos:end="129:26">-&gt;</operator><name pos:start="129:27" pos:end="129:32">config</name></name> <operator pos:start="129:34" pos:end="129:34">+</operator> <call pos:start="129:36" pos:end="129:53"><name pos:start="129:36" pos:end="129:48">msi_flags_off</name><argument_list pos:start="129:49" pos:end="129:53">(<argument pos:start="129:50" pos:end="129:52"><expr pos:start="129:50" pos:end="129:52"><name pos:start="129:50" pos:end="129:52">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="129:56" pos:end="129:60"><expr pos:start="129:56" pos:end="129:60"><name pos:start="129:56" pos:end="129:60">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="135:5" pos:end="143:5"><if pos:start="135:5" pos:end="143:5">if <condition pos:start="135:8" pos:end="135:29">(<expr pos:start="135:9" pos:end="135:28"><operator pos:start="135:9" pos:end="135:9">!</operator><name pos:start="135:10" pos:end="135:28">msi_per_vector_mask</name></expr>)</condition> <block pos:start="135:31" pos:end="143:5">{<block_content pos:start="141:9" pos:end="141:15">

        <comment type="block" pos:start="137:9" pos:end="139:44">/* if per vector masking isn't supported,

           there is no pending interrupt. */</comment>

        <return pos:start="141:9" pos:end="141:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:39"><expr pos:start="147:5" pos:end="147:38"><name pos:start="147:5" pos:end="147:14">nr_vectors</name> <operator pos:start="147:16" pos:end="147:16">=</operator> <call pos:start="147:18" pos:end="147:38"><name pos:start="147:18" pos:end="147:31">msi_nr_vectors</name><argument_list pos:start="147:32" pos:end="147:38">(<argument pos:start="147:33" pos:end="147:37"><expr pos:start="147:33" pos:end="147:37"><name pos:start="147:33" pos:end="147:37">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="151:5" pos:end="151:55">/* This will discard pending interrupts, if any. */</comment>

    <expr_stmt pos:start="153:5" pos:end="153:73"><expr pos:start="153:5" pos:end="153:72"><name pos:start="153:5" pos:end="153:11">pending</name> <operator pos:start="153:13" pos:end="153:13">=</operator> <call pos:start="153:15" pos:end="153:72"><name pos:start="153:15" pos:end="153:26">pci_get_long</name><argument_list pos:start="153:27" pos:end="153:72">(<argument pos:start="153:28" pos:end="153:71"><expr pos:start="153:28" pos:end="153:71"><name pos:start="153:28" pos:end="153:38"><name pos:start="153:28" pos:end="153:30">dev</name><operator pos:start="153:31" pos:end="153:32">-&gt;</operator><name pos:start="153:33" pos:end="153:38">config</name></name> <operator pos:start="153:40" pos:end="153:40">+</operator> <call pos:start="153:42" pos:end="153:71"><name pos:start="153:42" pos:end="153:56">msi_pending_off</name><argument_list pos:start="153:57" pos:end="153:71">(<argument pos:start="153:58" pos:end="153:60"><expr pos:start="153:58" pos:end="153:60"><name pos:start="153:58" pos:end="153:60">dev</name></expr></argument>, <argument pos:start="153:63" pos:end="153:70"><expr pos:start="153:63" pos:end="153:70"><name pos:start="153:63" pos:end="153:70">msi64bit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:64"><expr pos:start="155:5" pos:end="155:63"><name pos:start="155:5" pos:end="155:11">pending</name> <operator pos:start="155:13" pos:end="155:14">&amp;=</operator> <literal type="number" pos:start="155:16" pos:end="155:25">0xffffffff</literal> <operator pos:start="155:27" pos:end="155:28">&gt;&gt;</operator> <operator pos:start="155:30" pos:end="155:30">(</operator><name pos:start="155:31" pos:end="155:49">PCI_MSI_VECTORS_MAX</name> <operator pos:start="155:51" pos:end="155:51">-</operator> <name pos:start="155:53" pos:end="155:62">nr_vectors</name><operator pos:start="155:63" pos:end="155:63">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:72"><expr pos:start="157:5" pos:end="157:71"><call pos:start="157:5" pos:end="157:71"><name pos:start="157:5" pos:end="157:16">pci_set_long</name><argument_list pos:start="157:17" pos:end="157:71">(<argument pos:start="157:18" pos:end="157:61"><expr pos:start="157:18" pos:end="157:61"><name pos:start="157:18" pos:end="157:28"><name pos:start="157:18" pos:end="157:20">dev</name><operator pos:start="157:21" pos:end="157:22">-&gt;</operator><name pos:start="157:23" pos:end="157:28">config</name></name> <operator pos:start="157:30" pos:end="157:30">+</operator> <call pos:start="157:32" pos:end="157:61"><name pos:start="157:32" pos:end="157:46">msi_pending_off</name><argument_list pos:start="157:47" pos:end="157:61">(<argument pos:start="157:48" pos:end="157:50"><expr pos:start="157:48" pos:end="157:50"><name pos:start="157:48" pos:end="157:50">dev</name></expr></argument>, <argument pos:start="157:53" pos:end="157:60"><expr pos:start="157:53" pos:end="157:60"><name pos:start="157:53" pos:end="157:60">msi64bit</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="157:64" pos:end="157:70"><expr pos:start="157:64" pos:end="157:70"><name pos:start="157:64" pos:end="157:70">pending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="161:5" pos:end="161:55">/* deliver pending interrupts which are unmasked */</comment>

    <for pos:start="163:5" pos:end="179:5">for <control pos:start="163:9" pos:end="163:51">(<init pos:start="163:10" pos:end="163:20"><expr pos:start="163:10" pos:end="163:19"><name pos:start="163:10" pos:end="163:15">vector</name> <operator pos:start="163:17" pos:end="163:17">=</operator> <literal type="number" pos:start="163:19" pos:end="163:19">0</literal></expr>;</init> <condition pos:start="163:22" pos:end="163:41"><expr pos:start="163:22" pos:end="163:40"><name pos:start="163:22" pos:end="163:27">vector</name> <operator pos:start="163:29" pos:end="163:29">&lt;</operator> <name pos:start="163:31" pos:end="163:40">nr_vectors</name></expr>;</condition> <incr pos:start="163:43" pos:end="163:50"><expr pos:start="163:43" pos:end="163:50"><operator pos:start="163:43" pos:end="163:44">++</operator><name pos:start="163:45" pos:end="163:50">vector</name></expr></incr>)</control> <block pos:start="163:53" pos:end="179:5">{<block_content pos:start="165:9" pos:end="177:32">

        <if_stmt pos:start="165:9" pos:end="169:9"><if pos:start="165:9" pos:end="169:9">if <condition pos:start="165:12" pos:end="165:70">(<expr pos:start="165:13" pos:end="165:69"><call pos:start="165:13" pos:end="165:38"><name pos:start="165:13" pos:end="165:25">msi_is_masked</name><argument_list pos:start="165:26" pos:end="165:38">(<argument pos:start="165:27" pos:end="165:29"><expr pos:start="165:27" pos:end="165:29"><name pos:start="165:27" pos:end="165:29">dev</name></expr></argument>, <argument pos:start="165:32" pos:end="165:37"><expr pos:start="165:32" pos:end="165:37"><name pos:start="165:32" pos:end="165:37">vector</name></expr></argument>)</argument_list></call> <operator pos:start="165:40" pos:end="165:41">||</operator> <operator pos:start="165:43" pos:end="165:43">!</operator><operator pos:start="165:44" pos:end="165:44">(</operator><name pos:start="165:45" pos:end="165:51">pending</name> <operator pos:start="165:53" pos:end="165:53">&amp;</operator> <operator pos:start="165:55" pos:end="165:55">(</operator><literal type="number" pos:start="165:56" pos:end="165:57">1U</literal> <operator pos:start="165:59" pos:end="165:60">&lt;&lt;</operator> <name pos:start="165:62" pos:end="165:67">vector</name><operator pos:start="165:68" pos:end="165:68">)</operator><operator pos:start="165:69" pos:end="165:69">)</operator></expr>)</condition> <block pos:start="165:72" pos:end="169:9">{<block_content pos:start="167:13" pos:end="167:21">

            <continue pos:start="167:13" pos:end="167:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="173:9" pos:end="175:72"><expr pos:start="173:9" pos:end="175:71"><call pos:start="173:9" pos:end="175:71"><name pos:start="173:9" pos:end="173:36">pci_long_test_and_clear_mask</name><argument_list pos:start="173:37" pos:end="175:71">(

            <argument pos:start="175:13" pos:end="175:56"><expr pos:start="175:13" pos:end="175:56"><name pos:start="175:13" pos:end="175:23"><name pos:start="175:13" pos:end="175:15">dev</name><operator pos:start="175:16" pos:end="175:17">-&gt;</operator><name pos:start="175:18" pos:end="175:23">config</name></name> <operator pos:start="175:25" pos:end="175:25">+</operator> <call pos:start="175:27" pos:end="175:56"><name pos:start="175:27" pos:end="175:41">msi_pending_off</name><argument_list pos:start="175:42" pos:end="175:56">(<argument pos:start="175:43" pos:end="175:45"><expr pos:start="175:43" pos:end="175:45"><name pos:start="175:43" pos:end="175:45">dev</name></expr></argument>, <argument pos:start="175:48" pos:end="175:55"><expr pos:start="175:48" pos:end="175:55"><name pos:start="175:48" pos:end="175:55">msi64bit</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="175:59" pos:end="175:70"><expr pos:start="175:59" pos:end="175:70"><literal type="number" pos:start="175:59" pos:end="175:60">1U</literal> <operator pos:start="175:62" pos:end="175:63">&lt;&lt;</operator> <name pos:start="175:65" pos:end="175:70">vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:32"><expr pos:start="177:9" pos:end="177:31"><call pos:start="177:9" pos:end="177:31"><name pos:start="177:9" pos:end="177:18">msi_notify</name><argument_list pos:start="177:19" pos:end="177:31">(<argument pos:start="177:20" pos:end="177:22"><expr pos:start="177:20" pos:end="177:22"><name pos:start="177:20" pos:end="177:22">dev</name></expr></argument>, <argument pos:start="177:25" pos:end="177:30"><expr pos:start="177:25" pos:end="177:30"><name pos:start="177:25" pos:end="177:30">vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
