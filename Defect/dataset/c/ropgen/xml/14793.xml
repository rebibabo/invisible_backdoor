<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14793.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">writev_f</name><parameter_list pos:start="1:20" pos:end="1:61">(<parameter pos:start="1:21" pos:end="1:37"><decl pos:start="1:21" pos:end="1:37"><type pos:start="1:21" pos:end="1:37"><name pos:start="1:21" pos:end="1:32">BlockBackend</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">blk</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:47"><decl pos:start="1:40" pos:end="1:47"><type pos:start="1:40" pos:end="1:47"><name pos:start="1:40" pos:end="1:42">int</name></type> <name pos:start="1:44" pos:end="1:47">argc</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:60"><decl pos:start="1:50" pos:end="1:60"><type pos:start="1:50" pos:end="1:60"><name pos:start="1:50" pos:end="1:53">char</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier><modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="151:1">{<block_content pos:start="5:5" pos:end="149:13">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:18">timeval</name></name></type> <name pos:start="5:20" pos:end="5:21">t1</name></decl>, <decl pos:start="5:24" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:18"/><name pos:start="5:24" pos:end="5:25">t2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">Cflag</name> <init pos:start="7:15" pos:end="7:17">= <expr pos:start="7:17" pos:end="7:17"><literal type="number" pos:start="7:17" pos:end="7:17">0</literal></expr></init></decl>, <decl pos:start="7:20" pos:end="7:28"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:20" pos:end="7:24">qflag</name> <init pos:start="7:26" pos:end="7:28">= <expr pos:start="7:28" pos:end="7:28"><literal type="number" pos:start="7:28" pos:end="7:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">c</name></decl>, <decl pos:start="9:12" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:14">cnt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:13">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:18">offset</name></decl>;</decl_stmt>

    <comment type="block" pos:start="15:5" pos:end="15:75">/* Some compilers get confused and warn if this is not initialized.  */</comment>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:13">total</name> <init pos:start="17:15" pos:end="17:17">= <expr pos:start="17:17" pos:end="17:17"><literal type="number" pos:start="17:17" pos:end="17:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:15"><decl pos:start="19:5" pos:end="19:14"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:14">nr_iov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:15">pattern</name> <init pos:start="21:17" pos:end="21:22">= <expr pos:start="21:19" pos:end="21:22"><literal type="number" pos:start="21:19" pos:end="21:22">0xcd</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:22"><decl pos:start="23:5" pos:end="23:21"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:16">QEMUIOVector</name></type> <name pos:start="23:18" pos:end="23:21">qiov</name></decl>;</decl_stmt>



    <while pos:start="27:5" pos:end="61:5">while <condition pos:start="27:11" pos:end="27:51">(<expr pos:start="27:12" pos:end="27:50"><operator pos:start="27:12" pos:end="27:12">(</operator><name pos:start="27:13" pos:end="27:13">c</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <call pos:start="27:17" pos:end="27:42"><name pos:start="27:17" pos:end="27:22">getopt</name><argument_list pos:start="27:23" pos:end="27:42">(<argument pos:start="27:24" pos:end="27:27"><expr pos:start="27:24" pos:end="27:27"><name pos:start="27:24" pos:end="27:27">argc</name></expr></argument>, <argument pos:start="27:30" pos:end="27:33"><expr pos:start="27:30" pos:end="27:33"><name pos:start="27:30" pos:end="27:33">argv</name></expr></argument>, <argument pos:start="27:36" pos:end="27:41"><expr pos:start="27:36" pos:end="27:41"><literal type="string" pos:start="27:36" pos:end="27:41">"CqP:"</literal></expr></argument>)</argument_list></call><operator pos:start="27:43" pos:end="27:43">)</operator> <operator pos:start="27:45" pos:end="27:46">!=</operator> <name pos:start="27:48" pos:end="27:50">EOF</name></expr>)</condition> <block pos:start="27:53" pos:end="61:5">{<block_content pos:start="29:9" pos:end="59:9">

        <switch pos:start="29:9" pos:end="59:9">switch <condition pos:start="29:16" pos:end="29:18">(<expr pos:start="29:17" pos:end="29:17"><name pos:start="29:17" pos:end="29:17">c</name></expr>)</condition> <block pos:start="29:20" pos:end="59:9">{<block_content pos:start="31:9" pos:end="57:53">

        <case pos:start="31:9" pos:end="31:17">case <expr pos:start="31:14" pos:end="31:16"><literal type="char" pos:start="31:14" pos:end="31:16">'C'</literal></expr>:</case>

            <expr_stmt pos:start="33:13" pos:end="33:22"><expr pos:start="33:13" pos:end="33:21"><name pos:start="33:13" pos:end="33:17">Cflag</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <literal type="number" pos:start="33:21" pos:end="33:21">1</literal></expr>;</expr_stmt>

            <break pos:start="35:13" pos:end="35:18">break;</break>

        <case pos:start="37:9" pos:end="37:17">case <expr pos:start="37:14" pos:end="37:16"><literal type="char" pos:start="37:14" pos:end="37:16">'q'</literal></expr>:</case>

            <expr_stmt pos:start="39:13" pos:end="39:22"><expr pos:start="39:13" pos:end="39:21"><name pos:start="39:13" pos:end="39:17">qflag</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <literal type="number" pos:start="39:21" pos:end="39:21">1</literal></expr>;</expr_stmt>

            <break pos:start="41:13" pos:end="41:18">break;</break>

        <case pos:start="43:9" pos:end="43:17">case <expr pos:start="43:14" pos:end="43:16"><literal type="char" pos:start="43:14" pos:end="43:16">'P'</literal></expr>:</case>

            <expr_stmt pos:start="45:13" pos:end="45:44"><expr pos:start="45:13" pos:end="45:43"><name pos:start="45:13" pos:end="45:19">pattern</name> <operator pos:start="45:21" pos:end="45:21">=</operator> <call pos:start="45:23" pos:end="45:43"><name pos:start="45:23" pos:end="45:35">parse_pattern</name><argument_list pos:start="45:36" pos:end="45:43">(<argument pos:start="45:37" pos:end="45:42"><expr pos:start="45:37" pos:end="45:42"><name pos:start="45:37" pos:end="45:42">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="47:13" pos:end="51:13"><if pos:start="47:13" pos:end="51:13">if <condition pos:start="47:16" pos:end="47:28">(<expr pos:start="47:17" pos:end="47:27"><name pos:start="47:17" pos:end="47:23">pattern</name> <operator pos:start="47:25" pos:end="47:25">&lt;</operator> <literal type="number" pos:start="47:27" pos:end="47:27">0</literal></expr>)</condition> <block pos:start="47:30" pos:end="51:13">{<block_content pos:start="49:17" pos:end="49:25">

                <return pos:start="49:17" pos:end="49:25">return <expr pos:start="49:24" pos:end="49:24"><literal type="number" pos:start="49:24" pos:end="49:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="53:13" pos:end="53:18">break;</break>

        <default pos:start="55:9" pos:end="55:16">default:</default>

            <return pos:start="57:13" pos:end="57:53">return <expr pos:start="57:20" pos:end="57:52"><call pos:start="57:20" pos:end="57:52"><name pos:start="57:20" pos:end="57:39">qemuio_command_usage</name><argument_list pos:start="57:40" pos:end="57:52">(<argument pos:start="57:41" pos:end="57:51"><expr pos:start="57:41" pos:end="57:51"><operator pos:start="57:41" pos:end="57:41">&amp;</operator><name pos:start="57:42" pos:end="57:51">writev_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:26">(<expr pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:14">optind</name> <operator pos:start="65:16" pos:end="65:16">&gt;</operator> <name pos:start="65:18" pos:end="65:21">argc</name> <operator pos:start="65:23" pos:end="65:23">-</operator> <literal type="number" pos:start="65:25" pos:end="65:25">2</literal></expr>)</condition> <block pos:start="65:28" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:49">

        <return pos:start="67:9" pos:end="67:49">return <expr pos:start="67:16" pos:end="67:48"><call pos:start="67:16" pos:end="67:48"><name pos:start="67:16" pos:end="67:35">qemuio_command_usage</name><argument_list pos:start="67:36" pos:end="67:48">(<argument pos:start="67:37" pos:end="67:47"><expr pos:start="67:37" pos:end="67:47"><operator pos:start="67:37" pos:end="67:37">&amp;</operator><name pos:start="67:38" pos:end="67:47">writev_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:34"><expr pos:start="73:5" pos:end="73:33"><name pos:start="73:5" pos:end="73:10">offset</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <call pos:start="73:14" pos:end="73:33"><name pos:start="73:14" pos:end="73:19">cvtnum</name><argument_list pos:start="73:20" pos:end="73:33">(<argument pos:start="73:21" pos:end="73:32"><expr pos:start="73:21" pos:end="73:32"><name pos:start="73:21" pos:end="73:32"><name pos:start="73:21" pos:end="73:24">argv</name><index pos:start="73:25" pos:end="73:32">[<expr pos:start="73:26" pos:end="73:31"><name pos:start="73:26" pos:end="73:31">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="81:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:19">(<expr pos:start="75:9" pos:end="75:18"><name pos:start="75:9" pos:end="75:14">offset</name> <operator pos:start="75:16" pos:end="75:16">&lt;</operator> <literal type="number" pos:start="75:18" pos:end="75:18">0</literal></expr>)</condition> <block pos:start="75:21" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:17">

        <expr_stmt pos:start="77:9" pos:end="77:68"><expr pos:start="77:9" pos:end="77:67"><call pos:start="77:9" pos:end="77:67"><name pos:start="77:9" pos:end="77:14">printf</name><argument_list pos:start="77:15" pos:end="77:67">(<argument pos:start="77:16" pos:end="77:52"><expr pos:start="77:16" pos:end="77:52"><literal type="string" pos:start="77:16" pos:end="77:52">"non-numeric length argument -- %s\n"</literal></expr></argument>, <argument pos:start="77:55" pos:end="77:66"><expr pos:start="77:55" pos:end="77:66"><name pos:start="77:55" pos:end="77:66"><name pos:start="77:55" pos:end="77:58">argv</name><index pos:start="77:59" pos:end="77:66">[<expr pos:start="77:60" pos:end="77:65"><name pos:start="77:60" pos:end="77:65">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="79:9" pos:end="79:17">return <expr pos:start="79:16" pos:end="79:16"><literal type="number" pos:start="79:16" pos:end="79:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:13"><expr pos:start="83:5" pos:end="83:12"><name pos:start="83:5" pos:end="83:10">optind</name><operator pos:start="83:11" pos:end="83:12">++</operator></expr>;</expr_stmt>



    <if_stmt pos:start="87:5" pos:end="95:5"><if pos:start="87:5" pos:end="95:5">if <condition pos:start="87:8" pos:end="87:23">(<expr pos:start="87:9" pos:end="87:22"><name pos:start="87:9" pos:end="87:14">offset</name> <operator pos:start="87:16" pos:end="87:16">&amp;</operator> <literal type="number" pos:start="87:18" pos:end="87:22">0x1ff</literal></expr>)</condition> <block pos:start="87:25" pos:end="95:5">{<block_content pos:start="89:9" pos:end="93:17">

        <expr_stmt pos:start="89:9" pos:end="91:23"><expr pos:start="89:9" pos:end="91:22"><call pos:start="89:9" pos:end="91:22"><name pos:start="89:9" pos:end="89:14">printf</name><argument_list pos:start="89:15" pos:end="91:22">(<argument pos:start="89:16" pos:end="89:59"><expr pos:start="89:16" pos:end="89:59"><literal type="string" pos:start="89:16" pos:end="89:25">"offset %"</literal> <name pos:start="89:27" pos:end="89:32">PRId64</name> <literal type="string" pos:start="89:34" pos:end="89:59">" is not sector aligned\n"</literal></expr></argument>,

               <argument pos:start="91:16" pos:end="91:21"><expr pos:start="91:16" pos:end="91:21"><name pos:start="91:16" pos:end="91:21">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="93:9" pos:end="93:17">return <expr pos:start="93:16" pos:end="93:16"><literal type="number" pos:start="93:16" pos:end="93:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:27"><expr pos:start="99:5" pos:end="99:26"><name pos:start="99:5" pos:end="99:10">nr_iov</name> <operator pos:start="99:12" pos:end="99:12">=</operator> <name pos:start="99:14" pos:end="99:17">argc</name> <operator pos:start="99:19" pos:end="99:19">-</operator> <name pos:start="99:21" pos:end="99:26">optind</name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:67"><expr pos:start="101:5" pos:end="101:66"><name pos:start="101:5" pos:end="101:7">buf</name> <operator pos:start="101:9" pos:end="101:9">=</operator> <call pos:start="101:11" pos:end="101:66"><name pos:start="101:11" pos:end="101:22">create_iovec</name><argument_list pos:start="101:23" pos:end="101:66">(<argument pos:start="101:24" pos:end="101:26"><expr pos:start="101:24" pos:end="101:26"><name pos:start="101:24" pos:end="101:26">blk</name></expr></argument>, <argument pos:start="101:29" pos:end="101:33"><expr pos:start="101:29" pos:end="101:33"><operator pos:start="101:29" pos:end="101:29">&amp;</operator><name pos:start="101:30" pos:end="101:33">qiov</name></expr></argument>, <argument pos:start="101:36" pos:end="101:48"><expr pos:start="101:36" pos:end="101:48"><operator pos:start="101:36" pos:end="101:36">&amp;</operator><name pos:start="101:37" pos:end="101:48"><name pos:start="101:37" pos:end="101:40">argv</name><index pos:start="101:41" pos:end="101:48">[<expr pos:start="101:42" pos:end="101:47"><name pos:start="101:42" pos:end="101:47">optind</name></expr>]</index></name></expr></argument>, <argument pos:start="101:51" pos:end="101:56"><expr pos:start="101:51" pos:end="101:56"><name pos:start="101:51" pos:end="101:56">nr_iov</name></expr></argument>, <argument pos:start="101:59" pos:end="101:65"><expr pos:start="101:59" pos:end="101:65"><name pos:start="101:59" pos:end="101:65">pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="107:5"><if pos:start="103:5" pos:end="107:5">if <condition pos:start="103:8" pos:end="103:20">(<expr pos:start="103:9" pos:end="103:19"><name pos:start="103:9" pos:end="103:11">buf</name> <operator pos:start="103:13" pos:end="103:14">==</operator> <name pos:start="103:16" pos:end="103:19">NULL</name></expr>)</condition> <block pos:start="103:22" pos:end="107:5">{<block_content pos:start="105:9" pos:end="105:17">

        <return pos:start="105:9" pos:end="105:17">return <expr pos:start="105:16" pos:end="105:16"><literal type="number" pos:start="105:16" pos:end="105:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:28"><expr pos:start="111:5" pos:end="111:27"><call pos:start="111:5" pos:end="111:27"><name pos:start="111:5" pos:end="111:16">gettimeofday</name><argument_list pos:start="111:17" pos:end="111:27">(<argument pos:start="111:18" pos:end="111:20"><expr pos:start="111:18" pos:end="111:20"><operator pos:start="111:18" pos:end="111:18">&amp;</operator><name pos:start="111:19" pos:end="111:20">t1</name></expr></argument>, <argument pos:start="111:23" pos:end="111:26"><expr pos:start="111:23" pos:end="111:26"><name pos:start="111:23" pos:end="111:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:52"><expr pos:start="113:5" pos:end="113:51"><name pos:start="113:5" pos:end="113:7">cnt</name> <operator pos:start="113:9" pos:end="113:9">=</operator> <call pos:start="113:11" pos:end="113:51"><name pos:start="113:11" pos:end="113:23">do_aio_writev</name><argument_list pos:start="113:24" pos:end="113:51">(<argument pos:start="113:25" pos:end="113:27"><expr pos:start="113:25" pos:end="113:27"><name pos:start="113:25" pos:end="113:27">blk</name></expr></argument>, <argument pos:start="113:30" pos:end="113:34"><expr pos:start="113:30" pos:end="113:34"><operator pos:start="113:30" pos:end="113:30">&amp;</operator><name pos:start="113:31" pos:end="113:34">qiov</name></expr></argument>, <argument pos:start="113:37" pos:end="113:42"><expr pos:start="113:37" pos:end="113:42"><name pos:start="113:37" pos:end="113:42">offset</name></expr></argument>, <argument pos:start="113:45" pos:end="113:50"><expr pos:start="113:45" pos:end="113:50"><operator pos:start="113:45" pos:end="113:45">&amp;</operator><name pos:start="113:46" pos:end="113:50">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:28"><expr pos:start="115:5" pos:end="115:27"><call pos:start="115:5" pos:end="115:27"><name pos:start="115:5" pos:end="115:16">gettimeofday</name><argument_list pos:start="115:17" pos:end="115:27">(<argument pos:start="115:18" pos:end="115:20"><expr pos:start="115:18" pos:end="115:20"><operator pos:start="115:18" pos:end="115:18">&amp;</operator><name pos:start="115:19" pos:end="115:20">t2</name></expr></argument>, <argument pos:start="115:23" pos:end="115:26"><expr pos:start="115:23" pos:end="115:26"><name pos:start="115:23" pos:end="115:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="119:5" pos:end="125:5"><if pos:start="119:5" pos:end="125:5">if <condition pos:start="119:8" pos:end="119:16">(<expr pos:start="119:9" pos:end="119:15"><name pos:start="119:9" pos:end="119:11">cnt</name> <operator pos:start="119:13" pos:end="119:13">&lt;</operator> <literal type="number" pos:start="119:15" pos:end="119:15">0</literal></expr>)</condition> <block pos:start="119:18" pos:end="125:5">{<block_content pos:start="121:9" pos:end="123:17">

        <expr_stmt pos:start="121:9" pos:end="121:54"><expr pos:start="121:9" pos:end="121:53"><call pos:start="121:9" pos:end="121:53"><name pos:start="121:9" pos:end="121:14">printf</name><argument_list pos:start="121:15" pos:end="121:53">(<argument pos:start="121:16" pos:end="121:36"><expr pos:start="121:16" pos:end="121:36"><literal type="string" pos:start="121:16" pos:end="121:36">"writev failed: %s\n"</literal></expr></argument>, <argument pos:start="121:39" pos:end="121:52"><expr pos:start="121:39" pos:end="121:52"><call pos:start="121:39" pos:end="121:52"><name pos:start="121:39" pos:end="121:46">strerror</name><argument_list pos:start="121:47" pos:end="121:52">(<argument pos:start="121:48" pos:end="121:51"><expr pos:start="121:48" pos:end="121:51"><operator pos:start="121:48" pos:end="121:48">-</operator><name pos:start="121:49" pos:end="121:51">cnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="123:9" pos:end="123:17">goto <name pos:start="123:14" pos:end="123:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="129:5" pos:end="133:5"><if pos:start="129:5" pos:end="133:5">if <condition pos:start="129:8" pos:end="129:14">(<expr pos:start="129:9" pos:end="129:13"><name pos:start="129:9" pos:end="129:13">qflag</name></expr>)</condition> <block pos:start="129:16" pos:end="133:5">{<block_content pos:start="131:9" pos:end="131:17">

        <goto pos:start="131:9" pos:end="131:17">goto <name pos:start="131:14" pos:end="131:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="137:5" pos:end="137:60">/* Finally, report back -- -C gives a parsable format */</comment>

    <expr_stmt pos:start="139:5" pos:end="139:22"><expr pos:start="139:5" pos:end="139:21"><name pos:start="139:5" pos:end="139:6">t2</name> <operator pos:start="139:8" pos:end="139:8">=</operator> <call pos:start="139:10" pos:end="139:21"><name pos:start="139:10" pos:end="139:13">tsub</name><argument_list pos:start="139:14" pos:end="139:21">(<argument pos:start="139:15" pos:end="139:16"><expr pos:start="139:15" pos:end="139:16"><name pos:start="139:15" pos:end="139:16">t2</name></expr></argument>, <argument pos:start="139:19" pos:end="139:20"><expr pos:start="139:19" pos:end="139:20"><name pos:start="139:19" pos:end="139:20">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:69"><expr pos:start="141:5" pos:end="141:68"><call pos:start="141:5" pos:end="141:68"><name pos:start="141:5" pos:end="141:16">print_report</name><argument_list pos:start="141:17" pos:end="141:68">(<argument pos:start="141:18" pos:end="141:24"><expr pos:start="141:18" pos:end="141:24"><literal type="string" pos:start="141:18" pos:end="141:24">"wrote"</literal></expr></argument>, <argument pos:start="141:27" pos:end="141:29"><expr pos:start="141:27" pos:end="141:29"><operator pos:start="141:27" pos:end="141:27">&amp;</operator><name pos:start="141:28" pos:end="141:29">t2</name></expr></argument>, <argument pos:start="141:32" pos:end="141:37"><expr pos:start="141:32" pos:end="141:37"><name pos:start="141:32" pos:end="141:37">offset</name></expr></argument>, <argument pos:start="141:40" pos:end="141:48"><expr pos:start="141:40" pos:end="141:48"><name pos:start="141:40" pos:end="141:48"><name pos:start="141:40" pos:end="141:43">qiov</name><operator pos:start="141:44" pos:end="141:44">.</operator><name pos:start="141:45" pos:end="141:48">size</name></name></expr></argument>, <argument pos:start="141:51" pos:end="141:55"><expr pos:start="141:51" pos:end="141:55"><name pos:start="141:51" pos:end="141:55">total</name></expr></argument>, <argument pos:start="141:58" pos:end="141:60"><expr pos:start="141:58" pos:end="141:60"><name pos:start="141:58" pos:end="141:60">cnt</name></expr></argument>, <argument pos:start="141:63" pos:end="141:67"><expr pos:start="141:63" pos:end="141:67"><name pos:start="141:63" pos:end="141:67">Cflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="143:1" pos:end="143:4"><name pos:start="143:1" pos:end="143:3">out</name>:</label>

    <expr_stmt pos:start="145:5" pos:end="145:30"><expr pos:start="145:5" pos:end="145:29"><call pos:start="145:5" pos:end="145:29"><name pos:start="145:5" pos:end="145:22">qemu_iovec_destroy</name><argument_list pos:start="145:23" pos:end="145:29">(<argument pos:start="145:24" pos:end="145:28"><expr pos:start="145:24" pos:end="145:28"><operator pos:start="145:24" pos:end="145:24">&amp;</operator><name pos:start="145:25" pos:end="145:28">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:22"><expr pos:start="147:5" pos:end="147:21"><call pos:start="147:5" pos:end="147:21"><name pos:start="147:5" pos:end="147:16">qemu_io_free</name><argument_list pos:start="147:17" pos:end="147:21">(<argument pos:start="147:18" pos:end="147:20"><expr pos:start="147:18" pos:end="147:20"><name pos:start="147:18" pos:end="147:20">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="149:5" pos:end="149:13">return <expr pos:start="149:12" pos:end="149:12"><literal type="number" pos:start="149:12" pos:end="149:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
