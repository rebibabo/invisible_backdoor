<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7935.c" pos:tabs="8"><decl_stmt pos:start="1:1" pos:end="65:1"><decl pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">__attribute__</name><argument_list pos:start="1:26" pos:end="1:40">(<argument pos:start="1:27" pos:end="1:39"><expr pos:start="1:27" pos:end="1:39"><operator pos:start="1:27" pos:end="1:27">(</operator><name pos:start="1:28" pos:end="1:38">constructor</name><operator pos:start="1:39" pos:end="1:39">)</operator></expr></argument>)</argument_list> <name pos:start="1:42" pos:end="1:57">init_cpuid_cache</name><argument_list pos:start="1:58" pos:end="1:63">(<argument pos:start="1:59" pos:end="1:62"><expr pos:start="1:59" pos:end="1:62"><name pos:start="1:59" pos:end="1:62">void</name></expr></argument>)</argument_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:24">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">max</name> <init pos:start="5:13" pos:end="5:38">= <expr pos:start="5:15" pos:end="5:38"><call pos:start="5:15" pos:end="5:38"><name pos:start="5:15" pos:end="5:29">__get_cpuid_max</name><argument_list pos:start="5:30" pos:end="5:38">(<argument pos:start="5:31" pos:end="5:31"><expr pos:start="5:31" pos:end="5:31"><literal type="number" pos:start="5:31" pos:end="5:31">0</literal></expr></argument>, <argument pos:start="5:34" pos:end="5:37"><expr pos:start="5:34" pos:end="5:37"><name pos:start="5:34" pos:end="5:37">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">a</name></decl>, <decl pos:start="7:12" pos:end="7:12"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:12">b</name></decl>, <decl pos:start="7:15" pos:end="7:15"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:15">c</name></decl>, <decl pos:start="7:18" pos:end="7:18"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:18" pos:end="7:18">d</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">unsigned</name></type> <name pos:start="9:14" pos:end="9:18">cache</name> <init pos:start="9:20" pos:end="9:22">= <expr pos:start="9:22" pos:end="9:22"><literal type="number" pos:start="9:22" pos:end="9:22">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="61:5"><if pos:start="13:5" pos:end="61:5">if <condition pos:start="13:8" pos:end="13:17">(<expr pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:11">max</name> <operator pos:start="13:13" pos:end="13:14">&gt;=</operator> <literal type="number" pos:start="13:16" pos:end="13:16">1</literal></expr>)</condition> <block pos:start="13:19" pos:end="61:5">{<block_content pos:start="15:9" pos:end="60:0">

        <expr_stmt pos:start="15:9" pos:end="15:31"><expr pos:start="15:9" pos:end="15:30"><call pos:start="15:9" pos:end="15:30"><name pos:start="15:9" pos:end="15:15">__cpuid</name><argument_list pos:start="15:16" pos:end="15:30">(<argument pos:start="15:17" pos:end="15:17"><expr pos:start="15:17" pos:end="15:17"><literal type="number" pos:start="15:17" pos:end="15:17">1</literal></expr></argument>, <argument pos:start="15:20" pos:end="15:20"><expr pos:start="15:20" pos:end="15:20"><name pos:start="15:20" pos:end="15:20">a</name></expr></argument>, <argument pos:start="15:23" pos:end="15:23"><expr pos:start="15:23" pos:end="15:23"><name pos:start="15:23" pos:end="15:23">b</name></expr></argument>, <argument pos:start="15:26" pos:end="15:26"><expr pos:start="15:26" pos:end="15:26"><name pos:start="15:26" pos:end="15:26">c</name></expr></argument>, <argument pos:start="15:29" pos:end="15:29"><expr pos:start="15:29" pos:end="15:29"><name pos:start="15:29" pos:end="15:29">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="17:9" pos:end="24:0"><if pos:start="17:9" pos:end="24:0">if <condition pos:start="17:12" pos:end="17:25">(<expr pos:start="17:13" pos:end="17:24"><name pos:start="17:13" pos:end="17:13">d</name> <operator pos:start="17:15" pos:end="17:15">&amp;</operator> <name pos:start="17:17" pos:end="17:24">bit_SSE2</name></expr>)</condition> <block pos:start="17:27" pos:end="24:0">{<block_content pos:start="19:13" pos:end="19:32">

            <expr_stmt pos:start="19:13" pos:end="19:32"><expr pos:start="19:13" pos:end="19:31"><name pos:start="19:13" pos:end="19:17">cache</name> <operator pos:start="19:19" pos:end="19:20">|=</operator> <name pos:start="19:22" pos:end="19:31">CACHE_SSE2</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="23:1" pos:end="23:22">#<cpp:directive pos:start="23:2" pos:end="23:6">ifdef</cpp:directive> <name pos:start="23:8" pos:end="23:22">CONFIG_AVX2_OPT</name></cpp:ifdef>

        <if_stmt pos:start="25:9" pos:end="29:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:27">(<expr pos:start="25:13" pos:end="25:26"><name pos:start="25:13" pos:end="25:13">c</name> <operator pos:start="25:15" pos:end="25:15">&amp;</operator> <name pos:start="25:17" pos:end="25:26">bit_SSE4_1</name></expr>)</condition> <block pos:start="25:29" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:32">

            <expr_stmt pos:start="27:13" pos:end="27:32"><expr pos:start="27:13" pos:end="27:31"><name pos:start="27:13" pos:end="27:17">cache</name> <operator pos:start="27:19" pos:end="27:20">|=</operator> <name pos:start="27:22" pos:end="27:31">CACHE_SSE4</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="33:9" pos:end="33:72">/* We must check that AVX is not just available, but usable.  */</comment>

        <if_stmt pos:start="35:9" pos:end="60:0"><if pos:start="35:9" pos:end="60:0">if <condition pos:start="35:12" pos:end="35:47">(<expr pos:start="35:13" pos:end="35:46"><operator pos:start="35:13" pos:end="35:13">(</operator><name pos:start="35:14" pos:end="35:14">c</name> <operator pos:start="35:16" pos:end="35:16">&amp;</operator> <name pos:start="35:18" pos:end="35:28">bit_OSXSAVE</name><operator pos:start="35:29" pos:end="35:29">)</operator> <operator pos:start="35:31" pos:end="35:32">&amp;&amp;</operator> <operator pos:start="35:34" pos:end="35:34">(</operator><name pos:start="35:35" pos:end="35:35">c</name> <operator pos:start="35:37" pos:end="35:37">&amp;</operator> <name pos:start="35:39" pos:end="35:45">bit_AVX</name><operator pos:start="35:46" pos:end="35:46">)</operator></expr>)</condition> <block pos:start="35:49" pos:end="60:0">{<block_content pos:start="39:13" pos:end="55:13">

            <asm pos:start="37:13" pos:end="37:56">__asm("xgetbv" : "=a"(a), "=d"(d) : "c"(0));</asm>

            <if_stmt pos:start="39:13" pos:end="55:13"><if pos:start="39:13" pos:end="55:13">if <condition pos:start="39:16" pos:end="39:29">(<expr pos:start="39:17" pos:end="39:28"><operator pos:start="39:17" pos:end="39:17">(</operator><name pos:start="39:18" pos:end="39:18">a</name> <operator pos:start="39:20" pos:end="39:20">&amp;</operator> <literal type="number" pos:start="39:22" pos:end="39:22">6</literal><operator pos:start="39:23" pos:end="39:23">)</operator> <operator pos:start="39:25" pos:end="39:26">==</operator> <literal type="number" pos:start="39:28" pos:end="39:28">6</literal></expr>)</condition> <block pos:start="39:31" pos:end="55:13">{<block_content pos:start="41:17" pos:end="53:17">

                <expr_stmt pos:start="41:17" pos:end="41:36"><expr pos:start="41:17" pos:end="41:35"><name pos:start="41:17" pos:end="41:21">cache</name> <operator pos:start="41:23" pos:end="41:24">|=</operator> <name pos:start="41:26" pos:end="41:35">CACHE_AVX1</name></expr>;</expr_stmt>

                <if_stmt pos:start="43:17" pos:end="53:17"><if pos:start="43:17" pos:end="53:17">if <condition pos:start="43:20" pos:end="43:29">(<expr pos:start="43:21" pos:end="43:28"><name pos:start="43:21" pos:end="43:23">max</name> <operator pos:start="43:25" pos:end="43:26">&gt;=</operator> <literal type="number" pos:start="43:28" pos:end="43:28">7</literal></expr>)</condition> <block pos:start="43:31" pos:end="53:17">{<block_content pos:start="45:21" pos:end="51:21">

                    <expr_stmt pos:start="45:21" pos:end="45:52"><expr pos:start="45:21" pos:end="45:51"><call pos:start="45:21" pos:end="45:51"><name pos:start="45:21" pos:end="45:33">__cpuid_count</name><argument_list pos:start="45:34" pos:end="45:51">(<argument pos:start="45:35" pos:end="45:35"><expr pos:start="45:35" pos:end="45:35"><literal type="number" pos:start="45:35" pos:end="45:35">7</literal></expr></argument>, <argument pos:start="45:38" pos:end="45:38"><expr pos:start="45:38" pos:end="45:38"><literal type="number" pos:start="45:38" pos:end="45:38">0</literal></expr></argument>, <argument pos:start="45:41" pos:end="45:41"><expr pos:start="45:41" pos:end="45:41"><name pos:start="45:41" pos:end="45:41">a</name></expr></argument>, <argument pos:start="45:44" pos:end="45:44"><expr pos:start="45:44" pos:end="45:44"><name pos:start="45:44" pos:end="45:44">b</name></expr></argument>, <argument pos:start="45:47" pos:end="45:47"><expr pos:start="45:47" pos:end="45:47"><name pos:start="45:47" pos:end="45:47">c</name></expr></argument>, <argument pos:start="45:50" pos:end="45:50"><expr pos:start="45:50" pos:end="45:50"><name pos:start="45:50" pos:end="45:50">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="47:21" pos:end="51:21"><if pos:start="47:21" pos:end="51:21">if <condition pos:start="47:24" pos:end="47:37">(<expr pos:start="47:25" pos:end="47:36"><name pos:start="47:25" pos:end="47:25">b</name> <operator pos:start="47:27" pos:end="47:27">&amp;</operator> <name pos:start="47:29" pos:end="47:36">bit_AVX2</name></expr>)</condition> <block pos:start="47:39" pos:end="51:21">{<block_content pos:start="49:25" pos:end="49:44">

                        <expr_stmt pos:start="49:25" pos:end="49:44"><expr pos:start="49:25" pos:end="49:43"><name pos:start="49:25" pos:end="49:29">cache</name> <operator pos:start="49:31" pos:end="49:32">|=</operator> <name pos:start="49:34" pos:end="49:43">CACHE_AVX2</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:24"><expr pos:start="63:5" pos:end="63:23"><name pos:start="63:5" pos:end="63:15">cpuid_cache</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <name pos:start="63:19" pos:end="63:23">cache</name></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>
</unit>
