<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2472.c" pos:tabs="8"><function pos:start="1:1" pos:end="195:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">tcg_out_qemu_st</name> <parameter_list pos:start="1:29" pos:end="1:72">(<parameter pos:start="1:30" pos:end="1:42"><decl pos:start="1:30" pos:end="1:42"><type pos:start="1:30" pos:end="1:42"><name pos:start="1:30" pos:end="1:39">TCGContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:62"><decl pos:start="1:45" pos:end="1:62"><type pos:start="1:45" pos:end="1:62"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:56">TCGArg</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">args</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:71"><decl pos:start="1:65" pos:end="1:71"><type pos:start="1:65" pos:end="1:71"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:71">opc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="195:1">{<block_content pos:start="5:5" pos:end="194:0">

    <decl_stmt pos:start="5:5" pos:end="8:0"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:16">addr_reg</name></decl>, <decl pos:start="5:19" pos:end="5:20"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:19" pos:end="5:20">r0</name></decl>, <decl pos:start="5:23" pos:end="5:24"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:23" pos:end="5:24">r1</name></decl>, <decl pos:start="5:27" pos:end="5:31"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:27" pos:end="5:31">rbase</name></decl>, <decl pos:start="5:34" pos:end="5:41"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:34" pos:end="5:41">data_reg</name></decl>, <decl pos:start="5:44" pos:end="5:52"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:44" pos:end="5:52">mem_index</name></decl>, <decl pos:start="5:55" pos:end="5:59"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:55" pos:end="5:59">bswap</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="7:1" pos:end="7:21">#<cpp:directive pos:start="7:2" pos:end="7:6">ifdef</cpp:directive> <name pos:start="7:8" pos:end="7:21">CONFIG_SOFTMMU</name></cpp:ifdef>

    <decl_stmt pos:start="9:5" pos:end="9:11"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">r2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="14:0"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">void</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:20">label1_ptr</name></decl>, <decl pos:start="11:23" pos:end="11:33"><type ref="prev" pos:start="11:5" pos:end="11:10"><modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:33">label2_ptr</name></decl>;</decl_stmt>

<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="17:5" pos:end="17:23"><expr pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:12">data_reg</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <operator pos:start="17:16" pos:end="17:16">*</operator><name pos:start="17:17" pos:end="17:20">args</name><operator pos:start="17:21" pos:end="17:22">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:23"><expr pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:12">addr_reg</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <operator pos:start="19:16" pos:end="19:16">*</operator><name pos:start="19:17" pos:end="19:20">args</name><operator pos:start="19:21" pos:end="19:22">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="26:0"><expr pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:13">mem_index</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <operator pos:start="21:17" pos:end="21:17">*</operator><name pos:start="21:18" pos:end="21:21">args</name></expr>;</expr_stmt>



<cpp:ifdef pos:start="25:1" pos:end="25:21">#<cpp:directive pos:start="25:2" pos:end="25:6">ifdef</cpp:directive> <name pos:start="25:8" pos:end="25:21">CONFIG_SOFTMMU</name></cpp:ifdef>

    <expr_stmt pos:start="27:5" pos:end="27:11"><expr pos:start="27:5" pos:end="27:10"><name pos:start="27:5" pos:end="27:6">r0</name> <operator pos:start="27:8" pos:end="27:8">=</operator> <literal type="number" pos:start="27:10" pos:end="27:10">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:11"><expr pos:start="29:5" pos:end="29:10"><name pos:start="29:5" pos:end="29:6">r1</name> <operator pos:start="29:8" pos:end="29:8">=</operator> <literal type="number" pos:start="29:10" pos:end="29:10">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:11"><expr pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:6">r2</name> <operator pos:start="31:8" pos:end="31:8">=</operator> <literal type="number" pos:start="31:10" pos:end="31:10">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:14"><expr pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:9">rbase</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <literal type="number" pos:start="33:13" pos:end="33:13">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="39:79"><expr pos:start="37:5" pos:end="39:78"><call pos:start="37:5" pos:end="39:78"><name pos:start="37:5" pos:end="37:20">tcg_out_tlb_read</name> <argument_list pos:start="37:22" pos:end="39:78">(<argument pos:start="37:23" pos:end="37:23"><expr pos:start="37:23" pos:end="37:23"><name pos:start="37:23" pos:end="37:23">s</name></expr></argument>, <argument pos:start="37:26" pos:end="37:27"><expr pos:start="37:26" pos:end="37:27"><name pos:start="37:26" pos:end="37:27">r0</name></expr></argument>, <argument pos:start="37:30" pos:end="37:31"><expr pos:start="37:30" pos:end="37:31"><name pos:start="37:30" pos:end="37:31">r1</name></expr></argument>, <argument pos:start="37:34" pos:end="37:35"><expr pos:start="37:34" pos:end="37:35"><name pos:start="37:34" pos:end="37:35">r2</name></expr></argument>, <argument pos:start="37:38" pos:end="37:45"><expr pos:start="37:38" pos:end="37:45"><name pos:start="37:38" pos:end="37:45">addr_reg</name></expr></argument>, <argument pos:start="37:48" pos:end="37:50"><expr pos:start="37:48" pos:end="37:50"><name pos:start="37:48" pos:end="37:50">opc</name></expr></argument>,

                      <argument pos:start="39:23" pos:end="39:77"><expr pos:start="39:23" pos:end="39:77"><call pos:start="39:23" pos:end="39:77"><name pos:start="39:23" pos:end="39:30">offsetof</name> <argument_list pos:start="39:32" pos:end="39:77">(<argument pos:start="39:33" pos:end="39:40"><expr pos:start="39:33" pos:end="39:40"><name pos:start="39:33" pos:end="39:40">CPUState</name></expr></argument>, <argument pos:start="39:43" pos:end="39:76"><expr pos:start="39:43" pos:end="39:76"><name pos:start="39:43" pos:end="39:65"><name pos:start="39:43" pos:end="39:51">tlb_table</name><index pos:start="39:52" pos:end="39:62">[<expr pos:start="39:53" pos:end="39:61"><name pos:start="39:53" pos:end="39:61">mem_index</name></expr>]</index><index pos:start="39:63" pos:end="39:65">[<expr pos:start="39:64" pos:end="39:64"><literal type="number" pos:start="39:64" pos:end="39:64">0</literal></expr>]</index></name><operator pos:start="39:66" pos:end="39:66">.</operator><name pos:start="39:67" pos:end="39:76">addr_write</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:60"><expr pos:start="43:5" pos:end="43:59"><call pos:start="43:5" pos:end="43:59"><name pos:start="43:5" pos:end="43:13">tcg_out32</name> <argument_list pos:start="43:15" pos:end="43:59">(<argument pos:start="43:16" pos:end="43:16"><expr pos:start="43:16" pos:end="43:16"><name pos:start="43:16" pos:end="43:16">s</name></expr></argument>, <argument pos:start="43:19" pos:end="43:58"><expr pos:start="43:19" pos:end="43:58"><name pos:start="43:19" pos:end="43:21">CMP</name> <operator pos:start="43:23" pos:end="43:23">|</operator> <call pos:start="43:25" pos:end="43:30"><name pos:start="43:25" pos:end="43:26">BF</name> <argument_list pos:start="43:28" pos:end="43:30">(<argument pos:start="43:29" pos:end="43:29"><expr pos:start="43:29" pos:end="43:29"><literal type="number" pos:start="43:29" pos:end="43:29">7</literal></expr></argument>)</argument_list></call> <operator pos:start="43:32" pos:end="43:32">|</operator> <call pos:start="43:34" pos:end="43:40"><name pos:start="43:34" pos:end="43:35">RA</name> <argument_list pos:start="43:37" pos:end="43:40">(<argument pos:start="43:38" pos:end="43:39"><expr pos:start="43:38" pos:end="43:39"><name pos:start="43:38" pos:end="43:39">r2</name></expr></argument>)</argument_list></call> <operator pos:start="43:42" pos:end="43:42">|</operator> <call pos:start="43:44" pos:end="43:50"><name pos:start="43:44" pos:end="43:45">RB</name> <argument_list pos:start="43:47" pos:end="43:50">(<argument pos:start="43:48" pos:end="43:49"><expr pos:start="43:48" pos:end="43:49"><name pos:start="43:48" pos:end="43:49">r1</name></expr></argument>)</argument_list></call> <operator pos:start="43:52" pos:end="43:52">|</operator> <name pos:start="43:54" pos:end="43:58">CMP_L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="50:0"><expr pos:start="47:5" pos:end="47:28"><name pos:start="47:5" pos:end="47:14">label1_ptr</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <name pos:start="47:18" pos:end="47:28"><name pos:start="47:18" pos:end="47:18">s</name><operator pos:start="47:19" pos:end="47:20">-&gt;</operator><name pos:start="47:21" pos:end="47:28">code_ptr</name></name></expr>;</expr_stmt>

<cpp:ifdef pos:start="49:1" pos:end="49:16">#<cpp:directive pos:start="49:2" pos:end="49:6">ifdef</cpp:directive> <name pos:start="49:8" pos:end="49:16">FAST_PATH</name></cpp:ifdef>

    <expr_stmt pos:start="51:5" pos:end="54:0"><expr pos:start="51:5" pos:end="51:52"><call pos:start="51:5" pos:end="51:52"><name pos:start="51:5" pos:end="51:13">tcg_out32</name> <argument_list pos:start="51:15" pos:end="51:52">(<argument pos:start="51:16" pos:end="51:16"><expr pos:start="51:16" pos:end="51:16"><name pos:start="51:16" pos:end="51:16">s</name></expr></argument>, <argument pos:start="51:19" pos:end="51:51"><expr pos:start="51:19" pos:end="51:51"><name pos:start="51:19" pos:end="51:20">BC</name> <operator pos:start="51:22" pos:end="51:22">|</operator> <call pos:start="51:24" pos:end="51:36"><name pos:start="51:24" pos:end="51:25">BI</name> <argument_list pos:start="51:27" pos:end="51:36">(<argument pos:start="51:28" pos:end="51:28"><expr pos:start="51:28" pos:end="51:28"><literal type="number" pos:start="51:28" pos:end="51:28">7</literal></expr></argument>, <argument pos:start="51:31" pos:end="51:35"><expr pos:start="51:31" pos:end="51:35"><name pos:start="51:31" pos:end="51:35">CR_EQ</name></expr></argument>)</argument_list></call> <operator pos:start="51:38" pos:end="51:38">|</operator> <name pos:start="51:40" pos:end="51:51">BO_COND_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="57:5" pos:end="57:19">/* slow path */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:33"><expr pos:start="59:5" pos:end="59:32"><call pos:start="59:5" pos:end="59:32"><name pos:start="59:5" pos:end="59:15">tcg_out_mov</name> <argument_list pos:start="59:17" pos:end="59:32">(<argument pos:start="59:18" pos:end="59:18"><expr pos:start="59:18" pos:end="59:18"><name pos:start="59:18" pos:end="59:18">s</name></expr></argument>, <argument pos:start="59:21" pos:end="59:21"><expr pos:start="59:21" pos:end="59:21"><literal type="number" pos:start="59:21" pos:end="59:21">3</literal></expr></argument>, <argument pos:start="59:24" pos:end="59:31"><expr pos:start="59:24" pos:end="59:31"><name pos:start="59:24" pos:end="59:31">addr_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:67"><expr pos:start="61:5" pos:end="61:66"><call pos:start="61:5" pos:end="61:66"><name pos:start="61:5" pos:end="61:15">tcg_out_rld</name> <argument_list pos:start="61:17" pos:end="61:66">(<argument pos:start="61:18" pos:end="61:18"><expr pos:start="61:18" pos:end="61:18"><name pos:start="61:18" pos:end="61:18">s</name></expr></argument>, <argument pos:start="61:21" pos:end="61:26"><expr pos:start="61:21" pos:end="61:26"><name pos:start="61:21" pos:end="61:26">RLDICL</name></expr></argument>, <argument pos:start="61:29" pos:end="61:29"><expr pos:start="61:29" pos:end="61:29"><literal type="number" pos:start="61:29" pos:end="61:29">4</literal></expr></argument>, <argument pos:start="61:32" pos:end="61:39"><expr pos:start="61:32" pos:end="61:39"><name pos:start="61:32" pos:end="61:39">data_reg</name></expr></argument>, <argument pos:start="61:42" pos:end="61:42"><expr pos:start="61:42" pos:end="61:42"><literal type="number" pos:start="61:42" pos:end="61:42">0</literal></expr></argument>, <argument pos:start="61:45" pos:end="61:65"><expr pos:start="61:45" pos:end="61:65"><literal type="number" pos:start="61:45" pos:end="61:48">64</literal> <operator pos:start="61:48" pos:end="61:48">-</operator> <operator pos:start="61:50" pos:end="61:50">(</operator><literal type="number" pos:start="61:51" pos:end="61:51">1</literal> <operator pos:start="61:53" pos:end="61:54">&lt;&lt;</operator> <operator pos:start="61:56" pos:end="61:56">(</operator><literal type="number" pos:start="61:57" pos:end="61:59">3</literal> <operator pos:start="61:59" pos:end="61:59">+</operator> <name pos:start="61:61" pos:end="61:63">opc</name><operator pos:start="61:64" pos:end="61:64">)</operator><operator pos:start="61:65" pos:end="61:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:49"><expr pos:start="63:5" pos:end="63:48"><call pos:start="63:5" pos:end="63:48"><name pos:start="63:5" pos:end="63:16">tcg_out_movi</name> <argument_list pos:start="63:18" pos:end="63:48">(<argument pos:start="63:19" pos:end="63:19"><expr pos:start="63:19" pos:end="63:19"><name pos:start="63:19" pos:end="63:19">s</name></expr></argument>, <argument pos:start="63:22" pos:end="63:33"><expr pos:start="63:22" pos:end="63:33"><name pos:start="63:22" pos:end="63:33">TCG_TYPE_I64</name></expr></argument>, <argument pos:start="63:36" pos:end="63:36"><expr pos:start="63:36" pos:end="63:36"><literal type="number" pos:start="63:36" pos:end="63:36">5</literal></expr></argument>, <argument pos:start="63:39" pos:end="63:47"><expr pos:start="63:39" pos:end="63:47"><name pos:start="63:39" pos:end="63:47">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:64"><expr pos:start="67:5" pos:end="67:63"><call pos:start="67:5" pos:end="67:63"><name pos:start="67:5" pos:end="67:16">tcg_out_call</name> <argument_list pos:start="67:18" pos:end="67:63">(<argument pos:start="67:19" pos:end="67:19"><expr pos:start="67:19" pos:end="67:19"><name pos:start="67:19" pos:end="67:19">s</name></expr></argument>, <argument pos:start="67:22" pos:end="67:59"><expr pos:start="67:22" pos:end="67:59"><operator pos:start="67:22" pos:end="67:22">(</operator><name pos:start="67:23" pos:end="67:37">tcg_target_long</name><operator pos:start="67:38" pos:end="67:38">)</operator> <name pos:start="67:40" pos:end="67:59"><name pos:start="67:40" pos:end="67:54">qemu_st_helpers</name><index pos:start="67:55" pos:end="67:59">[<expr pos:start="67:56" pos:end="67:58"><name pos:start="67:56" pos:end="67:58">opc</name></expr>]</index></name></expr></argument>, <argument pos:start="67:62" pos:end="67:62"><expr pos:start="67:62" pos:end="67:62"><literal type="number" pos:start="67:62" pos:end="67:62">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:29"><expr pos:start="71:5" pos:end="71:28"><name pos:start="71:5" pos:end="71:14">label2_ptr</name> <operator pos:start="71:16" pos:end="71:16">=</operator> <name pos:start="71:18" pos:end="71:28"><name pos:start="71:18" pos:end="71:18">s</name><operator pos:start="71:19" pos:end="71:20">-&gt;</operator><name pos:start="71:21" pos:end="71:28">code_ptr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="80:0"><expr pos:start="73:5" pos:end="73:20"><call pos:start="73:5" pos:end="73:20"><name pos:start="73:5" pos:end="73:13">tcg_out32</name> <argument_list pos:start="73:15" pos:end="73:20">(<argument pos:start="73:16" pos:end="73:16"><expr pos:start="73:16" pos:end="73:16"><name pos:start="73:16" pos:end="73:16">s</name></expr></argument>, <argument pos:start="73:19" pos:end="73:19"><expr pos:start="73:19" pos:end="73:19"><name pos:start="73:19" pos:end="73:19">B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:27">/* label1: fast path */</comment>

<cpp:ifdef pos:start="79:1" pos:end="79:16">#<cpp:directive pos:start="79:2" pos:end="79:6">ifdef</cpp:directive> <name pos:start="79:8" pos:end="79:16">FAST_PATH</name></cpp:ifdef>

    <expr_stmt pos:start="81:5" pos:end="84:0"><expr pos:start="81:5" pos:end="81:58"><call pos:start="81:5" pos:end="81:58"><name pos:start="81:5" pos:end="81:14">reloc_pc14</name> <argument_list pos:start="81:16" pos:end="81:58">(<argument pos:start="81:17" pos:end="81:26"><expr pos:start="81:17" pos:end="81:26"><name pos:start="81:17" pos:end="81:26">label1_ptr</name></expr></argument>, <argument pos:start="81:29" pos:end="81:57"><expr pos:start="81:29" pos:end="81:57"><operator pos:start="81:29" pos:end="81:29">(</operator><name pos:start="81:30" pos:end="81:44">tcg_target_long</name><operator pos:start="81:45" pos:end="81:45">)</operator> <name pos:start="81:47" pos:end="81:57"><name pos:start="81:47" pos:end="81:47">s</name><operator pos:start="81:48" pos:end="81:49">-&gt;</operator><name pos:start="81:50" pos:end="81:57">code_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="83:1" pos:end="83:6">#<cpp:directive pos:start="83:2" pos:end="83:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="87:5" pos:end="97:22"><expr pos:start="87:5" pos:end="97:21"><call pos:start="87:5" pos:end="97:21"><name pos:start="87:5" pos:end="87:13">tcg_out32</name> <argument_list pos:start="87:15" pos:end="97:21">(<argument pos:start="87:16" pos:end="87:16"><expr pos:start="87:16" pos:end="87:16"><name pos:start="87:16" pos:end="87:16">s</name></expr></argument>, <argument pos:start="87:19" pos:end="97:20"><expr pos:start="87:19" pos:end="97:20"><operator pos:start="87:19" pos:end="87:19">(</operator><name pos:start="87:20" pos:end="87:28">LD_ADDEND</name>

                   <operator pos:start="89:20" pos:end="89:20">|</operator> <call pos:start="89:22" pos:end="89:28"><name pos:start="89:22" pos:end="89:23">RT</name> <argument_list pos:start="89:25" pos:end="89:28">(<argument pos:start="89:26" pos:end="89:27"><expr pos:start="89:26" pos:end="89:27"><name pos:start="89:26" pos:end="89:27">r0</name></expr></argument>)</argument_list></call>

                   <operator pos:start="91:20" pos:end="91:20">|</operator> <call pos:start="91:22" pos:end="91:28"><name pos:start="91:22" pos:end="91:23">RA</name> <argument_list pos:start="91:25" pos:end="91:28">(<argument pos:start="91:26" pos:end="91:27"><expr pos:start="91:26" pos:end="91:27"><name pos:start="91:26" pos:end="91:27">r0</name></expr></argument>)</argument_list></call>

                   <operator pos:start="93:20" pos:end="93:20">|</operator> <operator pos:start="93:22" pos:end="93:22">(</operator><call pos:start="93:23" pos:end="93:52"><name pos:start="93:23" pos:end="93:30">offsetof</name> <argument_list pos:start="93:32" pos:end="93:52">(<argument pos:start="93:33" pos:end="93:43"><expr pos:start="93:33" pos:end="93:43"><name pos:start="93:33" pos:end="93:43">CPUTLBEntry</name></expr></argument>, <argument pos:start="93:46" pos:end="93:51"><expr pos:start="93:46" pos:end="93:51"><name pos:start="93:46" pos:end="93:51">addend</name></expr></argument>)</argument_list></call>

                      <operator pos:start="95:23" pos:end="95:23">-</operator> <call pos:start="95:25" pos:end="95:58"><name pos:start="95:25" pos:end="95:32">offsetof</name> <argument_list pos:start="95:34" pos:end="95:58">(<argument pos:start="95:35" pos:end="95:45"><expr pos:start="95:35" pos:end="95:45"><name pos:start="95:35" pos:end="95:45">CPUTLBEntry</name></expr></argument>, <argument pos:start="95:48" pos:end="95:57"><expr pos:start="95:48" pos:end="95:57"><name pos:start="95:48" pos:end="95:57">addr_write</name></expr></argument>)</argument_list></call><operator pos:start="95:59" pos:end="95:59">)</operator>

                   <operator pos:start="97:20" pos:end="97:20">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="99:5" pos:end="99:54">/* r0 = env-&gt;tlb_table[mem_index][index].addend */</comment>

    <expr_stmt pos:start="101:5" pos:end="110:0"><expr pos:start="101:5" pos:end="101:58"><call pos:start="101:5" pos:end="101:58"><name pos:start="101:5" pos:end="101:13">tcg_out32</name> <argument_list pos:start="101:15" pos:end="101:58">(<argument pos:start="101:16" pos:end="101:16"><expr pos:start="101:16" pos:end="101:16"><name pos:start="101:16" pos:end="101:16">s</name></expr></argument>, <argument pos:start="101:19" pos:end="101:57"><expr pos:start="101:19" pos:end="101:57"><name pos:start="101:19" pos:end="101:21">ADD</name> <operator pos:start="101:23" pos:end="101:23">|</operator> <call pos:start="101:25" pos:end="101:31"><name pos:start="101:25" pos:end="101:26">RT</name> <argument_list pos:start="101:28" pos:end="101:31">(<argument pos:start="101:29" pos:end="101:30"><expr pos:start="101:29" pos:end="101:30"><name pos:start="101:29" pos:end="101:30">r0</name></expr></argument>)</argument_list></call> <operator pos:start="101:33" pos:end="101:33">|</operator> <call pos:start="101:35" pos:end="101:41"><name pos:start="101:35" pos:end="101:36">RA</name> <argument_list pos:start="101:38" pos:end="101:41">(<argument pos:start="101:39" pos:end="101:40"><expr pos:start="101:39" pos:end="101:40"><name pos:start="101:39" pos:end="101:40">r0</name></expr></argument>)</argument_list></call> <operator pos:start="101:43" pos:end="101:43">|</operator> <call pos:start="101:45" pos:end="101:57"><name pos:start="101:45" pos:end="101:46">RB</name> <argument_list pos:start="101:48" pos:end="101:57">(<argument pos:start="101:49" pos:end="101:56"><expr pos:start="101:49" pos:end="101:56"><name pos:start="101:49" pos:end="101:56">addr_reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="103:5" pos:end="103:61">/* r0 = env-&gt;tlb_table[mem_index][index].addend + addr */</comment>



<cpp:else pos:start="107:1" pos:end="107:5">#<cpp:directive pos:start="107:2" pos:end="107:5">else</cpp:directive></cpp:else>  <comment type="block" pos:start="107:8" pos:end="107:28">/* !CONFIG_SOFTMMU */</comment>

<cpp:if pos:start="109:1" pos:end="109:26">#<cpp:directive pos:start="109:2" pos:end="109:3">if</cpp:directive> <expr pos:start="109:5" pos:end="109:26"><name pos:start="109:5" pos:end="109:20">TARGET_LONG_BITS</name> <operator pos:start="109:22" pos:end="109:23">==</operator> <literal type="number" pos:start="109:25" pos:end="109:26">32</literal></expr></cpp:if>

    <expr_stmt pos:start="111:5" pos:end="114:0"><expr pos:start="111:5" pos:end="111:54"><call pos:start="111:5" pos:end="111:54"><name pos:start="111:5" pos:end="111:15">tcg_out_rld</name> <argument_list pos:start="111:17" pos:end="111:54">(<argument pos:start="111:18" pos:end="111:18"><expr pos:start="111:18" pos:end="111:18"><name pos:start="111:18" pos:end="111:18">s</name></expr></argument>, <argument pos:start="111:21" pos:end="111:26"><expr pos:start="111:21" pos:end="111:26"><name pos:start="111:21" pos:end="111:26">RLDICL</name></expr></argument>, <argument pos:start="111:29" pos:end="111:36"><expr pos:start="111:29" pos:end="111:36"><name pos:start="111:29" pos:end="111:36">addr_reg</name></expr></argument>, <argument pos:start="111:39" pos:end="111:46"><expr pos:start="111:39" pos:end="111:46"><name pos:start="111:39" pos:end="111:46">addr_reg</name></expr></argument>, <argument pos:start="111:49" pos:end="111:49"><expr pos:start="111:49" pos:end="111:49"><literal type="number" pos:start="111:49" pos:end="111:49">0</literal></expr></argument>, <argument pos:start="111:52" pos:end="111:53"><expr pos:start="111:52" pos:end="111:53"><literal type="number" pos:start="111:52" pos:end="111:53">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="113:1" pos:end="113:6">#<cpp:directive pos:start="113:2" pos:end="113:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="115:5" pos:end="115:11"><expr pos:start="115:5" pos:end="115:10"><name pos:start="115:5" pos:end="115:6">r1</name> <operator pos:start="115:8" pos:end="115:8">=</operator> <literal type="number" pos:start="115:10" pos:end="115:10">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:18"><expr pos:start="117:5" pos:end="117:17"><name pos:start="117:5" pos:end="117:6">r0</name> <operator pos:start="117:8" pos:end="117:8">=</operator> <name pos:start="117:10" pos:end="117:17">addr_reg</name></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="126:0"><expr pos:start="119:5" pos:end="119:47"><name pos:start="119:5" pos:end="119:9">rbase</name> <operator pos:start="119:11" pos:end="119:11">=</operator> <ternary pos:start="119:13" pos:end="119:47"><condition pos:start="119:13" pos:end="119:24"><expr pos:start="119:13" pos:end="119:22"><name pos:start="119:13" pos:end="119:22">GUEST_BASE</name></expr> ?</condition><then pos:start="119:26" pos:end="119:43"> <expr pos:start="119:26" pos:end="119:43"><name pos:start="119:26" pos:end="119:43">TCG_GUEST_BASE_REG</name></expr> </then><else pos:start="119:45" pos:end="119:47">: <expr pos:start="119:47" pos:end="119:47"><literal type="number" pos:start="119:47" pos:end="119:47">0</literal></expr></else></ternary></expr>;</expr_stmt>

<cpp:endif pos:start="121:1" pos:end="121:6">#<cpp:directive pos:start="121:2" pos:end="121:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="125:1" pos:end="125:29">#<cpp:directive pos:start="125:2" pos:end="125:6">ifdef</cpp:directive> <name pos:start="125:8" pos:end="125:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="127:5" pos:end="130:0"><expr pos:start="127:5" pos:end="127:13"><name pos:start="127:5" pos:end="127:9">bswap</name> <operator pos:start="127:11" pos:end="127:11">=</operator> <literal type="number" pos:start="127:13" pos:end="127:13">0</literal></expr>;</expr_stmt>

<cpp:else pos:start="129:1" pos:end="129:5">#<cpp:directive pos:start="129:2" pos:end="129:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="131:5" pos:end="134:0"><expr pos:start="131:5" pos:end="131:13"><name pos:start="131:5" pos:end="131:9">bswap</name> <operator pos:start="131:11" pos:end="131:11">=</operator> <literal type="number" pos:start="131:13" pos:end="131:13">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="133:1" pos:end="133:6">#<cpp:directive pos:start="133:2" pos:end="133:6">endif</cpp:directive></cpp:endif>

    <switch pos:start="135:5" pos:end="190:0">switch <condition pos:start="135:12" pos:end="135:16">(<expr pos:start="135:13" pos:end="135:15"><name pos:start="135:13" pos:end="135:15">opc</name></expr>)</condition> <block pos:start="135:18" pos:end="190:0">{<block_content pos:start="137:5" pos:end="183:14">

    <case pos:start="137:5" pos:end="137:11">case <expr pos:start="137:10" pos:end="137:10"><literal type="number" pos:start="137:10" pos:end="137:10">0</literal></expr>:</case>

        <expr_stmt pos:start="139:9" pos:end="139:56"><expr pos:start="139:9" pos:end="139:55"><call pos:start="139:9" pos:end="139:55"><name pos:start="139:9" pos:end="139:17">tcg_out32</name> <argument_list pos:start="139:19" pos:end="139:55">(<argument pos:start="139:20" pos:end="139:20"><expr pos:start="139:20" pos:end="139:20"><name pos:start="139:20" pos:end="139:20">s</name></expr></argument>, <argument pos:start="139:23" pos:end="139:54"><expr pos:start="139:23" pos:end="139:54"><name pos:start="139:23" pos:end="139:26">STBX</name> <operator pos:start="139:28" pos:end="139:28">|</operator> <call pos:start="139:30" pos:end="139:54"><name pos:start="139:30" pos:end="139:32">SAB</name> <argument_list pos:start="139:34" pos:end="139:54">(<argument pos:start="139:35" pos:end="139:42"><expr pos:start="139:35" pos:end="139:42"><name pos:start="139:35" pos:end="139:42">data_reg</name></expr></argument>, <argument pos:start="139:45" pos:end="139:49"><expr pos:start="139:45" pos:end="139:49"><name pos:start="139:45" pos:end="139:49">rbase</name></expr></argument>, <argument pos:start="139:52" pos:end="139:53"><expr pos:start="139:52" pos:end="139:53"><name pos:start="139:52" pos:end="139:53">r0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="141:9" pos:end="141:14">break;</break>

    <case pos:start="143:5" pos:end="143:11">case <expr pos:start="143:10" pos:end="143:10"><literal type="number" pos:start="143:10" pos:end="143:10">1</literal></expr>:</case>

        <if_stmt pos:start="145:9" pos:end="151:60"><if pos:start="145:9" pos:end="147:62">if <condition pos:start="145:12" pos:end="145:18">(<expr pos:start="145:13" pos:end="145:17"><name pos:start="145:13" pos:end="145:17">bswap</name></expr>)</condition><block type="pseudo" pos:start="147:13" pos:end="147:62"><block_content pos:start="147:13" pos:end="147:62">

            <expr_stmt pos:start="147:13" pos:end="147:62"><expr pos:start="147:13" pos:end="147:61"><call pos:start="147:13" pos:end="147:61"><name pos:start="147:13" pos:end="147:21">tcg_out32</name> <argument_list pos:start="147:23" pos:end="147:61">(<argument pos:start="147:24" pos:end="147:24"><expr pos:start="147:24" pos:end="147:24"><name pos:start="147:24" pos:end="147:24">s</name></expr></argument>, <argument pos:start="147:27" pos:end="147:60"><expr pos:start="147:27" pos:end="147:60"><name pos:start="147:27" pos:end="147:32">STHBRX</name> <operator pos:start="147:34" pos:end="147:34">|</operator> <call pos:start="147:36" pos:end="147:60"><name pos:start="147:36" pos:end="147:38">SAB</name> <argument_list pos:start="147:40" pos:end="147:60">(<argument pos:start="147:41" pos:end="147:48"><expr pos:start="147:41" pos:end="147:48"><name pos:start="147:41" pos:end="147:48">data_reg</name></expr></argument>, <argument pos:start="147:51" pos:end="147:55"><expr pos:start="147:51" pos:end="147:55"><name pos:start="147:51" pos:end="147:55">rbase</name></expr></argument>, <argument pos:start="147:58" pos:end="147:59"><expr pos:start="147:58" pos:end="147:59"><name pos:start="147:58" pos:end="147:59">r0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="149:9" pos:end="151:60">else<block type="pseudo" pos:start="151:13" pos:end="151:60"><block_content pos:start="151:13" pos:end="151:60">

            <expr_stmt pos:start="151:13" pos:end="151:60"><expr pos:start="151:13" pos:end="151:59"><call pos:start="151:13" pos:end="151:59"><name pos:start="151:13" pos:end="151:21">tcg_out32</name> <argument_list pos:start="151:23" pos:end="151:59">(<argument pos:start="151:24" pos:end="151:24"><expr pos:start="151:24" pos:end="151:24"><name pos:start="151:24" pos:end="151:24">s</name></expr></argument>, <argument pos:start="151:27" pos:end="151:58"><expr pos:start="151:27" pos:end="151:58"><name pos:start="151:27" pos:end="151:30">STHX</name> <operator pos:start="151:32" pos:end="151:32">|</operator> <call pos:start="151:34" pos:end="151:58"><name pos:start="151:34" pos:end="151:36">SAB</name> <argument_list pos:start="151:38" pos:end="151:58">(<argument pos:start="151:39" pos:end="151:46"><expr pos:start="151:39" pos:end="151:46"><name pos:start="151:39" pos:end="151:46">data_reg</name></expr></argument>, <argument pos:start="151:49" pos:end="151:53"><expr pos:start="151:49" pos:end="151:53"><name pos:start="151:49" pos:end="151:53">rbase</name></expr></argument>, <argument pos:start="151:56" pos:end="151:57"><expr pos:start="151:56" pos:end="151:57"><name pos:start="151:56" pos:end="151:57">r0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="153:9" pos:end="153:14">break;</break>

    <case pos:start="155:5" pos:end="155:11">case <expr pos:start="155:10" pos:end="155:10"><literal type="number" pos:start="155:10" pos:end="155:10">2</literal></expr>:</case>

        <if_stmt pos:start="157:9" pos:end="163:60"><if pos:start="157:9" pos:end="159:62">if <condition pos:start="157:12" pos:end="157:18">(<expr pos:start="157:13" pos:end="157:17"><name pos:start="157:13" pos:end="157:17">bswap</name></expr>)</condition><block type="pseudo" pos:start="159:13" pos:end="159:62"><block_content pos:start="159:13" pos:end="159:62">

            <expr_stmt pos:start="159:13" pos:end="159:62"><expr pos:start="159:13" pos:end="159:61"><call pos:start="159:13" pos:end="159:61"><name pos:start="159:13" pos:end="159:21">tcg_out32</name> <argument_list pos:start="159:23" pos:end="159:61">(<argument pos:start="159:24" pos:end="159:24"><expr pos:start="159:24" pos:end="159:24"><name pos:start="159:24" pos:end="159:24">s</name></expr></argument>, <argument pos:start="159:27" pos:end="159:60"><expr pos:start="159:27" pos:end="159:60"><name pos:start="159:27" pos:end="159:32">STWBRX</name> <operator pos:start="159:34" pos:end="159:34">|</operator> <call pos:start="159:36" pos:end="159:60"><name pos:start="159:36" pos:end="159:38">SAB</name> <argument_list pos:start="159:40" pos:end="159:60">(<argument pos:start="159:41" pos:end="159:48"><expr pos:start="159:41" pos:end="159:48"><name pos:start="159:41" pos:end="159:48">data_reg</name></expr></argument>, <argument pos:start="159:51" pos:end="159:55"><expr pos:start="159:51" pos:end="159:55"><name pos:start="159:51" pos:end="159:55">rbase</name></expr></argument>, <argument pos:start="159:58" pos:end="159:59"><expr pos:start="159:58" pos:end="159:59"><name pos:start="159:58" pos:end="159:59">r0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="161:9" pos:end="163:60">else<block type="pseudo" pos:start="163:13" pos:end="163:60"><block_content pos:start="163:13" pos:end="163:60">

            <expr_stmt pos:start="163:13" pos:end="163:60"><expr pos:start="163:13" pos:end="163:59"><call pos:start="163:13" pos:end="163:59"><name pos:start="163:13" pos:end="163:21">tcg_out32</name> <argument_list pos:start="163:23" pos:end="163:59">(<argument pos:start="163:24" pos:end="163:24"><expr pos:start="163:24" pos:end="163:24"><name pos:start="163:24" pos:end="163:24">s</name></expr></argument>, <argument pos:start="163:27" pos:end="163:58"><expr pos:start="163:27" pos:end="163:58"><name pos:start="163:27" pos:end="163:30">STWX</name> <operator pos:start="163:32" pos:end="163:32">|</operator> <call pos:start="163:34" pos:end="163:58"><name pos:start="163:34" pos:end="163:36">SAB</name> <argument_list pos:start="163:38" pos:end="163:58">(<argument pos:start="163:39" pos:end="163:46"><expr pos:start="163:39" pos:end="163:46"><name pos:start="163:39" pos:end="163:46">data_reg</name></expr></argument>, <argument pos:start="163:49" pos:end="163:53"><expr pos:start="163:49" pos:end="163:53"><name pos:start="163:49" pos:end="163:53">rbase</name></expr></argument>, <argument pos:start="163:56" pos:end="163:57"><expr pos:start="163:56" pos:end="163:57"><name pos:start="163:56" pos:end="163:57">r0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="165:9" pos:end="165:14">break;</break>

    <case pos:start="167:5" pos:end="167:11">case <expr pos:start="167:10" pos:end="167:10"><literal type="number" pos:start="167:10" pos:end="167:10">3</literal></expr>:</case>

        <if_stmt pos:start="169:9" pos:end="181:61"><if pos:start="169:9" pos:end="179:9">if <condition pos:start="169:12" pos:end="169:18">(<expr pos:start="169:13" pos:end="169:17"><name pos:start="169:13" pos:end="169:17">bswap</name></expr>)</condition> <block pos:start="169:20" pos:end="179:9">{<block_content pos:start="171:13" pos:end="177:55">

            <expr_stmt pos:start="171:13" pos:end="171:62"><expr pos:start="171:13" pos:end="171:61"><call pos:start="171:13" pos:end="171:61"><name pos:start="171:13" pos:end="171:21">tcg_out32</name> <argument_list pos:start="171:23" pos:end="171:61">(<argument pos:start="171:24" pos:end="171:24"><expr pos:start="171:24" pos:end="171:24"><name pos:start="171:24" pos:end="171:24">s</name></expr></argument>, <argument pos:start="171:27" pos:end="171:60"><expr pos:start="171:27" pos:end="171:60"><name pos:start="171:27" pos:end="171:32">STWBRX</name> <operator pos:start="171:34" pos:end="171:34">|</operator> <call pos:start="171:36" pos:end="171:60"><name pos:start="171:36" pos:end="171:38">SAB</name> <argument_list pos:start="171:40" pos:end="171:60">(<argument pos:start="171:41" pos:end="171:48"><expr pos:start="171:41" pos:end="171:48"><name pos:start="171:41" pos:end="171:48">data_reg</name></expr></argument>, <argument pos:start="171:51" pos:end="171:55"><expr pos:start="171:51" pos:end="171:55"><name pos:start="171:51" pos:end="171:55">rbase</name></expr></argument>, <argument pos:start="171:58" pos:end="171:59"><expr pos:start="171:58" pos:end="171:59"><name pos:start="171:58" pos:end="171:59">r0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:56"><expr pos:start="173:13" pos:end="173:55"><call pos:start="173:13" pos:end="173:55"><name pos:start="173:13" pos:end="173:21">tcg_out32</name> <argument_list pos:start="173:23" pos:end="173:55">(<argument pos:start="173:24" pos:end="173:24"><expr pos:start="173:24" pos:end="173:24"><name pos:start="173:24" pos:end="173:24">s</name></expr></argument>, <argument pos:start="173:27" pos:end="173:54"><expr pos:start="173:27" pos:end="173:54"><name pos:start="173:27" pos:end="173:30">ADDI</name> <operator pos:start="173:32" pos:end="173:32">|</operator> <call pos:start="173:34" pos:end="173:40"><name pos:start="173:34" pos:end="173:35">RT</name> <argument_list pos:start="173:37" pos:end="173:40">(<argument pos:start="173:38" pos:end="173:39"><expr pos:start="173:38" pos:end="173:39"><name pos:start="173:38" pos:end="173:39">r1</name></expr></argument>)</argument_list></call> <operator pos:start="173:42" pos:end="173:42">|</operator> <call pos:start="173:44" pos:end="173:50"><name pos:start="173:44" pos:end="173:45">RA</name> <argument_list pos:start="173:47" pos:end="173:50">(<argument pos:start="173:48" pos:end="173:49"><expr pos:start="173:48" pos:end="173:49"><name pos:start="173:48" pos:end="173:49">r0</name></expr></argument>)</argument_list></call> <operator pos:start="173:52" pos:end="173:52">|</operator> <literal type="number" pos:start="173:54" pos:end="173:54">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:56"><expr pos:start="175:13" pos:end="175:55"><call pos:start="175:13" pos:end="175:55"><name pos:start="175:13" pos:end="175:23">tcg_out_rld</name> <argument_list pos:start="175:25" pos:end="175:55">(<argument pos:start="175:26" pos:end="175:26"><expr pos:start="175:26" pos:end="175:26"><name pos:start="175:26" pos:end="175:26">s</name></expr></argument>, <argument pos:start="175:29" pos:end="175:34"><expr pos:start="175:29" pos:end="175:34"><name pos:start="175:29" pos:end="175:34">RLDICL</name></expr></argument>, <argument pos:start="175:37" pos:end="175:37"><expr pos:start="175:37" pos:end="175:37"><literal type="number" pos:start="175:37" pos:end="175:37">0</literal></expr></argument>, <argument pos:start="175:40" pos:end="175:47"><expr pos:start="175:40" pos:end="175:47"><name pos:start="175:40" pos:end="175:47">data_reg</name></expr></argument>, <argument pos:start="175:50" pos:end="175:51"><expr pos:start="175:50" pos:end="175:51"><literal type="number" pos:start="175:50" pos:end="175:51">32</literal></expr></argument>, <argument pos:start="175:54" pos:end="175:54"><expr pos:start="175:54" pos:end="175:54"><literal type="number" pos:start="175:54" pos:end="175:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:55"><expr pos:start="177:13" pos:end="177:54"><call pos:start="177:13" pos:end="177:54"><name pos:start="177:13" pos:end="177:21">tcg_out32</name> <argument_list pos:start="177:23" pos:end="177:54">(<argument pos:start="177:24" pos:end="177:24"><expr pos:start="177:24" pos:end="177:24"><name pos:start="177:24" pos:end="177:24">s</name></expr></argument>, <argument pos:start="177:27" pos:end="177:53"><expr pos:start="177:27" pos:end="177:53"><name pos:start="177:27" pos:end="177:32">STWBRX</name> <operator pos:start="177:34" pos:end="177:34">|</operator> <call pos:start="177:36" pos:end="177:53"><name pos:start="177:36" pos:end="177:38">SAB</name> <argument_list pos:start="177:40" pos:end="177:53">(<argument pos:start="177:41" pos:end="177:41"><expr pos:start="177:41" pos:end="177:41"><literal type="number" pos:start="177:41" pos:end="177:41">0</literal></expr></argument>, <argument pos:start="177:44" pos:end="177:48"><expr pos:start="177:44" pos:end="177:48"><name pos:start="177:44" pos:end="177:48">rbase</name></expr></argument>, <argument pos:start="177:51" pos:end="177:52"><expr pos:start="177:51" pos:end="177:52"><name pos:start="177:51" pos:end="177:52">r1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if>

        <else pos:start="181:9" pos:end="181:61">else<block type="pseudo" pos:start="181:14" pos:end="181:61"><block_content pos:start="181:14" pos:end="181:61"> <expr_stmt pos:start="181:14" pos:end="181:61"><expr pos:start="181:14" pos:end="181:60"><call pos:start="181:14" pos:end="181:60"><name pos:start="181:14" pos:end="181:22">tcg_out32</name> <argument_list pos:start="181:24" pos:end="181:60">(<argument pos:start="181:25" pos:end="181:25"><expr pos:start="181:25" pos:end="181:25"><name pos:start="181:25" pos:end="181:25">s</name></expr></argument>, <argument pos:start="181:28" pos:end="181:59"><expr pos:start="181:28" pos:end="181:59"><name pos:start="181:28" pos:end="181:31">STDX</name> <operator pos:start="181:33" pos:end="181:33">|</operator> <call pos:start="181:35" pos:end="181:59"><name pos:start="181:35" pos:end="181:37">SAB</name> <argument_list pos:start="181:39" pos:end="181:59">(<argument pos:start="181:40" pos:end="181:47"><expr pos:start="181:40" pos:end="181:47"><name pos:start="181:40" pos:end="181:47">data_reg</name></expr></argument>, <argument pos:start="181:50" pos:end="181:54"><expr pos:start="181:50" pos:end="181:54"><name pos:start="181:50" pos:end="181:54">rbase</name></expr></argument>, <argument pos:start="181:57" pos:end="181:58"><expr pos:start="181:57" pos:end="181:58"><name pos:start="181:57" pos:end="181:58">r0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="183:9" pos:end="183:14">break;</break>

    </block_content>}</block></switch>



<cpp:ifdef pos:start="189:1" pos:end="189:21">#<cpp:directive pos:start="189:2" pos:end="189:6">ifdef</cpp:directive> <name pos:start="189:8" pos:end="189:21">CONFIG_SOFTMMU</name></cpp:ifdef>

    <expr_stmt pos:start="191:5" pos:end="194:0"><expr pos:start="191:5" pos:end="191:58"><call pos:start="191:5" pos:end="191:58"><name pos:start="191:5" pos:end="191:14">reloc_pc24</name> <argument_list pos:start="191:16" pos:end="191:58">(<argument pos:start="191:17" pos:end="191:26"><expr pos:start="191:17" pos:end="191:26"><name pos:start="191:17" pos:end="191:26">label2_ptr</name></expr></argument>, <argument pos:start="191:29" pos:end="191:57"><expr pos:start="191:29" pos:end="191:57"><operator pos:start="191:29" pos:end="191:29">(</operator><name pos:start="191:30" pos:end="191:44">tcg_target_long</name><operator pos:start="191:45" pos:end="191:45">)</operator> <name pos:start="191:47" pos:end="191:57"><name pos:start="191:47" pos:end="191:47">s</name><operator pos:start="191:48" pos:end="191:49">-&gt;</operator><name pos:start="191:50" pos:end="191:57">code_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="193:1" pos:end="193:6">#<cpp:directive pos:start="193:2" pos:end="193:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
