<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14191.c" pos:tabs="8"><function pos:start="1:1" pos:end="157:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">bamboo_init</name><parameter_list pos:start="1:24" pos:end="11:46">(<parameter pos:start="1:25" pos:end="1:43"><decl pos:start="1:25" pos:end="1:43"><type pos:start="1:25" pos:end="1:43"><name pos:start="1:25" pos:end="1:34">ram_addr_t</name></type> <name pos:start="1:36" pos:end="1:43">ram_size</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:47"><decl pos:start="3:25" pos:end="3:47"><type pos:start="3:25" pos:end="3:47"><specifier pos:start="3:25" pos:end="3:29">const</specifier> <name pos:start="3:31" pos:end="3:34">char</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:47">boot_device</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:51"><decl pos:start="5:25" pos:end="5:51"><type pos:start="5:25" pos:end="5:51"><specifier pos:start="5:25" pos:end="5:29">const</specifier> <name pos:start="5:31" pos:end="5:34">char</name> <modifier pos:start="5:36" pos:end="5:36">*</modifier></type><name pos:start="5:37" pos:end="5:51">kernel_filename</name></decl></parameter>,

                        <parameter pos:start="7:25" pos:end="7:50"><decl pos:start="7:25" pos:end="7:50"><type pos:start="7:25" pos:end="7:50"><specifier pos:start="7:25" pos:end="7:29">const</specifier> <name pos:start="7:31" pos:end="7:34">char</name> <modifier pos:start="7:36" pos:end="7:36">*</modifier></type><name pos:start="7:37" pos:end="7:50">kernel_cmdline</name></decl></parameter>,

                        <parameter pos:start="9:25" pos:end="9:51"><decl pos:start="9:25" pos:end="9:51"><type pos:start="9:25" pos:end="9:51"><specifier pos:start="9:25" pos:end="9:29">const</specifier> <name pos:start="9:31" pos:end="9:34">char</name> <modifier pos:start="9:36" pos:end="9:36">*</modifier></type><name pos:start="9:37" pos:end="9:51">initrd_filename</name></decl></parameter>,

                        <parameter pos:start="11:25" pos:end="11:45"><decl pos:start="11:25" pos:end="11:45"><type pos:start="11:25" pos:end="11:45"><specifier pos:start="11:25" pos:end="11:29">const</specifier> <name pos:start="11:31" pos:end="11:34">char</name> <modifier pos:start="11:36" pos:end="11:36">*</modifier></type><name pos:start="11:37" pos:end="11:45">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="157:1">{<block_content pos:start="15:5" pos:end="155:22">

    <decl_stmt pos:start="15:5" pos:end="15:53"><decl pos:start="15:5" pos:end="15:52"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:31"><name pos:start="15:18" pos:end="15:28">pci_irq_nrs</name><index pos:start="15:29" pos:end="15:31">[<expr pos:start="15:30" pos:end="15:30"><literal type="number" pos:start="15:30" pos:end="15:30">4</literal></expr>]</index></name> <init pos:start="15:33" pos:end="15:52">= <expr pos:start="15:35" pos:end="15:52"><block pos:start="15:35" pos:end="15:52">{ <expr pos:start="15:37" pos:end="15:38"><literal type="number" pos:start="15:37" pos:end="15:38">28</literal></expr>, <expr pos:start="15:41" pos:end="15:42"><literal type="number" pos:start="15:41" pos:end="15:42">27</literal></expr>, <expr pos:start="15:45" pos:end="15:46"><literal type="number" pos:start="15:45" pos:end="15:46">26</literal></expr>, <expr pos:start="15:49" pos:end="15:50"><literal type="number" pos:start="15:49" pos:end="15:50">25</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:10">PCIBus</name> <modifier pos:start="17:12" pos:end="17:12">*</modifier></type><name pos:start="17:13" pos:end="17:18">pcibus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">CPUState</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:22">elf_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint64_t</name></type> <name pos:start="23:14" pos:end="23:24">elf_lowaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:33"><decl pos:start="25:5" pos:end="25:32"><type pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:22">target_phys_addr_t</name></type> <name pos:start="25:24" pos:end="25:28">entry</name> <init pos:start="25:30" pos:end="25:32">= <expr pos:start="25:32" pos:end="25:32"><literal type="number" pos:start="25:32" pos:end="25:32">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:36"><decl pos:start="27:5" pos:end="27:35"><type pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:22">target_phys_addr_t</name></type> <name pos:start="27:24" pos:end="27:31">loadaddr</name> <init pos:start="27:33" pos:end="27:35">= <expr pos:start="27:35" pos:end="27:35"><literal type="number" pos:start="27:35" pos:end="27:35">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:32"><decl pos:start="29:5" pos:end="29:31"><type pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:15">target_long</name></type> <name pos:start="29:17" pos:end="29:27">initrd_size</name> <init pos:start="29:29" pos:end="29:31">= <expr pos:start="29:31" pos:end="29:31"><literal type="number" pos:start="29:31" pos:end="29:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:16"><decl pos:start="31:5" pos:end="31:15"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:15">success</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:10"><decl pos:start="33:5" pos:end="33:9"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:20">/* Setup CPU. */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:71"><expr pos:start="39:5" pos:end="39:70"><name pos:start="39:5" pos:end="39:7">env</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:70"><name pos:start="39:11" pos:end="39:23">ppc440ep_init</name><argument_list pos:start="39:24" pos:end="39:70">(<argument pos:start="39:25" pos:end="39:33"><expr pos:start="39:25" pos:end="39:33"><operator pos:start="39:25" pos:end="39:25">&amp;</operator><name pos:start="39:26" pos:end="39:33">ram_size</name></expr></argument>, <argument pos:start="39:36" pos:end="39:42"><expr pos:start="39:36" pos:end="39:42"><operator pos:start="39:36" pos:end="39:36">&amp;</operator><name pos:start="39:37" pos:end="39:42">pcibus</name></expr></argument>, <argument pos:start="39:45" pos:end="39:55"><expr pos:start="39:45" pos:end="39:55"><name pos:start="39:45" pos:end="39:55">pci_irq_nrs</name></expr></argument>, <argument pos:start="39:58" pos:end="39:58"><expr pos:start="39:58" pos:end="39:58"><literal type="number" pos:start="39:58" pos:end="39:58">1</literal></expr></argument>, <argument pos:start="39:61" pos:end="39:69"><expr pos:start="39:61" pos:end="39:69"><name pos:start="39:61" pos:end="39:69">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="57:5"><if pos:start="43:5" pos:end="57:5">if <condition pos:start="43:8" pos:end="43:15">(<expr pos:start="43:9" pos:end="43:14"><name pos:start="43:9" pos:end="43:14">pcibus</name></expr>)</condition> <block pos:start="43:17" pos:end="57:5">{<block_content pos:start="47:9" pos:end="55:9">

        <comment type="block" pos:start="45:9" pos:end="45:42">/* Register network interfaces. */</comment>

        <for pos:start="47:9" pos:end="55:9">for <control pos:start="47:13" pos:end="47:37">(<init pos:start="47:14" pos:end="47:19"><expr pos:start="47:14" pos:end="47:18"><name pos:start="47:14" pos:end="47:14">i</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <literal type="number" pos:start="47:18" pos:end="47:18">0</literal></expr>;</init> <condition pos:start="47:21" pos:end="47:32"><expr pos:start="47:21" pos:end="47:31"><name pos:start="47:21" pos:end="47:21">i</name> <operator pos:start="47:23" pos:end="47:23">&lt;</operator> <name pos:start="47:25" pos:end="47:31">nb_nics</name></expr>;</condition> <incr pos:start="47:34" pos:end="47:36"><expr pos:start="47:34" pos:end="47:36"><name pos:start="47:34" pos:end="47:34">i</name><operator pos:start="47:35" pos:end="47:36">++</operator></expr></incr>)</control> <block pos:start="47:39" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:61">

            <comment type="block" pos:start="49:13" pos:end="51:75">/* There are no PCI NICs on the Bamboo board, but there are

             * PCI slots, so we can pick whatever default model we want. */</comment>

            <expr_stmt pos:start="53:13" pos:end="53:61"><expr pos:start="53:13" pos:end="53:60"><call pos:start="53:13" pos:end="53:60"><name pos:start="53:13" pos:end="53:31">pci_nic_init_nofail</name><argument_list pos:start="53:32" pos:end="53:60">(<argument pos:start="53:33" pos:end="53:44"><expr pos:start="53:33" pos:end="53:44"><operator pos:start="53:33" pos:end="53:33">&amp;</operator><name pos:start="53:34" pos:end="53:44"><name pos:start="53:34" pos:end="53:41">nd_table</name><index pos:start="53:42" pos:end="53:44">[<expr pos:start="53:43" pos:end="53:43"><name pos:start="53:43" pos:end="53:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="53:47" pos:end="53:53"><expr pos:start="53:47" pos:end="53:53"><literal type="string" pos:start="53:47" pos:end="53:53">"e1000"</literal></expr></argument>, <argument pos:start="53:56" pos:end="53:59"><expr pos:start="53:56" pos:end="53:59"><name pos:start="53:56" pos:end="53:59">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:22">/* Load kernel. */</comment>

    <if_stmt pos:start="63:5" pos:end="91:5"><if pos:start="63:5" pos:end="91:5">if <condition pos:start="63:8" pos:end="63:24">(<expr pos:start="63:9" pos:end="63:23"><name pos:start="63:9" pos:end="63:23">kernel_filename</name></expr>)</condition> <block pos:start="63:26" pos:end="91:5">{<block_content pos:start="65:9" pos:end="89:9">

        <expr_stmt pos:start="65:9" pos:end="65:72"><expr pos:start="65:9" pos:end="65:71"><name pos:start="65:9" pos:end="65:15">success</name> <operator pos:start="65:17" pos:end="65:17">=</operator> <call pos:start="65:19" pos:end="65:71"><name pos:start="65:19" pos:end="65:29">load_uimage</name><argument_list pos:start="65:30" pos:end="65:71">(<argument pos:start="65:31" pos:end="65:45"><expr pos:start="65:31" pos:end="65:45"><name pos:start="65:31" pos:end="65:45">kernel_filename</name></expr></argument>, <argument pos:start="65:48" pos:end="65:53"><expr pos:start="65:48" pos:end="65:53"><operator pos:start="65:48" pos:end="65:48">&amp;</operator><name pos:start="65:49" pos:end="65:53">entry</name></expr></argument>, <argument pos:start="65:56" pos:end="65:64"><expr pos:start="65:56" pos:end="65:64"><operator pos:start="65:56" pos:end="65:56">&amp;</operator><name pos:start="65:57" pos:end="65:64">loadaddr</name></expr></argument>, <argument pos:start="65:67" pos:end="65:70"><expr pos:start="65:67" pos:end="65:70"><name pos:start="65:67" pos:end="65:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="77:9"><if pos:start="67:9" pos:end="77:9">if <condition pos:start="67:12" pos:end="67:24">(<expr pos:start="67:13" pos:end="67:23"><name pos:start="67:13" pos:end="67:19">success</name> <operator pos:start="67:21" pos:end="67:21">&lt;</operator> <literal type="number" pos:start="67:23" pos:end="67:23">0</literal></expr>)</condition> <block pos:start="67:26" pos:end="77:9">{<block_content pos:start="69:13" pos:end="75:35">

            <expr_stmt pos:start="69:13" pos:end="71:70"><expr pos:start="69:13" pos:end="71:69"><name pos:start="69:13" pos:end="69:19">success</name> <operator pos:start="69:21" pos:end="69:21">=</operator> <call pos:start="69:23" pos:end="71:69"><name pos:start="69:23" pos:end="69:30">load_elf</name><argument_list pos:start="69:31" pos:end="71:69">(<argument pos:start="69:32" pos:end="69:46"><expr pos:start="69:32" pos:end="69:46"><name pos:start="69:32" pos:end="69:46">kernel_filename</name></expr></argument>, <argument pos:start="69:49" pos:end="69:52"><expr pos:start="69:49" pos:end="69:52"><name pos:start="69:49" pos:end="69:52">NULL</name></expr></argument>, <argument pos:start="69:55" pos:end="69:58"><expr pos:start="69:55" pos:end="69:58"><name pos:start="69:55" pos:end="69:58">NULL</name></expr></argument>, <argument pos:start="69:61" pos:end="69:70"><expr pos:start="69:61" pos:end="69:70"><operator pos:start="69:61" pos:end="69:61">&amp;</operator><name pos:start="69:62" pos:end="69:70">elf_entry</name></expr></argument>,

                               <argument pos:start="71:32" pos:end="71:43"><expr pos:start="71:32" pos:end="71:43"><operator pos:start="71:32" pos:end="71:32">&amp;</operator><name pos:start="71:33" pos:end="71:43">elf_lowaddr</name></expr></argument>, <argument pos:start="71:46" pos:end="71:49"><expr pos:start="71:46" pos:end="71:49"><name pos:start="71:46" pos:end="71:49">NULL</name></expr></argument>, <argument pos:start="71:52" pos:end="71:52"><expr pos:start="71:52" pos:end="71:52"><literal type="number" pos:start="71:52" pos:end="71:52">1</literal></expr></argument>, <argument pos:start="71:55" pos:end="71:65"><expr pos:start="71:55" pos:end="71:65"><name pos:start="71:55" pos:end="71:65">ELF_MACHINE</name></expr></argument>, <argument pos:start="71:68" pos:end="71:68"><expr pos:start="71:68" pos:end="71:68"><literal type="number" pos:start="71:68" pos:end="71:68">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:30"><expr pos:start="73:13" pos:end="73:29"><name pos:start="73:13" pos:end="73:17">entry</name> <operator pos:start="73:19" pos:end="73:19">=</operator> <name pos:start="73:21" pos:end="73:29">elf_entry</name></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:35"><expr pos:start="75:13" pos:end="75:34"><name pos:start="75:13" pos:end="75:20">loadaddr</name> <operator pos:start="75:22" pos:end="75:22">=</operator> <name pos:start="75:24" pos:end="75:34">elf_lowaddr</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="79:9" pos:end="79:37">/* XXX try again as binary */</comment>

        <if_stmt pos:start="81:9" pos:end="89:9"><if pos:start="81:9" pos:end="89:9">if <condition pos:start="81:12" pos:end="81:24">(<expr pos:start="81:13" pos:end="81:23"><name pos:start="81:13" pos:end="81:19">success</name> <operator pos:start="81:21" pos:end="81:21">&lt;</operator> <literal type="number" pos:start="81:23" pos:end="81:23">0</literal></expr>)</condition> <block pos:start="81:26" pos:end="89:9">{<block_content pos:start="83:13" pos:end="87:20">

            <expr_stmt pos:start="83:13" pos:end="85:37"><expr pos:start="83:13" pos:end="85:36"><call pos:start="83:13" pos:end="85:36"><name pos:start="83:13" pos:end="83:19">fprintf</name><argument_list pos:start="83:20" pos:end="85:36">(<argument pos:start="83:21" pos:end="83:26"><expr pos:start="83:21" pos:end="83:26"><name pos:start="83:21" pos:end="83:26">stderr</name></expr></argument>, <argument pos:start="83:29" pos:end="83:64"><expr pos:start="83:29" pos:end="83:64"><literal type="string" pos:start="83:29" pos:end="83:64">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                    <argument pos:start="85:21" pos:end="85:35"><expr pos:start="85:21" pos:end="85:35"><name pos:start="85:21" pos:end="85:35">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:20"><expr pos:start="87:13" pos:end="87:19"><call pos:start="87:13" pos:end="87:19"><name pos:start="87:13" pos:end="87:16">exit</name><argument_list pos:start="87:17" pos:end="87:19">(<argument pos:start="87:18" pos:end="87:18"><expr pos:start="87:18" pos:end="87:18"><literal type="number" pos:start="87:18" pos:end="87:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="95:5" pos:end="95:22">/* Load initrd. */</comment>

    <if_stmt pos:start="97:5" pos:end="115:5"><if pos:start="97:5" pos:end="115:5">if <condition pos:start="97:8" pos:end="97:24">(<expr pos:start="97:9" pos:end="97:23"><name pos:start="97:9" pos:end="97:23">initrd_filename</name></expr>)</condition> <block pos:start="97:26" pos:end="115:5">{<block_content pos:start="99:9" pos:end="113:9">

        <expr_stmt pos:start="99:9" pos:end="101:67"><expr pos:start="99:9" pos:end="101:66"><name pos:start="99:9" pos:end="99:19">initrd_size</name> <operator pos:start="99:21" pos:end="99:21">=</operator> <call pos:start="99:23" pos:end="101:66"><name pos:start="99:23" pos:end="99:41">load_image_targphys</name><argument_list pos:start="99:42" pos:end="101:66">(<argument pos:start="99:43" pos:end="99:57"><expr pos:start="99:43" pos:end="99:57"><name pos:start="99:43" pos:end="99:57">initrd_filename</name></expr></argument>, <argument pos:start="99:60" pos:end="99:71"><expr pos:start="99:60" pos:end="99:71"><name pos:start="99:60" pos:end="99:71">RAMDISK_ADDR</name></expr></argument>,

                                          <argument pos:start="101:43" pos:end="101:65"><expr pos:start="101:43" pos:end="101:65"><name pos:start="101:43" pos:end="101:50">ram_size</name> <operator pos:start="101:52" pos:end="101:52">-</operator> <name pos:start="101:54" pos:end="101:65">RAMDISK_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="105:9" pos:end="113:9"><if pos:start="105:9" pos:end="113:9">if <condition pos:start="105:12" pos:end="105:28">(<expr pos:start="105:13" pos:end="105:27"><name pos:start="105:13" pos:end="105:23">initrd_size</name> <operator pos:start="105:25" pos:end="105:25">&lt;</operator> <literal type="number" pos:start="105:27" pos:end="105:27">0</literal></expr>)</condition> <block pos:start="105:30" pos:end="113:9">{<block_content pos:start="107:13" pos:end="111:20">

            <expr_stmt pos:start="107:13" pos:end="109:51"><expr pos:start="107:13" pos:end="109:50"><call pos:start="107:13" pos:end="109:50"><name pos:start="107:13" pos:end="107:19">fprintf</name><argument_list pos:start="107:20" pos:end="109:50">(<argument pos:start="107:21" pos:end="107:26"><expr pos:start="107:21" pos:end="107:26"><name pos:start="107:21" pos:end="107:26">stderr</name></expr></argument>, <argument pos:start="107:29" pos:end="107:72"><expr pos:start="107:29" pos:end="107:72"><literal type="string" pos:start="107:29" pos:end="107:72">"qemu: could not load ram disk '%s' at %x\n"</literal></expr></argument>,

                    <argument pos:start="109:21" pos:end="109:35"><expr pos:start="109:21" pos:end="109:35"><name pos:start="109:21" pos:end="109:35">initrd_filename</name></expr></argument>, <argument pos:start="109:38" pos:end="109:49"><expr pos:start="109:38" pos:end="109:49"><name pos:start="109:38" pos:end="109:49">RAMDISK_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:20"><expr pos:start="111:13" pos:end="111:19"><call pos:start="111:13" pos:end="111:19"><name pos:start="111:13" pos:end="111:16">exit</name><argument_list pos:start="111:17" pos:end="111:19">(<argument pos:start="111:18" pos:end="111:18"><expr pos:start="111:18" pos:end="111:18"><literal type="number" pos:start="111:18" pos:end="111:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="119:5" pos:end="119:79">/* If we're loading a kernel directly, we must load the device tree too. */</comment>

    <if_stmt pos:start="121:5" pos:end="149:5"><if pos:start="121:5" pos:end="149:5">if <condition pos:start="121:8" pos:end="121:24">(<expr pos:start="121:9" pos:end="121:23"><name pos:start="121:9" pos:end="121:23">kernel_filename</name></expr>)</condition> <block pos:start="121:26" pos:end="149:5">{<block_content pos:start="123:9" pos:end="145:25">

        <if_stmt pos:start="123:9" pos:end="131:9"><if pos:start="123:9" pos:end="131:9">if <condition pos:start="123:12" pos:end="125:69">(<expr pos:start="123:13" pos:end="125:68"><call pos:start="123:13" pos:end="125:64"><name pos:start="123:13" pos:end="123:35">bamboo_load_device_tree</name><argument_list pos:start="123:36" pos:end="125:64">(<argument pos:start="123:37" pos:end="123:44"><expr pos:start="123:37" pos:end="123:44"><name pos:start="123:37" pos:end="123:44">FDT_ADDR</name></expr></argument>, <argument pos:start="123:47" pos:end="123:54"><expr pos:start="123:47" pos:end="123:54"><name pos:start="123:47" pos:end="123:54">ram_size</name></expr></argument>, <argument pos:start="123:57" pos:end="123:68"><expr pos:start="123:57" pos:end="123:68"><name pos:start="123:57" pos:end="123:68">RAMDISK_ADDR</name></expr></argument>,

                                    <argument pos:start="125:37" pos:end="125:47"><expr pos:start="125:37" pos:end="125:47"><name pos:start="125:37" pos:end="125:47">initrd_size</name></expr></argument>, <argument pos:start="125:50" pos:end="125:63"><expr pos:start="125:50" pos:end="125:63"><name pos:start="125:50" pos:end="125:63">kernel_cmdline</name></expr></argument>)</argument_list></call> <operator pos:start="125:66" pos:end="125:66">&lt;</operator> <literal type="number" pos:start="125:68" pos:end="125:68">0</literal></expr>)</condition> <block pos:start="125:71" pos:end="131:9">{<block_content pos:start="127:13" pos:end="129:20">

            <expr_stmt pos:start="127:13" pos:end="127:59"><expr pos:start="127:13" pos:end="127:58"><call pos:start="127:13" pos:end="127:58"><name pos:start="127:13" pos:end="127:19">fprintf</name><argument_list pos:start="127:20" pos:end="127:58">(<argument pos:start="127:21" pos:end="127:26"><expr pos:start="127:21" pos:end="127:26"><name pos:start="127:21" pos:end="127:26">stderr</name></expr></argument>, <argument pos:start="127:29" pos:end="127:57"><expr pos:start="127:29" pos:end="127:57"><literal type="string" pos:start="127:29" pos:end="127:57">"couldn't load device tree\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:20"><expr pos:start="129:13" pos:end="129:19"><call pos:start="129:13" pos:end="129:19"><name pos:start="129:13" pos:end="129:16">exit</name><argument_list pos:start="129:17" pos:end="129:19">(<argument pos:start="129:18" pos:end="129:18"><expr pos:start="129:18" pos:end="129:18"><literal type="number" pos:start="129:18" pos:end="129:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="135:9" pos:end="135:35"><expr pos:start="135:9" pos:end="135:34"><call pos:start="135:9" pos:end="135:34"><name pos:start="135:9" pos:end="135:29">cpu_synchronize_state</name><argument_list pos:start="135:30" pos:end="135:34">(<argument pos:start="135:31" pos:end="135:33"><expr pos:start="135:31" pos:end="135:33"><name pos:start="135:31" pos:end="135:33">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="139:9" pos:end="139:38">/* Set initial guest state. */</comment>

        <expr_stmt pos:start="141:9" pos:end="141:35"><expr pos:start="141:9" pos:end="141:34"><name pos:start="141:9" pos:end="141:19"><name pos:start="141:9" pos:end="141:11">env</name><operator pos:start="141:12" pos:end="141:13">-&gt;</operator><name pos:start="141:14" pos:end="141:16">gpr</name><index pos:start="141:17" pos:end="141:19">[<expr pos:start="141:18" pos:end="141:18"><literal type="number" pos:start="141:18" pos:end="141:18">1</literal></expr>]</index></name> <operator pos:start="141:21" pos:end="141:21">=</operator> <operator pos:start="141:23" pos:end="141:23">(</operator><literal type="number" pos:start="141:24" pos:end="141:25">16</literal><operator pos:start="141:26" pos:end="141:27">&lt;&lt;</operator><literal type="number" pos:start="141:28" pos:end="141:29">20</literal><operator pos:start="141:30" pos:end="141:30">)</operator> <operator pos:start="141:32" pos:end="141:32">-</operator> <literal type="number" pos:start="141:34" pos:end="141:34">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:31"><expr pos:start="143:9" pos:end="143:30"><name pos:start="143:9" pos:end="143:19"><name pos:start="143:9" pos:end="143:11">env</name><operator pos:start="143:12" pos:end="143:13">-&gt;</operator><name pos:start="143:14" pos:end="143:16">gpr</name><index pos:start="143:17" pos:end="143:19">[<expr pos:start="143:18" pos:end="143:18"><literal type="number" pos:start="143:18" pos:end="143:18">3</literal></expr>]</index></name> <operator pos:start="143:21" pos:end="143:21">=</operator> <name pos:start="143:23" pos:end="143:30">FDT_ADDR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:25"><expr pos:start="145:9" pos:end="145:24"><name pos:start="145:9" pos:end="145:16"><name pos:start="145:9" pos:end="145:11">env</name><operator pos:start="145:12" pos:end="145:13">-&gt;</operator><name pos:start="145:14" pos:end="145:16">nip</name></name> <operator pos:start="145:18" pos:end="145:18">=</operator> <name pos:start="145:20" pos:end="145:24">entry</name></expr>;</expr_stmt>

        <comment type="block" pos:start="147:9" pos:end="147:80">/* XXX we currently depend on KVM to create some initial TLB entries. */</comment>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="153:5" pos:end="155:22"><if pos:start="153:5" pos:end="155:22">if <condition pos:start="153:8" pos:end="153:22">(<expr pos:start="153:9" pos:end="153:21"><call pos:start="153:9" pos:end="153:21"><name pos:start="153:9" pos:end="153:19">kvm_enabled</name><argument_list pos:start="153:20" pos:end="153:21">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="155:9" pos:end="155:22"><block_content pos:start="155:9" pos:end="155:22">

        <expr_stmt pos:start="155:9" pos:end="155:22"><expr pos:start="155:9" pos:end="155:21"><call pos:start="155:9" pos:end="155:21"><name pos:start="155:9" pos:end="155:19">kvmppc_init</name><argument_list pos:start="155:20" pos:end="155:21">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
