<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21532.c" pos:tabs="8"><function pos:start="1:1" pos:end="259:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:28">qcow2_get_cluster_offset</name><parameter_list pos:start="1:29" pos:end="3:75">(<parameter pos:start="1:30" pos:end="1:49"><decl pos:start="1:30" pos:end="1:49"><type pos:start="1:30" pos:end="1:49"><name pos:start="1:30" pos:end="1:45">BlockDriverState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:49">bs</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:66"><decl pos:start="1:52" pos:end="1:66"><type pos:start="1:52" pos:end="1:66"><name pos:start="1:52" pos:end="1:59">uint64_t</name></type> <name pos:start="1:61" pos:end="1:66">offset</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:48"><decl pos:start="3:30" pos:end="3:48"><type pos:start="3:30" pos:end="3:48"><name pos:start="3:30" pos:end="3:37">unsigned</name> <name pos:start="3:39" pos:end="3:41">int</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:48">bytes</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:74"><decl pos:start="3:51" pos:end="3:74"><type pos:start="3:51" pos:end="3:74"><name pos:start="3:51" pos:end="3:58">uint64_t</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:74">cluster_offset</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="259:1">{<block_content pos:start="7:5" pos:end="257:15">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">BDRVQcow2State</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:34">= <expr pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:26">bs</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:25">l2_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:44"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:21">l1_index</name></decl>, <decl pos:start="11:24" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:24" pos:end="11:32">l2_offset</name></decl>, <decl pos:start="11:35" pos:end="11:43"><type ref="prev" pos:start="11:5" pos:end="11:12"><modifier pos:start="11:35" pos:end="11:35">*</modifier></type><name pos:start="11:36" pos:end="11:43">l2_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:15">l1_bits</name></decl>, <decl pos:start="13:18" pos:end="13:18"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:18" pos:end="13:18">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:35"><decl pos:start="15:5" pos:end="15:34"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:34">offset_in_cluster</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:56"><decl pos:start="17:5" pos:end="17:28"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:28">bytes_available</name></decl>, <decl pos:start="17:31" pos:end="17:42"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:31" pos:end="17:42">bytes_needed</name></decl>, <decl pos:start="17:45" pos:end="17:55"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:45" pos:end="17:55">nb_clusters</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:55"><expr pos:start="23:5" pos:end="23:54"><name pos:start="23:5" pos:end="23:21">offset_in_cluster</name> <operator pos:start="23:23" pos:end="23:23">=</operator> <call pos:start="23:25" pos:end="23:54"><name pos:start="23:25" pos:end="23:43">offset_into_cluster</name><argument_list pos:start="23:44" pos:end="23:54">(<argument pos:start="23:45" pos:end="23:45"><expr pos:start="23:45" pos:end="23:45"><name pos:start="23:45" pos:end="23:45">s</name></expr></argument>, <argument pos:start="23:48" pos:end="23:53"><expr pos:start="23:48" pos:end="23:53"><name pos:start="23:48" pos:end="23:53">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:57"><expr pos:start="25:5" pos:end="25:56"><name pos:start="25:5" pos:end="25:16">bytes_needed</name> <operator pos:start="25:18" pos:end="25:18">=</operator> <operator pos:start="25:20" pos:end="25:20">(</operator><name pos:start="25:21" pos:end="25:28">uint64_t</name><operator pos:start="25:29" pos:end="25:29">)</operator> <operator pos:start="25:31" pos:end="25:31">*</operator><name pos:start="25:32" pos:end="25:36">bytes</name> <operator pos:start="25:38" pos:end="25:38">+</operator> <name pos:start="25:40" pos:end="25:56">offset_in_cluster</name></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:43"><expr pos:start="29:5" pos:end="29:42"><name pos:start="29:5" pos:end="29:11">l1_bits</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <name pos:start="29:15" pos:end="29:24"><name pos:start="29:15" pos:end="29:15">s</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:24">l2_bits</name></name> <operator pos:start="29:26" pos:end="29:26">+</operator> <name pos:start="29:28" pos:end="29:42"><name pos:start="29:28" pos:end="29:28">s</name><operator pos:start="29:29" pos:end="29:30">-&gt;</operator><name pos:start="29:31" pos:end="29:42">cluster_bits</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="35:55">/* compute how many bytes there are between the start of the cluster

     * containing offset and the end of the l1 entry */</comment>

    <expr_stmt pos:start="37:5" pos:end="39:40"><expr pos:start="37:5" pos:end="39:39"><name pos:start="37:5" pos:end="37:19">bytes_available</name> <operator pos:start="37:21" pos:end="37:21">=</operator> <operator pos:start="37:23" pos:end="37:23">(</operator><literal type="number" pos:start="37:24" pos:end="37:27">1ULL</literal> <operator pos:start="37:29" pos:end="37:30">&lt;&lt;</operator> <name pos:start="37:32" pos:end="37:38">l1_bits</name><operator pos:start="37:39" pos:end="37:39">)</operator> <operator pos:start="37:41" pos:end="37:41">-</operator> <operator pos:start="37:43" pos:end="37:43">(</operator><name pos:start="37:44" pos:end="37:49">offset</name> <operator pos:start="37:51" pos:end="37:51">&amp;</operator> <operator pos:start="37:53" pos:end="37:53">(</operator><operator pos:start="37:54" pos:end="37:54">(</operator><literal type="number" pos:start="37:55" pos:end="37:58">1ULL</literal> <operator pos:start="37:60" pos:end="37:61">&lt;&lt;</operator> <name pos:start="37:63" pos:end="37:69">l1_bits</name><operator pos:start="37:70" pos:end="37:70">)</operator> <operator pos:start="37:72" pos:end="37:72">-</operator> <literal type="number" pos:start="37:74" pos:end="37:74">1</literal><operator pos:start="37:75" pos:end="37:75">)</operator><operator pos:start="37:76" pos:end="37:76">)</operator>

                    <operator pos:start="39:21" pos:end="39:21">+</operator> <name pos:start="39:23" pos:end="39:39">offset_in_cluster</name></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:39">(<expr pos:start="43:9" pos:end="43:38"><name pos:start="43:9" pos:end="43:20">bytes_needed</name> <operator pos:start="43:22" pos:end="43:22">&gt;</operator> <name pos:start="43:24" pos:end="43:38">bytes_available</name></expr>)</condition> <block pos:start="43:41" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:39">

        <expr_stmt pos:start="45:9" pos:end="45:39"><expr pos:start="45:9" pos:end="45:38"><name pos:start="45:9" pos:end="45:20">bytes_needed</name> <operator pos:start="45:22" pos:end="45:22">=</operator> <name pos:start="45:24" pos:end="45:38">bytes_available</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:24"><expr pos:start="51:5" pos:end="51:23"><operator pos:start="51:5" pos:end="51:5">*</operator><name pos:start="51:6" pos:end="51:19">cluster_offset</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <literal type="number" pos:start="51:23" pos:end="51:23">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:47">/* seek to the l2 offset in the l1 table */</comment>



    <expr_stmt pos:start="59:5" pos:end="59:33"><expr pos:start="59:5" pos:end="59:32"><name pos:start="59:5" pos:end="59:12">l1_index</name> <operator pos:start="59:14" pos:end="59:14">=</operator> <name pos:start="59:16" pos:end="59:21">offset</name> <operator pos:start="59:23" pos:end="59:24">&gt;&gt;</operator> <name pos:start="59:26" pos:end="59:32">l1_bits</name></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:31">(<expr pos:start="61:9" pos:end="61:30"><name pos:start="61:9" pos:end="61:16">l1_index</name> <operator pos:start="61:18" pos:end="61:19">&gt;=</operator> <name pos:start="61:21" pos:end="61:30"><name pos:start="61:21" pos:end="61:21">s</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:30">l1_size</name></name></expr>)</condition> <block pos:start="61:33" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:17">

        <expr_stmt pos:start="63:9" pos:end="63:40"><expr pos:start="63:9" pos:end="63:39"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <name pos:start="63:15" pos:end="63:39">QCOW2_CLUSTER_UNALLOCATED</name></expr>;</expr_stmt>

        <goto pos:start="65:9" pos:end="65:17">goto <name pos:start="65:14" pos:end="65:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:56"><expr pos:start="71:5" pos:end="71:55"><name pos:start="71:5" pos:end="71:13">l2_offset</name> <operator pos:start="71:15" pos:end="71:15">=</operator> <name pos:start="71:17" pos:end="71:37"><name pos:start="71:17" pos:end="71:17">s</name><operator pos:start="71:18" pos:end="71:19">-&gt;</operator><name pos:start="71:20" pos:end="71:27">l1_table</name><index pos:start="71:28" pos:end="71:37">[<expr pos:start="71:29" pos:end="71:36"><name pos:start="71:29" pos:end="71:36">l1_index</name></expr>]</index></name> <operator pos:start="71:39" pos:end="71:39">&amp;</operator> <name pos:start="71:41" pos:end="71:55">L1E_OFFSET_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="79:5"><if pos:start="73:5" pos:end="79:5">if <condition pos:start="73:8" pos:end="73:19">(<expr pos:start="73:9" pos:end="73:18"><operator pos:start="73:9" pos:end="73:9">!</operator><name pos:start="73:10" pos:end="73:18">l2_offset</name></expr>)</condition> <block pos:start="73:21" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:17">

        <expr_stmt pos:start="75:9" pos:end="75:40"><expr pos:start="75:9" pos:end="75:39"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <name pos:start="75:15" pos:end="75:39">QCOW2_CLUSTER_UNALLOCATED</name></expr>;</expr_stmt>

        <goto pos:start="77:9" pos:end="77:17">goto <name pos:start="77:14" pos:end="77:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="83:5" pos:end="93:5"><if pos:start="83:5" pos:end="93:5">if <condition pos:start="83:8" pos:end="83:42">(<expr pos:start="83:9" pos:end="83:41"><call pos:start="83:9" pos:end="83:41"><name pos:start="83:9" pos:end="83:27">offset_into_cluster</name><argument_list pos:start="83:28" pos:end="83:41">(<argument pos:start="83:29" pos:end="83:29"><expr pos:start="83:29" pos:end="83:29"><name pos:start="83:29" pos:end="83:29">s</name></expr></argument>, <argument pos:start="83:32" pos:end="83:40"><expr pos:start="83:32" pos:end="83:40"><name pos:start="83:32" pos:end="83:40">l2_offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:44" pos:end="93:5">{<block_content pos:start="85:9" pos:end="91:20">

        <expr_stmt pos:start="85:9" pos:end="89:53"><expr pos:start="85:9" pos:end="89:52"><call pos:start="85:9" pos:end="89:52"><name pos:start="85:9" pos:end="85:31">qcow2_signal_corruption</name><argument_list pos:start="85:32" pos:end="89:52">(<argument pos:start="85:33" pos:end="85:34"><expr pos:start="85:33" pos:end="85:34"><name pos:start="85:33" pos:end="85:34">bs</name></expr></argument>, <argument pos:start="85:37" pos:end="85:40"><expr pos:start="85:37" pos:end="85:40"><name pos:start="85:37" pos:end="85:40">true</name></expr></argument>, <argument pos:start="85:43" pos:end="85:44"><expr pos:start="85:43" pos:end="85:44"><operator pos:start="85:43" pos:end="85:43">-</operator><literal type="number" pos:start="85:44" pos:end="85:44">1</literal></expr></argument>, <argument pos:start="85:47" pos:end="85:48"><expr pos:start="85:47" pos:end="85:48"><operator pos:start="85:47" pos:end="85:47">-</operator><literal type="number" pos:start="85:48" pos:end="85:48">1</literal></expr></argument>, <argument pos:start="85:51" pos:end="87:69"><expr pos:start="85:51" pos:end="87:69"><literal type="string" pos:start="85:51" pos:end="85:70">"L2 table offset %#"</literal> <name pos:start="85:72" pos:end="85:77">PRIx64</name>

                                <literal type="string" pos:start="87:33" pos:end="87:58">" unaligned (L1 index: %#"</literal> <name pos:start="87:60" pos:end="87:65">PRIx64</name> <literal type="string" pos:start="87:67" pos:end="87:69">")"</literal></expr></argument>,

                                <argument pos:start="89:33" pos:end="89:41"><expr pos:start="89:33" pos:end="89:41"><name pos:start="89:33" pos:end="89:41">l2_offset</name></expr></argument>, <argument pos:start="89:44" pos:end="89:51"><expr pos:start="89:44" pos:end="89:51"><name pos:start="89:44" pos:end="89:51">l1_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="91:9" pos:end="91:20">return <expr pos:start="91:16" pos:end="91:19"><operator pos:start="91:16" pos:end="91:16">-</operator><name pos:start="91:17" pos:end="91:19">EIO</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:37">/* load the l2 table in memory */</comment>



    <expr_stmt pos:start="101:5" pos:end="101:44"><expr pos:start="101:5" pos:end="101:43"><name pos:start="101:5" pos:end="101:7">ret</name> <operator pos:start="101:9" pos:end="101:9">=</operator> <call pos:start="101:11" pos:end="101:43"><name pos:start="101:11" pos:end="101:17">l2_load</name><argument_list pos:start="101:18" pos:end="101:43">(<argument pos:start="101:19" pos:end="101:20"><expr pos:start="101:19" pos:end="101:20"><name pos:start="101:19" pos:end="101:20">bs</name></expr></argument>, <argument pos:start="101:23" pos:end="101:31"><expr pos:start="101:23" pos:end="101:31"><name pos:start="101:23" pos:end="101:31">l2_offset</name></expr></argument>, <argument pos:start="101:34" pos:end="101:42"><expr pos:start="101:34" pos:end="101:42"><operator pos:start="101:34" pos:end="101:34">&amp;</operator><name pos:start="101:35" pos:end="101:42">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="107:5"><if pos:start="103:5" pos:end="107:5">if <condition pos:start="103:8" pos:end="103:16">(<expr pos:start="103:9" pos:end="103:15"><name pos:start="103:9" pos:end="103:11">ret</name> <operator pos:start="103:13" pos:end="103:13">&lt;</operator> <literal type="number" pos:start="103:15" pos:end="103:15">0</literal></expr>)</condition> <block pos:start="103:18" pos:end="107:5">{<block_content pos:start="105:9" pos:end="105:19">

        <return pos:start="105:9" pos:end="105:19">return <expr pos:start="105:16" pos:end="105:18"><name pos:start="105:16" pos:end="105:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="111:5" pos:end="111:59">/* find the cluster offset for the given disk offset */</comment>



    <expr_stmt pos:start="115:5" pos:end="115:62"><expr pos:start="115:5" pos:end="115:61"><name pos:start="115:5" pos:end="115:12">l2_index</name> <operator pos:start="115:14" pos:end="115:14">=</operator> <operator pos:start="115:16" pos:end="115:16">(</operator><name pos:start="115:17" pos:end="115:22">offset</name> <operator pos:start="115:24" pos:end="115:25">&gt;&gt;</operator> <name pos:start="115:27" pos:end="115:41"><name pos:start="115:27" pos:end="115:27">s</name><operator pos:start="115:28" pos:end="115:29">-&gt;</operator><name pos:start="115:30" pos:end="115:41">cluster_bits</name></name><operator pos:start="115:42" pos:end="115:42">)</operator> <operator pos:start="115:44" pos:end="115:44">&amp;</operator> <operator pos:start="115:46" pos:end="115:46">(</operator><name pos:start="115:47" pos:end="115:56"><name pos:start="115:47" pos:end="115:47">s</name><operator pos:start="115:48" pos:end="115:49">-&gt;</operator><name pos:start="115:50" pos:end="115:56">l2_size</name></name> <operator pos:start="115:58" pos:end="115:58">-</operator> <literal type="number" pos:start="115:60" pos:end="115:60">1</literal><operator pos:start="115:61" pos:end="115:61">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:54"><expr pos:start="117:5" pos:end="117:53"><operator pos:start="117:5" pos:end="117:5">*</operator><name pos:start="117:6" pos:end="117:19">cluster_offset</name> <operator pos:start="117:21" pos:end="117:21">=</operator> <call pos:start="117:23" pos:end="117:53"><name pos:start="117:23" pos:end="117:33">be64_to_cpu</name><argument_list pos:start="117:34" pos:end="117:53">(<argument pos:start="117:35" pos:end="117:52"><expr pos:start="117:35" pos:end="117:52"><name pos:start="117:35" pos:end="117:52"><name pos:start="117:35" pos:end="117:42">l2_table</name><index pos:start="117:43" pos:end="117:52">[<expr pos:start="117:44" pos:end="117:51"><name pos:start="117:44" pos:end="117:51">l2_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:52"><expr pos:start="121:5" pos:end="121:51"><name pos:start="121:5" pos:end="121:15">nb_clusters</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <call pos:start="121:19" pos:end="121:51"><name pos:start="121:19" pos:end="121:34">size_to_clusters</name><argument_list pos:start="121:35" pos:end="121:51">(<argument pos:start="121:36" pos:end="121:36"><expr pos:start="121:36" pos:end="121:36"><name pos:start="121:36" pos:end="121:36">s</name></expr></argument>, <argument pos:start="121:39" pos:end="121:50"><expr pos:start="121:39" pos:end="121:50"><name pos:start="121:39" pos:end="121:50">bytes_needed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="123:5" pos:end="127:14">/* bytes_needed &lt;= *bytes + offset_in_cluster, both of which are unsigned

     * integers; the minimum cluster size is 512, so this assertion is always

     * true */</comment>

    <expr_stmt pos:start="129:5" pos:end="129:35"><expr pos:start="129:5" pos:end="129:34"><call pos:start="129:5" pos:end="129:34"><name pos:start="129:5" pos:end="129:10">assert</name><argument_list pos:start="129:11" pos:end="129:34">(<argument pos:start="129:12" pos:end="129:33"><expr pos:start="129:12" pos:end="129:33"><name pos:start="129:12" pos:end="129:22">nb_clusters</name> <operator pos:start="129:24" pos:end="129:25">&lt;=</operator> <name pos:start="129:27" pos:end="129:33">INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:50"><expr pos:start="133:5" pos:end="133:49"><name pos:start="133:5" pos:end="133:7">ret</name> <operator pos:start="133:9" pos:end="133:9">=</operator> <call pos:start="133:11" pos:end="133:49"><name pos:start="133:11" pos:end="133:32">qcow2_get_cluster_type</name><argument_list pos:start="133:33" pos:end="133:49">(<argument pos:start="133:34" pos:end="133:48"><expr pos:start="133:34" pos:end="133:48"><operator pos:start="133:34" pos:end="133:34">*</operator><name pos:start="133:35" pos:end="133:48">cluster_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="135:5" pos:end="215:5">switch <condition pos:start="135:12" pos:end="135:16">(<expr pos:start="135:13" pos:end="135:15"><name pos:start="135:13" pos:end="135:15">ret</name></expr>)</condition> <block pos:start="135:18" pos:end="215:5">{<block_content pos:start="137:5" pos:end="213:16">

    <case pos:start="137:5" pos:end="137:34">case <expr pos:start="137:10" pos:end="137:33"><name pos:start="137:10" pos:end="137:33">QCOW2_CLUSTER_COMPRESSED</name></expr>:</case>

        <comment type="block" pos:start="139:9" pos:end="139:66">/* Compressed clusters can only be processed one by one */</comment>

        <expr_stmt pos:start="141:9" pos:end="141:14"><expr pos:start="141:9" pos:end="141:13"><name pos:start="141:9" pos:end="141:9">c</name> <operator pos:start="141:11" pos:end="141:11">=</operator> <literal type="number" pos:start="141:13" pos:end="141:13">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:59"><expr pos:start="143:9" pos:end="143:58"><operator pos:start="143:9" pos:end="143:9">*</operator><name pos:start="143:10" pos:end="143:23">cluster_offset</name> <operator pos:start="143:25" pos:end="143:26">&amp;=</operator> <name pos:start="143:28" pos:end="143:58">L2E_COMPRESSED_OFFSET_SIZE_MASK</name></expr>;</expr_stmt>

        <break pos:start="145:9" pos:end="145:14">break;</break>

    <case pos:start="147:5" pos:end="147:28">case <expr pos:start="147:10" pos:end="147:27"><name pos:start="147:10" pos:end="147:27">QCOW2_CLUSTER_ZERO</name></expr>:</case>

        <if_stmt pos:start="149:9" pos:end="161:9"><if pos:start="149:9" pos:end="161:9">if <condition pos:start="149:12" pos:end="149:32">(<expr pos:start="149:13" pos:end="149:31"><name pos:start="149:13" pos:end="149:27"><name pos:start="149:13" pos:end="149:13">s</name><operator pos:start="149:14" pos:end="149:15">-&gt;</operator><name pos:start="149:16" pos:end="149:27">qcow_version</name></name> <operator pos:start="149:29" pos:end="149:29">&lt;</operator> <literal type="number" pos:start="149:31" pos:end="149:31">3</literal></expr>)</condition> <block pos:start="149:34" pos:end="161:9">{<block_content pos:start="151:13" pos:end="159:22">

            <expr_stmt pos:start="151:13" pos:end="155:77"><expr pos:start="151:13" pos:end="155:76"><call pos:start="151:13" pos:end="155:76"><name pos:start="151:13" pos:end="151:35">qcow2_signal_corruption</name><argument_list pos:start="151:36" pos:end="155:76">(<argument pos:start="151:37" pos:end="151:38"><expr pos:start="151:37" pos:end="151:38"><name pos:start="151:37" pos:end="151:38">bs</name></expr></argument>, <argument pos:start="151:41" pos:end="151:44"><expr pos:start="151:41" pos:end="151:44"><name pos:start="151:41" pos:end="151:44">true</name></expr></argument>, <argument pos:start="151:47" pos:end="151:48"><expr pos:start="151:47" pos:end="151:48"><operator pos:start="151:47" pos:end="151:47">-</operator><literal type="number" pos:start="151:48" pos:end="151:48">1</literal></expr></argument>, <argument pos:start="151:51" pos:end="151:52"><expr pos:start="151:51" pos:end="151:52"><operator pos:start="151:51" pos:end="151:51">-</operator><literal type="number" pos:start="151:52" pos:end="151:52">1</literal></expr></argument>, <argument pos:start="151:55" pos:end="155:54"><expr pos:start="151:55" pos:end="155:54"><literal type="string" pos:start="151:55" pos:end="151:80">"Zero cluster entry found"</literal>

                                    <literal type="string" pos:start="153:37" pos:end="153:69">" in pre-v3 image (L2 offset: %#"</literal> <name pos:start="153:71" pos:end="153:76">PRIx64</name>

                                    <literal type="string" pos:start="155:37" pos:end="155:54">", L2 index: %#x)"</literal></expr></argument>, <argument pos:start="155:57" pos:end="155:65"><expr pos:start="155:57" pos:end="155:65"><name pos:start="155:57" pos:end="155:65">l2_offset</name></expr></argument>, <argument pos:start="155:68" pos:end="155:75"><expr pos:start="155:68" pos:end="155:75"><name pos:start="155:68" pos:end="155:75">l2_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:23"><expr pos:start="157:13" pos:end="157:22"><name pos:start="157:13" pos:end="157:15">ret</name> <operator pos:start="157:17" pos:end="157:17">=</operator> <operator pos:start="157:19" pos:end="157:19">-</operator><name pos:start="157:20" pos:end="157:22">EIO</name></expr>;</expr_stmt>

            <goto pos:start="159:13" pos:end="159:22">goto <name pos:start="159:18" pos:end="159:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="163:9" pos:end="165:66"><expr pos:start="163:9" pos:end="165:65"><name pos:start="163:9" pos:end="163:9">c</name> <operator pos:start="163:11" pos:end="163:11">=</operator> <call pos:start="163:13" pos:end="165:65"><name pos:start="163:13" pos:end="163:45">count_contiguous_clusters_by_type</name><argument_list pos:start="163:46" pos:end="165:65">(<argument pos:start="163:47" pos:end="163:57"><expr pos:start="163:47" pos:end="163:57"><name pos:start="163:47" pos:end="163:57">nb_clusters</name></expr></argument>, <argument pos:start="163:60" pos:end="163:78"><expr pos:start="163:60" pos:end="163:78"><operator pos:start="163:60" pos:end="163:60">&amp;</operator><name pos:start="163:61" pos:end="163:78"><name pos:start="163:61" pos:end="163:68">l2_table</name><index pos:start="163:69" pos:end="163:78">[<expr pos:start="163:70" pos:end="163:77"><name pos:start="163:70" pos:end="163:77">l2_index</name></expr>]</index></name></expr></argument>,

                                              <argument pos:start="165:47" pos:end="165:64"><expr pos:start="165:47" pos:end="165:64"><name pos:start="165:47" pos:end="165:64">QCOW2_CLUSTER_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:28"><expr pos:start="167:9" pos:end="167:27"><operator pos:start="167:9" pos:end="167:9">*</operator><name pos:start="167:10" pos:end="167:23">cluster_offset</name> <operator pos:start="167:25" pos:end="167:25">=</operator> <literal type="number" pos:start="167:27" pos:end="167:27">0</literal></expr>;</expr_stmt>

        <break pos:start="169:9" pos:end="169:14">break;</break>

    <case pos:start="171:5" pos:end="171:35">case <expr pos:start="171:10" pos:end="171:34"><name pos:start="171:10" pos:end="171:34">QCOW2_CLUSTER_UNALLOCATED</name></expr>:</case>

        <comment type="block" pos:start="173:9" pos:end="173:39">/* how many empty clusters ? */</comment>

        <expr_stmt pos:start="175:9" pos:end="177:73"><expr pos:start="175:9" pos:end="177:72"><name pos:start="175:9" pos:end="175:9">c</name> <operator pos:start="175:11" pos:end="175:11">=</operator> <call pos:start="175:13" pos:end="177:72"><name pos:start="175:13" pos:end="175:45">count_contiguous_clusters_by_type</name><argument_list pos:start="175:46" pos:end="177:72">(<argument pos:start="175:47" pos:end="175:57"><expr pos:start="175:47" pos:end="175:57"><name pos:start="175:47" pos:end="175:57">nb_clusters</name></expr></argument>, <argument pos:start="175:60" pos:end="175:78"><expr pos:start="175:60" pos:end="175:78"><operator pos:start="175:60" pos:end="175:60">&amp;</operator><name pos:start="175:61" pos:end="175:78"><name pos:start="175:61" pos:end="175:68">l2_table</name><index pos:start="175:69" pos:end="175:78">[<expr pos:start="175:70" pos:end="175:77"><name pos:start="175:70" pos:end="175:77">l2_index</name></expr>]</index></name></expr></argument>,

                                              <argument pos:start="177:47" pos:end="177:71"><expr pos:start="177:47" pos:end="177:71"><name pos:start="177:47" pos:end="177:71">QCOW2_CLUSTER_UNALLOCATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:28"><expr pos:start="179:9" pos:end="179:27"><operator pos:start="179:9" pos:end="179:9">*</operator><name pos:start="179:10" pos:end="179:23">cluster_offset</name> <operator pos:start="179:25" pos:end="179:25">=</operator> <literal type="number" pos:start="179:27" pos:end="179:27">0</literal></expr>;</expr_stmt>

        <break pos:start="181:9" pos:end="181:14">break;</break>

    <case pos:start="183:5" pos:end="183:30">case <expr pos:start="183:10" pos:end="183:29"><name pos:start="183:10" pos:end="183:29">QCOW2_CLUSTER_NORMAL</name></expr>:</case>

        <comment type="block" pos:start="185:9" pos:end="185:43">/* how many allocated clusters ? */</comment>

        <expr_stmt pos:start="187:9" pos:end="189:54"><expr pos:start="187:9" pos:end="189:53"><name pos:start="187:9" pos:end="187:9">c</name> <operator pos:start="187:11" pos:end="187:11">=</operator> <call pos:start="187:13" pos:end="189:53"><name pos:start="187:13" pos:end="187:37">count_contiguous_clusters</name><argument_list pos:start="187:38" pos:end="189:53">(<argument pos:start="187:39" pos:end="187:49"><expr pos:start="187:39" pos:end="187:49"><name pos:start="187:39" pos:end="187:49">nb_clusters</name></expr></argument>, <argument pos:start="187:52" pos:end="187:66"><expr pos:start="187:52" pos:end="187:66"><name pos:start="187:52" pos:end="187:66"><name pos:start="187:52" pos:end="187:52">s</name><operator pos:start="187:53" pos:end="187:54">-&gt;</operator><name pos:start="187:55" pos:end="187:66">cluster_size</name></name></expr></argument>,

                <argument pos:start="189:17" pos:end="189:35"><expr pos:start="189:17" pos:end="189:35"><operator pos:start="189:17" pos:end="189:17">&amp;</operator><name pos:start="189:18" pos:end="189:35"><name pos:start="189:18" pos:end="189:25">l2_table</name><index pos:start="189:26" pos:end="189:35">[<expr pos:start="189:27" pos:end="189:34"><name pos:start="189:27" pos:end="189:34">l2_index</name></expr>]</index></name></expr></argument>, <argument pos:start="189:38" pos:end="189:52"><expr pos:start="189:38" pos:end="189:52"><name pos:start="189:38" pos:end="189:52">QCOW_OFLAG_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:43"><expr pos:start="191:9" pos:end="191:42"><operator pos:start="191:9" pos:end="191:9">*</operator><name pos:start="191:10" pos:end="191:23">cluster_offset</name> <operator pos:start="191:25" pos:end="191:26">&amp;=</operator> <name pos:start="191:28" pos:end="191:42">L2E_OFFSET_MASK</name></expr>;</expr_stmt>

        <if_stmt pos:start="193:9" pos:end="207:9"><if pos:start="193:9" pos:end="207:9">if <condition pos:start="193:12" pos:end="193:52">(<expr pos:start="193:13" pos:end="193:51"><call pos:start="193:13" pos:end="193:51"><name pos:start="193:13" pos:end="193:31">offset_into_cluster</name><argument_list pos:start="193:32" pos:end="193:51">(<argument pos:start="193:33" pos:end="193:33"><expr pos:start="193:33" pos:end="193:33"><name pos:start="193:33" pos:end="193:33">s</name></expr></argument>, <argument pos:start="193:36" pos:end="193:50"><expr pos:start="193:36" pos:end="193:50"><operator pos:start="193:36" pos:end="193:36">*</operator><name pos:start="193:37" pos:end="193:50">cluster_offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="193:54" pos:end="207:9">{<block_content pos:start="195:13" pos:end="205:22">

            <expr_stmt pos:start="195:13" pos:end="201:57"><expr pos:start="195:13" pos:end="201:56"><call pos:start="195:13" pos:end="201:56"><name pos:start="195:13" pos:end="195:35">qcow2_signal_corruption</name><argument_list pos:start="195:36" pos:end="201:56">(<argument pos:start="195:37" pos:end="195:38"><expr pos:start="195:37" pos:end="195:38"><name pos:start="195:37" pos:end="195:38">bs</name></expr></argument>, <argument pos:start="195:41" pos:end="195:44"><expr pos:start="195:41" pos:end="195:44"><name pos:start="195:41" pos:end="195:44">true</name></expr></argument>, <argument pos:start="195:47" pos:end="195:48"><expr pos:start="195:47" pos:end="195:48"><operator pos:start="195:47" pos:end="195:47">-</operator><literal type="number" pos:start="195:48" pos:end="195:48">1</literal></expr></argument>, <argument pos:start="195:51" pos:end="195:52"><expr pos:start="195:51" pos:end="195:52"><operator pos:start="195:51" pos:end="195:51">-</operator><literal type="number" pos:start="195:52" pos:end="195:52">1</literal></expr></argument>, <argument pos:start="195:55" pos:end="199:54"><expr pos:start="195:55" pos:end="199:54"><literal type="string" pos:start="195:55" pos:end="195:78">"Data cluster offset %#"</literal>

                                    <name pos:start="197:37" pos:end="197:42">PRIx64</name> <literal type="string" pos:start="197:44" pos:end="197:70">" unaligned (L2 offset: %#"</literal> <name pos:start="197:72" pos:end="197:77">PRIx64</name>

                                    <literal type="string" pos:start="199:37" pos:end="199:54">", L2 index: %#x)"</literal></expr></argument>, <argument pos:start="199:57" pos:end="199:71"><expr pos:start="199:57" pos:end="199:71"><operator pos:start="199:57" pos:end="199:57">*</operator><name pos:start="199:58" pos:end="199:71">cluster_offset</name></expr></argument>,

                                    <argument pos:start="201:37" pos:end="201:45"><expr pos:start="201:37" pos:end="201:45"><name pos:start="201:37" pos:end="201:45">l2_offset</name></expr></argument>, <argument pos:start="201:48" pos:end="201:55"><expr pos:start="201:48" pos:end="201:55"><name pos:start="201:48" pos:end="201:55">l2_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:23"><expr pos:start="203:13" pos:end="203:22"><name pos:start="203:13" pos:end="203:15">ret</name> <operator pos:start="203:17" pos:end="203:17">=</operator> <operator pos:start="203:19" pos:end="203:19">-</operator><name pos:start="203:20" pos:end="203:22">EIO</name></expr>;</expr_stmt>

            <goto pos:start="205:13" pos:end="205:22">goto <name pos:start="205:18" pos:end="205:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="209:9" pos:end="209:14">break;</break>

    <default pos:start="211:5" pos:end="211:12">default:</default>

        <expr_stmt pos:start="213:9" pos:end="213:16"><expr pos:start="213:9" pos:end="213:15"><call pos:start="213:9" pos:end="213:15"><name pos:start="213:9" pos:end="213:13">abort</name><argument_list pos:start="213:14" pos:end="213:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <expr_stmt pos:start="219:5" pos:end="219:63"><expr pos:start="219:5" pos:end="219:62"><call pos:start="219:5" pos:end="219:62"><name pos:start="219:5" pos:end="219:19">qcow2_cache_put</name><argument_list pos:start="219:20" pos:end="219:62">(<argument pos:start="219:21" pos:end="219:22"><expr pos:start="219:21" pos:end="219:22"><name pos:start="219:21" pos:end="219:22">bs</name></expr></argument>, <argument pos:start="219:25" pos:end="219:41"><expr pos:start="219:25" pos:end="219:41"><name pos:start="219:25" pos:end="219:41"><name pos:start="219:25" pos:end="219:25">s</name><operator pos:start="219:26" pos:end="219:27">-&gt;</operator><name pos:start="219:28" pos:end="219:41">l2_table_cache</name></name></expr></argument>, <argument pos:start="219:44" pos:end="219:61"><expr pos:start="219:44" pos:end="219:61"><operator pos:start="219:44" pos:end="219:44">(</operator><name pos:start="219:45" pos:end="219:48">void</name><operator pos:start="219:49" pos:end="219:49">*</operator><operator pos:start="219:50" pos:end="219:50">*</operator><operator pos:start="219:51" pos:end="219:51">)</operator> <operator pos:start="219:53" pos:end="219:53">&amp;</operator><name pos:start="219:54" pos:end="219:61">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="223:5" pos:end="223:51"><expr pos:start="223:5" pos:end="223:50"><name pos:start="223:5" pos:end="223:19">bytes_available</name> <operator pos:start="223:21" pos:end="223:21">=</operator> <operator pos:start="223:23" pos:end="223:23">(</operator><name pos:start="223:24" pos:end="223:30">int64_t</name><operator pos:start="223:31" pos:end="223:31">)</operator><name pos:start="223:32" pos:end="223:32">c</name> <operator pos:start="223:34" pos:end="223:34">*</operator> <name pos:start="223:36" pos:end="223:50"><name pos:start="223:36" pos:end="223:36">s</name><operator pos:start="223:37" pos:end="223:38">-&gt;</operator><name pos:start="223:39" pos:end="223:50">cluster_size</name></name></expr>;</expr_stmt>



<label pos:start="227:1" pos:end="227:4"><name pos:start="227:1" pos:end="227:3">out</name>:</label>

    <if_stmt pos:start="229:5" pos:end="233:5"><if pos:start="229:5" pos:end="233:5">if <condition pos:start="229:8" pos:end="229:39">(<expr pos:start="229:9" pos:end="229:38"><name pos:start="229:9" pos:end="229:23">bytes_available</name> <operator pos:start="229:25" pos:end="229:25">&gt;</operator> <name pos:start="229:27" pos:end="229:38">bytes_needed</name></expr>)</condition> <block pos:start="229:41" pos:end="233:5">{<block_content pos:start="231:9" pos:end="231:39">

        <expr_stmt pos:start="231:9" pos:end="231:39"><expr pos:start="231:9" pos:end="231:38"><name pos:start="231:9" pos:end="231:23">bytes_available</name> <operator pos:start="231:25" pos:end="231:25">=</operator> <name pos:start="231:27" pos:end="231:38">bytes_needed</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="237:5" pos:end="241:32">/* bytes_available &lt;= bytes_needed &lt;= *bytes + offset_in_cluster;

     * subtracting offset_in_cluster will therefore definitely yield something

     * not exceeding UINT_MAX */</comment>

    <expr_stmt pos:start="243:5" pos:end="243:60"><expr pos:start="243:5" pos:end="243:59"><call pos:start="243:5" pos:end="243:59"><name pos:start="243:5" pos:end="243:10">assert</name><argument_list pos:start="243:11" pos:end="243:59">(<argument pos:start="243:12" pos:end="243:58"><expr pos:start="243:12" pos:end="243:58"><name pos:start="243:12" pos:end="243:26">bytes_available</name> <operator pos:start="243:28" pos:end="243:28">-</operator> <name pos:start="243:30" pos:end="243:46">offset_in_cluster</name> <operator pos:start="243:48" pos:end="243:49">&lt;=</operator> <name pos:start="243:51" pos:end="243:58">UINT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="245:5" pos:end="245:49"><expr pos:start="245:5" pos:end="245:48"><operator pos:start="245:5" pos:end="245:5">*</operator><name pos:start="245:6" pos:end="245:10">bytes</name> <operator pos:start="245:12" pos:end="245:12">=</operator> <name pos:start="245:14" pos:end="245:28">bytes_available</name> <operator pos:start="245:30" pos:end="245:30">-</operator> <name pos:start="245:32" pos:end="245:48">offset_in_cluster</name></expr>;</expr_stmt>



    <return pos:start="249:5" pos:end="249:15">return <expr pos:start="249:12" pos:end="249:14"><name pos:start="249:12" pos:end="249:14">ret</name></expr>;</return>



<label pos:start="253:1" pos:end="253:5"><name pos:start="253:1" pos:end="253:4">fail</name>:</label>

    <expr_stmt pos:start="255:5" pos:end="255:63"><expr pos:start="255:5" pos:end="255:62"><call pos:start="255:5" pos:end="255:62"><name pos:start="255:5" pos:end="255:19">qcow2_cache_put</name><argument_list pos:start="255:20" pos:end="255:62">(<argument pos:start="255:21" pos:end="255:22"><expr pos:start="255:21" pos:end="255:22"><name pos:start="255:21" pos:end="255:22">bs</name></expr></argument>, <argument pos:start="255:25" pos:end="255:41"><expr pos:start="255:25" pos:end="255:41"><name pos:start="255:25" pos:end="255:41"><name pos:start="255:25" pos:end="255:25">s</name><operator pos:start="255:26" pos:end="255:27">-&gt;</operator><name pos:start="255:28" pos:end="255:41">l2_table_cache</name></name></expr></argument>, <argument pos:start="255:44" pos:end="255:61"><expr pos:start="255:44" pos:end="255:61"><operator pos:start="255:44" pos:end="255:44">(</operator><name pos:start="255:45" pos:end="255:48">void</name> <operator pos:start="255:50" pos:end="255:50">*</operator><operator pos:start="255:51" pos:end="255:51">*</operator><operator pos:start="255:52" pos:end="255:52">)</operator><operator pos:start="255:53" pos:end="255:53">&amp;</operator><name pos:start="255:54" pos:end="255:61">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="257:5" pos:end="257:15">return <expr pos:start="257:12" pos:end="257:14"><name pos:start="257:12" pos:end="257:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
