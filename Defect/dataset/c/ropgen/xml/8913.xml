<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8913.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:7"><name pos:start="1:1" pos:end="1:7">int64_t</name></type> <name pos:start="1:9" pos:end="1:29">bdrv_get_block_status</name><parameter_list pos:start="1:30" pos:end="3:56">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><name pos:start="1:31" pos:end="1:46">BlockDriverState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">bs</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:70"><decl pos:start="1:53" pos:end="1:70"><type pos:start="1:53" pos:end="1:70"><name pos:start="1:53" pos:end="1:59">int64_t</name></type> <name pos:start="1:61" pos:end="1:70">sector_num</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:44"><decl pos:start="3:31" pos:end="3:44"><type pos:start="3:31" pos:end="3:44"><name pos:start="3:31" pos:end="3:33">int</name></type> <name pos:start="3:35" pos:end="3:44">nb_sectors</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:55"><decl pos:start="3:47" pos:end="3:55"><type pos:start="3:47" pos:end="3:55"><name pos:start="3:47" pos:end="3:49">int</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:55">pnum</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="47:1">{<block_content pos:start="7:5" pos:end="45:20">

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">Coroutine</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:17">co</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="21:6"><decl pos:start="9:5" pos:end="21:5"><type pos:start="9:5" pos:end="9:28"><name pos:start="9:5" pos:end="9:28">BdrvCoGetBlockStatusData</name></type> <name pos:start="9:30" pos:end="9:33">data</name> <init pos:start="9:35" pos:end="21:5">= <expr pos:start="9:37" pos:end="21:5"><block pos:start="9:37" pos:end="21:5">{

        <expr pos:start="11:9" pos:end="11:16"><operator pos:start="11:9" pos:end="11:9">.</operator><name pos:start="11:10" pos:end="11:11">bs</name> <operator pos:start="11:13" pos:end="11:13">=</operator> <name pos:start="11:15" pos:end="11:16">bs</name></expr>,

        <expr pos:start="13:9" pos:end="13:32"><operator pos:start="13:9" pos:end="13:9">.</operator><name pos:start="13:10" pos:end="13:19">sector_num</name> <operator pos:start="13:21" pos:end="13:21">=</operator> <name pos:start="13:23" pos:end="13:32">sector_num</name></expr>,

        <expr pos:start="15:9" pos:end="15:32"><operator pos:start="15:9" pos:end="15:9">.</operator><name pos:start="15:10" pos:end="15:19">nb_sectors</name> <operator pos:start="15:21" pos:end="15:21">=</operator> <name pos:start="15:23" pos:end="15:32">nb_sectors</name></expr>,

        <expr pos:start="17:9" pos:end="17:20"><operator pos:start="17:9" pos:end="17:9">.</operator><name pos:start="17:10" pos:end="17:13">pnum</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <name pos:start="17:17" pos:end="17:20">pnum</name></expr>,

        <expr pos:start="19:9" pos:end="19:21"><operator pos:start="19:9" pos:end="19:9">.</operator><name pos:start="19:10" pos:end="19:13">done</name> <operator pos:start="19:15" pos:end="19:15">=</operator> <name pos:start="19:17" pos:end="19:21">false</name></expr>,

    }</block></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="43:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:28">(<expr pos:start="25:9" pos:end="25:27"><call pos:start="25:9" pos:end="25:27"><name pos:start="25:9" pos:end="25:25">qemu_in_coroutine</name><argument_list pos:start="25:26" pos:end="25:27">()</argument_list></call></expr>)</condition> <block pos:start="25:30" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:46">

        <comment type="block" pos:start="27:9" pos:end="27:55">/* Fast-path if already in coroutine context */</comment>

        <expr_stmt pos:start="29:9" pos:end="29:46"><expr pos:start="29:9" pos:end="29:45"><call pos:start="29:9" pos:end="29:45"><name pos:start="29:9" pos:end="29:38">bdrv_get_block_status_co_entry</name><argument_list pos:start="29:39" pos:end="29:45">(<argument pos:start="29:40" pos:end="29:44"><expr pos:start="29:40" pos:end="29:44"><operator pos:start="29:40" pos:end="29:40">&amp;</operator><name pos:start="29:41" pos:end="29:44">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="31:7" pos:end="43:5">else <block pos:start="31:12" pos:end="43:5">{<block_content pos:start="33:9" pos:end="41:9">

        <expr_stmt pos:start="33:9" pos:end="33:67"><expr pos:start="33:9" pos:end="33:66"><name pos:start="33:9" pos:end="33:10">co</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <call pos:start="33:14" pos:end="33:66"><name pos:start="33:14" pos:end="33:34">qemu_coroutine_create</name><argument_list pos:start="33:35" pos:end="33:66">(<argument pos:start="33:36" pos:end="33:65"><expr pos:start="33:36" pos:end="33:65"><name pos:start="33:36" pos:end="33:65">bdrv_get_block_status_co_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:40"><expr pos:start="35:9" pos:end="35:39"><call pos:start="35:9" pos:end="35:39"><name pos:start="35:9" pos:end="35:28">qemu_coroutine_enter</name><argument_list pos:start="35:29" pos:end="35:39">(<argument pos:start="35:30" pos:end="35:31"><expr pos:start="35:30" pos:end="35:31"><name pos:start="35:30" pos:end="35:31">co</name></expr></argument>, <argument pos:start="35:34" pos:end="35:38"><expr pos:start="35:34" pos:end="35:38"><operator pos:start="35:34" pos:end="35:34">&amp;</operator><name pos:start="35:35" pos:end="35:38">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while pos:start="37:9" pos:end="41:9">while <condition pos:start="37:15" pos:end="37:26">(<expr pos:start="37:16" pos:end="37:25"><operator pos:start="37:16" pos:end="37:16">!</operator><name pos:start="37:17" pos:end="37:25"><name pos:start="37:17" pos:end="37:20">data</name><operator pos:start="37:21" pos:end="37:21">.</operator><name pos:start="37:22" pos:end="37:25">done</name></name></expr>)</condition> <block pos:start="37:28" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:28">

            <expr_stmt pos:start="39:13" pos:end="39:28"><expr pos:start="39:13" pos:end="39:27"><call pos:start="39:13" pos:end="39:27"><name pos:start="39:13" pos:end="39:25">qemu_aio_wait</name><argument_list pos:start="39:26" pos:end="39:27">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></else></if_stmt>

    <return pos:start="45:5" pos:end="45:20">return <expr pos:start="45:12" pos:end="45:19"><name pos:start="45:12" pos:end="45:19"><name pos:start="45:12" pos:end="45:15">data</name><operator pos:start="45:16" pos:end="45:16">.</operator><name pos:start="45:17" pos:end="45:19">ret</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
