<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11533.c" pos:tabs="8"><function pos:start="1:1" pos:end="345:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">qcow_create2</name><parameter_list pos:start="1:24" pos:end="5:69">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:44"><specifier pos:start="1:25" pos:end="1:29">const</specifier> <name pos:start="1:31" pos:end="1:34">char</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:44">filename</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:64"><decl pos:start="1:47" pos:end="1:64"><type pos:start="1:47" pos:end="1:64"><name pos:start="1:47" pos:end="1:53">int64_t</name></type> <name pos:start="1:55" pos:end="1:64">total_size</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:48"><decl pos:start="3:25" pos:end="3:48"><type pos:start="3:25" pos:end="3:48"><specifier pos:start="3:25" pos:end="3:29">const</specifier> <name pos:start="3:31" pos:end="3:34">char</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:48">backing_file</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:76"><decl pos:start="3:51" pos:end="3:76"><type pos:start="3:51" pos:end="3:76"><specifier pos:start="3:51" pos:end="3:55">const</specifier> <name pos:start="3:57" pos:end="3:60">char</name> <modifier pos:start="3:62" pos:end="3:62">*</modifier></type><name pos:start="3:63" pos:end="3:76">backing_format</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:33"><decl pos:start="5:25" pos:end="5:33"><type pos:start="5:25" pos:end="5:33"><name pos:start="5:25" pos:end="5:27">int</name></type> <name pos:start="5:29" pos:end="5:33">flags</name></decl></parameter>, <parameter pos:start="5:36" pos:end="5:54"><decl pos:start="5:36" pos:end="5:54"><type pos:start="5:36" pos:end="5:54"><name pos:start="5:36" pos:end="5:41">size_t</name></type> <name pos:start="5:43" pos:end="5:54">cluster_size</name></decl></parameter>, <parameter pos:start="5:57" pos:end="5:68"><decl pos:start="5:57" pos:end="5:68"><type pos:start="5:57" pos:end="5:68"><name pos:start="5:57" pos:end="5:59">int</name></type> <name pos:start="5:61" pos:end="5:68">prealloc</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="345:1">{<block_content pos:start="11:5" pos:end="343:15">



    <decl_stmt pos:start="11:5" pos:end="11:74"><decl pos:start="11:5" pos:end="11:10"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">fd</name></decl>, <decl pos:start="11:13" pos:end="11:23"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:13" pos:end="11:23">header_size</name></decl>, <decl pos:start="11:26" pos:end="11:45"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:26" pos:end="11:45">backing_filename_len</name></decl>, <decl pos:start="11:48" pos:end="11:54"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:48" pos:end="11:54">l1_size</name></decl>, <decl pos:start="11:57" pos:end="11:57"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:57" pos:end="11:57">i</name></decl>, <decl pos:start="11:60" pos:end="11:64"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:60" pos:end="11:64">shift</name></decl>, <decl pos:start="11:67" pos:end="11:73"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:67" pos:end="11:73">l2_bits</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:45"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:20">ref_clusters</name></decl>, <decl pos:start="13:23" pos:end="13:44"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:23" pos:end="13:40">backing_format_len</name> <init pos:start="13:42" pos:end="13:44">= <expr pos:start="13:44" pos:end="13:44"><literal type="number" pos:start="13:44" pos:end="13:44">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:31"><decl pos:start="15:5" pos:end="15:30"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:26">rounded_ext_bf_len</name> <init pos:start="15:28" pos:end="15:30">= <expr pos:start="15:30" pos:end="15:30"><literal type="number" pos:start="15:30" pos:end="15:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:14">QCowHeader</name></type> <name pos:start="17:16" pos:end="17:21">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:16">tmp</name></decl>, <decl pos:start="19:19" pos:end="19:24"><type ref="prev" pos:start="19:5" pos:end="19:12"/><name pos:start="19:19" pos:end="19:24">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:33"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:19"><name pos:start="21:5" pos:end="21:19">QCowCreateState</name></type> <name pos:start="21:21" pos:end="21:22">s1</name></decl>, <decl pos:start="21:25" pos:end="21:32"><type ref="prev" pos:start="21:5" pos:end="21:19"><modifier pos:start="21:25" pos:end="21:25">*</modifier></type><name pos:start="21:26" pos:end="21:26">s</name> <init pos:start="21:28" pos:end="21:32">= <expr pos:start="21:30" pos:end="21:32"><operator pos:start="21:30" pos:end="21:30">&amp;</operator><name pos:start="21:31" pos:end="21:32">s1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:34"><decl pos:start="23:5" pos:end="23:33"><type pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:17">QCowExtension</name></type> <name pos:start="23:19" pos:end="23:24">ext_bf</name> <init pos:start="23:26" pos:end="23:33">= <expr pos:start="23:28" pos:end="23:33"><block pos:start="23:28" pos:end="23:33">{<expr pos:start="23:29" pos:end="23:29"><literal type="number" pos:start="23:29" pos:end="23:29">0</literal></expr>, <expr pos:start="23:32" pos:end="23:32"><literal type="number" pos:start="23:32" pos:end="23:32">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:12"><decl pos:start="25:5" pos:end="25:11"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:29"><expr pos:start="29:5" pos:end="29:28"><call pos:start="29:5" pos:end="29:28"><name pos:start="29:5" pos:end="29:10">memset</name><argument_list pos:start="29:11" pos:end="29:28">(<argument pos:start="29:12" pos:end="29:12"><expr pos:start="29:12" pos:end="29:12"><name pos:start="29:12" pos:end="29:12">s</name></expr></argument>, <argument pos:start="29:15" pos:end="29:15"><expr pos:start="29:15" pos:end="29:15"><literal type="number" pos:start="29:15" pos:end="29:15">0</literal></expr></argument>, <argument pos:start="29:18" pos:end="29:27"><expr pos:start="29:18" pos:end="29:27"><sizeof pos:start="29:18" pos:end="29:27">sizeof<argument_list pos:start="29:24" pos:end="29:27">(<argument pos:start="29:25" pos:end="29:26"><expr pos:start="29:25" pos:end="29:26"><operator pos:start="29:25" pos:end="29:25">*</operator><name pos:start="29:26" pos:end="29:26">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:71"><expr pos:start="33:5" pos:end="33:70"><name pos:start="33:5" pos:end="33:6">fd</name> <operator pos:start="33:8" pos:end="33:8">=</operator> <call pos:start="33:10" pos:end="33:70"><name pos:start="33:10" pos:end="33:13">open</name><argument_list pos:start="33:14" pos:end="33:70">(<argument pos:start="33:15" pos:end="33:22"><expr pos:start="33:15" pos:end="33:22"><name pos:start="33:15" pos:end="33:22">filename</name></expr></argument>, <argument pos:start="33:25" pos:end="33:63"><expr pos:start="33:25" pos:end="33:63"><name pos:start="33:25" pos:end="33:32">O_WRONLY</name> <operator pos:start="33:34" pos:end="33:34">|</operator> <name pos:start="33:36" pos:end="33:42">O_CREAT</name> <operator pos:start="33:44" pos:end="33:44">|</operator> <name pos:start="33:46" pos:end="33:52">O_TRUNC</name> <operator pos:start="33:54" pos:end="33:54">|</operator> <name pos:start="33:56" pos:end="33:63">O_BINARY</name></expr></argument>, <argument pos:start="33:66" pos:end="33:69"><expr pos:start="33:66" pos:end="33:69"><literal type="number" pos:start="33:66" pos:end="33:69">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="37:18"><if pos:start="35:5" pos:end="37:18">if <condition pos:start="35:8" pos:end="35:15">(<expr pos:start="35:9" pos:end="35:14"><name pos:start="35:9" pos:end="35:10">fd</name> <operator pos:start="35:12" pos:end="35:12">&lt;</operator> <literal type="number" pos:start="35:14" pos:end="35:14">0</literal></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:18"><block_content pos:start="37:9" pos:end="37:18">

        <return pos:start="37:9" pos:end="37:18">return <expr pos:start="37:16" pos:end="37:17"><operator pos:start="37:16" pos:end="37:16">-</operator><literal type="number" pos:start="37:17" pos:end="37:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:39"><expr pos:start="39:5" pos:end="39:38"><call pos:start="39:5" pos:end="39:38"><name pos:start="39:5" pos:end="39:10">memset</name><argument_list pos:start="39:11" pos:end="39:38">(<argument pos:start="39:12" pos:end="39:18"><expr pos:start="39:12" pos:end="39:18"><operator pos:start="39:12" pos:end="39:12">&amp;</operator><name pos:start="39:13" pos:end="39:18">header</name></expr></argument>, <argument pos:start="39:21" pos:end="39:21"><expr pos:start="39:21" pos:end="39:21"><literal type="number" pos:start="39:21" pos:end="39:21">0</literal></expr></argument>, <argument pos:start="39:24" pos:end="39:37"><expr pos:start="39:24" pos:end="39:37"><sizeof pos:start="39:24" pos:end="39:37">sizeof<argument_list pos:start="39:30" pos:end="39:37">(<argument pos:start="39:31" pos:end="39:36"><expr pos:start="39:31" pos:end="39:36"><name pos:start="39:31" pos:end="39:36">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:43"><expr pos:start="41:5" pos:end="41:42"><name pos:start="41:5" pos:end="41:16"><name pos:start="41:5" pos:end="41:10">header</name><operator pos:start="41:11" pos:end="41:11">.</operator><name pos:start="41:12" pos:end="41:16">magic</name></name> <operator pos:start="41:18" pos:end="41:18">=</operator> <call pos:start="41:20" pos:end="41:42"><name pos:start="41:20" pos:end="41:30">cpu_to_be32</name><argument_list pos:start="41:31" pos:end="41:42">(<argument pos:start="41:32" pos:end="41:41"><expr pos:start="41:32" pos:end="41:41"><name pos:start="41:32" pos:end="41:41">QCOW_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:47"><expr pos:start="43:5" pos:end="43:46"><name pos:start="43:5" pos:end="43:18"><name pos:start="43:5" pos:end="43:10">header</name><operator pos:start="43:11" pos:end="43:11">.</operator><name pos:start="43:12" pos:end="43:18">version</name></name> <operator pos:start="43:20" pos:end="43:20">=</operator> <call pos:start="43:22" pos:end="43:46"><name pos:start="43:22" pos:end="43:32">cpu_to_be32</name><argument_list pos:start="43:33" pos:end="43:46">(<argument pos:start="43:34" pos:end="43:45"><expr pos:start="43:34" pos:end="43:45"><name pos:start="43:34" pos:end="43:45">QCOW_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:48"><expr pos:start="45:5" pos:end="45:47"><name pos:start="45:5" pos:end="45:15"><name pos:start="45:5" pos:end="45:10">header</name><operator pos:start="45:11" pos:end="45:11">.</operator><name pos:start="45:12" pos:end="45:15">size</name></name> <operator pos:start="45:17" pos:end="45:17">=</operator> <call pos:start="45:19" pos:end="45:47"><name pos:start="45:19" pos:end="45:29">cpu_to_be64</name><argument_list pos:start="45:30" pos:end="45:47">(<argument pos:start="45:31" pos:end="45:46"><expr pos:start="45:31" pos:end="45:46"><name pos:start="45:31" pos:end="45:40">total_size</name> <operator pos:start="45:42" pos:end="45:42">*</operator> <literal type="number" pos:start="45:44" pos:end="45:46">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:33"><expr pos:start="47:5" pos:end="47:32"><name pos:start="47:5" pos:end="47:15">header_size</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <sizeof pos:start="47:19" pos:end="47:32">sizeof<argument_list pos:start="47:25" pos:end="47:32">(<argument pos:start="47:26" pos:end="47:31"><expr pos:start="47:26" pos:end="47:31"><name pos:start="47:26" pos:end="47:31">header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:29"><expr pos:start="49:5" pos:end="49:28"><name pos:start="49:5" pos:end="49:24">backing_filename_len</name> <operator pos:start="49:26" pos:end="49:26">=</operator> <literal type="number" pos:start="49:28" pos:end="49:28">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="75:5"><if pos:start="51:5" pos:end="75:5">if <condition pos:start="51:8" pos:end="51:21">(<expr pos:start="51:9" pos:end="51:20"><name pos:start="51:9" pos:end="51:20">backing_file</name></expr>)</condition> <block pos:start="51:23" pos:end="75:5">{<block_content pos:start="53:9" pos:end="73:44">

        <if_stmt pos:start="53:9" pos:end="65:9"><if pos:start="53:9" pos:end="65:9">if <condition pos:start="53:12" pos:end="53:27">(<expr pos:start="53:13" pos:end="53:26"><name pos:start="53:13" pos:end="53:26">backing_format</name></expr>)</condition> <block pos:start="53:29" pos:end="65:9">{<block_content pos:start="55:13" pos:end="63:46">

            <expr_stmt pos:start="55:13" pos:end="55:57"><expr pos:start="55:13" pos:end="55:56"><name pos:start="55:13" pos:end="55:24"><name pos:start="55:13" pos:end="55:18">ext_bf</name><operator pos:start="55:19" pos:end="55:19">.</operator><name pos:start="55:20" pos:end="55:24">magic</name></name> <operator pos:start="55:26" pos:end="55:26">=</operator> <name pos:start="55:28" pos:end="55:56">QCOW_EXT_MAGIC_BACKING_FORMAT</name></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:56"><expr pos:start="57:13" pos:end="57:55"><name pos:start="57:13" pos:end="57:30">backing_format_len</name> <operator pos:start="57:32" pos:end="57:32">=</operator> <call pos:start="57:34" pos:end="57:55"><name pos:start="57:34" pos:end="57:39">strlen</name><argument_list pos:start="57:40" pos:end="57:55">(<argument pos:start="57:41" pos:end="57:54"><expr pos:start="57:41" pos:end="57:54"><name pos:start="57:41" pos:end="57:54">backing_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:44"><expr pos:start="59:13" pos:end="59:43"><name pos:start="59:13" pos:end="59:22"><name pos:start="59:13" pos:end="59:18">ext_bf</name><operator pos:start="59:19" pos:end="59:19">.</operator><name pos:start="59:20" pos:end="59:22">len</name></name> <operator pos:start="59:24" pos:end="59:24">=</operator> <name pos:start="59:26" pos:end="59:43">backing_format_len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:72"><expr pos:start="61:13" pos:end="61:71"><name pos:start="61:13" pos:end="61:30">rounded_ext_bf_len</name> <operator pos:start="61:32" pos:end="61:32">=</operator> <operator pos:start="61:34" pos:end="61:34">(</operator><sizeof pos:start="61:35" pos:end="61:48">sizeof<argument_list pos:start="61:41" pos:end="61:48">(<argument pos:start="61:42" pos:end="61:47"><expr pos:start="61:42" pos:end="61:47"><name pos:start="61:42" pos:end="61:47">ext_bf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="61:50" pos:end="61:50">+</operator> <name pos:start="61:52" pos:end="61:61"><name pos:start="61:52" pos:end="61:57">ext_bf</name><operator pos:start="61:58" pos:end="61:58">.</operator><name pos:start="61:59" pos:end="61:61">len</name></name> <operator pos:start="61:63" pos:end="61:63">+</operator> <literal type="number" pos:start="61:65" pos:end="61:65">7</literal><operator pos:start="61:66" pos:end="61:66">)</operator> <operator pos:start="61:68" pos:end="61:68">&amp;</operator> <operator pos:start="61:70" pos:end="61:70">~</operator><literal type="number" pos:start="61:71" pos:end="61:71">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:46"><expr pos:start="63:13" pos:end="63:45"><name pos:start="63:13" pos:end="63:23">header_size</name> <operator pos:start="63:25" pos:end="63:26">+=</operator> <name pos:start="63:28" pos:end="63:45">rounded_ext_bf_len</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:62"><expr pos:start="67:9" pos:end="67:61"><name pos:start="67:9" pos:end="67:34"><name pos:start="67:9" pos:end="67:14">header</name><operator pos:start="67:15" pos:end="67:15">.</operator><name pos:start="67:16" pos:end="67:34">backing_file_offset</name></name> <operator pos:start="67:36" pos:end="67:36">=</operator> <call pos:start="67:38" pos:end="67:61"><name pos:start="67:38" pos:end="67:48">cpu_to_be64</name><argument_list pos:start="67:49" pos:end="67:61">(<argument pos:start="67:50" pos:end="67:60"><expr pos:start="67:50" pos:end="67:60"><name pos:start="67:50" pos:end="67:60">header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:52"><expr pos:start="69:9" pos:end="69:51"><name pos:start="69:9" pos:end="69:28">backing_filename_len</name> <operator pos:start="69:30" pos:end="69:30">=</operator> <call pos:start="69:32" pos:end="69:51"><name pos:start="69:32" pos:end="69:37">strlen</name><argument_list pos:start="69:38" pos:end="69:51">(<argument pos:start="69:39" pos:end="69:50"><expr pos:start="69:39" pos:end="69:50"><name pos:start="69:39" pos:end="69:50">backing_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:69"><expr pos:start="71:9" pos:end="71:68"><name pos:start="71:9" pos:end="71:32"><name pos:start="71:9" pos:end="71:14">header</name><operator pos:start="71:15" pos:end="71:15">.</operator><name pos:start="71:16" pos:end="71:32">backing_file_size</name></name> <operator pos:start="71:34" pos:end="71:34">=</operator> <call pos:start="71:36" pos:end="71:68"><name pos:start="71:36" pos:end="71:46">cpu_to_be32</name><argument_list pos:start="71:47" pos:end="71:68">(<argument pos:start="71:48" pos:end="71:67"><expr pos:start="71:48" pos:end="71:67"><name pos:start="71:48" pos:end="71:67">backing_filename_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:44"><expr pos:start="73:9" pos:end="73:43"><name pos:start="73:9" pos:end="73:19">header_size</name> <operator pos:start="73:21" pos:end="73:22">+=</operator> <name pos:start="73:24" pos:end="73:43">backing_filename_len</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:22">/* Cluster size */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:55"><expr pos:start="81:5" pos:end="81:54"><name pos:start="81:5" pos:end="81:19"><name pos:start="81:5" pos:end="81:5">s</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:19">cluster_bits</name></name> <operator pos:start="81:21" pos:end="81:21">=</operator> <call pos:start="81:23" pos:end="81:54"><name pos:start="81:23" pos:end="81:40">get_bits_from_size</name><argument_list pos:start="81:41" pos:end="81:54">(<argument pos:start="81:42" pos:end="81:53"><expr pos:start="81:42" pos:end="81:53"><name pos:start="81:42" pos:end="81:53">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="99:5"><if pos:start="83:5" pos:end="99:5">if <condition pos:start="83:8" pos:end="85:43">(<expr pos:start="83:9" pos:end="85:42"><name pos:start="83:9" pos:end="83:23"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:23">cluster_bits</name></name> <operator pos:start="83:25" pos:end="83:25">&lt;</operator> <name pos:start="83:27" pos:end="83:42">MIN_CLUSTER_BITS</name> <operator pos:start="83:44" pos:end="83:45">||</operator>

        <name pos:start="85:9" pos:end="85:23"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:23">cluster_bits</name></name> <operator pos:start="85:25" pos:end="85:25">&gt;</operator> <name pos:start="85:27" pos:end="85:42">MAX_CLUSTER_BITS</name></expr>)</condition>

    <block pos:start="87:5" pos:end="99:5">{<block_content pos:start="89:9" pos:end="97:23">

        <expr_stmt pos:start="89:9" pos:end="95:42"><expr pos:start="89:9" pos:end="95:41"><call pos:start="89:9" pos:end="95:41"><name pos:start="89:9" pos:end="89:15">fprintf</name><argument_list pos:start="89:16" pos:end="95:41">(<argument pos:start="89:17" pos:end="89:22"><expr pos:start="89:17" pos:end="89:22"><name pos:start="89:17" pos:end="89:22">stderr</name></expr></argument>, <argument pos:start="89:25" pos:end="91:26"><expr pos:start="89:25" pos:end="91:26"><literal type="string" pos:start="89:25" pos:end="89:70">"Cluster size must be a power of two between "</literal>

            <literal type="string" pos:start="91:13" pos:end="91:26">"%d and %dk\n"</literal></expr></argument>,

            <argument pos:start="93:13" pos:end="93:33"><expr pos:start="93:13" pos:end="93:33"><literal type="number" pos:start="93:13" pos:end="93:13">1</literal> <operator pos:start="93:15" pos:end="93:16">&lt;&lt;</operator> <name pos:start="93:18" pos:end="93:33">MIN_CLUSTER_BITS</name></expr></argument>,

            <argument pos:start="95:13" pos:end="95:40"><expr pos:start="95:13" pos:end="95:40"><literal type="number" pos:start="95:13" pos:end="95:13">1</literal> <operator pos:start="95:15" pos:end="95:16">&lt;&lt;</operator> <operator pos:start="95:18" pos:end="95:18">(</operator><name pos:start="95:19" pos:end="95:34">MAX_CLUSTER_BITS</name> <operator pos:start="95:36" pos:end="95:36">-</operator> <literal type="number" pos:start="95:38" pos:end="95:39">10</literal><operator pos:start="95:40" pos:end="95:40">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="97:9" pos:end="97:23">return <expr pos:start="97:16" pos:end="97:22"><operator pos:start="97:16" pos:end="97:16">-</operator><name pos:start="97:17" pos:end="97:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:43"><expr pos:start="101:5" pos:end="101:42"><name pos:start="101:5" pos:end="101:19"><name pos:start="101:5" pos:end="101:5">s</name><operator pos:start="101:6" pos:end="101:7">-&gt;</operator><name pos:start="101:8" pos:end="101:19">cluster_size</name></name> <operator pos:start="101:21" pos:end="101:21">=</operator> <literal type="number" pos:start="101:23" pos:end="101:23">1</literal> <operator pos:start="101:25" pos:end="101:26">&lt;&lt;</operator> <name pos:start="101:28" pos:end="101:42"><name pos:start="101:28" pos:end="101:28">s</name><operator pos:start="101:29" pos:end="101:30">-&gt;</operator><name pos:start="101:31" pos:end="101:42">cluster_bits</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:55"><expr pos:start="105:5" pos:end="105:54"><name pos:start="105:5" pos:end="105:23"><name pos:start="105:5" pos:end="105:10">header</name><operator pos:start="105:11" pos:end="105:11">.</operator><name pos:start="105:12" pos:end="105:23">cluster_bits</name></name> <operator pos:start="105:25" pos:end="105:25">=</operator> <call pos:start="105:27" pos:end="105:54"><name pos:start="105:27" pos:end="105:37">cpu_to_be32</name><argument_list pos:start="105:38" pos:end="105:54">(<argument pos:start="105:39" pos:end="105:53"><expr pos:start="105:39" pos:end="105:53"><name pos:start="105:39" pos:end="105:53"><name pos:start="105:39" pos:end="105:39">s</name><operator pos:start="105:40" pos:end="105:41">-&gt;</operator><name pos:start="105:42" pos:end="105:53">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:41"><expr pos:start="107:5" pos:end="107:40"><name pos:start="107:5" pos:end="107:15">header_size</name> <operator pos:start="107:17" pos:end="107:17">=</operator> <operator pos:start="107:19" pos:end="107:19">(</operator><name pos:start="107:20" pos:end="107:30">header_size</name> <operator pos:start="107:32" pos:end="107:32">+</operator> <literal type="number" pos:start="107:34" pos:end="107:34">7</literal><operator pos:start="107:35" pos:end="107:35">)</operator> <operator pos:start="107:37" pos:end="107:37">&amp;</operator> <operator pos:start="107:39" pos:end="107:39">~</operator><literal type="number" pos:start="107:40" pos:end="107:40">7</literal></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="117:5"><if pos:start="109:5" pos:end="113:5">if <condition pos:start="109:8" pos:end="109:35">(<expr pos:start="109:9" pos:end="109:34"><name pos:start="109:9" pos:end="109:13">flags</name> <operator pos:start="109:15" pos:end="109:15">&amp;</operator> <name pos:start="109:17" pos:end="109:34">BLOCK_FLAG_ENCRYPT</name></expr>)</condition> <block pos:start="109:37" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:58">

        <expr_stmt pos:start="111:9" pos:end="111:58"><expr pos:start="111:9" pos:end="111:57"><name pos:start="111:9" pos:end="111:27"><name pos:start="111:9" pos:end="111:14">header</name><operator pos:start="111:15" pos:end="111:15">.</operator><name pos:start="111:16" pos:end="111:27">crypt_method</name></name> <operator pos:start="111:29" pos:end="111:29">=</operator> <call pos:start="111:31" pos:end="111:57"><name pos:start="111:31" pos:end="111:41">cpu_to_be32</name><argument_list pos:start="111:42" pos:end="111:57">(<argument pos:start="111:43" pos:end="111:56"><expr pos:start="111:43" pos:end="111:56"><name pos:start="111:43" pos:end="111:56">QCOW_CRYPT_AES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="113:7" pos:end="117:5">else <block pos:start="113:12" pos:end="117:5">{<block_content pos:start="115:9" pos:end="115:59">

        <expr_stmt pos:start="115:9" pos:end="115:59"><expr pos:start="115:9" pos:end="115:58"><name pos:start="115:9" pos:end="115:27"><name pos:start="115:9" pos:end="115:14">header</name><operator pos:start="115:15" pos:end="115:15">.</operator><name pos:start="115:16" pos:end="115:27">crypt_method</name></name> <operator pos:start="115:29" pos:end="115:29">=</operator> <call pos:start="115:31" pos:end="115:58"><name pos:start="115:31" pos:end="115:41">cpu_to_be32</name><argument_list pos:start="115:42" pos:end="115:58">(<argument pos:start="115:43" pos:end="115:57"><expr pos:start="115:43" pos:end="115:57"><name pos:start="115:43" pos:end="115:57">QCOW_CRYPT_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:34"><expr pos:start="119:5" pos:end="119:33"><name pos:start="119:5" pos:end="119:11">l2_bits</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <name pos:start="119:15" pos:end="119:29"><name pos:start="119:15" pos:end="119:15">s</name><operator pos:start="119:16" pos:end="119:17">-&gt;</operator><name pos:start="119:18" pos:end="119:29">cluster_bits</name></name> <operator pos:start="119:31" pos:end="119:31">-</operator> <literal type="number" pos:start="119:33" pos:end="119:33">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:38"><expr pos:start="121:5" pos:end="121:37"><name pos:start="121:5" pos:end="121:9">shift</name> <operator pos:start="121:11" pos:end="121:11">=</operator> <name pos:start="121:13" pos:end="121:27"><name pos:start="121:13" pos:end="121:13">s</name><operator pos:start="121:14" pos:end="121:15">-&gt;</operator><name pos:start="121:16" pos:end="121:27">cluster_bits</name></name> <operator pos:start="121:29" pos:end="121:29">+</operator> <name pos:start="121:31" pos:end="121:37">l2_bits</name></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:67"><expr pos:start="123:5" pos:end="123:66"><name pos:start="123:5" pos:end="123:11">l1_size</name> <operator pos:start="123:13" pos:end="123:13">=</operator> <operator pos:start="123:15" pos:end="123:15">(</operator><operator pos:start="123:16" pos:end="123:16">(</operator><operator pos:start="123:17" pos:end="123:17">(</operator><name pos:start="123:18" pos:end="123:27">total_size</name> <operator pos:start="123:29" pos:end="123:29">*</operator> <literal type="number" pos:start="123:31" pos:end="123:33">512</literal><operator pos:start="123:34" pos:end="123:34">)</operator> <operator pos:start="123:36" pos:end="123:36">+</operator> <operator pos:start="123:38" pos:end="123:38">(</operator><literal type="number" pos:start="123:39" pos:end="123:41">1LL</literal> <operator pos:start="123:43" pos:end="123:44">&lt;&lt;</operator> <name pos:start="123:46" pos:end="123:50">shift</name><operator pos:start="123:51" pos:end="123:51">)</operator> <operator pos:start="123:53" pos:end="123:53">-</operator> <literal type="number" pos:start="123:55" pos:end="123:55">1</literal><operator pos:start="123:56" pos:end="123:56">)</operator> <operator pos:start="123:58" pos:end="123:59">&gt;&gt;</operator> <name pos:start="123:61" pos:end="123:65">shift</name><operator pos:start="123:66" pos:end="123:66">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:56"><expr pos:start="125:5" pos:end="125:55"><name pos:start="125:5" pos:end="125:10">offset</name> <operator pos:start="125:12" pos:end="125:12">=</operator> <call pos:start="125:14" pos:end="125:55"><name pos:start="125:14" pos:end="125:25">align_offset</name><argument_list pos:start="125:26" pos:end="125:55">(<argument pos:start="125:27" pos:end="125:37"><expr pos:start="125:27" pos:end="125:37"><name pos:start="125:27" pos:end="125:37">header_size</name></expr></argument>, <argument pos:start="125:40" pos:end="125:54"><expr pos:start="125:40" pos:end="125:54"><name pos:start="125:40" pos:end="125:54"><name pos:start="125:40" pos:end="125:40">s</name><operator pos:start="125:41" pos:end="125:42">-&gt;</operator><name pos:start="125:43" pos:end="125:54">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:32"><expr pos:start="127:5" pos:end="127:31"><name pos:start="127:5" pos:end="127:22"><name pos:start="127:5" pos:end="127:5">s</name><operator pos:start="127:6" pos:end="127:7">-&gt;</operator><name pos:start="127:8" pos:end="127:22">l1_table_offset</name></name> <operator pos:start="127:24" pos:end="127:24">=</operator> <name pos:start="127:26" pos:end="127:31">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:61"><expr pos:start="129:5" pos:end="129:60"><name pos:start="129:5" pos:end="129:26"><name pos:start="129:5" pos:end="129:10">header</name><operator pos:start="129:11" pos:end="129:11">.</operator><name pos:start="129:12" pos:end="129:26">l1_table_offset</name></name> <operator pos:start="129:28" pos:end="129:28">=</operator> <call pos:start="129:30" pos:end="129:60"><name pos:start="129:30" pos:end="129:40">cpu_to_be64</name><argument_list pos:start="129:41" pos:end="129:60">(<argument pos:start="129:42" pos:end="129:59"><expr pos:start="129:42" pos:end="129:59"><name pos:start="129:42" pos:end="129:59"><name pos:start="129:42" pos:end="129:42">s</name><operator pos:start="129:43" pos:end="129:44">-&gt;</operator><name pos:start="129:45" pos:end="129:59">l1_table_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:42"><expr pos:start="131:5" pos:end="131:41"><name pos:start="131:5" pos:end="131:18"><name pos:start="131:5" pos:end="131:10">header</name><operator pos:start="131:11" pos:end="131:11">.</operator><name pos:start="131:12" pos:end="131:18">l1_size</name></name> <operator pos:start="131:20" pos:end="131:20">=</operator> <call pos:start="131:22" pos:end="131:41"><name pos:start="131:22" pos:end="131:32">cpu_to_be32</name><argument_list pos:start="131:33" pos:end="131:41">(<argument pos:start="131:34" pos:end="131:40"><expr pos:start="131:34" pos:end="131:40"><name pos:start="131:34" pos:end="131:40">l1_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:72"><expr pos:start="133:5" pos:end="133:71"><name pos:start="133:5" pos:end="133:10">offset</name> <operator pos:start="133:12" pos:end="133:13">+=</operator> <call pos:start="133:15" pos:end="133:71"><name pos:start="133:15" pos:end="133:26">align_offset</name><argument_list pos:start="133:27" pos:end="133:71">(<argument pos:start="133:28" pos:end="133:53"><expr pos:start="133:28" pos:end="133:53"><name pos:start="133:28" pos:end="133:34">l1_size</name> <operator pos:start="133:36" pos:end="133:36">*</operator> <sizeof pos:start="133:38" pos:end="133:53">sizeof<argument_list pos:start="133:44" pos:end="133:53">(<argument pos:start="133:45" pos:end="133:52"><expr pos:start="133:45" pos:end="133:52"><name pos:start="133:45" pos:end="133:52">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="133:56" pos:end="133:70"><expr pos:start="133:56" pos:end="133:70"><name pos:start="133:56" pos:end="133:70"><name pos:start="133:56" pos:end="133:56">s</name><operator pos:start="133:57" pos:end="133:58">-&gt;</operator><name pos:start="133:59" pos:end="133:70">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:54"><expr pos:start="137:5" pos:end="137:53"><name pos:start="137:5" pos:end="137:21"><name pos:start="137:5" pos:end="137:5">s</name><operator pos:start="137:6" pos:end="137:7">-&gt;</operator><name pos:start="137:8" pos:end="137:21">refcount_table</name></name> <operator pos:start="137:23" pos:end="137:23">=</operator> <call pos:start="137:25" pos:end="137:53"><name pos:start="137:25" pos:end="137:36">qemu_mallocz</name><argument_list pos:start="137:37" pos:end="137:53">(<argument pos:start="137:38" pos:end="137:52"><expr pos:start="137:38" pos:end="137:52"><name pos:start="137:38" pos:end="137:52"><name pos:start="137:38" pos:end="137:38">s</name><operator pos:start="137:39" pos:end="137:40">-&gt;</operator><name pos:start="137:41" pos:end="137:52">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:38"><expr pos:start="141:5" pos:end="141:37"><name pos:start="141:5" pos:end="141:28"><name pos:start="141:5" pos:end="141:5">s</name><operator pos:start="141:6" pos:end="141:7">-&gt;</operator><name pos:start="141:8" pos:end="141:28">refcount_table_offset</name></name> <operator pos:start="141:30" pos:end="141:30">=</operator> <name pos:start="141:32" pos:end="141:37">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:55"><expr pos:start="143:5" pos:end="143:54"><name pos:start="143:5" pos:end="143:32"><name pos:start="143:5" pos:end="143:10">header</name><operator pos:start="143:11" pos:end="143:11">.</operator><name pos:start="143:12" pos:end="143:32">refcount_table_offset</name></name> <operator pos:start="143:34" pos:end="143:34">=</operator> <call pos:start="143:36" pos:end="143:54"><name pos:start="143:36" pos:end="143:46">cpu_to_be64</name><argument_list pos:start="143:47" pos:end="143:54">(<argument pos:start="143:48" pos:end="143:53"><expr pos:start="143:48" pos:end="143:53"><name pos:start="143:48" pos:end="143:53">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:52"><expr pos:start="145:5" pos:end="145:51"><name pos:start="145:5" pos:end="145:34"><name pos:start="145:5" pos:end="145:10">header</name><operator pos:start="145:11" pos:end="145:11">.</operator><name pos:start="145:12" pos:end="145:34">refcount_table_clusters</name></name> <operator pos:start="145:36" pos:end="145:36">=</operator> <call pos:start="145:38" pos:end="145:51"><name pos:start="145:38" pos:end="145:48">cpu_to_be32</name><argument_list pos:start="145:49" pos:end="145:51">(<argument pos:start="145:50" pos:end="145:50"><expr pos:start="145:50" pos:end="145:50"><literal type="number" pos:start="145:50" pos:end="145:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:30"><expr pos:start="147:5" pos:end="147:29"><name pos:start="147:5" pos:end="147:10">offset</name> <operator pos:start="147:12" pos:end="147:13">+=</operator> <name pos:start="147:15" pos:end="147:29"><name pos:start="147:15" pos:end="147:15">s</name><operator pos:start="147:16" pos:end="147:17">-&gt;</operator><name pos:start="147:18" pos:end="147:29">cluster_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:38"><expr pos:start="149:5" pos:end="149:37"><name pos:start="149:5" pos:end="149:28"><name pos:start="149:5" pos:end="149:5">s</name><operator pos:start="149:6" pos:end="149:7">-&gt;</operator><name pos:start="149:8" pos:end="149:28">refcount_block_offset</name></name> <operator pos:start="149:30" pos:end="149:30">=</operator> <name pos:start="149:32" pos:end="149:37">offset</name></expr>;</expr_stmt>



    <comment type="block" pos:start="153:5" pos:end="153:47">/* count how many refcount blocks needed */</comment>

    <expr_stmt pos:start="155:5" pos:end="155:36"><expr pos:start="155:5" pos:end="155:35"><name pos:start="155:5" pos:end="155:7">tmp</name> <operator pos:start="155:9" pos:end="155:9">=</operator> <name pos:start="155:11" pos:end="155:16">offset</name> <operator pos:start="155:18" pos:end="155:19">&gt;&gt;</operator> <name pos:start="155:21" pos:end="155:35"><name pos:start="155:21" pos:end="155:21">s</name><operator pos:start="155:22" pos:end="155:23">-&gt;</operator><name pos:start="155:24" pos:end="155:35">cluster_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:67"><expr pos:start="157:5" pos:end="157:66"><name pos:start="157:5" pos:end="157:16">ref_clusters</name> <operator pos:start="157:18" pos:end="157:18">=</operator> <operator pos:start="157:20" pos:end="157:20">(</operator><name pos:start="157:21" pos:end="157:23">tmp</name> <operator pos:start="157:25" pos:end="157:26">&gt;&gt;</operator> <operator pos:start="157:28" pos:end="157:28">(</operator><name pos:start="157:29" pos:end="157:43"><name pos:start="157:29" pos:end="157:29">s</name><operator pos:start="157:30" pos:end="157:31">-&gt;</operator><name pos:start="157:32" pos:end="157:43">cluster_bits</name></name> <operator pos:start="157:45" pos:end="157:45">-</operator> <name pos:start="157:47" pos:end="157:60">REFCOUNT_SHIFT</name><operator pos:start="157:61" pos:end="157:61">)</operator><operator pos:start="157:62" pos:end="157:62">)</operator> <operator pos:start="157:64" pos:end="157:64">+</operator> <literal type="number" pos:start="157:66" pos:end="157:66">1</literal></expr>;</expr_stmt>

    <for pos:start="159:5" pos:end="165:5">for <control pos:start="159:9" pos:end="159:36">(<init pos:start="159:10" pos:end="159:13"><expr pos:start="159:10" pos:end="159:12"><name pos:start="159:10" pos:end="159:10">i</name><operator pos:start="159:11" pos:end="159:11">=</operator><literal type="number" pos:start="159:12" pos:end="159:12">0</literal></expr>;</init> <condition pos:start="159:15" pos:end="159:31"><expr pos:start="159:15" pos:end="159:30"><name pos:start="159:15" pos:end="159:15">i</name> <operator pos:start="159:17" pos:end="159:17">&lt;</operator> <name pos:start="159:19" pos:end="159:30">ref_clusters</name></expr>;</condition> <incr pos:start="159:33" pos:end="159:35"><expr pos:start="159:33" pos:end="159:35"><name pos:start="159:33" pos:end="159:33">i</name><operator pos:start="159:34" pos:end="159:35">++</operator></expr></incr>)</control> <block pos:start="159:38" pos:end="165:5">{<block_content pos:start="161:9" pos:end="163:34">

        <expr_stmt pos:start="161:9" pos:end="161:51"><expr pos:start="161:9" pos:end="161:50"><name pos:start="161:9" pos:end="161:28"><name pos:start="161:9" pos:end="161:9">s</name><operator pos:start="161:10" pos:end="161:11">-&gt;</operator><name pos:start="161:12" pos:end="161:25">refcount_table</name><index pos:start="161:26" pos:end="161:28">[<expr pos:start="161:27" pos:end="161:27"><name pos:start="161:27" pos:end="161:27">i</name></expr>]</index></name> <operator pos:start="161:30" pos:end="161:30">=</operator> <call pos:start="161:32" pos:end="161:50"><name pos:start="161:32" pos:end="161:42">cpu_to_be64</name><argument_list pos:start="161:43" pos:end="161:50">(<argument pos:start="161:44" pos:end="161:49"><expr pos:start="161:44" pos:end="161:49"><name pos:start="161:44" pos:end="161:49">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:34"><expr pos:start="163:9" pos:end="163:33"><name pos:start="163:9" pos:end="163:14">offset</name> <operator pos:start="163:16" pos:end="163:17">+=</operator> <name pos:start="163:19" pos:end="163:33"><name pos:start="163:19" pos:end="163:19">s</name><operator pos:start="163:20" pos:end="163:21">-&gt;</operator><name pos:start="163:22" pos:end="163:33">cluster_size</name></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="169:5" pos:end="169:69"><expr pos:start="169:5" pos:end="169:68"><name pos:start="169:5" pos:end="169:21"><name pos:start="169:5" pos:end="169:5">s</name><operator pos:start="169:6" pos:end="169:7">-&gt;</operator><name pos:start="169:8" pos:end="169:21">refcount_block</name></name> <operator pos:start="169:23" pos:end="169:23">=</operator> <call pos:start="169:25" pos:end="169:68"><name pos:start="169:25" pos:end="169:36">qemu_mallocz</name><argument_list pos:start="169:37" pos:end="169:68">(<argument pos:start="169:38" pos:end="169:67"><expr pos:start="169:38" pos:end="169:67"><name pos:start="169:38" pos:end="169:49">ref_clusters</name> <operator pos:start="169:51" pos:end="169:51">*</operator> <name pos:start="169:53" pos:end="169:67"><name pos:start="169:53" pos:end="169:53">s</name><operator pos:start="169:54" pos:end="169:55">-&gt;</operator><name pos:start="169:56" pos:end="169:67">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="173:5" pos:end="173:26">/* update refcounts */</comment>

    <expr_stmt pos:start="175:5" pos:end="175:52"><expr pos:start="175:5" pos:end="175:51"><call pos:start="175:5" pos:end="175:51"><name pos:start="175:5" pos:end="175:32">qcow2_create_refcount_update</name><argument_list pos:start="175:33" pos:end="175:51">(<argument pos:start="175:34" pos:end="175:34"><expr pos:start="175:34" pos:end="175:34"><name pos:start="175:34" pos:end="175:34">s</name></expr></argument>, <argument pos:start="175:37" pos:end="175:37"><expr pos:start="175:37" pos:end="175:37"><literal type="number" pos:start="175:37" pos:end="175:37">0</literal></expr></argument>, <argument pos:start="175:40" pos:end="175:50"><expr pos:start="175:40" pos:end="175:50"><name pos:start="175:40" pos:end="175:50">header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="179:36"><expr pos:start="177:5" pos:end="179:35"><call pos:start="177:5" pos:end="179:35"><name pos:start="177:5" pos:end="177:32">qcow2_create_refcount_update</name><argument_list pos:start="177:33" pos:end="179:35">(<argument pos:start="177:34" pos:end="177:34"><expr pos:start="177:34" pos:end="177:34"><name pos:start="177:34" pos:end="177:34">s</name></expr></argument>, <argument pos:start="177:37" pos:end="177:54"><expr pos:start="177:37" pos:end="177:54"><name pos:start="177:37" pos:end="177:54"><name pos:start="177:37" pos:end="177:37">s</name><operator pos:start="177:38" pos:end="177:39">-&gt;</operator><name pos:start="177:40" pos:end="177:54">l1_table_offset</name></name></expr></argument>,

        <argument pos:start="179:9" pos:end="179:34"><expr pos:start="179:9" pos:end="179:34"><name pos:start="179:9" pos:end="179:15">l1_size</name> <operator pos:start="179:17" pos:end="179:17">*</operator> <sizeof pos:start="179:19" pos:end="179:34">sizeof<argument_list pos:start="179:25" pos:end="179:34">(<argument pos:start="179:26" pos:end="179:33"><expr pos:start="179:26" pos:end="179:33"><name pos:start="179:26" pos:end="179:33">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:79"><expr pos:start="181:5" pos:end="181:78"><call pos:start="181:5" pos:end="181:78"><name pos:start="181:5" pos:end="181:32">qcow2_create_refcount_update</name><argument_list pos:start="181:33" pos:end="181:78">(<argument pos:start="181:34" pos:end="181:34"><expr pos:start="181:34" pos:end="181:34"><name pos:start="181:34" pos:end="181:34">s</name></expr></argument>, <argument pos:start="181:37" pos:end="181:60"><expr pos:start="181:37" pos:end="181:60"><name pos:start="181:37" pos:end="181:60"><name pos:start="181:37" pos:end="181:37">s</name><operator pos:start="181:38" pos:end="181:39">-&gt;</operator><name pos:start="181:40" pos:end="181:60">refcount_table_offset</name></name></expr></argument>, <argument pos:start="181:63" pos:end="181:77"><expr pos:start="181:63" pos:end="181:77"><name pos:start="181:63" pos:end="181:77"><name pos:start="181:63" pos:end="181:63">s</name><operator pos:start="181:64" pos:end="181:65">-&gt;</operator><name pos:start="181:66" pos:end="181:77">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="185:40"><expr pos:start="183:5" pos:end="185:39"><call pos:start="183:5" pos:end="185:39"><name pos:start="183:5" pos:end="183:32">qcow2_create_refcount_update</name><argument_list pos:start="183:33" pos:end="185:39">(<argument pos:start="183:34" pos:end="183:34"><expr pos:start="183:34" pos:end="183:34"><name pos:start="183:34" pos:end="183:34">s</name></expr></argument>, <argument pos:start="183:37" pos:end="183:60"><expr pos:start="183:37" pos:end="183:60"><name pos:start="183:37" pos:end="183:60"><name pos:start="183:37" pos:end="183:37">s</name><operator pos:start="183:38" pos:end="183:39">-&gt;</operator><name pos:start="183:40" pos:end="183:60">refcount_block_offset</name></name></expr></argument>,

        <argument pos:start="185:9" pos:end="185:38"><expr pos:start="185:9" pos:end="185:38"><name pos:start="185:9" pos:end="185:20">ref_clusters</name> <operator pos:start="185:22" pos:end="185:22">*</operator> <name pos:start="185:24" pos:end="185:38"><name pos:start="185:24" pos:end="185:24">s</name><operator pos:start="185:25" pos:end="185:26">-&gt;</operator><name pos:start="185:27" pos:end="185:38">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="189:5" pos:end="189:28">/* write all the data */</comment>

    <expr_stmt pos:start="191:5" pos:end="191:55"><expr pos:start="191:5" pos:end="191:54"><name pos:start="191:5" pos:end="191:7">ret</name> <operator pos:start="191:9" pos:end="191:9">=</operator> <call pos:start="191:11" pos:end="191:54"><name pos:start="191:11" pos:end="191:25">qemu_write_full</name><argument_list pos:start="191:26" pos:end="191:54">(<argument pos:start="191:27" pos:end="191:28"><expr pos:start="191:27" pos:end="191:28"><name pos:start="191:27" pos:end="191:28">fd</name></expr></argument>, <argument pos:start="191:31" pos:end="191:37"><expr pos:start="191:31" pos:end="191:37"><operator pos:start="191:31" pos:end="191:31">&amp;</operator><name pos:start="191:32" pos:end="191:37">header</name></expr></argument>, <argument pos:start="191:40" pos:end="191:53"><expr pos:start="191:40" pos:end="191:53"><sizeof pos:start="191:40" pos:end="191:53">sizeof<argument_list pos:start="191:46" pos:end="191:53">(<argument pos:start="191:47" pos:end="191:52"><expr pos:start="191:47" pos:end="191:52"><name pos:start="191:47" pos:end="191:52">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="193:5" pos:end="199:5"><if pos:start="193:5" pos:end="199:5">if <condition pos:start="193:8" pos:end="193:30">(<expr pos:start="193:9" pos:end="193:29"><name pos:start="193:9" pos:end="193:11">ret</name> <operator pos:start="193:13" pos:end="193:14">!=</operator> <sizeof pos:start="193:16" pos:end="193:29">sizeof<argument_list pos:start="193:22" pos:end="193:29">(<argument pos:start="193:23" pos:end="193:28"><expr pos:start="193:23" pos:end="193:28"><name pos:start="193:23" pos:end="193:28">header</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="193:32" pos:end="199:5">{<block_content pos:start="195:9" pos:end="197:18">

        <expr_stmt pos:start="195:9" pos:end="195:17"><expr pos:start="195:9" pos:end="195:16"><name pos:start="195:9" pos:end="195:11">ret</name> <operator pos:start="195:13" pos:end="195:13">=</operator> <operator pos:start="195:15" pos:end="195:15">-</operator><literal type="number" pos:start="195:16" pos:end="195:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="197:9" pos:end="197:18">goto <name pos:start="197:14" pos:end="197:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="201:5" pos:end="263:5"><if pos:start="201:5" pos:end="263:5">if <condition pos:start="201:8" pos:end="201:21">(<expr pos:start="201:9" pos:end="201:20"><name pos:start="201:9" pos:end="201:20">backing_file</name></expr>)</condition> <block pos:start="201:23" pos:end="263:5">{<block_content pos:start="203:9" pos:end="261:9">

        <if_stmt pos:start="203:9" pos:end="251:9"><if pos:start="203:9" pos:end="251:9">if <condition pos:start="203:12" pos:end="203:31">(<expr pos:start="203:13" pos:end="203:30"><name pos:start="203:13" pos:end="203:30">backing_format_len</name></expr>)</condition> <block pos:start="203:33" pos:end="251:9">{<block_content pos:start="205:13" pos:end="249:13">

            <decl_stmt pos:start="205:13" pos:end="205:26"><decl pos:start="205:13" pos:end="205:25"><type pos:start="205:13" pos:end="205:16"><name pos:start="205:13" pos:end="205:16">char</name></type> <name pos:start="205:18" pos:end="205:25"><name pos:start="205:18" pos:end="205:21">zero</name><index pos:start="205:22" pos:end="205:25">[<expr pos:start="205:23" pos:end="205:24"><literal type="number" pos:start="205:23" pos:end="205:24">16</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="207:13" pos:end="207:77"><decl pos:start="207:13" pos:end="207:76"><type pos:start="207:13" pos:end="207:15"><name pos:start="207:13" pos:end="207:15">int</name></type> <name pos:start="207:17" pos:end="207:23">padding</name> <init pos:start="207:25" pos:end="207:76">= <expr pos:start="207:27" pos:end="207:76"><name pos:start="207:27" pos:end="207:44">rounded_ext_bf_len</name> <operator pos:start="207:46" pos:end="207:46">-</operator> <operator pos:start="207:48" pos:end="207:48">(</operator><name pos:start="207:49" pos:end="207:58"><name pos:start="207:49" pos:end="207:54">ext_bf</name><operator pos:start="207:55" pos:end="207:55">.</operator><name pos:start="207:56" pos:end="207:58">len</name></name> <operator pos:start="207:60" pos:end="207:60">+</operator> <sizeof pos:start="207:62" pos:end="207:75">sizeof<argument_list pos:start="207:68" pos:end="207:75">(<argument pos:start="207:69" pos:end="207:74"><expr pos:start="207:69" pos:end="207:74"><name pos:start="207:69" pos:end="207:74">ext_bf</name></expr></argument>)</argument_list></sizeof><operator pos:start="207:76" pos:end="207:76">)</operator></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="211:13" pos:end="211:42"><expr pos:start="211:13" pos:end="211:41"><call pos:start="211:13" pos:end="211:41"><name pos:start="211:13" pos:end="211:18">memset</name><argument_list pos:start="211:19" pos:end="211:41">(<argument pos:start="211:20" pos:end="211:23"><expr pos:start="211:20" pos:end="211:23"><name pos:start="211:20" pos:end="211:23">zero</name></expr></argument>, <argument pos:start="211:26" pos:end="211:26"><expr pos:start="211:26" pos:end="211:26"><literal type="number" pos:start="211:26" pos:end="211:26">0</literal></expr></argument>, <argument pos:start="211:29" pos:end="211:40"><expr pos:start="211:29" pos:end="211:40"><sizeof pos:start="211:29" pos:end="211:40">sizeof<argument_list pos:start="211:35" pos:end="211:40">(<argument pos:start="211:36" pos:end="211:39"><expr pos:start="211:36" pos:end="211:39"><name pos:start="211:36" pos:end="211:39">zero</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:40"><expr pos:start="213:13" pos:end="213:39"><call pos:start="213:13" pos:end="213:39"><name pos:start="213:13" pos:end="213:24">cpu_to_be32s</name><argument_list pos:start="213:25" pos:end="213:39">(<argument pos:start="213:26" pos:end="213:38"><expr pos:start="213:26" pos:end="213:38"><operator pos:start="213:26" pos:end="213:26">&amp;</operator><name pos:start="213:27" pos:end="213:38"><name pos:start="213:27" pos:end="213:32">ext_bf</name><operator pos:start="213:33" pos:end="213:33">.</operator><name pos:start="213:34" pos:end="213:38">magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:38"><expr pos:start="215:13" pos:end="215:37"><call pos:start="215:13" pos:end="215:37"><name pos:start="215:13" pos:end="215:24">cpu_to_be32s</name><argument_list pos:start="215:25" pos:end="215:37">(<argument pos:start="215:26" pos:end="215:36"><expr pos:start="215:26" pos:end="215:36"><operator pos:start="215:26" pos:end="215:26">&amp;</operator><name pos:start="215:27" pos:end="215:36"><name pos:start="215:27" pos:end="215:32">ext_bf</name><operator pos:start="215:33" pos:end="215:33">.</operator><name pos:start="215:34" pos:end="215:36">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:63"><expr pos:start="217:13" pos:end="217:62"><name pos:start="217:13" pos:end="217:15">ret</name> <operator pos:start="217:17" pos:end="217:17">=</operator> <call pos:start="217:19" pos:end="217:62"><name pos:start="217:19" pos:end="217:33">qemu_write_full</name><argument_list pos:start="217:34" pos:end="217:62">(<argument pos:start="217:35" pos:end="217:36"><expr pos:start="217:35" pos:end="217:36"><name pos:start="217:35" pos:end="217:36">fd</name></expr></argument>, <argument pos:start="217:39" pos:end="217:45"><expr pos:start="217:39" pos:end="217:45"><operator pos:start="217:39" pos:end="217:39">&amp;</operator><name pos:start="217:40" pos:end="217:45">ext_bf</name></expr></argument>, <argument pos:start="217:48" pos:end="217:61"><expr pos:start="217:48" pos:end="217:61"><sizeof pos:start="217:48" pos:end="217:61">sizeof<argument_list pos:start="217:54" pos:end="217:61">(<argument pos:start="217:55" pos:end="217:60"><expr pos:start="217:55" pos:end="217:60"><name pos:start="217:55" pos:end="217:60">ext_bf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="219:13" pos:end="225:13"><if pos:start="219:13" pos:end="225:13">if <condition pos:start="219:16" pos:end="219:38">(<expr pos:start="219:17" pos:end="219:37"><name pos:start="219:17" pos:end="219:19">ret</name> <operator pos:start="219:21" pos:end="219:22">!=</operator> <sizeof pos:start="219:24" pos:end="219:37">sizeof<argument_list pos:start="219:30" pos:end="219:37">(<argument pos:start="219:31" pos:end="219:36"><expr pos:start="219:31" pos:end="219:36"><name pos:start="219:31" pos:end="219:36">ext_bf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="219:40" pos:end="225:13">{<block_content pos:start="221:17" pos:end="223:26">

                <expr_stmt pos:start="221:17" pos:end="221:25"><expr pos:start="221:17" pos:end="221:24"><name pos:start="221:17" pos:end="221:19">ret</name> <operator pos:start="221:21" pos:end="221:21">=</operator> <operator pos:start="221:23" pos:end="221:23">-</operator><literal type="number" pos:start="221:24" pos:end="221:24">1</literal></expr>;</expr_stmt>

                <goto pos:start="223:17" pos:end="223:26">goto <name pos:start="223:22" pos:end="223:25">exit</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="227:13" pos:end="227:74"><expr pos:start="227:13" pos:end="227:73"><name pos:start="227:13" pos:end="227:15">ret</name> <operator pos:start="227:17" pos:end="227:17">=</operator> <call pos:start="227:19" pos:end="227:73"><name pos:start="227:19" pos:end="227:33">qemu_write_full</name><argument_list pos:start="227:34" pos:end="227:73">(<argument pos:start="227:35" pos:end="227:36"><expr pos:start="227:35" pos:end="227:36"><name pos:start="227:35" pos:end="227:36">fd</name></expr></argument>, <argument pos:start="227:39" pos:end="227:52"><expr pos:start="227:39" pos:end="227:52"><name pos:start="227:39" pos:end="227:52">backing_format</name></expr></argument>, <argument pos:start="227:55" pos:end="227:72"><expr pos:start="227:55" pos:end="227:72"><name pos:start="227:55" pos:end="227:72">backing_format_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="229:13" pos:end="235:13"><if pos:start="229:13" pos:end="235:13">if <condition pos:start="229:16" pos:end="229:42">(<expr pos:start="229:17" pos:end="229:41"><name pos:start="229:17" pos:end="229:19">ret</name> <operator pos:start="229:21" pos:end="229:22">!=</operator> <name pos:start="229:24" pos:end="229:41">backing_format_len</name></expr>)</condition> <block pos:start="229:44" pos:end="235:13">{<block_content pos:start="231:17" pos:end="233:26">

                <expr_stmt pos:start="231:17" pos:end="231:25"><expr pos:start="231:17" pos:end="231:24"><name pos:start="231:17" pos:end="231:19">ret</name> <operator pos:start="231:21" pos:end="231:21">=</operator> <operator pos:start="231:23" pos:end="231:23">-</operator><literal type="number" pos:start="231:24" pos:end="231:24">1</literal></expr>;</expr_stmt>

                <goto pos:start="233:17" pos:end="233:26">goto <name pos:start="233:22" pos:end="233:25">exit</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="237:13" pos:end="249:13"><if pos:start="237:13" pos:end="249:13">if <condition pos:start="237:16" pos:end="237:28">(<expr pos:start="237:17" pos:end="237:27"><name pos:start="237:17" pos:end="237:23">padding</name> <operator pos:start="237:25" pos:end="237:25">&gt;</operator> <literal type="number" pos:start="237:27" pos:end="237:27">0</literal></expr>)</condition> <block pos:start="237:30" pos:end="249:13">{<block_content pos:start="239:17" pos:end="247:17">

                <expr_stmt pos:start="239:17" pos:end="239:57"><expr pos:start="239:17" pos:end="239:56"><name pos:start="239:17" pos:end="239:19">ret</name> <operator pos:start="239:21" pos:end="239:21">=</operator> <call pos:start="239:23" pos:end="239:56"><name pos:start="239:23" pos:end="239:37">qemu_write_full</name><argument_list pos:start="239:38" pos:end="239:56">(<argument pos:start="239:39" pos:end="239:40"><expr pos:start="239:39" pos:end="239:40"><name pos:start="239:39" pos:end="239:40">fd</name></expr></argument>, <argument pos:start="239:43" pos:end="239:46"><expr pos:start="239:43" pos:end="239:46"><name pos:start="239:43" pos:end="239:46">zero</name></expr></argument>, <argument pos:start="239:49" pos:end="239:55"><expr pos:start="239:49" pos:end="239:55"><name pos:start="239:49" pos:end="239:55">padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="241:17" pos:end="247:17"><if pos:start="241:17" pos:end="247:17">if <condition pos:start="241:20" pos:end="241:35">(<expr pos:start="241:21" pos:end="241:34"><name pos:start="241:21" pos:end="241:23">ret</name> <operator pos:start="241:25" pos:end="241:26">!=</operator> <name pos:start="241:28" pos:end="241:34">padding</name></expr>)</condition> <block pos:start="241:37" pos:end="247:17">{<block_content pos:start="243:21" pos:end="245:30">

                    <expr_stmt pos:start="243:21" pos:end="243:29"><expr pos:start="243:21" pos:end="243:28"><name pos:start="243:21" pos:end="243:23">ret</name> <operator pos:start="243:25" pos:end="243:25">=</operator> <operator pos:start="243:27" pos:end="243:27">-</operator><literal type="number" pos:start="243:28" pos:end="243:28">1</literal></expr>;</expr_stmt>

                    <goto pos:start="245:21" pos:end="245:30">goto <name pos:start="245:26" pos:end="245:29">exit</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:70"><expr pos:start="253:9" pos:end="253:69"><name pos:start="253:9" pos:end="253:11">ret</name> <operator pos:start="253:13" pos:end="253:13">=</operator> <call pos:start="253:15" pos:end="253:69"><name pos:start="253:15" pos:end="253:29">qemu_write_full</name><argument_list pos:start="253:30" pos:end="253:69">(<argument pos:start="253:31" pos:end="253:32"><expr pos:start="253:31" pos:end="253:32"><name pos:start="253:31" pos:end="253:32">fd</name></expr></argument>, <argument pos:start="253:35" pos:end="253:46"><expr pos:start="253:35" pos:end="253:46"><name pos:start="253:35" pos:end="253:46">backing_file</name></expr></argument>, <argument pos:start="253:49" pos:end="253:68"><expr pos:start="253:49" pos:end="253:68"><name pos:start="253:49" pos:end="253:68">backing_filename_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="255:9" pos:end="261:9"><if pos:start="255:9" pos:end="261:9">if <condition pos:start="255:12" pos:end="255:40">(<expr pos:start="255:13" pos:end="255:39"><name pos:start="255:13" pos:end="255:15">ret</name> <operator pos:start="255:17" pos:end="255:18">!=</operator> <name pos:start="255:20" pos:end="255:39">backing_filename_len</name></expr>)</condition> <block pos:start="255:42" pos:end="261:9">{<block_content pos:start="257:13" pos:end="259:22">

            <expr_stmt pos:start="257:13" pos:end="257:21"><expr pos:start="257:13" pos:end="257:20"><name pos:start="257:13" pos:end="257:15">ret</name> <operator pos:start="257:17" pos:end="257:17">=</operator> <operator pos:start="257:19" pos:end="257:19">-</operator><literal type="number" pos:start="257:20" pos:end="257:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="259:13" pos:end="259:22">goto <name pos:start="259:18" pos:end="259:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="265:5" pos:end="265:44"><expr pos:start="265:5" pos:end="265:43"><call pos:start="265:5" pos:end="265:43"><name pos:start="265:5" pos:end="265:9">lseek</name><argument_list pos:start="265:10" pos:end="265:43">(<argument pos:start="265:11" pos:end="265:12"><expr pos:start="265:11" pos:end="265:12"><name pos:start="265:11" pos:end="265:12">fd</name></expr></argument>, <argument pos:start="265:15" pos:end="265:32"><expr pos:start="265:15" pos:end="265:32"><name pos:start="265:15" pos:end="265:32"><name pos:start="265:15" pos:end="265:15">s</name><operator pos:start="265:16" pos:end="265:17">-&gt;</operator><name pos:start="265:18" pos:end="265:32">l1_table_offset</name></name></expr></argument>, <argument pos:start="265:35" pos:end="265:42"><expr pos:start="265:35" pos:end="265:42"><name pos:start="265:35" pos:end="265:42">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="267:5" pos:end="267:12"><expr pos:start="267:5" pos:end="267:11"><name pos:start="267:5" pos:end="267:7">tmp</name> <operator pos:start="267:9" pos:end="267:9">=</operator> <literal type="number" pos:start="267:11" pos:end="267:11">0</literal></expr>;</expr_stmt>

    <for pos:start="269:5" pos:end="281:5">for<control pos:start="269:8" pos:end="269:31">(<init pos:start="269:9" pos:end="269:14"><expr pos:start="269:9" pos:end="269:13"><name pos:start="269:9" pos:end="269:9">i</name> <operator pos:start="269:11" pos:end="269:11">=</operator> <literal type="number" pos:start="269:13" pos:end="269:13">0</literal></expr>;</init><condition pos:start="269:15" pos:end="269:26"><expr pos:start="269:15" pos:end="269:25"><name pos:start="269:15" pos:end="269:15">i</name> <operator pos:start="269:17" pos:end="269:17">&lt;</operator> <name pos:start="269:19" pos:end="269:25">l1_size</name></expr>;</condition> <incr pos:start="269:28" pos:end="269:30"><expr pos:start="269:28" pos:end="269:30"><name pos:start="269:28" pos:end="269:28">i</name><operator pos:start="269:29" pos:end="269:30">++</operator></expr></incr>)</control> <block pos:start="269:33" pos:end="281:5">{<block_content pos:start="271:9" pos:end="279:9">

        <expr_stmt pos:start="271:9" pos:end="271:53"><expr pos:start="271:9" pos:end="271:52"><name pos:start="271:9" pos:end="271:11">ret</name> <operator pos:start="271:13" pos:end="271:13">=</operator> <call pos:start="271:15" pos:end="271:52"><name pos:start="271:15" pos:end="271:29">qemu_write_full</name><argument_list pos:start="271:30" pos:end="271:52">(<argument pos:start="271:31" pos:end="271:32"><expr pos:start="271:31" pos:end="271:32"><name pos:start="271:31" pos:end="271:32">fd</name></expr></argument>, <argument pos:start="271:35" pos:end="271:38"><expr pos:start="271:35" pos:end="271:38"><operator pos:start="271:35" pos:end="271:35">&amp;</operator><name pos:start="271:36" pos:end="271:38">tmp</name></expr></argument>, <argument pos:start="271:41" pos:end="271:51"><expr pos:start="271:41" pos:end="271:51"><sizeof pos:start="271:41" pos:end="271:51">sizeof<argument_list pos:start="271:47" pos:end="271:51">(<argument pos:start="271:48" pos:end="271:50"><expr pos:start="271:48" pos:end="271:50"><name pos:start="271:48" pos:end="271:50">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="273:9" pos:end="279:9"><if pos:start="273:9" pos:end="279:9">if <condition pos:start="273:12" pos:end="273:31">(<expr pos:start="273:13" pos:end="273:30"><name pos:start="273:13" pos:end="273:15">ret</name> <operator pos:start="273:17" pos:end="273:18">!=</operator> <sizeof pos:start="273:20" pos:end="273:30">sizeof<argument_list pos:start="273:26" pos:end="273:30">(<argument pos:start="273:27" pos:end="273:29"><expr pos:start="273:27" pos:end="273:29"><name pos:start="273:27" pos:end="273:29">tmp</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="273:33" pos:end="279:9">{<block_content pos:start="275:13" pos:end="277:22">

            <expr_stmt pos:start="275:13" pos:end="275:21"><expr pos:start="275:13" pos:end="275:20"><name pos:start="275:13" pos:end="275:15">ret</name> <operator pos:start="275:17" pos:end="275:17">=</operator> <operator pos:start="275:19" pos:end="275:19">-</operator><literal type="number" pos:start="275:20" pos:end="275:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="277:13" pos:end="277:22">goto <name pos:start="277:18" pos:end="277:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="283:5" pos:end="283:50"><expr pos:start="283:5" pos:end="283:49"><call pos:start="283:5" pos:end="283:49"><name pos:start="283:5" pos:end="283:9">lseek</name><argument_list pos:start="283:10" pos:end="283:49">(<argument pos:start="283:11" pos:end="283:12"><expr pos:start="283:11" pos:end="283:12"><name pos:start="283:11" pos:end="283:12">fd</name></expr></argument>, <argument pos:start="283:15" pos:end="283:38"><expr pos:start="283:15" pos:end="283:38"><name pos:start="283:15" pos:end="283:38"><name pos:start="283:15" pos:end="283:15">s</name><operator pos:start="283:16" pos:end="283:17">-&gt;</operator><name pos:start="283:18" pos:end="283:38">refcount_table_offset</name></name></expr></argument>, <argument pos:start="283:41" pos:end="283:48"><expr pos:start="283:41" pos:end="283:48"><name pos:start="283:41" pos:end="283:48">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:66"><expr pos:start="285:5" pos:end="285:65"><name pos:start="285:5" pos:end="285:7">ret</name> <operator pos:start="285:9" pos:end="285:9">=</operator> <call pos:start="285:11" pos:end="285:65"><name pos:start="285:11" pos:end="285:25">qemu_write_full</name><argument_list pos:start="285:26" pos:end="285:65">(<argument pos:start="285:27" pos:end="285:28"><expr pos:start="285:27" pos:end="285:28"><name pos:start="285:27" pos:end="285:28">fd</name></expr></argument>, <argument pos:start="285:31" pos:end="285:47"><expr pos:start="285:31" pos:end="285:47"><name pos:start="285:31" pos:end="285:47"><name pos:start="285:31" pos:end="285:31">s</name><operator pos:start="285:32" pos:end="285:33">-&gt;</operator><name pos:start="285:34" pos:end="285:47">refcount_table</name></name></expr></argument>, <argument pos:start="285:50" pos:end="285:64"><expr pos:start="285:50" pos:end="285:64"><name pos:start="285:50" pos:end="285:64"><name pos:start="285:50" pos:end="285:50">s</name><operator pos:start="285:51" pos:end="285:52">-&gt;</operator><name pos:start="285:53" pos:end="285:64">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="287:5" pos:end="293:5"><if pos:start="287:5" pos:end="293:5">if <condition pos:start="287:8" pos:end="287:31">(<expr pos:start="287:9" pos:end="287:30"><name pos:start="287:9" pos:end="287:11">ret</name> <operator pos:start="287:13" pos:end="287:14">!=</operator> <name pos:start="287:16" pos:end="287:30"><name pos:start="287:16" pos:end="287:16">s</name><operator pos:start="287:17" pos:end="287:18">-&gt;</operator><name pos:start="287:19" pos:end="287:30">cluster_size</name></name></expr>)</condition> <block pos:start="287:33" pos:end="293:5">{<block_content pos:start="289:9" pos:end="291:18">

        <expr_stmt pos:start="289:9" pos:end="289:17"><expr pos:start="289:9" pos:end="289:16"><name pos:start="289:9" pos:end="289:11">ret</name> <operator pos:start="289:13" pos:end="289:13">=</operator> <operator pos:start="289:15" pos:end="289:15">-</operator><literal type="number" pos:start="289:16" pos:end="289:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="291:9" pos:end="291:18">goto <name pos:start="291:14" pos:end="291:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="297:5" pos:end="297:50"><expr pos:start="297:5" pos:end="297:49"><call pos:start="297:5" pos:end="297:49"><name pos:start="297:5" pos:end="297:9">lseek</name><argument_list pos:start="297:10" pos:end="297:49">(<argument pos:start="297:11" pos:end="297:12"><expr pos:start="297:11" pos:end="297:12"><name pos:start="297:11" pos:end="297:12">fd</name></expr></argument>, <argument pos:start="297:15" pos:end="297:38"><expr pos:start="297:15" pos:end="297:38"><name pos:start="297:15" pos:end="297:38"><name pos:start="297:15" pos:end="297:15">s</name><operator pos:start="297:16" pos:end="297:17">-&gt;</operator><name pos:start="297:18" pos:end="297:38">refcount_block_offset</name></name></expr></argument>, <argument pos:start="297:41" pos:end="297:48"><expr pos:start="297:41" pos:end="297:48"><name pos:start="297:41" pos:end="297:48">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="299:5" pos:end="301:52"><expr pos:start="299:5" pos:end="301:51"><name pos:start="299:5" pos:end="299:7">ret</name> <operator pos:start="299:9" pos:end="299:9">=</operator> <call pos:start="299:11" pos:end="301:51"><name pos:start="299:11" pos:end="299:25">qemu_write_full</name><argument_list pos:start="299:26" pos:end="301:51">(<argument pos:start="299:27" pos:end="299:28"><expr pos:start="299:27" pos:end="299:28"><name pos:start="299:27" pos:end="299:28">fd</name></expr></argument>, <argument pos:start="299:31" pos:end="299:47"><expr pos:start="299:31" pos:end="299:47"><name pos:start="299:31" pos:end="299:47"><name pos:start="299:31" pos:end="299:31">s</name><operator pos:start="299:32" pos:end="299:33">-&gt;</operator><name pos:start="299:34" pos:end="299:47">refcount_block</name></name></expr></argument>,

		    <argument pos:start="301:21" pos:end="301:50"><expr pos:start="301:21" pos:end="301:50"><name pos:start="301:21" pos:end="301:32">ref_clusters</name> <operator pos:start="301:34" pos:end="301:34">*</operator> <name pos:start="301:36" pos:end="301:50"><name pos:start="301:36" pos:end="301:36">s</name><operator pos:start="301:37" pos:end="301:38">-&gt;</operator><name pos:start="301:39" pos:end="301:50">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="303:5" pos:end="309:5"><if pos:start="303:5" pos:end="309:5">if <condition pos:start="303:8" pos:end="303:31">(<expr pos:start="303:9" pos:end="303:30"><name pos:start="303:9" pos:end="303:11">ret</name> <operator pos:start="303:13" pos:end="303:14">!=</operator> <name pos:start="303:16" pos:end="303:30"><name pos:start="303:16" pos:end="303:16">s</name><operator pos:start="303:17" pos:end="303:18">-&gt;</operator><name pos:start="303:19" pos:end="303:30">cluster_size</name></name></expr>)</condition> <block pos:start="303:33" pos:end="309:5">{<block_content pos:start="305:9" pos:end="307:18">

        <expr_stmt pos:start="305:9" pos:end="305:17"><expr pos:start="305:9" pos:end="305:16"><name pos:start="305:9" pos:end="305:11">ret</name> <operator pos:start="305:13" pos:end="305:13">=</operator> <operator pos:start="305:15" pos:end="305:15">-</operator><literal type="number" pos:start="305:16" pos:end="305:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="307:9" pos:end="307:18">goto <name pos:start="307:14" pos:end="307:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="313:5" pos:end="313:12"><expr pos:start="313:5" pos:end="313:11"><name pos:start="313:5" pos:end="313:7">ret</name> <operator pos:start="313:9" pos:end="313:9">=</operator> <literal type="number" pos:start="313:11" pos:end="313:11">0</literal></expr>;</expr_stmt>

<label pos:start="315:1" pos:end="315:5"><name pos:start="315:1" pos:end="315:4">exit</name>:</label>

    <expr_stmt pos:start="317:5" pos:end="317:33"><expr pos:start="317:5" pos:end="317:32"><call pos:start="317:5" pos:end="317:32"><name pos:start="317:5" pos:end="317:13">qemu_free</name><argument_list pos:start="317:14" pos:end="317:32">(<argument pos:start="317:15" pos:end="317:31"><expr pos:start="317:15" pos:end="317:31"><name pos:start="317:15" pos:end="317:31"><name pos:start="317:15" pos:end="317:15">s</name><operator pos:start="317:16" pos:end="317:17">-&gt;</operator><name pos:start="317:18" pos:end="317:31">refcount_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="319:5" pos:end="319:33"><expr pos:start="319:5" pos:end="319:32"><call pos:start="319:5" pos:end="319:32"><name pos:start="319:5" pos:end="319:13">qemu_free</name><argument_list pos:start="319:14" pos:end="319:32">(<argument pos:start="319:15" pos:end="319:31"><expr pos:start="319:15" pos:end="319:31"><name pos:start="319:15" pos:end="319:31"><name pos:start="319:15" pos:end="319:15">s</name><operator pos:start="319:16" pos:end="319:17">-&gt;</operator><name pos:start="319:18" pos:end="319:31">refcount_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="321:5" pos:end="321:14"><expr pos:start="321:5" pos:end="321:13"><call pos:start="321:5" pos:end="321:13"><name pos:start="321:5" pos:end="321:9">close</name><argument_list pos:start="321:10" pos:end="321:13">(<argument pos:start="321:11" pos:end="321:12"><expr pos:start="321:11" pos:end="321:12"><name pos:start="321:11" pos:end="321:12">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="325:5" pos:end="325:30">/* Preallocate metadata */</comment>

    <if_stmt pos:start="327:5" pos:end="339:5"><if pos:start="327:5" pos:end="339:5">if <condition pos:start="327:8" pos:end="327:17">(<expr pos:start="327:9" pos:end="327:16"><name pos:start="327:9" pos:end="327:16">prealloc</name></expr>)</condition> <block pos:start="327:19" pos:end="339:5">{<block_content pos:start="329:9" pos:end="337:23">

        <decl_stmt pos:start="329:9" pos:end="329:29"><decl pos:start="329:9" pos:end="329:28"><type pos:start="329:9" pos:end="329:26"><name pos:start="329:9" pos:end="329:24">BlockDriverState</name> <modifier pos:start="329:26" pos:end="329:26">*</modifier></type><name pos:start="329:27" pos:end="329:28">bs</name></decl>;</decl_stmt>

        <expr_stmt pos:start="331:9" pos:end="331:26"><expr pos:start="331:9" pos:end="331:25"><name pos:start="331:9" pos:end="331:10">bs</name> <operator pos:start="331:12" pos:end="331:12">=</operator> <call pos:start="331:14" pos:end="331:25"><name pos:start="331:14" pos:end="331:21">bdrv_new</name><argument_list pos:start="331:22" pos:end="331:25">(<argument pos:start="331:23" pos:end="331:24"><expr pos:start="331:23" pos:end="331:24"><literal type="string" pos:start="331:23" pos:end="331:24">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="333:9" pos:end="333:63"><expr pos:start="333:9" pos:end="333:62"><call pos:start="333:9" pos:end="333:62"><name pos:start="333:9" pos:end="333:17">bdrv_open</name><argument_list pos:start="333:18" pos:end="333:62">(<argument pos:start="333:19" pos:end="333:20"><expr pos:start="333:19" pos:end="333:20"><name pos:start="333:19" pos:end="333:20">bs</name></expr></argument>, <argument pos:start="333:23" pos:end="333:30"><expr pos:start="333:23" pos:end="333:30"><name pos:start="333:23" pos:end="333:30">filename</name></expr></argument>, <argument pos:start="333:33" pos:end="333:61"><expr pos:start="333:33" pos:end="333:61"><name pos:start="333:33" pos:end="333:47">BDRV_O_CACHE_WB</name> <operator pos:start="333:49" pos:end="333:49">|</operator> <name pos:start="333:51" pos:end="333:61">BDRV_O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="335:9" pos:end="335:24"><expr pos:start="335:9" pos:end="335:23"><call pos:start="335:9" pos:end="335:23"><name pos:start="335:9" pos:end="335:19">preallocate</name><argument_list pos:start="335:20" pos:end="335:23">(<argument pos:start="335:21" pos:end="335:22"><expr pos:start="335:21" pos:end="335:22"><name pos:start="335:21" pos:end="335:22">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="337:9" pos:end="337:23"><expr pos:start="337:9" pos:end="337:22"><call pos:start="337:9" pos:end="337:22"><name pos:start="337:9" pos:end="337:18">bdrv_close</name><argument_list pos:start="337:19" pos:end="337:22">(<argument pos:start="337:20" pos:end="337:21"><expr pos:start="337:20" pos:end="337:21"><name pos:start="337:20" pos:end="337:21">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="343:5" pos:end="343:15">return <expr pos:start="343:12" pos:end="343:14"><name pos:start="343:12" pos:end="343:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
