<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8488.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:6"><name pos:start="1:1" pos:end="1:4">char</name> <modifier pos:start="1:6" pos:end="1:6">*</modifier></type><name pos:start="1:7" pos:end="1:22">av_base64_encode</name><parameter_list pos:start="1:23" pos:end="1:46">(<parameter pos:start="1:24" pos:end="1:36"><decl pos:start="1:24" pos:end="1:36"><type pos:start="1:24" pos:end="1:36"><name pos:start="1:24" pos:end="1:30">uint8_t</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type> <name pos:start="1:34" pos:end="1:36">src</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:45"><decl pos:start="1:39" pos:end="1:45"><type pos:start="1:39" pos:end="1:45"><name pos:start="1:39" pos:end="1:41">int</name></type> <name pos:start="1:43" pos:end="1:45">len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:15">

    <decl_stmt pos:start="5:5" pos:end="7:75"><decl pos:start="5:5" pos:end="7:74"><type pos:start="5:5" pos:end="5:21"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <specifier pos:start="5:12" pos:end="5:16">const</specifier> <name pos:start="5:18" pos:end="5:21">char</name></type> <name pos:start="5:23" pos:end="5:27"><name pos:start="5:23" pos:end="5:25">b64</name><index pos:start="5:26" pos:end="5:27">[]</index></name> <init pos:start="5:29" pos:end="7:74">=

        <expr pos:start="7:9" pos:end="7:74"><literal type="string" pos:start="7:9" pos:end="7:74">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:13">ret</name></decl>, <decl pos:start="9:16" pos:end="9:19"><type ref="prev" pos:start="9:5" pos:end="9:10"><modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:19">dst</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">unsigned</name></type> <name pos:start="11:14" pos:end="11:19">i_bits</name> <init pos:start="11:21" pos:end="11:23">= <expr pos:start="11:23" pos:end="11:23"><literal type="number" pos:start="11:23" pos:end="11:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:15">i_shift</name> <init pos:start="13:17" pos:end="13:19">= <expr pos:start="13:19" pos:end="13:19"><literal type="number" pos:start="13:19" pos:end="13:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:23">bytes_remaining</name> <init pos:start="15:25" pos:end="15:29">= <expr pos:start="15:27" pos:end="15:29"><name pos:start="15:27" pos:end="15:29">len</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="25:20"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:27">(<expr pos:start="19:9" pos:end="19:26"><name pos:start="19:9" pos:end="19:11">len</name> <operator pos:start="19:13" pos:end="19:13">&lt;</operator> <name pos:start="19:15" pos:end="19:22">UINT_MAX</name> <operator pos:start="19:24" pos:end="19:24">/</operator> <literal type="number" pos:start="19:26" pos:end="19:26">4</literal></expr>)</condition> <block pos:start="19:29" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:48">

        <expr_stmt pos:start="21:9" pos:end="21:48"><expr pos:start="21:9" pos:end="21:47"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <name pos:start="21:15" pos:end="21:17">dst</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <call pos:start="21:21" pos:end="21:47"><name pos:start="21:21" pos:end="21:29">av_malloc</name><argument_list pos:start="21:30" pos:end="21:47">(<argument pos:start="21:31" pos:end="21:46"><expr pos:start="21:31" pos:end="21:46"><name pos:start="21:31" pos:end="21:33">len</name> <operator pos:start="21:35" pos:end="21:35">*</operator> <literal type="number" pos:start="21:37" pos:end="21:37">4</literal> <operator pos:start="21:39" pos:end="21:39">/</operator> <literal type="number" pos:start="21:41" pos:end="21:43">3</literal> <operator pos:start="21:43" pos:end="21:43">+</operator> <literal type="number" pos:start="21:45" pos:end="21:46">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="23:7" pos:end="25:20">else<block type="pseudo" pos:start="25:9" pos:end="25:20"><block_content pos:start="25:9" pos:end="25:20">

        <return pos:start="25:9" pos:end="25:20">return <expr pos:start="25:16" pos:end="25:19"><name pos:start="25:16" pos:end="25:19">NULL</name></expr>;</return></block_content></block></else></if_stmt>



    <if_stmt pos:start="29:5" pos:end="55:5"><if pos:start="29:5" pos:end="55:5">if <condition pos:start="29:8" pos:end="29:12">(<expr pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:11">len</name></expr>)</condition> <block pos:start="29:14" pos:end="55:5">{<block_content pos:start="31:9" pos:end="53:25">                  <comment type="line" pos:start="29:33" pos:end="29:84">// special edge case, what should we really do here?</comment>

        <while pos:start="31:9" pos:end="49:9">while <condition pos:start="31:15" pos:end="31:31">(<expr pos:start="31:16" pos:end="31:30"><name pos:start="31:16" pos:end="31:30">bytes_remaining</name></expr>)</condition> <block pos:start="31:33" pos:end="49:9">{<block_content pos:start="33:13" pos:end="47:75">

            <expr_stmt pos:start="33:13" pos:end="33:44"><expr pos:start="33:13" pos:end="33:43"><name pos:start="33:13" pos:end="33:18">i_bits</name> <operator pos:start="33:20" pos:end="33:20">=</operator> <operator pos:start="33:22" pos:end="33:22">(</operator><name pos:start="33:23" pos:end="33:28">i_bits</name> <operator pos:start="33:30" pos:end="33:31">&lt;&lt;</operator> <literal type="number" pos:start="33:33" pos:end="33:33">8</literal><operator pos:start="33:34" pos:end="33:34">)</operator> <operator pos:start="33:36" pos:end="33:36">+</operator> <operator pos:start="33:38" pos:end="33:38">*</operator><name pos:start="33:39" pos:end="33:41">src</name><operator pos:start="33:42" pos:end="33:43">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:30"><expr pos:start="35:13" pos:end="35:29"><name pos:start="35:13" pos:end="35:27">bytes_remaining</name><operator pos:start="35:28" pos:end="35:29">--</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:25"><expr pos:start="37:13" pos:end="37:24"><name pos:start="37:13" pos:end="37:19">i_shift</name> <operator pos:start="37:21" pos:end="37:22">+=</operator> <literal type="number" pos:start="37:24" pos:end="37:24">8</literal></expr>;</expr_stmt>



            <do pos:start="41:13" pos:end="47:75">do <block pos:start="41:16" pos:end="47:13">{<block_content pos:start="43:17" pos:end="45:29">

                <expr_stmt pos:start="43:17" pos:end="43:62"><expr pos:start="43:17" pos:end="43:61"><operator pos:start="43:17" pos:end="43:17">*</operator><name pos:start="43:18" pos:end="43:20">dst</name><operator pos:start="43:21" pos:end="43:22">++</operator> <operator pos:start="43:24" pos:end="43:24">=</operator> <name pos:start="43:26" pos:end="43:61"><name pos:start="43:26" pos:end="43:28">b64</name><index pos:start="43:29" pos:end="43:61">[<expr pos:start="43:30" pos:end="43:60"><operator pos:start="43:30" pos:end="43:30">(</operator><name pos:start="43:31" pos:end="43:36">i_bits</name> <operator pos:start="43:38" pos:end="43:39">&lt;&lt;</operator> <literal type="number" pos:start="43:41" pos:end="43:41">6</literal> <operator pos:start="43:43" pos:end="43:44">&gt;&gt;</operator> <name pos:start="43:46" pos:end="43:52">i_shift</name><operator pos:start="43:53" pos:end="43:53">)</operator> <operator pos:start="43:55" pos:end="43:55">&amp;</operator> <literal type="number" pos:start="43:57" pos:end="43:60">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="45:17" pos:end="45:29"><expr pos:start="45:17" pos:end="45:28"><name pos:start="45:17" pos:end="45:23">i_shift</name> <operator pos:start="45:25" pos:end="45:26">-=</operator> <literal type="number" pos:start="45:28" pos:end="45:28">6</literal></expr>;</expr_stmt>

            </block_content>}</block> while <condition pos:start="47:21" pos:end="47:74">(<expr pos:start="47:22" pos:end="47:73"><name pos:start="47:22" pos:end="47:28">i_shift</name> <operator pos:start="47:30" pos:end="47:30">&gt;</operator> <literal type="number" pos:start="47:32" pos:end="47:32">6</literal> <operator pos:start="47:34" pos:end="47:35">||</operator> <operator pos:start="47:37" pos:end="47:37">(</operator><name pos:start="47:38" pos:end="47:52">bytes_remaining</name> <operator pos:start="47:54" pos:end="47:55">==</operator> <literal type="number" pos:start="47:57" pos:end="47:57">0</literal> <operator pos:start="47:59" pos:end="47:60">&amp;&amp;</operator> <name pos:start="47:62" pos:end="47:68">i_shift</name> <operator pos:start="47:70" pos:end="47:70">&gt;</operator> <literal type="number" pos:start="47:72" pos:end="47:72">0</literal><operator pos:start="47:73" pos:end="47:73">)</operator></expr>)</condition>;</do>

        </block_content>}</block></while>

        <while pos:start="51:9" pos:end="53:25">while <condition pos:start="51:15" pos:end="51:31">(<expr pos:start="51:16" pos:end="51:30"><operator pos:start="51:16" pos:end="51:16">(</operator><name pos:start="51:17" pos:end="51:19">dst</name> <operator pos:start="51:21" pos:end="51:21">-</operator> <name pos:start="51:23" pos:end="51:25">ret</name><operator pos:start="51:26" pos:end="51:26">)</operator> <operator pos:start="51:28" pos:end="51:28">&amp;</operator> <literal type="number" pos:start="51:30" pos:end="51:30">3</literal></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:25"><block_content pos:start="53:13" pos:end="53:25">

            <expr_stmt pos:start="53:13" pos:end="53:25"><expr pos:start="53:13" pos:end="53:24"><operator pos:start="53:13" pos:end="53:13">*</operator><name pos:start="53:14" pos:end="53:16">dst</name><operator pos:start="53:17" pos:end="53:18">++</operator> <operator pos:start="53:20" pos:end="53:20">=</operator> <literal type="char" pos:start="53:22" pos:end="53:24">'='</literal></expr>;</expr_stmt></block_content></block></while>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:16"><expr pos:start="57:5" pos:end="57:15"><operator pos:start="57:5" pos:end="57:5">*</operator><name pos:start="57:6" pos:end="57:8">dst</name> <operator pos:start="57:10" pos:end="57:10">=</operator> <literal type="char" pos:start="57:12" pos:end="57:15">'\0'</literal></expr>;</expr_stmt>



    <return pos:start="61:5" pos:end="61:15">return <expr pos:start="61:12" pos:end="61:14"><name pos:start="61:12" pos:end="61:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
