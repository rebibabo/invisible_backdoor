<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23388.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">configure_accelerator</name><parameter_list pos:start="1:33" pos:end="1:38">(<parameter pos:start="1:34" pos:end="1:37"><decl pos:start="1:34" pos:end="1:37"><type pos:start="1:34" pos:end="1:37"><name pos:start="1:34" pos:end="1:37">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="123:1">{<block_content pos:start="5:5" pos:end="121:30">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">p</name> <init pos:start="5:19" pos:end="5:24">= <expr pos:start="5:21" pos:end="5:24"><name pos:start="5:21" pos:end="5:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:16"><name pos:start="7:10" pos:end="7:12">buf</name><index pos:start="7:13" pos:end="7:16">[<expr pos:start="7:14" pos:end="7:15"><literal type="number" pos:start="7:14" pos:end="7:15">10</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:14">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:26">accel_initialised</name> <init pos:start="11:28" pos:end="11:34">= <expr pos:start="11:30" pos:end="11:34"><name pos:start="11:30" pos:end="11:34">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:29"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">bool</name></type> <name pos:start="13:10" pos:end="13:20">init_failed</name> <init pos:start="13:22" pos:end="13:28">= <expr pos:start="13:24" pos:end="13:28"><name pos:start="13:24" pos:end="13:28">false</name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:51"><decl pos:start="17:5" pos:end="17:50"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">QemuOptsList</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:22">list</name> <init pos:start="17:24" pos:end="17:50">= <expr pos:start="17:26" pos:end="17:50"><call pos:start="17:26" pos:end="17:50"><name pos:start="17:26" pos:end="17:39">qemu_find_opts</name><argument_list pos:start="17:40" pos:end="17:50">(<argument pos:start="17:41" pos:end="17:49"><expr pos:start="17:41" pos:end="17:49"><literal type="string" pos:start="17:41" pos:end="17:49">"machine"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:35">(<expr pos:start="19:9" pos:end="19:34"><operator pos:start="19:9" pos:end="19:9">!</operator><call pos:start="19:10" pos:end="19:34"><name pos:start="19:10" pos:end="19:21">QTAILQ_EMPTY</name><argument_list pos:start="19:22" pos:end="19:34">(<argument pos:start="19:23" pos:end="19:33"><expr pos:start="19:23" pos:end="19:33"><operator pos:start="19:23" pos:end="19:23">&amp;</operator><name pos:start="19:24" pos:end="19:33"><name pos:start="19:24" pos:end="19:27">list</name><operator pos:start="19:28" pos:end="19:29">-&gt;</operator><name pos:start="19:30" pos:end="19:33">head</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:37" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:61">

        <expr_stmt pos:start="21:9" pos:end="21:61"><expr pos:start="21:9" pos:end="21:60"><name pos:start="21:9" pos:end="21:9">p</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <call pos:start="21:13" pos:end="21:60"><name pos:start="21:13" pos:end="21:24">qemu_opt_get</name><argument_list pos:start="21:25" pos:end="21:60">(<argument pos:start="21:26" pos:end="21:50"><expr pos:start="21:26" pos:end="21:50"><call pos:start="21:26" pos:end="21:50"><name pos:start="21:26" pos:end="21:37">QTAILQ_FIRST</name><argument_list pos:start="21:38" pos:end="21:50">(<argument pos:start="21:39" pos:end="21:49"><expr pos:start="21:39" pos:end="21:49"><operator pos:start="21:39" pos:end="21:39">&amp;</operator><name pos:start="21:40" pos:end="21:49"><name pos:start="21:40" pos:end="21:43">list</name><operator pos:start="21:44" pos:end="21:45">-&gt;</operator><name pos:start="21:46" pos:end="21:49">head</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="21:53" pos:end="21:59"><expr pos:start="21:53" pos:end="21:59"><literal type="string" pos:start="21:53" pos:end="21:59">"accel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:18">(<expr pos:start="27:9" pos:end="27:17"><name pos:start="27:9" pos:end="27:9">p</name> <operator pos:start="27:11" pos:end="27:12">==</operator> <name pos:start="27:14" pos:end="27:17">NULL</name></expr>)</condition> <block pos:start="27:20" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:18">

        <comment type="block" pos:start="29:9" pos:end="29:48">/* Use the default "accelerator", tcg */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:18"><expr pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:9">p</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <literal type="string" pos:start="31:13" pos:end="31:17">"tcg"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <while pos:start="37:5" pos:end="95:5">while <condition pos:start="37:11" pos:end="37:44">(<expr pos:start="37:12" pos:end="37:43"><operator pos:start="37:12" pos:end="37:12">!</operator><name pos:start="37:13" pos:end="37:29">accel_initialised</name> <operator pos:start="37:31" pos:end="37:32">&amp;&amp;</operator> <operator pos:start="37:34" pos:end="37:34">*</operator><name pos:start="37:35" pos:end="37:35">p</name> <operator pos:start="37:37" pos:end="37:38">!=</operator> <literal type="char" pos:start="37:40" pos:end="37:43">'\0'</literal></expr>)</condition> <block pos:start="37:46" pos:end="95:5">{<block_content pos:start="39:9" pos:end="93:9">

        <if_stmt pos:start="39:9" pos:end="43:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:22">(<expr pos:start="39:13" pos:end="39:21"><operator pos:start="39:13" pos:end="39:13">*</operator><name pos:start="39:14" pos:end="39:14">p</name> <operator pos:start="39:16" pos:end="39:17">==</operator> <literal type="char" pos:start="39:19" pos:end="39:21">':'</literal></expr>)</condition> <block pos:start="39:24" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:16">

            <expr_stmt pos:start="41:13" pos:end="41:16"><expr pos:start="41:13" pos:end="41:15"><name pos:start="41:13" pos:end="41:13">p</name><operator pos:start="41:14" pos:end="41:15">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:52"><expr pos:start="45:9" pos:end="45:51"><name pos:start="45:9" pos:end="45:9">p</name> <operator pos:start="45:11" pos:end="45:11">=</operator> <call pos:start="45:13" pos:end="45:51"><name pos:start="45:13" pos:end="45:24">get_opt_name</name><argument_list pos:start="45:25" pos:end="45:51">(<argument pos:start="45:26" pos:end="45:28"><expr pos:start="45:26" pos:end="45:28"><name pos:start="45:26" pos:end="45:28">buf</name></expr></argument>, <argument pos:start="45:31" pos:end="45:42"><expr pos:start="45:31" pos:end="45:42"><sizeof pos:start="45:31" pos:end="45:42">sizeof <argument_list pos:start="45:38" pos:end="45:42">(<argument pos:start="45:39" pos:end="45:41"><expr pos:start="45:39" pos:end="45:41"><name pos:start="45:39" pos:end="45:41">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="45:45" pos:end="45:45"><expr pos:start="45:45" pos:end="45:45"><name pos:start="45:45" pos:end="45:45">p</name></expr></argument>, <argument pos:start="45:48" pos:end="45:50"><expr pos:start="45:48" pos:end="45:50"><literal type="char" pos:start="45:48" pos:end="45:50">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="47:9" pos:end="87:9">for <control pos:start="47:13" pos:end="47:52">(<init pos:start="47:14" pos:end="47:19"><expr pos:start="47:14" pos:end="47:18"><name pos:start="47:14" pos:end="47:14">i</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <literal type="number" pos:start="47:18" pos:end="47:18">0</literal></expr>;</init> <condition pos:start="47:21" pos:end="47:47"><expr pos:start="47:21" pos:end="47:46"><name pos:start="47:21" pos:end="47:21">i</name> <operator pos:start="47:23" pos:end="47:23">&lt;</operator> <call pos:start="47:25" pos:end="47:46"><name pos:start="47:25" pos:end="47:34">ARRAY_SIZE</name><argument_list pos:start="47:35" pos:end="47:46">(<argument pos:start="47:36" pos:end="47:45"><expr pos:start="47:36" pos:end="47:45"><name pos:start="47:36" pos:end="47:45">accel_list</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="47:49" pos:end="47:51"><expr pos:start="47:49" pos:end="47:51"><name pos:start="47:49" pos:end="47:49">i</name><operator pos:start="47:50" pos:end="47:51">++</operator></expr></incr>)</control> <block pos:start="47:54" pos:end="87:9">{<block_content pos:start="49:13" pos:end="85:13">

            <if_stmt pos:start="49:13" pos:end="85:13"><if pos:start="49:13" pos:end="85:13">if <condition pos:start="49:16" pos:end="49:57">(<expr pos:start="49:17" pos:end="49:56"><call pos:start="49:17" pos:end="49:51"><name pos:start="49:17" pos:end="49:22">strcmp</name><argument_list pos:start="49:23" pos:end="49:51">(<argument pos:start="49:24" pos:end="49:45"><expr pos:start="49:24" pos:end="49:45"><name pos:start="49:24" pos:end="49:36"><name pos:start="49:24" pos:end="49:33">accel_list</name><index pos:start="49:34" pos:end="49:36">[<expr pos:start="49:35" pos:end="49:35"><name pos:start="49:35" pos:end="49:35">i</name></expr>]</index></name><operator pos:start="49:37" pos:end="49:37">.</operator><name pos:start="49:38" pos:end="49:45">opt_name</name></expr></argument>, <argument pos:start="49:48" pos:end="49:50"><expr pos:start="49:48" pos:end="49:50"><name pos:start="49:48" pos:end="49:50">buf</name></expr></argument>)</argument_list></call> <operator pos:start="49:53" pos:end="49:54">==</operator> <literal type="number" pos:start="49:56" pos:end="49:56">0</literal></expr>)</condition> <block pos:start="49:59" pos:end="85:13">{<block_content pos:start="51:17" pos:end="83:22">

                <if_stmt pos:start="51:17" pos:end="59:17"><if pos:start="51:17" pos:end="59:17">if <condition pos:start="51:20" pos:end="51:47">(<expr pos:start="51:21" pos:end="51:46"><operator pos:start="51:21" pos:end="51:21">!</operator><name pos:start="51:22" pos:end="51:34"><name pos:start="51:22" pos:end="51:31">accel_list</name><index pos:start="51:32" pos:end="51:34">[<expr pos:start="51:33" pos:end="51:33"><name pos:start="51:33" pos:end="51:33">i</name></expr>]</index></name><operator pos:start="51:35" pos:end="51:35">.</operator><call pos:start="51:36" pos:end="51:46"><name pos:start="51:36" pos:end="51:44">available</name><argument_list pos:start="51:45" pos:end="51:46">()</argument_list></call></expr>)</condition> <block pos:start="51:49" pos:end="59:17">{<block_content pos:start="53:21" pos:end="57:29">

                    <expr_stmt pos:start="53:21" pos:end="55:47"><expr pos:start="53:21" pos:end="55:46"><call pos:start="53:21" pos:end="55:46"><name pos:start="53:21" pos:end="53:26">printf</name><argument_list pos:start="53:27" pos:end="55:46">(<argument pos:start="53:28" pos:end="53:63"><expr pos:start="53:28" pos:end="53:63"><literal type="string" pos:start="53:28" pos:end="53:63">"%s not supported for this target\n"</literal></expr></argument>,

                           <argument pos:start="55:28" pos:end="55:45"><expr pos:start="55:28" pos:end="55:45"><name pos:start="55:28" pos:end="55:40"><name pos:start="55:28" pos:end="55:37">accel_list</name><index pos:start="55:38" pos:end="55:40">[<expr pos:start="55:39" pos:end="55:39"><name pos:start="55:39" pos:end="55:39">i</name></expr>]</index></name><operator pos:start="55:41" pos:end="55:41">.</operator><name pos:start="55:42" pos:end="55:45">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <continue pos:start="57:21" pos:end="57:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="61:17" pos:end="61:48"><expr pos:start="61:17" pos:end="61:47"><operator pos:start="61:17" pos:end="61:17">*</operator><operator pos:start="61:18" pos:end="61:18">(</operator><name pos:start="61:19" pos:end="61:31"><name pos:start="61:19" pos:end="61:28">accel_list</name><index pos:start="61:29" pos:end="61:31">[<expr pos:start="61:30" pos:end="61:30"><name pos:start="61:30" pos:end="61:30">i</name></expr>]</index></name><operator pos:start="61:32" pos:end="61:32">.</operator><name pos:start="61:33" pos:end="61:39">allowed</name><operator pos:start="61:40" pos:end="61:40">)</operator> <operator pos:start="61:42" pos:end="61:42">=</operator> <name pos:start="61:44" pos:end="61:47">true</name></expr>;</expr_stmt>

                <expr_stmt pos:start="63:17" pos:end="63:43"><expr pos:start="63:17" pos:end="63:42"><name pos:start="63:17" pos:end="63:19">ret</name> <operator pos:start="63:21" pos:end="63:21">=</operator> <name pos:start="63:23" pos:end="63:35"><name pos:start="63:23" pos:end="63:32">accel_list</name><index pos:start="63:33" pos:end="63:35">[<expr pos:start="63:34" pos:end="63:34"><name pos:start="63:34" pos:end="63:34">i</name></expr>]</index></name><operator pos:start="63:36" pos:end="63:36">.</operator><call pos:start="63:37" pos:end="63:42"><name pos:start="63:37" pos:end="63:40">init</name><argument_list pos:start="63:41" pos:end="63:42">()</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="65:17" pos:end="81:17"><if pos:start="65:17" pos:end="77:17">if <condition pos:start="65:20" pos:end="65:28">(<expr pos:start="65:21" pos:end="65:27"><name pos:start="65:21" pos:end="65:23">ret</name> <operator pos:start="65:25" pos:end="65:25">&lt;</operator> <literal type="number" pos:start="65:27" pos:end="65:27">0</literal></expr>)</condition> <block pos:start="65:30" pos:end="77:17">{<block_content pos:start="67:21" pos:end="75:53">

                    <expr_stmt pos:start="67:21" pos:end="67:39"><expr pos:start="67:21" pos:end="67:38"><name pos:start="67:21" pos:end="67:31">init_failed</name> <operator pos:start="67:33" pos:end="67:33">=</operator> <name pos:start="67:35" pos:end="67:38">true</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="69:21" pos:end="73:44"><expr pos:start="69:21" pos:end="73:43"><call pos:start="69:21" pos:end="73:43"><name pos:start="69:21" pos:end="69:27">fprintf</name><argument_list pos:start="69:28" pos:end="73:43">(<argument pos:start="69:29" pos:end="69:34"><expr pos:start="69:29" pos:end="69:34"><name pos:start="69:29" pos:end="69:34">stderr</name></expr></argument>, <argument pos:start="69:37" pos:end="69:67"><expr pos:start="69:37" pos:end="69:67"><literal type="string" pos:start="69:37" pos:end="69:67">"failed to initialize %s: %s\n"</literal></expr></argument>,

                            <argument pos:start="71:29" pos:end="71:46"><expr pos:start="71:29" pos:end="71:46"><name pos:start="71:29" pos:end="71:41"><name pos:start="71:29" pos:end="71:38">accel_list</name><index pos:start="71:39" pos:end="71:41">[<expr pos:start="71:40" pos:end="71:40"><name pos:start="71:40" pos:end="71:40">i</name></expr>]</index></name><operator pos:start="71:42" pos:end="71:42">.</operator><name pos:start="71:43" pos:end="71:46">name</name></expr></argument>,

                            <argument pos:start="73:29" pos:end="73:42"><expr pos:start="73:29" pos:end="73:42"><call pos:start="73:29" pos:end="73:42"><name pos:start="73:29" pos:end="73:36">strerror</name><argument_list pos:start="73:37" pos:end="73:42">(<argument pos:start="73:38" pos:end="73:41"><expr pos:start="73:38" pos:end="73:41"><operator pos:start="73:38" pos:end="73:38">-</operator><name pos:start="73:39" pos:end="73:41">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="75:21" pos:end="75:53"><expr pos:start="75:21" pos:end="75:52"><operator pos:start="75:21" pos:end="75:21">*</operator><operator pos:start="75:22" pos:end="75:22">(</operator><name pos:start="75:23" pos:end="75:35"><name pos:start="75:23" pos:end="75:32">accel_list</name><index pos:start="75:33" pos:end="75:35">[<expr pos:start="75:34" pos:end="75:34"><name pos:start="75:34" pos:end="75:34">i</name></expr>]</index></name><operator pos:start="75:36" pos:end="75:36">.</operator><name pos:start="75:37" pos:end="75:43">allowed</name><operator pos:start="75:44" pos:end="75:44">)</operator> <operator pos:start="75:46" pos:end="75:46">=</operator> <name pos:start="75:48" pos:end="75:52">false</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="77:19" pos:end="81:17">else <block pos:start="77:24" pos:end="81:17">{<block_content pos:start="79:21" pos:end="79:45">

                    <expr_stmt pos:start="79:21" pos:end="79:45"><expr pos:start="79:21" pos:end="79:44"><name pos:start="79:21" pos:end="79:37">accel_initialised</name> <operator pos:start="79:39" pos:end="79:39">=</operator> <name pos:start="79:41" pos:end="79:44">true</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="83:17" pos:end="83:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="89:9" pos:end="93:9"><if pos:start="89:9" pos:end="93:9">if <condition pos:start="89:12" pos:end="89:40">(<expr pos:start="89:13" pos:end="89:39"><name pos:start="89:13" pos:end="89:13">i</name> <operator pos:start="89:15" pos:end="89:16">==</operator> <call pos:start="89:18" pos:end="89:39"><name pos:start="89:18" pos:end="89:27">ARRAY_SIZE</name><argument_list pos:start="89:28" pos:end="89:39">(<argument pos:start="89:29" pos:end="89:38"><expr pos:start="89:29" pos:end="89:38"><name pos:start="89:29" pos:end="89:38">accel_list</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:42" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:73">

            <expr_stmt pos:start="91:13" pos:end="91:73"><expr pos:start="91:13" pos:end="91:72"><call pos:start="91:13" pos:end="91:72"><name pos:start="91:13" pos:end="91:19">fprintf</name><argument_list pos:start="91:20" pos:end="91:72">(<argument pos:start="91:21" pos:end="91:26"><expr pos:start="91:21" pos:end="91:26"><name pos:start="91:21" pos:end="91:26">stderr</name></expr></argument>, <argument pos:start="91:29" pos:end="91:66"><expr pos:start="91:29" pos:end="91:66"><literal type="string" pos:start="91:29" pos:end="91:66">"\"%s\" accelerator does not exist.\n"</literal></expr></argument>, <argument pos:start="91:69" pos:end="91:71"><expr pos:start="91:69" pos:end="91:71"><name pos:start="91:69" pos:end="91:71">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="99:5" pos:end="109:5"><if pos:start="99:5" pos:end="109:5">if <condition pos:start="99:8" pos:end="99:27">(<expr pos:start="99:9" pos:end="99:26"><operator pos:start="99:9" pos:end="99:9">!</operator><name pos:start="99:10" pos:end="99:26">accel_initialised</name></expr>)</condition> <block pos:start="99:29" pos:end="109:5">{<block_content pos:start="101:9" pos:end="107:16">

        <if_stmt pos:start="101:9" pos:end="105:9"><if pos:start="101:9" pos:end="105:9">if <condition pos:start="101:12" pos:end="101:25">(<expr pos:start="101:13" pos:end="101:24"><operator pos:start="101:13" pos:end="101:13">!</operator><name pos:start="101:14" pos:end="101:24">init_failed</name></expr>)</condition> <block pos:start="101:27" pos:end="105:9">{<block_content pos:start="103:13" pos:end="103:55">

            <expr_stmt pos:start="103:13" pos:end="103:55"><expr pos:start="103:13" pos:end="103:54"><call pos:start="103:13" pos:end="103:54"><name pos:start="103:13" pos:end="103:19">fprintf</name><argument_list pos:start="103:20" pos:end="103:54">(<argument pos:start="103:21" pos:end="103:26"><expr pos:start="103:21" pos:end="103:26"><name pos:start="103:21" pos:end="103:26">stderr</name></expr></argument>, <argument pos:start="103:29" pos:end="103:53"><expr pos:start="103:29" pos:end="103:53"><literal type="string" pos:start="103:29" pos:end="103:53">"No accelerator found!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:16"><expr pos:start="107:9" pos:end="107:15"><call pos:start="107:9" pos:end="107:15"><name pos:start="107:9" pos:end="107:12">exit</name><argument_list pos:start="107:13" pos:end="107:15">(<argument pos:start="107:14" pos:end="107:14"><expr pos:start="107:14" pos:end="107:14"><literal type="number" pos:start="107:14" pos:end="107:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="113:5" pos:end="117:5"><if pos:start="113:5" pos:end="117:5">if <condition pos:start="113:8" pos:end="113:20">(<expr pos:start="113:9" pos:end="113:19"><name pos:start="113:9" pos:end="113:19">init_failed</name></expr>)</condition> <block pos:start="113:22" pos:end="117:5">{<block_content pos:start="115:9" pos:end="115:73">

        <expr_stmt pos:start="115:9" pos:end="115:73"><expr pos:start="115:9" pos:end="115:72"><call pos:start="115:9" pos:end="115:72"><name pos:start="115:9" pos:end="115:15">fprintf</name><argument_list pos:start="115:16" pos:end="115:72">(<argument pos:start="115:17" pos:end="115:22"><expr pos:start="115:17" pos:end="115:22"><name pos:start="115:17" pos:end="115:22">stderr</name></expr></argument>, <argument pos:start="115:25" pos:end="115:51"><expr pos:start="115:25" pos:end="115:51"><literal type="string" pos:start="115:25" pos:end="115:51">"Back to %s accelerator.\n"</literal></expr></argument>, <argument pos:start="115:54" pos:end="115:71"><expr pos:start="115:54" pos:end="115:71"><name pos:start="115:54" pos:end="115:66"><name pos:start="115:54" pos:end="115:63">accel_list</name><index pos:start="115:64" pos:end="115:66">[<expr pos:start="115:65" pos:end="115:65"><name pos:start="115:65" pos:end="115:65">i</name></expr>]</index></name><operator pos:start="115:67" pos:end="115:67">.</operator><name pos:start="115:68" pos:end="115:71">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="121:5" pos:end="121:30">return <expr pos:start="121:12" pos:end="121:29"><operator pos:start="121:12" pos:end="121:12">!</operator><name pos:start="121:13" pos:end="121:29">accel_initialised</name></expr>;</return>

</block_content>}</block></function>
</unit>
