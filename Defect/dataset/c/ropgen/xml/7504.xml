<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7504.c" pos:tabs="8"><function pos:start="1:1" pos:end="199:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">cmos_init</name><parameter_list pos:start="1:22" pos:end="1:89">(<parameter pos:start="1:23" pos:end="1:34"><decl pos:start="1:23" pos:end="1:34"><type pos:start="1:23" pos:end="1:34"><name pos:start="1:23" pos:end="1:25">int</name></type> <name pos:start="1:27" pos:end="1:34">ram_size</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:59"><decl pos:start="1:37" pos:end="1:59"><type pos:start="1:37" pos:end="1:59"><specifier pos:start="1:37" pos:end="1:41">const</specifier> <name pos:start="1:43" pos:end="1:46">char</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:59">boot_device</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:88"><decl pos:start="1:62" pos:end="1:88"><type pos:start="1:62" pos:end="1:88"><name pos:start="1:62" pos:end="1:77">BlockDriverState</name> <modifier pos:start="1:79" pos:end="1:79">*</modifier><modifier pos:start="1:80" pos:end="1:80">*</modifier></type><name pos:start="1:81" pos:end="1:88">hd_table</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="199:1">{<block_content pos:start="5:5" pos:end="197:33">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">RTCState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:27">= <expr pos:start="5:19" pos:end="5:27"><name pos:start="5:19" pos:end="5:27">rtc_state</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">fd0</name></decl>, <decl pos:start="9:14" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:16">fd1</name></decl>, <decl pos:start="9:19" pos:end="9:20"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:19" pos:end="9:20">nb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:66">/* various important CMOS locations needed by PC/Bochs bios */</comment>



    <comment type="block" pos:start="19:5" pos:end="19:21">/* memory size */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:14"><expr pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:7">val</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <literal type="number" pos:start="21:11" pos:end="21:13">640</literal></expr>;</expr_stmt> <comment type="block" pos:start="21:16" pos:end="21:37">/* base memory in K */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:33"><expr pos:start="23:5" pos:end="23:32"><call pos:start="23:5" pos:end="23:32"><name pos:start="23:5" pos:end="23:18">rtc_set_memory</name><argument_list pos:start="23:19" pos:end="23:32">(<argument pos:start="23:20" pos:end="23:20"><expr pos:start="23:20" pos:end="23:20"><name pos:start="23:20" pos:end="23:20">s</name></expr></argument>, <argument pos:start="23:23" pos:end="23:26"><expr pos:start="23:23" pos:end="23:26"><literal type="number" pos:start="23:23" pos:end="23:26">0x15</literal></expr></argument>, <argument pos:start="23:29" pos:end="23:31"><expr pos:start="23:29" pos:end="23:31"><name pos:start="23:29" pos:end="23:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:38"><expr pos:start="25:5" pos:end="25:37"><call pos:start="25:5" pos:end="25:37"><name pos:start="25:5" pos:end="25:18">rtc_set_memory</name><argument_list pos:start="25:19" pos:end="25:37">(<argument pos:start="25:20" pos:end="25:20"><expr pos:start="25:20" pos:end="25:20"><name pos:start="25:20" pos:end="25:20">s</name></expr></argument>, <argument pos:start="25:23" pos:end="25:26"><expr pos:start="25:23" pos:end="25:26"><literal type="number" pos:start="25:23" pos:end="25:26">0x16</literal></expr></argument>, <argument pos:start="25:29" pos:end="25:36"><expr pos:start="25:29" pos:end="25:36"><name pos:start="25:29" pos:end="25:31">val</name> <operator pos:start="25:33" pos:end="25:34">&gt;&gt;</operator> <literal type="number" pos:start="25:36" pos:end="25:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:35"><expr pos:start="29:5" pos:end="29:34"><name pos:start="29:5" pos:end="29:7">val</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <operator pos:start="29:11" pos:end="29:11">(</operator><name pos:start="29:12" pos:end="29:19">ram_size</name> <operator pos:start="29:21" pos:end="29:21">/</operator> <literal type="number" pos:start="29:23" pos:end="29:26">1024</literal><operator pos:start="29:27" pos:end="29:27">)</operator> <operator pos:start="29:29" pos:end="29:29">-</operator> <literal type="number" pos:start="29:31" pos:end="29:34">1024</literal></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="33:20"><if pos:start="31:5" pos:end="33:20">if <condition pos:start="31:8" pos:end="31:20">(<expr pos:start="31:9" pos:end="31:19"><name pos:start="31:9" pos:end="31:11">val</name> <operator pos:start="31:13" pos:end="31:13">&gt;</operator> <literal type="number" pos:start="31:15" pos:end="31:19">65535</literal></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:20"><block_content pos:start="33:9" pos:end="33:20">

        <expr_stmt pos:start="33:9" pos:end="33:20"><expr pos:start="33:9" pos:end="33:19"><name pos:start="33:9" pos:end="33:11">val</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <literal type="number" pos:start="33:15" pos:end="33:19">65535</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:33"><expr pos:start="35:5" pos:end="35:32"><call pos:start="35:5" pos:end="35:32"><name pos:start="35:5" pos:end="35:18">rtc_set_memory</name><argument_list pos:start="35:19" pos:end="35:32">(<argument pos:start="35:20" pos:end="35:20"><expr pos:start="35:20" pos:end="35:20"><name pos:start="35:20" pos:end="35:20">s</name></expr></argument>, <argument pos:start="35:23" pos:end="35:26"><expr pos:start="35:23" pos:end="35:26"><literal type="number" pos:start="35:23" pos:end="35:26">0x17</literal></expr></argument>, <argument pos:start="35:29" pos:end="35:31"><expr pos:start="35:29" pos:end="35:31"><name pos:start="35:29" pos:end="35:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:38"><expr pos:start="37:5" pos:end="37:37"><call pos:start="37:5" pos:end="37:37"><name pos:start="37:5" pos:end="37:18">rtc_set_memory</name><argument_list pos:start="37:19" pos:end="37:37">(<argument pos:start="37:20" pos:end="37:20"><expr pos:start="37:20" pos:end="37:20"><name pos:start="37:20" pos:end="37:20">s</name></expr></argument>, <argument pos:start="37:23" pos:end="37:26"><expr pos:start="37:23" pos:end="37:26"><literal type="number" pos:start="37:23" pos:end="37:26">0x18</literal></expr></argument>, <argument pos:start="37:29" pos:end="37:36"><expr pos:start="37:29" pos:end="37:36"><name pos:start="37:29" pos:end="37:31">val</name> <operator pos:start="37:33" pos:end="37:34">&gt;&gt;</operator> <literal type="number" pos:start="37:36" pos:end="37:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:33"><expr pos:start="39:5" pos:end="39:32"><call pos:start="39:5" pos:end="39:32"><name pos:start="39:5" pos:end="39:18">rtc_set_memory</name><argument_list pos:start="39:19" pos:end="39:32">(<argument pos:start="39:20" pos:end="39:20"><expr pos:start="39:20" pos:end="39:20"><name pos:start="39:20" pos:end="39:20">s</name></expr></argument>, <argument pos:start="39:23" pos:end="39:26"><expr pos:start="39:23" pos:end="39:26"><literal type="number" pos:start="39:23" pos:end="39:26">0x30</literal></expr></argument>, <argument pos:start="39:29" pos:end="39:31"><expr pos:start="39:29" pos:end="39:31"><name pos:start="39:29" pos:end="39:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:38"><expr pos:start="41:5" pos:end="41:37"><call pos:start="41:5" pos:end="41:37"><name pos:start="41:5" pos:end="41:18">rtc_set_memory</name><argument_list pos:start="41:19" pos:end="41:37">(<argument pos:start="41:20" pos:end="41:20"><expr pos:start="41:20" pos:end="41:20"><name pos:start="41:20" pos:end="41:20">s</name></expr></argument>, <argument pos:start="41:23" pos:end="41:26"><expr pos:start="41:23" pos:end="41:26"><literal type="number" pos:start="41:23" pos:end="41:26">0x31</literal></expr></argument>, <argument pos:start="41:29" pos:end="41:36"><expr pos:start="41:29" pos:end="41:36"><name pos:start="41:29" pos:end="41:31">val</name> <operator pos:start="41:33" pos:end="41:34">&gt;&gt;</operator> <literal type="number" pos:start="41:36" pos:end="41:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="45:5" pos:end="51:16"><if pos:start="45:5" pos:end="47:64">if <condition pos:start="45:8" pos:end="45:38">(<expr pos:start="45:9" pos:end="45:37"><name pos:start="45:9" pos:end="45:16">ram_size</name> <operator pos:start="45:18" pos:end="45:18">&gt;</operator> <operator pos:start="45:20" pos:end="45:20">(</operator><literal type="number" pos:start="45:21" pos:end="45:22">16</literal> <operator pos:start="45:24" pos:end="45:24">*</operator> <literal type="number" pos:start="45:26" pos:end="45:29">1024</literal> <operator pos:start="45:31" pos:end="45:31">*</operator> <literal type="number" pos:start="45:33" pos:end="45:36">1024</literal><operator pos:start="45:37" pos:end="45:37">)</operator></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:64"><block_content pos:start="47:9" pos:end="47:64">

        <expr_stmt pos:start="47:9" pos:end="47:64"><expr pos:start="47:9" pos:end="47:63"><name pos:start="47:9" pos:end="47:11">val</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <operator pos:start="47:15" pos:end="47:15">(</operator><name pos:start="47:16" pos:end="47:23">ram_size</name> <operator pos:start="47:25" pos:end="47:25">/</operator> <literal type="number" pos:start="47:27" pos:end="47:31">65536</literal><operator pos:start="47:32" pos:end="47:32">)</operator> <operator pos:start="47:34" pos:end="47:34">-</operator> <operator pos:start="47:36" pos:end="47:36">(</operator><operator pos:start="47:37" pos:end="47:37">(</operator><literal type="number" pos:start="47:38" pos:end="47:39">16</literal> <operator pos:start="47:41" pos:end="47:41">*</operator> <literal type="number" pos:start="47:43" pos:end="47:46">1024</literal> <operator pos:start="47:48" pos:end="47:48">*</operator> <literal type="number" pos:start="47:50" pos:end="47:53">1024</literal><operator pos:start="47:54" pos:end="47:54">)</operator> <operator pos:start="47:56" pos:end="47:56">/</operator> <literal type="number" pos:start="47:58" pos:end="47:62">65536</literal><operator pos:start="47:63" pos:end="47:63">)</operator></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="49:5" pos:end="51:16">else<block type="pseudo" pos:start="51:9" pos:end="51:16"><block_content pos:start="51:9" pos:end="51:16">

        <expr_stmt pos:start="51:9" pos:end="51:16"><expr pos:start="51:9" pos:end="51:15"><name pos:start="51:9" pos:end="51:11">val</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <literal type="number" pos:start="51:15" pos:end="51:15">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="53:5" pos:end="55:20"><if pos:start="53:5" pos:end="55:20">if <condition pos:start="53:8" pos:end="53:20">(<expr pos:start="53:9" pos:end="53:19"><name pos:start="53:9" pos:end="53:11">val</name> <operator pos:start="53:13" pos:end="53:13">&gt;</operator> <literal type="number" pos:start="53:15" pos:end="53:19">65535</literal></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:20"><block_content pos:start="55:9" pos:end="55:20">

        <expr_stmt pos:start="55:9" pos:end="55:20"><expr pos:start="55:9" pos:end="55:19"><name pos:start="55:9" pos:end="55:11">val</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <literal type="number" pos:start="55:15" pos:end="55:19">65535</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:33"><expr pos:start="57:5" pos:end="57:32"><call pos:start="57:5" pos:end="57:32"><name pos:start="57:5" pos:end="57:18">rtc_set_memory</name><argument_list pos:start="57:19" pos:end="57:32">(<argument pos:start="57:20" pos:end="57:20"><expr pos:start="57:20" pos:end="57:20"><name pos:start="57:20" pos:end="57:20">s</name></expr></argument>, <argument pos:start="57:23" pos:end="57:26"><expr pos:start="57:23" pos:end="57:26"><literal type="number" pos:start="57:23" pos:end="57:26">0x34</literal></expr></argument>, <argument pos:start="57:29" pos:end="57:31"><expr pos:start="57:29" pos:end="57:31"><name pos:start="57:29" pos:end="57:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:38"><expr pos:start="59:5" pos:end="59:37"><call pos:start="59:5" pos:end="59:37"><name pos:start="59:5" pos:end="59:18">rtc_set_memory</name><argument_list pos:start="59:19" pos:end="59:37">(<argument pos:start="59:20" pos:end="59:20"><expr pos:start="59:20" pos:end="59:20"><name pos:start="59:20" pos:end="59:20">s</name></expr></argument>, <argument pos:start="59:23" pos:end="59:26"><expr pos:start="59:23" pos:end="59:26"><literal type="number" pos:start="59:23" pos:end="59:26">0x35</literal></expr></argument>, <argument pos:start="59:29" pos:end="59:36"><expr pos:start="59:29" pos:end="59:36"><name pos:start="59:29" pos:end="59:31">val</name> <operator pos:start="59:33" pos:end="59:34">&gt;&gt;</operator> <literal type="number" pos:start="59:36" pos:end="59:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:75">/* set boot devices, and disable floppy signature check if requested */</comment>

    <expr_stmt pos:start="65:5" pos:end="69:49"><expr pos:start="65:5" pos:end="69:48"><call pos:start="65:5" pos:end="69:48"><name pos:start="65:5" pos:end="65:18">rtc_set_memory</name><argument_list pos:start="65:19" pos:end="69:48">(<argument pos:start="65:20" pos:end="65:20"><expr pos:start="65:20" pos:end="65:20"><name pos:start="65:20" pos:end="65:20">s</name></expr></argument>, <argument pos:start="65:23" pos:end="65:26"><expr pos:start="65:23" pos:end="65:26"><literal type="number" pos:start="65:23" pos:end="65:26">0x3d</literal></expr></argument>,

            <argument pos:start="67:13" pos:end="69:46"><expr pos:start="67:13" pos:end="69:46"><call pos:start="67:13" pos:end="67:46"><name pos:start="67:13" pos:end="67:30">boot_device2nibble</name><argument_list pos:start="67:31" pos:end="67:46">(<argument pos:start="67:32" pos:end="67:45"><expr pos:start="67:32" pos:end="67:45"><name pos:start="67:32" pos:end="67:45"><name pos:start="67:32" pos:end="67:42">boot_device</name><index pos:start="67:43" pos:end="67:45">[<expr pos:start="67:44" pos:end="67:44"><literal type="number" pos:start="67:44" pos:end="67:44">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="67:48" pos:end="67:49">&lt;&lt;</operator> <literal type="number" pos:start="67:51" pos:end="67:51">4</literal> <operator pos:start="67:53" pos:end="67:53">|</operator>

            <call pos:start="69:13" pos:end="69:46"><name pos:start="69:13" pos:end="69:30">boot_device2nibble</name><argument_list pos:start="69:31" pos:end="69:46">(<argument pos:start="69:32" pos:end="69:45"><expr pos:start="69:32" pos:end="69:45"><name pos:start="69:32" pos:end="69:45"><name pos:start="69:32" pos:end="69:42">boot_device</name><index pos:start="69:43" pos:end="69:45">[<expr pos:start="69:44" pos:end="69:44"><literal type="number" pos:start="69:44" pos:end="69:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="73:81"><expr pos:start="71:5" pos:end="73:80"><call pos:start="71:5" pos:end="73:80"><name pos:start="71:5" pos:end="71:18">rtc_set_memory</name><argument_list pos:start="71:19" pos:end="73:80">(<argument pos:start="71:20" pos:end="71:20"><expr pos:start="71:20" pos:end="71:20"><name pos:start="71:20" pos:end="71:20">s</name></expr></argument>, <argument pos:start="71:23" pos:end="71:26"><expr pos:start="71:23" pos:end="71:26"><literal type="number" pos:start="71:23" pos:end="71:26">0x38</literal></expr></argument>,

            <argument pos:start="73:13" pos:end="73:79"><expr pos:start="73:13" pos:end="73:79"><call pos:start="73:13" pos:end="73:46"><name pos:start="73:13" pos:end="73:30">boot_device2nibble</name><argument_list pos:start="73:31" pos:end="73:46">(<argument pos:start="73:32" pos:end="73:45"><expr pos:start="73:32" pos:end="73:45"><name pos:start="73:32" pos:end="73:45"><name pos:start="73:32" pos:end="73:42">boot_device</name><index pos:start="73:43" pos:end="73:45">[<expr pos:start="73:44" pos:end="73:44"><literal type="number" pos:start="73:44" pos:end="73:44">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="73:48" pos:end="73:49">&lt;&lt;</operator> <literal type="number" pos:start="73:51" pos:end="73:51">4</literal> <operator pos:start="73:53" pos:end="73:53">|</operator> <operator pos:start="73:55" pos:end="73:55">(</operator><ternary pos:start="73:56" pos:end="73:78"><condition pos:start="73:56" pos:end="73:67"><expr pos:start="73:56" pos:end="73:65"><name pos:start="73:56" pos:end="73:65">fd_bootchk</name></expr> ?</condition><then pos:start="73:70" pos:end="73:72">  <expr pos:start="73:70" pos:end="73:72"><literal type="number" pos:start="73:70" pos:end="73:72">0x0</literal></expr> </then><else pos:start="73:74" pos:end="73:78">: <expr pos:start="73:76" pos:end="73:78"><literal type="number" pos:start="73:76" pos:end="73:78">0x1</literal></expr></else></ternary><operator pos:start="73:79" pos:end="73:79">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:21">/* floppy type */</comment>



    <expr_stmt pos:start="81:5" pos:end="81:54"><expr pos:start="81:5" pos:end="81:53"><name pos:start="81:5" pos:end="81:7">fd0</name> <operator pos:start="81:9" pos:end="81:9">=</operator> <call pos:start="81:11" pos:end="81:53"><name pos:start="81:11" pos:end="81:31">fdctrl_get_drive_type</name><argument_list pos:start="81:32" pos:end="81:53">(<argument pos:start="81:33" pos:end="81:49"><expr pos:start="81:33" pos:end="81:49"><name pos:start="81:33" pos:end="81:49">floppy_controller</name></expr></argument>, <argument pos:start="81:52" pos:end="81:52"><expr pos:start="81:52" pos:end="81:52"><literal type="number" pos:start="81:52" pos:end="81:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:54"><expr pos:start="83:5" pos:end="83:53"><name pos:start="83:5" pos:end="83:7">fd1</name> <operator pos:start="83:9" pos:end="83:9">=</operator> <call pos:start="83:11" pos:end="83:53"><name pos:start="83:11" pos:end="83:31">fdctrl_get_drive_type</name><argument_list pos:start="83:32" pos:end="83:53">(<argument pos:start="83:33" pos:end="83:49"><expr pos:start="83:33" pos:end="83:49"><name pos:start="83:33" pos:end="83:49">floppy_controller</name></expr></argument>, <argument pos:start="83:52" pos:end="83:52"><expr pos:start="83:52" pos:end="83:52"><literal type="number" pos:start="83:52" pos:end="83:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:75"><expr pos:start="87:5" pos:end="87:74"><name pos:start="87:5" pos:end="87:7">val</name> <operator pos:start="87:9" pos:end="87:9">=</operator> <operator pos:start="87:11" pos:end="87:11">(</operator><call pos:start="87:12" pos:end="87:38"><name pos:start="87:12" pos:end="87:33">cmos_get_fd_drive_type</name><argument_list pos:start="87:34" pos:end="87:38">(<argument pos:start="87:35" pos:end="87:37"><expr pos:start="87:35" pos:end="87:37"><name pos:start="87:35" pos:end="87:37">fd0</name></expr></argument>)</argument_list></call> <operator pos:start="87:40" pos:end="87:41">&lt;&lt;</operator> <literal type="number" pos:start="87:43" pos:end="87:43">4</literal><operator pos:start="87:44" pos:end="87:44">)</operator> <operator pos:start="87:46" pos:end="87:46">|</operator> <call pos:start="87:48" pos:end="87:74"><name pos:start="87:48" pos:end="87:69">cmos_get_fd_drive_type</name><argument_list pos:start="87:70" pos:end="87:74">(<argument pos:start="87:71" pos:end="87:73"><expr pos:start="87:71" pos:end="87:73"><name pos:start="87:71" pos:end="87:73">fd1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:33"><expr pos:start="89:5" pos:end="89:32"><call pos:start="89:5" pos:end="89:32"><name pos:start="89:5" pos:end="89:18">rtc_set_memory</name><argument_list pos:start="89:19" pos:end="89:32">(<argument pos:start="89:20" pos:end="89:20"><expr pos:start="89:20" pos:end="89:20"><name pos:start="89:20" pos:end="89:20">s</name></expr></argument>, <argument pos:start="89:23" pos:end="89:26"><expr pos:start="89:23" pos:end="89:26"><literal type="number" pos:start="89:23" pos:end="89:26">0x10</literal></expr></argument>, <argument pos:start="89:29" pos:end="89:31"><expr pos:start="89:29" pos:end="89:31"><name pos:start="89:29" pos:end="89:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:12"><expr pos:start="93:5" pos:end="93:11"><name pos:start="93:5" pos:end="93:7">val</name> <operator pos:start="93:9" pos:end="93:9">=</operator> <literal type="number" pos:start="93:11" pos:end="93:11">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:11"><expr pos:start="95:5" pos:end="95:10"><name pos:start="95:5" pos:end="95:6">nb</name> <operator pos:start="95:8" pos:end="95:8">=</operator> <literal type="number" pos:start="95:10" pos:end="95:10">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="99:13"><if pos:start="97:5" pos:end="99:13">if <condition pos:start="97:8" pos:end="97:16">(<expr pos:start="97:9" pos:end="97:15"><name pos:start="97:9" pos:end="97:11">fd0</name> <operator pos:start="97:13" pos:end="97:13">&lt;</operator> <literal type="number" pos:start="97:15" pos:end="97:15">3</literal></expr>)</condition><block type="pseudo" pos:start="99:9" pos:end="99:13"><block_content pos:start="99:9" pos:end="99:13">

        <expr_stmt pos:start="99:9" pos:end="99:13"><expr pos:start="99:9" pos:end="99:12"><name pos:start="99:9" pos:end="99:10">nb</name><operator pos:start="99:11" pos:end="99:12">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="101:5" pos:end="103:13"><if pos:start="101:5" pos:end="103:13">if <condition pos:start="101:8" pos:end="101:16">(<expr pos:start="101:9" pos:end="101:15"><name pos:start="101:9" pos:end="101:11">fd1</name> <operator pos:start="101:13" pos:end="101:13">&lt;</operator> <literal type="number" pos:start="101:15" pos:end="101:15">3</literal></expr>)</condition><block type="pseudo" pos:start="103:9" pos:end="103:13"><block_content pos:start="103:9" pos:end="103:13">

        <expr_stmt pos:start="103:9" pos:end="103:13"><expr pos:start="103:9" pos:end="103:12"><name pos:start="103:9" pos:end="103:10">nb</name><operator pos:start="103:11" pos:end="103:12">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <switch pos:start="105:5" pos:end="123:5">switch <condition pos:start="105:12" pos:end="105:15">(<expr pos:start="105:13" pos:end="105:14"><name pos:start="105:13" pos:end="105:14">nb</name></expr>)</condition> <block pos:start="105:17" pos:end="123:5">{<block_content pos:start="107:5" pos:end="121:14">

    <case pos:start="107:5" pos:end="107:11">case <expr pos:start="107:10" pos:end="107:10"><literal type="number" pos:start="107:10" pos:end="107:10">0</literal></expr>:</case>

        <break pos:start="109:9" pos:end="109:14">break;</break>

    <case pos:start="111:5" pos:end="111:11">case <expr pos:start="111:10" pos:end="111:10"><literal type="number" pos:start="111:10" pos:end="111:10">1</literal></expr>:</case>

        <expr_stmt pos:start="113:9" pos:end="113:20"><expr pos:start="113:9" pos:end="113:19"><name pos:start="113:9" pos:end="113:11">val</name> <operator pos:start="113:13" pos:end="113:14">|=</operator> <literal type="number" pos:start="113:16" pos:end="113:19">0x01</literal></expr>;</expr_stmt> <comment type="block" pos:start="113:22" pos:end="113:50">/* 1 drive, ready for boot */</comment>

        <break pos:start="115:9" pos:end="115:14">break;</break>

    <case pos:start="117:5" pos:end="117:11">case <expr pos:start="117:10" pos:end="117:10"><literal type="number" pos:start="117:10" pos:end="117:10">2</literal></expr>:</case>

        <expr_stmt pos:start="119:9" pos:end="119:20"><expr pos:start="119:9" pos:end="119:19"><name pos:start="119:9" pos:end="119:11">val</name> <operator pos:start="119:13" pos:end="119:14">|=</operator> <literal type="number" pos:start="119:16" pos:end="119:19">0x41</literal></expr>;</expr_stmt> <comment type="block" pos:start="119:22" pos:end="119:51">/* 2 drives, ready for boot */</comment>

        <break pos:start="121:9" pos:end="121:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="125:5" pos:end="125:16"><expr pos:start="125:5" pos:end="125:15"><name pos:start="125:5" pos:end="125:7">val</name> <operator pos:start="125:9" pos:end="125:10">|=</operator> <literal type="number" pos:start="125:12" pos:end="125:15">0x02</literal></expr>;</expr_stmt> <comment type="block" pos:start="125:18" pos:end="125:35">/* FPU is there */</comment>

    <expr_stmt pos:start="127:5" pos:end="127:16"><expr pos:start="127:5" pos:end="127:15"><name pos:start="127:5" pos:end="127:7">val</name> <operator pos:start="127:9" pos:end="127:10">|=</operator> <literal type="number" pos:start="127:12" pos:end="127:15">0x04</literal></expr>;</expr_stmt> <comment type="block" pos:start="127:18" pos:end="127:43">/* PS/2 mouse installed */</comment>

    <expr_stmt pos:start="129:5" pos:end="129:47"><expr pos:start="129:5" pos:end="129:46"><call pos:start="129:5" pos:end="129:46"><name pos:start="129:5" pos:end="129:18">rtc_set_memory</name><argument_list pos:start="129:19" pos:end="129:46">(<argument pos:start="129:20" pos:end="129:20"><expr pos:start="129:20" pos:end="129:20"><name pos:start="129:20" pos:end="129:20">s</name></expr></argument>, <argument pos:start="129:23" pos:end="129:40"><expr pos:start="129:23" pos:end="129:40"><name pos:start="129:23" pos:end="129:40">REG_EQUIPMENT_BYTE</name></expr></argument>, <argument pos:start="129:43" pos:end="129:45"><expr pos:start="129:43" pos:end="129:45"><name pos:start="129:43" pos:end="129:45">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="133:5" pos:end="133:21">/* hard drives */</comment>



    <expr_stmt pos:start="137:5" pos:end="137:81"><expr pos:start="137:5" pos:end="137:80"><call pos:start="137:5" pos:end="137:80"><name pos:start="137:5" pos:end="137:18">rtc_set_memory</name><argument_list pos:start="137:19" pos:end="137:80">(<argument pos:start="137:20" pos:end="137:20"><expr pos:start="137:20" pos:end="137:20"><name pos:start="137:20" pos:end="137:20">s</name></expr></argument>, <argument pos:start="137:23" pos:end="137:26"><expr pos:start="137:23" pos:end="137:26"><literal type="number" pos:start="137:23" pos:end="137:26">0x12</literal></expr></argument>, <argument pos:start="137:29" pos:end="137:79"><expr pos:start="137:29" pos:end="137:79"><operator pos:start="137:29" pos:end="137:29">(</operator><ternary pos:start="137:30" pos:end="137:51"><condition pos:start="137:30" pos:end="137:42"><expr pos:start="137:30" pos:end="137:40"><name pos:start="137:30" pos:end="137:40"><name pos:start="137:30" pos:end="137:37">hd_table</name><index pos:start="137:38" pos:end="137:40">[<expr pos:start="137:39" pos:end="137:39"><literal type="number" pos:start="137:39" pos:end="137:39">0</literal></expr>]</index></name></expr> ?</condition><then pos:start="137:44" pos:end="137:47"> <expr pos:start="137:44" pos:end="137:47"><literal type="number" pos:start="137:44" pos:end="137:47">0xf0</literal></expr> </then><else pos:start="137:49" pos:end="137:51">: <expr pos:start="137:51" pos:end="137:51"><literal type="number" pos:start="137:51" pos:end="137:51">0</literal></expr></else></ternary><operator pos:start="137:52" pos:end="137:52">)</operator> <operator pos:start="137:54" pos:end="137:54">|</operator> <operator pos:start="137:56" pos:end="137:56">(</operator><ternary pos:start="137:57" pos:end="137:78"><condition pos:start="137:57" pos:end="137:69"><expr pos:start="137:57" pos:end="137:67"><name pos:start="137:57" pos:end="137:67"><name pos:start="137:57" pos:end="137:64">hd_table</name><index pos:start="137:65" pos:end="137:67">[<expr pos:start="137:66" pos:end="137:66"><literal type="number" pos:start="137:66" pos:end="137:66">1</literal></expr>]</index></name></expr> ?</condition><then pos:start="137:71" pos:end="137:74"> <expr pos:start="137:71" pos:end="137:74"><literal type="number" pos:start="137:71" pos:end="137:74">0x0f</literal></expr> </then><else pos:start="137:76" pos:end="137:78">: <expr pos:start="137:78" pos:end="137:78"><literal type="number" pos:start="137:78" pos:end="137:78">0</literal></expr></else></ternary><operator pos:start="137:79" pos:end="137:79">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="139:5" pos:end="141:46"><if pos:start="139:5" pos:end="141:46">if <condition pos:start="139:8" pos:end="139:20">(<expr pos:start="139:9" pos:end="139:19"><name pos:start="139:9" pos:end="139:19"><name pos:start="139:9" pos:end="139:16">hd_table</name><index pos:start="139:17" pos:end="139:19">[<expr pos:start="139:18" pos:end="139:18"><literal type="number" pos:start="139:18" pos:end="139:18">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="141:9" pos:end="141:46"><block_content pos:start="141:9" pos:end="141:46">

        <expr_stmt pos:start="141:9" pos:end="141:46"><expr pos:start="141:9" pos:end="141:45"><call pos:start="141:9" pos:end="141:45"><name pos:start="141:9" pos:end="141:20">cmos_init_hd</name><argument_list pos:start="141:21" pos:end="141:45">(<argument pos:start="141:22" pos:end="141:25"><expr pos:start="141:22" pos:end="141:25"><literal type="number" pos:start="141:22" pos:end="141:25">0x19</literal></expr></argument>, <argument pos:start="141:28" pos:end="141:31"><expr pos:start="141:28" pos:end="141:31"><literal type="number" pos:start="141:28" pos:end="141:31">0x1b</literal></expr></argument>, <argument pos:start="141:34" pos:end="141:44"><expr pos:start="141:34" pos:end="141:44"><name pos:start="141:34" pos:end="141:44"><name pos:start="141:34" pos:end="141:41">hd_table</name><index pos:start="141:42" pos:end="141:44">[<expr pos:start="141:43" pos:end="141:43"><literal type="number" pos:start="141:43" pos:end="141:43">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="143:5" pos:end="145:46"><if pos:start="143:5" pos:end="145:46">if <condition pos:start="143:8" pos:end="143:20">(<expr pos:start="143:9" pos:end="143:19"><name pos:start="143:9" pos:end="143:19"><name pos:start="143:9" pos:end="143:16">hd_table</name><index pos:start="143:17" pos:end="143:19">[<expr pos:start="143:18" pos:end="143:18"><literal type="number" pos:start="143:18" pos:end="143:18">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="145:9" pos:end="145:46"><block_content pos:start="145:9" pos:end="145:46">

        <expr_stmt pos:start="145:9" pos:end="145:46"><expr pos:start="145:9" pos:end="145:45"><call pos:start="145:9" pos:end="145:45"><name pos:start="145:9" pos:end="145:20">cmos_init_hd</name><argument_list pos:start="145:21" pos:end="145:45">(<argument pos:start="145:22" pos:end="145:25"><expr pos:start="145:22" pos:end="145:25"><literal type="number" pos:start="145:22" pos:end="145:25">0x1a</literal></expr></argument>, <argument pos:start="145:28" pos:end="145:31"><expr pos:start="145:28" pos:end="145:31"><literal type="number" pos:start="145:28" pos:end="145:31">0x24</literal></expr></argument>, <argument pos:start="145:34" pos:end="145:44"><expr pos:start="145:34" pos:end="145:44"><name pos:start="145:34" pos:end="145:44"><name pos:start="145:34" pos:end="145:41">hd_table</name><index pos:start="145:42" pos:end="145:44">[<expr pos:start="145:43" pos:end="145:43"><literal type="number" pos:start="145:43" pos:end="145:43">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:12"><expr pos:start="149:5" pos:end="149:11"><name pos:start="149:5" pos:end="149:7">val</name> <operator pos:start="149:9" pos:end="149:9">=</operator> <literal type="number" pos:start="149:11" pos:end="149:11">0</literal></expr>;</expr_stmt>

    <for pos:start="151:5" pos:end="195:5">for <control pos:start="151:9" pos:end="151:27">(<init pos:start="151:10" pos:end="151:15"><expr pos:start="151:10" pos:end="151:14"><name pos:start="151:10" pos:end="151:10">i</name> <operator pos:start="151:12" pos:end="151:12">=</operator> <literal type="number" pos:start="151:14" pos:end="151:14">0</literal></expr>;</init> <condition pos:start="151:17" pos:end="151:22"><expr pos:start="151:17" pos:end="151:21"><name pos:start="151:17" pos:end="151:17">i</name> <operator pos:start="151:19" pos:end="151:19">&lt;</operator> <literal type="number" pos:start="151:21" pos:end="151:21">4</literal></expr>;</condition> <incr pos:start="151:24" pos:end="151:26"><expr pos:start="151:24" pos:end="151:26"><name pos:start="151:24" pos:end="151:24">i</name><operator pos:start="151:25" pos:end="151:26">++</operator></expr></incr>)</control> <block pos:start="151:29" pos:end="195:5">{<block_content pos:start="153:9" pos:end="193:9">

        <if_stmt pos:start="153:9" pos:end="193:9"><if pos:start="153:9" pos:end="193:9">if <condition pos:start="153:12" pos:end="153:24">(<expr pos:start="153:13" pos:end="153:23"><name pos:start="153:13" pos:end="153:23"><name pos:start="153:13" pos:end="153:20">hd_table</name><index pos:start="153:21" pos:end="153:23">[<expr pos:start="153:22" pos:end="153:22"><name pos:start="153:22" pos:end="153:22">i</name></expr>]</index></name></expr>)</condition> <block pos:start="153:26" pos:end="193:9">{<block_content pos:start="155:13" pos:end="191:42">

            <decl_stmt pos:start="155:13" pos:end="155:55"><decl pos:start="155:13" pos:end="155:25"><type pos:start="155:13" pos:end="155:15"><name pos:start="155:13" pos:end="155:15">int</name></type> <name pos:start="155:17" pos:end="155:25">cylinders</name></decl>, <decl pos:start="155:28" pos:end="155:32"><type ref="prev" pos:start="155:13" pos:end="155:15"/><name pos:start="155:28" pos:end="155:32">heads</name></decl>, <decl pos:start="155:35" pos:end="155:41"><type ref="prev" pos:start="155:13" pos:end="155:15"/><name pos:start="155:35" pos:end="155:41">sectors</name></decl>, <decl pos:start="155:44" pos:end="155:54"><type ref="prev" pos:start="155:13" pos:end="155:15"/><name pos:start="155:44" pos:end="155:54">translation</name></decl>;</decl_stmt>

            <comment type="block" pos:start="157:13" pos:end="163:70">/* NOTE: bdrv_get_geometry_hint() returns the physical

                geometry.  It is always such that: 1 &lt;= sects &lt;= 63, 1

                &lt;= heads &lt;= 16, 1 &lt;= cylinders &lt;= 16383. The BIOS

                geometry can be different if a translation is done. */</comment>

            <expr_stmt pos:start="165:13" pos:end="165:65"><expr pos:start="165:13" pos:end="165:64"><name pos:start="165:13" pos:end="165:23">translation</name> <operator pos:start="165:25" pos:end="165:25">=</operator> <call pos:start="165:27" pos:end="165:64"><name pos:start="165:27" pos:end="165:51">bdrv_get_translation_hint</name><argument_list pos:start="165:52" pos:end="165:64">(<argument pos:start="165:53" pos:end="165:63"><expr pos:start="165:53" pos:end="165:63"><name pos:start="165:53" pos:end="165:63"><name pos:start="165:53" pos:end="165:60">hd_table</name><index pos:start="165:61" pos:end="165:63">[<expr pos:start="165:62" pos:end="165:62"><name pos:start="165:62" pos:end="165:62">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="167:13" pos:end="189:13"><if pos:start="167:13" pos:end="185:13">if <condition pos:start="167:16" pos:end="167:57">(<expr pos:start="167:17" pos:end="167:56"><name pos:start="167:17" pos:end="167:27">translation</name> <operator pos:start="167:29" pos:end="167:30">==</operator> <name pos:start="167:32" pos:end="167:56">BIOS_ATA_TRANSLATION_AUTO</name></expr>)</condition> <block pos:start="167:59" pos:end="185:13">{<block_content pos:start="169:17" pos:end="183:17">

                <expr_stmt pos:start="169:17" pos:end="169:82"><expr pos:start="169:17" pos:end="169:81"><call pos:start="169:17" pos:end="169:81"><name pos:start="169:17" pos:end="169:38">bdrv_get_geometry_hint</name><argument_list pos:start="169:39" pos:end="169:81">(<argument pos:start="169:40" pos:end="169:50"><expr pos:start="169:40" pos:end="169:50"><name pos:start="169:40" pos:end="169:50"><name pos:start="169:40" pos:end="169:47">hd_table</name><index pos:start="169:48" pos:end="169:50">[<expr pos:start="169:49" pos:end="169:49"><name pos:start="169:49" pos:end="169:49">i</name></expr>]</index></name></expr></argument>, <argument pos:start="169:53" pos:end="169:62"><expr pos:start="169:53" pos:end="169:62"><operator pos:start="169:53" pos:end="169:53">&amp;</operator><name pos:start="169:54" pos:end="169:62">cylinders</name></expr></argument>, <argument pos:start="169:65" pos:end="169:70"><expr pos:start="169:65" pos:end="169:70"><operator pos:start="169:65" pos:end="169:65">&amp;</operator><name pos:start="169:66" pos:end="169:70">heads</name></expr></argument>, <argument pos:start="169:73" pos:end="169:80"><expr pos:start="169:73" pos:end="169:80"><operator pos:start="169:73" pos:end="169:73">&amp;</operator><name pos:start="169:74" pos:end="169:80">sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="171:17" pos:end="183:17"><if pos:start="171:17" pos:end="177:17">if <condition pos:start="171:20" pos:end="171:70">(<expr pos:start="171:21" pos:end="171:69"><name pos:start="171:21" pos:end="171:29">cylinders</name> <operator pos:start="171:31" pos:end="171:32">&lt;=</operator> <literal type="number" pos:start="171:34" pos:end="171:37">1024</literal> <operator pos:start="171:39" pos:end="171:40">&amp;&amp;</operator> <name pos:start="171:42" pos:end="171:46">heads</name> <operator pos:start="171:48" pos:end="171:49">&lt;=</operator> <literal type="number" pos:start="171:51" pos:end="171:52">16</literal> <operator pos:start="171:54" pos:end="171:55">&amp;&amp;</operator> <name pos:start="171:57" pos:end="171:63">sectors</name> <operator pos:start="171:65" pos:end="171:66">&lt;=</operator> <literal type="number" pos:start="171:68" pos:end="171:69">63</literal></expr>)</condition> <block pos:start="171:72" pos:end="177:17">{<block_content pos:start="175:21" pos:end="175:36">

                    <comment type="block" pos:start="173:21" pos:end="173:41">/* No translation. */</comment>

                    <expr_stmt pos:start="175:21" pos:end="175:36"><expr pos:start="175:21" pos:end="175:35"><name pos:start="175:21" pos:end="175:31">translation</name> <operator pos:start="175:33" pos:end="175:33">=</operator> <literal type="number" pos:start="175:35" pos:end="175:35">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="177:19" pos:end="183:17">else <block pos:start="177:24" pos:end="183:17">{<block_content pos:start="181:21" pos:end="181:36">

                    <comment type="block" pos:start="179:21" pos:end="179:42">/* LBA translation. */</comment>

                    <expr_stmt pos:start="181:21" pos:end="181:36"><expr pos:start="181:21" pos:end="181:35"><name pos:start="181:21" pos:end="181:31">translation</name> <operator pos:start="181:33" pos:end="181:33">=</operator> <literal type="number" pos:start="181:35" pos:end="181:35">1</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="185:15" pos:end="189:13">else <block pos:start="185:20" pos:end="189:13">{<block_content pos:start="187:17" pos:end="187:30">

                <expr_stmt pos:start="187:17" pos:end="187:30"><expr pos:start="187:17" pos:end="187:29"><name pos:start="187:17" pos:end="187:27">translation</name><operator pos:start="187:28" pos:end="187:29">--</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:42"><expr pos:start="191:13" pos:end="191:41"><name pos:start="191:13" pos:end="191:15">val</name> <operator pos:start="191:17" pos:end="191:18">|=</operator> <name pos:start="191:20" pos:end="191:30">translation</name> <operator pos:start="191:32" pos:end="191:33">&lt;&lt;</operator> <operator pos:start="191:35" pos:end="191:35">(</operator><name pos:start="191:36" pos:end="191:36">i</name> <operator pos:start="191:38" pos:end="191:38">*</operator> <literal type="number" pos:start="191:40" pos:end="191:40">2</literal><operator pos:start="191:41" pos:end="191:41">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="197:5" pos:end="197:33"><expr pos:start="197:5" pos:end="197:32"><call pos:start="197:5" pos:end="197:32"><name pos:start="197:5" pos:end="197:18">rtc_set_memory</name><argument_list pos:start="197:19" pos:end="197:32">(<argument pos:start="197:20" pos:end="197:20"><expr pos:start="197:20" pos:end="197:20"><name pos:start="197:20" pos:end="197:20">s</name></expr></argument>, <argument pos:start="197:23" pos:end="197:26"><expr pos:start="197:23" pos:end="197:26"><literal type="number" pos:start="197:23" pos:end="197:26">0x39</literal></expr></argument>, <argument pos:start="197:29" pos:end="197:31"><expr pos:start="197:29" pos:end="197:31"><name pos:start="197:29" pos:end="197:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
