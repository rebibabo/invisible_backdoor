<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20161.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:45"><name pos:start="1:1" pos:end="1:14">vmdk_co_preadv</name><argument_list pos:start="1:15" pos:end="3:45">(<argument pos:start="1:16" pos:end="1:35">BlockDriverState *bs</argument>, <argument pos:start="1:38" pos:end="1:52">uint64_t offset</argument>, <argument pos:start="1:55" pos:end="1:68">uint64_t bytes</argument>,

               <argument pos:start="3:16" pos:end="3:33">QEMUIOVector *qiov</argument>, <argument pos:start="3:36" pos:end="3:44">int flags</argument>)</argument_list></macro>

<block pos:start="5:1" pos:end="135:1">{<block_content pos:start="7:5" pos:end="133:15">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVVmdkState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:20">n_bytes</name></decl>, <decl pos:start="11:23" pos:end="11:39"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:23" pos:end="11:39">offset_in_cluster</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:14">VmdkExtent</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:22">extent</name> <init pos:start="13:24" pos:end="13:29">= <expr pos:start="13:26" pos:end="13:29"><name pos:start="13:26" pos:end="13:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16">QEMUIOVector</name></type> <name pos:start="15:18" pos:end="15:27">local_qiov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:27">cluster_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:23">bytes_done</name> <init pos:start="19:25" pos:end="19:27">= <expr pos:start="19:27" pos:end="19:27"><literal type="number" pos:start="19:27" pos:end="19:27">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:45"><expr pos:start="23:5" pos:end="23:44"><call pos:start="23:5" pos:end="23:44"><name pos:start="23:5" pos:end="23:19">qemu_iovec_init</name><argument_list pos:start="23:20" pos:end="23:44">(<argument pos:start="23:21" pos:end="23:31"><expr pos:start="23:21" pos:end="23:31"><operator pos:start="23:21" pos:end="23:21">&amp;</operator><name pos:start="23:22" pos:end="23:31">local_qiov</name></expr></argument>, <argument pos:start="23:34" pos:end="23:43"><expr pos:start="23:34" pos:end="23:43"><name pos:start="23:34" pos:end="23:43"><name pos:start="23:34" pos:end="23:37">qiov</name><operator pos:start="23:38" pos:end="23:39">-&gt;</operator><name pos:start="23:40" pos:end="23:43">niov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:33"><expr pos:start="25:5" pos:end="25:32"><call pos:start="25:5" pos:end="25:32"><name pos:start="25:5" pos:end="25:22">qemu_co_mutex_lock</name><argument_list pos:start="25:23" pos:end="25:32">(<argument pos:start="25:24" pos:end="25:31"><expr pos:start="25:24" pos:end="25:31"><operator pos:start="25:24" pos:end="25:24">&amp;</operator><name pos:start="25:25" pos:end="25:31"><name pos:start="25:25" pos:end="25:25">s</name><operator pos:start="25:26" pos:end="25:27">-&gt;</operator><name pos:start="25:28" pos:end="25:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="29:5" pos:end="119:5">while <condition pos:start="29:11" pos:end="29:21">(<expr pos:start="29:12" pos:end="29:20"><name pos:start="29:12" pos:end="29:16">bytes</name> <operator pos:start="29:18" pos:end="29:18">&gt;</operator> <literal type="number" pos:start="29:20" pos:end="29:20">0</literal></expr>)</condition> <block pos:start="29:23" pos:end="119:5">{<block_content pos:start="31:9" pos:end="117:30">

        <expr_stmt pos:start="31:9" pos:end="31:68"><expr pos:start="31:9" pos:end="31:67"><name pos:start="31:9" pos:end="31:14">extent</name> <operator pos:start="31:16" pos:end="31:16">=</operator> <call pos:start="31:18" pos:end="31:67"><name pos:start="31:18" pos:end="31:28">find_extent</name><argument_list pos:start="31:29" pos:end="31:67">(<argument pos:start="31:30" pos:end="31:30"><expr pos:start="31:30" pos:end="31:30"><name pos:start="31:30" pos:end="31:30">s</name></expr></argument>, <argument pos:start="31:33" pos:end="31:58"><expr pos:start="31:33" pos:end="31:58"><name pos:start="31:33" pos:end="31:38">offset</name> <operator pos:start="31:40" pos:end="31:41">&gt;&gt;</operator> <name pos:start="31:43" pos:end="31:58">BDRV_SECTOR_BITS</name></expr></argument>, <argument pos:start="31:61" pos:end="31:66"><expr pos:start="31:61" pos:end="31:66"><name pos:start="31:61" pos:end="31:66">extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="39:9"><if pos:start="33:9" pos:end="39:9">if <condition pos:start="33:12" pos:end="33:20">(<expr pos:start="33:13" pos:end="33:19"><operator pos:start="33:13" pos:end="33:13">!</operator><name pos:start="33:14" pos:end="33:19">extent</name></expr>)</condition> <block pos:start="33:22" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:22">

            <expr_stmt pos:start="35:13" pos:end="35:23"><expr pos:start="35:13" pos:end="35:22"><name pos:start="35:13" pos:end="35:15">ret</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <operator pos:start="35:19" pos:end="35:19">-</operator><name pos:start="35:20" pos:end="35:22">EIO</name></expr>;</expr_stmt>

            <goto pos:start="37:13" pos:end="37:22">goto <name pos:start="37:18" pos:end="37:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="43:71"><expr pos:start="41:9" pos:end="43:70"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <call pos:start="41:15" pos:end="43:70"><name pos:start="41:15" pos:end="41:32">get_cluster_offset</name><argument_list pos:start="41:33" pos:end="43:70">(<argument pos:start="41:34" pos:end="41:35"><expr pos:start="41:34" pos:end="41:35"><name pos:start="41:34" pos:end="41:35">bs</name></expr></argument>, <argument pos:start="41:38" pos:end="41:43"><expr pos:start="41:38" pos:end="41:43"><name pos:start="41:38" pos:end="41:43">extent</name></expr></argument>, <argument pos:start="41:46" pos:end="41:49"><expr pos:start="41:46" pos:end="41:49"><name pos:start="41:46" pos:end="41:49">NULL</name></expr></argument>,

                                 <argument pos:start="43:34" pos:end="43:39"><expr pos:start="43:34" pos:end="43:39"><name pos:start="43:34" pos:end="43:39">offset</name></expr></argument>, <argument pos:start="43:42" pos:end="43:46"><expr pos:start="43:42" pos:end="43:46"><name pos:start="43:42" pos:end="43:46">false</name></expr></argument>, <argument pos:start="43:49" pos:end="43:63"><expr pos:start="43:49" pos:end="43:63"><operator pos:start="43:49" pos:end="43:49">&amp;</operator><name pos:start="43:50" pos:end="43:63">cluster_offset</name></expr></argument>, <argument pos:start="43:66" pos:end="43:66"><expr pos:start="43:66" pos:end="43:66"><literal type="number" pos:start="43:66" pos:end="43:66">0</literal></expr></argument>, <argument pos:start="43:69" pos:end="43:69"><expr pos:start="43:69" pos:end="43:69"><literal type="number" pos:start="43:69" pos:end="43:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:72"><expr pos:start="45:9" pos:end="45:71"><name pos:start="45:9" pos:end="45:25">offset_in_cluster</name> <operator pos:start="45:27" pos:end="45:27">=</operator> <call pos:start="45:29" pos:end="45:71"><name pos:start="45:29" pos:end="45:55">vmdk_find_offset_in_cluster</name><argument_list pos:start="45:56" pos:end="45:71">(<argument pos:start="45:57" pos:end="45:62"><expr pos:start="45:57" pos:end="45:62"><name pos:start="45:57" pos:end="45:62">extent</name></expr></argument>, <argument pos:start="45:65" pos:end="45:70"><expr pos:start="45:65" pos:end="45:70"><name pos:start="45:65" pos:end="45:70">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="49:9" pos:end="51:50"><expr pos:start="49:9" pos:end="51:49"><name pos:start="49:9" pos:end="49:15">n_bytes</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <call pos:start="49:19" pos:end="51:49"><name pos:start="49:19" pos:end="49:21">MIN</name><argument_list pos:start="49:22" pos:end="51:49">(<argument pos:start="49:23" pos:end="49:27"><expr pos:start="49:23" pos:end="49:27"><name pos:start="49:23" pos:end="49:27">bytes</name></expr></argument>, <argument pos:start="49:30" pos:end="51:48"><expr pos:start="49:30" pos:end="51:48"><name pos:start="49:30" pos:end="49:52"><name pos:start="49:30" pos:end="49:35">extent</name><operator pos:start="49:36" pos:end="49:37">-&gt;</operator><name pos:start="49:38" pos:end="49:52">cluster_sectors</name></name> <operator pos:start="49:54" pos:end="49:54">*</operator> <name pos:start="49:56" pos:end="49:71">BDRV_SECTOR_SIZE</name>

                             <operator pos:start="51:30" pos:end="51:30">-</operator> <name pos:start="51:32" pos:end="51:48">offset_in_cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="55:9" pos:end="111:9"><if pos:start="55:9" pos:end="93:9">if <condition pos:start="55:12" pos:end="55:27">(<expr pos:start="55:13" pos:end="55:26"><name pos:start="55:13" pos:end="55:15">ret</name> <operator pos:start="55:17" pos:end="55:18">!=</operator> <name pos:start="55:20" pos:end="55:26">VMDK_OK</name></expr>)</condition> <block pos:start="55:29" pos:end="93:9">{<block_content pos:start="59:13" pos:end="91:13">

            <comment type="block" pos:start="57:13" pos:end="57:75">/* if not allocated, try to read from parent image, if exist */</comment>

            <if_stmt pos:start="59:13" pos:end="91:13"><if pos:start="59:13" pos:end="87:13">if <condition pos:start="59:16" pos:end="59:50">(<expr pos:start="59:17" pos:end="59:49"><name pos:start="59:17" pos:end="59:27"><name pos:start="59:17" pos:end="59:18">bs</name><operator pos:start="59:19" pos:end="59:20">-&gt;</operator><name pos:start="59:21" pos:end="59:27">backing</name></name> <operator pos:start="59:29" pos:end="59:30">&amp;&amp;</operator> <name pos:start="59:32" pos:end="59:34">ret</name> <operator pos:start="59:36" pos:end="59:37">!=</operator> <name pos:start="59:39" pos:end="59:49">VMDK_ZEROED</name></expr>)</condition> <block pos:start="59:52" pos:end="87:13">{<block_content pos:start="61:17" pos:end="85:17">

                <if_stmt pos:start="61:17" pos:end="67:17"><if pos:start="61:17" pos:end="67:17">if <condition pos:start="61:20" pos:end="61:43">(<expr pos:start="61:21" pos:end="61:42"><operator pos:start="61:21" pos:end="61:21">!</operator><call pos:start="61:22" pos:end="61:42"><name pos:start="61:22" pos:end="61:38">vmdk_is_cid_valid</name><argument_list pos:start="61:39" pos:end="61:42">(<argument pos:start="61:40" pos:end="61:41"><expr pos:start="61:40" pos:end="61:41"><name pos:start="61:40" pos:end="61:41">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:45" pos:end="67:17">{<block_content pos:start="63:21" pos:end="65:30">

                    <expr_stmt pos:start="63:21" pos:end="63:34"><expr pos:start="63:21" pos:end="63:33"><name pos:start="63:21" pos:end="63:23">ret</name> <operator pos:start="63:25" pos:end="63:25">=</operator> <operator pos:start="63:27" pos:end="63:27">-</operator><name pos:start="63:28" pos:end="63:33">EINVAL</name></expr>;</expr_stmt>

                    <goto pos:start="65:21" pos:end="65:30">goto <name pos:start="65:26" pos:end="65:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="71:17" pos:end="71:46"><expr pos:start="71:17" pos:end="71:45"><call pos:start="71:17" pos:end="71:45"><name pos:start="71:17" pos:end="71:32">qemu_iovec_reset</name><argument_list pos:start="71:33" pos:end="71:45">(<argument pos:start="71:34" pos:end="71:44"><expr pos:start="71:34" pos:end="71:44"><operator pos:start="71:34" pos:end="71:34">&amp;</operator><name pos:start="71:35" pos:end="71:44">local_qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="73:17" pos:end="73:74"><expr pos:start="73:17" pos:end="73:73"><call pos:start="73:17" pos:end="73:73"><name pos:start="73:17" pos:end="73:33">qemu_iovec_concat</name><argument_list pos:start="73:34" pos:end="73:73">(<argument pos:start="73:35" pos:end="73:45"><expr pos:start="73:35" pos:end="73:45"><operator pos:start="73:35" pos:end="73:35">&amp;</operator><name pos:start="73:36" pos:end="73:45">local_qiov</name></expr></argument>, <argument pos:start="73:48" pos:end="73:51"><expr pos:start="73:48" pos:end="73:51"><name pos:start="73:48" pos:end="73:51">qiov</name></expr></argument>, <argument pos:start="73:54" pos:end="73:63"><expr pos:start="73:54" pos:end="73:63"><name pos:start="73:54" pos:end="73:63">bytes_done</name></expr></argument>, <argument pos:start="73:66" pos:end="73:72"><expr pos:start="73:66" pos:end="73:72"><name pos:start="73:66" pos:end="73:72">n_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="77:17" pos:end="79:53"><expr pos:start="77:17" pos:end="79:52"><name pos:start="77:17" pos:end="77:19">ret</name> <operator pos:start="77:21" pos:end="77:21">=</operator> <call pos:start="77:23" pos:end="79:52"><name pos:start="77:23" pos:end="77:36">bdrv_co_preadv</name><argument_list pos:start="77:37" pos:end="79:52">(<argument pos:start="77:38" pos:end="77:52"><expr pos:start="77:38" pos:end="77:52"><name pos:start="77:38" pos:end="77:52"><name pos:start="77:38" pos:end="77:39">bs</name><operator pos:start="77:40" pos:end="77:41">-&gt;</operator><name pos:start="77:42" pos:end="77:48">backing</name><operator pos:start="77:49" pos:end="77:50">-&gt;</operator><name pos:start="77:51" pos:end="77:52">bs</name></name></expr></argument>, <argument pos:start="77:55" pos:end="77:60"><expr pos:start="77:55" pos:end="77:60"><name pos:start="77:55" pos:end="77:60">offset</name></expr></argument>, <argument pos:start="77:63" pos:end="77:69"><expr pos:start="77:63" pos:end="77:69"><name pos:start="77:63" pos:end="77:69">n_bytes</name></expr></argument>,

                                     <argument pos:start="79:38" pos:end="79:48"><expr pos:start="79:38" pos:end="79:48"><operator pos:start="79:38" pos:end="79:38">&amp;</operator><name pos:start="79:39" pos:end="79:48">local_qiov</name></expr></argument>, <argument pos:start="79:51" pos:end="79:51"><expr pos:start="79:51" pos:end="79:51"><literal type="number" pos:start="79:51" pos:end="79:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="81:17" pos:end="85:17"><if pos:start="81:17" pos:end="85:17">if <condition pos:start="81:20" pos:end="81:28">(<expr pos:start="81:21" pos:end="81:27"><name pos:start="81:21" pos:end="81:23">ret</name> <operator pos:start="81:25" pos:end="81:25">&lt;</operator> <literal type="number" pos:start="81:27" pos:end="81:27">0</literal></expr>)</condition> <block pos:start="81:30" pos:end="85:17">{<block_content pos:start="83:21" pos:end="83:30">

                    <goto pos:start="83:21" pos:end="83:30">goto <name pos:start="83:26" pos:end="83:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="87:15" pos:end="91:13">else <block pos:start="87:20" pos:end="91:13">{<block_content pos:start="89:17" pos:end="89:64">

                <expr_stmt pos:start="89:17" pos:end="89:64"><expr pos:start="89:17" pos:end="89:63"><call pos:start="89:17" pos:end="89:63"><name pos:start="89:17" pos:end="89:33">qemu_iovec_memset</name><argument_list pos:start="89:34" pos:end="89:63">(<argument pos:start="89:35" pos:end="89:38"><expr pos:start="89:35" pos:end="89:38"><name pos:start="89:35" pos:end="89:38">qiov</name></expr></argument>, <argument pos:start="89:41" pos:end="89:50"><expr pos:start="89:41" pos:end="89:50"><name pos:start="89:41" pos:end="89:50">bytes_done</name></expr></argument>, <argument pos:start="89:53" pos:end="89:53"><expr pos:start="89:53" pos:end="89:53"><literal type="number" pos:start="89:53" pos:end="89:53">0</literal></expr></argument>, <argument pos:start="89:56" pos:end="89:62"><expr pos:start="89:56" pos:end="89:62"><name pos:start="89:56" pos:end="89:62">n_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="93:11" pos:end="111:9">else <block pos:start="93:16" pos:end="111:9">{<block_content pos:start="95:13" pos:end="109:13">

            <expr_stmt pos:start="95:13" pos:end="95:42"><expr pos:start="95:13" pos:end="95:41"><call pos:start="95:13" pos:end="95:41"><name pos:start="95:13" pos:end="95:28">qemu_iovec_reset</name><argument_list pos:start="95:29" pos:end="95:41">(<argument pos:start="95:30" pos:end="95:40"><expr pos:start="95:30" pos:end="95:40"><operator pos:start="95:30" pos:end="95:30">&amp;</operator><name pos:start="95:31" pos:end="95:40">local_qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:70"><expr pos:start="97:13" pos:end="97:69"><call pos:start="97:13" pos:end="97:69"><name pos:start="97:13" pos:end="97:29">qemu_iovec_concat</name><argument_list pos:start="97:30" pos:end="97:69">(<argument pos:start="97:31" pos:end="97:41"><expr pos:start="97:31" pos:end="97:41"><operator pos:start="97:31" pos:end="97:31">&amp;</operator><name pos:start="97:32" pos:end="97:41">local_qiov</name></expr></argument>, <argument pos:start="97:44" pos:end="97:47"><expr pos:start="97:44" pos:end="97:47"><name pos:start="97:44" pos:end="97:47">qiov</name></expr></argument>, <argument pos:start="97:50" pos:end="97:59"><expr pos:start="97:50" pos:end="97:59"><name pos:start="97:50" pos:end="97:59">bytes_done</name></expr></argument>, <argument pos:start="97:62" pos:end="97:68"><expr pos:start="97:62" pos:end="97:68"><name pos:start="97:62" pos:end="97:68">n_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="101:13" pos:end="103:57"><expr pos:start="101:13" pos:end="103:56"><name pos:start="101:13" pos:end="101:15">ret</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <call pos:start="101:19" pos:end="103:56"><name pos:start="101:19" pos:end="101:34">vmdk_read_extent</name><argument_list pos:start="101:35" pos:end="103:56">(<argument pos:start="101:36" pos:end="101:41"><expr pos:start="101:36" pos:end="101:41"><name pos:start="101:36" pos:end="101:41">extent</name></expr></argument>, <argument pos:start="101:44" pos:end="101:57"><expr pos:start="101:44" pos:end="101:57"><name pos:start="101:44" pos:end="101:57">cluster_offset</name></expr></argument>, <argument pos:start="101:60" pos:end="101:76"><expr pos:start="101:60" pos:end="101:76"><name pos:start="101:60" pos:end="101:76">offset_in_cluster</name></expr></argument>,

                                   <argument pos:start="103:36" pos:end="103:46"><expr pos:start="103:36" pos:end="103:46"><operator pos:start="103:36" pos:end="103:36">&amp;</operator><name pos:start="103:37" pos:end="103:46">local_qiov</name></expr></argument>, <argument pos:start="103:49" pos:end="103:55"><expr pos:start="103:49" pos:end="103:55"><name pos:start="103:49" pos:end="103:55">n_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="105:13" pos:end="109:13"><if pos:start="105:13" pos:end="109:13">if <condition pos:start="105:16" pos:end="105:20">(<expr pos:start="105:17" pos:end="105:19"><name pos:start="105:17" pos:end="105:19">ret</name></expr>)</condition> <block pos:start="105:22" pos:end="109:13">{<block_content pos:start="107:17" pos:end="107:26">

                <goto pos:start="107:17" pos:end="107:26">goto <name pos:start="107:22" pos:end="107:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:25"><expr pos:start="113:9" pos:end="113:24"><name pos:start="113:9" pos:end="113:13">bytes</name> <operator pos:start="113:15" pos:end="113:16">-=</operator> <name pos:start="113:18" pos:end="113:24">n_bytes</name></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:26"><expr pos:start="115:9" pos:end="115:25"><name pos:start="115:9" pos:end="115:14">offset</name> <operator pos:start="115:16" pos:end="115:17">+=</operator> <name pos:start="115:19" pos:end="115:25">n_bytes</name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:30"><expr pos:start="117:9" pos:end="117:29"><name pos:start="117:9" pos:end="117:18">bytes_done</name> <operator pos:start="117:20" pos:end="117:21">+=</operator> <name pos:start="117:23" pos:end="117:29">n_bytes</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="123:5" pos:end="123:12"><expr pos:start="123:5" pos:end="123:11"><name pos:start="123:5" pos:end="123:7">ret</name> <operator pos:start="123:9" pos:end="123:9">=</operator> <literal type="number" pos:start="123:11" pos:end="123:11">0</literal></expr>;</expr_stmt>

<label pos:start="125:1" pos:end="125:5"><name pos:start="125:1" pos:end="125:4">fail</name>:</label>

    <expr_stmt pos:start="127:5" pos:end="127:35"><expr pos:start="127:5" pos:end="127:34"><call pos:start="127:5" pos:end="127:34"><name pos:start="127:5" pos:end="127:24">qemu_co_mutex_unlock</name><argument_list pos:start="127:25" pos:end="127:34">(<argument pos:start="127:26" pos:end="127:33"><expr pos:start="127:26" pos:end="127:33"><operator pos:start="127:26" pos:end="127:26">&amp;</operator><name pos:start="127:27" pos:end="127:33"><name pos:start="127:27" pos:end="127:27">s</name><operator pos:start="127:28" pos:end="127:29">-&gt;</operator><name pos:start="127:30" pos:end="127:33">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:36"><expr pos:start="129:5" pos:end="129:35"><call pos:start="129:5" pos:end="129:35"><name pos:start="129:5" pos:end="129:22">qemu_iovec_destroy</name><argument_list pos:start="129:23" pos:end="129:35">(<argument pos:start="129:24" pos:end="129:34"><expr pos:start="129:24" pos:end="129:34"><operator pos:start="129:24" pos:end="129:24">&amp;</operator><name pos:start="129:25" pos:end="129:34">local_qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="133:5" pos:end="133:15">return <expr pos:start="133:12" pos:end="133:14"><name pos:start="133:12" pos:end="133:14">ret</name></expr>;</return>

</block_content>}</block>
</unit>
