<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/293.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:73"><name pos:start="1:1" pos:end="1:14">opts_type_size</name><argument_list pos:start="1:15" pos:end="1:73">(<argument pos:start="1:16" pos:end="1:25">Visitor *v</argument>, <argument pos:start="1:28" pos:end="1:43">const char *name</argument>, <argument pos:start="1:46" pos:end="1:58">uint64_t *obj</argument>, <argument pos:start="1:61" pos:end="1:72">Error **errp</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:24">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">OptsVisitor</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:19">ov</name> <init pos:start="5:21" pos:end="5:30">= <expr pos:start="5:23" pos:end="5:30"><call pos:start="5:23" pos:end="5:30"><name pos:start="5:23" pos:end="5:27">to_ov</name><argument_list pos:start="5:28" pos:end="5:30">(<argument pos:start="5:29" pos:end="5:29"><expr pos:start="5:29" pos:end="5:29"><name pos:start="5:29" pos:end="5:29">v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">QemuOpt</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">opt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:15">val</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:40"><expr pos:start="13:5" pos:end="13:39"><name pos:start="13:5" pos:end="13:7">opt</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:39"><name pos:start="13:11" pos:end="13:23">lookup_scalar</name><argument_list pos:start="13:24" pos:end="13:39">(<argument pos:start="13:25" pos:end="13:26"><expr pos:start="13:25" pos:end="13:26"><name pos:start="13:25" pos:end="13:26">ov</name></expr></argument>, <argument pos:start="13:29" pos:end="13:32"><expr pos:start="13:29" pos:end="13:32"><name pos:start="13:29" pos:end="13:32">name</name></expr></argument>, <argument pos:start="13:35" pos:end="13:38"><expr pos:start="13:35" pos:end="13:38"><name pos:start="13:35" pos:end="13:38">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:13">(<expr pos:start="15:9" pos:end="15:12"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:12">opt</name></expr>)</condition> <block pos:start="15:15" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:15">

        <return pos:start="17:9" pos:end="17:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:55"><expr pos:start="23:5" pos:end="23:54"><name pos:start="23:5" pos:end="23:7">val</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:54"><name pos:start="23:11" pos:end="23:22">qemu_strtosz</name><argument_list pos:start="23:23" pos:end="23:54">(<argument pos:start="23:24" pos:end="23:47"><expr pos:start="23:24" pos:end="23:47"><ternary pos:start="23:24" pos:end="23:47"><condition pos:start="23:24" pos:end="23:33"><expr pos:start="23:24" pos:end="23:31"><name pos:start="23:24" pos:end="23:31"><name pos:start="23:24" pos:end="23:26">opt</name><operator pos:start="23:27" pos:end="23:28">-&gt;</operator><name pos:start="23:29" pos:end="23:31">str</name></name></expr> ?</condition><then pos:start="23:35" pos:end="23:42"> <expr pos:start="23:35" pos:end="23:42"><name pos:start="23:35" pos:end="23:42"><name pos:start="23:35" pos:end="23:37">opt</name><operator pos:start="23:38" pos:end="23:39">-&gt;</operator><name pos:start="23:40" pos:end="23:42">str</name></name></expr> </then><else pos:start="23:44" pos:end="23:47">: <expr pos:start="23:46" pos:end="23:47"><literal type="string" pos:start="23:46" pos:end="23:47">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="23:50" pos:end="23:53"><expr pos:start="23:50" pos:end="23:53"><name pos:start="23:50" pos:end="23:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:16">(<expr pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:11">val</name> <operator pos:start="25:13" pos:end="25:13">&lt;</operator> <literal type="number" pos:start="25:15" pos:end="25:15">0</literal></expr>)</condition> <block pos:start="25:18" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:15">

        <expr_stmt pos:start="27:9" pos:end="29:73"><expr pos:start="27:9" pos:end="29:72"><call pos:start="27:9" pos:end="29:72"><name pos:start="27:9" pos:end="27:18">error_setg</name><argument_list pos:start="27:19" pos:end="29:72">(<argument pos:start="27:20" pos:end="27:23"><expr pos:start="27:20" pos:end="27:23"><name pos:start="27:20" pos:end="27:23">errp</name></expr></argument>, <argument pos:start="27:26" pos:end="27:53"><expr pos:start="27:26" pos:end="27:53"><name pos:start="27:26" pos:end="27:53">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="27:56" pos:end="27:64"><expr pos:start="27:56" pos:end="27:64"><name pos:start="27:56" pos:end="27:64"><name pos:start="27:56" pos:end="27:58">opt</name><operator pos:start="27:59" pos:end="27:60">-&gt;</operator><name pos:start="27:61" pos:end="27:64">name</name></name></expr></argument>,

                   <argument pos:start="29:20" pos:end="29:71"><expr pos:start="29:20" pos:end="29:71"><literal type="string" pos:start="29:20" pos:end="29:71">"a size value representible as a non-negative int64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:15"><expr pos:start="37:5" pos:end="37:14"><operator pos:start="37:5" pos:end="37:5">*</operator><name pos:start="37:6" pos:end="37:8">obj</name> <operator pos:start="37:10" pos:end="37:10">=</operator> <name pos:start="37:12" pos:end="37:14">val</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:24"><expr pos:start="39:5" pos:end="39:23"><call pos:start="39:5" pos:end="39:23"><name pos:start="39:5" pos:end="39:13">processed</name><argument_list pos:start="39:14" pos:end="39:23">(<argument pos:start="39:15" pos:end="39:16"><expr pos:start="39:15" pos:end="39:16"><name pos:start="39:15" pos:end="39:16">ov</name></expr></argument>, <argument pos:start="39:19" pos:end="39:22"><expr pos:start="39:19" pos:end="39:22"><name pos:start="39:19" pos:end="39:22">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
