<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/451.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">virtio_ioport_write</name><parameter_list pos:start="1:32" pos:end="1:74">(<parameter pos:start="1:33" pos:end="1:44"><decl pos:start="1:33" pos:end="1:44"><type pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:36">void</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:44">opaque</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:59"><decl pos:start="1:47" pos:end="1:59"><type pos:start="1:47" pos:end="1:59"><name pos:start="1:47" pos:end="1:54">uint32_t</name></type> <name pos:start="1:56" pos:end="1:59">addr</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:73"><decl pos:start="1:62" pos:end="1:73"><type pos:start="1:62" pos:end="1:73"><name pos:start="1:62" pos:end="1:69">uint32_t</name></type> <name pos:start="1:71" pos:end="1:73">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="161:1">{<block_content pos:start="5:5" pos:end="159:5">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">VirtIOPCIProxy</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:25">proxy</name> <init pos:start="5:27" pos:end="5:34">= <expr pos:start="5:29" pos:end="5:34"><name pos:start="5:29" pos:end="5:34">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">VirtIODevice</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:22">vdev</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">proxy</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">vdev</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:22">target_phys_addr_t</name></type> <name pos:start="9:24" pos:end="9:25">pa</name></decl>;</decl_stmt>



    <switch pos:start="13:5" pos:end="159:5">switch <condition pos:start="13:12" pos:end="13:17">(<expr pos:start="13:13" pos:end="13:16"><name pos:start="13:13" pos:end="13:16">addr</name></expr>)</condition> <block pos:start="13:19" pos:end="159:5">{<block_content pos:start="15:5" pos:end="157:14">

    <case pos:start="15:5" pos:end="15:35">case <expr pos:start="15:10" pos:end="15:34"><name pos:start="15:10" pos:end="15:34">VIRTIO_PCI_GUEST_FEATURES</name></expr>:</case>

	<comment type="block" pos:start="17:9" pos:end="17:76">/* Guest does not negotiate properly?  We have to assume nothing. */</comment>

	<if_stmt pos:start="19:9" pos:end="29:9"><if pos:start="19:9" pos:end="29:9">if <condition pos:start="19:12" pos:end="19:46">(<expr pos:start="19:13" pos:end="19:45"><name pos:start="19:13" pos:end="19:15">val</name> <operator pos:start="19:17" pos:end="19:17">&amp;</operator> <operator pos:start="19:19" pos:end="19:19">(</operator><literal type="number" pos:start="19:20" pos:end="19:20">1</literal> <operator pos:start="19:22" pos:end="19:23">&lt;&lt;</operator> <name pos:start="19:25" pos:end="19:44">VIRTIO_F_BAD_FEATURE</name><operator pos:start="19:45" pos:end="19:45">)</operator></expr>)</condition> <block pos:start="19:48" pos:end="29:9">{<block_content pos:start="21:13" pos:end="27:24">

	    <if_stmt pos:start="21:13" pos:end="27:24"><if pos:start="21:13" pos:end="23:70">if <condition pos:start="21:16" pos:end="21:35">(<expr pos:start="21:17" pos:end="21:34"><name pos:start="21:17" pos:end="21:34"><name pos:start="21:17" pos:end="21:20">vdev</name><operator pos:start="21:21" pos:end="21:22">-&gt;</operator><name pos:start="21:23" pos:end="21:34">bad_features</name></name></expr>)</condition><block type="pseudo" pos:start="23:17" pos:end="23:70"><block_content pos:start="23:17" pos:end="23:70">

		<expr_stmt pos:start="23:17" pos:end="23:70"><expr pos:start="23:17" pos:end="23:69"><name pos:start="23:17" pos:end="23:19">val</name> <operator pos:start="23:21" pos:end="23:21">=</operator> <name pos:start="23:23" pos:end="23:42"><name pos:start="23:23" pos:end="23:27">proxy</name><operator pos:start="23:28" pos:end="23:29">-&gt;</operator><name pos:start="23:30" pos:end="23:42">host_features</name></name> <operator pos:start="23:44" pos:end="23:44">&amp;</operator> <call pos:start="23:46" pos:end="23:69"><name pos:start="23:46" pos:end="23:63"><name pos:start="23:46" pos:end="23:49">vdev</name><operator pos:start="23:50" pos:end="23:51">-&gt;</operator><name pos:start="23:52" pos:end="23:63">bad_features</name></name><argument_list pos:start="23:64" pos:end="23:69">(<argument pos:start="23:65" pos:end="23:68"><expr pos:start="23:65" pos:end="23:68"><name pos:start="23:65" pos:end="23:68">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	    <else pos:start="25:13" pos:end="27:24">else<block type="pseudo" pos:start="27:17" pos:end="27:24"><block_content pos:start="27:17" pos:end="27:24">

		<expr_stmt pos:start="27:17" pos:end="27:24"><expr pos:start="27:17" pos:end="27:23"><name pos:start="27:17" pos:end="27:19">val</name> <operator pos:start="27:21" pos:end="27:21">=</operator> <literal type="number" pos:start="27:23" pos:end="27:23">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	</block_content>}</block></if></if_stmt>

        <if_stmt pos:start="31:9" pos:end="33:42"><if pos:start="31:9" pos:end="33:42">if <condition pos:start="31:12" pos:end="31:31">(<expr pos:start="31:13" pos:end="31:30"><name pos:start="31:13" pos:end="31:30"><name pos:start="31:13" pos:end="31:16">vdev</name><operator pos:start="31:17" pos:end="31:18">-&gt;</operator><name pos:start="31:19" pos:end="31:30">set_features</name></name></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:42"><block_content pos:start="33:13" pos:end="33:42">

            <expr_stmt pos:start="33:13" pos:end="33:42"><expr pos:start="33:13" pos:end="33:41"><call pos:start="33:13" pos:end="33:41"><name pos:start="33:13" pos:end="33:30"><name pos:start="33:13" pos:end="33:16">vdev</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:30">set_features</name></name><argument_list pos:start="33:31" pos:end="33:41">(<argument pos:start="33:32" pos:end="33:35"><expr pos:start="33:32" pos:end="33:35"><name pos:start="33:32" pos:end="33:35">vdev</name></expr></argument>, <argument pos:start="33:38" pos:end="33:40"><expr pos:start="33:38" pos:end="33:40"><name pos:start="33:38" pos:end="33:40">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:35"><expr pos:start="35:9" pos:end="35:34"><name pos:start="35:9" pos:end="35:28"><name pos:start="35:9" pos:end="35:12">vdev</name><operator pos:start="35:13" pos:end="35:14">-&gt;</operator><name pos:start="35:15" pos:end="35:28">guest_features</name></name> <operator pos:start="35:30" pos:end="35:30">=</operator> <name pos:start="35:32" pos:end="35:34">val</name></expr>;</expr_stmt>

        <break pos:start="37:9" pos:end="37:14">break;</break>

    <case pos:start="39:5" pos:end="39:30">case <expr pos:start="39:10" pos:end="39:29"><name pos:start="39:10" pos:end="39:29">VIRTIO_PCI_QUEUE_PFN</name></expr>:</case>

        <expr_stmt pos:start="41:9" pos:end="41:68"><expr pos:start="41:9" pos:end="41:67"><name pos:start="41:9" pos:end="41:10">pa</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <operator pos:start="41:14" pos:end="41:14">(</operator><name pos:start="41:15" pos:end="41:32">target_phys_addr_t</name><operator pos:start="41:33" pos:end="41:33">)</operator><name pos:start="41:34" pos:end="41:36">val</name> <operator pos:start="41:38" pos:end="41:39">&lt;&lt;</operator> <name pos:start="41:41" pos:end="41:67">VIRTIO_PCI_QUEUE_ADDR_SHIFT</name></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="55:61"><if pos:start="43:9" pos:end="51:9">if <condition pos:start="43:12" pos:end="43:20">(<expr pos:start="43:13" pos:end="43:19"><name pos:start="43:13" pos:end="43:14">pa</name> <operator pos:start="43:16" pos:end="43:17">==</operator> <literal type="number" pos:start="43:19" pos:end="43:19">0</literal></expr>)</condition> <block pos:start="43:22" pos:end="51:9">{<block_content pos:start="45:13" pos:end="49:52">

            <expr_stmt pos:start="45:13" pos:end="45:45"><expr pos:start="45:13" pos:end="45:44"><call pos:start="45:13" pos:end="45:44"><name pos:start="45:13" pos:end="45:37">virtio_pci_stop_ioeventfd</name><argument_list pos:start="45:38" pos:end="45:44">(<argument pos:start="45:39" pos:end="45:43"><expr pos:start="45:39" pos:end="45:43"><name pos:start="45:39" pos:end="45:43">proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:38"><expr pos:start="47:13" pos:end="47:37"><call pos:start="47:13" pos:end="47:37"><name pos:start="47:13" pos:end="47:24">virtio_reset</name><argument_list pos:start="47:25" pos:end="47:37">(<argument pos:start="47:26" pos:end="47:36"><expr pos:start="47:26" pos:end="47:36"><name pos:start="47:26" pos:end="47:36"><name pos:start="47:26" pos:end="47:30">proxy</name><operator pos:start="47:31" pos:end="47:32">-&gt;</operator><name pos:start="47:33" pos:end="47:36">vdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:52"><expr pos:start="49:13" pos:end="49:51"><call pos:start="49:13" pos:end="49:51"><name pos:start="49:13" pos:end="49:34">msix_unuse_all_vectors</name><argument_list pos:start="49:35" pos:end="49:51">(<argument pos:start="49:36" pos:end="49:50"><expr pos:start="49:36" pos:end="49:50"><operator pos:start="49:36" pos:end="49:36">&amp;</operator><name pos:start="49:37" pos:end="49:50"><name pos:start="49:37" pos:end="49:41">proxy</name><operator pos:start="49:42" pos:end="49:43">-&gt;</operator><name pos:start="49:44" pos:end="49:50">pci_dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if>

        <else pos:start="53:9" pos:end="55:61">else<block type="pseudo" pos:start="55:13" pos:end="55:61"><block_content pos:start="55:13" pos:end="55:61">

            <expr_stmt pos:start="55:13" pos:end="55:61"><expr pos:start="55:13" pos:end="55:60"><call pos:start="55:13" pos:end="55:60"><name pos:start="55:13" pos:end="55:33">virtio_queue_set_addr</name><argument_list pos:start="55:34" pos:end="55:60">(<argument pos:start="55:35" pos:end="55:38"><expr pos:start="55:35" pos:end="55:38"><name pos:start="55:35" pos:end="55:38">vdev</name></expr></argument>, <argument pos:start="55:41" pos:end="55:55"><expr pos:start="55:41" pos:end="55:55"><name pos:start="55:41" pos:end="55:55"><name pos:start="55:41" pos:end="55:44">vdev</name><operator pos:start="55:45" pos:end="55:46">-&gt;</operator><name pos:start="55:47" pos:end="55:55">queue_sel</name></name></expr></argument>, <argument pos:start="55:58" pos:end="55:59"><expr pos:start="55:58" pos:end="55:59"><name pos:start="55:58" pos:end="55:59">pa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <case pos:start="59:5" pos:end="59:30">case <expr pos:start="59:10" pos:end="59:29"><name pos:start="59:10" pos:end="59:29">VIRTIO_PCI_QUEUE_SEL</name></expr>:</case>

        <if_stmt pos:start="61:9" pos:end="63:34"><if pos:start="61:9" pos:end="63:34">if <condition pos:start="61:12" pos:end="61:39">(<expr pos:start="61:13" pos:end="61:38"><name pos:start="61:13" pos:end="61:15">val</name> <operator pos:start="61:17" pos:end="61:17">&lt;</operator> <name pos:start="61:19" pos:end="61:38">VIRTIO_PCI_QUEUE_MAX</name></expr>)</condition><block type="pseudo" pos:start="63:13" pos:end="63:34"><block_content pos:start="63:13" pos:end="63:34">

            <expr_stmt pos:start="63:13" pos:end="63:34"><expr pos:start="63:13" pos:end="63:33"><name pos:start="63:13" pos:end="63:27"><name pos:start="63:13" pos:end="63:16">vdev</name><operator pos:start="63:17" pos:end="63:18">-&gt;</operator><name pos:start="63:19" pos:end="63:27">queue_sel</name></name> <operator pos:start="63:29" pos:end="63:29">=</operator> <name pos:start="63:31" pos:end="63:33">val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="65:9" pos:end="65:14">break;</break>

    <case pos:start="67:5" pos:end="67:33">case <expr pos:start="67:10" pos:end="67:32"><name pos:start="67:10" pos:end="67:32">VIRTIO_PCI_QUEUE_NOTIFY</name></expr>:</case>

        <expr_stmt pos:start="69:9" pos:end="69:39"><expr pos:start="69:9" pos:end="69:38"><call pos:start="69:9" pos:end="69:38"><name pos:start="69:9" pos:end="69:27">virtio_queue_notify</name><argument_list pos:start="69:28" pos:end="69:38">(<argument pos:start="69:29" pos:end="69:32"><expr pos:start="69:29" pos:end="69:32"><name pos:start="69:29" pos:end="69:32">vdev</name></expr></argument>, <argument pos:start="69:35" pos:end="69:37"><expr pos:start="69:35" pos:end="69:37"><name pos:start="69:35" pos:end="69:37">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="71:9" pos:end="71:14">break;</break>

    <case pos:start="73:5" pos:end="73:27">case <expr pos:start="73:10" pos:end="73:26"><name pos:start="73:10" pos:end="73:26">VIRTIO_PCI_STATUS</name></expr>:</case>

        <if_stmt pos:start="75:9" pos:end="79:9"><if pos:start="75:9" pos:end="79:9">if <condition pos:start="75:12" pos:end="75:47">(<expr pos:start="75:13" pos:end="75:46"><operator pos:start="75:13" pos:end="75:13">!</operator><operator pos:start="75:14" pos:end="75:14">(</operator><name pos:start="75:15" pos:end="75:17">val</name> <operator pos:start="75:19" pos:end="75:19">&amp;</operator> <name pos:start="75:21" pos:end="75:45">VIRTIO_CONFIG_S_DRIVER_OK</name><operator pos:start="75:46" pos:end="75:46">)</operator></expr>)</condition> <block pos:start="75:49" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:45">

            <expr_stmt pos:start="77:13" pos:end="77:45"><expr pos:start="77:13" pos:end="77:44"><call pos:start="77:13" pos:end="77:44"><name pos:start="77:13" pos:end="77:37">virtio_pci_stop_ioeventfd</name><argument_list pos:start="77:38" pos:end="77:44">(<argument pos:start="77:39" pos:end="77:43"><expr pos:start="77:39" pos:end="77:43"><name pos:start="77:39" pos:end="77:43">proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:44"><expr pos:start="83:9" pos:end="83:43"><call pos:start="83:9" pos:end="83:43"><name pos:start="83:9" pos:end="83:25">virtio_set_status</name><argument_list pos:start="83:26" pos:end="83:43">(<argument pos:start="83:27" pos:end="83:30"><expr pos:start="83:27" pos:end="83:30"><name pos:start="83:27" pos:end="83:30">vdev</name></expr></argument>, <argument pos:start="83:33" pos:end="83:42"><expr pos:start="83:33" pos:end="83:42"><name pos:start="83:33" pos:end="83:35">val</name> <operator pos:start="83:37" pos:end="83:37">&amp;</operator> <literal type="number" pos:start="83:39" pos:end="83:42">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="87:9" pos:end="91:9"><if pos:start="87:9" pos:end="91:9">if <condition pos:start="87:12" pos:end="87:44">(<expr pos:start="87:13" pos:end="87:43"><name pos:start="87:13" pos:end="87:15">val</name> <operator pos:start="87:17" pos:end="87:17">&amp;</operator> <name pos:start="87:19" pos:end="87:43">VIRTIO_CONFIG_S_DRIVER_OK</name></expr>)</condition> <block pos:start="87:46" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:46">

            <expr_stmt pos:start="89:13" pos:end="89:46"><expr pos:start="89:13" pos:end="89:45"><call pos:start="89:13" pos:end="89:45"><name pos:start="89:13" pos:end="89:38">virtio_pci_start_ioeventfd</name><argument_list pos:start="89:39" pos:end="89:45">(<argument pos:start="89:40" pos:end="89:44"><expr pos:start="89:40" pos:end="89:44"><name pos:start="89:40" pos:end="89:44">proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="95:9" pos:end="101:9"><if pos:start="95:9" pos:end="101:9">if <condition pos:start="95:12" pos:end="95:30">(<expr pos:start="95:13" pos:end="95:29"><name pos:start="95:13" pos:end="95:24"><name pos:start="95:13" pos:end="95:16">vdev</name><operator pos:start="95:17" pos:end="95:18">-&gt;</operator><name pos:start="95:19" pos:end="95:24">status</name></name> <operator pos:start="95:26" pos:end="95:27">==</operator> <literal type="number" pos:start="95:29" pos:end="95:29">0</literal></expr>)</condition> <block pos:start="95:32" pos:end="101:9">{<block_content pos:start="97:13" pos:end="99:52">

            <expr_stmt pos:start="97:13" pos:end="97:38"><expr pos:start="97:13" pos:end="97:37"><call pos:start="97:13" pos:end="97:37"><name pos:start="97:13" pos:end="97:24">virtio_reset</name><argument_list pos:start="97:25" pos:end="97:37">(<argument pos:start="97:26" pos:end="97:36"><expr pos:start="97:26" pos:end="97:36"><name pos:start="97:26" pos:end="97:36"><name pos:start="97:26" pos:end="97:30">proxy</name><operator pos:start="97:31" pos:end="97:32">-&gt;</operator><name pos:start="97:33" pos:end="97:36">vdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:52"><expr pos:start="99:13" pos:end="99:51"><call pos:start="99:13" pos:end="99:51"><name pos:start="99:13" pos:end="99:34">msix_unuse_all_vectors</name><argument_list pos:start="99:35" pos:end="99:51">(<argument pos:start="99:36" pos:end="99:50"><expr pos:start="99:36" pos:end="99:50"><operator pos:start="99:36" pos:end="99:36">&amp;</operator><name pos:start="99:37" pos:end="99:50"><name pos:start="99:37" pos:end="99:41">proxy</name><operator pos:start="99:42" pos:end="99:43">-&gt;</operator><name pos:start="99:44" pos:end="99:50">pci_dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="105:9" pos:end="109:33">/* Linux before 2.6.34 sets the device as OK without enabling

           the PCI device bus master bit. In this case we need to disable

           some safety checks. */</comment>

        <if_stmt pos:start="111:9" pos:end="117:9"><if pos:start="111:9" pos:end="117:9">if <condition pos:start="111:12" pos:end="113:71">(<expr pos:start="111:13" pos:end="113:70"><operator pos:start="111:13" pos:end="111:13">(</operator><name pos:start="111:14" pos:end="111:16">val</name> <operator pos:start="111:18" pos:end="111:18">&amp;</operator> <name pos:start="111:20" pos:end="111:44">VIRTIO_CONFIG_S_DRIVER_OK</name><operator pos:start="111:45" pos:end="111:45">)</operator> <operator pos:start="111:47" pos:end="111:48">&amp;&amp;</operator>

            <operator pos:start="113:13" pos:end="113:13">!</operator><operator pos:start="113:14" pos:end="113:14">(</operator><name pos:start="113:15" pos:end="113:48"><name pos:start="113:15" pos:end="113:19">proxy</name><operator pos:start="113:20" pos:end="113:21">-&gt;</operator><name pos:start="113:22" pos:end="113:28">pci_dev</name><operator pos:start="113:29" pos:end="113:29">.</operator><name pos:start="113:30" pos:end="113:35">config</name><index pos:start="113:36" pos:end="113:48">[<expr pos:start="113:37" pos:end="113:47"><name pos:start="113:37" pos:end="113:47">PCI_COMMAND</name></expr>]</index></name> <operator pos:start="113:50" pos:end="113:50">&amp;</operator> <name pos:start="113:52" pos:end="113:69">PCI_COMMAND_MASTER</name><operator pos:start="113:70" pos:end="113:70">)</operator></expr>)</condition> <block pos:start="113:73" pos:end="117:9">{<block_content pos:start="115:13" pos:end="115:59">

            <expr_stmt pos:start="115:13" pos:end="115:59"><expr pos:start="115:13" pos:end="115:58"><name pos:start="115:13" pos:end="115:24"><name pos:start="115:13" pos:end="115:17">proxy</name><operator pos:start="115:18" pos:end="115:19">-&gt;</operator><name pos:start="115:20" pos:end="115:24">flags</name></name> <operator pos:start="115:26" pos:end="115:27">|=</operator> <name pos:start="115:29" pos:end="115:58">VIRTIO_PCI_FLAG_BUS_MASTER_BUG</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="119:9" pos:end="119:14">break;</break>

    <case pos:start="121:5" pos:end="121:34">case <expr pos:start="121:10" pos:end="121:33"><name pos:start="121:10" pos:end="121:33">VIRTIO_MSI_CONFIG_VECTOR</name></expr>:</case>

        <expr_stmt pos:start="123:9" pos:end="123:64"><expr pos:start="123:9" pos:end="123:63"><call pos:start="123:9" pos:end="123:63"><name pos:start="123:9" pos:end="123:25">msix_vector_unuse</name><argument_list pos:start="123:26" pos:end="123:63">(<argument pos:start="123:27" pos:end="123:41"><expr pos:start="123:27" pos:end="123:41"><operator pos:start="123:27" pos:end="123:27">&amp;</operator><name pos:start="123:28" pos:end="123:41"><name pos:start="123:28" pos:end="123:32">proxy</name><operator pos:start="123:33" pos:end="123:34">-&gt;</operator><name pos:start="123:35" pos:end="123:41">pci_dev</name></name></expr></argument>, <argument pos:start="123:44" pos:end="123:62"><expr pos:start="123:44" pos:end="123:62"><name pos:start="123:44" pos:end="123:62"><name pos:start="123:44" pos:end="123:47">vdev</name><operator pos:start="123:48" pos:end="123:49">-&gt;</operator><name pos:start="123:50" pos:end="123:62">config_vector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="125:9" pos:end="125:73">/* Make it possible for guest to discover an error took place. */</comment>

        <if_stmt pos:start="127:9" pos:end="129:35"><if pos:start="127:9" pos:end="129:35">if <condition pos:start="127:12" pos:end="127:54">(<expr pos:start="127:13" pos:end="127:53"><call pos:start="127:13" pos:end="127:49"><name pos:start="127:13" pos:end="127:27">msix_vector_use</name><argument_list pos:start="127:28" pos:end="127:49">(<argument pos:start="127:29" pos:end="127:43"><expr pos:start="127:29" pos:end="127:43"><operator pos:start="127:29" pos:end="127:29">&amp;</operator><name pos:start="127:30" pos:end="127:43"><name pos:start="127:30" pos:end="127:34">proxy</name><operator pos:start="127:35" pos:end="127:36">-&gt;</operator><name pos:start="127:37" pos:end="127:43">pci_dev</name></name></expr></argument>, <argument pos:start="127:46" pos:end="127:48"><expr pos:start="127:46" pos:end="127:48"><name pos:start="127:46" pos:end="127:48">val</name></expr></argument>)</argument_list></call> <operator pos:start="127:51" pos:end="127:51">&lt;</operator> <literal type="number" pos:start="127:53" pos:end="127:53">0</literal></expr>)</condition><block type="pseudo" pos:start="129:13" pos:end="129:35"><block_content pos:start="129:13" pos:end="129:35">

            <expr_stmt pos:start="129:13" pos:end="129:35"><expr pos:start="129:13" pos:end="129:34"><name pos:start="129:13" pos:end="129:15">val</name> <operator pos:start="129:17" pos:end="129:17">=</operator> <name pos:start="129:19" pos:end="129:34">VIRTIO_NO_VECTOR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:34"><expr pos:start="131:9" pos:end="131:33"><name pos:start="131:9" pos:end="131:27"><name pos:start="131:9" pos:end="131:12">vdev</name><operator pos:start="131:13" pos:end="131:14">-&gt;</operator><name pos:start="131:15" pos:end="131:27">config_vector</name></name> <operator pos:start="131:29" pos:end="131:29">=</operator> <name pos:start="131:31" pos:end="131:33">val</name></expr>;</expr_stmt>

        <break pos:start="133:9" pos:end="133:14">break;</break>

    <case pos:start="135:5" pos:end="135:33">case <expr pos:start="135:10" pos:end="135:32"><name pos:start="135:10" pos:end="135:32">VIRTIO_MSI_QUEUE_VECTOR</name></expr>:</case>

        <expr_stmt pos:start="137:9" pos:end="139:70"><expr pos:start="137:9" pos:end="139:69"><call pos:start="137:9" pos:end="139:69"><name pos:start="137:9" pos:end="137:25">msix_vector_unuse</name><argument_list pos:start="137:26" pos:end="139:69">(<argument pos:start="137:27" pos:end="137:41"><expr pos:start="137:27" pos:end="137:41"><operator pos:start="137:27" pos:end="137:27">&amp;</operator><name pos:start="137:28" pos:end="137:41"><name pos:start="137:28" pos:end="137:32">proxy</name><operator pos:start="137:33" pos:end="137:34">-&gt;</operator><name pos:start="137:35" pos:end="137:41">pci_dev</name></name></expr></argument>,

                          <argument pos:start="139:27" pos:end="139:68"><expr pos:start="139:27" pos:end="139:68"><call pos:start="139:27" pos:end="139:68"><name pos:start="139:27" pos:end="139:45">virtio_queue_vector</name><argument_list pos:start="139:46" pos:end="139:68">(<argument pos:start="139:47" pos:end="139:50"><expr pos:start="139:47" pos:end="139:50"><name pos:start="139:47" pos:end="139:50">vdev</name></expr></argument>, <argument pos:start="139:53" pos:end="139:67"><expr pos:start="139:53" pos:end="139:67"><name pos:start="139:53" pos:end="139:67"><name pos:start="139:53" pos:end="139:56">vdev</name><operator pos:start="139:57" pos:end="139:58">-&gt;</operator><name pos:start="139:59" pos:end="139:67">queue_sel</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="141:9" pos:end="141:73">/* Make it possible for guest to discover an error took place. */</comment>

        <if_stmt pos:start="143:9" pos:end="145:35"><if pos:start="143:9" pos:end="145:35">if <condition pos:start="143:12" pos:end="143:54">(<expr pos:start="143:13" pos:end="143:53"><call pos:start="143:13" pos:end="143:49"><name pos:start="143:13" pos:end="143:27">msix_vector_use</name><argument_list pos:start="143:28" pos:end="143:49">(<argument pos:start="143:29" pos:end="143:43"><expr pos:start="143:29" pos:end="143:43"><operator pos:start="143:29" pos:end="143:29">&amp;</operator><name pos:start="143:30" pos:end="143:43"><name pos:start="143:30" pos:end="143:34">proxy</name><operator pos:start="143:35" pos:end="143:36">-&gt;</operator><name pos:start="143:37" pos:end="143:43">pci_dev</name></name></expr></argument>, <argument pos:start="143:46" pos:end="143:48"><expr pos:start="143:46" pos:end="143:48"><name pos:start="143:46" pos:end="143:48">val</name></expr></argument>)</argument_list></call> <operator pos:start="143:51" pos:end="143:51">&lt;</operator> <literal type="number" pos:start="143:53" pos:end="143:53">0</literal></expr>)</condition><block type="pseudo" pos:start="145:13" pos:end="145:35"><block_content pos:start="145:13" pos:end="145:35">

            <expr_stmt pos:start="145:13" pos:end="145:35"><expr pos:start="145:13" pos:end="145:34"><name pos:start="145:13" pos:end="145:15">val</name> <operator pos:start="145:17" pos:end="145:17">=</operator> <name pos:start="145:19" pos:end="145:34">VIRTIO_NO_VECTOR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:60"><expr pos:start="147:9" pos:end="147:59"><call pos:start="147:9" pos:end="147:59"><name pos:start="147:9" pos:end="147:31">virtio_queue_set_vector</name><argument_list pos:start="147:32" pos:end="147:59">(<argument pos:start="147:33" pos:end="147:36"><expr pos:start="147:33" pos:end="147:36"><name pos:start="147:33" pos:end="147:36">vdev</name></expr></argument>, <argument pos:start="147:39" pos:end="147:53"><expr pos:start="147:39" pos:end="147:53"><name pos:start="147:39" pos:end="147:53"><name pos:start="147:39" pos:end="147:42">vdev</name><operator pos:start="147:43" pos:end="147:44">-&gt;</operator><name pos:start="147:45" pos:end="147:53">queue_sel</name></name></expr></argument>, <argument pos:start="147:56" pos:end="147:58"><expr pos:start="147:56" pos:end="147:58"><name pos:start="147:56" pos:end="147:58">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="149:9" pos:end="149:14">break;</break>

    <default pos:start="151:5" pos:end="151:12">default:</default>

        <expr_stmt pos:start="153:9" pos:end="155:42"><expr pos:start="153:9" pos:end="155:41"><call pos:start="153:9" pos:end="155:41"><name pos:start="153:9" pos:end="153:20">error_report</name><argument_list pos:start="153:21" pos:end="155:41">(<argument pos:start="153:22" pos:end="153:61"><expr pos:start="153:22" pos:end="153:61"><literal type="string" pos:start="153:22" pos:end="153:61">"%s: unexpected address 0x%x value 0x%x"</literal></expr></argument>,

                     <argument pos:start="155:22" pos:end="155:29"><expr pos:start="155:22" pos:end="155:29"><name pos:start="155:22" pos:end="155:29">__func__</name></expr></argument>, <argument pos:start="155:32" pos:end="155:35"><expr pos:start="155:32" pos:end="155:35"><name pos:start="155:32" pos:end="155:35">addr</name></expr></argument>, <argument pos:start="155:38" pos:end="155:40"><expr pos:start="155:38" pos:end="155:40"><name pos:start="155:38" pos:end="155:40">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="157:9" pos:end="157:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
