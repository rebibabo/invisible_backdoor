<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16146.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">nbd_open</name><parameter_list pos:start="1:20" pos:end="3:33">(<parameter pos:start="1:21" pos:end="1:40"><decl pos:start="1:21" pos:end="1:40"><type pos:start="1:21" pos:end="1:40"><name pos:start="1:21" pos:end="1:36">BlockDriverState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">bs</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:56"><decl pos:start="1:43" pos:end="1:56"><type pos:start="1:43" pos:end="1:56"><name pos:start="1:43" pos:end="1:47">QDict</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:56">options</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:67"><decl pos:start="1:59" pos:end="1:67"><type pos:start="1:59" pos:end="1:67"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:67">flags</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:32"><decl pos:start="3:21" pos:end="3:32"><type pos:start="3:21" pos:end="3:32"><name pos:start="3:21" pos:end="3:25">Error</name> <modifier pos:start="3:27" pos:end="3:27">*</modifier><modifier pos:start="3:28" pos:end="3:28">*</modifier></type><name pos:start="3:29" pos:end="3:32">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="51:1">{<block_content pos:start="7:5" pos:end="49:18">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BDRVNBDState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:32">= <expr pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:24">bs</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:16">export</name> <init pos:start="9:18" pos:end="9:23">= <expr pos:start="9:20" pos:end="9:23"><name pos:start="9:20" pos:end="9:23">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:14">result</name></decl>, <decl pos:start="11:17" pos:end="11:20"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:17" pos:end="11:20">sock</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:64">/* Pop the config into our state object. Exit if invalid. */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:45"><expr pos:start="17:5" pos:end="17:44"><name pos:start="17:5" pos:end="17:10">result</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <call pos:start="17:14" pos:end="17:44"><name pos:start="17:14" pos:end="17:23">nbd_config</name><argument_list pos:start="17:24" pos:end="17:44">(<argument pos:start="17:25" pos:end="17:25"><expr pos:start="17:25" pos:end="17:25"><name pos:start="17:25" pos:end="17:25">s</name></expr></argument>, <argument pos:start="17:28" pos:end="17:34"><expr pos:start="17:28" pos:end="17:34"><name pos:start="17:28" pos:end="17:34">options</name></expr></argument>, <argument pos:start="17:37" pos:end="17:43"><expr pos:start="17:37" pos:end="17:43"><operator pos:start="17:37" pos:end="17:37">&amp;</operator><name pos:start="17:38" pos:end="17:43">export</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:20">(<expr pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:14">result</name> <operator pos:start="19:16" pos:end="19:17">!=</operator> <literal type="number" pos:start="19:19" pos:end="19:19">0</literal></expr>)</condition> <block pos:start="19:22" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:22">

        <return pos:start="21:9" pos:end="21:22">return <expr pos:start="21:16" pos:end="21:21"><name pos:start="21:16" pos:end="21:21">result</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="27:5" pos:end="31:7">/* establish TCP connection, return error if it fails

     * TODO: Configurable retry-until-timeout behaviour.

     */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:40"><expr pos:start="33:5" pos:end="33:39"><name pos:start="33:5" pos:end="33:8">sock</name> <operator pos:start="33:10" pos:end="33:10">=</operator> <call pos:start="33:12" pos:end="33:39"><name pos:start="33:12" pos:end="33:35">nbd_establish_connection</name><argument_list pos:start="33:36" pos:end="33:39">(<argument pos:start="33:37" pos:end="33:38"><expr pos:start="33:37" pos:end="33:38"><name pos:start="33:37" pos:end="33:38">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:17">(<expr pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:12">sock</name> <operator pos:start="35:14" pos:end="35:14">&lt;</operator> <literal type="number" pos:start="35:16" pos:end="35:16">0</literal></expr>)</condition> <block pos:start="35:19" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:20">

        <return pos:start="37:9" pos:end="37:20">return <expr pos:start="37:16" pos:end="37:19"><name pos:start="37:16" pos:end="37:19">sock</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:23">/* NBD handshake */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:67"><expr pos:start="45:5" pos:end="45:66"><name pos:start="45:5" pos:end="45:10">result</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <call pos:start="45:14" pos:end="45:66"><name pos:start="45:14" pos:end="45:36">nbd_client_session_init</name><argument_list pos:start="45:37" pos:end="45:66">(<argument pos:start="45:38" pos:end="45:47"><expr pos:start="45:38" pos:end="45:47"><operator pos:start="45:38" pos:end="45:38">&amp;</operator><name pos:start="45:39" pos:end="45:47"><name pos:start="45:39" pos:end="45:39">s</name><operator pos:start="45:40" pos:end="45:41">-&gt;</operator><name pos:start="45:42" pos:end="45:47">client</name></name></expr></argument>, <argument pos:start="45:50" pos:end="45:51"><expr pos:start="45:50" pos:end="45:51"><name pos:start="45:50" pos:end="45:51">bs</name></expr></argument>, <argument pos:start="45:54" pos:end="45:57"><expr pos:start="45:54" pos:end="45:57"><name pos:start="45:54" pos:end="45:57">sock</name></expr></argument>, <argument pos:start="45:60" pos:end="45:65"><expr pos:start="45:60" pos:end="45:65"><name pos:start="45:60" pos:end="45:65">export</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:19"><expr pos:start="47:5" pos:end="47:18"><call pos:start="47:5" pos:end="47:18"><name pos:start="47:5" pos:end="47:10">g_free</name><argument_list pos:start="47:11" pos:end="47:18">(<argument pos:start="47:12" pos:end="47:17"><expr pos:start="47:12" pos:end="47:17"><name pos:start="47:12" pos:end="47:17">export</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="49:5" pos:end="49:18">return <expr pos:start="49:12" pos:end="49:17"><name pos:start="49:12" pos:end="49:17">result</name></expr>;</return>

</block_content>}</block></function>
</unit>
