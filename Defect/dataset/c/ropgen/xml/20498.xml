<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20498.c" pos:tabs="8"><function pos:start="1:1" pos:end="171:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">gen_arith_imm</name><parameter_list pos:start="1:26" pos:end="3:54">(<parameter pos:start="1:27" pos:end="1:43"><decl pos:start="1:27" pos:end="1:43"><type pos:start="1:27" pos:end="1:43"><name pos:start="1:27" pos:end="1:38">DisasContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">ctx</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:57"><decl pos:start="1:46" pos:end="1:57"><type pos:start="1:46" pos:end="1:57"><name pos:start="1:46" pos:end="1:53">uint32_t</name></type> <name pos:start="1:55" pos:end="1:57">opc</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:32"><decl pos:start="3:27" pos:end="3:32"><type pos:start="3:27" pos:end="3:32"><name pos:start="3:27" pos:end="3:29">int</name></type> <name pos:start="3:31" pos:end="3:32">rt</name></decl></parameter>, <parameter pos:start="3:35" pos:end="3:40"><decl pos:start="3:35" pos:end="3:40"><type pos:start="3:35" pos:end="3:40"><name pos:start="3:35" pos:end="3:37">int</name></type> <name pos:start="3:39" pos:end="3:40">rs</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:53"><decl pos:start="3:43" pos:end="3:53"><type pos:start="3:43" pos:end="3:53"><name pos:start="3:43" pos:end="3:49">int16_t</name></type> <name pos:start="3:51" pos:end="3:53">imm</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="171:1">{<block_content pos:start="7:5" pos:end="169:83">

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">target_ulong</name></type> <name pos:start="7:18" pos:end="7:21">uimm</name> <init pos:start="7:23" pos:end="7:40">= <expr pos:start="7:25" pos:end="7:40"><operator pos:start="7:25" pos:end="7:25">(</operator><name pos:start="7:26" pos:end="7:36">target_long</name><operator pos:start="7:37" pos:end="7:37">)</operator><name pos:start="7:38" pos:end="7:40">imm</name></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="7:43" pos:end="7:73">/* Sign extend to 32/64 bits */</comment>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:19">opn</name> <init pos:start="9:21" pos:end="9:33">= <expr pos:start="9:23" pos:end="9:33"><literal type="string" pos:start="9:23" pos:end="9:33">"imm arith"</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="23:5"><if pos:start="13:5" pos:end="23:5">if <condition pos:start="13:8" pos:end="13:55">(<expr pos:start="13:9" pos:end="13:54"><name pos:start="13:9" pos:end="13:10">rt</name> <operator pos:start="13:12" pos:end="13:13">==</operator> <literal type="number" pos:start="13:15" pos:end="13:15">0</literal> <operator pos:start="13:17" pos:end="13:18">&amp;&amp;</operator> <name pos:start="13:20" pos:end="13:22">opc</name> <operator pos:start="13:24" pos:end="13:25">!=</operator> <name pos:start="13:27" pos:end="13:34">OPC_ADDI</name> <operator pos:start="13:36" pos:end="13:37">&amp;&amp;</operator> <name pos:start="13:39" pos:end="13:41">opc</name> <operator pos:start="13:43" pos:end="13:44">!=</operator> <name pos:start="13:46" pos:end="13:54">OPC_DADDI</name></expr>)</condition> <block pos:start="13:57" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:15">

        <comment type="block" pos:start="15:9" pos:end="17:76">/* If no destination, treat it as a NOP.

           For addi, we must generate the overflow exception when needed. */</comment>

        <expr_stmt pos:start="19:9" pos:end="19:26"><expr pos:start="19:9" pos:end="19:25"><call pos:start="19:9" pos:end="19:25"><name pos:start="19:9" pos:end="19:18">MIPS_DEBUG</name><argument_list pos:start="19:19" pos:end="19:25">(<argument pos:start="19:20" pos:end="19:24"><expr pos:start="19:20" pos:end="19:24"><literal type="string" pos:start="19:20" pos:end="19:24">"NOP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <switch pos:start="25:5" pos:end="165:5">switch <condition pos:start="25:12" pos:end="25:16">(<expr pos:start="25:13" pos:end="25:15"><name pos:start="25:13" pos:end="25:15">opc</name></expr>)</condition> <block pos:start="25:18" pos:end="165:5">{<block_content pos:start="27:5" pos:end="164:0">

    <case pos:start="27:5" pos:end="27:18">case <expr pos:start="27:10" pos:end="27:17"><name pos:start="27:10" pos:end="27:17">OPC_ADDI</name></expr>:</case>

        <block pos:start="29:9" pos:end="73:9">{<block_content pos:start="31:13" pos:end="71:30">

            <decl_stmt pos:start="31:13" pos:end="31:43"><decl pos:start="31:13" pos:end="31:42"><type pos:start="31:13" pos:end="31:16"><name pos:start="31:13" pos:end="31:16">TCGv</name></type> <name pos:start="31:18" pos:end="31:19">t0</name> <init pos:start="31:21" pos:end="31:42">= <expr pos:start="31:23" pos:end="31:42"><call pos:start="31:23" pos:end="31:42"><name pos:start="31:23" pos:end="31:40">tcg_temp_local_new</name><argument_list pos:start="31:41" pos:end="31:42">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="33:13" pos:end="33:37"><decl pos:start="33:13" pos:end="33:36"><type pos:start="33:13" pos:end="33:16"><name pos:start="33:13" pos:end="33:16">TCGv</name></type> <name pos:start="33:18" pos:end="33:19">t1</name> <init pos:start="33:21" pos:end="33:36">= <expr pos:start="33:23" pos:end="33:36"><call pos:start="33:23" pos:end="33:36"><name pos:start="33:23" pos:end="33:34">tcg_temp_new</name><argument_list pos:start="33:35" pos:end="33:36">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="35:13" pos:end="35:37"><decl pos:start="35:13" pos:end="35:36"><type pos:start="35:13" pos:end="35:16"><name pos:start="35:13" pos:end="35:16">TCGv</name></type> <name pos:start="35:18" pos:end="35:19">t2</name> <init pos:start="35:21" pos:end="35:36">= <expr pos:start="35:23" pos:end="35:36"><call pos:start="35:23" pos:end="35:36"><name pos:start="35:23" pos:end="35:34">tcg_temp_new</name><argument_list pos:start="35:35" pos:end="35:36">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="37:13" pos:end="37:37"><decl pos:start="37:13" pos:end="37:36"><type pos:start="37:13" pos:end="37:15"><name pos:start="37:13" pos:end="37:15">int</name></type> <name pos:start="37:17" pos:end="37:18">l1</name> <init pos:start="37:20" pos:end="37:36">= <expr pos:start="37:22" pos:end="37:36"><call pos:start="37:22" pos:end="37:36"><name pos:start="37:22" pos:end="37:34">gen_new_label</name><argument_list pos:start="37:35" pos:end="37:36">()</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="41:13" pos:end="41:33"><expr pos:start="41:13" pos:end="41:32"><call pos:start="41:13" pos:end="41:32"><name pos:start="41:13" pos:end="41:24">gen_load_gpr</name><argument_list pos:start="41:25" pos:end="41:32">(<argument pos:start="41:26" pos:end="41:27"><expr pos:start="41:26" pos:end="41:27"><name pos:start="41:26" pos:end="41:27">t1</name></expr></argument>, <argument pos:start="41:30" pos:end="41:31"><expr pos:start="41:30" pos:end="41:31"><name pos:start="41:30" pos:end="41:31">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:42"><expr pos:start="43:13" pos:end="43:41"><call pos:start="43:13" pos:end="43:41"><name pos:start="43:13" pos:end="43:27">tcg_gen_addi_tl</name><argument_list pos:start="43:28" pos:end="43:41">(<argument pos:start="43:29" pos:end="43:30"><expr pos:start="43:29" pos:end="43:30"><name pos:start="43:29" pos:end="43:30">t0</name></expr></argument>, <argument pos:start="43:33" pos:end="43:34"><expr pos:start="43:33" pos:end="43:34"><name pos:start="43:33" pos:end="43:34">t1</name></expr></argument>, <argument pos:start="43:37" pos:end="43:40"><expr pos:start="43:37" pos:end="43:40"><name pos:start="43:37" pos:end="43:40">uimm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:38"><expr pos:start="45:13" pos:end="45:37"><call pos:start="45:13" pos:end="45:37"><name pos:start="45:13" pos:end="45:29">tcg_gen_ext32s_tl</name><argument_list pos:start="45:30" pos:end="45:37">(<argument pos:start="45:31" pos:end="45:32"><expr pos:start="45:31" pos:end="45:32"><name pos:start="45:31" pos:end="45:32">t0</name></expr></argument>, <argument pos:start="45:35" pos:end="45:36"><expr pos:start="45:35" pos:end="45:36"><name pos:start="45:35" pos:end="45:36">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="49:13" pos:end="49:43"><expr pos:start="49:13" pos:end="49:42"><call pos:start="49:13" pos:end="49:42"><name pos:start="49:13" pos:end="49:27">tcg_gen_xori_tl</name><argument_list pos:start="49:28" pos:end="49:42">(<argument pos:start="49:29" pos:end="49:30"><expr pos:start="49:29" pos:end="49:30"><name pos:start="49:29" pos:end="49:30">t1</name></expr></argument>, <argument pos:start="49:33" pos:end="49:34"><expr pos:start="49:33" pos:end="49:34"><name pos:start="49:33" pos:end="49:34">t1</name></expr></argument>, <argument pos:start="49:37" pos:end="49:41"><expr pos:start="49:37" pos:end="49:41"><operator pos:start="49:37" pos:end="49:37">~</operator><name pos:start="49:38" pos:end="49:41">uimm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:42"><expr pos:start="51:13" pos:end="51:41"><call pos:start="51:13" pos:end="51:41"><name pos:start="51:13" pos:end="51:27">tcg_gen_xori_tl</name><argument_list pos:start="51:28" pos:end="51:41">(<argument pos:start="51:29" pos:end="51:30"><expr pos:start="51:29" pos:end="51:30"><name pos:start="51:29" pos:end="51:30">t2</name></expr></argument>, <argument pos:start="51:33" pos:end="51:34"><expr pos:start="51:33" pos:end="51:34"><name pos:start="51:33" pos:end="51:34">t0</name></expr></argument>, <argument pos:start="51:37" pos:end="51:40"><expr pos:start="51:37" pos:end="51:40"><name pos:start="51:37" pos:end="51:40">uimm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:39"><expr pos:start="53:13" pos:end="53:38"><call pos:start="53:13" pos:end="53:38"><name pos:start="53:13" pos:end="53:26">tcg_gen_and_tl</name><argument_list pos:start="53:27" pos:end="53:38">(<argument pos:start="53:28" pos:end="53:29"><expr pos:start="53:28" pos:end="53:29"><name pos:start="53:28" pos:end="53:29">t1</name></expr></argument>, <argument pos:start="53:32" pos:end="53:33"><expr pos:start="53:32" pos:end="53:33"><name pos:start="53:32" pos:end="53:33">t1</name></expr></argument>, <argument pos:start="53:36" pos:end="53:37"><expr pos:start="53:36" pos:end="53:37"><name pos:start="53:36" pos:end="53:37">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:30"><expr pos:start="55:13" pos:end="55:29"><call pos:start="55:13" pos:end="55:29"><name pos:start="55:13" pos:end="55:25">tcg_temp_free</name><argument_list pos:start="55:26" pos:end="55:29">(<argument pos:start="55:27" pos:end="55:28"><expr pos:start="55:27" pos:end="55:28"><name pos:start="55:27" pos:end="55:28">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:55"><expr pos:start="57:13" pos:end="57:54"><call pos:start="57:13" pos:end="57:54"><name pos:start="57:13" pos:end="57:30">tcg_gen_brcondi_tl</name><argument_list pos:start="57:31" pos:end="57:54">(<argument pos:start="57:32" pos:end="57:42"><expr pos:start="57:32" pos:end="57:42"><name pos:start="57:32" pos:end="57:42">TCG_COND_GE</name></expr></argument>, <argument pos:start="57:45" pos:end="57:46"><expr pos:start="57:45" pos:end="57:46"><name pos:start="57:45" pos:end="57:46">t1</name></expr></argument>, <argument pos:start="57:49" pos:end="57:49"><expr pos:start="57:49" pos:end="57:49"><literal type="number" pos:start="57:49" pos:end="57:49">0</literal></expr></argument>, <argument pos:start="57:52" pos:end="57:53"><expr pos:start="57:52" pos:end="57:53"><name pos:start="57:52" pos:end="57:53">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:30"><expr pos:start="59:13" pos:end="59:29"><call pos:start="59:13" pos:end="59:29"><name pos:start="59:13" pos:end="59:25">tcg_temp_free</name><argument_list pos:start="59:26" pos:end="59:29">(<argument pos:start="59:27" pos:end="59:28"><expr pos:start="59:27" pos:end="59:28"><name pos:start="59:27" pos:end="59:28">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="61:13" pos:end="61:62">/* operands of same sign, result different sign */</comment>

            <expr_stmt pos:start="63:13" pos:end="63:51"><expr pos:start="63:13" pos:end="63:50"><call pos:start="63:13" pos:end="63:50"><name pos:start="63:13" pos:end="63:30">generate_exception</name><argument_list pos:start="63:31" pos:end="63:50">(<argument pos:start="63:32" pos:end="63:34"><expr pos:start="63:32" pos:end="63:34"><name pos:start="63:32" pos:end="63:34">ctx</name></expr></argument>, <argument pos:start="63:37" pos:end="63:49"><expr pos:start="63:37" pos:end="63:49"><name pos:start="63:37" pos:end="63:49">EXCP_OVERFLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:30"><expr pos:start="65:13" pos:end="65:29"><call pos:start="65:13" pos:end="65:29"><name pos:start="65:13" pos:end="65:25">gen_set_label</name><argument_list pos:start="65:26" pos:end="65:29">(<argument pos:start="65:27" pos:end="65:28"><expr pos:start="65:27" pos:end="65:28"><name pos:start="65:27" pos:end="65:28">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:38"><expr pos:start="67:13" pos:end="67:37"><call pos:start="67:13" pos:end="67:37"><name pos:start="67:13" pos:end="67:29">tcg_gen_ext32s_tl</name><argument_list pos:start="67:30" pos:end="67:37">(<argument pos:start="67:31" pos:end="67:32"><expr pos:start="67:31" pos:end="67:32"><name pos:start="67:31" pos:end="67:32">t0</name></expr></argument>, <argument pos:start="67:35" pos:end="67:36"><expr pos:start="67:35" pos:end="67:36"><name pos:start="67:35" pos:end="67:36">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:34"><expr pos:start="69:13" pos:end="69:33"><call pos:start="69:13" pos:end="69:33"><name pos:start="69:13" pos:end="69:25">gen_store_gpr</name><argument_list pos:start="69:26" pos:end="69:33">(<argument pos:start="69:27" pos:end="69:28"><expr pos:start="69:27" pos:end="69:28"><name pos:start="69:27" pos:end="69:28">t0</name></expr></argument>, <argument pos:start="69:31" pos:end="69:32"><expr pos:start="69:31" pos:end="69:32"><name pos:start="69:31" pos:end="69:32">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:30"><expr pos:start="71:13" pos:end="71:29"><call pos:start="71:13" pos:end="71:29"><name pos:start="71:13" pos:end="71:25">tcg_temp_free</name><argument_list pos:start="71:26" pos:end="71:29">(<argument pos:start="71:27" pos:end="71:28"><expr pos:start="71:27" pos:end="71:28"><name pos:start="71:27" pos:end="71:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="75:9" pos:end="75:21"><expr pos:start="75:9" pos:end="75:20"><name pos:start="75:9" pos:end="75:11">opn</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <literal type="string" pos:start="75:15" pos:end="75:20">"addi"</literal></expr>;</expr_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <case pos:start="79:5" pos:end="79:19">case <expr pos:start="79:10" pos:end="79:18"><name pos:start="79:10" pos:end="79:18">OPC_ADDIU</name></expr>:</case>

        <if_stmt pos:start="81:9" pos:end="91:9"><if pos:start="81:9" pos:end="87:9">if <condition pos:start="81:12" pos:end="81:20">(<expr pos:start="81:13" pos:end="81:19"><name pos:start="81:13" pos:end="81:14">rs</name> <operator pos:start="81:16" pos:end="81:17">!=</operator> <literal type="number" pos:start="81:19" pos:end="81:19">0</literal></expr>)</condition> <block pos:start="81:22" pos:end="87:9">{<block_content pos:start="83:13" pos:end="85:56">

            <expr_stmt pos:start="83:13" pos:end="83:60"><expr pos:start="83:13" pos:end="83:59"><call pos:start="83:13" pos:end="83:59"><name pos:start="83:13" pos:end="83:27">tcg_gen_addi_tl</name><argument_list pos:start="83:28" pos:end="83:59">(<argument pos:start="83:29" pos:end="83:39"><expr pos:start="83:29" pos:end="83:39"><name pos:start="83:29" pos:end="83:39"><name pos:start="83:29" pos:end="83:35">cpu_gpr</name><index pos:start="83:36" pos:end="83:39">[<expr pos:start="83:37" pos:end="83:38"><name pos:start="83:37" pos:end="83:38">rt</name></expr>]</index></name></expr></argument>, <argument pos:start="83:42" pos:end="83:52"><expr pos:start="83:42" pos:end="83:52"><name pos:start="83:42" pos:end="83:52"><name pos:start="83:42" pos:end="83:48">cpu_gpr</name><index pos:start="83:49" pos:end="83:52">[<expr pos:start="83:50" pos:end="83:51"><name pos:start="83:50" pos:end="83:51">rs</name></expr>]</index></name></expr></argument>, <argument pos:start="83:55" pos:end="83:58"><expr pos:start="83:55" pos:end="83:58"><name pos:start="83:55" pos:end="83:58">uimm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:56"><expr pos:start="85:13" pos:end="85:55"><call pos:start="85:13" pos:end="85:55"><name pos:start="85:13" pos:end="85:29">tcg_gen_ext32s_tl</name><argument_list pos:start="85:30" pos:end="85:55">(<argument pos:start="85:31" pos:end="85:41"><expr pos:start="85:31" pos:end="85:41"><name pos:start="85:31" pos:end="85:41"><name pos:start="85:31" pos:end="85:37">cpu_gpr</name><index pos:start="85:38" pos:end="85:41">[<expr pos:start="85:39" pos:end="85:40"><name pos:start="85:39" pos:end="85:40">rt</name></expr>]</index></name></expr></argument>, <argument pos:start="85:44" pos:end="85:54"><expr pos:start="85:44" pos:end="85:54"><name pos:start="85:44" pos:end="85:54"><name pos:start="85:44" pos:end="85:50">cpu_gpr</name><index pos:start="85:51" pos:end="85:54">[<expr pos:start="85:52" pos:end="85:53"><name pos:start="85:52" pos:end="85:53">rt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="87:11" pos:end="91:9">else <block pos:start="87:16" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:47">

            <expr_stmt pos:start="89:13" pos:end="89:47"><expr pos:start="89:13" pos:end="89:46"><call pos:start="89:13" pos:end="89:46"><name pos:start="89:13" pos:end="89:27">tcg_gen_movi_tl</name><argument_list pos:start="89:28" pos:end="89:46">(<argument pos:start="89:29" pos:end="89:39"><expr pos:start="89:29" pos:end="89:39"><name pos:start="89:29" pos:end="89:39"><name pos:start="89:29" pos:end="89:35">cpu_gpr</name><index pos:start="89:36" pos:end="89:39">[<expr pos:start="89:37" pos:end="89:38"><name pos:start="89:37" pos:end="89:38">rt</name></expr>]</index></name></expr></argument>, <argument pos:start="89:42" pos:end="89:45"><expr pos:start="89:42" pos:end="89:45"><name pos:start="89:42" pos:end="89:45">uimm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:22"><expr pos:start="93:9" pos:end="93:21"><name pos:start="93:9" pos:end="93:11">opn</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <literal type="string" pos:start="93:15" pos:end="93:21">"addiu"</literal></expr>;</expr_stmt>

        <break pos:start="95:9" pos:end="98:0">break;</break>

<cpp:if pos:start="97:1" pos:end="97:26">#<cpp:directive pos:start="97:2" pos:end="97:3">if</cpp:directive> <expr pos:start="97:5" pos:end="97:26"><call pos:start="97:5" pos:end="97:26"><name pos:start="97:5" pos:end="97:11">defined</name><argument_list pos:start="97:12" pos:end="97:26">(<argument pos:start="97:13" pos:end="97:25"><expr pos:start="97:13" pos:end="97:25"><name pos:start="97:13" pos:end="97:25">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="99:5" pos:end="99:19">case <expr pos:start="99:10" pos:end="99:18"><name pos:start="99:10" pos:end="99:18">OPC_DADDI</name></expr>:</case>

        <block pos:start="101:9" pos:end="141:9">{<block_content pos:start="103:13" pos:end="139:30">

            <decl_stmt pos:start="103:13" pos:end="103:43"><decl pos:start="103:13" pos:end="103:42"><type pos:start="103:13" pos:end="103:16"><name pos:start="103:13" pos:end="103:16">TCGv</name></type> <name pos:start="103:18" pos:end="103:19">t0</name> <init pos:start="103:21" pos:end="103:42">= <expr pos:start="103:23" pos:end="103:42"><call pos:start="103:23" pos:end="103:42"><name pos:start="103:23" pos:end="103:40">tcg_temp_local_new</name><argument_list pos:start="103:41" pos:end="103:42">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="105:13" pos:end="105:37"><decl pos:start="105:13" pos:end="105:36"><type pos:start="105:13" pos:end="105:16"><name pos:start="105:13" pos:end="105:16">TCGv</name></type> <name pos:start="105:18" pos:end="105:19">t1</name> <init pos:start="105:21" pos:end="105:36">= <expr pos:start="105:23" pos:end="105:36"><call pos:start="105:23" pos:end="105:36"><name pos:start="105:23" pos:end="105:34">tcg_temp_new</name><argument_list pos:start="105:35" pos:end="105:36">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="107:13" pos:end="107:37"><decl pos:start="107:13" pos:end="107:36"><type pos:start="107:13" pos:end="107:16"><name pos:start="107:13" pos:end="107:16">TCGv</name></type> <name pos:start="107:18" pos:end="107:19">t2</name> <init pos:start="107:21" pos:end="107:36">= <expr pos:start="107:23" pos:end="107:36"><call pos:start="107:23" pos:end="107:36"><name pos:start="107:23" pos:end="107:34">tcg_temp_new</name><argument_list pos:start="107:35" pos:end="107:36">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="109:13" pos:end="109:37"><decl pos:start="109:13" pos:end="109:36"><type pos:start="109:13" pos:end="109:15"><name pos:start="109:13" pos:end="109:15">int</name></type> <name pos:start="109:17" pos:end="109:18">l1</name> <init pos:start="109:20" pos:end="109:36">= <expr pos:start="109:22" pos:end="109:36"><call pos:start="109:22" pos:end="109:36"><name pos:start="109:22" pos:end="109:34">gen_new_label</name><argument_list pos:start="109:35" pos:end="109:36">()</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="113:13" pos:end="113:33"><expr pos:start="113:13" pos:end="113:32"><call pos:start="113:13" pos:end="113:32"><name pos:start="113:13" pos:end="113:24">gen_load_gpr</name><argument_list pos:start="113:25" pos:end="113:32">(<argument pos:start="113:26" pos:end="113:27"><expr pos:start="113:26" pos:end="113:27"><name pos:start="113:26" pos:end="113:27">t1</name></expr></argument>, <argument pos:start="113:30" pos:end="113:31"><expr pos:start="113:30" pos:end="113:31"><name pos:start="113:30" pos:end="113:31">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:42"><expr pos:start="115:13" pos:end="115:41"><call pos:start="115:13" pos:end="115:41"><name pos:start="115:13" pos:end="115:27">tcg_gen_addi_tl</name><argument_list pos:start="115:28" pos:end="115:41">(<argument pos:start="115:29" pos:end="115:30"><expr pos:start="115:29" pos:end="115:30"><name pos:start="115:29" pos:end="115:30">t0</name></expr></argument>, <argument pos:start="115:33" pos:end="115:34"><expr pos:start="115:33" pos:end="115:34"><name pos:start="115:33" pos:end="115:34">t1</name></expr></argument>, <argument pos:start="115:37" pos:end="115:40"><expr pos:start="115:37" pos:end="115:40"><name pos:start="115:37" pos:end="115:40">uimm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="119:13" pos:end="119:43"><expr pos:start="119:13" pos:end="119:42"><call pos:start="119:13" pos:end="119:42"><name pos:start="119:13" pos:end="119:27">tcg_gen_xori_tl</name><argument_list pos:start="119:28" pos:end="119:42">(<argument pos:start="119:29" pos:end="119:30"><expr pos:start="119:29" pos:end="119:30"><name pos:start="119:29" pos:end="119:30">t1</name></expr></argument>, <argument pos:start="119:33" pos:end="119:34"><expr pos:start="119:33" pos:end="119:34"><name pos:start="119:33" pos:end="119:34">t1</name></expr></argument>, <argument pos:start="119:37" pos:end="119:41"><expr pos:start="119:37" pos:end="119:41"><operator pos:start="119:37" pos:end="119:37">~</operator><name pos:start="119:38" pos:end="119:41">uimm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:42"><expr pos:start="121:13" pos:end="121:41"><call pos:start="121:13" pos:end="121:41"><name pos:start="121:13" pos:end="121:27">tcg_gen_xori_tl</name><argument_list pos:start="121:28" pos:end="121:41">(<argument pos:start="121:29" pos:end="121:30"><expr pos:start="121:29" pos:end="121:30"><name pos:start="121:29" pos:end="121:30">t2</name></expr></argument>, <argument pos:start="121:33" pos:end="121:34"><expr pos:start="121:33" pos:end="121:34"><name pos:start="121:33" pos:end="121:34">t0</name></expr></argument>, <argument pos:start="121:37" pos:end="121:40"><expr pos:start="121:37" pos:end="121:40"><name pos:start="121:37" pos:end="121:40">uimm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:39"><expr pos:start="123:13" pos:end="123:38"><call pos:start="123:13" pos:end="123:38"><name pos:start="123:13" pos:end="123:26">tcg_gen_and_tl</name><argument_list pos:start="123:27" pos:end="123:38">(<argument pos:start="123:28" pos:end="123:29"><expr pos:start="123:28" pos:end="123:29"><name pos:start="123:28" pos:end="123:29">t1</name></expr></argument>, <argument pos:start="123:32" pos:end="123:33"><expr pos:start="123:32" pos:end="123:33"><name pos:start="123:32" pos:end="123:33">t1</name></expr></argument>, <argument pos:start="123:36" pos:end="123:37"><expr pos:start="123:36" pos:end="123:37"><name pos:start="123:36" pos:end="123:37">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:30"><expr pos:start="125:13" pos:end="125:29"><call pos:start="125:13" pos:end="125:29"><name pos:start="125:13" pos:end="125:25">tcg_temp_free</name><argument_list pos:start="125:26" pos:end="125:29">(<argument pos:start="125:27" pos:end="125:28"><expr pos:start="125:27" pos:end="125:28"><name pos:start="125:27" pos:end="125:28">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:55"><expr pos:start="127:13" pos:end="127:54"><call pos:start="127:13" pos:end="127:54"><name pos:start="127:13" pos:end="127:30">tcg_gen_brcondi_tl</name><argument_list pos:start="127:31" pos:end="127:54">(<argument pos:start="127:32" pos:end="127:42"><expr pos:start="127:32" pos:end="127:42"><name pos:start="127:32" pos:end="127:42">TCG_COND_GE</name></expr></argument>, <argument pos:start="127:45" pos:end="127:46"><expr pos:start="127:45" pos:end="127:46"><name pos:start="127:45" pos:end="127:46">t1</name></expr></argument>, <argument pos:start="127:49" pos:end="127:49"><expr pos:start="127:49" pos:end="127:49"><literal type="number" pos:start="127:49" pos:end="127:49">0</literal></expr></argument>, <argument pos:start="127:52" pos:end="127:53"><expr pos:start="127:52" pos:end="127:53"><name pos:start="127:52" pos:end="127:53">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:30"><expr pos:start="129:13" pos:end="129:29"><call pos:start="129:13" pos:end="129:29"><name pos:start="129:13" pos:end="129:25">tcg_temp_free</name><argument_list pos:start="129:26" pos:end="129:29">(<argument pos:start="129:27" pos:end="129:28"><expr pos:start="129:27" pos:end="129:28"><name pos:start="129:27" pos:end="129:28">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="131:13" pos:end="131:62">/* operands of same sign, result different sign */</comment>

            <expr_stmt pos:start="133:13" pos:end="133:51"><expr pos:start="133:13" pos:end="133:50"><call pos:start="133:13" pos:end="133:50"><name pos:start="133:13" pos:end="133:30">generate_exception</name><argument_list pos:start="133:31" pos:end="133:50">(<argument pos:start="133:32" pos:end="133:34"><expr pos:start="133:32" pos:end="133:34"><name pos:start="133:32" pos:end="133:34">ctx</name></expr></argument>, <argument pos:start="133:37" pos:end="133:49"><expr pos:start="133:37" pos:end="133:49"><name pos:start="133:37" pos:end="133:49">EXCP_OVERFLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:30"><expr pos:start="135:13" pos:end="135:29"><call pos:start="135:13" pos:end="135:29"><name pos:start="135:13" pos:end="135:25">gen_set_label</name><argument_list pos:start="135:26" pos:end="135:29">(<argument pos:start="135:27" pos:end="135:28"><expr pos:start="135:27" pos:end="135:28"><name pos:start="135:27" pos:end="135:28">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:34"><expr pos:start="137:13" pos:end="137:33"><call pos:start="137:13" pos:end="137:33"><name pos:start="137:13" pos:end="137:25">gen_store_gpr</name><argument_list pos:start="137:26" pos:end="137:33">(<argument pos:start="137:27" pos:end="137:28"><expr pos:start="137:27" pos:end="137:28"><name pos:start="137:27" pos:end="137:28">t0</name></expr></argument>, <argument pos:start="137:31" pos:end="137:32"><expr pos:start="137:31" pos:end="137:32"><name pos:start="137:31" pos:end="137:32">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:30"><expr pos:start="139:13" pos:end="139:29"><call pos:start="139:13" pos:end="139:29"><name pos:start="139:13" pos:end="139:25">tcg_temp_free</name><argument_list pos:start="139:26" pos:end="139:29">(<argument pos:start="139:27" pos:end="139:28"><expr pos:start="139:27" pos:end="139:28"><name pos:start="139:27" pos:end="139:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="143:9" pos:end="143:22"><expr pos:start="143:9" pos:end="143:21"><name pos:start="143:9" pos:end="143:11">opn</name> <operator pos:start="143:13" pos:end="143:13">=</operator> <literal type="string" pos:start="143:15" pos:end="143:21">"daddi"</literal></expr>;</expr_stmt>

        <break pos:start="145:9" pos:end="145:14">break;</break>

    <case pos:start="147:5" pos:end="147:20">case <expr pos:start="147:10" pos:end="147:19"><name pos:start="147:10" pos:end="147:19">OPC_DADDIU</name></expr>:</case>

        <if_stmt pos:start="149:9" pos:end="157:9"><if pos:start="149:9" pos:end="153:9">if <condition pos:start="149:12" pos:end="149:20">(<expr pos:start="149:13" pos:end="149:19"><name pos:start="149:13" pos:end="149:14">rs</name> <operator pos:start="149:16" pos:end="149:17">!=</operator> <literal type="number" pos:start="149:19" pos:end="149:19">0</literal></expr>)</condition> <block pos:start="149:22" pos:end="153:9">{<block_content pos:start="151:13" pos:end="151:60">

            <expr_stmt pos:start="151:13" pos:end="151:60"><expr pos:start="151:13" pos:end="151:59"><call pos:start="151:13" pos:end="151:59"><name pos:start="151:13" pos:end="151:27">tcg_gen_addi_tl</name><argument_list pos:start="151:28" pos:end="151:59">(<argument pos:start="151:29" pos:end="151:39"><expr pos:start="151:29" pos:end="151:39"><name pos:start="151:29" pos:end="151:39"><name pos:start="151:29" pos:end="151:35">cpu_gpr</name><index pos:start="151:36" pos:end="151:39">[<expr pos:start="151:37" pos:end="151:38"><name pos:start="151:37" pos:end="151:38">rt</name></expr>]</index></name></expr></argument>, <argument pos:start="151:42" pos:end="151:52"><expr pos:start="151:42" pos:end="151:52"><name pos:start="151:42" pos:end="151:52"><name pos:start="151:42" pos:end="151:48">cpu_gpr</name><index pos:start="151:49" pos:end="151:52">[<expr pos:start="151:50" pos:end="151:51"><name pos:start="151:50" pos:end="151:51">rs</name></expr>]</index></name></expr></argument>, <argument pos:start="151:55" pos:end="151:58"><expr pos:start="151:55" pos:end="151:58"><name pos:start="151:55" pos:end="151:58">uimm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="153:11" pos:end="157:9">else <block pos:start="153:16" pos:end="157:9">{<block_content pos:start="155:13" pos:end="155:47">

            <expr_stmt pos:start="155:13" pos:end="155:47"><expr pos:start="155:13" pos:end="155:46"><call pos:start="155:13" pos:end="155:46"><name pos:start="155:13" pos:end="155:27">tcg_gen_movi_tl</name><argument_list pos:start="155:28" pos:end="155:46">(<argument pos:start="155:29" pos:end="155:39"><expr pos:start="155:29" pos:end="155:39"><name pos:start="155:29" pos:end="155:39"><name pos:start="155:29" pos:end="155:35">cpu_gpr</name><index pos:start="155:36" pos:end="155:39">[<expr pos:start="155:37" pos:end="155:38"><name pos:start="155:37" pos:end="155:38">rt</name></expr>]</index></name></expr></argument>, <argument pos:start="155:42" pos:end="155:45"><expr pos:start="155:42" pos:end="155:45"><name pos:start="155:42" pos:end="155:45">uimm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:23"><expr pos:start="159:9" pos:end="159:22"><name pos:start="159:9" pos:end="159:11">opn</name> <operator pos:start="159:13" pos:end="159:13">=</operator> <literal type="string" pos:start="159:15" pos:end="159:22">"daddiu"</literal></expr>;</expr_stmt>

        <break pos:start="161:9" pos:end="164:0">break;</break>

<cpp:endif pos:start="163:1" pos:end="163:6">#<cpp:directive pos:start="163:2" pos:end="163:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></switch>

    <expr_stmt pos:start="167:5" pos:end="167:14"><expr pos:start="167:5" pos:end="167:13"><operator pos:start="167:5" pos:end="167:5">(</operator><name pos:start="167:6" pos:end="167:9">void</name><operator pos:start="167:10" pos:end="167:10">)</operator><name pos:start="167:11" pos:end="167:13">opn</name></expr>;</expr_stmt> <comment type="block" pos:start="167:16" pos:end="167:45">/* avoid a compiler warning */</comment>

    <expr_stmt pos:start="169:5" pos:end="169:83"><expr pos:start="169:5" pos:end="169:82"><call pos:start="169:5" pos:end="169:82"><name pos:start="169:5" pos:end="169:14">MIPS_DEBUG</name><argument_list pos:start="169:15" pos:end="169:82">(<argument pos:start="169:16" pos:end="169:42"><expr pos:start="169:16" pos:end="169:42"><literal type="string" pos:start="169:16" pos:end="169:28">"%s %s, %s, "</literal> <name pos:start="169:30" pos:end="169:42">TARGET_FMT_lx</name></expr></argument>, <argument pos:start="169:45" pos:end="169:47"><expr pos:start="169:45" pos:end="169:47"><name pos:start="169:45" pos:end="169:47">opn</name></expr></argument>, <argument pos:start="169:50" pos:end="169:61"><expr pos:start="169:50" pos:end="169:61"><name pos:start="169:50" pos:end="169:61"><name pos:start="169:50" pos:end="169:57">regnames</name><index pos:start="169:58" pos:end="169:61">[<expr pos:start="169:59" pos:end="169:60"><name pos:start="169:59" pos:end="169:60">rt</name></expr>]</index></name></expr></argument>, <argument pos:start="169:64" pos:end="169:75"><expr pos:start="169:64" pos:end="169:75"><name pos:start="169:64" pos:end="169:75"><name pos:start="169:64" pos:end="169:71">regnames</name><index pos:start="169:72" pos:end="169:75">[<expr pos:start="169:73" pos:end="169:74"><name pos:start="169:73" pos:end="169:74">rs</name></expr>]</index></name></expr></argument>, <argument pos:start="169:78" pos:end="169:81"><expr pos:start="169:78" pos:end="169:81"><name pos:start="169:78" pos:end="169:81">uimm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
