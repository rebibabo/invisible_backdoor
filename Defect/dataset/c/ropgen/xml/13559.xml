<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13559.c" pos:tabs="8"><function pos:start="1:1" pos:end="397:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:26">gen_intermediate_code</name><parameter_list pos:start="1:27" pos:end="1:73">(<parameter pos:start="1:28" pos:end="1:43"><decl pos:start="1:28" pos:end="1:43"><type pos:start="1:28" pos:end="1:43"><name pos:start="1:28" pos:end="1:38">CPUPPCState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">env</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:72"><decl pos:start="1:46" pos:end="1:72"><type pos:start="1:46" pos:end="1:72"><name pos:start="1:46" pos:end="1:68"><name pos:start="1:46" pos:end="1:51">struct</name> <name pos:start="1:53" pos:end="1:68">TranslationBlock</name></name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:72">tb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="397:1">{<block_content pos:start="5:5" pos:end="396:0">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">PowerPCCPU</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">cpu</name> <init pos:start="5:21" pos:end="5:42">= <expr pos:start="5:23" pos:end="5:42"><call pos:start="5:23" pos:end="5:42"><name pos:start="5:23" pos:end="5:37">ppc_env_get_cpu</name><argument_list pos:start="5:38" pos:end="5:42">(<argument pos:start="5:39" pos:end="5:41"><expr pos:start="5:39" pos:end="5:41"><name pos:start="5:39" pos:end="5:41">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">cs</name> <init pos:start="7:18" pos:end="7:27">= <expr pos:start="7:20" pos:end="7:27"><call pos:start="7:20" pos:end="7:27"><name pos:start="7:20" pos:end="7:22">CPU</name><argument_list pos:start="7:23" pos:end="7:27">(<argument pos:start="7:24" pos:end="7:26"><expr pos:start="7:24" pos:end="7:26"><name pos:start="7:24" pos:end="7:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">DisasContext</name></type> <name pos:start="9:18" pos:end="9:20">ctx</name></decl>, <decl pos:start="9:23" pos:end="9:34"><type ref="prev" pos:start="9:5" pos:end="9:16"><modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:27">ctxp</name> <init pos:start="9:29" pos:end="9:34">= <expr pos:start="9:31" pos:end="9:34"><operator pos:start="9:31" pos:end="9:31">&amp;</operator><name pos:start="9:32" pos:end="9:34">ctx</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:17">opc_handler_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier><modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:25">table</name></decl>, <decl pos:start="11:28" pos:end="11:35"><type ref="prev" pos:start="11:5" pos:end="11:20"><modifier pos:start="11:28" pos:end="11:28">*</modifier></type><name pos:start="11:29" pos:end="11:35">handler</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">target_ulong</name></type> <name pos:start="13:18" pos:end="13:25">pc_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">num_insns</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:17">max_insns</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:22"><expr pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:12">pc_start</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <name pos:start="21:16" pos:end="21:21"><name pos:start="21:16" pos:end="21:17">tb</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:21">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:23"><expr pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:7">ctx</name><operator pos:start="23:8" pos:end="23:8">.</operator><name pos:start="23:9" pos:end="23:11">nip</name></name> <operator pos:start="23:13" pos:end="23:13">=</operator> <name pos:start="23:15" pos:end="23:22">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:16"><expr pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:7">ctx</name><operator pos:start="25:8" pos:end="25:8">.</operator><name pos:start="25:9" pos:end="25:10">tb</name></name> <operator pos:start="25:12" pos:end="25:12">=</operator> <name pos:start="25:14" pos:end="25:15">tb</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:38"><expr pos:start="27:5" pos:end="27:37"><name pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:7">ctx</name><operator pos:start="27:8" pos:end="27:8">.</operator><name pos:start="27:9" pos:end="27:17">exception</name></name> <operator pos:start="27:19" pos:end="27:19">=</operator> <name pos:start="27:21" pos:end="27:37">POWERPC_EXCP_NONE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:29"><expr pos:start="29:5" pos:end="29:28"><name pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:7">ctx</name><operator pos:start="29:8" pos:end="29:8">.</operator><name pos:start="29:9" pos:end="29:14">spr_cb</name></name> <operator pos:start="29:16" pos:end="29:16">=</operator> <name pos:start="29:18" pos:end="29:28"><name pos:start="29:18" pos:end="29:20">env</name><operator pos:start="29:21" pos:end="29:22">-&gt;</operator><name pos:start="29:23" pos:end="29:28">spr_cb</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:20"><expr pos:start="31:5" pos:end="31:19"><name pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:7">ctx</name><operator pos:start="31:8" pos:end="31:8">.</operator><name pos:start="31:9" pos:end="31:10">pr</name></name> <operator pos:start="31:12" pos:end="31:12">=</operator> <name pos:start="31:14" pos:end="31:19">msr_pr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:32"><expr pos:start="33:5" pos:end="33:31"><name pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:7">ctx</name><operator pos:start="33:8" pos:end="33:8">.</operator><name pos:start="33:9" pos:end="33:15">mem_idx</name></name> <operator pos:start="33:17" pos:end="33:17">=</operator> <name pos:start="33:19" pos:end="33:31"><name pos:start="33:19" pos:end="33:21">env</name><operator pos:start="33:22" pos:end="33:23">-&gt;</operator><name pos:start="33:24" pos:end="33:31">dmmu_idx</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="38:0"><expr pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:10"><name pos:start="35:5" pos:end="35:7">ctx</name><operator pos:start="35:8" pos:end="35:8">.</operator><name pos:start="35:9" pos:end="35:10">dr</name></name> <operator pos:start="35:12" pos:end="35:12">=</operator> <name pos:start="35:14" pos:end="35:19">msr_dr</name></expr>;</expr_stmt>

<cpp:if pos:start="37:1" pos:end="37:30">#<cpp:directive pos:start="37:2" pos:end="37:3">if</cpp:directive> <expr pos:start="37:5" pos:end="37:30"><operator pos:start="37:5" pos:end="37:5">!</operator><call pos:start="37:6" pos:end="37:30"><name pos:start="37:6" pos:end="37:12">defined</name><argument_list pos:start="37:13" pos:end="37:30">(<argument pos:start="37:14" pos:end="37:29"><expr pos:start="37:14" pos:end="37:29"><name pos:start="37:14" pos:end="37:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="39:5" pos:end="42:0"><expr pos:start="39:5" pos:end="39:40"><name pos:start="39:5" pos:end="39:10"><name pos:start="39:5" pos:end="39:7">ctx</name><operator pos:start="39:8" pos:end="39:8">.</operator><name pos:start="39:9" pos:end="39:10">hv</name></name> <operator pos:start="39:12" pos:end="39:12">=</operator> <name pos:start="39:14" pos:end="39:19">msr_hv</name> <operator pos:start="39:21" pos:end="39:22">||</operator> <operator pos:start="39:24" pos:end="39:24">!</operator><name pos:start="39:25" pos:end="39:40"><name pos:start="39:25" pos:end="39:27">env</name><operator pos:start="39:28" pos:end="39:29">-&gt;</operator><name pos:start="39:30" pos:end="39:40">has_hv_mode</name></name></expr>;</expr_stmt>

<cpp:endif pos:start="41:1" pos:end="41:6">#<cpp:directive pos:start="41:2" pos:end="41:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="43:5" pos:end="43:39"><expr pos:start="43:5" pos:end="43:38"><name pos:start="43:5" pos:end="43:19"><name pos:start="43:5" pos:end="43:7">ctx</name><operator pos:start="43:8" pos:end="43:8">.</operator><name pos:start="43:9" pos:end="43:19">insns_flags</name></name> <operator pos:start="43:21" pos:end="43:21">=</operator> <name pos:start="43:23" pos:end="43:38"><name pos:start="43:23" pos:end="43:25">env</name><operator pos:start="43:26" pos:end="43:27">-&gt;</operator><name pos:start="43:28" pos:end="43:38">insns_flags</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:41"><expr pos:start="45:5" pos:end="45:40"><name pos:start="45:5" pos:end="45:20"><name pos:start="45:5" pos:end="45:7">ctx</name><operator pos:start="45:8" pos:end="45:8">.</operator><name pos:start="45:9" pos:end="45:20">insns_flags2</name></name> <operator pos:start="45:22" pos:end="45:22">=</operator> <name pos:start="45:24" pos:end="45:40"><name pos:start="45:24" pos:end="45:26">env</name><operator pos:start="45:27" pos:end="45:28">-&gt;</operator><name pos:start="45:29" pos:end="45:40">insns_flags2</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:25"><expr pos:start="47:5" pos:end="47:24"><name pos:start="47:5" pos:end="47:19"><name pos:start="47:5" pos:end="47:7">ctx</name><operator pos:start="47:8" pos:end="47:8">.</operator><name pos:start="47:9" pos:end="47:19">access_type</name></name> <operator pos:start="47:21" pos:end="47:21">=</operator> <operator pos:start="47:23" pos:end="47:23">-</operator><literal type="number" pos:start="47:24" pos:end="47:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:50"><expr pos:start="49:5" pos:end="49:49"><name pos:start="49:5" pos:end="49:15"><name pos:start="49:5" pos:end="49:7">ctx</name><operator pos:start="49:8" pos:end="49:8">.</operator><name pos:start="49:9" pos:end="49:15">le_mode</name></name> <operator pos:start="49:17" pos:end="49:17">=</operator> <operator pos:start="49:19" pos:end="49:19">!</operator><operator pos:start="49:20" pos:end="49:20">!</operator><operator pos:start="49:21" pos:end="49:21">(</operator><name pos:start="49:22" pos:end="49:32"><name pos:start="49:22" pos:end="49:24">env</name><operator pos:start="49:25" pos:end="49:26">-&gt;</operator><name pos:start="49:27" pos:end="49:32">hflags</name></name> <operator pos:start="49:34" pos:end="49:34">&amp;</operator> <operator pos:start="49:36" pos:end="49:36">(</operator><literal type="number" pos:start="49:37" pos:end="49:37">1</literal> <operator pos:start="49:39" pos:end="49:40">&lt;&lt;</operator> <name pos:start="49:42" pos:end="49:47">MSR_LE</name><operator pos:start="49:48" pos:end="49:48">)</operator><operator pos:start="49:49" pos:end="49:49">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="54:0"><expr pos:start="51:5" pos:end="51:60"><name pos:start="51:5" pos:end="51:30"><name pos:start="51:5" pos:end="51:7">ctx</name><operator pos:start="51:8" pos:end="51:8">.</operator><name pos:start="51:9" pos:end="51:30">default_tcg_memop_mask</name></name> <operator pos:start="51:32" pos:end="51:32">=</operator> <ternary pos:start="51:34" pos:end="51:60"><condition pos:start="51:34" pos:end="51:46"><expr pos:start="51:34" pos:end="51:44"><name pos:start="51:34" pos:end="51:44"><name pos:start="51:34" pos:end="51:36">ctx</name><operator pos:start="51:37" pos:end="51:37">.</operator><name pos:start="51:38" pos:end="51:44">le_mode</name></name></expr> ?</condition><then pos:start="51:48" pos:end="51:52"> <expr pos:start="51:48" pos:end="51:52"><name pos:start="51:48" pos:end="51:52">MO_LE</name></expr> </then><else pos:start="51:54" pos:end="51:60">: <expr pos:start="51:56" pos:end="51:60"><name pos:start="51:56" pos:end="51:60">MO_BE</name></expr></else></ternary></expr>;</expr_stmt>

<cpp:if pos:start="53:1" pos:end="53:25">#<cpp:directive pos:start="53:2" pos:end="53:3">if</cpp:directive> <expr pos:start="53:5" pos:end="53:25"><call pos:start="53:5" pos:end="53:25"><name pos:start="53:5" pos:end="53:11">defined</name><argument_list pos:start="53:12" pos:end="53:25">(<argument pos:start="53:13" pos:end="53:24"><expr pos:start="53:13" pos:end="53:24"><name pos:start="53:13" pos:end="53:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="55:5" pos:end="55:46"><expr pos:start="55:5" pos:end="55:45"><name pos:start="55:5" pos:end="55:15"><name pos:start="55:5" pos:end="55:7">ctx</name><operator pos:start="55:8" pos:end="55:8">.</operator><name pos:start="55:9" pos:end="55:15">sf_mode</name></name> <operator pos:start="55:17" pos:end="55:17">=</operator> <call pos:start="55:19" pos:end="55:45"><name pos:start="55:19" pos:end="55:30">msr_is_64bit</name><argument_list pos:start="55:31" pos:end="55:45">(<argument pos:start="55:32" pos:end="55:34"><expr pos:start="55:32" pos:end="55:34"><name pos:start="55:32" pos:end="55:34">env</name></expr></argument>, <argument pos:start="55:37" pos:end="55:44"><expr pos:start="55:37" pos:end="55:44"><name pos:start="55:37" pos:end="55:44"><name pos:start="55:37" pos:end="55:39">env</name><operator pos:start="55:40" pos:end="55:41">-&gt;</operator><name pos:start="55:42" pos:end="55:44">msr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="60:0"><expr pos:start="57:5" pos:end="57:53"><name pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:7">ctx</name><operator pos:start="57:8" pos:end="57:8">.</operator><name pos:start="57:9" pos:end="57:16">has_cfar</name></name> <operator pos:start="57:18" pos:end="57:18">=</operator> <operator pos:start="57:20" pos:end="57:20">!</operator><operator pos:start="57:21" pos:end="57:21">!</operator><operator pos:start="57:22" pos:end="57:22">(</operator><name pos:start="57:23" pos:end="57:32"><name pos:start="57:23" pos:end="57:25">env</name><operator pos:start="57:26" pos:end="57:27">-&gt;</operator><name pos:start="57:28" pos:end="57:32">flags</name></name> <operator pos:start="57:34" pos:end="57:34">&amp;</operator> <name pos:start="57:36" pos:end="57:52">POWERPC_FLAG_CFAR</name><operator pos:start="57:53" pos:end="57:53">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="61:5" pos:end="67:38"><if pos:start="61:5" pos:end="67:38">if <condition pos:start="61:8" pos:end="65:43">(<expr pos:start="61:9" pos:end="65:42"><name pos:start="61:9" pos:end="61:22"><name pos:start="61:9" pos:end="61:11">env</name><operator pos:start="61:12" pos:end="61:13">-&gt;</operator><name pos:start="61:14" pos:end="61:22">mmu_model</name></name> <operator pos:start="61:24" pos:end="61:25">==</operator> <name pos:start="61:27" pos:end="61:41">POWERPC_MMU_32B</name> <operator pos:start="61:43" pos:end="61:44">||</operator>

        <name pos:start="63:9" pos:end="63:22"><name pos:start="63:9" pos:end="63:11">env</name><operator pos:start="63:12" pos:end="63:13">-&gt;</operator><name pos:start="63:14" pos:end="63:22">mmu_model</name></name> <operator pos:start="63:24" pos:end="63:25">==</operator> <name pos:start="63:27" pos:end="63:41">POWERPC_MMU_601</name> <operator pos:start="63:43" pos:end="63:44">||</operator>

        <operator pos:start="65:9" pos:end="65:9">(</operator><name pos:start="65:10" pos:end="65:23"><name pos:start="65:10" pos:end="65:12">env</name><operator pos:start="65:13" pos:end="65:14">-&gt;</operator><name pos:start="65:15" pos:end="65:23">mmu_model</name></name> <operator pos:start="65:25" pos:end="65:25">&amp;</operator> <name pos:start="65:27" pos:end="65:41">POWERPC_MMU_64B</name><operator pos:start="65:42" pos:end="65:42">)</operator></expr>)</condition><block type="pseudo" pos:start="67:13" pos:end="67:38"><block_content pos:start="67:13" pos:end="67:38">

            <expr_stmt pos:start="67:13" pos:end="67:38"><expr pos:start="67:13" pos:end="67:37"><name pos:start="67:13" pos:end="67:30"><name pos:start="67:13" pos:end="67:15">ctx</name><operator pos:start="67:16" pos:end="67:16">.</operator><name pos:start="67:17" pos:end="67:30">lazy_tlb_flush</name></name> <operator pos:start="67:32" pos:end="67:32">=</operator> <name pos:start="67:34" pos:end="67:37">true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:31"><expr pos:start="71:5" pos:end="71:30"><name pos:start="71:5" pos:end="71:19"><name pos:start="71:5" pos:end="71:7">ctx</name><operator pos:start="71:8" pos:end="71:8">.</operator><name pos:start="71:9" pos:end="71:19">fpu_enabled</name></name> <operator pos:start="71:21" pos:end="71:21">=</operator> <operator pos:start="71:23" pos:end="71:23">!</operator><operator pos:start="71:24" pos:end="71:24">!</operator><name pos:start="71:25" pos:end="71:30">msr_fp</name></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="79:32"><if pos:start="73:5" pos:end="75:36">if <condition pos:start="73:8" pos:end="73:51">(<expr pos:start="73:9" pos:end="73:50"><operator pos:start="73:9" pos:end="73:9">(</operator><name pos:start="73:10" pos:end="73:19"><name pos:start="73:10" pos:end="73:12">env</name><operator pos:start="73:13" pos:end="73:14">-&gt;</operator><name pos:start="73:15" pos:end="73:19">flags</name></name> <operator pos:start="73:21" pos:end="73:21">&amp;</operator> <name pos:start="73:23" pos:end="73:38">POWERPC_FLAG_SPE</name><operator pos:start="73:39" pos:end="73:39">)</operator> <operator pos:start="73:41" pos:end="73:42">&amp;&amp;</operator> <name pos:start="73:44" pos:end="73:50">msr_spe</name></expr>)</condition><block type="pseudo" pos:start="75:9" pos:end="75:36"><block_content pos:start="75:9" pos:end="75:36">

        <expr_stmt pos:start="75:9" pos:end="75:36"><expr pos:start="75:9" pos:end="75:35"><name pos:start="75:9" pos:end="75:23"><name pos:start="75:9" pos:end="75:11">ctx</name><operator pos:start="75:12" pos:end="75:12">.</operator><name pos:start="75:13" pos:end="75:23">spe_enabled</name></name> <operator pos:start="75:25" pos:end="75:25">=</operator> <operator pos:start="75:27" pos:end="75:27">!</operator><operator pos:start="75:28" pos:end="75:28">!</operator><name pos:start="75:29" pos:end="75:35">msr_spe</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="77:5" pos:end="79:32">else<block type="pseudo" pos:start="79:9" pos:end="79:32"><block_content pos:start="79:9" pos:end="79:32">

        <expr_stmt pos:start="79:9" pos:end="79:32"><expr pos:start="79:9" pos:end="79:31"><name pos:start="79:9" pos:end="79:23"><name pos:start="79:9" pos:end="79:11">ctx</name><operator pos:start="79:12" pos:end="79:12">.</operator><name pos:start="79:13" pos:end="79:23">spe_enabled</name></name> <operator pos:start="79:25" pos:end="79:25">=</operator> <name pos:start="79:27" pos:end="79:31">false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="81:5" pos:end="87:36"><if pos:start="81:5" pos:end="83:39">if <condition pos:start="81:8" pos:end="81:50">(<expr pos:start="81:9" pos:end="81:49"><operator pos:start="81:9" pos:end="81:9">(</operator><name pos:start="81:10" pos:end="81:19"><name pos:start="81:10" pos:end="81:12">env</name><operator pos:start="81:13" pos:end="81:14">-&gt;</operator><name pos:start="81:15" pos:end="81:19">flags</name></name> <operator pos:start="81:21" pos:end="81:21">&amp;</operator> <name pos:start="81:23" pos:end="81:38">POWERPC_FLAG_VRE</name><operator pos:start="81:39" pos:end="81:39">)</operator> <operator pos:start="81:41" pos:end="81:42">&amp;&amp;</operator> <name pos:start="81:44" pos:end="81:49">msr_vr</name></expr>)</condition><block type="pseudo" pos:start="83:9" pos:end="83:39"><block_content pos:start="83:9" pos:end="83:39">

        <expr_stmt pos:start="83:9" pos:end="83:39"><expr pos:start="83:9" pos:end="83:38"><name pos:start="83:9" pos:end="83:27"><name pos:start="83:9" pos:end="83:11">ctx</name><operator pos:start="83:12" pos:end="83:12">.</operator><name pos:start="83:13" pos:end="83:27">altivec_enabled</name></name> <operator pos:start="83:29" pos:end="83:29">=</operator> <operator pos:start="83:31" pos:end="83:31">!</operator><operator pos:start="83:32" pos:end="83:32">!</operator><name pos:start="83:33" pos:end="83:38">msr_vr</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="85:5" pos:end="87:36">else<block type="pseudo" pos:start="87:9" pos:end="87:36"><block_content pos:start="87:9" pos:end="87:36">

        <expr_stmt pos:start="87:9" pos:end="87:36"><expr pos:start="87:9" pos:end="87:35"><name pos:start="87:9" pos:end="87:27"><name pos:start="87:9" pos:end="87:11">ctx</name><operator pos:start="87:12" pos:end="87:12">.</operator><name pos:start="87:13" pos:end="87:27">altivec_enabled</name></name> <operator pos:start="87:29" pos:end="87:29">=</operator> <name pos:start="87:31" pos:end="87:35">false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="89:5" pos:end="100:0"><if pos:start="89:5" pos:end="93:5">if <condition pos:start="89:8" pos:end="89:51">(<expr pos:start="89:9" pos:end="89:50"><operator pos:start="89:9" pos:end="89:9">(</operator><name pos:start="89:10" pos:end="89:19"><name pos:start="89:10" pos:end="89:12">env</name><operator pos:start="89:13" pos:end="89:14">-&gt;</operator><name pos:start="89:15" pos:end="89:19">flags</name></name> <operator pos:start="89:21" pos:end="89:21">&amp;</operator> <name pos:start="89:23" pos:end="89:38">POWERPC_FLAG_VSX</name><operator pos:start="89:39" pos:end="89:39">)</operator> <operator pos:start="89:41" pos:end="89:42">&amp;&amp;</operator> <name pos:start="89:44" pos:end="89:50">msr_vsx</name></expr>)</condition> <block pos:start="89:53" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:36">

        <expr_stmt pos:start="91:9" pos:end="91:36"><expr pos:start="91:9" pos:end="91:35"><name pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:11">ctx</name><operator pos:start="91:12" pos:end="91:12">.</operator><name pos:start="91:13" pos:end="91:23">vsx_enabled</name></name> <operator pos:start="91:25" pos:end="91:25">=</operator> <operator pos:start="91:27" pos:end="91:27">!</operator><operator pos:start="91:28" pos:end="91:28">!</operator><name pos:start="91:29" pos:end="91:35">msr_vsx</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="93:7" pos:end="100:0">else <block pos:start="93:12" pos:end="100:0">{<block_content pos:start="95:9" pos:end="95:32">

        <expr_stmt pos:start="95:9" pos:end="95:32"><expr pos:start="95:9" pos:end="95:31"><name pos:start="95:9" pos:end="95:23"><name pos:start="95:9" pos:end="95:11">ctx</name><operator pos:start="95:12" pos:end="95:12">.</operator><name pos:start="95:13" pos:end="95:23">vsx_enabled</name></name> <operator pos:start="95:25" pos:end="95:25">=</operator> <name pos:start="95:27" pos:end="95:31">false</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:if pos:start="99:1" pos:end="99:25">#<cpp:directive pos:start="99:2" pos:end="99:3">if</cpp:directive> <expr pos:start="99:5" pos:end="99:25"><call pos:start="99:5" pos:end="99:25"><name pos:start="99:5" pos:end="99:11">defined</name><argument_list pos:start="99:12" pos:end="99:25">(<argument pos:start="99:13" pos:end="99:24"><expr pos:start="99:13" pos:end="99:24"><name pos:start="99:13" pos:end="99:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="101:5" pos:end="112:0"><if pos:start="101:5" pos:end="105:5">if <condition pos:start="101:8" pos:end="101:49">(<expr pos:start="101:9" pos:end="101:48"><operator pos:start="101:9" pos:end="101:9">(</operator><name pos:start="101:10" pos:end="101:19"><name pos:start="101:10" pos:end="101:12">env</name><operator pos:start="101:13" pos:end="101:14">-&gt;</operator><name pos:start="101:15" pos:end="101:19">flags</name></name> <operator pos:start="101:21" pos:end="101:21">&amp;</operator> <name pos:start="101:23" pos:end="101:37">POWERPC_FLAG_TM</name><operator pos:start="101:38" pos:end="101:38">)</operator> <operator pos:start="101:40" pos:end="101:41">&amp;&amp;</operator> <name pos:start="101:43" pos:end="101:48">msr_tm</name></expr>)</condition> <block pos:start="101:51" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:34">

        <expr_stmt pos:start="103:9" pos:end="103:34"><expr pos:start="103:9" pos:end="103:33"><name pos:start="103:9" pos:end="103:22"><name pos:start="103:9" pos:end="103:11">ctx</name><operator pos:start="103:12" pos:end="103:12">.</operator><name pos:start="103:13" pos:end="103:22">tm_enabled</name></name> <operator pos:start="103:24" pos:end="103:24">=</operator> <operator pos:start="103:26" pos:end="103:26">!</operator><operator pos:start="103:27" pos:end="103:27">!</operator><name pos:start="103:28" pos:end="103:33">msr_tm</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="105:7" pos:end="112:0">else <block pos:start="105:12" pos:end="112:0">{<block_content pos:start="107:9" pos:end="107:31">

        <expr_stmt pos:start="107:9" pos:end="107:31"><expr pos:start="107:9" pos:end="107:30"><name pos:start="107:9" pos:end="107:22"><name pos:start="107:9" pos:end="107:11">ctx</name><operator pos:start="107:12" pos:end="107:12">.</operator><name pos:start="107:13" pos:end="107:22">tm_enabled</name></name> <operator pos:start="107:24" pos:end="107:24">=</operator> <name pos:start="107:26" pos:end="107:30">false</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="111:1" pos:end="111:6">#<cpp:directive pos:start="111:2" pos:end="111:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="113:5" pos:end="119:35"><if pos:start="113:5" pos:end="115:49">if <condition pos:start="113:8" pos:end="113:49">(<expr pos:start="113:9" pos:end="113:48"><operator pos:start="113:9" pos:end="113:9">(</operator><name pos:start="113:10" pos:end="113:19"><name pos:start="113:10" pos:end="113:12">env</name><operator pos:start="113:13" pos:end="113:14">-&gt;</operator><name pos:start="113:15" pos:end="113:19">flags</name></name> <operator pos:start="113:21" pos:end="113:21">&amp;</operator> <name pos:start="113:23" pos:end="113:37">POWERPC_FLAG_SE</name><operator pos:start="113:38" pos:end="113:38">)</operator> <operator pos:start="113:40" pos:end="113:41">&amp;&amp;</operator> <name pos:start="113:43" pos:end="113:48">msr_se</name></expr>)</condition><block type="pseudo" pos:start="115:9" pos:end="115:49"><block_content pos:start="115:9" pos:end="115:49">

        <expr_stmt pos:start="115:9" pos:end="115:49"><expr pos:start="115:9" pos:end="115:48"><name pos:start="115:9" pos:end="115:30"><name pos:start="115:9" pos:end="115:11">ctx</name><operator pos:start="115:12" pos:end="115:12">.</operator><name pos:start="115:13" pos:end="115:30">singlestep_enabled</name></name> <operator pos:start="115:32" pos:end="115:32">=</operator> <name pos:start="115:34" pos:end="115:48">CPU_SINGLE_STEP</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="117:5" pos:end="119:35">else<block type="pseudo" pos:start="119:9" pos:end="119:35"><block_content pos:start="119:9" pos:end="119:35">

        <expr_stmt pos:start="119:9" pos:end="119:35"><expr pos:start="119:9" pos:end="119:34"><name pos:start="119:9" pos:end="119:30"><name pos:start="119:9" pos:end="119:11">ctx</name><operator pos:start="119:12" pos:end="119:12">.</operator><name pos:start="119:13" pos:end="119:30">singlestep_enabled</name></name> <operator pos:start="119:32" pos:end="119:32">=</operator> <literal type="number" pos:start="119:34" pos:end="119:34">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="121:5" pos:end="123:50"><if pos:start="121:5" pos:end="123:50">if <condition pos:start="121:8" pos:end="121:49">(<expr pos:start="121:9" pos:end="121:48"><operator pos:start="121:9" pos:end="121:9">(</operator><name pos:start="121:10" pos:end="121:19"><name pos:start="121:10" pos:end="121:12">env</name><operator pos:start="121:13" pos:end="121:14">-&gt;</operator><name pos:start="121:15" pos:end="121:19">flags</name></name> <operator pos:start="121:21" pos:end="121:21">&amp;</operator> <name pos:start="121:23" pos:end="121:37">POWERPC_FLAG_BE</name><operator pos:start="121:38" pos:end="121:38">)</operator> <operator pos:start="121:40" pos:end="121:41">&amp;&amp;</operator> <name pos:start="121:43" pos:end="121:48">msr_be</name></expr>)</condition><block type="pseudo" pos:start="123:9" pos:end="123:50"><block_content pos:start="123:9" pos:end="123:50">

        <expr_stmt pos:start="123:9" pos:end="123:50"><expr pos:start="123:9" pos:end="123:49"><name pos:start="123:9" pos:end="123:30"><name pos:start="123:9" pos:end="123:11">ctx</name><operator pos:start="123:12" pos:end="123:12">.</operator><name pos:start="123:13" pos:end="123:30">singlestep_enabled</name></name> <operator pos:start="123:32" pos:end="123:33">|=</operator> <name pos:start="123:35" pos:end="123:49">CPU_BRANCH_STEP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="125:5" pos:end="132:0"><if pos:start="125:5" pos:end="132:0">if <condition pos:start="125:8" pos:end="125:41">(<expr pos:start="125:9" pos:end="125:40"><call pos:start="125:9" pos:end="125:40"><name pos:start="125:9" pos:end="125:16">unlikely</name><argument_list pos:start="125:17" pos:end="125:40">(<argument pos:start="125:18" pos:end="125:39"><expr pos:start="125:18" pos:end="125:39"><name pos:start="125:18" pos:end="125:39"><name pos:start="125:18" pos:end="125:19">cs</name><operator pos:start="125:20" pos:end="125:21">-&gt;</operator><name pos:start="125:22" pos:end="125:39">singlestep_enabled</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="125:43" pos:end="132:0">{<block_content pos:start="127:9" pos:end="127:54">

        <expr_stmt pos:start="127:9" pos:end="127:54"><expr pos:start="127:9" pos:end="127:53"><name pos:start="127:9" pos:end="127:30"><name pos:start="127:9" pos:end="127:11">ctx</name><operator pos:start="127:12" pos:end="127:12">.</operator><name pos:start="127:13" pos:end="127:30">singlestep_enabled</name></name> <operator pos:start="127:32" pos:end="127:33">|=</operator> <name pos:start="127:35" pos:end="127:53">GDBSTUB_SINGLE_STEP</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:if pos:start="131:1" pos:end="131:33">#<cpp:directive pos:start="131:2" pos:end="131:3">if</cpp:directive> <expr pos:start="131:5" pos:end="131:33"><call pos:start="131:5" pos:end="131:28"><name pos:start="131:5" pos:end="131:11">defined</name> <argument_list pos:start="131:13" pos:end="131:28">(<argument pos:start="131:14" pos:end="131:27"><expr pos:start="131:14" pos:end="131:27"><name pos:start="131:14" pos:end="131:27">DO_SINGLE_STEP</name></expr></argument>)</argument_list></call> <operator pos:start="131:30" pos:end="131:31">&amp;&amp;</operator> <literal type="number" pos:start="131:33" pos:end="131:33">0</literal></expr></cpp:if>

    <comment type="block" pos:start="133:5" pos:end="133:32">/* Single step trace mode */</comment>

    <expr_stmt pos:start="135:5" pos:end="138:0"><expr pos:start="135:5" pos:end="135:14"><name pos:start="135:5" pos:end="135:10">msr_se</name> <operator pos:start="135:12" pos:end="135:12">=</operator> <literal type="number" pos:start="135:14" pos:end="135:14">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="137:1" pos:end="137:6">#<cpp:directive pos:start="137:2" pos:end="137:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="139:5" pos:end="139:18"><expr pos:start="139:5" pos:end="139:17"><name pos:start="139:5" pos:end="139:13">num_insns</name> <operator pos:start="139:15" pos:end="139:15">=</operator> <literal type="number" pos:start="139:17" pos:end="139:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:43"><expr pos:start="141:5" pos:end="141:42"><name pos:start="141:5" pos:end="141:13">max_insns</name> <operator pos:start="141:15" pos:end="141:15">=</operator> <name pos:start="141:17" pos:end="141:26"><name pos:start="141:17" pos:end="141:18">tb</name><operator pos:start="141:19" pos:end="141:20">-&gt;</operator><name pos:start="141:21" pos:end="141:26">cflags</name></name> <operator pos:start="141:28" pos:end="141:28">&amp;</operator> <name pos:start="141:30" pos:end="141:42">CF_COUNT_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="143:5" pos:end="147:5"><if pos:start="143:5" pos:end="147:5">if <condition pos:start="143:8" pos:end="143:23">(<expr pos:start="143:9" pos:end="143:22"><name pos:start="143:9" pos:end="143:17">max_insns</name> <operator pos:start="143:19" pos:end="143:20">==</operator> <literal type="number" pos:start="143:22" pos:end="143:22">0</literal></expr>)</condition> <block pos:start="143:25" pos:end="147:5">{<block_content pos:start="145:9" pos:end="145:34">

        <expr_stmt pos:start="145:9" pos:end="145:34"><expr pos:start="145:9" pos:end="145:33"><name pos:start="145:9" pos:end="145:17">max_insns</name> <operator pos:start="145:19" pos:end="145:19">=</operator> <name pos:start="145:21" pos:end="145:33">CF_COUNT_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="149:5" pos:end="153:5"><if pos:start="149:5" pos:end="153:5">if <condition pos:start="149:8" pos:end="149:34">(<expr pos:start="149:9" pos:end="149:33"><name pos:start="149:9" pos:end="149:17">max_insns</name> <operator pos:start="149:19" pos:end="149:19">&gt;</operator> <name pos:start="149:21" pos:end="149:33">TCG_MAX_INSNS</name></expr>)</condition> <block pos:start="149:36" pos:end="153:5">{<block_content pos:start="151:9" pos:end="151:34">

        <expr_stmt pos:start="151:9" pos:end="151:34"><expr pos:start="151:9" pos:end="151:33"><name pos:start="151:9" pos:end="151:17">max_insns</name> <operator pos:start="151:19" pos:end="151:19">=</operator> <name pos:start="151:21" pos:end="151:33">TCG_MAX_INSNS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="157:5" pos:end="157:21"><expr pos:start="157:5" pos:end="157:20"><call pos:start="157:5" pos:end="157:20"><name pos:start="157:5" pos:end="157:16">gen_tb_start</name><argument_list pos:start="157:17" pos:end="157:20">(<argument pos:start="157:18" pos:end="157:19"><expr pos:start="157:18" pos:end="157:19"><name pos:start="157:18" pos:end="157:19">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:27"><expr pos:start="159:5" pos:end="159:26"><call pos:start="159:5" pos:end="159:26"><name pos:start="159:5" pos:end="159:24">tcg_clear_temp_count</name><argument_list pos:start="159:25" pos:end="159:26">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="161:5" pos:end="161:55">/* Set env in case of segfault during code fetch */</comment>

    <while pos:start="163:5" pos:end="341:5">while <condition pos:start="163:11" pos:end="163:68">(<expr pos:start="163:12" pos:end="163:67"><name pos:start="163:12" pos:end="163:24"><name pos:start="163:12" pos:end="163:14">ctx</name><operator pos:start="163:15" pos:end="163:15">.</operator><name pos:start="163:16" pos:end="163:24">exception</name></name> <operator pos:start="163:26" pos:end="163:27">==</operator> <name pos:start="163:29" pos:end="163:45">POWERPC_EXCP_NONE</name> <operator pos:start="163:47" pos:end="163:48">&amp;&amp;</operator> <operator pos:start="163:50" pos:end="163:50">!</operator><call pos:start="163:51" pos:end="163:67"><name pos:start="163:51" pos:end="163:65">tcg_op_buf_full</name><argument_list pos:start="163:66" pos:end="163:67">()</argument_list></call></expr>)</condition> <block pos:start="163:70" pos:end="341:5">{<block_content pos:start="165:9" pos:end="339:9">

        <expr_stmt pos:start="165:9" pos:end="165:36"><expr pos:start="165:9" pos:end="165:35"><call pos:start="165:9" pos:end="165:35"><name pos:start="165:9" pos:end="165:26">tcg_gen_insn_start</name><argument_list pos:start="165:27" pos:end="165:35">(<argument pos:start="165:28" pos:end="165:34"><expr pos:start="165:28" pos:end="165:34"><name pos:start="165:28" pos:end="165:34"><name pos:start="165:28" pos:end="165:30">ctx</name><operator pos:start="165:31" pos:end="165:31">.</operator><name pos:start="165:32" pos:end="165:34">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:20"><expr pos:start="167:9" pos:end="167:19"><name pos:start="167:9" pos:end="167:17">num_insns</name><operator pos:start="167:18" pos:end="167:19">++</operator></expr>;</expr_stmt>



        <if_stmt pos:start="171:9" pos:end="187:9"><if pos:start="171:9" pos:end="187:9">if <condition pos:start="171:12" pos:end="171:63">(<expr pos:start="171:13" pos:end="171:62"><call pos:start="171:13" pos:end="171:62"><name pos:start="171:13" pos:end="171:20">unlikely</name><argument_list pos:start="171:21" pos:end="171:62">(<argument pos:start="171:22" pos:end="171:61"><expr pos:start="171:22" pos:end="171:61"><call pos:start="171:22" pos:end="171:61"><name pos:start="171:22" pos:end="171:40">cpu_breakpoint_test</name><argument_list pos:start="171:41" pos:end="171:61">(<argument pos:start="171:42" pos:end="171:43"><expr pos:start="171:42" pos:end="171:43"><name pos:start="171:42" pos:end="171:43">cs</name></expr></argument>, <argument pos:start="171:46" pos:end="171:52"><expr pos:start="171:46" pos:end="171:52"><name pos:start="171:46" pos:end="171:52"><name pos:start="171:46" pos:end="171:48">ctx</name><operator pos:start="171:49" pos:end="171:49">.</operator><name pos:start="171:50" pos:end="171:52">nip</name></name></expr></argument>, <argument pos:start="171:55" pos:end="171:60"><expr pos:start="171:55" pos:end="171:60"><name pos:start="171:55" pos:end="171:60">BP_ANY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="171:65" pos:end="187:9">{<block_content pos:start="173:13" pos:end="185:18">

            <expr_stmt pos:start="173:13" pos:end="173:38"><expr pos:start="173:13" pos:end="173:37"><call pos:start="173:13" pos:end="173:37"><name pos:start="173:13" pos:end="173:31">gen_debug_exception</name><argument_list pos:start="173:32" pos:end="173:37">(<argument pos:start="173:33" pos:end="173:36"><expr pos:start="173:33" pos:end="173:36"><name pos:start="173:33" pos:end="173:36">ctxp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="175:13" pos:end="181:73">/* The address covered by the breakpoint must be included in

               [tb-&gt;pc, tb-&gt;pc + tb-&gt;size) in order to for it to be

               properly cleared -- thus we increment the PC here so that

               the logic setting tb-&gt;size below does the right thing.  */</comment>

            <expr_stmt pos:start="183:13" pos:end="183:25"><expr pos:start="183:13" pos:end="183:24"><name pos:start="183:13" pos:end="183:19"><name pos:start="183:13" pos:end="183:15">ctx</name><operator pos:start="183:16" pos:end="183:16">.</operator><name pos:start="183:17" pos:end="183:19">nip</name></name> <operator pos:start="183:21" pos:end="183:22">+=</operator> <literal type="number" pos:start="183:24" pos:end="183:24">4</literal></expr>;</expr_stmt>

            <break pos:start="185:13" pos:end="185:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="191:9" pos:end="191:40"><expr pos:start="191:9" pos:end="191:39"><call pos:start="191:9" pos:end="191:39"><name pos:start="191:9" pos:end="191:17">LOG_DISAS</name><argument_list pos:start="191:18" pos:end="191:39">(<argument pos:start="191:19" pos:end="191:38"><expr pos:start="191:19" pos:end="191:38"><literal type="string" pos:start="191:19" pos:end="191:38">"----------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="195:53"><expr pos:start="193:9" pos:end="195:52"><call pos:start="193:9" pos:end="195:52"><name pos:start="193:9" pos:end="193:17">LOG_DISAS</name><argument_list pos:start="193:18" pos:end="195:52">(<argument pos:start="193:19" pos:end="193:58"><expr pos:start="193:19" pos:end="193:58"><literal type="string" pos:start="193:19" pos:end="193:24">"nip="</literal> <name pos:start="193:26" pos:end="193:38">TARGET_FMT_lx</name> <literal type="string" pos:start="193:40" pos:end="193:58">" super=%d ir=%d\n"</literal></expr></argument>,

                  <argument pos:start="195:19" pos:end="195:25"><expr pos:start="195:19" pos:end="195:25"><name pos:start="195:19" pos:end="195:25"><name pos:start="195:19" pos:end="195:21">ctx</name><operator pos:start="195:22" pos:end="195:22">.</operator><name pos:start="195:23" pos:end="195:25">nip</name></name></expr></argument>, <argument pos:start="195:28" pos:end="195:38"><expr pos:start="195:28" pos:end="195:38"><name pos:start="195:28" pos:end="195:38"><name pos:start="195:28" pos:end="195:30">ctx</name><operator pos:start="195:31" pos:end="195:31">.</operator><name pos:start="195:32" pos:end="195:38">mem_idx</name></name></expr></argument>, <argument pos:start="195:41" pos:end="195:51"><expr pos:start="195:41" pos:end="195:51"><operator pos:start="195:41" pos:end="195:41">(</operator><name pos:start="195:42" pos:end="195:44">int</name><operator pos:start="195:45" pos:end="195:45">)</operator><name pos:start="195:46" pos:end="195:51">msr_ir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="197:9" pos:end="199:27"><if pos:start="197:9" pos:end="199:27">if <condition pos:start="197:12" pos:end="197:64">(<expr pos:start="197:13" pos:end="197:63"><name pos:start="197:13" pos:end="197:21">num_insns</name> <operator pos:start="197:23" pos:end="197:24">==</operator> <name pos:start="197:26" pos:end="197:34">max_insns</name> <operator pos:start="197:36" pos:end="197:37">&amp;&amp;</operator> <operator pos:start="197:39" pos:end="197:39">(</operator><name pos:start="197:40" pos:end="197:49"><name pos:start="197:40" pos:end="197:41">tb</name><operator pos:start="197:42" pos:end="197:43">-&gt;</operator><name pos:start="197:44" pos:end="197:49">cflags</name></name> <operator pos:start="197:51" pos:end="197:51">&amp;</operator> <name pos:start="197:53" pos:end="197:62">CF_LAST_IO</name><operator pos:start="197:63" pos:end="197:63">)</operator></expr>)</condition><block type="pseudo" pos:start="199:13" pos:end="199:27"><block_content pos:start="199:13" pos:end="199:27">

            <expr_stmt pos:start="199:13" pos:end="199:27"><expr pos:start="199:13" pos:end="199:26"><call pos:start="199:13" pos:end="199:26"><name pos:start="199:13" pos:end="199:24">gen_io_start</name><argument_list pos:start="199:25" pos:end="199:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="201:9" pos:end="209:9"><if pos:start="201:9" pos:end="205:9">if <condition pos:start="201:12" pos:end="201:42">(<expr pos:start="201:13" pos:end="201:41"><call pos:start="201:13" pos:end="201:41"><name pos:start="201:13" pos:end="201:20">unlikely</name><argument_list pos:start="201:21" pos:end="201:41">(<argument pos:start="201:22" pos:end="201:40"><expr pos:start="201:22" pos:end="201:40"><call pos:start="201:22" pos:end="201:40"><name pos:start="201:22" pos:end="201:34">need_byteswap</name><argument_list pos:start="201:35" pos:end="201:40">(<argument pos:start="201:36" pos:end="201:39"><expr pos:start="201:36" pos:end="201:39"><operator pos:start="201:36" pos:end="201:36">&amp;</operator><name pos:start="201:37" pos:end="201:39">ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="201:44" pos:end="205:9">{<block_content pos:start="203:13" pos:end="203:61">

            <expr_stmt pos:start="203:13" pos:end="203:61"><expr pos:start="203:13" pos:end="203:60"><name pos:start="203:13" pos:end="203:22"><name pos:start="203:13" pos:end="203:15">ctx</name><operator pos:start="203:16" pos:end="203:16">.</operator><name pos:start="203:17" pos:end="203:22">opcode</name></name> <operator pos:start="203:24" pos:end="203:24">=</operator> <call pos:start="203:26" pos:end="203:60"><name pos:start="203:26" pos:end="203:32">bswap32</name><argument_list pos:start="203:33" pos:end="203:60">(<argument pos:start="203:34" pos:end="203:59"><expr pos:start="203:34" pos:end="203:59"><call pos:start="203:34" pos:end="203:59"><name pos:start="203:34" pos:end="203:45">cpu_ldl_code</name><argument_list pos:start="203:46" pos:end="203:59">(<argument pos:start="203:47" pos:end="203:49"><expr pos:start="203:47" pos:end="203:49"><name pos:start="203:47" pos:end="203:49">env</name></expr></argument>, <argument pos:start="203:52" pos:end="203:58"><expr pos:start="203:52" pos:end="203:58"><name pos:start="203:52" pos:end="203:58"><name pos:start="203:52" pos:end="203:54">ctx</name><operator pos:start="203:55" pos:end="203:55">.</operator><name pos:start="203:56" pos:end="203:58">nip</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="205:11" pos:end="209:9">else <block pos:start="205:16" pos:end="209:9">{<block_content pos:start="207:13" pos:end="207:52">

            <expr_stmt pos:start="207:13" pos:end="207:52"><expr pos:start="207:13" pos:end="207:51"><name pos:start="207:13" pos:end="207:22"><name pos:start="207:13" pos:end="207:15">ctx</name><operator pos:start="207:16" pos:end="207:16">.</operator><name pos:start="207:17" pos:end="207:22">opcode</name></name> <operator pos:start="207:24" pos:end="207:24">=</operator> <call pos:start="207:26" pos:end="207:51"><name pos:start="207:26" pos:end="207:37">cpu_ldl_code</name><argument_list pos:start="207:38" pos:end="207:51">(<argument pos:start="207:39" pos:end="207:41"><expr pos:start="207:39" pos:end="207:41"><name pos:start="207:39" pos:end="207:41">env</name></expr></argument>, <argument pos:start="207:44" pos:end="207:50"><expr pos:start="207:44" pos:end="207:50"><name pos:start="207:44" pos:end="207:50"><name pos:start="207:44" pos:end="207:46">ctx</name><operator pos:start="207:47" pos:end="207:47">.</operator><name pos:start="207:48" pos:end="207:50">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="211:9" pos:end="215:70"><expr pos:start="211:9" pos:end="215:69"><call pos:start="211:9" pos:end="215:69"><name pos:start="211:9" pos:end="211:17">LOG_DISAS</name><argument_list pos:start="211:18" pos:end="215:69">(<argument pos:start="211:19" pos:end="211:65"><expr pos:start="211:19" pos:end="211:65"><literal type="string" pos:start="211:19" pos:end="211:65">"translate opcode %08x (%02x %02x %02x) (%s)\n"</literal></expr></argument>,

                    <argument pos:start="213:21" pos:end="213:30"><expr pos:start="213:21" pos:end="213:30"><name pos:start="213:21" pos:end="213:30"><name pos:start="213:21" pos:end="213:23">ctx</name><operator pos:start="213:24" pos:end="213:24">.</operator><name pos:start="213:25" pos:end="213:30">opcode</name></name></expr></argument>, <argument pos:start="213:33" pos:end="213:48"><expr pos:start="213:33" pos:end="213:48"><call pos:start="213:33" pos:end="213:48"><name pos:start="213:33" pos:end="213:36">opc1</name><argument_list pos:start="213:37" pos:end="213:48">(<argument pos:start="213:38" pos:end="213:47"><expr pos:start="213:38" pos:end="213:47"><name pos:start="213:38" pos:end="213:47"><name pos:start="213:38" pos:end="213:40">ctx</name><operator pos:start="213:41" pos:end="213:41">.</operator><name pos:start="213:42" pos:end="213:47">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="213:51" pos:end="213:66"><expr pos:start="213:51" pos:end="213:66"><call pos:start="213:51" pos:end="213:66"><name pos:start="213:51" pos:end="213:54">opc2</name><argument_list pos:start="213:55" pos:end="213:66">(<argument pos:start="213:56" pos:end="213:65"><expr pos:start="213:56" pos:end="213:65"><name pos:start="213:56" pos:end="213:65"><name pos:start="213:56" pos:end="213:58">ctx</name><operator pos:start="213:59" pos:end="213:59">.</operator><name pos:start="213:60" pos:end="213:65">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="215:21" pos:end="215:36"><expr pos:start="215:21" pos:end="215:36"><call pos:start="215:21" pos:end="215:36"><name pos:start="215:21" pos:end="215:24">opc3</name><argument_list pos:start="215:25" pos:end="215:36">(<argument pos:start="215:26" pos:end="215:35"><expr pos:start="215:26" pos:end="215:35"><name pos:start="215:26" pos:end="215:35"><name pos:start="215:26" pos:end="215:28">ctx</name><operator pos:start="215:29" pos:end="215:29">.</operator><name pos:start="215:30" pos:end="215:35">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="215:39" pos:end="215:68"><expr pos:start="215:39" pos:end="215:68"><ternary pos:start="215:39" pos:end="215:68"><condition pos:start="215:39" pos:end="215:51"><expr pos:start="215:39" pos:end="215:49"><name pos:start="215:39" pos:end="215:49"><name pos:start="215:39" pos:end="215:41">ctx</name><operator pos:start="215:42" pos:end="215:42">.</operator><name pos:start="215:43" pos:end="215:49">le_mode</name></name></expr> ?</condition><then pos:start="215:53" pos:end="215:60"> <expr pos:start="215:53" pos:end="215:60"><literal type="string" pos:start="215:53" pos:end="215:60">"little"</literal></expr> </then><else pos:start="215:62" pos:end="215:68">: <expr pos:start="215:64" pos:end="215:68"><literal type="string" pos:start="215:64" pos:end="215:68">"big"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:21"><expr pos:start="217:9" pos:end="217:20"><name pos:start="217:9" pos:end="217:15"><name pos:start="217:9" pos:end="217:11">ctx</name><operator pos:start="217:12" pos:end="217:12">.</operator><name pos:start="217:13" pos:end="217:15">nip</name></name> <operator pos:start="217:17" pos:end="217:18">+=</operator> <literal type="number" pos:start="217:20" pos:end="217:20">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:29"><expr pos:start="219:9" pos:end="219:28"><name pos:start="219:9" pos:end="219:13">table</name> <operator pos:start="219:15" pos:end="219:15">=</operator> <name pos:start="219:17" pos:end="219:28"><name pos:start="219:17" pos:end="219:19">env</name><operator pos:start="219:20" pos:end="219:21">-&gt;</operator><name pos:start="219:22" pos:end="219:28">opcodes</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="221:9" pos:end="221:42"><expr pos:start="221:9" pos:end="221:41"><name pos:start="221:9" pos:end="221:15">handler</name> <operator pos:start="221:17" pos:end="221:17">=</operator> <name pos:start="221:19" pos:end="221:41"><name pos:start="221:19" pos:end="221:23">table</name><index pos:start="221:24" pos:end="221:41">[<expr pos:start="221:25" pos:end="221:40"><call pos:start="221:25" pos:end="221:40"><name pos:start="221:25" pos:end="221:28">opc1</name><argument_list pos:start="221:29" pos:end="221:40">(<argument pos:start="221:30" pos:end="221:39"><expr pos:start="221:30" pos:end="221:39"><name pos:start="221:30" pos:end="221:39"><name pos:start="221:30" pos:end="221:32">ctx</name><operator pos:start="221:33" pos:end="221:33">.</operator><name pos:start="221:34" pos:end="221:39">opcode</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="223:9" pos:end="237:9"><if pos:start="223:9" pos:end="237:9">if <condition pos:start="223:12" pos:end="223:40">(<expr pos:start="223:13" pos:end="223:39"><call pos:start="223:13" pos:end="223:39"><name pos:start="223:13" pos:end="223:30">is_indirect_opcode</name><argument_list pos:start="223:31" pos:end="223:39">(<argument pos:start="223:32" pos:end="223:38"><expr pos:start="223:32" pos:end="223:38"><name pos:start="223:32" pos:end="223:38">handler</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="223:42" pos:end="237:9">{<block_content pos:start="225:13" pos:end="235:13">

            <expr_stmt pos:start="225:13" pos:end="225:39"><expr pos:start="225:13" pos:end="225:38"><name pos:start="225:13" pos:end="225:17">table</name> <operator pos:start="225:19" pos:end="225:19">=</operator> <call pos:start="225:21" pos:end="225:38"><name pos:start="225:21" pos:end="225:29">ind_table</name><argument_list pos:start="225:30" pos:end="225:38">(<argument pos:start="225:31" pos:end="225:37"><expr pos:start="225:31" pos:end="225:37"><name pos:start="225:31" pos:end="225:37">handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="227:13" pos:end="227:46"><expr pos:start="227:13" pos:end="227:45"><name pos:start="227:13" pos:end="227:19">handler</name> <operator pos:start="227:21" pos:end="227:21">=</operator> <name pos:start="227:23" pos:end="227:45"><name pos:start="227:23" pos:end="227:27">table</name><index pos:start="227:28" pos:end="227:45">[<expr pos:start="227:29" pos:end="227:44"><call pos:start="227:29" pos:end="227:44"><name pos:start="227:29" pos:end="227:32">opc2</name><argument_list pos:start="227:33" pos:end="227:44">(<argument pos:start="227:34" pos:end="227:43"><expr pos:start="227:34" pos:end="227:43"><name pos:start="227:34" pos:end="227:43"><name pos:start="227:34" pos:end="227:36">ctx</name><operator pos:start="227:37" pos:end="227:37">.</operator><name pos:start="227:38" pos:end="227:43">opcode</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="229:13" pos:end="235:13"><if pos:start="229:13" pos:end="235:13">if <condition pos:start="229:16" pos:end="229:44">(<expr pos:start="229:17" pos:end="229:43"><call pos:start="229:17" pos:end="229:43"><name pos:start="229:17" pos:end="229:34">is_indirect_opcode</name><argument_list pos:start="229:35" pos:end="229:43">(<argument pos:start="229:36" pos:end="229:42"><expr pos:start="229:36" pos:end="229:42"><name pos:start="229:36" pos:end="229:42">handler</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="229:46" pos:end="235:13">{<block_content pos:start="231:17" pos:end="233:50">

                <expr_stmt pos:start="231:17" pos:end="231:43"><expr pos:start="231:17" pos:end="231:42"><name pos:start="231:17" pos:end="231:21">table</name> <operator pos:start="231:23" pos:end="231:23">=</operator> <call pos:start="231:25" pos:end="231:42"><name pos:start="231:25" pos:end="231:33">ind_table</name><argument_list pos:start="231:34" pos:end="231:42">(<argument pos:start="231:35" pos:end="231:41"><expr pos:start="231:35" pos:end="231:41"><name pos:start="231:35" pos:end="231:41">handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="233:17" pos:end="233:50"><expr pos:start="233:17" pos:end="233:49"><name pos:start="233:17" pos:end="233:23">handler</name> <operator pos:start="233:25" pos:end="233:25">=</operator> <name pos:start="233:27" pos:end="233:49"><name pos:start="233:27" pos:end="233:31">table</name><index pos:start="233:32" pos:end="233:49">[<expr pos:start="233:33" pos:end="233:48"><call pos:start="233:33" pos:end="233:48"><name pos:start="233:33" pos:end="233:36">opc3</name><argument_list pos:start="233:37" pos:end="233:48">(<argument pos:start="233:38" pos:end="233:47"><expr pos:start="233:38" pos:end="233:47"><name pos:start="233:38" pos:end="233:47"><name pos:start="233:38" pos:end="233:40">ctx</name><operator pos:start="233:41" pos:end="233:41">.</operator><name pos:start="233:42" pos:end="233:47">opcode</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="239:9" pos:end="239:40">/* Is opcode *REALLY* valid ? */</comment>

        <if_stmt pos:start="241:9" pos:end="287:9"><if pos:start="241:9" pos:end="251:9">if <condition pos:start="241:12" pos:end="241:55">(<expr pos:start="241:13" pos:end="241:54"><call pos:start="241:13" pos:end="241:54"><name pos:start="241:13" pos:end="241:20">unlikely</name><argument_list pos:start="241:21" pos:end="241:54">(<argument pos:start="241:22" pos:end="241:53"><expr pos:start="241:22" pos:end="241:53"><name pos:start="241:22" pos:end="241:37"><name pos:start="241:22" pos:end="241:28">handler</name><operator pos:start="241:29" pos:end="241:30">-&gt;</operator><name pos:start="241:31" pos:end="241:37">handler</name></name> <operator pos:start="241:39" pos:end="241:40">==</operator> <operator pos:start="241:42" pos:end="241:42">&amp;</operator><name pos:start="241:43" pos:end="241:53">gen_invalid</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="241:57" pos:end="251:9">{<block_content pos:start="243:13" pos:end="249:82">

            <expr_stmt pos:start="243:13" pos:end="249:82"><expr pos:start="243:13" pos:end="249:81"><call pos:start="243:13" pos:end="249:81"><name pos:start="243:13" pos:end="243:25">qemu_log_mask</name><argument_list pos:start="243:26" pos:end="249:81">(<argument pos:start="243:27" pos:end="243:41"><expr pos:start="243:27" pos:end="243:41"><name pos:start="243:27" pos:end="243:41">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="243:44" pos:end="245:76"><expr pos:start="243:44" pos:end="245:76"><literal type="string" pos:start="243:44" pos:end="243:73">"invalid/unsupported opcode: "</literal>

                          <literal type="string" pos:start="245:27" pos:end="245:54">"%02x - %02x - %02x (%08x) "</literal> <name pos:start="245:56" pos:end="245:68">TARGET_FMT_lx</name> <literal type="string" pos:start="245:70" pos:end="245:76">" %d\n"</literal></expr></argument>,

                          <argument pos:start="247:27" pos:end="247:42"><expr pos:start="247:27" pos:end="247:42"><call pos:start="247:27" pos:end="247:42"><name pos:start="247:27" pos:end="247:30">opc1</name><argument_list pos:start="247:31" pos:end="247:42">(<argument pos:start="247:32" pos:end="247:41"><expr pos:start="247:32" pos:end="247:41"><name pos:start="247:32" pos:end="247:41"><name pos:start="247:32" pos:end="247:34">ctx</name><operator pos:start="247:35" pos:end="247:35">.</operator><name pos:start="247:36" pos:end="247:41">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="247:45" pos:end="247:60"><expr pos:start="247:45" pos:end="247:60"><call pos:start="247:45" pos:end="247:60"><name pos:start="247:45" pos:end="247:48">opc2</name><argument_list pos:start="247:49" pos:end="247:60">(<argument pos:start="247:50" pos:end="247:59"><expr pos:start="247:50" pos:end="247:59"><name pos:start="247:50" pos:end="247:59"><name pos:start="247:50" pos:end="247:52">ctx</name><operator pos:start="247:53" pos:end="247:53">.</operator><name pos:start="247:54" pos:end="247:59">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="249:27" pos:end="249:42"><expr pos:start="249:27" pos:end="249:42"><call pos:start="249:27" pos:end="249:42"><name pos:start="249:27" pos:end="249:30">opc3</name><argument_list pos:start="249:31" pos:end="249:42">(<argument pos:start="249:32" pos:end="249:41"><expr pos:start="249:32" pos:end="249:41"><name pos:start="249:32" pos:end="249:41"><name pos:start="249:32" pos:end="249:34">ctx</name><operator pos:start="249:35" pos:end="249:35">.</operator><name pos:start="249:36" pos:end="249:41">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="249:45" pos:end="249:54"><expr pos:start="249:45" pos:end="249:54"><name pos:start="249:45" pos:end="249:54"><name pos:start="249:45" pos:end="249:47">ctx</name><operator pos:start="249:48" pos:end="249:48">.</operator><name pos:start="249:49" pos:end="249:54">opcode</name></name></expr></argument>, <argument pos:start="249:57" pos:end="249:67"><expr pos:start="249:57" pos:end="249:67"><name pos:start="249:57" pos:end="249:63"><name pos:start="249:57" pos:end="249:59">ctx</name><operator pos:start="249:60" pos:end="249:60">.</operator><name pos:start="249:61" pos:end="249:63">nip</name></name> <operator pos:start="249:65" pos:end="249:65">-</operator> <literal type="number" pos:start="249:67" pos:end="249:67">4</literal></expr></argument>, <argument pos:start="249:70" pos:end="249:80"><expr pos:start="249:70" pos:end="249:80"><operator pos:start="249:70" pos:end="249:70">(</operator><name pos:start="249:71" pos:end="249:73">int</name><operator pos:start="249:74" pos:end="249:74">)</operator><name pos:start="249:75" pos:end="249:80">msr_ir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="251:11" pos:end="287:9">else <block pos:start="251:16" pos:end="287:9">{<block_content pos:start="253:13" pos:end="285:13">

            <decl_stmt pos:start="253:13" pos:end="253:27"><decl pos:start="253:13" pos:end="253:26"><type pos:start="253:13" pos:end="253:20"><name pos:start="253:13" pos:end="253:20">uint32_t</name></type> <name pos:start="253:22" pos:end="253:26">inval</name></decl>;</decl_stmt>



            <if_stmt pos:start="257:13" pos:end="265:13"><if pos:start="257:13" pos:end="261:13">if <condition pos:start="257:16" pos:end="257:104">(<expr pos:start="257:17" pos:end="257:103"><call pos:start="257:17" pos:end="257:103"><name pos:start="257:17" pos:end="257:24">unlikely</name><argument_list pos:start="257:25" pos:end="257:103">(<argument pos:start="257:26" pos:end="257:102"><expr pos:start="257:26" pos:end="257:102"><name pos:start="257:26" pos:end="257:38"><name pos:start="257:26" pos:end="257:32">handler</name><operator pos:start="257:33" pos:end="257:34">-&gt;</operator><name pos:start="257:35" pos:end="257:38">type</name></name> <operator pos:start="257:40" pos:end="257:40">&amp;</operator> <operator pos:start="257:42" pos:end="257:42">(</operator><name pos:start="257:43" pos:end="257:49">PPC_SPE</name> <operator pos:start="257:51" pos:end="257:51">|</operator> <name pos:start="257:53" pos:end="257:66">PPC_SPE_SINGLE</name> <operator pos:start="257:68" pos:end="257:68">|</operator> <name pos:start="257:70" pos:end="257:83">PPC_SPE_DOUBLE</name><operator pos:start="257:84" pos:end="257:84">)</operator> <operator pos:start="257:86" pos:end="257:87">&amp;&amp;</operator> <call pos:start="257:89" pos:end="257:102"><name pos:start="257:89" pos:end="257:90">Rc</name><argument_list pos:start="257:91" pos:end="257:102">(<argument pos:start="257:92" pos:end="257:101"><expr pos:start="257:92" pos:end="257:101"><name pos:start="257:92" pos:end="257:101"><name pos:start="257:92" pos:end="257:94">ctx</name><operator pos:start="257:95" pos:end="257:95">.</operator><name pos:start="257:96" pos:end="257:101">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="257:106" pos:end="261:13">{<block_content pos:start="259:17" pos:end="259:40">

                <expr_stmt pos:start="259:17" pos:end="259:40"><expr pos:start="259:17" pos:end="259:39"><name pos:start="259:17" pos:end="259:21">inval</name> <operator pos:start="259:23" pos:end="259:23">=</operator> <name pos:start="259:25" pos:end="259:39"><name pos:start="259:25" pos:end="259:31">handler</name><operator pos:start="259:32" pos:end="259:33">-&gt;</operator><name pos:start="259:34" pos:end="259:39">inval2</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="261:15" pos:end="265:13">else <block pos:start="261:20" pos:end="265:13">{<block_content pos:start="263:17" pos:end="263:40">

                <expr_stmt pos:start="263:17" pos:end="263:40"><expr pos:start="263:17" pos:end="263:39"><name pos:start="263:17" pos:end="263:21">inval</name> <operator pos:start="263:23" pos:end="263:23">=</operator> <name pos:start="263:25" pos:end="263:39"><name pos:start="263:25" pos:end="263:31">handler</name><operator pos:start="263:32" pos:end="263:33">-&gt;</operator><name pos:start="263:34" pos:end="263:39">inval1</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="269:13" pos:end="285:13"><if pos:start="269:13" pos:end="285:13">if <condition pos:start="269:16" pos:end="269:52">(<expr pos:start="269:17" pos:end="269:51"><call pos:start="269:17" pos:end="269:51"><name pos:start="269:17" pos:end="269:24">unlikely</name><argument_list pos:start="269:25" pos:end="269:51">(<argument pos:start="269:26" pos:end="269:50"><expr pos:start="269:26" pos:end="269:50"><operator pos:start="269:26" pos:end="269:26">(</operator><name pos:start="269:27" pos:end="269:36"><name pos:start="269:27" pos:end="269:29">ctx</name><operator pos:start="269:30" pos:end="269:30">.</operator><name pos:start="269:31" pos:end="269:36">opcode</name></name> <operator pos:start="269:38" pos:end="269:38">&amp;</operator> <name pos:start="269:40" pos:end="269:44">inval</name><operator pos:start="269:45" pos:end="269:45">)</operator> <operator pos:start="269:47" pos:end="269:48">!=</operator> <literal type="number" pos:start="269:50" pos:end="269:50">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="269:54" pos:end="285:13">{<block_content pos:start="271:17" pos:end="283:22">

                <expr_stmt pos:start="271:17" pos:end="279:55"><expr pos:start="271:17" pos:end="279:54"><call pos:start="271:17" pos:end="279:54"><name pos:start="271:17" pos:end="271:29">qemu_log_mask</name><argument_list pos:start="271:30" pos:end="279:54">(<argument pos:start="271:31" pos:end="271:45"><expr pos:start="271:31" pos:end="271:45"><name pos:start="271:31" pos:end="271:45">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="271:48" pos:end="273:77"><expr pos:start="271:48" pos:end="273:77"><literal type="string" pos:start="271:48" pos:end="271:80">"invalid bits: %08x for opcode: "</literal>

                              <literal type="string" pos:start="273:31" pos:end="273:58">"%02x - %02x - %02x (%08x) "</literal> <name pos:start="273:60" pos:end="273:72">TARGET_FMT_lx</name> <literal type="string" pos:start="273:74" pos:end="273:77">"\n"</literal></expr></argument>,

                              <argument pos:start="275:31" pos:end="275:48"><expr pos:start="275:31" pos:end="275:48"><name pos:start="275:31" pos:end="275:40"><name pos:start="275:31" pos:end="275:33">ctx</name><operator pos:start="275:34" pos:end="275:34">.</operator><name pos:start="275:35" pos:end="275:40">opcode</name></name> <operator pos:start="275:42" pos:end="275:42">&amp;</operator> <name pos:start="275:44" pos:end="275:48">inval</name></expr></argument>, <argument pos:start="275:51" pos:end="275:66"><expr pos:start="275:51" pos:end="275:66"><call pos:start="275:51" pos:end="275:66"><name pos:start="275:51" pos:end="275:54">opc1</name><argument_list pos:start="275:55" pos:end="275:66">(<argument pos:start="275:56" pos:end="275:65"><expr pos:start="275:56" pos:end="275:65"><name pos:start="275:56" pos:end="275:65"><name pos:start="275:56" pos:end="275:58">ctx</name><operator pos:start="275:59" pos:end="275:59">.</operator><name pos:start="275:60" pos:end="275:65">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="277:31" pos:end="277:46"><expr pos:start="277:31" pos:end="277:46"><call pos:start="277:31" pos:end="277:46"><name pos:start="277:31" pos:end="277:34">opc2</name><argument_list pos:start="277:35" pos:end="277:46">(<argument pos:start="277:36" pos:end="277:45"><expr pos:start="277:36" pos:end="277:45"><name pos:start="277:36" pos:end="277:45"><name pos:start="277:36" pos:end="277:38">ctx</name><operator pos:start="277:39" pos:end="277:39">.</operator><name pos:start="277:40" pos:end="277:45">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="277:49" pos:end="277:64"><expr pos:start="277:49" pos:end="277:64"><call pos:start="277:49" pos:end="277:64"><name pos:start="277:49" pos:end="277:52">opc3</name><argument_list pos:start="277:53" pos:end="277:64">(<argument pos:start="277:54" pos:end="277:63"><expr pos:start="277:54" pos:end="277:63"><name pos:start="277:54" pos:end="277:63"><name pos:start="277:54" pos:end="277:56">ctx</name><operator pos:start="277:57" pos:end="277:57">.</operator><name pos:start="277:58" pos:end="277:63">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="279:31" pos:end="279:40"><expr pos:start="279:31" pos:end="279:40"><name pos:start="279:31" pos:end="279:40"><name pos:start="279:31" pos:end="279:33">ctx</name><operator pos:start="279:34" pos:end="279:34">.</operator><name pos:start="279:35" pos:end="279:40">opcode</name></name></expr></argument>, <argument pos:start="279:43" pos:end="279:53"><expr pos:start="279:43" pos:end="279:53"><name pos:start="279:43" pos:end="279:49"><name pos:start="279:43" pos:end="279:45">ctx</name><operator pos:start="279:46" pos:end="279:46">.</operator><name pos:start="279:47" pos:end="279:49">nip</name></name> <operator pos:start="279:51" pos:end="279:51">-</operator> <literal type="number" pos:start="279:53" pos:end="279:53">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="281:17" pos:end="281:68"><expr pos:start="281:17" pos:end="281:67"><call pos:start="281:17" pos:end="281:67"><name pos:start="281:17" pos:end="281:35">gen_inval_exception</name><argument_list pos:start="281:36" pos:end="281:67">(<argument pos:start="281:37" pos:end="281:40"><expr pos:start="281:37" pos:end="281:40"><name pos:start="281:37" pos:end="281:40">ctxp</name></expr></argument>, <argument pos:start="281:43" pos:end="281:66"><expr pos:start="281:43" pos:end="281:66"><name pos:start="281:43" pos:end="281:66">POWERPC_EXCP_INVAL_INVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="283:17" pos:end="283:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="289:9" pos:end="292:0"><expr pos:start="289:9" pos:end="289:35"><operator pos:start="289:9" pos:end="289:9">(</operator><operator pos:start="289:10" pos:end="289:10">*</operator><operator pos:start="289:11" pos:end="289:11">(</operator><name pos:start="289:12" pos:end="289:27"><name pos:start="289:12" pos:end="289:18">handler</name><operator pos:start="289:19" pos:end="289:20">-&gt;</operator><name pos:start="289:21" pos:end="289:27">handler</name></name><operator pos:start="289:28" pos:end="289:28">)</operator><operator pos:start="289:29" pos:end="289:29">)</operator><operator pos:start="289:30" pos:end="289:30">(</operator><operator pos:start="289:31" pos:end="289:31">&amp;</operator><name pos:start="289:32" pos:end="289:34">ctx</name><operator pos:start="289:35" pos:end="289:35">)</operator></expr>;</expr_stmt>

<cpp:if pos:start="291:1" pos:end="291:30">#<cpp:directive pos:start="291:2" pos:end="291:3">if</cpp:directive> <expr pos:start="291:5" pos:end="291:30"><call pos:start="291:5" pos:end="291:30"><name pos:start="291:5" pos:end="291:11">defined</name><argument_list pos:start="291:12" pos:end="291:30">(<argument pos:start="291:13" pos:end="291:29"><expr pos:start="291:13" pos:end="291:29"><name pos:start="291:13" pos:end="291:29">DO_PPC_STATISTICS</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="293:9" pos:end="296:0"><expr pos:start="293:9" pos:end="293:24"><name pos:start="293:9" pos:end="293:22"><name pos:start="293:9" pos:end="293:15">handler</name><operator pos:start="293:16" pos:end="293:17">-&gt;</operator><name pos:start="293:18" pos:end="293:22">count</name></name><operator pos:start="293:23" pos:end="293:24">++</operator></expr>;</expr_stmt>

<cpp:endif pos:start="295:1" pos:end="295:6">#<cpp:directive pos:start="295:2" pos:end="295:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="297:9" pos:end="297:41">/* Check trace mode exceptions */</comment>

        <if_stmt pos:start="299:9" pos:end="327:9"><if pos:start="299:9" pos:end="311:9">if <condition pos:start="299:12" pos:end="307:59">(<expr pos:start="299:13" pos:end="307:58"><call pos:start="299:13" pos:end="307:58"><name pos:start="299:13" pos:end="299:20">unlikely</name><argument_list pos:start="299:21" pos:end="307:58">(<argument pos:start="299:22" pos:end="307:57"><expr pos:start="299:22" pos:end="307:57"><name pos:start="299:22" pos:end="299:43"><name pos:start="299:22" pos:end="299:24">ctx</name><operator pos:start="299:25" pos:end="299:25">.</operator><name pos:start="299:26" pos:end="299:43">singlestep_enabled</name></name> <operator pos:start="299:45" pos:end="299:45">&amp;</operator> <name pos:start="299:47" pos:end="299:61">CPU_SINGLE_STEP</name> <operator pos:start="299:63" pos:end="299:64">&amp;&amp;</operator>

                     <operator pos:start="301:22" pos:end="301:22">(</operator><name pos:start="301:23" pos:end="301:29"><name pos:start="301:23" pos:end="301:25">ctx</name><operator pos:start="301:26" pos:end="301:26">.</operator><name pos:start="301:27" pos:end="301:29">nip</name></name> <operator pos:start="301:31" pos:end="301:32">&lt;=</operator> <literal type="number" pos:start="301:34" pos:end="301:38">0x100</literal> <operator pos:start="301:40" pos:end="301:41">||</operator> <name pos:start="301:43" pos:end="301:49"><name pos:start="301:43" pos:end="301:45">ctx</name><operator pos:start="301:46" pos:end="301:46">.</operator><name pos:start="301:47" pos:end="301:49">nip</name></name> <operator pos:start="301:51" pos:end="301:51">&gt;</operator> <literal type="number" pos:start="301:53" pos:end="301:57">0xF00</literal><operator pos:start="301:58" pos:end="301:58">)</operator> <operator pos:start="301:60" pos:end="301:61">&amp;&amp;</operator>

                     <name pos:start="303:22" pos:end="303:34"><name pos:start="303:22" pos:end="303:24">ctx</name><operator pos:start="303:25" pos:end="303:25">.</operator><name pos:start="303:26" pos:end="303:34">exception</name></name> <operator pos:start="303:36" pos:end="303:37">!=</operator> <name pos:start="303:39" pos:end="303:53">POWERPC_SYSCALL</name> <operator pos:start="303:55" pos:end="303:56">&amp;&amp;</operator>

                     <name pos:start="305:22" pos:end="305:34"><name pos:start="305:22" pos:end="305:24">ctx</name><operator pos:start="305:25" pos:end="305:25">.</operator><name pos:start="305:26" pos:end="305:34">exception</name></name> <operator pos:start="305:36" pos:end="305:37">!=</operator> <name pos:start="305:39" pos:end="305:55">POWERPC_EXCP_TRAP</name> <operator pos:start="305:57" pos:end="305:58">&amp;&amp;</operator>

                     <name pos:start="307:22" pos:end="307:34"><name pos:start="307:22" pos:end="307:24">ctx</name><operator pos:start="307:25" pos:end="307:25">.</operator><name pos:start="307:26" pos:end="307:34">exception</name></name> <operator pos:start="307:36" pos:end="307:37">!=</operator> <name pos:start="307:39" pos:end="307:57">POWERPC_EXCP_BRANCH</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="307:61" pos:end="311:9">{<block_content pos:start="309:13" pos:end="309:52">

            <expr_stmt pos:start="309:13" pos:end="309:52"><expr pos:start="309:13" pos:end="309:51"><call pos:start="309:13" pos:end="309:51"><name pos:start="309:13" pos:end="309:25">gen_exception</name><argument_list pos:start="309:26" pos:end="309:51">(<argument pos:start="309:27" pos:end="309:30"><expr pos:start="309:27" pos:end="309:30"><name pos:start="309:27" pos:end="309:30">ctxp</name></expr></argument>, <argument pos:start="309:33" pos:end="309:50"><expr pos:start="309:33" pos:end="309:50"><name pos:start="309:33" pos:end="309:50">POWERPC_EXCP_TRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="311:11" pos:end="327:9">else if <condition pos:start="311:19" pos:end="317:52">(<expr pos:start="311:20" pos:end="317:51"><call pos:start="311:20" pos:end="317:51"><name pos:start="311:20" pos:end="311:27">unlikely</name><argument_list pos:start="311:28" pos:end="317:51">(<argument pos:start="311:29" pos:end="317:50"><expr pos:start="311:29" pos:end="317:50"><operator pos:start="311:29" pos:end="311:29">(</operator><operator pos:start="311:30" pos:end="311:30">(</operator><name pos:start="311:31" pos:end="311:37"><name pos:start="311:31" pos:end="311:33">ctx</name><operator pos:start="311:34" pos:end="311:34">.</operator><name pos:start="311:35" pos:end="311:37">nip</name></name> <operator pos:start="311:39" pos:end="311:39">&amp;</operator> <operator pos:start="311:41" pos:end="311:41">(</operator><name pos:start="311:42" pos:end="311:57">TARGET_PAGE_SIZE</name> <operator pos:start="311:59" pos:end="311:59">-</operator> <literal type="number" pos:start="311:61" pos:end="311:61">1</literal><operator pos:start="311:62" pos:end="311:62">)</operator><operator pos:start="311:63" pos:end="311:63">)</operator> <operator pos:start="311:65" pos:end="311:66">==</operator> <literal type="number" pos:start="311:68" pos:end="311:68">0</literal><operator pos:start="311:69" pos:end="311:69">)</operator> <operator pos:start="311:71" pos:end="311:72">||</operator>

                            <operator pos:start="313:29" pos:end="313:29">(</operator><name pos:start="313:30" pos:end="313:51"><name pos:start="313:30" pos:end="313:31">cs</name><operator pos:start="313:32" pos:end="313:33">-&gt;</operator><name pos:start="313:34" pos:end="313:51">singlestep_enabled</name></name><operator pos:start="313:52" pos:end="313:52">)</operator> <operator pos:start="313:54" pos:end="313:55">||</operator>

                            <name pos:start="315:29" pos:end="315:38">singlestep</name> <operator pos:start="315:40" pos:end="315:41">||</operator>

                            <name pos:start="317:29" pos:end="317:37">num_insns</name> <operator pos:start="317:39" pos:end="317:40">&gt;=</operator> <name pos:start="317:42" pos:end="317:50">max_insns</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="317:54" pos:end="327:9">{<block_content pos:start="325:13" pos:end="325:18">

            <comment type="block" pos:start="319:13" pos:end="323:15">/* if we reach a page boundary or are single stepping, stop

             * generation

             */</comment>

            <break pos:start="325:13" pos:end="325:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="329:9" pos:end="339:9"><if pos:start="329:9" pos:end="339:9">if <condition pos:start="329:12" pos:end="329:35">(<expr pos:start="329:13" pos:end="329:34"><call pos:start="329:13" pos:end="329:34"><name pos:start="329:13" pos:end="329:32">tcg_check_temp_count</name><argument_list pos:start="329:33" pos:end="329:34">()</argument_list></call></expr>)</condition> <block pos:start="329:37" pos:end="339:9">{<block_content pos:start="331:13" pos:end="337:20">

            <expr_stmt pos:start="331:13" pos:end="335:32"><expr pos:start="331:13" pos:end="335:31"><call pos:start="331:13" pos:end="335:31"><name pos:start="331:13" pos:end="331:19">fprintf</name><argument_list pos:start="331:20" pos:end="335:31">(<argument pos:start="331:21" pos:end="331:26"><expr pos:start="331:21" pos:end="331:26"><name pos:start="331:21" pos:end="331:26">stderr</name></expr></argument>, <argument pos:start="331:29" pos:end="331:79"><expr pos:start="331:29" pos:end="331:79"><literal type="string" pos:start="331:29" pos:end="331:79">"Opcode %02x %02x %02x (%08x) leaked temporaries\n"</literal></expr></argument>,

                    <argument pos:start="333:21" pos:end="333:36"><expr pos:start="333:21" pos:end="333:36"><call pos:start="333:21" pos:end="333:36"><name pos:start="333:21" pos:end="333:24">opc1</name><argument_list pos:start="333:25" pos:end="333:36">(<argument pos:start="333:26" pos:end="333:35"><expr pos:start="333:26" pos:end="333:35"><name pos:start="333:26" pos:end="333:35"><name pos:start="333:26" pos:end="333:28">ctx</name><operator pos:start="333:29" pos:end="333:29">.</operator><name pos:start="333:30" pos:end="333:35">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="333:39" pos:end="333:54"><expr pos:start="333:39" pos:end="333:54"><call pos:start="333:39" pos:end="333:54"><name pos:start="333:39" pos:end="333:42">opc2</name><argument_list pos:start="333:43" pos:end="333:54">(<argument pos:start="333:44" pos:end="333:53"><expr pos:start="333:44" pos:end="333:53"><name pos:start="333:44" pos:end="333:53"><name pos:start="333:44" pos:end="333:46">ctx</name><operator pos:start="333:47" pos:end="333:47">.</operator><name pos:start="333:48" pos:end="333:53">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="333:57" pos:end="333:72"><expr pos:start="333:57" pos:end="333:72"><call pos:start="333:57" pos:end="333:72"><name pos:start="333:57" pos:end="333:60">opc3</name><argument_list pos:start="333:61" pos:end="333:72">(<argument pos:start="333:62" pos:end="333:71"><expr pos:start="333:62" pos:end="333:71"><name pos:start="333:62" pos:end="333:71"><name pos:start="333:62" pos:end="333:64">ctx</name><operator pos:start="333:65" pos:end="333:65">.</operator><name pos:start="333:66" pos:end="333:71">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="335:21" pos:end="335:30"><expr pos:start="335:21" pos:end="335:30"><name pos:start="335:21" pos:end="335:30"><name pos:start="335:21" pos:end="335:23">ctx</name><operator pos:start="335:24" pos:end="335:24">.</operator><name pos:start="335:25" pos:end="335:30">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="337:13" pos:end="337:20"><expr pos:start="337:13" pos:end="337:19"><call pos:start="337:13" pos:end="337:19"><name pos:start="337:13" pos:end="337:16">exit</name><argument_list pos:start="337:17" pos:end="337:19">(<argument pos:start="337:18" pos:end="337:18"><expr pos:start="337:18" pos:end="337:18"><literal type="number" pos:start="337:18" pos:end="337:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="343:5" pos:end="345:21"><if pos:start="343:5" pos:end="345:21">if <condition pos:start="343:8" pos:end="343:32">(<expr pos:start="343:9" pos:end="343:31"><name pos:start="343:9" pos:end="343:18"><name pos:start="343:9" pos:end="343:10">tb</name><operator pos:start="343:11" pos:end="343:12">-&gt;</operator><name pos:start="343:13" pos:end="343:18">cflags</name></name> <operator pos:start="343:20" pos:end="343:20">&amp;</operator> <name pos:start="343:22" pos:end="343:31">CF_LAST_IO</name></expr>)</condition><block type="pseudo" pos:start="345:9" pos:end="345:21"><block_content pos:start="345:9" pos:end="345:21">

        <expr_stmt pos:start="345:9" pos:end="345:21"><expr pos:start="345:9" pos:end="345:20"><call pos:start="345:9" pos:end="345:20"><name pos:start="345:9" pos:end="345:18">gen_io_end</name><argument_list pos:start="345:19" pos:end="345:20">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="347:5" pos:end="363:5"><if pos:start="347:5" pos:end="351:5">if <condition pos:start="347:8" pos:end="347:43">(<expr pos:start="347:9" pos:end="347:42"><name pos:start="347:9" pos:end="347:21"><name pos:start="347:9" pos:end="347:11">ctx</name><operator pos:start="347:12" pos:end="347:12">.</operator><name pos:start="347:13" pos:end="347:21">exception</name></name> <operator pos:start="347:23" pos:end="347:24">==</operator> <name pos:start="347:26" pos:end="347:42">POWERPC_EXCP_NONE</name></expr>)</condition> <block pos:start="347:45" pos:end="351:5">{<block_content pos:start="349:9" pos:end="349:38">

        <expr_stmt pos:start="349:9" pos:end="349:38"><expr pos:start="349:9" pos:end="349:37"><call pos:start="349:9" pos:end="349:37"><name pos:start="349:9" pos:end="349:19">gen_goto_tb</name><argument_list pos:start="349:20" pos:end="349:37">(<argument pos:start="349:21" pos:end="349:24"><expr pos:start="349:21" pos:end="349:24"><operator pos:start="349:21" pos:end="349:21">&amp;</operator><name pos:start="349:22" pos:end="349:24">ctx</name></expr></argument>, <argument pos:start="349:27" pos:end="349:27"><expr pos:start="349:27" pos:end="349:27"><literal type="number" pos:start="349:27" pos:end="349:27">0</literal></expr></argument>, <argument pos:start="349:30" pos:end="349:36"><expr pos:start="349:30" pos:end="349:36"><name pos:start="349:30" pos:end="349:36"><name pos:start="349:30" pos:end="349:32">ctx</name><operator pos:start="349:33" pos:end="349:33">.</operator><name pos:start="349:34" pos:end="349:36">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="351:7" pos:end="363:5">else if <condition pos:start="351:15" pos:end="351:52">(<expr pos:start="351:16" pos:end="351:51"><name pos:start="351:16" pos:end="351:28"><name pos:start="351:16" pos:end="351:18">ctx</name><operator pos:start="351:19" pos:end="351:19">.</operator><name pos:start="351:20" pos:end="351:28">exception</name></name> <operator pos:start="351:30" pos:end="351:31">!=</operator> <name pos:start="351:33" pos:end="351:51">POWERPC_EXCP_BRANCH</name></expr>)</condition> <block pos:start="351:54" pos:end="363:5">{<block_content pos:start="353:9" pos:end="361:27">

        <if_stmt pos:start="353:9" pos:end="357:9"><if pos:start="353:9" pos:end="357:9">if <condition pos:start="353:12" pos:end="353:45">(<expr pos:start="353:13" pos:end="353:44"><call pos:start="353:13" pos:end="353:44"><name pos:start="353:13" pos:end="353:20">unlikely</name><argument_list pos:start="353:21" pos:end="353:44">(<argument pos:start="353:22" pos:end="353:43"><expr pos:start="353:22" pos:end="353:43"><name pos:start="353:22" pos:end="353:43"><name pos:start="353:22" pos:end="353:23">cs</name><operator pos:start="353:24" pos:end="353:25">-&gt;</operator><name pos:start="353:26" pos:end="353:43">singlestep_enabled</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="353:47" pos:end="357:9">{<block_content pos:start="355:13" pos:end="355:38">

            <expr_stmt pos:start="355:13" pos:end="355:38"><expr pos:start="355:13" pos:end="355:37"><call pos:start="355:13" pos:end="355:37"><name pos:start="355:13" pos:end="355:31">gen_debug_exception</name><argument_list pos:start="355:32" pos:end="355:37">(<argument pos:start="355:33" pos:end="355:36"><expr pos:start="355:33" pos:end="355:36"><name pos:start="355:33" pos:end="355:36">ctxp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="359:9" pos:end="359:45">/* Generate the return instruction */</comment>

        <expr_stmt pos:start="361:9" pos:end="361:27"><expr pos:start="361:9" pos:end="361:26"><call pos:start="361:9" pos:end="361:26"><name pos:start="361:9" pos:end="361:23">tcg_gen_exit_tb</name><argument_list pos:start="361:24" pos:end="361:26">(<argument pos:start="361:25" pos:end="361:25"><expr pos:start="361:25" pos:end="361:25"><literal type="number" pos:start="361:25" pos:end="361:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="365:5" pos:end="365:30"><expr pos:start="365:5" pos:end="365:29"><call pos:start="365:5" pos:end="365:29"><name pos:start="365:5" pos:end="365:14">gen_tb_end</name><argument_list pos:start="365:15" pos:end="365:29">(<argument pos:start="365:16" pos:end="365:17"><expr pos:start="365:16" pos:end="365:17"><name pos:start="365:16" pos:end="365:17">tb</name></expr></argument>, <argument pos:start="365:20" pos:end="365:28"><expr pos:start="365:20" pos:end="365:28"><name pos:start="365:20" pos:end="365:28">num_insns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="369:5" pos:end="369:34"><expr pos:start="369:5" pos:end="369:33"><name pos:start="369:5" pos:end="369:12"><name pos:start="369:5" pos:end="369:6">tb</name><operator pos:start="369:7" pos:end="369:8">-&gt;</operator><name pos:start="369:9" pos:end="369:12">size</name></name> <operator pos:start="369:14" pos:end="369:14">=</operator> <name pos:start="369:16" pos:end="369:22"><name pos:start="369:16" pos:end="369:18">ctx</name><operator pos:start="369:19" pos:end="369:19">.</operator><name pos:start="369:20" pos:end="369:22">nip</name></name> <operator pos:start="369:24" pos:end="369:24">-</operator> <name pos:start="369:26" pos:end="369:33">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="371:5" pos:end="376:0"><expr pos:start="371:5" pos:end="371:26"><name pos:start="371:5" pos:end="371:14"><name pos:start="371:5" pos:end="371:6">tb</name><operator pos:start="371:7" pos:end="371:8">-&gt;</operator><name pos:start="371:9" pos:end="371:14">icount</name></name> <operator pos:start="371:16" pos:end="371:16">=</operator> <name pos:start="371:18" pos:end="371:26">num_insns</name></expr>;</expr_stmt>



<cpp:if pos:start="375:1" pos:end="375:24">#<cpp:directive pos:start="375:2" pos:end="375:3">if</cpp:directive> <expr pos:start="375:5" pos:end="375:24"><call pos:start="375:5" pos:end="375:24"><name pos:start="375:5" pos:end="375:11">defined</name><argument_list pos:start="375:12" pos:end="375:24">(<argument pos:start="375:13" pos:end="375:23"><expr pos:start="375:13" pos:end="375:23"><name pos:start="375:13" pos:end="375:23">DEBUG_DISAS</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="377:5" pos:end="396:0"><if pos:start="377:5" pos:end="396:0">if <condition pos:start="377:8" pos:end="379:44">(<expr pos:start="377:9" pos:end="379:43"><call pos:start="377:9" pos:end="377:45"><name pos:start="377:9" pos:end="377:26">qemu_loglevel_mask</name><argument_list pos:start="377:27" pos:end="377:45">(<argument pos:start="377:28" pos:end="377:44"><expr pos:start="377:28" pos:end="377:44"><name pos:start="377:28" pos:end="377:44">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call>

        <operator pos:start="379:9" pos:end="379:10">&amp;&amp;</operator> <call pos:start="379:12" pos:end="379:43"><name pos:start="379:12" pos:end="379:33">qemu_log_in_addr_range</name><argument_list pos:start="379:34" pos:end="379:43">(<argument pos:start="379:35" pos:end="379:42"><expr pos:start="379:35" pos:end="379:42"><name pos:start="379:35" pos:end="379:42">pc_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="379:46" pos:end="396:0">{<block_content pos:start="381:9" pos:end="391:23">

        <decl_stmt pos:start="381:9" pos:end="381:18"><decl pos:start="381:9" pos:end="381:17"><type pos:start="381:9" pos:end="381:11"><name pos:start="381:9" pos:end="381:11">int</name></type> <name pos:start="381:13" pos:end="381:17">flags</name></decl>;</decl_stmt>

        <expr_stmt pos:start="383:9" pos:end="383:30"><expr pos:start="383:9" pos:end="383:29"><name pos:start="383:9" pos:end="383:13">flags</name> <operator pos:start="383:15" pos:end="383:15">=</operator> <name pos:start="383:17" pos:end="383:29"><name pos:start="383:17" pos:end="383:19">env</name><operator pos:start="383:20" pos:end="383:21">-&gt;</operator><name pos:start="383:22" pos:end="383:29">bfd_mach</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="385:9" pos:end="385:35"><expr pos:start="385:9" pos:end="385:34"><name pos:start="385:9" pos:end="385:13">flags</name> <operator pos:start="385:15" pos:end="385:16">|=</operator> <name pos:start="385:18" pos:end="385:28"><name pos:start="385:18" pos:end="385:20">ctx</name><operator pos:start="385:21" pos:end="385:21">.</operator><name pos:start="385:22" pos:end="385:28">le_mode</name></name> <operator pos:start="385:30" pos:end="385:31">&lt;&lt;</operator> <literal type="number" pos:start="385:33" pos:end="385:34">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="387:9" pos:end="387:54"><expr pos:start="387:9" pos:end="387:53"><call pos:start="387:9" pos:end="387:53"><name pos:start="387:9" pos:end="387:16">qemu_log</name><argument_list pos:start="387:17" pos:end="387:53">(<argument pos:start="387:18" pos:end="387:27"><expr pos:start="387:18" pos:end="387:27"><literal type="string" pos:start="387:18" pos:end="387:27">"IN: %s\n"</literal></expr></argument>, <argument pos:start="387:30" pos:end="387:52"><expr pos:start="387:30" pos:end="387:52"><call pos:start="387:30" pos:end="387:52"><name pos:start="387:30" pos:end="387:42">lookup_symbol</name><argument_list pos:start="387:43" pos:end="387:52">(<argument pos:start="387:44" pos:end="387:51"><expr pos:start="387:44" pos:end="387:51"><name pos:start="387:44" pos:end="387:51">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="389:9" pos:end="389:66"><expr pos:start="389:9" pos:end="389:65"><call pos:start="389:9" pos:end="389:65"><name pos:start="389:9" pos:end="389:24">log_target_disas</name><argument_list pos:start="389:25" pos:end="389:65">(<argument pos:start="389:26" pos:end="389:27"><expr pos:start="389:26" pos:end="389:27"><name pos:start="389:26" pos:end="389:27">cs</name></expr></argument>, <argument pos:start="389:30" pos:end="389:37"><expr pos:start="389:30" pos:end="389:37"><name pos:start="389:30" pos:end="389:37">pc_start</name></expr></argument>, <argument pos:start="389:40" pos:end="389:57"><expr pos:start="389:40" pos:end="389:57"><name pos:start="389:40" pos:end="389:46"><name pos:start="389:40" pos:end="389:42">ctx</name><operator pos:start="389:43" pos:end="389:43">.</operator><name pos:start="389:44" pos:end="389:46">nip</name></name> <operator pos:start="389:48" pos:end="389:48">-</operator> <name pos:start="389:50" pos:end="389:57">pc_start</name></expr></argument>, <argument pos:start="389:60" pos:end="389:64"><expr pos:start="389:60" pos:end="389:64"><name pos:start="389:60" pos:end="389:64">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="391:9" pos:end="391:23"><expr pos:start="391:9" pos:end="391:22"><call pos:start="391:9" pos:end="391:22"><name pos:start="391:9" pos:end="391:16">qemu_log</name><argument_list pos:start="391:17" pos:end="391:22">(<argument pos:start="391:18" pos:end="391:21"><expr pos:start="391:18" pos:end="391:21"><literal type="string" pos:start="391:18" pos:end="391:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="395:1" pos:end="395:6">#<cpp:directive pos:start="395:2" pos:end="395:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
