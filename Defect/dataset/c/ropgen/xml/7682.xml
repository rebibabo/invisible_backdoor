<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7682.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:13"><name pos:start="1:1" pos:end="1:11">PcGuestInfo</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:31">pc_guest_info_init</name><parameter_list pos:start="1:32" pos:end="3:61">(<parameter pos:start="1:33" pos:end="1:60"><decl pos:start="1:33" pos:end="1:60"><type pos:start="1:33" pos:end="1:60"><name pos:start="1:33" pos:end="1:42">ram_addr_t</name></type> <name pos:start="1:44" pos:end="1:60">below_4g_mem_size</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:60"><decl pos:start="3:33" pos:end="3:60"><type pos:start="3:33" pos:end="3:60"><name pos:start="3:33" pos:end="3:42">ram_addr_t</name></type> <name pos:start="3:44" pos:end="3:60">above_4g_mem_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="55:1">{<block_content pos:start="7:5" pos:end="53:22">

    <decl_stmt pos:start="7:5" pos:end="7:77"><decl pos:start="7:5" pos:end="7:76"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">PcGuestInfoState</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:38">guest_info_state</name> <init pos:start="7:40" pos:end="7:76">= <expr pos:start="7:42" pos:end="7:76"><call pos:start="7:42" pos:end="7:76"><name pos:start="7:42" pos:end="7:50">g_malloc0</name><argument_list pos:start="7:51" pos:end="7:76">(<argument pos:start="7:52" pos:end="7:75"><expr pos:start="7:52" pos:end="7:75"><sizeof pos:start="7:52" pos:end="7:57">sizeof <name/></sizeof>*<name pos:start="7:60" pos:end="7:75">guest_info_state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:54"><decl pos:start="9:5" pos:end="9:53"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">PcGuestInfo</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:27">guest_info</name> <init pos:start="9:29" pos:end="9:53">= <expr pos:start="9:31" pos:end="9:53"><operator pos:start="9:31" pos:end="9:31">&amp;</operator><name pos:start="9:32" pos:end="9:53"><name pos:start="9:32" pos:end="9:47">guest_info_state</name><operator pos:start="9:48" pos:end="9:49">-&gt;</operator><name pos:start="9:50" pos:end="9:53">info</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:59"><expr pos:start="13:5" pos:end="13:58"><name pos:start="13:5" pos:end="13:32"><name pos:start="13:5" pos:end="13:14">guest_info</name><operator pos:start="13:15" pos:end="13:16">-&gt;</operator><name pos:start="13:17" pos:end="13:24">pci_info</name><operator pos:start="13:25" pos:end="13:25">.</operator><name pos:start="13:26" pos:end="13:28">w32</name><operator pos:start="13:29" pos:end="13:29">.</operator><name pos:start="13:30" pos:end="13:32">end</name></name> <operator pos:start="13:34" pos:end="13:34">=</operator> <name pos:start="13:36" pos:end="13:58">IO_APIC_DEFAULT_ADDRESS</name></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="45:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:28">(<expr pos:start="15:9" pos:end="15:27"><sizeof pos:start="15:9" pos:end="15:22">sizeof<argument_list pos:start="15:15" pos:end="15:22">(<argument pos:start="15:16" pos:end="15:21"><expr pos:start="15:16" pos:end="15:21"><name pos:start="15:16" pos:end="15:21">hwaddr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="15:24" pos:end="15:25">==</operator> <literal type="number" pos:start="15:27" pos:end="15:27">4</literal></expr>)</condition> <block pos:start="15:30" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:41">

        <expr_stmt pos:start="17:9" pos:end="17:43"><expr pos:start="17:9" pos:end="17:42"><name pos:start="17:9" pos:end="17:38"><name pos:start="17:9" pos:end="17:18">guest_info</name><operator pos:start="17:19" pos:end="17:20">-&gt;</operator><name pos:start="17:21" pos:end="17:28">pci_info</name><operator pos:start="17:29" pos:end="17:29">.</operator><name pos:start="17:30" pos:end="17:32">w64</name><operator pos:start="17:33" pos:end="17:33">.</operator><name pos:start="17:34" pos:end="17:38">begin</name></name> <operator pos:start="17:40" pos:end="17:40">=</operator> <literal type="number" pos:start="17:42" pos:end="17:42">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:41"><expr pos:start="19:9" pos:end="19:40"><name pos:start="19:9" pos:end="19:36"><name pos:start="19:9" pos:end="19:18">guest_info</name><operator pos:start="19:19" pos:end="19:20">-&gt;</operator><name pos:start="19:21" pos:end="19:28">pci_info</name><operator pos:start="19:29" pos:end="19:29">.</operator><name pos:start="19:30" pos:end="19:32">w64</name><operator pos:start="19:33" pos:end="19:33">.</operator><name pos:start="19:34" pos:end="19:36">end</name></name> <operator pos:start="19:38" pos:end="19:38">=</operator> <literal type="number" pos:start="19:40" pos:end="19:40">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="21:7" pos:end="45:5">else <block pos:start="21:12" pos:end="45:5">{<block_content pos:start="35:9" pos:end="43:79">

        <comment type="block" pos:start="23:9" pos:end="33:11">/*

         * BIOS does not set MTRR entries for the 64 bit window, so no need to

         * align address to power of two.  Align address at 1G, this makes sure

         * it can be exactly covered with a PAT entry even when using huge

         * pages.

         */</comment>

        <expr_stmt pos:start="35:9" pos:end="37:71"><expr pos:start="35:9" pos:end="37:70"><name pos:start="35:9" pos:end="35:38"><name pos:start="35:9" pos:end="35:18">guest_info</name><operator pos:start="35:19" pos:end="35:20">-&gt;</operator><name pos:start="35:21" pos:end="35:28">pci_info</name><operator pos:start="35:29" pos:end="35:29">.</operator><name pos:start="35:30" pos:end="35:32">w64</name><operator pos:start="35:33" pos:end="35:33">.</operator><name pos:start="35:34" pos:end="35:38">begin</name></name> <operator pos:start="35:40" pos:end="35:40">=</operator>

            <call pos:start="37:13" pos:end="37:70"><name pos:start="37:13" pos:end="37:20">ROUND_UP</name><argument_list pos:start="37:21" pos:end="37:70">(<argument pos:start="37:22" pos:end="37:55"><expr pos:start="37:22" pos:end="37:55"><operator pos:start="37:22" pos:end="37:22">(</operator><literal type="number" pos:start="37:23" pos:end="37:28">0x1ULL</literal> <operator pos:start="37:30" pos:end="37:31">&lt;&lt;</operator> <literal type="number" pos:start="37:33" pos:end="37:34">32</literal><operator pos:start="37:35" pos:end="37:35">)</operator> <operator pos:start="37:37" pos:end="37:37">+</operator> <name pos:start="37:39" pos:end="37:55">above_4g_mem_size</name></expr></argument>, <argument pos:start="37:58" pos:end="37:69"><expr pos:start="37:58" pos:end="37:69"><literal type="number" pos:start="37:58" pos:end="37:63">0x1ULL</literal> <operator pos:start="37:65" pos:end="37:66">&lt;&lt;</operator> <literal type="number" pos:start="37:68" pos:end="37:69">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="41:27"><expr pos:start="39:9" pos:end="41:26"><name pos:start="39:9" pos:end="39:36"><name pos:start="39:9" pos:end="39:18">guest_info</name><operator pos:start="39:19" pos:end="39:20">-&gt;</operator><name pos:start="39:21" pos:end="39:28">pci_info</name><operator pos:start="39:29" pos:end="39:29">.</operator><name pos:start="39:30" pos:end="39:32">w64</name><operator pos:start="39:33" pos:end="39:33">.</operator><name pos:start="39:34" pos:end="39:36">end</name></name> <operator pos:start="39:38" pos:end="39:38">=</operator> <name pos:start="39:40" pos:end="39:69"><name pos:start="39:40" pos:end="39:49">guest_info</name><operator pos:start="39:50" pos:end="39:51">-&gt;</operator><name pos:start="39:52" pos:end="39:59">pci_info</name><operator pos:start="39:60" pos:end="39:60">.</operator><name pos:start="39:61" pos:end="39:63">w64</name><operator pos:start="39:64" pos:end="39:64">.</operator><name pos:start="39:65" pos:end="39:69">begin</name></name> <operator pos:start="39:71" pos:end="39:71">+</operator>

            <operator pos:start="41:13" pos:end="41:13">(</operator><literal type="number" pos:start="41:14" pos:end="41:19">0x1ULL</literal> <operator pos:start="41:21" pos:end="41:22">&lt;&lt;</operator> <literal type="number" pos:start="41:24" pos:end="41:25">62</literal><operator pos:start="41:26" pos:end="41:26">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:79"><expr pos:start="43:9" pos:end="43:78"><call pos:start="43:9" pos:end="43:78"><name pos:start="43:9" pos:end="43:14">assert</name><argument_list pos:start="43:15" pos:end="43:78">(<argument pos:start="43:16" pos:end="43:77"><expr pos:start="43:16" pos:end="43:77"><name pos:start="43:16" pos:end="43:45"><name pos:start="43:16" pos:end="43:25">guest_info</name><operator pos:start="43:26" pos:end="43:27">-&gt;</operator><name pos:start="43:28" pos:end="43:35">pci_info</name><operator pos:start="43:36" pos:end="43:36">.</operator><name pos:start="43:37" pos:end="43:39">w64</name><operator pos:start="43:40" pos:end="43:40">.</operator><name pos:start="43:41" pos:end="43:45">begin</name></name> <operator pos:start="43:47" pos:end="43:48">&lt;=</operator> <name pos:start="43:50" pos:end="43:77"><name pos:start="43:50" pos:end="43:59">guest_info</name><operator pos:start="43:60" pos:end="43:61">-&gt;</operator><name pos:start="43:62" pos:end="43:69">pci_info</name><operator pos:start="43:70" pos:end="43:70">.</operator><name pos:start="43:71" pos:end="43:73">w64</name><operator pos:start="43:74" pos:end="43:74">.</operator><name pos:start="43:75" pos:end="43:77">end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:71"><expr pos:start="49:5" pos:end="49:70"><name pos:start="49:5" pos:end="49:41"><name pos:start="49:5" pos:end="49:20">guest_info_state</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:34">machine_done</name><operator pos:start="49:35" pos:end="49:35">.</operator><name pos:start="49:36" pos:end="49:41">notify</name></name> <operator pos:start="49:43" pos:end="49:43">=</operator> <name pos:start="49:45" pos:end="49:70">pc_guest_info_machine_done</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:73"><expr pos:start="51:5" pos:end="51:72"><call pos:start="51:5" pos:end="51:72"><name pos:start="51:5" pos:end="51:39">qemu_add_machine_init_done_notifier</name><argument_list pos:start="51:40" pos:end="51:72">(<argument pos:start="51:41" pos:end="51:71"><expr pos:start="51:41" pos:end="51:71"><operator pos:start="51:41" pos:end="51:41">&amp;</operator><name pos:start="51:42" pos:end="51:71"><name pos:start="51:42" pos:end="51:57">guest_info_state</name><operator pos:start="51:58" pos:end="51:59">-&gt;</operator><name pos:start="51:60" pos:end="51:71">machine_done</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="53:5" pos:end="53:22">return <expr pos:start="53:12" pos:end="53:21"><name pos:start="53:12" pos:end="53:21">guest_info</name></expr>;</return>

</block_content>}</block></function>
</unit>
