<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17946.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">ram_save_target_page</name><parameter_list pos:start="1:32" pos:end="3:74">(<parameter pos:start="1:33" pos:end="1:44"><decl pos:start="1:33" pos:end="1:44"><type pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:40">RAMState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">rs</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:67"><decl pos:start="1:47" pos:end="1:67"><type pos:start="1:47" pos:end="1:67"><name pos:start="1:47" pos:end="1:62">PageSearchStatus</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:67">pss</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:47"><decl pos:start="3:33" pos:end="3:47"><type pos:start="3:33" pos:end="3:47"><name pos:start="3:33" pos:end="3:36">bool</name></type> <name pos:start="3:38" pos:end="3:47">last_stage</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:73"><decl pos:start="3:50" pos:end="3:73"><type pos:start="3:50" pos:end="3:73"><name pos:start="3:50" pos:end="3:59">ram_addr_t</name></type> <name pos:start="3:61" pos:end="3:73">dirty_ram_abs</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="63:1">{<block_content pos:start="7:5" pos:end="61:15">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">res</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:55">/* Check the pages is dirty and if it is send it */</comment>

    <if_stmt pos:start="13:5" pos:end="57:5"><if pos:start="13:5" pos:end="57:5">if <condition pos:start="13:8" pos:end="13:56">(<expr pos:start="13:9" pos:end="13:55"><call pos:start="13:9" pos:end="13:55"><name pos:start="13:9" pos:end="13:36">migration_bitmap_clear_dirty</name><argument_list pos:start="13:37" pos:end="13:55">(<argument pos:start="13:38" pos:end="13:39"><expr pos:start="13:38" pos:end="13:39"><name pos:start="13:38" pos:end="13:39">rs</name></expr></argument>, <argument pos:start="13:42" pos:end="13:54"><expr pos:start="13:42" pos:end="13:54"><name pos:start="13:42" pos:end="13:54">dirty_ram_abs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:58" pos:end="57:5">{<block_content pos:start="15:9" pos:end="55:9">

        <decl_stmt pos:start="15:9" pos:end="15:33"><decl pos:start="15:9" pos:end="15:32"><type pos:start="15:9" pos:end="15:23"><name pos:start="15:9" pos:end="15:16">unsigned</name> <name pos:start="15:18" pos:end="15:21">long</name> <modifier pos:start="15:23" pos:end="15:23">*</modifier></type><name pos:start="15:24" pos:end="15:32">unsentmap</name></decl>;</decl_stmt>

        <comment type="block" pos:start="17:9" pos:end="25:11">/*

         * If xbzrle is on, stop using the data compression after first

         * round of migration even if compression is enabled. In theory,

         * xbzrle can do better than compression.

         */</comment>



        <if_stmt pos:start="29:9" pos:end="39:9"><if pos:start="29:9" pos:end="35:9">if <condition pos:start="29:12" pos:end="31:61">(<expr pos:start="29:13" pos:end="31:60"><call pos:start="29:13" pos:end="29:37"><name pos:start="29:13" pos:end="29:35">migrate_use_compression</name><argument_list pos:start="29:36" pos:end="29:37">()</argument_list></call>

            <operator pos:start="31:13" pos:end="31:14">&amp;&amp;</operator> <operator pos:start="31:16" pos:end="31:16">(</operator><name pos:start="31:17" pos:end="31:34"><name pos:start="31:17" pos:end="31:18">rs</name><operator pos:start="31:19" pos:end="31:20">-&gt;</operator><name pos:start="31:21" pos:end="31:34">ram_bulk_stage</name></name> <operator pos:start="31:36" pos:end="31:37">||</operator> <operator pos:start="31:39" pos:end="31:39">!</operator><call pos:start="31:40" pos:end="31:59"><name pos:start="31:40" pos:end="31:57">migrate_use_xbzrle</name><argument_list pos:start="31:58" pos:end="31:59">()</argument_list></call><operator pos:start="31:60" pos:end="31:60">)</operator></expr>)</condition> <block pos:start="31:63" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:64">

            <expr_stmt pos:start="33:13" pos:end="33:64"><expr pos:start="33:13" pos:end="33:63"><name pos:start="33:13" pos:end="33:15">res</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <call pos:start="33:19" pos:end="33:63"><name pos:start="33:19" pos:end="33:42">ram_save_compressed_page</name><argument_list pos:start="33:43" pos:end="33:63">(<argument pos:start="33:44" pos:end="33:45"><expr pos:start="33:44" pos:end="33:45"><name pos:start="33:44" pos:end="33:45">rs</name></expr></argument>, <argument pos:start="33:48" pos:end="33:50"><expr pos:start="33:48" pos:end="33:50"><name pos:start="33:48" pos:end="33:50">pss</name></expr></argument>, <argument pos:start="33:53" pos:end="33:62"><expr pos:start="33:53" pos:end="33:62"><name pos:start="33:53" pos:end="33:62">last_stage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="35:11" pos:end="39:9">else <block pos:start="35:16" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:53">

            <expr_stmt pos:start="37:13" pos:end="37:53"><expr pos:start="37:13" pos:end="37:52"><name pos:start="37:13" pos:end="37:15">res</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <call pos:start="37:19" pos:end="37:52"><name pos:start="37:19" pos:end="37:31">ram_save_page</name><argument_list pos:start="37:32" pos:end="37:52">(<argument pos:start="37:33" pos:end="37:34"><expr pos:start="37:33" pos:end="37:34"><name pos:start="37:33" pos:end="37:34">rs</name></expr></argument>, <argument pos:start="37:37" pos:end="37:39"><expr pos:start="37:37" pos:end="37:39"><name pos:start="37:37" pos:end="37:39">pss</name></expr></argument>, <argument pos:start="37:42" pos:end="37:51"><expr pos:start="37:42" pos:end="37:51"><name pos:start="37:42" pos:end="37:51">last_stage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="43:9" pos:end="47:9"><if pos:start="43:9" pos:end="47:9">if <condition pos:start="43:12" pos:end="43:20">(<expr pos:start="43:13" pos:end="43:19"><name pos:start="43:13" pos:end="43:15">res</name> <operator pos:start="43:17" pos:end="43:17">&lt;</operator> <literal type="number" pos:start="43:19" pos:end="43:19">0</literal></expr>)</condition> <block pos:start="43:22" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:23">

            <return pos:start="45:13" pos:end="45:23">return <expr pos:start="45:20" pos:end="45:22"><name pos:start="45:20" pos:end="45:22">res</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:64"><expr pos:start="49:9" pos:end="49:63"><name pos:start="49:9" pos:end="49:17">unsentmap</name> <operator pos:start="49:19" pos:end="49:19">=</operator> <call pos:start="49:21" pos:end="49:52"><name pos:start="49:21" pos:end="49:35">atomic_rcu_read</name><argument_list pos:start="49:36" pos:end="49:52">(<argument pos:start="49:37" pos:end="49:51"><expr pos:start="49:37" pos:end="49:51"><operator pos:start="49:37" pos:end="49:37">&amp;</operator><name pos:start="49:38" pos:end="49:51"><name pos:start="49:38" pos:end="49:39">rs</name><operator pos:start="49:40" pos:end="49:41">-&gt;</operator><name pos:start="49:42" pos:end="49:51">ram_bitmap</name></name></expr></argument>)</argument_list></call><operator pos:start="49:53" pos:end="49:54">-&gt;</operator><name pos:start="49:55" pos:end="49:63">unsentmap</name></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:22">(<expr pos:start="51:13" pos:end="51:21"><name pos:start="51:13" pos:end="51:21">unsentmap</name></expr>)</condition> <block pos:start="51:24" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:68">

            <expr_stmt pos:start="53:13" pos:end="53:68"><expr pos:start="53:13" pos:end="53:67"><call pos:start="53:13" pos:end="53:67"><name pos:start="53:13" pos:end="53:21">clear_bit</name><argument_list pos:start="53:22" pos:end="53:67">(<argument pos:start="53:23" pos:end="53:55"><expr pos:start="53:23" pos:end="53:55"><name pos:start="53:23" pos:end="53:35">dirty_ram_abs</name> <operator pos:start="53:37" pos:end="53:38">&gt;&gt;</operator> <name pos:start="53:40" pos:end="53:55">TARGET_PAGE_BITS</name></expr></argument>, <argument pos:start="53:58" pos:end="53:66"><expr pos:start="53:58" pos:end="53:66"><name pos:start="53:58" pos:end="53:66">unsentmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="61:5" pos:end="61:15">return <expr pos:start="61:12" pos:end="61:14"><name pos:start="61:12" pos:end="61:14">res</name></expr>;</return>

</block_content>}</block></function>
</unit>
