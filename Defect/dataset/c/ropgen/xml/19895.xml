<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19895.c" pos:tabs="8"><function pos:start="1:1" pos:end="135:1"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">target_ulong</name></type> <name pos:start="1:21" pos:end="1:38">h_send_logical_lan</name><parameter_list pos:start="1:39" pos:end="3:79">(<parameter pos:start="1:40" pos:end="1:55"><decl pos:start="1:40" pos:end="1:55"><type pos:start="1:40" pos:end="1:55"><name pos:start="1:40" pos:end="1:50">CPUPPCState</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">env</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:80"><decl pos:start="1:58" pos:end="1:80"><type pos:start="1:58" pos:end="1:80"><name pos:start="1:58" pos:end="1:73">sPAPREnvironment</name> <modifier pos:start="1:75" pos:end="1:75">*</modifier></type><name pos:start="1:76" pos:end="1:80">spapr</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:58"><decl pos:start="3:40" pos:end="3:58"><type pos:start="3:40" pos:end="3:58"><name pos:start="3:40" pos:end="3:51">target_ulong</name></type> <name pos:start="3:53" pos:end="3:58">opcode</name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:78"><decl pos:start="3:61" pos:end="3:78"><type pos:start="3:61" pos:end="3:78"><name pos:start="3:61" pos:end="3:72">target_ulong</name> <modifier pos:start="3:74" pos:end="3:74">*</modifier></type><name pos:start="3:75" pos:end="3:78">args</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="135:1">{<block_content pos:start="7:5" pos:end="133:21">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">target_ulong</name></type> <name pos:start="7:18" pos:end="7:20">reg</name> <init pos:start="7:22" pos:end="7:30">= <expr pos:start="7:24" pos:end="7:30"><name pos:start="7:24" pos:end="7:30"><name pos:start="7:24" pos:end="7:27">args</name><index pos:start="7:28" pos:end="7:30">[<expr pos:start="7:29" pos:end="7:29"><literal type="number" pos:start="7:29" pos:end="7:29">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">target_ulong</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:22">bufs</name> <init pos:start="9:24" pos:end="9:33">= <expr pos:start="9:26" pos:end="9:33"><name pos:start="9:26" pos:end="9:29">args</name> <operator pos:start="9:31" pos:end="9:31">+</operator> <literal type="number" pos:start="9:33" pos:end="9:33">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:42"><decl pos:start="11:5" pos:end="11:41"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16">target_ulong</name></type> <name pos:start="11:18" pos:end="11:31">continue_token</name> <init pos:start="11:33" pos:end="11:41">= <expr pos:start="11:35" pos:end="11:41"><name pos:start="11:35" pos:end="11:41"><name pos:start="11:35" pos:end="11:38">args</name><index pos:start="11:39" pos:end="11:41">[<expr pos:start="11:40" pos:end="11:40"><literal type="number" pos:start="11:40" pos:end="11:40">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:70"><decl pos:start="13:5" pos:end="13:69"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18">VIOsPAPRDevice</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:24">sdev</name> <init pos:start="13:26" pos:end="13:69">= <expr pos:start="13:28" pos:end="13:69"><call pos:start="13:28" pos:end="13:69"><name pos:start="13:28" pos:end="13:48">spapr_vio_find_by_reg</name><argument_list pos:start="13:49" pos:end="13:69">(<argument pos:start="13:50" pos:end="13:63"><expr pos:start="13:50" pos:end="13:63"><name pos:start="13:50" pos:end="13:63"><name pos:start="13:50" pos:end="13:54">spapr</name><operator pos:start="13:55" pos:end="13:56">-&gt;</operator><name pos:start="13:57" pos:end="13:63">vio_bus</name></name></expr></argument>, <argument pos:start="13:66" pos:end="13:68"><expr pos:start="13:66" pos:end="13:68"><name pos:start="13:66" pos:end="13:68">reg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:57"><decl pos:start="15:5" pos:end="15:56"><type pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:22">VIOsPAPRVLANDevice</name> <modifier pos:start="15:24" pos:end="15:24">*</modifier></type><name pos:start="15:25" pos:end="15:27">dev</name> <init pos:start="15:29" pos:end="15:56">= <expr pos:start="15:31" pos:end="15:56"><operator pos:start="15:31" pos:end="15:31">(</operator><name pos:start="15:32" pos:end="15:49">VIOsPAPRVLANDevice</name> <operator pos:start="15:51" pos:end="15:51">*</operator><operator pos:start="15:52" pos:end="15:52">)</operator><name pos:start="15:53" pos:end="15:56">sdev</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">unsigned</name></type> <name pos:start="17:14" pos:end="17:22">total_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">uint8_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:17">lbuf</name></decl>, <decl pos:start="19:20" pos:end="19:21"><type ref="prev" pos:start="19:5" pos:end="19:13"><modifier pos:start="19:20" pos:end="19:20">*</modifier></type><name pos:start="19:21" pos:end="19:21">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:17"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>, <decl pos:start="21:12" pos:end="21:16"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:12" pos:end="21:16">nbufs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:12"><decl pos:start="23:5" pos:end="23:11"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="29:54"><expr pos:start="27:5" pos:end="29:53"><call pos:start="27:5" pos:end="29:53"><name pos:start="27:5" pos:end="27:11">dprintf</name><argument_list pos:start="27:12" pos:end="29:53">(<argument pos:start="27:13" pos:end="29:31"><expr pos:start="27:13" pos:end="29:31"><literal type="string" pos:start="27:13" pos:end="27:35">"H_SEND_LOGICAL_LAN(0x"</literal> <name pos:start="27:37" pos:end="27:49">TARGET_FMT_lx</name> <literal type="string" pos:start="27:51" pos:end="27:64">", &lt;bufs&gt;, 0x"</literal>

            <name pos:start="29:13" pos:end="29:25">TARGET_FMT_lx</name> <literal type="string" pos:start="29:27" pos:end="29:31">")\n"</literal></expr></argument>, <argument pos:start="29:34" pos:end="29:36"><expr pos:start="29:34" pos:end="29:36"><name pos:start="29:34" pos:end="29:36">reg</name></expr></argument>, <argument pos:start="29:39" pos:end="29:52"><expr pos:start="29:39" pos:end="29:52"><name pos:start="29:39" pos:end="29:52">continue_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:14">(<expr pos:start="33:9" pos:end="33:13"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:13">sdev</name></expr>)</condition> <block pos:start="33:16" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:27">

        <return pos:start="35:9" pos:end="35:27">return <expr pos:start="35:16" pos:end="35:26"><name pos:start="35:16" pos:end="35:26">H_PARAMETER</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:43"><expr pos:start="41:5" pos:end="41:42"><call pos:start="41:5" pos:end="41:42"><name pos:start="41:5" pos:end="41:11">dprintf</name><argument_list pos:start="41:12" pos:end="41:42">(<argument pos:start="41:13" pos:end="41:27"><expr pos:start="41:13" pos:end="41:27"><literal type="string" pos:start="41:13" pos:end="41:27">"rxbufs = %d\n"</literal></expr></argument>, <argument pos:start="41:30" pos:end="41:41"><expr pos:start="41:30" pos:end="41:41"><name pos:start="41:30" pos:end="41:41"><name pos:start="41:30" pos:end="41:32">dev</name><operator pos:start="41:33" pos:end="41:34">-&gt;</operator><name pos:start="41:35" pos:end="41:41">rx_bufs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:21">(<expr pos:start="45:9" pos:end="45:20"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:20"><name pos:start="45:10" pos:end="45:12">dev</name><operator pos:start="45:13" pos:end="45:14">-&gt;</operator><name pos:start="45:15" pos:end="45:20">isopen</name></name></expr>)</condition> <block pos:start="45:23" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:25">

        <return pos:start="47:9" pos:end="47:25">return <expr pos:start="47:16" pos:end="47:24"><name pos:start="47:16" pos:end="47:24">H_DROPPED</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:23">(<expr pos:start="53:9" pos:end="53:22"><name pos:start="53:9" pos:end="53:22">continue_token</name></expr>)</condition> <block pos:start="53:25" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:26">

        <return pos:start="55:9" pos:end="55:26">return <expr pos:start="55:16" pos:end="55:25"><name pos:start="55:16" pos:end="55:25">H_HARDWARE</name></expr>;</return> <comment type="block" pos:start="55:28" pos:end="55:59">/* FIXME actually handle this */</comment>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:18"><expr pos:start="61:5" pos:end="61:17"><name pos:start="61:5" pos:end="61:13">total_len</name> <operator pos:start="61:15" pos:end="61:15">=</operator> <literal type="number" pos:start="61:17" pos:end="61:17">0</literal></expr>;</expr_stmt>

    <for pos:start="63:5" pos:end="75:5">for <control pos:start="63:9" pos:end="63:27">(<init pos:start="63:10" pos:end="63:15"><expr pos:start="63:10" pos:end="63:14"><name pos:start="63:10" pos:end="63:10">i</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <literal type="number" pos:start="63:14" pos:end="63:14">0</literal></expr>;</init> <condition pos:start="63:17" pos:end="63:22"><expr pos:start="63:17" pos:end="63:21"><name pos:start="63:17" pos:end="63:17">i</name> <operator pos:start="63:19" pos:end="63:19">&lt;</operator> <literal type="number" pos:start="63:21" pos:end="63:21">6</literal></expr>;</condition> <incr pos:start="63:24" pos:end="63:26"><expr pos:start="63:24" pos:end="63:26"><name pos:start="63:24" pos:end="63:24">i</name><operator pos:start="63:25" pos:end="63:26">++</operator></expr></incr>)</control> <block pos:start="63:29" pos:end="75:5">{<block_content pos:start="65:9" pos:end="73:42">

        <expr_stmt pos:start="65:9" pos:end="65:63"><expr pos:start="65:9" pos:end="65:62"><call pos:start="65:9" pos:end="65:62"><name pos:start="65:9" pos:end="65:15">dprintf</name><argument_list pos:start="65:16" pos:end="65:62">(<argument pos:start="65:17" pos:end="65:52"><expr pos:start="65:17" pos:end="65:52"><literal type="string" pos:start="65:17" pos:end="65:33">"   buf desc: 0x"</literal> <name pos:start="65:35" pos:end="65:47">TARGET_FMT_lx</name> <literal type="string" pos:start="65:49" pos:end="65:52">"\n"</literal></expr></argument>, <argument pos:start="65:55" pos:end="65:61"><expr pos:start="65:55" pos:end="65:61"><name pos:start="65:55" pos:end="65:61"><name pos:start="65:55" pos:end="65:58">bufs</name><index pos:start="65:59" pos:end="65:61">[<expr pos:start="65:60" pos:end="65:60"><name pos:start="65:60" pos:end="65:60">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="71:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:39">(<expr pos:start="67:13" pos:end="67:38"><operator pos:start="67:13" pos:end="67:13">!</operator><operator pos:start="67:14" pos:end="67:14">(</operator><name pos:start="67:15" pos:end="67:21"><name pos:start="67:15" pos:end="67:18">bufs</name><index pos:start="67:19" pos:end="67:21">[<expr pos:start="67:20" pos:end="67:20"><name pos:start="67:20" pos:end="67:20">i</name></expr>]</index></name> <operator pos:start="67:23" pos:end="67:23">&amp;</operator> <name pos:start="67:25" pos:end="67:37">VLAN_BD_VALID</name><operator pos:start="67:38" pos:end="67:38">)</operator></expr>)</condition> <block pos:start="67:41" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:18">

            <break pos:start="69:13" pos:end="69:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:42"><expr pos:start="73:9" pos:end="73:41"><name pos:start="73:9" pos:end="73:17">total_len</name> <operator pos:start="73:19" pos:end="73:20">+=</operator> <call pos:start="73:22" pos:end="73:41"><name pos:start="73:22" pos:end="73:32">VLAN_BD_LEN</name><argument_list pos:start="73:33" pos:end="73:41">(<argument pos:start="73:34" pos:end="73:40"><expr pos:start="73:34" pos:end="73:40"><name pos:start="73:34" pos:end="73:40"><name pos:start="73:34" pos:end="73:37">bufs</name><index pos:start="73:38" pos:end="73:40">[<expr pos:start="73:39" pos:end="73:39"><name pos:start="73:39" pos:end="73:39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="79:5" pos:end="79:14"><expr pos:start="79:5" pos:end="79:13"><name pos:start="79:5" pos:end="79:9">nbufs</name> <operator pos:start="79:11" pos:end="79:11">=</operator> <name pos:start="79:13" pos:end="79:13">i</name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="83:30"><expr pos:start="81:5" pos:end="83:29"><call pos:start="81:5" pos:end="83:29"><name pos:start="81:5" pos:end="81:11">dprintf</name><argument_list pos:start="81:12" pos:end="83:29">(<argument pos:start="81:13" pos:end="81:66"><expr pos:start="81:13" pos:end="81:66"><literal type="string" pos:start="81:13" pos:end="81:66">"h_send_logical_lan() %d buffers, total length 0x%x\n"</literal></expr></argument>,

            <argument pos:start="83:13" pos:end="83:17"><expr pos:start="83:13" pos:end="83:17"><name pos:start="83:13" pos:end="83:17">nbufs</name></expr></argument>, <argument pos:start="83:20" pos:end="83:28"><expr pos:start="83:20" pos:end="83:28"><name pos:start="83:20" pos:end="83:28">total_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="87:5" pos:end="91:5"><if pos:start="87:5" pos:end="91:5">if <condition pos:start="87:8" pos:end="87:23">(<expr pos:start="87:9" pos:end="87:22"><name pos:start="87:9" pos:end="87:17">total_len</name> <operator pos:start="87:19" pos:end="87:20">==</operator> <literal type="number" pos:start="87:22" pos:end="87:22">0</literal></expr>)</condition> <block pos:start="87:25" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:25">

        <return pos:start="89:9" pos:end="89:25">return <expr pos:start="89:16" pos:end="89:24"><name pos:start="89:16" pos:end="89:24">H_SUCCESS</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="95:5" pos:end="101:5"><if pos:start="95:5" pos:end="101:5">if <condition pos:start="95:8" pos:end="95:36">(<expr pos:start="95:9" pos:end="95:35"><name pos:start="95:9" pos:end="95:17">total_len</name> <operator pos:start="95:19" pos:end="95:19">&gt;</operator> <name pos:start="95:21" pos:end="95:35">MAX_PACKET_SIZE</name></expr>)</condition> <block pos:start="95:38" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:26">

        <comment type="block" pos:start="97:9" pos:end="97:63">/* Don't let the guest force too large an allocation */</comment>

        <return pos:start="99:9" pos:end="99:26">return <expr pos:start="99:16" pos:end="99:25"><name pos:start="99:16" pos:end="99:25">H_RESOURCE</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:29"><expr pos:start="105:5" pos:end="105:28"><name pos:start="105:5" pos:end="105:8">lbuf</name> <operator pos:start="105:10" pos:end="105:10">=</operator> <call pos:start="105:12" pos:end="105:28"><name pos:start="105:12" pos:end="105:17">alloca</name><argument_list pos:start="105:18" pos:end="105:28">(<argument pos:start="105:19" pos:end="105:27"><expr pos:start="105:19" pos:end="105:27"><name pos:start="105:19" pos:end="105:27">total_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:13"><expr pos:start="107:5" pos:end="107:12"><name pos:start="107:5" pos:end="107:5">p</name> <operator pos:start="107:7" pos:end="107:7">=</operator> <name pos:start="107:9" pos:end="107:12">lbuf</name></expr>;</expr_stmt>

    <for pos:start="109:5" pos:end="125:5">for <control pos:start="109:9" pos:end="109:31">(<init pos:start="109:10" pos:end="109:15"><expr pos:start="109:10" pos:end="109:14"><name pos:start="109:10" pos:end="109:10">i</name> <operator pos:start="109:12" pos:end="109:12">=</operator> <literal type="number" pos:start="109:14" pos:end="109:14">0</literal></expr>;</init> <condition pos:start="109:17" pos:end="109:26"><expr pos:start="109:17" pos:end="109:25"><name pos:start="109:17" pos:end="109:17">i</name> <operator pos:start="109:19" pos:end="109:19">&lt;</operator> <name pos:start="109:21" pos:end="109:25">nbufs</name></expr>;</condition> <incr pos:start="109:28" pos:end="109:30"><expr pos:start="109:28" pos:end="109:30"><name pos:start="109:28" pos:end="109:28">i</name><operator pos:start="109:29" pos:end="109:30">++</operator></expr></incr>)</control> <block pos:start="109:33" pos:end="125:5">{<block_content pos:start="111:9" pos:end="123:34">

        <expr_stmt pos:start="111:9" pos:end="113:58"><expr pos:start="111:9" pos:end="113:57"><name pos:start="111:9" pos:end="111:11">ret</name> <operator pos:start="111:13" pos:end="111:13">=</operator> <call pos:start="111:15" pos:end="113:57"><name pos:start="111:15" pos:end="111:32">spapr_tce_dma_read</name><argument_list pos:start="111:33" pos:end="113:57">(<argument pos:start="111:34" pos:end="111:37"><expr pos:start="111:34" pos:end="111:37"><name pos:start="111:34" pos:end="111:37">sdev</name></expr></argument>, <argument pos:start="111:40" pos:end="111:60"><expr pos:start="111:40" pos:end="111:60"><call pos:start="111:40" pos:end="111:60"><name pos:start="111:40" pos:end="111:51">VLAN_BD_ADDR</name><argument_list pos:start="111:52" pos:end="111:60">(<argument pos:start="111:53" pos:end="111:59"><expr pos:start="111:53" pos:end="111:59"><name pos:start="111:53" pos:end="111:59"><name pos:start="111:53" pos:end="111:56">bufs</name><index pos:start="111:57" pos:end="111:59">[<expr pos:start="111:58" pos:end="111:58"><name pos:start="111:58" pos:end="111:58">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

                                 <argument pos:start="113:34" pos:end="113:34"><expr pos:start="113:34" pos:end="113:34"><name pos:start="113:34" pos:end="113:34">p</name></expr></argument>, <argument pos:start="113:37" pos:end="113:56"><expr pos:start="113:37" pos:end="113:56"><call pos:start="113:37" pos:end="113:56"><name pos:start="113:37" pos:end="113:47">VLAN_BD_LEN</name><argument_list pos:start="113:48" pos:end="113:56">(<argument pos:start="113:49" pos:end="113:55"><expr pos:start="113:49" pos:end="113:55"><name pos:start="113:49" pos:end="113:55"><name pos:start="113:49" pos:end="113:52">bufs</name><index pos:start="113:53" pos:end="113:55">[<expr pos:start="113:54" pos:end="113:54"><name pos:start="113:54" pos:end="113:54">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="119:9"><if pos:start="115:9" pos:end="119:9">if <condition pos:start="115:12" pos:end="115:20">(<expr pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:15">ret</name> <operator pos:start="115:17" pos:end="115:17">&lt;</operator> <literal type="number" pos:start="115:19" pos:end="115:19">0</literal></expr>)</condition> <block pos:start="115:22" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:23">

            <return pos:start="117:13" pos:end="117:23">return <expr pos:start="117:20" pos:end="117:22"><name pos:start="117:20" pos:end="117:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="123:9" pos:end="123:34"><expr pos:start="123:9" pos:end="123:33"><name pos:start="123:9" pos:end="123:9">p</name> <operator pos:start="123:11" pos:end="123:12">+=</operator> <call pos:start="123:14" pos:end="123:33"><name pos:start="123:14" pos:end="123:24">VLAN_BD_LEN</name><argument_list pos:start="123:25" pos:end="123:33">(<argument pos:start="123:26" pos:end="123:32"><expr pos:start="123:26" pos:end="123:32"><name pos:start="123:26" pos:end="123:32"><name pos:start="123:26" pos:end="123:29">bufs</name><index pos:start="123:30" pos:end="123:32">[<expr pos:start="123:31" pos:end="123:31"><name pos:start="123:31" pos:end="123:31">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="129:5" pos:end="129:53"><expr pos:start="129:5" pos:end="129:52"><call pos:start="129:5" pos:end="129:52"><name pos:start="129:5" pos:end="129:20">qemu_send_packet</name><argument_list pos:start="129:21" pos:end="129:52">(<argument pos:start="129:22" pos:end="129:34"><expr pos:start="129:22" pos:end="129:34"><operator pos:start="129:22" pos:end="129:22">&amp;</operator><name pos:start="129:23" pos:end="129:34"><name pos:start="129:23" pos:end="129:25">dev</name><operator pos:start="129:26" pos:end="129:27">-&gt;</operator><name pos:start="129:28" pos:end="129:30">nic</name><operator pos:start="129:31" pos:end="129:32">-&gt;</operator><name pos:start="129:33" pos:end="129:34">nc</name></name></expr></argument>, <argument pos:start="129:37" pos:end="129:40"><expr pos:start="129:37" pos:end="129:40"><name pos:start="129:37" pos:end="129:40">lbuf</name></expr></argument>, <argument pos:start="129:43" pos:end="129:51"><expr pos:start="129:43" pos:end="129:51"><name pos:start="129:43" pos:end="129:51">total_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="133:5" pos:end="133:21">return <expr pos:start="133:12" pos:end="133:20"><name pos:start="133:12" pos:end="133:20">H_SUCCESS</name></expr>;</return>

</block_content>}</block></function>
</unit>
