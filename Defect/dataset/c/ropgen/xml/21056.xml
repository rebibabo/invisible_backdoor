<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21056.c" pos:tabs="8"><function pos:start="1:1" pos:end="247:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:17">ExitStatus</name></type> <name pos:start="1:19" pos:end="1:30">gen_call_pal</name><parameter_list pos:start="1:31" pos:end="1:62">(<parameter pos:start="1:32" pos:end="1:48"><decl pos:start="1:32" pos:end="1:48"><type pos:start="1:32" pos:end="1:48"><name pos:start="1:32" pos:end="1:43">DisasContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">ctx</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:61"><decl pos:start="1:51" pos:end="1:61"><type pos:start="1:51" pos:end="1:61"><name pos:start="1:51" pos:end="1:53">int</name></type> <name pos:start="1:55" pos:end="1:61">palcode</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="247:1">{<block_content pos:start="13:5" pos:end="246:0">

    <comment type="block" pos:start="5:5" pos:end="7:37">/* We're emulating OSF/1 PALcode.  Many of these are trivial access

       to internal cpu registers.  */</comment>



    <comment type="block" pos:start="11:5" pos:end="11:31">/* Unprivileged PAL call */</comment>

    <if_stmt pos:start="13:5" pos:end="56:0"><if pos:start="13:5" pos:end="56:0">if <condition pos:start="13:8" pos:end="13:42">(<expr pos:start="13:9" pos:end="13:41"><name pos:start="13:9" pos:end="13:15">palcode</name> <operator pos:start="13:17" pos:end="13:18">&gt;=</operator> <literal type="number" pos:start="13:20" pos:end="13:23">0x80</literal> <operator pos:start="13:25" pos:end="13:26">&amp;&amp;</operator> <name pos:start="13:28" pos:end="13:34">palcode</name> <operator pos:start="13:36" pos:end="13:36">&lt;</operator> <literal type="number" pos:start="13:38" pos:end="13:41">0xC0</literal></expr>)</condition> <block pos:start="13:44" pos:end="56:0">{<block_content pos:start="15:9" pos:end="49:23">

        <switch pos:start="15:9" pos:end="47:9">switch <condition pos:start="15:16" pos:end="15:24">(<expr pos:start="15:17" pos:end="15:23"><name pos:start="15:17" pos:end="15:23">palcode</name></expr>)</condition> <block pos:start="15:26" pos:end="47:9">{<block_content pos:start="17:9" pos:end="45:29">

        <case pos:start="17:9" pos:end="17:18">case <expr pos:start="17:14" pos:end="17:17"><literal type="number" pos:start="17:14" pos:end="17:17">0x86</literal></expr>:</case>

            <comment type="block" pos:start="19:13" pos:end="19:21">/* IMB */</comment>

            <comment type="block" pos:start="21:13" pos:end="21:37">/* No-op inside QEMU.  */</comment>

            <break pos:start="23:13" pos:end="23:18">break;</break>

        <case pos:start="25:9" pos:end="25:18">case <expr pos:start="25:14" pos:end="25:17"><literal type="number" pos:start="25:14" pos:end="25:17">0x9E</literal></expr>:</case>

            <comment type="block" pos:start="27:13" pos:end="27:26">/* RDUNIQUE */</comment>

            <expr_stmt pos:start="29:13" pos:end="29:55"><expr pos:start="29:13" pos:end="29:54"><call pos:start="29:13" pos:end="29:54"><name pos:start="29:13" pos:end="29:27">tcg_gen_mov_i64</name><argument_list pos:start="29:28" pos:end="29:54">(<argument pos:start="29:29" pos:end="29:41"><expr pos:start="29:29" pos:end="29:41"><name pos:start="29:29" pos:end="29:41"><name pos:start="29:29" pos:end="29:34">cpu_ir</name><index pos:start="29:35" pos:end="29:41">[<expr pos:start="29:36" pos:end="29:40"><name pos:start="29:36" pos:end="29:40">IR_V0</name></expr>]</index></name></expr></argument>, <argument pos:start="29:44" pos:end="29:53"><expr pos:start="29:44" pos:end="29:53"><name pos:start="29:44" pos:end="29:53">cpu_unique</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="31:13" pos:end="31:18">break;</break>

        <case pos:start="33:9" pos:end="33:18">case <expr pos:start="33:14" pos:end="33:17"><literal type="number" pos:start="33:14" pos:end="33:17">0x9F</literal></expr>:</case>

            <comment type="block" pos:start="35:13" pos:end="35:26">/* WRUNIQUE */</comment>

            <expr_stmt pos:start="37:13" pos:end="37:55"><expr pos:start="37:13" pos:end="37:54"><call pos:start="37:13" pos:end="37:54"><name pos:start="37:13" pos:end="37:27">tcg_gen_mov_i64</name><argument_list pos:start="37:28" pos:end="37:54">(<argument pos:start="37:29" pos:end="37:38"><expr pos:start="37:29" pos:end="37:38"><name pos:start="37:29" pos:end="37:38">cpu_unique</name></expr></argument>, <argument pos:start="37:41" pos:end="37:53"><expr pos:start="37:41" pos:end="37:53"><name pos:start="37:41" pos:end="37:53"><name pos:start="37:41" pos:end="37:46">cpu_ir</name><index pos:start="37:47" pos:end="37:53">[<expr pos:start="37:48" pos:end="37:52"><name pos:start="37:48" pos:end="37:52">IR_A0</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="39:13" pos:end="39:18">break;</break>

        <default pos:start="41:9" pos:end="41:16">default:</default>

            <expr_stmt pos:start="43:13" pos:end="43:28"><expr pos:start="43:13" pos:end="43:27"><name pos:start="43:13" pos:end="43:19">palcode</name> <operator pos:start="43:21" pos:end="43:22">&amp;=</operator> <literal type="number" pos:start="43:24" pos:end="43:27">0xbf</literal></expr>;</expr_stmt>

            <goto pos:start="45:13" pos:end="45:29">goto <name pos:start="45:18" pos:end="45:28">do_call_pal</name>;</goto>

        </block_content>}</block></switch>

        <return pos:start="49:9" pos:end="49:23">return <expr pos:start="49:16" pos:end="49:22"><name pos:start="49:16" pos:end="49:22">NO_EXIT</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



<cpp:ifndef pos:start="55:1" pos:end="55:24">#<cpp:directive pos:start="55:2" pos:end="55:7">ifndef</cpp:directive> <name pos:start="55:9" pos:end="55:24">CONFIG_USER_ONLY</name></cpp:ifndef>

    <comment type="block" pos:start="57:5" pos:end="57:29">/* Privileged PAL code */</comment>

    <if_stmt pos:start="59:5" pos:end="186:0"><if pos:start="59:5" pos:end="186:0">if <condition pos:start="59:8" pos:end="59:69">(<expr pos:start="59:9" pos:end="59:68"><name pos:start="59:9" pos:end="59:15">palcode</name> <operator pos:start="59:17" pos:end="59:17">&lt;</operator> <literal type="number" pos:start="59:19" pos:end="59:22">0x40</literal> <operator pos:start="59:24" pos:end="59:25">&amp;&amp;</operator> <operator pos:start="59:27" pos:end="59:27">(</operator><name pos:start="59:28" pos:end="59:41"><name pos:start="59:28" pos:end="59:30">ctx</name><operator pos:start="59:31" pos:end="59:32">-&gt;</operator><name pos:start="59:33" pos:end="59:34">tb</name><operator pos:start="59:35" pos:end="59:36">-&gt;</operator><name pos:start="59:37" pos:end="59:41">flags</name></name> <operator pos:start="59:43" pos:end="59:43">&amp;</operator> <name pos:start="59:45" pos:end="59:62">TB_FLAGS_USER_MODE</name><operator pos:start="59:63" pos:end="59:63">)</operator> <operator pos:start="59:65" pos:end="59:66">==</operator> <literal type="number" pos:start="59:68" pos:end="59:68">0</literal></expr>)</condition> <block pos:start="59:71" pos:end="186:0">{<block_content pos:start="61:9" pos:end="181:23">

        <switch pos:start="61:9" pos:end="179:9">switch <condition pos:start="61:16" pos:end="61:24">(<expr pos:start="61:17" pos:end="61:23"><name pos:start="61:17" pos:end="61:23">palcode</name></expr>)</condition> <block pos:start="61:26" pos:end="179:9">{<block_content pos:start="63:9" pos:end="177:29">

        <case pos:start="63:9" pos:end="63:18">case <expr pos:start="63:14" pos:end="63:17"><literal type="number" pos:start="63:14" pos:end="63:17">0x01</literal></expr>:</case>

            <comment type="block" pos:start="65:13" pos:end="65:24">/* CFLUSH */</comment>

            <comment type="block" pos:start="67:13" pos:end="67:37">/* No-op inside QEMU.  */</comment>

            <break pos:start="69:13" pos:end="69:18">break;</break>

        <case pos:start="71:9" pos:end="71:18">case <expr pos:start="71:14" pos:end="71:17"><literal type="number" pos:start="71:14" pos:end="71:17">0x02</literal></expr>:</case>

            <comment type="block" pos:start="73:13" pos:end="73:24">/* DRAINA */</comment>

            <comment type="block" pos:start="75:13" pos:end="75:37">/* No-op inside QEMU.  */</comment>

            <break pos:start="77:13" pos:end="77:18">break;</break>

        <case pos:start="79:9" pos:end="79:18">case <expr pos:start="79:14" pos:end="79:17"><literal type="number" pos:start="79:14" pos:end="79:17">0x2D</literal></expr>:</case>

            <comment type="block" pos:start="81:13" pos:end="81:26">/* WRVPTPTR */</comment>

            <expr_stmt pos:start="83:13" pos:end="83:84"><expr pos:start="83:13" pos:end="83:83"><call pos:start="83:13" pos:end="83:83"><name pos:start="83:13" pos:end="83:26">tcg_gen_st_i64</name><argument_list pos:start="83:27" pos:end="83:83">(<argument pos:start="83:28" pos:end="83:40"><expr pos:start="83:28" pos:end="83:40"><name pos:start="83:28" pos:end="83:40"><name pos:start="83:28" pos:end="83:33">cpu_ir</name><index pos:start="83:34" pos:end="83:40">[<expr pos:start="83:35" pos:end="83:39"><name pos:start="83:35" pos:end="83:39">IR_A0</name></expr>]</index></name></expr></argument>, <argument pos:start="83:43" pos:end="83:49"><expr pos:start="83:43" pos:end="83:49"><name pos:start="83:43" pos:end="83:49">cpu_env</name></expr></argument>, <argument pos:start="83:52" pos:end="83:82"><expr pos:start="83:52" pos:end="83:82"><call pos:start="83:52" pos:end="83:82"><name pos:start="83:52" pos:end="83:59">offsetof</name><argument_list pos:start="83:60" pos:end="83:82">(<argument pos:start="83:61" pos:end="83:73"><expr pos:start="83:61" pos:end="83:73"><name pos:start="83:61" pos:end="83:73">CPUAlphaState</name></expr></argument>, <argument pos:start="83:76" pos:end="83:81"><expr pos:start="83:76" pos:end="83:81"><name pos:start="83:76" pos:end="83:81">vptptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="85:13" pos:end="85:18">break;</break>

        <case pos:start="87:9" pos:end="87:18">case <expr pos:start="87:14" pos:end="87:17"><literal type="number" pos:start="87:14" pos:end="87:17">0x31</literal></expr>:</case>

            <comment type="block" pos:start="89:13" pos:end="89:23">/* WRVAL */</comment>

            <expr_stmt pos:start="91:13" pos:end="91:55"><expr pos:start="91:13" pos:end="91:54"><call pos:start="91:13" pos:end="91:54"><name pos:start="91:13" pos:end="91:27">tcg_gen_mov_i64</name><argument_list pos:start="91:28" pos:end="91:54">(<argument pos:start="91:29" pos:end="91:38"><expr pos:start="91:29" pos:end="91:38"><name pos:start="91:29" pos:end="91:38">cpu_sysval</name></expr></argument>, <argument pos:start="91:41" pos:end="91:53"><expr pos:start="91:41" pos:end="91:53"><name pos:start="91:41" pos:end="91:53"><name pos:start="91:41" pos:end="91:46">cpu_ir</name><index pos:start="91:47" pos:end="91:53">[<expr pos:start="91:48" pos:end="91:52"><name pos:start="91:48" pos:end="91:52">IR_A0</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="93:13" pos:end="93:18">break;</break>

        <case pos:start="95:9" pos:end="95:18">case <expr pos:start="95:14" pos:end="95:17"><literal type="number" pos:start="95:14" pos:end="95:17">0x32</literal></expr>:</case>

            <comment type="block" pos:start="97:13" pos:end="97:23">/* RDVAL */</comment>

            <expr_stmt pos:start="99:13" pos:end="99:55"><expr pos:start="99:13" pos:end="99:54"><call pos:start="99:13" pos:end="99:54"><name pos:start="99:13" pos:end="99:27">tcg_gen_mov_i64</name><argument_list pos:start="99:28" pos:end="99:54">(<argument pos:start="99:29" pos:end="99:41"><expr pos:start="99:29" pos:end="99:41"><name pos:start="99:29" pos:end="99:41"><name pos:start="99:29" pos:end="99:34">cpu_ir</name><index pos:start="99:35" pos:end="99:41">[<expr pos:start="99:36" pos:end="99:40"><name pos:start="99:36" pos:end="99:40">IR_V0</name></expr>]</index></name></expr></argument>, <argument pos:start="99:44" pos:end="99:53"><expr pos:start="99:44" pos:end="99:53"><name pos:start="99:44" pos:end="99:53">cpu_sysval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="101:13" pos:end="101:18">break;</break>



        <case pos:start="105:9" pos:end="105:18">case <expr pos:start="105:14" pos:end="105:17"><literal type="number" pos:start="105:14" pos:end="105:17">0x35</literal></expr>:</case> <block pos:start="105:20" pos:end="133:9">{<block_content pos:start="109:13" pos:end="131:18">

            <comment type="block" pos:start="107:13" pos:end="107:24">/* SWPIPL */</comment>

            <decl_stmt pos:start="109:13" pos:end="109:21"><decl pos:start="109:13" pos:end="109:20"><type pos:start="109:13" pos:end="109:16"><name pos:start="109:13" pos:end="109:16">TCGv</name></type> <name pos:start="109:18" pos:end="109:20">tmp</name></decl>;</decl_stmt>



            <comment type="block" pos:start="113:13" pos:end="115:56">/* Note that we already know we're in kernel mode, so we know

               that PS only contains the 3 IPL bits.  */</comment>

            <expr_stmt pos:start="117:13" pos:end="117:82"><expr pos:start="117:13" pos:end="117:81"><call pos:start="117:13" pos:end="117:81"><name pos:start="117:13" pos:end="117:28">tcg_gen_ld8u_i64</name><argument_list pos:start="117:29" pos:end="117:81">(<argument pos:start="117:30" pos:end="117:42"><expr pos:start="117:30" pos:end="117:42"><name pos:start="117:30" pos:end="117:42"><name pos:start="117:30" pos:end="117:35">cpu_ir</name><index pos:start="117:36" pos:end="117:42">[<expr pos:start="117:37" pos:end="117:41"><name pos:start="117:37" pos:end="117:41">IR_V0</name></expr>]</index></name></expr></argument>, <argument pos:start="117:45" pos:end="117:51"><expr pos:start="117:45" pos:end="117:51"><name pos:start="117:45" pos:end="117:51">cpu_env</name></expr></argument>, <argument pos:start="117:54" pos:end="117:80"><expr pos:start="117:54" pos:end="117:80"><call pos:start="117:54" pos:end="117:80"><name pos:start="117:54" pos:end="117:61">offsetof</name><argument_list pos:start="117:62" pos:end="117:80">(<argument pos:start="117:63" pos:end="117:75"><expr pos:start="117:63" pos:end="117:75"><name pos:start="117:63" pos:end="117:75">CPUAlphaState</name></expr></argument>, <argument pos:start="117:78" pos:end="117:79"><expr pos:start="117:78" pos:end="117:79"><name pos:start="117:78" pos:end="117:79">ps</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="121:13" pos:end="121:77">/* But make sure and store only the 3 IPL bits from the user.  */</comment>

            <expr_stmt pos:start="123:13" pos:end="123:33"><expr pos:start="123:13" pos:end="123:32"><name pos:start="123:13" pos:end="123:15">tmp</name> <operator pos:start="123:17" pos:end="123:17">=</operator> <call pos:start="123:19" pos:end="123:32"><name pos:start="123:19" pos:end="123:30">tcg_temp_new</name><argument_list pos:start="123:31" pos:end="123:32">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:62"><expr pos:start="125:13" pos:end="125:61"><call pos:start="125:13" pos:end="125:61"><name pos:start="125:13" pos:end="125:28">tcg_gen_andi_i64</name><argument_list pos:start="125:29" pos:end="125:61">(<argument pos:start="125:30" pos:end="125:32"><expr pos:start="125:30" pos:end="125:32"><name pos:start="125:30" pos:end="125:32">tmp</name></expr></argument>, <argument pos:start="125:35" pos:end="125:47"><expr pos:start="125:35" pos:end="125:47"><name pos:start="125:35" pos:end="125:47"><name pos:start="125:35" pos:end="125:40">cpu_ir</name><index pos:start="125:41" pos:end="125:47">[<expr pos:start="125:42" pos:end="125:46"><name pos:start="125:42" pos:end="125:46">IR_A0</name></expr>]</index></name></expr></argument>, <argument pos:start="125:50" pos:end="125:60"><expr pos:start="125:50" pos:end="125:60"><name pos:start="125:50" pos:end="125:60">PS_INT_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:71"><expr pos:start="127:13" pos:end="127:70"><call pos:start="127:13" pos:end="127:70"><name pos:start="127:13" pos:end="127:27">tcg_gen_st8_i64</name><argument_list pos:start="127:28" pos:end="127:70">(<argument pos:start="127:29" pos:end="127:31"><expr pos:start="127:29" pos:end="127:31"><name pos:start="127:29" pos:end="127:31">tmp</name></expr></argument>, <argument pos:start="127:34" pos:end="127:40"><expr pos:start="127:34" pos:end="127:40"><name pos:start="127:34" pos:end="127:40">cpu_env</name></expr></argument>, <argument pos:start="127:43" pos:end="127:69"><expr pos:start="127:43" pos:end="127:69"><call pos:start="127:43" pos:end="127:69"><name pos:start="127:43" pos:end="127:50">offsetof</name><argument_list pos:start="127:51" pos:end="127:69">(<argument pos:start="127:52" pos:end="127:64"><expr pos:start="127:52" pos:end="127:64"><name pos:start="127:52" pos:end="127:64">CPUAlphaState</name></expr></argument>, <argument pos:start="127:67" pos:end="127:68"><expr pos:start="127:67" pos:end="127:68"><name pos:start="127:67" pos:end="127:68">ps</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:31"><expr pos:start="129:13" pos:end="129:30"><call pos:start="129:13" pos:end="129:30"><name pos:start="129:13" pos:end="129:25">tcg_temp_free</name><argument_list pos:start="129:26" pos:end="129:30">(<argument pos:start="129:27" pos:end="129:29"><expr pos:start="129:27" pos:end="129:29"><name pos:start="129:27" pos:end="129:29">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="131:13" pos:end="131:18">break;</break>

        </block_content>}</block>



        <case pos:start="137:9" pos:end="137:18">case <expr pos:start="137:14" pos:end="137:17"><literal type="number" pos:start="137:14" pos:end="137:17">0x36</literal></expr>:</case>

            <comment type="block" pos:start="139:13" pos:end="139:22">/* RDPS */</comment>

            <expr_stmt pos:start="141:13" pos:end="141:82"><expr pos:start="141:13" pos:end="141:81"><call pos:start="141:13" pos:end="141:81"><name pos:start="141:13" pos:end="141:28">tcg_gen_ld8u_i64</name><argument_list pos:start="141:29" pos:end="141:81">(<argument pos:start="141:30" pos:end="141:42"><expr pos:start="141:30" pos:end="141:42"><name pos:start="141:30" pos:end="141:42"><name pos:start="141:30" pos:end="141:35">cpu_ir</name><index pos:start="141:36" pos:end="141:42">[<expr pos:start="141:37" pos:end="141:41"><name pos:start="141:37" pos:end="141:41">IR_V0</name></expr>]</index></name></expr></argument>, <argument pos:start="141:45" pos:end="141:51"><expr pos:start="141:45" pos:end="141:51"><name pos:start="141:45" pos:end="141:51">cpu_env</name></expr></argument>, <argument pos:start="141:54" pos:end="141:80"><expr pos:start="141:54" pos:end="141:80"><call pos:start="141:54" pos:end="141:80"><name pos:start="141:54" pos:end="141:61">offsetof</name><argument_list pos:start="141:62" pos:end="141:80">(<argument pos:start="141:63" pos:end="141:75"><expr pos:start="141:63" pos:end="141:75"><name pos:start="141:63" pos:end="141:75">CPUAlphaState</name></expr></argument>, <argument pos:start="141:78" pos:end="141:79"><expr pos:start="141:78" pos:end="141:79"><name pos:start="141:78" pos:end="141:79">ps</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="143:13" pos:end="143:18">break;</break>

        <case pos:start="145:9" pos:end="145:18">case <expr pos:start="145:14" pos:end="145:17"><literal type="number" pos:start="145:14" pos:end="145:17">0x38</literal></expr>:</case>

            <comment type="block" pos:start="147:13" pos:end="147:23">/* WRUSP */</comment>

            <expr_stmt pos:start="149:13" pos:end="149:52"><expr pos:start="149:13" pos:end="149:51"><call pos:start="149:13" pos:end="149:51"><name pos:start="149:13" pos:end="149:27">tcg_gen_mov_i64</name><argument_list pos:start="149:28" pos:end="149:51">(<argument pos:start="149:29" pos:end="149:35"><expr pos:start="149:29" pos:end="149:35"><name pos:start="149:29" pos:end="149:35">cpu_usp</name></expr></argument>, <argument pos:start="149:38" pos:end="149:50"><expr pos:start="149:38" pos:end="149:50"><name pos:start="149:38" pos:end="149:50"><name pos:start="149:38" pos:end="149:43">cpu_ir</name><index pos:start="149:44" pos:end="149:50">[<expr pos:start="149:45" pos:end="149:49"><name pos:start="149:45" pos:end="149:49">IR_A0</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="151:13" pos:end="151:18">break;</break>

        <case pos:start="153:9" pos:end="153:18">case <expr pos:start="153:14" pos:end="153:17"><literal type="number" pos:start="153:14" pos:end="153:17">0x3A</literal></expr>:</case>

            <comment type="block" pos:start="155:13" pos:end="155:23">/* RDUSP */</comment>

            <expr_stmt pos:start="157:13" pos:end="157:52"><expr pos:start="157:13" pos:end="157:51"><call pos:start="157:13" pos:end="157:51"><name pos:start="157:13" pos:end="157:27">tcg_gen_mov_i64</name><argument_list pos:start="157:28" pos:end="157:51">(<argument pos:start="157:29" pos:end="157:41"><expr pos:start="157:29" pos:end="157:41"><name pos:start="157:29" pos:end="157:41"><name pos:start="157:29" pos:end="157:34">cpu_ir</name><index pos:start="157:35" pos:end="157:41">[<expr pos:start="157:36" pos:end="157:40"><name pos:start="157:36" pos:end="157:40">IR_V0</name></expr>]</index></name></expr></argument>, <argument pos:start="157:44" pos:end="157:50"><expr pos:start="157:44" pos:end="157:50"><name pos:start="157:44" pos:end="157:50">cpu_usp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="159:13" pos:end="159:18">break;</break>

        <case pos:start="161:9" pos:end="161:18">case <expr pos:start="161:14" pos:end="161:17"><literal type="number" pos:start="161:14" pos:end="161:17">0x3C</literal></expr>:</case>

            <comment type="block" pos:start="163:13" pos:end="163:23">/* WHAMI */</comment>

            <expr_stmt pos:start="165:13" pos:end="167:74"><expr pos:start="165:13" pos:end="167:73"><call pos:start="165:13" pos:end="167:73"><name pos:start="165:13" pos:end="165:29">tcg_gen_ld32s_i64</name><argument_list pos:start="165:30" pos:end="167:73">(<argument pos:start="165:31" pos:end="165:43"><expr pos:start="165:31" pos:end="165:43"><name pos:start="165:31" pos:end="165:43"><name pos:start="165:31" pos:end="165:36">cpu_ir</name><index pos:start="165:37" pos:end="165:43">[<expr pos:start="165:38" pos:end="165:42"><name pos:start="165:38" pos:end="165:42">IR_V0</name></expr>]</index></name></expr></argument>, <argument pos:start="165:46" pos:end="165:52"><expr pos:start="165:46" pos:end="165:52"><name pos:start="165:46" pos:end="165:52">cpu_env</name></expr></argument>,

                <argument pos:start="167:17" pos:end="167:72"><expr pos:start="167:17" pos:end="167:72"><operator pos:start="167:17" pos:end="167:17">-</operator><call pos:start="167:18" pos:end="167:40"><name pos:start="167:18" pos:end="167:25">offsetof</name><argument_list pos:start="167:26" pos:end="167:40">(<argument pos:start="167:27" pos:end="167:34"><expr pos:start="167:27" pos:end="167:34"><name pos:start="167:27" pos:end="167:34">AlphaCPU</name></expr></argument>, <argument pos:start="167:37" pos:end="167:39"><expr pos:start="167:37" pos:end="167:39"><name pos:start="167:37" pos:end="167:39">env</name></expr></argument>)</argument_list></call> <operator pos:start="167:42" pos:end="167:42">+</operator> <call pos:start="167:44" pos:end="167:72"><name pos:start="167:44" pos:end="167:51">offsetof</name><argument_list pos:start="167:52" pos:end="167:72">(<argument pos:start="167:53" pos:end="167:60"><expr pos:start="167:53" pos:end="167:60"><name pos:start="167:53" pos:end="167:60">CPUState</name></expr></argument>, <argument pos:start="167:63" pos:end="167:71"><expr pos:start="167:63" pos:end="167:71"><name pos:start="167:63" pos:end="167:71">cpu_index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="169:13" pos:end="169:18">break;</break>



        <default pos:start="173:9" pos:end="173:16">default:</default>

            <expr_stmt pos:start="175:13" pos:end="175:28"><expr pos:start="175:13" pos:end="175:27"><name pos:start="175:13" pos:end="175:19">palcode</name> <operator pos:start="175:21" pos:end="175:22">&amp;=</operator> <literal type="number" pos:start="175:24" pos:end="175:27">0x3f</literal></expr>;</expr_stmt>

            <goto pos:start="177:13" pos:end="177:29">goto <name pos:start="177:18" pos:end="177:28">do_call_pal</name>;</goto>

        </block_content>}</block></switch>

        <return pos:start="181:9" pos:end="181:23">return <expr pos:start="181:16" pos:end="181:22"><name pos:start="181:16" pos:end="181:22">NO_EXIT</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="185:1" pos:end="185:6">#<cpp:directive pos:start="185:2" pos:end="185:6">endif</cpp:directive></cpp:endif>

    <return pos:start="187:5" pos:end="187:28">return <expr pos:start="187:12" pos:end="187:27"><call pos:start="187:12" pos:end="187:27"><name pos:start="187:12" pos:end="187:22">gen_invalid</name><argument_list pos:start="187:23" pos:end="187:27">(<argument pos:start="187:24" pos:end="187:26"><expr pos:start="187:24" pos:end="187:26"><name pos:start="187:24" pos:end="187:26">ctx</name></expr></argument>)</argument_list></call></expr>;</return>



 <label pos:start="191:2" pos:end="194:0"><name pos:start="191:2" pos:end="191:12">do_call_pal</name>:</label>

<cpp:ifdef pos:start="193:1" pos:end="193:23">#<cpp:directive pos:start="193:2" pos:end="193:6">ifdef</cpp:directive> <name pos:start="193:8" pos:end="193:23">CONFIG_USER_ONLY</name></cpp:ifdef>

    <return pos:start="195:5" pos:end="198:0">return <expr pos:start="195:12" pos:end="195:48"><call pos:start="195:12" pos:end="195:48"><name pos:start="195:12" pos:end="195:19">gen_excp</name><argument_list pos:start="195:20" pos:end="195:48">(<argument pos:start="195:21" pos:end="195:23"><expr pos:start="195:21" pos:end="195:23"><name pos:start="195:21" pos:end="195:23">ctx</name></expr></argument>, <argument pos:start="195:26" pos:end="195:38"><expr pos:start="195:26" pos:end="195:38"><name pos:start="195:26" pos:end="195:38">EXCP_CALL_PAL</name></expr></argument>, <argument pos:start="195:41" pos:end="195:47"><expr pos:start="195:41" pos:end="195:47"><name pos:start="195:41" pos:end="195:47">palcode</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else pos:start="197:1" pos:end="197:5">#<cpp:directive pos:start="197:2" pos:end="197:5">else</cpp:directive></cpp:else>

    <block pos:start="199:5" pos:end="246:0">{<block_content pos:start="201:9" pos:end="241:31">

        <decl_stmt pos:start="201:9" pos:end="201:41"><decl pos:start="201:9" pos:end="201:40"><type pos:start="201:9" pos:end="201:12"><name pos:start="201:9" pos:end="201:12">TCGv</name></type> <name pos:start="201:14" pos:end="201:15">pc</name> <init pos:start="201:17" pos:end="201:40">= <expr pos:start="201:19" pos:end="201:40"><call pos:start="201:19" pos:end="201:40"><name pos:start="201:19" pos:end="201:31">tcg_const_i64</name><argument_list pos:start="201:32" pos:end="201:40">(<argument pos:start="201:33" pos:end="201:39"><expr pos:start="201:33" pos:end="201:39"><name pos:start="201:33" pos:end="201:39"><name pos:start="201:33" pos:end="201:35">ctx</name><operator pos:start="201:36" pos:end="201:37">-&gt;</operator><name pos:start="201:38" pos:end="201:39">pc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="203:9" pos:end="207:60"><decl pos:start="203:9" pos:end="207:59"><type pos:start="203:9" pos:end="203:12"><name pos:start="203:9" pos:end="203:12">TCGv</name></type> <name pos:start="203:14" pos:end="203:18">entry</name> <init pos:start="203:20" pos:end="207:59">= <expr pos:start="203:22" pos:end="207:59"><call pos:start="203:22" pos:end="207:59"><name pos:start="203:22" pos:end="203:34">tcg_const_i64</name><argument_list pos:start="203:35" pos:end="207:59">(<argument pos:start="203:36" pos:end="207:58"><expr pos:start="203:36" pos:end="207:58"><ternary pos:start="203:36" pos:end="207:58"><condition pos:start="203:36" pos:end="205:36"><expr pos:start="203:36" pos:end="203:49"><name pos:start="203:36" pos:end="203:42">palcode</name> <operator pos:start="203:44" pos:end="203:44">&amp;</operator> <literal type="number" pos:start="203:46" pos:end="203:49">0x80</literal></expr>

                                   ?</condition><then pos:start="205:38" pos:end="205:67"> <expr pos:start="205:38" pos:end="205:67"><literal type="number" pos:start="205:38" pos:end="205:45">0x2000</literal> <operator pos:start="205:45" pos:end="205:45">+</operator> <operator pos:start="205:47" pos:end="205:47">(</operator><name pos:start="205:48" pos:end="205:54">palcode</name> <operator pos:start="205:56" pos:end="205:56">-</operator> <literal type="number" pos:start="205:58" pos:end="205:61">0x80</literal><operator pos:start="205:62" pos:end="205:62">)</operator> <operator pos:start="205:64" pos:end="205:64">*</operator> <literal type="number" pos:start="205:66" pos:end="205:67">64</literal></expr>

                                   </then><else pos:start="207:36" pos:end="207:58">: <expr pos:start="207:38" pos:end="207:58"><literal type="number" pos:start="207:38" pos:end="207:45">0x1000</literal> <operator pos:start="207:45" pos:end="207:45">+</operator> <name pos:start="207:47" pos:end="207:53">palcode</name> <operator pos:start="207:55" pos:end="207:55">*</operator> <literal type="number" pos:start="207:57" pos:end="207:58">64</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="211:9" pos:end="211:48"><expr pos:start="211:9" pos:end="211:47"><call pos:start="211:9" pos:end="211:47"><name pos:start="211:9" pos:end="211:27">gen_helper_call_pal</name><argument_list pos:start="211:28" pos:end="211:47">(<argument pos:start="211:29" pos:end="211:35"><expr pos:start="211:29" pos:end="211:35"><name pos:start="211:29" pos:end="211:35">cpu_env</name></expr></argument>, <argument pos:start="211:38" pos:end="211:39"><expr pos:start="211:38" pos:end="211:39"><name pos:start="211:38" pos:end="211:39">pc</name></expr></argument>, <argument pos:start="211:42" pos:end="211:46"><expr pos:start="211:42" pos:end="211:46"><name pos:start="211:42" pos:end="211:46">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="215:9" pos:end="215:29"><expr pos:start="215:9" pos:end="215:28"><call pos:start="215:9" pos:end="215:28"><name pos:start="215:9" pos:end="215:21">tcg_temp_free</name><argument_list pos:start="215:22" pos:end="215:28">(<argument pos:start="215:23" pos:end="215:27"><expr pos:start="215:23" pos:end="215:27"><name pos:start="215:23" pos:end="215:27">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:26"><expr pos:start="217:9" pos:end="217:25"><call pos:start="217:9" pos:end="217:25"><name pos:start="217:9" pos:end="217:21">tcg_temp_free</name><argument_list pos:start="217:22" pos:end="217:25">(<argument pos:start="217:23" pos:end="217:24"><expr pos:start="217:23" pos:end="217:24"><name pos:start="217:23" pos:end="217:24">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="221:9" pos:end="227:47">/* Since the destination is running in PALmode, we don't really

           need the page permissions check.  We'll see the existence of

           the page when we create the TB, and we'll flush all TBs if

           we change the PAL base register.  */</comment>

        <if_stmt pos:start="229:9" pos:end="237:9"><if pos:start="229:9" pos:end="237:9">if <condition pos:start="229:12" pos:end="229:72">(<expr pos:start="229:13" pos:end="229:71"><operator pos:start="229:13" pos:end="229:13">!</operator><name pos:start="229:14" pos:end="229:36"><name pos:start="229:14" pos:end="229:16">ctx</name><operator pos:start="229:17" pos:end="229:18">-&gt;</operator><name pos:start="229:19" pos:end="229:36">singlestep_enabled</name></name> <operator pos:start="229:38" pos:end="229:39">&amp;&amp;</operator> <operator pos:start="229:41" pos:end="229:41">!</operator><operator pos:start="229:42" pos:end="229:42">(</operator><name pos:start="229:43" pos:end="229:57"><name pos:start="229:43" pos:end="229:45">ctx</name><operator pos:start="229:46" pos:end="229:47">-&gt;</operator><name pos:start="229:48" pos:end="229:49">tb</name><operator pos:start="229:50" pos:end="229:51">-&gt;</operator><name pos:start="229:52" pos:end="229:57">cflags</name></name> <operator pos:start="229:59" pos:end="229:59">&amp;</operator> <name pos:start="229:61" pos:end="229:70">CF_LAST_IO</name><operator pos:start="229:71" pos:end="229:71">)</operator></expr>)</condition> <block pos:start="229:74" pos:end="237:9">{<block_content pos:start="231:13" pos:end="235:32">

            <expr_stmt pos:start="231:13" pos:end="231:31"><expr pos:start="231:13" pos:end="231:30"><call pos:start="231:13" pos:end="231:30"><name pos:start="231:13" pos:end="231:27">tcg_gen_goto_tb</name><argument_list pos:start="231:28" pos:end="231:30">(<argument pos:start="231:29" pos:end="231:29"><expr pos:start="231:29" pos:end="231:29"><literal type="number" pos:start="231:29" pos:end="231:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:48"><expr pos:start="233:13" pos:end="233:47"><call pos:start="233:13" pos:end="233:47"><name pos:start="233:13" pos:end="233:27">tcg_gen_exit_tb</name><argument_list pos:start="233:28" pos:end="233:47">(<argument pos:start="233:29" pos:end="233:46"><expr pos:start="233:29" pos:end="233:46"><operator pos:start="233:29" pos:end="233:29">(</operator><name pos:start="233:30" pos:end="233:38">uintptr_t</name><operator pos:start="233:39" pos:end="233:39">)</operator><name pos:start="233:40" pos:end="233:46"><name pos:start="233:40" pos:end="233:42">ctx</name><operator pos:start="233:43" pos:end="233:44">-&gt;</operator><name pos:start="233:45" pos:end="233:46">tb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="235:13" pos:end="235:32">return <expr pos:start="235:20" pos:end="235:31"><name pos:start="235:20" pos:end="235:31">EXIT_GOTO_TB</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <return pos:start="241:9" pos:end="241:31">return <expr pos:start="241:16" pos:end="241:30"><name pos:start="241:16" pos:end="241:30">EXIT_PC_UPDATED</name></expr>;</return>

    </block_content>}</block>

<cpp:endif pos:start="245:1" pos:end="245:6">#<cpp:directive pos:start="245:2" pos:end="245:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
