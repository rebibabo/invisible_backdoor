<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11831.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">cow_create</name><parameter_list pos:start="1:22" pos:end="1:73">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><specifier pos:start="1:23" pos:end="1:27">const</specifier> <name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:42">filename</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:58"><decl pos:start="1:45" pos:end="1:58"><type pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:52">QemuOpts</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:58">opts</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:72"><decl pos:start="1:61" pos:end="1:72"><type pos:start="1:61" pos:end="1:72"><name pos:start="1:61" pos:end="1:65">Error</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier><modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:72">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="127:1">{<block_content pos:start="5:5" pos:end="125:15">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:24">cow_header_v2</name></name></type> <name pos:start="5:26" pos:end="5:35">cow_header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:15">stat</name></name></type> <name pos:start="7:17" pos:end="7:18">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:25">image_sectors</name> <init pos:start="9:27" pos:end="9:29">= <expr pos:start="9:29" pos:end="9:29"><literal type="number" pos:start="9:29" pos:end="9:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:24">image_filename</name> <init pos:start="11:26" pos:end="11:31">= <expr pos:start="11:28" pos:end="11:31"><name pos:start="11:28" pos:end="11:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">Error</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:20">local_err</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:36"><decl pos:start="17:5" pos:end="17:35"><type pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:20">BlockDriverState</name> <modifier pos:start="17:22" pos:end="17:22">*</modifier></type><name pos:start="17:23" pos:end="17:28">cow_bs</name> <init pos:start="17:30" pos:end="17:35">= <expr pos:start="17:32" pos:end="17:35"><name pos:start="17:32" pos:end="17:35">NULL</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:26">/* Read out options */</comment>

    <expr_stmt pos:start="23:5" pos:end="25:51"><expr pos:start="23:5" pos:end="25:50"><name pos:start="23:5" pos:end="23:17">image_sectors</name> <operator pos:start="23:19" pos:end="23:19">=</operator> <call pos:start="23:21" pos:end="25:50"><name pos:start="23:21" pos:end="23:32">DIV_ROUND_UP</name><argument_list pos:start="23:33" pos:end="25:50">(<argument pos:start="23:34" pos:end="23:79"><expr pos:start="23:34" pos:end="23:79"><call pos:start="23:34" pos:end="23:79"><name pos:start="23:34" pos:end="23:54">qemu_opt_get_size_del</name><argument_list pos:start="23:55" pos:end="23:79">(<argument pos:start="23:56" pos:end="23:59"><expr pos:start="23:56" pos:end="23:59"><name pos:start="23:56" pos:end="23:59">opts</name></expr></argument>, <argument pos:start="23:62" pos:end="23:75"><expr pos:start="23:62" pos:end="23:75"><name pos:start="23:62" pos:end="23:75">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="23:78" pos:end="23:78"><expr pos:start="23:78" pos:end="23:78"><literal type="number" pos:start="23:78" pos:end="23:78">0</literal></expr></argument>)</argument_list></call></expr></argument>,

                                 <argument pos:start="25:34" pos:end="25:49"><expr pos:start="25:34" pos:end="25:49"><name pos:start="25:34" pos:end="25:49">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:68"><expr pos:start="27:5" pos:end="27:67"><name pos:start="27:5" pos:end="27:18">image_filename</name> <operator pos:start="27:20" pos:end="27:20">=</operator> <call pos:start="27:22" pos:end="27:67"><name pos:start="27:22" pos:end="27:37">qemu_opt_get_del</name><argument_list pos:start="27:38" pos:end="27:67">(<argument pos:start="27:39" pos:end="27:42"><expr pos:start="27:39" pos:end="27:42"><name pos:start="27:39" pos:end="27:42">opts</name></expr></argument>, <argument pos:start="27:45" pos:end="27:66"><expr pos:start="27:45" pos:end="27:66"><name pos:start="27:45" pos:end="27:66">BLOCK_OPT_BACKING_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:55"><expr pos:start="31:5" pos:end="31:54"><name pos:start="31:5" pos:end="31:7">ret</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:54"><name pos:start="31:11" pos:end="31:26">bdrv_create_file</name><argument_list pos:start="31:27" pos:end="31:54">(<argument pos:start="31:28" pos:end="31:35"><expr pos:start="31:28" pos:end="31:35"><name pos:start="31:28" pos:end="31:35">filename</name></expr></argument>, <argument pos:start="31:38" pos:end="31:41"><expr pos:start="31:38" pos:end="31:41"><name pos:start="31:38" pos:end="31:41">opts</name></expr></argument>, <argument pos:start="31:44" pos:end="31:53"><expr pos:start="31:44" pos:end="31:53"><operator pos:start="31:44" pos:end="31:44">&amp;</operator><name pos:start="31:45" pos:end="31:53">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:16">(<expr pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:13">&lt;</operator> <literal type="number" pos:start="33:15" pos:end="33:15">0</literal></expr>)</condition> <block pos:start="33:18" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:18">

        <expr_stmt pos:start="35:9" pos:end="35:41"><expr pos:start="35:9" pos:end="35:40"><call pos:start="35:9" pos:end="35:40"><name pos:start="35:9" pos:end="35:23">error_propagate</name><argument_list pos:start="35:24" pos:end="35:40">(<argument pos:start="35:25" pos:end="35:28"><expr pos:start="35:25" pos:end="35:28"><name pos:start="35:25" pos:end="35:28">errp</name></expr></argument>, <argument pos:start="35:31" pos:end="35:39"><expr pos:start="35:31" pos:end="35:39"><name pos:start="35:31" pos:end="35:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="37:9" pos:end="37:18">goto <name pos:start="37:14" pos:end="37:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="45:69"><expr pos:start="43:5" pos:end="45:68"><name pos:start="43:5" pos:end="43:7">ret</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <call pos:start="43:11" pos:end="45:68"><name pos:start="43:11" pos:end="43:19">bdrv_open</name><argument_list pos:start="43:20" pos:end="45:68">(<argument pos:start="43:21" pos:end="43:27"><expr pos:start="43:21" pos:end="43:27"><operator pos:start="43:21" pos:end="43:21">&amp;</operator><name pos:start="43:22" pos:end="43:27">cow_bs</name></expr></argument>, <argument pos:start="43:30" pos:end="43:37"><expr pos:start="43:30" pos:end="43:37"><name pos:start="43:30" pos:end="43:37">filename</name></expr></argument>, <argument pos:start="43:40" pos:end="43:43"><expr pos:start="43:40" pos:end="43:43"><name pos:start="43:40" pos:end="43:43">NULL</name></expr></argument>, <argument pos:start="43:46" pos:end="43:49"><expr pos:start="43:46" pos:end="43:49"><name pos:start="43:46" pos:end="43:49">NULL</name></expr></argument>,

                    <argument pos:start="45:21" pos:end="45:49"><expr pos:start="45:21" pos:end="45:49"><name pos:start="45:21" pos:end="45:31">BDRV_O_RDWR</name> <operator pos:start="45:33" pos:end="45:33">|</operator> <name pos:start="45:35" pos:end="45:49">BDRV_O_PROTOCOL</name></expr></argument>, <argument pos:start="45:52" pos:end="45:55"><expr pos:start="45:52" pos:end="45:55"><name pos:start="45:52" pos:end="45:55">NULL</name></expr></argument>, <argument pos:start="45:58" pos:end="45:67"><expr pos:start="45:58" pos:end="45:67"><operator pos:start="45:58" pos:end="45:58">&amp;</operator><name pos:start="45:59" pos:end="45:67">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:16">(<expr pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:13">&lt;</operator> <literal type="number" pos:start="47:15" pos:end="47:15">0</literal></expr>)</condition> <block pos:start="47:18" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:18">

        <expr_stmt pos:start="49:9" pos:end="49:41"><expr pos:start="49:9" pos:end="49:40"><call pos:start="49:9" pos:end="49:40"><name pos:start="49:9" pos:end="49:23">error_propagate</name><argument_list pos:start="49:24" pos:end="49:40">(<argument pos:start="49:25" pos:end="49:28"><expr pos:start="49:25" pos:end="49:28"><name pos:start="49:25" pos:end="49:28">errp</name></expr></argument>, <argument pos:start="49:31" pos:end="49:39"><expr pos:start="49:31" pos:end="49:39"><name pos:start="49:31" pos:end="49:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="51:9" pos:end="51:18">goto <name pos:start="51:14" pos:end="51:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:47"><expr pos:start="57:5" pos:end="57:46"><call pos:start="57:5" pos:end="57:46"><name pos:start="57:5" pos:end="57:10">memset</name><argument_list pos:start="57:11" pos:end="57:46">(<argument pos:start="57:12" pos:end="57:22"><expr pos:start="57:12" pos:end="57:22"><operator pos:start="57:12" pos:end="57:12">&amp;</operator><name pos:start="57:13" pos:end="57:22">cow_header</name></expr></argument>, <argument pos:start="57:25" pos:end="57:25"><expr pos:start="57:25" pos:end="57:25"><literal type="number" pos:start="57:25" pos:end="57:25">0</literal></expr></argument>, <argument pos:start="57:28" pos:end="57:45"><expr pos:start="57:28" pos:end="57:45"><sizeof pos:start="57:28" pos:end="57:45">sizeof<argument_list pos:start="57:34" pos:end="57:45">(<argument pos:start="57:35" pos:end="57:44"><expr pos:start="57:35" pos:end="57:44"><name pos:start="57:35" pos:end="57:44">cow_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:46"><expr pos:start="59:5" pos:end="59:45"><name pos:start="59:5" pos:end="59:20"><name pos:start="59:5" pos:end="59:14">cow_header</name><operator pos:start="59:15" pos:end="59:15">.</operator><name pos:start="59:16" pos:end="59:20">magic</name></name> <operator pos:start="59:22" pos:end="59:22">=</operator> <call pos:start="59:24" pos:end="59:45"><name pos:start="59:24" pos:end="59:34">cpu_to_be32</name><argument_list pos:start="59:35" pos:end="59:45">(<argument pos:start="59:36" pos:end="59:44"><expr pos:start="59:36" pos:end="59:44"><name pos:start="59:36" pos:end="59:44">COW_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:50"><expr pos:start="61:5" pos:end="61:49"><name pos:start="61:5" pos:end="61:22"><name pos:start="61:5" pos:end="61:14">cow_header</name><operator pos:start="61:15" pos:end="61:15">.</operator><name pos:start="61:16" pos:end="61:22">version</name></name> <operator pos:start="61:24" pos:end="61:24">=</operator> <call pos:start="61:26" pos:end="61:49"><name pos:start="61:26" pos:end="61:36">cpu_to_be32</name><argument_list pos:start="61:37" pos:end="61:49">(<argument pos:start="61:38" pos:end="61:48"><expr pos:start="61:38" pos:end="61:48"><name pos:start="61:38" pos:end="61:48">COW_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="85:5"><if pos:start="63:5" pos:end="85:5">if <condition pos:start="63:8" pos:end="63:23">(<expr pos:start="63:9" pos:end="63:22"><name pos:start="63:9" pos:end="63:22">image_filename</name></expr>)</condition> <block pos:start="63:25" pos:end="85:5">{<block_content pos:start="67:9" pos:end="83:32">

        <comment type="block" pos:start="65:9" pos:end="65:52">/* Note: if no file, we put a dummy mtime */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:42"><expr pos:start="67:9" pos:end="67:41"><name pos:start="67:9" pos:end="67:24"><name pos:start="67:9" pos:end="67:18">cow_header</name><operator pos:start="67:19" pos:end="67:19">.</operator><name pos:start="67:20" pos:end="67:24">mtime</name></name> <operator pos:start="67:26" pos:end="67:26">=</operator> <call pos:start="67:28" pos:end="67:41"><name pos:start="67:28" pos:end="67:38">cpu_to_be32</name><argument_list pos:start="67:39" pos:end="67:41">(<argument pos:start="67:40" pos:end="67:40"><expr pos:start="67:40" pos:end="67:40"><literal type="number" pos:start="67:40" pos:end="67:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="71:9" pos:end="75:9"><if pos:start="71:9" pos:end="75:9">if <condition pos:start="71:12" pos:end="71:43">(<expr pos:start="71:13" pos:end="71:42"><call pos:start="71:13" pos:end="71:37"><name pos:start="71:13" pos:end="71:16">stat</name><argument_list pos:start="71:17" pos:end="71:37">(<argument pos:start="71:18" pos:end="71:31"><expr pos:start="71:18" pos:end="71:31"><name pos:start="71:18" pos:end="71:31">image_filename</name></expr></argument>, <argument pos:start="71:34" pos:end="71:36"><expr pos:start="71:34" pos:end="71:36"><operator pos:start="71:34" pos:end="71:34">&amp;</operator><name pos:start="71:35" pos:end="71:36">st</name></expr></argument>)</argument_list></call> <operator pos:start="71:39" pos:end="71:40">!=</operator> <literal type="number" pos:start="71:42" pos:end="71:42">0</literal></expr>)</condition> <block pos:start="71:45" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:28">

            <goto pos:start="73:13" pos:end="73:28">goto <name pos:start="73:18" pos:end="73:27">mtime_fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:52"><expr pos:start="77:9" pos:end="77:51"><name pos:start="77:9" pos:end="77:24"><name pos:start="77:9" pos:end="77:18">cow_header</name><operator pos:start="77:19" pos:end="77:19">.</operator><name pos:start="77:20" pos:end="77:24">mtime</name></name> <operator pos:start="77:26" pos:end="77:26">=</operator> <call pos:start="77:28" pos:end="77:51"><name pos:start="77:28" pos:end="77:38">cpu_to_be32</name><argument_list pos:start="77:39" pos:end="77:51">(<argument pos:start="77:40" pos:end="77:50"><expr pos:start="77:40" pos:end="77:50"><name pos:start="77:40" pos:end="77:50"><name pos:start="77:40" pos:end="77:41">st</name><operator pos:start="77:42" pos:end="77:42">.</operator><name pos:start="77:43" pos:end="77:50">st_mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="79:5" pos:end="79:15"><name pos:start="79:5" pos:end="79:14">mtime_fail</name>:</label>

        <expr_stmt pos:start="81:9" pos:end="83:32"><expr pos:start="81:9" pos:end="83:31"><call pos:start="81:9" pos:end="83:31"><name pos:start="81:9" pos:end="81:15">pstrcpy</name><argument_list pos:start="81:16" pos:end="83:31">(<argument pos:start="81:17" pos:end="81:39"><expr pos:start="81:17" pos:end="81:39"><name pos:start="81:17" pos:end="81:39"><name pos:start="81:17" pos:end="81:26">cow_header</name><operator pos:start="81:27" pos:end="81:27">.</operator><name pos:start="81:28" pos:end="81:39">backing_file</name></name></expr></argument>, <argument pos:start="81:42" pos:end="81:72"><expr pos:start="81:42" pos:end="81:72"><sizeof pos:start="81:42" pos:end="81:72">sizeof<argument_list pos:start="81:48" pos:end="81:72">(<argument pos:start="81:49" pos:end="81:71"><expr pos:start="81:49" pos:end="81:71"><name pos:start="81:49" pos:end="81:71"><name pos:start="81:49" pos:end="81:58">cow_header</name><operator pos:start="81:59" pos:end="81:59">.</operator><name pos:start="81:60" pos:end="81:71">backing_file</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

                <argument pos:start="83:17" pos:end="83:30"><expr pos:start="83:17" pos:end="83:30"><name pos:start="83:17" pos:end="83:30">image_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:45"><expr pos:start="87:5" pos:end="87:44"><name pos:start="87:5" pos:end="87:25"><name pos:start="87:5" pos:end="87:14">cow_header</name><operator pos:start="87:15" pos:end="87:15">.</operator><name pos:start="87:16" pos:end="87:25">sectorsize</name></name> <operator pos:start="87:27" pos:end="87:27">=</operator> <call pos:start="87:29" pos:end="87:44"><name pos:start="87:29" pos:end="87:39">cpu_to_be32</name><argument_list pos:start="87:40" pos:end="87:44">(<argument pos:start="87:41" pos:end="87:43"><expr pos:start="87:41" pos:end="87:43"><literal type="number" pos:start="87:41" pos:end="87:43">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:55"><expr pos:start="89:5" pos:end="89:54"><name pos:start="89:5" pos:end="89:19"><name pos:start="89:5" pos:end="89:14">cow_header</name><operator pos:start="89:15" pos:end="89:15">.</operator><name pos:start="89:16" pos:end="89:19">size</name></name> <operator pos:start="89:21" pos:end="89:21">=</operator> <call pos:start="89:23" pos:end="89:54"><name pos:start="89:23" pos:end="89:33">cpu_to_be64</name><argument_list pos:start="89:34" pos:end="89:54">(<argument pos:start="89:35" pos:end="89:53"><expr pos:start="89:35" pos:end="89:53"><name pos:start="89:35" pos:end="89:47">image_sectors</name> <operator pos:start="89:49" pos:end="89:49">*</operator> <literal type="number" pos:start="89:51" pos:end="89:53">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:66"><expr pos:start="91:5" pos:end="91:65"><name pos:start="91:5" pos:end="91:7">ret</name> <operator pos:start="91:9" pos:end="91:9">=</operator> <call pos:start="91:11" pos:end="91:65"><name pos:start="91:11" pos:end="91:21">bdrv_pwrite</name><argument_list pos:start="91:22" pos:end="91:65">(<argument pos:start="91:23" pos:end="91:28"><expr pos:start="91:23" pos:end="91:28"><name pos:start="91:23" pos:end="91:28">cow_bs</name></expr></argument>, <argument pos:start="91:31" pos:end="91:31"><expr pos:start="91:31" pos:end="91:31"><literal type="number" pos:start="91:31" pos:end="91:31">0</literal></expr></argument>, <argument pos:start="91:34" pos:end="91:44"><expr pos:start="91:34" pos:end="91:44"><operator pos:start="91:34" pos:end="91:34">&amp;</operator><name pos:start="91:35" pos:end="91:44">cow_header</name></expr></argument>, <argument pos:start="91:47" pos:end="91:64"><expr pos:start="91:47" pos:end="91:64"><sizeof pos:start="91:47" pos:end="91:64">sizeof<argument_list pos:start="91:53" pos:end="91:64">(<argument pos:start="91:54" pos:end="91:63"><expr pos:start="91:54" pos:end="91:63"><name pos:start="91:54" pos:end="91:63">cow_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="97:5"><if pos:start="93:5" pos:end="97:5">if <condition pos:start="93:8" pos:end="93:16">(<expr pos:start="93:9" pos:end="93:15"><name pos:start="93:9" pos:end="93:11">ret</name> <operator pos:start="93:13" pos:end="93:13">&lt;</operator> <literal type="number" pos:start="93:15" pos:end="93:15">0</literal></expr>)</condition> <block pos:start="93:18" pos:end="97:5">{<block_content pos:start="95:9" pos:end="95:18">

        <goto pos:start="95:9" pos:end="95:18">goto <name pos:start="95:14" pos:end="95:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="101:5" pos:end="101:51">/* resize to include at least all the bitmap */</comment>

    <expr_stmt pos:start="103:5" pos:end="105:57"><expr pos:start="103:5" pos:end="105:56"><name pos:start="103:5" pos:end="103:7">ret</name> <operator pos:start="103:9" pos:end="103:9">=</operator> <call pos:start="103:11" pos:end="105:56"><name pos:start="103:11" pos:end="103:23">bdrv_truncate</name><argument_list pos:start="103:24" pos:end="105:56">(<argument pos:start="103:25" pos:end="103:30"><expr pos:start="103:25" pos:end="103:30"><name pos:start="103:25" pos:end="103:30">cow_bs</name></expr></argument>,

        <argument pos:start="105:9" pos:end="105:55"><expr pos:start="105:9" pos:end="105:55"><sizeof pos:start="105:9" pos:end="105:26">sizeof<argument_list pos:start="105:15" pos:end="105:26">(<argument pos:start="105:16" pos:end="105:25"><expr pos:start="105:16" pos:end="105:25"><name pos:start="105:16" pos:end="105:25">cow_header</name></expr></argument>)</argument_list></sizeof> <operator pos:start="105:28" pos:end="105:28">+</operator> <operator pos:start="105:30" pos:end="105:30">(</operator><operator pos:start="105:31" pos:end="105:31">(</operator><name pos:start="105:32" pos:end="105:44">image_sectors</name> <operator pos:start="105:46" pos:end="105:46">+</operator> <literal type="number" pos:start="105:48" pos:end="105:48">7</literal><operator pos:start="105:49" pos:end="105:49">)</operator> <operator pos:start="105:51" pos:end="105:52">&gt;&gt;</operator> <literal type="number" pos:start="105:54" pos:end="105:54">3</literal><operator pos:start="105:55" pos:end="105:55">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="107:5" pos:end="111:5"><if pos:start="107:5" pos:end="111:5">if <condition pos:start="107:8" pos:end="107:16">(<expr pos:start="107:9" pos:end="107:15"><name pos:start="107:9" pos:end="107:11">ret</name> <operator pos:start="107:13" pos:end="107:13">&lt;</operator> <literal type="number" pos:start="107:15" pos:end="107:15">0</literal></expr>)</condition> <block pos:start="107:18" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:18">

        <goto pos:start="109:9" pos:end="109:18">goto <name pos:start="109:14" pos:end="109:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



<label pos:start="115:1" pos:end="115:5"><name pos:start="115:1" pos:end="115:4">exit</name>:</label>

    <expr_stmt pos:start="117:5" pos:end="117:27"><expr pos:start="117:5" pos:end="117:26"><call pos:start="117:5" pos:end="117:26"><name pos:start="117:5" pos:end="117:10">g_free</name><argument_list pos:start="117:11" pos:end="117:26">(<argument pos:start="117:12" pos:end="117:25"><expr pos:start="117:12" pos:end="117:25"><name pos:start="117:12" pos:end="117:25">image_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="119:5" pos:end="123:5"><if pos:start="119:5" pos:end="123:5">if <condition pos:start="119:8" pos:end="119:15">(<expr pos:start="119:9" pos:end="119:14"><name pos:start="119:9" pos:end="119:14">cow_bs</name></expr>)</condition> <block pos:start="119:17" pos:end="123:5">{<block_content pos:start="121:9" pos:end="121:27">

        <expr_stmt pos:start="121:9" pos:end="121:27"><expr pos:start="121:9" pos:end="121:26"><call pos:start="121:9" pos:end="121:26"><name pos:start="121:9" pos:end="121:18">bdrv_unref</name><argument_list pos:start="121:19" pos:end="121:26">(<argument pos:start="121:20" pos:end="121:25"><expr pos:start="121:20" pos:end="121:25"><name pos:start="121:20" pos:end="121:25">cow_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="125:5" pos:end="125:15">return <expr pos:start="125:12" pos:end="125:14"><name pos:start="125:12" pos:end="125:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
