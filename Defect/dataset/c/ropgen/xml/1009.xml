<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1009.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">adx_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:64">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:46">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:63"><decl pos:start="3:49" pos:end="3:63"><type pos:start="3:49" pos:end="3:63"><name pos:start="3:49" pos:end="3:56">AVPacket</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:63">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="141:1">{<block_content pos:start="7:5" pos:end="139:29">

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">buf_size</name>        <init pos:start="7:25" pos:end="7:37">= <expr pos:start="7:27" pos:end="7:37"><name pos:start="7:27" pos:end="7:37"><name pos:start="7:27" pos:end="7:31">avpkt</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:37">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:43"><decl pos:start="9:5" pos:end="9:42"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">ADXContext</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">c</name>       <init pos:start="9:25" pos:end="9:42">= <expr pos:start="9:27" pos:end="9:42"><name pos:start="9:27" pos:end="9:42"><name pos:start="9:27" pos:end="9:31">avctx</name><operator pos:start="9:32" pos:end="9:33">-&gt;</operator><name pos:start="9:34" pos:end="9:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">int16_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:20">samples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:38"><decl pos:start="13:5" pos:end="13:37"><type pos:start="13:5" pos:end="13:19"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:17">uint8_t</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:22">buf</name>  <init pos:start="13:25" pos:end="13:37">= <expr pos:start="13:27" pos:end="13:37"><name pos:start="13:27" pos:end="13:37"><name pos:start="13:27" pos:end="13:31">avpkt</name><operator pos:start="13:32" pos:end="13:33">-&gt;</operator><name pos:start="13:34" pos:end="13:37">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:18">num_blocks</name></decl>, <decl pos:start="15:21" pos:end="15:22"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:21" pos:end="15:22">ch</name></decl>, <decl pos:start="15:25" pos:end="15:27"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:25" pos:end="15:27">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:15">(<expr pos:start="19:9" pos:end="19:14"><name pos:start="19:9" pos:end="19:14"><name pos:start="19:9" pos:end="19:9">c</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:14">eof</name></name></expr>)</condition> <block pos:start="19:17" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:24">

        <expr_stmt pos:start="21:9" pos:end="21:27"><expr pos:start="21:9" pos:end="21:26"><operator pos:start="21:9" pos:end="21:9">*</operator><name pos:start="21:10" pos:end="21:22">got_frame_ptr</name> <operator pos:start="21:24" pos:end="21:24">=</operator> <literal type="number" pos:start="21:26" pos:end="21:26">0</literal></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:24">return <expr pos:start="23:16" pos:end="23:23"><name pos:start="23:16" pos:end="23:23">buf_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="55:5"><if pos:start="29:5" pos:end="55:5">if <condition pos:start="29:8" pos:end="29:69">(<expr pos:start="29:9" pos:end="29:68"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:25"><name pos:start="29:10" pos:end="29:10">c</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:25">header_parsed</name></name> <operator pos:start="29:27" pos:end="29:28">&amp;&amp;</operator> <name pos:start="29:30" pos:end="29:37">buf_size</name> <operator pos:start="29:39" pos:end="29:40">&gt;=</operator> <literal type="number" pos:start="29:42" pos:end="29:42">2</literal> <operator pos:start="29:44" pos:end="29:45">&amp;&amp;</operator> <call pos:start="29:47" pos:end="29:58"><name pos:start="29:47" pos:end="29:53">AV_RB16</name><argument_list pos:start="29:54" pos:end="29:58">(<argument pos:start="29:55" pos:end="29:57"><expr pos:start="29:55" pos:end="29:57"><name pos:start="29:55" pos:end="29:57">buf</name></expr></argument>)</argument_list></call> <operator pos:start="29:60" pos:end="29:61">==</operator> <literal type="number" pos:start="29:63" pos:end="29:68">0x8000</literal></expr>)</condition> <block pos:start="29:71" pos:end="55:5">{<block_content pos:start="31:9" pos:end="53:32">

        <decl_stmt pos:start="31:9" pos:end="31:24"><decl pos:start="31:9" pos:end="31:23"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:23">header_size</name></decl>;</decl_stmt>

        <if_stmt pos:start="33:9" pos:end="41:9"><if pos:start="33:9" pos:end="41:9">if <condition pos:start="33:12" pos:end="35:59">(<expr pos:start="33:13" pos:end="35:58"><operator pos:start="33:13" pos:end="33:13">(</operator><name pos:start="33:14" pos:end="33:16">ret</name> <operator pos:start="33:18" pos:end="33:18">=</operator> <call pos:start="33:20" pos:end="35:53"><name pos:start="33:20" pos:end="33:43">avpriv_adx_decode_header</name><argument_list pos:start="33:44" pos:end="35:53">(<argument pos:start="33:45" pos:end="33:49"><expr pos:start="33:45" pos:end="33:49"><name pos:start="33:45" pos:end="33:49">avctx</name></expr></argument>, <argument pos:start="33:52" pos:end="33:54"><expr pos:start="33:52" pos:end="33:54"><name pos:start="33:52" pos:end="33:54">buf</name></expr></argument>, <argument pos:start="33:57" pos:end="33:64"><expr pos:start="33:57" pos:end="33:64"><name pos:start="33:57" pos:end="33:64">buf_size</name></expr></argument>, <argument pos:start="33:67" pos:end="33:78"><expr pos:start="33:67" pos:end="33:78"><operator pos:start="33:67" pos:end="33:67">&amp;</operator><name pos:start="33:68" pos:end="33:78">header_size</name></expr></argument>,

                                            <argument pos:start="35:45" pos:end="35:52"><expr pos:start="35:45" pos:end="35:52"><name pos:start="35:45" pos:end="35:52"><name pos:start="35:45" pos:end="35:45">c</name><operator pos:start="35:46" pos:end="35:47">-&gt;</operator><name pos:start="35:48" pos:end="35:52">coeff</name></name></expr></argument>)</argument_list></call><operator pos:start="35:54" pos:end="35:54">)</operator> <operator pos:start="35:56" pos:end="35:56">&lt;</operator> <literal type="number" pos:start="35:58" pos:end="35:58">0</literal></expr>)</condition> <block pos:start="35:61" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:39">

            <expr_stmt pos:start="37:13" pos:end="37:70"><expr pos:start="37:13" pos:end="37:69"><call pos:start="37:13" pos:end="37:69"><name pos:start="37:13" pos:end="37:18">av_log</name><argument_list pos:start="37:19" pos:end="37:69">(<argument pos:start="37:20" pos:end="37:24"><expr pos:start="37:20" pos:end="37:24"><name pos:start="37:20" pos:end="37:24">avctx</name></expr></argument>, <argument pos:start="37:27" pos:end="37:38"><expr pos:start="37:27" pos:end="37:38"><name pos:start="37:27" pos:end="37:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:41" pos:end="37:68"><expr pos:start="37:41" pos:end="37:68"><literal type="string" pos:start="37:41" pos:end="37:68">"error parsing ADX header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="39:13" pos:end="39:39">return <expr pos:start="39:20" pos:end="39:38"><name pos:start="39:20" pos:end="39:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:43"><expr pos:start="43:9" pos:end="43:42"><name pos:start="43:9" pos:end="43:19"><name pos:start="43:9" pos:end="43:9">c</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:19">channels</name></name>      <operator pos:start="43:26" pos:end="43:26">=</operator> <name pos:start="43:28" pos:end="43:42"><name pos:start="43:28" pos:end="43:32">avctx</name><operator pos:start="43:33" pos:end="43:34">-&gt;</operator><name pos:start="43:35" pos:end="43:42">channels</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:29"><expr pos:start="45:9" pos:end="45:28"><name pos:start="45:9" pos:end="45:24"><name pos:start="45:9" pos:end="45:9">c</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:24">header_parsed</name></name> <operator pos:start="45:26" pos:end="45:26">=</operator> <literal type="number" pos:start="45:28" pos:end="45:28">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="49:39"><if pos:start="47:9" pos:end="49:39">if <condition pos:start="47:12" pos:end="47:35">(<expr pos:start="47:13" pos:end="47:34"><name pos:start="47:13" pos:end="47:20">buf_size</name> <operator pos:start="47:22" pos:end="47:22">&lt;</operator> <name pos:start="47:24" pos:end="47:34">header_size</name></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:39"><block_content pos:start="49:13" pos:end="49:39">

            <return pos:start="49:13" pos:end="49:39">return <expr pos:start="49:20" pos:end="49:38"><name pos:start="49:20" pos:end="49:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:32"><expr pos:start="51:9" pos:end="51:31"><name pos:start="51:9" pos:end="51:11">buf</name>      <operator pos:start="51:18" pos:end="51:19">+=</operator> <name pos:start="51:21" pos:end="51:31">header_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:32"><expr pos:start="53:9" pos:end="53:31"><name pos:start="53:9" pos:end="53:16">buf_size</name> <operator pos:start="53:18" pos:end="53:19">-=</operator> <name pos:start="53:21" pos:end="53:31">header_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="57:5" pos:end="59:35"><if pos:start="57:5" pos:end="59:35">if <condition pos:start="57:8" pos:end="57:26">(<expr pos:start="57:9" pos:end="57:25"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:25"><name pos:start="57:10" pos:end="57:10">c</name><operator pos:start="57:11" pos:end="57:12">-&gt;</operator><name pos:start="57:13" pos:end="57:25">header_parsed</name></name></expr>)</condition><block type="pseudo" pos:start="59:9" pos:end="59:35"><block_content pos:start="59:9" pos:end="59:35">

        <return pos:start="59:9" pos:end="59:35">return <expr pos:start="59:16" pos:end="59:34"><name pos:start="59:16" pos:end="59:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:50">/* calculate number of blocks in the packet */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:55"><expr pos:start="65:5" pos:end="65:54"><name pos:start="65:5" pos:end="65:14">num_blocks</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <name pos:start="65:18" pos:end="65:25">buf_size</name> <operator pos:start="65:27" pos:end="65:27">/</operator> <operator pos:start="65:29" pos:end="65:29">(</operator><name pos:start="65:30" pos:end="65:39">BLOCK_SIZE</name> <operator pos:start="65:41" pos:end="65:41">*</operator> <name pos:start="65:43" pos:end="65:53"><name pos:start="65:43" pos:end="65:43">c</name><operator pos:start="65:44" pos:end="65:45">-&gt;</operator><name pos:start="65:46" pos:end="65:53">channels</name></name><operator pos:start="65:54" pos:end="65:54">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="69:5" pos:end="71:16">/* if the packet is not an even multiple of BLOCK_SIZE, check for an EOF

       packet */</comment>

    <if_stmt pos:start="73:5" pos:end="87:5"><if pos:start="73:5" pos:end="87:5">if <condition pos:start="73:8" pos:end="73:65">(<expr pos:start="73:9" pos:end="73:64"><operator pos:start="73:9" pos:end="73:9">!</operator><name pos:start="73:10" pos:end="73:19">num_blocks</name> <operator pos:start="73:21" pos:end="73:22">||</operator> <name pos:start="73:24" pos:end="73:31">buf_size</name> <operator pos:start="73:33" pos:end="73:33">%</operator> <operator pos:start="73:35" pos:end="73:35">(</operator><name pos:start="73:36" pos:end="73:45">BLOCK_SIZE</name> <operator pos:start="73:47" pos:end="73:47">*</operator> <name pos:start="73:49" pos:end="73:63"><name pos:start="73:49" pos:end="73:53">avctx</name><operator pos:start="73:54" pos:end="73:55">-&gt;</operator><name pos:start="73:56" pos:end="73:63">channels</name></name><operator pos:start="73:64" pos:end="73:64">)</operator></expr>)</condition> <block pos:start="73:67" pos:end="87:5">{<block_content pos:start="75:9" pos:end="85:35">

        <if_stmt pos:start="75:9" pos:end="83:9"><if pos:start="75:9" pos:end="83:9">if <condition pos:start="75:12" pos:end="75:53">(<expr pos:start="75:13" pos:end="75:52"><name pos:start="75:13" pos:end="75:20">buf_size</name> <operator pos:start="75:22" pos:end="75:23">&gt;=</operator> <literal type="number" pos:start="75:25" pos:end="75:25">4</literal> <operator pos:start="75:27" pos:end="75:28">&amp;&amp;</operator> <operator pos:start="75:30" pos:end="75:30">(</operator><call pos:start="75:31" pos:end="75:42"><name pos:start="75:31" pos:end="75:37">AV_RB16</name><argument_list pos:start="75:38" pos:end="75:42">(<argument pos:start="75:39" pos:end="75:41"><expr pos:start="75:39" pos:end="75:41"><name pos:start="75:39" pos:end="75:41">buf</name></expr></argument>)</argument_list></call> <operator pos:start="75:44" pos:end="75:44">&amp;</operator> <literal type="number" pos:start="75:46" pos:end="75:51">0x8000</literal><operator pos:start="75:52" pos:end="75:52">)</operator></expr>)</condition> <block pos:start="75:55" pos:end="83:9">{<block_content pos:start="77:13" pos:end="81:31">

            <expr_stmt pos:start="77:13" pos:end="77:23"><expr pos:start="77:13" pos:end="77:22"><name pos:start="77:13" pos:end="77:18"><name pos:start="77:13" pos:end="77:13">c</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:18">eof</name></name> <operator pos:start="77:20" pos:end="77:20">=</operator> <literal type="number" pos:start="77:22" pos:end="77:22">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:31"><expr pos:start="79:13" pos:end="79:30"><operator pos:start="79:13" pos:end="79:13">*</operator><name pos:start="79:14" pos:end="79:26">got_frame_ptr</name> <operator pos:start="79:28" pos:end="79:28">=</operator> <literal type="number" pos:start="79:30" pos:end="79:30">0</literal></expr>;</expr_stmt>

            <return pos:start="81:13" pos:end="81:31">return <expr pos:start="81:20" pos:end="81:30"><name pos:start="81:20" pos:end="81:30"><name pos:start="81:20" pos:end="81:24">avpkt</name><operator pos:start="81:25" pos:end="81:26">-&gt;</operator><name pos:start="81:27" pos:end="81:30">size</name></name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <return pos:start="85:9" pos:end="85:35">return <expr pos:start="85:16" pos:end="85:34"><name pos:start="85:16" pos:end="85:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:27">/* get output buffer */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:53"><expr pos:start="93:5" pos:end="93:52"><name pos:start="93:5" pos:end="93:23"><name pos:start="93:5" pos:end="93:5">c</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:12">frame</name><operator pos:start="93:13" pos:end="93:13">.</operator><name pos:start="93:14" pos:end="93:23">nb_samples</name></name> <operator pos:start="93:25" pos:end="93:25">=</operator> <name pos:start="93:27" pos:end="93:36">num_blocks</name> <operator pos:start="93:38" pos:end="93:38">*</operator> <name pos:start="93:40" pos:end="93:52">BLOCK_SAMPLES</name></expr>;</expr_stmt>

    <if_stmt pos:start="95:5" pos:end="101:5"><if pos:start="95:5" pos:end="101:5">if <condition pos:start="95:8" pos:end="95:56">(<expr pos:start="95:9" pos:end="95:55"><operator pos:start="95:9" pos:end="95:9">(</operator><name pos:start="95:10" pos:end="95:12">ret</name> <operator pos:start="95:14" pos:end="95:14">=</operator> <call pos:start="95:16" pos:end="95:50"><name pos:start="95:16" pos:end="95:32"><name pos:start="95:16" pos:end="95:20">avctx</name><operator pos:start="95:21" pos:end="95:22">-&gt;</operator><name pos:start="95:23" pos:end="95:32">get_buffer</name></name><argument_list pos:start="95:33" pos:end="95:50">(<argument pos:start="95:34" pos:end="95:38"><expr pos:start="95:34" pos:end="95:38"><name pos:start="95:34" pos:end="95:38">avctx</name></expr></argument>, <argument pos:start="95:41" pos:end="95:49"><expr pos:start="95:41" pos:end="95:49"><operator pos:start="95:41" pos:end="95:41">&amp;</operator><name pos:start="95:42" pos:end="95:49"><name pos:start="95:42" pos:end="95:42">c</name><operator pos:start="95:43" pos:end="95:44">-&gt;</operator><name pos:start="95:45" pos:end="95:49">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="95:51" pos:end="95:51">)</operator> <operator pos:start="95:53" pos:end="95:53">&lt;</operator> <literal type="number" pos:start="95:55" pos:end="95:55">0</literal></expr>)</condition> <block pos:start="95:58" pos:end="101:5">{<block_content pos:start="97:9" pos:end="99:19">

        <expr_stmt pos:start="97:9" pos:end="97:61"><expr pos:start="97:9" pos:end="97:60"><call pos:start="97:9" pos:end="97:60"><name pos:start="97:9" pos:end="97:14">av_log</name><argument_list pos:start="97:15" pos:end="97:60">(<argument pos:start="97:16" pos:end="97:20"><expr pos:start="97:16" pos:end="97:20"><name pos:start="97:16" pos:end="97:20">avctx</name></expr></argument>, <argument pos:start="97:23" pos:end="97:34"><expr pos:start="97:23" pos:end="97:34"><name pos:start="97:23" pos:end="97:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="97:37" pos:end="97:59"><expr pos:start="97:37" pos:end="97:59"><literal type="string" pos:start="97:37" pos:end="97:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="99:9" pos:end="99:19">return <expr pos:start="99:16" pos:end="99:18"><name pos:start="99:16" pos:end="99:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:42"><expr pos:start="103:5" pos:end="103:41"><name pos:start="103:5" pos:end="103:11">samples</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <operator pos:start="103:15" pos:end="103:15">(</operator><name pos:start="103:16" pos:end="103:22">int16_t</name> <operator pos:start="103:24" pos:end="103:24">*</operator><operator pos:start="103:25" pos:end="103:25">)</operator><name pos:start="103:26" pos:end="103:41"><name pos:start="103:26" pos:end="103:26">c</name><operator pos:start="103:27" pos:end="103:28">-&gt;</operator><name pos:start="103:29" pos:end="103:33">frame</name><operator pos:start="103:34" pos:end="103:34">.</operator><name pos:start="103:35" pos:end="103:38">data</name><index pos:start="103:39" pos:end="103:41">[<expr pos:start="103:40" pos:end="103:40"><literal type="number" pos:start="103:40" pos:end="103:40">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <while pos:start="107:5" pos:end="129:5">while <condition pos:start="107:11" pos:end="107:24">(<expr pos:start="107:12" pos:end="107:23"><name pos:start="107:12" pos:end="107:21">num_blocks</name><operator pos:start="107:22" pos:end="107:23">--</operator></expr>)</condition> <block pos:start="107:26" pos:end="129:5">{<block_content pos:start="109:9" pos:end="127:47">

        <for pos:start="109:9" pos:end="125:9">for <control pos:start="109:13" pos:end="109:44">(<init pos:start="109:14" pos:end="109:20"><expr pos:start="109:14" pos:end="109:19"><name pos:start="109:14" pos:end="109:15">ch</name> <operator pos:start="109:17" pos:end="109:17">=</operator> <literal type="number" pos:start="109:19" pos:end="109:19">0</literal></expr>;</init> <condition pos:start="109:22" pos:end="109:38"><expr pos:start="109:22" pos:end="109:37"><name pos:start="109:22" pos:end="109:23">ch</name> <operator pos:start="109:25" pos:end="109:25">&lt;</operator> <name pos:start="109:27" pos:end="109:37"><name pos:start="109:27" pos:end="109:27">c</name><operator pos:start="109:28" pos:end="109:29">-&gt;</operator><name pos:start="109:30" pos:end="109:37">channels</name></name></expr>;</condition> <incr pos:start="109:40" pos:end="109:43"><expr pos:start="109:40" pos:end="109:43"><name pos:start="109:40" pos:end="109:41">ch</name><operator pos:start="109:42" pos:end="109:43">++</operator></expr></incr>)</control> <block pos:start="109:46" pos:end="125:9">{<block_content pos:start="111:13" pos:end="123:35">

            <if_stmt pos:start="111:13" pos:end="119:13"><if pos:start="111:13" pos:end="119:13">if <condition pos:start="111:16" pos:end="111:53">(<expr pos:start="111:17" pos:end="111:52"><call pos:start="111:17" pos:end="111:52"><name pos:start="111:17" pos:end="111:26">adx_decode</name><argument_list pos:start="111:27" pos:end="111:52">(<argument pos:start="111:28" pos:end="111:28"><expr pos:start="111:28" pos:end="111:28"><name pos:start="111:28" pos:end="111:28">c</name></expr></argument>, <argument pos:start="111:31" pos:end="111:42"><expr pos:start="111:31" pos:end="111:42"><name pos:start="111:31" pos:end="111:37">samples</name> <operator pos:start="111:39" pos:end="111:39">+</operator> <name pos:start="111:41" pos:end="111:42">ch</name></expr></argument>, <argument pos:start="111:45" pos:end="111:47"><expr pos:start="111:45" pos:end="111:47"><name pos:start="111:45" pos:end="111:47">buf</name></expr></argument>, <argument pos:start="111:50" pos:end="111:51"><expr pos:start="111:50" pos:end="111:51"><name pos:start="111:50" pos:end="111:51">ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="111:55" pos:end="119:13">{<block_content pos:start="113:17" pos:end="117:22">

                <expr_stmt pos:start="113:17" pos:end="113:27"><expr pos:start="113:17" pos:end="113:26"><name pos:start="113:17" pos:end="113:22"><name pos:start="113:17" pos:end="113:17">c</name><operator pos:start="113:18" pos:end="113:19">-&gt;</operator><name pos:start="113:20" pos:end="113:22">eof</name></name> <operator pos:start="113:24" pos:end="113:24">=</operator> <literal type="number" pos:start="113:26" pos:end="113:26">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="115:17" pos:end="115:48"><expr pos:start="115:17" pos:end="115:47"><name pos:start="115:17" pos:end="115:19">buf</name> <operator pos:start="115:21" pos:end="115:21">=</operator> <name pos:start="115:23" pos:end="115:33"><name pos:start="115:23" pos:end="115:27">avpkt</name><operator pos:start="115:28" pos:end="115:29">-&gt;</operator><name pos:start="115:30" pos:end="115:33">data</name></name> <operator pos:start="115:35" pos:end="115:35">+</operator> <name pos:start="115:37" pos:end="115:47"><name pos:start="115:37" pos:end="115:41">avpkt</name><operator pos:start="115:42" pos:end="115:43">-&gt;</operator><name pos:start="115:44" pos:end="115:47">size</name></name></expr>;</expr_stmt>

                <break pos:start="117:17" pos:end="117:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:35"><expr pos:start="121:13" pos:end="121:34"><name pos:start="121:13" pos:end="121:20">buf_size</name> <operator pos:start="121:22" pos:end="121:23">-=</operator> <name pos:start="121:25" pos:end="121:34">BLOCK_SIZE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:35"><expr pos:start="123:13" pos:end="123:34"><name pos:start="123:13" pos:end="123:15">buf</name>      <operator pos:start="123:22" pos:end="123:23">+=</operator> <name pos:start="123:25" pos:end="123:34">BLOCK_SIZE</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="127:9" pos:end="127:47"><expr pos:start="127:9" pos:end="127:46"><name pos:start="127:9" pos:end="127:15">samples</name> <operator pos:start="127:17" pos:end="127:18">+=</operator> <name pos:start="127:20" pos:end="127:32">BLOCK_SAMPLES</name> <operator pos:start="127:34" pos:end="127:34">*</operator> <name pos:start="127:36" pos:end="127:46"><name pos:start="127:36" pos:end="127:36">c</name><operator pos:start="127:37" pos:end="127:38">-&gt;</operator><name pos:start="127:39" pos:end="127:46">channels</name></name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="133:5" pos:end="133:25"><expr pos:start="133:5" pos:end="133:24"><operator pos:start="133:5" pos:end="133:5">*</operator><name pos:start="133:6" pos:end="133:18">got_frame_ptr</name>   <operator pos:start="133:22" pos:end="133:22">=</operator> <literal type="number" pos:start="133:24" pos:end="133:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:32"><expr pos:start="135:5" pos:end="135:31"><operator pos:start="135:5" pos:end="135:5">*</operator><operator pos:start="135:6" pos:end="135:6">(</operator><name pos:start="135:7" pos:end="135:13">AVFrame</name> <operator pos:start="135:15" pos:end="135:15">*</operator><operator pos:start="135:16" pos:end="135:16">)</operator><name pos:start="135:17" pos:end="135:20">data</name> <operator pos:start="135:22" pos:end="135:22">=</operator> <name pos:start="135:24" pos:end="135:31"><name pos:start="135:24" pos:end="135:24">c</name><operator pos:start="135:25" pos:end="135:26">-&gt;</operator><name pos:start="135:27" pos:end="135:31">frame</name></name></expr>;</expr_stmt>



    <return pos:start="139:5" pos:end="139:29">return <expr pos:start="139:12" pos:end="139:28"><name pos:start="139:12" pos:end="139:14">buf</name> <operator pos:start="139:16" pos:end="139:16">-</operator> <name pos:start="139:18" pos:end="139:28"><name pos:start="139:18" pos:end="139:22">avpkt</name><operator pos:start="139:23" pos:end="139:24">-&gt;</operator><name pos:start="139:25" pos:end="139:28">data</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
