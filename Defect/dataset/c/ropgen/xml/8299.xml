<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8299.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">qemu_config_parse</name><parameter_list pos:start="1:22" pos:end="1:72">(<parameter pos:start="1:23" pos:end="1:30"><decl pos:start="1:23" pos:end="1:30"><type pos:start="1:23" pos:end="1:30"><name pos:start="1:23" pos:end="1:26">FILE</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:30">fp</name></decl></parameter>, <parameter pos:start="1:33" pos:end="1:52"><decl pos:start="1:33" pos:end="1:52"><type pos:start="1:33" pos:end="1:52"><name pos:start="1:33" pos:end="1:44">QemuOptsList</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier><modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">lists</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:71"><decl pos:start="1:55" pos:end="1:71"><type pos:start="1:55" pos:end="1:71"><specifier pos:start="1:55" pos:end="1:59">const</specifier> <name pos:start="1:61" pos:end="1:64">char</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:71">fname</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="133:1">{<block_content pos:start="5:5" pos:end="131:15">

    <decl_stmt pos:start="5:5" pos:end="5:61"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">char</name></type> <name pos:start="5:10" pos:end="5:19"><name pos:start="5:10" pos:end="5:13">line</name><index pos:start="5:14" pos:end="5:19">[<expr pos:start="5:15" pos:end="5:18"><literal type="number" pos:start="5:15" pos:end="5:18">1024</literal></expr>]</index></name></decl>, <decl pos:start="5:22" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:8"/><name pos:start="5:22" pos:end="5:30"><name pos:start="5:22" pos:end="5:26">group</name><index pos:start="5:27" pos:end="5:30">[<expr pos:start="5:28" pos:end="5:29"><literal type="number" pos:start="5:28" pos:end="5:29">64</literal></expr>]</index></name></decl>, <decl pos:start="5:33" pos:end="5:38"><type ref="prev" pos:start="5:5" pos:end="5:8"/><name pos:start="5:33" pos:end="5:38"><name pos:start="5:33" pos:end="5:34">id</name><index pos:start="5:35" pos:end="5:38">[<expr pos:start="5:36" pos:end="5:37"><literal type="number" pos:start="5:36" pos:end="5:37">64</literal></expr>]</index></name></decl>, <decl pos:start="5:41" pos:end="5:47"><type ref="prev" pos:start="5:5" pos:end="5:8"/><name pos:start="5:41" pos:end="5:47"><name pos:start="5:41" pos:end="5:43">arg</name><index pos:start="5:44" pos:end="5:47">[<expr pos:start="5:45" pos:end="5:46"><literal type="number" pos:start="5:45" pos:end="5:46">64</literal></expr>]</index></name></decl>, <decl pos:start="5:50" pos:end="5:60"><type ref="prev" pos:start="5:5" pos:end="5:8"/><name pos:start="5:50" pos:end="5:60"><name pos:start="5:50" pos:end="5:54">value</name><index pos:start="5:55" pos:end="5:60">[<expr pos:start="5:56" pos:end="5:59"><literal type="number" pos:start="5:56" pos:end="5:59">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">Location</name></type> <name pos:start="7:14" pos:end="7:16">loc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">QemuOptsList</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:22">list</name> <init pos:start="9:24" pos:end="9:29">= <expr pos:start="9:26" pos:end="9:29"><name pos:start="9:26" pos:end="9:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:20">local_err</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">QemuOpts</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:18">opts</name> <init pos:start="13:20" pos:end="13:25">= <expr pos:start="13:22" pos:end="13:25"><name pos:start="13:22" pos:end="13:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">res</name> <init pos:start="15:13" pos:end="15:16">= <expr pos:start="15:15" pos:end="15:16"><operator pos:start="15:15" pos:end="15:15">-</operator><literal type="number" pos:start="15:16" pos:end="15:16">1</literal></expr></init></decl>, <decl pos:start="15:19" pos:end="15:25"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:19" pos:end="15:21">lno</name> <init pos:start="15:23" pos:end="15:25">= <expr pos:start="15:25" pos:end="15:25"><literal type="number" pos:start="15:25" pos:end="15:25">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:24"><expr pos:start="19:5" pos:end="19:23"><call pos:start="19:5" pos:end="19:23"><name pos:start="19:5" pos:end="19:17">loc_push_none</name><argument_list pos:start="19:18" pos:end="19:23">(<argument pos:start="19:19" pos:end="19:22"><expr pos:start="19:19" pos:end="19:22"><operator pos:start="19:19" pos:end="19:19">&amp;</operator><name pos:start="19:20" pos:end="19:22">loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="21:5" pos:end="115:5">while <condition pos:start="21:11" pos:end="21:49">(<expr pos:start="21:12" pos:end="21:48"><call pos:start="21:12" pos:end="21:40"><name pos:start="21:12" pos:end="21:16">fgets</name><argument_list pos:start="21:17" pos:end="21:40">(<argument pos:start="21:18" pos:end="21:21"><expr pos:start="21:18" pos:end="21:21"><name pos:start="21:18" pos:end="21:21">line</name></expr></argument>, <argument pos:start="21:24" pos:end="21:35"><expr pos:start="21:24" pos:end="21:35"><sizeof pos:start="21:24" pos:end="21:35">sizeof<argument_list pos:start="21:30" pos:end="21:35">(<argument pos:start="21:31" pos:end="21:34"><expr pos:start="21:31" pos:end="21:34"><name pos:start="21:31" pos:end="21:34">line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="21:38" pos:end="21:39"><expr pos:start="21:38" pos:end="21:39"><name pos:start="21:38" pos:end="21:39">fp</name></expr></argument>)</argument_list></call> <operator pos:start="21:42" pos:end="21:43">!=</operator> <name pos:start="21:45" pos:end="21:48">NULL</name></expr>)</condition> <block pos:start="21:51" pos:end="115:5">{<block_content pos:start="23:9" pos:end="113:17">

        <expr_stmt pos:start="23:9" pos:end="23:35"><expr pos:start="23:9" pos:end="23:34"><call pos:start="23:9" pos:end="23:34"><name pos:start="23:9" pos:end="23:20">loc_set_file</name><argument_list pos:start="23:21" pos:end="23:34">(<argument pos:start="23:22" pos:end="23:26"><expr pos:start="23:22" pos:end="23:26"><name pos:start="23:22" pos:end="23:26">fname</name></expr></argument>, <argument pos:start="23:29" pos:end="23:33"><expr pos:start="23:29" pos:end="23:33"><operator pos:start="23:29" pos:end="23:30">++</operator><name pos:start="23:31" pos:end="23:33">lno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="31:9"><if pos:start="25:9" pos:end="31:9">if <condition pos:start="25:12" pos:end="25:28">(<expr pos:start="25:13" pos:end="25:27"><name pos:start="25:13" pos:end="25:19"><name pos:start="25:13" pos:end="25:16">line</name><index pos:start="25:17" pos:end="25:19">[<expr pos:start="25:18" pos:end="25:18"><literal type="number" pos:start="25:18" pos:end="25:18">0</literal></expr>]</index></name> <operator pos:start="25:21" pos:end="25:22">==</operator> <literal type="char" pos:start="25:24" pos:end="25:27">'\n'</literal></expr>)</condition> <block pos:start="25:30" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:21">

            <comment type="block" pos:start="27:13" pos:end="27:34">/* skip empty lines */</comment>

            <continue pos:start="29:13" pos:end="29:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="33:9" pos:end="39:9"><if pos:start="33:9" pos:end="39:9">if <condition pos:start="33:12" pos:end="33:27">(<expr pos:start="33:13" pos:end="33:26"><name pos:start="33:13" pos:end="33:19"><name pos:start="33:13" pos:end="33:16">line</name><index pos:start="33:17" pos:end="33:19">[<expr pos:start="33:18" pos:end="33:18"><literal type="number" pos:start="33:18" pos:end="33:18">0</literal></expr>]</index></name> <operator pos:start="33:21" pos:end="33:22">==</operator> <literal type="char" pos:start="33:24" pos:end="33:26">'#'</literal></expr>)</condition> <block pos:start="33:29" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:21">

            <comment type="block" pos:start="35:13" pos:end="35:25">/* comment */</comment>

            <continue pos:start="37:13" pos:end="37:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="41:9" pos:end="59:9"><if pos:start="41:9" pos:end="59:9">if <condition pos:start="41:12" pos:end="41:64">(<expr pos:start="41:13" pos:end="41:63"><call pos:start="41:13" pos:end="41:58"><name pos:start="41:13" pos:end="41:18">sscanf</name><argument_list pos:start="41:19" pos:end="41:58">(<argument pos:start="41:20" pos:end="41:23"><expr pos:start="41:20" pos:end="41:23"><name pos:start="41:20" pos:end="41:23">line</name></expr></argument>, <argument pos:start="41:26" pos:end="41:46"><expr pos:start="41:26" pos:end="41:46"><literal type="string" pos:start="41:26" pos:end="41:46">"[%63s \"%63[^\"]\"]"</literal></expr></argument>, <argument pos:start="41:49" pos:end="41:53"><expr pos:start="41:49" pos:end="41:53"><name pos:start="41:49" pos:end="41:53">group</name></expr></argument>, <argument pos:start="41:56" pos:end="41:57"><expr pos:start="41:56" pos:end="41:57"><name pos:start="41:56" pos:end="41:57">id</name></expr></argument>)</argument_list></call> <operator pos:start="41:60" pos:end="41:61">==</operator> <literal type="number" pos:start="41:63" pos:end="41:63">2</literal></expr>)</condition> <block pos:start="41:66" pos:end="59:9">{<block_content pos:start="45:13" pos:end="57:21">

            <comment type="block" pos:start="43:13" pos:end="43:31">/* group with id */</comment>

            <expr_stmt pos:start="45:13" pos:end="45:55"><expr pos:start="45:13" pos:end="45:54"><name pos:start="45:13" pos:end="45:16">list</name> <operator pos:start="45:18" pos:end="45:18">=</operator> <call pos:start="45:20" pos:end="45:54"><name pos:start="45:20" pos:end="45:28">find_list</name><argument_list pos:start="45:29" pos:end="45:54">(<argument pos:start="45:30" pos:end="45:34"><expr pos:start="45:30" pos:end="45:34"><name pos:start="45:30" pos:end="45:34">lists</name></expr></argument>, <argument pos:start="45:37" pos:end="45:41"><expr pos:start="45:37" pos:end="45:41"><name pos:start="45:37" pos:end="45:41">group</name></expr></argument>, <argument pos:start="45:44" pos:end="45:53"><expr pos:start="45:44" pos:end="45:53"><operator pos:start="45:44" pos:end="45:44">&amp;</operator><name pos:start="45:45" pos:end="45:53">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="47:13" pos:end="53:13"><if pos:start="47:13" pos:end="53:13">if <condition pos:start="47:16" pos:end="47:26">(<expr pos:start="47:17" pos:end="47:25"><name pos:start="47:17" pos:end="47:25">local_err</name></expr>)</condition> <block pos:start="47:28" pos:end="53:13">{<block_content pos:start="49:17" pos:end="51:25">

                <expr_stmt pos:start="49:17" pos:end="49:44"><expr pos:start="49:17" pos:end="49:43"><call pos:start="49:17" pos:end="49:43"><name pos:start="49:17" pos:end="49:32">error_report_err</name><argument_list pos:start="49:33" pos:end="49:43">(<argument pos:start="49:34" pos:end="49:42"><expr pos:start="49:34" pos:end="49:42"><name pos:start="49:34" pos:end="49:42">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="51:17" pos:end="51:25">goto <name pos:start="51:22" pos:end="51:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:55"><expr pos:start="55:13" pos:end="55:54"><name pos:start="55:13" pos:end="55:16">opts</name> <operator pos:start="55:18" pos:end="55:18">=</operator> <call pos:start="55:20" pos:end="55:54"><name pos:start="55:20" pos:end="55:35">qemu_opts_create</name><argument_list pos:start="55:36" pos:end="55:54">(<argument pos:start="55:37" pos:end="55:40"><expr pos:start="55:37" pos:end="55:40"><name pos:start="55:37" pos:end="55:40">list</name></expr></argument>, <argument pos:start="55:43" pos:end="55:44"><expr pos:start="55:43" pos:end="55:44"><name pos:start="55:43" pos:end="55:44">id</name></expr></argument>, <argument pos:start="55:47" pos:end="55:47"><expr pos:start="55:47" pos:end="55:47"><literal type="number" pos:start="55:47" pos:end="55:47">1</literal></expr></argument>, <argument pos:start="55:50" pos:end="55:53"><expr pos:start="55:50" pos:end="55:53"><name pos:start="55:50" pos:end="55:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="57:13" pos:end="57:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="61:9" pos:end="79:9"><if pos:start="61:9" pos:end="79:9">if <condition pos:start="61:12" pos:end="61:50">(<expr pos:start="61:13" pos:end="61:49"><call pos:start="61:13" pos:end="61:44"><name pos:start="61:13" pos:end="61:18">sscanf</name><argument_list pos:start="61:19" pos:end="61:44">(<argument pos:start="61:20" pos:end="61:23"><expr pos:start="61:20" pos:end="61:23"><name pos:start="61:20" pos:end="61:23">line</name></expr></argument>, <argument pos:start="61:26" pos:end="61:36"><expr pos:start="61:26" pos:end="61:36"><literal type="string" pos:start="61:26" pos:end="61:36">"[%63[^]]]"</literal></expr></argument>, <argument pos:start="61:39" pos:end="61:43"><expr pos:start="61:39" pos:end="61:43"><name pos:start="61:39" pos:end="61:43">group</name></expr></argument>)</argument_list></call> <operator pos:start="61:46" pos:end="61:47">==</operator> <literal type="number" pos:start="61:49" pos:end="61:49">1</literal></expr>)</condition> <block pos:start="61:52" pos:end="79:9">{<block_content pos:start="65:13" pos:end="77:21">

            <comment type="block" pos:start="63:13" pos:end="63:34">/* group without id */</comment>

            <expr_stmt pos:start="65:13" pos:end="65:55"><expr pos:start="65:13" pos:end="65:54"><name pos:start="65:13" pos:end="65:16">list</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <call pos:start="65:20" pos:end="65:54"><name pos:start="65:20" pos:end="65:28">find_list</name><argument_list pos:start="65:29" pos:end="65:54">(<argument pos:start="65:30" pos:end="65:34"><expr pos:start="65:30" pos:end="65:34"><name pos:start="65:30" pos:end="65:34">lists</name></expr></argument>, <argument pos:start="65:37" pos:end="65:41"><expr pos:start="65:37" pos:end="65:41"><name pos:start="65:37" pos:end="65:41">group</name></expr></argument>, <argument pos:start="65:44" pos:end="65:53"><expr pos:start="65:44" pos:end="65:53"><operator pos:start="65:44" pos:end="65:44">&amp;</operator><name pos:start="65:45" pos:end="65:53">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="67:13" pos:end="73:13"><if pos:start="67:13" pos:end="73:13">if <condition pos:start="67:16" pos:end="67:26">(<expr pos:start="67:17" pos:end="67:25"><name pos:start="67:17" pos:end="67:25">local_err</name></expr>)</condition> <block pos:start="67:28" pos:end="73:13">{<block_content pos:start="69:17" pos:end="71:25">

                <expr_stmt pos:start="69:17" pos:end="69:44"><expr pos:start="69:17" pos:end="69:43"><call pos:start="69:17" pos:end="69:43"><name pos:start="69:17" pos:end="69:32">error_report_err</name><argument_list pos:start="69:33" pos:end="69:43">(<argument pos:start="69:34" pos:end="69:42"><expr pos:start="69:34" pos:end="69:42"><name pos:start="69:34" pos:end="69:42">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="71:17" pos:end="71:25">goto <name pos:start="71:22" pos:end="71:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:65"><expr pos:start="75:13" pos:end="75:64"><name pos:start="75:13" pos:end="75:16">opts</name> <operator pos:start="75:18" pos:end="75:18">=</operator> <call pos:start="75:20" pos:end="75:64"><name pos:start="75:20" pos:end="75:35">qemu_opts_create</name><argument_list pos:start="75:36" pos:end="75:64">(<argument pos:start="75:37" pos:end="75:40"><expr pos:start="75:37" pos:end="75:40"><name pos:start="75:37" pos:end="75:40">list</name></expr></argument>, <argument pos:start="75:43" pos:end="75:46"><expr pos:start="75:43" pos:end="75:46"><name pos:start="75:43" pos:end="75:46">NULL</name></expr></argument>, <argument pos:start="75:49" pos:end="75:49"><expr pos:start="75:49" pos:end="75:49"><literal type="number" pos:start="75:49" pos:end="75:49">0</literal></expr></argument>, <argument pos:start="75:52" pos:end="75:63"><expr pos:start="75:52" pos:end="75:63"><operator pos:start="75:52" pos:end="75:52">&amp;</operator><name pos:start="75:53" pos:end="75:63">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="77:13" pos:end="77:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:24"><expr pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:16"><name pos:start="81:9" pos:end="81:13">value</name><index pos:start="81:14" pos:end="81:16">[<expr pos:start="81:15" pos:end="81:15"><literal type="number" pos:start="81:15" pos:end="81:15">0</literal></expr>]</index></name> <operator pos:start="81:18" pos:end="81:18">=</operator> <literal type="char" pos:start="81:20" pos:end="81:23">'\0'</literal></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="109:9"><if pos:start="83:9" pos:end="109:9">if <condition pos:start="83:12" pos:end="85:51">(<expr pos:start="83:13" pos:end="85:50"><call pos:start="83:13" pos:end="83:62"><name pos:start="83:13" pos:end="83:18">sscanf</name><argument_list pos:start="83:19" pos:end="83:62">(<argument pos:start="83:20" pos:end="83:23"><expr pos:start="83:20" pos:end="83:23"><name pos:start="83:20" pos:end="83:23">line</name></expr></argument>, <argument pos:start="83:26" pos:end="83:49"><expr pos:start="83:26" pos:end="83:49"><literal type="string" pos:start="83:26" pos:end="83:49">" %63s = \"%1023[^\"]\""</literal></expr></argument>, <argument pos:start="83:52" pos:end="83:54"><expr pos:start="83:52" pos:end="83:54"><name pos:start="83:52" pos:end="83:54">arg</name></expr></argument>, <argument pos:start="83:57" pos:end="83:61"><expr pos:start="83:57" pos:end="83:61"><name pos:start="83:57" pos:end="83:61">value</name></expr></argument>)</argument_list></call> <operator pos:start="83:64" pos:end="83:65">==</operator> <literal type="number" pos:start="83:67" pos:end="83:67">2</literal> <operator pos:start="83:69" pos:end="83:70">||</operator>

            <call pos:start="85:13" pos:end="85:45"><name pos:start="85:13" pos:end="85:18">sscanf</name><argument_list pos:start="85:19" pos:end="85:45">(<argument pos:start="85:20" pos:end="85:23"><expr pos:start="85:20" pos:end="85:23"><name pos:start="85:20" pos:end="85:23">line</name></expr></argument>, <argument pos:start="85:26" pos:end="85:39"><expr pos:start="85:26" pos:end="85:39"><literal type="string" pos:start="85:26" pos:end="85:39">" %63s = \"\""</literal></expr></argument>, <argument pos:start="85:42" pos:end="85:44"><expr pos:start="85:42" pos:end="85:44"><name pos:start="85:42" pos:end="85:44">arg</name></expr></argument>)</argument_list></call> <operator pos:start="85:47" pos:end="85:48">==</operator> <literal type="number" pos:start="85:50" pos:end="85:50">1</literal></expr>)</condition> <block pos:start="85:53" pos:end="109:9">{<block_content pos:start="89:13" pos:end="107:21">

            <comment type="block" pos:start="87:13" pos:end="87:29">/* arg = value */</comment>

            <if_stmt pos:start="89:13" pos:end="95:13"><if pos:start="89:13" pos:end="95:13">if <condition pos:start="89:16" pos:end="89:29">(<expr pos:start="89:17" pos:end="89:28"><name pos:start="89:17" pos:end="89:20">opts</name> <operator pos:start="89:22" pos:end="89:23">==</operator> <name pos:start="89:25" pos:end="89:28">NULL</name></expr>)</condition> <block pos:start="89:31" pos:end="95:13">{<block_content pos:start="91:17" pos:end="93:25">

                <expr_stmt pos:start="91:17" pos:end="91:49"><expr pos:start="91:17" pos:end="91:48"><call pos:start="91:17" pos:end="91:48"><name pos:start="91:17" pos:end="91:28">error_report</name><argument_list pos:start="91:29" pos:end="91:48">(<argument pos:start="91:30" pos:end="91:47"><expr pos:start="91:30" pos:end="91:47"><literal type="string" pos:start="91:30" pos:end="91:47">"no group defined"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="93:17" pos:end="93:25">goto <name pos:start="93:22" pos:end="93:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:55"><expr pos:start="97:13" pos:end="97:54"><call pos:start="97:13" pos:end="97:54"><name pos:start="97:13" pos:end="97:24">qemu_opt_set</name><argument_list pos:start="97:25" pos:end="97:54">(<argument pos:start="97:26" pos:end="97:29"><expr pos:start="97:26" pos:end="97:29"><name pos:start="97:26" pos:end="97:29">opts</name></expr></argument>, <argument pos:start="97:32" pos:end="97:34"><expr pos:start="97:32" pos:end="97:34"><name pos:start="97:32" pos:end="97:34">arg</name></expr></argument>, <argument pos:start="97:37" pos:end="97:41"><expr pos:start="97:37" pos:end="97:41"><name pos:start="97:37" pos:end="97:41">value</name></expr></argument>, <argument pos:start="97:44" pos:end="97:53"><expr pos:start="97:44" pos:end="97:53"><operator pos:start="97:44" pos:end="97:44">&amp;</operator><name pos:start="97:45" pos:end="97:53">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="99:13" pos:end="105:13"><if pos:start="99:13" pos:end="105:13">if <condition pos:start="99:16" pos:end="99:26">(<expr pos:start="99:17" pos:end="99:25"><name pos:start="99:17" pos:end="99:25">local_err</name></expr>)</condition> <block pos:start="99:28" pos:end="105:13">{<block_content pos:start="101:17" pos:end="103:25">

                <expr_stmt pos:start="101:17" pos:end="101:44"><expr pos:start="101:17" pos:end="101:43"><call pos:start="101:17" pos:end="101:43"><name pos:start="101:17" pos:end="101:32">error_report_err</name><argument_list pos:start="101:33" pos:end="101:43">(<argument pos:start="101:34" pos:end="101:42"><expr pos:start="101:34" pos:end="101:42"><name pos:start="101:34" pos:end="101:42">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="103:17" pos:end="103:25">goto <name pos:start="103:22" pos:end="103:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <continue pos:start="107:13" pos:end="107:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:36"><expr pos:start="111:9" pos:end="111:35"><call pos:start="111:9" pos:end="111:35"><name pos:start="111:9" pos:end="111:20">error_report</name><argument_list pos:start="111:21" pos:end="111:35">(<argument pos:start="111:22" pos:end="111:34"><expr pos:start="111:22" pos:end="111:34"><literal type="string" pos:start="111:22" pos:end="111:34">"parse error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="113:9" pos:end="113:17">goto <name pos:start="113:14" pos:end="113:16">out</name>;</goto>

    </block_content>}</block></while>

    <if_stmt pos:start="117:5" pos:end="123:5"><if pos:start="117:5" pos:end="123:5">if <condition pos:start="117:8" pos:end="117:19">(<expr pos:start="117:9" pos:end="117:18"><call pos:start="117:9" pos:end="117:18"><name pos:start="117:9" pos:end="117:14">ferror</name><argument_list pos:start="117:15" pos:end="117:18">(<argument pos:start="117:16" pos:end="117:17"><expr pos:start="117:16" pos:end="117:17"><name pos:start="117:16" pos:end="117:17">fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="117:21" pos:end="123:5">{<block_content pos:start="119:9" pos:end="121:17">

        <expr_stmt pos:start="119:9" pos:end="119:43"><expr pos:start="119:9" pos:end="119:42"><call pos:start="119:9" pos:end="119:42"><name pos:start="119:9" pos:end="119:20">error_report</name><argument_list pos:start="119:21" pos:end="119:42">(<argument pos:start="119:22" pos:end="119:41"><expr pos:start="119:22" pos:end="119:41"><literal type="string" pos:start="119:22" pos:end="119:41">"error reading file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="121:9" pos:end="121:17">goto <name pos:start="121:14" pos:end="121:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:12"><expr pos:start="125:5" pos:end="125:11"><name pos:start="125:5" pos:end="125:7">res</name> <operator pos:start="125:9" pos:end="125:9">=</operator> <literal type="number" pos:start="125:11" pos:end="125:11">0</literal></expr>;</expr_stmt>

<label pos:start="127:1" pos:end="127:4"><name pos:start="127:1" pos:end="127:3">out</name>:</label>

    <expr_stmt pos:start="129:5" pos:end="129:18"><expr pos:start="129:5" pos:end="129:17"><call pos:start="129:5" pos:end="129:17"><name pos:start="129:5" pos:end="129:11">loc_pop</name><argument_list pos:start="129:12" pos:end="129:17">(<argument pos:start="129:13" pos:end="129:16"><expr pos:start="129:13" pos:end="129:16"><operator pos:start="129:13" pos:end="129:13">&amp;</operator><name pos:start="129:14" pos:end="129:16">loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="131:5" pos:end="131:15">return <expr pos:start="131:12" pos:end="131:14"><name pos:start="131:12" pos:end="131:14">res</name></expr>;</return>

</block_content>}</block></function>
</unit>
