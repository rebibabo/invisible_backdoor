<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13845.c" pos:tabs="8"><function pos:start="1:1" pos:end="247:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">handle_alloc</name><parameter_list pos:start="1:24" pos:end="3:59">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:44"><name pos:start="1:25" pos:end="1:40">BlockDriverState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">bs</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:67"><decl pos:start="1:47" pos:end="1:67"><type pos:start="1:47" pos:end="1:67"><name pos:start="1:47" pos:end="1:54">uint64_t</name></type> <name pos:start="1:56" pos:end="1:67">guest_offset</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:25"><decl pos:start="3:5" pos:end="3:25"><type pos:start="3:5" pos:end="3:25"><name pos:start="3:5" pos:end="3:12">uint64_t</name> <modifier pos:start="3:14" pos:end="3:14">*</modifier></type><name pos:start="3:15" pos:end="3:25">host_offset</name></decl></parameter>, <parameter pos:start="3:28" pos:end="3:42"><decl pos:start="3:28" pos:end="3:42"><type pos:start="3:28" pos:end="3:42"><name pos:start="3:28" pos:end="3:35">uint64_t</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:42">bytes</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:58"><decl pos:start="3:45" pos:end="3:58"><type pos:start="3:45" pos:end="3:58"><name pos:start="3:45" pos:end="3:54">QCowL2Meta</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier><modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:58">m</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="247:1">{<block_content pos:start="7:5" pos:end="245:15">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">l2_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">uint64_t</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:22">l2_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:18">entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:28">nb_clusters</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>



    <decl_stmt pos:start="21:5" pos:end="21:34"><decl pos:start="21:5" pos:end="21:33"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:33">alloc_cluster_offset</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="27:37"><expr pos:start="25:5" pos:end="27:36"><call pos:start="25:5" pos:end="27:36"><name pos:start="25:5" pos:end="25:28">trace_qcow2_handle_alloc</name><argument_list pos:start="25:29" pos:end="27:36">(<argument pos:start="25:30" pos:end="25:50"><expr pos:start="25:30" pos:end="25:50"><call pos:start="25:30" pos:end="25:50"><name pos:start="25:30" pos:end="25:48">qemu_coroutine_self</name><argument_list pos:start="25:49" pos:end="25:50">()</argument_list></call></expr></argument>, <argument pos:start="25:53" pos:end="25:64"><expr pos:start="25:53" pos:end="25:64"><name pos:start="25:53" pos:end="25:64">guest_offset</name></expr></argument>, <argument pos:start="25:67" pos:end="25:78"><expr pos:start="25:67" pos:end="25:78"><operator pos:start="25:67" pos:end="25:67">*</operator><name pos:start="25:68" pos:end="25:78">host_offset</name></expr></argument>,

                             <argument pos:start="27:30" pos:end="27:35"><expr pos:start="27:30" pos:end="27:35"><operator pos:start="27:30" pos:end="27:30">*</operator><name pos:start="27:31" pos:end="27:35">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:23"><expr pos:start="29:5" pos:end="29:22"><call pos:start="29:5" pos:end="29:22"><name pos:start="29:5" pos:end="29:10">assert</name><argument_list pos:start="29:11" pos:end="29:22">(<argument pos:start="29:12" pos:end="29:21"><expr pos:start="29:12" pos:end="29:21"><operator pos:start="29:12" pos:end="29:12">*</operator><name pos:start="29:13" pos:end="29:17">bytes</name> <operator pos:start="29:19" pos:end="29:19">&gt;</operator> <literal type="number" pos:start="29:21" pos:end="29:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="39:7">/*

     * Calculate the number of clusters to look for. We stop at L2 table

     * boundaries to keep things simple.

     */</comment>

    <expr_stmt pos:start="41:5" pos:end="43:75"><expr pos:start="41:5" pos:end="43:74"><name pos:start="41:5" pos:end="41:15">nb_clusters</name> <operator pos:start="41:17" pos:end="41:17">=</operator>

        <call pos:start="43:9" pos:end="43:74"><name pos:start="43:9" pos:end="43:24">size_to_clusters</name><argument_list pos:start="43:25" pos:end="43:74">(<argument pos:start="43:26" pos:end="43:26"><expr pos:start="43:26" pos:end="43:26"><name pos:start="43:26" pos:end="43:26">s</name></expr></argument>, <argument pos:start="43:29" pos:end="43:73"><expr pos:start="43:29" pos:end="43:73"><call pos:start="43:29" pos:end="43:64"><name pos:start="43:29" pos:end="43:47">offset_into_cluster</name><argument_list pos:start="43:48" pos:end="43:64">(<argument pos:start="43:49" pos:end="43:49"><expr pos:start="43:49" pos:end="43:49"><name pos:start="43:49" pos:end="43:49">s</name></expr></argument>, <argument pos:start="43:52" pos:end="43:63"><expr pos:start="43:52" pos:end="43:63"><name pos:start="43:52" pos:end="43:63">guest_offset</name></expr></argument>)</argument_list></call> <operator pos:start="43:66" pos:end="43:66">+</operator> <operator pos:start="43:68" pos:end="43:68">*</operator><name pos:start="43:69" pos:end="43:73">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:51"><expr pos:start="47:5" pos:end="47:50"><name pos:start="47:5" pos:end="47:12">l2_index</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <call pos:start="47:16" pos:end="47:50"><name pos:start="47:16" pos:end="47:33">offset_to_l2_index</name><argument_list pos:start="47:34" pos:end="47:50">(<argument pos:start="47:35" pos:end="47:35"><expr pos:start="47:35" pos:end="47:35"><name pos:start="47:35" pos:end="47:35">s</name></expr></argument>, <argument pos:start="47:38" pos:end="47:49"><expr pos:start="47:38" pos:end="47:49"><name pos:start="47:38" pos:end="47:49">guest_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:58"><expr pos:start="49:5" pos:end="49:57"><name pos:start="49:5" pos:end="49:15">nb_clusters</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <call pos:start="49:19" pos:end="49:57"><name pos:start="49:19" pos:end="49:21">MIN</name><argument_list pos:start="49:22" pos:end="49:57">(<argument pos:start="49:23" pos:end="49:33"><expr pos:start="49:23" pos:end="49:33"><name pos:start="49:23" pos:end="49:33">nb_clusters</name></expr></argument>, <argument pos:start="49:36" pos:end="49:56"><expr pos:start="49:36" pos:end="49:56"><name pos:start="49:36" pos:end="49:45"><name pos:start="49:36" pos:end="49:36">s</name><operator pos:start="49:37" pos:end="49:38">-&gt;</operator><name pos:start="49:39" pos:end="49:45">l2_size</name></name> <operator pos:start="49:47" pos:end="49:47">-</operator> <name pos:start="49:49" pos:end="49:56">l2_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:54">/* Find L2 entry for the first involved cluster */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:68"><expr pos:start="55:5" pos:end="55:67"><name pos:start="55:5" pos:end="55:7">ret</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="55:67"><name pos:start="55:11" pos:end="55:27">get_cluster_table</name><argument_list pos:start="55:28" pos:end="55:67">(<argument pos:start="55:29" pos:end="55:30"><expr pos:start="55:29" pos:end="55:30"><name pos:start="55:29" pos:end="55:30">bs</name></expr></argument>, <argument pos:start="55:33" pos:end="55:44"><expr pos:start="55:33" pos:end="55:44"><name pos:start="55:33" pos:end="55:44">guest_offset</name></expr></argument>, <argument pos:start="55:47" pos:end="55:55"><expr pos:start="55:47" pos:end="55:55"><operator pos:start="55:47" pos:end="55:47">&amp;</operator><name pos:start="55:48" pos:end="55:55">l2_table</name></expr></argument>, <argument pos:start="55:58" pos:end="55:66"><expr pos:start="55:58" pos:end="55:66"><operator pos:start="55:58" pos:end="55:58">&amp;</operator><name pos:start="55:59" pos:end="55:66">l2_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:16">(<expr pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">&lt;</operator> <literal type="number" pos:start="57:15" pos:end="57:15">0</literal></expr>)</condition> <block pos:start="57:18" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:19">

        <return pos:start="59:9" pos:end="59:19">return <expr pos:start="59:16" pos:end="59:18"><name pos:start="59:16" pos:end="59:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:44"><expr pos:start="65:5" pos:end="65:43"><name pos:start="65:5" pos:end="65:9">entry</name> <operator pos:start="65:11" pos:end="65:11">=</operator> <call pos:start="65:13" pos:end="65:43"><name pos:start="65:13" pos:end="65:23">be64_to_cpu</name><argument_list pos:start="65:24" pos:end="65:43">(<argument pos:start="65:25" pos:end="65:42"><expr pos:start="65:25" pos:end="65:42"><name pos:start="65:25" pos:end="65:42"><name pos:start="65:25" pos:end="65:32">l2_table</name><index pos:start="65:33" pos:end="65:42">[<expr pos:start="65:34" pos:end="65:41"><name pos:start="65:34" pos:end="65:41">l2_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="69:5" pos:end="69:66">/* For the moment, overwrite compressed clusters one by one */</comment>

    <if_stmt pos:start="71:5" pos:end="79:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:38">(<expr pos:start="71:9" pos:end="71:37"><name pos:start="71:9" pos:end="71:13">entry</name> <operator pos:start="71:15" pos:end="71:15">&amp;</operator> <name pos:start="71:17" pos:end="71:37">QCOW_OFLAG_COMPRESSED</name></expr>)</condition> <block pos:start="71:40" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:24">

        <expr_stmt pos:start="73:9" pos:end="73:24"><expr pos:start="73:9" pos:end="73:23"><name pos:start="73:9" pos:end="73:19">nb_clusters</name> <operator pos:start="73:21" pos:end="73:21">=</operator> <literal type="number" pos:start="73:23" pos:end="73:23">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="75:7" pos:end="79:5">else <block pos:start="75:12" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:77">

        <expr_stmt pos:start="77:9" pos:end="77:77"><expr pos:start="77:9" pos:end="77:76"><name pos:start="77:9" pos:end="77:19">nb_clusters</name> <operator pos:start="77:21" pos:end="77:21">=</operator> <call pos:start="77:23" pos:end="77:76"><name pos:start="77:23" pos:end="77:40">count_cow_clusters</name><argument_list pos:start="77:41" pos:end="77:76">(<argument pos:start="77:42" pos:end="77:42"><expr pos:start="77:42" pos:end="77:42"><name pos:start="77:42" pos:end="77:42">s</name></expr></argument>, <argument pos:start="77:45" pos:end="77:55"><expr pos:start="77:45" pos:end="77:55"><name pos:start="77:45" pos:end="77:55">nb_clusters</name></expr></argument>, <argument pos:start="77:58" pos:end="77:65"><expr pos:start="77:58" pos:end="77:65"><name pos:start="77:58" pos:end="77:65">l2_table</name></expr></argument>, <argument pos:start="77:68" pos:end="77:75"><expr pos:start="77:68" pos:end="77:75"><name pos:start="77:68" pos:end="77:75">l2_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:69"><expr pos:start="83:5" pos:end="83:68"><name pos:start="83:5" pos:end="83:7">ret</name> <operator pos:start="83:9" pos:end="83:9">=</operator> <call pos:start="83:11" pos:end="83:68"><name pos:start="83:11" pos:end="83:25">qcow2_cache_put</name><argument_list pos:start="83:26" pos:end="83:68">(<argument pos:start="83:27" pos:end="83:28"><expr pos:start="83:27" pos:end="83:28"><name pos:start="83:27" pos:end="83:28">bs</name></expr></argument>, <argument pos:start="83:31" pos:end="83:47"><expr pos:start="83:31" pos:end="83:47"><name pos:start="83:31" pos:end="83:47"><name pos:start="83:31" pos:end="83:31">s</name><operator pos:start="83:32" pos:end="83:33">-&gt;</operator><name pos:start="83:34" pos:end="83:47">l2_table_cache</name></name></expr></argument>, <argument pos:start="83:50" pos:end="83:67"><expr pos:start="83:50" pos:end="83:67"><operator pos:start="83:50" pos:end="83:50">(</operator><name pos:start="83:51" pos:end="83:54">void</name><operator pos:start="83:55" pos:end="83:55">*</operator><operator pos:start="83:56" pos:end="83:56">*</operator><operator pos:start="83:57" pos:end="83:57">)</operator> <operator pos:start="83:59" pos:end="83:59">&amp;</operator><name pos:start="83:60" pos:end="83:67">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:16">(<expr pos:start="85:9" pos:end="85:15"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">&lt;</operator> <literal type="number" pos:start="85:15" pos:end="85:15">0</literal></expr>)</condition> <block pos:start="85:18" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:19">

        <return pos:start="87:9" pos:end="87:19">return <expr pos:start="87:16" pos:end="87:18"><name pos:start="87:16" pos:end="87:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="93:5" pos:end="99:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:25">(<expr pos:start="93:9" pos:end="93:24"><name pos:start="93:9" pos:end="93:19">nb_clusters</name> <operator pos:start="93:21" pos:end="93:22">==</operator> <literal type="number" pos:start="93:24" pos:end="93:24">0</literal></expr>)</condition> <block pos:start="93:27" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:17">

        <expr_stmt pos:start="95:9" pos:end="95:19"><expr pos:start="95:9" pos:end="95:18"><operator pos:start="95:9" pos:end="95:9">*</operator><name pos:start="95:10" pos:end="95:14">bytes</name> <operator pos:start="95:16" pos:end="95:16">=</operator> <literal type="number" pos:start="95:18" pos:end="95:18">0</literal></expr>;</expr_stmt>

        <return pos:start="97:9" pos:end="97:17">return <expr pos:start="97:16" pos:end="97:16"><literal type="number" pos:start="97:16" pos:end="97:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="103:5" pos:end="103:68">/* Allocate, if necessary at a given offset in the image file */</comment>

    <expr_stmt pos:start="105:5" pos:end="105:61"><expr pos:start="105:5" pos:end="105:60"><name pos:start="105:5" pos:end="105:24">alloc_cluster_offset</name> <operator pos:start="105:26" pos:end="105:26">=</operator> <call pos:start="105:28" pos:end="105:60"><name pos:start="105:28" pos:end="105:43">start_of_cluster</name><argument_list pos:start="105:44" pos:end="105:60">(<argument pos:start="105:45" pos:end="105:45"><expr pos:start="105:45" pos:end="105:45"><name pos:start="105:45" pos:end="105:45">s</name></expr></argument>, <argument pos:start="105:48" pos:end="105:59"><expr pos:start="105:48" pos:end="105:59"><operator pos:start="105:48" pos:end="105:48">*</operator><name pos:start="105:49" pos:end="105:59">host_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="109:48"><expr pos:start="107:5" pos:end="109:47"><name pos:start="107:5" pos:end="107:7">ret</name> <operator pos:start="107:9" pos:end="107:9">=</operator> <call pos:start="107:11" pos:end="109:47"><name pos:start="107:11" pos:end="107:33">do_alloc_cluster_offset</name><argument_list pos:start="107:34" pos:end="109:47">(<argument pos:start="107:35" pos:end="107:36"><expr pos:start="107:35" pos:end="107:36"><name pos:start="107:35" pos:end="107:36">bs</name></expr></argument>, <argument pos:start="107:39" pos:end="107:50"><expr pos:start="107:39" pos:end="107:50"><name pos:start="107:39" pos:end="107:50">guest_offset</name></expr></argument>, <argument pos:start="107:53" pos:end="107:73"><expr pos:start="107:53" pos:end="107:73"><operator pos:start="107:53" pos:end="107:53">&amp;</operator><name pos:start="107:54" pos:end="107:73">alloc_cluster_offset</name></expr></argument>,

                                  <argument pos:start="109:35" pos:end="109:46"><expr pos:start="109:35" pos:end="109:46"><operator pos:start="109:35" pos:end="109:35">&amp;</operator><name pos:start="109:36" pos:end="109:46">nb_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="111:5" pos:end="115:5"><if pos:start="111:5" pos:end="115:5">if <condition pos:start="111:8" pos:end="111:16">(<expr pos:start="111:9" pos:end="111:15"><name pos:start="111:9" pos:end="111:11">ret</name> <operator pos:start="111:13" pos:end="111:13">&lt;</operator> <literal type="number" pos:start="111:15" pos:end="111:15">0</literal></expr>)</condition> <block pos:start="111:18" pos:end="115:5">{<block_content pos:start="113:9" pos:end="113:18">

        <goto pos:start="113:9" pos:end="113:18">goto <name pos:start="113:14" pos:end="113:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="119:5" pos:end="119:44">/* Can't extend contiguous allocation */</comment>

    <if_stmt pos:start="121:5" pos:end="127:5"><if pos:start="121:5" pos:end="127:5">if <condition pos:start="121:8" pos:end="121:25">(<expr pos:start="121:9" pos:end="121:24"><name pos:start="121:9" pos:end="121:19">nb_clusters</name> <operator pos:start="121:21" pos:end="121:22">==</operator> <literal type="number" pos:start="121:24" pos:end="121:24">0</literal></expr>)</condition> <block pos:start="121:27" pos:end="127:5">{<block_content pos:start="123:9" pos:end="125:17">

        <expr_stmt pos:start="123:9" pos:end="123:19"><expr pos:start="123:9" pos:end="123:18"><operator pos:start="123:9" pos:end="123:9">*</operator><name pos:start="123:10" pos:end="123:14">bytes</name> <operator pos:start="123:16" pos:end="123:16">=</operator> <literal type="number" pos:start="123:18" pos:end="123:18">0</literal></expr>;</expr_stmt>

        <return pos:start="125:9" pos:end="125:17">return <expr pos:start="125:16" pos:end="125:16"><literal type="number" pos:start="125:16" pos:end="125:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="131:5" pos:end="157:7">/*

     * Save info needed for meta data update.

     *

     * requested_sectors: Number of sectors from the start of the first

     * newly allocated cluster to the end of the (possibly shortened

     * before) write request.

     *

     * avail_sectors: Number of sectors from the start of the first

     * newly allocated to the end of the last newly allocated cluster.

     *

     * nb_sectors: The number of sectors from the start of the first

     * newly allocated cluster to the end of the area that the write

     * request actually writes to (excluding COW at the end)

     */</comment>

    <decl_stmt pos:start="159:5" pos:end="163:28"><decl pos:start="159:5" pos:end="163:27"><type pos:start="159:5" pos:end="159:7"><name pos:start="159:5" pos:end="159:7">int</name></type> <name pos:start="159:9" pos:end="159:25">requested_sectors</name> <init pos:start="159:27" pos:end="163:27">=

        <expr pos:start="161:9" pos:end="163:27"><operator pos:start="161:9" pos:end="161:9">(</operator><operator pos:start="161:10" pos:end="161:10">*</operator><name pos:start="161:11" pos:end="161:15">bytes</name> <operator pos:start="161:17" pos:end="161:17">+</operator> <call pos:start="161:19" pos:end="161:54"><name pos:start="161:19" pos:end="161:37">offset_into_cluster</name><argument_list pos:start="161:38" pos:end="161:54">(<argument pos:start="161:39" pos:end="161:39"><expr pos:start="161:39" pos:end="161:39"><name pos:start="161:39" pos:end="161:39">s</name></expr></argument>, <argument pos:start="161:42" pos:end="161:53"><expr pos:start="161:42" pos:end="161:53"><name pos:start="161:42" pos:end="161:53">guest_offset</name></expr></argument>)</argument_list></call><operator pos:start="161:55" pos:end="161:55">)</operator>

        <operator pos:start="163:9" pos:end="163:10">&gt;&gt;</operator> <name pos:start="163:12" pos:end="163:27">BDRV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="165:5" pos:end="167:64"><decl pos:start="165:5" pos:end="167:63"><type pos:start="165:5" pos:end="165:7"><name pos:start="165:5" pos:end="165:7">int</name></type> <name pos:start="165:9" pos:end="165:21">avail_sectors</name> <init pos:start="165:23" pos:end="167:63">= <expr pos:start="165:25" pos:end="167:63"><name pos:start="165:25" pos:end="165:35">nb_clusters</name>

                        <operator pos:start="167:25" pos:end="167:26">&lt;&lt;</operator> <operator pos:start="167:28" pos:end="167:28">(</operator><name pos:start="167:29" pos:end="167:43"><name pos:start="167:29" pos:end="167:29">s</name><operator pos:start="167:30" pos:end="167:31">-&gt;</operator><name pos:start="167:32" pos:end="167:43">cluster_bits</name></name> <operator pos:start="167:45" pos:end="167:45">-</operator> <name pos:start="167:47" pos:end="167:62">BDRV_SECTOR_BITS</name><operator pos:start="167:63" pos:end="167:63">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="169:5" pos:end="171:44"><decl pos:start="169:5" pos:end="171:43"><type pos:start="169:5" pos:end="169:7"><name pos:start="169:5" pos:end="169:7">int</name></type> <name pos:start="169:9" pos:end="169:21">alloc_n_start</name> <init pos:start="169:23" pos:end="171:43">= <expr pos:start="169:25" pos:end="171:43"><call pos:start="169:25" pos:end="169:60"><name pos:start="169:25" pos:end="169:43">offset_into_cluster</name><argument_list pos:start="169:44" pos:end="169:60">(<argument pos:start="169:45" pos:end="169:45"><expr pos:start="169:45" pos:end="169:45"><name pos:start="169:45" pos:end="169:45">s</name></expr></argument>, <argument pos:start="169:48" pos:end="169:59"><expr pos:start="169:48" pos:end="169:59"><name pos:start="169:48" pos:end="169:59">guest_offset</name></expr></argument>)</argument_list></call>

                        <operator pos:start="171:25" pos:end="171:26">&gt;&gt;</operator> <name pos:start="171:28" pos:end="171:43">BDRV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="173:5" pos:end="173:59"><decl pos:start="173:5" pos:end="173:58"><type pos:start="173:5" pos:end="173:7"><name pos:start="173:5" pos:end="173:7">int</name></type> <name pos:start="173:9" pos:end="173:18">nb_sectors</name> <init pos:start="173:20" pos:end="173:58">= <expr pos:start="173:22" pos:end="173:58"><call pos:start="173:22" pos:end="173:58"><name pos:start="173:22" pos:end="173:24">MIN</name><argument_list pos:start="173:25" pos:end="173:58">(<argument pos:start="173:26" pos:end="173:42"><expr pos:start="173:26" pos:end="173:42"><name pos:start="173:26" pos:end="173:42">requested_sectors</name></expr></argument>, <argument pos:start="173:45" pos:end="173:57"><expr pos:start="173:45" pos:end="173:57"><name pos:start="173:45" pos:end="173:57">avail_sectors</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="175:5" pos:end="175:27"><decl pos:start="175:5" pos:end="175:26"><type pos:start="175:5" pos:end="175:16"><name pos:start="175:5" pos:end="175:14">QCowL2Meta</name> <modifier pos:start="175:16" pos:end="175:16">*</modifier></type><name pos:start="175:17" pos:end="175:21">old_m</name> <init pos:start="175:23" pos:end="175:26">= <expr pos:start="175:25" pos:end="175:26"><operator pos:start="175:25" pos:end="175:25">*</operator><name pos:start="175:26" pos:end="175:26">m</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="179:5" pos:end="179:32"><expr pos:start="179:5" pos:end="179:31"><operator pos:start="179:5" pos:end="179:5">*</operator><name pos:start="179:6" pos:end="179:6">m</name> <operator pos:start="179:8" pos:end="179:8">=</operator> <call pos:start="179:10" pos:end="179:31"><name pos:start="179:10" pos:end="179:18">g_malloc0</name><argument_list pos:start="179:19" pos:end="179:31">(<argument pos:start="179:20" pos:end="179:30"><expr pos:start="179:20" pos:end="179:30"><sizeof pos:start="179:20" pos:end="179:30">sizeof<argument_list pos:start="179:26" pos:end="179:30">(<argument pos:start="179:27" pos:end="179:29"><expr pos:start="179:27" pos:end="179:29"><operator pos:start="179:27" pos:end="179:27">*</operator><operator pos:start="179:28" pos:end="179:28">*</operator><name pos:start="179:29" pos:end="179:29">m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="183:5" pos:end="215:6"><expr pos:start="183:5" pos:end="215:5"><operator pos:start="183:5" pos:end="183:5">*</operator><operator pos:start="183:6" pos:end="183:6">*</operator><name pos:start="183:7" pos:end="183:7">m</name> <operator pos:start="183:9" pos:end="183:9">=</operator> <operator pos:start="183:11" pos:end="183:11">(</operator><name pos:start="183:12" pos:end="183:21">QCowL2Meta</name><operator pos:start="183:22" pos:end="183:22">)</operator> <block pos:start="183:24" pos:end="215:5">{

        <expr pos:start="185:9" pos:end="185:31"><operator pos:start="185:9" pos:end="185:9">.</operator><name pos:start="185:10" pos:end="185:13">next</name>           <operator pos:start="185:25" pos:end="185:25">=</operator> <name pos:start="185:27" pos:end="185:31">old_m</name></expr>,



        <expr pos:start="189:9" pos:end="189:46"><operator pos:start="189:9" pos:end="189:9">.</operator><name pos:start="189:10" pos:end="189:21">alloc_offset</name>   <operator pos:start="189:25" pos:end="189:25">=</operator> <name pos:start="189:27" pos:end="189:46">alloc_cluster_offset</name></expr>,

        <expr pos:start="191:9" pos:end="191:59"><operator pos:start="191:9" pos:end="191:9">.</operator><name pos:start="191:10" pos:end="191:15">offset</name>         <operator pos:start="191:25" pos:end="191:25">=</operator> <call pos:start="191:27" pos:end="191:59"><name pos:start="191:27" pos:end="191:42">start_of_cluster</name><argument_list pos:start="191:43" pos:end="191:59">(<argument pos:start="191:44" pos:end="191:44"><expr pos:start="191:44" pos:end="191:44"><name pos:start="191:44" pos:end="191:44">s</name></expr></argument>, <argument pos:start="191:47" pos:end="191:58"><expr pos:start="191:47" pos:end="191:58"><name pos:start="191:47" pos:end="191:58">guest_offset</name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="193:9" pos:end="193:37"><operator pos:start="193:9" pos:end="193:9">.</operator><name pos:start="193:10" pos:end="193:20">nb_clusters</name>    <operator pos:start="193:25" pos:end="193:25">=</operator> <name pos:start="193:27" pos:end="193:37">nb_clusters</name></expr>,

        <expr pos:start="195:9" pos:end="195:36"><operator pos:start="195:9" pos:end="195:9">.</operator><name pos:start="195:10" pos:end="195:21">nb_available</name>   <operator pos:start="195:25" pos:end="195:25">=</operator> <name pos:start="195:27" pos:end="195:36">nb_sectors</name></expr>,



        <expr pos:start="199:9" pos:end="205:9"><operator pos:start="199:9" pos:end="199:9">.</operator><name pos:start="199:10" pos:end="199:18">cow_start</name> <operator pos:start="199:20" pos:end="199:20">=</operator> <block pos:start="199:22" pos:end="205:9">{

            <expr pos:start="201:13" pos:end="201:27"><operator pos:start="201:13" pos:end="201:13">.</operator><name pos:start="201:14" pos:end="201:19">offset</name>     <operator pos:start="201:25" pos:end="201:25">=</operator> <literal type="number" pos:start="201:27" pos:end="201:27">0</literal></expr>,

            <expr pos:start="203:13" pos:end="203:39"><operator pos:start="203:13" pos:end="203:13">.</operator><name pos:start="203:14" pos:end="203:23">nb_sectors</name> <operator pos:start="203:25" pos:end="203:25">=</operator> <name pos:start="203:27" pos:end="203:39">alloc_n_start</name></expr>,

        }</block></expr>,

        <expr pos:start="207:9" pos:end="213:9"><operator pos:start="207:9" pos:end="207:9">.</operator><name pos:start="207:10" pos:end="207:16">cow_end</name> <operator pos:start="207:18" pos:end="207:18">=</operator> <block pos:start="207:20" pos:end="213:9">{

            <expr pos:start="209:13" pos:end="209:55"><operator pos:start="209:13" pos:end="209:13">.</operator><name pos:start="209:14" pos:end="209:19">offset</name>     <operator pos:start="209:25" pos:end="209:25">=</operator> <name pos:start="209:27" pos:end="209:36">nb_sectors</name> <operator pos:start="209:38" pos:end="209:38">*</operator> <name pos:start="209:40" pos:end="209:55">BDRV_SECTOR_SIZE</name></expr>,

            <expr pos:start="211:13" pos:end="211:52"><operator pos:start="211:13" pos:end="211:13">.</operator><name pos:start="211:14" pos:end="211:23">nb_sectors</name> <operator pos:start="211:25" pos:end="211:25">=</operator> <name pos:start="211:27" pos:end="211:39">avail_sectors</name> <operator pos:start="211:41" pos:end="211:41">-</operator> <name pos:start="211:43" pos:end="211:52">nb_sectors</name></expr>,

        }</block></expr>,

    }</block></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:50"><expr pos:start="217:5" pos:end="217:49"><call pos:start="217:5" pos:end="217:49"><name pos:start="217:5" pos:end="217:22">qemu_co_queue_init</name><argument_list pos:start="217:23" pos:end="217:49">(<argument pos:start="217:24" pos:end="217:48"><expr pos:start="217:24" pos:end="217:48"><operator pos:start="217:24" pos:end="217:24">&amp;</operator><name pos:start="217:25" pos:end="217:48"><operator pos:start="217:25" pos:end="217:25">(</operator><operator pos:start="217:26" pos:end="217:26">*</operator><name pos:start="217:27" pos:end="217:27">m</name><operator pos:start="217:28" pos:end="217:28">)</operator><operator pos:start="217:29" pos:end="217:30">-&gt;</operator><name pos:start="217:31" pos:end="217:48">dependent_requests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:62"><expr pos:start="219:5" pos:end="219:61"><call pos:start="219:5" pos:end="219:61"><name pos:start="219:5" pos:end="219:21">QLIST_INSERT_HEAD</name><argument_list pos:start="219:22" pos:end="219:61">(<argument pos:start="219:23" pos:end="219:40"><expr pos:start="219:23" pos:end="219:40"><operator pos:start="219:23" pos:end="219:23">&amp;</operator><name pos:start="219:24" pos:end="219:40"><name pos:start="219:24" pos:end="219:24">s</name><operator pos:start="219:25" pos:end="219:26">-&gt;</operator><name pos:start="219:27" pos:end="219:40">cluster_allocs</name></name></expr></argument>, <argument pos:start="219:43" pos:end="219:44"><expr pos:start="219:43" pos:end="219:44"><operator pos:start="219:43" pos:end="219:43">*</operator><name pos:start="219:44" pos:end="219:44">m</name></expr></argument>, <argument pos:start="219:47" pos:end="219:60"><expr pos:start="219:47" pos:end="219:60"><name pos:start="219:47" pos:end="219:60">next_in_flight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="223:5" pos:end="223:79"><expr pos:start="223:5" pos:end="223:78"><operator pos:start="223:5" pos:end="223:5">*</operator><name pos:start="223:6" pos:end="223:16">host_offset</name> <operator pos:start="223:18" pos:end="223:18">=</operator> <name pos:start="223:20" pos:end="223:39">alloc_cluster_offset</name> <operator pos:start="223:41" pos:end="223:41">+</operator> <call pos:start="223:43" pos:end="223:78"><name pos:start="223:43" pos:end="223:61">offset_into_cluster</name><argument_list pos:start="223:62" pos:end="223:78">(<argument pos:start="223:63" pos:end="223:63"><expr pos:start="223:63" pos:end="223:63"><name pos:start="223:63" pos:end="223:63">s</name></expr></argument>, <argument pos:start="223:66" pos:end="223:77"><expr pos:start="223:66" pos:end="223:77"><name pos:start="223:66" pos:end="223:77">guest_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="227:65"><expr pos:start="225:5" pos:end="227:64"><operator pos:start="225:5" pos:end="225:5">*</operator><name pos:start="225:6" pos:end="225:10">bytes</name> <operator pos:start="225:12" pos:end="225:12">=</operator> <call pos:start="225:14" pos:end="227:64"><name pos:start="225:14" pos:end="225:16">MIN</name><argument_list pos:start="225:17" pos:end="227:64">(<argument pos:start="225:18" pos:end="225:23"><expr pos:start="225:18" pos:end="225:23"><operator pos:start="225:18" pos:end="225:18">*</operator><name pos:start="225:19" pos:end="225:23">bytes</name></expr></argument>, <argument pos:start="225:26" pos:end="227:63"><expr pos:start="225:26" pos:end="227:63"><operator pos:start="225:26" pos:end="225:26">(</operator><name pos:start="225:27" pos:end="225:36">nb_sectors</name> <operator pos:start="225:38" pos:end="225:38">*</operator> <name pos:start="225:40" pos:end="225:55">BDRV_SECTOR_SIZE</name><operator pos:start="225:56" pos:end="225:56">)</operator>

                         <operator pos:start="227:26" pos:end="227:26">-</operator> <call pos:start="227:28" pos:end="227:63"><name pos:start="227:28" pos:end="227:46">offset_into_cluster</name><argument_list pos:start="227:47" pos:end="227:63">(<argument pos:start="227:48" pos:end="227:48"><expr pos:start="227:48" pos:end="227:48"><name pos:start="227:48" pos:end="227:48">s</name></expr></argument>, <argument pos:start="227:51" pos:end="227:62"><expr pos:start="227:51" pos:end="227:62"><name pos:start="227:51" pos:end="227:62">guest_offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:24"><expr pos:start="229:5" pos:end="229:23"><call pos:start="229:5" pos:end="229:23"><name pos:start="229:5" pos:end="229:10">assert</name><argument_list pos:start="229:11" pos:end="229:23">(<argument pos:start="229:12" pos:end="229:22"><expr pos:start="229:12" pos:end="229:22"><operator pos:start="229:12" pos:end="229:12">*</operator><name pos:start="229:13" pos:end="229:17">bytes</name> <operator pos:start="229:19" pos:end="229:20">!=</operator> <literal type="number" pos:start="229:22" pos:end="229:22">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="233:5" pos:end="233:13">return <expr pos:start="233:12" pos:end="233:12"><literal type="number" pos:start="233:12" pos:end="233:12">1</literal></expr>;</return>



<label pos:start="237:1" pos:end="237:5"><name pos:start="237:1" pos:end="237:4">fail</name>:</label>

    <if_stmt pos:start="239:5" pos:end="243:5"><if pos:start="239:5" pos:end="243:5">if <condition pos:start="239:8" pos:end="239:36">(<expr pos:start="239:9" pos:end="239:35"><operator pos:start="239:9" pos:end="239:9">*</operator><name pos:start="239:10" pos:end="239:10">m</name> <operator pos:start="239:12" pos:end="239:13">&amp;&amp;</operator> <name pos:start="239:15" pos:end="239:31"><operator pos:start="239:15" pos:end="239:15">(</operator><operator pos:start="239:16" pos:end="239:16">*</operator><name pos:start="239:17" pos:end="239:17">m</name><operator pos:start="239:18" pos:end="239:18">)</operator><operator pos:start="239:19" pos:end="239:20">-&gt;</operator><name pos:start="239:21" pos:end="239:31">nb_clusters</name></name> <operator pos:start="239:33" pos:end="239:33">&gt;</operator> <literal type="number" pos:start="239:35" pos:end="239:35">0</literal></expr>)</condition> <block pos:start="239:38" pos:end="243:5">{<block_content pos:start="241:9" pos:end="241:41">

        <expr_stmt pos:start="241:9" pos:end="241:41"><expr pos:start="241:9" pos:end="241:40"><call pos:start="241:9" pos:end="241:40"><name pos:start="241:9" pos:end="241:20">QLIST_REMOVE</name><argument_list pos:start="241:21" pos:end="241:40">(<argument pos:start="241:22" pos:end="241:23"><expr pos:start="241:22" pos:end="241:23"><operator pos:start="241:22" pos:end="241:22">*</operator><name pos:start="241:23" pos:end="241:23">m</name></expr></argument>, <argument pos:start="241:26" pos:end="241:39"><expr pos:start="241:26" pos:end="241:39"><name pos:start="241:26" pos:end="241:39">next_in_flight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="245:5" pos:end="245:15">return <expr pos:start="245:12" pos:end="245:14"><name pos:start="245:12" pos:end="245:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
