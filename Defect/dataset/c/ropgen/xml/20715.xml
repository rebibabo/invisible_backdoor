<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20715.c" pos:tabs="8"><function pos:start="1:1" pos:end="1106:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:27">ff_h264_decode_mb_cabac</name><parameter_list pos:start="1:28" pos:end="1:43">(<parameter pos:start="1:29" pos:end="1:42"><decl pos:start="1:29" pos:end="1:42"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:39">H264Context</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">h</name></decl></parameter>)</parameter_list> <block pos:start="1:45" pos:end="1106:1">{<block_content pos:start="3:5" pos:end="1104:13">

    <decl_stmt pos:start="3:5" pos:end="3:37"><decl pos:start="3:5" pos:end="3:36"><type pos:start="3:5" pos:end="3:26"><name pos:start="3:5" pos:end="3:18">MpegEncContext</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier> <specifier pos:start="3:22" pos:end="3:26">const</specifier></type> <name pos:start="3:28" pos:end="3:28">s</name> <init pos:start="3:30" pos:end="3:36">= <expr pos:start="3:32" pos:end="3:36"><operator pos:start="3:32" pos:end="3:32">&amp;</operator><name pos:start="3:33" pos:end="3:36"><name pos:start="3:33" pos:end="3:33">h</name><operator pos:start="3:34" pos:end="3:35">-&gt;</operator><name pos:start="3:36" pos:end="3:36">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:14"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">mb_xy</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">mb_type</name></decl>, <decl pos:start="7:18" pos:end="7:32"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:18" pos:end="7:32">partition_count</name></decl>, <decl pos:start="7:35" pos:end="7:41"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:35" pos:end="7:37">cbp</name> <init pos:start="7:39" pos:end="7:41">= <expr pos:start="7:41" pos:end="7:41"><literal type="number" pos:start="7:41" pos:end="7:41">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:50"><decl pos:start="9:5" pos:end="9:49"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:22">dct8x8_allowed</name><init pos:start="9:23" pos:end="9:49">= <expr pos:start="9:25" pos:end="9:49"><name pos:start="9:25" pos:end="9:49"><name pos:start="9:25" pos:end="9:25">h</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:30">pps</name><operator pos:start="9:31" pos:end="9:31">.</operator><name pos:start="9:32" pos:end="9:49">transform_8x8_mode</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:87"><decl pos:start="11:5" pos:end="11:86"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:21">decode_chroma</name> <init pos:start="11:23" pos:end="11:86">= <expr pos:start="11:25" pos:end="11:86"><name pos:start="11:25" pos:end="11:48"><name pos:start="11:25" pos:end="11:25">h</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:30">sps</name><operator pos:start="11:31" pos:end="11:31">.</operator><name pos:start="11:32" pos:end="11:48">chroma_format_idc</name></name> <operator pos:start="11:50" pos:end="11:51">==</operator> <literal type="number" pos:start="11:53" pos:end="11:53">1</literal> <operator pos:start="11:55" pos:end="11:56">||</operator> <name pos:start="11:58" pos:end="11:81"><name pos:start="11:58" pos:end="11:58">h</name><operator pos:start="11:59" pos:end="11:60">-&gt;</operator><name pos:start="11:61" pos:end="11:63">sps</name><operator pos:start="11:64" pos:end="11:64">.</operator><name pos:start="11:65" pos:end="11:81">chroma_format_idc</name></name> <operator pos:start="11:83" pos:end="11:84">==</operator> <literal type="number" pos:start="11:86" pos:end="11:86">2</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:43"><decl pos:start="13:5" pos:end="13:42"><type pos:start="13:5" pos:end="13:13"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:13">int</name></type> <name pos:start="13:15" pos:end="13:25">pixel_shift</name> <init pos:start="13:27" pos:end="13:42">= <expr pos:start="13:29" pos:end="13:42"><name pos:start="13:29" pos:end="13:42"><name pos:start="13:29" pos:end="13:29">h</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:42">pixel_shift</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:54"><expr pos:start="17:5" pos:end="17:53"><name pos:start="17:5" pos:end="17:9">mb_xy</name> <operator pos:start="17:11" pos:end="17:11">=</operator> <name pos:start="17:13" pos:end="17:20"><name pos:start="17:13" pos:end="17:13">h</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:20">mb_xy</name></name> <operator pos:start="17:22" pos:end="17:22">=</operator> <name pos:start="17:24" pos:end="17:30"><name pos:start="17:24" pos:end="17:24">s</name><operator pos:start="17:25" pos:end="17:26">-&gt;</operator><name pos:start="17:27" pos:end="17:30">mb_x</name></name> <operator pos:start="17:32" pos:end="17:32">+</operator> <name pos:start="17:34" pos:end="17:40"><name pos:start="17:34" pos:end="17:34">s</name><operator pos:start="17:35" pos:end="17:36">-&gt;</operator><name pos:start="17:37" pos:end="17:40">mb_y</name></name><operator pos:start="17:41" pos:end="17:41">*</operator><name pos:start="17:42" pos:end="17:53"><name pos:start="17:42" pos:end="17:42">s</name><operator pos:start="17:43" pos:end="17:44">-&gt;</operator><name pos:start="17:45" pos:end="17:53">mb_stride</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:75"><expr pos:start="21:5" pos:end="21:74"><call pos:start="21:5" pos:end="21:74"><name pos:start="21:5" pos:end="21:11">tprintf</name><argument_list pos:start="21:12" pos:end="21:74">(<argument pos:start="21:13" pos:end="21:20"><expr pos:start="21:13" pos:end="21:20"><name pos:start="21:13" pos:end="21:20"><name pos:start="21:13" pos:end="21:13">s</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:20">avctx</name></name></expr></argument>, <argument pos:start="21:23" pos:end="21:41"><expr pos:start="21:23" pos:end="21:41"><literal type="string" pos:start="21:23" pos:end="21:41">"pic:%d mb:%d/%d\n"</literal></expr></argument>, <argument pos:start="21:44" pos:end="21:55"><expr pos:start="21:44" pos:end="21:55"><name pos:start="21:44" pos:end="21:55"><name pos:start="21:44" pos:end="21:44">h</name><operator pos:start="21:45" pos:end="21:46">-&gt;</operator><name pos:start="21:47" pos:end="21:55">frame_num</name></name></expr></argument>, <argument pos:start="21:58" pos:end="21:64"><expr pos:start="21:58" pos:end="21:64"><name pos:start="21:58" pos:end="21:64"><name pos:start="21:58" pos:end="21:58">s</name><operator pos:start="21:59" pos:end="21:60">-&gt;</operator><name pos:start="21:61" pos:end="21:64">mb_x</name></name></expr></argument>, <argument pos:start="21:67" pos:end="21:73"><expr pos:start="21:67" pos:end="21:73"><name pos:start="21:67" pos:end="21:73"><name pos:start="21:67" pos:end="21:67">s</name><operator pos:start="21:68" pos:end="21:69">-&gt;</operator><name pos:start="21:70" pos:end="21:73">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="73:5"><if pos:start="23:5" pos:end="73:5">if<condition pos:start="23:7" pos:end="23:48">( <expr pos:start="23:9" pos:end="23:46"><name pos:start="23:9" pos:end="23:25"><name pos:start="23:9" pos:end="23:9">h</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:25">slice_type_nos</name></name> <operator pos:start="23:27" pos:end="23:28">!=</operator> <name pos:start="23:30" pos:end="23:46">AV_PICTURE_TYPE_I</name></expr> )</condition> <block pos:start="23:50" pos:end="73:5">{<block_content pos:start="25:9" pos:end="71:9">

        <decl_stmt pos:start="25:9" pos:end="25:17"><decl pos:start="25:9" pos:end="25:16"><type pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">int</name></type> <name pos:start="25:13" pos:end="25:16">skip</name></decl>;</decl_stmt>

        <comment type="block" pos:start="27:9" pos:end="27:67">/* a skipped mb needs the aff flag from the following mb */</comment>

        <if_stmt pos:start="29:9" pos:end="35:63"><if pos:start="29:9" pos:end="31:38">if<condition pos:start="29:11" pos:end="29:65">( <expr pos:start="29:13" pos:end="29:63"><name pos:start="29:13" pos:end="29:23">FRAME_MBAFF</name> <operator pos:start="29:25" pos:end="29:26">&amp;&amp;</operator> <operator pos:start="29:28" pos:end="29:28">(</operator><name pos:start="29:29" pos:end="29:35"><name pos:start="29:29" pos:end="29:29">s</name><operator pos:start="29:30" pos:end="29:31">-&gt;</operator><name pos:start="29:32" pos:end="29:35">mb_y</name></name><operator pos:start="29:36" pos:end="29:36">&amp;</operator><literal type="number" pos:start="29:37" pos:end="29:37">1</literal><operator pos:start="29:38" pos:end="29:38">)</operator><operator pos:start="29:39" pos:end="29:40">==</operator><literal type="number" pos:start="29:41" pos:end="29:41">1</literal> <operator pos:start="29:43" pos:end="29:44">&amp;&amp;</operator> <name pos:start="29:46" pos:end="29:63"><name pos:start="29:46" pos:end="29:46">h</name><operator pos:start="29:47" pos:end="29:48">-&gt;</operator><name pos:start="29:49" pos:end="29:63">prev_mb_skipped</name></name></expr> )</condition><block type="pseudo" pos:start="31:13" pos:end="31:38"><block_content pos:start="31:13" pos:end="31:38">

            <expr_stmt pos:start="31:13" pos:end="31:38"><expr pos:start="31:13" pos:end="31:37"><name pos:start="31:13" pos:end="31:16">skip</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <name pos:start="31:20" pos:end="31:37"><name pos:start="31:20" pos:end="31:20">h</name><operator pos:start="31:21" pos:end="31:22">-&gt;</operator><name pos:start="31:23" pos:end="31:37">next_mb_skipped</name></name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="33:9" pos:end="35:63">else<block type="pseudo" pos:start="35:13" pos:end="35:63"><block_content pos:start="35:13" pos:end="35:63">

            <expr_stmt pos:start="35:13" pos:end="35:63"><expr pos:start="35:13" pos:end="35:62"><name pos:start="35:13" pos:end="35:16">skip</name> <operator pos:start="35:18" pos:end="35:18">=</operator> <call pos:start="35:20" pos:end="35:62"><name pos:start="35:20" pos:end="35:39">decode_cabac_mb_skip</name><argument_list pos:start="35:40" pos:end="35:62">( <argument pos:start="35:42" pos:end="35:42"><expr pos:start="35:42" pos:end="35:42"><name pos:start="35:42" pos:end="35:42">h</name></expr></argument>, <argument pos:start="35:45" pos:end="35:51"><expr pos:start="35:45" pos:end="35:51"><name pos:start="35:45" pos:end="35:51"><name pos:start="35:45" pos:end="35:45">s</name><operator pos:start="35:46" pos:end="35:47">-&gt;</operator><name pos:start="35:48" pos:end="35:51">mb_x</name></name></expr></argument>, <argument pos:start="35:54" pos:end="35:60"><expr pos:start="35:54" pos:end="35:60"><name pos:start="35:54" pos:end="35:60"><name pos:start="35:54" pos:end="35:54">s</name><operator pos:start="35:55" pos:end="35:56">-&gt;</operator><name pos:start="35:57" pos:end="35:60">mb_y</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="block" pos:start="37:9" pos:end="37:29">/* read skip flags */</comment>

        <if_stmt pos:start="39:9" pos:end="71:9"><if pos:start="39:9" pos:end="71:9">if<condition pos:start="39:11" pos:end="39:18">( <expr pos:start="39:13" pos:end="39:16"><name pos:start="39:13" pos:end="39:16">skip</name></expr> )</condition> <block pos:start="39:20" pos:end="71:9">{<block_content pos:start="41:13" pos:end="67:21">

            <if_stmt pos:start="41:13" pos:end="51:13"><if pos:start="41:13" pos:end="51:13">if<condition pos:start="41:15" pos:end="41:47">( <expr pos:start="41:17" pos:end="41:45"><name pos:start="41:17" pos:end="41:27">FRAME_MBAFF</name> <operator pos:start="41:29" pos:end="41:30">&amp;&amp;</operator> <operator pos:start="41:32" pos:end="41:32">(</operator><name pos:start="41:33" pos:end="41:39"><name pos:start="41:33" pos:end="41:33">s</name><operator pos:start="41:34" pos:end="41:35">-&gt;</operator><name pos:start="41:36" pos:end="41:39">mb_y</name></name><operator pos:start="41:40" pos:end="41:40">&amp;</operator><literal type="number" pos:start="41:41" pos:end="41:41">1</literal><operator pos:start="41:42" pos:end="41:42">)</operator><operator pos:start="41:43" pos:end="41:44">==</operator><literal type="number" pos:start="41:45" pos:end="41:45">0</literal></expr> )</condition><block pos:start="41:48" pos:end="51:13">{<block_content pos:start="43:17" pos:end="49:98">

                <expr_stmt pos:start="43:17" pos:end="43:67"><expr pos:start="43:17" pos:end="43:66"><name pos:start="43:17" pos:end="43:51"><name pos:start="43:17" pos:end="43:17">s</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:34">current_picture</name><operator pos:start="43:35" pos:end="43:35">.</operator><name pos:start="43:36" pos:end="43:36">f</name><operator pos:start="43:37" pos:end="43:37">.</operator><name pos:start="43:38" pos:end="43:44">mb_type</name><index pos:start="43:45" pos:end="43:51">[<expr pos:start="43:46" pos:end="43:50"><name pos:start="43:46" pos:end="43:50">mb_xy</name></expr>]</index></name> <operator pos:start="43:53" pos:end="43:53">=</operator> <name pos:start="43:55" pos:end="43:66">MB_TYPE_SKIP</name></expr>;</expr_stmt>

                <expr_stmt pos:start="45:17" pos:end="45:83"><expr pos:start="45:17" pos:end="45:82"><name pos:start="45:17" pos:end="45:34"><name pos:start="45:17" pos:end="45:17">h</name><operator pos:start="45:18" pos:end="45:19">-&gt;</operator><name pos:start="45:20" pos:end="45:34">next_mb_skipped</name></name> <operator pos:start="45:36" pos:end="45:36">=</operator> <call pos:start="45:38" pos:end="45:82"><name pos:start="45:38" pos:end="45:57">decode_cabac_mb_skip</name><argument_list pos:start="45:58" pos:end="45:82">( <argument pos:start="45:60" pos:end="45:60"><expr pos:start="45:60" pos:end="45:60"><name pos:start="45:60" pos:end="45:60">h</name></expr></argument>, <argument pos:start="45:63" pos:end="45:69"><expr pos:start="45:63" pos:end="45:69"><name pos:start="45:63" pos:end="45:69"><name pos:start="45:63" pos:end="45:63">s</name><operator pos:start="45:64" pos:end="45:65">-&gt;</operator><name pos:start="45:66" pos:end="45:69">mb_x</name></name></expr></argument>, <argument pos:start="45:72" pos:end="45:80"><expr pos:start="45:72" pos:end="45:80"><name pos:start="45:72" pos:end="45:78"><name pos:start="45:72" pos:end="45:72">s</name><operator pos:start="45:73" pos:end="45:74">-&gt;</operator><name pos:start="45:75" pos:end="45:78">mb_y</name></name><operator pos:start="45:79" pos:end="45:79">+</operator><literal type="number" pos:start="45:80" pos:end="45:80">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="47:17" pos:end="49:98"><if pos:start="47:17" pos:end="49:98">if<condition pos:start="47:19" pos:end="47:39">(<expr pos:start="47:20" pos:end="47:38"><operator pos:start="47:20" pos:end="47:20">!</operator><name pos:start="47:21" pos:end="47:38"><name pos:start="47:21" pos:end="47:21">h</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:38">next_mb_skipped</name></name></expr>)</condition><block type="pseudo" pos:start="49:21" pos:end="49:98"><block_content pos:start="49:21" pos:end="49:98">

                    <expr_stmt pos:start="49:21" pos:end="49:98"><expr pos:start="49:21" pos:end="49:97"><name pos:start="49:21" pos:end="49:31"><name pos:start="49:21" pos:end="49:21">h</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:31">mb_mbaff</name></name> <operator pos:start="49:33" pos:end="49:33">=</operator> <name pos:start="49:35" pos:end="49:59"><name pos:start="49:35" pos:end="49:35">h</name><operator pos:start="49:36" pos:end="49:37">-&gt;</operator><name pos:start="49:38" pos:end="49:59">mb_field_decoding_flag</name></name> <operator pos:start="49:61" pos:end="49:61">=</operator> <call pos:start="49:63" pos:end="49:97"><name pos:start="49:63" pos:end="49:94">decode_cabac_field_decoding_flag</name><argument_list pos:start="49:95" pos:end="49:97">(<argument pos:start="49:96" pos:end="49:96"><expr pos:start="49:96" pos:end="49:96"><name pos:start="49:96" pos:end="49:96">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="55:13" pos:end="55:30"><expr pos:start="55:13" pos:end="55:29"><call pos:start="55:13" pos:end="55:29"><name pos:start="55:13" pos:end="55:26">decode_mb_skip</name><argument_list pos:start="55:27" pos:end="55:29">(<argument pos:start="55:28" pos:end="55:28"><expr pos:start="55:28" pos:end="55:28"><name pos:start="55:28" pos:end="55:28">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="59:13" pos:end="59:36"><expr pos:start="59:13" pos:end="59:35"><name pos:start="59:13" pos:end="59:31"><name pos:start="59:13" pos:end="59:13">h</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:24">cbp_table</name><index pos:start="59:25" pos:end="59:31">[<expr pos:start="59:26" pos:end="59:30"><name pos:start="59:26" pos:end="59:30">mb_xy</name></expr>]</index></name> <operator pos:start="59:33" pos:end="59:33">=</operator> <literal type="number" pos:start="59:35" pos:end="59:35">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:49"><expr pos:start="61:13" pos:end="61:48"><name pos:start="61:13" pos:end="61:44"><name pos:start="61:13" pos:end="61:13">h</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:37">chroma_pred_mode_table</name><index pos:start="61:38" pos:end="61:44">[<expr pos:start="61:39" pos:end="61:43"><name pos:start="61:39" pos:end="61:43">mb_xy</name></expr>]</index></name> <operator pos:start="61:46" pos:end="61:46">=</operator> <literal type="number" pos:start="61:48" pos:end="61:48">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:36"><expr pos:start="63:13" pos:end="63:35"><name pos:start="63:13" pos:end="63:31"><name pos:start="63:13" pos:end="63:13">h</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:31">last_qscale_diff</name></name> <operator pos:start="63:33" pos:end="63:33">=</operator> <literal type="number" pos:start="63:35" pos:end="63:35">0</literal></expr>;</expr_stmt>



            <return pos:start="67:13" pos:end="67:21">return <expr pos:start="67:20" pos:end="67:20"><literal type="number" pos:start="67:20" pos:end="67:20">0</literal></expr>;</return>



        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="75:5" pos:end="83:5"><if pos:start="75:5" pos:end="83:5">if<condition pos:start="75:7" pos:end="75:19">(<expr pos:start="75:8" pos:end="75:18"><name pos:start="75:8" pos:end="75:18">FRAME_MBAFF</name></expr>)</condition><block pos:start="75:20" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:76">

        <if_stmt pos:start="77:9" pos:end="81:76"><if pos:start="77:9" pos:end="81:76">if<condition pos:start="77:11" pos:end="77:30">( <expr pos:start="77:13" pos:end="77:28"><operator pos:start="77:13" pos:end="77:13">(</operator><name pos:start="77:14" pos:end="77:20"><name pos:start="77:14" pos:end="77:14">s</name><operator pos:start="77:15" pos:end="77:16">-&gt;</operator><name pos:start="77:17" pos:end="77:20">mb_y</name></name><operator pos:start="77:21" pos:end="77:21">&amp;</operator><literal type="number" pos:start="77:22" pos:end="77:22">1</literal><operator pos:start="77:23" pos:end="77:23">)</operator> <operator pos:start="77:25" pos:end="77:26">==</operator> <literal type="number" pos:start="77:28" pos:end="77:28">0</literal></expr> )</condition><block type="pseudo" pos:start="79:13" pos:end="81:76"><block_content pos:start="79:13" pos:end="81:76">

            <expr_stmt pos:start="79:13" pos:end="81:76"><expr pos:start="79:13" pos:end="81:75"><name pos:start="79:13" pos:end="79:23"><name pos:start="79:13" pos:end="79:13">h</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:23">mb_mbaff</name></name> <operator pos:start="79:25" pos:end="79:25">=</operator>

            <name pos:start="81:13" pos:end="81:37"><name pos:start="81:13" pos:end="81:13">h</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:37">mb_field_decoding_flag</name></name> <operator pos:start="81:39" pos:end="81:39">=</operator> <call pos:start="81:41" pos:end="81:75"><name pos:start="81:41" pos:end="81:72">decode_cabac_field_decoding_flag</name><argument_list pos:start="81:73" pos:end="81:75">(<argument pos:start="81:74" pos:end="81:74"><expr pos:start="81:74" pos:end="81:74"><name pos:start="81:74" pos:end="81:74">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:27"><expr pos:start="87:5" pos:end="87:26"><name pos:start="87:5" pos:end="87:22"><name pos:start="87:5" pos:end="87:5">h</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:22">prev_mb_skipped</name></name> <operator pos:start="87:24" pos:end="87:24">=</operator> <literal type="number" pos:start="87:26" pos:end="87:26">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:42"><expr pos:start="91:5" pos:end="91:41"><call pos:start="91:5" pos:end="91:41"><name pos:start="91:5" pos:end="91:25">fill_decode_neighbors</name><argument_list pos:start="91:26" pos:end="91:41">(<argument pos:start="91:27" pos:end="91:27"><expr pos:start="91:27" pos:end="91:27"><name pos:start="91:27" pos:end="91:27">h</name></expr></argument>, <argument pos:start="91:30" pos:end="91:40"><expr pos:start="91:30" pos:end="91:40"><operator pos:start="91:30" pos:end="91:30">-</operator><operator pos:start="91:31" pos:end="91:31">(</operator><name pos:start="91:32" pos:end="91:39">MB_FIELD</name><operator pos:start="91:40" pos:end="91:40">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="95:5" pos:end="217:5"><if pos:start="95:5" pos:end="165:5">if<condition pos:start="95:7" pos:end="95:48">( <expr pos:start="95:9" pos:end="95:46"><name pos:start="95:9" pos:end="95:25"><name pos:start="95:9" pos:end="95:9">h</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:25">slice_type_nos</name></name> <operator pos:start="95:27" pos:end="95:28">==</operator> <name pos:start="95:30" pos:end="95:46">AV_PICTURE_TYPE_B</name></expr> )</condition> <block pos:start="95:50" pos:end="165:5">{<block_content pos:start="97:9" pos:end="163:58">

        <decl_stmt pos:start="97:9" pos:end="97:20"><decl pos:start="97:9" pos:end="97:19"><type pos:start="97:9" pos:end="97:11"><name pos:start="97:9" pos:end="97:11">int</name></type> <name pos:start="97:13" pos:end="97:15">ctx</name> <init pos:start="97:17" pos:end="97:19">= <expr pos:start="97:19" pos:end="97:19"><literal type="number" pos:start="97:19" pos:end="97:19">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:55"><expr pos:start="99:9" pos:end="99:54"><call pos:start="99:9" pos:end="99:54"><name pos:start="99:9" pos:end="99:14">assert</name><argument_list pos:start="99:15" pos:end="99:54">(<argument pos:start="99:16" pos:end="99:53"><expr pos:start="99:16" pos:end="99:53"><name pos:start="99:16" pos:end="99:32"><name pos:start="99:16" pos:end="99:16">h</name><operator pos:start="99:17" pos:end="99:18">-&gt;</operator><name pos:start="99:19" pos:end="99:32">slice_type_nos</name></name> <operator pos:start="99:34" pos:end="99:35">==</operator> <name pos:start="99:37" pos:end="99:53">AV_PICTURE_TYPE_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="103:9" pos:end="105:18"><if pos:start="103:9" pos:end="105:18">if<condition pos:start="103:11" pos:end="103:48">( <expr pos:start="103:13" pos:end="103:46"><operator pos:start="103:13" pos:end="103:13">!</operator><call pos:start="103:14" pos:end="103:46"><name pos:start="103:14" pos:end="103:22">IS_DIRECT</name><argument_list pos:start="103:23" pos:end="103:46">( <argument pos:start="103:25" pos:end="103:44"><expr pos:start="103:25" pos:end="103:44"><name pos:start="103:25" pos:end="103:42"><name pos:start="103:25" pos:end="103:25">h</name><operator pos:start="103:26" pos:end="103:27">-&gt;</operator><name pos:start="103:28" pos:end="103:36">left_type</name><index pos:start="103:37" pos:end="103:42">[<expr pos:start="103:38" pos:end="103:41"><name pos:start="103:38" pos:end="103:41">LTOP</name></expr>]</index></name><operator pos:start="103:43" pos:end="103:43">-</operator><literal type="number" pos:start="103:44" pos:end="103:44">1</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo" pos:start="105:13" pos:end="105:18"><block_content pos:start="105:13" pos:end="105:18">

            <expr_stmt pos:start="105:13" pos:end="105:18"><expr pos:start="105:13" pos:end="105:17"><name pos:start="105:13" pos:end="105:15">ctx</name><operator pos:start="105:16" pos:end="105:17">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="107:9" pos:end="109:18"><if pos:start="107:9" pos:end="109:18">if<condition pos:start="107:11" pos:end="107:41">( <expr pos:start="107:13" pos:end="107:39"><operator pos:start="107:13" pos:end="107:13">!</operator><call pos:start="107:14" pos:end="107:39"><name pos:start="107:14" pos:end="107:22">IS_DIRECT</name><argument_list pos:start="107:23" pos:end="107:39">( <argument pos:start="107:25" pos:end="107:37"><expr pos:start="107:25" pos:end="107:37"><name pos:start="107:25" pos:end="107:35"><name pos:start="107:25" pos:end="107:25">h</name><operator pos:start="107:26" pos:end="107:27">-&gt;</operator><name pos:start="107:28" pos:end="107:35">top_type</name></name><operator pos:start="107:36" pos:end="107:36">-</operator><literal type="number" pos:start="107:37" pos:end="107:37">1</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo" pos:start="109:13" pos:end="109:18"><block_content pos:start="109:13" pos:end="109:18">

            <expr_stmt pos:start="109:13" pos:end="109:18"><expr pos:start="109:13" pos:end="109:17"><name pos:start="109:13" pos:end="109:15">ctx</name><operator pos:start="109:16" pos:end="109:17">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="113:9" pos:end="159:9"><if pos:start="113:9" pos:end="117:9">if<condition pos:start="113:11" pos:end="113:71">( <expr pos:start="113:13" pos:end="113:69"><operator pos:start="113:13" pos:end="113:13">!</operator><call pos:start="113:14" pos:end="113:69"><name pos:start="113:14" pos:end="113:31">get_cabac_noinline</name><argument_list pos:start="113:32" pos:end="113:69">( <argument pos:start="113:34" pos:end="113:42"><expr pos:start="113:34" pos:end="113:42"><operator pos:start="113:34" pos:end="113:34">&amp;</operator><name pos:start="113:35" pos:end="113:42"><name pos:start="113:35" pos:end="113:35">h</name><operator pos:start="113:36" pos:end="113:37">-&gt;</operator><name pos:start="113:38" pos:end="113:42">cabac</name></name></expr></argument>, <argument pos:start="113:45" pos:end="113:67"><expr pos:start="113:45" pos:end="113:67"><operator pos:start="113:45" pos:end="113:45">&amp;</operator><name pos:start="113:46" pos:end="113:67"><name pos:start="113:46" pos:end="113:46">h</name><operator pos:start="113:47" pos:end="113:48">-&gt;</operator><name pos:start="113:49" pos:end="113:59">cabac_state</name><index pos:start="113:60" pos:end="113:67">[<expr pos:start="113:61" pos:end="113:66"><literal type="number" pos:start="113:61" pos:end="113:63">27</literal><operator pos:start="113:63" pos:end="113:63">+</operator><name pos:start="113:64" pos:end="113:66">ctx</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><block pos:start="113:72" pos:end="117:9">{<block_content pos:start="115:13" pos:end="115:23">

            <expr_stmt pos:start="115:13" pos:end="115:23"><expr pos:start="115:13" pos:end="115:22"><name pos:start="115:13" pos:end="115:19">mb_type</name><operator pos:start="115:20" pos:end="115:20">=</operator> <literal type="number" pos:start="115:22" pos:end="115:22">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="115:25" pos:end="115:44">/* B_Direct_16x16 */</comment>

        </block_content>}</block></if><if type="elseif" pos:start="117:10" pos:end="121:9">else if<condition pos:start="117:17" pos:end="117:75">( <expr pos:start="117:19" pos:end="117:73"><operator pos:start="117:19" pos:end="117:19">!</operator><call pos:start="117:20" pos:end="117:73"><name pos:start="117:20" pos:end="117:37">get_cabac_noinline</name><argument_list pos:start="117:38" pos:end="117:73">( <argument pos:start="117:40" pos:end="117:48"><expr pos:start="117:40" pos:end="117:48"><operator pos:start="117:40" pos:end="117:40">&amp;</operator><name pos:start="117:41" pos:end="117:48"><name pos:start="117:41" pos:end="117:41">h</name><operator pos:start="117:42" pos:end="117:43">-&gt;</operator><name pos:start="117:44" pos:end="117:48">cabac</name></name></expr></argument>, <argument pos:start="117:51" pos:end="117:71"><expr pos:start="117:51" pos:end="117:71"><operator pos:start="117:51" pos:end="117:51">&amp;</operator><name pos:start="117:52" pos:end="117:71"><name pos:start="117:52" pos:end="117:52">h</name><operator pos:start="117:53" pos:end="117:54">-&gt;</operator><name pos:start="117:55" pos:end="117:65">cabac_state</name><index pos:start="117:66" pos:end="117:71">[<expr pos:start="117:67" pos:end="117:70"><literal type="number" pos:start="117:67" pos:end="117:69">27</literal><operator pos:start="117:69" pos:end="117:69">+</operator><literal type="number" pos:start="117:70" pos:end="117:70">3</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition> <block pos:start="117:77" pos:end="121:9">{<block_content pos:start="119:13" pos:end="119:80">

            <expr_stmt pos:start="119:13" pos:end="119:80"><expr pos:start="119:13" pos:end="119:79"><name pos:start="119:13" pos:end="119:19">mb_type</name><operator pos:start="119:20" pos:end="119:20">=</operator> <literal type="number" pos:start="119:22" pos:end="119:24">1</literal> <operator pos:start="119:24" pos:end="119:24">+</operator> <call pos:start="119:26" pos:end="119:79"><name pos:start="119:26" pos:end="119:43">get_cabac_noinline</name><argument_list pos:start="119:44" pos:end="119:79">( <argument pos:start="119:46" pos:end="119:54"><expr pos:start="119:46" pos:end="119:54"><operator pos:start="119:46" pos:end="119:46">&amp;</operator><name pos:start="119:47" pos:end="119:54"><name pos:start="119:47" pos:end="119:47">h</name><operator pos:start="119:48" pos:end="119:49">-&gt;</operator><name pos:start="119:50" pos:end="119:54">cabac</name></name></expr></argument>, <argument pos:start="119:57" pos:end="119:77"><expr pos:start="119:57" pos:end="119:77"><operator pos:start="119:57" pos:end="119:57">&amp;</operator><name pos:start="119:58" pos:end="119:77"><name pos:start="119:58" pos:end="119:58">h</name><operator pos:start="119:59" pos:end="119:60">-&gt;</operator><name pos:start="119:61" pos:end="119:71">cabac_state</name><index pos:start="119:72" pos:end="119:77">[<expr pos:start="119:73" pos:end="119:76"><literal type="number" pos:start="119:73" pos:end="119:75">27</literal><operator pos:start="119:75" pos:end="119:75">+</operator><literal type="number" pos:start="119:76" pos:end="119:76">5</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="119:82" pos:end="119:100">/* B_L[01]_16x16 */</comment>

        </block_content>}</block></if><else pos:start="121:10" pos:end="159:9">else<block pos:start="121:14" pos:end="159:9">{<block_content pos:start="123:13" pos:end="157:13">

            <decl_stmt pos:start="123:13" pos:end="123:21"><decl pos:start="123:13" pos:end="123:20"><type pos:start="123:13" pos:end="123:15"><name pos:start="123:13" pos:end="123:15">int</name></type> <name pos:start="123:17" pos:end="123:20">bits</name></decl>;</decl_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:79"><expr pos:start="125:13" pos:end="125:78"><name pos:start="125:13" pos:end="125:16">bits</name> <operator pos:start="125:18" pos:end="125:18">=</operator> <call pos:start="125:20" pos:end="125:73"><name pos:start="125:20" pos:end="125:37">get_cabac_noinline</name><argument_list pos:start="125:38" pos:end="125:73">( <argument pos:start="125:40" pos:end="125:48"><expr pos:start="125:40" pos:end="125:48"><operator pos:start="125:40" pos:end="125:40">&amp;</operator><name pos:start="125:41" pos:end="125:48"><name pos:start="125:41" pos:end="125:41">h</name><operator pos:start="125:42" pos:end="125:43">-&gt;</operator><name pos:start="125:44" pos:end="125:48">cabac</name></name></expr></argument>, <argument pos:start="125:51" pos:end="125:71"><expr pos:start="125:51" pos:end="125:71"><operator pos:start="125:51" pos:end="125:51">&amp;</operator><name pos:start="125:52" pos:end="125:71"><name pos:start="125:52" pos:end="125:52">h</name><operator pos:start="125:53" pos:end="125:54">-&gt;</operator><name pos:start="125:55" pos:end="125:65">cabac_state</name><index pos:start="125:66" pos:end="125:71">[<expr pos:start="125:67" pos:end="125:70"><literal type="number" pos:start="125:67" pos:end="125:69">27</literal><operator pos:start="125:69" pos:end="125:69">+</operator><literal type="number" pos:start="125:70" pos:end="125:70">4</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator pos:start="125:75" pos:end="125:76">&lt;&lt;</operator> <literal type="number" pos:start="125:78" pos:end="125:78">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:79"><expr pos:start="127:13" pos:end="127:78"><name pos:start="127:13" pos:end="127:16">bits</name><operator pos:start="127:17" pos:end="127:18">+=</operator> <call pos:start="127:20" pos:end="127:73"><name pos:start="127:20" pos:end="127:37">get_cabac_noinline</name><argument_list pos:start="127:38" pos:end="127:73">( <argument pos:start="127:40" pos:end="127:48"><expr pos:start="127:40" pos:end="127:48"><operator pos:start="127:40" pos:end="127:40">&amp;</operator><name pos:start="127:41" pos:end="127:48"><name pos:start="127:41" pos:end="127:41">h</name><operator pos:start="127:42" pos:end="127:43">-&gt;</operator><name pos:start="127:44" pos:end="127:48">cabac</name></name></expr></argument>, <argument pos:start="127:51" pos:end="127:71"><expr pos:start="127:51" pos:end="127:71"><operator pos:start="127:51" pos:end="127:51">&amp;</operator><name pos:start="127:52" pos:end="127:71"><name pos:start="127:52" pos:end="127:52">h</name><operator pos:start="127:53" pos:end="127:54">-&gt;</operator><name pos:start="127:55" pos:end="127:65">cabac_state</name><index pos:start="127:66" pos:end="127:71">[<expr pos:start="127:67" pos:end="127:70"><literal type="number" pos:start="127:67" pos:end="127:69">27</literal><operator pos:start="127:69" pos:end="127:69">+</operator><literal type="number" pos:start="127:70" pos:end="127:70">5</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator pos:start="127:75" pos:end="127:76">&lt;&lt;</operator> <literal type="number" pos:start="127:78" pos:end="127:78">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:79"><expr pos:start="129:13" pos:end="129:78"><name pos:start="129:13" pos:end="129:16">bits</name><operator pos:start="129:17" pos:end="129:18">+=</operator> <call pos:start="129:20" pos:end="129:73"><name pos:start="129:20" pos:end="129:37">get_cabac_noinline</name><argument_list pos:start="129:38" pos:end="129:73">( <argument pos:start="129:40" pos:end="129:48"><expr pos:start="129:40" pos:end="129:48"><operator pos:start="129:40" pos:end="129:40">&amp;</operator><name pos:start="129:41" pos:end="129:48"><name pos:start="129:41" pos:end="129:41">h</name><operator pos:start="129:42" pos:end="129:43">-&gt;</operator><name pos:start="129:44" pos:end="129:48">cabac</name></name></expr></argument>, <argument pos:start="129:51" pos:end="129:71"><expr pos:start="129:51" pos:end="129:71"><operator pos:start="129:51" pos:end="129:51">&amp;</operator><name pos:start="129:52" pos:end="129:71"><name pos:start="129:52" pos:end="129:52">h</name><operator pos:start="129:53" pos:end="129:54">-&gt;</operator><name pos:start="129:55" pos:end="129:65">cabac_state</name><index pos:start="129:66" pos:end="129:71">[<expr pos:start="129:67" pos:end="129:70"><literal type="number" pos:start="129:67" pos:end="129:69">27</literal><operator pos:start="129:69" pos:end="129:69">+</operator><literal type="number" pos:start="129:70" pos:end="129:70">5</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator pos:start="129:75" pos:end="129:76">&lt;&lt;</operator> <literal type="number" pos:start="129:78" pos:end="129:78">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:74"><expr pos:start="131:13" pos:end="131:73"><name pos:start="131:13" pos:end="131:16">bits</name><operator pos:start="131:17" pos:end="131:18">+=</operator> <call pos:start="131:20" pos:end="131:73"><name pos:start="131:20" pos:end="131:37">get_cabac_noinline</name><argument_list pos:start="131:38" pos:end="131:73">( <argument pos:start="131:40" pos:end="131:48"><expr pos:start="131:40" pos:end="131:48"><operator pos:start="131:40" pos:end="131:40">&amp;</operator><name pos:start="131:41" pos:end="131:48"><name pos:start="131:41" pos:end="131:41">h</name><operator pos:start="131:42" pos:end="131:43">-&gt;</operator><name pos:start="131:44" pos:end="131:48">cabac</name></name></expr></argument>, <argument pos:start="131:51" pos:end="131:71"><expr pos:start="131:51" pos:end="131:71"><operator pos:start="131:51" pos:end="131:51">&amp;</operator><name pos:start="131:52" pos:end="131:71"><name pos:start="131:52" pos:end="131:52">h</name><operator pos:start="131:53" pos:end="131:54">-&gt;</operator><name pos:start="131:55" pos:end="131:65">cabac_state</name><index pos:start="131:66" pos:end="131:71">[<expr pos:start="131:67" pos:end="131:70"><literal type="number" pos:start="131:67" pos:end="131:69">27</literal><operator pos:start="131:69" pos:end="131:69">+</operator><literal type="number" pos:start="131:70" pos:end="131:70">5</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="133:13" pos:end="157:13"><if pos:start="133:13" pos:end="137:13">if<condition pos:start="133:15" pos:end="133:26">( <expr pos:start="133:17" pos:end="133:24"><name pos:start="133:17" pos:end="133:20">bits</name> <operator pos:start="133:22" pos:end="133:22">&lt;</operator> <literal type="number" pos:start="133:24" pos:end="133:24">8</literal></expr> )</condition><block pos:start="133:27" pos:end="137:13">{<block_content pos:start="135:17" pos:end="135:34">

                <expr_stmt pos:start="135:17" pos:end="135:34"><expr pos:start="135:17" pos:end="135:33"><name pos:start="135:17" pos:end="135:23">mb_type</name><operator pos:start="135:24" pos:end="135:24">=</operator> <name pos:start="135:26" pos:end="135:29">bits</name> <operator pos:start="135:31" pos:end="135:31">+</operator> <literal type="number" pos:start="135:33" pos:end="135:33">3</literal></expr>;</expr_stmt> <comment type="block" pos:start="135:36" pos:end="135:72">/* B_Bi_16x16 through B_L1_L0_16x8 */</comment>

            </block_content>}</block></if><if type="elseif" pos:start="137:14" pos:end="143:13">else if<condition pos:start="137:21" pos:end="137:34">( <expr pos:start="137:23" pos:end="137:32"><name pos:start="137:23" pos:end="137:26">bits</name> <operator pos:start="137:28" pos:end="137:29">==</operator> <literal type="number" pos:start="137:31" pos:end="137:32">13</literal></expr> )</condition><block pos:start="137:35" pos:end="143:13">{<block_content pos:start="139:17" pos:end="141:37">

                <expr_stmt pos:start="139:17" pos:end="139:62"><expr pos:start="139:17" pos:end="139:61"><name pos:start="139:17" pos:end="139:23">mb_type</name><operator pos:start="139:24" pos:end="139:24">=</operator> <call pos:start="139:26" pos:end="139:61"><name pos:start="139:26" pos:end="139:51">decode_cabac_intra_mb_type</name><argument_list pos:start="139:52" pos:end="139:61">(<argument pos:start="139:53" pos:end="139:53"><expr pos:start="139:53" pos:end="139:53"><name pos:start="139:53" pos:end="139:53">h</name></expr></argument>, <argument pos:start="139:56" pos:end="139:57"><expr pos:start="139:56" pos:end="139:57"><literal type="number" pos:start="139:56" pos:end="139:57">32</literal></expr></argument>, <argument pos:start="139:60" pos:end="139:60"><expr pos:start="139:60" pos:end="139:60"><literal type="number" pos:start="139:60" pos:end="139:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="141:17" pos:end="141:37">goto <name pos:start="141:22" pos:end="141:36">decode_intra_mb</name>;</goto>

            </block_content>}</block></if><if type="elseif" pos:start="143:14" pos:end="147:13">else if<condition pos:start="143:21" pos:end="143:34">( <expr pos:start="143:23" pos:end="143:32"><name pos:start="143:23" pos:end="143:26">bits</name> <operator pos:start="143:28" pos:end="143:29">==</operator> <literal type="number" pos:start="143:31" pos:end="143:32">14</literal></expr> )</condition><block pos:start="143:35" pos:end="147:13">{<block_content pos:start="145:17" pos:end="145:28">

                <expr_stmt pos:start="145:17" pos:end="145:28"><expr pos:start="145:17" pos:end="145:27"><name pos:start="145:17" pos:end="145:23">mb_type</name><operator pos:start="145:24" pos:end="145:24">=</operator> <literal type="number" pos:start="145:26" pos:end="145:27">11</literal></expr>;</expr_stmt> <comment type="block" pos:start="145:30" pos:end="145:47">/* B_L1_L0_8x16 */</comment>

            </block_content>}</block></if><if type="elseif" pos:start="147:14" pos:end="151:13">else if<condition pos:start="147:21" pos:end="147:34">( <expr pos:start="147:23" pos:end="147:32"><name pos:start="147:23" pos:end="147:26">bits</name> <operator pos:start="147:28" pos:end="147:29">==</operator> <literal type="number" pos:start="147:31" pos:end="147:32">15</literal></expr> )</condition><block pos:start="147:35" pos:end="151:13">{<block_content pos:start="149:17" pos:end="149:28">

                <expr_stmt pos:start="149:17" pos:end="149:28"><expr pos:start="149:17" pos:end="149:27"><name pos:start="149:17" pos:end="149:23">mb_type</name><operator pos:start="149:24" pos:end="149:24">=</operator> <literal type="number" pos:start="149:26" pos:end="149:27">22</literal></expr>;</expr_stmt> <comment type="block" pos:start="149:30" pos:end="149:40">/* B_8x8 */</comment>

            </block_content>}</block></if><else pos:start="151:14" pos:end="157:13">else<block pos:start="151:18" pos:end="157:13">{<block_content pos:start="153:17" pos:end="155:34">

                <expr_stmt pos:start="153:17" pos:end="153:91"><expr pos:start="153:17" pos:end="153:90"><name pos:start="153:17" pos:end="153:20">bits</name><operator pos:start="153:21" pos:end="153:21">=</operator> <operator pos:start="153:23" pos:end="153:23">(</operator> <name pos:start="153:25" pos:end="153:28">bits</name><operator pos:start="153:29" pos:end="153:30">&lt;&lt;</operator><literal type="number" pos:start="153:31" pos:end="153:31">1</literal> <operator pos:start="153:33" pos:end="153:33">)</operator> <operator pos:start="153:35" pos:end="153:35">+</operator> <call pos:start="153:37" pos:end="153:90"><name pos:start="153:37" pos:end="153:54">get_cabac_noinline</name><argument_list pos:start="153:55" pos:end="153:90">( <argument pos:start="153:57" pos:end="153:65"><expr pos:start="153:57" pos:end="153:65"><operator pos:start="153:57" pos:end="153:57">&amp;</operator><name pos:start="153:58" pos:end="153:65"><name pos:start="153:58" pos:end="153:58">h</name><operator pos:start="153:59" pos:end="153:60">-&gt;</operator><name pos:start="153:61" pos:end="153:65">cabac</name></name></expr></argument>, <argument pos:start="153:68" pos:end="153:88"><expr pos:start="153:68" pos:end="153:88"><operator pos:start="153:68" pos:end="153:68">&amp;</operator><name pos:start="153:69" pos:end="153:88"><name pos:start="153:69" pos:end="153:69">h</name><operator pos:start="153:70" pos:end="153:71">-&gt;</operator><name pos:start="153:72" pos:end="153:82">cabac_state</name><index pos:start="153:83" pos:end="153:88">[<expr pos:start="153:84" pos:end="153:87"><literal type="number" pos:start="153:84" pos:end="153:86">27</literal><operator pos:start="153:86" pos:end="153:86">+</operator><literal type="number" pos:start="153:87" pos:end="153:87">5</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="155:17" pos:end="155:34"><expr pos:start="155:17" pos:end="155:33"><name pos:start="155:17" pos:end="155:23">mb_type</name><operator pos:start="155:24" pos:end="155:24">=</operator> <name pos:start="155:26" pos:end="155:29">bits</name> <operator pos:start="155:31" pos:end="155:31">-</operator> <literal type="number" pos:start="155:33" pos:end="155:33">4</literal></expr>;</expr_stmt> <comment type="block" pos:start="155:36" pos:end="155:68">/* B_L0_Bi_* through B_Bi_Bi_* */</comment>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:69"><expr pos:start="161:13" pos:end="161:68"><name pos:start="161:13" pos:end="161:27">partition_count</name><operator pos:start="161:28" pos:end="161:28">=</operator> <name pos:start="161:30" pos:end="161:52"><name pos:start="161:30" pos:end="161:43">b_mb_type_info</name><index pos:start="161:44" pos:end="161:52">[<expr pos:start="161:45" pos:end="161:51"><name pos:start="161:45" pos:end="161:51">mb_type</name></expr>]</index></name><operator pos:start="161:53" pos:end="161:53">.</operator><name pos:start="161:54" pos:end="161:68">partition_count</name></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:58"><expr pos:start="163:13" pos:end="163:57"><name pos:start="163:13" pos:end="163:19">mb_type</name><operator pos:start="163:20" pos:end="163:20">=</operator>         <name pos:start="163:30" pos:end="163:52"><name pos:start="163:30" pos:end="163:43">b_mb_type_info</name><index pos:start="163:44" pos:end="163:52">[<expr pos:start="163:45" pos:end="163:51"><name pos:start="163:45" pos:end="163:51">mb_type</name></expr>]</index></name><operator pos:start="163:53" pos:end="163:53">.</operator><name pos:start="163:54" pos:end="163:57">type</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="165:7" pos:end="197:5">else if<condition pos:start="165:14" pos:end="165:55">( <expr pos:start="165:16" pos:end="165:53"><name pos:start="165:16" pos:end="165:32"><name pos:start="165:16" pos:end="165:16">h</name><operator pos:start="165:17" pos:end="165:18">-&gt;</operator><name pos:start="165:19" pos:end="165:32">slice_type_nos</name></name> <operator pos:start="165:34" pos:end="165:35">==</operator> <name pos:start="165:37" pos:end="165:53">AV_PICTURE_TYPE_P</name></expr> )</condition> <block pos:start="165:57" pos:end="197:5">{<block_content pos:start="167:9" pos:end="195:9">

        <if_stmt pos:start="167:9" pos:end="195:9"><if pos:start="167:9" pos:end="189:9">if<condition pos:start="167:11" pos:end="167:71">( <expr pos:start="167:13" pos:end="167:69"><call pos:start="167:13" pos:end="167:64"><name pos:start="167:13" pos:end="167:30">get_cabac_noinline</name><argument_list pos:start="167:31" pos:end="167:64">( <argument pos:start="167:33" pos:end="167:41"><expr pos:start="167:33" pos:end="167:41"><operator pos:start="167:33" pos:end="167:33">&amp;</operator><name pos:start="167:34" pos:end="167:41"><name pos:start="167:34" pos:end="167:34">h</name><operator pos:start="167:35" pos:end="167:36">-&gt;</operator><name pos:start="167:37" pos:end="167:41">cabac</name></name></expr></argument>, <argument pos:start="167:44" pos:end="167:62"><expr pos:start="167:44" pos:end="167:62"><operator pos:start="167:44" pos:end="167:44">&amp;</operator><name pos:start="167:45" pos:end="167:62"><name pos:start="167:45" pos:end="167:45">h</name><operator pos:start="167:46" pos:end="167:47">-&gt;</operator><name pos:start="167:48" pos:end="167:58">cabac_state</name><index pos:start="167:59" pos:end="167:62">[<expr pos:start="167:60" pos:end="167:61"><literal type="number" pos:start="167:60" pos:end="167:61">14</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator pos:start="167:66" pos:end="167:67">==</operator> <literal type="number" pos:start="167:69" pos:end="167:69">0</literal></expr> )</condition> <block pos:start="167:73" pos:end="189:9">{<block_content pos:start="171:13" pos:end="187:58">

            <comment type="block" pos:start="169:13" pos:end="169:24">/* P-type */</comment>

            <if_stmt pos:start="171:13" pos:end="183:13"><if pos:start="171:13" pos:end="177:13">if<condition pos:start="171:15" pos:end="171:75">( <expr pos:start="171:17" pos:end="171:73"><call pos:start="171:17" pos:end="171:68"><name pos:start="171:17" pos:end="171:34">get_cabac_noinline</name><argument_list pos:start="171:35" pos:end="171:68">( <argument pos:start="171:37" pos:end="171:45"><expr pos:start="171:37" pos:end="171:45"><operator pos:start="171:37" pos:end="171:37">&amp;</operator><name pos:start="171:38" pos:end="171:45"><name pos:start="171:38" pos:end="171:38">h</name><operator pos:start="171:39" pos:end="171:40">-&gt;</operator><name pos:start="171:41" pos:end="171:45">cabac</name></name></expr></argument>, <argument pos:start="171:48" pos:end="171:66"><expr pos:start="171:48" pos:end="171:66"><operator pos:start="171:48" pos:end="171:48">&amp;</operator><name pos:start="171:49" pos:end="171:66"><name pos:start="171:49" pos:end="171:49">h</name><operator pos:start="171:50" pos:end="171:51">-&gt;</operator><name pos:start="171:52" pos:end="171:62">cabac_state</name><index pos:start="171:63" pos:end="171:66">[<expr pos:start="171:64" pos:end="171:65"><literal type="number" pos:start="171:64" pos:end="171:65">15</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator pos:start="171:70" pos:end="171:71">==</operator> <literal type="number" pos:start="171:73" pos:end="171:73">0</literal></expr> )</condition> <block pos:start="171:77" pos:end="177:13">{<block_content pos:start="175:17" pos:end="175:82">

                <comment type="block" pos:start="173:17" pos:end="173:40">/* P_L0_D16x16, P_8x8 */</comment>

                <expr_stmt pos:start="175:17" pos:end="175:82"><expr pos:start="175:17" pos:end="175:81"><name pos:start="175:17" pos:end="175:23">mb_type</name><operator pos:start="175:24" pos:end="175:24">=</operator> <literal type="number" pos:start="175:26" pos:end="175:26">3</literal> <operator pos:start="175:28" pos:end="175:28">*</operator> <call pos:start="175:30" pos:end="175:81"><name pos:start="175:30" pos:end="175:47">get_cabac_noinline</name><argument_list pos:start="175:48" pos:end="175:81">( <argument pos:start="175:50" pos:end="175:58"><expr pos:start="175:50" pos:end="175:58"><operator pos:start="175:50" pos:end="175:50">&amp;</operator><name pos:start="175:51" pos:end="175:58"><name pos:start="175:51" pos:end="175:51">h</name><operator pos:start="175:52" pos:end="175:53">-&gt;</operator><name pos:start="175:54" pos:end="175:58">cabac</name></name></expr></argument>, <argument pos:start="175:61" pos:end="175:79"><expr pos:start="175:61" pos:end="175:79"><operator pos:start="175:61" pos:end="175:61">&amp;</operator><name pos:start="175:62" pos:end="175:79"><name pos:start="175:62" pos:end="175:62">h</name><operator pos:start="175:63" pos:end="175:64">-&gt;</operator><name pos:start="175:65" pos:end="175:75">cabac_state</name><index pos:start="175:76" pos:end="175:79">[<expr pos:start="175:77" pos:end="175:78"><literal type="number" pos:start="175:77" pos:end="175:78">16</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="177:15" pos:end="183:13">else <block pos:start="177:20" pos:end="183:13">{<block_content pos:start="181:17" pos:end="181:82">

                <comment type="block" pos:start="179:17" pos:end="179:44">/* P_L0_D8x16, P_L0_D16x8 */</comment>

                <expr_stmt pos:start="181:17" pos:end="181:82"><expr pos:start="181:17" pos:end="181:81"><name pos:start="181:17" pos:end="181:23">mb_type</name><operator pos:start="181:24" pos:end="181:24">=</operator> <literal type="number" pos:start="181:26" pos:end="181:28">2</literal> <operator pos:start="181:28" pos:end="181:28">-</operator> <call pos:start="181:30" pos:end="181:81"><name pos:start="181:30" pos:end="181:47">get_cabac_noinline</name><argument_list pos:start="181:48" pos:end="181:81">( <argument pos:start="181:50" pos:end="181:58"><expr pos:start="181:50" pos:end="181:58"><operator pos:start="181:50" pos:end="181:50">&amp;</operator><name pos:start="181:51" pos:end="181:58"><name pos:start="181:51" pos:end="181:51">h</name><operator pos:start="181:52" pos:end="181:53">-&gt;</operator><name pos:start="181:54" pos:end="181:58">cabac</name></name></expr></argument>, <argument pos:start="181:61" pos:end="181:79"><expr pos:start="181:61" pos:end="181:79"><operator pos:start="181:61" pos:end="181:61">&amp;</operator><name pos:start="181:62" pos:end="181:79"><name pos:start="181:62" pos:end="181:62">h</name><operator pos:start="181:63" pos:end="181:64">-&gt;</operator><name pos:start="181:65" pos:end="181:75">cabac_state</name><index pos:start="181:76" pos:end="181:79">[<expr pos:start="181:77" pos:end="181:78"><literal type="number" pos:start="181:77" pos:end="181:78">17</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:69"><expr pos:start="185:13" pos:end="185:68"><name pos:start="185:13" pos:end="185:27">partition_count</name><operator pos:start="185:28" pos:end="185:28">=</operator> <name pos:start="185:30" pos:end="185:52"><name pos:start="185:30" pos:end="185:43">p_mb_type_info</name><index pos:start="185:44" pos:end="185:52">[<expr pos:start="185:45" pos:end="185:51"><name pos:start="185:45" pos:end="185:51">mb_type</name></expr>]</index></name><operator pos:start="185:53" pos:end="185:53">.</operator><name pos:start="185:54" pos:end="185:68">partition_count</name></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:58"><expr pos:start="187:13" pos:end="187:57"><name pos:start="187:13" pos:end="187:19">mb_type</name><operator pos:start="187:20" pos:end="187:20">=</operator>         <name pos:start="187:30" pos:end="187:52"><name pos:start="187:30" pos:end="187:43">p_mb_type_info</name><index pos:start="187:44" pos:end="187:52">[<expr pos:start="187:45" pos:end="187:51"><name pos:start="187:45" pos:end="187:51">mb_type</name></expr>]</index></name><operator pos:start="187:53" pos:end="187:53">.</operator><name pos:start="187:54" pos:end="187:57">type</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="189:11" pos:end="195:9">else <block pos:start="189:16" pos:end="195:9">{<block_content pos:start="191:13" pos:end="193:33">

            <expr_stmt pos:start="191:13" pos:end="191:58"><expr pos:start="191:13" pos:end="191:57"><name pos:start="191:13" pos:end="191:19">mb_type</name><operator pos:start="191:20" pos:end="191:20">=</operator> <call pos:start="191:22" pos:end="191:57"><name pos:start="191:22" pos:end="191:47">decode_cabac_intra_mb_type</name><argument_list pos:start="191:48" pos:end="191:57">(<argument pos:start="191:49" pos:end="191:49"><expr pos:start="191:49" pos:end="191:49"><name pos:start="191:49" pos:end="191:49">h</name></expr></argument>, <argument pos:start="191:52" pos:end="191:53"><expr pos:start="191:52" pos:end="191:53"><literal type="number" pos:start="191:52" pos:end="191:53">17</literal></expr></argument>, <argument pos:start="191:56" pos:end="191:56"><expr pos:start="191:56" pos:end="191:56"><literal type="number" pos:start="191:56" pos:end="191:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="193:13" pos:end="193:33">goto <name pos:start="193:18" pos:end="193:32">decode_intra_mb</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="197:7" pos:end="217:5">else <block pos:start="197:12" pos:end="217:5">{<block_content pos:start="199:9" pos:end="215:46">

        <expr_stmt pos:start="199:9" pos:end="199:53"><expr pos:start="199:9" pos:end="199:52"><name pos:start="199:9" pos:end="199:15">mb_type</name><operator pos:start="199:16" pos:end="199:16">=</operator> <call pos:start="199:18" pos:end="199:52"><name pos:start="199:18" pos:end="199:43">decode_cabac_intra_mb_type</name><argument_list pos:start="199:44" pos:end="199:52">(<argument pos:start="199:45" pos:end="199:45"><expr pos:start="199:45" pos:end="199:45"><name pos:start="199:45" pos:end="199:45">h</name></expr></argument>, <argument pos:start="199:48" pos:end="199:48"><expr pos:start="199:48" pos:end="199:48"><literal type="number" pos:start="199:48" pos:end="199:48">3</literal></expr></argument>, <argument pos:start="199:51" pos:end="199:51"><expr pos:start="199:51" pos:end="199:51"><literal type="number" pos:start="199:51" pos:end="199:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="201:9" pos:end="203:22"><if pos:start="201:9" pos:end="203:22">if<condition pos:start="201:11" pos:end="201:58">(<expr pos:start="201:12" pos:end="201:57"><name pos:start="201:12" pos:end="201:24"><name pos:start="201:12" pos:end="201:12">h</name><operator pos:start="201:13" pos:end="201:14">-&gt;</operator><name pos:start="201:15" pos:end="201:24">slice_type</name></name> <operator pos:start="201:26" pos:end="201:27">==</operator> <name pos:start="201:29" pos:end="201:46">AV_PICTURE_TYPE_SI</name> <operator pos:start="201:48" pos:end="201:49">&amp;&amp;</operator> <name pos:start="201:51" pos:end="201:57">mb_type</name></expr>)</condition><block type="pseudo" pos:start="203:13" pos:end="203:22"><block_content pos:start="203:13" pos:end="203:22">

            <expr_stmt pos:start="203:13" pos:end="203:22"><expr pos:start="203:13" pos:end="203:21"><name pos:start="203:13" pos:end="203:19">mb_type</name><operator pos:start="203:20" pos:end="203:21">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:55"><expr pos:start="205:9" pos:end="205:54"><call pos:start="205:9" pos:end="205:54"><name pos:start="205:9" pos:end="205:14">assert</name><argument_list pos:start="205:15" pos:end="205:54">(<argument pos:start="205:16" pos:end="205:53"><expr pos:start="205:16" pos:end="205:53"><name pos:start="205:16" pos:end="205:32"><name pos:start="205:16" pos:end="205:16">h</name><operator pos:start="205:17" pos:end="205:18">-&gt;</operator><name pos:start="205:19" pos:end="205:32">slice_type_nos</name></name> <operator pos:start="205:34" pos:end="205:35">==</operator> <name pos:start="205:37" pos:end="205:53">AV_PICTURE_TYPE_I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="207:1" pos:end="207:16"><name pos:start="207:1" pos:end="207:15">decode_intra_mb</name>:</label>

        <expr_stmt pos:start="209:9" pos:end="209:28"><expr pos:start="209:9" pos:end="209:27"><name pos:start="209:9" pos:end="209:23">partition_count</name> <operator pos:start="209:25" pos:end="209:25">=</operator> <literal type="number" pos:start="209:27" pos:end="209:27">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:41"><expr pos:start="211:9" pos:end="211:40"><name pos:start="211:9" pos:end="211:11">cbp</name><operator pos:start="211:12" pos:end="211:12">=</operator> <name pos:start="211:14" pos:end="211:36"><name pos:start="211:14" pos:end="211:27">i_mb_type_info</name><index pos:start="211:28" pos:end="211:36">[<expr pos:start="211:29" pos:end="211:35"><name pos:start="211:29" pos:end="211:35">mb_type</name></expr>]</index></name><operator pos:start="211:37" pos:end="211:37">.</operator><name pos:start="211:38" pos:end="211:40">cbp</name></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:67"><expr pos:start="213:9" pos:end="213:66"><name pos:start="213:9" pos:end="213:31"><name pos:start="213:9" pos:end="213:9">h</name><operator pos:start="213:10" pos:end="213:11">-&gt;</operator><name pos:start="213:12" pos:end="213:31">intra16x16_pred_mode</name></name><operator pos:start="213:32" pos:end="213:32">=</operator> <name pos:start="213:34" pos:end="213:56"><name pos:start="213:34" pos:end="213:47">i_mb_type_info</name><index pos:start="213:48" pos:end="213:56">[<expr pos:start="213:49" pos:end="213:55"><name pos:start="213:49" pos:end="213:55">mb_type</name></expr>]</index></name><operator pos:start="213:57" pos:end="213:57">.</operator><name pos:start="213:58" pos:end="213:66">pred_mode</name></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:46"><expr pos:start="215:9" pos:end="215:45"><name pos:start="215:9" pos:end="215:15">mb_type</name><operator pos:start="215:16" pos:end="215:16">=</operator> <name pos:start="215:18" pos:end="215:40"><name pos:start="215:18" pos:end="215:31">i_mb_type_info</name><index pos:start="215:32" pos:end="215:40">[<expr pos:start="215:33" pos:end="215:39"><name pos:start="215:33" pos:end="215:39">mb_type</name></expr>]</index></name><operator pos:start="215:41" pos:end="215:41">.</operator><name pos:start="215:42" pos:end="215:45">type</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="219:5" pos:end="221:38"><if pos:start="219:5" pos:end="221:38">if<condition pos:start="219:7" pos:end="219:16">(<expr pos:start="219:8" pos:end="219:15"><name pos:start="219:8" pos:end="219:15">MB_FIELD</name></expr>)</condition><block type="pseudo" pos:start="221:9" pos:end="221:38"><block_content pos:start="221:9" pos:end="221:38">

        <expr_stmt pos:start="221:9" pos:end="221:38"><expr pos:start="221:9" pos:end="221:37"><name pos:start="221:9" pos:end="221:15">mb_type</name> <operator pos:start="221:17" pos:end="221:18">|=</operator> <name pos:start="221:20" pos:end="221:37">MB_TYPE_INTERLACED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="225:5" pos:end="225:42"><expr pos:start="225:5" pos:end="225:41"><name pos:start="225:5" pos:end="225:27"><name pos:start="225:5" pos:end="225:5">h</name><operator pos:start="225:6" pos:end="225:7">-&gt;</operator><name pos:start="225:8" pos:end="225:18">slice_table</name><index pos:start="225:19" pos:end="225:27">[ <expr pos:start="225:21" pos:end="225:25"><name pos:start="225:21" pos:end="225:25">mb_xy</name></expr> ]</index></name><operator pos:start="225:28" pos:end="225:28">=</operator> <name pos:start="225:30" pos:end="225:41"><name pos:start="225:30" pos:end="225:30">h</name><operator pos:start="225:31" pos:end="225:32">-&gt;</operator><name pos:start="225:33" pos:end="225:41">slice_num</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="229:5" pos:end="289:5"><if pos:start="229:5" pos:end="289:5">if<condition pos:start="229:7" pos:end="229:29">(<expr pos:start="229:8" pos:end="229:28"><call pos:start="229:8" pos:end="229:28"><name pos:start="229:8" pos:end="229:19">IS_INTRA_PCM</name><argument_list pos:start="229:20" pos:end="229:28">(<argument pos:start="229:21" pos:end="229:27"><expr pos:start="229:21" pos:end="229:27"><name pos:start="229:21" pos:end="229:27">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="229:31" pos:end="289:5">{<block_content pos:start="231:9" pos:end="287:17">

        <decl_stmt pos:start="231:9" pos:end="231:62"><decl pos:start="231:9" pos:end="231:61"><type pos:start="231:9" pos:end="231:29"><specifier pos:start="231:9" pos:end="231:14">static</specifier> <specifier pos:start="231:16" pos:end="231:20">const</specifier> <name pos:start="231:22" pos:end="231:29">uint16_t</name></type> <name pos:start="231:31" pos:end="231:41"><name pos:start="231:31" pos:end="231:38">mb_sizes</name><index pos:start="231:39" pos:end="231:41">[<expr pos:start="231:40" pos:end="231:40"><literal type="number" pos:start="231:40" pos:end="231:40">4</literal></expr>]</index></name> <init pos:start="231:43" pos:end="231:61">= <expr pos:start="231:45" pos:end="231:61"><block pos:start="231:45" pos:end="231:61">{<expr pos:start="231:46" pos:end="231:48"><literal type="number" pos:start="231:46" pos:end="231:48">256</literal></expr>,<expr pos:start="231:50" pos:end="231:52"><literal type="number" pos:start="231:50" pos:end="231:52">384</literal></expr>,<expr pos:start="231:54" pos:end="231:56"><literal type="number" pos:start="231:54" pos:end="231:56">512</literal></expr>,<expr pos:start="231:58" pos:end="231:60"><literal type="number" pos:start="231:58" pos:end="231:60">768</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="233:9" pos:end="233:90"><decl pos:start="233:9" pos:end="233:89"><type pos:start="233:9" pos:end="233:17"><specifier pos:start="233:9" pos:end="233:13">const</specifier> <name pos:start="233:15" pos:end="233:17">int</name></type> <name pos:start="233:19" pos:end="233:25">mb_size</name> <init pos:start="233:27" pos:end="233:89">= <expr pos:start="233:29" pos:end="233:89"><name pos:start="233:29" pos:end="233:62"><name pos:start="233:29" pos:end="233:36">mb_sizes</name><index pos:start="233:37" pos:end="233:62">[<expr pos:start="233:38" pos:end="233:61"><name pos:start="233:38" pos:end="233:61"><name pos:start="233:38" pos:end="233:38">h</name><operator pos:start="233:39" pos:end="233:40">-&gt;</operator><name pos:start="233:41" pos:end="233:43">sps</name><operator pos:start="233:44" pos:end="233:44">.</operator><name pos:start="233:45" pos:end="233:61">chroma_format_idc</name></name></expr>]</index></name><operator pos:start="233:63" pos:end="233:63">*</operator><name pos:start="233:64" pos:end="233:84"><name pos:start="233:64" pos:end="233:64">h</name><operator pos:start="233:65" pos:end="233:66">-&gt;</operator><name pos:start="233:67" pos:end="233:69">sps</name><operator pos:start="233:70" pos:end="233:70">.</operator><name pos:start="233:71" pos:end="233:84">bit_depth_luma</name></name> <operator pos:start="233:86" pos:end="233:87">&gt;&gt;</operator> <literal type="number" pos:start="233:89" pos:end="233:89">3</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="235:9" pos:end="235:27"><decl pos:start="235:9" pos:end="235:26"><type pos:start="235:9" pos:end="235:23"><specifier pos:start="235:9" pos:end="235:13">const</specifier> <name pos:start="235:15" pos:end="235:21">uint8_t</name> <modifier pos:start="235:23" pos:end="235:23">*</modifier></type><name pos:start="235:24" pos:end="235:26">ptr</name></decl>;</decl_stmt>



        <comment type="line" pos:start="239:9" pos:end="239:73">// We assume these blocks are very rare so we do not optimize it.</comment>

        <comment type="line" pos:start="241:9" pos:end="241:80">// FIXME The two following lines get the bitstream position in the cabac</comment>

        <comment type="line" pos:start="243:9" pos:end="243:83">// decode, I think it should be done by a function in cabac.h (or cabac.c).</comment>

        <expr_stmt pos:start="245:9" pos:end="245:33"><expr pos:start="245:9" pos:end="245:32"><name pos:start="245:9" pos:end="245:11">ptr</name><operator pos:start="245:12" pos:end="245:12">=</operator> <name pos:start="245:14" pos:end="245:32"><name pos:start="245:14" pos:end="245:14">h</name><operator pos:start="245:15" pos:end="245:16">-&gt;</operator><name pos:start="245:17" pos:end="245:21">cabac</name><operator pos:start="245:22" pos:end="245:22">.</operator><name pos:start="245:23" pos:end="245:32">bytestream</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="247:9" pos:end="247:35"><if pos:start="247:9" pos:end="247:35">if<condition pos:start="247:11" pos:end="247:28">(<expr pos:start="247:12" pos:end="247:27"><name pos:start="247:12" pos:end="247:23"><name pos:start="247:12" pos:end="247:12">h</name><operator pos:start="247:13" pos:end="247:14">-&gt;</operator><name pos:start="247:15" pos:end="247:19">cabac</name><operator pos:start="247:20" pos:end="247:20">.</operator><name pos:start="247:21" pos:end="247:23">low</name></name><operator pos:start="247:24" pos:end="247:24">&amp;</operator><literal type="number" pos:start="247:25" pos:end="247:27">0x1</literal></expr>)</condition><block type="pseudo" pos:start="247:30" pos:end="247:35"><block_content pos:start="247:30" pos:end="247:35"> <expr_stmt pos:start="247:30" pos:end="247:35"><expr pos:start="247:30" pos:end="247:34"><name pos:start="247:30" pos:end="247:32">ptr</name><operator pos:start="247:33" pos:end="247:34">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="249:9" pos:end="253:9"><if pos:start="249:9" pos:end="253:9">if<condition pos:start="249:11" pos:end="249:26">(<expr pos:start="249:12" pos:end="249:25"><name pos:start="249:12" pos:end="249:21">CABAC_BITS</name><operator pos:start="249:22" pos:end="249:23">==</operator><literal type="number" pos:start="249:24" pos:end="249:25">16</literal></expr>)</condition><block pos:start="249:27" pos:end="253:9">{<block_content pos:start="251:13" pos:end="251:41">

            <if_stmt pos:start="251:13" pos:end="251:41"><if pos:start="251:13" pos:end="251:41">if<condition pos:start="251:15" pos:end="251:34">(<expr pos:start="251:16" pos:end="251:33"><name pos:start="251:16" pos:end="251:27"><name pos:start="251:16" pos:end="251:16">h</name><operator pos:start="251:17" pos:end="251:18">-&gt;</operator><name pos:start="251:19" pos:end="251:23">cabac</name><operator pos:start="251:24" pos:end="251:24">.</operator><name pos:start="251:25" pos:end="251:27">low</name></name><operator pos:start="251:28" pos:end="251:28">&amp;</operator><literal type="number" pos:start="251:29" pos:end="251:33">0x1FF</literal></expr>)</condition><block type="pseudo" pos:start="251:36" pos:end="251:41"><block_content pos:start="251:36" pos:end="251:41"> <expr_stmt pos:start="251:36" pos:end="251:41"><expr pos:start="251:36" pos:end="251:40"><name pos:start="251:36" pos:end="251:38">ptr</name><operator pos:start="251:39" pos:end="251:40">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="257:9" pos:end="257:76">// The pixels are stored in the same order as levels in h-&gt;mb array.</comment>



        <expr_stmt pos:start="261:9" pos:end="261:36"><expr pos:start="261:9" pos:end="261:35"><call pos:start="261:9" pos:end="261:35"><name pos:start="261:9" pos:end="261:14">memcpy</name><argument_list pos:start="261:15" pos:end="261:35">(<argument pos:start="261:16" pos:end="261:20"><expr pos:start="261:16" pos:end="261:20"><name pos:start="261:16" pos:end="261:20"><name pos:start="261:16" pos:end="261:16">h</name><operator pos:start="261:17" pos:end="261:18">-&gt;</operator><name pos:start="261:19" pos:end="261:20">mb</name></name></expr></argument>, <argument pos:start="261:23" pos:end="261:25"><expr pos:start="261:23" pos:end="261:25"><name pos:start="261:23" pos:end="261:25">ptr</name></expr></argument>, <argument pos:start="261:28" pos:end="261:34"><expr pos:start="261:28" pos:end="261:34"><name pos:start="261:28" pos:end="261:34">mb_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="261:38" pos:end="261:50"><expr pos:start="261:38" pos:end="261:49"><name pos:start="261:38" pos:end="261:40">ptr</name><operator pos:start="261:41" pos:end="261:42">+=</operator><name pos:start="261:43" pos:end="261:49">mb_size</name></expr>;</expr_stmt>



        <expr_stmt pos:start="265:9" pos:end="265:77"><expr pos:start="265:9" pos:end="265:76"><call pos:start="265:9" pos:end="265:76"><name pos:start="265:9" pos:end="265:29">ff_init_cabac_decoder</name><argument_list pos:start="265:30" pos:end="265:76">(<argument pos:start="265:31" pos:end="265:39"><expr pos:start="265:31" pos:end="265:39"><operator pos:start="265:31" pos:end="265:31">&amp;</operator><name pos:start="265:32" pos:end="265:39"><name pos:start="265:32" pos:end="265:32">h</name><operator pos:start="265:33" pos:end="265:34">-&gt;</operator><name pos:start="265:35" pos:end="265:39">cabac</name></name></expr></argument>, <argument pos:start="265:42" pos:end="265:44"><expr pos:start="265:42" pos:end="265:44"><name pos:start="265:42" pos:end="265:44">ptr</name></expr></argument>, <argument pos:start="265:47" pos:end="265:75"><expr pos:start="265:47" pos:end="265:75"><name pos:start="265:47" pos:end="265:69"><name pos:start="265:47" pos:end="265:47">h</name><operator pos:start="265:48" pos:end="265:49">-&gt;</operator><name pos:start="265:50" pos:end="265:54">cabac</name><operator pos:start="265:55" pos:end="265:55">.</operator><name pos:start="265:56" pos:end="265:69">bytestream_end</name></name> <operator pos:start="265:71" pos:end="265:71">-</operator> <name pos:start="265:73" pos:end="265:75">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="269:9" pos:end="269:33">// All blocks are present</comment>

        <expr_stmt pos:start="271:9" pos:end="271:37"><expr pos:start="271:9" pos:end="271:36"><name pos:start="271:9" pos:end="271:27"><name pos:start="271:9" pos:end="271:9">h</name><operator pos:start="271:10" pos:end="271:11">-&gt;</operator><name pos:start="271:12" pos:end="271:20">cbp_table</name><index pos:start="271:21" pos:end="271:27">[<expr pos:start="271:22" pos:end="271:26"><name pos:start="271:22" pos:end="271:26">mb_xy</name></expr>]</index></name> <operator pos:start="271:29" pos:end="271:29">=</operator> <literal type="number" pos:start="271:31" pos:end="271:36">0xf7ef</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:45"><expr pos:start="273:9" pos:end="273:44"><name pos:start="273:9" pos:end="273:40"><name pos:start="273:9" pos:end="273:9">h</name><operator pos:start="273:10" pos:end="273:11">-&gt;</operator><name pos:start="273:12" pos:end="273:33">chroma_pred_mode_table</name><index pos:start="273:34" pos:end="273:40">[<expr pos:start="273:35" pos:end="273:39"><name pos:start="273:35" pos:end="273:39">mb_xy</name></expr>]</index></name> <operator pos:start="273:42" pos:end="273:42">=</operator> <literal type="number" pos:start="273:44" pos:end="273:44">0</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="275:9" pos:end="275:44">// In deblocking, the quantizer is 0</comment>

        <expr_stmt pos:start="277:9" pos:end="277:53"><expr pos:start="277:9" pos:end="277:52"><name pos:start="277:9" pos:end="277:48"><name pos:start="277:9" pos:end="277:9">s</name><operator pos:start="277:10" pos:end="277:11">-&gt;</operator><name pos:start="277:12" pos:end="277:26">current_picture</name><operator pos:start="277:27" pos:end="277:27">.</operator><name pos:start="277:28" pos:end="277:28">f</name><operator pos:start="277:29" pos:end="277:29">.</operator><name pos:start="277:30" pos:end="277:41">qscale_table</name><index pos:start="277:42" pos:end="277:48">[<expr pos:start="277:43" pos:end="277:47"><name pos:start="277:43" pos:end="277:47">mb_xy</name></expr>]</index></name> <operator pos:start="277:50" pos:end="277:50">=</operator> <literal type="number" pos:start="277:52" pos:end="277:52">0</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="279:9" pos:end="279:33">// All coeffs are present</comment>

        <expr_stmt pos:start="281:9" pos:end="281:49"><expr pos:start="281:9" pos:end="281:48"><call pos:start="281:9" pos:end="281:48"><name pos:start="281:9" pos:end="281:14">memset</name><argument_list pos:start="281:15" pos:end="281:48">(<argument pos:start="281:16" pos:end="281:39"><expr pos:start="281:16" pos:end="281:39"><name pos:start="281:16" pos:end="281:39"><name pos:start="281:16" pos:end="281:16">h</name><operator pos:start="281:17" pos:end="281:18">-&gt;</operator><name pos:start="281:19" pos:end="281:32">non_zero_count</name><index pos:start="281:33" pos:end="281:39">[<expr pos:start="281:34" pos:end="281:38"><name pos:start="281:34" pos:end="281:38">mb_xy</name></expr>]</index></name></expr></argument>, <argument pos:start="281:42" pos:end="281:43"><expr pos:start="281:42" pos:end="281:43"><literal type="number" pos:start="281:42" pos:end="281:43">16</literal></expr></argument>, <argument pos:start="281:46" pos:end="281:47"><expr pos:start="281:46" pos:end="281:47"><literal type="number" pos:start="281:46" pos:end="281:47">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="283:9" pos:end="283:54"><expr pos:start="283:9" pos:end="283:53"><name pos:start="283:9" pos:end="283:43"><name pos:start="283:9" pos:end="283:9">s</name><operator pos:start="283:10" pos:end="283:11">-&gt;</operator><name pos:start="283:12" pos:end="283:26">current_picture</name><operator pos:start="283:27" pos:end="283:27">.</operator><name pos:start="283:28" pos:end="283:28">f</name><operator pos:start="283:29" pos:end="283:29">.</operator><name pos:start="283:30" pos:end="283:36">mb_type</name><index pos:start="283:37" pos:end="283:43">[<expr pos:start="283:38" pos:end="283:42"><name pos:start="283:38" pos:end="283:42">mb_xy</name></expr>]</index></name> <operator pos:start="283:45" pos:end="283:45">=</operator> <name pos:start="283:47" pos:end="283:53">mb_type</name></expr>;</expr_stmt>

        <expr_stmt pos:start="285:9" pos:end="285:32"><expr pos:start="285:9" pos:end="285:31"><name pos:start="285:9" pos:end="285:27"><name pos:start="285:9" pos:end="285:9">h</name><operator pos:start="285:10" pos:end="285:11">-&gt;</operator><name pos:start="285:12" pos:end="285:27">last_qscale_diff</name></name> <operator pos:start="285:29" pos:end="285:29">=</operator> <literal type="number" pos:start="285:31" pos:end="285:31">0</literal></expr>;</expr_stmt>

        <return pos:start="287:9" pos:end="287:17">return <expr pos:start="287:16" pos:end="287:16"><literal type="number" pos:start="287:16" pos:end="287:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="293:5" pos:end="299:5"><if pos:start="293:5" pos:end="299:5">if<condition pos:start="293:7" pos:end="293:16">(<expr pos:start="293:8" pos:end="293:15"><name pos:start="293:8" pos:end="293:15">MB_MBAFF</name></expr>)</condition><block pos:start="293:17" pos:end="299:5">{<block_content pos:start="295:9" pos:end="297:30">

        <expr_stmt pos:start="295:9" pos:end="295:30"><expr pos:start="295:9" pos:end="295:29"><name pos:start="295:9" pos:end="295:23"><name pos:start="295:9" pos:end="295:9">h</name><operator pos:start="295:10" pos:end="295:11">-&gt;</operator><name pos:start="295:12" pos:end="295:20">ref_count</name><index pos:start="295:21" pos:end="295:23">[<expr pos:start="295:22" pos:end="295:22"><literal type="number" pos:start="295:22" pos:end="295:22">0</literal></expr>]</index></name> <operator pos:start="295:25" pos:end="295:27">&lt;&lt;=</operator> <literal type="number" pos:start="295:29" pos:end="295:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="297:9" pos:end="297:30"><expr pos:start="297:9" pos:end="297:29"><name pos:start="297:9" pos:end="297:23"><name pos:start="297:9" pos:end="297:9">h</name><operator pos:start="297:10" pos:end="297:11">-&gt;</operator><name pos:start="297:12" pos:end="297:20">ref_count</name><index pos:start="297:21" pos:end="297:23">[<expr pos:start="297:22" pos:end="297:22"><literal type="number" pos:start="297:22" pos:end="297:22">1</literal></expr>]</index></name> <operator pos:start="297:25" pos:end="297:27">&lt;&lt;=</operator> <literal type="number" pos:start="297:29" pos:end="297:29">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="303:5" pos:end="303:35"><expr pos:start="303:5" pos:end="303:34"><call pos:start="303:5" pos:end="303:34"><name pos:start="303:5" pos:end="303:22">fill_decode_caches</name><argument_list pos:start="303:23" pos:end="303:34">(<argument pos:start="303:24" pos:end="303:24"><expr pos:start="303:24" pos:end="303:24"><name pos:start="303:24" pos:end="303:24">h</name></expr></argument>, <argument pos:start="303:27" pos:end="303:33"><expr pos:start="303:27" pos:end="303:33"><name pos:start="303:27" pos:end="303:33">mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="307:5" pos:end="791:5"><if pos:start="307:5" pos:end="375:5">if<condition pos:start="307:7" pos:end="307:29">( <expr pos:start="307:9" pos:end="307:27"><call pos:start="307:9" pos:end="307:27"><name pos:start="307:9" pos:end="307:16">IS_INTRA</name><argument_list pos:start="307:17" pos:end="307:27">( <argument pos:start="307:19" pos:end="307:25"><expr pos:start="307:19" pos:end="307:25"><name pos:start="307:19" pos:end="307:25">mb_type</name></expr></argument> )</argument_list></call></expr> )</condition> <block pos:start="307:31" pos:end="375:5">{<block_content pos:start="309:9" pos:end="373:9">

        <decl_stmt pos:start="309:9" pos:end="309:25"><decl pos:start="309:9" pos:end="309:13"><type pos:start="309:9" pos:end="309:11"><name pos:start="309:9" pos:end="309:11">int</name></type> <name pos:start="309:13" pos:end="309:13">i</name></decl>, <decl pos:start="309:16" pos:end="309:24"><type ref="prev" pos:start="309:9" pos:end="309:11"/><name pos:start="309:16" pos:end="309:24">pred_mode</name></decl>;</decl_stmt>

        <if_stmt pos:start="311:9" pos:end="353:9"><if pos:start="311:9" pos:end="347:9">if<condition pos:start="311:11" pos:end="311:36">( <expr pos:start="311:13" pos:end="311:34"><call pos:start="311:13" pos:end="311:34"><name pos:start="311:13" pos:end="311:23">IS_INTRA4x4</name><argument_list pos:start="311:24" pos:end="311:34">( <argument pos:start="311:26" pos:end="311:32"><expr pos:start="311:26" pos:end="311:32"><name pos:start="311:26" pos:end="311:32">mb_type</name></expr></argument> )</argument_list></call></expr> )</condition> <block pos:start="311:38" pos:end="347:9">{<block_content pos:start="313:13" pos:end="345:68">

            <if_stmt pos:start="313:13" pos:end="341:13"><if pos:start="313:13" pos:end="327:13">if<condition pos:start="313:15" pos:end="313:118">( <expr pos:start="313:17" pos:end="313:116"><name pos:start="313:17" pos:end="313:30">dct8x8_allowed</name> <operator pos:start="313:32" pos:end="313:33">&amp;&amp;</operator> <call pos:start="313:35" pos:end="313:116"><name pos:start="313:35" pos:end="313:52">get_cabac_noinline</name><argument_list pos:start="313:53" pos:end="313:116">( <argument pos:start="313:55" pos:end="313:63"><expr pos:start="313:55" pos:end="313:63"><operator pos:start="313:55" pos:end="313:55">&amp;</operator><name pos:start="313:56" pos:end="313:63"><name pos:start="313:56" pos:end="313:56">h</name><operator pos:start="313:57" pos:end="313:58">-&gt;</operator><name pos:start="313:59" pos:end="313:63">cabac</name></name></expr></argument>, <argument pos:start="313:66" pos:end="313:114"><expr pos:start="313:66" pos:end="313:114"><operator pos:start="313:66" pos:end="313:66">&amp;</operator><name pos:start="313:67" pos:end="313:114"><name pos:start="313:67" pos:end="313:67">h</name><operator pos:start="313:68" pos:end="313:69">-&gt;</operator><name pos:start="313:70" pos:end="313:80">cabac_state</name><index pos:start="313:81" pos:end="313:114">[<expr pos:start="313:82" pos:end="313:113"><literal type="number" pos:start="313:82" pos:end="313:86">399</literal> <operator pos:start="313:86" pos:end="313:86">+</operator> <name pos:start="313:88" pos:end="313:113"><name pos:start="313:88" pos:end="313:88">h</name><operator pos:start="313:89" pos:end="313:90">-&gt;</operator><name pos:start="313:91" pos:end="313:113">neighbor_transform_size</name></name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition> <block pos:start="313:120" pos:end="327:13">{<block_content pos:start="315:17" pos:end="325:17">

                <expr_stmt pos:start="315:17" pos:end="315:42"><expr pos:start="315:17" pos:end="315:41"><name pos:start="315:17" pos:end="315:23">mb_type</name> <operator pos:start="315:25" pos:end="315:26">|=</operator> <name pos:start="315:28" pos:end="315:41">MB_TYPE_8x8DCT</name></expr>;</expr_stmt>

                <for pos:start="317:17" pos:end="325:17">for<control pos:start="317:20" pos:end="317:42">( <init pos:start="317:22" pos:end="317:27"><expr pos:start="317:22" pos:end="317:26"><name pos:start="317:22" pos:end="317:22">i</name> <operator pos:start="317:24" pos:end="317:24">=</operator> <literal type="number" pos:start="317:26" pos:end="317:26">0</literal></expr>;</init> <condition pos:start="317:29" pos:end="317:35"><expr pos:start="317:29" pos:end="317:34"><name pos:start="317:29" pos:end="317:29">i</name> <operator pos:start="317:31" pos:end="317:31">&lt;</operator> <literal type="number" pos:start="317:33" pos:end="317:34">16</literal></expr>;</condition> <incr pos:start="317:37" pos:end="317:40"><expr pos:start="317:37" pos:end="317:40"><name pos:start="317:37" pos:end="317:37">i</name><operator pos:start="317:38" pos:end="317:39">+=</operator><literal type="number" pos:start="317:40" pos:end="317:40">4</literal></expr></incr> )</control> <block pos:start="317:44" pos:end="325:17">{<block_content pos:start="319:21" pos:end="323:97">

                    <decl_stmt pos:start="319:21" pos:end="319:55"><decl pos:start="319:21" pos:end="319:54"><type pos:start="319:21" pos:end="319:23"><name pos:start="319:21" pos:end="319:23">int</name></type> <name pos:start="319:25" pos:end="319:28">pred</name> <init pos:start="319:30" pos:end="319:54">= <expr pos:start="319:32" pos:end="319:54"><call pos:start="319:32" pos:end="319:54"><name pos:start="319:32" pos:end="319:46">pred_intra_mode</name><argument_list pos:start="319:47" pos:end="319:54">( <argument pos:start="319:49" pos:end="319:49"><expr pos:start="319:49" pos:end="319:49"><name pos:start="319:49" pos:end="319:49">h</name></expr></argument>, <argument pos:start="319:52" pos:end="319:52"><expr pos:start="319:52" pos:end="319:52"><name pos:start="319:52" pos:end="319:52">i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="321:21" pos:end="321:77"><decl pos:start="321:21" pos:end="321:76"><type pos:start="321:21" pos:end="321:23"><name pos:start="321:21" pos:end="321:23">int</name></type> <name pos:start="321:25" pos:end="321:28">mode</name> <init pos:start="321:30" pos:end="321:76">= <expr pos:start="321:32" pos:end="321:76"><call pos:start="321:32" pos:end="321:76"><name pos:start="321:32" pos:end="321:65">decode_cabac_mb_intra4x4_pred_mode</name><argument_list pos:start="321:66" pos:end="321:76">( <argument pos:start="321:68" pos:end="321:68"><expr pos:start="321:68" pos:end="321:68"><name pos:start="321:68" pos:end="321:68">h</name></expr></argument>, <argument pos:start="321:71" pos:end="321:74"><expr pos:start="321:71" pos:end="321:74"><name pos:start="321:71" pos:end="321:74">pred</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="323:21" pos:end="323:97"><expr pos:start="323:21" pos:end="323:96"><call pos:start="323:21" pos:end="323:96"><name pos:start="323:21" pos:end="323:34">fill_rectangle</name><argument_list pos:start="323:35" pos:end="323:96">( <argument pos:start="323:37" pos:end="323:76"><expr pos:start="323:37" pos:end="323:76"><operator pos:start="323:37" pos:end="323:37">&amp;</operator><name pos:start="323:38" pos:end="323:76"><name pos:start="323:38" pos:end="323:38">h</name><operator pos:start="323:39" pos:end="323:40">-&gt;</operator><name pos:start="323:41" pos:end="323:64">intra4x4_pred_mode_cache</name><index pos:start="323:65" pos:end="323:76">[ <expr pos:start="323:67" pos:end="323:74"><name pos:start="323:67" pos:end="323:74"><name pos:start="323:67" pos:end="323:71">scan8</name><index pos:start="323:72" pos:end="323:74">[<expr pos:start="323:73" pos:end="323:73"><name pos:start="323:73" pos:end="323:73">i</name></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="323:79" pos:end="323:79"><expr pos:start="323:79" pos:end="323:79"><literal type="number" pos:start="323:79" pos:end="323:79">2</literal></expr></argument>, <argument pos:start="323:82" pos:end="323:82"><expr pos:start="323:82" pos:end="323:82"><literal type="number" pos:start="323:82" pos:end="323:82">2</literal></expr></argument>, <argument pos:start="323:85" pos:end="323:85"><expr pos:start="323:85" pos:end="323:85"><literal type="number" pos:start="323:85" pos:end="323:85">8</literal></expr></argument>, <argument pos:start="323:88" pos:end="323:91"><expr pos:start="323:88" pos:end="323:91"><name pos:start="323:88" pos:end="323:91">mode</name></expr></argument>, <argument pos:start="323:94" pos:end="323:94"><expr pos:start="323:94" pos:end="323:94"><literal type="number" pos:start="323:94" pos:end="323:94">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="327:15" pos:end="341:13">else <block pos:start="327:20" pos:end="341:13">{<block_content pos:start="329:17" pos:end="339:17">

                <for pos:start="329:17" pos:end="339:17">for<control pos:start="329:20" pos:end="329:41">( <init pos:start="329:22" pos:end="329:27"><expr pos:start="329:22" pos:end="329:26"><name pos:start="329:22" pos:end="329:22">i</name> <operator pos:start="329:24" pos:end="329:24">=</operator> <literal type="number" pos:start="329:26" pos:end="329:26">0</literal></expr>;</init> <condition pos:start="329:29" pos:end="329:35"><expr pos:start="329:29" pos:end="329:34"><name pos:start="329:29" pos:end="329:29">i</name> <operator pos:start="329:31" pos:end="329:31">&lt;</operator> <literal type="number" pos:start="329:33" pos:end="329:34">16</literal></expr>;</condition> <incr pos:start="329:37" pos:end="329:39"><expr pos:start="329:37" pos:end="329:39"><name pos:start="329:37" pos:end="329:37">i</name><operator pos:start="329:38" pos:end="329:39">++</operator></expr></incr> )</control> <block pos:start="329:43" pos:end="339:17">{<block_content pos:start="331:21" pos:end="333:108">

                    <decl_stmt pos:start="331:21" pos:end="331:55"><decl pos:start="331:21" pos:end="331:54"><type pos:start="331:21" pos:end="331:23"><name pos:start="331:21" pos:end="331:23">int</name></type> <name pos:start="331:25" pos:end="331:28">pred</name> <init pos:start="331:30" pos:end="331:54">= <expr pos:start="331:32" pos:end="331:54"><call pos:start="331:32" pos:end="331:54"><name pos:start="331:32" pos:end="331:46">pred_intra_mode</name><argument_list pos:start="331:47" pos:end="331:54">( <argument pos:start="331:49" pos:end="331:49"><expr pos:start="331:49" pos:end="331:49"><name pos:start="331:49" pos:end="331:49">h</name></expr></argument>, <argument pos:start="331:52" pos:end="331:52"><expr pos:start="331:52" pos:end="331:52"><name pos:start="331:52" pos:end="331:52">i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="333:21" pos:end="333:108"><expr pos:start="333:21" pos:end="333:107"><name pos:start="333:21" pos:end="333:59"><name pos:start="333:21" pos:end="333:21">h</name><operator pos:start="333:22" pos:end="333:23">-&gt;</operator><name pos:start="333:24" pos:end="333:47">intra4x4_pred_mode_cache</name><index pos:start="333:48" pos:end="333:59">[ <expr pos:start="333:50" pos:end="333:57"><name pos:start="333:50" pos:end="333:57"><name pos:start="333:50" pos:end="333:54">scan8</name><index pos:start="333:55" pos:end="333:57">[<expr pos:start="333:56" pos:end="333:56"><name pos:start="333:56" pos:end="333:56">i</name></expr>]</index></name></expr> ]</index></name> <operator pos:start="333:61" pos:end="333:61">=</operator> <call pos:start="333:63" pos:end="333:107"><name pos:start="333:63" pos:end="333:96">decode_cabac_mb_intra4x4_pred_mode</name><argument_list pos:start="333:97" pos:end="333:107">( <argument pos:start="333:99" pos:end="333:99"><expr pos:start="333:99" pos:end="333:99"><name pos:start="333:99" pos:end="333:99">h</name></expr></argument>, <argument pos:start="333:102" pos:end="333:105"><expr pos:start="333:102" pos:end="333:105"><name pos:start="333:102" pos:end="333:105">pred</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



                <comment type="line" pos:start="337:17" pos:end="337:124">//av_log( s-&gt;avctx, AV_LOG_ERROR, "i4x4 pred=%d mode=%d\n", pred, h-&gt;intra4x4_pred_mode_cache[ scan8[i] ] );</comment>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="343:13" pos:end="343:42"><expr pos:start="343:13" pos:end="343:41"><call pos:start="343:13" pos:end="343:41"><name pos:start="343:13" pos:end="343:38">write_back_intra_pred_mode</name><argument_list pos:start="343:39" pos:end="343:41">(<argument pos:start="343:40" pos:end="343:40"><expr pos:start="343:40" pos:end="343:40"><name pos:start="343:40" pos:end="343:40">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="345:13" pos:end="345:68"><if pos:start="345:13" pos:end="345:68">if<condition pos:start="345:15" pos:end="345:57">( <expr pos:start="345:17" pos:end="345:55"><call pos:start="345:17" pos:end="345:51"><name pos:start="345:17" pos:end="345:48">ff_h264_check_intra4x4_pred_mode</name><argument_list pos:start="345:49" pos:end="345:51">(<argument pos:start="345:50" pos:end="345:50"><expr pos:start="345:50" pos:end="345:50"><name pos:start="345:50" pos:end="345:50">h</name></expr></argument>)</argument_list></call> <operator pos:start="345:53" pos:end="345:53">&lt;</operator> <literal type="number" pos:start="345:55" pos:end="345:55">0</literal></expr> )</condition><block type="pseudo" pos:start="345:59" pos:end="345:68"><block_content pos:start="345:59" pos:end="345:68"> <return pos:start="345:59" pos:end="345:68">return <expr pos:start="345:66" pos:end="345:67"><operator pos:start="345:66" pos:end="345:66">-</operator><literal type="number" pos:start="345:67" pos:end="345:67">1</literal></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="347:11" pos:end="353:9">else <block pos:start="347:16" pos:end="353:9">{<block_content pos:start="349:13" pos:end="351:56">

            <expr_stmt pos:start="349:13" pos:end="349:100"><expr pos:start="349:13" pos:end="349:99"><name pos:start="349:13" pos:end="349:35"><name pos:start="349:13" pos:end="349:13">h</name><operator pos:start="349:14" pos:end="349:15">-&gt;</operator><name pos:start="349:16" pos:end="349:35">intra16x16_pred_mode</name></name><operator pos:start="349:36" pos:end="349:36">=</operator> <call pos:start="349:38" pos:end="349:99"><name pos:start="349:38" pos:end="349:66">ff_h264_check_intra_pred_mode</name><argument_list pos:start="349:67" pos:end="349:99">( <argument pos:start="349:69" pos:end="349:69"><expr pos:start="349:69" pos:end="349:69"><name pos:start="349:69" pos:end="349:69">h</name></expr></argument>, <argument pos:start="349:72" pos:end="349:94"><expr pos:start="349:72" pos:end="349:94"><name pos:start="349:72" pos:end="349:94"><name pos:start="349:72" pos:end="349:72">h</name><operator pos:start="349:73" pos:end="349:74">-&gt;</operator><name pos:start="349:75" pos:end="349:94">intra16x16_pred_mode</name></name></expr></argument>, <argument pos:start="349:97" pos:end="349:97"><expr pos:start="349:97" pos:end="349:97"><literal type="number" pos:start="349:97" pos:end="349:97">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="351:13" pos:end="351:56"><if pos:start="351:13" pos:end="351:56">if<condition pos:start="351:15" pos:end="351:45">( <expr pos:start="351:17" pos:end="351:43"><name pos:start="351:17" pos:end="351:39"><name pos:start="351:17" pos:end="351:17">h</name><operator pos:start="351:18" pos:end="351:19">-&gt;</operator><name pos:start="351:20" pos:end="351:39">intra16x16_pred_mode</name></name> <operator pos:start="351:41" pos:end="351:41">&lt;</operator> <literal type="number" pos:start="351:43" pos:end="351:43">0</literal></expr> )</condition><block type="pseudo" pos:start="351:47" pos:end="351:56"><block_content pos:start="351:47" pos:end="351:56"> <return pos:start="351:47" pos:end="351:56">return <expr pos:start="351:54" pos:end="351:55"><operator pos:start="351:54" pos:end="351:54">-</operator><literal type="number" pos:start="351:55" pos:end="351:55">1</literal></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="355:9" pos:end="373:9"><if pos:start="355:9" pos:end="369:9">if<condition pos:start="355:11" pos:end="355:25">(<expr pos:start="355:12" pos:end="355:24"><name pos:start="355:12" pos:end="355:24">decode_chroma</name></expr>)</condition><block pos:start="355:26" pos:end="369:9">{<block_content pos:start="357:13" pos:end="367:43">

            <expr_stmt pos:start="357:13" pos:end="359:84"><expr pos:start="357:13" pos:end="359:83"><name pos:start="357:13" pos:end="357:44"><name pos:start="357:13" pos:end="357:13">h</name><operator pos:start="357:14" pos:end="357:15">-&gt;</operator><name pos:start="357:16" pos:end="357:37">chroma_pred_mode_table</name><index pos:start="357:38" pos:end="357:44">[<expr pos:start="357:39" pos:end="357:43"><name pos:start="357:39" pos:end="357:43">mb_xy</name></expr>]</index></name> <operator pos:start="357:46" pos:end="357:46">=</operator>

            <name pos:start="359:13" pos:end="359:21">pred_mode</name>                        <operator pos:start="359:46" pos:end="359:46">=</operator> <call pos:start="359:48" pos:end="359:83"><name pos:start="359:48" pos:end="359:78">decode_cabac_mb_chroma_pre_mode</name><argument_list pos:start="359:79" pos:end="359:83">( <argument pos:start="359:81" pos:end="359:81"><expr pos:start="359:81" pos:end="359:81"><name pos:start="359:81" pos:end="359:81">h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="363:13" pos:end="363:72"><expr pos:start="363:13" pos:end="363:71"><name pos:start="363:13" pos:end="363:21">pred_mode</name><operator pos:start="363:22" pos:end="363:22">=</operator> <call pos:start="363:24" pos:end="363:71"><name pos:start="363:24" pos:end="363:52">ff_h264_check_intra_pred_mode</name><argument_list pos:start="363:53" pos:end="363:71">( <argument pos:start="363:55" pos:end="363:55"><expr pos:start="363:55" pos:end="363:55"><name pos:start="363:55" pos:end="363:55">h</name></expr></argument>, <argument pos:start="363:58" pos:end="363:66"><expr pos:start="363:58" pos:end="363:66"><name pos:start="363:58" pos:end="363:66">pred_mode</name></expr></argument>, <argument pos:start="363:69" pos:end="363:69"><expr pos:start="363:69" pos:end="363:69"><literal type="number" pos:start="363:69" pos:end="363:69">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="365:13" pos:end="365:42"><if pos:start="365:13" pos:end="365:42">if<condition pos:start="365:15" pos:end="365:31">( <expr pos:start="365:17" pos:end="365:29"><name pos:start="365:17" pos:end="365:25">pred_mode</name> <operator pos:start="365:27" pos:end="365:27">&lt;</operator> <literal type="number" pos:start="365:29" pos:end="365:29">0</literal></expr> )</condition><block type="pseudo" pos:start="365:33" pos:end="365:42"><block_content pos:start="365:33" pos:end="365:42"> <return pos:start="365:33" pos:end="365:42">return <expr pos:start="365:40" pos:end="365:41"><operator pos:start="365:40" pos:end="365:40">-</operator><literal type="number" pos:start="365:41" pos:end="365:41">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="367:13" pos:end="367:43"><expr pos:start="367:13" pos:end="367:42"><name pos:start="367:13" pos:end="367:31"><name pos:start="367:13" pos:end="367:13">h</name><operator pos:start="367:14" pos:end="367:15">-&gt;</operator><name pos:start="367:16" pos:end="367:31">chroma_pred_mode</name></name><operator pos:start="367:32" pos:end="367:32">=</operator> <name pos:start="367:34" pos:end="367:42">pred_mode</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="369:11" pos:end="373:9">else <block pos:start="369:16" pos:end="373:9">{<block_content pos:start="371:13" pos:end="371:48">

            <expr_stmt pos:start="371:13" pos:end="371:48"><expr pos:start="371:13" pos:end="371:47"><name pos:start="371:13" pos:end="371:31"><name pos:start="371:13" pos:end="371:13">h</name><operator pos:start="371:14" pos:end="371:15">-&gt;</operator><name pos:start="371:16" pos:end="371:31">chroma_pred_mode</name></name><operator pos:start="371:32" pos:end="371:32">=</operator> <name pos:start="371:34" pos:end="371:47">DC_128_PRED8x8</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="375:7" pos:end="586:5">else if<condition pos:start="375:14" pos:end="375:37">( <expr pos:start="375:16" pos:end="375:35"><name pos:start="375:16" pos:end="375:30">partition_count</name> <operator pos:start="375:32" pos:end="375:33">==</operator> <literal type="number" pos:start="375:35" pos:end="375:35">4</literal></expr> )</condition> <block pos:start="375:39" pos:end="586:5">{<block_content pos:start="377:9" pos:end="584:9">

        <decl_stmt pos:start="377:9" pos:end="377:58"><decl pos:start="377:9" pos:end="377:13"><type pos:start="377:9" pos:end="377:11"><name pos:start="377:9" pos:end="377:11">int</name></type> <name pos:start="377:13" pos:end="377:13">i</name></decl>, <decl pos:start="377:16" pos:end="377:16"><type ref="prev" pos:start="377:9" pos:end="377:11"/><name pos:start="377:16" pos:end="377:16">j</name></decl>, <decl pos:start="377:19" pos:end="377:40"><type ref="prev" pos:start="377:9" pos:end="377:11"/><name pos:start="377:19" pos:end="377:40"><name pos:start="377:19" pos:end="377:37">sub_partition_count</name><index pos:start="377:38" pos:end="377:40">[<expr pos:start="377:39" pos:end="377:39"><literal type="number" pos:start="377:39" pos:end="377:39">4</literal></expr>]</index></name></decl>, <decl pos:start="377:43" pos:end="377:46"><type ref="prev" pos:start="377:9" pos:end="377:11"/><name pos:start="377:43" pos:end="377:46">list</name></decl>, <decl pos:start="377:49" pos:end="377:57"><type ref="prev" pos:start="377:9" pos:end="377:11"/><name pos:start="377:49" pos:end="377:57"><name pos:start="377:49" pos:end="377:51">ref</name><index pos:start="377:52" pos:end="377:54">[<expr pos:start="377:53" pos:end="377:53"><literal type="number" pos:start="377:53" pos:end="377:53">2</literal></expr>]</index><index pos:start="377:55" pos:end="377:57">[<expr pos:start="377:56" pos:end="377:56"><literal type="number" pos:start="377:56" pos:end="377:56">4</literal></expr>]</index></name></decl>;</decl_stmt>



        <if_stmt pos:start="381:9" pos:end="425:9"><if pos:start="381:9" pos:end="413:9">if<condition pos:start="381:11" pos:end="381:52">( <expr pos:start="381:13" pos:end="381:50"><name pos:start="381:13" pos:end="381:29"><name pos:start="381:13" pos:end="381:13">h</name><operator pos:start="381:14" pos:end="381:15">-&gt;</operator><name pos:start="381:16" pos:end="381:29">slice_type_nos</name></name> <operator pos:start="381:31" pos:end="381:32">==</operator> <name pos:start="381:34" pos:end="381:50">AV_PICTURE_TYPE_B</name></expr> )</condition> <block pos:start="381:54" pos:end="413:9">{<block_content pos:start="383:13" pos:end="411:13">

            <for pos:start="383:13" pos:end="391:13">for<control pos:start="383:16" pos:end="383:36">( <init pos:start="383:18" pos:end="383:23"><expr pos:start="383:18" pos:end="383:22"><name pos:start="383:18" pos:end="383:18">i</name> <operator pos:start="383:20" pos:end="383:20">=</operator> <literal type="number" pos:start="383:22" pos:end="383:22">0</literal></expr>;</init> <condition pos:start="383:25" pos:end="383:30"><expr pos:start="383:25" pos:end="383:29"><name pos:start="383:25" pos:end="383:25">i</name> <operator pos:start="383:27" pos:end="383:27">&lt;</operator> <literal type="number" pos:start="383:29" pos:end="383:29">4</literal></expr>;</condition> <incr pos:start="383:32" pos:end="383:34"><expr pos:start="383:32" pos:end="383:34"><name pos:start="383:32" pos:end="383:32">i</name><operator pos:start="383:33" pos:end="383:34">++</operator></expr></incr> )</control> <block pos:start="383:38" pos:end="391:13">{<block_content pos:start="385:17" pos:end="389:85">

                <expr_stmt pos:start="385:17" pos:end="385:68"><expr pos:start="385:17" pos:end="385:67"><name pos:start="385:17" pos:end="385:33"><name pos:start="385:17" pos:end="385:17">h</name><operator pos:start="385:18" pos:end="385:19">-&gt;</operator><name pos:start="385:20" pos:end="385:30">sub_mb_type</name><index pos:start="385:31" pos:end="385:33">[<expr pos:start="385:32" pos:end="385:32"><name pos:start="385:32" pos:end="385:32">i</name></expr>]</index></name> <operator pos:start="385:35" pos:end="385:35">=</operator> <call pos:start="385:37" pos:end="385:67"><name pos:start="385:37" pos:end="385:62">decode_cabac_b_mb_sub_type</name><argument_list pos:start="385:63" pos:end="385:67">( <argument pos:start="385:65" pos:end="385:65"><expr pos:start="385:65" pos:end="385:65"><name pos:start="385:65" pos:end="385:65">h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="387:17" pos:end="387:96"><expr pos:start="387:17" pos:end="387:95"><name pos:start="387:17" pos:end="387:38"><name pos:start="387:17" pos:end="387:35">sub_partition_count</name><index pos:start="387:36" pos:end="387:38">[<expr pos:start="387:37" pos:end="387:37"><name pos:start="387:37" pos:end="387:37">i</name></expr>]</index></name><operator pos:start="387:39" pos:end="387:39">=</operator> <name pos:start="387:41" pos:end="387:79"><name pos:start="387:41" pos:end="387:58">b_sub_mb_type_info</name><index pos:start="387:59" pos:end="387:79">[ <expr pos:start="387:61" pos:end="387:77"><name pos:start="387:61" pos:end="387:77"><name pos:start="387:61" pos:end="387:61">h</name><operator pos:start="387:62" pos:end="387:63">-&gt;</operator><name pos:start="387:64" pos:end="387:74">sub_mb_type</name><index pos:start="387:75" pos:end="387:77">[<expr pos:start="387:76" pos:end="387:76"><name pos:start="387:76" pos:end="387:76">i</name></expr>]</index></name></expr> ]</index></name><operator pos:start="387:80" pos:end="387:80">.</operator><name pos:start="387:81" pos:end="387:95">partition_count</name></expr>;</expr_stmt>

                <expr_stmt pos:start="389:17" pos:end="389:85"><expr pos:start="389:17" pos:end="389:84"><name pos:start="389:17" pos:end="389:33"><name pos:start="389:17" pos:end="389:17">h</name><operator pos:start="389:18" pos:end="389:19">-&gt;</operator><name pos:start="389:20" pos:end="389:30">sub_mb_type</name><index pos:start="389:31" pos:end="389:33">[<expr pos:start="389:32" pos:end="389:32"><name pos:start="389:32" pos:end="389:32">i</name></expr>]</index></name><operator pos:start="389:34" pos:end="389:34">=</operator>      <name pos:start="389:41" pos:end="389:79"><name pos:start="389:41" pos:end="389:58">b_sub_mb_type_info</name><index pos:start="389:59" pos:end="389:79">[ <expr pos:start="389:61" pos:end="389:77"><name pos:start="389:61" pos:end="389:77"><name pos:start="389:61" pos:end="389:61">h</name><operator pos:start="389:62" pos:end="389:63">-&gt;</operator><name pos:start="389:64" pos:end="389:74">sub_mb_type</name><index pos:start="389:75" pos:end="389:77">[<expr pos:start="389:76" pos:end="389:76"><name pos:start="389:76" pos:end="389:76">i</name></expr>]</index></name></expr> ]</index></name><operator pos:start="389:80" pos:end="389:80">.</operator><name pos:start="389:81" pos:end="389:84">type</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="393:13" pos:end="411:13"><if pos:start="393:13" pos:end="411:13">if<condition pos:start="393:15" pos:end="395:66">( <expr pos:start="393:17" pos:end="395:64"><call pos:start="393:17" pos:end="395:64"><name pos:start="393:17" pos:end="393:25">IS_DIRECT</name><argument_list pos:start="393:26" pos:end="395:64">(<argument pos:start="393:27" pos:end="395:63"><expr pos:start="393:27" pos:end="395:63"><name pos:start="393:27" pos:end="393:43"><name pos:start="393:27" pos:end="393:27">h</name><operator pos:start="393:28" pos:end="393:29">-&gt;</operator><name pos:start="393:30" pos:end="393:40">sub_mb_type</name><index pos:start="393:41" pos:end="393:43">[<expr pos:start="393:42" pos:end="393:42"><literal type="number" pos:start="393:42" pos:end="393:42">0</literal></expr>]</index></name> <operator pos:start="393:45" pos:end="393:45">|</operator> <name pos:start="393:47" pos:end="393:63"><name pos:start="393:47" pos:end="393:47">h</name><operator pos:start="393:48" pos:end="393:49">-&gt;</operator><name pos:start="393:50" pos:end="393:60">sub_mb_type</name><index pos:start="393:61" pos:end="393:63">[<expr pos:start="393:62" pos:end="393:62"><literal type="number" pos:start="393:62" pos:end="393:62">1</literal></expr>]</index></name> <operator pos:start="393:65" pos:end="393:65">|</operator>

                          <name pos:start="395:27" pos:end="395:43"><name pos:start="395:27" pos:end="395:27">h</name><operator pos:start="395:28" pos:end="395:29">-&gt;</operator><name pos:start="395:30" pos:end="395:40">sub_mb_type</name><index pos:start="395:41" pos:end="395:43">[<expr pos:start="395:42" pos:end="395:42"><literal type="number" pos:start="395:42" pos:end="395:42">2</literal></expr>]</index></name> <operator pos:start="395:45" pos:end="395:45">|</operator> <name pos:start="395:47" pos:end="395:63"><name pos:start="395:47" pos:end="395:47">h</name><operator pos:start="395:48" pos:end="395:49">-&gt;</operator><name pos:start="395:50" pos:end="395:60">sub_mb_type</name><index pos:start="395:61" pos:end="395:63">[<expr pos:start="395:62" pos:end="395:62"><literal type="number" pos:start="395:62" pos:end="395:62">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition> <block pos:start="395:68" pos:end="411:13">{<block_content pos:start="397:17" pos:end="409:112">

                <expr_stmt pos:start="397:17" pos:end="397:56"><expr pos:start="397:17" pos:end="397:55"><call pos:start="397:17" pos:end="397:55"><name pos:start="397:17" pos:end="397:42">ff_h264_pred_direct_motion</name><argument_list pos:start="397:43" pos:end="397:55">(<argument pos:start="397:44" pos:end="397:44"><expr pos:start="397:44" pos:end="397:44"><name pos:start="397:44" pos:end="397:44">h</name></expr></argument>, <argument pos:start="397:47" pos:end="397:54"><expr pos:start="397:47" pos:end="397:54"><operator pos:start="397:47" pos:end="397:47">&amp;</operator><name pos:start="397:48" pos:end="397:54">mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="399:17" pos:end="405:64"><expr pos:start="399:17" pos:end="405:63"><name pos:start="399:17" pos:end="399:41"><name pos:start="399:17" pos:end="399:17">h</name><operator pos:start="399:18" pos:end="399:19">-&gt;</operator><name pos:start="399:20" pos:end="399:28">ref_cache</name><index pos:start="399:29" pos:end="399:31">[<expr pos:start="399:30" pos:end="399:30"><literal type="number" pos:start="399:30" pos:end="399:30">0</literal></expr>]</index><index pos:start="399:32" pos:end="399:41">[<expr pos:start="399:33" pos:end="399:40"><name pos:start="399:33" pos:end="399:40"><name pos:start="399:33" pos:end="399:37">scan8</name><index pos:start="399:38" pos:end="399:40">[<expr pos:start="399:39" pos:end="399:39"><literal type="number" pos:start="399:39" pos:end="399:39">4</literal></expr>]</index></name></expr>]</index></name> <operator pos:start="399:43" pos:end="399:43">=</operator>

                <name pos:start="401:17" pos:end="401:41"><name pos:start="401:17" pos:end="401:17">h</name><operator pos:start="401:18" pos:end="401:19">-&gt;</operator><name pos:start="401:20" pos:end="401:28">ref_cache</name><index pos:start="401:29" pos:end="401:31">[<expr pos:start="401:30" pos:end="401:30"><literal type="number" pos:start="401:30" pos:end="401:30">1</literal></expr>]</index><index pos:start="401:32" pos:end="401:41">[<expr pos:start="401:33" pos:end="401:40"><name pos:start="401:33" pos:end="401:40"><name pos:start="401:33" pos:end="401:37">scan8</name><index pos:start="401:38" pos:end="401:40">[<expr pos:start="401:39" pos:end="401:39"><literal type="number" pos:start="401:39" pos:end="401:39">4</literal></expr>]</index></name></expr>]</index></name> <operator pos:start="401:43" pos:end="401:43">=</operator>

                <name pos:start="403:17" pos:end="403:42"><name pos:start="403:17" pos:end="403:17">h</name><operator pos:start="403:18" pos:end="403:19">-&gt;</operator><name pos:start="403:20" pos:end="403:28">ref_cache</name><index pos:start="403:29" pos:end="403:31">[<expr pos:start="403:30" pos:end="403:30"><literal type="number" pos:start="403:30" pos:end="403:30">0</literal></expr>]</index><index pos:start="403:32" pos:end="403:42">[<expr pos:start="403:33" pos:end="403:41"><name pos:start="403:33" pos:end="403:41"><name pos:start="403:33" pos:end="403:37">scan8</name><index pos:start="403:38" pos:end="403:41">[<expr pos:start="403:39" pos:end="403:40"><literal type="number" pos:start="403:39" pos:end="403:40">12</literal></expr>]</index></name></expr>]</index></name> <operator pos:start="403:44" pos:end="403:44">=</operator>

                <name pos:start="405:17" pos:end="405:42"><name pos:start="405:17" pos:end="405:17">h</name><operator pos:start="405:18" pos:end="405:19">-&gt;</operator><name pos:start="405:20" pos:end="405:28">ref_cache</name><index pos:start="405:29" pos:end="405:31">[<expr pos:start="405:30" pos:end="405:30"><literal type="number" pos:start="405:30" pos:end="405:30">1</literal></expr>]</index><index pos:start="405:32" pos:end="405:42">[<expr pos:start="405:33" pos:end="405:41"><name pos:start="405:33" pos:end="405:41"><name pos:start="405:33" pos:end="405:37">scan8</name><index pos:start="405:38" pos:end="405:41">[<expr pos:start="405:39" pos:end="405:40"><literal type="number" pos:start="405:39" pos:end="405:40">12</literal></expr>]</index></name></expr>]</index></name> <operator pos:start="405:44" pos:end="405:44">=</operator> <name pos:start="405:46" pos:end="405:63">PART_NOT_AVAILABLE</name></expr>;</expr_stmt>

                    <for pos:start="407:21" pos:end="409:112">for<control pos:start="407:24" pos:end="407:44">( <init pos:start="407:26" pos:end="407:31"><expr pos:start="407:26" pos:end="407:30"><name pos:start="407:26" pos:end="407:26">i</name> <operator pos:start="407:28" pos:end="407:28">=</operator> <literal type="number" pos:start="407:30" pos:end="407:30">0</literal></expr>;</init> <condition pos:start="407:33" pos:end="407:38"><expr pos:start="407:33" pos:end="407:37"><name pos:start="407:33" pos:end="407:33">i</name> <operator pos:start="407:35" pos:end="407:35">&lt;</operator> <literal type="number" pos:start="407:37" pos:end="407:37">4</literal></expr>;</condition> <incr pos:start="407:40" pos:end="407:42"><expr pos:start="407:40" pos:end="407:42"><name pos:start="407:40" pos:end="407:40">i</name><operator pos:start="407:41" pos:end="407:42">++</operator></expr></incr> )</control><block type="pseudo" pos:start="409:25" pos:end="409:112"><block_content pos:start="409:25" pos:end="409:112">

                        <expr_stmt pos:start="409:25" pos:end="409:112"><expr pos:start="409:25" pos:end="409:111"><call pos:start="409:25" pos:end="409:111"><name pos:start="409:25" pos:end="409:38">fill_rectangle</name><argument_list pos:start="409:39" pos:end="409:111">( <argument pos:start="409:41" pos:end="409:68"><expr pos:start="409:41" pos:end="409:68"><operator pos:start="409:41" pos:end="409:41">&amp;</operator><name pos:start="409:42" pos:end="409:68"><name pos:start="409:42" pos:end="409:42">h</name><operator pos:start="409:43" pos:end="409:44">-&gt;</operator><name pos:start="409:45" pos:end="409:56">direct_cache</name><index pos:start="409:57" pos:end="409:68">[<expr pos:start="409:58" pos:end="409:67"><name pos:start="409:58" pos:end="409:67"><name pos:start="409:58" pos:end="409:62">scan8</name><index pos:start="409:63" pos:end="409:67">[<expr pos:start="409:64" pos:end="409:66"><literal type="number" pos:start="409:64" pos:end="409:64">4</literal><operator pos:start="409:65" pos:end="409:65">*</operator><name pos:start="409:66" pos:end="409:66">i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="409:71" pos:end="409:71"><expr pos:start="409:71" pos:end="409:71"><literal type="number" pos:start="409:71" pos:end="409:71">2</literal></expr></argument>, <argument pos:start="409:74" pos:end="409:74"><expr pos:start="409:74" pos:end="409:74"><literal type="number" pos:start="409:74" pos:end="409:74">2</literal></expr></argument>, <argument pos:start="409:77" pos:end="409:77"><expr pos:start="409:77" pos:end="409:77"><literal type="number" pos:start="409:77" pos:end="409:77">8</literal></expr></argument>, <argument pos:start="409:80" pos:end="409:106"><expr pos:start="409:80" pos:end="409:106"><operator pos:start="409:80" pos:end="409:80">(</operator><name pos:start="409:81" pos:end="409:97"><name pos:start="409:81" pos:end="409:81">h</name><operator pos:start="409:82" pos:end="409:83">-&gt;</operator><name pos:start="409:84" pos:end="409:94">sub_mb_type</name><index pos:start="409:95" pos:end="409:97">[<expr pos:start="409:96" pos:end="409:96"><name pos:start="409:96" pos:end="409:96">i</name></expr>]</index></name><operator pos:start="409:98" pos:end="409:99">&gt;&gt;</operator><literal type="number" pos:start="409:100" pos:end="409:100">1</literal><operator pos:start="409:101" pos:end="409:101">)</operator><operator pos:start="409:102" pos:end="409:102">&amp;</operator><literal type="number" pos:start="409:103" pos:end="409:106">0xFF</literal></expr></argument>, <argument pos:start="409:109" pos:end="409:109"><expr pos:start="409:109" pos:end="409:109"><literal type="number" pos:start="409:109" pos:end="409:109">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="413:11" pos:end="425:9">else <block pos:start="413:16" pos:end="425:9">{<block_content pos:start="415:13" pos:end="423:13">

            <for pos:start="415:13" pos:end="423:13">for<control pos:start="415:16" pos:end="415:36">( <init pos:start="415:18" pos:end="415:23"><expr pos:start="415:18" pos:end="415:22"><name pos:start="415:18" pos:end="415:18">i</name> <operator pos:start="415:20" pos:end="415:20">=</operator> <literal type="number" pos:start="415:22" pos:end="415:22">0</literal></expr>;</init> <condition pos:start="415:25" pos:end="415:30"><expr pos:start="415:25" pos:end="415:29"><name pos:start="415:25" pos:end="415:25">i</name> <operator pos:start="415:27" pos:end="415:27">&lt;</operator> <literal type="number" pos:start="415:29" pos:end="415:29">4</literal></expr>;</condition> <incr pos:start="415:32" pos:end="415:34"><expr pos:start="415:32" pos:end="415:34"><name pos:start="415:32" pos:end="415:32">i</name><operator pos:start="415:33" pos:end="415:34">++</operator></expr></incr> )</control> <block pos:start="415:38" pos:end="423:13">{<block_content pos:start="417:17" pos:end="421:85">

                <expr_stmt pos:start="417:17" pos:end="417:68"><expr pos:start="417:17" pos:end="417:67"><name pos:start="417:17" pos:end="417:33"><name pos:start="417:17" pos:end="417:17">h</name><operator pos:start="417:18" pos:end="417:19">-&gt;</operator><name pos:start="417:20" pos:end="417:30">sub_mb_type</name><index pos:start="417:31" pos:end="417:33">[<expr pos:start="417:32" pos:end="417:32"><name pos:start="417:32" pos:end="417:32">i</name></expr>]</index></name> <operator pos:start="417:35" pos:end="417:35">=</operator> <call pos:start="417:37" pos:end="417:67"><name pos:start="417:37" pos:end="417:62">decode_cabac_p_mb_sub_type</name><argument_list pos:start="417:63" pos:end="417:67">( <argument pos:start="417:65" pos:end="417:65"><expr pos:start="417:65" pos:end="417:65"><name pos:start="417:65" pos:end="417:65">h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="419:17" pos:end="419:96"><expr pos:start="419:17" pos:end="419:95"><name pos:start="419:17" pos:end="419:38"><name pos:start="419:17" pos:end="419:35">sub_partition_count</name><index pos:start="419:36" pos:end="419:38">[<expr pos:start="419:37" pos:end="419:37"><name pos:start="419:37" pos:end="419:37">i</name></expr>]</index></name><operator pos:start="419:39" pos:end="419:39">=</operator> <name pos:start="419:41" pos:end="419:79"><name pos:start="419:41" pos:end="419:58">p_sub_mb_type_info</name><index pos:start="419:59" pos:end="419:79">[ <expr pos:start="419:61" pos:end="419:77"><name pos:start="419:61" pos:end="419:77"><name pos:start="419:61" pos:end="419:61">h</name><operator pos:start="419:62" pos:end="419:63">-&gt;</operator><name pos:start="419:64" pos:end="419:74">sub_mb_type</name><index pos:start="419:75" pos:end="419:77">[<expr pos:start="419:76" pos:end="419:76"><name pos:start="419:76" pos:end="419:76">i</name></expr>]</index></name></expr> ]</index></name><operator pos:start="419:80" pos:end="419:80">.</operator><name pos:start="419:81" pos:end="419:95">partition_count</name></expr>;</expr_stmt>

                <expr_stmt pos:start="421:17" pos:end="421:85"><expr pos:start="421:17" pos:end="421:84"><name pos:start="421:17" pos:end="421:33"><name pos:start="421:17" pos:end="421:17">h</name><operator pos:start="421:18" pos:end="421:19">-&gt;</operator><name pos:start="421:20" pos:end="421:30">sub_mb_type</name><index pos:start="421:31" pos:end="421:33">[<expr pos:start="421:32" pos:end="421:32"><name pos:start="421:32" pos:end="421:32">i</name></expr>]</index></name><operator pos:start="421:34" pos:end="421:34">=</operator>      <name pos:start="421:41" pos:end="421:79"><name pos:start="421:41" pos:end="421:58">p_sub_mb_type_info</name><index pos:start="421:59" pos:end="421:79">[ <expr pos:start="421:61" pos:end="421:77"><name pos:start="421:61" pos:end="421:77"><name pos:start="421:61" pos:end="421:61">h</name><operator pos:start="421:62" pos:end="421:63">-&gt;</operator><name pos:start="421:64" pos:end="421:74">sub_mb_type</name><index pos:start="421:75" pos:end="421:77">[<expr pos:start="421:76" pos:end="421:76"><name pos:start="421:76" pos:end="421:76">i</name></expr>]</index></name></expr> ]</index></name><operator pos:start="421:80" pos:end="421:80">.</operator><name pos:start="421:81" pos:end="421:84">type</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>



        <for pos:start="429:9" pos:end="464:9">for<control pos:start="429:12" pos:end="429:53">( <init pos:start="429:14" pos:end="429:22"><expr pos:start="429:14" pos:end="429:21"><name pos:start="429:14" pos:end="429:17">list</name> <operator pos:start="429:19" pos:end="429:19">=</operator> <literal type="number" pos:start="429:21" pos:end="429:21">0</literal></expr>;</init> <condition pos:start="429:24" pos:end="429:44"><expr pos:start="429:24" pos:end="429:43"><name pos:start="429:24" pos:end="429:27">list</name> <operator pos:start="429:29" pos:end="429:29">&lt;</operator> <name pos:start="429:31" pos:end="429:43"><name pos:start="429:31" pos:end="429:31">h</name><operator pos:start="429:32" pos:end="429:33">-&gt;</operator><name pos:start="429:34" pos:end="429:43">list_count</name></name></expr>;</condition> <incr pos:start="429:46" pos:end="429:51"><expr pos:start="429:46" pos:end="429:51"><name pos:start="429:46" pos:end="429:49">list</name><operator pos:start="429:50" pos:end="429:51">++</operator></expr></incr> )</control> <block pos:start="429:55" pos:end="464:9">{<block_content pos:start="431:17" pos:end="462:17">

                <for pos:start="431:17" pos:end="462:17">for<control pos:start="431:20" pos:end="431:40">( <init pos:start="431:22" pos:end="431:27"><expr pos:start="431:22" pos:end="431:26"><name pos:start="431:22" pos:end="431:22">i</name> <operator pos:start="431:24" pos:end="431:24">=</operator> <literal type="number" pos:start="431:26" pos:end="431:26">0</literal></expr>;</init> <condition pos:start="431:29" pos:end="431:34"><expr pos:start="431:29" pos:end="431:33"><name pos:start="431:29" pos:end="431:29">i</name> <operator pos:start="431:31" pos:end="431:31">&lt;</operator> <literal type="number" pos:start="431:33" pos:end="431:33">4</literal></expr>;</condition> <incr pos:start="431:36" pos:end="431:38"><expr pos:start="431:36" pos:end="431:38"><name pos:start="431:36" pos:end="431:36">i</name><operator pos:start="431:37" pos:end="431:38">++</operator></expr></incr> )</control> <block pos:start="431:42" pos:end="462:17">{<block_content pos:start="433:21" pos:end="460:104">

                    <if_stmt pos:start="433:21" pos:end="433:62"><if pos:start="433:21" pos:end="433:62">if<condition pos:start="433:23" pos:end="433:52">(<expr pos:start="433:24" pos:end="433:51"><call pos:start="433:24" pos:end="433:51"><name pos:start="433:24" pos:end="433:32">IS_DIRECT</name><argument_list pos:start="433:33" pos:end="433:51">(<argument pos:start="433:34" pos:end="433:50"><expr pos:start="433:34" pos:end="433:50"><name pos:start="433:34" pos:end="433:50"><name pos:start="433:34" pos:end="433:34">h</name><operator pos:start="433:35" pos:end="433:36">-&gt;</operator><name pos:start="433:37" pos:end="433:47">sub_mb_type</name><index pos:start="433:48" pos:end="433:50">[<expr pos:start="433:49" pos:end="433:49"><name pos:start="433:49" pos:end="433:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="433:54" pos:end="433:62"><block_content pos:start="433:54" pos:end="433:62"> <continue pos:start="433:54" pos:end="433:62">continue;</continue></block_content></block></if></if_stmt>

                    <if_stmt pos:start="435:21" pos:end="456:21"><if pos:start="435:21" pos:end="452:21">if<condition pos:start="435:23" pos:end="435:58">(<expr pos:start="435:24" pos:end="435:57"><call pos:start="435:24" pos:end="435:57"><name pos:start="435:24" pos:end="435:29">IS_DIR</name><argument_list pos:start="435:30" pos:end="435:57">(<argument pos:start="435:31" pos:end="435:47"><expr pos:start="435:31" pos:end="435:47"><name pos:start="435:31" pos:end="435:47"><name pos:start="435:31" pos:end="435:31">h</name><operator pos:start="435:32" pos:end="435:33">-&gt;</operator><name pos:start="435:34" pos:end="435:44">sub_mb_type</name><index pos:start="435:45" pos:end="435:47">[<expr pos:start="435:46" pos:end="435:46"><name pos:start="435:46" pos:end="435:46">i</name></expr>]</index></name></expr></argument>, <argument pos:start="435:50" pos:end="435:50"><expr pos:start="435:50" pos:end="435:50"><literal type="number" pos:start="435:50" pos:end="435:50">0</literal></expr></argument>, <argument pos:start="435:53" pos:end="435:56"><expr pos:start="435:53" pos:end="435:56"><name pos:start="435:53" pos:end="435:56">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="435:59" pos:end="452:21">{<block_content pos:start="437:25" pos:end="450:45">

                        <if_stmt pos:start="437:25" pos:end="450:45"><if pos:start="437:25" pos:end="448:25">if<condition pos:start="437:27" pos:end="437:52">( <expr pos:start="437:29" pos:end="437:50"><name pos:start="437:29" pos:end="437:46"><name pos:start="437:29" pos:end="437:29">h</name><operator pos:start="437:30" pos:end="437:31">-&gt;</operator><name pos:start="437:32" pos:end="437:40">ref_count</name><index pos:start="437:41" pos:end="437:46">[<expr pos:start="437:42" pos:end="437:45"><name pos:start="437:42" pos:end="437:45">list</name></expr>]</index></name> <operator pos:start="437:48" pos:end="437:48">&gt;</operator> <literal type="number" pos:start="437:50" pos:end="437:50">1</literal></expr> )</condition><block pos:start="437:53" pos:end="448:25">{<block_content pos:start="439:29" pos:end="446:29">

                            <expr_stmt pos:start="439:29" pos:end="439:79"><expr pos:start="439:29" pos:end="439:78"><name pos:start="439:29" pos:end="439:40"><name pos:start="439:29" pos:end="439:31">ref</name><index pos:start="439:32" pos:end="439:37">[<expr pos:start="439:33" pos:end="439:36"><name pos:start="439:33" pos:end="439:36">list</name></expr>]</index><index pos:start="439:38" pos:end="439:40">[<expr pos:start="439:39" pos:end="439:39"><name pos:start="439:39" pos:end="439:39">i</name></expr>]</index></name> <operator pos:start="439:42" pos:end="439:42">=</operator> <call pos:start="439:44" pos:end="439:78"><name pos:start="439:44" pos:end="439:62">decode_cabac_mb_ref</name><argument_list pos:start="439:63" pos:end="439:78">( <argument pos:start="439:65" pos:end="439:65"><expr pos:start="439:65" pos:end="439:65"><name pos:start="439:65" pos:end="439:65">h</name></expr></argument>, <argument pos:start="439:68" pos:end="439:71"><expr pos:start="439:68" pos:end="439:71"><name pos:start="439:68" pos:end="439:71">list</name></expr></argument>, <argument pos:start="439:74" pos:end="439:76"><expr pos:start="439:74" pos:end="439:76"><literal type="number" pos:start="439:74" pos:end="439:74">4</literal><operator pos:start="439:75" pos:end="439:75">*</operator><name pos:start="439:76" pos:end="439:76">i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="441:29" pos:end="446:29"><if pos:start="441:29" pos:end="446:29">if<condition pos:start="441:31" pos:end="441:76">(<expr pos:start="441:32" pos:end="441:75"><name pos:start="441:32" pos:end="441:43"><name pos:start="441:32" pos:end="441:34">ref</name><index pos:start="441:35" pos:end="441:40">[<expr pos:start="441:36" pos:end="441:39"><name pos:start="441:36" pos:end="441:39">list</name></expr>]</index><index pos:start="441:41" pos:end="441:43">[<expr pos:start="441:42" pos:end="441:42"><name pos:start="441:42" pos:end="441:42">i</name></expr>]</index></name> <operator pos:start="441:45" pos:end="441:46">&gt;=</operator> <operator pos:start="441:48" pos:end="441:48">(</operator><name pos:start="441:49" pos:end="441:56">unsigned</name><operator pos:start="441:57" pos:end="441:57">)</operator><name pos:start="441:58" pos:end="441:75"><name pos:start="441:58" pos:end="441:58">h</name><operator pos:start="441:59" pos:end="441:60">-&gt;</operator><name pos:start="441:61" pos:end="441:69">ref_count</name><index pos:start="441:70" pos:end="441:75">[<expr pos:start="441:71" pos:end="441:74"><name pos:start="441:71" pos:end="441:74">list</name></expr>]</index></name></expr>)</condition><block pos:start="441:77" pos:end="446:29">{<block_content pos:start="443:33" pos:end="443:121">

                                <expr_stmt pos:start="443:33" pos:end="443:121"><expr pos:start="443:33" pos:end="443:120"><call pos:start="443:33" pos:end="443:120"><name pos:start="443:33" pos:end="443:38">av_log</name><argument_list pos:start="443:39" pos:end="443:120">(<argument pos:start="443:40" pos:end="443:47"><expr pos:start="443:40" pos:end="443:47"><name pos:start="443:40" pos:end="443:47"><name pos:start="443:40" pos:end="443:40">s</name><operator pos:start="443:41" pos:end="443:42">-&gt;</operator><name pos:start="443:43" pos:end="443:47">avctx</name></name></expr></argument>, <argument pos:start="443:50" pos:end="443:61"><expr pos:start="443:50" pos:end="443:61"><name pos:start="443:50" pos:end="443:61">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="443:64" pos:end="443:85"><expr pos:start="443:64" pos:end="443:85"><literal type="string" pos:start="443:64" pos:end="443:85">"Reference %d &gt;= %d\n"</literal></expr></argument>, <argument pos:start="443:88" pos:end="443:99"><expr pos:start="443:88" pos:end="443:99"><name pos:start="443:88" pos:end="443:99"><name pos:start="443:88" pos:end="443:90">ref</name><index pos:start="443:91" pos:end="443:96">[<expr pos:start="443:92" pos:end="443:95"><name pos:start="443:92" pos:end="443:95">list</name></expr>]</index><index pos:start="443:97" pos:end="443:99">[<expr pos:start="443:98" pos:end="443:98"><name pos:start="443:98" pos:end="443:98">i</name></expr>]</index></name></expr></argument>, <argument pos:start="443:102" pos:end="443:119"><expr pos:start="443:102" pos:end="443:119"><name pos:start="443:102" pos:end="443:119"><name pos:start="443:102" pos:end="443:102">h</name><operator pos:start="443:103" pos:end="443:104">-&gt;</operator><name pos:start="443:105" pos:end="443:113">ref_count</name><index pos:start="443:114" pos:end="443:119">[<expr pos:start="443:115" pos:end="443:118"><name pos:start="443:115" pos:end="443:118">list</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                            </block_content>}</block></if></if_stmt>

                        </block_content>}</block></if><else pos:start="448:26" pos:end="450:45">else<block type="pseudo" pos:start="450:29" pos:end="450:45"><block_content pos:start="450:29" pos:end="450:45">

                            <expr_stmt pos:start="450:29" pos:end="450:45"><expr pos:start="450:29" pos:end="450:44"><name pos:start="450:29" pos:end="450:40"><name pos:start="450:29" pos:end="450:31">ref</name><index pos:start="450:32" pos:end="450:37">[<expr pos:start="450:33" pos:end="450:36"><name pos:start="450:33" pos:end="450:36">list</name></expr>]</index><index pos:start="450:38" pos:end="450:40">[<expr pos:start="450:39" pos:end="450:39"><name pos:start="450:39" pos:end="450:39">i</name></expr>]</index></name> <operator pos:start="450:42" pos:end="450:42">=</operator> <literal type="number" pos:start="450:44" pos:end="450:44">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="452:23" pos:end="456:21">else <block pos:start="452:28" pos:end="456:21">{<block_content pos:start="454:25" pos:end="454:42">

                        <expr_stmt pos:start="454:25" pos:end="454:42"><expr pos:start="454:25" pos:end="454:41"><name pos:start="454:25" pos:end="454:36"><name pos:start="454:25" pos:end="454:27">ref</name><index pos:start="454:28" pos:end="454:33">[<expr pos:start="454:29" pos:end="454:32"><name pos:start="454:29" pos:end="454:32">list</name></expr>]</index><index pos:start="454:34" pos:end="454:36">[<expr pos:start="454:35" pos:end="454:35"><name pos:start="454:35" pos:end="454:35">i</name></expr>]</index></name> <operator pos:start="454:38" pos:end="454:38">=</operator> <operator pos:start="454:40" pos:end="454:40">-</operator><literal type="number" pos:start="454:41" pos:end="454:41">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                                                       <expr_stmt pos:start="458:56" pos:end="460:104"><expr pos:start="458:56" pos:end="460:103"><name pos:start="458:56" pos:end="458:89"><name pos:start="458:56" pos:end="458:56">h</name><operator pos:start="458:57" pos:end="458:58">-&gt;</operator><name pos:start="458:59" pos:end="458:67">ref_cache</name><index pos:start="458:68" pos:end="458:73">[<expr pos:start="458:69" pos:end="458:72"><name pos:start="458:69" pos:end="458:72">list</name></expr>]</index><index pos:start="458:74" pos:end="458:89">[ <expr pos:start="458:76" pos:end="458:87"><name pos:start="458:76" pos:end="458:85"><name pos:start="458:76" pos:end="458:80">scan8</name><index pos:start="458:81" pos:end="458:85">[<expr pos:start="458:82" pos:end="458:84"><literal type="number" pos:start="458:82" pos:end="458:82">4</literal><operator pos:start="458:83" pos:end="458:83">*</operator><name pos:start="458:84" pos:end="458:84">i</name></expr>]</index></name><operator pos:start="458:86" pos:end="458:86">+</operator><literal type="number" pos:start="458:87" pos:end="458:87">1</literal></expr> ]</index></name><operator pos:start="458:90" pos:end="458:90">=</operator>

                    <name pos:start="460:21" pos:end="460:54"><name pos:start="460:21" pos:end="460:21">h</name><operator pos:start="460:22" pos:end="460:23">-&gt;</operator><name pos:start="460:24" pos:end="460:32">ref_cache</name><index pos:start="460:33" pos:end="460:38">[<expr pos:start="460:34" pos:end="460:37"><name pos:start="460:34" pos:end="460:37">list</name></expr>]</index><index pos:start="460:39" pos:end="460:54">[ <expr pos:start="460:41" pos:end="460:52"><name pos:start="460:41" pos:end="460:50"><name pos:start="460:41" pos:end="460:45">scan8</name><index pos:start="460:46" pos:end="460:50">[<expr pos:start="460:47" pos:end="460:49"><literal type="number" pos:start="460:47" pos:end="460:47">4</literal><operator pos:start="460:48" pos:end="460:48">*</operator><name pos:start="460:49" pos:end="460:49">i</name></expr>]</index></name><operator pos:start="460:51" pos:end="460:51">+</operator><literal type="number" pos:start="460:52" pos:end="460:52">8</literal></expr> ]</index></name><operator pos:start="460:55" pos:end="460:55">=</operator><name pos:start="460:56" pos:end="460:89"><name pos:start="460:56" pos:end="460:56">h</name><operator pos:start="460:57" pos:end="460:58">-&gt;</operator><name pos:start="460:59" pos:end="460:67">ref_cache</name><index pos:start="460:68" pos:end="460:73">[<expr pos:start="460:69" pos:end="460:72"><name pos:start="460:69" pos:end="460:72">list</name></expr>]</index><index pos:start="460:74" pos:end="460:89">[ <expr pos:start="460:76" pos:end="460:87"><name pos:start="460:76" pos:end="460:85"><name pos:start="460:76" pos:end="460:80">scan8</name><index pos:start="460:81" pos:end="460:85">[<expr pos:start="460:82" pos:end="460:84"><literal type="number" pos:start="460:82" pos:end="460:82">4</literal><operator pos:start="460:83" pos:end="460:83">*</operator><name pos:start="460:84" pos:end="460:84">i</name></expr>]</index></name><operator pos:start="460:86" pos:end="460:86">+</operator><literal type="number" pos:start="460:87" pos:end="460:87">9</literal></expr> ]</index></name><operator pos:start="460:90" pos:end="460:90">=</operator> <name pos:start="460:92" pos:end="460:103"><name pos:start="460:92" pos:end="460:94">ref</name><index pos:start="460:95" pos:end="460:100">[<expr pos:start="460:96" pos:end="460:99"><name pos:start="460:96" pos:end="460:99">list</name></expr>]</index><index pos:start="460:101" pos:end="460:103">[<expr pos:start="460:102" pos:end="460:102"><name pos:start="460:102" pos:end="460:102">i</name></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></for>

        </block_content>}</block></for>



        <if_stmt pos:start="468:9" pos:end="470:51"><if pos:start="468:9" pos:end="470:51">if<condition pos:start="468:11" pos:end="468:26">(<expr pos:start="468:12" pos:end="468:25"><name pos:start="468:12" pos:end="468:25">dct8x8_allowed</name></expr>)</condition><block type="pseudo" pos:start="470:13" pos:end="470:51"><block_content pos:start="470:13" pos:end="470:51">

            <expr_stmt pos:start="470:13" pos:end="470:51"><expr pos:start="470:13" pos:end="470:50"><name pos:start="470:13" pos:end="470:26">dct8x8_allowed</name> <operator pos:start="470:28" pos:end="470:28">=</operator> <call pos:start="470:30" pos:end="470:50"><name pos:start="470:30" pos:end="470:47">get_dct8x8_allowed</name><argument_list pos:start="470:48" pos:end="470:50">(<argument pos:start="470:49" pos:end="470:49"><expr pos:start="470:49" pos:end="470:49"><name pos:start="470:49" pos:end="470:49">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <for pos:start="474:9" pos:end="584:9">for<control pos:start="474:12" pos:end="474:47">(<init pos:start="474:13" pos:end="474:19"><expr pos:start="474:13" pos:end="474:18"><name pos:start="474:13" pos:end="474:16">list</name><operator pos:start="474:17" pos:end="474:17">=</operator><literal type="number" pos:start="474:18" pos:end="474:18">0</literal></expr>;</init> <condition pos:start="474:21" pos:end="474:39"><expr pos:start="474:21" pos:end="474:38"><name pos:start="474:21" pos:end="474:24">list</name><operator pos:start="474:25" pos:end="474:25">&lt;</operator><name pos:start="474:26" pos:end="474:38"><name pos:start="474:26" pos:end="474:26">h</name><operator pos:start="474:27" pos:end="474:28">-&gt;</operator><name pos:start="474:29" pos:end="474:38">list_count</name></name></expr>;</condition> <incr pos:start="474:41" pos:end="474:46"><expr pos:start="474:41" pos:end="474:46"><name pos:start="474:41" pos:end="474:44">list</name><operator pos:start="474:45" pos:end="474:46">++</operator></expr></incr>)</control><block pos:start="474:48" pos:end="584:9">{<block_content pos:start="476:13" pos:end="582:13">

            <for pos:start="476:13" pos:end="582:13">for<control pos:start="476:16" pos:end="476:30">(<init pos:start="476:17" pos:end="476:20"><expr pos:start="476:17" pos:end="476:19"><name pos:start="476:17" pos:end="476:17">i</name><operator pos:start="476:18" pos:end="476:18">=</operator><literal type="number" pos:start="476:19" pos:end="476:19">0</literal></expr>;</init> <condition pos:start="476:22" pos:end="476:25"><expr pos:start="476:22" pos:end="476:24"><name pos:start="476:22" pos:end="476:22">i</name><operator pos:start="476:23" pos:end="476:23">&lt;</operator><literal type="number" pos:start="476:24" pos:end="476:24">4</literal></expr>;</condition> <incr pos:start="476:27" pos:end="476:29"><expr pos:start="476:27" pos:end="476:29"><name pos:start="476:27" pos:end="476:27">i</name><operator pos:start="476:28" pos:end="476:29">++</operator></expr></incr>)</control><block pos:start="476:31" pos:end="582:13">{<block_content pos:start="478:17" pos:end="580:17">

                <expr_stmt pos:start="478:17" pos:end="478:86"><expr pos:start="478:17" pos:end="478:85"><name pos:start="478:17" pos:end="478:50"><name pos:start="478:17" pos:end="478:17">h</name><operator pos:start="478:18" pos:end="478:19">-&gt;</operator><name pos:start="478:20" pos:end="478:28">ref_cache</name><index pos:start="478:29" pos:end="478:34">[<expr pos:start="478:30" pos:end="478:33"><name pos:start="478:30" pos:end="478:33">list</name></expr>]</index><index pos:start="478:35" pos:end="478:50">[ <expr pos:start="478:37" pos:end="478:46"><name pos:start="478:37" pos:end="478:46"><name pos:start="478:37" pos:end="478:41">scan8</name><index pos:start="478:42" pos:end="478:46">[<expr pos:start="478:43" pos:end="478:45"><literal type="number" pos:start="478:43" pos:end="478:43">4</literal><operator pos:start="478:44" pos:end="478:44">*</operator><name pos:start="478:45" pos:end="478:45">i</name></expr>]</index></name></expr>   ]</index></name><operator pos:start="478:51" pos:end="478:51">=</operator><name pos:start="478:52" pos:end="478:85"><name pos:start="478:52" pos:end="478:52">h</name><operator pos:start="478:53" pos:end="478:54">-&gt;</operator><name pos:start="478:55" pos:end="478:63">ref_cache</name><index pos:start="478:64" pos:end="478:69">[<expr pos:start="478:65" pos:end="478:68"><name pos:start="478:65" pos:end="478:68">list</name></expr>]</index><index pos:start="478:70" pos:end="478:85">[ <expr pos:start="478:72" pos:end="478:83"><name pos:start="478:72" pos:end="478:81"><name pos:start="478:72" pos:end="478:76">scan8</name><index pos:start="478:77" pos:end="478:81">[<expr pos:start="478:78" pos:end="478:80"><literal type="number" pos:start="478:78" pos:end="478:78">4</literal><operator pos:start="478:79" pos:end="478:79">*</operator><name pos:start="478:80" pos:end="478:80">i</name></expr>]</index></name><operator pos:start="478:82" pos:end="478:82">+</operator><literal type="number" pos:start="478:83" pos:end="478:83">1</literal></expr> ]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="480:17" pos:end="486:17"><if pos:start="480:17" pos:end="486:17">if<condition pos:start="480:19" pos:end="480:48">(<expr pos:start="480:20" pos:end="480:47"><call pos:start="480:20" pos:end="480:47"><name pos:start="480:20" pos:end="480:28">IS_DIRECT</name><argument_list pos:start="480:29" pos:end="480:47">(<argument pos:start="480:30" pos:end="480:46"><expr pos:start="480:30" pos:end="480:46"><name pos:start="480:30" pos:end="480:46"><name pos:start="480:30" pos:end="480:30">h</name><operator pos:start="480:31" pos:end="480:32">-&gt;</operator><name pos:start="480:33" pos:end="480:43">sub_mb_type</name><index pos:start="480:44" pos:end="480:46">[<expr pos:start="480:45" pos:end="480:45"><name pos:start="480:45" pos:end="480:45">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="480:49" pos:end="486:17">{<block_content pos:start="482:21" pos:end="484:29">

                    <expr_stmt pos:start="482:21" pos:end="482:82"><expr pos:start="482:21" pos:end="482:81"><call pos:start="482:21" pos:end="482:81"><name pos:start="482:21" pos:end="482:34">fill_rectangle</name><argument_list pos:start="482:35" pos:end="482:81">(<argument pos:start="482:36" pos:end="482:65"><expr pos:start="482:36" pos:end="482:65"><name pos:start="482:36" pos:end="482:65"><name pos:start="482:36" pos:end="482:36">h</name><operator pos:start="482:37" pos:end="482:38">-&gt;</operator><name pos:start="482:39" pos:end="482:47">mvd_cache</name><index pos:start="482:48" pos:end="482:53">[<expr pos:start="482:49" pos:end="482:52"><name pos:start="482:49" pos:end="482:52">list</name></expr>]</index><index pos:start="482:54" pos:end="482:65">[<expr pos:start="482:55" pos:end="482:64"><name pos:start="482:55" pos:end="482:64"><name pos:start="482:55" pos:end="482:59">scan8</name><index pos:start="482:60" pos:end="482:64">[<expr pos:start="482:61" pos:end="482:63"><literal type="number" pos:start="482:61" pos:end="482:61">4</literal><operator pos:start="482:62" pos:end="482:62">*</operator><name pos:start="482:63" pos:end="482:63">i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="482:68" pos:end="482:68"><expr pos:start="482:68" pos:end="482:68"><literal type="number" pos:start="482:68" pos:end="482:68">2</literal></expr></argument>, <argument pos:start="482:71" pos:end="482:71"><expr pos:start="482:71" pos:end="482:71"><literal type="number" pos:start="482:71" pos:end="482:71">2</literal></expr></argument>, <argument pos:start="482:74" pos:end="482:74"><expr pos:start="482:74" pos:end="482:74"><literal type="number" pos:start="482:74" pos:end="482:74">8</literal></expr></argument>, <argument pos:start="482:77" pos:end="482:77"><expr pos:start="482:77" pos:end="482:77"><literal type="number" pos:start="482:77" pos:end="482:77">0</literal></expr></argument>, <argument pos:start="482:80" pos:end="482:80"><expr pos:start="482:80" pos:end="482:80"><literal type="number" pos:start="482:80" pos:end="482:80">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <continue pos:start="484:21" pos:end="484:29">continue;</continue>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="490:17" pos:end="580:17"><if pos:start="490:17" pos:end="574:17">if<condition pos:start="490:19" pos:end="490:87">(<expr pos:start="490:20" pos:end="490:86"><call pos:start="490:20" pos:end="490:53"><name pos:start="490:20" pos:end="490:25">IS_DIR</name><argument_list pos:start="490:26" pos:end="490:53">(<argument pos:start="490:27" pos:end="490:43"><expr pos:start="490:27" pos:end="490:43"><name pos:start="490:27" pos:end="490:43"><name pos:start="490:27" pos:end="490:27">h</name><operator pos:start="490:28" pos:end="490:29">-&gt;</operator><name pos:start="490:30" pos:end="490:40">sub_mb_type</name><index pos:start="490:41" pos:end="490:43">[<expr pos:start="490:42" pos:end="490:42"><name pos:start="490:42" pos:end="490:42">i</name></expr>]</index></name></expr></argument>, <argument pos:start="490:46" pos:end="490:46"><expr pos:start="490:46" pos:end="490:46"><literal type="number" pos:start="490:46" pos:end="490:46">0</literal></expr></argument>, <argument pos:start="490:49" pos:end="490:52"><expr pos:start="490:49" pos:end="490:52"><name pos:start="490:49" pos:end="490:52">list</name></expr></argument>)</argument_list></call> <operator pos:start="490:55" pos:end="490:56">&amp;&amp;</operator> <operator pos:start="490:58" pos:end="490:58">!</operator><call pos:start="490:59" pos:end="490:86"><name pos:start="490:59" pos:end="490:67">IS_DIRECT</name><argument_list pos:start="490:68" pos:end="490:86">(<argument pos:start="490:69" pos:end="490:85"><expr pos:start="490:69" pos:end="490:85"><name pos:start="490:69" pos:end="490:85"><name pos:start="490:69" pos:end="490:69">h</name><operator pos:start="490:70" pos:end="490:71">-&gt;</operator><name pos:start="490:72" pos:end="490:82">sub_mb_type</name><index pos:start="490:83" pos:end="490:85">[<expr pos:start="490:84" pos:end="490:84"><name pos:start="490:84" pos:end="490:84">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="490:88" pos:end="574:17">{<block_content pos:start="492:21" pos:end="572:21">

                    <decl_stmt pos:start="492:21" pos:end="492:61"><decl pos:start="492:21" pos:end="492:60"><type pos:start="492:21" pos:end="492:29"><specifier pos:start="492:21" pos:end="492:25">const</specifier> <name pos:start="492:27" pos:end="492:29">int</name></type> <name pos:start="492:31" pos:end="492:41">sub_mb_type</name><init pos:start="492:42" pos:end="492:60">= <expr pos:start="492:44" pos:end="492:60"><name pos:start="492:44" pos:end="492:60"><name pos:start="492:44" pos:end="492:44">h</name><operator pos:start="492:45" pos:end="492:46">-&gt;</operator><name pos:start="492:47" pos:end="492:57">sub_mb_type</name><index pos:start="492:58" pos:end="492:60">[<expr pos:start="492:59" pos:end="492:59"><name pos:start="492:59" pos:end="492:59">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="494:21" pos:end="494:96"><decl pos:start="494:21" pos:end="494:95"><type pos:start="494:21" pos:end="494:29"><specifier pos:start="494:21" pos:end="494:25">const</specifier> <name pos:start="494:27" pos:end="494:29">int</name></type> <name pos:start="494:31" pos:end="494:41">block_width</name><init pos:start="494:42" pos:end="494:95">= <expr pos:start="494:44" pos:end="494:95"><ternary pos:start="494:44" pos:end="494:95"><condition pos:start="494:44" pos:end="494:89"><expr pos:start="494:44" pos:end="494:87"><operator pos:start="494:44" pos:end="494:44">(</operator><name pos:start="494:45" pos:end="494:55">sub_mb_type</name> <operator pos:start="494:57" pos:end="494:57">&amp;</operator> <operator pos:start="494:59" pos:end="494:59">(</operator><name pos:start="494:60" pos:end="494:72">MB_TYPE_16x16</name><operator pos:start="494:73" pos:end="494:73">|</operator><name pos:start="494:74" pos:end="494:85">MB_TYPE_16x8</name><operator pos:start="494:86" pos:end="494:86">)</operator><operator pos:start="494:87" pos:end="494:87">)</operator></expr> ?</condition><then pos:start="494:91" pos:end="494:91"> <expr pos:start="494:91" pos:end="494:91"><literal type="number" pos:start="494:91" pos:end="494:91">2</literal></expr> </then><else pos:start="494:93" pos:end="494:95">: <expr pos:start="494:95" pos:end="494:95"><literal type="number" pos:start="494:95" pos:end="494:95">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                    <for pos:start="496:21" pos:end="572:21">for<control pos:start="496:24" pos:end="496:59">(<init pos:start="496:25" pos:end="496:28"><expr pos:start="496:25" pos:end="496:27"><name pos:start="496:25" pos:end="496:25">j</name><operator pos:start="496:26" pos:end="496:26">=</operator><literal type="number" pos:start="496:27" pos:end="496:27">0</literal></expr>;</init> <condition pos:start="496:30" pos:end="496:54"><expr pos:start="496:30" pos:end="496:53"><name pos:start="496:30" pos:end="496:30">j</name><operator pos:start="496:31" pos:end="496:31">&lt;</operator><name pos:start="496:32" pos:end="496:53"><name pos:start="496:32" pos:end="496:50">sub_partition_count</name><index pos:start="496:51" pos:end="496:53">[<expr pos:start="496:52" pos:end="496:52"><name pos:start="496:52" pos:end="496:52">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="496:56" pos:end="496:58"><expr pos:start="496:56" pos:end="496:58"><name pos:start="496:56" pos:end="496:56">j</name><operator pos:start="496:57" pos:end="496:58">++</operator></expr></incr>)</control><block pos:start="496:60" pos:end="572:21">{<block_content pos:start="498:25" pos:end="570:47">

                        <decl_stmt pos:start="498:25" pos:end="498:37"><decl pos:start="498:25" pos:end="498:31"><type pos:start="498:25" pos:end="498:27"><name pos:start="498:25" pos:end="498:27">int</name></type> <name pos:start="498:29" pos:end="498:31">mpx</name></decl>, <decl pos:start="498:34" pos:end="498:36"><type ref="prev" pos:start="498:25" pos:end="498:27"/><name pos:start="498:34" pos:end="498:36">mpy</name></decl>;</decl_stmt>

                        <decl_stmt pos:start="500:25" pos:end="500:35"><decl pos:start="500:25" pos:end="500:30"><type pos:start="500:25" pos:end="500:27"><name pos:start="500:25" pos:end="500:27">int</name></type> <name pos:start="500:29" pos:end="500:30">mx</name></decl>, <decl pos:start="500:33" pos:end="500:34"><type ref="prev" pos:start="500:25" pos:end="500:27"/><name pos:start="500:33" pos:end="500:34">my</name></decl>;</decl_stmt>

                        <decl_stmt pos:start="502:25" pos:end="502:61"><decl pos:start="502:25" pos:end="502:60"><type pos:start="502:25" pos:end="502:33"><specifier pos:start="502:25" pos:end="502:29">const</specifier> <name pos:start="502:31" pos:end="502:33">int</name></type> <name pos:start="502:35" pos:end="502:39">index</name><init pos:start="502:40" pos:end="502:60">= <expr pos:start="502:42" pos:end="502:60"><literal type="number" pos:start="502:42" pos:end="502:42">4</literal><operator pos:start="502:43" pos:end="502:43">*</operator><name pos:start="502:44" pos:end="502:44">i</name> <operator pos:start="502:46" pos:end="502:46">+</operator> <name pos:start="502:48" pos:end="502:58">block_width</name><operator pos:start="502:59" pos:end="502:59">*</operator><name pos:start="502:60" pos:end="502:60">j</name></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="504:25" pos:end="504:84"><expr pos:start="504:25" pos:end="504:83"><call pos:start="504:25" pos:end="504:44"><name pos:start="504:25" pos:end="504:31">int16_t</name> <argument_list pos:start="504:33" pos:end="504:44">(<argument pos:start="504:34" pos:end="504:43"><expr pos:start="504:34" pos:end="504:43"><operator pos:start="504:34" pos:end="504:34">*</operator> <name pos:start="504:36" pos:end="504:43">mv_cache</name></expr></argument>)</argument_list></call><index pos:start="504:45" pos:end="504:47">[<expr pos:start="504:46" pos:end="504:46"><literal type="number" pos:start="504:46" pos:end="504:46">2</literal></expr>]</index><operator pos:start="504:48" pos:end="504:48">=</operator> <operator pos:start="504:50" pos:end="504:50">&amp;</operator><name pos:start="504:51" pos:end="504:83"><name pos:start="504:51" pos:end="504:51">h</name><operator pos:start="504:52" pos:end="504:53">-&gt;</operator><name pos:start="504:54" pos:end="504:61">mv_cache</name><index pos:start="504:62" pos:end="504:67">[<expr pos:start="504:63" pos:end="504:66"><name pos:start="504:63" pos:end="504:66">list</name></expr>]</index><index pos:start="504:68" pos:end="504:83">[ <expr pos:start="504:70" pos:end="504:81"><name pos:start="504:70" pos:end="504:81"><name pos:start="504:70" pos:end="504:74">scan8</name><index pos:start="504:75" pos:end="504:81">[<expr pos:start="504:76" pos:end="504:80"><name pos:start="504:76" pos:end="504:80">index</name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="506:25" pos:end="506:86"><expr pos:start="506:25" pos:end="506:85"><call pos:start="506:25" pos:end="506:45"><name pos:start="506:25" pos:end="506:31">uint8_t</name> <argument_list pos:start="506:33" pos:end="506:45">(<argument pos:start="506:34" pos:end="506:44"><expr pos:start="506:34" pos:end="506:44"><operator pos:start="506:34" pos:end="506:34">*</operator> <name pos:start="506:36" pos:end="506:44">mvd_cache</name></expr></argument>)</argument_list></call><index pos:start="506:46" pos:end="506:48">[<expr pos:start="506:47" pos:end="506:47"><literal type="number" pos:start="506:47" pos:end="506:47">2</literal></expr>]</index><operator pos:start="506:49" pos:end="506:49">=</operator> <operator pos:start="506:51" pos:end="506:51">&amp;</operator><name pos:start="506:52" pos:end="506:85"><name pos:start="506:52" pos:end="506:52">h</name><operator pos:start="506:53" pos:end="506:54">-&gt;</operator><name pos:start="506:55" pos:end="506:63">mvd_cache</name><index pos:start="506:64" pos:end="506:69">[<expr pos:start="506:65" pos:end="506:68"><name pos:start="506:65" pos:end="506:68">list</name></expr>]</index><index pos:start="506:70" pos:end="506:85">[ <expr pos:start="506:72" pos:end="506:83"><name pos:start="506:72" pos:end="506:83"><name pos:start="506:72" pos:end="506:76">scan8</name><index pos:start="506:77" pos:end="506:83">[<expr pos:start="506:78" pos:end="506:82"><name pos:start="506:78" pos:end="506:82">index</name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="508:25" pos:end="508:111"><expr pos:start="508:25" pos:end="508:110"><call pos:start="508:25" pos:end="508:110"><name pos:start="508:25" pos:end="508:35">pred_motion</name><argument_list pos:start="508:36" pos:end="508:110">(<argument pos:start="508:37" pos:end="508:37"><expr pos:start="508:37" pos:end="508:37"><name pos:start="508:37" pos:end="508:37">h</name></expr></argument>, <argument pos:start="508:40" pos:end="508:44"><expr pos:start="508:40" pos:end="508:44"><name pos:start="508:40" pos:end="508:44">index</name></expr></argument>, <argument pos:start="508:47" pos:end="508:57"><expr pos:start="508:47" pos:end="508:57"><name pos:start="508:47" pos:end="508:57">block_width</name></expr></argument>, <argument pos:start="508:60" pos:end="508:63"><expr pos:start="508:60" pos:end="508:63"><name pos:start="508:60" pos:end="508:63">list</name></expr></argument>, <argument pos:start="508:66" pos:end="508:99"><expr pos:start="508:66" pos:end="508:99"><name pos:start="508:66" pos:end="508:99"><name pos:start="508:66" pos:end="508:66">h</name><operator pos:start="508:67" pos:end="508:68">-&gt;</operator><name pos:start="508:69" pos:end="508:77">ref_cache</name><index pos:start="508:78" pos:end="508:83">[<expr pos:start="508:79" pos:end="508:82"><name pos:start="508:79" pos:end="508:82">list</name></expr>]</index><index pos:start="508:84" pos:end="508:99">[ <expr pos:start="508:86" pos:end="508:97"><name pos:start="508:86" pos:end="508:97"><name pos:start="508:86" pos:end="508:90">scan8</name><index pos:start="508:91" pos:end="508:97">[<expr pos:start="508:92" pos:end="508:96"><name pos:start="508:92" pos:end="508:96">index</name></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="508:102" pos:end="508:104"><expr pos:start="508:102" pos:end="508:104"><operator pos:start="508:102" pos:end="508:102">&amp;</operator><name pos:start="508:103" pos:end="508:104">mx</name></expr></argument>, <argument pos:start="508:107" pos:end="508:109"><expr pos:start="508:107" pos:end="508:109"><operator pos:start="508:107" pos:end="508:107">&amp;</operator><name pos:start="508:108" pos:end="508:109">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <macro pos:start="510:25" pos:end="510:60"><name pos:start="510:25" pos:end="510:43">DECODE_CABAC_MB_MVD</name><argument_list pos:start="510:44" pos:end="510:60">( <argument pos:start="510:46" pos:end="510:46">h</argument>, <argument pos:start="510:49" pos:end="510:52">list</argument>, <argument pos:start="510:55" pos:end="510:59">index</argument>)</argument_list></macro>

                        <expr_stmt pos:start="512:25" pos:end="512:70"><expr pos:start="512:25" pos:end="512:69"><call pos:start="512:25" pos:end="512:69"><name pos:start="512:25" pos:end="512:31">tprintf</name><argument_list pos:start="512:32" pos:end="512:69">(<argument pos:start="512:33" pos:end="512:40"><expr pos:start="512:33" pos:end="512:40"><name pos:start="512:33" pos:end="512:40"><name pos:start="512:33" pos:end="512:33">s</name><operator pos:start="512:34" pos:end="512:35">-&gt;</operator><name pos:start="512:36" pos:end="512:40">avctx</name></name></expr></argument>, <argument pos:start="512:43" pos:end="512:60"><expr pos:start="512:43" pos:end="512:60"><literal type="string" pos:start="512:43" pos:end="512:60">"final mv:%d %d\n"</literal></expr></argument>, <argument pos:start="512:63" pos:end="512:64"><expr pos:start="512:63" pos:end="512:64"><name pos:start="512:63" pos:end="512:64">mx</name></expr></argument>, <argument pos:start="512:67" pos:end="512:68"><expr pos:start="512:67" pos:end="512:68"><name pos:start="512:67" pos:end="512:68">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <if_stmt pos:start="516:25" pos:end="560:25"><if pos:start="516:25" pos:end="536:25">if<condition pos:start="516:27" pos:end="516:51">(<expr pos:start="516:28" pos:end="516:50"><call pos:start="516:28" pos:end="516:50"><name pos:start="516:28" pos:end="516:37">IS_SUB_8X8</name><argument_list pos:start="516:38" pos:end="516:50">(<argument pos:start="516:39" pos:end="516:49"><expr pos:start="516:39" pos:end="516:49"><name pos:start="516:39" pos:end="516:49">sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="516:52" pos:end="536:25">{<block_content pos:start="518:29" pos:end="534:70">

                            <expr_stmt pos:start="518:29" pos:end="520:67"><expr pos:start="518:29" pos:end="520:66"><name pos:start="518:29" pos:end="518:44"><name pos:start="518:29" pos:end="518:36">mv_cache</name><index pos:start="518:37" pos:end="518:41">[ <expr pos:start="518:39" pos:end="518:39"><literal type="number" pos:start="518:39" pos:end="518:39">1</literal></expr> ]</index><index pos:start="518:42" pos:end="518:44">[<expr pos:start="518:43" pos:end="518:43"><literal type="number" pos:start="518:43" pos:end="518:43">0</literal></expr>]</index></name><operator pos:start="518:45" pos:end="518:45">=</operator>

                            <name pos:start="520:29" pos:end="520:44"><name pos:start="520:29" pos:end="520:36">mv_cache</name><index pos:start="520:37" pos:end="520:41">[ <expr pos:start="520:39" pos:end="520:39"><literal type="number" pos:start="520:39" pos:end="520:39">8</literal></expr> ]</index><index pos:start="520:42" pos:end="520:44">[<expr pos:start="520:43" pos:end="520:43"><literal type="number" pos:start="520:43" pos:end="520:43">0</literal></expr>]</index></name><operator pos:start="520:45" pos:end="520:45">=</operator> <name pos:start="520:47" pos:end="520:62"><name pos:start="520:47" pos:end="520:54">mv_cache</name><index pos:start="520:55" pos:end="520:59">[ <expr pos:start="520:57" pos:end="520:57"><literal type="number" pos:start="520:57" pos:end="520:57">9</literal></expr> ]</index><index pos:start="520:60" pos:end="520:62">[<expr pos:start="520:61" pos:end="520:61"><literal type="number" pos:start="520:61" pos:end="520:61">0</literal></expr>]</index></name><operator pos:start="520:63" pos:end="520:63">=</operator> <name pos:start="520:65" pos:end="520:66">mx</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="522:29" pos:end="524:67"><expr pos:start="522:29" pos:end="524:66"><name pos:start="522:29" pos:end="522:44"><name pos:start="522:29" pos:end="522:36">mv_cache</name><index pos:start="522:37" pos:end="522:41">[ <expr pos:start="522:39" pos:end="522:39"><literal type="number" pos:start="522:39" pos:end="522:39">1</literal></expr> ]</index><index pos:start="522:42" pos:end="522:44">[<expr pos:start="522:43" pos:end="522:43"><literal type="number" pos:start="522:43" pos:end="522:43">1</literal></expr>]</index></name><operator pos:start="522:45" pos:end="522:45">=</operator>

                            <name pos:start="524:29" pos:end="524:44"><name pos:start="524:29" pos:end="524:36">mv_cache</name><index pos:start="524:37" pos:end="524:41">[ <expr pos:start="524:39" pos:end="524:39"><literal type="number" pos:start="524:39" pos:end="524:39">8</literal></expr> ]</index><index pos:start="524:42" pos:end="524:44">[<expr pos:start="524:43" pos:end="524:43"><literal type="number" pos:start="524:43" pos:end="524:43">1</literal></expr>]</index></name><operator pos:start="524:45" pos:end="524:45">=</operator> <name pos:start="524:47" pos:end="524:62"><name pos:start="524:47" pos:end="524:54">mv_cache</name><index pos:start="524:55" pos:end="524:59">[ <expr pos:start="524:57" pos:end="524:57"><literal type="number" pos:start="524:57" pos:end="524:57">9</literal></expr> ]</index><index pos:start="524:60" pos:end="524:62">[<expr pos:start="524:61" pos:end="524:61"><literal type="number" pos:start="524:61" pos:end="524:61">1</literal></expr>]</index></name><operator pos:start="524:63" pos:end="524:63">=</operator> <name pos:start="524:65" pos:end="524:66">my</name></expr>;</expr_stmt>



                            <expr_stmt pos:start="528:29" pos:end="530:70"><expr pos:start="528:29" pos:end="530:69"><name pos:start="528:29" pos:end="528:45"><name pos:start="528:29" pos:end="528:37">mvd_cache</name><index pos:start="528:38" pos:end="528:42">[ <expr pos:start="528:40" pos:end="528:40"><literal type="number" pos:start="528:40" pos:end="528:40">1</literal></expr> ]</index><index pos:start="528:43" pos:end="528:45">[<expr pos:start="528:44" pos:end="528:44"><literal type="number" pos:start="528:44" pos:end="528:44">0</literal></expr>]</index></name><operator pos:start="528:46" pos:end="528:46">=</operator>

                            <name pos:start="530:29" pos:end="530:45"><name pos:start="530:29" pos:end="530:37">mvd_cache</name><index pos:start="530:38" pos:end="530:42">[ <expr pos:start="530:40" pos:end="530:40"><literal type="number" pos:start="530:40" pos:end="530:40">8</literal></expr> ]</index><index pos:start="530:43" pos:end="530:45">[<expr pos:start="530:44" pos:end="530:44"><literal type="number" pos:start="530:44" pos:end="530:44">0</literal></expr>]</index></name><operator pos:start="530:46" pos:end="530:46">=</operator> <name pos:start="530:48" pos:end="530:64"><name pos:start="530:48" pos:end="530:56">mvd_cache</name><index pos:start="530:57" pos:end="530:61">[ <expr pos:start="530:59" pos:end="530:59"><literal type="number" pos:start="530:59" pos:end="530:59">9</literal></expr> ]</index><index pos:start="530:62" pos:end="530:64">[<expr pos:start="530:63" pos:end="530:63"><literal type="number" pos:start="530:63" pos:end="530:63">0</literal></expr>]</index></name><operator pos:start="530:65" pos:end="530:65">=</operator> <name pos:start="530:67" pos:end="530:69">mpx</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="532:29" pos:end="534:70"><expr pos:start="532:29" pos:end="534:69"><name pos:start="532:29" pos:end="532:45"><name pos:start="532:29" pos:end="532:37">mvd_cache</name><index pos:start="532:38" pos:end="532:42">[ <expr pos:start="532:40" pos:end="532:40"><literal type="number" pos:start="532:40" pos:end="532:40">1</literal></expr> ]</index><index pos:start="532:43" pos:end="532:45">[<expr pos:start="532:44" pos:end="532:44"><literal type="number" pos:start="532:44" pos:end="532:44">1</literal></expr>]</index></name><operator pos:start="532:46" pos:end="532:46">=</operator>

                            <name pos:start="534:29" pos:end="534:45"><name pos:start="534:29" pos:end="534:37">mvd_cache</name><index pos:start="534:38" pos:end="534:42">[ <expr pos:start="534:40" pos:end="534:40"><literal type="number" pos:start="534:40" pos:end="534:40">8</literal></expr> ]</index><index pos:start="534:43" pos:end="534:45">[<expr pos:start="534:44" pos:end="534:44"><literal type="number" pos:start="534:44" pos:end="534:44">1</literal></expr>]</index></name><operator pos:start="534:46" pos:end="534:46">=</operator> <name pos:start="534:48" pos:end="534:64"><name pos:start="534:48" pos:end="534:56">mvd_cache</name><index pos:start="534:57" pos:end="534:61">[ <expr pos:start="534:59" pos:end="534:59"><literal type="number" pos:start="534:59" pos:end="534:59">9</literal></expr> ]</index><index pos:start="534:62" pos:end="534:64">[<expr pos:start="534:63" pos:end="534:63"><literal type="number" pos:start="534:63" pos:end="534:63">1</literal></expr>]</index></name><operator pos:start="534:65" pos:end="534:65">=</operator> <name pos:start="534:67" pos:end="534:69">mpy</name></expr>;</expr_stmt>

                        </block_content>}</block></if><if type="elseif" pos:start="536:26" pos:end="548:25">else if<condition pos:start="536:33" pos:end="536:57">(<expr pos:start="536:34" pos:end="536:56"><call pos:start="536:34" pos:end="536:56"><name pos:start="536:34" pos:end="536:43">IS_SUB_8X4</name><argument_list pos:start="536:44" pos:end="536:56">(<argument pos:start="536:45" pos:end="536:55"><expr pos:start="536:45" pos:end="536:55"><name pos:start="536:45" pos:end="536:55">sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="536:58" pos:end="548:25">{<block_content pos:start="538:29" pos:end="546:51">

                            <expr_stmt pos:start="538:29" pos:end="538:49"><expr pos:start="538:29" pos:end="538:48"><name pos:start="538:29" pos:end="538:44"><name pos:start="538:29" pos:end="538:36">mv_cache</name><index pos:start="538:37" pos:end="538:41">[ <expr pos:start="538:39" pos:end="538:39"><literal type="number" pos:start="538:39" pos:end="538:39">1</literal></expr> ]</index><index pos:start="538:42" pos:end="538:44">[<expr pos:start="538:43" pos:end="538:43"><literal type="number" pos:start="538:43" pos:end="538:43">0</literal></expr>]</index></name><operator pos:start="538:45" pos:end="538:45">=</operator> <name pos:start="538:47" pos:end="538:48">mx</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="540:29" pos:end="540:49"><expr pos:start="540:29" pos:end="540:48"><name pos:start="540:29" pos:end="540:44"><name pos:start="540:29" pos:end="540:36">mv_cache</name><index pos:start="540:37" pos:end="540:41">[ <expr pos:start="540:39" pos:end="540:39"><literal type="number" pos:start="540:39" pos:end="540:39">1</literal></expr> ]</index><index pos:start="540:42" pos:end="540:44">[<expr pos:start="540:43" pos:end="540:43"><literal type="number" pos:start="540:43" pos:end="540:43">1</literal></expr>]</index></name><operator pos:start="540:45" pos:end="540:45">=</operator> <name pos:start="540:47" pos:end="540:48">my</name></expr>;</expr_stmt>



                            <expr_stmt pos:start="544:29" pos:end="544:52"><expr pos:start="544:29" pos:end="544:51"><name pos:start="544:29" pos:end="544:45"><name pos:start="544:29" pos:end="544:37">mvd_cache</name><index pos:start="544:38" pos:end="544:42">[ <expr pos:start="544:40" pos:end="544:40"><literal type="number" pos:start="544:40" pos:end="544:40">1</literal></expr> ]</index><index pos:start="544:43" pos:end="544:45">[<expr pos:start="544:44" pos:end="544:44"><literal type="number" pos:start="544:44" pos:end="544:44">0</literal></expr>]</index></name><operator pos:start="544:46" pos:end="544:46">=</operator>  <name pos:start="544:49" pos:end="544:51">mpx</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="546:29" pos:end="546:51"><expr pos:start="546:29" pos:end="546:50"><name pos:start="546:29" pos:end="546:45"><name pos:start="546:29" pos:end="546:37">mvd_cache</name><index pos:start="546:38" pos:end="546:42">[ <expr pos:start="546:40" pos:end="546:40"><literal type="number" pos:start="546:40" pos:end="546:40">1</literal></expr> ]</index><index pos:start="546:43" pos:end="546:45">[<expr pos:start="546:44" pos:end="546:44"><literal type="number" pos:start="546:44" pos:end="546:44">1</literal></expr>]</index></name><operator pos:start="546:46" pos:end="546:46">=</operator> <name pos:start="546:48" pos:end="546:50">mpy</name></expr>;</expr_stmt>

                        </block_content>}</block></if><if type="elseif" pos:start="548:26" pos:end="560:25">else if<condition pos:start="548:33" pos:end="548:57">(<expr pos:start="548:34" pos:end="548:56"><call pos:start="548:34" pos:end="548:56"><name pos:start="548:34" pos:end="548:43">IS_SUB_4X8</name><argument_list pos:start="548:44" pos:end="548:56">(<argument pos:start="548:45" pos:end="548:55"><expr pos:start="548:45" pos:end="548:55"><name pos:start="548:45" pos:end="548:55">sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="548:58" pos:end="560:25">{<block_content pos:start="550:29" pos:end="558:51">

                            <expr_stmt pos:start="550:29" pos:end="550:49"><expr pos:start="550:29" pos:end="550:48"><name pos:start="550:29" pos:end="550:44"><name pos:start="550:29" pos:end="550:36">mv_cache</name><index pos:start="550:37" pos:end="550:41">[ <expr pos:start="550:39" pos:end="550:39"><literal type="number" pos:start="550:39" pos:end="550:39">8</literal></expr> ]</index><index pos:start="550:42" pos:end="550:44">[<expr pos:start="550:43" pos:end="550:43"><literal type="number" pos:start="550:43" pos:end="550:43">0</literal></expr>]</index></name><operator pos:start="550:45" pos:end="550:45">=</operator> <name pos:start="550:47" pos:end="550:48">mx</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="552:29" pos:end="552:49"><expr pos:start="552:29" pos:end="552:48"><name pos:start="552:29" pos:end="552:44"><name pos:start="552:29" pos:end="552:36">mv_cache</name><index pos:start="552:37" pos:end="552:41">[ <expr pos:start="552:39" pos:end="552:39"><literal type="number" pos:start="552:39" pos:end="552:39">8</literal></expr> ]</index><index pos:start="552:42" pos:end="552:44">[<expr pos:start="552:43" pos:end="552:43"><literal type="number" pos:start="552:43" pos:end="552:43">1</literal></expr>]</index></name><operator pos:start="552:45" pos:end="552:45">=</operator> <name pos:start="552:47" pos:end="552:48">my</name></expr>;</expr_stmt>



                            <expr_stmt pos:start="556:29" pos:end="556:51"><expr pos:start="556:29" pos:end="556:50"><name pos:start="556:29" pos:end="556:45"><name pos:start="556:29" pos:end="556:37">mvd_cache</name><index pos:start="556:38" pos:end="556:42">[ <expr pos:start="556:40" pos:end="556:40"><literal type="number" pos:start="556:40" pos:end="556:40">8</literal></expr> ]</index><index pos:start="556:43" pos:end="556:45">[<expr pos:start="556:44" pos:end="556:44"><literal type="number" pos:start="556:44" pos:end="556:44">0</literal></expr>]</index></name><operator pos:start="556:46" pos:end="556:46">=</operator> <name pos:start="556:48" pos:end="556:50">mpx</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="558:29" pos:end="558:51"><expr pos:start="558:29" pos:end="558:50"><name pos:start="558:29" pos:end="558:45"><name pos:start="558:29" pos:end="558:37">mvd_cache</name><index pos:start="558:38" pos:end="558:42">[ <expr pos:start="558:40" pos:end="558:40"><literal type="number" pos:start="558:40" pos:end="558:40">8</literal></expr> ]</index><index pos:start="558:43" pos:end="558:45">[<expr pos:start="558:44" pos:end="558:44"><literal type="number" pos:start="558:44" pos:end="558:44">1</literal></expr>]</index></name><operator pos:start="558:46" pos:end="558:46">=</operator> <name pos:start="558:48" pos:end="558:50">mpy</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="562:25" pos:end="562:45"><expr pos:start="562:25" pos:end="562:44"><name pos:start="562:25" pos:end="562:40"><name pos:start="562:25" pos:end="562:32">mv_cache</name><index pos:start="562:33" pos:end="562:37">[ <expr pos:start="562:35" pos:end="562:35"><literal type="number" pos:start="562:35" pos:end="562:35">0</literal></expr> ]</index><index pos:start="562:38" pos:end="562:40">[<expr pos:start="562:39" pos:end="562:39"><literal type="number" pos:start="562:39" pos:end="562:39">0</literal></expr>]</index></name><operator pos:start="562:41" pos:end="562:41">=</operator> <name pos:start="562:43" pos:end="562:44">mx</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="564:25" pos:end="564:45"><expr pos:start="564:25" pos:end="564:44"><name pos:start="564:25" pos:end="564:40"><name pos:start="564:25" pos:end="564:32">mv_cache</name><index pos:start="564:33" pos:end="564:37">[ <expr pos:start="564:35" pos:end="564:35"><literal type="number" pos:start="564:35" pos:end="564:35">0</literal></expr> ]</index><index pos:start="564:38" pos:end="564:40">[<expr pos:start="564:39" pos:end="564:39"><literal type="number" pos:start="564:39" pos:end="564:39">1</literal></expr>]</index></name><operator pos:start="564:41" pos:end="564:41">=</operator> <name pos:start="564:43" pos:end="564:44">my</name></expr>;</expr_stmt>



                        <expr_stmt pos:start="568:25" pos:end="568:47"><expr pos:start="568:25" pos:end="568:46"><name pos:start="568:25" pos:end="568:41"><name pos:start="568:25" pos:end="568:33">mvd_cache</name><index pos:start="568:34" pos:end="568:38">[ <expr pos:start="568:36" pos:end="568:36"><literal type="number" pos:start="568:36" pos:end="568:36">0</literal></expr> ]</index><index pos:start="568:39" pos:end="568:41">[<expr pos:start="568:40" pos:end="568:40"><literal type="number" pos:start="568:40" pos:end="568:40">0</literal></expr>]</index></name><operator pos:start="568:42" pos:end="568:42">=</operator> <name pos:start="568:44" pos:end="568:46">mpx</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="570:25" pos:end="570:47"><expr pos:start="570:25" pos:end="570:46"><name pos:start="570:25" pos:end="570:41"><name pos:start="570:25" pos:end="570:33">mvd_cache</name><index pos:start="570:34" pos:end="570:38">[ <expr pos:start="570:36" pos:end="570:36"><literal type="number" pos:start="570:36" pos:end="570:36">0</literal></expr> ]</index><index pos:start="570:39" pos:end="570:41">[<expr pos:start="570:40" pos:end="570:40"><literal type="number" pos:start="570:40" pos:end="570:40">1</literal></expr>]</index></name><operator pos:start="570:42" pos:end="570:42">=</operator> <name pos:start="570:44" pos:end="570:46">mpy</name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if><else pos:start="574:18" pos:end="580:17">else<block pos:start="574:22" pos:end="580:17">{<block_content pos:start="576:21" pos:end="578:84">

                    <expr_stmt pos:start="576:21" pos:end="576:84"><expr pos:start="576:21" pos:end="576:83"><call pos:start="576:21" pos:end="576:83"><name pos:start="576:21" pos:end="576:34">fill_rectangle</name><argument_list pos:start="576:35" pos:end="576:83">(<argument pos:start="576:36" pos:end="576:67"><expr pos:start="576:36" pos:end="576:67"><name pos:start="576:36" pos:end="576:67"><name pos:start="576:36" pos:end="576:36">h</name><operator pos:start="576:37" pos:end="576:38">-&gt;</operator><name pos:start="576:39" pos:end="576:46">mv_cache</name> <index pos:start="576:48" pos:end="576:53">[<expr pos:start="576:49" pos:end="576:52"><name pos:start="576:49" pos:end="576:52">list</name></expr>]</index><index pos:start="576:54" pos:end="576:67">[ <expr pos:start="576:56" pos:end="576:65"><name pos:start="576:56" pos:end="576:65"><name pos:start="576:56" pos:end="576:60">scan8</name><index pos:start="576:61" pos:end="576:65">[<expr pos:start="576:62" pos:end="576:64"><literal type="number" pos:start="576:62" pos:end="576:62">4</literal><operator pos:start="576:63" pos:end="576:63">*</operator><name pos:start="576:64" pos:end="576:64">i</name></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="576:70" pos:end="576:70"><expr pos:start="576:70" pos:end="576:70"><literal type="number" pos:start="576:70" pos:end="576:70">2</literal></expr></argument>, <argument pos:start="576:73" pos:end="576:73"><expr pos:start="576:73" pos:end="576:73"><literal type="number" pos:start="576:73" pos:end="576:73">2</literal></expr></argument>, <argument pos:start="576:76" pos:end="576:76"><expr pos:start="576:76" pos:end="576:76"><literal type="number" pos:start="576:76" pos:end="576:76">8</literal></expr></argument>, <argument pos:start="576:79" pos:end="576:79"><expr pos:start="576:79" pos:end="576:79"><literal type="number" pos:start="576:79" pos:end="576:79">0</literal></expr></argument>, <argument pos:start="576:82" pos:end="576:82"><expr pos:start="576:82" pos:end="576:82"><literal type="number" pos:start="576:82" pos:end="576:82">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="578:21" pos:end="578:84"><expr pos:start="578:21" pos:end="578:83"><call pos:start="578:21" pos:end="578:83"><name pos:start="578:21" pos:end="578:34">fill_rectangle</name><argument_list pos:start="578:35" pos:end="578:83">(<argument pos:start="578:36" pos:end="578:67"><expr pos:start="578:36" pos:end="578:67"><name pos:start="578:36" pos:end="578:67"><name pos:start="578:36" pos:end="578:36">h</name><operator pos:start="578:37" pos:end="578:38">-&gt;</operator><name pos:start="578:39" pos:end="578:47">mvd_cache</name><index pos:start="578:48" pos:end="578:53">[<expr pos:start="578:49" pos:end="578:52"><name pos:start="578:49" pos:end="578:52">list</name></expr>]</index><index pos:start="578:54" pos:end="578:67">[ <expr pos:start="578:56" pos:end="578:65"><name pos:start="578:56" pos:end="578:65"><name pos:start="578:56" pos:end="578:60">scan8</name><index pos:start="578:61" pos:end="578:65">[<expr pos:start="578:62" pos:end="578:64"><literal type="number" pos:start="578:62" pos:end="578:62">4</literal><operator pos:start="578:63" pos:end="578:63">*</operator><name pos:start="578:64" pos:end="578:64">i</name></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="578:70" pos:end="578:70"><expr pos:start="578:70" pos:end="578:70"><literal type="number" pos:start="578:70" pos:end="578:70">2</literal></expr></argument>, <argument pos:start="578:73" pos:end="578:73"><expr pos:start="578:73" pos:end="578:73"><literal type="number" pos:start="578:73" pos:end="578:73">2</literal></expr></argument>, <argument pos:start="578:76" pos:end="578:76"><expr pos:start="578:76" pos:end="578:76"><literal type="number" pos:start="578:76" pos:end="578:76">8</literal></expr></argument>, <argument pos:start="578:79" pos:end="578:79"><expr pos:start="578:79" pos:end="578:79"><literal type="number" pos:start="578:79" pos:end="578:79">0</literal></expr></argument>, <argument pos:start="578:82" pos:end="578:82"><expr pos:start="578:82" pos:end="578:82"><literal type="number" pos:start="578:82" pos:end="578:82">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="586:7" pos:end="596:5">else if<condition pos:start="586:14" pos:end="586:35">( <expr pos:start="586:16" pos:end="586:33"><call pos:start="586:16" pos:end="586:33"><name pos:start="586:16" pos:end="586:24">IS_DIRECT</name><argument_list pos:start="586:25" pos:end="586:33">(<argument pos:start="586:26" pos:end="586:32"><expr pos:start="586:26" pos:end="586:32"><name pos:start="586:26" pos:end="586:32">mb_type</name></expr></argument>)</argument_list></call></expr> )</condition> <block pos:start="586:37" pos:end="596:5">{<block_content pos:start="588:9" pos:end="594:59">

        <expr_stmt pos:start="588:9" pos:end="588:48"><expr pos:start="588:9" pos:end="588:47"><call pos:start="588:9" pos:end="588:47"><name pos:start="588:9" pos:end="588:34">ff_h264_pred_direct_motion</name><argument_list pos:start="588:35" pos:end="588:47">(<argument pos:start="588:36" pos:end="588:36"><expr pos:start="588:36" pos:end="588:36"><name pos:start="588:36" pos:end="588:36">h</name></expr></argument>, <argument pos:start="588:39" pos:end="588:46"><expr pos:start="588:39" pos:end="588:46"><operator pos:start="588:39" pos:end="588:39">&amp;</operator><name pos:start="588:40" pos:end="588:46">mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="590:9" pos:end="590:65"><expr pos:start="590:9" pos:end="590:64"><call pos:start="590:9" pos:end="590:64"><name pos:start="590:9" pos:end="590:22">fill_rectangle</name><argument_list pos:start="590:23" pos:end="590:64">(<argument pos:start="590:24" pos:end="590:48"><expr pos:start="590:24" pos:end="590:48"><name pos:start="590:24" pos:end="590:48"><name pos:start="590:24" pos:end="590:24">h</name><operator pos:start="590:25" pos:end="590:26">-&gt;</operator><name pos:start="590:27" pos:end="590:35">mvd_cache</name><index pos:start="590:36" pos:end="590:38">[<expr pos:start="590:37" pos:end="590:37"><literal type="number" pos:start="590:37" pos:end="590:37">0</literal></expr>]</index><index pos:start="590:39" pos:end="590:48">[<expr pos:start="590:40" pos:end="590:47"><name pos:start="590:40" pos:end="590:47"><name pos:start="590:40" pos:end="590:44">scan8</name><index pos:start="590:45" pos:end="590:47">[<expr pos:start="590:46" pos:end="590:46"><literal type="number" pos:start="590:46" pos:end="590:46">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="590:51" pos:end="590:51"><expr pos:start="590:51" pos:end="590:51"><literal type="number" pos:start="590:51" pos:end="590:51">4</literal></expr></argument>, <argument pos:start="590:54" pos:end="590:54"><expr pos:start="590:54" pos:end="590:54"><literal type="number" pos:start="590:54" pos:end="590:54">4</literal></expr></argument>, <argument pos:start="590:57" pos:end="590:57"><expr pos:start="590:57" pos:end="590:57"><literal type="number" pos:start="590:57" pos:end="590:57">8</literal></expr></argument>, <argument pos:start="590:60" pos:end="590:60"><expr pos:start="590:60" pos:end="590:60"><literal type="number" pos:start="590:60" pos:end="590:60">0</literal></expr></argument>, <argument pos:start="590:63" pos:end="590:63"><expr pos:start="590:63" pos:end="590:63"><literal type="number" pos:start="590:63" pos:end="590:63">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="592:9" pos:end="592:65"><expr pos:start="592:9" pos:end="592:64"><call pos:start="592:9" pos:end="592:64"><name pos:start="592:9" pos:end="592:22">fill_rectangle</name><argument_list pos:start="592:23" pos:end="592:64">(<argument pos:start="592:24" pos:end="592:48"><expr pos:start="592:24" pos:end="592:48"><name pos:start="592:24" pos:end="592:48"><name pos:start="592:24" pos:end="592:24">h</name><operator pos:start="592:25" pos:end="592:26">-&gt;</operator><name pos:start="592:27" pos:end="592:35">mvd_cache</name><index pos:start="592:36" pos:end="592:38">[<expr pos:start="592:37" pos:end="592:37"><literal type="number" pos:start="592:37" pos:end="592:37">1</literal></expr>]</index><index pos:start="592:39" pos:end="592:48">[<expr pos:start="592:40" pos:end="592:47"><name pos:start="592:40" pos:end="592:47"><name pos:start="592:40" pos:end="592:44">scan8</name><index pos:start="592:45" pos:end="592:47">[<expr pos:start="592:46" pos:end="592:46"><literal type="number" pos:start="592:46" pos:end="592:46">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="592:51" pos:end="592:51"><expr pos:start="592:51" pos:end="592:51"><literal type="number" pos:start="592:51" pos:end="592:51">4</literal></expr></argument>, <argument pos:start="592:54" pos:end="592:54"><expr pos:start="592:54" pos:end="592:54"><literal type="number" pos:start="592:54" pos:end="592:54">4</literal></expr></argument>, <argument pos:start="592:57" pos:end="592:57"><expr pos:start="592:57" pos:end="592:57"><literal type="number" pos:start="592:57" pos:end="592:57">8</literal></expr></argument>, <argument pos:start="592:60" pos:end="592:60"><expr pos:start="592:60" pos:end="592:60"><literal type="number" pos:start="592:60" pos:end="592:60">0</literal></expr></argument>, <argument pos:start="592:63" pos:end="592:63"><expr pos:start="592:63" pos:end="592:63"><literal type="number" pos:start="592:63" pos:end="592:63">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="594:9" pos:end="594:59"><expr pos:start="594:9" pos:end="594:58"><name pos:start="594:9" pos:end="594:22">dct8x8_allowed</name> <operator pos:start="594:24" pos:end="594:25">&amp;=</operator> <name pos:start="594:27" pos:end="594:58"><name pos:start="594:27" pos:end="594:27">h</name><operator pos:start="594:28" pos:end="594:29">-&gt;</operator><name pos:start="594:30" pos:end="594:32">sps</name><operator pos:start="594:33" pos:end="594:33">.</operator><name pos:start="594:34" pos:end="594:58">direct_8x8_inference_flag</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="596:7" pos:end="791:5">else <block pos:start="596:12" pos:end="791:5">{<block_content pos:start="598:9" pos:end="789:9">

        <decl_stmt pos:start="598:9" pos:end="598:20"><decl pos:start="598:9" pos:end="598:16"><type pos:start="598:9" pos:end="598:11"><name pos:start="598:9" pos:end="598:11">int</name></type> <name pos:start="598:13" pos:end="598:16">list</name></decl>, <decl pos:start="598:19" pos:end="598:19"><type ref="prev" pos:start="598:9" pos:end="598:11"/><name pos:start="598:19" pos:end="598:19">i</name></decl>;</decl_stmt>

        <if_stmt pos:start="600:9" pos:end="789:9"><if pos:start="600:9" pos:end="651:9">if<condition pos:start="600:11" pos:end="600:29">(<expr pos:start="600:12" pos:end="600:28"><call pos:start="600:12" pos:end="600:28"><name pos:start="600:12" pos:end="600:19">IS_16X16</name><argument_list pos:start="600:20" pos:end="600:28">(<argument pos:start="600:21" pos:end="600:27"><expr pos:start="600:21" pos:end="600:27"><name pos:start="600:21" pos:end="600:27">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="600:30" pos:end="651:9">{<block_content pos:start="602:13" pos:end="649:13">

            <for pos:start="602:13" pos:end="627:13">for<control pos:start="602:16" pos:end="602:51">(<init pos:start="602:17" pos:end="602:23"><expr pos:start="602:17" pos:end="602:22"><name pos:start="602:17" pos:end="602:20">list</name><operator pos:start="602:21" pos:end="602:21">=</operator><literal type="number" pos:start="602:22" pos:end="602:22">0</literal></expr>;</init> <condition pos:start="602:25" pos:end="602:43"><expr pos:start="602:25" pos:end="602:42"><name pos:start="602:25" pos:end="602:28">list</name><operator pos:start="602:29" pos:end="602:29">&lt;</operator><name pos:start="602:30" pos:end="602:42"><name pos:start="602:30" pos:end="602:30">h</name><operator pos:start="602:31" pos:end="602:32">-&gt;</operator><name pos:start="602:33" pos:end="602:42">list_count</name></name></expr>;</condition> <incr pos:start="602:45" pos:end="602:50"><expr pos:start="602:45" pos:end="602:50"><name pos:start="602:45" pos:end="602:48">list</name><operator pos:start="602:49" pos:end="602:50">++</operator></expr></incr>)</control><block pos:start="602:52" pos:end="627:13">{<block_content pos:start="604:17" pos:end="625:17">

                <if_stmt pos:start="604:17" pos:end="625:17"><if pos:start="604:17" pos:end="625:17">if<condition pos:start="604:19" pos:end="604:44">(<expr pos:start="604:20" pos:end="604:43"><call pos:start="604:20" pos:end="604:43"><name pos:start="604:20" pos:end="604:25">IS_DIR</name><argument_list pos:start="604:26" pos:end="604:43">(<argument pos:start="604:27" pos:end="604:33"><expr pos:start="604:27" pos:end="604:33"><name pos:start="604:27" pos:end="604:33">mb_type</name></expr></argument>, <argument pos:start="604:36" pos:end="604:36"><expr pos:start="604:36" pos:end="604:36"><literal type="number" pos:start="604:36" pos:end="604:36">0</literal></expr></argument>, <argument pos:start="604:39" pos:end="604:42"><expr pos:start="604:39" pos:end="604:42"><name pos:start="604:39" pos:end="604:42">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="604:45" pos:end="625:17">{<block_content pos:start="606:21" pos:end="623:89">

                    <decl_stmt pos:start="606:21" pos:end="606:28"><decl pos:start="606:21" pos:end="606:27"><type pos:start="606:21" pos:end="606:23"><name pos:start="606:21" pos:end="606:23">int</name></type> <name pos:start="606:25" pos:end="606:27">ref</name></decl>;</decl_stmt>

                    <if_stmt pos:start="608:21" pos:end="621:30"><if pos:start="608:21" pos:end="619:21">if<condition pos:start="608:23" pos:end="608:46">(<expr pos:start="608:24" pos:end="608:45"><name pos:start="608:24" pos:end="608:41"><name pos:start="608:24" pos:end="608:24">h</name><operator pos:start="608:25" pos:end="608:26">-&gt;</operator><name pos:start="608:27" pos:end="608:35">ref_count</name><index pos:start="608:36" pos:end="608:41">[<expr pos:start="608:37" pos:end="608:40"><name pos:start="608:37" pos:end="608:40">list</name></expr>]</index></name> <operator pos:start="608:43" pos:end="608:43">&gt;</operator> <literal type="number" pos:start="608:45" pos:end="608:45">1</literal></expr>)</condition><block pos:start="608:47" pos:end="619:21">{<block_content pos:start="610:25" pos:end="617:25">

                        <expr_stmt pos:start="610:25" pos:end="610:61"><expr pos:start="610:25" pos:end="610:60"><name pos:start="610:25" pos:end="610:27">ref</name><operator pos:start="610:28" pos:end="610:28">=</operator> <call pos:start="610:30" pos:end="610:60"><name pos:start="610:30" pos:end="610:48">decode_cabac_mb_ref</name><argument_list pos:start="610:49" pos:end="610:60">(<argument pos:start="610:50" pos:end="610:50"><expr pos:start="610:50" pos:end="610:50"><name pos:start="610:50" pos:end="610:50">h</name></expr></argument>, <argument pos:start="610:53" pos:end="610:56"><expr pos:start="610:53" pos:end="610:56"><name pos:start="610:53" pos:end="610:56">list</name></expr></argument>, <argument pos:start="610:59" pos:end="610:59"><expr pos:start="610:59" pos:end="610:59"><literal type="number" pos:start="610:59" pos:end="610:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="612:25" pos:end="617:25"><if pos:start="612:25" pos:end="617:25">if<condition pos:start="612:27" pos:end="612:63">(<expr pos:start="612:28" pos:end="612:62"><name pos:start="612:28" pos:end="612:30">ref</name> <operator pos:start="612:32" pos:end="612:33">&gt;=</operator> <operator pos:start="612:35" pos:end="612:35">(</operator><name pos:start="612:36" pos:end="612:43">unsigned</name><operator pos:start="612:44" pos:end="612:44">)</operator><name pos:start="612:45" pos:end="612:62"><name pos:start="612:45" pos:end="612:45">h</name><operator pos:start="612:46" pos:end="612:47">-&gt;</operator><name pos:start="612:48" pos:end="612:56">ref_count</name><index pos:start="612:57" pos:end="612:62">[<expr pos:start="612:58" pos:end="612:61"><name pos:start="612:58" pos:end="612:61">list</name></expr>]</index></name></expr>)</condition><block pos:start="612:64" pos:end="617:25">{<block_content pos:start="614:29" pos:end="614:108">

                            <expr_stmt pos:start="614:29" pos:end="614:108"><expr pos:start="614:29" pos:end="614:107"><call pos:start="614:29" pos:end="614:107"><name pos:start="614:29" pos:end="614:34">av_log</name><argument_list pos:start="614:35" pos:end="614:107">(<argument pos:start="614:36" pos:end="614:43"><expr pos:start="614:36" pos:end="614:43"><name pos:start="614:36" pos:end="614:43"><name pos:start="614:36" pos:end="614:36">s</name><operator pos:start="614:37" pos:end="614:38">-&gt;</operator><name pos:start="614:39" pos:end="614:43">avctx</name></name></expr></argument>, <argument pos:start="614:46" pos:end="614:57"><expr pos:start="614:46" pos:end="614:57"><name pos:start="614:46" pos:end="614:57">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="614:60" pos:end="614:81"><expr pos:start="614:60" pos:end="614:81"><literal type="string" pos:start="614:60" pos:end="614:81">"Reference %d &gt;= %d\n"</literal></expr></argument>, <argument pos:start="614:84" pos:end="614:86"><expr pos:start="614:84" pos:end="614:86"><name pos:start="614:84" pos:end="614:86">ref</name></expr></argument>, <argument pos:start="614:89" pos:end="614:106"><expr pos:start="614:89" pos:end="614:106"><name pos:start="614:89" pos:end="614:106"><name pos:start="614:89" pos:end="614:89">h</name><operator pos:start="614:90" pos:end="614:91">-&gt;</operator><name pos:start="614:92" pos:end="614:100">ref_count</name><index pos:start="614:101" pos:end="614:106">[<expr pos:start="614:102" pos:end="614:105"><name pos:start="614:102" pos:end="614:105">list</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></if><else pos:start="619:22" pos:end="621:30">else<block type="pseudo" pos:start="621:25" pos:end="621:30"><block_content pos:start="621:25" pos:end="621:30">

                        <expr_stmt pos:start="621:25" pos:end="621:30"><expr pos:start="621:25" pos:end="621:29"><name pos:start="621:25" pos:end="621:27">ref</name><operator pos:start="621:28" pos:end="621:28">=</operator><literal type="number" pos:start="621:29" pos:end="621:29">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <expr_stmt pos:start="623:25" pos:end="623:89"><expr pos:start="623:25" pos:end="623:88"><call pos:start="623:25" pos:end="623:88"><name pos:start="623:25" pos:end="623:38">fill_rectangle</name><argument_list pos:start="623:39" pos:end="623:88">(<argument pos:start="623:40" pos:end="623:70"><expr pos:start="623:40" pos:end="623:70"><operator pos:start="623:40" pos:end="623:40">&amp;</operator><name pos:start="623:41" pos:end="623:70"><name pos:start="623:41" pos:end="623:41">h</name><operator pos:start="623:42" pos:end="623:43">-&gt;</operator><name pos:start="623:44" pos:end="623:52">ref_cache</name><index pos:start="623:53" pos:end="623:58">[<expr pos:start="623:54" pos:end="623:57"><name pos:start="623:54" pos:end="623:57">list</name></expr>]</index><index pos:start="623:59" pos:end="623:70">[ <expr pos:start="623:61" pos:end="623:68"><name pos:start="623:61" pos:end="623:68"><name pos:start="623:61" pos:end="623:65">scan8</name><index pos:start="623:66" pos:end="623:68">[<expr pos:start="623:67" pos:end="623:67"><literal type="number" pos:start="623:67" pos:end="623:67">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="623:73" pos:end="623:73"><expr pos:start="623:73" pos:end="623:73"><literal type="number" pos:start="623:73" pos:end="623:73">4</literal></expr></argument>, <argument pos:start="623:76" pos:end="623:76"><expr pos:start="623:76" pos:end="623:76"><literal type="number" pos:start="623:76" pos:end="623:76">4</literal></expr></argument>, <argument pos:start="623:79" pos:end="623:79"><expr pos:start="623:79" pos:end="623:79"><literal type="number" pos:start="623:79" pos:end="623:79">8</literal></expr></argument>, <argument pos:start="623:82" pos:end="623:84"><expr pos:start="623:82" pos:end="623:84"><name pos:start="623:82" pos:end="623:84">ref</name></expr></argument>, <argument pos:start="623:87" pos:end="623:87"><expr pos:start="623:87" pos:end="623:87"><literal type="number" pos:start="623:87" pos:end="623:87">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <for pos:start="629:13" pos:end="649:13">for<control pos:start="629:16" pos:end="629:51">(<init pos:start="629:17" pos:end="629:23"><expr pos:start="629:17" pos:end="629:22"><name pos:start="629:17" pos:end="629:20">list</name><operator pos:start="629:21" pos:end="629:21">=</operator><literal type="number" pos:start="629:22" pos:end="629:22">0</literal></expr>;</init> <condition pos:start="629:25" pos:end="629:43"><expr pos:start="629:25" pos:end="629:42"><name pos:start="629:25" pos:end="629:28">list</name><operator pos:start="629:29" pos:end="629:29">&lt;</operator><name pos:start="629:30" pos:end="629:42"><name pos:start="629:30" pos:end="629:30">h</name><operator pos:start="629:31" pos:end="629:32">-&gt;</operator><name pos:start="629:33" pos:end="629:42">list_count</name></name></expr>;</condition> <incr pos:start="629:45" pos:end="629:50"><expr pos:start="629:45" pos:end="629:50"><name pos:start="629:45" pos:end="629:48">list</name><operator pos:start="629:49" pos:end="629:50">++</operator></expr></incr>)</control><block pos:start="629:52" pos:end="649:13">{<block_content pos:start="631:17" pos:end="647:17">

                <if_stmt pos:start="631:17" pos:end="647:17"><if pos:start="631:17" pos:end="647:17">if<condition pos:start="631:19" pos:end="631:44">(<expr pos:start="631:20" pos:end="631:43"><call pos:start="631:20" pos:end="631:43"><name pos:start="631:20" pos:end="631:25">IS_DIR</name><argument_list pos:start="631:26" pos:end="631:43">(<argument pos:start="631:27" pos:end="631:33"><expr pos:start="631:27" pos:end="631:33"><name pos:start="631:27" pos:end="631:33">mb_type</name></expr></argument>, <argument pos:start="631:36" pos:end="631:36"><expr pos:start="631:36" pos:end="631:36"><literal type="number" pos:start="631:36" pos:end="631:36">0</literal></expr></argument>, <argument pos:start="631:39" pos:end="631:42"><expr pos:start="631:39" pos:end="631:42"><name pos:start="631:39" pos:end="631:42">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="631:45" pos:end="647:17">{<block_content pos:start="633:21" pos:end="645:97">

                    <decl_stmt pos:start="633:21" pos:end="633:38"><decl pos:start="633:21" pos:end="633:26"><type pos:start="633:21" pos:end="633:23"><name pos:start="633:21" pos:end="633:23">int</name></type> <name pos:start="633:25" pos:end="633:26">mx</name></decl>,<decl pos:start="633:28" pos:end="633:29"><type ref="prev" pos:start="633:21" pos:end="633:23"/><name pos:start="633:28" pos:end="633:29">my</name></decl>,<decl pos:start="633:31" pos:end="633:33"><type ref="prev" pos:start="633:21" pos:end="633:23"/><name pos:start="633:31" pos:end="633:33">mpx</name></decl>,<decl pos:start="633:35" pos:end="633:37"><type ref="prev" pos:start="633:21" pos:end="633:23"/><name pos:start="633:35" pos:end="633:37">mpy</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="635:21" pos:end="635:89"><expr pos:start="635:21" pos:end="635:88"><call pos:start="635:21" pos:end="635:88"><name pos:start="635:21" pos:end="635:31">pred_motion</name><argument_list pos:start="635:32" pos:end="635:88">(<argument pos:start="635:33" pos:end="635:33"><expr pos:start="635:33" pos:end="635:33"><name pos:start="635:33" pos:end="635:33">h</name></expr></argument>, <argument pos:start="635:36" pos:end="635:36"><expr pos:start="635:36" pos:end="635:36"><literal type="number" pos:start="635:36" pos:end="635:36">0</literal></expr></argument>, <argument pos:start="635:39" pos:end="635:39"><expr pos:start="635:39" pos:end="635:39"><literal type="number" pos:start="635:39" pos:end="635:39">4</literal></expr></argument>, <argument pos:start="635:42" pos:end="635:45"><expr pos:start="635:42" pos:end="635:45"><name pos:start="635:42" pos:end="635:45">list</name></expr></argument>, <argument pos:start="635:48" pos:end="635:77"><expr pos:start="635:48" pos:end="635:77"><name pos:start="635:48" pos:end="635:77"><name pos:start="635:48" pos:end="635:48">h</name><operator pos:start="635:49" pos:end="635:50">-&gt;</operator><name pos:start="635:51" pos:end="635:59">ref_cache</name><index pos:start="635:60" pos:end="635:65">[<expr pos:start="635:61" pos:end="635:64"><name pos:start="635:61" pos:end="635:64">list</name></expr>]</index><index pos:start="635:66" pos:end="635:77">[ <expr pos:start="635:68" pos:end="635:75"><name pos:start="635:68" pos:end="635:75"><name pos:start="635:68" pos:end="635:72">scan8</name><index pos:start="635:73" pos:end="635:75">[<expr pos:start="635:74" pos:end="635:74"><literal type="number" pos:start="635:74" pos:end="635:74">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="635:80" pos:end="635:82"><expr pos:start="635:80" pos:end="635:82"><operator pos:start="635:80" pos:end="635:80">&amp;</operator><name pos:start="635:81" pos:end="635:82">mx</name></expr></argument>, <argument pos:start="635:85" pos:end="635:87"><expr pos:start="635:85" pos:end="635:87"><operator pos:start="635:85" pos:end="635:85">&amp;</operator><name pos:start="635:86" pos:end="635:87">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <macro pos:start="637:21" pos:end="637:52"><name pos:start="637:21" pos:end="637:39">DECODE_CABAC_MB_MVD</name><argument_list pos:start="637:40" pos:end="637:52">( <argument pos:start="637:42" pos:end="637:42">h</argument>, <argument pos:start="637:45" pos:end="637:48">list</argument>, <argument pos:start="637:51" pos:end="637:51"><literal type="number" pos:start="637:51" pos:end="637:51">0</literal></argument>)</argument_list></macro>

                    <expr_stmt pos:start="639:21" pos:end="639:66"><expr pos:start="639:21" pos:end="639:65"><call pos:start="639:21" pos:end="639:65"><name pos:start="639:21" pos:end="639:27">tprintf</name><argument_list pos:start="639:28" pos:end="639:65">(<argument pos:start="639:29" pos:end="639:36"><expr pos:start="639:29" pos:end="639:36"><name pos:start="639:29" pos:end="639:36"><name pos:start="639:29" pos:end="639:29">s</name><operator pos:start="639:30" pos:end="639:31">-&gt;</operator><name pos:start="639:32" pos:end="639:36">avctx</name></name></expr></argument>, <argument pos:start="639:39" pos:end="639:56"><expr pos:start="639:39" pos:end="639:56"><literal type="string" pos:start="639:39" pos:end="639:56">"final mv:%d %d\n"</literal></expr></argument>, <argument pos:start="639:59" pos:end="639:60"><expr pos:start="639:59" pos:end="639:60"><name pos:start="639:59" pos:end="639:60">mx</name></expr></argument>, <argument pos:start="639:63" pos:end="639:64"><expr pos:start="639:63" pos:end="639:64"><name pos:start="639:63" pos:end="639:64">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="643:21" pos:end="643:99"><expr pos:start="643:21" pos:end="643:98"><call pos:start="643:21" pos:end="643:98"><name pos:start="643:21" pos:end="643:34">fill_rectangle</name><argument_list pos:start="643:35" pos:end="643:98">(<argument pos:start="643:36" pos:end="643:65"><expr pos:start="643:36" pos:end="643:65"><name pos:start="643:36" pos:end="643:65"><name pos:start="643:36" pos:end="643:36">h</name><operator pos:start="643:37" pos:end="643:38">-&gt;</operator><name pos:start="643:39" pos:end="643:47">mvd_cache</name><index pos:start="643:48" pos:end="643:53">[<expr pos:start="643:49" pos:end="643:52"><name pos:start="643:49" pos:end="643:52">list</name></expr>]</index><index pos:start="643:54" pos:end="643:65">[ <expr pos:start="643:56" pos:end="643:63"><name pos:start="643:56" pos:end="643:63"><name pos:start="643:56" pos:end="643:60">scan8</name><index pos:start="643:61" pos:end="643:63">[<expr pos:start="643:62" pos:end="643:62"><literal type="number" pos:start="643:62" pos:end="643:62">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="643:68" pos:end="643:68"><expr pos:start="643:68" pos:end="643:68"><literal type="number" pos:start="643:68" pos:end="643:68">4</literal></expr></argument>, <argument pos:start="643:71" pos:end="643:71"><expr pos:start="643:71" pos:end="643:71"><literal type="number" pos:start="643:71" pos:end="643:71">4</literal></expr></argument>, <argument pos:start="643:74" pos:end="643:74"><expr pos:start="643:74" pos:end="643:74"><literal type="number" pos:start="643:74" pos:end="643:74">8</literal></expr></argument>, <argument pos:start="643:77" pos:end="643:94"><expr pos:start="643:77" pos:end="643:94"><call pos:start="643:77" pos:end="643:94"><name pos:start="643:77" pos:end="643:85">pack8to16</name><argument_list pos:start="643:86" pos:end="643:94">(<argument pos:start="643:87" pos:end="643:89"><expr pos:start="643:87" pos:end="643:89"><name pos:start="643:87" pos:end="643:89">mpx</name></expr></argument>,<argument pos:start="643:91" pos:end="643:93"><expr pos:start="643:91" pos:end="643:93"><name pos:start="643:91" pos:end="643:93">mpy</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="643:97" pos:end="643:97"><expr pos:start="643:97" pos:end="643:97"><literal type="number" pos:start="643:97" pos:end="643:97">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="645:21" pos:end="645:97"><expr pos:start="645:21" pos:end="645:96"><call pos:start="645:21" pos:end="645:96"><name pos:start="645:21" pos:end="645:34">fill_rectangle</name><argument_list pos:start="645:35" pos:end="645:96">(<argument pos:start="645:36" pos:end="645:64"><expr pos:start="645:36" pos:end="645:64"><name pos:start="645:36" pos:end="645:64"><name pos:start="645:36" pos:end="645:36">h</name><operator pos:start="645:37" pos:end="645:38">-&gt;</operator><name pos:start="645:39" pos:end="645:46">mv_cache</name><index pos:start="645:47" pos:end="645:52">[<expr pos:start="645:48" pos:end="645:51"><name pos:start="645:48" pos:end="645:51">list</name></expr>]</index><index pos:start="645:53" pos:end="645:64">[ <expr pos:start="645:55" pos:end="645:62"><name pos:start="645:55" pos:end="645:62"><name pos:start="645:55" pos:end="645:59">scan8</name><index pos:start="645:60" pos:end="645:62">[<expr pos:start="645:61" pos:end="645:61"><literal type="number" pos:start="645:61" pos:end="645:61">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="645:67" pos:end="645:67"><expr pos:start="645:67" pos:end="645:67"><literal type="number" pos:start="645:67" pos:end="645:67">4</literal></expr></argument>, <argument pos:start="645:70" pos:end="645:70"><expr pos:start="645:70" pos:end="645:70"><literal type="number" pos:start="645:70" pos:end="645:70">4</literal></expr></argument>, <argument pos:start="645:73" pos:end="645:73"><expr pos:start="645:73" pos:end="645:73"><literal type="number" pos:start="645:73" pos:end="645:73">8</literal></expr></argument>, <argument pos:start="645:76" pos:end="645:92"><expr pos:start="645:76" pos:end="645:92"><call pos:start="645:76" pos:end="645:92"><name pos:start="645:76" pos:end="645:85">pack16to32</name><argument_list pos:start="645:86" pos:end="645:92">(<argument pos:start="645:87" pos:end="645:88"><expr pos:start="645:87" pos:end="645:88"><name pos:start="645:87" pos:end="645:88">mx</name></expr></argument>,<argument pos:start="645:90" pos:end="645:91"><expr pos:start="645:90" pos:end="645:91"><name pos:start="645:90" pos:end="645:91">my</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="645:95" pos:end="645:95"><expr pos:start="645:95" pos:end="645:95"><literal type="number" pos:start="645:95" pos:end="645:95">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if>

        <if type="elseif" pos:start="653:9" pos:end="720:9">else if<condition pos:start="653:16" pos:end="653:33">(<expr pos:start="653:17" pos:end="653:32"><call pos:start="653:17" pos:end="653:32"><name pos:start="653:17" pos:end="653:23">IS_16X8</name><argument_list pos:start="653:24" pos:end="653:32">(<argument pos:start="653:25" pos:end="653:31"><expr pos:start="653:25" pos:end="653:31"><name pos:start="653:25" pos:end="653:31">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="653:34" pos:end="720:9">{<block_content pos:start="655:13" pos:end="718:13">

            <for pos:start="655:13" pos:end="686:13">for<control pos:start="655:16" pos:end="655:51">(<init pos:start="655:17" pos:end="655:23"><expr pos:start="655:17" pos:end="655:22"><name pos:start="655:17" pos:end="655:20">list</name><operator pos:start="655:21" pos:end="655:21">=</operator><literal type="number" pos:start="655:22" pos:end="655:22">0</literal></expr>;</init> <condition pos:start="655:25" pos:end="655:43"><expr pos:start="655:25" pos:end="655:42"><name pos:start="655:25" pos:end="655:28">list</name><operator pos:start="655:29" pos:end="655:29">&lt;</operator><name pos:start="655:30" pos:end="655:42"><name pos:start="655:30" pos:end="655:30">h</name><operator pos:start="655:31" pos:end="655:32">-&gt;</operator><name pos:start="655:33" pos:end="655:42">list_count</name></name></expr>;</condition> <incr pos:start="655:45" pos:end="655:50"><expr pos:start="655:45" pos:end="655:50"><name pos:start="655:45" pos:end="655:48">list</name><operator pos:start="655:49" pos:end="655:50">++</operator></expr></incr>)</control><block pos:start="655:52" pos:end="686:13">{<block_content pos:start="657:21" pos:end="684:21">

                    <for pos:start="657:21" pos:end="684:21">for<control pos:start="657:24" pos:end="657:38">(<init pos:start="657:25" pos:end="657:28"><expr pos:start="657:25" pos:end="657:27"><name pos:start="657:25" pos:end="657:25">i</name><operator pos:start="657:26" pos:end="657:26">=</operator><literal type="number" pos:start="657:27" pos:end="657:27">0</literal></expr>;</init> <condition pos:start="657:30" pos:end="657:33"><expr pos:start="657:30" pos:end="657:32"><name pos:start="657:30" pos:end="657:30">i</name><operator pos:start="657:31" pos:end="657:31">&lt;</operator><literal type="number" pos:start="657:32" pos:end="657:32">2</literal></expr>;</condition> <incr pos:start="657:35" pos:end="657:37"><expr pos:start="657:35" pos:end="657:37"><name pos:start="657:35" pos:end="657:35">i</name><operator pos:start="657:36" pos:end="657:37">++</operator></expr></incr>)</control><block pos:start="657:39" pos:end="684:21">{<block_content pos:start="659:25" pos:end="682:117">

                        <if_stmt pos:start="659:25" pos:end="682:117"><if pos:start="659:25" pos:end="680:25">if<condition pos:start="659:27" pos:end="659:52">(<expr pos:start="659:28" pos:end="659:51"><call pos:start="659:28" pos:end="659:51"><name pos:start="659:28" pos:end="659:33">IS_DIR</name><argument_list pos:start="659:34" pos:end="659:51">(<argument pos:start="659:35" pos:end="659:41"><expr pos:start="659:35" pos:end="659:41"><name pos:start="659:35" pos:end="659:41">mb_type</name></expr></argument>, <argument pos:start="659:44" pos:end="659:44"><expr pos:start="659:44" pos:end="659:44"><name pos:start="659:44" pos:end="659:44">i</name></expr></argument>, <argument pos:start="659:47" pos:end="659:50"><expr pos:start="659:47" pos:end="659:50"><name pos:start="659:47" pos:end="659:50">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="659:53" pos:end="680:25">{<block_content pos:start="661:29" pos:end="678:100">

                            <decl_stmt pos:start="661:29" pos:end="661:36"><decl pos:start="661:29" pos:end="661:35"><type pos:start="661:29" pos:end="661:31"><name pos:start="661:29" pos:end="661:31">int</name></type> <name pos:start="661:33" pos:end="661:35">ref</name></decl>;</decl_stmt>

                            <if_stmt pos:start="663:29" pos:end="676:38"><if pos:start="663:29" pos:end="674:29">if<condition pos:start="663:31" pos:end="663:54">(<expr pos:start="663:32" pos:end="663:53"><name pos:start="663:32" pos:end="663:49"><name pos:start="663:32" pos:end="663:32">h</name><operator pos:start="663:33" pos:end="663:34">-&gt;</operator><name pos:start="663:35" pos:end="663:43">ref_count</name><index pos:start="663:44" pos:end="663:49">[<expr pos:start="663:45" pos:end="663:48"><name pos:start="663:45" pos:end="663:48">list</name></expr>]</index></name> <operator pos:start="663:51" pos:end="663:51">&gt;</operator> <literal type="number" pos:start="663:53" pos:end="663:53">1</literal></expr>)</condition><block pos:start="663:55" pos:end="674:29">{<block_content pos:start="665:33" pos:end="672:33">

                                <expr_stmt pos:start="665:33" pos:end="665:73"><expr pos:start="665:33" pos:end="665:72"><name pos:start="665:33" pos:end="665:35">ref</name><operator pos:start="665:36" pos:end="665:36">=</operator> <call pos:start="665:38" pos:end="665:72"><name pos:start="665:38" pos:end="665:56">decode_cabac_mb_ref</name><argument_list pos:start="665:57" pos:end="665:72">( <argument pos:start="665:59" pos:end="665:59"><expr pos:start="665:59" pos:end="665:59"><name pos:start="665:59" pos:end="665:59">h</name></expr></argument>, <argument pos:start="665:62" pos:end="665:65"><expr pos:start="665:62" pos:end="665:65"><name pos:start="665:62" pos:end="665:65">list</name></expr></argument>, <argument pos:start="665:68" pos:end="665:70"><expr pos:start="665:68" pos:end="665:70"><literal type="number" pos:start="665:68" pos:end="665:68">8</literal><operator pos:start="665:69" pos:end="665:69">*</operator><name pos:start="665:70" pos:end="665:70">i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                                <if_stmt pos:start="667:33" pos:end="672:33"><if pos:start="667:33" pos:end="672:33">if<condition pos:start="667:35" pos:end="667:71">(<expr pos:start="667:36" pos:end="667:70"><name pos:start="667:36" pos:end="667:38">ref</name> <operator pos:start="667:40" pos:end="667:41">&gt;=</operator> <operator pos:start="667:43" pos:end="667:43">(</operator><name pos:start="667:44" pos:end="667:51">unsigned</name><operator pos:start="667:52" pos:end="667:52">)</operator><name pos:start="667:53" pos:end="667:70"><name pos:start="667:53" pos:end="667:53">h</name><operator pos:start="667:54" pos:end="667:55">-&gt;</operator><name pos:start="667:56" pos:end="667:64">ref_count</name><index pos:start="667:65" pos:end="667:70">[<expr pos:start="667:66" pos:end="667:69"><name pos:start="667:66" pos:end="667:69">list</name></expr>]</index></name></expr>)</condition><block pos:start="667:72" pos:end="672:33">{<block_content pos:start="669:37" pos:end="669:116">

                                    <expr_stmt pos:start="669:37" pos:end="669:116"><expr pos:start="669:37" pos:end="669:115"><call pos:start="669:37" pos:end="669:115"><name pos:start="669:37" pos:end="669:42">av_log</name><argument_list pos:start="669:43" pos:end="669:115">(<argument pos:start="669:44" pos:end="669:51"><expr pos:start="669:44" pos:end="669:51"><name pos:start="669:44" pos:end="669:51"><name pos:start="669:44" pos:end="669:44">s</name><operator pos:start="669:45" pos:end="669:46">-&gt;</operator><name pos:start="669:47" pos:end="669:51">avctx</name></name></expr></argument>, <argument pos:start="669:54" pos:end="669:65"><expr pos:start="669:54" pos:end="669:65"><name pos:start="669:54" pos:end="669:65">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="669:68" pos:end="669:89"><expr pos:start="669:68" pos:end="669:89"><literal type="string" pos:start="669:68" pos:end="669:89">"Reference %d &gt;= %d\n"</literal></expr></argument>, <argument pos:start="669:92" pos:end="669:94"><expr pos:start="669:92" pos:end="669:94"><name pos:start="669:92" pos:end="669:94">ref</name></expr></argument>, <argument pos:start="669:97" pos:end="669:114"><expr pos:start="669:97" pos:end="669:114"><name pos:start="669:97" pos:end="669:114"><name pos:start="669:97" pos:end="669:97">h</name><operator pos:start="669:98" pos:end="669:99">-&gt;</operator><name pos:start="669:100" pos:end="669:108">ref_count</name><index pos:start="669:109" pos:end="669:114">[<expr pos:start="669:110" pos:end="669:113"><name pos:start="669:110" pos:end="669:113">list</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                                </block_content>}</block></if></if_stmt>

                            </block_content>}</block></if><else pos:start="674:30" pos:end="676:38">else<block type="pseudo" pos:start="676:33" pos:end="676:38"><block_content pos:start="676:33" pos:end="676:38">

                                <expr_stmt pos:start="676:33" pos:end="676:38"><expr pos:start="676:33" pos:end="676:37"><name pos:start="676:33" pos:end="676:35">ref</name><operator pos:start="676:36" pos:end="676:36">=</operator><literal type="number" pos:start="676:37" pos:end="676:37">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                            <expr_stmt pos:start="678:29" pos:end="678:100"><expr pos:start="678:29" pos:end="678:99"><call pos:start="678:29" pos:end="678:99"><name pos:start="678:29" pos:end="678:42">fill_rectangle</name><argument_list pos:start="678:43" pos:end="678:99">(<argument pos:start="678:44" pos:end="678:81"><expr pos:start="678:44" pos:end="678:81"><operator pos:start="678:44" pos:end="678:44">&amp;</operator><name pos:start="678:45" pos:end="678:81"><name pos:start="678:45" pos:end="678:45">h</name><operator pos:start="678:46" pos:end="678:47">-&gt;</operator><name pos:start="678:48" pos:end="678:56">ref_cache</name><index pos:start="678:57" pos:end="678:62">[<expr pos:start="678:58" pos:end="678:61"><name pos:start="678:58" pos:end="678:61">list</name></expr>]</index><index pos:start="678:63" pos:end="678:81">[ <expr pos:start="678:65" pos:end="678:79"><name pos:start="678:65" pos:end="678:72"><name pos:start="678:65" pos:end="678:69">scan8</name><index pos:start="678:70" pos:end="678:72">[<expr pos:start="678:71" pos:end="678:71"><literal type="number" pos:start="678:71" pos:end="678:71">0</literal></expr>]</index></name> <operator pos:start="678:74" pos:end="678:74">+</operator> <literal type="number" pos:start="678:76" pos:end="678:77">16</literal><operator pos:start="678:78" pos:end="678:78">*</operator><name pos:start="678:79" pos:end="678:79">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="678:84" pos:end="678:84"><expr pos:start="678:84" pos:end="678:84"><literal type="number" pos:start="678:84" pos:end="678:84">4</literal></expr></argument>, <argument pos:start="678:87" pos:end="678:87"><expr pos:start="678:87" pos:end="678:87"><literal type="number" pos:start="678:87" pos:end="678:87">2</literal></expr></argument>, <argument pos:start="678:90" pos:end="678:90"><expr pos:start="678:90" pos:end="678:90"><literal type="number" pos:start="678:90" pos:end="678:90">8</literal></expr></argument>, <argument pos:start="678:93" pos:end="678:95"><expr pos:start="678:93" pos:end="678:95"><name pos:start="678:93" pos:end="678:95">ref</name></expr></argument>, <argument pos:start="678:98" pos:end="678:98"><expr pos:start="678:98" pos:end="678:98"><literal type="number" pos:start="678:98" pos:end="678:98">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if><else pos:start="680:26" pos:end="682:117">else<block type="pseudo" pos:start="682:29" pos:end="682:117"><block_content pos:start="682:29" pos:end="682:117">

                            <expr_stmt pos:start="682:29" pos:end="682:117"><expr pos:start="682:29" pos:end="682:116"><call pos:start="682:29" pos:end="682:116"><name pos:start="682:29" pos:end="682:42">fill_rectangle</name><argument_list pos:start="682:43" pos:end="682:116">(<argument pos:start="682:44" pos:end="682:81"><expr pos:start="682:44" pos:end="682:81"><operator pos:start="682:44" pos:end="682:44">&amp;</operator><name pos:start="682:45" pos:end="682:81"><name pos:start="682:45" pos:end="682:45">h</name><operator pos:start="682:46" pos:end="682:47">-&gt;</operator><name pos:start="682:48" pos:end="682:56">ref_cache</name><index pos:start="682:57" pos:end="682:62">[<expr pos:start="682:58" pos:end="682:61"><name pos:start="682:58" pos:end="682:61">list</name></expr>]</index><index pos:start="682:63" pos:end="682:81">[ <expr pos:start="682:65" pos:end="682:79"><name pos:start="682:65" pos:end="682:72"><name pos:start="682:65" pos:end="682:69">scan8</name><index pos:start="682:70" pos:end="682:72">[<expr pos:start="682:71" pos:end="682:71"><literal type="number" pos:start="682:71" pos:end="682:71">0</literal></expr>]</index></name> <operator pos:start="682:74" pos:end="682:74">+</operator> <literal type="number" pos:start="682:76" pos:end="682:77">16</literal><operator pos:start="682:78" pos:end="682:78">*</operator><name pos:start="682:79" pos:end="682:79">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="682:84" pos:end="682:84"><expr pos:start="682:84" pos:end="682:84"><literal type="number" pos:start="682:84" pos:end="682:84">4</literal></expr></argument>, <argument pos:start="682:87" pos:end="682:87"><expr pos:start="682:87" pos:end="682:87"><literal type="number" pos:start="682:87" pos:end="682:87">2</literal></expr></argument>, <argument pos:start="682:90" pos:end="682:90"><expr pos:start="682:90" pos:end="682:90"><literal type="number" pos:start="682:90" pos:end="682:90">8</literal></expr></argument>, <argument pos:start="682:93" pos:end="682:112"><expr pos:start="682:93" pos:end="682:112"><operator pos:start="682:93" pos:end="682:93">(</operator><name pos:start="682:94" pos:end="682:106">LIST_NOT_USED</name><operator pos:start="682:107" pos:end="682:107">&amp;</operator><literal type="number" pos:start="682:108" pos:end="682:111">0xFF</literal><operator pos:start="682:112" pos:end="682:112">)</operator></expr></argument>, <argument pos:start="682:115" pos:end="682:115"><expr pos:start="682:115" pos:end="682:115"><literal type="number" pos:start="682:115" pos:end="682:115">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></for>

            </block_content>}</block></for>

            <for pos:start="688:13" pos:end="718:13">for<control pos:start="688:16" pos:end="688:51">(<init pos:start="688:17" pos:end="688:23"><expr pos:start="688:17" pos:end="688:22"><name pos:start="688:17" pos:end="688:20">list</name><operator pos:start="688:21" pos:end="688:21">=</operator><literal type="number" pos:start="688:22" pos:end="688:22">0</literal></expr>;</init> <condition pos:start="688:25" pos:end="688:43"><expr pos:start="688:25" pos:end="688:42"><name pos:start="688:25" pos:end="688:28">list</name><operator pos:start="688:29" pos:end="688:29">&lt;</operator><name pos:start="688:30" pos:end="688:42"><name pos:start="688:30" pos:end="688:30">h</name><operator pos:start="688:31" pos:end="688:32">-&gt;</operator><name pos:start="688:33" pos:end="688:42">list_count</name></name></expr>;</condition> <incr pos:start="688:45" pos:end="688:50"><expr pos:start="688:45" pos:end="688:50"><name pos:start="688:45" pos:end="688:48">list</name><operator pos:start="688:49" pos:end="688:50">++</operator></expr></incr>)</control><block pos:start="688:52" pos:end="718:13">{<block_content pos:start="690:17" pos:end="716:17">

                <for pos:start="690:17" pos:end="716:17">for<control pos:start="690:20" pos:end="690:34">(<init pos:start="690:21" pos:end="690:24"><expr pos:start="690:21" pos:end="690:23"><name pos:start="690:21" pos:end="690:21">i</name><operator pos:start="690:22" pos:end="690:22">=</operator><literal type="number" pos:start="690:23" pos:end="690:23">0</literal></expr>;</init> <condition pos:start="690:26" pos:end="690:29"><expr pos:start="690:26" pos:end="690:28"><name pos:start="690:26" pos:end="690:26">i</name><operator pos:start="690:27" pos:end="690:27">&lt;</operator><literal type="number" pos:start="690:28" pos:end="690:28">2</literal></expr>;</condition> <incr pos:start="690:31" pos:end="690:33"><expr pos:start="690:31" pos:end="690:33"><name pos:start="690:31" pos:end="690:31">i</name><operator pos:start="690:32" pos:end="690:33">++</operator></expr></incr>)</control><block pos:start="690:35" pos:end="716:17">{<block_content pos:start="692:21" pos:end="714:21">

                    <if_stmt pos:start="692:21" pos:end="714:21"><if pos:start="692:21" pos:end="708:21">if<condition pos:start="692:23" pos:end="692:48">(<expr pos:start="692:24" pos:end="692:47"><call pos:start="692:24" pos:end="692:47"><name pos:start="692:24" pos:end="692:29">IS_DIR</name><argument_list pos:start="692:30" pos:end="692:47">(<argument pos:start="692:31" pos:end="692:37"><expr pos:start="692:31" pos:end="692:37"><name pos:start="692:31" pos:end="692:37">mb_type</name></expr></argument>, <argument pos:start="692:40" pos:end="692:40"><expr pos:start="692:40" pos:end="692:40"><name pos:start="692:40" pos:end="692:40">i</name></expr></argument>, <argument pos:start="692:43" pos:end="692:46"><expr pos:start="692:43" pos:end="692:46"><name pos:start="692:43" pos:end="692:46">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="692:49" pos:end="708:21">{<block_content pos:start="694:25" pos:end="706:108">

                        <decl_stmt pos:start="694:25" pos:end="694:42"><decl pos:start="694:25" pos:end="694:30"><type pos:start="694:25" pos:end="694:27"><name pos:start="694:25" pos:end="694:27">int</name></type> <name pos:start="694:29" pos:end="694:30">mx</name></decl>,<decl pos:start="694:32" pos:end="694:33"><type ref="prev" pos:start="694:25" pos:end="694:27"/><name pos:start="694:32" pos:end="694:33">my</name></decl>,<decl pos:start="694:35" pos:end="694:37"><type ref="prev" pos:start="694:25" pos:end="694:27"/><name pos:start="694:35" pos:end="694:37">mpx</name></decl>,<decl pos:start="694:39" pos:end="694:41"><type ref="prev" pos:start="694:25" pos:end="694:27"/><name pos:start="694:39" pos:end="694:41">mpy</name></decl>;</decl_stmt>

                        <expr_stmt pos:start="696:25" pos:end="696:102"><expr pos:start="696:25" pos:end="696:101"><call pos:start="696:25" pos:end="696:101"><name pos:start="696:25" pos:end="696:40">pred_16x8_motion</name><argument_list pos:start="696:41" pos:end="696:101">(<argument pos:start="696:42" pos:end="696:42"><expr pos:start="696:42" pos:end="696:42"><name pos:start="696:42" pos:end="696:42">h</name></expr></argument>, <argument pos:start="696:45" pos:end="696:47"><expr pos:start="696:45" pos:end="696:47"><literal type="number" pos:start="696:45" pos:end="696:45">8</literal><operator pos:start="696:46" pos:end="696:46">*</operator><name pos:start="696:47" pos:end="696:47">i</name></expr></argument>, <argument pos:start="696:50" pos:end="696:53"><expr pos:start="696:50" pos:end="696:53"><name pos:start="696:50" pos:end="696:53">list</name></expr></argument>, <argument pos:start="696:56" pos:end="696:90"><expr pos:start="696:56" pos:end="696:90"><name pos:start="696:56" pos:end="696:90"><name pos:start="696:56" pos:end="696:56">h</name><operator pos:start="696:57" pos:end="696:58">-&gt;</operator><name pos:start="696:59" pos:end="696:67">ref_cache</name><index pos:start="696:68" pos:end="696:73">[<expr pos:start="696:69" pos:end="696:72"><name pos:start="696:69" pos:end="696:72">list</name></expr>]</index><index pos:start="696:74" pos:end="696:90">[<expr pos:start="696:75" pos:end="696:89"><name pos:start="696:75" pos:end="696:82"><name pos:start="696:75" pos:end="696:79">scan8</name><index pos:start="696:80" pos:end="696:82">[<expr pos:start="696:81" pos:end="696:81"><literal type="number" pos:start="696:81" pos:end="696:81">0</literal></expr>]</index></name> <operator pos:start="696:84" pos:end="696:84">+</operator> <literal type="number" pos:start="696:86" pos:end="696:87">16</literal><operator pos:start="696:88" pos:end="696:88">*</operator><name pos:start="696:89" pos:end="696:89">i</name></expr>]</index></name></expr></argument>, <argument pos:start="696:93" pos:end="696:95"><expr pos:start="696:93" pos:end="696:95"><operator pos:start="696:93" pos:end="696:93">&amp;</operator><name pos:start="696:94" pos:end="696:95">mx</name></expr></argument>, <argument pos:start="696:98" pos:end="696:100"><expr pos:start="696:98" pos:end="696:100"><operator pos:start="696:98" pos:end="696:98">&amp;</operator><name pos:start="696:99" pos:end="696:100">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <macro pos:start="698:25" pos:end="698:58"><name pos:start="698:25" pos:end="698:43">DECODE_CABAC_MB_MVD</name><argument_list pos:start="698:44" pos:end="698:58">( <argument pos:start="698:46" pos:end="698:46">h</argument>, <argument pos:start="698:49" pos:end="698:52">list</argument>, <argument pos:start="698:55" pos:end="698:57"><literal type="number" pos:start="698:55" pos:end="698:55">8</literal>*i</argument>)</argument_list></macro>

                        <expr_stmt pos:start="700:25" pos:end="700:70"><expr pos:start="700:25" pos:end="700:69"><call pos:start="700:25" pos:end="700:69"><name pos:start="700:25" pos:end="700:31">tprintf</name><argument_list pos:start="700:32" pos:end="700:69">(<argument pos:start="700:33" pos:end="700:40"><expr pos:start="700:33" pos:end="700:40"><name pos:start="700:33" pos:end="700:40"><name pos:start="700:33" pos:end="700:33">s</name><operator pos:start="700:34" pos:end="700:35">-&gt;</operator><name pos:start="700:36" pos:end="700:40">avctx</name></name></expr></argument>, <argument pos:start="700:43" pos:end="700:60"><expr pos:start="700:43" pos:end="700:60"><literal type="string" pos:start="700:43" pos:end="700:60">"final mv:%d %d\n"</literal></expr></argument>, <argument pos:start="700:63" pos:end="700:64"><expr pos:start="700:63" pos:end="700:64"><name pos:start="700:63" pos:end="700:64">mx</name></expr></argument>, <argument pos:start="700:67" pos:end="700:68"><expr pos:start="700:67" pos:end="700:68"><name pos:start="700:67" pos:end="700:68">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <expr_stmt pos:start="704:25" pos:end="704:110"><expr pos:start="704:25" pos:end="704:109"><call pos:start="704:25" pos:end="704:109"><name pos:start="704:25" pos:end="704:38">fill_rectangle</name><argument_list pos:start="704:39" pos:end="704:109">(<argument pos:start="704:40" pos:end="704:76"><expr pos:start="704:40" pos:end="704:76"><name pos:start="704:40" pos:end="704:76"><name pos:start="704:40" pos:end="704:40">h</name><operator pos:start="704:41" pos:end="704:42">-&gt;</operator><name pos:start="704:43" pos:end="704:51">mvd_cache</name><index pos:start="704:52" pos:end="704:57">[<expr pos:start="704:53" pos:end="704:56"><name pos:start="704:53" pos:end="704:56">list</name></expr>]</index><index pos:start="704:58" pos:end="704:76">[ <expr pos:start="704:60" pos:end="704:74"><name pos:start="704:60" pos:end="704:67"><name pos:start="704:60" pos:end="704:64">scan8</name><index pos:start="704:65" pos:end="704:67">[<expr pos:start="704:66" pos:end="704:66"><literal type="number" pos:start="704:66" pos:end="704:66">0</literal></expr>]</index></name> <operator pos:start="704:69" pos:end="704:69">+</operator> <literal type="number" pos:start="704:71" pos:end="704:72">16</literal><operator pos:start="704:73" pos:end="704:73">*</operator><name pos:start="704:74" pos:end="704:74">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="704:79" pos:end="704:79"><expr pos:start="704:79" pos:end="704:79"><literal type="number" pos:start="704:79" pos:end="704:79">4</literal></expr></argument>, <argument pos:start="704:82" pos:end="704:82"><expr pos:start="704:82" pos:end="704:82"><literal type="number" pos:start="704:82" pos:end="704:82">2</literal></expr></argument>, <argument pos:start="704:85" pos:end="704:85"><expr pos:start="704:85" pos:end="704:85"><literal type="number" pos:start="704:85" pos:end="704:85">8</literal></expr></argument>, <argument pos:start="704:88" pos:end="704:105"><expr pos:start="704:88" pos:end="704:105"><call pos:start="704:88" pos:end="704:105"><name pos:start="704:88" pos:end="704:96">pack8to16</name><argument_list pos:start="704:97" pos:end="704:105">(<argument pos:start="704:98" pos:end="704:100"><expr pos:start="704:98" pos:end="704:100"><name pos:start="704:98" pos:end="704:100">mpx</name></expr></argument>,<argument pos:start="704:102" pos:end="704:104"><expr pos:start="704:102" pos:end="704:104"><name pos:start="704:102" pos:end="704:104">mpy</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="704:108" pos:end="704:108"><expr pos:start="704:108" pos:end="704:108"><literal type="number" pos:start="704:108" pos:end="704:108">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="706:25" pos:end="706:108"><expr pos:start="706:25" pos:end="706:107"><call pos:start="706:25" pos:end="706:107"><name pos:start="706:25" pos:end="706:38">fill_rectangle</name><argument_list pos:start="706:39" pos:end="706:107">(<argument pos:start="706:40" pos:end="706:75"><expr pos:start="706:40" pos:end="706:75"><name pos:start="706:40" pos:end="706:75"><name pos:start="706:40" pos:end="706:40">h</name><operator pos:start="706:41" pos:end="706:42">-&gt;</operator><name pos:start="706:43" pos:end="706:50">mv_cache</name><index pos:start="706:51" pos:end="706:56">[<expr pos:start="706:52" pos:end="706:55"><name pos:start="706:52" pos:end="706:55">list</name></expr>]</index><index pos:start="706:57" pos:end="706:75">[ <expr pos:start="706:59" pos:end="706:73"><name pos:start="706:59" pos:end="706:66"><name pos:start="706:59" pos:end="706:63">scan8</name><index pos:start="706:64" pos:end="706:66">[<expr pos:start="706:65" pos:end="706:65"><literal type="number" pos:start="706:65" pos:end="706:65">0</literal></expr>]</index></name> <operator pos:start="706:68" pos:end="706:68">+</operator> <literal type="number" pos:start="706:70" pos:end="706:71">16</literal><operator pos:start="706:72" pos:end="706:72">*</operator><name pos:start="706:73" pos:end="706:73">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="706:78" pos:end="706:78"><expr pos:start="706:78" pos:end="706:78"><literal type="number" pos:start="706:78" pos:end="706:78">4</literal></expr></argument>, <argument pos:start="706:81" pos:end="706:81"><expr pos:start="706:81" pos:end="706:81"><literal type="number" pos:start="706:81" pos:end="706:81">2</literal></expr></argument>, <argument pos:start="706:84" pos:end="706:84"><expr pos:start="706:84" pos:end="706:84"><literal type="number" pos:start="706:84" pos:end="706:84">8</literal></expr></argument>, <argument pos:start="706:87" pos:end="706:103"><expr pos:start="706:87" pos:end="706:103"><call pos:start="706:87" pos:end="706:103"><name pos:start="706:87" pos:end="706:96">pack16to32</name><argument_list pos:start="706:97" pos:end="706:103">(<argument pos:start="706:98" pos:end="706:99"><expr pos:start="706:98" pos:end="706:99"><name pos:start="706:98" pos:end="706:99">mx</name></expr></argument>,<argument pos:start="706:101" pos:end="706:102"><expr pos:start="706:101" pos:end="706:102"><name pos:start="706:101" pos:end="706:102">my</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="706:106" pos:end="706:106"><expr pos:start="706:106" pos:end="706:106"><literal type="number" pos:start="706:106" pos:end="706:106">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if><else pos:start="708:22" pos:end="714:21">else<block pos:start="708:26" pos:end="714:21">{<block_content pos:start="710:25" pos:end="712:93">

                        <expr_stmt pos:start="710:25" pos:end="710:93"><expr pos:start="710:25" pos:end="710:92"><call pos:start="710:25" pos:end="710:92"><name pos:start="710:25" pos:end="710:38">fill_rectangle</name><argument_list pos:start="710:39" pos:end="710:92">(<argument pos:start="710:40" pos:end="710:76"><expr pos:start="710:40" pos:end="710:76"><name pos:start="710:40" pos:end="710:76"><name pos:start="710:40" pos:end="710:40">h</name><operator pos:start="710:41" pos:end="710:42">-&gt;</operator><name pos:start="710:43" pos:end="710:51">mvd_cache</name><index pos:start="710:52" pos:end="710:57">[<expr pos:start="710:53" pos:end="710:56"><name pos:start="710:53" pos:end="710:56">list</name></expr>]</index><index pos:start="710:58" pos:end="710:76">[ <expr pos:start="710:60" pos:end="710:74"><name pos:start="710:60" pos:end="710:67"><name pos:start="710:60" pos:end="710:64">scan8</name><index pos:start="710:65" pos:end="710:67">[<expr pos:start="710:66" pos:end="710:66"><literal type="number" pos:start="710:66" pos:end="710:66">0</literal></expr>]</index></name> <operator pos:start="710:69" pos:end="710:69">+</operator> <literal type="number" pos:start="710:71" pos:end="710:72">16</literal><operator pos:start="710:73" pos:end="710:73">*</operator><name pos:start="710:74" pos:end="710:74">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="710:79" pos:end="710:79"><expr pos:start="710:79" pos:end="710:79"><literal type="number" pos:start="710:79" pos:end="710:79">4</literal></expr></argument>, <argument pos:start="710:82" pos:end="710:82"><expr pos:start="710:82" pos:end="710:82"><literal type="number" pos:start="710:82" pos:end="710:82">2</literal></expr></argument>, <argument pos:start="710:85" pos:end="710:85"><expr pos:start="710:85" pos:end="710:85"><literal type="number" pos:start="710:85" pos:end="710:85">8</literal></expr></argument>, <argument pos:start="710:88" pos:end="710:88"><expr pos:start="710:88" pos:end="710:88"><literal type="number" pos:start="710:88" pos:end="710:88">0</literal></expr></argument>, <argument pos:start="710:91" pos:end="710:91"><expr pos:start="710:91" pos:end="710:91"><literal type="number" pos:start="710:91" pos:end="710:91">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="712:25" pos:end="712:93"><expr pos:start="712:25" pos:end="712:92"><call pos:start="712:25" pos:end="712:92"><name pos:start="712:25" pos:end="712:38">fill_rectangle</name><argument_list pos:start="712:39" pos:end="712:92">(<argument pos:start="712:40" pos:end="712:76"><expr pos:start="712:40" pos:end="712:76"><name pos:start="712:40" pos:end="712:76"><name pos:start="712:40" pos:end="712:40">h</name><operator pos:start="712:41" pos:end="712:42">-&gt;</operator> <name pos:start="712:44" pos:end="712:51">mv_cache</name><index pos:start="712:52" pos:end="712:57">[<expr pos:start="712:53" pos:end="712:56"><name pos:start="712:53" pos:end="712:56">list</name></expr>]</index><index pos:start="712:58" pos:end="712:76">[ <expr pos:start="712:60" pos:end="712:74"><name pos:start="712:60" pos:end="712:67"><name pos:start="712:60" pos:end="712:64">scan8</name><index pos:start="712:65" pos:end="712:67">[<expr pos:start="712:66" pos:end="712:66"><literal type="number" pos:start="712:66" pos:end="712:66">0</literal></expr>]</index></name> <operator pos:start="712:69" pos:end="712:69">+</operator> <literal type="number" pos:start="712:71" pos:end="712:72">16</literal><operator pos:start="712:73" pos:end="712:73">*</operator><name pos:start="712:74" pos:end="712:74">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="712:79" pos:end="712:79"><expr pos:start="712:79" pos:end="712:79"><literal type="number" pos:start="712:79" pos:end="712:79">4</literal></expr></argument>, <argument pos:start="712:82" pos:end="712:82"><expr pos:start="712:82" pos:end="712:82"><literal type="number" pos:start="712:82" pos:end="712:82">2</literal></expr></argument>, <argument pos:start="712:85" pos:end="712:85"><expr pos:start="712:85" pos:end="712:85"><literal type="number" pos:start="712:85" pos:end="712:85">8</literal></expr></argument>, <argument pos:start="712:88" pos:end="712:88"><expr pos:start="712:88" pos:end="712:88"><literal type="number" pos:start="712:88" pos:end="712:88">0</literal></expr></argument>, <argument pos:start="712:91" pos:end="712:91"><expr pos:start="712:91" pos:end="712:91"><literal type="number" pos:start="712:91" pos:end="712:91">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></if><else pos:start="720:10" pos:end="789:9">else<block pos:start="720:14" pos:end="789:9">{<block_content pos:start="722:13" pos:end="787:13">

            <expr_stmt pos:start="722:13" pos:end="722:37"><expr pos:start="722:13" pos:end="722:36"><call pos:start="722:13" pos:end="722:36"><name pos:start="722:13" pos:end="722:18">assert</name><argument_list pos:start="722:19" pos:end="722:36">(<argument pos:start="722:20" pos:end="722:35"><expr pos:start="722:20" pos:end="722:35"><call pos:start="722:20" pos:end="722:35"><name pos:start="722:20" pos:end="722:26">IS_8X16</name><argument_list pos:start="722:27" pos:end="722:35">(<argument pos:start="722:28" pos:end="722:34"><expr pos:start="722:28" pos:end="722:34"><name pos:start="722:28" pos:end="722:34">mb_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="724:13" pos:end="755:13">for<control pos:start="724:16" pos:end="724:51">(<init pos:start="724:17" pos:end="724:23"><expr pos:start="724:17" pos:end="724:22"><name pos:start="724:17" pos:end="724:20">list</name><operator pos:start="724:21" pos:end="724:21">=</operator><literal type="number" pos:start="724:22" pos:end="724:22">0</literal></expr>;</init> <condition pos:start="724:25" pos:end="724:43"><expr pos:start="724:25" pos:end="724:42"><name pos:start="724:25" pos:end="724:28">list</name><operator pos:start="724:29" pos:end="724:29">&lt;</operator><name pos:start="724:30" pos:end="724:42"><name pos:start="724:30" pos:end="724:30">h</name><operator pos:start="724:31" pos:end="724:32">-&gt;</operator><name pos:start="724:33" pos:end="724:42">list_count</name></name></expr>;</condition> <incr pos:start="724:45" pos:end="724:50"><expr pos:start="724:45" pos:end="724:50"><name pos:start="724:45" pos:end="724:48">list</name><operator pos:start="724:49" pos:end="724:50">++</operator></expr></incr>)</control><block pos:start="724:52" pos:end="755:13">{<block_content pos:start="726:21" pos:end="753:21">

                    <for pos:start="726:21" pos:end="753:21">for<control pos:start="726:24" pos:end="726:38">(<init pos:start="726:25" pos:end="726:28"><expr pos:start="726:25" pos:end="726:27"><name pos:start="726:25" pos:end="726:25">i</name><operator pos:start="726:26" pos:end="726:26">=</operator><literal type="number" pos:start="726:27" pos:end="726:27">0</literal></expr>;</init> <condition pos:start="726:30" pos:end="726:33"><expr pos:start="726:30" pos:end="726:32"><name pos:start="726:30" pos:end="726:30">i</name><operator pos:start="726:31" pos:end="726:31">&lt;</operator><literal type="number" pos:start="726:32" pos:end="726:32">2</literal></expr>;</condition> <incr pos:start="726:35" pos:end="726:37"><expr pos:start="726:35" pos:end="726:37"><name pos:start="726:35" pos:end="726:35">i</name><operator pos:start="726:36" pos:end="726:37">++</operator></expr></incr>)</control><block pos:start="726:39" pos:end="753:21">{<block_content pos:start="728:25" pos:end="751:116">

                        <if_stmt pos:start="728:25" pos:end="751:116"><if pos:start="728:25" pos:end="749:25">if<condition pos:start="728:27" pos:end="728:52">(<expr pos:start="728:28" pos:end="728:51"><call pos:start="728:28" pos:end="728:51"><name pos:start="728:28" pos:end="728:33">IS_DIR</name><argument_list pos:start="728:34" pos:end="728:51">(<argument pos:start="728:35" pos:end="728:41"><expr pos:start="728:35" pos:end="728:41"><name pos:start="728:35" pos:end="728:41">mb_type</name></expr></argument>, <argument pos:start="728:44" pos:end="728:44"><expr pos:start="728:44" pos:end="728:44"><name pos:start="728:44" pos:end="728:44">i</name></expr></argument>, <argument pos:start="728:47" pos:end="728:50"><expr pos:start="728:47" pos:end="728:50"><name pos:start="728:47" pos:end="728:50">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="728:53" pos:end="749:25">{<block_content pos:start="730:29" pos:end="747:99"> <comment type="line" pos:start="728:55" pos:end="728:70">//FIXME optimize</comment>

                            <decl_stmt pos:start="730:29" pos:end="730:36"><decl pos:start="730:29" pos:end="730:35"><type pos:start="730:29" pos:end="730:31"><name pos:start="730:29" pos:end="730:31">int</name></type> <name pos:start="730:33" pos:end="730:35">ref</name></decl>;</decl_stmt>

                            <if_stmt pos:start="732:29" pos:end="745:38"><if pos:start="732:29" pos:end="743:29">if<condition pos:start="732:31" pos:end="732:54">(<expr pos:start="732:32" pos:end="732:53"><name pos:start="732:32" pos:end="732:49"><name pos:start="732:32" pos:end="732:32">h</name><operator pos:start="732:33" pos:end="732:34">-&gt;</operator><name pos:start="732:35" pos:end="732:43">ref_count</name><index pos:start="732:44" pos:end="732:49">[<expr pos:start="732:45" pos:end="732:48"><name pos:start="732:45" pos:end="732:48">list</name></expr>]</index></name> <operator pos:start="732:51" pos:end="732:51">&gt;</operator> <literal type="number" pos:start="732:53" pos:end="732:53">1</literal></expr>)</condition><block pos:start="732:55" pos:end="743:29">{<block_content pos:start="734:33" pos:end="741:33">

                                <expr_stmt pos:start="734:33" pos:end="734:73"><expr pos:start="734:33" pos:end="734:72"><name pos:start="734:33" pos:end="734:35">ref</name><operator pos:start="734:36" pos:end="734:36">=</operator> <call pos:start="734:38" pos:end="734:72"><name pos:start="734:38" pos:end="734:56">decode_cabac_mb_ref</name><argument_list pos:start="734:57" pos:end="734:72">( <argument pos:start="734:59" pos:end="734:59"><expr pos:start="734:59" pos:end="734:59"><name pos:start="734:59" pos:end="734:59">h</name></expr></argument>, <argument pos:start="734:62" pos:end="734:65"><expr pos:start="734:62" pos:end="734:65"><name pos:start="734:62" pos:end="734:65">list</name></expr></argument>, <argument pos:start="734:68" pos:end="734:70"><expr pos:start="734:68" pos:end="734:70"><literal type="number" pos:start="734:68" pos:end="734:68">4</literal><operator pos:start="734:69" pos:end="734:69">*</operator><name pos:start="734:70" pos:end="734:70">i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                                <if_stmt pos:start="736:33" pos:end="741:33"><if pos:start="736:33" pos:end="741:33">if<condition pos:start="736:35" pos:end="736:71">(<expr pos:start="736:36" pos:end="736:70"><name pos:start="736:36" pos:end="736:38">ref</name> <operator pos:start="736:40" pos:end="736:41">&gt;=</operator> <operator pos:start="736:43" pos:end="736:43">(</operator><name pos:start="736:44" pos:end="736:51">unsigned</name><operator pos:start="736:52" pos:end="736:52">)</operator><name pos:start="736:53" pos:end="736:70"><name pos:start="736:53" pos:end="736:53">h</name><operator pos:start="736:54" pos:end="736:55">-&gt;</operator><name pos:start="736:56" pos:end="736:64">ref_count</name><index pos:start="736:65" pos:end="736:70">[<expr pos:start="736:66" pos:end="736:69"><name pos:start="736:66" pos:end="736:69">list</name></expr>]</index></name></expr>)</condition><block pos:start="736:72" pos:end="741:33">{<block_content pos:start="738:37" pos:end="738:116">

                                    <expr_stmt pos:start="738:37" pos:end="738:116"><expr pos:start="738:37" pos:end="738:115"><call pos:start="738:37" pos:end="738:115"><name pos:start="738:37" pos:end="738:42">av_log</name><argument_list pos:start="738:43" pos:end="738:115">(<argument pos:start="738:44" pos:end="738:51"><expr pos:start="738:44" pos:end="738:51"><name pos:start="738:44" pos:end="738:51"><name pos:start="738:44" pos:end="738:44">s</name><operator pos:start="738:45" pos:end="738:46">-&gt;</operator><name pos:start="738:47" pos:end="738:51">avctx</name></name></expr></argument>, <argument pos:start="738:54" pos:end="738:65"><expr pos:start="738:54" pos:end="738:65"><name pos:start="738:54" pos:end="738:65">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="738:68" pos:end="738:89"><expr pos:start="738:68" pos:end="738:89"><literal type="string" pos:start="738:68" pos:end="738:89">"Reference %d &gt;= %d\n"</literal></expr></argument>, <argument pos:start="738:92" pos:end="738:94"><expr pos:start="738:92" pos:end="738:94"><name pos:start="738:92" pos:end="738:94">ref</name></expr></argument>, <argument pos:start="738:97" pos:end="738:114"><expr pos:start="738:97" pos:end="738:114"><name pos:start="738:97" pos:end="738:114"><name pos:start="738:97" pos:end="738:97">h</name><operator pos:start="738:98" pos:end="738:99">-&gt;</operator><name pos:start="738:100" pos:end="738:108">ref_count</name><index pos:start="738:109" pos:end="738:114">[<expr pos:start="738:110" pos:end="738:113"><name pos:start="738:110" pos:end="738:113">list</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                                </block_content>}</block></if></if_stmt>

                            </block_content>}</block></if><else pos:start="743:30" pos:end="745:38">else<block type="pseudo" pos:start="745:33" pos:end="745:38"><block_content pos:start="745:33" pos:end="745:38">

                                <expr_stmt pos:start="745:33" pos:end="745:38"><expr pos:start="745:33" pos:end="745:37"><name pos:start="745:33" pos:end="745:35">ref</name><operator pos:start="745:36" pos:end="745:36">=</operator><literal type="number" pos:start="745:37" pos:end="745:37">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                            <expr_stmt pos:start="747:29" pos:end="747:99"><expr pos:start="747:29" pos:end="747:98"><call pos:start="747:29" pos:end="747:98"><name pos:start="747:29" pos:end="747:42">fill_rectangle</name><argument_list pos:start="747:43" pos:end="747:98">(<argument pos:start="747:44" pos:end="747:80"><expr pos:start="747:44" pos:end="747:80"><operator pos:start="747:44" pos:end="747:44">&amp;</operator><name pos:start="747:45" pos:end="747:80"><name pos:start="747:45" pos:end="747:45">h</name><operator pos:start="747:46" pos:end="747:47">-&gt;</operator><name pos:start="747:48" pos:end="747:56">ref_cache</name><index pos:start="747:57" pos:end="747:62">[<expr pos:start="747:58" pos:end="747:61"><name pos:start="747:58" pos:end="747:61">list</name></expr>]</index><index pos:start="747:63" pos:end="747:80">[ <expr pos:start="747:65" pos:end="747:78"><name pos:start="747:65" pos:end="747:72"><name pos:start="747:65" pos:end="747:69">scan8</name><index pos:start="747:70" pos:end="747:72">[<expr pos:start="747:71" pos:end="747:71"><literal type="number" pos:start="747:71" pos:end="747:71">0</literal></expr>]</index></name> <operator pos:start="747:74" pos:end="747:74">+</operator> <literal type="number" pos:start="747:76" pos:end="747:76">2</literal><operator pos:start="747:77" pos:end="747:77">*</operator><name pos:start="747:78" pos:end="747:78">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="747:83" pos:end="747:83"><expr pos:start="747:83" pos:end="747:83"><literal type="number" pos:start="747:83" pos:end="747:83">2</literal></expr></argument>, <argument pos:start="747:86" pos:end="747:86"><expr pos:start="747:86" pos:end="747:86"><literal type="number" pos:start="747:86" pos:end="747:86">4</literal></expr></argument>, <argument pos:start="747:89" pos:end="747:89"><expr pos:start="747:89" pos:end="747:89"><literal type="number" pos:start="747:89" pos:end="747:89">8</literal></expr></argument>, <argument pos:start="747:92" pos:end="747:94"><expr pos:start="747:92" pos:end="747:94"><name pos:start="747:92" pos:end="747:94">ref</name></expr></argument>, <argument pos:start="747:97" pos:end="747:97"><expr pos:start="747:97" pos:end="747:97"><literal type="number" pos:start="747:97" pos:end="747:97">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if><else pos:start="749:26" pos:end="751:116">else<block type="pseudo" pos:start="751:29" pos:end="751:116"><block_content pos:start="751:29" pos:end="751:116">

                            <expr_stmt pos:start="751:29" pos:end="751:116"><expr pos:start="751:29" pos:end="751:115"><call pos:start="751:29" pos:end="751:115"><name pos:start="751:29" pos:end="751:42">fill_rectangle</name><argument_list pos:start="751:43" pos:end="751:115">(<argument pos:start="751:44" pos:end="751:80"><expr pos:start="751:44" pos:end="751:80"><operator pos:start="751:44" pos:end="751:44">&amp;</operator><name pos:start="751:45" pos:end="751:80"><name pos:start="751:45" pos:end="751:45">h</name><operator pos:start="751:46" pos:end="751:47">-&gt;</operator><name pos:start="751:48" pos:end="751:56">ref_cache</name><index pos:start="751:57" pos:end="751:62">[<expr pos:start="751:58" pos:end="751:61"><name pos:start="751:58" pos:end="751:61">list</name></expr>]</index><index pos:start="751:63" pos:end="751:80">[ <expr pos:start="751:65" pos:end="751:78"><name pos:start="751:65" pos:end="751:72"><name pos:start="751:65" pos:end="751:69">scan8</name><index pos:start="751:70" pos:end="751:72">[<expr pos:start="751:71" pos:end="751:71"><literal type="number" pos:start="751:71" pos:end="751:71">0</literal></expr>]</index></name> <operator pos:start="751:74" pos:end="751:74">+</operator> <literal type="number" pos:start="751:76" pos:end="751:76">2</literal><operator pos:start="751:77" pos:end="751:77">*</operator><name pos:start="751:78" pos:end="751:78">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="751:83" pos:end="751:83"><expr pos:start="751:83" pos:end="751:83"><literal type="number" pos:start="751:83" pos:end="751:83">2</literal></expr></argument>, <argument pos:start="751:86" pos:end="751:86"><expr pos:start="751:86" pos:end="751:86"><literal type="number" pos:start="751:86" pos:end="751:86">4</literal></expr></argument>, <argument pos:start="751:89" pos:end="751:89"><expr pos:start="751:89" pos:end="751:89"><literal type="number" pos:start="751:89" pos:end="751:89">8</literal></expr></argument>, <argument pos:start="751:92" pos:end="751:111"><expr pos:start="751:92" pos:end="751:111"><operator pos:start="751:92" pos:end="751:92">(</operator><name pos:start="751:93" pos:end="751:105">LIST_NOT_USED</name><operator pos:start="751:106" pos:end="751:106">&amp;</operator><literal type="number" pos:start="751:107" pos:end="751:110">0xFF</literal><operator pos:start="751:111" pos:end="751:111">)</operator></expr></argument>, <argument pos:start="751:114" pos:end="751:114"><expr pos:start="751:114" pos:end="751:114"><literal type="number" pos:start="751:114" pos:end="751:114">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></for>

            </block_content>}</block></for>

            <for pos:start="757:13" pos:end="787:13">for<control pos:start="757:16" pos:end="757:51">(<init pos:start="757:17" pos:end="757:23"><expr pos:start="757:17" pos:end="757:22"><name pos:start="757:17" pos:end="757:20">list</name><operator pos:start="757:21" pos:end="757:21">=</operator><literal type="number" pos:start="757:22" pos:end="757:22">0</literal></expr>;</init> <condition pos:start="757:25" pos:end="757:43"><expr pos:start="757:25" pos:end="757:42"><name pos:start="757:25" pos:end="757:28">list</name><operator pos:start="757:29" pos:end="757:29">&lt;</operator><name pos:start="757:30" pos:end="757:42"><name pos:start="757:30" pos:end="757:30">h</name><operator pos:start="757:31" pos:end="757:32">-&gt;</operator><name pos:start="757:33" pos:end="757:42">list_count</name></name></expr>;</condition> <incr pos:start="757:45" pos:end="757:50"><expr pos:start="757:45" pos:end="757:50"><name pos:start="757:45" pos:end="757:48">list</name><operator pos:start="757:49" pos:end="757:50">++</operator></expr></incr>)</control><block pos:start="757:52" pos:end="787:13">{<block_content pos:start="759:17" pos:end="785:17">

                <for pos:start="759:17" pos:end="785:17">for<control pos:start="759:20" pos:end="759:34">(<init pos:start="759:21" pos:end="759:24"><expr pos:start="759:21" pos:end="759:23"><name pos:start="759:21" pos:end="759:21">i</name><operator pos:start="759:22" pos:end="759:22">=</operator><literal type="number" pos:start="759:23" pos:end="759:23">0</literal></expr>;</init> <condition pos:start="759:26" pos:end="759:29"><expr pos:start="759:26" pos:end="759:28"><name pos:start="759:26" pos:end="759:26">i</name><operator pos:start="759:27" pos:end="759:27">&lt;</operator><literal type="number" pos:start="759:28" pos:end="759:28">2</literal></expr>;</condition> <incr pos:start="759:31" pos:end="759:33"><expr pos:start="759:31" pos:end="759:33"><name pos:start="759:31" pos:end="759:31">i</name><operator pos:start="759:32" pos:end="759:33">++</operator></expr></incr>)</control><block pos:start="759:35" pos:end="785:17">{<block_content pos:start="761:21" pos:end="783:21">

                    <if_stmt pos:start="761:21" pos:end="783:21"><if pos:start="761:21" pos:end="777:21">if<condition pos:start="761:23" pos:end="761:48">(<expr pos:start="761:24" pos:end="761:47"><call pos:start="761:24" pos:end="761:47"><name pos:start="761:24" pos:end="761:29">IS_DIR</name><argument_list pos:start="761:30" pos:end="761:47">(<argument pos:start="761:31" pos:end="761:37"><expr pos:start="761:31" pos:end="761:37"><name pos:start="761:31" pos:end="761:37">mb_type</name></expr></argument>, <argument pos:start="761:40" pos:end="761:40"><expr pos:start="761:40" pos:end="761:40"><name pos:start="761:40" pos:end="761:40">i</name></expr></argument>, <argument pos:start="761:43" pos:end="761:46"><expr pos:start="761:43" pos:end="761:46"><name pos:start="761:43" pos:end="761:46">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="761:49" pos:end="777:21">{<block_content pos:start="763:25" pos:end="775:107">

                        <decl_stmt pos:start="763:25" pos:end="763:42"><decl pos:start="763:25" pos:end="763:30"><type pos:start="763:25" pos:end="763:27"><name pos:start="763:25" pos:end="763:27">int</name></type> <name pos:start="763:29" pos:end="763:30">mx</name></decl>,<decl pos:start="763:32" pos:end="763:33"><type ref="prev" pos:start="763:25" pos:end="763:27"/><name pos:start="763:32" pos:end="763:33">my</name></decl>,<decl pos:start="763:35" pos:end="763:37"><type ref="prev" pos:start="763:25" pos:end="763:27"/><name pos:start="763:35" pos:end="763:37">mpx</name></decl>,<decl pos:start="763:39" pos:end="763:41"><type ref="prev" pos:start="763:25" pos:end="763:27"/><name pos:start="763:39" pos:end="763:41">mpy</name></decl>;</decl_stmt>

                        <expr_stmt pos:start="765:25" pos:end="765:103"><expr pos:start="765:25" pos:end="765:102"><call pos:start="765:25" pos:end="765:102"><name pos:start="765:25" pos:end="765:40">pred_8x16_motion</name><argument_list pos:start="765:41" pos:end="765:102">(<argument pos:start="765:42" pos:end="765:42"><expr pos:start="765:42" pos:end="765:42"><name pos:start="765:42" pos:end="765:42">h</name></expr></argument>, <argument pos:start="765:45" pos:end="765:47"><expr pos:start="765:45" pos:end="765:47"><name pos:start="765:45" pos:end="765:45">i</name><operator pos:start="765:46" pos:end="765:46">*</operator><literal type="number" pos:start="765:47" pos:end="765:47">4</literal></expr></argument>, <argument pos:start="765:50" pos:end="765:53"><expr pos:start="765:50" pos:end="765:53"><name pos:start="765:50" pos:end="765:53">list</name></expr></argument>, <argument pos:start="765:56" pos:end="765:91"><expr pos:start="765:56" pos:end="765:91"><name pos:start="765:56" pos:end="765:91"><name pos:start="765:56" pos:end="765:56">h</name><operator pos:start="765:57" pos:end="765:58">-&gt;</operator><name pos:start="765:59" pos:end="765:67">ref_cache</name><index pos:start="765:68" pos:end="765:73">[<expr pos:start="765:69" pos:end="765:72"><name pos:start="765:69" pos:end="765:72">list</name></expr>]</index><index pos:start="765:74" pos:end="765:91">[ <expr pos:start="765:76" pos:end="765:89"><name pos:start="765:76" pos:end="765:83"><name pos:start="765:76" pos:end="765:80">scan8</name><index pos:start="765:81" pos:end="765:83">[<expr pos:start="765:82" pos:end="765:82"><literal type="number" pos:start="765:82" pos:end="765:82">0</literal></expr>]</index></name> <operator pos:start="765:85" pos:end="765:85">+</operator> <literal type="number" pos:start="765:87" pos:end="765:87">2</literal><operator pos:start="765:88" pos:end="765:88">*</operator><name pos:start="765:89" pos:end="765:89">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="765:94" pos:end="765:96"><expr pos:start="765:94" pos:end="765:96"><operator pos:start="765:94" pos:end="765:94">&amp;</operator><name pos:start="765:95" pos:end="765:96">mx</name></expr></argument>, <argument pos:start="765:99" pos:end="765:101"><expr pos:start="765:99" pos:end="765:101"><operator pos:start="765:99" pos:end="765:99">&amp;</operator><name pos:start="765:100" pos:end="765:101">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <macro pos:start="767:25" pos:end="767:58"><name pos:start="767:25" pos:end="767:43">DECODE_CABAC_MB_MVD</name><argument_list pos:start="767:44" pos:end="767:58">( <argument pos:start="767:46" pos:end="767:46">h</argument>, <argument pos:start="767:49" pos:end="767:52">list</argument>, <argument pos:start="767:55" pos:end="767:57"><literal type="number" pos:start="767:55" pos:end="767:55">4</literal>*i</argument>)</argument_list></macro>



                        <expr_stmt pos:start="771:25" pos:end="771:70"><expr pos:start="771:25" pos:end="771:69"><call pos:start="771:25" pos:end="771:69"><name pos:start="771:25" pos:end="771:31">tprintf</name><argument_list pos:start="771:32" pos:end="771:69">(<argument pos:start="771:33" pos:end="771:40"><expr pos:start="771:33" pos:end="771:40"><name pos:start="771:33" pos:end="771:40"><name pos:start="771:33" pos:end="771:33">s</name><operator pos:start="771:34" pos:end="771:35">-&gt;</operator><name pos:start="771:36" pos:end="771:40">avctx</name></name></expr></argument>, <argument pos:start="771:43" pos:end="771:60"><expr pos:start="771:43" pos:end="771:60"><literal type="string" pos:start="771:43" pos:end="771:60">"final mv:%d %d\n"</literal></expr></argument>, <argument pos:start="771:63" pos:end="771:64"><expr pos:start="771:63" pos:end="771:64"><name pos:start="771:63" pos:end="771:64">mx</name></expr></argument>, <argument pos:start="771:67" pos:end="771:68"><expr pos:start="771:67" pos:end="771:68"><name pos:start="771:67" pos:end="771:68">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="773:25" pos:end="773:109"><expr pos:start="773:25" pos:end="773:108"><call pos:start="773:25" pos:end="773:108"><name pos:start="773:25" pos:end="773:38">fill_rectangle</name><argument_list pos:start="773:39" pos:end="773:108">(<argument pos:start="773:40" pos:end="773:75"><expr pos:start="773:40" pos:end="773:75"><name pos:start="773:40" pos:end="773:75"><name pos:start="773:40" pos:end="773:40">h</name><operator pos:start="773:41" pos:end="773:42">-&gt;</operator><name pos:start="773:43" pos:end="773:51">mvd_cache</name><index pos:start="773:52" pos:end="773:57">[<expr pos:start="773:53" pos:end="773:56"><name pos:start="773:53" pos:end="773:56">list</name></expr>]</index><index pos:start="773:58" pos:end="773:75">[ <expr pos:start="773:60" pos:end="773:73"><name pos:start="773:60" pos:end="773:67"><name pos:start="773:60" pos:end="773:64">scan8</name><index pos:start="773:65" pos:end="773:67">[<expr pos:start="773:66" pos:end="773:66"><literal type="number" pos:start="773:66" pos:end="773:66">0</literal></expr>]</index></name> <operator pos:start="773:69" pos:end="773:69">+</operator> <literal type="number" pos:start="773:71" pos:end="773:71">2</literal><operator pos:start="773:72" pos:end="773:72">*</operator><name pos:start="773:73" pos:end="773:73">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="773:78" pos:end="773:78"><expr pos:start="773:78" pos:end="773:78"><literal type="number" pos:start="773:78" pos:end="773:78">2</literal></expr></argument>, <argument pos:start="773:81" pos:end="773:81"><expr pos:start="773:81" pos:end="773:81"><literal type="number" pos:start="773:81" pos:end="773:81">4</literal></expr></argument>, <argument pos:start="773:84" pos:end="773:84"><expr pos:start="773:84" pos:end="773:84"><literal type="number" pos:start="773:84" pos:end="773:84">8</literal></expr></argument>, <argument pos:start="773:87" pos:end="773:104"><expr pos:start="773:87" pos:end="773:104"><call pos:start="773:87" pos:end="773:104"><name pos:start="773:87" pos:end="773:95">pack8to16</name><argument_list pos:start="773:96" pos:end="773:104">(<argument pos:start="773:97" pos:end="773:99"><expr pos:start="773:97" pos:end="773:99"><name pos:start="773:97" pos:end="773:99">mpx</name></expr></argument>,<argument pos:start="773:101" pos:end="773:103"><expr pos:start="773:101" pos:end="773:103"><name pos:start="773:101" pos:end="773:103">mpy</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="773:107" pos:end="773:107"><expr pos:start="773:107" pos:end="773:107"><literal type="number" pos:start="773:107" pos:end="773:107">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="775:25" pos:end="775:107"><expr pos:start="775:25" pos:end="775:106"><call pos:start="775:25" pos:end="775:106"><name pos:start="775:25" pos:end="775:38">fill_rectangle</name><argument_list pos:start="775:39" pos:end="775:106">(<argument pos:start="775:40" pos:end="775:74"><expr pos:start="775:40" pos:end="775:74"><name pos:start="775:40" pos:end="775:74"><name pos:start="775:40" pos:end="775:40">h</name><operator pos:start="775:41" pos:end="775:42">-&gt;</operator><name pos:start="775:43" pos:end="775:50">mv_cache</name><index pos:start="775:51" pos:end="775:56">[<expr pos:start="775:52" pos:end="775:55"><name pos:start="775:52" pos:end="775:55">list</name></expr>]</index><index pos:start="775:57" pos:end="775:74">[ <expr pos:start="775:59" pos:end="775:72"><name pos:start="775:59" pos:end="775:66"><name pos:start="775:59" pos:end="775:63">scan8</name><index pos:start="775:64" pos:end="775:66">[<expr pos:start="775:65" pos:end="775:65"><literal type="number" pos:start="775:65" pos:end="775:65">0</literal></expr>]</index></name> <operator pos:start="775:68" pos:end="775:68">+</operator> <literal type="number" pos:start="775:70" pos:end="775:70">2</literal><operator pos:start="775:71" pos:end="775:71">*</operator><name pos:start="775:72" pos:end="775:72">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="775:77" pos:end="775:77"><expr pos:start="775:77" pos:end="775:77"><literal type="number" pos:start="775:77" pos:end="775:77">2</literal></expr></argument>, <argument pos:start="775:80" pos:end="775:80"><expr pos:start="775:80" pos:end="775:80"><literal type="number" pos:start="775:80" pos:end="775:80">4</literal></expr></argument>, <argument pos:start="775:83" pos:end="775:83"><expr pos:start="775:83" pos:end="775:83"><literal type="number" pos:start="775:83" pos:end="775:83">8</literal></expr></argument>, <argument pos:start="775:86" pos:end="775:102"><expr pos:start="775:86" pos:end="775:102"><call pos:start="775:86" pos:end="775:102"><name pos:start="775:86" pos:end="775:95">pack16to32</name><argument_list pos:start="775:96" pos:end="775:102">(<argument pos:start="775:97" pos:end="775:98"><expr pos:start="775:97" pos:end="775:98"><name pos:start="775:97" pos:end="775:98">mx</name></expr></argument>,<argument pos:start="775:100" pos:end="775:101"><expr pos:start="775:100" pos:end="775:101"><name pos:start="775:100" pos:end="775:101">my</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="775:105" pos:end="775:105"><expr pos:start="775:105" pos:end="775:105"><literal type="number" pos:start="775:105" pos:end="775:105">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if><else pos:start="777:22" pos:end="783:21">else<block pos:start="777:26" pos:end="783:21">{<block_content pos:start="779:25" pos:end="781:92">

                        <expr_stmt pos:start="779:25" pos:end="779:92"><expr pos:start="779:25" pos:end="779:91"><call pos:start="779:25" pos:end="779:91"><name pos:start="779:25" pos:end="779:38">fill_rectangle</name><argument_list pos:start="779:39" pos:end="779:91">(<argument pos:start="779:40" pos:end="779:75"><expr pos:start="779:40" pos:end="779:75"><name pos:start="779:40" pos:end="779:75"><name pos:start="779:40" pos:end="779:40">h</name><operator pos:start="779:41" pos:end="779:42">-&gt;</operator><name pos:start="779:43" pos:end="779:51">mvd_cache</name><index pos:start="779:52" pos:end="779:57">[<expr pos:start="779:53" pos:end="779:56"><name pos:start="779:53" pos:end="779:56">list</name></expr>]</index><index pos:start="779:58" pos:end="779:75">[ <expr pos:start="779:60" pos:end="779:73"><name pos:start="779:60" pos:end="779:67"><name pos:start="779:60" pos:end="779:64">scan8</name><index pos:start="779:65" pos:end="779:67">[<expr pos:start="779:66" pos:end="779:66"><literal type="number" pos:start="779:66" pos:end="779:66">0</literal></expr>]</index></name> <operator pos:start="779:69" pos:end="779:69">+</operator> <literal type="number" pos:start="779:71" pos:end="779:71">2</literal><operator pos:start="779:72" pos:end="779:72">*</operator><name pos:start="779:73" pos:end="779:73">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="779:78" pos:end="779:78"><expr pos:start="779:78" pos:end="779:78"><literal type="number" pos:start="779:78" pos:end="779:78">2</literal></expr></argument>, <argument pos:start="779:81" pos:end="779:81"><expr pos:start="779:81" pos:end="779:81"><literal type="number" pos:start="779:81" pos:end="779:81">4</literal></expr></argument>, <argument pos:start="779:84" pos:end="779:84"><expr pos:start="779:84" pos:end="779:84"><literal type="number" pos:start="779:84" pos:end="779:84">8</literal></expr></argument>, <argument pos:start="779:87" pos:end="779:87"><expr pos:start="779:87" pos:end="779:87"><literal type="number" pos:start="779:87" pos:end="779:87">0</literal></expr></argument>, <argument pos:start="779:90" pos:end="779:90"><expr pos:start="779:90" pos:end="779:90"><literal type="number" pos:start="779:90" pos:end="779:90">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="781:25" pos:end="781:92"><expr pos:start="781:25" pos:end="781:91"><call pos:start="781:25" pos:end="781:91"><name pos:start="781:25" pos:end="781:38">fill_rectangle</name><argument_list pos:start="781:39" pos:end="781:91">(<argument pos:start="781:40" pos:end="781:75"><expr pos:start="781:40" pos:end="781:75"><name pos:start="781:40" pos:end="781:75"><name pos:start="781:40" pos:end="781:40">h</name><operator pos:start="781:41" pos:end="781:42">-&gt;</operator> <name pos:start="781:44" pos:end="781:51">mv_cache</name><index pos:start="781:52" pos:end="781:57">[<expr pos:start="781:53" pos:end="781:56"><name pos:start="781:53" pos:end="781:56">list</name></expr>]</index><index pos:start="781:58" pos:end="781:75">[ <expr pos:start="781:60" pos:end="781:73"><name pos:start="781:60" pos:end="781:67"><name pos:start="781:60" pos:end="781:64">scan8</name><index pos:start="781:65" pos:end="781:67">[<expr pos:start="781:66" pos:end="781:66"><literal type="number" pos:start="781:66" pos:end="781:66">0</literal></expr>]</index></name> <operator pos:start="781:69" pos:end="781:69">+</operator> <literal type="number" pos:start="781:71" pos:end="781:71">2</literal><operator pos:start="781:72" pos:end="781:72">*</operator><name pos:start="781:73" pos:end="781:73">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="781:78" pos:end="781:78"><expr pos:start="781:78" pos:end="781:78"><literal type="number" pos:start="781:78" pos:end="781:78">2</literal></expr></argument>, <argument pos:start="781:81" pos:end="781:81"><expr pos:start="781:81" pos:end="781:81"><literal type="number" pos:start="781:81" pos:end="781:81">4</literal></expr></argument>, <argument pos:start="781:84" pos:end="781:84"><expr pos:start="781:84" pos:end="781:84"><literal type="number" pos:start="781:84" pos:end="781:84">8</literal></expr></argument>, <argument pos:start="781:87" pos:end="781:87"><expr pos:start="781:87" pos:end="781:87"><literal type="number" pos:start="781:87" pos:end="781:87">0</literal></expr></argument>, <argument pos:start="781:90" pos:end="781:90"><expr pos:start="781:90" pos:end="781:90"><literal type="number" pos:start="781:90" pos:end="781:90">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



   <if_stmt pos:start="795:4" pos:end="801:4"><if pos:start="795:4" pos:end="801:4">if<condition pos:start="795:6" pos:end="795:28">( <expr pos:start="795:8" pos:end="795:26"><call pos:start="795:8" pos:end="795:26"><name pos:start="795:8" pos:end="795:15">IS_INTER</name><argument_list pos:start="795:16" pos:end="795:26">( <argument pos:start="795:18" pos:end="795:24"><expr pos:start="795:18" pos:end="795:24"><name pos:start="795:18" pos:end="795:24">mb_type</name></expr></argument> )</argument_list></call></expr> )</condition> <block pos:start="795:30" pos:end="801:4">{<block_content pos:start="797:9" pos:end="799:40">

        <expr_stmt pos:start="797:9" pos:end="797:45"><expr pos:start="797:9" pos:end="797:44"><name pos:start="797:9" pos:end="797:40"><name pos:start="797:9" pos:end="797:9">h</name><operator pos:start="797:10" pos:end="797:11">-&gt;</operator><name pos:start="797:12" pos:end="797:33">chroma_pred_mode_table</name><index pos:start="797:34" pos:end="797:40">[<expr pos:start="797:35" pos:end="797:39"><name pos:start="797:35" pos:end="797:39">mb_xy</name></expr>]</index></name> <operator pos:start="797:42" pos:end="797:42">=</operator> <literal type="number" pos:start="797:44" pos:end="797:44">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="799:9" pos:end="799:40"><expr pos:start="799:9" pos:end="799:39"><call pos:start="799:9" pos:end="799:39"><name pos:start="799:9" pos:end="799:25">write_back_motion</name><argument_list pos:start="799:26" pos:end="799:39">( <argument pos:start="799:28" pos:end="799:28"><expr pos:start="799:28" pos:end="799:28"><name pos:start="799:28" pos:end="799:28">h</name></expr></argument>, <argument pos:start="799:31" pos:end="799:37"><expr pos:start="799:31" pos:end="799:37"><name pos:start="799:31" pos:end="799:37">mb_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

   </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="805:5" pos:end="813:5"><if pos:start="805:5" pos:end="813:5">if<condition pos:start="805:7" pos:end="805:35">( <expr pos:start="805:9" pos:end="805:33"><operator pos:start="805:9" pos:end="805:9">!</operator><call pos:start="805:10" pos:end="805:33"><name pos:start="805:10" pos:end="805:22">IS_INTRA16x16</name><argument_list pos:start="805:23" pos:end="805:33">( <argument pos:start="805:25" pos:end="805:31"><expr pos:start="805:25" pos:end="805:31"><name pos:start="805:25" pos:end="805:31">mb_type</name></expr></argument> )</argument_list></call></expr> )</condition> <block pos:start="805:37" pos:end="813:5">{<block_content pos:start="807:9" pos:end="811:56">

        <expr_stmt pos:start="807:9" pos:end="807:45"><expr pos:start="807:9" pos:end="807:44"><name pos:start="807:9" pos:end="807:11">cbp</name>  <operator pos:start="807:14" pos:end="807:14">=</operator> <call pos:start="807:16" pos:end="807:44"><name pos:start="807:16" pos:end="807:39">decode_cabac_mb_cbp_luma</name><argument_list pos:start="807:40" pos:end="807:44">( <argument pos:start="807:42" pos:end="807:42"><expr pos:start="807:42" pos:end="807:42"><name pos:start="807:42" pos:end="807:42">h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="809:9" pos:end="811:56"><if pos:start="809:9" pos:end="811:56">if<condition pos:start="809:11" pos:end="809:25">(<expr pos:start="809:12" pos:end="809:24"><name pos:start="809:12" pos:end="809:24">decode_chroma</name></expr>)</condition><block type="pseudo" pos:start="811:13" pos:end="811:56"><block_content pos:start="811:13" pos:end="811:56">

            <expr_stmt pos:start="811:13" pos:end="811:56"><expr pos:start="811:13" pos:end="811:55"><name pos:start="811:13" pos:end="811:15">cbp</name> <operator pos:start="811:17" pos:end="811:18">|=</operator> <call pos:start="811:20" pos:end="811:50"><name pos:start="811:20" pos:end="811:45">decode_cabac_mb_cbp_chroma</name><argument_list pos:start="811:46" pos:end="811:50">( <argument pos:start="811:48" pos:end="811:48"><expr pos:start="811:48" pos:end="811:48"><name pos:start="811:48" pos:end="811:48">h</name></expr></argument> )</argument_list></call> <operator pos:start="811:52" pos:end="811:53">&lt;&lt;</operator> <literal type="number" pos:start="811:55" pos:end="811:55">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="817:5" pos:end="817:39"><expr pos:start="817:5" pos:end="817:38"><name pos:start="817:5" pos:end="817:23"><name pos:start="817:5" pos:end="817:5">h</name><operator pos:start="817:6" pos:end="817:7">-&gt;</operator><name pos:start="817:8" pos:end="817:16">cbp_table</name><index pos:start="817:17" pos:end="817:23">[<expr pos:start="817:18" pos:end="817:22"><name pos:start="817:18" pos:end="817:22">mb_xy</name></expr>]</index></name> <operator pos:start="817:25" pos:end="817:25">=</operator> <name pos:start="817:27" pos:end="817:32"><name pos:start="817:27" pos:end="817:27">h</name><operator pos:start="817:28" pos:end="817:29">-&gt;</operator><name pos:start="817:30" pos:end="817:32">cbp</name></name> <operator pos:start="817:34" pos:end="817:34">=</operator> <name pos:start="817:36" pos:end="817:38">cbp</name></expr>;</expr_stmt>



    <if_stmt pos:start="821:5" pos:end="825:5"><if pos:start="821:5" pos:end="825:5">if<condition pos:start="821:7" pos:end="821:60">( <expr pos:start="821:9" pos:end="821:58"><name pos:start="821:9" pos:end="821:22">dct8x8_allowed</name> <operator pos:start="821:24" pos:end="821:25">&amp;&amp;</operator> <operator pos:start="821:27" pos:end="821:27">(</operator><name pos:start="821:28" pos:end="821:30">cbp</name><operator pos:start="821:31" pos:end="821:31">&amp;</operator><literal type="number" pos:start="821:32" pos:end="821:33">15</literal><operator pos:start="821:34" pos:end="821:34">)</operator> <operator pos:start="821:36" pos:end="821:37">&amp;&amp;</operator> <operator pos:start="821:39" pos:end="821:39">!</operator><call pos:start="821:40" pos:end="821:58"><name pos:start="821:40" pos:end="821:47">IS_INTRA</name><argument_list pos:start="821:48" pos:end="821:58">( <argument pos:start="821:50" pos:end="821:56"><expr pos:start="821:50" pos:end="821:56"><name pos:start="821:50" pos:end="821:56">mb_type</name></expr></argument> )</argument_list></call></expr> )</condition> <block pos:start="821:62" pos:end="825:5">{<block_content pos:start="823:9" pos:end="823:119">

        <expr_stmt pos:start="823:9" pos:end="823:119"><expr pos:start="823:9" pos:end="823:118"><name pos:start="823:9" pos:end="823:15">mb_type</name> <operator pos:start="823:17" pos:end="823:18">|=</operator> <name pos:start="823:20" pos:end="823:33">MB_TYPE_8x8DCT</name> <operator pos:start="823:35" pos:end="823:35">*</operator> <call pos:start="823:37" pos:end="823:118"><name pos:start="823:37" pos:end="823:54">get_cabac_noinline</name><argument_list pos:start="823:55" pos:end="823:118">( <argument pos:start="823:57" pos:end="823:65"><expr pos:start="823:57" pos:end="823:65"><operator pos:start="823:57" pos:end="823:57">&amp;</operator><name pos:start="823:58" pos:end="823:65"><name pos:start="823:58" pos:end="823:58">h</name><operator pos:start="823:59" pos:end="823:60">-&gt;</operator><name pos:start="823:61" pos:end="823:65">cabac</name></name></expr></argument>, <argument pos:start="823:68" pos:end="823:116"><expr pos:start="823:68" pos:end="823:116"><operator pos:start="823:68" pos:end="823:68">&amp;</operator><name pos:start="823:69" pos:end="823:116"><name pos:start="823:69" pos:end="823:69">h</name><operator pos:start="823:70" pos:end="823:71">-&gt;</operator><name pos:start="823:72" pos:end="823:82">cabac_state</name><index pos:start="823:83" pos:end="823:116">[<expr pos:start="823:84" pos:end="823:115"><literal type="number" pos:start="823:84" pos:end="823:88">399</literal> <operator pos:start="823:88" pos:end="823:88">+</operator> <name pos:start="823:90" pos:end="823:115"><name pos:start="823:90" pos:end="823:90">h</name><operator pos:start="823:91" pos:end="823:92">-&gt;</operator><name pos:start="823:93" pos:end="823:115">neighbor_transform_size</name></name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="829:5" pos:end="831:61">/* It would be better to do this in fill_decode_caches, but we don't know

     * the transform mode of the current macroblock there. */</comment>

    <if_stmt pos:start="833:5" pos:end="871:5"><if pos:start="833:5" pos:end="871:5">if <condition pos:start="833:8" pos:end="833:40">(<expr pos:start="833:9" pos:end="833:39"><name pos:start="833:9" pos:end="833:17">CHROMA444</name> <operator pos:start="833:19" pos:end="833:20">&amp;&amp;</operator> <call pos:start="833:22" pos:end="833:39"><name pos:start="833:22" pos:end="833:30">IS_8x8DCT</name><argument_list pos:start="833:31" pos:end="833:39">(<argument pos:start="833:32" pos:end="833:38"><expr pos:start="833:32" pos:end="833:38"><name pos:start="833:32" pos:end="833:38">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="833:41" pos:end="871:5">{<block_content pos:start="835:9" pos:end="869:9">

        <decl_stmt pos:start="835:9" pos:end="835:14"><decl pos:start="835:9" pos:end="835:13"><type pos:start="835:9" pos:end="835:11"><name pos:start="835:9" pos:end="835:11">int</name></type> <name pos:start="835:13" pos:end="835:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="837:9" pos:end="837:53"><decl pos:start="837:9" pos:end="837:52"><type pos:start="837:9" pos:end="837:17"><name pos:start="837:9" pos:end="837:15">uint8_t</name> <modifier pos:start="837:17" pos:end="837:17">*</modifier></type><name pos:start="837:18" pos:end="837:26">nnz_cache</name> <init pos:start="837:28" pos:end="837:52">= <expr pos:start="837:30" pos:end="837:52"><name pos:start="837:30" pos:end="837:52"><name pos:start="837:30" pos:end="837:30">h</name><operator pos:start="837:31" pos:end="837:32">-&gt;</operator><name pos:start="837:33" pos:end="837:52">non_zero_count_cache</name></name></expr></init></decl>;</decl_stmt>

        <for pos:start="839:9" pos:end="857:9">for <control pos:start="839:13" pos:end="839:31">(<init pos:start="839:14" pos:end="839:19"><expr pos:start="839:14" pos:end="839:18"><name pos:start="839:14" pos:end="839:14">i</name> <operator pos:start="839:16" pos:end="839:16">=</operator> <literal type="number" pos:start="839:18" pos:end="839:18">0</literal></expr>;</init> <condition pos:start="839:21" pos:end="839:26"><expr pos:start="839:21" pos:end="839:25"><name pos:start="839:21" pos:end="839:21">i</name> <operator pos:start="839:23" pos:end="839:23">&lt;</operator> <literal type="number" pos:start="839:25" pos:end="839:25">2</literal></expr>;</condition> <incr pos:start="839:28" pos:end="839:30"><expr pos:start="839:28" pos:end="839:30"><name pos:start="839:28" pos:end="839:28">i</name><operator pos:start="839:29" pos:end="839:30">++</operator></expr></incr>)</control><block pos:start="839:32" pos:end="857:9">{<block_content pos:start="841:13" pos:end="855:13">

            <if_stmt pos:start="841:13" pos:end="855:13"><if pos:start="841:13" pos:end="855:13">if <condition pos:start="841:16" pos:end="841:75">(<expr pos:start="841:17" pos:end="841:74"><name pos:start="841:17" pos:end="841:37"><name pos:start="841:17" pos:end="841:17">h</name><operator pos:start="841:18" pos:end="841:19">-&gt;</operator><name pos:start="841:20" pos:end="841:28">left_type</name><index pos:start="841:29" pos:end="841:37">[<expr pos:start="841:30" pos:end="841:36"><call pos:start="841:30" pos:end="841:36"><name pos:start="841:30" pos:end="841:33">LEFT</name><argument_list pos:start="841:34" pos:end="841:36">(<argument pos:start="841:35" pos:end="841:35"><expr pos:start="841:35" pos:end="841:35"><name pos:start="841:35" pos:end="841:35">i</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="841:39" pos:end="841:40">&amp;&amp;</operator> <operator pos:start="841:42" pos:end="841:42">!</operator><call pos:start="841:43" pos:end="841:74"><name pos:start="841:43" pos:end="841:51">IS_8x8DCT</name><argument_list pos:start="841:52" pos:end="841:74">(<argument pos:start="841:53" pos:end="841:73"><expr pos:start="841:53" pos:end="841:73"><name pos:start="841:53" pos:end="841:73"><name pos:start="841:53" pos:end="841:53">h</name><operator pos:start="841:54" pos:end="841:55">-&gt;</operator><name pos:start="841:56" pos:end="841:64">left_type</name><index pos:start="841:65" pos:end="841:73">[<expr pos:start="841:66" pos:end="841:72"><call pos:start="841:66" pos:end="841:72"><name pos:start="841:66" pos:end="841:69">LEFT</name><argument_list pos:start="841:70" pos:end="841:72">(<argument pos:start="841:71" pos:end="841:71"><expr pos:start="841:71" pos:end="841:71"><name pos:start="841:71" pos:end="841:71">i</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="841:76" pos:end="855:13">{<block_content pos:start="843:17" pos:end="853:70">

                <expr_stmt pos:start="843:17" pos:end="853:70"><expr pos:start="843:17" pos:end="853:69"><name pos:start="843:17" pos:end="843:41"><name pos:start="843:17" pos:end="843:25">nnz_cache</name><index pos:start="843:26" pos:end="843:41">[<expr pos:start="843:27" pos:end="843:40"><literal type="number" pos:start="843:27" pos:end="843:28">3</literal><operator pos:start="843:28" pos:end="843:28">+</operator><literal type="number" pos:start="843:29" pos:end="843:29">8</literal><operator pos:start="843:30" pos:end="843:30">*</operator> <literal type="number" pos:start="843:32" pos:end="843:34">1</literal> <operator pos:start="843:34" pos:end="843:34">+</operator> <literal type="number" pos:start="843:36" pos:end="843:36">2</literal><operator pos:start="843:37" pos:end="843:37">*</operator><literal type="number" pos:start="843:38" pos:end="843:38">8</literal><operator pos:start="843:39" pos:end="843:39">*</operator><name pos:start="843:40" pos:end="843:40">i</name></expr>]</index></name><operator pos:start="843:42" pos:end="843:42">=</operator>

                <name pos:start="845:17" pos:end="845:41"><name pos:start="845:17" pos:end="845:25">nnz_cache</name><index pos:start="845:26" pos:end="845:41">[<expr pos:start="845:27" pos:end="845:40"><literal type="number" pos:start="845:27" pos:end="845:28">3</literal><operator pos:start="845:28" pos:end="845:28">+</operator><literal type="number" pos:start="845:29" pos:end="845:29">8</literal><operator pos:start="845:30" pos:end="845:30">*</operator> <literal type="number" pos:start="845:32" pos:end="845:34">2</literal> <operator pos:start="845:34" pos:end="845:34">+</operator> <literal type="number" pos:start="845:36" pos:end="845:36">2</literal><operator pos:start="845:37" pos:end="845:37">*</operator><literal type="number" pos:start="845:38" pos:end="845:38">8</literal><operator pos:start="845:39" pos:end="845:39">*</operator><name pos:start="845:40" pos:end="845:40">i</name></expr>]</index></name><operator pos:start="845:42" pos:end="845:42">=</operator>

                <name pos:start="847:17" pos:end="847:41"><name pos:start="847:17" pos:end="847:25">nnz_cache</name><index pos:start="847:26" pos:end="847:41">[<expr pos:start="847:27" pos:end="847:40"><literal type="number" pos:start="847:27" pos:end="847:28">3</literal><operator pos:start="847:28" pos:end="847:28">+</operator><literal type="number" pos:start="847:29" pos:end="847:29">8</literal><operator pos:start="847:30" pos:end="847:30">*</operator> <literal type="number" pos:start="847:32" pos:end="847:34">6</literal> <operator pos:start="847:34" pos:end="847:34">+</operator> <literal type="number" pos:start="847:36" pos:end="847:36">2</literal><operator pos:start="847:37" pos:end="847:37">*</operator><literal type="number" pos:start="847:38" pos:end="847:38">8</literal><operator pos:start="847:39" pos:end="847:39">*</operator><name pos:start="847:40" pos:end="847:40">i</name></expr>]</index></name><operator pos:start="847:42" pos:end="847:42">=</operator>

                <name pos:start="849:17" pos:end="849:41"><name pos:start="849:17" pos:end="849:25">nnz_cache</name><index pos:start="849:26" pos:end="849:41">[<expr pos:start="849:27" pos:end="849:40"><literal type="number" pos:start="849:27" pos:end="849:28">3</literal><operator pos:start="849:28" pos:end="849:28">+</operator><literal type="number" pos:start="849:29" pos:end="849:29">8</literal><operator pos:start="849:30" pos:end="849:30">*</operator> <literal type="number" pos:start="849:32" pos:end="849:34">7</literal> <operator pos:start="849:34" pos:end="849:34">+</operator> <literal type="number" pos:start="849:36" pos:end="849:36">2</literal><operator pos:start="849:37" pos:end="849:37">*</operator><literal type="number" pos:start="849:38" pos:end="849:38">8</literal><operator pos:start="849:39" pos:end="849:39">*</operator><name pos:start="849:40" pos:end="849:40">i</name></expr>]</index></name><operator pos:start="849:42" pos:end="849:42">=</operator>

                <name pos:start="851:17" pos:end="851:41"><name pos:start="851:17" pos:end="851:25">nnz_cache</name><index pos:start="851:26" pos:end="851:41">[<expr pos:start="851:27" pos:end="851:40"><literal type="number" pos:start="851:27" pos:end="851:28">3</literal><operator pos:start="851:28" pos:end="851:28">+</operator><literal type="number" pos:start="851:29" pos:end="851:29">8</literal><operator pos:start="851:30" pos:end="851:30">*</operator><literal type="number" pos:start="851:31" pos:end="851:34">11</literal> <operator pos:start="851:34" pos:end="851:34">+</operator> <literal type="number" pos:start="851:36" pos:end="851:36">2</literal><operator pos:start="851:37" pos:end="851:37">*</operator><literal type="number" pos:start="851:38" pos:end="851:38">8</literal><operator pos:start="851:39" pos:end="851:39">*</operator><name pos:start="851:40" pos:end="851:40">i</name></expr>]</index></name><operator pos:start="851:42" pos:end="851:42">=</operator>

                <name pos:start="853:17" pos:end="853:41"><name pos:start="853:17" pos:end="853:25">nnz_cache</name><index pos:start="853:26" pos:end="853:41">[<expr pos:start="853:27" pos:end="853:40"><literal type="number" pos:start="853:27" pos:end="853:28">3</literal><operator pos:start="853:28" pos:end="853:28">+</operator><literal type="number" pos:start="853:29" pos:end="853:29">8</literal><operator pos:start="853:30" pos:end="853:30">*</operator><literal type="number" pos:start="853:31" pos:end="853:34">12</literal> <operator pos:start="853:34" pos:end="853:34">+</operator> <literal type="number" pos:start="853:36" pos:end="853:36">2</literal><operator pos:start="853:37" pos:end="853:37">*</operator><literal type="number" pos:start="853:38" pos:end="853:38">8</literal><operator pos:start="853:39" pos:end="853:39">*</operator><name pos:start="853:40" pos:end="853:40">i</name></expr>]</index></name><operator pos:start="853:42" pos:end="853:42">=</operator> <ternary pos:start="853:44" pos:end="853:69"><condition pos:start="853:44" pos:end="853:62"><expr pos:start="853:44" pos:end="853:60"><call pos:start="853:44" pos:end="853:60"><name pos:start="853:44" pos:end="853:51">IS_INTRA</name><argument_list pos:start="853:52" pos:end="853:60">(<argument pos:start="853:53" pos:end="853:59"><expr pos:start="853:53" pos:end="853:59"><name pos:start="853:53" pos:end="853:59">mb_type</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="853:64" pos:end="853:65"> <expr pos:start="853:64" pos:end="853:65"><literal type="number" pos:start="853:64" pos:end="853:65">64</literal></expr> </then><else pos:start="853:67" pos:end="853:69">: <expr pos:start="853:69" pos:end="853:69"><literal type="number" pos:start="853:69" pos:end="853:69">0</literal></expr></else></ternary></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="859:9" pos:end="869:9"><if pos:start="859:9" pos:end="869:9">if <condition pos:start="859:12" pos:end="859:51">(<expr pos:start="859:13" pos:end="859:50"><name pos:start="859:13" pos:end="859:23"><name pos:start="859:13" pos:end="859:13">h</name><operator pos:start="859:14" pos:end="859:15">-&gt;</operator><name pos:start="859:16" pos:end="859:23">top_type</name></name> <operator pos:start="859:25" pos:end="859:26">&amp;&amp;</operator> <operator pos:start="859:28" pos:end="859:28">!</operator><call pos:start="859:29" pos:end="859:50"><name pos:start="859:29" pos:end="859:37">IS_8x8DCT</name><argument_list pos:start="859:38" pos:end="859:50">(<argument pos:start="859:39" pos:end="859:49"><expr pos:start="859:39" pos:end="859:49"><name pos:start="859:39" pos:end="859:49"><name pos:start="859:39" pos:end="859:39">h</name><operator pos:start="859:40" pos:end="859:41">-&gt;</operator><name pos:start="859:42" pos:end="859:49">top_type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="859:52" pos:end="869:9">{<block_content pos:start="861:13" pos:end="867:52">

            <decl_stmt pos:start="861:13" pos:end="861:78"><decl pos:start="861:13" pos:end="861:77"><type pos:start="861:13" pos:end="861:20"><name pos:start="861:13" pos:end="861:20">uint32_t</name></type> <name pos:start="861:22" pos:end="861:30">top_empty</name> <init pos:start="861:32" pos:end="861:77">= <expr pos:start="861:34" pos:end="861:77"><ternary pos:start="861:34" pos:end="861:77"><condition pos:start="861:34" pos:end="861:62"><expr pos:start="861:34" pos:end="861:60"><name pos:start="861:34" pos:end="861:38">CABAC</name> <operator pos:start="861:40" pos:end="861:41">&amp;&amp;</operator> <operator pos:start="861:43" pos:end="861:43">!</operator><call pos:start="861:44" pos:end="861:60"><name pos:start="861:44" pos:end="861:51">IS_INTRA</name><argument_list pos:start="861:52" pos:end="861:60">(<argument pos:start="861:53" pos:end="861:59"><expr pos:start="861:53" pos:end="861:59"><name pos:start="861:53" pos:end="861:59">mb_type</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="861:64" pos:end="861:64"> <expr pos:start="861:64" pos:end="861:64"><literal type="number" pos:start="861:64" pos:end="861:64">0</literal></expr> </then><else pos:start="861:66" pos:end="861:77">: <expr pos:start="861:68" pos:end="861:77"><literal type="number" pos:start="861:68" pos:end="861:77">0x40404040</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="863:13" pos:end="863:52"><expr pos:start="863:13" pos:end="863:51"><call pos:start="863:13" pos:end="863:51"><name pos:start="863:13" pos:end="863:20">AV_WN32A</name><argument_list pos:start="863:21" pos:end="863:51">(<argument pos:start="863:22" pos:end="863:39"><expr pos:start="863:22" pos:end="863:39"><operator pos:start="863:22" pos:end="863:22">&amp;</operator><name pos:start="863:23" pos:end="863:39"><name pos:start="863:23" pos:end="863:31">nnz_cache</name><index pos:start="863:32" pos:end="863:39">[<expr pos:start="863:33" pos:end="863:38"><literal type="number" pos:start="863:33" pos:end="863:34">4</literal><operator pos:start="863:34" pos:end="863:34">+</operator><literal type="number" pos:start="863:35" pos:end="863:35">8</literal><operator pos:start="863:36" pos:end="863:36">*</operator> <literal type="number" pos:start="863:38" pos:end="863:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="863:42" pos:end="863:50"><expr pos:start="863:42" pos:end="863:50"><name pos:start="863:42" pos:end="863:50">top_empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="865:13" pos:end="865:52"><expr pos:start="865:13" pos:end="865:51"><call pos:start="865:13" pos:end="865:51"><name pos:start="865:13" pos:end="865:20">AV_WN32A</name><argument_list pos:start="865:21" pos:end="865:51">(<argument pos:start="865:22" pos:end="865:39"><expr pos:start="865:22" pos:end="865:39"><operator pos:start="865:22" pos:end="865:22">&amp;</operator><name pos:start="865:23" pos:end="865:39"><name pos:start="865:23" pos:end="865:31">nnz_cache</name><index pos:start="865:32" pos:end="865:39">[<expr pos:start="865:33" pos:end="865:38"><literal type="number" pos:start="865:33" pos:end="865:34">4</literal><operator pos:start="865:34" pos:end="865:34">+</operator><literal type="number" pos:start="865:35" pos:end="865:35">8</literal><operator pos:start="865:36" pos:end="865:36">*</operator> <literal type="number" pos:start="865:38" pos:end="865:38">5</literal></expr>]</index></name></expr></argument>, <argument pos:start="865:42" pos:end="865:50"><expr pos:start="865:42" pos:end="865:50"><name pos:start="865:42" pos:end="865:50">top_empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="867:13" pos:end="867:52"><expr pos:start="867:13" pos:end="867:51"><call pos:start="867:13" pos:end="867:51"><name pos:start="867:13" pos:end="867:20">AV_WN32A</name><argument_list pos:start="867:21" pos:end="867:51">(<argument pos:start="867:22" pos:end="867:39"><expr pos:start="867:22" pos:end="867:39"><operator pos:start="867:22" pos:end="867:22">&amp;</operator><name pos:start="867:23" pos:end="867:39"><name pos:start="867:23" pos:end="867:31">nnz_cache</name><index pos:start="867:32" pos:end="867:39">[<expr pos:start="867:33" pos:end="867:38"><literal type="number" pos:start="867:33" pos:end="867:34">4</literal><operator pos:start="867:34" pos:end="867:34">+</operator><literal type="number" pos:start="867:35" pos:end="867:35">8</literal><operator pos:start="867:36" pos:end="867:36">*</operator><literal type="number" pos:start="867:37" pos:end="867:38">10</literal></expr>]</index></name></expr></argument>, <argument pos:start="867:42" pos:end="867:50"><expr pos:start="867:42" pos:end="867:50"><name pos:start="867:42" pos:end="867:50">top_empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="873:5" pos:end="873:50"><expr pos:start="873:5" pos:end="873:49"><name pos:start="873:5" pos:end="873:39"><name pos:start="873:5" pos:end="873:5">s</name><operator pos:start="873:6" pos:end="873:7">-&gt;</operator><name pos:start="873:8" pos:end="873:22">current_picture</name><operator pos:start="873:23" pos:end="873:23">.</operator><name pos:start="873:24" pos:end="873:24">f</name><operator pos:start="873:25" pos:end="873:25">.</operator><name pos:start="873:26" pos:end="873:32">mb_type</name><index pos:start="873:33" pos:end="873:39">[<expr pos:start="873:34" pos:end="873:38"><name pos:start="873:34" pos:end="873:38">mb_xy</name></expr>]</index></name> <operator pos:start="873:41" pos:end="873:41">=</operator> <name pos:start="873:43" pos:end="873:49">mb_type</name></expr>;</expr_stmt>



    <if_stmt pos:start="877:5" pos:end="1084:5"><if pos:start="877:5" pos:end="1074:5">if<condition pos:start="877:7" pos:end="877:41">( <expr pos:start="877:9" pos:end="877:39"><name pos:start="877:9" pos:end="877:11">cbp</name> <operator pos:start="877:13" pos:end="877:14">||</operator> <call pos:start="877:16" pos:end="877:39"><name pos:start="877:16" pos:end="877:28">IS_INTRA16x16</name><argument_list pos:start="877:29" pos:end="877:39">( <argument pos:start="877:31" pos:end="877:37"><expr pos:start="877:31" pos:end="877:37"><name pos:start="877:31" pos:end="877:37">mb_type</name></expr></argument> )</argument_list></call></expr> )</condition> <block pos:start="877:43" pos:end="1074:5">{<block_content pos:start="879:9" pos:end="1072:9">

        <decl_stmt pos:start="879:9" pos:end="879:38"><decl pos:start="879:9" pos:end="879:27"><type pos:start="879:9" pos:end="879:23"><specifier pos:start="879:9" pos:end="879:13">const</specifier> <name pos:start="879:15" pos:end="879:21">uint8_t</name> <modifier pos:start="879:23" pos:end="879:23">*</modifier></type><name pos:start="879:24" pos:end="879:27">scan</name></decl>, <decl pos:start="879:30" pos:end="879:37"><type ref="prev" pos:start="879:9" pos:end="879:23"><modifier pos:start="879:30" pos:end="879:30">*</modifier></type><name pos:start="879:31" pos:end="879:37">scan8x8</name></decl>;</decl_stmt>

        <decl_stmt pos:start="881:9" pos:end="881:29"><decl pos:start="881:9" pos:end="881:28"><type pos:start="881:9" pos:end="881:24"><specifier pos:start="881:9" pos:end="881:13">const</specifier> <name pos:start="881:15" pos:end="881:22">uint32_t</name> <modifier pos:start="881:24" pos:end="881:24">*</modifier></type><name pos:start="881:25" pos:end="881:28">qmul</name></decl>;</decl_stmt>



        <if_stmt pos:start="885:9" pos:end="897:9"><if pos:start="885:9" pos:end="891:9">if<condition pos:start="885:11" pos:end="885:34">(<expr pos:start="885:12" pos:end="885:33"><call pos:start="885:12" pos:end="885:33"><name pos:start="885:12" pos:end="885:24">IS_INTERLACED</name><argument_list pos:start="885:25" pos:end="885:33">(<argument pos:start="885:26" pos:end="885:32"><expr pos:start="885:26" pos:end="885:32"><name pos:start="885:26" pos:end="885:32">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="885:35" pos:end="891:9">{<block_content pos:start="887:13" pos:end="889:63">

            <expr_stmt pos:start="887:13" pos:end="887:72"><expr pos:start="887:13" pos:end="887:71"><name pos:start="887:13" pos:end="887:19">scan8x8</name><operator pos:start="887:20" pos:end="887:20">=</operator> <ternary pos:start="887:22" pos:end="887:71"><condition pos:start="887:22" pos:end="887:32"><expr pos:start="887:22" pos:end="887:30"><name pos:start="887:22" pos:end="887:30"><name pos:start="887:22" pos:end="887:22">s</name><operator pos:start="887:23" pos:end="887:24">-&gt;</operator><name pos:start="887:25" pos:end="887:30">qscale</name></name></expr> ?</condition><then pos:start="887:34" pos:end="887:49"> <expr pos:start="887:34" pos:end="887:49"><name pos:start="887:34" pos:end="887:49"><name pos:start="887:34" pos:end="887:34">h</name><operator pos:start="887:35" pos:end="887:36">-&gt;</operator><name pos:start="887:37" pos:end="887:49">field_scan8x8</name></name></expr> </then><else pos:start="887:51" pos:end="887:71">: <expr pos:start="887:53" pos:end="887:71"><name pos:start="887:53" pos:end="887:71"><name pos:start="887:53" pos:end="887:53">h</name><operator pos:start="887:54" pos:end="887:55">-&gt;</operator><name pos:start="887:56" pos:end="887:71">field_scan8x8_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="889:13" pos:end="889:63"><expr pos:start="889:13" pos:end="889:62"><name pos:start="889:13" pos:end="889:16">scan</name><operator pos:start="889:17" pos:end="889:17">=</operator> <ternary pos:start="889:19" pos:end="889:62"><condition pos:start="889:19" pos:end="889:29"><expr pos:start="889:19" pos:end="889:27"><name pos:start="889:19" pos:end="889:27"><name pos:start="889:19" pos:end="889:19">s</name><operator pos:start="889:20" pos:end="889:21">-&gt;</operator><name pos:start="889:22" pos:end="889:27">qscale</name></name></expr> ?</condition><then pos:start="889:31" pos:end="889:43"> <expr pos:start="889:31" pos:end="889:43"><name pos:start="889:31" pos:end="889:43"><name pos:start="889:31" pos:end="889:31">h</name><operator pos:start="889:32" pos:end="889:33">-&gt;</operator><name pos:start="889:34" pos:end="889:43">field_scan</name></name></expr> </then><else pos:start="889:45" pos:end="889:62">: <expr pos:start="889:47" pos:end="889:62"><name pos:start="889:47" pos:end="889:62"><name pos:start="889:47" pos:end="889:47">h</name><operator pos:start="889:48" pos:end="889:49">-&gt;</operator><name pos:start="889:50" pos:end="889:62">field_scan_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="891:10" pos:end="897:9">else<block pos:start="891:14" pos:end="897:9">{<block_content pos:start="893:13" pos:end="895:65">

            <expr_stmt pos:start="893:13" pos:end="893:74"><expr pos:start="893:13" pos:end="893:73"><name pos:start="893:13" pos:end="893:19">scan8x8</name><operator pos:start="893:20" pos:end="893:20">=</operator> <ternary pos:start="893:22" pos:end="893:73"><condition pos:start="893:22" pos:end="893:32"><expr pos:start="893:22" pos:end="893:30"><name pos:start="893:22" pos:end="893:30"><name pos:start="893:22" pos:end="893:22">s</name><operator pos:start="893:23" pos:end="893:24">-&gt;</operator><name pos:start="893:25" pos:end="893:30">qscale</name></name></expr> ?</condition><then pos:start="893:34" pos:end="893:50"> <expr pos:start="893:34" pos:end="893:50"><name pos:start="893:34" pos:end="893:50"><name pos:start="893:34" pos:end="893:34">h</name><operator pos:start="893:35" pos:end="893:36">-&gt;</operator><name pos:start="893:37" pos:end="893:50">zigzag_scan8x8</name></name></expr> </then><else pos:start="893:52" pos:end="893:73">: <expr pos:start="893:54" pos:end="893:73"><name pos:start="893:54" pos:end="893:73"><name pos:start="893:54" pos:end="893:54">h</name><operator pos:start="893:55" pos:end="893:56">-&gt;</operator><name pos:start="893:57" pos:end="893:73">zigzag_scan8x8_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="895:13" pos:end="895:65"><expr pos:start="895:13" pos:end="895:64"><name pos:start="895:13" pos:end="895:16">scan</name><operator pos:start="895:17" pos:end="895:17">=</operator> <ternary pos:start="895:19" pos:end="895:64"><condition pos:start="895:19" pos:end="895:29"><expr pos:start="895:19" pos:end="895:27"><name pos:start="895:19" pos:end="895:27"><name pos:start="895:19" pos:end="895:19">s</name><operator pos:start="895:20" pos:end="895:21">-&gt;</operator><name pos:start="895:22" pos:end="895:27">qscale</name></name></expr> ?</condition><then pos:start="895:31" pos:end="895:44"> <expr pos:start="895:31" pos:end="895:44"><name pos:start="895:31" pos:end="895:44"><name pos:start="895:31" pos:end="895:31">h</name><operator pos:start="895:32" pos:end="895:33">-&gt;</operator><name pos:start="895:34" pos:end="895:44">zigzag_scan</name></name></expr> </then><else pos:start="895:46" pos:end="895:64">: <expr pos:start="895:48" pos:end="895:64"><name pos:start="895:48" pos:end="895:64"><name pos:start="895:48" pos:end="895:48">h</name><operator pos:start="895:49" pos:end="895:50">-&gt;</operator><name pos:start="895:51" pos:end="895:64">zigzag_scan_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="line" pos:start="901:9" pos:end="901:30">// decode_cabac_mb_dqp</comment>

        <if_stmt pos:start="903:9" pos:end="956:34"><if pos:start="903:9" pos:end="954:9">if<condition pos:start="903:11" pos:end="903:92">(<expr pos:start="903:12" pos:end="903:91"><call pos:start="903:12" pos:end="903:91"><name pos:start="903:12" pos:end="903:29">get_cabac_noinline</name><argument_list pos:start="903:30" pos:end="903:91">( <argument pos:start="903:32" pos:end="903:40"><expr pos:start="903:32" pos:end="903:40"><operator pos:start="903:32" pos:end="903:32">&amp;</operator><name pos:start="903:33" pos:end="903:40"><name pos:start="903:33" pos:end="903:33">h</name><operator pos:start="903:34" pos:end="903:35">-&gt;</operator><name pos:start="903:36" pos:end="903:40">cabac</name></name></expr></argument>, <argument pos:start="903:43" pos:end="903:90"><expr pos:start="903:43" pos:end="903:90"><operator pos:start="903:43" pos:end="903:43">&amp;</operator><name pos:start="903:44" pos:end="903:90"><name pos:start="903:44" pos:end="903:44">h</name><operator pos:start="903:45" pos:end="903:46">-&gt;</operator><name pos:start="903:47" pos:end="903:57">cabac_state</name><index pos:start="903:58" pos:end="903:90">[<expr pos:start="903:59" pos:end="903:89"><literal type="number" pos:start="903:59" pos:end="903:62">60</literal> <operator pos:start="903:62" pos:end="903:62">+</operator> <operator pos:start="903:64" pos:end="903:64">(</operator><name pos:start="903:65" pos:end="903:83"><name pos:start="903:65" pos:end="903:65">h</name><operator pos:start="903:66" pos:end="903:67">-&gt;</operator><name pos:start="903:68" pos:end="903:83">last_qscale_diff</name></name> <operator pos:start="903:85" pos:end="903:86">!=</operator> <literal type="number" pos:start="903:88" pos:end="903:88">0</literal><operator pos:start="903:89" pos:end="903:89">)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="903:93" pos:end="954:9">{<block_content pos:start="905:13" pos:end="952:61">

            <decl_stmt pos:start="905:13" pos:end="905:24"><decl pos:start="905:13" pos:end="905:23"><type pos:start="905:13" pos:end="905:15"><name pos:start="905:13" pos:end="905:15">int</name></type> <name pos:start="905:17" pos:end="905:19">val</name> <init pos:start="905:21" pos:end="905:23">= <expr pos:start="905:23" pos:end="905:23"><literal type="number" pos:start="905:23" pos:end="905:23">1</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="907:13" pos:end="907:23"><decl pos:start="907:13" pos:end="907:22"><type pos:start="907:13" pos:end="907:15"><name pos:start="907:13" pos:end="907:15">int</name></type> <name pos:start="907:17" pos:end="907:19">ctx</name><init pos:start="907:20" pos:end="907:22">= <expr pos:start="907:22" pos:end="907:22"><literal type="number" pos:start="907:22" pos:end="907:22">2</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="909:13" pos:end="909:64"><decl pos:start="909:13" pos:end="909:63"><type pos:start="909:13" pos:end="909:21"><specifier pos:start="909:13" pos:end="909:17">const</specifier> <name pos:start="909:19" pos:end="909:21">int</name></type> <name pos:start="909:23" pos:end="909:28">max_qp</name> <init pos:start="909:30" pos:end="909:63">= <expr pos:start="909:32" pos:end="909:63"><literal type="number" pos:start="909:32" pos:end="909:35">51</literal> <operator pos:start="909:35" pos:end="909:35">+</operator> <literal type="number" pos:start="909:37" pos:end="909:37">6</literal><operator pos:start="909:38" pos:end="909:38">*</operator><operator pos:start="909:39" pos:end="909:39">(</operator><name pos:start="909:40" pos:end="909:60"><name pos:start="909:40" pos:end="909:40">h</name><operator pos:start="909:41" pos:end="909:42">-&gt;</operator><name pos:start="909:43" pos:end="909:45">sps</name><operator pos:start="909:46" pos:end="909:46">.</operator><name pos:start="909:47" pos:end="909:60">bit_depth_luma</name></name><operator pos:start="909:61" pos:end="909:61">-</operator><literal type="number" pos:start="909:62" pos:end="909:62">8</literal><operator pos:start="909:63" pos:end="909:63">)</operator></expr></init></decl>;</decl_stmt>



            <while pos:start="913:13" pos:end="926:13">while<condition pos:start="913:18" pos:end="913:79">( <expr pos:start="913:20" pos:end="913:77"><call pos:start="913:20" pos:end="913:77"><name pos:start="913:20" pos:end="913:37">get_cabac_noinline</name><argument_list pos:start="913:38" pos:end="913:77">( <argument pos:start="913:40" pos:end="913:48"><expr pos:start="913:40" pos:end="913:48"><operator pos:start="913:40" pos:end="913:40">&amp;</operator><name pos:start="913:41" pos:end="913:48"><name pos:start="913:41" pos:end="913:41">h</name><operator pos:start="913:42" pos:end="913:43">-&gt;</operator><name pos:start="913:44" pos:end="913:48">cabac</name></name></expr></argument>, <argument pos:start="913:51" pos:end="913:75"><expr pos:start="913:51" pos:end="913:75"><operator pos:start="913:51" pos:end="913:51">&amp;</operator><name pos:start="913:52" pos:end="913:75"><name pos:start="913:52" pos:end="913:52">h</name><operator pos:start="913:53" pos:end="913:54">-&gt;</operator><name pos:start="913:55" pos:end="913:65">cabac_state</name><index pos:start="913:66" pos:end="913:75">[<expr pos:start="913:67" pos:end="913:74"><literal type="number" pos:start="913:67" pos:end="913:70">60</literal> <operator pos:start="913:70" pos:end="913:70">+</operator> <name pos:start="913:72" pos:end="913:74">ctx</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition> <block pos:start="913:81" pos:end="926:13">{<block_content pos:start="915:17" pos:end="924:17">

                <expr_stmt pos:start="915:17" pos:end="915:23"><expr pos:start="915:17" pos:end="915:22"><name pos:start="915:17" pos:end="915:19">ctx</name><operator pos:start="915:20" pos:end="915:20">=</operator> <literal type="number" pos:start="915:22" pos:end="915:22">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="917:17" pos:end="917:22"><expr pos:start="917:17" pos:end="917:21"><name pos:start="917:17" pos:end="917:19">val</name><operator pos:start="917:20" pos:end="917:21">++</operator></expr>;</expr_stmt>

                <if_stmt pos:start="919:17" pos:end="924:17"><if pos:start="919:17" pos:end="924:17">if<condition pos:start="919:19" pos:end="919:34">(<expr pos:start="919:20" pos:end="919:33"><name pos:start="919:20" pos:end="919:22">val</name> <operator pos:start="919:24" pos:end="919:24">&gt;</operator> <literal type="number" pos:start="919:26" pos:end="919:26">2</literal><operator pos:start="919:27" pos:end="919:27">*</operator><name pos:start="919:28" pos:end="919:33">max_qp</name></expr>)</condition><block pos:start="919:35" pos:end="924:17">{<block_content pos:start="921:21" pos:end="921:120"> <comment type="line" pos:start="919:37" pos:end="919:59">//prevent infinite loop</comment>

                    <expr_stmt pos:start="921:21" pos:end="921:120"><expr pos:start="921:21" pos:end="921:119"><call pos:start="921:21" pos:end="921:119"><name pos:start="921:21" pos:end="921:26">av_log</name><argument_list pos:start="921:27" pos:end="921:119">(<argument pos:start="921:28" pos:end="921:37"><expr pos:start="921:28" pos:end="921:37"><name pos:start="921:28" pos:end="921:37"><name pos:start="921:28" pos:end="921:28">h</name><operator pos:start="921:29" pos:end="921:30">-&gt;</operator><name pos:start="921:31" pos:end="921:31">s</name><operator pos:start="921:32" pos:end="921:32">.</operator><name pos:start="921:33" pos:end="921:37">avctx</name></name></expr></argument>, <argument pos:start="921:40" pos:end="921:51"><expr pos:start="921:40" pos:end="921:51"><name pos:start="921:40" pos:end="921:51">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="921:54" pos:end="921:100"><expr pos:start="921:54" pos:end="921:100"><literal type="string" pos:start="921:54" pos:end="921:100">"cabac decode of qscale diff failed at %d %d\n"</literal></expr></argument>, <argument pos:start="921:103" pos:end="921:109"><expr pos:start="921:103" pos:end="921:109"><name pos:start="921:103" pos:end="921:109"><name pos:start="921:103" pos:end="921:103">s</name><operator pos:start="921:104" pos:end="921:105">-&gt;</operator><name pos:start="921:106" pos:end="921:109">mb_x</name></name></expr></argument>, <argument pos:start="921:112" pos:end="921:118"><expr pos:start="921:112" pos:end="921:118"><name pos:start="921:112" pos:end="921:118"><name pos:start="921:112" pos:end="921:112">s</name><operator pos:start="921:113" pos:end="921:114">-&gt;</operator><name pos:start="921:115" pos:end="921:118">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                </block_content>}</block></if></if_stmt>

            </block_content>}</block></while>



            <if_stmt pos:start="930:13" pos:end="936:37"><if pos:start="930:13" pos:end="932:37">if<condition pos:start="930:15" pos:end="930:26">( <expr pos:start="930:17" pos:end="930:24"><name pos:start="930:17" pos:end="930:19">val</name><operator pos:start="930:20" pos:end="930:20">&amp;</operator><literal type="number" pos:start="930:21" pos:end="930:24">0x01</literal></expr> )</condition><block type="pseudo" pos:start="932:17" pos:end="932:37"><block_content pos:start="932:17" pos:end="932:37">

                <expr_stmt pos:start="932:17" pos:end="932:37"><expr pos:start="932:17" pos:end="932:35"><name pos:start="932:17" pos:end="932:19">val</name><operator pos:start="932:20" pos:end="932:20">=</operator>   <operator pos:start="932:24" pos:end="932:24">(</operator><name pos:start="932:25" pos:end="932:27">val</name> <operator pos:start="932:29" pos:end="932:29">+</operator> <literal type="number" pos:start="932:31" pos:end="932:31">1</literal><operator pos:start="932:32" pos:end="932:32">)</operator><operator pos:start="932:33" pos:end="932:34">&gt;&gt;</operator><literal type="number" pos:start="932:35" pos:end="932:35">1</literal></expr> ;</expr_stmt></block_content></block></if>

            <else pos:start="934:13" pos:end="936:37">else<block type="pseudo" pos:start="936:17" pos:end="936:37"><block_content pos:start="936:17" pos:end="936:37">

                <expr_stmt pos:start="936:17" pos:end="936:37"><expr pos:start="936:17" pos:end="936:36"><name pos:start="936:17" pos:end="936:19">val</name><operator pos:start="936:20" pos:end="936:20">=</operator> <operator pos:start="936:22" pos:end="936:22">-</operator><operator pos:start="936:23" pos:end="936:23">(</operator><operator pos:start="936:24" pos:end="936:24">(</operator><name pos:start="936:25" pos:end="936:27">val</name> <operator pos:start="936:29" pos:end="936:29">+</operator> <literal type="number" pos:start="936:31" pos:end="936:31">1</literal><operator pos:start="936:32" pos:end="936:32">)</operator><operator pos:start="936:33" pos:end="936:34">&gt;&gt;</operator><literal type="number" pos:start="936:35" pos:end="936:35">1</literal><operator pos:start="936:36" pos:end="936:36">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="938:13" pos:end="938:38"><expr pos:start="938:13" pos:end="938:37"><name pos:start="938:13" pos:end="938:31"><name pos:start="938:13" pos:end="938:13">h</name><operator pos:start="938:14" pos:end="938:15">-&gt;</operator><name pos:start="938:16" pos:end="938:31">last_qscale_diff</name></name> <operator pos:start="938:33" pos:end="938:33">=</operator> <name pos:start="938:35" pos:end="938:37">val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="940:13" pos:end="940:29"><expr pos:start="940:13" pos:end="940:28"><name pos:start="940:13" pos:end="940:21"><name pos:start="940:13" pos:end="940:13">s</name><operator pos:start="940:14" pos:end="940:15">-&gt;</operator><name pos:start="940:16" pos:end="940:21">qscale</name></name> <operator pos:start="940:23" pos:end="940:24">+=</operator> <name pos:start="940:26" pos:end="940:28">val</name></expr>;</expr_stmt>

            <if_stmt pos:start="942:13" pos:end="948:13"><if pos:start="942:13" pos:end="948:13">if<condition pos:start="942:15" pos:end="942:46">(<expr pos:start="942:16" pos:end="942:45"><operator pos:start="942:16" pos:end="942:16">(</operator><operator pos:start="942:17" pos:end="942:17">(</operator><name pos:start="942:18" pos:end="942:25">unsigned</name><operator pos:start="942:26" pos:end="942:26">)</operator><name pos:start="942:27" pos:end="942:35"><name pos:start="942:27" pos:end="942:27">s</name><operator pos:start="942:28" pos:end="942:29">-&gt;</operator><name pos:start="942:30" pos:end="942:35">qscale</name></name><operator pos:start="942:36" pos:end="942:36">)</operator> <operator pos:start="942:38" pos:end="942:38">&gt;</operator> <name pos:start="942:40" pos:end="942:45">max_qp</name></expr>)</condition><block pos:start="942:47" pos:end="948:13">{<block_content pos:start="944:17" pos:end="946:53">

                <if_stmt pos:start="944:17" pos:end="946:53"><if pos:start="944:17" pos:end="944:53">if<condition pos:start="944:19" pos:end="944:31">(<expr pos:start="944:20" pos:end="944:30"><name pos:start="944:20" pos:end="944:28"><name pos:start="944:20" pos:end="944:20">s</name><operator pos:start="944:21" pos:end="944:22">-&gt;</operator><name pos:start="944:23" pos:end="944:28">qscale</name></name><operator pos:start="944:29" pos:end="944:29">&lt;</operator><literal type="number" pos:start="944:30" pos:end="944:30">0</literal></expr>)</condition><block type="pseudo" pos:start="944:33" pos:end="944:53"><block_content pos:start="944:33" pos:end="944:53"> <expr_stmt pos:start="944:33" pos:end="944:53"><expr pos:start="944:33" pos:end="944:52"><name pos:start="944:33" pos:end="944:41"><name pos:start="944:33" pos:end="944:33">s</name><operator pos:start="944:34" pos:end="944:35">-&gt;</operator><name pos:start="944:36" pos:end="944:41">qscale</name></name><operator pos:start="944:42" pos:end="944:43">+=</operator> <name pos:start="944:45" pos:end="944:50">max_qp</name><operator pos:start="944:51" pos:end="944:51">+</operator><literal type="number" pos:start="944:52" pos:end="944:52">1</literal></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="946:17" pos:end="946:53">else<block type="pseudo" pos:start="946:33" pos:end="946:53"><block_content pos:start="946:33" pos:end="946:53">            <expr_stmt pos:start="946:33" pos:end="946:53"><expr pos:start="946:33" pos:end="946:52"><name pos:start="946:33" pos:end="946:41"><name pos:start="946:33" pos:end="946:33">s</name><operator pos:start="946:34" pos:end="946:35">-&gt;</operator><name pos:start="946:36" pos:end="946:41">qscale</name></name><operator pos:start="946:42" pos:end="946:43">-=</operator> <name pos:start="946:45" pos:end="946:50">max_qp</name><operator pos:start="946:51" pos:end="946:51">+</operator><literal type="number" pos:start="946:52" pos:end="946:52">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="950:13" pos:end="950:61"><expr pos:start="950:13" pos:end="950:60"><name pos:start="950:13" pos:end="950:27"><name pos:start="950:13" pos:end="950:13">h</name><operator pos:start="950:14" pos:end="950:15">-&gt;</operator><name pos:start="950:16" pos:end="950:24">chroma_qp</name><index pos:start="950:25" pos:end="950:27">[<expr pos:start="950:26" pos:end="950:26"><literal type="number" pos:start="950:26" pos:end="950:26">0</literal></expr>]</index></name> <operator pos:start="950:29" pos:end="950:29">=</operator> <call pos:start="950:31" pos:end="950:60"><name pos:start="950:31" pos:end="950:43">get_chroma_qp</name><argument_list pos:start="950:44" pos:end="950:60">(<argument pos:start="950:45" pos:end="950:45"><expr pos:start="950:45" pos:end="950:45"><name pos:start="950:45" pos:end="950:45">h</name></expr></argument>, <argument pos:start="950:48" pos:end="950:48"><expr pos:start="950:48" pos:end="950:48"><literal type="number" pos:start="950:48" pos:end="950:48">0</literal></expr></argument>, <argument pos:start="950:51" pos:end="950:59"><expr pos:start="950:51" pos:end="950:59"><name pos:start="950:51" pos:end="950:59"><name pos:start="950:51" pos:end="950:51">s</name><operator pos:start="950:52" pos:end="950:53">-&gt;</operator><name pos:start="950:54" pos:end="950:59">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="952:13" pos:end="952:61"><expr pos:start="952:13" pos:end="952:60"><name pos:start="952:13" pos:end="952:27"><name pos:start="952:13" pos:end="952:13">h</name><operator pos:start="952:14" pos:end="952:15">-&gt;</operator><name pos:start="952:16" pos:end="952:24">chroma_qp</name><index pos:start="952:25" pos:end="952:27">[<expr pos:start="952:26" pos:end="952:26"><literal type="number" pos:start="952:26" pos:end="952:26">1</literal></expr>]</index></name> <operator pos:start="952:29" pos:end="952:29">=</operator> <call pos:start="952:31" pos:end="952:60"><name pos:start="952:31" pos:end="952:43">get_chroma_qp</name><argument_list pos:start="952:44" pos:end="952:60">(<argument pos:start="952:45" pos:end="952:45"><expr pos:start="952:45" pos:end="952:45"><name pos:start="952:45" pos:end="952:45">h</name></expr></argument>, <argument pos:start="952:48" pos:end="952:48"><expr pos:start="952:48" pos:end="952:48"><literal type="number" pos:start="952:48" pos:end="952:48">1</literal></expr></argument>, <argument pos:start="952:51" pos:end="952:59"><expr pos:start="952:51" pos:end="952:59"><name pos:start="952:51" pos:end="952:59"><name pos:start="952:51" pos:end="952:51">s</name><operator pos:start="952:52" pos:end="952:53">-&gt;</operator><name pos:start="952:54" pos:end="952:59">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="954:10" pos:end="956:34">else<block type="pseudo" pos:start="956:13" pos:end="956:34"><block_content pos:start="956:13" pos:end="956:34">

            <expr_stmt pos:start="956:13" pos:end="956:34"><expr pos:start="956:13" pos:end="956:33"><name pos:start="956:13" pos:end="956:31"><name pos:start="956:13" pos:end="956:13">h</name><operator pos:start="956:14" pos:end="956:15">-&gt;</operator><name pos:start="956:16" pos:end="956:31">last_qscale_diff</name></name><operator pos:start="956:32" pos:end="956:32">=</operator><literal type="number" pos:start="956:33" pos:end="956:33">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="960:9" pos:end="960:83"><expr pos:start="960:9" pos:end="960:82"><call pos:start="960:9" pos:end="960:82"><name pos:start="960:9" pos:end="960:34">decode_cabac_luma_residual</name><argument_list pos:start="960:35" pos:end="960:82">(<argument pos:start="960:36" pos:end="960:36"><expr pos:start="960:36" pos:end="960:36"><name pos:start="960:36" pos:end="960:36">h</name></expr></argument>, <argument pos:start="960:39" pos:end="960:42"><expr pos:start="960:39" pos:end="960:42"><name pos:start="960:39" pos:end="960:42">scan</name></expr></argument>, <argument pos:start="960:45" pos:end="960:51"><expr pos:start="960:45" pos:end="960:51"><name pos:start="960:45" pos:end="960:51">scan8x8</name></expr></argument>, <argument pos:start="960:54" pos:end="960:64"><expr pos:start="960:54" pos:end="960:64"><name pos:start="960:54" pos:end="960:64">pixel_shift</name></expr></argument>, <argument pos:start="960:67" pos:end="960:73"><expr pos:start="960:67" pos:end="960:73"><name pos:start="960:67" pos:end="960:73">mb_type</name></expr></argument>, <argument pos:start="960:76" pos:end="960:78"><expr pos:start="960:76" pos:end="960:78"><name pos:start="960:76" pos:end="960:78">cbp</name></expr></argument>, <argument pos:start="960:81" pos:end="960:81"><expr pos:start="960:81" pos:end="960:81"><literal type="number" pos:start="960:81" pos:end="960:81">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="962:9" pos:end="1072:9"><if pos:start="962:9" pos:end="968:9">if<condition pos:start="962:11" pos:end="962:21">(<expr pos:start="962:12" pos:end="962:20"><name pos:start="962:12" pos:end="962:20">CHROMA444</name></expr>)</condition><block pos:start="962:22" pos:end="968:9">{<block_content pos:start="964:13" pos:end="966:87">

            <expr_stmt pos:start="964:13" pos:end="964:87"><expr pos:start="964:13" pos:end="964:86"><call pos:start="964:13" pos:end="964:86"><name pos:start="964:13" pos:end="964:38">decode_cabac_luma_residual</name><argument_list pos:start="964:39" pos:end="964:86">(<argument pos:start="964:40" pos:end="964:40"><expr pos:start="964:40" pos:end="964:40"><name pos:start="964:40" pos:end="964:40">h</name></expr></argument>, <argument pos:start="964:43" pos:end="964:46"><expr pos:start="964:43" pos:end="964:46"><name pos:start="964:43" pos:end="964:46">scan</name></expr></argument>, <argument pos:start="964:49" pos:end="964:55"><expr pos:start="964:49" pos:end="964:55"><name pos:start="964:49" pos:end="964:55">scan8x8</name></expr></argument>, <argument pos:start="964:58" pos:end="964:68"><expr pos:start="964:58" pos:end="964:68"><name pos:start="964:58" pos:end="964:68">pixel_shift</name></expr></argument>, <argument pos:start="964:71" pos:end="964:77"><expr pos:start="964:71" pos:end="964:77"><name pos:start="964:71" pos:end="964:77">mb_type</name></expr></argument>, <argument pos:start="964:80" pos:end="964:82"><expr pos:start="964:80" pos:end="964:82"><name pos:start="964:80" pos:end="964:82">cbp</name></expr></argument>, <argument pos:start="964:85" pos:end="964:85"><expr pos:start="964:85" pos:end="964:85"><literal type="number" pos:start="964:85" pos:end="964:85">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="966:13" pos:end="966:87"><expr pos:start="966:13" pos:end="966:86"><call pos:start="966:13" pos:end="966:86"><name pos:start="966:13" pos:end="966:38">decode_cabac_luma_residual</name><argument_list pos:start="966:39" pos:end="966:86">(<argument pos:start="966:40" pos:end="966:40"><expr pos:start="966:40" pos:end="966:40"><name pos:start="966:40" pos:end="966:40">h</name></expr></argument>, <argument pos:start="966:43" pos:end="966:46"><expr pos:start="966:43" pos:end="966:46"><name pos:start="966:43" pos:end="966:46">scan</name></expr></argument>, <argument pos:start="966:49" pos:end="966:55"><expr pos:start="966:49" pos:end="966:55"><name pos:start="966:49" pos:end="966:55">scan8x8</name></expr></argument>, <argument pos:start="966:58" pos:end="966:68"><expr pos:start="966:58" pos:end="966:68"><name pos:start="966:58" pos:end="966:68">pixel_shift</name></expr></argument>, <argument pos:start="966:71" pos:end="966:77"><expr pos:start="966:71" pos:end="966:77"><name pos:start="966:71" pos:end="966:77">mb_type</name></expr></argument>, <argument pos:start="966:80" pos:end="966:82"><expr pos:start="966:80" pos:end="966:82"><name pos:start="966:80" pos:end="966:82">cbp</name></expr></argument>, <argument pos:start="966:85" pos:end="966:85"><expr pos:start="966:85" pos:end="966:85"><literal type="number" pos:start="966:85" pos:end="966:85">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="968:11" pos:end="1026:9">else if <condition pos:start="968:19" pos:end="968:29">(<expr pos:start="968:20" pos:end="968:28"><name pos:start="968:20" pos:end="968:28">CHROMA422</name></expr>)</condition> <block pos:start="968:31" pos:end="1026:9">{<block_content pos:start="970:13" pos:end="1024:13">

            <if_stmt pos:start="970:13" pos:end="986:13"><if pos:start="970:13" pos:end="986:13">if<condition pos:start="970:15" pos:end="970:26">( <expr pos:start="970:17" pos:end="970:24"><name pos:start="970:17" pos:end="970:19">cbp</name><operator pos:start="970:20" pos:end="970:20">&amp;</operator><literal type="number" pos:start="970:21" pos:end="970:24">0x30</literal></expr> )</condition><block pos:start="970:27" pos:end="986:13">{<block_content pos:start="972:17" pos:end="984:17">

                <decl_stmt pos:start="972:17" pos:end="972:22"><decl pos:start="972:17" pos:end="972:21"><type pos:start="972:17" pos:end="972:19"><name pos:start="972:17" pos:end="972:19">int</name></type> <name pos:start="972:21" pos:end="972:21">c</name></decl>;</decl_stmt>

                <for pos:start="974:17" pos:end="984:17">for<control pos:start="974:20" pos:end="974:40">( <init pos:start="974:22" pos:end="974:27"><expr pos:start="974:22" pos:end="974:26"><name pos:start="974:22" pos:end="974:22">c</name> <operator pos:start="974:24" pos:end="974:24">=</operator> <literal type="number" pos:start="974:26" pos:end="974:26">0</literal></expr>;</init> <condition pos:start="974:29" pos:end="974:34"><expr pos:start="974:29" pos:end="974:33"><name pos:start="974:29" pos:end="974:29">c</name> <operator pos:start="974:31" pos:end="974:31">&lt;</operator> <literal type="number" pos:start="974:33" pos:end="974:33">2</literal></expr>;</condition> <incr pos:start="974:36" pos:end="974:38"><expr pos:start="974:36" pos:end="974:38"><name pos:start="974:36" pos:end="974:36">c</name><operator pos:start="974:37" pos:end="974:38">++</operator></expr></incr> )</control> <block pos:start="974:42" pos:end="984:17">{<block_content pos:start="978:21" pos:end="982:71">

                    <comment type="line" pos:start="976:21" pos:end="976:75">//av_log( s-&gt;avctx, AV_LOG_ERROR, "INTRA C%d-DC\n",c );</comment>

                    <expr_stmt pos:start="978:21" pos:end="982:71"><expr pos:start="978:21" pos:end="982:70"><call pos:start="978:21" pos:end="982:70"><name pos:start="978:21" pos:end="978:48">decode_cabac_residual_dc_422</name><argument_list pos:start="978:49" pos:end="982:70">(<argument pos:start="978:50" pos:end="978:50"><expr pos:start="978:50" pos:end="978:50"><name pos:start="978:50" pos:end="978:50">h</name></expr></argument>, <argument pos:start="978:53" pos:end="978:92"><expr pos:start="978:53" pos:end="978:92"><name pos:start="978:53" pos:end="978:57"><name pos:start="978:53" pos:end="978:53">h</name><operator pos:start="978:54" pos:end="978:55">-&gt;</operator><name pos:start="978:56" pos:end="978:57">mb</name></name> <operator pos:start="978:59" pos:end="978:59">+</operator> <operator pos:start="978:61" pos:end="978:61">(</operator><operator pos:start="978:62" pos:end="978:62">(</operator><literal type="number" pos:start="978:63" pos:end="978:67">256</literal> <operator pos:start="978:67" pos:end="978:67">+</operator> <literal type="number" pos:start="978:69" pos:end="978:70">16</literal><operator pos:start="978:71" pos:end="978:71">*</operator><literal type="number" pos:start="978:72" pos:end="978:73">16</literal><operator pos:start="978:74" pos:end="978:74">*</operator><name pos:start="978:75" pos:end="978:75">c</name><operator pos:start="978:76" pos:end="978:76">)</operator> <operator pos:start="978:78" pos:end="978:79">&lt;&lt;</operator> <name pos:start="978:81" pos:end="978:91">pixel_shift</name><operator pos:start="978:92" pos:end="978:92">)</operator></expr></argument>, <argument pos:start="978:95" pos:end="978:95"><expr pos:start="978:95" pos:end="978:95"><literal type="number" pos:start="978:95" pos:end="978:95">3</literal></expr></argument>,

                                                 <argument pos:start="980:50" pos:end="980:74"><expr pos:start="980:50" pos:end="980:74"><name pos:start="980:50" pos:end="980:70">CHROMA_DC_BLOCK_INDEX</name> <operator pos:start="980:72" pos:end="980:72">+</operator> <name pos:start="980:74" pos:end="980:74">c</name></expr></argument>,

                                                 <argument pos:start="982:50" pos:end="982:66"><expr pos:start="982:50" pos:end="982:66"><name pos:start="982:50" pos:end="982:66">chroma422_dc_scan</name></expr></argument>, <argument pos:start="982:69" pos:end="982:69"><expr pos:start="982:69" pos:end="982:69"><literal type="number" pos:start="982:69" pos:end="982:69">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="990:13" pos:end="1024:13"><if pos:start="990:13" pos:end="1018:13">if<condition pos:start="990:15" pos:end="990:26">( <expr pos:start="990:17" pos:end="990:24"><name pos:start="990:17" pos:end="990:19">cbp</name><operator pos:start="990:20" pos:end="990:20">&amp;</operator><literal type="number" pos:start="990:21" pos:end="990:24">0x20</literal></expr> )</condition> <block pos:start="990:28" pos:end="1018:13">{<block_content pos:start="992:17" pos:end="1016:17">

                <decl_stmt pos:start="992:17" pos:end="992:31"><decl pos:start="992:17" pos:end="992:21"><type pos:start="992:17" pos:end="992:19"><name pos:start="992:17" pos:end="992:19">int</name></type> <name pos:start="992:21" pos:end="992:21">c</name></decl>, <decl pos:start="992:24" pos:end="992:24"><type ref="prev" pos:start="992:17" pos:end="992:19"/><name pos:start="992:24" pos:end="992:24">i</name></decl>, <decl pos:start="992:27" pos:end="992:30"><type ref="prev" pos:start="992:17" pos:end="992:19"/><name pos:start="992:27" pos:end="992:30">i8x8</name></decl>;</decl_stmt>

                <for pos:start="994:17" pos:end="1016:17">for<control pos:start="994:20" pos:end="994:40">( <init pos:start="994:22" pos:end="994:27"><expr pos:start="994:22" pos:end="994:26"><name pos:start="994:22" pos:end="994:22">c</name> <operator pos:start="994:24" pos:end="994:24">=</operator> <literal type="number" pos:start="994:26" pos:end="994:26">0</literal></expr>;</init> <condition pos:start="994:29" pos:end="994:34"><expr pos:start="994:29" pos:end="994:33"><name pos:start="994:29" pos:end="994:29">c</name> <operator pos:start="994:31" pos:end="994:31">&lt;</operator> <literal type="number" pos:start="994:33" pos:end="994:33">2</literal></expr>;</condition> <incr pos:start="994:36" pos:end="994:38"><expr pos:start="994:36" pos:end="994:38"><name pos:start="994:36" pos:end="994:36">c</name><operator pos:start="994:37" pos:end="994:38">++</operator></expr></incr> )</control> <block pos:start="994:42" pos:end="1016:17">{<block_content pos:start="996:21" pos:end="1014:21">

                    <decl_stmt pos:start="996:21" pos:end="996:74"><decl pos:start="996:21" pos:end="996:73"><type pos:start="996:21" pos:end="996:29"><name pos:start="996:21" pos:end="996:27">DCTELEM</name> <modifier pos:start="996:29" pos:end="996:29">*</modifier></type><name pos:start="996:30" pos:end="996:31">mb</name> <init pos:start="996:33" pos:end="996:73">= <expr pos:start="996:35" pos:end="996:73"><name pos:start="996:35" pos:end="996:39"><name pos:start="996:35" pos:end="996:35">h</name><operator pos:start="996:36" pos:end="996:37">-&gt;</operator><name pos:start="996:38" pos:end="996:39">mb</name></name> <operator pos:start="996:41" pos:end="996:41">+</operator> <operator pos:start="996:43" pos:end="996:43">(</operator><literal type="number" pos:start="996:44" pos:end="996:45">16</literal><operator pos:start="996:46" pos:end="996:46">*</operator><operator pos:start="996:47" pos:end="996:47">(</operator><literal type="number" pos:start="996:48" pos:end="996:51">16</literal> <operator pos:start="996:51" pos:end="996:51">+</operator> <literal type="number" pos:start="996:53" pos:end="996:54">16</literal><operator pos:start="996:55" pos:end="996:55">*</operator><name pos:start="996:56" pos:end="996:56">c</name><operator pos:start="996:57" pos:end="996:57">)</operator> <operator pos:start="996:59" pos:end="996:60">&lt;&lt;</operator> <name pos:start="996:62" pos:end="996:72">pixel_shift</name><operator pos:start="996:73" pos:end="996:73">)</operator></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="998:21" pos:end="998:95"><expr pos:start="998:21" pos:end="998:94"><name pos:start="998:21" pos:end="998:24">qmul</name> <operator pos:start="998:26" pos:end="998:26">=</operator> <name pos:start="998:28" pos:end="998:94"><name pos:start="998:28" pos:end="998:28">h</name><operator pos:start="998:29" pos:end="998:30">-&gt;</operator><name pos:start="998:31" pos:end="998:44">dequant4_coeff</name><index pos:start="998:45" pos:end="998:77">[<expr pos:start="998:46" pos:end="998:76"><name pos:start="998:46" pos:end="998:46">c</name><operator pos:start="998:47" pos:end="998:47">+</operator><literal type="number" pos:start="998:48" pos:end="998:49">1</literal><operator pos:start="998:49" pos:end="998:49">+</operator><operator pos:start="998:50" pos:end="998:50">(</operator><ternary pos:start="998:51" pos:end="998:75"><condition pos:start="998:51" pos:end="998:71"><expr pos:start="998:51" pos:end="998:69"><call pos:start="998:51" pos:end="998:69"><name pos:start="998:51" pos:end="998:58">IS_INTRA</name><argument_list pos:start="998:59" pos:end="998:69">( <argument pos:start="998:61" pos:end="998:67"><expr pos:start="998:61" pos:end="998:67"><name pos:start="998:61" pos:end="998:67">mb_type</name></expr></argument> )</argument_list></call></expr> ?</condition><then pos:start="998:73" pos:end="998:73"> <expr pos:start="998:73" pos:end="998:73"><literal type="number" pos:start="998:73" pos:end="998:73">0</literal></expr></then><else pos:start="998:74" pos:end="998:75">:<expr pos:start="998:75" pos:end="998:75"><literal type="number" pos:start="998:75" pos:end="998:75">3</literal></expr></else></ternary><operator pos:start="998:76" pos:end="998:76">)</operator></expr>]</index><index pos:start="998:78" pos:end="998:94">[<expr pos:start="998:79" pos:end="998:93"><name pos:start="998:79" pos:end="998:93"><name pos:start="998:79" pos:end="998:79">h</name><operator pos:start="998:80" pos:end="998:81">-&gt;</operator><name pos:start="998:82" pos:end="998:90">chroma_qp</name><index pos:start="998:91" pos:end="998:93">[<expr pos:start="998:92" pos:end="998:92"><name pos:start="998:92" pos:end="998:92">c</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

                    <for pos:start="1000:21" pos:end="1014:21">for <control pos:start="1000:25" pos:end="1000:52">(<init pos:start="1000:26" pos:end="1000:34"><expr pos:start="1000:26" pos:end="1000:33"><name pos:start="1000:26" pos:end="1000:29">i8x8</name> <operator pos:start="1000:31" pos:end="1000:31">=</operator> <literal type="number" pos:start="1000:33" pos:end="1000:33">0</literal></expr>;</init> <condition pos:start="1000:36" pos:end="1000:44"><expr pos:start="1000:36" pos:end="1000:43"><name pos:start="1000:36" pos:end="1000:39">i8x8</name> <operator pos:start="1000:41" pos:end="1000:41">&lt;</operator> <literal type="number" pos:start="1000:43" pos:end="1000:43">2</literal></expr>;</condition> <incr pos:start="1000:46" pos:end="1000:51"><expr pos:start="1000:46" pos:end="1000:51"><name pos:start="1000:46" pos:end="1000:49">i8x8</name><operator pos:start="1000:50" pos:end="1000:51">++</operator></expr></incr>)</control> <block pos:start="1000:54" pos:end="1014:21">{<block_content pos:start="1002:25" pos:end="1012:25">

                        <for pos:start="1002:25" pos:end="1012:25">for <control pos:start="1002:29" pos:end="1002:47">(<init pos:start="1002:30" pos:end="1002:35"><expr pos:start="1002:30" pos:end="1002:34"><name pos:start="1002:30" pos:end="1002:30">i</name> <operator pos:start="1002:32" pos:end="1002:32">=</operator> <literal type="number" pos:start="1002:34" pos:end="1002:34">0</literal></expr>;</init> <condition pos:start="1002:37" pos:end="1002:42"><expr pos:start="1002:37" pos:end="1002:41"><name pos:start="1002:37" pos:end="1002:37">i</name> <operator pos:start="1002:39" pos:end="1002:39">&lt;</operator> <literal type="number" pos:start="1002:41" pos:end="1002:41">4</literal></expr>;</condition> <incr pos:start="1002:44" pos:end="1002:46"><expr pos:start="1002:44" pos:end="1002:46"><name pos:start="1002:44" pos:end="1002:44">i</name><operator pos:start="1002:45" pos:end="1002:46">++</operator></expr></incr>)</control> <block pos:start="1002:49" pos:end="1012:25">{<block_content pos:start="1004:29" pos:end="1010:50">

                            <decl_stmt pos:start="1004:29" pos:end="1004:71"><decl pos:start="1004:29" pos:end="1004:70"><type pos:start="1004:29" pos:end="1004:37"><specifier pos:start="1004:29" pos:end="1004:33">const</specifier> <name pos:start="1004:35" pos:end="1004:37">int</name></type> <name pos:start="1004:39" pos:end="1004:43">index</name> <init pos:start="1004:45" pos:end="1004:70">= <expr pos:start="1004:47" pos:end="1004:70"><literal type="number" pos:start="1004:47" pos:end="1004:50">16</literal> <operator pos:start="1004:50" pos:end="1004:50">+</operator> <literal type="number" pos:start="1004:52" pos:end="1004:53">16</literal> <operator pos:start="1004:55" pos:end="1004:55">*</operator> <name pos:start="1004:57" pos:end="1004:57">c</name> <operator pos:start="1004:59" pos:end="1004:59">+</operator> <literal type="number" pos:start="1004:61" pos:end="1004:61">8</literal><operator pos:start="1004:62" pos:end="1004:62">*</operator><name pos:start="1004:63" pos:end="1004:66">i8x8</name> <operator pos:start="1004:68" pos:end="1004:68">+</operator> <name pos:start="1004:70" pos:end="1004:70">i</name></expr></init></decl>;</decl_stmt>

                            <comment type="line" pos:start="1006:29" pos:end="1006:96">//av_log(s-&gt;avctx, AV_LOG_ERROR, "INTRA C%d-AC %d\n",c, index - 16);</comment>

                            <expr_stmt pos:start="1008:29" pos:end="1008:93"><expr pos:start="1008:29" pos:end="1008:92"><call pos:start="1008:29" pos:end="1008:92"><name pos:start="1008:29" pos:end="1008:55">decode_cabac_residual_nondc</name><argument_list pos:start="1008:56" pos:end="1008:92">(<argument pos:start="1008:57" pos:end="1008:57"><expr pos:start="1008:57" pos:end="1008:57"><name pos:start="1008:57" pos:end="1008:57">h</name></expr></argument>, <argument pos:start="1008:60" pos:end="1008:61"><expr pos:start="1008:60" pos:end="1008:61"><name pos:start="1008:60" pos:end="1008:61">mb</name></expr></argument>, <argument pos:start="1008:64" pos:end="1008:64"><expr pos:start="1008:64" pos:end="1008:64"><literal type="number" pos:start="1008:64" pos:end="1008:64">4</literal></expr></argument>, <argument pos:start="1008:67" pos:end="1008:71"><expr pos:start="1008:67" pos:end="1008:71"><name pos:start="1008:67" pos:end="1008:71">index</name></expr></argument>, <argument pos:start="1008:74" pos:end="1008:81"><expr pos:start="1008:74" pos:end="1008:81"><name pos:start="1008:74" pos:end="1008:77">scan</name> <operator pos:start="1008:79" pos:end="1008:79">+</operator> <literal type="number" pos:start="1008:81" pos:end="1008:81">1</literal></expr></argument>, <argument pos:start="1008:84" pos:end="1008:87"><expr pos:start="1008:84" pos:end="1008:87"><name pos:start="1008:84" pos:end="1008:87">qmul</name></expr></argument>, <argument pos:start="1008:90" pos:end="1008:91"><expr pos:start="1008:90" pos:end="1008:91"><literal type="number" pos:start="1008:90" pos:end="1008:91">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1010:29" pos:end="1010:50"><expr pos:start="1010:29" pos:end="1010:49"><name pos:start="1010:29" pos:end="1010:30">mb</name> <operator pos:start="1010:32" pos:end="1010:33">+=</operator> <literal type="number" pos:start="1010:35" pos:end="1010:36">16</literal><operator pos:start="1010:37" pos:end="1010:38">&lt;&lt;</operator><name pos:start="1010:39" pos:end="1010:49">pixel_shift</name></expr>;</expr_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></for>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="1018:15" pos:end="1024:13">else <block pos:start="1018:20" pos:end="1024:13">{<block_content pos:start="1020:17" pos:end="1022:83">

                <expr_stmt pos:start="1020:17" pos:end="1020:83"><expr pos:start="1020:17" pos:end="1020:82"><call pos:start="1020:17" pos:end="1020:82"><name pos:start="1020:17" pos:end="1020:30">fill_rectangle</name><argument_list pos:start="1020:31" pos:end="1020:82">(<argument pos:start="1020:32" pos:end="1020:66"><expr pos:start="1020:32" pos:end="1020:66"><operator pos:start="1020:32" pos:end="1020:32">&amp;</operator><name pos:start="1020:33" pos:end="1020:66"><name pos:start="1020:33" pos:end="1020:33">h</name><operator pos:start="1020:34" pos:end="1020:35">-&gt;</operator><name pos:start="1020:36" pos:end="1020:55">non_zero_count_cache</name><index pos:start="1020:56" pos:end="1020:66">[<expr pos:start="1020:57" pos:end="1020:65"><name pos:start="1020:57" pos:end="1020:65"><name pos:start="1020:57" pos:end="1020:61">scan8</name><index pos:start="1020:62" pos:end="1020:65">[<expr pos:start="1020:63" pos:end="1020:64"><literal type="number" pos:start="1020:63" pos:end="1020:64">16</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="1020:69" pos:end="1020:69"><expr pos:start="1020:69" pos:end="1020:69"><literal type="number" pos:start="1020:69" pos:end="1020:69">4</literal></expr></argument>, <argument pos:start="1020:72" pos:end="1020:72"><expr pos:start="1020:72" pos:end="1020:72"><literal type="number" pos:start="1020:72" pos:end="1020:72">4</literal></expr></argument>, <argument pos:start="1020:75" pos:end="1020:75"><expr pos:start="1020:75" pos:end="1020:75"><literal type="number" pos:start="1020:75" pos:end="1020:75">8</literal></expr></argument>, <argument pos:start="1020:78" pos:end="1020:78"><expr pos:start="1020:78" pos:end="1020:78"><literal type="number" pos:start="1020:78" pos:end="1020:78">0</literal></expr></argument>, <argument pos:start="1020:81" pos:end="1020:81"><expr pos:start="1020:81" pos:end="1020:81"><literal type="number" pos:start="1020:81" pos:end="1020:81">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1022:17" pos:end="1022:83"><expr pos:start="1022:17" pos:end="1022:82"><call pos:start="1022:17" pos:end="1022:82"><name pos:start="1022:17" pos:end="1022:30">fill_rectangle</name><argument_list pos:start="1022:31" pos:end="1022:82">(<argument pos:start="1022:32" pos:end="1022:66"><expr pos:start="1022:32" pos:end="1022:66"><operator pos:start="1022:32" pos:end="1022:32">&amp;</operator><name pos:start="1022:33" pos:end="1022:66"><name pos:start="1022:33" pos:end="1022:33">h</name><operator pos:start="1022:34" pos:end="1022:35">-&gt;</operator><name pos:start="1022:36" pos:end="1022:55">non_zero_count_cache</name><index pos:start="1022:56" pos:end="1022:66">[<expr pos:start="1022:57" pos:end="1022:65"><name pos:start="1022:57" pos:end="1022:65"><name pos:start="1022:57" pos:end="1022:61">scan8</name><index pos:start="1022:62" pos:end="1022:65">[<expr pos:start="1022:63" pos:end="1022:64"><literal type="number" pos:start="1022:63" pos:end="1022:64">32</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="1022:69" pos:end="1022:69"><expr pos:start="1022:69" pos:end="1022:69"><literal type="number" pos:start="1022:69" pos:end="1022:69">4</literal></expr></argument>, <argument pos:start="1022:72" pos:end="1022:72"><expr pos:start="1022:72" pos:end="1022:72"><literal type="number" pos:start="1022:72" pos:end="1022:72">4</literal></expr></argument>, <argument pos:start="1022:75" pos:end="1022:75"><expr pos:start="1022:75" pos:end="1022:75"><literal type="number" pos:start="1022:75" pos:end="1022:75">8</literal></expr></argument>, <argument pos:start="1022:78" pos:end="1022:78"><expr pos:start="1022:78" pos:end="1022:78"><literal type="number" pos:start="1022:78" pos:end="1022:78">0</literal></expr></argument>, <argument pos:start="1022:81" pos:end="1022:81"><expr pos:start="1022:81" pos:end="1022:81"><literal type="number" pos:start="1022:81" pos:end="1022:81">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="1026:11" pos:end="1072:9">else <comment type="block" pos:start="1026:16" pos:end="1026:27">/* yuv420 */</comment> <block pos:start="1026:29" pos:end="1072:9">{<block_content pos:start="1028:13" pos:end="1070:13">

            <if_stmt pos:start="1028:13" pos:end="1040:13"><if pos:start="1028:13" pos:end="1040:13">if<condition pos:start="1028:15" pos:end="1028:26">( <expr pos:start="1028:17" pos:end="1028:24"><name pos:start="1028:17" pos:end="1028:19">cbp</name><operator pos:start="1028:20" pos:end="1028:20">&amp;</operator><literal type="number" pos:start="1028:21" pos:end="1028:24">0x30</literal></expr> )</condition><block pos:start="1028:27" pos:end="1040:13">{<block_content pos:start="1030:17" pos:end="1038:17">

                <decl_stmt pos:start="1030:17" pos:end="1030:22"><decl pos:start="1030:17" pos:end="1030:21"><type pos:start="1030:17" pos:end="1030:19"><name pos:start="1030:17" pos:end="1030:19">int</name></type> <name pos:start="1030:21" pos:end="1030:21">c</name></decl>;</decl_stmt>

                <for pos:start="1032:17" pos:end="1038:17">for<control pos:start="1032:20" pos:end="1032:40">( <init pos:start="1032:22" pos:end="1032:27"><expr pos:start="1032:22" pos:end="1032:26"><name pos:start="1032:22" pos:end="1032:22">c</name> <operator pos:start="1032:24" pos:end="1032:24">=</operator> <literal type="number" pos:start="1032:26" pos:end="1032:26">0</literal></expr>;</init> <condition pos:start="1032:29" pos:end="1032:34"><expr pos:start="1032:29" pos:end="1032:33"><name pos:start="1032:29" pos:end="1032:29">c</name> <operator pos:start="1032:31" pos:end="1032:31">&lt;</operator> <literal type="number" pos:start="1032:33" pos:end="1032:33">2</literal></expr>;</condition> <incr pos:start="1032:36" pos:end="1032:38"><expr pos:start="1032:36" pos:end="1032:38"><name pos:start="1032:36" pos:end="1032:36">c</name><operator pos:start="1032:37" pos:end="1032:38">++</operator></expr></incr> )</control> <block pos:start="1032:42" pos:end="1038:17">{<block_content pos:start="1036:21" pos:end="1036:137">

                    <comment type="line" pos:start="1034:21" pos:end="1034:75">//av_log( s-&gt;avctx, AV_LOG_ERROR, "INTRA C%d-DC\n",c );</comment>

                    <expr_stmt pos:start="1036:21" pos:end="1036:137"><expr pos:start="1036:21" pos:end="1036:136"><call pos:start="1036:21" pos:end="1036:136"><name pos:start="1036:21" pos:end="1036:44">decode_cabac_residual_dc</name><argument_list pos:start="1036:45" pos:end="1036:136">(<argument pos:start="1036:46" pos:end="1036:46"><expr pos:start="1036:46" pos:end="1036:46"><name pos:start="1036:46" pos:end="1036:46">h</name></expr></argument>, <argument pos:start="1036:49" pos:end="1036:88"><expr pos:start="1036:49" pos:end="1036:88"><name pos:start="1036:49" pos:end="1036:53"><name pos:start="1036:49" pos:end="1036:49">h</name><operator pos:start="1036:50" pos:end="1036:51">-&gt;</operator><name pos:start="1036:52" pos:end="1036:53">mb</name></name> <operator pos:start="1036:55" pos:end="1036:55">+</operator> <operator pos:start="1036:57" pos:end="1036:57">(</operator><operator pos:start="1036:58" pos:end="1036:58">(</operator><literal type="number" pos:start="1036:59" pos:end="1036:63">256</literal> <operator pos:start="1036:63" pos:end="1036:63">+</operator> <literal type="number" pos:start="1036:65" pos:end="1036:66">16</literal><operator pos:start="1036:67" pos:end="1036:67">*</operator><literal type="number" pos:start="1036:68" pos:end="1036:69">16</literal><operator pos:start="1036:70" pos:end="1036:70">*</operator><name pos:start="1036:71" pos:end="1036:71">c</name><operator pos:start="1036:72" pos:end="1036:72">)</operator> <operator pos:start="1036:74" pos:end="1036:75">&lt;&lt;</operator> <name pos:start="1036:77" pos:end="1036:87">pixel_shift</name><operator pos:start="1036:88" pos:end="1036:88">)</operator></expr></argument>, <argument pos:start="1036:91" pos:end="1036:91"><expr pos:start="1036:91" pos:end="1036:91"><literal type="number" pos:start="1036:91" pos:end="1036:91">3</literal></expr></argument>, <argument pos:start="1036:94" pos:end="1036:116"><expr pos:start="1036:94" pos:end="1036:116"><name pos:start="1036:94" pos:end="1036:114">CHROMA_DC_BLOCK_INDEX</name><operator pos:start="1036:115" pos:end="1036:115">+</operator><name pos:start="1036:116" pos:end="1036:116">c</name></expr></argument>, <argument pos:start="1036:119" pos:end="1036:132"><expr pos:start="1036:119" pos:end="1036:132"><name pos:start="1036:119" pos:end="1036:132">chroma_dc_scan</name></expr></argument>, <argument pos:start="1036:135" pos:end="1036:135"><expr pos:start="1036:135" pos:end="1036:135"><literal type="number" pos:start="1036:135" pos:end="1036:135">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="1044:13" pos:end="1070:13"><if pos:start="1044:13" pos:end="1064:13">if<condition pos:start="1044:15" pos:end="1044:26">( <expr pos:start="1044:17" pos:end="1044:24"><name pos:start="1044:17" pos:end="1044:19">cbp</name><operator pos:start="1044:20" pos:end="1044:20">&amp;</operator><literal type="number" pos:start="1044:21" pos:end="1044:24">0x20</literal></expr> )</condition> <block pos:start="1044:28" pos:end="1064:13">{<block_content pos:start="1046:17" pos:end="1062:17">

                <decl_stmt pos:start="1046:17" pos:end="1046:25"><decl pos:start="1046:17" pos:end="1046:21"><type pos:start="1046:17" pos:end="1046:19"><name pos:start="1046:17" pos:end="1046:19">int</name></type> <name pos:start="1046:21" pos:end="1046:21">c</name></decl>, <decl pos:start="1046:24" pos:end="1046:24"><type ref="prev" pos:start="1046:17" pos:end="1046:19"/><name pos:start="1046:24" pos:end="1046:24">i</name></decl>;</decl_stmt>

                <for pos:start="1048:17" pos:end="1062:17">for<control pos:start="1048:20" pos:end="1048:40">( <init pos:start="1048:22" pos:end="1048:27"><expr pos:start="1048:22" pos:end="1048:26"><name pos:start="1048:22" pos:end="1048:22">c</name> <operator pos:start="1048:24" pos:end="1048:24">=</operator> <literal type="number" pos:start="1048:26" pos:end="1048:26">0</literal></expr>;</init> <condition pos:start="1048:29" pos:end="1048:34"><expr pos:start="1048:29" pos:end="1048:33"><name pos:start="1048:29" pos:end="1048:29">c</name> <operator pos:start="1048:31" pos:end="1048:31">&lt;</operator> <literal type="number" pos:start="1048:33" pos:end="1048:33">2</literal></expr>;</condition> <incr pos:start="1048:36" pos:end="1048:38"><expr pos:start="1048:36" pos:end="1048:38"><name pos:start="1048:36" pos:end="1048:36">c</name><operator pos:start="1048:37" pos:end="1048:38">++</operator></expr></incr> )</control> <block pos:start="1048:42" pos:end="1062:17">{<block_content pos:start="1050:21" pos:end="1060:21">

                    <expr_stmt pos:start="1050:21" pos:end="1050:95"><expr pos:start="1050:21" pos:end="1050:94"><name pos:start="1050:21" pos:end="1050:24">qmul</name> <operator pos:start="1050:26" pos:end="1050:26">=</operator> <name pos:start="1050:28" pos:end="1050:94"><name pos:start="1050:28" pos:end="1050:28">h</name><operator pos:start="1050:29" pos:end="1050:30">-&gt;</operator><name pos:start="1050:31" pos:end="1050:44">dequant4_coeff</name><index pos:start="1050:45" pos:end="1050:77">[<expr pos:start="1050:46" pos:end="1050:76"><name pos:start="1050:46" pos:end="1050:46">c</name><operator pos:start="1050:47" pos:end="1050:47">+</operator><literal type="number" pos:start="1050:48" pos:end="1050:49">1</literal><operator pos:start="1050:49" pos:end="1050:49">+</operator><operator pos:start="1050:50" pos:end="1050:50">(</operator><ternary pos:start="1050:51" pos:end="1050:75"><condition pos:start="1050:51" pos:end="1050:71"><expr pos:start="1050:51" pos:end="1050:69"><call pos:start="1050:51" pos:end="1050:69"><name pos:start="1050:51" pos:end="1050:58">IS_INTRA</name><argument_list pos:start="1050:59" pos:end="1050:69">( <argument pos:start="1050:61" pos:end="1050:67"><expr pos:start="1050:61" pos:end="1050:67"><name pos:start="1050:61" pos:end="1050:67">mb_type</name></expr></argument> )</argument_list></call></expr> ?</condition><then pos:start="1050:73" pos:end="1050:73"> <expr pos:start="1050:73" pos:end="1050:73"><literal type="number" pos:start="1050:73" pos:end="1050:73">0</literal></expr></then><else pos:start="1050:74" pos:end="1050:75">:<expr pos:start="1050:75" pos:end="1050:75"><literal type="number" pos:start="1050:75" pos:end="1050:75">3</literal></expr></else></ternary><operator pos:start="1050:76" pos:end="1050:76">)</operator></expr>]</index><index pos:start="1050:78" pos:end="1050:94">[<expr pos:start="1050:79" pos:end="1050:93"><name pos:start="1050:79" pos:end="1050:93"><name pos:start="1050:79" pos:end="1050:79">h</name><operator pos:start="1050:80" pos:end="1050:81">-&gt;</operator><name pos:start="1050:82" pos:end="1050:90">chroma_qp</name><index pos:start="1050:91" pos:end="1050:93">[<expr pos:start="1050:92" pos:end="1050:92"><name pos:start="1050:92" pos:end="1050:92">c</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

                    <for pos:start="1052:21" pos:end="1060:21">for<control pos:start="1052:24" pos:end="1052:44">( <init pos:start="1052:26" pos:end="1052:31"><expr pos:start="1052:26" pos:end="1052:30"><name pos:start="1052:26" pos:end="1052:26">i</name> <operator pos:start="1052:28" pos:end="1052:28">=</operator> <literal type="number" pos:start="1052:30" pos:end="1052:30">0</literal></expr>;</init> <condition pos:start="1052:33" pos:end="1052:38"><expr pos:start="1052:33" pos:end="1052:37"><name pos:start="1052:33" pos:end="1052:33">i</name> <operator pos:start="1052:35" pos:end="1052:35">&lt;</operator> <literal type="number" pos:start="1052:37" pos:end="1052:37">4</literal></expr>;</condition> <incr pos:start="1052:40" pos:end="1052:42"><expr pos:start="1052:40" pos:end="1052:42"><name pos:start="1052:40" pos:end="1052:40">i</name><operator pos:start="1052:41" pos:end="1052:42">++</operator></expr></incr> )</control> <block pos:start="1052:46" pos:end="1060:21">{<block_content pos:start="1054:25" pos:end="1058:120">

                        <decl_stmt pos:start="1054:25" pos:end="1054:58"><decl pos:start="1054:25" pos:end="1054:57"><type pos:start="1054:25" pos:end="1054:33"><specifier pos:start="1054:25" pos:end="1054:29">const</specifier> <name pos:start="1054:31" pos:end="1054:33">int</name></type> <name pos:start="1054:35" pos:end="1054:39">index</name> <init pos:start="1054:41" pos:end="1054:57">= <expr pos:start="1054:43" pos:end="1054:57"><literal type="number" pos:start="1054:43" pos:end="1054:46">16</literal> <operator pos:start="1054:46" pos:end="1054:46">+</operator> <literal type="number" pos:start="1054:48" pos:end="1054:49">16</literal> <operator pos:start="1054:51" pos:end="1054:51">*</operator> <name pos:start="1054:53" pos:end="1054:53">c</name> <operator pos:start="1054:55" pos:end="1054:55">+</operator> <name pos:start="1054:57" pos:end="1054:57">i</name></expr></init></decl>;</decl_stmt>

                        <comment type="line" pos:start="1056:25" pos:end="1056:94">//av_log( s-&gt;avctx, AV_LOG_ERROR, "INTRA C%d-AC %d\n",c, index - 16 );</comment>

                        <expr_stmt pos:start="1058:25" pos:end="1058:120"><expr pos:start="1058:25" pos:end="1058:119"><call pos:start="1058:25" pos:end="1058:119"><name pos:start="1058:25" pos:end="1058:51">decode_cabac_residual_nondc</name><argument_list pos:start="1058:52" pos:end="1058:119">(<argument pos:start="1058:53" pos:end="1058:53"><expr pos:start="1058:53" pos:end="1058:53"><name pos:start="1058:53" pos:end="1058:53">h</name></expr></argument>, <argument pos:start="1058:56" pos:end="1058:88"><expr pos:start="1058:56" pos:end="1058:88"><name pos:start="1058:56" pos:end="1058:60"><name pos:start="1058:56" pos:end="1058:56">h</name><operator pos:start="1058:57" pos:end="1058:58">-&gt;</operator><name pos:start="1058:59" pos:end="1058:60">mb</name></name> <operator pos:start="1058:62" pos:end="1058:62">+</operator> <operator pos:start="1058:64" pos:end="1058:64">(</operator><literal type="number" pos:start="1058:65" pos:end="1058:66">16</literal><operator pos:start="1058:67" pos:end="1058:67">*</operator><name pos:start="1058:68" pos:end="1058:72">index</name> <operator pos:start="1058:74" pos:end="1058:75">&lt;&lt;</operator> <name pos:start="1058:77" pos:end="1058:87">pixel_shift</name><operator pos:start="1058:88" pos:end="1058:88">)</operator></expr></argument>, <argument pos:start="1058:91" pos:end="1058:91"><expr pos:start="1058:91" pos:end="1058:91"><literal type="number" pos:start="1058:91" pos:end="1058:91">4</literal></expr></argument>, <argument pos:start="1058:94" pos:end="1058:98"><expr pos:start="1058:94" pos:end="1058:98"><name pos:start="1058:94" pos:end="1058:98">index</name></expr></argument>, <argument pos:start="1058:101" pos:end="1058:108"><expr pos:start="1058:101" pos:end="1058:108"><name pos:start="1058:101" pos:end="1058:104">scan</name> <operator pos:start="1058:106" pos:end="1058:106">+</operator> <literal type="number" pos:start="1058:108" pos:end="1058:108">1</literal></expr></argument>, <argument pos:start="1058:111" pos:end="1058:114"><expr pos:start="1058:111" pos:end="1058:114"><name pos:start="1058:111" pos:end="1058:114">qmul</name></expr></argument>, <argument pos:start="1058:117" pos:end="1058:118"><expr pos:start="1058:117" pos:end="1058:118"><literal type="number" pos:start="1058:117" pos:end="1058:118">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="1064:15" pos:end="1070:13">else <block pos:start="1064:20" pos:end="1070:13">{<block_content pos:start="1066:17" pos:end="1068:83">

                <expr_stmt pos:start="1066:17" pos:end="1066:83"><expr pos:start="1066:17" pos:end="1066:82"><call pos:start="1066:17" pos:end="1066:82"><name pos:start="1066:17" pos:end="1066:30">fill_rectangle</name><argument_list pos:start="1066:31" pos:end="1066:82">(<argument pos:start="1066:32" pos:end="1066:66"><expr pos:start="1066:32" pos:end="1066:66"><operator pos:start="1066:32" pos:end="1066:32">&amp;</operator><name pos:start="1066:33" pos:end="1066:66"><name pos:start="1066:33" pos:end="1066:33">h</name><operator pos:start="1066:34" pos:end="1066:35">-&gt;</operator><name pos:start="1066:36" pos:end="1066:55">non_zero_count_cache</name><index pos:start="1066:56" pos:end="1066:66">[<expr pos:start="1066:57" pos:end="1066:65"><name pos:start="1066:57" pos:end="1066:65"><name pos:start="1066:57" pos:end="1066:61">scan8</name><index pos:start="1066:62" pos:end="1066:65">[<expr pos:start="1066:63" pos:end="1066:64"><literal type="number" pos:start="1066:63" pos:end="1066:64">16</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="1066:69" pos:end="1066:69"><expr pos:start="1066:69" pos:end="1066:69"><literal type="number" pos:start="1066:69" pos:end="1066:69">4</literal></expr></argument>, <argument pos:start="1066:72" pos:end="1066:72"><expr pos:start="1066:72" pos:end="1066:72"><literal type="number" pos:start="1066:72" pos:end="1066:72">4</literal></expr></argument>, <argument pos:start="1066:75" pos:end="1066:75"><expr pos:start="1066:75" pos:end="1066:75"><literal type="number" pos:start="1066:75" pos:end="1066:75">8</literal></expr></argument>, <argument pos:start="1066:78" pos:end="1066:78"><expr pos:start="1066:78" pos:end="1066:78"><literal type="number" pos:start="1066:78" pos:end="1066:78">0</literal></expr></argument>, <argument pos:start="1066:81" pos:end="1066:81"><expr pos:start="1066:81" pos:end="1066:81"><literal type="number" pos:start="1066:81" pos:end="1066:81">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1068:17" pos:end="1068:83"><expr pos:start="1068:17" pos:end="1068:82"><call pos:start="1068:17" pos:end="1068:82"><name pos:start="1068:17" pos:end="1068:30">fill_rectangle</name><argument_list pos:start="1068:31" pos:end="1068:82">(<argument pos:start="1068:32" pos:end="1068:66"><expr pos:start="1068:32" pos:end="1068:66"><operator pos:start="1068:32" pos:end="1068:32">&amp;</operator><name pos:start="1068:33" pos:end="1068:66"><name pos:start="1068:33" pos:end="1068:33">h</name><operator pos:start="1068:34" pos:end="1068:35">-&gt;</operator><name pos:start="1068:36" pos:end="1068:55">non_zero_count_cache</name><index pos:start="1068:56" pos:end="1068:66">[<expr pos:start="1068:57" pos:end="1068:65"><name pos:start="1068:57" pos:end="1068:65"><name pos:start="1068:57" pos:end="1068:61">scan8</name><index pos:start="1068:62" pos:end="1068:65">[<expr pos:start="1068:63" pos:end="1068:64"><literal type="number" pos:start="1068:63" pos:end="1068:64">32</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="1068:69" pos:end="1068:69"><expr pos:start="1068:69" pos:end="1068:69"><literal type="number" pos:start="1068:69" pos:end="1068:69">4</literal></expr></argument>, <argument pos:start="1068:72" pos:end="1068:72"><expr pos:start="1068:72" pos:end="1068:72"><literal type="number" pos:start="1068:72" pos:end="1068:72">4</literal></expr></argument>, <argument pos:start="1068:75" pos:end="1068:75"><expr pos:start="1068:75" pos:end="1068:75"><literal type="number" pos:start="1068:75" pos:end="1068:75">8</literal></expr></argument>, <argument pos:start="1068:78" pos:end="1068:78"><expr pos:start="1068:78" pos:end="1068:78"><literal type="number" pos:start="1068:78" pos:end="1068:78">0</literal></expr></argument>, <argument pos:start="1068:81" pos:end="1068:81"><expr pos:start="1068:81" pos:end="1068:81"><literal type="number" pos:start="1068:81" pos:end="1068:81">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="1074:7" pos:end="1084:5">else <block pos:start="1074:12" pos:end="1084:5">{<block_content pos:start="1076:9" pos:end="1082:32">

        <expr_stmt pos:start="1076:9" pos:end="1076:75"><expr pos:start="1076:9" pos:end="1076:74"><call pos:start="1076:9" pos:end="1076:74"><name pos:start="1076:9" pos:end="1076:22">fill_rectangle</name><argument_list pos:start="1076:23" pos:end="1076:74">(<argument pos:start="1076:24" pos:end="1076:58"><expr pos:start="1076:24" pos:end="1076:58"><operator pos:start="1076:24" pos:end="1076:24">&amp;</operator><name pos:start="1076:25" pos:end="1076:58"><name pos:start="1076:25" pos:end="1076:25">h</name><operator pos:start="1076:26" pos:end="1076:27">-&gt;</operator><name pos:start="1076:28" pos:end="1076:47">non_zero_count_cache</name><index pos:start="1076:48" pos:end="1076:58">[<expr pos:start="1076:49" pos:end="1076:57"><name pos:start="1076:49" pos:end="1076:57"><name pos:start="1076:49" pos:end="1076:53">scan8</name><index pos:start="1076:54" pos:end="1076:57">[ <expr pos:start="1076:56" pos:end="1076:56"><literal type="number" pos:start="1076:56" pos:end="1076:56">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="1076:61" pos:end="1076:61"><expr pos:start="1076:61" pos:end="1076:61"><literal type="number" pos:start="1076:61" pos:end="1076:61">4</literal></expr></argument>, <argument pos:start="1076:64" pos:end="1076:64"><expr pos:start="1076:64" pos:end="1076:64"><literal type="number" pos:start="1076:64" pos:end="1076:64">4</literal></expr></argument>, <argument pos:start="1076:67" pos:end="1076:67"><expr pos:start="1076:67" pos:end="1076:67"><literal type="number" pos:start="1076:67" pos:end="1076:67">8</literal></expr></argument>, <argument pos:start="1076:70" pos:end="1076:70"><expr pos:start="1076:70" pos:end="1076:70"><literal type="number" pos:start="1076:70" pos:end="1076:70">0</literal></expr></argument>, <argument pos:start="1076:73" pos:end="1076:73"><expr pos:start="1076:73" pos:end="1076:73"><literal type="number" pos:start="1076:73" pos:end="1076:73">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1078:9" pos:end="1078:75"><expr pos:start="1078:9" pos:end="1078:74"><call pos:start="1078:9" pos:end="1078:74"><name pos:start="1078:9" pos:end="1078:22">fill_rectangle</name><argument_list pos:start="1078:23" pos:end="1078:74">(<argument pos:start="1078:24" pos:end="1078:58"><expr pos:start="1078:24" pos:end="1078:58"><operator pos:start="1078:24" pos:end="1078:24">&amp;</operator><name pos:start="1078:25" pos:end="1078:58"><name pos:start="1078:25" pos:end="1078:25">h</name><operator pos:start="1078:26" pos:end="1078:27">-&gt;</operator><name pos:start="1078:28" pos:end="1078:47">non_zero_count_cache</name><index pos:start="1078:48" pos:end="1078:58">[<expr pos:start="1078:49" pos:end="1078:57"><name pos:start="1078:49" pos:end="1078:57"><name pos:start="1078:49" pos:end="1078:53">scan8</name><index pos:start="1078:54" pos:end="1078:57">[<expr pos:start="1078:55" pos:end="1078:56"><literal type="number" pos:start="1078:55" pos:end="1078:56">16</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="1078:61" pos:end="1078:61"><expr pos:start="1078:61" pos:end="1078:61"><literal type="number" pos:start="1078:61" pos:end="1078:61">4</literal></expr></argument>, <argument pos:start="1078:64" pos:end="1078:64"><expr pos:start="1078:64" pos:end="1078:64"><literal type="number" pos:start="1078:64" pos:end="1078:64">4</literal></expr></argument>, <argument pos:start="1078:67" pos:end="1078:67"><expr pos:start="1078:67" pos:end="1078:67"><literal type="number" pos:start="1078:67" pos:end="1078:67">8</literal></expr></argument>, <argument pos:start="1078:70" pos:end="1078:70"><expr pos:start="1078:70" pos:end="1078:70"><literal type="number" pos:start="1078:70" pos:end="1078:70">0</literal></expr></argument>, <argument pos:start="1078:73" pos:end="1078:73"><expr pos:start="1078:73" pos:end="1078:73"><literal type="number" pos:start="1078:73" pos:end="1078:73">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1080:9" pos:end="1080:75"><expr pos:start="1080:9" pos:end="1080:74"><call pos:start="1080:9" pos:end="1080:74"><name pos:start="1080:9" pos:end="1080:22">fill_rectangle</name><argument_list pos:start="1080:23" pos:end="1080:74">(<argument pos:start="1080:24" pos:end="1080:58"><expr pos:start="1080:24" pos:end="1080:58"><operator pos:start="1080:24" pos:end="1080:24">&amp;</operator><name pos:start="1080:25" pos:end="1080:58"><name pos:start="1080:25" pos:end="1080:25">h</name><operator pos:start="1080:26" pos:end="1080:27">-&gt;</operator><name pos:start="1080:28" pos:end="1080:47">non_zero_count_cache</name><index pos:start="1080:48" pos:end="1080:58">[<expr pos:start="1080:49" pos:end="1080:57"><name pos:start="1080:49" pos:end="1080:57"><name pos:start="1080:49" pos:end="1080:53">scan8</name><index pos:start="1080:54" pos:end="1080:57">[<expr pos:start="1080:55" pos:end="1080:56"><literal type="number" pos:start="1080:55" pos:end="1080:56">32</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="1080:61" pos:end="1080:61"><expr pos:start="1080:61" pos:end="1080:61"><literal type="number" pos:start="1080:61" pos:end="1080:61">4</literal></expr></argument>, <argument pos:start="1080:64" pos:end="1080:64"><expr pos:start="1080:64" pos:end="1080:64"><literal type="number" pos:start="1080:64" pos:end="1080:64">4</literal></expr></argument>, <argument pos:start="1080:67" pos:end="1080:67"><expr pos:start="1080:67" pos:end="1080:67"><literal type="number" pos:start="1080:67" pos:end="1080:67">8</literal></expr></argument>, <argument pos:start="1080:70" pos:end="1080:70"><expr pos:start="1080:70" pos:end="1080:70"><literal type="number" pos:start="1080:70" pos:end="1080:70">0</literal></expr></argument>, <argument pos:start="1080:73" pos:end="1080:73"><expr pos:start="1080:73" pos:end="1080:73"><literal type="number" pos:start="1080:73" pos:end="1080:73">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1082:9" pos:end="1082:32"><expr pos:start="1082:9" pos:end="1082:31"><name pos:start="1082:9" pos:end="1082:27"><name pos:start="1082:9" pos:end="1082:9">h</name><operator pos:start="1082:10" pos:end="1082:11">-&gt;</operator><name pos:start="1082:12" pos:end="1082:27">last_qscale_diff</name></name> <operator pos:start="1082:29" pos:end="1082:29">=</operator> <literal type="number" pos:start="1082:31" pos:end="1082:31">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="1088:5" pos:end="1088:57"><expr pos:start="1088:5" pos:end="1088:56"><name pos:start="1088:5" pos:end="1088:44"><name pos:start="1088:5" pos:end="1088:5">s</name><operator pos:start="1088:6" pos:end="1088:7">-&gt;</operator><name pos:start="1088:8" pos:end="1088:22">current_picture</name><operator pos:start="1088:23" pos:end="1088:23">.</operator><name pos:start="1088:24" pos:end="1088:24">f</name><operator pos:start="1088:25" pos:end="1088:25">.</operator><name pos:start="1088:26" pos:end="1088:37">qscale_table</name><index pos:start="1088:38" pos:end="1088:44">[<expr pos:start="1088:39" pos:end="1088:43"><name pos:start="1088:39" pos:end="1088:43">mb_xy</name></expr>]</index></name> <operator pos:start="1088:46" pos:end="1088:46">=</operator> <name pos:start="1088:48" pos:end="1088:56"><name pos:start="1088:48" pos:end="1088:48">s</name><operator pos:start="1088:49" pos:end="1088:50">-&gt;</operator><name pos:start="1088:51" pos:end="1088:56">qscale</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="1090:5" pos:end="1090:33"><expr pos:start="1090:5" pos:end="1090:32"><call pos:start="1090:5" pos:end="1090:32"><name pos:start="1090:5" pos:end="1090:29">write_back_non_zero_count</name><argument_list pos:start="1090:30" pos:end="1090:32">(<argument pos:start="1090:31" pos:end="1090:31"><expr pos:start="1090:31" pos:end="1090:31"><name pos:start="1090:31" pos:end="1090:31">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="1094:5" pos:end="1100:5"><if pos:start="1094:5" pos:end="1100:5">if<condition pos:start="1094:7" pos:end="1094:16">(<expr pos:start="1094:8" pos:end="1094:15"><name pos:start="1094:8" pos:end="1094:15">MB_MBAFF</name></expr>)</condition><block pos:start="1094:17" pos:end="1100:5">{<block_content pos:start="1096:9" pos:end="1098:30">

        <expr_stmt pos:start="1096:9" pos:end="1096:30"><expr pos:start="1096:9" pos:end="1096:29"><name pos:start="1096:9" pos:end="1096:23"><name pos:start="1096:9" pos:end="1096:9">h</name><operator pos:start="1096:10" pos:end="1096:11">-&gt;</operator><name pos:start="1096:12" pos:end="1096:20">ref_count</name><index pos:start="1096:21" pos:end="1096:23">[<expr pos:start="1096:22" pos:end="1096:22"><literal type="number" pos:start="1096:22" pos:end="1096:22">0</literal></expr>]</index></name> <operator pos:start="1096:25" pos:end="1096:27">&gt;&gt;=</operator> <literal type="number" pos:start="1096:29" pos:end="1096:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1098:9" pos:end="1098:30"><expr pos:start="1098:9" pos:end="1098:29"><name pos:start="1098:9" pos:end="1098:23"><name pos:start="1098:9" pos:end="1098:9">h</name><operator pos:start="1098:10" pos:end="1098:11">-&gt;</operator><name pos:start="1098:12" pos:end="1098:20">ref_count</name><index pos:start="1098:21" pos:end="1098:23">[<expr pos:start="1098:22" pos:end="1098:22"><literal type="number" pos:start="1098:22" pos:end="1098:22">1</literal></expr>]</index></name> <operator pos:start="1098:25" pos:end="1098:27">&gt;&gt;=</operator> <literal type="number" pos:start="1098:29" pos:end="1098:29">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="1104:5" pos:end="1104:13">return <expr pos:start="1104:12" pos:end="1104:12"><literal type="number" pos:start="1104:12" pos:end="1104:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
