<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4222.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">coroutine_fn</name> <name pos:start="1:21" pos:end="1:24">void</name></type> <name pos:start="1:26" pos:end="1:34">do_co_req</name><parameter_list pos:start="1:35" pos:end="1:48">(<parameter pos:start="1:36" pos:end="1:47"><decl pos:start="1:36" pos:end="1:47"><type pos:start="1:36" pos:end="1:41"><name pos:start="1:36" pos:end="1:39">void</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:47">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:26">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">Coroutine</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:17">co</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">SheepdogReqCo</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:23">srco</name> <init pos:start="9:25" pos:end="9:32">= <expr pos:start="9:27" pos:end="9:32"><name pos:start="9:27" pos:end="9:32">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:14">sockfd</name> <init pos:start="11:16" pos:end="11:29">= <expr pos:start="11:18" pos:end="11:29"><name pos:start="11:18" pos:end="11:29"><name pos:start="11:18" pos:end="11:21">srco</name><operator pos:start="11:22" pos:end="11:23">-&gt;</operator><name pos:start="11:24" pos:end="11:29">sockfd</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">SheepdogReq</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:20">hdr</name> <init pos:start="13:22" pos:end="13:32">= <expr pos:start="13:24" pos:end="13:32"><name pos:start="13:24" pos:end="13:32"><name pos:start="13:24" pos:end="13:27">srco</name><operator pos:start="13:28" pos:end="13:29">-&gt;</operator><name pos:start="13:30" pos:end="13:32">hdr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">void</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:14">data</name> <init pos:start="15:16" pos:end="15:27">= <expr pos:start="15:18" pos:end="15:27"><name pos:start="15:18" pos:end="15:27"><name pos:start="15:18" pos:end="15:21">srco</name><operator pos:start="15:22" pos:end="15:23">-&gt;</operator><name pos:start="15:24" pos:end="15:27">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:36"><decl pos:start="17:5" pos:end="17:35"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:22">wlen</name> <init pos:start="17:24" pos:end="17:35">= <expr pos:start="17:26" pos:end="17:35"><name pos:start="17:26" pos:end="17:35"><name pos:start="17:26" pos:end="17:29">srco</name><operator pos:start="17:30" pos:end="17:31">-&gt;</operator><name pos:start="17:32" pos:end="17:35">wlen</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:36"><decl pos:start="19:5" pos:end="19:35"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:16">int</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:22">rlen</name> <init pos:start="19:24" pos:end="19:35">= <expr pos:start="19:26" pos:end="19:35"><name pos:start="19:26" pos:end="19:35"><name pos:start="19:26" pos:end="19:29">srco</name><operator pos:start="19:30" pos:end="19:31">-&gt;</operator><name pos:start="19:32" pos:end="19:35">rlen</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:31"><expr pos:start="23:5" pos:end="23:30"><name pos:start="23:5" pos:end="23:6">co</name> <operator pos:start="23:8" pos:end="23:8">=</operator> <call pos:start="23:10" pos:end="23:30"><name pos:start="23:10" pos:end="23:28">qemu_coroutine_self</name><argument_list pos:start="23:29" pos:end="23:30">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:62"><expr pos:start="25:5" pos:end="25:61"><call pos:start="25:5" pos:end="25:61"><name pos:start="25:5" pos:end="25:27">qemu_aio_set_fd_handler</name><argument_list pos:start="25:28" pos:end="25:61">(<argument pos:start="25:29" pos:end="25:34"><expr pos:start="25:29" pos:end="25:34"><name pos:start="25:29" pos:end="25:34">sockfd</name></expr></argument>, <argument pos:start="25:37" pos:end="25:40"><expr pos:start="25:37" pos:end="25:40"><name pos:start="25:37" pos:end="25:40">NULL</name></expr></argument>, <argument pos:start="25:43" pos:end="25:56"><expr pos:start="25:43" pos:end="25:56"><name pos:start="25:43" pos:end="25:56">restart_co_req</name></expr></argument>, <argument pos:start="25:59" pos:end="25:60"><expr pos:start="25:59" pos:end="25:60"><name pos:start="25:59" pos:end="25:60">co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:47"><expr pos:start="29:5" pos:end="29:46"><name pos:start="29:5" pos:end="29:7">ret</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:46"><name pos:start="29:11" pos:end="29:21">send_co_req</name><argument_list pos:start="29:22" pos:end="29:46">(<argument pos:start="29:23" pos:end="29:28"><expr pos:start="29:23" pos:end="29:28"><name pos:start="29:23" pos:end="29:28">sockfd</name></expr></argument>, <argument pos:start="29:31" pos:end="29:33"><expr pos:start="29:31" pos:end="29:33"><name pos:start="29:31" pos:end="29:33">hdr</name></expr></argument>, <argument pos:start="29:36" pos:end="29:39"><expr pos:start="29:36" pos:end="29:39"><name pos:start="29:36" pos:end="29:39">data</name></expr></argument>, <argument pos:start="29:42" pos:end="29:45"><expr pos:start="29:42" pos:end="29:45"><name pos:start="29:42" pos:end="29:45">wlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:16">(<expr pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:13">&lt;</operator> <literal type="number" pos:start="31:15" pos:end="31:15">0</literal></expr>)</condition> <block pos:start="31:18" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:17">

        <goto pos:start="33:9" pos:end="33:17">goto <name pos:start="33:14" pos:end="33:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:62"><expr pos:start="39:5" pos:end="39:61"><call pos:start="39:5" pos:end="39:61"><name pos:start="39:5" pos:end="39:27">qemu_aio_set_fd_handler</name><argument_list pos:start="39:28" pos:end="39:61">(<argument pos:start="39:29" pos:end="39:34"><expr pos:start="39:29" pos:end="39:34"><name pos:start="39:29" pos:end="39:34">sockfd</name></expr></argument>, <argument pos:start="39:37" pos:end="39:50"><expr pos:start="39:37" pos:end="39:50"><name pos:start="39:37" pos:end="39:50">restart_co_req</name></expr></argument>, <argument pos:start="39:53" pos:end="39:56"><expr pos:start="39:53" pos:end="39:56"><name pos:start="39:53" pos:end="39:56">NULL</name></expr></argument>, <argument pos:start="39:59" pos:end="39:60"><expr pos:start="39:59" pos:end="39:60"><name pos:start="39:59" pos:end="39:60">co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:50"><expr pos:start="43:5" pos:end="43:49"><name pos:start="43:5" pos:end="43:7">ret</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <call pos:start="43:11" pos:end="43:49"><name pos:start="43:11" pos:end="43:22">qemu_co_recv</name><argument_list pos:start="43:23" pos:end="43:49">(<argument pos:start="43:24" pos:end="43:29"><expr pos:start="43:24" pos:end="43:29"><name pos:start="43:24" pos:end="43:29">sockfd</name></expr></argument>, <argument pos:start="43:32" pos:end="43:34"><expr pos:start="43:32" pos:end="43:34"><name pos:start="43:32" pos:end="43:34">hdr</name></expr></argument>, <argument pos:start="43:37" pos:end="43:48"><expr pos:start="43:37" pos:end="43:48"><sizeof pos:start="43:37" pos:end="43:48">sizeof<argument_list pos:start="43:43" pos:end="43:48">(<argument pos:start="43:44" pos:end="43:47"><expr pos:start="43:44" pos:end="43:47"><operator pos:start="43:44" pos:end="43:44">*</operator><name pos:start="43:45" pos:end="43:47">hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="53:5"><if pos:start="45:5" pos:end="53:5">if <condition pos:start="45:8" pos:end="45:27">(<expr pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:11">ret</name> <operator pos:start="45:13" pos:end="45:13">&lt;</operator> <sizeof pos:start="45:15" pos:end="45:26">sizeof<argument_list pos:start="45:21" pos:end="45:26">(<argument pos:start="45:22" pos:end="45:25"><expr pos:start="45:22" pos:end="45:25"><operator pos:start="45:22" pos:end="45:22">*</operator><name pos:start="45:23" pos:end="45:25">hdr</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="45:29" pos:end="53:5">{<block_content pos:start="47:9" pos:end="51:17">

        <expr_stmt pos:start="47:9" pos:end="47:65"><expr pos:start="47:9" pos:end="47:64"><call pos:start="47:9" pos:end="47:64"><name pos:start="47:9" pos:end="47:20">error_report</name><argument_list pos:start="47:21" pos:end="47:64">(<argument pos:start="47:22" pos:end="47:46"><expr pos:start="47:22" pos:end="47:46"><literal type="string" pos:start="47:22" pos:end="47:46">"failed to get a rsp, %s"</literal></expr></argument>, <argument pos:start="47:49" pos:end="47:63"><expr pos:start="47:49" pos:end="47:63"><call pos:start="47:49" pos:end="47:63"><name pos:start="47:49" pos:end="47:56">strerror</name><argument_list pos:start="47:57" pos:end="47:63">(<argument pos:start="47:58" pos:end="47:62"><expr pos:start="47:58" pos:end="47:62"><name pos:start="47:58" pos:end="47:62">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:21"><expr pos:start="49:9" pos:end="49:20"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <operator pos:start="49:15" pos:end="49:15">-</operator><name pos:start="49:16" pos:end="49:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="51:9" pos:end="51:17">goto <name pos:start="51:14" pos:end="51:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:33">(<expr pos:start="57:9" pos:end="57:32"><operator pos:start="57:9" pos:end="57:9">*</operator><name pos:start="57:10" pos:end="57:13">rlen</name> <operator pos:start="57:15" pos:end="57:15">&gt;</operator> <name pos:start="57:17" pos:end="57:32"><name pos:start="57:17" pos:end="57:19">hdr</name><operator pos:start="57:20" pos:end="57:21">-&gt;</operator><name pos:start="57:22" pos:end="57:32">data_length</name></name></expr>)</condition> <block pos:start="57:35" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:33">

        <expr_stmt pos:start="59:9" pos:end="59:33"><expr pos:start="59:9" pos:end="59:32"><operator pos:start="59:9" pos:end="59:9">*</operator><name pos:start="59:10" pos:end="59:13">rlen</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <name pos:start="59:17" pos:end="59:32"><name pos:start="59:17" pos:end="59:19">hdr</name><operator pos:start="59:20" pos:end="59:21">-&gt;</operator><name pos:start="59:22" pos:end="59:32">data_length</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="65:5" pos:end="79:5"><if pos:start="65:5" pos:end="79:5">if <condition pos:start="65:8" pos:end="65:14">(<expr pos:start="65:9" pos:end="65:13"><operator pos:start="65:9" pos:end="65:9">*</operator><name pos:start="65:10" pos:end="65:13">rlen</name></expr>)</condition> <block pos:start="65:16" pos:end="79:5">{<block_content pos:start="67:9" pos:end="77:9">

        <expr_stmt pos:start="67:9" pos:end="67:48"><expr pos:start="67:9" pos:end="67:47"><name pos:start="67:9" pos:end="67:11">ret</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <call pos:start="67:15" pos:end="67:47"><name pos:start="67:15" pos:end="67:26">qemu_co_recv</name><argument_list pos:start="67:27" pos:end="67:47">(<argument pos:start="67:28" pos:end="67:33"><expr pos:start="67:28" pos:end="67:33"><name pos:start="67:28" pos:end="67:33">sockfd</name></expr></argument>, <argument pos:start="67:36" pos:end="67:39"><expr pos:start="67:36" pos:end="67:39"><name pos:start="67:36" pos:end="67:39">data</name></expr></argument>, <argument pos:start="67:42" pos:end="67:46"><expr pos:start="67:42" pos:end="67:46"><operator pos:start="67:42" pos:end="67:42">*</operator><name pos:start="67:43" pos:end="67:46">rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="69:9" pos:end="77:9"><if pos:start="69:9" pos:end="77:9">if <condition pos:start="69:12" pos:end="69:24">(<expr pos:start="69:13" pos:end="69:23"><name pos:start="69:13" pos:end="69:15">ret</name> <operator pos:start="69:17" pos:end="69:17">&lt;</operator> <operator pos:start="69:19" pos:end="69:19">*</operator><name pos:start="69:20" pos:end="69:23">rlen</name></expr>)</condition> <block pos:start="69:26" pos:end="77:9">{<block_content pos:start="71:13" pos:end="75:21">

            <expr_stmt pos:start="71:13" pos:end="71:72"><expr pos:start="71:13" pos:end="71:71"><call pos:start="71:13" pos:end="71:71"><name pos:start="71:13" pos:end="71:24">error_report</name><argument_list pos:start="71:25" pos:end="71:71">(<argument pos:start="71:26" pos:end="71:53"><expr pos:start="71:26" pos:end="71:53"><literal type="string" pos:start="71:26" pos:end="71:53">"failed to get the data, %s"</literal></expr></argument>, <argument pos:start="71:56" pos:end="71:70"><expr pos:start="71:56" pos:end="71:70"><call pos:start="71:56" pos:end="71:70"><name pos:start="71:56" pos:end="71:63">strerror</name><argument_list pos:start="71:64" pos:end="71:70">(<argument pos:start="71:65" pos:end="71:69"><expr pos:start="71:65" pos:end="71:69"><name pos:start="71:65" pos:end="71:69">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:25"><expr pos:start="73:13" pos:end="73:24"><name pos:start="73:13" pos:end="73:15">ret</name> <operator pos:start="73:17" pos:end="73:17">=</operator> <operator pos:start="73:19" pos:end="73:19">-</operator><name pos:start="73:20" pos:end="73:24">errno</name></expr>;</expr_stmt>

            <goto pos:start="75:13" pos:end="75:21">goto <name pos:start="75:18" pos:end="75:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:12"><expr pos:start="81:5" pos:end="81:11"><name pos:start="81:5" pos:end="81:7">ret</name> <operator pos:start="81:9" pos:end="81:9">=</operator> <literal type="number" pos:start="81:11" pos:end="81:11">0</literal></expr>;</expr_stmt>

<label pos:start="83:1" pos:end="83:4"><name pos:start="83:1" pos:end="83:3">out</name>:</label>

    <comment type="block" pos:start="85:5" pos:end="87:35">/* there is at most one request for this sockfd, so it is safe to

     * set each handler to NULL. */</comment>

    <expr_stmt pos:start="89:5" pos:end="89:54"><expr pos:start="89:5" pos:end="89:53"><call pos:start="89:5" pos:end="89:53"><name pos:start="89:5" pos:end="89:27">qemu_aio_set_fd_handler</name><argument_list pos:start="89:28" pos:end="89:53">(<argument pos:start="89:29" pos:end="89:34"><expr pos:start="89:29" pos:end="89:34"><name pos:start="89:29" pos:end="89:34">sockfd</name></expr></argument>, <argument pos:start="89:37" pos:end="89:40"><expr pos:start="89:37" pos:end="89:40"><name pos:start="89:37" pos:end="89:40">NULL</name></expr></argument>, <argument pos:start="89:43" pos:end="89:46"><expr pos:start="89:43" pos:end="89:46"><name pos:start="89:43" pos:end="89:46">NULL</name></expr></argument>, <argument pos:start="89:49" pos:end="89:52"><expr pos:start="89:49" pos:end="89:52"><name pos:start="89:49" pos:end="89:52">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:20"><expr pos:start="93:5" pos:end="93:19"><name pos:start="93:5" pos:end="93:13"><name pos:start="93:5" pos:end="93:8">srco</name><operator pos:start="93:9" pos:end="93:10">-&gt;</operator><name pos:start="93:11" pos:end="93:13">ret</name></name> <operator pos:start="93:15" pos:end="93:15">=</operator> <name pos:start="93:17" pos:end="93:19">ret</name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:26"><expr pos:start="95:5" pos:end="95:25"><name pos:start="95:5" pos:end="95:18"><name pos:start="95:5" pos:end="95:8">srco</name><operator pos:start="95:9" pos:end="95:10">-&gt;</operator><name pos:start="95:11" pos:end="95:18">finished</name></name> <operator pos:start="95:20" pos:end="95:20">=</operator> <name pos:start="95:22" pos:end="95:25">true</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
