<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7477.c" pos:tabs="8"><function pos:start="1:1" pos:end="245:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">clipper_init</name><parameter_list pos:start="1:25" pos:end="1:47">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:39"><name pos:start="1:26" pos:end="1:37">MachineState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:46">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="245:1">{<block_content pos:start="5:5" pos:end="243:5">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:33">machine</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:46">= <expr pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:35">machine</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:59"><decl pos:start="9:5" pos:end="9:58"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:58">= <expr pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:41">machine</name><operator pos:start="9:42" pos:end="9:43">-&gt;</operator><name pos:start="9:44" pos:end="9:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:57"><decl pos:start="11:5" pos:end="11:56"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:30">kernel_cmdline</name> <init pos:start="11:32" pos:end="11:56">= <expr pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:40">machine</name><operator pos:start="11:41" pos:end="11:42">-&gt;</operator><name pos:start="11:43" pos:end="11:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:59"><decl pos:start="13:5" pos:end="13:58"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:31">initrd_filename</name> <init pos:start="13:33" pos:end="13:58">= <expr pos:start="13:35" pos:end="13:58"><name pos:start="13:35" pos:end="13:58"><name pos:start="13:35" pos:end="13:41">machine</name><operator pos:start="13:42" pos:end="13:43">-&gt;</operator><name pos:start="13:44" pos:end="13:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">AlphaCPU</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:21"><name pos:start="15:15" pos:end="15:18">cpus</name><index pos:start="15:19" pos:end="15:21">[<expr pos:start="15:20" pos:end="15:20"><literal type="number" pos:start="15:20" pos:end="15:20">4</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:10">PCIBus</name> <modifier pos:start="17:12" pos:end="17:12">*</modifier></type><name pos:start="17:13" pos:end="17:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:10">ISABus</name> <modifier pos:start="19:12" pos:end="19:12">*</modifier></type><name pos:start="19:13" pos:end="19:19">isa_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">qemu_irq</name></type> <name pos:start="21:14" pos:end="21:20">rtc_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:17"><decl pos:start="23:5" pos:end="23:13"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">long</name></type> <name pos:start="23:10" pos:end="23:13">size</name></decl>, <decl pos:start="23:16" pos:end="23:16"><type ref="prev" pos:start="23:5" pos:end="23:8"/><name pos:start="23:16" pos:end="23:16">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:27"><decl pos:start="25:5" pos:end="25:26"><type pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:8">char</name> <modifier pos:start="25:10" pos:end="25:10">*</modifier></type><name pos:start="25:11" pos:end="25:26">palcode_filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:54"><decl pos:start="27:5" pos:end="27:26"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:12">uint64_t</name></type> <name pos:start="27:14" pos:end="27:26">palcode_entry</name></decl>, <decl pos:start="27:29" pos:end="27:39"><type ref="prev" pos:start="27:5" pos:end="27:12"/><name pos:start="27:29" pos:end="27:39">palcode_low</name></decl>, <decl pos:start="27:42" pos:end="27:53"><type ref="prev" pos:start="27:5" pos:end="27:12"/><name pos:start="27:42" pos:end="27:53">palcode_high</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:51"><decl pos:start="29:5" pos:end="29:25"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:12">uint64_t</name></type> <name pos:start="29:14" pos:end="29:25">kernel_entry</name></decl>, <decl pos:start="29:28" pos:end="29:37"><type ref="prev" pos:start="29:5" pos:end="29:12"/><name pos:start="29:28" pos:end="29:37">kernel_low</name></decl>, <decl pos:start="29:40" pos:end="29:50"><type ref="prev" pos:start="29:5" pos:end="29:12"/><name pos:start="29:40" pos:end="29:50">kernel_high</name></decl>;</decl_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:31">/* Create up to 4 cpus.  */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:34"><expr pos:start="35:5" pos:end="35:33"><call pos:start="35:5" pos:end="35:33"><name pos:start="35:5" pos:end="35:10">memset</name><argument_list pos:start="35:11" pos:end="35:33">(<argument pos:start="35:12" pos:end="35:15"><expr pos:start="35:12" pos:end="35:15"><name pos:start="35:12" pos:end="35:15">cpus</name></expr></argument>, <argument pos:start="35:18" pos:end="35:18"><expr pos:start="35:18" pos:end="35:18"><literal type="number" pos:start="35:18" pos:end="35:18">0</literal></expr></argument>, <argument pos:start="35:21" pos:end="35:32"><expr pos:start="35:21" pos:end="35:32"><sizeof pos:start="35:21" pos:end="35:32">sizeof<argument_list pos:start="35:27" pos:end="35:32">(<argument pos:start="35:28" pos:end="35:31"><expr pos:start="35:28" pos:end="35:31"><name pos:start="35:28" pos:end="35:31">cpus</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="37:5" pos:end="41:5">for <control pos:start="37:9" pos:end="37:34">(<init pos:start="37:10" pos:end="37:15"><expr pos:start="37:10" pos:end="37:14"><name pos:start="37:10" pos:end="37:10">i</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <literal type="number" pos:start="37:14" pos:end="37:14">0</literal></expr>;</init> <condition pos:start="37:17" pos:end="37:29"><expr pos:start="37:17" pos:end="37:28"><name pos:start="37:17" pos:end="37:17">i</name> <operator pos:start="37:19" pos:end="37:19">&lt;</operator> <name pos:start="37:21" pos:end="37:28">smp_cpus</name></expr>;</condition> <incr pos:start="37:31" pos:end="37:33"><expr pos:start="37:31" pos:end="37:33"><operator pos:start="37:31" pos:end="37:32">++</operator><name pos:start="37:33" pos:end="37:33">i</name></expr></incr>)</control> <block pos:start="37:36" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:65">

        <expr_stmt pos:start="39:9" pos:end="39:65"><expr pos:start="39:9" pos:end="39:64"><name pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:12">cpus</name><index pos:start="39:13" pos:end="39:15">[<expr pos:start="39:14" pos:end="39:14"><name pos:start="39:14" pos:end="39:14">i</name></expr>]</index></name> <operator pos:start="39:17" pos:end="39:17">=</operator> <call pos:start="39:19" pos:end="39:64"><name pos:start="39:19" pos:end="39:32">cpu_alpha_init</name><argument_list pos:start="39:33" pos:end="39:64">(<argument pos:start="39:34" pos:end="39:63"><expr pos:start="39:34" pos:end="39:63"><ternary pos:start="39:34" pos:end="39:63"><condition pos:start="39:34" pos:end="39:44"><expr pos:start="39:34" pos:end="39:42"><name pos:start="39:34" pos:end="39:42">cpu_model</name></expr> ?</condition><then pos:start="39:46" pos:end="39:54"> <expr pos:start="39:46" pos:end="39:54"><name pos:start="39:46" pos:end="39:54">cpu_model</name></expr> </then><else pos:start="39:56" pos:end="39:63">: <expr pos:start="39:58" pos:end="39:63"><literal type="string" pos:start="39:58" pos:end="39:63">"ev67"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="45:5" pos:end="45:38"><expr pos:start="45:5" pos:end="45:37"><name pos:start="45:5" pos:end="45:11"><name pos:start="45:5" pos:end="45:8">cpus</name><index pos:start="45:9" pos:end="45:11">[<expr pos:start="45:10" pos:end="45:10"><literal type="number" pos:start="45:10" pos:end="45:10">0</literal></expr>]</index></name><operator pos:start="45:12" pos:end="45:13">-&gt;</operator><name pos:start="45:14" pos:end="45:26"><name pos:start="45:14" pos:end="45:16">env</name><operator pos:start="45:17" pos:end="45:17">.</operator><name pos:start="45:18" pos:end="45:26">trap_arg0</name></name> <operator pos:start="45:28" pos:end="45:28">=</operator> <name pos:start="45:30" pos:end="45:37">ram_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:31"><expr pos:start="47:5" pos:end="47:30"><name pos:start="47:5" pos:end="47:11"><name pos:start="47:5" pos:end="47:8">cpus</name><index pos:start="47:9" pos:end="47:11">[<expr pos:start="47:10" pos:end="47:10"><literal type="number" pos:start="47:10" pos:end="47:10">0</literal></expr>]</index></name><operator pos:start="47:12" pos:end="47:13">-&gt;</operator><name pos:start="47:14" pos:end="47:26"><name pos:start="47:14" pos:end="47:16">env</name><operator pos:start="47:17" pos:end="47:17">.</operator><name pos:start="47:18" pos:end="47:26">trap_arg1</name></name> <operator pos:start="47:28" pos:end="47:28">=</operator> <literal type="number" pos:start="47:30" pos:end="47:30">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:38"><expr pos:start="49:5" pos:end="49:37"><name pos:start="49:5" pos:end="49:11"><name pos:start="49:5" pos:end="49:8">cpus</name><index pos:start="49:9" pos:end="49:11">[<expr pos:start="49:10" pos:end="49:10"><literal type="number" pos:start="49:10" pos:end="49:10">0</literal></expr>]</index></name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:26"><name pos:start="49:14" pos:end="49:16">env</name><operator pos:start="49:17" pos:end="49:17">.</operator><name pos:start="49:18" pos:end="49:26">trap_arg2</name></name> <operator pos:start="49:28" pos:end="49:28">=</operator> <name pos:start="49:30" pos:end="49:37">smp_cpus</name></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:28">/* Init the chipset.  */</comment>

    <expr_stmt pos:start="55:5" pos:end="57:48"><expr pos:start="55:5" pos:end="57:47"><name pos:start="55:5" pos:end="55:11">pci_bus</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <call pos:start="55:15" pos:end="57:47"><name pos:start="55:15" pos:end="55:26">typhoon_init</name><argument_list pos:start="55:27" pos:end="57:47">(<argument pos:start="55:28" pos:end="55:35"><expr pos:start="55:28" pos:end="55:35"><name pos:start="55:28" pos:end="55:35">ram_size</name></expr></argument>, <argument pos:start="55:38" pos:end="55:45"><expr pos:start="55:38" pos:end="55:45"><operator pos:start="55:38" pos:end="55:38">&amp;</operator><name pos:start="55:39" pos:end="55:45">isa_bus</name></expr></argument>, <argument pos:start="55:48" pos:end="55:55"><expr pos:start="55:48" pos:end="55:55"><operator pos:start="55:48" pos:end="55:48">&amp;</operator><name pos:start="55:49" pos:end="55:55">rtc_irq</name></expr></argument>, <argument pos:start="55:58" pos:end="55:61"><expr pos:start="55:58" pos:end="55:61"><name pos:start="55:58" pos:end="55:61">cpus</name></expr></argument>,

                           <argument pos:start="57:28" pos:end="57:46"><expr pos:start="57:28" pos:end="57:46"><name pos:start="57:28" pos:end="57:46">clipper_pci_map_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:70">/* Since we have an SRM-compatible PALcode, use the SRM epoch.  */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:37"><expr pos:start="63:5" pos:end="63:36"><call pos:start="63:5" pos:end="63:36"><name pos:start="63:5" pos:end="63:12">rtc_init</name><argument_list pos:start="63:13" pos:end="63:36">(<argument pos:start="63:14" pos:end="63:20"><expr pos:start="63:14" pos:end="63:20"><name pos:start="63:14" pos:end="63:20">isa_bus</name></expr></argument>, <argument pos:start="63:23" pos:end="63:26"><expr pos:start="63:23" pos:end="63:26"><literal type="number" pos:start="63:23" pos:end="63:26">1900</literal></expr></argument>, <argument pos:start="63:29" pos:end="63:35"><expr pos:start="63:29" pos:end="63:35"><name pos:start="63:29" pos:end="63:35">rtc_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:37"><expr pos:start="67:5" pos:end="67:36"><call pos:start="67:5" pos:end="67:36"><name pos:start="67:5" pos:end="67:12">pit_init</name><argument_list pos:start="67:13" pos:end="67:36">(<argument pos:start="67:14" pos:end="67:20"><expr pos:start="67:14" pos:end="67:20"><name pos:start="67:14" pos:end="67:20">isa_bus</name></expr></argument>, <argument pos:start="67:23" pos:end="67:26"><expr pos:start="67:23" pos:end="67:26"><literal type="number" pos:start="67:23" pos:end="67:26">0x40</literal></expr></argument>, <argument pos:start="67:29" pos:end="67:29"><expr pos:start="67:29" pos:end="67:29"><literal type="number" pos:start="67:29" pos:end="67:29">0</literal></expr></argument>, <argument pos:start="67:32" pos:end="67:35"><expr pos:start="67:32" pos:end="67:35"><name pos:start="67:32" pos:end="67:35">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:40"><expr pos:start="69:5" pos:end="69:39"><call pos:start="69:5" pos:end="69:39"><name pos:start="69:5" pos:end="69:21">isa_create_simple</name><argument_list pos:start="69:22" pos:end="69:39">(<argument pos:start="69:23" pos:end="69:29"><expr pos:start="69:23" pos:end="69:29"><name pos:start="69:23" pos:end="69:29">isa_bus</name></expr></argument>, <argument pos:start="69:32" pos:end="69:38"><expr pos:start="69:32" pos:end="69:38"><literal type="string" pos:start="69:32" pos:end="69:38">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:53">/* VGA setup.  Don't bother loading the bios.  */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:26"><expr pos:start="75:5" pos:end="75:25"><call pos:start="75:5" pos:end="75:25"><name pos:start="75:5" pos:end="75:16">pci_vga_init</name><argument_list pos:start="75:17" pos:end="75:25">(<argument pos:start="75:18" pos:end="75:24"><expr pos:start="75:18" pos:end="75:24"><name pos:start="75:18" pos:end="75:24">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:29">/* Serial code setup.  */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:54"><expr pos:start="81:5" pos:end="81:53"><call pos:start="81:5" pos:end="81:53"><name pos:start="81:5" pos:end="81:23">serial_hds_isa_init</name><argument_list pos:start="81:24" pos:end="81:53">(<argument pos:start="81:25" pos:end="81:31"><expr pos:start="81:25" pos:end="81:31"><name pos:start="81:25" pos:end="81:31">isa_bus</name></expr></argument>, <argument pos:start="81:34" pos:end="81:34"><expr pos:start="81:34" pos:end="81:34"><literal type="number" pos:start="81:34" pos:end="81:34">0</literal></expr></argument>, <argument pos:start="81:37" pos:end="81:52"><expr pos:start="81:37" pos:end="81:52"><name pos:start="81:37" pos:end="81:52">MAX_SERIAL_PORTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:71">/* Network setup.  e1000 is good enough, failing Tulip support.  */</comment>

    <for pos:start="87:5" pos:end="91:5">for <control pos:start="87:9" pos:end="87:33">(<init pos:start="87:10" pos:end="87:15"><expr pos:start="87:10" pos:end="87:14"><name pos:start="87:10" pos:end="87:10">i</name> <operator pos:start="87:12" pos:end="87:12">=</operator> <literal type="number" pos:start="87:14" pos:end="87:14">0</literal></expr>;</init> <condition pos:start="87:17" pos:end="87:28"><expr pos:start="87:17" pos:end="87:27"><name pos:start="87:17" pos:end="87:17">i</name> <operator pos:start="87:19" pos:end="87:19">&lt;</operator> <name pos:start="87:21" pos:end="87:27">nb_nics</name></expr>;</condition> <incr pos:start="87:30" pos:end="87:32"><expr pos:start="87:30" pos:end="87:32"><name pos:start="87:30" pos:end="87:30">i</name><operator pos:start="87:31" pos:end="87:32">++</operator></expr></incr>)</control> <block pos:start="87:35" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:66">

        <expr_stmt pos:start="89:9" pos:end="89:66"><expr pos:start="89:9" pos:end="89:65"><call pos:start="89:9" pos:end="89:65"><name pos:start="89:9" pos:end="89:27">pci_nic_init_nofail</name><argument_list pos:start="89:28" pos:end="89:65">(<argument pos:start="89:29" pos:end="89:40"><expr pos:start="89:29" pos:end="89:40"><operator pos:start="89:29" pos:end="89:29">&amp;</operator><name pos:start="89:30" pos:end="89:40"><name pos:start="89:30" pos:end="89:37">nd_table</name><index pos:start="89:38" pos:end="89:40">[<expr pos:start="89:39" pos:end="89:39"><name pos:start="89:39" pos:end="89:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="89:43" pos:end="89:49"><expr pos:start="89:43" pos:end="89:49"><name pos:start="89:43" pos:end="89:49">pci_bus</name></expr></argument>, <argument pos:start="89:52" pos:end="89:58"><expr pos:start="89:52" pos:end="89:58"><literal type="string" pos:start="89:52" pos:end="89:58">"e1000"</literal></expr></argument>, <argument pos:start="89:61" pos:end="89:64"><expr pos:start="89:61" pos:end="89:64"><name pos:start="89:61" pos:end="89:64">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="95:5" pos:end="95:26">/* IDE disk setup.  */</comment>

    <block pos:start="97:5" pos:end="107:5">{<block_content pos:start="99:9" pos:end="105:44">

        <decl_stmt pos:start="99:9" pos:end="99:50"><decl pos:start="99:9" pos:end="99:49"><type pos:start="99:9" pos:end="99:19"><name pos:start="99:9" pos:end="99:17">DriveInfo</name> <modifier pos:start="99:19" pos:end="99:19">*</modifier></type><name pos:start="99:20" pos:end="99:49"><name pos:start="99:20" pos:end="99:21">hd</name><index pos:start="99:22" pos:end="99:49">[<expr pos:start="99:23" pos:end="99:48"><name pos:start="99:23" pos:end="99:33">MAX_IDE_BUS</name> <operator pos:start="99:35" pos:end="99:35">*</operator> <name pos:start="99:37" pos:end="99:48">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:42"><expr pos:start="101:9" pos:end="101:41"><call pos:start="101:9" pos:end="101:41"><name pos:start="101:9" pos:end="101:21">ide_drive_get</name><argument_list pos:start="101:22" pos:end="101:41">(<argument pos:start="101:23" pos:end="101:24"><expr pos:start="101:23" pos:end="101:24"><name pos:start="101:23" pos:end="101:24">hd</name></expr></argument>, <argument pos:start="101:27" pos:end="101:40"><expr pos:start="101:27" pos:end="101:40"><call pos:start="101:27" pos:end="101:40"><name pos:start="101:27" pos:end="101:36">ARRAY_SIZE</name><argument_list pos:start="101:37" pos:end="101:40">(<argument pos:start="101:38" pos:end="101:39"><expr pos:start="101:38" pos:end="101:39"><name pos:start="101:38" pos:end="101:39">hd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="105:9" pos:end="105:44"><expr pos:start="105:9" pos:end="105:43"><call pos:start="105:9" pos:end="105:43"><name pos:start="105:9" pos:end="105:27">pci_cmd646_ide_init</name><argument_list pos:start="105:28" pos:end="105:43">(<argument pos:start="105:29" pos:end="105:35"><expr pos:start="105:29" pos:end="105:35"><name pos:start="105:29" pos:end="105:35">pci_bus</name></expr></argument>, <argument pos:start="105:38" pos:end="105:39"><expr pos:start="105:38" pos:end="105:39"><name pos:start="105:38" pos:end="105:39">hd</name></expr></argument>, <argument pos:start="105:42" pos:end="105:42"><expr pos:start="105:42" pos:end="105:42"><literal type="number" pos:start="105:42" pos:end="105:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <comment type="block" pos:start="111:5" pos:end="115:52">/* Load PALcode.  Given that this is not "real" cpu palcode,

       but one explicitly written for the emulation, we might as

       well load it directly from and ELF image.  */</comment>

    <expr_stmt pos:start="117:5" pos:end="119:75"><expr pos:start="117:5" pos:end="119:74"><name pos:start="117:5" pos:end="117:20">palcode_filename</name> <operator pos:start="117:22" pos:end="117:22">=</operator> <call pos:start="117:24" pos:end="119:74"><name pos:start="117:24" pos:end="117:37">qemu_find_file</name><argument_list pos:start="117:38" pos:end="119:74">(<argument pos:start="117:39" pos:end="117:57"><expr pos:start="117:39" pos:end="117:57"><name pos:start="117:39" pos:end="117:57">QEMU_FILE_TYPE_BIOS</name></expr></argument>,

                                <argument pos:start="119:33" pos:end="119:73"><expr pos:start="119:33" pos:end="119:73"><ternary pos:start="119:33" pos:end="119:73"><condition pos:start="119:33" pos:end="119:43"><expr pos:start="119:33" pos:end="119:41"><name pos:start="119:33" pos:end="119:41">bios_name</name></expr> ?</condition><then pos:start="119:45" pos:end="119:53"> <expr pos:start="119:45" pos:end="119:53"><name pos:start="119:45" pos:end="119:53">bios_name</name></expr> </then><else pos:start="119:55" pos:end="119:73">: <expr pos:start="119:57" pos:end="119:73"><literal type="string" pos:start="119:57" pos:end="119:73">"palcode-clipper"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="127:5"><if pos:start="121:5" pos:end="127:5">if <condition pos:start="121:8" pos:end="121:33">(<expr pos:start="121:9" pos:end="121:32"><name pos:start="121:9" pos:end="121:24">palcode_filename</name> <operator pos:start="121:26" pos:end="121:27">==</operator> <name pos:start="121:29" pos:end="121:32">NULL</name></expr>)</condition> <block pos:start="121:35" pos:end="127:5">{<block_content pos:start="123:9" pos:end="125:16">

        <expr_stmt pos:start="123:9" pos:end="123:44"><expr pos:start="123:9" pos:end="123:43"><call pos:start="123:9" pos:end="123:43"><name pos:start="123:9" pos:end="123:20">error_report</name><argument_list pos:start="123:21" pos:end="123:43">(<argument pos:start="123:22" pos:end="123:42"><expr pos:start="123:22" pos:end="123:42"><literal type="string" pos:start="123:22" pos:end="123:42">"no palcode provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:16"><expr pos:start="125:9" pos:end="125:15"><call pos:start="125:9" pos:end="125:15"><name pos:start="125:9" pos:end="125:12">exit</name><argument_list pos:start="125:13" pos:end="125:15">(<argument pos:start="125:14" pos:end="125:14"><expr pos:start="125:14" pos:end="125:14"><literal type="number" pos:start="125:14" pos:end="125:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="129:5" pos:end="133:39"><expr pos:start="129:5" pos:end="133:38"><name pos:start="129:5" pos:end="129:8">size</name> <operator pos:start="129:10" pos:end="129:10">=</operator> <call pos:start="129:12" pos:end="133:38"><name pos:start="129:12" pos:end="129:19">load_elf</name><argument_list pos:start="129:20" pos:end="133:38">(<argument pos:start="129:21" pos:end="129:36"><expr pos:start="129:21" pos:end="129:36"><name pos:start="129:21" pos:end="129:36">palcode_filename</name></expr></argument>, <argument pos:start="129:39" pos:end="129:65"><expr pos:start="129:39" pos:end="129:65"><name pos:start="129:39" pos:end="129:65">cpu_alpha_superpage_to_phys</name></expr></argument>,

                    <argument pos:start="131:21" pos:end="131:24"><expr pos:start="131:21" pos:end="131:24"><name pos:start="131:21" pos:end="131:24">NULL</name></expr></argument>, <argument pos:start="131:27" pos:end="131:40"><expr pos:start="131:27" pos:end="131:40"><operator pos:start="131:27" pos:end="131:27">&amp;</operator><name pos:start="131:28" pos:end="131:40">palcode_entry</name></expr></argument>, <argument pos:start="131:43" pos:end="131:54"><expr pos:start="131:43" pos:end="131:54"><operator pos:start="131:43" pos:end="131:43">&amp;</operator><name pos:start="131:44" pos:end="131:54">palcode_low</name></expr></argument>, <argument pos:start="131:57" pos:end="131:69"><expr pos:start="131:57" pos:end="131:69"><operator pos:start="131:57" pos:end="131:57">&amp;</operator><name pos:start="131:58" pos:end="131:69">palcode_high</name></expr></argument>,

                    <argument pos:start="133:21" pos:end="133:21"><expr pos:start="133:21" pos:end="133:21"><literal type="number" pos:start="133:21" pos:end="133:21">0</literal></expr></argument>, <argument pos:start="133:24" pos:end="133:31"><expr pos:start="133:24" pos:end="133:31"><name pos:start="133:24" pos:end="133:31">EM_ALPHA</name></expr></argument>, <argument pos:start="133:34" pos:end="133:34"><expr pos:start="133:34" pos:end="133:34"><literal type="number" pos:start="133:34" pos:end="133:34">0</literal></expr></argument>, <argument pos:start="133:37" pos:end="133:37"><expr pos:start="133:37" pos:end="133:37"><literal type="number" pos:start="133:37" pos:end="133:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="135:5" pos:end="141:5"><if pos:start="135:5" pos:end="141:5">if <condition pos:start="135:8" pos:end="135:17">(<expr pos:start="135:9" pos:end="135:16"><name pos:start="135:9" pos:end="135:12">size</name> <operator pos:start="135:14" pos:end="135:14">&lt;</operator> <literal type="number" pos:start="135:16" pos:end="135:16">0</literal></expr>)</condition> <block pos:start="135:19" pos:end="141:5">{<block_content pos:start="137:9" pos:end="139:16">

        <expr_stmt pos:start="137:9" pos:end="137:70"><expr pos:start="137:9" pos:end="137:69"><call pos:start="137:9" pos:end="137:69"><name pos:start="137:9" pos:end="137:20">error_report</name><argument_list pos:start="137:21" pos:end="137:69">(<argument pos:start="137:22" pos:end="137:50"><expr pos:start="137:22" pos:end="137:50"><literal type="string" pos:start="137:22" pos:end="137:50">"could not load palcode '%s'"</literal></expr></argument>, <argument pos:start="137:53" pos:end="137:68"><expr pos:start="137:53" pos:end="137:68"><name pos:start="137:53" pos:end="137:68">palcode_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:16"><expr pos:start="139:9" pos:end="139:15"><call pos:start="139:9" pos:end="139:15"><name pos:start="139:9" pos:end="139:12">exit</name><argument_list pos:start="139:13" pos:end="139:15">(<argument pos:start="139:14" pos:end="139:14"><expr pos:start="139:14" pos:end="139:14"><literal type="number" pos:start="139:14" pos:end="139:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:29"><expr pos:start="143:5" pos:end="143:28"><call pos:start="143:5" pos:end="143:28"><name pos:start="143:5" pos:end="143:10">g_free</name><argument_list pos:start="143:11" pos:end="143:28">(<argument pos:start="143:12" pos:end="143:27"><expr pos:start="143:12" pos:end="143:27"><name pos:start="143:12" pos:end="143:27">palcode_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="147:5" pos:end="147:59">/* Start all cpus at the PALcode RESET entry point.  */</comment>

    <for pos:start="149:5" pos:end="155:5">for <control pos:start="149:9" pos:end="149:34">(<init pos:start="149:10" pos:end="149:15"><expr pos:start="149:10" pos:end="149:14"><name pos:start="149:10" pos:end="149:10">i</name> <operator pos:start="149:12" pos:end="149:12">=</operator> <literal type="number" pos:start="149:14" pos:end="149:14">0</literal></expr>;</init> <condition pos:start="149:17" pos:end="149:29"><expr pos:start="149:17" pos:end="149:28"><name pos:start="149:17" pos:end="149:17">i</name> <operator pos:start="149:19" pos:end="149:19">&lt;</operator> <name pos:start="149:21" pos:end="149:28">smp_cpus</name></expr>;</condition> <incr pos:start="149:31" pos:end="149:33"><expr pos:start="149:31" pos:end="149:33"><operator pos:start="149:31" pos:end="149:32">++</operator><name pos:start="149:33" pos:end="149:33">i</name></expr></incr>)</control> <block pos:start="149:36" pos:end="155:5">{<block_content pos:start="151:9" pos:end="153:43">

        <expr_stmt pos:start="151:9" pos:end="151:40"><expr pos:start="151:9" pos:end="151:39"><name pos:start="151:9" pos:end="151:15"><name pos:start="151:9" pos:end="151:12">cpus</name><index pos:start="151:13" pos:end="151:15">[<expr pos:start="151:14" pos:end="151:14"><name pos:start="151:14" pos:end="151:14">i</name></expr>]</index></name><operator pos:start="151:16" pos:end="151:17">-&gt;</operator><name pos:start="151:18" pos:end="151:23"><name pos:start="151:18" pos:end="151:20">env</name><operator pos:start="151:21" pos:end="151:21">.</operator><name pos:start="151:22" pos:end="151:23">pc</name></name> <operator pos:start="151:25" pos:end="151:25">=</operator> <name pos:start="151:27" pos:end="151:39">palcode_entry</name></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:43"><expr pos:start="153:9" pos:end="153:42"><name pos:start="153:9" pos:end="153:15"><name pos:start="153:9" pos:end="153:12">cpus</name><index pos:start="153:13" pos:end="153:15">[<expr pos:start="153:14" pos:end="153:14"><name pos:start="153:14" pos:end="153:14">i</name></expr>]</index></name><operator pos:start="153:16" pos:end="153:17">-&gt;</operator><name pos:start="153:18" pos:end="153:26"><name pos:start="153:18" pos:end="153:20">env</name><operator pos:start="153:21" pos:end="153:21">.</operator><name pos:start="153:22" pos:end="153:26">palbr</name></name> <operator pos:start="153:28" pos:end="153:28">=</operator> <name pos:start="153:30" pos:end="153:42">palcode_entry</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="159:5" pos:end="159:25">/* Load a kernel.  */</comment>

    <if_stmt pos:start="161:5" pos:end="243:5"><if pos:start="161:5" pos:end="243:5">if <condition pos:start="161:8" pos:end="161:24">(<expr pos:start="161:9" pos:end="161:23"><name pos:start="161:9" pos:end="161:23">kernel_filename</name></expr>)</condition> <block pos:start="161:26" pos:end="243:5">{<block_content pos:start="163:9" pos:end="241:9">

        <decl_stmt pos:start="163:9" pos:end="163:30"><decl pos:start="163:9" pos:end="163:29"><type pos:start="163:9" pos:end="163:16"><name pos:start="163:9" pos:end="163:16">uint64_t</name></type> <name pos:start="163:18" pos:end="163:29">param_offset</name></decl>;</decl_stmt>



        <expr_stmt pos:start="167:9" pos:end="171:43"><expr pos:start="167:9" pos:end="171:42"><name pos:start="167:9" pos:end="167:12">size</name> <operator pos:start="167:14" pos:end="167:14">=</operator> <call pos:start="167:16" pos:end="171:42"><name pos:start="167:16" pos:end="167:23">load_elf</name><argument_list pos:start="167:24" pos:end="171:42">(<argument pos:start="167:25" pos:end="167:39"><expr pos:start="167:25" pos:end="167:39"><name pos:start="167:25" pos:end="167:39">kernel_filename</name></expr></argument>, <argument pos:start="167:42" pos:end="167:68"><expr pos:start="167:42" pos:end="167:68"><name pos:start="167:42" pos:end="167:68">cpu_alpha_superpage_to_phys</name></expr></argument>,

                        <argument pos:start="169:25" pos:end="169:28"><expr pos:start="169:25" pos:end="169:28"><name pos:start="169:25" pos:end="169:28">NULL</name></expr></argument>, <argument pos:start="169:31" pos:end="169:43"><expr pos:start="169:31" pos:end="169:43"><operator pos:start="169:31" pos:end="169:31">&amp;</operator><name pos:start="169:32" pos:end="169:43">kernel_entry</name></expr></argument>, <argument pos:start="169:46" pos:end="169:56"><expr pos:start="169:46" pos:end="169:56"><operator pos:start="169:46" pos:end="169:46">&amp;</operator><name pos:start="169:47" pos:end="169:56">kernel_low</name></expr></argument>, <argument pos:start="169:59" pos:end="169:70"><expr pos:start="169:59" pos:end="169:70"><operator pos:start="169:59" pos:end="169:59">&amp;</operator><name pos:start="169:60" pos:end="169:70">kernel_high</name></expr></argument>,

                        <argument pos:start="171:25" pos:end="171:25"><expr pos:start="171:25" pos:end="171:25"><literal type="number" pos:start="171:25" pos:end="171:25">0</literal></expr></argument>, <argument pos:start="171:28" pos:end="171:35"><expr pos:start="171:28" pos:end="171:35"><name pos:start="171:28" pos:end="171:35">EM_ALPHA</name></expr></argument>, <argument pos:start="171:38" pos:end="171:38"><expr pos:start="171:38" pos:end="171:38"><literal type="number" pos:start="171:38" pos:end="171:38">0</literal></expr></argument>, <argument pos:start="171:41" pos:end="171:41"><expr pos:start="171:41" pos:end="171:41"><literal type="number" pos:start="171:41" pos:end="171:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="173:9" pos:end="179:9"><if pos:start="173:9" pos:end="179:9">if <condition pos:start="173:12" pos:end="173:21">(<expr pos:start="173:13" pos:end="173:20"><name pos:start="173:13" pos:end="173:16">size</name> <operator pos:start="173:18" pos:end="173:18">&lt;</operator> <literal type="number" pos:start="173:20" pos:end="173:20">0</literal></expr>)</condition> <block pos:start="173:23" pos:end="179:9">{<block_content pos:start="175:13" pos:end="177:20">

            <expr_stmt pos:start="175:13" pos:end="175:72"><expr pos:start="175:13" pos:end="175:71"><call pos:start="175:13" pos:end="175:71"><name pos:start="175:13" pos:end="175:24">error_report</name><argument_list pos:start="175:25" pos:end="175:71">(<argument pos:start="175:26" pos:end="175:53"><expr pos:start="175:26" pos:end="175:53"><literal type="string" pos:start="175:26" pos:end="175:53">"could not load kernel '%s'"</literal></expr></argument>, <argument pos:start="175:56" pos:end="175:70"><expr pos:start="175:56" pos:end="175:70"><name pos:start="175:56" pos:end="175:70">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:20"><expr pos:start="177:13" pos:end="177:19"><call pos:start="177:13" pos:end="177:19"><name pos:start="177:13" pos:end="177:16">exit</name><argument_list pos:start="177:17" pos:end="177:19">(<argument pos:start="177:18" pos:end="177:18"><expr pos:start="177:18" pos:end="177:18"><literal type="number" pos:start="177:18" pos:end="177:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="183:9" pos:end="183:46"><expr pos:start="183:9" pos:end="183:45"><name pos:start="183:9" pos:end="183:15"><name pos:start="183:9" pos:end="183:12">cpus</name><index pos:start="183:13" pos:end="183:15">[<expr pos:start="183:14" pos:end="183:14"><literal type="number" pos:start="183:14" pos:end="183:14">0</literal></expr>]</index></name><operator pos:start="183:16" pos:end="183:17">-&gt;</operator><name pos:start="183:18" pos:end="183:30"><name pos:start="183:18" pos:end="183:20">env</name><operator pos:start="183:21" pos:end="183:21">.</operator><name pos:start="183:22" pos:end="183:30">trap_arg1</name></name> <operator pos:start="183:32" pos:end="183:32">=</operator> <name pos:start="183:34" pos:end="183:45">kernel_entry</name></expr>;</expr_stmt>



        <expr_stmt pos:start="187:9" pos:end="187:43"><expr pos:start="187:9" pos:end="187:42"><name pos:start="187:9" pos:end="187:20">param_offset</name> <operator pos:start="187:22" pos:end="187:22">=</operator> <name pos:start="187:24" pos:end="187:33">kernel_low</name> <operator pos:start="187:35" pos:end="187:35">-</operator> <literal type="number" pos:start="187:37" pos:end="187:42">0x6000</literal></expr>;</expr_stmt>



        <if_stmt pos:start="191:9" pos:end="195:9"><if pos:start="191:9" pos:end="195:9">if <condition pos:start="191:12" pos:end="191:27">(<expr pos:start="191:13" pos:end="191:26"><name pos:start="191:13" pos:end="191:26">kernel_cmdline</name></expr>)</condition> <block pos:start="191:29" pos:end="195:9">{<block_content pos:start="193:13" pos:end="193:77">

            <expr_stmt pos:start="193:13" pos:end="193:77"><expr pos:start="193:13" pos:end="193:76"><call pos:start="193:13" pos:end="193:76"><name pos:start="193:13" pos:end="193:28">pstrcpy_targphys</name><argument_list pos:start="193:29" pos:end="193:76">(<argument pos:start="193:30" pos:end="193:38"><expr pos:start="193:30" pos:end="193:38"><literal type="string" pos:start="193:30" pos:end="193:38">"cmdline"</literal></expr></argument>, <argument pos:start="193:41" pos:end="193:52"><expr pos:start="193:41" pos:end="193:52"><name pos:start="193:41" pos:end="193:52">param_offset</name></expr></argument>, <argument pos:start="193:55" pos:end="193:59"><expr pos:start="193:55" pos:end="193:59"><literal type="number" pos:start="193:55" pos:end="193:59">0x100</literal></expr></argument>, <argument pos:start="193:62" pos:end="193:75"><expr pos:start="193:62" pos:end="193:75"><name pos:start="193:62" pos:end="193:75">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="199:9" pos:end="241:9"><if pos:start="199:9" pos:end="241:9">if <condition pos:start="199:12" pos:end="199:28">(<expr pos:start="199:13" pos:end="199:27"><name pos:start="199:13" pos:end="199:27">initrd_filename</name></expr>)</condition> <block pos:start="199:30" pos:end="241:9">{<block_content pos:start="201:13" pos:end="239:73">

            <decl_stmt pos:start="201:13" pos:end="201:42"><decl pos:start="201:13" pos:end="201:28"><type pos:start="201:13" pos:end="201:16"><name pos:start="201:13" pos:end="201:16">long</name></type> <name pos:start="201:18" pos:end="201:28">initrd_base</name></decl>, <decl pos:start="201:31" pos:end="201:41"><type ref="prev" pos:start="201:13" pos:end="201:16"/><name pos:start="201:31" pos:end="201:41">initrd_size</name></decl>;</decl_stmt>



            <expr_stmt pos:start="205:13" pos:end="205:58"><expr pos:start="205:13" pos:end="205:57"><name pos:start="205:13" pos:end="205:23">initrd_size</name> <operator pos:start="205:25" pos:end="205:25">=</operator> <call pos:start="205:27" pos:end="205:57"><name pos:start="205:27" pos:end="205:40">get_image_size</name><argument_list pos:start="205:41" pos:end="205:57">(<argument pos:start="205:42" pos:end="205:56"><expr pos:start="205:42" pos:end="205:56"><name pos:start="205:42" pos:end="205:56">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="207:13" pos:end="215:13"><if pos:start="207:13" pos:end="215:13">if <condition pos:start="207:16" pos:end="207:32">(<expr pos:start="207:17" pos:end="207:31"><name pos:start="207:17" pos:end="207:27">initrd_size</name> <operator pos:start="207:29" pos:end="207:29">&lt;</operator> <literal type="number" pos:start="207:31" pos:end="207:31">0</literal></expr>)</condition> <block pos:start="207:34" pos:end="215:13">{<block_content pos:start="209:17" pos:end="213:24">

                <expr_stmt pos:start="209:17" pos:end="211:46"><expr pos:start="209:17" pos:end="211:45"><call pos:start="209:17" pos:end="211:45"><name pos:start="209:17" pos:end="209:28">error_report</name><argument_list pos:start="209:29" pos:end="211:45">(<argument pos:start="209:30" pos:end="209:67"><expr pos:start="209:30" pos:end="209:67"><literal type="string" pos:start="209:30" pos:end="209:67">"could not load initial ram disk '%s'"</literal></expr></argument>,

                             <argument pos:start="211:30" pos:end="211:44"><expr pos:start="211:30" pos:end="211:44"><name pos:start="211:30" pos:end="211:44">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="213:17" pos:end="213:24"><expr pos:start="213:17" pos:end="213:23"><call pos:start="213:17" pos:end="213:23"><name pos:start="213:17" pos:end="213:20">exit</name><argument_list pos:start="213:21" pos:end="213:23">(<argument pos:start="213:22" pos:end="213:22"><expr pos:start="213:22" pos:end="213:22"><literal type="number" pos:start="213:22" pos:end="213:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="219:13" pos:end="219:70">/* Put the initrd image as high in memory as possible.  */</comment>

            <expr_stmt pos:start="221:13" pos:end="221:70"><expr pos:start="221:13" pos:end="221:69"><name pos:start="221:13" pos:end="221:23">initrd_base</name> <operator pos:start="221:25" pos:end="221:25">=</operator> <operator pos:start="221:27" pos:end="221:27">(</operator><name pos:start="221:28" pos:end="221:35">ram_size</name> <operator pos:start="221:37" pos:end="221:37">-</operator> <name pos:start="221:39" pos:end="221:49">initrd_size</name><operator pos:start="221:50" pos:end="221:50">)</operator> <operator pos:start="221:52" pos:end="221:52">&amp;</operator> <name pos:start="221:54" pos:end="221:69">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="225:56"><expr pos:start="223:13" pos:end="225:55"><call pos:start="223:13" pos:end="225:55"><name pos:start="223:13" pos:end="223:31">load_image_targphys</name><argument_list pos:start="223:32" pos:end="225:55">(<argument pos:start="223:33" pos:end="223:47"><expr pos:start="223:33" pos:end="223:47"><name pos:start="223:33" pos:end="223:47">initrd_filename</name></expr></argument>, <argument pos:start="223:50" pos:end="223:60"><expr pos:start="223:50" pos:end="223:60"><name pos:start="223:50" pos:end="223:60">initrd_base</name></expr></argument>,

                                <argument pos:start="225:33" pos:end="225:54"><expr pos:start="225:33" pos:end="225:54"><name pos:start="225:33" pos:end="225:40">ram_size</name> <operator pos:start="225:42" pos:end="225:42">-</operator> <name pos:start="225:44" pos:end="225:54">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="229:13" pos:end="235:36"><expr pos:start="229:13" pos:end="235:35"><call pos:start="229:13" pos:end="235:35"><name pos:start="229:13" pos:end="229:29">address_space_stq</name><argument_list pos:start="229:30" pos:end="235:35">(<argument pos:start="229:31" pos:end="229:51"><expr pos:start="229:31" pos:end="229:51"><operator pos:start="229:31" pos:end="229:31">&amp;</operator><name pos:start="229:32" pos:end="229:51">address_space_memory</name></expr></argument>, <argument pos:start="229:54" pos:end="229:73"><expr pos:start="229:54" pos:end="229:73"><name pos:start="229:54" pos:end="229:65">param_offset</name> <operator pos:start="229:67" pos:end="229:67">+</operator> <literal type="number" pos:start="229:69" pos:end="229:73">0x100</literal></expr></argument>,

                              <argument pos:start="231:31" pos:end="231:65"><expr pos:start="231:31" pos:end="231:65"><name pos:start="231:31" pos:end="231:41">initrd_base</name> <operator pos:start="231:43" pos:end="231:43">+</operator> <literal type="number" pos:start="231:45" pos:end="231:65">0xfffffc0000000000ULL</literal></expr></argument>,

                              <argument pos:start="233:31" pos:end="233:52"><expr pos:start="233:31" pos:end="233:52"><name pos:start="233:31" pos:end="233:52">MEMTXATTRS_UNSPECIFIED</name></expr></argument>,

                              <argument pos:start="235:31" pos:end="235:34"><expr pos:start="235:31" pos:end="235:34"><name pos:start="235:31" pos:end="235:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="239:73"><expr pos:start="237:13" pos:end="239:72"><call pos:start="237:13" pos:end="239:72"><name pos:start="237:13" pos:end="237:29">address_space_stq</name><argument_list pos:start="237:30" pos:end="239:72">(<argument pos:start="237:31" pos:end="237:51"><expr pos:start="237:31" pos:end="237:51"><operator pos:start="237:31" pos:end="237:31">&amp;</operator><name pos:start="237:32" pos:end="237:51">address_space_memory</name></expr></argument>, <argument pos:start="237:54" pos:end="237:73"><expr pos:start="237:54" pos:end="237:73"><name pos:start="237:54" pos:end="237:65">param_offset</name> <operator pos:start="237:67" pos:end="237:67">+</operator> <literal type="number" pos:start="237:69" pos:end="237:73">0x108</literal></expr></argument>,

                              <argument pos:start="239:31" pos:end="239:41"><expr pos:start="239:31" pos:end="239:41"><name pos:start="239:31" pos:end="239:41">initrd_size</name></expr></argument>, <argument pos:start="239:44" pos:end="239:65"><expr pos:start="239:44" pos:end="239:65"><name pos:start="239:44" pos:end="239:65">MEMTXATTRS_UNSPECIFIED</name></expr></argument>, <argument pos:start="239:68" pos:end="239:71"><expr pos:start="239:68" pos:end="239:71"><name pos:start="239:68" pos:end="239:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
