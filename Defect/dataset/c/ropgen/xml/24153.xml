<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24153.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">tgen64_ori</name><parameter_list pos:start="1:23" pos:end="1:72">(<parameter pos:start="1:24" pos:end="1:36"><decl pos:start="1:24" pos:end="1:36"><type pos:start="1:24" pos:end="1:36"><name pos:start="1:24" pos:end="1:33">TCGContext</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:36">s</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:49"><decl pos:start="1:39" pos:end="1:49"><type pos:start="1:39" pos:end="1:49"><name pos:start="1:39" pos:end="1:44">TCGReg</name></type> <name pos:start="1:46" pos:end="1:49">dest</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:71"><decl pos:start="1:52" pos:end="1:71"><type pos:start="1:52" pos:end="1:71"><name pos:start="1:52" pos:end="1:67">tcg_target_ulong</name></type> <name pos:start="1:69" pos:end="1:71">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:5">

    <decl_stmt pos:start="5:5" pos:end="9:6"><decl pos:start="5:5" pos:end="9:5"><type pos:start="5:5" pos:end="5:27"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <specifier pos:start="5:12" pos:end="5:16">const</specifier> <name pos:start="5:18" pos:end="5:27">S390Opcode</name></type> <name pos:start="5:29" pos:end="5:39"><name pos:start="5:29" pos:end="5:36">oi_insns</name><index pos:start="5:37" pos:end="5:39">[<expr pos:start="5:38" pos:end="5:38"><literal type="number" pos:start="5:38" pos:end="5:38">4</literal></expr>]</index></name> <init pos:start="5:41" pos:end="9:5">= <expr pos:start="5:43" pos:end="9:5"><block pos:start="5:43" pos:end="9:5">{

        <expr pos:start="7:9" pos:end="7:15"><name pos:start="7:9" pos:end="7:15">RI_OILL</name></expr>, <expr pos:start="7:18" pos:end="7:24"><name pos:start="7:18" pos:end="7:24">RI_OILH</name></expr>, <expr pos:start="7:27" pos:end="7:33"><name pos:start="7:27" pos:end="7:33">RI_OIHL</name></expr>, <expr pos:start="7:36" pos:end="7:42"><name pos:start="7:36" pos:end="7:42">RI_OIHH</name></expr>

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="15:6"><decl pos:start="11:5" pos:end="15:5"><type pos:start="11:5" pos:end="11:27"><specifier pos:start="11:5" pos:end="11:10">static</specifier> <specifier pos:start="11:12" pos:end="11:16">const</specifier> <name pos:start="11:18" pos:end="11:27">S390Opcode</name></type> <name pos:start="11:29" pos:end="11:40"><name pos:start="11:29" pos:end="11:37">nif_insns</name><index pos:start="11:38" pos:end="11:40">[<expr pos:start="11:39" pos:end="11:39"><literal type="number" pos:start="11:39" pos:end="11:39">2</literal></expr>]</index></name> <init pos:start="11:42" pos:end="15:5">= <expr pos:start="11:44" pos:end="15:5"><block pos:start="11:44" pos:end="15:5">{

        <expr pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:16">RIL_OILF</name></expr>, <expr pos:start="13:19" pos:end="13:26"><name pos:start="13:19" pos:end="13:26">RIL_OIHF</name></expr>

    }</block></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="19:5" pos:end="19:10"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:26">/* Look for no-op.  */</comment>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:17">(<expr pos:start="25:9" pos:end="25:16"><name pos:start="25:9" pos:end="25:11">val</name> <operator pos:start="25:13" pos:end="25:14">==</operator> <literal type="number" pos:start="25:16" pos:end="25:16">0</literal></expr>)</condition> <block pos:start="25:19" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:15">

        <return pos:start="27:9" pos:end="27:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="99:5"><if pos:start="33:5" pos:end="81:5">if <condition pos:start="33:8" pos:end="33:38">(<expr pos:start="33:9" pos:end="33:37"><name pos:start="33:9" pos:end="33:18">facilities</name> <operator pos:start="33:20" pos:end="33:20">&amp;</operator> <name pos:start="33:22" pos:end="33:37">FACILITY_EXT_IMM</name></expr>)</condition> <block pos:start="33:40" pos:end="81:5">{<block_content pos:start="37:9" pos:end="79:57">

        <comment type="block" pos:start="35:9" pos:end="35:66">/* Try all 32-bit insns that can perform it in one go.  */</comment>

        <for pos:start="37:9" pos:end="49:9">for <control pos:start="37:13" pos:end="37:31">(<init pos:start="37:14" pos:end="37:19"><expr pos:start="37:14" pos:end="37:18"><name pos:start="37:14" pos:end="37:14">i</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <literal type="number" pos:start="37:18" pos:end="37:18">0</literal></expr>;</init> <condition pos:start="37:21" pos:end="37:26"><expr pos:start="37:21" pos:end="37:25"><name pos:start="37:21" pos:end="37:21">i</name> <operator pos:start="37:23" pos:end="37:23">&lt;</operator> <literal type="number" pos:start="37:25" pos:end="37:25">4</literal></expr>;</condition> <incr pos:start="37:28" pos:end="37:30"><expr pos:start="37:28" pos:end="37:30"><name pos:start="37:28" pos:end="37:28">i</name><operator pos:start="37:29" pos:end="37:30">++</operator></expr></incr>)</control> <block pos:start="37:33" pos:end="49:9">{<block_content pos:start="39:13" pos:end="47:13">

            <decl_stmt pos:start="39:13" pos:end="39:56"><decl pos:start="39:13" pos:end="39:55"><type pos:start="39:13" pos:end="39:28"><name pos:start="39:13" pos:end="39:28">tcg_target_ulong</name></type> <name pos:start="39:30" pos:end="39:33">mask</name> <init pos:start="39:35" pos:end="39:55">= <expr pos:start="39:37" pos:end="39:55"><operator pos:start="39:37" pos:end="39:37">(</operator><literal type="number" pos:start="39:38" pos:end="39:46">0xffffull</literal> <operator pos:start="39:48" pos:end="39:49">&lt;&lt;</operator> <name pos:start="39:51" pos:end="39:51">i</name><operator pos:start="39:52" pos:end="39:52">*</operator><literal type="number" pos:start="39:53" pos:end="39:54">16</literal><operator pos:start="39:55" pos:end="39:55">)</operator></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="41:13" pos:end="47:13"><if pos:start="41:13" pos:end="47:13">if <condition pos:start="41:16" pos:end="41:56">(<expr pos:start="41:17" pos:end="41:55"><operator pos:start="41:17" pos:end="41:17">(</operator><name pos:start="41:18" pos:end="41:20">val</name> <operator pos:start="41:22" pos:end="41:22">&amp;</operator> <name pos:start="41:24" pos:end="41:27">mask</name><operator pos:start="41:28" pos:end="41:28">)</operator> <operator pos:start="41:30" pos:end="41:31">!=</operator> <literal type="number" pos:start="41:33" pos:end="41:33">0</literal> <operator pos:start="41:35" pos:end="41:36">&amp;&amp;</operator> <operator pos:start="41:38" pos:end="41:38">(</operator><name pos:start="41:39" pos:end="41:41">val</name> <operator pos:start="41:43" pos:end="41:43">&amp;</operator> <operator pos:start="41:45" pos:end="41:45">~</operator><name pos:start="41:46" pos:end="41:49">mask</name><operator pos:start="41:50" pos:end="41:50">)</operator> <operator pos:start="41:52" pos:end="41:53">==</operator> <literal type="number" pos:start="41:55" pos:end="41:55">0</literal></expr>)</condition> <block pos:start="41:58" pos:end="47:13">{<block_content pos:start="43:17" pos:end="45:23">

                <expr_stmt pos:start="43:17" pos:end="43:67"><expr pos:start="43:17" pos:end="43:66"><call pos:start="43:17" pos:end="43:66"><name pos:start="43:17" pos:end="43:31">tcg_out_insn_RI</name><argument_list pos:start="43:32" pos:end="43:66">(<argument pos:start="43:33" pos:end="43:33"><expr pos:start="43:33" pos:end="43:33"><name pos:start="43:33" pos:end="43:33">s</name></expr></argument>, <argument pos:start="43:36" pos:end="43:46"><expr pos:start="43:36" pos:end="43:46"><name pos:start="43:36" pos:end="43:46"><name pos:start="43:36" pos:end="43:43">oi_insns</name><index pos:start="43:44" pos:end="43:46">[<expr pos:start="43:45" pos:end="43:45"><name pos:start="43:45" pos:end="43:45">i</name></expr>]</index></name></expr></argument>, <argument pos:start="43:49" pos:end="43:52"><expr pos:start="43:49" pos:end="43:52"><name pos:start="43:49" pos:end="43:52">dest</name></expr></argument>, <argument pos:start="43:55" pos:end="43:65"><expr pos:start="43:55" pos:end="43:65"><name pos:start="43:55" pos:end="43:57">val</name> <operator pos:start="43:59" pos:end="43:60">&gt;&gt;</operator> <name pos:start="43:62" pos:end="43:62">i</name><operator pos:start="43:63" pos:end="43:63">*</operator><literal type="number" pos:start="43:64" pos:end="43:65">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="45:17" pos:end="45:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="53:9" pos:end="53:66">/* Try all 48-bit insns that can perform it in one go.  */</comment>

        <for pos:start="55:9" pos:end="67:9">for <control pos:start="55:13" pos:end="55:31">(<init pos:start="55:14" pos:end="55:19"><expr pos:start="55:14" pos:end="55:18"><name pos:start="55:14" pos:end="55:14">i</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <literal type="number" pos:start="55:18" pos:end="55:18">0</literal></expr>;</init> <condition pos:start="55:21" pos:end="55:26"><expr pos:start="55:21" pos:end="55:25"><name pos:start="55:21" pos:end="55:21">i</name> <operator pos:start="55:23" pos:end="55:23">&lt;</operator> <literal type="number" pos:start="55:25" pos:end="55:25">2</literal></expr>;</condition> <incr pos:start="55:28" pos:end="55:30"><expr pos:start="55:28" pos:end="55:30"><name pos:start="55:28" pos:end="55:28">i</name><operator pos:start="55:29" pos:end="55:30">++</operator></expr></incr>)</control> <block pos:start="55:33" pos:end="67:9">{<block_content pos:start="57:13" pos:end="65:13">

            <decl_stmt pos:start="57:13" pos:end="57:60"><decl pos:start="57:13" pos:end="57:59"><type pos:start="57:13" pos:end="57:28"><name pos:start="57:13" pos:end="57:28">tcg_target_ulong</name></type> <name pos:start="57:30" pos:end="57:33">mask</name> <init pos:start="57:35" pos:end="57:59">= <expr pos:start="57:37" pos:end="57:59"><operator pos:start="57:37" pos:end="57:37">(</operator><literal type="number" pos:start="57:38" pos:end="57:50">0xffffffffull</literal> <operator pos:start="57:52" pos:end="57:53">&lt;&lt;</operator> <name pos:start="57:55" pos:end="57:55">i</name><operator pos:start="57:56" pos:end="57:56">*</operator><literal type="number" pos:start="57:57" pos:end="57:58">32</literal><operator pos:start="57:59" pos:end="57:59">)</operator></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="59:13" pos:end="65:13"><if pos:start="59:13" pos:end="65:13">if <condition pos:start="59:16" pos:end="59:56">(<expr pos:start="59:17" pos:end="59:55"><operator pos:start="59:17" pos:end="59:17">(</operator><name pos:start="59:18" pos:end="59:20">val</name> <operator pos:start="59:22" pos:end="59:22">&amp;</operator> <name pos:start="59:24" pos:end="59:27">mask</name><operator pos:start="59:28" pos:end="59:28">)</operator> <operator pos:start="59:30" pos:end="59:31">!=</operator> <literal type="number" pos:start="59:33" pos:end="59:33">0</literal> <operator pos:start="59:35" pos:end="59:36">&amp;&amp;</operator> <operator pos:start="59:38" pos:end="59:38">(</operator><name pos:start="59:39" pos:end="59:41">val</name> <operator pos:start="59:43" pos:end="59:43">&amp;</operator> <operator pos:start="59:45" pos:end="59:45">~</operator><name pos:start="59:46" pos:end="59:49">mask</name><operator pos:start="59:50" pos:end="59:50">)</operator> <operator pos:start="59:52" pos:end="59:53">==</operator> <literal type="number" pos:start="59:55" pos:end="59:55">0</literal></expr>)</condition> <block pos:start="59:58" pos:end="65:13">{<block_content pos:start="61:17" pos:end="63:23">

                <expr_stmt pos:start="61:17" pos:end="61:69"><expr pos:start="61:17" pos:end="61:68"><call pos:start="61:17" pos:end="61:68"><name pos:start="61:17" pos:end="61:32">tcg_out_insn_RIL</name><argument_list pos:start="61:33" pos:end="61:68">(<argument pos:start="61:34" pos:end="61:34"><expr pos:start="61:34" pos:end="61:34"><name pos:start="61:34" pos:end="61:34">s</name></expr></argument>, <argument pos:start="61:37" pos:end="61:48"><expr pos:start="61:37" pos:end="61:48"><name pos:start="61:37" pos:end="61:48"><name pos:start="61:37" pos:end="61:45">nif_insns</name><index pos:start="61:46" pos:end="61:48">[<expr pos:start="61:47" pos:end="61:47"><name pos:start="61:47" pos:end="61:47">i</name></expr>]</index></name></expr></argument>, <argument pos:start="61:51" pos:end="61:54"><expr pos:start="61:51" pos:end="61:54"><name pos:start="61:51" pos:end="61:54">dest</name></expr></argument>, <argument pos:start="61:57" pos:end="61:67"><expr pos:start="61:57" pos:end="61:67"><name pos:start="61:57" pos:end="61:59">val</name> <operator pos:start="61:61" pos:end="61:62">&gt;&gt;</operator> <name pos:start="61:64" pos:end="61:64">i</name><operator pos:start="61:65" pos:end="61:65">*</operator><literal type="number" pos:start="61:66" pos:end="61:67">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="63:17" pos:end="63:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="71:9" pos:end="75:34">/* Perform the OR via sequential modifications to the high and

           low parts.  Do this via recursion to handle 16-bit vs 32-bit

           masks in each half.  */</comment>

        <expr_stmt pos:start="77:9" pos:end="77:57"><expr pos:start="77:9" pos:end="77:56"><call pos:start="77:9" pos:end="77:56"><name pos:start="77:9" pos:end="77:18">tgen64_ori</name><argument_list pos:start="77:19" pos:end="77:56">(<argument pos:start="77:20" pos:end="77:20"><expr pos:start="77:20" pos:end="77:20"><name pos:start="77:20" pos:end="77:20">s</name></expr></argument>, <argument pos:start="77:23" pos:end="77:26"><expr pos:start="77:23" pos:end="77:26"><name pos:start="77:23" pos:end="77:26">dest</name></expr></argument>, <argument pos:start="77:29" pos:end="77:55"><expr pos:start="77:29" pos:end="77:55"><name pos:start="77:29" pos:end="77:31">val</name> <operator pos:start="77:33" pos:end="77:33">&amp;</operator> <literal type="number" pos:start="77:35" pos:end="77:55">0x00000000ffffffffull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:57"><expr pos:start="79:9" pos:end="79:56"><call pos:start="79:9" pos:end="79:56"><name pos:start="79:9" pos:end="79:18">tgen64_ori</name><argument_list pos:start="79:19" pos:end="79:56">(<argument pos:start="79:20" pos:end="79:20"><expr pos:start="79:20" pos:end="79:20"><name pos:start="79:20" pos:end="79:20">s</name></expr></argument>, <argument pos:start="79:23" pos:end="79:26"><expr pos:start="79:23" pos:end="79:26"><name pos:start="79:23" pos:end="79:26">dest</name></expr></argument>, <argument pos:start="79:29" pos:end="79:55"><expr pos:start="79:29" pos:end="79:55"><name pos:start="79:29" pos:end="79:31">val</name> <operator pos:start="79:33" pos:end="79:33">&amp;</operator> <literal type="number" pos:start="79:35" pos:end="79:55">0xffffffff00000000ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="81:7" pos:end="99:5">else <block pos:start="81:12" pos:end="99:5">{<block_content pos:start="87:9" pos:end="97:9">

        <comment type="block" pos:start="83:9" pos:end="85:77">/* With no extended-immediate facility, we don't need to be so

           clever.  Just iterate over the insns and mask in the constant.  */</comment>

        <for pos:start="87:9" pos:end="97:9">for <control pos:start="87:13" pos:end="87:31">(<init pos:start="87:14" pos:end="87:19"><expr pos:start="87:14" pos:end="87:18"><name pos:start="87:14" pos:end="87:14">i</name> <operator pos:start="87:16" pos:end="87:16">=</operator> <literal type="number" pos:start="87:18" pos:end="87:18">0</literal></expr>;</init> <condition pos:start="87:21" pos:end="87:26"><expr pos:start="87:21" pos:end="87:25"><name pos:start="87:21" pos:end="87:21">i</name> <operator pos:start="87:23" pos:end="87:23">&lt;</operator> <literal type="number" pos:start="87:25" pos:end="87:25">4</literal></expr>;</condition> <incr pos:start="87:28" pos:end="87:30"><expr pos:start="87:28" pos:end="87:30"><name pos:start="87:28" pos:end="87:28">i</name><operator pos:start="87:29" pos:end="87:30">++</operator></expr></incr>)</control> <block pos:start="87:33" pos:end="97:9">{<block_content pos:start="89:13" pos:end="95:13">

            <decl_stmt pos:start="89:13" pos:end="89:56"><decl pos:start="89:13" pos:end="89:55"><type pos:start="89:13" pos:end="89:28"><name pos:start="89:13" pos:end="89:28">tcg_target_ulong</name></type> <name pos:start="89:30" pos:end="89:33">mask</name> <init pos:start="89:35" pos:end="89:55">= <expr pos:start="89:37" pos:end="89:55"><operator pos:start="89:37" pos:end="89:37">(</operator><literal type="number" pos:start="89:38" pos:end="89:46">0xffffull</literal> <operator pos:start="89:48" pos:end="89:49">&lt;&lt;</operator> <name pos:start="89:51" pos:end="89:51">i</name><operator pos:start="89:52" pos:end="89:52">*</operator><literal type="number" pos:start="89:53" pos:end="89:54">16</literal><operator pos:start="89:55" pos:end="89:55">)</operator></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="91:13" pos:end="95:13"><if pos:start="91:13" pos:end="95:13">if <condition pos:start="91:16" pos:end="91:34">(<expr pos:start="91:17" pos:end="91:33"><operator pos:start="91:17" pos:end="91:17">(</operator><name pos:start="91:18" pos:end="91:20">val</name> <operator pos:start="91:22" pos:end="91:22">&amp;</operator> <name pos:start="91:24" pos:end="91:27">mask</name><operator pos:start="91:28" pos:end="91:28">)</operator> <operator pos:start="91:30" pos:end="91:31">!=</operator> <literal type="number" pos:start="91:33" pos:end="91:33">0</literal></expr>)</condition> <block pos:start="91:36" pos:end="95:13">{<block_content pos:start="93:17" pos:end="93:67">

                <expr_stmt pos:start="93:17" pos:end="93:67"><expr pos:start="93:17" pos:end="93:66"><call pos:start="93:17" pos:end="93:66"><name pos:start="93:17" pos:end="93:31">tcg_out_insn_RI</name><argument_list pos:start="93:32" pos:end="93:66">(<argument pos:start="93:33" pos:end="93:33"><expr pos:start="93:33" pos:end="93:33"><name pos:start="93:33" pos:end="93:33">s</name></expr></argument>, <argument pos:start="93:36" pos:end="93:46"><expr pos:start="93:36" pos:end="93:46"><name pos:start="93:36" pos:end="93:46"><name pos:start="93:36" pos:end="93:43">oi_insns</name><index pos:start="93:44" pos:end="93:46">[<expr pos:start="93:45" pos:end="93:45"><name pos:start="93:45" pos:end="93:45">i</name></expr>]</index></name></expr></argument>, <argument pos:start="93:49" pos:end="93:52"><expr pos:start="93:49" pos:end="93:52"><name pos:start="93:49" pos:end="93:52">dest</name></expr></argument>, <argument pos:start="93:55" pos:end="93:65"><expr pos:start="93:55" pos:end="93:65"><name pos:start="93:55" pos:end="93:57">val</name> <operator pos:start="93:59" pos:end="93:60">&gt;&gt;</operator> <name pos:start="93:62" pos:end="93:62">i</name><operator pos:start="93:63" pos:end="93:63">*</operator><literal type="number" pos:start="93:64" pos:end="93:65">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
