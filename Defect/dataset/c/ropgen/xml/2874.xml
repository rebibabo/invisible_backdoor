<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2874.c" pos:tabs="8"><function pos:start="1:1" pos:end="7231:1"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">target_ulong</name></type> <name pos:start="1:21" pos:end="1:30">disas_insn</name><parameter_list pos:start="1:31" pos:end="3:53">(<parameter pos:start="1:32" pos:end="1:47"><decl pos:start="1:32" pos:end="1:47"><type pos:start="1:32" pos:end="1:47"><name pos:start="1:32" pos:end="1:42">CPUX86State</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">env</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:64"><decl pos:start="1:50" pos:end="1:64"><type pos:start="1:50" pos:end="1:64"><name pos:start="1:50" pos:end="1:61">DisasContext</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:64">s</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:52"><decl pos:start="3:32" pos:end="3:52"><type pos:start="3:32" pos:end="3:52"><name pos:start="3:32" pos:end="3:43">target_ulong</name></type> <name pos:start="3:45" pos:end="3:52">pc_start</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="7231:1">{<block_content pos:start="7:5" pos:end="7229:17">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">b</name></decl>, <decl pos:start="7:12" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:19">prefixes</name></decl>, <decl pos:start="7:22" pos:end="7:26"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:22" pos:end="7:26">aflag</name></decl>, <decl pos:start="7:29" pos:end="7:33"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:29" pos:end="7:33">dflag</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">shift</name></decl>, <decl pos:start="9:16" pos:end="9:17"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:16" pos:end="9:17">ot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:67"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13">modrm</name></decl>, <decl pos:start="11:16" pos:end="11:18"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:16" pos:end="11:18">reg</name></decl>, <decl pos:start="11:21" pos:end="11:22"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:21" pos:end="11:22">rm</name></decl>, <decl pos:start="11:25" pos:end="11:27"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:25" pos:end="11:27">mod</name></decl>, <decl pos:start="11:30" pos:end="11:37"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:30" pos:end="11:37">reg_addr</name></decl>, <decl pos:start="11:40" pos:end="11:41"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:40" pos:end="11:41">op</name></decl>, <decl pos:start="11:44" pos:end="11:48"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:44" pos:end="11:48">opreg</name></decl>, <decl pos:start="11:51" pos:end="11:61"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:51" pos:end="11:61">offset_addr</name></decl>, <decl pos:start="11:64" pos:end="11:66"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:64" pos:end="11:66">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">target_ulong</name></type> <name pos:start="13:18" pos:end="13:25">next_eip</name></decl>, <decl pos:start="13:28" pos:end="13:31"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:28" pos:end="13:31">tval</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:13">rex_w</name></decl>, <decl pos:start="15:16" pos:end="15:20"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:16" pos:end="15:20">rex_r</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:72">(<expr pos:start="19:9" pos:end="19:71"><call pos:start="19:9" pos:end="19:71"><name pos:start="19:9" pos:end="19:16">unlikely</name><argument_list pos:start="19:17" pos:end="19:71">(<argument pos:start="19:18" pos:end="19:70"><expr pos:start="19:18" pos:end="19:70"><call pos:start="19:18" pos:end="19:70"><name pos:start="19:18" pos:end="19:35">qemu_loglevel_mask</name><argument_list pos:start="19:36" pos:end="19:70">(<argument pos:start="19:37" pos:end="19:69"><expr pos:start="19:37" pos:end="19:69"><name pos:start="19:37" pos:end="19:49">CPU_LOG_TB_OP</name> <operator pos:start="19:51" pos:end="19:51">|</operator> <name pos:start="19:53" pos:end="19:69">CPU_LOG_TB_OP_OPT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:74" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:43">

        <expr_stmt pos:start="21:9" pos:end="21:43"><expr pos:start="21:9" pos:end="21:42"><call pos:start="21:9" pos:end="21:42"><name pos:start="21:9" pos:end="21:32">tcg_gen_debug_insn_start</name><argument_list pos:start="21:33" pos:end="21:42">(<argument pos:start="21:34" pos:end="21:41"><expr pos:start="21:34" pos:end="21:41"><name pos:start="21:34" pos:end="21:41">pc_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:21"><expr pos:start="25:5" pos:end="25:20"><name pos:start="25:5" pos:end="25:9"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:9">pc</name></name> <operator pos:start="25:11" pos:end="25:11">=</operator> <name pos:start="25:13" pos:end="25:20">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:17"><expr pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:12">prefixes</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <literal type="number" pos:start="27:16" pos:end="27:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:22"><expr pos:start="29:5" pos:end="29:21"><name pos:start="29:5" pos:end="29:9">aflag</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <name pos:start="29:13" pos:end="29:21"><name pos:start="29:13" pos:end="29:13">s</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:21">code32</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:22"><expr pos:start="31:5" pos:end="31:21"><name pos:start="31:5" pos:end="31:9">dflag</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <name pos:start="31:13" pos:end="31:21"><name pos:start="31:13" pos:end="31:13">s</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:21">code32</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:21"><expr pos:start="33:5" pos:end="33:20"><name pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:15">override</name></name> <operator pos:start="33:17" pos:end="33:17">=</operator> <operator pos:start="33:19" pos:end="33:19">-</operator><literal type="number" pos:start="33:20" pos:end="33:20">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:15"><expr pos:start="35:5" pos:end="35:14"><name pos:start="35:5" pos:end="35:9">rex_w</name> <operator pos:start="35:11" pos:end="35:11">=</operator> <operator pos:start="35:13" pos:end="35:13">-</operator><literal type="number" pos:start="35:14" pos:end="35:14">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="40:0"><expr pos:start="37:5" pos:end="37:13"><name pos:start="37:5" pos:end="37:9">rex_r</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <literal type="number" pos:start="37:13" pos:end="37:13">0</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="39:1" pos:end="39:20">#<cpp:directive pos:start="39:2" pos:end="39:6">ifdef</cpp:directive> <name pos:start="39:8" pos:end="39:20">TARGET_X86_64</name></cpp:ifdef>

    <expr_stmt pos:start="41:5" pos:end="41:17"><expr pos:start="41:5" pos:end="41:16"><name pos:start="41:5" pos:end="41:12"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:12">rex_x</name></name> <operator pos:start="41:14" pos:end="41:14">=</operator> <literal type="number" pos:start="41:16" pos:end="41:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:17"><expr pos:start="43:5" pos:end="43:16"><name pos:start="43:5" pos:end="43:12"><name pos:start="43:5" pos:end="43:5">s</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:12">rex_b</name></name> <operator pos:start="43:14" pos:end="43:14">=</operator> <literal type="number" pos:start="43:16" pos:end="43:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="48:0"><expr pos:start="45:5" pos:end="45:20"><name pos:start="45:5" pos:end="45:16">x86_64_hregs</name> <operator pos:start="45:18" pos:end="45:18">=</operator> <literal type="number" pos:start="45:20" pos:end="45:20">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="47:1" pos:end="47:6">#<cpp:directive pos:start="47:2" pos:end="47:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="49:5" pos:end="49:22"><expr pos:start="49:5" pos:end="49:21"><name pos:start="49:5" pos:end="49:17"><name pos:start="49:5" pos:end="49:5">s</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:17">rip_offset</name></name> <operator pos:start="49:19" pos:end="49:19">=</operator> <literal type="number" pos:start="49:21" pos:end="49:21">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="49:24" pos:end="49:52">/* for relative ip address */</comment>

 <label pos:start="51:2" pos:end="51:11"><name pos:start="51:2" pos:end="51:10">next_byte</name>:</label>

    <expr_stmt pos:start="53:5" pos:end="53:34"><expr pos:start="53:5" pos:end="53:33"><name pos:start="53:5" pos:end="53:5">b</name> <operator pos:start="53:7" pos:end="53:7">=</operator> <call pos:start="53:9" pos:end="53:33"><name pos:start="53:9" pos:end="53:21">cpu_ldub_code</name><argument_list pos:start="53:22" pos:end="53:33">(<argument pos:start="53:23" pos:end="53:25"><expr pos:start="53:23" pos:end="53:25"><name pos:start="53:23" pos:end="53:25">env</name></expr></argument>, <argument pos:start="53:28" pos:end="53:32"><expr pos:start="53:28" pos:end="53:32"><name pos:start="53:28" pos:end="53:32"><name pos:start="53:28" pos:end="53:28">s</name><operator pos:start="53:29" pos:end="53:30">-&gt;</operator><name pos:start="53:31" pos:end="53:32">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="60:0"><expr pos:start="55:5" pos:end="55:11"><name pos:start="55:5" pos:end="55:9"><name pos:start="55:5" pos:end="55:5">s</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:9">pc</name></name><operator pos:start="55:10" pos:end="55:11">++</operator></expr>;</expr_stmt>

    <comment type="block" pos:start="57:5" pos:end="57:24">/* check prefixes */</comment>

<cpp:ifdef pos:start="59:1" pos:end="59:20">#<cpp:directive pos:start="59:2" pos:end="59:6">ifdef</cpp:directive> <name pos:start="59:8" pos:end="59:20">TARGET_X86_64</name></cpp:ifdef>

    <if_stmt pos:start="61:5" pos:end="251:5"><if pos:start="61:5" pos:end="167:5">if <condition pos:start="61:8" pos:end="61:18">(<expr pos:start="61:9" pos:end="61:17"><call pos:start="61:9" pos:end="61:17"><name pos:start="61:9" pos:end="61:14">CODE64</name><argument_list pos:start="61:15" pos:end="61:17">(<argument pos:start="61:16" pos:end="61:16"><expr pos:start="61:16" pos:end="61:16"><name pos:start="61:16" pos:end="61:16">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:20" pos:end="167:5">{<block_content pos:start="63:9" pos:end="165:22">

        <switch pos:start="63:9" pos:end="147:9">switch <condition pos:start="63:16" pos:end="63:18">(<expr pos:start="63:17" pos:end="63:17"><name pos:start="63:17" pos:end="63:17">b</name></expr>)</condition> <block pos:start="63:20" pos:end="147:9">{<block_content pos:start="65:9" pos:end="145:27">

        <case pos:start="65:9" pos:end="65:18">case <expr pos:start="65:14" pos:end="65:17"><literal type="number" pos:start="65:14" pos:end="65:17">0xf3</literal></expr>:</case>

            <expr_stmt pos:start="67:13" pos:end="67:36"><expr pos:start="67:13" pos:end="67:35"><name pos:start="67:13" pos:end="67:20">prefixes</name> <operator pos:start="67:22" pos:end="67:23">|=</operator> <name pos:start="67:25" pos:end="67:35">PREFIX_REPZ</name></expr>;</expr_stmt>

            <goto pos:start="69:13" pos:end="69:27">goto <name pos:start="69:18" pos:end="69:26">next_byte</name>;</goto>

        <case pos:start="71:9" pos:end="71:18">case <expr pos:start="71:14" pos:end="71:17"><literal type="number" pos:start="71:14" pos:end="71:17">0xf2</literal></expr>:</case>

            <expr_stmt pos:start="73:13" pos:end="73:37"><expr pos:start="73:13" pos:end="73:36"><name pos:start="73:13" pos:end="73:20">prefixes</name> <operator pos:start="73:22" pos:end="73:23">|=</operator> <name pos:start="73:25" pos:end="73:36">PREFIX_REPNZ</name></expr>;</expr_stmt>

            <goto pos:start="75:13" pos:end="75:27">goto <name pos:start="75:18" pos:end="75:26">next_byte</name>;</goto>

        <case pos:start="77:9" pos:end="77:18">case <expr pos:start="77:14" pos:end="77:17"><literal type="number" pos:start="77:14" pos:end="77:17">0xf0</literal></expr>:</case>

            <expr_stmt pos:start="79:13" pos:end="79:36"><expr pos:start="79:13" pos:end="79:35"><name pos:start="79:13" pos:end="79:20">prefixes</name> <operator pos:start="79:22" pos:end="79:23">|=</operator> <name pos:start="79:25" pos:end="79:35">PREFIX_LOCK</name></expr>;</expr_stmt>

            <goto pos:start="81:13" pos:end="81:27">goto <name pos:start="81:18" pos:end="81:26">next_byte</name>;</goto>

        <case pos:start="83:9" pos:end="83:18">case <expr pos:start="83:14" pos:end="83:17"><literal type="number" pos:start="83:14" pos:end="83:17">0x2e</literal></expr>:</case>

            <expr_stmt pos:start="85:13" pos:end="85:31"><expr pos:start="85:13" pos:end="85:30"><name pos:start="85:13" pos:end="85:23"><name pos:start="85:13" pos:end="85:13">s</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:23">override</name></name> <operator pos:start="85:25" pos:end="85:25">=</operator> <name pos:start="85:27" pos:end="85:30">R_CS</name></expr>;</expr_stmt>

            <goto pos:start="87:13" pos:end="87:27">goto <name pos:start="87:18" pos:end="87:26">next_byte</name>;</goto>

        <case pos:start="89:9" pos:end="89:18">case <expr pos:start="89:14" pos:end="89:17"><literal type="number" pos:start="89:14" pos:end="89:17">0x36</literal></expr>:</case>

            <expr_stmt pos:start="91:13" pos:end="91:31"><expr pos:start="91:13" pos:end="91:30"><name pos:start="91:13" pos:end="91:23"><name pos:start="91:13" pos:end="91:13">s</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:23">override</name></name> <operator pos:start="91:25" pos:end="91:25">=</operator> <name pos:start="91:27" pos:end="91:30">R_SS</name></expr>;</expr_stmt>

            <goto pos:start="93:13" pos:end="93:27">goto <name pos:start="93:18" pos:end="93:26">next_byte</name>;</goto>

        <case pos:start="95:9" pos:end="95:18">case <expr pos:start="95:14" pos:end="95:17"><literal type="number" pos:start="95:14" pos:end="95:17">0x3e</literal></expr>:</case>

            <expr_stmt pos:start="97:13" pos:end="97:31"><expr pos:start="97:13" pos:end="97:30"><name pos:start="97:13" pos:end="97:23"><name pos:start="97:13" pos:end="97:13">s</name><operator pos:start="97:14" pos:end="97:15">-&gt;</operator><name pos:start="97:16" pos:end="97:23">override</name></name> <operator pos:start="97:25" pos:end="97:25">=</operator> <name pos:start="97:27" pos:end="97:30">R_DS</name></expr>;</expr_stmt>

            <goto pos:start="99:13" pos:end="99:27">goto <name pos:start="99:18" pos:end="99:26">next_byte</name>;</goto>

        <case pos:start="101:9" pos:end="101:18">case <expr pos:start="101:14" pos:end="101:17"><literal type="number" pos:start="101:14" pos:end="101:17">0x26</literal></expr>:</case>

            <expr_stmt pos:start="103:13" pos:end="103:31"><expr pos:start="103:13" pos:end="103:30"><name pos:start="103:13" pos:end="103:23"><name pos:start="103:13" pos:end="103:13">s</name><operator pos:start="103:14" pos:end="103:15">-&gt;</operator><name pos:start="103:16" pos:end="103:23">override</name></name> <operator pos:start="103:25" pos:end="103:25">=</operator> <name pos:start="103:27" pos:end="103:30">R_ES</name></expr>;</expr_stmt>

            <goto pos:start="105:13" pos:end="105:27">goto <name pos:start="105:18" pos:end="105:26">next_byte</name>;</goto>

        <case pos:start="107:9" pos:end="107:18">case <expr pos:start="107:14" pos:end="107:17"><literal type="number" pos:start="107:14" pos:end="107:17">0x64</literal></expr>:</case>

            <expr_stmt pos:start="109:13" pos:end="109:31"><expr pos:start="109:13" pos:end="109:30"><name pos:start="109:13" pos:end="109:23"><name pos:start="109:13" pos:end="109:13">s</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:23">override</name></name> <operator pos:start="109:25" pos:end="109:25">=</operator> <name pos:start="109:27" pos:end="109:30">R_FS</name></expr>;</expr_stmt>

            <goto pos:start="111:13" pos:end="111:27">goto <name pos:start="111:18" pos:end="111:26">next_byte</name>;</goto>

        <case pos:start="113:9" pos:end="113:18">case <expr pos:start="113:14" pos:end="113:17"><literal type="number" pos:start="113:14" pos:end="113:17">0x65</literal></expr>:</case>

            <expr_stmt pos:start="115:13" pos:end="115:31"><expr pos:start="115:13" pos:end="115:30"><name pos:start="115:13" pos:end="115:23"><name pos:start="115:13" pos:end="115:13">s</name><operator pos:start="115:14" pos:end="115:15">-&gt;</operator><name pos:start="115:16" pos:end="115:23">override</name></name> <operator pos:start="115:25" pos:end="115:25">=</operator> <name pos:start="115:27" pos:end="115:30">R_GS</name></expr>;</expr_stmt>

            <goto pos:start="117:13" pos:end="117:27">goto <name pos:start="117:18" pos:end="117:26">next_byte</name>;</goto>

        <case pos:start="119:9" pos:end="119:18">case <expr pos:start="119:14" pos:end="119:17"><literal type="number" pos:start="119:14" pos:end="119:17">0x66</literal></expr>:</case>

            <expr_stmt pos:start="121:13" pos:end="121:36"><expr pos:start="121:13" pos:end="121:35"><name pos:start="121:13" pos:end="121:20">prefixes</name> <operator pos:start="121:22" pos:end="121:23">|=</operator> <name pos:start="121:25" pos:end="121:35">PREFIX_DATA</name></expr>;</expr_stmt>

            <goto pos:start="123:13" pos:end="123:27">goto <name pos:start="123:18" pos:end="123:26">next_byte</name>;</goto>

        <case pos:start="125:9" pos:end="125:18">case <expr pos:start="125:14" pos:end="125:17"><literal type="number" pos:start="125:14" pos:end="125:17">0x67</literal></expr>:</case>

            <expr_stmt pos:start="127:13" pos:end="127:35"><expr pos:start="127:13" pos:end="127:34"><name pos:start="127:13" pos:end="127:20">prefixes</name> <operator pos:start="127:22" pos:end="127:23">|=</operator> <name pos:start="127:25" pos:end="127:34">PREFIX_ADR</name></expr>;</expr_stmt>

            <goto pos:start="129:13" pos:end="129:27">goto <name pos:start="129:18" pos:end="129:26">next_byte</name>;</goto>

        <case pos:start="131:9" pos:end="131:27">case <expr pos:start="131:14" pos:end="131:26"><literal type="number" pos:start="131:14" pos:end="131:17">0x40</literal> <operator pos:start="131:19" pos:end="131:21">...</operator> <literal type="number" pos:start="131:23" pos:end="131:26">0x4f</literal></expr>:</case>

            <comment type="block" pos:start="133:13" pos:end="133:28">/* REX prefix */</comment>

            <expr_stmt pos:start="135:13" pos:end="135:33"><expr pos:start="135:13" pos:end="135:32"><name pos:start="135:13" pos:end="135:17">rex_w</name> <operator pos:start="135:19" pos:end="135:19">=</operator> <operator pos:start="135:21" pos:end="135:21">(</operator><name pos:start="135:22" pos:end="135:22">b</name> <operator pos:start="135:24" pos:end="135:25">&gt;&gt;</operator> <literal type="number" pos:start="135:27" pos:end="135:27">3</literal><operator pos:start="135:28" pos:end="135:28">)</operator> <operator pos:start="135:30" pos:end="135:30">&amp;</operator> <literal type="number" pos:start="135:32" pos:end="135:32">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:35"><expr pos:start="137:13" pos:end="137:34"><name pos:start="137:13" pos:end="137:17">rex_r</name> <operator pos:start="137:19" pos:end="137:19">=</operator> <operator pos:start="137:21" pos:end="137:21">(</operator><name pos:start="137:22" pos:end="137:22">b</name> <operator pos:start="137:24" pos:end="137:24">&amp;</operator> <literal type="number" pos:start="137:26" pos:end="137:28">0x4</literal><operator pos:start="137:29" pos:end="137:29">)</operator> <operator pos:start="137:31" pos:end="137:32">&lt;&lt;</operator> <literal type="number" pos:start="137:34" pos:end="137:34">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:38"><expr pos:start="139:13" pos:end="139:37"><name pos:start="139:13" pos:end="139:20"><name pos:start="139:13" pos:end="139:13">s</name><operator pos:start="139:14" pos:end="139:15">-&gt;</operator><name pos:start="139:16" pos:end="139:20">rex_x</name></name> <operator pos:start="139:22" pos:end="139:22">=</operator> <operator pos:start="139:24" pos:end="139:24">(</operator><name pos:start="139:25" pos:end="139:25">b</name> <operator pos:start="139:27" pos:end="139:27">&amp;</operator> <literal type="number" pos:start="139:29" pos:end="139:31">0x2</literal><operator pos:start="139:32" pos:end="139:32">)</operator> <operator pos:start="139:34" pos:end="139:35">&lt;&lt;</operator> <literal type="number" pos:start="139:37" pos:end="139:37">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:38"><expr pos:start="141:13" pos:end="141:37"><call pos:start="141:13" pos:end="141:20"><name pos:start="141:13" pos:end="141:17">REX_B</name><argument_list pos:start="141:18" pos:end="141:20">(<argument pos:start="141:19" pos:end="141:19"><expr pos:start="141:19" pos:end="141:19"><name pos:start="141:19" pos:end="141:19">s</name></expr></argument>)</argument_list></call> <operator pos:start="141:22" pos:end="141:22">=</operator> <operator pos:start="141:24" pos:end="141:24">(</operator><name pos:start="141:25" pos:end="141:25">b</name> <operator pos:start="141:27" pos:end="141:27">&amp;</operator> <literal type="number" pos:start="141:29" pos:end="141:31">0x1</literal><operator pos:start="141:32" pos:end="141:32">)</operator> <operator pos:start="141:34" pos:end="141:35">&lt;&lt;</operator> <literal type="number" pos:start="141:37" pos:end="141:37">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:29"><expr pos:start="143:13" pos:end="143:28"><name pos:start="143:13" pos:end="143:24">x86_64_hregs</name> <operator pos:start="143:26" pos:end="143:26">=</operator> <literal type="number" pos:start="143:28" pos:end="143:28">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="143:31" pos:end="143:75">/* select uniform byte register addressing */</comment>

            <goto pos:start="145:13" pos:end="145:27">goto <name pos:start="145:18" pos:end="145:26">next_byte</name>;</goto>

        </block_content>}</block></switch>

        <if_stmt pos:start="149:9" pos:end="161:9"><if pos:start="149:9" pos:end="155:9">if <condition pos:start="149:12" pos:end="149:23">(<expr pos:start="149:13" pos:end="149:22"><name pos:start="149:13" pos:end="149:17">rex_w</name> <operator pos:start="149:19" pos:end="149:20">==</operator> <literal type="number" pos:start="149:22" pos:end="149:22">1</literal></expr>)</condition> <block pos:start="149:25" pos:end="155:9">{<block_content pos:start="153:13" pos:end="153:22">

            <comment type="block" pos:start="151:13" pos:end="151:49">/* 0x66 is ignored if rex.w is set */</comment>

            <expr_stmt pos:start="153:13" pos:end="153:22"><expr pos:start="153:13" pos:end="153:21"><name pos:start="153:13" pos:end="153:17">dflag</name> <operator pos:start="153:19" pos:end="153:19">=</operator> <literal type="number" pos:start="153:21" pos:end="153:21">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="155:11" pos:end="161:9">else <block pos:start="155:16" pos:end="161:9">{<block_content pos:start="157:13" pos:end="159:27">

            <if_stmt pos:start="157:13" pos:end="159:27"><if pos:start="157:13" pos:end="159:27">if <condition pos:start="157:16" pos:end="157:39">(<expr pos:start="157:17" pos:end="157:38"><name pos:start="157:17" pos:end="157:24">prefixes</name> <operator pos:start="157:26" pos:end="157:26">&amp;</operator> <name pos:start="157:28" pos:end="157:38">PREFIX_DATA</name></expr>)</condition><block type="pseudo" pos:start="159:17" pos:end="159:27"><block_content pos:start="159:17" pos:end="159:27">

                <expr_stmt pos:start="159:17" pos:end="159:27"><expr pos:start="159:17" pos:end="159:26"><name pos:start="159:17" pos:end="159:21">dflag</name> <operator pos:start="159:23" pos:end="159:24">^=</operator> <literal type="number" pos:start="159:26" pos:end="159:26">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="163:9" pos:end="165:22"><if pos:start="163:9" pos:end="165:22">if <condition pos:start="163:12" pos:end="163:37">(<expr pos:start="163:13" pos:end="163:36"><operator pos:start="163:13" pos:end="163:13">!</operator><operator pos:start="163:14" pos:end="163:14">(</operator><name pos:start="163:15" pos:end="163:22">prefixes</name> <operator pos:start="163:24" pos:end="163:24">&amp;</operator> <name pos:start="163:26" pos:end="163:35">PREFIX_ADR</name><operator pos:start="163:36" pos:end="163:36">)</operator></expr>)</condition><block type="pseudo" pos:start="165:13" pos:end="165:22"><block_content pos:start="165:13" pos:end="165:22">

            <expr_stmt pos:start="165:13" pos:end="165:22"><expr pos:start="165:13" pos:end="165:21"><name pos:start="165:13" pos:end="165:17">aflag</name> <operator pos:start="165:19" pos:end="165:19">=</operator> <literal type="number" pos:start="165:21" pos:end="165:21">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="167:7" pos:end="251:5">else

<cpp:endif pos:start="169:1" pos:end="169:6">#<cpp:directive pos:start="169:2" pos:end="169:6">endif</cpp:directive></cpp:endif>

    <block pos:start="171:5" pos:end="251:5">{<block_content pos:start="173:9" pos:end="249:23">

        <switch pos:start="173:9" pos:end="241:9">switch <condition pos:start="173:16" pos:end="173:18">(<expr pos:start="173:17" pos:end="173:17"><name pos:start="173:17" pos:end="173:17">b</name></expr>)</condition> <block pos:start="173:20" pos:end="241:9">{<block_content pos:start="175:9" pos:end="239:27">

        <case pos:start="175:9" pos:end="175:18">case <expr pos:start="175:14" pos:end="175:17"><literal type="number" pos:start="175:14" pos:end="175:17">0xf3</literal></expr>:</case>

            <expr_stmt pos:start="177:13" pos:end="177:36"><expr pos:start="177:13" pos:end="177:35"><name pos:start="177:13" pos:end="177:20">prefixes</name> <operator pos:start="177:22" pos:end="177:23">|=</operator> <name pos:start="177:25" pos:end="177:35">PREFIX_REPZ</name></expr>;</expr_stmt>

            <goto pos:start="179:13" pos:end="179:27">goto <name pos:start="179:18" pos:end="179:26">next_byte</name>;</goto>

        <case pos:start="181:9" pos:end="181:18">case <expr pos:start="181:14" pos:end="181:17"><literal type="number" pos:start="181:14" pos:end="181:17">0xf2</literal></expr>:</case>

            <expr_stmt pos:start="183:13" pos:end="183:37"><expr pos:start="183:13" pos:end="183:36"><name pos:start="183:13" pos:end="183:20">prefixes</name> <operator pos:start="183:22" pos:end="183:23">|=</operator> <name pos:start="183:25" pos:end="183:36">PREFIX_REPNZ</name></expr>;</expr_stmt>

            <goto pos:start="185:13" pos:end="185:27">goto <name pos:start="185:18" pos:end="185:26">next_byte</name>;</goto>

        <case pos:start="187:9" pos:end="187:18">case <expr pos:start="187:14" pos:end="187:17"><literal type="number" pos:start="187:14" pos:end="187:17">0xf0</literal></expr>:</case>

            <expr_stmt pos:start="189:13" pos:end="189:36"><expr pos:start="189:13" pos:end="189:35"><name pos:start="189:13" pos:end="189:20">prefixes</name> <operator pos:start="189:22" pos:end="189:23">|=</operator> <name pos:start="189:25" pos:end="189:35">PREFIX_LOCK</name></expr>;</expr_stmt>

            <goto pos:start="191:13" pos:end="191:27">goto <name pos:start="191:18" pos:end="191:26">next_byte</name>;</goto>

        <case pos:start="193:9" pos:end="193:18">case <expr pos:start="193:14" pos:end="193:17"><literal type="number" pos:start="193:14" pos:end="193:17">0x2e</literal></expr>:</case>

            <expr_stmt pos:start="195:13" pos:end="195:31"><expr pos:start="195:13" pos:end="195:30"><name pos:start="195:13" pos:end="195:23"><name pos:start="195:13" pos:end="195:13">s</name><operator pos:start="195:14" pos:end="195:15">-&gt;</operator><name pos:start="195:16" pos:end="195:23">override</name></name> <operator pos:start="195:25" pos:end="195:25">=</operator> <name pos:start="195:27" pos:end="195:30">R_CS</name></expr>;</expr_stmt>

            <goto pos:start="197:13" pos:end="197:27">goto <name pos:start="197:18" pos:end="197:26">next_byte</name>;</goto>

        <case pos:start="199:9" pos:end="199:18">case <expr pos:start="199:14" pos:end="199:17"><literal type="number" pos:start="199:14" pos:end="199:17">0x36</literal></expr>:</case>

            <expr_stmt pos:start="201:13" pos:end="201:31"><expr pos:start="201:13" pos:end="201:30"><name pos:start="201:13" pos:end="201:23"><name pos:start="201:13" pos:end="201:13">s</name><operator pos:start="201:14" pos:end="201:15">-&gt;</operator><name pos:start="201:16" pos:end="201:23">override</name></name> <operator pos:start="201:25" pos:end="201:25">=</operator> <name pos:start="201:27" pos:end="201:30">R_SS</name></expr>;</expr_stmt>

            <goto pos:start="203:13" pos:end="203:27">goto <name pos:start="203:18" pos:end="203:26">next_byte</name>;</goto>

        <case pos:start="205:9" pos:end="205:18">case <expr pos:start="205:14" pos:end="205:17"><literal type="number" pos:start="205:14" pos:end="205:17">0x3e</literal></expr>:</case>

            <expr_stmt pos:start="207:13" pos:end="207:31"><expr pos:start="207:13" pos:end="207:30"><name pos:start="207:13" pos:end="207:23"><name pos:start="207:13" pos:end="207:13">s</name><operator pos:start="207:14" pos:end="207:15">-&gt;</operator><name pos:start="207:16" pos:end="207:23">override</name></name> <operator pos:start="207:25" pos:end="207:25">=</operator> <name pos:start="207:27" pos:end="207:30">R_DS</name></expr>;</expr_stmt>

            <goto pos:start="209:13" pos:end="209:27">goto <name pos:start="209:18" pos:end="209:26">next_byte</name>;</goto>

        <case pos:start="211:9" pos:end="211:18">case <expr pos:start="211:14" pos:end="211:17"><literal type="number" pos:start="211:14" pos:end="211:17">0x26</literal></expr>:</case>

            <expr_stmt pos:start="213:13" pos:end="213:31"><expr pos:start="213:13" pos:end="213:30"><name pos:start="213:13" pos:end="213:23"><name pos:start="213:13" pos:end="213:13">s</name><operator pos:start="213:14" pos:end="213:15">-&gt;</operator><name pos:start="213:16" pos:end="213:23">override</name></name> <operator pos:start="213:25" pos:end="213:25">=</operator> <name pos:start="213:27" pos:end="213:30">R_ES</name></expr>;</expr_stmt>

            <goto pos:start="215:13" pos:end="215:27">goto <name pos:start="215:18" pos:end="215:26">next_byte</name>;</goto>

        <case pos:start="217:9" pos:end="217:18">case <expr pos:start="217:14" pos:end="217:17"><literal type="number" pos:start="217:14" pos:end="217:17">0x64</literal></expr>:</case>

            <expr_stmt pos:start="219:13" pos:end="219:31"><expr pos:start="219:13" pos:end="219:30"><name pos:start="219:13" pos:end="219:23"><name pos:start="219:13" pos:end="219:13">s</name><operator pos:start="219:14" pos:end="219:15">-&gt;</operator><name pos:start="219:16" pos:end="219:23">override</name></name> <operator pos:start="219:25" pos:end="219:25">=</operator> <name pos:start="219:27" pos:end="219:30">R_FS</name></expr>;</expr_stmt>

            <goto pos:start="221:13" pos:end="221:27">goto <name pos:start="221:18" pos:end="221:26">next_byte</name>;</goto>

        <case pos:start="223:9" pos:end="223:18">case <expr pos:start="223:14" pos:end="223:17"><literal type="number" pos:start="223:14" pos:end="223:17">0x65</literal></expr>:</case>

            <expr_stmt pos:start="225:13" pos:end="225:31"><expr pos:start="225:13" pos:end="225:30"><name pos:start="225:13" pos:end="225:23"><name pos:start="225:13" pos:end="225:13">s</name><operator pos:start="225:14" pos:end="225:15">-&gt;</operator><name pos:start="225:16" pos:end="225:23">override</name></name> <operator pos:start="225:25" pos:end="225:25">=</operator> <name pos:start="225:27" pos:end="225:30">R_GS</name></expr>;</expr_stmt>

            <goto pos:start="227:13" pos:end="227:27">goto <name pos:start="227:18" pos:end="227:26">next_byte</name>;</goto>

        <case pos:start="229:9" pos:end="229:18">case <expr pos:start="229:14" pos:end="229:17"><literal type="number" pos:start="229:14" pos:end="229:17">0x66</literal></expr>:</case>

            <expr_stmt pos:start="231:13" pos:end="231:36"><expr pos:start="231:13" pos:end="231:35"><name pos:start="231:13" pos:end="231:20">prefixes</name> <operator pos:start="231:22" pos:end="231:23">|=</operator> <name pos:start="231:25" pos:end="231:35">PREFIX_DATA</name></expr>;</expr_stmt>

            <goto pos:start="233:13" pos:end="233:27">goto <name pos:start="233:18" pos:end="233:26">next_byte</name>;</goto>

        <case pos:start="235:9" pos:end="235:18">case <expr pos:start="235:14" pos:end="235:17"><literal type="number" pos:start="235:14" pos:end="235:17">0x67</literal></expr>:</case>

            <expr_stmt pos:start="237:13" pos:end="237:35"><expr pos:start="237:13" pos:end="237:34"><name pos:start="237:13" pos:end="237:20">prefixes</name> <operator pos:start="237:22" pos:end="237:23">|=</operator> <name pos:start="237:25" pos:end="237:34">PREFIX_ADR</name></expr>;</expr_stmt>

            <goto pos:start="239:13" pos:end="239:27">goto <name pos:start="239:18" pos:end="239:26">next_byte</name>;</goto>

        </block_content>}</block></switch>

        <if_stmt pos:start="243:9" pos:end="245:23"><if pos:start="243:9" pos:end="245:23">if <condition pos:start="243:12" pos:end="243:35">(<expr pos:start="243:13" pos:end="243:34"><name pos:start="243:13" pos:end="243:20">prefixes</name> <operator pos:start="243:22" pos:end="243:22">&amp;</operator> <name pos:start="243:24" pos:end="243:34">PREFIX_DATA</name></expr>)</condition><block type="pseudo" pos:start="245:13" pos:end="245:23"><block_content pos:start="245:13" pos:end="245:23">

            <expr_stmt pos:start="245:13" pos:end="245:23"><expr pos:start="245:13" pos:end="245:22"><name pos:start="245:13" pos:end="245:17">dflag</name> <operator pos:start="245:19" pos:end="245:20">^=</operator> <literal type="number" pos:start="245:22" pos:end="245:22">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="247:9" pos:end="249:23"><if pos:start="247:9" pos:end="249:23">if <condition pos:start="247:12" pos:end="247:34">(<expr pos:start="247:13" pos:end="247:33"><name pos:start="247:13" pos:end="247:20">prefixes</name> <operator pos:start="247:22" pos:end="247:22">&amp;</operator> <name pos:start="247:24" pos:end="247:33">PREFIX_ADR</name></expr>)</condition><block type="pseudo" pos:start="249:13" pos:end="249:23"><block_content pos:start="249:13" pos:end="249:23">

            <expr_stmt pos:start="249:13" pos:end="249:23"><expr pos:start="249:13" pos:end="249:22"><name pos:start="249:13" pos:end="249:17">aflag</name> <operator pos:start="249:19" pos:end="249:20">^=</operator> <literal type="number" pos:start="249:22" pos:end="249:22">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="255:5" pos:end="255:25"><expr pos:start="255:5" pos:end="255:24"><name pos:start="255:5" pos:end="255:13"><name pos:start="255:5" pos:end="255:5">s</name><operator pos:start="255:6" pos:end="255:7">-&gt;</operator><name pos:start="255:8" pos:end="255:13">prefix</name></name> <operator pos:start="255:15" pos:end="255:15">=</operator> <name pos:start="255:17" pos:end="255:24">prefixes</name></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:21"><expr pos:start="257:5" pos:end="257:20"><name pos:start="257:5" pos:end="257:12"><name pos:start="257:5" pos:end="257:5">s</name><operator pos:start="257:6" pos:end="257:7">-&gt;</operator><name pos:start="257:8" pos:end="257:12">aflag</name></name> <operator pos:start="257:14" pos:end="257:14">=</operator> <name pos:start="257:16" pos:end="257:20">aflag</name></expr>;</expr_stmt>

    <expr_stmt pos:start="259:5" pos:end="259:21"><expr pos:start="259:5" pos:end="259:20"><name pos:start="259:5" pos:end="259:12"><name pos:start="259:5" pos:end="259:5">s</name><operator pos:start="259:6" pos:end="259:7">-&gt;</operator><name pos:start="259:8" pos:end="259:12">dflag</name></name> <operator pos:start="259:14" pos:end="259:14">=</operator> <name pos:start="259:16" pos:end="259:20">dflag</name></expr>;</expr_stmt>



    <comment type="block" pos:start="263:5" pos:end="263:25">/* lock generation */</comment>

    <if_stmt pos:start="265:5" pos:end="267:26"><if pos:start="265:5" pos:end="267:26">if <condition pos:start="265:8" pos:end="265:31">(<expr pos:start="265:9" pos:end="265:30"><name pos:start="265:9" pos:end="265:16">prefixes</name> <operator pos:start="265:18" pos:end="265:18">&amp;</operator> <name pos:start="265:20" pos:end="265:30">PREFIX_LOCK</name></expr>)</condition><block type="pseudo" pos:start="267:9" pos:end="267:26"><block_content pos:start="267:9" pos:end="267:26">

        <expr_stmt pos:start="267:9" pos:end="267:26"><expr pos:start="267:9" pos:end="267:25"><call pos:start="267:9" pos:end="267:25"><name pos:start="267:9" pos:end="267:23">gen_helper_lock</name><argument_list pos:start="267:24" pos:end="267:25">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="271:5" pos:end="271:27">/* now check op code */</comment>

 <label pos:start="273:2" pos:end="273:10"><name pos:start="273:2" pos:end="273:9">reswitch</name>:</label>

    <switch pos:start="275:5" pos:end="7209:5">switch<condition pos:start="275:11" pos:end="275:13">(<expr pos:start="275:12" pos:end="275:12"><name pos:start="275:12" pos:end="275:12">b</name></expr>)</condition> <block pos:start="275:15" pos:end="7209:5">{<block_content pos:start="277:5" pos:end="7207:24">

    <case pos:start="277:5" pos:end="277:14">case <expr pos:start="277:10" pos:end="277:13"><literal type="number" pos:start="277:10" pos:end="277:13">0x0f</literal></expr>:</case>

        <comment type="block" format="doxygen" pos:start="279:9" pos:end="279:36">/**************************/</comment>

        <comment type="block" pos:start="281:9" pos:end="281:30">/* extended op code */</comment>

        <expr_stmt pos:start="283:9" pos:end="283:48"><expr pos:start="283:9" pos:end="283:47"><name pos:start="283:9" pos:end="283:9">b</name> <operator pos:start="283:11" pos:end="283:11">=</operator> <call pos:start="283:13" pos:end="283:39"><name pos:start="283:13" pos:end="283:25">cpu_ldub_code</name><argument_list pos:start="283:26" pos:end="283:39">(<argument pos:start="283:27" pos:end="283:29"><expr pos:start="283:27" pos:end="283:29"><name pos:start="283:27" pos:end="283:29">env</name></expr></argument>, <argument pos:start="283:32" pos:end="283:38"><expr pos:start="283:32" pos:end="283:38"><name pos:start="283:32" pos:end="283:36"><name pos:start="283:32" pos:end="283:32">s</name><operator pos:start="283:33" pos:end="283:34">-&gt;</operator><name pos:start="283:35" pos:end="283:36">pc</name></name><operator pos:start="283:37" pos:end="283:38">++</operator></expr></argument>)</argument_list></call> <operator pos:start="283:41" pos:end="283:41">|</operator> <literal type="number" pos:start="283:43" pos:end="283:47">0x100</literal></expr>;</expr_stmt>

        <goto pos:start="285:9" pos:end="285:22">goto <name pos:start="285:14" pos:end="285:21">reswitch</name>;</goto>



        <comment type="block" format="doxygen" pos:start="289:9" pos:end="289:36">/**************************/</comment>

        <comment type="block" pos:start="291:9" pos:end="291:27">/* arith &amp; logic */</comment>

    <case pos:start="293:5" pos:end="293:23">case <expr pos:start="293:10" pos:end="293:22"><literal type="number" pos:start="293:10" pos:end="293:13">0x00</literal> <operator pos:start="293:15" pos:end="293:17">...</operator> <literal type="number" pos:start="293:19" pos:end="293:22">0x05</literal></expr>:</case>

    <case pos:start="295:5" pos:end="295:23">case <expr pos:start="295:10" pos:end="295:22"><literal type="number" pos:start="295:10" pos:end="295:13">0x08</literal> <operator pos:start="295:15" pos:end="295:17">...</operator> <literal type="number" pos:start="295:19" pos:end="295:22">0x0d</literal></expr>:</case>

    <case pos:start="297:5" pos:end="297:23">case <expr pos:start="297:10" pos:end="297:22"><literal type="number" pos:start="297:10" pos:end="297:13">0x10</literal> <operator pos:start="297:15" pos:end="297:17">...</operator> <literal type="number" pos:start="297:19" pos:end="297:22">0x15</literal></expr>:</case>

    <case pos:start="299:5" pos:end="299:23">case <expr pos:start="299:10" pos:end="299:22"><literal type="number" pos:start="299:10" pos:end="299:13">0x18</literal> <operator pos:start="299:15" pos:end="299:17">...</operator> <literal type="number" pos:start="299:19" pos:end="299:22">0x1d</literal></expr>:</case>

    <case pos:start="301:5" pos:end="301:23">case <expr pos:start="301:10" pos:end="301:22"><literal type="number" pos:start="301:10" pos:end="301:13">0x20</literal> <operator pos:start="301:15" pos:end="301:17">...</operator> <literal type="number" pos:start="301:19" pos:end="301:22">0x25</literal></expr>:</case>

    <case pos:start="303:5" pos:end="303:23">case <expr pos:start="303:10" pos:end="303:22"><literal type="number" pos:start="303:10" pos:end="303:13">0x28</literal> <operator pos:start="303:15" pos:end="303:17">...</operator> <literal type="number" pos:start="303:19" pos:end="303:22">0x2d</literal></expr>:</case>

    <case pos:start="305:5" pos:end="305:23">case <expr pos:start="305:10" pos:end="305:22"><literal type="number" pos:start="305:10" pos:end="305:13">0x30</literal> <operator pos:start="305:15" pos:end="305:17">...</operator> <literal type="number" pos:start="305:19" pos:end="305:22">0x35</literal></expr>:</case>

    <case pos:start="307:5" pos:end="307:23">case <expr pos:start="307:10" pos:end="307:22"><literal type="number" pos:start="307:10" pos:end="307:13">0x38</literal> <operator pos:start="307:15" pos:end="307:17">...</operator> <literal type="number" pos:start="307:19" pos:end="307:22">0x3d</literal></expr>:</case>

        <block pos:start="309:9" pos:end="417:9">{<block_content pos:start="311:13" pos:end="415:13">

            <decl_stmt pos:start="311:13" pos:end="311:27"><decl pos:start="311:13" pos:end="311:18"><type pos:start="311:13" pos:end="311:15"><name pos:start="311:13" pos:end="311:15">int</name></type> <name pos:start="311:17" pos:end="311:18">op</name></decl>, <decl pos:start="311:21" pos:end="311:21"><type ref="prev" pos:start="311:13" pos:end="311:15"/><name pos:start="311:21" pos:end="311:21">f</name></decl>, <decl pos:start="311:24" pos:end="311:26"><type ref="prev" pos:start="311:13" pos:end="311:15"/><name pos:start="311:24" pos:end="311:26">val</name></decl>;</decl_stmt>

            <expr_stmt pos:start="313:13" pos:end="313:30"><expr pos:start="313:13" pos:end="313:29"><name pos:start="313:13" pos:end="313:14">op</name> <operator pos:start="313:16" pos:end="313:16">=</operator> <operator pos:start="313:18" pos:end="313:18">(</operator><name pos:start="313:19" pos:end="313:19">b</name> <operator pos:start="313:21" pos:end="313:22">&gt;&gt;</operator> <literal type="number" pos:start="313:24" pos:end="313:24">3</literal><operator pos:start="313:25" pos:end="313:25">)</operator> <operator pos:start="313:27" pos:end="313:27">&amp;</operator> <literal type="number" pos:start="313:29" pos:end="313:29">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="315:13" pos:end="315:29"><expr pos:start="315:13" pos:end="315:28"><name pos:start="315:13" pos:end="315:13">f</name> <operator pos:start="315:15" pos:end="315:15">=</operator> <operator pos:start="315:17" pos:end="315:17">(</operator><name pos:start="315:18" pos:end="315:18">b</name> <operator pos:start="315:20" pos:end="315:21">&gt;&gt;</operator> <literal type="number" pos:start="315:23" pos:end="315:23">1</literal><operator pos:start="315:24" pos:end="315:24">)</operator> <operator pos:start="315:26" pos:end="315:26">&amp;</operator> <literal type="number" pos:start="315:28" pos:end="315:28">3</literal></expr>;</expr_stmt>



            <if_stmt pos:start="319:13" pos:end="325:37"><if pos:start="319:13" pos:end="321:29">if <condition pos:start="319:16" pos:end="319:29">(<expr pos:start="319:17" pos:end="319:28"><operator pos:start="319:17" pos:end="319:17">(</operator><name pos:start="319:18" pos:end="319:18">b</name> <operator pos:start="319:20" pos:end="319:20">&amp;</operator> <literal type="number" pos:start="319:22" pos:end="319:22">1</literal><operator pos:start="319:23" pos:end="319:23">)</operator> <operator pos:start="319:25" pos:end="319:26">==</operator> <literal type="number" pos:start="319:28" pos:end="319:28">0</literal></expr>)</condition><block type="pseudo" pos:start="321:17" pos:end="321:29"><block_content pos:start="321:17" pos:end="321:29">

                <expr_stmt pos:start="321:17" pos:end="321:29"><expr pos:start="321:17" pos:end="321:28"><name pos:start="321:17" pos:end="321:18">ot</name> <operator pos:start="321:20" pos:end="321:20">=</operator> <name pos:start="321:22" pos:end="321:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="323:13" pos:end="325:37">else<block type="pseudo" pos:start="325:17" pos:end="325:37"><block_content pos:start="325:17" pos:end="325:37">

                <expr_stmt pos:start="325:17" pos:end="325:37"><expr pos:start="325:17" pos:end="325:36"><name pos:start="325:17" pos:end="325:18">ot</name> <operator pos:start="325:20" pos:end="325:20">=</operator> <name pos:start="325:22" pos:end="325:26">dflag</name> <operator pos:start="325:28" pos:end="325:28">+</operator> <name pos:start="325:30" pos:end="325:36">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <switch pos:start="329:13" pos:end="415:13">switch<condition pos:start="329:19" pos:end="329:21">(<expr pos:start="329:20" pos:end="329:20"><name pos:start="329:20" pos:end="329:20">f</name></expr>)</condition> <block pos:start="329:23" pos:end="415:13">{<block_content pos:start="331:13" pos:end="413:22">

            <case pos:start="331:13" pos:end="331:19">case <expr pos:start="331:18" pos:end="331:18"><literal type="number" pos:start="331:18" pos:end="331:18">0</literal></expr>:</case> <comment type="block" pos:start="331:21" pos:end="331:35">/* OP Ev, Gv */</comment>

                <expr_stmt pos:start="333:17" pos:end="333:52"><expr pos:start="333:17" pos:end="333:51"><name pos:start="333:17" pos:end="333:21">modrm</name> <operator pos:start="333:23" pos:end="333:23">=</operator> <call pos:start="333:25" pos:end="333:51"><name pos:start="333:25" pos:end="333:37">cpu_ldub_code</name><argument_list pos:start="333:38" pos:end="333:51">(<argument pos:start="333:39" pos:end="333:41"><expr pos:start="333:39" pos:end="333:41"><name pos:start="333:39" pos:end="333:41">env</name></expr></argument>, <argument pos:start="333:44" pos:end="333:50"><expr pos:start="333:44" pos:end="333:50"><name pos:start="333:44" pos:end="333:48"><name pos:start="333:44" pos:end="333:44">s</name><operator pos:start="333:45" pos:end="333:46">-&gt;</operator><name pos:start="333:47" pos:end="333:48">pc</name></name><operator pos:start="333:49" pos:end="333:50">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="335:17" pos:end="335:49"><expr pos:start="335:17" pos:end="335:48"><name pos:start="335:17" pos:end="335:19">reg</name> <operator pos:start="335:21" pos:end="335:21">=</operator> <operator pos:start="335:23" pos:end="335:23">(</operator><operator pos:start="335:24" pos:end="335:24">(</operator><name pos:start="335:25" pos:end="335:29">modrm</name> <operator pos:start="335:31" pos:end="335:32">&gt;&gt;</operator> <literal type="number" pos:start="335:34" pos:end="335:34">3</literal><operator pos:start="335:35" pos:end="335:35">)</operator> <operator pos:start="335:37" pos:end="335:37">&amp;</operator> <literal type="number" pos:start="335:39" pos:end="335:39">7</literal><operator pos:start="335:40" pos:end="335:40">)</operator> <operator pos:start="335:42" pos:end="335:42">|</operator> <name pos:start="335:44" pos:end="335:48">rex_r</name></expr>;</expr_stmt>

                <expr_stmt pos:start="337:17" pos:end="337:39"><expr pos:start="337:17" pos:end="337:38"><name pos:start="337:17" pos:end="337:19">mod</name> <operator pos:start="337:21" pos:end="337:21">=</operator> <operator pos:start="337:23" pos:end="337:23">(</operator><name pos:start="337:24" pos:end="337:28">modrm</name> <operator pos:start="337:30" pos:end="337:31">&gt;&gt;</operator> <literal type="number" pos:start="337:33" pos:end="337:33">6</literal><operator pos:start="337:34" pos:end="337:34">)</operator> <operator pos:start="337:36" pos:end="337:36">&amp;</operator> <literal type="number" pos:start="337:38" pos:end="337:38">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="339:17" pos:end="339:44"><expr pos:start="339:17" pos:end="339:43"><name pos:start="339:17" pos:end="339:18">rm</name> <operator pos:start="339:20" pos:end="339:20">=</operator> <operator pos:start="339:22" pos:end="339:22">(</operator><name pos:start="339:23" pos:end="339:27">modrm</name> <operator pos:start="339:29" pos:end="339:29">&amp;</operator> <literal type="number" pos:start="339:31" pos:end="339:31">7</literal><operator pos:start="339:32" pos:end="339:32">)</operator> <operator pos:start="339:34" pos:end="339:34">|</operator> <call pos:start="339:36" pos:end="339:43"><name pos:start="339:36" pos:end="339:40">REX_B</name><argument_list pos:start="339:41" pos:end="339:43">(<argument pos:start="339:42" pos:end="339:42"><expr pos:start="339:42" pos:end="339:42"><name pos:start="339:42" pos:end="339:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="341:17" pos:end="367:17"><if pos:start="341:17" pos:end="347:17">if <condition pos:start="341:20" pos:end="341:29">(<expr pos:start="341:21" pos:end="341:28"><name pos:start="341:21" pos:end="341:23">mod</name> <operator pos:start="341:25" pos:end="341:26">!=</operator> <literal type="number" pos:start="341:28" pos:end="341:28">3</literal></expr>)</condition> <block pos:start="341:31" pos:end="347:17">{<block_content pos:start="343:21" pos:end="345:36">

                    <expr_stmt pos:start="343:21" pos:end="343:74"><expr pos:start="343:21" pos:end="343:73"><call pos:start="343:21" pos:end="343:73"><name pos:start="343:21" pos:end="343:33">gen_lea_modrm</name><argument_list pos:start="343:34" pos:end="343:73">(<argument pos:start="343:35" pos:end="343:37"><expr pos:start="343:35" pos:end="343:37"><name pos:start="343:35" pos:end="343:37">env</name></expr></argument>, <argument pos:start="343:40" pos:end="343:40"><expr pos:start="343:40" pos:end="343:40"><name pos:start="343:40" pos:end="343:40">s</name></expr></argument>, <argument pos:start="343:43" pos:end="343:47"><expr pos:start="343:43" pos:end="343:47"><name pos:start="343:43" pos:end="343:47">modrm</name></expr></argument>, <argument pos:start="343:50" pos:end="343:58"><expr pos:start="343:50" pos:end="343:58"><operator pos:start="343:50" pos:end="343:50">&amp;</operator><name pos:start="343:51" pos:end="343:58">reg_addr</name></expr></argument>, <argument pos:start="343:61" pos:end="343:72"><expr pos:start="343:61" pos:end="343:72"><operator pos:start="343:61" pos:end="343:61">&amp;</operator><name pos:start="343:62" pos:end="343:72">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="345:21" pos:end="345:36"><expr pos:start="345:21" pos:end="345:35"><name pos:start="345:21" pos:end="345:25">opreg</name> <operator pos:start="345:27" pos:end="345:27">=</operator> <name pos:start="345:29" pos:end="345:35">OR_TMP0</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="347:19" pos:end="363:17">else if <condition pos:start="347:27" pos:end="347:54">(<expr pos:start="347:28" pos:end="347:53"><name pos:start="347:28" pos:end="347:29">op</name> <operator pos:start="347:31" pos:end="347:32">==</operator> <name pos:start="347:34" pos:end="347:40">OP_XORL</name> <operator pos:start="347:42" pos:end="347:43">&amp;&amp;</operator> <name pos:start="347:45" pos:end="347:46">rm</name> <operator pos:start="347:48" pos:end="347:49">==</operator> <name pos:start="347:51" pos:end="347:53">reg</name></expr>)</condition> <block pos:start="347:56" pos:end="363:17">{<block_content pos:start="349:17" pos:end="361:26">

                <label pos:start="349:17" pos:end="349:25"><name pos:start="349:17" pos:end="349:24">xor_zero</name>:</label>

                    <comment type="block" pos:start="351:21" pos:end="351:51">/* xor reg, reg optimisation */</comment>

                    <expr_stmt pos:start="353:21" pos:end="353:39"><expr pos:start="353:21" pos:end="353:38"><call pos:start="353:21" pos:end="353:38"><name pos:start="353:21" pos:end="353:36">gen_op_movl_T0_0</name><argument_list pos:start="353:37" pos:end="353:38">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="355:21" pos:end="355:49"><expr pos:start="355:21" pos:end="355:48"><name pos:start="355:21" pos:end="355:28"><name pos:start="355:21" pos:end="355:21">s</name><operator pos:start="355:22" pos:end="355:23">-&gt;</operator><name pos:start="355:24" pos:end="355:28">cc_op</name></name> <operator pos:start="355:30" pos:end="355:30">=</operator> <name pos:start="355:32" pos:end="355:43">CC_OP_LOGICB</name> <operator pos:start="355:45" pos:end="355:45">+</operator> <name pos:start="355:47" pos:end="355:48">ot</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="357:21" pos:end="357:47"><expr pos:start="357:21" pos:end="357:46"><call pos:start="357:21" pos:end="357:46"><name pos:start="357:21" pos:end="357:37">gen_op_mov_reg_T0</name><argument_list pos:start="357:38" pos:end="357:46">(<argument pos:start="357:39" pos:end="357:40"><expr pos:start="357:39" pos:end="357:40"><name pos:start="357:39" pos:end="357:40">ot</name></expr></argument>, <argument pos:start="357:43" pos:end="357:45"><expr pos:start="357:43" pos:end="357:45"><name pos:start="357:43" pos:end="357:45">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="359:21" pos:end="359:40"><expr pos:start="359:21" pos:end="359:39"><call pos:start="359:21" pos:end="359:39"><name pos:start="359:21" pos:end="359:37">gen_op_update1_cc</name><argument_list pos:start="359:38" pos:end="359:39">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="361:21" pos:end="361:26">break;</break>

                </block_content>}</block></if> <else pos:start="363:19" pos:end="367:17">else <block pos:start="363:24" pos:end="367:17">{<block_content pos:start="365:21" pos:end="365:31">

                    <expr_stmt pos:start="365:21" pos:end="365:31"><expr pos:start="365:21" pos:end="365:30"><name pos:start="365:21" pos:end="365:25">opreg</name> <operator pos:start="365:27" pos:end="365:27">=</operator> <name pos:start="365:29" pos:end="365:30">rm</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="369:17" pos:end="369:46"><expr pos:start="369:17" pos:end="369:45"><call pos:start="369:17" pos:end="369:45"><name pos:start="369:17" pos:end="369:33">gen_op_mov_TN_reg</name><argument_list pos:start="369:34" pos:end="369:45">(<argument pos:start="369:35" pos:end="369:36"><expr pos:start="369:35" pos:end="369:36"><name pos:start="369:35" pos:end="369:36">ot</name></expr></argument>, <argument pos:start="369:39" pos:end="369:39"><expr pos:start="369:39" pos:end="369:39"><literal type="number" pos:start="369:39" pos:end="369:39">1</literal></expr></argument>, <argument pos:start="369:42" pos:end="369:44"><expr pos:start="369:42" pos:end="369:44"><name pos:start="369:42" pos:end="369:44">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="371:17" pos:end="371:41"><expr pos:start="371:17" pos:end="371:40"><call pos:start="371:17" pos:end="371:40"><name pos:start="371:17" pos:end="371:22">gen_op</name><argument_list pos:start="371:23" pos:end="371:40">(<argument pos:start="371:24" pos:end="371:24"><expr pos:start="371:24" pos:end="371:24"><name pos:start="371:24" pos:end="371:24">s</name></expr></argument>, <argument pos:start="371:27" pos:end="371:28"><expr pos:start="371:27" pos:end="371:28"><name pos:start="371:27" pos:end="371:28">op</name></expr></argument>, <argument pos:start="371:31" pos:end="371:32"><expr pos:start="371:31" pos:end="371:32"><name pos:start="371:31" pos:end="371:32">ot</name></expr></argument>, <argument pos:start="371:35" pos:end="371:39"><expr pos:start="371:35" pos:end="371:39"><name pos:start="371:35" pos:end="371:39">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="373:17" pos:end="373:22">break;</break>

            <case pos:start="375:13" pos:end="375:19">case <expr pos:start="375:18" pos:end="375:18"><literal type="number" pos:start="375:18" pos:end="375:18">1</literal></expr>:</case> <comment type="block" pos:start="375:21" pos:end="375:35">/* OP Gv, Ev */</comment>

                <expr_stmt pos:start="377:17" pos:end="377:52"><expr pos:start="377:17" pos:end="377:51"><name pos:start="377:17" pos:end="377:21">modrm</name> <operator pos:start="377:23" pos:end="377:23">=</operator> <call pos:start="377:25" pos:end="377:51"><name pos:start="377:25" pos:end="377:37">cpu_ldub_code</name><argument_list pos:start="377:38" pos:end="377:51">(<argument pos:start="377:39" pos:end="377:41"><expr pos:start="377:39" pos:end="377:41"><name pos:start="377:39" pos:end="377:41">env</name></expr></argument>, <argument pos:start="377:44" pos:end="377:50"><expr pos:start="377:44" pos:end="377:50"><name pos:start="377:44" pos:end="377:48"><name pos:start="377:44" pos:end="377:44">s</name><operator pos:start="377:45" pos:end="377:46">-&gt;</operator><name pos:start="377:47" pos:end="377:48">pc</name></name><operator pos:start="377:49" pos:end="377:50">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="379:17" pos:end="379:39"><expr pos:start="379:17" pos:end="379:38"><name pos:start="379:17" pos:end="379:19">mod</name> <operator pos:start="379:21" pos:end="379:21">=</operator> <operator pos:start="379:23" pos:end="379:23">(</operator><name pos:start="379:24" pos:end="379:28">modrm</name> <operator pos:start="379:30" pos:end="379:31">&gt;&gt;</operator> <literal type="number" pos:start="379:33" pos:end="379:33">6</literal><operator pos:start="379:34" pos:end="379:34">)</operator> <operator pos:start="379:36" pos:end="379:36">&amp;</operator> <literal type="number" pos:start="379:38" pos:end="379:38">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="381:17" pos:end="381:49"><expr pos:start="381:17" pos:end="381:48"><name pos:start="381:17" pos:end="381:19">reg</name> <operator pos:start="381:21" pos:end="381:21">=</operator> <operator pos:start="381:23" pos:end="381:23">(</operator><operator pos:start="381:24" pos:end="381:24">(</operator><name pos:start="381:25" pos:end="381:29">modrm</name> <operator pos:start="381:31" pos:end="381:32">&gt;&gt;</operator> <literal type="number" pos:start="381:34" pos:end="381:34">3</literal><operator pos:start="381:35" pos:end="381:35">)</operator> <operator pos:start="381:37" pos:end="381:37">&amp;</operator> <literal type="number" pos:start="381:39" pos:end="381:39">7</literal><operator pos:start="381:40" pos:end="381:40">)</operator> <operator pos:start="381:42" pos:end="381:42">|</operator> <name pos:start="381:44" pos:end="381:48">rex_r</name></expr>;</expr_stmt>

                <expr_stmt pos:start="383:17" pos:end="383:44"><expr pos:start="383:17" pos:end="383:43"><name pos:start="383:17" pos:end="383:18">rm</name> <operator pos:start="383:20" pos:end="383:20">=</operator> <operator pos:start="383:22" pos:end="383:22">(</operator><name pos:start="383:23" pos:end="383:27">modrm</name> <operator pos:start="383:29" pos:end="383:29">&amp;</operator> <literal type="number" pos:start="383:31" pos:end="383:31">7</literal><operator pos:start="383:32" pos:end="383:32">)</operator> <operator pos:start="383:34" pos:end="383:34">|</operator> <call pos:start="383:36" pos:end="383:43"><name pos:start="383:36" pos:end="383:40">REX_B</name><argument_list pos:start="383:41" pos:end="383:43">(<argument pos:start="383:42" pos:end="383:42"><expr pos:start="383:42" pos:end="383:42"><name pos:start="383:42" pos:end="383:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="385:17" pos:end="399:17"><if pos:start="385:17" pos:end="391:17">if <condition pos:start="385:20" pos:end="385:29">(<expr pos:start="385:21" pos:end="385:28"><name pos:start="385:21" pos:end="385:23">mod</name> <operator pos:start="385:25" pos:end="385:26">!=</operator> <literal type="number" pos:start="385:28" pos:end="385:28">3</literal></expr>)</condition> <block pos:start="385:31" pos:end="391:17">{<block_content pos:start="387:21" pos:end="389:55">

                    <expr_stmt pos:start="387:21" pos:end="387:74"><expr pos:start="387:21" pos:end="387:73"><call pos:start="387:21" pos:end="387:73"><name pos:start="387:21" pos:end="387:33">gen_lea_modrm</name><argument_list pos:start="387:34" pos:end="387:73">(<argument pos:start="387:35" pos:end="387:37"><expr pos:start="387:35" pos:end="387:37"><name pos:start="387:35" pos:end="387:37">env</name></expr></argument>, <argument pos:start="387:40" pos:end="387:40"><expr pos:start="387:40" pos:end="387:40"><name pos:start="387:40" pos:end="387:40">s</name></expr></argument>, <argument pos:start="387:43" pos:end="387:47"><expr pos:start="387:43" pos:end="387:47"><name pos:start="387:43" pos:end="387:47">modrm</name></expr></argument>, <argument pos:start="387:50" pos:end="387:58"><expr pos:start="387:50" pos:end="387:58"><operator pos:start="387:50" pos:end="387:50">&amp;</operator><name pos:start="387:51" pos:end="387:58">reg_addr</name></expr></argument>, <argument pos:start="387:61" pos:end="387:72"><expr pos:start="387:61" pos:end="387:72"><operator pos:start="387:61" pos:end="387:61">&amp;</operator><name pos:start="387:62" pos:end="387:72">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="389:21" pos:end="389:55"><expr pos:start="389:21" pos:end="389:54"><call pos:start="389:21" pos:end="389:54"><name pos:start="389:21" pos:end="389:35">gen_op_ld_T1_A0</name><argument_list pos:start="389:36" pos:end="389:54">(<argument pos:start="389:37" pos:end="389:53"><expr pos:start="389:37" pos:end="389:53"><name pos:start="389:37" pos:end="389:38">ot</name> <operator pos:start="389:40" pos:end="389:40">+</operator> <name pos:start="389:42" pos:end="389:53"><name pos:start="389:42" pos:end="389:42">s</name><operator pos:start="389:43" pos:end="389:44">-&gt;</operator><name pos:start="389:45" pos:end="389:53">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="391:19" pos:end="395:17">else if <condition pos:start="391:27" pos:end="391:54">(<expr pos:start="391:28" pos:end="391:53"><name pos:start="391:28" pos:end="391:29">op</name> <operator pos:start="391:31" pos:end="391:32">==</operator> <name pos:start="391:34" pos:end="391:40">OP_XORL</name> <operator pos:start="391:42" pos:end="391:43">&amp;&amp;</operator> <name pos:start="391:45" pos:end="391:46">rm</name> <operator pos:start="391:48" pos:end="391:49">==</operator> <name pos:start="391:51" pos:end="391:53">reg</name></expr>)</condition> <block pos:start="391:56" pos:end="395:17">{<block_content pos:start="393:21" pos:end="393:34">

                    <goto pos:start="393:21" pos:end="393:34">goto <name pos:start="393:26" pos:end="393:33">xor_zero</name>;</goto>

                </block_content>}</block></if> <else pos:start="395:19" pos:end="399:17">else <block pos:start="395:24" pos:end="399:17">{<block_content pos:start="397:21" pos:end="397:49">

                    <expr_stmt pos:start="397:21" pos:end="397:49"><expr pos:start="397:21" pos:end="397:48"><call pos:start="397:21" pos:end="397:48"><name pos:start="397:21" pos:end="397:37">gen_op_mov_TN_reg</name><argument_list pos:start="397:38" pos:end="397:48">(<argument pos:start="397:39" pos:end="397:40"><expr pos:start="397:39" pos:end="397:40"><name pos:start="397:39" pos:end="397:40">ot</name></expr></argument>, <argument pos:start="397:43" pos:end="397:43"><expr pos:start="397:43" pos:end="397:43"><literal type="number" pos:start="397:43" pos:end="397:43">1</literal></expr></argument>, <argument pos:start="397:46" pos:end="397:47"><expr pos:start="397:46" pos:end="397:47"><name pos:start="397:46" pos:end="397:47">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="401:17" pos:end="401:39"><expr pos:start="401:17" pos:end="401:38"><call pos:start="401:17" pos:end="401:38"><name pos:start="401:17" pos:end="401:22">gen_op</name><argument_list pos:start="401:23" pos:end="401:38">(<argument pos:start="401:24" pos:end="401:24"><expr pos:start="401:24" pos:end="401:24"><name pos:start="401:24" pos:end="401:24">s</name></expr></argument>, <argument pos:start="401:27" pos:end="401:28"><expr pos:start="401:27" pos:end="401:28"><name pos:start="401:27" pos:end="401:28">op</name></expr></argument>, <argument pos:start="401:31" pos:end="401:32"><expr pos:start="401:31" pos:end="401:32"><name pos:start="401:31" pos:end="401:32">ot</name></expr></argument>, <argument pos:start="401:35" pos:end="401:37"><expr pos:start="401:35" pos:end="401:37"><name pos:start="401:35" pos:end="401:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="403:17" pos:end="403:22">break;</break>

            <case pos:start="405:13" pos:end="405:19">case <expr pos:start="405:18" pos:end="405:18"><literal type="number" pos:start="405:18" pos:end="405:18">2</literal></expr>:</case> <comment type="block" pos:start="405:21" pos:end="405:34">/* OP A, Iv */</comment>

                <expr_stmt pos:start="407:17" pos:end="407:43"><expr pos:start="407:17" pos:end="407:42"><name pos:start="407:17" pos:end="407:19">val</name> <operator pos:start="407:21" pos:end="407:21">=</operator> <call pos:start="407:23" pos:end="407:42"><name pos:start="407:23" pos:end="407:30">insn_get</name><argument_list pos:start="407:31" pos:end="407:42">(<argument pos:start="407:32" pos:end="407:34"><expr pos:start="407:32" pos:end="407:34"><name pos:start="407:32" pos:end="407:34">env</name></expr></argument>, <argument pos:start="407:37" pos:end="407:37"><expr pos:start="407:37" pos:end="407:37"><name pos:start="407:37" pos:end="407:37">s</name></expr></argument>, <argument pos:start="407:40" pos:end="407:41"><expr pos:start="407:40" pos:end="407:41"><name pos:start="407:40" pos:end="407:41">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="409:17" pos:end="409:39"><expr pos:start="409:17" pos:end="409:38"><call pos:start="409:17" pos:end="409:38"><name pos:start="409:17" pos:end="409:33">gen_op_movl_T1_im</name><argument_list pos:start="409:34" pos:end="409:38">(<argument pos:start="409:35" pos:end="409:37"><expr pos:start="409:35" pos:end="409:37"><name pos:start="409:35" pos:end="409:37">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="411:17" pos:end="411:42"><expr pos:start="411:17" pos:end="411:41"><call pos:start="411:17" pos:end="411:41"><name pos:start="411:17" pos:end="411:22">gen_op</name><argument_list pos:start="411:23" pos:end="411:41">(<argument pos:start="411:24" pos:end="411:24"><expr pos:start="411:24" pos:end="411:24"><name pos:start="411:24" pos:end="411:24">s</name></expr></argument>, <argument pos:start="411:27" pos:end="411:28"><expr pos:start="411:27" pos:end="411:28"><name pos:start="411:27" pos:end="411:28">op</name></expr></argument>, <argument pos:start="411:31" pos:end="411:32"><expr pos:start="411:31" pos:end="411:32"><name pos:start="411:31" pos:end="411:32">ot</name></expr></argument>, <argument pos:start="411:35" pos:end="411:40"><expr pos:start="411:35" pos:end="411:40"><name pos:start="411:35" pos:end="411:40">OR_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="413:17" pos:end="413:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block>

        <break pos:start="419:9" pos:end="419:14">break;</break>



    <case pos:start="423:5" pos:end="423:14">case <expr pos:start="423:10" pos:end="423:13"><literal type="number" pos:start="423:10" pos:end="423:13">0x82</literal></expr>:</case>

        <if_stmt pos:start="425:9" pos:end="427:28"><if pos:start="425:9" pos:end="427:28">if <condition pos:start="425:12" pos:end="425:22">(<expr pos:start="425:13" pos:end="425:21"><call pos:start="425:13" pos:end="425:21"><name pos:start="425:13" pos:end="425:18">CODE64</name><argument_list pos:start="425:19" pos:end="425:21">(<argument pos:start="425:20" pos:end="425:20"><expr pos:start="425:20" pos:end="425:20"><name pos:start="425:20" pos:end="425:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="427:13" pos:end="427:28"><block_content pos:start="427:13" pos:end="427:28">

            <goto pos:start="427:13" pos:end="427:28">goto <name pos:start="427:18" pos:end="427:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

    <case pos:start="429:5" pos:end="429:14">case <expr pos:start="429:10" pos:end="429:13"><literal type="number" pos:start="429:10" pos:end="429:13">0x80</literal></expr>:</case> <comment type="block" pos:start="429:16" pos:end="429:25">/* GRP1 */</comment>

    <case pos:start="431:5" pos:end="431:14">case <expr pos:start="431:10" pos:end="431:13"><literal type="number" pos:start="431:10" pos:end="431:13">0x81</literal></expr>:</case>

    <case pos:start="433:5" pos:end="433:14">case <expr pos:start="433:10" pos:end="433:13"><literal type="number" pos:start="433:10" pos:end="433:13">0x83</literal></expr>:</case>

        <block pos:start="435:9" pos:end="509:9">{<block_content pos:start="437:13" pos:end="507:37">

            <decl_stmt pos:start="437:13" pos:end="437:20"><decl pos:start="437:13" pos:end="437:19"><type pos:start="437:13" pos:end="437:15"><name pos:start="437:13" pos:end="437:15">int</name></type> <name pos:start="437:17" pos:end="437:19">val</name></decl>;</decl_stmt>



            <if_stmt pos:start="441:13" pos:end="447:37"><if pos:start="441:13" pos:end="443:29">if <condition pos:start="441:16" pos:end="441:29">(<expr pos:start="441:17" pos:end="441:28"><operator pos:start="441:17" pos:end="441:17">(</operator><name pos:start="441:18" pos:end="441:18">b</name> <operator pos:start="441:20" pos:end="441:20">&amp;</operator> <literal type="number" pos:start="441:22" pos:end="441:22">1</literal><operator pos:start="441:23" pos:end="441:23">)</operator> <operator pos:start="441:25" pos:end="441:26">==</operator> <literal type="number" pos:start="441:28" pos:end="441:28">0</literal></expr>)</condition><block type="pseudo" pos:start="443:17" pos:end="443:29"><block_content pos:start="443:17" pos:end="443:29">

                <expr_stmt pos:start="443:17" pos:end="443:29"><expr pos:start="443:17" pos:end="443:28"><name pos:start="443:17" pos:end="443:18">ot</name> <operator pos:start="443:20" pos:end="443:20">=</operator> <name pos:start="443:22" pos:end="443:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="445:13" pos:end="447:37">else<block type="pseudo" pos:start="447:17" pos:end="447:37"><block_content pos:start="447:17" pos:end="447:37">

                <expr_stmt pos:start="447:17" pos:end="447:37"><expr pos:start="447:17" pos:end="447:36"><name pos:start="447:17" pos:end="447:18">ot</name> <operator pos:start="447:20" pos:end="447:20">=</operator> <name pos:start="447:22" pos:end="447:26">dflag</name> <operator pos:start="447:28" pos:end="447:28">+</operator> <name pos:start="447:30" pos:end="447:36">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <expr_stmt pos:start="451:13" pos:end="451:48"><expr pos:start="451:13" pos:end="451:47"><name pos:start="451:13" pos:end="451:17">modrm</name> <operator pos:start="451:19" pos:end="451:19">=</operator> <call pos:start="451:21" pos:end="451:47"><name pos:start="451:21" pos:end="451:33">cpu_ldub_code</name><argument_list pos:start="451:34" pos:end="451:47">(<argument pos:start="451:35" pos:end="451:37"><expr pos:start="451:35" pos:end="451:37"><name pos:start="451:35" pos:end="451:37">env</name></expr></argument>, <argument pos:start="451:40" pos:end="451:46"><expr pos:start="451:40" pos:end="451:46"><name pos:start="451:40" pos:end="451:44"><name pos:start="451:40" pos:end="451:40">s</name><operator pos:start="451:41" pos:end="451:42">-&gt;</operator><name pos:start="451:43" pos:end="451:44">pc</name></name><operator pos:start="451:45" pos:end="451:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="453:13" pos:end="453:35"><expr pos:start="453:13" pos:end="453:34"><name pos:start="453:13" pos:end="453:15">mod</name> <operator pos:start="453:17" pos:end="453:17">=</operator> <operator pos:start="453:19" pos:end="453:19">(</operator><name pos:start="453:20" pos:end="453:24">modrm</name> <operator pos:start="453:26" pos:end="453:27">&gt;&gt;</operator> <literal type="number" pos:start="453:29" pos:end="453:29">6</literal><operator pos:start="453:30" pos:end="453:30">)</operator> <operator pos:start="453:32" pos:end="453:32">&amp;</operator> <literal type="number" pos:start="453:34" pos:end="453:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="455:13" pos:end="455:40"><expr pos:start="455:13" pos:end="455:39"><name pos:start="455:13" pos:end="455:14">rm</name> <operator pos:start="455:16" pos:end="455:16">=</operator> <operator pos:start="455:18" pos:end="455:18">(</operator><name pos:start="455:19" pos:end="455:23">modrm</name> <operator pos:start="455:25" pos:end="455:25">&amp;</operator> <literal type="number" pos:start="455:27" pos:end="455:27">7</literal><operator pos:start="455:28" pos:end="455:28">)</operator> <operator pos:start="455:30" pos:end="455:30">|</operator> <call pos:start="455:32" pos:end="455:39"><name pos:start="455:32" pos:end="455:36">REX_B</name><argument_list pos:start="455:37" pos:end="455:39">(<argument pos:start="455:38" pos:end="455:38"><expr pos:start="455:38" pos:end="455:38"><name pos:start="455:38" pos:end="455:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="457:13" pos:end="457:34"><expr pos:start="457:13" pos:end="457:33"><name pos:start="457:13" pos:end="457:14">op</name> <operator pos:start="457:16" pos:end="457:16">=</operator> <operator pos:start="457:18" pos:end="457:18">(</operator><name pos:start="457:19" pos:end="457:23">modrm</name> <operator pos:start="457:25" pos:end="457:26">&gt;&gt;</operator> <literal type="number" pos:start="457:28" pos:end="457:28">3</literal><operator pos:start="457:29" pos:end="457:29">)</operator> <operator pos:start="457:31" pos:end="457:31">&amp;</operator> <literal type="number" pos:start="457:33" pos:end="457:33">7</literal></expr>;</expr_stmt>



            <if_stmt pos:start="461:13" pos:end="479:13"><if pos:start="461:13" pos:end="475:13">if <condition pos:start="461:16" pos:end="461:25">(<expr pos:start="461:17" pos:end="461:24"><name pos:start="461:17" pos:end="461:19">mod</name> <operator pos:start="461:21" pos:end="461:22">!=</operator> <literal type="number" pos:start="461:24" pos:end="461:24">3</literal></expr>)</condition> <block pos:start="461:27" pos:end="475:13">{<block_content pos:start="463:17" pos:end="473:32">

                <if_stmt pos:start="463:17" pos:end="469:56"><if pos:start="463:17" pos:end="465:38">if <condition pos:start="463:20" pos:end="463:30">(<expr pos:start="463:21" pos:end="463:29"><name pos:start="463:21" pos:end="463:21">b</name> <operator pos:start="463:23" pos:end="463:24">==</operator> <literal type="number" pos:start="463:26" pos:end="463:29">0x83</literal></expr>)</condition><block type="pseudo" pos:start="465:21" pos:end="465:38"><block_content pos:start="465:21" pos:end="465:38">

                    <expr_stmt pos:start="465:21" pos:end="465:38"><expr pos:start="465:21" pos:end="465:37"><name pos:start="465:21" pos:end="465:33"><name pos:start="465:21" pos:end="465:21">s</name><operator pos:start="465:22" pos:end="465:23">-&gt;</operator><name pos:start="465:24" pos:end="465:33">rip_offset</name></name> <operator pos:start="465:35" pos:end="465:35">=</operator> <literal type="number" pos:start="465:37" pos:end="465:37">1</literal></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="467:17" pos:end="469:56">else<block type="pseudo" pos:start="469:21" pos:end="469:56"><block_content pos:start="469:21" pos:end="469:56">

                    <expr_stmt pos:start="469:21" pos:end="469:56"><expr pos:start="469:21" pos:end="469:55"><name pos:start="469:21" pos:end="469:33"><name pos:start="469:21" pos:end="469:21">s</name><operator pos:start="469:22" pos:end="469:23">-&gt;</operator><name pos:start="469:24" pos:end="469:33">rip_offset</name></name> <operator pos:start="469:35" pos:end="469:35">=</operator> <call pos:start="469:37" pos:end="469:55"><name pos:start="469:37" pos:end="469:51">insn_const_size</name><argument_list pos:start="469:52" pos:end="469:55">(<argument pos:start="469:53" pos:end="469:54"><expr pos:start="469:53" pos:end="469:54"><name pos:start="469:53" pos:end="469:54">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="471:17" pos:end="471:70"><expr pos:start="471:17" pos:end="471:69"><call pos:start="471:17" pos:end="471:69"><name pos:start="471:17" pos:end="471:29">gen_lea_modrm</name><argument_list pos:start="471:30" pos:end="471:69">(<argument pos:start="471:31" pos:end="471:33"><expr pos:start="471:31" pos:end="471:33"><name pos:start="471:31" pos:end="471:33">env</name></expr></argument>, <argument pos:start="471:36" pos:end="471:36"><expr pos:start="471:36" pos:end="471:36"><name pos:start="471:36" pos:end="471:36">s</name></expr></argument>, <argument pos:start="471:39" pos:end="471:43"><expr pos:start="471:39" pos:end="471:43"><name pos:start="471:39" pos:end="471:43">modrm</name></expr></argument>, <argument pos:start="471:46" pos:end="471:54"><expr pos:start="471:46" pos:end="471:54"><operator pos:start="471:46" pos:end="471:46">&amp;</operator><name pos:start="471:47" pos:end="471:54">reg_addr</name></expr></argument>, <argument pos:start="471:57" pos:end="471:68"><expr pos:start="471:57" pos:end="471:68"><operator pos:start="471:57" pos:end="471:57">&amp;</operator><name pos:start="471:58" pos:end="471:68">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="473:17" pos:end="473:32"><expr pos:start="473:17" pos:end="473:31"><name pos:start="473:17" pos:end="473:21">opreg</name> <operator pos:start="473:23" pos:end="473:23">=</operator> <name pos:start="473:25" pos:end="473:31">OR_TMP0</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="475:15" pos:end="479:13">else <block pos:start="475:20" pos:end="479:13">{<block_content pos:start="477:17" pos:end="477:27">

                <expr_stmt pos:start="477:17" pos:end="477:27"><expr pos:start="477:17" pos:end="477:26"><name pos:start="477:17" pos:end="477:21">opreg</name> <operator pos:start="477:23" pos:end="477:23">=</operator> <name pos:start="477:25" pos:end="477:26">rm</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <switch pos:start="483:13" pos:end="503:13">switch<condition pos:start="483:19" pos:end="483:21">(<expr pos:start="483:20" pos:end="483:20"><name pos:start="483:20" pos:end="483:20">b</name></expr>)</condition> <block pos:start="483:23" pos:end="503:13">{<block_content pos:start="485:13" pos:end="501:22">

            <default pos:start="485:13" pos:end="485:20">default:</default>

            <case pos:start="487:13" pos:end="487:22">case <expr pos:start="487:18" pos:end="487:21"><literal type="number" pos:start="487:18" pos:end="487:21">0x80</literal></expr>:</case>

            <case pos:start="489:13" pos:end="489:22">case <expr pos:start="489:18" pos:end="489:21"><literal type="number" pos:start="489:18" pos:end="489:21">0x81</literal></expr>:</case>

            <case pos:start="491:13" pos:end="491:22">case <expr pos:start="491:18" pos:end="491:21"><literal type="number" pos:start="491:18" pos:end="491:21">0x82</literal></expr>:</case>

                <expr_stmt pos:start="493:17" pos:end="493:43"><expr pos:start="493:17" pos:end="493:42"><name pos:start="493:17" pos:end="493:19">val</name> <operator pos:start="493:21" pos:end="493:21">=</operator> <call pos:start="493:23" pos:end="493:42"><name pos:start="493:23" pos:end="493:30">insn_get</name><argument_list pos:start="493:31" pos:end="493:42">(<argument pos:start="493:32" pos:end="493:34"><expr pos:start="493:32" pos:end="493:34"><name pos:start="493:32" pos:end="493:34">env</name></expr></argument>, <argument pos:start="493:37" pos:end="493:37"><expr pos:start="493:37" pos:end="493:37"><name pos:start="493:37" pos:end="493:37">s</name></expr></argument>, <argument pos:start="493:40" pos:end="493:41"><expr pos:start="493:40" pos:end="493:41"><name pos:start="493:40" pos:end="493:41">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="495:17" pos:end="495:22">break;</break>

            <case pos:start="497:13" pos:end="497:22">case <expr pos:start="497:18" pos:end="497:21"><literal type="number" pos:start="497:18" pos:end="497:21">0x83</literal></expr>:</case>

                <expr_stmt pos:start="499:17" pos:end="499:56"><expr pos:start="499:17" pos:end="499:55"><name pos:start="499:17" pos:end="499:19">val</name> <operator pos:start="499:21" pos:end="499:21">=</operator> <operator pos:start="499:23" pos:end="499:23">(</operator><name pos:start="499:24" pos:end="499:29">int8_t</name><operator pos:start="499:30" pos:end="499:30">)</operator><call pos:start="499:31" pos:end="499:55"><name pos:start="499:31" pos:end="499:38">insn_get</name><argument_list pos:start="499:39" pos:end="499:55">(<argument pos:start="499:40" pos:end="499:42"><expr pos:start="499:40" pos:end="499:42"><name pos:start="499:40" pos:end="499:42">env</name></expr></argument>, <argument pos:start="499:45" pos:end="499:45"><expr pos:start="499:45" pos:end="499:45"><name pos:start="499:45" pos:end="499:45">s</name></expr></argument>, <argument pos:start="499:48" pos:end="499:54"><expr pos:start="499:48" pos:end="499:54"><name pos:start="499:48" pos:end="499:54">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="501:17" pos:end="501:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="505:13" pos:end="505:35"><expr pos:start="505:13" pos:end="505:34"><call pos:start="505:13" pos:end="505:34"><name pos:start="505:13" pos:end="505:29">gen_op_movl_T1_im</name><argument_list pos:start="505:30" pos:end="505:34">(<argument pos:start="505:31" pos:end="505:33"><expr pos:start="505:31" pos:end="505:33"><name pos:start="505:31" pos:end="505:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="507:13" pos:end="507:37"><expr pos:start="507:13" pos:end="507:36"><call pos:start="507:13" pos:end="507:36"><name pos:start="507:13" pos:end="507:18">gen_op</name><argument_list pos:start="507:19" pos:end="507:36">(<argument pos:start="507:20" pos:end="507:20"><expr pos:start="507:20" pos:end="507:20"><name pos:start="507:20" pos:end="507:20">s</name></expr></argument>, <argument pos:start="507:23" pos:end="507:24"><expr pos:start="507:23" pos:end="507:24"><name pos:start="507:23" pos:end="507:24">op</name></expr></argument>, <argument pos:start="507:27" pos:end="507:28"><expr pos:start="507:27" pos:end="507:28"><name pos:start="507:27" pos:end="507:28">ot</name></expr></argument>, <argument pos:start="507:31" pos:end="507:35"><expr pos:start="507:31" pos:end="507:35"><name pos:start="507:31" pos:end="507:35">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="511:9" pos:end="511:14">break;</break>



        <comment type="block" format="doxygen" pos:start="515:9" pos:end="515:36">/**************************/</comment>

        <comment type="block" pos:start="517:9" pos:end="517:44">/* inc, dec, and other misc arith */</comment>

    <case pos:start="519:5" pos:end="519:23">case <expr pos:start="519:10" pos:end="519:22"><literal type="number" pos:start="519:10" pos:end="519:13">0x40</literal> <operator pos:start="519:15" pos:end="519:17">...</operator> <literal type="number" pos:start="519:19" pos:end="519:22">0x47</literal></expr>:</case> <comment type="block" pos:start="519:25" pos:end="519:36">/* inc Gv */</comment>

        <expr_stmt pos:start="521:9" pos:end="521:39"><expr pos:start="521:9" pos:end="521:38"><name pos:start="521:9" pos:end="521:10">ot</name> <operator pos:start="521:12" pos:end="521:12">=</operator> <ternary pos:start="521:14" pos:end="521:38"><condition pos:start="521:14" pos:end="521:20"><expr pos:start="521:14" pos:end="521:18"><name pos:start="521:14" pos:end="521:18">dflag</name></expr> ?</condition><then pos:start="521:22" pos:end="521:28"> <expr pos:start="521:22" pos:end="521:28"><name pos:start="521:22" pos:end="521:28">OT_LONG</name></expr> </then><else pos:start="521:30" pos:end="521:38">: <expr pos:start="521:32" pos:end="521:38"><name pos:start="521:32" pos:end="521:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="523:9" pos:end="523:44"><expr pos:start="523:9" pos:end="523:43"><call pos:start="523:9" pos:end="523:43"><name pos:start="523:9" pos:end="523:15">gen_inc</name><argument_list pos:start="523:16" pos:end="523:43">(<argument pos:start="523:17" pos:end="523:17"><expr pos:start="523:17" pos:end="523:17"><name pos:start="523:17" pos:end="523:17">s</name></expr></argument>, <argument pos:start="523:20" pos:end="523:21"><expr pos:start="523:20" pos:end="523:21"><name pos:start="523:20" pos:end="523:21">ot</name></expr></argument>, <argument pos:start="523:24" pos:end="523:39"><expr pos:start="523:24" pos:end="523:39"><name pos:start="523:24" pos:end="523:29">OR_EAX</name> <operator pos:start="523:31" pos:end="523:31">+</operator> <operator pos:start="523:33" pos:end="523:33">(</operator><name pos:start="523:34" pos:end="523:34">b</name> <operator pos:start="523:36" pos:end="523:36">&amp;</operator> <literal type="number" pos:start="523:38" pos:end="523:38">7</literal><operator pos:start="523:39" pos:end="523:39">)</operator></expr></argument>, <argument pos:start="523:42" pos:end="523:42"><expr pos:start="523:42" pos:end="523:42"><literal type="number" pos:start="523:42" pos:end="523:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="525:9" pos:end="525:14">break;</break>

    <case pos:start="527:5" pos:end="527:23">case <expr pos:start="527:10" pos:end="527:22"><literal type="number" pos:start="527:10" pos:end="527:13">0x48</literal> <operator pos:start="527:15" pos:end="527:17">...</operator> <literal type="number" pos:start="527:19" pos:end="527:22">0x4f</literal></expr>:</case> <comment type="block" pos:start="527:25" pos:end="527:36">/* dec Gv */</comment>

        <expr_stmt pos:start="529:9" pos:end="529:39"><expr pos:start="529:9" pos:end="529:38"><name pos:start="529:9" pos:end="529:10">ot</name> <operator pos:start="529:12" pos:end="529:12">=</operator> <ternary pos:start="529:14" pos:end="529:38"><condition pos:start="529:14" pos:end="529:20"><expr pos:start="529:14" pos:end="529:18"><name pos:start="529:14" pos:end="529:18">dflag</name></expr> ?</condition><then pos:start="529:22" pos:end="529:28"> <expr pos:start="529:22" pos:end="529:28"><name pos:start="529:22" pos:end="529:28">OT_LONG</name></expr> </then><else pos:start="529:30" pos:end="529:38">: <expr pos:start="529:32" pos:end="529:38"><name pos:start="529:32" pos:end="529:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="531:9" pos:end="531:45"><expr pos:start="531:9" pos:end="531:44"><call pos:start="531:9" pos:end="531:44"><name pos:start="531:9" pos:end="531:15">gen_inc</name><argument_list pos:start="531:16" pos:end="531:44">(<argument pos:start="531:17" pos:end="531:17"><expr pos:start="531:17" pos:end="531:17"><name pos:start="531:17" pos:end="531:17">s</name></expr></argument>, <argument pos:start="531:20" pos:end="531:21"><expr pos:start="531:20" pos:end="531:21"><name pos:start="531:20" pos:end="531:21">ot</name></expr></argument>, <argument pos:start="531:24" pos:end="531:39"><expr pos:start="531:24" pos:end="531:39"><name pos:start="531:24" pos:end="531:29">OR_EAX</name> <operator pos:start="531:31" pos:end="531:31">+</operator> <operator pos:start="531:33" pos:end="531:33">(</operator><name pos:start="531:34" pos:end="531:34">b</name> <operator pos:start="531:36" pos:end="531:36">&amp;</operator> <literal type="number" pos:start="531:38" pos:end="531:38">7</literal><operator pos:start="531:39" pos:end="531:39">)</operator></expr></argument>, <argument pos:start="531:42" pos:end="531:43"><expr pos:start="531:42" pos:end="531:43"><operator pos:start="531:42" pos:end="531:42">-</operator><literal type="number" pos:start="531:43" pos:end="531:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="533:9" pos:end="533:14">break;</break>

    <case pos:start="535:5" pos:end="535:14">case <expr pos:start="535:10" pos:end="535:13"><literal type="number" pos:start="535:10" pos:end="535:13">0xf6</literal></expr>:</case> <comment type="block" pos:start="535:16" pos:end="535:25">/* GRP3 */</comment>

    <case pos:start="537:5" pos:end="537:14">case <expr pos:start="537:10" pos:end="537:13"><literal type="number" pos:start="537:10" pos:end="537:13">0xf7</literal></expr>:</case>

        <if_stmt pos:start="539:9" pos:end="545:33"><if pos:start="539:9" pos:end="541:25">if <condition pos:start="539:12" pos:end="539:25">(<expr pos:start="539:13" pos:end="539:24"><operator pos:start="539:13" pos:end="539:13">(</operator><name pos:start="539:14" pos:end="539:14">b</name> <operator pos:start="539:16" pos:end="539:16">&amp;</operator> <literal type="number" pos:start="539:18" pos:end="539:18">1</literal><operator pos:start="539:19" pos:end="539:19">)</operator> <operator pos:start="539:21" pos:end="539:22">==</operator> <literal type="number" pos:start="539:24" pos:end="539:24">0</literal></expr>)</condition><block type="pseudo" pos:start="541:13" pos:end="541:25"><block_content pos:start="541:13" pos:end="541:25">

            <expr_stmt pos:start="541:13" pos:end="541:25"><expr pos:start="541:13" pos:end="541:24"><name pos:start="541:13" pos:end="541:14">ot</name> <operator pos:start="541:16" pos:end="541:16">=</operator> <name pos:start="541:18" pos:end="541:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="543:9" pos:end="545:33">else<block type="pseudo" pos:start="545:13" pos:end="545:33"><block_content pos:start="545:13" pos:end="545:33">

            <expr_stmt pos:start="545:13" pos:end="545:33"><expr pos:start="545:13" pos:end="545:32"><name pos:start="545:13" pos:end="545:14">ot</name> <operator pos:start="545:16" pos:end="545:16">=</operator> <name pos:start="545:18" pos:end="545:22">dflag</name> <operator pos:start="545:24" pos:end="545:24">+</operator> <name pos:start="545:26" pos:end="545:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="549:9" pos:end="549:44"><expr pos:start="549:9" pos:end="549:43"><name pos:start="549:9" pos:end="549:13">modrm</name> <operator pos:start="549:15" pos:end="549:15">=</operator> <call pos:start="549:17" pos:end="549:43"><name pos:start="549:17" pos:end="549:29">cpu_ldub_code</name><argument_list pos:start="549:30" pos:end="549:43">(<argument pos:start="549:31" pos:end="549:33"><expr pos:start="549:31" pos:end="549:33"><name pos:start="549:31" pos:end="549:33">env</name></expr></argument>, <argument pos:start="549:36" pos:end="549:42"><expr pos:start="549:36" pos:end="549:42"><name pos:start="549:36" pos:end="549:40"><name pos:start="549:36" pos:end="549:36">s</name><operator pos:start="549:37" pos:end="549:38">-&gt;</operator><name pos:start="549:39" pos:end="549:40">pc</name></name><operator pos:start="549:41" pos:end="549:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="551:9" pos:end="551:31"><expr pos:start="551:9" pos:end="551:30"><name pos:start="551:9" pos:end="551:11">mod</name> <operator pos:start="551:13" pos:end="551:13">=</operator> <operator pos:start="551:15" pos:end="551:15">(</operator><name pos:start="551:16" pos:end="551:20">modrm</name> <operator pos:start="551:22" pos:end="551:23">&gt;&gt;</operator> <literal type="number" pos:start="551:25" pos:end="551:25">6</literal><operator pos:start="551:26" pos:end="551:26">)</operator> <operator pos:start="551:28" pos:end="551:28">&amp;</operator> <literal type="number" pos:start="551:30" pos:end="551:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="553:9" pos:end="553:36"><expr pos:start="553:9" pos:end="553:35"><name pos:start="553:9" pos:end="553:10">rm</name> <operator pos:start="553:12" pos:end="553:12">=</operator> <operator pos:start="553:14" pos:end="553:14">(</operator><name pos:start="553:15" pos:end="553:19">modrm</name> <operator pos:start="553:21" pos:end="553:21">&amp;</operator> <literal type="number" pos:start="553:23" pos:end="553:23">7</literal><operator pos:start="553:24" pos:end="553:24">)</operator> <operator pos:start="553:26" pos:end="553:26">|</operator> <call pos:start="553:28" pos:end="553:35"><name pos:start="553:28" pos:end="553:32">REX_B</name><argument_list pos:start="553:33" pos:end="553:35">(<argument pos:start="553:34" pos:end="553:34"><expr pos:start="553:34" pos:end="553:34"><name pos:start="553:34" pos:end="553:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="555:9" pos:end="555:30"><expr pos:start="555:9" pos:end="555:29"><name pos:start="555:9" pos:end="555:10">op</name> <operator pos:start="555:12" pos:end="555:12">=</operator> <operator pos:start="555:14" pos:end="555:14">(</operator><name pos:start="555:15" pos:end="555:19">modrm</name> <operator pos:start="555:21" pos:end="555:22">&gt;&gt;</operator> <literal type="number" pos:start="555:24" pos:end="555:24">3</literal><operator pos:start="555:25" pos:end="555:25">)</operator> <operator pos:start="555:27" pos:end="555:27">&amp;</operator> <literal type="number" pos:start="555:29" pos:end="555:29">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="557:9" pos:end="571:9"><if pos:start="557:9" pos:end="567:9">if <condition pos:start="557:12" pos:end="557:21">(<expr pos:start="557:13" pos:end="557:20"><name pos:start="557:13" pos:end="557:15">mod</name> <operator pos:start="557:17" pos:end="557:18">!=</operator> <literal type="number" pos:start="557:20" pos:end="557:20">3</literal></expr>)</condition> <block pos:start="557:23" pos:end="567:9">{<block_content pos:start="559:13" pos:end="565:47">

            <if_stmt pos:start="559:13" pos:end="561:52"><if pos:start="559:13" pos:end="561:52">if <condition pos:start="559:16" pos:end="559:24">(<expr pos:start="559:17" pos:end="559:23"><name pos:start="559:17" pos:end="559:18">op</name> <operator pos:start="559:20" pos:end="559:21">==</operator> <literal type="number" pos:start="559:23" pos:end="559:23">0</literal></expr>)</condition><block type="pseudo" pos:start="561:17" pos:end="561:52"><block_content pos:start="561:17" pos:end="561:52">

                <expr_stmt pos:start="561:17" pos:end="561:52"><expr pos:start="561:17" pos:end="561:51"><name pos:start="561:17" pos:end="561:29"><name pos:start="561:17" pos:end="561:17">s</name><operator pos:start="561:18" pos:end="561:19">-&gt;</operator><name pos:start="561:20" pos:end="561:29">rip_offset</name></name> <operator pos:start="561:31" pos:end="561:31">=</operator> <call pos:start="561:33" pos:end="561:51"><name pos:start="561:33" pos:end="561:47">insn_const_size</name><argument_list pos:start="561:48" pos:end="561:51">(<argument pos:start="561:49" pos:end="561:50"><expr pos:start="561:49" pos:end="561:50"><name pos:start="561:49" pos:end="561:50">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="563:13" pos:end="563:66"><expr pos:start="563:13" pos:end="563:65"><call pos:start="563:13" pos:end="563:65"><name pos:start="563:13" pos:end="563:25">gen_lea_modrm</name><argument_list pos:start="563:26" pos:end="563:65">(<argument pos:start="563:27" pos:end="563:29"><expr pos:start="563:27" pos:end="563:29"><name pos:start="563:27" pos:end="563:29">env</name></expr></argument>, <argument pos:start="563:32" pos:end="563:32"><expr pos:start="563:32" pos:end="563:32"><name pos:start="563:32" pos:end="563:32">s</name></expr></argument>, <argument pos:start="563:35" pos:end="563:39"><expr pos:start="563:35" pos:end="563:39"><name pos:start="563:35" pos:end="563:39">modrm</name></expr></argument>, <argument pos:start="563:42" pos:end="563:50"><expr pos:start="563:42" pos:end="563:50"><operator pos:start="563:42" pos:end="563:42">&amp;</operator><name pos:start="563:43" pos:end="563:50">reg_addr</name></expr></argument>, <argument pos:start="563:53" pos:end="563:64"><expr pos:start="563:53" pos:end="563:64"><operator pos:start="563:53" pos:end="563:53">&amp;</operator><name pos:start="563:54" pos:end="563:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="565:13" pos:end="565:47"><expr pos:start="565:13" pos:end="565:46"><call pos:start="565:13" pos:end="565:46"><name pos:start="565:13" pos:end="565:27">gen_op_ld_T0_A0</name><argument_list pos:start="565:28" pos:end="565:46">(<argument pos:start="565:29" pos:end="565:45"><expr pos:start="565:29" pos:end="565:45"><name pos:start="565:29" pos:end="565:30">ot</name> <operator pos:start="565:32" pos:end="565:32">+</operator> <name pos:start="565:34" pos:end="565:45"><name pos:start="565:34" pos:end="565:34">s</name><operator pos:start="565:35" pos:end="565:36">-&gt;</operator><name pos:start="565:37" pos:end="565:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="567:11" pos:end="571:9">else <block pos:start="567:16" pos:end="571:9">{<block_content pos:start="569:13" pos:end="569:41">

            <expr_stmt pos:start="569:13" pos:end="569:41"><expr pos:start="569:13" pos:end="569:40"><call pos:start="569:13" pos:end="569:40"><name pos:start="569:13" pos:end="569:29">gen_op_mov_TN_reg</name><argument_list pos:start="569:30" pos:end="569:40">(<argument pos:start="569:31" pos:end="569:32"><expr pos:start="569:31" pos:end="569:32"><name pos:start="569:31" pos:end="569:32">ot</name></expr></argument>, <argument pos:start="569:35" pos:end="569:35"><expr pos:start="569:35" pos:end="569:35"><literal type="number" pos:start="569:35" pos:end="569:35">0</literal></expr></argument>, <argument pos:start="569:38" pos:end="569:39"><expr pos:start="569:38" pos:end="569:39"><name pos:start="569:38" pos:end="569:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <switch pos:start="575:9" pos:end="993:9">switch<condition pos:start="575:15" pos:end="575:18">(<expr pos:start="575:16" pos:end="575:17"><name pos:start="575:16" pos:end="575:17">op</name></expr>)</condition> <block pos:start="575:20" pos:end="993:9">{<block_content pos:start="577:9" pos:end="991:28">

        <case pos:start="577:9" pos:end="577:15">case <expr pos:start="577:14" pos:end="577:14"><literal type="number" pos:start="577:14" pos:end="577:14">0</literal></expr>:</case> <comment type="block" pos:start="577:17" pos:end="577:26">/* test */</comment>

            <expr_stmt pos:start="579:13" pos:end="579:39"><expr pos:start="579:13" pos:end="579:38"><name pos:start="579:13" pos:end="579:15">val</name> <operator pos:start="579:17" pos:end="579:17">=</operator> <call pos:start="579:19" pos:end="579:38"><name pos:start="579:19" pos:end="579:26">insn_get</name><argument_list pos:start="579:27" pos:end="579:38">(<argument pos:start="579:28" pos:end="579:30"><expr pos:start="579:28" pos:end="579:30"><name pos:start="579:28" pos:end="579:30">env</name></expr></argument>, <argument pos:start="579:33" pos:end="579:33"><expr pos:start="579:33" pos:end="579:33"><name pos:start="579:33" pos:end="579:33">s</name></expr></argument>, <argument pos:start="579:36" pos:end="579:37"><expr pos:start="579:36" pos:end="579:37"><name pos:start="579:36" pos:end="579:37">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="581:13" pos:end="581:35"><expr pos:start="581:13" pos:end="581:34"><call pos:start="581:13" pos:end="581:34"><name pos:start="581:13" pos:end="581:29">gen_op_movl_T1_im</name><argument_list pos:start="581:30" pos:end="581:34">(<argument pos:start="581:31" pos:end="581:33"><expr pos:start="581:31" pos:end="581:33"><name pos:start="581:31" pos:end="581:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="583:13" pos:end="583:36"><expr pos:start="583:13" pos:end="583:35"><call pos:start="583:13" pos:end="583:35"><name pos:start="583:13" pos:end="583:33">gen_op_testl_T0_T1_cc</name><argument_list pos:start="583:34" pos:end="583:35">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="585:13" pos:end="585:41"><expr pos:start="585:13" pos:end="585:40"><name pos:start="585:13" pos:end="585:20"><name pos:start="585:13" pos:end="585:13">s</name><operator pos:start="585:14" pos:end="585:15">-&gt;</operator><name pos:start="585:16" pos:end="585:20">cc_op</name></name> <operator pos:start="585:22" pos:end="585:22">=</operator> <name pos:start="585:24" pos:end="585:35">CC_OP_LOGICB</name> <operator pos:start="585:37" pos:end="585:37">+</operator> <name pos:start="585:39" pos:end="585:40">ot</name></expr>;</expr_stmt>

            <break pos:start="587:13" pos:end="587:18">break;</break>

        <case pos:start="589:9" pos:end="589:15">case <expr pos:start="589:14" pos:end="589:14"><literal type="number" pos:start="589:14" pos:end="589:14">2</literal></expr>:</case> <comment type="block" pos:start="589:17" pos:end="589:25">/* not */</comment>

            <expr_stmt pos:start="591:13" pos:end="591:47"><expr pos:start="591:13" pos:end="591:46"><call pos:start="591:13" pos:end="591:46"><name pos:start="591:13" pos:end="591:26">tcg_gen_not_tl</name><argument_list pos:start="591:27" pos:end="591:46">(<argument pos:start="591:28" pos:end="591:35"><expr pos:start="591:28" pos:end="591:35"><name pos:start="591:28" pos:end="591:35"><name pos:start="591:28" pos:end="591:32">cpu_T</name><index pos:start="591:33" pos:end="591:35">[<expr pos:start="591:34" pos:end="591:34"><literal type="number" pos:start="591:34" pos:end="591:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="591:38" pos:end="591:45"><expr pos:start="591:38" pos:end="591:45"><name pos:start="591:38" pos:end="591:45"><name pos:start="591:38" pos:end="591:42">cpu_T</name><index pos:start="591:43" pos:end="591:45">[<expr pos:start="591:44" pos:end="591:44"><literal type="number" pos:start="591:44" pos:end="591:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="593:13" pos:end="601:13"><if pos:start="593:13" pos:end="597:13">if <condition pos:start="593:16" pos:end="593:25">(<expr pos:start="593:17" pos:end="593:24"><name pos:start="593:17" pos:end="593:19">mod</name> <operator pos:start="593:21" pos:end="593:22">!=</operator> <literal type="number" pos:start="593:24" pos:end="593:24">3</literal></expr>)</condition> <block pos:start="593:27" pos:end="597:13">{<block_content pos:start="595:17" pos:end="595:51">

                <expr_stmt pos:start="595:17" pos:end="595:51"><expr pos:start="595:17" pos:end="595:50"><call pos:start="595:17" pos:end="595:50"><name pos:start="595:17" pos:end="595:31">gen_op_st_T0_A0</name><argument_list pos:start="595:32" pos:end="595:50">(<argument pos:start="595:33" pos:end="595:49"><expr pos:start="595:33" pos:end="595:49"><name pos:start="595:33" pos:end="595:34">ot</name> <operator pos:start="595:36" pos:end="595:36">+</operator> <name pos:start="595:38" pos:end="595:49"><name pos:start="595:38" pos:end="595:38">s</name><operator pos:start="595:39" pos:end="595:40">-&gt;</operator><name pos:start="595:41" pos:end="595:49">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="597:15" pos:end="601:13">else <block pos:start="597:20" pos:end="601:13">{<block_content pos:start="599:17" pos:end="599:42">

                <expr_stmt pos:start="599:17" pos:end="599:42"><expr pos:start="599:17" pos:end="599:41"><call pos:start="599:17" pos:end="599:41"><name pos:start="599:17" pos:end="599:33">gen_op_mov_reg_T0</name><argument_list pos:start="599:34" pos:end="599:41">(<argument pos:start="599:35" pos:end="599:36"><expr pos:start="599:35" pos:end="599:36"><name pos:start="599:35" pos:end="599:36">ot</name></expr></argument>, <argument pos:start="599:39" pos:end="599:40"><expr pos:start="599:39" pos:end="599:40"><name pos:start="599:39" pos:end="599:40">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="603:13" pos:end="603:18">break;</break>

        <case pos:start="605:9" pos:end="605:15">case <expr pos:start="605:14" pos:end="605:14"><literal type="number" pos:start="605:14" pos:end="605:14">3</literal></expr>:</case> <comment type="block" pos:start="605:17" pos:end="605:25">/* neg */</comment>

            <expr_stmt pos:start="607:13" pos:end="607:47"><expr pos:start="607:13" pos:end="607:46"><call pos:start="607:13" pos:end="607:46"><name pos:start="607:13" pos:end="607:26">tcg_gen_neg_tl</name><argument_list pos:start="607:27" pos:end="607:46">(<argument pos:start="607:28" pos:end="607:35"><expr pos:start="607:28" pos:end="607:35"><name pos:start="607:28" pos:end="607:35"><name pos:start="607:28" pos:end="607:32">cpu_T</name><index pos:start="607:33" pos:end="607:35">[<expr pos:start="607:34" pos:end="607:34"><literal type="number" pos:start="607:34" pos:end="607:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="607:38" pos:end="607:45"><expr pos:start="607:38" pos:end="607:45"><name pos:start="607:38" pos:end="607:45"><name pos:start="607:38" pos:end="607:42">cpu_T</name><index pos:start="607:43" pos:end="607:45">[<expr pos:start="607:44" pos:end="607:44"><literal type="number" pos:start="607:44" pos:end="607:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="609:13" pos:end="617:13"><if pos:start="609:13" pos:end="613:13">if <condition pos:start="609:16" pos:end="609:25">(<expr pos:start="609:17" pos:end="609:24"><name pos:start="609:17" pos:end="609:19">mod</name> <operator pos:start="609:21" pos:end="609:22">!=</operator> <literal type="number" pos:start="609:24" pos:end="609:24">3</literal></expr>)</condition> <block pos:start="609:27" pos:end="613:13">{<block_content pos:start="611:17" pos:end="611:51">

                <expr_stmt pos:start="611:17" pos:end="611:51"><expr pos:start="611:17" pos:end="611:50"><call pos:start="611:17" pos:end="611:50"><name pos:start="611:17" pos:end="611:31">gen_op_st_T0_A0</name><argument_list pos:start="611:32" pos:end="611:50">(<argument pos:start="611:33" pos:end="611:49"><expr pos:start="611:33" pos:end="611:49"><name pos:start="611:33" pos:end="611:34">ot</name> <operator pos:start="611:36" pos:end="611:36">+</operator> <name pos:start="611:38" pos:end="611:49"><name pos:start="611:38" pos:end="611:38">s</name><operator pos:start="611:39" pos:end="611:40">-&gt;</operator><name pos:start="611:41" pos:end="611:49">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="613:15" pos:end="617:13">else <block pos:start="613:20" pos:end="617:13">{<block_content pos:start="615:17" pos:end="615:42">

                <expr_stmt pos:start="615:17" pos:end="615:42"><expr pos:start="615:17" pos:end="615:41"><call pos:start="615:17" pos:end="615:41"><name pos:start="615:17" pos:end="615:33">gen_op_mov_reg_T0</name><argument_list pos:start="615:34" pos:end="615:41">(<argument pos:start="615:35" pos:end="615:36"><expr pos:start="615:35" pos:end="615:36"><name pos:start="615:35" pos:end="615:36">ot</name></expr></argument>, <argument pos:start="615:39" pos:end="615:40"><expr pos:start="615:39" pos:end="615:40"><name pos:start="615:39" pos:end="615:40">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="619:13" pos:end="619:35"><expr pos:start="619:13" pos:end="619:34"><call pos:start="619:13" pos:end="619:34"><name pos:start="619:13" pos:end="619:32">gen_op_update_neg_cc</name><argument_list pos:start="619:33" pos:end="619:34">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="621:13" pos:end="621:39"><expr pos:start="621:13" pos:end="621:38"><name pos:start="621:13" pos:end="621:20"><name pos:start="621:13" pos:end="621:13">s</name><operator pos:start="621:14" pos:end="621:15">-&gt;</operator><name pos:start="621:16" pos:end="621:20">cc_op</name></name> <operator pos:start="621:22" pos:end="621:22">=</operator> <name pos:start="621:24" pos:end="621:33">CC_OP_SUBB</name> <operator pos:start="621:35" pos:end="621:35">+</operator> <name pos:start="621:37" pos:end="621:38">ot</name></expr>;</expr_stmt>

            <break pos:start="623:13" pos:end="623:18">break;</break>

        <case pos:start="625:9" pos:end="625:15">case <expr pos:start="625:14" pos:end="625:14"><literal type="number" pos:start="625:14" pos:end="625:14">4</literal></expr>:</case> <comment type="block" pos:start="625:17" pos:end="625:25">/* mul */</comment>

            <switch pos:start="627:13" pos:end="753:13">switch<condition pos:start="627:19" pos:end="627:22">(<expr pos:start="627:20" pos:end="627:21"><name pos:start="627:20" pos:end="627:21">ot</name></expr>)</condition> <block pos:start="627:24" pos:end="753:13">{<block_content pos:start="629:13" pos:end="752:0">

            <case pos:start="629:13" pos:end="629:25">case <expr pos:start="629:18" pos:end="629:24"><name pos:start="629:18" pos:end="629:24">OT_BYTE</name></expr>:</case>

                <expr_stmt pos:start="631:17" pos:end="631:53"><expr pos:start="631:17" pos:end="631:52"><call pos:start="631:17" pos:end="631:52"><name pos:start="631:17" pos:end="631:33">gen_op_mov_TN_reg</name><argument_list pos:start="631:34" pos:end="631:52">(<argument pos:start="631:35" pos:end="631:41"><expr pos:start="631:35" pos:end="631:41"><name pos:start="631:35" pos:end="631:41">OT_BYTE</name></expr></argument>, <argument pos:start="631:44" pos:end="631:44"><expr pos:start="631:44" pos:end="631:44"><literal type="number" pos:start="631:44" pos:end="631:44">1</literal></expr></argument>, <argument pos:start="631:47" pos:end="631:51"><expr pos:start="631:47" pos:end="631:51"><name pos:start="631:47" pos:end="631:51">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="633:17" pos:end="633:53"><expr pos:start="633:17" pos:end="633:52"><call pos:start="633:17" pos:end="633:52"><name pos:start="633:17" pos:end="633:32">tcg_gen_ext8u_tl</name><argument_list pos:start="633:33" pos:end="633:52">(<argument pos:start="633:34" pos:end="633:41"><expr pos:start="633:34" pos:end="633:41"><name pos:start="633:34" pos:end="633:41"><name pos:start="633:34" pos:end="633:38">cpu_T</name><index pos:start="633:39" pos:end="633:41">[<expr pos:start="633:40" pos:end="633:40"><literal type="number" pos:start="633:40" pos:end="633:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="633:44" pos:end="633:51"><expr pos:start="633:44" pos:end="633:51"><name pos:start="633:44" pos:end="633:51"><name pos:start="633:44" pos:end="633:48">cpu_T</name><index pos:start="633:49" pos:end="633:51">[<expr pos:start="633:50" pos:end="633:50"><literal type="number" pos:start="633:50" pos:end="633:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="635:17" pos:end="635:53"><expr pos:start="635:17" pos:end="635:52"><call pos:start="635:17" pos:end="635:52"><name pos:start="635:17" pos:end="635:32">tcg_gen_ext8u_tl</name><argument_list pos:start="635:33" pos:end="635:52">(<argument pos:start="635:34" pos:end="635:41"><expr pos:start="635:34" pos:end="635:41"><name pos:start="635:34" pos:end="635:41"><name pos:start="635:34" pos:end="635:38">cpu_T</name><index pos:start="635:39" pos:end="635:41">[<expr pos:start="635:40" pos:end="635:40"><literal type="number" pos:start="635:40" pos:end="635:40">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="635:44" pos:end="635:51"><expr pos:start="635:44" pos:end="635:51"><name pos:start="635:44" pos:end="635:51"><name pos:start="635:44" pos:end="635:48">cpu_T</name><index pos:start="635:49" pos:end="635:51">[<expr pos:start="635:50" pos:end="635:50"><literal type="number" pos:start="635:50" pos:end="635:50">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="637:17" pos:end="637:63">/* XXX: use 32 bit mul which could be faster */</comment>

                <expr_stmt pos:start="639:17" pos:end="639:61"><expr pos:start="639:17" pos:end="639:60"><call pos:start="639:17" pos:end="639:60"><name pos:start="639:17" pos:end="639:30">tcg_gen_mul_tl</name><argument_list pos:start="639:31" pos:end="639:60">(<argument pos:start="639:32" pos:end="639:39"><expr pos:start="639:32" pos:end="639:39"><name pos:start="639:32" pos:end="639:39"><name pos:start="639:32" pos:end="639:36">cpu_T</name><index pos:start="639:37" pos:end="639:39">[<expr pos:start="639:38" pos:end="639:38"><literal type="number" pos:start="639:38" pos:end="639:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="639:42" pos:end="639:49"><expr pos:start="639:42" pos:end="639:49"><name pos:start="639:42" pos:end="639:49"><name pos:start="639:42" pos:end="639:46">cpu_T</name><index pos:start="639:47" pos:end="639:49">[<expr pos:start="639:48" pos:end="639:48"><literal type="number" pos:start="639:48" pos:end="639:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="639:52" pos:end="639:59"><expr pos:start="639:52" pos:end="639:59"><name pos:start="639:52" pos:end="639:59"><name pos:start="639:52" pos:end="639:56">cpu_T</name><index pos:start="639:57" pos:end="639:59">[<expr pos:start="639:58" pos:end="639:58"><literal type="number" pos:start="639:58" pos:end="639:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="641:17" pos:end="641:50"><expr pos:start="641:17" pos:end="641:49"><call pos:start="641:17" pos:end="641:49"><name pos:start="641:17" pos:end="641:33">gen_op_mov_reg_T0</name><argument_list pos:start="641:34" pos:end="641:49">(<argument pos:start="641:35" pos:end="641:41"><expr pos:start="641:35" pos:end="641:41"><name pos:start="641:35" pos:end="641:41">OT_WORD</name></expr></argument>, <argument pos:start="641:44" pos:end="641:48"><expr pos:start="641:44" pos:end="641:48"><name pos:start="641:44" pos:end="641:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="643:17" pos:end="643:53"><expr pos:start="643:17" pos:end="643:52"><call pos:start="643:17" pos:end="643:52"><name pos:start="643:17" pos:end="643:30">tcg_gen_mov_tl</name><argument_list pos:start="643:31" pos:end="643:52">(<argument pos:start="643:32" pos:end="643:41"><expr pos:start="643:32" pos:end="643:41"><name pos:start="643:32" pos:end="643:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="643:44" pos:end="643:51"><expr pos:start="643:44" pos:end="643:51"><name pos:start="643:44" pos:end="643:51"><name pos:start="643:44" pos:end="643:48">cpu_T</name><index pos:start="643:49" pos:end="643:51">[<expr pos:start="643:50" pos:end="643:50"><literal type="number" pos:start="643:50" pos:end="643:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="645:17" pos:end="645:62"><expr pos:start="645:17" pos:end="645:61"><call pos:start="645:17" pos:end="645:61"><name pos:start="645:17" pos:end="645:31">tcg_gen_andi_tl</name><argument_list pos:start="645:32" pos:end="645:61">(<argument pos:start="645:33" pos:end="645:42"><expr pos:start="645:33" pos:end="645:42"><name pos:start="645:33" pos:end="645:42">cpu_cc_src</name></expr></argument>, <argument pos:start="645:45" pos:end="645:52"><expr pos:start="645:45" pos:end="645:52"><name pos:start="645:45" pos:end="645:52"><name pos:start="645:45" pos:end="645:49">cpu_T</name><index pos:start="645:50" pos:end="645:52">[<expr pos:start="645:51" pos:end="645:51"><literal type="number" pos:start="645:51" pos:end="645:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="645:55" pos:end="645:60"><expr pos:start="645:55" pos:end="645:60"><literal type="number" pos:start="645:55" pos:end="645:60">0xff00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="647:17" pos:end="647:38"><expr pos:start="647:17" pos:end="647:37"><name pos:start="647:17" pos:end="647:24"><name pos:start="647:17" pos:end="647:17">s</name><operator pos:start="647:18" pos:end="647:19">-&gt;</operator><name pos:start="647:20" pos:end="647:24">cc_op</name></name> <operator pos:start="647:26" pos:end="647:26">=</operator> <name pos:start="647:28" pos:end="647:37">CC_OP_MULB</name></expr>;</expr_stmt>

                <break pos:start="649:17" pos:end="649:22">break;</break>

            <case pos:start="651:13" pos:end="651:25">case <expr pos:start="651:18" pos:end="651:24"><name pos:start="651:18" pos:end="651:24">OT_WORD</name></expr>:</case>

                <expr_stmt pos:start="653:17" pos:end="653:53"><expr pos:start="653:17" pos:end="653:52"><call pos:start="653:17" pos:end="653:52"><name pos:start="653:17" pos:end="653:33">gen_op_mov_TN_reg</name><argument_list pos:start="653:34" pos:end="653:52">(<argument pos:start="653:35" pos:end="653:41"><expr pos:start="653:35" pos:end="653:41"><name pos:start="653:35" pos:end="653:41">OT_WORD</name></expr></argument>, <argument pos:start="653:44" pos:end="653:44"><expr pos:start="653:44" pos:end="653:44"><literal type="number" pos:start="653:44" pos:end="653:44">1</literal></expr></argument>, <argument pos:start="653:47" pos:end="653:51"><expr pos:start="653:47" pos:end="653:51"><name pos:start="653:47" pos:end="653:51">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="655:17" pos:end="655:54"><expr pos:start="655:17" pos:end="655:53"><call pos:start="655:17" pos:end="655:53"><name pos:start="655:17" pos:end="655:33">tcg_gen_ext16u_tl</name><argument_list pos:start="655:34" pos:end="655:53">(<argument pos:start="655:35" pos:end="655:42"><expr pos:start="655:35" pos:end="655:42"><name pos:start="655:35" pos:end="655:42"><name pos:start="655:35" pos:end="655:39">cpu_T</name><index pos:start="655:40" pos:end="655:42">[<expr pos:start="655:41" pos:end="655:41"><literal type="number" pos:start="655:41" pos:end="655:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="655:45" pos:end="655:52"><expr pos:start="655:45" pos:end="655:52"><name pos:start="655:45" pos:end="655:52"><name pos:start="655:45" pos:end="655:49">cpu_T</name><index pos:start="655:50" pos:end="655:52">[<expr pos:start="655:51" pos:end="655:51"><literal type="number" pos:start="655:51" pos:end="655:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="657:17" pos:end="657:54"><expr pos:start="657:17" pos:end="657:53"><call pos:start="657:17" pos:end="657:53"><name pos:start="657:17" pos:end="657:33">tcg_gen_ext16u_tl</name><argument_list pos:start="657:34" pos:end="657:53">(<argument pos:start="657:35" pos:end="657:42"><expr pos:start="657:35" pos:end="657:42"><name pos:start="657:35" pos:end="657:42"><name pos:start="657:35" pos:end="657:39">cpu_T</name><index pos:start="657:40" pos:end="657:42">[<expr pos:start="657:41" pos:end="657:41"><literal type="number" pos:start="657:41" pos:end="657:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="657:45" pos:end="657:52"><expr pos:start="657:45" pos:end="657:52"><name pos:start="657:45" pos:end="657:52"><name pos:start="657:45" pos:end="657:49">cpu_T</name><index pos:start="657:50" pos:end="657:52">[<expr pos:start="657:51" pos:end="657:51"><literal type="number" pos:start="657:51" pos:end="657:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="659:17" pos:end="659:63">/* XXX: use 32 bit mul which could be faster */</comment>

                <expr_stmt pos:start="661:17" pos:end="661:61"><expr pos:start="661:17" pos:end="661:60"><call pos:start="661:17" pos:end="661:60"><name pos:start="661:17" pos:end="661:30">tcg_gen_mul_tl</name><argument_list pos:start="661:31" pos:end="661:60">(<argument pos:start="661:32" pos:end="661:39"><expr pos:start="661:32" pos:end="661:39"><name pos:start="661:32" pos:end="661:39"><name pos:start="661:32" pos:end="661:36">cpu_T</name><index pos:start="661:37" pos:end="661:39">[<expr pos:start="661:38" pos:end="661:38"><literal type="number" pos:start="661:38" pos:end="661:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="661:42" pos:end="661:49"><expr pos:start="661:42" pos:end="661:49"><name pos:start="661:42" pos:end="661:49"><name pos:start="661:42" pos:end="661:46">cpu_T</name><index pos:start="661:47" pos:end="661:49">[<expr pos:start="661:48" pos:end="661:48"><literal type="number" pos:start="661:48" pos:end="661:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="661:52" pos:end="661:59"><expr pos:start="661:52" pos:end="661:59"><name pos:start="661:52" pos:end="661:59"><name pos:start="661:52" pos:end="661:56">cpu_T</name><index pos:start="661:57" pos:end="661:59">[<expr pos:start="661:58" pos:end="661:58"><literal type="number" pos:start="661:58" pos:end="661:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="663:17" pos:end="663:50"><expr pos:start="663:17" pos:end="663:49"><call pos:start="663:17" pos:end="663:49"><name pos:start="663:17" pos:end="663:33">gen_op_mov_reg_T0</name><argument_list pos:start="663:34" pos:end="663:49">(<argument pos:start="663:35" pos:end="663:41"><expr pos:start="663:35" pos:end="663:41"><name pos:start="663:35" pos:end="663:41">OT_WORD</name></expr></argument>, <argument pos:start="663:44" pos:end="663:48"><expr pos:start="663:44" pos:end="663:48"><name pos:start="663:44" pos:end="663:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="665:17" pos:end="665:53"><expr pos:start="665:17" pos:end="665:52"><call pos:start="665:17" pos:end="665:52"><name pos:start="665:17" pos:end="665:30">tcg_gen_mov_tl</name><argument_list pos:start="665:31" pos:end="665:52">(<argument pos:start="665:32" pos:end="665:41"><expr pos:start="665:32" pos:end="665:41"><name pos:start="665:32" pos:end="665:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="665:44" pos:end="665:51"><expr pos:start="665:44" pos:end="665:51"><name pos:start="665:44" pos:end="665:51"><name pos:start="665:44" pos:end="665:48">cpu_T</name><index pos:start="665:49" pos:end="665:51">[<expr pos:start="665:50" pos:end="665:50"><literal type="number" pos:start="665:50" pos:end="665:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="667:17" pos:end="667:56"><expr pos:start="667:17" pos:end="667:55"><call pos:start="667:17" pos:end="667:55"><name pos:start="667:17" pos:end="667:31">tcg_gen_shri_tl</name><argument_list pos:start="667:32" pos:end="667:55">(<argument pos:start="667:33" pos:end="667:40"><expr pos:start="667:33" pos:end="667:40"><name pos:start="667:33" pos:end="667:40"><name pos:start="667:33" pos:end="667:37">cpu_T</name><index pos:start="667:38" pos:end="667:40">[<expr pos:start="667:39" pos:end="667:39"><literal type="number" pos:start="667:39" pos:end="667:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="667:43" pos:end="667:50"><expr pos:start="667:43" pos:end="667:50"><name pos:start="667:43" pos:end="667:50"><name pos:start="667:43" pos:end="667:47">cpu_T</name><index pos:start="667:48" pos:end="667:50">[<expr pos:start="667:49" pos:end="667:49"><literal type="number" pos:start="667:49" pos:end="667:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="667:53" pos:end="667:54"><expr pos:start="667:53" pos:end="667:54"><literal type="number" pos:start="667:53" pos:end="667:54">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="669:17" pos:end="669:50"><expr pos:start="669:17" pos:end="669:49"><call pos:start="669:17" pos:end="669:49"><name pos:start="669:17" pos:end="669:33">gen_op_mov_reg_T0</name><argument_list pos:start="669:34" pos:end="669:49">(<argument pos:start="669:35" pos:end="669:41"><expr pos:start="669:35" pos:end="669:41"><name pos:start="669:35" pos:end="669:41">OT_WORD</name></expr></argument>, <argument pos:start="669:44" pos:end="669:48"><expr pos:start="669:44" pos:end="669:48"><name pos:start="669:44" pos:end="669:48">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="671:17" pos:end="671:53"><expr pos:start="671:17" pos:end="671:52"><call pos:start="671:17" pos:end="671:52"><name pos:start="671:17" pos:end="671:30">tcg_gen_mov_tl</name><argument_list pos:start="671:31" pos:end="671:52">(<argument pos:start="671:32" pos:end="671:41"><expr pos:start="671:32" pos:end="671:41"><name pos:start="671:32" pos:end="671:41">cpu_cc_src</name></expr></argument>, <argument pos:start="671:44" pos:end="671:51"><expr pos:start="671:44" pos:end="671:51"><name pos:start="671:44" pos:end="671:51"><name pos:start="671:44" pos:end="671:48">cpu_T</name><index pos:start="671:49" pos:end="671:51">[<expr pos:start="671:50" pos:end="671:50"><literal type="number" pos:start="671:50" pos:end="671:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="673:17" pos:end="673:38"><expr pos:start="673:17" pos:end="673:37"><name pos:start="673:17" pos:end="673:24"><name pos:start="673:17" pos:end="673:17">s</name><operator pos:start="673:18" pos:end="673:19">-&gt;</operator><name pos:start="673:20" pos:end="673:24">cc_op</name></name> <operator pos:start="673:26" pos:end="673:26">=</operator> <name pos:start="673:28" pos:end="673:37">CC_OP_MULW</name></expr>;</expr_stmt>

                <break pos:start="675:17" pos:end="675:22">break;</break>

            <default pos:start="677:13" pos:end="677:20">default:</default>

            <case pos:start="679:13" pos:end="682:0">case <expr pos:start="679:18" pos:end="679:24"><name pos:start="679:18" pos:end="679:24">OT_LONG</name></expr>:</case>

<cpp:ifdef pos:start="681:1" pos:end="681:20">#<cpp:directive pos:start="681:2" pos:end="681:6">ifdef</cpp:directive> <name pos:start="681:8" pos:end="681:20">TARGET_X86_64</name></cpp:ifdef>

                <expr_stmt pos:start="683:17" pos:end="683:53"><expr pos:start="683:17" pos:end="683:52"><call pos:start="683:17" pos:end="683:52"><name pos:start="683:17" pos:end="683:33">gen_op_mov_TN_reg</name><argument_list pos:start="683:34" pos:end="683:52">(<argument pos:start="683:35" pos:end="683:41"><expr pos:start="683:35" pos:end="683:41"><name pos:start="683:35" pos:end="683:41">OT_LONG</name></expr></argument>, <argument pos:start="683:44" pos:end="683:44"><expr pos:start="683:44" pos:end="683:44"><literal type="number" pos:start="683:44" pos:end="683:44">1</literal></expr></argument>, <argument pos:start="683:47" pos:end="683:51"><expr pos:start="683:47" pos:end="683:51"><name pos:start="683:47" pos:end="683:51">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="685:17" pos:end="685:54"><expr pos:start="685:17" pos:end="685:53"><call pos:start="685:17" pos:end="685:53"><name pos:start="685:17" pos:end="685:33">tcg_gen_ext32u_tl</name><argument_list pos:start="685:34" pos:end="685:53">(<argument pos:start="685:35" pos:end="685:42"><expr pos:start="685:35" pos:end="685:42"><name pos:start="685:35" pos:end="685:42"><name pos:start="685:35" pos:end="685:39">cpu_T</name><index pos:start="685:40" pos:end="685:42">[<expr pos:start="685:41" pos:end="685:41"><literal type="number" pos:start="685:41" pos:end="685:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="685:45" pos:end="685:52"><expr pos:start="685:45" pos:end="685:52"><name pos:start="685:45" pos:end="685:52"><name pos:start="685:45" pos:end="685:49">cpu_T</name><index pos:start="685:50" pos:end="685:52">[<expr pos:start="685:51" pos:end="685:51"><literal type="number" pos:start="685:51" pos:end="685:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="687:17" pos:end="687:54"><expr pos:start="687:17" pos:end="687:53"><call pos:start="687:17" pos:end="687:53"><name pos:start="687:17" pos:end="687:33">tcg_gen_ext32u_tl</name><argument_list pos:start="687:34" pos:end="687:53">(<argument pos:start="687:35" pos:end="687:42"><expr pos:start="687:35" pos:end="687:42"><name pos:start="687:35" pos:end="687:42"><name pos:start="687:35" pos:end="687:39">cpu_T</name><index pos:start="687:40" pos:end="687:42">[<expr pos:start="687:41" pos:end="687:41"><literal type="number" pos:start="687:41" pos:end="687:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="687:45" pos:end="687:52"><expr pos:start="687:45" pos:end="687:52"><name pos:start="687:45" pos:end="687:52"><name pos:start="687:45" pos:end="687:49">cpu_T</name><index pos:start="687:50" pos:end="687:52">[<expr pos:start="687:51" pos:end="687:51"><literal type="number" pos:start="687:51" pos:end="687:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="689:17" pos:end="689:61"><expr pos:start="689:17" pos:end="689:60"><call pos:start="689:17" pos:end="689:60"><name pos:start="689:17" pos:end="689:30">tcg_gen_mul_tl</name><argument_list pos:start="689:31" pos:end="689:60">(<argument pos:start="689:32" pos:end="689:39"><expr pos:start="689:32" pos:end="689:39"><name pos:start="689:32" pos:end="689:39"><name pos:start="689:32" pos:end="689:36">cpu_T</name><index pos:start="689:37" pos:end="689:39">[<expr pos:start="689:38" pos:end="689:38"><literal type="number" pos:start="689:38" pos:end="689:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="689:42" pos:end="689:49"><expr pos:start="689:42" pos:end="689:49"><name pos:start="689:42" pos:end="689:49"><name pos:start="689:42" pos:end="689:46">cpu_T</name><index pos:start="689:47" pos:end="689:49">[<expr pos:start="689:48" pos:end="689:48"><literal type="number" pos:start="689:48" pos:end="689:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="689:52" pos:end="689:59"><expr pos:start="689:52" pos:end="689:59"><name pos:start="689:52" pos:end="689:59"><name pos:start="689:52" pos:end="689:56">cpu_T</name><index pos:start="689:57" pos:end="689:59">[<expr pos:start="689:58" pos:end="689:58"><literal type="number" pos:start="689:58" pos:end="689:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="691:17" pos:end="691:50"><expr pos:start="691:17" pos:end="691:49"><call pos:start="691:17" pos:end="691:49"><name pos:start="691:17" pos:end="691:33">gen_op_mov_reg_T0</name><argument_list pos:start="691:34" pos:end="691:49">(<argument pos:start="691:35" pos:end="691:41"><expr pos:start="691:35" pos:end="691:41"><name pos:start="691:35" pos:end="691:41">OT_LONG</name></expr></argument>, <argument pos:start="691:44" pos:end="691:48"><expr pos:start="691:44" pos:end="691:48"><name pos:start="691:44" pos:end="691:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="693:17" pos:end="693:53"><expr pos:start="693:17" pos:end="693:52"><call pos:start="693:17" pos:end="693:52"><name pos:start="693:17" pos:end="693:30">tcg_gen_mov_tl</name><argument_list pos:start="693:31" pos:end="693:52">(<argument pos:start="693:32" pos:end="693:41"><expr pos:start="693:32" pos:end="693:41"><name pos:start="693:32" pos:end="693:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="693:44" pos:end="693:51"><expr pos:start="693:44" pos:end="693:51"><name pos:start="693:44" pos:end="693:51"><name pos:start="693:44" pos:end="693:48">cpu_T</name><index pos:start="693:49" pos:end="693:51">[<expr pos:start="693:50" pos:end="693:50"><literal type="number" pos:start="693:50" pos:end="693:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="695:17" pos:end="695:56"><expr pos:start="695:17" pos:end="695:55"><call pos:start="695:17" pos:end="695:55"><name pos:start="695:17" pos:end="695:31">tcg_gen_shri_tl</name><argument_list pos:start="695:32" pos:end="695:55">(<argument pos:start="695:33" pos:end="695:40"><expr pos:start="695:33" pos:end="695:40"><name pos:start="695:33" pos:end="695:40"><name pos:start="695:33" pos:end="695:37">cpu_T</name><index pos:start="695:38" pos:end="695:40">[<expr pos:start="695:39" pos:end="695:39"><literal type="number" pos:start="695:39" pos:end="695:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="695:43" pos:end="695:50"><expr pos:start="695:43" pos:end="695:50"><name pos:start="695:43" pos:end="695:50"><name pos:start="695:43" pos:end="695:47">cpu_T</name><index pos:start="695:48" pos:end="695:50">[<expr pos:start="695:49" pos:end="695:49"><literal type="number" pos:start="695:49" pos:end="695:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="695:53" pos:end="695:54"><expr pos:start="695:53" pos:end="695:54"><literal type="number" pos:start="695:53" pos:end="695:54">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="697:17" pos:end="697:50"><expr pos:start="697:17" pos:end="697:49"><call pos:start="697:17" pos:end="697:49"><name pos:start="697:17" pos:end="697:33">gen_op_mov_reg_T0</name><argument_list pos:start="697:34" pos:end="697:49">(<argument pos:start="697:35" pos:end="697:41"><expr pos:start="697:35" pos:end="697:41"><name pos:start="697:35" pos:end="697:41">OT_LONG</name></expr></argument>, <argument pos:start="697:44" pos:end="697:48"><expr pos:start="697:44" pos:end="697:48"><name pos:start="697:44" pos:end="697:48">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="699:17" pos:end="702:0"><expr pos:start="699:17" pos:end="699:52"><call pos:start="699:17" pos:end="699:52"><name pos:start="699:17" pos:end="699:30">tcg_gen_mov_tl</name><argument_list pos:start="699:31" pos:end="699:52">(<argument pos:start="699:32" pos:end="699:41"><expr pos:start="699:32" pos:end="699:41"><name pos:start="699:32" pos:end="699:41">cpu_cc_src</name></expr></argument>, <argument pos:start="699:44" pos:end="699:51"><expr pos:start="699:44" pos:end="699:51"><name pos:start="699:44" pos:end="699:51"><name pos:start="699:44" pos:end="699:48">cpu_T</name><index pos:start="699:49" pos:end="699:51">[<expr pos:start="699:50" pos:end="699:50"><literal type="number" pos:start="699:50" pos:end="699:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="701:1" pos:end="701:5">#<cpp:directive pos:start="701:2" pos:end="701:5">else</cpp:directive></cpp:else>

                <block pos:start="703:17" pos:end="736:0">{<block_content pos:start="705:21" pos:end="731:57">

                    <decl_stmt pos:start="705:21" pos:end="705:36"><decl pos:start="705:21" pos:end="705:31"><type pos:start="705:21" pos:end="705:28"><name pos:start="705:21" pos:end="705:28">TCGv_i64</name></type> <name pos:start="705:30" pos:end="705:31">t0</name></decl>, <decl pos:start="705:34" pos:end="705:35"><type ref="prev" pos:start="705:21" pos:end="705:28"/><name pos:start="705:34" pos:end="705:35">t1</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="707:21" pos:end="707:44"><expr pos:start="707:21" pos:end="707:43"><name pos:start="707:21" pos:end="707:22">t0</name> <operator pos:start="707:24" pos:end="707:24">=</operator> <call pos:start="707:26" pos:end="707:43"><name pos:start="707:26" pos:end="707:41">tcg_temp_new_i64</name><argument_list pos:start="707:42" pos:end="707:43">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="709:21" pos:end="709:44"><expr pos:start="709:21" pos:end="709:43"><name pos:start="709:21" pos:end="709:22">t1</name> <operator pos:start="709:24" pos:end="709:24">=</operator> <call pos:start="709:26" pos:end="709:43"><name pos:start="709:26" pos:end="709:41">tcg_temp_new_i64</name><argument_list pos:start="709:42" pos:end="709:43">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="711:21" pos:end="711:57"><expr pos:start="711:21" pos:end="711:56"><call pos:start="711:21" pos:end="711:56"><name pos:start="711:21" pos:end="711:37">gen_op_mov_TN_reg</name><argument_list pos:start="711:38" pos:end="711:56">(<argument pos:start="711:39" pos:end="711:45"><expr pos:start="711:39" pos:end="711:45"><name pos:start="711:39" pos:end="711:45">OT_LONG</name></expr></argument>, <argument pos:start="711:48" pos:end="711:48"><expr pos:start="711:48" pos:end="711:48"><literal type="number" pos:start="711:48" pos:end="711:48">1</literal></expr></argument>, <argument pos:start="711:51" pos:end="711:55"><expr pos:start="711:51" pos:end="711:55"><name pos:start="711:51" pos:end="711:55">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="713:21" pos:end="713:55"><expr pos:start="713:21" pos:end="713:54"><call pos:start="713:21" pos:end="713:54"><name pos:start="713:21" pos:end="713:40">tcg_gen_extu_i32_i64</name><argument_list pos:start="713:41" pos:end="713:54">(<argument pos:start="713:42" pos:end="713:43"><expr pos:start="713:42" pos:end="713:43"><name pos:start="713:42" pos:end="713:43">t0</name></expr></argument>, <argument pos:start="713:46" pos:end="713:53"><expr pos:start="713:46" pos:end="713:53"><name pos:start="713:46" pos:end="713:53"><name pos:start="713:46" pos:end="713:50">cpu_T</name><index pos:start="713:51" pos:end="713:53">[<expr pos:start="713:52" pos:end="713:52"><literal type="number" pos:start="713:52" pos:end="713:52">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="715:21" pos:end="715:55"><expr pos:start="715:21" pos:end="715:54"><call pos:start="715:21" pos:end="715:54"><name pos:start="715:21" pos:end="715:40">tcg_gen_extu_i32_i64</name><argument_list pos:start="715:41" pos:end="715:54">(<argument pos:start="715:42" pos:end="715:43"><expr pos:start="715:42" pos:end="715:43"><name pos:start="715:42" pos:end="715:43">t1</name></expr></argument>, <argument pos:start="715:46" pos:end="715:53"><expr pos:start="715:46" pos:end="715:53"><name pos:start="715:46" pos:end="715:53"><name pos:start="715:46" pos:end="715:50">cpu_T</name><index pos:start="715:51" pos:end="715:53">[<expr pos:start="715:52" pos:end="715:52"><literal type="number" pos:start="715:52" pos:end="715:52">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="717:21" pos:end="717:48"><expr pos:start="717:21" pos:end="717:47"><call pos:start="717:21" pos:end="717:47"><name pos:start="717:21" pos:end="717:35">tcg_gen_mul_i64</name><argument_list pos:start="717:36" pos:end="717:47">(<argument pos:start="717:37" pos:end="717:38"><expr pos:start="717:37" pos:end="717:38"><name pos:start="717:37" pos:end="717:38">t0</name></expr></argument>, <argument pos:start="717:41" pos:end="717:42"><expr pos:start="717:41" pos:end="717:42"><name pos:start="717:41" pos:end="717:42">t0</name></expr></argument>, <argument pos:start="717:45" pos:end="717:46"><expr pos:start="717:45" pos:end="717:46"><name pos:start="717:45" pos:end="717:46">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="719:21" pos:end="719:56"><expr pos:start="719:21" pos:end="719:55"><call pos:start="719:21" pos:end="719:55"><name pos:start="719:21" pos:end="719:41">tcg_gen_trunc_i64_i32</name><argument_list pos:start="719:42" pos:end="719:55">(<argument pos:start="719:43" pos:end="719:50"><expr pos:start="719:43" pos:end="719:50"><name pos:start="719:43" pos:end="719:50"><name pos:start="719:43" pos:end="719:47">cpu_T</name><index pos:start="719:48" pos:end="719:50">[<expr pos:start="719:49" pos:end="719:49"><literal type="number" pos:start="719:49" pos:end="719:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="719:53" pos:end="719:54"><expr pos:start="719:53" pos:end="719:54"><name pos:start="719:53" pos:end="719:54">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="721:21" pos:end="721:54"><expr pos:start="721:21" pos:end="721:53"><call pos:start="721:21" pos:end="721:53"><name pos:start="721:21" pos:end="721:37">gen_op_mov_reg_T0</name><argument_list pos:start="721:38" pos:end="721:53">(<argument pos:start="721:39" pos:end="721:45"><expr pos:start="721:39" pos:end="721:45"><name pos:start="721:39" pos:end="721:45">OT_LONG</name></expr></argument>, <argument pos:start="721:48" pos:end="721:52"><expr pos:start="721:48" pos:end="721:52"><name pos:start="721:48" pos:end="721:52">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="723:21" pos:end="723:57"><expr pos:start="723:21" pos:end="723:56"><call pos:start="723:21" pos:end="723:56"><name pos:start="723:21" pos:end="723:34">tcg_gen_mov_tl</name><argument_list pos:start="723:35" pos:end="723:56">(<argument pos:start="723:36" pos:end="723:45"><expr pos:start="723:36" pos:end="723:45"><name pos:start="723:36" pos:end="723:45">cpu_cc_dst</name></expr></argument>, <argument pos:start="723:48" pos:end="723:55"><expr pos:start="723:48" pos:end="723:55"><name pos:start="723:48" pos:end="723:55"><name pos:start="723:48" pos:end="723:52">cpu_T</name><index pos:start="723:53" pos:end="723:55">[<expr pos:start="723:54" pos:end="723:54"><literal type="number" pos:start="723:54" pos:end="723:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="725:21" pos:end="725:49"><expr pos:start="725:21" pos:end="725:48"><call pos:start="725:21" pos:end="725:48"><name pos:start="725:21" pos:end="725:36">tcg_gen_shri_i64</name><argument_list pos:start="725:37" pos:end="725:48">(<argument pos:start="725:38" pos:end="725:39"><expr pos:start="725:38" pos:end="725:39"><name pos:start="725:38" pos:end="725:39">t0</name></expr></argument>, <argument pos:start="725:42" pos:end="725:43"><expr pos:start="725:42" pos:end="725:43"><name pos:start="725:42" pos:end="725:43">t0</name></expr></argument>, <argument pos:start="725:46" pos:end="725:47"><expr pos:start="725:46" pos:end="725:47"><literal type="number" pos:start="725:46" pos:end="725:47">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="727:21" pos:end="727:56"><expr pos:start="727:21" pos:end="727:55"><call pos:start="727:21" pos:end="727:55"><name pos:start="727:21" pos:end="727:41">tcg_gen_trunc_i64_i32</name><argument_list pos:start="727:42" pos:end="727:55">(<argument pos:start="727:43" pos:end="727:50"><expr pos:start="727:43" pos:end="727:50"><name pos:start="727:43" pos:end="727:50"><name pos:start="727:43" pos:end="727:47">cpu_T</name><index pos:start="727:48" pos:end="727:50">[<expr pos:start="727:49" pos:end="727:49"><literal type="number" pos:start="727:49" pos:end="727:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="727:53" pos:end="727:54"><expr pos:start="727:53" pos:end="727:54"><name pos:start="727:53" pos:end="727:54">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="729:21" pos:end="729:54"><expr pos:start="729:21" pos:end="729:53"><call pos:start="729:21" pos:end="729:53"><name pos:start="729:21" pos:end="729:37">gen_op_mov_reg_T0</name><argument_list pos:start="729:38" pos:end="729:53">(<argument pos:start="729:39" pos:end="729:45"><expr pos:start="729:39" pos:end="729:45"><name pos:start="729:39" pos:end="729:45">OT_LONG</name></expr></argument>, <argument pos:start="729:48" pos:end="729:52"><expr pos:start="729:48" pos:end="729:52"><name pos:start="729:48" pos:end="729:52">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="731:21" pos:end="731:57"><expr pos:start="731:21" pos:end="731:56"><call pos:start="731:21" pos:end="731:56"><name pos:start="731:21" pos:end="731:34">tcg_gen_mov_tl</name><argument_list pos:start="731:35" pos:end="731:56">(<argument pos:start="731:36" pos:end="731:45"><expr pos:start="731:36" pos:end="731:45"><name pos:start="731:36" pos:end="731:45">cpu_cc_src</name></expr></argument>, <argument pos:start="731:48" pos:end="731:55"><expr pos:start="731:48" pos:end="731:55"><name pos:start="731:48" pos:end="731:55"><name pos:start="731:48" pos:end="731:52">cpu_T</name><index pos:start="731:53" pos:end="731:55">[<expr pos:start="731:54" pos:end="731:54"><literal type="number" pos:start="731:54" pos:end="731:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

<cpp:endif pos:start="735:1" pos:end="735:6">#<cpp:directive pos:start="735:2" pos:end="735:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="737:17" pos:end="737:38"><expr pos:start="737:17" pos:end="737:37"><name pos:start="737:17" pos:end="737:24"><name pos:start="737:17" pos:end="737:17">s</name><operator pos:start="737:18" pos:end="737:19">-&gt;</operator><name pos:start="737:20" pos:end="737:24">cc_op</name></name> <operator pos:start="737:26" pos:end="737:26">=</operator> <name pos:start="737:28" pos:end="737:37">CC_OP_MULL</name></expr>;</expr_stmt>

                <break pos:start="739:17" pos:end="742:0">break;</break>

<cpp:ifdef pos:start="741:1" pos:end="741:20">#<cpp:directive pos:start="741:2" pos:end="741:6">ifdef</cpp:directive> <name pos:start="741:8" pos:end="741:20">TARGET_X86_64</name></cpp:ifdef>

            <case pos:start="743:13" pos:end="743:25">case <expr pos:start="743:18" pos:end="743:24"><name pos:start="743:18" pos:end="743:24">OT_QUAD</name></expr>:</case>

                <expr_stmt pos:start="745:17" pos:end="745:58"><expr pos:start="745:17" pos:end="745:57"><call pos:start="745:17" pos:end="745:57"><name pos:start="745:17" pos:end="745:38">gen_helper_mulq_EAX_T0</name><argument_list pos:start="745:39" pos:end="745:57">(<argument pos:start="745:40" pos:end="745:46"><expr pos:start="745:40" pos:end="745:46"><name pos:start="745:40" pos:end="745:46">cpu_env</name></expr></argument>, <argument pos:start="745:49" pos:end="745:56"><expr pos:start="745:49" pos:end="745:56"><name pos:start="745:49" pos:end="745:56"><name pos:start="745:49" pos:end="745:53">cpu_T</name><index pos:start="745:54" pos:end="745:56">[<expr pos:start="745:55" pos:end="745:55"><literal type="number" pos:start="745:55" pos:end="745:55">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="747:17" pos:end="747:38"><expr pos:start="747:17" pos:end="747:37"><name pos:start="747:17" pos:end="747:24"><name pos:start="747:17" pos:end="747:17">s</name><operator pos:start="747:18" pos:end="747:19">-&gt;</operator><name pos:start="747:20" pos:end="747:24">cc_op</name></name> <operator pos:start="747:26" pos:end="747:26">=</operator> <name pos:start="747:28" pos:end="747:37">CC_OP_MULQ</name></expr>;</expr_stmt>

                <break pos:start="749:17" pos:end="752:0">break;</break>

<cpp:endif pos:start="751:1" pos:end="751:6">#<cpp:directive pos:start="751:2" pos:end="751:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></switch>

            <break pos:start="755:13" pos:end="755:18">break;</break>

        <case pos:start="757:9" pos:end="757:15">case <expr pos:start="757:14" pos:end="757:14"><literal type="number" pos:start="757:14" pos:end="757:14">5</literal></expr>:</case> <comment type="block" pos:start="757:17" pos:end="757:26">/* imul */</comment>

            <switch pos:start="759:13" pos:end="893:13">switch<condition pos:start="759:19" pos:end="759:22">(<expr pos:start="759:20" pos:end="759:21"><name pos:start="759:20" pos:end="759:21">ot</name></expr>)</condition> <block pos:start="759:24" pos:end="893:13">{<block_content pos:start="761:13" pos:end="892:0">

            <case pos:start="761:13" pos:end="761:25">case <expr pos:start="761:18" pos:end="761:24"><name pos:start="761:18" pos:end="761:24">OT_BYTE</name></expr>:</case>

                <expr_stmt pos:start="763:17" pos:end="763:53"><expr pos:start="763:17" pos:end="763:52"><call pos:start="763:17" pos:end="763:52"><name pos:start="763:17" pos:end="763:33">gen_op_mov_TN_reg</name><argument_list pos:start="763:34" pos:end="763:52">(<argument pos:start="763:35" pos:end="763:41"><expr pos:start="763:35" pos:end="763:41"><name pos:start="763:35" pos:end="763:41">OT_BYTE</name></expr></argument>, <argument pos:start="763:44" pos:end="763:44"><expr pos:start="763:44" pos:end="763:44"><literal type="number" pos:start="763:44" pos:end="763:44">1</literal></expr></argument>, <argument pos:start="763:47" pos:end="763:51"><expr pos:start="763:47" pos:end="763:51"><name pos:start="763:47" pos:end="763:51">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="765:17" pos:end="765:53"><expr pos:start="765:17" pos:end="765:52"><call pos:start="765:17" pos:end="765:52"><name pos:start="765:17" pos:end="765:32">tcg_gen_ext8s_tl</name><argument_list pos:start="765:33" pos:end="765:52">(<argument pos:start="765:34" pos:end="765:41"><expr pos:start="765:34" pos:end="765:41"><name pos:start="765:34" pos:end="765:41"><name pos:start="765:34" pos:end="765:38">cpu_T</name><index pos:start="765:39" pos:end="765:41">[<expr pos:start="765:40" pos:end="765:40"><literal type="number" pos:start="765:40" pos:end="765:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="765:44" pos:end="765:51"><expr pos:start="765:44" pos:end="765:51"><name pos:start="765:44" pos:end="765:51"><name pos:start="765:44" pos:end="765:48">cpu_T</name><index pos:start="765:49" pos:end="765:51">[<expr pos:start="765:50" pos:end="765:50"><literal type="number" pos:start="765:50" pos:end="765:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="767:17" pos:end="767:53"><expr pos:start="767:17" pos:end="767:52"><call pos:start="767:17" pos:end="767:52"><name pos:start="767:17" pos:end="767:32">tcg_gen_ext8s_tl</name><argument_list pos:start="767:33" pos:end="767:52">(<argument pos:start="767:34" pos:end="767:41"><expr pos:start="767:34" pos:end="767:41"><name pos:start="767:34" pos:end="767:41"><name pos:start="767:34" pos:end="767:38">cpu_T</name><index pos:start="767:39" pos:end="767:41">[<expr pos:start="767:40" pos:end="767:40"><literal type="number" pos:start="767:40" pos:end="767:40">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="767:44" pos:end="767:51"><expr pos:start="767:44" pos:end="767:51"><name pos:start="767:44" pos:end="767:51"><name pos:start="767:44" pos:end="767:48">cpu_T</name><index pos:start="767:49" pos:end="767:51">[<expr pos:start="767:50" pos:end="767:50"><literal type="number" pos:start="767:50" pos:end="767:50">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="769:17" pos:end="769:63">/* XXX: use 32 bit mul which could be faster */</comment>

                <expr_stmt pos:start="771:17" pos:end="771:61"><expr pos:start="771:17" pos:end="771:60"><call pos:start="771:17" pos:end="771:60"><name pos:start="771:17" pos:end="771:30">tcg_gen_mul_tl</name><argument_list pos:start="771:31" pos:end="771:60">(<argument pos:start="771:32" pos:end="771:39"><expr pos:start="771:32" pos:end="771:39"><name pos:start="771:32" pos:end="771:39"><name pos:start="771:32" pos:end="771:36">cpu_T</name><index pos:start="771:37" pos:end="771:39">[<expr pos:start="771:38" pos:end="771:38"><literal type="number" pos:start="771:38" pos:end="771:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="771:42" pos:end="771:49"><expr pos:start="771:42" pos:end="771:49"><name pos:start="771:42" pos:end="771:49"><name pos:start="771:42" pos:end="771:46">cpu_T</name><index pos:start="771:47" pos:end="771:49">[<expr pos:start="771:48" pos:end="771:48"><literal type="number" pos:start="771:48" pos:end="771:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="771:52" pos:end="771:59"><expr pos:start="771:52" pos:end="771:59"><name pos:start="771:52" pos:end="771:59"><name pos:start="771:52" pos:end="771:56">cpu_T</name><index pos:start="771:57" pos:end="771:59">[<expr pos:start="771:58" pos:end="771:58"><literal type="number" pos:start="771:58" pos:end="771:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="773:17" pos:end="773:50"><expr pos:start="773:17" pos:end="773:49"><call pos:start="773:17" pos:end="773:49"><name pos:start="773:17" pos:end="773:33">gen_op_mov_reg_T0</name><argument_list pos:start="773:34" pos:end="773:49">(<argument pos:start="773:35" pos:end="773:41"><expr pos:start="773:35" pos:end="773:41"><name pos:start="773:35" pos:end="773:41">OT_WORD</name></expr></argument>, <argument pos:start="773:44" pos:end="773:48"><expr pos:start="773:44" pos:end="773:48"><name pos:start="773:44" pos:end="773:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="775:17" pos:end="775:53"><expr pos:start="775:17" pos:end="775:52"><call pos:start="775:17" pos:end="775:52"><name pos:start="775:17" pos:end="775:30">tcg_gen_mov_tl</name><argument_list pos:start="775:31" pos:end="775:52">(<argument pos:start="775:32" pos:end="775:41"><expr pos:start="775:32" pos:end="775:41"><name pos:start="775:32" pos:end="775:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="775:44" pos:end="775:51"><expr pos:start="775:44" pos:end="775:51"><name pos:start="775:44" pos:end="775:51"><name pos:start="775:44" pos:end="775:48">cpu_T</name><index pos:start="775:49" pos:end="775:51">[<expr pos:start="775:50" pos:end="775:50"><literal type="number" pos:start="775:50" pos:end="775:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="777:17" pos:end="777:53"><expr pos:start="777:17" pos:end="777:52"><call pos:start="777:17" pos:end="777:52"><name pos:start="777:17" pos:end="777:32">tcg_gen_ext8s_tl</name><argument_list pos:start="777:33" pos:end="777:52">(<argument pos:start="777:34" pos:end="777:41"><expr pos:start="777:34" pos:end="777:41"><name pos:start="777:34" pos:end="777:41">cpu_tmp0</name></expr></argument>, <argument pos:start="777:44" pos:end="777:51"><expr pos:start="777:44" pos:end="777:51"><name pos:start="777:44" pos:end="777:51"><name pos:start="777:44" pos:end="777:48">cpu_T</name><index pos:start="777:49" pos:end="777:51">[<expr pos:start="777:50" pos:end="777:50"><literal type="number" pos:start="777:50" pos:end="777:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="779:17" pos:end="779:63"><expr pos:start="779:17" pos:end="779:62"><call pos:start="779:17" pos:end="779:62"><name pos:start="779:17" pos:end="779:30">tcg_gen_sub_tl</name><argument_list pos:start="779:31" pos:end="779:62">(<argument pos:start="779:32" pos:end="779:41"><expr pos:start="779:32" pos:end="779:41"><name pos:start="779:32" pos:end="779:41">cpu_cc_src</name></expr></argument>, <argument pos:start="779:44" pos:end="779:51"><expr pos:start="779:44" pos:end="779:51"><name pos:start="779:44" pos:end="779:51"><name pos:start="779:44" pos:end="779:48">cpu_T</name><index pos:start="779:49" pos:end="779:51">[<expr pos:start="779:50" pos:end="779:50"><literal type="number" pos:start="779:50" pos:end="779:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="779:54" pos:end="779:61"><expr pos:start="779:54" pos:end="779:61"><name pos:start="779:54" pos:end="779:61">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="781:17" pos:end="781:38"><expr pos:start="781:17" pos:end="781:37"><name pos:start="781:17" pos:end="781:24"><name pos:start="781:17" pos:end="781:17">s</name><operator pos:start="781:18" pos:end="781:19">-&gt;</operator><name pos:start="781:20" pos:end="781:24">cc_op</name></name> <operator pos:start="781:26" pos:end="781:26">=</operator> <name pos:start="781:28" pos:end="781:37">CC_OP_MULB</name></expr>;</expr_stmt>

                <break pos:start="783:17" pos:end="783:22">break;</break>

            <case pos:start="785:13" pos:end="785:25">case <expr pos:start="785:18" pos:end="785:24"><name pos:start="785:18" pos:end="785:24">OT_WORD</name></expr>:</case>

                <expr_stmt pos:start="787:17" pos:end="787:53"><expr pos:start="787:17" pos:end="787:52"><call pos:start="787:17" pos:end="787:52"><name pos:start="787:17" pos:end="787:33">gen_op_mov_TN_reg</name><argument_list pos:start="787:34" pos:end="787:52">(<argument pos:start="787:35" pos:end="787:41"><expr pos:start="787:35" pos:end="787:41"><name pos:start="787:35" pos:end="787:41">OT_WORD</name></expr></argument>, <argument pos:start="787:44" pos:end="787:44"><expr pos:start="787:44" pos:end="787:44"><literal type="number" pos:start="787:44" pos:end="787:44">1</literal></expr></argument>, <argument pos:start="787:47" pos:end="787:51"><expr pos:start="787:47" pos:end="787:51"><name pos:start="787:47" pos:end="787:51">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="789:17" pos:end="789:54"><expr pos:start="789:17" pos:end="789:53"><call pos:start="789:17" pos:end="789:53"><name pos:start="789:17" pos:end="789:33">tcg_gen_ext16s_tl</name><argument_list pos:start="789:34" pos:end="789:53">(<argument pos:start="789:35" pos:end="789:42"><expr pos:start="789:35" pos:end="789:42"><name pos:start="789:35" pos:end="789:42"><name pos:start="789:35" pos:end="789:39">cpu_T</name><index pos:start="789:40" pos:end="789:42">[<expr pos:start="789:41" pos:end="789:41"><literal type="number" pos:start="789:41" pos:end="789:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="789:45" pos:end="789:52"><expr pos:start="789:45" pos:end="789:52"><name pos:start="789:45" pos:end="789:52"><name pos:start="789:45" pos:end="789:49">cpu_T</name><index pos:start="789:50" pos:end="789:52">[<expr pos:start="789:51" pos:end="789:51"><literal type="number" pos:start="789:51" pos:end="789:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="791:17" pos:end="791:54"><expr pos:start="791:17" pos:end="791:53"><call pos:start="791:17" pos:end="791:53"><name pos:start="791:17" pos:end="791:33">tcg_gen_ext16s_tl</name><argument_list pos:start="791:34" pos:end="791:53">(<argument pos:start="791:35" pos:end="791:42"><expr pos:start="791:35" pos:end="791:42"><name pos:start="791:35" pos:end="791:42"><name pos:start="791:35" pos:end="791:39">cpu_T</name><index pos:start="791:40" pos:end="791:42">[<expr pos:start="791:41" pos:end="791:41"><literal type="number" pos:start="791:41" pos:end="791:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="791:45" pos:end="791:52"><expr pos:start="791:45" pos:end="791:52"><name pos:start="791:45" pos:end="791:52"><name pos:start="791:45" pos:end="791:49">cpu_T</name><index pos:start="791:50" pos:end="791:52">[<expr pos:start="791:51" pos:end="791:51"><literal type="number" pos:start="791:51" pos:end="791:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="793:17" pos:end="793:63">/* XXX: use 32 bit mul which could be faster */</comment>

                <expr_stmt pos:start="795:17" pos:end="795:61"><expr pos:start="795:17" pos:end="795:60"><call pos:start="795:17" pos:end="795:60"><name pos:start="795:17" pos:end="795:30">tcg_gen_mul_tl</name><argument_list pos:start="795:31" pos:end="795:60">(<argument pos:start="795:32" pos:end="795:39"><expr pos:start="795:32" pos:end="795:39"><name pos:start="795:32" pos:end="795:39"><name pos:start="795:32" pos:end="795:36">cpu_T</name><index pos:start="795:37" pos:end="795:39">[<expr pos:start="795:38" pos:end="795:38"><literal type="number" pos:start="795:38" pos:end="795:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="795:42" pos:end="795:49"><expr pos:start="795:42" pos:end="795:49"><name pos:start="795:42" pos:end="795:49"><name pos:start="795:42" pos:end="795:46">cpu_T</name><index pos:start="795:47" pos:end="795:49">[<expr pos:start="795:48" pos:end="795:48"><literal type="number" pos:start="795:48" pos:end="795:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="795:52" pos:end="795:59"><expr pos:start="795:52" pos:end="795:59"><name pos:start="795:52" pos:end="795:59"><name pos:start="795:52" pos:end="795:56">cpu_T</name><index pos:start="795:57" pos:end="795:59">[<expr pos:start="795:58" pos:end="795:58"><literal type="number" pos:start="795:58" pos:end="795:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="797:17" pos:end="797:50"><expr pos:start="797:17" pos:end="797:49"><call pos:start="797:17" pos:end="797:49"><name pos:start="797:17" pos:end="797:33">gen_op_mov_reg_T0</name><argument_list pos:start="797:34" pos:end="797:49">(<argument pos:start="797:35" pos:end="797:41"><expr pos:start="797:35" pos:end="797:41"><name pos:start="797:35" pos:end="797:41">OT_WORD</name></expr></argument>, <argument pos:start="797:44" pos:end="797:48"><expr pos:start="797:44" pos:end="797:48"><name pos:start="797:44" pos:end="797:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="799:17" pos:end="799:53"><expr pos:start="799:17" pos:end="799:52"><call pos:start="799:17" pos:end="799:52"><name pos:start="799:17" pos:end="799:30">tcg_gen_mov_tl</name><argument_list pos:start="799:31" pos:end="799:52">(<argument pos:start="799:32" pos:end="799:41"><expr pos:start="799:32" pos:end="799:41"><name pos:start="799:32" pos:end="799:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="799:44" pos:end="799:51"><expr pos:start="799:44" pos:end="799:51"><name pos:start="799:44" pos:end="799:51"><name pos:start="799:44" pos:end="799:48">cpu_T</name><index pos:start="799:49" pos:end="799:51">[<expr pos:start="799:50" pos:end="799:50"><literal type="number" pos:start="799:50" pos:end="799:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="801:17" pos:end="801:54"><expr pos:start="801:17" pos:end="801:53"><call pos:start="801:17" pos:end="801:53"><name pos:start="801:17" pos:end="801:33">tcg_gen_ext16s_tl</name><argument_list pos:start="801:34" pos:end="801:53">(<argument pos:start="801:35" pos:end="801:42"><expr pos:start="801:35" pos:end="801:42"><name pos:start="801:35" pos:end="801:42">cpu_tmp0</name></expr></argument>, <argument pos:start="801:45" pos:end="801:52"><expr pos:start="801:45" pos:end="801:52"><name pos:start="801:45" pos:end="801:52"><name pos:start="801:45" pos:end="801:49">cpu_T</name><index pos:start="801:50" pos:end="801:52">[<expr pos:start="801:51" pos:end="801:51"><literal type="number" pos:start="801:51" pos:end="801:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="803:17" pos:end="803:63"><expr pos:start="803:17" pos:end="803:62"><call pos:start="803:17" pos:end="803:62"><name pos:start="803:17" pos:end="803:30">tcg_gen_sub_tl</name><argument_list pos:start="803:31" pos:end="803:62">(<argument pos:start="803:32" pos:end="803:41"><expr pos:start="803:32" pos:end="803:41"><name pos:start="803:32" pos:end="803:41">cpu_cc_src</name></expr></argument>, <argument pos:start="803:44" pos:end="803:51"><expr pos:start="803:44" pos:end="803:51"><name pos:start="803:44" pos:end="803:51"><name pos:start="803:44" pos:end="803:48">cpu_T</name><index pos:start="803:49" pos:end="803:51">[<expr pos:start="803:50" pos:end="803:50"><literal type="number" pos:start="803:50" pos:end="803:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="803:54" pos:end="803:61"><expr pos:start="803:54" pos:end="803:61"><name pos:start="803:54" pos:end="803:61">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="805:17" pos:end="805:56"><expr pos:start="805:17" pos:end="805:55"><call pos:start="805:17" pos:end="805:55"><name pos:start="805:17" pos:end="805:31">tcg_gen_shri_tl</name><argument_list pos:start="805:32" pos:end="805:55">(<argument pos:start="805:33" pos:end="805:40"><expr pos:start="805:33" pos:end="805:40"><name pos:start="805:33" pos:end="805:40"><name pos:start="805:33" pos:end="805:37">cpu_T</name><index pos:start="805:38" pos:end="805:40">[<expr pos:start="805:39" pos:end="805:39"><literal type="number" pos:start="805:39" pos:end="805:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="805:43" pos:end="805:50"><expr pos:start="805:43" pos:end="805:50"><name pos:start="805:43" pos:end="805:50"><name pos:start="805:43" pos:end="805:47">cpu_T</name><index pos:start="805:48" pos:end="805:50">[<expr pos:start="805:49" pos:end="805:49"><literal type="number" pos:start="805:49" pos:end="805:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="805:53" pos:end="805:54"><expr pos:start="805:53" pos:end="805:54"><literal type="number" pos:start="805:53" pos:end="805:54">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="807:17" pos:end="807:50"><expr pos:start="807:17" pos:end="807:49"><call pos:start="807:17" pos:end="807:49"><name pos:start="807:17" pos:end="807:33">gen_op_mov_reg_T0</name><argument_list pos:start="807:34" pos:end="807:49">(<argument pos:start="807:35" pos:end="807:41"><expr pos:start="807:35" pos:end="807:41"><name pos:start="807:35" pos:end="807:41">OT_WORD</name></expr></argument>, <argument pos:start="807:44" pos:end="807:48"><expr pos:start="807:44" pos:end="807:48"><name pos:start="807:44" pos:end="807:48">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="809:17" pos:end="809:38"><expr pos:start="809:17" pos:end="809:37"><name pos:start="809:17" pos:end="809:24"><name pos:start="809:17" pos:end="809:17">s</name><operator pos:start="809:18" pos:end="809:19">-&gt;</operator><name pos:start="809:20" pos:end="809:24">cc_op</name></name> <operator pos:start="809:26" pos:end="809:26">=</operator> <name pos:start="809:28" pos:end="809:37">CC_OP_MULW</name></expr>;</expr_stmt>

                <break pos:start="811:17" pos:end="811:22">break;</break>

            <default pos:start="813:13" pos:end="813:20">default:</default>

            <case pos:start="815:13" pos:end="818:0">case <expr pos:start="815:18" pos:end="815:24"><name pos:start="815:18" pos:end="815:24">OT_LONG</name></expr>:</case>

<cpp:ifdef pos:start="817:1" pos:end="817:20">#<cpp:directive pos:start="817:2" pos:end="817:6">ifdef</cpp:directive> <name pos:start="817:8" pos:end="817:20">TARGET_X86_64</name></cpp:ifdef>

                <expr_stmt pos:start="819:17" pos:end="819:53"><expr pos:start="819:17" pos:end="819:52"><call pos:start="819:17" pos:end="819:52"><name pos:start="819:17" pos:end="819:33">gen_op_mov_TN_reg</name><argument_list pos:start="819:34" pos:end="819:52">(<argument pos:start="819:35" pos:end="819:41"><expr pos:start="819:35" pos:end="819:41"><name pos:start="819:35" pos:end="819:41">OT_LONG</name></expr></argument>, <argument pos:start="819:44" pos:end="819:44"><expr pos:start="819:44" pos:end="819:44"><literal type="number" pos:start="819:44" pos:end="819:44">1</literal></expr></argument>, <argument pos:start="819:47" pos:end="819:51"><expr pos:start="819:47" pos:end="819:51"><name pos:start="819:47" pos:end="819:51">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="821:17" pos:end="821:54"><expr pos:start="821:17" pos:end="821:53"><call pos:start="821:17" pos:end="821:53"><name pos:start="821:17" pos:end="821:33">tcg_gen_ext32s_tl</name><argument_list pos:start="821:34" pos:end="821:53">(<argument pos:start="821:35" pos:end="821:42"><expr pos:start="821:35" pos:end="821:42"><name pos:start="821:35" pos:end="821:42"><name pos:start="821:35" pos:end="821:39">cpu_T</name><index pos:start="821:40" pos:end="821:42">[<expr pos:start="821:41" pos:end="821:41"><literal type="number" pos:start="821:41" pos:end="821:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="821:45" pos:end="821:52"><expr pos:start="821:45" pos:end="821:52"><name pos:start="821:45" pos:end="821:52"><name pos:start="821:45" pos:end="821:49">cpu_T</name><index pos:start="821:50" pos:end="821:52">[<expr pos:start="821:51" pos:end="821:51"><literal type="number" pos:start="821:51" pos:end="821:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="823:17" pos:end="823:54"><expr pos:start="823:17" pos:end="823:53"><call pos:start="823:17" pos:end="823:53"><name pos:start="823:17" pos:end="823:33">tcg_gen_ext32s_tl</name><argument_list pos:start="823:34" pos:end="823:53">(<argument pos:start="823:35" pos:end="823:42"><expr pos:start="823:35" pos:end="823:42"><name pos:start="823:35" pos:end="823:42"><name pos:start="823:35" pos:end="823:39">cpu_T</name><index pos:start="823:40" pos:end="823:42">[<expr pos:start="823:41" pos:end="823:41"><literal type="number" pos:start="823:41" pos:end="823:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="823:45" pos:end="823:52"><expr pos:start="823:45" pos:end="823:52"><name pos:start="823:45" pos:end="823:52"><name pos:start="823:45" pos:end="823:49">cpu_T</name><index pos:start="823:50" pos:end="823:52">[<expr pos:start="823:51" pos:end="823:51"><literal type="number" pos:start="823:51" pos:end="823:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="825:17" pos:end="825:61"><expr pos:start="825:17" pos:end="825:60"><call pos:start="825:17" pos:end="825:60"><name pos:start="825:17" pos:end="825:30">tcg_gen_mul_tl</name><argument_list pos:start="825:31" pos:end="825:60">(<argument pos:start="825:32" pos:end="825:39"><expr pos:start="825:32" pos:end="825:39"><name pos:start="825:32" pos:end="825:39"><name pos:start="825:32" pos:end="825:36">cpu_T</name><index pos:start="825:37" pos:end="825:39">[<expr pos:start="825:38" pos:end="825:38"><literal type="number" pos:start="825:38" pos:end="825:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="825:42" pos:end="825:49"><expr pos:start="825:42" pos:end="825:49"><name pos:start="825:42" pos:end="825:49"><name pos:start="825:42" pos:end="825:46">cpu_T</name><index pos:start="825:47" pos:end="825:49">[<expr pos:start="825:48" pos:end="825:48"><literal type="number" pos:start="825:48" pos:end="825:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="825:52" pos:end="825:59"><expr pos:start="825:52" pos:end="825:59"><name pos:start="825:52" pos:end="825:59"><name pos:start="825:52" pos:end="825:56">cpu_T</name><index pos:start="825:57" pos:end="825:59">[<expr pos:start="825:58" pos:end="825:58"><literal type="number" pos:start="825:58" pos:end="825:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="827:17" pos:end="827:50"><expr pos:start="827:17" pos:end="827:49"><call pos:start="827:17" pos:end="827:49"><name pos:start="827:17" pos:end="827:33">gen_op_mov_reg_T0</name><argument_list pos:start="827:34" pos:end="827:49">(<argument pos:start="827:35" pos:end="827:41"><expr pos:start="827:35" pos:end="827:41"><name pos:start="827:35" pos:end="827:41">OT_LONG</name></expr></argument>, <argument pos:start="827:44" pos:end="827:48"><expr pos:start="827:44" pos:end="827:48"><name pos:start="827:44" pos:end="827:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="829:17" pos:end="829:53"><expr pos:start="829:17" pos:end="829:52"><call pos:start="829:17" pos:end="829:52"><name pos:start="829:17" pos:end="829:30">tcg_gen_mov_tl</name><argument_list pos:start="829:31" pos:end="829:52">(<argument pos:start="829:32" pos:end="829:41"><expr pos:start="829:32" pos:end="829:41"><name pos:start="829:32" pos:end="829:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="829:44" pos:end="829:51"><expr pos:start="829:44" pos:end="829:51"><name pos:start="829:44" pos:end="829:51"><name pos:start="829:44" pos:end="829:48">cpu_T</name><index pos:start="829:49" pos:end="829:51">[<expr pos:start="829:50" pos:end="829:50"><literal type="number" pos:start="829:50" pos:end="829:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="831:17" pos:end="831:54"><expr pos:start="831:17" pos:end="831:53"><call pos:start="831:17" pos:end="831:53"><name pos:start="831:17" pos:end="831:33">tcg_gen_ext32s_tl</name><argument_list pos:start="831:34" pos:end="831:53">(<argument pos:start="831:35" pos:end="831:42"><expr pos:start="831:35" pos:end="831:42"><name pos:start="831:35" pos:end="831:42">cpu_tmp0</name></expr></argument>, <argument pos:start="831:45" pos:end="831:52"><expr pos:start="831:45" pos:end="831:52"><name pos:start="831:45" pos:end="831:52"><name pos:start="831:45" pos:end="831:49">cpu_T</name><index pos:start="831:50" pos:end="831:52">[<expr pos:start="831:51" pos:end="831:51"><literal type="number" pos:start="831:51" pos:end="831:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="833:17" pos:end="833:63"><expr pos:start="833:17" pos:end="833:62"><call pos:start="833:17" pos:end="833:62"><name pos:start="833:17" pos:end="833:30">tcg_gen_sub_tl</name><argument_list pos:start="833:31" pos:end="833:62">(<argument pos:start="833:32" pos:end="833:41"><expr pos:start="833:32" pos:end="833:41"><name pos:start="833:32" pos:end="833:41">cpu_cc_src</name></expr></argument>, <argument pos:start="833:44" pos:end="833:51"><expr pos:start="833:44" pos:end="833:51"><name pos:start="833:44" pos:end="833:51"><name pos:start="833:44" pos:end="833:48">cpu_T</name><index pos:start="833:49" pos:end="833:51">[<expr pos:start="833:50" pos:end="833:50"><literal type="number" pos:start="833:50" pos:end="833:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="833:54" pos:end="833:61"><expr pos:start="833:54" pos:end="833:61"><name pos:start="833:54" pos:end="833:61">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="835:17" pos:end="835:56"><expr pos:start="835:17" pos:end="835:55"><call pos:start="835:17" pos:end="835:55"><name pos:start="835:17" pos:end="835:31">tcg_gen_shri_tl</name><argument_list pos:start="835:32" pos:end="835:55">(<argument pos:start="835:33" pos:end="835:40"><expr pos:start="835:33" pos:end="835:40"><name pos:start="835:33" pos:end="835:40"><name pos:start="835:33" pos:end="835:37">cpu_T</name><index pos:start="835:38" pos:end="835:40">[<expr pos:start="835:39" pos:end="835:39"><literal type="number" pos:start="835:39" pos:end="835:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="835:43" pos:end="835:50"><expr pos:start="835:43" pos:end="835:50"><name pos:start="835:43" pos:end="835:50"><name pos:start="835:43" pos:end="835:47">cpu_T</name><index pos:start="835:48" pos:end="835:50">[<expr pos:start="835:49" pos:end="835:49"><literal type="number" pos:start="835:49" pos:end="835:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="835:53" pos:end="835:54"><expr pos:start="835:53" pos:end="835:54"><literal type="number" pos:start="835:53" pos:end="835:54">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="837:17" pos:end="840:0"><expr pos:start="837:17" pos:end="837:49"><call pos:start="837:17" pos:end="837:49"><name pos:start="837:17" pos:end="837:33">gen_op_mov_reg_T0</name><argument_list pos:start="837:34" pos:end="837:49">(<argument pos:start="837:35" pos:end="837:41"><expr pos:start="837:35" pos:end="837:41"><name pos:start="837:35" pos:end="837:41">OT_LONG</name></expr></argument>, <argument pos:start="837:44" pos:end="837:48"><expr pos:start="837:44" pos:end="837:48"><name pos:start="837:44" pos:end="837:48">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="839:1" pos:end="839:5">#<cpp:directive pos:start="839:2" pos:end="839:5">else</cpp:directive></cpp:else>

                <block pos:start="841:17" pos:end="876:0">{<block_content pos:start="843:21" pos:end="871:67">

                    <decl_stmt pos:start="843:21" pos:end="843:36"><decl pos:start="843:21" pos:end="843:31"><type pos:start="843:21" pos:end="843:28"><name pos:start="843:21" pos:end="843:28">TCGv_i64</name></type> <name pos:start="843:30" pos:end="843:31">t0</name></decl>, <decl pos:start="843:34" pos:end="843:35"><type ref="prev" pos:start="843:21" pos:end="843:28"/><name pos:start="843:34" pos:end="843:35">t1</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="845:21" pos:end="845:44"><expr pos:start="845:21" pos:end="845:43"><name pos:start="845:21" pos:end="845:22">t0</name> <operator pos:start="845:24" pos:end="845:24">=</operator> <call pos:start="845:26" pos:end="845:43"><name pos:start="845:26" pos:end="845:41">tcg_temp_new_i64</name><argument_list pos:start="845:42" pos:end="845:43">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="847:21" pos:end="847:44"><expr pos:start="847:21" pos:end="847:43"><name pos:start="847:21" pos:end="847:22">t1</name> <operator pos:start="847:24" pos:end="847:24">=</operator> <call pos:start="847:26" pos:end="847:43"><name pos:start="847:26" pos:end="847:41">tcg_temp_new_i64</name><argument_list pos:start="847:42" pos:end="847:43">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="849:21" pos:end="849:57"><expr pos:start="849:21" pos:end="849:56"><call pos:start="849:21" pos:end="849:56"><name pos:start="849:21" pos:end="849:37">gen_op_mov_TN_reg</name><argument_list pos:start="849:38" pos:end="849:56">(<argument pos:start="849:39" pos:end="849:45"><expr pos:start="849:39" pos:end="849:45"><name pos:start="849:39" pos:end="849:45">OT_LONG</name></expr></argument>, <argument pos:start="849:48" pos:end="849:48"><expr pos:start="849:48" pos:end="849:48"><literal type="number" pos:start="849:48" pos:end="849:48">1</literal></expr></argument>, <argument pos:start="849:51" pos:end="849:55"><expr pos:start="849:51" pos:end="849:55"><name pos:start="849:51" pos:end="849:55">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="851:21" pos:end="851:54"><expr pos:start="851:21" pos:end="851:53"><call pos:start="851:21" pos:end="851:53"><name pos:start="851:21" pos:end="851:39">tcg_gen_ext_i32_i64</name><argument_list pos:start="851:40" pos:end="851:53">(<argument pos:start="851:41" pos:end="851:42"><expr pos:start="851:41" pos:end="851:42"><name pos:start="851:41" pos:end="851:42">t0</name></expr></argument>, <argument pos:start="851:45" pos:end="851:52"><expr pos:start="851:45" pos:end="851:52"><name pos:start="851:45" pos:end="851:52"><name pos:start="851:45" pos:end="851:49">cpu_T</name><index pos:start="851:50" pos:end="851:52">[<expr pos:start="851:51" pos:end="851:51"><literal type="number" pos:start="851:51" pos:end="851:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="853:21" pos:end="853:54"><expr pos:start="853:21" pos:end="853:53"><call pos:start="853:21" pos:end="853:53"><name pos:start="853:21" pos:end="853:39">tcg_gen_ext_i32_i64</name><argument_list pos:start="853:40" pos:end="853:53">(<argument pos:start="853:41" pos:end="853:42"><expr pos:start="853:41" pos:end="853:42"><name pos:start="853:41" pos:end="853:42">t1</name></expr></argument>, <argument pos:start="853:45" pos:end="853:52"><expr pos:start="853:45" pos:end="853:52"><name pos:start="853:45" pos:end="853:52"><name pos:start="853:45" pos:end="853:49">cpu_T</name><index pos:start="853:50" pos:end="853:52">[<expr pos:start="853:51" pos:end="853:51"><literal type="number" pos:start="853:51" pos:end="853:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="855:21" pos:end="855:48"><expr pos:start="855:21" pos:end="855:47"><call pos:start="855:21" pos:end="855:47"><name pos:start="855:21" pos:end="855:35">tcg_gen_mul_i64</name><argument_list pos:start="855:36" pos:end="855:47">(<argument pos:start="855:37" pos:end="855:38"><expr pos:start="855:37" pos:end="855:38"><name pos:start="855:37" pos:end="855:38">t0</name></expr></argument>, <argument pos:start="855:41" pos:end="855:42"><expr pos:start="855:41" pos:end="855:42"><name pos:start="855:41" pos:end="855:42">t0</name></expr></argument>, <argument pos:start="855:45" pos:end="855:46"><expr pos:start="855:45" pos:end="855:46"><name pos:start="855:45" pos:end="855:46">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="857:21" pos:end="857:56"><expr pos:start="857:21" pos:end="857:55"><call pos:start="857:21" pos:end="857:55"><name pos:start="857:21" pos:end="857:41">tcg_gen_trunc_i64_i32</name><argument_list pos:start="857:42" pos:end="857:55">(<argument pos:start="857:43" pos:end="857:50"><expr pos:start="857:43" pos:end="857:50"><name pos:start="857:43" pos:end="857:50"><name pos:start="857:43" pos:end="857:47">cpu_T</name><index pos:start="857:48" pos:end="857:50">[<expr pos:start="857:49" pos:end="857:49"><literal type="number" pos:start="857:49" pos:end="857:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="857:53" pos:end="857:54"><expr pos:start="857:53" pos:end="857:54"><name pos:start="857:53" pos:end="857:54">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="859:21" pos:end="859:54"><expr pos:start="859:21" pos:end="859:53"><call pos:start="859:21" pos:end="859:53"><name pos:start="859:21" pos:end="859:37">gen_op_mov_reg_T0</name><argument_list pos:start="859:38" pos:end="859:53">(<argument pos:start="859:39" pos:end="859:45"><expr pos:start="859:39" pos:end="859:45"><name pos:start="859:39" pos:end="859:45">OT_LONG</name></expr></argument>, <argument pos:start="859:48" pos:end="859:52"><expr pos:start="859:48" pos:end="859:52"><name pos:start="859:48" pos:end="859:52">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="861:21" pos:end="861:57"><expr pos:start="861:21" pos:end="861:56"><call pos:start="861:21" pos:end="861:56"><name pos:start="861:21" pos:end="861:34">tcg_gen_mov_tl</name><argument_list pos:start="861:35" pos:end="861:56">(<argument pos:start="861:36" pos:end="861:45"><expr pos:start="861:36" pos:end="861:45"><name pos:start="861:36" pos:end="861:45">cpu_cc_dst</name></expr></argument>, <argument pos:start="861:48" pos:end="861:55"><expr pos:start="861:48" pos:end="861:55"><name pos:start="861:48" pos:end="861:55"><name pos:start="861:48" pos:end="861:52">cpu_T</name><index pos:start="861:53" pos:end="861:55">[<expr pos:start="861:54" pos:end="861:54"><literal type="number" pos:start="861:54" pos:end="861:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="863:21" pos:end="863:60"><expr pos:start="863:21" pos:end="863:59"><call pos:start="863:21" pos:end="863:59"><name pos:start="863:21" pos:end="863:35">tcg_gen_sari_tl</name><argument_list pos:start="863:36" pos:end="863:59">(<argument pos:start="863:37" pos:end="863:44"><expr pos:start="863:37" pos:end="863:44"><name pos:start="863:37" pos:end="863:44">cpu_tmp0</name></expr></argument>, <argument pos:start="863:47" pos:end="863:54"><expr pos:start="863:47" pos:end="863:54"><name pos:start="863:47" pos:end="863:54"><name pos:start="863:47" pos:end="863:51">cpu_T</name><index pos:start="863:52" pos:end="863:54">[<expr pos:start="863:53" pos:end="863:53"><literal type="number" pos:start="863:53" pos:end="863:53">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="863:57" pos:end="863:58"><expr pos:start="863:57" pos:end="863:58"><literal type="number" pos:start="863:57" pos:end="863:58">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="865:21" pos:end="865:49"><expr pos:start="865:21" pos:end="865:48"><call pos:start="865:21" pos:end="865:48"><name pos:start="865:21" pos:end="865:36">tcg_gen_shri_i64</name><argument_list pos:start="865:37" pos:end="865:48">(<argument pos:start="865:38" pos:end="865:39"><expr pos:start="865:38" pos:end="865:39"><name pos:start="865:38" pos:end="865:39">t0</name></expr></argument>, <argument pos:start="865:42" pos:end="865:43"><expr pos:start="865:42" pos:end="865:43"><name pos:start="865:42" pos:end="865:43">t0</name></expr></argument>, <argument pos:start="865:46" pos:end="865:47"><expr pos:start="865:46" pos:end="865:47"><literal type="number" pos:start="865:46" pos:end="865:47">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="867:21" pos:end="867:56"><expr pos:start="867:21" pos:end="867:55"><call pos:start="867:21" pos:end="867:55"><name pos:start="867:21" pos:end="867:41">tcg_gen_trunc_i64_i32</name><argument_list pos:start="867:42" pos:end="867:55">(<argument pos:start="867:43" pos:end="867:50"><expr pos:start="867:43" pos:end="867:50"><name pos:start="867:43" pos:end="867:50"><name pos:start="867:43" pos:end="867:47">cpu_T</name><index pos:start="867:48" pos:end="867:50">[<expr pos:start="867:49" pos:end="867:49"><literal type="number" pos:start="867:49" pos:end="867:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="867:53" pos:end="867:54"><expr pos:start="867:53" pos:end="867:54"><name pos:start="867:53" pos:end="867:54">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="869:21" pos:end="869:54"><expr pos:start="869:21" pos:end="869:53"><call pos:start="869:21" pos:end="869:53"><name pos:start="869:21" pos:end="869:37">gen_op_mov_reg_T0</name><argument_list pos:start="869:38" pos:end="869:53">(<argument pos:start="869:39" pos:end="869:45"><expr pos:start="869:39" pos:end="869:45"><name pos:start="869:39" pos:end="869:45">OT_LONG</name></expr></argument>, <argument pos:start="869:48" pos:end="869:52"><expr pos:start="869:48" pos:end="869:52"><name pos:start="869:48" pos:end="869:52">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="871:21" pos:end="871:67"><expr pos:start="871:21" pos:end="871:66"><call pos:start="871:21" pos:end="871:66"><name pos:start="871:21" pos:end="871:34">tcg_gen_sub_tl</name><argument_list pos:start="871:35" pos:end="871:66">(<argument pos:start="871:36" pos:end="871:45"><expr pos:start="871:36" pos:end="871:45"><name pos:start="871:36" pos:end="871:45">cpu_cc_src</name></expr></argument>, <argument pos:start="871:48" pos:end="871:55"><expr pos:start="871:48" pos:end="871:55"><name pos:start="871:48" pos:end="871:55"><name pos:start="871:48" pos:end="871:52">cpu_T</name><index pos:start="871:53" pos:end="871:55">[<expr pos:start="871:54" pos:end="871:54"><literal type="number" pos:start="871:54" pos:end="871:54">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="871:58" pos:end="871:65"><expr pos:start="871:58" pos:end="871:65"><name pos:start="871:58" pos:end="871:65">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

<cpp:endif pos:start="875:1" pos:end="875:6">#<cpp:directive pos:start="875:2" pos:end="875:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="877:17" pos:end="877:38"><expr pos:start="877:17" pos:end="877:37"><name pos:start="877:17" pos:end="877:24"><name pos:start="877:17" pos:end="877:17">s</name><operator pos:start="877:18" pos:end="877:19">-&gt;</operator><name pos:start="877:20" pos:end="877:24">cc_op</name></name> <operator pos:start="877:26" pos:end="877:26">=</operator> <name pos:start="877:28" pos:end="877:37">CC_OP_MULL</name></expr>;</expr_stmt>

                <break pos:start="879:17" pos:end="882:0">break;</break>

<cpp:ifdef pos:start="881:1" pos:end="881:20">#<cpp:directive pos:start="881:2" pos:end="881:6">ifdef</cpp:directive> <name pos:start="881:8" pos:end="881:20">TARGET_X86_64</name></cpp:ifdef>

            <case pos:start="883:13" pos:end="883:25">case <expr pos:start="883:18" pos:end="883:24"><name pos:start="883:18" pos:end="883:24">OT_QUAD</name></expr>:</case>

                <expr_stmt pos:start="885:17" pos:end="885:59"><expr pos:start="885:17" pos:end="885:58"><call pos:start="885:17" pos:end="885:58"><name pos:start="885:17" pos:end="885:39">gen_helper_imulq_EAX_T0</name><argument_list pos:start="885:40" pos:end="885:58">(<argument pos:start="885:41" pos:end="885:47"><expr pos:start="885:41" pos:end="885:47"><name pos:start="885:41" pos:end="885:47">cpu_env</name></expr></argument>, <argument pos:start="885:50" pos:end="885:57"><expr pos:start="885:50" pos:end="885:57"><name pos:start="885:50" pos:end="885:57"><name pos:start="885:50" pos:end="885:54">cpu_T</name><index pos:start="885:55" pos:end="885:57">[<expr pos:start="885:56" pos:end="885:56"><literal type="number" pos:start="885:56" pos:end="885:56">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="887:17" pos:end="887:38"><expr pos:start="887:17" pos:end="887:37"><name pos:start="887:17" pos:end="887:24"><name pos:start="887:17" pos:end="887:17">s</name><operator pos:start="887:18" pos:end="887:19">-&gt;</operator><name pos:start="887:20" pos:end="887:24">cc_op</name></name> <operator pos:start="887:26" pos:end="887:26">=</operator> <name pos:start="887:28" pos:end="887:37">CC_OP_MULQ</name></expr>;</expr_stmt>

                <break pos:start="889:17" pos:end="892:0">break;</break>

<cpp:endif pos:start="891:1" pos:end="891:6">#<cpp:directive pos:start="891:2" pos:end="891:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></switch>

            <break pos:start="895:13" pos:end="895:18">break;</break>

        <case pos:start="897:9" pos:end="897:15">case <expr pos:start="897:14" pos:end="897:14"><literal type="number" pos:start="897:14" pos:end="897:14">6</literal></expr>:</case> <comment type="block" pos:start="897:17" pos:end="897:25">/* div */</comment>

            <switch pos:start="899:13" pos:end="939:13">switch<condition pos:start="899:19" pos:end="899:22">(<expr pos:start="899:20" pos:end="899:21"><name pos:start="899:20" pos:end="899:21">ot</name></expr>)</condition> <block pos:start="899:24" pos:end="939:13">{<block_content pos:start="901:13" pos:end="938:0">

            <case pos:start="901:13" pos:end="901:25">case <expr pos:start="901:18" pos:end="901:24"><name pos:start="901:18" pos:end="901:24">OT_BYTE</name></expr>:</case>

                <expr_stmt pos:start="903:17" pos:end="903:50"><expr pos:start="903:17" pos:end="903:49"><call pos:start="903:17" pos:end="903:49"><name pos:start="903:17" pos:end="903:26">gen_jmp_im</name><argument_list pos:start="903:27" pos:end="903:49">(<argument pos:start="903:28" pos:end="903:48"><expr pos:start="903:28" pos:end="903:48"><name pos:start="903:28" pos:end="903:35">pc_start</name> <operator pos:start="903:37" pos:end="903:37">-</operator> <name pos:start="903:39" pos:end="903:48"><name pos:start="903:39" pos:end="903:39">s</name><operator pos:start="903:40" pos:end="903:41">-&gt;</operator><name pos:start="903:42" pos:end="903:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="905:17" pos:end="905:54"><expr pos:start="905:17" pos:end="905:53"><call pos:start="905:17" pos:end="905:53"><name pos:start="905:17" pos:end="905:34">gen_helper_divb_AL</name><argument_list pos:start="905:35" pos:end="905:53">(<argument pos:start="905:36" pos:end="905:42"><expr pos:start="905:36" pos:end="905:42"><name pos:start="905:36" pos:end="905:42">cpu_env</name></expr></argument>, <argument pos:start="905:45" pos:end="905:52"><expr pos:start="905:45" pos:end="905:52"><name pos:start="905:45" pos:end="905:52"><name pos:start="905:45" pos:end="905:49">cpu_T</name><index pos:start="905:50" pos:end="905:52">[<expr pos:start="905:51" pos:end="905:51"><literal type="number" pos:start="905:51" pos:end="905:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="907:17" pos:end="907:22">break;</break>

            <case pos:start="909:13" pos:end="909:25">case <expr pos:start="909:18" pos:end="909:24"><name pos:start="909:18" pos:end="909:24">OT_WORD</name></expr>:</case>

                <expr_stmt pos:start="911:17" pos:end="911:50"><expr pos:start="911:17" pos:end="911:49"><call pos:start="911:17" pos:end="911:49"><name pos:start="911:17" pos:end="911:26">gen_jmp_im</name><argument_list pos:start="911:27" pos:end="911:49">(<argument pos:start="911:28" pos:end="911:48"><expr pos:start="911:28" pos:end="911:48"><name pos:start="911:28" pos:end="911:35">pc_start</name> <operator pos:start="911:37" pos:end="911:37">-</operator> <name pos:start="911:39" pos:end="911:48"><name pos:start="911:39" pos:end="911:39">s</name><operator pos:start="911:40" pos:end="911:41">-&gt;</operator><name pos:start="911:42" pos:end="911:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="913:17" pos:end="913:54"><expr pos:start="913:17" pos:end="913:53"><call pos:start="913:17" pos:end="913:53"><name pos:start="913:17" pos:end="913:34">gen_helper_divw_AX</name><argument_list pos:start="913:35" pos:end="913:53">(<argument pos:start="913:36" pos:end="913:42"><expr pos:start="913:36" pos:end="913:42"><name pos:start="913:36" pos:end="913:42">cpu_env</name></expr></argument>, <argument pos:start="913:45" pos:end="913:52"><expr pos:start="913:45" pos:end="913:52"><name pos:start="913:45" pos:end="913:52"><name pos:start="913:45" pos:end="913:49">cpu_T</name><index pos:start="913:50" pos:end="913:52">[<expr pos:start="913:51" pos:end="913:51"><literal type="number" pos:start="913:51" pos:end="913:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="915:17" pos:end="915:22">break;</break>

            <default pos:start="917:13" pos:end="917:20">default:</default>

            <case pos:start="919:13" pos:end="919:25">case <expr pos:start="919:18" pos:end="919:24"><name pos:start="919:18" pos:end="919:24">OT_LONG</name></expr>:</case>

                <expr_stmt pos:start="921:17" pos:end="921:50"><expr pos:start="921:17" pos:end="921:49"><call pos:start="921:17" pos:end="921:49"><name pos:start="921:17" pos:end="921:26">gen_jmp_im</name><argument_list pos:start="921:27" pos:end="921:49">(<argument pos:start="921:28" pos:end="921:48"><expr pos:start="921:28" pos:end="921:48"><name pos:start="921:28" pos:end="921:35">pc_start</name> <operator pos:start="921:37" pos:end="921:37">-</operator> <name pos:start="921:39" pos:end="921:48"><name pos:start="921:39" pos:end="921:39">s</name><operator pos:start="921:40" pos:end="921:41">-&gt;</operator><name pos:start="921:42" pos:end="921:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="923:17" pos:end="923:55"><expr pos:start="923:17" pos:end="923:54"><call pos:start="923:17" pos:end="923:54"><name pos:start="923:17" pos:end="923:35">gen_helper_divl_EAX</name><argument_list pos:start="923:36" pos:end="923:54">(<argument pos:start="923:37" pos:end="923:43"><expr pos:start="923:37" pos:end="923:43"><name pos:start="923:37" pos:end="923:43">cpu_env</name></expr></argument>, <argument pos:start="923:46" pos:end="923:53"><expr pos:start="923:46" pos:end="923:53"><name pos:start="923:46" pos:end="923:53"><name pos:start="923:46" pos:end="923:50">cpu_T</name><index pos:start="923:51" pos:end="923:53">[<expr pos:start="923:52" pos:end="923:52"><literal type="number" pos:start="923:52" pos:end="923:52">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="925:17" pos:end="928:0">break;</break>

<cpp:ifdef pos:start="927:1" pos:end="927:20">#<cpp:directive pos:start="927:2" pos:end="927:6">ifdef</cpp:directive> <name pos:start="927:8" pos:end="927:20">TARGET_X86_64</name></cpp:ifdef>

            <case pos:start="929:13" pos:end="929:25">case <expr pos:start="929:18" pos:end="929:24"><name pos:start="929:18" pos:end="929:24">OT_QUAD</name></expr>:</case>

                <expr_stmt pos:start="931:17" pos:end="931:50"><expr pos:start="931:17" pos:end="931:49"><call pos:start="931:17" pos:end="931:49"><name pos:start="931:17" pos:end="931:26">gen_jmp_im</name><argument_list pos:start="931:27" pos:end="931:49">(<argument pos:start="931:28" pos:end="931:48"><expr pos:start="931:28" pos:end="931:48"><name pos:start="931:28" pos:end="931:35">pc_start</name> <operator pos:start="931:37" pos:end="931:37">-</operator> <name pos:start="931:39" pos:end="931:48"><name pos:start="931:39" pos:end="931:39">s</name><operator pos:start="931:40" pos:end="931:41">-&gt;</operator><name pos:start="931:42" pos:end="931:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="933:17" pos:end="933:55"><expr pos:start="933:17" pos:end="933:54"><call pos:start="933:17" pos:end="933:54"><name pos:start="933:17" pos:end="933:35">gen_helper_divq_EAX</name><argument_list pos:start="933:36" pos:end="933:54">(<argument pos:start="933:37" pos:end="933:43"><expr pos:start="933:37" pos:end="933:43"><name pos:start="933:37" pos:end="933:43">cpu_env</name></expr></argument>, <argument pos:start="933:46" pos:end="933:53"><expr pos:start="933:46" pos:end="933:53"><name pos:start="933:46" pos:end="933:53"><name pos:start="933:46" pos:end="933:50">cpu_T</name><index pos:start="933:51" pos:end="933:53">[<expr pos:start="933:52" pos:end="933:52"><literal type="number" pos:start="933:52" pos:end="933:52">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="935:17" pos:end="938:0">break;</break>

<cpp:endif pos:start="937:1" pos:end="937:6">#<cpp:directive pos:start="937:2" pos:end="937:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></switch>

            <break pos:start="941:13" pos:end="941:18">break;</break>

        <case pos:start="943:9" pos:end="943:15">case <expr pos:start="943:14" pos:end="943:14"><literal type="number" pos:start="943:14" pos:end="943:14">7</literal></expr>:</case> <comment type="block" pos:start="943:17" pos:end="943:26">/* idiv */</comment>

            <switch pos:start="945:13" pos:end="985:13">switch<condition pos:start="945:19" pos:end="945:22">(<expr pos:start="945:20" pos:end="945:21"><name pos:start="945:20" pos:end="945:21">ot</name></expr>)</condition> <block pos:start="945:24" pos:end="985:13">{<block_content pos:start="947:13" pos:end="984:0">

            <case pos:start="947:13" pos:end="947:25">case <expr pos:start="947:18" pos:end="947:24"><name pos:start="947:18" pos:end="947:24">OT_BYTE</name></expr>:</case>

                <expr_stmt pos:start="949:17" pos:end="949:50"><expr pos:start="949:17" pos:end="949:49"><call pos:start="949:17" pos:end="949:49"><name pos:start="949:17" pos:end="949:26">gen_jmp_im</name><argument_list pos:start="949:27" pos:end="949:49">(<argument pos:start="949:28" pos:end="949:48"><expr pos:start="949:28" pos:end="949:48"><name pos:start="949:28" pos:end="949:35">pc_start</name> <operator pos:start="949:37" pos:end="949:37">-</operator> <name pos:start="949:39" pos:end="949:48"><name pos:start="949:39" pos:end="949:39">s</name><operator pos:start="949:40" pos:end="949:41">-&gt;</operator><name pos:start="949:42" pos:end="949:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="951:17" pos:end="951:55"><expr pos:start="951:17" pos:end="951:54"><call pos:start="951:17" pos:end="951:54"><name pos:start="951:17" pos:end="951:35">gen_helper_idivb_AL</name><argument_list pos:start="951:36" pos:end="951:54">(<argument pos:start="951:37" pos:end="951:43"><expr pos:start="951:37" pos:end="951:43"><name pos:start="951:37" pos:end="951:43">cpu_env</name></expr></argument>, <argument pos:start="951:46" pos:end="951:53"><expr pos:start="951:46" pos:end="951:53"><name pos:start="951:46" pos:end="951:53"><name pos:start="951:46" pos:end="951:50">cpu_T</name><index pos:start="951:51" pos:end="951:53">[<expr pos:start="951:52" pos:end="951:52"><literal type="number" pos:start="951:52" pos:end="951:52">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="953:17" pos:end="953:22">break;</break>

            <case pos:start="955:13" pos:end="955:25">case <expr pos:start="955:18" pos:end="955:24"><name pos:start="955:18" pos:end="955:24">OT_WORD</name></expr>:</case>

                <expr_stmt pos:start="957:17" pos:end="957:50"><expr pos:start="957:17" pos:end="957:49"><call pos:start="957:17" pos:end="957:49"><name pos:start="957:17" pos:end="957:26">gen_jmp_im</name><argument_list pos:start="957:27" pos:end="957:49">(<argument pos:start="957:28" pos:end="957:48"><expr pos:start="957:28" pos:end="957:48"><name pos:start="957:28" pos:end="957:35">pc_start</name> <operator pos:start="957:37" pos:end="957:37">-</operator> <name pos:start="957:39" pos:end="957:48"><name pos:start="957:39" pos:end="957:39">s</name><operator pos:start="957:40" pos:end="957:41">-&gt;</operator><name pos:start="957:42" pos:end="957:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="959:17" pos:end="959:55"><expr pos:start="959:17" pos:end="959:54"><call pos:start="959:17" pos:end="959:54"><name pos:start="959:17" pos:end="959:35">gen_helper_idivw_AX</name><argument_list pos:start="959:36" pos:end="959:54">(<argument pos:start="959:37" pos:end="959:43"><expr pos:start="959:37" pos:end="959:43"><name pos:start="959:37" pos:end="959:43">cpu_env</name></expr></argument>, <argument pos:start="959:46" pos:end="959:53"><expr pos:start="959:46" pos:end="959:53"><name pos:start="959:46" pos:end="959:53"><name pos:start="959:46" pos:end="959:50">cpu_T</name><index pos:start="959:51" pos:end="959:53">[<expr pos:start="959:52" pos:end="959:52"><literal type="number" pos:start="959:52" pos:end="959:52">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="961:17" pos:end="961:22">break;</break>

            <default pos:start="963:13" pos:end="963:20">default:</default>

            <case pos:start="965:13" pos:end="965:25">case <expr pos:start="965:18" pos:end="965:24"><name pos:start="965:18" pos:end="965:24">OT_LONG</name></expr>:</case>

                <expr_stmt pos:start="967:17" pos:end="967:50"><expr pos:start="967:17" pos:end="967:49"><call pos:start="967:17" pos:end="967:49"><name pos:start="967:17" pos:end="967:26">gen_jmp_im</name><argument_list pos:start="967:27" pos:end="967:49">(<argument pos:start="967:28" pos:end="967:48"><expr pos:start="967:28" pos:end="967:48"><name pos:start="967:28" pos:end="967:35">pc_start</name> <operator pos:start="967:37" pos:end="967:37">-</operator> <name pos:start="967:39" pos:end="967:48"><name pos:start="967:39" pos:end="967:39">s</name><operator pos:start="967:40" pos:end="967:41">-&gt;</operator><name pos:start="967:42" pos:end="967:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="969:17" pos:end="969:56"><expr pos:start="969:17" pos:end="969:55"><call pos:start="969:17" pos:end="969:55"><name pos:start="969:17" pos:end="969:36">gen_helper_idivl_EAX</name><argument_list pos:start="969:37" pos:end="969:55">(<argument pos:start="969:38" pos:end="969:44"><expr pos:start="969:38" pos:end="969:44"><name pos:start="969:38" pos:end="969:44">cpu_env</name></expr></argument>, <argument pos:start="969:47" pos:end="969:54"><expr pos:start="969:47" pos:end="969:54"><name pos:start="969:47" pos:end="969:54"><name pos:start="969:47" pos:end="969:51">cpu_T</name><index pos:start="969:52" pos:end="969:54">[<expr pos:start="969:53" pos:end="969:53"><literal type="number" pos:start="969:53" pos:end="969:53">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="971:17" pos:end="974:0">break;</break>

<cpp:ifdef pos:start="973:1" pos:end="973:20">#<cpp:directive pos:start="973:2" pos:end="973:6">ifdef</cpp:directive> <name pos:start="973:8" pos:end="973:20">TARGET_X86_64</name></cpp:ifdef>

            <case pos:start="975:13" pos:end="975:25">case <expr pos:start="975:18" pos:end="975:24"><name pos:start="975:18" pos:end="975:24">OT_QUAD</name></expr>:</case>

                <expr_stmt pos:start="977:17" pos:end="977:50"><expr pos:start="977:17" pos:end="977:49"><call pos:start="977:17" pos:end="977:49"><name pos:start="977:17" pos:end="977:26">gen_jmp_im</name><argument_list pos:start="977:27" pos:end="977:49">(<argument pos:start="977:28" pos:end="977:48"><expr pos:start="977:28" pos:end="977:48"><name pos:start="977:28" pos:end="977:35">pc_start</name> <operator pos:start="977:37" pos:end="977:37">-</operator> <name pos:start="977:39" pos:end="977:48"><name pos:start="977:39" pos:end="977:39">s</name><operator pos:start="977:40" pos:end="977:41">-&gt;</operator><name pos:start="977:42" pos:end="977:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="979:17" pos:end="979:56"><expr pos:start="979:17" pos:end="979:55"><call pos:start="979:17" pos:end="979:55"><name pos:start="979:17" pos:end="979:36">gen_helper_idivq_EAX</name><argument_list pos:start="979:37" pos:end="979:55">(<argument pos:start="979:38" pos:end="979:44"><expr pos:start="979:38" pos:end="979:44"><name pos:start="979:38" pos:end="979:44">cpu_env</name></expr></argument>, <argument pos:start="979:47" pos:end="979:54"><expr pos:start="979:47" pos:end="979:54"><name pos:start="979:47" pos:end="979:54"><name pos:start="979:47" pos:end="979:51">cpu_T</name><index pos:start="979:52" pos:end="979:54">[<expr pos:start="979:53" pos:end="979:53"><literal type="number" pos:start="979:53" pos:end="979:53">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="981:17" pos:end="984:0">break;</break>

<cpp:endif pos:start="983:1" pos:end="983:6">#<cpp:directive pos:start="983:2" pos:end="983:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></switch>

            <break pos:start="987:13" pos:end="987:18">break;</break>

        <default pos:start="989:9" pos:end="989:16">default:</default>

            <goto pos:start="991:13" pos:end="991:28">goto <name pos:start="991:18" pos:end="991:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="995:9" pos:end="995:14">break;</break>



    <case pos:start="999:5" pos:end="999:14">case <expr pos:start="999:10" pos:end="999:13"><literal type="number" pos:start="999:10" pos:end="999:13">0xfe</literal></expr>:</case> <comment type="block" pos:start="999:16" pos:end="999:25">/* GRP4 */</comment>

    <case pos:start="1001:5" pos:end="1001:14">case <expr pos:start="1001:10" pos:end="1001:13"><literal type="number" pos:start="1001:10" pos:end="1001:13">0xff</literal></expr>:</case> <comment type="block" pos:start="1001:16" pos:end="1001:25">/* GRP5 */</comment>

        <if_stmt pos:start="1003:9" pos:end="1009:33"><if pos:start="1003:9" pos:end="1005:25">if <condition pos:start="1003:12" pos:end="1003:25">(<expr pos:start="1003:13" pos:end="1003:24"><operator pos:start="1003:13" pos:end="1003:13">(</operator><name pos:start="1003:14" pos:end="1003:14">b</name> <operator pos:start="1003:16" pos:end="1003:16">&amp;</operator> <literal type="number" pos:start="1003:18" pos:end="1003:18">1</literal><operator pos:start="1003:19" pos:end="1003:19">)</operator> <operator pos:start="1003:21" pos:end="1003:22">==</operator> <literal type="number" pos:start="1003:24" pos:end="1003:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1005:13" pos:end="1005:25"><block_content pos:start="1005:13" pos:end="1005:25">

            <expr_stmt pos:start="1005:13" pos:end="1005:25"><expr pos:start="1005:13" pos:end="1005:24"><name pos:start="1005:13" pos:end="1005:14">ot</name> <operator pos:start="1005:16" pos:end="1005:16">=</operator> <name pos:start="1005:18" pos:end="1005:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1007:9" pos:end="1009:33">else<block type="pseudo" pos:start="1009:13" pos:end="1009:33"><block_content pos:start="1009:13" pos:end="1009:33">

            <expr_stmt pos:start="1009:13" pos:end="1009:33"><expr pos:start="1009:13" pos:end="1009:32"><name pos:start="1009:13" pos:end="1009:14">ot</name> <operator pos:start="1009:16" pos:end="1009:16">=</operator> <name pos:start="1009:18" pos:end="1009:22">dflag</name> <operator pos:start="1009:24" pos:end="1009:24">+</operator> <name pos:start="1009:26" pos:end="1009:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="1013:9" pos:end="1013:44"><expr pos:start="1013:9" pos:end="1013:43"><name pos:start="1013:9" pos:end="1013:13">modrm</name> <operator pos:start="1013:15" pos:end="1013:15">=</operator> <call pos:start="1013:17" pos:end="1013:43"><name pos:start="1013:17" pos:end="1013:29">cpu_ldub_code</name><argument_list pos:start="1013:30" pos:end="1013:43">(<argument pos:start="1013:31" pos:end="1013:33"><expr pos:start="1013:31" pos:end="1013:33"><name pos:start="1013:31" pos:end="1013:33">env</name></expr></argument>, <argument pos:start="1013:36" pos:end="1013:42"><expr pos:start="1013:36" pos:end="1013:42"><name pos:start="1013:36" pos:end="1013:40"><name pos:start="1013:36" pos:end="1013:36">s</name><operator pos:start="1013:37" pos:end="1013:38">-&gt;</operator><name pos:start="1013:39" pos:end="1013:40">pc</name></name><operator pos:start="1013:41" pos:end="1013:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1015:9" pos:end="1015:31"><expr pos:start="1015:9" pos:end="1015:30"><name pos:start="1015:9" pos:end="1015:11">mod</name> <operator pos:start="1015:13" pos:end="1015:13">=</operator> <operator pos:start="1015:15" pos:end="1015:15">(</operator><name pos:start="1015:16" pos:end="1015:20">modrm</name> <operator pos:start="1015:22" pos:end="1015:23">&gt;&gt;</operator> <literal type="number" pos:start="1015:25" pos:end="1015:25">6</literal><operator pos:start="1015:26" pos:end="1015:26">)</operator> <operator pos:start="1015:28" pos:end="1015:28">&amp;</operator> <literal type="number" pos:start="1015:30" pos:end="1015:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1017:9" pos:end="1017:36"><expr pos:start="1017:9" pos:end="1017:35"><name pos:start="1017:9" pos:end="1017:10">rm</name> <operator pos:start="1017:12" pos:end="1017:12">=</operator> <operator pos:start="1017:14" pos:end="1017:14">(</operator><name pos:start="1017:15" pos:end="1017:19">modrm</name> <operator pos:start="1017:21" pos:end="1017:21">&amp;</operator> <literal type="number" pos:start="1017:23" pos:end="1017:23">7</literal><operator pos:start="1017:24" pos:end="1017:24">)</operator> <operator pos:start="1017:26" pos:end="1017:26">|</operator> <call pos:start="1017:28" pos:end="1017:35"><name pos:start="1017:28" pos:end="1017:32">REX_B</name><argument_list pos:start="1017:33" pos:end="1017:35">(<argument pos:start="1017:34" pos:end="1017:34"><expr pos:start="1017:34" pos:end="1017:34"><name pos:start="1017:34" pos:end="1017:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1019:9" pos:end="1019:30"><expr pos:start="1019:9" pos:end="1019:29"><name pos:start="1019:9" pos:end="1019:10">op</name> <operator pos:start="1019:12" pos:end="1019:12">=</operator> <operator pos:start="1019:14" pos:end="1019:14">(</operator><name pos:start="1019:15" pos:end="1019:19">modrm</name> <operator pos:start="1019:21" pos:end="1019:22">&gt;&gt;</operator> <literal type="number" pos:start="1019:24" pos:end="1019:24">3</literal><operator pos:start="1019:25" pos:end="1019:25">)</operator> <operator pos:start="1019:27" pos:end="1019:27">&amp;</operator> <literal type="number" pos:start="1019:29" pos:end="1019:29">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1021:9" pos:end="1025:9"><if pos:start="1021:9" pos:end="1025:9">if <condition pos:start="1021:12" pos:end="1021:33">(<expr pos:start="1021:13" pos:end="1021:32"><name pos:start="1021:13" pos:end="1021:14">op</name> <operator pos:start="1021:16" pos:end="1021:17">&gt;=</operator> <literal type="number" pos:start="1021:19" pos:end="1021:19">2</literal> <operator pos:start="1021:21" pos:end="1021:22">&amp;&amp;</operator> <name pos:start="1021:24" pos:end="1021:24">b</name> <operator pos:start="1021:26" pos:end="1021:27">==</operator> <literal type="number" pos:start="1021:29" pos:end="1021:32">0xfe</literal></expr>)</condition> <block pos:start="1021:35" pos:end="1025:9">{<block_content pos:start="1023:13" pos:end="1023:28">

            <goto pos:start="1023:13" pos:end="1023:28">goto <name pos:start="1023:18" pos:end="1023:27">illegal_op</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="1027:9" pos:end="1047:9"><if pos:start="1027:9" pos:end="1047:9">if <condition pos:start="1027:12" pos:end="1027:22">(<expr pos:start="1027:13" pos:end="1027:21"><call pos:start="1027:13" pos:end="1027:21"><name pos:start="1027:13" pos:end="1027:18">CODE64</name><argument_list pos:start="1027:19" pos:end="1027:21">(<argument pos:start="1027:20" pos:end="1027:20"><expr pos:start="1027:20" pos:end="1027:20"><name pos:start="1027:20" pos:end="1027:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1027:24" pos:end="1047:9">{<block_content pos:start="1029:13" pos:end="1045:13">

            <if_stmt pos:start="1029:13" pos:end="1045:13"><if pos:start="1029:13" pos:end="1035:13">if <condition pos:start="1029:16" pos:end="1029:35">(<expr pos:start="1029:17" pos:end="1029:34"><name pos:start="1029:17" pos:end="1029:18">op</name> <operator pos:start="1029:20" pos:end="1029:21">==</operator> <literal type="number" pos:start="1029:23" pos:end="1029:23">2</literal> <operator pos:start="1029:25" pos:end="1029:26">||</operator> <name pos:start="1029:28" pos:end="1029:29">op</name> <operator pos:start="1029:31" pos:end="1029:32">==</operator> <literal type="number" pos:start="1029:34" pos:end="1029:34">4</literal></expr>)</condition> <block pos:start="1029:37" pos:end="1035:13">{<block_content pos:start="1033:17" pos:end="1033:29">

                <comment type="block" pos:start="1031:17" pos:end="1031:54">/* operand size for jumps is 64 bit */</comment>

                <expr_stmt pos:start="1033:17" pos:end="1033:29"><expr pos:start="1033:17" pos:end="1033:28"><name pos:start="1033:17" pos:end="1033:18">ot</name> <operator pos:start="1033:20" pos:end="1033:20">=</operator> <name pos:start="1033:22" pos:end="1033:28">OT_QUAD</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1035:15" pos:end="1039:13">else if <condition pos:start="1035:23" pos:end="1035:42">(<expr pos:start="1035:24" pos:end="1035:41"><name pos:start="1035:24" pos:end="1035:25">op</name> <operator pos:start="1035:27" pos:end="1035:28">==</operator> <literal type="number" pos:start="1035:30" pos:end="1035:30">3</literal> <operator pos:start="1035:32" pos:end="1035:33">||</operator> <name pos:start="1035:35" pos:end="1035:36">op</name> <operator pos:start="1035:38" pos:end="1035:39">==</operator> <literal type="number" pos:start="1035:41" pos:end="1035:41">5</literal></expr>)</condition> <block pos:start="1035:44" pos:end="1039:13">{<block_content pos:start="1037:17" pos:end="1037:62">

                <expr_stmt pos:start="1037:17" pos:end="1037:62"><expr pos:start="1037:17" pos:end="1037:61"><name pos:start="1037:17" pos:end="1037:18">ot</name> <operator pos:start="1037:20" pos:end="1037:20">=</operator> <ternary pos:start="1037:22" pos:end="1037:61"><condition pos:start="1037:22" pos:end="1037:28"><expr pos:start="1037:22" pos:end="1037:26"><name pos:start="1037:22" pos:end="1037:26">dflag</name></expr> ?</condition><then pos:start="1037:30" pos:end="1037:51"> <expr pos:start="1037:30" pos:end="1037:51"><name pos:start="1037:30" pos:end="1037:36">OT_LONG</name> <operator pos:start="1037:38" pos:end="1037:38">+</operator> <operator pos:start="1037:40" pos:end="1037:40">(</operator><name pos:start="1037:41" pos:end="1037:45">rex_w</name> <operator pos:start="1037:47" pos:end="1037:48">==</operator> <literal type="number" pos:start="1037:50" pos:end="1037:50">1</literal><operator pos:start="1037:51" pos:end="1037:51">)</operator></expr> </then><else pos:start="1037:53" pos:end="1037:61">: <expr pos:start="1037:55" pos:end="1037:61"><name pos:start="1037:55" pos:end="1037:61">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1039:15" pos:end="1045:13">else if <condition pos:start="1039:23" pos:end="1039:31">(<expr pos:start="1039:24" pos:end="1039:30"><name pos:start="1039:24" pos:end="1039:25">op</name> <operator pos:start="1039:27" pos:end="1039:28">==</operator> <literal type="number" pos:start="1039:30" pos:end="1039:30">6</literal></expr>)</condition> <block pos:start="1039:33" pos:end="1045:13">{<block_content pos:start="1043:17" pos:end="1043:47">

                <comment type="block" pos:start="1041:17" pos:end="1041:49">/* default push size is 64 bit */</comment>

                <expr_stmt pos:start="1043:17" pos:end="1043:47"><expr pos:start="1043:17" pos:end="1043:46"><name pos:start="1043:17" pos:end="1043:18">ot</name> <operator pos:start="1043:20" pos:end="1043:20">=</operator> <ternary pos:start="1043:22" pos:end="1043:46"><condition pos:start="1043:22" pos:end="1043:28"><expr pos:start="1043:22" pos:end="1043:26"><name pos:start="1043:22" pos:end="1043:26">dflag</name></expr> ?</condition><then pos:start="1043:30" pos:end="1043:36"> <expr pos:start="1043:30" pos:end="1043:36"><name pos:start="1043:30" pos:end="1043:36">OT_QUAD</name></expr> </then><else pos:start="1043:38" pos:end="1043:46">: <expr pos:start="1043:40" pos:end="1043:46"><name pos:start="1043:40" pos:end="1043:46">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="1049:9" pos:end="1061:9"><if pos:start="1049:9" pos:end="1057:9">if <condition pos:start="1049:12" pos:end="1049:21">(<expr pos:start="1049:13" pos:end="1049:20"><name pos:start="1049:13" pos:end="1049:15">mod</name> <operator pos:start="1049:17" pos:end="1049:18">!=</operator> <literal type="number" pos:start="1049:20" pos:end="1049:20">3</literal></expr>)</condition> <block pos:start="1049:23" pos:end="1057:9">{<block_content pos:start="1051:13" pos:end="1055:51">

            <expr_stmt pos:start="1051:13" pos:end="1051:66"><expr pos:start="1051:13" pos:end="1051:65"><call pos:start="1051:13" pos:end="1051:65"><name pos:start="1051:13" pos:end="1051:25">gen_lea_modrm</name><argument_list pos:start="1051:26" pos:end="1051:65">(<argument pos:start="1051:27" pos:end="1051:29"><expr pos:start="1051:27" pos:end="1051:29"><name pos:start="1051:27" pos:end="1051:29">env</name></expr></argument>, <argument pos:start="1051:32" pos:end="1051:32"><expr pos:start="1051:32" pos:end="1051:32"><name pos:start="1051:32" pos:end="1051:32">s</name></expr></argument>, <argument pos:start="1051:35" pos:end="1051:39"><expr pos:start="1051:35" pos:end="1051:39"><name pos:start="1051:35" pos:end="1051:39">modrm</name></expr></argument>, <argument pos:start="1051:42" pos:end="1051:50"><expr pos:start="1051:42" pos:end="1051:50"><operator pos:start="1051:42" pos:end="1051:42">&amp;</operator><name pos:start="1051:43" pos:end="1051:50">reg_addr</name></expr></argument>, <argument pos:start="1051:53" pos:end="1051:64"><expr pos:start="1051:53" pos:end="1051:64"><operator pos:start="1051:53" pos:end="1051:53">&amp;</operator><name pos:start="1051:54" pos:end="1051:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1053:13" pos:end="1055:51"><if pos:start="1053:13" pos:end="1055:51">if <condition pos:start="1053:16" pos:end="1053:46">(<expr pos:start="1053:17" pos:end="1053:45"><name pos:start="1053:17" pos:end="1053:18">op</name> <operator pos:start="1053:20" pos:end="1053:21">&gt;=</operator> <literal type="number" pos:start="1053:23" pos:end="1053:23">2</literal> <operator pos:start="1053:25" pos:end="1053:26">&amp;&amp;</operator> <name pos:start="1053:28" pos:end="1053:29">op</name> <operator pos:start="1053:31" pos:end="1053:32">!=</operator> <literal type="number" pos:start="1053:34" pos:end="1053:34">3</literal> <operator pos:start="1053:36" pos:end="1053:37">&amp;&amp;</operator> <name pos:start="1053:39" pos:end="1053:40">op</name> <operator pos:start="1053:42" pos:end="1053:43">!=</operator> <literal type="number" pos:start="1053:45" pos:end="1053:45">5</literal></expr>)</condition><block type="pseudo" pos:start="1055:17" pos:end="1055:51"><block_content pos:start="1055:17" pos:end="1055:51">

                <expr_stmt pos:start="1055:17" pos:end="1055:51"><expr pos:start="1055:17" pos:end="1055:50"><call pos:start="1055:17" pos:end="1055:50"><name pos:start="1055:17" pos:end="1055:31">gen_op_ld_T0_A0</name><argument_list pos:start="1055:32" pos:end="1055:50">(<argument pos:start="1055:33" pos:end="1055:49"><expr pos:start="1055:33" pos:end="1055:49"><name pos:start="1055:33" pos:end="1055:34">ot</name> <operator pos:start="1055:36" pos:end="1055:36">+</operator> <name pos:start="1055:38" pos:end="1055:49"><name pos:start="1055:38" pos:end="1055:38">s</name><operator pos:start="1055:39" pos:end="1055:40">-&gt;</operator><name pos:start="1055:41" pos:end="1055:49">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="1057:11" pos:end="1061:9">else <block pos:start="1057:16" pos:end="1061:9">{<block_content pos:start="1059:13" pos:end="1059:41">

            <expr_stmt pos:start="1059:13" pos:end="1059:41"><expr pos:start="1059:13" pos:end="1059:40"><call pos:start="1059:13" pos:end="1059:40"><name pos:start="1059:13" pos:end="1059:29">gen_op_mov_TN_reg</name><argument_list pos:start="1059:30" pos:end="1059:40">(<argument pos:start="1059:31" pos:end="1059:32"><expr pos:start="1059:31" pos:end="1059:32"><name pos:start="1059:31" pos:end="1059:32">ot</name></expr></argument>, <argument pos:start="1059:35" pos:end="1059:35"><expr pos:start="1059:35" pos:end="1059:35"><literal type="number" pos:start="1059:35" pos:end="1059:35">0</literal></expr></argument>, <argument pos:start="1059:38" pos:end="1059:39"><expr pos:start="1059:38" pos:end="1059:39"><name pos:start="1059:38" pos:end="1059:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <switch pos:start="1065:9" pos:end="1217:9">switch<condition pos:start="1065:15" pos:end="1065:18">(<expr pos:start="1065:16" pos:end="1065:17"><name pos:start="1065:16" pos:end="1065:17">op</name></expr>)</condition> <block pos:start="1065:20" pos:end="1217:9">{<block_content pos:start="1067:9" pos:end="1215:28">

        <case pos:start="1067:9" pos:end="1067:15">case <expr pos:start="1067:14" pos:end="1067:14"><literal type="number" pos:start="1067:14" pos:end="1067:14">0</literal></expr>:</case> <comment type="block" pos:start="1067:17" pos:end="1067:28">/* inc Ev */</comment>

            <if_stmt pos:start="1069:13" pos:end="1075:27"><if pos:start="1069:13" pos:end="1071:32">if <condition pos:start="1069:16" pos:end="1069:25">(<expr pos:start="1069:17" pos:end="1069:24"><name pos:start="1069:17" pos:end="1069:19">mod</name> <operator pos:start="1069:21" pos:end="1069:22">!=</operator> <literal type="number" pos:start="1069:24" pos:end="1069:24">3</literal></expr>)</condition><block type="pseudo" pos:start="1071:17" pos:end="1071:32"><block_content pos:start="1071:17" pos:end="1071:32">

                <expr_stmt pos:start="1071:17" pos:end="1071:32"><expr pos:start="1071:17" pos:end="1071:31"><name pos:start="1071:17" pos:end="1071:21">opreg</name> <operator pos:start="1071:23" pos:end="1071:23">=</operator> <name pos:start="1071:25" pos:end="1071:31">OR_TMP0</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="1073:13" pos:end="1075:27">else<block type="pseudo" pos:start="1075:17" pos:end="1075:27"><block_content pos:start="1075:17" pos:end="1075:27">

                <expr_stmt pos:start="1075:17" pos:end="1075:27"><expr pos:start="1075:17" pos:end="1075:26"><name pos:start="1075:17" pos:end="1075:21">opreg</name> <operator pos:start="1075:23" pos:end="1075:23">=</operator> <name pos:start="1075:25" pos:end="1075:26">rm</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="1077:13" pos:end="1077:37"><expr pos:start="1077:13" pos:end="1077:36"><call pos:start="1077:13" pos:end="1077:36"><name pos:start="1077:13" pos:end="1077:19">gen_inc</name><argument_list pos:start="1077:20" pos:end="1077:36">(<argument pos:start="1077:21" pos:end="1077:21"><expr pos:start="1077:21" pos:end="1077:21"><name pos:start="1077:21" pos:end="1077:21">s</name></expr></argument>, <argument pos:start="1077:24" pos:end="1077:25"><expr pos:start="1077:24" pos:end="1077:25"><name pos:start="1077:24" pos:end="1077:25">ot</name></expr></argument>, <argument pos:start="1077:28" pos:end="1077:32"><expr pos:start="1077:28" pos:end="1077:32"><name pos:start="1077:28" pos:end="1077:32">opreg</name></expr></argument>, <argument pos:start="1077:35" pos:end="1077:35"><expr pos:start="1077:35" pos:end="1077:35"><literal type="number" pos:start="1077:35" pos:end="1077:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1079:13" pos:end="1079:18">break;</break>

        <case pos:start="1081:9" pos:end="1081:15">case <expr pos:start="1081:14" pos:end="1081:14"><literal type="number" pos:start="1081:14" pos:end="1081:14">1</literal></expr>:</case> <comment type="block" pos:start="1081:17" pos:end="1081:28">/* dec Ev */</comment>

            <if_stmt pos:start="1083:13" pos:end="1089:27"><if pos:start="1083:13" pos:end="1085:32">if <condition pos:start="1083:16" pos:end="1083:25">(<expr pos:start="1083:17" pos:end="1083:24"><name pos:start="1083:17" pos:end="1083:19">mod</name> <operator pos:start="1083:21" pos:end="1083:22">!=</operator> <literal type="number" pos:start="1083:24" pos:end="1083:24">3</literal></expr>)</condition><block type="pseudo" pos:start="1085:17" pos:end="1085:32"><block_content pos:start="1085:17" pos:end="1085:32">

                <expr_stmt pos:start="1085:17" pos:end="1085:32"><expr pos:start="1085:17" pos:end="1085:31"><name pos:start="1085:17" pos:end="1085:21">opreg</name> <operator pos:start="1085:23" pos:end="1085:23">=</operator> <name pos:start="1085:25" pos:end="1085:31">OR_TMP0</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="1087:13" pos:end="1089:27">else<block type="pseudo" pos:start="1089:17" pos:end="1089:27"><block_content pos:start="1089:17" pos:end="1089:27">

                <expr_stmt pos:start="1089:17" pos:end="1089:27"><expr pos:start="1089:17" pos:end="1089:26"><name pos:start="1089:17" pos:end="1089:21">opreg</name> <operator pos:start="1089:23" pos:end="1089:23">=</operator> <name pos:start="1089:25" pos:end="1089:26">rm</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="1091:13" pos:end="1091:38"><expr pos:start="1091:13" pos:end="1091:37"><call pos:start="1091:13" pos:end="1091:37"><name pos:start="1091:13" pos:end="1091:19">gen_inc</name><argument_list pos:start="1091:20" pos:end="1091:37">(<argument pos:start="1091:21" pos:end="1091:21"><expr pos:start="1091:21" pos:end="1091:21"><name pos:start="1091:21" pos:end="1091:21">s</name></expr></argument>, <argument pos:start="1091:24" pos:end="1091:25"><expr pos:start="1091:24" pos:end="1091:25"><name pos:start="1091:24" pos:end="1091:25">ot</name></expr></argument>, <argument pos:start="1091:28" pos:end="1091:32"><expr pos:start="1091:28" pos:end="1091:32"><name pos:start="1091:28" pos:end="1091:32">opreg</name></expr></argument>, <argument pos:start="1091:35" pos:end="1091:36"><expr pos:start="1091:35" pos:end="1091:36"><operator pos:start="1091:35" pos:end="1091:35">-</operator><literal type="number" pos:start="1091:36" pos:end="1091:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1093:13" pos:end="1093:18">break;</break>

        <case pos:start="1095:9" pos:end="1095:15">case <expr pos:start="1095:14" pos:end="1095:14"><literal type="number" pos:start="1095:14" pos:end="1095:14">2</literal></expr>:</case> <comment type="block" pos:start="1095:17" pos:end="1095:29">/* call Ev */</comment>

            <comment type="block" pos:start="1097:13" pos:end="1097:65">/* XXX: optimize if memory (no 'and' is necessary) */</comment>

            <if_stmt pos:start="1099:13" pos:end="1101:38"><if pos:start="1099:13" pos:end="1101:38">if <condition pos:start="1099:16" pos:end="1099:30">(<expr pos:start="1099:17" pos:end="1099:29"><name pos:start="1099:17" pos:end="1099:24"><name pos:start="1099:17" pos:end="1099:17">s</name><operator pos:start="1099:18" pos:end="1099:19">-&gt;</operator><name pos:start="1099:20" pos:end="1099:24">dflag</name></name> <operator pos:start="1099:26" pos:end="1099:27">==</operator> <literal type="number" pos:start="1099:29" pos:end="1099:29">0</literal></expr>)</condition><block type="pseudo" pos:start="1101:17" pos:end="1101:38"><block_content pos:start="1101:17" pos:end="1101:38">

                <expr_stmt pos:start="1101:17" pos:end="1101:38"><expr pos:start="1101:17" pos:end="1101:37"><call pos:start="1101:17" pos:end="1101:37"><name pos:start="1101:17" pos:end="1101:35">gen_op_andl_T0_ffff</name><argument_list pos:start="1101:36" pos:end="1101:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1103:13" pos:end="1103:42"><expr pos:start="1103:13" pos:end="1103:41"><name pos:start="1103:13" pos:end="1103:20">next_eip</name> <operator pos:start="1103:22" pos:end="1103:22">=</operator> <name pos:start="1103:24" pos:end="1103:28"><name pos:start="1103:24" pos:end="1103:24">s</name><operator pos:start="1103:25" pos:end="1103:26">-&gt;</operator><name pos:start="1103:27" pos:end="1103:28">pc</name></name> <operator pos:start="1103:30" pos:end="1103:30">-</operator> <name pos:start="1103:32" pos:end="1103:41"><name pos:start="1103:32" pos:end="1103:32">s</name><operator pos:start="1103:33" pos:end="1103:34">-&gt;</operator><name pos:start="1103:35" pos:end="1103:41">cs_base</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="1105:13" pos:end="1105:38"><expr pos:start="1105:13" pos:end="1105:37"><call pos:start="1105:13" pos:end="1105:37"><name pos:start="1105:13" pos:end="1105:27">gen_movtl_T1_im</name><argument_list pos:start="1105:28" pos:end="1105:37">(<argument pos:start="1105:29" pos:end="1105:36"><expr pos:start="1105:29" pos:end="1105:36"><name pos:start="1105:29" pos:end="1105:36">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1107:13" pos:end="1107:27"><expr pos:start="1107:13" pos:end="1107:26"><call pos:start="1107:13" pos:end="1107:26"><name pos:start="1107:13" pos:end="1107:23">gen_push_T1</name><argument_list pos:start="1107:24" pos:end="1107:26">(<argument pos:start="1107:25" pos:end="1107:25"><expr pos:start="1107:25" pos:end="1107:25"><name pos:start="1107:25" pos:end="1107:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1109:13" pos:end="1109:28"><expr pos:start="1109:13" pos:end="1109:27"><call pos:start="1109:13" pos:end="1109:27"><name pos:start="1109:13" pos:end="1109:25">gen_op_jmp_T0</name><argument_list pos:start="1109:26" pos:end="1109:27">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1111:13" pos:end="1111:23"><expr pos:start="1111:13" pos:end="1111:22"><call pos:start="1111:13" pos:end="1111:22"><name pos:start="1111:13" pos:end="1111:19">gen_eob</name><argument_list pos:start="1111:20" pos:end="1111:22">(<argument pos:start="1111:21" pos:end="1111:21"><expr pos:start="1111:21" pos:end="1111:21"><name pos:start="1111:21" pos:end="1111:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1113:13" pos:end="1113:18">break;</break>

        <case pos:start="1115:9" pos:end="1115:15">case <expr pos:start="1115:14" pos:end="1115:14"><literal type="number" pos:start="1115:14" pos:end="1115:14">3</literal></expr>:</case> <comment type="block" pos:start="1115:17" pos:end="1115:30">/* lcall Ev */</comment>

            <expr_stmt pos:start="1117:13" pos:end="1117:47"><expr pos:start="1117:13" pos:end="1117:46"><call pos:start="1117:13" pos:end="1117:46"><name pos:start="1117:13" pos:end="1117:27">gen_op_ld_T1_A0</name><argument_list pos:start="1117:28" pos:end="1117:46">(<argument pos:start="1117:29" pos:end="1117:45"><expr pos:start="1117:29" pos:end="1117:45"><name pos:start="1117:29" pos:end="1117:30">ot</name> <operator pos:start="1117:32" pos:end="1117:32">+</operator> <name pos:start="1117:34" pos:end="1117:45"><name pos:start="1117:34" pos:end="1117:34">s</name><operator pos:start="1117:35" pos:end="1117:36">-&gt;</operator><name pos:start="1117:37" pos:end="1117:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1119:13" pos:end="1119:54"><expr pos:start="1119:13" pos:end="1119:53"><call pos:start="1119:13" pos:end="1119:53"><name pos:start="1119:13" pos:end="1119:25">gen_add_A0_im</name><argument_list pos:start="1119:26" pos:end="1119:53">(<argument pos:start="1119:27" pos:end="1119:27"><expr pos:start="1119:27" pos:end="1119:27"><name pos:start="1119:27" pos:end="1119:27">s</name></expr></argument>, <argument pos:start="1119:30" pos:end="1119:52"><expr pos:start="1119:30" pos:end="1119:52"><literal type="number" pos:start="1119:30" pos:end="1119:30">1</literal> <operator pos:start="1119:32" pos:end="1119:33">&lt;&lt;</operator> <operator pos:start="1119:35" pos:end="1119:35">(</operator><name pos:start="1119:36" pos:end="1119:37">ot</name> <operator pos:start="1119:39" pos:end="1119:39">-</operator> <name pos:start="1119:41" pos:end="1119:47">OT_WORD</name> <operator pos:start="1119:49" pos:end="1119:49">+</operator> <literal type="number" pos:start="1119:51" pos:end="1119:51">1</literal><operator pos:start="1119:52" pos:end="1119:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1121:13" pos:end="1121:53"><expr pos:start="1121:13" pos:end="1121:52"><call pos:start="1121:13" pos:end="1121:52"><name pos:start="1121:13" pos:end="1121:28">gen_op_ldu_T0_A0</name><argument_list pos:start="1121:29" pos:end="1121:52">(<argument pos:start="1121:30" pos:end="1121:51"><expr pos:start="1121:30" pos:end="1121:51"><name pos:start="1121:30" pos:end="1121:36">OT_WORD</name> <operator pos:start="1121:38" pos:end="1121:38">+</operator> <name pos:start="1121:40" pos:end="1121:51"><name pos:start="1121:40" pos:end="1121:40">s</name><operator pos:start="1121:41" pos:end="1121:42">-&gt;</operator><name pos:start="1121:43" pos:end="1121:51">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label pos:start="1123:9" pos:end="1123:17"><name pos:start="1123:9" pos:end="1123:16">do_lcall</name>:</label>

            <if_stmt pos:start="1125:13" pos:end="1151:13"><if pos:start="1125:13" pos:end="1141:13">if <condition pos:start="1125:16" pos:end="1125:34">(<expr pos:start="1125:17" pos:end="1125:33"><name pos:start="1125:17" pos:end="1125:21"><name pos:start="1125:17" pos:end="1125:17">s</name><operator pos:start="1125:18" pos:end="1125:19">-&gt;</operator><name pos:start="1125:20" pos:end="1125:21">pe</name></name> <operator pos:start="1125:23" pos:end="1125:24">&amp;&amp;</operator> <operator pos:start="1125:26" pos:end="1125:26">!</operator><name pos:start="1125:27" pos:end="1125:33"><name pos:start="1125:27" pos:end="1125:27">s</name><operator pos:start="1125:28" pos:end="1125:29">-&gt;</operator><name pos:start="1125:30" pos:end="1125:33">vm86</name></name></expr>)</condition> <block pos:start="1125:36" pos:end="1141:13">{<block_content pos:start="1127:17" pos:end="1139:76">

                <if_stmt pos:start="1127:17" pos:end="1129:47"><if pos:start="1127:17" pos:end="1129:47">if <condition pos:start="1127:20" pos:end="1127:46">(<expr pos:start="1127:21" pos:end="1127:45"><name pos:start="1127:21" pos:end="1127:28"><name pos:start="1127:21" pos:end="1127:21">s</name><operator pos:start="1127:22" pos:end="1127:23">-&gt;</operator><name pos:start="1127:24" pos:end="1127:28">cc_op</name></name> <operator pos:start="1127:30" pos:end="1127:31">!=</operator> <name pos:start="1127:33" pos:end="1127:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="1129:21" pos:end="1129:47"><block_content pos:start="1129:21" pos:end="1129:47">

                    <expr_stmt pos:start="1129:21" pos:end="1129:47"><expr pos:start="1129:21" pos:end="1129:46"><call pos:start="1129:21" pos:end="1129:46"><name pos:start="1129:21" pos:end="1129:36">gen_op_set_cc_op</name><argument_list pos:start="1129:37" pos:end="1129:46">(<argument pos:start="1129:38" pos:end="1129:45"><expr pos:start="1129:38" pos:end="1129:45"><name pos:start="1129:38" pos:end="1129:45"><name pos:start="1129:38" pos:end="1129:38">s</name><operator pos:start="1129:39" pos:end="1129:40">-&gt;</operator><name pos:start="1129:41" pos:end="1129:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1131:17" pos:end="1131:50"><expr pos:start="1131:17" pos:end="1131:49"><call pos:start="1131:17" pos:end="1131:49"><name pos:start="1131:17" pos:end="1131:26">gen_jmp_im</name><argument_list pos:start="1131:27" pos:end="1131:49">(<argument pos:start="1131:28" pos:end="1131:48"><expr pos:start="1131:28" pos:end="1131:48"><name pos:start="1131:28" pos:end="1131:35">pc_start</name> <operator pos:start="1131:37" pos:end="1131:37">-</operator> <name pos:start="1131:39" pos:end="1131:48"><name pos:start="1131:39" pos:end="1131:39">s</name><operator pos:start="1131:40" pos:end="1131:41">-&gt;</operator><name pos:start="1131:42" pos:end="1131:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1133:17" pos:end="1133:61"><expr pos:start="1133:17" pos:end="1133:60"><call pos:start="1133:17" pos:end="1133:60"><name pos:start="1133:17" pos:end="1133:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1133:37" pos:end="1133:60">(<argument pos:start="1133:38" pos:end="1133:49"><expr pos:start="1133:38" pos:end="1133:49"><name pos:start="1133:38" pos:end="1133:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1133:52" pos:end="1133:59"><expr pos:start="1133:52" pos:end="1133:59"><name pos:start="1133:52" pos:end="1133:59"><name pos:start="1133:52" pos:end="1133:56">cpu_T</name><index pos:start="1133:57" pos:end="1133:59">[<expr pos:start="1133:58" pos:end="1133:58"><literal type="number" pos:start="1133:58" pos:end="1133:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1135:17" pos:end="1139:76"><expr pos:start="1135:17" pos:end="1139:75"><call pos:start="1135:17" pos:end="1139:75"><name pos:start="1135:17" pos:end="1135:42">gen_helper_lcall_protected</name><argument_list pos:start="1135:43" pos:end="1139:75">(<argument pos:start="1135:44" pos:end="1135:50"><expr pos:start="1135:44" pos:end="1135:50"><name pos:start="1135:44" pos:end="1135:50">cpu_env</name></expr></argument>, <argument pos:start="1135:53" pos:end="1135:64"><expr pos:start="1135:53" pos:end="1135:64"><name pos:start="1135:53" pos:end="1135:64">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1135:67" pos:end="1135:74"><expr pos:start="1135:67" pos:end="1135:74"><name pos:start="1135:67" pos:end="1135:74"><name pos:start="1135:67" pos:end="1135:71">cpu_T</name><index pos:start="1135:72" pos:end="1135:74">[<expr pos:start="1135:73" pos:end="1135:73"><literal type="number" pos:start="1135:73" pos:end="1135:73">1</literal></expr>]</index></name></expr></argument>,

                                           <argument pos:start="1137:44" pos:end="1137:63"><expr pos:start="1137:44" pos:end="1137:63"><call pos:start="1137:44" pos:end="1137:63"><name pos:start="1137:44" pos:end="1137:56">tcg_const_i32</name><argument_list pos:start="1137:57" pos:end="1137:63">(<argument pos:start="1137:58" pos:end="1137:62"><expr pos:start="1137:58" pos:end="1137:62"><name pos:start="1137:58" pos:end="1137:62">dflag</name></expr></argument>)</argument_list></call></expr></argument>,

                                           <argument pos:start="1139:44" pos:end="1139:74"><expr pos:start="1139:44" pos:end="1139:74"><call pos:start="1139:44" pos:end="1139:74"><name pos:start="1139:44" pos:end="1139:56">tcg_const_i32</name><argument_list pos:start="1139:57" pos:end="1139:74">(<argument pos:start="1139:58" pos:end="1139:73"><expr pos:start="1139:58" pos:end="1139:73"><name pos:start="1139:58" pos:end="1139:62"><name pos:start="1139:58" pos:end="1139:58">s</name><operator pos:start="1139:59" pos:end="1139:60">-&gt;</operator><name pos:start="1139:61" pos:end="1139:62">pc</name></name> <operator pos:start="1139:64" pos:end="1139:64">-</operator> <name pos:start="1139:66" pos:end="1139:73">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1141:15" pos:end="1151:13">else <block pos:start="1141:20" pos:end="1151:13">{<block_content pos:start="1143:17" pos:end="1149:73">

                <expr_stmt pos:start="1143:17" pos:end="1143:61"><expr pos:start="1143:17" pos:end="1143:60"><call pos:start="1143:17" pos:end="1143:60"><name pos:start="1143:17" pos:end="1143:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1143:37" pos:end="1143:60">(<argument pos:start="1143:38" pos:end="1143:49"><expr pos:start="1143:38" pos:end="1143:49"><name pos:start="1143:38" pos:end="1143:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1143:52" pos:end="1143:59"><expr pos:start="1143:52" pos:end="1143:59"><name pos:start="1143:52" pos:end="1143:59"><name pos:start="1143:52" pos:end="1143:56">cpu_T</name><index pos:start="1143:57" pos:end="1143:59">[<expr pos:start="1143:58" pos:end="1143:58"><literal type="number" pos:start="1143:58" pos:end="1143:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1145:17" pos:end="1149:73"><expr pos:start="1145:17" pos:end="1149:72"><call pos:start="1145:17" pos:end="1149:72"><name pos:start="1145:17" pos:end="1145:37">gen_helper_lcall_real</name><argument_list pos:start="1145:38" pos:end="1149:72">(<argument pos:start="1145:39" pos:end="1145:45"><expr pos:start="1145:39" pos:end="1145:45"><name pos:start="1145:39" pos:end="1145:45">cpu_env</name></expr></argument>, <argument pos:start="1145:48" pos:end="1145:59"><expr pos:start="1145:48" pos:end="1145:59"><name pos:start="1145:48" pos:end="1145:59">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1145:62" pos:end="1145:69"><expr pos:start="1145:62" pos:end="1145:69"><name pos:start="1145:62" pos:end="1145:69"><name pos:start="1145:62" pos:end="1145:66">cpu_T</name><index pos:start="1145:67" pos:end="1145:69">[<expr pos:start="1145:68" pos:end="1145:68"><literal type="number" pos:start="1145:68" pos:end="1145:68">1</literal></expr>]</index></name></expr></argument>,

                                      <argument pos:start="1147:39" pos:end="1147:58"><expr pos:start="1147:39" pos:end="1147:58"><call pos:start="1147:39" pos:end="1147:58"><name pos:start="1147:39" pos:end="1147:51">tcg_const_i32</name><argument_list pos:start="1147:52" pos:end="1147:58">(<argument pos:start="1147:53" pos:end="1147:57"><expr pos:start="1147:53" pos:end="1147:57"><name pos:start="1147:53" pos:end="1147:57">dflag</name></expr></argument>)</argument_list></call></expr></argument>,

                                      <argument pos:start="1149:39" pos:end="1149:71"><expr pos:start="1149:39" pos:end="1149:71"><call pos:start="1149:39" pos:end="1149:71"><name pos:start="1149:39" pos:end="1149:51">tcg_const_i32</name><argument_list pos:start="1149:52" pos:end="1149:71">(<argument pos:start="1149:53" pos:end="1149:70"><expr pos:start="1149:53" pos:end="1149:70"><name pos:start="1149:53" pos:end="1149:57"><name pos:start="1149:53" pos:end="1149:53">s</name><operator pos:start="1149:54" pos:end="1149:55">-&gt;</operator><name pos:start="1149:56" pos:end="1149:57">pc</name></name> <operator pos:start="1149:59" pos:end="1149:59">-</operator> <name pos:start="1149:61" pos:end="1149:70"><name pos:start="1149:61" pos:end="1149:61">s</name><operator pos:start="1149:62" pos:end="1149:63">-&gt;</operator><name pos:start="1149:64" pos:end="1149:70">cs_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1153:13" pos:end="1153:23"><expr pos:start="1153:13" pos:end="1153:22"><call pos:start="1153:13" pos:end="1153:22"><name pos:start="1153:13" pos:end="1153:19">gen_eob</name><argument_list pos:start="1153:20" pos:end="1153:22">(<argument pos:start="1153:21" pos:end="1153:21"><expr pos:start="1153:21" pos:end="1153:21"><name pos:start="1153:21" pos:end="1153:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1155:13" pos:end="1155:18">break;</break>

        <case pos:start="1157:9" pos:end="1157:15">case <expr pos:start="1157:14" pos:end="1157:14"><literal type="number" pos:start="1157:14" pos:end="1157:14">4</literal></expr>:</case> <comment type="block" pos:start="1157:17" pos:end="1157:28">/* jmp Ev */</comment>

            <if_stmt pos:start="1159:13" pos:end="1161:38"><if pos:start="1159:13" pos:end="1161:38">if <condition pos:start="1159:16" pos:end="1159:30">(<expr pos:start="1159:17" pos:end="1159:29"><name pos:start="1159:17" pos:end="1159:24"><name pos:start="1159:17" pos:end="1159:17">s</name><operator pos:start="1159:18" pos:end="1159:19">-&gt;</operator><name pos:start="1159:20" pos:end="1159:24">dflag</name></name> <operator pos:start="1159:26" pos:end="1159:27">==</operator> <literal type="number" pos:start="1159:29" pos:end="1159:29">0</literal></expr>)</condition><block type="pseudo" pos:start="1161:17" pos:end="1161:38"><block_content pos:start="1161:17" pos:end="1161:38">

                <expr_stmt pos:start="1161:17" pos:end="1161:38"><expr pos:start="1161:17" pos:end="1161:37"><call pos:start="1161:17" pos:end="1161:37"><name pos:start="1161:17" pos:end="1161:35">gen_op_andl_T0_ffff</name><argument_list pos:start="1161:36" pos:end="1161:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1163:13" pos:end="1163:28"><expr pos:start="1163:13" pos:end="1163:27"><call pos:start="1163:13" pos:end="1163:27"><name pos:start="1163:13" pos:end="1163:25">gen_op_jmp_T0</name><argument_list pos:start="1163:26" pos:end="1163:27">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1165:13" pos:end="1165:23"><expr pos:start="1165:13" pos:end="1165:22"><call pos:start="1165:13" pos:end="1165:22"><name pos:start="1165:13" pos:end="1165:19">gen_eob</name><argument_list pos:start="1165:20" pos:end="1165:22">(<argument pos:start="1165:21" pos:end="1165:21"><expr pos:start="1165:21" pos:end="1165:21"><name pos:start="1165:21" pos:end="1165:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1167:13" pos:end="1167:18">break;</break>

        <case pos:start="1169:9" pos:end="1169:15">case <expr pos:start="1169:14" pos:end="1169:14"><literal type="number" pos:start="1169:14" pos:end="1169:14">5</literal></expr>:</case> <comment type="block" pos:start="1169:17" pos:end="1169:29">/* ljmp Ev */</comment>

            <expr_stmt pos:start="1171:13" pos:end="1171:47"><expr pos:start="1171:13" pos:end="1171:46"><call pos:start="1171:13" pos:end="1171:46"><name pos:start="1171:13" pos:end="1171:27">gen_op_ld_T1_A0</name><argument_list pos:start="1171:28" pos:end="1171:46">(<argument pos:start="1171:29" pos:end="1171:45"><expr pos:start="1171:29" pos:end="1171:45"><name pos:start="1171:29" pos:end="1171:30">ot</name> <operator pos:start="1171:32" pos:end="1171:32">+</operator> <name pos:start="1171:34" pos:end="1171:45"><name pos:start="1171:34" pos:end="1171:34">s</name><operator pos:start="1171:35" pos:end="1171:36">-&gt;</operator><name pos:start="1171:37" pos:end="1171:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1173:13" pos:end="1173:54"><expr pos:start="1173:13" pos:end="1173:53"><call pos:start="1173:13" pos:end="1173:53"><name pos:start="1173:13" pos:end="1173:25">gen_add_A0_im</name><argument_list pos:start="1173:26" pos:end="1173:53">(<argument pos:start="1173:27" pos:end="1173:27"><expr pos:start="1173:27" pos:end="1173:27"><name pos:start="1173:27" pos:end="1173:27">s</name></expr></argument>, <argument pos:start="1173:30" pos:end="1173:52"><expr pos:start="1173:30" pos:end="1173:52"><literal type="number" pos:start="1173:30" pos:end="1173:30">1</literal> <operator pos:start="1173:32" pos:end="1173:33">&lt;&lt;</operator> <operator pos:start="1173:35" pos:end="1173:35">(</operator><name pos:start="1173:36" pos:end="1173:37">ot</name> <operator pos:start="1173:39" pos:end="1173:39">-</operator> <name pos:start="1173:41" pos:end="1173:47">OT_WORD</name> <operator pos:start="1173:49" pos:end="1173:49">+</operator> <literal type="number" pos:start="1173:51" pos:end="1173:51">1</literal><operator pos:start="1173:52" pos:end="1173:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1175:13" pos:end="1175:53"><expr pos:start="1175:13" pos:end="1175:52"><call pos:start="1175:13" pos:end="1175:52"><name pos:start="1175:13" pos:end="1175:28">gen_op_ldu_T0_A0</name><argument_list pos:start="1175:29" pos:end="1175:52">(<argument pos:start="1175:30" pos:end="1175:51"><expr pos:start="1175:30" pos:end="1175:51"><name pos:start="1175:30" pos:end="1175:36">OT_WORD</name> <operator pos:start="1175:38" pos:end="1175:38">+</operator> <name pos:start="1175:40" pos:end="1175:51"><name pos:start="1175:40" pos:end="1175:40">s</name><operator pos:start="1175:41" pos:end="1175:42">-&gt;</operator><name pos:start="1175:43" pos:end="1175:51">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label pos:start="1177:9" pos:end="1177:16"><name pos:start="1177:9" pos:end="1177:15">do_ljmp</name>:</label>

            <if_stmt pos:start="1179:13" pos:end="1201:13"><if pos:start="1179:13" pos:end="1193:13">if <condition pos:start="1179:16" pos:end="1179:34">(<expr pos:start="1179:17" pos:end="1179:33"><name pos:start="1179:17" pos:end="1179:21"><name pos:start="1179:17" pos:end="1179:17">s</name><operator pos:start="1179:18" pos:end="1179:19">-&gt;</operator><name pos:start="1179:20" pos:end="1179:21">pe</name></name> <operator pos:start="1179:23" pos:end="1179:24">&amp;&amp;</operator> <operator pos:start="1179:26" pos:end="1179:26">!</operator><name pos:start="1179:27" pos:end="1179:33"><name pos:start="1179:27" pos:end="1179:27">s</name><operator pos:start="1179:28" pos:end="1179:29">-&gt;</operator><name pos:start="1179:30" pos:end="1179:33">vm86</name></name></expr>)</condition> <block pos:start="1179:36" pos:end="1193:13">{<block_content pos:start="1181:17" pos:end="1191:75">

                <if_stmt pos:start="1181:17" pos:end="1183:47"><if pos:start="1181:17" pos:end="1183:47">if <condition pos:start="1181:20" pos:end="1181:46">(<expr pos:start="1181:21" pos:end="1181:45"><name pos:start="1181:21" pos:end="1181:28"><name pos:start="1181:21" pos:end="1181:21">s</name><operator pos:start="1181:22" pos:end="1181:23">-&gt;</operator><name pos:start="1181:24" pos:end="1181:28">cc_op</name></name> <operator pos:start="1181:30" pos:end="1181:31">!=</operator> <name pos:start="1181:33" pos:end="1181:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="1183:21" pos:end="1183:47"><block_content pos:start="1183:21" pos:end="1183:47">

                    <expr_stmt pos:start="1183:21" pos:end="1183:47"><expr pos:start="1183:21" pos:end="1183:46"><call pos:start="1183:21" pos:end="1183:46"><name pos:start="1183:21" pos:end="1183:36">gen_op_set_cc_op</name><argument_list pos:start="1183:37" pos:end="1183:46">(<argument pos:start="1183:38" pos:end="1183:45"><expr pos:start="1183:38" pos:end="1183:45"><name pos:start="1183:38" pos:end="1183:45"><name pos:start="1183:38" pos:end="1183:38">s</name><operator pos:start="1183:39" pos:end="1183:40">-&gt;</operator><name pos:start="1183:41" pos:end="1183:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1185:17" pos:end="1185:50"><expr pos:start="1185:17" pos:end="1185:49"><call pos:start="1185:17" pos:end="1185:49"><name pos:start="1185:17" pos:end="1185:26">gen_jmp_im</name><argument_list pos:start="1185:27" pos:end="1185:49">(<argument pos:start="1185:28" pos:end="1185:48"><expr pos:start="1185:28" pos:end="1185:48"><name pos:start="1185:28" pos:end="1185:35">pc_start</name> <operator pos:start="1185:37" pos:end="1185:37">-</operator> <name pos:start="1185:39" pos:end="1185:48"><name pos:start="1185:39" pos:end="1185:39">s</name><operator pos:start="1185:40" pos:end="1185:41">-&gt;</operator><name pos:start="1185:42" pos:end="1185:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1187:17" pos:end="1187:61"><expr pos:start="1187:17" pos:end="1187:60"><call pos:start="1187:17" pos:end="1187:60"><name pos:start="1187:17" pos:end="1187:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1187:37" pos:end="1187:60">(<argument pos:start="1187:38" pos:end="1187:49"><expr pos:start="1187:38" pos:end="1187:49"><name pos:start="1187:38" pos:end="1187:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1187:52" pos:end="1187:59"><expr pos:start="1187:52" pos:end="1187:59"><name pos:start="1187:52" pos:end="1187:59"><name pos:start="1187:52" pos:end="1187:56">cpu_T</name><index pos:start="1187:57" pos:end="1187:59">[<expr pos:start="1187:58" pos:end="1187:58"><literal type="number" pos:start="1187:58" pos:end="1187:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1189:17" pos:end="1191:75"><expr pos:start="1189:17" pos:end="1191:74"><call pos:start="1189:17" pos:end="1191:74"><name pos:start="1189:17" pos:end="1189:41">gen_helper_ljmp_protected</name><argument_list pos:start="1189:42" pos:end="1191:74">(<argument pos:start="1189:43" pos:end="1189:49"><expr pos:start="1189:43" pos:end="1189:49"><name pos:start="1189:43" pos:end="1189:49">cpu_env</name></expr></argument>, <argument pos:start="1189:52" pos:end="1189:63"><expr pos:start="1189:52" pos:end="1189:63"><name pos:start="1189:52" pos:end="1189:63">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1189:66" pos:end="1189:73"><expr pos:start="1189:66" pos:end="1189:73"><name pos:start="1189:66" pos:end="1189:73"><name pos:start="1189:66" pos:end="1189:70">cpu_T</name><index pos:start="1189:71" pos:end="1189:73">[<expr pos:start="1189:72" pos:end="1189:72"><literal type="number" pos:start="1189:72" pos:end="1189:72">1</literal></expr>]</index></name></expr></argument>,

                                          <argument pos:start="1191:43" pos:end="1191:73"><expr pos:start="1191:43" pos:end="1191:73"><call pos:start="1191:43" pos:end="1191:73"><name pos:start="1191:43" pos:end="1191:55">tcg_const_i32</name><argument_list pos:start="1191:56" pos:end="1191:73">(<argument pos:start="1191:57" pos:end="1191:72"><expr pos:start="1191:57" pos:end="1191:72"><name pos:start="1191:57" pos:end="1191:61"><name pos:start="1191:57" pos:end="1191:57">s</name><operator pos:start="1191:58" pos:end="1191:59">-&gt;</operator><name pos:start="1191:60" pos:end="1191:61">pc</name></name> <operator pos:start="1191:63" pos:end="1191:63">-</operator> <name pos:start="1191:65" pos:end="1191:72">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1193:15" pos:end="1201:13">else <block pos:start="1193:20" pos:end="1201:13">{<block_content pos:start="1195:17" pos:end="1199:32">

                <expr_stmt pos:start="1195:17" pos:end="1195:44"><expr pos:start="1195:17" pos:end="1195:43"><call pos:start="1195:17" pos:end="1195:43"><name pos:start="1195:17" pos:end="1195:37">gen_op_movl_seg_T0_vm</name><argument_list pos:start="1195:38" pos:end="1195:43">(<argument pos:start="1195:39" pos:end="1195:42"><expr pos:start="1195:39" pos:end="1195:42"><name pos:start="1195:39" pos:end="1195:42">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1197:17" pos:end="1197:36"><expr pos:start="1197:17" pos:end="1197:35"><call pos:start="1197:17" pos:end="1197:35"><name pos:start="1197:17" pos:end="1197:33">gen_op_movl_T0_T1</name><argument_list pos:start="1197:34" pos:end="1197:35">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1199:17" pos:end="1199:32"><expr pos:start="1199:17" pos:end="1199:31"><call pos:start="1199:17" pos:end="1199:31"><name pos:start="1199:17" pos:end="1199:29">gen_op_jmp_T0</name><argument_list pos:start="1199:30" pos:end="1199:31">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1203:13" pos:end="1203:23"><expr pos:start="1203:13" pos:end="1203:22"><call pos:start="1203:13" pos:end="1203:22"><name pos:start="1203:13" pos:end="1203:19">gen_eob</name><argument_list pos:start="1203:20" pos:end="1203:22">(<argument pos:start="1203:21" pos:end="1203:21"><expr pos:start="1203:21" pos:end="1203:21"><name pos:start="1203:21" pos:end="1203:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1205:13" pos:end="1205:18">break;</break>

        <case pos:start="1207:9" pos:end="1207:15">case <expr pos:start="1207:14" pos:end="1207:14"><literal type="number" pos:start="1207:14" pos:end="1207:14">6</literal></expr>:</case> <comment type="block" pos:start="1207:17" pos:end="1207:29">/* push Ev */</comment>

            <expr_stmt pos:start="1209:13" pos:end="1209:27"><expr pos:start="1209:13" pos:end="1209:26"><call pos:start="1209:13" pos:end="1209:26"><name pos:start="1209:13" pos:end="1209:23">gen_push_T0</name><argument_list pos:start="1209:24" pos:end="1209:26">(<argument pos:start="1209:25" pos:end="1209:25"><expr pos:start="1209:25" pos:end="1209:25"><name pos:start="1209:25" pos:end="1209:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1211:13" pos:end="1211:18">break;</break>

        <default pos:start="1213:9" pos:end="1213:16">default:</default>

            <goto pos:start="1215:13" pos:end="1215:28">goto <name pos:start="1215:18" pos:end="1215:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="1219:9" pos:end="1219:14">break;</break>



    <case pos:start="1223:5" pos:end="1223:14">case <expr pos:start="1223:10" pos:end="1223:13"><literal type="number" pos:start="1223:10" pos:end="1223:13">0x84</literal></expr>:</case> <comment type="block" pos:start="1223:16" pos:end="1223:32">/* test Ev, Gv */</comment>

    <case pos:start="1225:5" pos:end="1225:14">case <expr pos:start="1225:10" pos:end="1225:13"><literal type="number" pos:start="1225:10" pos:end="1225:13">0x85</literal></expr>:</case>

        <if_stmt pos:start="1227:9" pos:end="1233:33"><if pos:start="1227:9" pos:end="1229:25">if <condition pos:start="1227:12" pos:end="1227:25">(<expr pos:start="1227:13" pos:end="1227:24"><operator pos:start="1227:13" pos:end="1227:13">(</operator><name pos:start="1227:14" pos:end="1227:14">b</name> <operator pos:start="1227:16" pos:end="1227:16">&amp;</operator> <literal type="number" pos:start="1227:18" pos:end="1227:18">1</literal><operator pos:start="1227:19" pos:end="1227:19">)</operator> <operator pos:start="1227:21" pos:end="1227:22">==</operator> <literal type="number" pos:start="1227:24" pos:end="1227:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1229:13" pos:end="1229:25"><block_content pos:start="1229:13" pos:end="1229:25">

            <expr_stmt pos:start="1229:13" pos:end="1229:25"><expr pos:start="1229:13" pos:end="1229:24"><name pos:start="1229:13" pos:end="1229:14">ot</name> <operator pos:start="1229:16" pos:end="1229:16">=</operator> <name pos:start="1229:18" pos:end="1229:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1231:9" pos:end="1233:33">else<block type="pseudo" pos:start="1233:13" pos:end="1233:33"><block_content pos:start="1233:13" pos:end="1233:33">

            <expr_stmt pos:start="1233:13" pos:end="1233:33"><expr pos:start="1233:13" pos:end="1233:32"><name pos:start="1233:13" pos:end="1233:14">ot</name> <operator pos:start="1233:16" pos:end="1233:16">=</operator> <name pos:start="1233:18" pos:end="1233:22">dflag</name> <operator pos:start="1233:24" pos:end="1233:24">+</operator> <name pos:start="1233:26" pos:end="1233:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="1237:9" pos:end="1237:44"><expr pos:start="1237:9" pos:end="1237:43"><name pos:start="1237:9" pos:end="1237:13">modrm</name> <operator pos:start="1237:15" pos:end="1237:15">=</operator> <call pos:start="1237:17" pos:end="1237:43"><name pos:start="1237:17" pos:end="1237:29">cpu_ldub_code</name><argument_list pos:start="1237:30" pos:end="1237:43">(<argument pos:start="1237:31" pos:end="1237:33"><expr pos:start="1237:31" pos:end="1237:33"><name pos:start="1237:31" pos:end="1237:33">env</name></expr></argument>, <argument pos:start="1237:36" pos:end="1237:42"><expr pos:start="1237:36" pos:end="1237:42"><name pos:start="1237:36" pos:end="1237:40"><name pos:start="1237:36" pos:end="1237:36">s</name><operator pos:start="1237:37" pos:end="1237:38">-&gt;</operator><name pos:start="1237:39" pos:end="1237:40">pc</name></name><operator pos:start="1237:41" pos:end="1237:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1239:9" pos:end="1239:41"><expr pos:start="1239:9" pos:end="1239:40"><name pos:start="1239:9" pos:end="1239:11">reg</name> <operator pos:start="1239:13" pos:end="1239:13">=</operator> <operator pos:start="1239:15" pos:end="1239:15">(</operator><operator pos:start="1239:16" pos:end="1239:16">(</operator><name pos:start="1239:17" pos:end="1239:21">modrm</name> <operator pos:start="1239:23" pos:end="1239:24">&gt;&gt;</operator> <literal type="number" pos:start="1239:26" pos:end="1239:26">3</literal><operator pos:start="1239:27" pos:end="1239:27">)</operator> <operator pos:start="1239:29" pos:end="1239:29">&amp;</operator> <literal type="number" pos:start="1239:31" pos:end="1239:31">7</literal><operator pos:start="1239:32" pos:end="1239:32">)</operator> <operator pos:start="1239:34" pos:end="1239:34">|</operator> <name pos:start="1239:36" pos:end="1239:40">rex_r</name></expr>;</expr_stmt>



        <expr_stmt pos:start="1243:9" pos:end="1243:54"><expr pos:start="1243:9" pos:end="1243:53"><call pos:start="1243:9" pos:end="1243:53"><name pos:start="1243:9" pos:end="1243:22">gen_ldst_modrm</name><argument_list pos:start="1243:23" pos:end="1243:53">(<argument pos:start="1243:24" pos:end="1243:26"><expr pos:start="1243:24" pos:end="1243:26"><name pos:start="1243:24" pos:end="1243:26">env</name></expr></argument>, <argument pos:start="1243:29" pos:end="1243:29"><expr pos:start="1243:29" pos:end="1243:29"><name pos:start="1243:29" pos:end="1243:29">s</name></expr></argument>, <argument pos:start="1243:32" pos:end="1243:36"><expr pos:start="1243:32" pos:end="1243:36"><name pos:start="1243:32" pos:end="1243:36">modrm</name></expr></argument>, <argument pos:start="1243:39" pos:end="1243:40"><expr pos:start="1243:39" pos:end="1243:40"><name pos:start="1243:39" pos:end="1243:40">ot</name></expr></argument>, <argument pos:start="1243:43" pos:end="1243:49"><expr pos:start="1243:43" pos:end="1243:49"><name pos:start="1243:43" pos:end="1243:49">OR_TMP0</name></expr></argument>, <argument pos:start="1243:52" pos:end="1243:52"><expr pos:start="1243:52" pos:end="1243:52"><literal type="number" pos:start="1243:52" pos:end="1243:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1245:9" pos:end="1245:38"><expr pos:start="1245:9" pos:end="1245:37"><call pos:start="1245:9" pos:end="1245:37"><name pos:start="1245:9" pos:end="1245:25">gen_op_mov_TN_reg</name><argument_list pos:start="1245:26" pos:end="1245:37">(<argument pos:start="1245:27" pos:end="1245:28"><expr pos:start="1245:27" pos:end="1245:28"><name pos:start="1245:27" pos:end="1245:28">ot</name></expr></argument>, <argument pos:start="1245:31" pos:end="1245:31"><expr pos:start="1245:31" pos:end="1245:31"><literal type="number" pos:start="1245:31" pos:end="1245:31">1</literal></expr></argument>, <argument pos:start="1245:34" pos:end="1245:36"><expr pos:start="1245:34" pos:end="1245:36"><name pos:start="1245:34" pos:end="1245:36">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1247:9" pos:end="1247:32"><expr pos:start="1247:9" pos:end="1247:31"><call pos:start="1247:9" pos:end="1247:31"><name pos:start="1247:9" pos:end="1247:29">gen_op_testl_T0_T1_cc</name><argument_list pos:start="1247:30" pos:end="1247:31">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1249:9" pos:end="1249:37"><expr pos:start="1249:9" pos:end="1249:36"><name pos:start="1249:9" pos:end="1249:16"><name pos:start="1249:9" pos:end="1249:9">s</name><operator pos:start="1249:10" pos:end="1249:11">-&gt;</operator><name pos:start="1249:12" pos:end="1249:16">cc_op</name></name> <operator pos:start="1249:18" pos:end="1249:18">=</operator> <name pos:start="1249:20" pos:end="1249:31">CC_OP_LOGICB</name> <operator pos:start="1249:33" pos:end="1249:33">+</operator> <name pos:start="1249:35" pos:end="1249:36">ot</name></expr>;</expr_stmt>

        <break pos:start="1251:9" pos:end="1251:14">break;</break>



    <case pos:start="1255:5" pos:end="1255:14">case <expr pos:start="1255:10" pos:end="1255:13"><literal type="number" pos:start="1255:10" pos:end="1255:13">0xa8</literal></expr>:</case> <comment type="block" pos:start="1255:16" pos:end="1255:33">/* test eAX, Iv */</comment>

    <case pos:start="1257:5" pos:end="1257:14">case <expr pos:start="1257:10" pos:end="1257:13"><literal type="number" pos:start="1257:10" pos:end="1257:13">0xa9</literal></expr>:</case>

        <if_stmt pos:start="1259:9" pos:end="1265:33"><if pos:start="1259:9" pos:end="1261:25">if <condition pos:start="1259:12" pos:end="1259:25">(<expr pos:start="1259:13" pos:end="1259:24"><operator pos:start="1259:13" pos:end="1259:13">(</operator><name pos:start="1259:14" pos:end="1259:14">b</name> <operator pos:start="1259:16" pos:end="1259:16">&amp;</operator> <literal type="number" pos:start="1259:18" pos:end="1259:18">1</literal><operator pos:start="1259:19" pos:end="1259:19">)</operator> <operator pos:start="1259:21" pos:end="1259:22">==</operator> <literal type="number" pos:start="1259:24" pos:end="1259:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1261:13" pos:end="1261:25"><block_content pos:start="1261:13" pos:end="1261:25">

            <expr_stmt pos:start="1261:13" pos:end="1261:25"><expr pos:start="1261:13" pos:end="1261:24"><name pos:start="1261:13" pos:end="1261:14">ot</name> <operator pos:start="1261:16" pos:end="1261:16">=</operator> <name pos:start="1261:18" pos:end="1261:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1263:9" pos:end="1265:33">else<block type="pseudo" pos:start="1265:13" pos:end="1265:33"><block_content pos:start="1265:13" pos:end="1265:33">

            <expr_stmt pos:start="1265:13" pos:end="1265:33"><expr pos:start="1265:13" pos:end="1265:32"><name pos:start="1265:13" pos:end="1265:14">ot</name> <operator pos:start="1265:16" pos:end="1265:16">=</operator> <name pos:start="1265:18" pos:end="1265:22">dflag</name> <operator pos:start="1265:24" pos:end="1265:24">+</operator> <name pos:start="1265:26" pos:end="1265:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1267:9" pos:end="1267:35"><expr pos:start="1267:9" pos:end="1267:34"><name pos:start="1267:9" pos:end="1267:11">val</name> <operator pos:start="1267:13" pos:end="1267:13">=</operator> <call pos:start="1267:15" pos:end="1267:34"><name pos:start="1267:15" pos:end="1267:22">insn_get</name><argument_list pos:start="1267:23" pos:end="1267:34">(<argument pos:start="1267:24" pos:end="1267:26"><expr pos:start="1267:24" pos:end="1267:26"><name pos:start="1267:24" pos:end="1267:26">env</name></expr></argument>, <argument pos:start="1267:29" pos:end="1267:29"><expr pos:start="1267:29" pos:end="1267:29"><name pos:start="1267:29" pos:end="1267:29">s</name></expr></argument>, <argument pos:start="1267:32" pos:end="1267:33"><expr pos:start="1267:32" pos:end="1267:33"><name pos:start="1267:32" pos:end="1267:33">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="1271:9" pos:end="1271:41"><expr pos:start="1271:9" pos:end="1271:40"><call pos:start="1271:9" pos:end="1271:40"><name pos:start="1271:9" pos:end="1271:25">gen_op_mov_TN_reg</name><argument_list pos:start="1271:26" pos:end="1271:40">(<argument pos:start="1271:27" pos:end="1271:28"><expr pos:start="1271:27" pos:end="1271:28"><name pos:start="1271:27" pos:end="1271:28">ot</name></expr></argument>, <argument pos:start="1271:31" pos:end="1271:31"><expr pos:start="1271:31" pos:end="1271:31"><literal type="number" pos:start="1271:31" pos:end="1271:31">0</literal></expr></argument>, <argument pos:start="1271:34" pos:end="1271:39"><expr pos:start="1271:34" pos:end="1271:39"><name pos:start="1271:34" pos:end="1271:39">OR_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1273:9" pos:end="1273:31"><expr pos:start="1273:9" pos:end="1273:30"><call pos:start="1273:9" pos:end="1273:30"><name pos:start="1273:9" pos:end="1273:25">gen_op_movl_T1_im</name><argument_list pos:start="1273:26" pos:end="1273:30">(<argument pos:start="1273:27" pos:end="1273:29"><expr pos:start="1273:27" pos:end="1273:29"><name pos:start="1273:27" pos:end="1273:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1275:9" pos:end="1275:32"><expr pos:start="1275:9" pos:end="1275:31"><call pos:start="1275:9" pos:end="1275:31"><name pos:start="1275:9" pos:end="1275:29">gen_op_testl_T0_T1_cc</name><argument_list pos:start="1275:30" pos:end="1275:31">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1277:9" pos:end="1277:37"><expr pos:start="1277:9" pos:end="1277:36"><name pos:start="1277:9" pos:end="1277:16"><name pos:start="1277:9" pos:end="1277:9">s</name><operator pos:start="1277:10" pos:end="1277:11">-&gt;</operator><name pos:start="1277:12" pos:end="1277:16">cc_op</name></name> <operator pos:start="1277:18" pos:end="1277:18">=</operator> <name pos:start="1277:20" pos:end="1277:31">CC_OP_LOGICB</name> <operator pos:start="1277:33" pos:end="1277:33">+</operator> <name pos:start="1277:35" pos:end="1277:36">ot</name></expr>;</expr_stmt>

        <break pos:start="1279:9" pos:end="1279:14">break;</break>



    <case pos:start="1283:5" pos:end="1286:0">case <expr pos:start="1283:10" pos:end="1283:13"><literal type="number" pos:start="1283:10" pos:end="1283:13">0x98</literal></expr>:</case> <comment type="block" pos:start="1283:16" pos:end="1283:29">/* CWDE/CBW */</comment>

<cpp:ifdef pos:start="1285:1" pos:end="1285:20">#<cpp:directive pos:start="1285:2" pos:end="1285:6">ifdef</cpp:directive> <name pos:start="1285:8" pos:end="1285:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="1287:9" pos:end="1315:9"><if pos:start="1287:9" pos:end="1295:9">if <condition pos:start="1287:12" pos:end="1287:23">(<expr pos:start="1287:13" pos:end="1287:22"><name pos:start="1287:13" pos:end="1287:17">dflag</name> <operator pos:start="1287:19" pos:end="1287:20">==</operator> <literal type="number" pos:start="1287:22" pos:end="1287:22">2</literal></expr>)</condition> <block pos:start="1287:25" pos:end="1295:9">{<block_content pos:start="1289:13" pos:end="1293:46">

            <expr_stmt pos:start="1289:13" pos:end="1289:49"><expr pos:start="1289:13" pos:end="1289:48"><call pos:start="1289:13" pos:end="1289:48"><name pos:start="1289:13" pos:end="1289:29">gen_op_mov_TN_reg</name><argument_list pos:start="1289:30" pos:end="1289:48">(<argument pos:start="1289:31" pos:end="1289:37"><expr pos:start="1289:31" pos:end="1289:37"><name pos:start="1289:31" pos:end="1289:37">OT_LONG</name></expr></argument>, <argument pos:start="1289:40" pos:end="1289:40"><expr pos:start="1289:40" pos:end="1289:40"><literal type="number" pos:start="1289:40" pos:end="1289:40">0</literal></expr></argument>, <argument pos:start="1289:43" pos:end="1289:47"><expr pos:start="1289:43" pos:end="1289:47"><name pos:start="1289:43" pos:end="1289:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1291:13" pos:end="1291:50"><expr pos:start="1291:13" pos:end="1291:49"><call pos:start="1291:13" pos:end="1291:49"><name pos:start="1291:13" pos:end="1291:29">tcg_gen_ext32s_tl</name><argument_list pos:start="1291:30" pos:end="1291:49">(<argument pos:start="1291:31" pos:end="1291:38"><expr pos:start="1291:31" pos:end="1291:38"><name pos:start="1291:31" pos:end="1291:38"><name pos:start="1291:31" pos:end="1291:35">cpu_T</name><index pos:start="1291:36" pos:end="1291:38">[<expr pos:start="1291:37" pos:end="1291:37"><literal type="number" pos:start="1291:37" pos:end="1291:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1291:41" pos:end="1291:48"><expr pos:start="1291:41" pos:end="1291:48"><name pos:start="1291:41" pos:end="1291:48"><name pos:start="1291:41" pos:end="1291:45">cpu_T</name><index pos:start="1291:46" pos:end="1291:48">[<expr pos:start="1291:47" pos:end="1291:47"><literal type="number" pos:start="1291:47" pos:end="1291:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1293:13" pos:end="1293:46"><expr pos:start="1293:13" pos:end="1293:45"><call pos:start="1293:13" pos:end="1293:45"><name pos:start="1293:13" pos:end="1293:29">gen_op_mov_reg_T0</name><argument_list pos:start="1293:30" pos:end="1293:45">(<argument pos:start="1293:31" pos:end="1293:37"><expr pos:start="1293:31" pos:end="1293:37"><name pos:start="1293:31" pos:end="1293:37">OT_QUAD</name></expr></argument>, <argument pos:start="1293:40" pos:end="1293:44"><expr pos:start="1293:40" pos:end="1293:44"><name pos:start="1293:40" pos:end="1293:44">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1295:11" pos:end="1307:9">else

<cpp:endif pos:start="1297:1" pos:end="1297:6">#<cpp:directive pos:start="1297:2" pos:end="1297:6">endif</cpp:directive></cpp:endif>

        if <condition pos:start="1299:12" pos:end="1299:23">(<expr pos:start="1299:13" pos:end="1299:22"><name pos:start="1299:13" pos:end="1299:17">dflag</name> <operator pos:start="1299:19" pos:end="1299:20">==</operator> <literal type="number" pos:start="1299:22" pos:end="1299:22">1</literal></expr>)</condition> <block pos:start="1299:25" pos:end="1307:9">{<block_content pos:start="1301:13" pos:end="1305:46">

            <expr_stmt pos:start="1301:13" pos:end="1301:49"><expr pos:start="1301:13" pos:end="1301:48"><call pos:start="1301:13" pos:end="1301:48"><name pos:start="1301:13" pos:end="1301:29">gen_op_mov_TN_reg</name><argument_list pos:start="1301:30" pos:end="1301:48">(<argument pos:start="1301:31" pos:end="1301:37"><expr pos:start="1301:31" pos:end="1301:37"><name pos:start="1301:31" pos:end="1301:37">OT_WORD</name></expr></argument>, <argument pos:start="1301:40" pos:end="1301:40"><expr pos:start="1301:40" pos:end="1301:40"><literal type="number" pos:start="1301:40" pos:end="1301:40">0</literal></expr></argument>, <argument pos:start="1301:43" pos:end="1301:47"><expr pos:start="1301:43" pos:end="1301:47"><name pos:start="1301:43" pos:end="1301:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1303:13" pos:end="1303:50"><expr pos:start="1303:13" pos:end="1303:49"><call pos:start="1303:13" pos:end="1303:49"><name pos:start="1303:13" pos:end="1303:29">tcg_gen_ext16s_tl</name><argument_list pos:start="1303:30" pos:end="1303:49">(<argument pos:start="1303:31" pos:end="1303:38"><expr pos:start="1303:31" pos:end="1303:38"><name pos:start="1303:31" pos:end="1303:38"><name pos:start="1303:31" pos:end="1303:35">cpu_T</name><index pos:start="1303:36" pos:end="1303:38">[<expr pos:start="1303:37" pos:end="1303:37"><literal type="number" pos:start="1303:37" pos:end="1303:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1303:41" pos:end="1303:48"><expr pos:start="1303:41" pos:end="1303:48"><name pos:start="1303:41" pos:end="1303:48"><name pos:start="1303:41" pos:end="1303:45">cpu_T</name><index pos:start="1303:46" pos:end="1303:48">[<expr pos:start="1303:47" pos:end="1303:47"><literal type="number" pos:start="1303:47" pos:end="1303:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1305:13" pos:end="1305:46"><expr pos:start="1305:13" pos:end="1305:45"><call pos:start="1305:13" pos:end="1305:45"><name pos:start="1305:13" pos:end="1305:29">gen_op_mov_reg_T0</name><argument_list pos:start="1305:30" pos:end="1305:45">(<argument pos:start="1305:31" pos:end="1305:37"><expr pos:start="1305:31" pos:end="1305:37"><name pos:start="1305:31" pos:end="1305:37">OT_LONG</name></expr></argument>, <argument pos:start="1305:40" pos:end="1305:44"><expr pos:start="1305:40" pos:end="1305:44"><name pos:start="1305:40" pos:end="1305:44">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1307:11" pos:end="1315:9">else <block pos:start="1307:16" pos:end="1315:9">{<block_content pos:start="1309:13" pos:end="1313:46">

            <expr_stmt pos:start="1309:13" pos:end="1309:49"><expr pos:start="1309:13" pos:end="1309:48"><call pos:start="1309:13" pos:end="1309:48"><name pos:start="1309:13" pos:end="1309:29">gen_op_mov_TN_reg</name><argument_list pos:start="1309:30" pos:end="1309:48">(<argument pos:start="1309:31" pos:end="1309:37"><expr pos:start="1309:31" pos:end="1309:37"><name pos:start="1309:31" pos:end="1309:37">OT_BYTE</name></expr></argument>, <argument pos:start="1309:40" pos:end="1309:40"><expr pos:start="1309:40" pos:end="1309:40"><literal type="number" pos:start="1309:40" pos:end="1309:40">0</literal></expr></argument>, <argument pos:start="1309:43" pos:end="1309:47"><expr pos:start="1309:43" pos:end="1309:47"><name pos:start="1309:43" pos:end="1309:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1311:13" pos:end="1311:49"><expr pos:start="1311:13" pos:end="1311:48"><call pos:start="1311:13" pos:end="1311:48"><name pos:start="1311:13" pos:end="1311:28">tcg_gen_ext8s_tl</name><argument_list pos:start="1311:29" pos:end="1311:48">(<argument pos:start="1311:30" pos:end="1311:37"><expr pos:start="1311:30" pos:end="1311:37"><name pos:start="1311:30" pos:end="1311:37"><name pos:start="1311:30" pos:end="1311:34">cpu_T</name><index pos:start="1311:35" pos:end="1311:37">[<expr pos:start="1311:36" pos:end="1311:36"><literal type="number" pos:start="1311:36" pos:end="1311:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1311:40" pos:end="1311:47"><expr pos:start="1311:40" pos:end="1311:47"><name pos:start="1311:40" pos:end="1311:47"><name pos:start="1311:40" pos:end="1311:44">cpu_T</name><index pos:start="1311:45" pos:end="1311:47">[<expr pos:start="1311:46" pos:end="1311:46"><literal type="number" pos:start="1311:46" pos:end="1311:46">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1313:13" pos:end="1313:46"><expr pos:start="1313:13" pos:end="1313:45"><call pos:start="1313:13" pos:end="1313:45"><name pos:start="1313:13" pos:end="1313:29">gen_op_mov_reg_T0</name><argument_list pos:start="1313:30" pos:end="1313:45">(<argument pos:start="1313:31" pos:end="1313:37"><expr pos:start="1313:31" pos:end="1313:37"><name pos:start="1313:31" pos:end="1313:37">OT_WORD</name></expr></argument>, <argument pos:start="1313:40" pos:end="1313:44"><expr pos:start="1313:40" pos:end="1313:44"><name pos:start="1313:40" pos:end="1313:44">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1317:9" pos:end="1317:14">break;</break>

    <case pos:start="1319:5" pos:end="1322:0">case <expr pos:start="1319:10" pos:end="1319:13"><literal type="number" pos:start="1319:10" pos:end="1319:13">0x99</literal></expr>:</case> <comment type="block" pos:start="1319:16" pos:end="1319:28">/* CDQ/CWD */</comment>

<cpp:ifdef pos:start="1321:1" pos:end="1321:20">#<cpp:directive pos:start="1321:2" pos:end="1321:6">ifdef</cpp:directive> <name pos:start="1321:8" pos:end="1321:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="1323:9" pos:end="1355:9"><if pos:start="1323:9" pos:end="1331:9">if <condition pos:start="1323:12" pos:end="1323:23">(<expr pos:start="1323:13" pos:end="1323:22"><name pos:start="1323:13" pos:end="1323:17">dflag</name> <operator pos:start="1323:19" pos:end="1323:20">==</operator> <literal type="number" pos:start="1323:22" pos:end="1323:22">2</literal></expr>)</condition> <block pos:start="1323:25" pos:end="1331:9">{<block_content pos:start="1325:13" pos:end="1329:46">

            <expr_stmt pos:start="1325:13" pos:end="1325:49"><expr pos:start="1325:13" pos:end="1325:48"><call pos:start="1325:13" pos:end="1325:48"><name pos:start="1325:13" pos:end="1325:29">gen_op_mov_TN_reg</name><argument_list pos:start="1325:30" pos:end="1325:48">(<argument pos:start="1325:31" pos:end="1325:37"><expr pos:start="1325:31" pos:end="1325:37"><name pos:start="1325:31" pos:end="1325:37">OT_QUAD</name></expr></argument>, <argument pos:start="1325:40" pos:end="1325:40"><expr pos:start="1325:40" pos:end="1325:40"><literal type="number" pos:start="1325:40" pos:end="1325:40">0</literal></expr></argument>, <argument pos:start="1325:43" pos:end="1325:47"><expr pos:start="1325:43" pos:end="1325:47"><name pos:start="1325:43" pos:end="1325:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1327:13" pos:end="1327:52"><expr pos:start="1327:13" pos:end="1327:51"><call pos:start="1327:13" pos:end="1327:51"><name pos:start="1327:13" pos:end="1327:27">tcg_gen_sari_tl</name><argument_list pos:start="1327:28" pos:end="1327:51">(<argument pos:start="1327:29" pos:end="1327:36"><expr pos:start="1327:29" pos:end="1327:36"><name pos:start="1327:29" pos:end="1327:36"><name pos:start="1327:29" pos:end="1327:33">cpu_T</name><index pos:start="1327:34" pos:end="1327:36">[<expr pos:start="1327:35" pos:end="1327:35"><literal type="number" pos:start="1327:35" pos:end="1327:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1327:39" pos:end="1327:46"><expr pos:start="1327:39" pos:end="1327:46"><name pos:start="1327:39" pos:end="1327:46"><name pos:start="1327:39" pos:end="1327:43">cpu_T</name><index pos:start="1327:44" pos:end="1327:46">[<expr pos:start="1327:45" pos:end="1327:45"><literal type="number" pos:start="1327:45" pos:end="1327:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1327:49" pos:end="1327:50"><expr pos:start="1327:49" pos:end="1327:50"><literal type="number" pos:start="1327:49" pos:end="1327:50">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1329:13" pos:end="1329:46"><expr pos:start="1329:13" pos:end="1329:45"><call pos:start="1329:13" pos:end="1329:45"><name pos:start="1329:13" pos:end="1329:29">gen_op_mov_reg_T0</name><argument_list pos:start="1329:30" pos:end="1329:45">(<argument pos:start="1329:31" pos:end="1329:37"><expr pos:start="1329:31" pos:end="1329:37"><name pos:start="1329:31" pos:end="1329:37">OT_QUAD</name></expr></argument>, <argument pos:start="1329:40" pos:end="1329:44"><expr pos:start="1329:40" pos:end="1329:44"><name pos:start="1329:40" pos:end="1329:44">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1331:11" pos:end="1345:9">else

<cpp:endif pos:start="1333:1" pos:end="1333:6">#<cpp:directive pos:start="1333:2" pos:end="1333:6">endif</cpp:directive></cpp:endif>

        if <condition pos:start="1335:12" pos:end="1335:23">(<expr pos:start="1335:13" pos:end="1335:22"><name pos:start="1335:13" pos:end="1335:17">dflag</name> <operator pos:start="1335:19" pos:end="1335:20">==</operator> <literal type="number" pos:start="1335:22" pos:end="1335:22">1</literal></expr>)</condition> <block pos:start="1335:25" pos:end="1345:9">{<block_content pos:start="1337:13" pos:end="1343:46">

            <expr_stmt pos:start="1337:13" pos:end="1337:49"><expr pos:start="1337:13" pos:end="1337:48"><call pos:start="1337:13" pos:end="1337:48"><name pos:start="1337:13" pos:end="1337:29">gen_op_mov_TN_reg</name><argument_list pos:start="1337:30" pos:end="1337:48">(<argument pos:start="1337:31" pos:end="1337:37"><expr pos:start="1337:31" pos:end="1337:37"><name pos:start="1337:31" pos:end="1337:37">OT_LONG</name></expr></argument>, <argument pos:start="1337:40" pos:end="1337:40"><expr pos:start="1337:40" pos:end="1337:40"><literal type="number" pos:start="1337:40" pos:end="1337:40">0</literal></expr></argument>, <argument pos:start="1337:43" pos:end="1337:47"><expr pos:start="1337:43" pos:end="1337:47"><name pos:start="1337:43" pos:end="1337:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1339:13" pos:end="1339:50"><expr pos:start="1339:13" pos:end="1339:49"><call pos:start="1339:13" pos:end="1339:49"><name pos:start="1339:13" pos:end="1339:29">tcg_gen_ext32s_tl</name><argument_list pos:start="1339:30" pos:end="1339:49">(<argument pos:start="1339:31" pos:end="1339:38"><expr pos:start="1339:31" pos:end="1339:38"><name pos:start="1339:31" pos:end="1339:38"><name pos:start="1339:31" pos:end="1339:35">cpu_T</name><index pos:start="1339:36" pos:end="1339:38">[<expr pos:start="1339:37" pos:end="1339:37"><literal type="number" pos:start="1339:37" pos:end="1339:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1339:41" pos:end="1339:48"><expr pos:start="1339:41" pos:end="1339:48"><name pos:start="1339:41" pos:end="1339:48"><name pos:start="1339:41" pos:end="1339:45">cpu_T</name><index pos:start="1339:46" pos:end="1339:48">[<expr pos:start="1339:47" pos:end="1339:47"><literal type="number" pos:start="1339:47" pos:end="1339:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1341:13" pos:end="1341:52"><expr pos:start="1341:13" pos:end="1341:51"><call pos:start="1341:13" pos:end="1341:51"><name pos:start="1341:13" pos:end="1341:27">tcg_gen_sari_tl</name><argument_list pos:start="1341:28" pos:end="1341:51">(<argument pos:start="1341:29" pos:end="1341:36"><expr pos:start="1341:29" pos:end="1341:36"><name pos:start="1341:29" pos:end="1341:36"><name pos:start="1341:29" pos:end="1341:33">cpu_T</name><index pos:start="1341:34" pos:end="1341:36">[<expr pos:start="1341:35" pos:end="1341:35"><literal type="number" pos:start="1341:35" pos:end="1341:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1341:39" pos:end="1341:46"><expr pos:start="1341:39" pos:end="1341:46"><name pos:start="1341:39" pos:end="1341:46"><name pos:start="1341:39" pos:end="1341:43">cpu_T</name><index pos:start="1341:44" pos:end="1341:46">[<expr pos:start="1341:45" pos:end="1341:45"><literal type="number" pos:start="1341:45" pos:end="1341:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1341:49" pos:end="1341:50"><expr pos:start="1341:49" pos:end="1341:50"><literal type="number" pos:start="1341:49" pos:end="1341:50">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1343:13" pos:end="1343:46"><expr pos:start="1343:13" pos:end="1343:45"><call pos:start="1343:13" pos:end="1343:45"><name pos:start="1343:13" pos:end="1343:29">gen_op_mov_reg_T0</name><argument_list pos:start="1343:30" pos:end="1343:45">(<argument pos:start="1343:31" pos:end="1343:37"><expr pos:start="1343:31" pos:end="1343:37"><name pos:start="1343:31" pos:end="1343:37">OT_LONG</name></expr></argument>, <argument pos:start="1343:40" pos:end="1343:44"><expr pos:start="1343:40" pos:end="1343:44"><name pos:start="1343:40" pos:end="1343:44">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1345:11" pos:end="1355:9">else <block pos:start="1345:16" pos:end="1355:9">{<block_content pos:start="1347:13" pos:end="1353:46">

            <expr_stmt pos:start="1347:13" pos:end="1347:49"><expr pos:start="1347:13" pos:end="1347:48"><call pos:start="1347:13" pos:end="1347:48"><name pos:start="1347:13" pos:end="1347:29">gen_op_mov_TN_reg</name><argument_list pos:start="1347:30" pos:end="1347:48">(<argument pos:start="1347:31" pos:end="1347:37"><expr pos:start="1347:31" pos:end="1347:37"><name pos:start="1347:31" pos:end="1347:37">OT_WORD</name></expr></argument>, <argument pos:start="1347:40" pos:end="1347:40"><expr pos:start="1347:40" pos:end="1347:40"><literal type="number" pos:start="1347:40" pos:end="1347:40">0</literal></expr></argument>, <argument pos:start="1347:43" pos:end="1347:47"><expr pos:start="1347:43" pos:end="1347:47"><name pos:start="1347:43" pos:end="1347:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1349:13" pos:end="1349:50"><expr pos:start="1349:13" pos:end="1349:49"><call pos:start="1349:13" pos:end="1349:49"><name pos:start="1349:13" pos:end="1349:29">tcg_gen_ext16s_tl</name><argument_list pos:start="1349:30" pos:end="1349:49">(<argument pos:start="1349:31" pos:end="1349:38"><expr pos:start="1349:31" pos:end="1349:38"><name pos:start="1349:31" pos:end="1349:38"><name pos:start="1349:31" pos:end="1349:35">cpu_T</name><index pos:start="1349:36" pos:end="1349:38">[<expr pos:start="1349:37" pos:end="1349:37"><literal type="number" pos:start="1349:37" pos:end="1349:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1349:41" pos:end="1349:48"><expr pos:start="1349:41" pos:end="1349:48"><name pos:start="1349:41" pos:end="1349:48"><name pos:start="1349:41" pos:end="1349:45">cpu_T</name><index pos:start="1349:46" pos:end="1349:48">[<expr pos:start="1349:47" pos:end="1349:47"><literal type="number" pos:start="1349:47" pos:end="1349:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1351:13" pos:end="1351:52"><expr pos:start="1351:13" pos:end="1351:51"><call pos:start="1351:13" pos:end="1351:51"><name pos:start="1351:13" pos:end="1351:27">tcg_gen_sari_tl</name><argument_list pos:start="1351:28" pos:end="1351:51">(<argument pos:start="1351:29" pos:end="1351:36"><expr pos:start="1351:29" pos:end="1351:36"><name pos:start="1351:29" pos:end="1351:36"><name pos:start="1351:29" pos:end="1351:33">cpu_T</name><index pos:start="1351:34" pos:end="1351:36">[<expr pos:start="1351:35" pos:end="1351:35"><literal type="number" pos:start="1351:35" pos:end="1351:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1351:39" pos:end="1351:46"><expr pos:start="1351:39" pos:end="1351:46"><name pos:start="1351:39" pos:end="1351:46"><name pos:start="1351:39" pos:end="1351:43">cpu_T</name><index pos:start="1351:44" pos:end="1351:46">[<expr pos:start="1351:45" pos:end="1351:45"><literal type="number" pos:start="1351:45" pos:end="1351:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1351:49" pos:end="1351:50"><expr pos:start="1351:49" pos:end="1351:50"><literal type="number" pos:start="1351:49" pos:end="1351:50">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1353:13" pos:end="1353:46"><expr pos:start="1353:13" pos:end="1353:45"><call pos:start="1353:13" pos:end="1353:45"><name pos:start="1353:13" pos:end="1353:29">gen_op_mov_reg_T0</name><argument_list pos:start="1353:30" pos:end="1353:45">(<argument pos:start="1353:31" pos:end="1353:37"><expr pos:start="1353:31" pos:end="1353:37"><name pos:start="1353:31" pos:end="1353:37">OT_WORD</name></expr></argument>, <argument pos:start="1353:40" pos:end="1353:44"><expr pos:start="1353:40" pos:end="1353:44"><name pos:start="1353:40" pos:end="1353:44">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1357:9" pos:end="1357:14">break;</break>

    <case pos:start="1359:5" pos:end="1359:15">case <expr pos:start="1359:10" pos:end="1359:14"><literal type="number" pos:start="1359:10" pos:end="1359:14">0x1af</literal></expr>:</case> <comment type="block" pos:start="1359:17" pos:end="1359:33">/* imul Gv, Ev */</comment>

    <case pos:start="1361:5" pos:end="1361:14">case <expr pos:start="1361:10" pos:end="1361:13"><literal type="number" pos:start="1361:10" pos:end="1361:13">0x69</literal></expr>:</case> <comment type="block" pos:start="1361:16" pos:end="1361:35">/* imul Gv, Ev, I */</comment>

    <case pos:start="1363:5" pos:end="1363:14">case <expr pos:start="1363:10" pos:end="1363:13"><literal type="number" pos:start="1363:10" pos:end="1363:13">0x6b</literal></expr>:</case>

        <expr_stmt pos:start="1365:9" pos:end="1365:29"><expr pos:start="1365:9" pos:end="1365:28"><name pos:start="1365:9" pos:end="1365:10">ot</name> <operator pos:start="1365:12" pos:end="1365:12">=</operator> <name pos:start="1365:14" pos:end="1365:18">dflag</name> <operator pos:start="1365:20" pos:end="1365:20">+</operator> <name pos:start="1365:22" pos:end="1365:28">OT_WORD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="1367:9" pos:end="1367:44"><expr pos:start="1367:9" pos:end="1367:43"><name pos:start="1367:9" pos:end="1367:13">modrm</name> <operator pos:start="1367:15" pos:end="1367:15">=</operator> <call pos:start="1367:17" pos:end="1367:43"><name pos:start="1367:17" pos:end="1367:29">cpu_ldub_code</name><argument_list pos:start="1367:30" pos:end="1367:43">(<argument pos:start="1367:31" pos:end="1367:33"><expr pos:start="1367:31" pos:end="1367:33"><name pos:start="1367:31" pos:end="1367:33">env</name></expr></argument>, <argument pos:start="1367:36" pos:end="1367:42"><expr pos:start="1367:36" pos:end="1367:42"><name pos:start="1367:36" pos:end="1367:40"><name pos:start="1367:36" pos:end="1367:36">s</name><operator pos:start="1367:37" pos:end="1367:38">-&gt;</operator><name pos:start="1367:39" pos:end="1367:40">pc</name></name><operator pos:start="1367:41" pos:end="1367:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1369:9" pos:end="1369:41"><expr pos:start="1369:9" pos:end="1369:40"><name pos:start="1369:9" pos:end="1369:11">reg</name> <operator pos:start="1369:13" pos:end="1369:13">=</operator> <operator pos:start="1369:15" pos:end="1369:15">(</operator><operator pos:start="1369:16" pos:end="1369:16">(</operator><name pos:start="1369:17" pos:end="1369:21">modrm</name> <operator pos:start="1369:23" pos:end="1369:24">&gt;&gt;</operator> <literal type="number" pos:start="1369:26" pos:end="1369:26">3</literal><operator pos:start="1369:27" pos:end="1369:27">)</operator> <operator pos:start="1369:29" pos:end="1369:29">&amp;</operator> <literal type="number" pos:start="1369:31" pos:end="1369:31">7</literal><operator pos:start="1369:32" pos:end="1369:32">)</operator> <operator pos:start="1369:34" pos:end="1369:34">|</operator> <name pos:start="1369:36" pos:end="1369:40">rex_r</name></expr>;</expr_stmt>

        <if_stmt pos:start="1371:9" pos:end="1377:30"><if pos:start="1371:9" pos:end="1373:48">if <condition pos:start="1371:12" pos:end="1371:22">(<expr pos:start="1371:13" pos:end="1371:21"><name pos:start="1371:13" pos:end="1371:13">b</name> <operator pos:start="1371:15" pos:end="1371:16">==</operator> <literal type="number" pos:start="1371:18" pos:end="1371:21">0x69</literal></expr>)</condition><block type="pseudo" pos:start="1373:13" pos:end="1373:48"><block_content pos:start="1373:13" pos:end="1373:48">

            <expr_stmt pos:start="1373:13" pos:end="1373:48"><expr pos:start="1373:13" pos:end="1373:47"><name pos:start="1373:13" pos:end="1373:25"><name pos:start="1373:13" pos:end="1373:13">s</name><operator pos:start="1373:14" pos:end="1373:15">-&gt;</operator><name pos:start="1373:16" pos:end="1373:25">rip_offset</name></name> <operator pos:start="1373:27" pos:end="1373:27">=</operator> <call pos:start="1373:29" pos:end="1373:47"><name pos:start="1373:29" pos:end="1373:43">insn_const_size</name><argument_list pos:start="1373:44" pos:end="1373:47">(<argument pos:start="1373:45" pos:end="1373:46"><expr pos:start="1373:45" pos:end="1373:46"><name pos:start="1373:45" pos:end="1373:46">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="1375:9" pos:end="1377:30">else if <condition pos:start="1375:17" pos:end="1375:27">(<expr pos:start="1375:18" pos:end="1375:26"><name pos:start="1375:18" pos:end="1375:18">b</name> <operator pos:start="1375:20" pos:end="1375:21">==</operator> <literal type="number" pos:start="1375:23" pos:end="1375:26">0x6b</literal></expr>)</condition><block type="pseudo" pos:start="1377:13" pos:end="1377:30"><block_content pos:start="1377:13" pos:end="1377:30">

            <expr_stmt pos:start="1377:13" pos:end="1377:30"><expr pos:start="1377:13" pos:end="1377:29"><name pos:start="1377:13" pos:end="1377:25"><name pos:start="1377:13" pos:end="1377:13">s</name><operator pos:start="1377:14" pos:end="1377:15">-&gt;</operator><name pos:start="1377:16" pos:end="1377:25">rip_offset</name></name> <operator pos:start="1377:27" pos:end="1377:27">=</operator> <literal type="number" pos:start="1377:29" pos:end="1377:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1379:9" pos:end="1379:54"><expr pos:start="1379:9" pos:end="1379:53"><call pos:start="1379:9" pos:end="1379:53"><name pos:start="1379:9" pos:end="1379:22">gen_ldst_modrm</name><argument_list pos:start="1379:23" pos:end="1379:53">(<argument pos:start="1379:24" pos:end="1379:26"><expr pos:start="1379:24" pos:end="1379:26"><name pos:start="1379:24" pos:end="1379:26">env</name></expr></argument>, <argument pos:start="1379:29" pos:end="1379:29"><expr pos:start="1379:29" pos:end="1379:29"><name pos:start="1379:29" pos:end="1379:29">s</name></expr></argument>, <argument pos:start="1379:32" pos:end="1379:36"><expr pos:start="1379:32" pos:end="1379:36"><name pos:start="1379:32" pos:end="1379:36">modrm</name></expr></argument>, <argument pos:start="1379:39" pos:end="1379:40"><expr pos:start="1379:39" pos:end="1379:40"><name pos:start="1379:39" pos:end="1379:40">ot</name></expr></argument>, <argument pos:start="1379:43" pos:end="1379:49"><expr pos:start="1379:43" pos:end="1379:49"><name pos:start="1379:43" pos:end="1379:49">OR_TMP0</name></expr></argument>, <argument pos:start="1379:52" pos:end="1379:52"><expr pos:start="1379:52" pos:end="1379:52"><literal type="number" pos:start="1379:52" pos:end="1379:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1381:9" pos:end="1402:0"><if pos:start="1381:9" pos:end="1387:9">if <condition pos:start="1381:12" pos:end="1381:22">(<expr pos:start="1381:13" pos:end="1381:21"><name pos:start="1381:13" pos:end="1381:13">b</name> <operator pos:start="1381:15" pos:end="1381:16">==</operator> <literal type="number" pos:start="1381:18" pos:end="1381:21">0x69</literal></expr>)</condition> <block pos:start="1381:24" pos:end="1387:9">{<block_content pos:start="1383:13" pos:end="1385:35">

            <expr_stmt pos:start="1383:13" pos:end="1383:39"><expr pos:start="1383:13" pos:end="1383:38"><name pos:start="1383:13" pos:end="1383:15">val</name> <operator pos:start="1383:17" pos:end="1383:17">=</operator> <call pos:start="1383:19" pos:end="1383:38"><name pos:start="1383:19" pos:end="1383:26">insn_get</name><argument_list pos:start="1383:27" pos:end="1383:38">(<argument pos:start="1383:28" pos:end="1383:30"><expr pos:start="1383:28" pos:end="1383:30"><name pos:start="1383:28" pos:end="1383:30">env</name></expr></argument>, <argument pos:start="1383:33" pos:end="1383:33"><expr pos:start="1383:33" pos:end="1383:33"><name pos:start="1383:33" pos:end="1383:33">s</name></expr></argument>, <argument pos:start="1383:36" pos:end="1383:37"><expr pos:start="1383:36" pos:end="1383:37"><name pos:start="1383:36" pos:end="1383:37">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1385:13" pos:end="1385:35"><expr pos:start="1385:13" pos:end="1385:34"><call pos:start="1385:13" pos:end="1385:34"><name pos:start="1385:13" pos:end="1385:29">gen_op_movl_T1_im</name><argument_list pos:start="1385:30" pos:end="1385:34">(<argument pos:start="1385:31" pos:end="1385:33"><expr pos:start="1385:31" pos:end="1385:33"><name pos:start="1385:31" pos:end="1385:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1387:11" pos:end="1393:9">else if <condition pos:start="1387:19" pos:end="1387:29">(<expr pos:start="1387:20" pos:end="1387:28"><name pos:start="1387:20" pos:end="1387:20">b</name> <operator pos:start="1387:22" pos:end="1387:23">==</operator> <literal type="number" pos:start="1387:25" pos:end="1387:28">0x6b</literal></expr>)</condition> <block pos:start="1387:31" pos:end="1393:9">{<block_content pos:start="1389:13" pos:end="1391:35">

            <expr_stmt pos:start="1389:13" pos:end="1389:52"><expr pos:start="1389:13" pos:end="1389:51"><name pos:start="1389:13" pos:end="1389:15">val</name> <operator pos:start="1389:17" pos:end="1389:17">=</operator> <operator pos:start="1389:19" pos:end="1389:19">(</operator><name pos:start="1389:20" pos:end="1389:25">int8_t</name><operator pos:start="1389:26" pos:end="1389:26">)</operator><call pos:start="1389:27" pos:end="1389:51"><name pos:start="1389:27" pos:end="1389:34">insn_get</name><argument_list pos:start="1389:35" pos:end="1389:51">(<argument pos:start="1389:36" pos:end="1389:38"><expr pos:start="1389:36" pos:end="1389:38"><name pos:start="1389:36" pos:end="1389:38">env</name></expr></argument>, <argument pos:start="1389:41" pos:end="1389:41"><expr pos:start="1389:41" pos:end="1389:41"><name pos:start="1389:41" pos:end="1389:41">s</name></expr></argument>, <argument pos:start="1389:44" pos:end="1389:50"><expr pos:start="1389:44" pos:end="1389:50"><name pos:start="1389:44" pos:end="1389:50">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1391:13" pos:end="1391:35"><expr pos:start="1391:13" pos:end="1391:34"><call pos:start="1391:13" pos:end="1391:34"><name pos:start="1391:13" pos:end="1391:29">gen_op_movl_T1_im</name><argument_list pos:start="1391:30" pos:end="1391:34">(<argument pos:start="1391:31" pos:end="1391:33"><expr pos:start="1391:31" pos:end="1391:33"><name pos:start="1391:31" pos:end="1391:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1393:11" pos:end="1402:0">else <block pos:start="1393:16" pos:end="1402:0">{<block_content pos:start="1395:13" pos:end="1395:42">

            <expr_stmt pos:start="1395:13" pos:end="1395:42"><expr pos:start="1395:13" pos:end="1395:41"><call pos:start="1395:13" pos:end="1395:41"><name pos:start="1395:13" pos:end="1395:29">gen_op_mov_TN_reg</name><argument_list pos:start="1395:30" pos:end="1395:41">(<argument pos:start="1395:31" pos:end="1395:32"><expr pos:start="1395:31" pos:end="1395:32"><name pos:start="1395:31" pos:end="1395:32">ot</name></expr></argument>, <argument pos:start="1395:35" pos:end="1395:35"><expr pos:start="1395:35" pos:end="1395:35"><literal type="number" pos:start="1395:35" pos:end="1395:35">1</literal></expr></argument>, <argument pos:start="1395:38" pos:end="1395:40"><expr pos:start="1395:38" pos:end="1395:40"><name pos:start="1395:38" pos:end="1395:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



<cpp:ifdef pos:start="1401:1" pos:end="1401:20">#<cpp:directive pos:start="1401:2" pos:end="1401:6">ifdef</cpp:directive> <name pos:start="1401:8" pos:end="1401:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="1403:9" pos:end="1475:9"><if pos:start="1403:9" pos:end="1407:9">if <condition pos:start="1403:12" pos:end="1403:26">(<expr pos:start="1403:13" pos:end="1403:25"><name pos:start="1403:13" pos:end="1403:14">ot</name> <operator pos:start="1403:16" pos:end="1403:17">==</operator> <name pos:start="1403:19" pos:end="1403:25">OT_QUAD</name></expr>)</condition> <block pos:start="1403:28" pos:end="1407:9">{<block_content pos:start="1405:13" pos:end="1405:74">

            <expr_stmt pos:start="1405:13" pos:end="1405:74"><expr pos:start="1405:13" pos:end="1405:73"><call pos:start="1405:13" pos:end="1405:73"><name pos:start="1405:13" pos:end="1405:34">gen_helper_imulq_T0_T1</name><argument_list pos:start="1405:35" pos:end="1405:73">(<argument pos:start="1405:36" pos:end="1405:43"><expr pos:start="1405:36" pos:end="1405:43"><name pos:start="1405:36" pos:end="1405:43"><name pos:start="1405:36" pos:end="1405:40">cpu_T</name><index pos:start="1405:41" pos:end="1405:43">[<expr pos:start="1405:42" pos:end="1405:42"><literal type="number" pos:start="1405:42" pos:end="1405:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1405:46" pos:end="1405:52"><expr pos:start="1405:46" pos:end="1405:52"><name pos:start="1405:46" pos:end="1405:52">cpu_env</name></expr></argument>, <argument pos:start="1405:55" pos:end="1405:62"><expr pos:start="1405:55" pos:end="1405:62"><name pos:start="1405:55" pos:end="1405:62"><name pos:start="1405:55" pos:end="1405:59">cpu_T</name><index pos:start="1405:60" pos:end="1405:62">[<expr pos:start="1405:61" pos:end="1405:61"><literal type="number" pos:start="1405:61" pos:end="1405:61">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1405:65" pos:end="1405:72"><expr pos:start="1405:65" pos:end="1405:72"><name pos:start="1405:65" pos:end="1405:72"><name pos:start="1405:65" pos:end="1405:69">cpu_T</name><index pos:start="1405:70" pos:end="1405:72">[<expr pos:start="1405:71" pos:end="1405:71"><literal type="number" pos:start="1405:71" pos:end="1405:71">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1407:11" pos:end="1459:9">else

<cpp:endif pos:start="1409:1" pos:end="1409:6">#<cpp:directive pos:start="1409:2" pos:end="1409:6">endif</cpp:directive></cpp:endif>

        if <condition pos:start="1411:12" pos:end="1411:26">(<expr pos:start="1411:13" pos:end="1411:25"><name pos:start="1411:13" pos:end="1411:14">ot</name> <operator pos:start="1411:16" pos:end="1411:17">==</operator> <name pos:start="1411:19" pos:end="1411:25">OT_LONG</name></expr>)</condition> <block pos:start="1411:28" pos:end="1459:9">{<block_content pos:start="1415:17" pos:end="1458:0">

<cpp:ifdef pos:start="1413:1" pos:end="1413:20">#<cpp:directive pos:start="1413:2" pos:end="1413:6">ifdef</cpp:directive> <name pos:start="1413:8" pos:end="1413:20">TARGET_X86_64</name></cpp:ifdef>

                <expr_stmt pos:start="1415:17" pos:end="1415:54"><expr pos:start="1415:17" pos:end="1415:53"><call pos:start="1415:17" pos:end="1415:53"><name pos:start="1415:17" pos:end="1415:33">tcg_gen_ext32s_tl</name><argument_list pos:start="1415:34" pos:end="1415:53">(<argument pos:start="1415:35" pos:end="1415:42"><expr pos:start="1415:35" pos:end="1415:42"><name pos:start="1415:35" pos:end="1415:42"><name pos:start="1415:35" pos:end="1415:39">cpu_T</name><index pos:start="1415:40" pos:end="1415:42">[<expr pos:start="1415:41" pos:end="1415:41"><literal type="number" pos:start="1415:41" pos:end="1415:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1415:45" pos:end="1415:52"><expr pos:start="1415:45" pos:end="1415:52"><name pos:start="1415:45" pos:end="1415:52"><name pos:start="1415:45" pos:end="1415:49">cpu_T</name><index pos:start="1415:50" pos:end="1415:52">[<expr pos:start="1415:51" pos:end="1415:51"><literal type="number" pos:start="1415:51" pos:end="1415:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1417:17" pos:end="1417:54"><expr pos:start="1417:17" pos:end="1417:53"><call pos:start="1417:17" pos:end="1417:53"><name pos:start="1417:17" pos:end="1417:33">tcg_gen_ext32s_tl</name><argument_list pos:start="1417:34" pos:end="1417:53">(<argument pos:start="1417:35" pos:end="1417:42"><expr pos:start="1417:35" pos:end="1417:42"><name pos:start="1417:35" pos:end="1417:42"><name pos:start="1417:35" pos:end="1417:39">cpu_T</name><index pos:start="1417:40" pos:end="1417:42">[<expr pos:start="1417:41" pos:end="1417:41"><literal type="number" pos:start="1417:41" pos:end="1417:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1417:45" pos:end="1417:52"><expr pos:start="1417:45" pos:end="1417:52"><name pos:start="1417:45" pos:end="1417:52"><name pos:start="1417:45" pos:end="1417:49">cpu_T</name><index pos:start="1417:50" pos:end="1417:52">[<expr pos:start="1417:51" pos:end="1417:51"><literal type="number" pos:start="1417:51" pos:end="1417:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1419:17" pos:end="1419:61"><expr pos:start="1419:17" pos:end="1419:60"><call pos:start="1419:17" pos:end="1419:60"><name pos:start="1419:17" pos:end="1419:30">tcg_gen_mul_tl</name><argument_list pos:start="1419:31" pos:end="1419:60">(<argument pos:start="1419:32" pos:end="1419:39"><expr pos:start="1419:32" pos:end="1419:39"><name pos:start="1419:32" pos:end="1419:39"><name pos:start="1419:32" pos:end="1419:36">cpu_T</name><index pos:start="1419:37" pos:end="1419:39">[<expr pos:start="1419:38" pos:end="1419:38"><literal type="number" pos:start="1419:38" pos:end="1419:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1419:42" pos:end="1419:49"><expr pos:start="1419:42" pos:end="1419:49"><name pos:start="1419:42" pos:end="1419:49"><name pos:start="1419:42" pos:end="1419:46">cpu_T</name><index pos:start="1419:47" pos:end="1419:49">[<expr pos:start="1419:48" pos:end="1419:48"><literal type="number" pos:start="1419:48" pos:end="1419:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1419:52" pos:end="1419:59"><expr pos:start="1419:52" pos:end="1419:59"><name pos:start="1419:52" pos:end="1419:59"><name pos:start="1419:52" pos:end="1419:56">cpu_T</name><index pos:start="1419:57" pos:end="1419:59">[<expr pos:start="1419:58" pos:end="1419:58"><literal type="number" pos:start="1419:58" pos:end="1419:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1421:17" pos:end="1421:53"><expr pos:start="1421:17" pos:end="1421:52"><call pos:start="1421:17" pos:end="1421:52"><name pos:start="1421:17" pos:end="1421:30">tcg_gen_mov_tl</name><argument_list pos:start="1421:31" pos:end="1421:52">(<argument pos:start="1421:32" pos:end="1421:41"><expr pos:start="1421:32" pos:end="1421:41"><name pos:start="1421:32" pos:end="1421:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="1421:44" pos:end="1421:51"><expr pos:start="1421:44" pos:end="1421:51"><name pos:start="1421:44" pos:end="1421:51"><name pos:start="1421:44" pos:end="1421:48">cpu_T</name><index pos:start="1421:49" pos:end="1421:51">[<expr pos:start="1421:50" pos:end="1421:50"><literal type="number" pos:start="1421:50" pos:end="1421:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1423:17" pos:end="1423:54"><expr pos:start="1423:17" pos:end="1423:53"><call pos:start="1423:17" pos:end="1423:53"><name pos:start="1423:17" pos:end="1423:33">tcg_gen_ext32s_tl</name><argument_list pos:start="1423:34" pos:end="1423:53">(<argument pos:start="1423:35" pos:end="1423:42"><expr pos:start="1423:35" pos:end="1423:42"><name pos:start="1423:35" pos:end="1423:42">cpu_tmp0</name></expr></argument>, <argument pos:start="1423:45" pos:end="1423:52"><expr pos:start="1423:45" pos:end="1423:52"><name pos:start="1423:45" pos:end="1423:52"><name pos:start="1423:45" pos:end="1423:49">cpu_T</name><index pos:start="1423:50" pos:end="1423:52">[<expr pos:start="1423:51" pos:end="1423:51"><literal type="number" pos:start="1423:51" pos:end="1423:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1425:17" pos:end="1428:0"><expr pos:start="1425:17" pos:end="1425:62"><call pos:start="1425:17" pos:end="1425:62"><name pos:start="1425:17" pos:end="1425:30">tcg_gen_sub_tl</name><argument_list pos:start="1425:31" pos:end="1425:62">(<argument pos:start="1425:32" pos:end="1425:41"><expr pos:start="1425:32" pos:end="1425:41"><name pos:start="1425:32" pos:end="1425:41">cpu_cc_src</name></expr></argument>, <argument pos:start="1425:44" pos:end="1425:51"><expr pos:start="1425:44" pos:end="1425:51"><name pos:start="1425:44" pos:end="1425:51"><name pos:start="1425:44" pos:end="1425:48">cpu_T</name><index pos:start="1425:49" pos:end="1425:51">[<expr pos:start="1425:50" pos:end="1425:50"><literal type="number" pos:start="1425:50" pos:end="1425:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1425:54" pos:end="1425:61"><expr pos:start="1425:54" pos:end="1425:61"><name pos:start="1425:54" pos:end="1425:61">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1427:1" pos:end="1427:5">#<cpp:directive pos:start="1427:2" pos:end="1427:5">else</cpp:directive></cpp:else>

                <block pos:start="1429:17" pos:end="1458:0">{<block_content pos:start="1431:21" pos:end="1453:67">

                    <decl_stmt pos:start="1431:21" pos:end="1431:36"><decl pos:start="1431:21" pos:end="1431:31"><type pos:start="1431:21" pos:end="1431:28"><name pos:start="1431:21" pos:end="1431:28">TCGv_i64</name></type> <name pos:start="1431:30" pos:end="1431:31">t0</name></decl>, <decl pos:start="1431:34" pos:end="1431:35"><type ref="prev" pos:start="1431:21" pos:end="1431:28"/><name pos:start="1431:34" pos:end="1431:35">t1</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="1433:21" pos:end="1433:44"><expr pos:start="1433:21" pos:end="1433:43"><name pos:start="1433:21" pos:end="1433:22">t0</name> <operator pos:start="1433:24" pos:end="1433:24">=</operator> <call pos:start="1433:26" pos:end="1433:43"><name pos:start="1433:26" pos:end="1433:41">tcg_temp_new_i64</name><argument_list pos:start="1433:42" pos:end="1433:43">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1435:21" pos:end="1435:44"><expr pos:start="1435:21" pos:end="1435:43"><name pos:start="1435:21" pos:end="1435:22">t1</name> <operator pos:start="1435:24" pos:end="1435:24">=</operator> <call pos:start="1435:26" pos:end="1435:43"><name pos:start="1435:26" pos:end="1435:41">tcg_temp_new_i64</name><argument_list pos:start="1435:42" pos:end="1435:43">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1437:21" pos:end="1437:54"><expr pos:start="1437:21" pos:end="1437:53"><call pos:start="1437:21" pos:end="1437:53"><name pos:start="1437:21" pos:end="1437:39">tcg_gen_ext_i32_i64</name><argument_list pos:start="1437:40" pos:end="1437:53">(<argument pos:start="1437:41" pos:end="1437:42"><expr pos:start="1437:41" pos:end="1437:42"><name pos:start="1437:41" pos:end="1437:42">t0</name></expr></argument>, <argument pos:start="1437:45" pos:end="1437:52"><expr pos:start="1437:45" pos:end="1437:52"><name pos:start="1437:45" pos:end="1437:52"><name pos:start="1437:45" pos:end="1437:49">cpu_T</name><index pos:start="1437:50" pos:end="1437:52">[<expr pos:start="1437:51" pos:end="1437:51"><literal type="number" pos:start="1437:51" pos:end="1437:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1439:21" pos:end="1439:54"><expr pos:start="1439:21" pos:end="1439:53"><call pos:start="1439:21" pos:end="1439:53"><name pos:start="1439:21" pos:end="1439:39">tcg_gen_ext_i32_i64</name><argument_list pos:start="1439:40" pos:end="1439:53">(<argument pos:start="1439:41" pos:end="1439:42"><expr pos:start="1439:41" pos:end="1439:42"><name pos:start="1439:41" pos:end="1439:42">t1</name></expr></argument>, <argument pos:start="1439:45" pos:end="1439:52"><expr pos:start="1439:45" pos:end="1439:52"><name pos:start="1439:45" pos:end="1439:52"><name pos:start="1439:45" pos:end="1439:49">cpu_T</name><index pos:start="1439:50" pos:end="1439:52">[<expr pos:start="1439:51" pos:end="1439:51"><literal type="number" pos:start="1439:51" pos:end="1439:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1441:21" pos:end="1441:48"><expr pos:start="1441:21" pos:end="1441:47"><call pos:start="1441:21" pos:end="1441:47"><name pos:start="1441:21" pos:end="1441:35">tcg_gen_mul_i64</name><argument_list pos:start="1441:36" pos:end="1441:47">(<argument pos:start="1441:37" pos:end="1441:38"><expr pos:start="1441:37" pos:end="1441:38"><name pos:start="1441:37" pos:end="1441:38">t0</name></expr></argument>, <argument pos:start="1441:41" pos:end="1441:42"><expr pos:start="1441:41" pos:end="1441:42"><name pos:start="1441:41" pos:end="1441:42">t0</name></expr></argument>, <argument pos:start="1441:45" pos:end="1441:46"><expr pos:start="1441:45" pos:end="1441:46"><name pos:start="1441:45" pos:end="1441:46">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1443:21" pos:end="1443:56"><expr pos:start="1443:21" pos:end="1443:55"><call pos:start="1443:21" pos:end="1443:55"><name pos:start="1443:21" pos:end="1443:41">tcg_gen_trunc_i64_i32</name><argument_list pos:start="1443:42" pos:end="1443:55">(<argument pos:start="1443:43" pos:end="1443:50"><expr pos:start="1443:43" pos:end="1443:50"><name pos:start="1443:43" pos:end="1443:50"><name pos:start="1443:43" pos:end="1443:47">cpu_T</name><index pos:start="1443:48" pos:end="1443:50">[<expr pos:start="1443:49" pos:end="1443:49"><literal type="number" pos:start="1443:49" pos:end="1443:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1443:53" pos:end="1443:54"><expr pos:start="1443:53" pos:end="1443:54"><name pos:start="1443:53" pos:end="1443:54">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1445:21" pos:end="1445:57"><expr pos:start="1445:21" pos:end="1445:56"><call pos:start="1445:21" pos:end="1445:56"><name pos:start="1445:21" pos:end="1445:34">tcg_gen_mov_tl</name><argument_list pos:start="1445:35" pos:end="1445:56">(<argument pos:start="1445:36" pos:end="1445:45"><expr pos:start="1445:36" pos:end="1445:45"><name pos:start="1445:36" pos:end="1445:45">cpu_cc_dst</name></expr></argument>, <argument pos:start="1445:48" pos:end="1445:55"><expr pos:start="1445:48" pos:end="1445:55"><name pos:start="1445:48" pos:end="1445:55"><name pos:start="1445:48" pos:end="1445:52">cpu_T</name><index pos:start="1445:53" pos:end="1445:55">[<expr pos:start="1445:54" pos:end="1445:54"><literal type="number" pos:start="1445:54" pos:end="1445:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1447:21" pos:end="1447:60"><expr pos:start="1447:21" pos:end="1447:59"><call pos:start="1447:21" pos:end="1447:59"><name pos:start="1447:21" pos:end="1447:35">tcg_gen_sari_tl</name><argument_list pos:start="1447:36" pos:end="1447:59">(<argument pos:start="1447:37" pos:end="1447:44"><expr pos:start="1447:37" pos:end="1447:44"><name pos:start="1447:37" pos:end="1447:44">cpu_tmp0</name></expr></argument>, <argument pos:start="1447:47" pos:end="1447:54"><expr pos:start="1447:47" pos:end="1447:54"><name pos:start="1447:47" pos:end="1447:54"><name pos:start="1447:47" pos:end="1447:51">cpu_T</name><index pos:start="1447:52" pos:end="1447:54">[<expr pos:start="1447:53" pos:end="1447:53"><literal type="number" pos:start="1447:53" pos:end="1447:53">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1447:57" pos:end="1447:58"><expr pos:start="1447:57" pos:end="1447:58"><literal type="number" pos:start="1447:57" pos:end="1447:58">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1449:21" pos:end="1449:49"><expr pos:start="1449:21" pos:end="1449:48"><call pos:start="1449:21" pos:end="1449:48"><name pos:start="1449:21" pos:end="1449:36">tcg_gen_shri_i64</name><argument_list pos:start="1449:37" pos:end="1449:48">(<argument pos:start="1449:38" pos:end="1449:39"><expr pos:start="1449:38" pos:end="1449:39"><name pos:start="1449:38" pos:end="1449:39">t0</name></expr></argument>, <argument pos:start="1449:42" pos:end="1449:43"><expr pos:start="1449:42" pos:end="1449:43"><name pos:start="1449:42" pos:end="1449:43">t0</name></expr></argument>, <argument pos:start="1449:46" pos:end="1449:47"><expr pos:start="1449:46" pos:end="1449:47"><literal type="number" pos:start="1449:46" pos:end="1449:47">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1451:21" pos:end="1451:56"><expr pos:start="1451:21" pos:end="1451:55"><call pos:start="1451:21" pos:end="1451:55"><name pos:start="1451:21" pos:end="1451:41">tcg_gen_trunc_i64_i32</name><argument_list pos:start="1451:42" pos:end="1451:55">(<argument pos:start="1451:43" pos:end="1451:50"><expr pos:start="1451:43" pos:end="1451:50"><name pos:start="1451:43" pos:end="1451:50"><name pos:start="1451:43" pos:end="1451:47">cpu_T</name><index pos:start="1451:48" pos:end="1451:50">[<expr pos:start="1451:49" pos:end="1451:49"><literal type="number" pos:start="1451:49" pos:end="1451:49">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1451:53" pos:end="1451:54"><expr pos:start="1451:53" pos:end="1451:54"><name pos:start="1451:53" pos:end="1451:54">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1453:21" pos:end="1453:67"><expr pos:start="1453:21" pos:end="1453:66"><call pos:start="1453:21" pos:end="1453:66"><name pos:start="1453:21" pos:end="1453:34">tcg_gen_sub_tl</name><argument_list pos:start="1453:35" pos:end="1453:66">(<argument pos:start="1453:36" pos:end="1453:45"><expr pos:start="1453:36" pos:end="1453:45"><name pos:start="1453:36" pos:end="1453:45">cpu_cc_src</name></expr></argument>, <argument pos:start="1453:48" pos:end="1453:55"><expr pos:start="1453:48" pos:end="1453:55"><name pos:start="1453:48" pos:end="1453:55"><name pos:start="1453:48" pos:end="1453:52">cpu_T</name><index pos:start="1453:53" pos:end="1453:55">[<expr pos:start="1453:54" pos:end="1453:54"><literal type="number" pos:start="1453:54" pos:end="1453:54">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1453:58" pos:end="1453:65"><expr pos:start="1453:58" pos:end="1453:65"><name pos:start="1453:58" pos:end="1453:65">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

<cpp:endif pos:start="1457:1" pos:end="1457:6">#<cpp:directive pos:start="1457:2" pos:end="1457:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if> <else pos:start="1459:11" pos:end="1475:9">else <block pos:start="1459:16" pos:end="1475:9">{<block_content pos:start="1461:13" pos:end="1473:59">

            <expr_stmt pos:start="1461:13" pos:end="1461:50"><expr pos:start="1461:13" pos:end="1461:49"><call pos:start="1461:13" pos:end="1461:49"><name pos:start="1461:13" pos:end="1461:29">tcg_gen_ext16s_tl</name><argument_list pos:start="1461:30" pos:end="1461:49">(<argument pos:start="1461:31" pos:end="1461:38"><expr pos:start="1461:31" pos:end="1461:38"><name pos:start="1461:31" pos:end="1461:38"><name pos:start="1461:31" pos:end="1461:35">cpu_T</name><index pos:start="1461:36" pos:end="1461:38">[<expr pos:start="1461:37" pos:end="1461:37"><literal type="number" pos:start="1461:37" pos:end="1461:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1461:41" pos:end="1461:48"><expr pos:start="1461:41" pos:end="1461:48"><name pos:start="1461:41" pos:end="1461:48"><name pos:start="1461:41" pos:end="1461:45">cpu_T</name><index pos:start="1461:46" pos:end="1461:48">[<expr pos:start="1461:47" pos:end="1461:47"><literal type="number" pos:start="1461:47" pos:end="1461:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1463:13" pos:end="1463:50"><expr pos:start="1463:13" pos:end="1463:49"><call pos:start="1463:13" pos:end="1463:49"><name pos:start="1463:13" pos:end="1463:29">tcg_gen_ext16s_tl</name><argument_list pos:start="1463:30" pos:end="1463:49">(<argument pos:start="1463:31" pos:end="1463:38"><expr pos:start="1463:31" pos:end="1463:38"><name pos:start="1463:31" pos:end="1463:38"><name pos:start="1463:31" pos:end="1463:35">cpu_T</name><index pos:start="1463:36" pos:end="1463:38">[<expr pos:start="1463:37" pos:end="1463:37"><literal type="number" pos:start="1463:37" pos:end="1463:37">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1463:41" pos:end="1463:48"><expr pos:start="1463:41" pos:end="1463:48"><name pos:start="1463:41" pos:end="1463:48"><name pos:start="1463:41" pos:end="1463:45">cpu_T</name><index pos:start="1463:46" pos:end="1463:48">[<expr pos:start="1463:47" pos:end="1463:47"><literal type="number" pos:start="1463:47" pos:end="1463:47">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="1465:13" pos:end="1465:59">/* XXX: use 32 bit mul which could be faster */</comment>

            <expr_stmt pos:start="1467:13" pos:end="1467:57"><expr pos:start="1467:13" pos:end="1467:56"><call pos:start="1467:13" pos:end="1467:56"><name pos:start="1467:13" pos:end="1467:26">tcg_gen_mul_tl</name><argument_list pos:start="1467:27" pos:end="1467:56">(<argument pos:start="1467:28" pos:end="1467:35"><expr pos:start="1467:28" pos:end="1467:35"><name pos:start="1467:28" pos:end="1467:35"><name pos:start="1467:28" pos:end="1467:32">cpu_T</name><index pos:start="1467:33" pos:end="1467:35">[<expr pos:start="1467:34" pos:end="1467:34"><literal type="number" pos:start="1467:34" pos:end="1467:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1467:38" pos:end="1467:45"><expr pos:start="1467:38" pos:end="1467:45"><name pos:start="1467:38" pos:end="1467:45"><name pos:start="1467:38" pos:end="1467:42">cpu_T</name><index pos:start="1467:43" pos:end="1467:45">[<expr pos:start="1467:44" pos:end="1467:44"><literal type="number" pos:start="1467:44" pos:end="1467:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1467:48" pos:end="1467:55"><expr pos:start="1467:48" pos:end="1467:55"><name pos:start="1467:48" pos:end="1467:55"><name pos:start="1467:48" pos:end="1467:52">cpu_T</name><index pos:start="1467:53" pos:end="1467:55">[<expr pos:start="1467:54" pos:end="1467:54"><literal type="number" pos:start="1467:54" pos:end="1467:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1469:13" pos:end="1469:49"><expr pos:start="1469:13" pos:end="1469:48"><call pos:start="1469:13" pos:end="1469:48"><name pos:start="1469:13" pos:end="1469:26">tcg_gen_mov_tl</name><argument_list pos:start="1469:27" pos:end="1469:48">(<argument pos:start="1469:28" pos:end="1469:37"><expr pos:start="1469:28" pos:end="1469:37"><name pos:start="1469:28" pos:end="1469:37">cpu_cc_dst</name></expr></argument>, <argument pos:start="1469:40" pos:end="1469:47"><expr pos:start="1469:40" pos:end="1469:47"><name pos:start="1469:40" pos:end="1469:47"><name pos:start="1469:40" pos:end="1469:44">cpu_T</name><index pos:start="1469:45" pos:end="1469:47">[<expr pos:start="1469:46" pos:end="1469:46"><literal type="number" pos:start="1469:46" pos:end="1469:46">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1471:13" pos:end="1471:50"><expr pos:start="1471:13" pos:end="1471:49"><call pos:start="1471:13" pos:end="1471:49"><name pos:start="1471:13" pos:end="1471:29">tcg_gen_ext16s_tl</name><argument_list pos:start="1471:30" pos:end="1471:49">(<argument pos:start="1471:31" pos:end="1471:38"><expr pos:start="1471:31" pos:end="1471:38"><name pos:start="1471:31" pos:end="1471:38">cpu_tmp0</name></expr></argument>, <argument pos:start="1471:41" pos:end="1471:48"><expr pos:start="1471:41" pos:end="1471:48"><name pos:start="1471:41" pos:end="1471:48"><name pos:start="1471:41" pos:end="1471:45">cpu_T</name><index pos:start="1471:46" pos:end="1471:48">[<expr pos:start="1471:47" pos:end="1471:47"><literal type="number" pos:start="1471:47" pos:end="1471:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1473:13" pos:end="1473:59"><expr pos:start="1473:13" pos:end="1473:58"><call pos:start="1473:13" pos:end="1473:58"><name pos:start="1473:13" pos:end="1473:26">tcg_gen_sub_tl</name><argument_list pos:start="1473:27" pos:end="1473:58">(<argument pos:start="1473:28" pos:end="1473:37"><expr pos:start="1473:28" pos:end="1473:37"><name pos:start="1473:28" pos:end="1473:37">cpu_cc_src</name></expr></argument>, <argument pos:start="1473:40" pos:end="1473:47"><expr pos:start="1473:40" pos:end="1473:47"><name pos:start="1473:40" pos:end="1473:47"><name pos:start="1473:40" pos:end="1473:44">cpu_T</name><index pos:start="1473:45" pos:end="1473:47">[<expr pos:start="1473:46" pos:end="1473:46"><literal type="number" pos:start="1473:46" pos:end="1473:46">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1473:50" pos:end="1473:57"><expr pos:start="1473:50" pos:end="1473:57"><name pos:start="1473:50" pos:end="1473:57">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1477:9" pos:end="1477:35"><expr pos:start="1477:9" pos:end="1477:34"><call pos:start="1477:9" pos:end="1477:34"><name pos:start="1477:9" pos:end="1477:25">gen_op_mov_reg_T0</name><argument_list pos:start="1477:26" pos:end="1477:34">(<argument pos:start="1477:27" pos:end="1477:28"><expr pos:start="1477:27" pos:end="1477:28"><name pos:start="1477:27" pos:end="1477:28">ot</name></expr></argument>, <argument pos:start="1477:31" pos:end="1477:33"><expr pos:start="1477:31" pos:end="1477:33"><name pos:start="1477:31" pos:end="1477:33">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1479:9" pos:end="1479:35"><expr pos:start="1479:9" pos:end="1479:34"><name pos:start="1479:9" pos:end="1479:16"><name pos:start="1479:9" pos:end="1479:9">s</name><operator pos:start="1479:10" pos:end="1479:11">-&gt;</operator><name pos:start="1479:12" pos:end="1479:16">cc_op</name></name> <operator pos:start="1479:18" pos:end="1479:18">=</operator> <name pos:start="1479:20" pos:end="1479:29">CC_OP_MULB</name> <operator pos:start="1479:31" pos:end="1479:31">+</operator> <name pos:start="1479:33" pos:end="1479:34">ot</name></expr>;</expr_stmt>

        <break pos:start="1481:9" pos:end="1481:14">break;</break>

    <case pos:start="1483:5" pos:end="1483:15">case <expr pos:start="1483:10" pos:end="1483:14"><literal type="number" pos:start="1483:10" pos:end="1483:14">0x1c0</literal></expr>:</case>

    <case pos:start="1485:5" pos:end="1485:15">case <expr pos:start="1485:10" pos:end="1485:14"><literal type="number" pos:start="1485:10" pos:end="1485:14">0x1c1</literal></expr>:</case> <comment type="block" pos:start="1485:17" pos:end="1485:33">/* xadd Ev, Gv */</comment>

        <if_stmt pos:start="1487:9" pos:end="1493:33"><if pos:start="1487:9" pos:end="1489:25">if <condition pos:start="1487:12" pos:end="1487:25">(<expr pos:start="1487:13" pos:end="1487:24"><operator pos:start="1487:13" pos:end="1487:13">(</operator><name pos:start="1487:14" pos:end="1487:14">b</name> <operator pos:start="1487:16" pos:end="1487:16">&amp;</operator> <literal type="number" pos:start="1487:18" pos:end="1487:18">1</literal><operator pos:start="1487:19" pos:end="1487:19">)</operator> <operator pos:start="1487:21" pos:end="1487:22">==</operator> <literal type="number" pos:start="1487:24" pos:end="1487:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1489:13" pos:end="1489:25"><block_content pos:start="1489:13" pos:end="1489:25">

            <expr_stmt pos:start="1489:13" pos:end="1489:25"><expr pos:start="1489:13" pos:end="1489:24"><name pos:start="1489:13" pos:end="1489:14">ot</name> <operator pos:start="1489:16" pos:end="1489:16">=</operator> <name pos:start="1489:18" pos:end="1489:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1491:9" pos:end="1493:33">else<block type="pseudo" pos:start="1493:13" pos:end="1493:33"><block_content pos:start="1493:13" pos:end="1493:33">

            <expr_stmt pos:start="1493:13" pos:end="1493:33"><expr pos:start="1493:13" pos:end="1493:32"><name pos:start="1493:13" pos:end="1493:14">ot</name> <operator pos:start="1493:16" pos:end="1493:16">=</operator> <name pos:start="1493:18" pos:end="1493:22">dflag</name> <operator pos:start="1493:24" pos:end="1493:24">+</operator> <name pos:start="1493:26" pos:end="1493:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1495:9" pos:end="1495:44"><expr pos:start="1495:9" pos:end="1495:43"><name pos:start="1495:9" pos:end="1495:13">modrm</name> <operator pos:start="1495:15" pos:end="1495:15">=</operator> <call pos:start="1495:17" pos:end="1495:43"><name pos:start="1495:17" pos:end="1495:29">cpu_ldub_code</name><argument_list pos:start="1495:30" pos:end="1495:43">(<argument pos:start="1495:31" pos:end="1495:33"><expr pos:start="1495:31" pos:end="1495:33"><name pos:start="1495:31" pos:end="1495:33">env</name></expr></argument>, <argument pos:start="1495:36" pos:end="1495:42"><expr pos:start="1495:36" pos:end="1495:42"><name pos:start="1495:36" pos:end="1495:40"><name pos:start="1495:36" pos:end="1495:36">s</name><operator pos:start="1495:37" pos:end="1495:38">-&gt;</operator><name pos:start="1495:39" pos:end="1495:40">pc</name></name><operator pos:start="1495:41" pos:end="1495:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1497:9" pos:end="1497:41"><expr pos:start="1497:9" pos:end="1497:40"><name pos:start="1497:9" pos:end="1497:11">reg</name> <operator pos:start="1497:13" pos:end="1497:13">=</operator> <operator pos:start="1497:15" pos:end="1497:15">(</operator><operator pos:start="1497:16" pos:end="1497:16">(</operator><name pos:start="1497:17" pos:end="1497:21">modrm</name> <operator pos:start="1497:23" pos:end="1497:24">&gt;&gt;</operator> <literal type="number" pos:start="1497:26" pos:end="1497:26">3</literal><operator pos:start="1497:27" pos:end="1497:27">)</operator> <operator pos:start="1497:29" pos:end="1497:29">&amp;</operator> <literal type="number" pos:start="1497:31" pos:end="1497:31">7</literal><operator pos:start="1497:32" pos:end="1497:32">)</operator> <operator pos:start="1497:34" pos:end="1497:34">|</operator> <name pos:start="1497:36" pos:end="1497:40">rex_r</name></expr>;</expr_stmt>

        <expr_stmt pos:start="1499:9" pos:end="1499:31"><expr pos:start="1499:9" pos:end="1499:30"><name pos:start="1499:9" pos:end="1499:11">mod</name> <operator pos:start="1499:13" pos:end="1499:13">=</operator> <operator pos:start="1499:15" pos:end="1499:15">(</operator><name pos:start="1499:16" pos:end="1499:20">modrm</name> <operator pos:start="1499:22" pos:end="1499:23">&gt;&gt;</operator> <literal type="number" pos:start="1499:25" pos:end="1499:25">6</literal><operator pos:start="1499:26" pos:end="1499:26">)</operator> <operator pos:start="1499:28" pos:end="1499:28">&amp;</operator> <literal type="number" pos:start="1499:30" pos:end="1499:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1501:9" pos:end="1529:9"><if pos:start="1501:9" pos:end="1515:9">if <condition pos:start="1501:12" pos:end="1501:21">(<expr pos:start="1501:13" pos:end="1501:20"><name pos:start="1501:13" pos:end="1501:15">mod</name> <operator pos:start="1501:17" pos:end="1501:18">==</operator> <literal type="number" pos:start="1501:20" pos:end="1501:20">3</literal></expr>)</condition> <block pos:start="1501:23" pos:end="1515:9">{<block_content pos:start="1503:13" pos:end="1513:38">

            <expr_stmt pos:start="1503:13" pos:end="1503:40"><expr pos:start="1503:13" pos:end="1503:39"><name pos:start="1503:13" pos:end="1503:14">rm</name> <operator pos:start="1503:16" pos:end="1503:16">=</operator> <operator pos:start="1503:18" pos:end="1503:18">(</operator><name pos:start="1503:19" pos:end="1503:23">modrm</name> <operator pos:start="1503:25" pos:end="1503:25">&amp;</operator> <literal type="number" pos:start="1503:27" pos:end="1503:27">7</literal><operator pos:start="1503:28" pos:end="1503:28">)</operator> <operator pos:start="1503:30" pos:end="1503:30">|</operator> <call pos:start="1503:32" pos:end="1503:39"><name pos:start="1503:32" pos:end="1503:36">REX_B</name><argument_list pos:start="1503:37" pos:end="1503:39">(<argument pos:start="1503:38" pos:end="1503:38"><expr pos:start="1503:38" pos:end="1503:38"><name pos:start="1503:38" pos:end="1503:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1505:13" pos:end="1505:42"><expr pos:start="1505:13" pos:end="1505:41"><call pos:start="1505:13" pos:end="1505:41"><name pos:start="1505:13" pos:end="1505:29">gen_op_mov_TN_reg</name><argument_list pos:start="1505:30" pos:end="1505:41">(<argument pos:start="1505:31" pos:end="1505:32"><expr pos:start="1505:31" pos:end="1505:32"><name pos:start="1505:31" pos:end="1505:32">ot</name></expr></argument>, <argument pos:start="1505:35" pos:end="1505:35"><expr pos:start="1505:35" pos:end="1505:35"><literal type="number" pos:start="1505:35" pos:end="1505:35">0</literal></expr></argument>, <argument pos:start="1505:38" pos:end="1505:40"><expr pos:start="1505:38" pos:end="1505:40"><name pos:start="1505:38" pos:end="1505:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1507:13" pos:end="1507:41"><expr pos:start="1507:13" pos:end="1507:40"><call pos:start="1507:13" pos:end="1507:40"><name pos:start="1507:13" pos:end="1507:29">gen_op_mov_TN_reg</name><argument_list pos:start="1507:30" pos:end="1507:40">(<argument pos:start="1507:31" pos:end="1507:32"><expr pos:start="1507:31" pos:end="1507:32"><name pos:start="1507:31" pos:end="1507:32">ot</name></expr></argument>, <argument pos:start="1507:35" pos:end="1507:35"><expr pos:start="1507:35" pos:end="1507:35"><literal type="number" pos:start="1507:35" pos:end="1507:35">1</literal></expr></argument>, <argument pos:start="1507:38" pos:end="1507:39"><expr pos:start="1507:38" pos:end="1507:39"><name pos:start="1507:38" pos:end="1507:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1509:13" pos:end="1509:32"><expr pos:start="1509:13" pos:end="1509:31"><call pos:start="1509:13" pos:end="1509:31"><name pos:start="1509:13" pos:end="1509:29">gen_op_addl_T0_T1</name><argument_list pos:start="1509:30" pos:end="1509:31">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1511:13" pos:end="1511:39"><expr pos:start="1511:13" pos:end="1511:38"><call pos:start="1511:13" pos:end="1511:38"><name pos:start="1511:13" pos:end="1511:29">gen_op_mov_reg_T1</name><argument_list pos:start="1511:30" pos:end="1511:38">(<argument pos:start="1511:31" pos:end="1511:32"><expr pos:start="1511:31" pos:end="1511:32"><name pos:start="1511:31" pos:end="1511:32">ot</name></expr></argument>, <argument pos:start="1511:35" pos:end="1511:37"><expr pos:start="1511:35" pos:end="1511:37"><name pos:start="1511:35" pos:end="1511:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1513:13" pos:end="1513:38"><expr pos:start="1513:13" pos:end="1513:37"><call pos:start="1513:13" pos:end="1513:37"><name pos:start="1513:13" pos:end="1513:29">gen_op_mov_reg_T0</name><argument_list pos:start="1513:30" pos:end="1513:37">(<argument pos:start="1513:31" pos:end="1513:32"><expr pos:start="1513:31" pos:end="1513:32"><name pos:start="1513:31" pos:end="1513:32">ot</name></expr></argument>, <argument pos:start="1513:35" pos:end="1513:36"><expr pos:start="1513:35" pos:end="1513:36"><name pos:start="1513:35" pos:end="1513:36">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1515:11" pos:end="1529:9">else <block pos:start="1515:16" pos:end="1529:9">{<block_content pos:start="1517:13" pos:end="1527:39">

            <expr_stmt pos:start="1517:13" pos:end="1517:66"><expr pos:start="1517:13" pos:end="1517:65"><call pos:start="1517:13" pos:end="1517:65"><name pos:start="1517:13" pos:end="1517:25">gen_lea_modrm</name><argument_list pos:start="1517:26" pos:end="1517:65">(<argument pos:start="1517:27" pos:end="1517:29"><expr pos:start="1517:27" pos:end="1517:29"><name pos:start="1517:27" pos:end="1517:29">env</name></expr></argument>, <argument pos:start="1517:32" pos:end="1517:32"><expr pos:start="1517:32" pos:end="1517:32"><name pos:start="1517:32" pos:end="1517:32">s</name></expr></argument>, <argument pos:start="1517:35" pos:end="1517:39"><expr pos:start="1517:35" pos:end="1517:39"><name pos:start="1517:35" pos:end="1517:39">modrm</name></expr></argument>, <argument pos:start="1517:42" pos:end="1517:50"><expr pos:start="1517:42" pos:end="1517:50"><operator pos:start="1517:42" pos:end="1517:42">&amp;</operator><name pos:start="1517:43" pos:end="1517:50">reg_addr</name></expr></argument>, <argument pos:start="1517:53" pos:end="1517:64"><expr pos:start="1517:53" pos:end="1517:64"><operator pos:start="1517:53" pos:end="1517:53">&amp;</operator><name pos:start="1517:54" pos:end="1517:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1519:13" pos:end="1519:42"><expr pos:start="1519:13" pos:end="1519:41"><call pos:start="1519:13" pos:end="1519:41"><name pos:start="1519:13" pos:end="1519:29">gen_op_mov_TN_reg</name><argument_list pos:start="1519:30" pos:end="1519:41">(<argument pos:start="1519:31" pos:end="1519:32"><expr pos:start="1519:31" pos:end="1519:32"><name pos:start="1519:31" pos:end="1519:32">ot</name></expr></argument>, <argument pos:start="1519:35" pos:end="1519:35"><expr pos:start="1519:35" pos:end="1519:35"><literal type="number" pos:start="1519:35" pos:end="1519:35">0</literal></expr></argument>, <argument pos:start="1519:38" pos:end="1519:40"><expr pos:start="1519:38" pos:end="1519:40"><name pos:start="1519:38" pos:end="1519:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1521:13" pos:end="1521:47"><expr pos:start="1521:13" pos:end="1521:46"><call pos:start="1521:13" pos:end="1521:46"><name pos:start="1521:13" pos:end="1521:27">gen_op_ld_T1_A0</name><argument_list pos:start="1521:28" pos:end="1521:46">(<argument pos:start="1521:29" pos:end="1521:45"><expr pos:start="1521:29" pos:end="1521:45"><name pos:start="1521:29" pos:end="1521:30">ot</name> <operator pos:start="1521:32" pos:end="1521:32">+</operator> <name pos:start="1521:34" pos:end="1521:45"><name pos:start="1521:34" pos:end="1521:34">s</name><operator pos:start="1521:35" pos:end="1521:36">-&gt;</operator><name pos:start="1521:37" pos:end="1521:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1523:13" pos:end="1523:32"><expr pos:start="1523:13" pos:end="1523:31"><call pos:start="1523:13" pos:end="1523:31"><name pos:start="1523:13" pos:end="1523:29">gen_op_addl_T0_T1</name><argument_list pos:start="1523:30" pos:end="1523:31">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1525:13" pos:end="1525:47"><expr pos:start="1525:13" pos:end="1525:46"><call pos:start="1525:13" pos:end="1525:46"><name pos:start="1525:13" pos:end="1525:27">gen_op_st_T0_A0</name><argument_list pos:start="1525:28" pos:end="1525:46">(<argument pos:start="1525:29" pos:end="1525:45"><expr pos:start="1525:29" pos:end="1525:45"><name pos:start="1525:29" pos:end="1525:30">ot</name> <operator pos:start="1525:32" pos:end="1525:32">+</operator> <name pos:start="1525:34" pos:end="1525:45"><name pos:start="1525:34" pos:end="1525:34">s</name><operator pos:start="1525:35" pos:end="1525:36">-&gt;</operator><name pos:start="1525:37" pos:end="1525:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1527:13" pos:end="1527:39"><expr pos:start="1527:13" pos:end="1527:38"><call pos:start="1527:13" pos:end="1527:38"><name pos:start="1527:13" pos:end="1527:29">gen_op_mov_reg_T1</name><argument_list pos:start="1527:30" pos:end="1527:38">(<argument pos:start="1527:31" pos:end="1527:32"><expr pos:start="1527:31" pos:end="1527:32"><name pos:start="1527:31" pos:end="1527:32">ot</name></expr></argument>, <argument pos:start="1527:35" pos:end="1527:37"><expr pos:start="1527:35" pos:end="1527:37"><name pos:start="1527:35" pos:end="1527:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1531:9" pos:end="1531:28"><expr pos:start="1531:9" pos:end="1531:27"><call pos:start="1531:9" pos:end="1531:27"><name pos:start="1531:9" pos:end="1531:25">gen_op_update2_cc</name><argument_list pos:start="1531:26" pos:end="1531:27">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1533:9" pos:end="1533:35"><expr pos:start="1533:9" pos:end="1533:34"><name pos:start="1533:9" pos:end="1533:16"><name pos:start="1533:9" pos:end="1533:9">s</name><operator pos:start="1533:10" pos:end="1533:11">-&gt;</operator><name pos:start="1533:12" pos:end="1533:16">cc_op</name></name> <operator pos:start="1533:18" pos:end="1533:18">=</operator> <name pos:start="1533:20" pos:end="1533:29">CC_OP_ADDB</name> <operator pos:start="1533:31" pos:end="1533:31">+</operator> <name pos:start="1533:33" pos:end="1533:34">ot</name></expr>;</expr_stmt>

        <break pos:start="1535:9" pos:end="1535:14">break;</break>

    <case pos:start="1537:5" pos:end="1537:15">case <expr pos:start="1537:10" pos:end="1537:14"><literal type="number" pos:start="1537:10" pos:end="1537:14">0x1b0</literal></expr>:</case>

    <case pos:start="1539:5" pos:end="1539:15">case <expr pos:start="1539:10" pos:end="1539:14"><literal type="number" pos:start="1539:10" pos:end="1539:14">0x1b1</literal></expr>:</case> <comment type="block" pos:start="1539:17" pos:end="1539:36">/* cmpxchg Ev, Gv */</comment>

        <block pos:start="1541:9" pos:end="1647:9">{<block_content pos:start="1543:13" pos:end="1645:30">

            <decl_stmt pos:start="1543:13" pos:end="1543:31"><decl pos:start="1543:13" pos:end="1543:22"><type pos:start="1543:13" pos:end="1543:15"><name pos:start="1543:13" pos:end="1543:15">int</name></type> <name pos:start="1543:17" pos:end="1543:22">label1</name></decl>, <decl pos:start="1543:25" pos:end="1543:30"><type ref="prev" pos:start="1543:13" pos:end="1543:15"/><name pos:start="1543:25" pos:end="1543:30">label2</name></decl>;</decl_stmt>

            <decl_stmt pos:start="1545:13" pos:end="1545:32"><decl pos:start="1545:13" pos:end="1545:19"><type pos:start="1545:13" pos:end="1545:16"><name pos:start="1545:13" pos:end="1545:16">TCGv</name></type> <name pos:start="1545:18" pos:end="1545:19">t0</name></decl>, <decl pos:start="1545:22" pos:end="1545:23"><type ref="prev" pos:start="1545:13" pos:end="1545:16"/><name pos:start="1545:22" pos:end="1545:23">t1</name></decl>, <decl pos:start="1545:26" pos:end="1545:27"><type ref="prev" pos:start="1545:13" pos:end="1545:16"/><name pos:start="1545:26" pos:end="1545:27">t2</name></decl>, <decl pos:start="1545:30" pos:end="1545:31"><type ref="prev" pos:start="1545:13" pos:end="1545:16"/><name pos:start="1545:30" pos:end="1545:31">a0</name></decl>;</decl_stmt>



            <if_stmt pos:start="1549:13" pos:end="1555:37"><if pos:start="1549:13" pos:end="1551:29">if <condition pos:start="1549:16" pos:end="1549:29">(<expr pos:start="1549:17" pos:end="1549:28"><operator pos:start="1549:17" pos:end="1549:17">(</operator><name pos:start="1549:18" pos:end="1549:18">b</name> <operator pos:start="1549:20" pos:end="1549:20">&amp;</operator> <literal type="number" pos:start="1549:22" pos:end="1549:22">1</literal><operator pos:start="1549:23" pos:end="1549:23">)</operator> <operator pos:start="1549:25" pos:end="1549:26">==</operator> <literal type="number" pos:start="1549:28" pos:end="1549:28">0</literal></expr>)</condition><block type="pseudo" pos:start="1551:17" pos:end="1551:29"><block_content pos:start="1551:17" pos:end="1551:29">

                <expr_stmt pos:start="1551:17" pos:end="1551:29"><expr pos:start="1551:17" pos:end="1551:28"><name pos:start="1551:17" pos:end="1551:18">ot</name> <operator pos:start="1551:20" pos:end="1551:20">=</operator> <name pos:start="1551:22" pos:end="1551:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="1553:13" pos:end="1555:37">else<block type="pseudo" pos:start="1555:17" pos:end="1555:37"><block_content pos:start="1555:17" pos:end="1555:37">

                <expr_stmt pos:start="1555:17" pos:end="1555:37"><expr pos:start="1555:17" pos:end="1555:36"><name pos:start="1555:17" pos:end="1555:18">ot</name> <operator pos:start="1555:20" pos:end="1555:20">=</operator> <name pos:start="1555:22" pos:end="1555:26">dflag</name> <operator pos:start="1555:28" pos:end="1555:28">+</operator> <name pos:start="1555:30" pos:end="1555:36">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="1557:13" pos:end="1557:48"><expr pos:start="1557:13" pos:end="1557:47"><name pos:start="1557:13" pos:end="1557:17">modrm</name> <operator pos:start="1557:19" pos:end="1557:19">=</operator> <call pos:start="1557:21" pos:end="1557:47"><name pos:start="1557:21" pos:end="1557:33">cpu_ldub_code</name><argument_list pos:start="1557:34" pos:end="1557:47">(<argument pos:start="1557:35" pos:end="1557:37"><expr pos:start="1557:35" pos:end="1557:37"><name pos:start="1557:35" pos:end="1557:37">env</name></expr></argument>, <argument pos:start="1557:40" pos:end="1557:46"><expr pos:start="1557:40" pos:end="1557:46"><name pos:start="1557:40" pos:end="1557:44"><name pos:start="1557:40" pos:end="1557:40">s</name><operator pos:start="1557:41" pos:end="1557:42">-&gt;</operator><name pos:start="1557:43" pos:end="1557:44">pc</name></name><operator pos:start="1557:45" pos:end="1557:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1559:13" pos:end="1559:45"><expr pos:start="1559:13" pos:end="1559:44"><name pos:start="1559:13" pos:end="1559:15">reg</name> <operator pos:start="1559:17" pos:end="1559:17">=</operator> <operator pos:start="1559:19" pos:end="1559:19">(</operator><operator pos:start="1559:20" pos:end="1559:20">(</operator><name pos:start="1559:21" pos:end="1559:25">modrm</name> <operator pos:start="1559:27" pos:end="1559:28">&gt;&gt;</operator> <literal type="number" pos:start="1559:30" pos:end="1559:30">3</literal><operator pos:start="1559:31" pos:end="1559:31">)</operator> <operator pos:start="1559:33" pos:end="1559:33">&amp;</operator> <literal type="number" pos:start="1559:35" pos:end="1559:35">7</literal><operator pos:start="1559:36" pos:end="1559:36">)</operator> <operator pos:start="1559:38" pos:end="1559:38">|</operator> <name pos:start="1559:40" pos:end="1559:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1561:13" pos:end="1561:35"><expr pos:start="1561:13" pos:end="1561:34"><name pos:start="1561:13" pos:end="1561:15">mod</name> <operator pos:start="1561:17" pos:end="1561:17">=</operator> <operator pos:start="1561:19" pos:end="1561:19">(</operator><name pos:start="1561:20" pos:end="1561:24">modrm</name> <operator pos:start="1561:26" pos:end="1561:27">&gt;&gt;</operator> <literal type="number" pos:start="1561:29" pos:end="1561:29">6</literal><operator pos:start="1561:30" pos:end="1561:30">)</operator> <operator pos:start="1561:32" pos:end="1561:32">&amp;</operator> <literal type="number" pos:start="1561:34" pos:end="1561:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1563:13" pos:end="1563:38"><expr pos:start="1563:13" pos:end="1563:37"><name pos:start="1563:13" pos:end="1563:14">t0</name> <operator pos:start="1563:16" pos:end="1563:16">=</operator> <call pos:start="1563:18" pos:end="1563:37"><name pos:start="1563:18" pos:end="1563:35">tcg_temp_local_new</name><argument_list pos:start="1563:36" pos:end="1563:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1565:13" pos:end="1565:38"><expr pos:start="1565:13" pos:end="1565:37"><name pos:start="1565:13" pos:end="1565:14">t1</name> <operator pos:start="1565:16" pos:end="1565:16">=</operator> <call pos:start="1565:18" pos:end="1565:37"><name pos:start="1565:18" pos:end="1565:35">tcg_temp_local_new</name><argument_list pos:start="1565:36" pos:end="1565:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1567:13" pos:end="1567:38"><expr pos:start="1567:13" pos:end="1567:37"><name pos:start="1567:13" pos:end="1567:14">t2</name> <operator pos:start="1567:16" pos:end="1567:16">=</operator> <call pos:start="1567:18" pos:end="1567:37"><name pos:start="1567:18" pos:end="1567:35">tcg_temp_local_new</name><argument_list pos:start="1567:36" pos:end="1567:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1569:13" pos:end="1569:38"><expr pos:start="1569:13" pos:end="1569:37"><name pos:start="1569:13" pos:end="1569:14">a0</name> <operator pos:start="1569:16" pos:end="1569:16">=</operator> <call pos:start="1569:18" pos:end="1569:37"><name pos:start="1569:18" pos:end="1569:35">tcg_temp_local_new</name><argument_list pos:start="1569:36" pos:end="1569:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1571:13" pos:end="1571:42"><expr pos:start="1571:13" pos:end="1571:41"><call pos:start="1571:13" pos:end="1571:41"><name pos:start="1571:13" pos:end="1571:28">gen_op_mov_v_reg</name><argument_list pos:start="1571:29" pos:end="1571:41">(<argument pos:start="1571:30" pos:end="1571:31"><expr pos:start="1571:30" pos:end="1571:31"><name pos:start="1571:30" pos:end="1571:31">ot</name></expr></argument>, <argument pos:start="1571:34" pos:end="1571:35"><expr pos:start="1571:34" pos:end="1571:35"><name pos:start="1571:34" pos:end="1571:35">t1</name></expr></argument>, <argument pos:start="1571:38" pos:end="1571:40"><expr pos:start="1571:38" pos:end="1571:40"><name pos:start="1571:38" pos:end="1571:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1573:13" pos:end="1589:13"><if pos:start="1573:13" pos:end="1579:13">if <condition pos:start="1573:16" pos:end="1573:25">(<expr pos:start="1573:17" pos:end="1573:24"><name pos:start="1573:17" pos:end="1573:19">mod</name> <operator pos:start="1573:21" pos:end="1573:22">==</operator> <literal type="number" pos:start="1573:24" pos:end="1573:24">3</literal></expr>)</condition> <block pos:start="1573:27" pos:end="1579:13">{<block_content pos:start="1575:17" pos:end="1577:45">

                <expr_stmt pos:start="1575:17" pos:end="1575:44"><expr pos:start="1575:17" pos:end="1575:43"><name pos:start="1575:17" pos:end="1575:18">rm</name> <operator pos:start="1575:20" pos:end="1575:20">=</operator> <operator pos:start="1575:22" pos:end="1575:22">(</operator><name pos:start="1575:23" pos:end="1575:27">modrm</name> <operator pos:start="1575:29" pos:end="1575:29">&amp;</operator> <literal type="number" pos:start="1575:31" pos:end="1575:31">7</literal><operator pos:start="1575:32" pos:end="1575:32">)</operator> <operator pos:start="1575:34" pos:end="1575:34">|</operator> <call pos:start="1575:36" pos:end="1575:43"><name pos:start="1575:36" pos:end="1575:40">REX_B</name><argument_list pos:start="1575:41" pos:end="1575:43">(<argument pos:start="1575:42" pos:end="1575:42"><expr pos:start="1575:42" pos:end="1575:42"><name pos:start="1575:42" pos:end="1575:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1577:17" pos:end="1577:45"><expr pos:start="1577:17" pos:end="1577:44"><call pos:start="1577:17" pos:end="1577:44"><name pos:start="1577:17" pos:end="1577:32">gen_op_mov_v_reg</name><argument_list pos:start="1577:33" pos:end="1577:44">(<argument pos:start="1577:34" pos:end="1577:35"><expr pos:start="1577:34" pos:end="1577:35"><name pos:start="1577:34" pos:end="1577:35">ot</name></expr></argument>, <argument pos:start="1577:38" pos:end="1577:39"><expr pos:start="1577:38" pos:end="1577:39"><name pos:start="1577:38" pos:end="1577:39">t0</name></expr></argument>, <argument pos:start="1577:42" pos:end="1577:43"><expr pos:start="1577:42" pos:end="1577:43"><name pos:start="1577:42" pos:end="1577:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1579:15" pos:end="1589:13">else <block pos:start="1579:20" pos:end="1589:13">{<block_content pos:start="1581:17" pos:end="1587:23">

                <expr_stmt pos:start="1581:17" pos:end="1581:70"><expr pos:start="1581:17" pos:end="1581:69"><call pos:start="1581:17" pos:end="1581:69"><name pos:start="1581:17" pos:end="1581:29">gen_lea_modrm</name><argument_list pos:start="1581:30" pos:end="1581:69">(<argument pos:start="1581:31" pos:end="1581:33"><expr pos:start="1581:31" pos:end="1581:33"><name pos:start="1581:31" pos:end="1581:33">env</name></expr></argument>, <argument pos:start="1581:36" pos:end="1581:36"><expr pos:start="1581:36" pos:end="1581:36"><name pos:start="1581:36" pos:end="1581:36">s</name></expr></argument>, <argument pos:start="1581:39" pos:end="1581:43"><expr pos:start="1581:39" pos:end="1581:43"><name pos:start="1581:39" pos:end="1581:43">modrm</name></expr></argument>, <argument pos:start="1581:46" pos:end="1581:54"><expr pos:start="1581:46" pos:end="1581:54"><operator pos:start="1581:46" pos:end="1581:46">&amp;</operator><name pos:start="1581:47" pos:end="1581:54">reg_addr</name></expr></argument>, <argument pos:start="1581:57" pos:end="1581:68"><expr pos:start="1581:57" pos:end="1581:68"><operator pos:start="1581:57" pos:end="1581:57">&amp;</operator><name pos:start="1581:58" pos:end="1581:68">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1583:17" pos:end="1583:43"><expr pos:start="1583:17" pos:end="1583:42"><call pos:start="1583:17" pos:end="1583:42"><name pos:start="1583:17" pos:end="1583:30">tcg_gen_mov_tl</name><argument_list pos:start="1583:31" pos:end="1583:42">(<argument pos:start="1583:32" pos:end="1583:33"><expr pos:start="1583:32" pos:end="1583:33"><name pos:start="1583:32" pos:end="1583:33">a0</name></expr></argument>, <argument pos:start="1583:36" pos:end="1583:41"><expr pos:start="1583:36" pos:end="1583:41"><name pos:start="1583:36" pos:end="1583:41">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1585:17" pos:end="1585:55"><expr pos:start="1585:17" pos:end="1585:54"><call pos:start="1585:17" pos:end="1585:54"><name pos:start="1585:17" pos:end="1585:27">gen_op_ld_v</name><argument_list pos:start="1585:28" pos:end="1585:54">(<argument pos:start="1585:29" pos:end="1585:45"><expr pos:start="1585:29" pos:end="1585:45"><name pos:start="1585:29" pos:end="1585:30">ot</name> <operator pos:start="1585:32" pos:end="1585:32">+</operator> <name pos:start="1585:34" pos:end="1585:45"><name pos:start="1585:34" pos:end="1585:34">s</name><operator pos:start="1585:35" pos:end="1585:36">-&gt;</operator><name pos:start="1585:37" pos:end="1585:45">mem_index</name></name></expr></argument>, <argument pos:start="1585:48" pos:end="1585:49"><expr pos:start="1585:48" pos:end="1585:49"><name pos:start="1585:48" pos:end="1585:49">t0</name></expr></argument>, <argument pos:start="1585:52" pos:end="1585:53"><expr pos:start="1585:52" pos:end="1585:53"><name pos:start="1585:52" pos:end="1585:53">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1587:17" pos:end="1587:23"><expr pos:start="1587:17" pos:end="1587:22"><name pos:start="1587:17" pos:end="1587:18">rm</name> <operator pos:start="1587:20" pos:end="1587:20">=</operator> <literal type="number" pos:start="1587:22" pos:end="1587:22">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="1587:25" pos:end="1587:43">/* avoid warning */</comment>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1591:13" pos:end="1591:37"><expr pos:start="1591:13" pos:end="1591:36"><name pos:start="1591:13" pos:end="1591:18">label1</name> <operator pos:start="1591:20" pos:end="1591:20">=</operator> <call pos:start="1591:22" pos:end="1591:36"><name pos:start="1591:22" pos:end="1591:34">gen_new_label</name><argument_list pos:start="1591:35" pos:end="1591:36">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1593:13" pos:end="1593:52"><expr pos:start="1593:13" pos:end="1593:51"><call pos:start="1593:13" pos:end="1593:51"><name pos:start="1593:13" pos:end="1593:26">tcg_gen_sub_tl</name><argument_list pos:start="1593:27" pos:end="1593:51">(<argument pos:start="1593:28" pos:end="1593:29"><expr pos:start="1593:28" pos:end="1593:29"><name pos:start="1593:28" pos:end="1593:29">t2</name></expr></argument>, <argument pos:start="1593:32" pos:end="1593:46"><expr pos:start="1593:32" pos:end="1593:46"><name pos:start="1593:32" pos:end="1593:46"><name pos:start="1593:32" pos:end="1593:39">cpu_regs</name><index pos:start="1593:40" pos:end="1593:46">[<expr pos:start="1593:41" pos:end="1593:45"><name pos:start="1593:41" pos:end="1593:45">R_EAX</name></expr>]</index></name></expr></argument>, <argument pos:start="1593:49" pos:end="1593:50"><expr pos:start="1593:49" pos:end="1593:50"><name pos:start="1593:49" pos:end="1593:50">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1595:13" pos:end="1595:29"><expr pos:start="1595:13" pos:end="1595:28"><call pos:start="1595:13" pos:end="1595:28"><name pos:start="1595:13" pos:end="1595:20">gen_extu</name><argument_list pos:start="1595:21" pos:end="1595:28">(<argument pos:start="1595:22" pos:end="1595:23"><expr pos:start="1595:22" pos:end="1595:23"><name pos:start="1595:22" pos:end="1595:23">ot</name></expr></argument>, <argument pos:start="1595:26" pos:end="1595:27"><expr pos:start="1595:26" pos:end="1595:27"><name pos:start="1595:26" pos:end="1595:27">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1597:13" pos:end="1597:59"><expr pos:start="1597:13" pos:end="1597:58"><call pos:start="1597:13" pos:end="1597:58"><name pos:start="1597:13" pos:end="1597:30">tcg_gen_brcondi_tl</name><argument_list pos:start="1597:31" pos:end="1597:58">(<argument pos:start="1597:32" pos:end="1597:42"><expr pos:start="1597:32" pos:end="1597:42"><name pos:start="1597:32" pos:end="1597:42">TCG_COND_EQ</name></expr></argument>, <argument pos:start="1597:45" pos:end="1597:46"><expr pos:start="1597:45" pos:end="1597:46"><name pos:start="1597:45" pos:end="1597:46">t2</name></expr></argument>, <argument pos:start="1597:49" pos:end="1597:49"><expr pos:start="1597:49" pos:end="1597:49"><literal type="number" pos:start="1597:49" pos:end="1597:49">0</literal></expr></argument>, <argument pos:start="1597:52" pos:end="1597:57"><expr pos:start="1597:52" pos:end="1597:57"><name pos:start="1597:52" pos:end="1597:57">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1599:13" pos:end="1599:37"><expr pos:start="1599:13" pos:end="1599:36"><name pos:start="1599:13" pos:end="1599:18">label2</name> <operator pos:start="1599:20" pos:end="1599:20">=</operator> <call pos:start="1599:22" pos:end="1599:36"><name pos:start="1599:22" pos:end="1599:34">gen_new_label</name><argument_list pos:start="1599:35" pos:end="1599:36">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1601:13" pos:end="1629:13"><if pos:start="1601:13" pos:end="1611:13">if <condition pos:start="1601:16" pos:end="1601:25">(<expr pos:start="1601:17" pos:end="1601:24"><name pos:start="1601:17" pos:end="1601:19">mod</name> <operator pos:start="1601:21" pos:end="1601:22">==</operator> <literal type="number" pos:start="1601:24" pos:end="1601:24">3</literal></expr>)</condition> <block pos:start="1601:27" pos:end="1611:13">{<block_content pos:start="1603:17" pos:end="1609:45">

                <expr_stmt pos:start="1603:17" pos:end="1603:48"><expr pos:start="1603:17" pos:end="1603:47"><call pos:start="1603:17" pos:end="1603:47"><name pos:start="1603:17" pos:end="1603:32">gen_op_mov_reg_v</name><argument_list pos:start="1603:33" pos:end="1603:47">(<argument pos:start="1603:34" pos:end="1603:35"><expr pos:start="1603:34" pos:end="1603:35"><name pos:start="1603:34" pos:end="1603:35">ot</name></expr></argument>, <argument pos:start="1603:38" pos:end="1603:42"><expr pos:start="1603:38" pos:end="1603:42"><name pos:start="1603:38" pos:end="1603:42">R_EAX</name></expr></argument>, <argument pos:start="1603:45" pos:end="1603:46"><expr pos:start="1603:45" pos:end="1603:46"><name pos:start="1603:45" pos:end="1603:46">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1605:17" pos:end="1605:35"><expr pos:start="1605:17" pos:end="1605:34"><call pos:start="1605:17" pos:end="1605:34"><name pos:start="1605:17" pos:end="1605:26">tcg_gen_br</name><argument_list pos:start="1605:27" pos:end="1605:34">(<argument pos:start="1605:28" pos:end="1605:33"><expr pos:start="1605:28" pos:end="1605:33"><name pos:start="1605:28" pos:end="1605:33">label2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1607:17" pos:end="1607:38"><expr pos:start="1607:17" pos:end="1607:37"><call pos:start="1607:17" pos:end="1607:37"><name pos:start="1607:17" pos:end="1607:29">gen_set_label</name><argument_list pos:start="1607:30" pos:end="1607:37">(<argument pos:start="1607:31" pos:end="1607:36"><expr pos:start="1607:31" pos:end="1607:36"><name pos:start="1607:31" pos:end="1607:36">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1609:17" pos:end="1609:45"><expr pos:start="1609:17" pos:end="1609:44"><call pos:start="1609:17" pos:end="1609:44"><name pos:start="1609:17" pos:end="1609:32">gen_op_mov_reg_v</name><argument_list pos:start="1609:33" pos:end="1609:44">(<argument pos:start="1609:34" pos:end="1609:35"><expr pos:start="1609:34" pos:end="1609:35"><name pos:start="1609:34" pos:end="1609:35">ot</name></expr></argument>, <argument pos:start="1609:38" pos:end="1609:39"><expr pos:start="1609:38" pos:end="1609:39"><name pos:start="1609:38" pos:end="1609:39">rm</name></expr></argument>, <argument pos:start="1609:42" pos:end="1609:43"><expr pos:start="1609:42" pos:end="1609:43"><name pos:start="1609:42" pos:end="1609:43">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1611:15" pos:end="1629:13">else <block pos:start="1611:20" pos:end="1629:13">{<block_content pos:start="1619:17" pos:end="1627:55">

                <comment type="block" pos:start="1613:17" pos:end="1617:71">/* perform no-op store cycle like physical cpu; must be

                   before changing accumulator to ensure idempotency if

                   the store faults and the instruction is restarted */</comment>

                <expr_stmt pos:start="1619:17" pos:end="1619:55"><expr pos:start="1619:17" pos:end="1619:54"><call pos:start="1619:17" pos:end="1619:54"><name pos:start="1619:17" pos:end="1619:27">gen_op_st_v</name><argument_list pos:start="1619:28" pos:end="1619:54">(<argument pos:start="1619:29" pos:end="1619:45"><expr pos:start="1619:29" pos:end="1619:45"><name pos:start="1619:29" pos:end="1619:30">ot</name> <operator pos:start="1619:32" pos:end="1619:32">+</operator> <name pos:start="1619:34" pos:end="1619:45"><name pos:start="1619:34" pos:end="1619:34">s</name><operator pos:start="1619:35" pos:end="1619:36">-&gt;</operator><name pos:start="1619:37" pos:end="1619:45">mem_index</name></name></expr></argument>, <argument pos:start="1619:48" pos:end="1619:49"><expr pos:start="1619:48" pos:end="1619:49"><name pos:start="1619:48" pos:end="1619:49">t0</name></expr></argument>, <argument pos:start="1619:52" pos:end="1619:53"><expr pos:start="1619:52" pos:end="1619:53"><name pos:start="1619:52" pos:end="1619:53">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1621:17" pos:end="1621:48"><expr pos:start="1621:17" pos:end="1621:47"><call pos:start="1621:17" pos:end="1621:47"><name pos:start="1621:17" pos:end="1621:32">gen_op_mov_reg_v</name><argument_list pos:start="1621:33" pos:end="1621:47">(<argument pos:start="1621:34" pos:end="1621:35"><expr pos:start="1621:34" pos:end="1621:35"><name pos:start="1621:34" pos:end="1621:35">ot</name></expr></argument>, <argument pos:start="1621:38" pos:end="1621:42"><expr pos:start="1621:38" pos:end="1621:42"><name pos:start="1621:38" pos:end="1621:42">R_EAX</name></expr></argument>, <argument pos:start="1621:45" pos:end="1621:46"><expr pos:start="1621:45" pos:end="1621:46"><name pos:start="1621:45" pos:end="1621:46">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1623:17" pos:end="1623:35"><expr pos:start="1623:17" pos:end="1623:34"><call pos:start="1623:17" pos:end="1623:34"><name pos:start="1623:17" pos:end="1623:26">tcg_gen_br</name><argument_list pos:start="1623:27" pos:end="1623:34">(<argument pos:start="1623:28" pos:end="1623:33"><expr pos:start="1623:28" pos:end="1623:33"><name pos:start="1623:28" pos:end="1623:33">label2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1625:17" pos:end="1625:38"><expr pos:start="1625:17" pos:end="1625:37"><call pos:start="1625:17" pos:end="1625:37"><name pos:start="1625:17" pos:end="1625:29">gen_set_label</name><argument_list pos:start="1625:30" pos:end="1625:37">(<argument pos:start="1625:31" pos:end="1625:36"><expr pos:start="1625:31" pos:end="1625:36"><name pos:start="1625:31" pos:end="1625:36">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1627:17" pos:end="1627:55"><expr pos:start="1627:17" pos:end="1627:54"><call pos:start="1627:17" pos:end="1627:54"><name pos:start="1627:17" pos:end="1627:27">gen_op_st_v</name><argument_list pos:start="1627:28" pos:end="1627:54">(<argument pos:start="1627:29" pos:end="1627:45"><expr pos:start="1627:29" pos:end="1627:45"><name pos:start="1627:29" pos:end="1627:30">ot</name> <operator pos:start="1627:32" pos:end="1627:32">+</operator> <name pos:start="1627:34" pos:end="1627:45"><name pos:start="1627:34" pos:end="1627:34">s</name><operator pos:start="1627:35" pos:end="1627:36">-&gt;</operator><name pos:start="1627:37" pos:end="1627:45">mem_index</name></name></expr></argument>, <argument pos:start="1627:48" pos:end="1627:49"><expr pos:start="1627:48" pos:end="1627:49"><name pos:start="1627:48" pos:end="1627:49">t1</name></expr></argument>, <argument pos:start="1627:52" pos:end="1627:53"><expr pos:start="1627:52" pos:end="1627:53"><name pos:start="1627:52" pos:end="1627:53">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1631:13" pos:end="1631:34"><expr pos:start="1631:13" pos:end="1631:33"><call pos:start="1631:13" pos:end="1631:33"><name pos:start="1631:13" pos:end="1631:25">gen_set_label</name><argument_list pos:start="1631:26" pos:end="1631:33">(<argument pos:start="1631:27" pos:end="1631:32"><expr pos:start="1631:27" pos:end="1631:32"><name pos:start="1631:27" pos:end="1631:32">label2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1633:13" pos:end="1633:43"><expr pos:start="1633:13" pos:end="1633:42"><call pos:start="1633:13" pos:end="1633:42"><name pos:start="1633:13" pos:end="1633:26">tcg_gen_mov_tl</name><argument_list pos:start="1633:27" pos:end="1633:42">(<argument pos:start="1633:28" pos:end="1633:37"><expr pos:start="1633:28" pos:end="1633:37"><name pos:start="1633:28" pos:end="1633:37">cpu_cc_src</name></expr></argument>, <argument pos:start="1633:40" pos:end="1633:41"><expr pos:start="1633:40" pos:end="1633:41"><name pos:start="1633:40" pos:end="1633:41">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1635:13" pos:end="1635:43"><expr pos:start="1635:13" pos:end="1635:42"><call pos:start="1635:13" pos:end="1635:42"><name pos:start="1635:13" pos:end="1635:26">tcg_gen_mov_tl</name><argument_list pos:start="1635:27" pos:end="1635:42">(<argument pos:start="1635:28" pos:end="1635:37"><expr pos:start="1635:28" pos:end="1635:37"><name pos:start="1635:28" pos:end="1635:37">cpu_cc_dst</name></expr></argument>, <argument pos:start="1635:40" pos:end="1635:41"><expr pos:start="1635:40" pos:end="1635:41"><name pos:start="1635:40" pos:end="1635:41">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1637:13" pos:end="1637:39"><expr pos:start="1637:13" pos:end="1637:38"><name pos:start="1637:13" pos:end="1637:20"><name pos:start="1637:13" pos:end="1637:13">s</name><operator pos:start="1637:14" pos:end="1637:15">-&gt;</operator><name pos:start="1637:16" pos:end="1637:20">cc_op</name></name> <operator pos:start="1637:22" pos:end="1637:22">=</operator> <name pos:start="1637:24" pos:end="1637:33">CC_OP_SUBB</name> <operator pos:start="1637:35" pos:end="1637:35">+</operator> <name pos:start="1637:37" pos:end="1637:38">ot</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1639:13" pos:end="1639:30"><expr pos:start="1639:13" pos:end="1639:29"><call pos:start="1639:13" pos:end="1639:29"><name pos:start="1639:13" pos:end="1639:25">tcg_temp_free</name><argument_list pos:start="1639:26" pos:end="1639:29">(<argument pos:start="1639:27" pos:end="1639:28"><expr pos:start="1639:27" pos:end="1639:28"><name pos:start="1639:27" pos:end="1639:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1641:13" pos:end="1641:30"><expr pos:start="1641:13" pos:end="1641:29"><call pos:start="1641:13" pos:end="1641:29"><name pos:start="1641:13" pos:end="1641:25">tcg_temp_free</name><argument_list pos:start="1641:26" pos:end="1641:29">(<argument pos:start="1641:27" pos:end="1641:28"><expr pos:start="1641:27" pos:end="1641:28"><name pos:start="1641:27" pos:end="1641:28">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1643:13" pos:end="1643:30"><expr pos:start="1643:13" pos:end="1643:29"><call pos:start="1643:13" pos:end="1643:29"><name pos:start="1643:13" pos:end="1643:25">tcg_temp_free</name><argument_list pos:start="1643:26" pos:end="1643:29">(<argument pos:start="1643:27" pos:end="1643:28"><expr pos:start="1643:27" pos:end="1643:28"><name pos:start="1643:27" pos:end="1643:28">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1645:13" pos:end="1645:30"><expr pos:start="1645:13" pos:end="1645:29"><call pos:start="1645:13" pos:end="1645:29"><name pos:start="1645:13" pos:end="1645:25">tcg_temp_free</name><argument_list pos:start="1645:26" pos:end="1645:29">(<argument pos:start="1645:27" pos:end="1645:28"><expr pos:start="1645:27" pos:end="1645:28"><name pos:start="1645:27" pos:end="1645:28">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="1649:9" pos:end="1649:14">break;</break>

    <case pos:start="1651:5" pos:end="1651:15">case <expr pos:start="1651:10" pos:end="1651:14"><literal type="number" pos:start="1651:10" pos:end="1651:14">0x1c7</literal></expr>:</case> <comment type="block" pos:start="1651:17" pos:end="1651:31">/* cmpxchg8b */</comment>

        <expr_stmt pos:start="1653:9" pos:end="1653:44"><expr pos:start="1653:9" pos:end="1653:43"><name pos:start="1653:9" pos:end="1653:13">modrm</name> <operator pos:start="1653:15" pos:end="1653:15">=</operator> <call pos:start="1653:17" pos:end="1653:43"><name pos:start="1653:17" pos:end="1653:29">cpu_ldub_code</name><argument_list pos:start="1653:30" pos:end="1653:43">(<argument pos:start="1653:31" pos:end="1653:33"><expr pos:start="1653:31" pos:end="1653:33"><name pos:start="1653:31" pos:end="1653:33">env</name></expr></argument>, <argument pos:start="1653:36" pos:end="1653:42"><expr pos:start="1653:36" pos:end="1653:42"><name pos:start="1653:36" pos:end="1653:40"><name pos:start="1653:36" pos:end="1653:36">s</name><operator pos:start="1653:37" pos:end="1653:38">-&gt;</operator><name pos:start="1653:39" pos:end="1653:40">pc</name></name><operator pos:start="1653:41" pos:end="1653:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1655:9" pos:end="1655:31"><expr pos:start="1655:9" pos:end="1655:30"><name pos:start="1655:9" pos:end="1655:11">mod</name> <operator pos:start="1655:13" pos:end="1655:13">=</operator> <operator pos:start="1655:15" pos:end="1655:15">(</operator><name pos:start="1655:16" pos:end="1655:20">modrm</name> <operator pos:start="1655:22" pos:end="1655:23">&gt;&gt;</operator> <literal type="number" pos:start="1655:25" pos:end="1655:25">6</literal><operator pos:start="1655:26" pos:end="1655:26">)</operator> <operator pos:start="1655:28" pos:end="1655:28">&amp;</operator> <literal type="number" pos:start="1655:30" pos:end="1655:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1657:9" pos:end="1662:0"><if pos:start="1657:9" pos:end="1662:0">if <condition pos:start="1657:12" pos:end="1657:50">(<expr pos:start="1657:13" pos:end="1657:49"><operator pos:start="1657:13" pos:end="1657:13">(</operator><name pos:start="1657:14" pos:end="1657:16">mod</name> <operator pos:start="1657:18" pos:end="1657:19">==</operator> <literal type="number" pos:start="1657:21" pos:end="1657:21">3</literal><operator pos:start="1657:22" pos:end="1657:22">)</operator> <operator pos:start="1657:24" pos:end="1657:25">||</operator> <operator pos:start="1657:27" pos:end="1657:27">(</operator><operator pos:start="1657:28" pos:end="1657:28">(</operator><name pos:start="1657:29" pos:end="1657:33">modrm</name> <operator pos:start="1657:35" pos:end="1657:35">&amp;</operator> <literal type="number" pos:start="1657:37" pos:end="1657:40">0x38</literal><operator pos:start="1657:41" pos:end="1657:41">)</operator> <operator pos:start="1657:43" pos:end="1657:44">!=</operator> <literal type="number" pos:start="1657:46" pos:end="1657:48">0x8</literal><operator pos:start="1657:49" pos:end="1657:49">)</operator></expr>)</condition><block type="pseudo" pos:start="1659:13" pos:end="1662:0"><block_content pos:start="1659:13" pos:end="1662:0">

            <goto pos:start="1659:13" pos:end="1662:0">goto <name pos:start="1659:18" pos:end="1659:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="1661:1" pos:end="1661:20">#<cpp:directive pos:start="1661:2" pos:end="1661:6">ifdef</cpp:directive> <name pos:start="1661:8" pos:end="1661:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="1663:9" pos:end="1699:9"><if pos:start="1663:9" pos:end="1679:9">if <condition pos:start="1663:12" pos:end="1663:23">(<expr pos:start="1663:13" pos:end="1663:22"><name pos:start="1663:13" pos:end="1663:17">dflag</name> <operator pos:start="1663:19" pos:end="1663:20">==</operator> <literal type="number" pos:start="1663:22" pos:end="1663:22">2</literal></expr>)</condition> <block pos:start="1663:25" pos:end="1679:9">{<block_content pos:start="1665:13" pos:end="1677:51">

            <if_stmt pos:start="1665:13" pos:end="1667:32"><if pos:start="1665:13" pos:end="1667:32">if <condition pos:start="1665:16" pos:end="1665:58">(<expr pos:start="1665:17" pos:end="1665:57"><operator pos:start="1665:17" pos:end="1665:17">!</operator><operator pos:start="1665:18" pos:end="1665:18">(</operator><name pos:start="1665:19" pos:end="1665:39"><name pos:start="1665:19" pos:end="1665:19">s</name><operator pos:start="1665:20" pos:end="1665:21">-&gt;</operator><name pos:start="1665:22" pos:end="1665:39">cpuid_ext_features</name></name> <operator pos:start="1665:41" pos:end="1665:41">&amp;</operator> <name pos:start="1665:43" pos:end="1665:56">CPUID_EXT_CX16</name><operator pos:start="1665:57" pos:end="1665:57">)</operator></expr>)</condition><block type="pseudo" pos:start="1667:17" pos:end="1667:32"><block_content pos:start="1667:17" pos:end="1667:32">

                <goto pos:start="1667:17" pos:end="1667:32">goto <name pos:start="1667:22" pos:end="1667:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1669:13" pos:end="1669:46"><expr pos:start="1669:13" pos:end="1669:45"><call pos:start="1669:13" pos:end="1669:45"><name pos:start="1669:13" pos:end="1669:22">gen_jmp_im</name><argument_list pos:start="1669:23" pos:end="1669:45">(<argument pos:start="1669:24" pos:end="1669:44"><expr pos:start="1669:24" pos:end="1669:44"><name pos:start="1669:24" pos:end="1669:31">pc_start</name> <operator pos:start="1669:33" pos:end="1669:33">-</operator> <name pos:start="1669:35" pos:end="1669:44"><name pos:start="1669:35" pos:end="1669:35">s</name><operator pos:start="1669:36" pos:end="1669:37">-&gt;</operator><name pos:start="1669:38" pos:end="1669:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1671:13" pos:end="1673:43"><if pos:start="1671:13" pos:end="1673:43">if <condition pos:start="1671:16" pos:end="1671:42">(<expr pos:start="1671:17" pos:end="1671:41"><name pos:start="1671:17" pos:end="1671:24"><name pos:start="1671:17" pos:end="1671:17">s</name><operator pos:start="1671:18" pos:end="1671:19">-&gt;</operator><name pos:start="1671:20" pos:end="1671:24">cc_op</name></name> <operator pos:start="1671:26" pos:end="1671:27">!=</operator> <name pos:start="1671:29" pos:end="1671:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="1673:17" pos:end="1673:43"><block_content pos:start="1673:17" pos:end="1673:43">

                <expr_stmt pos:start="1673:17" pos:end="1673:43"><expr pos:start="1673:17" pos:end="1673:42"><call pos:start="1673:17" pos:end="1673:42"><name pos:start="1673:17" pos:end="1673:32">gen_op_set_cc_op</name><argument_list pos:start="1673:33" pos:end="1673:42">(<argument pos:start="1673:34" pos:end="1673:41"><expr pos:start="1673:34" pos:end="1673:41"><name pos:start="1673:34" pos:end="1673:41"><name pos:start="1673:34" pos:end="1673:34">s</name><operator pos:start="1673:35" pos:end="1673:36">-&gt;</operator><name pos:start="1673:37" pos:end="1673:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1675:13" pos:end="1675:66"><expr pos:start="1675:13" pos:end="1675:65"><call pos:start="1675:13" pos:end="1675:65"><name pos:start="1675:13" pos:end="1675:25">gen_lea_modrm</name><argument_list pos:start="1675:26" pos:end="1675:65">(<argument pos:start="1675:27" pos:end="1675:29"><expr pos:start="1675:27" pos:end="1675:29"><name pos:start="1675:27" pos:end="1675:29">env</name></expr></argument>, <argument pos:start="1675:32" pos:end="1675:32"><expr pos:start="1675:32" pos:end="1675:32"><name pos:start="1675:32" pos:end="1675:32">s</name></expr></argument>, <argument pos:start="1675:35" pos:end="1675:39"><expr pos:start="1675:35" pos:end="1675:39"><name pos:start="1675:35" pos:end="1675:39">modrm</name></expr></argument>, <argument pos:start="1675:42" pos:end="1675:50"><expr pos:start="1675:42" pos:end="1675:50"><operator pos:start="1675:42" pos:end="1675:42">&amp;</operator><name pos:start="1675:43" pos:end="1675:50">reg_addr</name></expr></argument>, <argument pos:start="1675:53" pos:end="1675:64"><expr pos:start="1675:53" pos:end="1675:64"><operator pos:start="1675:53" pos:end="1675:53">&amp;</operator><name pos:start="1675:54" pos:end="1675:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1677:13" pos:end="1677:51"><expr pos:start="1677:13" pos:end="1677:50"><call pos:start="1677:13" pos:end="1677:50"><name pos:start="1677:13" pos:end="1677:33">gen_helper_cmpxchg16b</name><argument_list pos:start="1677:34" pos:end="1677:50">(<argument pos:start="1677:35" pos:end="1677:41"><expr pos:start="1677:35" pos:end="1677:41"><name pos:start="1677:35" pos:end="1677:41">cpu_env</name></expr></argument>, <argument pos:start="1677:44" pos:end="1677:49"><expr pos:start="1677:44" pos:end="1677:49"><name pos:start="1677:44" pos:end="1677:49">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1679:11" pos:end="1699:9">else

<cpp:endif pos:start="1681:1" pos:end="1681:6">#<cpp:directive pos:start="1681:2" pos:end="1681:6">endif</cpp:directive></cpp:endif>        

        <block pos:start="1683:9" pos:end="1699:9">{<block_content pos:start="1685:13" pos:end="1697:50">

            <if_stmt pos:start="1685:13" pos:end="1687:32"><if pos:start="1685:13" pos:end="1687:32">if <condition pos:start="1685:16" pos:end="1685:49">(<expr pos:start="1685:17" pos:end="1685:48"><operator pos:start="1685:17" pos:end="1685:17">!</operator><operator pos:start="1685:18" pos:end="1685:18">(</operator><name pos:start="1685:19" pos:end="1685:35"><name pos:start="1685:19" pos:end="1685:19">s</name><operator pos:start="1685:20" pos:end="1685:21">-&gt;</operator><name pos:start="1685:22" pos:end="1685:35">cpuid_features</name></name> <operator pos:start="1685:37" pos:end="1685:37">&amp;</operator> <name pos:start="1685:39" pos:end="1685:47">CPUID_CX8</name><operator pos:start="1685:48" pos:end="1685:48">)</operator></expr>)</condition><block type="pseudo" pos:start="1687:17" pos:end="1687:32"><block_content pos:start="1687:17" pos:end="1687:32">

                <goto pos:start="1687:17" pos:end="1687:32">goto <name pos:start="1687:22" pos:end="1687:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1689:13" pos:end="1689:46"><expr pos:start="1689:13" pos:end="1689:45"><call pos:start="1689:13" pos:end="1689:45"><name pos:start="1689:13" pos:end="1689:22">gen_jmp_im</name><argument_list pos:start="1689:23" pos:end="1689:45">(<argument pos:start="1689:24" pos:end="1689:44"><expr pos:start="1689:24" pos:end="1689:44"><name pos:start="1689:24" pos:end="1689:31">pc_start</name> <operator pos:start="1689:33" pos:end="1689:33">-</operator> <name pos:start="1689:35" pos:end="1689:44"><name pos:start="1689:35" pos:end="1689:35">s</name><operator pos:start="1689:36" pos:end="1689:37">-&gt;</operator><name pos:start="1689:38" pos:end="1689:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1691:13" pos:end="1693:43"><if pos:start="1691:13" pos:end="1693:43">if <condition pos:start="1691:16" pos:end="1691:42">(<expr pos:start="1691:17" pos:end="1691:41"><name pos:start="1691:17" pos:end="1691:24"><name pos:start="1691:17" pos:end="1691:17">s</name><operator pos:start="1691:18" pos:end="1691:19">-&gt;</operator><name pos:start="1691:20" pos:end="1691:24">cc_op</name></name> <operator pos:start="1691:26" pos:end="1691:27">!=</operator> <name pos:start="1691:29" pos:end="1691:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="1693:17" pos:end="1693:43"><block_content pos:start="1693:17" pos:end="1693:43">

                <expr_stmt pos:start="1693:17" pos:end="1693:43"><expr pos:start="1693:17" pos:end="1693:42"><call pos:start="1693:17" pos:end="1693:42"><name pos:start="1693:17" pos:end="1693:32">gen_op_set_cc_op</name><argument_list pos:start="1693:33" pos:end="1693:42">(<argument pos:start="1693:34" pos:end="1693:41"><expr pos:start="1693:34" pos:end="1693:41"><name pos:start="1693:34" pos:end="1693:41"><name pos:start="1693:34" pos:end="1693:34">s</name><operator pos:start="1693:35" pos:end="1693:36">-&gt;</operator><name pos:start="1693:37" pos:end="1693:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1695:13" pos:end="1695:66"><expr pos:start="1695:13" pos:end="1695:65"><call pos:start="1695:13" pos:end="1695:65"><name pos:start="1695:13" pos:end="1695:25">gen_lea_modrm</name><argument_list pos:start="1695:26" pos:end="1695:65">(<argument pos:start="1695:27" pos:end="1695:29"><expr pos:start="1695:27" pos:end="1695:29"><name pos:start="1695:27" pos:end="1695:29">env</name></expr></argument>, <argument pos:start="1695:32" pos:end="1695:32"><expr pos:start="1695:32" pos:end="1695:32"><name pos:start="1695:32" pos:end="1695:32">s</name></expr></argument>, <argument pos:start="1695:35" pos:end="1695:39"><expr pos:start="1695:35" pos:end="1695:39"><name pos:start="1695:35" pos:end="1695:39">modrm</name></expr></argument>, <argument pos:start="1695:42" pos:end="1695:50"><expr pos:start="1695:42" pos:end="1695:50"><operator pos:start="1695:42" pos:end="1695:42">&amp;</operator><name pos:start="1695:43" pos:end="1695:50">reg_addr</name></expr></argument>, <argument pos:start="1695:53" pos:end="1695:64"><expr pos:start="1695:53" pos:end="1695:64"><operator pos:start="1695:53" pos:end="1695:53">&amp;</operator><name pos:start="1695:54" pos:end="1695:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1697:13" pos:end="1697:50"><expr pos:start="1697:13" pos:end="1697:49"><call pos:start="1697:13" pos:end="1697:49"><name pos:start="1697:13" pos:end="1697:32">gen_helper_cmpxchg8b</name><argument_list pos:start="1697:33" pos:end="1697:49">(<argument pos:start="1697:34" pos:end="1697:40"><expr pos:start="1697:34" pos:end="1697:40"><name pos:start="1697:34" pos:end="1697:40">cpu_env</name></expr></argument>, <argument pos:start="1697:43" pos:end="1697:48"><expr pos:start="1697:43" pos:end="1697:48"><name pos:start="1697:43" pos:end="1697:48">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1701:9" pos:end="1701:32"><expr pos:start="1701:9" pos:end="1701:31"><name pos:start="1701:9" pos:end="1701:16"><name pos:start="1701:9" pos:end="1701:9">s</name><operator pos:start="1701:10" pos:end="1701:11">-&gt;</operator><name pos:start="1701:12" pos:end="1701:16">cc_op</name></name> <operator pos:start="1701:18" pos:end="1701:18">=</operator> <name pos:start="1701:20" pos:end="1701:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="1703:9" pos:end="1703:14">break;</break>



        <comment type="block" format="doxygen" pos:start="1707:9" pos:end="1707:36">/**************************/</comment>

        <comment type="block" pos:start="1709:9" pos:end="1709:22">/* push/pop */</comment>

    <case pos:start="1711:5" pos:end="1711:23">case <expr pos:start="1711:10" pos:end="1711:22"><literal type="number" pos:start="1711:10" pos:end="1711:13">0x50</literal> <operator pos:start="1711:15" pos:end="1711:17">...</operator> <literal type="number" pos:start="1711:19" pos:end="1711:22">0x57</literal></expr>:</case> <comment type="block" pos:start="1711:25" pos:end="1711:34">/* push */</comment>

        <expr_stmt pos:start="1713:9" pos:end="1713:58"><expr pos:start="1713:9" pos:end="1713:57"><call pos:start="1713:9" pos:end="1713:57"><name pos:start="1713:9" pos:end="1713:25">gen_op_mov_TN_reg</name><argument_list pos:start="1713:26" pos:end="1713:57">(<argument pos:start="1713:27" pos:end="1713:33"><expr pos:start="1713:27" pos:end="1713:33"><name pos:start="1713:27" pos:end="1713:33">OT_LONG</name></expr></argument>, <argument pos:start="1713:36" pos:end="1713:36"><expr pos:start="1713:36" pos:end="1713:36"><literal type="number" pos:start="1713:36" pos:end="1713:36">0</literal></expr></argument>, <argument pos:start="1713:39" pos:end="1713:56"><expr pos:start="1713:39" pos:end="1713:56"><operator pos:start="1713:39" pos:end="1713:39">(</operator><name pos:start="1713:40" pos:end="1713:40">b</name> <operator pos:start="1713:42" pos:end="1713:42">&amp;</operator> <literal type="number" pos:start="1713:44" pos:end="1713:44">7</literal><operator pos:start="1713:45" pos:end="1713:45">)</operator> <operator pos:start="1713:47" pos:end="1713:47">|</operator> <call pos:start="1713:49" pos:end="1713:56"><name pos:start="1713:49" pos:end="1713:53">REX_B</name><argument_list pos:start="1713:54" pos:end="1713:56">(<argument pos:start="1713:55" pos:end="1713:55"><expr pos:start="1713:55" pos:end="1713:55"><name pos:start="1713:55" pos:end="1713:55">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1715:9" pos:end="1715:23"><expr pos:start="1715:9" pos:end="1715:22"><call pos:start="1715:9" pos:end="1715:22"><name pos:start="1715:9" pos:end="1715:19">gen_push_T0</name><argument_list pos:start="1715:20" pos:end="1715:22">(<argument pos:start="1715:21" pos:end="1715:21"><expr pos:start="1715:21" pos:end="1715:21"><name pos:start="1715:21" pos:end="1715:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1717:9" pos:end="1717:14">break;</break>

    <case pos:start="1719:5" pos:end="1719:23">case <expr pos:start="1719:10" pos:end="1719:22"><literal type="number" pos:start="1719:10" pos:end="1719:13">0x58</literal> <operator pos:start="1719:15" pos:end="1719:17">...</operator> <literal type="number" pos:start="1719:19" pos:end="1719:22">0x5f</literal></expr>:</case> <comment type="block" pos:start="1719:25" pos:end="1719:33">/* pop */</comment>

        <if_stmt pos:start="1721:9" pos:end="1729:9"><if pos:start="1721:9" pos:end="1725:9">if <condition pos:start="1721:12" pos:end="1721:22">(<expr pos:start="1721:13" pos:end="1721:21"><call pos:start="1721:13" pos:end="1721:21"><name pos:start="1721:13" pos:end="1721:18">CODE64</name><argument_list pos:start="1721:19" pos:end="1721:21">(<argument pos:start="1721:20" pos:end="1721:20"><expr pos:start="1721:20" pos:end="1721:20"><name pos:start="1721:20" pos:end="1721:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1721:24" pos:end="1725:9">{<block_content pos:start="1723:13" pos:end="1723:43">

            <expr_stmt pos:start="1723:13" pos:end="1723:43"><expr pos:start="1723:13" pos:end="1723:42"><name pos:start="1723:13" pos:end="1723:14">ot</name> <operator pos:start="1723:16" pos:end="1723:16">=</operator> <ternary pos:start="1723:18" pos:end="1723:42"><condition pos:start="1723:18" pos:end="1723:24"><expr pos:start="1723:18" pos:end="1723:22"><name pos:start="1723:18" pos:end="1723:22">dflag</name></expr> ?</condition><then pos:start="1723:26" pos:end="1723:32"> <expr pos:start="1723:26" pos:end="1723:32"><name pos:start="1723:26" pos:end="1723:32">OT_QUAD</name></expr> </then><else pos:start="1723:34" pos:end="1723:42">: <expr pos:start="1723:36" pos:end="1723:42"><name pos:start="1723:36" pos:end="1723:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1725:11" pos:end="1729:9">else <block pos:start="1725:16" pos:end="1729:9">{<block_content pos:start="1727:13" pos:end="1727:33">

            <expr_stmt pos:start="1727:13" pos:end="1727:33"><expr pos:start="1727:13" pos:end="1727:32"><name pos:start="1727:13" pos:end="1727:14">ot</name> <operator pos:start="1727:16" pos:end="1727:16">=</operator> <name pos:start="1727:18" pos:end="1727:22">dflag</name> <operator pos:start="1727:24" pos:end="1727:24">+</operator> <name pos:start="1727:26" pos:end="1727:32">OT_WORD</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1731:9" pos:end="1731:22"><expr pos:start="1731:9" pos:end="1731:21"><call pos:start="1731:9" pos:end="1731:21"><name pos:start="1731:9" pos:end="1731:18">gen_pop_T0</name><argument_list pos:start="1731:19" pos:end="1731:21">(<argument pos:start="1731:20" pos:end="1731:20"><expr pos:start="1731:20" pos:end="1731:20"><name pos:start="1731:20" pos:end="1731:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1733:9" pos:end="1733:50">/* NOTE: order is important for pop %sp */</comment>

        <expr_stmt pos:start="1735:9" pos:end="1735:26"><expr pos:start="1735:9" pos:end="1735:25"><call pos:start="1735:9" pos:end="1735:25"><name pos:start="1735:9" pos:end="1735:22">gen_pop_update</name><argument_list pos:start="1735:23" pos:end="1735:25">(<argument pos:start="1735:24" pos:end="1735:24"><expr pos:start="1735:24" pos:end="1735:24"><name pos:start="1735:24" pos:end="1735:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1737:9" pos:end="1737:50"><expr pos:start="1737:9" pos:end="1737:49"><call pos:start="1737:9" pos:end="1737:49"><name pos:start="1737:9" pos:end="1737:25">gen_op_mov_reg_T0</name><argument_list pos:start="1737:26" pos:end="1737:49">(<argument pos:start="1737:27" pos:end="1737:28"><expr pos:start="1737:27" pos:end="1737:28"><name pos:start="1737:27" pos:end="1737:28">ot</name></expr></argument>, <argument pos:start="1737:31" pos:end="1737:48"><expr pos:start="1737:31" pos:end="1737:48"><operator pos:start="1737:31" pos:end="1737:31">(</operator><name pos:start="1737:32" pos:end="1737:32">b</name> <operator pos:start="1737:34" pos:end="1737:34">&amp;</operator> <literal type="number" pos:start="1737:36" pos:end="1737:36">7</literal><operator pos:start="1737:37" pos:end="1737:37">)</operator> <operator pos:start="1737:39" pos:end="1737:39">|</operator> <call pos:start="1737:41" pos:end="1737:48"><name pos:start="1737:41" pos:end="1737:45">REX_B</name><argument_list pos:start="1737:46" pos:end="1737:48">(<argument pos:start="1737:47" pos:end="1737:47"><expr pos:start="1737:47" pos:end="1737:47"><name pos:start="1737:47" pos:end="1737:47">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1739:9" pos:end="1739:14">break;</break>

    <case pos:start="1741:5" pos:end="1741:14">case <expr pos:start="1741:10" pos:end="1741:13"><literal type="number" pos:start="1741:10" pos:end="1741:13">0x60</literal></expr>:</case> <comment type="block" pos:start="1741:16" pos:end="1741:26">/* pusha */</comment>

        <if_stmt pos:start="1743:9" pos:end="1745:28"><if pos:start="1743:9" pos:end="1745:28">if <condition pos:start="1743:12" pos:end="1743:22">(<expr pos:start="1743:13" pos:end="1743:21"><call pos:start="1743:13" pos:end="1743:21"><name pos:start="1743:13" pos:end="1743:18">CODE64</name><argument_list pos:start="1743:19" pos:end="1743:21">(<argument pos:start="1743:20" pos:end="1743:20"><expr pos:start="1743:20" pos:end="1743:20"><name pos:start="1743:20" pos:end="1743:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1745:13" pos:end="1745:28"><block_content pos:start="1745:13" pos:end="1745:28">

            <goto pos:start="1745:13" pos:end="1745:28">goto <name pos:start="1745:18" pos:end="1745:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1747:9" pos:end="1747:21"><expr pos:start="1747:9" pos:end="1747:20"><call pos:start="1747:9" pos:end="1747:20"><name pos:start="1747:9" pos:end="1747:17">gen_pusha</name><argument_list pos:start="1747:18" pos:end="1747:20">(<argument pos:start="1747:19" pos:end="1747:19"><expr pos:start="1747:19" pos:end="1747:19"><name pos:start="1747:19" pos:end="1747:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1749:9" pos:end="1749:14">break;</break>

    <case pos:start="1751:5" pos:end="1751:14">case <expr pos:start="1751:10" pos:end="1751:13"><literal type="number" pos:start="1751:10" pos:end="1751:13">0x61</literal></expr>:</case> <comment type="block" pos:start="1751:16" pos:end="1751:25">/* popa */</comment>

        <if_stmt pos:start="1753:9" pos:end="1755:28"><if pos:start="1753:9" pos:end="1755:28">if <condition pos:start="1753:12" pos:end="1753:22">(<expr pos:start="1753:13" pos:end="1753:21"><call pos:start="1753:13" pos:end="1753:21"><name pos:start="1753:13" pos:end="1753:18">CODE64</name><argument_list pos:start="1753:19" pos:end="1753:21">(<argument pos:start="1753:20" pos:end="1753:20"><expr pos:start="1753:20" pos:end="1753:20"><name pos:start="1753:20" pos:end="1753:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1755:13" pos:end="1755:28"><block_content pos:start="1755:13" pos:end="1755:28">

            <goto pos:start="1755:13" pos:end="1755:28">goto <name pos:start="1755:18" pos:end="1755:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1757:9" pos:end="1757:20"><expr pos:start="1757:9" pos:end="1757:19"><call pos:start="1757:9" pos:end="1757:19"><name pos:start="1757:9" pos:end="1757:16">gen_popa</name><argument_list pos:start="1757:17" pos:end="1757:19">(<argument pos:start="1757:18" pos:end="1757:18"><expr pos:start="1757:18" pos:end="1757:18"><name pos:start="1757:18" pos:end="1757:18">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1759:9" pos:end="1759:14">break;</break>

    <case pos:start="1761:5" pos:end="1761:14">case <expr pos:start="1761:10" pos:end="1761:13"><literal type="number" pos:start="1761:10" pos:end="1761:13">0x68</literal></expr>:</case> <comment type="block" pos:start="1761:16" pos:end="1761:28">/* push Iv */</comment>

    <case pos:start="1763:5" pos:end="1763:14">case <expr pos:start="1763:10" pos:end="1763:13"><literal type="number" pos:start="1763:10" pos:end="1763:13">0x6a</literal></expr>:</case>

        <if_stmt pos:start="1765:9" pos:end="1773:9"><if pos:start="1765:9" pos:end="1769:9">if <condition pos:start="1765:12" pos:end="1765:22">(<expr pos:start="1765:13" pos:end="1765:21"><call pos:start="1765:13" pos:end="1765:21"><name pos:start="1765:13" pos:end="1765:18">CODE64</name><argument_list pos:start="1765:19" pos:end="1765:21">(<argument pos:start="1765:20" pos:end="1765:20"><expr pos:start="1765:20" pos:end="1765:20"><name pos:start="1765:20" pos:end="1765:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1765:24" pos:end="1769:9">{<block_content pos:start="1767:13" pos:end="1767:43">

            <expr_stmt pos:start="1767:13" pos:end="1767:43"><expr pos:start="1767:13" pos:end="1767:42"><name pos:start="1767:13" pos:end="1767:14">ot</name> <operator pos:start="1767:16" pos:end="1767:16">=</operator> <ternary pos:start="1767:18" pos:end="1767:42"><condition pos:start="1767:18" pos:end="1767:24"><expr pos:start="1767:18" pos:end="1767:22"><name pos:start="1767:18" pos:end="1767:22">dflag</name></expr> ?</condition><then pos:start="1767:26" pos:end="1767:32"> <expr pos:start="1767:26" pos:end="1767:32"><name pos:start="1767:26" pos:end="1767:32">OT_QUAD</name></expr> </then><else pos:start="1767:34" pos:end="1767:42">: <expr pos:start="1767:36" pos:end="1767:42"><name pos:start="1767:36" pos:end="1767:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1769:11" pos:end="1773:9">else <block pos:start="1769:16" pos:end="1773:9">{<block_content pos:start="1771:13" pos:end="1771:33">

            <expr_stmt pos:start="1771:13" pos:end="1771:33"><expr pos:start="1771:13" pos:end="1771:32"><name pos:start="1771:13" pos:end="1771:14">ot</name> <operator pos:start="1771:16" pos:end="1771:16">=</operator> <name pos:start="1771:18" pos:end="1771:22">dflag</name> <operator pos:start="1771:24" pos:end="1771:24">+</operator> <name pos:start="1771:26" pos:end="1771:32">OT_WORD</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="1775:9" pos:end="1781:52"><if pos:start="1775:9" pos:end="1777:39">if <condition pos:start="1775:12" pos:end="1775:22">(<expr pos:start="1775:13" pos:end="1775:21"><name pos:start="1775:13" pos:end="1775:13">b</name> <operator pos:start="1775:15" pos:end="1775:16">==</operator> <literal type="number" pos:start="1775:18" pos:end="1775:21">0x68</literal></expr>)</condition><block type="pseudo" pos:start="1777:13" pos:end="1777:39"><block_content pos:start="1777:13" pos:end="1777:39">

            <expr_stmt pos:start="1777:13" pos:end="1777:39"><expr pos:start="1777:13" pos:end="1777:38"><name pos:start="1777:13" pos:end="1777:15">val</name> <operator pos:start="1777:17" pos:end="1777:17">=</operator> <call pos:start="1777:19" pos:end="1777:38"><name pos:start="1777:19" pos:end="1777:26">insn_get</name><argument_list pos:start="1777:27" pos:end="1777:38">(<argument pos:start="1777:28" pos:end="1777:30"><expr pos:start="1777:28" pos:end="1777:30"><name pos:start="1777:28" pos:end="1777:30">env</name></expr></argument>, <argument pos:start="1777:33" pos:end="1777:33"><expr pos:start="1777:33" pos:end="1777:33"><name pos:start="1777:33" pos:end="1777:33">s</name></expr></argument>, <argument pos:start="1777:36" pos:end="1777:37"><expr pos:start="1777:36" pos:end="1777:37"><name pos:start="1777:36" pos:end="1777:37">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1779:9" pos:end="1781:52">else<block type="pseudo" pos:start="1781:13" pos:end="1781:52"><block_content pos:start="1781:13" pos:end="1781:52">

            <expr_stmt pos:start="1781:13" pos:end="1781:52"><expr pos:start="1781:13" pos:end="1781:51"><name pos:start="1781:13" pos:end="1781:15">val</name> <operator pos:start="1781:17" pos:end="1781:17">=</operator> <operator pos:start="1781:19" pos:end="1781:19">(</operator><name pos:start="1781:20" pos:end="1781:25">int8_t</name><operator pos:start="1781:26" pos:end="1781:26">)</operator><call pos:start="1781:27" pos:end="1781:51"><name pos:start="1781:27" pos:end="1781:34">insn_get</name><argument_list pos:start="1781:35" pos:end="1781:51">(<argument pos:start="1781:36" pos:end="1781:38"><expr pos:start="1781:36" pos:end="1781:38"><name pos:start="1781:36" pos:end="1781:38">env</name></expr></argument>, <argument pos:start="1781:41" pos:end="1781:41"><expr pos:start="1781:41" pos:end="1781:41"><name pos:start="1781:41" pos:end="1781:41">s</name></expr></argument>, <argument pos:start="1781:44" pos:end="1781:50"><expr pos:start="1781:44" pos:end="1781:50"><name pos:start="1781:44" pos:end="1781:50">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1783:9" pos:end="1783:31"><expr pos:start="1783:9" pos:end="1783:30"><call pos:start="1783:9" pos:end="1783:30"><name pos:start="1783:9" pos:end="1783:25">gen_op_movl_T0_im</name><argument_list pos:start="1783:26" pos:end="1783:30">(<argument pos:start="1783:27" pos:end="1783:29"><expr pos:start="1783:27" pos:end="1783:29"><name pos:start="1783:27" pos:end="1783:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1785:9" pos:end="1785:23"><expr pos:start="1785:9" pos:end="1785:22"><call pos:start="1785:9" pos:end="1785:22"><name pos:start="1785:9" pos:end="1785:19">gen_push_T0</name><argument_list pos:start="1785:20" pos:end="1785:22">(<argument pos:start="1785:21" pos:end="1785:21"><expr pos:start="1785:21" pos:end="1785:21"><name pos:start="1785:21" pos:end="1785:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1787:9" pos:end="1787:14">break;</break>

    <case pos:start="1789:5" pos:end="1789:14">case <expr pos:start="1789:10" pos:end="1789:13"><literal type="number" pos:start="1789:10" pos:end="1789:13">0x8f</literal></expr>:</case> <comment type="block" pos:start="1789:16" pos:end="1789:27">/* pop Ev */</comment>

        <if_stmt pos:start="1791:9" pos:end="1799:9"><if pos:start="1791:9" pos:end="1795:9">if <condition pos:start="1791:12" pos:end="1791:22">(<expr pos:start="1791:13" pos:end="1791:21"><call pos:start="1791:13" pos:end="1791:21"><name pos:start="1791:13" pos:end="1791:18">CODE64</name><argument_list pos:start="1791:19" pos:end="1791:21">(<argument pos:start="1791:20" pos:end="1791:20"><expr pos:start="1791:20" pos:end="1791:20"><name pos:start="1791:20" pos:end="1791:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1791:24" pos:end="1795:9">{<block_content pos:start="1793:13" pos:end="1793:43">

            <expr_stmt pos:start="1793:13" pos:end="1793:43"><expr pos:start="1793:13" pos:end="1793:42"><name pos:start="1793:13" pos:end="1793:14">ot</name> <operator pos:start="1793:16" pos:end="1793:16">=</operator> <ternary pos:start="1793:18" pos:end="1793:42"><condition pos:start="1793:18" pos:end="1793:24"><expr pos:start="1793:18" pos:end="1793:22"><name pos:start="1793:18" pos:end="1793:22">dflag</name></expr> ?</condition><then pos:start="1793:26" pos:end="1793:32"> <expr pos:start="1793:26" pos:end="1793:32"><name pos:start="1793:26" pos:end="1793:32">OT_QUAD</name></expr> </then><else pos:start="1793:34" pos:end="1793:42">: <expr pos:start="1793:36" pos:end="1793:42"><name pos:start="1793:36" pos:end="1793:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1795:11" pos:end="1799:9">else <block pos:start="1795:16" pos:end="1799:9">{<block_content pos:start="1797:13" pos:end="1797:33">

            <expr_stmt pos:start="1797:13" pos:end="1797:33"><expr pos:start="1797:13" pos:end="1797:32"><name pos:start="1797:13" pos:end="1797:14">ot</name> <operator pos:start="1797:16" pos:end="1797:16">=</operator> <name pos:start="1797:18" pos:end="1797:22">dflag</name> <operator pos:start="1797:24" pos:end="1797:24">+</operator> <name pos:start="1797:26" pos:end="1797:32">OT_WORD</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1801:9" pos:end="1801:44"><expr pos:start="1801:9" pos:end="1801:43"><name pos:start="1801:9" pos:end="1801:13">modrm</name> <operator pos:start="1801:15" pos:end="1801:15">=</operator> <call pos:start="1801:17" pos:end="1801:43"><name pos:start="1801:17" pos:end="1801:29">cpu_ldub_code</name><argument_list pos:start="1801:30" pos:end="1801:43">(<argument pos:start="1801:31" pos:end="1801:33"><expr pos:start="1801:31" pos:end="1801:33"><name pos:start="1801:31" pos:end="1801:33">env</name></expr></argument>, <argument pos:start="1801:36" pos:end="1801:42"><expr pos:start="1801:36" pos:end="1801:42"><name pos:start="1801:36" pos:end="1801:40"><name pos:start="1801:36" pos:end="1801:36">s</name><operator pos:start="1801:37" pos:end="1801:38">-&gt;</operator><name pos:start="1801:39" pos:end="1801:40">pc</name></name><operator pos:start="1801:41" pos:end="1801:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1803:9" pos:end="1803:31"><expr pos:start="1803:9" pos:end="1803:30"><name pos:start="1803:9" pos:end="1803:11">mod</name> <operator pos:start="1803:13" pos:end="1803:13">=</operator> <operator pos:start="1803:15" pos:end="1803:15">(</operator><name pos:start="1803:16" pos:end="1803:20">modrm</name> <operator pos:start="1803:22" pos:end="1803:23">&gt;&gt;</operator> <literal type="number" pos:start="1803:25" pos:end="1803:25">6</literal><operator pos:start="1803:26" pos:end="1803:26">)</operator> <operator pos:start="1803:28" pos:end="1803:28">&amp;</operator> <literal type="number" pos:start="1803:30" pos:end="1803:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1805:9" pos:end="1805:22"><expr pos:start="1805:9" pos:end="1805:21"><call pos:start="1805:9" pos:end="1805:21"><name pos:start="1805:9" pos:end="1805:18">gen_pop_T0</name><argument_list pos:start="1805:19" pos:end="1805:21">(<argument pos:start="1805:20" pos:end="1805:20"><expr pos:start="1805:20" pos:end="1805:20"><name pos:start="1805:20" pos:end="1805:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1807:9" pos:end="1829:9"><if pos:start="1807:9" pos:end="1817:9">if <condition pos:start="1807:12" pos:end="1807:21">(<expr pos:start="1807:13" pos:end="1807:20"><name pos:start="1807:13" pos:end="1807:15">mod</name> <operator pos:start="1807:17" pos:end="1807:18">==</operator> <literal type="number" pos:start="1807:20" pos:end="1807:20">3</literal></expr>)</condition> <block pos:start="1807:23" pos:end="1817:9">{<block_content pos:start="1811:13" pos:end="1815:38">

            <comment type="block" pos:start="1809:13" pos:end="1809:54">/* NOTE: order is important for pop %sp */</comment>

            <expr_stmt pos:start="1811:13" pos:end="1811:30"><expr pos:start="1811:13" pos:end="1811:29"><call pos:start="1811:13" pos:end="1811:29"><name pos:start="1811:13" pos:end="1811:26">gen_pop_update</name><argument_list pos:start="1811:27" pos:end="1811:29">(<argument pos:start="1811:28" pos:end="1811:28"><expr pos:start="1811:28" pos:end="1811:28"><name pos:start="1811:28" pos:end="1811:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1813:13" pos:end="1813:40"><expr pos:start="1813:13" pos:end="1813:39"><name pos:start="1813:13" pos:end="1813:14">rm</name> <operator pos:start="1813:16" pos:end="1813:16">=</operator> <operator pos:start="1813:18" pos:end="1813:18">(</operator><name pos:start="1813:19" pos:end="1813:23">modrm</name> <operator pos:start="1813:25" pos:end="1813:25">&amp;</operator> <literal type="number" pos:start="1813:27" pos:end="1813:27">7</literal><operator pos:start="1813:28" pos:end="1813:28">)</operator> <operator pos:start="1813:30" pos:end="1813:30">|</operator> <call pos:start="1813:32" pos:end="1813:39"><name pos:start="1813:32" pos:end="1813:36">REX_B</name><argument_list pos:start="1813:37" pos:end="1813:39">(<argument pos:start="1813:38" pos:end="1813:38"><expr pos:start="1813:38" pos:end="1813:38"><name pos:start="1813:38" pos:end="1813:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1815:13" pos:end="1815:38"><expr pos:start="1815:13" pos:end="1815:37"><call pos:start="1815:13" pos:end="1815:37"><name pos:start="1815:13" pos:end="1815:29">gen_op_mov_reg_T0</name><argument_list pos:start="1815:30" pos:end="1815:37">(<argument pos:start="1815:31" pos:end="1815:32"><expr pos:start="1815:31" pos:end="1815:32"><name pos:start="1815:31" pos:end="1815:32">ot</name></expr></argument>, <argument pos:start="1815:35" pos:end="1815:36"><expr pos:start="1815:35" pos:end="1815:36"><name pos:start="1815:35" pos:end="1815:36">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1817:11" pos:end="1829:9">else <block pos:start="1817:16" pos:end="1829:9">{<block_content pos:start="1821:13" pos:end="1827:30">

            <comment type="block" pos:start="1819:13" pos:end="1819:65">/* NOTE: order is important too for MMU exceptions */</comment>

            <expr_stmt pos:start="1821:13" pos:end="1821:39"><expr pos:start="1821:13" pos:end="1821:38"><name pos:start="1821:13" pos:end="1821:28"><name pos:start="1821:13" pos:end="1821:13">s</name><operator pos:start="1821:14" pos:end="1821:15">-&gt;</operator><name pos:start="1821:16" pos:end="1821:28">popl_esp_hack</name></name> <operator pos:start="1821:30" pos:end="1821:30">=</operator> <literal type="number" pos:start="1821:32" pos:end="1821:32">1</literal> <operator pos:start="1821:34" pos:end="1821:35">&lt;&lt;</operator> <name pos:start="1821:37" pos:end="1821:38">ot</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1823:13" pos:end="1823:58"><expr pos:start="1823:13" pos:end="1823:57"><call pos:start="1823:13" pos:end="1823:57"><name pos:start="1823:13" pos:end="1823:26">gen_ldst_modrm</name><argument_list pos:start="1823:27" pos:end="1823:57">(<argument pos:start="1823:28" pos:end="1823:30"><expr pos:start="1823:28" pos:end="1823:30"><name pos:start="1823:28" pos:end="1823:30">env</name></expr></argument>, <argument pos:start="1823:33" pos:end="1823:33"><expr pos:start="1823:33" pos:end="1823:33"><name pos:start="1823:33" pos:end="1823:33">s</name></expr></argument>, <argument pos:start="1823:36" pos:end="1823:40"><expr pos:start="1823:36" pos:end="1823:40"><name pos:start="1823:36" pos:end="1823:40">modrm</name></expr></argument>, <argument pos:start="1823:43" pos:end="1823:44"><expr pos:start="1823:43" pos:end="1823:44"><name pos:start="1823:43" pos:end="1823:44">ot</name></expr></argument>, <argument pos:start="1823:47" pos:end="1823:53"><expr pos:start="1823:47" pos:end="1823:53"><name pos:start="1823:47" pos:end="1823:53">OR_TMP0</name></expr></argument>, <argument pos:start="1823:56" pos:end="1823:56"><expr pos:start="1823:56" pos:end="1823:56"><literal type="number" pos:start="1823:56" pos:end="1823:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1825:13" pos:end="1825:33"><expr pos:start="1825:13" pos:end="1825:32"><name pos:start="1825:13" pos:end="1825:28"><name pos:start="1825:13" pos:end="1825:13">s</name><operator pos:start="1825:14" pos:end="1825:15">-&gt;</operator><name pos:start="1825:16" pos:end="1825:28">popl_esp_hack</name></name> <operator pos:start="1825:30" pos:end="1825:30">=</operator> <literal type="number" pos:start="1825:32" pos:end="1825:32">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1827:13" pos:end="1827:30"><expr pos:start="1827:13" pos:end="1827:29"><call pos:start="1827:13" pos:end="1827:29"><name pos:start="1827:13" pos:end="1827:26">gen_pop_update</name><argument_list pos:start="1827:27" pos:end="1827:29">(<argument pos:start="1827:28" pos:end="1827:28"><expr pos:start="1827:28" pos:end="1827:28"><name pos:start="1827:28" pos:end="1827:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1831:9" pos:end="1831:14">break;</break>

    <case pos:start="1833:5" pos:end="1833:14">case <expr pos:start="1833:10" pos:end="1833:13"><literal type="number" pos:start="1833:10" pos:end="1833:13">0xc8</literal></expr>:</case> <comment type="block" pos:start="1833:16" pos:end="1833:26">/* enter */</comment>

        <block pos:start="1835:9" pos:end="1847:9">{<block_content pos:start="1837:13" pos:end="1845:37">

            <decl_stmt pos:start="1837:13" pos:end="1837:22"><decl pos:start="1837:13" pos:end="1837:21"><type pos:start="1837:13" pos:end="1837:15"><name pos:start="1837:13" pos:end="1837:15">int</name></type> <name pos:start="1837:17" pos:end="1837:21">level</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1839:13" pos:end="1839:44"><expr pos:start="1839:13" pos:end="1839:43"><name pos:start="1839:13" pos:end="1839:15">val</name> <operator pos:start="1839:17" pos:end="1839:17">=</operator> <call pos:start="1839:19" pos:end="1839:43"><name pos:start="1839:19" pos:end="1839:31">cpu_lduw_code</name><argument_list pos:start="1839:32" pos:end="1839:43">(<argument pos:start="1839:33" pos:end="1839:35"><expr pos:start="1839:33" pos:end="1839:35"><name pos:start="1839:33" pos:end="1839:35">env</name></expr></argument>, <argument pos:start="1839:38" pos:end="1839:42"><expr pos:start="1839:38" pos:end="1839:42"><name pos:start="1839:38" pos:end="1839:42"><name pos:start="1839:38" pos:end="1839:38">s</name><operator pos:start="1839:39" pos:end="1839:40">-&gt;</operator><name pos:start="1839:41" pos:end="1839:42">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1841:13" pos:end="1841:23"><expr pos:start="1841:13" pos:end="1841:22"><name pos:start="1841:13" pos:end="1841:17"><name pos:start="1841:13" pos:end="1841:13">s</name><operator pos:start="1841:14" pos:end="1841:15">-&gt;</operator><name pos:start="1841:16" pos:end="1841:17">pc</name></name> <operator pos:start="1841:19" pos:end="1841:20">+=</operator> <literal type="number" pos:start="1841:22" pos:end="1841:22">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1843:13" pos:end="1843:48"><expr pos:start="1843:13" pos:end="1843:47"><name pos:start="1843:13" pos:end="1843:17">level</name> <operator pos:start="1843:19" pos:end="1843:19">=</operator> <call pos:start="1843:21" pos:end="1843:47"><name pos:start="1843:21" pos:end="1843:33">cpu_ldub_code</name><argument_list pos:start="1843:34" pos:end="1843:47">(<argument pos:start="1843:35" pos:end="1843:37"><expr pos:start="1843:35" pos:end="1843:37"><name pos:start="1843:35" pos:end="1843:37">env</name></expr></argument>, <argument pos:start="1843:40" pos:end="1843:46"><expr pos:start="1843:40" pos:end="1843:46"><name pos:start="1843:40" pos:end="1843:44"><name pos:start="1843:40" pos:end="1843:40">s</name><operator pos:start="1843:41" pos:end="1843:42">-&gt;</operator><name pos:start="1843:43" pos:end="1843:44">pc</name></name><operator pos:start="1843:45" pos:end="1843:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1845:13" pos:end="1845:37"><expr pos:start="1845:13" pos:end="1845:36"><call pos:start="1845:13" pos:end="1845:36"><name pos:start="1845:13" pos:end="1845:21">gen_enter</name><argument_list pos:start="1845:22" pos:end="1845:36">(<argument pos:start="1845:23" pos:end="1845:23"><expr pos:start="1845:23" pos:end="1845:23"><name pos:start="1845:23" pos:end="1845:23">s</name></expr></argument>, <argument pos:start="1845:26" pos:end="1845:28"><expr pos:start="1845:26" pos:end="1845:28"><name pos:start="1845:26" pos:end="1845:28">val</name></expr></argument>, <argument pos:start="1845:31" pos:end="1845:35"><expr pos:start="1845:31" pos:end="1845:35"><name pos:start="1845:31" pos:end="1845:35">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="1849:9" pos:end="1849:14">break;</break>

    <case pos:start="1851:5" pos:end="1851:14">case <expr pos:start="1851:10" pos:end="1851:13"><literal type="number" pos:start="1851:10" pos:end="1851:13">0xc9</literal></expr>:</case> <comment type="block" pos:start="1851:16" pos:end="1851:26">/* leave */</comment>

        <comment type="block" pos:start="1853:9" pos:end="1853:84">/* XXX: exception not precise (ESP is updated before potential exception) */</comment>

        <if_stmt pos:start="1855:9" pos:end="1873:9"><if pos:start="1855:9" pos:end="1861:9">if <condition pos:start="1855:12" pos:end="1855:22">(<expr pos:start="1855:13" pos:end="1855:21"><call pos:start="1855:13" pos:end="1855:21"><name pos:start="1855:13" pos:end="1855:18">CODE64</name><argument_list pos:start="1855:19" pos:end="1855:21">(<argument pos:start="1855:20" pos:end="1855:20"><expr pos:start="1855:20" pos:end="1855:20"><name pos:start="1855:20" pos:end="1855:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1855:24" pos:end="1861:9">{<block_content pos:start="1857:13" pos:end="1859:46">

            <expr_stmt pos:start="1857:13" pos:end="1857:49"><expr pos:start="1857:13" pos:end="1857:48"><call pos:start="1857:13" pos:end="1857:48"><name pos:start="1857:13" pos:end="1857:29">gen_op_mov_TN_reg</name><argument_list pos:start="1857:30" pos:end="1857:48">(<argument pos:start="1857:31" pos:end="1857:37"><expr pos:start="1857:31" pos:end="1857:37"><name pos:start="1857:31" pos:end="1857:37">OT_QUAD</name></expr></argument>, <argument pos:start="1857:40" pos:end="1857:40"><expr pos:start="1857:40" pos:end="1857:40"><literal type="number" pos:start="1857:40" pos:end="1857:40">0</literal></expr></argument>, <argument pos:start="1857:43" pos:end="1857:47"><expr pos:start="1857:43" pos:end="1857:47"><name pos:start="1857:43" pos:end="1857:47">R_EBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1859:13" pos:end="1859:46"><expr pos:start="1859:13" pos:end="1859:45"><call pos:start="1859:13" pos:end="1859:45"><name pos:start="1859:13" pos:end="1859:29">gen_op_mov_reg_T0</name><argument_list pos:start="1859:30" pos:end="1859:45">(<argument pos:start="1859:31" pos:end="1859:37"><expr pos:start="1859:31" pos:end="1859:37"><name pos:start="1859:31" pos:end="1859:37">OT_QUAD</name></expr></argument>, <argument pos:start="1859:40" pos:end="1859:44"><expr pos:start="1859:40" pos:end="1859:44"><name pos:start="1859:40" pos:end="1859:44">R_ESP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1861:11" pos:end="1867:9">else if <condition pos:start="1861:19" pos:end="1861:27">(<expr pos:start="1861:20" pos:end="1861:26"><name pos:start="1861:20" pos:end="1861:26"><name pos:start="1861:20" pos:end="1861:20">s</name><operator pos:start="1861:21" pos:end="1861:22">-&gt;</operator><name pos:start="1861:23" pos:end="1861:26">ss32</name></name></expr>)</condition> <block pos:start="1861:29" pos:end="1867:9">{<block_content pos:start="1863:13" pos:end="1865:46">

            <expr_stmt pos:start="1863:13" pos:end="1863:49"><expr pos:start="1863:13" pos:end="1863:48"><call pos:start="1863:13" pos:end="1863:48"><name pos:start="1863:13" pos:end="1863:29">gen_op_mov_TN_reg</name><argument_list pos:start="1863:30" pos:end="1863:48">(<argument pos:start="1863:31" pos:end="1863:37"><expr pos:start="1863:31" pos:end="1863:37"><name pos:start="1863:31" pos:end="1863:37">OT_LONG</name></expr></argument>, <argument pos:start="1863:40" pos:end="1863:40"><expr pos:start="1863:40" pos:end="1863:40"><literal type="number" pos:start="1863:40" pos:end="1863:40">0</literal></expr></argument>, <argument pos:start="1863:43" pos:end="1863:47"><expr pos:start="1863:43" pos:end="1863:47"><name pos:start="1863:43" pos:end="1863:47">R_EBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1865:13" pos:end="1865:46"><expr pos:start="1865:13" pos:end="1865:45"><call pos:start="1865:13" pos:end="1865:45"><name pos:start="1865:13" pos:end="1865:29">gen_op_mov_reg_T0</name><argument_list pos:start="1865:30" pos:end="1865:45">(<argument pos:start="1865:31" pos:end="1865:37"><expr pos:start="1865:31" pos:end="1865:37"><name pos:start="1865:31" pos:end="1865:37">OT_LONG</name></expr></argument>, <argument pos:start="1865:40" pos:end="1865:44"><expr pos:start="1865:40" pos:end="1865:44"><name pos:start="1865:40" pos:end="1865:44">R_ESP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1867:11" pos:end="1873:9">else <block pos:start="1867:16" pos:end="1873:9">{<block_content pos:start="1869:13" pos:end="1871:46">

            <expr_stmt pos:start="1869:13" pos:end="1869:49"><expr pos:start="1869:13" pos:end="1869:48"><call pos:start="1869:13" pos:end="1869:48"><name pos:start="1869:13" pos:end="1869:29">gen_op_mov_TN_reg</name><argument_list pos:start="1869:30" pos:end="1869:48">(<argument pos:start="1869:31" pos:end="1869:37"><expr pos:start="1869:31" pos:end="1869:37"><name pos:start="1869:31" pos:end="1869:37">OT_WORD</name></expr></argument>, <argument pos:start="1869:40" pos:end="1869:40"><expr pos:start="1869:40" pos:end="1869:40"><literal type="number" pos:start="1869:40" pos:end="1869:40">0</literal></expr></argument>, <argument pos:start="1869:43" pos:end="1869:47"><expr pos:start="1869:43" pos:end="1869:47"><name pos:start="1869:43" pos:end="1869:47">R_EBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1871:13" pos:end="1871:46"><expr pos:start="1871:13" pos:end="1871:45"><call pos:start="1871:13" pos:end="1871:45"><name pos:start="1871:13" pos:end="1871:29">gen_op_mov_reg_T0</name><argument_list pos:start="1871:30" pos:end="1871:45">(<argument pos:start="1871:31" pos:end="1871:37"><expr pos:start="1871:31" pos:end="1871:37"><name pos:start="1871:31" pos:end="1871:37">OT_WORD</name></expr></argument>, <argument pos:start="1871:40" pos:end="1871:44"><expr pos:start="1871:40" pos:end="1871:44"><name pos:start="1871:40" pos:end="1871:44">R_ESP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1875:9" pos:end="1875:22"><expr pos:start="1875:9" pos:end="1875:21"><call pos:start="1875:9" pos:end="1875:21"><name pos:start="1875:9" pos:end="1875:18">gen_pop_T0</name><argument_list pos:start="1875:19" pos:end="1875:21">(<argument pos:start="1875:20" pos:end="1875:20"><expr pos:start="1875:20" pos:end="1875:20"><name pos:start="1875:20" pos:end="1875:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1877:9" pos:end="1885:9"><if pos:start="1877:9" pos:end="1881:9">if <condition pos:start="1877:12" pos:end="1877:22">(<expr pos:start="1877:13" pos:end="1877:21"><call pos:start="1877:13" pos:end="1877:21"><name pos:start="1877:13" pos:end="1877:18">CODE64</name><argument_list pos:start="1877:19" pos:end="1877:21">(<argument pos:start="1877:20" pos:end="1877:20"><expr pos:start="1877:20" pos:end="1877:20"><name pos:start="1877:20" pos:end="1877:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1877:24" pos:end="1881:9">{<block_content pos:start="1879:13" pos:end="1879:43">

            <expr_stmt pos:start="1879:13" pos:end="1879:43"><expr pos:start="1879:13" pos:end="1879:42"><name pos:start="1879:13" pos:end="1879:14">ot</name> <operator pos:start="1879:16" pos:end="1879:16">=</operator> <ternary pos:start="1879:18" pos:end="1879:42"><condition pos:start="1879:18" pos:end="1879:24"><expr pos:start="1879:18" pos:end="1879:22"><name pos:start="1879:18" pos:end="1879:22">dflag</name></expr> ?</condition><then pos:start="1879:26" pos:end="1879:32"> <expr pos:start="1879:26" pos:end="1879:32"><name pos:start="1879:26" pos:end="1879:32">OT_QUAD</name></expr> </then><else pos:start="1879:34" pos:end="1879:42">: <expr pos:start="1879:36" pos:end="1879:42"><name pos:start="1879:36" pos:end="1879:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1881:11" pos:end="1885:9">else <block pos:start="1881:16" pos:end="1885:9">{<block_content pos:start="1883:13" pos:end="1883:33">

            <expr_stmt pos:start="1883:13" pos:end="1883:33"><expr pos:start="1883:13" pos:end="1883:32"><name pos:start="1883:13" pos:end="1883:14">ot</name> <operator pos:start="1883:16" pos:end="1883:16">=</operator> <name pos:start="1883:18" pos:end="1883:22">dflag</name> <operator pos:start="1883:24" pos:end="1883:24">+</operator> <name pos:start="1883:26" pos:end="1883:32">OT_WORD</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1887:9" pos:end="1887:37"><expr pos:start="1887:9" pos:end="1887:36"><call pos:start="1887:9" pos:end="1887:36"><name pos:start="1887:9" pos:end="1887:25">gen_op_mov_reg_T0</name><argument_list pos:start="1887:26" pos:end="1887:36">(<argument pos:start="1887:27" pos:end="1887:28"><expr pos:start="1887:27" pos:end="1887:28"><name pos:start="1887:27" pos:end="1887:28">ot</name></expr></argument>, <argument pos:start="1887:31" pos:end="1887:35"><expr pos:start="1887:31" pos:end="1887:35"><name pos:start="1887:31" pos:end="1887:35">R_EBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1889:9" pos:end="1889:26"><expr pos:start="1889:9" pos:end="1889:25"><call pos:start="1889:9" pos:end="1889:25"><name pos:start="1889:9" pos:end="1889:22">gen_pop_update</name><argument_list pos:start="1889:23" pos:end="1889:25">(<argument pos:start="1889:24" pos:end="1889:24"><expr pos:start="1889:24" pos:end="1889:24"><name pos:start="1889:24" pos:end="1889:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1891:9" pos:end="1891:14">break;</break>

    <case pos:start="1893:5" pos:end="1893:14">case <expr pos:start="1893:10" pos:end="1893:13"><literal type="number" pos:start="1893:10" pos:end="1893:13">0x06</literal></expr>:</case> <comment type="block" pos:start="1893:16" pos:end="1893:28">/* push es */</comment>

    <case pos:start="1895:5" pos:end="1895:14">case <expr pos:start="1895:10" pos:end="1895:13"><literal type="number" pos:start="1895:10" pos:end="1895:13">0x0e</literal></expr>:</case> <comment type="block" pos:start="1895:16" pos:end="1895:28">/* push cs */</comment>

    <case pos:start="1897:5" pos:end="1897:14">case <expr pos:start="1897:10" pos:end="1897:13"><literal type="number" pos:start="1897:10" pos:end="1897:13">0x16</literal></expr>:</case> <comment type="block" pos:start="1897:16" pos:end="1897:28">/* push ss */</comment>

    <case pos:start="1899:5" pos:end="1899:14">case <expr pos:start="1899:10" pos:end="1899:13"><literal type="number" pos:start="1899:10" pos:end="1899:13">0x1e</literal></expr>:</case> <comment type="block" pos:start="1899:16" pos:end="1899:28">/* push ds */</comment>

        <if_stmt pos:start="1901:9" pos:end="1903:28"><if pos:start="1901:9" pos:end="1903:28">if <condition pos:start="1901:12" pos:end="1901:22">(<expr pos:start="1901:13" pos:end="1901:21"><call pos:start="1901:13" pos:end="1901:21"><name pos:start="1901:13" pos:end="1901:18">CODE64</name><argument_list pos:start="1901:19" pos:end="1901:21">(<argument pos:start="1901:20" pos:end="1901:20"><expr pos:start="1901:20" pos:end="1901:20"><name pos:start="1901:20" pos:end="1901:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1903:13" pos:end="1903:28"><block_content pos:start="1903:13" pos:end="1903:28">

            <goto pos:start="1903:13" pos:end="1903:28">goto <name pos:start="1903:18" pos:end="1903:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1905:9" pos:end="1905:35"><expr pos:start="1905:9" pos:end="1905:34"><call pos:start="1905:9" pos:end="1905:34"><name pos:start="1905:9" pos:end="1905:26">gen_op_movl_T0_seg</name><argument_list pos:start="1905:27" pos:end="1905:34">(<argument pos:start="1905:28" pos:end="1905:33"><expr pos:start="1905:28" pos:end="1905:33"><name pos:start="1905:28" pos:end="1905:28">b</name> <operator pos:start="1905:30" pos:end="1905:31">&gt;&gt;</operator> <literal type="number" pos:start="1905:33" pos:end="1905:33">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1907:9" pos:end="1907:23"><expr pos:start="1907:9" pos:end="1907:22"><call pos:start="1907:9" pos:end="1907:22"><name pos:start="1907:9" pos:end="1907:19">gen_push_T0</name><argument_list pos:start="1907:20" pos:end="1907:22">(<argument pos:start="1907:21" pos:end="1907:21"><expr pos:start="1907:21" pos:end="1907:21"><name pos:start="1907:21" pos:end="1907:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1909:9" pos:end="1909:14">break;</break>

    <case pos:start="1911:5" pos:end="1911:15">case <expr pos:start="1911:10" pos:end="1911:14"><literal type="number" pos:start="1911:10" pos:end="1911:14">0x1a0</literal></expr>:</case> <comment type="block" pos:start="1911:17" pos:end="1911:29">/* push fs */</comment>

    <case pos:start="1913:5" pos:end="1913:15">case <expr pos:start="1913:10" pos:end="1913:14"><literal type="number" pos:start="1913:10" pos:end="1913:14">0x1a8</literal></expr>:</case> <comment type="block" pos:start="1913:17" pos:end="1913:29">/* push gs */</comment>

        <expr_stmt pos:start="1915:9" pos:end="1915:41"><expr pos:start="1915:9" pos:end="1915:40"><call pos:start="1915:9" pos:end="1915:40"><name pos:start="1915:9" pos:end="1915:26">gen_op_movl_T0_seg</name><argument_list pos:start="1915:27" pos:end="1915:40">(<argument pos:start="1915:28" pos:end="1915:39"><expr pos:start="1915:28" pos:end="1915:39"><operator pos:start="1915:28" pos:end="1915:28">(</operator><name pos:start="1915:29" pos:end="1915:29">b</name> <operator pos:start="1915:31" pos:end="1915:32">&gt;&gt;</operator> <literal type="number" pos:start="1915:34" pos:end="1915:34">3</literal><operator pos:start="1915:35" pos:end="1915:35">)</operator> <operator pos:start="1915:37" pos:end="1915:37">&amp;</operator> <literal type="number" pos:start="1915:39" pos:end="1915:39">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1917:9" pos:end="1917:23"><expr pos:start="1917:9" pos:end="1917:22"><call pos:start="1917:9" pos:end="1917:22"><name pos:start="1917:9" pos:end="1917:19">gen_push_T0</name><argument_list pos:start="1917:20" pos:end="1917:22">(<argument pos:start="1917:21" pos:end="1917:21"><expr pos:start="1917:21" pos:end="1917:21"><name pos:start="1917:21" pos:end="1917:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1919:9" pos:end="1919:14">break;</break>

    <case pos:start="1921:5" pos:end="1921:14">case <expr pos:start="1921:10" pos:end="1921:13"><literal type="number" pos:start="1921:10" pos:end="1921:13">0x07</literal></expr>:</case> <comment type="block" pos:start="1921:16" pos:end="1921:27">/* pop es */</comment>

    <case pos:start="1923:5" pos:end="1923:14">case <expr pos:start="1923:10" pos:end="1923:13"><literal type="number" pos:start="1923:10" pos:end="1923:13">0x17</literal></expr>:</case> <comment type="block" pos:start="1923:16" pos:end="1923:27">/* pop ss */</comment>

    <case pos:start="1925:5" pos:end="1925:14">case <expr pos:start="1925:10" pos:end="1925:13"><literal type="number" pos:start="1925:10" pos:end="1925:13">0x1f</literal></expr>:</case> <comment type="block" pos:start="1925:16" pos:end="1925:27">/* pop ds */</comment>

        <if_stmt pos:start="1927:9" pos:end="1929:28"><if pos:start="1927:9" pos:end="1929:28">if <condition pos:start="1927:12" pos:end="1927:22">(<expr pos:start="1927:13" pos:end="1927:21"><call pos:start="1927:13" pos:end="1927:21"><name pos:start="1927:13" pos:end="1927:18">CODE64</name><argument_list pos:start="1927:19" pos:end="1927:21">(<argument pos:start="1927:20" pos:end="1927:20"><expr pos:start="1927:20" pos:end="1927:20"><name pos:start="1927:20" pos:end="1927:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1929:13" pos:end="1929:28"><block_content pos:start="1929:13" pos:end="1929:28">

            <goto pos:start="1929:13" pos:end="1929:28">goto <name pos:start="1929:18" pos:end="1929:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1931:9" pos:end="1931:21"><expr pos:start="1931:9" pos:end="1931:20"><name pos:start="1931:9" pos:end="1931:11">reg</name> <operator pos:start="1931:13" pos:end="1931:13">=</operator> <name pos:start="1931:15" pos:end="1931:15">b</name> <operator pos:start="1931:17" pos:end="1931:18">&gt;&gt;</operator> <literal type="number" pos:start="1931:20" pos:end="1931:20">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1933:9" pos:end="1933:22"><expr pos:start="1933:9" pos:end="1933:21"><call pos:start="1933:9" pos:end="1933:21"><name pos:start="1933:9" pos:end="1933:18">gen_pop_T0</name><argument_list pos:start="1933:19" pos:end="1933:21">(<argument pos:start="1933:20" pos:end="1933:20"><expr pos:start="1933:20" pos:end="1933:20"><name pos:start="1933:20" pos:end="1933:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1935:9" pos:end="1935:55"><expr pos:start="1935:9" pos:end="1935:54"><call pos:start="1935:9" pos:end="1935:54"><name pos:start="1935:9" pos:end="1935:23">gen_movl_seg_T0</name><argument_list pos:start="1935:24" pos:end="1935:54">(<argument pos:start="1935:25" pos:end="1935:25"><expr pos:start="1935:25" pos:end="1935:25"><name pos:start="1935:25" pos:end="1935:25">s</name></expr></argument>, <argument pos:start="1935:28" pos:end="1935:30"><expr pos:start="1935:28" pos:end="1935:30"><name pos:start="1935:28" pos:end="1935:30">reg</name></expr></argument>, <argument pos:start="1935:33" pos:end="1935:53"><expr pos:start="1935:33" pos:end="1935:53"><name pos:start="1935:33" pos:end="1935:40">pc_start</name> <operator pos:start="1935:42" pos:end="1935:42">-</operator> <name pos:start="1935:44" pos:end="1935:53"><name pos:start="1935:44" pos:end="1935:44">s</name><operator pos:start="1935:45" pos:end="1935:46">-&gt;</operator><name pos:start="1935:47" pos:end="1935:53">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1937:9" pos:end="1937:26"><expr pos:start="1937:9" pos:end="1937:25"><call pos:start="1937:9" pos:end="1937:25"><name pos:start="1937:9" pos:end="1937:22">gen_pop_update</name><argument_list pos:start="1937:23" pos:end="1937:25">(<argument pos:start="1937:24" pos:end="1937:24"><expr pos:start="1937:24" pos:end="1937:24"><name pos:start="1937:24" pos:end="1937:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1939:9" pos:end="1953:9"><if pos:start="1939:9" pos:end="1953:9">if <condition pos:start="1939:12" pos:end="1939:24">(<expr pos:start="1939:13" pos:end="1939:23"><name pos:start="1939:13" pos:end="1939:15">reg</name> <operator pos:start="1939:17" pos:end="1939:18">==</operator> <name pos:start="1939:20" pos:end="1939:23">R_SS</name></expr>)</condition> <block pos:start="1939:26" pos:end="1953:9">{<block_content pos:start="1947:13" pos:end="1951:22">

            <comment type="block" pos:start="1941:13" pos:end="1941:57">/* if reg == SS, inhibit interrupts/trace. */</comment>

            <comment type="block" pos:start="1943:13" pos:end="1945:33">/* If several instructions disable interrupts, only the

               _first_ does it */</comment>

            <if_stmt pos:start="1947:13" pos:end="1949:52"><if pos:start="1947:13" pos:end="1949:52">if <condition pos:start="1947:16" pos:end="1947:54">(<expr pos:start="1947:17" pos:end="1947:53"><operator pos:start="1947:17" pos:end="1947:17">!</operator><operator pos:start="1947:18" pos:end="1947:18">(</operator><name pos:start="1947:19" pos:end="1947:30"><name pos:start="1947:19" pos:end="1947:19">s</name><operator pos:start="1947:20" pos:end="1947:21">-&gt;</operator><name pos:start="1947:22" pos:end="1947:23">tb</name><operator pos:start="1947:24" pos:end="1947:25">-&gt;</operator><name pos:start="1947:26" pos:end="1947:30">flags</name></name> <operator pos:start="1947:32" pos:end="1947:32">&amp;</operator> <name pos:start="1947:34" pos:end="1947:52">HF_INHIBIT_IRQ_MASK</name><operator pos:start="1947:53" pos:end="1947:53">)</operator></expr>)</condition><block type="pseudo" pos:start="1949:17" pos:end="1949:52"><block_content pos:start="1949:17" pos:end="1949:52">

                <expr_stmt pos:start="1949:17" pos:end="1949:52"><expr pos:start="1949:17" pos:end="1949:51"><call pos:start="1949:17" pos:end="1949:51"><name pos:start="1949:17" pos:end="1949:42">gen_helper_set_inhibit_irq</name><argument_list pos:start="1949:43" pos:end="1949:51">(<argument pos:start="1949:44" pos:end="1949:50"><expr pos:start="1949:44" pos:end="1949:50"><name pos:start="1949:44" pos:end="1949:50">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1951:13" pos:end="1951:22"><expr pos:start="1951:13" pos:end="1951:21"><name pos:start="1951:13" pos:end="1951:17"><name pos:start="1951:13" pos:end="1951:13">s</name><operator pos:start="1951:14" pos:end="1951:15">-&gt;</operator><name pos:start="1951:16" pos:end="1951:17">tf</name></name> <operator pos:start="1951:19" pos:end="1951:19">=</operator> <literal type="number" pos:start="1951:21" pos:end="1951:21">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="1955:9" pos:end="1961:9"><if pos:start="1955:9" pos:end="1961:9">if <condition pos:start="1955:12" pos:end="1955:22">(<expr pos:start="1955:13" pos:end="1955:21"><name pos:start="1955:13" pos:end="1955:21"><name pos:start="1955:13" pos:end="1955:13">s</name><operator pos:start="1955:14" pos:end="1955:15">-&gt;</operator><name pos:start="1955:16" pos:end="1955:21">is_jmp</name></name></expr>)</condition> <block pos:start="1955:24" pos:end="1961:9">{<block_content pos:start="1957:13" pos:end="1959:23">

            <expr_stmt pos:start="1957:13" pos:end="1957:43"><expr pos:start="1957:13" pos:end="1957:42"><call pos:start="1957:13" pos:end="1957:42"><name pos:start="1957:13" pos:end="1957:22">gen_jmp_im</name><argument_list pos:start="1957:23" pos:end="1957:42">(<argument pos:start="1957:24" pos:end="1957:41"><expr pos:start="1957:24" pos:end="1957:41"><name pos:start="1957:24" pos:end="1957:28"><name pos:start="1957:24" pos:end="1957:24">s</name><operator pos:start="1957:25" pos:end="1957:26">-&gt;</operator><name pos:start="1957:27" pos:end="1957:28">pc</name></name> <operator pos:start="1957:30" pos:end="1957:30">-</operator> <name pos:start="1957:32" pos:end="1957:41"><name pos:start="1957:32" pos:end="1957:32">s</name><operator pos:start="1957:33" pos:end="1957:34">-&gt;</operator><name pos:start="1957:35" pos:end="1957:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1959:13" pos:end="1959:23"><expr pos:start="1959:13" pos:end="1959:22"><call pos:start="1959:13" pos:end="1959:22"><name pos:start="1959:13" pos:end="1959:19">gen_eob</name><argument_list pos:start="1959:20" pos:end="1959:22">(<argument pos:start="1959:21" pos:end="1959:21"><expr pos:start="1959:21" pos:end="1959:21"><name pos:start="1959:21" pos:end="1959:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="1963:9" pos:end="1963:14">break;</break>

    <case pos:start="1965:5" pos:end="1965:15">case <expr pos:start="1965:10" pos:end="1965:14"><literal type="number" pos:start="1965:10" pos:end="1965:14">0x1a1</literal></expr>:</case> <comment type="block" pos:start="1965:17" pos:end="1965:28">/* pop fs */</comment>

    <case pos:start="1967:5" pos:end="1967:15">case <expr pos:start="1967:10" pos:end="1967:14"><literal type="number" pos:start="1967:10" pos:end="1967:14">0x1a9</literal></expr>:</case> <comment type="block" pos:start="1967:17" pos:end="1967:28">/* pop gs */</comment>

        <expr_stmt pos:start="1969:9" pos:end="1969:22"><expr pos:start="1969:9" pos:end="1969:21"><call pos:start="1969:9" pos:end="1969:21"><name pos:start="1969:9" pos:end="1969:18">gen_pop_T0</name><argument_list pos:start="1969:19" pos:end="1969:21">(<argument pos:start="1969:20" pos:end="1969:20"><expr pos:start="1969:20" pos:end="1969:20"><name pos:start="1969:20" pos:end="1969:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1971:9" pos:end="1971:64"><expr pos:start="1971:9" pos:end="1971:63"><call pos:start="1971:9" pos:end="1971:63"><name pos:start="1971:9" pos:end="1971:23">gen_movl_seg_T0</name><argument_list pos:start="1971:24" pos:end="1971:63">(<argument pos:start="1971:25" pos:end="1971:25"><expr pos:start="1971:25" pos:end="1971:25"><name pos:start="1971:25" pos:end="1971:25">s</name></expr></argument>, <argument pos:start="1971:28" pos:end="1971:39"><expr pos:start="1971:28" pos:end="1971:39"><operator pos:start="1971:28" pos:end="1971:28">(</operator><name pos:start="1971:29" pos:end="1971:29">b</name> <operator pos:start="1971:31" pos:end="1971:32">&gt;&gt;</operator> <literal type="number" pos:start="1971:34" pos:end="1971:34">3</literal><operator pos:start="1971:35" pos:end="1971:35">)</operator> <operator pos:start="1971:37" pos:end="1971:37">&amp;</operator> <literal type="number" pos:start="1971:39" pos:end="1971:39">7</literal></expr></argument>, <argument pos:start="1971:42" pos:end="1971:62"><expr pos:start="1971:42" pos:end="1971:62"><name pos:start="1971:42" pos:end="1971:49">pc_start</name> <operator pos:start="1971:51" pos:end="1971:51">-</operator> <name pos:start="1971:53" pos:end="1971:62"><name pos:start="1971:53" pos:end="1971:53">s</name><operator pos:start="1971:54" pos:end="1971:55">-&gt;</operator><name pos:start="1971:56" pos:end="1971:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1973:9" pos:end="1973:26"><expr pos:start="1973:9" pos:end="1973:25"><call pos:start="1973:9" pos:end="1973:25"><name pos:start="1973:9" pos:end="1973:22">gen_pop_update</name><argument_list pos:start="1973:23" pos:end="1973:25">(<argument pos:start="1973:24" pos:end="1973:24"><expr pos:start="1973:24" pos:end="1973:24"><name pos:start="1973:24" pos:end="1973:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1975:9" pos:end="1981:9"><if pos:start="1975:9" pos:end="1981:9">if <condition pos:start="1975:12" pos:end="1975:22">(<expr pos:start="1975:13" pos:end="1975:21"><name pos:start="1975:13" pos:end="1975:21"><name pos:start="1975:13" pos:end="1975:13">s</name><operator pos:start="1975:14" pos:end="1975:15">-&gt;</operator><name pos:start="1975:16" pos:end="1975:21">is_jmp</name></name></expr>)</condition> <block pos:start="1975:24" pos:end="1981:9">{<block_content pos:start="1977:13" pos:end="1979:23">

            <expr_stmt pos:start="1977:13" pos:end="1977:43"><expr pos:start="1977:13" pos:end="1977:42"><call pos:start="1977:13" pos:end="1977:42"><name pos:start="1977:13" pos:end="1977:22">gen_jmp_im</name><argument_list pos:start="1977:23" pos:end="1977:42">(<argument pos:start="1977:24" pos:end="1977:41"><expr pos:start="1977:24" pos:end="1977:41"><name pos:start="1977:24" pos:end="1977:28"><name pos:start="1977:24" pos:end="1977:24">s</name><operator pos:start="1977:25" pos:end="1977:26">-&gt;</operator><name pos:start="1977:27" pos:end="1977:28">pc</name></name> <operator pos:start="1977:30" pos:end="1977:30">-</operator> <name pos:start="1977:32" pos:end="1977:41"><name pos:start="1977:32" pos:end="1977:32">s</name><operator pos:start="1977:33" pos:end="1977:34">-&gt;</operator><name pos:start="1977:35" pos:end="1977:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1979:13" pos:end="1979:23"><expr pos:start="1979:13" pos:end="1979:22"><call pos:start="1979:13" pos:end="1979:22"><name pos:start="1979:13" pos:end="1979:19">gen_eob</name><argument_list pos:start="1979:20" pos:end="1979:22">(<argument pos:start="1979:21" pos:end="1979:21"><expr pos:start="1979:21" pos:end="1979:21"><name pos:start="1979:21" pos:end="1979:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="1983:9" pos:end="1983:14">break;</break>



        <comment type="block" format="doxygen" pos:start="1987:9" pos:end="1987:36">/**************************/</comment>

        <comment type="block" pos:start="1989:9" pos:end="1989:17">/* mov */</comment>

    <case pos:start="1991:5" pos:end="1991:14">case <expr pos:start="1991:10" pos:end="1991:13"><literal type="number" pos:start="1991:10" pos:end="1991:13">0x88</literal></expr>:</case>

    <case pos:start="1993:5" pos:end="1993:14">case <expr pos:start="1993:10" pos:end="1993:13"><literal type="number" pos:start="1993:10" pos:end="1993:13">0x89</literal></expr>:</case> <comment type="block" pos:start="1993:16" pos:end="1993:31">/* mov Gv, Ev */</comment>

        <if_stmt pos:start="1995:9" pos:end="2001:33"><if pos:start="1995:9" pos:end="1997:25">if <condition pos:start="1995:12" pos:end="1995:25">(<expr pos:start="1995:13" pos:end="1995:24"><operator pos:start="1995:13" pos:end="1995:13">(</operator><name pos:start="1995:14" pos:end="1995:14">b</name> <operator pos:start="1995:16" pos:end="1995:16">&amp;</operator> <literal type="number" pos:start="1995:18" pos:end="1995:18">1</literal><operator pos:start="1995:19" pos:end="1995:19">)</operator> <operator pos:start="1995:21" pos:end="1995:22">==</operator> <literal type="number" pos:start="1995:24" pos:end="1995:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1997:13" pos:end="1997:25"><block_content pos:start="1997:13" pos:end="1997:25">

            <expr_stmt pos:start="1997:13" pos:end="1997:25"><expr pos:start="1997:13" pos:end="1997:24"><name pos:start="1997:13" pos:end="1997:14">ot</name> <operator pos:start="1997:16" pos:end="1997:16">=</operator> <name pos:start="1997:18" pos:end="1997:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1999:9" pos:end="2001:33">else<block type="pseudo" pos:start="2001:13" pos:end="2001:33"><block_content pos:start="2001:13" pos:end="2001:33">

            <expr_stmt pos:start="2001:13" pos:end="2001:33"><expr pos:start="2001:13" pos:end="2001:32"><name pos:start="2001:13" pos:end="2001:14">ot</name> <operator pos:start="2001:16" pos:end="2001:16">=</operator> <name pos:start="2001:18" pos:end="2001:22">dflag</name> <operator pos:start="2001:24" pos:end="2001:24">+</operator> <name pos:start="2001:26" pos:end="2001:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="2003:9" pos:end="2003:44"><expr pos:start="2003:9" pos:end="2003:43"><name pos:start="2003:9" pos:end="2003:13">modrm</name> <operator pos:start="2003:15" pos:end="2003:15">=</operator> <call pos:start="2003:17" pos:end="2003:43"><name pos:start="2003:17" pos:end="2003:29">cpu_ldub_code</name><argument_list pos:start="2003:30" pos:end="2003:43">(<argument pos:start="2003:31" pos:end="2003:33"><expr pos:start="2003:31" pos:end="2003:33"><name pos:start="2003:31" pos:end="2003:33">env</name></expr></argument>, <argument pos:start="2003:36" pos:end="2003:42"><expr pos:start="2003:36" pos:end="2003:42"><name pos:start="2003:36" pos:end="2003:40"><name pos:start="2003:36" pos:end="2003:36">s</name><operator pos:start="2003:37" pos:end="2003:38">-&gt;</operator><name pos:start="2003:39" pos:end="2003:40">pc</name></name><operator pos:start="2003:41" pos:end="2003:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2005:9" pos:end="2005:41"><expr pos:start="2005:9" pos:end="2005:40"><name pos:start="2005:9" pos:end="2005:11">reg</name> <operator pos:start="2005:13" pos:end="2005:13">=</operator> <operator pos:start="2005:15" pos:end="2005:15">(</operator><operator pos:start="2005:16" pos:end="2005:16">(</operator><name pos:start="2005:17" pos:end="2005:21">modrm</name> <operator pos:start="2005:23" pos:end="2005:24">&gt;&gt;</operator> <literal type="number" pos:start="2005:26" pos:end="2005:26">3</literal><operator pos:start="2005:27" pos:end="2005:27">)</operator> <operator pos:start="2005:29" pos:end="2005:29">&amp;</operator> <literal type="number" pos:start="2005:31" pos:end="2005:31">7</literal><operator pos:start="2005:32" pos:end="2005:32">)</operator> <operator pos:start="2005:34" pos:end="2005:34">|</operator> <name pos:start="2005:36" pos:end="2005:40">rex_r</name></expr>;</expr_stmt>



        <comment type="block" pos:start="2009:9" pos:end="2009:38">/* generate a generic store */</comment>

        <expr_stmt pos:start="2011:9" pos:end="2011:50"><expr pos:start="2011:9" pos:end="2011:49"><call pos:start="2011:9" pos:end="2011:49"><name pos:start="2011:9" pos:end="2011:22">gen_ldst_modrm</name><argument_list pos:start="2011:23" pos:end="2011:49">(<argument pos:start="2011:24" pos:end="2011:26"><expr pos:start="2011:24" pos:end="2011:26"><name pos:start="2011:24" pos:end="2011:26">env</name></expr></argument>, <argument pos:start="2011:29" pos:end="2011:29"><expr pos:start="2011:29" pos:end="2011:29"><name pos:start="2011:29" pos:end="2011:29">s</name></expr></argument>, <argument pos:start="2011:32" pos:end="2011:36"><expr pos:start="2011:32" pos:end="2011:36"><name pos:start="2011:32" pos:end="2011:36">modrm</name></expr></argument>, <argument pos:start="2011:39" pos:end="2011:40"><expr pos:start="2011:39" pos:end="2011:40"><name pos:start="2011:39" pos:end="2011:40">ot</name></expr></argument>, <argument pos:start="2011:43" pos:end="2011:45"><expr pos:start="2011:43" pos:end="2011:45"><name pos:start="2011:43" pos:end="2011:45">reg</name></expr></argument>, <argument pos:start="2011:48" pos:end="2011:48"><expr pos:start="2011:48" pos:end="2011:48"><literal type="number" pos:start="2011:48" pos:end="2011:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2013:9" pos:end="2013:14">break;</break>

    <case pos:start="2015:5" pos:end="2015:14">case <expr pos:start="2015:10" pos:end="2015:13"><literal type="number" pos:start="2015:10" pos:end="2015:13">0xc6</literal></expr>:</case>

    <case pos:start="2017:5" pos:end="2017:14">case <expr pos:start="2017:10" pos:end="2017:13"><literal type="number" pos:start="2017:10" pos:end="2017:13">0xc7</literal></expr>:</case> <comment type="block" pos:start="2017:16" pos:end="2017:31">/* mov Ev, Iv */</comment>

        <if_stmt pos:start="2019:9" pos:end="2025:33"><if pos:start="2019:9" pos:end="2021:25">if <condition pos:start="2019:12" pos:end="2019:25">(<expr pos:start="2019:13" pos:end="2019:24"><operator pos:start="2019:13" pos:end="2019:13">(</operator><name pos:start="2019:14" pos:end="2019:14">b</name> <operator pos:start="2019:16" pos:end="2019:16">&amp;</operator> <literal type="number" pos:start="2019:18" pos:end="2019:18">1</literal><operator pos:start="2019:19" pos:end="2019:19">)</operator> <operator pos:start="2019:21" pos:end="2019:22">==</operator> <literal type="number" pos:start="2019:24" pos:end="2019:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2021:13" pos:end="2021:25"><block_content pos:start="2021:13" pos:end="2021:25">

            <expr_stmt pos:start="2021:13" pos:end="2021:25"><expr pos:start="2021:13" pos:end="2021:24"><name pos:start="2021:13" pos:end="2021:14">ot</name> <operator pos:start="2021:16" pos:end="2021:16">=</operator> <name pos:start="2021:18" pos:end="2021:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2023:9" pos:end="2025:33">else<block type="pseudo" pos:start="2025:13" pos:end="2025:33"><block_content pos:start="2025:13" pos:end="2025:33">

            <expr_stmt pos:start="2025:13" pos:end="2025:33"><expr pos:start="2025:13" pos:end="2025:32"><name pos:start="2025:13" pos:end="2025:14">ot</name> <operator pos:start="2025:16" pos:end="2025:16">=</operator> <name pos:start="2025:18" pos:end="2025:22">dflag</name> <operator pos:start="2025:24" pos:end="2025:24">+</operator> <name pos:start="2025:26" pos:end="2025:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="2027:9" pos:end="2027:44"><expr pos:start="2027:9" pos:end="2027:43"><name pos:start="2027:9" pos:end="2027:13">modrm</name> <operator pos:start="2027:15" pos:end="2027:15">=</operator> <call pos:start="2027:17" pos:end="2027:43"><name pos:start="2027:17" pos:end="2027:29">cpu_ldub_code</name><argument_list pos:start="2027:30" pos:end="2027:43">(<argument pos:start="2027:31" pos:end="2027:33"><expr pos:start="2027:31" pos:end="2027:33"><name pos:start="2027:31" pos:end="2027:33">env</name></expr></argument>, <argument pos:start="2027:36" pos:end="2027:42"><expr pos:start="2027:36" pos:end="2027:42"><name pos:start="2027:36" pos:end="2027:40"><name pos:start="2027:36" pos:end="2027:36">s</name><operator pos:start="2027:37" pos:end="2027:38">-&gt;</operator><name pos:start="2027:39" pos:end="2027:40">pc</name></name><operator pos:start="2027:41" pos:end="2027:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2029:9" pos:end="2029:31"><expr pos:start="2029:9" pos:end="2029:30"><name pos:start="2029:9" pos:end="2029:11">mod</name> <operator pos:start="2029:13" pos:end="2029:13">=</operator> <operator pos:start="2029:15" pos:end="2029:15">(</operator><name pos:start="2029:16" pos:end="2029:20">modrm</name> <operator pos:start="2029:22" pos:end="2029:23">&gt;&gt;</operator> <literal type="number" pos:start="2029:25" pos:end="2029:25">6</literal><operator pos:start="2029:26" pos:end="2029:26">)</operator> <operator pos:start="2029:28" pos:end="2029:28">&amp;</operator> <literal type="number" pos:start="2029:30" pos:end="2029:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="2031:9" pos:end="2037:9"><if pos:start="2031:9" pos:end="2037:9">if <condition pos:start="2031:12" pos:end="2031:21">(<expr pos:start="2031:13" pos:end="2031:20"><name pos:start="2031:13" pos:end="2031:15">mod</name> <operator pos:start="2031:17" pos:end="2031:18">!=</operator> <literal type="number" pos:start="2031:20" pos:end="2031:20">3</literal></expr>)</condition> <block pos:start="2031:23" pos:end="2037:9">{<block_content pos:start="2033:13" pos:end="2035:66">

            <expr_stmt pos:start="2033:13" pos:end="2033:48"><expr pos:start="2033:13" pos:end="2033:47"><name pos:start="2033:13" pos:end="2033:25"><name pos:start="2033:13" pos:end="2033:13">s</name><operator pos:start="2033:14" pos:end="2033:15">-&gt;</operator><name pos:start="2033:16" pos:end="2033:25">rip_offset</name></name> <operator pos:start="2033:27" pos:end="2033:27">=</operator> <call pos:start="2033:29" pos:end="2033:47"><name pos:start="2033:29" pos:end="2033:43">insn_const_size</name><argument_list pos:start="2033:44" pos:end="2033:47">(<argument pos:start="2033:45" pos:end="2033:46"><expr pos:start="2033:45" pos:end="2033:46"><name pos:start="2033:45" pos:end="2033:46">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2035:13" pos:end="2035:66"><expr pos:start="2035:13" pos:end="2035:65"><call pos:start="2035:13" pos:end="2035:65"><name pos:start="2035:13" pos:end="2035:25">gen_lea_modrm</name><argument_list pos:start="2035:26" pos:end="2035:65">(<argument pos:start="2035:27" pos:end="2035:29"><expr pos:start="2035:27" pos:end="2035:29"><name pos:start="2035:27" pos:end="2035:29">env</name></expr></argument>, <argument pos:start="2035:32" pos:end="2035:32"><expr pos:start="2035:32" pos:end="2035:32"><name pos:start="2035:32" pos:end="2035:32">s</name></expr></argument>, <argument pos:start="2035:35" pos:end="2035:39"><expr pos:start="2035:35" pos:end="2035:39"><name pos:start="2035:35" pos:end="2035:39">modrm</name></expr></argument>, <argument pos:start="2035:42" pos:end="2035:50"><expr pos:start="2035:42" pos:end="2035:50"><operator pos:start="2035:42" pos:end="2035:42">&amp;</operator><name pos:start="2035:43" pos:end="2035:50">reg_addr</name></expr></argument>, <argument pos:start="2035:53" pos:end="2035:64"><expr pos:start="2035:53" pos:end="2035:64"><operator pos:start="2035:53" pos:end="2035:53">&amp;</operator><name pos:start="2035:54" pos:end="2035:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2039:9" pos:end="2039:35"><expr pos:start="2039:9" pos:end="2039:34"><name pos:start="2039:9" pos:end="2039:11">val</name> <operator pos:start="2039:13" pos:end="2039:13">=</operator> <call pos:start="2039:15" pos:end="2039:34"><name pos:start="2039:15" pos:end="2039:22">insn_get</name><argument_list pos:start="2039:23" pos:end="2039:34">(<argument pos:start="2039:24" pos:end="2039:26"><expr pos:start="2039:24" pos:end="2039:26"><name pos:start="2039:24" pos:end="2039:26">env</name></expr></argument>, <argument pos:start="2039:29" pos:end="2039:29"><expr pos:start="2039:29" pos:end="2039:29"><name pos:start="2039:29" pos:end="2039:29">s</name></expr></argument>, <argument pos:start="2039:32" pos:end="2039:33"><expr pos:start="2039:32" pos:end="2039:33"><name pos:start="2039:32" pos:end="2039:33">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2041:9" pos:end="2041:31"><expr pos:start="2041:9" pos:end="2041:30"><call pos:start="2041:9" pos:end="2041:30"><name pos:start="2041:9" pos:end="2041:25">gen_op_movl_T0_im</name><argument_list pos:start="2041:26" pos:end="2041:30">(<argument pos:start="2041:27" pos:end="2041:29"><expr pos:start="2041:27" pos:end="2041:29"><name pos:start="2041:27" pos:end="2041:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2043:9" pos:end="2049:58"><if pos:start="2043:9" pos:end="2045:47">if <condition pos:start="2043:12" pos:end="2043:21">(<expr pos:start="2043:13" pos:end="2043:20"><name pos:start="2043:13" pos:end="2043:15">mod</name> <operator pos:start="2043:17" pos:end="2043:18">!=</operator> <literal type="number" pos:start="2043:20" pos:end="2043:20">3</literal></expr>)</condition><block type="pseudo" pos:start="2045:13" pos:end="2045:47"><block_content pos:start="2045:13" pos:end="2045:47">

            <expr_stmt pos:start="2045:13" pos:end="2045:47"><expr pos:start="2045:13" pos:end="2045:46"><call pos:start="2045:13" pos:end="2045:46"><name pos:start="2045:13" pos:end="2045:27">gen_op_st_T0_A0</name><argument_list pos:start="2045:28" pos:end="2045:46">(<argument pos:start="2045:29" pos:end="2045:45"><expr pos:start="2045:29" pos:end="2045:45"><name pos:start="2045:29" pos:end="2045:30">ot</name> <operator pos:start="2045:32" pos:end="2045:32">+</operator> <name pos:start="2045:34" pos:end="2045:45"><name pos:start="2045:34" pos:end="2045:34">s</name><operator pos:start="2045:35" pos:end="2045:36">-&gt;</operator><name pos:start="2045:37" pos:end="2045:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2047:9" pos:end="2049:58">else<block type="pseudo" pos:start="2049:13" pos:end="2049:58"><block_content pos:start="2049:13" pos:end="2049:58">

            <expr_stmt pos:start="2049:13" pos:end="2049:58"><expr pos:start="2049:13" pos:end="2049:57"><call pos:start="2049:13" pos:end="2049:57"><name pos:start="2049:13" pos:end="2049:29">gen_op_mov_reg_T0</name><argument_list pos:start="2049:30" pos:end="2049:57">(<argument pos:start="2049:31" pos:end="2049:32"><expr pos:start="2049:31" pos:end="2049:32"><name pos:start="2049:31" pos:end="2049:32">ot</name></expr></argument>, <argument pos:start="2049:35" pos:end="2049:56"><expr pos:start="2049:35" pos:end="2049:56"><operator pos:start="2049:35" pos:end="2049:35">(</operator><name pos:start="2049:36" pos:end="2049:40">modrm</name> <operator pos:start="2049:42" pos:end="2049:42">&amp;</operator> <literal type="number" pos:start="2049:44" pos:end="2049:44">7</literal><operator pos:start="2049:45" pos:end="2049:45">)</operator> <operator pos:start="2049:47" pos:end="2049:47">|</operator> <call pos:start="2049:49" pos:end="2049:56"><name pos:start="2049:49" pos:end="2049:53">REX_B</name><argument_list pos:start="2049:54" pos:end="2049:56">(<argument pos:start="2049:55" pos:end="2049:55"><expr pos:start="2049:55" pos:end="2049:55"><name pos:start="2049:55" pos:end="2049:55">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="2051:9" pos:end="2051:14">break;</break>

    <case pos:start="2053:5" pos:end="2053:14">case <expr pos:start="2053:10" pos:end="2053:13"><literal type="number" pos:start="2053:10" pos:end="2053:13">0x8a</literal></expr>:</case>

    <case pos:start="2055:5" pos:end="2055:14">case <expr pos:start="2055:10" pos:end="2055:13"><literal type="number" pos:start="2055:10" pos:end="2055:13">0x8b</literal></expr>:</case> <comment type="block" pos:start="2055:16" pos:end="2055:31">/* mov Ev, Gv */</comment>

        <if_stmt pos:start="2057:9" pos:end="2063:33"><if pos:start="2057:9" pos:end="2059:25">if <condition pos:start="2057:12" pos:end="2057:25">(<expr pos:start="2057:13" pos:end="2057:24"><operator pos:start="2057:13" pos:end="2057:13">(</operator><name pos:start="2057:14" pos:end="2057:14">b</name> <operator pos:start="2057:16" pos:end="2057:16">&amp;</operator> <literal type="number" pos:start="2057:18" pos:end="2057:18">1</literal><operator pos:start="2057:19" pos:end="2057:19">)</operator> <operator pos:start="2057:21" pos:end="2057:22">==</operator> <literal type="number" pos:start="2057:24" pos:end="2057:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2059:13" pos:end="2059:25"><block_content pos:start="2059:13" pos:end="2059:25">

            <expr_stmt pos:start="2059:13" pos:end="2059:25"><expr pos:start="2059:13" pos:end="2059:24"><name pos:start="2059:13" pos:end="2059:14">ot</name> <operator pos:start="2059:16" pos:end="2059:16">=</operator> <name pos:start="2059:18" pos:end="2059:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2061:9" pos:end="2063:33">else<block type="pseudo" pos:start="2063:13" pos:end="2063:33"><block_content pos:start="2063:13" pos:end="2063:33">

            <expr_stmt pos:start="2063:13" pos:end="2063:33"><expr pos:start="2063:13" pos:end="2063:32"><name pos:start="2063:13" pos:end="2063:14">ot</name> <operator pos:start="2063:16" pos:end="2063:16">=</operator> <name pos:start="2063:18" pos:end="2063:24">OT_WORD</name> <operator pos:start="2063:26" pos:end="2063:26">+</operator> <name pos:start="2063:28" pos:end="2063:32">dflag</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="2065:9" pos:end="2065:44"><expr pos:start="2065:9" pos:end="2065:43"><name pos:start="2065:9" pos:end="2065:13">modrm</name> <operator pos:start="2065:15" pos:end="2065:15">=</operator> <call pos:start="2065:17" pos:end="2065:43"><name pos:start="2065:17" pos:end="2065:29">cpu_ldub_code</name><argument_list pos:start="2065:30" pos:end="2065:43">(<argument pos:start="2065:31" pos:end="2065:33"><expr pos:start="2065:31" pos:end="2065:33"><name pos:start="2065:31" pos:end="2065:33">env</name></expr></argument>, <argument pos:start="2065:36" pos:end="2065:42"><expr pos:start="2065:36" pos:end="2065:42"><name pos:start="2065:36" pos:end="2065:40"><name pos:start="2065:36" pos:end="2065:36">s</name><operator pos:start="2065:37" pos:end="2065:38">-&gt;</operator><name pos:start="2065:39" pos:end="2065:40">pc</name></name><operator pos:start="2065:41" pos:end="2065:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2067:9" pos:end="2067:41"><expr pos:start="2067:9" pos:end="2067:40"><name pos:start="2067:9" pos:end="2067:11">reg</name> <operator pos:start="2067:13" pos:end="2067:13">=</operator> <operator pos:start="2067:15" pos:end="2067:15">(</operator><operator pos:start="2067:16" pos:end="2067:16">(</operator><name pos:start="2067:17" pos:end="2067:21">modrm</name> <operator pos:start="2067:23" pos:end="2067:24">&gt;&gt;</operator> <literal type="number" pos:start="2067:26" pos:end="2067:26">3</literal><operator pos:start="2067:27" pos:end="2067:27">)</operator> <operator pos:start="2067:29" pos:end="2067:29">&amp;</operator> <literal type="number" pos:start="2067:31" pos:end="2067:31">7</literal><operator pos:start="2067:32" pos:end="2067:32">)</operator> <operator pos:start="2067:34" pos:end="2067:34">|</operator> <name pos:start="2067:36" pos:end="2067:40">rex_r</name></expr>;</expr_stmt>



        <expr_stmt pos:start="2071:9" pos:end="2071:54"><expr pos:start="2071:9" pos:end="2071:53"><call pos:start="2071:9" pos:end="2071:53"><name pos:start="2071:9" pos:end="2071:22">gen_ldst_modrm</name><argument_list pos:start="2071:23" pos:end="2071:53">(<argument pos:start="2071:24" pos:end="2071:26"><expr pos:start="2071:24" pos:end="2071:26"><name pos:start="2071:24" pos:end="2071:26">env</name></expr></argument>, <argument pos:start="2071:29" pos:end="2071:29"><expr pos:start="2071:29" pos:end="2071:29"><name pos:start="2071:29" pos:end="2071:29">s</name></expr></argument>, <argument pos:start="2071:32" pos:end="2071:36"><expr pos:start="2071:32" pos:end="2071:36"><name pos:start="2071:32" pos:end="2071:36">modrm</name></expr></argument>, <argument pos:start="2071:39" pos:end="2071:40"><expr pos:start="2071:39" pos:end="2071:40"><name pos:start="2071:39" pos:end="2071:40">ot</name></expr></argument>, <argument pos:start="2071:43" pos:end="2071:49"><expr pos:start="2071:43" pos:end="2071:49"><name pos:start="2071:43" pos:end="2071:49">OR_TMP0</name></expr></argument>, <argument pos:start="2071:52" pos:end="2071:52"><expr pos:start="2071:52" pos:end="2071:52"><literal type="number" pos:start="2071:52" pos:end="2071:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2073:9" pos:end="2073:35"><expr pos:start="2073:9" pos:end="2073:34"><call pos:start="2073:9" pos:end="2073:34"><name pos:start="2073:9" pos:end="2073:25">gen_op_mov_reg_T0</name><argument_list pos:start="2073:26" pos:end="2073:34">(<argument pos:start="2073:27" pos:end="2073:28"><expr pos:start="2073:27" pos:end="2073:28"><name pos:start="2073:27" pos:end="2073:28">ot</name></expr></argument>, <argument pos:start="2073:31" pos:end="2073:33"><expr pos:start="2073:31" pos:end="2073:33"><name pos:start="2073:31" pos:end="2073:33">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2075:9" pos:end="2075:14">break;</break>

    <case pos:start="2077:5" pos:end="2077:14">case <expr pos:start="2077:10" pos:end="2077:13"><literal type="number" pos:start="2077:10" pos:end="2077:13">0x8e</literal></expr>:</case> <comment type="block" pos:start="2077:16" pos:end="2077:32">/* mov seg, Gv */</comment>

        <expr_stmt pos:start="2079:9" pos:end="2079:44"><expr pos:start="2079:9" pos:end="2079:43"><name pos:start="2079:9" pos:end="2079:13">modrm</name> <operator pos:start="2079:15" pos:end="2079:15">=</operator> <call pos:start="2079:17" pos:end="2079:43"><name pos:start="2079:17" pos:end="2079:29">cpu_ldub_code</name><argument_list pos:start="2079:30" pos:end="2079:43">(<argument pos:start="2079:31" pos:end="2079:33"><expr pos:start="2079:31" pos:end="2079:33"><name pos:start="2079:31" pos:end="2079:33">env</name></expr></argument>, <argument pos:start="2079:36" pos:end="2079:42"><expr pos:start="2079:36" pos:end="2079:42"><name pos:start="2079:36" pos:end="2079:40"><name pos:start="2079:36" pos:end="2079:36">s</name><operator pos:start="2079:37" pos:end="2079:38">-&gt;</operator><name pos:start="2079:39" pos:end="2079:40">pc</name></name><operator pos:start="2079:41" pos:end="2079:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2081:9" pos:end="2081:31"><expr pos:start="2081:9" pos:end="2081:30"><name pos:start="2081:9" pos:end="2081:11">reg</name> <operator pos:start="2081:13" pos:end="2081:13">=</operator> <operator pos:start="2081:15" pos:end="2081:15">(</operator><name pos:start="2081:16" pos:end="2081:20">modrm</name> <operator pos:start="2081:22" pos:end="2081:23">&gt;&gt;</operator> <literal type="number" pos:start="2081:25" pos:end="2081:25">3</literal><operator pos:start="2081:26" pos:end="2081:26">)</operator> <operator pos:start="2081:28" pos:end="2081:28">&amp;</operator> <literal type="number" pos:start="2081:30" pos:end="2081:30">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="2083:9" pos:end="2085:28"><if pos:start="2083:9" pos:end="2085:28">if <condition pos:start="2083:12" pos:end="2083:36">(<expr pos:start="2083:13" pos:end="2083:35"><name pos:start="2083:13" pos:end="2083:15">reg</name> <operator pos:start="2083:17" pos:end="2083:18">&gt;=</operator> <literal type="number" pos:start="2083:20" pos:end="2083:20">6</literal> <operator pos:start="2083:22" pos:end="2083:23">||</operator> <name pos:start="2083:25" pos:end="2083:27">reg</name> <operator pos:start="2083:29" pos:end="2083:30">==</operator> <name pos:start="2083:32" pos:end="2083:35">R_CS</name></expr>)</condition><block type="pseudo" pos:start="2085:13" pos:end="2085:28"><block_content pos:start="2085:13" pos:end="2085:28">

            <goto pos:start="2085:13" pos:end="2085:28">goto <name pos:start="2085:18" pos:end="2085:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2087:9" pos:end="2087:59"><expr pos:start="2087:9" pos:end="2087:58"><call pos:start="2087:9" pos:end="2087:58"><name pos:start="2087:9" pos:end="2087:22">gen_ldst_modrm</name><argument_list pos:start="2087:23" pos:end="2087:58">(<argument pos:start="2087:24" pos:end="2087:26"><expr pos:start="2087:24" pos:end="2087:26"><name pos:start="2087:24" pos:end="2087:26">env</name></expr></argument>, <argument pos:start="2087:29" pos:end="2087:29"><expr pos:start="2087:29" pos:end="2087:29"><name pos:start="2087:29" pos:end="2087:29">s</name></expr></argument>, <argument pos:start="2087:32" pos:end="2087:36"><expr pos:start="2087:32" pos:end="2087:36"><name pos:start="2087:32" pos:end="2087:36">modrm</name></expr></argument>, <argument pos:start="2087:39" pos:end="2087:45"><expr pos:start="2087:39" pos:end="2087:45"><name pos:start="2087:39" pos:end="2087:45">OT_WORD</name></expr></argument>, <argument pos:start="2087:48" pos:end="2087:54"><expr pos:start="2087:48" pos:end="2087:54"><name pos:start="2087:48" pos:end="2087:54">OR_TMP0</name></expr></argument>, <argument pos:start="2087:57" pos:end="2087:57"><expr pos:start="2087:57" pos:end="2087:57"><literal type="number" pos:start="2087:57" pos:end="2087:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2089:9" pos:end="2089:55"><expr pos:start="2089:9" pos:end="2089:54"><call pos:start="2089:9" pos:end="2089:54"><name pos:start="2089:9" pos:end="2089:23">gen_movl_seg_T0</name><argument_list pos:start="2089:24" pos:end="2089:54">(<argument pos:start="2089:25" pos:end="2089:25"><expr pos:start="2089:25" pos:end="2089:25"><name pos:start="2089:25" pos:end="2089:25">s</name></expr></argument>, <argument pos:start="2089:28" pos:end="2089:30"><expr pos:start="2089:28" pos:end="2089:30"><name pos:start="2089:28" pos:end="2089:30">reg</name></expr></argument>, <argument pos:start="2089:33" pos:end="2089:53"><expr pos:start="2089:33" pos:end="2089:53"><name pos:start="2089:33" pos:end="2089:40">pc_start</name> <operator pos:start="2089:42" pos:end="2089:42">-</operator> <name pos:start="2089:44" pos:end="2089:53"><name pos:start="2089:44" pos:end="2089:44">s</name><operator pos:start="2089:45" pos:end="2089:46">-&gt;</operator><name pos:start="2089:47" pos:end="2089:53">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2091:9" pos:end="2105:9"><if pos:start="2091:9" pos:end="2105:9">if <condition pos:start="2091:12" pos:end="2091:24">(<expr pos:start="2091:13" pos:end="2091:23"><name pos:start="2091:13" pos:end="2091:15">reg</name> <operator pos:start="2091:17" pos:end="2091:18">==</operator> <name pos:start="2091:20" pos:end="2091:23">R_SS</name></expr>)</condition> <block pos:start="2091:26" pos:end="2105:9">{<block_content pos:start="2099:13" pos:end="2103:22">

            <comment type="block" pos:start="2093:13" pos:end="2093:56">/* if reg == SS, inhibit interrupts/trace */</comment>

            <comment type="block" pos:start="2095:13" pos:end="2097:33">/* If several instructions disable interrupts, only the

               _first_ does it */</comment>

            <if_stmt pos:start="2099:13" pos:end="2101:52"><if pos:start="2099:13" pos:end="2101:52">if <condition pos:start="2099:16" pos:end="2099:54">(<expr pos:start="2099:17" pos:end="2099:53"><operator pos:start="2099:17" pos:end="2099:17">!</operator><operator pos:start="2099:18" pos:end="2099:18">(</operator><name pos:start="2099:19" pos:end="2099:30"><name pos:start="2099:19" pos:end="2099:19">s</name><operator pos:start="2099:20" pos:end="2099:21">-&gt;</operator><name pos:start="2099:22" pos:end="2099:23">tb</name><operator pos:start="2099:24" pos:end="2099:25">-&gt;</operator><name pos:start="2099:26" pos:end="2099:30">flags</name></name> <operator pos:start="2099:32" pos:end="2099:32">&amp;</operator> <name pos:start="2099:34" pos:end="2099:52">HF_INHIBIT_IRQ_MASK</name><operator pos:start="2099:53" pos:end="2099:53">)</operator></expr>)</condition><block type="pseudo" pos:start="2101:17" pos:end="2101:52"><block_content pos:start="2101:17" pos:end="2101:52">

                <expr_stmt pos:start="2101:17" pos:end="2101:52"><expr pos:start="2101:17" pos:end="2101:51"><call pos:start="2101:17" pos:end="2101:51"><name pos:start="2101:17" pos:end="2101:42">gen_helper_set_inhibit_irq</name><argument_list pos:start="2101:43" pos:end="2101:51">(<argument pos:start="2101:44" pos:end="2101:50"><expr pos:start="2101:44" pos:end="2101:50"><name pos:start="2101:44" pos:end="2101:50">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2103:13" pos:end="2103:22"><expr pos:start="2103:13" pos:end="2103:21"><name pos:start="2103:13" pos:end="2103:17"><name pos:start="2103:13" pos:end="2103:13">s</name><operator pos:start="2103:14" pos:end="2103:15">-&gt;</operator><name pos:start="2103:16" pos:end="2103:17">tf</name></name> <operator pos:start="2103:19" pos:end="2103:19">=</operator> <literal type="number" pos:start="2103:21" pos:end="2103:21">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="2107:9" pos:end="2113:9"><if pos:start="2107:9" pos:end="2113:9">if <condition pos:start="2107:12" pos:end="2107:22">(<expr pos:start="2107:13" pos:end="2107:21"><name pos:start="2107:13" pos:end="2107:21"><name pos:start="2107:13" pos:end="2107:13">s</name><operator pos:start="2107:14" pos:end="2107:15">-&gt;</operator><name pos:start="2107:16" pos:end="2107:21">is_jmp</name></name></expr>)</condition> <block pos:start="2107:24" pos:end="2113:9">{<block_content pos:start="2109:13" pos:end="2111:23">

            <expr_stmt pos:start="2109:13" pos:end="2109:43"><expr pos:start="2109:13" pos:end="2109:42"><call pos:start="2109:13" pos:end="2109:42"><name pos:start="2109:13" pos:end="2109:22">gen_jmp_im</name><argument_list pos:start="2109:23" pos:end="2109:42">(<argument pos:start="2109:24" pos:end="2109:41"><expr pos:start="2109:24" pos:end="2109:41"><name pos:start="2109:24" pos:end="2109:28"><name pos:start="2109:24" pos:end="2109:24">s</name><operator pos:start="2109:25" pos:end="2109:26">-&gt;</operator><name pos:start="2109:27" pos:end="2109:28">pc</name></name> <operator pos:start="2109:30" pos:end="2109:30">-</operator> <name pos:start="2109:32" pos:end="2109:41"><name pos:start="2109:32" pos:end="2109:32">s</name><operator pos:start="2109:33" pos:end="2109:34">-&gt;</operator><name pos:start="2109:35" pos:end="2109:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2111:13" pos:end="2111:23"><expr pos:start="2111:13" pos:end="2111:22"><call pos:start="2111:13" pos:end="2111:22"><name pos:start="2111:13" pos:end="2111:19">gen_eob</name><argument_list pos:start="2111:20" pos:end="2111:22">(<argument pos:start="2111:21" pos:end="2111:21"><expr pos:start="2111:21" pos:end="2111:21"><name pos:start="2111:21" pos:end="2111:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="2115:9" pos:end="2115:14">break;</break>

    <case pos:start="2117:5" pos:end="2117:14">case <expr pos:start="2117:10" pos:end="2117:13"><literal type="number" pos:start="2117:10" pos:end="2117:13">0x8c</literal></expr>:</case> <comment type="block" pos:start="2117:16" pos:end="2117:32">/* mov Gv, seg */</comment>

        <expr_stmt pos:start="2119:9" pos:end="2119:44"><expr pos:start="2119:9" pos:end="2119:43"><name pos:start="2119:9" pos:end="2119:13">modrm</name> <operator pos:start="2119:15" pos:end="2119:15">=</operator> <call pos:start="2119:17" pos:end="2119:43"><name pos:start="2119:17" pos:end="2119:29">cpu_ldub_code</name><argument_list pos:start="2119:30" pos:end="2119:43">(<argument pos:start="2119:31" pos:end="2119:33"><expr pos:start="2119:31" pos:end="2119:33"><name pos:start="2119:31" pos:end="2119:33">env</name></expr></argument>, <argument pos:start="2119:36" pos:end="2119:42"><expr pos:start="2119:36" pos:end="2119:42"><name pos:start="2119:36" pos:end="2119:40"><name pos:start="2119:36" pos:end="2119:36">s</name><operator pos:start="2119:37" pos:end="2119:38">-&gt;</operator><name pos:start="2119:39" pos:end="2119:40">pc</name></name><operator pos:start="2119:41" pos:end="2119:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2121:9" pos:end="2121:31"><expr pos:start="2121:9" pos:end="2121:30"><name pos:start="2121:9" pos:end="2121:11">reg</name> <operator pos:start="2121:13" pos:end="2121:13">=</operator> <operator pos:start="2121:15" pos:end="2121:15">(</operator><name pos:start="2121:16" pos:end="2121:20">modrm</name> <operator pos:start="2121:22" pos:end="2121:23">&gt;&gt;</operator> <literal type="number" pos:start="2121:25" pos:end="2121:25">3</literal><operator pos:start="2121:26" pos:end="2121:26">)</operator> <operator pos:start="2121:28" pos:end="2121:28">&amp;</operator> <literal type="number" pos:start="2121:30" pos:end="2121:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2123:9" pos:end="2123:31"><expr pos:start="2123:9" pos:end="2123:30"><name pos:start="2123:9" pos:end="2123:11">mod</name> <operator pos:start="2123:13" pos:end="2123:13">=</operator> <operator pos:start="2123:15" pos:end="2123:15">(</operator><name pos:start="2123:16" pos:end="2123:20">modrm</name> <operator pos:start="2123:22" pos:end="2123:23">&gt;&gt;</operator> <literal type="number" pos:start="2123:25" pos:end="2123:25">6</literal><operator pos:start="2123:26" pos:end="2123:26">)</operator> <operator pos:start="2123:28" pos:end="2123:28">&amp;</operator> <literal type="number" pos:start="2123:30" pos:end="2123:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="2125:9" pos:end="2127:28"><if pos:start="2125:9" pos:end="2127:28">if <condition pos:start="2125:12" pos:end="2125:21">(<expr pos:start="2125:13" pos:end="2125:20"><name pos:start="2125:13" pos:end="2125:15">reg</name> <operator pos:start="2125:17" pos:end="2125:18">&gt;=</operator> <literal type="number" pos:start="2125:20" pos:end="2125:20">6</literal></expr>)</condition><block type="pseudo" pos:start="2127:13" pos:end="2127:28"><block_content pos:start="2127:13" pos:end="2127:28">

            <goto pos:start="2127:13" pos:end="2127:28">goto <name pos:start="2127:18" pos:end="2127:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2129:9" pos:end="2129:32"><expr pos:start="2129:9" pos:end="2129:31"><call pos:start="2129:9" pos:end="2129:31"><name pos:start="2129:9" pos:end="2129:26">gen_op_movl_T0_seg</name><argument_list pos:start="2129:27" pos:end="2129:31">(<argument pos:start="2129:28" pos:end="2129:30"><expr pos:start="2129:28" pos:end="2129:30"><name pos:start="2129:28" pos:end="2129:30">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2131:9" pos:end="2137:25"><if pos:start="2131:9" pos:end="2133:33">if <condition pos:start="2131:12" pos:end="2131:21">(<expr pos:start="2131:13" pos:end="2131:20"><name pos:start="2131:13" pos:end="2131:15">mod</name> <operator pos:start="2131:17" pos:end="2131:18">==</operator> <literal type="number" pos:start="2131:20" pos:end="2131:20">3</literal></expr>)</condition><block type="pseudo" pos:start="2133:13" pos:end="2133:33"><block_content pos:start="2133:13" pos:end="2133:33">

            <expr_stmt pos:start="2133:13" pos:end="2133:33"><expr pos:start="2133:13" pos:end="2133:32"><name pos:start="2133:13" pos:end="2133:14">ot</name> <operator pos:start="2133:16" pos:end="2133:16">=</operator> <name pos:start="2133:18" pos:end="2133:24">OT_WORD</name> <operator pos:start="2133:26" pos:end="2133:26">+</operator> <name pos:start="2133:28" pos:end="2133:32">dflag</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2135:9" pos:end="2137:25">else<block type="pseudo" pos:start="2137:13" pos:end="2137:25"><block_content pos:start="2137:13" pos:end="2137:25">

            <expr_stmt pos:start="2137:13" pos:end="2137:25"><expr pos:start="2137:13" pos:end="2137:24"><name pos:start="2137:13" pos:end="2137:14">ot</name> <operator pos:start="2137:16" pos:end="2137:16">=</operator> <name pos:start="2137:18" pos:end="2137:24">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="2139:9" pos:end="2139:54"><expr pos:start="2139:9" pos:end="2139:53"><call pos:start="2139:9" pos:end="2139:53"><name pos:start="2139:9" pos:end="2139:22">gen_ldst_modrm</name><argument_list pos:start="2139:23" pos:end="2139:53">(<argument pos:start="2139:24" pos:end="2139:26"><expr pos:start="2139:24" pos:end="2139:26"><name pos:start="2139:24" pos:end="2139:26">env</name></expr></argument>, <argument pos:start="2139:29" pos:end="2139:29"><expr pos:start="2139:29" pos:end="2139:29"><name pos:start="2139:29" pos:end="2139:29">s</name></expr></argument>, <argument pos:start="2139:32" pos:end="2139:36"><expr pos:start="2139:32" pos:end="2139:36"><name pos:start="2139:32" pos:end="2139:36">modrm</name></expr></argument>, <argument pos:start="2139:39" pos:end="2139:40"><expr pos:start="2139:39" pos:end="2139:40"><name pos:start="2139:39" pos:end="2139:40">ot</name></expr></argument>, <argument pos:start="2139:43" pos:end="2139:49"><expr pos:start="2139:43" pos:end="2139:49"><name pos:start="2139:43" pos:end="2139:49">OR_TMP0</name></expr></argument>, <argument pos:start="2139:52" pos:end="2139:52"><expr pos:start="2139:52" pos:end="2139:52"><literal type="number" pos:start="2139:52" pos:end="2139:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2141:9" pos:end="2141:14">break;</break>



    <case pos:start="2145:5" pos:end="2145:15">case <expr pos:start="2145:10" pos:end="2145:14"><literal type="number" pos:start="2145:10" pos:end="2145:14">0x1b6</literal></expr>:</case> <comment type="block" pos:start="2145:17" pos:end="2145:35">/* movzbS Gv, Eb */</comment>

    <case pos:start="2147:5" pos:end="2147:15">case <expr pos:start="2147:10" pos:end="2147:14"><literal type="number" pos:start="2147:10" pos:end="2147:14">0x1b7</literal></expr>:</case> <comment type="block" pos:start="2147:17" pos:end="2147:35">/* movzwS Gv, Eb */</comment>

    <case pos:start="2149:5" pos:end="2149:15">case <expr pos:start="2149:10" pos:end="2149:14"><literal type="number" pos:start="2149:10" pos:end="2149:14">0x1be</literal></expr>:</case> <comment type="block" pos:start="2149:17" pos:end="2149:35">/* movsbS Gv, Eb */</comment>

    <case pos:start="2151:5" pos:end="2151:15">case <expr pos:start="2151:10" pos:end="2151:14"><literal type="number" pos:start="2151:10" pos:end="2151:14">0x1bf</literal></expr>:</case> <comment type="block" pos:start="2151:17" pos:end="2151:35">/* movswS Gv, Eb */</comment>

        <block pos:start="2153:9" pos:end="2229:9">{<block_content pos:start="2155:13" pos:end="2227:13">

            <decl_stmt pos:start="2155:13" pos:end="2155:21"><decl pos:start="2155:13" pos:end="2155:20"><type pos:start="2155:13" pos:end="2155:15"><name pos:start="2155:13" pos:end="2155:15">int</name></type> <name pos:start="2155:17" pos:end="2155:20">d_ot</name></decl>;</decl_stmt>

            <comment type="block" pos:start="2157:13" pos:end="2157:49">/* d_ot is the size of destination */</comment>

            <expr_stmt pos:start="2159:13" pos:end="2159:35"><expr pos:start="2159:13" pos:end="2159:34"><name pos:start="2159:13" pos:end="2159:16">d_ot</name> <operator pos:start="2159:18" pos:end="2159:18">=</operator> <name pos:start="2159:20" pos:end="2159:24">dflag</name> <operator pos:start="2159:26" pos:end="2159:26">+</operator> <name pos:start="2159:28" pos:end="2159:34">OT_WORD</name></expr>;</expr_stmt>

            <comment type="block" pos:start="2161:13" pos:end="2161:42">/* ot is the size of source */</comment>

            <expr_stmt pos:start="2163:13" pos:end="2163:35"><expr pos:start="2163:13" pos:end="2163:34"><name pos:start="2163:13" pos:end="2163:14">ot</name> <operator pos:start="2163:16" pos:end="2163:16">=</operator> <operator pos:start="2163:18" pos:end="2163:18">(</operator><name pos:start="2163:19" pos:end="2163:19">b</name> <operator pos:start="2163:21" pos:end="2163:21">&amp;</operator> <literal type="number" pos:start="2163:23" pos:end="2163:23">1</literal><operator pos:start="2163:24" pos:end="2163:24">)</operator> <operator pos:start="2163:26" pos:end="2163:26">+</operator> <name pos:start="2163:28" pos:end="2163:34">OT_BYTE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2165:13" pos:end="2165:48"><expr pos:start="2165:13" pos:end="2165:47"><name pos:start="2165:13" pos:end="2165:17">modrm</name> <operator pos:start="2165:19" pos:end="2165:19">=</operator> <call pos:start="2165:21" pos:end="2165:47"><name pos:start="2165:21" pos:end="2165:33">cpu_ldub_code</name><argument_list pos:start="2165:34" pos:end="2165:47">(<argument pos:start="2165:35" pos:end="2165:37"><expr pos:start="2165:35" pos:end="2165:37"><name pos:start="2165:35" pos:end="2165:37">env</name></expr></argument>, <argument pos:start="2165:40" pos:end="2165:46"><expr pos:start="2165:40" pos:end="2165:46"><name pos:start="2165:40" pos:end="2165:44"><name pos:start="2165:40" pos:end="2165:40">s</name><operator pos:start="2165:41" pos:end="2165:42">-&gt;</operator><name pos:start="2165:43" pos:end="2165:44">pc</name></name><operator pos:start="2165:45" pos:end="2165:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2167:13" pos:end="2167:45"><expr pos:start="2167:13" pos:end="2167:44"><name pos:start="2167:13" pos:end="2167:15">reg</name> <operator pos:start="2167:17" pos:end="2167:17">=</operator> <operator pos:start="2167:19" pos:end="2167:19">(</operator><operator pos:start="2167:20" pos:end="2167:20">(</operator><name pos:start="2167:21" pos:end="2167:25">modrm</name> <operator pos:start="2167:27" pos:end="2167:28">&gt;&gt;</operator> <literal type="number" pos:start="2167:30" pos:end="2167:30">3</literal><operator pos:start="2167:31" pos:end="2167:31">)</operator> <operator pos:start="2167:33" pos:end="2167:33">&amp;</operator> <literal type="number" pos:start="2167:35" pos:end="2167:35">7</literal><operator pos:start="2167:36" pos:end="2167:36">)</operator> <operator pos:start="2167:38" pos:end="2167:38">|</operator> <name pos:start="2167:40" pos:end="2167:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2169:13" pos:end="2169:35"><expr pos:start="2169:13" pos:end="2169:34"><name pos:start="2169:13" pos:end="2169:15">mod</name> <operator pos:start="2169:17" pos:end="2169:17">=</operator> <operator pos:start="2169:19" pos:end="2169:19">(</operator><name pos:start="2169:20" pos:end="2169:24">modrm</name> <operator pos:start="2169:26" pos:end="2169:27">&gt;&gt;</operator> <literal type="number" pos:start="2169:29" pos:end="2169:29">6</literal><operator pos:start="2169:30" pos:end="2169:30">)</operator> <operator pos:start="2169:32" pos:end="2169:32">&amp;</operator> <literal type="number" pos:start="2169:34" pos:end="2169:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="2171:13" pos:end="2171:40"><expr pos:start="2171:13" pos:end="2171:39"><name pos:start="2171:13" pos:end="2171:14">rm</name> <operator pos:start="2171:16" pos:end="2171:16">=</operator> <operator pos:start="2171:18" pos:end="2171:18">(</operator><name pos:start="2171:19" pos:end="2171:23">modrm</name> <operator pos:start="2171:25" pos:end="2171:25">&amp;</operator> <literal type="number" pos:start="2171:27" pos:end="2171:27">7</literal><operator pos:start="2171:28" pos:end="2171:28">)</operator> <operator pos:start="2171:30" pos:end="2171:30">|</operator> <call pos:start="2171:32" pos:end="2171:39"><name pos:start="2171:32" pos:end="2171:36">REX_B</name><argument_list pos:start="2171:37" pos:end="2171:39">(<argument pos:start="2171:38" pos:end="2171:38"><expr pos:start="2171:38" pos:end="2171:38"><name pos:start="2171:38" pos:end="2171:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="2175:13" pos:end="2227:13"><if pos:start="2175:13" pos:end="2211:13">if <condition pos:start="2175:16" pos:end="2175:25">(<expr pos:start="2175:17" pos:end="2175:24"><name pos:start="2175:17" pos:end="2175:19">mod</name> <operator pos:start="2175:21" pos:end="2175:22">==</operator> <literal type="number" pos:start="2175:24" pos:end="2175:24">3</literal></expr>)</condition> <block pos:start="2175:27" pos:end="2211:13">{<block_content pos:start="2177:17" pos:end="2209:45">

                <expr_stmt pos:start="2177:17" pos:end="2177:45"><expr pos:start="2177:17" pos:end="2177:44"><call pos:start="2177:17" pos:end="2177:44"><name pos:start="2177:17" pos:end="2177:33">gen_op_mov_TN_reg</name><argument_list pos:start="2177:34" pos:end="2177:44">(<argument pos:start="2177:35" pos:end="2177:36"><expr pos:start="2177:35" pos:end="2177:36"><name pos:start="2177:35" pos:end="2177:36">ot</name></expr></argument>, <argument pos:start="2177:39" pos:end="2177:39"><expr pos:start="2177:39" pos:end="2177:39"><literal type="number" pos:start="2177:39" pos:end="2177:39">0</literal></expr></argument>, <argument pos:start="2177:42" pos:end="2177:43"><expr pos:start="2177:42" pos:end="2177:43"><name pos:start="2177:42" pos:end="2177:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="2179:17" pos:end="2207:17">switch<condition pos:start="2179:23" pos:end="2179:36">(<expr pos:start="2179:24" pos:end="2179:35"><name pos:start="2179:24" pos:end="2179:25">ot</name> <operator pos:start="2179:27" pos:end="2179:27">|</operator> <operator pos:start="2179:29" pos:end="2179:29">(</operator><name pos:start="2179:30" pos:end="2179:30">b</name> <operator pos:start="2179:32" pos:end="2179:32">&amp;</operator> <literal type="number" pos:start="2179:34" pos:end="2179:34">8</literal><operator pos:start="2179:35" pos:end="2179:35">)</operator></expr>)</condition> <block pos:start="2179:38" pos:end="2207:17">{<block_content pos:start="2181:17" pos:end="2205:26">

                <case pos:start="2181:17" pos:end="2181:29">case <expr pos:start="2181:22" pos:end="2181:28"><name pos:start="2181:22" pos:end="2181:28">OT_BYTE</name></expr>:</case>

                    <expr_stmt pos:start="2183:21" pos:end="2183:57"><expr pos:start="2183:21" pos:end="2183:56"><call pos:start="2183:21" pos:end="2183:56"><name pos:start="2183:21" pos:end="2183:36">tcg_gen_ext8u_tl</name><argument_list pos:start="2183:37" pos:end="2183:56">(<argument pos:start="2183:38" pos:end="2183:45"><expr pos:start="2183:38" pos:end="2183:45"><name pos:start="2183:38" pos:end="2183:45"><name pos:start="2183:38" pos:end="2183:42">cpu_T</name><index pos:start="2183:43" pos:end="2183:45">[<expr pos:start="2183:44" pos:end="2183:44"><literal type="number" pos:start="2183:44" pos:end="2183:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2183:48" pos:end="2183:55"><expr pos:start="2183:48" pos:end="2183:55"><name pos:start="2183:48" pos:end="2183:55"><name pos:start="2183:48" pos:end="2183:52">cpu_T</name><index pos:start="2183:53" pos:end="2183:55">[<expr pos:start="2183:54" pos:end="2183:54"><literal type="number" pos:start="2183:54" pos:end="2183:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2185:21" pos:end="2185:26">break;</break>

                <case pos:start="2187:17" pos:end="2187:33">case <expr pos:start="2187:22" pos:end="2187:32"><name pos:start="2187:22" pos:end="2187:28">OT_BYTE</name> <operator pos:start="2187:30" pos:end="2187:30">|</operator> <literal type="number" pos:start="2187:32" pos:end="2187:32">8</literal></expr>:</case>

                    <expr_stmt pos:start="2189:21" pos:end="2189:57"><expr pos:start="2189:21" pos:end="2189:56"><call pos:start="2189:21" pos:end="2189:56"><name pos:start="2189:21" pos:end="2189:36">tcg_gen_ext8s_tl</name><argument_list pos:start="2189:37" pos:end="2189:56">(<argument pos:start="2189:38" pos:end="2189:45"><expr pos:start="2189:38" pos:end="2189:45"><name pos:start="2189:38" pos:end="2189:45"><name pos:start="2189:38" pos:end="2189:42">cpu_T</name><index pos:start="2189:43" pos:end="2189:45">[<expr pos:start="2189:44" pos:end="2189:44"><literal type="number" pos:start="2189:44" pos:end="2189:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2189:48" pos:end="2189:55"><expr pos:start="2189:48" pos:end="2189:55"><name pos:start="2189:48" pos:end="2189:55"><name pos:start="2189:48" pos:end="2189:52">cpu_T</name><index pos:start="2189:53" pos:end="2189:55">[<expr pos:start="2189:54" pos:end="2189:54"><literal type="number" pos:start="2189:54" pos:end="2189:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2191:21" pos:end="2191:26">break;</break>

                <case pos:start="2193:17" pos:end="2193:29">case <expr pos:start="2193:22" pos:end="2193:28"><name pos:start="2193:22" pos:end="2193:28">OT_WORD</name></expr>:</case>

                    <expr_stmt pos:start="2195:21" pos:end="2195:58"><expr pos:start="2195:21" pos:end="2195:57"><call pos:start="2195:21" pos:end="2195:57"><name pos:start="2195:21" pos:end="2195:37">tcg_gen_ext16u_tl</name><argument_list pos:start="2195:38" pos:end="2195:57">(<argument pos:start="2195:39" pos:end="2195:46"><expr pos:start="2195:39" pos:end="2195:46"><name pos:start="2195:39" pos:end="2195:46"><name pos:start="2195:39" pos:end="2195:43">cpu_T</name><index pos:start="2195:44" pos:end="2195:46">[<expr pos:start="2195:45" pos:end="2195:45"><literal type="number" pos:start="2195:45" pos:end="2195:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2195:49" pos:end="2195:56"><expr pos:start="2195:49" pos:end="2195:56"><name pos:start="2195:49" pos:end="2195:56"><name pos:start="2195:49" pos:end="2195:53">cpu_T</name><index pos:start="2195:54" pos:end="2195:56">[<expr pos:start="2195:55" pos:end="2195:55"><literal type="number" pos:start="2195:55" pos:end="2195:55">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2197:21" pos:end="2197:26">break;</break>

                <default pos:start="2199:17" pos:end="2199:24">default:</default>

                <case pos:start="2201:17" pos:end="2201:33">case <expr pos:start="2201:22" pos:end="2201:32"><name pos:start="2201:22" pos:end="2201:28">OT_WORD</name> <operator pos:start="2201:30" pos:end="2201:30">|</operator> <literal type="number" pos:start="2201:32" pos:end="2201:32">8</literal></expr>:</case>

                    <expr_stmt pos:start="2203:21" pos:end="2203:58"><expr pos:start="2203:21" pos:end="2203:57"><call pos:start="2203:21" pos:end="2203:57"><name pos:start="2203:21" pos:end="2203:37">tcg_gen_ext16s_tl</name><argument_list pos:start="2203:38" pos:end="2203:57">(<argument pos:start="2203:39" pos:end="2203:46"><expr pos:start="2203:39" pos:end="2203:46"><name pos:start="2203:39" pos:end="2203:46"><name pos:start="2203:39" pos:end="2203:43">cpu_T</name><index pos:start="2203:44" pos:end="2203:46">[<expr pos:start="2203:45" pos:end="2203:45"><literal type="number" pos:start="2203:45" pos:end="2203:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2203:49" pos:end="2203:56"><expr pos:start="2203:49" pos:end="2203:56"><name pos:start="2203:49" pos:end="2203:56"><name pos:start="2203:49" pos:end="2203:53">cpu_T</name><index pos:start="2203:54" pos:end="2203:56">[<expr pos:start="2203:55" pos:end="2203:55"><literal type="number" pos:start="2203:55" pos:end="2203:55">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2205:21" pos:end="2205:26">break;</break>

                </block_content>}</block></switch>

                <expr_stmt pos:start="2209:17" pos:end="2209:45"><expr pos:start="2209:17" pos:end="2209:44"><call pos:start="2209:17" pos:end="2209:44"><name pos:start="2209:17" pos:end="2209:33">gen_op_mov_reg_T0</name><argument_list pos:start="2209:34" pos:end="2209:44">(<argument pos:start="2209:35" pos:end="2209:38"><expr pos:start="2209:35" pos:end="2209:38"><name pos:start="2209:35" pos:end="2209:38">d_ot</name></expr></argument>, <argument pos:start="2209:41" pos:end="2209:43"><expr pos:start="2209:41" pos:end="2209:43"><name pos:start="2209:41" pos:end="2209:43">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2211:15" pos:end="2227:13">else <block pos:start="2211:20" pos:end="2227:13">{<block_content pos:start="2213:17" pos:end="2225:45">

                <expr_stmt pos:start="2213:17" pos:end="2213:70"><expr pos:start="2213:17" pos:end="2213:69"><call pos:start="2213:17" pos:end="2213:69"><name pos:start="2213:17" pos:end="2213:29">gen_lea_modrm</name><argument_list pos:start="2213:30" pos:end="2213:69">(<argument pos:start="2213:31" pos:end="2213:33"><expr pos:start="2213:31" pos:end="2213:33"><name pos:start="2213:31" pos:end="2213:33">env</name></expr></argument>, <argument pos:start="2213:36" pos:end="2213:36"><expr pos:start="2213:36" pos:end="2213:36"><name pos:start="2213:36" pos:end="2213:36">s</name></expr></argument>, <argument pos:start="2213:39" pos:end="2213:43"><expr pos:start="2213:39" pos:end="2213:43"><name pos:start="2213:39" pos:end="2213:43">modrm</name></expr></argument>, <argument pos:start="2213:46" pos:end="2213:54"><expr pos:start="2213:46" pos:end="2213:54"><operator pos:start="2213:46" pos:end="2213:46">&amp;</operator><name pos:start="2213:47" pos:end="2213:54">reg_addr</name></expr></argument>, <argument pos:start="2213:57" pos:end="2213:68"><expr pos:start="2213:57" pos:end="2213:68"><operator pos:start="2213:57" pos:end="2213:57">&amp;</operator><name pos:start="2213:58" pos:end="2213:68">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="2215:17" pos:end="2223:17"><if pos:start="2215:17" pos:end="2219:17">if <condition pos:start="2215:20" pos:end="2215:26">(<expr pos:start="2215:21" pos:end="2215:25"><name pos:start="2215:21" pos:end="2215:21">b</name> <operator pos:start="2215:23" pos:end="2215:23">&amp;</operator> <literal type="number" pos:start="2215:25" pos:end="2215:25">8</literal></expr>)</condition> <block pos:start="2215:28" pos:end="2219:17">{<block_content pos:start="2217:21" pos:end="2217:56">

                    <expr_stmt pos:start="2217:21" pos:end="2217:56"><expr pos:start="2217:21" pos:end="2217:55"><call pos:start="2217:21" pos:end="2217:55"><name pos:start="2217:21" pos:end="2217:36">gen_op_lds_T0_A0</name><argument_list pos:start="2217:37" pos:end="2217:55">(<argument pos:start="2217:38" pos:end="2217:54"><expr pos:start="2217:38" pos:end="2217:54"><name pos:start="2217:38" pos:end="2217:39">ot</name> <operator pos:start="2217:41" pos:end="2217:41">+</operator> <name pos:start="2217:43" pos:end="2217:54"><name pos:start="2217:43" pos:end="2217:43">s</name><operator pos:start="2217:44" pos:end="2217:45">-&gt;</operator><name pos:start="2217:46" pos:end="2217:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2219:19" pos:end="2223:17">else <block pos:start="2219:24" pos:end="2223:17">{<block_content pos:start="2221:21" pos:end="2221:56">

                    <expr_stmt pos:start="2221:21" pos:end="2221:56"><expr pos:start="2221:21" pos:end="2221:55"><call pos:start="2221:21" pos:end="2221:55"><name pos:start="2221:21" pos:end="2221:36">gen_op_ldu_T0_A0</name><argument_list pos:start="2221:37" pos:end="2221:55">(<argument pos:start="2221:38" pos:end="2221:54"><expr pos:start="2221:38" pos:end="2221:54"><name pos:start="2221:38" pos:end="2221:39">ot</name> <operator pos:start="2221:41" pos:end="2221:41">+</operator> <name pos:start="2221:43" pos:end="2221:54"><name pos:start="2221:43" pos:end="2221:43">s</name><operator pos:start="2221:44" pos:end="2221:45">-&gt;</operator><name pos:start="2221:46" pos:end="2221:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="2225:17" pos:end="2225:45"><expr pos:start="2225:17" pos:end="2225:44"><call pos:start="2225:17" pos:end="2225:44"><name pos:start="2225:17" pos:end="2225:33">gen_op_mov_reg_T0</name><argument_list pos:start="2225:34" pos:end="2225:44">(<argument pos:start="2225:35" pos:end="2225:38"><expr pos:start="2225:35" pos:end="2225:38"><name pos:start="2225:35" pos:end="2225:38">d_ot</name></expr></argument>, <argument pos:start="2225:41" pos:end="2225:43"><expr pos:start="2225:41" pos:end="2225:43"><name pos:start="2225:41" pos:end="2225:43">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="2231:9" pos:end="2231:14">break;</break>



    <case pos:start="2235:5" pos:end="2235:14">case <expr pos:start="2235:10" pos:end="2235:13"><literal type="number" pos:start="2235:10" pos:end="2235:13">0x8d</literal></expr>:</case> <comment type="block" pos:start="2235:16" pos:end="2235:24">/* lea */</comment>

        <expr_stmt pos:start="2237:9" pos:end="2237:29"><expr pos:start="2237:9" pos:end="2237:28"><name pos:start="2237:9" pos:end="2237:10">ot</name> <operator pos:start="2237:12" pos:end="2237:12">=</operator> <name pos:start="2237:14" pos:end="2237:18">dflag</name> <operator pos:start="2237:20" pos:end="2237:20">+</operator> <name pos:start="2237:22" pos:end="2237:28">OT_WORD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2239:9" pos:end="2239:44"><expr pos:start="2239:9" pos:end="2239:43"><name pos:start="2239:9" pos:end="2239:13">modrm</name> <operator pos:start="2239:15" pos:end="2239:15">=</operator> <call pos:start="2239:17" pos:end="2239:43"><name pos:start="2239:17" pos:end="2239:29">cpu_ldub_code</name><argument_list pos:start="2239:30" pos:end="2239:43">(<argument pos:start="2239:31" pos:end="2239:33"><expr pos:start="2239:31" pos:end="2239:33"><name pos:start="2239:31" pos:end="2239:33">env</name></expr></argument>, <argument pos:start="2239:36" pos:end="2239:42"><expr pos:start="2239:36" pos:end="2239:42"><name pos:start="2239:36" pos:end="2239:40"><name pos:start="2239:36" pos:end="2239:36">s</name><operator pos:start="2239:37" pos:end="2239:38">-&gt;</operator><name pos:start="2239:39" pos:end="2239:40">pc</name></name><operator pos:start="2239:41" pos:end="2239:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2241:9" pos:end="2241:31"><expr pos:start="2241:9" pos:end="2241:30"><name pos:start="2241:9" pos:end="2241:11">mod</name> <operator pos:start="2241:13" pos:end="2241:13">=</operator> <operator pos:start="2241:15" pos:end="2241:15">(</operator><name pos:start="2241:16" pos:end="2241:20">modrm</name> <operator pos:start="2241:22" pos:end="2241:23">&gt;&gt;</operator> <literal type="number" pos:start="2241:25" pos:end="2241:25">6</literal><operator pos:start="2241:26" pos:end="2241:26">)</operator> <operator pos:start="2241:28" pos:end="2241:28">&amp;</operator> <literal type="number" pos:start="2241:30" pos:end="2241:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="2243:9" pos:end="2245:28"><if pos:start="2243:9" pos:end="2245:28">if <condition pos:start="2243:12" pos:end="2243:21">(<expr pos:start="2243:13" pos:end="2243:20"><name pos:start="2243:13" pos:end="2243:15">mod</name> <operator pos:start="2243:17" pos:end="2243:18">==</operator> <literal type="number" pos:start="2243:20" pos:end="2243:20">3</literal></expr>)</condition><block type="pseudo" pos:start="2245:13" pos:end="2245:28"><block_content pos:start="2245:13" pos:end="2245:28">

            <goto pos:start="2245:13" pos:end="2245:28">goto <name pos:start="2245:18" pos:end="2245:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2247:9" pos:end="2247:41"><expr pos:start="2247:9" pos:end="2247:40"><name pos:start="2247:9" pos:end="2247:11">reg</name> <operator pos:start="2247:13" pos:end="2247:13">=</operator> <operator pos:start="2247:15" pos:end="2247:15">(</operator><operator pos:start="2247:16" pos:end="2247:16">(</operator><name pos:start="2247:17" pos:end="2247:21">modrm</name> <operator pos:start="2247:23" pos:end="2247:24">&gt;&gt;</operator> <literal type="number" pos:start="2247:26" pos:end="2247:26">3</literal><operator pos:start="2247:27" pos:end="2247:27">)</operator> <operator pos:start="2247:29" pos:end="2247:29">&amp;</operator> <literal type="number" pos:start="2247:31" pos:end="2247:31">7</literal><operator pos:start="2247:32" pos:end="2247:32">)</operator> <operator pos:start="2247:34" pos:end="2247:34">|</operator> <name pos:start="2247:36" pos:end="2247:40">rex_r</name></expr>;</expr_stmt>

        <comment type="block" pos:start="2249:9" pos:end="2249:53">/* we must ensure that no segment is added */</comment>

        <expr_stmt pos:start="2251:9" pos:end="2251:25"><expr pos:start="2251:9" pos:end="2251:24"><name pos:start="2251:9" pos:end="2251:19"><name pos:start="2251:9" pos:end="2251:9">s</name><operator pos:start="2251:10" pos:end="2251:11">-&gt;</operator><name pos:start="2251:12" pos:end="2251:19">override</name></name> <operator pos:start="2251:21" pos:end="2251:21">=</operator> <operator pos:start="2251:23" pos:end="2251:23">-</operator><literal type="number" pos:start="2251:24" pos:end="2251:24">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2253:9" pos:end="2253:24"><expr pos:start="2253:9" pos:end="2253:23"><name pos:start="2253:9" pos:end="2253:11">val</name> <operator pos:start="2253:13" pos:end="2253:13">=</operator> <name pos:start="2253:15" pos:end="2253:23"><name pos:start="2253:15" pos:end="2253:15">s</name><operator pos:start="2253:16" pos:end="2253:17">-&gt;</operator><name pos:start="2253:18" pos:end="2253:23">addseg</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="2255:9" pos:end="2255:22"><expr pos:start="2255:9" pos:end="2255:21"><name pos:start="2255:9" pos:end="2255:17"><name pos:start="2255:9" pos:end="2255:9">s</name><operator pos:start="2255:10" pos:end="2255:11">-&gt;</operator><name pos:start="2255:12" pos:end="2255:17">addseg</name></name> <operator pos:start="2255:19" pos:end="2255:19">=</operator> <literal type="number" pos:start="2255:21" pos:end="2255:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2257:9" pos:end="2257:62"><expr pos:start="2257:9" pos:end="2257:61"><call pos:start="2257:9" pos:end="2257:61"><name pos:start="2257:9" pos:end="2257:21">gen_lea_modrm</name><argument_list pos:start="2257:22" pos:end="2257:61">(<argument pos:start="2257:23" pos:end="2257:25"><expr pos:start="2257:23" pos:end="2257:25"><name pos:start="2257:23" pos:end="2257:25">env</name></expr></argument>, <argument pos:start="2257:28" pos:end="2257:28"><expr pos:start="2257:28" pos:end="2257:28"><name pos:start="2257:28" pos:end="2257:28">s</name></expr></argument>, <argument pos:start="2257:31" pos:end="2257:35"><expr pos:start="2257:31" pos:end="2257:35"><name pos:start="2257:31" pos:end="2257:35">modrm</name></expr></argument>, <argument pos:start="2257:38" pos:end="2257:46"><expr pos:start="2257:38" pos:end="2257:46"><operator pos:start="2257:38" pos:end="2257:38">&amp;</operator><name pos:start="2257:39" pos:end="2257:46">reg_addr</name></expr></argument>, <argument pos:start="2257:49" pos:end="2257:60"><expr pos:start="2257:49" pos:end="2257:60"><operator pos:start="2257:49" pos:end="2257:49">&amp;</operator><name pos:start="2257:50" pos:end="2257:60">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2259:9" pos:end="2259:24"><expr pos:start="2259:9" pos:end="2259:23"><name pos:start="2259:9" pos:end="2259:17"><name pos:start="2259:9" pos:end="2259:9">s</name><operator pos:start="2259:10" pos:end="2259:11">-&gt;</operator><name pos:start="2259:12" pos:end="2259:17">addseg</name></name> <operator pos:start="2259:19" pos:end="2259:19">=</operator> <name pos:start="2259:21" pos:end="2259:23">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2261:9" pos:end="2261:45"><expr pos:start="2261:9" pos:end="2261:44"><call pos:start="2261:9" pos:end="2261:44"><name pos:start="2261:9" pos:end="2261:25">gen_op_mov_reg_A0</name><argument_list pos:start="2261:26" pos:end="2261:44">(<argument pos:start="2261:27" pos:end="2261:38"><expr pos:start="2261:27" pos:end="2261:38"><name pos:start="2261:27" pos:end="2261:28">ot</name> <operator pos:start="2261:30" pos:end="2261:30">-</operator> <name pos:start="2261:32" pos:end="2261:38">OT_WORD</name></expr></argument>, <argument pos:start="2261:41" pos:end="2261:43"><expr pos:start="2261:41" pos:end="2261:43"><name pos:start="2261:41" pos:end="2261:43">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2263:9" pos:end="2263:14">break;</break>



    <case pos:start="2267:5" pos:end="2267:14">case <expr pos:start="2267:10" pos:end="2267:13"><literal type="number" pos:start="2267:10" pos:end="2267:13">0xa0</literal></expr>:</case> <comment type="block" pos:start="2267:16" pos:end="2267:32">/* mov EAX, Ov */</comment>

    <case pos:start="2269:5" pos:end="2269:14">case <expr pos:start="2269:10" pos:end="2269:13"><literal type="number" pos:start="2269:10" pos:end="2269:13">0xa1</literal></expr>:</case>

    <case pos:start="2271:5" pos:end="2271:14">case <expr pos:start="2271:10" pos:end="2271:13"><literal type="number" pos:start="2271:10" pos:end="2271:13">0xa2</literal></expr>:</case> <comment type="block" pos:start="2271:16" pos:end="2271:32">/* mov Ov, EAX */</comment>

    <case pos:start="2273:5" pos:end="2273:14">case <expr pos:start="2273:10" pos:end="2273:13"><literal type="number" pos:start="2273:10" pos:end="2273:13">0xa3</literal></expr>:</case>

        <block pos:start="2275:9" pos:end="2335:9">{<block_content pos:start="2277:13" pos:end="2333:13">

            <decl_stmt pos:start="2277:13" pos:end="2277:37"><decl pos:start="2277:13" pos:end="2277:36"><type pos:start="2277:13" pos:end="2277:24"><name pos:start="2277:13" pos:end="2277:24">target_ulong</name></type> <name pos:start="2277:26" pos:end="2277:36">offset_addr</name></decl>;</decl_stmt>



            <if_stmt pos:start="2281:13" pos:end="2290:0"><if pos:start="2281:13" pos:end="2283:29">if <condition pos:start="2281:16" pos:end="2281:29">(<expr pos:start="2281:17" pos:end="2281:28"><operator pos:start="2281:17" pos:end="2281:17">(</operator><name pos:start="2281:18" pos:end="2281:18">b</name> <operator pos:start="2281:20" pos:end="2281:20">&amp;</operator> <literal type="number" pos:start="2281:22" pos:end="2281:22">1</literal><operator pos:start="2281:23" pos:end="2281:23">)</operator> <operator pos:start="2281:25" pos:end="2281:26">==</operator> <literal type="number" pos:start="2281:28" pos:end="2281:28">0</literal></expr>)</condition><block type="pseudo" pos:start="2283:17" pos:end="2283:29"><block_content pos:start="2283:17" pos:end="2283:29">

                <expr_stmt pos:start="2283:17" pos:end="2283:29"><expr pos:start="2283:17" pos:end="2283:28"><name pos:start="2283:17" pos:end="2283:18">ot</name> <operator pos:start="2283:20" pos:end="2283:20">=</operator> <name pos:start="2283:22" pos:end="2283:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="2285:13" pos:end="2290:0">else<block type="pseudo" pos:start="2287:17" pos:end="2290:0"><block_content pos:start="2287:17" pos:end="2290:0">

                <expr_stmt pos:start="2287:17" pos:end="2290:0"><expr pos:start="2287:17" pos:end="2287:36"><name pos:start="2287:17" pos:end="2287:18">ot</name> <operator pos:start="2287:20" pos:end="2287:20">=</operator> <name pos:start="2287:22" pos:end="2287:26">dflag</name> <operator pos:start="2287:28" pos:end="2287:28">+</operator> <name pos:start="2287:30" pos:end="2287:36">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:ifdef pos:start="2289:1" pos:end="2289:20">#<cpp:directive pos:start="2289:2" pos:end="2289:6">ifdef</cpp:directive> <name pos:start="2289:8" pos:end="2289:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="2291:13" pos:end="2317:13"><if pos:start="2291:13" pos:end="2299:13">if <condition pos:start="2291:16" pos:end="2291:30">(<expr pos:start="2291:17" pos:end="2291:29"><name pos:start="2291:17" pos:end="2291:24"><name pos:start="2291:17" pos:end="2291:17">s</name><operator pos:start="2291:18" pos:end="2291:19">-&gt;</operator><name pos:start="2291:20" pos:end="2291:24">aflag</name></name> <operator pos:start="2291:26" pos:end="2291:27">==</operator> <literal type="number" pos:start="2291:29" pos:end="2291:29">2</literal></expr>)</condition> <block pos:start="2291:32" pos:end="2299:13">{<block_content pos:start="2293:17" pos:end="2297:47">

                <expr_stmt pos:start="2293:17" pos:end="2293:55"><expr pos:start="2293:17" pos:end="2293:54"><name pos:start="2293:17" pos:end="2293:27">offset_addr</name> <operator pos:start="2293:29" pos:end="2293:29">=</operator> <call pos:start="2293:31" pos:end="2293:54"><name pos:start="2293:31" pos:end="2293:42">cpu_ldq_code</name><argument_list pos:start="2293:43" pos:end="2293:54">(<argument pos:start="2293:44" pos:end="2293:46"><expr pos:start="2293:44" pos:end="2293:46"><name pos:start="2293:44" pos:end="2293:46">env</name></expr></argument>, <argument pos:start="2293:49" pos:end="2293:53"><expr pos:start="2293:49" pos:end="2293:53"><name pos:start="2293:49" pos:end="2293:53"><name pos:start="2293:49" pos:end="2293:49">s</name><operator pos:start="2293:50" pos:end="2293:51">-&gt;</operator><name pos:start="2293:52" pos:end="2293:53">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2295:17" pos:end="2295:27"><expr pos:start="2295:17" pos:end="2295:26"><name pos:start="2295:17" pos:end="2295:21"><name pos:start="2295:17" pos:end="2295:17">s</name><operator pos:start="2295:18" pos:end="2295:19">-&gt;</operator><name pos:start="2295:20" pos:end="2295:21">pc</name></name> <operator pos:start="2295:23" pos:end="2295:24">+=</operator> <literal type="number" pos:start="2295:26" pos:end="2295:26">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="2297:17" pos:end="2297:47"><expr pos:start="2297:17" pos:end="2297:46"><call pos:start="2297:17" pos:end="2297:46"><name pos:start="2297:17" pos:end="2297:33">gen_op_movq_A0_im</name><argument_list pos:start="2297:34" pos:end="2297:46">(<argument pos:start="2297:35" pos:end="2297:45"><expr pos:start="2297:35" pos:end="2297:45"><name pos:start="2297:35" pos:end="2297:45">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2299:15" pos:end="2317:13">else

<cpp:endif pos:start="2301:1" pos:end="2301:6">#<cpp:directive pos:start="2301:2" pos:end="2301:6">endif</cpp:directive></cpp:endif>

            <block pos:start="2303:13" pos:end="2317:13">{<block_content pos:start="2305:17" pos:end="2315:47">

                <if_stmt pos:start="2305:17" pos:end="2313:17"><if pos:start="2305:17" pos:end="2309:17">if <condition pos:start="2305:20" pos:end="2305:29">(<expr pos:start="2305:21" pos:end="2305:28"><name pos:start="2305:21" pos:end="2305:28"><name pos:start="2305:21" pos:end="2305:21">s</name><operator pos:start="2305:22" pos:end="2305:23">-&gt;</operator><name pos:start="2305:24" pos:end="2305:28">aflag</name></name></expr>)</condition> <block pos:start="2305:31" pos:end="2309:17">{<block_content pos:start="2307:21" pos:end="2307:60">

                    <expr_stmt pos:start="2307:21" pos:end="2307:60"><expr pos:start="2307:21" pos:end="2307:59"><name pos:start="2307:21" pos:end="2307:31">offset_addr</name> <operator pos:start="2307:33" pos:end="2307:33">=</operator> <call pos:start="2307:35" pos:end="2307:59"><name pos:start="2307:35" pos:end="2307:42">insn_get</name><argument_list pos:start="2307:43" pos:end="2307:59">(<argument pos:start="2307:44" pos:end="2307:46"><expr pos:start="2307:44" pos:end="2307:46"><name pos:start="2307:44" pos:end="2307:46">env</name></expr></argument>, <argument pos:start="2307:49" pos:end="2307:49"><expr pos:start="2307:49" pos:end="2307:49"><name pos:start="2307:49" pos:end="2307:49">s</name></expr></argument>, <argument pos:start="2307:52" pos:end="2307:58"><expr pos:start="2307:52" pos:end="2307:58"><name pos:start="2307:52" pos:end="2307:58">OT_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2309:19" pos:end="2313:17">else <block pos:start="2309:24" pos:end="2313:17">{<block_content pos:start="2311:21" pos:end="2311:60">

                    <expr_stmt pos:start="2311:21" pos:end="2311:60"><expr pos:start="2311:21" pos:end="2311:59"><name pos:start="2311:21" pos:end="2311:31">offset_addr</name> <operator pos:start="2311:33" pos:end="2311:33">=</operator> <call pos:start="2311:35" pos:end="2311:59"><name pos:start="2311:35" pos:end="2311:42">insn_get</name><argument_list pos:start="2311:43" pos:end="2311:59">(<argument pos:start="2311:44" pos:end="2311:46"><expr pos:start="2311:44" pos:end="2311:46"><name pos:start="2311:44" pos:end="2311:46">env</name></expr></argument>, <argument pos:start="2311:49" pos:end="2311:49"><expr pos:start="2311:49" pos:end="2311:49"><name pos:start="2311:49" pos:end="2311:49">s</name></expr></argument>, <argument pos:start="2311:52" pos:end="2311:58"><expr pos:start="2311:52" pos:end="2311:58"><name pos:start="2311:52" pos:end="2311:58">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="2315:17" pos:end="2315:47"><expr pos:start="2315:17" pos:end="2315:46"><call pos:start="2315:17" pos:end="2315:46"><name pos:start="2315:17" pos:end="2315:33">gen_op_movl_A0_im</name><argument_list pos:start="2315:34" pos:end="2315:46">(<argument pos:start="2315:35" pos:end="2315:45"><expr pos:start="2315:35" pos:end="2315:45"><name pos:start="2315:35" pos:end="2315:45">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="2319:13" pos:end="2319:33"><expr pos:start="2319:13" pos:end="2319:32"><call pos:start="2319:13" pos:end="2319:32"><name pos:start="2319:13" pos:end="2319:29">gen_add_A0_ds_seg</name><argument_list pos:start="2319:30" pos:end="2319:32">(<argument pos:start="2319:31" pos:end="2319:31"><expr pos:start="2319:31" pos:end="2319:31"><name pos:start="2319:31" pos:end="2319:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2321:13" pos:end="2333:13"><if pos:start="2321:13" pos:end="2327:13">if <condition pos:start="2321:16" pos:end="2321:29">(<expr pos:start="2321:17" pos:end="2321:28"><operator pos:start="2321:17" pos:end="2321:17">(</operator><name pos:start="2321:18" pos:end="2321:18">b</name> <operator pos:start="2321:20" pos:end="2321:20">&amp;</operator> <literal type="number" pos:start="2321:22" pos:end="2321:22">2</literal><operator pos:start="2321:23" pos:end="2321:23">)</operator> <operator pos:start="2321:25" pos:end="2321:26">==</operator> <literal type="number" pos:start="2321:28" pos:end="2321:28">0</literal></expr>)</condition> <block pos:start="2321:31" pos:end="2327:13">{<block_content pos:start="2323:17" pos:end="2325:45">

                <expr_stmt pos:start="2323:17" pos:end="2323:51"><expr pos:start="2323:17" pos:end="2323:50"><call pos:start="2323:17" pos:end="2323:50"><name pos:start="2323:17" pos:end="2323:31">gen_op_ld_T0_A0</name><argument_list pos:start="2323:32" pos:end="2323:50">(<argument pos:start="2323:33" pos:end="2323:49"><expr pos:start="2323:33" pos:end="2323:49"><name pos:start="2323:33" pos:end="2323:34">ot</name> <operator pos:start="2323:36" pos:end="2323:36">+</operator> <name pos:start="2323:38" pos:end="2323:49"><name pos:start="2323:38" pos:end="2323:38">s</name><operator pos:start="2323:39" pos:end="2323:40">-&gt;</operator><name pos:start="2323:41" pos:end="2323:49">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2325:17" pos:end="2325:45"><expr pos:start="2325:17" pos:end="2325:44"><call pos:start="2325:17" pos:end="2325:44"><name pos:start="2325:17" pos:end="2325:33">gen_op_mov_reg_T0</name><argument_list pos:start="2325:34" pos:end="2325:44">(<argument pos:start="2325:35" pos:end="2325:36"><expr pos:start="2325:35" pos:end="2325:36"><name pos:start="2325:35" pos:end="2325:36">ot</name></expr></argument>, <argument pos:start="2325:39" pos:end="2325:43"><expr pos:start="2325:39" pos:end="2325:43"><name pos:start="2325:39" pos:end="2325:43">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2327:15" pos:end="2333:13">else <block pos:start="2327:20" pos:end="2333:13">{<block_content pos:start="2329:17" pos:end="2331:51">

                <expr_stmt pos:start="2329:17" pos:end="2329:48"><expr pos:start="2329:17" pos:end="2329:47"><call pos:start="2329:17" pos:end="2329:47"><name pos:start="2329:17" pos:end="2329:33">gen_op_mov_TN_reg</name><argument_list pos:start="2329:34" pos:end="2329:47">(<argument pos:start="2329:35" pos:end="2329:36"><expr pos:start="2329:35" pos:end="2329:36"><name pos:start="2329:35" pos:end="2329:36">ot</name></expr></argument>, <argument pos:start="2329:39" pos:end="2329:39"><expr pos:start="2329:39" pos:end="2329:39"><literal type="number" pos:start="2329:39" pos:end="2329:39">0</literal></expr></argument>, <argument pos:start="2329:42" pos:end="2329:46"><expr pos:start="2329:42" pos:end="2329:46"><name pos:start="2329:42" pos:end="2329:46">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2331:17" pos:end="2331:51"><expr pos:start="2331:17" pos:end="2331:50"><call pos:start="2331:17" pos:end="2331:50"><name pos:start="2331:17" pos:end="2331:31">gen_op_st_T0_A0</name><argument_list pos:start="2331:32" pos:end="2331:50">(<argument pos:start="2331:33" pos:end="2331:49"><expr pos:start="2331:33" pos:end="2331:49"><name pos:start="2331:33" pos:end="2331:34">ot</name> <operator pos:start="2331:36" pos:end="2331:36">+</operator> <name pos:start="2331:38" pos:end="2331:49"><name pos:start="2331:38" pos:end="2331:38">s</name><operator pos:start="2331:39" pos:end="2331:40">-&gt;</operator><name pos:start="2331:41" pos:end="2331:49">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="2337:9" pos:end="2337:14">break;</break>

    <case pos:start="2339:5" pos:end="2342:0">case <expr pos:start="2339:10" pos:end="2339:13"><literal type="number" pos:start="2339:10" pos:end="2339:13">0xd7</literal></expr>:</case> <comment type="block" pos:start="2339:16" pos:end="2339:25">/* xlat */</comment>

<cpp:ifdef pos:start="2341:1" pos:end="2341:20">#<cpp:directive pos:start="2341:2" pos:end="2341:6">ifdef</cpp:directive> <name pos:start="2341:8" pos:end="2341:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="2343:9" pos:end="2375:9"><if pos:start="2343:9" pos:end="2353:9">if <condition pos:start="2343:12" pos:end="2343:26">(<expr pos:start="2343:13" pos:end="2343:25"><name pos:start="2343:13" pos:end="2343:20"><name pos:start="2343:13" pos:end="2343:13">s</name><operator pos:start="2343:14" pos:end="2343:15">-&gt;</operator><name pos:start="2343:16" pos:end="2343:20">aflag</name></name> <operator pos:start="2343:22" pos:end="2343:23">==</operator> <literal type="number" pos:start="2343:25" pos:end="2343:25">2</literal></expr>)</condition> <block pos:start="2343:28" pos:end="2353:9">{<block_content pos:start="2345:13" pos:end="2351:53">

            <expr_stmt pos:start="2345:13" pos:end="2345:38"><expr pos:start="2345:13" pos:end="2345:37"><call pos:start="2345:13" pos:end="2345:37"><name pos:start="2345:13" pos:end="2345:30">gen_op_movq_A0_reg</name><argument_list pos:start="2345:31" pos:end="2345:37">(<argument pos:start="2345:32" pos:end="2345:36"><expr pos:start="2345:32" pos:end="2345:36"><name pos:start="2345:32" pos:end="2345:36">R_EBX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2347:13" pos:end="2347:49"><expr pos:start="2347:13" pos:end="2347:48"><call pos:start="2347:13" pos:end="2347:48"><name pos:start="2347:13" pos:end="2347:29">gen_op_mov_TN_reg</name><argument_list pos:start="2347:30" pos:end="2347:48">(<argument pos:start="2347:31" pos:end="2347:37"><expr pos:start="2347:31" pos:end="2347:37"><name pos:start="2347:31" pos:end="2347:37">OT_QUAD</name></expr></argument>, <argument pos:start="2347:40" pos:end="2347:40"><expr pos:start="2347:40" pos:end="2347:40"><literal type="number" pos:start="2347:40" pos:end="2347:40">0</literal></expr></argument>, <argument pos:start="2347:43" pos:end="2347:47"><expr pos:start="2347:43" pos:end="2347:47"><name pos:start="2347:43" pos:end="2347:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2349:13" pos:end="2349:54"><expr pos:start="2349:13" pos:end="2349:53"><call pos:start="2349:13" pos:end="2349:53"><name pos:start="2349:13" pos:end="2349:27">tcg_gen_andi_tl</name><argument_list pos:start="2349:28" pos:end="2349:53">(<argument pos:start="2349:29" pos:end="2349:36"><expr pos:start="2349:29" pos:end="2349:36"><name pos:start="2349:29" pos:end="2349:36"><name pos:start="2349:29" pos:end="2349:33">cpu_T</name><index pos:start="2349:34" pos:end="2349:36">[<expr pos:start="2349:35" pos:end="2349:35"><literal type="number" pos:start="2349:35" pos:end="2349:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2349:39" pos:end="2349:46"><expr pos:start="2349:39" pos:end="2349:46"><name pos:start="2349:39" pos:end="2349:46"><name pos:start="2349:39" pos:end="2349:43">cpu_T</name><index pos:start="2349:44" pos:end="2349:46">[<expr pos:start="2349:45" pos:end="2349:45"><literal type="number" pos:start="2349:45" pos:end="2349:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2349:49" pos:end="2349:52"><expr pos:start="2349:49" pos:end="2349:52"><literal type="number" pos:start="2349:49" pos:end="2349:52">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2351:13" pos:end="2351:53"><expr pos:start="2351:13" pos:end="2351:52"><call pos:start="2351:13" pos:end="2351:52"><name pos:start="2351:13" pos:end="2351:26">tcg_gen_add_tl</name><argument_list pos:start="2351:27" pos:end="2351:52">(<argument pos:start="2351:28" pos:end="2351:33"><expr pos:start="2351:28" pos:end="2351:33"><name pos:start="2351:28" pos:end="2351:33">cpu_A0</name></expr></argument>, <argument pos:start="2351:36" pos:end="2351:41"><expr pos:start="2351:36" pos:end="2351:41"><name pos:start="2351:36" pos:end="2351:41">cpu_A0</name></expr></argument>, <argument pos:start="2351:44" pos:end="2351:51"><expr pos:start="2351:44" pos:end="2351:51"><name pos:start="2351:44" pos:end="2351:51"><name pos:start="2351:44" pos:end="2351:48">cpu_T</name><index pos:start="2351:49" pos:end="2351:51">[<expr pos:start="2351:50" pos:end="2351:50"><literal type="number" pos:start="2351:50" pos:end="2351:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2353:11" pos:end="2375:9">else

<cpp:endif pos:start="2355:1" pos:end="2355:6">#<cpp:directive pos:start="2355:2" pos:end="2355:6">endif</cpp:directive></cpp:endif>

        <block pos:start="2357:9" pos:end="2375:9">{<block_content pos:start="2359:13" pos:end="2373:60">

            <expr_stmt pos:start="2359:13" pos:end="2359:38"><expr pos:start="2359:13" pos:end="2359:37"><call pos:start="2359:13" pos:end="2359:37"><name pos:start="2359:13" pos:end="2359:30">gen_op_movl_A0_reg</name><argument_list pos:start="2359:31" pos:end="2359:37">(<argument pos:start="2359:32" pos:end="2359:36"><expr pos:start="2359:32" pos:end="2359:36"><name pos:start="2359:32" pos:end="2359:36">R_EBX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2361:13" pos:end="2361:49"><expr pos:start="2361:13" pos:end="2361:48"><call pos:start="2361:13" pos:end="2361:48"><name pos:start="2361:13" pos:end="2361:29">gen_op_mov_TN_reg</name><argument_list pos:start="2361:30" pos:end="2361:48">(<argument pos:start="2361:31" pos:end="2361:37"><expr pos:start="2361:31" pos:end="2361:37"><name pos:start="2361:31" pos:end="2361:37">OT_LONG</name></expr></argument>, <argument pos:start="2361:40" pos:end="2361:40"><expr pos:start="2361:40" pos:end="2361:40"><literal type="number" pos:start="2361:40" pos:end="2361:40">0</literal></expr></argument>, <argument pos:start="2361:43" pos:end="2361:47"><expr pos:start="2361:43" pos:end="2361:47"><name pos:start="2361:43" pos:end="2361:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2363:13" pos:end="2363:54"><expr pos:start="2363:13" pos:end="2363:53"><call pos:start="2363:13" pos:end="2363:53"><name pos:start="2363:13" pos:end="2363:27">tcg_gen_andi_tl</name><argument_list pos:start="2363:28" pos:end="2363:53">(<argument pos:start="2363:29" pos:end="2363:36"><expr pos:start="2363:29" pos:end="2363:36"><name pos:start="2363:29" pos:end="2363:36"><name pos:start="2363:29" pos:end="2363:33">cpu_T</name><index pos:start="2363:34" pos:end="2363:36">[<expr pos:start="2363:35" pos:end="2363:35"><literal type="number" pos:start="2363:35" pos:end="2363:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2363:39" pos:end="2363:46"><expr pos:start="2363:39" pos:end="2363:46"><name pos:start="2363:39" pos:end="2363:46"><name pos:start="2363:39" pos:end="2363:43">cpu_T</name><index pos:start="2363:44" pos:end="2363:46">[<expr pos:start="2363:45" pos:end="2363:45"><literal type="number" pos:start="2363:45" pos:end="2363:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2363:49" pos:end="2363:52"><expr pos:start="2363:49" pos:end="2363:52"><literal type="number" pos:start="2363:49" pos:end="2363:52">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2365:13" pos:end="2365:53"><expr pos:start="2365:13" pos:end="2365:52"><call pos:start="2365:13" pos:end="2365:52"><name pos:start="2365:13" pos:end="2365:26">tcg_gen_add_tl</name><argument_list pos:start="2365:27" pos:end="2365:52">(<argument pos:start="2365:28" pos:end="2365:33"><expr pos:start="2365:28" pos:end="2365:33"><name pos:start="2365:28" pos:end="2365:33">cpu_A0</name></expr></argument>, <argument pos:start="2365:36" pos:end="2365:41"><expr pos:start="2365:36" pos:end="2365:41"><name pos:start="2365:36" pos:end="2365:41">cpu_A0</name></expr></argument>, <argument pos:start="2365:44" pos:end="2365:51"><expr pos:start="2365:44" pos:end="2365:51"><name pos:start="2365:44" pos:end="2365:51"><name pos:start="2365:44" pos:end="2365:48">cpu_T</name><index pos:start="2365:49" pos:end="2365:51">[<expr pos:start="2365:50" pos:end="2365:50"><literal type="number" pos:start="2365:50" pos:end="2365:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2367:13" pos:end="2373:60"><if pos:start="2367:13" pos:end="2369:38">if <condition pos:start="2367:16" pos:end="2367:30">(<expr pos:start="2367:17" pos:end="2367:29"><name pos:start="2367:17" pos:end="2367:24"><name pos:start="2367:17" pos:end="2367:17">s</name><operator pos:start="2367:18" pos:end="2367:19">-&gt;</operator><name pos:start="2367:20" pos:end="2367:24">aflag</name></name> <operator pos:start="2367:26" pos:end="2367:27">==</operator> <literal type="number" pos:start="2367:29" pos:end="2367:29">0</literal></expr>)</condition><block type="pseudo" pos:start="2369:17" pos:end="2369:38"><block_content pos:start="2369:17" pos:end="2369:38">

                <expr_stmt pos:start="2369:17" pos:end="2369:38"><expr pos:start="2369:17" pos:end="2369:37"><call pos:start="2369:17" pos:end="2369:37"><name pos:start="2369:17" pos:end="2369:35">gen_op_andl_A0_ffff</name><argument_list pos:start="2369:36" pos:end="2369:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="2371:13" pos:end="2373:60">else<block type="pseudo" pos:start="2373:17" pos:end="2373:60"><block_content pos:start="2373:17" pos:end="2373:60">

                <expr_stmt pos:start="2373:17" pos:end="2373:60"><expr pos:start="2373:17" pos:end="2373:59"><call pos:start="2373:17" pos:end="2373:59"><name pos:start="2373:17" pos:end="2373:31">tcg_gen_andi_tl</name><argument_list pos:start="2373:32" pos:end="2373:59">(<argument pos:start="2373:33" pos:end="2373:38"><expr pos:start="2373:33" pos:end="2373:38"><name pos:start="2373:33" pos:end="2373:38">cpu_A0</name></expr></argument>, <argument pos:start="2373:41" pos:end="2373:46"><expr pos:start="2373:41" pos:end="2373:46"><name pos:start="2373:41" pos:end="2373:46">cpu_A0</name></expr></argument>, <argument pos:start="2373:49" pos:end="2373:58"><expr pos:start="2373:49" pos:end="2373:58"><literal type="number" pos:start="2373:49" pos:end="2373:58">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="2377:9" pos:end="2377:29"><expr pos:start="2377:9" pos:end="2377:28"><call pos:start="2377:9" pos:end="2377:28"><name pos:start="2377:9" pos:end="2377:25">gen_add_A0_ds_seg</name><argument_list pos:start="2377:26" pos:end="2377:28">(<argument pos:start="2377:27" pos:end="2377:27"><expr pos:start="2377:27" pos:end="2377:27"><name pos:start="2377:27" pos:end="2377:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2379:9" pos:end="2379:49"><expr pos:start="2379:9" pos:end="2379:48"><call pos:start="2379:9" pos:end="2379:48"><name pos:start="2379:9" pos:end="2379:24">gen_op_ldu_T0_A0</name><argument_list pos:start="2379:25" pos:end="2379:48">(<argument pos:start="2379:26" pos:end="2379:47"><expr pos:start="2379:26" pos:end="2379:47"><name pos:start="2379:26" pos:end="2379:32">OT_BYTE</name> <operator pos:start="2379:34" pos:end="2379:34">+</operator> <name pos:start="2379:36" pos:end="2379:47"><name pos:start="2379:36" pos:end="2379:36">s</name><operator pos:start="2379:37" pos:end="2379:38">-&gt;</operator><name pos:start="2379:39" pos:end="2379:47">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2381:9" pos:end="2381:42"><expr pos:start="2381:9" pos:end="2381:41"><call pos:start="2381:9" pos:end="2381:41"><name pos:start="2381:9" pos:end="2381:25">gen_op_mov_reg_T0</name><argument_list pos:start="2381:26" pos:end="2381:41">(<argument pos:start="2381:27" pos:end="2381:33"><expr pos:start="2381:27" pos:end="2381:33"><name pos:start="2381:27" pos:end="2381:33">OT_BYTE</name></expr></argument>, <argument pos:start="2381:36" pos:end="2381:40"><expr pos:start="2381:36" pos:end="2381:40"><name pos:start="2381:36" pos:end="2381:40">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2383:9" pos:end="2383:14">break;</break>

    <case pos:start="2385:5" pos:end="2385:23">case <expr pos:start="2385:10" pos:end="2385:22"><literal type="number" pos:start="2385:10" pos:end="2385:13">0xb0</literal> <operator pos:start="2385:15" pos:end="2385:17">...</operator> <literal type="number" pos:start="2385:19" pos:end="2385:22">0xb7</literal></expr>:</case> <comment type="block" pos:start="2385:25" pos:end="2385:39">/* mov R, Ib */</comment>

        <expr_stmt pos:start="2387:9" pos:end="2387:40"><expr pos:start="2387:9" pos:end="2387:39"><name pos:start="2387:9" pos:end="2387:11">val</name> <operator pos:start="2387:13" pos:end="2387:13">=</operator> <call pos:start="2387:15" pos:end="2387:39"><name pos:start="2387:15" pos:end="2387:22">insn_get</name><argument_list pos:start="2387:23" pos:end="2387:39">(<argument pos:start="2387:24" pos:end="2387:26"><expr pos:start="2387:24" pos:end="2387:26"><name pos:start="2387:24" pos:end="2387:26">env</name></expr></argument>, <argument pos:start="2387:29" pos:end="2387:29"><expr pos:start="2387:29" pos:end="2387:29"><name pos:start="2387:29" pos:end="2387:29">s</name></expr></argument>, <argument pos:start="2387:32" pos:end="2387:38"><expr pos:start="2387:32" pos:end="2387:38"><name pos:start="2387:32" pos:end="2387:38">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2389:9" pos:end="2389:31"><expr pos:start="2389:9" pos:end="2389:30"><call pos:start="2389:9" pos:end="2389:30"><name pos:start="2389:9" pos:end="2389:25">gen_op_movl_T0_im</name><argument_list pos:start="2389:26" pos:end="2389:30">(<argument pos:start="2389:27" pos:end="2389:29"><expr pos:start="2389:27" pos:end="2389:29"><name pos:start="2389:27" pos:end="2389:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2391:9" pos:end="2391:55"><expr pos:start="2391:9" pos:end="2391:54"><call pos:start="2391:9" pos:end="2391:54"><name pos:start="2391:9" pos:end="2391:25">gen_op_mov_reg_T0</name><argument_list pos:start="2391:26" pos:end="2391:54">(<argument pos:start="2391:27" pos:end="2391:33"><expr pos:start="2391:27" pos:end="2391:33"><name pos:start="2391:27" pos:end="2391:33">OT_BYTE</name></expr></argument>, <argument pos:start="2391:36" pos:end="2391:53"><expr pos:start="2391:36" pos:end="2391:53"><operator pos:start="2391:36" pos:end="2391:36">(</operator><name pos:start="2391:37" pos:end="2391:37">b</name> <operator pos:start="2391:39" pos:end="2391:39">&amp;</operator> <literal type="number" pos:start="2391:41" pos:end="2391:41">7</literal><operator pos:start="2391:42" pos:end="2391:42">)</operator> <operator pos:start="2391:44" pos:end="2391:44">|</operator> <call pos:start="2391:46" pos:end="2391:53"><name pos:start="2391:46" pos:end="2391:50">REX_B</name><argument_list pos:start="2391:51" pos:end="2391:53">(<argument pos:start="2391:52" pos:end="2391:52"><expr pos:start="2391:52" pos:end="2391:52"><name pos:start="2391:52" pos:end="2391:52">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2393:9" pos:end="2393:14">break;</break>

    <case pos:start="2395:5" pos:end="2398:0">case <expr pos:start="2395:10" pos:end="2395:22"><literal type="number" pos:start="2395:10" pos:end="2395:13">0xb8</literal> <operator pos:start="2395:15" pos:end="2395:17">...</operator> <literal type="number" pos:start="2395:19" pos:end="2395:22">0xbf</literal></expr>:</case> <comment type="block" pos:start="2395:25" pos:end="2395:39">/* mov R, Iv */</comment>

<cpp:ifdef pos:start="2397:1" pos:end="2397:20">#<cpp:directive pos:start="2397:2" pos:end="2397:6">ifdef</cpp:directive> <name pos:start="2397:8" pos:end="2397:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="2399:9" pos:end="2431:9"><if pos:start="2399:9" pos:end="2415:9">if <condition pos:start="2399:12" pos:end="2399:23">(<expr pos:start="2399:13" pos:end="2399:22"><name pos:start="2399:13" pos:end="2399:17">dflag</name> <operator pos:start="2399:19" pos:end="2399:20">==</operator> <literal type="number" pos:start="2399:22" pos:end="2399:22">2</literal></expr>)</condition> <block pos:start="2399:25" pos:end="2415:9">{<block_content pos:start="2401:13" pos:end="2413:44">

            <decl_stmt pos:start="2401:13" pos:end="2401:25"><decl pos:start="2401:13" pos:end="2401:24"><type pos:start="2401:13" pos:end="2401:20"><name pos:start="2401:13" pos:end="2401:20">uint64_t</name></type> <name pos:start="2401:22" pos:end="2401:24">tmp</name></decl>;</decl_stmt>

            <comment type="block" pos:start="2403:13" pos:end="2403:29">/* 64 bit case */</comment>

            <expr_stmt pos:start="2405:13" pos:end="2405:43"><expr pos:start="2405:13" pos:end="2405:42"><name pos:start="2405:13" pos:end="2405:15">tmp</name> <operator pos:start="2405:17" pos:end="2405:17">=</operator> <call pos:start="2405:19" pos:end="2405:42"><name pos:start="2405:19" pos:end="2405:30">cpu_ldq_code</name><argument_list pos:start="2405:31" pos:end="2405:42">(<argument pos:start="2405:32" pos:end="2405:34"><expr pos:start="2405:32" pos:end="2405:34"><name pos:start="2405:32" pos:end="2405:34">env</name></expr></argument>, <argument pos:start="2405:37" pos:end="2405:41"><expr pos:start="2405:37" pos:end="2405:41"><name pos:start="2405:37" pos:end="2405:41"><name pos:start="2405:37" pos:end="2405:37">s</name><operator pos:start="2405:38" pos:end="2405:39">-&gt;</operator><name pos:start="2405:40" pos:end="2405:41">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2407:13" pos:end="2407:23"><expr pos:start="2407:13" pos:end="2407:22"><name pos:start="2407:13" pos:end="2407:17"><name pos:start="2407:13" pos:end="2407:13">s</name><operator pos:start="2407:14" pos:end="2407:15">-&gt;</operator><name pos:start="2407:16" pos:end="2407:17">pc</name></name> <operator pos:start="2407:19" pos:end="2407:20">+=</operator> <literal type="number" pos:start="2407:22" pos:end="2407:22">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="2409:13" pos:end="2409:37"><expr pos:start="2409:13" pos:end="2409:36"><name pos:start="2409:13" pos:end="2409:15">reg</name> <operator pos:start="2409:17" pos:end="2409:17">=</operator> <operator pos:start="2409:19" pos:end="2409:19">(</operator><name pos:start="2409:20" pos:end="2409:20">b</name> <operator pos:start="2409:22" pos:end="2409:22">&amp;</operator> <literal type="number" pos:start="2409:24" pos:end="2409:24">7</literal><operator pos:start="2409:25" pos:end="2409:25">)</operator> <operator pos:start="2409:27" pos:end="2409:27">|</operator> <call pos:start="2409:29" pos:end="2409:36"><name pos:start="2409:29" pos:end="2409:33">REX_B</name><argument_list pos:start="2409:34" pos:end="2409:36">(<argument pos:start="2409:35" pos:end="2409:35"><expr pos:start="2409:35" pos:end="2409:35"><name pos:start="2409:35" pos:end="2409:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2411:13" pos:end="2411:33"><expr pos:start="2411:13" pos:end="2411:32"><call pos:start="2411:13" pos:end="2411:32"><name pos:start="2411:13" pos:end="2411:27">gen_movtl_T0_im</name><argument_list pos:start="2411:28" pos:end="2411:32">(<argument pos:start="2411:29" pos:end="2411:31"><expr pos:start="2411:29" pos:end="2411:31"><name pos:start="2411:29" pos:end="2411:31">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2413:13" pos:end="2413:44"><expr pos:start="2413:13" pos:end="2413:43"><call pos:start="2413:13" pos:end="2413:43"><name pos:start="2413:13" pos:end="2413:29">gen_op_mov_reg_T0</name><argument_list pos:start="2413:30" pos:end="2413:43">(<argument pos:start="2413:31" pos:end="2413:37"><expr pos:start="2413:31" pos:end="2413:37"><name pos:start="2413:31" pos:end="2413:37">OT_QUAD</name></expr></argument>, <argument pos:start="2413:40" pos:end="2413:42"><expr pos:start="2413:40" pos:end="2413:42"><name pos:start="2413:40" pos:end="2413:42">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2415:11" pos:end="2431:9">else

<cpp:endif pos:start="2417:1" pos:end="2417:6">#<cpp:directive pos:start="2417:2" pos:end="2417:6">endif</cpp:directive></cpp:endif>

        <block pos:start="2419:9" pos:end="2431:9">{<block_content pos:start="2421:13" pos:end="2429:39">

            <expr_stmt pos:start="2421:13" pos:end="2421:43"><expr pos:start="2421:13" pos:end="2421:42"><name pos:start="2421:13" pos:end="2421:14">ot</name> <operator pos:start="2421:16" pos:end="2421:16">=</operator> <ternary pos:start="2421:18" pos:end="2421:42"><condition pos:start="2421:18" pos:end="2421:24"><expr pos:start="2421:18" pos:end="2421:22"><name pos:start="2421:18" pos:end="2421:22">dflag</name></expr> ?</condition><then pos:start="2421:26" pos:end="2421:32"> <expr pos:start="2421:26" pos:end="2421:32"><name pos:start="2421:26" pos:end="2421:32">OT_LONG</name></expr> </then><else pos:start="2421:34" pos:end="2421:42">: <expr pos:start="2421:36" pos:end="2421:42"><name pos:start="2421:36" pos:end="2421:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="2423:13" pos:end="2423:39"><expr pos:start="2423:13" pos:end="2423:38"><name pos:start="2423:13" pos:end="2423:15">val</name> <operator pos:start="2423:17" pos:end="2423:17">=</operator> <call pos:start="2423:19" pos:end="2423:38"><name pos:start="2423:19" pos:end="2423:26">insn_get</name><argument_list pos:start="2423:27" pos:end="2423:38">(<argument pos:start="2423:28" pos:end="2423:30"><expr pos:start="2423:28" pos:end="2423:30"><name pos:start="2423:28" pos:end="2423:30">env</name></expr></argument>, <argument pos:start="2423:33" pos:end="2423:33"><expr pos:start="2423:33" pos:end="2423:33"><name pos:start="2423:33" pos:end="2423:33">s</name></expr></argument>, <argument pos:start="2423:36" pos:end="2423:37"><expr pos:start="2423:36" pos:end="2423:37"><name pos:start="2423:36" pos:end="2423:37">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2425:13" pos:end="2425:37"><expr pos:start="2425:13" pos:end="2425:36"><name pos:start="2425:13" pos:end="2425:15">reg</name> <operator pos:start="2425:17" pos:end="2425:17">=</operator> <operator pos:start="2425:19" pos:end="2425:19">(</operator><name pos:start="2425:20" pos:end="2425:20">b</name> <operator pos:start="2425:22" pos:end="2425:22">&amp;</operator> <literal type="number" pos:start="2425:24" pos:end="2425:24">7</literal><operator pos:start="2425:25" pos:end="2425:25">)</operator> <operator pos:start="2425:27" pos:end="2425:27">|</operator> <call pos:start="2425:29" pos:end="2425:36"><name pos:start="2425:29" pos:end="2425:33">REX_B</name><argument_list pos:start="2425:34" pos:end="2425:36">(<argument pos:start="2425:35" pos:end="2425:35"><expr pos:start="2425:35" pos:end="2425:35"><name pos:start="2425:35" pos:end="2425:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2427:13" pos:end="2427:35"><expr pos:start="2427:13" pos:end="2427:34"><call pos:start="2427:13" pos:end="2427:34"><name pos:start="2427:13" pos:end="2427:29">gen_op_movl_T0_im</name><argument_list pos:start="2427:30" pos:end="2427:34">(<argument pos:start="2427:31" pos:end="2427:33"><expr pos:start="2427:31" pos:end="2427:33"><name pos:start="2427:31" pos:end="2427:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2429:13" pos:end="2429:39"><expr pos:start="2429:13" pos:end="2429:38"><call pos:start="2429:13" pos:end="2429:38"><name pos:start="2429:13" pos:end="2429:29">gen_op_mov_reg_T0</name><argument_list pos:start="2429:30" pos:end="2429:38">(<argument pos:start="2429:31" pos:end="2429:32"><expr pos:start="2429:31" pos:end="2429:32"><name pos:start="2429:31" pos:end="2429:32">ot</name></expr></argument>, <argument pos:start="2429:35" pos:end="2429:37"><expr pos:start="2429:35" pos:end="2429:37"><name pos:start="2429:35" pos:end="2429:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2433:9" pos:end="2433:14">break;</break>



    <case pos:start="2437:5" pos:end="2437:23">case <expr pos:start="2437:10" pos:end="2437:22"><literal type="number" pos:start="2437:10" pos:end="2437:13">0x91</literal> <operator pos:start="2437:15" pos:end="2437:17">...</operator> <literal type="number" pos:start="2437:19" pos:end="2437:22">0x97</literal></expr>:</case> <comment type="block" pos:start="2437:25" pos:end="2437:41">/* xchg R, EAX */</comment>

    <label pos:start="2439:5" pos:end="2439:20"><name pos:start="2439:5" pos:end="2439:19">do_xchg_reg_eax</name>:</label>

        <expr_stmt pos:start="2441:9" pos:end="2441:29"><expr pos:start="2441:9" pos:end="2441:28"><name pos:start="2441:9" pos:end="2441:10">ot</name> <operator pos:start="2441:12" pos:end="2441:12">=</operator> <name pos:start="2441:14" pos:end="2441:18">dflag</name> <operator pos:start="2441:20" pos:end="2441:20">+</operator> <name pos:start="2441:22" pos:end="2441:28">OT_WORD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2443:9" pos:end="2443:33"><expr pos:start="2443:9" pos:end="2443:32"><name pos:start="2443:9" pos:end="2443:11">reg</name> <operator pos:start="2443:13" pos:end="2443:13">=</operator> <operator pos:start="2443:15" pos:end="2443:15">(</operator><name pos:start="2443:16" pos:end="2443:16">b</name> <operator pos:start="2443:18" pos:end="2443:18">&amp;</operator> <literal type="number" pos:start="2443:20" pos:end="2443:20">7</literal><operator pos:start="2443:21" pos:end="2443:21">)</operator> <operator pos:start="2443:23" pos:end="2443:23">|</operator> <call pos:start="2443:25" pos:end="2443:32"><name pos:start="2443:25" pos:end="2443:29">REX_B</name><argument_list pos:start="2443:30" pos:end="2443:32">(<argument pos:start="2443:31" pos:end="2443:31"><expr pos:start="2443:31" pos:end="2443:31"><name pos:start="2443:31" pos:end="2443:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2445:9" pos:end="2445:19"><expr pos:start="2445:9" pos:end="2445:18"><name pos:start="2445:9" pos:end="2445:10">rm</name> <operator pos:start="2445:12" pos:end="2445:12">=</operator> <name pos:start="2445:14" pos:end="2445:18">R_EAX</name></expr>;</expr_stmt>

        <goto pos:start="2447:9" pos:end="2447:25">goto <name pos:start="2447:14" pos:end="2447:24">do_xchg_reg</name>;</goto>

    <case pos:start="2449:5" pos:end="2449:14">case <expr pos:start="2449:10" pos:end="2449:13"><literal type="number" pos:start="2449:10" pos:end="2449:13">0x86</literal></expr>:</case>

    <case pos:start="2451:5" pos:end="2451:14">case <expr pos:start="2451:10" pos:end="2451:13"><literal type="number" pos:start="2451:10" pos:end="2451:13">0x87</literal></expr>:</case> <comment type="block" pos:start="2451:16" pos:end="2451:32">/* xchg Ev, Gv */</comment>

        <if_stmt pos:start="2453:9" pos:end="2459:33"><if pos:start="2453:9" pos:end="2455:25">if <condition pos:start="2453:12" pos:end="2453:25">(<expr pos:start="2453:13" pos:end="2453:24"><operator pos:start="2453:13" pos:end="2453:13">(</operator><name pos:start="2453:14" pos:end="2453:14">b</name> <operator pos:start="2453:16" pos:end="2453:16">&amp;</operator> <literal type="number" pos:start="2453:18" pos:end="2453:18">1</literal><operator pos:start="2453:19" pos:end="2453:19">)</operator> <operator pos:start="2453:21" pos:end="2453:22">==</operator> <literal type="number" pos:start="2453:24" pos:end="2453:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2455:13" pos:end="2455:25"><block_content pos:start="2455:13" pos:end="2455:25">

            <expr_stmt pos:start="2455:13" pos:end="2455:25"><expr pos:start="2455:13" pos:end="2455:24"><name pos:start="2455:13" pos:end="2455:14">ot</name> <operator pos:start="2455:16" pos:end="2455:16">=</operator> <name pos:start="2455:18" pos:end="2455:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2457:9" pos:end="2459:33">else<block type="pseudo" pos:start="2459:13" pos:end="2459:33"><block_content pos:start="2459:13" pos:end="2459:33">

            <expr_stmt pos:start="2459:13" pos:end="2459:33"><expr pos:start="2459:13" pos:end="2459:32"><name pos:start="2459:13" pos:end="2459:14">ot</name> <operator pos:start="2459:16" pos:end="2459:16">=</operator> <name pos:start="2459:18" pos:end="2459:22">dflag</name> <operator pos:start="2459:24" pos:end="2459:24">+</operator> <name pos:start="2459:26" pos:end="2459:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="2461:9" pos:end="2461:44"><expr pos:start="2461:9" pos:end="2461:43"><name pos:start="2461:9" pos:end="2461:13">modrm</name> <operator pos:start="2461:15" pos:end="2461:15">=</operator> <call pos:start="2461:17" pos:end="2461:43"><name pos:start="2461:17" pos:end="2461:29">cpu_ldub_code</name><argument_list pos:start="2461:30" pos:end="2461:43">(<argument pos:start="2461:31" pos:end="2461:33"><expr pos:start="2461:31" pos:end="2461:33"><name pos:start="2461:31" pos:end="2461:33">env</name></expr></argument>, <argument pos:start="2461:36" pos:end="2461:42"><expr pos:start="2461:36" pos:end="2461:42"><name pos:start="2461:36" pos:end="2461:40"><name pos:start="2461:36" pos:end="2461:36">s</name><operator pos:start="2461:37" pos:end="2461:38">-&gt;</operator><name pos:start="2461:39" pos:end="2461:40">pc</name></name><operator pos:start="2461:41" pos:end="2461:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2463:9" pos:end="2463:41"><expr pos:start="2463:9" pos:end="2463:40"><name pos:start="2463:9" pos:end="2463:11">reg</name> <operator pos:start="2463:13" pos:end="2463:13">=</operator> <operator pos:start="2463:15" pos:end="2463:15">(</operator><operator pos:start="2463:16" pos:end="2463:16">(</operator><name pos:start="2463:17" pos:end="2463:21">modrm</name> <operator pos:start="2463:23" pos:end="2463:24">&gt;&gt;</operator> <literal type="number" pos:start="2463:26" pos:end="2463:26">3</literal><operator pos:start="2463:27" pos:end="2463:27">)</operator> <operator pos:start="2463:29" pos:end="2463:29">&amp;</operator> <literal type="number" pos:start="2463:31" pos:end="2463:31">7</literal><operator pos:start="2463:32" pos:end="2463:32">)</operator> <operator pos:start="2463:34" pos:end="2463:34">|</operator> <name pos:start="2463:36" pos:end="2463:40">rex_r</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2465:9" pos:end="2465:31"><expr pos:start="2465:9" pos:end="2465:30"><name pos:start="2465:9" pos:end="2465:11">mod</name> <operator pos:start="2465:13" pos:end="2465:13">=</operator> <operator pos:start="2465:15" pos:end="2465:15">(</operator><name pos:start="2465:16" pos:end="2465:20">modrm</name> <operator pos:start="2465:22" pos:end="2465:23">&gt;&gt;</operator> <literal type="number" pos:start="2465:25" pos:end="2465:25">6</literal><operator pos:start="2465:26" pos:end="2465:26">)</operator> <operator pos:start="2465:28" pos:end="2465:28">&amp;</operator> <literal type="number" pos:start="2465:30" pos:end="2465:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="2467:9" pos:end="2503:9"><if pos:start="2467:9" pos:end="2481:9">if <condition pos:start="2467:12" pos:end="2467:21">(<expr pos:start="2467:13" pos:end="2467:20"><name pos:start="2467:13" pos:end="2467:15">mod</name> <operator pos:start="2467:17" pos:end="2467:18">==</operator> <literal type="number" pos:start="2467:20" pos:end="2467:20">3</literal></expr>)</condition> <block pos:start="2467:23" pos:end="2481:9">{<block_content pos:start="2469:13" pos:end="2479:39">

            <expr_stmt pos:start="2469:13" pos:end="2469:40"><expr pos:start="2469:13" pos:end="2469:39"><name pos:start="2469:13" pos:end="2469:14">rm</name> <operator pos:start="2469:16" pos:end="2469:16">=</operator> <operator pos:start="2469:18" pos:end="2469:18">(</operator><name pos:start="2469:19" pos:end="2469:23">modrm</name> <operator pos:start="2469:25" pos:end="2469:25">&amp;</operator> <literal type="number" pos:start="2469:27" pos:end="2469:27">7</literal><operator pos:start="2469:28" pos:end="2469:28">)</operator> <operator pos:start="2469:30" pos:end="2469:30">|</operator> <call pos:start="2469:32" pos:end="2469:39"><name pos:start="2469:32" pos:end="2469:36">REX_B</name><argument_list pos:start="2469:37" pos:end="2469:39">(<argument pos:start="2469:38" pos:end="2469:38"><expr pos:start="2469:38" pos:end="2469:38"><name pos:start="2469:38" pos:end="2469:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label pos:start="2471:9" pos:end="2471:20"><name pos:start="2471:9" pos:end="2471:19">do_xchg_reg</name>:</label>

            <expr_stmt pos:start="2473:13" pos:end="2473:42"><expr pos:start="2473:13" pos:end="2473:41"><call pos:start="2473:13" pos:end="2473:41"><name pos:start="2473:13" pos:end="2473:29">gen_op_mov_TN_reg</name><argument_list pos:start="2473:30" pos:end="2473:41">(<argument pos:start="2473:31" pos:end="2473:32"><expr pos:start="2473:31" pos:end="2473:32"><name pos:start="2473:31" pos:end="2473:32">ot</name></expr></argument>, <argument pos:start="2473:35" pos:end="2473:35"><expr pos:start="2473:35" pos:end="2473:35"><literal type="number" pos:start="2473:35" pos:end="2473:35">0</literal></expr></argument>, <argument pos:start="2473:38" pos:end="2473:40"><expr pos:start="2473:38" pos:end="2473:40"><name pos:start="2473:38" pos:end="2473:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2475:13" pos:end="2475:41"><expr pos:start="2475:13" pos:end="2475:40"><call pos:start="2475:13" pos:end="2475:40"><name pos:start="2475:13" pos:end="2475:29">gen_op_mov_TN_reg</name><argument_list pos:start="2475:30" pos:end="2475:40">(<argument pos:start="2475:31" pos:end="2475:32"><expr pos:start="2475:31" pos:end="2475:32"><name pos:start="2475:31" pos:end="2475:32">ot</name></expr></argument>, <argument pos:start="2475:35" pos:end="2475:35"><expr pos:start="2475:35" pos:end="2475:35"><literal type="number" pos:start="2475:35" pos:end="2475:35">1</literal></expr></argument>, <argument pos:start="2475:38" pos:end="2475:39"><expr pos:start="2475:38" pos:end="2475:39"><name pos:start="2475:38" pos:end="2475:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2477:13" pos:end="2477:38"><expr pos:start="2477:13" pos:end="2477:37"><call pos:start="2477:13" pos:end="2477:37"><name pos:start="2477:13" pos:end="2477:29">gen_op_mov_reg_T0</name><argument_list pos:start="2477:30" pos:end="2477:37">(<argument pos:start="2477:31" pos:end="2477:32"><expr pos:start="2477:31" pos:end="2477:32"><name pos:start="2477:31" pos:end="2477:32">ot</name></expr></argument>, <argument pos:start="2477:35" pos:end="2477:36"><expr pos:start="2477:35" pos:end="2477:36"><name pos:start="2477:35" pos:end="2477:36">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2479:13" pos:end="2479:39"><expr pos:start="2479:13" pos:end="2479:38"><call pos:start="2479:13" pos:end="2479:38"><name pos:start="2479:13" pos:end="2479:29">gen_op_mov_reg_T1</name><argument_list pos:start="2479:30" pos:end="2479:38">(<argument pos:start="2479:31" pos:end="2479:32"><expr pos:start="2479:31" pos:end="2479:32"><name pos:start="2479:31" pos:end="2479:32">ot</name></expr></argument>, <argument pos:start="2479:35" pos:end="2479:37"><expr pos:start="2479:35" pos:end="2479:37"><name pos:start="2479:35" pos:end="2479:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2481:11" pos:end="2503:9">else <block pos:start="2481:16" pos:end="2503:9">{<block_content pos:start="2483:13" pos:end="2501:39">

            <expr_stmt pos:start="2483:13" pos:end="2483:66"><expr pos:start="2483:13" pos:end="2483:65"><call pos:start="2483:13" pos:end="2483:65"><name pos:start="2483:13" pos:end="2483:25">gen_lea_modrm</name><argument_list pos:start="2483:26" pos:end="2483:65">(<argument pos:start="2483:27" pos:end="2483:29"><expr pos:start="2483:27" pos:end="2483:29"><name pos:start="2483:27" pos:end="2483:29">env</name></expr></argument>, <argument pos:start="2483:32" pos:end="2483:32"><expr pos:start="2483:32" pos:end="2483:32"><name pos:start="2483:32" pos:end="2483:32">s</name></expr></argument>, <argument pos:start="2483:35" pos:end="2483:39"><expr pos:start="2483:35" pos:end="2483:39"><name pos:start="2483:35" pos:end="2483:39">modrm</name></expr></argument>, <argument pos:start="2483:42" pos:end="2483:50"><expr pos:start="2483:42" pos:end="2483:50"><operator pos:start="2483:42" pos:end="2483:42">&amp;</operator><name pos:start="2483:43" pos:end="2483:50">reg_addr</name></expr></argument>, <argument pos:start="2483:53" pos:end="2483:64"><expr pos:start="2483:53" pos:end="2483:64"><operator pos:start="2483:53" pos:end="2483:53">&amp;</operator><name pos:start="2483:54" pos:end="2483:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2485:13" pos:end="2485:42"><expr pos:start="2485:13" pos:end="2485:41"><call pos:start="2485:13" pos:end="2485:41"><name pos:start="2485:13" pos:end="2485:29">gen_op_mov_TN_reg</name><argument_list pos:start="2485:30" pos:end="2485:41">(<argument pos:start="2485:31" pos:end="2485:32"><expr pos:start="2485:31" pos:end="2485:32"><name pos:start="2485:31" pos:end="2485:32">ot</name></expr></argument>, <argument pos:start="2485:35" pos:end="2485:35"><expr pos:start="2485:35" pos:end="2485:35"><literal type="number" pos:start="2485:35" pos:end="2485:35">0</literal></expr></argument>, <argument pos:start="2485:38" pos:end="2485:40"><expr pos:start="2485:38" pos:end="2485:40"><name pos:start="2485:38" pos:end="2485:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="2487:13" pos:end="2487:44">/* for xchg, lock is implicit */</comment>

            <if_stmt pos:start="2489:13" pos:end="2491:34"><if pos:start="2489:13" pos:end="2491:34">if <condition pos:start="2489:16" pos:end="2489:42">(<expr pos:start="2489:17" pos:end="2489:41"><operator pos:start="2489:17" pos:end="2489:17">!</operator><operator pos:start="2489:18" pos:end="2489:18">(</operator><name pos:start="2489:19" pos:end="2489:26">prefixes</name> <operator pos:start="2489:28" pos:end="2489:28">&amp;</operator> <name pos:start="2489:30" pos:end="2489:40">PREFIX_LOCK</name><operator pos:start="2489:41" pos:end="2489:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2491:17" pos:end="2491:34"><block_content pos:start="2491:17" pos:end="2491:34">

                <expr_stmt pos:start="2491:17" pos:end="2491:34"><expr pos:start="2491:17" pos:end="2491:33"><call pos:start="2491:17" pos:end="2491:33"><name pos:start="2491:17" pos:end="2491:31">gen_helper_lock</name><argument_list pos:start="2491:32" pos:end="2491:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2493:13" pos:end="2493:47"><expr pos:start="2493:13" pos:end="2493:46"><call pos:start="2493:13" pos:end="2493:46"><name pos:start="2493:13" pos:end="2493:27">gen_op_ld_T1_A0</name><argument_list pos:start="2493:28" pos:end="2493:46">(<argument pos:start="2493:29" pos:end="2493:45"><expr pos:start="2493:29" pos:end="2493:45"><name pos:start="2493:29" pos:end="2493:30">ot</name> <operator pos:start="2493:32" pos:end="2493:32">+</operator> <name pos:start="2493:34" pos:end="2493:45"><name pos:start="2493:34" pos:end="2493:34">s</name><operator pos:start="2493:35" pos:end="2493:36">-&gt;</operator><name pos:start="2493:37" pos:end="2493:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2495:13" pos:end="2495:47"><expr pos:start="2495:13" pos:end="2495:46"><call pos:start="2495:13" pos:end="2495:46"><name pos:start="2495:13" pos:end="2495:27">gen_op_st_T0_A0</name><argument_list pos:start="2495:28" pos:end="2495:46">(<argument pos:start="2495:29" pos:end="2495:45"><expr pos:start="2495:29" pos:end="2495:45"><name pos:start="2495:29" pos:end="2495:30">ot</name> <operator pos:start="2495:32" pos:end="2495:32">+</operator> <name pos:start="2495:34" pos:end="2495:45"><name pos:start="2495:34" pos:end="2495:34">s</name><operator pos:start="2495:35" pos:end="2495:36">-&gt;</operator><name pos:start="2495:37" pos:end="2495:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2497:13" pos:end="2499:36"><if pos:start="2497:13" pos:end="2499:36">if <condition pos:start="2497:16" pos:end="2497:42">(<expr pos:start="2497:17" pos:end="2497:41"><operator pos:start="2497:17" pos:end="2497:17">!</operator><operator pos:start="2497:18" pos:end="2497:18">(</operator><name pos:start="2497:19" pos:end="2497:26">prefixes</name> <operator pos:start="2497:28" pos:end="2497:28">&amp;</operator> <name pos:start="2497:30" pos:end="2497:40">PREFIX_LOCK</name><operator pos:start="2497:41" pos:end="2497:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2499:17" pos:end="2499:36"><block_content pos:start="2499:17" pos:end="2499:36">

                <expr_stmt pos:start="2499:17" pos:end="2499:36"><expr pos:start="2499:17" pos:end="2499:35"><call pos:start="2499:17" pos:end="2499:35"><name pos:start="2499:17" pos:end="2499:33">gen_helper_unlock</name><argument_list pos:start="2499:34" pos:end="2499:35">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2501:13" pos:end="2501:39"><expr pos:start="2501:13" pos:end="2501:38"><call pos:start="2501:13" pos:end="2501:38"><name pos:start="2501:13" pos:end="2501:29">gen_op_mov_reg_T1</name><argument_list pos:start="2501:30" pos:end="2501:38">(<argument pos:start="2501:31" pos:end="2501:32"><expr pos:start="2501:31" pos:end="2501:32"><name pos:start="2501:31" pos:end="2501:32">ot</name></expr></argument>, <argument pos:start="2501:35" pos:end="2501:37"><expr pos:start="2501:35" pos:end="2501:37"><name pos:start="2501:35" pos:end="2501:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2505:9" pos:end="2505:14">break;</break>

    <case pos:start="2507:5" pos:end="2507:14">case <expr pos:start="2507:10" pos:end="2507:13"><literal type="number" pos:start="2507:10" pos:end="2507:13">0xc4</literal></expr>:</case> <comment type="block" pos:start="2507:16" pos:end="2507:27">/* les Gv */</comment>

        <if_stmt pos:start="2509:9" pos:end="2511:28"><if pos:start="2509:9" pos:end="2511:28">if <condition pos:start="2509:12" pos:end="2509:22">(<expr pos:start="2509:13" pos:end="2509:21"><call pos:start="2509:13" pos:end="2509:21"><name pos:start="2509:13" pos:end="2509:18">CODE64</name><argument_list pos:start="2509:19" pos:end="2509:21">(<argument pos:start="2509:20" pos:end="2509:20"><expr pos:start="2509:20" pos:end="2509:20"><name pos:start="2509:20" pos:end="2509:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2511:13" pos:end="2511:28"><block_content pos:start="2511:13" pos:end="2511:28">

            <goto pos:start="2511:13" pos:end="2511:28">goto <name pos:start="2511:18" pos:end="2511:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2513:9" pos:end="2513:18"><expr pos:start="2513:9" pos:end="2513:17"><name pos:start="2513:9" pos:end="2513:10">op</name> <operator pos:start="2513:12" pos:end="2513:12">=</operator> <name pos:start="2513:14" pos:end="2513:17">R_ES</name></expr>;</expr_stmt>

        <goto pos:start="2515:9" pos:end="2515:20">goto <name pos:start="2515:14" pos:end="2515:19">do_lxx</name>;</goto>

    <case pos:start="2517:5" pos:end="2517:14">case <expr pos:start="2517:10" pos:end="2517:13"><literal type="number" pos:start="2517:10" pos:end="2517:13">0xc5</literal></expr>:</case> <comment type="block" pos:start="2517:16" pos:end="2517:27">/* lds Gv */</comment>

        <if_stmt pos:start="2519:9" pos:end="2521:28"><if pos:start="2519:9" pos:end="2521:28">if <condition pos:start="2519:12" pos:end="2519:22">(<expr pos:start="2519:13" pos:end="2519:21"><call pos:start="2519:13" pos:end="2519:21"><name pos:start="2519:13" pos:end="2519:18">CODE64</name><argument_list pos:start="2519:19" pos:end="2519:21">(<argument pos:start="2519:20" pos:end="2519:20"><expr pos:start="2519:20" pos:end="2519:20"><name pos:start="2519:20" pos:end="2519:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2521:13" pos:end="2521:28"><block_content pos:start="2521:13" pos:end="2521:28">

            <goto pos:start="2521:13" pos:end="2521:28">goto <name pos:start="2521:18" pos:end="2521:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2523:9" pos:end="2523:18"><expr pos:start="2523:9" pos:end="2523:17"><name pos:start="2523:9" pos:end="2523:10">op</name> <operator pos:start="2523:12" pos:end="2523:12">=</operator> <name pos:start="2523:14" pos:end="2523:17">R_DS</name></expr>;</expr_stmt>

        <goto pos:start="2525:9" pos:end="2525:20">goto <name pos:start="2525:14" pos:end="2525:19">do_lxx</name>;</goto>

    <case pos:start="2527:5" pos:end="2527:15">case <expr pos:start="2527:10" pos:end="2527:14"><literal type="number" pos:start="2527:10" pos:end="2527:14">0x1b2</literal></expr>:</case> <comment type="block" pos:start="2527:17" pos:end="2527:28">/* lss Gv */</comment>

        <expr_stmt pos:start="2529:9" pos:end="2529:18"><expr pos:start="2529:9" pos:end="2529:17"><name pos:start="2529:9" pos:end="2529:10">op</name> <operator pos:start="2529:12" pos:end="2529:12">=</operator> <name pos:start="2529:14" pos:end="2529:17">R_SS</name></expr>;</expr_stmt>

        <goto pos:start="2531:9" pos:end="2531:20">goto <name pos:start="2531:14" pos:end="2531:19">do_lxx</name>;</goto>

    <case pos:start="2533:5" pos:end="2533:15">case <expr pos:start="2533:10" pos:end="2533:14"><literal type="number" pos:start="2533:10" pos:end="2533:14">0x1b4</literal></expr>:</case> <comment type="block" pos:start="2533:17" pos:end="2533:28">/* lfs Gv */</comment>

        <expr_stmt pos:start="2535:9" pos:end="2535:18"><expr pos:start="2535:9" pos:end="2535:17"><name pos:start="2535:9" pos:end="2535:10">op</name> <operator pos:start="2535:12" pos:end="2535:12">=</operator> <name pos:start="2535:14" pos:end="2535:17">R_FS</name></expr>;</expr_stmt>

        <goto pos:start="2537:9" pos:end="2537:20">goto <name pos:start="2537:14" pos:end="2537:19">do_lxx</name>;</goto>

    <case pos:start="2539:5" pos:end="2539:15">case <expr pos:start="2539:10" pos:end="2539:14"><literal type="number" pos:start="2539:10" pos:end="2539:14">0x1b5</literal></expr>:</case> <comment type="block" pos:start="2539:17" pos:end="2539:28">/* lgs Gv */</comment>

        <expr_stmt pos:start="2541:9" pos:end="2541:18"><expr pos:start="2541:9" pos:end="2541:17"><name pos:start="2541:9" pos:end="2541:10">op</name> <operator pos:start="2541:12" pos:end="2541:12">=</operator> <name pos:start="2541:14" pos:end="2541:17">R_GS</name></expr>;</expr_stmt>

    <label pos:start="2543:5" pos:end="2543:11"><name pos:start="2543:5" pos:end="2543:10">do_lxx</name>:</label>

        <expr_stmt pos:start="2545:9" pos:end="2545:39"><expr pos:start="2545:9" pos:end="2545:38"><name pos:start="2545:9" pos:end="2545:10">ot</name> <operator pos:start="2545:12" pos:end="2545:12">=</operator> <ternary pos:start="2545:14" pos:end="2545:38"><condition pos:start="2545:14" pos:end="2545:20"><expr pos:start="2545:14" pos:end="2545:18"><name pos:start="2545:14" pos:end="2545:18">dflag</name></expr> ?</condition><then pos:start="2545:22" pos:end="2545:28"> <expr pos:start="2545:22" pos:end="2545:28"><name pos:start="2545:22" pos:end="2545:28">OT_LONG</name></expr> </then><else pos:start="2545:30" pos:end="2545:38">: <expr pos:start="2545:32" pos:end="2545:38"><name pos:start="2545:32" pos:end="2545:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="2547:9" pos:end="2547:44"><expr pos:start="2547:9" pos:end="2547:43"><name pos:start="2547:9" pos:end="2547:13">modrm</name> <operator pos:start="2547:15" pos:end="2547:15">=</operator> <call pos:start="2547:17" pos:end="2547:43"><name pos:start="2547:17" pos:end="2547:29">cpu_ldub_code</name><argument_list pos:start="2547:30" pos:end="2547:43">(<argument pos:start="2547:31" pos:end="2547:33"><expr pos:start="2547:31" pos:end="2547:33"><name pos:start="2547:31" pos:end="2547:33">env</name></expr></argument>, <argument pos:start="2547:36" pos:end="2547:42"><expr pos:start="2547:36" pos:end="2547:42"><name pos:start="2547:36" pos:end="2547:40"><name pos:start="2547:36" pos:end="2547:36">s</name><operator pos:start="2547:37" pos:end="2547:38">-&gt;</operator><name pos:start="2547:39" pos:end="2547:40">pc</name></name><operator pos:start="2547:41" pos:end="2547:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2549:9" pos:end="2549:41"><expr pos:start="2549:9" pos:end="2549:40"><name pos:start="2549:9" pos:end="2549:11">reg</name> <operator pos:start="2549:13" pos:end="2549:13">=</operator> <operator pos:start="2549:15" pos:end="2549:15">(</operator><operator pos:start="2549:16" pos:end="2549:16">(</operator><name pos:start="2549:17" pos:end="2549:21">modrm</name> <operator pos:start="2549:23" pos:end="2549:24">&gt;&gt;</operator> <literal type="number" pos:start="2549:26" pos:end="2549:26">3</literal><operator pos:start="2549:27" pos:end="2549:27">)</operator> <operator pos:start="2549:29" pos:end="2549:29">&amp;</operator> <literal type="number" pos:start="2549:31" pos:end="2549:31">7</literal><operator pos:start="2549:32" pos:end="2549:32">)</operator> <operator pos:start="2549:34" pos:end="2549:34">|</operator> <name pos:start="2549:36" pos:end="2549:40">rex_r</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2551:9" pos:end="2551:31"><expr pos:start="2551:9" pos:end="2551:30"><name pos:start="2551:9" pos:end="2551:11">mod</name> <operator pos:start="2551:13" pos:end="2551:13">=</operator> <operator pos:start="2551:15" pos:end="2551:15">(</operator><name pos:start="2551:16" pos:end="2551:20">modrm</name> <operator pos:start="2551:22" pos:end="2551:23">&gt;&gt;</operator> <literal type="number" pos:start="2551:25" pos:end="2551:25">6</literal><operator pos:start="2551:26" pos:end="2551:26">)</operator> <operator pos:start="2551:28" pos:end="2551:28">&amp;</operator> <literal type="number" pos:start="2551:30" pos:end="2551:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="2553:9" pos:end="2555:28"><if pos:start="2553:9" pos:end="2555:28">if <condition pos:start="2553:12" pos:end="2553:21">(<expr pos:start="2553:13" pos:end="2553:20"><name pos:start="2553:13" pos:end="2553:15">mod</name> <operator pos:start="2553:17" pos:end="2553:18">==</operator> <literal type="number" pos:start="2553:20" pos:end="2553:20">3</literal></expr>)</condition><block type="pseudo" pos:start="2555:13" pos:end="2555:28"><block_content pos:start="2555:13" pos:end="2555:28">

            <goto pos:start="2555:13" pos:end="2555:28">goto <name pos:start="2555:18" pos:end="2555:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2557:9" pos:end="2557:62"><expr pos:start="2557:9" pos:end="2557:61"><call pos:start="2557:9" pos:end="2557:61"><name pos:start="2557:9" pos:end="2557:21">gen_lea_modrm</name><argument_list pos:start="2557:22" pos:end="2557:61">(<argument pos:start="2557:23" pos:end="2557:25"><expr pos:start="2557:23" pos:end="2557:25"><name pos:start="2557:23" pos:end="2557:25">env</name></expr></argument>, <argument pos:start="2557:28" pos:end="2557:28"><expr pos:start="2557:28" pos:end="2557:28"><name pos:start="2557:28" pos:end="2557:28">s</name></expr></argument>, <argument pos:start="2557:31" pos:end="2557:35"><expr pos:start="2557:31" pos:end="2557:35"><name pos:start="2557:31" pos:end="2557:35">modrm</name></expr></argument>, <argument pos:start="2557:38" pos:end="2557:46"><expr pos:start="2557:38" pos:end="2557:46"><operator pos:start="2557:38" pos:end="2557:38">&amp;</operator><name pos:start="2557:39" pos:end="2557:46">reg_addr</name></expr></argument>, <argument pos:start="2557:49" pos:end="2557:60"><expr pos:start="2557:49" pos:end="2557:60"><operator pos:start="2557:49" pos:end="2557:49">&amp;</operator><name pos:start="2557:50" pos:end="2557:60">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2559:9" pos:end="2559:43"><expr pos:start="2559:9" pos:end="2559:42"><call pos:start="2559:9" pos:end="2559:42"><name pos:start="2559:9" pos:end="2559:23">gen_op_ld_T1_A0</name><argument_list pos:start="2559:24" pos:end="2559:42">(<argument pos:start="2559:25" pos:end="2559:41"><expr pos:start="2559:25" pos:end="2559:41"><name pos:start="2559:25" pos:end="2559:26">ot</name> <operator pos:start="2559:28" pos:end="2559:28">+</operator> <name pos:start="2559:30" pos:end="2559:41"><name pos:start="2559:30" pos:end="2559:30">s</name><operator pos:start="2559:31" pos:end="2559:32">-&gt;</operator><name pos:start="2559:33" pos:end="2559:41">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2561:9" pos:end="2561:50"><expr pos:start="2561:9" pos:end="2561:49"><call pos:start="2561:9" pos:end="2561:49"><name pos:start="2561:9" pos:end="2561:21">gen_add_A0_im</name><argument_list pos:start="2561:22" pos:end="2561:49">(<argument pos:start="2561:23" pos:end="2561:23"><expr pos:start="2561:23" pos:end="2561:23"><name pos:start="2561:23" pos:end="2561:23">s</name></expr></argument>, <argument pos:start="2561:26" pos:end="2561:48"><expr pos:start="2561:26" pos:end="2561:48"><literal type="number" pos:start="2561:26" pos:end="2561:26">1</literal> <operator pos:start="2561:28" pos:end="2561:29">&lt;&lt;</operator> <operator pos:start="2561:31" pos:end="2561:31">(</operator><name pos:start="2561:32" pos:end="2561:33">ot</name> <operator pos:start="2561:35" pos:end="2561:35">-</operator> <name pos:start="2561:37" pos:end="2561:43">OT_WORD</name> <operator pos:start="2561:45" pos:end="2561:45">+</operator> <literal type="number" pos:start="2561:47" pos:end="2561:47">1</literal><operator pos:start="2561:48" pos:end="2561:48">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="2563:9" pos:end="2563:66">/* load the segment first to handle exceptions properly */</comment>

        <expr_stmt pos:start="2565:9" pos:end="2565:49"><expr pos:start="2565:9" pos:end="2565:48"><call pos:start="2565:9" pos:end="2565:48"><name pos:start="2565:9" pos:end="2565:24">gen_op_ldu_T0_A0</name><argument_list pos:start="2565:25" pos:end="2565:48">(<argument pos:start="2565:26" pos:end="2565:47"><expr pos:start="2565:26" pos:end="2565:47"><name pos:start="2565:26" pos:end="2565:32">OT_WORD</name> <operator pos:start="2565:34" pos:end="2565:34">+</operator> <name pos:start="2565:36" pos:end="2565:47"><name pos:start="2565:36" pos:end="2565:36">s</name><operator pos:start="2565:37" pos:end="2565:38">-&gt;</operator><name pos:start="2565:39" pos:end="2565:47">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2567:9" pos:end="2567:54"><expr pos:start="2567:9" pos:end="2567:53"><call pos:start="2567:9" pos:end="2567:53"><name pos:start="2567:9" pos:end="2567:23">gen_movl_seg_T0</name><argument_list pos:start="2567:24" pos:end="2567:53">(<argument pos:start="2567:25" pos:end="2567:25"><expr pos:start="2567:25" pos:end="2567:25"><name pos:start="2567:25" pos:end="2567:25">s</name></expr></argument>, <argument pos:start="2567:28" pos:end="2567:29"><expr pos:start="2567:28" pos:end="2567:29"><name pos:start="2567:28" pos:end="2567:29">op</name></expr></argument>, <argument pos:start="2567:32" pos:end="2567:52"><expr pos:start="2567:32" pos:end="2567:52"><name pos:start="2567:32" pos:end="2567:39">pc_start</name> <operator pos:start="2567:41" pos:end="2567:41">-</operator> <name pos:start="2567:43" pos:end="2567:52"><name pos:start="2567:43" pos:end="2567:43">s</name><operator pos:start="2567:44" pos:end="2567:45">-&gt;</operator><name pos:start="2567:46" pos:end="2567:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="2569:9" pos:end="2569:31">/* then put the data */</comment>

        <expr_stmt pos:start="2571:9" pos:end="2571:35"><expr pos:start="2571:9" pos:end="2571:34"><call pos:start="2571:9" pos:end="2571:34"><name pos:start="2571:9" pos:end="2571:25">gen_op_mov_reg_T1</name><argument_list pos:start="2571:26" pos:end="2571:34">(<argument pos:start="2571:27" pos:end="2571:28"><expr pos:start="2571:27" pos:end="2571:28"><name pos:start="2571:27" pos:end="2571:28">ot</name></expr></argument>, <argument pos:start="2571:31" pos:end="2571:33"><expr pos:start="2571:31" pos:end="2571:33"><name pos:start="2571:31" pos:end="2571:33">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2573:9" pos:end="2579:9"><if pos:start="2573:9" pos:end="2579:9">if <condition pos:start="2573:12" pos:end="2573:22">(<expr pos:start="2573:13" pos:end="2573:21"><name pos:start="2573:13" pos:end="2573:21"><name pos:start="2573:13" pos:end="2573:13">s</name><operator pos:start="2573:14" pos:end="2573:15">-&gt;</operator><name pos:start="2573:16" pos:end="2573:21">is_jmp</name></name></expr>)</condition> <block pos:start="2573:24" pos:end="2579:9">{<block_content pos:start="2575:13" pos:end="2577:23">

            <expr_stmt pos:start="2575:13" pos:end="2575:43"><expr pos:start="2575:13" pos:end="2575:42"><call pos:start="2575:13" pos:end="2575:42"><name pos:start="2575:13" pos:end="2575:22">gen_jmp_im</name><argument_list pos:start="2575:23" pos:end="2575:42">(<argument pos:start="2575:24" pos:end="2575:41"><expr pos:start="2575:24" pos:end="2575:41"><name pos:start="2575:24" pos:end="2575:28"><name pos:start="2575:24" pos:end="2575:24">s</name><operator pos:start="2575:25" pos:end="2575:26">-&gt;</operator><name pos:start="2575:27" pos:end="2575:28">pc</name></name> <operator pos:start="2575:30" pos:end="2575:30">-</operator> <name pos:start="2575:32" pos:end="2575:41"><name pos:start="2575:32" pos:end="2575:32">s</name><operator pos:start="2575:33" pos:end="2575:34">-&gt;</operator><name pos:start="2575:35" pos:end="2575:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2577:13" pos:end="2577:23"><expr pos:start="2577:13" pos:end="2577:22"><call pos:start="2577:13" pos:end="2577:22"><name pos:start="2577:13" pos:end="2577:19">gen_eob</name><argument_list pos:start="2577:20" pos:end="2577:22">(<argument pos:start="2577:21" pos:end="2577:21"><expr pos:start="2577:21" pos:end="2577:21"><name pos:start="2577:21" pos:end="2577:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="2581:9" pos:end="2581:14">break;</break>



        <comment type="block" format="doxygen" pos:start="2585:9" pos:end="2585:34">/************************/</comment>

        <comment type="block" pos:start="2587:9" pos:end="2587:20">/* shifts */</comment>

    <case pos:start="2589:5" pos:end="2589:14">case <expr pos:start="2589:10" pos:end="2589:13"><literal type="number" pos:start="2589:10" pos:end="2589:13">0xc0</literal></expr>:</case>

    <case pos:start="2591:5" pos:end="2591:14">case <expr pos:start="2591:10" pos:end="2591:13"><literal type="number" pos:start="2591:10" pos:end="2591:13">0xc1</literal></expr>:</case>

        <comment type="block" pos:start="2593:9" pos:end="2593:25">/* shift Ev,Ib */</comment>

        <expr_stmt pos:start="2595:9" pos:end="2595:18"><expr pos:start="2595:9" pos:end="2595:17"><name pos:start="2595:9" pos:end="2595:13">shift</name> <operator pos:start="2595:15" pos:end="2595:15">=</operator> <literal type="number" pos:start="2595:17" pos:end="2595:17">2</literal></expr>;</expr_stmt>

    <label pos:start="2597:5" pos:end="2597:9"><name pos:start="2597:5" pos:end="2597:8">grp2</name>:</label>

        <block pos:start="2599:9" pos:end="2657:9">{<block_content pos:start="2601:13" pos:end="2655:13">

            <if_stmt pos:start="2601:13" pos:end="2607:37"><if pos:start="2601:13" pos:end="2603:29">if <condition pos:start="2601:16" pos:end="2601:29">(<expr pos:start="2601:17" pos:end="2601:28"><operator pos:start="2601:17" pos:end="2601:17">(</operator><name pos:start="2601:18" pos:end="2601:18">b</name> <operator pos:start="2601:20" pos:end="2601:20">&amp;</operator> <literal type="number" pos:start="2601:22" pos:end="2601:22">1</literal><operator pos:start="2601:23" pos:end="2601:23">)</operator> <operator pos:start="2601:25" pos:end="2601:26">==</operator> <literal type="number" pos:start="2601:28" pos:end="2601:28">0</literal></expr>)</condition><block type="pseudo" pos:start="2603:17" pos:end="2603:29"><block_content pos:start="2603:17" pos:end="2603:29">

                <expr_stmt pos:start="2603:17" pos:end="2603:29"><expr pos:start="2603:17" pos:end="2603:28"><name pos:start="2603:17" pos:end="2603:18">ot</name> <operator pos:start="2603:20" pos:end="2603:20">=</operator> <name pos:start="2603:22" pos:end="2603:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="2605:13" pos:end="2607:37">else<block type="pseudo" pos:start="2607:17" pos:end="2607:37"><block_content pos:start="2607:17" pos:end="2607:37">

                <expr_stmt pos:start="2607:17" pos:end="2607:37"><expr pos:start="2607:17" pos:end="2607:36"><name pos:start="2607:17" pos:end="2607:18">ot</name> <operator pos:start="2607:20" pos:end="2607:20">=</operator> <name pos:start="2607:22" pos:end="2607:26">dflag</name> <operator pos:start="2607:28" pos:end="2607:28">+</operator> <name pos:start="2607:30" pos:end="2607:36">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <expr_stmt pos:start="2611:13" pos:end="2611:48"><expr pos:start="2611:13" pos:end="2611:47"><name pos:start="2611:13" pos:end="2611:17">modrm</name> <operator pos:start="2611:19" pos:end="2611:19">=</operator> <call pos:start="2611:21" pos:end="2611:47"><name pos:start="2611:21" pos:end="2611:33">cpu_ldub_code</name><argument_list pos:start="2611:34" pos:end="2611:47">(<argument pos:start="2611:35" pos:end="2611:37"><expr pos:start="2611:35" pos:end="2611:37"><name pos:start="2611:35" pos:end="2611:37">env</name></expr></argument>, <argument pos:start="2611:40" pos:end="2611:46"><expr pos:start="2611:40" pos:end="2611:46"><name pos:start="2611:40" pos:end="2611:44"><name pos:start="2611:40" pos:end="2611:40">s</name><operator pos:start="2611:41" pos:end="2611:42">-&gt;</operator><name pos:start="2611:43" pos:end="2611:44">pc</name></name><operator pos:start="2611:45" pos:end="2611:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2613:13" pos:end="2613:35"><expr pos:start="2613:13" pos:end="2613:34"><name pos:start="2613:13" pos:end="2613:15">mod</name> <operator pos:start="2613:17" pos:end="2613:17">=</operator> <operator pos:start="2613:19" pos:end="2613:19">(</operator><name pos:start="2613:20" pos:end="2613:24">modrm</name> <operator pos:start="2613:26" pos:end="2613:27">&gt;&gt;</operator> <literal type="number" pos:start="2613:29" pos:end="2613:29">6</literal><operator pos:start="2613:30" pos:end="2613:30">)</operator> <operator pos:start="2613:32" pos:end="2613:32">&amp;</operator> <literal type="number" pos:start="2613:34" pos:end="2613:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="2615:13" pos:end="2615:34"><expr pos:start="2615:13" pos:end="2615:33"><name pos:start="2615:13" pos:end="2615:14">op</name> <operator pos:start="2615:16" pos:end="2615:16">=</operator> <operator pos:start="2615:18" pos:end="2615:18">(</operator><name pos:start="2615:19" pos:end="2615:23">modrm</name> <operator pos:start="2615:25" pos:end="2615:26">&gt;&gt;</operator> <literal type="number" pos:start="2615:28" pos:end="2615:28">3</literal><operator pos:start="2615:29" pos:end="2615:29">)</operator> <operator pos:start="2615:31" pos:end="2615:31">&amp;</operator> <literal type="number" pos:start="2615:33" pos:end="2615:33">7</literal></expr>;</expr_stmt>



            <if_stmt pos:start="2619:13" pos:end="2635:13"><if pos:start="2619:13" pos:end="2631:13">if <condition pos:start="2619:16" pos:end="2619:25">(<expr pos:start="2619:17" pos:end="2619:24"><name pos:start="2619:17" pos:end="2619:19">mod</name> <operator pos:start="2619:21" pos:end="2619:22">!=</operator> <literal type="number" pos:start="2619:24" pos:end="2619:24">3</literal></expr>)</condition> <block pos:start="2619:27" pos:end="2631:13">{<block_content pos:start="2621:17" pos:end="2629:32">

                <if_stmt pos:start="2621:17" pos:end="2625:17"><if pos:start="2621:17" pos:end="2625:17">if <condition pos:start="2621:20" pos:end="2621:31">(<expr pos:start="2621:21" pos:end="2621:30"><name pos:start="2621:21" pos:end="2621:25">shift</name> <operator pos:start="2621:27" pos:end="2621:28">==</operator> <literal type="number" pos:start="2621:30" pos:end="2621:30">2</literal></expr>)</condition> <block pos:start="2621:33" pos:end="2625:17">{<block_content pos:start="2623:21" pos:end="2623:38">

                    <expr_stmt pos:start="2623:21" pos:end="2623:38"><expr pos:start="2623:21" pos:end="2623:37"><name pos:start="2623:21" pos:end="2623:33"><name pos:start="2623:21" pos:end="2623:21">s</name><operator pos:start="2623:22" pos:end="2623:23">-&gt;</operator><name pos:start="2623:24" pos:end="2623:33">rip_offset</name></name> <operator pos:start="2623:35" pos:end="2623:35">=</operator> <literal type="number" pos:start="2623:37" pos:end="2623:37">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="2627:17" pos:end="2627:70"><expr pos:start="2627:17" pos:end="2627:69"><call pos:start="2627:17" pos:end="2627:69"><name pos:start="2627:17" pos:end="2627:29">gen_lea_modrm</name><argument_list pos:start="2627:30" pos:end="2627:69">(<argument pos:start="2627:31" pos:end="2627:33"><expr pos:start="2627:31" pos:end="2627:33"><name pos:start="2627:31" pos:end="2627:33">env</name></expr></argument>, <argument pos:start="2627:36" pos:end="2627:36"><expr pos:start="2627:36" pos:end="2627:36"><name pos:start="2627:36" pos:end="2627:36">s</name></expr></argument>, <argument pos:start="2627:39" pos:end="2627:43"><expr pos:start="2627:39" pos:end="2627:43"><name pos:start="2627:39" pos:end="2627:43">modrm</name></expr></argument>, <argument pos:start="2627:46" pos:end="2627:54"><expr pos:start="2627:46" pos:end="2627:54"><operator pos:start="2627:46" pos:end="2627:46">&amp;</operator><name pos:start="2627:47" pos:end="2627:54">reg_addr</name></expr></argument>, <argument pos:start="2627:57" pos:end="2627:68"><expr pos:start="2627:57" pos:end="2627:68"><operator pos:start="2627:57" pos:end="2627:57">&amp;</operator><name pos:start="2627:58" pos:end="2627:68">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2629:17" pos:end="2629:32"><expr pos:start="2629:17" pos:end="2629:31"><name pos:start="2629:17" pos:end="2629:21">opreg</name> <operator pos:start="2629:23" pos:end="2629:23">=</operator> <name pos:start="2629:25" pos:end="2629:31">OR_TMP0</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2631:15" pos:end="2635:13">else <block pos:start="2631:20" pos:end="2635:13">{<block_content pos:start="2633:17" pos:end="2633:47">

                <expr_stmt pos:start="2633:17" pos:end="2633:47"><expr pos:start="2633:17" pos:end="2633:46"><name pos:start="2633:17" pos:end="2633:21">opreg</name> <operator pos:start="2633:23" pos:end="2633:23">=</operator> <operator pos:start="2633:25" pos:end="2633:25">(</operator><name pos:start="2633:26" pos:end="2633:30">modrm</name> <operator pos:start="2633:32" pos:end="2633:32">&amp;</operator> <literal type="number" pos:start="2633:34" pos:end="2633:34">7</literal><operator pos:start="2633:35" pos:end="2633:35">)</operator> <operator pos:start="2633:37" pos:end="2633:37">|</operator> <call pos:start="2633:39" pos:end="2633:46"><name pos:start="2633:39" pos:end="2633:43">REX_B</name><argument_list pos:start="2633:44" pos:end="2633:46">(<argument pos:start="2633:45" pos:end="2633:45"><expr pos:start="2633:45" pos:end="2633:45"><name pos:start="2633:45" pos:end="2633:45">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <comment type="block" pos:start="2639:13" pos:end="2639:28">/* simpler op */</comment>

            <if_stmt pos:start="2641:13" pos:end="2655:13"><if pos:start="2641:13" pos:end="2645:13">if <condition pos:start="2641:16" pos:end="2641:27">(<expr pos:start="2641:17" pos:end="2641:26"><name pos:start="2641:17" pos:end="2641:21">shift</name> <operator pos:start="2641:23" pos:end="2641:24">==</operator> <literal type="number" pos:start="2641:26" pos:end="2641:26">0</literal></expr>)</condition> <block pos:start="2641:29" pos:end="2645:13">{<block_content pos:start="2643:17" pos:end="2643:52">

                <expr_stmt pos:start="2643:17" pos:end="2643:52"><expr pos:start="2643:17" pos:end="2643:51"><call pos:start="2643:17" pos:end="2643:51"><name pos:start="2643:17" pos:end="2643:25">gen_shift</name><argument_list pos:start="2643:26" pos:end="2643:51">(<argument pos:start="2643:27" pos:end="2643:27"><expr pos:start="2643:27" pos:end="2643:27"><name pos:start="2643:27" pos:end="2643:27">s</name></expr></argument>, <argument pos:start="2643:30" pos:end="2643:31"><expr pos:start="2643:30" pos:end="2643:31"><name pos:start="2643:30" pos:end="2643:31">op</name></expr></argument>, <argument pos:start="2643:34" pos:end="2643:35"><expr pos:start="2643:34" pos:end="2643:35"><name pos:start="2643:34" pos:end="2643:35">ot</name></expr></argument>, <argument pos:start="2643:38" pos:end="2643:42"><expr pos:start="2643:38" pos:end="2643:42"><name pos:start="2643:38" pos:end="2643:42">opreg</name></expr></argument>, <argument pos:start="2643:45" pos:end="2643:50"><expr pos:start="2643:45" pos:end="2643:50"><name pos:start="2643:45" pos:end="2643:50">OR_ECX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2645:15" pos:end="2655:13">else <block pos:start="2645:20" pos:end="2655:13">{<block_content pos:start="2647:17" pos:end="2653:52">

                <if_stmt pos:start="2647:17" pos:end="2651:17"><if pos:start="2647:17" pos:end="2651:17">if <condition pos:start="2647:20" pos:end="2647:31">(<expr pos:start="2647:21" pos:end="2647:30"><name pos:start="2647:21" pos:end="2647:25">shift</name> <operator pos:start="2647:27" pos:end="2647:28">==</operator> <literal type="number" pos:start="2647:30" pos:end="2647:30">2</literal></expr>)</condition> <block pos:start="2647:33" pos:end="2651:17">{<block_content pos:start="2649:21" pos:end="2649:56">

                    <expr_stmt pos:start="2649:21" pos:end="2649:56"><expr pos:start="2649:21" pos:end="2649:55"><name pos:start="2649:21" pos:end="2649:25">shift</name> <operator pos:start="2649:27" pos:end="2649:27">=</operator> <call pos:start="2649:29" pos:end="2649:55"><name pos:start="2649:29" pos:end="2649:41">cpu_ldub_code</name><argument_list pos:start="2649:42" pos:end="2649:55">(<argument pos:start="2649:43" pos:end="2649:45"><expr pos:start="2649:43" pos:end="2649:45"><name pos:start="2649:43" pos:end="2649:45">env</name></expr></argument>, <argument pos:start="2649:48" pos:end="2649:54"><expr pos:start="2649:48" pos:end="2649:54"><name pos:start="2649:48" pos:end="2649:52"><name pos:start="2649:48" pos:end="2649:48">s</name><operator pos:start="2649:49" pos:end="2649:50">-&gt;</operator><name pos:start="2649:51" pos:end="2649:52">pc</name></name><operator pos:start="2649:53" pos:end="2649:54">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="2653:17" pos:end="2653:52"><expr pos:start="2653:17" pos:end="2653:51"><call pos:start="2653:17" pos:end="2653:51"><name pos:start="2653:17" pos:end="2653:26">gen_shifti</name><argument_list pos:start="2653:27" pos:end="2653:51">(<argument pos:start="2653:28" pos:end="2653:28"><expr pos:start="2653:28" pos:end="2653:28"><name pos:start="2653:28" pos:end="2653:28">s</name></expr></argument>, <argument pos:start="2653:31" pos:end="2653:32"><expr pos:start="2653:31" pos:end="2653:32"><name pos:start="2653:31" pos:end="2653:32">op</name></expr></argument>, <argument pos:start="2653:35" pos:end="2653:36"><expr pos:start="2653:35" pos:end="2653:36"><name pos:start="2653:35" pos:end="2653:36">ot</name></expr></argument>, <argument pos:start="2653:39" pos:end="2653:43"><expr pos:start="2653:39" pos:end="2653:43"><name pos:start="2653:39" pos:end="2653:43">opreg</name></expr></argument>, <argument pos:start="2653:46" pos:end="2653:50"><expr pos:start="2653:46" pos:end="2653:50"><name pos:start="2653:46" pos:end="2653:50">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="2659:9" pos:end="2659:14">break;</break>

    <case pos:start="2661:5" pos:end="2661:14">case <expr pos:start="2661:10" pos:end="2661:13"><literal type="number" pos:start="2661:10" pos:end="2661:13">0xd0</literal></expr>:</case>

    <case pos:start="2663:5" pos:end="2663:14">case <expr pos:start="2663:10" pos:end="2663:13"><literal type="number" pos:start="2663:10" pos:end="2663:13">0xd1</literal></expr>:</case>

        <comment type="block" pos:start="2665:9" pos:end="2665:24">/* shift Ev,1 */</comment>

        <expr_stmt pos:start="2667:9" pos:end="2667:18"><expr pos:start="2667:9" pos:end="2667:17"><name pos:start="2667:9" pos:end="2667:13">shift</name> <operator pos:start="2667:15" pos:end="2667:15">=</operator> <literal type="number" pos:start="2667:17" pos:end="2667:17">1</literal></expr>;</expr_stmt>

        <goto pos:start="2669:9" pos:end="2669:18">goto <name pos:start="2669:14" pos:end="2669:17">grp2</name>;</goto>

    <case pos:start="2671:5" pos:end="2671:14">case <expr pos:start="2671:10" pos:end="2671:13"><literal type="number" pos:start="2671:10" pos:end="2671:13">0xd2</literal></expr>:</case>

    <case pos:start="2673:5" pos:end="2673:14">case <expr pos:start="2673:10" pos:end="2673:13"><literal type="number" pos:start="2673:10" pos:end="2673:13">0xd3</literal></expr>:</case>

        <comment type="block" pos:start="2675:9" pos:end="2675:25">/* shift Ev,cl */</comment>

        <expr_stmt pos:start="2677:9" pos:end="2677:18"><expr pos:start="2677:9" pos:end="2677:17"><name pos:start="2677:9" pos:end="2677:13">shift</name> <operator pos:start="2677:15" pos:end="2677:15">=</operator> <literal type="number" pos:start="2677:17" pos:end="2677:17">0</literal></expr>;</expr_stmt>

        <goto pos:start="2679:9" pos:end="2679:18">goto <name pos:start="2679:14" pos:end="2679:17">grp2</name>;</goto>



    <case pos:start="2683:5" pos:end="2683:15">case <expr pos:start="2683:10" pos:end="2683:14"><literal type="number" pos:start="2683:10" pos:end="2683:14">0x1a4</literal></expr>:</case> <comment type="block" pos:start="2683:17" pos:end="2683:30">/* shld imm */</comment>

        <expr_stmt pos:start="2685:9" pos:end="2685:15"><expr pos:start="2685:9" pos:end="2685:14"><name pos:start="2685:9" pos:end="2685:10">op</name> <operator pos:start="2685:12" pos:end="2685:12">=</operator> <literal type="number" pos:start="2685:14" pos:end="2685:14">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2687:9" pos:end="2687:18"><expr pos:start="2687:9" pos:end="2687:17"><name pos:start="2687:9" pos:end="2687:13">shift</name> <operator pos:start="2687:15" pos:end="2687:15">=</operator> <literal type="number" pos:start="2687:17" pos:end="2687:17">1</literal></expr>;</expr_stmt>

        <goto pos:start="2689:9" pos:end="2689:23">goto <name pos:start="2689:14" pos:end="2689:22">do_shiftd</name>;</goto>

    <case pos:start="2691:5" pos:end="2691:15">case <expr pos:start="2691:10" pos:end="2691:14"><literal type="number" pos:start="2691:10" pos:end="2691:14">0x1a5</literal></expr>:</case> <comment type="block" pos:start="2691:17" pos:end="2691:29">/* shld cl */</comment>

        <expr_stmt pos:start="2693:9" pos:end="2693:15"><expr pos:start="2693:9" pos:end="2693:14"><name pos:start="2693:9" pos:end="2693:10">op</name> <operator pos:start="2693:12" pos:end="2693:12">=</operator> <literal type="number" pos:start="2693:14" pos:end="2693:14">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2695:9" pos:end="2695:18"><expr pos:start="2695:9" pos:end="2695:17"><name pos:start="2695:9" pos:end="2695:13">shift</name> <operator pos:start="2695:15" pos:end="2695:15">=</operator> <literal type="number" pos:start="2695:17" pos:end="2695:17">0</literal></expr>;</expr_stmt>

        <goto pos:start="2697:9" pos:end="2697:23">goto <name pos:start="2697:14" pos:end="2697:22">do_shiftd</name>;</goto>

    <case pos:start="2699:5" pos:end="2699:15">case <expr pos:start="2699:10" pos:end="2699:14"><literal type="number" pos:start="2699:10" pos:end="2699:14">0x1ac</literal></expr>:</case> <comment type="block" pos:start="2699:17" pos:end="2699:30">/* shrd imm */</comment>

        <expr_stmt pos:start="2701:9" pos:end="2701:15"><expr pos:start="2701:9" pos:end="2701:14"><name pos:start="2701:9" pos:end="2701:10">op</name> <operator pos:start="2701:12" pos:end="2701:12">=</operator> <literal type="number" pos:start="2701:14" pos:end="2701:14">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2703:9" pos:end="2703:18"><expr pos:start="2703:9" pos:end="2703:17"><name pos:start="2703:9" pos:end="2703:13">shift</name> <operator pos:start="2703:15" pos:end="2703:15">=</operator> <literal type="number" pos:start="2703:17" pos:end="2703:17">1</literal></expr>;</expr_stmt>

        <goto pos:start="2705:9" pos:end="2705:23">goto <name pos:start="2705:14" pos:end="2705:22">do_shiftd</name>;</goto>

    <case pos:start="2707:5" pos:end="2707:15">case <expr pos:start="2707:10" pos:end="2707:14"><literal type="number" pos:start="2707:10" pos:end="2707:14">0x1ad</literal></expr>:</case> <comment type="block" pos:start="2707:17" pos:end="2707:29">/* shrd cl */</comment>

        <expr_stmt pos:start="2709:9" pos:end="2709:15"><expr pos:start="2709:9" pos:end="2709:14"><name pos:start="2709:9" pos:end="2709:10">op</name> <operator pos:start="2709:12" pos:end="2709:12">=</operator> <literal type="number" pos:start="2709:14" pos:end="2709:14">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2711:9" pos:end="2711:18"><expr pos:start="2711:9" pos:end="2711:17"><name pos:start="2711:9" pos:end="2711:13">shift</name> <operator pos:start="2711:15" pos:end="2711:15">=</operator> <literal type="number" pos:start="2711:17" pos:end="2711:17">0</literal></expr>;</expr_stmt>

    <label pos:start="2713:5" pos:end="2713:14"><name pos:start="2713:5" pos:end="2713:13">do_shiftd</name>:</label>

        <expr_stmt pos:start="2715:9" pos:end="2715:29"><expr pos:start="2715:9" pos:end="2715:28"><name pos:start="2715:9" pos:end="2715:10">ot</name> <operator pos:start="2715:12" pos:end="2715:12">=</operator> <name pos:start="2715:14" pos:end="2715:18">dflag</name> <operator pos:start="2715:20" pos:end="2715:20">+</operator> <name pos:start="2715:22" pos:end="2715:28">OT_WORD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2717:9" pos:end="2717:44"><expr pos:start="2717:9" pos:end="2717:43"><name pos:start="2717:9" pos:end="2717:13">modrm</name> <operator pos:start="2717:15" pos:end="2717:15">=</operator> <call pos:start="2717:17" pos:end="2717:43"><name pos:start="2717:17" pos:end="2717:29">cpu_ldub_code</name><argument_list pos:start="2717:30" pos:end="2717:43">(<argument pos:start="2717:31" pos:end="2717:33"><expr pos:start="2717:31" pos:end="2717:33"><name pos:start="2717:31" pos:end="2717:33">env</name></expr></argument>, <argument pos:start="2717:36" pos:end="2717:42"><expr pos:start="2717:36" pos:end="2717:42"><name pos:start="2717:36" pos:end="2717:40"><name pos:start="2717:36" pos:end="2717:36">s</name><operator pos:start="2717:37" pos:end="2717:38">-&gt;</operator><name pos:start="2717:39" pos:end="2717:40">pc</name></name><operator pos:start="2717:41" pos:end="2717:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2719:9" pos:end="2719:31"><expr pos:start="2719:9" pos:end="2719:30"><name pos:start="2719:9" pos:end="2719:11">mod</name> <operator pos:start="2719:13" pos:end="2719:13">=</operator> <operator pos:start="2719:15" pos:end="2719:15">(</operator><name pos:start="2719:16" pos:end="2719:20">modrm</name> <operator pos:start="2719:22" pos:end="2719:23">&gt;&gt;</operator> <literal type="number" pos:start="2719:25" pos:end="2719:25">6</literal><operator pos:start="2719:26" pos:end="2719:26">)</operator> <operator pos:start="2719:28" pos:end="2719:28">&amp;</operator> <literal type="number" pos:start="2719:30" pos:end="2719:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2721:9" pos:end="2721:36"><expr pos:start="2721:9" pos:end="2721:35"><name pos:start="2721:9" pos:end="2721:10">rm</name> <operator pos:start="2721:12" pos:end="2721:12">=</operator> <operator pos:start="2721:14" pos:end="2721:14">(</operator><name pos:start="2721:15" pos:end="2721:19">modrm</name> <operator pos:start="2721:21" pos:end="2721:21">&amp;</operator> <literal type="number" pos:start="2721:23" pos:end="2721:23">7</literal><operator pos:start="2721:24" pos:end="2721:24">)</operator> <operator pos:start="2721:26" pos:end="2721:26">|</operator> <call pos:start="2721:28" pos:end="2721:35"><name pos:start="2721:28" pos:end="2721:32">REX_B</name><argument_list pos:start="2721:33" pos:end="2721:35">(<argument pos:start="2721:34" pos:end="2721:34"><expr pos:start="2721:34" pos:end="2721:34"><name pos:start="2721:34" pos:end="2721:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2723:9" pos:end="2723:41"><expr pos:start="2723:9" pos:end="2723:40"><name pos:start="2723:9" pos:end="2723:11">reg</name> <operator pos:start="2723:13" pos:end="2723:13">=</operator> <operator pos:start="2723:15" pos:end="2723:15">(</operator><operator pos:start="2723:16" pos:end="2723:16">(</operator><name pos:start="2723:17" pos:end="2723:21">modrm</name> <operator pos:start="2723:23" pos:end="2723:24">&gt;&gt;</operator> <literal type="number" pos:start="2723:26" pos:end="2723:26">3</literal><operator pos:start="2723:27" pos:end="2723:27">)</operator> <operator pos:start="2723:29" pos:end="2723:29">&amp;</operator> <literal type="number" pos:start="2723:31" pos:end="2723:31">7</literal><operator pos:start="2723:32" pos:end="2723:32">)</operator> <operator pos:start="2723:34" pos:end="2723:34">|</operator> <name pos:start="2723:36" pos:end="2723:40">rex_r</name></expr>;</expr_stmt>

        <if_stmt pos:start="2725:9" pos:end="2735:9"><if pos:start="2725:9" pos:end="2731:9">if <condition pos:start="2725:12" pos:end="2725:21">(<expr pos:start="2725:13" pos:end="2725:20"><name pos:start="2725:13" pos:end="2725:15">mod</name> <operator pos:start="2725:17" pos:end="2725:18">!=</operator> <literal type="number" pos:start="2725:20" pos:end="2725:20">3</literal></expr>)</condition> <block pos:start="2725:23" pos:end="2731:9">{<block_content pos:start="2727:13" pos:end="2729:28">

            <expr_stmt pos:start="2727:13" pos:end="2727:66"><expr pos:start="2727:13" pos:end="2727:65"><call pos:start="2727:13" pos:end="2727:65"><name pos:start="2727:13" pos:end="2727:25">gen_lea_modrm</name><argument_list pos:start="2727:26" pos:end="2727:65">(<argument pos:start="2727:27" pos:end="2727:29"><expr pos:start="2727:27" pos:end="2727:29"><name pos:start="2727:27" pos:end="2727:29">env</name></expr></argument>, <argument pos:start="2727:32" pos:end="2727:32"><expr pos:start="2727:32" pos:end="2727:32"><name pos:start="2727:32" pos:end="2727:32">s</name></expr></argument>, <argument pos:start="2727:35" pos:end="2727:39"><expr pos:start="2727:35" pos:end="2727:39"><name pos:start="2727:35" pos:end="2727:39">modrm</name></expr></argument>, <argument pos:start="2727:42" pos:end="2727:50"><expr pos:start="2727:42" pos:end="2727:50"><operator pos:start="2727:42" pos:end="2727:42">&amp;</operator><name pos:start="2727:43" pos:end="2727:50">reg_addr</name></expr></argument>, <argument pos:start="2727:53" pos:end="2727:64"><expr pos:start="2727:53" pos:end="2727:64"><operator pos:start="2727:53" pos:end="2727:53">&amp;</operator><name pos:start="2727:54" pos:end="2727:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2729:13" pos:end="2729:28"><expr pos:start="2729:13" pos:end="2729:27"><name pos:start="2729:13" pos:end="2729:17">opreg</name> <operator pos:start="2729:19" pos:end="2729:19">=</operator> <name pos:start="2729:21" pos:end="2729:27">OR_TMP0</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2731:11" pos:end="2735:9">else <block pos:start="2731:16" pos:end="2735:9">{<block_content pos:start="2733:13" pos:end="2733:23">

            <expr_stmt pos:start="2733:13" pos:end="2733:23"><expr pos:start="2733:13" pos:end="2733:22"><name pos:start="2733:13" pos:end="2733:17">opreg</name> <operator pos:start="2733:19" pos:end="2733:19">=</operator> <name pos:start="2733:21" pos:end="2733:22">rm</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="2737:9" pos:end="2737:38"><expr pos:start="2737:9" pos:end="2737:37"><call pos:start="2737:9" pos:end="2737:37"><name pos:start="2737:9" pos:end="2737:25">gen_op_mov_TN_reg</name><argument_list pos:start="2737:26" pos:end="2737:37">(<argument pos:start="2737:27" pos:end="2737:28"><expr pos:start="2737:27" pos:end="2737:28"><name pos:start="2737:27" pos:end="2737:28">ot</name></expr></argument>, <argument pos:start="2737:31" pos:end="2737:31"><expr pos:start="2737:31" pos:end="2737:31"><literal type="number" pos:start="2737:31" pos:end="2737:31">1</literal></expr></argument>, <argument pos:start="2737:34" pos:end="2737:36"><expr pos:start="2737:34" pos:end="2737:36"><name pos:start="2737:34" pos:end="2737:36">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="2741:9" pos:end="2751:9"><if pos:start="2741:9" pos:end="2747:9">if <condition pos:start="2741:12" pos:end="2741:18">(<expr pos:start="2741:13" pos:end="2741:17"><name pos:start="2741:13" pos:end="2741:17">shift</name></expr>)</condition> <block pos:start="2741:20" pos:end="2747:9">{<block_content pos:start="2743:13" pos:end="2745:41">

            <expr_stmt pos:start="2743:13" pos:end="2743:46"><expr pos:start="2743:13" pos:end="2743:45"><name pos:start="2743:13" pos:end="2743:15">val</name> <operator pos:start="2743:17" pos:end="2743:17">=</operator> <call pos:start="2743:19" pos:end="2743:45"><name pos:start="2743:19" pos:end="2743:31">cpu_ldub_code</name><argument_list pos:start="2743:32" pos:end="2743:45">(<argument pos:start="2743:33" pos:end="2743:35"><expr pos:start="2743:33" pos:end="2743:35"><name pos:start="2743:33" pos:end="2743:35">env</name></expr></argument>, <argument pos:start="2743:38" pos:end="2743:44"><expr pos:start="2743:38" pos:end="2743:44"><name pos:start="2743:38" pos:end="2743:42"><name pos:start="2743:38" pos:end="2743:38">s</name><operator pos:start="2743:39" pos:end="2743:40">-&gt;</operator><name pos:start="2743:41" pos:end="2743:42">pc</name></name><operator pos:start="2743:43" pos:end="2743:44">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2745:13" pos:end="2745:41"><expr pos:start="2745:13" pos:end="2745:40"><call pos:start="2745:13" pos:end="2745:40"><name pos:start="2745:13" pos:end="2745:27">tcg_gen_movi_tl</name><argument_list pos:start="2745:28" pos:end="2745:40">(<argument pos:start="2745:29" pos:end="2745:34"><expr pos:start="2745:29" pos:end="2745:34"><name pos:start="2745:29" pos:end="2745:34">cpu_T3</name></expr></argument>, <argument pos:start="2745:37" pos:end="2745:39"><expr pos:start="2745:37" pos:end="2745:39"><name pos:start="2745:37" pos:end="2745:39">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2747:11" pos:end="2751:9">else <block pos:start="2747:16" pos:end="2751:9">{<block_content pos:start="2749:13" pos:end="2749:52">

            <expr_stmt pos:start="2749:13" pos:end="2749:52"><expr pos:start="2749:13" pos:end="2749:51"><call pos:start="2749:13" pos:end="2749:51"><name pos:start="2749:13" pos:end="2749:26">tcg_gen_mov_tl</name><argument_list pos:start="2749:27" pos:end="2749:51">(<argument pos:start="2749:28" pos:end="2749:33"><expr pos:start="2749:28" pos:end="2749:33"><name pos:start="2749:28" pos:end="2749:33">cpu_T3</name></expr></argument>, <argument pos:start="2749:36" pos:end="2749:50"><expr pos:start="2749:36" pos:end="2749:50"><name pos:start="2749:36" pos:end="2749:50"><name pos:start="2749:36" pos:end="2749:43">cpu_regs</name><index pos:start="2749:44" pos:end="2749:50">[<expr pos:start="2749:45" pos:end="2749:49"><name pos:start="2749:45" pos:end="2749:49">R_ECX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="2753:9" pos:end="2753:46"><expr pos:start="2753:9" pos:end="2753:45"><call pos:start="2753:9" pos:end="2753:45"><name pos:start="2753:9" pos:end="2753:27">gen_shiftd_rm_T1_T3</name><argument_list pos:start="2753:28" pos:end="2753:45">(<argument pos:start="2753:29" pos:end="2753:29"><expr pos:start="2753:29" pos:end="2753:29"><name pos:start="2753:29" pos:end="2753:29">s</name></expr></argument>, <argument pos:start="2753:32" pos:end="2753:33"><expr pos:start="2753:32" pos:end="2753:33"><name pos:start="2753:32" pos:end="2753:33">ot</name></expr></argument>, <argument pos:start="2753:36" pos:end="2753:40"><expr pos:start="2753:36" pos:end="2753:40"><name pos:start="2753:36" pos:end="2753:40">opreg</name></expr></argument>, <argument pos:start="2753:43" pos:end="2753:44"><expr pos:start="2753:43" pos:end="2753:44"><name pos:start="2753:43" pos:end="2753:44">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2755:9" pos:end="2755:14">break;</break>



        <comment type="block" format="doxygen" pos:start="2759:9" pos:end="2759:34">/************************/</comment>

        <comment type="block" pos:start="2761:9" pos:end="2761:20">/* floats */</comment>

    <case pos:start="2763:5" pos:end="2763:23">case <expr pos:start="2763:10" pos:end="2763:22"><literal type="number" pos:start="2763:10" pos:end="2763:13">0xd8</literal> <operator pos:start="2763:15" pos:end="2763:17">...</operator> <literal type="number" pos:start="2763:19" pos:end="2763:22">0xdf</literal></expr>:</case>

        <if_stmt pos:start="2765:9" pos:end="2775:9"><if pos:start="2765:9" pos:end="2775:9">if <condition pos:start="2765:12" pos:end="2765:49">(<expr pos:start="2765:13" pos:end="2765:48"><name pos:start="2765:13" pos:end="2765:20"><name pos:start="2765:13" pos:end="2765:13">s</name><operator pos:start="2765:14" pos:end="2765:15">-&gt;</operator><name pos:start="2765:16" pos:end="2765:20">flags</name></name> <operator pos:start="2765:22" pos:end="2765:22">&amp;</operator> <operator pos:start="2765:24" pos:end="2765:24">(</operator><name pos:start="2765:25" pos:end="2765:34">HF_EM_MASK</name> <operator pos:start="2765:36" pos:end="2765:36">|</operator> <name pos:start="2765:38" pos:end="2765:47">HF_TS_MASK</name><operator pos:start="2765:48" pos:end="2765:48">)</operator></expr>)</condition> <block pos:start="2765:51" pos:end="2775:9">{<block_content pos:start="2771:13" pos:end="2773:18">

            <comment type="block" pos:start="2767:13" pos:end="2767:72">/* if CR0.EM or CR0.TS are set, generate an FPU exception */</comment>

            <comment type="block" pos:start="2769:13" pos:end="2769:49">/* XXX: what to do if illegal op ? */</comment>

            <expr_stmt pos:start="2771:13" pos:end="2771:65"><expr pos:start="2771:13" pos:end="2771:64"><call pos:start="2771:13" pos:end="2771:64"><name pos:start="2771:13" pos:end="2771:25">gen_exception</name><argument_list pos:start="2771:26" pos:end="2771:64">(<argument pos:start="2771:27" pos:end="2771:27"><expr pos:start="2771:27" pos:end="2771:27"><name pos:start="2771:27" pos:end="2771:27">s</name></expr></argument>, <argument pos:start="2771:30" pos:end="2771:40"><expr pos:start="2771:30" pos:end="2771:40"><name pos:start="2771:30" pos:end="2771:40">EXCP07_PREX</name></expr></argument>, <argument pos:start="2771:43" pos:end="2771:63"><expr pos:start="2771:43" pos:end="2771:63"><name pos:start="2771:43" pos:end="2771:50">pc_start</name> <operator pos:start="2771:52" pos:end="2771:52">-</operator> <name pos:start="2771:54" pos:end="2771:63"><name pos:start="2771:54" pos:end="2771:54">s</name><operator pos:start="2771:55" pos:end="2771:56">-&gt;</operator><name pos:start="2771:57" pos:end="2771:63">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2773:13" pos:end="2773:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2777:9" pos:end="2777:44"><expr pos:start="2777:9" pos:end="2777:43"><name pos:start="2777:9" pos:end="2777:13">modrm</name> <operator pos:start="2777:15" pos:end="2777:15">=</operator> <call pos:start="2777:17" pos:end="2777:43"><name pos:start="2777:17" pos:end="2777:29">cpu_ldub_code</name><argument_list pos:start="2777:30" pos:end="2777:43">(<argument pos:start="2777:31" pos:end="2777:33"><expr pos:start="2777:31" pos:end="2777:33"><name pos:start="2777:31" pos:end="2777:33">env</name></expr></argument>, <argument pos:start="2777:36" pos:end="2777:42"><expr pos:start="2777:36" pos:end="2777:42"><name pos:start="2777:36" pos:end="2777:40"><name pos:start="2777:36" pos:end="2777:36">s</name><operator pos:start="2777:37" pos:end="2777:38">-&gt;</operator><name pos:start="2777:39" pos:end="2777:40">pc</name></name><operator pos:start="2777:41" pos:end="2777:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2779:9" pos:end="2779:31"><expr pos:start="2779:9" pos:end="2779:30"><name pos:start="2779:9" pos:end="2779:11">mod</name> <operator pos:start="2779:13" pos:end="2779:13">=</operator> <operator pos:start="2779:15" pos:end="2779:15">(</operator><name pos:start="2779:16" pos:end="2779:20">modrm</name> <operator pos:start="2779:22" pos:end="2779:23">&gt;&gt;</operator> <literal type="number" pos:start="2779:25" pos:end="2779:25">6</literal><operator pos:start="2779:26" pos:end="2779:26">)</operator> <operator pos:start="2779:28" pos:end="2779:28">&amp;</operator> <literal type="number" pos:start="2779:30" pos:end="2779:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2781:9" pos:end="2781:23"><expr pos:start="2781:9" pos:end="2781:22"><name pos:start="2781:9" pos:end="2781:10">rm</name> <operator pos:start="2781:12" pos:end="2781:12">=</operator> <name pos:start="2781:14" pos:end="2781:18">modrm</name> <operator pos:start="2781:20" pos:end="2781:20">&amp;</operator> <literal type="number" pos:start="2781:22" pos:end="2781:22">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2783:9" pos:end="2783:49"><expr pos:start="2783:9" pos:end="2783:48"><name pos:start="2783:9" pos:end="2783:10">op</name> <operator pos:start="2783:12" pos:end="2783:12">=</operator> <operator pos:start="2783:14" pos:end="2783:14">(</operator><operator pos:start="2783:15" pos:end="2783:15">(</operator><name pos:start="2783:16" pos:end="2783:16">b</name> <operator pos:start="2783:18" pos:end="2783:18">&amp;</operator> <literal type="number" pos:start="2783:20" pos:end="2783:20">7</literal><operator pos:start="2783:21" pos:end="2783:21">)</operator> <operator pos:start="2783:23" pos:end="2783:24">&lt;&lt;</operator> <literal type="number" pos:start="2783:26" pos:end="2783:26">3</literal><operator pos:start="2783:27" pos:end="2783:27">)</operator> <operator pos:start="2783:29" pos:end="2783:29">|</operator> <operator pos:start="2783:31" pos:end="2783:31">(</operator><operator pos:start="2783:32" pos:end="2783:32">(</operator><name pos:start="2783:33" pos:end="2783:37">modrm</name> <operator pos:start="2783:39" pos:end="2783:40">&gt;&gt;</operator> <literal type="number" pos:start="2783:42" pos:end="2783:42">3</literal><operator pos:start="2783:43" pos:end="2783:43">)</operator> <operator pos:start="2783:45" pos:end="2783:45">&amp;</operator> <literal type="number" pos:start="2783:47" pos:end="2783:47">7</literal><operator pos:start="2783:48" pos:end="2783:48">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="2785:9" pos:end="3793:9"><if pos:start="2785:9" pos:end="3195:9">if <condition pos:start="2785:12" pos:end="2785:21">(<expr pos:start="2785:13" pos:end="2785:20"><name pos:start="2785:13" pos:end="2785:15">mod</name> <operator pos:start="2785:17" pos:end="2785:18">!=</operator> <literal type="number" pos:start="2785:20" pos:end="2785:20">3</literal></expr>)</condition> <block pos:start="2785:23" pos:end="3195:9">{<block_content pos:start="2789:13" pos:end="3193:13">

            <comment type="block" pos:start="2787:13" pos:end="2787:27">/* memory op */</comment>

            <expr_stmt pos:start="2789:13" pos:end="2789:66"><expr pos:start="2789:13" pos:end="2789:65"><call pos:start="2789:13" pos:end="2789:65"><name pos:start="2789:13" pos:end="2789:25">gen_lea_modrm</name><argument_list pos:start="2789:26" pos:end="2789:65">(<argument pos:start="2789:27" pos:end="2789:29"><expr pos:start="2789:27" pos:end="2789:29"><name pos:start="2789:27" pos:end="2789:29">env</name></expr></argument>, <argument pos:start="2789:32" pos:end="2789:32"><expr pos:start="2789:32" pos:end="2789:32"><name pos:start="2789:32" pos:end="2789:32">s</name></expr></argument>, <argument pos:start="2789:35" pos:end="2789:39"><expr pos:start="2789:35" pos:end="2789:39"><name pos:start="2789:35" pos:end="2789:39">modrm</name></expr></argument>, <argument pos:start="2789:42" pos:end="2789:50"><expr pos:start="2789:42" pos:end="2789:50"><operator pos:start="2789:42" pos:end="2789:42">&amp;</operator><name pos:start="2789:43" pos:end="2789:50">reg_addr</name></expr></argument>, <argument pos:start="2789:53" pos:end="2789:64"><expr pos:start="2789:53" pos:end="2789:64"><operator pos:start="2789:53" pos:end="2789:53">&amp;</operator><name pos:start="2789:54" pos:end="2789:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="2791:13" pos:end="3193:13">switch<condition pos:start="2791:19" pos:end="2791:22">(<expr pos:start="2791:20" pos:end="2791:21"><name pos:start="2791:20" pos:end="2791:21">op</name></expr>)</condition> <block pos:start="2791:24" pos:end="3193:13">{<block_content pos:start="2793:13" pos:end="3191:32">

            <case pos:start="2793:13" pos:end="2793:31">case <expr pos:start="2793:18" pos:end="2793:30"><literal type="number" pos:start="2793:18" pos:end="2793:21">0x00</literal> <operator pos:start="2793:23" pos:end="2793:25">...</operator> <literal type="number" pos:start="2793:27" pos:end="2793:30">0x07</literal></expr>:</case> <comment type="block" pos:start="2793:33" pos:end="2793:43">/* fxxxs */</comment>

            <case pos:start="2795:13" pos:end="2795:31">case <expr pos:start="2795:18" pos:end="2795:30"><literal type="number" pos:start="2795:18" pos:end="2795:21">0x10</literal> <operator pos:start="2795:23" pos:end="2795:25">...</operator> <literal type="number" pos:start="2795:27" pos:end="2795:30">0x17</literal></expr>:</case> <comment type="block" pos:start="2795:33" pos:end="2795:44">/* fixxxl */</comment>

            <case pos:start="2797:13" pos:end="2797:31">case <expr pos:start="2797:18" pos:end="2797:30"><literal type="number" pos:start="2797:18" pos:end="2797:21">0x20</literal> <operator pos:start="2797:23" pos:end="2797:25">...</operator> <literal type="number" pos:start="2797:27" pos:end="2797:30">0x27</literal></expr>:</case> <comment type="block" pos:start="2797:33" pos:end="2797:43">/* fxxxl */</comment>

            <case pos:start="2799:13" pos:end="2799:31">case <expr pos:start="2799:18" pos:end="2799:30"><literal type="number" pos:start="2799:18" pos:end="2799:21">0x30</literal> <operator pos:start="2799:23" pos:end="2799:25">...</operator> <literal type="number" pos:start="2799:27" pos:end="2799:30">0x37</literal></expr>:</case> <comment type="block" pos:start="2799:33" pos:end="2799:43">/* fixxx */</comment>

                <block pos:start="2801:17" pos:end="2867:17">{<block_content pos:start="2803:21" pos:end="2865:21">

                    <decl_stmt pos:start="2803:21" pos:end="2803:28"><decl pos:start="2803:21" pos:end="2803:27"><type pos:start="2803:21" pos:end="2803:23"><name pos:start="2803:21" pos:end="2803:23">int</name></type> <name pos:start="2803:25" pos:end="2803:27">op1</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="2805:21" pos:end="2805:33"><expr pos:start="2805:21" pos:end="2805:32"><name pos:start="2805:21" pos:end="2805:23">op1</name> <operator pos:start="2805:25" pos:end="2805:25">=</operator> <name pos:start="2805:27" pos:end="2805:28">op</name> <operator pos:start="2805:30" pos:end="2805:30">&amp;</operator> <literal type="number" pos:start="2805:32" pos:end="2805:32">7</literal></expr>;</expr_stmt>



                    <switch pos:start="2809:21" pos:end="2853:21">switch<condition pos:start="2809:27" pos:end="2809:35">(<expr pos:start="2809:28" pos:end="2809:34"><name pos:start="2809:28" pos:end="2809:29">op</name> <operator pos:start="2809:31" pos:end="2809:32">&gt;&gt;</operator> <literal type="number" pos:start="2809:34" pos:end="2809:34">4</literal></expr>)</condition> <block pos:start="2809:37" pos:end="2853:21">{<block_content pos:start="2811:21" pos:end="2851:30">

                    <case pos:start="2811:21" pos:end="2811:27">case <expr pos:start="2811:26" pos:end="2811:26"><literal type="number" pos:start="2811:26" pos:end="2811:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="2813:25" pos:end="2813:64"><expr pos:start="2813:25" pos:end="2813:63"><call pos:start="2813:25" pos:end="2813:63"><name pos:start="2813:25" pos:end="2813:39">gen_op_ld_T0_A0</name><argument_list pos:start="2813:40" pos:end="2813:63">(<argument pos:start="2813:41" pos:end="2813:62"><expr pos:start="2813:41" pos:end="2813:62"><name pos:start="2813:41" pos:end="2813:47">OT_LONG</name> <operator pos:start="2813:49" pos:end="2813:49">+</operator> <name pos:start="2813:51" pos:end="2813:62"><name pos:start="2813:51" pos:end="2813:51">s</name><operator pos:start="2813:52" pos:end="2813:53">-&gt;</operator><name pos:start="2813:54" pos:end="2813:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2815:25" pos:end="2815:69"><expr pos:start="2815:25" pos:end="2815:68"><call pos:start="2815:25" pos:end="2815:68"><name pos:start="2815:25" pos:end="2815:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2815:45" pos:end="2815:68">(<argument pos:start="2815:46" pos:end="2815:57"><expr pos:start="2815:46" pos:end="2815:57"><name pos:start="2815:46" pos:end="2815:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2815:60" pos:end="2815:67"><expr pos:start="2815:60" pos:end="2815:67"><name pos:start="2815:60" pos:end="2815:67"><name pos:start="2815:60" pos:end="2815:64">cpu_T</name><index pos:start="2815:65" pos:end="2815:67">[<expr pos:start="2815:66" pos:end="2815:66"><literal type="number" pos:start="2815:66" pos:end="2815:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2817:25" pos:end="2817:67"><expr pos:start="2817:25" pos:end="2817:66"><call pos:start="2817:25" pos:end="2817:66"><name pos:start="2817:25" pos:end="2817:43">gen_helper_flds_FT0</name><argument_list pos:start="2817:44" pos:end="2817:66">(<argument pos:start="2817:45" pos:end="2817:51"><expr pos:start="2817:45" pos:end="2817:51"><name pos:start="2817:45" pos:end="2817:51">cpu_env</name></expr></argument>, <argument pos:start="2817:54" pos:end="2817:65"><expr pos:start="2817:54" pos:end="2817:65"><name pos:start="2817:54" pos:end="2817:65">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2819:25" pos:end="2819:30">break;</break>

                    <case pos:start="2821:21" pos:end="2821:27">case <expr pos:start="2821:26" pos:end="2821:26"><literal type="number" pos:start="2821:26" pos:end="2821:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2823:25" pos:end="2823:64"><expr pos:start="2823:25" pos:end="2823:63"><call pos:start="2823:25" pos:end="2823:63"><name pos:start="2823:25" pos:end="2823:39">gen_op_ld_T0_A0</name><argument_list pos:start="2823:40" pos:end="2823:63">(<argument pos:start="2823:41" pos:end="2823:62"><expr pos:start="2823:41" pos:end="2823:62"><name pos:start="2823:41" pos:end="2823:47">OT_LONG</name> <operator pos:start="2823:49" pos:end="2823:49">+</operator> <name pos:start="2823:51" pos:end="2823:62"><name pos:start="2823:51" pos:end="2823:51">s</name><operator pos:start="2823:52" pos:end="2823:53">-&gt;</operator><name pos:start="2823:54" pos:end="2823:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2825:25" pos:end="2825:69"><expr pos:start="2825:25" pos:end="2825:68"><call pos:start="2825:25" pos:end="2825:68"><name pos:start="2825:25" pos:end="2825:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2825:45" pos:end="2825:68">(<argument pos:start="2825:46" pos:end="2825:57"><expr pos:start="2825:46" pos:end="2825:57"><name pos:start="2825:46" pos:end="2825:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2825:60" pos:end="2825:67"><expr pos:start="2825:60" pos:end="2825:67"><name pos:start="2825:60" pos:end="2825:67"><name pos:start="2825:60" pos:end="2825:64">cpu_T</name><index pos:start="2825:65" pos:end="2825:67">[<expr pos:start="2825:66" pos:end="2825:66"><literal type="number" pos:start="2825:66" pos:end="2825:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2827:25" pos:end="2827:68"><expr pos:start="2827:25" pos:end="2827:67"><call pos:start="2827:25" pos:end="2827:67"><name pos:start="2827:25" pos:end="2827:44">gen_helper_fildl_FT0</name><argument_list pos:start="2827:45" pos:end="2827:67">(<argument pos:start="2827:46" pos:end="2827:52"><expr pos:start="2827:46" pos:end="2827:52"><name pos:start="2827:46" pos:end="2827:52">cpu_env</name></expr></argument>, <argument pos:start="2827:55" pos:end="2827:66"><expr pos:start="2827:55" pos:end="2827:66"><name pos:start="2827:55" pos:end="2827:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2829:25" pos:end="2829:30">break;</break>

                    <case pos:start="2831:21" pos:end="2831:27">case <expr pos:start="2831:26" pos:end="2831:26"><literal type="number" pos:start="2831:26" pos:end="2831:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="2833:25" pos:end="2835:67"><expr pos:start="2833:25" pos:end="2835:66"><call pos:start="2833:25" pos:end="2835:66"><name pos:start="2833:25" pos:end="2833:41">tcg_gen_qemu_ld64</name><argument_list pos:start="2833:42" pos:end="2835:66">(<argument pos:start="2833:43" pos:end="2833:54"><expr pos:start="2833:43" pos:end="2833:54"><name pos:start="2833:43" pos:end="2833:54">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2833:57" pos:end="2833:62"><expr pos:start="2833:57" pos:end="2833:62"><name pos:start="2833:57" pos:end="2833:62">cpu_A0</name></expr></argument>, 

                                          <argument pos:start="2835:43" pos:end="2835:65"><expr pos:start="2835:43" pos:end="2835:65"><operator pos:start="2835:43" pos:end="2835:43">(</operator><name pos:start="2835:44" pos:end="2835:55"><name pos:start="2835:44" pos:end="2835:44">s</name><operator pos:start="2835:45" pos:end="2835:46">-&gt;</operator><name pos:start="2835:47" pos:end="2835:55">mem_index</name></name> <operator pos:start="2835:57" pos:end="2835:58">&gt;&gt;</operator> <literal type="number" pos:start="2835:60" pos:end="2835:60">2</literal><operator pos:start="2835:61" pos:end="2835:61">)</operator> <operator pos:start="2835:63" pos:end="2835:63">-</operator> <literal type="number" pos:start="2835:65" pos:end="2835:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2837:25" pos:end="2837:67"><expr pos:start="2837:25" pos:end="2837:66"><call pos:start="2837:25" pos:end="2837:66"><name pos:start="2837:25" pos:end="2837:43">gen_helper_fldl_FT0</name><argument_list pos:start="2837:44" pos:end="2837:66">(<argument pos:start="2837:45" pos:end="2837:51"><expr pos:start="2837:45" pos:end="2837:51"><name pos:start="2837:45" pos:end="2837:51">cpu_env</name></expr></argument>, <argument pos:start="2837:54" pos:end="2837:65"><expr pos:start="2837:54" pos:end="2837:65"><name pos:start="2837:54" pos:end="2837:65">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2839:25" pos:end="2839:30">break;</break>

                    <case pos:start="2841:21" pos:end="2841:27">case <expr pos:start="2841:26" pos:end="2841:26"><literal type="number" pos:start="2841:26" pos:end="2841:26">3</literal></expr>:</case>

                    <default pos:start="2843:21" pos:end="2843:28">default:</default>

                        <expr_stmt pos:start="2845:25" pos:end="2845:65"><expr pos:start="2845:25" pos:end="2845:64"><call pos:start="2845:25" pos:end="2845:64"><name pos:start="2845:25" pos:end="2845:40">gen_op_lds_T0_A0</name><argument_list pos:start="2845:41" pos:end="2845:64">(<argument pos:start="2845:42" pos:end="2845:63"><expr pos:start="2845:42" pos:end="2845:63"><name pos:start="2845:42" pos:end="2845:48">OT_WORD</name> <operator pos:start="2845:50" pos:end="2845:50">+</operator> <name pos:start="2845:52" pos:end="2845:63"><name pos:start="2845:52" pos:end="2845:52">s</name><operator pos:start="2845:53" pos:end="2845:54">-&gt;</operator><name pos:start="2845:55" pos:end="2845:63">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2847:25" pos:end="2847:69"><expr pos:start="2847:25" pos:end="2847:68"><call pos:start="2847:25" pos:end="2847:68"><name pos:start="2847:25" pos:end="2847:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2847:45" pos:end="2847:68">(<argument pos:start="2847:46" pos:end="2847:57"><expr pos:start="2847:46" pos:end="2847:57"><name pos:start="2847:46" pos:end="2847:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2847:60" pos:end="2847:67"><expr pos:start="2847:60" pos:end="2847:67"><name pos:start="2847:60" pos:end="2847:67"><name pos:start="2847:60" pos:end="2847:64">cpu_T</name><index pos:start="2847:65" pos:end="2847:67">[<expr pos:start="2847:66" pos:end="2847:66"><literal type="number" pos:start="2847:66" pos:end="2847:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2849:25" pos:end="2849:68"><expr pos:start="2849:25" pos:end="2849:67"><call pos:start="2849:25" pos:end="2849:67"><name pos:start="2849:25" pos:end="2849:44">gen_helper_fildl_FT0</name><argument_list pos:start="2849:45" pos:end="2849:67">(<argument pos:start="2849:46" pos:end="2849:52"><expr pos:start="2849:46" pos:end="2849:52"><name pos:start="2849:46" pos:end="2849:52">cpu_env</name></expr></argument>, <argument pos:start="2849:55" pos:end="2849:66"><expr pos:start="2849:55" pos:end="2849:66"><name pos:start="2849:55" pos:end="2849:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2851:25" pos:end="2851:30">break;</break>

                    </block_content>}</block></switch>



                    <expr_stmt pos:start="2857:21" pos:end="2857:53"><expr pos:start="2857:21" pos:end="2857:52"><call pos:start="2857:21" pos:end="2857:52"><name pos:start="2857:21" pos:end="2857:47">gen_helper_fp_arith_ST0_FT0</name><argument_list pos:start="2857:48" pos:end="2857:52">(<argument pos:start="2857:49" pos:end="2857:51"><expr pos:start="2857:49" pos:end="2857:51"><name pos:start="2857:49" pos:end="2857:51">op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2859:21" pos:end="2865:21"><if pos:start="2859:21" pos:end="2865:21">if <condition pos:start="2859:24" pos:end="2859:33">(<expr pos:start="2859:25" pos:end="2859:32"><name pos:start="2859:25" pos:end="2859:27">op1</name> <operator pos:start="2859:29" pos:end="2859:30">==</operator> <literal type="number" pos:start="2859:32" pos:end="2859:32">3</literal></expr>)</condition> <block pos:start="2859:35" pos:end="2865:21">{<block_content pos:start="2863:25" pos:end="2863:49">

                        <comment type="block" pos:start="2861:25" pos:end="2861:45">/* fcomp needs pop */</comment>

                        <expr_stmt pos:start="2863:25" pos:end="2863:49"><expr pos:start="2863:25" pos:end="2863:48"><call pos:start="2863:25" pos:end="2863:48"><name pos:start="2863:25" pos:end="2863:39">gen_helper_fpop</name><argument_list pos:start="2863:40" pos:end="2863:48">(<argument pos:start="2863:41" pos:end="2863:47"><expr pos:start="2863:41" pos:end="2863:47"><name pos:start="2863:41" pos:end="2863:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block>

                <break pos:start="2869:17" pos:end="2869:22">break;</break>

            <case pos:start="2871:13" pos:end="2871:22">case <expr pos:start="2871:18" pos:end="2871:21"><literal type="number" pos:start="2871:18" pos:end="2871:21">0x08</literal></expr>:</case> <comment type="block" pos:start="2871:24" pos:end="2871:33">/* flds */</comment>

            <case pos:start="2873:13" pos:end="2873:22">case <expr pos:start="2873:18" pos:end="2873:21"><literal type="number" pos:start="2873:18" pos:end="2873:21">0x0a</literal></expr>:</case> <comment type="block" pos:start="2873:24" pos:end="2873:33">/* fsts */</comment>

            <case pos:start="2875:13" pos:end="2875:22">case <expr pos:start="2875:18" pos:end="2875:21"><literal type="number" pos:start="2875:18" pos:end="2875:21">0x0b</literal></expr>:</case> <comment type="block" pos:start="2875:24" pos:end="2875:34">/* fstps */</comment>

            <case pos:start="2877:13" pos:end="2877:31">case <expr pos:start="2877:18" pos:end="2877:30"><literal type="number" pos:start="2877:18" pos:end="2877:21">0x18</literal> <operator pos:start="2877:23" pos:end="2877:25">...</operator> <literal type="number" pos:start="2877:27" pos:end="2877:30">0x1b</literal></expr>:</case> <comment type="block" pos:start="2877:33" pos:end="2877:67">/* fildl, fisttpl, fistl, fistpl */</comment>

            <case pos:start="2879:13" pos:end="2879:31">case <expr pos:start="2879:18" pos:end="2879:30"><literal type="number" pos:start="2879:18" pos:end="2879:21">0x28</literal> <operator pos:start="2879:23" pos:end="2879:25">...</operator> <literal type="number" pos:start="2879:27" pos:end="2879:30">0x2b</literal></expr>:</case> <comment type="block" pos:start="2879:33" pos:end="2879:65">/* fldl, fisttpll, fstl, fstpl */</comment>

            <case pos:start="2881:13" pos:end="2881:31">case <expr pos:start="2881:18" pos:end="2881:30"><literal type="number" pos:start="2881:18" pos:end="2881:21">0x38</literal> <operator pos:start="2881:23" pos:end="2881:25">...</operator> <literal type="number" pos:start="2881:27" pos:end="2881:30">0x3b</literal></expr>:</case> <comment type="block" pos:start="2881:33" pos:end="2881:67">/* filds, fisttps, fists, fistps */</comment>

                <switch pos:start="2883:17" pos:end="3033:17">switch<condition pos:start="2883:23" pos:end="2883:30">(<expr pos:start="2883:24" pos:end="2883:29"><name pos:start="2883:24" pos:end="2883:25">op</name> <operator pos:start="2883:27" pos:end="2883:27">&amp;</operator> <literal type="number" pos:start="2883:29" pos:end="2883:29">7</literal></expr>)</condition> <block pos:start="2883:32" pos:end="3033:17">{<block_content pos:start="2885:17" pos:end="3031:26">

                <case pos:start="2885:17" pos:end="2885:23">case <expr pos:start="2885:22" pos:end="2885:22"><literal type="number" pos:start="2885:22" pos:end="2885:22">0</literal></expr>:</case>

                    <switch pos:start="2887:21" pos:end="2931:21">switch<condition pos:start="2887:27" pos:end="2887:35">(<expr pos:start="2887:28" pos:end="2887:34"><name pos:start="2887:28" pos:end="2887:29">op</name> <operator pos:start="2887:31" pos:end="2887:32">&gt;&gt;</operator> <literal type="number" pos:start="2887:34" pos:end="2887:34">4</literal></expr>)</condition> <block pos:start="2887:37" pos:end="2931:21">{<block_content pos:start="2889:21" pos:end="2929:30">

                    <case pos:start="2889:21" pos:end="2889:27">case <expr pos:start="2889:26" pos:end="2889:26"><literal type="number" pos:start="2889:26" pos:end="2889:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="2891:25" pos:end="2891:64"><expr pos:start="2891:25" pos:end="2891:63"><call pos:start="2891:25" pos:end="2891:63"><name pos:start="2891:25" pos:end="2891:39">gen_op_ld_T0_A0</name><argument_list pos:start="2891:40" pos:end="2891:63">(<argument pos:start="2891:41" pos:end="2891:62"><expr pos:start="2891:41" pos:end="2891:62"><name pos:start="2891:41" pos:end="2891:47">OT_LONG</name> <operator pos:start="2891:49" pos:end="2891:49">+</operator> <name pos:start="2891:51" pos:end="2891:62"><name pos:start="2891:51" pos:end="2891:51">s</name><operator pos:start="2891:52" pos:end="2891:53">-&gt;</operator><name pos:start="2891:54" pos:end="2891:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2893:25" pos:end="2893:69"><expr pos:start="2893:25" pos:end="2893:68"><call pos:start="2893:25" pos:end="2893:68"><name pos:start="2893:25" pos:end="2893:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2893:45" pos:end="2893:68">(<argument pos:start="2893:46" pos:end="2893:57"><expr pos:start="2893:46" pos:end="2893:57"><name pos:start="2893:46" pos:end="2893:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2893:60" pos:end="2893:67"><expr pos:start="2893:60" pos:end="2893:67"><name pos:start="2893:60" pos:end="2893:67"><name pos:start="2893:60" pos:end="2893:64">cpu_T</name><index pos:start="2893:65" pos:end="2893:67">[<expr pos:start="2893:66" pos:end="2893:66"><literal type="number" pos:start="2893:66" pos:end="2893:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2895:25" pos:end="2895:67"><expr pos:start="2895:25" pos:end="2895:66"><call pos:start="2895:25" pos:end="2895:66"><name pos:start="2895:25" pos:end="2895:43">gen_helper_flds_ST0</name><argument_list pos:start="2895:44" pos:end="2895:66">(<argument pos:start="2895:45" pos:end="2895:51"><expr pos:start="2895:45" pos:end="2895:51"><name pos:start="2895:45" pos:end="2895:51">cpu_env</name></expr></argument>, <argument pos:start="2895:54" pos:end="2895:65"><expr pos:start="2895:54" pos:end="2895:65"><name pos:start="2895:54" pos:end="2895:65">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2897:25" pos:end="2897:30">break;</break>

                    <case pos:start="2899:21" pos:end="2899:27">case <expr pos:start="2899:26" pos:end="2899:26"><literal type="number" pos:start="2899:26" pos:end="2899:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2901:25" pos:end="2901:64"><expr pos:start="2901:25" pos:end="2901:63"><call pos:start="2901:25" pos:end="2901:63"><name pos:start="2901:25" pos:end="2901:39">gen_op_ld_T0_A0</name><argument_list pos:start="2901:40" pos:end="2901:63">(<argument pos:start="2901:41" pos:end="2901:62"><expr pos:start="2901:41" pos:end="2901:62"><name pos:start="2901:41" pos:end="2901:47">OT_LONG</name> <operator pos:start="2901:49" pos:end="2901:49">+</operator> <name pos:start="2901:51" pos:end="2901:62"><name pos:start="2901:51" pos:end="2901:51">s</name><operator pos:start="2901:52" pos:end="2901:53">-&gt;</operator><name pos:start="2901:54" pos:end="2901:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2903:25" pos:end="2903:69"><expr pos:start="2903:25" pos:end="2903:68"><call pos:start="2903:25" pos:end="2903:68"><name pos:start="2903:25" pos:end="2903:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2903:45" pos:end="2903:68">(<argument pos:start="2903:46" pos:end="2903:57"><expr pos:start="2903:46" pos:end="2903:57"><name pos:start="2903:46" pos:end="2903:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2903:60" pos:end="2903:67"><expr pos:start="2903:60" pos:end="2903:67"><name pos:start="2903:60" pos:end="2903:67"><name pos:start="2903:60" pos:end="2903:64">cpu_T</name><index pos:start="2903:65" pos:end="2903:67">[<expr pos:start="2903:66" pos:end="2903:66"><literal type="number" pos:start="2903:66" pos:end="2903:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2905:25" pos:end="2905:68"><expr pos:start="2905:25" pos:end="2905:67"><call pos:start="2905:25" pos:end="2905:67"><name pos:start="2905:25" pos:end="2905:44">gen_helper_fildl_ST0</name><argument_list pos:start="2905:45" pos:end="2905:67">(<argument pos:start="2905:46" pos:end="2905:52"><expr pos:start="2905:46" pos:end="2905:52"><name pos:start="2905:46" pos:end="2905:52">cpu_env</name></expr></argument>, <argument pos:start="2905:55" pos:end="2905:66"><expr pos:start="2905:55" pos:end="2905:66"><name pos:start="2905:55" pos:end="2905:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2907:25" pos:end="2907:30">break;</break>

                    <case pos:start="2909:21" pos:end="2909:27">case <expr pos:start="2909:26" pos:end="2909:26"><literal type="number" pos:start="2909:26" pos:end="2909:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="2911:25" pos:end="2913:67"><expr pos:start="2911:25" pos:end="2913:66"><call pos:start="2911:25" pos:end="2913:66"><name pos:start="2911:25" pos:end="2911:41">tcg_gen_qemu_ld64</name><argument_list pos:start="2911:42" pos:end="2913:66">(<argument pos:start="2911:43" pos:end="2911:54"><expr pos:start="2911:43" pos:end="2911:54"><name pos:start="2911:43" pos:end="2911:54">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2911:57" pos:end="2911:62"><expr pos:start="2911:57" pos:end="2911:62"><name pos:start="2911:57" pos:end="2911:62">cpu_A0</name></expr></argument>, 

                                          <argument pos:start="2913:43" pos:end="2913:65"><expr pos:start="2913:43" pos:end="2913:65"><operator pos:start="2913:43" pos:end="2913:43">(</operator><name pos:start="2913:44" pos:end="2913:55"><name pos:start="2913:44" pos:end="2913:44">s</name><operator pos:start="2913:45" pos:end="2913:46">-&gt;</operator><name pos:start="2913:47" pos:end="2913:55">mem_index</name></name> <operator pos:start="2913:57" pos:end="2913:58">&gt;&gt;</operator> <literal type="number" pos:start="2913:60" pos:end="2913:60">2</literal><operator pos:start="2913:61" pos:end="2913:61">)</operator> <operator pos:start="2913:63" pos:end="2913:63">-</operator> <literal type="number" pos:start="2913:65" pos:end="2913:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2915:25" pos:end="2915:67"><expr pos:start="2915:25" pos:end="2915:66"><call pos:start="2915:25" pos:end="2915:66"><name pos:start="2915:25" pos:end="2915:43">gen_helper_fldl_ST0</name><argument_list pos:start="2915:44" pos:end="2915:66">(<argument pos:start="2915:45" pos:end="2915:51"><expr pos:start="2915:45" pos:end="2915:51"><name pos:start="2915:45" pos:end="2915:51">cpu_env</name></expr></argument>, <argument pos:start="2915:54" pos:end="2915:65"><expr pos:start="2915:54" pos:end="2915:65"><name pos:start="2915:54" pos:end="2915:65">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2917:25" pos:end="2917:30">break;</break>

                    <case pos:start="2919:21" pos:end="2919:27">case <expr pos:start="2919:26" pos:end="2919:26"><literal type="number" pos:start="2919:26" pos:end="2919:26">3</literal></expr>:</case>

                    <default pos:start="2921:21" pos:end="2921:28">default:</default>

                        <expr_stmt pos:start="2923:25" pos:end="2923:65"><expr pos:start="2923:25" pos:end="2923:64"><call pos:start="2923:25" pos:end="2923:64"><name pos:start="2923:25" pos:end="2923:40">gen_op_lds_T0_A0</name><argument_list pos:start="2923:41" pos:end="2923:64">(<argument pos:start="2923:42" pos:end="2923:63"><expr pos:start="2923:42" pos:end="2923:63"><name pos:start="2923:42" pos:end="2923:48">OT_WORD</name> <operator pos:start="2923:50" pos:end="2923:50">+</operator> <name pos:start="2923:52" pos:end="2923:63"><name pos:start="2923:52" pos:end="2923:52">s</name><operator pos:start="2923:53" pos:end="2923:54">-&gt;</operator><name pos:start="2923:55" pos:end="2923:63">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2925:25" pos:end="2925:69"><expr pos:start="2925:25" pos:end="2925:68"><call pos:start="2925:25" pos:end="2925:68"><name pos:start="2925:25" pos:end="2925:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2925:45" pos:end="2925:68">(<argument pos:start="2925:46" pos:end="2925:57"><expr pos:start="2925:46" pos:end="2925:57"><name pos:start="2925:46" pos:end="2925:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2925:60" pos:end="2925:67"><expr pos:start="2925:60" pos:end="2925:67"><name pos:start="2925:60" pos:end="2925:67"><name pos:start="2925:60" pos:end="2925:64">cpu_T</name><index pos:start="2925:65" pos:end="2925:67">[<expr pos:start="2925:66" pos:end="2925:66"><literal type="number" pos:start="2925:66" pos:end="2925:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2927:25" pos:end="2927:68"><expr pos:start="2927:25" pos:end="2927:67"><call pos:start="2927:25" pos:end="2927:67"><name pos:start="2927:25" pos:end="2927:44">gen_helper_fildl_ST0</name><argument_list pos:start="2927:45" pos:end="2927:67">(<argument pos:start="2927:46" pos:end="2927:52"><expr pos:start="2927:46" pos:end="2927:52"><name pos:start="2927:46" pos:end="2927:52">cpu_env</name></expr></argument>, <argument pos:start="2927:55" pos:end="2927:66"><expr pos:start="2927:55" pos:end="2927:66"><name pos:start="2927:55" pos:end="2927:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2929:25" pos:end="2929:30">break;</break>

                    </block_content>}</block></switch>

                    <break pos:start="2933:21" pos:end="2933:26">break;</break>

                <case pos:start="2935:17" pos:end="2935:23">case <expr pos:start="2935:22" pos:end="2935:22"><literal type="number" pos:start="2935:22" pos:end="2935:22">1</literal></expr>:</case>

                    <comment type="block" pos:start="2937:21" pos:end="2937:75">/* XXX: the corresponding CPUID bit must be tested ! */</comment>

                    <switch pos:start="2939:21" pos:end="2973:21">switch<condition pos:start="2939:27" pos:end="2939:35">(<expr pos:start="2939:28" pos:end="2939:34"><name pos:start="2939:28" pos:end="2939:29">op</name> <operator pos:start="2939:31" pos:end="2939:32">&gt;&gt;</operator> <literal type="number" pos:start="2939:34" pos:end="2939:34">4</literal></expr>)</condition> <block pos:start="2939:37" pos:end="2973:21">{<block_content pos:start="2941:21" pos:end="2971:30">

                    <case pos:start="2941:21" pos:end="2941:27">case <expr pos:start="2941:26" pos:end="2941:26"><literal type="number" pos:start="2941:26" pos:end="2941:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2943:25" pos:end="2943:69"><expr pos:start="2943:25" pos:end="2943:68"><call pos:start="2943:25" pos:end="2943:68"><name pos:start="2943:25" pos:end="2943:45">gen_helper_fisttl_ST0</name><argument_list pos:start="2943:46" pos:end="2943:68">(<argument pos:start="2943:47" pos:end="2943:58"><expr pos:start="2943:47" pos:end="2943:58"><name pos:start="2943:47" pos:end="2943:58">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2943:61" pos:end="2943:67"><expr pos:start="2943:61" pos:end="2943:67"><name pos:start="2943:61" pos:end="2943:67">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2945:25" pos:end="2945:68"><expr pos:start="2945:25" pos:end="2945:67"><call pos:start="2945:25" pos:end="2945:67"><name pos:start="2945:25" pos:end="2945:43">tcg_gen_extu_i32_tl</name><argument_list pos:start="2945:44" pos:end="2945:67">(<argument pos:start="2945:45" pos:end="2945:52"><expr pos:start="2945:45" pos:end="2945:52"><name pos:start="2945:45" pos:end="2945:52"><name pos:start="2945:45" pos:end="2945:49">cpu_T</name><index pos:start="2945:50" pos:end="2945:52">[<expr pos:start="2945:51" pos:end="2945:51"><literal type="number" pos:start="2945:51" pos:end="2945:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2945:55" pos:end="2945:66"><expr pos:start="2945:55" pos:end="2945:66"><name pos:start="2945:55" pos:end="2945:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2947:25" pos:end="2947:64"><expr pos:start="2947:25" pos:end="2947:63"><call pos:start="2947:25" pos:end="2947:63"><name pos:start="2947:25" pos:end="2947:39">gen_op_st_T0_A0</name><argument_list pos:start="2947:40" pos:end="2947:63">(<argument pos:start="2947:41" pos:end="2947:62"><expr pos:start="2947:41" pos:end="2947:62"><name pos:start="2947:41" pos:end="2947:47">OT_LONG</name> <operator pos:start="2947:49" pos:end="2947:49">+</operator> <name pos:start="2947:51" pos:end="2947:62"><name pos:start="2947:51" pos:end="2947:51">s</name><operator pos:start="2947:52" pos:end="2947:53">-&gt;</operator><name pos:start="2947:54" pos:end="2947:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2949:25" pos:end="2949:30">break;</break>

                    <case pos:start="2951:21" pos:end="2951:27">case <expr pos:start="2951:26" pos:end="2951:26"><literal type="number" pos:start="2951:26" pos:end="2951:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="2953:25" pos:end="2953:70"><expr pos:start="2953:25" pos:end="2953:69"><call pos:start="2953:25" pos:end="2953:69"><name pos:start="2953:25" pos:end="2953:46">gen_helper_fisttll_ST0</name><argument_list pos:start="2953:47" pos:end="2953:69">(<argument pos:start="2953:48" pos:end="2953:59"><expr pos:start="2953:48" pos:end="2953:59"><name pos:start="2953:48" pos:end="2953:59">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2953:62" pos:end="2953:68"><expr pos:start="2953:62" pos:end="2953:68"><name pos:start="2953:62" pos:end="2953:68">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2955:25" pos:end="2957:67"><expr pos:start="2955:25" pos:end="2957:66"><call pos:start="2955:25" pos:end="2957:66"><name pos:start="2955:25" pos:end="2955:41">tcg_gen_qemu_st64</name><argument_list pos:start="2955:42" pos:end="2957:66">(<argument pos:start="2955:43" pos:end="2955:54"><expr pos:start="2955:43" pos:end="2955:54"><name pos:start="2955:43" pos:end="2955:54">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2955:57" pos:end="2955:62"><expr pos:start="2955:57" pos:end="2955:62"><name pos:start="2955:57" pos:end="2955:62">cpu_A0</name></expr></argument>, 

                                          <argument pos:start="2957:43" pos:end="2957:65"><expr pos:start="2957:43" pos:end="2957:65"><operator pos:start="2957:43" pos:end="2957:43">(</operator><name pos:start="2957:44" pos:end="2957:55"><name pos:start="2957:44" pos:end="2957:44">s</name><operator pos:start="2957:45" pos:end="2957:46">-&gt;</operator><name pos:start="2957:47" pos:end="2957:55">mem_index</name></name> <operator pos:start="2957:57" pos:end="2957:58">&gt;&gt;</operator> <literal type="number" pos:start="2957:60" pos:end="2957:60">2</literal><operator pos:start="2957:61" pos:end="2957:61">)</operator> <operator pos:start="2957:63" pos:end="2957:63">-</operator> <literal type="number" pos:start="2957:65" pos:end="2957:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2959:25" pos:end="2959:30">break;</break>

                    <case pos:start="2961:21" pos:end="2961:27">case <expr pos:start="2961:26" pos:end="2961:26"><literal type="number" pos:start="2961:26" pos:end="2961:26">3</literal></expr>:</case>

                    <default pos:start="2963:21" pos:end="2963:28">default:</default>

                        <expr_stmt pos:start="2965:25" pos:end="2965:68"><expr pos:start="2965:25" pos:end="2965:67"><call pos:start="2965:25" pos:end="2965:67"><name pos:start="2965:25" pos:end="2965:44">gen_helper_fistt_ST0</name><argument_list pos:start="2965:45" pos:end="2965:67">(<argument pos:start="2965:46" pos:end="2965:57"><expr pos:start="2965:46" pos:end="2965:57"><name pos:start="2965:46" pos:end="2965:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2965:60" pos:end="2965:66"><expr pos:start="2965:60" pos:end="2965:66"><name pos:start="2965:60" pos:end="2965:66">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2967:25" pos:end="2967:68"><expr pos:start="2967:25" pos:end="2967:67"><call pos:start="2967:25" pos:end="2967:67"><name pos:start="2967:25" pos:end="2967:43">tcg_gen_extu_i32_tl</name><argument_list pos:start="2967:44" pos:end="2967:67">(<argument pos:start="2967:45" pos:end="2967:52"><expr pos:start="2967:45" pos:end="2967:52"><name pos:start="2967:45" pos:end="2967:52"><name pos:start="2967:45" pos:end="2967:49">cpu_T</name><index pos:start="2967:50" pos:end="2967:52">[<expr pos:start="2967:51" pos:end="2967:51"><literal type="number" pos:start="2967:51" pos:end="2967:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2967:55" pos:end="2967:66"><expr pos:start="2967:55" pos:end="2967:66"><name pos:start="2967:55" pos:end="2967:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2969:25" pos:end="2969:64"><expr pos:start="2969:25" pos:end="2969:63"><call pos:start="2969:25" pos:end="2969:63"><name pos:start="2969:25" pos:end="2969:39">gen_op_st_T0_A0</name><argument_list pos:start="2969:40" pos:end="2969:63">(<argument pos:start="2969:41" pos:end="2969:62"><expr pos:start="2969:41" pos:end="2969:62"><name pos:start="2969:41" pos:end="2969:47">OT_WORD</name> <operator pos:start="2969:49" pos:end="2969:49">+</operator> <name pos:start="2969:51" pos:end="2969:62"><name pos:start="2969:51" pos:end="2969:51">s</name><operator pos:start="2969:52" pos:end="2969:53">-&gt;</operator><name pos:start="2969:54" pos:end="2969:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2971:25" pos:end="2971:30">break;</break>

                    </block_content>}</block></switch>

                    <expr_stmt pos:start="2975:21" pos:end="2975:45"><expr pos:start="2975:21" pos:end="2975:44"><call pos:start="2975:21" pos:end="2975:44"><name pos:start="2975:21" pos:end="2975:35">gen_helper_fpop</name><argument_list pos:start="2975:36" pos:end="2975:44">(<argument pos:start="2975:37" pos:end="2975:43"><expr pos:start="2975:37" pos:end="2975:43"><name pos:start="2975:37" pos:end="2975:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2977:21" pos:end="2977:26">break;</break>

                <default pos:start="2979:17" pos:end="2979:24">default:</default>

                    <switch pos:start="2981:21" pos:end="3025:21">switch<condition pos:start="2981:27" pos:end="2981:35">(<expr pos:start="2981:28" pos:end="2981:34"><name pos:start="2981:28" pos:end="2981:29">op</name> <operator pos:start="2981:31" pos:end="2981:32">&gt;&gt;</operator> <literal type="number" pos:start="2981:34" pos:end="2981:34">4</literal></expr>)</condition> <block pos:start="2981:37" pos:end="3025:21">{<block_content pos:start="2983:21" pos:end="3023:30">

                    <case pos:start="2983:21" pos:end="2983:27">case <expr pos:start="2983:26" pos:end="2983:26"><literal type="number" pos:start="2983:26" pos:end="2983:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="2985:25" pos:end="2985:67"><expr pos:start="2985:25" pos:end="2985:66"><call pos:start="2985:25" pos:end="2985:66"><name pos:start="2985:25" pos:end="2985:43">gen_helper_fsts_ST0</name><argument_list pos:start="2985:44" pos:end="2985:66">(<argument pos:start="2985:45" pos:end="2985:56"><expr pos:start="2985:45" pos:end="2985:56"><name pos:start="2985:45" pos:end="2985:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2985:59" pos:end="2985:65"><expr pos:start="2985:59" pos:end="2985:65"><name pos:start="2985:59" pos:end="2985:65">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2987:25" pos:end="2987:68"><expr pos:start="2987:25" pos:end="2987:67"><call pos:start="2987:25" pos:end="2987:67"><name pos:start="2987:25" pos:end="2987:43">tcg_gen_extu_i32_tl</name><argument_list pos:start="2987:44" pos:end="2987:67">(<argument pos:start="2987:45" pos:end="2987:52"><expr pos:start="2987:45" pos:end="2987:52"><name pos:start="2987:45" pos:end="2987:52"><name pos:start="2987:45" pos:end="2987:49">cpu_T</name><index pos:start="2987:50" pos:end="2987:52">[<expr pos:start="2987:51" pos:end="2987:51"><literal type="number" pos:start="2987:51" pos:end="2987:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2987:55" pos:end="2987:66"><expr pos:start="2987:55" pos:end="2987:66"><name pos:start="2987:55" pos:end="2987:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2989:25" pos:end="2989:64"><expr pos:start="2989:25" pos:end="2989:63"><call pos:start="2989:25" pos:end="2989:63"><name pos:start="2989:25" pos:end="2989:39">gen_op_st_T0_A0</name><argument_list pos:start="2989:40" pos:end="2989:63">(<argument pos:start="2989:41" pos:end="2989:62"><expr pos:start="2989:41" pos:end="2989:62"><name pos:start="2989:41" pos:end="2989:47">OT_LONG</name> <operator pos:start="2989:49" pos:end="2989:49">+</operator> <name pos:start="2989:51" pos:end="2989:62"><name pos:start="2989:51" pos:end="2989:51">s</name><operator pos:start="2989:52" pos:end="2989:53">-&gt;</operator><name pos:start="2989:54" pos:end="2989:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2991:25" pos:end="2991:30">break;</break>

                    <case pos:start="2993:21" pos:end="2993:27">case <expr pos:start="2993:26" pos:end="2993:26"><literal type="number" pos:start="2993:26" pos:end="2993:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2995:25" pos:end="2995:68"><expr pos:start="2995:25" pos:end="2995:67"><call pos:start="2995:25" pos:end="2995:67"><name pos:start="2995:25" pos:end="2995:44">gen_helper_fistl_ST0</name><argument_list pos:start="2995:45" pos:end="2995:67">(<argument pos:start="2995:46" pos:end="2995:57"><expr pos:start="2995:46" pos:end="2995:57"><name pos:start="2995:46" pos:end="2995:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2995:60" pos:end="2995:66"><expr pos:start="2995:60" pos:end="2995:66"><name pos:start="2995:60" pos:end="2995:66">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2997:25" pos:end="2997:68"><expr pos:start="2997:25" pos:end="2997:67"><call pos:start="2997:25" pos:end="2997:67"><name pos:start="2997:25" pos:end="2997:43">tcg_gen_extu_i32_tl</name><argument_list pos:start="2997:44" pos:end="2997:67">(<argument pos:start="2997:45" pos:end="2997:52"><expr pos:start="2997:45" pos:end="2997:52"><name pos:start="2997:45" pos:end="2997:52"><name pos:start="2997:45" pos:end="2997:49">cpu_T</name><index pos:start="2997:50" pos:end="2997:52">[<expr pos:start="2997:51" pos:end="2997:51"><literal type="number" pos:start="2997:51" pos:end="2997:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2997:55" pos:end="2997:66"><expr pos:start="2997:55" pos:end="2997:66"><name pos:start="2997:55" pos:end="2997:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2999:25" pos:end="2999:64"><expr pos:start="2999:25" pos:end="2999:63"><call pos:start="2999:25" pos:end="2999:63"><name pos:start="2999:25" pos:end="2999:39">gen_op_st_T0_A0</name><argument_list pos:start="2999:40" pos:end="2999:63">(<argument pos:start="2999:41" pos:end="2999:62"><expr pos:start="2999:41" pos:end="2999:62"><name pos:start="2999:41" pos:end="2999:47">OT_LONG</name> <operator pos:start="2999:49" pos:end="2999:49">+</operator> <name pos:start="2999:51" pos:end="2999:62"><name pos:start="2999:51" pos:end="2999:51">s</name><operator pos:start="2999:52" pos:end="2999:53">-&gt;</operator><name pos:start="2999:54" pos:end="2999:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3001:25" pos:end="3001:30">break;</break>

                    <case pos:start="3003:21" pos:end="3003:27">case <expr pos:start="3003:26" pos:end="3003:26"><literal type="number" pos:start="3003:26" pos:end="3003:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="3005:25" pos:end="3005:67"><expr pos:start="3005:25" pos:end="3005:66"><call pos:start="3005:25" pos:end="3005:66"><name pos:start="3005:25" pos:end="3005:43">gen_helper_fstl_ST0</name><argument_list pos:start="3005:44" pos:end="3005:66">(<argument pos:start="3005:45" pos:end="3005:56"><expr pos:start="3005:45" pos:end="3005:56"><name pos:start="3005:45" pos:end="3005:56">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="3005:59" pos:end="3005:65"><expr pos:start="3005:59" pos:end="3005:65"><name pos:start="3005:59" pos:end="3005:65">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3007:25" pos:end="3009:67"><expr pos:start="3007:25" pos:end="3009:66"><call pos:start="3007:25" pos:end="3009:66"><name pos:start="3007:25" pos:end="3007:41">tcg_gen_qemu_st64</name><argument_list pos:start="3007:42" pos:end="3009:66">(<argument pos:start="3007:43" pos:end="3007:54"><expr pos:start="3007:43" pos:end="3007:54"><name pos:start="3007:43" pos:end="3007:54">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="3007:57" pos:end="3007:62"><expr pos:start="3007:57" pos:end="3007:62"><name pos:start="3007:57" pos:end="3007:62">cpu_A0</name></expr></argument>, 

                                          <argument pos:start="3009:43" pos:end="3009:65"><expr pos:start="3009:43" pos:end="3009:65"><operator pos:start="3009:43" pos:end="3009:43">(</operator><name pos:start="3009:44" pos:end="3009:55"><name pos:start="3009:44" pos:end="3009:44">s</name><operator pos:start="3009:45" pos:end="3009:46">-&gt;</operator><name pos:start="3009:47" pos:end="3009:55">mem_index</name></name> <operator pos:start="3009:57" pos:end="3009:58">&gt;&gt;</operator> <literal type="number" pos:start="3009:60" pos:end="3009:60">2</literal><operator pos:start="3009:61" pos:end="3009:61">)</operator> <operator pos:start="3009:63" pos:end="3009:63">-</operator> <literal type="number" pos:start="3009:65" pos:end="3009:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3011:25" pos:end="3011:30">break;</break>

                    <case pos:start="3013:21" pos:end="3013:27">case <expr pos:start="3013:26" pos:end="3013:26"><literal type="number" pos:start="3013:26" pos:end="3013:26">3</literal></expr>:</case>

                    <default pos:start="3015:21" pos:end="3015:28">default:</default>

                        <expr_stmt pos:start="3017:25" pos:end="3017:67"><expr pos:start="3017:25" pos:end="3017:66"><call pos:start="3017:25" pos:end="3017:66"><name pos:start="3017:25" pos:end="3017:43">gen_helper_fist_ST0</name><argument_list pos:start="3017:44" pos:end="3017:66">(<argument pos:start="3017:45" pos:end="3017:56"><expr pos:start="3017:45" pos:end="3017:56"><name pos:start="3017:45" pos:end="3017:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="3017:59" pos:end="3017:65"><expr pos:start="3017:59" pos:end="3017:65"><name pos:start="3017:59" pos:end="3017:65">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3019:25" pos:end="3019:68"><expr pos:start="3019:25" pos:end="3019:67"><call pos:start="3019:25" pos:end="3019:67"><name pos:start="3019:25" pos:end="3019:43">tcg_gen_extu_i32_tl</name><argument_list pos:start="3019:44" pos:end="3019:67">(<argument pos:start="3019:45" pos:end="3019:52"><expr pos:start="3019:45" pos:end="3019:52"><name pos:start="3019:45" pos:end="3019:52"><name pos:start="3019:45" pos:end="3019:49">cpu_T</name><index pos:start="3019:50" pos:end="3019:52">[<expr pos:start="3019:51" pos:end="3019:51"><literal type="number" pos:start="3019:51" pos:end="3019:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="3019:55" pos:end="3019:66"><expr pos:start="3019:55" pos:end="3019:66"><name pos:start="3019:55" pos:end="3019:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3021:25" pos:end="3021:64"><expr pos:start="3021:25" pos:end="3021:63"><call pos:start="3021:25" pos:end="3021:63"><name pos:start="3021:25" pos:end="3021:39">gen_op_st_T0_A0</name><argument_list pos:start="3021:40" pos:end="3021:63">(<argument pos:start="3021:41" pos:end="3021:62"><expr pos:start="3021:41" pos:end="3021:62"><name pos:start="3021:41" pos:end="3021:47">OT_WORD</name> <operator pos:start="3021:49" pos:end="3021:49">+</operator> <name pos:start="3021:51" pos:end="3021:62"><name pos:start="3021:51" pos:end="3021:51">s</name><operator pos:start="3021:52" pos:end="3021:53">-&gt;</operator><name pos:start="3021:54" pos:end="3021:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3023:25" pos:end="3023:30">break;</break>

                    </block_content>}</block></switch>

                    <if_stmt pos:start="3027:21" pos:end="3029:49"><if pos:start="3027:21" pos:end="3029:49">if <condition pos:start="3027:24" pos:end="3027:38">(<expr pos:start="3027:25" pos:end="3027:37"><operator pos:start="3027:25" pos:end="3027:25">(</operator><name pos:start="3027:26" pos:end="3027:27">op</name> <operator pos:start="3027:29" pos:end="3027:29">&amp;</operator> <literal type="number" pos:start="3027:31" pos:end="3027:31">7</literal><operator pos:start="3027:32" pos:end="3027:32">)</operator> <operator pos:start="3027:34" pos:end="3027:35">==</operator> <literal type="number" pos:start="3027:37" pos:end="3027:37">3</literal></expr>)</condition><block type="pseudo" pos:start="3029:25" pos:end="3029:49"><block_content pos:start="3029:25" pos:end="3029:49">

                        <expr_stmt pos:start="3029:25" pos:end="3029:49"><expr pos:start="3029:25" pos:end="3029:48"><call pos:start="3029:25" pos:end="3029:48"><name pos:start="3029:25" pos:end="3029:39">gen_helper_fpop</name><argument_list pos:start="3029:40" pos:end="3029:48">(<argument pos:start="3029:41" pos:end="3029:47"><expr pos:start="3029:41" pos:end="3029:47"><name pos:start="3029:41" pos:end="3029:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <break pos:start="3031:21" pos:end="3031:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="3035:17" pos:end="3035:22">break;</break>

            <case pos:start="3037:13" pos:end="3037:22">case <expr pos:start="3037:18" pos:end="3037:21"><literal type="number" pos:start="3037:18" pos:end="3037:21">0x0c</literal></expr>:</case> <comment type="block" pos:start="3037:24" pos:end="3037:39">/* fldenv mem */</comment>

                <if_stmt pos:start="3039:17" pos:end="3041:47"><if pos:start="3039:17" pos:end="3041:47">if <condition pos:start="3039:20" pos:end="3039:46">(<expr pos:start="3039:21" pos:end="3039:45"><name pos:start="3039:21" pos:end="3039:28"><name pos:start="3039:21" pos:end="3039:21">s</name><operator pos:start="3039:22" pos:end="3039:23">-&gt;</operator><name pos:start="3039:24" pos:end="3039:28">cc_op</name></name> <operator pos:start="3039:30" pos:end="3039:31">!=</operator> <name pos:start="3039:33" pos:end="3039:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3041:21" pos:end="3041:47"><block_content pos:start="3041:21" pos:end="3041:47">

                    <expr_stmt pos:start="3041:21" pos:end="3041:47"><expr pos:start="3041:21" pos:end="3041:46"><call pos:start="3041:21" pos:end="3041:46"><name pos:start="3041:21" pos:end="3041:36">gen_op_set_cc_op</name><argument_list pos:start="3041:37" pos:end="3041:46">(<argument pos:start="3041:38" pos:end="3041:45"><expr pos:start="3041:38" pos:end="3041:45"><name pos:start="3041:38" pos:end="3041:45"><name pos:start="3041:38" pos:end="3041:38">s</name><operator pos:start="3041:39" pos:end="3041:40">-&gt;</operator><name pos:start="3041:41" pos:end="3041:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3043:17" pos:end="3043:50"><expr pos:start="3043:17" pos:end="3043:49"><call pos:start="3043:17" pos:end="3043:49"><name pos:start="3043:17" pos:end="3043:26">gen_jmp_im</name><argument_list pos:start="3043:27" pos:end="3043:49">(<argument pos:start="3043:28" pos:end="3043:48"><expr pos:start="3043:28" pos:end="3043:48"><name pos:start="3043:28" pos:end="3043:35">pc_start</name> <operator pos:start="3043:37" pos:end="3043:37">-</operator> <name pos:start="3043:39" pos:end="3043:48"><name pos:start="3043:39" pos:end="3043:39">s</name><operator pos:start="3043:40" pos:end="3043:41">-&gt;</operator><name pos:start="3043:42" pos:end="3043:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3045:17" pos:end="3045:76"><expr pos:start="3045:17" pos:end="3045:75"><call pos:start="3045:17" pos:end="3045:75"><name pos:start="3045:17" pos:end="3045:33">gen_helper_fldenv</name><argument_list pos:start="3045:34" pos:end="3045:75">(<argument pos:start="3045:35" pos:end="3045:41"><expr pos:start="3045:35" pos:end="3045:41"><name pos:start="3045:35" pos:end="3045:41">cpu_env</name></expr></argument>, <argument pos:start="3045:44" pos:end="3045:49"><expr pos:start="3045:44" pos:end="3045:49"><name pos:start="3045:44" pos:end="3045:49">cpu_A0</name></expr></argument>, <argument pos:start="3045:52" pos:end="3045:74"><expr pos:start="3045:52" pos:end="3045:74"><call pos:start="3045:52" pos:end="3045:74"><name pos:start="3045:52" pos:end="3045:64">tcg_const_i32</name><argument_list pos:start="3045:65" pos:end="3045:74">(<argument pos:start="3045:66" pos:end="3045:73"><expr pos:start="3045:66" pos:end="3045:73"><name pos:start="3045:66" pos:end="3045:73"><name pos:start="3045:66" pos:end="3045:66">s</name><operator pos:start="3045:67" pos:end="3045:68">-&gt;</operator><name pos:start="3045:69" pos:end="3045:73">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3047:17" pos:end="3047:22">break;</break>

            <case pos:start="3049:13" pos:end="3049:22">case <expr pos:start="3049:18" pos:end="3049:21"><literal type="number" pos:start="3049:18" pos:end="3049:21">0x0d</literal></expr>:</case> <comment type="block" pos:start="3049:24" pos:end="3049:38">/* fldcw mem */</comment>

                <expr_stmt pos:start="3051:17" pos:end="3051:56"><expr pos:start="3051:17" pos:end="3051:55"><call pos:start="3051:17" pos:end="3051:55"><name pos:start="3051:17" pos:end="3051:31">gen_op_ld_T0_A0</name><argument_list pos:start="3051:32" pos:end="3051:55">(<argument pos:start="3051:33" pos:end="3051:54"><expr pos:start="3051:33" pos:end="3051:54"><name pos:start="3051:33" pos:end="3051:39">OT_WORD</name> <operator pos:start="3051:41" pos:end="3051:41">+</operator> <name pos:start="3051:43" pos:end="3051:54"><name pos:start="3051:43" pos:end="3051:43">s</name><operator pos:start="3051:44" pos:end="3051:45">-&gt;</operator><name pos:start="3051:46" pos:end="3051:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3053:17" pos:end="3053:61"><expr pos:start="3053:17" pos:end="3053:60"><call pos:start="3053:17" pos:end="3053:60"><name pos:start="3053:17" pos:end="3053:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="3053:37" pos:end="3053:60">(<argument pos:start="3053:38" pos:end="3053:49"><expr pos:start="3053:38" pos:end="3053:49"><name pos:start="3053:38" pos:end="3053:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="3053:52" pos:end="3053:59"><expr pos:start="3053:52" pos:end="3053:59"><name pos:start="3053:52" pos:end="3053:59"><name pos:start="3053:52" pos:end="3053:56">cpu_T</name><index pos:start="3053:57" pos:end="3053:59">[<expr pos:start="3053:58" pos:end="3053:58"><literal type="number" pos:start="3053:58" pos:end="3053:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3055:17" pos:end="3055:56"><expr pos:start="3055:17" pos:end="3055:55"><call pos:start="3055:17" pos:end="3055:55"><name pos:start="3055:17" pos:end="3055:32">gen_helper_fldcw</name><argument_list pos:start="3055:33" pos:end="3055:55">(<argument pos:start="3055:34" pos:end="3055:40"><expr pos:start="3055:34" pos:end="3055:40"><name pos:start="3055:34" pos:end="3055:40">cpu_env</name></expr></argument>, <argument pos:start="3055:43" pos:end="3055:54"><expr pos:start="3055:43" pos:end="3055:54"><name pos:start="3055:43" pos:end="3055:54">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3057:17" pos:end="3057:22">break;</break>

            <case pos:start="3059:13" pos:end="3059:22">case <expr pos:start="3059:18" pos:end="3059:21"><literal type="number" pos:start="3059:18" pos:end="3059:21">0x0e</literal></expr>:</case> <comment type="block" pos:start="3059:24" pos:end="3059:40">/* fnstenv mem */</comment>

                <if_stmt pos:start="3061:17" pos:end="3063:47"><if pos:start="3061:17" pos:end="3063:47">if <condition pos:start="3061:20" pos:end="3061:46">(<expr pos:start="3061:21" pos:end="3061:45"><name pos:start="3061:21" pos:end="3061:28"><name pos:start="3061:21" pos:end="3061:21">s</name><operator pos:start="3061:22" pos:end="3061:23">-&gt;</operator><name pos:start="3061:24" pos:end="3061:28">cc_op</name></name> <operator pos:start="3061:30" pos:end="3061:31">!=</operator> <name pos:start="3061:33" pos:end="3061:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3063:21" pos:end="3063:47"><block_content pos:start="3063:21" pos:end="3063:47">

                    <expr_stmt pos:start="3063:21" pos:end="3063:47"><expr pos:start="3063:21" pos:end="3063:46"><call pos:start="3063:21" pos:end="3063:46"><name pos:start="3063:21" pos:end="3063:36">gen_op_set_cc_op</name><argument_list pos:start="3063:37" pos:end="3063:46">(<argument pos:start="3063:38" pos:end="3063:45"><expr pos:start="3063:38" pos:end="3063:45"><name pos:start="3063:38" pos:end="3063:45"><name pos:start="3063:38" pos:end="3063:38">s</name><operator pos:start="3063:39" pos:end="3063:40">-&gt;</operator><name pos:start="3063:41" pos:end="3063:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3065:17" pos:end="3065:50"><expr pos:start="3065:17" pos:end="3065:49"><call pos:start="3065:17" pos:end="3065:49"><name pos:start="3065:17" pos:end="3065:26">gen_jmp_im</name><argument_list pos:start="3065:27" pos:end="3065:49">(<argument pos:start="3065:28" pos:end="3065:48"><expr pos:start="3065:28" pos:end="3065:48"><name pos:start="3065:28" pos:end="3065:35">pc_start</name> <operator pos:start="3065:37" pos:end="3065:37">-</operator> <name pos:start="3065:39" pos:end="3065:48"><name pos:start="3065:39" pos:end="3065:39">s</name><operator pos:start="3065:40" pos:end="3065:41">-&gt;</operator><name pos:start="3065:42" pos:end="3065:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3067:17" pos:end="3067:76"><expr pos:start="3067:17" pos:end="3067:75"><call pos:start="3067:17" pos:end="3067:75"><name pos:start="3067:17" pos:end="3067:33">gen_helper_fstenv</name><argument_list pos:start="3067:34" pos:end="3067:75">(<argument pos:start="3067:35" pos:end="3067:41"><expr pos:start="3067:35" pos:end="3067:41"><name pos:start="3067:35" pos:end="3067:41">cpu_env</name></expr></argument>, <argument pos:start="3067:44" pos:end="3067:49"><expr pos:start="3067:44" pos:end="3067:49"><name pos:start="3067:44" pos:end="3067:49">cpu_A0</name></expr></argument>, <argument pos:start="3067:52" pos:end="3067:74"><expr pos:start="3067:52" pos:end="3067:74"><call pos:start="3067:52" pos:end="3067:74"><name pos:start="3067:52" pos:end="3067:64">tcg_const_i32</name><argument_list pos:start="3067:65" pos:end="3067:74">(<argument pos:start="3067:66" pos:end="3067:73"><expr pos:start="3067:66" pos:end="3067:73"><name pos:start="3067:66" pos:end="3067:73"><name pos:start="3067:66" pos:end="3067:66">s</name><operator pos:start="3067:67" pos:end="3067:68">-&gt;</operator><name pos:start="3067:69" pos:end="3067:73">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3069:17" pos:end="3069:22">break;</break>

            <case pos:start="3071:13" pos:end="3071:22">case <expr pos:start="3071:18" pos:end="3071:21"><literal type="number" pos:start="3071:18" pos:end="3071:21">0x0f</literal></expr>:</case> <comment type="block" pos:start="3071:24" pos:end="3071:39">/* fnstcw mem */</comment>

                <expr_stmt pos:start="3073:17" pos:end="3073:57"><expr pos:start="3073:17" pos:end="3073:56"><call pos:start="3073:17" pos:end="3073:56"><name pos:start="3073:17" pos:end="3073:33">gen_helper_fnstcw</name><argument_list pos:start="3073:34" pos:end="3073:56">(<argument pos:start="3073:35" pos:end="3073:46"><expr pos:start="3073:35" pos:end="3073:46"><name pos:start="3073:35" pos:end="3073:46">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="3073:49" pos:end="3073:55"><expr pos:start="3073:49" pos:end="3073:55"><name pos:start="3073:49" pos:end="3073:55">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3075:17" pos:end="3075:60"><expr pos:start="3075:17" pos:end="3075:59"><call pos:start="3075:17" pos:end="3075:59"><name pos:start="3075:17" pos:end="3075:35">tcg_gen_extu_i32_tl</name><argument_list pos:start="3075:36" pos:end="3075:59">(<argument pos:start="3075:37" pos:end="3075:44"><expr pos:start="3075:37" pos:end="3075:44"><name pos:start="3075:37" pos:end="3075:44"><name pos:start="3075:37" pos:end="3075:41">cpu_T</name><index pos:start="3075:42" pos:end="3075:44">[<expr pos:start="3075:43" pos:end="3075:43"><literal type="number" pos:start="3075:43" pos:end="3075:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="3075:47" pos:end="3075:58"><expr pos:start="3075:47" pos:end="3075:58"><name pos:start="3075:47" pos:end="3075:58">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3077:17" pos:end="3077:56"><expr pos:start="3077:17" pos:end="3077:55"><call pos:start="3077:17" pos:end="3077:55"><name pos:start="3077:17" pos:end="3077:31">gen_op_st_T0_A0</name><argument_list pos:start="3077:32" pos:end="3077:55">(<argument pos:start="3077:33" pos:end="3077:54"><expr pos:start="3077:33" pos:end="3077:54"><name pos:start="3077:33" pos:end="3077:39">OT_WORD</name> <operator pos:start="3077:41" pos:end="3077:41">+</operator> <name pos:start="3077:43" pos:end="3077:54"><name pos:start="3077:43" pos:end="3077:43">s</name><operator pos:start="3077:44" pos:end="3077:45">-&gt;</operator><name pos:start="3077:46" pos:end="3077:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3079:17" pos:end="3079:22">break;</break>

            <case pos:start="3081:13" pos:end="3081:22">case <expr pos:start="3081:18" pos:end="3081:21"><literal type="number" pos:start="3081:18" pos:end="3081:21">0x1d</literal></expr>:</case> <comment type="block" pos:start="3081:24" pos:end="3081:37">/* fldt mem */</comment>

                <if_stmt pos:start="3083:17" pos:end="3085:47"><if pos:start="3083:17" pos:end="3085:47">if <condition pos:start="3083:20" pos:end="3083:46">(<expr pos:start="3083:21" pos:end="3083:45"><name pos:start="3083:21" pos:end="3083:28"><name pos:start="3083:21" pos:end="3083:21">s</name><operator pos:start="3083:22" pos:end="3083:23">-&gt;</operator><name pos:start="3083:24" pos:end="3083:28">cc_op</name></name> <operator pos:start="3083:30" pos:end="3083:31">!=</operator> <name pos:start="3083:33" pos:end="3083:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3085:21" pos:end="3085:47"><block_content pos:start="3085:21" pos:end="3085:47">

                    <expr_stmt pos:start="3085:21" pos:end="3085:47"><expr pos:start="3085:21" pos:end="3085:46"><call pos:start="3085:21" pos:end="3085:46"><name pos:start="3085:21" pos:end="3085:36">gen_op_set_cc_op</name><argument_list pos:start="3085:37" pos:end="3085:46">(<argument pos:start="3085:38" pos:end="3085:45"><expr pos:start="3085:38" pos:end="3085:45"><name pos:start="3085:38" pos:end="3085:45"><name pos:start="3085:38" pos:end="3085:38">s</name><operator pos:start="3085:39" pos:end="3085:40">-&gt;</operator><name pos:start="3085:41" pos:end="3085:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3087:17" pos:end="3087:50"><expr pos:start="3087:17" pos:end="3087:49"><call pos:start="3087:17" pos:end="3087:49"><name pos:start="3087:17" pos:end="3087:26">gen_jmp_im</name><argument_list pos:start="3087:27" pos:end="3087:49">(<argument pos:start="3087:28" pos:end="3087:48"><expr pos:start="3087:28" pos:end="3087:48"><name pos:start="3087:28" pos:end="3087:35">pc_start</name> <operator pos:start="3087:37" pos:end="3087:37">-</operator> <name pos:start="3087:39" pos:end="3087:48"><name pos:start="3087:39" pos:end="3087:39">s</name><operator pos:start="3087:40" pos:end="3087:41">-&gt;</operator><name pos:start="3087:42" pos:end="3087:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3089:17" pos:end="3089:53"><expr pos:start="3089:17" pos:end="3089:52"><call pos:start="3089:17" pos:end="3089:52"><name pos:start="3089:17" pos:end="3089:35">gen_helper_fldt_ST0</name><argument_list pos:start="3089:36" pos:end="3089:52">(<argument pos:start="3089:37" pos:end="3089:43"><expr pos:start="3089:37" pos:end="3089:43"><name pos:start="3089:37" pos:end="3089:43">cpu_env</name></expr></argument>, <argument pos:start="3089:46" pos:end="3089:51"><expr pos:start="3089:46" pos:end="3089:51"><name pos:start="3089:46" pos:end="3089:51">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3091:17" pos:end="3091:22">break;</break>

            <case pos:start="3093:13" pos:end="3093:22">case <expr pos:start="3093:18" pos:end="3093:21"><literal type="number" pos:start="3093:18" pos:end="3093:21">0x1f</literal></expr>:</case> <comment type="block" pos:start="3093:24" pos:end="3093:38">/* fstpt mem */</comment>

                <if_stmt pos:start="3095:17" pos:end="3097:47"><if pos:start="3095:17" pos:end="3097:47">if <condition pos:start="3095:20" pos:end="3095:46">(<expr pos:start="3095:21" pos:end="3095:45"><name pos:start="3095:21" pos:end="3095:28"><name pos:start="3095:21" pos:end="3095:21">s</name><operator pos:start="3095:22" pos:end="3095:23">-&gt;</operator><name pos:start="3095:24" pos:end="3095:28">cc_op</name></name> <operator pos:start="3095:30" pos:end="3095:31">!=</operator> <name pos:start="3095:33" pos:end="3095:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3097:21" pos:end="3097:47"><block_content pos:start="3097:21" pos:end="3097:47">

                    <expr_stmt pos:start="3097:21" pos:end="3097:47"><expr pos:start="3097:21" pos:end="3097:46"><call pos:start="3097:21" pos:end="3097:46"><name pos:start="3097:21" pos:end="3097:36">gen_op_set_cc_op</name><argument_list pos:start="3097:37" pos:end="3097:46">(<argument pos:start="3097:38" pos:end="3097:45"><expr pos:start="3097:38" pos:end="3097:45"><name pos:start="3097:38" pos:end="3097:45"><name pos:start="3097:38" pos:end="3097:38">s</name><operator pos:start="3097:39" pos:end="3097:40">-&gt;</operator><name pos:start="3097:41" pos:end="3097:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3099:17" pos:end="3099:50"><expr pos:start="3099:17" pos:end="3099:49"><call pos:start="3099:17" pos:end="3099:49"><name pos:start="3099:17" pos:end="3099:26">gen_jmp_im</name><argument_list pos:start="3099:27" pos:end="3099:49">(<argument pos:start="3099:28" pos:end="3099:48"><expr pos:start="3099:28" pos:end="3099:48"><name pos:start="3099:28" pos:end="3099:35">pc_start</name> <operator pos:start="3099:37" pos:end="3099:37">-</operator> <name pos:start="3099:39" pos:end="3099:48"><name pos:start="3099:39" pos:end="3099:39">s</name><operator pos:start="3099:40" pos:end="3099:41">-&gt;</operator><name pos:start="3099:42" pos:end="3099:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3101:17" pos:end="3101:53"><expr pos:start="3101:17" pos:end="3101:52"><call pos:start="3101:17" pos:end="3101:52"><name pos:start="3101:17" pos:end="3101:35">gen_helper_fstt_ST0</name><argument_list pos:start="3101:36" pos:end="3101:52">(<argument pos:start="3101:37" pos:end="3101:43"><expr pos:start="3101:37" pos:end="3101:43"><name pos:start="3101:37" pos:end="3101:43">cpu_env</name></expr></argument>, <argument pos:start="3101:46" pos:end="3101:51"><expr pos:start="3101:46" pos:end="3101:51"><name pos:start="3101:46" pos:end="3101:51">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3103:17" pos:end="3103:41"><expr pos:start="3103:17" pos:end="3103:40"><call pos:start="3103:17" pos:end="3103:40"><name pos:start="3103:17" pos:end="3103:31">gen_helper_fpop</name><argument_list pos:start="3103:32" pos:end="3103:40">(<argument pos:start="3103:33" pos:end="3103:39"><expr pos:start="3103:33" pos:end="3103:39"><name pos:start="3103:33" pos:end="3103:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3105:17" pos:end="3105:22">break;</break>

            <case pos:start="3107:13" pos:end="3107:22">case <expr pos:start="3107:18" pos:end="3107:21"><literal type="number" pos:start="3107:18" pos:end="3107:21">0x2c</literal></expr>:</case> <comment type="block" pos:start="3107:24" pos:end="3107:39">/* frstor mem */</comment>

                <if_stmt pos:start="3109:17" pos:end="3111:47"><if pos:start="3109:17" pos:end="3111:47">if <condition pos:start="3109:20" pos:end="3109:46">(<expr pos:start="3109:21" pos:end="3109:45"><name pos:start="3109:21" pos:end="3109:28"><name pos:start="3109:21" pos:end="3109:21">s</name><operator pos:start="3109:22" pos:end="3109:23">-&gt;</operator><name pos:start="3109:24" pos:end="3109:28">cc_op</name></name> <operator pos:start="3109:30" pos:end="3109:31">!=</operator> <name pos:start="3109:33" pos:end="3109:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3111:21" pos:end="3111:47"><block_content pos:start="3111:21" pos:end="3111:47">

                    <expr_stmt pos:start="3111:21" pos:end="3111:47"><expr pos:start="3111:21" pos:end="3111:46"><call pos:start="3111:21" pos:end="3111:46"><name pos:start="3111:21" pos:end="3111:36">gen_op_set_cc_op</name><argument_list pos:start="3111:37" pos:end="3111:46">(<argument pos:start="3111:38" pos:end="3111:45"><expr pos:start="3111:38" pos:end="3111:45"><name pos:start="3111:38" pos:end="3111:45"><name pos:start="3111:38" pos:end="3111:38">s</name><operator pos:start="3111:39" pos:end="3111:40">-&gt;</operator><name pos:start="3111:41" pos:end="3111:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3113:17" pos:end="3113:50"><expr pos:start="3113:17" pos:end="3113:49"><call pos:start="3113:17" pos:end="3113:49"><name pos:start="3113:17" pos:end="3113:26">gen_jmp_im</name><argument_list pos:start="3113:27" pos:end="3113:49">(<argument pos:start="3113:28" pos:end="3113:48"><expr pos:start="3113:28" pos:end="3113:48"><name pos:start="3113:28" pos:end="3113:35">pc_start</name> <operator pos:start="3113:37" pos:end="3113:37">-</operator> <name pos:start="3113:39" pos:end="3113:48"><name pos:start="3113:39" pos:end="3113:39">s</name><operator pos:start="3113:40" pos:end="3113:41">-&gt;</operator><name pos:start="3113:42" pos:end="3113:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3115:17" pos:end="3115:76"><expr pos:start="3115:17" pos:end="3115:75"><call pos:start="3115:17" pos:end="3115:75"><name pos:start="3115:17" pos:end="3115:33">gen_helper_frstor</name><argument_list pos:start="3115:34" pos:end="3115:75">(<argument pos:start="3115:35" pos:end="3115:41"><expr pos:start="3115:35" pos:end="3115:41"><name pos:start="3115:35" pos:end="3115:41">cpu_env</name></expr></argument>, <argument pos:start="3115:44" pos:end="3115:49"><expr pos:start="3115:44" pos:end="3115:49"><name pos:start="3115:44" pos:end="3115:49">cpu_A0</name></expr></argument>, <argument pos:start="3115:52" pos:end="3115:74"><expr pos:start="3115:52" pos:end="3115:74"><call pos:start="3115:52" pos:end="3115:74"><name pos:start="3115:52" pos:end="3115:64">tcg_const_i32</name><argument_list pos:start="3115:65" pos:end="3115:74">(<argument pos:start="3115:66" pos:end="3115:73"><expr pos:start="3115:66" pos:end="3115:73"><name pos:start="3115:66" pos:end="3115:73"><name pos:start="3115:66" pos:end="3115:66">s</name><operator pos:start="3115:67" pos:end="3115:68">-&gt;</operator><name pos:start="3115:69" pos:end="3115:73">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3117:17" pos:end="3117:22">break;</break>

            <case pos:start="3119:13" pos:end="3119:22">case <expr pos:start="3119:18" pos:end="3119:21"><literal type="number" pos:start="3119:18" pos:end="3119:21">0x2e</literal></expr>:</case> <comment type="block" pos:start="3119:24" pos:end="3119:39">/* fnsave mem */</comment>

                <if_stmt pos:start="3121:17" pos:end="3123:47"><if pos:start="3121:17" pos:end="3123:47">if <condition pos:start="3121:20" pos:end="3121:46">(<expr pos:start="3121:21" pos:end="3121:45"><name pos:start="3121:21" pos:end="3121:28"><name pos:start="3121:21" pos:end="3121:21">s</name><operator pos:start="3121:22" pos:end="3121:23">-&gt;</operator><name pos:start="3121:24" pos:end="3121:28">cc_op</name></name> <operator pos:start="3121:30" pos:end="3121:31">!=</operator> <name pos:start="3121:33" pos:end="3121:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3123:21" pos:end="3123:47"><block_content pos:start="3123:21" pos:end="3123:47">

                    <expr_stmt pos:start="3123:21" pos:end="3123:47"><expr pos:start="3123:21" pos:end="3123:46"><call pos:start="3123:21" pos:end="3123:46"><name pos:start="3123:21" pos:end="3123:36">gen_op_set_cc_op</name><argument_list pos:start="3123:37" pos:end="3123:46">(<argument pos:start="3123:38" pos:end="3123:45"><expr pos:start="3123:38" pos:end="3123:45"><name pos:start="3123:38" pos:end="3123:45"><name pos:start="3123:38" pos:end="3123:38">s</name><operator pos:start="3123:39" pos:end="3123:40">-&gt;</operator><name pos:start="3123:41" pos:end="3123:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3125:17" pos:end="3125:50"><expr pos:start="3125:17" pos:end="3125:49"><call pos:start="3125:17" pos:end="3125:49"><name pos:start="3125:17" pos:end="3125:26">gen_jmp_im</name><argument_list pos:start="3125:27" pos:end="3125:49">(<argument pos:start="3125:28" pos:end="3125:48"><expr pos:start="3125:28" pos:end="3125:48"><name pos:start="3125:28" pos:end="3125:35">pc_start</name> <operator pos:start="3125:37" pos:end="3125:37">-</operator> <name pos:start="3125:39" pos:end="3125:48"><name pos:start="3125:39" pos:end="3125:39">s</name><operator pos:start="3125:40" pos:end="3125:41">-&gt;</operator><name pos:start="3125:42" pos:end="3125:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3127:17" pos:end="3127:75"><expr pos:start="3127:17" pos:end="3127:74"><call pos:start="3127:17" pos:end="3127:74"><name pos:start="3127:17" pos:end="3127:32">gen_helper_fsave</name><argument_list pos:start="3127:33" pos:end="3127:74">(<argument pos:start="3127:34" pos:end="3127:40"><expr pos:start="3127:34" pos:end="3127:40"><name pos:start="3127:34" pos:end="3127:40">cpu_env</name></expr></argument>, <argument pos:start="3127:43" pos:end="3127:48"><expr pos:start="3127:43" pos:end="3127:48"><name pos:start="3127:43" pos:end="3127:48">cpu_A0</name></expr></argument>, <argument pos:start="3127:51" pos:end="3127:73"><expr pos:start="3127:51" pos:end="3127:73"><call pos:start="3127:51" pos:end="3127:73"><name pos:start="3127:51" pos:end="3127:63">tcg_const_i32</name><argument_list pos:start="3127:64" pos:end="3127:73">(<argument pos:start="3127:65" pos:end="3127:72"><expr pos:start="3127:65" pos:end="3127:72"><name pos:start="3127:65" pos:end="3127:72"><name pos:start="3127:65" pos:end="3127:65">s</name><operator pos:start="3127:66" pos:end="3127:67">-&gt;</operator><name pos:start="3127:68" pos:end="3127:72">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3129:17" pos:end="3129:22">break;</break>

            <case pos:start="3131:13" pos:end="3131:22">case <expr pos:start="3131:18" pos:end="3131:21"><literal type="number" pos:start="3131:18" pos:end="3131:21">0x2f</literal></expr>:</case> <comment type="block" pos:start="3131:24" pos:end="3131:39">/* fnstsw mem */</comment>

                <expr_stmt pos:start="3133:17" pos:end="3133:57"><expr pos:start="3133:17" pos:end="3133:56"><call pos:start="3133:17" pos:end="3133:56"><name pos:start="3133:17" pos:end="3133:33">gen_helper_fnstsw</name><argument_list pos:start="3133:34" pos:end="3133:56">(<argument pos:start="3133:35" pos:end="3133:46"><expr pos:start="3133:35" pos:end="3133:46"><name pos:start="3133:35" pos:end="3133:46">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="3133:49" pos:end="3133:55"><expr pos:start="3133:49" pos:end="3133:55"><name pos:start="3133:49" pos:end="3133:55">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3135:17" pos:end="3135:60"><expr pos:start="3135:17" pos:end="3135:59"><call pos:start="3135:17" pos:end="3135:59"><name pos:start="3135:17" pos:end="3135:35">tcg_gen_extu_i32_tl</name><argument_list pos:start="3135:36" pos:end="3135:59">(<argument pos:start="3135:37" pos:end="3135:44"><expr pos:start="3135:37" pos:end="3135:44"><name pos:start="3135:37" pos:end="3135:44"><name pos:start="3135:37" pos:end="3135:41">cpu_T</name><index pos:start="3135:42" pos:end="3135:44">[<expr pos:start="3135:43" pos:end="3135:43"><literal type="number" pos:start="3135:43" pos:end="3135:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="3135:47" pos:end="3135:58"><expr pos:start="3135:47" pos:end="3135:58"><name pos:start="3135:47" pos:end="3135:58">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3137:17" pos:end="3137:56"><expr pos:start="3137:17" pos:end="3137:55"><call pos:start="3137:17" pos:end="3137:55"><name pos:start="3137:17" pos:end="3137:31">gen_op_st_T0_A0</name><argument_list pos:start="3137:32" pos:end="3137:55">(<argument pos:start="3137:33" pos:end="3137:54"><expr pos:start="3137:33" pos:end="3137:54"><name pos:start="3137:33" pos:end="3137:39">OT_WORD</name> <operator pos:start="3137:41" pos:end="3137:41">+</operator> <name pos:start="3137:43" pos:end="3137:54"><name pos:start="3137:43" pos:end="3137:43">s</name><operator pos:start="3137:44" pos:end="3137:45">-&gt;</operator><name pos:start="3137:46" pos:end="3137:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3139:17" pos:end="3139:22">break;</break>

            <case pos:start="3141:13" pos:end="3141:22">case <expr pos:start="3141:18" pos:end="3141:21"><literal type="number" pos:start="3141:18" pos:end="3141:21">0x3c</literal></expr>:</case> <comment type="block" pos:start="3141:24" pos:end="3141:33">/* fbld */</comment>

                <if_stmt pos:start="3143:17" pos:end="3145:47"><if pos:start="3143:17" pos:end="3145:47">if <condition pos:start="3143:20" pos:end="3143:46">(<expr pos:start="3143:21" pos:end="3143:45"><name pos:start="3143:21" pos:end="3143:28"><name pos:start="3143:21" pos:end="3143:21">s</name><operator pos:start="3143:22" pos:end="3143:23">-&gt;</operator><name pos:start="3143:24" pos:end="3143:28">cc_op</name></name> <operator pos:start="3143:30" pos:end="3143:31">!=</operator> <name pos:start="3143:33" pos:end="3143:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3145:21" pos:end="3145:47"><block_content pos:start="3145:21" pos:end="3145:47">

                    <expr_stmt pos:start="3145:21" pos:end="3145:47"><expr pos:start="3145:21" pos:end="3145:46"><call pos:start="3145:21" pos:end="3145:46"><name pos:start="3145:21" pos:end="3145:36">gen_op_set_cc_op</name><argument_list pos:start="3145:37" pos:end="3145:46">(<argument pos:start="3145:38" pos:end="3145:45"><expr pos:start="3145:38" pos:end="3145:45"><name pos:start="3145:38" pos:end="3145:45"><name pos:start="3145:38" pos:end="3145:38">s</name><operator pos:start="3145:39" pos:end="3145:40">-&gt;</operator><name pos:start="3145:41" pos:end="3145:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3147:17" pos:end="3147:50"><expr pos:start="3147:17" pos:end="3147:49"><call pos:start="3147:17" pos:end="3147:49"><name pos:start="3147:17" pos:end="3147:26">gen_jmp_im</name><argument_list pos:start="3147:27" pos:end="3147:49">(<argument pos:start="3147:28" pos:end="3147:48"><expr pos:start="3147:28" pos:end="3147:48"><name pos:start="3147:28" pos:end="3147:35">pc_start</name> <operator pos:start="3147:37" pos:end="3147:37">-</operator> <name pos:start="3147:39" pos:end="3147:48"><name pos:start="3147:39" pos:end="3147:39">s</name><operator pos:start="3147:40" pos:end="3147:41">-&gt;</operator><name pos:start="3147:42" pos:end="3147:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3149:17" pos:end="3149:53"><expr pos:start="3149:17" pos:end="3149:52"><call pos:start="3149:17" pos:end="3149:52"><name pos:start="3149:17" pos:end="3149:35">gen_helper_fbld_ST0</name><argument_list pos:start="3149:36" pos:end="3149:52">(<argument pos:start="3149:37" pos:end="3149:43"><expr pos:start="3149:37" pos:end="3149:43"><name pos:start="3149:37" pos:end="3149:43">cpu_env</name></expr></argument>, <argument pos:start="3149:46" pos:end="3149:51"><expr pos:start="3149:46" pos:end="3149:51"><name pos:start="3149:46" pos:end="3149:51">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3151:17" pos:end="3151:22">break;</break>

            <case pos:start="3153:13" pos:end="3153:22">case <expr pos:start="3153:18" pos:end="3153:21"><literal type="number" pos:start="3153:18" pos:end="3153:21">0x3e</literal></expr>:</case> <comment type="block" pos:start="3153:24" pos:end="3153:34">/* fbstp */</comment>

                <if_stmt pos:start="3155:17" pos:end="3157:47"><if pos:start="3155:17" pos:end="3157:47">if <condition pos:start="3155:20" pos:end="3155:46">(<expr pos:start="3155:21" pos:end="3155:45"><name pos:start="3155:21" pos:end="3155:28"><name pos:start="3155:21" pos:end="3155:21">s</name><operator pos:start="3155:22" pos:end="3155:23">-&gt;</operator><name pos:start="3155:24" pos:end="3155:28">cc_op</name></name> <operator pos:start="3155:30" pos:end="3155:31">!=</operator> <name pos:start="3155:33" pos:end="3155:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3157:21" pos:end="3157:47"><block_content pos:start="3157:21" pos:end="3157:47">

                    <expr_stmt pos:start="3157:21" pos:end="3157:47"><expr pos:start="3157:21" pos:end="3157:46"><call pos:start="3157:21" pos:end="3157:46"><name pos:start="3157:21" pos:end="3157:36">gen_op_set_cc_op</name><argument_list pos:start="3157:37" pos:end="3157:46">(<argument pos:start="3157:38" pos:end="3157:45"><expr pos:start="3157:38" pos:end="3157:45"><name pos:start="3157:38" pos:end="3157:45"><name pos:start="3157:38" pos:end="3157:38">s</name><operator pos:start="3157:39" pos:end="3157:40">-&gt;</operator><name pos:start="3157:41" pos:end="3157:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3159:17" pos:end="3159:50"><expr pos:start="3159:17" pos:end="3159:49"><call pos:start="3159:17" pos:end="3159:49"><name pos:start="3159:17" pos:end="3159:26">gen_jmp_im</name><argument_list pos:start="3159:27" pos:end="3159:49">(<argument pos:start="3159:28" pos:end="3159:48"><expr pos:start="3159:28" pos:end="3159:48"><name pos:start="3159:28" pos:end="3159:35">pc_start</name> <operator pos:start="3159:37" pos:end="3159:37">-</operator> <name pos:start="3159:39" pos:end="3159:48"><name pos:start="3159:39" pos:end="3159:39">s</name><operator pos:start="3159:40" pos:end="3159:41">-&gt;</operator><name pos:start="3159:42" pos:end="3159:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3161:17" pos:end="3161:53"><expr pos:start="3161:17" pos:end="3161:52"><call pos:start="3161:17" pos:end="3161:52"><name pos:start="3161:17" pos:end="3161:35">gen_helper_fbst_ST0</name><argument_list pos:start="3161:36" pos:end="3161:52">(<argument pos:start="3161:37" pos:end="3161:43"><expr pos:start="3161:37" pos:end="3161:43"><name pos:start="3161:37" pos:end="3161:43">cpu_env</name></expr></argument>, <argument pos:start="3161:46" pos:end="3161:51"><expr pos:start="3161:46" pos:end="3161:51"><name pos:start="3161:46" pos:end="3161:51">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3163:17" pos:end="3163:41"><expr pos:start="3163:17" pos:end="3163:40"><call pos:start="3163:17" pos:end="3163:40"><name pos:start="3163:17" pos:end="3163:31">gen_helper_fpop</name><argument_list pos:start="3163:32" pos:end="3163:40">(<argument pos:start="3163:33" pos:end="3163:39"><expr pos:start="3163:33" pos:end="3163:39"><name pos:start="3163:33" pos:end="3163:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3165:17" pos:end="3165:22">break;</break>

            <case pos:start="3167:13" pos:end="3167:22">case <expr pos:start="3167:18" pos:end="3167:21"><literal type="number" pos:start="3167:18" pos:end="3167:21">0x3d</literal></expr>:</case> <comment type="block" pos:start="3167:24" pos:end="3167:35">/* fildll */</comment>

                <expr_stmt pos:start="3169:17" pos:end="3171:59"><expr pos:start="3169:17" pos:end="3171:58"><call pos:start="3169:17" pos:end="3171:58"><name pos:start="3169:17" pos:end="3169:33">tcg_gen_qemu_ld64</name><argument_list pos:start="3169:34" pos:end="3171:58">(<argument pos:start="3169:35" pos:end="3169:46"><expr pos:start="3169:35" pos:end="3169:46"><name pos:start="3169:35" pos:end="3169:46">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="3169:49" pos:end="3169:54"><expr pos:start="3169:49" pos:end="3169:54"><name pos:start="3169:49" pos:end="3169:54">cpu_A0</name></expr></argument>, 

                                  <argument pos:start="3171:35" pos:end="3171:57"><expr pos:start="3171:35" pos:end="3171:57"><operator pos:start="3171:35" pos:end="3171:35">(</operator><name pos:start="3171:36" pos:end="3171:47"><name pos:start="3171:36" pos:end="3171:36">s</name><operator pos:start="3171:37" pos:end="3171:38">-&gt;</operator><name pos:start="3171:39" pos:end="3171:47">mem_index</name></name> <operator pos:start="3171:49" pos:end="3171:50">&gt;&gt;</operator> <literal type="number" pos:start="3171:52" pos:end="3171:52">2</literal><operator pos:start="3171:53" pos:end="3171:53">)</operator> <operator pos:start="3171:55" pos:end="3171:55">-</operator> <literal type="number" pos:start="3171:57" pos:end="3171:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3173:17" pos:end="3173:61"><expr pos:start="3173:17" pos:end="3173:60"><call pos:start="3173:17" pos:end="3173:60"><name pos:start="3173:17" pos:end="3173:37">gen_helper_fildll_ST0</name><argument_list pos:start="3173:38" pos:end="3173:60">(<argument pos:start="3173:39" pos:end="3173:45"><expr pos:start="3173:39" pos:end="3173:45"><name pos:start="3173:39" pos:end="3173:45">cpu_env</name></expr></argument>, <argument pos:start="3173:48" pos:end="3173:59"><expr pos:start="3173:48" pos:end="3173:59"><name pos:start="3173:48" pos:end="3173:59">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3175:17" pos:end="3175:22">break;</break>

            <case pos:start="3177:13" pos:end="3177:22">case <expr pos:start="3177:18" pos:end="3177:21"><literal type="number" pos:start="3177:18" pos:end="3177:21">0x3f</literal></expr>:</case> <comment type="block" pos:start="3177:24" pos:end="3177:36">/* fistpll */</comment>

                <expr_stmt pos:start="3179:17" pos:end="3179:61"><expr pos:start="3179:17" pos:end="3179:60"><call pos:start="3179:17" pos:end="3179:60"><name pos:start="3179:17" pos:end="3179:37">gen_helper_fistll_ST0</name><argument_list pos:start="3179:38" pos:end="3179:60">(<argument pos:start="3179:39" pos:end="3179:50"><expr pos:start="3179:39" pos:end="3179:50"><name pos:start="3179:39" pos:end="3179:50">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="3179:53" pos:end="3179:59"><expr pos:start="3179:53" pos:end="3179:59"><name pos:start="3179:53" pos:end="3179:59">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3181:17" pos:end="3183:59"><expr pos:start="3181:17" pos:end="3183:58"><call pos:start="3181:17" pos:end="3183:58"><name pos:start="3181:17" pos:end="3181:33">tcg_gen_qemu_st64</name><argument_list pos:start="3181:34" pos:end="3183:58">(<argument pos:start="3181:35" pos:end="3181:46"><expr pos:start="3181:35" pos:end="3181:46"><name pos:start="3181:35" pos:end="3181:46">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="3181:49" pos:end="3181:54"><expr pos:start="3181:49" pos:end="3181:54"><name pos:start="3181:49" pos:end="3181:54">cpu_A0</name></expr></argument>, 

                                  <argument pos:start="3183:35" pos:end="3183:57"><expr pos:start="3183:35" pos:end="3183:57"><operator pos:start="3183:35" pos:end="3183:35">(</operator><name pos:start="3183:36" pos:end="3183:47"><name pos:start="3183:36" pos:end="3183:36">s</name><operator pos:start="3183:37" pos:end="3183:38">-&gt;</operator><name pos:start="3183:39" pos:end="3183:47">mem_index</name></name> <operator pos:start="3183:49" pos:end="3183:50">&gt;&gt;</operator> <literal type="number" pos:start="3183:52" pos:end="3183:52">2</literal><operator pos:start="3183:53" pos:end="3183:53">)</operator> <operator pos:start="3183:55" pos:end="3183:55">-</operator> <literal type="number" pos:start="3183:57" pos:end="3183:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3185:17" pos:end="3185:41"><expr pos:start="3185:17" pos:end="3185:40"><call pos:start="3185:17" pos:end="3185:40"><name pos:start="3185:17" pos:end="3185:31">gen_helper_fpop</name><argument_list pos:start="3185:32" pos:end="3185:40">(<argument pos:start="3185:33" pos:end="3185:39"><expr pos:start="3185:33" pos:end="3185:39"><name pos:start="3185:33" pos:end="3185:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3187:17" pos:end="3187:22">break;</break>

            <default pos:start="3189:13" pos:end="3189:20">default:</default>

                <goto pos:start="3191:17" pos:end="3191:32">goto <name pos:start="3191:22" pos:end="3191:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

        </block_content>}</block></if> <else pos:start="3195:11" pos:end="3793:9">else <block pos:start="3195:16" pos:end="3793:9">{<block_content pos:start="3199:13" pos:end="3791:13">

            <comment type="block" pos:start="3197:13" pos:end="3197:36">/* register float ops */</comment>

            <expr_stmt pos:start="3199:13" pos:end="3199:23"><expr pos:start="3199:13" pos:end="3199:22"><name pos:start="3199:13" pos:end="3199:17">opreg</name> <operator pos:start="3199:19" pos:end="3199:19">=</operator> <name pos:start="3199:21" pos:end="3199:22">rm</name></expr>;</expr_stmt>



            <switch pos:start="3203:13" pos:end="3791:13">switch<condition pos:start="3203:19" pos:end="3203:22">(<expr pos:start="3203:20" pos:end="3203:21"><name pos:start="3203:20" pos:end="3203:21">op</name></expr>)</condition> <block pos:start="3203:24" pos:end="3791:13">{<block_content pos:start="3205:13" pos:end="3789:32">

            <case pos:start="3205:13" pos:end="3205:22">case <expr pos:start="3205:18" pos:end="3205:21"><literal type="number" pos:start="3205:18" pos:end="3205:21">0x08</literal></expr>:</case> <comment type="block" pos:start="3205:24" pos:end="3205:36">/* fld sti */</comment>

                <expr_stmt pos:start="3207:17" pos:end="3207:42"><expr pos:start="3207:17" pos:end="3207:41"><call pos:start="3207:17" pos:end="3207:41"><name pos:start="3207:17" pos:end="3207:32">gen_helper_fpush</name><argument_list pos:start="3207:33" pos:end="3207:41">(<argument pos:start="3207:34" pos:end="3207:40"><expr pos:start="3207:34" pos:end="3207:40"><name pos:start="3207:34" pos:end="3207:40">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3209:17" pos:end="3211:72"><expr pos:start="3209:17" pos:end="3211:71"><call pos:start="3209:17" pos:end="3211:71"><name pos:start="3209:17" pos:end="3209:39">gen_helper_fmov_ST0_STN</name><argument_list pos:start="3209:40" pos:end="3211:71">(<argument pos:start="3209:41" pos:end="3209:47"><expr pos:start="3209:41" pos:end="3209:47"><name pos:start="3209:41" pos:end="3209:47">cpu_env</name></expr></argument>,

                                        <argument pos:start="3211:41" pos:end="3211:70"><expr pos:start="3211:41" pos:end="3211:70"><call pos:start="3211:41" pos:end="3211:70"><name pos:start="3211:41" pos:end="3211:53">tcg_const_i32</name><argument_list pos:start="3211:54" pos:end="3211:70">(<argument pos:start="3211:55" pos:end="3211:69"><expr pos:start="3211:55" pos:end="3211:69"><operator pos:start="3211:55" pos:end="3211:55">(</operator><name pos:start="3211:56" pos:end="3211:60">opreg</name> <operator pos:start="3211:62" pos:end="3211:62">+</operator> <literal type="number" pos:start="3211:64" pos:end="3211:64">1</literal><operator pos:start="3211:65" pos:end="3211:65">)</operator> <operator pos:start="3211:67" pos:end="3211:67">&amp;</operator> <literal type="number" pos:start="3211:69" pos:end="3211:69">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3213:17" pos:end="3213:22">break;</break>

            <case pos:start="3215:13" pos:end="3215:22">case <expr pos:start="3215:18" pos:end="3215:21"><literal type="number" pos:start="3215:18" pos:end="3215:21">0x09</literal></expr>:</case> <comment type="block" pos:start="3215:24" pos:end="3215:38">/* fxchg sti */</comment>

            <case pos:start="3217:13" pos:end="3217:22">case <expr pos:start="3217:18" pos:end="3217:21"><literal type="number" pos:start="3217:18" pos:end="3217:21">0x29</literal></expr>:</case> <comment type="block" pos:start="3217:24" pos:end="3217:56">/* fxchg4 sti, undocumented op */</comment>

            <case pos:start="3219:13" pos:end="3219:22">case <expr pos:start="3219:18" pos:end="3219:21"><literal type="number" pos:start="3219:18" pos:end="3219:21">0x39</literal></expr>:</case> <comment type="block" pos:start="3219:24" pos:end="3219:56">/* fxchg7 sti, undocumented op */</comment>

                <expr_stmt pos:start="3221:17" pos:end="3221:72"><expr pos:start="3221:17" pos:end="3221:71"><call pos:start="3221:17" pos:end="3221:71"><name pos:start="3221:17" pos:end="3221:40">gen_helper_fxchg_ST0_STN</name><argument_list pos:start="3221:41" pos:end="3221:71">(<argument pos:start="3221:42" pos:end="3221:48"><expr pos:start="3221:42" pos:end="3221:48"><name pos:start="3221:42" pos:end="3221:48">cpu_env</name></expr></argument>, <argument pos:start="3221:51" pos:end="3221:70"><expr pos:start="3221:51" pos:end="3221:70"><call pos:start="3221:51" pos:end="3221:70"><name pos:start="3221:51" pos:end="3221:63">tcg_const_i32</name><argument_list pos:start="3221:64" pos:end="3221:70">(<argument pos:start="3221:65" pos:end="3221:69"><expr pos:start="3221:65" pos:end="3221:69"><name pos:start="3221:65" pos:end="3221:69">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3223:17" pos:end="3223:22">break;</break>

            <case pos:start="3225:13" pos:end="3225:22">case <expr pos:start="3225:18" pos:end="3225:21"><literal type="number" pos:start="3225:18" pos:end="3225:21">0x0a</literal></expr>:</case> <comment type="block" pos:start="3225:24" pos:end="3225:37">/* grp d9/2 */</comment>

                <switch pos:start="3227:17" pos:end="3247:17">switch<condition pos:start="3227:23" pos:end="3227:26">(<expr pos:start="3227:24" pos:end="3227:25"><name pos:start="3227:24" pos:end="3227:25">rm</name></expr>)</condition> <block pos:start="3227:28" pos:end="3247:17">{<block_content pos:start="3229:17" pos:end="3245:36">

                <case pos:start="3229:17" pos:end="3229:23">case <expr pos:start="3229:22" pos:end="3229:22"><literal type="number" pos:start="3229:22" pos:end="3229:22">0</literal></expr>:</case> <comment type="block" pos:start="3229:25" pos:end="3229:34">/* fnop */</comment>

                    <comment type="block" pos:start="3231:21" pos:end="3231:62">/* check exceptions (FreeBSD FPU probe) */</comment>

                    <if_stmt pos:start="3233:21" pos:end="3235:51"><if pos:start="3233:21" pos:end="3235:51">if <condition pos:start="3233:24" pos:end="3233:50">(<expr pos:start="3233:25" pos:end="3233:49"><name pos:start="3233:25" pos:end="3233:32"><name pos:start="3233:25" pos:end="3233:25">s</name><operator pos:start="3233:26" pos:end="3233:27">-&gt;</operator><name pos:start="3233:28" pos:end="3233:32">cc_op</name></name> <operator pos:start="3233:34" pos:end="3233:35">!=</operator> <name pos:start="3233:37" pos:end="3233:49">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3235:25" pos:end="3235:51"><block_content pos:start="3235:25" pos:end="3235:51">

                        <expr_stmt pos:start="3235:25" pos:end="3235:51"><expr pos:start="3235:25" pos:end="3235:50"><call pos:start="3235:25" pos:end="3235:50"><name pos:start="3235:25" pos:end="3235:40">gen_op_set_cc_op</name><argument_list pos:start="3235:41" pos:end="3235:50">(<argument pos:start="3235:42" pos:end="3235:49"><expr pos:start="3235:42" pos:end="3235:49"><name pos:start="3235:42" pos:end="3235:49"><name pos:start="3235:42" pos:end="3235:42">s</name><operator pos:start="3235:43" pos:end="3235:44">-&gt;</operator><name pos:start="3235:45" pos:end="3235:49">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="3237:21" pos:end="3237:54"><expr pos:start="3237:21" pos:end="3237:53"><call pos:start="3237:21" pos:end="3237:53"><name pos:start="3237:21" pos:end="3237:30">gen_jmp_im</name><argument_list pos:start="3237:31" pos:end="3237:53">(<argument pos:start="3237:32" pos:end="3237:52"><expr pos:start="3237:32" pos:end="3237:52"><name pos:start="3237:32" pos:end="3237:39">pc_start</name> <operator pos:start="3237:41" pos:end="3237:41">-</operator> <name pos:start="3237:43" pos:end="3237:52"><name pos:start="3237:43" pos:end="3237:43">s</name><operator pos:start="3237:44" pos:end="3237:45">-&gt;</operator><name pos:start="3237:46" pos:end="3237:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3239:21" pos:end="3239:46"><expr pos:start="3239:21" pos:end="3239:45"><call pos:start="3239:21" pos:end="3239:45"><name pos:start="3239:21" pos:end="3239:36">gen_helper_fwait</name><argument_list pos:start="3239:37" pos:end="3239:45">(<argument pos:start="3239:38" pos:end="3239:44"><expr pos:start="3239:38" pos:end="3239:44"><name pos:start="3239:38" pos:end="3239:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3241:21" pos:end="3241:26">break;</break>

                <default pos:start="3243:17" pos:end="3243:24">default:</default>

                    <goto pos:start="3245:21" pos:end="3245:36">goto <name pos:start="3245:26" pos:end="3245:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="3249:17" pos:end="3249:22">break;</break>

            <case pos:start="3251:13" pos:end="3251:22">case <expr pos:start="3251:18" pos:end="3251:21"><literal type="number" pos:start="3251:18" pos:end="3251:21">0x0c</literal></expr>:</case> <comment type="block" pos:start="3251:24" pos:end="3251:37">/* grp d9/4 */</comment>

                <switch pos:start="3253:17" pos:end="3285:17">switch<condition pos:start="3253:23" pos:end="3253:26">(<expr pos:start="3253:24" pos:end="3253:25"><name pos:start="3253:24" pos:end="3253:25">rm</name></expr>)</condition> <block pos:start="3253:28" pos:end="3285:17">{<block_content pos:start="3255:17" pos:end="3283:36">

                <case pos:start="3255:17" pos:end="3255:23">case <expr pos:start="3255:22" pos:end="3255:22"><literal type="number" pos:start="3255:22" pos:end="3255:22">0</literal></expr>:</case> <comment type="block" pos:start="3255:25" pos:end="3255:34">/* fchs */</comment>

                    <expr_stmt pos:start="3257:21" pos:end="3257:49"><expr pos:start="3257:21" pos:end="3257:48"><call pos:start="3257:21" pos:end="3257:48"><name pos:start="3257:21" pos:end="3257:39">gen_helper_fchs_ST0</name><argument_list pos:start="3257:40" pos:end="3257:48">(<argument pos:start="3257:41" pos:end="3257:47"><expr pos:start="3257:41" pos:end="3257:47"><name pos:start="3257:41" pos:end="3257:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3259:21" pos:end="3259:26">break;</break>

                <case pos:start="3261:17" pos:end="3261:23">case <expr pos:start="3261:22" pos:end="3261:22"><literal type="number" pos:start="3261:22" pos:end="3261:22">1</literal></expr>:</case> <comment type="block" pos:start="3261:25" pos:end="3261:34">/* fabs */</comment>

                    <expr_stmt pos:start="3263:21" pos:end="3263:49"><expr pos:start="3263:21" pos:end="3263:48"><call pos:start="3263:21" pos:end="3263:48"><name pos:start="3263:21" pos:end="3263:39">gen_helper_fabs_ST0</name><argument_list pos:start="3263:40" pos:end="3263:48">(<argument pos:start="3263:41" pos:end="3263:47"><expr pos:start="3263:41" pos:end="3263:47"><name pos:start="3263:41" pos:end="3263:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3265:21" pos:end="3265:26">break;</break>

                <case pos:start="3267:17" pos:end="3267:23">case <expr pos:start="3267:22" pos:end="3267:22"><literal type="number" pos:start="3267:22" pos:end="3267:22">4</literal></expr>:</case> <comment type="block" pos:start="3267:25" pos:end="3267:34">/* ftst */</comment>

                    <expr_stmt pos:start="3269:21" pos:end="3269:49"><expr pos:start="3269:21" pos:end="3269:48"><call pos:start="3269:21" pos:end="3269:48"><name pos:start="3269:21" pos:end="3269:39">gen_helper_fldz_FT0</name><argument_list pos:start="3269:40" pos:end="3269:48">(<argument pos:start="3269:41" pos:end="3269:47"><expr pos:start="3269:41" pos:end="3269:47"><name pos:start="3269:41" pos:end="3269:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3271:21" pos:end="3271:53"><expr pos:start="3271:21" pos:end="3271:52"><call pos:start="3271:21" pos:end="3271:52"><name pos:start="3271:21" pos:end="3271:43">gen_helper_fcom_ST0_FT0</name><argument_list pos:start="3271:44" pos:end="3271:52">(<argument pos:start="3271:45" pos:end="3271:51"><expr pos:start="3271:45" pos:end="3271:51"><name pos:start="3271:45" pos:end="3271:51">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3273:21" pos:end="3273:26">break;</break>

                <case pos:start="3275:17" pos:end="3275:23">case <expr pos:start="3275:22" pos:end="3275:22"><literal type="number" pos:start="3275:22" pos:end="3275:22">5</literal></expr>:</case> <comment type="block" pos:start="3275:25" pos:end="3275:34">/* fxam */</comment>

                    <expr_stmt pos:start="3277:21" pos:end="3277:49"><expr pos:start="3277:21" pos:end="3277:48"><call pos:start="3277:21" pos:end="3277:48"><name pos:start="3277:21" pos:end="3277:39">gen_helper_fxam_ST0</name><argument_list pos:start="3277:40" pos:end="3277:48">(<argument pos:start="3277:41" pos:end="3277:47"><expr pos:start="3277:41" pos:end="3277:47"><name pos:start="3277:41" pos:end="3277:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3279:21" pos:end="3279:26">break;</break>

                <default pos:start="3281:17" pos:end="3281:24">default:</default>

                    <goto pos:start="3283:21" pos:end="3283:36">goto <name pos:start="3283:26" pos:end="3283:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="3287:17" pos:end="3287:22">break;</break>

            <case pos:start="3289:13" pos:end="3289:22">case <expr pos:start="3289:18" pos:end="3289:21"><literal type="number" pos:start="3289:18" pos:end="3289:21">0x0d</literal></expr>:</case> <comment type="block" pos:start="3289:24" pos:end="3289:37">/* grp d9/5 */</comment>

                <block pos:start="3291:17" pos:end="3357:17">{<block_content pos:start="3293:21" pos:end="3355:21">

                    <switch pos:start="3293:21" pos:end="3355:21">switch<condition pos:start="3293:27" pos:end="3293:30">(<expr pos:start="3293:28" pos:end="3293:29"><name pos:start="3293:28" pos:end="3293:29">rm</name></expr>)</condition> <block pos:start="3293:32" pos:end="3355:21">{<block_content pos:start="3295:21" pos:end="3353:40">

                    <case pos:start="3295:21" pos:end="3295:27">case <expr pos:start="3295:26" pos:end="3295:26"><literal type="number" pos:start="3295:26" pos:end="3295:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="3297:25" pos:end="3297:50"><expr pos:start="3297:25" pos:end="3297:49"><call pos:start="3297:25" pos:end="3297:49"><name pos:start="3297:25" pos:end="3297:40">gen_helper_fpush</name><argument_list pos:start="3297:41" pos:end="3297:49">(<argument pos:start="3297:42" pos:end="3297:48"><expr pos:start="3297:42" pos:end="3297:48"><name pos:start="3297:42" pos:end="3297:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3299:25" pos:end="3299:53"><expr pos:start="3299:25" pos:end="3299:52"><call pos:start="3299:25" pos:end="3299:52"><name pos:start="3299:25" pos:end="3299:43">gen_helper_fld1_ST0</name><argument_list pos:start="3299:44" pos:end="3299:52">(<argument pos:start="3299:45" pos:end="3299:51"><expr pos:start="3299:45" pos:end="3299:51"><name pos:start="3299:45" pos:end="3299:51">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3301:25" pos:end="3301:30">break;</break>

                    <case pos:start="3303:21" pos:end="3303:27">case <expr pos:start="3303:26" pos:end="3303:26"><literal type="number" pos:start="3303:26" pos:end="3303:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="3305:25" pos:end="3305:50"><expr pos:start="3305:25" pos:end="3305:49"><call pos:start="3305:25" pos:end="3305:49"><name pos:start="3305:25" pos:end="3305:40">gen_helper_fpush</name><argument_list pos:start="3305:41" pos:end="3305:49">(<argument pos:start="3305:42" pos:end="3305:48"><expr pos:start="3305:42" pos:end="3305:48"><name pos:start="3305:42" pos:end="3305:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3307:25" pos:end="3307:55"><expr pos:start="3307:25" pos:end="3307:54"><call pos:start="3307:25" pos:end="3307:54"><name pos:start="3307:25" pos:end="3307:45">gen_helper_fldl2t_ST0</name><argument_list pos:start="3307:46" pos:end="3307:54">(<argument pos:start="3307:47" pos:end="3307:53"><expr pos:start="3307:47" pos:end="3307:53"><name pos:start="3307:47" pos:end="3307:53">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3309:25" pos:end="3309:30">break;</break>

                    <case pos:start="3311:21" pos:end="3311:27">case <expr pos:start="3311:26" pos:end="3311:26"><literal type="number" pos:start="3311:26" pos:end="3311:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="3313:25" pos:end="3313:50"><expr pos:start="3313:25" pos:end="3313:49"><call pos:start="3313:25" pos:end="3313:49"><name pos:start="3313:25" pos:end="3313:40">gen_helper_fpush</name><argument_list pos:start="3313:41" pos:end="3313:49">(<argument pos:start="3313:42" pos:end="3313:48"><expr pos:start="3313:42" pos:end="3313:48"><name pos:start="3313:42" pos:end="3313:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3315:25" pos:end="3315:55"><expr pos:start="3315:25" pos:end="3315:54"><call pos:start="3315:25" pos:end="3315:54"><name pos:start="3315:25" pos:end="3315:45">gen_helper_fldl2e_ST0</name><argument_list pos:start="3315:46" pos:end="3315:54">(<argument pos:start="3315:47" pos:end="3315:53"><expr pos:start="3315:47" pos:end="3315:53"><name pos:start="3315:47" pos:end="3315:53">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3317:25" pos:end="3317:30">break;</break>

                    <case pos:start="3319:21" pos:end="3319:27">case <expr pos:start="3319:26" pos:end="3319:26"><literal type="number" pos:start="3319:26" pos:end="3319:26">3</literal></expr>:</case>

                        <expr_stmt pos:start="3321:25" pos:end="3321:50"><expr pos:start="3321:25" pos:end="3321:49"><call pos:start="3321:25" pos:end="3321:49"><name pos:start="3321:25" pos:end="3321:40">gen_helper_fpush</name><argument_list pos:start="3321:41" pos:end="3321:49">(<argument pos:start="3321:42" pos:end="3321:48"><expr pos:start="3321:42" pos:end="3321:48"><name pos:start="3321:42" pos:end="3321:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3323:25" pos:end="3323:54"><expr pos:start="3323:25" pos:end="3323:53"><call pos:start="3323:25" pos:end="3323:53"><name pos:start="3323:25" pos:end="3323:44">gen_helper_fldpi_ST0</name><argument_list pos:start="3323:45" pos:end="3323:53">(<argument pos:start="3323:46" pos:end="3323:52"><expr pos:start="3323:46" pos:end="3323:52"><name pos:start="3323:46" pos:end="3323:52">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3325:25" pos:end="3325:30">break;</break>

                    <case pos:start="3327:21" pos:end="3327:27">case <expr pos:start="3327:26" pos:end="3327:26"><literal type="number" pos:start="3327:26" pos:end="3327:26">4</literal></expr>:</case>

                        <expr_stmt pos:start="3329:25" pos:end="3329:50"><expr pos:start="3329:25" pos:end="3329:49"><call pos:start="3329:25" pos:end="3329:49"><name pos:start="3329:25" pos:end="3329:40">gen_helper_fpush</name><argument_list pos:start="3329:41" pos:end="3329:49">(<argument pos:start="3329:42" pos:end="3329:48"><expr pos:start="3329:42" pos:end="3329:48"><name pos:start="3329:42" pos:end="3329:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3331:25" pos:end="3331:55"><expr pos:start="3331:25" pos:end="3331:54"><call pos:start="3331:25" pos:end="3331:54"><name pos:start="3331:25" pos:end="3331:45">gen_helper_fldlg2_ST0</name><argument_list pos:start="3331:46" pos:end="3331:54">(<argument pos:start="3331:47" pos:end="3331:53"><expr pos:start="3331:47" pos:end="3331:53"><name pos:start="3331:47" pos:end="3331:53">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3333:25" pos:end="3333:30">break;</break>

                    <case pos:start="3335:21" pos:end="3335:27">case <expr pos:start="3335:26" pos:end="3335:26"><literal type="number" pos:start="3335:26" pos:end="3335:26">5</literal></expr>:</case>

                        <expr_stmt pos:start="3337:25" pos:end="3337:50"><expr pos:start="3337:25" pos:end="3337:49"><call pos:start="3337:25" pos:end="3337:49"><name pos:start="3337:25" pos:end="3337:40">gen_helper_fpush</name><argument_list pos:start="3337:41" pos:end="3337:49">(<argument pos:start="3337:42" pos:end="3337:48"><expr pos:start="3337:42" pos:end="3337:48"><name pos:start="3337:42" pos:end="3337:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3339:25" pos:end="3339:55"><expr pos:start="3339:25" pos:end="3339:54"><call pos:start="3339:25" pos:end="3339:54"><name pos:start="3339:25" pos:end="3339:45">gen_helper_fldln2_ST0</name><argument_list pos:start="3339:46" pos:end="3339:54">(<argument pos:start="3339:47" pos:end="3339:53"><expr pos:start="3339:47" pos:end="3339:53"><name pos:start="3339:47" pos:end="3339:53">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3341:25" pos:end="3341:30">break;</break>

                    <case pos:start="3343:21" pos:end="3343:27">case <expr pos:start="3343:26" pos:end="3343:26"><literal type="number" pos:start="3343:26" pos:end="3343:26">6</literal></expr>:</case>

                        <expr_stmt pos:start="3345:25" pos:end="3345:50"><expr pos:start="3345:25" pos:end="3345:49"><call pos:start="3345:25" pos:end="3345:49"><name pos:start="3345:25" pos:end="3345:40">gen_helper_fpush</name><argument_list pos:start="3345:41" pos:end="3345:49">(<argument pos:start="3345:42" pos:end="3345:48"><expr pos:start="3345:42" pos:end="3345:48"><name pos:start="3345:42" pos:end="3345:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3347:25" pos:end="3347:53"><expr pos:start="3347:25" pos:end="3347:52"><call pos:start="3347:25" pos:end="3347:52"><name pos:start="3347:25" pos:end="3347:43">gen_helper_fldz_ST0</name><argument_list pos:start="3347:44" pos:end="3347:52">(<argument pos:start="3347:45" pos:end="3347:51"><expr pos:start="3347:45" pos:end="3347:51"><name pos:start="3347:45" pos:end="3347:51">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3349:25" pos:end="3349:30">break;</break>

                    <default pos:start="3351:21" pos:end="3351:28">default:</default>

                        <goto pos:start="3353:25" pos:end="3353:40">goto <name pos:start="3353:30" pos:end="3353:39">illegal_op</name>;</goto>

                    </block_content>}</block></switch>

                </block_content>}</block>

                <break pos:start="3359:17" pos:end="3359:22">break;</break>

            <case pos:start="3361:13" pos:end="3361:22">case <expr pos:start="3361:18" pos:end="3361:21"><literal type="number" pos:start="3361:18" pos:end="3361:21">0x0e</literal></expr>:</case> <comment type="block" pos:start="3361:24" pos:end="3361:37">/* grp d9/6 */</comment>

                <switch pos:start="3363:17" pos:end="3415:17">switch<condition pos:start="3363:23" pos:end="3363:26">(<expr pos:start="3363:24" pos:end="3363:25"><name pos:start="3363:24" pos:end="3363:25">rm</name></expr>)</condition> <block pos:start="3363:28" pos:end="3415:17">{<block_content pos:start="3365:17" pos:end="3413:26">

                <case pos:start="3365:17" pos:end="3365:23">case <expr pos:start="3365:22" pos:end="3365:22"><literal type="number" pos:start="3365:22" pos:end="3365:22">0</literal></expr>:</case> <comment type="block" pos:start="3365:25" pos:end="3365:35">/* f2xm1 */</comment>

                    <expr_stmt pos:start="3367:21" pos:end="3367:46"><expr pos:start="3367:21" pos:end="3367:45"><call pos:start="3367:21" pos:end="3367:45"><name pos:start="3367:21" pos:end="3367:36">gen_helper_f2xm1</name><argument_list pos:start="3367:37" pos:end="3367:45">(<argument pos:start="3367:38" pos:end="3367:44"><expr pos:start="3367:38" pos:end="3367:44"><name pos:start="3367:38" pos:end="3367:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3369:21" pos:end="3369:26">break;</break>

                <case pos:start="3371:17" pos:end="3371:23">case <expr pos:start="3371:22" pos:end="3371:22"><literal type="number" pos:start="3371:22" pos:end="3371:22">1</literal></expr>:</case> <comment type="block" pos:start="3371:25" pos:end="3371:35">/* fyl2x */</comment>

                    <expr_stmt pos:start="3373:21" pos:end="3373:46"><expr pos:start="3373:21" pos:end="3373:45"><call pos:start="3373:21" pos:end="3373:45"><name pos:start="3373:21" pos:end="3373:36">gen_helper_fyl2x</name><argument_list pos:start="3373:37" pos:end="3373:45">(<argument pos:start="3373:38" pos:end="3373:44"><expr pos:start="3373:38" pos:end="3373:44"><name pos:start="3373:38" pos:end="3373:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3375:21" pos:end="3375:26">break;</break>

                <case pos:start="3377:17" pos:end="3377:23">case <expr pos:start="3377:22" pos:end="3377:22"><literal type="number" pos:start="3377:22" pos:end="3377:22">2</literal></expr>:</case> <comment type="block" pos:start="3377:25" pos:end="3377:35">/* fptan */</comment>

                    <expr_stmt pos:start="3379:21" pos:end="3379:46"><expr pos:start="3379:21" pos:end="3379:45"><call pos:start="3379:21" pos:end="3379:45"><name pos:start="3379:21" pos:end="3379:36">gen_helper_fptan</name><argument_list pos:start="3379:37" pos:end="3379:45">(<argument pos:start="3379:38" pos:end="3379:44"><expr pos:start="3379:38" pos:end="3379:44"><name pos:start="3379:38" pos:end="3379:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3381:21" pos:end="3381:26">break;</break>

                <case pos:start="3383:17" pos:end="3383:23">case <expr pos:start="3383:22" pos:end="3383:22"><literal type="number" pos:start="3383:22" pos:end="3383:22">3</literal></expr>:</case> <comment type="block" pos:start="3383:25" pos:end="3383:36">/* fpatan */</comment>

                    <expr_stmt pos:start="3385:21" pos:end="3385:47"><expr pos:start="3385:21" pos:end="3385:46"><call pos:start="3385:21" pos:end="3385:46"><name pos:start="3385:21" pos:end="3385:37">gen_helper_fpatan</name><argument_list pos:start="3385:38" pos:end="3385:46">(<argument pos:start="3385:39" pos:end="3385:45"><expr pos:start="3385:39" pos:end="3385:45"><name pos:start="3385:39" pos:end="3385:45">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3387:21" pos:end="3387:26">break;</break>

                <case pos:start="3389:17" pos:end="3389:23">case <expr pos:start="3389:22" pos:end="3389:22"><literal type="number" pos:start="3389:22" pos:end="3389:22">4</literal></expr>:</case> <comment type="block" pos:start="3389:25" pos:end="3389:37">/* fxtract */</comment>

                    <expr_stmt pos:start="3391:21" pos:end="3391:48"><expr pos:start="3391:21" pos:end="3391:47"><call pos:start="3391:21" pos:end="3391:47"><name pos:start="3391:21" pos:end="3391:38">gen_helper_fxtract</name><argument_list pos:start="3391:39" pos:end="3391:47">(<argument pos:start="3391:40" pos:end="3391:46"><expr pos:start="3391:40" pos:end="3391:46"><name pos:start="3391:40" pos:end="3391:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3393:21" pos:end="3393:26">break;</break>

                <case pos:start="3395:17" pos:end="3395:23">case <expr pos:start="3395:22" pos:end="3395:22"><literal type="number" pos:start="3395:22" pos:end="3395:22">5</literal></expr>:</case> <comment type="block" pos:start="3395:25" pos:end="3395:36">/* fprem1 */</comment>

                    <expr_stmt pos:start="3397:21" pos:end="3397:47"><expr pos:start="3397:21" pos:end="3397:46"><call pos:start="3397:21" pos:end="3397:46"><name pos:start="3397:21" pos:end="3397:37">gen_helper_fprem1</name><argument_list pos:start="3397:38" pos:end="3397:46">(<argument pos:start="3397:39" pos:end="3397:45"><expr pos:start="3397:39" pos:end="3397:45"><name pos:start="3397:39" pos:end="3397:45">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3399:21" pos:end="3399:26">break;</break>

                <case pos:start="3401:17" pos:end="3401:23">case <expr pos:start="3401:22" pos:end="3401:22"><literal type="number" pos:start="3401:22" pos:end="3401:22">6</literal></expr>:</case> <comment type="block" pos:start="3401:25" pos:end="3401:37">/* fdecstp */</comment>

                    <expr_stmt pos:start="3403:21" pos:end="3403:48"><expr pos:start="3403:21" pos:end="3403:47"><call pos:start="3403:21" pos:end="3403:47"><name pos:start="3403:21" pos:end="3403:38">gen_helper_fdecstp</name><argument_list pos:start="3403:39" pos:end="3403:47">(<argument pos:start="3403:40" pos:end="3403:46"><expr pos:start="3403:40" pos:end="3403:46"><name pos:start="3403:40" pos:end="3403:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3405:21" pos:end="3405:26">break;</break>

                <default pos:start="3407:17" pos:end="3407:24">default:</default>

                <case pos:start="3409:17" pos:end="3409:23">case <expr pos:start="3409:22" pos:end="3409:22"><literal type="number" pos:start="3409:22" pos:end="3409:22">7</literal></expr>:</case> <comment type="block" pos:start="3409:25" pos:end="3409:37">/* fincstp */</comment>

                    <expr_stmt pos:start="3411:21" pos:end="3411:48"><expr pos:start="3411:21" pos:end="3411:47"><call pos:start="3411:21" pos:end="3411:47"><name pos:start="3411:21" pos:end="3411:38">gen_helper_fincstp</name><argument_list pos:start="3411:39" pos:end="3411:47">(<argument pos:start="3411:40" pos:end="3411:46"><expr pos:start="3411:40" pos:end="3411:46"><name pos:start="3411:40" pos:end="3411:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3413:21" pos:end="3413:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="3417:17" pos:end="3417:22">break;</break>

            <case pos:start="3419:13" pos:end="3419:22">case <expr pos:start="3419:18" pos:end="3419:21"><literal type="number" pos:start="3419:18" pos:end="3419:21">0x0f</literal></expr>:</case> <comment type="block" pos:start="3419:24" pos:end="3419:37">/* grp d9/7 */</comment>

                <switch pos:start="3421:17" pos:end="3473:17">switch<condition pos:start="3421:23" pos:end="3421:26">(<expr pos:start="3421:24" pos:end="3421:25"><name pos:start="3421:24" pos:end="3421:25">rm</name></expr>)</condition> <block pos:start="3421:28" pos:end="3473:17">{<block_content pos:start="3423:17" pos:end="3471:26">

                <case pos:start="3423:17" pos:end="3423:23">case <expr pos:start="3423:22" pos:end="3423:22"><literal type="number" pos:start="3423:22" pos:end="3423:22">0</literal></expr>:</case> <comment type="block" pos:start="3423:25" pos:end="3423:35">/* fprem */</comment>

                    <expr_stmt pos:start="3425:21" pos:end="3425:46"><expr pos:start="3425:21" pos:end="3425:45"><call pos:start="3425:21" pos:end="3425:45"><name pos:start="3425:21" pos:end="3425:36">gen_helper_fprem</name><argument_list pos:start="3425:37" pos:end="3425:45">(<argument pos:start="3425:38" pos:end="3425:44"><expr pos:start="3425:38" pos:end="3425:44"><name pos:start="3425:38" pos:end="3425:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3427:21" pos:end="3427:26">break;</break>

                <case pos:start="3429:17" pos:end="3429:23">case <expr pos:start="3429:22" pos:end="3429:22"><literal type="number" pos:start="3429:22" pos:end="3429:22">1</literal></expr>:</case> <comment type="block" pos:start="3429:25" pos:end="3429:37">/* fyl2xp1 */</comment>

                    <expr_stmt pos:start="3431:21" pos:end="3431:48"><expr pos:start="3431:21" pos:end="3431:47"><call pos:start="3431:21" pos:end="3431:47"><name pos:start="3431:21" pos:end="3431:38">gen_helper_fyl2xp1</name><argument_list pos:start="3431:39" pos:end="3431:47">(<argument pos:start="3431:40" pos:end="3431:46"><expr pos:start="3431:40" pos:end="3431:46"><name pos:start="3431:40" pos:end="3431:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3433:21" pos:end="3433:26">break;</break>

                <case pos:start="3435:17" pos:end="3435:23">case <expr pos:start="3435:22" pos:end="3435:22"><literal type="number" pos:start="3435:22" pos:end="3435:22">2</literal></expr>:</case> <comment type="block" pos:start="3435:25" pos:end="3435:35">/* fsqrt */</comment>

                    <expr_stmt pos:start="3437:21" pos:end="3437:46"><expr pos:start="3437:21" pos:end="3437:45"><call pos:start="3437:21" pos:end="3437:45"><name pos:start="3437:21" pos:end="3437:36">gen_helper_fsqrt</name><argument_list pos:start="3437:37" pos:end="3437:45">(<argument pos:start="3437:38" pos:end="3437:44"><expr pos:start="3437:38" pos:end="3437:44"><name pos:start="3437:38" pos:end="3437:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3439:21" pos:end="3439:26">break;</break>

                <case pos:start="3441:17" pos:end="3441:23">case <expr pos:start="3441:22" pos:end="3441:22"><literal type="number" pos:start="3441:22" pos:end="3441:22">3</literal></expr>:</case> <comment type="block" pos:start="3441:25" pos:end="3441:37">/* fsincos */</comment>

                    <expr_stmt pos:start="3443:21" pos:end="3443:48"><expr pos:start="3443:21" pos:end="3443:47"><call pos:start="3443:21" pos:end="3443:47"><name pos:start="3443:21" pos:end="3443:38">gen_helper_fsincos</name><argument_list pos:start="3443:39" pos:end="3443:47">(<argument pos:start="3443:40" pos:end="3443:46"><expr pos:start="3443:40" pos:end="3443:46"><name pos:start="3443:40" pos:end="3443:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3445:21" pos:end="3445:26">break;</break>

                <case pos:start="3447:17" pos:end="3447:23">case <expr pos:start="3447:22" pos:end="3447:22"><literal type="number" pos:start="3447:22" pos:end="3447:22">5</literal></expr>:</case> <comment type="block" pos:start="3447:25" pos:end="3447:36">/* fscale */</comment>

                    <expr_stmt pos:start="3449:21" pos:end="3449:47"><expr pos:start="3449:21" pos:end="3449:46"><call pos:start="3449:21" pos:end="3449:46"><name pos:start="3449:21" pos:end="3449:37">gen_helper_fscale</name><argument_list pos:start="3449:38" pos:end="3449:46">(<argument pos:start="3449:39" pos:end="3449:45"><expr pos:start="3449:39" pos:end="3449:45"><name pos:start="3449:39" pos:end="3449:45">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3451:21" pos:end="3451:26">break;</break>

                <case pos:start="3453:17" pos:end="3453:23">case <expr pos:start="3453:22" pos:end="3453:22"><literal type="number" pos:start="3453:22" pos:end="3453:22">4</literal></expr>:</case> <comment type="block" pos:start="3453:25" pos:end="3453:37">/* frndint */</comment>

                    <expr_stmt pos:start="3455:21" pos:end="3455:48"><expr pos:start="3455:21" pos:end="3455:47"><call pos:start="3455:21" pos:end="3455:47"><name pos:start="3455:21" pos:end="3455:38">gen_helper_frndint</name><argument_list pos:start="3455:39" pos:end="3455:47">(<argument pos:start="3455:40" pos:end="3455:46"><expr pos:start="3455:40" pos:end="3455:46"><name pos:start="3455:40" pos:end="3455:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3457:21" pos:end="3457:26">break;</break>

                <case pos:start="3459:17" pos:end="3459:23">case <expr pos:start="3459:22" pos:end="3459:22"><literal type="number" pos:start="3459:22" pos:end="3459:22">6</literal></expr>:</case> <comment type="block" pos:start="3459:25" pos:end="3459:34">/* fsin */</comment>

                    <expr_stmt pos:start="3461:21" pos:end="3461:45"><expr pos:start="3461:21" pos:end="3461:44"><call pos:start="3461:21" pos:end="3461:44"><name pos:start="3461:21" pos:end="3461:35">gen_helper_fsin</name><argument_list pos:start="3461:36" pos:end="3461:44">(<argument pos:start="3461:37" pos:end="3461:43"><expr pos:start="3461:37" pos:end="3461:43"><name pos:start="3461:37" pos:end="3461:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3463:21" pos:end="3463:26">break;</break>

                <default pos:start="3465:17" pos:end="3465:24">default:</default>

                <case pos:start="3467:17" pos:end="3467:23">case <expr pos:start="3467:22" pos:end="3467:22"><literal type="number" pos:start="3467:22" pos:end="3467:22">7</literal></expr>:</case> <comment type="block" pos:start="3467:25" pos:end="3467:34">/* fcos */</comment>

                    <expr_stmt pos:start="3469:21" pos:end="3469:45"><expr pos:start="3469:21" pos:end="3469:44"><call pos:start="3469:21" pos:end="3469:44"><name pos:start="3469:21" pos:end="3469:35">gen_helper_fcos</name><argument_list pos:start="3469:36" pos:end="3469:44">(<argument pos:start="3469:37" pos:end="3469:43"><expr pos:start="3469:37" pos:end="3469:43"><name pos:start="3469:37" pos:end="3469:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3471:21" pos:end="3471:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="3475:17" pos:end="3475:22">break;</break>

            <case pos:start="3477:13" pos:end="3477:22">case <expr pos:start="3477:18" pos:end="3477:21"><literal type="number" pos:start="3477:18" pos:end="3477:21">0x00</literal></expr>:</case> <case pos:start="3477:24" pos:end="3477:33">case <expr pos:start="3477:29" pos:end="3477:32"><literal type="number" pos:start="3477:29" pos:end="3477:32">0x01</literal></expr>:</case> <case pos:start="3477:35" pos:end="3477:53">case <expr pos:start="3477:40" pos:end="3477:52"><literal type="number" pos:start="3477:40" pos:end="3477:43">0x04</literal> <operator pos:start="3477:45" pos:end="3477:47">...</operator> <literal type="number" pos:start="3477:49" pos:end="3477:52">0x07</literal></expr>:</case> <comment type="block" pos:start="3477:55" pos:end="3477:72">/* fxxx st, sti */</comment>

            <case pos:start="3479:13" pos:end="3479:22">case <expr pos:start="3479:18" pos:end="3479:21"><literal type="number" pos:start="3479:18" pos:end="3479:21">0x20</literal></expr>:</case> <case pos:start="3479:24" pos:end="3479:33">case <expr pos:start="3479:29" pos:end="3479:32"><literal type="number" pos:start="3479:29" pos:end="3479:32">0x21</literal></expr>:</case> <case pos:start="3479:35" pos:end="3479:53">case <expr pos:start="3479:40" pos:end="3479:52"><literal type="number" pos:start="3479:40" pos:end="3479:43">0x24</literal> <operator pos:start="3479:45" pos:end="3479:47">...</operator> <literal type="number" pos:start="3479:49" pos:end="3479:52">0x27</literal></expr>:</case> <comment type="block" pos:start="3479:55" pos:end="3479:72">/* fxxx sti, st */</comment>

            <case pos:start="3481:13" pos:end="3481:22">case <expr pos:start="3481:18" pos:end="3481:21"><literal type="number" pos:start="3481:18" pos:end="3481:21">0x30</literal></expr>:</case> <case pos:start="3481:24" pos:end="3481:33">case <expr pos:start="3481:29" pos:end="3481:32"><literal type="number" pos:start="3481:29" pos:end="3481:32">0x31</literal></expr>:</case> <case pos:start="3481:35" pos:end="3481:53">case <expr pos:start="3481:40" pos:end="3481:52"><literal type="number" pos:start="3481:40" pos:end="3481:43">0x34</literal> <operator pos:start="3481:45" pos:end="3481:47">...</operator> <literal type="number" pos:start="3481:49" pos:end="3481:52">0x37</literal></expr>:</case> <comment type="block" pos:start="3481:55" pos:end="3481:73">/* fxxxp sti, st */</comment>

                <block pos:start="3483:17" pos:end="3507:17">{<block_content pos:start="3485:21" pos:end="3505:21">

                    <decl_stmt pos:start="3485:21" pos:end="3485:28"><decl pos:start="3485:21" pos:end="3485:27"><type pos:start="3485:21" pos:end="3485:23"><name pos:start="3485:21" pos:end="3485:23">int</name></type> <name pos:start="3485:25" pos:end="3485:27">op1</name></decl>;</decl_stmt>



                    <expr_stmt pos:start="3489:21" pos:end="3489:33"><expr pos:start="3489:21" pos:end="3489:32"><name pos:start="3489:21" pos:end="3489:23">op1</name> <operator pos:start="3489:25" pos:end="3489:25">=</operator> <name pos:start="3489:27" pos:end="3489:28">op</name> <operator pos:start="3489:30" pos:end="3489:30">&amp;</operator> <literal type="number" pos:start="3489:32" pos:end="3489:32">7</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="3491:21" pos:end="3505:21"><if pos:start="3491:21" pos:end="3499:21">if <condition pos:start="3491:24" pos:end="3491:35">(<expr pos:start="3491:25" pos:end="3491:34"><name pos:start="3491:25" pos:end="3491:26">op</name> <operator pos:start="3491:28" pos:end="3491:29">&gt;=</operator> <literal type="number" pos:start="3491:31" pos:end="3491:34">0x20</literal></expr>)</condition> <block pos:start="3491:37" pos:end="3499:21">{<block_content pos:start="3493:25" pos:end="3497:53">

                        <expr_stmt pos:start="3493:25" pos:end="3493:64"><expr pos:start="3493:25" pos:end="3493:63"><call pos:start="3493:25" pos:end="3493:63"><name pos:start="3493:25" pos:end="3493:51">gen_helper_fp_arith_STN_ST0</name><argument_list pos:start="3493:52" pos:end="3493:63">(<argument pos:start="3493:53" pos:end="3493:55"><expr pos:start="3493:53" pos:end="3493:55"><name pos:start="3493:53" pos:end="3493:55">op1</name></expr></argument>, <argument pos:start="3493:58" pos:end="3493:62"><expr pos:start="3493:58" pos:end="3493:62"><name pos:start="3493:58" pos:end="3493:62">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="3495:25" pos:end="3497:53"><if pos:start="3495:25" pos:end="3497:53">if <condition pos:start="3495:28" pos:end="3495:39">(<expr pos:start="3495:29" pos:end="3495:38"><name pos:start="3495:29" pos:end="3495:30">op</name> <operator pos:start="3495:32" pos:end="3495:33">&gt;=</operator> <literal type="number" pos:start="3495:35" pos:end="3495:38">0x30</literal></expr>)</condition><block type="pseudo" pos:start="3497:29" pos:end="3497:53"><block_content pos:start="3497:29" pos:end="3497:53">

                            <expr_stmt pos:start="3497:29" pos:end="3497:53"><expr pos:start="3497:29" pos:end="3497:52"><call pos:start="3497:29" pos:end="3497:52"><name pos:start="3497:29" pos:end="3497:43">gen_helper_fpop</name><argument_list pos:start="3497:44" pos:end="3497:52">(<argument pos:start="3497:45" pos:end="3497:51"><expr pos:start="3497:45" pos:end="3497:51"><name pos:start="3497:45" pos:end="3497:51">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    </block_content>}</block></if> <else pos:start="3499:23" pos:end="3505:21">else <block pos:start="3499:28" pos:end="3505:21">{<block_content pos:start="3501:25" pos:end="3503:57">

                        <expr_stmt pos:start="3501:25" pos:end="3501:79"><expr pos:start="3501:25" pos:end="3501:78"><call pos:start="3501:25" pos:end="3501:78"><name pos:start="3501:25" pos:end="3501:47">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3501:48" pos:end="3501:78">(<argument pos:start="3501:49" pos:end="3501:55"><expr pos:start="3501:49" pos:end="3501:55"><name pos:start="3501:49" pos:end="3501:55">cpu_env</name></expr></argument>, <argument pos:start="3501:58" pos:end="3501:77"><expr pos:start="3501:58" pos:end="3501:77"><call pos:start="3501:58" pos:end="3501:77"><name pos:start="3501:58" pos:end="3501:70">tcg_const_i32</name><argument_list pos:start="3501:71" pos:end="3501:77">(<argument pos:start="3501:72" pos:end="3501:76"><expr pos:start="3501:72" pos:end="3501:76"><name pos:start="3501:72" pos:end="3501:76">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3503:25" pos:end="3503:57"><expr pos:start="3503:25" pos:end="3503:56"><call pos:start="3503:25" pos:end="3503:56"><name pos:start="3503:25" pos:end="3503:51">gen_helper_fp_arith_ST0_FT0</name><argument_list pos:start="3503:52" pos:end="3503:56">(<argument pos:start="3503:53" pos:end="3503:55"><expr pos:start="3503:53" pos:end="3503:55"><name pos:start="3503:53" pos:end="3503:55">op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block>

                <break pos:start="3509:17" pos:end="3509:22">break;</break>

            <case pos:start="3511:13" pos:end="3511:22">case <expr pos:start="3511:18" pos:end="3511:21"><literal type="number" pos:start="3511:18" pos:end="3511:21">0x02</literal></expr>:</case> <comment type="block" pos:start="3511:24" pos:end="3511:33">/* fcom */</comment>

            <case pos:start="3513:13" pos:end="3513:22">case <expr pos:start="3513:18" pos:end="3513:21"><literal type="number" pos:start="3513:18" pos:end="3513:21">0x22</literal></expr>:</case> <comment type="block" pos:start="3513:24" pos:end="3513:51">/* fcom2, undocumented op */</comment>

                <expr_stmt pos:start="3515:17" pos:end="3515:71"><expr pos:start="3515:17" pos:end="3515:70"><call pos:start="3515:17" pos:end="3515:70"><name pos:start="3515:17" pos:end="3515:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3515:40" pos:end="3515:70">(<argument pos:start="3515:41" pos:end="3515:47"><expr pos:start="3515:41" pos:end="3515:47"><name pos:start="3515:41" pos:end="3515:47">cpu_env</name></expr></argument>, <argument pos:start="3515:50" pos:end="3515:69"><expr pos:start="3515:50" pos:end="3515:69"><call pos:start="3515:50" pos:end="3515:69"><name pos:start="3515:50" pos:end="3515:62">tcg_const_i32</name><argument_list pos:start="3515:63" pos:end="3515:69">(<argument pos:start="3515:64" pos:end="3515:68"><expr pos:start="3515:64" pos:end="3515:68"><name pos:start="3515:64" pos:end="3515:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3517:17" pos:end="3517:49"><expr pos:start="3517:17" pos:end="3517:48"><call pos:start="3517:17" pos:end="3517:48"><name pos:start="3517:17" pos:end="3517:39">gen_helper_fcom_ST0_FT0</name><argument_list pos:start="3517:40" pos:end="3517:48">(<argument pos:start="3517:41" pos:end="3517:47"><expr pos:start="3517:41" pos:end="3517:47"><name pos:start="3517:41" pos:end="3517:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3519:17" pos:end="3519:22">break;</break>

            <case pos:start="3521:13" pos:end="3521:22">case <expr pos:start="3521:18" pos:end="3521:21"><literal type="number" pos:start="3521:18" pos:end="3521:21">0x03</literal></expr>:</case> <comment type="block" pos:start="3521:24" pos:end="3521:34">/* fcomp */</comment>

            <case pos:start="3523:13" pos:end="3523:22">case <expr pos:start="3523:18" pos:end="3523:21"><literal type="number" pos:start="3523:18" pos:end="3523:21">0x23</literal></expr>:</case> <comment type="block" pos:start="3523:24" pos:end="3523:52">/* fcomp3, undocumented op */</comment>

            <case pos:start="3525:13" pos:end="3525:22">case <expr pos:start="3525:18" pos:end="3525:21"><literal type="number" pos:start="3525:18" pos:end="3525:21">0x32</literal></expr>:</case> <comment type="block" pos:start="3525:24" pos:end="3525:52">/* fcomp5, undocumented op */</comment>

                <expr_stmt pos:start="3527:17" pos:end="3527:71"><expr pos:start="3527:17" pos:end="3527:70"><call pos:start="3527:17" pos:end="3527:70"><name pos:start="3527:17" pos:end="3527:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3527:40" pos:end="3527:70">(<argument pos:start="3527:41" pos:end="3527:47"><expr pos:start="3527:41" pos:end="3527:47"><name pos:start="3527:41" pos:end="3527:47">cpu_env</name></expr></argument>, <argument pos:start="3527:50" pos:end="3527:69"><expr pos:start="3527:50" pos:end="3527:69"><call pos:start="3527:50" pos:end="3527:69"><name pos:start="3527:50" pos:end="3527:62">tcg_const_i32</name><argument_list pos:start="3527:63" pos:end="3527:69">(<argument pos:start="3527:64" pos:end="3527:68"><expr pos:start="3527:64" pos:end="3527:68"><name pos:start="3527:64" pos:end="3527:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3529:17" pos:end="3529:49"><expr pos:start="3529:17" pos:end="3529:48"><call pos:start="3529:17" pos:end="3529:48"><name pos:start="3529:17" pos:end="3529:39">gen_helper_fcom_ST0_FT0</name><argument_list pos:start="3529:40" pos:end="3529:48">(<argument pos:start="3529:41" pos:end="3529:47"><expr pos:start="3529:41" pos:end="3529:47"><name pos:start="3529:41" pos:end="3529:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3531:17" pos:end="3531:41"><expr pos:start="3531:17" pos:end="3531:40"><call pos:start="3531:17" pos:end="3531:40"><name pos:start="3531:17" pos:end="3531:31">gen_helper_fpop</name><argument_list pos:start="3531:32" pos:end="3531:40">(<argument pos:start="3531:33" pos:end="3531:39"><expr pos:start="3531:33" pos:end="3531:39"><name pos:start="3531:33" pos:end="3531:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3533:17" pos:end="3533:22">break;</break>

            <case pos:start="3535:13" pos:end="3535:22">case <expr pos:start="3535:18" pos:end="3535:21"><literal type="number" pos:start="3535:18" pos:end="3535:21">0x15</literal></expr>:</case> <comment type="block" pos:start="3535:24" pos:end="3535:33">/* da/5 */</comment>

                <switch pos:start="3537:17" pos:end="3555:17">switch<condition pos:start="3537:23" pos:end="3537:26">(<expr pos:start="3537:24" pos:end="3537:25"><name pos:start="3537:24" pos:end="3537:25">rm</name></expr>)</condition> <block pos:start="3537:28" pos:end="3555:17">{<block_content pos:start="3539:17" pos:end="3553:36">

                <case pos:start="3539:17" pos:end="3539:23">case <expr pos:start="3539:22" pos:end="3539:22"><literal type="number" pos:start="3539:22" pos:end="3539:22">1</literal></expr>:</case> <comment type="block" pos:start="3539:25" pos:end="3539:37">/* fucompp */</comment>

                    <expr_stmt pos:start="3541:21" pos:end="3541:71"><expr pos:start="3541:21" pos:end="3541:70"><call pos:start="3541:21" pos:end="3541:70"><name pos:start="3541:21" pos:end="3541:43">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3541:44" pos:end="3541:70">(<argument pos:start="3541:45" pos:end="3541:51"><expr pos:start="3541:45" pos:end="3541:51"><name pos:start="3541:45" pos:end="3541:51">cpu_env</name></expr></argument>, <argument pos:start="3541:54" pos:end="3541:69"><expr pos:start="3541:54" pos:end="3541:69"><call pos:start="3541:54" pos:end="3541:69"><name pos:start="3541:54" pos:end="3541:66">tcg_const_i32</name><argument_list pos:start="3541:67" pos:end="3541:69">(<argument pos:start="3541:68" pos:end="3541:68"><expr pos:start="3541:68" pos:end="3541:68"><literal type="number" pos:start="3541:68" pos:end="3541:68">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3543:21" pos:end="3543:54"><expr pos:start="3543:21" pos:end="3543:53"><call pos:start="3543:21" pos:end="3543:53"><name pos:start="3543:21" pos:end="3543:44">gen_helper_fucom_ST0_FT0</name><argument_list pos:start="3543:45" pos:end="3543:53">(<argument pos:start="3543:46" pos:end="3543:52"><expr pos:start="3543:46" pos:end="3543:52"><name pos:start="3543:46" pos:end="3543:52">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3545:21" pos:end="3545:45"><expr pos:start="3545:21" pos:end="3545:44"><call pos:start="3545:21" pos:end="3545:44"><name pos:start="3545:21" pos:end="3545:35">gen_helper_fpop</name><argument_list pos:start="3545:36" pos:end="3545:44">(<argument pos:start="3545:37" pos:end="3545:43"><expr pos:start="3545:37" pos:end="3545:43"><name pos:start="3545:37" pos:end="3545:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3547:21" pos:end="3547:45"><expr pos:start="3547:21" pos:end="3547:44"><call pos:start="3547:21" pos:end="3547:44"><name pos:start="3547:21" pos:end="3547:35">gen_helper_fpop</name><argument_list pos:start="3547:36" pos:end="3547:44">(<argument pos:start="3547:37" pos:end="3547:43"><expr pos:start="3547:37" pos:end="3547:43"><name pos:start="3547:37" pos:end="3547:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3549:21" pos:end="3549:26">break;</break>

                <default pos:start="3551:17" pos:end="3551:24">default:</default>

                    <goto pos:start="3553:21" pos:end="3553:36">goto <name pos:start="3553:26" pos:end="3553:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="3557:17" pos:end="3557:22">break;</break>

            <case pos:start="3559:13" pos:end="3559:22">case <expr pos:start="3559:18" pos:end="3559:21"><literal type="number" pos:start="3559:18" pos:end="3559:21">0x1c</literal></expr>:</case>

                <switch pos:start="3561:17" pos:end="3591:17">switch<condition pos:start="3561:23" pos:end="3561:26">(<expr pos:start="3561:24" pos:end="3561:25"><name pos:start="3561:24" pos:end="3561:25">rm</name></expr>)</condition> <block pos:start="3561:28" pos:end="3591:17">{<block_content pos:start="3563:17" pos:end="3589:36">

                <case pos:start="3563:17" pos:end="3563:23">case <expr pos:start="3563:22" pos:end="3563:22"><literal type="number" pos:start="3563:22" pos:end="3563:22">0</literal></expr>:</case> <comment type="block" pos:start="3563:25" pos:end="3563:63">/* feni (287 only, just do nop here) */</comment>

                    <break pos:start="3565:21" pos:end="3565:26">break;</break>

                <case pos:start="3567:17" pos:end="3567:23">case <expr pos:start="3567:22" pos:end="3567:22"><literal type="number" pos:start="3567:22" pos:end="3567:22">1</literal></expr>:</case> <comment type="block" pos:start="3567:25" pos:end="3567:64">/* fdisi (287 only, just do nop here) */</comment>

                    <break pos:start="3569:21" pos:end="3569:26">break;</break>

                <case pos:start="3571:17" pos:end="3571:23">case <expr pos:start="3571:22" pos:end="3571:22"><literal type="number" pos:start="3571:22" pos:end="3571:22">2</literal></expr>:</case> <comment type="block" pos:start="3571:25" pos:end="3571:35">/* fclex */</comment>

                    <expr_stmt pos:start="3573:21" pos:end="3573:46"><expr pos:start="3573:21" pos:end="3573:45"><call pos:start="3573:21" pos:end="3573:45"><name pos:start="3573:21" pos:end="3573:36">gen_helper_fclex</name><argument_list pos:start="3573:37" pos:end="3573:45">(<argument pos:start="3573:38" pos:end="3573:44"><expr pos:start="3573:38" pos:end="3573:44"><name pos:start="3573:38" pos:end="3573:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3575:21" pos:end="3575:26">break;</break>

                <case pos:start="3577:17" pos:end="3577:23">case <expr pos:start="3577:22" pos:end="3577:22"><literal type="number" pos:start="3577:22" pos:end="3577:22">3</literal></expr>:</case> <comment type="block" pos:start="3577:25" pos:end="3577:36">/* fninit */</comment>

                    <expr_stmt pos:start="3579:21" pos:end="3579:47"><expr pos:start="3579:21" pos:end="3579:46"><call pos:start="3579:21" pos:end="3579:46"><name pos:start="3579:21" pos:end="3579:37">gen_helper_fninit</name><argument_list pos:start="3579:38" pos:end="3579:46">(<argument pos:start="3579:39" pos:end="3579:45"><expr pos:start="3579:39" pos:end="3579:45"><name pos:start="3579:39" pos:end="3579:45">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3581:21" pos:end="3581:26">break;</break>

                <case pos:start="3583:17" pos:end="3583:23">case <expr pos:start="3583:22" pos:end="3583:22"><literal type="number" pos:start="3583:22" pos:end="3583:22">4</literal></expr>:</case> <comment type="block" pos:start="3583:25" pos:end="3583:65">/* fsetpm (287 only, just do nop here) */</comment>

                    <break pos:start="3585:21" pos:end="3585:26">break;</break>

                <default pos:start="3587:17" pos:end="3587:24">default:</default>

                    <goto pos:start="3589:21" pos:end="3589:36">goto <name pos:start="3589:26" pos:end="3589:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="3593:17" pos:end="3593:22">break;</break>

            <case pos:start="3595:13" pos:end="3595:22">case <expr pos:start="3595:18" pos:end="3595:21"><literal type="number" pos:start="3595:18" pos:end="3595:21">0x1d</literal></expr>:</case> <comment type="block" pos:start="3595:24" pos:end="3595:35">/* fucomi */</comment>

                <if_stmt pos:start="3597:17" pos:end="3599:47"><if pos:start="3597:17" pos:end="3599:47">if <condition pos:start="3597:20" pos:end="3597:46">(<expr pos:start="3597:21" pos:end="3597:45"><name pos:start="3597:21" pos:end="3597:28"><name pos:start="3597:21" pos:end="3597:21">s</name><operator pos:start="3597:22" pos:end="3597:23">-&gt;</operator><name pos:start="3597:24" pos:end="3597:28">cc_op</name></name> <operator pos:start="3597:30" pos:end="3597:31">!=</operator> <name pos:start="3597:33" pos:end="3597:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3599:21" pos:end="3599:47"><block_content pos:start="3599:21" pos:end="3599:47">

                    <expr_stmt pos:start="3599:21" pos:end="3599:47"><expr pos:start="3599:21" pos:end="3599:46"><call pos:start="3599:21" pos:end="3599:46"><name pos:start="3599:21" pos:end="3599:36">gen_op_set_cc_op</name><argument_list pos:start="3599:37" pos:end="3599:46">(<argument pos:start="3599:38" pos:end="3599:45"><expr pos:start="3599:38" pos:end="3599:45"><name pos:start="3599:38" pos:end="3599:45"><name pos:start="3599:38" pos:end="3599:38">s</name><operator pos:start="3599:39" pos:end="3599:40">-&gt;</operator><name pos:start="3599:41" pos:end="3599:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3601:17" pos:end="3601:71"><expr pos:start="3601:17" pos:end="3601:70"><call pos:start="3601:17" pos:end="3601:70"><name pos:start="3601:17" pos:end="3601:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3601:40" pos:end="3601:70">(<argument pos:start="3601:41" pos:end="3601:47"><expr pos:start="3601:41" pos:end="3601:47"><name pos:start="3601:41" pos:end="3601:47">cpu_env</name></expr></argument>, <argument pos:start="3601:50" pos:end="3601:69"><expr pos:start="3601:50" pos:end="3601:69"><call pos:start="3601:50" pos:end="3601:69"><name pos:start="3601:50" pos:end="3601:62">tcg_const_i32</name><argument_list pos:start="3601:63" pos:end="3601:69">(<argument pos:start="3601:64" pos:end="3601:68"><expr pos:start="3601:64" pos:end="3601:68"><name pos:start="3601:64" pos:end="3601:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3603:17" pos:end="3603:51"><expr pos:start="3603:17" pos:end="3603:50"><call pos:start="3603:17" pos:end="3603:50"><name pos:start="3603:17" pos:end="3603:41">gen_helper_fucomi_ST0_FT0</name><argument_list pos:start="3603:42" pos:end="3603:50">(<argument pos:start="3603:43" pos:end="3603:49"><expr pos:start="3603:43" pos:end="3603:49"><name pos:start="3603:43" pos:end="3603:49">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3605:17" pos:end="3605:40"><expr pos:start="3605:17" pos:end="3605:39"><name pos:start="3605:17" pos:end="3605:24"><name pos:start="3605:17" pos:end="3605:17">s</name><operator pos:start="3605:18" pos:end="3605:19">-&gt;</operator><name pos:start="3605:20" pos:end="3605:24">cc_op</name></name> <operator pos:start="3605:26" pos:end="3605:26">=</operator> <name pos:start="3605:28" pos:end="3605:39">CC_OP_EFLAGS</name></expr>;</expr_stmt>

                <break pos:start="3607:17" pos:end="3607:22">break;</break>

            <case pos:start="3609:13" pos:end="3609:22">case <expr pos:start="3609:18" pos:end="3609:21"><literal type="number" pos:start="3609:18" pos:end="3609:21">0x1e</literal></expr>:</case> <comment type="block" pos:start="3609:24" pos:end="3609:34">/* fcomi */</comment>

                <if_stmt pos:start="3611:17" pos:end="3613:47"><if pos:start="3611:17" pos:end="3613:47">if <condition pos:start="3611:20" pos:end="3611:46">(<expr pos:start="3611:21" pos:end="3611:45"><name pos:start="3611:21" pos:end="3611:28"><name pos:start="3611:21" pos:end="3611:21">s</name><operator pos:start="3611:22" pos:end="3611:23">-&gt;</operator><name pos:start="3611:24" pos:end="3611:28">cc_op</name></name> <operator pos:start="3611:30" pos:end="3611:31">!=</operator> <name pos:start="3611:33" pos:end="3611:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3613:21" pos:end="3613:47"><block_content pos:start="3613:21" pos:end="3613:47">

                    <expr_stmt pos:start="3613:21" pos:end="3613:47"><expr pos:start="3613:21" pos:end="3613:46"><call pos:start="3613:21" pos:end="3613:46"><name pos:start="3613:21" pos:end="3613:36">gen_op_set_cc_op</name><argument_list pos:start="3613:37" pos:end="3613:46">(<argument pos:start="3613:38" pos:end="3613:45"><expr pos:start="3613:38" pos:end="3613:45"><name pos:start="3613:38" pos:end="3613:45"><name pos:start="3613:38" pos:end="3613:38">s</name><operator pos:start="3613:39" pos:end="3613:40">-&gt;</operator><name pos:start="3613:41" pos:end="3613:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3615:17" pos:end="3615:71"><expr pos:start="3615:17" pos:end="3615:70"><call pos:start="3615:17" pos:end="3615:70"><name pos:start="3615:17" pos:end="3615:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3615:40" pos:end="3615:70">(<argument pos:start="3615:41" pos:end="3615:47"><expr pos:start="3615:41" pos:end="3615:47"><name pos:start="3615:41" pos:end="3615:47">cpu_env</name></expr></argument>, <argument pos:start="3615:50" pos:end="3615:69"><expr pos:start="3615:50" pos:end="3615:69"><call pos:start="3615:50" pos:end="3615:69"><name pos:start="3615:50" pos:end="3615:62">tcg_const_i32</name><argument_list pos:start="3615:63" pos:end="3615:69">(<argument pos:start="3615:64" pos:end="3615:68"><expr pos:start="3615:64" pos:end="3615:68"><name pos:start="3615:64" pos:end="3615:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3617:17" pos:end="3617:50"><expr pos:start="3617:17" pos:end="3617:49"><call pos:start="3617:17" pos:end="3617:49"><name pos:start="3617:17" pos:end="3617:40">gen_helper_fcomi_ST0_FT0</name><argument_list pos:start="3617:41" pos:end="3617:49">(<argument pos:start="3617:42" pos:end="3617:48"><expr pos:start="3617:42" pos:end="3617:48"><name pos:start="3617:42" pos:end="3617:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3619:17" pos:end="3619:40"><expr pos:start="3619:17" pos:end="3619:39"><name pos:start="3619:17" pos:end="3619:24"><name pos:start="3619:17" pos:end="3619:17">s</name><operator pos:start="3619:18" pos:end="3619:19">-&gt;</operator><name pos:start="3619:20" pos:end="3619:24">cc_op</name></name> <operator pos:start="3619:26" pos:end="3619:26">=</operator> <name pos:start="3619:28" pos:end="3619:39">CC_OP_EFLAGS</name></expr>;</expr_stmt>

                <break pos:start="3621:17" pos:end="3621:22">break;</break>

            <case pos:start="3623:13" pos:end="3623:22">case <expr pos:start="3623:18" pos:end="3623:21"><literal type="number" pos:start="3623:18" pos:end="3623:21">0x28</literal></expr>:</case> <comment type="block" pos:start="3623:24" pos:end="3623:38">/* ffree sti */</comment>

                <expr_stmt pos:start="3625:17" pos:end="3625:68"><expr pos:start="3625:17" pos:end="3625:67"><call pos:start="3625:17" pos:end="3625:67"><name pos:start="3625:17" pos:end="3625:36">gen_helper_ffree_STN</name><argument_list pos:start="3625:37" pos:end="3625:67">(<argument pos:start="3625:38" pos:end="3625:44"><expr pos:start="3625:38" pos:end="3625:44"><name pos:start="3625:38" pos:end="3625:44">cpu_env</name></expr></argument>, <argument pos:start="3625:47" pos:end="3625:66"><expr pos:start="3625:47" pos:end="3625:66"><call pos:start="3625:47" pos:end="3625:66"><name pos:start="3625:47" pos:end="3625:59">tcg_const_i32</name><argument_list pos:start="3625:60" pos:end="3625:66">(<argument pos:start="3625:61" pos:end="3625:65"><expr pos:start="3625:61" pos:end="3625:65"><name pos:start="3625:61" pos:end="3625:65">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3627:17" pos:end="3627:22">break;</break>

            <case pos:start="3629:13" pos:end="3629:22">case <expr pos:start="3629:18" pos:end="3629:21"><literal type="number" pos:start="3629:18" pos:end="3629:21">0x2a</literal></expr>:</case> <comment type="block" pos:start="3629:24" pos:end="3629:36">/* fst sti */</comment>

                <expr_stmt pos:start="3631:17" pos:end="3631:71"><expr pos:start="3631:17" pos:end="3631:70"><call pos:start="3631:17" pos:end="3631:70"><name pos:start="3631:17" pos:end="3631:39">gen_helper_fmov_STN_ST0</name><argument_list pos:start="3631:40" pos:end="3631:70">(<argument pos:start="3631:41" pos:end="3631:47"><expr pos:start="3631:41" pos:end="3631:47"><name pos:start="3631:41" pos:end="3631:47">cpu_env</name></expr></argument>, <argument pos:start="3631:50" pos:end="3631:69"><expr pos:start="3631:50" pos:end="3631:69"><call pos:start="3631:50" pos:end="3631:69"><name pos:start="3631:50" pos:end="3631:62">tcg_const_i32</name><argument_list pos:start="3631:63" pos:end="3631:69">(<argument pos:start="3631:64" pos:end="3631:68"><expr pos:start="3631:64" pos:end="3631:68"><name pos:start="3631:64" pos:end="3631:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3633:17" pos:end="3633:22">break;</break>

            <case pos:start="3635:13" pos:end="3635:22">case <expr pos:start="3635:18" pos:end="3635:21"><literal type="number" pos:start="3635:18" pos:end="3635:21">0x2b</literal></expr>:</case> <comment type="block" pos:start="3635:24" pos:end="3635:37">/* fstp sti */</comment>

            <case pos:start="3637:13" pos:end="3637:22">case <expr pos:start="3637:18" pos:end="3637:21"><literal type="number" pos:start="3637:18" pos:end="3637:21">0x0b</literal></expr>:</case> <comment type="block" pos:start="3637:24" pos:end="3637:55">/* fstp1 sti, undocumented op */</comment>

            <case pos:start="3639:13" pos:end="3639:22">case <expr pos:start="3639:18" pos:end="3639:21"><literal type="number" pos:start="3639:18" pos:end="3639:21">0x3a</literal></expr>:</case> <comment type="block" pos:start="3639:24" pos:end="3639:55">/* fstp8 sti, undocumented op */</comment>

            <case pos:start="3641:13" pos:end="3641:22">case <expr pos:start="3641:18" pos:end="3641:21"><literal type="number" pos:start="3641:18" pos:end="3641:21">0x3b</literal></expr>:</case> <comment type="block" pos:start="3641:24" pos:end="3641:55">/* fstp9 sti, undocumented op */</comment>

                <expr_stmt pos:start="3643:17" pos:end="3643:71"><expr pos:start="3643:17" pos:end="3643:70"><call pos:start="3643:17" pos:end="3643:70"><name pos:start="3643:17" pos:end="3643:39">gen_helper_fmov_STN_ST0</name><argument_list pos:start="3643:40" pos:end="3643:70">(<argument pos:start="3643:41" pos:end="3643:47"><expr pos:start="3643:41" pos:end="3643:47"><name pos:start="3643:41" pos:end="3643:47">cpu_env</name></expr></argument>, <argument pos:start="3643:50" pos:end="3643:69"><expr pos:start="3643:50" pos:end="3643:69"><call pos:start="3643:50" pos:end="3643:69"><name pos:start="3643:50" pos:end="3643:62">tcg_const_i32</name><argument_list pos:start="3643:63" pos:end="3643:69">(<argument pos:start="3643:64" pos:end="3643:68"><expr pos:start="3643:64" pos:end="3643:68"><name pos:start="3643:64" pos:end="3643:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3645:17" pos:end="3645:41"><expr pos:start="3645:17" pos:end="3645:40"><call pos:start="3645:17" pos:end="3645:40"><name pos:start="3645:17" pos:end="3645:31">gen_helper_fpop</name><argument_list pos:start="3645:32" pos:end="3645:40">(<argument pos:start="3645:33" pos:end="3645:39"><expr pos:start="3645:33" pos:end="3645:39"><name pos:start="3645:33" pos:end="3645:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3647:17" pos:end="3647:22">break;</break>

            <case pos:start="3649:13" pos:end="3649:22">case <expr pos:start="3649:18" pos:end="3649:21"><literal type="number" pos:start="3649:18" pos:end="3649:21">0x2c</literal></expr>:</case> <comment type="block" pos:start="3649:24" pos:end="3649:40">/* fucom st(i) */</comment>

                <expr_stmt pos:start="3651:17" pos:end="3651:71"><expr pos:start="3651:17" pos:end="3651:70"><call pos:start="3651:17" pos:end="3651:70"><name pos:start="3651:17" pos:end="3651:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3651:40" pos:end="3651:70">(<argument pos:start="3651:41" pos:end="3651:47"><expr pos:start="3651:41" pos:end="3651:47"><name pos:start="3651:41" pos:end="3651:47">cpu_env</name></expr></argument>, <argument pos:start="3651:50" pos:end="3651:69"><expr pos:start="3651:50" pos:end="3651:69"><call pos:start="3651:50" pos:end="3651:69"><name pos:start="3651:50" pos:end="3651:62">tcg_const_i32</name><argument_list pos:start="3651:63" pos:end="3651:69">(<argument pos:start="3651:64" pos:end="3651:68"><expr pos:start="3651:64" pos:end="3651:68"><name pos:start="3651:64" pos:end="3651:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3653:17" pos:end="3653:50"><expr pos:start="3653:17" pos:end="3653:49"><call pos:start="3653:17" pos:end="3653:49"><name pos:start="3653:17" pos:end="3653:40">gen_helper_fucom_ST0_FT0</name><argument_list pos:start="3653:41" pos:end="3653:49">(<argument pos:start="3653:42" pos:end="3653:48"><expr pos:start="3653:42" pos:end="3653:48"><name pos:start="3653:42" pos:end="3653:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3655:17" pos:end="3655:22">break;</break>

            <case pos:start="3657:13" pos:end="3657:22">case <expr pos:start="3657:18" pos:end="3657:21"><literal type="number" pos:start="3657:18" pos:end="3657:21">0x2d</literal></expr>:</case> <comment type="block" pos:start="3657:24" pos:end="3657:41">/* fucomp st(i) */</comment>

                <expr_stmt pos:start="3659:17" pos:end="3659:71"><expr pos:start="3659:17" pos:end="3659:70"><call pos:start="3659:17" pos:end="3659:70"><name pos:start="3659:17" pos:end="3659:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3659:40" pos:end="3659:70">(<argument pos:start="3659:41" pos:end="3659:47"><expr pos:start="3659:41" pos:end="3659:47"><name pos:start="3659:41" pos:end="3659:47">cpu_env</name></expr></argument>, <argument pos:start="3659:50" pos:end="3659:69"><expr pos:start="3659:50" pos:end="3659:69"><call pos:start="3659:50" pos:end="3659:69"><name pos:start="3659:50" pos:end="3659:62">tcg_const_i32</name><argument_list pos:start="3659:63" pos:end="3659:69">(<argument pos:start="3659:64" pos:end="3659:68"><expr pos:start="3659:64" pos:end="3659:68"><name pos:start="3659:64" pos:end="3659:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3661:17" pos:end="3661:50"><expr pos:start="3661:17" pos:end="3661:49"><call pos:start="3661:17" pos:end="3661:49"><name pos:start="3661:17" pos:end="3661:40">gen_helper_fucom_ST0_FT0</name><argument_list pos:start="3661:41" pos:end="3661:49">(<argument pos:start="3661:42" pos:end="3661:48"><expr pos:start="3661:42" pos:end="3661:48"><name pos:start="3661:42" pos:end="3661:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3663:17" pos:end="3663:41"><expr pos:start="3663:17" pos:end="3663:40"><call pos:start="3663:17" pos:end="3663:40"><name pos:start="3663:17" pos:end="3663:31">gen_helper_fpop</name><argument_list pos:start="3663:32" pos:end="3663:40">(<argument pos:start="3663:33" pos:end="3663:39"><expr pos:start="3663:33" pos:end="3663:39"><name pos:start="3663:33" pos:end="3663:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3665:17" pos:end="3665:22">break;</break>

            <case pos:start="3667:13" pos:end="3667:22">case <expr pos:start="3667:18" pos:end="3667:21"><literal type="number" pos:start="3667:18" pos:end="3667:21">0x33</literal></expr>:</case> <comment type="block" pos:start="3667:24" pos:end="3667:33">/* de/3 */</comment>

                <switch pos:start="3669:17" pos:end="3687:17">switch<condition pos:start="3669:23" pos:end="3669:26">(<expr pos:start="3669:24" pos:end="3669:25"><name pos:start="3669:24" pos:end="3669:25">rm</name></expr>)</condition> <block pos:start="3669:28" pos:end="3687:17">{<block_content pos:start="3671:17" pos:end="3685:36">

                <case pos:start="3671:17" pos:end="3671:23">case <expr pos:start="3671:22" pos:end="3671:22"><literal type="number" pos:start="3671:22" pos:end="3671:22">1</literal></expr>:</case> <comment type="block" pos:start="3671:25" pos:end="3671:36">/* fcompp */</comment>

                    <expr_stmt pos:start="3673:21" pos:end="3673:71"><expr pos:start="3673:21" pos:end="3673:70"><call pos:start="3673:21" pos:end="3673:70"><name pos:start="3673:21" pos:end="3673:43">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3673:44" pos:end="3673:70">(<argument pos:start="3673:45" pos:end="3673:51"><expr pos:start="3673:45" pos:end="3673:51"><name pos:start="3673:45" pos:end="3673:51">cpu_env</name></expr></argument>, <argument pos:start="3673:54" pos:end="3673:69"><expr pos:start="3673:54" pos:end="3673:69"><call pos:start="3673:54" pos:end="3673:69"><name pos:start="3673:54" pos:end="3673:66">tcg_const_i32</name><argument_list pos:start="3673:67" pos:end="3673:69">(<argument pos:start="3673:68" pos:end="3673:68"><expr pos:start="3673:68" pos:end="3673:68"><literal type="number" pos:start="3673:68" pos:end="3673:68">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3675:21" pos:end="3675:53"><expr pos:start="3675:21" pos:end="3675:52"><call pos:start="3675:21" pos:end="3675:52"><name pos:start="3675:21" pos:end="3675:43">gen_helper_fcom_ST0_FT0</name><argument_list pos:start="3675:44" pos:end="3675:52">(<argument pos:start="3675:45" pos:end="3675:51"><expr pos:start="3675:45" pos:end="3675:51"><name pos:start="3675:45" pos:end="3675:51">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3677:21" pos:end="3677:45"><expr pos:start="3677:21" pos:end="3677:44"><call pos:start="3677:21" pos:end="3677:44"><name pos:start="3677:21" pos:end="3677:35">gen_helper_fpop</name><argument_list pos:start="3677:36" pos:end="3677:44">(<argument pos:start="3677:37" pos:end="3677:43"><expr pos:start="3677:37" pos:end="3677:43"><name pos:start="3677:37" pos:end="3677:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3679:21" pos:end="3679:45"><expr pos:start="3679:21" pos:end="3679:44"><call pos:start="3679:21" pos:end="3679:44"><name pos:start="3679:21" pos:end="3679:35">gen_helper_fpop</name><argument_list pos:start="3679:36" pos:end="3679:44">(<argument pos:start="3679:37" pos:end="3679:43"><expr pos:start="3679:37" pos:end="3679:43"><name pos:start="3679:37" pos:end="3679:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3681:21" pos:end="3681:26">break;</break>

                <default pos:start="3683:17" pos:end="3683:24">default:</default>

                    <goto pos:start="3685:21" pos:end="3685:36">goto <name pos:start="3685:26" pos:end="3685:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="3689:17" pos:end="3689:22">break;</break>

            <case pos:start="3691:13" pos:end="3691:22">case <expr pos:start="3691:18" pos:end="3691:21"><literal type="number" pos:start="3691:18" pos:end="3691:21">0x38</literal></expr>:</case> <comment type="block" pos:start="3691:24" pos:end="3691:56">/* ffreep sti, undocumented op */</comment>

                <expr_stmt pos:start="3693:17" pos:end="3693:68"><expr pos:start="3693:17" pos:end="3693:67"><call pos:start="3693:17" pos:end="3693:67"><name pos:start="3693:17" pos:end="3693:36">gen_helper_ffree_STN</name><argument_list pos:start="3693:37" pos:end="3693:67">(<argument pos:start="3693:38" pos:end="3693:44"><expr pos:start="3693:38" pos:end="3693:44"><name pos:start="3693:38" pos:end="3693:44">cpu_env</name></expr></argument>, <argument pos:start="3693:47" pos:end="3693:66"><expr pos:start="3693:47" pos:end="3693:66"><call pos:start="3693:47" pos:end="3693:66"><name pos:start="3693:47" pos:end="3693:59">tcg_const_i32</name><argument_list pos:start="3693:60" pos:end="3693:66">(<argument pos:start="3693:61" pos:end="3693:65"><expr pos:start="3693:61" pos:end="3693:65"><name pos:start="3693:61" pos:end="3693:65">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3695:17" pos:end="3695:41"><expr pos:start="3695:17" pos:end="3695:40"><call pos:start="3695:17" pos:end="3695:40"><name pos:start="3695:17" pos:end="3695:31">gen_helper_fpop</name><argument_list pos:start="3695:32" pos:end="3695:40">(<argument pos:start="3695:33" pos:end="3695:39"><expr pos:start="3695:33" pos:end="3695:39"><name pos:start="3695:33" pos:end="3695:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3697:17" pos:end="3697:22">break;</break>

            <case pos:start="3699:13" pos:end="3699:22">case <expr pos:start="3699:18" pos:end="3699:21"><literal type="number" pos:start="3699:18" pos:end="3699:21">0x3c</literal></expr>:</case> <comment type="block" pos:start="3699:24" pos:end="3699:33">/* df/4 */</comment>

                <switch pos:start="3701:17" pos:end="3717:17">switch<condition pos:start="3701:23" pos:end="3701:26">(<expr pos:start="3701:24" pos:end="3701:25"><name pos:start="3701:24" pos:end="3701:25">rm</name></expr>)</condition> <block pos:start="3701:28" pos:end="3717:17">{<block_content pos:start="3703:17" pos:end="3715:36">

                <case pos:start="3703:17" pos:end="3703:23">case <expr pos:start="3703:22" pos:end="3703:22"><literal type="number" pos:start="3703:22" pos:end="3703:22">0</literal></expr>:</case>

                    <expr_stmt pos:start="3705:21" pos:end="3705:61"><expr pos:start="3705:21" pos:end="3705:60"><call pos:start="3705:21" pos:end="3705:60"><name pos:start="3705:21" pos:end="3705:37">gen_helper_fnstsw</name><argument_list pos:start="3705:38" pos:end="3705:60">(<argument pos:start="3705:39" pos:end="3705:50"><expr pos:start="3705:39" pos:end="3705:50"><name pos:start="3705:39" pos:end="3705:50">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="3705:53" pos:end="3705:59"><expr pos:start="3705:53" pos:end="3705:59"><name pos:start="3705:53" pos:end="3705:59">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3707:21" pos:end="3707:64"><expr pos:start="3707:21" pos:end="3707:63"><call pos:start="3707:21" pos:end="3707:63"><name pos:start="3707:21" pos:end="3707:39">tcg_gen_extu_i32_tl</name><argument_list pos:start="3707:40" pos:end="3707:63">(<argument pos:start="3707:41" pos:end="3707:48"><expr pos:start="3707:41" pos:end="3707:48"><name pos:start="3707:41" pos:end="3707:48"><name pos:start="3707:41" pos:end="3707:45">cpu_T</name><index pos:start="3707:46" pos:end="3707:48">[<expr pos:start="3707:47" pos:end="3707:47"><literal type="number" pos:start="3707:47" pos:end="3707:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="3707:51" pos:end="3707:62"><expr pos:start="3707:51" pos:end="3707:62"><name pos:start="3707:51" pos:end="3707:62">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3709:21" pos:end="3709:54"><expr pos:start="3709:21" pos:end="3709:53"><call pos:start="3709:21" pos:end="3709:53"><name pos:start="3709:21" pos:end="3709:37">gen_op_mov_reg_T0</name><argument_list pos:start="3709:38" pos:end="3709:53">(<argument pos:start="3709:39" pos:end="3709:45"><expr pos:start="3709:39" pos:end="3709:45"><name pos:start="3709:39" pos:end="3709:45">OT_WORD</name></expr></argument>, <argument pos:start="3709:48" pos:end="3709:52"><expr pos:start="3709:48" pos:end="3709:52"><name pos:start="3709:48" pos:end="3709:52">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3711:21" pos:end="3711:26">break;</break>

                <default pos:start="3713:17" pos:end="3713:24">default:</default>

                    <goto pos:start="3715:21" pos:end="3715:36">goto <name pos:start="3715:26" pos:end="3715:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="3719:17" pos:end="3719:22">break;</break>

            <case pos:start="3721:13" pos:end="3721:22">case <expr pos:start="3721:18" pos:end="3721:21"><literal type="number" pos:start="3721:18" pos:end="3721:21">0x3d</literal></expr>:</case> <comment type="block" pos:start="3721:24" pos:end="3721:36">/* fucomip */</comment>

                <if_stmt pos:start="3723:17" pos:end="3725:47"><if pos:start="3723:17" pos:end="3725:47">if <condition pos:start="3723:20" pos:end="3723:46">(<expr pos:start="3723:21" pos:end="3723:45"><name pos:start="3723:21" pos:end="3723:28"><name pos:start="3723:21" pos:end="3723:21">s</name><operator pos:start="3723:22" pos:end="3723:23">-&gt;</operator><name pos:start="3723:24" pos:end="3723:28">cc_op</name></name> <operator pos:start="3723:30" pos:end="3723:31">!=</operator> <name pos:start="3723:33" pos:end="3723:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3725:21" pos:end="3725:47"><block_content pos:start="3725:21" pos:end="3725:47">

                    <expr_stmt pos:start="3725:21" pos:end="3725:47"><expr pos:start="3725:21" pos:end="3725:46"><call pos:start="3725:21" pos:end="3725:46"><name pos:start="3725:21" pos:end="3725:36">gen_op_set_cc_op</name><argument_list pos:start="3725:37" pos:end="3725:46">(<argument pos:start="3725:38" pos:end="3725:45"><expr pos:start="3725:38" pos:end="3725:45"><name pos:start="3725:38" pos:end="3725:45"><name pos:start="3725:38" pos:end="3725:38">s</name><operator pos:start="3725:39" pos:end="3725:40">-&gt;</operator><name pos:start="3725:41" pos:end="3725:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3727:17" pos:end="3727:71"><expr pos:start="3727:17" pos:end="3727:70"><call pos:start="3727:17" pos:end="3727:70"><name pos:start="3727:17" pos:end="3727:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3727:40" pos:end="3727:70">(<argument pos:start="3727:41" pos:end="3727:47"><expr pos:start="3727:41" pos:end="3727:47"><name pos:start="3727:41" pos:end="3727:47">cpu_env</name></expr></argument>, <argument pos:start="3727:50" pos:end="3727:69"><expr pos:start="3727:50" pos:end="3727:69"><call pos:start="3727:50" pos:end="3727:69"><name pos:start="3727:50" pos:end="3727:62">tcg_const_i32</name><argument_list pos:start="3727:63" pos:end="3727:69">(<argument pos:start="3727:64" pos:end="3727:68"><expr pos:start="3727:64" pos:end="3727:68"><name pos:start="3727:64" pos:end="3727:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3729:17" pos:end="3729:51"><expr pos:start="3729:17" pos:end="3729:50"><call pos:start="3729:17" pos:end="3729:50"><name pos:start="3729:17" pos:end="3729:41">gen_helper_fucomi_ST0_FT0</name><argument_list pos:start="3729:42" pos:end="3729:50">(<argument pos:start="3729:43" pos:end="3729:49"><expr pos:start="3729:43" pos:end="3729:49"><name pos:start="3729:43" pos:end="3729:49">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3731:17" pos:end="3731:41"><expr pos:start="3731:17" pos:end="3731:40"><call pos:start="3731:17" pos:end="3731:40"><name pos:start="3731:17" pos:end="3731:31">gen_helper_fpop</name><argument_list pos:start="3731:32" pos:end="3731:40">(<argument pos:start="3731:33" pos:end="3731:39"><expr pos:start="3731:33" pos:end="3731:39"><name pos:start="3731:33" pos:end="3731:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3733:17" pos:end="3733:40"><expr pos:start="3733:17" pos:end="3733:39"><name pos:start="3733:17" pos:end="3733:24"><name pos:start="3733:17" pos:end="3733:17">s</name><operator pos:start="3733:18" pos:end="3733:19">-&gt;</operator><name pos:start="3733:20" pos:end="3733:24">cc_op</name></name> <operator pos:start="3733:26" pos:end="3733:26">=</operator> <name pos:start="3733:28" pos:end="3733:39">CC_OP_EFLAGS</name></expr>;</expr_stmt>

                <break pos:start="3735:17" pos:end="3735:22">break;</break>

            <case pos:start="3737:13" pos:end="3737:22">case <expr pos:start="3737:18" pos:end="3737:21"><literal type="number" pos:start="3737:18" pos:end="3737:21">0x3e</literal></expr>:</case> <comment type="block" pos:start="3737:24" pos:end="3737:35">/* fcomip */</comment>

                <if_stmt pos:start="3739:17" pos:end="3741:47"><if pos:start="3739:17" pos:end="3741:47">if <condition pos:start="3739:20" pos:end="3739:46">(<expr pos:start="3739:21" pos:end="3739:45"><name pos:start="3739:21" pos:end="3739:28"><name pos:start="3739:21" pos:end="3739:21">s</name><operator pos:start="3739:22" pos:end="3739:23">-&gt;</operator><name pos:start="3739:24" pos:end="3739:28">cc_op</name></name> <operator pos:start="3739:30" pos:end="3739:31">!=</operator> <name pos:start="3739:33" pos:end="3739:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3741:21" pos:end="3741:47"><block_content pos:start="3741:21" pos:end="3741:47">

                    <expr_stmt pos:start="3741:21" pos:end="3741:47"><expr pos:start="3741:21" pos:end="3741:46"><call pos:start="3741:21" pos:end="3741:46"><name pos:start="3741:21" pos:end="3741:36">gen_op_set_cc_op</name><argument_list pos:start="3741:37" pos:end="3741:46">(<argument pos:start="3741:38" pos:end="3741:45"><expr pos:start="3741:38" pos:end="3741:45"><name pos:start="3741:38" pos:end="3741:45"><name pos:start="3741:38" pos:end="3741:38">s</name><operator pos:start="3741:39" pos:end="3741:40">-&gt;</operator><name pos:start="3741:41" pos:end="3741:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3743:17" pos:end="3743:71"><expr pos:start="3743:17" pos:end="3743:70"><call pos:start="3743:17" pos:end="3743:70"><name pos:start="3743:17" pos:end="3743:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3743:40" pos:end="3743:70">(<argument pos:start="3743:41" pos:end="3743:47"><expr pos:start="3743:41" pos:end="3743:47"><name pos:start="3743:41" pos:end="3743:47">cpu_env</name></expr></argument>, <argument pos:start="3743:50" pos:end="3743:69"><expr pos:start="3743:50" pos:end="3743:69"><call pos:start="3743:50" pos:end="3743:69"><name pos:start="3743:50" pos:end="3743:62">tcg_const_i32</name><argument_list pos:start="3743:63" pos:end="3743:69">(<argument pos:start="3743:64" pos:end="3743:68"><expr pos:start="3743:64" pos:end="3743:68"><name pos:start="3743:64" pos:end="3743:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3745:17" pos:end="3745:50"><expr pos:start="3745:17" pos:end="3745:49"><call pos:start="3745:17" pos:end="3745:49"><name pos:start="3745:17" pos:end="3745:40">gen_helper_fcomi_ST0_FT0</name><argument_list pos:start="3745:41" pos:end="3745:49">(<argument pos:start="3745:42" pos:end="3745:48"><expr pos:start="3745:42" pos:end="3745:48"><name pos:start="3745:42" pos:end="3745:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3747:17" pos:end="3747:41"><expr pos:start="3747:17" pos:end="3747:40"><call pos:start="3747:17" pos:end="3747:40"><name pos:start="3747:17" pos:end="3747:31">gen_helper_fpop</name><argument_list pos:start="3747:32" pos:end="3747:40">(<argument pos:start="3747:33" pos:end="3747:39"><expr pos:start="3747:33" pos:end="3747:39"><name pos:start="3747:33" pos:end="3747:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3749:17" pos:end="3749:40"><expr pos:start="3749:17" pos:end="3749:39"><name pos:start="3749:17" pos:end="3749:24"><name pos:start="3749:17" pos:end="3749:17">s</name><operator pos:start="3749:18" pos:end="3749:19">-&gt;</operator><name pos:start="3749:20" pos:end="3749:24">cc_op</name></name> <operator pos:start="3749:26" pos:end="3749:26">=</operator> <name pos:start="3749:28" pos:end="3749:39">CC_OP_EFLAGS</name></expr>;</expr_stmt>

                <break pos:start="3751:17" pos:end="3751:22">break;</break>

            <case pos:start="3753:13" pos:end="3753:31">case <expr pos:start="3753:18" pos:end="3753:30"><literal type="number" pos:start="3753:18" pos:end="3753:21">0x10</literal> <operator pos:start="3753:23" pos:end="3753:25">...</operator> <literal type="number" pos:start="3753:27" pos:end="3753:30">0x13</literal></expr>:</case> <comment type="block" pos:start="3753:33" pos:end="3753:45">/* fcmovxx */</comment>

            <case pos:start="3755:13" pos:end="3755:31">case <expr pos:start="3755:18" pos:end="3755:30"><literal type="number" pos:start="3755:18" pos:end="3755:21">0x18</literal> <operator pos:start="3755:23" pos:end="3755:25">...</operator> <literal type="number" pos:start="3755:27" pos:end="3755:30">0x1b</literal></expr>:</case>

                <block pos:start="3757:17" pos:end="3783:17">{<block_content pos:start="3759:21" pos:end="3781:38">

                    <decl_stmt pos:start="3759:21" pos:end="3759:32"><decl pos:start="3759:21" pos:end="3759:27"><type pos:start="3759:21" pos:end="3759:23"><name pos:start="3759:21" pos:end="3759:23">int</name></type> <name pos:start="3759:25" pos:end="3759:27">op1</name></decl>, <decl pos:start="3759:30" pos:end="3759:31"><type ref="prev" pos:start="3759:21" pos:end="3759:23"/><name pos:start="3759:30" pos:end="3759:31">l1</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="3761:21" pos:end="3771:22"><decl pos:start="3761:21" pos:end="3771:21"><type pos:start="3761:21" pos:end="3761:40"><specifier pos:start="3761:21" pos:end="3761:26">static</specifier> <specifier pos:start="3761:28" pos:end="3761:32">const</specifier> <name pos:start="3761:34" pos:end="3761:40">uint8_t</name></type> <name pos:start="3761:42" pos:end="3761:52"><name pos:start="3761:42" pos:end="3761:49">fcmov_cc</name><index pos:start="3761:50" pos:end="3761:52">[<expr pos:start="3761:51" pos:end="3761:51"><literal type="number" pos:start="3761:51" pos:end="3761:51">8</literal></expr>]</index></name> <init pos:start="3761:54" pos:end="3771:21">= <expr pos:start="3761:56" pos:end="3771:21"><block pos:start="3761:56" pos:end="3771:21">{

                        <expr pos:start="3763:25" pos:end="3763:36"><operator pos:start="3763:25" pos:end="3763:25">(</operator><name pos:start="3763:26" pos:end="3763:30">JCC_B</name> <operator pos:start="3763:32" pos:end="3763:33">&lt;&lt;</operator> <literal type="number" pos:start="3763:35" pos:end="3763:35">1</literal><operator pos:start="3763:36" pos:end="3763:36">)</operator></expr>,

                        <expr pos:start="3765:25" pos:end="3765:36"><operator pos:start="3765:25" pos:end="3765:25">(</operator><name pos:start="3765:26" pos:end="3765:30">JCC_Z</name> <operator pos:start="3765:32" pos:end="3765:33">&lt;&lt;</operator> <literal type="number" pos:start="3765:35" pos:end="3765:35">1</literal><operator pos:start="3765:36" pos:end="3765:36">)</operator></expr>,

                        <expr pos:start="3767:25" pos:end="3767:37"><operator pos:start="3767:25" pos:end="3767:25">(</operator><name pos:start="3767:26" pos:end="3767:31">JCC_BE</name> <operator pos:start="3767:33" pos:end="3767:34">&lt;&lt;</operator> <literal type="number" pos:start="3767:36" pos:end="3767:36">1</literal><operator pos:start="3767:37" pos:end="3767:37">)</operator></expr>,

                        <expr pos:start="3769:25" pos:end="3769:36"><operator pos:start="3769:25" pos:end="3769:25">(</operator><name pos:start="3769:26" pos:end="3769:30">JCC_P</name> <operator pos:start="3769:32" pos:end="3769:33">&lt;&lt;</operator> <literal type="number" pos:start="3769:35" pos:end="3769:35">1</literal><operator pos:start="3769:36" pos:end="3769:36">)</operator></expr>,

                    }</block></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="3773:21" pos:end="3773:67"><expr pos:start="3773:21" pos:end="3773:66"><name pos:start="3773:21" pos:end="3773:23">op1</name> <operator pos:start="3773:25" pos:end="3773:25">=</operator> <name pos:start="3773:27" pos:end="3773:42"><name pos:start="3773:27" pos:end="3773:34">fcmov_cc</name><index pos:start="3773:35" pos:end="3773:42">[<expr pos:start="3773:36" pos:end="3773:41"><name pos:start="3773:36" pos:end="3773:37">op</name> <operator pos:start="3773:39" pos:end="3773:39">&amp;</operator> <literal type="number" pos:start="3773:41" pos:end="3773:41">3</literal></expr>]</index></name> <operator pos:start="3773:44" pos:end="3773:44">|</operator> <operator pos:start="3773:46" pos:end="3773:46">(</operator><operator pos:start="3773:47" pos:end="3773:47">(</operator><operator pos:start="3773:48" pos:end="3773:48">(</operator><name pos:start="3773:49" pos:end="3773:50">op</name> <operator pos:start="3773:52" pos:end="3773:53">&gt;&gt;</operator> <literal type="number" pos:start="3773:55" pos:end="3773:55">3</literal><operator pos:start="3773:56" pos:end="3773:56">)</operator> <operator pos:start="3773:58" pos:end="3773:58">&amp;</operator> <literal type="number" pos:start="3773:60" pos:end="3773:60">1</literal><operator pos:start="3773:61" pos:end="3773:61">)</operator> <operator pos:start="3773:63" pos:end="3773:63">^</operator> <literal type="number" pos:start="3773:65" pos:end="3773:65">1</literal><operator pos:start="3773:66" pos:end="3773:66">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="3775:21" pos:end="3775:41"><expr pos:start="3775:21" pos:end="3775:40"><name pos:start="3775:21" pos:end="3775:22">l1</name> <operator pos:start="3775:24" pos:end="3775:24">=</operator> <call pos:start="3775:26" pos:end="3775:40"><name pos:start="3775:26" pos:end="3775:38">gen_new_label</name><argument_list pos:start="3775:39" pos:end="3775:40">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3777:21" pos:end="3777:41"><expr pos:start="3777:21" pos:end="3777:40"><call pos:start="3777:21" pos:end="3777:40"><name pos:start="3777:21" pos:end="3777:28">gen_jcc1</name><argument_list pos:start="3777:29" pos:end="3777:40">(<argument pos:start="3777:30" pos:end="3777:30"><expr pos:start="3777:30" pos:end="3777:30"><name pos:start="3777:30" pos:end="3777:30">s</name></expr></argument>, <argument pos:start="3777:33" pos:end="3777:35"><expr pos:start="3777:33" pos:end="3777:35"><name pos:start="3777:33" pos:end="3777:35">op1</name></expr></argument>, <argument pos:start="3777:38" pos:end="3777:39"><expr pos:start="3777:38" pos:end="3777:39"><name pos:start="3777:38" pos:end="3777:39">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3779:21" pos:end="3779:75"><expr pos:start="3779:21" pos:end="3779:74"><call pos:start="3779:21" pos:end="3779:74"><name pos:start="3779:21" pos:end="3779:43">gen_helper_fmov_ST0_STN</name><argument_list pos:start="3779:44" pos:end="3779:74">(<argument pos:start="3779:45" pos:end="3779:51"><expr pos:start="3779:45" pos:end="3779:51"><name pos:start="3779:45" pos:end="3779:51">cpu_env</name></expr></argument>, <argument pos:start="3779:54" pos:end="3779:73"><expr pos:start="3779:54" pos:end="3779:73"><call pos:start="3779:54" pos:end="3779:73"><name pos:start="3779:54" pos:end="3779:66">tcg_const_i32</name><argument_list pos:start="3779:67" pos:end="3779:73">(<argument pos:start="3779:68" pos:end="3779:72"><expr pos:start="3779:68" pos:end="3779:72"><name pos:start="3779:68" pos:end="3779:72">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3781:21" pos:end="3781:38"><expr pos:start="3781:21" pos:end="3781:37"><call pos:start="3781:21" pos:end="3781:37"><name pos:start="3781:21" pos:end="3781:33">gen_set_label</name><argument_list pos:start="3781:34" pos:end="3781:37">(<argument pos:start="3781:35" pos:end="3781:36"><expr pos:start="3781:35" pos:end="3781:36"><name pos:start="3781:35" pos:end="3781:36">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="3785:17" pos:end="3785:22">break;</break>

            <default pos:start="3787:13" pos:end="3787:20">default:</default>

                <goto pos:start="3789:17" pos:end="3789:32">goto <name pos:start="3789:22" pos:end="3789:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3795:9" pos:end="3795:14">break;</break>

        <comment type="block" format="doxygen" pos:start="3797:9" pos:end="3797:34">/************************/</comment>

        <comment type="block" pos:start="3799:9" pos:end="3799:24">/* string ops */</comment>



    <case pos:start="3803:5" pos:end="3803:14">case <expr pos:start="3803:10" pos:end="3803:13"><literal type="number" pos:start="3803:10" pos:end="3803:13">0xa4</literal></expr>:</case> <comment type="block" pos:start="3803:16" pos:end="3803:26">/* movsS */</comment>

    <case pos:start="3805:5" pos:end="3805:14">case <expr pos:start="3805:10" pos:end="3805:13"><literal type="number" pos:start="3805:10" pos:end="3805:13">0xa5</literal></expr>:</case>

        <if_stmt pos:start="3807:9" pos:end="3813:33"><if pos:start="3807:9" pos:end="3809:25">if <condition pos:start="3807:12" pos:end="3807:25">(<expr pos:start="3807:13" pos:end="3807:24"><operator pos:start="3807:13" pos:end="3807:13">(</operator><name pos:start="3807:14" pos:end="3807:14">b</name> <operator pos:start="3807:16" pos:end="3807:16">&amp;</operator> <literal type="number" pos:start="3807:18" pos:end="3807:18">1</literal><operator pos:start="3807:19" pos:end="3807:19">)</operator> <operator pos:start="3807:21" pos:end="3807:22">==</operator> <literal type="number" pos:start="3807:24" pos:end="3807:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3809:13" pos:end="3809:25"><block_content pos:start="3809:13" pos:end="3809:25">

            <expr_stmt pos:start="3809:13" pos:end="3809:25"><expr pos:start="3809:13" pos:end="3809:24"><name pos:start="3809:13" pos:end="3809:14">ot</name> <operator pos:start="3809:16" pos:end="3809:16">=</operator> <name pos:start="3809:18" pos:end="3809:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3811:9" pos:end="3813:33">else<block type="pseudo" pos:start="3813:13" pos:end="3813:33"><block_content pos:start="3813:13" pos:end="3813:33">

            <expr_stmt pos:start="3813:13" pos:end="3813:33"><expr pos:start="3813:13" pos:end="3813:32"><name pos:start="3813:13" pos:end="3813:14">ot</name> <operator pos:start="3813:16" pos:end="3813:16">=</operator> <name pos:start="3813:18" pos:end="3813:22">dflag</name> <operator pos:start="3813:24" pos:end="3813:24">+</operator> <name pos:start="3813:26" pos:end="3813:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="3817:9" pos:end="3825:9"><if pos:start="3817:9" pos:end="3821:9">if <condition pos:start="3817:12" pos:end="3817:52">(<expr pos:start="3817:13" pos:end="3817:51"><name pos:start="3817:13" pos:end="3817:20">prefixes</name> <operator pos:start="3817:22" pos:end="3817:22">&amp;</operator> <operator pos:start="3817:24" pos:end="3817:24">(</operator><name pos:start="3817:25" pos:end="3817:35">PREFIX_REPZ</name> <operator pos:start="3817:37" pos:end="3817:37">|</operator> <name pos:start="3817:39" pos:end="3817:50">PREFIX_REPNZ</name><operator pos:start="3817:51" pos:end="3817:51">)</operator></expr>)</condition> <block pos:start="3817:54" pos:end="3821:9">{<block_content pos:start="3819:13" pos:end="3819:76">

            <expr_stmt pos:start="3819:13" pos:end="3819:76"><expr pos:start="3819:13" pos:end="3819:75"><call pos:start="3819:13" pos:end="3819:75"><name pos:start="3819:13" pos:end="3819:25">gen_repz_movs</name><argument_list pos:start="3819:26" pos:end="3819:75">(<argument pos:start="3819:27" pos:end="3819:27"><expr pos:start="3819:27" pos:end="3819:27"><name pos:start="3819:27" pos:end="3819:27">s</name></expr></argument>, <argument pos:start="3819:30" pos:end="3819:31"><expr pos:start="3819:30" pos:end="3819:31"><name pos:start="3819:30" pos:end="3819:31">ot</name></expr></argument>, <argument pos:start="3819:34" pos:end="3819:54"><expr pos:start="3819:34" pos:end="3819:54"><name pos:start="3819:34" pos:end="3819:41">pc_start</name> <operator pos:start="3819:43" pos:end="3819:43">-</operator> <name pos:start="3819:45" pos:end="3819:54"><name pos:start="3819:45" pos:end="3819:45">s</name><operator pos:start="3819:46" pos:end="3819:47">-&gt;</operator><name pos:start="3819:48" pos:end="3819:54">cs_base</name></name></expr></argument>, <argument pos:start="3819:57" pos:end="3819:74"><expr pos:start="3819:57" pos:end="3819:74"><name pos:start="3819:57" pos:end="3819:61"><name pos:start="3819:57" pos:end="3819:57">s</name><operator pos:start="3819:58" pos:end="3819:59">-&gt;</operator><name pos:start="3819:60" pos:end="3819:61">pc</name></name> <operator pos:start="3819:63" pos:end="3819:63">-</operator> <name pos:start="3819:65" pos:end="3819:74"><name pos:start="3819:65" pos:end="3819:65">s</name><operator pos:start="3819:66" pos:end="3819:67">-&gt;</operator><name pos:start="3819:68" pos:end="3819:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3821:11" pos:end="3825:9">else <block pos:start="3821:16" pos:end="3825:9">{<block_content pos:start="3823:13" pos:end="3823:28">

            <expr_stmt pos:start="3823:13" pos:end="3823:28"><expr pos:start="3823:13" pos:end="3823:27"><call pos:start="3823:13" pos:end="3823:27"><name pos:start="3823:13" pos:end="3823:20">gen_movs</name><argument_list pos:start="3823:21" pos:end="3823:27">(<argument pos:start="3823:22" pos:end="3823:22"><expr pos:start="3823:22" pos:end="3823:22"><name pos:start="3823:22" pos:end="3823:22">s</name></expr></argument>, <argument pos:start="3823:25" pos:end="3823:26"><expr pos:start="3823:25" pos:end="3823:26"><name pos:start="3823:25" pos:end="3823:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3827:9" pos:end="3827:14">break;</break>



    <case pos:start="3831:5" pos:end="3831:14">case <expr pos:start="3831:10" pos:end="3831:13"><literal type="number" pos:start="3831:10" pos:end="3831:13">0xaa</literal></expr>:</case> <comment type="block" pos:start="3831:16" pos:end="3831:26">/* stosS */</comment>

    <case pos:start="3833:5" pos:end="3833:14">case <expr pos:start="3833:10" pos:end="3833:13"><literal type="number" pos:start="3833:10" pos:end="3833:13">0xab</literal></expr>:</case>

        <if_stmt pos:start="3835:9" pos:end="3841:33"><if pos:start="3835:9" pos:end="3837:25">if <condition pos:start="3835:12" pos:end="3835:25">(<expr pos:start="3835:13" pos:end="3835:24"><operator pos:start="3835:13" pos:end="3835:13">(</operator><name pos:start="3835:14" pos:end="3835:14">b</name> <operator pos:start="3835:16" pos:end="3835:16">&amp;</operator> <literal type="number" pos:start="3835:18" pos:end="3835:18">1</literal><operator pos:start="3835:19" pos:end="3835:19">)</operator> <operator pos:start="3835:21" pos:end="3835:22">==</operator> <literal type="number" pos:start="3835:24" pos:end="3835:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3837:13" pos:end="3837:25"><block_content pos:start="3837:13" pos:end="3837:25">

            <expr_stmt pos:start="3837:13" pos:end="3837:25"><expr pos:start="3837:13" pos:end="3837:24"><name pos:start="3837:13" pos:end="3837:14">ot</name> <operator pos:start="3837:16" pos:end="3837:16">=</operator> <name pos:start="3837:18" pos:end="3837:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3839:9" pos:end="3841:33">else<block type="pseudo" pos:start="3841:13" pos:end="3841:33"><block_content pos:start="3841:13" pos:end="3841:33">

            <expr_stmt pos:start="3841:13" pos:end="3841:33"><expr pos:start="3841:13" pos:end="3841:32"><name pos:start="3841:13" pos:end="3841:14">ot</name> <operator pos:start="3841:16" pos:end="3841:16">=</operator> <name pos:start="3841:18" pos:end="3841:22">dflag</name> <operator pos:start="3841:24" pos:end="3841:24">+</operator> <name pos:start="3841:26" pos:end="3841:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="3845:9" pos:end="3853:9"><if pos:start="3845:9" pos:end="3849:9">if <condition pos:start="3845:12" pos:end="3845:52">(<expr pos:start="3845:13" pos:end="3845:51"><name pos:start="3845:13" pos:end="3845:20">prefixes</name> <operator pos:start="3845:22" pos:end="3845:22">&amp;</operator> <operator pos:start="3845:24" pos:end="3845:24">(</operator><name pos:start="3845:25" pos:end="3845:35">PREFIX_REPZ</name> <operator pos:start="3845:37" pos:end="3845:37">|</operator> <name pos:start="3845:39" pos:end="3845:50">PREFIX_REPNZ</name><operator pos:start="3845:51" pos:end="3845:51">)</operator></expr>)</condition> <block pos:start="3845:54" pos:end="3849:9">{<block_content pos:start="3847:13" pos:end="3847:76">

            <expr_stmt pos:start="3847:13" pos:end="3847:76"><expr pos:start="3847:13" pos:end="3847:75"><call pos:start="3847:13" pos:end="3847:75"><name pos:start="3847:13" pos:end="3847:25">gen_repz_stos</name><argument_list pos:start="3847:26" pos:end="3847:75">(<argument pos:start="3847:27" pos:end="3847:27"><expr pos:start="3847:27" pos:end="3847:27"><name pos:start="3847:27" pos:end="3847:27">s</name></expr></argument>, <argument pos:start="3847:30" pos:end="3847:31"><expr pos:start="3847:30" pos:end="3847:31"><name pos:start="3847:30" pos:end="3847:31">ot</name></expr></argument>, <argument pos:start="3847:34" pos:end="3847:54"><expr pos:start="3847:34" pos:end="3847:54"><name pos:start="3847:34" pos:end="3847:41">pc_start</name> <operator pos:start="3847:43" pos:end="3847:43">-</operator> <name pos:start="3847:45" pos:end="3847:54"><name pos:start="3847:45" pos:end="3847:45">s</name><operator pos:start="3847:46" pos:end="3847:47">-&gt;</operator><name pos:start="3847:48" pos:end="3847:54">cs_base</name></name></expr></argument>, <argument pos:start="3847:57" pos:end="3847:74"><expr pos:start="3847:57" pos:end="3847:74"><name pos:start="3847:57" pos:end="3847:61"><name pos:start="3847:57" pos:end="3847:57">s</name><operator pos:start="3847:58" pos:end="3847:59">-&gt;</operator><name pos:start="3847:60" pos:end="3847:61">pc</name></name> <operator pos:start="3847:63" pos:end="3847:63">-</operator> <name pos:start="3847:65" pos:end="3847:74"><name pos:start="3847:65" pos:end="3847:65">s</name><operator pos:start="3847:66" pos:end="3847:67">-&gt;</operator><name pos:start="3847:68" pos:end="3847:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3849:11" pos:end="3853:9">else <block pos:start="3849:16" pos:end="3853:9">{<block_content pos:start="3851:13" pos:end="3851:28">

            <expr_stmt pos:start="3851:13" pos:end="3851:28"><expr pos:start="3851:13" pos:end="3851:27"><call pos:start="3851:13" pos:end="3851:27"><name pos:start="3851:13" pos:end="3851:20">gen_stos</name><argument_list pos:start="3851:21" pos:end="3851:27">(<argument pos:start="3851:22" pos:end="3851:22"><expr pos:start="3851:22" pos:end="3851:22"><name pos:start="3851:22" pos:end="3851:22">s</name></expr></argument>, <argument pos:start="3851:25" pos:end="3851:26"><expr pos:start="3851:25" pos:end="3851:26"><name pos:start="3851:25" pos:end="3851:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3855:9" pos:end="3855:14">break;</break>

    <case pos:start="3857:5" pos:end="3857:14">case <expr pos:start="3857:10" pos:end="3857:13"><literal type="number" pos:start="3857:10" pos:end="3857:13">0xac</literal></expr>:</case> <comment type="block" pos:start="3857:16" pos:end="3857:26">/* lodsS */</comment>

    <case pos:start="3859:5" pos:end="3859:14">case <expr pos:start="3859:10" pos:end="3859:13"><literal type="number" pos:start="3859:10" pos:end="3859:13">0xad</literal></expr>:</case>

        <if_stmt pos:start="3861:9" pos:end="3867:33"><if pos:start="3861:9" pos:end="3863:25">if <condition pos:start="3861:12" pos:end="3861:25">(<expr pos:start="3861:13" pos:end="3861:24"><operator pos:start="3861:13" pos:end="3861:13">(</operator><name pos:start="3861:14" pos:end="3861:14">b</name> <operator pos:start="3861:16" pos:end="3861:16">&amp;</operator> <literal type="number" pos:start="3861:18" pos:end="3861:18">1</literal><operator pos:start="3861:19" pos:end="3861:19">)</operator> <operator pos:start="3861:21" pos:end="3861:22">==</operator> <literal type="number" pos:start="3861:24" pos:end="3861:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3863:13" pos:end="3863:25"><block_content pos:start="3863:13" pos:end="3863:25">

            <expr_stmt pos:start="3863:13" pos:end="3863:25"><expr pos:start="3863:13" pos:end="3863:24"><name pos:start="3863:13" pos:end="3863:14">ot</name> <operator pos:start="3863:16" pos:end="3863:16">=</operator> <name pos:start="3863:18" pos:end="3863:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3865:9" pos:end="3867:33">else<block type="pseudo" pos:start="3867:13" pos:end="3867:33"><block_content pos:start="3867:13" pos:end="3867:33">

            <expr_stmt pos:start="3867:13" pos:end="3867:33"><expr pos:start="3867:13" pos:end="3867:32"><name pos:start="3867:13" pos:end="3867:14">ot</name> <operator pos:start="3867:16" pos:end="3867:16">=</operator> <name pos:start="3867:18" pos:end="3867:22">dflag</name> <operator pos:start="3867:24" pos:end="3867:24">+</operator> <name pos:start="3867:26" pos:end="3867:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="3869:9" pos:end="3877:9"><if pos:start="3869:9" pos:end="3873:9">if <condition pos:start="3869:12" pos:end="3869:52">(<expr pos:start="3869:13" pos:end="3869:51"><name pos:start="3869:13" pos:end="3869:20">prefixes</name> <operator pos:start="3869:22" pos:end="3869:22">&amp;</operator> <operator pos:start="3869:24" pos:end="3869:24">(</operator><name pos:start="3869:25" pos:end="3869:35">PREFIX_REPZ</name> <operator pos:start="3869:37" pos:end="3869:37">|</operator> <name pos:start="3869:39" pos:end="3869:50">PREFIX_REPNZ</name><operator pos:start="3869:51" pos:end="3869:51">)</operator></expr>)</condition> <block pos:start="3869:54" pos:end="3873:9">{<block_content pos:start="3871:13" pos:end="3871:76">

            <expr_stmt pos:start="3871:13" pos:end="3871:76"><expr pos:start="3871:13" pos:end="3871:75"><call pos:start="3871:13" pos:end="3871:75"><name pos:start="3871:13" pos:end="3871:25">gen_repz_lods</name><argument_list pos:start="3871:26" pos:end="3871:75">(<argument pos:start="3871:27" pos:end="3871:27"><expr pos:start="3871:27" pos:end="3871:27"><name pos:start="3871:27" pos:end="3871:27">s</name></expr></argument>, <argument pos:start="3871:30" pos:end="3871:31"><expr pos:start="3871:30" pos:end="3871:31"><name pos:start="3871:30" pos:end="3871:31">ot</name></expr></argument>, <argument pos:start="3871:34" pos:end="3871:54"><expr pos:start="3871:34" pos:end="3871:54"><name pos:start="3871:34" pos:end="3871:41">pc_start</name> <operator pos:start="3871:43" pos:end="3871:43">-</operator> <name pos:start="3871:45" pos:end="3871:54"><name pos:start="3871:45" pos:end="3871:45">s</name><operator pos:start="3871:46" pos:end="3871:47">-&gt;</operator><name pos:start="3871:48" pos:end="3871:54">cs_base</name></name></expr></argument>, <argument pos:start="3871:57" pos:end="3871:74"><expr pos:start="3871:57" pos:end="3871:74"><name pos:start="3871:57" pos:end="3871:61"><name pos:start="3871:57" pos:end="3871:57">s</name><operator pos:start="3871:58" pos:end="3871:59">-&gt;</operator><name pos:start="3871:60" pos:end="3871:61">pc</name></name> <operator pos:start="3871:63" pos:end="3871:63">-</operator> <name pos:start="3871:65" pos:end="3871:74"><name pos:start="3871:65" pos:end="3871:65">s</name><operator pos:start="3871:66" pos:end="3871:67">-&gt;</operator><name pos:start="3871:68" pos:end="3871:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3873:11" pos:end="3877:9">else <block pos:start="3873:16" pos:end="3877:9">{<block_content pos:start="3875:13" pos:end="3875:28">

            <expr_stmt pos:start="3875:13" pos:end="3875:28"><expr pos:start="3875:13" pos:end="3875:27"><call pos:start="3875:13" pos:end="3875:27"><name pos:start="3875:13" pos:end="3875:20">gen_lods</name><argument_list pos:start="3875:21" pos:end="3875:27">(<argument pos:start="3875:22" pos:end="3875:22"><expr pos:start="3875:22" pos:end="3875:22"><name pos:start="3875:22" pos:end="3875:22">s</name></expr></argument>, <argument pos:start="3875:25" pos:end="3875:26"><expr pos:start="3875:25" pos:end="3875:26"><name pos:start="3875:25" pos:end="3875:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3879:9" pos:end="3879:14">break;</break>

    <case pos:start="3881:5" pos:end="3881:14">case <expr pos:start="3881:10" pos:end="3881:13"><literal type="number" pos:start="3881:10" pos:end="3881:13">0xae</literal></expr>:</case> <comment type="block" pos:start="3881:16" pos:end="3881:26">/* scasS */</comment>

    <case pos:start="3883:5" pos:end="3883:14">case <expr pos:start="3883:10" pos:end="3883:13"><literal type="number" pos:start="3883:10" pos:end="3883:13">0xaf</literal></expr>:</case>

        <if_stmt pos:start="3885:9" pos:end="3891:33"><if pos:start="3885:9" pos:end="3887:25">if <condition pos:start="3885:12" pos:end="3885:25">(<expr pos:start="3885:13" pos:end="3885:24"><operator pos:start="3885:13" pos:end="3885:13">(</operator><name pos:start="3885:14" pos:end="3885:14">b</name> <operator pos:start="3885:16" pos:end="3885:16">&amp;</operator> <literal type="number" pos:start="3885:18" pos:end="3885:18">1</literal><operator pos:start="3885:19" pos:end="3885:19">)</operator> <operator pos:start="3885:21" pos:end="3885:22">==</operator> <literal type="number" pos:start="3885:24" pos:end="3885:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3887:13" pos:end="3887:25"><block_content pos:start="3887:13" pos:end="3887:25">

            <expr_stmt pos:start="3887:13" pos:end="3887:25"><expr pos:start="3887:13" pos:end="3887:24"><name pos:start="3887:13" pos:end="3887:14">ot</name> <operator pos:start="3887:16" pos:end="3887:16">=</operator> <name pos:start="3887:18" pos:end="3887:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3889:9" pos:end="3891:33">else<block type="pseudo" pos:start="3891:13" pos:end="3891:33"><block_content pos:start="3891:13" pos:end="3891:33">

            <expr_stmt pos:start="3891:13" pos:end="3891:33"><expr pos:start="3891:13" pos:end="3891:32"><name pos:start="3891:13" pos:end="3891:14">ot</name> <operator pos:start="3891:16" pos:end="3891:16">=</operator> <name pos:start="3891:18" pos:end="3891:22">dflag</name> <operator pos:start="3891:24" pos:end="3891:24">+</operator> <name pos:start="3891:26" pos:end="3891:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="3893:9" pos:end="3905:9"><if pos:start="3893:9" pos:end="3897:9">if <condition pos:start="3893:12" pos:end="3893:36">(<expr pos:start="3893:13" pos:end="3893:35"><name pos:start="3893:13" pos:end="3893:20">prefixes</name> <operator pos:start="3893:22" pos:end="3893:22">&amp;</operator> <name pos:start="3893:24" pos:end="3893:35">PREFIX_REPNZ</name></expr>)</condition> <block pos:start="3893:38" pos:end="3897:9">{<block_content pos:start="3895:13" pos:end="3895:79">

            <expr_stmt pos:start="3895:13" pos:end="3895:79"><expr pos:start="3895:13" pos:end="3895:78"><call pos:start="3895:13" pos:end="3895:78"><name pos:start="3895:13" pos:end="3895:25">gen_repz_scas</name><argument_list pos:start="3895:26" pos:end="3895:78">(<argument pos:start="3895:27" pos:end="3895:27"><expr pos:start="3895:27" pos:end="3895:27"><name pos:start="3895:27" pos:end="3895:27">s</name></expr></argument>, <argument pos:start="3895:30" pos:end="3895:31"><expr pos:start="3895:30" pos:end="3895:31"><name pos:start="3895:30" pos:end="3895:31">ot</name></expr></argument>, <argument pos:start="3895:34" pos:end="3895:54"><expr pos:start="3895:34" pos:end="3895:54"><name pos:start="3895:34" pos:end="3895:41">pc_start</name> <operator pos:start="3895:43" pos:end="3895:43">-</operator> <name pos:start="3895:45" pos:end="3895:54"><name pos:start="3895:45" pos:end="3895:45">s</name><operator pos:start="3895:46" pos:end="3895:47">-&gt;</operator><name pos:start="3895:48" pos:end="3895:54">cs_base</name></name></expr></argument>, <argument pos:start="3895:57" pos:end="3895:74"><expr pos:start="3895:57" pos:end="3895:74"><name pos:start="3895:57" pos:end="3895:61"><name pos:start="3895:57" pos:end="3895:57">s</name><operator pos:start="3895:58" pos:end="3895:59">-&gt;</operator><name pos:start="3895:60" pos:end="3895:61">pc</name></name> <operator pos:start="3895:63" pos:end="3895:63">-</operator> <name pos:start="3895:65" pos:end="3895:74"><name pos:start="3895:65" pos:end="3895:65">s</name><operator pos:start="3895:66" pos:end="3895:67">-&gt;</operator><name pos:start="3895:68" pos:end="3895:74">cs_base</name></name></expr></argument>, <argument pos:start="3895:77" pos:end="3895:77"><expr pos:start="3895:77" pos:end="3895:77"><literal type="number" pos:start="3895:77" pos:end="3895:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="3897:11" pos:end="3901:9">else if <condition pos:start="3897:19" pos:end="3897:42">(<expr pos:start="3897:20" pos:end="3897:41"><name pos:start="3897:20" pos:end="3897:27">prefixes</name> <operator pos:start="3897:29" pos:end="3897:29">&amp;</operator> <name pos:start="3897:31" pos:end="3897:41">PREFIX_REPZ</name></expr>)</condition> <block pos:start="3897:44" pos:end="3901:9">{<block_content pos:start="3899:13" pos:end="3899:79">

            <expr_stmt pos:start="3899:13" pos:end="3899:79"><expr pos:start="3899:13" pos:end="3899:78"><call pos:start="3899:13" pos:end="3899:78"><name pos:start="3899:13" pos:end="3899:25">gen_repz_scas</name><argument_list pos:start="3899:26" pos:end="3899:78">(<argument pos:start="3899:27" pos:end="3899:27"><expr pos:start="3899:27" pos:end="3899:27"><name pos:start="3899:27" pos:end="3899:27">s</name></expr></argument>, <argument pos:start="3899:30" pos:end="3899:31"><expr pos:start="3899:30" pos:end="3899:31"><name pos:start="3899:30" pos:end="3899:31">ot</name></expr></argument>, <argument pos:start="3899:34" pos:end="3899:54"><expr pos:start="3899:34" pos:end="3899:54"><name pos:start="3899:34" pos:end="3899:41">pc_start</name> <operator pos:start="3899:43" pos:end="3899:43">-</operator> <name pos:start="3899:45" pos:end="3899:54"><name pos:start="3899:45" pos:end="3899:45">s</name><operator pos:start="3899:46" pos:end="3899:47">-&gt;</operator><name pos:start="3899:48" pos:end="3899:54">cs_base</name></name></expr></argument>, <argument pos:start="3899:57" pos:end="3899:74"><expr pos:start="3899:57" pos:end="3899:74"><name pos:start="3899:57" pos:end="3899:61"><name pos:start="3899:57" pos:end="3899:57">s</name><operator pos:start="3899:58" pos:end="3899:59">-&gt;</operator><name pos:start="3899:60" pos:end="3899:61">pc</name></name> <operator pos:start="3899:63" pos:end="3899:63">-</operator> <name pos:start="3899:65" pos:end="3899:74"><name pos:start="3899:65" pos:end="3899:65">s</name><operator pos:start="3899:66" pos:end="3899:67">-&gt;</operator><name pos:start="3899:68" pos:end="3899:74">cs_base</name></name></expr></argument>, <argument pos:start="3899:77" pos:end="3899:77"><expr pos:start="3899:77" pos:end="3899:77"><literal type="number" pos:start="3899:77" pos:end="3899:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3901:11" pos:end="3905:9">else <block pos:start="3901:16" pos:end="3905:9">{<block_content pos:start="3903:13" pos:end="3903:28">

            <expr_stmt pos:start="3903:13" pos:end="3903:28"><expr pos:start="3903:13" pos:end="3903:27"><call pos:start="3903:13" pos:end="3903:27"><name pos:start="3903:13" pos:end="3903:20">gen_scas</name><argument_list pos:start="3903:21" pos:end="3903:27">(<argument pos:start="3903:22" pos:end="3903:22"><expr pos:start="3903:22" pos:end="3903:22"><name pos:start="3903:22" pos:end="3903:22">s</name></expr></argument>, <argument pos:start="3903:25" pos:end="3903:26"><expr pos:start="3903:25" pos:end="3903:26"><name pos:start="3903:25" pos:end="3903:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3907:9" pos:end="3907:14">break;</break>



    <case pos:start="3911:5" pos:end="3911:14">case <expr pos:start="3911:10" pos:end="3911:13"><literal type="number" pos:start="3911:10" pos:end="3911:13">0xa6</literal></expr>:</case> <comment type="block" pos:start="3911:16" pos:end="3911:26">/* cmpsS */</comment>

    <case pos:start="3913:5" pos:end="3913:14">case <expr pos:start="3913:10" pos:end="3913:13"><literal type="number" pos:start="3913:10" pos:end="3913:13">0xa7</literal></expr>:</case>

        <if_stmt pos:start="3915:9" pos:end="3921:33"><if pos:start="3915:9" pos:end="3917:25">if <condition pos:start="3915:12" pos:end="3915:25">(<expr pos:start="3915:13" pos:end="3915:24"><operator pos:start="3915:13" pos:end="3915:13">(</operator><name pos:start="3915:14" pos:end="3915:14">b</name> <operator pos:start="3915:16" pos:end="3915:16">&amp;</operator> <literal type="number" pos:start="3915:18" pos:end="3915:18">1</literal><operator pos:start="3915:19" pos:end="3915:19">)</operator> <operator pos:start="3915:21" pos:end="3915:22">==</operator> <literal type="number" pos:start="3915:24" pos:end="3915:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3917:13" pos:end="3917:25"><block_content pos:start="3917:13" pos:end="3917:25">

            <expr_stmt pos:start="3917:13" pos:end="3917:25"><expr pos:start="3917:13" pos:end="3917:24"><name pos:start="3917:13" pos:end="3917:14">ot</name> <operator pos:start="3917:16" pos:end="3917:16">=</operator> <name pos:start="3917:18" pos:end="3917:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3919:9" pos:end="3921:33">else<block type="pseudo" pos:start="3921:13" pos:end="3921:33"><block_content pos:start="3921:13" pos:end="3921:33">

            <expr_stmt pos:start="3921:13" pos:end="3921:33"><expr pos:start="3921:13" pos:end="3921:32"><name pos:start="3921:13" pos:end="3921:14">ot</name> <operator pos:start="3921:16" pos:end="3921:16">=</operator> <name pos:start="3921:18" pos:end="3921:22">dflag</name> <operator pos:start="3921:24" pos:end="3921:24">+</operator> <name pos:start="3921:26" pos:end="3921:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="3923:9" pos:end="3935:9"><if pos:start="3923:9" pos:end="3927:9">if <condition pos:start="3923:12" pos:end="3923:36">(<expr pos:start="3923:13" pos:end="3923:35"><name pos:start="3923:13" pos:end="3923:20">prefixes</name> <operator pos:start="3923:22" pos:end="3923:22">&amp;</operator> <name pos:start="3923:24" pos:end="3923:35">PREFIX_REPNZ</name></expr>)</condition> <block pos:start="3923:38" pos:end="3927:9">{<block_content pos:start="3925:13" pos:end="3925:79">

            <expr_stmt pos:start="3925:13" pos:end="3925:79"><expr pos:start="3925:13" pos:end="3925:78"><call pos:start="3925:13" pos:end="3925:78"><name pos:start="3925:13" pos:end="3925:25">gen_repz_cmps</name><argument_list pos:start="3925:26" pos:end="3925:78">(<argument pos:start="3925:27" pos:end="3925:27"><expr pos:start="3925:27" pos:end="3925:27"><name pos:start="3925:27" pos:end="3925:27">s</name></expr></argument>, <argument pos:start="3925:30" pos:end="3925:31"><expr pos:start="3925:30" pos:end="3925:31"><name pos:start="3925:30" pos:end="3925:31">ot</name></expr></argument>, <argument pos:start="3925:34" pos:end="3925:54"><expr pos:start="3925:34" pos:end="3925:54"><name pos:start="3925:34" pos:end="3925:41">pc_start</name> <operator pos:start="3925:43" pos:end="3925:43">-</operator> <name pos:start="3925:45" pos:end="3925:54"><name pos:start="3925:45" pos:end="3925:45">s</name><operator pos:start="3925:46" pos:end="3925:47">-&gt;</operator><name pos:start="3925:48" pos:end="3925:54">cs_base</name></name></expr></argument>, <argument pos:start="3925:57" pos:end="3925:74"><expr pos:start="3925:57" pos:end="3925:74"><name pos:start="3925:57" pos:end="3925:61"><name pos:start="3925:57" pos:end="3925:57">s</name><operator pos:start="3925:58" pos:end="3925:59">-&gt;</operator><name pos:start="3925:60" pos:end="3925:61">pc</name></name> <operator pos:start="3925:63" pos:end="3925:63">-</operator> <name pos:start="3925:65" pos:end="3925:74"><name pos:start="3925:65" pos:end="3925:65">s</name><operator pos:start="3925:66" pos:end="3925:67">-&gt;</operator><name pos:start="3925:68" pos:end="3925:74">cs_base</name></name></expr></argument>, <argument pos:start="3925:77" pos:end="3925:77"><expr pos:start="3925:77" pos:end="3925:77"><literal type="number" pos:start="3925:77" pos:end="3925:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="3927:11" pos:end="3931:9">else if <condition pos:start="3927:19" pos:end="3927:42">(<expr pos:start="3927:20" pos:end="3927:41"><name pos:start="3927:20" pos:end="3927:27">prefixes</name> <operator pos:start="3927:29" pos:end="3927:29">&amp;</operator> <name pos:start="3927:31" pos:end="3927:41">PREFIX_REPZ</name></expr>)</condition> <block pos:start="3927:44" pos:end="3931:9">{<block_content pos:start="3929:13" pos:end="3929:79">

            <expr_stmt pos:start="3929:13" pos:end="3929:79"><expr pos:start="3929:13" pos:end="3929:78"><call pos:start="3929:13" pos:end="3929:78"><name pos:start="3929:13" pos:end="3929:25">gen_repz_cmps</name><argument_list pos:start="3929:26" pos:end="3929:78">(<argument pos:start="3929:27" pos:end="3929:27"><expr pos:start="3929:27" pos:end="3929:27"><name pos:start="3929:27" pos:end="3929:27">s</name></expr></argument>, <argument pos:start="3929:30" pos:end="3929:31"><expr pos:start="3929:30" pos:end="3929:31"><name pos:start="3929:30" pos:end="3929:31">ot</name></expr></argument>, <argument pos:start="3929:34" pos:end="3929:54"><expr pos:start="3929:34" pos:end="3929:54"><name pos:start="3929:34" pos:end="3929:41">pc_start</name> <operator pos:start="3929:43" pos:end="3929:43">-</operator> <name pos:start="3929:45" pos:end="3929:54"><name pos:start="3929:45" pos:end="3929:45">s</name><operator pos:start="3929:46" pos:end="3929:47">-&gt;</operator><name pos:start="3929:48" pos:end="3929:54">cs_base</name></name></expr></argument>, <argument pos:start="3929:57" pos:end="3929:74"><expr pos:start="3929:57" pos:end="3929:74"><name pos:start="3929:57" pos:end="3929:61"><name pos:start="3929:57" pos:end="3929:57">s</name><operator pos:start="3929:58" pos:end="3929:59">-&gt;</operator><name pos:start="3929:60" pos:end="3929:61">pc</name></name> <operator pos:start="3929:63" pos:end="3929:63">-</operator> <name pos:start="3929:65" pos:end="3929:74"><name pos:start="3929:65" pos:end="3929:65">s</name><operator pos:start="3929:66" pos:end="3929:67">-&gt;</operator><name pos:start="3929:68" pos:end="3929:74">cs_base</name></name></expr></argument>, <argument pos:start="3929:77" pos:end="3929:77"><expr pos:start="3929:77" pos:end="3929:77"><literal type="number" pos:start="3929:77" pos:end="3929:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3931:11" pos:end="3935:9">else <block pos:start="3931:16" pos:end="3935:9">{<block_content pos:start="3933:13" pos:end="3933:28">

            <expr_stmt pos:start="3933:13" pos:end="3933:28"><expr pos:start="3933:13" pos:end="3933:27"><call pos:start="3933:13" pos:end="3933:27"><name pos:start="3933:13" pos:end="3933:20">gen_cmps</name><argument_list pos:start="3933:21" pos:end="3933:27">(<argument pos:start="3933:22" pos:end="3933:22"><expr pos:start="3933:22" pos:end="3933:22"><name pos:start="3933:22" pos:end="3933:22">s</name></expr></argument>, <argument pos:start="3933:25" pos:end="3933:26"><expr pos:start="3933:25" pos:end="3933:26"><name pos:start="3933:25" pos:end="3933:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3937:9" pos:end="3937:14">break;</break>

    <case pos:start="3939:5" pos:end="3939:14">case <expr pos:start="3939:10" pos:end="3939:13"><literal type="number" pos:start="3939:10" pos:end="3939:13">0x6c</literal></expr>:</case> <comment type="block" pos:start="3939:16" pos:end="3939:25">/* insS */</comment>

    <case pos:start="3941:5" pos:end="3941:14">case <expr pos:start="3941:10" pos:end="3941:13"><literal type="number" pos:start="3941:10" pos:end="3941:13">0x6d</literal></expr>:</case>

        <if_stmt pos:start="3943:9" pos:end="3949:43"><if pos:start="3943:9" pos:end="3945:25">if <condition pos:start="3943:12" pos:end="3943:25">(<expr pos:start="3943:13" pos:end="3943:24"><operator pos:start="3943:13" pos:end="3943:13">(</operator><name pos:start="3943:14" pos:end="3943:14">b</name> <operator pos:start="3943:16" pos:end="3943:16">&amp;</operator> <literal type="number" pos:start="3943:18" pos:end="3943:18">1</literal><operator pos:start="3943:19" pos:end="3943:19">)</operator> <operator pos:start="3943:21" pos:end="3943:22">==</operator> <literal type="number" pos:start="3943:24" pos:end="3943:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3945:13" pos:end="3945:25"><block_content pos:start="3945:13" pos:end="3945:25">

            <expr_stmt pos:start="3945:13" pos:end="3945:25"><expr pos:start="3945:13" pos:end="3945:24"><name pos:start="3945:13" pos:end="3945:14">ot</name> <operator pos:start="3945:16" pos:end="3945:16">=</operator> <name pos:start="3945:18" pos:end="3945:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3947:9" pos:end="3949:43">else<block type="pseudo" pos:start="3949:13" pos:end="3949:43"><block_content pos:start="3949:13" pos:end="3949:43">

            <expr_stmt pos:start="3949:13" pos:end="3949:43"><expr pos:start="3949:13" pos:end="3949:42"><name pos:start="3949:13" pos:end="3949:14">ot</name> <operator pos:start="3949:16" pos:end="3949:16">=</operator> <ternary pos:start="3949:18" pos:end="3949:42"><condition pos:start="3949:18" pos:end="3949:24"><expr pos:start="3949:18" pos:end="3949:22"><name pos:start="3949:18" pos:end="3949:22">dflag</name></expr> ?</condition><then pos:start="3949:26" pos:end="3949:32"> <expr pos:start="3949:26" pos:end="3949:32"><name pos:start="3949:26" pos:end="3949:32">OT_LONG</name></expr> </then><else pos:start="3949:34" pos:end="3949:42">: <expr pos:start="3949:36" pos:end="3949:42"><name pos:start="3949:36" pos:end="3949:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="3951:9" pos:end="3951:45"><expr pos:start="3951:9" pos:end="3951:44"><call pos:start="3951:9" pos:end="3951:44"><name pos:start="3951:9" pos:end="3951:25">gen_op_mov_TN_reg</name><argument_list pos:start="3951:26" pos:end="3951:44">(<argument pos:start="3951:27" pos:end="3951:33"><expr pos:start="3951:27" pos:end="3951:33"><name pos:start="3951:27" pos:end="3951:33">OT_WORD</name></expr></argument>, <argument pos:start="3951:36" pos:end="3951:36"><expr pos:start="3951:36" pos:end="3951:36"><literal type="number" pos:start="3951:36" pos:end="3951:36">0</literal></expr></argument>, <argument pos:start="3951:39" pos:end="3951:43"><expr pos:start="3951:39" pos:end="3951:43"><name pos:start="3951:39" pos:end="3951:43">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3953:9" pos:end="3953:30"><expr pos:start="3953:9" pos:end="3953:29"><call pos:start="3953:9" pos:end="3953:29"><name pos:start="3953:9" pos:end="3953:27">gen_op_andl_T0_ffff</name><argument_list pos:start="3953:28" pos:end="3953:29">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3955:9" pos:end="3957:68"><expr pos:start="3955:9" pos:end="3957:67"><call pos:start="3955:9" pos:end="3957:67"><name pos:start="3955:9" pos:end="3955:20">gen_check_io</name><argument_list pos:start="3955:21" pos:end="3957:67">(<argument pos:start="3955:22" pos:end="3955:22"><expr pos:start="3955:22" pos:end="3955:22"><name pos:start="3955:22" pos:end="3955:22">s</name></expr></argument>, <argument pos:start="3955:25" pos:end="3955:26"><expr pos:start="3955:25" pos:end="3955:26"><name pos:start="3955:25" pos:end="3955:26">ot</name></expr></argument>, <argument pos:start="3955:29" pos:end="3955:49"><expr pos:start="3955:29" pos:end="3955:49"><name pos:start="3955:29" pos:end="3955:36">pc_start</name> <operator pos:start="3955:38" pos:end="3955:38">-</operator> <name pos:start="3955:40" pos:end="3955:49"><name pos:start="3955:40" pos:end="3955:40">s</name><operator pos:start="3955:41" pos:end="3955:42">-&gt;</operator><name pos:start="3955:43" pos:end="3955:49">cs_base</name></name></expr></argument>, 

                     <argument pos:start="3957:22" pos:end="3957:66"><expr pos:start="3957:22" pos:end="3957:66"><name pos:start="3957:22" pos:end="3957:39">SVM_IOIO_TYPE_MASK</name> <operator pos:start="3957:41" pos:end="3957:41">|</operator> <call pos:start="3957:43" pos:end="3957:62"><name pos:start="3957:43" pos:end="3957:52">svm_is_rep</name><argument_list pos:start="3957:53" pos:end="3957:62">(<argument pos:start="3957:54" pos:end="3957:61"><expr pos:start="3957:54" pos:end="3957:61"><name pos:start="3957:54" pos:end="3957:61">prefixes</name></expr></argument>)</argument_list></call> <operator pos:start="3957:64" pos:end="3957:64">|</operator> <literal type="number" pos:start="3957:66" pos:end="3957:66">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3959:9" pos:end="3973:9"><if pos:start="3959:9" pos:end="3963:9">if <condition pos:start="3959:12" pos:end="3959:52">(<expr pos:start="3959:13" pos:end="3959:51"><name pos:start="3959:13" pos:end="3959:20">prefixes</name> <operator pos:start="3959:22" pos:end="3959:22">&amp;</operator> <operator pos:start="3959:24" pos:end="3959:24">(</operator><name pos:start="3959:25" pos:end="3959:35">PREFIX_REPZ</name> <operator pos:start="3959:37" pos:end="3959:37">|</operator> <name pos:start="3959:39" pos:end="3959:50">PREFIX_REPNZ</name><operator pos:start="3959:51" pos:end="3959:51">)</operator></expr>)</condition> <block pos:start="3959:54" pos:end="3963:9">{<block_content pos:start="3961:13" pos:end="3961:75">

            <expr_stmt pos:start="3961:13" pos:end="3961:75"><expr pos:start="3961:13" pos:end="3961:74"><call pos:start="3961:13" pos:end="3961:74"><name pos:start="3961:13" pos:end="3961:24">gen_repz_ins</name><argument_list pos:start="3961:25" pos:end="3961:74">(<argument pos:start="3961:26" pos:end="3961:26"><expr pos:start="3961:26" pos:end="3961:26"><name pos:start="3961:26" pos:end="3961:26">s</name></expr></argument>, <argument pos:start="3961:29" pos:end="3961:30"><expr pos:start="3961:29" pos:end="3961:30"><name pos:start="3961:29" pos:end="3961:30">ot</name></expr></argument>, <argument pos:start="3961:33" pos:end="3961:53"><expr pos:start="3961:33" pos:end="3961:53"><name pos:start="3961:33" pos:end="3961:40">pc_start</name> <operator pos:start="3961:42" pos:end="3961:42">-</operator> <name pos:start="3961:44" pos:end="3961:53"><name pos:start="3961:44" pos:end="3961:44">s</name><operator pos:start="3961:45" pos:end="3961:46">-&gt;</operator><name pos:start="3961:47" pos:end="3961:53">cs_base</name></name></expr></argument>, <argument pos:start="3961:56" pos:end="3961:73"><expr pos:start="3961:56" pos:end="3961:73"><name pos:start="3961:56" pos:end="3961:60"><name pos:start="3961:56" pos:end="3961:56">s</name><operator pos:start="3961:57" pos:end="3961:58">-&gt;</operator><name pos:start="3961:59" pos:end="3961:60">pc</name></name> <operator pos:start="3961:62" pos:end="3961:62">-</operator> <name pos:start="3961:64" pos:end="3961:73"><name pos:start="3961:64" pos:end="3961:64">s</name><operator pos:start="3961:65" pos:end="3961:66">-&gt;</operator><name pos:start="3961:67" pos:end="3961:73">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3963:11" pos:end="3973:9">else <block pos:start="3963:16" pos:end="3973:9">{<block_content pos:start="3965:13" pos:end="3971:13">

            <expr_stmt pos:start="3965:13" pos:end="3965:27"><expr pos:start="3965:13" pos:end="3965:26"><call pos:start="3965:13" pos:end="3965:26"><name pos:start="3965:13" pos:end="3965:19">gen_ins</name><argument_list pos:start="3965:20" pos:end="3965:26">(<argument pos:start="3965:21" pos:end="3965:21"><expr pos:start="3965:21" pos:end="3965:21"><name pos:start="3965:21" pos:end="3965:21">s</name></expr></argument>, <argument pos:start="3965:24" pos:end="3965:25"><expr pos:start="3965:24" pos:end="3965:25"><name pos:start="3965:24" pos:end="3965:25">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3967:13" pos:end="3971:13"><if pos:start="3967:13" pos:end="3971:13">if <condition pos:start="3967:16" pos:end="3967:27">(<expr pos:start="3967:17" pos:end="3967:26"><name pos:start="3967:17" pos:end="3967:26">use_icount</name></expr>)</condition> <block pos:start="3967:29" pos:end="3971:13">{<block_content pos:start="3969:17" pos:end="3969:47">

                <expr_stmt pos:start="3969:17" pos:end="3969:47"><expr pos:start="3969:17" pos:end="3969:46"><call pos:start="3969:17" pos:end="3969:46"><name pos:start="3969:17" pos:end="3969:23">gen_jmp</name><argument_list pos:start="3969:24" pos:end="3969:46">(<argument pos:start="3969:25" pos:end="3969:25"><expr pos:start="3969:25" pos:end="3969:25"><name pos:start="3969:25" pos:end="3969:25">s</name></expr></argument>, <argument pos:start="3969:28" pos:end="3969:45"><expr pos:start="3969:28" pos:end="3969:45"><name pos:start="3969:28" pos:end="3969:32"><name pos:start="3969:28" pos:end="3969:28">s</name><operator pos:start="3969:29" pos:end="3969:30">-&gt;</operator><name pos:start="3969:31" pos:end="3969:32">pc</name></name> <operator pos:start="3969:34" pos:end="3969:34">-</operator> <name pos:start="3969:36" pos:end="3969:45"><name pos:start="3969:36" pos:end="3969:36">s</name><operator pos:start="3969:37" pos:end="3969:38">-&gt;</operator><name pos:start="3969:39" pos:end="3969:45">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3975:9" pos:end="3975:14">break;</break>

    <case pos:start="3977:5" pos:end="3977:14">case <expr pos:start="3977:10" pos:end="3977:13"><literal type="number" pos:start="3977:10" pos:end="3977:13">0x6e</literal></expr>:</case> <comment type="block" pos:start="3977:16" pos:end="3977:26">/* outsS */</comment>

    <case pos:start="3979:5" pos:end="3979:14">case <expr pos:start="3979:10" pos:end="3979:13"><literal type="number" pos:start="3979:10" pos:end="3979:13">0x6f</literal></expr>:</case>

        <if_stmt pos:start="3981:9" pos:end="3987:43"><if pos:start="3981:9" pos:end="3983:25">if <condition pos:start="3981:12" pos:end="3981:25">(<expr pos:start="3981:13" pos:end="3981:24"><operator pos:start="3981:13" pos:end="3981:13">(</operator><name pos:start="3981:14" pos:end="3981:14">b</name> <operator pos:start="3981:16" pos:end="3981:16">&amp;</operator> <literal type="number" pos:start="3981:18" pos:end="3981:18">1</literal><operator pos:start="3981:19" pos:end="3981:19">)</operator> <operator pos:start="3981:21" pos:end="3981:22">==</operator> <literal type="number" pos:start="3981:24" pos:end="3981:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3983:13" pos:end="3983:25"><block_content pos:start="3983:13" pos:end="3983:25">

            <expr_stmt pos:start="3983:13" pos:end="3983:25"><expr pos:start="3983:13" pos:end="3983:24"><name pos:start="3983:13" pos:end="3983:14">ot</name> <operator pos:start="3983:16" pos:end="3983:16">=</operator> <name pos:start="3983:18" pos:end="3983:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3985:9" pos:end="3987:43">else<block type="pseudo" pos:start="3987:13" pos:end="3987:43"><block_content pos:start="3987:13" pos:end="3987:43">

            <expr_stmt pos:start="3987:13" pos:end="3987:43"><expr pos:start="3987:13" pos:end="3987:42"><name pos:start="3987:13" pos:end="3987:14">ot</name> <operator pos:start="3987:16" pos:end="3987:16">=</operator> <ternary pos:start="3987:18" pos:end="3987:42"><condition pos:start="3987:18" pos:end="3987:24"><expr pos:start="3987:18" pos:end="3987:22"><name pos:start="3987:18" pos:end="3987:22">dflag</name></expr> ?</condition><then pos:start="3987:26" pos:end="3987:32"> <expr pos:start="3987:26" pos:end="3987:32"><name pos:start="3987:26" pos:end="3987:32">OT_LONG</name></expr> </then><else pos:start="3987:34" pos:end="3987:42">: <expr pos:start="3987:36" pos:end="3987:42"><name pos:start="3987:36" pos:end="3987:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="3989:9" pos:end="3989:45"><expr pos:start="3989:9" pos:end="3989:44"><call pos:start="3989:9" pos:end="3989:44"><name pos:start="3989:9" pos:end="3989:25">gen_op_mov_TN_reg</name><argument_list pos:start="3989:26" pos:end="3989:44">(<argument pos:start="3989:27" pos:end="3989:33"><expr pos:start="3989:27" pos:end="3989:33"><name pos:start="3989:27" pos:end="3989:33">OT_WORD</name></expr></argument>, <argument pos:start="3989:36" pos:end="3989:36"><expr pos:start="3989:36" pos:end="3989:36"><literal type="number" pos:start="3989:36" pos:end="3989:36">0</literal></expr></argument>, <argument pos:start="3989:39" pos:end="3989:43"><expr pos:start="3989:39" pos:end="3989:43"><name pos:start="3989:39" pos:end="3989:43">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3991:9" pos:end="3991:30"><expr pos:start="3991:9" pos:end="3991:29"><call pos:start="3991:9" pos:end="3991:29"><name pos:start="3991:9" pos:end="3991:27">gen_op_andl_T0_ffff</name><argument_list pos:start="3991:28" pos:end="3991:29">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3993:9" pos:end="3995:47"><expr pos:start="3993:9" pos:end="3995:46"><call pos:start="3993:9" pos:end="3995:46"><name pos:start="3993:9" pos:end="3993:20">gen_check_io</name><argument_list pos:start="3993:21" pos:end="3995:46">(<argument pos:start="3993:22" pos:end="3993:22"><expr pos:start="3993:22" pos:end="3993:22"><name pos:start="3993:22" pos:end="3993:22">s</name></expr></argument>, <argument pos:start="3993:25" pos:end="3993:26"><expr pos:start="3993:25" pos:end="3993:26"><name pos:start="3993:25" pos:end="3993:26">ot</name></expr></argument>, <argument pos:start="3993:29" pos:end="3993:49"><expr pos:start="3993:29" pos:end="3993:49"><name pos:start="3993:29" pos:end="3993:36">pc_start</name> <operator pos:start="3993:38" pos:end="3993:38">-</operator> <name pos:start="3993:40" pos:end="3993:49"><name pos:start="3993:40" pos:end="3993:40">s</name><operator pos:start="3993:41" pos:end="3993:42">-&gt;</operator><name pos:start="3993:43" pos:end="3993:49">cs_base</name></name></expr></argument>,

                     <argument pos:start="3995:22" pos:end="3995:45"><expr pos:start="3995:22" pos:end="3995:45"><call pos:start="3995:22" pos:end="3995:41"><name pos:start="3995:22" pos:end="3995:31">svm_is_rep</name><argument_list pos:start="3995:32" pos:end="3995:41">(<argument pos:start="3995:33" pos:end="3995:40"><expr pos:start="3995:33" pos:end="3995:40"><name pos:start="3995:33" pos:end="3995:40">prefixes</name></expr></argument>)</argument_list></call> <operator pos:start="3995:43" pos:end="3995:43">|</operator> <literal type="number" pos:start="3995:45" pos:end="3995:45">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3997:9" pos:end="4011:9"><if pos:start="3997:9" pos:end="4001:9">if <condition pos:start="3997:12" pos:end="3997:52">(<expr pos:start="3997:13" pos:end="3997:51"><name pos:start="3997:13" pos:end="3997:20">prefixes</name> <operator pos:start="3997:22" pos:end="3997:22">&amp;</operator> <operator pos:start="3997:24" pos:end="3997:24">(</operator><name pos:start="3997:25" pos:end="3997:35">PREFIX_REPZ</name> <operator pos:start="3997:37" pos:end="3997:37">|</operator> <name pos:start="3997:39" pos:end="3997:50">PREFIX_REPNZ</name><operator pos:start="3997:51" pos:end="3997:51">)</operator></expr>)</condition> <block pos:start="3997:54" pos:end="4001:9">{<block_content pos:start="3999:13" pos:end="3999:76">

            <expr_stmt pos:start="3999:13" pos:end="3999:76"><expr pos:start="3999:13" pos:end="3999:75"><call pos:start="3999:13" pos:end="3999:75"><name pos:start="3999:13" pos:end="3999:25">gen_repz_outs</name><argument_list pos:start="3999:26" pos:end="3999:75">(<argument pos:start="3999:27" pos:end="3999:27"><expr pos:start="3999:27" pos:end="3999:27"><name pos:start="3999:27" pos:end="3999:27">s</name></expr></argument>, <argument pos:start="3999:30" pos:end="3999:31"><expr pos:start="3999:30" pos:end="3999:31"><name pos:start="3999:30" pos:end="3999:31">ot</name></expr></argument>, <argument pos:start="3999:34" pos:end="3999:54"><expr pos:start="3999:34" pos:end="3999:54"><name pos:start="3999:34" pos:end="3999:41">pc_start</name> <operator pos:start="3999:43" pos:end="3999:43">-</operator> <name pos:start="3999:45" pos:end="3999:54"><name pos:start="3999:45" pos:end="3999:45">s</name><operator pos:start="3999:46" pos:end="3999:47">-&gt;</operator><name pos:start="3999:48" pos:end="3999:54">cs_base</name></name></expr></argument>, <argument pos:start="3999:57" pos:end="3999:74"><expr pos:start="3999:57" pos:end="3999:74"><name pos:start="3999:57" pos:end="3999:61"><name pos:start="3999:57" pos:end="3999:57">s</name><operator pos:start="3999:58" pos:end="3999:59">-&gt;</operator><name pos:start="3999:60" pos:end="3999:61">pc</name></name> <operator pos:start="3999:63" pos:end="3999:63">-</operator> <name pos:start="3999:65" pos:end="3999:74"><name pos:start="3999:65" pos:end="3999:65">s</name><operator pos:start="3999:66" pos:end="3999:67">-&gt;</operator><name pos:start="3999:68" pos:end="3999:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4001:11" pos:end="4011:9">else <block pos:start="4001:16" pos:end="4011:9">{<block_content pos:start="4003:13" pos:end="4009:13">

            <expr_stmt pos:start="4003:13" pos:end="4003:28"><expr pos:start="4003:13" pos:end="4003:27"><call pos:start="4003:13" pos:end="4003:27"><name pos:start="4003:13" pos:end="4003:20">gen_outs</name><argument_list pos:start="4003:21" pos:end="4003:27">(<argument pos:start="4003:22" pos:end="4003:22"><expr pos:start="4003:22" pos:end="4003:22"><name pos:start="4003:22" pos:end="4003:22">s</name></expr></argument>, <argument pos:start="4003:25" pos:end="4003:26"><expr pos:start="4003:25" pos:end="4003:26"><name pos:start="4003:25" pos:end="4003:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4005:13" pos:end="4009:13"><if pos:start="4005:13" pos:end="4009:13">if <condition pos:start="4005:16" pos:end="4005:27">(<expr pos:start="4005:17" pos:end="4005:26"><name pos:start="4005:17" pos:end="4005:26">use_icount</name></expr>)</condition> <block pos:start="4005:29" pos:end="4009:13">{<block_content pos:start="4007:17" pos:end="4007:47">

                <expr_stmt pos:start="4007:17" pos:end="4007:47"><expr pos:start="4007:17" pos:end="4007:46"><call pos:start="4007:17" pos:end="4007:46"><name pos:start="4007:17" pos:end="4007:23">gen_jmp</name><argument_list pos:start="4007:24" pos:end="4007:46">(<argument pos:start="4007:25" pos:end="4007:25"><expr pos:start="4007:25" pos:end="4007:25"><name pos:start="4007:25" pos:end="4007:25">s</name></expr></argument>, <argument pos:start="4007:28" pos:end="4007:45"><expr pos:start="4007:28" pos:end="4007:45"><name pos:start="4007:28" pos:end="4007:32"><name pos:start="4007:28" pos:end="4007:28">s</name><operator pos:start="4007:29" pos:end="4007:30">-&gt;</operator><name pos:start="4007:31" pos:end="4007:32">pc</name></name> <operator pos:start="4007:34" pos:end="4007:34">-</operator> <name pos:start="4007:36" pos:end="4007:45"><name pos:start="4007:36" pos:end="4007:36">s</name><operator pos:start="4007:37" pos:end="4007:38">-&gt;</operator><name pos:start="4007:39" pos:end="4007:45">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="4013:9" pos:end="4013:14">break;</break>



        <comment type="block" format="doxygen" pos:start="4017:9" pos:end="4017:34">/************************/</comment>

        <comment type="block" pos:start="4019:9" pos:end="4019:22">/* port I/O */</comment>



    <case pos:start="4023:5" pos:end="4023:14">case <expr pos:start="4023:10" pos:end="4023:13"><literal type="number" pos:start="4023:10" pos:end="4023:13">0xe4</literal></expr>:</case>

    <case pos:start="4025:5" pos:end="4025:14">case <expr pos:start="4025:10" pos:end="4025:13"><literal type="number" pos:start="4025:10" pos:end="4025:13">0xe5</literal></expr>:</case>

        <if_stmt pos:start="4027:9" pos:end="4033:43"><if pos:start="4027:9" pos:end="4029:25">if <condition pos:start="4027:12" pos:end="4027:25">(<expr pos:start="4027:13" pos:end="4027:24"><operator pos:start="4027:13" pos:end="4027:13">(</operator><name pos:start="4027:14" pos:end="4027:14">b</name> <operator pos:start="4027:16" pos:end="4027:16">&amp;</operator> <literal type="number" pos:start="4027:18" pos:end="4027:18">1</literal><operator pos:start="4027:19" pos:end="4027:19">)</operator> <operator pos:start="4027:21" pos:end="4027:22">==</operator> <literal type="number" pos:start="4027:24" pos:end="4027:24">0</literal></expr>)</condition><block type="pseudo" pos:start="4029:13" pos:end="4029:25"><block_content pos:start="4029:13" pos:end="4029:25">

            <expr_stmt pos:start="4029:13" pos:end="4029:25"><expr pos:start="4029:13" pos:end="4029:24"><name pos:start="4029:13" pos:end="4029:14">ot</name> <operator pos:start="4029:16" pos:end="4029:16">=</operator> <name pos:start="4029:18" pos:end="4029:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="4031:9" pos:end="4033:43">else<block type="pseudo" pos:start="4033:13" pos:end="4033:43"><block_content pos:start="4033:13" pos:end="4033:43">

            <expr_stmt pos:start="4033:13" pos:end="4033:43"><expr pos:start="4033:13" pos:end="4033:42"><name pos:start="4033:13" pos:end="4033:14">ot</name> <operator pos:start="4033:16" pos:end="4033:16">=</operator> <ternary pos:start="4033:18" pos:end="4033:42"><condition pos:start="4033:18" pos:end="4033:24"><expr pos:start="4033:18" pos:end="4033:22"><name pos:start="4033:18" pos:end="4033:22">dflag</name></expr> ?</condition><then pos:start="4033:26" pos:end="4033:32"> <expr pos:start="4033:26" pos:end="4033:32"><name pos:start="4033:26" pos:end="4033:32">OT_LONG</name></expr> </then><else pos:start="4033:34" pos:end="4033:42">: <expr pos:start="4033:36" pos:end="4033:42"><name pos:start="4033:36" pos:end="4033:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="4035:9" pos:end="4035:42"><expr pos:start="4035:9" pos:end="4035:41"><name pos:start="4035:9" pos:end="4035:11">val</name> <operator pos:start="4035:13" pos:end="4035:13">=</operator> <call pos:start="4035:15" pos:end="4035:41"><name pos:start="4035:15" pos:end="4035:27">cpu_ldub_code</name><argument_list pos:start="4035:28" pos:end="4035:41">(<argument pos:start="4035:29" pos:end="4035:31"><expr pos:start="4035:29" pos:end="4035:31"><name pos:start="4035:29" pos:end="4035:31">env</name></expr></argument>, <argument pos:start="4035:34" pos:end="4035:40"><expr pos:start="4035:34" pos:end="4035:40"><name pos:start="4035:34" pos:end="4035:38"><name pos:start="4035:34" pos:end="4035:34">s</name><operator pos:start="4035:35" pos:end="4035:36">-&gt;</operator><name pos:start="4035:37" pos:end="4035:38">pc</name></name><operator pos:start="4035:39" pos:end="4035:40">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4037:9" pos:end="4037:31"><expr pos:start="4037:9" pos:end="4037:30"><call pos:start="4037:9" pos:end="4037:30"><name pos:start="4037:9" pos:end="4037:25">gen_op_movl_T0_im</name><argument_list pos:start="4037:26" pos:end="4037:30">(<argument pos:start="4037:27" pos:end="4037:29"><expr pos:start="4037:27" pos:end="4037:29"><name pos:start="4037:27" pos:end="4037:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4039:9" pos:end="4041:64"><expr pos:start="4039:9" pos:end="4041:63"><call pos:start="4039:9" pos:end="4041:63"><name pos:start="4039:9" pos:end="4039:20">gen_check_io</name><argument_list pos:start="4039:21" pos:end="4041:63">(<argument pos:start="4039:22" pos:end="4039:22"><expr pos:start="4039:22" pos:end="4039:22"><name pos:start="4039:22" pos:end="4039:22">s</name></expr></argument>, <argument pos:start="4039:25" pos:end="4039:26"><expr pos:start="4039:25" pos:end="4039:26"><name pos:start="4039:25" pos:end="4039:26">ot</name></expr></argument>, <argument pos:start="4039:29" pos:end="4039:49"><expr pos:start="4039:29" pos:end="4039:49"><name pos:start="4039:29" pos:end="4039:36">pc_start</name> <operator pos:start="4039:38" pos:end="4039:38">-</operator> <name pos:start="4039:40" pos:end="4039:49"><name pos:start="4039:40" pos:end="4039:40">s</name><operator pos:start="4039:41" pos:end="4039:42">-&gt;</operator><name pos:start="4039:43" pos:end="4039:49">cs_base</name></name></expr></argument>,

                     <argument pos:start="4041:22" pos:end="4041:62"><expr pos:start="4041:22" pos:end="4041:62"><name pos:start="4041:22" pos:end="4041:39">SVM_IOIO_TYPE_MASK</name> <operator pos:start="4041:41" pos:end="4041:41">|</operator> <call pos:start="4041:43" pos:end="4041:62"><name pos:start="4041:43" pos:end="4041:52">svm_is_rep</name><argument_list pos:start="4041:53" pos:end="4041:62">(<argument pos:start="4041:54" pos:end="4041:61"><expr pos:start="4041:54" pos:end="4041:61"><name pos:start="4041:54" pos:end="4041:61">prefixes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4043:9" pos:end="4045:27"><if pos:start="4043:9" pos:end="4045:27">if <condition pos:start="4043:12" pos:end="4043:23">(<expr pos:start="4043:13" pos:end="4043:22"><name pos:start="4043:13" pos:end="4043:22">use_icount</name></expr>)</condition><block type="pseudo" pos:start="4045:13" pos:end="4045:27"><block_content pos:start="4045:13" pos:end="4045:27">

            <expr_stmt pos:start="4045:13" pos:end="4045:27"><expr pos:start="4045:13" pos:end="4045:26"><call pos:start="4045:13" pos:end="4045:26"><name pos:start="4045:13" pos:end="4045:24">gen_io_start</name><argument_list pos:start="4045:25" pos:end="4045:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4047:9" pos:end="4047:53"><expr pos:start="4047:9" pos:end="4047:52"><call pos:start="4047:9" pos:end="4047:52"><name pos:start="4047:9" pos:end="4047:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="4047:29" pos:end="4047:52">(<argument pos:start="4047:30" pos:end="4047:41"><expr pos:start="4047:30" pos:end="4047:41"><name pos:start="4047:30" pos:end="4047:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4047:44" pos:end="4047:51"><expr pos:start="4047:44" pos:end="4047:51"><name pos:start="4047:44" pos:end="4047:51"><name pos:start="4047:44" pos:end="4047:48">cpu_T</name><index pos:start="4047:49" pos:end="4047:51">[<expr pos:start="4047:50" pos:end="4047:50"><literal type="number" pos:start="4047:50" pos:end="4047:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4049:9" pos:end="4049:55"><expr pos:start="4049:9" pos:end="4049:54"><call pos:start="4049:9" pos:end="4049:54"><name pos:start="4049:9" pos:end="4049:26">gen_helper_in_func</name><argument_list pos:start="4049:27" pos:end="4049:54">(<argument pos:start="4049:28" pos:end="4049:29"><expr pos:start="4049:28" pos:end="4049:29"><name pos:start="4049:28" pos:end="4049:29">ot</name></expr></argument>, <argument pos:start="4049:32" pos:end="4049:39"><expr pos:start="4049:32" pos:end="4049:39"><name pos:start="4049:32" pos:end="4049:39"><name pos:start="4049:32" pos:end="4049:36">cpu_T</name><index pos:start="4049:37" pos:end="4049:39">[<expr pos:start="4049:38" pos:end="4049:38"><literal type="number" pos:start="4049:38" pos:end="4049:38">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="4049:42" pos:end="4049:53"><expr pos:start="4049:42" pos:end="4049:53"><name pos:start="4049:42" pos:end="4049:53">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4051:9" pos:end="4051:37"><expr pos:start="4051:9" pos:end="4051:36"><call pos:start="4051:9" pos:end="4051:36"><name pos:start="4051:9" pos:end="4051:25">gen_op_mov_reg_T1</name><argument_list pos:start="4051:26" pos:end="4051:36">(<argument pos:start="4051:27" pos:end="4051:28"><expr pos:start="4051:27" pos:end="4051:28"><name pos:start="4051:27" pos:end="4051:28">ot</name></expr></argument>, <argument pos:start="4051:31" pos:end="4051:35"><expr pos:start="4051:31" pos:end="4051:35"><name pos:start="4051:31" pos:end="4051:35">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4053:9" pos:end="4059:9"><if pos:start="4053:9" pos:end="4059:9">if <condition pos:start="4053:12" pos:end="4053:23">(<expr pos:start="4053:13" pos:end="4053:22"><name pos:start="4053:13" pos:end="4053:22">use_icount</name></expr>)</condition> <block pos:start="4053:25" pos:end="4059:9">{<block_content pos:start="4055:13" pos:end="4057:43">

            <expr_stmt pos:start="4055:13" pos:end="4055:25"><expr pos:start="4055:13" pos:end="4055:24"><call pos:start="4055:13" pos:end="4055:24"><name pos:start="4055:13" pos:end="4055:22">gen_io_end</name><argument_list pos:start="4055:23" pos:end="4055:24">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4057:13" pos:end="4057:43"><expr pos:start="4057:13" pos:end="4057:42"><call pos:start="4057:13" pos:end="4057:42"><name pos:start="4057:13" pos:end="4057:19">gen_jmp</name><argument_list pos:start="4057:20" pos:end="4057:42">(<argument pos:start="4057:21" pos:end="4057:21"><expr pos:start="4057:21" pos:end="4057:21"><name pos:start="4057:21" pos:end="4057:21">s</name></expr></argument>, <argument pos:start="4057:24" pos:end="4057:41"><expr pos:start="4057:24" pos:end="4057:41"><name pos:start="4057:24" pos:end="4057:28"><name pos:start="4057:24" pos:end="4057:24">s</name><operator pos:start="4057:25" pos:end="4057:26">-&gt;</operator><name pos:start="4057:27" pos:end="4057:28">pc</name></name> <operator pos:start="4057:30" pos:end="4057:30">-</operator> <name pos:start="4057:32" pos:end="4057:41"><name pos:start="4057:32" pos:end="4057:32">s</name><operator pos:start="4057:33" pos:end="4057:34">-&gt;</operator><name pos:start="4057:35" pos:end="4057:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="4061:9" pos:end="4061:14">break;</break>

    <case pos:start="4063:5" pos:end="4063:14">case <expr pos:start="4063:10" pos:end="4063:13"><literal type="number" pos:start="4063:10" pos:end="4063:13">0xe6</literal></expr>:</case>

    <case pos:start="4065:5" pos:end="4065:14">case <expr pos:start="4065:10" pos:end="4065:13"><literal type="number" pos:start="4065:10" pos:end="4065:13">0xe7</literal></expr>:</case>

        <if_stmt pos:start="4067:9" pos:end="4073:43"><if pos:start="4067:9" pos:end="4069:25">if <condition pos:start="4067:12" pos:end="4067:25">(<expr pos:start="4067:13" pos:end="4067:24"><operator pos:start="4067:13" pos:end="4067:13">(</operator><name pos:start="4067:14" pos:end="4067:14">b</name> <operator pos:start="4067:16" pos:end="4067:16">&amp;</operator> <literal type="number" pos:start="4067:18" pos:end="4067:18">1</literal><operator pos:start="4067:19" pos:end="4067:19">)</operator> <operator pos:start="4067:21" pos:end="4067:22">==</operator> <literal type="number" pos:start="4067:24" pos:end="4067:24">0</literal></expr>)</condition><block type="pseudo" pos:start="4069:13" pos:end="4069:25"><block_content pos:start="4069:13" pos:end="4069:25">

            <expr_stmt pos:start="4069:13" pos:end="4069:25"><expr pos:start="4069:13" pos:end="4069:24"><name pos:start="4069:13" pos:end="4069:14">ot</name> <operator pos:start="4069:16" pos:end="4069:16">=</operator> <name pos:start="4069:18" pos:end="4069:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="4071:9" pos:end="4073:43">else<block type="pseudo" pos:start="4073:13" pos:end="4073:43"><block_content pos:start="4073:13" pos:end="4073:43">

            <expr_stmt pos:start="4073:13" pos:end="4073:43"><expr pos:start="4073:13" pos:end="4073:42"><name pos:start="4073:13" pos:end="4073:14">ot</name> <operator pos:start="4073:16" pos:end="4073:16">=</operator> <ternary pos:start="4073:18" pos:end="4073:42"><condition pos:start="4073:18" pos:end="4073:24"><expr pos:start="4073:18" pos:end="4073:22"><name pos:start="4073:18" pos:end="4073:22">dflag</name></expr> ?</condition><then pos:start="4073:26" pos:end="4073:32"> <expr pos:start="4073:26" pos:end="4073:32"><name pos:start="4073:26" pos:end="4073:32">OT_LONG</name></expr> </then><else pos:start="4073:34" pos:end="4073:42">: <expr pos:start="4073:36" pos:end="4073:42"><name pos:start="4073:36" pos:end="4073:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="4075:9" pos:end="4075:42"><expr pos:start="4075:9" pos:end="4075:41"><name pos:start="4075:9" pos:end="4075:11">val</name> <operator pos:start="4075:13" pos:end="4075:13">=</operator> <call pos:start="4075:15" pos:end="4075:41"><name pos:start="4075:15" pos:end="4075:27">cpu_ldub_code</name><argument_list pos:start="4075:28" pos:end="4075:41">(<argument pos:start="4075:29" pos:end="4075:31"><expr pos:start="4075:29" pos:end="4075:31"><name pos:start="4075:29" pos:end="4075:31">env</name></expr></argument>, <argument pos:start="4075:34" pos:end="4075:40"><expr pos:start="4075:34" pos:end="4075:40"><name pos:start="4075:34" pos:end="4075:38"><name pos:start="4075:34" pos:end="4075:34">s</name><operator pos:start="4075:35" pos:end="4075:36">-&gt;</operator><name pos:start="4075:37" pos:end="4075:38">pc</name></name><operator pos:start="4075:39" pos:end="4075:40">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4077:9" pos:end="4077:31"><expr pos:start="4077:9" pos:end="4077:30"><call pos:start="4077:9" pos:end="4077:30"><name pos:start="4077:9" pos:end="4077:25">gen_op_movl_T0_im</name><argument_list pos:start="4077:26" pos:end="4077:30">(<argument pos:start="4077:27" pos:end="4077:29"><expr pos:start="4077:27" pos:end="4077:29"><name pos:start="4077:27" pos:end="4077:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4079:9" pos:end="4081:43"><expr pos:start="4079:9" pos:end="4081:42"><call pos:start="4079:9" pos:end="4081:42"><name pos:start="4079:9" pos:end="4079:20">gen_check_io</name><argument_list pos:start="4079:21" pos:end="4081:42">(<argument pos:start="4079:22" pos:end="4079:22"><expr pos:start="4079:22" pos:end="4079:22"><name pos:start="4079:22" pos:end="4079:22">s</name></expr></argument>, <argument pos:start="4079:25" pos:end="4079:26"><expr pos:start="4079:25" pos:end="4079:26"><name pos:start="4079:25" pos:end="4079:26">ot</name></expr></argument>, <argument pos:start="4079:29" pos:end="4079:49"><expr pos:start="4079:29" pos:end="4079:49"><name pos:start="4079:29" pos:end="4079:36">pc_start</name> <operator pos:start="4079:38" pos:end="4079:38">-</operator> <name pos:start="4079:40" pos:end="4079:49"><name pos:start="4079:40" pos:end="4079:40">s</name><operator pos:start="4079:41" pos:end="4079:42">-&gt;</operator><name pos:start="4079:43" pos:end="4079:49">cs_base</name></name></expr></argument>,

                     <argument pos:start="4081:22" pos:end="4081:41"><expr pos:start="4081:22" pos:end="4081:41"><call pos:start="4081:22" pos:end="4081:41"><name pos:start="4081:22" pos:end="4081:31">svm_is_rep</name><argument_list pos:start="4081:32" pos:end="4081:41">(<argument pos:start="4081:33" pos:end="4081:40"><expr pos:start="4081:33" pos:end="4081:40"><name pos:start="4081:33" pos:end="4081:40">prefixes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4083:9" pos:end="4083:40"><expr pos:start="4083:9" pos:end="4083:39"><call pos:start="4083:9" pos:end="4083:39"><name pos:start="4083:9" pos:end="4083:25">gen_op_mov_TN_reg</name><argument_list pos:start="4083:26" pos:end="4083:39">(<argument pos:start="4083:27" pos:end="4083:28"><expr pos:start="4083:27" pos:end="4083:28"><name pos:start="4083:27" pos:end="4083:28">ot</name></expr></argument>, <argument pos:start="4083:31" pos:end="4083:31"><expr pos:start="4083:31" pos:end="4083:31"><literal type="number" pos:start="4083:31" pos:end="4083:31">1</literal></expr></argument>, <argument pos:start="4083:34" pos:end="4083:38"><expr pos:start="4083:34" pos:end="4083:38"><name pos:start="4083:34" pos:end="4083:38">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="4087:9" pos:end="4089:27"><if pos:start="4087:9" pos:end="4089:27">if <condition pos:start="4087:12" pos:end="4087:23">(<expr pos:start="4087:13" pos:end="4087:22"><name pos:start="4087:13" pos:end="4087:22">use_icount</name></expr>)</condition><block type="pseudo" pos:start="4089:13" pos:end="4089:27"><block_content pos:start="4089:13" pos:end="4089:27">

            <expr_stmt pos:start="4089:13" pos:end="4089:27"><expr pos:start="4089:13" pos:end="4089:26"><call pos:start="4089:13" pos:end="4089:26"><name pos:start="4089:13" pos:end="4089:24">gen_io_start</name><argument_list pos:start="4089:25" pos:end="4089:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4091:9" pos:end="4091:53"><expr pos:start="4091:9" pos:end="4091:52"><call pos:start="4091:9" pos:end="4091:52"><name pos:start="4091:9" pos:end="4091:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="4091:29" pos:end="4091:52">(<argument pos:start="4091:30" pos:end="4091:41"><expr pos:start="4091:30" pos:end="4091:41"><name pos:start="4091:30" pos:end="4091:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4091:44" pos:end="4091:51"><expr pos:start="4091:44" pos:end="4091:51"><name pos:start="4091:44" pos:end="4091:51"><name pos:start="4091:44" pos:end="4091:48">cpu_T</name><index pos:start="4091:49" pos:end="4091:51">[<expr pos:start="4091:50" pos:end="4091:50"><literal type="number" pos:start="4091:50" pos:end="4091:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4093:9" pos:end="4093:53"><expr pos:start="4093:9" pos:end="4093:52"><call pos:start="4093:9" pos:end="4093:52"><name pos:start="4093:9" pos:end="4093:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="4093:29" pos:end="4093:52">(<argument pos:start="4093:30" pos:end="4093:41"><expr pos:start="4093:30" pos:end="4093:41"><name pos:start="4093:30" pos:end="4093:41">cpu_tmp3_i32</name></expr></argument>, <argument pos:start="4093:44" pos:end="4093:51"><expr pos:start="4093:44" pos:end="4093:51"><name pos:start="4093:44" pos:end="4093:51"><name pos:start="4093:44" pos:end="4093:48">cpu_T</name><index pos:start="4093:49" pos:end="4093:51">[<expr pos:start="4093:50" pos:end="4093:50"><literal type="number" pos:start="4093:50" pos:end="4093:50">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4095:9" pos:end="4095:60"><expr pos:start="4095:9" pos:end="4095:59"><call pos:start="4095:9" pos:end="4095:59"><name pos:start="4095:9" pos:end="4095:27">gen_helper_out_func</name><argument_list pos:start="4095:28" pos:end="4095:59">(<argument pos:start="4095:29" pos:end="4095:30"><expr pos:start="4095:29" pos:end="4095:30"><name pos:start="4095:29" pos:end="4095:30">ot</name></expr></argument>, <argument pos:start="4095:33" pos:end="4095:44"><expr pos:start="4095:33" pos:end="4095:44"><name pos:start="4095:33" pos:end="4095:44">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4095:47" pos:end="4095:58"><expr pos:start="4095:47" pos:end="4095:58"><name pos:start="4095:47" pos:end="4095:58">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4097:9" pos:end="4103:9"><if pos:start="4097:9" pos:end="4103:9">if <condition pos:start="4097:12" pos:end="4097:23">(<expr pos:start="4097:13" pos:end="4097:22"><name pos:start="4097:13" pos:end="4097:22">use_icount</name></expr>)</condition> <block pos:start="4097:25" pos:end="4103:9">{<block_content pos:start="4099:13" pos:end="4101:43">

            <expr_stmt pos:start="4099:13" pos:end="4099:25"><expr pos:start="4099:13" pos:end="4099:24"><call pos:start="4099:13" pos:end="4099:24"><name pos:start="4099:13" pos:end="4099:22">gen_io_end</name><argument_list pos:start="4099:23" pos:end="4099:24">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4101:13" pos:end="4101:43"><expr pos:start="4101:13" pos:end="4101:42"><call pos:start="4101:13" pos:end="4101:42"><name pos:start="4101:13" pos:end="4101:19">gen_jmp</name><argument_list pos:start="4101:20" pos:end="4101:42">(<argument pos:start="4101:21" pos:end="4101:21"><expr pos:start="4101:21" pos:end="4101:21"><name pos:start="4101:21" pos:end="4101:21">s</name></expr></argument>, <argument pos:start="4101:24" pos:end="4101:41"><expr pos:start="4101:24" pos:end="4101:41"><name pos:start="4101:24" pos:end="4101:28"><name pos:start="4101:24" pos:end="4101:24">s</name><operator pos:start="4101:25" pos:end="4101:26">-&gt;</operator><name pos:start="4101:27" pos:end="4101:28">pc</name></name> <operator pos:start="4101:30" pos:end="4101:30">-</operator> <name pos:start="4101:32" pos:end="4101:41"><name pos:start="4101:32" pos:end="4101:32">s</name><operator pos:start="4101:33" pos:end="4101:34">-&gt;</operator><name pos:start="4101:35" pos:end="4101:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="4105:9" pos:end="4105:14">break;</break>

    <case pos:start="4107:5" pos:end="4107:14">case <expr pos:start="4107:10" pos:end="4107:13"><literal type="number" pos:start="4107:10" pos:end="4107:13">0xec</literal></expr>:</case>

    <case pos:start="4109:5" pos:end="4109:14">case <expr pos:start="4109:10" pos:end="4109:13"><literal type="number" pos:start="4109:10" pos:end="4109:13">0xed</literal></expr>:</case>

        <if_stmt pos:start="4111:9" pos:end="4117:43"><if pos:start="4111:9" pos:end="4113:25">if <condition pos:start="4111:12" pos:end="4111:25">(<expr pos:start="4111:13" pos:end="4111:24"><operator pos:start="4111:13" pos:end="4111:13">(</operator><name pos:start="4111:14" pos:end="4111:14">b</name> <operator pos:start="4111:16" pos:end="4111:16">&amp;</operator> <literal type="number" pos:start="4111:18" pos:end="4111:18">1</literal><operator pos:start="4111:19" pos:end="4111:19">)</operator> <operator pos:start="4111:21" pos:end="4111:22">==</operator> <literal type="number" pos:start="4111:24" pos:end="4111:24">0</literal></expr>)</condition><block type="pseudo" pos:start="4113:13" pos:end="4113:25"><block_content pos:start="4113:13" pos:end="4113:25">

            <expr_stmt pos:start="4113:13" pos:end="4113:25"><expr pos:start="4113:13" pos:end="4113:24"><name pos:start="4113:13" pos:end="4113:14">ot</name> <operator pos:start="4113:16" pos:end="4113:16">=</operator> <name pos:start="4113:18" pos:end="4113:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="4115:9" pos:end="4117:43">else<block type="pseudo" pos:start="4117:13" pos:end="4117:43"><block_content pos:start="4117:13" pos:end="4117:43">

            <expr_stmt pos:start="4117:13" pos:end="4117:43"><expr pos:start="4117:13" pos:end="4117:42"><name pos:start="4117:13" pos:end="4117:14">ot</name> <operator pos:start="4117:16" pos:end="4117:16">=</operator> <ternary pos:start="4117:18" pos:end="4117:42"><condition pos:start="4117:18" pos:end="4117:24"><expr pos:start="4117:18" pos:end="4117:22"><name pos:start="4117:18" pos:end="4117:22">dflag</name></expr> ?</condition><then pos:start="4117:26" pos:end="4117:32"> <expr pos:start="4117:26" pos:end="4117:32"><name pos:start="4117:26" pos:end="4117:32">OT_LONG</name></expr> </then><else pos:start="4117:34" pos:end="4117:42">: <expr pos:start="4117:36" pos:end="4117:42"><name pos:start="4117:36" pos:end="4117:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="4119:9" pos:end="4119:45"><expr pos:start="4119:9" pos:end="4119:44"><call pos:start="4119:9" pos:end="4119:44"><name pos:start="4119:9" pos:end="4119:25">gen_op_mov_TN_reg</name><argument_list pos:start="4119:26" pos:end="4119:44">(<argument pos:start="4119:27" pos:end="4119:33"><expr pos:start="4119:27" pos:end="4119:33"><name pos:start="4119:27" pos:end="4119:33">OT_WORD</name></expr></argument>, <argument pos:start="4119:36" pos:end="4119:36"><expr pos:start="4119:36" pos:end="4119:36"><literal type="number" pos:start="4119:36" pos:end="4119:36">0</literal></expr></argument>, <argument pos:start="4119:39" pos:end="4119:43"><expr pos:start="4119:39" pos:end="4119:43"><name pos:start="4119:39" pos:end="4119:43">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4121:9" pos:end="4121:30"><expr pos:start="4121:9" pos:end="4121:29"><call pos:start="4121:9" pos:end="4121:29"><name pos:start="4121:9" pos:end="4121:27">gen_op_andl_T0_ffff</name><argument_list pos:start="4121:28" pos:end="4121:29">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4123:9" pos:end="4125:64"><expr pos:start="4123:9" pos:end="4125:63"><call pos:start="4123:9" pos:end="4125:63"><name pos:start="4123:9" pos:end="4123:20">gen_check_io</name><argument_list pos:start="4123:21" pos:end="4125:63">(<argument pos:start="4123:22" pos:end="4123:22"><expr pos:start="4123:22" pos:end="4123:22"><name pos:start="4123:22" pos:end="4123:22">s</name></expr></argument>, <argument pos:start="4123:25" pos:end="4123:26"><expr pos:start="4123:25" pos:end="4123:26"><name pos:start="4123:25" pos:end="4123:26">ot</name></expr></argument>, <argument pos:start="4123:29" pos:end="4123:49"><expr pos:start="4123:29" pos:end="4123:49"><name pos:start="4123:29" pos:end="4123:36">pc_start</name> <operator pos:start="4123:38" pos:end="4123:38">-</operator> <name pos:start="4123:40" pos:end="4123:49"><name pos:start="4123:40" pos:end="4123:40">s</name><operator pos:start="4123:41" pos:end="4123:42">-&gt;</operator><name pos:start="4123:43" pos:end="4123:49">cs_base</name></name></expr></argument>,

                     <argument pos:start="4125:22" pos:end="4125:62"><expr pos:start="4125:22" pos:end="4125:62"><name pos:start="4125:22" pos:end="4125:39">SVM_IOIO_TYPE_MASK</name> <operator pos:start="4125:41" pos:end="4125:41">|</operator> <call pos:start="4125:43" pos:end="4125:62"><name pos:start="4125:43" pos:end="4125:52">svm_is_rep</name><argument_list pos:start="4125:53" pos:end="4125:62">(<argument pos:start="4125:54" pos:end="4125:61"><expr pos:start="4125:54" pos:end="4125:61"><name pos:start="4125:54" pos:end="4125:61">prefixes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4127:9" pos:end="4129:27"><if pos:start="4127:9" pos:end="4129:27">if <condition pos:start="4127:12" pos:end="4127:23">(<expr pos:start="4127:13" pos:end="4127:22"><name pos:start="4127:13" pos:end="4127:22">use_icount</name></expr>)</condition><block type="pseudo" pos:start="4129:13" pos:end="4129:27"><block_content pos:start="4129:13" pos:end="4129:27">

            <expr_stmt pos:start="4129:13" pos:end="4129:27"><expr pos:start="4129:13" pos:end="4129:26"><call pos:start="4129:13" pos:end="4129:26"><name pos:start="4129:13" pos:end="4129:24">gen_io_start</name><argument_list pos:start="4129:25" pos:end="4129:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4131:9" pos:end="4131:53"><expr pos:start="4131:9" pos:end="4131:52"><call pos:start="4131:9" pos:end="4131:52"><name pos:start="4131:9" pos:end="4131:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="4131:29" pos:end="4131:52">(<argument pos:start="4131:30" pos:end="4131:41"><expr pos:start="4131:30" pos:end="4131:41"><name pos:start="4131:30" pos:end="4131:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4131:44" pos:end="4131:51"><expr pos:start="4131:44" pos:end="4131:51"><name pos:start="4131:44" pos:end="4131:51"><name pos:start="4131:44" pos:end="4131:48">cpu_T</name><index pos:start="4131:49" pos:end="4131:51">[<expr pos:start="4131:50" pos:end="4131:50"><literal type="number" pos:start="4131:50" pos:end="4131:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4133:9" pos:end="4133:55"><expr pos:start="4133:9" pos:end="4133:54"><call pos:start="4133:9" pos:end="4133:54"><name pos:start="4133:9" pos:end="4133:26">gen_helper_in_func</name><argument_list pos:start="4133:27" pos:end="4133:54">(<argument pos:start="4133:28" pos:end="4133:29"><expr pos:start="4133:28" pos:end="4133:29"><name pos:start="4133:28" pos:end="4133:29">ot</name></expr></argument>, <argument pos:start="4133:32" pos:end="4133:39"><expr pos:start="4133:32" pos:end="4133:39"><name pos:start="4133:32" pos:end="4133:39"><name pos:start="4133:32" pos:end="4133:36">cpu_T</name><index pos:start="4133:37" pos:end="4133:39">[<expr pos:start="4133:38" pos:end="4133:38"><literal type="number" pos:start="4133:38" pos:end="4133:38">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="4133:42" pos:end="4133:53"><expr pos:start="4133:42" pos:end="4133:53"><name pos:start="4133:42" pos:end="4133:53">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4135:9" pos:end="4135:37"><expr pos:start="4135:9" pos:end="4135:36"><call pos:start="4135:9" pos:end="4135:36"><name pos:start="4135:9" pos:end="4135:25">gen_op_mov_reg_T1</name><argument_list pos:start="4135:26" pos:end="4135:36">(<argument pos:start="4135:27" pos:end="4135:28"><expr pos:start="4135:27" pos:end="4135:28"><name pos:start="4135:27" pos:end="4135:28">ot</name></expr></argument>, <argument pos:start="4135:31" pos:end="4135:35"><expr pos:start="4135:31" pos:end="4135:35"><name pos:start="4135:31" pos:end="4135:35">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4137:9" pos:end="4143:9"><if pos:start="4137:9" pos:end="4143:9">if <condition pos:start="4137:12" pos:end="4137:23">(<expr pos:start="4137:13" pos:end="4137:22"><name pos:start="4137:13" pos:end="4137:22">use_icount</name></expr>)</condition> <block pos:start="4137:25" pos:end="4143:9">{<block_content pos:start="4139:13" pos:end="4141:43">

            <expr_stmt pos:start="4139:13" pos:end="4139:25"><expr pos:start="4139:13" pos:end="4139:24"><call pos:start="4139:13" pos:end="4139:24"><name pos:start="4139:13" pos:end="4139:22">gen_io_end</name><argument_list pos:start="4139:23" pos:end="4139:24">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4141:13" pos:end="4141:43"><expr pos:start="4141:13" pos:end="4141:42"><call pos:start="4141:13" pos:end="4141:42"><name pos:start="4141:13" pos:end="4141:19">gen_jmp</name><argument_list pos:start="4141:20" pos:end="4141:42">(<argument pos:start="4141:21" pos:end="4141:21"><expr pos:start="4141:21" pos:end="4141:21"><name pos:start="4141:21" pos:end="4141:21">s</name></expr></argument>, <argument pos:start="4141:24" pos:end="4141:41"><expr pos:start="4141:24" pos:end="4141:41"><name pos:start="4141:24" pos:end="4141:28"><name pos:start="4141:24" pos:end="4141:24">s</name><operator pos:start="4141:25" pos:end="4141:26">-&gt;</operator><name pos:start="4141:27" pos:end="4141:28">pc</name></name> <operator pos:start="4141:30" pos:end="4141:30">-</operator> <name pos:start="4141:32" pos:end="4141:41"><name pos:start="4141:32" pos:end="4141:32">s</name><operator pos:start="4141:33" pos:end="4141:34">-&gt;</operator><name pos:start="4141:35" pos:end="4141:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="4145:9" pos:end="4145:14">break;</break>

    <case pos:start="4147:5" pos:end="4147:14">case <expr pos:start="4147:10" pos:end="4147:13"><literal type="number" pos:start="4147:10" pos:end="4147:13">0xee</literal></expr>:</case>

    <case pos:start="4149:5" pos:end="4149:14">case <expr pos:start="4149:10" pos:end="4149:13"><literal type="number" pos:start="4149:10" pos:end="4149:13">0xef</literal></expr>:</case>

        <if_stmt pos:start="4151:9" pos:end="4157:43"><if pos:start="4151:9" pos:end="4153:25">if <condition pos:start="4151:12" pos:end="4151:25">(<expr pos:start="4151:13" pos:end="4151:24"><operator pos:start="4151:13" pos:end="4151:13">(</operator><name pos:start="4151:14" pos:end="4151:14">b</name> <operator pos:start="4151:16" pos:end="4151:16">&amp;</operator> <literal type="number" pos:start="4151:18" pos:end="4151:18">1</literal><operator pos:start="4151:19" pos:end="4151:19">)</operator> <operator pos:start="4151:21" pos:end="4151:22">==</operator> <literal type="number" pos:start="4151:24" pos:end="4151:24">0</literal></expr>)</condition><block type="pseudo" pos:start="4153:13" pos:end="4153:25"><block_content pos:start="4153:13" pos:end="4153:25">

            <expr_stmt pos:start="4153:13" pos:end="4153:25"><expr pos:start="4153:13" pos:end="4153:24"><name pos:start="4153:13" pos:end="4153:14">ot</name> <operator pos:start="4153:16" pos:end="4153:16">=</operator> <name pos:start="4153:18" pos:end="4153:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="4155:9" pos:end="4157:43">else<block type="pseudo" pos:start="4157:13" pos:end="4157:43"><block_content pos:start="4157:13" pos:end="4157:43">

            <expr_stmt pos:start="4157:13" pos:end="4157:43"><expr pos:start="4157:13" pos:end="4157:42"><name pos:start="4157:13" pos:end="4157:14">ot</name> <operator pos:start="4157:16" pos:end="4157:16">=</operator> <ternary pos:start="4157:18" pos:end="4157:42"><condition pos:start="4157:18" pos:end="4157:24"><expr pos:start="4157:18" pos:end="4157:22"><name pos:start="4157:18" pos:end="4157:22">dflag</name></expr> ?</condition><then pos:start="4157:26" pos:end="4157:32"> <expr pos:start="4157:26" pos:end="4157:32"><name pos:start="4157:26" pos:end="4157:32">OT_LONG</name></expr> </then><else pos:start="4157:34" pos:end="4157:42">: <expr pos:start="4157:36" pos:end="4157:42"><name pos:start="4157:36" pos:end="4157:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="4159:9" pos:end="4159:45"><expr pos:start="4159:9" pos:end="4159:44"><call pos:start="4159:9" pos:end="4159:44"><name pos:start="4159:9" pos:end="4159:25">gen_op_mov_TN_reg</name><argument_list pos:start="4159:26" pos:end="4159:44">(<argument pos:start="4159:27" pos:end="4159:33"><expr pos:start="4159:27" pos:end="4159:33"><name pos:start="4159:27" pos:end="4159:33">OT_WORD</name></expr></argument>, <argument pos:start="4159:36" pos:end="4159:36"><expr pos:start="4159:36" pos:end="4159:36"><literal type="number" pos:start="4159:36" pos:end="4159:36">0</literal></expr></argument>, <argument pos:start="4159:39" pos:end="4159:43"><expr pos:start="4159:39" pos:end="4159:43"><name pos:start="4159:39" pos:end="4159:43">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4161:9" pos:end="4161:30"><expr pos:start="4161:9" pos:end="4161:29"><call pos:start="4161:9" pos:end="4161:29"><name pos:start="4161:9" pos:end="4161:27">gen_op_andl_T0_ffff</name><argument_list pos:start="4161:28" pos:end="4161:29">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4163:9" pos:end="4165:43"><expr pos:start="4163:9" pos:end="4165:42"><call pos:start="4163:9" pos:end="4165:42"><name pos:start="4163:9" pos:end="4163:20">gen_check_io</name><argument_list pos:start="4163:21" pos:end="4165:42">(<argument pos:start="4163:22" pos:end="4163:22"><expr pos:start="4163:22" pos:end="4163:22"><name pos:start="4163:22" pos:end="4163:22">s</name></expr></argument>, <argument pos:start="4163:25" pos:end="4163:26"><expr pos:start="4163:25" pos:end="4163:26"><name pos:start="4163:25" pos:end="4163:26">ot</name></expr></argument>, <argument pos:start="4163:29" pos:end="4163:49"><expr pos:start="4163:29" pos:end="4163:49"><name pos:start="4163:29" pos:end="4163:36">pc_start</name> <operator pos:start="4163:38" pos:end="4163:38">-</operator> <name pos:start="4163:40" pos:end="4163:49"><name pos:start="4163:40" pos:end="4163:40">s</name><operator pos:start="4163:41" pos:end="4163:42">-&gt;</operator><name pos:start="4163:43" pos:end="4163:49">cs_base</name></name></expr></argument>,

                     <argument pos:start="4165:22" pos:end="4165:41"><expr pos:start="4165:22" pos:end="4165:41"><call pos:start="4165:22" pos:end="4165:41"><name pos:start="4165:22" pos:end="4165:31">svm_is_rep</name><argument_list pos:start="4165:32" pos:end="4165:41">(<argument pos:start="4165:33" pos:end="4165:40"><expr pos:start="4165:33" pos:end="4165:40"><name pos:start="4165:33" pos:end="4165:40">prefixes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4167:9" pos:end="4167:40"><expr pos:start="4167:9" pos:end="4167:39"><call pos:start="4167:9" pos:end="4167:39"><name pos:start="4167:9" pos:end="4167:25">gen_op_mov_TN_reg</name><argument_list pos:start="4167:26" pos:end="4167:39">(<argument pos:start="4167:27" pos:end="4167:28"><expr pos:start="4167:27" pos:end="4167:28"><name pos:start="4167:27" pos:end="4167:28">ot</name></expr></argument>, <argument pos:start="4167:31" pos:end="4167:31"><expr pos:start="4167:31" pos:end="4167:31"><literal type="number" pos:start="4167:31" pos:end="4167:31">1</literal></expr></argument>, <argument pos:start="4167:34" pos:end="4167:38"><expr pos:start="4167:34" pos:end="4167:38"><name pos:start="4167:34" pos:end="4167:38">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="4171:9" pos:end="4173:27"><if pos:start="4171:9" pos:end="4173:27">if <condition pos:start="4171:12" pos:end="4171:23">(<expr pos:start="4171:13" pos:end="4171:22"><name pos:start="4171:13" pos:end="4171:22">use_icount</name></expr>)</condition><block type="pseudo" pos:start="4173:13" pos:end="4173:27"><block_content pos:start="4173:13" pos:end="4173:27">

            <expr_stmt pos:start="4173:13" pos:end="4173:27"><expr pos:start="4173:13" pos:end="4173:26"><call pos:start="4173:13" pos:end="4173:26"><name pos:start="4173:13" pos:end="4173:24">gen_io_start</name><argument_list pos:start="4173:25" pos:end="4173:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4175:9" pos:end="4175:53"><expr pos:start="4175:9" pos:end="4175:52"><call pos:start="4175:9" pos:end="4175:52"><name pos:start="4175:9" pos:end="4175:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="4175:29" pos:end="4175:52">(<argument pos:start="4175:30" pos:end="4175:41"><expr pos:start="4175:30" pos:end="4175:41"><name pos:start="4175:30" pos:end="4175:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4175:44" pos:end="4175:51"><expr pos:start="4175:44" pos:end="4175:51"><name pos:start="4175:44" pos:end="4175:51"><name pos:start="4175:44" pos:end="4175:48">cpu_T</name><index pos:start="4175:49" pos:end="4175:51">[<expr pos:start="4175:50" pos:end="4175:50"><literal type="number" pos:start="4175:50" pos:end="4175:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4177:9" pos:end="4177:53"><expr pos:start="4177:9" pos:end="4177:52"><call pos:start="4177:9" pos:end="4177:52"><name pos:start="4177:9" pos:end="4177:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="4177:29" pos:end="4177:52">(<argument pos:start="4177:30" pos:end="4177:41"><expr pos:start="4177:30" pos:end="4177:41"><name pos:start="4177:30" pos:end="4177:41">cpu_tmp3_i32</name></expr></argument>, <argument pos:start="4177:44" pos:end="4177:51"><expr pos:start="4177:44" pos:end="4177:51"><name pos:start="4177:44" pos:end="4177:51"><name pos:start="4177:44" pos:end="4177:48">cpu_T</name><index pos:start="4177:49" pos:end="4177:51">[<expr pos:start="4177:50" pos:end="4177:50"><literal type="number" pos:start="4177:50" pos:end="4177:50">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4179:9" pos:end="4179:60"><expr pos:start="4179:9" pos:end="4179:59"><call pos:start="4179:9" pos:end="4179:59"><name pos:start="4179:9" pos:end="4179:27">gen_helper_out_func</name><argument_list pos:start="4179:28" pos:end="4179:59">(<argument pos:start="4179:29" pos:end="4179:30"><expr pos:start="4179:29" pos:end="4179:30"><name pos:start="4179:29" pos:end="4179:30">ot</name></expr></argument>, <argument pos:start="4179:33" pos:end="4179:44"><expr pos:start="4179:33" pos:end="4179:44"><name pos:start="4179:33" pos:end="4179:44">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4179:47" pos:end="4179:58"><expr pos:start="4179:47" pos:end="4179:58"><name pos:start="4179:47" pos:end="4179:58">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4181:9" pos:end="4187:9"><if pos:start="4181:9" pos:end="4187:9">if <condition pos:start="4181:12" pos:end="4181:23">(<expr pos:start="4181:13" pos:end="4181:22"><name pos:start="4181:13" pos:end="4181:22">use_icount</name></expr>)</condition> <block pos:start="4181:25" pos:end="4187:9">{<block_content pos:start="4183:13" pos:end="4185:43">

            <expr_stmt pos:start="4183:13" pos:end="4183:25"><expr pos:start="4183:13" pos:end="4183:24"><call pos:start="4183:13" pos:end="4183:24"><name pos:start="4183:13" pos:end="4183:22">gen_io_end</name><argument_list pos:start="4183:23" pos:end="4183:24">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4185:13" pos:end="4185:43"><expr pos:start="4185:13" pos:end="4185:42"><call pos:start="4185:13" pos:end="4185:42"><name pos:start="4185:13" pos:end="4185:19">gen_jmp</name><argument_list pos:start="4185:20" pos:end="4185:42">(<argument pos:start="4185:21" pos:end="4185:21"><expr pos:start="4185:21" pos:end="4185:21"><name pos:start="4185:21" pos:end="4185:21">s</name></expr></argument>, <argument pos:start="4185:24" pos:end="4185:41"><expr pos:start="4185:24" pos:end="4185:41"><name pos:start="4185:24" pos:end="4185:28"><name pos:start="4185:24" pos:end="4185:24">s</name><operator pos:start="4185:25" pos:end="4185:26">-&gt;</operator><name pos:start="4185:27" pos:end="4185:28">pc</name></name> <operator pos:start="4185:30" pos:end="4185:30">-</operator> <name pos:start="4185:32" pos:end="4185:41"><name pos:start="4185:32" pos:end="4185:32">s</name><operator pos:start="4185:33" pos:end="4185:34">-&gt;</operator><name pos:start="4185:35" pos:end="4185:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="4189:9" pos:end="4189:14">break;</break>



        <comment type="block" format="doxygen" pos:start="4193:9" pos:end="4193:34">/************************/</comment>

        <comment type="block" pos:start="4195:9" pos:end="4195:21">/* control */</comment>

    <case pos:start="4197:5" pos:end="4197:14">case <expr pos:start="4197:10" pos:end="4197:13"><literal type="number" pos:start="4197:10" pos:end="4197:13">0xc2</literal></expr>:</case> <comment type="block" pos:start="4197:16" pos:end="4197:27">/* ret im */</comment>

        <expr_stmt pos:start="4199:9" pos:end="4199:40"><expr pos:start="4199:9" pos:end="4199:39"><name pos:start="4199:9" pos:end="4199:11">val</name> <operator pos:start="4199:13" pos:end="4199:13">=</operator> <call pos:start="4199:15" pos:end="4199:39"><name pos:start="4199:15" pos:end="4199:27">cpu_ldsw_code</name><argument_list pos:start="4199:28" pos:end="4199:39">(<argument pos:start="4199:29" pos:end="4199:31"><expr pos:start="4199:29" pos:end="4199:31"><name pos:start="4199:29" pos:end="4199:31">env</name></expr></argument>, <argument pos:start="4199:34" pos:end="4199:38"><expr pos:start="4199:34" pos:end="4199:38"><name pos:start="4199:34" pos:end="4199:38"><name pos:start="4199:34" pos:end="4199:34">s</name><operator pos:start="4199:35" pos:end="4199:36">-&gt;</operator><name pos:start="4199:37" pos:end="4199:38">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4201:9" pos:end="4201:19"><expr pos:start="4201:9" pos:end="4201:18"><name pos:start="4201:9" pos:end="4201:13"><name pos:start="4201:9" pos:end="4201:9">s</name><operator pos:start="4201:10" pos:end="4201:11">-&gt;</operator><name pos:start="4201:12" pos:end="4201:13">pc</name></name> <operator pos:start="4201:15" pos:end="4201:16">+=</operator> <literal type="number" pos:start="4201:18" pos:end="4201:18">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="4203:9" pos:end="4203:22"><expr pos:start="4203:9" pos:end="4203:21"><call pos:start="4203:9" pos:end="4203:21"><name pos:start="4203:9" pos:end="4203:18">gen_pop_T0</name><argument_list pos:start="4203:19" pos:end="4203:21">(<argument pos:start="4203:20" pos:end="4203:20"><expr pos:start="4203:20" pos:end="4203:20"><name pos:start="4203:20" pos:end="4203:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4205:9" pos:end="4207:25"><if pos:start="4205:9" pos:end="4207:25">if <condition pos:start="4205:12" pos:end="4205:34">(<expr pos:start="4205:13" pos:end="4205:33"><call pos:start="4205:13" pos:end="4205:21"><name pos:start="4205:13" pos:end="4205:18">CODE64</name><argument_list pos:start="4205:19" pos:end="4205:21">(<argument pos:start="4205:20" pos:end="4205:20"><expr pos:start="4205:20" pos:end="4205:20"><name pos:start="4205:20" pos:end="4205:20">s</name></expr></argument>)</argument_list></call> <operator pos:start="4205:23" pos:end="4205:24">&amp;&amp;</operator> <name pos:start="4205:26" pos:end="4205:33"><name pos:start="4205:26" pos:end="4205:26">s</name><operator pos:start="4205:27" pos:end="4205:28">-&gt;</operator><name pos:start="4205:29" pos:end="4205:33">dflag</name></name></expr>)</condition><block type="pseudo" pos:start="4207:13" pos:end="4207:25"><block_content pos:start="4207:13" pos:end="4207:25">

            <expr_stmt pos:start="4207:13" pos:end="4207:25"><expr pos:start="4207:13" pos:end="4207:24"><name pos:start="4207:13" pos:end="4207:20"><name pos:start="4207:13" pos:end="4207:13">s</name><operator pos:start="4207:14" pos:end="4207:15">-&gt;</operator><name pos:start="4207:16" pos:end="4207:20">dflag</name></name> <operator pos:start="4207:22" pos:end="4207:22">=</operator> <literal type="number" pos:start="4207:24" pos:end="4207:24">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4209:9" pos:end="4209:51"><expr pos:start="4209:9" pos:end="4209:50"><call pos:start="4209:9" pos:end="4209:50"><name pos:start="4209:9" pos:end="4209:24">gen_stack_update</name><argument_list pos:start="4209:25" pos:end="4209:50">(<argument pos:start="4209:26" pos:end="4209:26"><expr pos:start="4209:26" pos:end="4209:26"><name pos:start="4209:26" pos:end="4209:26">s</name></expr></argument>, <argument pos:start="4209:29" pos:end="4209:49"><expr pos:start="4209:29" pos:end="4209:49"><name pos:start="4209:29" pos:end="4209:31">val</name> <operator pos:start="4209:33" pos:end="4209:33">+</operator> <operator pos:start="4209:35" pos:end="4209:35">(</operator><literal type="number" pos:start="4209:36" pos:end="4209:36">2</literal> <operator pos:start="4209:38" pos:end="4209:39">&lt;&lt;</operator> <name pos:start="4209:41" pos:end="4209:48"><name pos:start="4209:41" pos:end="4209:41">s</name><operator pos:start="4209:42" pos:end="4209:43">-&gt;</operator><name pos:start="4209:44" pos:end="4209:48">dflag</name></name><operator pos:start="4209:49" pos:end="4209:49">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4211:9" pos:end="4213:34"><if pos:start="4211:9" pos:end="4213:34">if <condition pos:start="4211:12" pos:end="4211:26">(<expr pos:start="4211:13" pos:end="4211:25"><name pos:start="4211:13" pos:end="4211:20"><name pos:start="4211:13" pos:end="4211:13">s</name><operator pos:start="4211:14" pos:end="4211:15">-&gt;</operator><name pos:start="4211:16" pos:end="4211:20">dflag</name></name> <operator pos:start="4211:22" pos:end="4211:23">==</operator> <literal type="number" pos:start="4211:25" pos:end="4211:25">0</literal></expr>)</condition><block type="pseudo" pos:start="4213:13" pos:end="4213:34"><block_content pos:start="4213:13" pos:end="4213:34">

            <expr_stmt pos:start="4213:13" pos:end="4213:34"><expr pos:start="4213:13" pos:end="4213:33"><call pos:start="4213:13" pos:end="4213:33"><name pos:start="4213:13" pos:end="4213:31">gen_op_andl_T0_ffff</name><argument_list pos:start="4213:32" pos:end="4213:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4215:9" pos:end="4215:24"><expr pos:start="4215:9" pos:end="4215:23"><call pos:start="4215:9" pos:end="4215:23"><name pos:start="4215:9" pos:end="4215:21">gen_op_jmp_T0</name><argument_list pos:start="4215:22" pos:end="4215:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4217:9" pos:end="4217:19"><expr pos:start="4217:9" pos:end="4217:18"><call pos:start="4217:9" pos:end="4217:18"><name pos:start="4217:9" pos:end="4217:15">gen_eob</name><argument_list pos:start="4217:16" pos:end="4217:18">(<argument pos:start="4217:17" pos:end="4217:17"><expr pos:start="4217:17" pos:end="4217:17"><name pos:start="4217:17" pos:end="4217:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4219:9" pos:end="4219:14">break;</break>

    <case pos:start="4221:5" pos:end="4221:14">case <expr pos:start="4221:10" pos:end="4221:13"><literal type="number" pos:start="4221:10" pos:end="4221:13">0xc3</literal></expr>:</case> <comment type="block" pos:start="4221:16" pos:end="4221:24">/* ret */</comment>

        <expr_stmt pos:start="4223:9" pos:end="4223:22"><expr pos:start="4223:9" pos:end="4223:21"><call pos:start="4223:9" pos:end="4223:21"><name pos:start="4223:9" pos:end="4223:18">gen_pop_T0</name><argument_list pos:start="4223:19" pos:end="4223:21">(<argument pos:start="4223:20" pos:end="4223:20"><expr pos:start="4223:20" pos:end="4223:20"><name pos:start="4223:20" pos:end="4223:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4225:9" pos:end="4225:26"><expr pos:start="4225:9" pos:end="4225:25"><call pos:start="4225:9" pos:end="4225:25"><name pos:start="4225:9" pos:end="4225:22">gen_pop_update</name><argument_list pos:start="4225:23" pos:end="4225:25">(<argument pos:start="4225:24" pos:end="4225:24"><expr pos:start="4225:24" pos:end="4225:24"><name pos:start="4225:24" pos:end="4225:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4227:9" pos:end="4229:34"><if pos:start="4227:9" pos:end="4229:34">if <condition pos:start="4227:12" pos:end="4227:26">(<expr pos:start="4227:13" pos:end="4227:25"><name pos:start="4227:13" pos:end="4227:20"><name pos:start="4227:13" pos:end="4227:13">s</name><operator pos:start="4227:14" pos:end="4227:15">-&gt;</operator><name pos:start="4227:16" pos:end="4227:20">dflag</name></name> <operator pos:start="4227:22" pos:end="4227:23">==</operator> <literal type="number" pos:start="4227:25" pos:end="4227:25">0</literal></expr>)</condition><block type="pseudo" pos:start="4229:13" pos:end="4229:34"><block_content pos:start="4229:13" pos:end="4229:34">

            <expr_stmt pos:start="4229:13" pos:end="4229:34"><expr pos:start="4229:13" pos:end="4229:33"><call pos:start="4229:13" pos:end="4229:33"><name pos:start="4229:13" pos:end="4229:31">gen_op_andl_T0_ffff</name><argument_list pos:start="4229:32" pos:end="4229:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4231:9" pos:end="4231:24"><expr pos:start="4231:9" pos:end="4231:23"><call pos:start="4231:9" pos:end="4231:23"><name pos:start="4231:9" pos:end="4231:21">gen_op_jmp_T0</name><argument_list pos:start="4231:22" pos:end="4231:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4233:9" pos:end="4233:19"><expr pos:start="4233:9" pos:end="4233:18"><call pos:start="4233:9" pos:end="4233:18"><name pos:start="4233:9" pos:end="4233:15">gen_eob</name><argument_list pos:start="4233:16" pos:end="4233:18">(<argument pos:start="4233:17" pos:end="4233:17"><expr pos:start="4233:17" pos:end="4233:17"><name pos:start="4233:17" pos:end="4233:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4235:9" pos:end="4235:14">break;</break>

    <case pos:start="4237:5" pos:end="4237:14">case <expr pos:start="4237:10" pos:end="4237:13"><literal type="number" pos:start="4237:10" pos:end="4237:13">0xca</literal></expr>:</case> <comment type="block" pos:start="4237:16" pos:end="4237:28">/* lret im */</comment>

        <expr_stmt pos:start="4239:9" pos:end="4239:40"><expr pos:start="4239:9" pos:end="4239:39"><name pos:start="4239:9" pos:end="4239:11">val</name> <operator pos:start="4239:13" pos:end="4239:13">=</operator> <call pos:start="4239:15" pos:end="4239:39"><name pos:start="4239:15" pos:end="4239:27">cpu_ldsw_code</name><argument_list pos:start="4239:28" pos:end="4239:39">(<argument pos:start="4239:29" pos:end="4239:31"><expr pos:start="4239:29" pos:end="4239:31"><name pos:start="4239:29" pos:end="4239:31">env</name></expr></argument>, <argument pos:start="4239:34" pos:end="4239:38"><expr pos:start="4239:34" pos:end="4239:38"><name pos:start="4239:34" pos:end="4239:38"><name pos:start="4239:34" pos:end="4239:34">s</name><operator pos:start="4239:35" pos:end="4239:36">-&gt;</operator><name pos:start="4239:37" pos:end="4239:38">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4241:9" pos:end="4241:19"><expr pos:start="4241:9" pos:end="4241:18"><name pos:start="4241:9" pos:end="4241:13"><name pos:start="4241:9" pos:end="4241:9">s</name><operator pos:start="4241:10" pos:end="4241:11">-&gt;</operator><name pos:start="4241:12" pos:end="4241:13">pc</name></name> <operator pos:start="4241:15" pos:end="4241:16">+=</operator> <literal type="number" pos:start="4241:18" pos:end="4241:18">2</literal></expr>;</expr_stmt>

    <label pos:start="4243:5" pos:end="4243:12"><name pos:start="4243:5" pos:end="4243:11">do_lret</name>:</label>

        <if_stmt pos:start="4245:9" pos:end="4287:9"><if pos:start="4245:9" pos:end="4257:9">if <condition pos:start="4245:12" pos:end="4245:30">(<expr pos:start="4245:13" pos:end="4245:29"><name pos:start="4245:13" pos:end="4245:17"><name pos:start="4245:13" pos:end="4245:13">s</name><operator pos:start="4245:14" pos:end="4245:15">-&gt;</operator><name pos:start="4245:16" pos:end="4245:17">pe</name></name> <operator pos:start="4245:19" pos:end="4245:20">&amp;&amp;</operator> <operator pos:start="4245:22" pos:end="4245:22">!</operator><name pos:start="4245:23" pos:end="4245:29"><name pos:start="4245:23" pos:end="4245:23">s</name><operator pos:start="4245:24" pos:end="4245:25">-&gt;</operator><name pos:start="4245:26" pos:end="4245:29">vm86</name></name></expr>)</condition> <block pos:start="4245:32" pos:end="4257:9">{<block_content pos:start="4247:13" pos:end="4255:58">

            <if_stmt pos:start="4247:13" pos:end="4249:43"><if pos:start="4247:13" pos:end="4249:43">if <condition pos:start="4247:16" pos:end="4247:42">(<expr pos:start="4247:17" pos:end="4247:41"><name pos:start="4247:17" pos:end="4247:24"><name pos:start="4247:17" pos:end="4247:17">s</name><operator pos:start="4247:18" pos:end="4247:19">-&gt;</operator><name pos:start="4247:20" pos:end="4247:24">cc_op</name></name> <operator pos:start="4247:26" pos:end="4247:27">!=</operator> <name pos:start="4247:29" pos:end="4247:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4249:17" pos:end="4249:43"><block_content pos:start="4249:17" pos:end="4249:43">

                <expr_stmt pos:start="4249:17" pos:end="4249:43"><expr pos:start="4249:17" pos:end="4249:42"><call pos:start="4249:17" pos:end="4249:42"><name pos:start="4249:17" pos:end="4249:32">gen_op_set_cc_op</name><argument_list pos:start="4249:33" pos:end="4249:42">(<argument pos:start="4249:34" pos:end="4249:41"><expr pos:start="4249:34" pos:end="4249:41"><name pos:start="4249:34" pos:end="4249:41"><name pos:start="4249:34" pos:end="4249:34">s</name><operator pos:start="4249:35" pos:end="4249:36">-&gt;</operator><name pos:start="4249:37" pos:end="4249:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4251:13" pos:end="4251:46"><expr pos:start="4251:13" pos:end="4251:45"><call pos:start="4251:13" pos:end="4251:45"><name pos:start="4251:13" pos:end="4251:22">gen_jmp_im</name><argument_list pos:start="4251:23" pos:end="4251:45">(<argument pos:start="4251:24" pos:end="4251:44"><expr pos:start="4251:24" pos:end="4251:44"><name pos:start="4251:24" pos:end="4251:31">pc_start</name> <operator pos:start="4251:33" pos:end="4251:33">-</operator> <name pos:start="4251:35" pos:end="4251:44"><name pos:start="4251:35" pos:end="4251:35">s</name><operator pos:start="4251:36" pos:end="4251:37">-&gt;</operator><name pos:start="4251:38" pos:end="4251:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4253:13" pos:end="4255:58"><expr pos:start="4253:13" pos:end="4255:57"><call pos:start="4253:13" pos:end="4255:57"><name pos:start="4253:13" pos:end="4253:37">gen_helper_lret_protected</name><argument_list pos:start="4253:38" pos:end="4255:57">(<argument pos:start="4253:39" pos:end="4253:45"><expr pos:start="4253:39" pos:end="4253:45"><name pos:start="4253:39" pos:end="4253:45">cpu_env</name></expr></argument>, <argument pos:start="4253:48" pos:end="4253:70"><expr pos:start="4253:48" pos:end="4253:70"><call pos:start="4253:48" pos:end="4253:70"><name pos:start="4253:48" pos:end="4253:60">tcg_const_i32</name><argument_list pos:start="4253:61" pos:end="4253:70">(<argument pos:start="4253:62" pos:end="4253:69"><expr pos:start="4253:62" pos:end="4253:69"><name pos:start="4253:62" pos:end="4253:69"><name pos:start="4253:62" pos:end="4253:62">s</name><operator pos:start="4253:63" pos:end="4253:64">-&gt;</operator><name pos:start="4253:65" pos:end="4253:69">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                      <argument pos:start="4255:39" pos:end="4255:56"><expr pos:start="4255:39" pos:end="4255:56"><call pos:start="4255:39" pos:end="4255:56"><name pos:start="4255:39" pos:end="4255:51">tcg_const_i32</name><argument_list pos:start="4255:52" pos:end="4255:56">(<argument pos:start="4255:53" pos:end="4255:55"><expr pos:start="4255:53" pos:end="4255:55"><name pos:start="4255:53" pos:end="4255:55">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4257:11" pos:end="4287:9">else <block pos:start="4257:16" pos:end="4287:9">{<block_content pos:start="4259:13" pos:end="4285:55">

            <expr_stmt pos:start="4259:13" pos:end="4259:28"><expr pos:start="4259:13" pos:end="4259:27"><call pos:start="4259:13" pos:end="4259:27"><name pos:start="4259:13" pos:end="4259:24">gen_stack_A0</name><argument_list pos:start="4259:25" pos:end="4259:27">(<argument pos:start="4259:26" pos:end="4259:26"><expr pos:start="4259:26" pos:end="4259:26"><name pos:start="4259:26" pos:end="4259:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="4261:13" pos:end="4261:28">/* pop offset */</comment>

            <expr_stmt pos:start="4263:13" pos:end="4263:57"><expr pos:start="4263:13" pos:end="4263:56"><call pos:start="4263:13" pos:end="4263:56"><name pos:start="4263:13" pos:end="4263:27">gen_op_ld_T0_A0</name><argument_list pos:start="4263:28" pos:end="4263:56">(<argument pos:start="4263:29" pos:end="4263:55"><expr pos:start="4263:29" pos:end="4263:55"><literal type="number" pos:start="4263:29" pos:end="4263:31">1</literal> <operator pos:start="4263:31" pos:end="4263:31">+</operator> <name pos:start="4263:33" pos:end="4263:40"><name pos:start="4263:33" pos:end="4263:33">s</name><operator pos:start="4263:34" pos:end="4263:35">-&gt;</operator><name pos:start="4263:36" pos:end="4263:40">dflag</name></name> <operator pos:start="4263:42" pos:end="4263:42">+</operator> <name pos:start="4263:44" pos:end="4263:55"><name pos:start="4263:44" pos:end="4263:44">s</name><operator pos:start="4263:45" pos:end="4263:46">-&gt;</operator><name pos:start="4263:47" pos:end="4263:55">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4265:13" pos:end="4267:38"><if pos:start="4265:13" pos:end="4267:38">if <condition pos:start="4265:16" pos:end="4265:30">(<expr pos:start="4265:17" pos:end="4265:29"><name pos:start="4265:17" pos:end="4265:24"><name pos:start="4265:17" pos:end="4265:17">s</name><operator pos:start="4265:18" pos:end="4265:19">-&gt;</operator><name pos:start="4265:20" pos:end="4265:24">dflag</name></name> <operator pos:start="4265:26" pos:end="4265:27">==</operator> <literal type="number" pos:start="4265:29" pos:end="4265:29">0</literal></expr>)</condition><block type="pseudo" pos:start="4267:17" pos:end="4267:38"><block_content pos:start="4267:17" pos:end="4267:38">

                <expr_stmt pos:start="4267:17" pos:end="4267:38"><expr pos:start="4267:17" pos:end="4267:37"><call pos:start="4267:17" pos:end="4267:37"><name pos:start="4267:17" pos:end="4267:35">gen_op_andl_T0_ffff</name><argument_list pos:start="4267:36" pos:end="4267:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="block" pos:start="4269:13" pos:end="4271:27">/* NOTE: keeping EIP updated is not a problem in case of

               exception */</comment>

            <expr_stmt pos:start="4273:13" pos:end="4273:28"><expr pos:start="4273:13" pos:end="4273:27"><call pos:start="4273:13" pos:end="4273:27"><name pos:start="4273:13" pos:end="4273:25">gen_op_jmp_T0</name><argument_list pos:start="4273:26" pos:end="4273:27">()</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="4275:13" pos:end="4275:30">/* pop selector */</comment>

            <expr_stmt pos:start="4277:13" pos:end="4277:45"><expr pos:start="4277:13" pos:end="4277:44"><call pos:start="4277:13" pos:end="4277:44"><name pos:start="4277:13" pos:end="4277:29">gen_op_addl_A0_im</name><argument_list pos:start="4277:30" pos:end="4277:44">(<argument pos:start="4277:31" pos:end="4277:43"><expr pos:start="4277:31" pos:end="4277:43"><literal type="number" pos:start="4277:31" pos:end="4277:31">2</literal> <operator pos:start="4277:33" pos:end="4277:34">&lt;&lt;</operator> <name pos:start="4277:36" pos:end="4277:43"><name pos:start="4277:36" pos:end="4277:36">s</name><operator pos:start="4277:37" pos:end="4277:38">-&gt;</operator><name pos:start="4277:39" pos:end="4277:43">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4279:13" pos:end="4279:57"><expr pos:start="4279:13" pos:end="4279:56"><call pos:start="4279:13" pos:end="4279:56"><name pos:start="4279:13" pos:end="4279:27">gen_op_ld_T0_A0</name><argument_list pos:start="4279:28" pos:end="4279:56">(<argument pos:start="4279:29" pos:end="4279:55"><expr pos:start="4279:29" pos:end="4279:55"><literal type="number" pos:start="4279:29" pos:end="4279:31">1</literal> <operator pos:start="4279:31" pos:end="4279:31">+</operator> <name pos:start="4279:33" pos:end="4279:40"><name pos:start="4279:33" pos:end="4279:33">s</name><operator pos:start="4279:34" pos:end="4279:35">-&gt;</operator><name pos:start="4279:36" pos:end="4279:40">dflag</name></name> <operator pos:start="4279:42" pos:end="4279:42">+</operator> <name pos:start="4279:44" pos:end="4279:55"><name pos:start="4279:44" pos:end="4279:44">s</name><operator pos:start="4279:45" pos:end="4279:46">-&gt;</operator><name pos:start="4279:47" pos:end="4279:55">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4281:13" pos:end="4281:40"><expr pos:start="4281:13" pos:end="4281:39"><call pos:start="4281:13" pos:end="4281:39"><name pos:start="4281:13" pos:end="4281:33">gen_op_movl_seg_T0_vm</name><argument_list pos:start="4281:34" pos:end="4281:39">(<argument pos:start="4281:35" pos:end="4281:38"><expr pos:start="4281:35" pos:end="4281:38"><name pos:start="4281:35" pos:end="4281:38">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="4283:13" pos:end="4283:34">/* add stack offset */</comment>

            <expr_stmt pos:start="4285:13" pos:end="4285:55"><expr pos:start="4285:13" pos:end="4285:54"><call pos:start="4285:13" pos:end="4285:54"><name pos:start="4285:13" pos:end="4285:28">gen_stack_update</name><argument_list pos:start="4285:29" pos:end="4285:54">(<argument pos:start="4285:30" pos:end="4285:30"><expr pos:start="4285:30" pos:end="4285:30"><name pos:start="4285:30" pos:end="4285:30">s</name></expr></argument>, <argument pos:start="4285:33" pos:end="4285:53"><expr pos:start="4285:33" pos:end="4285:53"><name pos:start="4285:33" pos:end="4285:35">val</name> <operator pos:start="4285:37" pos:end="4285:37">+</operator> <operator pos:start="4285:39" pos:end="4285:39">(</operator><literal type="number" pos:start="4285:40" pos:end="4285:40">4</literal> <operator pos:start="4285:42" pos:end="4285:43">&lt;&lt;</operator> <name pos:start="4285:45" pos:end="4285:52"><name pos:start="4285:45" pos:end="4285:45">s</name><operator pos:start="4285:46" pos:end="4285:47">-&gt;</operator><name pos:start="4285:48" pos:end="4285:52">dflag</name></name><operator pos:start="4285:53" pos:end="4285:53">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="4289:9" pos:end="4289:19"><expr pos:start="4289:9" pos:end="4289:18"><call pos:start="4289:9" pos:end="4289:18"><name pos:start="4289:9" pos:end="4289:15">gen_eob</name><argument_list pos:start="4289:16" pos:end="4289:18">(<argument pos:start="4289:17" pos:end="4289:17"><expr pos:start="4289:17" pos:end="4289:17"><name pos:start="4289:17" pos:end="4289:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4291:9" pos:end="4291:14">break;</break>

    <case pos:start="4293:5" pos:end="4293:14">case <expr pos:start="4293:10" pos:end="4293:13"><literal type="number" pos:start="4293:10" pos:end="4293:13">0xcb</literal></expr>:</case> <comment type="block" pos:start="4293:16" pos:end="4293:25">/* lret */</comment>

        <expr_stmt pos:start="4295:9" pos:end="4295:16"><expr pos:start="4295:9" pos:end="4295:15"><name pos:start="4295:9" pos:end="4295:11">val</name> <operator pos:start="4295:13" pos:end="4295:13">=</operator> <literal type="number" pos:start="4295:15" pos:end="4295:15">0</literal></expr>;</expr_stmt>

        <goto pos:start="4297:9" pos:end="4297:21">goto <name pos:start="4297:14" pos:end="4297:20">do_lret</name>;</goto>

    <case pos:start="4299:5" pos:end="4299:14">case <expr pos:start="4299:10" pos:end="4299:13"><literal type="number" pos:start="4299:10" pos:end="4299:13">0xcf</literal></expr>:</case> <comment type="block" pos:start="4299:16" pos:end="4299:25">/* iret */</comment>

        <expr_stmt pos:start="4301:9" pos:end="4301:60"><expr pos:start="4301:9" pos:end="4301:59"><call pos:start="4301:9" pos:end="4301:59"><name pos:start="4301:9" pos:end="4301:31">gen_svm_check_intercept</name><argument_list pos:start="4301:32" pos:end="4301:59">(<argument pos:start="4301:33" pos:end="4301:33"><expr pos:start="4301:33" pos:end="4301:33"><name pos:start="4301:33" pos:end="4301:33">s</name></expr></argument>, <argument pos:start="4301:36" pos:end="4301:43"><expr pos:start="4301:36" pos:end="4301:43"><name pos:start="4301:36" pos:end="4301:43">pc_start</name></expr></argument>, <argument pos:start="4301:46" pos:end="4301:58"><expr pos:start="4301:46" pos:end="4301:58"><name pos:start="4301:46" pos:end="4301:58">SVM_EXIT_IRET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4303:9" pos:end="4339:9"><if pos:start="4303:9" pos:end="4311:9">if <condition pos:start="4303:12" pos:end="4303:19">(<expr pos:start="4303:13" pos:end="4303:18"><operator pos:start="4303:13" pos:end="4303:13">!</operator><name pos:start="4303:14" pos:end="4303:18"><name pos:start="4303:14" pos:end="4303:14">s</name><operator pos:start="4303:15" pos:end="4303:16">-&gt;</operator><name pos:start="4303:17" pos:end="4303:18">pe</name></name></expr>)</condition> <block pos:start="4303:21" pos:end="4311:9">{<block_content pos:start="4307:13" pos:end="4309:36">

            <comment type="block" pos:start="4305:13" pos:end="4305:27">/* real mode */</comment>

            <expr_stmt pos:start="4307:13" pos:end="4307:67"><expr pos:start="4307:13" pos:end="4307:66"><call pos:start="4307:13" pos:end="4307:66"><name pos:start="4307:13" pos:end="4307:32">gen_helper_iret_real</name><argument_list pos:start="4307:33" pos:end="4307:66">(<argument pos:start="4307:34" pos:end="4307:40"><expr pos:start="4307:34" pos:end="4307:40"><name pos:start="4307:34" pos:end="4307:40">cpu_env</name></expr></argument>, <argument pos:start="4307:43" pos:end="4307:65"><expr pos:start="4307:43" pos:end="4307:65"><call pos:start="4307:43" pos:end="4307:65"><name pos:start="4307:43" pos:end="4307:55">tcg_const_i32</name><argument_list pos:start="4307:56" pos:end="4307:65">(<argument pos:start="4307:57" pos:end="4307:64"><expr pos:start="4307:57" pos:end="4307:64"><name pos:start="4307:57" pos:end="4307:64"><name pos:start="4307:57" pos:end="4307:57">s</name><operator pos:start="4307:58" pos:end="4307:59">-&gt;</operator><name pos:start="4307:60" pos:end="4307:64">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4309:13" pos:end="4309:36"><expr pos:start="4309:13" pos:end="4309:35"><name pos:start="4309:13" pos:end="4309:20"><name pos:start="4309:13" pos:end="4309:13">s</name><operator pos:start="4309:14" pos:end="4309:15">-&gt;</operator><name pos:start="4309:16" pos:end="4309:20">cc_op</name></name> <operator pos:start="4309:22" pos:end="4309:22">=</operator> <name pos:start="4309:24" pos:end="4309:35">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="4311:11" pos:end="4325:9">else if <condition pos:start="4311:19" pos:end="4311:27">(<expr pos:start="4311:20" pos:end="4311:26"><name pos:start="4311:20" pos:end="4311:26"><name pos:start="4311:20" pos:end="4311:20">s</name><operator pos:start="4311:21" pos:end="4311:22">-&gt;</operator><name pos:start="4311:23" pos:end="4311:26">vm86</name></name></expr>)</condition> <block pos:start="4311:29" pos:end="4325:9">{<block_content pos:start="4313:13" pos:end="4323:13">

            <if_stmt pos:start="4313:13" pos:end="4323:13"><if pos:start="4313:13" pos:end="4317:13">if <condition pos:start="4313:16" pos:end="4313:29">(<expr pos:start="4313:17" pos:end="4313:28"><name pos:start="4313:17" pos:end="4313:23"><name pos:start="4313:17" pos:end="4313:17">s</name><operator pos:start="4313:18" pos:end="4313:19">-&gt;</operator><name pos:start="4313:20" pos:end="4313:23">iopl</name></name> <operator pos:start="4313:25" pos:end="4313:26">!=</operator> <literal type="number" pos:start="4313:28" pos:end="4313:28">3</literal></expr>)</condition> <block pos:start="4313:31" pos:end="4317:13">{<block_content pos:start="4315:17" pos:end="4315:68">

                <expr_stmt pos:start="4315:17" pos:end="4315:68"><expr pos:start="4315:17" pos:end="4315:67"><call pos:start="4315:17" pos:end="4315:67"><name pos:start="4315:17" pos:end="4315:29">gen_exception</name><argument_list pos:start="4315:30" pos:end="4315:67">(<argument pos:start="4315:31" pos:end="4315:31"><expr pos:start="4315:31" pos:end="4315:31"><name pos:start="4315:31" pos:end="4315:31">s</name></expr></argument>, <argument pos:start="4315:34" pos:end="4315:43"><expr pos:start="4315:34" pos:end="4315:43"><name pos:start="4315:34" pos:end="4315:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4315:46" pos:end="4315:66"><expr pos:start="4315:46" pos:end="4315:66"><name pos:start="4315:46" pos:end="4315:53">pc_start</name> <operator pos:start="4315:55" pos:end="4315:55">-</operator> <name pos:start="4315:57" pos:end="4315:66"><name pos:start="4315:57" pos:end="4315:57">s</name><operator pos:start="4315:58" pos:end="4315:59">-&gt;</operator><name pos:start="4315:60" pos:end="4315:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="4317:15" pos:end="4323:13">else <block pos:start="4317:20" pos:end="4323:13">{<block_content pos:start="4319:17" pos:end="4321:40">

                <expr_stmt pos:start="4319:17" pos:end="4319:71"><expr pos:start="4319:17" pos:end="4319:70"><call pos:start="4319:17" pos:end="4319:70"><name pos:start="4319:17" pos:end="4319:36">gen_helper_iret_real</name><argument_list pos:start="4319:37" pos:end="4319:70">(<argument pos:start="4319:38" pos:end="4319:44"><expr pos:start="4319:38" pos:end="4319:44"><name pos:start="4319:38" pos:end="4319:44">cpu_env</name></expr></argument>, <argument pos:start="4319:47" pos:end="4319:69"><expr pos:start="4319:47" pos:end="4319:69"><call pos:start="4319:47" pos:end="4319:69"><name pos:start="4319:47" pos:end="4319:59">tcg_const_i32</name><argument_list pos:start="4319:60" pos:end="4319:69">(<argument pos:start="4319:61" pos:end="4319:68"><expr pos:start="4319:61" pos:end="4319:68"><name pos:start="4319:61" pos:end="4319:68"><name pos:start="4319:61" pos:end="4319:61">s</name><operator pos:start="4319:62" pos:end="4319:63">-&gt;</operator><name pos:start="4319:64" pos:end="4319:68">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4321:17" pos:end="4321:40"><expr pos:start="4321:17" pos:end="4321:39"><name pos:start="4321:17" pos:end="4321:24"><name pos:start="4321:17" pos:end="4321:17">s</name><operator pos:start="4321:18" pos:end="4321:19">-&gt;</operator><name pos:start="4321:20" pos:end="4321:24">cc_op</name></name> <operator pos:start="4321:26" pos:end="4321:26">=</operator> <name pos:start="4321:28" pos:end="4321:39">CC_OP_EFLAGS</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="4325:11" pos:end="4339:9">else <block pos:start="4325:16" pos:end="4339:9">{<block_content pos:start="4327:13" pos:end="4337:36">

            <if_stmt pos:start="4327:13" pos:end="4329:43"><if pos:start="4327:13" pos:end="4329:43">if <condition pos:start="4327:16" pos:end="4327:42">(<expr pos:start="4327:17" pos:end="4327:41"><name pos:start="4327:17" pos:end="4327:24"><name pos:start="4327:17" pos:end="4327:17">s</name><operator pos:start="4327:18" pos:end="4327:19">-&gt;</operator><name pos:start="4327:20" pos:end="4327:24">cc_op</name></name> <operator pos:start="4327:26" pos:end="4327:27">!=</operator> <name pos:start="4327:29" pos:end="4327:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4329:17" pos:end="4329:43"><block_content pos:start="4329:17" pos:end="4329:43">

                <expr_stmt pos:start="4329:17" pos:end="4329:43"><expr pos:start="4329:17" pos:end="4329:42"><call pos:start="4329:17" pos:end="4329:42"><name pos:start="4329:17" pos:end="4329:32">gen_op_set_cc_op</name><argument_list pos:start="4329:33" pos:end="4329:42">(<argument pos:start="4329:34" pos:end="4329:41"><expr pos:start="4329:34" pos:end="4329:41"><name pos:start="4329:34" pos:end="4329:41"><name pos:start="4329:34" pos:end="4329:34">s</name><operator pos:start="4329:35" pos:end="4329:36">-&gt;</operator><name pos:start="4329:37" pos:end="4329:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4331:13" pos:end="4331:46"><expr pos:start="4331:13" pos:end="4331:45"><call pos:start="4331:13" pos:end="4331:45"><name pos:start="4331:13" pos:end="4331:22">gen_jmp_im</name><argument_list pos:start="4331:23" pos:end="4331:45">(<argument pos:start="4331:24" pos:end="4331:44"><expr pos:start="4331:24" pos:end="4331:44"><name pos:start="4331:24" pos:end="4331:31">pc_start</name> <operator pos:start="4331:33" pos:end="4331:33">-</operator> <name pos:start="4331:35" pos:end="4331:44"><name pos:start="4331:35" pos:end="4331:35">s</name><operator pos:start="4331:36" pos:end="4331:37">-&gt;</operator><name pos:start="4331:38" pos:end="4331:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4333:13" pos:end="4335:73"><expr pos:start="4333:13" pos:end="4335:72"><call pos:start="4333:13" pos:end="4335:72"><name pos:start="4333:13" pos:end="4333:37">gen_helper_iret_protected</name><argument_list pos:start="4333:38" pos:end="4335:72">(<argument pos:start="4333:39" pos:end="4333:45"><expr pos:start="4333:39" pos:end="4333:45"><name pos:start="4333:39" pos:end="4333:45">cpu_env</name></expr></argument>, <argument pos:start="4333:48" pos:end="4333:70"><expr pos:start="4333:48" pos:end="4333:70"><call pos:start="4333:48" pos:end="4333:70"><name pos:start="4333:48" pos:end="4333:60">tcg_const_i32</name><argument_list pos:start="4333:61" pos:end="4333:70">(<argument pos:start="4333:62" pos:end="4333:69"><expr pos:start="4333:62" pos:end="4333:69"><name pos:start="4333:62" pos:end="4333:69"><name pos:start="4333:62" pos:end="4333:62">s</name><operator pos:start="4333:63" pos:end="4333:64">-&gt;</operator><name pos:start="4333:65" pos:end="4333:69">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                      <argument pos:start="4335:39" pos:end="4335:71"><expr pos:start="4335:39" pos:end="4335:71"><call pos:start="4335:39" pos:end="4335:71"><name pos:start="4335:39" pos:end="4335:51">tcg_const_i32</name><argument_list pos:start="4335:52" pos:end="4335:71">(<argument pos:start="4335:53" pos:end="4335:70"><expr pos:start="4335:53" pos:end="4335:70"><name pos:start="4335:53" pos:end="4335:57"><name pos:start="4335:53" pos:end="4335:53">s</name><operator pos:start="4335:54" pos:end="4335:55">-&gt;</operator><name pos:start="4335:56" pos:end="4335:57">pc</name></name> <operator pos:start="4335:59" pos:end="4335:59">-</operator> <name pos:start="4335:61" pos:end="4335:70"><name pos:start="4335:61" pos:end="4335:61">s</name><operator pos:start="4335:62" pos:end="4335:63">-&gt;</operator><name pos:start="4335:64" pos:end="4335:70">cs_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4337:13" pos:end="4337:36"><expr pos:start="4337:13" pos:end="4337:35"><name pos:start="4337:13" pos:end="4337:20"><name pos:start="4337:13" pos:end="4337:13">s</name><operator pos:start="4337:14" pos:end="4337:15">-&gt;</operator><name pos:start="4337:16" pos:end="4337:20">cc_op</name></name> <operator pos:start="4337:22" pos:end="4337:22">=</operator> <name pos:start="4337:24" pos:end="4337:35">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="4341:9" pos:end="4341:19"><expr pos:start="4341:9" pos:end="4341:18"><call pos:start="4341:9" pos:end="4341:18"><name pos:start="4341:9" pos:end="4341:15">gen_eob</name><argument_list pos:start="4341:16" pos:end="4341:18">(<argument pos:start="4341:17" pos:end="4341:17"><expr pos:start="4341:17" pos:end="4341:17"><name pos:start="4341:17" pos:end="4341:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4343:9" pos:end="4343:14">break;</break>

    <case pos:start="4345:5" pos:end="4345:14">case <expr pos:start="4345:10" pos:end="4345:13"><literal type="number" pos:start="4345:10" pos:end="4345:13">0xe8</literal></expr>:</case> <comment type="block" pos:start="4345:16" pos:end="4345:28">/* call im */</comment>

        <block pos:start="4347:9" pos:end="4375:9">{<block_content pos:start="4349:13" pos:end="4373:29">

            <if_stmt pos:start="4349:13" pos:end="4355:58"><if pos:start="4349:13" pos:end="4351:58">if <condition pos:start="4349:16" pos:end="4349:22">(<expr pos:start="4349:17" pos:end="4349:21"><name pos:start="4349:17" pos:end="4349:21">dflag</name></expr>)</condition><block type="pseudo" pos:start="4351:17" pos:end="4351:58"><block_content pos:start="4351:17" pos:end="4351:58">

                <expr_stmt pos:start="4351:17" pos:end="4351:58"><expr pos:start="4351:17" pos:end="4351:57"><name pos:start="4351:17" pos:end="4351:20">tval</name> <operator pos:start="4351:22" pos:end="4351:22">=</operator> <operator pos:start="4351:24" pos:end="4351:24">(</operator><name pos:start="4351:25" pos:end="4351:31">int32_t</name><operator pos:start="4351:32" pos:end="4351:32">)</operator><call pos:start="4351:33" pos:end="4351:57"><name pos:start="4351:33" pos:end="4351:40">insn_get</name><argument_list pos:start="4351:41" pos:end="4351:57">(<argument pos:start="4351:42" pos:end="4351:44"><expr pos:start="4351:42" pos:end="4351:44"><name pos:start="4351:42" pos:end="4351:44">env</name></expr></argument>, <argument pos:start="4351:47" pos:end="4351:47"><expr pos:start="4351:47" pos:end="4351:47"><name pos:start="4351:47" pos:end="4351:47">s</name></expr></argument>, <argument pos:start="4351:50" pos:end="4351:56"><expr pos:start="4351:50" pos:end="4351:56"><name pos:start="4351:50" pos:end="4351:56">OT_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="4353:13" pos:end="4355:58">else<block type="pseudo" pos:start="4355:17" pos:end="4355:58"><block_content pos:start="4355:17" pos:end="4355:58">

                <expr_stmt pos:start="4355:17" pos:end="4355:58"><expr pos:start="4355:17" pos:end="4355:57"><name pos:start="4355:17" pos:end="4355:20">tval</name> <operator pos:start="4355:22" pos:end="4355:22">=</operator> <operator pos:start="4355:24" pos:end="4355:24">(</operator><name pos:start="4355:25" pos:end="4355:31">int16_t</name><operator pos:start="4355:32" pos:end="4355:32">)</operator><call pos:start="4355:33" pos:end="4355:57"><name pos:start="4355:33" pos:end="4355:40">insn_get</name><argument_list pos:start="4355:41" pos:end="4355:57">(<argument pos:start="4355:42" pos:end="4355:44"><expr pos:start="4355:42" pos:end="4355:44"><name pos:start="4355:42" pos:end="4355:44">env</name></expr></argument>, <argument pos:start="4355:47" pos:end="4355:47"><expr pos:start="4355:47" pos:end="4355:47"><name pos:start="4355:47" pos:end="4355:47">s</name></expr></argument>, <argument pos:start="4355:50" pos:end="4355:56"><expr pos:start="4355:50" pos:end="4355:56"><name pos:start="4355:50" pos:end="4355:56">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="4357:13" pos:end="4357:42"><expr pos:start="4357:13" pos:end="4357:41"><name pos:start="4357:13" pos:end="4357:20">next_eip</name> <operator pos:start="4357:22" pos:end="4357:22">=</operator> <name pos:start="4357:24" pos:end="4357:28"><name pos:start="4357:24" pos:end="4357:24">s</name><operator pos:start="4357:25" pos:end="4357:26">-&gt;</operator><name pos:start="4357:27" pos:end="4357:28">pc</name></name> <operator pos:start="4357:30" pos:end="4357:30">-</operator> <name pos:start="4357:32" pos:end="4357:41"><name pos:start="4357:32" pos:end="4357:32">s</name><operator pos:start="4357:33" pos:end="4357:34">-&gt;</operator><name pos:start="4357:35" pos:end="4357:41">cs_base</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="4359:13" pos:end="4359:29"><expr pos:start="4359:13" pos:end="4359:28"><name pos:start="4359:13" pos:end="4359:16">tval</name> <operator pos:start="4359:18" pos:end="4359:19">+=</operator> <name pos:start="4359:21" pos:end="4359:28">next_eip</name></expr>;</expr_stmt>

            <if_stmt pos:start="4361:13" pos:end="4367:35"><if pos:start="4361:13" pos:end="4363:31">if <condition pos:start="4361:16" pos:end="4361:30">(<expr pos:start="4361:17" pos:end="4361:29"><name pos:start="4361:17" pos:end="4361:24"><name pos:start="4361:17" pos:end="4361:17">s</name><operator pos:start="4361:18" pos:end="4361:19">-&gt;</operator><name pos:start="4361:20" pos:end="4361:24">dflag</name></name> <operator pos:start="4361:26" pos:end="4361:27">==</operator> <literal type="number" pos:start="4361:29" pos:end="4361:29">0</literal></expr>)</condition><block type="pseudo" pos:start="4363:17" pos:end="4363:31"><block_content pos:start="4363:17" pos:end="4363:31">

                <expr_stmt pos:start="4363:17" pos:end="4363:31"><expr pos:start="4363:17" pos:end="4363:30"><name pos:start="4363:17" pos:end="4363:20">tval</name> <operator pos:start="4363:22" pos:end="4363:23">&amp;=</operator> <literal type="number" pos:start="4363:25" pos:end="4363:30">0xffff</literal></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="4365:13" pos:end="4367:35">else if<condition pos:start="4365:20" pos:end="4365:31">(<expr pos:start="4365:21" pos:end="4365:30"><operator pos:start="4365:21" pos:end="4365:21">!</operator><call pos:start="4365:22" pos:end="4365:30"><name pos:start="4365:22" pos:end="4365:27">CODE64</name><argument_list pos:start="4365:28" pos:end="4365:30">(<argument pos:start="4365:29" pos:end="4365:29"><expr pos:start="4365:29" pos:end="4365:29"><name pos:start="4365:29" pos:end="4365:29">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4367:17" pos:end="4367:35"><block_content pos:start="4367:17" pos:end="4367:35">

                <expr_stmt pos:start="4367:17" pos:end="4367:35"><expr pos:start="4367:17" pos:end="4367:34"><name pos:start="4367:17" pos:end="4367:20">tval</name> <operator pos:start="4367:22" pos:end="4367:23">&amp;=</operator> <literal type="number" pos:start="4367:25" pos:end="4367:34">0xffffffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4369:13" pos:end="4369:38"><expr pos:start="4369:13" pos:end="4369:37"><call pos:start="4369:13" pos:end="4369:37"><name pos:start="4369:13" pos:end="4369:27">gen_movtl_T0_im</name><argument_list pos:start="4369:28" pos:end="4369:37">(<argument pos:start="4369:29" pos:end="4369:36"><expr pos:start="4369:29" pos:end="4369:36"><name pos:start="4369:29" pos:end="4369:36">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4371:13" pos:end="4371:27"><expr pos:start="4371:13" pos:end="4371:26"><call pos:start="4371:13" pos:end="4371:26"><name pos:start="4371:13" pos:end="4371:23">gen_push_T0</name><argument_list pos:start="4371:24" pos:end="4371:26">(<argument pos:start="4371:25" pos:end="4371:25"><expr pos:start="4371:25" pos:end="4371:25"><name pos:start="4371:25" pos:end="4371:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4373:13" pos:end="4373:29"><expr pos:start="4373:13" pos:end="4373:28"><call pos:start="4373:13" pos:end="4373:28"><name pos:start="4373:13" pos:end="4373:19">gen_jmp</name><argument_list pos:start="4373:20" pos:end="4373:28">(<argument pos:start="4373:21" pos:end="4373:21"><expr pos:start="4373:21" pos:end="4373:21"><name pos:start="4373:21" pos:end="4373:21">s</name></expr></argument>, <argument pos:start="4373:24" pos:end="4373:27"><expr pos:start="4373:24" pos:end="4373:27"><name pos:start="4373:24" pos:end="4373:27">tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="4377:9" pos:end="4377:14">break;</break>

    <case pos:start="4379:5" pos:end="4379:14">case <expr pos:start="4379:10" pos:end="4379:13"><literal type="number" pos:start="4379:10" pos:end="4379:13">0x9a</literal></expr>:</case> <comment type="block" pos:start="4379:16" pos:end="4379:29">/* lcall im */</comment>

        <block pos:start="4381:9" pos:end="4403:9">{<block_content pos:start="4383:13" pos:end="4401:39">

            <decl_stmt pos:start="4383:13" pos:end="4383:42"><decl pos:start="4383:13" pos:end="4383:33"><type pos:start="4383:13" pos:end="4383:24"><name pos:start="4383:13" pos:end="4383:20">unsigned</name> <name pos:start="4383:22" pos:end="4383:24">int</name></type> <name pos:start="4383:26" pos:end="4383:33">selector</name></decl>, <decl pos:start="4383:36" pos:end="4383:41"><type ref="prev" pos:start="4383:13" pos:end="4383:24"/><name pos:start="4383:36" pos:end="4383:41">offset</name></decl>;</decl_stmt>



            <if_stmt pos:start="4387:13" pos:end="4389:32"><if pos:start="4387:13" pos:end="4389:32">if <condition pos:start="4387:16" pos:end="4387:26">(<expr pos:start="4387:17" pos:end="4387:25"><call pos:start="4387:17" pos:end="4387:25"><name pos:start="4387:17" pos:end="4387:22">CODE64</name><argument_list pos:start="4387:23" pos:end="4387:25">(<argument pos:start="4387:24" pos:end="4387:24"><expr pos:start="4387:24" pos:end="4387:24"><name pos:start="4387:24" pos:end="4387:24">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4389:17" pos:end="4389:32"><block_content pos:start="4389:17" pos:end="4389:32">

                <goto pos:start="4389:17" pos:end="4389:32">goto <name pos:start="4389:22" pos:end="4389:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4391:13" pos:end="4391:43"><expr pos:start="4391:13" pos:end="4391:42"><name pos:start="4391:13" pos:end="4391:14">ot</name> <operator pos:start="4391:16" pos:end="4391:16">=</operator> <ternary pos:start="4391:18" pos:end="4391:42"><condition pos:start="4391:18" pos:end="4391:24"><expr pos:start="4391:18" pos:end="4391:22"><name pos:start="4391:18" pos:end="4391:22">dflag</name></expr> ?</condition><then pos:start="4391:26" pos:end="4391:32"> <expr pos:start="4391:26" pos:end="4391:32"><name pos:start="4391:26" pos:end="4391:32">OT_LONG</name></expr> </then><else pos:start="4391:34" pos:end="4391:42">: <expr pos:start="4391:36" pos:end="4391:42"><name pos:start="4391:36" pos:end="4391:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="4393:13" pos:end="4393:42"><expr pos:start="4393:13" pos:end="4393:41"><name pos:start="4393:13" pos:end="4393:18">offset</name> <operator pos:start="4393:20" pos:end="4393:20">=</operator> <call pos:start="4393:22" pos:end="4393:41"><name pos:start="4393:22" pos:end="4393:29">insn_get</name><argument_list pos:start="4393:30" pos:end="4393:41">(<argument pos:start="4393:31" pos:end="4393:33"><expr pos:start="4393:31" pos:end="4393:33"><name pos:start="4393:31" pos:end="4393:33">env</name></expr></argument>, <argument pos:start="4393:36" pos:end="4393:36"><expr pos:start="4393:36" pos:end="4393:36"><name pos:start="4393:36" pos:end="4393:36">s</name></expr></argument>, <argument pos:start="4393:39" pos:end="4393:40"><expr pos:start="4393:39" pos:end="4393:40"><name pos:start="4393:39" pos:end="4393:40">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4395:13" pos:end="4395:49"><expr pos:start="4395:13" pos:end="4395:48"><name pos:start="4395:13" pos:end="4395:20">selector</name> <operator pos:start="4395:22" pos:end="4395:22">=</operator> <call pos:start="4395:24" pos:end="4395:48"><name pos:start="4395:24" pos:end="4395:31">insn_get</name><argument_list pos:start="4395:32" pos:end="4395:48">(<argument pos:start="4395:33" pos:end="4395:35"><expr pos:start="4395:33" pos:end="4395:35"><name pos:start="4395:33" pos:end="4395:35">env</name></expr></argument>, <argument pos:start="4395:38" pos:end="4395:38"><expr pos:start="4395:38" pos:end="4395:38"><name pos:start="4395:38" pos:end="4395:38">s</name></expr></argument>, <argument pos:start="4395:41" pos:end="4395:47"><expr pos:start="4395:41" pos:end="4395:47"><name pos:start="4395:41" pos:end="4395:47">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="4399:13" pos:end="4399:40"><expr pos:start="4399:13" pos:end="4399:39"><call pos:start="4399:13" pos:end="4399:39"><name pos:start="4399:13" pos:end="4399:29">gen_op_movl_T0_im</name><argument_list pos:start="4399:30" pos:end="4399:39">(<argument pos:start="4399:31" pos:end="4399:38"><expr pos:start="4399:31" pos:end="4399:38"><name pos:start="4399:31" pos:end="4399:38">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4401:13" pos:end="4401:39"><expr pos:start="4401:13" pos:end="4401:38"><call pos:start="4401:13" pos:end="4401:38"><name pos:start="4401:13" pos:end="4401:30">gen_op_movl_T1_imu</name><argument_list pos:start="4401:31" pos:end="4401:38">(<argument pos:start="4401:32" pos:end="4401:37"><expr pos:start="4401:32" pos:end="4401:37"><name pos:start="4401:32" pos:end="4401:37">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <goto pos:start="4405:9" pos:end="4405:22">goto <name pos:start="4405:14" pos:end="4405:21">do_lcall</name>;</goto>

    <case pos:start="4407:5" pos:end="4407:14">case <expr pos:start="4407:10" pos:end="4407:13"><literal type="number" pos:start="4407:10" pos:end="4407:13">0xe9</literal></expr>:</case> <comment type="block" pos:start="4407:16" pos:end="4407:27">/* jmp im */</comment>

        <if_stmt pos:start="4409:9" pos:end="4415:54"><if pos:start="4409:9" pos:end="4411:54">if <condition pos:start="4409:12" pos:end="4409:18">(<expr pos:start="4409:13" pos:end="4409:17"><name pos:start="4409:13" pos:end="4409:17">dflag</name></expr>)</condition><block type="pseudo" pos:start="4411:13" pos:end="4411:54"><block_content pos:start="4411:13" pos:end="4411:54">

            <expr_stmt pos:start="4411:13" pos:end="4411:54"><expr pos:start="4411:13" pos:end="4411:53"><name pos:start="4411:13" pos:end="4411:16">tval</name> <operator pos:start="4411:18" pos:end="4411:18">=</operator> <operator pos:start="4411:20" pos:end="4411:20">(</operator><name pos:start="4411:21" pos:end="4411:27">int32_t</name><operator pos:start="4411:28" pos:end="4411:28">)</operator><call pos:start="4411:29" pos:end="4411:53"><name pos:start="4411:29" pos:end="4411:36">insn_get</name><argument_list pos:start="4411:37" pos:end="4411:53">(<argument pos:start="4411:38" pos:end="4411:40"><expr pos:start="4411:38" pos:end="4411:40"><name pos:start="4411:38" pos:end="4411:40">env</name></expr></argument>, <argument pos:start="4411:43" pos:end="4411:43"><expr pos:start="4411:43" pos:end="4411:43"><name pos:start="4411:43" pos:end="4411:43">s</name></expr></argument>, <argument pos:start="4411:46" pos:end="4411:52"><expr pos:start="4411:46" pos:end="4411:52"><name pos:start="4411:46" pos:end="4411:52">OT_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="4413:9" pos:end="4415:54">else<block type="pseudo" pos:start="4415:13" pos:end="4415:54"><block_content pos:start="4415:13" pos:end="4415:54">

            <expr_stmt pos:start="4415:13" pos:end="4415:54"><expr pos:start="4415:13" pos:end="4415:53"><name pos:start="4415:13" pos:end="4415:16">tval</name> <operator pos:start="4415:18" pos:end="4415:18">=</operator> <operator pos:start="4415:20" pos:end="4415:20">(</operator><name pos:start="4415:21" pos:end="4415:27">int16_t</name><operator pos:start="4415:28" pos:end="4415:28">)</operator><call pos:start="4415:29" pos:end="4415:53"><name pos:start="4415:29" pos:end="4415:36">insn_get</name><argument_list pos:start="4415:37" pos:end="4415:53">(<argument pos:start="4415:38" pos:end="4415:40"><expr pos:start="4415:38" pos:end="4415:40"><name pos:start="4415:38" pos:end="4415:40">env</name></expr></argument>, <argument pos:start="4415:43" pos:end="4415:43"><expr pos:start="4415:43" pos:end="4415:43"><name pos:start="4415:43" pos:end="4415:43">s</name></expr></argument>, <argument pos:start="4415:46" pos:end="4415:52"><expr pos:start="4415:46" pos:end="4415:52"><name pos:start="4415:46" pos:end="4415:52">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="4417:9" pos:end="4417:35"><expr pos:start="4417:9" pos:end="4417:34"><name pos:start="4417:9" pos:end="4417:12">tval</name> <operator pos:start="4417:14" pos:end="4417:15">+=</operator> <name pos:start="4417:17" pos:end="4417:21"><name pos:start="4417:17" pos:end="4417:17">s</name><operator pos:start="4417:18" pos:end="4417:19">-&gt;</operator><name pos:start="4417:20" pos:end="4417:21">pc</name></name> <operator pos:start="4417:23" pos:end="4417:23">-</operator> <name pos:start="4417:25" pos:end="4417:34"><name pos:start="4417:25" pos:end="4417:25">s</name><operator pos:start="4417:26" pos:end="4417:27">-&gt;</operator><name pos:start="4417:28" pos:end="4417:34">cs_base</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="4419:9" pos:end="4425:31"><if pos:start="4419:9" pos:end="4421:27">if <condition pos:start="4419:12" pos:end="4419:26">(<expr pos:start="4419:13" pos:end="4419:25"><name pos:start="4419:13" pos:end="4419:20"><name pos:start="4419:13" pos:end="4419:13">s</name><operator pos:start="4419:14" pos:end="4419:15">-&gt;</operator><name pos:start="4419:16" pos:end="4419:20">dflag</name></name> <operator pos:start="4419:22" pos:end="4419:23">==</operator> <literal type="number" pos:start="4419:25" pos:end="4419:25">0</literal></expr>)</condition><block type="pseudo" pos:start="4421:13" pos:end="4421:27"><block_content pos:start="4421:13" pos:end="4421:27">

            <expr_stmt pos:start="4421:13" pos:end="4421:27"><expr pos:start="4421:13" pos:end="4421:26"><name pos:start="4421:13" pos:end="4421:16">tval</name> <operator pos:start="4421:18" pos:end="4421:19">&amp;=</operator> <literal type="number" pos:start="4421:21" pos:end="4421:26">0xffff</literal></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="4423:9" pos:end="4425:31">else if<condition pos:start="4423:16" pos:end="4423:27">(<expr pos:start="4423:17" pos:end="4423:26"><operator pos:start="4423:17" pos:end="4423:17">!</operator><call pos:start="4423:18" pos:end="4423:26"><name pos:start="4423:18" pos:end="4423:23">CODE64</name><argument_list pos:start="4423:24" pos:end="4423:26">(<argument pos:start="4423:25" pos:end="4423:25"><expr pos:start="4423:25" pos:end="4423:25"><name pos:start="4423:25" pos:end="4423:25">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4425:13" pos:end="4425:31"><block_content pos:start="4425:13" pos:end="4425:31">

            <expr_stmt pos:start="4425:13" pos:end="4425:31"><expr pos:start="4425:13" pos:end="4425:30"><name pos:start="4425:13" pos:end="4425:16">tval</name> <operator pos:start="4425:18" pos:end="4425:19">&amp;=</operator> <literal type="number" pos:start="4425:21" pos:end="4425:30">0xffffffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4427:9" pos:end="4427:25"><expr pos:start="4427:9" pos:end="4427:24"><call pos:start="4427:9" pos:end="4427:24"><name pos:start="4427:9" pos:end="4427:15">gen_jmp</name><argument_list pos:start="4427:16" pos:end="4427:24">(<argument pos:start="4427:17" pos:end="4427:17"><expr pos:start="4427:17" pos:end="4427:17"><name pos:start="4427:17" pos:end="4427:17">s</name></expr></argument>, <argument pos:start="4427:20" pos:end="4427:23"><expr pos:start="4427:20" pos:end="4427:23"><name pos:start="4427:20" pos:end="4427:23">tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4429:9" pos:end="4429:14">break;</break>

    <case pos:start="4431:5" pos:end="4431:14">case <expr pos:start="4431:10" pos:end="4431:13"><literal type="number" pos:start="4431:10" pos:end="4431:13">0xea</literal></expr>:</case> <comment type="block" pos:start="4431:16" pos:end="4431:28">/* ljmp im */</comment>

        <block pos:start="4433:9" pos:end="4455:9">{<block_content pos:start="4435:13" pos:end="4453:39">

            <decl_stmt pos:start="4435:13" pos:end="4435:42"><decl pos:start="4435:13" pos:end="4435:33"><type pos:start="4435:13" pos:end="4435:24"><name pos:start="4435:13" pos:end="4435:20">unsigned</name> <name pos:start="4435:22" pos:end="4435:24">int</name></type> <name pos:start="4435:26" pos:end="4435:33">selector</name></decl>, <decl pos:start="4435:36" pos:end="4435:41"><type ref="prev" pos:start="4435:13" pos:end="4435:24"/><name pos:start="4435:36" pos:end="4435:41">offset</name></decl>;</decl_stmt>



            <if_stmt pos:start="4439:13" pos:end="4441:32"><if pos:start="4439:13" pos:end="4441:32">if <condition pos:start="4439:16" pos:end="4439:26">(<expr pos:start="4439:17" pos:end="4439:25"><call pos:start="4439:17" pos:end="4439:25"><name pos:start="4439:17" pos:end="4439:22">CODE64</name><argument_list pos:start="4439:23" pos:end="4439:25">(<argument pos:start="4439:24" pos:end="4439:24"><expr pos:start="4439:24" pos:end="4439:24"><name pos:start="4439:24" pos:end="4439:24">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4441:17" pos:end="4441:32"><block_content pos:start="4441:17" pos:end="4441:32">

                <goto pos:start="4441:17" pos:end="4441:32">goto <name pos:start="4441:22" pos:end="4441:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4443:13" pos:end="4443:43"><expr pos:start="4443:13" pos:end="4443:42"><name pos:start="4443:13" pos:end="4443:14">ot</name> <operator pos:start="4443:16" pos:end="4443:16">=</operator> <ternary pos:start="4443:18" pos:end="4443:42"><condition pos:start="4443:18" pos:end="4443:24"><expr pos:start="4443:18" pos:end="4443:22"><name pos:start="4443:18" pos:end="4443:22">dflag</name></expr> ?</condition><then pos:start="4443:26" pos:end="4443:32"> <expr pos:start="4443:26" pos:end="4443:32"><name pos:start="4443:26" pos:end="4443:32">OT_LONG</name></expr> </then><else pos:start="4443:34" pos:end="4443:42">: <expr pos:start="4443:36" pos:end="4443:42"><name pos:start="4443:36" pos:end="4443:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="4445:13" pos:end="4445:42"><expr pos:start="4445:13" pos:end="4445:41"><name pos:start="4445:13" pos:end="4445:18">offset</name> <operator pos:start="4445:20" pos:end="4445:20">=</operator> <call pos:start="4445:22" pos:end="4445:41"><name pos:start="4445:22" pos:end="4445:29">insn_get</name><argument_list pos:start="4445:30" pos:end="4445:41">(<argument pos:start="4445:31" pos:end="4445:33"><expr pos:start="4445:31" pos:end="4445:33"><name pos:start="4445:31" pos:end="4445:33">env</name></expr></argument>, <argument pos:start="4445:36" pos:end="4445:36"><expr pos:start="4445:36" pos:end="4445:36"><name pos:start="4445:36" pos:end="4445:36">s</name></expr></argument>, <argument pos:start="4445:39" pos:end="4445:40"><expr pos:start="4445:39" pos:end="4445:40"><name pos:start="4445:39" pos:end="4445:40">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4447:13" pos:end="4447:49"><expr pos:start="4447:13" pos:end="4447:48"><name pos:start="4447:13" pos:end="4447:20">selector</name> <operator pos:start="4447:22" pos:end="4447:22">=</operator> <call pos:start="4447:24" pos:end="4447:48"><name pos:start="4447:24" pos:end="4447:31">insn_get</name><argument_list pos:start="4447:32" pos:end="4447:48">(<argument pos:start="4447:33" pos:end="4447:35"><expr pos:start="4447:33" pos:end="4447:35"><name pos:start="4447:33" pos:end="4447:35">env</name></expr></argument>, <argument pos:start="4447:38" pos:end="4447:38"><expr pos:start="4447:38" pos:end="4447:38"><name pos:start="4447:38" pos:end="4447:38">s</name></expr></argument>, <argument pos:start="4447:41" pos:end="4447:47"><expr pos:start="4447:41" pos:end="4447:47"><name pos:start="4447:41" pos:end="4447:47">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="4451:13" pos:end="4451:40"><expr pos:start="4451:13" pos:end="4451:39"><call pos:start="4451:13" pos:end="4451:39"><name pos:start="4451:13" pos:end="4451:29">gen_op_movl_T0_im</name><argument_list pos:start="4451:30" pos:end="4451:39">(<argument pos:start="4451:31" pos:end="4451:38"><expr pos:start="4451:31" pos:end="4451:38"><name pos:start="4451:31" pos:end="4451:38">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4453:13" pos:end="4453:39"><expr pos:start="4453:13" pos:end="4453:38"><call pos:start="4453:13" pos:end="4453:38"><name pos:start="4453:13" pos:end="4453:30">gen_op_movl_T1_imu</name><argument_list pos:start="4453:31" pos:end="4453:38">(<argument pos:start="4453:32" pos:end="4453:37"><expr pos:start="4453:32" pos:end="4453:37"><name pos:start="4453:32" pos:end="4453:37">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <goto pos:start="4457:9" pos:end="4457:21">goto <name pos:start="4457:14" pos:end="4457:20">do_ljmp</name>;</goto>

    <case pos:start="4459:5" pos:end="4459:14">case <expr pos:start="4459:10" pos:end="4459:13"><literal type="number" pos:start="4459:10" pos:end="4459:13">0xeb</literal></expr>:</case> <comment type="block" pos:start="4459:16" pos:end="4459:27">/* jmp Jb */</comment>

        <expr_stmt pos:start="4461:9" pos:end="4461:49"><expr pos:start="4461:9" pos:end="4461:48"><name pos:start="4461:9" pos:end="4461:12">tval</name> <operator pos:start="4461:14" pos:end="4461:14">=</operator> <operator pos:start="4461:16" pos:end="4461:16">(</operator><name pos:start="4461:17" pos:end="4461:22">int8_t</name><operator pos:start="4461:23" pos:end="4461:23">)</operator><call pos:start="4461:24" pos:end="4461:48"><name pos:start="4461:24" pos:end="4461:31">insn_get</name><argument_list pos:start="4461:32" pos:end="4461:48">(<argument pos:start="4461:33" pos:end="4461:35"><expr pos:start="4461:33" pos:end="4461:35"><name pos:start="4461:33" pos:end="4461:35">env</name></expr></argument>, <argument pos:start="4461:38" pos:end="4461:38"><expr pos:start="4461:38" pos:end="4461:38"><name pos:start="4461:38" pos:end="4461:38">s</name></expr></argument>, <argument pos:start="4461:41" pos:end="4461:47"><expr pos:start="4461:41" pos:end="4461:47"><name pos:start="4461:41" pos:end="4461:47">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4463:9" pos:end="4463:35"><expr pos:start="4463:9" pos:end="4463:34"><name pos:start="4463:9" pos:end="4463:12">tval</name> <operator pos:start="4463:14" pos:end="4463:15">+=</operator> <name pos:start="4463:17" pos:end="4463:21"><name pos:start="4463:17" pos:end="4463:17">s</name><operator pos:start="4463:18" pos:end="4463:19">-&gt;</operator><name pos:start="4463:20" pos:end="4463:21">pc</name></name> <operator pos:start="4463:23" pos:end="4463:23">-</operator> <name pos:start="4463:25" pos:end="4463:34"><name pos:start="4463:25" pos:end="4463:25">s</name><operator pos:start="4463:26" pos:end="4463:27">-&gt;</operator><name pos:start="4463:28" pos:end="4463:34">cs_base</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="4465:9" pos:end="4467:27"><if pos:start="4465:9" pos:end="4467:27">if <condition pos:start="4465:12" pos:end="4465:26">(<expr pos:start="4465:13" pos:end="4465:25"><name pos:start="4465:13" pos:end="4465:20"><name pos:start="4465:13" pos:end="4465:13">s</name><operator pos:start="4465:14" pos:end="4465:15">-&gt;</operator><name pos:start="4465:16" pos:end="4465:20">dflag</name></name> <operator pos:start="4465:22" pos:end="4465:23">==</operator> <literal type="number" pos:start="4465:25" pos:end="4465:25">0</literal></expr>)</condition><block type="pseudo" pos:start="4467:13" pos:end="4467:27"><block_content pos:start="4467:13" pos:end="4467:27">

            <expr_stmt pos:start="4467:13" pos:end="4467:27"><expr pos:start="4467:13" pos:end="4467:26"><name pos:start="4467:13" pos:end="4467:16">tval</name> <operator pos:start="4467:18" pos:end="4467:19">&amp;=</operator> <literal type="number" pos:start="4467:21" pos:end="4467:26">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4469:9" pos:end="4469:25"><expr pos:start="4469:9" pos:end="4469:24"><call pos:start="4469:9" pos:end="4469:24"><name pos:start="4469:9" pos:end="4469:15">gen_jmp</name><argument_list pos:start="4469:16" pos:end="4469:24">(<argument pos:start="4469:17" pos:end="4469:17"><expr pos:start="4469:17" pos:end="4469:17"><name pos:start="4469:17" pos:end="4469:17">s</name></expr></argument>, <argument pos:start="4469:20" pos:end="4469:23"><expr pos:start="4469:20" pos:end="4469:23"><name pos:start="4469:20" pos:end="4469:23">tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4471:9" pos:end="4471:14">break;</break>

    <case pos:start="4473:5" pos:end="4473:23">case <expr pos:start="4473:10" pos:end="4473:22"><literal type="number" pos:start="4473:10" pos:end="4473:13">0x70</literal> <operator pos:start="4473:15" pos:end="4473:17">...</operator> <literal type="number" pos:start="4473:19" pos:end="4473:22">0x7f</literal></expr>:</case> <comment type="block" pos:start="4473:25" pos:end="4473:36">/* jcc Jb */</comment>

        <expr_stmt pos:start="4475:9" pos:end="4475:49"><expr pos:start="4475:9" pos:end="4475:48"><name pos:start="4475:9" pos:end="4475:12">tval</name> <operator pos:start="4475:14" pos:end="4475:14">=</operator> <operator pos:start="4475:16" pos:end="4475:16">(</operator><name pos:start="4475:17" pos:end="4475:22">int8_t</name><operator pos:start="4475:23" pos:end="4475:23">)</operator><call pos:start="4475:24" pos:end="4475:48"><name pos:start="4475:24" pos:end="4475:31">insn_get</name><argument_list pos:start="4475:32" pos:end="4475:48">(<argument pos:start="4475:33" pos:end="4475:35"><expr pos:start="4475:33" pos:end="4475:35"><name pos:start="4475:33" pos:end="4475:35">env</name></expr></argument>, <argument pos:start="4475:38" pos:end="4475:38"><expr pos:start="4475:38" pos:end="4475:38"><name pos:start="4475:38" pos:end="4475:38">s</name></expr></argument>, <argument pos:start="4475:41" pos:end="4475:47"><expr pos:start="4475:41" pos:end="4475:47"><name pos:start="4475:41" pos:end="4475:47">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="4477:9" pos:end="4477:20">goto <name pos:start="4477:14" pos:end="4477:19">do_jcc</name>;</goto>

    <case pos:start="4479:5" pos:end="4479:25">case <expr pos:start="4479:10" pos:end="4479:24"><literal type="number" pos:start="4479:10" pos:end="4479:14">0x180</literal> <operator pos:start="4479:16" pos:end="4479:18">...</operator> <literal type="number" pos:start="4479:20" pos:end="4479:24">0x18f</literal></expr>:</case> <comment type="block" pos:start="4479:27" pos:end="4479:38">/* jcc Jv */</comment>

        <if_stmt pos:start="4481:9" pos:end="4489:9"><if pos:start="4481:9" pos:end="4485:9">if <condition pos:start="4481:12" pos:end="4481:18">(<expr pos:start="4481:13" pos:end="4481:17"><name pos:start="4481:13" pos:end="4481:17">dflag</name></expr>)</condition> <block pos:start="4481:20" pos:end="4485:9">{<block_content pos:start="4483:13" pos:end="4483:54">

            <expr_stmt pos:start="4483:13" pos:end="4483:54"><expr pos:start="4483:13" pos:end="4483:53"><name pos:start="4483:13" pos:end="4483:16">tval</name> <operator pos:start="4483:18" pos:end="4483:18">=</operator> <operator pos:start="4483:20" pos:end="4483:20">(</operator><name pos:start="4483:21" pos:end="4483:27">int32_t</name><operator pos:start="4483:28" pos:end="4483:28">)</operator><call pos:start="4483:29" pos:end="4483:53"><name pos:start="4483:29" pos:end="4483:36">insn_get</name><argument_list pos:start="4483:37" pos:end="4483:53">(<argument pos:start="4483:38" pos:end="4483:40"><expr pos:start="4483:38" pos:end="4483:40"><name pos:start="4483:38" pos:end="4483:40">env</name></expr></argument>, <argument pos:start="4483:43" pos:end="4483:43"><expr pos:start="4483:43" pos:end="4483:43"><name pos:start="4483:43" pos:end="4483:43">s</name></expr></argument>, <argument pos:start="4483:46" pos:end="4483:52"><expr pos:start="4483:46" pos:end="4483:52"><name pos:start="4483:46" pos:end="4483:52">OT_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4485:11" pos:end="4489:9">else <block pos:start="4485:16" pos:end="4489:9">{<block_content pos:start="4487:13" pos:end="4487:54">

            <expr_stmt pos:start="4487:13" pos:end="4487:54"><expr pos:start="4487:13" pos:end="4487:53"><name pos:start="4487:13" pos:end="4487:16">tval</name> <operator pos:start="4487:18" pos:end="4487:18">=</operator> <operator pos:start="4487:20" pos:end="4487:20">(</operator><name pos:start="4487:21" pos:end="4487:27">int16_t</name><operator pos:start="4487:28" pos:end="4487:28">)</operator><call pos:start="4487:29" pos:end="4487:53"><name pos:start="4487:29" pos:end="4487:36">insn_get</name><argument_list pos:start="4487:37" pos:end="4487:53">(<argument pos:start="4487:38" pos:end="4487:40"><expr pos:start="4487:38" pos:end="4487:40"><name pos:start="4487:38" pos:end="4487:40">env</name></expr></argument>, <argument pos:start="4487:43" pos:end="4487:43"><expr pos:start="4487:43" pos:end="4487:43"><name pos:start="4487:43" pos:end="4487:43">s</name></expr></argument>, <argument pos:start="4487:46" pos:end="4487:52"><expr pos:start="4487:46" pos:end="4487:52"><name pos:start="4487:46" pos:end="4487:52">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    <label pos:start="4491:5" pos:end="4491:11"><name pos:start="4491:5" pos:end="4491:10">do_jcc</name>:</label>

        <expr_stmt pos:start="4493:9" pos:end="4493:38"><expr pos:start="4493:9" pos:end="4493:37"><name pos:start="4493:9" pos:end="4493:16">next_eip</name> <operator pos:start="4493:18" pos:end="4493:18">=</operator> <name pos:start="4493:20" pos:end="4493:24"><name pos:start="4493:20" pos:end="4493:20">s</name><operator pos:start="4493:21" pos:end="4493:22">-&gt;</operator><name pos:start="4493:23" pos:end="4493:24">pc</name></name> <operator pos:start="4493:26" pos:end="4493:26">-</operator> <name pos:start="4493:28" pos:end="4493:37"><name pos:start="4493:28" pos:end="4493:28">s</name><operator pos:start="4493:29" pos:end="4493:30">-&gt;</operator><name pos:start="4493:31" pos:end="4493:37">cs_base</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="4495:9" pos:end="4495:25"><expr pos:start="4495:9" pos:end="4495:24"><name pos:start="4495:9" pos:end="4495:12">tval</name> <operator pos:start="4495:14" pos:end="4495:15">+=</operator> <name pos:start="4495:17" pos:end="4495:24">next_eip</name></expr>;</expr_stmt>

        <if_stmt pos:start="4497:9" pos:end="4499:27"><if pos:start="4497:9" pos:end="4499:27">if <condition pos:start="4497:12" pos:end="4497:26">(<expr pos:start="4497:13" pos:end="4497:25"><name pos:start="4497:13" pos:end="4497:20"><name pos:start="4497:13" pos:end="4497:13">s</name><operator pos:start="4497:14" pos:end="4497:15">-&gt;</operator><name pos:start="4497:16" pos:end="4497:20">dflag</name></name> <operator pos:start="4497:22" pos:end="4497:23">==</operator> <literal type="number" pos:start="4497:25" pos:end="4497:25">0</literal></expr>)</condition><block type="pseudo" pos:start="4499:13" pos:end="4499:27"><block_content pos:start="4499:13" pos:end="4499:27">

            <expr_stmt pos:start="4499:13" pos:end="4499:27"><expr pos:start="4499:13" pos:end="4499:26"><name pos:start="4499:13" pos:end="4499:16">tval</name> <operator pos:start="4499:18" pos:end="4499:19">&amp;=</operator> <literal type="number" pos:start="4499:21" pos:end="4499:26">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4501:9" pos:end="4501:38"><expr pos:start="4501:9" pos:end="4501:37"><call pos:start="4501:9" pos:end="4501:37"><name pos:start="4501:9" pos:end="4501:15">gen_jcc</name><argument_list pos:start="4501:16" pos:end="4501:37">(<argument pos:start="4501:17" pos:end="4501:17"><expr pos:start="4501:17" pos:end="4501:17"><name pos:start="4501:17" pos:end="4501:17">s</name></expr></argument>, <argument pos:start="4501:20" pos:end="4501:20"><expr pos:start="4501:20" pos:end="4501:20"><name pos:start="4501:20" pos:end="4501:20">b</name></expr></argument>, <argument pos:start="4501:23" pos:end="4501:26"><expr pos:start="4501:23" pos:end="4501:26"><name pos:start="4501:23" pos:end="4501:26">tval</name></expr></argument>, <argument pos:start="4501:29" pos:end="4501:36"><expr pos:start="4501:29" pos:end="4501:36"><name pos:start="4501:29" pos:end="4501:36">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4503:9" pos:end="4503:14">break;</break>



    <case pos:start="4507:5" pos:end="4507:25">case <expr pos:start="4507:10" pos:end="4507:24"><literal type="number" pos:start="4507:10" pos:end="4507:14">0x190</literal> <operator pos:start="4507:16" pos:end="4507:18">...</operator> <literal type="number" pos:start="4507:20" pos:end="4507:24">0x19f</literal></expr>:</case> <comment type="block" pos:start="4507:27" pos:end="4507:40">/* setcc Gv */</comment>

        <expr_stmt pos:start="4509:9" pos:end="4509:44"><expr pos:start="4509:9" pos:end="4509:43"><name pos:start="4509:9" pos:end="4509:13">modrm</name> <operator pos:start="4509:15" pos:end="4509:15">=</operator> <call pos:start="4509:17" pos:end="4509:43"><name pos:start="4509:17" pos:end="4509:29">cpu_ldub_code</name><argument_list pos:start="4509:30" pos:end="4509:43">(<argument pos:start="4509:31" pos:end="4509:33"><expr pos:start="4509:31" pos:end="4509:33"><name pos:start="4509:31" pos:end="4509:33">env</name></expr></argument>, <argument pos:start="4509:36" pos:end="4509:42"><expr pos:start="4509:36" pos:end="4509:42"><name pos:start="4509:36" pos:end="4509:40"><name pos:start="4509:36" pos:end="4509:36">s</name><operator pos:start="4509:37" pos:end="4509:38">-&gt;</operator><name pos:start="4509:39" pos:end="4509:40">pc</name></name><operator pos:start="4509:41" pos:end="4509:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4511:9" pos:end="4511:24"><expr pos:start="4511:9" pos:end="4511:23"><call pos:start="4511:9" pos:end="4511:23"><name pos:start="4511:9" pos:end="4511:17">gen_setcc</name><argument_list pos:start="4511:18" pos:end="4511:23">(<argument pos:start="4511:19" pos:end="4511:19"><expr pos:start="4511:19" pos:end="4511:19"><name pos:start="4511:19" pos:end="4511:19">s</name></expr></argument>, <argument pos:start="4511:22" pos:end="4511:22"><expr pos:start="4511:22" pos:end="4511:22"><name pos:start="4511:22" pos:end="4511:22">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4513:9" pos:end="4513:59"><expr pos:start="4513:9" pos:end="4513:58"><call pos:start="4513:9" pos:end="4513:58"><name pos:start="4513:9" pos:end="4513:22">gen_ldst_modrm</name><argument_list pos:start="4513:23" pos:end="4513:58">(<argument pos:start="4513:24" pos:end="4513:26"><expr pos:start="4513:24" pos:end="4513:26"><name pos:start="4513:24" pos:end="4513:26">env</name></expr></argument>, <argument pos:start="4513:29" pos:end="4513:29"><expr pos:start="4513:29" pos:end="4513:29"><name pos:start="4513:29" pos:end="4513:29">s</name></expr></argument>, <argument pos:start="4513:32" pos:end="4513:36"><expr pos:start="4513:32" pos:end="4513:36"><name pos:start="4513:32" pos:end="4513:36">modrm</name></expr></argument>, <argument pos:start="4513:39" pos:end="4513:45"><expr pos:start="4513:39" pos:end="4513:45"><name pos:start="4513:39" pos:end="4513:45">OT_BYTE</name></expr></argument>, <argument pos:start="4513:48" pos:end="4513:54"><expr pos:start="4513:48" pos:end="4513:54"><name pos:start="4513:48" pos:end="4513:54">OR_TMP0</name></expr></argument>, <argument pos:start="4513:57" pos:end="4513:57"><expr pos:start="4513:57" pos:end="4513:57"><literal type="number" pos:start="4513:57" pos:end="4513:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4515:9" pos:end="4515:14">break;</break>

    <case pos:start="4517:5" pos:end="4517:25">case <expr pos:start="4517:10" pos:end="4517:24"><literal type="number" pos:start="4517:10" pos:end="4517:14">0x140</literal> <operator pos:start="4517:16" pos:end="4517:18">...</operator> <literal type="number" pos:start="4517:20" pos:end="4517:24">0x14f</literal></expr>:</case> <comment type="block" pos:start="4517:27" pos:end="4517:43">/* cmov Gv, Ev */</comment>

        <block pos:start="4519:9" pos:end="4585:9">{<block_content pos:start="4521:13" pos:end="4583:30">

            <decl_stmt pos:start="4521:13" pos:end="4521:19"><decl pos:start="4521:13" pos:end="4521:18"><type pos:start="4521:13" pos:end="4521:15"><name pos:start="4521:13" pos:end="4521:15">int</name></type> <name pos:start="4521:17" pos:end="4521:18">l1</name></decl>;</decl_stmt>

            <decl_stmt pos:start="4523:13" pos:end="4523:20"><decl pos:start="4523:13" pos:end="4523:19"><type pos:start="4523:13" pos:end="4523:16"><name pos:start="4523:13" pos:end="4523:16">TCGv</name></type> <name pos:start="4523:18" pos:end="4523:19">t0</name></decl>;</decl_stmt>



            <expr_stmt pos:start="4527:13" pos:end="4527:33"><expr pos:start="4527:13" pos:end="4527:32"><name pos:start="4527:13" pos:end="4527:14">ot</name> <operator pos:start="4527:16" pos:end="4527:16">=</operator> <name pos:start="4527:18" pos:end="4527:22">dflag</name> <operator pos:start="4527:24" pos:end="4527:24">+</operator> <name pos:start="4527:26" pos:end="4527:32">OT_WORD</name></expr>;</expr_stmt>

            <expr_stmt pos:start="4529:13" pos:end="4529:48"><expr pos:start="4529:13" pos:end="4529:47"><name pos:start="4529:13" pos:end="4529:17">modrm</name> <operator pos:start="4529:19" pos:end="4529:19">=</operator> <call pos:start="4529:21" pos:end="4529:47"><name pos:start="4529:21" pos:end="4529:33">cpu_ldub_code</name><argument_list pos:start="4529:34" pos:end="4529:47">(<argument pos:start="4529:35" pos:end="4529:37"><expr pos:start="4529:35" pos:end="4529:37"><name pos:start="4529:35" pos:end="4529:37">env</name></expr></argument>, <argument pos:start="4529:40" pos:end="4529:46"><expr pos:start="4529:40" pos:end="4529:46"><name pos:start="4529:40" pos:end="4529:44"><name pos:start="4529:40" pos:end="4529:40">s</name><operator pos:start="4529:41" pos:end="4529:42">-&gt;</operator><name pos:start="4529:43" pos:end="4529:44">pc</name></name><operator pos:start="4529:45" pos:end="4529:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4531:13" pos:end="4531:45"><expr pos:start="4531:13" pos:end="4531:44"><name pos:start="4531:13" pos:end="4531:15">reg</name> <operator pos:start="4531:17" pos:end="4531:17">=</operator> <operator pos:start="4531:19" pos:end="4531:19">(</operator><operator pos:start="4531:20" pos:end="4531:20">(</operator><name pos:start="4531:21" pos:end="4531:25">modrm</name> <operator pos:start="4531:27" pos:end="4531:28">&gt;&gt;</operator> <literal type="number" pos:start="4531:30" pos:end="4531:30">3</literal><operator pos:start="4531:31" pos:end="4531:31">)</operator> <operator pos:start="4531:33" pos:end="4531:33">&amp;</operator> <literal type="number" pos:start="4531:35" pos:end="4531:35">7</literal><operator pos:start="4531:36" pos:end="4531:36">)</operator> <operator pos:start="4531:38" pos:end="4531:38">|</operator> <name pos:start="4531:40" pos:end="4531:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="4533:13" pos:end="4533:35"><expr pos:start="4533:13" pos:end="4533:34"><name pos:start="4533:13" pos:end="4533:15">mod</name> <operator pos:start="4533:17" pos:end="4533:17">=</operator> <operator pos:start="4533:19" pos:end="4533:19">(</operator><name pos:start="4533:20" pos:end="4533:24">modrm</name> <operator pos:start="4533:26" pos:end="4533:27">&gt;&gt;</operator> <literal type="number" pos:start="4533:29" pos:end="4533:29">6</literal><operator pos:start="4533:30" pos:end="4533:30">)</operator> <operator pos:start="4533:32" pos:end="4533:32">&amp;</operator> <literal type="number" pos:start="4533:34" pos:end="4533:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="4535:13" pos:end="4535:38"><expr pos:start="4535:13" pos:end="4535:37"><name pos:start="4535:13" pos:end="4535:14">t0</name> <operator pos:start="4535:16" pos:end="4535:16">=</operator> <call pos:start="4535:18" pos:end="4535:37"><name pos:start="4535:18" pos:end="4535:35">tcg_temp_local_new</name><argument_list pos:start="4535:36" pos:end="4535:37">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4537:13" pos:end="4552:0"><if pos:start="4537:13" pos:end="4543:13">if <condition pos:start="4537:16" pos:end="4537:25">(<expr pos:start="4537:17" pos:end="4537:24"><name pos:start="4537:17" pos:end="4537:19">mod</name> <operator pos:start="4537:21" pos:end="4537:22">!=</operator> <literal type="number" pos:start="4537:24" pos:end="4537:24">3</literal></expr>)</condition> <block pos:start="4537:27" pos:end="4543:13">{<block_content pos:start="4539:17" pos:end="4541:59">

                <expr_stmt pos:start="4539:17" pos:end="4539:70"><expr pos:start="4539:17" pos:end="4539:69"><call pos:start="4539:17" pos:end="4539:69"><name pos:start="4539:17" pos:end="4539:29">gen_lea_modrm</name><argument_list pos:start="4539:30" pos:end="4539:69">(<argument pos:start="4539:31" pos:end="4539:33"><expr pos:start="4539:31" pos:end="4539:33"><name pos:start="4539:31" pos:end="4539:33">env</name></expr></argument>, <argument pos:start="4539:36" pos:end="4539:36"><expr pos:start="4539:36" pos:end="4539:36"><name pos:start="4539:36" pos:end="4539:36">s</name></expr></argument>, <argument pos:start="4539:39" pos:end="4539:43"><expr pos:start="4539:39" pos:end="4539:43"><name pos:start="4539:39" pos:end="4539:43">modrm</name></expr></argument>, <argument pos:start="4539:46" pos:end="4539:54"><expr pos:start="4539:46" pos:end="4539:54"><operator pos:start="4539:46" pos:end="4539:46">&amp;</operator><name pos:start="4539:47" pos:end="4539:54">reg_addr</name></expr></argument>, <argument pos:start="4539:57" pos:end="4539:68"><expr pos:start="4539:57" pos:end="4539:68"><operator pos:start="4539:57" pos:end="4539:57">&amp;</operator><name pos:start="4539:58" pos:end="4539:68">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4541:17" pos:end="4541:59"><expr pos:start="4541:17" pos:end="4541:58"><call pos:start="4541:17" pos:end="4541:58"><name pos:start="4541:17" pos:end="4541:27">gen_op_ld_v</name><argument_list pos:start="4541:28" pos:end="4541:58">(<argument pos:start="4541:29" pos:end="4541:45"><expr pos:start="4541:29" pos:end="4541:45"><name pos:start="4541:29" pos:end="4541:30">ot</name> <operator pos:start="4541:32" pos:end="4541:32">+</operator> <name pos:start="4541:34" pos:end="4541:45"><name pos:start="4541:34" pos:end="4541:34">s</name><operator pos:start="4541:35" pos:end="4541:36">-&gt;</operator><name pos:start="4541:37" pos:end="4541:45">mem_index</name></name></expr></argument>, <argument pos:start="4541:48" pos:end="4541:49"><expr pos:start="4541:48" pos:end="4541:49"><name pos:start="4541:48" pos:end="4541:49">t0</name></expr></argument>, <argument pos:start="4541:52" pos:end="4541:57"><expr pos:start="4541:52" pos:end="4541:57"><name pos:start="4541:52" pos:end="4541:57">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="4543:15" pos:end="4552:0">else <block pos:start="4543:20" pos:end="4552:0">{<block_content pos:start="4545:17" pos:end="4547:45">

                <expr_stmt pos:start="4545:17" pos:end="4545:44"><expr pos:start="4545:17" pos:end="4545:43"><name pos:start="4545:17" pos:end="4545:18">rm</name> <operator pos:start="4545:20" pos:end="4545:20">=</operator> <operator pos:start="4545:22" pos:end="4545:22">(</operator><name pos:start="4545:23" pos:end="4545:27">modrm</name> <operator pos:start="4545:29" pos:end="4545:29">&amp;</operator> <literal type="number" pos:start="4545:31" pos:end="4545:31">7</literal><operator pos:start="4545:32" pos:end="4545:32">)</operator> <operator pos:start="4545:34" pos:end="4545:34">|</operator> <call pos:start="4545:36" pos:end="4545:43"><name pos:start="4545:36" pos:end="4545:40">REX_B</name><argument_list pos:start="4545:41" pos:end="4545:43">(<argument pos:start="4545:42" pos:end="4545:42"><expr pos:start="4545:42" pos:end="4545:42"><name pos:start="4545:42" pos:end="4545:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4547:17" pos:end="4547:45"><expr pos:start="4547:17" pos:end="4547:44"><call pos:start="4547:17" pos:end="4547:44"><name pos:start="4547:17" pos:end="4547:32">gen_op_mov_v_reg</name><argument_list pos:start="4547:33" pos:end="4547:44">(<argument pos:start="4547:34" pos:end="4547:35"><expr pos:start="4547:34" pos:end="4547:35"><name pos:start="4547:34" pos:end="4547:35">ot</name></expr></argument>, <argument pos:start="4547:38" pos:end="4547:39"><expr pos:start="4547:38" pos:end="4547:39"><name pos:start="4547:38" pos:end="4547:39">t0</name></expr></argument>, <argument pos:start="4547:42" pos:end="4547:43"><expr pos:start="4547:42" pos:end="4547:43"><name pos:start="4547:42" pos:end="4547:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="4551:1" pos:end="4551:20">#<cpp:directive pos:start="4551:2" pos:end="4551:6">ifdef</cpp:directive> <name pos:start="4551:8" pos:end="4551:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="4553:13" pos:end="4581:13"><if pos:start="4553:13" pos:end="4567:13">if <condition pos:start="4553:16" pos:end="4553:30">(<expr pos:start="4553:17" pos:end="4553:29"><name pos:start="4553:17" pos:end="4553:18">ot</name> <operator pos:start="4553:20" pos:end="4553:21">==</operator> <name pos:start="4553:23" pos:end="4553:29">OT_LONG</name></expr>)</condition> <block pos:start="4553:32" pos:end="4567:13">{<block_content pos:start="4557:17" pos:end="4565:64">

                <comment type="block" pos:start="4555:17" pos:end="4555:53">/* XXX: specific Intel behaviour ? */</comment>

                <expr_stmt pos:start="4557:17" pos:end="4557:37"><expr pos:start="4557:17" pos:end="4557:36"><name pos:start="4557:17" pos:end="4557:18">l1</name> <operator pos:start="4557:20" pos:end="4557:20">=</operator> <call pos:start="4557:22" pos:end="4557:36"><name pos:start="4557:22" pos:end="4557:34">gen_new_label</name><argument_list pos:start="4557:35" pos:end="4557:36">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4559:17" pos:end="4559:39"><expr pos:start="4559:17" pos:end="4559:38"><call pos:start="4559:17" pos:end="4559:38"><name pos:start="4559:17" pos:end="4559:24">gen_jcc1</name><argument_list pos:start="4559:25" pos:end="4559:38">(<argument pos:start="4559:26" pos:end="4559:26"><expr pos:start="4559:26" pos:end="4559:26"><name pos:start="4559:26" pos:end="4559:26">s</name></expr></argument>, <argument pos:start="4559:29" pos:end="4559:33"><expr pos:start="4559:29" pos:end="4559:33"><name pos:start="4559:29" pos:end="4559:29">b</name> <operator pos:start="4559:31" pos:end="4559:31">^</operator> <literal type="number" pos:start="4559:33" pos:end="4559:33">1</literal></expr></argument>, <argument pos:start="4559:36" pos:end="4559:37"><expr pos:start="4559:36" pos:end="4559:37"><name pos:start="4559:36" pos:end="4559:37">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4561:17" pos:end="4561:50"><expr pos:start="4561:17" pos:end="4561:49"><call pos:start="4561:17" pos:end="4561:49"><name pos:start="4561:17" pos:end="4561:30">tcg_gen_mov_tl</name><argument_list pos:start="4561:31" pos:end="4561:49">(<argument pos:start="4561:32" pos:end="4561:44"><expr pos:start="4561:32" pos:end="4561:44"><name pos:start="4561:32" pos:end="4561:44"><name pos:start="4561:32" pos:end="4561:39">cpu_regs</name><index pos:start="4561:40" pos:end="4561:44">[<expr pos:start="4561:41" pos:end="4561:43"><name pos:start="4561:41" pos:end="4561:43">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="4561:47" pos:end="4561:48"><expr pos:start="4561:47" pos:end="4561:48"><name pos:start="4561:47" pos:end="4561:48">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4563:17" pos:end="4563:34"><expr pos:start="4563:17" pos:end="4563:33"><call pos:start="4563:17" pos:end="4563:33"><name pos:start="4563:17" pos:end="4563:29">gen_set_label</name><argument_list pos:start="4563:30" pos:end="4563:33">(<argument pos:start="4563:31" pos:end="4563:32"><expr pos:start="4563:31" pos:end="4563:32"><name pos:start="4563:31" pos:end="4563:32">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4565:17" pos:end="4565:64"><expr pos:start="4565:17" pos:end="4565:63"><call pos:start="4565:17" pos:end="4565:63"><name pos:start="4565:17" pos:end="4565:33">tcg_gen_ext32u_tl</name><argument_list pos:start="4565:34" pos:end="4565:63">(<argument pos:start="4565:35" pos:end="4565:47"><expr pos:start="4565:35" pos:end="4565:47"><name pos:start="4565:35" pos:end="4565:47"><name pos:start="4565:35" pos:end="4565:42">cpu_regs</name><index pos:start="4565:43" pos:end="4565:47">[<expr pos:start="4565:44" pos:end="4565:46"><name pos:start="4565:44" pos:end="4565:46">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="4565:50" pos:end="4565:62"><expr pos:start="4565:50" pos:end="4565:62"><name pos:start="4565:50" pos:end="4565:62"><name pos:start="4565:50" pos:end="4565:57">cpu_regs</name><index pos:start="4565:58" pos:end="4565:62">[<expr pos:start="4565:59" pos:end="4565:61"><name pos:start="4565:59" pos:end="4565:61">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="4567:15" pos:end="4581:13">else

<cpp:endif pos:start="4569:1" pos:end="4569:6">#<cpp:directive pos:start="4569:2" pos:end="4569:6">endif</cpp:directive></cpp:endif>

            <block pos:start="4571:13" pos:end="4581:13">{<block_content pos:start="4573:17" pos:end="4579:34">

                <expr_stmt pos:start="4573:17" pos:end="4573:37"><expr pos:start="4573:17" pos:end="4573:36"><name pos:start="4573:17" pos:end="4573:18">l1</name> <operator pos:start="4573:20" pos:end="4573:20">=</operator> <call pos:start="4573:22" pos:end="4573:36"><name pos:start="4573:22" pos:end="4573:34">gen_new_label</name><argument_list pos:start="4573:35" pos:end="4573:36">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4575:17" pos:end="4575:39"><expr pos:start="4575:17" pos:end="4575:38"><call pos:start="4575:17" pos:end="4575:38"><name pos:start="4575:17" pos:end="4575:24">gen_jcc1</name><argument_list pos:start="4575:25" pos:end="4575:38">(<argument pos:start="4575:26" pos:end="4575:26"><expr pos:start="4575:26" pos:end="4575:26"><name pos:start="4575:26" pos:end="4575:26">s</name></expr></argument>, <argument pos:start="4575:29" pos:end="4575:33"><expr pos:start="4575:29" pos:end="4575:33"><name pos:start="4575:29" pos:end="4575:29">b</name> <operator pos:start="4575:31" pos:end="4575:31">^</operator> <literal type="number" pos:start="4575:33" pos:end="4575:33">1</literal></expr></argument>, <argument pos:start="4575:36" pos:end="4575:37"><expr pos:start="4575:36" pos:end="4575:37"><name pos:start="4575:36" pos:end="4575:37">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4577:17" pos:end="4577:46"><expr pos:start="4577:17" pos:end="4577:45"><call pos:start="4577:17" pos:end="4577:45"><name pos:start="4577:17" pos:end="4577:32">gen_op_mov_reg_v</name><argument_list pos:start="4577:33" pos:end="4577:45">(<argument pos:start="4577:34" pos:end="4577:35"><expr pos:start="4577:34" pos:end="4577:35"><name pos:start="4577:34" pos:end="4577:35">ot</name></expr></argument>, <argument pos:start="4577:38" pos:end="4577:40"><expr pos:start="4577:38" pos:end="4577:40"><name pos:start="4577:38" pos:end="4577:40">reg</name></expr></argument>, <argument pos:start="4577:43" pos:end="4577:44"><expr pos:start="4577:43" pos:end="4577:44"><name pos:start="4577:43" pos:end="4577:44">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4579:17" pos:end="4579:34"><expr pos:start="4579:17" pos:end="4579:33"><call pos:start="4579:17" pos:end="4579:33"><name pos:start="4579:17" pos:end="4579:29">gen_set_label</name><argument_list pos:start="4579:30" pos:end="4579:33">(<argument pos:start="4579:31" pos:end="4579:32"><expr pos:start="4579:31" pos:end="4579:32"><name pos:start="4579:31" pos:end="4579:32">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="4583:13" pos:end="4583:30"><expr pos:start="4583:13" pos:end="4583:29"><call pos:start="4583:13" pos:end="4583:29"><name pos:start="4583:13" pos:end="4583:25">tcg_temp_free</name><argument_list pos:start="4583:26" pos:end="4583:29">(<argument pos:start="4583:27" pos:end="4583:28"><expr pos:start="4583:27" pos:end="4583:28"><name pos:start="4583:27" pos:end="4583:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="4587:9" pos:end="4587:14">break;</break>



        <comment type="block" format="doxygen" pos:start="4591:9" pos:end="4591:34">/************************/</comment>

        <comment type="block" pos:start="4593:9" pos:end="4593:19">/* flags */</comment>

    <case pos:start="4595:5" pos:end="4595:14">case <expr pos:start="4595:10" pos:end="4595:13"><literal type="number" pos:start="4595:10" pos:end="4595:13">0x9c</literal></expr>:</case> <comment type="block" pos:start="4595:16" pos:end="4595:26">/* pushf */</comment>

        <expr_stmt pos:start="4597:9" pos:end="4597:61"><expr pos:start="4597:9" pos:end="4597:60"><call pos:start="4597:9" pos:end="4597:60"><name pos:start="4597:9" pos:end="4597:31">gen_svm_check_intercept</name><argument_list pos:start="4597:32" pos:end="4597:60">(<argument pos:start="4597:33" pos:end="4597:33"><expr pos:start="4597:33" pos:end="4597:33"><name pos:start="4597:33" pos:end="4597:33">s</name></expr></argument>, <argument pos:start="4597:36" pos:end="4597:43"><expr pos:start="4597:36" pos:end="4597:43"><name pos:start="4597:36" pos:end="4597:43">pc_start</name></expr></argument>, <argument pos:start="4597:46" pos:end="4597:59"><expr pos:start="4597:46" pos:end="4597:59"><name pos:start="4597:46" pos:end="4597:59">SVM_EXIT_PUSHF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4599:9" pos:end="4613:9"><if pos:start="4599:9" pos:end="4603:9">if <condition pos:start="4599:12" pos:end="4599:36">(<expr pos:start="4599:13" pos:end="4599:35"><name pos:start="4599:13" pos:end="4599:19"><name pos:start="4599:13" pos:end="4599:13">s</name><operator pos:start="4599:14" pos:end="4599:15">-&gt;</operator><name pos:start="4599:16" pos:end="4599:19">vm86</name></name> <operator pos:start="4599:21" pos:end="4599:22">&amp;&amp;</operator> <name pos:start="4599:24" pos:end="4599:30"><name pos:start="4599:24" pos:end="4599:24">s</name><operator pos:start="4599:25" pos:end="4599:26">-&gt;</operator><name pos:start="4599:27" pos:end="4599:30">iopl</name></name> <operator pos:start="4599:32" pos:end="4599:33">!=</operator> <literal type="number" pos:start="4599:35" pos:end="4599:35">3</literal></expr>)</condition> <block pos:start="4599:38" pos:end="4603:9">{<block_content pos:start="4601:13" pos:end="4601:64">

            <expr_stmt pos:start="4601:13" pos:end="4601:64"><expr pos:start="4601:13" pos:end="4601:63"><call pos:start="4601:13" pos:end="4601:63"><name pos:start="4601:13" pos:end="4601:25">gen_exception</name><argument_list pos:start="4601:26" pos:end="4601:63">(<argument pos:start="4601:27" pos:end="4601:27"><expr pos:start="4601:27" pos:end="4601:27"><name pos:start="4601:27" pos:end="4601:27">s</name></expr></argument>, <argument pos:start="4601:30" pos:end="4601:39"><expr pos:start="4601:30" pos:end="4601:39"><name pos:start="4601:30" pos:end="4601:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4601:42" pos:end="4601:62"><expr pos:start="4601:42" pos:end="4601:62"><name pos:start="4601:42" pos:end="4601:49">pc_start</name> <operator pos:start="4601:51" pos:end="4601:51">-</operator> <name pos:start="4601:53" pos:end="4601:62"><name pos:start="4601:53" pos:end="4601:53">s</name><operator pos:start="4601:54" pos:end="4601:55">-&gt;</operator><name pos:start="4601:56" pos:end="4601:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4603:11" pos:end="4613:9">else <block pos:start="4603:16" pos:end="4613:9">{<block_content pos:start="4605:13" pos:end="4611:27">

            <if_stmt pos:start="4605:13" pos:end="4607:43"><if pos:start="4605:13" pos:end="4607:43">if <condition pos:start="4605:16" pos:end="4605:42">(<expr pos:start="4605:17" pos:end="4605:41"><name pos:start="4605:17" pos:end="4605:24"><name pos:start="4605:17" pos:end="4605:17">s</name><operator pos:start="4605:18" pos:end="4605:19">-&gt;</operator><name pos:start="4605:20" pos:end="4605:24">cc_op</name></name> <operator pos:start="4605:26" pos:end="4605:27">!=</operator> <name pos:start="4605:29" pos:end="4605:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4607:17" pos:end="4607:43"><block_content pos:start="4607:17" pos:end="4607:43">

                <expr_stmt pos:start="4607:17" pos:end="4607:43"><expr pos:start="4607:17" pos:end="4607:42"><call pos:start="4607:17" pos:end="4607:42"><name pos:start="4607:17" pos:end="4607:32">gen_op_set_cc_op</name><argument_list pos:start="4607:33" pos:end="4607:42">(<argument pos:start="4607:34" pos:end="4607:41"><expr pos:start="4607:34" pos:end="4607:41"><name pos:start="4607:34" pos:end="4607:41"><name pos:start="4607:34" pos:end="4607:34">s</name><operator pos:start="4607:35" pos:end="4607:36">-&gt;</operator><name pos:start="4607:37" pos:end="4607:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4609:13" pos:end="4609:54"><expr pos:start="4609:13" pos:end="4609:53"><call pos:start="4609:13" pos:end="4609:53"><name pos:start="4609:13" pos:end="4609:34">gen_helper_read_eflags</name><argument_list pos:start="4609:35" pos:end="4609:53">(<argument pos:start="4609:36" pos:end="4609:43"><expr pos:start="4609:36" pos:end="4609:43"><name pos:start="4609:36" pos:end="4609:43"><name pos:start="4609:36" pos:end="4609:40">cpu_T</name><index pos:start="4609:41" pos:end="4609:43">[<expr pos:start="4609:42" pos:end="4609:42"><literal type="number" pos:start="4609:42" pos:end="4609:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4609:46" pos:end="4609:52"><expr pos:start="4609:46" pos:end="4609:52"><name pos:start="4609:46" pos:end="4609:52">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4611:13" pos:end="4611:27"><expr pos:start="4611:13" pos:end="4611:26"><call pos:start="4611:13" pos:end="4611:26"><name pos:start="4611:13" pos:end="4611:23">gen_push_T0</name><argument_list pos:start="4611:24" pos:end="4611:26">(<argument pos:start="4611:25" pos:end="4611:25"><expr pos:start="4611:25" pos:end="4611:25"><name pos:start="4611:25" pos:end="4611:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="4615:9" pos:end="4615:14">break;</break>

    <case pos:start="4617:5" pos:end="4617:14">case <expr pos:start="4617:10" pos:end="4617:13"><literal type="number" pos:start="4617:10" pos:end="4617:13">0x9d</literal></expr>:</case> <comment type="block" pos:start="4617:16" pos:end="4617:25">/* popf */</comment>

        <expr_stmt pos:start="4619:9" pos:end="4619:60"><expr pos:start="4619:9" pos:end="4619:59"><call pos:start="4619:9" pos:end="4619:59"><name pos:start="4619:9" pos:end="4619:31">gen_svm_check_intercept</name><argument_list pos:start="4619:32" pos:end="4619:59">(<argument pos:start="4619:33" pos:end="4619:33"><expr pos:start="4619:33" pos:end="4619:33"><name pos:start="4619:33" pos:end="4619:33">s</name></expr></argument>, <argument pos:start="4619:36" pos:end="4619:43"><expr pos:start="4619:36" pos:end="4619:43"><name pos:start="4619:36" pos:end="4619:43">pc_start</name></expr></argument>, <argument pos:start="4619:46" pos:end="4619:58"><expr pos:start="4619:46" pos:end="4619:58"><name pos:start="4619:46" pos:end="4619:58">SVM_EXIT_POPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4621:9" pos:end="4729:9"><if pos:start="4621:9" pos:end="4625:9">if <condition pos:start="4621:12" pos:end="4621:36">(<expr pos:start="4621:13" pos:end="4621:35"><name pos:start="4621:13" pos:end="4621:19"><name pos:start="4621:13" pos:end="4621:13">s</name><operator pos:start="4621:14" pos:end="4621:15">-&gt;</operator><name pos:start="4621:16" pos:end="4621:19">vm86</name></name> <operator pos:start="4621:21" pos:end="4621:22">&amp;&amp;</operator> <name pos:start="4621:24" pos:end="4621:30"><name pos:start="4621:24" pos:end="4621:24">s</name><operator pos:start="4621:25" pos:end="4621:26">-&gt;</operator><name pos:start="4621:27" pos:end="4621:30">iopl</name></name> <operator pos:start="4621:32" pos:end="4621:33">!=</operator> <literal type="number" pos:start="4621:35" pos:end="4621:35">3</literal></expr>)</condition> <block pos:start="4621:38" pos:end="4625:9">{<block_content pos:start="4623:13" pos:end="4623:64">

            <expr_stmt pos:start="4623:13" pos:end="4623:64"><expr pos:start="4623:13" pos:end="4623:63"><call pos:start="4623:13" pos:end="4623:63"><name pos:start="4623:13" pos:end="4623:25">gen_exception</name><argument_list pos:start="4623:26" pos:end="4623:63">(<argument pos:start="4623:27" pos:end="4623:27"><expr pos:start="4623:27" pos:end="4623:27"><name pos:start="4623:27" pos:end="4623:27">s</name></expr></argument>, <argument pos:start="4623:30" pos:end="4623:39"><expr pos:start="4623:30" pos:end="4623:39"><name pos:start="4623:30" pos:end="4623:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4623:42" pos:end="4623:62"><expr pos:start="4623:42" pos:end="4623:62"><name pos:start="4623:42" pos:end="4623:49">pc_start</name> <operator pos:start="4623:51" pos:end="4623:51">-</operator> <name pos:start="4623:53" pos:end="4623:62"><name pos:start="4623:53" pos:end="4623:53">s</name><operator pos:start="4623:54" pos:end="4623:55">-&gt;</operator><name pos:start="4623:56" pos:end="4623:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4625:11" pos:end="4729:9">else <block pos:start="4625:16" pos:end="4729:9">{<block_content pos:start="4627:13" pos:end="4727:23">

            <expr_stmt pos:start="4627:13" pos:end="4627:26"><expr pos:start="4627:13" pos:end="4627:25"><call pos:start="4627:13" pos:end="4627:25"><name pos:start="4627:13" pos:end="4627:22">gen_pop_T0</name><argument_list pos:start="4627:23" pos:end="4627:25">(<argument pos:start="4627:24" pos:end="4627:24"><expr pos:start="4627:24" pos:end="4627:24"><name pos:start="4627:24" pos:end="4627:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4629:13" pos:end="4717:13"><if pos:start="4629:13" pos:end="4657:13">if <condition pos:start="4629:16" pos:end="4629:28">(<expr pos:start="4629:17" pos:end="4629:27"><name pos:start="4629:17" pos:end="4629:22"><name pos:start="4629:17" pos:end="4629:17">s</name><operator pos:start="4629:18" pos:end="4629:19">-&gt;</operator><name pos:start="4629:20" pos:end="4629:22">cpl</name></name> <operator pos:start="4629:24" pos:end="4629:25">==</operator> <literal type="number" pos:start="4629:27" pos:end="4629:27">0</literal></expr>)</condition> <block pos:start="4629:30" pos:end="4657:13">{<block_content pos:start="4631:17" pos:end="4655:17">

                <if_stmt pos:start="4631:17" pos:end="4655:17"><if pos:start="4631:17" pos:end="4643:17">if <condition pos:start="4631:20" pos:end="4631:29">(<expr pos:start="4631:21" pos:end="4631:28"><name pos:start="4631:21" pos:end="4631:28"><name pos:start="4631:21" pos:end="4631:21">s</name><operator pos:start="4631:22" pos:end="4631:23">-&gt;</operator><name pos:start="4631:24" pos:end="4631:28">dflag</name></name></expr>)</condition> <block pos:start="4631:31" pos:end="4643:17">{<block_content pos:start="4633:21" pos:end="4641:72">

                    <expr_stmt pos:start="4633:21" pos:end="4641:72"><expr pos:start="4633:21" pos:end="4641:71"><call pos:start="4633:21" pos:end="4641:71"><name pos:start="4633:21" pos:end="4633:43">gen_helper_write_eflags</name><argument_list pos:start="4633:44" pos:end="4641:71">(<argument pos:start="4633:45" pos:end="4633:51"><expr pos:start="4633:45" pos:end="4633:51"><name pos:start="4633:45" pos:end="4633:51">cpu_env</name></expr></argument>, <argument pos:start="4633:54" pos:end="4633:61"><expr pos:start="4633:54" pos:end="4633:61"><name pos:start="4633:54" pos:end="4633:61"><name pos:start="4633:54" pos:end="4633:58">cpu_T</name><index pos:start="4633:59" pos:end="4633:61">[<expr pos:start="4633:60" pos:end="4633:60"><literal type="number" pos:start="4633:60" pos:end="4633:60">0</literal></expr>]</index></name></expr></argument>,

                                            <argument pos:start="4635:45" pos:end="4641:70"><expr pos:start="4635:45" pos:end="4641:70"><call pos:start="4635:45" pos:end="4641:70"><name pos:start="4635:45" pos:end="4635:57">tcg_const_i32</name><argument_list pos:start="4635:58" pos:end="4641:70">(<argument pos:start="4635:59" pos:end="4641:69"><expr pos:start="4635:59" pos:end="4641:69"><operator pos:start="4635:59" pos:end="4635:59">(</operator><name pos:start="4635:60" pos:end="4635:66">TF_MASK</name> <operator pos:start="4635:68" pos:end="4635:68">|</operator> <name pos:start="4635:70" pos:end="4635:76">AC_MASK</name> <operator pos:start="4635:78" pos:end="4635:78">|</operator>

                                                           <name pos:start="4637:60" pos:end="4637:66">ID_MASK</name> <operator pos:start="4637:68" pos:end="4637:68">|</operator> <name pos:start="4637:70" pos:end="4637:76">NT_MASK</name> <operator pos:start="4637:78" pos:end="4637:78">|</operator>

                                                           <name pos:start="4639:60" pos:end="4639:66">IF_MASK</name> <operator pos:start="4639:68" pos:end="4639:68">|</operator>

                                                           <name pos:start="4641:60" pos:end="4641:68">IOPL_MASK</name><operator pos:start="4641:69" pos:end="4641:69">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="4643:19" pos:end="4655:17">else <block pos:start="4643:24" pos:end="4655:17">{<block_content pos:start="4645:21" pos:end="4653:69">

                    <expr_stmt pos:start="4645:21" pos:end="4653:69"><expr pos:start="4645:21" pos:end="4653:68"><call pos:start="4645:21" pos:end="4653:68"><name pos:start="4645:21" pos:end="4645:43">gen_helper_write_eflags</name><argument_list pos:start="4645:44" pos:end="4653:68">(<argument pos:start="4645:45" pos:end="4645:51"><expr pos:start="4645:45" pos:end="4645:51"><name pos:start="4645:45" pos:end="4645:51">cpu_env</name></expr></argument>, <argument pos:start="4645:54" pos:end="4645:61"><expr pos:start="4645:54" pos:end="4645:61"><name pos:start="4645:54" pos:end="4645:61"><name pos:start="4645:54" pos:end="4645:58">cpu_T</name><index pos:start="4645:59" pos:end="4645:61">[<expr pos:start="4645:60" pos:end="4645:60"><literal type="number" pos:start="4645:60" pos:end="4645:60">0</literal></expr>]</index></name></expr></argument>,

                                            <argument pos:start="4647:45" pos:end="4653:67"><expr pos:start="4647:45" pos:end="4653:67"><call pos:start="4647:45" pos:end="4653:67"><name pos:start="4647:45" pos:end="4647:57">tcg_const_i32</name><argument_list pos:start="4647:58" pos:end="4653:67">(<argument pos:start="4647:59" pos:end="4653:66"><expr pos:start="4647:59" pos:end="4653:66"><operator pos:start="4647:59" pos:end="4647:59">(</operator><name pos:start="4647:60" pos:end="4647:66">TF_MASK</name> <operator pos:start="4647:68" pos:end="4647:68">|</operator> <name pos:start="4647:70" pos:end="4647:76">AC_MASK</name> <operator pos:start="4647:78" pos:end="4647:78">|</operator>

                                                           <name pos:start="4649:60" pos:end="4649:66">ID_MASK</name> <operator pos:start="4649:68" pos:end="4649:68">|</operator> <name pos:start="4649:70" pos:end="4649:76">NT_MASK</name> <operator pos:start="4649:78" pos:end="4649:78">|</operator>

                                                           <name pos:start="4651:60" pos:end="4651:66">IF_MASK</name> <operator pos:start="4651:68" pos:end="4651:68">|</operator> <name pos:start="4651:70" pos:end="4651:78">IOPL_MASK</name><operator pos:start="4651:79" pos:end="4651:79">)</operator>

                                                          <operator pos:start="4653:59" pos:end="4653:59">&amp;</operator> <literal type="number" pos:start="4653:61" pos:end="4653:66">0xffff</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="4657:15" pos:end="4717:13">else <block pos:start="4657:20" pos:end="4717:13">{<block_content pos:start="4659:17" pos:end="4715:17">

                <if_stmt pos:start="4659:17" pos:end="4715:17"><if pos:start="4659:17" pos:end="4693:17">if <condition pos:start="4659:20" pos:end="4659:38">(<expr pos:start="4659:21" pos:end="4659:37"><name pos:start="4659:21" pos:end="4659:26"><name pos:start="4659:21" pos:end="4659:21">s</name><operator pos:start="4659:22" pos:end="4659:23">-&gt;</operator><name pos:start="4659:24" pos:end="4659:26">cpl</name></name> <operator pos:start="4659:28" pos:end="4659:29">&lt;=</operator> <name pos:start="4659:31" pos:end="4659:37"><name pos:start="4659:31" pos:end="4659:31">s</name><operator pos:start="4659:32" pos:end="4659:33">-&gt;</operator><name pos:start="4659:34" pos:end="4659:37">iopl</name></name></expr>)</condition> <block pos:start="4659:40" pos:end="4693:17">{<block_content pos:start="4661:21" pos:end="4691:21">

                    <if_stmt pos:start="4661:21" pos:end="4691:21"><if pos:start="4661:21" pos:end="4675:21">if <condition pos:start="4661:24" pos:end="4661:33">(<expr pos:start="4661:25" pos:end="4661:32"><name pos:start="4661:25" pos:end="4661:32"><name pos:start="4661:25" pos:end="4661:25">s</name><operator pos:start="4661:26" pos:end="4661:27">-&gt;</operator><name pos:start="4661:28" pos:end="4661:32">dflag</name></name></expr>)</condition> <block pos:start="4661:35" pos:end="4675:21">{<block_content pos:start="4663:25" pos:end="4673:74">

                        <expr_stmt pos:start="4663:25" pos:end="4673:74"><expr pos:start="4663:25" pos:end="4673:73"><call pos:start="4663:25" pos:end="4673:73"><name pos:start="4663:25" pos:end="4663:47">gen_helper_write_eflags</name><argument_list pos:start="4663:48" pos:end="4673:73">(<argument pos:start="4663:49" pos:end="4663:55"><expr pos:start="4663:49" pos:end="4663:55"><name pos:start="4663:49" pos:end="4663:55">cpu_env</name></expr></argument>, <argument pos:start="4663:58" pos:end="4663:65"><expr pos:start="4663:58" pos:end="4663:65"><name pos:start="4663:58" pos:end="4663:65"><name pos:start="4663:58" pos:end="4663:62">cpu_T</name><index pos:start="4663:63" pos:end="4663:65">[<expr pos:start="4663:64" pos:end="4663:64"><literal type="number" pos:start="4663:64" pos:end="4663:64">0</literal></expr>]</index></name></expr></argument>,

                                                <argument pos:start="4665:49" pos:end="4673:72"><expr pos:start="4665:49" pos:end="4673:72"><call pos:start="4665:49" pos:end="4673:72"><name pos:start="4665:49" pos:end="4665:61">tcg_const_i32</name><argument_list pos:start="4665:62" pos:end="4673:72">(<argument pos:start="4665:63" pos:end="4673:71"><expr pos:start="4665:63" pos:end="4673:71"><operator pos:start="4665:63" pos:end="4665:63">(</operator><name pos:start="4665:64" pos:end="4665:70">TF_MASK</name> <operator pos:start="4665:72" pos:end="4665:72">|</operator>

                                                               <name pos:start="4667:64" pos:end="4667:70">AC_MASK</name> <operator pos:start="4667:72" pos:end="4667:72">|</operator>

                                                               <name pos:start="4669:64" pos:end="4669:70">ID_MASK</name> <operator pos:start="4669:72" pos:end="4669:72">|</operator>

                                                               <name pos:start="4671:64" pos:end="4671:70">NT_MASK</name> <operator pos:start="4671:72" pos:end="4671:72">|</operator>

                                                               <name pos:start="4673:64" pos:end="4673:70">IF_MASK</name><operator pos:start="4673:71" pos:end="4673:71">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="4675:23" pos:end="4691:21">else <block pos:start="4675:28" pos:end="4691:21">{<block_content pos:start="4677:25" pos:end="4689:73">

                        <expr_stmt pos:start="4677:25" pos:end="4689:73"><expr pos:start="4677:25" pos:end="4689:72"><call pos:start="4677:25" pos:end="4689:72"><name pos:start="4677:25" pos:end="4677:47">gen_helper_write_eflags</name><argument_list pos:start="4677:48" pos:end="4689:72">(<argument pos:start="4677:49" pos:end="4677:55"><expr pos:start="4677:49" pos:end="4677:55"><name pos:start="4677:49" pos:end="4677:55">cpu_env</name></expr></argument>, <argument pos:start="4677:58" pos:end="4677:65"><expr pos:start="4677:58" pos:end="4677:65"><name pos:start="4677:58" pos:end="4677:65"><name pos:start="4677:58" pos:end="4677:62">cpu_T</name><index pos:start="4677:63" pos:end="4677:65">[<expr pos:start="4677:64" pos:end="4677:64"><literal type="number" pos:start="4677:64" pos:end="4677:64">0</literal></expr>]</index></name></expr></argument>,

                                                <argument pos:start="4679:49" pos:end="4689:71"><expr pos:start="4679:49" pos:end="4689:71"><call pos:start="4679:49" pos:end="4689:71"><name pos:start="4679:49" pos:end="4679:61">tcg_const_i32</name><argument_list pos:start="4679:62" pos:end="4689:71">(<argument pos:start="4679:63" pos:end="4689:70"><expr pos:start="4679:63" pos:end="4689:70"><operator pos:start="4679:63" pos:end="4679:63">(</operator><name pos:start="4679:64" pos:end="4679:70">TF_MASK</name> <operator pos:start="4679:72" pos:end="4679:72">|</operator>

                                                               <name pos:start="4681:64" pos:end="4681:70">AC_MASK</name> <operator pos:start="4681:72" pos:end="4681:72">|</operator>

                                                               <name pos:start="4683:64" pos:end="4683:70">ID_MASK</name> <operator pos:start="4683:72" pos:end="4683:72">|</operator>

                                                               <name pos:start="4685:64" pos:end="4685:70">NT_MASK</name> <operator pos:start="4685:72" pos:end="4685:72">|</operator>

                                                               <name pos:start="4687:64" pos:end="4687:70">IF_MASK</name><operator pos:start="4687:71" pos:end="4687:71">)</operator>

                                                              <operator pos:start="4689:63" pos:end="4689:63">&amp;</operator> <literal type="number" pos:start="4689:65" pos:end="4689:70">0xffff</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="4693:19" pos:end="4715:17">else <block pos:start="4693:24" pos:end="4715:17">{<block_content pos:start="4695:21" pos:end="4713:21">

                    <if_stmt pos:start="4695:21" pos:end="4713:21"><if pos:start="4695:21" pos:end="4703:21">if <condition pos:start="4695:24" pos:end="4695:33">(<expr pos:start="4695:25" pos:end="4695:32"><name pos:start="4695:25" pos:end="4695:32"><name pos:start="4695:25" pos:end="4695:25">s</name><operator pos:start="4695:26" pos:end="4695:27">-&gt;</operator><name pos:start="4695:28" pos:end="4695:32">dflag</name></name></expr>)</condition> <block pos:start="4695:35" pos:end="4703:21">{<block_content pos:start="4697:25" pos:end="4701:79">

                        <expr_stmt pos:start="4697:25" pos:end="4701:79"><expr pos:start="4697:25" pos:end="4701:78"><call pos:start="4697:25" pos:end="4701:78"><name pos:start="4697:25" pos:end="4697:47">gen_helper_write_eflags</name><argument_list pos:start="4697:48" pos:end="4701:78">(<argument pos:start="4697:49" pos:end="4697:55"><expr pos:start="4697:49" pos:end="4697:55"><name pos:start="4697:49" pos:end="4697:55">cpu_env</name></expr></argument>, <argument pos:start="4697:58" pos:end="4697:65"><expr pos:start="4697:58" pos:end="4697:65"><name pos:start="4697:58" pos:end="4697:65"><name pos:start="4697:58" pos:end="4697:62">cpu_T</name><index pos:start="4697:63" pos:end="4697:65">[<expr pos:start="4697:64" pos:end="4697:64"><literal type="number" pos:start="4697:64" pos:end="4697:64">0</literal></expr>]</index></name></expr></argument>,

                                           <argument pos:start="4699:44" pos:end="4701:77"><expr pos:start="4699:44" pos:end="4701:77"><call pos:start="4699:44" pos:end="4701:77"><name pos:start="4699:44" pos:end="4699:56">tcg_const_i32</name><argument_list pos:start="4699:57" pos:end="4701:77">(<argument pos:start="4699:58" pos:end="4701:76"><expr pos:start="4699:58" pos:end="4701:76"><operator pos:start="4699:58" pos:end="4699:58">(</operator><name pos:start="4699:59" pos:end="4699:65">TF_MASK</name> <operator pos:start="4699:67" pos:end="4699:67">|</operator> <name pos:start="4699:69" pos:end="4699:75">AC_MASK</name> <operator pos:start="4699:77" pos:end="4699:77">|</operator>

                                                          <name pos:start="4701:59" pos:end="4701:65">ID_MASK</name> <operator pos:start="4701:67" pos:end="4701:67">|</operator> <name pos:start="4701:69" pos:end="4701:75">NT_MASK</name><operator pos:start="4701:76" pos:end="4701:76">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="4703:23" pos:end="4713:21">else <block pos:start="4703:28" pos:end="4713:21">{<block_content pos:start="4705:25" pos:end="4711:68">

                        <expr_stmt pos:start="4705:25" pos:end="4711:68"><expr pos:start="4705:25" pos:end="4711:67"><call pos:start="4705:25" pos:end="4711:67"><name pos:start="4705:25" pos:end="4705:47">gen_helper_write_eflags</name><argument_list pos:start="4705:48" pos:end="4711:67">(<argument pos:start="4705:49" pos:end="4705:55"><expr pos:start="4705:49" pos:end="4705:55"><name pos:start="4705:49" pos:end="4705:55">cpu_env</name></expr></argument>, <argument pos:start="4705:58" pos:end="4705:65"><expr pos:start="4705:58" pos:end="4705:65"><name pos:start="4705:58" pos:end="4705:65"><name pos:start="4705:58" pos:end="4705:62">cpu_T</name><index pos:start="4705:63" pos:end="4705:65">[<expr pos:start="4705:64" pos:end="4705:64"><literal type="number" pos:start="4705:64" pos:end="4705:64">0</literal></expr>]</index></name></expr></argument>,

                                           <argument pos:start="4707:44" pos:end="4711:66"><expr pos:start="4707:44" pos:end="4711:66"><call pos:start="4707:44" pos:end="4711:66"><name pos:start="4707:44" pos:end="4707:56">tcg_const_i32</name><argument_list pos:start="4707:57" pos:end="4711:66">(<argument pos:start="4707:58" pos:end="4711:65"><expr pos:start="4707:58" pos:end="4711:65"><operator pos:start="4707:58" pos:end="4707:58">(</operator><name pos:start="4707:59" pos:end="4707:65">TF_MASK</name> <operator pos:start="4707:67" pos:end="4707:67">|</operator> <name pos:start="4707:69" pos:end="4707:75">AC_MASK</name> <operator pos:start="4707:77" pos:end="4707:77">|</operator>

                                                          <name pos:start="4709:59" pos:end="4709:65">ID_MASK</name> <operator pos:start="4709:67" pos:end="4709:67">|</operator> <name pos:start="4709:69" pos:end="4709:75">NT_MASK</name><operator pos:start="4709:76" pos:end="4709:76">)</operator>

                                                         <operator pos:start="4711:58" pos:end="4711:58">&amp;</operator> <literal type="number" pos:start="4711:60" pos:end="4711:65">0xffff</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="4719:13" pos:end="4719:30"><expr pos:start="4719:13" pos:end="4719:29"><call pos:start="4719:13" pos:end="4719:29"><name pos:start="4719:13" pos:end="4719:26">gen_pop_update</name><argument_list pos:start="4719:27" pos:end="4719:29">(<argument pos:start="4719:28" pos:end="4719:28"><expr pos:start="4719:28" pos:end="4719:28"><name pos:start="4719:28" pos:end="4719:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4721:13" pos:end="4721:36"><expr pos:start="4721:13" pos:end="4721:35"><name pos:start="4721:13" pos:end="4721:20"><name pos:start="4721:13" pos:end="4721:13">s</name><operator pos:start="4721:14" pos:end="4721:15">-&gt;</operator><name pos:start="4721:16" pos:end="4721:20">cc_op</name></name> <operator pos:start="4721:22" pos:end="4721:22">=</operator> <name pos:start="4721:24" pos:end="4721:35">CC_OP_EFLAGS</name></expr>;</expr_stmt>

            <comment type="block" pos:start="4723:13" pos:end="4723:65">/* abort translation because TF/AC flag may change */</comment>

            <expr_stmt pos:start="4725:13" pos:end="4725:43"><expr pos:start="4725:13" pos:end="4725:42"><call pos:start="4725:13" pos:end="4725:42"><name pos:start="4725:13" pos:end="4725:22">gen_jmp_im</name><argument_list pos:start="4725:23" pos:end="4725:42">(<argument pos:start="4725:24" pos:end="4725:41"><expr pos:start="4725:24" pos:end="4725:41"><name pos:start="4725:24" pos:end="4725:28"><name pos:start="4725:24" pos:end="4725:24">s</name><operator pos:start="4725:25" pos:end="4725:26">-&gt;</operator><name pos:start="4725:27" pos:end="4725:28">pc</name></name> <operator pos:start="4725:30" pos:end="4725:30">-</operator> <name pos:start="4725:32" pos:end="4725:41"><name pos:start="4725:32" pos:end="4725:32">s</name><operator pos:start="4725:33" pos:end="4725:34">-&gt;</operator><name pos:start="4725:35" pos:end="4725:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4727:13" pos:end="4727:23"><expr pos:start="4727:13" pos:end="4727:22"><call pos:start="4727:13" pos:end="4727:22"><name pos:start="4727:13" pos:end="4727:19">gen_eob</name><argument_list pos:start="4727:20" pos:end="4727:22">(<argument pos:start="4727:21" pos:end="4727:21"><expr pos:start="4727:21" pos:end="4727:21"><name pos:start="4727:21" pos:end="4727:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="4731:9" pos:end="4731:14">break;</break>

    <case pos:start="4733:5" pos:end="4733:14">case <expr pos:start="4733:10" pos:end="4733:13"><literal type="number" pos:start="4733:10" pos:end="4733:13">0x9e</literal></expr>:</case> <comment type="block" pos:start="4733:16" pos:end="4733:25">/* sahf */</comment>

        <if_stmt pos:start="4735:9" pos:end="4737:28"><if pos:start="4735:9" pos:end="4737:28">if <condition pos:start="4735:12" pos:end="4735:72">(<expr pos:start="4735:13" pos:end="4735:71"><call pos:start="4735:13" pos:end="4735:21"><name pos:start="4735:13" pos:end="4735:18">CODE64</name><argument_list pos:start="4735:19" pos:end="4735:21">(<argument pos:start="4735:20" pos:end="4735:20"><expr pos:start="4735:20" pos:end="4735:20"><name pos:start="4735:20" pos:end="4735:20">s</name></expr></argument>)</argument_list></call> <operator pos:start="4735:23" pos:end="4735:24">&amp;&amp;</operator> <operator pos:start="4735:26" pos:end="4735:26">!</operator><operator pos:start="4735:27" pos:end="4735:27">(</operator><name pos:start="4735:28" pos:end="4735:49"><name pos:start="4735:28" pos:end="4735:28">s</name><operator pos:start="4735:29" pos:end="4735:30">-&gt;</operator><name pos:start="4735:31" pos:end="4735:49">cpuid_ext3_features</name></name> <operator pos:start="4735:51" pos:end="4735:51">&amp;</operator> <name pos:start="4735:53" pos:end="4735:70">CPUID_EXT3_LAHF_LM</name><operator pos:start="4735:71" pos:end="4735:71">)</operator></expr>)</condition><block type="pseudo" pos:start="4737:13" pos:end="4737:28"><block_content pos:start="4737:13" pos:end="4737:28">

            <goto pos:start="4737:13" pos:end="4737:28">goto <name pos:start="4737:18" pos:end="4737:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4739:9" pos:end="4739:44"><expr pos:start="4739:9" pos:end="4739:43"><call pos:start="4739:9" pos:end="4739:43"><name pos:start="4739:9" pos:end="4739:25">gen_op_mov_TN_reg</name><argument_list pos:start="4739:26" pos:end="4739:43">(<argument pos:start="4739:27" pos:end="4739:33"><expr pos:start="4739:27" pos:end="4739:33"><name pos:start="4739:27" pos:end="4739:33">OT_BYTE</name></expr></argument>, <argument pos:start="4739:36" pos:end="4739:36"><expr pos:start="4739:36" pos:end="4739:36"><literal type="number" pos:start="4739:36" pos:end="4739:36">0</literal></expr></argument>, <argument pos:start="4739:39" pos:end="4739:42"><expr pos:start="4739:39" pos:end="4739:42"><name pos:start="4739:39" pos:end="4739:42">R_AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4741:9" pos:end="4743:39"><if pos:start="4741:9" pos:end="4743:39">if <condition pos:start="4741:12" pos:end="4741:38">(<expr pos:start="4741:13" pos:end="4741:37"><name pos:start="4741:13" pos:end="4741:20"><name pos:start="4741:13" pos:end="4741:13">s</name><operator pos:start="4741:14" pos:end="4741:15">-&gt;</operator><name pos:start="4741:16" pos:end="4741:20">cc_op</name></name> <operator pos:start="4741:22" pos:end="4741:23">!=</operator> <name pos:start="4741:25" pos:end="4741:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4743:13" pos:end="4743:39"><block_content pos:start="4743:13" pos:end="4743:39">

            <expr_stmt pos:start="4743:13" pos:end="4743:39"><expr pos:start="4743:13" pos:end="4743:38"><call pos:start="4743:13" pos:end="4743:38"><name pos:start="4743:13" pos:end="4743:28">gen_op_set_cc_op</name><argument_list pos:start="4743:29" pos:end="4743:38">(<argument pos:start="4743:30" pos:end="4743:37"><expr pos:start="4743:30" pos:end="4743:37"><name pos:start="4743:30" pos:end="4743:37"><name pos:start="4743:30" pos:end="4743:30">s</name><operator pos:start="4743:31" pos:end="4743:32">-&gt;</operator><name pos:start="4743:33" pos:end="4743:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4745:9" pos:end="4745:39"><expr pos:start="4745:9" pos:end="4745:38"><call pos:start="4745:9" pos:end="4745:38"><name pos:start="4745:9" pos:end="4745:26">gen_compute_eflags</name><argument_list pos:start="4745:27" pos:end="4745:38">(<argument pos:start="4745:28" pos:end="4745:37"><expr pos:start="4745:28" pos:end="4745:37"><name pos:start="4745:28" pos:end="4745:37">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4747:9" pos:end="4747:39"><expr pos:start="4747:9" pos:end="4747:38"><call pos:start="4747:9" pos:end="4747:38"><name pos:start="4747:9" pos:end="4747:26">tcg_gen_discard_tl</name><argument_list pos:start="4747:27" pos:end="4747:38">(<argument pos:start="4747:28" pos:end="4747:37"><expr pos:start="4747:28" pos:end="4747:37"><name pos:start="4747:28" pos:end="4747:37">cpu_cc_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4749:9" pos:end="4749:32"><expr pos:start="4749:9" pos:end="4749:31"><name pos:start="4749:9" pos:end="4749:16"><name pos:start="4749:9" pos:end="4749:9">s</name><operator pos:start="4749:10" pos:end="4749:11">-&gt;</operator><name pos:start="4749:12" pos:end="4749:16">cc_op</name></name> <operator pos:start="4749:18" pos:end="4749:18">=</operator> <name pos:start="4749:20" pos:end="4749:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>



        <expr_stmt pos:start="4753:9" pos:end="4753:54"><expr pos:start="4753:9" pos:end="4753:53"><call pos:start="4753:9" pos:end="4753:53"><name pos:start="4753:9" pos:end="4753:23">tcg_gen_andi_tl</name><argument_list pos:start="4753:24" pos:end="4753:53">(<argument pos:start="4753:25" pos:end="4753:34"><expr pos:start="4753:25" pos:end="4753:34"><name pos:start="4753:25" pos:end="4753:34">cpu_cc_src</name></expr></argument>, <argument pos:start="4753:37" pos:end="4753:46"><expr pos:start="4753:37" pos:end="4753:46"><name pos:start="4753:37" pos:end="4753:46">cpu_cc_src</name></expr></argument>, <argument pos:start="4753:49" pos:end="4753:52"><expr pos:start="4753:49" pos:end="4753:52"><name pos:start="4753:49" pos:end="4753:52">CC_O</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4755:9" pos:end="4755:78"><expr pos:start="4755:9" pos:end="4755:77"><call pos:start="4755:9" pos:end="4755:77"><name pos:start="4755:9" pos:end="4755:23">tcg_gen_andi_tl</name><argument_list pos:start="4755:24" pos:end="4755:77">(<argument pos:start="4755:25" pos:end="4755:32"><expr pos:start="4755:25" pos:end="4755:32"><name pos:start="4755:25" pos:end="4755:32"><name pos:start="4755:25" pos:end="4755:29">cpu_T</name><index pos:start="4755:30" pos:end="4755:32">[<expr pos:start="4755:31" pos:end="4755:31"><literal type="number" pos:start="4755:31" pos:end="4755:31">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4755:35" pos:end="4755:42"><expr pos:start="4755:35" pos:end="4755:42"><name pos:start="4755:35" pos:end="4755:42"><name pos:start="4755:35" pos:end="4755:39">cpu_T</name><index pos:start="4755:40" pos:end="4755:42">[<expr pos:start="4755:41" pos:end="4755:41"><literal type="number" pos:start="4755:41" pos:end="4755:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4755:45" pos:end="4755:76"><expr pos:start="4755:45" pos:end="4755:76"><name pos:start="4755:45" pos:end="4755:48">CC_S</name> <operator pos:start="4755:50" pos:end="4755:50">|</operator> <name pos:start="4755:52" pos:end="4755:55">CC_Z</name> <operator pos:start="4755:57" pos:end="4755:57">|</operator> <name pos:start="4755:59" pos:end="4755:62">CC_A</name> <operator pos:start="4755:64" pos:end="4755:64">|</operator> <name pos:start="4755:66" pos:end="4755:69">CC_P</name> <operator pos:start="4755:71" pos:end="4755:71">|</operator> <name pos:start="4755:73" pos:end="4755:76">CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4757:9" pos:end="4757:56"><expr pos:start="4757:9" pos:end="4757:55"><call pos:start="4757:9" pos:end="4757:55"><name pos:start="4757:9" pos:end="4757:21">tcg_gen_or_tl</name><argument_list pos:start="4757:22" pos:end="4757:55">(<argument pos:start="4757:23" pos:end="4757:32"><expr pos:start="4757:23" pos:end="4757:32"><name pos:start="4757:23" pos:end="4757:32">cpu_cc_src</name></expr></argument>, <argument pos:start="4757:35" pos:end="4757:44"><expr pos:start="4757:35" pos:end="4757:44"><name pos:start="4757:35" pos:end="4757:44">cpu_cc_src</name></expr></argument>, <argument pos:start="4757:47" pos:end="4757:54"><expr pos:start="4757:47" pos:end="4757:54"><name pos:start="4757:47" pos:end="4757:54"><name pos:start="4757:47" pos:end="4757:51">cpu_T</name><index pos:start="4757:52" pos:end="4757:54">[<expr pos:start="4757:53" pos:end="4757:53"><literal type="number" pos:start="4757:53" pos:end="4757:53">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4759:9" pos:end="4759:14">break;</break>

    <case pos:start="4761:5" pos:end="4761:14">case <expr pos:start="4761:10" pos:end="4761:13"><literal type="number" pos:start="4761:10" pos:end="4761:13">0x9f</literal></expr>:</case> <comment type="block" pos:start="4761:16" pos:end="4761:25">/* lahf */</comment>

        <if_stmt pos:start="4763:9" pos:end="4765:28"><if pos:start="4763:9" pos:end="4765:28">if <condition pos:start="4763:12" pos:end="4763:72">(<expr pos:start="4763:13" pos:end="4763:71"><call pos:start="4763:13" pos:end="4763:21"><name pos:start="4763:13" pos:end="4763:18">CODE64</name><argument_list pos:start="4763:19" pos:end="4763:21">(<argument pos:start="4763:20" pos:end="4763:20"><expr pos:start="4763:20" pos:end="4763:20"><name pos:start="4763:20" pos:end="4763:20">s</name></expr></argument>)</argument_list></call> <operator pos:start="4763:23" pos:end="4763:24">&amp;&amp;</operator> <operator pos:start="4763:26" pos:end="4763:26">!</operator><operator pos:start="4763:27" pos:end="4763:27">(</operator><name pos:start="4763:28" pos:end="4763:49"><name pos:start="4763:28" pos:end="4763:28">s</name><operator pos:start="4763:29" pos:end="4763:30">-&gt;</operator><name pos:start="4763:31" pos:end="4763:49">cpuid_ext3_features</name></name> <operator pos:start="4763:51" pos:end="4763:51">&amp;</operator> <name pos:start="4763:53" pos:end="4763:70">CPUID_EXT3_LAHF_LM</name><operator pos:start="4763:71" pos:end="4763:71">)</operator></expr>)</condition><block type="pseudo" pos:start="4765:13" pos:end="4765:28"><block_content pos:start="4765:13" pos:end="4765:28">

            <goto pos:start="4765:13" pos:end="4765:28">goto <name pos:start="4765:18" pos:end="4765:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="4767:9" pos:end="4769:39"><if pos:start="4767:9" pos:end="4769:39">if <condition pos:start="4767:12" pos:end="4767:38">(<expr pos:start="4767:13" pos:end="4767:37"><name pos:start="4767:13" pos:end="4767:20"><name pos:start="4767:13" pos:end="4767:13">s</name><operator pos:start="4767:14" pos:end="4767:15">-&gt;</operator><name pos:start="4767:16" pos:end="4767:20">cc_op</name></name> <operator pos:start="4767:22" pos:end="4767:23">!=</operator> <name pos:start="4767:25" pos:end="4767:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4769:13" pos:end="4769:39"><block_content pos:start="4769:13" pos:end="4769:39">

            <expr_stmt pos:start="4769:13" pos:end="4769:39"><expr pos:start="4769:13" pos:end="4769:38"><call pos:start="4769:13" pos:end="4769:38"><name pos:start="4769:13" pos:end="4769:28">gen_op_set_cc_op</name><argument_list pos:start="4769:29" pos:end="4769:38">(<argument pos:start="4769:30" pos:end="4769:37"><expr pos:start="4769:30" pos:end="4769:37"><name pos:start="4769:30" pos:end="4769:37"><name pos:start="4769:30" pos:end="4769:30">s</name><operator pos:start="4769:31" pos:end="4769:32">-&gt;</operator><name pos:start="4769:33" pos:end="4769:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4771:9" pos:end="4771:37"><expr pos:start="4771:9" pos:end="4771:36"><call pos:start="4771:9" pos:end="4771:36"><name pos:start="4771:9" pos:end="4771:26">gen_compute_eflags</name><argument_list pos:start="4771:27" pos:end="4771:36">(<argument pos:start="4771:28" pos:end="4771:35"><expr pos:start="4771:28" pos:end="4771:35"><name pos:start="4771:28" pos:end="4771:35"><name pos:start="4771:28" pos:end="4771:32">cpu_T</name><index pos:start="4771:33" pos:end="4771:35">[<expr pos:start="4771:34" pos:end="4771:34"><literal type="number" pos:start="4771:34" pos:end="4771:34">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="4773:9" pos:end="4773:71">/* Note: gen_compute_eflags() only gives the condition codes */</comment>

        <expr_stmt pos:start="4775:9" pos:end="4775:49"><expr pos:start="4775:9" pos:end="4775:48"><call pos:start="4775:9" pos:end="4775:48"><name pos:start="4775:9" pos:end="4775:22">tcg_gen_ori_tl</name><argument_list pos:start="4775:23" pos:end="4775:48">(<argument pos:start="4775:24" pos:end="4775:31"><expr pos:start="4775:24" pos:end="4775:31"><name pos:start="4775:24" pos:end="4775:31"><name pos:start="4775:24" pos:end="4775:28">cpu_T</name><index pos:start="4775:29" pos:end="4775:31">[<expr pos:start="4775:30" pos:end="4775:30"><literal type="number" pos:start="4775:30" pos:end="4775:30">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4775:34" pos:end="4775:41"><expr pos:start="4775:34" pos:end="4775:41"><name pos:start="4775:34" pos:end="4775:41"><name pos:start="4775:34" pos:end="4775:38">cpu_T</name><index pos:start="4775:39" pos:end="4775:41">[<expr pos:start="4775:40" pos:end="4775:40"><literal type="number" pos:start="4775:40" pos:end="4775:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4775:44" pos:end="4775:47"><expr pos:start="4775:44" pos:end="4775:47"><literal type="number" pos:start="4775:44" pos:end="4775:47">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4777:9" pos:end="4777:41"><expr pos:start="4777:9" pos:end="4777:40"><call pos:start="4777:9" pos:end="4777:40"><name pos:start="4777:9" pos:end="4777:25">gen_op_mov_reg_T0</name><argument_list pos:start="4777:26" pos:end="4777:40">(<argument pos:start="4777:27" pos:end="4777:33"><expr pos:start="4777:27" pos:end="4777:33"><name pos:start="4777:27" pos:end="4777:33">OT_BYTE</name></expr></argument>, <argument pos:start="4777:36" pos:end="4777:39"><expr pos:start="4777:36" pos:end="4777:39"><name pos:start="4777:36" pos:end="4777:39">R_AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4779:9" pos:end="4779:14">break;</break>

    <case pos:start="4781:5" pos:end="4781:14">case <expr pos:start="4781:10" pos:end="4781:13"><literal type="number" pos:start="4781:10" pos:end="4781:13">0xf5</literal></expr>:</case> <comment type="block" pos:start="4781:16" pos:end="4781:24">/* cmc */</comment>

        <if_stmt pos:start="4783:9" pos:end="4785:39"><if pos:start="4783:9" pos:end="4785:39">if <condition pos:start="4783:12" pos:end="4783:38">(<expr pos:start="4783:13" pos:end="4783:37"><name pos:start="4783:13" pos:end="4783:20"><name pos:start="4783:13" pos:end="4783:13">s</name><operator pos:start="4783:14" pos:end="4783:15">-&gt;</operator><name pos:start="4783:16" pos:end="4783:20">cc_op</name></name> <operator pos:start="4783:22" pos:end="4783:23">!=</operator> <name pos:start="4783:25" pos:end="4783:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4785:13" pos:end="4785:39"><block_content pos:start="4785:13" pos:end="4785:39">

            <expr_stmt pos:start="4785:13" pos:end="4785:39"><expr pos:start="4785:13" pos:end="4785:38"><call pos:start="4785:13" pos:end="4785:38"><name pos:start="4785:13" pos:end="4785:28">gen_op_set_cc_op</name><argument_list pos:start="4785:29" pos:end="4785:38">(<argument pos:start="4785:30" pos:end="4785:37"><expr pos:start="4785:30" pos:end="4785:37"><name pos:start="4785:30" pos:end="4785:37"><name pos:start="4785:30" pos:end="4785:30">s</name><operator pos:start="4785:31" pos:end="4785:32">-&gt;</operator><name pos:start="4785:33" pos:end="4785:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4787:9" pos:end="4787:39"><expr pos:start="4787:9" pos:end="4787:38"><call pos:start="4787:9" pos:end="4787:38"><name pos:start="4787:9" pos:end="4787:26">gen_compute_eflags</name><argument_list pos:start="4787:27" pos:end="4787:38">(<argument pos:start="4787:28" pos:end="4787:37"><expr pos:start="4787:28" pos:end="4787:37"><name pos:start="4787:28" pos:end="4787:37">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4789:9" pos:end="4789:54"><expr pos:start="4789:9" pos:end="4789:53"><call pos:start="4789:9" pos:end="4789:53"><name pos:start="4789:9" pos:end="4789:23">tcg_gen_xori_tl</name><argument_list pos:start="4789:24" pos:end="4789:53">(<argument pos:start="4789:25" pos:end="4789:34"><expr pos:start="4789:25" pos:end="4789:34"><name pos:start="4789:25" pos:end="4789:34">cpu_cc_src</name></expr></argument>, <argument pos:start="4789:37" pos:end="4789:46"><expr pos:start="4789:37" pos:end="4789:46"><name pos:start="4789:37" pos:end="4789:46">cpu_cc_src</name></expr></argument>, <argument pos:start="4789:49" pos:end="4789:52"><expr pos:start="4789:49" pos:end="4789:52"><name pos:start="4789:49" pos:end="4789:52">CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4791:9" pos:end="4791:32"><expr pos:start="4791:9" pos:end="4791:31"><name pos:start="4791:9" pos:end="4791:16"><name pos:start="4791:9" pos:end="4791:9">s</name><operator pos:start="4791:10" pos:end="4791:11">-&gt;</operator><name pos:start="4791:12" pos:end="4791:16">cc_op</name></name> <operator pos:start="4791:18" pos:end="4791:18">=</operator> <name pos:start="4791:20" pos:end="4791:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="4793:9" pos:end="4793:14">break;</break>

    <case pos:start="4795:5" pos:end="4795:14">case <expr pos:start="4795:10" pos:end="4795:13"><literal type="number" pos:start="4795:10" pos:end="4795:13">0xf8</literal></expr>:</case> <comment type="block" pos:start="4795:16" pos:end="4795:24">/* clc */</comment>

        <if_stmt pos:start="4797:9" pos:end="4799:39"><if pos:start="4797:9" pos:end="4799:39">if <condition pos:start="4797:12" pos:end="4797:38">(<expr pos:start="4797:13" pos:end="4797:37"><name pos:start="4797:13" pos:end="4797:20"><name pos:start="4797:13" pos:end="4797:13">s</name><operator pos:start="4797:14" pos:end="4797:15">-&gt;</operator><name pos:start="4797:16" pos:end="4797:20">cc_op</name></name> <operator pos:start="4797:22" pos:end="4797:23">!=</operator> <name pos:start="4797:25" pos:end="4797:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4799:13" pos:end="4799:39"><block_content pos:start="4799:13" pos:end="4799:39">

            <expr_stmt pos:start="4799:13" pos:end="4799:39"><expr pos:start="4799:13" pos:end="4799:38"><call pos:start="4799:13" pos:end="4799:38"><name pos:start="4799:13" pos:end="4799:28">gen_op_set_cc_op</name><argument_list pos:start="4799:29" pos:end="4799:38">(<argument pos:start="4799:30" pos:end="4799:37"><expr pos:start="4799:30" pos:end="4799:37"><name pos:start="4799:30" pos:end="4799:37"><name pos:start="4799:30" pos:end="4799:30">s</name><operator pos:start="4799:31" pos:end="4799:32">-&gt;</operator><name pos:start="4799:33" pos:end="4799:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4801:9" pos:end="4801:39"><expr pos:start="4801:9" pos:end="4801:38"><call pos:start="4801:9" pos:end="4801:38"><name pos:start="4801:9" pos:end="4801:26">gen_compute_eflags</name><argument_list pos:start="4801:27" pos:end="4801:38">(<argument pos:start="4801:28" pos:end="4801:37"><expr pos:start="4801:28" pos:end="4801:37"><name pos:start="4801:28" pos:end="4801:37">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4803:9" pos:end="4803:55"><expr pos:start="4803:9" pos:end="4803:54"><call pos:start="4803:9" pos:end="4803:54"><name pos:start="4803:9" pos:end="4803:23">tcg_gen_andi_tl</name><argument_list pos:start="4803:24" pos:end="4803:54">(<argument pos:start="4803:25" pos:end="4803:34"><expr pos:start="4803:25" pos:end="4803:34"><name pos:start="4803:25" pos:end="4803:34">cpu_cc_src</name></expr></argument>, <argument pos:start="4803:37" pos:end="4803:46"><expr pos:start="4803:37" pos:end="4803:46"><name pos:start="4803:37" pos:end="4803:46">cpu_cc_src</name></expr></argument>, <argument pos:start="4803:49" pos:end="4803:53"><expr pos:start="4803:49" pos:end="4803:53"><operator pos:start="4803:49" pos:end="4803:49">~</operator><name pos:start="4803:50" pos:end="4803:53">CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4805:9" pos:end="4805:32"><expr pos:start="4805:9" pos:end="4805:31"><name pos:start="4805:9" pos:end="4805:16"><name pos:start="4805:9" pos:end="4805:9">s</name><operator pos:start="4805:10" pos:end="4805:11">-&gt;</operator><name pos:start="4805:12" pos:end="4805:16">cc_op</name></name> <operator pos:start="4805:18" pos:end="4805:18">=</operator> <name pos:start="4805:20" pos:end="4805:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="4807:9" pos:end="4807:14">break;</break>

    <case pos:start="4809:5" pos:end="4809:14">case <expr pos:start="4809:10" pos:end="4809:13"><literal type="number" pos:start="4809:10" pos:end="4809:13">0xf9</literal></expr>:</case> <comment type="block" pos:start="4809:16" pos:end="4809:24">/* stc */</comment>

        <if_stmt pos:start="4811:9" pos:end="4813:39"><if pos:start="4811:9" pos:end="4813:39">if <condition pos:start="4811:12" pos:end="4811:38">(<expr pos:start="4811:13" pos:end="4811:37"><name pos:start="4811:13" pos:end="4811:20"><name pos:start="4811:13" pos:end="4811:13">s</name><operator pos:start="4811:14" pos:end="4811:15">-&gt;</operator><name pos:start="4811:16" pos:end="4811:20">cc_op</name></name> <operator pos:start="4811:22" pos:end="4811:23">!=</operator> <name pos:start="4811:25" pos:end="4811:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4813:13" pos:end="4813:39"><block_content pos:start="4813:13" pos:end="4813:39">

            <expr_stmt pos:start="4813:13" pos:end="4813:39"><expr pos:start="4813:13" pos:end="4813:38"><call pos:start="4813:13" pos:end="4813:38"><name pos:start="4813:13" pos:end="4813:28">gen_op_set_cc_op</name><argument_list pos:start="4813:29" pos:end="4813:38">(<argument pos:start="4813:30" pos:end="4813:37"><expr pos:start="4813:30" pos:end="4813:37"><name pos:start="4813:30" pos:end="4813:37"><name pos:start="4813:30" pos:end="4813:30">s</name><operator pos:start="4813:31" pos:end="4813:32">-&gt;</operator><name pos:start="4813:33" pos:end="4813:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4815:9" pos:end="4815:39"><expr pos:start="4815:9" pos:end="4815:38"><call pos:start="4815:9" pos:end="4815:38"><name pos:start="4815:9" pos:end="4815:26">gen_compute_eflags</name><argument_list pos:start="4815:27" pos:end="4815:38">(<argument pos:start="4815:28" pos:end="4815:37"><expr pos:start="4815:28" pos:end="4815:37"><name pos:start="4815:28" pos:end="4815:37">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4817:9" pos:end="4817:53"><expr pos:start="4817:9" pos:end="4817:52"><call pos:start="4817:9" pos:end="4817:52"><name pos:start="4817:9" pos:end="4817:22">tcg_gen_ori_tl</name><argument_list pos:start="4817:23" pos:end="4817:52">(<argument pos:start="4817:24" pos:end="4817:33"><expr pos:start="4817:24" pos:end="4817:33"><name pos:start="4817:24" pos:end="4817:33">cpu_cc_src</name></expr></argument>, <argument pos:start="4817:36" pos:end="4817:45"><expr pos:start="4817:36" pos:end="4817:45"><name pos:start="4817:36" pos:end="4817:45">cpu_cc_src</name></expr></argument>, <argument pos:start="4817:48" pos:end="4817:51"><expr pos:start="4817:48" pos:end="4817:51"><name pos:start="4817:48" pos:end="4817:51">CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4819:9" pos:end="4819:32"><expr pos:start="4819:9" pos:end="4819:31"><name pos:start="4819:9" pos:end="4819:16"><name pos:start="4819:9" pos:end="4819:9">s</name><operator pos:start="4819:10" pos:end="4819:11">-&gt;</operator><name pos:start="4819:12" pos:end="4819:16">cc_op</name></name> <operator pos:start="4819:18" pos:end="4819:18">=</operator> <name pos:start="4819:20" pos:end="4819:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="4821:9" pos:end="4821:14">break;</break>

    <case pos:start="4823:5" pos:end="4823:14">case <expr pos:start="4823:10" pos:end="4823:13"><literal type="number" pos:start="4823:10" pos:end="4823:13">0xfc</literal></expr>:</case> <comment type="block" pos:start="4823:16" pos:end="4823:24">/* cld */</comment>

        <expr_stmt pos:start="4825:9" pos:end="4825:42"><expr pos:start="4825:9" pos:end="4825:41"><call pos:start="4825:9" pos:end="4825:41"><name pos:start="4825:9" pos:end="4825:24">tcg_gen_movi_i32</name><argument_list pos:start="4825:25" pos:end="4825:41">(<argument pos:start="4825:26" pos:end="4825:37"><expr pos:start="4825:26" pos:end="4825:37"><name pos:start="4825:26" pos:end="4825:37">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4825:40" pos:end="4825:40"><expr pos:start="4825:40" pos:end="4825:40"><literal type="number" pos:start="4825:40" pos:end="4825:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4827:9" pos:end="4827:73"><expr pos:start="4827:9" pos:end="4827:72"><call pos:start="4827:9" pos:end="4827:72"><name pos:start="4827:9" pos:end="4827:22">tcg_gen_st_i32</name><argument_list pos:start="4827:23" pos:end="4827:72">(<argument pos:start="4827:24" pos:end="4827:35"><expr pos:start="4827:24" pos:end="4827:35"><name pos:start="4827:24" pos:end="4827:35">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4827:38" pos:end="4827:44"><expr pos:start="4827:38" pos:end="4827:44"><name pos:start="4827:38" pos:end="4827:44">cpu_env</name></expr></argument>, <argument pos:start="4827:47" pos:end="4827:71"><expr pos:start="4827:47" pos:end="4827:71"><call pos:start="4827:47" pos:end="4827:71"><name pos:start="4827:47" pos:end="4827:54">offsetof</name><argument_list pos:start="4827:55" pos:end="4827:71">(<argument pos:start="4827:56" pos:end="4827:66"><expr pos:start="4827:56" pos:end="4827:66"><name pos:start="4827:56" pos:end="4827:66">CPUX86State</name></expr></argument>, <argument pos:start="4827:69" pos:end="4827:70"><expr pos:start="4827:69" pos:end="4827:70"><name pos:start="4827:69" pos:end="4827:70">df</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4829:9" pos:end="4829:14">break;</break>

    <case pos:start="4831:5" pos:end="4831:14">case <expr pos:start="4831:10" pos:end="4831:13"><literal type="number" pos:start="4831:10" pos:end="4831:13">0xfd</literal></expr>:</case> <comment type="block" pos:start="4831:16" pos:end="4831:24">/* std */</comment>

        <expr_stmt pos:start="4833:9" pos:end="4833:43"><expr pos:start="4833:9" pos:end="4833:42"><call pos:start="4833:9" pos:end="4833:42"><name pos:start="4833:9" pos:end="4833:24">tcg_gen_movi_i32</name><argument_list pos:start="4833:25" pos:end="4833:42">(<argument pos:start="4833:26" pos:end="4833:37"><expr pos:start="4833:26" pos:end="4833:37"><name pos:start="4833:26" pos:end="4833:37">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4833:40" pos:end="4833:41"><expr pos:start="4833:40" pos:end="4833:41"><operator pos:start="4833:40" pos:end="4833:40">-</operator><literal type="number" pos:start="4833:41" pos:end="4833:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4835:9" pos:end="4835:73"><expr pos:start="4835:9" pos:end="4835:72"><call pos:start="4835:9" pos:end="4835:72"><name pos:start="4835:9" pos:end="4835:22">tcg_gen_st_i32</name><argument_list pos:start="4835:23" pos:end="4835:72">(<argument pos:start="4835:24" pos:end="4835:35"><expr pos:start="4835:24" pos:end="4835:35"><name pos:start="4835:24" pos:end="4835:35">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4835:38" pos:end="4835:44"><expr pos:start="4835:38" pos:end="4835:44"><name pos:start="4835:38" pos:end="4835:44">cpu_env</name></expr></argument>, <argument pos:start="4835:47" pos:end="4835:71"><expr pos:start="4835:47" pos:end="4835:71"><call pos:start="4835:47" pos:end="4835:71"><name pos:start="4835:47" pos:end="4835:54">offsetof</name><argument_list pos:start="4835:55" pos:end="4835:71">(<argument pos:start="4835:56" pos:end="4835:66"><expr pos:start="4835:56" pos:end="4835:66"><name pos:start="4835:56" pos:end="4835:66">CPUX86State</name></expr></argument>, <argument pos:start="4835:69" pos:end="4835:70"><expr pos:start="4835:69" pos:end="4835:70"><name pos:start="4835:69" pos:end="4835:70">df</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4837:9" pos:end="4837:14">break;</break>



        <comment type="block" format="doxygen" pos:start="4841:9" pos:end="4841:34">/************************/</comment>

        <comment type="block" pos:start="4843:9" pos:end="4843:28">/* bit operations */</comment>

    <case pos:start="4845:5" pos:end="4845:15">case <expr pos:start="4845:10" pos:end="4845:14"><literal type="number" pos:start="4845:10" pos:end="4845:14">0x1ba</literal></expr>:</case> <comment type="block" pos:start="4845:17" pos:end="4845:43">/* bt/bts/btr/btc Gv, im */</comment>

        <expr_stmt pos:start="4847:9" pos:end="4847:29"><expr pos:start="4847:9" pos:end="4847:28"><name pos:start="4847:9" pos:end="4847:10">ot</name> <operator pos:start="4847:12" pos:end="4847:12">=</operator> <name pos:start="4847:14" pos:end="4847:18">dflag</name> <operator pos:start="4847:20" pos:end="4847:20">+</operator> <name pos:start="4847:22" pos:end="4847:28">OT_WORD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="4849:9" pos:end="4849:44"><expr pos:start="4849:9" pos:end="4849:43"><name pos:start="4849:9" pos:end="4849:13">modrm</name> <operator pos:start="4849:15" pos:end="4849:15">=</operator> <call pos:start="4849:17" pos:end="4849:43"><name pos:start="4849:17" pos:end="4849:29">cpu_ldub_code</name><argument_list pos:start="4849:30" pos:end="4849:43">(<argument pos:start="4849:31" pos:end="4849:33"><expr pos:start="4849:31" pos:end="4849:33"><name pos:start="4849:31" pos:end="4849:33">env</name></expr></argument>, <argument pos:start="4849:36" pos:end="4849:42"><expr pos:start="4849:36" pos:end="4849:42"><name pos:start="4849:36" pos:end="4849:40"><name pos:start="4849:36" pos:end="4849:36">s</name><operator pos:start="4849:37" pos:end="4849:38">-&gt;</operator><name pos:start="4849:39" pos:end="4849:40">pc</name></name><operator pos:start="4849:41" pos:end="4849:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4851:9" pos:end="4851:30"><expr pos:start="4851:9" pos:end="4851:29"><name pos:start="4851:9" pos:end="4851:10">op</name> <operator pos:start="4851:12" pos:end="4851:12">=</operator> <operator pos:start="4851:14" pos:end="4851:14">(</operator><name pos:start="4851:15" pos:end="4851:19">modrm</name> <operator pos:start="4851:21" pos:end="4851:22">&gt;&gt;</operator> <literal type="number" pos:start="4851:24" pos:end="4851:24">3</literal><operator pos:start="4851:25" pos:end="4851:25">)</operator> <operator pos:start="4851:27" pos:end="4851:27">&amp;</operator> <literal type="number" pos:start="4851:29" pos:end="4851:29">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="4853:9" pos:end="4853:31"><expr pos:start="4853:9" pos:end="4853:30"><name pos:start="4853:9" pos:end="4853:11">mod</name> <operator pos:start="4853:13" pos:end="4853:13">=</operator> <operator pos:start="4853:15" pos:end="4853:15">(</operator><name pos:start="4853:16" pos:end="4853:20">modrm</name> <operator pos:start="4853:22" pos:end="4853:23">&gt;&gt;</operator> <literal type="number" pos:start="4853:25" pos:end="4853:25">6</literal><operator pos:start="4853:26" pos:end="4853:26">)</operator> <operator pos:start="4853:28" pos:end="4853:28">&amp;</operator> <literal type="number" pos:start="4853:30" pos:end="4853:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="4855:9" pos:end="4855:36"><expr pos:start="4855:9" pos:end="4855:35"><name pos:start="4855:9" pos:end="4855:10">rm</name> <operator pos:start="4855:12" pos:end="4855:12">=</operator> <operator pos:start="4855:14" pos:end="4855:14">(</operator><name pos:start="4855:15" pos:end="4855:19">modrm</name> <operator pos:start="4855:21" pos:end="4855:21">&amp;</operator> <literal type="number" pos:start="4855:23" pos:end="4855:23">7</literal><operator pos:start="4855:24" pos:end="4855:24">)</operator> <operator pos:start="4855:26" pos:end="4855:26">|</operator> <call pos:start="4855:28" pos:end="4855:35"><name pos:start="4855:28" pos:end="4855:32">REX_B</name><argument_list pos:start="4855:33" pos:end="4855:35">(<argument pos:start="4855:34" pos:end="4855:34"><expr pos:start="4855:34" pos:end="4855:34"><name pos:start="4855:34" pos:end="4855:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4857:9" pos:end="4869:9"><if pos:start="4857:9" pos:end="4865:9">if <condition pos:start="4857:12" pos:end="4857:21">(<expr pos:start="4857:13" pos:end="4857:20"><name pos:start="4857:13" pos:end="4857:15">mod</name> <operator pos:start="4857:17" pos:end="4857:18">!=</operator> <literal type="number" pos:start="4857:20" pos:end="4857:20">3</literal></expr>)</condition> <block pos:start="4857:23" pos:end="4865:9">{<block_content pos:start="4859:13" pos:end="4863:47">

            <expr_stmt pos:start="4859:13" pos:end="4859:30"><expr pos:start="4859:13" pos:end="4859:29"><name pos:start="4859:13" pos:end="4859:25"><name pos:start="4859:13" pos:end="4859:13">s</name><operator pos:start="4859:14" pos:end="4859:15">-&gt;</operator><name pos:start="4859:16" pos:end="4859:25">rip_offset</name></name> <operator pos:start="4859:27" pos:end="4859:27">=</operator> <literal type="number" pos:start="4859:29" pos:end="4859:29">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="4861:13" pos:end="4861:66"><expr pos:start="4861:13" pos:end="4861:65"><call pos:start="4861:13" pos:end="4861:65"><name pos:start="4861:13" pos:end="4861:25">gen_lea_modrm</name><argument_list pos:start="4861:26" pos:end="4861:65">(<argument pos:start="4861:27" pos:end="4861:29"><expr pos:start="4861:27" pos:end="4861:29"><name pos:start="4861:27" pos:end="4861:29">env</name></expr></argument>, <argument pos:start="4861:32" pos:end="4861:32"><expr pos:start="4861:32" pos:end="4861:32"><name pos:start="4861:32" pos:end="4861:32">s</name></expr></argument>, <argument pos:start="4861:35" pos:end="4861:39"><expr pos:start="4861:35" pos:end="4861:39"><name pos:start="4861:35" pos:end="4861:39">modrm</name></expr></argument>, <argument pos:start="4861:42" pos:end="4861:50"><expr pos:start="4861:42" pos:end="4861:50"><operator pos:start="4861:42" pos:end="4861:42">&amp;</operator><name pos:start="4861:43" pos:end="4861:50">reg_addr</name></expr></argument>, <argument pos:start="4861:53" pos:end="4861:64"><expr pos:start="4861:53" pos:end="4861:64"><operator pos:start="4861:53" pos:end="4861:53">&amp;</operator><name pos:start="4861:54" pos:end="4861:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4863:13" pos:end="4863:47"><expr pos:start="4863:13" pos:end="4863:46"><call pos:start="4863:13" pos:end="4863:46"><name pos:start="4863:13" pos:end="4863:27">gen_op_ld_T0_A0</name><argument_list pos:start="4863:28" pos:end="4863:46">(<argument pos:start="4863:29" pos:end="4863:45"><expr pos:start="4863:29" pos:end="4863:45"><name pos:start="4863:29" pos:end="4863:30">ot</name> <operator pos:start="4863:32" pos:end="4863:32">+</operator> <name pos:start="4863:34" pos:end="4863:45"><name pos:start="4863:34" pos:end="4863:34">s</name><operator pos:start="4863:35" pos:end="4863:36">-&gt;</operator><name pos:start="4863:37" pos:end="4863:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4865:11" pos:end="4869:9">else <block pos:start="4865:16" pos:end="4869:9">{<block_content pos:start="4867:13" pos:end="4867:41">

            <expr_stmt pos:start="4867:13" pos:end="4867:41"><expr pos:start="4867:13" pos:end="4867:40"><call pos:start="4867:13" pos:end="4867:40"><name pos:start="4867:13" pos:end="4867:29">gen_op_mov_TN_reg</name><argument_list pos:start="4867:30" pos:end="4867:40">(<argument pos:start="4867:31" pos:end="4867:32"><expr pos:start="4867:31" pos:end="4867:32"><name pos:start="4867:31" pos:end="4867:32">ot</name></expr></argument>, <argument pos:start="4867:35" pos:end="4867:35"><expr pos:start="4867:35" pos:end="4867:35"><literal type="number" pos:start="4867:35" pos:end="4867:35">0</literal></expr></argument>, <argument pos:start="4867:38" pos:end="4867:39"><expr pos:start="4867:38" pos:end="4867:39"><name pos:start="4867:38" pos:end="4867:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="4871:9" pos:end="4871:24">/* load shift */</comment>

        <expr_stmt pos:start="4873:9" pos:end="4873:42"><expr pos:start="4873:9" pos:end="4873:41"><name pos:start="4873:9" pos:end="4873:11">val</name> <operator pos:start="4873:13" pos:end="4873:13">=</operator> <call pos:start="4873:15" pos:end="4873:41"><name pos:start="4873:15" pos:end="4873:27">cpu_ldub_code</name><argument_list pos:start="4873:28" pos:end="4873:41">(<argument pos:start="4873:29" pos:end="4873:31"><expr pos:start="4873:29" pos:end="4873:31"><name pos:start="4873:29" pos:end="4873:31">env</name></expr></argument>, <argument pos:start="4873:34" pos:end="4873:40"><expr pos:start="4873:34" pos:end="4873:40"><name pos:start="4873:34" pos:end="4873:38"><name pos:start="4873:34" pos:end="4873:34">s</name><operator pos:start="4873:35" pos:end="4873:36">-&gt;</operator><name pos:start="4873:37" pos:end="4873:38">pc</name></name><operator pos:start="4873:39" pos:end="4873:40">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4875:9" pos:end="4875:31"><expr pos:start="4875:9" pos:end="4875:30"><call pos:start="4875:9" pos:end="4875:30"><name pos:start="4875:9" pos:end="4875:25">gen_op_movl_T1_im</name><argument_list pos:start="4875:26" pos:end="4875:30">(<argument pos:start="4875:27" pos:end="4875:29"><expr pos:start="4875:27" pos:end="4875:29"><name pos:start="4875:27" pos:end="4875:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4877:9" pos:end="4879:28"><if pos:start="4877:9" pos:end="4879:28">if <condition pos:start="4877:12" pos:end="4877:19">(<expr pos:start="4877:13" pos:end="4877:18"><name pos:start="4877:13" pos:end="4877:14">op</name> <operator pos:start="4877:16" pos:end="4877:16">&lt;</operator> <literal type="number" pos:start="4877:18" pos:end="4877:18">4</literal></expr>)</condition><block type="pseudo" pos:start="4879:13" pos:end="4879:28"><block_content pos:start="4879:13" pos:end="4879:28">

            <goto pos:start="4879:13" pos:end="4879:28">goto <name pos:start="4879:18" pos:end="4879:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4881:9" pos:end="4881:16"><expr pos:start="4881:9" pos:end="4881:15"><name pos:start="4881:9" pos:end="4881:10">op</name> <operator pos:start="4881:12" pos:end="4881:13">-=</operator> <literal type="number" pos:start="4881:15" pos:end="4881:15">4</literal></expr>;</expr_stmt>

        <goto pos:start="4883:9" pos:end="4883:19">goto <name pos:start="4883:14" pos:end="4883:18">bt_op</name>;</goto>

    <case pos:start="4885:5" pos:end="4885:15">case <expr pos:start="4885:10" pos:end="4885:14"><literal type="number" pos:start="4885:10" pos:end="4885:14">0x1a3</literal></expr>:</case> <comment type="block" pos:start="4885:17" pos:end="4885:31">/* bt Gv, Ev */</comment>

        <expr_stmt pos:start="4887:9" pos:end="4887:15"><expr pos:start="4887:9" pos:end="4887:14"><name pos:start="4887:9" pos:end="4887:10">op</name> <operator pos:start="4887:12" pos:end="4887:12">=</operator> <literal type="number" pos:start="4887:14" pos:end="4887:14">0</literal></expr>;</expr_stmt>

        <goto pos:start="4889:9" pos:end="4889:20">goto <name pos:start="4889:14" pos:end="4889:19">do_btx</name>;</goto>

    <case pos:start="4891:5" pos:end="4891:15">case <expr pos:start="4891:10" pos:end="4891:14"><literal type="number" pos:start="4891:10" pos:end="4891:14">0x1ab</literal></expr>:</case> <comment type="block" pos:start="4891:17" pos:end="4891:25">/* bts */</comment>

        <expr_stmt pos:start="4893:9" pos:end="4893:15"><expr pos:start="4893:9" pos:end="4893:14"><name pos:start="4893:9" pos:end="4893:10">op</name> <operator pos:start="4893:12" pos:end="4893:12">=</operator> <literal type="number" pos:start="4893:14" pos:end="4893:14">1</literal></expr>;</expr_stmt>

        <goto pos:start="4895:9" pos:end="4895:20">goto <name pos:start="4895:14" pos:end="4895:19">do_btx</name>;</goto>

    <case pos:start="4897:5" pos:end="4897:15">case <expr pos:start="4897:10" pos:end="4897:14"><literal type="number" pos:start="4897:10" pos:end="4897:14">0x1b3</literal></expr>:</case> <comment type="block" pos:start="4897:17" pos:end="4897:25">/* btr */</comment>

        <expr_stmt pos:start="4899:9" pos:end="4899:15"><expr pos:start="4899:9" pos:end="4899:14"><name pos:start="4899:9" pos:end="4899:10">op</name> <operator pos:start="4899:12" pos:end="4899:12">=</operator> <literal type="number" pos:start="4899:14" pos:end="4899:14">2</literal></expr>;</expr_stmt>

        <goto pos:start="4901:9" pos:end="4901:20">goto <name pos:start="4901:14" pos:end="4901:19">do_btx</name>;</goto>

    <case pos:start="4903:5" pos:end="4903:15">case <expr pos:start="4903:10" pos:end="4903:14"><literal type="number" pos:start="4903:10" pos:end="4903:14">0x1bb</literal></expr>:</case> <comment type="block" pos:start="4903:17" pos:end="4903:25">/* btc */</comment>

        <expr_stmt pos:start="4905:9" pos:end="4905:15"><expr pos:start="4905:9" pos:end="4905:14"><name pos:start="4905:9" pos:end="4905:10">op</name> <operator pos:start="4905:12" pos:end="4905:12">=</operator> <literal type="number" pos:start="4905:14" pos:end="4905:14">3</literal></expr>;</expr_stmt>

    <label pos:start="4907:5" pos:end="4907:11"><name pos:start="4907:5" pos:end="4907:10">do_btx</name>:</label>

        <expr_stmt pos:start="4909:9" pos:end="4909:29"><expr pos:start="4909:9" pos:end="4909:28"><name pos:start="4909:9" pos:end="4909:10">ot</name> <operator pos:start="4909:12" pos:end="4909:12">=</operator> <name pos:start="4909:14" pos:end="4909:18">dflag</name> <operator pos:start="4909:20" pos:end="4909:20">+</operator> <name pos:start="4909:22" pos:end="4909:28">OT_WORD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="4911:9" pos:end="4911:44"><expr pos:start="4911:9" pos:end="4911:43"><name pos:start="4911:9" pos:end="4911:13">modrm</name> <operator pos:start="4911:15" pos:end="4911:15">=</operator> <call pos:start="4911:17" pos:end="4911:43"><name pos:start="4911:17" pos:end="4911:29">cpu_ldub_code</name><argument_list pos:start="4911:30" pos:end="4911:43">(<argument pos:start="4911:31" pos:end="4911:33"><expr pos:start="4911:31" pos:end="4911:33"><name pos:start="4911:31" pos:end="4911:33">env</name></expr></argument>, <argument pos:start="4911:36" pos:end="4911:42"><expr pos:start="4911:36" pos:end="4911:42"><name pos:start="4911:36" pos:end="4911:40"><name pos:start="4911:36" pos:end="4911:36">s</name><operator pos:start="4911:37" pos:end="4911:38">-&gt;</operator><name pos:start="4911:39" pos:end="4911:40">pc</name></name><operator pos:start="4911:41" pos:end="4911:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4913:9" pos:end="4913:41"><expr pos:start="4913:9" pos:end="4913:40"><name pos:start="4913:9" pos:end="4913:11">reg</name> <operator pos:start="4913:13" pos:end="4913:13">=</operator> <operator pos:start="4913:15" pos:end="4913:15">(</operator><operator pos:start="4913:16" pos:end="4913:16">(</operator><name pos:start="4913:17" pos:end="4913:21">modrm</name> <operator pos:start="4913:23" pos:end="4913:24">&gt;&gt;</operator> <literal type="number" pos:start="4913:26" pos:end="4913:26">3</literal><operator pos:start="4913:27" pos:end="4913:27">)</operator> <operator pos:start="4913:29" pos:end="4913:29">&amp;</operator> <literal type="number" pos:start="4913:31" pos:end="4913:31">7</literal><operator pos:start="4913:32" pos:end="4913:32">)</operator> <operator pos:start="4913:34" pos:end="4913:34">|</operator> <name pos:start="4913:36" pos:end="4913:40">rex_r</name></expr>;</expr_stmt>

        <expr_stmt pos:start="4915:9" pos:end="4915:31"><expr pos:start="4915:9" pos:end="4915:30"><name pos:start="4915:9" pos:end="4915:11">mod</name> <operator pos:start="4915:13" pos:end="4915:13">=</operator> <operator pos:start="4915:15" pos:end="4915:15">(</operator><name pos:start="4915:16" pos:end="4915:20">modrm</name> <operator pos:start="4915:22" pos:end="4915:23">&gt;&gt;</operator> <literal type="number" pos:start="4915:25" pos:end="4915:25">6</literal><operator pos:start="4915:26" pos:end="4915:26">)</operator> <operator pos:start="4915:28" pos:end="4915:28">&amp;</operator> <literal type="number" pos:start="4915:30" pos:end="4915:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="4917:9" pos:end="4917:36"><expr pos:start="4917:9" pos:end="4917:35"><name pos:start="4917:9" pos:end="4917:10">rm</name> <operator pos:start="4917:12" pos:end="4917:12">=</operator> <operator pos:start="4917:14" pos:end="4917:14">(</operator><name pos:start="4917:15" pos:end="4917:19">modrm</name> <operator pos:start="4917:21" pos:end="4917:21">&amp;</operator> <literal type="number" pos:start="4917:23" pos:end="4917:23">7</literal><operator pos:start="4917:24" pos:end="4917:24">)</operator> <operator pos:start="4917:26" pos:end="4917:26">|</operator> <call pos:start="4917:28" pos:end="4917:35"><name pos:start="4917:28" pos:end="4917:32">REX_B</name><argument_list pos:start="4917:33" pos:end="4917:35">(<argument pos:start="4917:34" pos:end="4917:34"><expr pos:start="4917:34" pos:end="4917:34"><name pos:start="4917:34" pos:end="4917:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4919:9" pos:end="4919:43"><expr pos:start="4919:9" pos:end="4919:42"><call pos:start="4919:9" pos:end="4919:42"><name pos:start="4919:9" pos:end="4919:25">gen_op_mov_TN_reg</name><argument_list pos:start="4919:26" pos:end="4919:42">(<argument pos:start="4919:27" pos:end="4919:33"><expr pos:start="4919:27" pos:end="4919:33"><name pos:start="4919:27" pos:end="4919:33">OT_LONG</name></expr></argument>, <argument pos:start="4919:36" pos:end="4919:36"><expr pos:start="4919:36" pos:end="4919:36"><literal type="number" pos:start="4919:36" pos:end="4919:36">1</literal></expr></argument>, <argument pos:start="4919:39" pos:end="4919:41"><expr pos:start="4919:39" pos:end="4919:41"><name pos:start="4919:39" pos:end="4919:41">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4921:9" pos:end="4941:9"><if pos:start="4921:9" pos:end="4937:9">if <condition pos:start="4921:12" pos:end="4921:21">(<expr pos:start="4921:13" pos:end="4921:20"><name pos:start="4921:13" pos:end="4921:15">mod</name> <operator pos:start="4921:17" pos:end="4921:18">!=</operator> <literal type="number" pos:start="4921:20" pos:end="4921:20">3</literal></expr>)</condition> <block pos:start="4921:23" pos:end="4937:9">{<block_content pos:start="4923:13" pos:end="4935:47">

            <expr_stmt pos:start="4923:13" pos:end="4923:66"><expr pos:start="4923:13" pos:end="4923:65"><call pos:start="4923:13" pos:end="4923:65"><name pos:start="4923:13" pos:end="4923:25">gen_lea_modrm</name><argument_list pos:start="4923:26" pos:end="4923:65">(<argument pos:start="4923:27" pos:end="4923:29"><expr pos:start="4923:27" pos:end="4923:29"><name pos:start="4923:27" pos:end="4923:29">env</name></expr></argument>, <argument pos:start="4923:32" pos:end="4923:32"><expr pos:start="4923:32" pos:end="4923:32"><name pos:start="4923:32" pos:end="4923:32">s</name></expr></argument>, <argument pos:start="4923:35" pos:end="4923:39"><expr pos:start="4923:35" pos:end="4923:39"><name pos:start="4923:35" pos:end="4923:39">modrm</name></expr></argument>, <argument pos:start="4923:42" pos:end="4923:50"><expr pos:start="4923:42" pos:end="4923:50"><operator pos:start="4923:42" pos:end="4923:42">&amp;</operator><name pos:start="4923:43" pos:end="4923:50">reg_addr</name></expr></argument>, <argument pos:start="4923:53" pos:end="4923:64"><expr pos:start="4923:53" pos:end="4923:64"><operator pos:start="4923:53" pos:end="4923:53">&amp;</operator><name pos:start="4923:54" pos:end="4923:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="4925:13" pos:end="4925:62">/* specific case: we need to add a displacement */</comment>

            <expr_stmt pos:start="4927:13" pos:end="4927:35"><expr pos:start="4927:13" pos:end="4927:34"><call pos:start="4927:13" pos:end="4927:34"><name pos:start="4927:13" pos:end="4927:20">gen_exts</name><argument_list pos:start="4927:21" pos:end="4927:34">(<argument pos:start="4927:22" pos:end="4927:23"><expr pos:start="4927:22" pos:end="4927:23"><name pos:start="4927:22" pos:end="4927:23">ot</name></expr></argument>, <argument pos:start="4927:26" pos:end="4927:33"><expr pos:start="4927:26" pos:end="4927:33"><name pos:start="4927:26" pos:end="4927:33"><name pos:start="4927:26" pos:end="4927:30">cpu_T</name><index pos:start="4927:31" pos:end="4927:33">[<expr pos:start="4927:32" pos:end="4927:32"><literal type="number" pos:start="4927:32" pos:end="4927:32">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4929:13" pos:end="4929:56"><expr pos:start="4929:13" pos:end="4929:55"><call pos:start="4929:13" pos:end="4929:55"><name pos:start="4929:13" pos:end="4929:27">tcg_gen_sari_tl</name><argument_list pos:start="4929:28" pos:end="4929:55">(<argument pos:start="4929:29" pos:end="4929:36"><expr pos:start="4929:29" pos:end="4929:36"><name pos:start="4929:29" pos:end="4929:36">cpu_tmp0</name></expr></argument>, <argument pos:start="4929:39" pos:end="4929:46"><expr pos:start="4929:39" pos:end="4929:46"><name pos:start="4929:39" pos:end="4929:46"><name pos:start="4929:39" pos:end="4929:43">cpu_T</name><index pos:start="4929:44" pos:end="4929:46">[<expr pos:start="4929:45" pos:end="4929:45"><literal type="number" pos:start="4929:45" pos:end="4929:45">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="4929:49" pos:end="4929:54"><expr pos:start="4929:49" pos:end="4929:54"><literal type="number" pos:start="4929:49" pos:end="4929:51">3</literal> <operator pos:start="4929:51" pos:end="4929:51">+</operator> <name pos:start="4929:53" pos:end="4929:54">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4931:13" pos:end="4931:52"><expr pos:start="4931:13" pos:end="4931:51"><call pos:start="4931:13" pos:end="4931:51"><name pos:start="4931:13" pos:end="4931:27">tcg_gen_shli_tl</name><argument_list pos:start="4931:28" pos:end="4931:51">(<argument pos:start="4931:29" pos:end="4931:36"><expr pos:start="4931:29" pos:end="4931:36"><name pos:start="4931:29" pos:end="4931:36">cpu_tmp0</name></expr></argument>, <argument pos:start="4931:39" pos:end="4931:46"><expr pos:start="4931:39" pos:end="4931:46"><name pos:start="4931:39" pos:end="4931:46">cpu_tmp0</name></expr></argument>, <argument pos:start="4931:49" pos:end="4931:50"><expr pos:start="4931:49" pos:end="4931:50"><name pos:start="4931:49" pos:end="4931:50">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4933:13" pos:end="4933:53"><expr pos:start="4933:13" pos:end="4933:52"><call pos:start="4933:13" pos:end="4933:52"><name pos:start="4933:13" pos:end="4933:26">tcg_gen_add_tl</name><argument_list pos:start="4933:27" pos:end="4933:52">(<argument pos:start="4933:28" pos:end="4933:33"><expr pos:start="4933:28" pos:end="4933:33"><name pos:start="4933:28" pos:end="4933:33">cpu_A0</name></expr></argument>, <argument pos:start="4933:36" pos:end="4933:41"><expr pos:start="4933:36" pos:end="4933:41"><name pos:start="4933:36" pos:end="4933:41">cpu_A0</name></expr></argument>, <argument pos:start="4933:44" pos:end="4933:51"><expr pos:start="4933:44" pos:end="4933:51"><name pos:start="4933:44" pos:end="4933:51">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4935:13" pos:end="4935:47"><expr pos:start="4935:13" pos:end="4935:46"><call pos:start="4935:13" pos:end="4935:46"><name pos:start="4935:13" pos:end="4935:27">gen_op_ld_T0_A0</name><argument_list pos:start="4935:28" pos:end="4935:46">(<argument pos:start="4935:29" pos:end="4935:45"><expr pos:start="4935:29" pos:end="4935:45"><name pos:start="4935:29" pos:end="4935:30">ot</name> <operator pos:start="4935:32" pos:end="4935:32">+</operator> <name pos:start="4935:34" pos:end="4935:45"><name pos:start="4935:34" pos:end="4935:34">s</name><operator pos:start="4935:35" pos:end="4935:36">-&gt;</operator><name pos:start="4935:37" pos:end="4935:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4937:11" pos:end="4941:9">else <block pos:start="4937:16" pos:end="4941:9">{<block_content pos:start="4939:13" pos:end="4939:41">

            <expr_stmt pos:start="4939:13" pos:end="4939:41"><expr pos:start="4939:13" pos:end="4939:40"><call pos:start="4939:13" pos:end="4939:40"><name pos:start="4939:13" pos:end="4939:29">gen_op_mov_TN_reg</name><argument_list pos:start="4939:30" pos:end="4939:40">(<argument pos:start="4939:31" pos:end="4939:32"><expr pos:start="4939:31" pos:end="4939:32"><name pos:start="4939:31" pos:end="4939:32">ot</name></expr></argument>, <argument pos:start="4939:35" pos:end="4939:35"><expr pos:start="4939:35" pos:end="4939:35"><literal type="number" pos:start="4939:35" pos:end="4939:35">0</literal></expr></argument>, <argument pos:start="4939:38" pos:end="4939:39"><expr pos:start="4939:38" pos:end="4939:39"><name pos:start="4939:38" pos:end="4939:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    <label pos:start="4943:5" pos:end="4943:10"><name pos:start="4943:5" pos:end="4943:9">bt_op</name>:</label>

        <expr_stmt pos:start="4945:9" pos:end="4945:65"><expr pos:start="4945:9" pos:end="4945:64"><call pos:start="4945:9" pos:end="4945:64"><name pos:start="4945:9" pos:end="4945:23">tcg_gen_andi_tl</name><argument_list pos:start="4945:24" pos:end="4945:64">(<argument pos:start="4945:25" pos:end="4945:32"><expr pos:start="4945:25" pos:end="4945:32"><name pos:start="4945:25" pos:end="4945:32"><name pos:start="4945:25" pos:end="4945:29">cpu_T</name><index pos:start="4945:30" pos:end="4945:32">[<expr pos:start="4945:31" pos:end="4945:31"><literal type="number" pos:start="4945:31" pos:end="4945:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="4945:35" pos:end="4945:42"><expr pos:start="4945:35" pos:end="4945:42"><name pos:start="4945:35" pos:end="4945:42"><name pos:start="4945:35" pos:end="4945:39">cpu_T</name><index pos:start="4945:40" pos:end="4945:42">[<expr pos:start="4945:41" pos:end="4945:41"><literal type="number" pos:start="4945:41" pos:end="4945:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="4945:45" pos:end="4945:63"><expr pos:start="4945:45" pos:end="4945:63"><operator pos:start="4945:45" pos:end="4945:45">(</operator><literal type="number" pos:start="4945:46" pos:end="4945:46">1</literal> <operator pos:start="4945:48" pos:end="4945:49">&lt;&lt;</operator> <operator pos:start="4945:51" pos:end="4945:51">(</operator><literal type="number" pos:start="4945:52" pos:end="4945:54">3</literal> <operator pos:start="4945:54" pos:end="4945:54">+</operator> <name pos:start="4945:56" pos:end="4945:57">ot</name><operator pos:start="4945:58" pos:end="4945:58">)</operator><operator pos:start="4945:59" pos:end="4945:59">)</operator> <operator pos:start="4945:61" pos:end="4945:61">-</operator> <literal type="number" pos:start="4945:63" pos:end="4945:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="4947:9" pos:end="4997:9">switch<condition pos:start="4947:15" pos:end="4947:18">(<expr pos:start="4947:16" pos:end="4947:17"><name pos:start="4947:16" pos:end="4947:17">op</name></expr>)</condition> <block pos:start="4947:20" pos:end="4997:9">{<block_content pos:start="4949:9" pos:end="4995:18">

        <case pos:start="4949:9" pos:end="4949:15">case <expr pos:start="4949:14" pos:end="4949:14"><literal type="number" pos:start="4949:14" pos:end="4949:14">0</literal></expr>:</case>

            <expr_stmt pos:start="4951:13" pos:end="4951:59"><expr pos:start="4951:13" pos:end="4951:58"><call pos:start="4951:13" pos:end="4951:58"><name pos:start="4951:13" pos:end="4951:26">tcg_gen_shr_tl</name><argument_list pos:start="4951:27" pos:end="4951:58">(<argument pos:start="4951:28" pos:end="4951:37"><expr pos:start="4951:28" pos:end="4951:37"><name pos:start="4951:28" pos:end="4951:37">cpu_cc_src</name></expr></argument>, <argument pos:start="4951:40" pos:end="4951:47"><expr pos:start="4951:40" pos:end="4951:47"><name pos:start="4951:40" pos:end="4951:47"><name pos:start="4951:40" pos:end="4951:44">cpu_T</name><index pos:start="4951:45" pos:end="4951:47">[<expr pos:start="4951:46" pos:end="4951:46"><literal type="number" pos:start="4951:46" pos:end="4951:46">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4951:50" pos:end="4951:57"><expr pos:start="4951:50" pos:end="4951:57"><name pos:start="4951:50" pos:end="4951:57"><name pos:start="4951:50" pos:end="4951:54">cpu_T</name><index pos:start="4951:55" pos:end="4951:57">[<expr pos:start="4951:56" pos:end="4951:56"><literal type="number" pos:start="4951:56" pos:end="4951:56">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4953:13" pos:end="4953:43"><expr pos:start="4953:13" pos:end="4953:42"><call pos:start="4953:13" pos:end="4953:42"><name pos:start="4953:13" pos:end="4953:27">tcg_gen_movi_tl</name><argument_list pos:start="4953:28" pos:end="4953:42">(<argument pos:start="4953:29" pos:end="4953:38"><expr pos:start="4953:29" pos:end="4953:38"><name pos:start="4953:29" pos:end="4953:38">cpu_cc_dst</name></expr></argument>, <argument pos:start="4953:41" pos:end="4953:41"><expr pos:start="4953:41" pos:end="4953:41"><literal type="number" pos:start="4953:41" pos:end="4953:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="4955:13" pos:end="4955:18">break;</break>

        <case pos:start="4957:9" pos:end="4957:15">case <expr pos:start="4957:14" pos:end="4957:14"><literal type="number" pos:start="4957:14" pos:end="4957:14">1</literal></expr>:</case>

            <expr_stmt pos:start="4959:13" pos:end="4959:57"><expr pos:start="4959:13" pos:end="4959:56"><call pos:start="4959:13" pos:end="4959:56"><name pos:start="4959:13" pos:end="4959:26">tcg_gen_shr_tl</name><argument_list pos:start="4959:27" pos:end="4959:56">(<argument pos:start="4959:28" pos:end="4959:35"><expr pos:start="4959:28" pos:end="4959:35"><name pos:start="4959:28" pos:end="4959:35">cpu_tmp4</name></expr></argument>, <argument pos:start="4959:38" pos:end="4959:45"><expr pos:start="4959:38" pos:end="4959:45"><name pos:start="4959:38" pos:end="4959:45"><name pos:start="4959:38" pos:end="4959:42">cpu_T</name><index pos:start="4959:43" pos:end="4959:45">[<expr pos:start="4959:44" pos:end="4959:44"><literal type="number" pos:start="4959:44" pos:end="4959:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4959:48" pos:end="4959:55"><expr pos:start="4959:48" pos:end="4959:55"><name pos:start="4959:48" pos:end="4959:55"><name pos:start="4959:48" pos:end="4959:52">cpu_T</name><index pos:start="4959:53" pos:end="4959:55">[<expr pos:start="4959:54" pos:end="4959:54"><literal type="number" pos:start="4959:54" pos:end="4959:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4961:13" pos:end="4961:41"><expr pos:start="4961:13" pos:end="4961:40"><call pos:start="4961:13" pos:end="4961:40"><name pos:start="4961:13" pos:end="4961:27">tcg_gen_movi_tl</name><argument_list pos:start="4961:28" pos:end="4961:40">(<argument pos:start="4961:29" pos:end="4961:36"><expr pos:start="4961:29" pos:end="4961:36"><name pos:start="4961:29" pos:end="4961:36">cpu_tmp0</name></expr></argument>, <argument pos:start="4961:39" pos:end="4961:39"><expr pos:start="4961:39" pos:end="4961:39"><literal type="number" pos:start="4961:39" pos:end="4961:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4963:13" pos:end="4963:57"><expr pos:start="4963:13" pos:end="4963:56"><call pos:start="4963:13" pos:end="4963:56"><name pos:start="4963:13" pos:end="4963:26">tcg_gen_shl_tl</name><argument_list pos:start="4963:27" pos:end="4963:56">(<argument pos:start="4963:28" pos:end="4963:35"><expr pos:start="4963:28" pos:end="4963:35"><name pos:start="4963:28" pos:end="4963:35">cpu_tmp0</name></expr></argument>, <argument pos:start="4963:38" pos:end="4963:45"><expr pos:start="4963:38" pos:end="4963:45"><name pos:start="4963:38" pos:end="4963:45">cpu_tmp0</name></expr></argument>, <argument pos:start="4963:48" pos:end="4963:55"><expr pos:start="4963:48" pos:end="4963:55"><name pos:start="4963:48" pos:end="4963:55"><name pos:start="4963:48" pos:end="4963:52">cpu_T</name><index pos:start="4963:53" pos:end="4963:55">[<expr pos:start="4963:54" pos:end="4963:54"><literal type="number" pos:start="4963:54" pos:end="4963:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4965:13" pos:end="4965:56"><expr pos:start="4965:13" pos:end="4965:55"><call pos:start="4965:13" pos:end="4965:55"><name pos:start="4965:13" pos:end="4965:25">tcg_gen_or_tl</name><argument_list pos:start="4965:26" pos:end="4965:55">(<argument pos:start="4965:27" pos:end="4965:34"><expr pos:start="4965:27" pos:end="4965:34"><name pos:start="4965:27" pos:end="4965:34"><name pos:start="4965:27" pos:end="4965:31">cpu_T</name><index pos:start="4965:32" pos:end="4965:34">[<expr pos:start="4965:33" pos:end="4965:33"><literal type="number" pos:start="4965:33" pos:end="4965:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4965:37" pos:end="4965:44"><expr pos:start="4965:37" pos:end="4965:44"><name pos:start="4965:37" pos:end="4965:44"><name pos:start="4965:37" pos:end="4965:41">cpu_T</name><index pos:start="4965:42" pos:end="4965:44">[<expr pos:start="4965:43" pos:end="4965:43"><literal type="number" pos:start="4965:43" pos:end="4965:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4965:47" pos:end="4965:54"><expr pos:start="4965:47" pos:end="4965:54"><name pos:start="4965:47" pos:end="4965:54">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="4967:13" pos:end="4967:18">break;</break>

        <case pos:start="4969:9" pos:end="4969:15">case <expr pos:start="4969:14" pos:end="4969:14"><literal type="number" pos:start="4969:14" pos:end="4969:14">2</literal></expr>:</case>

            <expr_stmt pos:start="4971:13" pos:end="4971:57"><expr pos:start="4971:13" pos:end="4971:56"><call pos:start="4971:13" pos:end="4971:56"><name pos:start="4971:13" pos:end="4971:26">tcg_gen_shr_tl</name><argument_list pos:start="4971:27" pos:end="4971:56">(<argument pos:start="4971:28" pos:end="4971:35"><expr pos:start="4971:28" pos:end="4971:35"><name pos:start="4971:28" pos:end="4971:35">cpu_tmp4</name></expr></argument>, <argument pos:start="4971:38" pos:end="4971:45"><expr pos:start="4971:38" pos:end="4971:45"><name pos:start="4971:38" pos:end="4971:45"><name pos:start="4971:38" pos:end="4971:42">cpu_T</name><index pos:start="4971:43" pos:end="4971:45">[<expr pos:start="4971:44" pos:end="4971:44"><literal type="number" pos:start="4971:44" pos:end="4971:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4971:48" pos:end="4971:55"><expr pos:start="4971:48" pos:end="4971:55"><name pos:start="4971:48" pos:end="4971:55"><name pos:start="4971:48" pos:end="4971:52">cpu_T</name><index pos:start="4971:53" pos:end="4971:55">[<expr pos:start="4971:54" pos:end="4971:54"><literal type="number" pos:start="4971:54" pos:end="4971:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4973:13" pos:end="4973:41"><expr pos:start="4973:13" pos:end="4973:40"><call pos:start="4973:13" pos:end="4973:40"><name pos:start="4973:13" pos:end="4973:27">tcg_gen_movi_tl</name><argument_list pos:start="4973:28" pos:end="4973:40">(<argument pos:start="4973:29" pos:end="4973:36"><expr pos:start="4973:29" pos:end="4973:36"><name pos:start="4973:29" pos:end="4973:36">cpu_tmp0</name></expr></argument>, <argument pos:start="4973:39" pos:end="4973:39"><expr pos:start="4973:39" pos:end="4973:39"><literal type="number" pos:start="4973:39" pos:end="4973:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4975:13" pos:end="4975:57"><expr pos:start="4975:13" pos:end="4975:56"><call pos:start="4975:13" pos:end="4975:56"><name pos:start="4975:13" pos:end="4975:26">tcg_gen_shl_tl</name><argument_list pos:start="4975:27" pos:end="4975:56">(<argument pos:start="4975:28" pos:end="4975:35"><expr pos:start="4975:28" pos:end="4975:35"><name pos:start="4975:28" pos:end="4975:35">cpu_tmp0</name></expr></argument>, <argument pos:start="4975:38" pos:end="4975:45"><expr pos:start="4975:38" pos:end="4975:45"><name pos:start="4975:38" pos:end="4975:45">cpu_tmp0</name></expr></argument>, <argument pos:start="4975:48" pos:end="4975:55"><expr pos:start="4975:48" pos:end="4975:55"><name pos:start="4975:48" pos:end="4975:55"><name pos:start="4975:48" pos:end="4975:52">cpu_T</name><index pos:start="4975:53" pos:end="4975:55">[<expr pos:start="4975:54" pos:end="4975:54"><literal type="number" pos:start="4975:54" pos:end="4975:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4977:13" pos:end="4977:47"><expr pos:start="4977:13" pos:end="4977:46"><call pos:start="4977:13" pos:end="4977:46"><name pos:start="4977:13" pos:end="4977:26">tcg_gen_not_tl</name><argument_list pos:start="4977:27" pos:end="4977:46">(<argument pos:start="4977:28" pos:end="4977:35"><expr pos:start="4977:28" pos:end="4977:35"><name pos:start="4977:28" pos:end="4977:35">cpu_tmp0</name></expr></argument>, <argument pos:start="4977:38" pos:end="4977:45"><expr pos:start="4977:38" pos:end="4977:45"><name pos:start="4977:38" pos:end="4977:45">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4979:13" pos:end="4979:57"><expr pos:start="4979:13" pos:end="4979:56"><call pos:start="4979:13" pos:end="4979:56"><name pos:start="4979:13" pos:end="4979:26">tcg_gen_and_tl</name><argument_list pos:start="4979:27" pos:end="4979:56">(<argument pos:start="4979:28" pos:end="4979:35"><expr pos:start="4979:28" pos:end="4979:35"><name pos:start="4979:28" pos:end="4979:35"><name pos:start="4979:28" pos:end="4979:32">cpu_T</name><index pos:start="4979:33" pos:end="4979:35">[<expr pos:start="4979:34" pos:end="4979:34"><literal type="number" pos:start="4979:34" pos:end="4979:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4979:38" pos:end="4979:45"><expr pos:start="4979:38" pos:end="4979:45"><name pos:start="4979:38" pos:end="4979:45"><name pos:start="4979:38" pos:end="4979:42">cpu_T</name><index pos:start="4979:43" pos:end="4979:45">[<expr pos:start="4979:44" pos:end="4979:44"><literal type="number" pos:start="4979:44" pos:end="4979:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4979:48" pos:end="4979:55"><expr pos:start="4979:48" pos:end="4979:55"><name pos:start="4979:48" pos:end="4979:55">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="4981:13" pos:end="4981:18">break;</break>

        <default pos:start="4983:9" pos:end="4983:16">default:</default>

        <case pos:start="4985:9" pos:end="4985:15">case <expr pos:start="4985:14" pos:end="4985:14"><literal type="number" pos:start="4985:14" pos:end="4985:14">3</literal></expr>:</case>

            <expr_stmt pos:start="4987:13" pos:end="4987:57"><expr pos:start="4987:13" pos:end="4987:56"><call pos:start="4987:13" pos:end="4987:56"><name pos:start="4987:13" pos:end="4987:26">tcg_gen_shr_tl</name><argument_list pos:start="4987:27" pos:end="4987:56">(<argument pos:start="4987:28" pos:end="4987:35"><expr pos:start="4987:28" pos:end="4987:35"><name pos:start="4987:28" pos:end="4987:35">cpu_tmp4</name></expr></argument>, <argument pos:start="4987:38" pos:end="4987:45"><expr pos:start="4987:38" pos:end="4987:45"><name pos:start="4987:38" pos:end="4987:45"><name pos:start="4987:38" pos:end="4987:42">cpu_T</name><index pos:start="4987:43" pos:end="4987:45">[<expr pos:start="4987:44" pos:end="4987:44"><literal type="number" pos:start="4987:44" pos:end="4987:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4987:48" pos:end="4987:55"><expr pos:start="4987:48" pos:end="4987:55"><name pos:start="4987:48" pos:end="4987:55"><name pos:start="4987:48" pos:end="4987:52">cpu_T</name><index pos:start="4987:53" pos:end="4987:55">[<expr pos:start="4987:54" pos:end="4987:54"><literal type="number" pos:start="4987:54" pos:end="4987:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4989:13" pos:end="4989:41"><expr pos:start="4989:13" pos:end="4989:40"><call pos:start="4989:13" pos:end="4989:40"><name pos:start="4989:13" pos:end="4989:27">tcg_gen_movi_tl</name><argument_list pos:start="4989:28" pos:end="4989:40">(<argument pos:start="4989:29" pos:end="4989:36"><expr pos:start="4989:29" pos:end="4989:36"><name pos:start="4989:29" pos:end="4989:36">cpu_tmp0</name></expr></argument>, <argument pos:start="4989:39" pos:end="4989:39"><expr pos:start="4989:39" pos:end="4989:39"><literal type="number" pos:start="4989:39" pos:end="4989:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4991:13" pos:end="4991:57"><expr pos:start="4991:13" pos:end="4991:56"><call pos:start="4991:13" pos:end="4991:56"><name pos:start="4991:13" pos:end="4991:26">tcg_gen_shl_tl</name><argument_list pos:start="4991:27" pos:end="4991:56">(<argument pos:start="4991:28" pos:end="4991:35"><expr pos:start="4991:28" pos:end="4991:35"><name pos:start="4991:28" pos:end="4991:35">cpu_tmp0</name></expr></argument>, <argument pos:start="4991:38" pos:end="4991:45"><expr pos:start="4991:38" pos:end="4991:45"><name pos:start="4991:38" pos:end="4991:45">cpu_tmp0</name></expr></argument>, <argument pos:start="4991:48" pos:end="4991:55"><expr pos:start="4991:48" pos:end="4991:55"><name pos:start="4991:48" pos:end="4991:55"><name pos:start="4991:48" pos:end="4991:52">cpu_T</name><index pos:start="4991:53" pos:end="4991:55">[<expr pos:start="4991:54" pos:end="4991:54"><literal type="number" pos:start="4991:54" pos:end="4991:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4993:13" pos:end="4993:57"><expr pos:start="4993:13" pos:end="4993:56"><call pos:start="4993:13" pos:end="4993:56"><name pos:start="4993:13" pos:end="4993:26">tcg_gen_xor_tl</name><argument_list pos:start="4993:27" pos:end="4993:56">(<argument pos:start="4993:28" pos:end="4993:35"><expr pos:start="4993:28" pos:end="4993:35"><name pos:start="4993:28" pos:end="4993:35"><name pos:start="4993:28" pos:end="4993:32">cpu_T</name><index pos:start="4993:33" pos:end="4993:35">[<expr pos:start="4993:34" pos:end="4993:34"><literal type="number" pos:start="4993:34" pos:end="4993:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4993:38" pos:end="4993:45"><expr pos:start="4993:38" pos:end="4993:45"><name pos:start="4993:38" pos:end="4993:45"><name pos:start="4993:38" pos:end="4993:42">cpu_T</name><index pos:start="4993:43" pos:end="4993:45">[<expr pos:start="4993:44" pos:end="4993:44"><literal type="number" pos:start="4993:44" pos:end="4993:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4993:48" pos:end="4993:55"><expr pos:start="4993:48" pos:end="4993:55"><name pos:start="4993:48" pos:end="4993:55">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="4995:13" pos:end="4995:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="4999:9" pos:end="4999:35"><expr pos:start="4999:9" pos:end="4999:34"><name pos:start="4999:9" pos:end="4999:16"><name pos:start="4999:9" pos:end="4999:9">s</name><operator pos:start="4999:10" pos:end="4999:11">-&gt;</operator><name pos:start="4999:12" pos:end="4999:16">cc_op</name></name> <operator pos:start="4999:18" pos:end="4999:18">=</operator> <name pos:start="4999:20" pos:end="4999:29">CC_OP_SARB</name> <operator pos:start="4999:31" pos:end="4999:31">+</operator> <name pos:start="4999:33" pos:end="4999:34">ot</name></expr>;</expr_stmt>

        <if_stmt pos:start="5001:9" pos:end="5015:9"><if pos:start="5001:9" pos:end="5015:9">if <condition pos:start="5001:12" pos:end="5001:20">(<expr pos:start="5001:13" pos:end="5001:19"><name pos:start="5001:13" pos:end="5001:14">op</name> <operator pos:start="5001:16" pos:end="5001:17">!=</operator> <literal type="number" pos:start="5001:19" pos:end="5001:19">0</literal></expr>)</condition> <block pos:start="5001:22" pos:end="5015:9">{<block_content pos:start="5003:13" pos:end="5013:43">

            <if_stmt pos:start="5003:13" pos:end="5009:42"><if pos:start="5003:13" pos:end="5005:51">if <condition pos:start="5003:16" pos:end="5003:25">(<expr pos:start="5003:17" pos:end="5003:24"><name pos:start="5003:17" pos:end="5003:19">mod</name> <operator pos:start="5003:21" pos:end="5003:22">!=</operator> <literal type="number" pos:start="5003:24" pos:end="5003:24">3</literal></expr>)</condition><block type="pseudo" pos:start="5005:17" pos:end="5005:51"><block_content pos:start="5005:17" pos:end="5005:51">

                <expr_stmt pos:start="5005:17" pos:end="5005:51"><expr pos:start="5005:17" pos:end="5005:50"><call pos:start="5005:17" pos:end="5005:50"><name pos:start="5005:17" pos:end="5005:31">gen_op_st_T0_A0</name><argument_list pos:start="5005:32" pos:end="5005:50">(<argument pos:start="5005:33" pos:end="5005:49"><expr pos:start="5005:33" pos:end="5005:49"><name pos:start="5005:33" pos:end="5005:34">ot</name> <operator pos:start="5005:36" pos:end="5005:36">+</operator> <name pos:start="5005:38" pos:end="5005:49"><name pos:start="5005:38" pos:end="5005:38">s</name><operator pos:start="5005:39" pos:end="5005:40">-&gt;</operator><name pos:start="5005:41" pos:end="5005:49">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="5007:13" pos:end="5009:42">else<block type="pseudo" pos:start="5009:17" pos:end="5009:42"><block_content pos:start="5009:17" pos:end="5009:42">

                <expr_stmt pos:start="5009:17" pos:end="5009:42"><expr pos:start="5009:17" pos:end="5009:41"><call pos:start="5009:17" pos:end="5009:41"><name pos:start="5009:17" pos:end="5009:33">gen_op_mov_reg_T0</name><argument_list pos:start="5009:34" pos:end="5009:41">(<argument pos:start="5009:35" pos:end="5009:36"><expr pos:start="5009:35" pos:end="5009:36"><name pos:start="5009:35" pos:end="5009:36">ot</name></expr></argument>, <argument pos:start="5009:39" pos:end="5009:40"><expr pos:start="5009:39" pos:end="5009:40"><name pos:start="5009:39" pos:end="5009:40">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="5011:13" pos:end="5011:49"><expr pos:start="5011:13" pos:end="5011:48"><call pos:start="5011:13" pos:end="5011:48"><name pos:start="5011:13" pos:end="5011:26">tcg_gen_mov_tl</name><argument_list pos:start="5011:27" pos:end="5011:48">(<argument pos:start="5011:28" pos:end="5011:37"><expr pos:start="5011:28" pos:end="5011:37"><name pos:start="5011:28" pos:end="5011:37">cpu_cc_src</name></expr></argument>, <argument pos:start="5011:40" pos:end="5011:47"><expr pos:start="5011:40" pos:end="5011:47"><name pos:start="5011:40" pos:end="5011:47">cpu_tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5013:13" pos:end="5013:43"><expr pos:start="5013:13" pos:end="5013:42"><call pos:start="5013:13" pos:end="5013:42"><name pos:start="5013:13" pos:end="5013:27">tcg_gen_movi_tl</name><argument_list pos:start="5013:28" pos:end="5013:42">(<argument pos:start="5013:29" pos:end="5013:38"><expr pos:start="5013:29" pos:end="5013:38"><name pos:start="5013:29" pos:end="5013:38">cpu_cc_dst</name></expr></argument>, <argument pos:start="5013:41" pos:end="5013:41"><expr pos:start="5013:41" pos:end="5013:41"><literal type="number" pos:start="5013:41" pos:end="5013:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="5017:9" pos:end="5017:14">break;</break>

    <case pos:start="5019:5" pos:end="5019:15">case <expr pos:start="5019:10" pos:end="5019:14"><literal type="number" pos:start="5019:10" pos:end="5019:14">0x1bc</literal></expr>:</case> <comment type="block" pos:start="5019:17" pos:end="5019:25">/* bsf */</comment>

    <case pos:start="5021:5" pos:end="5021:15">case <expr pos:start="5021:10" pos:end="5021:14"><literal type="number" pos:start="5021:10" pos:end="5021:14">0x1bd</literal></expr>:</case> <comment type="block" pos:start="5021:17" pos:end="5021:25">/* bsr */</comment>

        <block pos:start="5023:9" pos:end="5099:9">{<block_content pos:start="5025:13" pos:end="5097:30">

            <decl_stmt pos:start="5025:13" pos:end="5025:23"><decl pos:start="5025:13" pos:end="5025:22"><type pos:start="5025:13" pos:end="5025:15"><name pos:start="5025:13" pos:end="5025:15">int</name></type> <name pos:start="5025:17" pos:end="5025:22">label1</name></decl>;</decl_stmt>

            <decl_stmt pos:start="5027:13" pos:end="5027:20"><decl pos:start="5027:13" pos:end="5027:19"><type pos:start="5027:13" pos:end="5027:16"><name pos:start="5027:13" pos:end="5027:16">TCGv</name></type> <name pos:start="5027:18" pos:end="5027:19">t0</name></decl>;</decl_stmt>



            <expr_stmt pos:start="5031:13" pos:end="5031:33"><expr pos:start="5031:13" pos:end="5031:32"><name pos:start="5031:13" pos:end="5031:14">ot</name> <operator pos:start="5031:16" pos:end="5031:16">=</operator> <name pos:start="5031:18" pos:end="5031:22">dflag</name> <operator pos:start="5031:24" pos:end="5031:24">+</operator> <name pos:start="5031:26" pos:end="5031:32">OT_WORD</name></expr>;</expr_stmt>

            <expr_stmt pos:start="5033:13" pos:end="5033:48"><expr pos:start="5033:13" pos:end="5033:47"><name pos:start="5033:13" pos:end="5033:17">modrm</name> <operator pos:start="5033:19" pos:end="5033:19">=</operator> <call pos:start="5033:21" pos:end="5033:47"><name pos:start="5033:21" pos:end="5033:33">cpu_ldub_code</name><argument_list pos:start="5033:34" pos:end="5033:47">(<argument pos:start="5033:35" pos:end="5033:37"><expr pos:start="5033:35" pos:end="5033:37"><name pos:start="5033:35" pos:end="5033:37">env</name></expr></argument>, <argument pos:start="5033:40" pos:end="5033:46"><expr pos:start="5033:40" pos:end="5033:46"><name pos:start="5033:40" pos:end="5033:44"><name pos:start="5033:40" pos:end="5033:40">s</name><operator pos:start="5033:41" pos:end="5033:42">-&gt;</operator><name pos:start="5033:43" pos:end="5033:44">pc</name></name><operator pos:start="5033:45" pos:end="5033:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5035:13" pos:end="5035:45"><expr pos:start="5035:13" pos:end="5035:44"><name pos:start="5035:13" pos:end="5035:15">reg</name> <operator pos:start="5035:17" pos:end="5035:17">=</operator> <operator pos:start="5035:19" pos:end="5035:19">(</operator><operator pos:start="5035:20" pos:end="5035:20">(</operator><name pos:start="5035:21" pos:end="5035:25">modrm</name> <operator pos:start="5035:27" pos:end="5035:28">&gt;&gt;</operator> <literal type="number" pos:start="5035:30" pos:end="5035:30">3</literal><operator pos:start="5035:31" pos:end="5035:31">)</operator> <operator pos:start="5035:33" pos:end="5035:33">&amp;</operator> <literal type="number" pos:start="5035:35" pos:end="5035:35">7</literal><operator pos:start="5035:36" pos:end="5035:36">)</operator> <operator pos:start="5035:38" pos:end="5035:38">|</operator> <name pos:start="5035:40" pos:end="5035:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="5037:13" pos:end="5037:57"><expr pos:start="5037:13" pos:end="5037:56"><call pos:start="5037:13" pos:end="5037:56"><name pos:start="5037:13" pos:end="5037:26">gen_ldst_modrm</name><argument_list pos:start="5037:27" pos:end="5037:56">(<argument pos:start="5037:28" pos:end="5037:30"><expr pos:start="5037:28" pos:end="5037:30"><name pos:start="5037:28" pos:end="5037:30">env</name></expr></argument>, <argument pos:start="5037:33" pos:end="5037:33"><expr pos:start="5037:33" pos:end="5037:33"><name pos:start="5037:33" pos:end="5037:33">s</name></expr></argument>,<argument pos:start="5037:35" pos:end="5037:39"><expr pos:start="5037:35" pos:end="5037:39"><name pos:start="5037:35" pos:end="5037:39">modrm</name></expr></argument>, <argument pos:start="5037:42" pos:end="5037:43"><expr pos:start="5037:42" pos:end="5037:43"><name pos:start="5037:42" pos:end="5037:43">ot</name></expr></argument>, <argument pos:start="5037:46" pos:end="5037:52"><expr pos:start="5037:46" pos:end="5037:52"><name pos:start="5037:46" pos:end="5037:52">OR_TMP0</name></expr></argument>, <argument pos:start="5037:55" pos:end="5037:55"><expr pos:start="5037:55" pos:end="5037:55"><literal type="number" pos:start="5037:55" pos:end="5037:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5039:13" pos:end="5039:35"><expr pos:start="5039:13" pos:end="5039:34"><call pos:start="5039:13" pos:end="5039:34"><name pos:start="5039:13" pos:end="5039:20">gen_extu</name><argument_list pos:start="5039:21" pos:end="5039:34">(<argument pos:start="5039:22" pos:end="5039:23"><expr pos:start="5039:22" pos:end="5039:23"><name pos:start="5039:22" pos:end="5039:23">ot</name></expr></argument>, <argument pos:start="5039:26" pos:end="5039:33"><expr pos:start="5039:26" pos:end="5039:33"><name pos:start="5039:26" pos:end="5039:33"><name pos:start="5039:26" pos:end="5039:30">cpu_T</name><index pos:start="5039:31" pos:end="5039:33">[<expr pos:start="5039:32" pos:end="5039:32"><literal type="number" pos:start="5039:32" pos:end="5039:32">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5041:13" pos:end="5041:38"><expr pos:start="5041:13" pos:end="5041:37"><name pos:start="5041:13" pos:end="5041:14">t0</name> <operator pos:start="5041:16" pos:end="5041:16">=</operator> <call pos:start="5041:18" pos:end="5041:37"><name pos:start="5041:18" pos:end="5041:35">tcg_temp_local_new</name><argument_list pos:start="5041:36" pos:end="5041:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5043:13" pos:end="5043:41"><expr pos:start="5043:13" pos:end="5043:40"><call pos:start="5043:13" pos:end="5043:40"><name pos:start="5043:13" pos:end="5043:26">tcg_gen_mov_tl</name><argument_list pos:start="5043:27" pos:end="5043:40">(<argument pos:start="5043:28" pos:end="5043:29"><expr pos:start="5043:28" pos:end="5043:29"><name pos:start="5043:28" pos:end="5043:29">t0</name></expr></argument>, <argument pos:start="5043:32" pos:end="5043:39"><expr pos:start="5043:32" pos:end="5043:39"><name pos:start="5043:32" pos:end="5043:39"><name pos:start="5043:32" pos:end="5043:36">cpu_T</name><index pos:start="5043:37" pos:end="5043:39">[<expr pos:start="5043:38" pos:end="5043:38"><literal type="number" pos:start="5043:38" pos:end="5043:38">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5045:13" pos:end="5095:13"><if pos:start="5045:13" pos:end="5067:13">if <condition pos:start="5045:16" pos:end="5047:58">(<expr pos:start="5045:17" pos:end="5047:57"><operator pos:start="5045:17" pos:end="5045:17">(</operator><name pos:start="5045:18" pos:end="5045:18">b</name> <operator pos:start="5045:20" pos:end="5045:20">&amp;</operator> <literal type="number" pos:start="5045:22" pos:end="5045:22">1</literal><operator pos:start="5045:23" pos:end="5045:23">)</operator> <operator pos:start="5045:25" pos:end="5045:26">&amp;&amp;</operator> <operator pos:start="5045:28" pos:end="5045:28">(</operator><name pos:start="5045:29" pos:end="5045:36">prefixes</name> <operator pos:start="5045:38" pos:end="5045:38">&amp;</operator> <name pos:start="5045:40" pos:end="5045:50">PREFIX_REPZ</name><operator pos:start="5045:51" pos:end="5045:51">)</operator> <operator pos:start="5045:53" pos:end="5045:54">&amp;&amp;</operator>

                <operator pos:start="5047:17" pos:end="5047:17">(</operator><name pos:start="5047:18" pos:end="5047:39"><name pos:start="5047:18" pos:end="5047:18">s</name><operator pos:start="5047:19" pos:end="5047:20">-&gt;</operator><name pos:start="5047:21" pos:end="5047:39">cpuid_ext3_features</name></name> <operator pos:start="5047:41" pos:end="5047:41">&amp;</operator> <name pos:start="5047:43" pos:end="5047:56">CPUID_EXT3_ABM</name><operator pos:start="5047:57" pos:end="5047:57">)</operator></expr>)</condition> <block pos:start="5047:60" pos:end="5067:13">{<block_content pos:start="5049:17" pos:end="5065:43">

                <switch pos:start="5049:17" pos:end="5063:17">switch<condition pos:start="5049:23" pos:end="5049:26">(<expr pos:start="5049:24" pos:end="5049:25"><name pos:start="5049:24" pos:end="5049:25">ot</name></expr>)</condition> <block pos:start="5049:28" pos:end="5063:17">{<block_content pos:start="5051:17" pos:end="5061:46">

                <case pos:start="5051:17" pos:end="5051:29">case <expr pos:start="5051:22" pos:end="5051:28"><name pos:start="5051:22" pos:end="5051:28">OT_WORD</name></expr>:</case> <expr_stmt pos:start="5051:31" pos:end="5053:39"><expr pos:start="5051:31" pos:end="5053:38"><call pos:start="5051:31" pos:end="5053:38"><name pos:start="5051:31" pos:end="5051:46">gen_helper_lzcnt</name><argument_list pos:start="5051:47" pos:end="5053:38">(<argument pos:start="5051:48" pos:end="5051:55"><expr pos:start="5051:48" pos:end="5051:55"><name pos:start="5051:48" pos:end="5051:55"><name pos:start="5051:48" pos:end="5051:52">cpu_T</name><index pos:start="5051:53" pos:end="5051:55">[<expr pos:start="5051:54" pos:end="5051:54"><literal type="number" pos:start="5051:54" pos:end="5051:54">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5051:58" pos:end="5051:59"><expr pos:start="5051:58" pos:end="5051:59"><name pos:start="5051:58" pos:end="5051:59">t0</name></expr></argument>,

                    <argument pos:start="5053:21" pos:end="5053:37"><expr pos:start="5053:21" pos:end="5053:37"><call pos:start="5053:21" pos:end="5053:37"><name pos:start="5053:21" pos:end="5053:33">tcg_const_i32</name><argument_list pos:start="5053:34" pos:end="5053:37">(<argument pos:start="5053:35" pos:end="5053:36"><expr pos:start="5053:35" pos:end="5053:36"><literal type="number" pos:start="5053:35" pos:end="5053:36">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="5053:41" pos:end="5053:46">break;</break>

                <case pos:start="5055:17" pos:end="5055:29">case <expr pos:start="5055:22" pos:end="5055:28"><name pos:start="5055:22" pos:end="5055:28">OT_LONG</name></expr>:</case> <expr_stmt pos:start="5055:31" pos:end="5057:39"><expr pos:start="5055:31" pos:end="5057:38"><call pos:start="5055:31" pos:end="5057:38"><name pos:start="5055:31" pos:end="5055:46">gen_helper_lzcnt</name><argument_list pos:start="5055:47" pos:end="5057:38">(<argument pos:start="5055:48" pos:end="5055:55"><expr pos:start="5055:48" pos:end="5055:55"><name pos:start="5055:48" pos:end="5055:55"><name pos:start="5055:48" pos:end="5055:52">cpu_T</name><index pos:start="5055:53" pos:end="5055:55">[<expr pos:start="5055:54" pos:end="5055:54"><literal type="number" pos:start="5055:54" pos:end="5055:54">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5055:58" pos:end="5055:59"><expr pos:start="5055:58" pos:end="5055:59"><name pos:start="5055:58" pos:end="5055:59">t0</name></expr></argument>,

                    <argument pos:start="5057:21" pos:end="5057:37"><expr pos:start="5057:21" pos:end="5057:37"><call pos:start="5057:21" pos:end="5057:37"><name pos:start="5057:21" pos:end="5057:33">tcg_const_i32</name><argument_list pos:start="5057:34" pos:end="5057:37">(<argument pos:start="5057:35" pos:end="5057:36"><expr pos:start="5057:35" pos:end="5057:36"><literal type="number" pos:start="5057:35" pos:end="5057:36">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="5057:41" pos:end="5057:46">break;</break>

                <case pos:start="5059:17" pos:end="5059:29">case <expr pos:start="5059:22" pos:end="5059:28"><name pos:start="5059:22" pos:end="5059:28">OT_QUAD</name></expr>:</case> <expr_stmt pos:start="5059:31" pos:end="5061:39"><expr pos:start="5059:31" pos:end="5061:38"><call pos:start="5059:31" pos:end="5061:38"><name pos:start="5059:31" pos:end="5059:46">gen_helper_lzcnt</name><argument_list pos:start="5059:47" pos:end="5061:38">(<argument pos:start="5059:48" pos:end="5059:55"><expr pos:start="5059:48" pos:end="5059:55"><name pos:start="5059:48" pos:end="5059:55"><name pos:start="5059:48" pos:end="5059:52">cpu_T</name><index pos:start="5059:53" pos:end="5059:55">[<expr pos:start="5059:54" pos:end="5059:54"><literal type="number" pos:start="5059:54" pos:end="5059:54">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5059:58" pos:end="5059:59"><expr pos:start="5059:58" pos:end="5059:59"><name pos:start="5059:58" pos:end="5059:59">t0</name></expr></argument>,

                    <argument pos:start="5061:21" pos:end="5061:37"><expr pos:start="5061:21" pos:end="5061:37"><call pos:start="5061:21" pos:end="5061:37"><name pos:start="5061:21" pos:end="5061:33">tcg_const_i32</name><argument_list pos:start="5061:34" pos:end="5061:37">(<argument pos:start="5061:35" pos:end="5061:36"><expr pos:start="5061:35" pos:end="5061:36"><literal type="number" pos:start="5061:35" pos:end="5061:36">64</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="5061:41" pos:end="5061:46">break;</break>

                </block_content>}</block></switch>

                <expr_stmt pos:start="5065:17" pos:end="5065:43"><expr pos:start="5065:17" pos:end="5065:42"><call pos:start="5065:17" pos:end="5065:42"><name pos:start="5065:17" pos:end="5065:33">gen_op_mov_reg_T0</name><argument_list pos:start="5065:34" pos:end="5065:42">(<argument pos:start="5065:35" pos:end="5065:36"><expr pos:start="5065:35" pos:end="5065:36"><name pos:start="5065:35" pos:end="5065:36">ot</name></expr></argument>, <argument pos:start="5065:39" pos:end="5065:41"><expr pos:start="5065:39" pos:end="5065:41"><name pos:start="5065:39" pos:end="5065:41">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5067:15" pos:end="5095:13">else <block pos:start="5067:20" pos:end="5095:13">{<block_content pos:start="5069:17" pos:end="5093:45">

                <expr_stmt pos:start="5069:17" pos:end="5069:41"><expr pos:start="5069:17" pos:end="5069:40"><name pos:start="5069:17" pos:end="5069:22">label1</name> <operator pos:start="5069:24" pos:end="5069:24">=</operator> <call pos:start="5069:26" pos:end="5069:40"><name pos:start="5069:26" pos:end="5069:38">gen_new_label</name><argument_list pos:start="5069:39" pos:end="5069:40">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5071:17" pos:end="5071:47"><expr pos:start="5071:17" pos:end="5071:46"><call pos:start="5071:17" pos:end="5071:46"><name pos:start="5071:17" pos:end="5071:31">tcg_gen_movi_tl</name><argument_list pos:start="5071:32" pos:end="5071:46">(<argument pos:start="5071:33" pos:end="5071:42"><expr pos:start="5071:33" pos:end="5071:42"><name pos:start="5071:33" pos:end="5071:42">cpu_cc_dst</name></expr></argument>, <argument pos:start="5071:45" pos:end="5071:45"><expr pos:start="5071:45" pos:end="5071:45"><literal type="number" pos:start="5071:45" pos:end="5071:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5073:17" pos:end="5073:63"><expr pos:start="5073:17" pos:end="5073:62"><call pos:start="5073:17" pos:end="5073:62"><name pos:start="5073:17" pos:end="5073:34">tcg_gen_brcondi_tl</name><argument_list pos:start="5073:35" pos:end="5073:62">(<argument pos:start="5073:36" pos:end="5073:46"><expr pos:start="5073:36" pos:end="5073:46"><name pos:start="5073:36" pos:end="5073:46">TCG_COND_EQ</name></expr></argument>, <argument pos:start="5073:49" pos:end="5073:50"><expr pos:start="5073:49" pos:end="5073:50"><name pos:start="5073:49" pos:end="5073:50">t0</name></expr></argument>, <argument pos:start="5073:53" pos:end="5073:53"><expr pos:start="5073:53" pos:end="5073:53"><literal type="number" pos:start="5073:53" pos:end="5073:53">0</literal></expr></argument>, <argument pos:start="5073:56" pos:end="5073:61"><expr pos:start="5073:56" pos:end="5073:61"><name pos:start="5073:56" pos:end="5073:61">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="5075:17" pos:end="5083:17"><if pos:start="5075:17" pos:end="5079:17">if <condition pos:start="5075:20" pos:end="5075:26">(<expr pos:start="5075:21" pos:end="5075:25"><name pos:start="5075:21" pos:end="5075:21">b</name> <operator pos:start="5075:23" pos:end="5075:23">&amp;</operator> <literal type="number" pos:start="5075:25" pos:end="5075:25">1</literal></expr>)</condition> <block pos:start="5075:28" pos:end="5079:17">{<block_content pos:start="5077:21" pos:end="5077:49">

                    <expr_stmt pos:start="5077:21" pos:end="5077:49"><expr pos:start="5077:21" pos:end="5077:48"><call pos:start="5077:21" pos:end="5077:48"><name pos:start="5077:21" pos:end="5077:34">gen_helper_bsr</name><argument_list pos:start="5077:35" pos:end="5077:48">(<argument pos:start="5077:36" pos:end="5077:43"><expr pos:start="5077:36" pos:end="5077:43"><name pos:start="5077:36" pos:end="5077:43"><name pos:start="5077:36" pos:end="5077:40">cpu_T</name><index pos:start="5077:41" pos:end="5077:43">[<expr pos:start="5077:42" pos:end="5077:42"><literal type="number" pos:start="5077:42" pos:end="5077:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5077:46" pos:end="5077:47"><expr pos:start="5077:46" pos:end="5077:47"><name pos:start="5077:46" pos:end="5077:47">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="5079:19" pos:end="5083:17">else <block pos:start="5079:24" pos:end="5083:17">{<block_content pos:start="5081:21" pos:end="5081:49">

                    <expr_stmt pos:start="5081:21" pos:end="5081:49"><expr pos:start="5081:21" pos:end="5081:48"><call pos:start="5081:21" pos:end="5081:48"><name pos:start="5081:21" pos:end="5081:34">gen_helper_bsf</name><argument_list pos:start="5081:35" pos:end="5081:48">(<argument pos:start="5081:36" pos:end="5081:43"><expr pos:start="5081:36" pos:end="5081:43"><name pos:start="5081:36" pos:end="5081:43"><name pos:start="5081:36" pos:end="5081:40">cpu_T</name><index pos:start="5081:41" pos:end="5081:43">[<expr pos:start="5081:42" pos:end="5081:42"><literal type="number" pos:start="5081:42" pos:end="5081:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5081:46" pos:end="5081:47"><expr pos:start="5081:46" pos:end="5081:47"><name pos:start="5081:46" pos:end="5081:47">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="5085:17" pos:end="5085:43"><expr pos:start="5085:17" pos:end="5085:42"><call pos:start="5085:17" pos:end="5085:42"><name pos:start="5085:17" pos:end="5085:33">gen_op_mov_reg_T0</name><argument_list pos:start="5085:34" pos:end="5085:42">(<argument pos:start="5085:35" pos:end="5085:36"><expr pos:start="5085:35" pos:end="5085:36"><name pos:start="5085:35" pos:end="5085:36">ot</name></expr></argument>, <argument pos:start="5085:39" pos:end="5085:41"><expr pos:start="5085:39" pos:end="5085:41"><name pos:start="5085:39" pos:end="5085:41">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5087:17" pos:end="5087:47"><expr pos:start="5087:17" pos:end="5087:46"><call pos:start="5087:17" pos:end="5087:46"><name pos:start="5087:17" pos:end="5087:31">tcg_gen_movi_tl</name><argument_list pos:start="5087:32" pos:end="5087:46">(<argument pos:start="5087:33" pos:end="5087:42"><expr pos:start="5087:33" pos:end="5087:42"><name pos:start="5087:33" pos:end="5087:42">cpu_cc_dst</name></expr></argument>, <argument pos:start="5087:45" pos:end="5087:45"><expr pos:start="5087:45" pos:end="5087:45"><literal type="number" pos:start="5087:45" pos:end="5087:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5089:17" pos:end="5089:38"><expr pos:start="5089:17" pos:end="5089:37"><call pos:start="5089:17" pos:end="5089:37"><name pos:start="5089:17" pos:end="5089:29">gen_set_label</name><argument_list pos:start="5089:30" pos:end="5089:37">(<argument pos:start="5089:31" pos:end="5089:36"><expr pos:start="5089:31" pos:end="5089:36"><name pos:start="5089:31" pos:end="5089:36">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5091:17" pos:end="5091:47"><expr pos:start="5091:17" pos:end="5091:46"><call pos:start="5091:17" pos:end="5091:46"><name pos:start="5091:17" pos:end="5091:34">tcg_gen_discard_tl</name><argument_list pos:start="5091:35" pos:end="5091:46">(<argument pos:start="5091:36" pos:end="5091:45"><expr pos:start="5091:36" pos:end="5091:45"><name pos:start="5091:36" pos:end="5091:45">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5093:17" pos:end="5093:45"><expr pos:start="5093:17" pos:end="5093:44"><name pos:start="5093:17" pos:end="5093:24"><name pos:start="5093:17" pos:end="5093:17">s</name><operator pos:start="5093:18" pos:end="5093:19">-&gt;</operator><name pos:start="5093:20" pos:end="5093:24">cc_op</name></name> <operator pos:start="5093:26" pos:end="5093:26">=</operator> <name pos:start="5093:28" pos:end="5093:39">CC_OP_LOGICB</name> <operator pos:start="5093:41" pos:end="5093:41">+</operator> <name pos:start="5093:43" pos:end="5093:44">ot</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="5097:13" pos:end="5097:30"><expr pos:start="5097:13" pos:end="5097:29"><call pos:start="5097:13" pos:end="5097:29"><name pos:start="5097:13" pos:end="5097:25">tcg_temp_free</name><argument_list pos:start="5097:26" pos:end="5097:29">(<argument pos:start="5097:27" pos:end="5097:28"><expr pos:start="5097:27" pos:end="5097:28"><name pos:start="5097:27" pos:end="5097:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="5101:9" pos:end="5101:14">break;</break>

        <comment type="block" format="doxygen" pos:start="5103:9" pos:end="5103:34">/************************/</comment>

        <comment type="block" pos:start="5105:9" pos:end="5105:17">/* bcd */</comment>

    <case pos:start="5107:5" pos:end="5107:14">case <expr pos:start="5107:10" pos:end="5107:13"><literal type="number" pos:start="5107:10" pos:end="5107:13">0x27</literal></expr>:</case> <comment type="block" pos:start="5107:16" pos:end="5107:24">/* daa */</comment>

        <if_stmt pos:start="5109:9" pos:end="5111:28"><if pos:start="5109:9" pos:end="5111:28">if <condition pos:start="5109:12" pos:end="5109:22">(<expr pos:start="5109:13" pos:end="5109:21"><call pos:start="5109:13" pos:end="5109:21"><name pos:start="5109:13" pos:end="5109:18">CODE64</name><argument_list pos:start="5109:19" pos:end="5109:21">(<argument pos:start="5109:20" pos:end="5109:20"><expr pos:start="5109:20" pos:end="5109:20"><name pos:start="5109:20" pos:end="5109:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5111:13" pos:end="5111:28"><block_content pos:start="5111:13" pos:end="5111:28">

            <goto pos:start="5111:13" pos:end="5111:28">goto <name pos:start="5111:18" pos:end="5111:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5113:9" pos:end="5115:39"><if pos:start="5113:9" pos:end="5115:39">if <condition pos:start="5113:12" pos:end="5113:38">(<expr pos:start="5113:13" pos:end="5113:37"><name pos:start="5113:13" pos:end="5113:20"><name pos:start="5113:13" pos:end="5113:13">s</name><operator pos:start="5113:14" pos:end="5113:15">-&gt;</operator><name pos:start="5113:16" pos:end="5113:20">cc_op</name></name> <operator pos:start="5113:22" pos:end="5113:23">!=</operator> <name pos:start="5113:25" pos:end="5113:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5115:13" pos:end="5115:39"><block_content pos:start="5115:13" pos:end="5115:39">

            <expr_stmt pos:start="5115:13" pos:end="5115:39"><expr pos:start="5115:13" pos:end="5115:38"><call pos:start="5115:13" pos:end="5115:38"><name pos:start="5115:13" pos:end="5115:28">gen_op_set_cc_op</name><argument_list pos:start="5115:29" pos:end="5115:38">(<argument pos:start="5115:30" pos:end="5115:37"><expr pos:start="5115:30" pos:end="5115:37"><name pos:start="5115:30" pos:end="5115:37"><name pos:start="5115:30" pos:end="5115:30">s</name><operator pos:start="5115:31" pos:end="5115:32">-&gt;</operator><name pos:start="5115:33" pos:end="5115:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5117:9" pos:end="5117:32"><expr pos:start="5117:9" pos:end="5117:31"><call pos:start="5117:9" pos:end="5117:31"><name pos:start="5117:9" pos:end="5117:22">gen_helper_daa</name><argument_list pos:start="5117:23" pos:end="5117:31">(<argument pos:start="5117:24" pos:end="5117:30"><expr pos:start="5117:24" pos:end="5117:30"><name pos:start="5117:24" pos:end="5117:30">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5119:9" pos:end="5119:32"><expr pos:start="5119:9" pos:end="5119:31"><name pos:start="5119:9" pos:end="5119:16"><name pos:start="5119:9" pos:end="5119:9">s</name><operator pos:start="5119:10" pos:end="5119:11">-&gt;</operator><name pos:start="5119:12" pos:end="5119:16">cc_op</name></name> <operator pos:start="5119:18" pos:end="5119:18">=</operator> <name pos:start="5119:20" pos:end="5119:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="5121:9" pos:end="5121:14">break;</break>

    <case pos:start="5123:5" pos:end="5123:14">case <expr pos:start="5123:10" pos:end="5123:13"><literal type="number" pos:start="5123:10" pos:end="5123:13">0x2f</literal></expr>:</case> <comment type="block" pos:start="5123:16" pos:end="5123:24">/* das */</comment>

        <if_stmt pos:start="5125:9" pos:end="5127:28"><if pos:start="5125:9" pos:end="5127:28">if <condition pos:start="5125:12" pos:end="5125:22">(<expr pos:start="5125:13" pos:end="5125:21"><call pos:start="5125:13" pos:end="5125:21"><name pos:start="5125:13" pos:end="5125:18">CODE64</name><argument_list pos:start="5125:19" pos:end="5125:21">(<argument pos:start="5125:20" pos:end="5125:20"><expr pos:start="5125:20" pos:end="5125:20"><name pos:start="5125:20" pos:end="5125:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5127:13" pos:end="5127:28"><block_content pos:start="5127:13" pos:end="5127:28">

            <goto pos:start="5127:13" pos:end="5127:28">goto <name pos:start="5127:18" pos:end="5127:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5129:9" pos:end="5131:39"><if pos:start="5129:9" pos:end="5131:39">if <condition pos:start="5129:12" pos:end="5129:38">(<expr pos:start="5129:13" pos:end="5129:37"><name pos:start="5129:13" pos:end="5129:20"><name pos:start="5129:13" pos:end="5129:13">s</name><operator pos:start="5129:14" pos:end="5129:15">-&gt;</operator><name pos:start="5129:16" pos:end="5129:20">cc_op</name></name> <operator pos:start="5129:22" pos:end="5129:23">!=</operator> <name pos:start="5129:25" pos:end="5129:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5131:13" pos:end="5131:39"><block_content pos:start="5131:13" pos:end="5131:39">

            <expr_stmt pos:start="5131:13" pos:end="5131:39"><expr pos:start="5131:13" pos:end="5131:38"><call pos:start="5131:13" pos:end="5131:38"><name pos:start="5131:13" pos:end="5131:28">gen_op_set_cc_op</name><argument_list pos:start="5131:29" pos:end="5131:38">(<argument pos:start="5131:30" pos:end="5131:37"><expr pos:start="5131:30" pos:end="5131:37"><name pos:start="5131:30" pos:end="5131:37"><name pos:start="5131:30" pos:end="5131:30">s</name><operator pos:start="5131:31" pos:end="5131:32">-&gt;</operator><name pos:start="5131:33" pos:end="5131:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5133:9" pos:end="5133:32"><expr pos:start="5133:9" pos:end="5133:31"><call pos:start="5133:9" pos:end="5133:31"><name pos:start="5133:9" pos:end="5133:22">gen_helper_das</name><argument_list pos:start="5133:23" pos:end="5133:31">(<argument pos:start="5133:24" pos:end="5133:30"><expr pos:start="5133:24" pos:end="5133:30"><name pos:start="5133:24" pos:end="5133:30">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5135:9" pos:end="5135:32"><expr pos:start="5135:9" pos:end="5135:31"><name pos:start="5135:9" pos:end="5135:16"><name pos:start="5135:9" pos:end="5135:9">s</name><operator pos:start="5135:10" pos:end="5135:11">-&gt;</operator><name pos:start="5135:12" pos:end="5135:16">cc_op</name></name> <operator pos:start="5135:18" pos:end="5135:18">=</operator> <name pos:start="5135:20" pos:end="5135:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="5137:9" pos:end="5137:14">break;</break>

    <case pos:start="5139:5" pos:end="5139:14">case <expr pos:start="5139:10" pos:end="5139:13"><literal type="number" pos:start="5139:10" pos:end="5139:13">0x37</literal></expr>:</case> <comment type="block" pos:start="5139:16" pos:end="5139:24">/* aaa */</comment>

        <if_stmt pos:start="5141:9" pos:end="5143:28"><if pos:start="5141:9" pos:end="5143:28">if <condition pos:start="5141:12" pos:end="5141:22">(<expr pos:start="5141:13" pos:end="5141:21"><call pos:start="5141:13" pos:end="5141:21"><name pos:start="5141:13" pos:end="5141:18">CODE64</name><argument_list pos:start="5141:19" pos:end="5141:21">(<argument pos:start="5141:20" pos:end="5141:20"><expr pos:start="5141:20" pos:end="5141:20"><name pos:start="5141:20" pos:end="5141:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5143:13" pos:end="5143:28"><block_content pos:start="5143:13" pos:end="5143:28">

            <goto pos:start="5143:13" pos:end="5143:28">goto <name pos:start="5143:18" pos:end="5143:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5145:9" pos:end="5147:39"><if pos:start="5145:9" pos:end="5147:39">if <condition pos:start="5145:12" pos:end="5145:38">(<expr pos:start="5145:13" pos:end="5145:37"><name pos:start="5145:13" pos:end="5145:20"><name pos:start="5145:13" pos:end="5145:13">s</name><operator pos:start="5145:14" pos:end="5145:15">-&gt;</operator><name pos:start="5145:16" pos:end="5145:20">cc_op</name></name> <operator pos:start="5145:22" pos:end="5145:23">!=</operator> <name pos:start="5145:25" pos:end="5145:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5147:13" pos:end="5147:39"><block_content pos:start="5147:13" pos:end="5147:39">

            <expr_stmt pos:start="5147:13" pos:end="5147:39"><expr pos:start="5147:13" pos:end="5147:38"><call pos:start="5147:13" pos:end="5147:38"><name pos:start="5147:13" pos:end="5147:28">gen_op_set_cc_op</name><argument_list pos:start="5147:29" pos:end="5147:38">(<argument pos:start="5147:30" pos:end="5147:37"><expr pos:start="5147:30" pos:end="5147:37"><name pos:start="5147:30" pos:end="5147:37"><name pos:start="5147:30" pos:end="5147:30">s</name><operator pos:start="5147:31" pos:end="5147:32">-&gt;</operator><name pos:start="5147:33" pos:end="5147:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5149:9" pos:end="5149:32"><expr pos:start="5149:9" pos:end="5149:31"><call pos:start="5149:9" pos:end="5149:31"><name pos:start="5149:9" pos:end="5149:22">gen_helper_aaa</name><argument_list pos:start="5149:23" pos:end="5149:31">(<argument pos:start="5149:24" pos:end="5149:30"><expr pos:start="5149:24" pos:end="5149:30"><name pos:start="5149:24" pos:end="5149:30">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5151:9" pos:end="5151:32"><expr pos:start="5151:9" pos:end="5151:31"><name pos:start="5151:9" pos:end="5151:16"><name pos:start="5151:9" pos:end="5151:9">s</name><operator pos:start="5151:10" pos:end="5151:11">-&gt;</operator><name pos:start="5151:12" pos:end="5151:16">cc_op</name></name> <operator pos:start="5151:18" pos:end="5151:18">=</operator> <name pos:start="5151:20" pos:end="5151:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="5153:9" pos:end="5153:14">break;</break>

    <case pos:start="5155:5" pos:end="5155:14">case <expr pos:start="5155:10" pos:end="5155:13"><literal type="number" pos:start="5155:10" pos:end="5155:13">0x3f</literal></expr>:</case> <comment type="block" pos:start="5155:16" pos:end="5155:24">/* aas */</comment>

        <if_stmt pos:start="5157:9" pos:end="5159:28"><if pos:start="5157:9" pos:end="5159:28">if <condition pos:start="5157:12" pos:end="5157:22">(<expr pos:start="5157:13" pos:end="5157:21"><call pos:start="5157:13" pos:end="5157:21"><name pos:start="5157:13" pos:end="5157:18">CODE64</name><argument_list pos:start="5157:19" pos:end="5157:21">(<argument pos:start="5157:20" pos:end="5157:20"><expr pos:start="5157:20" pos:end="5157:20"><name pos:start="5157:20" pos:end="5157:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5159:13" pos:end="5159:28"><block_content pos:start="5159:13" pos:end="5159:28">

            <goto pos:start="5159:13" pos:end="5159:28">goto <name pos:start="5159:18" pos:end="5159:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5161:9" pos:end="5163:39"><if pos:start="5161:9" pos:end="5163:39">if <condition pos:start="5161:12" pos:end="5161:38">(<expr pos:start="5161:13" pos:end="5161:37"><name pos:start="5161:13" pos:end="5161:20"><name pos:start="5161:13" pos:end="5161:13">s</name><operator pos:start="5161:14" pos:end="5161:15">-&gt;</operator><name pos:start="5161:16" pos:end="5161:20">cc_op</name></name> <operator pos:start="5161:22" pos:end="5161:23">!=</operator> <name pos:start="5161:25" pos:end="5161:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5163:13" pos:end="5163:39"><block_content pos:start="5163:13" pos:end="5163:39">

            <expr_stmt pos:start="5163:13" pos:end="5163:39"><expr pos:start="5163:13" pos:end="5163:38"><call pos:start="5163:13" pos:end="5163:38"><name pos:start="5163:13" pos:end="5163:28">gen_op_set_cc_op</name><argument_list pos:start="5163:29" pos:end="5163:38">(<argument pos:start="5163:30" pos:end="5163:37"><expr pos:start="5163:30" pos:end="5163:37"><name pos:start="5163:30" pos:end="5163:37"><name pos:start="5163:30" pos:end="5163:30">s</name><operator pos:start="5163:31" pos:end="5163:32">-&gt;</operator><name pos:start="5163:33" pos:end="5163:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5165:9" pos:end="5165:32"><expr pos:start="5165:9" pos:end="5165:31"><call pos:start="5165:9" pos:end="5165:31"><name pos:start="5165:9" pos:end="5165:22">gen_helper_aas</name><argument_list pos:start="5165:23" pos:end="5165:31">(<argument pos:start="5165:24" pos:end="5165:30"><expr pos:start="5165:24" pos:end="5165:30"><name pos:start="5165:24" pos:end="5165:30">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5167:9" pos:end="5167:32"><expr pos:start="5167:9" pos:end="5167:31"><name pos:start="5167:9" pos:end="5167:16"><name pos:start="5167:9" pos:end="5167:9">s</name><operator pos:start="5167:10" pos:end="5167:11">-&gt;</operator><name pos:start="5167:12" pos:end="5167:16">cc_op</name></name> <operator pos:start="5167:18" pos:end="5167:18">=</operator> <name pos:start="5167:20" pos:end="5167:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="5169:9" pos:end="5169:14">break;</break>

    <case pos:start="5171:5" pos:end="5171:14">case <expr pos:start="5171:10" pos:end="5171:13"><literal type="number" pos:start="5171:10" pos:end="5171:13">0xd4</literal></expr>:</case> <comment type="block" pos:start="5171:16" pos:end="5171:24">/* aam */</comment>

        <if_stmt pos:start="5173:9" pos:end="5175:28"><if pos:start="5173:9" pos:end="5175:28">if <condition pos:start="5173:12" pos:end="5173:22">(<expr pos:start="5173:13" pos:end="5173:21"><call pos:start="5173:13" pos:end="5173:21"><name pos:start="5173:13" pos:end="5173:18">CODE64</name><argument_list pos:start="5173:19" pos:end="5173:21">(<argument pos:start="5173:20" pos:end="5173:20"><expr pos:start="5173:20" pos:end="5173:20"><name pos:start="5173:20" pos:end="5173:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5175:13" pos:end="5175:28"><block_content pos:start="5175:13" pos:end="5175:28">

            <goto pos:start="5175:13" pos:end="5175:28">goto <name pos:start="5175:18" pos:end="5175:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5177:9" pos:end="5177:42"><expr pos:start="5177:9" pos:end="5177:41"><name pos:start="5177:9" pos:end="5177:11">val</name> <operator pos:start="5177:13" pos:end="5177:13">=</operator> <call pos:start="5177:15" pos:end="5177:41"><name pos:start="5177:15" pos:end="5177:27">cpu_ldub_code</name><argument_list pos:start="5177:28" pos:end="5177:41">(<argument pos:start="5177:29" pos:end="5177:31"><expr pos:start="5177:29" pos:end="5177:31"><name pos:start="5177:29" pos:end="5177:31">env</name></expr></argument>, <argument pos:start="5177:34" pos:end="5177:40"><expr pos:start="5177:34" pos:end="5177:40"><name pos:start="5177:34" pos:end="5177:38"><name pos:start="5177:34" pos:end="5177:34">s</name><operator pos:start="5177:35" pos:end="5177:36">-&gt;</operator><name pos:start="5177:37" pos:end="5177:38">pc</name></name><operator pos:start="5177:39" pos:end="5177:40">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="5179:9" pos:end="5189:9"><if pos:start="5179:9" pos:end="5183:9">if <condition pos:start="5179:12" pos:end="5179:21">(<expr pos:start="5179:13" pos:end="5179:20"><name pos:start="5179:13" pos:end="5179:15">val</name> <operator pos:start="5179:17" pos:end="5179:18">==</operator> <literal type="number" pos:start="5179:20" pos:end="5179:20">0</literal></expr>)</condition> <block pos:start="5179:23" pos:end="5183:9">{<block_content pos:start="5181:13" pos:end="5181:65">

            <expr_stmt pos:start="5181:13" pos:end="5181:65"><expr pos:start="5181:13" pos:end="5181:64"><call pos:start="5181:13" pos:end="5181:64"><name pos:start="5181:13" pos:end="5181:25">gen_exception</name><argument_list pos:start="5181:26" pos:end="5181:64">(<argument pos:start="5181:27" pos:end="5181:27"><expr pos:start="5181:27" pos:end="5181:27"><name pos:start="5181:27" pos:end="5181:27">s</name></expr></argument>, <argument pos:start="5181:30" pos:end="5181:40"><expr pos:start="5181:30" pos:end="5181:40"><name pos:start="5181:30" pos:end="5181:40">EXCP00_DIVZ</name></expr></argument>, <argument pos:start="5181:43" pos:end="5181:63"><expr pos:start="5181:43" pos:end="5181:63"><name pos:start="5181:43" pos:end="5181:50">pc_start</name> <operator pos:start="5181:52" pos:end="5181:52">-</operator> <name pos:start="5181:54" pos:end="5181:63"><name pos:start="5181:54" pos:end="5181:54">s</name><operator pos:start="5181:55" pos:end="5181:56">-&gt;</operator><name pos:start="5181:57" pos:end="5181:63">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5183:11" pos:end="5189:9">else <block pos:start="5183:16" pos:end="5189:9">{<block_content pos:start="5185:13" pos:end="5187:36">

            <expr_stmt pos:start="5185:13" pos:end="5185:56"><expr pos:start="5185:13" pos:end="5185:55"><call pos:start="5185:13" pos:end="5185:55"><name pos:start="5185:13" pos:end="5185:26">gen_helper_aam</name><argument_list pos:start="5185:27" pos:end="5185:55">(<argument pos:start="5185:28" pos:end="5185:34"><expr pos:start="5185:28" pos:end="5185:34"><name pos:start="5185:28" pos:end="5185:34">cpu_env</name></expr></argument>, <argument pos:start="5185:37" pos:end="5185:54"><expr pos:start="5185:37" pos:end="5185:54"><call pos:start="5185:37" pos:end="5185:54"><name pos:start="5185:37" pos:end="5185:49">tcg_const_i32</name><argument_list pos:start="5185:50" pos:end="5185:54">(<argument pos:start="5185:51" pos:end="5185:53"><expr pos:start="5185:51" pos:end="5185:53"><name pos:start="5185:51" pos:end="5185:53">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5187:13" pos:end="5187:36"><expr pos:start="5187:13" pos:end="5187:35"><name pos:start="5187:13" pos:end="5187:20"><name pos:start="5187:13" pos:end="5187:13">s</name><operator pos:start="5187:14" pos:end="5187:15">-&gt;</operator><name pos:start="5187:16" pos:end="5187:20">cc_op</name></name> <operator pos:start="5187:22" pos:end="5187:22">=</operator> <name pos:start="5187:24" pos:end="5187:35">CC_OP_LOGICB</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5191:9" pos:end="5191:14">break;</break>

    <case pos:start="5193:5" pos:end="5193:14">case <expr pos:start="5193:10" pos:end="5193:13"><literal type="number" pos:start="5193:10" pos:end="5193:13">0xd5</literal></expr>:</case> <comment type="block" pos:start="5193:16" pos:end="5193:24">/* aad */</comment>

        <if_stmt pos:start="5195:9" pos:end="5197:28"><if pos:start="5195:9" pos:end="5197:28">if <condition pos:start="5195:12" pos:end="5195:22">(<expr pos:start="5195:13" pos:end="5195:21"><call pos:start="5195:13" pos:end="5195:21"><name pos:start="5195:13" pos:end="5195:18">CODE64</name><argument_list pos:start="5195:19" pos:end="5195:21">(<argument pos:start="5195:20" pos:end="5195:20"><expr pos:start="5195:20" pos:end="5195:20"><name pos:start="5195:20" pos:end="5195:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5197:13" pos:end="5197:28"><block_content pos:start="5197:13" pos:end="5197:28">

            <goto pos:start="5197:13" pos:end="5197:28">goto <name pos:start="5197:18" pos:end="5197:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5199:9" pos:end="5199:42"><expr pos:start="5199:9" pos:end="5199:41"><name pos:start="5199:9" pos:end="5199:11">val</name> <operator pos:start="5199:13" pos:end="5199:13">=</operator> <call pos:start="5199:15" pos:end="5199:41"><name pos:start="5199:15" pos:end="5199:27">cpu_ldub_code</name><argument_list pos:start="5199:28" pos:end="5199:41">(<argument pos:start="5199:29" pos:end="5199:31"><expr pos:start="5199:29" pos:end="5199:31"><name pos:start="5199:29" pos:end="5199:31">env</name></expr></argument>, <argument pos:start="5199:34" pos:end="5199:40"><expr pos:start="5199:34" pos:end="5199:40"><name pos:start="5199:34" pos:end="5199:38"><name pos:start="5199:34" pos:end="5199:34">s</name><operator pos:start="5199:35" pos:end="5199:36">-&gt;</operator><name pos:start="5199:37" pos:end="5199:38">pc</name></name><operator pos:start="5199:39" pos:end="5199:40">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5201:9" pos:end="5201:52"><expr pos:start="5201:9" pos:end="5201:51"><call pos:start="5201:9" pos:end="5201:51"><name pos:start="5201:9" pos:end="5201:22">gen_helper_aad</name><argument_list pos:start="5201:23" pos:end="5201:51">(<argument pos:start="5201:24" pos:end="5201:30"><expr pos:start="5201:24" pos:end="5201:30"><name pos:start="5201:24" pos:end="5201:30">cpu_env</name></expr></argument>, <argument pos:start="5201:33" pos:end="5201:50"><expr pos:start="5201:33" pos:end="5201:50"><call pos:start="5201:33" pos:end="5201:50"><name pos:start="5201:33" pos:end="5201:45">tcg_const_i32</name><argument_list pos:start="5201:46" pos:end="5201:50">(<argument pos:start="5201:47" pos:end="5201:49"><expr pos:start="5201:47" pos:end="5201:49"><name pos:start="5201:47" pos:end="5201:49">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5203:9" pos:end="5203:32"><expr pos:start="5203:9" pos:end="5203:31"><name pos:start="5203:9" pos:end="5203:16"><name pos:start="5203:9" pos:end="5203:9">s</name><operator pos:start="5203:10" pos:end="5203:11">-&gt;</operator><name pos:start="5203:12" pos:end="5203:16">cc_op</name></name> <operator pos:start="5203:18" pos:end="5203:18">=</operator> <name pos:start="5203:20" pos:end="5203:31">CC_OP_LOGICB</name></expr>;</expr_stmt>

        <break pos:start="5205:9" pos:end="5205:14">break;</break>

        <comment type="block" format="doxygen" pos:start="5207:9" pos:end="5207:34">/************************/</comment>

        <comment type="block" pos:start="5209:9" pos:end="5209:18">/* misc */</comment>

    <case pos:start="5211:5" pos:end="5211:14">case <expr pos:start="5211:10" pos:end="5211:13"><literal type="number" pos:start="5211:10" pos:end="5211:13">0x90</literal></expr>:</case> <comment type="block" pos:start="5211:16" pos:end="5211:24">/* nop */</comment>

        <comment type="block" pos:start="5213:9" pos:end="5213:49">/* XXX: correct lock test for all insn */</comment>

        <if_stmt pos:start="5215:9" pos:end="5219:9"><if pos:start="5215:9" pos:end="5219:9">if <condition pos:start="5215:12" pos:end="5215:35">(<expr pos:start="5215:13" pos:end="5215:34"><name pos:start="5215:13" pos:end="5215:20">prefixes</name> <operator pos:start="5215:22" pos:end="5215:22">&amp;</operator> <name pos:start="5215:24" pos:end="5215:34">PREFIX_LOCK</name></expr>)</condition> <block pos:start="5215:37" pos:end="5219:9">{<block_content pos:start="5217:13" pos:end="5217:28">

            <goto pos:start="5217:13" pos:end="5217:28">goto <name pos:start="5217:18" pos:end="5217:27">illegal_op</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="5221:9" pos:end="5221:70">/* If REX_B is set, then this is xchg eax, r8d, not a nop.  */</comment>

        <if_stmt pos:start="5223:9" pos:end="5227:9"><if pos:start="5223:9" pos:end="5227:9">if <condition pos:start="5223:12" pos:end="5223:21">(<expr pos:start="5223:13" pos:end="5223:20"><call pos:start="5223:13" pos:end="5223:20"><name pos:start="5223:13" pos:end="5223:17">REX_B</name><argument_list pos:start="5223:18" pos:end="5223:20">(<argument pos:start="5223:19" pos:end="5223:19"><expr pos:start="5223:19" pos:end="5223:19"><name pos:start="5223:19" pos:end="5223:19">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5223:23" pos:end="5227:9">{<block_content pos:start="5225:13" pos:end="5225:33">

            <goto pos:start="5225:13" pos:end="5225:33">goto <name pos:start="5225:18" pos:end="5225:32">do_xchg_reg_eax</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="5229:9" pos:end="5233:9"><if pos:start="5229:9" pos:end="5233:9">if <condition pos:start="5229:12" pos:end="5229:35">(<expr pos:start="5229:13" pos:end="5229:34"><name pos:start="5229:13" pos:end="5229:20">prefixes</name> <operator pos:start="5229:22" pos:end="5229:22">&amp;</operator> <name pos:start="5229:24" pos:end="5229:34">PREFIX_REPZ</name></expr>)</condition> <block pos:start="5229:37" pos:end="5233:9">{<block_content pos:start="5231:13" pos:end="5231:65">

            <expr_stmt pos:start="5231:13" pos:end="5231:65"><expr pos:start="5231:13" pos:end="5231:64"><call pos:start="5231:13" pos:end="5231:64"><name pos:start="5231:13" pos:end="5231:35">gen_svm_check_intercept</name><argument_list pos:start="5231:36" pos:end="5231:64">(<argument pos:start="5231:37" pos:end="5231:37"><expr pos:start="5231:37" pos:end="5231:37"><name pos:start="5231:37" pos:end="5231:37">s</name></expr></argument>, <argument pos:start="5231:40" pos:end="5231:47"><expr pos:start="5231:40" pos:end="5231:47"><name pos:start="5231:40" pos:end="5231:47">pc_start</name></expr></argument>, <argument pos:start="5231:50" pos:end="5231:63"><expr pos:start="5231:50" pos:end="5231:63"><name pos:start="5231:50" pos:end="5231:63">SVM_EXIT_PAUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="5235:9" pos:end="5235:14">break;</break>

    <case pos:start="5237:5" pos:end="5237:14">case <expr pos:start="5237:10" pos:end="5237:13"><literal type="number" pos:start="5237:10" pos:end="5237:13">0x9b</literal></expr>:</case> <comment type="block" pos:start="5237:16" pos:end="5237:26">/* fwait */</comment>

        <if_stmt pos:start="5239:9" pos:end="5255:9"><if pos:start="5239:9" pos:end="5245:9">if <condition pos:start="5239:12" pos:end="5241:38">(<expr pos:start="5239:13" pos:end="5241:37"><operator pos:start="5239:13" pos:end="5239:13">(</operator><name pos:start="5239:14" pos:end="5239:21"><name pos:start="5239:14" pos:end="5239:14">s</name><operator pos:start="5239:15" pos:end="5239:16">-&gt;</operator><name pos:start="5239:17" pos:end="5239:21">flags</name></name> <operator pos:start="5239:23" pos:end="5239:23">&amp;</operator> <operator pos:start="5239:25" pos:end="5239:25">(</operator><name pos:start="5239:26" pos:end="5239:35">HF_MP_MASK</name> <operator pos:start="5239:37" pos:end="5239:37">|</operator> <name pos:start="5239:39" pos:end="5239:48">HF_TS_MASK</name><operator pos:start="5239:49" pos:end="5239:49">)</operator><operator pos:start="5239:50" pos:end="5239:50">)</operator> <operator pos:start="5239:52" pos:end="5239:53">==</operator>

            <operator pos:start="5241:13" pos:end="5241:13">(</operator><name pos:start="5241:14" pos:end="5241:23">HF_MP_MASK</name> <operator pos:start="5241:25" pos:end="5241:25">|</operator> <name pos:start="5241:27" pos:end="5241:36">HF_TS_MASK</name><operator pos:start="5241:37" pos:end="5241:37">)</operator></expr>)</condition> <block pos:start="5241:40" pos:end="5245:9">{<block_content pos:start="5243:13" pos:end="5243:65">

            <expr_stmt pos:start="5243:13" pos:end="5243:65"><expr pos:start="5243:13" pos:end="5243:64"><call pos:start="5243:13" pos:end="5243:64"><name pos:start="5243:13" pos:end="5243:25">gen_exception</name><argument_list pos:start="5243:26" pos:end="5243:64">(<argument pos:start="5243:27" pos:end="5243:27"><expr pos:start="5243:27" pos:end="5243:27"><name pos:start="5243:27" pos:end="5243:27">s</name></expr></argument>, <argument pos:start="5243:30" pos:end="5243:40"><expr pos:start="5243:30" pos:end="5243:40"><name pos:start="5243:30" pos:end="5243:40">EXCP07_PREX</name></expr></argument>, <argument pos:start="5243:43" pos:end="5243:63"><expr pos:start="5243:43" pos:end="5243:63"><name pos:start="5243:43" pos:end="5243:50">pc_start</name> <operator pos:start="5243:52" pos:end="5243:52">-</operator> <name pos:start="5243:54" pos:end="5243:63"><name pos:start="5243:54" pos:end="5243:54">s</name><operator pos:start="5243:55" pos:end="5243:56">-&gt;</operator><name pos:start="5243:57" pos:end="5243:63">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5245:11" pos:end="5255:9">else <block pos:start="5245:16" pos:end="5255:9">{<block_content pos:start="5247:13" pos:end="5253:38">

            <if_stmt pos:start="5247:13" pos:end="5249:43"><if pos:start="5247:13" pos:end="5249:43">if <condition pos:start="5247:16" pos:end="5247:42">(<expr pos:start="5247:17" pos:end="5247:41"><name pos:start="5247:17" pos:end="5247:24"><name pos:start="5247:17" pos:end="5247:17">s</name><operator pos:start="5247:18" pos:end="5247:19">-&gt;</operator><name pos:start="5247:20" pos:end="5247:24">cc_op</name></name> <operator pos:start="5247:26" pos:end="5247:27">!=</operator> <name pos:start="5247:29" pos:end="5247:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5249:17" pos:end="5249:43"><block_content pos:start="5249:17" pos:end="5249:43">

                <expr_stmt pos:start="5249:17" pos:end="5249:43"><expr pos:start="5249:17" pos:end="5249:42"><call pos:start="5249:17" pos:end="5249:42"><name pos:start="5249:17" pos:end="5249:32">gen_op_set_cc_op</name><argument_list pos:start="5249:33" pos:end="5249:42">(<argument pos:start="5249:34" pos:end="5249:41"><expr pos:start="5249:34" pos:end="5249:41"><name pos:start="5249:34" pos:end="5249:41"><name pos:start="5249:34" pos:end="5249:34">s</name><operator pos:start="5249:35" pos:end="5249:36">-&gt;</operator><name pos:start="5249:37" pos:end="5249:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5251:13" pos:end="5251:46"><expr pos:start="5251:13" pos:end="5251:45"><call pos:start="5251:13" pos:end="5251:45"><name pos:start="5251:13" pos:end="5251:22">gen_jmp_im</name><argument_list pos:start="5251:23" pos:end="5251:45">(<argument pos:start="5251:24" pos:end="5251:44"><expr pos:start="5251:24" pos:end="5251:44"><name pos:start="5251:24" pos:end="5251:31">pc_start</name> <operator pos:start="5251:33" pos:end="5251:33">-</operator> <name pos:start="5251:35" pos:end="5251:44"><name pos:start="5251:35" pos:end="5251:35">s</name><operator pos:start="5251:36" pos:end="5251:37">-&gt;</operator><name pos:start="5251:38" pos:end="5251:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5253:13" pos:end="5253:38"><expr pos:start="5253:13" pos:end="5253:37"><call pos:start="5253:13" pos:end="5253:37"><name pos:start="5253:13" pos:end="5253:28">gen_helper_fwait</name><argument_list pos:start="5253:29" pos:end="5253:37">(<argument pos:start="5253:30" pos:end="5253:36"><expr pos:start="5253:30" pos:end="5253:36"><name pos:start="5253:30" pos:end="5253:36">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5257:9" pos:end="5257:14">break;</break>

    <case pos:start="5259:5" pos:end="5259:14">case <expr pos:start="5259:10" pos:end="5259:13"><literal type="number" pos:start="5259:10" pos:end="5259:13">0xcc</literal></expr>:</case> <comment type="block" pos:start="5259:16" pos:end="5259:25">/* int3 */</comment>

        <expr_stmt pos:start="5261:9" pos:end="5261:81"><expr pos:start="5261:9" pos:end="5261:80"><call pos:start="5261:9" pos:end="5261:80"><name pos:start="5261:9" pos:end="5261:21">gen_interrupt</name><argument_list pos:start="5261:22" pos:end="5261:80">(<argument pos:start="5261:23" pos:end="5261:23"><expr pos:start="5261:23" pos:end="5261:23"><name pos:start="5261:23" pos:end="5261:23">s</name></expr></argument>, <argument pos:start="5261:26" pos:end="5261:36"><expr pos:start="5261:26" pos:end="5261:36"><name pos:start="5261:26" pos:end="5261:36">EXCP03_INT3</name></expr></argument>, <argument pos:start="5261:39" pos:end="5261:59"><expr pos:start="5261:39" pos:end="5261:59"><name pos:start="5261:39" pos:end="5261:46">pc_start</name> <operator pos:start="5261:48" pos:end="5261:48">-</operator> <name pos:start="5261:50" pos:end="5261:59"><name pos:start="5261:50" pos:end="5261:50">s</name><operator pos:start="5261:51" pos:end="5261:52">-&gt;</operator><name pos:start="5261:53" pos:end="5261:59">cs_base</name></name></expr></argument>, <argument pos:start="5261:62" pos:end="5261:79"><expr pos:start="5261:62" pos:end="5261:79"><name pos:start="5261:62" pos:end="5261:66"><name pos:start="5261:62" pos:end="5261:62">s</name><operator pos:start="5261:63" pos:end="5261:64">-&gt;</operator><name pos:start="5261:65" pos:end="5261:66">pc</name></name> <operator pos:start="5261:68" pos:end="5261:68">-</operator> <name pos:start="5261:70" pos:end="5261:79"><name pos:start="5261:70" pos:end="5261:70">s</name><operator pos:start="5261:71" pos:end="5261:72">-&gt;</operator><name pos:start="5261:73" pos:end="5261:79">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5263:9" pos:end="5263:14">break;</break>

    <case pos:start="5265:5" pos:end="5265:14">case <expr pos:start="5265:10" pos:end="5265:13"><literal type="number" pos:start="5265:10" pos:end="5265:13">0xcd</literal></expr>:</case> <comment type="block" pos:start="5265:16" pos:end="5265:26">/* int N */</comment>

        <expr_stmt pos:start="5267:9" pos:end="5267:42"><expr pos:start="5267:9" pos:end="5267:41"><name pos:start="5267:9" pos:end="5267:11">val</name> <operator pos:start="5267:13" pos:end="5267:13">=</operator> <call pos:start="5267:15" pos:end="5267:41"><name pos:start="5267:15" pos:end="5267:27">cpu_ldub_code</name><argument_list pos:start="5267:28" pos:end="5267:41">(<argument pos:start="5267:29" pos:end="5267:31"><expr pos:start="5267:29" pos:end="5267:31"><name pos:start="5267:29" pos:end="5267:31">env</name></expr></argument>, <argument pos:start="5267:34" pos:end="5267:40"><expr pos:start="5267:34" pos:end="5267:40"><name pos:start="5267:34" pos:end="5267:38"><name pos:start="5267:34" pos:end="5267:34">s</name><operator pos:start="5267:35" pos:end="5267:36">-&gt;</operator><name pos:start="5267:37" pos:end="5267:38">pc</name></name><operator pos:start="5267:39" pos:end="5267:40">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="5269:9" pos:end="5277:9"><if pos:start="5269:9" pos:end="5273:9">if <condition pos:start="5269:12" pos:end="5269:36">(<expr pos:start="5269:13" pos:end="5269:35"><name pos:start="5269:13" pos:end="5269:19"><name pos:start="5269:13" pos:end="5269:13">s</name><operator pos:start="5269:14" pos:end="5269:15">-&gt;</operator><name pos:start="5269:16" pos:end="5269:19">vm86</name></name> <operator pos:start="5269:21" pos:end="5269:22">&amp;&amp;</operator> <name pos:start="5269:24" pos:end="5269:30"><name pos:start="5269:24" pos:end="5269:24">s</name><operator pos:start="5269:25" pos:end="5269:26">-&gt;</operator><name pos:start="5269:27" pos:end="5269:30">iopl</name></name> <operator pos:start="5269:32" pos:end="5269:33">!=</operator> <literal type="number" pos:start="5269:35" pos:end="5269:35">3</literal></expr>)</condition> <block pos:start="5269:38" pos:end="5273:9">{<block_content pos:start="5271:13" pos:end="5271:64">

            <expr_stmt pos:start="5271:13" pos:end="5271:64"><expr pos:start="5271:13" pos:end="5271:63"><call pos:start="5271:13" pos:end="5271:63"><name pos:start="5271:13" pos:end="5271:25">gen_exception</name><argument_list pos:start="5271:26" pos:end="5271:63">(<argument pos:start="5271:27" pos:end="5271:27"><expr pos:start="5271:27" pos:end="5271:27"><name pos:start="5271:27" pos:end="5271:27">s</name></expr></argument>, <argument pos:start="5271:30" pos:end="5271:39"><expr pos:start="5271:30" pos:end="5271:39"><name pos:start="5271:30" pos:end="5271:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5271:42" pos:end="5271:62"><expr pos:start="5271:42" pos:end="5271:62"><name pos:start="5271:42" pos:end="5271:49">pc_start</name> <operator pos:start="5271:51" pos:end="5271:51">-</operator> <name pos:start="5271:53" pos:end="5271:62"><name pos:start="5271:53" pos:end="5271:53">s</name><operator pos:start="5271:54" pos:end="5271:55">-&gt;</operator><name pos:start="5271:56" pos:end="5271:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5273:11" pos:end="5277:9">else <block pos:start="5273:16" pos:end="5277:9">{<block_content pos:start="5275:13" pos:end="5275:77">

            <expr_stmt pos:start="5275:13" pos:end="5275:77"><expr pos:start="5275:13" pos:end="5275:76"><call pos:start="5275:13" pos:end="5275:76"><name pos:start="5275:13" pos:end="5275:25">gen_interrupt</name><argument_list pos:start="5275:26" pos:end="5275:76">(<argument pos:start="5275:27" pos:end="5275:27"><expr pos:start="5275:27" pos:end="5275:27"><name pos:start="5275:27" pos:end="5275:27">s</name></expr></argument>, <argument pos:start="5275:30" pos:end="5275:32"><expr pos:start="5275:30" pos:end="5275:32"><name pos:start="5275:30" pos:end="5275:32">val</name></expr></argument>, <argument pos:start="5275:35" pos:end="5275:55"><expr pos:start="5275:35" pos:end="5275:55"><name pos:start="5275:35" pos:end="5275:42">pc_start</name> <operator pos:start="5275:44" pos:end="5275:44">-</operator> <name pos:start="5275:46" pos:end="5275:55"><name pos:start="5275:46" pos:end="5275:46">s</name><operator pos:start="5275:47" pos:end="5275:48">-&gt;</operator><name pos:start="5275:49" pos:end="5275:55">cs_base</name></name></expr></argument>, <argument pos:start="5275:58" pos:end="5275:75"><expr pos:start="5275:58" pos:end="5275:75"><name pos:start="5275:58" pos:end="5275:62"><name pos:start="5275:58" pos:end="5275:58">s</name><operator pos:start="5275:59" pos:end="5275:60">-&gt;</operator><name pos:start="5275:61" pos:end="5275:62">pc</name></name> <operator pos:start="5275:64" pos:end="5275:64">-</operator> <name pos:start="5275:66" pos:end="5275:75"><name pos:start="5275:66" pos:end="5275:66">s</name><operator pos:start="5275:67" pos:end="5275:68">-&gt;</operator><name pos:start="5275:69" pos:end="5275:75">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5279:9" pos:end="5279:14">break;</break>

    <case pos:start="5281:5" pos:end="5281:14">case <expr pos:start="5281:10" pos:end="5281:13"><literal type="number" pos:start="5281:10" pos:end="5281:13">0xce</literal></expr>:</case> <comment type="block" pos:start="5281:16" pos:end="5281:25">/* into */</comment>

        <if_stmt pos:start="5283:9" pos:end="5285:28"><if pos:start="5283:9" pos:end="5285:28">if <condition pos:start="5283:12" pos:end="5283:22">(<expr pos:start="5283:13" pos:end="5283:21"><call pos:start="5283:13" pos:end="5283:21"><name pos:start="5283:13" pos:end="5283:18">CODE64</name><argument_list pos:start="5283:19" pos:end="5283:21">(<argument pos:start="5283:20" pos:end="5283:20"><expr pos:start="5283:20" pos:end="5283:20"><name pos:start="5283:20" pos:end="5283:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5285:13" pos:end="5285:28"><block_content pos:start="5285:13" pos:end="5285:28">

            <goto pos:start="5285:13" pos:end="5285:28">goto <name pos:start="5285:18" pos:end="5285:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5287:9" pos:end="5289:39"><if pos:start="5287:9" pos:end="5289:39">if <condition pos:start="5287:12" pos:end="5287:38">(<expr pos:start="5287:13" pos:end="5287:37"><name pos:start="5287:13" pos:end="5287:20"><name pos:start="5287:13" pos:end="5287:13">s</name><operator pos:start="5287:14" pos:end="5287:15">-&gt;</operator><name pos:start="5287:16" pos:end="5287:20">cc_op</name></name> <operator pos:start="5287:22" pos:end="5287:23">!=</operator> <name pos:start="5287:25" pos:end="5287:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5289:13" pos:end="5289:39"><block_content pos:start="5289:13" pos:end="5289:39">

            <expr_stmt pos:start="5289:13" pos:end="5289:39"><expr pos:start="5289:13" pos:end="5289:38"><call pos:start="5289:13" pos:end="5289:38"><name pos:start="5289:13" pos:end="5289:28">gen_op_set_cc_op</name><argument_list pos:start="5289:29" pos:end="5289:38">(<argument pos:start="5289:30" pos:end="5289:37"><expr pos:start="5289:30" pos:end="5289:37"><name pos:start="5289:30" pos:end="5289:37"><name pos:start="5289:30" pos:end="5289:30">s</name><operator pos:start="5289:31" pos:end="5289:32">-&gt;</operator><name pos:start="5289:33" pos:end="5289:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5291:9" pos:end="5291:42"><expr pos:start="5291:9" pos:end="5291:41"><call pos:start="5291:9" pos:end="5291:41"><name pos:start="5291:9" pos:end="5291:18">gen_jmp_im</name><argument_list pos:start="5291:19" pos:end="5291:41">(<argument pos:start="5291:20" pos:end="5291:40"><expr pos:start="5291:20" pos:end="5291:40"><name pos:start="5291:20" pos:end="5291:27">pc_start</name> <operator pos:start="5291:29" pos:end="5291:29">-</operator> <name pos:start="5291:31" pos:end="5291:40"><name pos:start="5291:31" pos:end="5291:31">s</name><operator pos:start="5291:32" pos:end="5291:33">-&gt;</operator><name pos:start="5291:34" pos:end="5291:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5293:9" pos:end="5293:66"><expr pos:start="5293:9" pos:end="5293:65"><call pos:start="5293:9" pos:end="5293:65"><name pos:start="5293:9" pos:end="5293:23">gen_helper_into</name><argument_list pos:start="5293:24" pos:end="5293:65">(<argument pos:start="5293:25" pos:end="5293:31"><expr pos:start="5293:25" pos:end="5293:31"><name pos:start="5293:25" pos:end="5293:31">cpu_env</name></expr></argument>, <argument pos:start="5293:34" pos:end="5293:64"><expr pos:start="5293:34" pos:end="5293:64"><call pos:start="5293:34" pos:end="5293:64"><name pos:start="5293:34" pos:end="5293:46">tcg_const_i32</name><argument_list pos:start="5293:47" pos:end="5293:64">(<argument pos:start="5293:48" pos:end="5293:63"><expr pos:start="5293:48" pos:end="5293:63"><name pos:start="5293:48" pos:end="5293:52"><name pos:start="5293:48" pos:end="5293:48">s</name><operator pos:start="5293:49" pos:end="5293:50">-&gt;</operator><name pos:start="5293:51" pos:end="5293:52">pc</name></name> <operator pos:start="5293:54" pos:end="5293:54">-</operator> <name pos:start="5293:56" pos:end="5293:63">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5295:9" pos:end="5298:0">break;</break>

<cpp:ifdef pos:start="5297:1" pos:end="5297:17">#<cpp:directive pos:start="5297:2" pos:end="5297:6">ifdef</cpp:directive> <name pos:start="5297:8" pos:end="5297:17">WANT_ICEBP</name></cpp:ifdef>

    <case pos:start="5299:5" pos:end="5299:14">case <expr pos:start="5299:10" pos:end="5299:13"><literal type="number" pos:start="5299:10" pos:end="5299:13">0xf1</literal></expr>:</case> <comment type="block" pos:start="5299:16" pos:end="5299:69">/* icebp (undocumented, exits to external debugger) */</comment>

        <expr_stmt pos:start="5301:9" pos:end="5304:0"><expr pos:start="5301:9" pos:end="5301:60"><call pos:start="5301:9" pos:end="5301:60"><name pos:start="5301:9" pos:end="5301:31">gen_svm_check_intercept</name><argument_list pos:start="5301:32" pos:end="5301:60">(<argument pos:start="5301:33" pos:end="5301:33"><expr pos:start="5301:33" pos:end="5301:33"><name pos:start="5301:33" pos:end="5301:33">s</name></expr></argument>, <argument pos:start="5301:36" pos:end="5301:43"><expr pos:start="5301:36" pos:end="5301:43"><name pos:start="5301:36" pos:end="5301:43">pc_start</name></expr></argument>, <argument pos:start="5301:46" pos:end="5301:59"><expr pos:start="5301:46" pos:end="5301:59"><name pos:start="5301:46" pos:end="5301:59">SVM_EXIT_ICEBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="5303:1" pos:end="5303:5">#<cpp:directive pos:start="5303:2" pos:end="5303:3">if</cpp:directive> <expr pos:start="5303:5" pos:end="5303:5"><literal type="number" pos:start="5303:5" pos:end="5303:5">1</literal></expr></cpp:if>

        <expr_stmt pos:start="5305:9" pos:end="5308:0"><expr pos:start="5305:9" pos:end="5305:43"><call pos:start="5305:9" pos:end="5305:43"><name pos:start="5305:9" pos:end="5305:17">gen_debug</name><argument_list pos:start="5305:18" pos:end="5305:43">(<argument pos:start="5305:19" pos:end="5305:19"><expr pos:start="5305:19" pos:end="5305:19"><name pos:start="5305:19" pos:end="5305:19">s</name></expr></argument>, <argument pos:start="5305:22" pos:end="5305:42"><expr pos:start="5305:22" pos:end="5305:42"><name pos:start="5305:22" pos:end="5305:29">pc_start</name> <operator pos:start="5305:31" pos:end="5305:31">-</operator> <name pos:start="5305:33" pos:end="5305:42"><name pos:start="5305:33" pos:end="5305:33">s</name><operator pos:start="5305:34" pos:end="5305:35">-&gt;</operator><name pos:start="5305:36" pos:end="5305:42">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="5307:1" pos:end="5307:5">#<cpp:directive pos:start="5307:2" pos:end="5307:5">else</cpp:directive></cpp:else>

        <comment type="block" pos:start="5309:9" pos:end="5309:25">/* start debug */</comment>

        <expr_stmt pos:start="5311:9" pos:end="5311:22"><expr pos:start="5311:9" pos:end="5311:21"><call pos:start="5311:9" pos:end="5311:21"><name pos:start="5311:9" pos:end="5311:16">tb_flush</name><argument_list pos:start="5311:17" pos:end="5311:21">(<argument pos:start="5311:18" pos:end="5311:20"><expr pos:start="5311:18" pos:end="5311:20"><name pos:start="5311:18" pos:end="5311:20">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5313:9" pos:end="5316:0"><expr pos:start="5313:9" pos:end="5313:53"><call pos:start="5313:9" pos:end="5313:53"><name pos:start="5313:9" pos:end="5313:20">qemu_set_log</name><argument_list pos:start="5313:21" pos:end="5313:53">(<argument pos:start="5313:22" pos:end="5313:52"><expr pos:start="5313:22" pos:end="5313:52"><name pos:start="5313:22" pos:end="5313:32">CPU_LOG_INT</name> <operator pos:start="5313:34" pos:end="5313:34">|</operator> <name pos:start="5313:36" pos:end="5313:52">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="5315:1" pos:end="5315:6">#<cpp:directive pos:start="5315:2" pos:end="5315:6">endif</cpp:directive></cpp:endif>

        <break pos:start="5317:9" pos:end="5320:0">break;</break>

<cpp:endif pos:start="5319:1" pos:end="5319:6">#<cpp:directive pos:start="5319:2" pos:end="5319:6">endif</cpp:directive></cpp:endif>

    <case pos:start="5321:5" pos:end="5321:14">case <expr pos:start="5321:10" pos:end="5321:13"><literal type="number" pos:start="5321:10" pos:end="5321:13">0xfa</literal></expr>:</case> <comment type="block" pos:start="5321:16" pos:end="5321:24">/* cli */</comment>

        <if_stmt pos:start="5323:9" pos:end="5347:9"><if pos:start="5323:9" pos:end="5335:9">if <condition pos:start="5323:12" pos:end="5323:21">(<expr pos:start="5323:13" pos:end="5323:20"><operator pos:start="5323:13" pos:end="5323:13">!</operator><name pos:start="5323:14" pos:end="5323:20"><name pos:start="5323:14" pos:end="5323:14">s</name><operator pos:start="5323:15" pos:end="5323:16">-&gt;</operator><name pos:start="5323:17" pos:end="5323:20">vm86</name></name></expr>)</condition> <block pos:start="5323:23" pos:end="5335:9">{<block_content pos:start="5325:13" pos:end="5333:13">

            <if_stmt pos:start="5325:13" pos:end="5333:13"><if pos:start="5325:13" pos:end="5329:13">if <condition pos:start="5325:16" pos:end="5325:34">(<expr pos:start="5325:17" pos:end="5325:33"><name pos:start="5325:17" pos:end="5325:22"><name pos:start="5325:17" pos:end="5325:17">s</name><operator pos:start="5325:18" pos:end="5325:19">-&gt;</operator><name pos:start="5325:20" pos:end="5325:22">cpl</name></name> <operator pos:start="5325:24" pos:end="5325:25">&lt;=</operator> <name pos:start="5325:27" pos:end="5325:33"><name pos:start="5325:27" pos:end="5325:27">s</name><operator pos:start="5325:28" pos:end="5325:29">-&gt;</operator><name pos:start="5325:30" pos:end="5325:33">iopl</name></name></expr>)</condition> <block pos:start="5325:36" pos:end="5329:13">{<block_content pos:start="5327:17" pos:end="5327:40">

                <expr_stmt pos:start="5327:17" pos:end="5327:40"><expr pos:start="5327:17" pos:end="5327:39"><call pos:start="5327:17" pos:end="5327:39"><name pos:start="5327:17" pos:end="5327:30">gen_helper_cli</name><argument_list pos:start="5327:31" pos:end="5327:39">(<argument pos:start="5327:32" pos:end="5327:38"><expr pos:start="5327:32" pos:end="5327:38"><name pos:start="5327:32" pos:end="5327:38">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5329:15" pos:end="5333:13">else <block pos:start="5329:20" pos:end="5333:13">{<block_content pos:start="5331:17" pos:end="5331:68">

                <expr_stmt pos:start="5331:17" pos:end="5331:68"><expr pos:start="5331:17" pos:end="5331:67"><call pos:start="5331:17" pos:end="5331:67"><name pos:start="5331:17" pos:end="5331:29">gen_exception</name><argument_list pos:start="5331:30" pos:end="5331:67">(<argument pos:start="5331:31" pos:end="5331:31"><expr pos:start="5331:31" pos:end="5331:31"><name pos:start="5331:31" pos:end="5331:31">s</name></expr></argument>, <argument pos:start="5331:34" pos:end="5331:43"><expr pos:start="5331:34" pos:end="5331:43"><name pos:start="5331:34" pos:end="5331:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5331:46" pos:end="5331:66"><expr pos:start="5331:46" pos:end="5331:66"><name pos:start="5331:46" pos:end="5331:53">pc_start</name> <operator pos:start="5331:55" pos:end="5331:55">-</operator> <name pos:start="5331:57" pos:end="5331:66"><name pos:start="5331:57" pos:end="5331:57">s</name><operator pos:start="5331:58" pos:end="5331:59">-&gt;</operator><name pos:start="5331:60" pos:end="5331:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="5335:11" pos:end="5347:9">else <block pos:start="5335:16" pos:end="5347:9">{<block_content pos:start="5337:13" pos:end="5345:13">

            <if_stmt pos:start="5337:13" pos:end="5345:13"><if pos:start="5337:13" pos:end="5341:13">if <condition pos:start="5337:16" pos:end="5337:29">(<expr pos:start="5337:17" pos:end="5337:28"><name pos:start="5337:17" pos:end="5337:23"><name pos:start="5337:17" pos:end="5337:17">s</name><operator pos:start="5337:18" pos:end="5337:19">-&gt;</operator><name pos:start="5337:20" pos:end="5337:23">iopl</name></name> <operator pos:start="5337:25" pos:end="5337:26">==</operator> <literal type="number" pos:start="5337:28" pos:end="5337:28">3</literal></expr>)</condition> <block pos:start="5337:31" pos:end="5341:13">{<block_content pos:start="5339:17" pos:end="5339:40">

                <expr_stmt pos:start="5339:17" pos:end="5339:40"><expr pos:start="5339:17" pos:end="5339:39"><call pos:start="5339:17" pos:end="5339:39"><name pos:start="5339:17" pos:end="5339:30">gen_helper_cli</name><argument_list pos:start="5339:31" pos:end="5339:39">(<argument pos:start="5339:32" pos:end="5339:38"><expr pos:start="5339:32" pos:end="5339:38"><name pos:start="5339:32" pos:end="5339:38">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5341:15" pos:end="5345:13">else <block pos:start="5341:20" pos:end="5345:13">{<block_content pos:start="5343:17" pos:end="5343:68">

                <expr_stmt pos:start="5343:17" pos:end="5343:68"><expr pos:start="5343:17" pos:end="5343:67"><call pos:start="5343:17" pos:end="5343:67"><name pos:start="5343:17" pos:end="5343:29">gen_exception</name><argument_list pos:start="5343:30" pos:end="5343:67">(<argument pos:start="5343:31" pos:end="5343:31"><expr pos:start="5343:31" pos:end="5343:31"><name pos:start="5343:31" pos:end="5343:31">s</name></expr></argument>, <argument pos:start="5343:34" pos:end="5343:43"><expr pos:start="5343:34" pos:end="5343:43"><name pos:start="5343:34" pos:end="5343:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5343:46" pos:end="5343:66"><expr pos:start="5343:46" pos:end="5343:66"><name pos:start="5343:46" pos:end="5343:53">pc_start</name> <operator pos:start="5343:55" pos:end="5343:55">-</operator> <name pos:start="5343:57" pos:end="5343:66"><name pos:start="5343:57" pos:end="5343:57">s</name><operator pos:start="5343:58" pos:end="5343:59">-&gt;</operator><name pos:start="5343:60" pos:end="5343:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5349:9" pos:end="5349:14">break;</break>

    <case pos:start="5351:5" pos:end="5351:14">case <expr pos:start="5351:10" pos:end="5351:13"><literal type="number" pos:start="5351:10" pos:end="5351:13">0xfb</literal></expr>:</case> <comment type="block" pos:start="5351:16" pos:end="5351:24">/* sti */</comment>

        <if_stmt pos:start="5353:9" pos:end="5395:9"><if pos:start="5353:9" pos:end="5383:9">if <condition pos:start="5353:12" pos:end="5353:21">(<expr pos:start="5353:13" pos:end="5353:20"><operator pos:start="5353:13" pos:end="5353:13">!</operator><name pos:start="5353:14" pos:end="5353:20"><name pos:start="5353:14" pos:end="5353:14">s</name><operator pos:start="5353:15" pos:end="5353:16">-&gt;</operator><name pos:start="5353:17" pos:end="5353:20">vm86</name></name></expr>)</condition> <block pos:start="5353:23" pos:end="5383:9">{<block_content pos:start="5355:13" pos:end="5381:13">

            <if_stmt pos:start="5355:13" pos:end="5381:13"><if pos:start="5355:13" pos:end="5377:13">if <condition pos:start="5355:16" pos:end="5355:34">(<expr pos:start="5355:17" pos:end="5355:33"><name pos:start="5355:17" pos:end="5355:22"><name pos:start="5355:17" pos:end="5355:17">s</name><operator pos:start="5355:18" pos:end="5355:19">-&gt;</operator><name pos:start="5355:20" pos:end="5355:22">cpl</name></name> <operator pos:start="5355:24" pos:end="5355:25">&lt;=</operator> <name pos:start="5355:27" pos:end="5355:33"><name pos:start="5355:27" pos:end="5355:27">s</name><operator pos:start="5355:28" pos:end="5355:29">-&gt;</operator><name pos:start="5355:30" pos:end="5355:33">iopl</name></name></expr>)</condition> <block pos:start="5355:36" pos:end="5377:13">{<block_content pos:start="5357:13" pos:end="5375:27">

            <label pos:start="5357:13" pos:end="5357:20"><name pos:start="5357:13" pos:end="5357:19">gen_sti</name>:</label>

                <expr_stmt pos:start="5359:17" pos:end="5359:40"><expr pos:start="5359:17" pos:end="5359:39"><call pos:start="5359:17" pos:end="5359:39"><name pos:start="5359:17" pos:end="5359:30">gen_helper_sti</name><argument_list pos:start="5359:31" pos:end="5359:39">(<argument pos:start="5359:32" pos:end="5359:38"><expr pos:start="5359:32" pos:end="5359:38"><name pos:start="5359:32" pos:end="5359:38">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="5361:17" pos:end="5361:77">/* interruptions are enabled only the first insn after sti */</comment>

                <comment type="block" pos:start="5363:17" pos:end="5365:37">/* If several instructions disable interrupts, only the

                   _first_ does it */</comment>

                <if_stmt pos:start="5367:17" pos:end="5369:56"><if pos:start="5367:17" pos:end="5369:56">if <condition pos:start="5367:20" pos:end="5367:58">(<expr pos:start="5367:21" pos:end="5367:57"><operator pos:start="5367:21" pos:end="5367:21">!</operator><operator pos:start="5367:22" pos:end="5367:22">(</operator><name pos:start="5367:23" pos:end="5367:34"><name pos:start="5367:23" pos:end="5367:23">s</name><operator pos:start="5367:24" pos:end="5367:25">-&gt;</operator><name pos:start="5367:26" pos:end="5367:27">tb</name><operator pos:start="5367:28" pos:end="5367:29">-&gt;</operator><name pos:start="5367:30" pos:end="5367:34">flags</name></name> <operator pos:start="5367:36" pos:end="5367:36">&amp;</operator> <name pos:start="5367:38" pos:end="5367:56">HF_INHIBIT_IRQ_MASK</name><operator pos:start="5367:57" pos:end="5367:57">)</operator></expr>)</condition><block type="pseudo" pos:start="5369:21" pos:end="5369:56"><block_content pos:start="5369:21" pos:end="5369:56">

                    <expr_stmt pos:start="5369:21" pos:end="5369:56"><expr pos:start="5369:21" pos:end="5369:55"><call pos:start="5369:21" pos:end="5369:55"><name pos:start="5369:21" pos:end="5369:46">gen_helper_set_inhibit_irq</name><argument_list pos:start="5369:47" pos:end="5369:55">(<argument pos:start="5369:48" pos:end="5369:54"><expr pos:start="5369:48" pos:end="5369:54"><name pos:start="5369:48" pos:end="5369:54">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="block" pos:start="5371:17" pos:end="5371:58">/* give a chance to handle pending irqs */</comment>

                <expr_stmt pos:start="5373:17" pos:end="5373:47"><expr pos:start="5373:17" pos:end="5373:46"><call pos:start="5373:17" pos:end="5373:46"><name pos:start="5373:17" pos:end="5373:26">gen_jmp_im</name><argument_list pos:start="5373:27" pos:end="5373:46">(<argument pos:start="5373:28" pos:end="5373:45"><expr pos:start="5373:28" pos:end="5373:45"><name pos:start="5373:28" pos:end="5373:32"><name pos:start="5373:28" pos:end="5373:28">s</name><operator pos:start="5373:29" pos:end="5373:30">-&gt;</operator><name pos:start="5373:31" pos:end="5373:32">pc</name></name> <operator pos:start="5373:34" pos:end="5373:34">-</operator> <name pos:start="5373:36" pos:end="5373:45"><name pos:start="5373:36" pos:end="5373:36">s</name><operator pos:start="5373:37" pos:end="5373:38">-&gt;</operator><name pos:start="5373:39" pos:end="5373:45">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5375:17" pos:end="5375:27"><expr pos:start="5375:17" pos:end="5375:26"><call pos:start="5375:17" pos:end="5375:26"><name pos:start="5375:17" pos:end="5375:23">gen_eob</name><argument_list pos:start="5375:24" pos:end="5375:26">(<argument pos:start="5375:25" pos:end="5375:25"><expr pos:start="5375:25" pos:end="5375:25"><name pos:start="5375:25" pos:end="5375:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5377:15" pos:end="5381:13">else <block pos:start="5377:20" pos:end="5381:13">{<block_content pos:start="5379:17" pos:end="5379:68">

                <expr_stmt pos:start="5379:17" pos:end="5379:68"><expr pos:start="5379:17" pos:end="5379:67"><call pos:start="5379:17" pos:end="5379:67"><name pos:start="5379:17" pos:end="5379:29">gen_exception</name><argument_list pos:start="5379:30" pos:end="5379:67">(<argument pos:start="5379:31" pos:end="5379:31"><expr pos:start="5379:31" pos:end="5379:31"><name pos:start="5379:31" pos:end="5379:31">s</name></expr></argument>, <argument pos:start="5379:34" pos:end="5379:43"><expr pos:start="5379:34" pos:end="5379:43"><name pos:start="5379:34" pos:end="5379:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5379:46" pos:end="5379:66"><expr pos:start="5379:46" pos:end="5379:66"><name pos:start="5379:46" pos:end="5379:53">pc_start</name> <operator pos:start="5379:55" pos:end="5379:55">-</operator> <name pos:start="5379:57" pos:end="5379:66"><name pos:start="5379:57" pos:end="5379:57">s</name><operator pos:start="5379:58" pos:end="5379:59">-&gt;</operator><name pos:start="5379:60" pos:end="5379:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="5383:11" pos:end="5395:9">else <block pos:start="5383:16" pos:end="5395:9">{<block_content pos:start="5385:13" pos:end="5393:13">

            <if_stmt pos:start="5385:13" pos:end="5393:13"><if pos:start="5385:13" pos:end="5389:13">if <condition pos:start="5385:16" pos:end="5385:29">(<expr pos:start="5385:17" pos:end="5385:28"><name pos:start="5385:17" pos:end="5385:23"><name pos:start="5385:17" pos:end="5385:17">s</name><operator pos:start="5385:18" pos:end="5385:19">-&gt;</operator><name pos:start="5385:20" pos:end="5385:23">iopl</name></name> <operator pos:start="5385:25" pos:end="5385:26">==</operator> <literal type="number" pos:start="5385:28" pos:end="5385:28">3</literal></expr>)</condition> <block pos:start="5385:31" pos:end="5389:13">{<block_content pos:start="5387:17" pos:end="5387:29">

                <goto pos:start="5387:17" pos:end="5387:29">goto <name pos:start="5387:22" pos:end="5387:28">gen_sti</name>;</goto>

            </block_content>}</block></if> <else pos:start="5389:15" pos:end="5393:13">else <block pos:start="5389:20" pos:end="5393:13">{<block_content pos:start="5391:17" pos:end="5391:68">

                <expr_stmt pos:start="5391:17" pos:end="5391:68"><expr pos:start="5391:17" pos:end="5391:67"><call pos:start="5391:17" pos:end="5391:67"><name pos:start="5391:17" pos:end="5391:29">gen_exception</name><argument_list pos:start="5391:30" pos:end="5391:67">(<argument pos:start="5391:31" pos:end="5391:31"><expr pos:start="5391:31" pos:end="5391:31"><name pos:start="5391:31" pos:end="5391:31">s</name></expr></argument>, <argument pos:start="5391:34" pos:end="5391:43"><expr pos:start="5391:34" pos:end="5391:43"><name pos:start="5391:34" pos:end="5391:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5391:46" pos:end="5391:66"><expr pos:start="5391:46" pos:end="5391:66"><name pos:start="5391:46" pos:end="5391:53">pc_start</name> <operator pos:start="5391:55" pos:end="5391:55">-</operator> <name pos:start="5391:57" pos:end="5391:66"><name pos:start="5391:57" pos:end="5391:57">s</name><operator pos:start="5391:58" pos:end="5391:59">-&gt;</operator><name pos:start="5391:60" pos:end="5391:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5397:9" pos:end="5397:14">break;</break>

    <case pos:start="5399:5" pos:end="5399:14">case <expr pos:start="5399:10" pos:end="5399:13"><literal type="number" pos:start="5399:10" pos:end="5399:13">0x62</literal></expr>:</case> <comment type="block" pos:start="5399:16" pos:end="5399:26">/* bound */</comment>

        <if_stmt pos:start="5401:9" pos:end="5403:28"><if pos:start="5401:9" pos:end="5403:28">if <condition pos:start="5401:12" pos:end="5401:22">(<expr pos:start="5401:13" pos:end="5401:21"><call pos:start="5401:13" pos:end="5401:21"><name pos:start="5401:13" pos:end="5401:18">CODE64</name><argument_list pos:start="5401:19" pos:end="5401:21">(<argument pos:start="5401:20" pos:end="5401:20"><expr pos:start="5401:20" pos:end="5401:20"><name pos:start="5401:20" pos:end="5401:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5403:13" pos:end="5403:28"><block_content pos:start="5403:13" pos:end="5403:28">

            <goto pos:start="5403:13" pos:end="5403:28">goto <name pos:start="5403:18" pos:end="5403:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5405:9" pos:end="5405:39"><expr pos:start="5405:9" pos:end="5405:38"><name pos:start="5405:9" pos:end="5405:10">ot</name> <operator pos:start="5405:12" pos:end="5405:12">=</operator> <ternary pos:start="5405:14" pos:end="5405:38"><condition pos:start="5405:14" pos:end="5405:20"><expr pos:start="5405:14" pos:end="5405:18"><name pos:start="5405:14" pos:end="5405:18">dflag</name></expr> ?</condition><then pos:start="5405:22" pos:end="5405:28"> <expr pos:start="5405:22" pos:end="5405:28"><name pos:start="5405:22" pos:end="5405:28">OT_LONG</name></expr> </then><else pos:start="5405:30" pos:end="5405:38">: <expr pos:start="5405:32" pos:end="5405:38"><name pos:start="5405:32" pos:end="5405:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="5407:9" pos:end="5407:44"><expr pos:start="5407:9" pos:end="5407:43"><name pos:start="5407:9" pos:end="5407:13">modrm</name> <operator pos:start="5407:15" pos:end="5407:15">=</operator> <call pos:start="5407:17" pos:end="5407:43"><name pos:start="5407:17" pos:end="5407:29">cpu_ldub_code</name><argument_list pos:start="5407:30" pos:end="5407:43">(<argument pos:start="5407:31" pos:end="5407:33"><expr pos:start="5407:31" pos:end="5407:33"><name pos:start="5407:31" pos:end="5407:33">env</name></expr></argument>, <argument pos:start="5407:36" pos:end="5407:42"><expr pos:start="5407:36" pos:end="5407:42"><name pos:start="5407:36" pos:end="5407:40"><name pos:start="5407:36" pos:end="5407:36">s</name><operator pos:start="5407:37" pos:end="5407:38">-&gt;</operator><name pos:start="5407:39" pos:end="5407:40">pc</name></name><operator pos:start="5407:41" pos:end="5407:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5409:9" pos:end="5409:31"><expr pos:start="5409:9" pos:end="5409:30"><name pos:start="5409:9" pos:end="5409:11">reg</name> <operator pos:start="5409:13" pos:end="5409:13">=</operator> <operator pos:start="5409:15" pos:end="5409:15">(</operator><name pos:start="5409:16" pos:end="5409:20">modrm</name> <operator pos:start="5409:22" pos:end="5409:23">&gt;&gt;</operator> <literal type="number" pos:start="5409:25" pos:end="5409:25">3</literal><operator pos:start="5409:26" pos:end="5409:26">)</operator> <operator pos:start="5409:28" pos:end="5409:28">&amp;</operator> <literal type="number" pos:start="5409:30" pos:end="5409:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="5411:9" pos:end="5411:31"><expr pos:start="5411:9" pos:end="5411:30"><name pos:start="5411:9" pos:end="5411:11">mod</name> <operator pos:start="5411:13" pos:end="5411:13">=</operator> <operator pos:start="5411:15" pos:end="5411:15">(</operator><name pos:start="5411:16" pos:end="5411:20">modrm</name> <operator pos:start="5411:22" pos:end="5411:23">&gt;&gt;</operator> <literal type="number" pos:start="5411:25" pos:end="5411:25">6</literal><operator pos:start="5411:26" pos:end="5411:26">)</operator> <operator pos:start="5411:28" pos:end="5411:28">&amp;</operator> <literal type="number" pos:start="5411:30" pos:end="5411:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="5413:9" pos:end="5415:28"><if pos:start="5413:9" pos:end="5415:28">if <condition pos:start="5413:12" pos:end="5413:21">(<expr pos:start="5413:13" pos:end="5413:20"><name pos:start="5413:13" pos:end="5413:15">mod</name> <operator pos:start="5413:17" pos:end="5413:18">==</operator> <literal type="number" pos:start="5413:20" pos:end="5413:20">3</literal></expr>)</condition><block type="pseudo" pos:start="5415:13" pos:end="5415:28"><block_content pos:start="5415:13" pos:end="5415:28">

            <goto pos:start="5415:13" pos:end="5415:28">goto <name pos:start="5415:18" pos:end="5415:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5417:9" pos:end="5417:38"><expr pos:start="5417:9" pos:end="5417:37"><call pos:start="5417:9" pos:end="5417:37"><name pos:start="5417:9" pos:end="5417:25">gen_op_mov_TN_reg</name><argument_list pos:start="5417:26" pos:end="5417:37">(<argument pos:start="5417:27" pos:end="5417:28"><expr pos:start="5417:27" pos:end="5417:28"><name pos:start="5417:27" pos:end="5417:28">ot</name></expr></argument>, <argument pos:start="5417:31" pos:end="5417:31"><expr pos:start="5417:31" pos:end="5417:31"><literal type="number" pos:start="5417:31" pos:end="5417:31">0</literal></expr></argument>, <argument pos:start="5417:34" pos:end="5417:36"><expr pos:start="5417:34" pos:end="5417:36"><name pos:start="5417:34" pos:end="5417:36">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5419:9" pos:end="5419:62"><expr pos:start="5419:9" pos:end="5419:61"><call pos:start="5419:9" pos:end="5419:61"><name pos:start="5419:9" pos:end="5419:21">gen_lea_modrm</name><argument_list pos:start="5419:22" pos:end="5419:61">(<argument pos:start="5419:23" pos:end="5419:25"><expr pos:start="5419:23" pos:end="5419:25"><name pos:start="5419:23" pos:end="5419:25">env</name></expr></argument>, <argument pos:start="5419:28" pos:end="5419:28"><expr pos:start="5419:28" pos:end="5419:28"><name pos:start="5419:28" pos:end="5419:28">s</name></expr></argument>, <argument pos:start="5419:31" pos:end="5419:35"><expr pos:start="5419:31" pos:end="5419:35"><name pos:start="5419:31" pos:end="5419:35">modrm</name></expr></argument>, <argument pos:start="5419:38" pos:end="5419:46"><expr pos:start="5419:38" pos:end="5419:46"><operator pos:start="5419:38" pos:end="5419:38">&amp;</operator><name pos:start="5419:39" pos:end="5419:46">reg_addr</name></expr></argument>, <argument pos:start="5419:49" pos:end="5419:60"><expr pos:start="5419:49" pos:end="5419:60"><operator pos:start="5419:49" pos:end="5419:49">&amp;</operator><name pos:start="5419:50" pos:end="5419:60">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5421:9" pos:end="5421:42"><expr pos:start="5421:9" pos:end="5421:41"><call pos:start="5421:9" pos:end="5421:41"><name pos:start="5421:9" pos:end="5421:18">gen_jmp_im</name><argument_list pos:start="5421:19" pos:end="5421:41">(<argument pos:start="5421:20" pos:end="5421:40"><expr pos:start="5421:20" pos:end="5421:40"><name pos:start="5421:20" pos:end="5421:27">pc_start</name> <operator pos:start="5421:29" pos:end="5421:29">-</operator> <name pos:start="5421:31" pos:end="5421:40"><name pos:start="5421:31" pos:end="5421:31">s</name><operator pos:start="5421:32" pos:end="5421:33">-&gt;</operator><name pos:start="5421:34" pos:end="5421:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5423:9" pos:end="5423:53"><expr pos:start="5423:9" pos:end="5423:52"><call pos:start="5423:9" pos:end="5423:52"><name pos:start="5423:9" pos:end="5423:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="5423:29" pos:end="5423:52">(<argument pos:start="5423:30" pos:end="5423:41"><expr pos:start="5423:30" pos:end="5423:41"><name pos:start="5423:30" pos:end="5423:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="5423:44" pos:end="5423:51"><expr pos:start="5423:44" pos:end="5423:51"><name pos:start="5423:44" pos:end="5423:51"><name pos:start="5423:44" pos:end="5423:48">cpu_T</name><index pos:start="5423:49" pos:end="5423:51">[<expr pos:start="5423:50" pos:end="5423:50"><literal type="number" pos:start="5423:50" pos:end="5423:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="5425:9" pos:end="5433:9"><if pos:start="5425:9" pos:end="5429:9">if <condition pos:start="5425:12" pos:end="5425:26">(<expr pos:start="5425:13" pos:end="5425:25"><name pos:start="5425:13" pos:end="5425:14">ot</name> <operator pos:start="5425:16" pos:end="5425:17">==</operator> <name pos:start="5425:19" pos:end="5425:25">OT_WORD</name></expr>)</condition> <block pos:start="5425:28" pos:end="5429:9">{<block_content pos:start="5427:13" pos:end="5427:61">

            <expr_stmt pos:start="5427:13" pos:end="5427:61"><expr pos:start="5427:13" pos:end="5427:60"><call pos:start="5427:13" pos:end="5427:60"><name pos:start="5427:13" pos:end="5427:29">gen_helper_boundw</name><argument_list pos:start="5427:30" pos:end="5427:60">(<argument pos:start="5427:31" pos:end="5427:37"><expr pos:start="5427:31" pos:end="5427:37"><name pos:start="5427:31" pos:end="5427:37">cpu_env</name></expr></argument>, <argument pos:start="5427:40" pos:end="5427:45"><expr pos:start="5427:40" pos:end="5427:45"><name pos:start="5427:40" pos:end="5427:45">cpu_A0</name></expr></argument>, <argument pos:start="5427:48" pos:end="5427:59"><expr pos:start="5427:48" pos:end="5427:59"><name pos:start="5427:48" pos:end="5427:59">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5429:11" pos:end="5433:9">else <block pos:start="5429:16" pos:end="5433:9">{<block_content pos:start="5431:13" pos:end="5431:61">

            <expr_stmt pos:start="5431:13" pos:end="5431:61"><expr pos:start="5431:13" pos:end="5431:60"><call pos:start="5431:13" pos:end="5431:60"><name pos:start="5431:13" pos:end="5431:29">gen_helper_boundl</name><argument_list pos:start="5431:30" pos:end="5431:60">(<argument pos:start="5431:31" pos:end="5431:37"><expr pos:start="5431:31" pos:end="5431:37"><name pos:start="5431:31" pos:end="5431:37">cpu_env</name></expr></argument>, <argument pos:start="5431:40" pos:end="5431:45"><expr pos:start="5431:40" pos:end="5431:45"><name pos:start="5431:40" pos:end="5431:45">cpu_A0</name></expr></argument>, <argument pos:start="5431:48" pos:end="5431:59"><expr pos:start="5431:48" pos:end="5431:59"><name pos:start="5431:48" pos:end="5431:59">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5435:9" pos:end="5435:14">break;</break>

    <case pos:start="5437:5" pos:end="5437:25">case <expr pos:start="5437:10" pos:end="5437:24"><literal type="number" pos:start="5437:10" pos:end="5437:14">0x1c8</literal> <operator pos:start="5437:16" pos:end="5437:18">...</operator> <literal type="number" pos:start="5437:20" pos:end="5437:24">0x1cf</literal></expr>:</case> <comment type="block" pos:start="5437:27" pos:end="5437:41">/* bswap reg */</comment>

        <expr_stmt pos:start="5439:9" pos:end="5442:0"><expr pos:start="5439:9" pos:end="5439:32"><name pos:start="5439:9" pos:end="5439:11">reg</name> <operator pos:start="5439:13" pos:end="5439:13">=</operator> <operator pos:start="5439:15" pos:end="5439:15">(</operator><name pos:start="5439:16" pos:end="5439:16">b</name> <operator pos:start="5439:18" pos:end="5439:18">&amp;</operator> <literal type="number" pos:start="5439:20" pos:end="5439:20">7</literal><operator pos:start="5439:21" pos:end="5439:21">)</operator> <operator pos:start="5439:23" pos:end="5439:23">|</operator> <call pos:start="5439:25" pos:end="5439:32"><name pos:start="5439:25" pos:end="5439:29">REX_B</name><argument_list pos:start="5439:30" pos:end="5439:32">(<argument pos:start="5439:31" pos:end="5439:31"><expr pos:start="5439:31" pos:end="5439:31"><name pos:start="5439:31" pos:end="5439:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="5441:1" pos:end="5441:20">#<cpp:directive pos:start="5441:2" pos:end="5441:6">ifdef</cpp:directive> <name pos:start="5441:8" pos:end="5441:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="5443:9" pos:end="5465:9"><if pos:start="5443:9" pos:end="5451:9">if <condition pos:start="5443:12" pos:end="5443:23">(<expr pos:start="5443:13" pos:end="5443:22"><name pos:start="5443:13" pos:end="5443:17">dflag</name> <operator pos:start="5443:19" pos:end="5443:20">==</operator> <literal type="number" pos:start="5443:22" pos:end="5443:22">2</literal></expr>)</condition> <block pos:start="5443:25" pos:end="5451:9">{<block_content pos:start="5445:13" pos:end="5449:44">

            <expr_stmt pos:start="5445:13" pos:end="5445:47"><expr pos:start="5445:13" pos:end="5445:46"><call pos:start="5445:13" pos:end="5445:46"><name pos:start="5445:13" pos:end="5445:29">gen_op_mov_TN_reg</name><argument_list pos:start="5445:30" pos:end="5445:46">(<argument pos:start="5445:31" pos:end="5445:37"><expr pos:start="5445:31" pos:end="5445:37"><name pos:start="5445:31" pos:end="5445:37">OT_QUAD</name></expr></argument>, <argument pos:start="5445:40" pos:end="5445:40"><expr pos:start="5445:40" pos:end="5445:40"><literal type="number" pos:start="5445:40" pos:end="5445:40">0</literal></expr></argument>, <argument pos:start="5445:43" pos:end="5445:45"><expr pos:start="5445:43" pos:end="5445:45"><name pos:start="5445:43" pos:end="5445:45">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5447:13" pos:end="5447:52"><expr pos:start="5447:13" pos:end="5447:51"><call pos:start="5447:13" pos:end="5447:51"><name pos:start="5447:13" pos:end="5447:31">tcg_gen_bswap64_i64</name><argument_list pos:start="5447:32" pos:end="5447:51">(<argument pos:start="5447:33" pos:end="5447:40"><expr pos:start="5447:33" pos:end="5447:40"><name pos:start="5447:33" pos:end="5447:40"><name pos:start="5447:33" pos:end="5447:37">cpu_T</name><index pos:start="5447:38" pos:end="5447:40">[<expr pos:start="5447:39" pos:end="5447:39"><literal type="number" pos:start="5447:39" pos:end="5447:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5447:43" pos:end="5447:50"><expr pos:start="5447:43" pos:end="5447:50"><name pos:start="5447:43" pos:end="5447:50"><name pos:start="5447:43" pos:end="5447:47">cpu_T</name><index pos:start="5447:48" pos:end="5447:50">[<expr pos:start="5447:49" pos:end="5447:49"><literal type="number" pos:start="5447:49" pos:end="5447:49">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5449:13" pos:end="5449:44"><expr pos:start="5449:13" pos:end="5449:43"><call pos:start="5449:13" pos:end="5449:43"><name pos:start="5449:13" pos:end="5449:29">gen_op_mov_reg_T0</name><argument_list pos:start="5449:30" pos:end="5449:43">(<argument pos:start="5449:31" pos:end="5449:37"><expr pos:start="5449:31" pos:end="5449:37"><name pos:start="5449:31" pos:end="5449:37">OT_QUAD</name></expr></argument>, <argument pos:start="5449:40" pos:end="5449:42"><expr pos:start="5449:40" pos:end="5449:42"><name pos:start="5449:40" pos:end="5449:42">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5451:11" pos:end="5465:9">else

<cpp:endif pos:start="5453:1" pos:end="5453:6">#<cpp:directive pos:start="5453:2" pos:end="5453:6">endif</cpp:directive></cpp:endif>

        <block pos:start="5455:9" pos:end="5465:9">{<block_content pos:start="5457:13" pos:end="5463:44">

            <expr_stmt pos:start="5457:13" pos:end="5457:47"><expr pos:start="5457:13" pos:end="5457:46"><call pos:start="5457:13" pos:end="5457:46"><name pos:start="5457:13" pos:end="5457:29">gen_op_mov_TN_reg</name><argument_list pos:start="5457:30" pos:end="5457:46">(<argument pos:start="5457:31" pos:end="5457:37"><expr pos:start="5457:31" pos:end="5457:37"><name pos:start="5457:31" pos:end="5457:37">OT_LONG</name></expr></argument>, <argument pos:start="5457:40" pos:end="5457:40"><expr pos:start="5457:40" pos:end="5457:40"><literal type="number" pos:start="5457:40" pos:end="5457:40">0</literal></expr></argument>, <argument pos:start="5457:43" pos:end="5457:45"><expr pos:start="5457:43" pos:end="5457:45"><name pos:start="5457:43" pos:end="5457:45">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5459:13" pos:end="5459:50"><expr pos:start="5459:13" pos:end="5459:49"><call pos:start="5459:13" pos:end="5459:49"><name pos:start="5459:13" pos:end="5459:29">tcg_gen_ext32u_tl</name><argument_list pos:start="5459:30" pos:end="5459:49">(<argument pos:start="5459:31" pos:end="5459:38"><expr pos:start="5459:31" pos:end="5459:38"><name pos:start="5459:31" pos:end="5459:38"><name pos:start="5459:31" pos:end="5459:35">cpu_T</name><index pos:start="5459:36" pos:end="5459:38">[<expr pos:start="5459:37" pos:end="5459:37"><literal type="number" pos:start="5459:37" pos:end="5459:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5459:41" pos:end="5459:48"><expr pos:start="5459:41" pos:end="5459:48"><name pos:start="5459:41" pos:end="5459:48"><name pos:start="5459:41" pos:end="5459:45">cpu_T</name><index pos:start="5459:46" pos:end="5459:48">[<expr pos:start="5459:47" pos:end="5459:47"><literal type="number" pos:start="5459:47" pos:end="5459:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5461:13" pos:end="5461:51"><expr pos:start="5461:13" pos:end="5461:50"><call pos:start="5461:13" pos:end="5461:50"><name pos:start="5461:13" pos:end="5461:30">tcg_gen_bswap32_tl</name><argument_list pos:start="5461:31" pos:end="5461:50">(<argument pos:start="5461:32" pos:end="5461:39"><expr pos:start="5461:32" pos:end="5461:39"><name pos:start="5461:32" pos:end="5461:39"><name pos:start="5461:32" pos:end="5461:36">cpu_T</name><index pos:start="5461:37" pos:end="5461:39">[<expr pos:start="5461:38" pos:end="5461:38"><literal type="number" pos:start="5461:38" pos:end="5461:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5461:42" pos:end="5461:49"><expr pos:start="5461:42" pos:end="5461:49"><name pos:start="5461:42" pos:end="5461:49"><name pos:start="5461:42" pos:end="5461:46">cpu_T</name><index pos:start="5461:47" pos:end="5461:49">[<expr pos:start="5461:48" pos:end="5461:48"><literal type="number" pos:start="5461:48" pos:end="5461:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5463:13" pos:end="5463:44"><expr pos:start="5463:13" pos:end="5463:43"><call pos:start="5463:13" pos:end="5463:43"><name pos:start="5463:13" pos:end="5463:29">gen_op_mov_reg_T0</name><argument_list pos:start="5463:30" pos:end="5463:43">(<argument pos:start="5463:31" pos:end="5463:37"><expr pos:start="5463:31" pos:end="5463:37"><name pos:start="5463:31" pos:end="5463:37">OT_LONG</name></expr></argument>, <argument pos:start="5463:40" pos:end="5463:42"><expr pos:start="5463:40" pos:end="5463:42"><name pos:start="5463:40" pos:end="5463:42">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5467:9" pos:end="5467:14">break;</break>

    <case pos:start="5469:5" pos:end="5469:14">case <expr pos:start="5469:10" pos:end="5469:13"><literal type="number" pos:start="5469:10" pos:end="5469:13">0xd6</literal></expr>:</case> <comment type="block" pos:start="5469:16" pos:end="5469:25">/* salc */</comment>

        <if_stmt pos:start="5471:9" pos:end="5473:28"><if pos:start="5471:9" pos:end="5473:28">if <condition pos:start="5471:12" pos:end="5471:22">(<expr pos:start="5471:13" pos:end="5471:21"><call pos:start="5471:13" pos:end="5471:21"><name pos:start="5471:13" pos:end="5471:18">CODE64</name><argument_list pos:start="5471:19" pos:end="5471:21">(<argument pos:start="5471:20" pos:end="5471:20"><expr pos:start="5471:20" pos:end="5471:20"><name pos:start="5471:20" pos:end="5471:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5473:13" pos:end="5473:28"><block_content pos:start="5473:13" pos:end="5473:28">

            <goto pos:start="5473:13" pos:end="5473:28">goto <name pos:start="5473:18" pos:end="5473:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5475:9" pos:end="5477:39"><if pos:start="5475:9" pos:end="5477:39">if <condition pos:start="5475:12" pos:end="5475:38">(<expr pos:start="5475:13" pos:end="5475:37"><name pos:start="5475:13" pos:end="5475:20"><name pos:start="5475:13" pos:end="5475:13">s</name><operator pos:start="5475:14" pos:end="5475:15">-&gt;</operator><name pos:start="5475:16" pos:end="5475:20">cc_op</name></name> <operator pos:start="5475:22" pos:end="5475:23">!=</operator> <name pos:start="5475:25" pos:end="5475:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5477:13" pos:end="5477:39"><block_content pos:start="5477:13" pos:end="5477:39">

            <expr_stmt pos:start="5477:13" pos:end="5477:39"><expr pos:start="5477:13" pos:end="5477:38"><call pos:start="5477:13" pos:end="5477:38"><name pos:start="5477:13" pos:end="5477:28">gen_op_set_cc_op</name><argument_list pos:start="5477:29" pos:end="5477:38">(<argument pos:start="5477:30" pos:end="5477:37"><expr pos:start="5477:30" pos:end="5477:37"><name pos:start="5477:30" pos:end="5477:37"><name pos:start="5477:30" pos:end="5477:30">s</name><operator pos:start="5477:31" pos:end="5477:32">-&gt;</operator><name pos:start="5477:33" pos:end="5477:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5479:9" pos:end="5479:39"><expr pos:start="5479:9" pos:end="5479:38"><call pos:start="5479:9" pos:end="5479:38"><name pos:start="5479:9" pos:end="5479:28">gen_compute_eflags_c</name><argument_list pos:start="5479:29" pos:end="5479:38">(<argument pos:start="5479:30" pos:end="5479:37"><expr pos:start="5479:30" pos:end="5479:37"><name pos:start="5479:30" pos:end="5479:37"><name pos:start="5479:30" pos:end="5479:34">cpu_T</name><index pos:start="5479:35" pos:end="5479:37">[<expr pos:start="5479:36" pos:end="5479:36"><literal type="number" pos:start="5479:36" pos:end="5479:36">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5481:9" pos:end="5481:43"><expr pos:start="5481:9" pos:end="5481:42"><call pos:start="5481:9" pos:end="5481:42"><name pos:start="5481:9" pos:end="5481:22">tcg_gen_neg_tl</name><argument_list pos:start="5481:23" pos:end="5481:42">(<argument pos:start="5481:24" pos:end="5481:31"><expr pos:start="5481:24" pos:end="5481:31"><name pos:start="5481:24" pos:end="5481:31"><name pos:start="5481:24" pos:end="5481:28">cpu_T</name><index pos:start="5481:29" pos:end="5481:31">[<expr pos:start="5481:30" pos:end="5481:30"><literal type="number" pos:start="5481:30" pos:end="5481:30">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5481:34" pos:end="5481:41"><expr pos:start="5481:34" pos:end="5481:41"><name pos:start="5481:34" pos:end="5481:41"><name pos:start="5481:34" pos:end="5481:38">cpu_T</name><index pos:start="5481:39" pos:end="5481:41">[<expr pos:start="5481:40" pos:end="5481:40"><literal type="number" pos:start="5481:40" pos:end="5481:40">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5483:9" pos:end="5483:42"><expr pos:start="5483:9" pos:end="5483:41"><call pos:start="5483:9" pos:end="5483:41"><name pos:start="5483:9" pos:end="5483:25">gen_op_mov_reg_T0</name><argument_list pos:start="5483:26" pos:end="5483:41">(<argument pos:start="5483:27" pos:end="5483:33"><expr pos:start="5483:27" pos:end="5483:33"><name pos:start="5483:27" pos:end="5483:33">OT_BYTE</name></expr></argument>, <argument pos:start="5483:36" pos:end="5483:40"><expr pos:start="5483:36" pos:end="5483:40"><name pos:start="5483:36" pos:end="5483:40">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5485:9" pos:end="5485:14">break;</break>

    <case pos:start="5487:5" pos:end="5487:14">case <expr pos:start="5487:10" pos:end="5487:13"><literal type="number" pos:start="5487:10" pos:end="5487:13">0xe0</literal></expr>:</case> <comment type="block" pos:start="5487:16" pos:end="5487:27">/* loopnz */</comment>

    <case pos:start="5489:5" pos:end="5489:14">case <expr pos:start="5489:10" pos:end="5489:13"><literal type="number" pos:start="5489:10" pos:end="5489:13">0xe1</literal></expr>:</case> <comment type="block" pos:start="5489:16" pos:end="5489:26">/* loopz */</comment>

    <case pos:start="5491:5" pos:end="5491:14">case <expr pos:start="5491:10" pos:end="5491:13"><literal type="number" pos:start="5491:10" pos:end="5491:13">0xe2</literal></expr>:</case> <comment type="block" pos:start="5491:16" pos:end="5491:25">/* loop */</comment>

    <case pos:start="5493:5" pos:end="5493:14">case <expr pos:start="5493:10" pos:end="5493:13"><literal type="number" pos:start="5493:10" pos:end="5493:13">0xe3</literal></expr>:</case> <comment type="block" pos:start="5493:16" pos:end="5493:26">/* jecxz */</comment>

        <block pos:start="5495:9" pos:end="5587:9">{<block_content pos:start="5497:13" pos:end="5585:23">

            <decl_stmt pos:start="5497:13" pos:end="5497:27"><decl pos:start="5497:13" pos:end="5497:18"><type pos:start="5497:13" pos:end="5497:15"><name pos:start="5497:13" pos:end="5497:15">int</name></type> <name pos:start="5497:17" pos:end="5497:18">l1</name></decl>, <decl pos:start="5497:21" pos:end="5497:22"><type ref="prev" pos:start="5497:13" pos:end="5497:15"/><name pos:start="5497:21" pos:end="5497:22">l2</name></decl>, <decl pos:start="5497:25" pos:end="5497:26"><type ref="prev" pos:start="5497:13" pos:end="5497:15"/><name pos:start="5497:25" pos:end="5497:26">l3</name></decl>;</decl_stmt>



            <expr_stmt pos:start="5501:13" pos:end="5501:53"><expr pos:start="5501:13" pos:end="5501:52"><name pos:start="5501:13" pos:end="5501:16">tval</name> <operator pos:start="5501:18" pos:end="5501:18">=</operator> <operator pos:start="5501:20" pos:end="5501:20">(</operator><name pos:start="5501:21" pos:end="5501:26">int8_t</name><operator pos:start="5501:27" pos:end="5501:27">)</operator><call pos:start="5501:28" pos:end="5501:52"><name pos:start="5501:28" pos:end="5501:35">insn_get</name><argument_list pos:start="5501:36" pos:end="5501:52">(<argument pos:start="5501:37" pos:end="5501:39"><expr pos:start="5501:37" pos:end="5501:39"><name pos:start="5501:37" pos:end="5501:39">env</name></expr></argument>, <argument pos:start="5501:42" pos:end="5501:42"><expr pos:start="5501:42" pos:end="5501:42"><name pos:start="5501:42" pos:end="5501:42">s</name></expr></argument>, <argument pos:start="5501:45" pos:end="5501:51"><expr pos:start="5501:45" pos:end="5501:51"><name pos:start="5501:45" pos:end="5501:51">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5503:13" pos:end="5503:42"><expr pos:start="5503:13" pos:end="5503:41"><name pos:start="5503:13" pos:end="5503:20">next_eip</name> <operator pos:start="5503:22" pos:end="5503:22">=</operator> <name pos:start="5503:24" pos:end="5503:28"><name pos:start="5503:24" pos:end="5503:24">s</name><operator pos:start="5503:25" pos:end="5503:26">-&gt;</operator><name pos:start="5503:27" pos:end="5503:28">pc</name></name> <operator pos:start="5503:30" pos:end="5503:30">-</operator> <name pos:start="5503:32" pos:end="5503:41"><name pos:start="5503:32" pos:end="5503:32">s</name><operator pos:start="5503:33" pos:end="5503:34">-&gt;</operator><name pos:start="5503:35" pos:end="5503:41">cs_base</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="5505:13" pos:end="5505:29"><expr pos:start="5505:13" pos:end="5505:28"><name pos:start="5505:13" pos:end="5505:16">tval</name> <operator pos:start="5505:18" pos:end="5505:19">+=</operator> <name pos:start="5505:21" pos:end="5505:28">next_eip</name></expr>;</expr_stmt>

            <if_stmt pos:start="5507:13" pos:end="5509:31"><if pos:start="5507:13" pos:end="5509:31">if <condition pos:start="5507:16" pos:end="5507:30">(<expr pos:start="5507:17" pos:end="5507:29"><name pos:start="5507:17" pos:end="5507:24"><name pos:start="5507:17" pos:end="5507:17">s</name><operator pos:start="5507:18" pos:end="5507:19">-&gt;</operator><name pos:start="5507:20" pos:end="5507:24">dflag</name></name> <operator pos:start="5507:26" pos:end="5507:27">==</operator> <literal type="number" pos:start="5507:29" pos:end="5507:29">0</literal></expr>)</condition><block type="pseudo" pos:start="5509:17" pos:end="5509:31"><block_content pos:start="5509:17" pos:end="5509:31">

                <expr_stmt pos:start="5509:17" pos:end="5509:31"><expr pos:start="5509:17" pos:end="5509:30"><name pos:start="5509:17" pos:end="5509:20">tval</name> <operator pos:start="5509:22" pos:end="5509:23">&amp;=</operator> <literal type="number" pos:start="5509:25" pos:end="5509:30">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="5513:13" pos:end="5513:33"><expr pos:start="5513:13" pos:end="5513:32"><name pos:start="5513:13" pos:end="5513:14">l1</name> <operator pos:start="5513:16" pos:end="5513:16">=</operator> <call pos:start="5513:18" pos:end="5513:32"><name pos:start="5513:18" pos:end="5513:30">gen_new_label</name><argument_list pos:start="5513:31" pos:end="5513:32">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5515:13" pos:end="5515:33"><expr pos:start="5515:13" pos:end="5515:32"><name pos:start="5515:13" pos:end="5515:14">l2</name> <operator pos:start="5515:16" pos:end="5515:16">=</operator> <call pos:start="5515:18" pos:end="5515:32"><name pos:start="5515:18" pos:end="5515:30">gen_new_label</name><argument_list pos:start="5515:31" pos:end="5515:32">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5517:13" pos:end="5517:33"><expr pos:start="5517:13" pos:end="5517:32"><name pos:start="5517:13" pos:end="5517:14">l3</name> <operator pos:start="5517:16" pos:end="5517:16">=</operator> <call pos:start="5517:18" pos:end="5517:32"><name pos:start="5517:18" pos:end="5517:30">gen_new_label</name><argument_list pos:start="5517:31" pos:end="5517:32">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5519:13" pos:end="5519:19"><expr pos:start="5519:13" pos:end="5519:18"><name pos:start="5519:13" pos:end="5519:13">b</name> <operator pos:start="5519:15" pos:end="5519:16">&amp;=</operator> <literal type="number" pos:start="5519:18" pos:end="5519:18">3</literal></expr>;</expr_stmt>

            <switch pos:start="5521:13" pos:end="5567:13">switch<condition pos:start="5521:19" pos:end="5521:21">(<expr pos:start="5521:20" pos:end="5521:20"><name pos:start="5521:20" pos:end="5521:20">b</name></expr>)</condition> <block pos:start="5521:23" pos:end="5567:13">{<block_content pos:start="5523:13" pos:end="5565:22">

            <case pos:start="5523:13" pos:end="5523:19">case <expr pos:start="5523:18" pos:end="5523:18"><literal type="number" pos:start="5523:18" pos:end="5523:18">0</literal></expr>:</case> <comment type="block" pos:start="5523:21" pos:end="5523:32">/* loopnz */</comment>

            <case pos:start="5525:13" pos:end="5525:19">case <expr pos:start="5525:18" pos:end="5525:18"><literal type="number" pos:start="5525:18" pos:end="5525:18">1</literal></expr>:</case> <comment type="block" pos:start="5525:21" pos:end="5525:31">/* loopz */</comment>

                <if_stmt pos:start="5527:17" pos:end="5529:47"><if pos:start="5527:17" pos:end="5529:47">if <condition pos:start="5527:20" pos:end="5527:46">(<expr pos:start="5527:21" pos:end="5527:45"><name pos:start="5527:21" pos:end="5527:28"><name pos:start="5527:21" pos:end="5527:21">s</name><operator pos:start="5527:22" pos:end="5527:23">-&gt;</operator><name pos:start="5527:24" pos:end="5527:28">cc_op</name></name> <operator pos:start="5527:30" pos:end="5527:31">!=</operator> <name pos:start="5527:33" pos:end="5527:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5529:21" pos:end="5529:47"><block_content pos:start="5529:21" pos:end="5529:47">

                    <expr_stmt pos:start="5529:21" pos:end="5529:47"><expr pos:start="5529:21" pos:end="5529:46"><call pos:start="5529:21" pos:end="5529:46"><name pos:start="5529:21" pos:end="5529:36">gen_op_set_cc_op</name><argument_list pos:start="5529:37" pos:end="5529:46">(<argument pos:start="5529:38" pos:end="5529:45"><expr pos:start="5529:38" pos:end="5529:45"><name pos:start="5529:38" pos:end="5529:45"><name pos:start="5529:38" pos:end="5529:38">s</name><operator pos:start="5529:39" pos:end="5529:40">-&gt;</operator><name pos:start="5529:41" pos:end="5529:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="5531:17" pos:end="5531:55"><expr pos:start="5531:17" pos:end="5531:54"><call pos:start="5531:17" pos:end="5531:54"><name pos:start="5531:17" pos:end="5531:33">gen_op_add_reg_im</name><argument_list pos:start="5531:34" pos:end="5531:54">(<argument pos:start="5531:35" pos:end="5531:42"><expr pos:start="5531:35" pos:end="5531:42"><name pos:start="5531:35" pos:end="5531:42"><name pos:start="5531:35" pos:end="5531:35">s</name><operator pos:start="5531:36" pos:end="5531:37">-&gt;</operator><name pos:start="5531:38" pos:end="5531:42">aflag</name></name></expr></argument>, <argument pos:start="5531:45" pos:end="5531:49"><expr pos:start="5531:45" pos:end="5531:49"><name pos:start="5531:45" pos:end="5531:49">R_ECX</name></expr></argument>, <argument pos:start="5531:52" pos:end="5531:53"><expr pos:start="5531:52" pos:end="5531:53"><operator pos:start="5531:52" pos:end="5531:52">-</operator><literal type="number" pos:start="5531:53" pos:end="5531:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5533:17" pos:end="5533:44"><expr pos:start="5533:17" pos:end="5533:43"><call pos:start="5533:17" pos:end="5533:43"><name pos:start="5533:17" pos:end="5533:29">gen_op_jz_ecx</name><argument_list pos:start="5533:30" pos:end="5533:43">(<argument pos:start="5533:31" pos:end="5533:38"><expr pos:start="5533:31" pos:end="5533:38"><name pos:start="5533:31" pos:end="5533:38"><name pos:start="5533:31" pos:end="5533:31">s</name><operator pos:start="5533:32" pos:end="5533:33">-&gt;</operator><name pos:start="5533:34" pos:end="5533:38">aflag</name></name></expr></argument>, <argument pos:start="5533:41" pos:end="5533:42"><expr pos:start="5533:41" pos:end="5533:42"><name pos:start="5533:41" pos:end="5533:42">l3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5535:17" pos:end="5535:45"><expr pos:start="5535:17" pos:end="5535:44"><call pos:start="5535:17" pos:end="5535:44"><name pos:start="5535:17" pos:end="5535:34">gen_compute_eflags</name><argument_list pos:start="5535:35" pos:end="5535:44">(<argument pos:start="5535:36" pos:end="5535:43"><expr pos:start="5535:36" pos:end="5535:43"><name pos:start="5535:36" pos:end="5535:43">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5537:17" pos:end="5537:58"><expr pos:start="5537:17" pos:end="5537:57"><call pos:start="5537:17" pos:end="5537:57"><name pos:start="5537:17" pos:end="5537:31">tcg_gen_andi_tl</name><argument_list pos:start="5537:32" pos:end="5537:57">(<argument pos:start="5537:33" pos:end="5537:40"><expr pos:start="5537:33" pos:end="5537:40"><name pos:start="5537:33" pos:end="5537:40">cpu_tmp0</name></expr></argument>, <argument pos:start="5537:43" pos:end="5537:50"><expr pos:start="5537:43" pos:end="5537:50"><name pos:start="5537:43" pos:end="5537:50">cpu_tmp0</name></expr></argument>, <argument pos:start="5537:53" pos:end="5537:56"><expr pos:start="5537:53" pos:end="5537:56"><name pos:start="5537:53" pos:end="5537:56">CC_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="5539:17" pos:end="5547:17"><if pos:start="5539:17" pos:end="5543:17">if <condition pos:start="5539:20" pos:end="5539:27">(<expr pos:start="5539:21" pos:end="5539:26"><name pos:start="5539:21" pos:end="5539:21">b</name> <operator pos:start="5539:23" pos:end="5539:24">==</operator> <literal type="number" pos:start="5539:26" pos:end="5539:26">0</literal></expr>)</condition> <block pos:start="5539:29" pos:end="5543:17">{<block_content pos:start="5541:21" pos:end="5541:69">

                    <expr_stmt pos:start="5541:21" pos:end="5541:69"><expr pos:start="5541:21" pos:end="5541:68"><call pos:start="5541:21" pos:end="5541:68"><name pos:start="5541:21" pos:end="5541:38">tcg_gen_brcondi_tl</name><argument_list pos:start="5541:39" pos:end="5541:68">(<argument pos:start="5541:40" pos:end="5541:50"><expr pos:start="5541:40" pos:end="5541:50"><name pos:start="5541:40" pos:end="5541:50">TCG_COND_EQ</name></expr></argument>, <argument pos:start="5541:53" pos:end="5541:60"><expr pos:start="5541:53" pos:end="5541:60"><name pos:start="5541:53" pos:end="5541:60">cpu_tmp0</name></expr></argument>, <argument pos:start="5541:63" pos:end="5541:63"><expr pos:start="5541:63" pos:end="5541:63"><literal type="number" pos:start="5541:63" pos:end="5541:63">0</literal></expr></argument>, <argument pos:start="5541:66" pos:end="5541:67"><expr pos:start="5541:66" pos:end="5541:67"><name pos:start="5541:66" pos:end="5541:67">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="5543:19" pos:end="5547:17">else <block pos:start="5543:24" pos:end="5547:17">{<block_content pos:start="5545:21" pos:end="5545:69">

                    <expr_stmt pos:start="5545:21" pos:end="5545:69"><expr pos:start="5545:21" pos:end="5545:68"><call pos:start="5545:21" pos:end="5545:68"><name pos:start="5545:21" pos:end="5545:38">tcg_gen_brcondi_tl</name><argument_list pos:start="5545:39" pos:end="5545:68">(<argument pos:start="5545:40" pos:end="5545:50"><expr pos:start="5545:40" pos:end="5545:50"><name pos:start="5545:40" pos:end="5545:50">TCG_COND_NE</name></expr></argument>, <argument pos:start="5545:53" pos:end="5545:60"><expr pos:start="5545:53" pos:end="5545:60"><name pos:start="5545:53" pos:end="5545:60">cpu_tmp0</name></expr></argument>, <argument pos:start="5545:63" pos:end="5545:63"><expr pos:start="5545:63" pos:end="5545:63"><literal type="number" pos:start="5545:63" pos:end="5545:63">0</literal></expr></argument>, <argument pos:start="5545:66" pos:end="5545:67"><expr pos:start="5545:66" pos:end="5545:67"><name pos:start="5545:66" pos:end="5545:67">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="5549:17" pos:end="5549:22">break;</break>

            <case pos:start="5551:13" pos:end="5551:19">case <expr pos:start="5551:18" pos:end="5551:18"><literal type="number" pos:start="5551:18" pos:end="5551:18">2</literal></expr>:</case> <comment type="block" pos:start="5551:21" pos:end="5551:30">/* loop */</comment>

                <expr_stmt pos:start="5553:17" pos:end="5553:55"><expr pos:start="5553:17" pos:end="5553:54"><call pos:start="5553:17" pos:end="5553:54"><name pos:start="5553:17" pos:end="5553:33">gen_op_add_reg_im</name><argument_list pos:start="5553:34" pos:end="5553:54">(<argument pos:start="5553:35" pos:end="5553:42"><expr pos:start="5553:35" pos:end="5553:42"><name pos:start="5553:35" pos:end="5553:42"><name pos:start="5553:35" pos:end="5553:35">s</name><operator pos:start="5553:36" pos:end="5553:37">-&gt;</operator><name pos:start="5553:38" pos:end="5553:42">aflag</name></name></expr></argument>, <argument pos:start="5553:45" pos:end="5553:49"><expr pos:start="5553:45" pos:end="5553:49"><name pos:start="5553:45" pos:end="5553:49">R_ECX</name></expr></argument>, <argument pos:start="5553:52" pos:end="5553:53"><expr pos:start="5553:52" pos:end="5553:53"><operator pos:start="5553:52" pos:end="5553:52">-</operator><literal type="number" pos:start="5553:53" pos:end="5553:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5555:17" pos:end="5555:45"><expr pos:start="5555:17" pos:end="5555:44"><call pos:start="5555:17" pos:end="5555:44"><name pos:start="5555:17" pos:end="5555:30">gen_op_jnz_ecx</name><argument_list pos:start="5555:31" pos:end="5555:44">(<argument pos:start="5555:32" pos:end="5555:39"><expr pos:start="5555:32" pos:end="5555:39"><name pos:start="5555:32" pos:end="5555:39"><name pos:start="5555:32" pos:end="5555:32">s</name><operator pos:start="5555:33" pos:end="5555:34">-&gt;</operator><name pos:start="5555:35" pos:end="5555:39">aflag</name></name></expr></argument>, <argument pos:start="5555:42" pos:end="5555:43"><expr pos:start="5555:42" pos:end="5555:43"><name pos:start="5555:42" pos:end="5555:43">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="5557:17" pos:end="5557:22">break;</break>

            <default pos:start="5559:13" pos:end="5559:20">default:</default>

            <case pos:start="5561:13" pos:end="5561:19">case <expr pos:start="5561:18" pos:end="5561:18"><literal type="number" pos:start="5561:18" pos:end="5561:18">3</literal></expr>:</case> <comment type="block" pos:start="5561:21" pos:end="5561:30">/* jcxz */</comment>

                <expr_stmt pos:start="5563:17" pos:end="5563:44"><expr pos:start="5563:17" pos:end="5563:43"><call pos:start="5563:17" pos:end="5563:43"><name pos:start="5563:17" pos:end="5563:29">gen_op_jz_ecx</name><argument_list pos:start="5563:30" pos:end="5563:43">(<argument pos:start="5563:31" pos:end="5563:38"><expr pos:start="5563:31" pos:end="5563:38"><name pos:start="5563:31" pos:end="5563:38"><name pos:start="5563:31" pos:end="5563:31">s</name><operator pos:start="5563:32" pos:end="5563:33">-&gt;</operator><name pos:start="5563:34" pos:end="5563:38">aflag</name></name></expr></argument>, <argument pos:start="5563:41" pos:end="5563:42"><expr pos:start="5563:41" pos:end="5563:42"><name pos:start="5563:41" pos:end="5563:42">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="5565:17" pos:end="5565:22">break;</break>

            </block_content>}</block></switch>



            <expr_stmt pos:start="5571:13" pos:end="5571:30"><expr pos:start="5571:13" pos:end="5571:29"><call pos:start="5571:13" pos:end="5571:29"><name pos:start="5571:13" pos:end="5571:25">gen_set_label</name><argument_list pos:start="5571:26" pos:end="5571:29">(<argument pos:start="5571:27" pos:end="5571:28"><expr pos:start="5571:27" pos:end="5571:28"><name pos:start="5571:27" pos:end="5571:28">l3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5573:13" pos:end="5573:33"><expr pos:start="5573:13" pos:end="5573:32"><call pos:start="5573:13" pos:end="5573:32"><name pos:start="5573:13" pos:end="5573:22">gen_jmp_im</name><argument_list pos:start="5573:23" pos:end="5573:32">(<argument pos:start="5573:24" pos:end="5573:31"><expr pos:start="5573:24" pos:end="5573:31"><name pos:start="5573:24" pos:end="5573:31">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5575:13" pos:end="5575:27"><expr pos:start="5575:13" pos:end="5575:26"><call pos:start="5575:13" pos:end="5575:26"><name pos:start="5575:13" pos:end="5575:22">tcg_gen_br</name><argument_list pos:start="5575:23" pos:end="5575:26">(<argument pos:start="5575:24" pos:end="5575:25"><expr pos:start="5575:24" pos:end="5575:25"><name pos:start="5575:24" pos:end="5575:25">l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="5579:13" pos:end="5579:30"><expr pos:start="5579:13" pos:end="5579:29"><call pos:start="5579:13" pos:end="5579:29"><name pos:start="5579:13" pos:end="5579:25">gen_set_label</name><argument_list pos:start="5579:26" pos:end="5579:29">(<argument pos:start="5579:27" pos:end="5579:28"><expr pos:start="5579:27" pos:end="5579:28"><name pos:start="5579:27" pos:end="5579:28">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5581:13" pos:end="5581:29"><expr pos:start="5581:13" pos:end="5581:28"><call pos:start="5581:13" pos:end="5581:28"><name pos:start="5581:13" pos:end="5581:22">gen_jmp_im</name><argument_list pos:start="5581:23" pos:end="5581:28">(<argument pos:start="5581:24" pos:end="5581:27"><expr pos:start="5581:24" pos:end="5581:27"><name pos:start="5581:24" pos:end="5581:27">tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5583:13" pos:end="5583:30"><expr pos:start="5583:13" pos:end="5583:29"><call pos:start="5583:13" pos:end="5583:29"><name pos:start="5583:13" pos:end="5583:25">gen_set_label</name><argument_list pos:start="5583:26" pos:end="5583:29">(<argument pos:start="5583:27" pos:end="5583:28"><expr pos:start="5583:27" pos:end="5583:28"><name pos:start="5583:27" pos:end="5583:28">l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5585:13" pos:end="5585:23"><expr pos:start="5585:13" pos:end="5585:22"><call pos:start="5585:13" pos:end="5585:22"><name pos:start="5585:13" pos:end="5585:19">gen_eob</name><argument_list pos:start="5585:20" pos:end="5585:22">(<argument pos:start="5585:21" pos:end="5585:21"><expr pos:start="5585:21" pos:end="5585:21"><name pos:start="5585:21" pos:end="5585:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="5589:9" pos:end="5589:14">break;</break>

    <case pos:start="5591:5" pos:end="5591:15">case <expr pos:start="5591:10" pos:end="5591:14"><literal type="number" pos:start="5591:10" pos:end="5591:14">0x130</literal></expr>:</case> <comment type="block" pos:start="5591:17" pos:end="5591:27">/* wrmsr */</comment>

    <case pos:start="5593:5" pos:end="5593:15">case <expr pos:start="5593:10" pos:end="5593:14"><literal type="number" pos:start="5593:10" pos:end="5593:14">0x132</literal></expr>:</case> <comment type="block" pos:start="5593:17" pos:end="5593:27">/* rdmsr */</comment>

        <if_stmt pos:start="5595:9" pos:end="5617:9"><if pos:start="5595:9" pos:end="5599:9">if <condition pos:start="5595:12" pos:end="5595:24">(<expr pos:start="5595:13" pos:end="5595:23"><name pos:start="5595:13" pos:end="5595:18"><name pos:start="5595:13" pos:end="5595:13">s</name><operator pos:start="5595:14" pos:end="5595:15">-&gt;</operator><name pos:start="5595:16" pos:end="5595:18">cpl</name></name> <operator pos:start="5595:20" pos:end="5595:21">!=</operator> <literal type="number" pos:start="5595:23" pos:end="5595:23">0</literal></expr>)</condition> <block pos:start="5595:26" pos:end="5599:9">{<block_content pos:start="5597:13" pos:end="5597:64">

            <expr_stmt pos:start="5597:13" pos:end="5597:64"><expr pos:start="5597:13" pos:end="5597:63"><call pos:start="5597:13" pos:end="5597:63"><name pos:start="5597:13" pos:end="5597:25">gen_exception</name><argument_list pos:start="5597:26" pos:end="5597:63">(<argument pos:start="5597:27" pos:end="5597:27"><expr pos:start="5597:27" pos:end="5597:27"><name pos:start="5597:27" pos:end="5597:27">s</name></expr></argument>, <argument pos:start="5597:30" pos:end="5597:39"><expr pos:start="5597:30" pos:end="5597:39"><name pos:start="5597:30" pos:end="5597:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5597:42" pos:end="5597:62"><expr pos:start="5597:42" pos:end="5597:62"><name pos:start="5597:42" pos:end="5597:49">pc_start</name> <operator pos:start="5597:51" pos:end="5597:51">-</operator> <name pos:start="5597:53" pos:end="5597:62"><name pos:start="5597:53" pos:end="5597:53">s</name><operator pos:start="5597:54" pos:end="5597:55">-&gt;</operator><name pos:start="5597:56" pos:end="5597:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5599:11" pos:end="5617:9">else <block pos:start="5599:16" pos:end="5617:9">{<block_content pos:start="5601:13" pos:end="5615:13">

            <if_stmt pos:start="5601:13" pos:end="5603:43"><if pos:start="5601:13" pos:end="5603:43">if <condition pos:start="5601:16" pos:end="5601:42">(<expr pos:start="5601:17" pos:end="5601:41"><name pos:start="5601:17" pos:end="5601:24"><name pos:start="5601:17" pos:end="5601:17">s</name><operator pos:start="5601:18" pos:end="5601:19">-&gt;</operator><name pos:start="5601:20" pos:end="5601:24">cc_op</name></name> <operator pos:start="5601:26" pos:end="5601:27">!=</operator> <name pos:start="5601:29" pos:end="5601:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5603:17" pos:end="5603:43"><block_content pos:start="5603:17" pos:end="5603:43">

                <expr_stmt pos:start="5603:17" pos:end="5603:43"><expr pos:start="5603:17" pos:end="5603:42"><call pos:start="5603:17" pos:end="5603:42"><name pos:start="5603:17" pos:end="5603:32">gen_op_set_cc_op</name><argument_list pos:start="5603:33" pos:end="5603:42">(<argument pos:start="5603:34" pos:end="5603:41"><expr pos:start="5603:34" pos:end="5603:41"><name pos:start="5603:34" pos:end="5603:41"><name pos:start="5603:34" pos:end="5603:34">s</name><operator pos:start="5603:35" pos:end="5603:36">-&gt;</operator><name pos:start="5603:37" pos:end="5603:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5605:13" pos:end="5605:46"><expr pos:start="5605:13" pos:end="5605:45"><call pos:start="5605:13" pos:end="5605:45"><name pos:start="5605:13" pos:end="5605:22">gen_jmp_im</name><argument_list pos:start="5605:23" pos:end="5605:45">(<argument pos:start="5605:24" pos:end="5605:44"><expr pos:start="5605:24" pos:end="5605:44"><name pos:start="5605:24" pos:end="5605:31">pc_start</name> <operator pos:start="5605:33" pos:end="5605:33">-</operator> <name pos:start="5605:35" pos:end="5605:44"><name pos:start="5605:35" pos:end="5605:35">s</name><operator pos:start="5605:36" pos:end="5605:37">-&gt;</operator><name pos:start="5605:38" pos:end="5605:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5607:13" pos:end="5615:13"><if pos:start="5607:13" pos:end="5611:13">if <condition pos:start="5607:16" pos:end="5607:22">(<expr pos:start="5607:17" pos:end="5607:21"><name pos:start="5607:17" pos:end="5607:17">b</name> <operator pos:start="5607:19" pos:end="5607:19">&amp;</operator> <literal type="number" pos:start="5607:21" pos:end="5607:21">2</literal></expr>)</condition> <block pos:start="5607:24" pos:end="5611:13">{<block_content pos:start="5609:17" pos:end="5609:42">

                <expr_stmt pos:start="5609:17" pos:end="5609:42"><expr pos:start="5609:17" pos:end="5609:41"><call pos:start="5609:17" pos:end="5609:41"><name pos:start="5609:17" pos:end="5609:32">gen_helper_rdmsr</name><argument_list pos:start="5609:33" pos:end="5609:41">(<argument pos:start="5609:34" pos:end="5609:40"><expr pos:start="5609:34" pos:end="5609:40"><name pos:start="5609:34" pos:end="5609:40">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5611:15" pos:end="5615:13">else <block pos:start="5611:20" pos:end="5615:13">{<block_content pos:start="5613:17" pos:end="5613:42">

                <expr_stmt pos:start="5613:17" pos:end="5613:42"><expr pos:start="5613:17" pos:end="5613:41"><call pos:start="5613:17" pos:end="5613:41"><name pos:start="5613:17" pos:end="5613:32">gen_helper_wrmsr</name><argument_list pos:start="5613:33" pos:end="5613:41">(<argument pos:start="5613:34" pos:end="5613:40"><expr pos:start="5613:34" pos:end="5613:40"><name pos:start="5613:34" pos:end="5613:40">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5619:9" pos:end="5619:14">break;</break>

    <case pos:start="5621:5" pos:end="5621:15">case <expr pos:start="5621:10" pos:end="5621:14"><literal type="number" pos:start="5621:10" pos:end="5621:14">0x131</literal></expr>:</case> <comment type="block" pos:start="5621:17" pos:end="5621:27">/* rdtsc */</comment>

        <if_stmt pos:start="5623:9" pos:end="5625:39"><if pos:start="5623:9" pos:end="5625:39">if <condition pos:start="5623:12" pos:end="5623:38">(<expr pos:start="5623:13" pos:end="5623:37"><name pos:start="5623:13" pos:end="5623:20"><name pos:start="5623:13" pos:end="5623:13">s</name><operator pos:start="5623:14" pos:end="5623:15">-&gt;</operator><name pos:start="5623:16" pos:end="5623:20">cc_op</name></name> <operator pos:start="5623:22" pos:end="5623:23">!=</operator> <name pos:start="5623:25" pos:end="5623:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5625:13" pos:end="5625:39"><block_content pos:start="5625:13" pos:end="5625:39">

            <expr_stmt pos:start="5625:13" pos:end="5625:39"><expr pos:start="5625:13" pos:end="5625:38"><call pos:start="5625:13" pos:end="5625:38"><name pos:start="5625:13" pos:end="5625:28">gen_op_set_cc_op</name><argument_list pos:start="5625:29" pos:end="5625:38">(<argument pos:start="5625:30" pos:end="5625:37"><expr pos:start="5625:30" pos:end="5625:37"><name pos:start="5625:30" pos:end="5625:37"><name pos:start="5625:30" pos:end="5625:30">s</name><operator pos:start="5625:31" pos:end="5625:32">-&gt;</operator><name pos:start="5625:33" pos:end="5625:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5627:9" pos:end="5627:42"><expr pos:start="5627:9" pos:end="5627:41"><call pos:start="5627:9" pos:end="5627:41"><name pos:start="5627:9" pos:end="5627:18">gen_jmp_im</name><argument_list pos:start="5627:19" pos:end="5627:41">(<argument pos:start="5627:20" pos:end="5627:40"><expr pos:start="5627:20" pos:end="5627:40"><name pos:start="5627:20" pos:end="5627:27">pc_start</name> <operator pos:start="5627:29" pos:end="5627:29">-</operator> <name pos:start="5627:31" pos:end="5627:40"><name pos:start="5627:31" pos:end="5627:31">s</name><operator pos:start="5627:32" pos:end="5627:33">-&gt;</operator><name pos:start="5627:34" pos:end="5627:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="5629:9" pos:end="5631:27"><if pos:start="5629:9" pos:end="5631:27">if <condition pos:start="5629:12" pos:end="5629:23">(<expr pos:start="5629:13" pos:end="5629:22"><name pos:start="5629:13" pos:end="5629:22">use_icount</name></expr>)</condition><block type="pseudo" pos:start="5631:13" pos:end="5631:27"><block_content pos:start="5631:13" pos:end="5631:27">

            <expr_stmt pos:start="5631:13" pos:end="5631:27"><expr pos:start="5631:13" pos:end="5631:26"><call pos:start="5631:13" pos:end="5631:26"><name pos:start="5631:13" pos:end="5631:24">gen_io_start</name><argument_list pos:start="5631:25" pos:end="5631:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5633:9" pos:end="5633:34"><expr pos:start="5633:9" pos:end="5633:33"><call pos:start="5633:9" pos:end="5633:33"><name pos:start="5633:9" pos:end="5633:24">gen_helper_rdtsc</name><argument_list pos:start="5633:25" pos:end="5633:33">(<argument pos:start="5633:26" pos:end="5633:32"><expr pos:start="5633:26" pos:end="5633:32"><name pos:start="5633:26" pos:end="5633:32">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="5635:9" pos:end="5641:9"><if pos:start="5635:9" pos:end="5641:9">if <condition pos:start="5635:12" pos:end="5635:23">(<expr pos:start="5635:13" pos:end="5635:22"><name pos:start="5635:13" pos:end="5635:22">use_icount</name></expr>)</condition> <block pos:start="5635:25" pos:end="5641:9">{<block_content pos:start="5637:13" pos:end="5639:43">

            <expr_stmt pos:start="5637:13" pos:end="5637:25"><expr pos:start="5637:13" pos:end="5637:24"><call pos:start="5637:13" pos:end="5637:24"><name pos:start="5637:13" pos:end="5637:22">gen_io_end</name><argument_list pos:start="5637:23" pos:end="5637:24">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5639:13" pos:end="5639:43"><expr pos:start="5639:13" pos:end="5639:42"><call pos:start="5639:13" pos:end="5639:42"><name pos:start="5639:13" pos:end="5639:19">gen_jmp</name><argument_list pos:start="5639:20" pos:end="5639:42">(<argument pos:start="5639:21" pos:end="5639:21"><expr pos:start="5639:21" pos:end="5639:21"><name pos:start="5639:21" pos:end="5639:21">s</name></expr></argument>, <argument pos:start="5639:24" pos:end="5639:41"><expr pos:start="5639:24" pos:end="5639:41"><name pos:start="5639:24" pos:end="5639:28"><name pos:start="5639:24" pos:end="5639:24">s</name><operator pos:start="5639:25" pos:end="5639:26">-&gt;</operator><name pos:start="5639:27" pos:end="5639:28">pc</name></name> <operator pos:start="5639:30" pos:end="5639:30">-</operator> <name pos:start="5639:32" pos:end="5639:41"><name pos:start="5639:32" pos:end="5639:32">s</name><operator pos:start="5639:33" pos:end="5639:34">-&gt;</operator><name pos:start="5639:35" pos:end="5639:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="5643:9" pos:end="5643:14">break;</break>

    <case pos:start="5645:5" pos:end="5645:15">case <expr pos:start="5645:10" pos:end="5645:14"><literal type="number" pos:start="5645:10" pos:end="5645:14">0x133</literal></expr>:</case> <comment type="block" pos:start="5645:17" pos:end="5645:27">/* rdpmc */</comment>

        <if_stmt pos:start="5647:9" pos:end="5649:39"><if pos:start="5647:9" pos:end="5649:39">if <condition pos:start="5647:12" pos:end="5647:38">(<expr pos:start="5647:13" pos:end="5647:37"><name pos:start="5647:13" pos:end="5647:20"><name pos:start="5647:13" pos:end="5647:13">s</name><operator pos:start="5647:14" pos:end="5647:15">-&gt;</operator><name pos:start="5647:16" pos:end="5647:20">cc_op</name></name> <operator pos:start="5647:22" pos:end="5647:23">!=</operator> <name pos:start="5647:25" pos:end="5647:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5649:13" pos:end="5649:39"><block_content pos:start="5649:13" pos:end="5649:39">

            <expr_stmt pos:start="5649:13" pos:end="5649:39"><expr pos:start="5649:13" pos:end="5649:38"><call pos:start="5649:13" pos:end="5649:38"><name pos:start="5649:13" pos:end="5649:28">gen_op_set_cc_op</name><argument_list pos:start="5649:29" pos:end="5649:38">(<argument pos:start="5649:30" pos:end="5649:37"><expr pos:start="5649:30" pos:end="5649:37"><name pos:start="5649:30" pos:end="5649:37"><name pos:start="5649:30" pos:end="5649:30">s</name><operator pos:start="5649:31" pos:end="5649:32">-&gt;</operator><name pos:start="5649:33" pos:end="5649:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5651:9" pos:end="5651:42"><expr pos:start="5651:9" pos:end="5651:41"><call pos:start="5651:9" pos:end="5651:41"><name pos:start="5651:9" pos:end="5651:18">gen_jmp_im</name><argument_list pos:start="5651:19" pos:end="5651:41">(<argument pos:start="5651:20" pos:end="5651:40"><expr pos:start="5651:20" pos:end="5651:40"><name pos:start="5651:20" pos:end="5651:27">pc_start</name> <operator pos:start="5651:29" pos:end="5651:29">-</operator> <name pos:start="5651:31" pos:end="5651:40"><name pos:start="5651:31" pos:end="5651:31">s</name><operator pos:start="5651:32" pos:end="5651:33">-&gt;</operator><name pos:start="5651:34" pos:end="5651:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5653:9" pos:end="5653:34"><expr pos:start="5653:9" pos:end="5653:33"><call pos:start="5653:9" pos:end="5653:33"><name pos:start="5653:9" pos:end="5653:24">gen_helper_rdpmc</name><argument_list pos:start="5653:25" pos:end="5653:33">(<argument pos:start="5653:26" pos:end="5653:32"><expr pos:start="5653:26" pos:end="5653:32"><name pos:start="5653:26" pos:end="5653:32">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5655:9" pos:end="5655:14">break;</break>

    <case pos:start="5657:5" pos:end="5657:15">case <expr pos:start="5657:10" pos:end="5657:14"><literal type="number" pos:start="5657:10" pos:end="5657:14">0x134</literal></expr>:</case> <comment type="block" pos:start="5657:17" pos:end="5657:30">/* sysenter */</comment>

        <comment type="block" pos:start="5659:9" pos:end="5659:51">/* For Intel SYSENTER is valid on 64-bit */</comment>

        <if_stmt pos:start="5661:9" pos:end="5663:28"><if pos:start="5661:9" pos:end="5663:28">if <condition pos:start="5661:12" pos:end="5661:68">(<expr pos:start="5661:13" pos:end="5661:67"><call pos:start="5661:13" pos:end="5661:21"><name pos:start="5661:13" pos:end="5661:18">CODE64</name><argument_list pos:start="5661:19" pos:end="5661:21">(<argument pos:start="5661:20" pos:end="5661:20"><expr pos:start="5661:20" pos:end="5661:20"><name pos:start="5661:20" pos:end="5661:20">s</name></expr></argument>)</argument_list></call> <operator pos:start="5661:23" pos:end="5661:24">&amp;&amp;</operator> <name pos:start="5661:26" pos:end="5661:43"><name pos:start="5661:26" pos:end="5661:28">env</name><operator pos:start="5661:29" pos:end="5661:30">-&gt;</operator><name pos:start="5661:31" pos:end="5661:43">cpuid_vendor1</name></name> <operator pos:start="5661:45" pos:end="5661:46">!=</operator> <name pos:start="5661:48" pos:end="5661:67">CPUID_VENDOR_INTEL_1</name></expr>)</condition><block type="pseudo" pos:start="5663:13" pos:end="5663:28"><block_content pos:start="5663:13" pos:end="5663:28">

            <goto pos:start="5663:13" pos:end="5663:28">goto <name pos:start="5663:18" pos:end="5663:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5665:9" pos:end="5679:9"><if pos:start="5665:9" pos:end="5669:9">if <condition pos:start="5665:12" pos:end="5665:19">(<expr pos:start="5665:13" pos:end="5665:18"><operator pos:start="5665:13" pos:end="5665:13">!</operator><name pos:start="5665:14" pos:end="5665:18"><name pos:start="5665:14" pos:end="5665:14">s</name><operator pos:start="5665:15" pos:end="5665:16">-&gt;</operator><name pos:start="5665:17" pos:end="5665:18">pe</name></name></expr>)</condition> <block pos:start="5665:21" pos:end="5669:9">{<block_content pos:start="5667:13" pos:end="5667:64">

            <expr_stmt pos:start="5667:13" pos:end="5667:64"><expr pos:start="5667:13" pos:end="5667:63"><call pos:start="5667:13" pos:end="5667:63"><name pos:start="5667:13" pos:end="5667:25">gen_exception</name><argument_list pos:start="5667:26" pos:end="5667:63">(<argument pos:start="5667:27" pos:end="5667:27"><expr pos:start="5667:27" pos:end="5667:27"><name pos:start="5667:27" pos:end="5667:27">s</name></expr></argument>, <argument pos:start="5667:30" pos:end="5667:39"><expr pos:start="5667:30" pos:end="5667:39"><name pos:start="5667:30" pos:end="5667:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5667:42" pos:end="5667:62"><expr pos:start="5667:42" pos:end="5667:62"><name pos:start="5667:42" pos:end="5667:49">pc_start</name> <operator pos:start="5667:51" pos:end="5667:51">-</operator> <name pos:start="5667:53" pos:end="5667:62"><name pos:start="5667:53" pos:end="5667:53">s</name><operator pos:start="5667:54" pos:end="5667:55">-&gt;</operator><name pos:start="5667:56" pos:end="5667:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5669:11" pos:end="5679:9">else <block pos:start="5669:16" pos:end="5679:9">{<block_content pos:start="5671:13" pos:end="5677:23">

            <expr_stmt pos:start="5671:13" pos:end="5671:32"><expr pos:start="5671:13" pos:end="5671:31"><call pos:start="5671:13" pos:end="5671:31"><name pos:start="5671:13" pos:end="5671:28">gen_update_cc_op</name><argument_list pos:start="5671:29" pos:end="5671:31">(<argument pos:start="5671:30" pos:end="5671:30"><expr pos:start="5671:30" pos:end="5671:30"><name pos:start="5671:30" pos:end="5671:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5673:13" pos:end="5673:46"><expr pos:start="5673:13" pos:end="5673:45"><call pos:start="5673:13" pos:end="5673:45"><name pos:start="5673:13" pos:end="5673:22">gen_jmp_im</name><argument_list pos:start="5673:23" pos:end="5673:45">(<argument pos:start="5673:24" pos:end="5673:44"><expr pos:start="5673:24" pos:end="5673:44"><name pos:start="5673:24" pos:end="5673:31">pc_start</name> <operator pos:start="5673:33" pos:end="5673:33">-</operator> <name pos:start="5673:35" pos:end="5673:44"><name pos:start="5673:35" pos:end="5673:35">s</name><operator pos:start="5673:36" pos:end="5673:37">-&gt;</operator><name pos:start="5673:38" pos:end="5673:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5675:13" pos:end="5675:41"><expr pos:start="5675:13" pos:end="5675:40"><call pos:start="5675:13" pos:end="5675:40"><name pos:start="5675:13" pos:end="5675:31">gen_helper_sysenter</name><argument_list pos:start="5675:32" pos:end="5675:40">(<argument pos:start="5675:33" pos:end="5675:39"><expr pos:start="5675:33" pos:end="5675:39"><name pos:start="5675:33" pos:end="5675:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5677:13" pos:end="5677:23"><expr pos:start="5677:13" pos:end="5677:22"><call pos:start="5677:13" pos:end="5677:22"><name pos:start="5677:13" pos:end="5677:19">gen_eob</name><argument_list pos:start="5677:20" pos:end="5677:22">(<argument pos:start="5677:21" pos:end="5677:21"><expr pos:start="5677:21" pos:end="5677:21"><name pos:start="5677:21" pos:end="5677:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5681:9" pos:end="5681:14">break;</break>

    <case pos:start="5683:5" pos:end="5683:15">case <expr pos:start="5683:10" pos:end="5683:14"><literal type="number" pos:start="5683:10" pos:end="5683:14">0x135</literal></expr>:</case> <comment type="block" pos:start="5683:17" pos:end="5683:29">/* sysexit */</comment>

        <comment type="block" pos:start="5685:9" pos:end="5685:50">/* For Intel SYSEXIT is valid on 64-bit */</comment>

        <if_stmt pos:start="5687:9" pos:end="5689:28"><if pos:start="5687:9" pos:end="5689:28">if <condition pos:start="5687:12" pos:end="5687:68">(<expr pos:start="5687:13" pos:end="5687:67"><call pos:start="5687:13" pos:end="5687:21"><name pos:start="5687:13" pos:end="5687:18">CODE64</name><argument_list pos:start="5687:19" pos:end="5687:21">(<argument pos:start="5687:20" pos:end="5687:20"><expr pos:start="5687:20" pos:end="5687:20"><name pos:start="5687:20" pos:end="5687:20">s</name></expr></argument>)</argument_list></call> <operator pos:start="5687:23" pos:end="5687:24">&amp;&amp;</operator> <name pos:start="5687:26" pos:end="5687:43"><name pos:start="5687:26" pos:end="5687:28">env</name><operator pos:start="5687:29" pos:end="5687:30">-&gt;</operator><name pos:start="5687:31" pos:end="5687:43">cpuid_vendor1</name></name> <operator pos:start="5687:45" pos:end="5687:46">!=</operator> <name pos:start="5687:48" pos:end="5687:67">CPUID_VENDOR_INTEL_1</name></expr>)</condition><block type="pseudo" pos:start="5689:13" pos:end="5689:28"><block_content pos:start="5689:13" pos:end="5689:28">

            <goto pos:start="5689:13" pos:end="5689:28">goto <name pos:start="5689:18" pos:end="5689:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5691:9" pos:end="5705:9"><if pos:start="5691:9" pos:end="5695:9">if <condition pos:start="5691:12" pos:end="5691:19">(<expr pos:start="5691:13" pos:end="5691:18"><operator pos:start="5691:13" pos:end="5691:13">!</operator><name pos:start="5691:14" pos:end="5691:18"><name pos:start="5691:14" pos:end="5691:14">s</name><operator pos:start="5691:15" pos:end="5691:16">-&gt;</operator><name pos:start="5691:17" pos:end="5691:18">pe</name></name></expr>)</condition> <block pos:start="5691:21" pos:end="5695:9">{<block_content pos:start="5693:13" pos:end="5693:64">

            <expr_stmt pos:start="5693:13" pos:end="5693:64"><expr pos:start="5693:13" pos:end="5693:63"><call pos:start="5693:13" pos:end="5693:63"><name pos:start="5693:13" pos:end="5693:25">gen_exception</name><argument_list pos:start="5693:26" pos:end="5693:63">(<argument pos:start="5693:27" pos:end="5693:27"><expr pos:start="5693:27" pos:end="5693:27"><name pos:start="5693:27" pos:end="5693:27">s</name></expr></argument>, <argument pos:start="5693:30" pos:end="5693:39"><expr pos:start="5693:30" pos:end="5693:39"><name pos:start="5693:30" pos:end="5693:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5693:42" pos:end="5693:62"><expr pos:start="5693:42" pos:end="5693:62"><name pos:start="5693:42" pos:end="5693:49">pc_start</name> <operator pos:start="5693:51" pos:end="5693:51">-</operator> <name pos:start="5693:53" pos:end="5693:62"><name pos:start="5693:53" pos:end="5693:53">s</name><operator pos:start="5693:54" pos:end="5693:55">-&gt;</operator><name pos:start="5693:56" pos:end="5693:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5695:11" pos:end="5705:9">else <block pos:start="5695:16" pos:end="5705:9">{<block_content pos:start="5697:13" pos:end="5703:23">

            <expr_stmt pos:start="5697:13" pos:end="5697:32"><expr pos:start="5697:13" pos:end="5697:31"><call pos:start="5697:13" pos:end="5697:31"><name pos:start="5697:13" pos:end="5697:28">gen_update_cc_op</name><argument_list pos:start="5697:29" pos:end="5697:31">(<argument pos:start="5697:30" pos:end="5697:30"><expr pos:start="5697:30" pos:end="5697:30"><name pos:start="5697:30" pos:end="5697:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5699:13" pos:end="5699:46"><expr pos:start="5699:13" pos:end="5699:45"><call pos:start="5699:13" pos:end="5699:45"><name pos:start="5699:13" pos:end="5699:22">gen_jmp_im</name><argument_list pos:start="5699:23" pos:end="5699:45">(<argument pos:start="5699:24" pos:end="5699:44"><expr pos:start="5699:24" pos:end="5699:44"><name pos:start="5699:24" pos:end="5699:31">pc_start</name> <operator pos:start="5699:33" pos:end="5699:33">-</operator> <name pos:start="5699:35" pos:end="5699:44"><name pos:start="5699:35" pos:end="5699:35">s</name><operator pos:start="5699:36" pos:end="5699:37">-&gt;</operator><name pos:start="5699:38" pos:end="5699:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5701:13" pos:end="5701:62"><expr pos:start="5701:13" pos:end="5701:61"><call pos:start="5701:13" pos:end="5701:61"><name pos:start="5701:13" pos:end="5701:30">gen_helper_sysexit</name><argument_list pos:start="5701:31" pos:end="5701:61">(<argument pos:start="5701:32" pos:end="5701:38"><expr pos:start="5701:32" pos:end="5701:38"><name pos:start="5701:32" pos:end="5701:38">cpu_env</name></expr></argument>, <argument pos:start="5701:41" pos:end="5701:60"><expr pos:start="5701:41" pos:end="5701:60"><call pos:start="5701:41" pos:end="5701:60"><name pos:start="5701:41" pos:end="5701:53">tcg_const_i32</name><argument_list pos:start="5701:54" pos:end="5701:60">(<argument pos:start="5701:55" pos:end="5701:59"><expr pos:start="5701:55" pos:end="5701:59"><name pos:start="5701:55" pos:end="5701:59">dflag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5703:13" pos:end="5703:23"><expr pos:start="5703:13" pos:end="5703:22"><call pos:start="5703:13" pos:end="5703:22"><name pos:start="5703:13" pos:end="5703:19">gen_eob</name><argument_list pos:start="5703:20" pos:end="5703:22">(<argument pos:start="5703:21" pos:end="5703:21"><expr pos:start="5703:21" pos:end="5703:21"><name pos:start="5703:21" pos:end="5703:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5707:9" pos:end="5710:0">break;</break>

<cpp:ifdef pos:start="5709:1" pos:end="5709:20">#<cpp:directive pos:start="5709:2" pos:end="5709:6">ifdef</cpp:directive> <name pos:start="5709:8" pos:end="5709:20">TARGET_X86_64</name></cpp:ifdef>

    <case pos:start="5711:5" pos:end="5711:15">case <expr pos:start="5711:10" pos:end="5711:14"><literal type="number" pos:start="5711:10" pos:end="5711:14">0x105</literal></expr>:</case> <comment type="block" pos:start="5711:17" pos:end="5711:29">/* syscall */</comment>

        <comment type="block" pos:start="5713:9" pos:end="5713:46">/* XXX: is it usable in real mode ? */</comment>

        <expr_stmt pos:start="5715:9" pos:end="5715:28"><expr pos:start="5715:9" pos:end="5715:27"><call pos:start="5715:9" pos:end="5715:27"><name pos:start="5715:9" pos:end="5715:24">gen_update_cc_op</name><argument_list pos:start="5715:25" pos:end="5715:27">(<argument pos:start="5715:26" pos:end="5715:26"><expr pos:start="5715:26" pos:end="5715:26"><name pos:start="5715:26" pos:end="5715:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5717:9" pos:end="5717:42"><expr pos:start="5717:9" pos:end="5717:41"><call pos:start="5717:9" pos:end="5717:41"><name pos:start="5717:9" pos:end="5717:18">gen_jmp_im</name><argument_list pos:start="5717:19" pos:end="5717:41">(<argument pos:start="5717:20" pos:end="5717:40"><expr pos:start="5717:20" pos:end="5717:40"><name pos:start="5717:20" pos:end="5717:27">pc_start</name> <operator pos:start="5717:29" pos:end="5717:29">-</operator> <name pos:start="5717:31" pos:end="5717:40"><name pos:start="5717:31" pos:end="5717:31">s</name><operator pos:start="5717:32" pos:end="5717:33">-&gt;</operator><name pos:start="5717:34" pos:end="5717:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5719:9" pos:end="5719:69"><expr pos:start="5719:9" pos:end="5719:68"><call pos:start="5719:9" pos:end="5719:68"><name pos:start="5719:9" pos:end="5719:26">gen_helper_syscall</name><argument_list pos:start="5719:27" pos:end="5719:68">(<argument pos:start="5719:28" pos:end="5719:34"><expr pos:start="5719:28" pos:end="5719:34"><name pos:start="5719:28" pos:end="5719:34">cpu_env</name></expr></argument>, <argument pos:start="5719:37" pos:end="5719:67"><expr pos:start="5719:37" pos:end="5719:67"><call pos:start="5719:37" pos:end="5719:67"><name pos:start="5719:37" pos:end="5719:49">tcg_const_i32</name><argument_list pos:start="5719:50" pos:end="5719:67">(<argument pos:start="5719:51" pos:end="5719:66"><expr pos:start="5719:51" pos:end="5719:66"><name pos:start="5719:51" pos:end="5719:55"><name pos:start="5719:51" pos:end="5719:51">s</name><operator pos:start="5719:52" pos:end="5719:53">-&gt;</operator><name pos:start="5719:54" pos:end="5719:55">pc</name></name> <operator pos:start="5719:57" pos:end="5719:57">-</operator> <name pos:start="5719:59" pos:end="5719:66">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5721:9" pos:end="5721:19"><expr pos:start="5721:9" pos:end="5721:18"><call pos:start="5721:9" pos:end="5721:18"><name pos:start="5721:9" pos:end="5721:15">gen_eob</name><argument_list pos:start="5721:16" pos:end="5721:18">(<argument pos:start="5721:17" pos:end="5721:17"><expr pos:start="5721:17" pos:end="5721:17"><name pos:start="5721:17" pos:end="5721:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5723:9" pos:end="5723:14">break;</break>

    <case pos:start="5725:5" pos:end="5725:15">case <expr pos:start="5725:10" pos:end="5725:14"><literal type="number" pos:start="5725:10" pos:end="5725:14">0x107</literal></expr>:</case> <comment type="block" pos:start="5725:17" pos:end="5725:28">/* sysret */</comment>

        <if_stmt pos:start="5727:9" pos:end="5747:9"><if pos:start="5727:9" pos:end="5731:9">if <condition pos:start="5727:12" pos:end="5727:19">(<expr pos:start="5727:13" pos:end="5727:18"><operator pos:start="5727:13" pos:end="5727:13">!</operator><name pos:start="5727:14" pos:end="5727:18"><name pos:start="5727:14" pos:end="5727:14">s</name><operator pos:start="5727:15" pos:end="5727:16">-&gt;</operator><name pos:start="5727:17" pos:end="5727:18">pe</name></name></expr>)</condition> <block pos:start="5727:21" pos:end="5731:9">{<block_content pos:start="5729:13" pos:end="5729:64">

            <expr_stmt pos:start="5729:13" pos:end="5729:64"><expr pos:start="5729:13" pos:end="5729:63"><call pos:start="5729:13" pos:end="5729:63"><name pos:start="5729:13" pos:end="5729:25">gen_exception</name><argument_list pos:start="5729:26" pos:end="5729:63">(<argument pos:start="5729:27" pos:end="5729:27"><expr pos:start="5729:27" pos:end="5729:27"><name pos:start="5729:27" pos:end="5729:27">s</name></expr></argument>, <argument pos:start="5729:30" pos:end="5729:39"><expr pos:start="5729:30" pos:end="5729:39"><name pos:start="5729:30" pos:end="5729:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5729:42" pos:end="5729:62"><expr pos:start="5729:42" pos:end="5729:62"><name pos:start="5729:42" pos:end="5729:49">pc_start</name> <operator pos:start="5729:51" pos:end="5729:51">-</operator> <name pos:start="5729:53" pos:end="5729:62"><name pos:start="5729:53" pos:end="5729:53">s</name><operator pos:start="5729:54" pos:end="5729:55">-&gt;</operator><name pos:start="5729:56" pos:end="5729:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5731:11" pos:end="5747:9">else <block pos:start="5731:16" pos:end="5747:9">{<block_content pos:start="5733:13" pos:end="5745:23">

            <expr_stmt pos:start="5733:13" pos:end="5733:32"><expr pos:start="5733:13" pos:end="5733:31"><call pos:start="5733:13" pos:end="5733:31"><name pos:start="5733:13" pos:end="5733:28">gen_update_cc_op</name><argument_list pos:start="5733:29" pos:end="5733:31">(<argument pos:start="5733:30" pos:end="5733:30"><expr pos:start="5733:30" pos:end="5733:30"><name pos:start="5733:30" pos:end="5733:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5735:13" pos:end="5735:46"><expr pos:start="5735:13" pos:end="5735:45"><call pos:start="5735:13" pos:end="5735:45"><name pos:start="5735:13" pos:end="5735:22">gen_jmp_im</name><argument_list pos:start="5735:23" pos:end="5735:45">(<argument pos:start="5735:24" pos:end="5735:44"><expr pos:start="5735:24" pos:end="5735:44"><name pos:start="5735:24" pos:end="5735:31">pc_start</name> <operator pos:start="5735:33" pos:end="5735:33">-</operator> <name pos:start="5735:35" pos:end="5735:44"><name pos:start="5735:35" pos:end="5735:35">s</name><operator pos:start="5735:36" pos:end="5735:37">-&gt;</operator><name pos:start="5735:38" pos:end="5735:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5737:13" pos:end="5737:64"><expr pos:start="5737:13" pos:end="5737:63"><call pos:start="5737:13" pos:end="5737:63"><name pos:start="5737:13" pos:end="5737:29">gen_helper_sysret</name><argument_list pos:start="5737:30" pos:end="5737:63">(<argument pos:start="5737:31" pos:end="5737:37"><expr pos:start="5737:31" pos:end="5737:37"><name pos:start="5737:31" pos:end="5737:37">cpu_env</name></expr></argument>, <argument pos:start="5737:40" pos:end="5737:62"><expr pos:start="5737:40" pos:end="5737:62"><call pos:start="5737:40" pos:end="5737:62"><name pos:start="5737:40" pos:end="5737:52">tcg_const_i32</name><argument_list pos:start="5737:53" pos:end="5737:62">(<argument pos:start="5737:54" pos:end="5737:61"><expr pos:start="5737:54" pos:end="5737:61"><name pos:start="5737:54" pos:end="5737:61"><name pos:start="5737:54" pos:end="5737:54">s</name><operator pos:start="5737:55" pos:end="5737:56">-&gt;</operator><name pos:start="5737:57" pos:end="5737:61">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="5739:13" pos:end="5739:64">/* condition codes are modified only in long mode */</comment>

            <if_stmt pos:start="5741:13" pos:end="5743:40"><if pos:start="5741:13" pos:end="5743:40">if <condition pos:start="5741:16" pos:end="5741:23">(<expr pos:start="5741:17" pos:end="5741:22"><name pos:start="5741:17" pos:end="5741:22"><name pos:start="5741:17" pos:end="5741:17">s</name><operator pos:start="5741:18" pos:end="5741:19">-&gt;</operator><name pos:start="5741:20" pos:end="5741:22">lma</name></name></expr>)</condition><block type="pseudo" pos:start="5743:17" pos:end="5743:40"><block_content pos:start="5743:17" pos:end="5743:40">

                <expr_stmt pos:start="5743:17" pos:end="5743:40"><expr pos:start="5743:17" pos:end="5743:39"><name pos:start="5743:17" pos:end="5743:24"><name pos:start="5743:17" pos:end="5743:17">s</name><operator pos:start="5743:18" pos:end="5743:19">-&gt;</operator><name pos:start="5743:20" pos:end="5743:24">cc_op</name></name> <operator pos:start="5743:26" pos:end="5743:26">=</operator> <name pos:start="5743:28" pos:end="5743:39">CC_OP_EFLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5745:13" pos:end="5745:23"><expr pos:start="5745:13" pos:end="5745:22"><call pos:start="5745:13" pos:end="5745:22"><name pos:start="5745:13" pos:end="5745:19">gen_eob</name><argument_list pos:start="5745:20" pos:end="5745:22">(<argument pos:start="5745:21" pos:end="5745:21"><expr pos:start="5745:21" pos:end="5745:21"><name pos:start="5745:21" pos:end="5745:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5749:9" pos:end="5752:0">break;</break>

<cpp:endif pos:start="5751:1" pos:end="5751:6">#<cpp:directive pos:start="5751:2" pos:end="5751:6">endif</cpp:directive></cpp:endif>

    <case pos:start="5753:5" pos:end="5753:15">case <expr pos:start="5753:10" pos:end="5753:14"><literal type="number" pos:start="5753:10" pos:end="5753:14">0x1a2</literal></expr>:</case> <comment type="block" pos:start="5753:17" pos:end="5753:27">/* cpuid */</comment>

        <if_stmt pos:start="5755:9" pos:end="5757:39"><if pos:start="5755:9" pos:end="5757:39">if <condition pos:start="5755:12" pos:end="5755:38">(<expr pos:start="5755:13" pos:end="5755:37"><name pos:start="5755:13" pos:end="5755:20"><name pos:start="5755:13" pos:end="5755:13">s</name><operator pos:start="5755:14" pos:end="5755:15">-&gt;</operator><name pos:start="5755:16" pos:end="5755:20">cc_op</name></name> <operator pos:start="5755:22" pos:end="5755:23">!=</operator> <name pos:start="5755:25" pos:end="5755:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5757:13" pos:end="5757:39"><block_content pos:start="5757:13" pos:end="5757:39">

            <expr_stmt pos:start="5757:13" pos:end="5757:39"><expr pos:start="5757:13" pos:end="5757:38"><call pos:start="5757:13" pos:end="5757:38"><name pos:start="5757:13" pos:end="5757:28">gen_op_set_cc_op</name><argument_list pos:start="5757:29" pos:end="5757:38">(<argument pos:start="5757:30" pos:end="5757:37"><expr pos:start="5757:30" pos:end="5757:37"><name pos:start="5757:30" pos:end="5757:37"><name pos:start="5757:30" pos:end="5757:30">s</name><operator pos:start="5757:31" pos:end="5757:32">-&gt;</operator><name pos:start="5757:33" pos:end="5757:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5759:9" pos:end="5759:42"><expr pos:start="5759:9" pos:end="5759:41"><call pos:start="5759:9" pos:end="5759:41"><name pos:start="5759:9" pos:end="5759:18">gen_jmp_im</name><argument_list pos:start="5759:19" pos:end="5759:41">(<argument pos:start="5759:20" pos:end="5759:40"><expr pos:start="5759:20" pos:end="5759:40"><name pos:start="5759:20" pos:end="5759:27">pc_start</name> <operator pos:start="5759:29" pos:end="5759:29">-</operator> <name pos:start="5759:31" pos:end="5759:40"><name pos:start="5759:31" pos:end="5759:31">s</name><operator pos:start="5759:32" pos:end="5759:33">-&gt;</operator><name pos:start="5759:34" pos:end="5759:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5761:9" pos:end="5761:34"><expr pos:start="5761:9" pos:end="5761:33"><call pos:start="5761:9" pos:end="5761:33"><name pos:start="5761:9" pos:end="5761:24">gen_helper_cpuid</name><argument_list pos:start="5761:25" pos:end="5761:33">(<argument pos:start="5761:26" pos:end="5761:32"><expr pos:start="5761:26" pos:end="5761:32"><name pos:start="5761:26" pos:end="5761:32">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5763:9" pos:end="5763:14">break;</break>

    <case pos:start="5765:5" pos:end="5765:14">case <expr pos:start="5765:10" pos:end="5765:13"><literal type="number" pos:start="5765:10" pos:end="5765:13">0xf4</literal></expr>:</case> <comment type="block" pos:start="5765:16" pos:end="5765:24">/* hlt */</comment>

        <if_stmt pos:start="5767:9" pos:end="5783:9"><if pos:start="5767:9" pos:end="5771:9">if <condition pos:start="5767:12" pos:end="5767:24">(<expr pos:start="5767:13" pos:end="5767:23"><name pos:start="5767:13" pos:end="5767:18"><name pos:start="5767:13" pos:end="5767:13">s</name><operator pos:start="5767:14" pos:end="5767:15">-&gt;</operator><name pos:start="5767:16" pos:end="5767:18">cpl</name></name> <operator pos:start="5767:20" pos:end="5767:21">!=</operator> <literal type="number" pos:start="5767:23" pos:end="5767:23">0</literal></expr>)</condition> <block pos:start="5767:26" pos:end="5771:9">{<block_content pos:start="5769:13" pos:end="5769:64">

            <expr_stmt pos:start="5769:13" pos:end="5769:64"><expr pos:start="5769:13" pos:end="5769:63"><call pos:start="5769:13" pos:end="5769:63"><name pos:start="5769:13" pos:end="5769:25">gen_exception</name><argument_list pos:start="5769:26" pos:end="5769:63">(<argument pos:start="5769:27" pos:end="5769:27"><expr pos:start="5769:27" pos:end="5769:27"><name pos:start="5769:27" pos:end="5769:27">s</name></expr></argument>, <argument pos:start="5769:30" pos:end="5769:39"><expr pos:start="5769:30" pos:end="5769:39"><name pos:start="5769:30" pos:end="5769:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5769:42" pos:end="5769:62"><expr pos:start="5769:42" pos:end="5769:62"><name pos:start="5769:42" pos:end="5769:49">pc_start</name> <operator pos:start="5769:51" pos:end="5769:51">-</operator> <name pos:start="5769:53" pos:end="5769:62"><name pos:start="5769:53" pos:end="5769:53">s</name><operator pos:start="5769:54" pos:end="5769:55">-&gt;</operator><name pos:start="5769:56" pos:end="5769:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5771:11" pos:end="5783:9">else <block pos:start="5771:16" pos:end="5783:9">{<block_content pos:start="5773:13" pos:end="5781:38">

            <if_stmt pos:start="5773:13" pos:end="5775:43"><if pos:start="5773:13" pos:end="5775:43">if <condition pos:start="5773:16" pos:end="5773:42">(<expr pos:start="5773:17" pos:end="5773:41"><name pos:start="5773:17" pos:end="5773:24"><name pos:start="5773:17" pos:end="5773:17">s</name><operator pos:start="5773:18" pos:end="5773:19">-&gt;</operator><name pos:start="5773:20" pos:end="5773:24">cc_op</name></name> <operator pos:start="5773:26" pos:end="5773:27">!=</operator> <name pos:start="5773:29" pos:end="5773:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5775:17" pos:end="5775:43"><block_content pos:start="5775:17" pos:end="5775:43">

                <expr_stmt pos:start="5775:17" pos:end="5775:43"><expr pos:start="5775:17" pos:end="5775:42"><call pos:start="5775:17" pos:end="5775:42"><name pos:start="5775:17" pos:end="5775:32">gen_op_set_cc_op</name><argument_list pos:start="5775:33" pos:end="5775:42">(<argument pos:start="5775:34" pos:end="5775:41"><expr pos:start="5775:34" pos:end="5775:41"><name pos:start="5775:34" pos:end="5775:41"><name pos:start="5775:34" pos:end="5775:34">s</name><operator pos:start="5775:35" pos:end="5775:36">-&gt;</operator><name pos:start="5775:37" pos:end="5775:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5777:13" pos:end="5777:46"><expr pos:start="5777:13" pos:end="5777:45"><call pos:start="5777:13" pos:end="5777:45"><name pos:start="5777:13" pos:end="5777:22">gen_jmp_im</name><argument_list pos:start="5777:23" pos:end="5777:45">(<argument pos:start="5777:24" pos:end="5777:44"><expr pos:start="5777:24" pos:end="5777:44"><name pos:start="5777:24" pos:end="5777:31">pc_start</name> <operator pos:start="5777:33" pos:end="5777:33">-</operator> <name pos:start="5777:35" pos:end="5777:44"><name pos:start="5777:35" pos:end="5777:35">s</name><operator pos:start="5777:36" pos:end="5777:37">-&gt;</operator><name pos:start="5777:38" pos:end="5777:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5779:13" pos:end="5779:69"><expr pos:start="5779:13" pos:end="5779:68"><call pos:start="5779:13" pos:end="5779:68"><name pos:start="5779:13" pos:end="5779:26">gen_helper_hlt</name><argument_list pos:start="5779:27" pos:end="5779:68">(<argument pos:start="5779:28" pos:end="5779:34"><expr pos:start="5779:28" pos:end="5779:34"><name pos:start="5779:28" pos:end="5779:34">cpu_env</name></expr></argument>, <argument pos:start="5779:37" pos:end="5779:67"><expr pos:start="5779:37" pos:end="5779:67"><call pos:start="5779:37" pos:end="5779:67"><name pos:start="5779:37" pos:end="5779:49">tcg_const_i32</name><argument_list pos:start="5779:50" pos:end="5779:67">(<argument pos:start="5779:51" pos:end="5779:66"><expr pos:start="5779:51" pos:end="5779:66"><name pos:start="5779:51" pos:end="5779:55"><name pos:start="5779:51" pos:end="5779:51">s</name><operator pos:start="5779:52" pos:end="5779:53">-&gt;</operator><name pos:start="5779:54" pos:end="5779:55">pc</name></name> <operator pos:start="5779:57" pos:end="5779:57">-</operator> <name pos:start="5779:59" pos:end="5779:66">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5781:13" pos:end="5781:38"><expr pos:start="5781:13" pos:end="5781:37"><name pos:start="5781:13" pos:end="5781:21"><name pos:start="5781:13" pos:end="5781:13">s</name><operator pos:start="5781:14" pos:end="5781:15">-&gt;</operator><name pos:start="5781:16" pos:end="5781:21">is_jmp</name></name> <operator pos:start="5781:23" pos:end="5781:23">=</operator> <name pos:start="5781:25" pos:end="5781:37">DISAS_TB_JUMP</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5785:9" pos:end="5785:14">break;</break>

    <case pos:start="5787:5" pos:end="5787:15">case <expr pos:start="5787:10" pos:end="5787:14"><literal type="number" pos:start="5787:10" pos:end="5787:14">0x100</literal></expr>:</case>

        <expr_stmt pos:start="5789:9" pos:end="5789:44"><expr pos:start="5789:9" pos:end="5789:43"><name pos:start="5789:9" pos:end="5789:13">modrm</name> <operator pos:start="5789:15" pos:end="5789:15">=</operator> <call pos:start="5789:17" pos:end="5789:43"><name pos:start="5789:17" pos:end="5789:29">cpu_ldub_code</name><argument_list pos:start="5789:30" pos:end="5789:43">(<argument pos:start="5789:31" pos:end="5789:33"><expr pos:start="5789:31" pos:end="5789:33"><name pos:start="5789:31" pos:end="5789:33">env</name></expr></argument>, <argument pos:start="5789:36" pos:end="5789:42"><expr pos:start="5789:36" pos:end="5789:42"><name pos:start="5789:36" pos:end="5789:40"><name pos:start="5789:36" pos:end="5789:36">s</name><operator pos:start="5789:37" pos:end="5789:38">-&gt;</operator><name pos:start="5789:39" pos:end="5789:40">pc</name></name><operator pos:start="5789:41" pos:end="5789:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5791:9" pos:end="5791:31"><expr pos:start="5791:9" pos:end="5791:30"><name pos:start="5791:9" pos:end="5791:11">mod</name> <operator pos:start="5791:13" pos:end="5791:13">=</operator> <operator pos:start="5791:15" pos:end="5791:15">(</operator><name pos:start="5791:16" pos:end="5791:20">modrm</name> <operator pos:start="5791:22" pos:end="5791:23">&gt;&gt;</operator> <literal type="number" pos:start="5791:25" pos:end="5791:25">6</literal><operator pos:start="5791:26" pos:end="5791:26">)</operator> <operator pos:start="5791:28" pos:end="5791:28">&amp;</operator> <literal type="number" pos:start="5791:30" pos:end="5791:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="5793:9" pos:end="5793:30"><expr pos:start="5793:9" pos:end="5793:29"><name pos:start="5793:9" pos:end="5793:10">op</name> <operator pos:start="5793:12" pos:end="5793:12">=</operator> <operator pos:start="5793:14" pos:end="5793:14">(</operator><name pos:start="5793:15" pos:end="5793:19">modrm</name> <operator pos:start="5793:21" pos:end="5793:22">&gt;&gt;</operator> <literal type="number" pos:start="5793:24" pos:end="5793:24">3</literal><operator pos:start="5793:25" pos:end="5793:25">)</operator> <operator pos:start="5793:27" pos:end="5793:27">&amp;</operator> <literal type="number" pos:start="5793:29" pos:end="5793:29">7</literal></expr>;</expr_stmt>

        <switch pos:start="5795:9" pos:end="5921:9">switch<condition pos:start="5795:15" pos:end="5795:18">(<expr pos:start="5795:16" pos:end="5795:17"><name pos:start="5795:16" pos:end="5795:17">op</name></expr>)</condition> <block pos:start="5795:20" pos:end="5921:9">{<block_content pos:start="5797:9" pos:end="5919:28">

        <case pos:start="5797:9" pos:end="5797:15">case <expr pos:start="5797:14" pos:end="5797:14"><literal type="number" pos:start="5797:14" pos:end="5797:14">0</literal></expr>:</case> <comment type="block" pos:start="5797:17" pos:end="5797:26">/* sldt */</comment>

            <if_stmt pos:start="5799:13" pos:end="5801:32"><if pos:start="5799:13" pos:end="5801:32">if <condition pos:start="5799:16" pos:end="5799:34">(<expr pos:start="5799:17" pos:end="5799:33"><operator pos:start="5799:17" pos:end="5799:17">!</operator><name pos:start="5799:18" pos:end="5799:22"><name pos:start="5799:18" pos:end="5799:18">s</name><operator pos:start="5799:19" pos:end="5799:20">-&gt;</operator><name pos:start="5799:21" pos:end="5799:22">pe</name></name> <operator pos:start="5799:24" pos:end="5799:25">||</operator> <name pos:start="5799:27" pos:end="5799:33"><name pos:start="5799:27" pos:end="5799:27">s</name><operator pos:start="5799:28" pos:end="5799:29">-&gt;</operator><name pos:start="5799:30" pos:end="5799:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="5801:17" pos:end="5801:32"><block_content pos:start="5801:17" pos:end="5801:32">

                <goto pos:start="5801:17" pos:end="5801:32">goto <name pos:start="5801:22" pos:end="5801:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5803:13" pos:end="5803:69"><expr pos:start="5803:13" pos:end="5803:68"><call pos:start="5803:13" pos:end="5803:68"><name pos:start="5803:13" pos:end="5803:35">gen_svm_check_intercept</name><argument_list pos:start="5803:36" pos:end="5803:68">(<argument pos:start="5803:37" pos:end="5803:37"><expr pos:start="5803:37" pos:end="5803:37"><name pos:start="5803:37" pos:end="5803:37">s</name></expr></argument>, <argument pos:start="5803:40" pos:end="5803:47"><expr pos:start="5803:40" pos:end="5803:47"><name pos:start="5803:40" pos:end="5803:47">pc_start</name></expr></argument>, <argument pos:start="5803:50" pos:end="5803:67"><expr pos:start="5803:50" pos:end="5803:67"><name pos:start="5803:50" pos:end="5803:67">SVM_EXIT_LDTR_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5805:13" pos:end="5805:84"><expr pos:start="5805:13" pos:end="5805:83"><call pos:start="5805:13" pos:end="5805:83"><name pos:start="5805:13" pos:end="5805:28">tcg_gen_ld32u_tl</name><argument_list pos:start="5805:29" pos:end="5805:83">(<argument pos:start="5805:30" pos:end="5805:37"><expr pos:start="5805:30" pos:end="5805:37"><name pos:start="5805:30" pos:end="5805:37"><name pos:start="5805:30" pos:end="5805:34">cpu_T</name><index pos:start="5805:35" pos:end="5805:37">[<expr pos:start="5805:36" pos:end="5805:36"><literal type="number" pos:start="5805:36" pos:end="5805:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5805:40" pos:end="5805:46"><expr pos:start="5805:40" pos:end="5805:46"><name pos:start="5805:40" pos:end="5805:46">cpu_env</name></expr></argument>, <argument pos:start="5805:49" pos:end="5805:82"><expr pos:start="5805:49" pos:end="5805:82"><call pos:start="5805:49" pos:end="5805:82"><name pos:start="5805:49" pos:end="5805:56">offsetof</name><argument_list pos:start="5805:57" pos:end="5805:82">(<argument pos:start="5805:58" pos:end="5805:68"><expr pos:start="5805:58" pos:end="5805:68"><name pos:start="5805:58" pos:end="5805:68">CPUX86State</name></expr></argument>,<argument pos:start="5805:70" pos:end="5805:81"><expr pos:start="5805:70" pos:end="5805:81"><name pos:start="5805:70" pos:end="5805:81"><name pos:start="5805:70" pos:end="5805:72">ldt</name><operator pos:start="5805:73" pos:end="5805:73">.</operator><name pos:start="5805:74" pos:end="5805:81">selector</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5807:13" pos:end="5807:25"><expr pos:start="5807:13" pos:end="5807:24"><name pos:start="5807:13" pos:end="5807:14">ot</name> <operator pos:start="5807:16" pos:end="5807:16">=</operator> <name pos:start="5807:18" pos:end="5807:24">OT_WORD</name></expr>;</expr_stmt>

            <if_stmt pos:start="5809:13" pos:end="5811:31"><if pos:start="5809:13" pos:end="5811:31">if <condition pos:start="5809:16" pos:end="5809:25">(<expr pos:start="5809:17" pos:end="5809:24"><name pos:start="5809:17" pos:end="5809:19">mod</name> <operator pos:start="5809:21" pos:end="5809:22">==</operator> <literal type="number" pos:start="5809:24" pos:end="5809:24">3</literal></expr>)</condition><block type="pseudo" pos:start="5811:17" pos:end="5811:31"><block_content pos:start="5811:17" pos:end="5811:31">

                <expr_stmt pos:start="5811:17" pos:end="5811:31"><expr pos:start="5811:17" pos:end="5811:30"><name pos:start="5811:17" pos:end="5811:18">ot</name> <operator pos:start="5811:20" pos:end="5811:21">+=</operator> <name pos:start="5811:23" pos:end="5811:30"><name pos:start="5811:23" pos:end="5811:23">s</name><operator pos:start="5811:24" pos:end="5811:25">-&gt;</operator><name pos:start="5811:26" pos:end="5811:30">dflag</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5813:13" pos:end="5813:58"><expr pos:start="5813:13" pos:end="5813:57"><call pos:start="5813:13" pos:end="5813:57"><name pos:start="5813:13" pos:end="5813:26">gen_ldst_modrm</name><argument_list pos:start="5813:27" pos:end="5813:57">(<argument pos:start="5813:28" pos:end="5813:30"><expr pos:start="5813:28" pos:end="5813:30"><name pos:start="5813:28" pos:end="5813:30">env</name></expr></argument>, <argument pos:start="5813:33" pos:end="5813:33"><expr pos:start="5813:33" pos:end="5813:33"><name pos:start="5813:33" pos:end="5813:33">s</name></expr></argument>, <argument pos:start="5813:36" pos:end="5813:40"><expr pos:start="5813:36" pos:end="5813:40"><name pos:start="5813:36" pos:end="5813:40">modrm</name></expr></argument>, <argument pos:start="5813:43" pos:end="5813:44"><expr pos:start="5813:43" pos:end="5813:44"><name pos:start="5813:43" pos:end="5813:44">ot</name></expr></argument>, <argument pos:start="5813:47" pos:end="5813:53"><expr pos:start="5813:47" pos:end="5813:53"><name pos:start="5813:47" pos:end="5813:53">OR_TMP0</name></expr></argument>, <argument pos:start="5813:56" pos:end="5813:56"><expr pos:start="5813:56" pos:end="5813:56"><literal type="number" pos:start="5813:56" pos:end="5813:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="5815:13" pos:end="5815:18">break;</break>

        <case pos:start="5817:9" pos:end="5817:15">case <expr pos:start="5817:14" pos:end="5817:14"><literal type="number" pos:start="5817:14" pos:end="5817:14">2</literal></expr>:</case> <comment type="block" pos:start="5817:17" pos:end="5817:26">/* lldt */</comment>

            <if_stmt pos:start="5819:13" pos:end="5821:32"><if pos:start="5819:13" pos:end="5821:32">if <condition pos:start="5819:16" pos:end="5819:34">(<expr pos:start="5819:17" pos:end="5819:33"><operator pos:start="5819:17" pos:end="5819:17">!</operator><name pos:start="5819:18" pos:end="5819:22"><name pos:start="5819:18" pos:end="5819:18">s</name><operator pos:start="5819:19" pos:end="5819:20">-&gt;</operator><name pos:start="5819:21" pos:end="5819:22">pe</name></name> <operator pos:start="5819:24" pos:end="5819:25">||</operator> <name pos:start="5819:27" pos:end="5819:33"><name pos:start="5819:27" pos:end="5819:27">s</name><operator pos:start="5819:28" pos:end="5819:29">-&gt;</operator><name pos:start="5819:30" pos:end="5819:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="5821:17" pos:end="5821:32"><block_content pos:start="5821:17" pos:end="5821:32">

                <goto pos:start="5821:17" pos:end="5821:32">goto <name pos:start="5821:22" pos:end="5821:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="5823:13" pos:end="5839:13"><if pos:start="5823:13" pos:end="5827:13">if <condition pos:start="5823:16" pos:end="5823:28">(<expr pos:start="5823:17" pos:end="5823:27"><name pos:start="5823:17" pos:end="5823:22"><name pos:start="5823:17" pos:end="5823:17">s</name><operator pos:start="5823:18" pos:end="5823:19">-&gt;</operator><name pos:start="5823:20" pos:end="5823:22">cpl</name></name> <operator pos:start="5823:24" pos:end="5823:25">!=</operator> <literal type="number" pos:start="5823:27" pos:end="5823:27">0</literal></expr>)</condition> <block pos:start="5823:30" pos:end="5827:13">{<block_content pos:start="5825:17" pos:end="5825:68">

                <expr_stmt pos:start="5825:17" pos:end="5825:68"><expr pos:start="5825:17" pos:end="5825:67"><call pos:start="5825:17" pos:end="5825:67"><name pos:start="5825:17" pos:end="5825:29">gen_exception</name><argument_list pos:start="5825:30" pos:end="5825:67">(<argument pos:start="5825:31" pos:end="5825:31"><expr pos:start="5825:31" pos:end="5825:31"><name pos:start="5825:31" pos:end="5825:31">s</name></expr></argument>, <argument pos:start="5825:34" pos:end="5825:43"><expr pos:start="5825:34" pos:end="5825:43"><name pos:start="5825:34" pos:end="5825:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5825:46" pos:end="5825:66"><expr pos:start="5825:46" pos:end="5825:66"><name pos:start="5825:46" pos:end="5825:53">pc_start</name> <operator pos:start="5825:55" pos:end="5825:55">-</operator> <name pos:start="5825:57" pos:end="5825:66"><name pos:start="5825:57" pos:end="5825:57">s</name><operator pos:start="5825:58" pos:end="5825:59">-&gt;</operator><name pos:start="5825:60" pos:end="5825:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5827:15" pos:end="5839:13">else <block pos:start="5827:20" pos:end="5839:13">{<block_content pos:start="5829:17" pos:end="5837:55">

                <expr_stmt pos:start="5829:17" pos:end="5829:74"><expr pos:start="5829:17" pos:end="5829:73"><call pos:start="5829:17" pos:end="5829:73"><name pos:start="5829:17" pos:end="5829:39">gen_svm_check_intercept</name><argument_list pos:start="5829:40" pos:end="5829:73">(<argument pos:start="5829:41" pos:end="5829:41"><expr pos:start="5829:41" pos:end="5829:41"><name pos:start="5829:41" pos:end="5829:41">s</name></expr></argument>, <argument pos:start="5829:44" pos:end="5829:51"><expr pos:start="5829:44" pos:end="5829:51"><name pos:start="5829:44" pos:end="5829:51">pc_start</name></expr></argument>, <argument pos:start="5829:54" pos:end="5829:72"><expr pos:start="5829:54" pos:end="5829:72"><name pos:start="5829:54" pos:end="5829:72">SVM_EXIT_LDTR_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5831:17" pos:end="5831:67"><expr pos:start="5831:17" pos:end="5831:66"><call pos:start="5831:17" pos:end="5831:66"><name pos:start="5831:17" pos:end="5831:30">gen_ldst_modrm</name><argument_list pos:start="5831:31" pos:end="5831:66">(<argument pos:start="5831:32" pos:end="5831:34"><expr pos:start="5831:32" pos:end="5831:34"><name pos:start="5831:32" pos:end="5831:34">env</name></expr></argument>, <argument pos:start="5831:37" pos:end="5831:37"><expr pos:start="5831:37" pos:end="5831:37"><name pos:start="5831:37" pos:end="5831:37">s</name></expr></argument>, <argument pos:start="5831:40" pos:end="5831:44"><expr pos:start="5831:40" pos:end="5831:44"><name pos:start="5831:40" pos:end="5831:44">modrm</name></expr></argument>, <argument pos:start="5831:47" pos:end="5831:53"><expr pos:start="5831:47" pos:end="5831:53"><name pos:start="5831:47" pos:end="5831:53">OT_WORD</name></expr></argument>, <argument pos:start="5831:56" pos:end="5831:62"><expr pos:start="5831:56" pos:end="5831:62"><name pos:start="5831:56" pos:end="5831:62">OR_TMP0</name></expr></argument>, <argument pos:start="5831:65" pos:end="5831:65"><expr pos:start="5831:65" pos:end="5831:65"><literal type="number" pos:start="5831:65" pos:end="5831:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5833:17" pos:end="5833:50"><expr pos:start="5833:17" pos:end="5833:49"><call pos:start="5833:17" pos:end="5833:49"><name pos:start="5833:17" pos:end="5833:26">gen_jmp_im</name><argument_list pos:start="5833:27" pos:end="5833:49">(<argument pos:start="5833:28" pos:end="5833:48"><expr pos:start="5833:28" pos:end="5833:48"><name pos:start="5833:28" pos:end="5833:35">pc_start</name> <operator pos:start="5833:37" pos:end="5833:37">-</operator> <name pos:start="5833:39" pos:end="5833:48"><name pos:start="5833:39" pos:end="5833:39">s</name><operator pos:start="5833:40" pos:end="5833:41">-&gt;</operator><name pos:start="5833:42" pos:end="5833:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5835:17" pos:end="5835:61"><expr pos:start="5835:17" pos:end="5835:60"><call pos:start="5835:17" pos:end="5835:60"><name pos:start="5835:17" pos:end="5835:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="5835:37" pos:end="5835:60">(<argument pos:start="5835:38" pos:end="5835:49"><expr pos:start="5835:38" pos:end="5835:49"><name pos:start="5835:38" pos:end="5835:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="5835:52" pos:end="5835:59"><expr pos:start="5835:52" pos:end="5835:59"><name pos:start="5835:52" pos:end="5835:59"><name pos:start="5835:52" pos:end="5835:56">cpu_T</name><index pos:start="5835:57" pos:end="5835:59">[<expr pos:start="5835:58" pos:end="5835:58"><literal type="number" pos:start="5835:58" pos:end="5835:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5837:17" pos:end="5837:55"><expr pos:start="5837:17" pos:end="5837:54"><call pos:start="5837:17" pos:end="5837:54"><name pos:start="5837:17" pos:end="5837:31">gen_helper_lldt</name><argument_list pos:start="5837:32" pos:end="5837:54">(<argument pos:start="5837:33" pos:end="5837:39"><expr pos:start="5837:33" pos:end="5837:39"><name pos:start="5837:33" pos:end="5837:39">cpu_env</name></expr></argument>, <argument pos:start="5837:42" pos:end="5837:53"><expr pos:start="5837:42" pos:end="5837:53"><name pos:start="5837:42" pos:end="5837:53">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="5841:13" pos:end="5841:18">break;</break>

        <case pos:start="5843:9" pos:end="5843:15">case <expr pos:start="5843:14" pos:end="5843:14"><literal type="number" pos:start="5843:14" pos:end="5843:14">1</literal></expr>:</case> <comment type="block" pos:start="5843:17" pos:end="5843:25">/* str */</comment>

            <if_stmt pos:start="5845:13" pos:end="5847:32"><if pos:start="5845:13" pos:end="5847:32">if <condition pos:start="5845:16" pos:end="5845:34">(<expr pos:start="5845:17" pos:end="5845:33"><operator pos:start="5845:17" pos:end="5845:17">!</operator><name pos:start="5845:18" pos:end="5845:22"><name pos:start="5845:18" pos:end="5845:18">s</name><operator pos:start="5845:19" pos:end="5845:20">-&gt;</operator><name pos:start="5845:21" pos:end="5845:22">pe</name></name> <operator pos:start="5845:24" pos:end="5845:25">||</operator> <name pos:start="5845:27" pos:end="5845:33"><name pos:start="5845:27" pos:end="5845:27">s</name><operator pos:start="5845:28" pos:end="5845:29">-&gt;</operator><name pos:start="5845:30" pos:end="5845:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="5847:17" pos:end="5847:32"><block_content pos:start="5847:17" pos:end="5847:32">

                <goto pos:start="5847:17" pos:end="5847:32">goto <name pos:start="5847:22" pos:end="5847:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5849:13" pos:end="5849:67"><expr pos:start="5849:13" pos:end="5849:66"><call pos:start="5849:13" pos:end="5849:66"><name pos:start="5849:13" pos:end="5849:35">gen_svm_check_intercept</name><argument_list pos:start="5849:36" pos:end="5849:66">(<argument pos:start="5849:37" pos:end="5849:37"><expr pos:start="5849:37" pos:end="5849:37"><name pos:start="5849:37" pos:end="5849:37">s</name></expr></argument>, <argument pos:start="5849:40" pos:end="5849:47"><expr pos:start="5849:40" pos:end="5849:47"><name pos:start="5849:40" pos:end="5849:47">pc_start</name></expr></argument>, <argument pos:start="5849:50" pos:end="5849:65"><expr pos:start="5849:50" pos:end="5849:65"><name pos:start="5849:50" pos:end="5849:65">SVM_EXIT_TR_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5851:13" pos:end="5851:83"><expr pos:start="5851:13" pos:end="5851:82"><call pos:start="5851:13" pos:end="5851:82"><name pos:start="5851:13" pos:end="5851:28">tcg_gen_ld32u_tl</name><argument_list pos:start="5851:29" pos:end="5851:82">(<argument pos:start="5851:30" pos:end="5851:37"><expr pos:start="5851:30" pos:end="5851:37"><name pos:start="5851:30" pos:end="5851:37"><name pos:start="5851:30" pos:end="5851:34">cpu_T</name><index pos:start="5851:35" pos:end="5851:37">[<expr pos:start="5851:36" pos:end="5851:36"><literal type="number" pos:start="5851:36" pos:end="5851:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5851:40" pos:end="5851:46"><expr pos:start="5851:40" pos:end="5851:46"><name pos:start="5851:40" pos:end="5851:46">cpu_env</name></expr></argument>, <argument pos:start="5851:49" pos:end="5851:81"><expr pos:start="5851:49" pos:end="5851:81"><call pos:start="5851:49" pos:end="5851:81"><name pos:start="5851:49" pos:end="5851:56">offsetof</name><argument_list pos:start="5851:57" pos:end="5851:81">(<argument pos:start="5851:58" pos:end="5851:68"><expr pos:start="5851:58" pos:end="5851:68"><name pos:start="5851:58" pos:end="5851:68">CPUX86State</name></expr></argument>,<argument pos:start="5851:70" pos:end="5851:80"><expr pos:start="5851:70" pos:end="5851:80"><name pos:start="5851:70" pos:end="5851:80"><name pos:start="5851:70" pos:end="5851:71">tr</name><operator pos:start="5851:72" pos:end="5851:72">.</operator><name pos:start="5851:73" pos:end="5851:80">selector</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5853:13" pos:end="5853:25"><expr pos:start="5853:13" pos:end="5853:24"><name pos:start="5853:13" pos:end="5853:14">ot</name> <operator pos:start="5853:16" pos:end="5853:16">=</operator> <name pos:start="5853:18" pos:end="5853:24">OT_WORD</name></expr>;</expr_stmt>

            <if_stmt pos:start="5855:13" pos:end="5857:31"><if pos:start="5855:13" pos:end="5857:31">if <condition pos:start="5855:16" pos:end="5855:25">(<expr pos:start="5855:17" pos:end="5855:24"><name pos:start="5855:17" pos:end="5855:19">mod</name> <operator pos:start="5855:21" pos:end="5855:22">==</operator> <literal type="number" pos:start="5855:24" pos:end="5855:24">3</literal></expr>)</condition><block type="pseudo" pos:start="5857:17" pos:end="5857:31"><block_content pos:start="5857:17" pos:end="5857:31">

                <expr_stmt pos:start="5857:17" pos:end="5857:31"><expr pos:start="5857:17" pos:end="5857:30"><name pos:start="5857:17" pos:end="5857:18">ot</name> <operator pos:start="5857:20" pos:end="5857:21">+=</operator> <name pos:start="5857:23" pos:end="5857:30"><name pos:start="5857:23" pos:end="5857:23">s</name><operator pos:start="5857:24" pos:end="5857:25">-&gt;</operator><name pos:start="5857:26" pos:end="5857:30">dflag</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5859:13" pos:end="5859:58"><expr pos:start="5859:13" pos:end="5859:57"><call pos:start="5859:13" pos:end="5859:57"><name pos:start="5859:13" pos:end="5859:26">gen_ldst_modrm</name><argument_list pos:start="5859:27" pos:end="5859:57">(<argument pos:start="5859:28" pos:end="5859:30"><expr pos:start="5859:28" pos:end="5859:30"><name pos:start="5859:28" pos:end="5859:30">env</name></expr></argument>, <argument pos:start="5859:33" pos:end="5859:33"><expr pos:start="5859:33" pos:end="5859:33"><name pos:start="5859:33" pos:end="5859:33">s</name></expr></argument>, <argument pos:start="5859:36" pos:end="5859:40"><expr pos:start="5859:36" pos:end="5859:40"><name pos:start="5859:36" pos:end="5859:40">modrm</name></expr></argument>, <argument pos:start="5859:43" pos:end="5859:44"><expr pos:start="5859:43" pos:end="5859:44"><name pos:start="5859:43" pos:end="5859:44">ot</name></expr></argument>, <argument pos:start="5859:47" pos:end="5859:53"><expr pos:start="5859:47" pos:end="5859:53"><name pos:start="5859:47" pos:end="5859:53">OR_TMP0</name></expr></argument>, <argument pos:start="5859:56" pos:end="5859:56"><expr pos:start="5859:56" pos:end="5859:56"><literal type="number" pos:start="5859:56" pos:end="5859:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="5861:13" pos:end="5861:18">break;</break>

        <case pos:start="5863:9" pos:end="5863:15">case <expr pos:start="5863:14" pos:end="5863:14"><literal type="number" pos:start="5863:14" pos:end="5863:14">3</literal></expr>:</case> <comment type="block" pos:start="5863:17" pos:end="5863:25">/* ltr */</comment>

            <if_stmt pos:start="5865:13" pos:end="5867:32"><if pos:start="5865:13" pos:end="5867:32">if <condition pos:start="5865:16" pos:end="5865:34">(<expr pos:start="5865:17" pos:end="5865:33"><operator pos:start="5865:17" pos:end="5865:17">!</operator><name pos:start="5865:18" pos:end="5865:22"><name pos:start="5865:18" pos:end="5865:18">s</name><operator pos:start="5865:19" pos:end="5865:20">-&gt;</operator><name pos:start="5865:21" pos:end="5865:22">pe</name></name> <operator pos:start="5865:24" pos:end="5865:25">||</operator> <name pos:start="5865:27" pos:end="5865:33"><name pos:start="5865:27" pos:end="5865:27">s</name><operator pos:start="5865:28" pos:end="5865:29">-&gt;</operator><name pos:start="5865:30" pos:end="5865:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="5867:17" pos:end="5867:32"><block_content pos:start="5867:17" pos:end="5867:32">

                <goto pos:start="5867:17" pos:end="5867:32">goto <name pos:start="5867:22" pos:end="5867:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="5869:13" pos:end="5885:13"><if pos:start="5869:13" pos:end="5873:13">if <condition pos:start="5869:16" pos:end="5869:28">(<expr pos:start="5869:17" pos:end="5869:27"><name pos:start="5869:17" pos:end="5869:22"><name pos:start="5869:17" pos:end="5869:17">s</name><operator pos:start="5869:18" pos:end="5869:19">-&gt;</operator><name pos:start="5869:20" pos:end="5869:22">cpl</name></name> <operator pos:start="5869:24" pos:end="5869:25">!=</operator> <literal type="number" pos:start="5869:27" pos:end="5869:27">0</literal></expr>)</condition> <block pos:start="5869:30" pos:end="5873:13">{<block_content pos:start="5871:17" pos:end="5871:68">

                <expr_stmt pos:start="5871:17" pos:end="5871:68"><expr pos:start="5871:17" pos:end="5871:67"><call pos:start="5871:17" pos:end="5871:67"><name pos:start="5871:17" pos:end="5871:29">gen_exception</name><argument_list pos:start="5871:30" pos:end="5871:67">(<argument pos:start="5871:31" pos:end="5871:31"><expr pos:start="5871:31" pos:end="5871:31"><name pos:start="5871:31" pos:end="5871:31">s</name></expr></argument>, <argument pos:start="5871:34" pos:end="5871:43"><expr pos:start="5871:34" pos:end="5871:43"><name pos:start="5871:34" pos:end="5871:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5871:46" pos:end="5871:66"><expr pos:start="5871:46" pos:end="5871:66"><name pos:start="5871:46" pos:end="5871:53">pc_start</name> <operator pos:start="5871:55" pos:end="5871:55">-</operator> <name pos:start="5871:57" pos:end="5871:66"><name pos:start="5871:57" pos:end="5871:57">s</name><operator pos:start="5871:58" pos:end="5871:59">-&gt;</operator><name pos:start="5871:60" pos:end="5871:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5873:15" pos:end="5885:13">else <block pos:start="5873:20" pos:end="5885:13">{<block_content pos:start="5875:17" pos:end="5883:54">

                <expr_stmt pos:start="5875:17" pos:end="5875:72"><expr pos:start="5875:17" pos:end="5875:71"><call pos:start="5875:17" pos:end="5875:71"><name pos:start="5875:17" pos:end="5875:39">gen_svm_check_intercept</name><argument_list pos:start="5875:40" pos:end="5875:71">(<argument pos:start="5875:41" pos:end="5875:41"><expr pos:start="5875:41" pos:end="5875:41"><name pos:start="5875:41" pos:end="5875:41">s</name></expr></argument>, <argument pos:start="5875:44" pos:end="5875:51"><expr pos:start="5875:44" pos:end="5875:51"><name pos:start="5875:44" pos:end="5875:51">pc_start</name></expr></argument>, <argument pos:start="5875:54" pos:end="5875:70"><expr pos:start="5875:54" pos:end="5875:70"><name pos:start="5875:54" pos:end="5875:70">SVM_EXIT_TR_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5877:17" pos:end="5877:67"><expr pos:start="5877:17" pos:end="5877:66"><call pos:start="5877:17" pos:end="5877:66"><name pos:start="5877:17" pos:end="5877:30">gen_ldst_modrm</name><argument_list pos:start="5877:31" pos:end="5877:66">(<argument pos:start="5877:32" pos:end="5877:34"><expr pos:start="5877:32" pos:end="5877:34"><name pos:start="5877:32" pos:end="5877:34">env</name></expr></argument>, <argument pos:start="5877:37" pos:end="5877:37"><expr pos:start="5877:37" pos:end="5877:37"><name pos:start="5877:37" pos:end="5877:37">s</name></expr></argument>, <argument pos:start="5877:40" pos:end="5877:44"><expr pos:start="5877:40" pos:end="5877:44"><name pos:start="5877:40" pos:end="5877:44">modrm</name></expr></argument>, <argument pos:start="5877:47" pos:end="5877:53"><expr pos:start="5877:47" pos:end="5877:53"><name pos:start="5877:47" pos:end="5877:53">OT_WORD</name></expr></argument>, <argument pos:start="5877:56" pos:end="5877:62"><expr pos:start="5877:56" pos:end="5877:62"><name pos:start="5877:56" pos:end="5877:62">OR_TMP0</name></expr></argument>, <argument pos:start="5877:65" pos:end="5877:65"><expr pos:start="5877:65" pos:end="5877:65"><literal type="number" pos:start="5877:65" pos:end="5877:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5879:17" pos:end="5879:50"><expr pos:start="5879:17" pos:end="5879:49"><call pos:start="5879:17" pos:end="5879:49"><name pos:start="5879:17" pos:end="5879:26">gen_jmp_im</name><argument_list pos:start="5879:27" pos:end="5879:49">(<argument pos:start="5879:28" pos:end="5879:48"><expr pos:start="5879:28" pos:end="5879:48"><name pos:start="5879:28" pos:end="5879:35">pc_start</name> <operator pos:start="5879:37" pos:end="5879:37">-</operator> <name pos:start="5879:39" pos:end="5879:48"><name pos:start="5879:39" pos:end="5879:39">s</name><operator pos:start="5879:40" pos:end="5879:41">-&gt;</operator><name pos:start="5879:42" pos:end="5879:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5881:17" pos:end="5881:61"><expr pos:start="5881:17" pos:end="5881:60"><call pos:start="5881:17" pos:end="5881:60"><name pos:start="5881:17" pos:end="5881:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="5881:37" pos:end="5881:60">(<argument pos:start="5881:38" pos:end="5881:49"><expr pos:start="5881:38" pos:end="5881:49"><name pos:start="5881:38" pos:end="5881:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="5881:52" pos:end="5881:59"><expr pos:start="5881:52" pos:end="5881:59"><name pos:start="5881:52" pos:end="5881:59"><name pos:start="5881:52" pos:end="5881:56">cpu_T</name><index pos:start="5881:57" pos:end="5881:59">[<expr pos:start="5881:58" pos:end="5881:58"><literal type="number" pos:start="5881:58" pos:end="5881:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5883:17" pos:end="5883:54"><expr pos:start="5883:17" pos:end="5883:53"><call pos:start="5883:17" pos:end="5883:53"><name pos:start="5883:17" pos:end="5883:30">gen_helper_ltr</name><argument_list pos:start="5883:31" pos:end="5883:53">(<argument pos:start="5883:32" pos:end="5883:38"><expr pos:start="5883:32" pos:end="5883:38"><name pos:start="5883:32" pos:end="5883:38">cpu_env</name></expr></argument>, <argument pos:start="5883:41" pos:end="5883:52"><expr pos:start="5883:41" pos:end="5883:52"><name pos:start="5883:41" pos:end="5883:52">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="5887:13" pos:end="5887:18">break;</break>

        <case pos:start="5889:9" pos:end="5889:15">case <expr pos:start="5889:14" pos:end="5889:14"><literal type="number" pos:start="5889:14" pos:end="5889:14">4</literal></expr>:</case> <comment type="block" pos:start="5889:17" pos:end="5889:26">/* verr */</comment>

        <case pos:start="5891:9" pos:end="5891:15">case <expr pos:start="5891:14" pos:end="5891:14"><literal type="number" pos:start="5891:14" pos:end="5891:14">5</literal></expr>:</case> <comment type="block" pos:start="5891:17" pos:end="5891:26">/* verw */</comment>

            <if_stmt pos:start="5893:13" pos:end="5895:32"><if pos:start="5893:13" pos:end="5895:32">if <condition pos:start="5893:16" pos:end="5893:34">(<expr pos:start="5893:17" pos:end="5893:33"><operator pos:start="5893:17" pos:end="5893:17">!</operator><name pos:start="5893:18" pos:end="5893:22"><name pos:start="5893:18" pos:end="5893:18">s</name><operator pos:start="5893:19" pos:end="5893:20">-&gt;</operator><name pos:start="5893:21" pos:end="5893:22">pe</name></name> <operator pos:start="5893:24" pos:end="5893:25">||</operator> <name pos:start="5893:27" pos:end="5893:33"><name pos:start="5893:27" pos:end="5893:27">s</name><operator pos:start="5893:28" pos:end="5893:29">-&gt;</operator><name pos:start="5893:30" pos:end="5893:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="5895:17" pos:end="5895:32"><block_content pos:start="5895:17" pos:end="5895:32">

                <goto pos:start="5895:17" pos:end="5895:32">goto <name pos:start="5895:22" pos:end="5895:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5897:13" pos:end="5897:63"><expr pos:start="5897:13" pos:end="5897:62"><call pos:start="5897:13" pos:end="5897:62"><name pos:start="5897:13" pos:end="5897:26">gen_ldst_modrm</name><argument_list pos:start="5897:27" pos:end="5897:62">(<argument pos:start="5897:28" pos:end="5897:30"><expr pos:start="5897:28" pos:end="5897:30"><name pos:start="5897:28" pos:end="5897:30">env</name></expr></argument>, <argument pos:start="5897:33" pos:end="5897:33"><expr pos:start="5897:33" pos:end="5897:33"><name pos:start="5897:33" pos:end="5897:33">s</name></expr></argument>, <argument pos:start="5897:36" pos:end="5897:40"><expr pos:start="5897:36" pos:end="5897:40"><name pos:start="5897:36" pos:end="5897:40">modrm</name></expr></argument>, <argument pos:start="5897:43" pos:end="5897:49"><expr pos:start="5897:43" pos:end="5897:49"><name pos:start="5897:43" pos:end="5897:49">OT_WORD</name></expr></argument>, <argument pos:start="5897:52" pos:end="5897:58"><expr pos:start="5897:52" pos:end="5897:58"><name pos:start="5897:52" pos:end="5897:58">OR_TMP0</name></expr></argument>, <argument pos:start="5897:61" pos:end="5897:61"><expr pos:start="5897:61" pos:end="5897:61"><literal type="number" pos:start="5897:61" pos:end="5897:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5899:13" pos:end="5901:43"><if pos:start="5899:13" pos:end="5901:43">if <condition pos:start="5899:16" pos:end="5899:42">(<expr pos:start="5899:17" pos:end="5899:41"><name pos:start="5899:17" pos:end="5899:24"><name pos:start="5899:17" pos:end="5899:17">s</name><operator pos:start="5899:18" pos:end="5899:19">-&gt;</operator><name pos:start="5899:20" pos:end="5899:24">cc_op</name></name> <operator pos:start="5899:26" pos:end="5899:27">!=</operator> <name pos:start="5899:29" pos:end="5899:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5901:17" pos:end="5901:43"><block_content pos:start="5901:17" pos:end="5901:43">

                <expr_stmt pos:start="5901:17" pos:end="5901:43"><expr pos:start="5901:17" pos:end="5901:42"><call pos:start="5901:17" pos:end="5901:42"><name pos:start="5901:17" pos:end="5901:32">gen_op_set_cc_op</name><argument_list pos:start="5901:33" pos:end="5901:42">(<argument pos:start="5901:34" pos:end="5901:41"><expr pos:start="5901:34" pos:end="5901:41"><name pos:start="5901:34" pos:end="5901:41"><name pos:start="5901:34" pos:end="5901:34">s</name><operator pos:start="5901:35" pos:end="5901:36">-&gt;</operator><name pos:start="5901:37" pos:end="5901:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="5903:13" pos:end="5911:13"><if pos:start="5903:13" pos:end="5907:13">if <condition pos:start="5903:16" pos:end="5903:24">(<expr pos:start="5903:17" pos:end="5903:23"><name pos:start="5903:17" pos:end="5903:18">op</name> <operator pos:start="5903:20" pos:end="5903:21">==</operator> <literal type="number" pos:start="5903:23" pos:end="5903:23">4</literal></expr>)</condition> <block pos:start="5903:26" pos:end="5907:13">{<block_content pos:start="5905:17" pos:end="5905:51">

                <expr_stmt pos:start="5905:17" pos:end="5905:51"><expr pos:start="5905:17" pos:end="5905:50"><call pos:start="5905:17" pos:end="5905:50"><name pos:start="5905:17" pos:end="5905:31">gen_helper_verr</name><argument_list pos:start="5905:32" pos:end="5905:50">(<argument pos:start="5905:33" pos:end="5905:39"><expr pos:start="5905:33" pos:end="5905:39"><name pos:start="5905:33" pos:end="5905:39">cpu_env</name></expr></argument>, <argument pos:start="5905:42" pos:end="5905:49"><expr pos:start="5905:42" pos:end="5905:49"><name pos:start="5905:42" pos:end="5905:49"><name pos:start="5905:42" pos:end="5905:46">cpu_T</name><index pos:start="5905:47" pos:end="5905:49">[<expr pos:start="5905:48" pos:end="5905:48"><literal type="number" pos:start="5905:48" pos:end="5905:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5907:15" pos:end="5911:13">else <block pos:start="5907:20" pos:end="5911:13">{<block_content pos:start="5909:17" pos:end="5909:51">

                <expr_stmt pos:start="5909:17" pos:end="5909:51"><expr pos:start="5909:17" pos:end="5909:50"><call pos:start="5909:17" pos:end="5909:50"><name pos:start="5909:17" pos:end="5909:31">gen_helper_verw</name><argument_list pos:start="5909:32" pos:end="5909:50">(<argument pos:start="5909:33" pos:end="5909:39"><expr pos:start="5909:33" pos:end="5909:39"><name pos:start="5909:33" pos:end="5909:39">cpu_env</name></expr></argument>, <argument pos:start="5909:42" pos:end="5909:49"><expr pos:start="5909:42" pos:end="5909:49"><name pos:start="5909:42" pos:end="5909:49"><name pos:start="5909:42" pos:end="5909:46">cpu_T</name><index pos:start="5909:47" pos:end="5909:49">[<expr pos:start="5909:48" pos:end="5909:48"><literal type="number" pos:start="5909:48" pos:end="5909:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="5913:13" pos:end="5913:36"><expr pos:start="5913:13" pos:end="5913:35"><name pos:start="5913:13" pos:end="5913:20"><name pos:start="5913:13" pos:end="5913:13">s</name><operator pos:start="5913:14" pos:end="5913:15">-&gt;</operator><name pos:start="5913:16" pos:end="5913:20">cc_op</name></name> <operator pos:start="5913:22" pos:end="5913:22">=</operator> <name pos:start="5913:24" pos:end="5913:35">CC_OP_EFLAGS</name></expr>;</expr_stmt>

            <break pos:start="5915:13" pos:end="5915:18">break;</break>

        <default pos:start="5917:9" pos:end="5917:16">default:</default>

            <goto pos:start="5919:13" pos:end="5919:28">goto <name pos:start="5919:18" pos:end="5919:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="5923:9" pos:end="5923:14">break;</break>

    <case pos:start="5925:5" pos:end="5925:15">case <expr pos:start="5925:10" pos:end="5925:14"><literal type="number" pos:start="5925:10" pos:end="5925:14">0x101</literal></expr>:</case>

        <expr_stmt pos:start="5927:9" pos:end="5927:44"><expr pos:start="5927:9" pos:end="5927:43"><name pos:start="5927:9" pos:end="5927:13">modrm</name> <operator pos:start="5927:15" pos:end="5927:15">=</operator> <call pos:start="5927:17" pos:end="5927:43"><name pos:start="5927:17" pos:end="5927:29">cpu_ldub_code</name><argument_list pos:start="5927:30" pos:end="5927:43">(<argument pos:start="5927:31" pos:end="5927:33"><expr pos:start="5927:31" pos:end="5927:33"><name pos:start="5927:31" pos:end="5927:33">env</name></expr></argument>, <argument pos:start="5927:36" pos:end="5927:42"><expr pos:start="5927:36" pos:end="5927:42"><name pos:start="5927:36" pos:end="5927:40"><name pos:start="5927:36" pos:end="5927:36">s</name><operator pos:start="5927:37" pos:end="5927:38">-&gt;</operator><name pos:start="5927:39" pos:end="5927:40">pc</name></name><operator pos:start="5927:41" pos:end="5927:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5929:9" pos:end="5929:31"><expr pos:start="5929:9" pos:end="5929:30"><name pos:start="5929:9" pos:end="5929:11">mod</name> <operator pos:start="5929:13" pos:end="5929:13">=</operator> <operator pos:start="5929:15" pos:end="5929:15">(</operator><name pos:start="5929:16" pos:end="5929:20">modrm</name> <operator pos:start="5929:22" pos:end="5929:23">&gt;&gt;</operator> <literal type="number" pos:start="5929:25" pos:end="5929:25">6</literal><operator pos:start="5929:26" pos:end="5929:26">)</operator> <operator pos:start="5929:28" pos:end="5929:28">&amp;</operator> <literal type="number" pos:start="5929:30" pos:end="5929:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="5931:9" pos:end="5931:30"><expr pos:start="5931:9" pos:end="5931:29"><name pos:start="5931:9" pos:end="5931:10">op</name> <operator pos:start="5931:12" pos:end="5931:12">=</operator> <operator pos:start="5931:14" pos:end="5931:14">(</operator><name pos:start="5931:15" pos:end="5931:19">modrm</name> <operator pos:start="5931:21" pos:end="5931:22">&gt;&gt;</operator> <literal type="number" pos:start="5931:24" pos:end="5931:24">3</literal><operator pos:start="5931:25" pos:end="5931:25">)</operator> <operator pos:start="5931:27" pos:end="5931:27">&amp;</operator> <literal type="number" pos:start="5931:29" pos:end="5931:29">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="5933:9" pos:end="5933:23"><expr pos:start="5933:9" pos:end="5933:22"><name pos:start="5933:9" pos:end="5933:10">rm</name> <operator pos:start="5933:12" pos:end="5933:12">=</operator> <name pos:start="5933:14" pos:end="5933:18">modrm</name> <operator pos:start="5933:20" pos:end="5933:20">&amp;</operator> <literal type="number" pos:start="5933:22" pos:end="5933:22">7</literal></expr>;</expr_stmt>

        <switch pos:start="5935:9" pos:end="6461:9">switch<condition pos:start="5935:15" pos:end="5935:18">(<expr pos:start="5935:16" pos:end="5935:17"><name pos:start="5935:16" pos:end="5935:17">op</name></expr>)</condition> <block pos:start="5935:20" pos:end="6461:9">{<block_content pos:start="5937:9" pos:end="6459:28">

        <case pos:start="5937:9" pos:end="5937:15">case <expr pos:start="5937:14" pos:end="5937:14"><literal type="number" pos:start="5937:14" pos:end="5937:14">0</literal></expr>:</case> <comment type="block" pos:start="5937:17" pos:end="5937:26">/* sgdt */</comment>

            <if_stmt pos:start="5939:13" pos:end="5941:32"><if pos:start="5939:13" pos:end="5941:32">if <condition pos:start="5939:16" pos:end="5939:25">(<expr pos:start="5939:17" pos:end="5939:24"><name pos:start="5939:17" pos:end="5939:19">mod</name> <operator pos:start="5939:21" pos:end="5939:22">==</operator> <literal type="number" pos:start="5939:24" pos:end="5939:24">3</literal></expr>)</condition><block type="pseudo" pos:start="5941:17" pos:end="5941:32"><block_content pos:start="5941:17" pos:end="5941:32">

                <goto pos:start="5941:17" pos:end="5941:32">goto <name pos:start="5941:22" pos:end="5941:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5943:13" pos:end="5943:69"><expr pos:start="5943:13" pos:end="5943:68"><call pos:start="5943:13" pos:end="5943:68"><name pos:start="5943:13" pos:end="5943:35">gen_svm_check_intercept</name><argument_list pos:start="5943:36" pos:end="5943:68">(<argument pos:start="5943:37" pos:end="5943:37"><expr pos:start="5943:37" pos:end="5943:37"><name pos:start="5943:37" pos:end="5943:37">s</name></expr></argument>, <argument pos:start="5943:40" pos:end="5943:47"><expr pos:start="5943:40" pos:end="5943:47"><name pos:start="5943:40" pos:end="5943:47">pc_start</name></expr></argument>, <argument pos:start="5943:50" pos:end="5943:67"><expr pos:start="5943:50" pos:end="5943:67"><name pos:start="5943:50" pos:end="5943:67">SVM_EXIT_GDTR_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5945:13" pos:end="5945:66"><expr pos:start="5945:13" pos:end="5945:65"><call pos:start="5945:13" pos:end="5945:65"><name pos:start="5945:13" pos:end="5945:25">gen_lea_modrm</name><argument_list pos:start="5945:26" pos:end="5945:65">(<argument pos:start="5945:27" pos:end="5945:29"><expr pos:start="5945:27" pos:end="5945:29"><name pos:start="5945:27" pos:end="5945:29">env</name></expr></argument>, <argument pos:start="5945:32" pos:end="5945:32"><expr pos:start="5945:32" pos:end="5945:32"><name pos:start="5945:32" pos:end="5945:32">s</name></expr></argument>, <argument pos:start="5945:35" pos:end="5945:39"><expr pos:start="5945:35" pos:end="5945:39"><name pos:start="5945:35" pos:end="5945:39">modrm</name></expr></argument>, <argument pos:start="5945:42" pos:end="5945:50"><expr pos:start="5945:42" pos:end="5945:50"><operator pos:start="5945:42" pos:end="5945:42">&amp;</operator><name pos:start="5945:43" pos:end="5945:50">reg_addr</name></expr></argument>, <argument pos:start="5945:53" pos:end="5945:64"><expr pos:start="5945:53" pos:end="5945:64"><operator pos:start="5945:53" pos:end="5945:53">&amp;</operator><name pos:start="5945:54" pos:end="5945:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5947:13" pos:end="5947:82"><expr pos:start="5947:13" pos:end="5947:81"><call pos:start="5947:13" pos:end="5947:81"><name pos:start="5947:13" pos:end="5947:28">tcg_gen_ld32u_tl</name><argument_list pos:start="5947:29" pos:end="5947:81">(<argument pos:start="5947:30" pos:end="5947:37"><expr pos:start="5947:30" pos:end="5947:37"><name pos:start="5947:30" pos:end="5947:37"><name pos:start="5947:30" pos:end="5947:34">cpu_T</name><index pos:start="5947:35" pos:end="5947:37">[<expr pos:start="5947:36" pos:end="5947:36"><literal type="number" pos:start="5947:36" pos:end="5947:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5947:40" pos:end="5947:46"><expr pos:start="5947:40" pos:end="5947:46"><name pos:start="5947:40" pos:end="5947:46">cpu_env</name></expr></argument>, <argument pos:start="5947:49" pos:end="5947:80"><expr pos:start="5947:49" pos:end="5947:80"><call pos:start="5947:49" pos:end="5947:80"><name pos:start="5947:49" pos:end="5947:56">offsetof</name><argument_list pos:start="5947:57" pos:end="5947:80">(<argument pos:start="5947:58" pos:end="5947:68"><expr pos:start="5947:58" pos:end="5947:68"><name pos:start="5947:58" pos:end="5947:68">CPUX86State</name></expr></argument>, <argument pos:start="5947:71" pos:end="5947:79"><expr pos:start="5947:71" pos:end="5947:79"><name pos:start="5947:71" pos:end="5947:79"><name pos:start="5947:71" pos:end="5947:73">gdt</name><operator pos:start="5947:74" pos:end="5947:74">.</operator><name pos:start="5947:75" pos:end="5947:79">limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5949:13" pos:end="5949:52"><expr pos:start="5949:13" pos:end="5949:51"><call pos:start="5949:13" pos:end="5949:51"><name pos:start="5949:13" pos:end="5949:27">gen_op_st_T0_A0</name><argument_list pos:start="5949:28" pos:end="5949:51">(<argument pos:start="5949:29" pos:end="5949:50"><expr pos:start="5949:29" pos:end="5949:50"><name pos:start="5949:29" pos:end="5949:35">OT_WORD</name> <operator pos:start="5949:37" pos:end="5949:37">+</operator> <name pos:start="5949:39" pos:end="5949:50"><name pos:start="5949:39" pos:end="5949:39">s</name><operator pos:start="5949:40" pos:end="5949:41">-&gt;</operator><name pos:start="5949:42" pos:end="5949:50">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5951:13" pos:end="5951:32"><expr pos:start="5951:13" pos:end="5951:31"><call pos:start="5951:13" pos:end="5951:31"><name pos:start="5951:13" pos:end="5951:25">gen_add_A0_im</name><argument_list pos:start="5951:26" pos:end="5951:31">(<argument pos:start="5951:27" pos:end="5951:27"><expr pos:start="5951:27" pos:end="5951:27"><name pos:start="5951:27" pos:end="5951:27">s</name></expr></argument>, <argument pos:start="5951:30" pos:end="5951:30"><expr pos:start="5951:30" pos:end="5951:30"><literal type="number" pos:start="5951:30" pos:end="5951:30">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5953:13" pos:end="5953:78"><expr pos:start="5953:13" pos:end="5953:77"><call pos:start="5953:13" pos:end="5953:77"><name pos:start="5953:13" pos:end="5953:25">tcg_gen_ld_tl</name><argument_list pos:start="5953:26" pos:end="5953:77">(<argument pos:start="5953:27" pos:end="5953:34"><expr pos:start="5953:27" pos:end="5953:34"><name pos:start="5953:27" pos:end="5953:34"><name pos:start="5953:27" pos:end="5953:31">cpu_T</name><index pos:start="5953:32" pos:end="5953:34">[<expr pos:start="5953:33" pos:end="5953:33"><literal type="number" pos:start="5953:33" pos:end="5953:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5953:37" pos:end="5953:43"><expr pos:start="5953:37" pos:end="5953:43"><name pos:start="5953:37" pos:end="5953:43">cpu_env</name></expr></argument>, <argument pos:start="5953:46" pos:end="5953:76"><expr pos:start="5953:46" pos:end="5953:76"><call pos:start="5953:46" pos:end="5953:76"><name pos:start="5953:46" pos:end="5953:53">offsetof</name><argument_list pos:start="5953:54" pos:end="5953:76">(<argument pos:start="5953:55" pos:end="5953:65"><expr pos:start="5953:55" pos:end="5953:65"><name pos:start="5953:55" pos:end="5953:65">CPUX86State</name></expr></argument>, <argument pos:start="5953:68" pos:end="5953:75"><expr pos:start="5953:68" pos:end="5953:75"><name pos:start="5953:68" pos:end="5953:75"><name pos:start="5953:68" pos:end="5953:70">gdt</name><operator pos:start="5953:71" pos:end="5953:71">.</operator><name pos:start="5953:72" pos:end="5953:75">base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5955:13" pos:end="5957:44"><if pos:start="5955:13" pos:end="5957:44">if <condition pos:start="5955:16" pos:end="5955:26">(<expr pos:start="5955:17" pos:end="5955:25"><operator pos:start="5955:17" pos:end="5955:17">!</operator><name pos:start="5955:18" pos:end="5955:25"><name pos:start="5955:18" pos:end="5955:18">s</name><operator pos:start="5955:19" pos:end="5955:20">-&gt;</operator><name pos:start="5955:21" pos:end="5955:25">dflag</name></name></expr>)</condition><block type="pseudo" pos:start="5957:17" pos:end="5957:44"><block_content pos:start="5957:17" pos:end="5957:44">

                <expr_stmt pos:start="5957:17" pos:end="5957:44"><expr pos:start="5957:17" pos:end="5957:43"><call pos:start="5957:17" pos:end="5957:43"><name pos:start="5957:17" pos:end="5957:33">gen_op_andl_T0_im</name><argument_list pos:start="5957:34" pos:end="5957:43">(<argument pos:start="5957:35" pos:end="5957:42"><expr pos:start="5957:35" pos:end="5957:42"><literal type="number" pos:start="5957:35" pos:end="5957:42">0xffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5959:13" pos:end="5959:64"><expr pos:start="5959:13" pos:end="5959:63"><call pos:start="5959:13" pos:end="5959:63"><name pos:start="5959:13" pos:end="5959:27">gen_op_st_T0_A0</name><argument_list pos:start="5959:28" pos:end="5959:63">(<argument pos:start="5959:29" pos:end="5959:62"><expr pos:start="5959:29" pos:end="5959:62"><call pos:start="5959:29" pos:end="5959:37"><name pos:start="5959:29" pos:end="5959:34">CODE64</name><argument_list pos:start="5959:35" pos:end="5959:37">(<argument pos:start="5959:36" pos:end="5959:36"><expr pos:start="5959:36" pos:end="5959:36"><name pos:start="5959:36" pos:end="5959:36">s</name></expr></argument>)</argument_list></call> <operator pos:start="5959:39" pos:end="5959:39">+</operator> <name pos:start="5959:41" pos:end="5959:47">OT_LONG</name> <operator pos:start="5959:49" pos:end="5959:49">+</operator> <name pos:start="5959:51" pos:end="5959:62"><name pos:start="5959:51" pos:end="5959:51">s</name><operator pos:start="5959:52" pos:end="5959:53">-&gt;</operator><name pos:start="5959:54" pos:end="5959:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="5961:13" pos:end="5961:18">break;</break>

        <case pos:start="5963:9" pos:end="5963:15">case <expr pos:start="5963:14" pos:end="5963:14"><literal type="number" pos:start="5963:14" pos:end="5963:14">1</literal></expr>:</case>

            <if_stmt pos:start="5965:13" pos:end="6089:13"><if pos:start="5965:13" pos:end="6069:13">if <condition pos:start="5965:16" pos:end="5965:25">(<expr pos:start="5965:17" pos:end="5965:24"><name pos:start="5965:17" pos:end="5965:19">mod</name> <operator pos:start="5965:21" pos:end="5965:22">==</operator> <literal type="number" pos:start="5965:24" pos:end="5965:24">3</literal></expr>)</condition> <block pos:start="5965:27" pos:end="6069:13">{<block_content pos:start="5967:17" pos:end="6067:17">

                <switch pos:start="5967:17" pos:end="6067:17">switch <condition pos:start="5967:24" pos:end="5967:27">(<expr pos:start="5967:25" pos:end="5967:26"><name pos:start="5967:25" pos:end="5967:26">rm</name></expr>)</condition> <block pos:start="5967:29" pos:end="6067:17">{<block_content pos:start="5969:17" pos:end="6065:36">

                <case pos:start="5969:17" pos:end="5969:23">case <expr pos:start="5969:22" pos:end="5969:22"><literal type="number" pos:start="5969:22" pos:end="5969:22">0</literal></expr>:</case> <comment type="block" pos:start="5969:25" pos:end="5969:37">/* monitor */</comment>

                    <if_stmt pos:start="5971:21" pos:end="5975:40"><if pos:start="5971:21" pos:end="5975:40">if <condition pos:start="5971:24" pos:end="5973:36">(<expr pos:start="5971:25" pos:end="5973:35"><operator pos:start="5971:25" pos:end="5971:25">!</operator><operator pos:start="5971:26" pos:end="5971:26">(</operator><name pos:start="5971:27" pos:end="5971:47"><name pos:start="5971:27" pos:end="5971:27">s</name><operator pos:start="5971:28" pos:end="5971:29">-&gt;</operator><name pos:start="5971:30" pos:end="5971:47">cpuid_ext_features</name></name> <operator pos:start="5971:49" pos:end="5971:49">&amp;</operator> <name pos:start="5971:51" pos:end="5971:67">CPUID_EXT_MONITOR</name><operator pos:start="5971:68" pos:end="5971:68">)</operator> <operator pos:start="5971:70" pos:end="5971:71">||</operator>

                        <name pos:start="5973:25" pos:end="5973:30"><name pos:start="5973:25" pos:end="5973:25">s</name><operator pos:start="5973:26" pos:end="5973:27">-&gt;</operator><name pos:start="5973:28" pos:end="5973:30">cpl</name></name> <operator pos:start="5973:32" pos:end="5973:33">!=</operator> <literal type="number" pos:start="5973:35" pos:end="5973:35">0</literal></expr>)</condition><block type="pseudo" pos:start="5975:25" pos:end="5975:40"><block_content pos:start="5975:25" pos:end="5975:40">

                        <goto pos:start="5975:25" pos:end="5975:40">goto <name pos:start="5975:30" pos:end="5975:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="5977:21" pos:end="5979:51"><if pos:start="5977:21" pos:end="5979:51">if <condition pos:start="5977:24" pos:end="5977:50">(<expr pos:start="5977:25" pos:end="5977:49"><name pos:start="5977:25" pos:end="5977:32"><name pos:start="5977:25" pos:end="5977:25">s</name><operator pos:start="5977:26" pos:end="5977:27">-&gt;</operator><name pos:start="5977:28" pos:end="5977:32">cc_op</name></name> <operator pos:start="5977:34" pos:end="5977:35">!=</operator> <name pos:start="5977:37" pos:end="5977:49">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5979:25" pos:end="5979:51"><block_content pos:start="5979:25" pos:end="5979:51">

                        <expr_stmt pos:start="5979:25" pos:end="5979:51"><expr pos:start="5979:25" pos:end="5979:50"><call pos:start="5979:25" pos:end="5979:50"><name pos:start="5979:25" pos:end="5979:40">gen_op_set_cc_op</name><argument_list pos:start="5979:41" pos:end="5979:50">(<argument pos:start="5979:42" pos:end="5979:49"><expr pos:start="5979:42" pos:end="5979:49"><name pos:start="5979:42" pos:end="5979:49"><name pos:start="5979:42" pos:end="5979:42">s</name><operator pos:start="5979:43" pos:end="5979:44">-&gt;</operator><name pos:start="5979:45" pos:end="5979:49">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="5981:21" pos:end="5984:0"><expr pos:start="5981:21" pos:end="5981:53"><call pos:start="5981:21" pos:end="5981:53"><name pos:start="5981:21" pos:end="5981:30">gen_jmp_im</name><argument_list pos:start="5981:31" pos:end="5981:53">(<argument pos:start="5981:32" pos:end="5981:52"><expr pos:start="5981:32" pos:end="5981:52"><name pos:start="5981:32" pos:end="5981:39">pc_start</name> <operator pos:start="5981:41" pos:end="5981:41">-</operator> <name pos:start="5981:43" pos:end="5981:52"><name pos:start="5981:43" pos:end="5981:43">s</name><operator pos:start="5981:44" pos:end="5981:45">-&gt;</operator><name pos:start="5981:46" pos:end="5981:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="5983:1" pos:end="5983:20">#<cpp:directive pos:start="5983:2" pos:end="5983:6">ifdef</cpp:directive> <name pos:start="5983:8" pos:end="5983:20">TARGET_X86_64</name></cpp:ifdef>

                    <if_stmt pos:start="5985:21" pos:end="6001:21"><if pos:start="5985:21" pos:end="5989:21">if <condition pos:start="5985:24" pos:end="5985:38">(<expr pos:start="5985:25" pos:end="5985:37"><name pos:start="5985:25" pos:end="5985:32"><name pos:start="5985:25" pos:end="5985:25">s</name><operator pos:start="5985:26" pos:end="5985:27">-&gt;</operator><name pos:start="5985:28" pos:end="5985:32">aflag</name></name> <operator pos:start="5985:34" pos:end="5985:35">==</operator> <literal type="number" pos:start="5985:37" pos:end="5985:37">2</literal></expr>)</condition> <block pos:start="5985:40" pos:end="5989:21">{<block_content pos:start="5987:25" pos:end="5987:50">

                        <expr_stmt pos:start="5987:25" pos:end="5987:50"><expr pos:start="5987:25" pos:end="5987:49"><call pos:start="5987:25" pos:end="5987:49"><name pos:start="5987:25" pos:end="5987:42">gen_op_movq_A0_reg</name><argument_list pos:start="5987:43" pos:end="5987:49">(<argument pos:start="5987:44" pos:end="5987:48"><expr pos:start="5987:44" pos:end="5987:48"><name pos:start="5987:44" pos:end="5987:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="5989:23" pos:end="6001:21">else

<cpp:endif pos:start="5991:1" pos:end="5991:6">#<cpp:directive pos:start="5991:2" pos:end="5991:6">endif</cpp:directive></cpp:endif>

                    <block pos:start="5993:21" pos:end="6001:21">{<block_content pos:start="5995:25" pos:end="5999:50">

                        <expr_stmt pos:start="5995:25" pos:end="5995:50"><expr pos:start="5995:25" pos:end="5995:49"><call pos:start="5995:25" pos:end="5995:49"><name pos:start="5995:25" pos:end="5995:42">gen_op_movl_A0_reg</name><argument_list pos:start="5995:43" pos:end="5995:49">(<argument pos:start="5995:44" pos:end="5995:48"><expr pos:start="5995:44" pos:end="5995:48"><name pos:start="5995:44" pos:end="5995:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="5997:25" pos:end="5999:50"><if pos:start="5997:25" pos:end="5999:50">if <condition pos:start="5997:28" pos:end="5997:42">(<expr pos:start="5997:29" pos:end="5997:41"><name pos:start="5997:29" pos:end="5997:36"><name pos:start="5997:29" pos:end="5997:29">s</name><operator pos:start="5997:30" pos:end="5997:31">-&gt;</operator><name pos:start="5997:32" pos:end="5997:36">aflag</name></name> <operator pos:start="5997:38" pos:end="5997:39">==</operator> <literal type="number" pos:start="5997:41" pos:end="5997:41">0</literal></expr>)</condition><block type="pseudo" pos:start="5999:29" pos:end="5999:50"><block_content pos:start="5999:29" pos:end="5999:50">

                            <expr_stmt pos:start="5999:29" pos:end="5999:50"><expr pos:start="5999:29" pos:end="5999:49"><call pos:start="5999:29" pos:end="5999:49"><name pos:start="5999:29" pos:end="5999:47">gen_op_andl_A0_ffff</name><argument_list pos:start="5999:48" pos:end="5999:49">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="6003:21" pos:end="6003:41"><expr pos:start="6003:21" pos:end="6003:40"><call pos:start="6003:21" pos:end="6003:40"><name pos:start="6003:21" pos:end="6003:37">gen_add_A0_ds_seg</name><argument_list pos:start="6003:38" pos:end="6003:40">(<argument pos:start="6003:39" pos:end="6003:39"><expr pos:start="6003:39" pos:end="6003:39"><name pos:start="6003:39" pos:end="6003:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6005:21" pos:end="6005:56"><expr pos:start="6005:21" pos:end="6005:55"><call pos:start="6005:21" pos:end="6005:55"><name pos:start="6005:21" pos:end="6005:38">gen_helper_monitor</name><argument_list pos:start="6005:39" pos:end="6005:55">(<argument pos:start="6005:40" pos:end="6005:46"><expr pos:start="6005:40" pos:end="6005:46"><name pos:start="6005:40" pos:end="6005:46">cpu_env</name></expr></argument>, <argument pos:start="6005:49" pos:end="6005:54"><expr pos:start="6005:49" pos:end="6005:54"><name pos:start="6005:49" pos:end="6005:54">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="6007:21" pos:end="6007:26">break;</break>

                <case pos:start="6009:17" pos:end="6009:23">case <expr pos:start="6009:22" pos:end="6009:22"><literal type="number" pos:start="6009:22" pos:end="6009:22">1</literal></expr>:</case> <comment type="block" pos:start="6009:25" pos:end="6009:35">/* mwait */</comment>

                    <if_stmt pos:start="6011:21" pos:end="6015:40"><if pos:start="6011:21" pos:end="6015:40">if <condition pos:start="6011:24" pos:end="6013:36">(<expr pos:start="6011:25" pos:end="6013:35"><operator pos:start="6011:25" pos:end="6011:25">!</operator><operator pos:start="6011:26" pos:end="6011:26">(</operator><name pos:start="6011:27" pos:end="6011:47"><name pos:start="6011:27" pos:end="6011:27">s</name><operator pos:start="6011:28" pos:end="6011:29">-&gt;</operator><name pos:start="6011:30" pos:end="6011:47">cpuid_ext_features</name></name> <operator pos:start="6011:49" pos:end="6011:49">&amp;</operator> <name pos:start="6011:51" pos:end="6011:67">CPUID_EXT_MONITOR</name><operator pos:start="6011:68" pos:end="6011:68">)</operator> <operator pos:start="6011:70" pos:end="6011:71">||</operator>

                        <name pos:start="6013:25" pos:end="6013:30"><name pos:start="6013:25" pos:end="6013:25">s</name><operator pos:start="6013:26" pos:end="6013:27">-&gt;</operator><name pos:start="6013:28" pos:end="6013:30">cpl</name></name> <operator pos:start="6013:32" pos:end="6013:33">!=</operator> <literal type="number" pos:start="6013:35" pos:end="6013:35">0</literal></expr>)</condition><block type="pseudo" pos:start="6015:25" pos:end="6015:40"><block_content pos:start="6015:25" pos:end="6015:40">

                        <goto pos:start="6015:25" pos:end="6015:40">goto <name pos:start="6015:30" pos:end="6015:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="6017:21" pos:end="6017:40"><expr pos:start="6017:21" pos:end="6017:39"><call pos:start="6017:21" pos:end="6017:39"><name pos:start="6017:21" pos:end="6017:36">gen_update_cc_op</name><argument_list pos:start="6017:37" pos:end="6017:39">(<argument pos:start="6017:38" pos:end="6017:38"><expr pos:start="6017:38" pos:end="6017:38"><name pos:start="6017:38" pos:end="6017:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6019:21" pos:end="6019:54"><expr pos:start="6019:21" pos:end="6019:53"><call pos:start="6019:21" pos:end="6019:53"><name pos:start="6019:21" pos:end="6019:30">gen_jmp_im</name><argument_list pos:start="6019:31" pos:end="6019:53">(<argument pos:start="6019:32" pos:end="6019:52"><expr pos:start="6019:32" pos:end="6019:52"><name pos:start="6019:32" pos:end="6019:39">pc_start</name> <operator pos:start="6019:41" pos:end="6019:41">-</operator> <name pos:start="6019:43" pos:end="6019:52"><name pos:start="6019:43" pos:end="6019:43">s</name><operator pos:start="6019:44" pos:end="6019:45">-&gt;</operator><name pos:start="6019:46" pos:end="6019:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6021:21" pos:end="6021:79"><expr pos:start="6021:21" pos:end="6021:78"><call pos:start="6021:21" pos:end="6021:78"><name pos:start="6021:21" pos:end="6021:36">gen_helper_mwait</name><argument_list pos:start="6021:37" pos:end="6021:78">(<argument pos:start="6021:38" pos:end="6021:44"><expr pos:start="6021:38" pos:end="6021:44"><name pos:start="6021:38" pos:end="6021:44">cpu_env</name></expr></argument>, <argument pos:start="6021:47" pos:end="6021:77"><expr pos:start="6021:47" pos:end="6021:77"><call pos:start="6021:47" pos:end="6021:77"><name pos:start="6021:47" pos:end="6021:59">tcg_const_i32</name><argument_list pos:start="6021:60" pos:end="6021:77">(<argument pos:start="6021:61" pos:end="6021:76"><expr pos:start="6021:61" pos:end="6021:76"><name pos:start="6021:61" pos:end="6021:65"><name pos:start="6021:61" pos:end="6021:61">s</name><operator pos:start="6021:62" pos:end="6021:63">-&gt;</operator><name pos:start="6021:64" pos:end="6021:65">pc</name></name> <operator pos:start="6021:67" pos:end="6021:67">-</operator> <name pos:start="6021:69" pos:end="6021:76">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6023:21" pos:end="6023:31"><expr pos:start="6023:21" pos:end="6023:30"><call pos:start="6023:21" pos:end="6023:30"><name pos:start="6023:21" pos:end="6023:27">gen_eob</name><argument_list pos:start="6023:28" pos:end="6023:30">(<argument pos:start="6023:29" pos:end="6023:29"><expr pos:start="6023:29" pos:end="6023:29"><name pos:start="6023:29" pos:end="6023:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="6025:21" pos:end="6025:26">break;</break>

                <case pos:start="6027:17" pos:end="6027:23">case <expr pos:start="6027:22" pos:end="6027:22"><literal type="number" pos:start="6027:22" pos:end="6027:22">2</literal></expr>:</case> <comment type="block" pos:start="6027:25" pos:end="6027:34">/* clac */</comment>

                    <if_stmt pos:start="6029:21" pos:end="6035:21"><if pos:start="6029:21" pos:end="6035:21">if <condition pos:start="6029:24" pos:end="6031:36">(<expr pos:start="6029:25" pos:end="6031:35"><operator pos:start="6029:25" pos:end="6029:25">!</operator><operator pos:start="6029:26" pos:end="6029:26">(</operator><name pos:start="6029:27" pos:end="6029:51"><name pos:start="6029:27" pos:end="6029:27">s</name><operator pos:start="6029:28" pos:end="6029:29">-&gt;</operator><name pos:start="6029:30" pos:end="6029:51">cpuid_7_0_ebx_features</name></name> <operator pos:start="6029:53" pos:end="6029:53">&amp;</operator> <name pos:start="6029:55" pos:end="6029:72">CPUID_7_0_EBX_SMAP</name><operator pos:start="6029:73" pos:end="6029:73">)</operator> <operator pos:start="6029:75" pos:end="6029:76">||</operator>

                        <name pos:start="6031:25" pos:end="6031:30"><name pos:start="6031:25" pos:end="6031:25">s</name><operator pos:start="6031:26" pos:end="6031:27">-&gt;</operator><name pos:start="6031:28" pos:end="6031:30">cpl</name></name> <operator pos:start="6031:32" pos:end="6031:33">!=</operator> <literal type="number" pos:start="6031:35" pos:end="6031:35">0</literal></expr>)</condition> <block pos:start="6031:38" pos:end="6035:21">{<block_content pos:start="6033:25" pos:end="6033:40">

                        <goto pos:start="6033:25" pos:end="6033:40">goto <name pos:start="6033:30" pos:end="6033:39">illegal_op</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="6037:21" pos:end="6037:45"><expr pos:start="6037:21" pos:end="6037:44"><call pos:start="6037:21" pos:end="6037:44"><name pos:start="6037:21" pos:end="6037:35">gen_helper_clac</name><argument_list pos:start="6037:36" pos:end="6037:44">(<argument pos:start="6037:37" pos:end="6037:43"><expr pos:start="6037:37" pos:end="6037:43"><name pos:start="6037:37" pos:end="6037:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6039:21" pos:end="6039:51"><expr pos:start="6039:21" pos:end="6039:50"><call pos:start="6039:21" pos:end="6039:50"><name pos:start="6039:21" pos:end="6039:30">gen_jmp_im</name><argument_list pos:start="6039:31" pos:end="6039:50">(<argument pos:start="6039:32" pos:end="6039:49"><expr pos:start="6039:32" pos:end="6039:49"><name pos:start="6039:32" pos:end="6039:36"><name pos:start="6039:32" pos:end="6039:32">s</name><operator pos:start="6039:33" pos:end="6039:34">-&gt;</operator><name pos:start="6039:35" pos:end="6039:36">pc</name></name> <operator pos:start="6039:38" pos:end="6039:38">-</operator> <name pos:start="6039:40" pos:end="6039:49"><name pos:start="6039:40" pos:end="6039:40">s</name><operator pos:start="6039:41" pos:end="6039:42">-&gt;</operator><name pos:start="6039:43" pos:end="6039:49">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6041:21" pos:end="6041:31"><expr pos:start="6041:21" pos:end="6041:30"><call pos:start="6041:21" pos:end="6041:30"><name pos:start="6041:21" pos:end="6041:27">gen_eob</name><argument_list pos:start="6041:28" pos:end="6041:30">(<argument pos:start="6041:29" pos:end="6041:29"><expr pos:start="6041:29" pos:end="6041:29"><name pos:start="6041:29" pos:end="6041:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="6043:21" pos:end="6043:26">break;</break>

                <case pos:start="6045:17" pos:end="6045:23">case <expr pos:start="6045:22" pos:end="6045:22"><literal type="number" pos:start="6045:22" pos:end="6045:22">3</literal></expr>:</case> <comment type="block" pos:start="6045:25" pos:end="6045:34">/* stac */</comment>

                    <if_stmt pos:start="6047:21" pos:end="6053:21"><if pos:start="6047:21" pos:end="6053:21">if <condition pos:start="6047:24" pos:end="6049:36">(<expr pos:start="6047:25" pos:end="6049:35"><operator pos:start="6047:25" pos:end="6047:25">!</operator><operator pos:start="6047:26" pos:end="6047:26">(</operator><name pos:start="6047:27" pos:end="6047:51"><name pos:start="6047:27" pos:end="6047:27">s</name><operator pos:start="6047:28" pos:end="6047:29">-&gt;</operator><name pos:start="6047:30" pos:end="6047:51">cpuid_7_0_ebx_features</name></name> <operator pos:start="6047:53" pos:end="6047:53">&amp;</operator> <name pos:start="6047:55" pos:end="6047:72">CPUID_7_0_EBX_SMAP</name><operator pos:start="6047:73" pos:end="6047:73">)</operator> <operator pos:start="6047:75" pos:end="6047:76">||</operator>

                        <name pos:start="6049:25" pos:end="6049:30"><name pos:start="6049:25" pos:end="6049:25">s</name><operator pos:start="6049:26" pos:end="6049:27">-&gt;</operator><name pos:start="6049:28" pos:end="6049:30">cpl</name></name> <operator pos:start="6049:32" pos:end="6049:33">!=</operator> <literal type="number" pos:start="6049:35" pos:end="6049:35">0</literal></expr>)</condition> <block pos:start="6049:38" pos:end="6053:21">{<block_content pos:start="6051:25" pos:end="6051:40">

                        <goto pos:start="6051:25" pos:end="6051:40">goto <name pos:start="6051:30" pos:end="6051:39">illegal_op</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="6055:21" pos:end="6055:45"><expr pos:start="6055:21" pos:end="6055:44"><call pos:start="6055:21" pos:end="6055:44"><name pos:start="6055:21" pos:end="6055:35">gen_helper_stac</name><argument_list pos:start="6055:36" pos:end="6055:44">(<argument pos:start="6055:37" pos:end="6055:43"><expr pos:start="6055:37" pos:end="6055:43"><name pos:start="6055:37" pos:end="6055:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6057:21" pos:end="6057:51"><expr pos:start="6057:21" pos:end="6057:50"><call pos:start="6057:21" pos:end="6057:50"><name pos:start="6057:21" pos:end="6057:30">gen_jmp_im</name><argument_list pos:start="6057:31" pos:end="6057:50">(<argument pos:start="6057:32" pos:end="6057:49"><expr pos:start="6057:32" pos:end="6057:49"><name pos:start="6057:32" pos:end="6057:36"><name pos:start="6057:32" pos:end="6057:32">s</name><operator pos:start="6057:33" pos:end="6057:34">-&gt;</operator><name pos:start="6057:35" pos:end="6057:36">pc</name></name> <operator pos:start="6057:38" pos:end="6057:38">-</operator> <name pos:start="6057:40" pos:end="6057:49"><name pos:start="6057:40" pos:end="6057:40">s</name><operator pos:start="6057:41" pos:end="6057:42">-&gt;</operator><name pos:start="6057:43" pos:end="6057:49">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6059:21" pos:end="6059:31"><expr pos:start="6059:21" pos:end="6059:30"><call pos:start="6059:21" pos:end="6059:30"><name pos:start="6059:21" pos:end="6059:27">gen_eob</name><argument_list pos:start="6059:28" pos:end="6059:30">(<argument pos:start="6059:29" pos:end="6059:29"><expr pos:start="6059:29" pos:end="6059:29"><name pos:start="6059:29" pos:end="6059:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="6061:21" pos:end="6061:26">break;</break>

                <default pos:start="6063:17" pos:end="6063:24">default:</default>

                    <goto pos:start="6065:21" pos:end="6065:36">goto <name pos:start="6065:26" pos:end="6065:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></if> <else pos:start="6069:15" pos:end="6089:13">else <block pos:start="6069:20" pos:end="6089:13">{<block_content pos:start="6071:17" pos:end="6087:68"> <comment type="block" pos:start="6069:22" pos:end="6069:31">/* sidt */</comment>

                <expr_stmt pos:start="6071:17" pos:end="6071:73"><expr pos:start="6071:17" pos:end="6071:72"><call pos:start="6071:17" pos:end="6071:72"><name pos:start="6071:17" pos:end="6071:39">gen_svm_check_intercept</name><argument_list pos:start="6071:40" pos:end="6071:72">(<argument pos:start="6071:41" pos:end="6071:41"><expr pos:start="6071:41" pos:end="6071:41"><name pos:start="6071:41" pos:end="6071:41">s</name></expr></argument>, <argument pos:start="6071:44" pos:end="6071:51"><expr pos:start="6071:44" pos:end="6071:51"><name pos:start="6071:44" pos:end="6071:51">pc_start</name></expr></argument>, <argument pos:start="6071:54" pos:end="6071:71"><expr pos:start="6071:54" pos:end="6071:71"><name pos:start="6071:54" pos:end="6071:71">SVM_EXIT_IDTR_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6073:17" pos:end="6073:70"><expr pos:start="6073:17" pos:end="6073:69"><call pos:start="6073:17" pos:end="6073:69"><name pos:start="6073:17" pos:end="6073:29">gen_lea_modrm</name><argument_list pos:start="6073:30" pos:end="6073:69">(<argument pos:start="6073:31" pos:end="6073:33"><expr pos:start="6073:31" pos:end="6073:33"><name pos:start="6073:31" pos:end="6073:33">env</name></expr></argument>, <argument pos:start="6073:36" pos:end="6073:36"><expr pos:start="6073:36" pos:end="6073:36"><name pos:start="6073:36" pos:end="6073:36">s</name></expr></argument>, <argument pos:start="6073:39" pos:end="6073:43"><expr pos:start="6073:39" pos:end="6073:43"><name pos:start="6073:39" pos:end="6073:43">modrm</name></expr></argument>, <argument pos:start="6073:46" pos:end="6073:54"><expr pos:start="6073:46" pos:end="6073:54"><operator pos:start="6073:46" pos:end="6073:46">&amp;</operator><name pos:start="6073:47" pos:end="6073:54">reg_addr</name></expr></argument>, <argument pos:start="6073:57" pos:end="6073:68"><expr pos:start="6073:57" pos:end="6073:68"><operator pos:start="6073:57" pos:end="6073:57">&amp;</operator><name pos:start="6073:58" pos:end="6073:68">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6075:17" pos:end="6075:86"><expr pos:start="6075:17" pos:end="6075:85"><call pos:start="6075:17" pos:end="6075:85"><name pos:start="6075:17" pos:end="6075:32">tcg_gen_ld32u_tl</name><argument_list pos:start="6075:33" pos:end="6075:85">(<argument pos:start="6075:34" pos:end="6075:41"><expr pos:start="6075:34" pos:end="6075:41"><name pos:start="6075:34" pos:end="6075:41"><name pos:start="6075:34" pos:end="6075:38">cpu_T</name><index pos:start="6075:39" pos:end="6075:41">[<expr pos:start="6075:40" pos:end="6075:40"><literal type="number" pos:start="6075:40" pos:end="6075:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6075:44" pos:end="6075:50"><expr pos:start="6075:44" pos:end="6075:50"><name pos:start="6075:44" pos:end="6075:50">cpu_env</name></expr></argument>, <argument pos:start="6075:53" pos:end="6075:84"><expr pos:start="6075:53" pos:end="6075:84"><call pos:start="6075:53" pos:end="6075:84"><name pos:start="6075:53" pos:end="6075:60">offsetof</name><argument_list pos:start="6075:61" pos:end="6075:84">(<argument pos:start="6075:62" pos:end="6075:72"><expr pos:start="6075:62" pos:end="6075:72"><name pos:start="6075:62" pos:end="6075:72">CPUX86State</name></expr></argument>, <argument pos:start="6075:75" pos:end="6075:83"><expr pos:start="6075:75" pos:end="6075:83"><name pos:start="6075:75" pos:end="6075:83"><name pos:start="6075:75" pos:end="6075:77">idt</name><operator pos:start="6075:78" pos:end="6075:78">.</operator><name pos:start="6075:79" pos:end="6075:83">limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6077:17" pos:end="6077:56"><expr pos:start="6077:17" pos:end="6077:55"><call pos:start="6077:17" pos:end="6077:55"><name pos:start="6077:17" pos:end="6077:31">gen_op_st_T0_A0</name><argument_list pos:start="6077:32" pos:end="6077:55">(<argument pos:start="6077:33" pos:end="6077:54"><expr pos:start="6077:33" pos:end="6077:54"><name pos:start="6077:33" pos:end="6077:39">OT_WORD</name> <operator pos:start="6077:41" pos:end="6077:41">+</operator> <name pos:start="6077:43" pos:end="6077:54"><name pos:start="6077:43" pos:end="6077:43">s</name><operator pos:start="6077:44" pos:end="6077:45">-&gt;</operator><name pos:start="6077:46" pos:end="6077:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6079:17" pos:end="6079:36"><expr pos:start="6079:17" pos:end="6079:35"><call pos:start="6079:17" pos:end="6079:35"><name pos:start="6079:17" pos:end="6079:29">gen_add_A0_im</name><argument_list pos:start="6079:30" pos:end="6079:35">(<argument pos:start="6079:31" pos:end="6079:31"><expr pos:start="6079:31" pos:end="6079:31"><name pos:start="6079:31" pos:end="6079:31">s</name></expr></argument>, <argument pos:start="6079:34" pos:end="6079:34"><expr pos:start="6079:34" pos:end="6079:34"><literal type="number" pos:start="6079:34" pos:end="6079:34">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6081:17" pos:end="6081:82"><expr pos:start="6081:17" pos:end="6081:81"><call pos:start="6081:17" pos:end="6081:81"><name pos:start="6081:17" pos:end="6081:29">tcg_gen_ld_tl</name><argument_list pos:start="6081:30" pos:end="6081:81">(<argument pos:start="6081:31" pos:end="6081:38"><expr pos:start="6081:31" pos:end="6081:38"><name pos:start="6081:31" pos:end="6081:38"><name pos:start="6081:31" pos:end="6081:35">cpu_T</name><index pos:start="6081:36" pos:end="6081:38">[<expr pos:start="6081:37" pos:end="6081:37"><literal type="number" pos:start="6081:37" pos:end="6081:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6081:41" pos:end="6081:47"><expr pos:start="6081:41" pos:end="6081:47"><name pos:start="6081:41" pos:end="6081:47">cpu_env</name></expr></argument>, <argument pos:start="6081:50" pos:end="6081:80"><expr pos:start="6081:50" pos:end="6081:80"><call pos:start="6081:50" pos:end="6081:80"><name pos:start="6081:50" pos:end="6081:57">offsetof</name><argument_list pos:start="6081:58" pos:end="6081:80">(<argument pos:start="6081:59" pos:end="6081:69"><expr pos:start="6081:59" pos:end="6081:69"><name pos:start="6081:59" pos:end="6081:69">CPUX86State</name></expr></argument>, <argument pos:start="6081:72" pos:end="6081:79"><expr pos:start="6081:72" pos:end="6081:79"><name pos:start="6081:72" pos:end="6081:79"><name pos:start="6081:72" pos:end="6081:74">idt</name><operator pos:start="6081:75" pos:end="6081:75">.</operator><name pos:start="6081:76" pos:end="6081:79">base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="6083:17" pos:end="6085:48"><if pos:start="6083:17" pos:end="6085:48">if <condition pos:start="6083:20" pos:end="6083:30">(<expr pos:start="6083:21" pos:end="6083:29"><operator pos:start="6083:21" pos:end="6083:21">!</operator><name pos:start="6083:22" pos:end="6083:29"><name pos:start="6083:22" pos:end="6083:22">s</name><operator pos:start="6083:23" pos:end="6083:24">-&gt;</operator><name pos:start="6083:25" pos:end="6083:29">dflag</name></name></expr>)</condition><block type="pseudo" pos:start="6085:21" pos:end="6085:48"><block_content pos:start="6085:21" pos:end="6085:48">

                    <expr_stmt pos:start="6085:21" pos:end="6085:48"><expr pos:start="6085:21" pos:end="6085:47"><call pos:start="6085:21" pos:end="6085:47"><name pos:start="6085:21" pos:end="6085:37">gen_op_andl_T0_im</name><argument_list pos:start="6085:38" pos:end="6085:47">(<argument pos:start="6085:39" pos:end="6085:46"><expr pos:start="6085:39" pos:end="6085:46"><literal type="number" pos:start="6085:39" pos:end="6085:46">0xffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="6087:17" pos:end="6087:68"><expr pos:start="6087:17" pos:end="6087:67"><call pos:start="6087:17" pos:end="6087:67"><name pos:start="6087:17" pos:end="6087:31">gen_op_st_T0_A0</name><argument_list pos:start="6087:32" pos:end="6087:67">(<argument pos:start="6087:33" pos:end="6087:66"><expr pos:start="6087:33" pos:end="6087:66"><call pos:start="6087:33" pos:end="6087:41"><name pos:start="6087:33" pos:end="6087:38">CODE64</name><argument_list pos:start="6087:39" pos:end="6087:41">(<argument pos:start="6087:40" pos:end="6087:40"><expr pos:start="6087:40" pos:end="6087:40"><name pos:start="6087:40" pos:end="6087:40">s</name></expr></argument>)</argument_list></call> <operator pos:start="6087:43" pos:end="6087:43">+</operator> <name pos:start="6087:45" pos:end="6087:51">OT_LONG</name> <operator pos:start="6087:53" pos:end="6087:53">+</operator> <name pos:start="6087:55" pos:end="6087:66"><name pos:start="6087:55" pos:end="6087:55">s</name><operator pos:start="6087:56" pos:end="6087:57">-&gt;</operator><name pos:start="6087:58" pos:end="6087:66">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="6091:13" pos:end="6091:18">break;</break>

        <case pos:start="6093:9" pos:end="6093:15">case <expr pos:start="6093:14" pos:end="6093:14"><literal type="number" pos:start="6093:14" pos:end="6093:14">2</literal></expr>:</case> <comment type="block" pos:start="6093:17" pos:end="6093:26">/* lgdt */</comment>

        <case pos:start="6095:9" pos:end="6095:15">case <expr pos:start="6095:14" pos:end="6095:14"><literal type="number" pos:start="6095:14" pos:end="6095:14">3</literal></expr>:</case> <comment type="block" pos:start="6095:17" pos:end="6095:26">/* lidt */</comment>

            <if_stmt pos:start="6097:13" pos:end="6303:13"><if pos:start="6097:13" pos:end="6267:13">if <condition pos:start="6097:16" pos:end="6097:25">(<expr pos:start="6097:17" pos:end="6097:24"><name pos:start="6097:17" pos:end="6097:19">mod</name> <operator pos:start="6097:21" pos:end="6097:22">==</operator> <literal type="number" pos:start="6097:24" pos:end="6097:24">3</literal></expr>)</condition> <block pos:start="6097:27" pos:end="6267:13">{<block_content pos:start="6099:17" pos:end="6265:17">

                <if_stmt pos:start="6099:17" pos:end="6101:47"><if pos:start="6099:17" pos:end="6101:47">if <condition pos:start="6099:20" pos:end="6099:46">(<expr pos:start="6099:21" pos:end="6099:45"><name pos:start="6099:21" pos:end="6099:28"><name pos:start="6099:21" pos:end="6099:21">s</name><operator pos:start="6099:22" pos:end="6099:23">-&gt;</operator><name pos:start="6099:24" pos:end="6099:28">cc_op</name></name> <operator pos:start="6099:30" pos:end="6099:31">!=</operator> <name pos:start="6099:33" pos:end="6099:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="6101:21" pos:end="6101:47"><block_content pos:start="6101:21" pos:end="6101:47">

                    <expr_stmt pos:start="6101:21" pos:end="6101:47"><expr pos:start="6101:21" pos:end="6101:46"><call pos:start="6101:21" pos:end="6101:46"><name pos:start="6101:21" pos:end="6101:36">gen_op_set_cc_op</name><argument_list pos:start="6101:37" pos:end="6101:46">(<argument pos:start="6101:38" pos:end="6101:45"><expr pos:start="6101:38" pos:end="6101:45"><name pos:start="6101:38" pos:end="6101:45"><name pos:start="6101:38" pos:end="6101:38">s</name><operator pos:start="6101:39" pos:end="6101:40">-&gt;</operator><name pos:start="6101:41" pos:end="6101:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="6103:17" pos:end="6103:50"><expr pos:start="6103:17" pos:end="6103:49"><call pos:start="6103:17" pos:end="6103:49"><name pos:start="6103:17" pos:end="6103:26">gen_jmp_im</name><argument_list pos:start="6103:27" pos:end="6103:49">(<argument pos:start="6103:28" pos:end="6103:48"><expr pos:start="6103:28" pos:end="6103:48"><name pos:start="6103:28" pos:end="6103:35">pc_start</name> <operator pos:start="6103:37" pos:end="6103:37">-</operator> <name pos:start="6103:39" pos:end="6103:48"><name pos:start="6103:39" pos:end="6103:39">s</name><operator pos:start="6103:40" pos:end="6103:41">-&gt;</operator><name pos:start="6103:42" pos:end="6103:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="6105:17" pos:end="6265:17">switch<condition pos:start="6105:23" pos:end="6105:26">(<expr pos:start="6105:24" pos:end="6105:25"><name pos:start="6105:24" pos:end="6105:25">rm</name></expr>)</condition> <block pos:start="6105:28" pos:end="6265:17">{<block_content pos:start="6107:17" pos:end="6263:36">

                <case pos:start="6107:17" pos:end="6107:23">case <expr pos:start="6107:22" pos:end="6107:22"><literal type="number" pos:start="6107:22" pos:end="6107:22">0</literal></expr>:</case> <comment type="block" pos:start="6107:25" pos:end="6107:35">/* VMRUN */</comment>

                    <if_stmt pos:start="6109:21" pos:end="6111:40"><if pos:start="6109:21" pos:end="6111:40">if <condition pos:start="6109:24" pos:end="6109:61">(<expr pos:start="6109:25" pos:end="6109:60"><operator pos:start="6109:25" pos:end="6109:25">!</operator><operator pos:start="6109:26" pos:end="6109:26">(</operator><name pos:start="6109:27" pos:end="6109:34"><name pos:start="6109:27" pos:end="6109:27">s</name><operator pos:start="6109:28" pos:end="6109:29">-&gt;</operator><name pos:start="6109:30" pos:end="6109:34">flags</name></name> <operator pos:start="6109:36" pos:end="6109:36">&amp;</operator> <name pos:start="6109:38" pos:end="6109:49">HF_SVME_MASK</name><operator pos:start="6109:50" pos:end="6109:50">)</operator> <operator pos:start="6109:52" pos:end="6109:53">||</operator> <operator pos:start="6109:55" pos:end="6109:55">!</operator><name pos:start="6109:56" pos:end="6109:60"><name pos:start="6109:56" pos:end="6109:56">s</name><operator pos:start="6109:57" pos:end="6109:58">-&gt;</operator><name pos:start="6109:59" pos:end="6109:60">pe</name></name></expr>)</condition><block type="pseudo" pos:start="6111:25" pos:end="6111:40"><block_content pos:start="6111:25" pos:end="6111:40">

                        <goto pos:start="6111:25" pos:end="6111:40">goto <name pos:start="6111:30" pos:end="6111:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="6113:21" pos:end="6129:21"><if pos:start="6113:21" pos:end="6119:21">if <condition pos:start="6113:24" pos:end="6113:36">(<expr pos:start="6113:25" pos:end="6113:35"><name pos:start="6113:25" pos:end="6113:30"><name pos:start="6113:25" pos:end="6113:25">s</name><operator pos:start="6113:26" pos:end="6113:27">-&gt;</operator><name pos:start="6113:28" pos:end="6113:30">cpl</name></name> <operator pos:start="6113:32" pos:end="6113:33">!=</operator> <literal type="number" pos:start="6113:35" pos:end="6113:35">0</literal></expr>)</condition> <block pos:start="6113:38" pos:end="6119:21">{<block_content pos:start="6115:25" pos:end="6117:30">

                        <expr_stmt pos:start="6115:25" pos:end="6115:76"><expr pos:start="6115:25" pos:end="6115:75"><call pos:start="6115:25" pos:end="6115:75"><name pos:start="6115:25" pos:end="6115:37">gen_exception</name><argument_list pos:start="6115:38" pos:end="6115:75">(<argument pos:start="6115:39" pos:end="6115:39"><expr pos:start="6115:39" pos:end="6115:39"><name pos:start="6115:39" pos:end="6115:39">s</name></expr></argument>, <argument pos:start="6115:42" pos:end="6115:51"><expr pos:start="6115:42" pos:end="6115:51"><name pos:start="6115:42" pos:end="6115:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6115:54" pos:end="6115:74"><expr pos:start="6115:54" pos:end="6115:74"><name pos:start="6115:54" pos:end="6115:61">pc_start</name> <operator pos:start="6115:63" pos:end="6115:63">-</operator> <name pos:start="6115:65" pos:end="6115:74"><name pos:start="6115:65" pos:end="6115:65">s</name><operator pos:start="6115:66" pos:end="6115:67">-&gt;</operator><name pos:start="6115:68" pos:end="6115:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="6117:25" pos:end="6117:30">break;</break>

                    </block_content>}</block></if> <else pos:start="6119:23" pos:end="6129:21">else <block pos:start="6119:28" pos:end="6129:21">{<block_content pos:start="6121:25" pos:end="6127:50">

                        <expr_stmt pos:start="6121:25" pos:end="6123:74"><expr pos:start="6121:25" pos:end="6123:73"><call pos:start="6121:25" pos:end="6123:73"><name pos:start="6121:25" pos:end="6121:40">gen_helper_vmrun</name><argument_list pos:start="6121:41" pos:end="6123:73">(<argument pos:start="6121:42" pos:end="6121:48"><expr pos:start="6121:42" pos:end="6121:48"><name pos:start="6121:42" pos:end="6121:48">cpu_env</name></expr></argument>, <argument pos:start="6121:51" pos:end="6121:73"><expr pos:start="6121:51" pos:end="6121:73"><call pos:start="6121:51" pos:end="6121:73"><name pos:start="6121:51" pos:end="6121:63">tcg_const_i32</name><argument_list pos:start="6121:64" pos:end="6121:73">(<argument pos:start="6121:65" pos:end="6121:72"><expr pos:start="6121:65" pos:end="6121:72"><name pos:start="6121:65" pos:end="6121:72"><name pos:start="6121:65" pos:end="6121:65">s</name><operator pos:start="6121:66" pos:end="6121:67">-&gt;</operator><name pos:start="6121:68" pos:end="6121:72">aflag</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                         <argument pos:start="6123:42" pos:end="6123:72"><expr pos:start="6123:42" pos:end="6123:72"><call pos:start="6123:42" pos:end="6123:72"><name pos:start="6123:42" pos:end="6123:54">tcg_const_i32</name><argument_list pos:start="6123:55" pos:end="6123:72">(<argument pos:start="6123:56" pos:end="6123:71"><expr pos:start="6123:56" pos:end="6123:71"><name pos:start="6123:56" pos:end="6123:60"><name pos:start="6123:56" pos:end="6123:56">s</name><operator pos:start="6123:57" pos:end="6123:58">-&gt;</operator><name pos:start="6123:59" pos:end="6123:60">pc</name></name> <operator pos:start="6123:62" pos:end="6123:62">-</operator> <name pos:start="6123:64" pos:end="6123:71">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="6125:25" pos:end="6125:43"><expr pos:start="6125:25" pos:end="6125:42"><call pos:start="6125:25" pos:end="6125:42"><name pos:start="6125:25" pos:end="6125:39">tcg_gen_exit_tb</name><argument_list pos:start="6125:40" pos:end="6125:42">(<argument pos:start="6125:41" pos:end="6125:41"><expr pos:start="6125:41" pos:end="6125:41"><literal type="number" pos:start="6125:41" pos:end="6125:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="6127:25" pos:end="6127:50"><expr pos:start="6127:25" pos:end="6127:49"><name pos:start="6127:25" pos:end="6127:33"><name pos:start="6127:25" pos:end="6127:25">s</name><operator pos:start="6127:26" pos:end="6127:27">-&gt;</operator><name pos:start="6127:28" pos:end="6127:33">is_jmp</name></name> <operator pos:start="6127:35" pos:end="6127:35">=</operator> <name pos:start="6127:37" pos:end="6127:49">DISAS_TB_JUMP</name></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="6131:21" pos:end="6131:26">break;</break>

                <case pos:start="6133:17" pos:end="6133:23">case <expr pos:start="6133:22" pos:end="6133:22"><literal type="number" pos:start="6133:22" pos:end="6133:22">1</literal></expr>:</case> <comment type="block" pos:start="6133:25" pos:end="6133:37">/* VMMCALL */</comment>

                    <if_stmt pos:start="6135:21" pos:end="6137:40"><if pos:start="6135:21" pos:end="6137:40">if <condition pos:start="6135:24" pos:end="6135:51">(<expr pos:start="6135:25" pos:end="6135:50"><operator pos:start="6135:25" pos:end="6135:25">!</operator><operator pos:start="6135:26" pos:end="6135:26">(</operator><name pos:start="6135:27" pos:end="6135:34"><name pos:start="6135:27" pos:end="6135:27">s</name><operator pos:start="6135:28" pos:end="6135:29">-&gt;</operator><name pos:start="6135:30" pos:end="6135:34">flags</name></name> <operator pos:start="6135:36" pos:end="6135:36">&amp;</operator> <name pos:start="6135:38" pos:end="6135:49">HF_SVME_MASK</name><operator pos:start="6135:50" pos:end="6135:50">)</operator></expr>)</condition><block type="pseudo" pos:start="6137:25" pos:end="6137:40"><block_content pos:start="6137:25" pos:end="6137:40">

                        <goto pos:start="6137:25" pos:end="6137:40">goto <name pos:start="6137:30" pos:end="6137:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="6139:21" pos:end="6139:48"><expr pos:start="6139:21" pos:end="6139:47"><call pos:start="6139:21" pos:end="6139:47"><name pos:start="6139:21" pos:end="6139:38">gen_helper_vmmcall</name><argument_list pos:start="6139:39" pos:end="6139:47">(<argument pos:start="6139:40" pos:end="6139:46"><expr pos:start="6139:40" pos:end="6139:46"><name pos:start="6139:40" pos:end="6139:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="6141:21" pos:end="6141:26">break;</break>

                <case pos:start="6143:17" pos:end="6143:23">case <expr pos:start="6143:22" pos:end="6143:22"><literal type="number" pos:start="6143:22" pos:end="6143:22">2</literal></expr>:</case> <comment type="block" pos:start="6143:25" pos:end="6143:36">/* VMLOAD */</comment>

                    <if_stmt pos:start="6145:21" pos:end="6147:40"><if pos:start="6145:21" pos:end="6147:40">if <condition pos:start="6145:24" pos:end="6145:61">(<expr pos:start="6145:25" pos:end="6145:60"><operator pos:start="6145:25" pos:end="6145:25">!</operator><operator pos:start="6145:26" pos:end="6145:26">(</operator><name pos:start="6145:27" pos:end="6145:34"><name pos:start="6145:27" pos:end="6145:27">s</name><operator pos:start="6145:28" pos:end="6145:29">-&gt;</operator><name pos:start="6145:30" pos:end="6145:34">flags</name></name> <operator pos:start="6145:36" pos:end="6145:36">&amp;</operator> <name pos:start="6145:38" pos:end="6145:49">HF_SVME_MASK</name><operator pos:start="6145:50" pos:end="6145:50">)</operator> <operator pos:start="6145:52" pos:end="6145:53">||</operator> <operator pos:start="6145:55" pos:end="6145:55">!</operator><name pos:start="6145:56" pos:end="6145:60"><name pos:start="6145:56" pos:end="6145:56">s</name><operator pos:start="6145:57" pos:end="6145:58">-&gt;</operator><name pos:start="6145:59" pos:end="6145:60">pe</name></name></expr>)</condition><block type="pseudo" pos:start="6147:25" pos:end="6147:40"><block_content pos:start="6147:25" pos:end="6147:40">

                        <goto pos:start="6147:25" pos:end="6147:40">goto <name pos:start="6147:30" pos:end="6147:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="6149:21" pos:end="6159:21"><if pos:start="6149:21" pos:end="6155:21">if <condition pos:start="6149:24" pos:end="6149:36">(<expr pos:start="6149:25" pos:end="6149:35"><name pos:start="6149:25" pos:end="6149:30"><name pos:start="6149:25" pos:end="6149:25">s</name><operator pos:start="6149:26" pos:end="6149:27">-&gt;</operator><name pos:start="6149:28" pos:end="6149:30">cpl</name></name> <operator pos:start="6149:32" pos:end="6149:33">!=</operator> <literal type="number" pos:start="6149:35" pos:end="6149:35">0</literal></expr>)</condition> <block pos:start="6149:38" pos:end="6155:21">{<block_content pos:start="6151:25" pos:end="6153:30">

                        <expr_stmt pos:start="6151:25" pos:end="6151:76"><expr pos:start="6151:25" pos:end="6151:75"><call pos:start="6151:25" pos:end="6151:75"><name pos:start="6151:25" pos:end="6151:37">gen_exception</name><argument_list pos:start="6151:38" pos:end="6151:75">(<argument pos:start="6151:39" pos:end="6151:39"><expr pos:start="6151:39" pos:end="6151:39"><name pos:start="6151:39" pos:end="6151:39">s</name></expr></argument>, <argument pos:start="6151:42" pos:end="6151:51"><expr pos:start="6151:42" pos:end="6151:51"><name pos:start="6151:42" pos:end="6151:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6151:54" pos:end="6151:74"><expr pos:start="6151:54" pos:end="6151:74"><name pos:start="6151:54" pos:end="6151:61">pc_start</name> <operator pos:start="6151:63" pos:end="6151:63">-</operator> <name pos:start="6151:65" pos:end="6151:74"><name pos:start="6151:65" pos:end="6151:65">s</name><operator pos:start="6151:66" pos:end="6151:67">-&gt;</operator><name pos:start="6151:68" pos:end="6151:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="6153:25" pos:end="6153:30">break;</break>

                    </block_content>}</block></if> <else pos:start="6155:23" pos:end="6159:21">else <block pos:start="6155:28" pos:end="6159:21">{<block_content pos:start="6157:25" pos:end="6157:76">

                        <expr_stmt pos:start="6157:25" pos:end="6157:76"><expr pos:start="6157:25" pos:end="6157:75"><call pos:start="6157:25" pos:end="6157:75"><name pos:start="6157:25" pos:end="6157:41">gen_helper_vmload</name><argument_list pos:start="6157:42" pos:end="6157:75">(<argument pos:start="6157:43" pos:end="6157:49"><expr pos:start="6157:43" pos:end="6157:49"><name pos:start="6157:43" pos:end="6157:49">cpu_env</name></expr></argument>, <argument pos:start="6157:52" pos:end="6157:74"><expr pos:start="6157:52" pos:end="6157:74"><call pos:start="6157:52" pos:end="6157:74"><name pos:start="6157:52" pos:end="6157:64">tcg_const_i32</name><argument_list pos:start="6157:65" pos:end="6157:74">(<argument pos:start="6157:66" pos:end="6157:73"><expr pos:start="6157:66" pos:end="6157:73"><name pos:start="6157:66" pos:end="6157:73"><name pos:start="6157:66" pos:end="6157:66">s</name><operator pos:start="6157:67" pos:end="6157:68">-&gt;</operator><name pos:start="6157:69" pos:end="6157:73">aflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="6161:21" pos:end="6161:26">break;</break>

                <case pos:start="6163:17" pos:end="6163:23">case <expr pos:start="6163:22" pos:end="6163:22"><literal type="number" pos:start="6163:22" pos:end="6163:22">3</literal></expr>:</case> <comment type="block" pos:start="6163:25" pos:end="6163:36">/* VMSAVE */</comment>

                    <if_stmt pos:start="6165:21" pos:end="6167:40"><if pos:start="6165:21" pos:end="6167:40">if <condition pos:start="6165:24" pos:end="6165:61">(<expr pos:start="6165:25" pos:end="6165:60"><operator pos:start="6165:25" pos:end="6165:25">!</operator><operator pos:start="6165:26" pos:end="6165:26">(</operator><name pos:start="6165:27" pos:end="6165:34"><name pos:start="6165:27" pos:end="6165:27">s</name><operator pos:start="6165:28" pos:end="6165:29">-&gt;</operator><name pos:start="6165:30" pos:end="6165:34">flags</name></name> <operator pos:start="6165:36" pos:end="6165:36">&amp;</operator> <name pos:start="6165:38" pos:end="6165:49">HF_SVME_MASK</name><operator pos:start="6165:50" pos:end="6165:50">)</operator> <operator pos:start="6165:52" pos:end="6165:53">||</operator> <operator pos:start="6165:55" pos:end="6165:55">!</operator><name pos:start="6165:56" pos:end="6165:60"><name pos:start="6165:56" pos:end="6165:56">s</name><operator pos:start="6165:57" pos:end="6165:58">-&gt;</operator><name pos:start="6165:59" pos:end="6165:60">pe</name></name></expr>)</condition><block type="pseudo" pos:start="6167:25" pos:end="6167:40"><block_content pos:start="6167:25" pos:end="6167:40">

                        <goto pos:start="6167:25" pos:end="6167:40">goto <name pos:start="6167:30" pos:end="6167:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="6169:21" pos:end="6179:21"><if pos:start="6169:21" pos:end="6175:21">if <condition pos:start="6169:24" pos:end="6169:36">(<expr pos:start="6169:25" pos:end="6169:35"><name pos:start="6169:25" pos:end="6169:30"><name pos:start="6169:25" pos:end="6169:25">s</name><operator pos:start="6169:26" pos:end="6169:27">-&gt;</operator><name pos:start="6169:28" pos:end="6169:30">cpl</name></name> <operator pos:start="6169:32" pos:end="6169:33">!=</operator> <literal type="number" pos:start="6169:35" pos:end="6169:35">0</literal></expr>)</condition> <block pos:start="6169:38" pos:end="6175:21">{<block_content pos:start="6171:25" pos:end="6173:30">

                        <expr_stmt pos:start="6171:25" pos:end="6171:76"><expr pos:start="6171:25" pos:end="6171:75"><call pos:start="6171:25" pos:end="6171:75"><name pos:start="6171:25" pos:end="6171:37">gen_exception</name><argument_list pos:start="6171:38" pos:end="6171:75">(<argument pos:start="6171:39" pos:end="6171:39"><expr pos:start="6171:39" pos:end="6171:39"><name pos:start="6171:39" pos:end="6171:39">s</name></expr></argument>, <argument pos:start="6171:42" pos:end="6171:51"><expr pos:start="6171:42" pos:end="6171:51"><name pos:start="6171:42" pos:end="6171:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6171:54" pos:end="6171:74"><expr pos:start="6171:54" pos:end="6171:74"><name pos:start="6171:54" pos:end="6171:61">pc_start</name> <operator pos:start="6171:63" pos:end="6171:63">-</operator> <name pos:start="6171:65" pos:end="6171:74"><name pos:start="6171:65" pos:end="6171:65">s</name><operator pos:start="6171:66" pos:end="6171:67">-&gt;</operator><name pos:start="6171:68" pos:end="6171:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="6173:25" pos:end="6173:30">break;</break>

                    </block_content>}</block></if> <else pos:start="6175:23" pos:end="6179:21">else <block pos:start="6175:28" pos:end="6179:21">{<block_content pos:start="6177:25" pos:end="6177:76">

                        <expr_stmt pos:start="6177:25" pos:end="6177:76"><expr pos:start="6177:25" pos:end="6177:75"><call pos:start="6177:25" pos:end="6177:75"><name pos:start="6177:25" pos:end="6177:41">gen_helper_vmsave</name><argument_list pos:start="6177:42" pos:end="6177:75">(<argument pos:start="6177:43" pos:end="6177:49"><expr pos:start="6177:43" pos:end="6177:49"><name pos:start="6177:43" pos:end="6177:49">cpu_env</name></expr></argument>, <argument pos:start="6177:52" pos:end="6177:74"><expr pos:start="6177:52" pos:end="6177:74"><call pos:start="6177:52" pos:end="6177:74"><name pos:start="6177:52" pos:end="6177:64">tcg_const_i32</name><argument_list pos:start="6177:65" pos:end="6177:74">(<argument pos:start="6177:66" pos:end="6177:73"><expr pos:start="6177:66" pos:end="6177:73"><name pos:start="6177:66" pos:end="6177:73"><name pos:start="6177:66" pos:end="6177:66">s</name><operator pos:start="6177:67" pos:end="6177:68">-&gt;</operator><name pos:start="6177:69" pos:end="6177:73">aflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="6181:21" pos:end="6181:26">break;</break>

                <case pos:start="6183:17" pos:end="6183:23">case <expr pos:start="6183:22" pos:end="6183:22"><literal type="number" pos:start="6183:22" pos:end="6183:22">4</literal></expr>:</case> <comment type="block" pos:start="6183:25" pos:end="6183:34">/* STGI */</comment>

                    <if_stmt pos:start="6185:21" pos:end="6191:40"><if pos:start="6185:21" pos:end="6191:40">if <condition pos:start="6185:24" pos:end="6189:31">(<expr pos:start="6185:25" pos:end="6189:30"><operator pos:start="6185:25" pos:end="6185:25">(</operator><operator pos:start="6185:26" pos:end="6185:26">!</operator><operator pos:start="6185:27" pos:end="6185:27">(</operator><name pos:start="6185:28" pos:end="6185:35"><name pos:start="6185:28" pos:end="6185:28">s</name><operator pos:start="6185:29" pos:end="6185:30">-&gt;</operator><name pos:start="6185:31" pos:end="6185:35">flags</name></name> <operator pos:start="6185:37" pos:end="6185:37">&amp;</operator> <name pos:start="6185:39" pos:end="6185:50">HF_SVME_MASK</name><operator pos:start="6185:51" pos:end="6185:51">)</operator> <operator pos:start="6185:53" pos:end="6185:54">&amp;&amp;</operator>

                         <operator pos:start="6187:26" pos:end="6187:26">!</operator><operator pos:start="6187:27" pos:end="6187:27">(</operator><name pos:start="6187:28" pos:end="6187:49"><name pos:start="6187:28" pos:end="6187:28">s</name><operator pos:start="6187:29" pos:end="6187:30">-&gt;</operator><name pos:start="6187:31" pos:end="6187:49">cpuid_ext3_features</name></name> <operator pos:start="6187:51" pos:end="6187:51">&amp;</operator> <name pos:start="6187:53" pos:end="6187:69">CPUID_EXT3_SKINIT</name><operator pos:start="6187:70" pos:end="6187:70">)</operator><operator pos:start="6187:71" pos:end="6187:71">)</operator> <operator pos:start="6187:73" pos:end="6187:74">||</operator> 

                        <operator pos:start="6189:25" pos:end="6189:25">!</operator><name pos:start="6189:26" pos:end="6189:30"><name pos:start="6189:26" pos:end="6189:26">s</name><operator pos:start="6189:27" pos:end="6189:28">-&gt;</operator><name pos:start="6189:29" pos:end="6189:30">pe</name></name></expr>)</condition><block type="pseudo" pos:start="6191:25" pos:end="6191:40"><block_content pos:start="6191:25" pos:end="6191:40">

                        <goto pos:start="6191:25" pos:end="6191:40">goto <name pos:start="6191:30" pos:end="6191:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="6193:21" pos:end="6203:21"><if pos:start="6193:21" pos:end="6199:21">if <condition pos:start="6193:24" pos:end="6193:36">(<expr pos:start="6193:25" pos:end="6193:35"><name pos:start="6193:25" pos:end="6193:30"><name pos:start="6193:25" pos:end="6193:25">s</name><operator pos:start="6193:26" pos:end="6193:27">-&gt;</operator><name pos:start="6193:28" pos:end="6193:30">cpl</name></name> <operator pos:start="6193:32" pos:end="6193:33">!=</operator> <literal type="number" pos:start="6193:35" pos:end="6193:35">0</literal></expr>)</condition> <block pos:start="6193:38" pos:end="6199:21">{<block_content pos:start="6195:25" pos:end="6197:30">

                        <expr_stmt pos:start="6195:25" pos:end="6195:76"><expr pos:start="6195:25" pos:end="6195:75"><call pos:start="6195:25" pos:end="6195:75"><name pos:start="6195:25" pos:end="6195:37">gen_exception</name><argument_list pos:start="6195:38" pos:end="6195:75">(<argument pos:start="6195:39" pos:end="6195:39"><expr pos:start="6195:39" pos:end="6195:39"><name pos:start="6195:39" pos:end="6195:39">s</name></expr></argument>, <argument pos:start="6195:42" pos:end="6195:51"><expr pos:start="6195:42" pos:end="6195:51"><name pos:start="6195:42" pos:end="6195:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6195:54" pos:end="6195:74"><expr pos:start="6195:54" pos:end="6195:74"><name pos:start="6195:54" pos:end="6195:61">pc_start</name> <operator pos:start="6195:63" pos:end="6195:63">-</operator> <name pos:start="6195:65" pos:end="6195:74"><name pos:start="6195:65" pos:end="6195:65">s</name><operator pos:start="6195:66" pos:end="6195:67">-&gt;</operator><name pos:start="6195:68" pos:end="6195:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="6197:25" pos:end="6197:30">break;</break>

                    </block_content>}</block></if> <else pos:start="6199:23" pos:end="6203:21">else <block pos:start="6199:28" pos:end="6203:21">{<block_content pos:start="6201:25" pos:end="6201:49">

                        <expr_stmt pos:start="6201:25" pos:end="6201:49"><expr pos:start="6201:25" pos:end="6201:48"><call pos:start="6201:25" pos:end="6201:48"><name pos:start="6201:25" pos:end="6201:39">gen_helper_stgi</name><argument_list pos:start="6201:40" pos:end="6201:48">(<argument pos:start="6201:41" pos:end="6201:47"><expr pos:start="6201:41" pos:end="6201:47"><name pos:start="6201:41" pos:end="6201:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="6205:21" pos:end="6205:26">break;</break>

                <case pos:start="6207:17" pos:end="6207:23">case <expr pos:start="6207:22" pos:end="6207:22"><literal type="number" pos:start="6207:22" pos:end="6207:22">5</literal></expr>:</case> <comment type="block" pos:start="6207:25" pos:end="6207:34">/* CLGI */</comment>

                    <if_stmt pos:start="6209:21" pos:end="6211:40"><if pos:start="6209:21" pos:end="6211:40">if <condition pos:start="6209:24" pos:end="6209:61">(<expr pos:start="6209:25" pos:end="6209:60"><operator pos:start="6209:25" pos:end="6209:25">!</operator><operator pos:start="6209:26" pos:end="6209:26">(</operator><name pos:start="6209:27" pos:end="6209:34"><name pos:start="6209:27" pos:end="6209:27">s</name><operator pos:start="6209:28" pos:end="6209:29">-&gt;</operator><name pos:start="6209:30" pos:end="6209:34">flags</name></name> <operator pos:start="6209:36" pos:end="6209:36">&amp;</operator> <name pos:start="6209:38" pos:end="6209:49">HF_SVME_MASK</name><operator pos:start="6209:50" pos:end="6209:50">)</operator> <operator pos:start="6209:52" pos:end="6209:53">||</operator> <operator pos:start="6209:55" pos:end="6209:55">!</operator><name pos:start="6209:56" pos:end="6209:60"><name pos:start="6209:56" pos:end="6209:56">s</name><operator pos:start="6209:57" pos:end="6209:58">-&gt;</operator><name pos:start="6209:59" pos:end="6209:60">pe</name></name></expr>)</condition><block type="pseudo" pos:start="6211:25" pos:end="6211:40"><block_content pos:start="6211:25" pos:end="6211:40">

                        <goto pos:start="6211:25" pos:end="6211:40">goto <name pos:start="6211:30" pos:end="6211:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="6213:21" pos:end="6223:21"><if pos:start="6213:21" pos:end="6219:21">if <condition pos:start="6213:24" pos:end="6213:36">(<expr pos:start="6213:25" pos:end="6213:35"><name pos:start="6213:25" pos:end="6213:30"><name pos:start="6213:25" pos:end="6213:25">s</name><operator pos:start="6213:26" pos:end="6213:27">-&gt;</operator><name pos:start="6213:28" pos:end="6213:30">cpl</name></name> <operator pos:start="6213:32" pos:end="6213:33">!=</operator> <literal type="number" pos:start="6213:35" pos:end="6213:35">0</literal></expr>)</condition> <block pos:start="6213:38" pos:end="6219:21">{<block_content pos:start="6215:25" pos:end="6217:30">

                        <expr_stmt pos:start="6215:25" pos:end="6215:76"><expr pos:start="6215:25" pos:end="6215:75"><call pos:start="6215:25" pos:end="6215:75"><name pos:start="6215:25" pos:end="6215:37">gen_exception</name><argument_list pos:start="6215:38" pos:end="6215:75">(<argument pos:start="6215:39" pos:end="6215:39"><expr pos:start="6215:39" pos:end="6215:39"><name pos:start="6215:39" pos:end="6215:39">s</name></expr></argument>, <argument pos:start="6215:42" pos:end="6215:51"><expr pos:start="6215:42" pos:end="6215:51"><name pos:start="6215:42" pos:end="6215:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6215:54" pos:end="6215:74"><expr pos:start="6215:54" pos:end="6215:74"><name pos:start="6215:54" pos:end="6215:61">pc_start</name> <operator pos:start="6215:63" pos:end="6215:63">-</operator> <name pos:start="6215:65" pos:end="6215:74"><name pos:start="6215:65" pos:end="6215:65">s</name><operator pos:start="6215:66" pos:end="6215:67">-&gt;</operator><name pos:start="6215:68" pos:end="6215:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="6217:25" pos:end="6217:30">break;</break>

                    </block_content>}</block></if> <else pos:start="6219:23" pos:end="6223:21">else <block pos:start="6219:28" pos:end="6223:21">{<block_content pos:start="6221:25" pos:end="6221:49">

                        <expr_stmt pos:start="6221:25" pos:end="6221:49"><expr pos:start="6221:25" pos:end="6221:48"><call pos:start="6221:25" pos:end="6221:48"><name pos:start="6221:25" pos:end="6221:39">gen_helper_clgi</name><argument_list pos:start="6221:40" pos:end="6221:48">(<argument pos:start="6221:41" pos:end="6221:47"><expr pos:start="6221:41" pos:end="6221:47"><name pos:start="6221:41" pos:end="6221:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="6225:21" pos:end="6225:26">break;</break>

                <case pos:start="6227:17" pos:end="6227:23">case <expr pos:start="6227:22" pos:end="6227:22"><literal type="number" pos:start="6227:22" pos:end="6227:22">6</literal></expr>:</case> <comment type="block" pos:start="6227:25" pos:end="6227:36">/* SKINIT */</comment>

                    <if_stmt pos:start="6229:21" pos:end="6235:40"><if pos:start="6229:21" pos:end="6235:40">if <condition pos:start="6229:24" pos:end="6233:31">(<expr pos:start="6229:25" pos:end="6233:30"><operator pos:start="6229:25" pos:end="6229:25">(</operator><operator pos:start="6229:26" pos:end="6229:26">!</operator><operator pos:start="6229:27" pos:end="6229:27">(</operator><name pos:start="6229:28" pos:end="6229:35"><name pos:start="6229:28" pos:end="6229:28">s</name><operator pos:start="6229:29" pos:end="6229:30">-&gt;</operator><name pos:start="6229:31" pos:end="6229:35">flags</name></name> <operator pos:start="6229:37" pos:end="6229:37">&amp;</operator> <name pos:start="6229:39" pos:end="6229:50">HF_SVME_MASK</name><operator pos:start="6229:51" pos:end="6229:51">)</operator> <operator pos:start="6229:53" pos:end="6229:54">&amp;&amp;</operator> 

                         <operator pos:start="6231:26" pos:end="6231:26">!</operator><operator pos:start="6231:27" pos:end="6231:27">(</operator><name pos:start="6231:28" pos:end="6231:49"><name pos:start="6231:28" pos:end="6231:28">s</name><operator pos:start="6231:29" pos:end="6231:30">-&gt;</operator><name pos:start="6231:31" pos:end="6231:49">cpuid_ext3_features</name></name> <operator pos:start="6231:51" pos:end="6231:51">&amp;</operator> <name pos:start="6231:53" pos:end="6231:69">CPUID_EXT3_SKINIT</name><operator pos:start="6231:70" pos:end="6231:70">)</operator><operator pos:start="6231:71" pos:end="6231:71">)</operator> <operator pos:start="6231:73" pos:end="6231:74">||</operator> 

                        <operator pos:start="6233:25" pos:end="6233:25">!</operator><name pos:start="6233:26" pos:end="6233:30"><name pos:start="6233:26" pos:end="6233:26">s</name><operator pos:start="6233:27" pos:end="6233:28">-&gt;</operator><name pos:start="6233:29" pos:end="6233:30">pe</name></name></expr>)</condition><block type="pseudo" pos:start="6235:25" pos:end="6235:40"><block_content pos:start="6235:25" pos:end="6235:40">

                        <goto pos:start="6235:25" pos:end="6235:40">goto <name pos:start="6235:30" pos:end="6235:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="6237:21" pos:end="6237:47"><expr pos:start="6237:21" pos:end="6237:46"><call pos:start="6237:21" pos:end="6237:46"><name pos:start="6237:21" pos:end="6237:37">gen_helper_skinit</name><argument_list pos:start="6237:38" pos:end="6237:46">(<argument pos:start="6237:39" pos:end="6237:45"><expr pos:start="6237:39" pos:end="6237:45"><name pos:start="6237:39" pos:end="6237:45">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="6239:21" pos:end="6239:26">break;</break>

                <case pos:start="6241:17" pos:end="6241:23">case <expr pos:start="6241:22" pos:end="6241:22"><literal type="number" pos:start="6241:22" pos:end="6241:22">7</literal></expr>:</case> <comment type="block" pos:start="6241:25" pos:end="6241:37">/* INVLPGA */</comment>

                    <if_stmt pos:start="6243:21" pos:end="6245:40"><if pos:start="6243:21" pos:end="6245:40">if <condition pos:start="6243:24" pos:end="6243:61">(<expr pos:start="6243:25" pos:end="6243:60"><operator pos:start="6243:25" pos:end="6243:25">!</operator><operator pos:start="6243:26" pos:end="6243:26">(</operator><name pos:start="6243:27" pos:end="6243:34"><name pos:start="6243:27" pos:end="6243:27">s</name><operator pos:start="6243:28" pos:end="6243:29">-&gt;</operator><name pos:start="6243:30" pos:end="6243:34">flags</name></name> <operator pos:start="6243:36" pos:end="6243:36">&amp;</operator> <name pos:start="6243:38" pos:end="6243:49">HF_SVME_MASK</name><operator pos:start="6243:50" pos:end="6243:50">)</operator> <operator pos:start="6243:52" pos:end="6243:53">||</operator> <operator pos:start="6243:55" pos:end="6243:55">!</operator><name pos:start="6243:56" pos:end="6243:60"><name pos:start="6243:56" pos:end="6243:56">s</name><operator pos:start="6243:57" pos:end="6243:58">-&gt;</operator><name pos:start="6243:59" pos:end="6243:60">pe</name></name></expr>)</condition><block type="pseudo" pos:start="6245:25" pos:end="6245:40"><block_content pos:start="6245:25" pos:end="6245:40">

                        <goto pos:start="6245:25" pos:end="6245:40">goto <name pos:start="6245:30" pos:end="6245:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="6247:21" pos:end="6257:21"><if pos:start="6247:21" pos:end="6253:21">if <condition pos:start="6247:24" pos:end="6247:36">(<expr pos:start="6247:25" pos:end="6247:35"><name pos:start="6247:25" pos:end="6247:30"><name pos:start="6247:25" pos:end="6247:25">s</name><operator pos:start="6247:26" pos:end="6247:27">-&gt;</operator><name pos:start="6247:28" pos:end="6247:30">cpl</name></name> <operator pos:start="6247:32" pos:end="6247:33">!=</operator> <literal type="number" pos:start="6247:35" pos:end="6247:35">0</literal></expr>)</condition> <block pos:start="6247:38" pos:end="6253:21">{<block_content pos:start="6249:25" pos:end="6251:30">

                        <expr_stmt pos:start="6249:25" pos:end="6249:76"><expr pos:start="6249:25" pos:end="6249:75"><call pos:start="6249:25" pos:end="6249:75"><name pos:start="6249:25" pos:end="6249:37">gen_exception</name><argument_list pos:start="6249:38" pos:end="6249:75">(<argument pos:start="6249:39" pos:end="6249:39"><expr pos:start="6249:39" pos:end="6249:39"><name pos:start="6249:39" pos:end="6249:39">s</name></expr></argument>, <argument pos:start="6249:42" pos:end="6249:51"><expr pos:start="6249:42" pos:end="6249:51"><name pos:start="6249:42" pos:end="6249:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6249:54" pos:end="6249:74"><expr pos:start="6249:54" pos:end="6249:74"><name pos:start="6249:54" pos:end="6249:61">pc_start</name> <operator pos:start="6249:63" pos:end="6249:63">-</operator> <name pos:start="6249:65" pos:end="6249:74"><name pos:start="6249:65" pos:end="6249:65">s</name><operator pos:start="6249:66" pos:end="6249:67">-&gt;</operator><name pos:start="6249:68" pos:end="6249:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="6251:25" pos:end="6251:30">break;</break>

                    </block_content>}</block></if> <else pos:start="6253:23" pos:end="6257:21">else <block pos:start="6253:28" pos:end="6257:21">{<block_content pos:start="6255:25" pos:end="6255:77">

                        <expr_stmt pos:start="6255:25" pos:end="6255:77"><expr pos:start="6255:25" pos:end="6255:76"><call pos:start="6255:25" pos:end="6255:76"><name pos:start="6255:25" pos:end="6255:42">gen_helper_invlpga</name><argument_list pos:start="6255:43" pos:end="6255:76">(<argument pos:start="6255:44" pos:end="6255:50"><expr pos:start="6255:44" pos:end="6255:50"><name pos:start="6255:44" pos:end="6255:50">cpu_env</name></expr></argument>, <argument pos:start="6255:53" pos:end="6255:75"><expr pos:start="6255:53" pos:end="6255:75"><call pos:start="6255:53" pos:end="6255:75"><name pos:start="6255:53" pos:end="6255:65">tcg_const_i32</name><argument_list pos:start="6255:66" pos:end="6255:75">(<argument pos:start="6255:67" pos:end="6255:74"><expr pos:start="6255:67" pos:end="6255:74"><name pos:start="6255:67" pos:end="6255:74"><name pos:start="6255:67" pos:end="6255:67">s</name><operator pos:start="6255:68" pos:end="6255:69">-&gt;</operator><name pos:start="6255:70" pos:end="6255:74">aflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="6259:21" pos:end="6259:26">break;</break>

                <default pos:start="6261:17" pos:end="6261:24">default:</default>

                    <goto pos:start="6263:21" pos:end="6263:36">goto <name pos:start="6263:26" pos:end="6263:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></if> <if type="elseif" pos:start="6267:15" pos:end="6271:13">else if <condition pos:start="6267:23" pos:end="6267:35">(<expr pos:start="6267:24" pos:end="6267:34"><name pos:start="6267:24" pos:end="6267:29"><name pos:start="6267:24" pos:end="6267:24">s</name><operator pos:start="6267:25" pos:end="6267:26">-&gt;</operator><name pos:start="6267:27" pos:end="6267:29">cpl</name></name> <operator pos:start="6267:31" pos:end="6267:32">!=</operator> <literal type="number" pos:start="6267:34" pos:end="6267:34">0</literal></expr>)</condition> <block pos:start="6267:37" pos:end="6271:13">{<block_content pos:start="6269:17" pos:end="6269:68">

                <expr_stmt pos:start="6269:17" pos:end="6269:68"><expr pos:start="6269:17" pos:end="6269:67"><call pos:start="6269:17" pos:end="6269:67"><name pos:start="6269:17" pos:end="6269:29">gen_exception</name><argument_list pos:start="6269:30" pos:end="6269:67">(<argument pos:start="6269:31" pos:end="6269:31"><expr pos:start="6269:31" pos:end="6269:31"><name pos:start="6269:31" pos:end="6269:31">s</name></expr></argument>, <argument pos:start="6269:34" pos:end="6269:43"><expr pos:start="6269:34" pos:end="6269:43"><name pos:start="6269:34" pos:end="6269:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6269:46" pos:end="6269:66"><expr pos:start="6269:46" pos:end="6269:66"><name pos:start="6269:46" pos:end="6269:53">pc_start</name> <operator pos:start="6269:55" pos:end="6269:55">-</operator> <name pos:start="6269:57" pos:end="6269:66"><name pos:start="6269:57" pos:end="6269:57">s</name><operator pos:start="6269:58" pos:end="6269:59">-&gt;</operator><name pos:start="6269:60" pos:end="6269:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6271:15" pos:end="6303:13">else <block pos:start="6271:20" pos:end="6303:13">{<block_content pos:start="6273:17" pos:end="6301:17">

                <expr_stmt pos:start="6273:17" pos:end="6275:91"><expr pos:start="6273:17" pos:end="6275:90"><call pos:start="6273:17" pos:end="6275:90"><name pos:start="6273:17" pos:end="6273:39">gen_svm_check_intercept</name><argument_list pos:start="6273:40" pos:end="6275:90">(<argument pos:start="6273:41" pos:end="6273:41"><expr pos:start="6273:41" pos:end="6273:41"><name pos:start="6273:41" pos:end="6273:41">s</name></expr></argument>, <argument pos:start="6273:44" pos:end="6273:51"><expr pos:start="6273:44" pos:end="6273:51"><name pos:start="6273:44" pos:end="6273:51">pc_start</name></expr></argument>,

                                        <argument pos:start="6275:41" pos:end="6275:89"><expr pos:start="6275:41" pos:end="6275:89"><ternary pos:start="6275:41" pos:end="6275:89"><condition pos:start="6275:41" pos:end="6275:47"><expr pos:start="6275:41" pos:end="6275:45"><name pos:start="6275:41" pos:end="6275:42">op</name><operator pos:start="6275:43" pos:end="6275:44">==</operator><literal type="number" pos:start="6275:45" pos:end="6275:45">2</literal></expr> ?</condition><then pos:start="6275:49" pos:end="6275:67"> <expr pos:start="6275:49" pos:end="6275:67"><name pos:start="6275:49" pos:end="6275:67">SVM_EXIT_GDTR_WRITE</name></expr> </then><else pos:start="6275:69" pos:end="6275:89">: <expr pos:start="6275:71" pos:end="6275:89"><name pos:start="6275:71" pos:end="6275:89">SVM_EXIT_IDTR_WRITE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6277:17" pos:end="6277:70"><expr pos:start="6277:17" pos:end="6277:69"><call pos:start="6277:17" pos:end="6277:69"><name pos:start="6277:17" pos:end="6277:29">gen_lea_modrm</name><argument_list pos:start="6277:30" pos:end="6277:69">(<argument pos:start="6277:31" pos:end="6277:33"><expr pos:start="6277:31" pos:end="6277:33"><name pos:start="6277:31" pos:end="6277:33">env</name></expr></argument>, <argument pos:start="6277:36" pos:end="6277:36"><expr pos:start="6277:36" pos:end="6277:36"><name pos:start="6277:36" pos:end="6277:36">s</name></expr></argument>, <argument pos:start="6277:39" pos:end="6277:43"><expr pos:start="6277:39" pos:end="6277:43"><name pos:start="6277:39" pos:end="6277:43">modrm</name></expr></argument>, <argument pos:start="6277:46" pos:end="6277:54"><expr pos:start="6277:46" pos:end="6277:54"><operator pos:start="6277:46" pos:end="6277:46">&amp;</operator><name pos:start="6277:47" pos:end="6277:54">reg_addr</name></expr></argument>, <argument pos:start="6277:57" pos:end="6277:68"><expr pos:start="6277:57" pos:end="6277:68"><operator pos:start="6277:57" pos:end="6277:57">&amp;</operator><name pos:start="6277:58" pos:end="6277:68">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6279:17" pos:end="6279:56"><expr pos:start="6279:17" pos:end="6279:55"><call pos:start="6279:17" pos:end="6279:55"><name pos:start="6279:17" pos:end="6279:31">gen_op_ld_T1_A0</name><argument_list pos:start="6279:32" pos:end="6279:55">(<argument pos:start="6279:33" pos:end="6279:54"><expr pos:start="6279:33" pos:end="6279:54"><name pos:start="6279:33" pos:end="6279:39">OT_WORD</name> <operator pos:start="6279:41" pos:end="6279:41">+</operator> <name pos:start="6279:43" pos:end="6279:54"><name pos:start="6279:43" pos:end="6279:43">s</name><operator pos:start="6279:44" pos:end="6279:45">-&gt;</operator><name pos:start="6279:46" pos:end="6279:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6281:17" pos:end="6281:36"><expr pos:start="6281:17" pos:end="6281:35"><call pos:start="6281:17" pos:end="6281:35"><name pos:start="6281:17" pos:end="6281:29">gen_add_A0_im</name><argument_list pos:start="6281:30" pos:end="6281:35">(<argument pos:start="6281:31" pos:end="6281:31"><expr pos:start="6281:31" pos:end="6281:31"><name pos:start="6281:31" pos:end="6281:31">s</name></expr></argument>, <argument pos:start="6281:34" pos:end="6281:34"><expr pos:start="6281:34" pos:end="6281:34"><literal type="number" pos:start="6281:34" pos:end="6281:34">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6283:17" pos:end="6283:68"><expr pos:start="6283:17" pos:end="6283:67"><call pos:start="6283:17" pos:end="6283:67"><name pos:start="6283:17" pos:end="6283:31">gen_op_ld_T0_A0</name><argument_list pos:start="6283:32" pos:end="6283:67">(<argument pos:start="6283:33" pos:end="6283:66"><expr pos:start="6283:33" pos:end="6283:66"><call pos:start="6283:33" pos:end="6283:41"><name pos:start="6283:33" pos:end="6283:38">CODE64</name><argument_list pos:start="6283:39" pos:end="6283:41">(<argument pos:start="6283:40" pos:end="6283:40"><expr pos:start="6283:40" pos:end="6283:40"><name pos:start="6283:40" pos:end="6283:40">s</name></expr></argument>)</argument_list></call> <operator pos:start="6283:43" pos:end="6283:43">+</operator> <name pos:start="6283:45" pos:end="6283:51">OT_LONG</name> <operator pos:start="6283:53" pos:end="6283:53">+</operator> <name pos:start="6283:55" pos:end="6283:66"><name pos:start="6283:55" pos:end="6283:55">s</name><operator pos:start="6283:56" pos:end="6283:57">-&gt;</operator><name pos:start="6283:58" pos:end="6283:66">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="6285:17" pos:end="6287:48"><if pos:start="6285:17" pos:end="6287:48">if <condition pos:start="6285:20" pos:end="6285:30">(<expr pos:start="6285:21" pos:end="6285:29"><operator pos:start="6285:21" pos:end="6285:21">!</operator><name pos:start="6285:22" pos:end="6285:29"><name pos:start="6285:22" pos:end="6285:22">s</name><operator pos:start="6285:23" pos:end="6285:24">-&gt;</operator><name pos:start="6285:25" pos:end="6285:29">dflag</name></name></expr>)</condition><block type="pseudo" pos:start="6287:21" pos:end="6287:48"><block_content pos:start="6287:21" pos:end="6287:48">

                    <expr_stmt pos:start="6287:21" pos:end="6287:48"><expr pos:start="6287:21" pos:end="6287:47"><call pos:start="6287:21" pos:end="6287:47"><name pos:start="6287:21" pos:end="6287:37">gen_op_andl_T0_im</name><argument_list pos:start="6287:38" pos:end="6287:47">(<argument pos:start="6287:39" pos:end="6287:46"><expr pos:start="6287:39" pos:end="6287:46"><literal type="number" pos:start="6287:39" pos:end="6287:46">0xffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="6289:17" pos:end="6301:17"><if pos:start="6289:17" pos:end="6295:17">if <condition pos:start="6289:20" pos:end="6289:28">(<expr pos:start="6289:21" pos:end="6289:27"><name pos:start="6289:21" pos:end="6289:22">op</name> <operator pos:start="6289:24" pos:end="6289:25">==</operator> <literal type="number" pos:start="6289:27" pos:end="6289:27">2</literal></expr>)</condition> <block pos:start="6289:30" pos:end="6295:17">{<block_content pos:start="6291:21" pos:end="6293:88">

                    <expr_stmt pos:start="6291:21" pos:end="6291:85"><expr pos:start="6291:21" pos:end="6291:84"><call pos:start="6291:21" pos:end="6291:84"><name pos:start="6291:21" pos:end="6291:33">tcg_gen_st_tl</name><argument_list pos:start="6291:34" pos:end="6291:84">(<argument pos:start="6291:35" pos:end="6291:42"><expr pos:start="6291:35" pos:end="6291:42"><name pos:start="6291:35" pos:end="6291:42"><name pos:start="6291:35" pos:end="6291:39">cpu_T</name><index pos:start="6291:40" pos:end="6291:42">[<expr pos:start="6291:41" pos:end="6291:41"><literal type="number" pos:start="6291:41" pos:end="6291:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6291:45" pos:end="6291:51"><expr pos:start="6291:45" pos:end="6291:51"><name pos:start="6291:45" pos:end="6291:51">cpu_env</name></expr></argument>, <argument pos:start="6291:54" pos:end="6291:83"><expr pos:start="6291:54" pos:end="6291:83"><call pos:start="6291:54" pos:end="6291:83"><name pos:start="6291:54" pos:end="6291:61">offsetof</name><argument_list pos:start="6291:62" pos:end="6291:83">(<argument pos:start="6291:63" pos:end="6291:73"><expr pos:start="6291:63" pos:end="6291:73"><name pos:start="6291:63" pos:end="6291:73">CPUX86State</name></expr></argument>,<argument pos:start="6291:75" pos:end="6291:82"><expr pos:start="6291:75" pos:end="6291:82"><name pos:start="6291:75" pos:end="6291:82"><name pos:start="6291:75" pos:end="6291:77">gdt</name><operator pos:start="6291:78" pos:end="6291:78">.</operator><name pos:start="6291:79" pos:end="6291:82">base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6293:21" pos:end="6293:88"><expr pos:start="6293:21" pos:end="6293:87"><call pos:start="6293:21" pos:end="6293:87"><name pos:start="6293:21" pos:end="6293:35">tcg_gen_st32_tl</name><argument_list pos:start="6293:36" pos:end="6293:87">(<argument pos:start="6293:37" pos:end="6293:44"><expr pos:start="6293:37" pos:end="6293:44"><name pos:start="6293:37" pos:end="6293:44"><name pos:start="6293:37" pos:end="6293:41">cpu_T</name><index pos:start="6293:42" pos:end="6293:44">[<expr pos:start="6293:43" pos:end="6293:43"><literal type="number" pos:start="6293:43" pos:end="6293:43">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="6293:47" pos:end="6293:53"><expr pos:start="6293:47" pos:end="6293:53"><name pos:start="6293:47" pos:end="6293:53">cpu_env</name></expr></argument>, <argument pos:start="6293:56" pos:end="6293:86"><expr pos:start="6293:56" pos:end="6293:86"><call pos:start="6293:56" pos:end="6293:86"><name pos:start="6293:56" pos:end="6293:63">offsetof</name><argument_list pos:start="6293:64" pos:end="6293:86">(<argument pos:start="6293:65" pos:end="6293:75"><expr pos:start="6293:65" pos:end="6293:75"><name pos:start="6293:65" pos:end="6293:75">CPUX86State</name></expr></argument>,<argument pos:start="6293:77" pos:end="6293:85"><expr pos:start="6293:77" pos:end="6293:85"><name pos:start="6293:77" pos:end="6293:85"><name pos:start="6293:77" pos:end="6293:79">gdt</name><operator pos:start="6293:80" pos:end="6293:80">.</operator><name pos:start="6293:81" pos:end="6293:85">limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6295:19" pos:end="6301:17">else <block pos:start="6295:24" pos:end="6301:17">{<block_content pos:start="6297:21" pos:end="6299:88">

                    <expr_stmt pos:start="6297:21" pos:end="6297:85"><expr pos:start="6297:21" pos:end="6297:84"><call pos:start="6297:21" pos:end="6297:84"><name pos:start="6297:21" pos:end="6297:33">tcg_gen_st_tl</name><argument_list pos:start="6297:34" pos:end="6297:84">(<argument pos:start="6297:35" pos:end="6297:42"><expr pos:start="6297:35" pos:end="6297:42"><name pos:start="6297:35" pos:end="6297:42"><name pos:start="6297:35" pos:end="6297:39">cpu_T</name><index pos:start="6297:40" pos:end="6297:42">[<expr pos:start="6297:41" pos:end="6297:41"><literal type="number" pos:start="6297:41" pos:end="6297:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6297:45" pos:end="6297:51"><expr pos:start="6297:45" pos:end="6297:51"><name pos:start="6297:45" pos:end="6297:51">cpu_env</name></expr></argument>, <argument pos:start="6297:54" pos:end="6297:83"><expr pos:start="6297:54" pos:end="6297:83"><call pos:start="6297:54" pos:end="6297:83"><name pos:start="6297:54" pos:end="6297:61">offsetof</name><argument_list pos:start="6297:62" pos:end="6297:83">(<argument pos:start="6297:63" pos:end="6297:73"><expr pos:start="6297:63" pos:end="6297:73"><name pos:start="6297:63" pos:end="6297:73">CPUX86State</name></expr></argument>,<argument pos:start="6297:75" pos:end="6297:82"><expr pos:start="6297:75" pos:end="6297:82"><name pos:start="6297:75" pos:end="6297:82"><name pos:start="6297:75" pos:end="6297:77">idt</name><operator pos:start="6297:78" pos:end="6297:78">.</operator><name pos:start="6297:79" pos:end="6297:82">base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6299:21" pos:end="6299:88"><expr pos:start="6299:21" pos:end="6299:87"><call pos:start="6299:21" pos:end="6299:87"><name pos:start="6299:21" pos:end="6299:35">tcg_gen_st32_tl</name><argument_list pos:start="6299:36" pos:end="6299:87">(<argument pos:start="6299:37" pos:end="6299:44"><expr pos:start="6299:37" pos:end="6299:44"><name pos:start="6299:37" pos:end="6299:44"><name pos:start="6299:37" pos:end="6299:41">cpu_T</name><index pos:start="6299:42" pos:end="6299:44">[<expr pos:start="6299:43" pos:end="6299:43"><literal type="number" pos:start="6299:43" pos:end="6299:43">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="6299:47" pos:end="6299:53"><expr pos:start="6299:47" pos:end="6299:53"><name pos:start="6299:47" pos:end="6299:53">cpu_env</name></expr></argument>, <argument pos:start="6299:56" pos:end="6299:86"><expr pos:start="6299:56" pos:end="6299:86"><call pos:start="6299:56" pos:end="6299:86"><name pos:start="6299:56" pos:end="6299:63">offsetof</name><argument_list pos:start="6299:64" pos:end="6299:86">(<argument pos:start="6299:65" pos:end="6299:75"><expr pos:start="6299:65" pos:end="6299:75"><name pos:start="6299:65" pos:end="6299:75">CPUX86State</name></expr></argument>,<argument pos:start="6299:77" pos:end="6299:85"><expr pos:start="6299:77" pos:end="6299:85"><name pos:start="6299:77" pos:end="6299:85"><name pos:start="6299:77" pos:end="6299:79">idt</name><operator pos:start="6299:80" pos:end="6299:80">.</operator><name pos:start="6299:81" pos:end="6299:85">limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="6305:13" pos:end="6305:18">break;</break>

        <case pos:start="6307:9" pos:end="6307:15">case <expr pos:start="6307:14" pos:end="6307:14"><literal type="number" pos:start="6307:14" pos:end="6307:14">4</literal></expr>:</case> <comment type="block" pos:start="6307:17" pos:end="6307:26">/* smsw */</comment>

            <expr_stmt pos:start="6309:13" pos:end="6312:0"><expr pos:start="6309:13" pos:end="6309:67"><call pos:start="6309:13" pos:end="6309:67"><name pos:start="6309:13" pos:end="6309:35">gen_svm_check_intercept</name><argument_list pos:start="6309:36" pos:end="6309:67">(<argument pos:start="6309:37" pos:end="6309:37"><expr pos:start="6309:37" pos:end="6309:37"><name pos:start="6309:37" pos:end="6309:37">s</name></expr></argument>, <argument pos:start="6309:40" pos:end="6309:47"><expr pos:start="6309:40" pos:end="6309:47"><name pos:start="6309:40" pos:end="6309:47">pc_start</name></expr></argument>, <argument pos:start="6309:50" pos:end="6309:66"><expr pos:start="6309:50" pos:end="6309:66"><name pos:start="6309:50" pos:end="6309:66">SVM_EXIT_READ_CR0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="6311:1" pos:end="6311:57">#<cpp:directive pos:start="6311:2" pos:end="6311:3">if</cpp:directive> <expr pos:start="6311:5" pos:end="6311:57"><name pos:start="6311:5" pos:end="6311:11">defined</name> <name pos:start="6311:13" pos:end="6311:25">TARGET_X86_64</name> <operator pos:start="6311:27" pos:end="6311:28">&amp;&amp;</operator> <name pos:start="6311:30" pos:end="6311:36">defined</name> <name pos:start="6311:38" pos:end="6311:57">HOST_WORDS_BIGENDIAN</name></expr></cpp:if>

            <expr_stmt pos:start="6313:13" pos:end="6316:0"><expr pos:start="6313:13" pos:end="6313:80"><call pos:start="6313:13" pos:end="6313:80"><name pos:start="6313:13" pos:end="6313:28">tcg_gen_ld32u_tl</name><argument_list pos:start="6313:29" pos:end="6313:80">(<argument pos:start="6313:30" pos:end="6313:37"><expr pos:start="6313:30" pos:end="6313:37"><name pos:start="6313:30" pos:end="6313:37"><name pos:start="6313:30" pos:end="6313:34">cpu_T</name><index pos:start="6313:35" pos:end="6313:37">[<expr pos:start="6313:36" pos:end="6313:36"><literal type="number" pos:start="6313:36" pos:end="6313:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6313:40" pos:end="6313:46"><expr pos:start="6313:40" pos:end="6313:46"><name pos:start="6313:40" pos:end="6313:46">cpu_env</name></expr></argument>, <argument pos:start="6313:49" pos:end="6313:79"><expr pos:start="6313:49" pos:end="6313:79"><call pos:start="6313:49" pos:end="6313:75"><name pos:start="6313:49" pos:end="6313:56">offsetof</name><argument_list pos:start="6313:57" pos:end="6313:75">(<argument pos:start="6313:58" pos:end="6313:68"><expr pos:start="6313:58" pos:end="6313:68"><name pos:start="6313:58" pos:end="6313:68">CPUX86State</name></expr></argument>,<argument pos:start="6313:70" pos:end="6313:74"><expr pos:start="6313:70" pos:end="6313:74"><name pos:start="6313:70" pos:end="6313:74"><name pos:start="6313:70" pos:end="6313:71">cr</name><index pos:start="6313:72" pos:end="6313:74">[<expr pos:start="6313:73" pos:end="6313:73"><literal type="number" pos:start="6313:73" pos:end="6313:73">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="6313:77" pos:end="6313:77">+</operator> <literal type="number" pos:start="6313:79" pos:end="6313:79">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="6315:1" pos:end="6315:5">#<cpp:directive pos:start="6315:2" pos:end="6315:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="6317:13" pos:end="6320:0"><expr pos:start="6317:13" pos:end="6317:76"><call pos:start="6317:13" pos:end="6317:76"><name pos:start="6317:13" pos:end="6317:28">tcg_gen_ld32u_tl</name><argument_list pos:start="6317:29" pos:end="6317:76">(<argument pos:start="6317:30" pos:end="6317:37"><expr pos:start="6317:30" pos:end="6317:37"><name pos:start="6317:30" pos:end="6317:37"><name pos:start="6317:30" pos:end="6317:34">cpu_T</name><index pos:start="6317:35" pos:end="6317:37">[<expr pos:start="6317:36" pos:end="6317:36"><literal type="number" pos:start="6317:36" pos:end="6317:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6317:40" pos:end="6317:46"><expr pos:start="6317:40" pos:end="6317:46"><name pos:start="6317:40" pos:end="6317:46">cpu_env</name></expr></argument>, <argument pos:start="6317:49" pos:end="6317:75"><expr pos:start="6317:49" pos:end="6317:75"><call pos:start="6317:49" pos:end="6317:75"><name pos:start="6317:49" pos:end="6317:56">offsetof</name><argument_list pos:start="6317:57" pos:end="6317:75">(<argument pos:start="6317:58" pos:end="6317:68"><expr pos:start="6317:58" pos:end="6317:68"><name pos:start="6317:58" pos:end="6317:68">CPUX86State</name></expr></argument>,<argument pos:start="6317:70" pos:end="6317:74"><expr pos:start="6317:70" pos:end="6317:74"><name pos:start="6317:70" pos:end="6317:74"><name pos:start="6317:70" pos:end="6317:71">cr</name><index pos:start="6317:72" pos:end="6317:74">[<expr pos:start="6317:73" pos:end="6317:73"><literal type="number" pos:start="6317:73" pos:end="6317:73">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="6319:1" pos:end="6319:6">#<cpp:directive pos:start="6319:2" pos:end="6319:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="6321:13" pos:end="6321:63"><expr pos:start="6321:13" pos:end="6321:62"><call pos:start="6321:13" pos:end="6321:62"><name pos:start="6321:13" pos:end="6321:26">gen_ldst_modrm</name><argument_list pos:start="6321:27" pos:end="6321:62">(<argument pos:start="6321:28" pos:end="6321:30"><expr pos:start="6321:28" pos:end="6321:30"><name pos:start="6321:28" pos:end="6321:30">env</name></expr></argument>, <argument pos:start="6321:33" pos:end="6321:33"><expr pos:start="6321:33" pos:end="6321:33"><name pos:start="6321:33" pos:end="6321:33">s</name></expr></argument>, <argument pos:start="6321:36" pos:end="6321:40"><expr pos:start="6321:36" pos:end="6321:40"><name pos:start="6321:36" pos:end="6321:40">modrm</name></expr></argument>, <argument pos:start="6321:43" pos:end="6321:49"><expr pos:start="6321:43" pos:end="6321:49"><name pos:start="6321:43" pos:end="6321:49">OT_WORD</name></expr></argument>, <argument pos:start="6321:52" pos:end="6321:58"><expr pos:start="6321:52" pos:end="6321:58"><name pos:start="6321:52" pos:end="6321:58">OR_TMP0</name></expr></argument>, <argument pos:start="6321:61" pos:end="6321:61"><expr pos:start="6321:61" pos:end="6321:61"><literal type="number" pos:start="6321:61" pos:end="6321:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="6323:13" pos:end="6323:18">break;</break>

        <case pos:start="6325:9" pos:end="6325:15">case <expr pos:start="6325:14" pos:end="6325:14"><literal type="number" pos:start="6325:14" pos:end="6325:14">6</literal></expr>:</case> <comment type="block" pos:start="6325:17" pos:end="6325:26">/* lmsw */</comment>

            <if_stmt pos:start="6327:13" pos:end="6343:13"><if pos:start="6327:13" pos:end="6331:13">if <condition pos:start="6327:16" pos:end="6327:28">(<expr pos:start="6327:17" pos:end="6327:27"><name pos:start="6327:17" pos:end="6327:22"><name pos:start="6327:17" pos:end="6327:17">s</name><operator pos:start="6327:18" pos:end="6327:19">-&gt;</operator><name pos:start="6327:20" pos:end="6327:22">cpl</name></name> <operator pos:start="6327:24" pos:end="6327:25">!=</operator> <literal type="number" pos:start="6327:27" pos:end="6327:27">0</literal></expr>)</condition> <block pos:start="6327:30" pos:end="6331:13">{<block_content pos:start="6329:17" pos:end="6329:68">

                <expr_stmt pos:start="6329:17" pos:end="6329:68"><expr pos:start="6329:17" pos:end="6329:67"><call pos:start="6329:17" pos:end="6329:67"><name pos:start="6329:17" pos:end="6329:29">gen_exception</name><argument_list pos:start="6329:30" pos:end="6329:67">(<argument pos:start="6329:31" pos:end="6329:31"><expr pos:start="6329:31" pos:end="6329:31"><name pos:start="6329:31" pos:end="6329:31">s</name></expr></argument>, <argument pos:start="6329:34" pos:end="6329:43"><expr pos:start="6329:34" pos:end="6329:43"><name pos:start="6329:34" pos:end="6329:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6329:46" pos:end="6329:66"><expr pos:start="6329:46" pos:end="6329:66"><name pos:start="6329:46" pos:end="6329:53">pc_start</name> <operator pos:start="6329:55" pos:end="6329:55">-</operator> <name pos:start="6329:57" pos:end="6329:66"><name pos:start="6329:57" pos:end="6329:57">s</name><operator pos:start="6329:58" pos:end="6329:59">-&gt;</operator><name pos:start="6329:60" pos:end="6329:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6331:15" pos:end="6343:13">else <block pos:start="6331:20" pos:end="6343:13">{<block_content pos:start="6333:17" pos:end="6341:27">

                <expr_stmt pos:start="6333:17" pos:end="6333:73"><expr pos:start="6333:17" pos:end="6333:72"><call pos:start="6333:17" pos:end="6333:72"><name pos:start="6333:17" pos:end="6333:39">gen_svm_check_intercept</name><argument_list pos:start="6333:40" pos:end="6333:72">(<argument pos:start="6333:41" pos:end="6333:41"><expr pos:start="6333:41" pos:end="6333:41"><name pos:start="6333:41" pos:end="6333:41">s</name></expr></argument>, <argument pos:start="6333:44" pos:end="6333:51"><expr pos:start="6333:44" pos:end="6333:51"><name pos:start="6333:44" pos:end="6333:51">pc_start</name></expr></argument>, <argument pos:start="6333:54" pos:end="6333:71"><expr pos:start="6333:54" pos:end="6333:71"><name pos:start="6333:54" pos:end="6333:71">SVM_EXIT_WRITE_CR0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6335:17" pos:end="6335:67"><expr pos:start="6335:17" pos:end="6335:66"><call pos:start="6335:17" pos:end="6335:66"><name pos:start="6335:17" pos:end="6335:30">gen_ldst_modrm</name><argument_list pos:start="6335:31" pos:end="6335:66">(<argument pos:start="6335:32" pos:end="6335:34"><expr pos:start="6335:32" pos:end="6335:34"><name pos:start="6335:32" pos:end="6335:34">env</name></expr></argument>, <argument pos:start="6335:37" pos:end="6335:37"><expr pos:start="6335:37" pos:end="6335:37"><name pos:start="6335:37" pos:end="6335:37">s</name></expr></argument>, <argument pos:start="6335:40" pos:end="6335:44"><expr pos:start="6335:40" pos:end="6335:44"><name pos:start="6335:40" pos:end="6335:44">modrm</name></expr></argument>, <argument pos:start="6335:47" pos:end="6335:53"><expr pos:start="6335:47" pos:end="6335:53"><name pos:start="6335:47" pos:end="6335:53">OT_WORD</name></expr></argument>, <argument pos:start="6335:56" pos:end="6335:62"><expr pos:start="6335:56" pos:end="6335:62"><name pos:start="6335:56" pos:end="6335:62">OR_TMP0</name></expr></argument>, <argument pos:start="6335:65" pos:end="6335:65"><expr pos:start="6335:65" pos:end="6335:65"><literal type="number" pos:start="6335:65" pos:end="6335:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6337:17" pos:end="6337:51"><expr pos:start="6337:17" pos:end="6337:50"><call pos:start="6337:17" pos:end="6337:50"><name pos:start="6337:17" pos:end="6337:31">gen_helper_lmsw</name><argument_list pos:start="6337:32" pos:end="6337:50">(<argument pos:start="6337:33" pos:end="6337:39"><expr pos:start="6337:33" pos:end="6337:39"><name pos:start="6337:33" pos:end="6337:39">cpu_env</name></expr></argument>, <argument pos:start="6337:42" pos:end="6337:49"><expr pos:start="6337:42" pos:end="6337:49"><name pos:start="6337:42" pos:end="6337:49"><name pos:start="6337:42" pos:end="6337:46">cpu_T</name><index pos:start="6337:47" pos:end="6337:49">[<expr pos:start="6337:48" pos:end="6337:48"><literal type="number" pos:start="6337:48" pos:end="6337:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6339:17" pos:end="6339:47"><expr pos:start="6339:17" pos:end="6339:46"><call pos:start="6339:17" pos:end="6339:46"><name pos:start="6339:17" pos:end="6339:26">gen_jmp_im</name><argument_list pos:start="6339:27" pos:end="6339:46">(<argument pos:start="6339:28" pos:end="6339:45"><expr pos:start="6339:28" pos:end="6339:45"><name pos:start="6339:28" pos:end="6339:32"><name pos:start="6339:28" pos:end="6339:28">s</name><operator pos:start="6339:29" pos:end="6339:30">-&gt;</operator><name pos:start="6339:31" pos:end="6339:32">pc</name></name> <operator pos:start="6339:34" pos:end="6339:34">-</operator> <name pos:start="6339:36" pos:end="6339:45"><name pos:start="6339:36" pos:end="6339:36">s</name><operator pos:start="6339:37" pos:end="6339:38">-&gt;</operator><name pos:start="6339:39" pos:end="6339:45">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6341:17" pos:end="6341:27"><expr pos:start="6341:17" pos:end="6341:26"><call pos:start="6341:17" pos:end="6341:26"><name pos:start="6341:17" pos:end="6341:23">gen_eob</name><argument_list pos:start="6341:24" pos:end="6341:26">(<argument pos:start="6341:25" pos:end="6341:25"><expr pos:start="6341:25" pos:end="6341:25"><name pos:start="6341:25" pos:end="6341:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="6345:13" pos:end="6345:18">break;</break>

        <case pos:start="6347:9" pos:end="6347:15">case <expr pos:start="6347:14" pos:end="6347:14"><literal type="number" pos:start="6347:14" pos:end="6347:14">7</literal></expr>:</case>

            <if_stmt pos:start="6349:13" pos:end="6453:13"><if pos:start="6349:13" pos:end="6373:13">if <condition pos:start="6349:16" pos:end="6349:25">(<expr pos:start="6349:17" pos:end="6349:24"><name pos:start="6349:17" pos:end="6349:19">mod</name> <operator pos:start="6349:21" pos:end="6349:22">!=</operator> <literal type="number" pos:start="6349:24" pos:end="6349:24">3</literal></expr>)</condition> <block pos:start="6349:27" pos:end="6373:13">{<block_content pos:start="6351:17" pos:end="6371:17"> <comment type="block" pos:start="6349:29" pos:end="6349:40">/* invlpg */</comment>

                <if_stmt pos:start="6351:17" pos:end="6371:17"><if pos:start="6351:17" pos:end="6355:17">if <condition pos:start="6351:20" pos:end="6351:32">(<expr pos:start="6351:21" pos:end="6351:31"><name pos:start="6351:21" pos:end="6351:26"><name pos:start="6351:21" pos:end="6351:21">s</name><operator pos:start="6351:22" pos:end="6351:23">-&gt;</operator><name pos:start="6351:24" pos:end="6351:26">cpl</name></name> <operator pos:start="6351:28" pos:end="6351:29">!=</operator> <literal type="number" pos:start="6351:31" pos:end="6351:31">0</literal></expr>)</condition> <block pos:start="6351:34" pos:end="6355:17">{<block_content pos:start="6353:21" pos:end="6353:72">

                    <expr_stmt pos:start="6353:21" pos:end="6353:72"><expr pos:start="6353:21" pos:end="6353:71"><call pos:start="6353:21" pos:end="6353:71"><name pos:start="6353:21" pos:end="6353:33">gen_exception</name><argument_list pos:start="6353:34" pos:end="6353:71">(<argument pos:start="6353:35" pos:end="6353:35"><expr pos:start="6353:35" pos:end="6353:35"><name pos:start="6353:35" pos:end="6353:35">s</name></expr></argument>, <argument pos:start="6353:38" pos:end="6353:47"><expr pos:start="6353:38" pos:end="6353:47"><name pos:start="6353:38" pos:end="6353:47">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6353:50" pos:end="6353:70"><expr pos:start="6353:50" pos:end="6353:70"><name pos:start="6353:50" pos:end="6353:57">pc_start</name> <operator pos:start="6353:59" pos:end="6353:59">-</operator> <name pos:start="6353:61" pos:end="6353:70"><name pos:start="6353:61" pos:end="6353:61">s</name><operator pos:start="6353:62" pos:end="6353:63">-&gt;</operator><name pos:start="6353:64" pos:end="6353:70">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6355:19" pos:end="6371:17">else <block pos:start="6355:24" pos:end="6371:17">{<block_content pos:start="6357:21" pos:end="6369:31">

                    <if_stmt pos:start="6357:21" pos:end="6359:51"><if pos:start="6357:21" pos:end="6359:51">if <condition pos:start="6357:24" pos:end="6357:50">(<expr pos:start="6357:25" pos:end="6357:49"><name pos:start="6357:25" pos:end="6357:32"><name pos:start="6357:25" pos:end="6357:25">s</name><operator pos:start="6357:26" pos:end="6357:27">-&gt;</operator><name pos:start="6357:28" pos:end="6357:32">cc_op</name></name> <operator pos:start="6357:34" pos:end="6357:35">!=</operator> <name pos:start="6357:37" pos:end="6357:49">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="6359:25" pos:end="6359:51"><block_content pos:start="6359:25" pos:end="6359:51">

                        <expr_stmt pos:start="6359:25" pos:end="6359:51"><expr pos:start="6359:25" pos:end="6359:50"><call pos:start="6359:25" pos:end="6359:50"><name pos:start="6359:25" pos:end="6359:40">gen_op_set_cc_op</name><argument_list pos:start="6359:41" pos:end="6359:50">(<argument pos:start="6359:42" pos:end="6359:49"><expr pos:start="6359:42" pos:end="6359:49"><name pos:start="6359:42" pos:end="6359:49"><name pos:start="6359:42" pos:end="6359:42">s</name><operator pos:start="6359:43" pos:end="6359:44">-&gt;</operator><name pos:start="6359:45" pos:end="6359:49">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="6361:21" pos:end="6361:54"><expr pos:start="6361:21" pos:end="6361:53"><call pos:start="6361:21" pos:end="6361:53"><name pos:start="6361:21" pos:end="6361:30">gen_jmp_im</name><argument_list pos:start="6361:31" pos:end="6361:53">(<argument pos:start="6361:32" pos:end="6361:52"><expr pos:start="6361:32" pos:end="6361:52"><name pos:start="6361:32" pos:end="6361:39">pc_start</name> <operator pos:start="6361:41" pos:end="6361:41">-</operator> <name pos:start="6361:43" pos:end="6361:52"><name pos:start="6361:43" pos:end="6361:43">s</name><operator pos:start="6361:44" pos:end="6361:45">-&gt;</operator><name pos:start="6361:46" pos:end="6361:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6363:21" pos:end="6363:74"><expr pos:start="6363:21" pos:end="6363:73"><call pos:start="6363:21" pos:end="6363:73"><name pos:start="6363:21" pos:end="6363:33">gen_lea_modrm</name><argument_list pos:start="6363:34" pos:end="6363:73">(<argument pos:start="6363:35" pos:end="6363:37"><expr pos:start="6363:35" pos:end="6363:37"><name pos:start="6363:35" pos:end="6363:37">env</name></expr></argument>, <argument pos:start="6363:40" pos:end="6363:40"><expr pos:start="6363:40" pos:end="6363:40"><name pos:start="6363:40" pos:end="6363:40">s</name></expr></argument>, <argument pos:start="6363:43" pos:end="6363:47"><expr pos:start="6363:43" pos:end="6363:47"><name pos:start="6363:43" pos:end="6363:47">modrm</name></expr></argument>, <argument pos:start="6363:50" pos:end="6363:58"><expr pos:start="6363:50" pos:end="6363:58"><operator pos:start="6363:50" pos:end="6363:50">&amp;</operator><name pos:start="6363:51" pos:end="6363:58">reg_addr</name></expr></argument>, <argument pos:start="6363:61" pos:end="6363:72"><expr pos:start="6363:61" pos:end="6363:72"><operator pos:start="6363:61" pos:end="6363:61">&amp;</operator><name pos:start="6363:62" pos:end="6363:72">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6365:21" pos:end="6365:55"><expr pos:start="6365:21" pos:end="6365:54"><call pos:start="6365:21" pos:end="6365:54"><name pos:start="6365:21" pos:end="6365:37">gen_helper_invlpg</name><argument_list pos:start="6365:38" pos:end="6365:54">(<argument pos:start="6365:39" pos:end="6365:45"><expr pos:start="6365:39" pos:end="6365:45"><name pos:start="6365:39" pos:end="6365:45">cpu_env</name></expr></argument>, <argument pos:start="6365:48" pos:end="6365:53"><expr pos:start="6365:48" pos:end="6365:53"><name pos:start="6365:48" pos:end="6365:53">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6367:21" pos:end="6367:51"><expr pos:start="6367:21" pos:end="6367:50"><call pos:start="6367:21" pos:end="6367:50"><name pos:start="6367:21" pos:end="6367:30">gen_jmp_im</name><argument_list pos:start="6367:31" pos:end="6367:50">(<argument pos:start="6367:32" pos:end="6367:49"><expr pos:start="6367:32" pos:end="6367:49"><name pos:start="6367:32" pos:end="6367:36"><name pos:start="6367:32" pos:end="6367:32">s</name><operator pos:start="6367:33" pos:end="6367:34">-&gt;</operator><name pos:start="6367:35" pos:end="6367:36">pc</name></name> <operator pos:start="6367:38" pos:end="6367:38">-</operator> <name pos:start="6367:40" pos:end="6367:49"><name pos:start="6367:40" pos:end="6367:40">s</name><operator pos:start="6367:41" pos:end="6367:42">-&gt;</operator><name pos:start="6367:43" pos:end="6367:49">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6369:21" pos:end="6369:31"><expr pos:start="6369:21" pos:end="6369:30"><call pos:start="6369:21" pos:end="6369:30"><name pos:start="6369:21" pos:end="6369:27">gen_eob</name><argument_list pos:start="6369:28" pos:end="6369:30">(<argument pos:start="6369:29" pos:end="6369:29"><expr pos:start="6369:29" pos:end="6369:29"><name pos:start="6369:29" pos:end="6369:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="6373:15" pos:end="6453:13">else <block pos:start="6373:20" pos:end="6453:13">{<block_content pos:start="6375:17" pos:end="6451:17">

                <switch pos:start="6375:17" pos:end="6451:17">switch <condition pos:start="6375:24" pos:end="6375:27">(<expr pos:start="6375:25" pos:end="6375:26"><name pos:start="6375:25" pos:end="6375:26">rm</name></expr>)</condition> <block pos:start="6375:29" pos:end="6451:17">{<block_content pos:start="6377:17" pos:end="6449:36">

                <case pos:start="6377:17" pos:end="6380:0">case <expr pos:start="6377:22" pos:end="6377:22"><literal type="number" pos:start="6377:22" pos:end="6377:22">0</literal></expr>:</case> <comment type="block" pos:start="6377:25" pos:end="6377:36">/* swapgs */</comment>

<cpp:ifdef pos:start="6379:1" pos:end="6379:20">#<cpp:directive pos:start="6379:2" pos:end="6379:6">ifdef</cpp:directive> <name pos:start="6379:8" pos:end="6379:20">TARGET_X86_64</name></cpp:ifdef>

                    <if_stmt pos:start="6381:21" pos:end="6415:21"><if pos:start="6381:21" pos:end="6407:21">if <condition pos:start="6381:24" pos:end="6381:34">(<expr pos:start="6381:25" pos:end="6381:33"><call pos:start="6381:25" pos:end="6381:33"><name pos:start="6381:25" pos:end="6381:30">CODE64</name><argument_list pos:start="6381:31" pos:end="6381:33">(<argument pos:start="6381:32" pos:end="6381:32"><expr pos:start="6381:32" pos:end="6381:32"><name pos:start="6381:32" pos:end="6381:32">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="6381:36" pos:end="6407:21">{<block_content pos:start="6383:25" pos:end="6405:25">

                        <if_stmt pos:start="6383:25" pos:end="6405:25"><if pos:start="6383:25" pos:end="6387:25">if <condition pos:start="6383:28" pos:end="6383:40">(<expr pos:start="6383:29" pos:end="6383:39"><name pos:start="6383:29" pos:end="6383:34"><name pos:start="6383:29" pos:end="6383:29">s</name><operator pos:start="6383:30" pos:end="6383:31">-&gt;</operator><name pos:start="6383:32" pos:end="6383:34">cpl</name></name> <operator pos:start="6383:36" pos:end="6383:37">!=</operator> <literal type="number" pos:start="6383:39" pos:end="6383:39">0</literal></expr>)</condition> <block pos:start="6383:42" pos:end="6387:25">{<block_content pos:start="6385:29" pos:end="6385:80">

                            <expr_stmt pos:start="6385:29" pos:end="6385:80"><expr pos:start="6385:29" pos:end="6385:79"><call pos:start="6385:29" pos:end="6385:79"><name pos:start="6385:29" pos:end="6385:41">gen_exception</name><argument_list pos:start="6385:42" pos:end="6385:79">(<argument pos:start="6385:43" pos:end="6385:43"><expr pos:start="6385:43" pos:end="6385:43"><name pos:start="6385:43" pos:end="6385:43">s</name></expr></argument>, <argument pos:start="6385:46" pos:end="6385:55"><expr pos:start="6385:46" pos:end="6385:55"><name pos:start="6385:46" pos:end="6385:55">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6385:58" pos:end="6385:78"><expr pos:start="6385:58" pos:end="6385:78"><name pos:start="6385:58" pos:end="6385:65">pc_start</name> <operator pos:start="6385:67" pos:end="6385:67">-</operator> <name pos:start="6385:69" pos:end="6385:78"><name pos:start="6385:69" pos:end="6385:69">s</name><operator pos:start="6385:70" pos:end="6385:71">-&gt;</operator><name pos:start="6385:72" pos:end="6385:78">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="6387:27" pos:end="6405:25">else <block pos:start="6387:32" pos:end="6405:25">{<block_content pos:start="6389:29" pos:end="6403:68">

                            <expr_stmt pos:start="6389:29" pos:end="6391:71"><expr pos:start="6389:29" pos:end="6391:70"><call pos:start="6389:29" pos:end="6391:70"><name pos:start="6389:29" pos:end="6389:41">tcg_gen_ld_tl</name><argument_list pos:start="6389:42" pos:end="6391:70">(<argument pos:start="6389:43" pos:end="6389:50"><expr pos:start="6389:43" pos:end="6389:50"><name pos:start="6389:43" pos:end="6389:50"><name pos:start="6389:43" pos:end="6389:47">cpu_T</name><index pos:start="6389:48" pos:end="6389:50">[<expr pos:start="6389:49" pos:end="6389:49"><literal type="number" pos:start="6389:49" pos:end="6389:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6389:53" pos:end="6389:59"><expr pos:start="6389:53" pos:end="6389:59"><name pos:start="6389:53" pos:end="6389:59">cpu_env</name></expr></argument>,

                                <argument pos:start="6391:33" pos:end="6391:69"><expr pos:start="6391:33" pos:end="6391:69"><call pos:start="6391:33" pos:end="6391:69"><name pos:start="6391:33" pos:end="6391:40">offsetof</name><argument_list pos:start="6391:41" pos:end="6391:69">(<argument pos:start="6391:42" pos:end="6391:52"><expr pos:start="6391:42" pos:end="6391:52"><name pos:start="6391:42" pos:end="6391:52">CPUX86State</name></expr></argument>,<argument pos:start="6391:54" pos:end="6391:68"><expr pos:start="6391:54" pos:end="6391:68"><name pos:start="6391:54" pos:end="6391:63"><name pos:start="6391:54" pos:end="6391:57">segs</name><index pos:start="6391:58" pos:end="6391:63">[<expr pos:start="6391:59" pos:end="6391:62"><name pos:start="6391:59" pos:end="6391:62">R_GS</name></expr>]</index></name><operator pos:start="6391:64" pos:end="6391:64">.</operator><name pos:start="6391:65" pos:end="6391:68">base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="6393:29" pos:end="6395:68"><expr pos:start="6393:29" pos:end="6395:67"><call pos:start="6393:29" pos:end="6395:67"><name pos:start="6393:29" pos:end="6393:41">tcg_gen_ld_tl</name><argument_list pos:start="6393:42" pos:end="6395:67">(<argument pos:start="6393:43" pos:end="6393:50"><expr pos:start="6393:43" pos:end="6393:50"><name pos:start="6393:43" pos:end="6393:50"><name pos:start="6393:43" pos:end="6393:47">cpu_T</name><index pos:start="6393:48" pos:end="6393:50">[<expr pos:start="6393:49" pos:end="6393:49"><literal type="number" pos:start="6393:49" pos:end="6393:49">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="6393:53" pos:end="6393:59"><expr pos:start="6393:53" pos:end="6393:59"><name pos:start="6393:53" pos:end="6393:59">cpu_env</name></expr></argument>,

                                <argument pos:start="6395:33" pos:end="6395:66"><expr pos:start="6395:33" pos:end="6395:66"><call pos:start="6395:33" pos:end="6395:66"><name pos:start="6395:33" pos:end="6395:40">offsetof</name><argument_list pos:start="6395:41" pos:end="6395:66">(<argument pos:start="6395:42" pos:end="6395:52"><expr pos:start="6395:42" pos:end="6395:52"><name pos:start="6395:42" pos:end="6395:52">CPUX86State</name></expr></argument>,<argument pos:start="6395:54" pos:end="6395:65"><expr pos:start="6395:54" pos:end="6395:65"><name pos:start="6395:54" pos:end="6395:65">kernelgsbase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="6397:29" pos:end="6399:71"><expr pos:start="6397:29" pos:end="6399:70"><call pos:start="6397:29" pos:end="6399:70"><name pos:start="6397:29" pos:end="6397:41">tcg_gen_st_tl</name><argument_list pos:start="6397:42" pos:end="6399:70">(<argument pos:start="6397:43" pos:end="6397:50"><expr pos:start="6397:43" pos:end="6397:50"><name pos:start="6397:43" pos:end="6397:50"><name pos:start="6397:43" pos:end="6397:47">cpu_T</name><index pos:start="6397:48" pos:end="6397:50">[<expr pos:start="6397:49" pos:end="6397:49"><literal type="number" pos:start="6397:49" pos:end="6397:49">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="6397:53" pos:end="6397:59"><expr pos:start="6397:53" pos:end="6397:59"><name pos:start="6397:53" pos:end="6397:59">cpu_env</name></expr></argument>,

                                <argument pos:start="6399:33" pos:end="6399:69"><expr pos:start="6399:33" pos:end="6399:69"><call pos:start="6399:33" pos:end="6399:69"><name pos:start="6399:33" pos:end="6399:40">offsetof</name><argument_list pos:start="6399:41" pos:end="6399:69">(<argument pos:start="6399:42" pos:end="6399:52"><expr pos:start="6399:42" pos:end="6399:52"><name pos:start="6399:42" pos:end="6399:52">CPUX86State</name></expr></argument>,<argument pos:start="6399:54" pos:end="6399:68"><expr pos:start="6399:54" pos:end="6399:68"><name pos:start="6399:54" pos:end="6399:63"><name pos:start="6399:54" pos:end="6399:57">segs</name><index pos:start="6399:58" pos:end="6399:63">[<expr pos:start="6399:59" pos:end="6399:62"><name pos:start="6399:59" pos:end="6399:62">R_GS</name></expr>]</index></name><operator pos:start="6399:64" pos:end="6399:64">.</operator><name pos:start="6399:65" pos:end="6399:68">base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="6401:29" pos:end="6403:68"><expr pos:start="6401:29" pos:end="6403:67"><call pos:start="6401:29" pos:end="6403:67"><name pos:start="6401:29" pos:end="6401:41">tcg_gen_st_tl</name><argument_list pos:start="6401:42" pos:end="6403:67">(<argument pos:start="6401:43" pos:end="6401:50"><expr pos:start="6401:43" pos:end="6401:50"><name pos:start="6401:43" pos:end="6401:50"><name pos:start="6401:43" pos:end="6401:47">cpu_T</name><index pos:start="6401:48" pos:end="6401:50">[<expr pos:start="6401:49" pos:end="6401:49"><literal type="number" pos:start="6401:49" pos:end="6401:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6401:53" pos:end="6401:59"><expr pos:start="6401:53" pos:end="6401:59"><name pos:start="6401:53" pos:end="6401:59">cpu_env</name></expr></argument>,

                                <argument pos:start="6403:33" pos:end="6403:66"><expr pos:start="6403:33" pos:end="6403:66"><call pos:start="6403:33" pos:end="6403:66"><name pos:start="6403:33" pos:end="6403:40">offsetof</name><argument_list pos:start="6403:41" pos:end="6403:66">(<argument pos:start="6403:42" pos:end="6403:52"><expr pos:start="6403:42" pos:end="6403:52"><name pos:start="6403:42" pos:end="6403:52">CPUX86State</name></expr></argument>,<argument pos:start="6403:54" pos:end="6403:65"><expr pos:start="6403:54" pos:end="6403:65"><name pos:start="6403:54" pos:end="6403:65">kernelgsbase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="6407:23" pos:end="6415:21">else

<cpp:endif pos:start="6409:1" pos:end="6409:6">#<cpp:directive pos:start="6409:2" pos:end="6409:6">endif</cpp:directive></cpp:endif>

                    <block pos:start="6411:21" pos:end="6415:21">{<block_content pos:start="6413:25" pos:end="6413:40">

                        <goto pos:start="6413:25" pos:end="6413:40">goto <name pos:start="6413:30" pos:end="6413:39">illegal_op</name>;</goto>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="6417:21" pos:end="6417:26">break;</break>

                <case pos:start="6419:17" pos:end="6419:23">case <expr pos:start="6419:22" pos:end="6419:22"><literal type="number" pos:start="6419:22" pos:end="6419:22">1</literal></expr>:</case> <comment type="block" pos:start="6419:25" pos:end="6419:36">/* rdtscp */</comment>

                    <if_stmt pos:start="6421:21" pos:end="6423:40"><if pos:start="6421:21" pos:end="6423:40">if <condition pos:start="6421:24" pos:end="6421:70">(<expr pos:start="6421:25" pos:end="6421:69"><operator pos:start="6421:25" pos:end="6421:25">!</operator><operator pos:start="6421:26" pos:end="6421:26">(</operator><name pos:start="6421:27" pos:end="6421:48"><name pos:start="6421:27" pos:end="6421:27">s</name><operator pos:start="6421:28" pos:end="6421:29">-&gt;</operator><name pos:start="6421:30" pos:end="6421:48">cpuid_ext2_features</name></name> <operator pos:start="6421:50" pos:end="6421:50">&amp;</operator> <name pos:start="6421:52" pos:end="6421:68">CPUID_EXT2_RDTSCP</name><operator pos:start="6421:69" pos:end="6421:69">)</operator></expr>)</condition><block type="pseudo" pos:start="6423:25" pos:end="6423:40"><block_content pos:start="6423:25" pos:end="6423:40">

                        <goto pos:start="6423:25" pos:end="6423:40">goto <name pos:start="6423:30" pos:end="6423:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="6425:21" pos:end="6427:51"><if pos:start="6425:21" pos:end="6427:51">if <condition pos:start="6425:24" pos:end="6425:50">(<expr pos:start="6425:25" pos:end="6425:49"><name pos:start="6425:25" pos:end="6425:32"><name pos:start="6425:25" pos:end="6425:25">s</name><operator pos:start="6425:26" pos:end="6425:27">-&gt;</operator><name pos:start="6425:28" pos:end="6425:32">cc_op</name></name> <operator pos:start="6425:34" pos:end="6425:35">!=</operator> <name pos:start="6425:37" pos:end="6425:49">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="6427:25" pos:end="6427:51"><block_content pos:start="6427:25" pos:end="6427:51">

                        <expr_stmt pos:start="6427:25" pos:end="6427:51"><expr pos:start="6427:25" pos:end="6427:50"><call pos:start="6427:25" pos:end="6427:50"><name pos:start="6427:25" pos:end="6427:40">gen_op_set_cc_op</name><argument_list pos:start="6427:41" pos:end="6427:50">(<argument pos:start="6427:42" pos:end="6427:49"><expr pos:start="6427:42" pos:end="6427:49"><name pos:start="6427:42" pos:end="6427:49"><name pos:start="6427:42" pos:end="6427:42">s</name><operator pos:start="6427:43" pos:end="6427:44">-&gt;</operator><name pos:start="6427:45" pos:end="6427:49">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="6429:21" pos:end="6429:54"><expr pos:start="6429:21" pos:end="6429:53"><call pos:start="6429:21" pos:end="6429:53"><name pos:start="6429:21" pos:end="6429:30">gen_jmp_im</name><argument_list pos:start="6429:31" pos:end="6429:53">(<argument pos:start="6429:32" pos:end="6429:52"><expr pos:start="6429:32" pos:end="6429:52"><name pos:start="6429:32" pos:end="6429:39">pc_start</name> <operator pos:start="6429:41" pos:end="6429:41">-</operator> <name pos:start="6429:43" pos:end="6429:52"><name pos:start="6429:43" pos:end="6429:43">s</name><operator pos:start="6429:44" pos:end="6429:45">-&gt;</operator><name pos:start="6429:46" pos:end="6429:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="6431:21" pos:end="6433:39"><if pos:start="6431:21" pos:end="6433:39">if <condition pos:start="6431:24" pos:end="6431:35">(<expr pos:start="6431:25" pos:end="6431:34"><name pos:start="6431:25" pos:end="6431:34">use_icount</name></expr>)</condition><block type="pseudo" pos:start="6433:25" pos:end="6433:39"><block_content pos:start="6433:25" pos:end="6433:39">

                        <expr_stmt pos:start="6433:25" pos:end="6433:39"><expr pos:start="6433:25" pos:end="6433:38"><call pos:start="6433:25" pos:end="6433:38"><name pos:start="6433:25" pos:end="6433:36">gen_io_start</name><argument_list pos:start="6433:37" pos:end="6433:38">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="6435:21" pos:end="6435:47"><expr pos:start="6435:21" pos:end="6435:46"><call pos:start="6435:21" pos:end="6435:46"><name pos:start="6435:21" pos:end="6435:37">gen_helper_rdtscp</name><argument_list pos:start="6435:38" pos:end="6435:46">(<argument pos:start="6435:39" pos:end="6435:45"><expr pos:start="6435:39" pos:end="6435:45"><name pos:start="6435:39" pos:end="6435:45">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="6437:21" pos:end="6443:21"><if pos:start="6437:21" pos:end="6443:21">if <condition pos:start="6437:24" pos:end="6437:35">(<expr pos:start="6437:25" pos:end="6437:34"><name pos:start="6437:25" pos:end="6437:34">use_icount</name></expr>)</condition> <block pos:start="6437:37" pos:end="6443:21">{<block_content pos:start="6439:25" pos:end="6441:55">

                        <expr_stmt pos:start="6439:25" pos:end="6439:37"><expr pos:start="6439:25" pos:end="6439:36"><call pos:start="6439:25" pos:end="6439:36"><name pos:start="6439:25" pos:end="6439:34">gen_io_end</name><argument_list pos:start="6439:35" pos:end="6439:36">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="6441:25" pos:end="6441:55"><expr pos:start="6441:25" pos:end="6441:54"><call pos:start="6441:25" pos:end="6441:54"><name pos:start="6441:25" pos:end="6441:31">gen_jmp</name><argument_list pos:start="6441:32" pos:end="6441:54">(<argument pos:start="6441:33" pos:end="6441:33"><expr pos:start="6441:33" pos:end="6441:33"><name pos:start="6441:33" pos:end="6441:33">s</name></expr></argument>, <argument pos:start="6441:36" pos:end="6441:53"><expr pos:start="6441:36" pos:end="6441:53"><name pos:start="6441:36" pos:end="6441:40"><name pos:start="6441:36" pos:end="6441:36">s</name><operator pos:start="6441:37" pos:end="6441:38">-&gt;</operator><name pos:start="6441:39" pos:end="6441:40">pc</name></name> <operator pos:start="6441:42" pos:end="6441:42">-</operator> <name pos:start="6441:44" pos:end="6441:53"><name pos:start="6441:44" pos:end="6441:44">s</name><operator pos:start="6441:45" pos:end="6441:46">-&gt;</operator><name pos:start="6441:47" pos:end="6441:53">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <break pos:start="6445:21" pos:end="6445:26">break;</break>

                <default pos:start="6447:17" pos:end="6447:24">default:</default>

                    <goto pos:start="6449:21" pos:end="6449:36">goto <name pos:start="6449:26" pos:end="6449:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

            <break pos:start="6455:13" pos:end="6455:18">break;</break>

        <default pos:start="6457:9" pos:end="6457:16">default:</default>

            <goto pos:start="6459:13" pos:end="6459:28">goto <name pos:start="6459:18" pos:end="6459:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="6463:9" pos:end="6463:14">break;</break>

    <case pos:start="6465:5" pos:end="6465:15">case <expr pos:start="6465:10" pos:end="6465:14"><literal type="number" pos:start="6465:10" pos:end="6465:14">0x108</literal></expr>:</case> <comment type="block" pos:start="6465:17" pos:end="6465:26">/* invd */</comment>

    <case pos:start="6467:5" pos:end="6467:15">case <expr pos:start="6467:10" pos:end="6467:14"><literal type="number" pos:start="6467:10" pos:end="6467:14">0x109</literal></expr>:</case> <comment type="block" pos:start="6467:17" pos:end="6467:28">/* wbinvd */</comment>

        <if_stmt pos:start="6469:9" pos:end="6479:9"><if pos:start="6469:9" pos:end="6473:9">if <condition pos:start="6469:12" pos:end="6469:24">(<expr pos:start="6469:13" pos:end="6469:23"><name pos:start="6469:13" pos:end="6469:18"><name pos:start="6469:13" pos:end="6469:13">s</name><operator pos:start="6469:14" pos:end="6469:15">-&gt;</operator><name pos:start="6469:16" pos:end="6469:18">cpl</name></name> <operator pos:start="6469:20" pos:end="6469:21">!=</operator> <literal type="number" pos:start="6469:23" pos:end="6469:23">0</literal></expr>)</condition> <block pos:start="6469:26" pos:end="6473:9">{<block_content pos:start="6471:13" pos:end="6471:64">

            <expr_stmt pos:start="6471:13" pos:end="6471:64"><expr pos:start="6471:13" pos:end="6471:63"><call pos:start="6471:13" pos:end="6471:63"><name pos:start="6471:13" pos:end="6471:25">gen_exception</name><argument_list pos:start="6471:26" pos:end="6471:63">(<argument pos:start="6471:27" pos:end="6471:27"><expr pos:start="6471:27" pos:end="6471:27"><name pos:start="6471:27" pos:end="6471:27">s</name></expr></argument>, <argument pos:start="6471:30" pos:end="6471:39"><expr pos:start="6471:30" pos:end="6471:39"><name pos:start="6471:30" pos:end="6471:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6471:42" pos:end="6471:62"><expr pos:start="6471:42" pos:end="6471:62"><name pos:start="6471:42" pos:end="6471:49">pc_start</name> <operator pos:start="6471:51" pos:end="6471:51">-</operator> <name pos:start="6471:53" pos:end="6471:62"><name pos:start="6471:53" pos:end="6471:53">s</name><operator pos:start="6471:54" pos:end="6471:55">-&gt;</operator><name pos:start="6471:56" pos:end="6471:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="6473:11" pos:end="6479:9">else <block pos:start="6473:16" pos:end="6479:9">{<block_content pos:start="6475:13" pos:end="6475:92">

            <expr_stmt pos:start="6475:13" pos:end="6475:92"><expr pos:start="6475:13" pos:end="6475:91"><call pos:start="6475:13" pos:end="6475:91"><name pos:start="6475:13" pos:end="6475:35">gen_svm_check_intercept</name><argument_list pos:start="6475:36" pos:end="6475:91">(<argument pos:start="6475:37" pos:end="6475:37"><expr pos:start="6475:37" pos:end="6475:37"><name pos:start="6475:37" pos:end="6475:37">s</name></expr></argument>, <argument pos:start="6475:40" pos:end="6475:47"><expr pos:start="6475:40" pos:end="6475:47"><name pos:start="6475:40" pos:end="6475:47">pc_start</name></expr></argument>, <argument pos:start="6475:50" pos:end="6475:90"><expr pos:start="6475:50" pos:end="6475:90"><ternary pos:start="6475:50" pos:end="6475:90"><condition pos:start="6475:50" pos:end="6475:58"><expr pos:start="6475:50" pos:end="6475:56"><operator pos:start="6475:50" pos:end="6475:50">(</operator><name pos:start="6475:51" pos:end="6475:51">b</name> <operator pos:start="6475:53" pos:end="6475:53">&amp;</operator> <literal type="number" pos:start="6475:55" pos:end="6475:55">2</literal><operator pos:start="6475:56" pos:end="6475:56">)</operator></expr> ?</condition><then pos:start="6475:60" pos:end="6475:72"> <expr pos:start="6475:60" pos:end="6475:72"><name pos:start="6475:60" pos:end="6475:72">SVM_EXIT_INVD</name></expr> </then><else pos:start="6475:74" pos:end="6475:90">: <expr pos:start="6475:76" pos:end="6475:90"><name pos:start="6475:76" pos:end="6475:90">SVM_EXIT_WBINVD</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="6477:13" pos:end="6477:31">/* nothing to do */</comment>

        </block_content>}</block></else></if_stmt>

        <break pos:start="6481:9" pos:end="6481:14">break;</break>

    <case pos:start="6483:5" pos:end="6486:0">case <expr pos:start="6483:10" pos:end="6483:13"><literal type="number" pos:start="6483:10" pos:end="6483:13">0x63</literal></expr>:</case> <comment type="block" pos:start="6483:16" pos:end="6483:44">/* arpl or movslS (x86_64) */</comment>

<cpp:ifdef pos:start="6485:1" pos:end="6485:20">#<cpp:directive pos:start="6485:2" pos:end="6485:6">ifdef</cpp:directive> <name pos:start="6485:8" pos:end="6485:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="6487:9" pos:end="6637:9"><if pos:start="6487:9" pos:end="6537:9">if <condition pos:start="6487:12" pos:end="6487:22">(<expr pos:start="6487:13" pos:end="6487:21"><call pos:start="6487:13" pos:end="6487:21"><name pos:start="6487:13" pos:end="6487:18">CODE64</name><argument_list pos:start="6487:19" pos:end="6487:21">(<argument pos:start="6487:20" pos:end="6487:20"><expr pos:start="6487:20" pos:end="6487:20"><name pos:start="6487:20" pos:end="6487:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="6487:24" pos:end="6537:9">{<block_content pos:start="6489:13" pos:end="6535:13">

            <decl_stmt pos:start="6489:13" pos:end="6489:21"><decl pos:start="6489:13" pos:end="6489:20"><type pos:start="6489:13" pos:end="6489:15"><name pos:start="6489:13" pos:end="6489:15">int</name></type> <name pos:start="6489:17" pos:end="6489:20">d_ot</name></decl>;</decl_stmt>

            <comment type="block" pos:start="6491:13" pos:end="6491:49">/* d_ot is the size of destination */</comment>

            <expr_stmt pos:start="6493:13" pos:end="6493:35"><expr pos:start="6493:13" pos:end="6493:34"><name pos:start="6493:13" pos:end="6493:16">d_ot</name> <operator pos:start="6493:18" pos:end="6493:18">=</operator> <name pos:start="6493:20" pos:end="6493:24">dflag</name> <operator pos:start="6493:26" pos:end="6493:26">+</operator> <name pos:start="6493:28" pos:end="6493:34">OT_WORD</name></expr>;</expr_stmt>



            <expr_stmt pos:start="6497:13" pos:end="6497:48"><expr pos:start="6497:13" pos:end="6497:47"><name pos:start="6497:13" pos:end="6497:17">modrm</name> <operator pos:start="6497:19" pos:end="6497:19">=</operator> <call pos:start="6497:21" pos:end="6497:47"><name pos:start="6497:21" pos:end="6497:33">cpu_ldub_code</name><argument_list pos:start="6497:34" pos:end="6497:47">(<argument pos:start="6497:35" pos:end="6497:37"><expr pos:start="6497:35" pos:end="6497:37"><name pos:start="6497:35" pos:end="6497:37">env</name></expr></argument>, <argument pos:start="6497:40" pos:end="6497:46"><expr pos:start="6497:40" pos:end="6497:46"><name pos:start="6497:40" pos:end="6497:44"><name pos:start="6497:40" pos:end="6497:40">s</name><operator pos:start="6497:41" pos:end="6497:42">-&gt;</operator><name pos:start="6497:43" pos:end="6497:44">pc</name></name><operator pos:start="6497:45" pos:end="6497:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6499:13" pos:end="6499:45"><expr pos:start="6499:13" pos:end="6499:44"><name pos:start="6499:13" pos:end="6499:15">reg</name> <operator pos:start="6499:17" pos:end="6499:17">=</operator> <operator pos:start="6499:19" pos:end="6499:19">(</operator><operator pos:start="6499:20" pos:end="6499:20">(</operator><name pos:start="6499:21" pos:end="6499:25">modrm</name> <operator pos:start="6499:27" pos:end="6499:28">&gt;&gt;</operator> <literal type="number" pos:start="6499:30" pos:end="6499:30">3</literal><operator pos:start="6499:31" pos:end="6499:31">)</operator> <operator pos:start="6499:33" pos:end="6499:33">&amp;</operator> <literal type="number" pos:start="6499:35" pos:end="6499:35">7</literal><operator pos:start="6499:36" pos:end="6499:36">)</operator> <operator pos:start="6499:38" pos:end="6499:38">|</operator> <name pos:start="6499:40" pos:end="6499:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="6501:13" pos:end="6501:35"><expr pos:start="6501:13" pos:end="6501:34"><name pos:start="6501:13" pos:end="6501:15">mod</name> <operator pos:start="6501:17" pos:end="6501:17">=</operator> <operator pos:start="6501:19" pos:end="6501:19">(</operator><name pos:start="6501:20" pos:end="6501:24">modrm</name> <operator pos:start="6501:26" pos:end="6501:27">&gt;&gt;</operator> <literal type="number" pos:start="6501:29" pos:end="6501:29">6</literal><operator pos:start="6501:30" pos:end="6501:30">)</operator> <operator pos:start="6501:32" pos:end="6501:32">&amp;</operator> <literal type="number" pos:start="6501:34" pos:end="6501:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="6503:13" pos:end="6503:40"><expr pos:start="6503:13" pos:end="6503:39"><name pos:start="6503:13" pos:end="6503:14">rm</name> <operator pos:start="6503:16" pos:end="6503:16">=</operator> <operator pos:start="6503:18" pos:end="6503:18">(</operator><name pos:start="6503:19" pos:end="6503:23">modrm</name> <operator pos:start="6503:25" pos:end="6503:25">&amp;</operator> <literal type="number" pos:start="6503:27" pos:end="6503:27">7</literal><operator pos:start="6503:28" pos:end="6503:28">)</operator> <operator pos:start="6503:30" pos:end="6503:30">|</operator> <call pos:start="6503:32" pos:end="6503:39"><name pos:start="6503:32" pos:end="6503:36">REX_B</name><argument_list pos:start="6503:37" pos:end="6503:39">(<argument pos:start="6503:38" pos:end="6503:38"><expr pos:start="6503:38" pos:end="6503:38"><name pos:start="6503:38" pos:end="6503:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="6507:13" pos:end="6535:13"><if pos:start="6507:13" pos:end="6519:13">if <condition pos:start="6507:16" pos:end="6507:25">(<expr pos:start="6507:17" pos:end="6507:24"><name pos:start="6507:17" pos:end="6507:19">mod</name> <operator pos:start="6507:21" pos:end="6507:22">==</operator> <literal type="number" pos:start="6507:24" pos:end="6507:24">3</literal></expr>)</condition> <block pos:start="6507:27" pos:end="6519:13">{<block_content pos:start="6509:17" pos:end="6517:45">

                <expr_stmt pos:start="6509:17" pos:end="6509:50"><expr pos:start="6509:17" pos:end="6509:49"><call pos:start="6509:17" pos:end="6509:49"><name pos:start="6509:17" pos:end="6509:33">gen_op_mov_TN_reg</name><argument_list pos:start="6509:34" pos:end="6509:49">(<argument pos:start="6509:35" pos:end="6509:41"><expr pos:start="6509:35" pos:end="6509:41"><name pos:start="6509:35" pos:end="6509:41">OT_LONG</name></expr></argument>, <argument pos:start="6509:44" pos:end="6509:44"><expr pos:start="6509:44" pos:end="6509:44"><literal type="number" pos:start="6509:44" pos:end="6509:44">0</literal></expr></argument>, <argument pos:start="6509:47" pos:end="6509:48"><expr pos:start="6509:47" pos:end="6509:48"><name pos:start="6509:47" pos:end="6509:48">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="6511:17" pos:end="6511:33">/* sign extend */</comment>

                <if_stmt pos:start="6513:17" pos:end="6515:58"><if pos:start="6513:17" pos:end="6515:58">if <condition pos:start="6513:20" pos:end="6513:36">(<expr pos:start="6513:21" pos:end="6513:35"><name pos:start="6513:21" pos:end="6513:24">d_ot</name> <operator pos:start="6513:26" pos:end="6513:27">==</operator> <name pos:start="6513:29" pos:end="6513:35">OT_QUAD</name></expr>)</condition><block type="pseudo" pos:start="6515:21" pos:end="6515:58"><block_content pos:start="6515:21" pos:end="6515:58">

                    <expr_stmt pos:start="6515:21" pos:end="6515:58"><expr pos:start="6515:21" pos:end="6515:57"><call pos:start="6515:21" pos:end="6515:57"><name pos:start="6515:21" pos:end="6515:37">tcg_gen_ext32s_tl</name><argument_list pos:start="6515:38" pos:end="6515:57">(<argument pos:start="6515:39" pos:end="6515:46"><expr pos:start="6515:39" pos:end="6515:46"><name pos:start="6515:39" pos:end="6515:46"><name pos:start="6515:39" pos:end="6515:43">cpu_T</name><index pos:start="6515:44" pos:end="6515:46">[<expr pos:start="6515:45" pos:end="6515:45"><literal type="number" pos:start="6515:45" pos:end="6515:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6515:49" pos:end="6515:56"><expr pos:start="6515:49" pos:end="6515:56"><name pos:start="6515:49" pos:end="6515:56"><name pos:start="6515:49" pos:end="6515:53">cpu_T</name><index pos:start="6515:54" pos:end="6515:56">[<expr pos:start="6515:55" pos:end="6515:55"><literal type="number" pos:start="6515:55" pos:end="6515:55">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="6517:17" pos:end="6517:45"><expr pos:start="6517:17" pos:end="6517:44"><call pos:start="6517:17" pos:end="6517:44"><name pos:start="6517:17" pos:end="6517:33">gen_op_mov_reg_T0</name><argument_list pos:start="6517:34" pos:end="6517:44">(<argument pos:start="6517:35" pos:end="6517:38"><expr pos:start="6517:35" pos:end="6517:38"><name pos:start="6517:35" pos:end="6517:38">d_ot</name></expr></argument>, <argument pos:start="6517:41" pos:end="6517:43"><expr pos:start="6517:41" pos:end="6517:43"><name pos:start="6517:41" pos:end="6517:43">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6519:15" pos:end="6535:13">else <block pos:start="6519:20" pos:end="6535:13">{<block_content pos:start="6521:17" pos:end="6533:45">

                <expr_stmt pos:start="6521:17" pos:end="6521:70"><expr pos:start="6521:17" pos:end="6521:69"><call pos:start="6521:17" pos:end="6521:69"><name pos:start="6521:17" pos:end="6521:29">gen_lea_modrm</name><argument_list pos:start="6521:30" pos:end="6521:69">(<argument pos:start="6521:31" pos:end="6521:33"><expr pos:start="6521:31" pos:end="6521:33"><name pos:start="6521:31" pos:end="6521:33">env</name></expr></argument>, <argument pos:start="6521:36" pos:end="6521:36"><expr pos:start="6521:36" pos:end="6521:36"><name pos:start="6521:36" pos:end="6521:36">s</name></expr></argument>, <argument pos:start="6521:39" pos:end="6521:43"><expr pos:start="6521:39" pos:end="6521:43"><name pos:start="6521:39" pos:end="6521:43">modrm</name></expr></argument>, <argument pos:start="6521:46" pos:end="6521:54"><expr pos:start="6521:46" pos:end="6521:54"><operator pos:start="6521:46" pos:end="6521:46">&amp;</operator><name pos:start="6521:47" pos:end="6521:54">reg_addr</name></expr></argument>, <argument pos:start="6521:57" pos:end="6521:68"><expr pos:start="6521:57" pos:end="6521:68"><operator pos:start="6521:57" pos:end="6521:57">&amp;</operator><name pos:start="6521:58" pos:end="6521:68">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="6523:17" pos:end="6531:17"><if pos:start="6523:17" pos:end="6527:17">if <condition pos:start="6523:20" pos:end="6523:36">(<expr pos:start="6523:21" pos:end="6523:35"><name pos:start="6523:21" pos:end="6523:24">d_ot</name> <operator pos:start="6523:26" pos:end="6523:27">==</operator> <name pos:start="6523:29" pos:end="6523:35">OT_QUAD</name></expr>)</condition> <block pos:start="6523:38" pos:end="6527:17">{<block_content pos:start="6525:21" pos:end="6525:61">

                    <expr_stmt pos:start="6525:21" pos:end="6525:61"><expr pos:start="6525:21" pos:end="6525:60"><call pos:start="6525:21" pos:end="6525:60"><name pos:start="6525:21" pos:end="6525:36">gen_op_lds_T0_A0</name><argument_list pos:start="6525:37" pos:end="6525:60">(<argument pos:start="6525:38" pos:end="6525:59"><expr pos:start="6525:38" pos:end="6525:59"><name pos:start="6525:38" pos:end="6525:44">OT_LONG</name> <operator pos:start="6525:46" pos:end="6525:46">+</operator> <name pos:start="6525:48" pos:end="6525:59"><name pos:start="6525:48" pos:end="6525:48">s</name><operator pos:start="6525:49" pos:end="6525:50">-&gt;</operator><name pos:start="6525:51" pos:end="6525:59">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6527:19" pos:end="6531:17">else <block pos:start="6527:24" pos:end="6531:17">{<block_content pos:start="6529:21" pos:end="6529:60">

                    <expr_stmt pos:start="6529:21" pos:end="6529:60"><expr pos:start="6529:21" pos:end="6529:59"><call pos:start="6529:21" pos:end="6529:59"><name pos:start="6529:21" pos:end="6529:35">gen_op_ld_T0_A0</name><argument_list pos:start="6529:36" pos:end="6529:59">(<argument pos:start="6529:37" pos:end="6529:58"><expr pos:start="6529:37" pos:end="6529:58"><name pos:start="6529:37" pos:end="6529:43">OT_LONG</name> <operator pos:start="6529:45" pos:end="6529:45">+</operator> <name pos:start="6529:47" pos:end="6529:58"><name pos:start="6529:47" pos:end="6529:47">s</name><operator pos:start="6529:48" pos:end="6529:49">-&gt;</operator><name pos:start="6529:50" pos:end="6529:58">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="6533:17" pos:end="6533:45"><expr pos:start="6533:17" pos:end="6533:44"><call pos:start="6533:17" pos:end="6533:44"><name pos:start="6533:17" pos:end="6533:33">gen_op_mov_reg_T0</name><argument_list pos:start="6533:34" pos:end="6533:44">(<argument pos:start="6533:35" pos:end="6533:38"><expr pos:start="6533:35" pos:end="6533:38"><name pos:start="6533:35" pos:end="6533:38">d_ot</name></expr></argument>, <argument pos:start="6533:41" pos:end="6533:43"><expr pos:start="6533:41" pos:end="6533:43"><name pos:start="6533:41" pos:end="6533:43">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="6537:11" pos:end="6637:9">else

<cpp:endif pos:start="6539:1" pos:end="6539:6">#<cpp:directive pos:start="6539:2" pos:end="6539:6">endif</cpp:directive></cpp:endif>

        <block pos:start="6541:9" pos:end="6637:9">{<block_content pos:start="6543:13" pos:end="6635:30">

            <decl_stmt pos:start="6543:13" pos:end="6543:23"><decl pos:start="6543:13" pos:end="6543:22"><type pos:start="6543:13" pos:end="6543:15"><name pos:start="6543:13" pos:end="6543:15">int</name></type> <name pos:start="6543:17" pos:end="6543:22">label1</name></decl>;</decl_stmt>

            <decl_stmt pos:start="6545:13" pos:end="6545:32"><decl pos:start="6545:13" pos:end="6545:19"><type pos:start="6545:13" pos:end="6545:16"><name pos:start="6545:13" pos:end="6545:16">TCGv</name></type> <name pos:start="6545:18" pos:end="6545:19">t0</name></decl>, <decl pos:start="6545:22" pos:end="6545:23"><type ref="prev" pos:start="6545:13" pos:end="6545:16"/><name pos:start="6545:22" pos:end="6545:23">t1</name></decl>, <decl pos:start="6545:26" pos:end="6545:27"><type ref="prev" pos:start="6545:13" pos:end="6545:16"/><name pos:start="6545:26" pos:end="6545:27">t2</name></decl>, <decl pos:start="6545:30" pos:end="6545:31"><type ref="prev" pos:start="6545:13" pos:end="6545:16"/><name pos:start="6545:30" pos:end="6545:31">a0</name></decl>;</decl_stmt>



            <if_stmt pos:start="6549:13" pos:end="6551:32"><if pos:start="6549:13" pos:end="6551:32">if <condition pos:start="6549:16" pos:end="6549:34">(<expr pos:start="6549:17" pos:end="6549:33"><operator pos:start="6549:17" pos:end="6549:17">!</operator><name pos:start="6549:18" pos:end="6549:22"><name pos:start="6549:18" pos:end="6549:18">s</name><operator pos:start="6549:19" pos:end="6549:20">-&gt;</operator><name pos:start="6549:21" pos:end="6549:22">pe</name></name> <operator pos:start="6549:24" pos:end="6549:25">||</operator> <name pos:start="6549:27" pos:end="6549:33"><name pos:start="6549:27" pos:end="6549:27">s</name><operator pos:start="6549:28" pos:end="6549:29">-&gt;</operator><name pos:start="6549:30" pos:end="6549:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="6551:17" pos:end="6551:32"><block_content pos:start="6551:17" pos:end="6551:32">

                <goto pos:start="6551:17" pos:end="6551:32">goto <name pos:start="6551:22" pos:end="6551:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6553:13" pos:end="6553:38"><expr pos:start="6553:13" pos:end="6553:37"><name pos:start="6553:13" pos:end="6553:14">t0</name> <operator pos:start="6553:16" pos:end="6553:16">=</operator> <call pos:start="6553:18" pos:end="6553:37"><name pos:start="6553:18" pos:end="6553:35">tcg_temp_local_new</name><argument_list pos:start="6553:36" pos:end="6553:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6555:13" pos:end="6555:38"><expr pos:start="6555:13" pos:end="6555:37"><name pos:start="6555:13" pos:end="6555:14">t1</name> <operator pos:start="6555:16" pos:end="6555:16">=</operator> <call pos:start="6555:18" pos:end="6555:37"><name pos:start="6555:18" pos:end="6555:35">tcg_temp_local_new</name><argument_list pos:start="6555:36" pos:end="6555:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6557:13" pos:end="6557:38"><expr pos:start="6557:13" pos:end="6557:37"><name pos:start="6557:13" pos:end="6557:14">t2</name> <operator pos:start="6557:16" pos:end="6557:16">=</operator> <call pos:start="6557:18" pos:end="6557:37"><name pos:start="6557:18" pos:end="6557:35">tcg_temp_local_new</name><argument_list pos:start="6557:36" pos:end="6557:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6559:13" pos:end="6559:25"><expr pos:start="6559:13" pos:end="6559:24"><name pos:start="6559:13" pos:end="6559:14">ot</name> <operator pos:start="6559:16" pos:end="6559:16">=</operator> <name pos:start="6559:18" pos:end="6559:24">OT_WORD</name></expr>;</expr_stmt>

            <expr_stmt pos:start="6561:13" pos:end="6561:48"><expr pos:start="6561:13" pos:end="6561:47"><name pos:start="6561:13" pos:end="6561:17">modrm</name> <operator pos:start="6561:19" pos:end="6561:19">=</operator> <call pos:start="6561:21" pos:end="6561:47"><name pos:start="6561:21" pos:end="6561:33">cpu_ldub_code</name><argument_list pos:start="6561:34" pos:end="6561:47">(<argument pos:start="6561:35" pos:end="6561:37"><expr pos:start="6561:35" pos:end="6561:37"><name pos:start="6561:35" pos:end="6561:37">env</name></expr></argument>, <argument pos:start="6561:40" pos:end="6561:46"><expr pos:start="6561:40" pos:end="6561:46"><name pos:start="6561:40" pos:end="6561:44"><name pos:start="6561:40" pos:end="6561:40">s</name><operator pos:start="6561:41" pos:end="6561:42">-&gt;</operator><name pos:start="6561:43" pos:end="6561:44">pc</name></name><operator pos:start="6561:45" pos:end="6561:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6563:13" pos:end="6563:35"><expr pos:start="6563:13" pos:end="6563:34"><name pos:start="6563:13" pos:end="6563:15">reg</name> <operator pos:start="6563:17" pos:end="6563:17">=</operator> <operator pos:start="6563:19" pos:end="6563:19">(</operator><name pos:start="6563:20" pos:end="6563:24">modrm</name> <operator pos:start="6563:26" pos:end="6563:27">&gt;&gt;</operator> <literal type="number" pos:start="6563:29" pos:end="6563:29">3</literal><operator pos:start="6563:30" pos:end="6563:30">)</operator> <operator pos:start="6563:32" pos:end="6563:32">&amp;</operator> <literal type="number" pos:start="6563:34" pos:end="6563:34">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="6565:13" pos:end="6565:35"><expr pos:start="6565:13" pos:end="6565:34"><name pos:start="6565:13" pos:end="6565:15">mod</name> <operator pos:start="6565:17" pos:end="6565:17">=</operator> <operator pos:start="6565:19" pos:end="6565:19">(</operator><name pos:start="6565:20" pos:end="6565:24">modrm</name> <operator pos:start="6565:26" pos:end="6565:27">&gt;&gt;</operator> <literal type="number" pos:start="6565:29" pos:end="6565:29">6</literal><operator pos:start="6565:30" pos:end="6565:30">)</operator> <operator pos:start="6565:32" pos:end="6565:32">&amp;</operator> <literal type="number" pos:start="6565:34" pos:end="6565:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="6567:13" pos:end="6567:27"><expr pos:start="6567:13" pos:end="6567:26"><name pos:start="6567:13" pos:end="6567:14">rm</name> <operator pos:start="6567:16" pos:end="6567:16">=</operator> <name pos:start="6567:18" pos:end="6567:22">modrm</name> <operator pos:start="6567:24" pos:end="6567:24">&amp;</operator> <literal type="number" pos:start="6567:26" pos:end="6567:26">7</literal></expr>;</expr_stmt>

            <if_stmt pos:start="6569:13" pos:end="6585:13"><if pos:start="6569:13" pos:end="6579:13">if <condition pos:start="6569:16" pos:end="6569:25">(<expr pos:start="6569:17" pos:end="6569:24"><name pos:start="6569:17" pos:end="6569:19">mod</name> <operator pos:start="6569:21" pos:end="6569:22">!=</operator> <literal type="number" pos:start="6569:24" pos:end="6569:24">3</literal></expr>)</condition> <block pos:start="6569:27" pos:end="6579:13">{<block_content pos:start="6571:17" pos:end="6577:43">

                <expr_stmt pos:start="6571:17" pos:end="6571:70"><expr pos:start="6571:17" pos:end="6571:69"><call pos:start="6571:17" pos:end="6571:69"><name pos:start="6571:17" pos:end="6571:29">gen_lea_modrm</name><argument_list pos:start="6571:30" pos:end="6571:69">(<argument pos:start="6571:31" pos:end="6571:33"><expr pos:start="6571:31" pos:end="6571:33"><name pos:start="6571:31" pos:end="6571:33">env</name></expr></argument>, <argument pos:start="6571:36" pos:end="6571:36"><expr pos:start="6571:36" pos:end="6571:36"><name pos:start="6571:36" pos:end="6571:36">s</name></expr></argument>, <argument pos:start="6571:39" pos:end="6571:43"><expr pos:start="6571:39" pos:end="6571:43"><name pos:start="6571:39" pos:end="6571:43">modrm</name></expr></argument>, <argument pos:start="6571:46" pos:end="6571:54"><expr pos:start="6571:46" pos:end="6571:54"><operator pos:start="6571:46" pos:end="6571:46">&amp;</operator><name pos:start="6571:47" pos:end="6571:54">reg_addr</name></expr></argument>, <argument pos:start="6571:57" pos:end="6571:68"><expr pos:start="6571:57" pos:end="6571:68"><operator pos:start="6571:57" pos:end="6571:57">&amp;</operator><name pos:start="6571:58" pos:end="6571:68">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6573:17" pos:end="6573:59"><expr pos:start="6573:17" pos:end="6573:58"><call pos:start="6573:17" pos:end="6573:58"><name pos:start="6573:17" pos:end="6573:27">gen_op_ld_v</name><argument_list pos:start="6573:28" pos:end="6573:58">(<argument pos:start="6573:29" pos:end="6573:45"><expr pos:start="6573:29" pos:end="6573:45"><name pos:start="6573:29" pos:end="6573:30">ot</name> <operator pos:start="6573:32" pos:end="6573:32">+</operator> <name pos:start="6573:34" pos:end="6573:45"><name pos:start="6573:34" pos:end="6573:34">s</name><operator pos:start="6573:35" pos:end="6573:36">-&gt;</operator><name pos:start="6573:37" pos:end="6573:45">mem_index</name></name></expr></argument>, <argument pos:start="6573:48" pos:end="6573:49"><expr pos:start="6573:48" pos:end="6573:49"><name pos:start="6573:48" pos:end="6573:49">t0</name></expr></argument>, <argument pos:start="6573:52" pos:end="6573:57"><expr pos:start="6573:52" pos:end="6573:57"><name pos:start="6573:52" pos:end="6573:57">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6575:17" pos:end="6575:42"><expr pos:start="6575:17" pos:end="6575:41"><name pos:start="6575:17" pos:end="6575:18">a0</name> <operator pos:start="6575:20" pos:end="6575:20">=</operator> <call pos:start="6575:22" pos:end="6575:41"><name pos:start="6575:22" pos:end="6575:39">tcg_temp_local_new</name><argument_list pos:start="6575:40" pos:end="6575:41">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6577:17" pos:end="6577:43"><expr pos:start="6577:17" pos:end="6577:42"><call pos:start="6577:17" pos:end="6577:42"><name pos:start="6577:17" pos:end="6577:30">tcg_gen_mov_tl</name><argument_list pos:start="6577:31" pos:end="6577:42">(<argument pos:start="6577:32" pos:end="6577:33"><expr pos:start="6577:32" pos:end="6577:33"><name pos:start="6577:32" pos:end="6577:33">a0</name></expr></argument>, <argument pos:start="6577:36" pos:end="6577:41"><expr pos:start="6577:36" pos:end="6577:41"><name pos:start="6577:36" pos:end="6577:41">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6579:15" pos:end="6585:13">else <block pos:start="6579:20" pos:end="6585:13">{<block_content pos:start="6581:17" pos:end="6583:32">

                <expr_stmt pos:start="6581:17" pos:end="6581:45"><expr pos:start="6581:17" pos:end="6581:44"><call pos:start="6581:17" pos:end="6581:44"><name pos:start="6581:17" pos:end="6581:32">gen_op_mov_v_reg</name><argument_list pos:start="6581:33" pos:end="6581:44">(<argument pos:start="6581:34" pos:end="6581:35"><expr pos:start="6581:34" pos:end="6581:35"><name pos:start="6581:34" pos:end="6581:35">ot</name></expr></argument>, <argument pos:start="6581:38" pos:end="6581:39"><expr pos:start="6581:38" pos:end="6581:39"><name pos:start="6581:38" pos:end="6581:39">t0</name></expr></argument>, <argument pos:start="6581:42" pos:end="6581:43"><expr pos:start="6581:42" pos:end="6581:43"><name pos:start="6581:42" pos:end="6581:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6583:17" pos:end="6583:32"><expr pos:start="6583:17" pos:end="6583:31"><call pos:start="6583:17" pos:end="6583:31"><name pos:start="6583:17" pos:end="6583:27">TCGV_UNUSED</name><argument_list pos:start="6583:28" pos:end="6583:31">(<argument pos:start="6583:29" pos:end="6583:30"><expr pos:start="6583:29" pos:end="6583:30"><name pos:start="6583:29" pos:end="6583:30">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6587:13" pos:end="6587:42"><expr pos:start="6587:13" pos:end="6587:41"><call pos:start="6587:13" pos:end="6587:41"><name pos:start="6587:13" pos:end="6587:28">gen_op_mov_v_reg</name><argument_list pos:start="6587:29" pos:end="6587:41">(<argument pos:start="6587:30" pos:end="6587:31"><expr pos:start="6587:30" pos:end="6587:31"><name pos:start="6587:30" pos:end="6587:31">ot</name></expr></argument>, <argument pos:start="6587:34" pos:end="6587:35"><expr pos:start="6587:34" pos:end="6587:35"><name pos:start="6587:34" pos:end="6587:35">t1</name></expr></argument>, <argument pos:start="6587:38" pos:end="6587:40"><expr pos:start="6587:38" pos:end="6587:40"><name pos:start="6587:38" pos:end="6587:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6589:13" pos:end="6589:45"><expr pos:start="6589:13" pos:end="6589:44"><call pos:start="6589:13" pos:end="6589:44"><name pos:start="6589:13" pos:end="6589:27">tcg_gen_andi_tl</name><argument_list pos:start="6589:28" pos:end="6589:44">(<argument pos:start="6589:29" pos:end="6589:36"><expr pos:start="6589:29" pos:end="6589:36"><name pos:start="6589:29" pos:end="6589:36">cpu_tmp0</name></expr></argument>, <argument pos:start="6589:39" pos:end="6589:40"><expr pos:start="6589:39" pos:end="6589:40"><name pos:start="6589:39" pos:end="6589:40">t0</name></expr></argument>, <argument pos:start="6589:43" pos:end="6589:43"><expr pos:start="6589:43" pos:end="6589:43"><literal type="number" pos:start="6589:43" pos:end="6589:43">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6591:13" pos:end="6591:39"><expr pos:start="6591:13" pos:end="6591:38"><call pos:start="6591:13" pos:end="6591:38"><name pos:start="6591:13" pos:end="6591:27">tcg_gen_andi_tl</name><argument_list pos:start="6591:28" pos:end="6591:38">(<argument pos:start="6591:29" pos:end="6591:30"><expr pos:start="6591:29" pos:end="6591:30"><name pos:start="6591:29" pos:end="6591:30">t1</name></expr></argument>, <argument pos:start="6591:33" pos:end="6591:34"><expr pos:start="6591:33" pos:end="6591:34"><name pos:start="6591:33" pos:end="6591:34">t1</name></expr></argument>, <argument pos:start="6591:37" pos:end="6591:37"><expr pos:start="6591:37" pos:end="6591:37"><literal type="number" pos:start="6591:37" pos:end="6591:37">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6593:13" pos:end="6593:35"><expr pos:start="6593:13" pos:end="6593:34"><call pos:start="6593:13" pos:end="6593:34"><name pos:start="6593:13" pos:end="6593:27">tcg_gen_movi_tl</name><argument_list pos:start="6593:28" pos:end="6593:34">(<argument pos:start="6593:29" pos:end="6593:30"><expr pos:start="6593:29" pos:end="6593:30"><name pos:start="6593:29" pos:end="6593:30">t2</name></expr></argument>, <argument pos:start="6593:33" pos:end="6593:33"><expr pos:start="6593:33" pos:end="6593:33"><literal type="number" pos:start="6593:33" pos:end="6593:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6595:13" pos:end="6595:37"><expr pos:start="6595:13" pos:end="6595:36"><name pos:start="6595:13" pos:end="6595:18">label1</name> <operator pos:start="6595:20" pos:end="6595:20">=</operator> <call pos:start="6595:22" pos:end="6595:36"><name pos:start="6595:22" pos:end="6595:34">gen_new_label</name><argument_list pos:start="6595:35" pos:end="6595:36">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6597:13" pos:end="6597:65"><expr pos:start="6597:13" pos:end="6597:64"><call pos:start="6597:13" pos:end="6597:64"><name pos:start="6597:13" pos:end="6597:29">tcg_gen_brcond_tl</name><argument_list pos:start="6597:30" pos:end="6597:64">(<argument pos:start="6597:31" pos:end="6597:41"><expr pos:start="6597:31" pos:end="6597:41"><name pos:start="6597:31" pos:end="6597:41">TCG_COND_GE</name></expr></argument>, <argument pos:start="6597:44" pos:end="6597:51"><expr pos:start="6597:44" pos:end="6597:51"><name pos:start="6597:44" pos:end="6597:51">cpu_tmp0</name></expr></argument>, <argument pos:start="6597:54" pos:end="6597:55"><expr pos:start="6597:54" pos:end="6597:55"><name pos:start="6597:54" pos:end="6597:55">t1</name></expr></argument>, <argument pos:start="6597:58" pos:end="6597:63"><expr pos:start="6597:58" pos:end="6597:63"><name pos:start="6597:58" pos:end="6597:63">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6599:13" pos:end="6599:40"><expr pos:start="6599:13" pos:end="6599:39"><call pos:start="6599:13" pos:end="6599:39"><name pos:start="6599:13" pos:end="6599:27">tcg_gen_andi_tl</name><argument_list pos:start="6599:28" pos:end="6599:39">(<argument pos:start="6599:29" pos:end="6599:30"><expr pos:start="6599:29" pos:end="6599:30"><name pos:start="6599:29" pos:end="6599:30">t0</name></expr></argument>, <argument pos:start="6599:33" pos:end="6599:34"><expr pos:start="6599:33" pos:end="6599:34"><name pos:start="6599:33" pos:end="6599:34">t0</name></expr></argument>, <argument pos:start="6599:37" pos:end="6599:38"><expr pos:start="6599:37" pos:end="6599:38"><operator pos:start="6599:37" pos:end="6599:37">~</operator><literal type="number" pos:start="6599:38" pos:end="6599:38">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6601:13" pos:end="6601:38"><expr pos:start="6601:13" pos:end="6601:37"><call pos:start="6601:13" pos:end="6601:37"><name pos:start="6601:13" pos:end="6601:25">tcg_gen_or_tl</name><argument_list pos:start="6601:26" pos:end="6601:37">(<argument pos:start="6601:27" pos:end="6601:28"><expr pos:start="6601:27" pos:end="6601:28"><name pos:start="6601:27" pos:end="6601:28">t0</name></expr></argument>, <argument pos:start="6601:31" pos:end="6601:32"><expr pos:start="6601:31" pos:end="6601:32"><name pos:start="6601:31" pos:end="6601:32">t0</name></expr></argument>, <argument pos:start="6601:35" pos:end="6601:36"><expr pos:start="6601:35" pos:end="6601:36"><name pos:start="6601:35" pos:end="6601:36">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6603:13" pos:end="6603:38"><expr pos:start="6603:13" pos:end="6603:37"><call pos:start="6603:13" pos:end="6603:37"><name pos:start="6603:13" pos:end="6603:27">tcg_gen_movi_tl</name><argument_list pos:start="6603:28" pos:end="6603:37">(<argument pos:start="6603:29" pos:end="6603:30"><expr pos:start="6603:29" pos:end="6603:30"><name pos:start="6603:29" pos:end="6603:30">t2</name></expr></argument>, <argument pos:start="6603:33" pos:end="6603:36"><expr pos:start="6603:33" pos:end="6603:36"><name pos:start="6603:33" pos:end="6603:36">CC_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6605:13" pos:end="6605:34"><expr pos:start="6605:13" pos:end="6605:33"><call pos:start="6605:13" pos:end="6605:33"><name pos:start="6605:13" pos:end="6605:25">gen_set_label</name><argument_list pos:start="6605:26" pos:end="6605:33">(<argument pos:start="6605:27" pos:end="6605:32"><expr pos:start="6605:27" pos:end="6605:32"><name pos:start="6605:27" pos:end="6605:32">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6607:13" pos:end="6617:13"><if pos:start="6607:13" pos:end="6613:12">if <condition pos:start="6607:16" pos:end="6607:25">(<expr pos:start="6607:17" pos:end="6607:24"><name pos:start="6607:17" pos:end="6607:19">mod</name> <operator pos:start="6607:21" pos:end="6607:22">!=</operator> <literal type="number" pos:start="6607:24" pos:end="6607:24">3</literal></expr>)</condition> <block pos:start="6607:27" pos:end="6613:12">{<block_content pos:start="6609:17" pos:end="6611:34">

                <expr_stmt pos:start="6609:17" pos:end="6609:55"><expr pos:start="6609:17" pos:end="6609:54"><call pos:start="6609:17" pos:end="6609:54"><name pos:start="6609:17" pos:end="6609:27">gen_op_st_v</name><argument_list pos:start="6609:28" pos:end="6609:54">(<argument pos:start="6609:29" pos:end="6609:45"><expr pos:start="6609:29" pos:end="6609:45"><name pos:start="6609:29" pos:end="6609:30">ot</name> <operator pos:start="6609:32" pos:end="6609:32">+</operator> <name pos:start="6609:34" pos:end="6609:45"><name pos:start="6609:34" pos:end="6609:34">s</name><operator pos:start="6609:35" pos:end="6609:36">-&gt;</operator><name pos:start="6609:37" pos:end="6609:45">mem_index</name></name></expr></argument>, <argument pos:start="6609:48" pos:end="6609:49"><expr pos:start="6609:48" pos:end="6609:49"><name pos:start="6609:48" pos:end="6609:49">t0</name></expr></argument>, <argument pos:start="6609:52" pos:end="6609:53"><expr pos:start="6609:52" pos:end="6609:53"><name pos:start="6609:52" pos:end="6609:53">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6611:17" pos:end="6611:34"><expr pos:start="6611:17" pos:end="6611:33"><call pos:start="6611:17" pos:end="6611:33"><name pos:start="6611:17" pos:end="6611:29">tcg_temp_free</name><argument_list pos:start="6611:30" pos:end="6611:33">(<argument pos:start="6611:31" pos:end="6611:32"><expr pos:start="6611:31" pos:end="6611:32"><name pos:start="6611:31" pos:end="6611:32">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           </block_content>}</block></if> <else pos:start="6613:14" pos:end="6617:13">else <block pos:start="6613:19" pos:end="6617:13">{<block_content pos:start="6615:17" pos:end="6615:45">

                <expr_stmt pos:start="6615:17" pos:end="6615:45"><expr pos:start="6615:17" pos:end="6615:44"><call pos:start="6615:17" pos:end="6615:44"><name pos:start="6615:17" pos:end="6615:32">gen_op_mov_reg_v</name><argument_list pos:start="6615:33" pos:end="6615:44">(<argument pos:start="6615:34" pos:end="6615:35"><expr pos:start="6615:34" pos:end="6615:35"><name pos:start="6615:34" pos:end="6615:35">ot</name></expr></argument>, <argument pos:start="6615:38" pos:end="6615:39"><expr pos:start="6615:38" pos:end="6615:39"><name pos:start="6615:38" pos:end="6615:39">rm</name></expr></argument>, <argument pos:start="6615:42" pos:end="6615:43"><expr pos:start="6615:42" pos:end="6615:43"><name pos:start="6615:42" pos:end="6615:43">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="6619:13" pos:end="6621:43"><if pos:start="6619:13" pos:end="6621:43">if <condition pos:start="6619:16" pos:end="6619:42">(<expr pos:start="6619:17" pos:end="6619:41"><name pos:start="6619:17" pos:end="6619:24"><name pos:start="6619:17" pos:end="6619:17">s</name><operator pos:start="6619:18" pos:end="6619:19">-&gt;</operator><name pos:start="6619:20" pos:end="6619:24">cc_op</name></name> <operator pos:start="6619:26" pos:end="6619:27">!=</operator> <name pos:start="6619:29" pos:end="6619:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="6621:17" pos:end="6621:43"><block_content pos:start="6621:17" pos:end="6621:43">

                <expr_stmt pos:start="6621:17" pos:end="6621:43"><expr pos:start="6621:17" pos:end="6621:42"><call pos:start="6621:17" pos:end="6621:42"><name pos:start="6621:17" pos:end="6621:32">gen_op_set_cc_op</name><argument_list pos:start="6621:33" pos:end="6621:42">(<argument pos:start="6621:34" pos:end="6621:41"><expr pos:start="6621:34" pos:end="6621:41"><name pos:start="6621:34" pos:end="6621:41"><name pos:start="6621:34" pos:end="6621:34">s</name><operator pos:start="6621:35" pos:end="6621:36">-&gt;</operator><name pos:start="6621:37" pos:end="6621:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6623:13" pos:end="6623:43"><expr pos:start="6623:13" pos:end="6623:42"><call pos:start="6623:13" pos:end="6623:42"><name pos:start="6623:13" pos:end="6623:30">gen_compute_eflags</name><argument_list pos:start="6623:31" pos:end="6623:42">(<argument pos:start="6623:32" pos:end="6623:41"><expr pos:start="6623:32" pos:end="6623:41"><name pos:start="6623:32" pos:end="6623:41">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6625:13" pos:end="6625:59"><expr pos:start="6625:13" pos:end="6625:58"><call pos:start="6625:13" pos:end="6625:58"><name pos:start="6625:13" pos:end="6625:27">tcg_gen_andi_tl</name><argument_list pos:start="6625:28" pos:end="6625:58">(<argument pos:start="6625:29" pos:end="6625:38"><expr pos:start="6625:29" pos:end="6625:38"><name pos:start="6625:29" pos:end="6625:38">cpu_cc_src</name></expr></argument>, <argument pos:start="6625:41" pos:end="6625:50"><expr pos:start="6625:41" pos:end="6625:50"><name pos:start="6625:41" pos:end="6625:50">cpu_cc_src</name></expr></argument>, <argument pos:start="6625:53" pos:end="6625:57"><expr pos:start="6625:53" pos:end="6625:57"><operator pos:start="6625:53" pos:end="6625:53">~</operator><name pos:start="6625:54" pos:end="6625:57">CC_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6627:13" pos:end="6627:54"><expr pos:start="6627:13" pos:end="6627:53"><call pos:start="6627:13" pos:end="6627:53"><name pos:start="6627:13" pos:end="6627:25">tcg_gen_or_tl</name><argument_list pos:start="6627:26" pos:end="6627:53">(<argument pos:start="6627:27" pos:end="6627:36"><expr pos:start="6627:27" pos:end="6627:36"><name pos:start="6627:27" pos:end="6627:36">cpu_cc_src</name></expr></argument>, <argument pos:start="6627:39" pos:end="6627:48"><expr pos:start="6627:39" pos:end="6627:48"><name pos:start="6627:39" pos:end="6627:48">cpu_cc_src</name></expr></argument>, <argument pos:start="6627:51" pos:end="6627:52"><expr pos:start="6627:51" pos:end="6627:52"><name pos:start="6627:51" pos:end="6627:52">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6629:13" pos:end="6629:36"><expr pos:start="6629:13" pos:end="6629:35"><name pos:start="6629:13" pos:end="6629:20"><name pos:start="6629:13" pos:end="6629:13">s</name><operator pos:start="6629:14" pos:end="6629:15">-&gt;</operator><name pos:start="6629:16" pos:end="6629:20">cc_op</name></name> <operator pos:start="6629:22" pos:end="6629:22">=</operator> <name pos:start="6629:24" pos:end="6629:35">CC_OP_EFLAGS</name></expr>;</expr_stmt>

            <expr_stmt pos:start="6631:13" pos:end="6631:30"><expr pos:start="6631:13" pos:end="6631:29"><call pos:start="6631:13" pos:end="6631:29"><name pos:start="6631:13" pos:end="6631:25">tcg_temp_free</name><argument_list pos:start="6631:26" pos:end="6631:29">(<argument pos:start="6631:27" pos:end="6631:28"><expr pos:start="6631:27" pos:end="6631:28"><name pos:start="6631:27" pos:end="6631:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6633:13" pos:end="6633:30"><expr pos:start="6633:13" pos:end="6633:29"><call pos:start="6633:13" pos:end="6633:29"><name pos:start="6633:13" pos:end="6633:25">tcg_temp_free</name><argument_list pos:start="6633:26" pos:end="6633:29">(<argument pos:start="6633:27" pos:end="6633:28"><expr pos:start="6633:27" pos:end="6633:28"><name pos:start="6633:27" pos:end="6633:28">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6635:13" pos:end="6635:30"><expr pos:start="6635:13" pos:end="6635:29"><call pos:start="6635:13" pos:end="6635:29"><name pos:start="6635:13" pos:end="6635:25">tcg_temp_free</name><argument_list pos:start="6635:26" pos:end="6635:29">(<argument pos:start="6635:27" pos:end="6635:28"><expr pos:start="6635:27" pos:end="6635:28"><name pos:start="6635:27" pos:end="6635:28">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="6639:9" pos:end="6639:14">break;</break>

    <case pos:start="6641:5" pos:end="6641:15">case <expr pos:start="6641:10" pos:end="6641:14"><literal type="number" pos:start="6641:10" pos:end="6641:14">0x102</literal></expr>:</case> <comment type="block" pos:start="6641:17" pos:end="6641:25">/* lar */</comment>

    <case pos:start="6643:5" pos:end="6643:15">case <expr pos:start="6643:10" pos:end="6643:14"><literal type="number" pos:start="6643:10" pos:end="6643:14">0x103</literal></expr>:</case> <comment type="block" pos:start="6643:17" pos:end="6643:25">/* lsl */</comment>

        <block pos:start="6645:9" pos:end="6693:9">{<block_content pos:start="6647:13" pos:end="6691:30">

            <decl_stmt pos:start="6647:13" pos:end="6647:23"><decl pos:start="6647:13" pos:end="6647:22"><type pos:start="6647:13" pos:end="6647:15"><name pos:start="6647:13" pos:end="6647:15">int</name></type> <name pos:start="6647:17" pos:end="6647:22">label1</name></decl>;</decl_stmt>

            <decl_stmt pos:start="6649:13" pos:end="6649:20"><decl pos:start="6649:13" pos:end="6649:19"><type pos:start="6649:13" pos:end="6649:16"><name pos:start="6649:13" pos:end="6649:16">TCGv</name></type> <name pos:start="6649:18" pos:end="6649:19">t0</name></decl>;</decl_stmt>

            <if_stmt pos:start="6651:13" pos:end="6653:32"><if pos:start="6651:13" pos:end="6653:32">if <condition pos:start="6651:16" pos:end="6651:34">(<expr pos:start="6651:17" pos:end="6651:33"><operator pos:start="6651:17" pos:end="6651:17">!</operator><name pos:start="6651:18" pos:end="6651:22"><name pos:start="6651:18" pos:end="6651:18">s</name><operator pos:start="6651:19" pos:end="6651:20">-&gt;</operator><name pos:start="6651:21" pos:end="6651:22">pe</name></name> <operator pos:start="6651:24" pos:end="6651:25">||</operator> <name pos:start="6651:27" pos:end="6651:33"><name pos:start="6651:27" pos:end="6651:27">s</name><operator pos:start="6651:28" pos:end="6651:29">-&gt;</operator><name pos:start="6651:30" pos:end="6651:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="6653:17" pos:end="6653:32"><block_content pos:start="6653:17" pos:end="6653:32">

                <goto pos:start="6653:17" pos:end="6653:32">goto <name pos:start="6653:22" pos:end="6653:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6655:13" pos:end="6655:43"><expr pos:start="6655:13" pos:end="6655:42"><name pos:start="6655:13" pos:end="6655:14">ot</name> <operator pos:start="6655:16" pos:end="6655:16">=</operator> <ternary pos:start="6655:18" pos:end="6655:42"><condition pos:start="6655:18" pos:end="6655:24"><expr pos:start="6655:18" pos:end="6655:22"><name pos:start="6655:18" pos:end="6655:22">dflag</name></expr> ?</condition><then pos:start="6655:26" pos:end="6655:32"> <expr pos:start="6655:26" pos:end="6655:32"><name pos:start="6655:26" pos:end="6655:32">OT_LONG</name></expr> </then><else pos:start="6655:34" pos:end="6655:42">: <expr pos:start="6655:36" pos:end="6655:42"><name pos:start="6655:36" pos:end="6655:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="6657:13" pos:end="6657:48"><expr pos:start="6657:13" pos:end="6657:47"><name pos:start="6657:13" pos:end="6657:17">modrm</name> <operator pos:start="6657:19" pos:end="6657:19">=</operator> <call pos:start="6657:21" pos:end="6657:47"><name pos:start="6657:21" pos:end="6657:33">cpu_ldub_code</name><argument_list pos:start="6657:34" pos:end="6657:47">(<argument pos:start="6657:35" pos:end="6657:37"><expr pos:start="6657:35" pos:end="6657:37"><name pos:start="6657:35" pos:end="6657:37">env</name></expr></argument>, <argument pos:start="6657:40" pos:end="6657:46"><expr pos:start="6657:40" pos:end="6657:46"><name pos:start="6657:40" pos:end="6657:44"><name pos:start="6657:40" pos:end="6657:40">s</name><operator pos:start="6657:41" pos:end="6657:42">-&gt;</operator><name pos:start="6657:43" pos:end="6657:44">pc</name></name><operator pos:start="6657:45" pos:end="6657:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6659:13" pos:end="6659:45"><expr pos:start="6659:13" pos:end="6659:44"><name pos:start="6659:13" pos:end="6659:15">reg</name> <operator pos:start="6659:17" pos:end="6659:17">=</operator> <operator pos:start="6659:19" pos:end="6659:19">(</operator><operator pos:start="6659:20" pos:end="6659:20">(</operator><name pos:start="6659:21" pos:end="6659:25">modrm</name> <operator pos:start="6659:27" pos:end="6659:28">&gt;&gt;</operator> <literal type="number" pos:start="6659:30" pos:end="6659:30">3</literal><operator pos:start="6659:31" pos:end="6659:31">)</operator> <operator pos:start="6659:33" pos:end="6659:33">&amp;</operator> <literal type="number" pos:start="6659:35" pos:end="6659:35">7</literal><operator pos:start="6659:36" pos:end="6659:36">)</operator> <operator pos:start="6659:38" pos:end="6659:38">|</operator> <name pos:start="6659:40" pos:end="6659:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="6661:13" pos:end="6661:63"><expr pos:start="6661:13" pos:end="6661:62"><call pos:start="6661:13" pos:end="6661:62"><name pos:start="6661:13" pos:end="6661:26">gen_ldst_modrm</name><argument_list pos:start="6661:27" pos:end="6661:62">(<argument pos:start="6661:28" pos:end="6661:30"><expr pos:start="6661:28" pos:end="6661:30"><name pos:start="6661:28" pos:end="6661:30">env</name></expr></argument>, <argument pos:start="6661:33" pos:end="6661:33"><expr pos:start="6661:33" pos:end="6661:33"><name pos:start="6661:33" pos:end="6661:33">s</name></expr></argument>, <argument pos:start="6661:36" pos:end="6661:40"><expr pos:start="6661:36" pos:end="6661:40"><name pos:start="6661:36" pos:end="6661:40">modrm</name></expr></argument>, <argument pos:start="6661:43" pos:end="6661:49"><expr pos:start="6661:43" pos:end="6661:49"><name pos:start="6661:43" pos:end="6661:49">OT_WORD</name></expr></argument>, <argument pos:start="6661:52" pos:end="6661:58"><expr pos:start="6661:52" pos:end="6661:58"><name pos:start="6661:52" pos:end="6661:58">OR_TMP0</name></expr></argument>, <argument pos:start="6661:61" pos:end="6661:61"><expr pos:start="6661:61" pos:end="6661:61"><literal type="number" pos:start="6661:61" pos:end="6661:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6663:13" pos:end="6663:38"><expr pos:start="6663:13" pos:end="6663:37"><name pos:start="6663:13" pos:end="6663:14">t0</name> <operator pos:start="6663:16" pos:end="6663:16">=</operator> <call pos:start="6663:18" pos:end="6663:37"><name pos:start="6663:18" pos:end="6663:35">tcg_temp_local_new</name><argument_list pos:start="6663:36" pos:end="6663:37">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6665:13" pos:end="6667:43"><if pos:start="6665:13" pos:end="6667:43">if <condition pos:start="6665:16" pos:end="6665:42">(<expr pos:start="6665:17" pos:end="6665:41"><name pos:start="6665:17" pos:end="6665:24"><name pos:start="6665:17" pos:end="6665:17">s</name><operator pos:start="6665:18" pos:end="6665:19">-&gt;</operator><name pos:start="6665:20" pos:end="6665:24">cc_op</name></name> <operator pos:start="6665:26" pos:end="6665:27">!=</operator> <name pos:start="6665:29" pos:end="6665:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="6667:17" pos:end="6667:43"><block_content pos:start="6667:17" pos:end="6667:43">

                <expr_stmt pos:start="6667:17" pos:end="6667:43"><expr pos:start="6667:17" pos:end="6667:42"><call pos:start="6667:17" pos:end="6667:42"><name pos:start="6667:17" pos:end="6667:32">gen_op_set_cc_op</name><argument_list pos:start="6667:33" pos:end="6667:42">(<argument pos:start="6667:34" pos:end="6667:41"><expr pos:start="6667:34" pos:end="6667:41"><name pos:start="6667:34" pos:end="6667:41"><name pos:start="6667:34" pos:end="6667:34">s</name><operator pos:start="6667:35" pos:end="6667:36">-&gt;</operator><name pos:start="6667:37" pos:end="6667:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="6669:13" pos:end="6677:13"><if pos:start="6669:13" pos:end="6673:13">if <condition pos:start="6669:16" pos:end="6669:27">(<expr pos:start="6669:17" pos:end="6669:26"><name pos:start="6669:17" pos:end="6669:17">b</name> <operator pos:start="6669:19" pos:end="6669:20">==</operator> <literal type="number" pos:start="6669:22" pos:end="6669:26">0x102</literal></expr>)</condition> <block pos:start="6669:29" pos:end="6673:13">{<block_content pos:start="6671:17" pos:end="6671:54">

                <expr_stmt pos:start="6671:17" pos:end="6671:54"><expr pos:start="6671:17" pos:end="6671:53"><call pos:start="6671:17" pos:end="6671:53"><name pos:start="6671:17" pos:end="6671:30">gen_helper_lar</name><argument_list pos:start="6671:31" pos:end="6671:53">(<argument pos:start="6671:32" pos:end="6671:33"><expr pos:start="6671:32" pos:end="6671:33"><name pos:start="6671:32" pos:end="6671:33">t0</name></expr></argument>, <argument pos:start="6671:36" pos:end="6671:42"><expr pos:start="6671:36" pos:end="6671:42"><name pos:start="6671:36" pos:end="6671:42">cpu_env</name></expr></argument>, <argument pos:start="6671:45" pos:end="6671:52"><expr pos:start="6671:45" pos:end="6671:52"><name pos:start="6671:45" pos:end="6671:52"><name pos:start="6671:45" pos:end="6671:49">cpu_T</name><index pos:start="6671:50" pos:end="6671:52">[<expr pos:start="6671:51" pos:end="6671:51"><literal type="number" pos:start="6671:51" pos:end="6671:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6673:15" pos:end="6677:13">else <block pos:start="6673:20" pos:end="6677:13">{<block_content pos:start="6675:17" pos:end="6675:54">

                <expr_stmt pos:start="6675:17" pos:end="6675:54"><expr pos:start="6675:17" pos:end="6675:53"><call pos:start="6675:17" pos:end="6675:53"><name pos:start="6675:17" pos:end="6675:30">gen_helper_lsl</name><argument_list pos:start="6675:31" pos:end="6675:53">(<argument pos:start="6675:32" pos:end="6675:33"><expr pos:start="6675:32" pos:end="6675:33"><name pos:start="6675:32" pos:end="6675:33">t0</name></expr></argument>, <argument pos:start="6675:36" pos:end="6675:42"><expr pos:start="6675:36" pos:end="6675:42"><name pos:start="6675:36" pos:end="6675:42">cpu_env</name></expr></argument>, <argument pos:start="6675:45" pos:end="6675:52"><expr pos:start="6675:45" pos:end="6675:52"><name pos:start="6675:45" pos:end="6675:52"><name pos:start="6675:45" pos:end="6675:49">cpu_T</name><index pos:start="6675:50" pos:end="6675:52">[<expr pos:start="6675:51" pos:end="6675:51"><literal type="number" pos:start="6675:51" pos:end="6675:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6679:13" pos:end="6679:56"><expr pos:start="6679:13" pos:end="6679:55"><call pos:start="6679:13" pos:end="6679:55"><name pos:start="6679:13" pos:end="6679:27">tcg_gen_andi_tl</name><argument_list pos:start="6679:28" pos:end="6679:55">(<argument pos:start="6679:29" pos:end="6679:36"><expr pos:start="6679:29" pos:end="6679:36"><name pos:start="6679:29" pos:end="6679:36">cpu_tmp0</name></expr></argument>, <argument pos:start="6679:39" pos:end="6679:48"><expr pos:start="6679:39" pos:end="6679:48"><name pos:start="6679:39" pos:end="6679:48">cpu_cc_src</name></expr></argument>, <argument pos:start="6679:51" pos:end="6679:54"><expr pos:start="6679:51" pos:end="6679:54"><name pos:start="6679:51" pos:end="6679:54">CC_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6681:13" pos:end="6681:37"><expr pos:start="6681:13" pos:end="6681:36"><name pos:start="6681:13" pos:end="6681:18">label1</name> <operator pos:start="6681:20" pos:end="6681:20">=</operator> <call pos:start="6681:22" pos:end="6681:36"><name pos:start="6681:22" pos:end="6681:34">gen_new_label</name><argument_list pos:start="6681:35" pos:end="6681:36">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6683:13" pos:end="6683:65"><expr pos:start="6683:13" pos:end="6683:64"><call pos:start="6683:13" pos:end="6683:64"><name pos:start="6683:13" pos:end="6683:30">tcg_gen_brcondi_tl</name><argument_list pos:start="6683:31" pos:end="6683:64">(<argument pos:start="6683:32" pos:end="6683:42"><expr pos:start="6683:32" pos:end="6683:42"><name pos:start="6683:32" pos:end="6683:42">TCG_COND_EQ</name></expr></argument>, <argument pos:start="6683:45" pos:end="6683:52"><expr pos:start="6683:45" pos:end="6683:52"><name pos:start="6683:45" pos:end="6683:52">cpu_tmp0</name></expr></argument>, <argument pos:start="6683:55" pos:end="6683:55"><expr pos:start="6683:55" pos:end="6683:55"><literal type="number" pos:start="6683:55" pos:end="6683:55">0</literal></expr></argument>, <argument pos:start="6683:58" pos:end="6683:63"><expr pos:start="6683:58" pos:end="6683:63"><name pos:start="6683:58" pos:end="6683:63">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6685:13" pos:end="6685:42"><expr pos:start="6685:13" pos:end="6685:41"><call pos:start="6685:13" pos:end="6685:41"><name pos:start="6685:13" pos:end="6685:28">gen_op_mov_reg_v</name><argument_list pos:start="6685:29" pos:end="6685:41">(<argument pos:start="6685:30" pos:end="6685:31"><expr pos:start="6685:30" pos:end="6685:31"><name pos:start="6685:30" pos:end="6685:31">ot</name></expr></argument>, <argument pos:start="6685:34" pos:end="6685:36"><expr pos:start="6685:34" pos:end="6685:36"><name pos:start="6685:34" pos:end="6685:36">reg</name></expr></argument>, <argument pos:start="6685:39" pos:end="6685:40"><expr pos:start="6685:39" pos:end="6685:40"><name pos:start="6685:39" pos:end="6685:40">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6687:13" pos:end="6687:34"><expr pos:start="6687:13" pos:end="6687:33"><call pos:start="6687:13" pos:end="6687:33"><name pos:start="6687:13" pos:end="6687:25">gen_set_label</name><argument_list pos:start="6687:26" pos:end="6687:33">(<argument pos:start="6687:27" pos:end="6687:32"><expr pos:start="6687:27" pos:end="6687:32"><name pos:start="6687:27" pos:end="6687:32">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6689:13" pos:end="6689:36"><expr pos:start="6689:13" pos:end="6689:35"><name pos:start="6689:13" pos:end="6689:20"><name pos:start="6689:13" pos:end="6689:13">s</name><operator pos:start="6689:14" pos:end="6689:15">-&gt;</operator><name pos:start="6689:16" pos:end="6689:20">cc_op</name></name> <operator pos:start="6689:22" pos:end="6689:22">=</operator> <name pos:start="6689:24" pos:end="6689:35">CC_OP_EFLAGS</name></expr>;</expr_stmt>

            <expr_stmt pos:start="6691:13" pos:end="6691:30"><expr pos:start="6691:13" pos:end="6691:29"><call pos:start="6691:13" pos:end="6691:29"><name pos:start="6691:13" pos:end="6691:25">tcg_temp_free</name><argument_list pos:start="6691:26" pos:end="6691:29">(<argument pos:start="6691:27" pos:end="6691:28"><expr pos:start="6691:27" pos:end="6691:28"><name pos:start="6691:27" pos:end="6691:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="6695:9" pos:end="6695:14">break;</break>

    <case pos:start="6697:5" pos:end="6697:15">case <expr pos:start="6697:10" pos:end="6697:14"><literal type="number" pos:start="6697:10" pos:end="6697:14">0x118</literal></expr>:</case>

        <expr_stmt pos:start="6699:9" pos:end="6699:44"><expr pos:start="6699:9" pos:end="6699:43"><name pos:start="6699:9" pos:end="6699:13">modrm</name> <operator pos:start="6699:15" pos:end="6699:15">=</operator> <call pos:start="6699:17" pos:end="6699:43"><name pos:start="6699:17" pos:end="6699:29">cpu_ldub_code</name><argument_list pos:start="6699:30" pos:end="6699:43">(<argument pos:start="6699:31" pos:end="6699:33"><expr pos:start="6699:31" pos:end="6699:33"><name pos:start="6699:31" pos:end="6699:33">env</name></expr></argument>, <argument pos:start="6699:36" pos:end="6699:42"><expr pos:start="6699:36" pos:end="6699:42"><name pos:start="6699:36" pos:end="6699:40"><name pos:start="6699:36" pos:end="6699:36">s</name><operator pos:start="6699:37" pos:end="6699:38">-&gt;</operator><name pos:start="6699:39" pos:end="6699:40">pc</name></name><operator pos:start="6699:41" pos:end="6699:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6701:9" pos:end="6701:31"><expr pos:start="6701:9" pos:end="6701:30"><name pos:start="6701:9" pos:end="6701:11">mod</name> <operator pos:start="6701:13" pos:end="6701:13">=</operator> <operator pos:start="6701:15" pos:end="6701:15">(</operator><name pos:start="6701:16" pos:end="6701:20">modrm</name> <operator pos:start="6701:22" pos:end="6701:23">&gt;&gt;</operator> <literal type="number" pos:start="6701:25" pos:end="6701:25">6</literal><operator pos:start="6701:26" pos:end="6701:26">)</operator> <operator pos:start="6701:28" pos:end="6701:28">&amp;</operator> <literal type="number" pos:start="6701:30" pos:end="6701:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="6703:9" pos:end="6703:30"><expr pos:start="6703:9" pos:end="6703:29"><name pos:start="6703:9" pos:end="6703:10">op</name> <operator pos:start="6703:12" pos:end="6703:12">=</operator> <operator pos:start="6703:14" pos:end="6703:14">(</operator><name pos:start="6703:15" pos:end="6703:19">modrm</name> <operator pos:start="6703:21" pos:end="6703:22">&gt;&gt;</operator> <literal type="number" pos:start="6703:24" pos:end="6703:24">3</literal><operator pos:start="6703:25" pos:end="6703:25">)</operator> <operator pos:start="6703:27" pos:end="6703:27">&amp;</operator> <literal type="number" pos:start="6703:29" pos:end="6703:29">7</literal></expr>;</expr_stmt>

        <switch pos:start="6705:9" pos:end="6731:9">switch<condition pos:start="6705:15" pos:end="6705:18">(<expr pos:start="6705:16" pos:end="6705:17"><name pos:start="6705:16" pos:end="6705:17">op</name></expr>)</condition> <block pos:start="6705:20" pos:end="6731:9">{<block_content pos:start="6707:9" pos:end="6729:18">

        <case pos:start="6707:9" pos:end="6707:15">case <expr pos:start="6707:14" pos:end="6707:14"><literal type="number" pos:start="6707:14" pos:end="6707:14">0</literal></expr>:</case> <comment type="block" pos:start="6707:17" pos:end="6707:33">/* prefetchnta */</comment>

        <case pos:start="6709:9" pos:end="6709:15">case <expr pos:start="6709:14" pos:end="6709:14"><literal type="number" pos:start="6709:14" pos:end="6709:14">1</literal></expr>:</case> <comment type="block" pos:start="6709:17" pos:end="6709:33">/* prefetchnt0 */</comment>

        <case pos:start="6711:9" pos:end="6711:15">case <expr pos:start="6711:14" pos:end="6711:14"><literal type="number" pos:start="6711:14" pos:end="6711:14">2</literal></expr>:</case> <comment type="block" pos:start="6711:17" pos:end="6711:33">/* prefetchnt0 */</comment>

        <case pos:start="6713:9" pos:end="6713:15">case <expr pos:start="6713:14" pos:end="6713:14"><literal type="number" pos:start="6713:14" pos:end="6713:14">3</literal></expr>:</case> <comment type="block" pos:start="6713:17" pos:end="6713:33">/* prefetchnt0 */</comment>

            <if_stmt pos:start="6715:13" pos:end="6717:32"><if pos:start="6715:13" pos:end="6717:32">if <condition pos:start="6715:16" pos:end="6715:25">(<expr pos:start="6715:17" pos:end="6715:24"><name pos:start="6715:17" pos:end="6715:19">mod</name> <operator pos:start="6715:21" pos:end="6715:22">==</operator> <literal type="number" pos:start="6715:24" pos:end="6715:24">3</literal></expr>)</condition><block type="pseudo" pos:start="6717:17" pos:end="6717:32"><block_content pos:start="6717:17" pos:end="6717:32">

                <goto pos:start="6717:17" pos:end="6717:32">goto <name pos:start="6717:22" pos:end="6717:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6719:13" pos:end="6719:66"><expr pos:start="6719:13" pos:end="6719:65"><call pos:start="6719:13" pos:end="6719:65"><name pos:start="6719:13" pos:end="6719:25">gen_lea_modrm</name><argument_list pos:start="6719:26" pos:end="6719:65">(<argument pos:start="6719:27" pos:end="6719:29"><expr pos:start="6719:27" pos:end="6719:29"><name pos:start="6719:27" pos:end="6719:29">env</name></expr></argument>, <argument pos:start="6719:32" pos:end="6719:32"><expr pos:start="6719:32" pos:end="6719:32"><name pos:start="6719:32" pos:end="6719:32">s</name></expr></argument>, <argument pos:start="6719:35" pos:end="6719:39"><expr pos:start="6719:35" pos:end="6719:39"><name pos:start="6719:35" pos:end="6719:39">modrm</name></expr></argument>, <argument pos:start="6719:42" pos:end="6719:50"><expr pos:start="6719:42" pos:end="6719:50"><operator pos:start="6719:42" pos:end="6719:42">&amp;</operator><name pos:start="6719:43" pos:end="6719:50">reg_addr</name></expr></argument>, <argument pos:start="6719:53" pos:end="6719:64"><expr pos:start="6719:53" pos:end="6719:64"><operator pos:start="6719:53" pos:end="6719:53">&amp;</operator><name pos:start="6719:54" pos:end="6719:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="6721:13" pos:end="6721:36">/* nothing more to do */</comment>

            <break pos:start="6723:13" pos:end="6723:18">break;</break>

        <default pos:start="6725:9" pos:end="6725:16">default:</default> <comment type="block" pos:start="6725:18" pos:end="6725:39">/* nop (multi byte) */</comment>

            <expr_stmt pos:start="6727:13" pos:end="6727:41"><expr pos:start="6727:13" pos:end="6727:40"><call pos:start="6727:13" pos:end="6727:40"><name pos:start="6727:13" pos:end="6727:25">gen_nop_modrm</name><argument_list pos:start="6727:26" pos:end="6727:40">(<argument pos:start="6727:27" pos:end="6727:29"><expr pos:start="6727:27" pos:end="6727:29"><name pos:start="6727:27" pos:end="6727:29">env</name></expr></argument>, <argument pos:start="6727:32" pos:end="6727:32"><expr pos:start="6727:32" pos:end="6727:32"><name pos:start="6727:32" pos:end="6727:32">s</name></expr></argument>, <argument pos:start="6727:35" pos:end="6727:39"><expr pos:start="6727:35" pos:end="6727:39"><name pos:start="6727:35" pos:end="6727:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="6729:13" pos:end="6729:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="6733:9" pos:end="6733:14">break;</break>

    <case pos:start="6735:5" pos:end="6735:25">case <expr pos:start="6735:10" pos:end="6735:24"><literal type="number" pos:start="6735:10" pos:end="6735:14">0x119</literal> <operator pos:start="6735:16" pos:end="6735:18">...</operator> <literal type="number" pos:start="6735:20" pos:end="6735:24">0x11f</literal></expr>:</case> <comment type="block" pos:start="6735:27" pos:end="6735:48">/* nop (multi byte) */</comment>

        <expr_stmt pos:start="6737:9" pos:end="6737:44"><expr pos:start="6737:9" pos:end="6737:43"><name pos:start="6737:9" pos:end="6737:13">modrm</name> <operator pos:start="6737:15" pos:end="6737:15">=</operator> <call pos:start="6737:17" pos:end="6737:43"><name pos:start="6737:17" pos:end="6737:29">cpu_ldub_code</name><argument_list pos:start="6737:30" pos:end="6737:43">(<argument pos:start="6737:31" pos:end="6737:33"><expr pos:start="6737:31" pos:end="6737:33"><name pos:start="6737:31" pos:end="6737:33">env</name></expr></argument>, <argument pos:start="6737:36" pos:end="6737:42"><expr pos:start="6737:36" pos:end="6737:42"><name pos:start="6737:36" pos:end="6737:40"><name pos:start="6737:36" pos:end="6737:36">s</name><operator pos:start="6737:37" pos:end="6737:38">-&gt;</operator><name pos:start="6737:39" pos:end="6737:40">pc</name></name><operator pos:start="6737:41" pos:end="6737:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6739:9" pos:end="6739:37"><expr pos:start="6739:9" pos:end="6739:36"><call pos:start="6739:9" pos:end="6739:36"><name pos:start="6739:9" pos:end="6739:21">gen_nop_modrm</name><argument_list pos:start="6739:22" pos:end="6739:36">(<argument pos:start="6739:23" pos:end="6739:25"><expr pos:start="6739:23" pos:end="6739:25"><name pos:start="6739:23" pos:end="6739:25">env</name></expr></argument>, <argument pos:start="6739:28" pos:end="6739:28"><expr pos:start="6739:28" pos:end="6739:28"><name pos:start="6739:28" pos:end="6739:28">s</name></expr></argument>, <argument pos:start="6739:31" pos:end="6739:35"><expr pos:start="6739:31" pos:end="6739:35"><name pos:start="6739:31" pos:end="6739:35">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6741:9" pos:end="6741:14">break;</break>

    <case pos:start="6743:5" pos:end="6743:15">case <expr pos:start="6743:10" pos:end="6743:14"><literal type="number" pos:start="6743:10" pos:end="6743:14">0x120</literal></expr>:</case> <comment type="block" pos:start="6743:17" pos:end="6743:34">/* mov reg, crN */</comment>

    <case pos:start="6745:5" pos:end="6745:15">case <expr pos:start="6745:10" pos:end="6745:14"><literal type="number" pos:start="6745:10" pos:end="6745:14">0x122</literal></expr>:</case> <comment type="block" pos:start="6745:17" pos:end="6745:34">/* mov crN, reg */</comment>

        <if_stmt pos:start="6747:9" pos:end="6831:9"><if pos:start="6747:9" pos:end="6751:9">if <condition pos:start="6747:12" pos:end="6747:24">(<expr pos:start="6747:13" pos:end="6747:23"><name pos:start="6747:13" pos:end="6747:18"><name pos:start="6747:13" pos:end="6747:13">s</name><operator pos:start="6747:14" pos:end="6747:15">-&gt;</operator><name pos:start="6747:16" pos:end="6747:18">cpl</name></name> <operator pos:start="6747:20" pos:end="6747:21">!=</operator> <literal type="number" pos:start="6747:23" pos:end="6747:23">0</literal></expr>)</condition> <block pos:start="6747:26" pos:end="6751:9">{<block_content pos:start="6749:13" pos:end="6749:64">

            <expr_stmt pos:start="6749:13" pos:end="6749:64"><expr pos:start="6749:13" pos:end="6749:63"><call pos:start="6749:13" pos:end="6749:63"><name pos:start="6749:13" pos:end="6749:25">gen_exception</name><argument_list pos:start="6749:26" pos:end="6749:63">(<argument pos:start="6749:27" pos:end="6749:27"><expr pos:start="6749:27" pos:end="6749:27"><name pos:start="6749:27" pos:end="6749:27">s</name></expr></argument>, <argument pos:start="6749:30" pos:end="6749:39"><expr pos:start="6749:30" pos:end="6749:39"><name pos:start="6749:30" pos:end="6749:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6749:42" pos:end="6749:62"><expr pos:start="6749:42" pos:end="6749:62"><name pos:start="6749:42" pos:end="6749:49">pc_start</name> <operator pos:start="6749:51" pos:end="6749:51">-</operator> <name pos:start="6749:53" pos:end="6749:62"><name pos:start="6749:53" pos:end="6749:53">s</name><operator pos:start="6749:54" pos:end="6749:55">-&gt;</operator><name pos:start="6749:56" pos:end="6749:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="6751:11" pos:end="6831:9">else <block pos:start="6751:16" pos:end="6831:9">{<block_content pos:start="6753:13" pos:end="6829:13">

            <expr_stmt pos:start="6753:13" pos:end="6753:48"><expr pos:start="6753:13" pos:end="6753:47"><name pos:start="6753:13" pos:end="6753:17">modrm</name> <operator pos:start="6753:19" pos:end="6753:19">=</operator> <call pos:start="6753:21" pos:end="6753:47"><name pos:start="6753:21" pos:end="6753:33">cpu_ldub_code</name><argument_list pos:start="6753:34" pos:end="6753:47">(<argument pos:start="6753:35" pos:end="6753:37"><expr pos:start="6753:35" pos:end="6753:37"><name pos:start="6753:35" pos:end="6753:37">env</name></expr></argument>, <argument pos:start="6753:40" pos:end="6753:46"><expr pos:start="6753:40" pos:end="6753:46"><name pos:start="6753:40" pos:end="6753:44"><name pos:start="6753:40" pos:end="6753:40">s</name><operator pos:start="6753:41" pos:end="6753:42">-&gt;</operator><name pos:start="6753:43" pos:end="6753:44">pc</name></name><operator pos:start="6753:45" pos:end="6753:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="6755:13" pos:end="6763:15">/* Ignore the mod bits (assume (modrm&amp;0xc0)==0xc0).

             * AMD documentation (24594.pdf) and testing of

             * intel 386 and 486 processors all show that the mod bits

             * are assumed to be 1's, regardless of actual values.

             */</comment>

            <expr_stmt pos:start="6765:13" pos:end="6765:40"><expr pos:start="6765:13" pos:end="6765:39"><name pos:start="6765:13" pos:end="6765:14">rm</name> <operator pos:start="6765:16" pos:end="6765:16">=</operator> <operator pos:start="6765:18" pos:end="6765:18">(</operator><name pos:start="6765:19" pos:end="6765:23">modrm</name> <operator pos:start="6765:25" pos:end="6765:25">&amp;</operator> <literal type="number" pos:start="6765:27" pos:end="6765:27">7</literal><operator pos:start="6765:28" pos:end="6765:28">)</operator> <operator pos:start="6765:30" pos:end="6765:30">|</operator> <call pos:start="6765:32" pos:end="6765:39"><name pos:start="6765:32" pos:end="6765:36">REX_B</name><argument_list pos:start="6765:37" pos:end="6765:39">(<argument pos:start="6765:38" pos:end="6765:38"><expr pos:start="6765:38" pos:end="6765:38"><name pos:start="6765:38" pos:end="6765:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6767:13" pos:end="6767:45"><expr pos:start="6767:13" pos:end="6767:44"><name pos:start="6767:13" pos:end="6767:15">reg</name> <operator pos:start="6767:17" pos:end="6767:17">=</operator> <operator pos:start="6767:19" pos:end="6767:19">(</operator><operator pos:start="6767:20" pos:end="6767:20">(</operator><name pos:start="6767:21" pos:end="6767:25">modrm</name> <operator pos:start="6767:27" pos:end="6767:28">&gt;&gt;</operator> <literal type="number" pos:start="6767:30" pos:end="6767:30">3</literal><operator pos:start="6767:31" pos:end="6767:31">)</operator> <operator pos:start="6767:33" pos:end="6767:33">&amp;</operator> <literal type="number" pos:start="6767:35" pos:end="6767:35">7</literal><operator pos:start="6767:36" pos:end="6767:36">)</operator> <operator pos:start="6767:38" pos:end="6767:38">|</operator> <name pos:start="6767:40" pos:end="6767:44">rex_r</name></expr>;</expr_stmt>

            <if_stmt pos:start="6769:13" pos:end="6775:29"><if pos:start="6769:13" pos:end="6771:29">if <condition pos:start="6769:16" pos:end="6769:26">(<expr pos:start="6769:17" pos:end="6769:25"><call pos:start="6769:17" pos:end="6769:25"><name pos:start="6769:17" pos:end="6769:22">CODE64</name><argument_list pos:start="6769:23" pos:end="6769:25">(<argument pos:start="6769:24" pos:end="6769:24"><expr pos:start="6769:24" pos:end="6769:24"><name pos:start="6769:24" pos:end="6769:24">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="6771:17" pos:end="6771:29"><block_content pos:start="6771:17" pos:end="6771:29">

                <expr_stmt pos:start="6771:17" pos:end="6771:29"><expr pos:start="6771:17" pos:end="6771:28"><name pos:start="6771:17" pos:end="6771:18">ot</name> <operator pos:start="6771:20" pos:end="6771:20">=</operator> <name pos:start="6771:22" pos:end="6771:28">OT_QUAD</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="6773:13" pos:end="6775:29">else<block type="pseudo" pos:start="6775:17" pos:end="6775:29"><block_content pos:start="6775:17" pos:end="6775:29">

                <expr_stmt pos:start="6775:17" pos:end="6775:29"><expr pos:start="6775:17" pos:end="6775:28"><name pos:start="6775:17" pos:end="6775:18">ot</name> <operator pos:start="6775:20" pos:end="6775:20">=</operator> <name pos:start="6775:22" pos:end="6775:28">OT_LONG</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="6777:13" pos:end="6783:13"><if pos:start="6777:13" pos:end="6783:13">if <condition pos:start="6777:16" pos:end="6779:61">(<expr pos:start="6777:17" pos:end="6779:60"><operator pos:start="6777:17" pos:end="6777:17">(</operator><name pos:start="6777:18" pos:end="6777:25">prefixes</name> <operator pos:start="6777:27" pos:end="6777:27">&amp;</operator> <name pos:start="6777:29" pos:end="6777:39">PREFIX_LOCK</name><operator pos:start="6777:40" pos:end="6777:40">)</operator> <operator pos:start="6777:42" pos:end="6777:43">&amp;&amp;</operator> <operator pos:start="6777:45" pos:end="6777:45">(</operator><name pos:start="6777:46" pos:end="6777:48">reg</name> <operator pos:start="6777:50" pos:end="6777:51">==</operator> <literal type="number" pos:start="6777:53" pos:end="6777:53">0</literal><operator pos:start="6777:54" pos:end="6777:54">)</operator> <operator pos:start="6777:56" pos:end="6777:57">&amp;&amp;</operator>

                <operator pos:start="6779:17" pos:end="6779:17">(</operator><name pos:start="6779:18" pos:end="6779:39"><name pos:start="6779:18" pos:end="6779:18">s</name><operator pos:start="6779:19" pos:end="6779:20">-&gt;</operator><name pos:start="6779:21" pos:end="6779:39">cpuid_ext3_features</name></name> <operator pos:start="6779:41" pos:end="6779:41">&amp;</operator> <name pos:start="6779:43" pos:end="6779:59">CPUID_EXT3_CR8LEG</name><operator pos:start="6779:60" pos:end="6779:60">)</operator></expr>)</condition> <block pos:start="6779:63" pos:end="6783:13">{<block_content pos:start="6781:17" pos:end="6781:24">

                <expr_stmt pos:start="6781:17" pos:end="6781:24"><expr pos:start="6781:17" pos:end="6781:23"><name pos:start="6781:17" pos:end="6781:19">reg</name> <operator pos:start="6781:21" pos:end="6781:21">=</operator> <literal type="number" pos:start="6781:23" pos:end="6781:23">8</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <switch pos:start="6785:13" pos:end="6829:13">switch<condition pos:start="6785:19" pos:end="6785:23">(<expr pos:start="6785:20" pos:end="6785:22"><name pos:start="6785:20" pos:end="6785:22">reg</name></expr>)</condition> <block pos:start="6785:25" pos:end="6829:13">{<block_content pos:start="6787:13" pos:end="6827:32">

            <case pos:start="6787:13" pos:end="6787:19">case <expr pos:start="6787:18" pos:end="6787:18"><literal type="number" pos:start="6787:18" pos:end="6787:18">0</literal></expr>:</case>

            <case pos:start="6789:13" pos:end="6789:19">case <expr pos:start="6789:18" pos:end="6789:18"><literal type="number" pos:start="6789:18" pos:end="6789:18">2</literal></expr>:</case>

            <case pos:start="6791:13" pos:end="6791:19">case <expr pos:start="6791:18" pos:end="6791:18"><literal type="number" pos:start="6791:18" pos:end="6791:18">3</literal></expr>:</case>

            <case pos:start="6793:13" pos:end="6793:19">case <expr pos:start="6793:18" pos:end="6793:18"><literal type="number" pos:start="6793:18" pos:end="6793:18">4</literal></expr>:</case>

            <case pos:start="6795:13" pos:end="6795:19">case <expr pos:start="6795:18" pos:end="6795:18"><literal type="number" pos:start="6795:18" pos:end="6795:18">8</literal></expr>:</case>

                <if_stmt pos:start="6797:17" pos:end="6799:47"><if pos:start="6797:17" pos:end="6799:47">if <condition pos:start="6797:20" pos:end="6797:46">(<expr pos:start="6797:21" pos:end="6797:45"><name pos:start="6797:21" pos:end="6797:28"><name pos:start="6797:21" pos:end="6797:21">s</name><operator pos:start="6797:22" pos:end="6797:23">-&gt;</operator><name pos:start="6797:24" pos:end="6797:28">cc_op</name></name> <operator pos:start="6797:30" pos:end="6797:31">!=</operator> <name pos:start="6797:33" pos:end="6797:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="6799:21" pos:end="6799:47"><block_content pos:start="6799:21" pos:end="6799:47">

                    <expr_stmt pos:start="6799:21" pos:end="6799:47"><expr pos:start="6799:21" pos:end="6799:46"><call pos:start="6799:21" pos:end="6799:46"><name pos:start="6799:21" pos:end="6799:36">gen_op_set_cc_op</name><argument_list pos:start="6799:37" pos:end="6799:46">(<argument pos:start="6799:38" pos:end="6799:45"><expr pos:start="6799:38" pos:end="6799:45"><name pos:start="6799:38" pos:end="6799:45"><name pos:start="6799:38" pos:end="6799:38">s</name><operator pos:start="6799:39" pos:end="6799:40">-&gt;</operator><name pos:start="6799:41" pos:end="6799:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="6801:17" pos:end="6801:50"><expr pos:start="6801:17" pos:end="6801:49"><call pos:start="6801:17" pos:end="6801:49"><name pos:start="6801:17" pos:end="6801:26">gen_jmp_im</name><argument_list pos:start="6801:27" pos:end="6801:49">(<argument pos:start="6801:28" pos:end="6801:48"><expr pos:start="6801:28" pos:end="6801:48"><name pos:start="6801:28" pos:end="6801:35">pc_start</name> <operator pos:start="6801:37" pos:end="6801:37">-</operator> <name pos:start="6801:39" pos:end="6801:48"><name pos:start="6801:39" pos:end="6801:39">s</name><operator pos:start="6801:40" pos:end="6801:41">-&gt;</operator><name pos:start="6801:42" pos:end="6801:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="6803:17" pos:end="6821:17"><if pos:start="6803:17" pos:end="6815:17">if <condition pos:start="6803:20" pos:end="6803:26">(<expr pos:start="6803:21" pos:end="6803:25"><name pos:start="6803:21" pos:end="6803:21">b</name> <operator pos:start="6803:23" pos:end="6803:23">&amp;</operator> <literal type="number" pos:start="6803:25" pos:end="6803:25">2</literal></expr>)</condition> <block pos:start="6803:28" pos:end="6815:17">{<block_content pos:start="6805:21" pos:end="6813:31">

                    <expr_stmt pos:start="6805:21" pos:end="6805:49"><expr pos:start="6805:21" pos:end="6805:48"><call pos:start="6805:21" pos:end="6805:48"><name pos:start="6805:21" pos:end="6805:37">gen_op_mov_TN_reg</name><argument_list pos:start="6805:38" pos:end="6805:48">(<argument pos:start="6805:39" pos:end="6805:40"><expr pos:start="6805:39" pos:end="6805:40"><name pos:start="6805:39" pos:end="6805:40">ot</name></expr></argument>, <argument pos:start="6805:43" pos:end="6805:43"><expr pos:start="6805:43" pos:end="6805:43"><literal type="number" pos:start="6805:43" pos:end="6805:43">0</literal></expr></argument>, <argument pos:start="6805:46" pos:end="6805:47"><expr pos:start="6805:46" pos:end="6805:47"><name pos:start="6805:46" pos:end="6805:47">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6807:21" pos:end="6809:51"><expr pos:start="6807:21" pos:end="6809:50"><call pos:start="6807:21" pos:end="6809:50"><name pos:start="6807:21" pos:end="6807:40">gen_helper_write_crN</name><argument_list pos:start="6807:41" pos:end="6809:50">(<argument pos:start="6807:42" pos:end="6807:48"><expr pos:start="6807:42" pos:end="6807:48"><name pos:start="6807:42" pos:end="6807:48">cpu_env</name></expr></argument>, <argument pos:start="6807:51" pos:end="6807:68"><expr pos:start="6807:51" pos:end="6807:68"><call pos:start="6807:51" pos:end="6807:68"><name pos:start="6807:51" pos:end="6807:63">tcg_const_i32</name><argument_list pos:start="6807:64" pos:end="6807:68">(<argument pos:start="6807:65" pos:end="6807:67"><expr pos:start="6807:65" pos:end="6807:67"><name pos:start="6807:65" pos:end="6807:67">reg</name></expr></argument>)</argument_list></call></expr></argument>,

                                         <argument pos:start="6809:42" pos:end="6809:49"><expr pos:start="6809:42" pos:end="6809:49"><name pos:start="6809:42" pos:end="6809:49"><name pos:start="6809:42" pos:end="6809:46">cpu_T</name><index pos:start="6809:47" pos:end="6809:49">[<expr pos:start="6809:48" pos:end="6809:48"><literal type="number" pos:start="6809:48" pos:end="6809:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6811:21" pos:end="6811:51"><expr pos:start="6811:21" pos:end="6811:50"><call pos:start="6811:21" pos:end="6811:50"><name pos:start="6811:21" pos:end="6811:30">gen_jmp_im</name><argument_list pos:start="6811:31" pos:end="6811:50">(<argument pos:start="6811:32" pos:end="6811:49"><expr pos:start="6811:32" pos:end="6811:49"><name pos:start="6811:32" pos:end="6811:36"><name pos:start="6811:32" pos:end="6811:32">s</name><operator pos:start="6811:33" pos:end="6811:34">-&gt;</operator><name pos:start="6811:35" pos:end="6811:36">pc</name></name> <operator pos:start="6811:38" pos:end="6811:38">-</operator> <name pos:start="6811:40" pos:end="6811:49"><name pos:start="6811:40" pos:end="6811:40">s</name><operator pos:start="6811:41" pos:end="6811:42">-&gt;</operator><name pos:start="6811:43" pos:end="6811:49">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6813:21" pos:end="6813:31"><expr pos:start="6813:21" pos:end="6813:30"><call pos:start="6813:21" pos:end="6813:30"><name pos:start="6813:21" pos:end="6813:27">gen_eob</name><argument_list pos:start="6813:28" pos:end="6813:30">(<argument pos:start="6813:29" pos:end="6813:29"><expr pos:start="6813:29" pos:end="6813:29"><name pos:start="6813:29" pos:end="6813:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6815:19" pos:end="6821:17">else <block pos:start="6815:24" pos:end="6821:17">{<block_content pos:start="6817:21" pos:end="6819:46">

                    <expr_stmt pos:start="6817:21" pos:end="6817:79"><expr pos:start="6817:21" pos:end="6817:78"><call pos:start="6817:21" pos:end="6817:78"><name pos:start="6817:21" pos:end="6817:39">gen_helper_read_crN</name><argument_list pos:start="6817:40" pos:end="6817:78">(<argument pos:start="6817:41" pos:end="6817:48"><expr pos:start="6817:41" pos:end="6817:48"><name pos:start="6817:41" pos:end="6817:48"><name pos:start="6817:41" pos:end="6817:45">cpu_T</name><index pos:start="6817:46" pos:end="6817:48">[<expr pos:start="6817:47" pos:end="6817:47"><literal type="number" pos:start="6817:47" pos:end="6817:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6817:51" pos:end="6817:57"><expr pos:start="6817:51" pos:end="6817:57"><name pos:start="6817:51" pos:end="6817:57">cpu_env</name></expr></argument>, <argument pos:start="6817:60" pos:end="6817:77"><expr pos:start="6817:60" pos:end="6817:77"><call pos:start="6817:60" pos:end="6817:77"><name pos:start="6817:60" pos:end="6817:72">tcg_const_i32</name><argument_list pos:start="6817:73" pos:end="6817:77">(<argument pos:start="6817:74" pos:end="6817:76"><expr pos:start="6817:74" pos:end="6817:76"><name pos:start="6817:74" pos:end="6817:76">reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6819:21" pos:end="6819:46"><expr pos:start="6819:21" pos:end="6819:45"><call pos:start="6819:21" pos:end="6819:45"><name pos:start="6819:21" pos:end="6819:37">gen_op_mov_reg_T0</name><argument_list pos:start="6819:38" pos:end="6819:45">(<argument pos:start="6819:39" pos:end="6819:40"><expr pos:start="6819:39" pos:end="6819:40"><name pos:start="6819:39" pos:end="6819:40">ot</name></expr></argument>, <argument pos:start="6819:43" pos:end="6819:44"><expr pos:start="6819:43" pos:end="6819:44"><name pos:start="6819:43" pos:end="6819:44">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="6823:17" pos:end="6823:22">break;</break>

            <default pos:start="6825:13" pos:end="6825:20">default:</default>

                <goto pos:start="6827:17" pos:end="6827:32">goto <name pos:start="6827:22" pos:end="6827:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

        </block_content>}</block></else></if_stmt>

        <break pos:start="6833:9" pos:end="6833:14">break;</break>

    <case pos:start="6835:5" pos:end="6835:15">case <expr pos:start="6835:10" pos:end="6835:14"><literal type="number" pos:start="6835:10" pos:end="6835:14">0x121</literal></expr>:</case> <comment type="block" pos:start="6835:17" pos:end="6835:34">/* mov reg, drN */</comment>

    <case pos:start="6837:5" pos:end="6837:15">case <expr pos:start="6837:10" pos:end="6837:14"><literal type="number" pos:start="6837:10" pos:end="6837:14">0x123</literal></expr>:</case> <comment type="block" pos:start="6837:17" pos:end="6837:34">/* mov drN, reg */</comment>

        <if_stmt pos:start="6839:9" pos:end="6897:9"><if pos:start="6839:9" pos:end="6843:9">if <condition pos:start="6839:12" pos:end="6839:24">(<expr pos:start="6839:13" pos:end="6839:23"><name pos:start="6839:13" pos:end="6839:18"><name pos:start="6839:13" pos:end="6839:13">s</name><operator pos:start="6839:14" pos:end="6839:15">-&gt;</operator><name pos:start="6839:16" pos:end="6839:18">cpl</name></name> <operator pos:start="6839:20" pos:end="6839:21">!=</operator> <literal type="number" pos:start="6839:23" pos:end="6839:23">0</literal></expr>)</condition> <block pos:start="6839:26" pos:end="6843:9">{<block_content pos:start="6841:13" pos:end="6841:64">

            <expr_stmt pos:start="6841:13" pos:end="6841:64"><expr pos:start="6841:13" pos:end="6841:63"><call pos:start="6841:13" pos:end="6841:63"><name pos:start="6841:13" pos:end="6841:25">gen_exception</name><argument_list pos:start="6841:26" pos:end="6841:63">(<argument pos:start="6841:27" pos:end="6841:27"><expr pos:start="6841:27" pos:end="6841:27"><name pos:start="6841:27" pos:end="6841:27">s</name></expr></argument>, <argument pos:start="6841:30" pos:end="6841:39"><expr pos:start="6841:30" pos:end="6841:39"><name pos:start="6841:30" pos:end="6841:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6841:42" pos:end="6841:62"><expr pos:start="6841:42" pos:end="6841:62"><name pos:start="6841:42" pos:end="6841:49">pc_start</name> <operator pos:start="6841:51" pos:end="6841:51">-</operator> <name pos:start="6841:53" pos:end="6841:62"><name pos:start="6841:53" pos:end="6841:53">s</name><operator pos:start="6841:54" pos:end="6841:55">-&gt;</operator><name pos:start="6841:56" pos:end="6841:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="6843:11" pos:end="6897:9">else <block pos:start="6843:16" pos:end="6897:9">{<block_content pos:start="6845:13" pos:end="6895:13">

            <expr_stmt pos:start="6845:13" pos:end="6845:48"><expr pos:start="6845:13" pos:end="6845:47"><name pos:start="6845:13" pos:end="6845:17">modrm</name> <operator pos:start="6845:19" pos:end="6845:19">=</operator> <call pos:start="6845:21" pos:end="6845:47"><name pos:start="6845:21" pos:end="6845:33">cpu_ldub_code</name><argument_list pos:start="6845:34" pos:end="6845:47">(<argument pos:start="6845:35" pos:end="6845:37"><expr pos:start="6845:35" pos:end="6845:37"><name pos:start="6845:35" pos:end="6845:37">env</name></expr></argument>, <argument pos:start="6845:40" pos:end="6845:46"><expr pos:start="6845:40" pos:end="6845:46"><name pos:start="6845:40" pos:end="6845:44"><name pos:start="6845:40" pos:end="6845:40">s</name><operator pos:start="6845:41" pos:end="6845:42">-&gt;</operator><name pos:start="6845:43" pos:end="6845:44">pc</name></name><operator pos:start="6845:45" pos:end="6845:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="6847:13" pos:end="6855:15">/* Ignore the mod bits (assume (modrm&amp;0xc0)==0xc0).

             * AMD documentation (24594.pdf) and testing of

             * intel 386 and 486 processors all show that the mod bits

             * are assumed to be 1's, regardless of actual values.

             */</comment>

            <expr_stmt pos:start="6857:13" pos:end="6857:40"><expr pos:start="6857:13" pos:end="6857:39"><name pos:start="6857:13" pos:end="6857:14">rm</name> <operator pos:start="6857:16" pos:end="6857:16">=</operator> <operator pos:start="6857:18" pos:end="6857:18">(</operator><name pos:start="6857:19" pos:end="6857:23">modrm</name> <operator pos:start="6857:25" pos:end="6857:25">&amp;</operator> <literal type="number" pos:start="6857:27" pos:end="6857:27">7</literal><operator pos:start="6857:28" pos:end="6857:28">)</operator> <operator pos:start="6857:30" pos:end="6857:30">|</operator> <call pos:start="6857:32" pos:end="6857:39"><name pos:start="6857:32" pos:end="6857:36">REX_B</name><argument_list pos:start="6857:37" pos:end="6857:39">(<argument pos:start="6857:38" pos:end="6857:38"><expr pos:start="6857:38" pos:end="6857:38"><name pos:start="6857:38" pos:end="6857:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6859:13" pos:end="6859:45"><expr pos:start="6859:13" pos:end="6859:44"><name pos:start="6859:13" pos:end="6859:15">reg</name> <operator pos:start="6859:17" pos:end="6859:17">=</operator> <operator pos:start="6859:19" pos:end="6859:19">(</operator><operator pos:start="6859:20" pos:end="6859:20">(</operator><name pos:start="6859:21" pos:end="6859:25">modrm</name> <operator pos:start="6859:27" pos:end="6859:28">&gt;&gt;</operator> <literal type="number" pos:start="6859:30" pos:end="6859:30">3</literal><operator pos:start="6859:31" pos:end="6859:31">)</operator> <operator pos:start="6859:33" pos:end="6859:33">&amp;</operator> <literal type="number" pos:start="6859:35" pos:end="6859:35">7</literal><operator pos:start="6859:36" pos:end="6859:36">)</operator> <operator pos:start="6859:38" pos:end="6859:38">|</operator> <name pos:start="6859:40" pos:end="6859:44">rex_r</name></expr>;</expr_stmt>

            <if_stmt pos:start="6861:13" pos:end="6867:29"><if pos:start="6861:13" pos:end="6863:29">if <condition pos:start="6861:16" pos:end="6861:26">(<expr pos:start="6861:17" pos:end="6861:25"><call pos:start="6861:17" pos:end="6861:25"><name pos:start="6861:17" pos:end="6861:22">CODE64</name><argument_list pos:start="6861:23" pos:end="6861:25">(<argument pos:start="6861:24" pos:end="6861:24"><expr pos:start="6861:24" pos:end="6861:24"><name pos:start="6861:24" pos:end="6861:24">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="6863:17" pos:end="6863:29"><block_content pos:start="6863:17" pos:end="6863:29">

                <expr_stmt pos:start="6863:17" pos:end="6863:29"><expr pos:start="6863:17" pos:end="6863:28"><name pos:start="6863:17" pos:end="6863:18">ot</name> <operator pos:start="6863:20" pos:end="6863:20">=</operator> <name pos:start="6863:22" pos:end="6863:28">OT_QUAD</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="6865:13" pos:end="6867:29">else<block type="pseudo" pos:start="6867:17" pos:end="6867:29"><block_content pos:start="6867:17" pos:end="6867:29">

                <expr_stmt pos:start="6867:17" pos:end="6867:29"><expr pos:start="6867:17" pos:end="6867:28"><name pos:start="6867:17" pos:end="6867:18">ot</name> <operator pos:start="6867:20" pos:end="6867:20">=</operator> <name pos:start="6867:22" pos:end="6867:28">OT_LONG</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <comment type="block" pos:start="6869:13" pos:end="6869:56">/* XXX: do it dynamically with CR4.DE bit */</comment>

            <if_stmt pos:start="6871:13" pos:end="6873:32"><if pos:start="6871:13" pos:end="6873:32">if <condition pos:start="6871:16" pos:end="6871:49">(<expr pos:start="6871:17" pos:end="6871:48"><name pos:start="6871:17" pos:end="6871:19">reg</name> <operator pos:start="6871:21" pos:end="6871:22">==</operator> <literal type="number" pos:start="6871:24" pos:end="6871:24">4</literal> <operator pos:start="6871:26" pos:end="6871:27">||</operator> <name pos:start="6871:29" pos:end="6871:31">reg</name> <operator pos:start="6871:33" pos:end="6871:34">==</operator> <literal type="number" pos:start="6871:36" pos:end="6871:36">5</literal> <operator pos:start="6871:38" pos:end="6871:39">||</operator> <name pos:start="6871:41" pos:end="6871:43">reg</name> <operator pos:start="6871:45" pos:end="6871:46">&gt;=</operator> <literal type="number" pos:start="6871:48" pos:end="6871:48">8</literal></expr>)</condition><block type="pseudo" pos:start="6873:17" pos:end="6873:32"><block_content pos:start="6873:17" pos:end="6873:32">

                <goto pos:start="6873:17" pos:end="6873:32">goto <name pos:start="6873:22" pos:end="6873:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="6875:13" pos:end="6895:13"><if pos:start="6875:13" pos:end="6887:13">if <condition pos:start="6875:16" pos:end="6875:22">(<expr pos:start="6875:17" pos:end="6875:21"><name pos:start="6875:17" pos:end="6875:17">b</name> <operator pos:start="6875:19" pos:end="6875:19">&amp;</operator> <literal type="number" pos:start="6875:21" pos:end="6875:21">2</literal></expr>)</condition> <block pos:start="6875:24" pos:end="6887:13">{<block_content pos:start="6877:17" pos:end="6885:27">

                <expr_stmt pos:start="6877:17" pos:end="6877:79"><expr pos:start="6877:17" pos:end="6877:78"><call pos:start="6877:17" pos:end="6877:78"><name pos:start="6877:17" pos:end="6877:39">gen_svm_check_intercept</name><argument_list pos:start="6877:40" pos:end="6877:78">(<argument pos:start="6877:41" pos:end="6877:41"><expr pos:start="6877:41" pos:end="6877:41"><name pos:start="6877:41" pos:end="6877:41">s</name></expr></argument>, <argument pos:start="6877:44" pos:end="6877:51"><expr pos:start="6877:44" pos:end="6877:51"><name pos:start="6877:44" pos:end="6877:51">pc_start</name></expr></argument>, <argument pos:start="6877:54" pos:end="6877:77"><expr pos:start="6877:54" pos:end="6877:77"><name pos:start="6877:54" pos:end="6877:71">SVM_EXIT_WRITE_DR0</name> <operator pos:start="6877:73" pos:end="6877:73">+</operator> <name pos:start="6877:75" pos:end="6877:77">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6879:17" pos:end="6879:45"><expr pos:start="6879:17" pos:end="6879:44"><call pos:start="6879:17" pos:end="6879:44"><name pos:start="6879:17" pos:end="6879:33">gen_op_mov_TN_reg</name><argument_list pos:start="6879:34" pos:end="6879:44">(<argument pos:start="6879:35" pos:end="6879:36"><expr pos:start="6879:35" pos:end="6879:36"><name pos:start="6879:35" pos:end="6879:36">ot</name></expr></argument>, <argument pos:start="6879:39" pos:end="6879:39"><expr pos:start="6879:39" pos:end="6879:39"><literal type="number" pos:start="6879:39" pos:end="6879:39">0</literal></expr></argument>, <argument pos:start="6879:42" pos:end="6879:43"><expr pos:start="6879:42" pos:end="6879:43"><name pos:start="6879:42" pos:end="6879:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6881:17" pos:end="6881:78"><expr pos:start="6881:17" pos:end="6881:77"><call pos:start="6881:17" pos:end="6881:77"><name pos:start="6881:17" pos:end="6881:38">gen_helper_movl_drN_T0</name><argument_list pos:start="6881:39" pos:end="6881:77">(<argument pos:start="6881:40" pos:end="6881:46"><expr pos:start="6881:40" pos:end="6881:46"><name pos:start="6881:40" pos:end="6881:46">cpu_env</name></expr></argument>, <argument pos:start="6881:49" pos:end="6881:66"><expr pos:start="6881:49" pos:end="6881:66"><call pos:start="6881:49" pos:end="6881:66"><name pos:start="6881:49" pos:end="6881:61">tcg_const_i32</name><argument_list pos:start="6881:62" pos:end="6881:66">(<argument pos:start="6881:63" pos:end="6881:65"><expr pos:start="6881:63" pos:end="6881:65"><name pos:start="6881:63" pos:end="6881:65">reg</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="6881:69" pos:end="6881:76"><expr pos:start="6881:69" pos:end="6881:76"><name pos:start="6881:69" pos:end="6881:76"><name pos:start="6881:69" pos:end="6881:73">cpu_T</name><index pos:start="6881:74" pos:end="6881:76">[<expr pos:start="6881:75" pos:end="6881:75"><literal type="number" pos:start="6881:75" pos:end="6881:75">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6883:17" pos:end="6883:47"><expr pos:start="6883:17" pos:end="6883:46"><call pos:start="6883:17" pos:end="6883:46"><name pos:start="6883:17" pos:end="6883:26">gen_jmp_im</name><argument_list pos:start="6883:27" pos:end="6883:46">(<argument pos:start="6883:28" pos:end="6883:45"><expr pos:start="6883:28" pos:end="6883:45"><name pos:start="6883:28" pos:end="6883:32"><name pos:start="6883:28" pos:end="6883:28">s</name><operator pos:start="6883:29" pos:end="6883:30">-&gt;</operator><name pos:start="6883:31" pos:end="6883:32">pc</name></name> <operator pos:start="6883:34" pos:end="6883:34">-</operator> <name pos:start="6883:36" pos:end="6883:45"><name pos:start="6883:36" pos:end="6883:36">s</name><operator pos:start="6883:37" pos:end="6883:38">-&gt;</operator><name pos:start="6883:39" pos:end="6883:45">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6885:17" pos:end="6885:27"><expr pos:start="6885:17" pos:end="6885:26"><call pos:start="6885:17" pos:end="6885:26"><name pos:start="6885:17" pos:end="6885:23">gen_eob</name><argument_list pos:start="6885:24" pos:end="6885:26">(<argument pos:start="6885:25" pos:end="6885:25"><expr pos:start="6885:25" pos:end="6885:25"><name pos:start="6885:25" pos:end="6885:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6887:15" pos:end="6895:13">else <block pos:start="6887:20" pos:end="6895:13">{<block_content pos:start="6889:17" pos:end="6893:42">

                <expr_stmt pos:start="6889:17" pos:end="6889:78"><expr pos:start="6889:17" pos:end="6889:77"><call pos:start="6889:17" pos:end="6889:77"><name pos:start="6889:17" pos:end="6889:39">gen_svm_check_intercept</name><argument_list pos:start="6889:40" pos:end="6889:77">(<argument pos:start="6889:41" pos:end="6889:41"><expr pos:start="6889:41" pos:end="6889:41"><name pos:start="6889:41" pos:end="6889:41">s</name></expr></argument>, <argument pos:start="6889:44" pos:end="6889:51"><expr pos:start="6889:44" pos:end="6889:51"><name pos:start="6889:44" pos:end="6889:51">pc_start</name></expr></argument>, <argument pos:start="6889:54" pos:end="6889:76"><expr pos:start="6889:54" pos:end="6889:76"><name pos:start="6889:54" pos:end="6889:70">SVM_EXIT_READ_DR0</name> <operator pos:start="6889:72" pos:end="6889:72">+</operator> <name pos:start="6889:74" pos:end="6889:76">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6891:17" pos:end="6891:80"><expr pos:start="6891:17" pos:end="6891:79"><call pos:start="6891:17" pos:end="6891:79"><name pos:start="6891:17" pos:end="6891:29">tcg_gen_ld_tl</name><argument_list pos:start="6891:30" pos:end="6891:79">(<argument pos:start="6891:31" pos:end="6891:38"><expr pos:start="6891:31" pos:end="6891:38"><name pos:start="6891:31" pos:end="6891:38"><name pos:start="6891:31" pos:end="6891:35">cpu_T</name><index pos:start="6891:36" pos:end="6891:38">[<expr pos:start="6891:37" pos:end="6891:37"><literal type="number" pos:start="6891:37" pos:end="6891:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6891:41" pos:end="6891:47"><expr pos:start="6891:41" pos:end="6891:47"><name pos:start="6891:41" pos:end="6891:47">cpu_env</name></expr></argument>, <argument pos:start="6891:50" pos:end="6891:78"><expr pos:start="6891:50" pos:end="6891:78"><call pos:start="6891:50" pos:end="6891:78"><name pos:start="6891:50" pos:end="6891:57">offsetof</name><argument_list pos:start="6891:58" pos:end="6891:78">(<argument pos:start="6891:59" pos:end="6891:69"><expr pos:start="6891:59" pos:end="6891:69"><name pos:start="6891:59" pos:end="6891:69">CPUX86State</name></expr></argument>,<argument pos:start="6891:71" pos:end="6891:77"><expr pos:start="6891:71" pos:end="6891:77"><name pos:start="6891:71" pos:end="6891:77"><name pos:start="6891:71" pos:end="6891:72">dr</name><index pos:start="6891:73" pos:end="6891:77">[<expr pos:start="6891:74" pos:end="6891:76"><name pos:start="6891:74" pos:end="6891:76">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6893:17" pos:end="6893:42"><expr pos:start="6893:17" pos:end="6893:41"><call pos:start="6893:17" pos:end="6893:41"><name pos:start="6893:17" pos:end="6893:33">gen_op_mov_reg_T0</name><argument_list pos:start="6893:34" pos:end="6893:41">(<argument pos:start="6893:35" pos:end="6893:36"><expr pos:start="6893:35" pos:end="6893:36"><name pos:start="6893:35" pos:end="6893:36">ot</name></expr></argument>, <argument pos:start="6893:39" pos:end="6893:40"><expr pos:start="6893:39" pos:end="6893:40"><name pos:start="6893:39" pos:end="6893:40">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="6899:9" pos:end="6899:14">break;</break>

    <case pos:start="6901:5" pos:end="6901:15">case <expr pos:start="6901:10" pos:end="6901:14"><literal type="number" pos:start="6901:10" pos:end="6901:14">0x106</literal></expr>:</case> <comment type="block" pos:start="6901:17" pos:end="6901:26">/* clts */</comment>

        <if_stmt pos:start="6903:9" pos:end="6919:9"><if pos:start="6903:9" pos:end="6907:9">if <condition pos:start="6903:12" pos:end="6903:24">(<expr pos:start="6903:13" pos:end="6903:23"><name pos:start="6903:13" pos:end="6903:18"><name pos:start="6903:13" pos:end="6903:13">s</name><operator pos:start="6903:14" pos:end="6903:15">-&gt;</operator><name pos:start="6903:16" pos:end="6903:18">cpl</name></name> <operator pos:start="6903:20" pos:end="6903:21">!=</operator> <literal type="number" pos:start="6903:23" pos:end="6903:23">0</literal></expr>)</condition> <block pos:start="6903:26" pos:end="6907:9">{<block_content pos:start="6905:13" pos:end="6905:64">

            <expr_stmt pos:start="6905:13" pos:end="6905:64"><expr pos:start="6905:13" pos:end="6905:63"><call pos:start="6905:13" pos:end="6905:63"><name pos:start="6905:13" pos:end="6905:25">gen_exception</name><argument_list pos:start="6905:26" pos:end="6905:63">(<argument pos:start="6905:27" pos:end="6905:27"><expr pos:start="6905:27" pos:end="6905:27"><name pos:start="6905:27" pos:end="6905:27">s</name></expr></argument>, <argument pos:start="6905:30" pos:end="6905:39"><expr pos:start="6905:30" pos:end="6905:39"><name pos:start="6905:30" pos:end="6905:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6905:42" pos:end="6905:62"><expr pos:start="6905:42" pos:end="6905:62"><name pos:start="6905:42" pos:end="6905:49">pc_start</name> <operator pos:start="6905:51" pos:end="6905:51">-</operator> <name pos:start="6905:53" pos:end="6905:62"><name pos:start="6905:53" pos:end="6905:53">s</name><operator pos:start="6905:54" pos:end="6905:55">-&gt;</operator><name pos:start="6905:56" pos:end="6905:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="6907:11" pos:end="6919:9">else <block pos:start="6907:16" pos:end="6919:9">{<block_content pos:start="6909:13" pos:end="6917:23">

            <expr_stmt pos:start="6909:13" pos:end="6909:69"><expr pos:start="6909:13" pos:end="6909:68"><call pos:start="6909:13" pos:end="6909:68"><name pos:start="6909:13" pos:end="6909:35">gen_svm_check_intercept</name><argument_list pos:start="6909:36" pos:end="6909:68">(<argument pos:start="6909:37" pos:end="6909:37"><expr pos:start="6909:37" pos:end="6909:37"><name pos:start="6909:37" pos:end="6909:37">s</name></expr></argument>, <argument pos:start="6909:40" pos:end="6909:47"><expr pos:start="6909:40" pos:end="6909:47"><name pos:start="6909:40" pos:end="6909:47">pc_start</name></expr></argument>, <argument pos:start="6909:50" pos:end="6909:67"><expr pos:start="6909:50" pos:end="6909:67"><name pos:start="6909:50" pos:end="6909:67">SVM_EXIT_WRITE_CR0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6911:13" pos:end="6911:37"><expr pos:start="6911:13" pos:end="6911:36"><call pos:start="6911:13" pos:end="6911:36"><name pos:start="6911:13" pos:end="6911:27">gen_helper_clts</name><argument_list pos:start="6911:28" pos:end="6911:36">(<argument pos:start="6911:29" pos:end="6911:35"><expr pos:start="6911:29" pos:end="6911:35"><name pos:start="6911:29" pos:end="6911:35">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="6913:13" pos:end="6913:62">/* abort block because static cpu state changed */</comment>

            <expr_stmt pos:start="6915:13" pos:end="6915:43"><expr pos:start="6915:13" pos:end="6915:42"><call pos:start="6915:13" pos:end="6915:42"><name pos:start="6915:13" pos:end="6915:22">gen_jmp_im</name><argument_list pos:start="6915:23" pos:end="6915:42">(<argument pos:start="6915:24" pos:end="6915:41"><expr pos:start="6915:24" pos:end="6915:41"><name pos:start="6915:24" pos:end="6915:28"><name pos:start="6915:24" pos:end="6915:24">s</name><operator pos:start="6915:25" pos:end="6915:26">-&gt;</operator><name pos:start="6915:27" pos:end="6915:28">pc</name></name> <operator pos:start="6915:30" pos:end="6915:30">-</operator> <name pos:start="6915:32" pos:end="6915:41"><name pos:start="6915:32" pos:end="6915:32">s</name><operator pos:start="6915:33" pos:end="6915:34">-&gt;</operator><name pos:start="6915:35" pos:end="6915:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6917:13" pos:end="6917:23"><expr pos:start="6917:13" pos:end="6917:22"><call pos:start="6917:13" pos:end="6917:22"><name pos:start="6917:13" pos:end="6917:19">gen_eob</name><argument_list pos:start="6917:20" pos:end="6917:22">(<argument pos:start="6917:21" pos:end="6917:21"><expr pos:start="6917:21" pos:end="6917:21"><name pos:start="6917:21" pos:end="6917:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="6921:9" pos:end="6921:14">break;</break>

    <comment type="block" pos:start="6923:5" pos:end="6923:53">/* MMX/3DNow!/SSE/SSE2/SSE3/SSSE3/SSE4 support */</comment>

    <case pos:start="6925:5" pos:end="6925:15">case <expr pos:start="6925:10" pos:end="6925:14"><literal type="number" pos:start="6925:10" pos:end="6925:14">0x1c3</literal></expr>:</case> <comment type="block" pos:start="6925:17" pos:end="6925:37">/* MOVNTI reg, mem */</comment>

        <if_stmt pos:start="6927:9" pos:end="6929:28"><if pos:start="6927:9" pos:end="6929:28">if <condition pos:start="6927:12" pos:end="6927:46">(<expr pos:start="6927:13" pos:end="6927:45"><operator pos:start="6927:13" pos:end="6927:13">!</operator><operator pos:start="6927:14" pos:end="6927:14">(</operator><name pos:start="6927:15" pos:end="6927:31"><name pos:start="6927:15" pos:end="6927:15">s</name><operator pos:start="6927:16" pos:end="6927:17">-&gt;</operator><name pos:start="6927:18" pos:end="6927:31">cpuid_features</name></name> <operator pos:start="6927:33" pos:end="6927:33">&amp;</operator> <name pos:start="6927:35" pos:end="6927:44">CPUID_SSE2</name><operator pos:start="6927:45" pos:end="6927:45">)</operator></expr>)</condition><block type="pseudo" pos:start="6929:13" pos:end="6929:28"><block_content pos:start="6929:13" pos:end="6929:28">

            <goto pos:start="6929:13" pos:end="6929:28">goto <name pos:start="6929:18" pos:end="6929:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="6931:9" pos:end="6931:47"><expr pos:start="6931:9" pos:end="6931:46"><name pos:start="6931:9" pos:end="6931:10">ot</name> <operator pos:start="6931:12" pos:end="6931:12">=</operator> <ternary pos:start="6931:14" pos:end="6931:46"><condition pos:start="6931:14" pos:end="6931:28"><expr pos:start="6931:14" pos:end="6931:26"><name pos:start="6931:14" pos:end="6931:21"><name pos:start="6931:14" pos:end="6931:14">s</name><operator pos:start="6931:15" pos:end="6931:16">-&gt;</operator><name pos:start="6931:17" pos:end="6931:21">dflag</name></name> <operator pos:start="6931:23" pos:end="6931:24">==</operator> <literal type="number" pos:start="6931:26" pos:end="6931:26">2</literal></expr> ?</condition><then pos:start="6931:30" pos:end="6931:36"> <expr pos:start="6931:30" pos:end="6931:36"><name pos:start="6931:30" pos:end="6931:36">OT_QUAD</name></expr> </then><else pos:start="6931:38" pos:end="6931:46">: <expr pos:start="6931:40" pos:end="6931:46"><name pos:start="6931:40" pos:end="6931:46">OT_LONG</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="6933:9" pos:end="6933:44"><expr pos:start="6933:9" pos:end="6933:43"><name pos:start="6933:9" pos:end="6933:13">modrm</name> <operator pos:start="6933:15" pos:end="6933:15">=</operator> <call pos:start="6933:17" pos:end="6933:43"><name pos:start="6933:17" pos:end="6933:29">cpu_ldub_code</name><argument_list pos:start="6933:30" pos:end="6933:43">(<argument pos:start="6933:31" pos:end="6933:33"><expr pos:start="6933:31" pos:end="6933:33"><name pos:start="6933:31" pos:end="6933:33">env</name></expr></argument>, <argument pos:start="6933:36" pos:end="6933:42"><expr pos:start="6933:36" pos:end="6933:42"><name pos:start="6933:36" pos:end="6933:40"><name pos:start="6933:36" pos:end="6933:36">s</name><operator pos:start="6933:37" pos:end="6933:38">-&gt;</operator><name pos:start="6933:39" pos:end="6933:40">pc</name></name><operator pos:start="6933:41" pos:end="6933:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6935:9" pos:end="6935:31"><expr pos:start="6935:9" pos:end="6935:30"><name pos:start="6935:9" pos:end="6935:11">mod</name> <operator pos:start="6935:13" pos:end="6935:13">=</operator> <operator pos:start="6935:15" pos:end="6935:15">(</operator><name pos:start="6935:16" pos:end="6935:20">modrm</name> <operator pos:start="6935:22" pos:end="6935:23">&gt;&gt;</operator> <literal type="number" pos:start="6935:25" pos:end="6935:25">6</literal><operator pos:start="6935:26" pos:end="6935:26">)</operator> <operator pos:start="6935:28" pos:end="6935:28">&amp;</operator> <literal type="number" pos:start="6935:30" pos:end="6935:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="6937:9" pos:end="6939:28"><if pos:start="6937:9" pos:end="6939:28">if <condition pos:start="6937:12" pos:end="6937:21">(<expr pos:start="6937:13" pos:end="6937:20"><name pos:start="6937:13" pos:end="6937:15">mod</name> <operator pos:start="6937:17" pos:end="6937:18">==</operator> <literal type="number" pos:start="6937:20" pos:end="6937:20">3</literal></expr>)</condition><block type="pseudo" pos:start="6939:13" pos:end="6939:28"><block_content pos:start="6939:13" pos:end="6939:28">

            <goto pos:start="6939:13" pos:end="6939:28">goto <name pos:start="6939:18" pos:end="6939:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="6941:9" pos:end="6941:41"><expr pos:start="6941:9" pos:end="6941:40"><name pos:start="6941:9" pos:end="6941:11">reg</name> <operator pos:start="6941:13" pos:end="6941:13">=</operator> <operator pos:start="6941:15" pos:end="6941:15">(</operator><operator pos:start="6941:16" pos:end="6941:16">(</operator><name pos:start="6941:17" pos:end="6941:21">modrm</name> <operator pos:start="6941:23" pos:end="6941:24">&gt;&gt;</operator> <literal type="number" pos:start="6941:26" pos:end="6941:26">3</literal><operator pos:start="6941:27" pos:end="6941:27">)</operator> <operator pos:start="6941:29" pos:end="6941:29">&amp;</operator> <literal type="number" pos:start="6941:31" pos:end="6941:31">7</literal><operator pos:start="6941:32" pos:end="6941:32">)</operator> <operator pos:start="6941:34" pos:end="6941:34">|</operator> <name pos:start="6941:36" pos:end="6941:40">rex_r</name></expr>;</expr_stmt>

        <comment type="block" pos:start="6943:9" pos:end="6943:38">/* generate a generic store */</comment>

        <expr_stmt pos:start="6945:9" pos:end="6945:50"><expr pos:start="6945:9" pos:end="6945:49"><call pos:start="6945:9" pos:end="6945:49"><name pos:start="6945:9" pos:end="6945:22">gen_ldst_modrm</name><argument_list pos:start="6945:23" pos:end="6945:49">(<argument pos:start="6945:24" pos:end="6945:26"><expr pos:start="6945:24" pos:end="6945:26"><name pos:start="6945:24" pos:end="6945:26">env</name></expr></argument>, <argument pos:start="6945:29" pos:end="6945:29"><expr pos:start="6945:29" pos:end="6945:29"><name pos:start="6945:29" pos:end="6945:29">s</name></expr></argument>, <argument pos:start="6945:32" pos:end="6945:36"><expr pos:start="6945:32" pos:end="6945:36"><name pos:start="6945:32" pos:end="6945:36">modrm</name></expr></argument>, <argument pos:start="6945:39" pos:end="6945:40"><expr pos:start="6945:39" pos:end="6945:40"><name pos:start="6945:39" pos:end="6945:40">ot</name></expr></argument>, <argument pos:start="6945:43" pos:end="6945:45"><expr pos:start="6945:43" pos:end="6945:45"><name pos:start="6945:43" pos:end="6945:45">reg</name></expr></argument>, <argument pos:start="6945:48" pos:end="6945:48"><expr pos:start="6945:48" pos:end="6945:48"><literal type="number" pos:start="6945:48" pos:end="6945:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6947:9" pos:end="6947:14">break;</break>

    <case pos:start="6949:5" pos:end="6949:15">case <expr pos:start="6949:10" pos:end="6949:14"><literal type="number" pos:start="6949:10" pos:end="6949:14">0x1ae</literal></expr>:</case>

        <expr_stmt pos:start="6951:9" pos:end="6951:44"><expr pos:start="6951:9" pos:end="6951:43"><name pos:start="6951:9" pos:end="6951:13">modrm</name> <operator pos:start="6951:15" pos:end="6951:15">=</operator> <call pos:start="6951:17" pos:end="6951:43"><name pos:start="6951:17" pos:end="6951:29">cpu_ldub_code</name><argument_list pos:start="6951:30" pos:end="6951:43">(<argument pos:start="6951:31" pos:end="6951:33"><expr pos:start="6951:31" pos:end="6951:33"><name pos:start="6951:31" pos:end="6951:33">env</name></expr></argument>, <argument pos:start="6951:36" pos:end="6951:42"><expr pos:start="6951:36" pos:end="6951:42"><name pos:start="6951:36" pos:end="6951:40"><name pos:start="6951:36" pos:end="6951:36">s</name><operator pos:start="6951:37" pos:end="6951:38">-&gt;</operator><name pos:start="6951:39" pos:end="6951:40">pc</name></name><operator pos:start="6951:41" pos:end="6951:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6953:9" pos:end="6953:31"><expr pos:start="6953:9" pos:end="6953:30"><name pos:start="6953:9" pos:end="6953:11">mod</name> <operator pos:start="6953:13" pos:end="6953:13">=</operator> <operator pos:start="6953:15" pos:end="6953:15">(</operator><name pos:start="6953:16" pos:end="6953:20">modrm</name> <operator pos:start="6953:22" pos:end="6953:23">&gt;&gt;</operator> <literal type="number" pos:start="6953:25" pos:end="6953:25">6</literal><operator pos:start="6953:26" pos:end="6953:26">)</operator> <operator pos:start="6953:28" pos:end="6953:28">&amp;</operator> <literal type="number" pos:start="6953:30" pos:end="6953:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="6955:9" pos:end="6955:30"><expr pos:start="6955:9" pos:end="6955:29"><name pos:start="6955:9" pos:end="6955:10">op</name> <operator pos:start="6955:12" pos:end="6955:12">=</operator> <operator pos:start="6955:14" pos:end="6955:14">(</operator><name pos:start="6955:15" pos:end="6955:19">modrm</name> <operator pos:start="6955:21" pos:end="6955:22">&gt;&gt;</operator> <literal type="number" pos:start="6955:24" pos:end="6955:24">3</literal><operator pos:start="6955:25" pos:end="6955:25">)</operator> <operator pos:start="6955:27" pos:end="6955:27">&amp;</operator> <literal type="number" pos:start="6955:29" pos:end="6955:29">7</literal></expr>;</expr_stmt>

        <switch pos:start="6957:9" pos:end="7095:9">switch<condition pos:start="6957:15" pos:end="6957:18">(<expr pos:start="6957:16" pos:end="6957:17"><name pos:start="6957:16" pos:end="6957:17">op</name></expr>)</condition> <block pos:start="6957:20" pos:end="7095:9">{<block_content pos:start="6959:9" pos:end="7093:28">

        <case pos:start="6959:9" pos:end="6959:15">case <expr pos:start="6959:14" pos:end="6959:14"><literal type="number" pos:start="6959:14" pos:end="6959:14">0</literal></expr>:</case> <comment type="block" pos:start="6959:17" pos:end="6959:28">/* fxsave */</comment>

            <if_stmt pos:start="6961:13" pos:end="6965:32"><if pos:start="6961:13" pos:end="6965:32">if <condition pos:start="6961:16" pos:end="6963:42">(<expr pos:start="6961:17" pos:end="6963:41"><name pos:start="6961:17" pos:end="6961:19">mod</name> <operator pos:start="6961:21" pos:end="6961:22">==</operator> <literal type="number" pos:start="6961:24" pos:end="6961:24">3</literal> <operator pos:start="6961:26" pos:end="6961:27">||</operator> <operator pos:start="6961:29" pos:end="6961:29">!</operator><operator pos:start="6961:30" pos:end="6961:30">(</operator><name pos:start="6961:31" pos:end="6961:47"><name pos:start="6961:31" pos:end="6961:31">s</name><operator pos:start="6961:32" pos:end="6961:33">-&gt;</operator><name pos:start="6961:34" pos:end="6961:47">cpuid_features</name></name> <operator pos:start="6961:49" pos:end="6961:49">&amp;</operator> <name pos:start="6961:51" pos:end="6961:60">CPUID_FXSR</name><operator pos:start="6961:61" pos:end="6961:61">)</operator> <operator pos:start="6961:63" pos:end="6961:64">||</operator>

                <operator pos:start="6963:17" pos:end="6963:17">(</operator><name pos:start="6963:18" pos:end="6963:26"><name pos:start="6963:18" pos:end="6963:18">s</name><operator pos:start="6963:19" pos:end="6963:20">-&gt;</operator><name pos:start="6963:21" pos:end="6963:26">prefix</name></name> <operator pos:start="6963:28" pos:end="6963:28">&amp;</operator> <name pos:start="6963:30" pos:end="6963:40">PREFIX_LOCK</name><operator pos:start="6963:41" pos:end="6963:41">)</operator></expr>)</condition><block type="pseudo" pos:start="6965:17" pos:end="6965:32"><block_content pos:start="6965:17" pos:end="6965:32">

                <goto pos:start="6965:17" pos:end="6965:32">goto <name pos:start="6965:22" pos:end="6965:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="6967:13" pos:end="6973:13"><if pos:start="6967:13" pos:end="6973:13">if <condition pos:start="6967:16" pos:end="6967:67">(<expr pos:start="6967:17" pos:end="6967:66"><operator pos:start="6967:17" pos:end="6967:17">(</operator><name pos:start="6967:18" pos:end="6967:25"><name pos:start="6967:18" pos:end="6967:18">s</name><operator pos:start="6967:19" pos:end="6967:20">-&gt;</operator><name pos:start="6967:21" pos:end="6967:25">flags</name></name> <operator pos:start="6967:27" pos:end="6967:27">&amp;</operator> <name pos:start="6967:29" pos:end="6967:38">HF_EM_MASK</name><operator pos:start="6967:39" pos:end="6967:39">)</operator> <operator pos:start="6967:41" pos:end="6967:42">||</operator> <operator pos:start="6967:44" pos:end="6967:44">(</operator><name pos:start="6967:45" pos:end="6967:52"><name pos:start="6967:45" pos:end="6967:45">s</name><operator pos:start="6967:46" pos:end="6967:47">-&gt;</operator><name pos:start="6967:48" pos:end="6967:52">flags</name></name> <operator pos:start="6967:54" pos:end="6967:54">&amp;</operator> <name pos:start="6967:56" pos:end="6967:65">HF_TS_MASK</name><operator pos:start="6967:66" pos:end="6967:66">)</operator></expr>)</condition> <block pos:start="6967:69" pos:end="6973:13">{<block_content pos:start="6969:17" pos:end="6971:22">

                <expr_stmt pos:start="6969:17" pos:end="6969:69"><expr pos:start="6969:17" pos:end="6969:68"><call pos:start="6969:17" pos:end="6969:68"><name pos:start="6969:17" pos:end="6969:29">gen_exception</name><argument_list pos:start="6969:30" pos:end="6969:68">(<argument pos:start="6969:31" pos:end="6969:31"><expr pos:start="6969:31" pos:end="6969:31"><name pos:start="6969:31" pos:end="6969:31">s</name></expr></argument>, <argument pos:start="6969:34" pos:end="6969:44"><expr pos:start="6969:34" pos:end="6969:44"><name pos:start="6969:34" pos:end="6969:44">EXCP07_PREX</name></expr></argument>, <argument pos:start="6969:47" pos:end="6969:67"><expr pos:start="6969:47" pos:end="6969:67"><name pos:start="6969:47" pos:end="6969:54">pc_start</name> <operator pos:start="6969:56" pos:end="6969:56">-</operator> <name pos:start="6969:58" pos:end="6969:67"><name pos:start="6969:58" pos:end="6969:58">s</name><operator pos:start="6969:59" pos:end="6969:60">-&gt;</operator><name pos:start="6969:61" pos:end="6969:67">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="6971:17" pos:end="6971:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6975:13" pos:end="6975:66"><expr pos:start="6975:13" pos:end="6975:65"><call pos:start="6975:13" pos:end="6975:65"><name pos:start="6975:13" pos:end="6975:25">gen_lea_modrm</name><argument_list pos:start="6975:26" pos:end="6975:65">(<argument pos:start="6975:27" pos:end="6975:29"><expr pos:start="6975:27" pos:end="6975:29"><name pos:start="6975:27" pos:end="6975:29">env</name></expr></argument>, <argument pos:start="6975:32" pos:end="6975:32"><expr pos:start="6975:32" pos:end="6975:32"><name pos:start="6975:32" pos:end="6975:32">s</name></expr></argument>, <argument pos:start="6975:35" pos:end="6975:39"><expr pos:start="6975:35" pos:end="6975:39"><name pos:start="6975:35" pos:end="6975:39">modrm</name></expr></argument>, <argument pos:start="6975:42" pos:end="6975:50"><expr pos:start="6975:42" pos:end="6975:50"><operator pos:start="6975:42" pos:end="6975:42">&amp;</operator><name pos:start="6975:43" pos:end="6975:50">reg_addr</name></expr></argument>, <argument pos:start="6975:53" pos:end="6975:64"><expr pos:start="6975:53" pos:end="6975:64"><operator pos:start="6975:53" pos:end="6975:53">&amp;</operator><name pos:start="6975:54" pos:end="6975:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6977:13" pos:end="6979:43"><if pos:start="6977:13" pos:end="6979:43">if <condition pos:start="6977:16" pos:end="6977:42">(<expr pos:start="6977:17" pos:end="6977:41"><name pos:start="6977:17" pos:end="6977:24"><name pos:start="6977:17" pos:end="6977:17">s</name><operator pos:start="6977:18" pos:end="6977:19">-&gt;</operator><name pos:start="6977:20" pos:end="6977:24">cc_op</name></name> <operator pos:start="6977:26" pos:end="6977:27">!=</operator> <name pos:start="6977:29" pos:end="6977:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="6979:17" pos:end="6979:43"><block_content pos:start="6979:17" pos:end="6979:43">

                <expr_stmt pos:start="6979:17" pos:end="6979:43"><expr pos:start="6979:17" pos:end="6979:42"><call pos:start="6979:17" pos:end="6979:42"><name pos:start="6979:17" pos:end="6979:32">gen_op_set_cc_op</name><argument_list pos:start="6979:33" pos:end="6979:42">(<argument pos:start="6979:34" pos:end="6979:41"><expr pos:start="6979:34" pos:end="6979:41"><name pos:start="6979:34" pos:end="6979:41"><name pos:start="6979:34" pos:end="6979:34">s</name><operator pos:start="6979:35" pos:end="6979:36">-&gt;</operator><name pos:start="6979:37" pos:end="6979:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6981:13" pos:end="6981:46"><expr pos:start="6981:13" pos:end="6981:45"><call pos:start="6981:13" pos:end="6981:45"><name pos:start="6981:13" pos:end="6981:22">gen_jmp_im</name><argument_list pos:start="6981:23" pos:end="6981:45">(<argument pos:start="6981:24" pos:end="6981:44"><expr pos:start="6981:24" pos:end="6981:44"><name pos:start="6981:24" pos:end="6981:31">pc_start</name> <operator pos:start="6981:33" pos:end="6981:33">-</operator> <name pos:start="6981:35" pos:end="6981:44"><name pos:start="6981:35" pos:end="6981:35">s</name><operator pos:start="6981:36" pos:end="6981:37">-&gt;</operator><name pos:start="6981:38" pos:end="6981:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6983:13" pos:end="6983:79"><expr pos:start="6983:13" pos:end="6983:78"><call pos:start="6983:13" pos:end="6983:78"><name pos:start="6983:13" pos:end="6983:29">gen_helper_fxsave</name><argument_list pos:start="6983:30" pos:end="6983:78">(<argument pos:start="6983:31" pos:end="6983:37"><expr pos:start="6983:31" pos:end="6983:37"><name pos:start="6983:31" pos:end="6983:37">cpu_env</name></expr></argument>, <argument pos:start="6983:40" pos:end="6983:45"><expr pos:start="6983:40" pos:end="6983:45"><name pos:start="6983:40" pos:end="6983:45">cpu_A0</name></expr></argument>, <argument pos:start="6983:48" pos:end="6983:77"><expr pos:start="6983:48" pos:end="6983:77"><call pos:start="6983:48" pos:end="6983:77"><name pos:start="6983:48" pos:end="6983:60">tcg_const_i32</name><argument_list pos:start="6983:61" pos:end="6983:77">(<argument pos:start="6983:62" pos:end="6983:76"><expr pos:start="6983:62" pos:end="6983:76"><operator pos:start="6983:62" pos:end="6983:62">(</operator><name pos:start="6983:63" pos:end="6983:70"><name pos:start="6983:63" pos:end="6983:63">s</name><operator pos:start="6983:64" pos:end="6983:65">-&gt;</operator><name pos:start="6983:66" pos:end="6983:70">dflag</name></name> <operator pos:start="6983:72" pos:end="6983:73">==</operator> <literal type="number" pos:start="6983:75" pos:end="6983:75">2</literal><operator pos:start="6983:76" pos:end="6983:76">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="6985:13" pos:end="6985:18">break;</break>

        <case pos:start="6987:9" pos:end="6987:15">case <expr pos:start="6987:14" pos:end="6987:14"><literal type="number" pos:start="6987:14" pos:end="6987:14">1</literal></expr>:</case> <comment type="block" pos:start="6987:17" pos:end="6987:29">/* fxrstor */</comment>

            <if_stmt pos:start="6989:13" pos:end="6993:32"><if pos:start="6989:13" pos:end="6993:32">if <condition pos:start="6989:16" pos:end="6991:42">(<expr pos:start="6989:17" pos:end="6991:41"><name pos:start="6989:17" pos:end="6989:19">mod</name> <operator pos:start="6989:21" pos:end="6989:22">==</operator> <literal type="number" pos:start="6989:24" pos:end="6989:24">3</literal> <operator pos:start="6989:26" pos:end="6989:27">||</operator> <operator pos:start="6989:29" pos:end="6989:29">!</operator><operator pos:start="6989:30" pos:end="6989:30">(</operator><name pos:start="6989:31" pos:end="6989:47"><name pos:start="6989:31" pos:end="6989:31">s</name><operator pos:start="6989:32" pos:end="6989:33">-&gt;</operator><name pos:start="6989:34" pos:end="6989:47">cpuid_features</name></name> <operator pos:start="6989:49" pos:end="6989:49">&amp;</operator> <name pos:start="6989:51" pos:end="6989:60">CPUID_FXSR</name><operator pos:start="6989:61" pos:end="6989:61">)</operator> <operator pos:start="6989:63" pos:end="6989:64">||</operator>

                <operator pos:start="6991:17" pos:end="6991:17">(</operator><name pos:start="6991:18" pos:end="6991:26"><name pos:start="6991:18" pos:end="6991:18">s</name><operator pos:start="6991:19" pos:end="6991:20">-&gt;</operator><name pos:start="6991:21" pos:end="6991:26">prefix</name></name> <operator pos:start="6991:28" pos:end="6991:28">&amp;</operator> <name pos:start="6991:30" pos:end="6991:40">PREFIX_LOCK</name><operator pos:start="6991:41" pos:end="6991:41">)</operator></expr>)</condition><block type="pseudo" pos:start="6993:17" pos:end="6993:32"><block_content pos:start="6993:17" pos:end="6993:32">

                <goto pos:start="6993:17" pos:end="6993:32">goto <name pos:start="6993:22" pos:end="6993:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="6995:13" pos:end="7001:13"><if pos:start="6995:13" pos:end="7001:13">if <condition pos:start="6995:16" pos:end="6995:67">(<expr pos:start="6995:17" pos:end="6995:66"><operator pos:start="6995:17" pos:end="6995:17">(</operator><name pos:start="6995:18" pos:end="6995:25"><name pos:start="6995:18" pos:end="6995:18">s</name><operator pos:start="6995:19" pos:end="6995:20">-&gt;</operator><name pos:start="6995:21" pos:end="6995:25">flags</name></name> <operator pos:start="6995:27" pos:end="6995:27">&amp;</operator> <name pos:start="6995:29" pos:end="6995:38">HF_EM_MASK</name><operator pos:start="6995:39" pos:end="6995:39">)</operator> <operator pos:start="6995:41" pos:end="6995:42">||</operator> <operator pos:start="6995:44" pos:end="6995:44">(</operator><name pos:start="6995:45" pos:end="6995:52"><name pos:start="6995:45" pos:end="6995:45">s</name><operator pos:start="6995:46" pos:end="6995:47">-&gt;</operator><name pos:start="6995:48" pos:end="6995:52">flags</name></name> <operator pos:start="6995:54" pos:end="6995:54">&amp;</operator> <name pos:start="6995:56" pos:end="6995:65">HF_TS_MASK</name><operator pos:start="6995:66" pos:end="6995:66">)</operator></expr>)</condition> <block pos:start="6995:69" pos:end="7001:13">{<block_content pos:start="6997:17" pos:end="6999:22">

                <expr_stmt pos:start="6997:17" pos:end="6997:69"><expr pos:start="6997:17" pos:end="6997:68"><call pos:start="6997:17" pos:end="6997:68"><name pos:start="6997:17" pos:end="6997:29">gen_exception</name><argument_list pos:start="6997:30" pos:end="6997:68">(<argument pos:start="6997:31" pos:end="6997:31"><expr pos:start="6997:31" pos:end="6997:31"><name pos:start="6997:31" pos:end="6997:31">s</name></expr></argument>, <argument pos:start="6997:34" pos:end="6997:44"><expr pos:start="6997:34" pos:end="6997:44"><name pos:start="6997:34" pos:end="6997:44">EXCP07_PREX</name></expr></argument>, <argument pos:start="6997:47" pos:end="6997:67"><expr pos:start="6997:47" pos:end="6997:67"><name pos:start="6997:47" pos:end="6997:54">pc_start</name> <operator pos:start="6997:56" pos:end="6997:56">-</operator> <name pos:start="6997:58" pos:end="6997:67"><name pos:start="6997:58" pos:end="6997:58">s</name><operator pos:start="6997:59" pos:end="6997:60">-&gt;</operator><name pos:start="6997:61" pos:end="6997:67">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="6999:17" pos:end="6999:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="7003:13" pos:end="7003:66"><expr pos:start="7003:13" pos:end="7003:65"><call pos:start="7003:13" pos:end="7003:65"><name pos:start="7003:13" pos:end="7003:25">gen_lea_modrm</name><argument_list pos:start="7003:26" pos:end="7003:65">(<argument pos:start="7003:27" pos:end="7003:29"><expr pos:start="7003:27" pos:end="7003:29"><name pos:start="7003:27" pos:end="7003:29">env</name></expr></argument>, <argument pos:start="7003:32" pos:end="7003:32"><expr pos:start="7003:32" pos:end="7003:32"><name pos:start="7003:32" pos:end="7003:32">s</name></expr></argument>, <argument pos:start="7003:35" pos:end="7003:39"><expr pos:start="7003:35" pos:end="7003:39"><name pos:start="7003:35" pos:end="7003:39">modrm</name></expr></argument>, <argument pos:start="7003:42" pos:end="7003:50"><expr pos:start="7003:42" pos:end="7003:50"><operator pos:start="7003:42" pos:end="7003:42">&amp;</operator><name pos:start="7003:43" pos:end="7003:50">reg_addr</name></expr></argument>, <argument pos:start="7003:53" pos:end="7003:64"><expr pos:start="7003:53" pos:end="7003:64"><operator pos:start="7003:53" pos:end="7003:53">&amp;</operator><name pos:start="7003:54" pos:end="7003:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="7005:13" pos:end="7007:43"><if pos:start="7005:13" pos:end="7007:43">if <condition pos:start="7005:16" pos:end="7005:42">(<expr pos:start="7005:17" pos:end="7005:41"><name pos:start="7005:17" pos:end="7005:24"><name pos:start="7005:17" pos:end="7005:17">s</name><operator pos:start="7005:18" pos:end="7005:19">-&gt;</operator><name pos:start="7005:20" pos:end="7005:24">cc_op</name></name> <operator pos:start="7005:26" pos:end="7005:27">!=</operator> <name pos:start="7005:29" pos:end="7005:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="7007:17" pos:end="7007:43"><block_content pos:start="7007:17" pos:end="7007:43">

                <expr_stmt pos:start="7007:17" pos:end="7007:43"><expr pos:start="7007:17" pos:end="7007:42"><call pos:start="7007:17" pos:end="7007:42"><name pos:start="7007:17" pos:end="7007:32">gen_op_set_cc_op</name><argument_list pos:start="7007:33" pos:end="7007:42">(<argument pos:start="7007:34" pos:end="7007:41"><expr pos:start="7007:34" pos:end="7007:41"><name pos:start="7007:34" pos:end="7007:41"><name pos:start="7007:34" pos:end="7007:34">s</name><operator pos:start="7007:35" pos:end="7007:36">-&gt;</operator><name pos:start="7007:37" pos:end="7007:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="7009:13" pos:end="7009:46"><expr pos:start="7009:13" pos:end="7009:45"><call pos:start="7009:13" pos:end="7009:45"><name pos:start="7009:13" pos:end="7009:22">gen_jmp_im</name><argument_list pos:start="7009:23" pos:end="7009:45">(<argument pos:start="7009:24" pos:end="7009:44"><expr pos:start="7009:24" pos:end="7009:44"><name pos:start="7009:24" pos:end="7009:31">pc_start</name> <operator pos:start="7009:33" pos:end="7009:33">-</operator> <name pos:start="7009:35" pos:end="7009:44"><name pos:start="7009:35" pos:end="7009:35">s</name><operator pos:start="7009:36" pos:end="7009:37">-&gt;</operator><name pos:start="7009:38" pos:end="7009:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7011:13" pos:end="7013:63"><expr pos:start="7011:13" pos:end="7013:62"><call pos:start="7011:13" pos:end="7013:62"><name pos:start="7011:13" pos:end="7011:30">gen_helper_fxrstor</name><argument_list pos:start="7011:31" pos:end="7013:62">(<argument pos:start="7011:32" pos:end="7011:38"><expr pos:start="7011:32" pos:end="7011:38"><name pos:start="7011:32" pos:end="7011:38">cpu_env</name></expr></argument>, <argument pos:start="7011:41" pos:end="7011:46"><expr pos:start="7011:41" pos:end="7011:46"><name pos:start="7011:41" pos:end="7011:46">cpu_A0</name></expr></argument>,

                               <argument pos:start="7013:32" pos:end="7013:61"><expr pos:start="7013:32" pos:end="7013:61"><call pos:start="7013:32" pos:end="7013:61"><name pos:start="7013:32" pos:end="7013:44">tcg_const_i32</name><argument_list pos:start="7013:45" pos:end="7013:61">(<argument pos:start="7013:46" pos:end="7013:60"><expr pos:start="7013:46" pos:end="7013:60"><operator pos:start="7013:46" pos:end="7013:46">(</operator><name pos:start="7013:47" pos:end="7013:54"><name pos:start="7013:47" pos:end="7013:47">s</name><operator pos:start="7013:48" pos:end="7013:49">-&gt;</operator><name pos:start="7013:50" pos:end="7013:54">dflag</name></name> <operator pos:start="7013:56" pos:end="7013:57">==</operator> <literal type="number" pos:start="7013:59" pos:end="7013:59">2</literal><operator pos:start="7013:60" pos:end="7013:60">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="7015:13" pos:end="7015:18">break;</break>

        <case pos:start="7017:9" pos:end="7017:15">case <expr pos:start="7017:14" pos:end="7017:14"><literal type="number" pos:start="7017:14" pos:end="7017:14">2</literal></expr>:</case> <comment type="block" pos:start="7017:17" pos:end="7017:29">/* ldmxcsr */</comment>

        <case pos:start="7019:9" pos:end="7019:15">case <expr pos:start="7019:14" pos:end="7019:14"><literal type="number" pos:start="7019:14" pos:end="7019:14">3</literal></expr>:</case> <comment type="block" pos:start="7019:17" pos:end="7019:29">/* stmxcsr */</comment>

            <if_stmt pos:start="7021:13" pos:end="7027:13"><if pos:start="7021:13" pos:end="7027:13">if <condition pos:start="7021:16" pos:end="7021:38">(<expr pos:start="7021:17" pos:end="7021:37"><name pos:start="7021:17" pos:end="7021:24"><name pos:start="7021:17" pos:end="7021:17">s</name><operator pos:start="7021:18" pos:end="7021:19">-&gt;</operator><name pos:start="7021:20" pos:end="7021:24">flags</name></name> <operator pos:start="7021:26" pos:end="7021:26">&amp;</operator> <name pos:start="7021:28" pos:end="7021:37">HF_TS_MASK</name></expr>)</condition> <block pos:start="7021:40" pos:end="7027:13">{<block_content pos:start="7023:17" pos:end="7025:22">

                <expr_stmt pos:start="7023:17" pos:end="7023:69"><expr pos:start="7023:17" pos:end="7023:68"><call pos:start="7023:17" pos:end="7023:68"><name pos:start="7023:17" pos:end="7023:29">gen_exception</name><argument_list pos:start="7023:30" pos:end="7023:68">(<argument pos:start="7023:31" pos:end="7023:31"><expr pos:start="7023:31" pos:end="7023:31"><name pos:start="7023:31" pos:end="7023:31">s</name></expr></argument>, <argument pos:start="7023:34" pos:end="7023:44"><expr pos:start="7023:34" pos:end="7023:44"><name pos:start="7023:34" pos:end="7023:44">EXCP07_PREX</name></expr></argument>, <argument pos:start="7023:47" pos:end="7023:67"><expr pos:start="7023:47" pos:end="7023:67"><name pos:start="7023:47" pos:end="7023:54">pc_start</name> <operator pos:start="7023:56" pos:end="7023:56">-</operator> <name pos:start="7023:58" pos:end="7023:67"><name pos:start="7023:58" pos:end="7023:58">s</name><operator pos:start="7023:59" pos:end="7023:60">-&gt;</operator><name pos:start="7023:61" pos:end="7023:67">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="7025:17" pos:end="7025:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="7029:13" pos:end="7033:32"><if pos:start="7029:13" pos:end="7033:32">if <condition pos:start="7029:16" pos:end="7031:25">(<expr pos:start="7029:17" pos:end="7031:24"><operator pos:start="7029:17" pos:end="7029:17">(</operator><name pos:start="7029:18" pos:end="7029:25"><name pos:start="7029:18" pos:end="7029:18">s</name><operator pos:start="7029:19" pos:end="7029:20">-&gt;</operator><name pos:start="7029:21" pos:end="7029:25">flags</name></name> <operator pos:start="7029:27" pos:end="7029:27">&amp;</operator> <name pos:start="7029:29" pos:end="7029:38">HF_EM_MASK</name><operator pos:start="7029:39" pos:end="7029:39">)</operator> <operator pos:start="7029:41" pos:end="7029:42">||</operator> <operator pos:start="7029:44" pos:end="7029:44">!</operator><operator pos:start="7029:45" pos:end="7029:45">(</operator><name pos:start="7029:46" pos:end="7029:53"><name pos:start="7029:46" pos:end="7029:46">s</name><operator pos:start="7029:47" pos:end="7029:48">-&gt;</operator><name pos:start="7029:49" pos:end="7029:53">flags</name></name> <operator pos:start="7029:55" pos:end="7029:55">&amp;</operator> <name pos:start="7029:57" pos:end="7029:70">HF_OSFXSR_MASK</name><operator pos:start="7029:71" pos:end="7029:71">)</operator> <operator pos:start="7029:73" pos:end="7029:74">||</operator>

                <name pos:start="7031:17" pos:end="7031:19">mod</name> <operator pos:start="7031:21" pos:end="7031:22">==</operator> <literal type="number" pos:start="7031:24" pos:end="7031:24">3</literal></expr>)</condition><block type="pseudo" pos:start="7033:17" pos:end="7033:32"><block_content pos:start="7033:17" pos:end="7033:32">

                <goto pos:start="7033:17" pos:end="7033:32">goto <name pos:start="7033:22" pos:end="7033:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="7035:13" pos:end="7035:66"><expr pos:start="7035:13" pos:end="7035:65"><call pos:start="7035:13" pos:end="7035:65"><name pos:start="7035:13" pos:end="7035:25">gen_lea_modrm</name><argument_list pos:start="7035:26" pos:end="7035:65">(<argument pos:start="7035:27" pos:end="7035:29"><expr pos:start="7035:27" pos:end="7035:29"><name pos:start="7035:27" pos:end="7035:29">env</name></expr></argument>, <argument pos:start="7035:32" pos:end="7035:32"><expr pos:start="7035:32" pos:end="7035:32"><name pos:start="7035:32" pos:end="7035:32">s</name></expr></argument>, <argument pos:start="7035:35" pos:end="7035:39"><expr pos:start="7035:35" pos:end="7035:39"><name pos:start="7035:35" pos:end="7035:39">modrm</name></expr></argument>, <argument pos:start="7035:42" pos:end="7035:50"><expr pos:start="7035:42" pos:end="7035:50"><operator pos:start="7035:42" pos:end="7035:42">&amp;</operator><name pos:start="7035:43" pos:end="7035:50">reg_addr</name></expr></argument>, <argument pos:start="7035:53" pos:end="7035:64"><expr pos:start="7035:53" pos:end="7035:64"><operator pos:start="7035:53" pos:end="7035:53">&amp;</operator><name pos:start="7035:54" pos:end="7035:64">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="7037:13" pos:end="7051:13"><if pos:start="7037:13" pos:end="7045:13">if <condition pos:start="7037:16" pos:end="7037:24">(<expr pos:start="7037:17" pos:end="7037:23"><name pos:start="7037:17" pos:end="7037:18">op</name> <operator pos:start="7037:20" pos:end="7037:21">==</operator> <literal type="number" pos:start="7037:23" pos:end="7037:23">2</literal></expr>)</condition> <block pos:start="7037:26" pos:end="7045:13">{<block_content pos:start="7039:17" pos:end="7043:58">

                <expr_stmt pos:start="7039:17" pos:end="7039:56"><expr pos:start="7039:17" pos:end="7039:55"><call pos:start="7039:17" pos:end="7039:55"><name pos:start="7039:17" pos:end="7039:31">gen_op_ld_T0_A0</name><argument_list pos:start="7039:32" pos:end="7039:55">(<argument pos:start="7039:33" pos:end="7039:54"><expr pos:start="7039:33" pos:end="7039:54"><name pos:start="7039:33" pos:end="7039:39">OT_LONG</name> <operator pos:start="7039:41" pos:end="7039:41">+</operator> <name pos:start="7039:43" pos:end="7039:54"><name pos:start="7039:43" pos:end="7039:43">s</name><operator pos:start="7039:44" pos:end="7039:45">-&gt;</operator><name pos:start="7039:46" pos:end="7039:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7041:17" pos:end="7041:61"><expr pos:start="7041:17" pos:end="7041:60"><call pos:start="7041:17" pos:end="7041:60"><name pos:start="7041:17" pos:end="7041:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="7041:37" pos:end="7041:60">(<argument pos:start="7041:38" pos:end="7041:49"><expr pos:start="7041:38" pos:end="7041:49"><name pos:start="7041:38" pos:end="7041:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="7041:52" pos:end="7041:59"><expr pos:start="7041:52" pos:end="7041:59"><name pos:start="7041:52" pos:end="7041:59"><name pos:start="7041:52" pos:end="7041:56">cpu_T</name><index pos:start="7041:57" pos:end="7041:59">[<expr pos:start="7041:58" pos:end="7041:58"><literal type="number" pos:start="7041:58" pos:end="7041:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7043:17" pos:end="7043:58"><expr pos:start="7043:17" pos:end="7043:57"><call pos:start="7043:17" pos:end="7043:57"><name pos:start="7043:17" pos:end="7043:34">gen_helper_ldmxcsr</name><argument_list pos:start="7043:35" pos:end="7043:57">(<argument pos:start="7043:36" pos:end="7043:42"><expr pos:start="7043:36" pos:end="7043:42"><name pos:start="7043:36" pos:end="7043:42">cpu_env</name></expr></argument>, <argument pos:start="7043:45" pos:end="7043:56"><expr pos:start="7043:45" pos:end="7043:56"><name pos:start="7043:45" pos:end="7043:56">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="7045:15" pos:end="7051:13">else <block pos:start="7045:20" pos:end="7051:13">{<block_content pos:start="7047:17" pos:end="7049:56">

                <expr_stmt pos:start="7047:17" pos:end="7047:82"><expr pos:start="7047:17" pos:end="7047:81"><call pos:start="7047:17" pos:end="7047:81"><name pos:start="7047:17" pos:end="7047:32">tcg_gen_ld32u_tl</name><argument_list pos:start="7047:33" pos:end="7047:81">(<argument pos:start="7047:34" pos:end="7047:41"><expr pos:start="7047:34" pos:end="7047:41"><name pos:start="7047:34" pos:end="7047:41"><name pos:start="7047:34" pos:end="7047:38">cpu_T</name><index pos:start="7047:39" pos:end="7047:41">[<expr pos:start="7047:40" pos:end="7047:40"><literal type="number" pos:start="7047:40" pos:end="7047:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="7047:44" pos:end="7047:50"><expr pos:start="7047:44" pos:end="7047:50"><name pos:start="7047:44" pos:end="7047:50">cpu_env</name></expr></argument>, <argument pos:start="7047:53" pos:end="7047:80"><expr pos:start="7047:53" pos:end="7047:80"><call pos:start="7047:53" pos:end="7047:80"><name pos:start="7047:53" pos:end="7047:60">offsetof</name><argument_list pos:start="7047:61" pos:end="7047:80">(<argument pos:start="7047:62" pos:end="7047:72"><expr pos:start="7047:62" pos:end="7047:72"><name pos:start="7047:62" pos:end="7047:72">CPUX86State</name></expr></argument>, <argument pos:start="7047:75" pos:end="7047:79"><expr pos:start="7047:75" pos:end="7047:79"><name pos:start="7047:75" pos:end="7047:79">mxcsr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7049:17" pos:end="7049:56"><expr pos:start="7049:17" pos:end="7049:55"><call pos:start="7049:17" pos:end="7049:55"><name pos:start="7049:17" pos:end="7049:31">gen_op_st_T0_A0</name><argument_list pos:start="7049:32" pos:end="7049:55">(<argument pos:start="7049:33" pos:end="7049:54"><expr pos:start="7049:33" pos:end="7049:54"><name pos:start="7049:33" pos:end="7049:39">OT_LONG</name> <operator pos:start="7049:41" pos:end="7049:41">+</operator> <name pos:start="7049:43" pos:end="7049:54"><name pos:start="7049:43" pos:end="7049:43">s</name><operator pos:start="7049:44" pos:end="7049:45">-&gt;</operator><name pos:start="7049:46" pos:end="7049:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="7053:13" pos:end="7053:18">break;</break>

        <case pos:start="7055:9" pos:end="7055:15">case <expr pos:start="7055:14" pos:end="7055:14"><literal type="number" pos:start="7055:14" pos:end="7055:14">5</literal></expr>:</case> <comment type="block" pos:start="7055:17" pos:end="7055:28">/* lfence */</comment>

        <case pos:start="7057:9" pos:end="7057:15">case <expr pos:start="7057:14" pos:end="7057:14"><literal type="number" pos:start="7057:14" pos:end="7057:14">6</literal></expr>:</case> <comment type="block" pos:start="7057:17" pos:end="7057:28">/* mfence */</comment>

            <if_stmt pos:start="7059:13" pos:end="7061:32"><if pos:start="7059:13" pos:end="7061:32">if <condition pos:start="7059:16" pos:end="7059:76">(<expr pos:start="7059:17" pos:end="7059:75"><operator pos:start="7059:17" pos:end="7059:17">(</operator><name pos:start="7059:18" pos:end="7059:22">modrm</name> <operator pos:start="7059:24" pos:end="7059:24">&amp;</operator> <literal type="number" pos:start="7059:26" pos:end="7059:29">0xc7</literal><operator pos:start="7059:30" pos:end="7059:30">)</operator> <operator pos:start="7059:32" pos:end="7059:33">!=</operator> <literal type="number" pos:start="7059:35" pos:end="7059:38">0xc0</literal> <operator pos:start="7059:40" pos:end="7059:41">||</operator> <operator pos:start="7059:43" pos:end="7059:43">!</operator><operator pos:start="7059:44" pos:end="7059:44">(</operator><name pos:start="7059:45" pos:end="7059:61"><name pos:start="7059:45" pos:end="7059:45">s</name><operator pos:start="7059:46" pos:end="7059:47">-&gt;</operator><name pos:start="7059:48" pos:end="7059:61">cpuid_features</name></name> <operator pos:start="7059:63" pos:end="7059:63">&amp;</operator> <name pos:start="7059:65" pos:end="7059:74">CPUID_SSE2</name><operator pos:start="7059:75" pos:end="7059:75">)</operator></expr>)</condition><block type="pseudo" pos:start="7061:17" pos:end="7061:32"><block_content pos:start="7061:17" pos:end="7061:32">

                <goto pos:start="7061:17" pos:end="7061:32">goto <name pos:start="7061:22" pos:end="7061:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <break pos:start="7063:13" pos:end="7063:18">break;</break>

        <case pos:start="7065:9" pos:end="7065:15">case <expr pos:start="7065:14" pos:end="7065:14"><literal type="number" pos:start="7065:14" pos:end="7065:14">7</literal></expr>:</case> <comment type="block" pos:start="7065:17" pos:end="7065:38">/* sfence / clflush */</comment>

            <if_stmt pos:start="7067:13" pos:end="7087:13"><if pos:start="7067:13" pos:end="7077:13">if <condition pos:start="7067:16" pos:end="7067:39">(<expr pos:start="7067:17" pos:end="7067:38"><operator pos:start="7067:17" pos:end="7067:17">(</operator><name pos:start="7067:18" pos:end="7067:22">modrm</name> <operator pos:start="7067:24" pos:end="7067:24">&amp;</operator> <literal type="number" pos:start="7067:26" pos:end="7067:29">0xc7</literal><operator pos:start="7067:30" pos:end="7067:30">)</operator> <operator pos:start="7067:32" pos:end="7067:33">==</operator> <literal type="number" pos:start="7067:35" pos:end="7067:38">0xc0</literal></expr>)</condition> <block pos:start="7067:41" pos:end="7077:13">{<block_content pos:start="7073:17" pos:end="7075:36">

                <comment type="block" pos:start="7069:17" pos:end="7069:28">/* sfence */</comment>

                <comment type="block" pos:start="7071:17" pos:end="7071:79">/* XXX: also check for cpuid_ext2_features &amp; CPUID_EXT2_EMMX */</comment>

                <if_stmt pos:start="7073:17" pos:end="7075:36"><if pos:start="7073:17" pos:end="7075:36">if <condition pos:start="7073:20" pos:end="7073:53">(<expr pos:start="7073:21" pos:end="7073:52"><operator pos:start="7073:21" pos:end="7073:21">!</operator><operator pos:start="7073:22" pos:end="7073:22">(</operator><name pos:start="7073:23" pos:end="7073:39"><name pos:start="7073:23" pos:end="7073:23">s</name><operator pos:start="7073:24" pos:end="7073:25">-&gt;</operator><name pos:start="7073:26" pos:end="7073:39">cpuid_features</name></name> <operator pos:start="7073:41" pos:end="7073:41">&amp;</operator> <name pos:start="7073:43" pos:end="7073:51">CPUID_SSE</name><operator pos:start="7073:52" pos:end="7073:52">)</operator></expr>)</condition><block type="pseudo" pos:start="7075:21" pos:end="7075:36"><block_content pos:start="7075:21" pos:end="7075:36">

                    <goto pos:start="7075:21" pos:end="7075:36">goto <name pos:start="7075:26" pos:end="7075:35">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="7077:15" pos:end="7087:13">else <block pos:start="7077:20" pos:end="7087:13">{<block_content pos:start="7081:17" pos:end="7085:70">

                <comment type="block" pos:start="7079:17" pos:end="7079:29">/* clflush */</comment>

                <if_stmt pos:start="7081:17" pos:end="7083:36"><if pos:start="7081:17" pos:end="7083:36">if <condition pos:start="7081:20" pos:end="7081:57">(<expr pos:start="7081:21" pos:end="7081:56"><operator pos:start="7081:21" pos:end="7081:21">!</operator><operator pos:start="7081:22" pos:end="7081:22">(</operator><name pos:start="7081:23" pos:end="7081:39"><name pos:start="7081:23" pos:end="7081:23">s</name><operator pos:start="7081:24" pos:end="7081:25">-&gt;</operator><name pos:start="7081:26" pos:end="7081:39">cpuid_features</name></name> <operator pos:start="7081:41" pos:end="7081:41">&amp;</operator> <name pos:start="7081:43" pos:end="7081:55">CPUID_CLFLUSH</name><operator pos:start="7081:56" pos:end="7081:56">)</operator></expr>)</condition><block type="pseudo" pos:start="7083:21" pos:end="7083:36"><block_content pos:start="7083:21" pos:end="7083:36">

                    <goto pos:start="7083:21" pos:end="7083:36">goto <name pos:start="7083:26" pos:end="7083:35">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="7085:17" pos:end="7085:70"><expr pos:start="7085:17" pos:end="7085:69"><call pos:start="7085:17" pos:end="7085:69"><name pos:start="7085:17" pos:end="7085:29">gen_lea_modrm</name><argument_list pos:start="7085:30" pos:end="7085:69">(<argument pos:start="7085:31" pos:end="7085:33"><expr pos:start="7085:31" pos:end="7085:33"><name pos:start="7085:31" pos:end="7085:33">env</name></expr></argument>, <argument pos:start="7085:36" pos:end="7085:36"><expr pos:start="7085:36" pos:end="7085:36"><name pos:start="7085:36" pos:end="7085:36">s</name></expr></argument>, <argument pos:start="7085:39" pos:end="7085:43"><expr pos:start="7085:39" pos:end="7085:43"><name pos:start="7085:39" pos:end="7085:43">modrm</name></expr></argument>, <argument pos:start="7085:46" pos:end="7085:54"><expr pos:start="7085:46" pos:end="7085:54"><operator pos:start="7085:46" pos:end="7085:46">&amp;</operator><name pos:start="7085:47" pos:end="7085:54">reg_addr</name></expr></argument>, <argument pos:start="7085:57" pos:end="7085:68"><expr pos:start="7085:57" pos:end="7085:68"><operator pos:start="7085:57" pos:end="7085:57">&amp;</operator><name pos:start="7085:58" pos:end="7085:68">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="7089:13" pos:end="7089:18">break;</break>

        <default pos:start="7091:9" pos:end="7091:16">default:</default>

            <goto pos:start="7093:13" pos:end="7093:28">goto <name pos:start="7093:18" pos:end="7093:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="7097:9" pos:end="7097:14">break;</break>

    <case pos:start="7099:5" pos:end="7099:15">case <expr pos:start="7099:10" pos:end="7099:14"><literal type="number" pos:start="7099:10" pos:end="7099:14">0x10d</literal></expr>:</case> <comment type="block" pos:start="7099:17" pos:end="7099:40">/* 3DNow! prefetch(w) */</comment>

        <expr_stmt pos:start="7101:9" pos:end="7101:44"><expr pos:start="7101:9" pos:end="7101:43"><name pos:start="7101:9" pos:end="7101:13">modrm</name> <operator pos:start="7101:15" pos:end="7101:15">=</operator> <call pos:start="7101:17" pos:end="7101:43"><name pos:start="7101:17" pos:end="7101:29">cpu_ldub_code</name><argument_list pos:start="7101:30" pos:end="7101:43">(<argument pos:start="7101:31" pos:end="7101:33"><expr pos:start="7101:31" pos:end="7101:33"><name pos:start="7101:31" pos:end="7101:33">env</name></expr></argument>, <argument pos:start="7101:36" pos:end="7101:42"><expr pos:start="7101:36" pos:end="7101:42"><name pos:start="7101:36" pos:end="7101:40"><name pos:start="7101:36" pos:end="7101:36">s</name><operator pos:start="7101:37" pos:end="7101:38">-&gt;</operator><name pos:start="7101:39" pos:end="7101:40">pc</name></name><operator pos:start="7101:41" pos:end="7101:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7103:9" pos:end="7103:31"><expr pos:start="7103:9" pos:end="7103:30"><name pos:start="7103:9" pos:end="7103:11">mod</name> <operator pos:start="7103:13" pos:end="7103:13">=</operator> <operator pos:start="7103:15" pos:end="7103:15">(</operator><name pos:start="7103:16" pos:end="7103:20">modrm</name> <operator pos:start="7103:22" pos:end="7103:23">&gt;&gt;</operator> <literal type="number" pos:start="7103:25" pos:end="7103:25">6</literal><operator pos:start="7103:26" pos:end="7103:26">)</operator> <operator pos:start="7103:28" pos:end="7103:28">&amp;</operator> <literal type="number" pos:start="7103:30" pos:end="7103:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="7105:9" pos:end="7107:28"><if pos:start="7105:9" pos:end="7107:28">if <condition pos:start="7105:12" pos:end="7105:21">(<expr pos:start="7105:13" pos:end="7105:20"><name pos:start="7105:13" pos:end="7105:15">mod</name> <operator pos:start="7105:17" pos:end="7105:18">==</operator> <literal type="number" pos:start="7105:20" pos:end="7105:20">3</literal></expr>)</condition><block type="pseudo" pos:start="7107:13" pos:end="7107:28"><block_content pos:start="7107:13" pos:end="7107:28">

            <goto pos:start="7107:13" pos:end="7107:28">goto <name pos:start="7107:18" pos:end="7107:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="7109:9" pos:end="7109:62"><expr pos:start="7109:9" pos:end="7109:61"><call pos:start="7109:9" pos:end="7109:61"><name pos:start="7109:9" pos:end="7109:21">gen_lea_modrm</name><argument_list pos:start="7109:22" pos:end="7109:61">(<argument pos:start="7109:23" pos:end="7109:25"><expr pos:start="7109:23" pos:end="7109:25"><name pos:start="7109:23" pos:end="7109:25">env</name></expr></argument>, <argument pos:start="7109:28" pos:end="7109:28"><expr pos:start="7109:28" pos:end="7109:28"><name pos:start="7109:28" pos:end="7109:28">s</name></expr></argument>, <argument pos:start="7109:31" pos:end="7109:35"><expr pos:start="7109:31" pos:end="7109:35"><name pos:start="7109:31" pos:end="7109:35">modrm</name></expr></argument>, <argument pos:start="7109:38" pos:end="7109:46"><expr pos:start="7109:38" pos:end="7109:46"><operator pos:start="7109:38" pos:end="7109:38">&amp;</operator><name pos:start="7109:39" pos:end="7109:46">reg_addr</name></expr></argument>, <argument pos:start="7109:49" pos:end="7109:60"><expr pos:start="7109:49" pos:end="7109:60"><operator pos:start="7109:49" pos:end="7109:49">&amp;</operator><name pos:start="7109:50" pos:end="7109:60">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="7111:9" pos:end="7111:28">/* ignore for now */</comment>

        <break pos:start="7113:9" pos:end="7113:14">break;</break>

    <case pos:start="7115:5" pos:end="7115:15">case <expr pos:start="7115:10" pos:end="7115:14"><literal type="number" pos:start="7115:10" pos:end="7115:14">0x1aa</literal></expr>:</case> <comment type="block" pos:start="7115:17" pos:end="7115:25">/* rsm */</comment>

        <expr_stmt pos:start="7117:9" pos:end="7117:59"><expr pos:start="7117:9" pos:end="7117:58"><call pos:start="7117:9" pos:end="7117:58"><name pos:start="7117:9" pos:end="7117:31">gen_svm_check_intercept</name><argument_list pos:start="7117:32" pos:end="7117:58">(<argument pos:start="7117:33" pos:end="7117:33"><expr pos:start="7117:33" pos:end="7117:33"><name pos:start="7117:33" pos:end="7117:33">s</name></expr></argument>, <argument pos:start="7117:36" pos:end="7117:43"><expr pos:start="7117:36" pos:end="7117:43"><name pos:start="7117:36" pos:end="7117:43">pc_start</name></expr></argument>, <argument pos:start="7117:46" pos:end="7117:57"><expr pos:start="7117:46" pos:end="7117:57"><name pos:start="7117:46" pos:end="7117:57">SVM_EXIT_RSM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="7119:9" pos:end="7121:28"><if pos:start="7119:9" pos:end="7121:28">if <condition pos:start="7119:12" pos:end="7119:38">(<expr pos:start="7119:13" pos:end="7119:37"><operator pos:start="7119:13" pos:end="7119:13">!</operator><operator pos:start="7119:14" pos:end="7119:14">(</operator><name pos:start="7119:15" pos:end="7119:22"><name pos:start="7119:15" pos:end="7119:15">s</name><operator pos:start="7119:16" pos:end="7119:17">-&gt;</operator><name pos:start="7119:18" pos:end="7119:22">flags</name></name> <operator pos:start="7119:24" pos:end="7119:24">&amp;</operator> <name pos:start="7119:26" pos:end="7119:36">HF_SMM_MASK</name><operator pos:start="7119:37" pos:end="7119:37">)</operator></expr>)</condition><block type="pseudo" pos:start="7121:13" pos:end="7121:28"><block_content pos:start="7121:13" pos:end="7121:28">

            <goto pos:start="7121:13" pos:end="7121:28">goto <name pos:start="7121:18" pos:end="7121:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="7123:9" pos:end="7123:28"><expr pos:start="7123:9" pos:end="7123:27"><call pos:start="7123:9" pos:end="7123:27"><name pos:start="7123:9" pos:end="7123:24">gen_update_cc_op</name><argument_list pos:start="7123:25" pos:end="7123:27">(<argument pos:start="7123:26" pos:end="7123:26"><expr pos:start="7123:26" pos:end="7123:26"><name pos:start="7123:26" pos:end="7123:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7125:9" pos:end="7125:39"><expr pos:start="7125:9" pos:end="7125:38"><call pos:start="7125:9" pos:end="7125:38"><name pos:start="7125:9" pos:end="7125:18">gen_jmp_im</name><argument_list pos:start="7125:19" pos:end="7125:38">(<argument pos:start="7125:20" pos:end="7125:37"><expr pos:start="7125:20" pos:end="7125:37"><name pos:start="7125:20" pos:end="7125:24"><name pos:start="7125:20" pos:end="7125:20">s</name><operator pos:start="7125:21" pos:end="7125:22">-&gt;</operator><name pos:start="7125:23" pos:end="7125:24">pc</name></name> <operator pos:start="7125:26" pos:end="7125:26">-</operator> <name pos:start="7125:28" pos:end="7125:37"><name pos:start="7125:28" pos:end="7125:28">s</name><operator pos:start="7125:29" pos:end="7125:30">-&gt;</operator><name pos:start="7125:31" pos:end="7125:37">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7127:9" pos:end="7127:32"><expr pos:start="7127:9" pos:end="7127:31"><call pos:start="7127:9" pos:end="7127:31"><name pos:start="7127:9" pos:end="7127:22">gen_helper_rsm</name><argument_list pos:start="7127:23" pos:end="7127:31">(<argument pos:start="7127:24" pos:end="7127:30"><expr pos:start="7127:24" pos:end="7127:30"><name pos:start="7127:24" pos:end="7127:30">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7129:9" pos:end="7129:19"><expr pos:start="7129:9" pos:end="7129:18"><call pos:start="7129:9" pos:end="7129:18"><name pos:start="7129:9" pos:end="7129:15">gen_eob</name><argument_list pos:start="7129:16" pos:end="7129:18">(<argument pos:start="7129:17" pos:end="7129:17"><expr pos:start="7129:17" pos:end="7129:17"><name pos:start="7129:17" pos:end="7129:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7131:9" pos:end="7131:14">break;</break>

    <case pos:start="7133:5" pos:end="7133:15">case <expr pos:start="7133:10" pos:end="7133:14"><literal type="number" pos:start="7133:10" pos:end="7133:14">0x1b8</literal></expr>:</case> <comment type="block" pos:start="7133:17" pos:end="7133:35">/* SSE4.2 popcnt */</comment>

        <if_stmt pos:start="7135:9" pos:end="7139:28"><if pos:start="7135:9" pos:end="7139:28">if <condition pos:start="7135:12" pos:end="7137:25">(<expr pos:start="7135:13" pos:end="7137:24"><operator pos:start="7135:13" pos:end="7135:13">(</operator><name pos:start="7135:14" pos:end="7135:21">prefixes</name> <operator pos:start="7135:23" pos:end="7135:23">&amp;</operator> <operator pos:start="7135:25" pos:end="7135:25">(</operator><name pos:start="7135:26" pos:end="7135:36">PREFIX_REPZ</name> <operator pos:start="7135:38" pos:end="7135:38">|</operator> <name pos:start="7135:40" pos:end="7135:50">PREFIX_LOCK</name> <operator pos:start="7135:52" pos:end="7135:52">|</operator> <name pos:start="7135:54" pos:end="7135:65">PREFIX_REPNZ</name><operator pos:start="7135:66" pos:end="7135:66">)</operator><operator pos:start="7135:67" pos:end="7135:67">)</operator> <operator pos:start="7135:69" pos:end="7135:70">!=</operator>

             <name pos:start="7137:14" pos:end="7137:24">PREFIX_REPZ</name></expr>)</condition><block type="pseudo" pos:start="7139:13" pos:end="7139:28"><block_content pos:start="7139:13" pos:end="7139:28">

            <goto pos:start="7139:13" pos:end="7139:28">goto <name pos:start="7139:18" pos:end="7139:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="7141:9" pos:end="7143:28"><if pos:start="7141:9" pos:end="7143:28">if <condition pos:start="7141:12" pos:end="7141:56">(<expr pos:start="7141:13" pos:end="7141:55"><operator pos:start="7141:13" pos:end="7141:13">!</operator><operator pos:start="7141:14" pos:end="7141:14">(</operator><name pos:start="7141:15" pos:end="7141:35"><name pos:start="7141:15" pos:end="7141:15">s</name><operator pos:start="7141:16" pos:end="7141:17">-&gt;</operator><name pos:start="7141:18" pos:end="7141:35">cpuid_ext_features</name></name> <operator pos:start="7141:37" pos:end="7141:37">&amp;</operator> <name pos:start="7141:39" pos:end="7141:54">CPUID_EXT_POPCNT</name><operator pos:start="7141:55" pos:end="7141:55">)</operator></expr>)</condition><block type="pseudo" pos:start="7143:13" pos:end="7143:28"><block_content pos:start="7143:13" pos:end="7143:28">

            <goto pos:start="7143:13" pos:end="7143:28">goto <name pos:start="7143:18" pos:end="7143:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="7147:9" pos:end="7147:44"><expr pos:start="7147:9" pos:end="7147:43"><name pos:start="7147:9" pos:end="7147:13">modrm</name> <operator pos:start="7147:15" pos:end="7147:15">=</operator> <call pos:start="7147:17" pos:end="7147:43"><name pos:start="7147:17" pos:end="7147:29">cpu_ldub_code</name><argument_list pos:start="7147:30" pos:end="7147:43">(<argument pos:start="7147:31" pos:end="7147:33"><expr pos:start="7147:31" pos:end="7147:33"><name pos:start="7147:31" pos:end="7147:33">env</name></expr></argument>, <argument pos:start="7147:36" pos:end="7147:42"><expr pos:start="7147:36" pos:end="7147:42"><name pos:start="7147:36" pos:end="7147:40"><name pos:start="7147:36" pos:end="7147:36">s</name><operator pos:start="7147:37" pos:end="7147:38">-&gt;</operator><name pos:start="7147:39" pos:end="7147:40">pc</name></name><operator pos:start="7147:41" pos:end="7147:42">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7149:9" pos:end="7149:41"><expr pos:start="7149:9" pos:end="7149:40"><name pos:start="7149:9" pos:end="7149:11">reg</name> <operator pos:start="7149:13" pos:end="7149:13">=</operator> <operator pos:start="7149:15" pos:end="7149:15">(</operator><operator pos:start="7149:16" pos:end="7149:16">(</operator><name pos:start="7149:17" pos:end="7149:21">modrm</name> <operator pos:start="7149:23" pos:end="7149:24">&gt;&gt;</operator> <literal type="number" pos:start="7149:26" pos:end="7149:26">3</literal><operator pos:start="7149:27" pos:end="7149:27">)</operator> <operator pos:start="7149:29" pos:end="7149:29">&amp;</operator> <literal type="number" pos:start="7149:31" pos:end="7149:31">7</literal><operator pos:start="7149:32" pos:end="7149:32">)</operator> <operator pos:start="7149:34" pos:end="7149:34">|</operator> <name pos:start="7149:36" pos:end="7149:40">rex_r</name></expr>;</expr_stmt>



        <if_stmt pos:start="7153:9" pos:end="7163:25"><if pos:start="7153:9" pos:end="7155:25">if <condition pos:start="7153:12" pos:end="7153:36">(<expr pos:start="7153:13" pos:end="7153:35"><name pos:start="7153:13" pos:end="7153:21"><name pos:start="7153:13" pos:end="7153:13">s</name><operator pos:start="7153:14" pos:end="7153:15">-&gt;</operator><name pos:start="7153:16" pos:end="7153:21">prefix</name></name> <operator pos:start="7153:23" pos:end="7153:23">&amp;</operator> <name pos:start="7153:25" pos:end="7153:35">PREFIX_DATA</name></expr>)</condition><block type="pseudo" pos:start="7155:13" pos:end="7155:25"><block_content pos:start="7155:13" pos:end="7155:25">

            <expr_stmt pos:start="7155:13" pos:end="7155:25"><expr pos:start="7155:13" pos:end="7155:24"><name pos:start="7155:13" pos:end="7155:14">ot</name> <operator pos:start="7155:16" pos:end="7155:16">=</operator> <name pos:start="7155:18" pos:end="7155:24">OT_WORD</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="7157:9" pos:end="7159:25">else if <condition pos:start="7157:17" pos:end="7157:31">(<expr pos:start="7157:18" pos:end="7157:30"><name pos:start="7157:18" pos:end="7157:25"><name pos:start="7157:18" pos:end="7157:18">s</name><operator pos:start="7157:19" pos:end="7157:20">-&gt;</operator><name pos:start="7157:21" pos:end="7157:25">dflag</name></name> <operator pos:start="7157:27" pos:end="7157:28">!=</operator> <literal type="number" pos:start="7157:30" pos:end="7157:30">2</literal></expr>)</condition><block type="pseudo" pos:start="7159:13" pos:end="7159:25"><block_content pos:start="7159:13" pos:end="7159:25">

            <expr_stmt pos:start="7159:13" pos:end="7159:25"><expr pos:start="7159:13" pos:end="7159:24"><name pos:start="7159:13" pos:end="7159:14">ot</name> <operator pos:start="7159:16" pos:end="7159:16">=</operator> <name pos:start="7159:18" pos:end="7159:24">OT_LONG</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="7161:9" pos:end="7163:25">else<block type="pseudo" pos:start="7163:13" pos:end="7163:25"><block_content pos:start="7163:13" pos:end="7163:25">

            <expr_stmt pos:start="7163:13" pos:end="7163:25"><expr pos:start="7163:13" pos:end="7163:24"><name pos:start="7163:13" pos:end="7163:14">ot</name> <operator pos:start="7163:16" pos:end="7163:16">=</operator> <name pos:start="7163:18" pos:end="7163:24">OT_QUAD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="7167:9" pos:end="7167:54"><expr pos:start="7167:9" pos:end="7167:53"><call pos:start="7167:9" pos:end="7167:53"><name pos:start="7167:9" pos:end="7167:22">gen_ldst_modrm</name><argument_list pos:start="7167:23" pos:end="7167:53">(<argument pos:start="7167:24" pos:end="7167:26"><expr pos:start="7167:24" pos:end="7167:26"><name pos:start="7167:24" pos:end="7167:26">env</name></expr></argument>, <argument pos:start="7167:29" pos:end="7167:29"><expr pos:start="7167:29" pos:end="7167:29"><name pos:start="7167:29" pos:end="7167:29">s</name></expr></argument>, <argument pos:start="7167:32" pos:end="7167:36"><expr pos:start="7167:32" pos:end="7167:36"><name pos:start="7167:32" pos:end="7167:36">modrm</name></expr></argument>, <argument pos:start="7167:39" pos:end="7167:40"><expr pos:start="7167:39" pos:end="7167:40"><name pos:start="7167:39" pos:end="7167:40">ot</name></expr></argument>, <argument pos:start="7167:43" pos:end="7167:49"><expr pos:start="7167:43" pos:end="7167:49"><name pos:start="7167:43" pos:end="7167:49">OR_TMP0</name></expr></argument>, <argument pos:start="7167:52" pos:end="7167:52"><expr pos:start="7167:52" pos:end="7167:52"><literal type="number" pos:start="7167:52" pos:end="7167:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7169:9" pos:end="7169:74"><expr pos:start="7169:9" pos:end="7169:73"><call pos:start="7169:9" pos:end="7169:73"><name pos:start="7169:9" pos:end="7169:25">gen_helper_popcnt</name><argument_list pos:start="7169:26" pos:end="7169:73">(<argument pos:start="7169:27" pos:end="7169:34"><expr pos:start="7169:27" pos:end="7169:34"><name pos:start="7169:27" pos:end="7169:34"><name pos:start="7169:27" pos:end="7169:31">cpu_T</name><index pos:start="7169:32" pos:end="7169:34">[<expr pos:start="7169:33" pos:end="7169:33"><literal type="number" pos:start="7169:33" pos:end="7169:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="7169:37" pos:end="7169:43"><expr pos:start="7169:37" pos:end="7169:43"><name pos:start="7169:37" pos:end="7169:43">cpu_env</name></expr></argument>, <argument pos:start="7169:46" pos:end="7169:53"><expr pos:start="7169:46" pos:end="7169:53"><name pos:start="7169:46" pos:end="7169:53"><name pos:start="7169:46" pos:end="7169:50">cpu_T</name><index pos:start="7169:51" pos:end="7169:53">[<expr pos:start="7169:52" pos:end="7169:52"><literal type="number" pos:start="7169:52" pos:end="7169:52">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="7169:56" pos:end="7169:72"><expr pos:start="7169:56" pos:end="7169:72"><call pos:start="7169:56" pos:end="7169:72"><name pos:start="7169:56" pos:end="7169:68">tcg_const_i32</name><argument_list pos:start="7169:69" pos:end="7169:72">(<argument pos:start="7169:70" pos:end="7169:71"><expr pos:start="7169:70" pos:end="7169:71"><name pos:start="7169:70" pos:end="7169:71">ot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7171:9" pos:end="7171:35"><expr pos:start="7171:9" pos:end="7171:34"><call pos:start="7171:9" pos:end="7171:34"><name pos:start="7171:9" pos:end="7171:25">gen_op_mov_reg_T0</name><argument_list pos:start="7171:26" pos:end="7171:34">(<argument pos:start="7171:27" pos:end="7171:28"><expr pos:start="7171:27" pos:end="7171:28"><name pos:start="7171:27" pos:end="7171:28">ot</name></expr></argument>, <argument pos:start="7171:31" pos:end="7171:33"><expr pos:start="7171:31" pos:end="7171:33"><name pos:start="7171:31" pos:end="7171:33">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="7175:9" pos:end="7175:32"><expr pos:start="7175:9" pos:end="7175:31"><name pos:start="7175:9" pos:end="7175:16"><name pos:start="7175:9" pos:end="7175:9">s</name><operator pos:start="7175:10" pos:end="7175:11">-&gt;</operator><name pos:start="7175:12" pos:end="7175:16">cc_op</name></name> <operator pos:start="7175:18" pos:end="7175:18">=</operator> <name pos:start="7175:20" pos:end="7175:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="7177:9" pos:end="7177:14">break;</break>

    <case pos:start="7179:5" pos:end="7179:25">case <expr pos:start="7179:10" pos:end="7179:24"><literal type="number" pos:start="7179:10" pos:end="7179:14">0x10e</literal> <operator pos:start="7179:16" pos:end="7179:18">...</operator> <literal type="number" pos:start="7179:20" pos:end="7179:24">0x10f</literal></expr>:</case>

        <comment type="block" pos:start="7181:9" pos:end="7181:50">/* 3DNow! instructions, ignore prefixes */</comment>

        <expr_stmt pos:start="7183:9" pos:end="7183:65"><expr pos:start="7183:9" pos:end="7183:64"><name pos:start="7183:9" pos:end="7183:17"><name pos:start="7183:9" pos:end="7183:9">s</name><operator pos:start="7183:10" pos:end="7183:11">-&gt;</operator><name pos:start="7183:12" pos:end="7183:17">prefix</name></name> <operator pos:start="7183:19" pos:end="7183:20">&amp;=</operator> <operator pos:start="7183:22" pos:end="7183:22">~</operator><operator pos:start="7183:23" pos:end="7183:23">(</operator><name pos:start="7183:24" pos:end="7183:34">PREFIX_REPZ</name> <operator pos:start="7183:36" pos:end="7183:36">|</operator> <name pos:start="7183:38" pos:end="7183:49">PREFIX_REPNZ</name> <operator pos:start="7183:51" pos:end="7183:51">|</operator> <name pos:start="7183:53" pos:end="7183:63">PREFIX_DATA</name><operator pos:start="7183:64" pos:end="7183:64">)</operator></expr>;</expr_stmt>

    <case pos:start="7185:5" pos:end="7185:25">case <expr pos:start="7185:10" pos:end="7185:24"><literal type="number" pos:start="7185:10" pos:end="7185:14">0x110</literal> <operator pos:start="7185:16" pos:end="7185:18">...</operator> <literal type="number" pos:start="7185:20" pos:end="7185:24">0x117</literal></expr>:</case>

    <case pos:start="7187:5" pos:end="7187:25">case <expr pos:start="7187:10" pos:end="7187:24"><literal type="number" pos:start="7187:10" pos:end="7187:14">0x128</literal> <operator pos:start="7187:16" pos:end="7187:18">...</operator> <literal type="number" pos:start="7187:20" pos:end="7187:24">0x12f</literal></expr>:</case>

    <case pos:start="7189:5" pos:end="7189:25">case <expr pos:start="7189:10" pos:end="7189:24"><literal type="number" pos:start="7189:10" pos:end="7189:14">0x138</literal> <operator pos:start="7189:16" pos:end="7189:18">...</operator> <literal type="number" pos:start="7189:20" pos:end="7189:24">0x13a</literal></expr>:</case>

    <case pos:start="7191:5" pos:end="7191:25">case <expr pos:start="7191:10" pos:end="7191:24"><literal type="number" pos:start="7191:10" pos:end="7191:14">0x150</literal> <operator pos:start="7191:16" pos:end="7191:18">...</operator> <literal type="number" pos:start="7191:20" pos:end="7191:24">0x179</literal></expr>:</case>

    <case pos:start="7193:5" pos:end="7193:25">case <expr pos:start="7193:10" pos:end="7193:24"><literal type="number" pos:start="7193:10" pos:end="7193:14">0x17c</literal> <operator pos:start="7193:16" pos:end="7193:18">...</operator> <literal type="number" pos:start="7193:20" pos:end="7193:24">0x17f</literal></expr>:</case>

    <case pos:start="7195:5" pos:end="7195:15">case <expr pos:start="7195:10" pos:end="7195:14"><literal type="number" pos:start="7195:10" pos:end="7195:14">0x1c2</literal></expr>:</case>

    <case pos:start="7197:5" pos:end="7197:25">case <expr pos:start="7197:10" pos:end="7197:24"><literal type="number" pos:start="7197:10" pos:end="7197:14">0x1c4</literal> <operator pos:start="7197:16" pos:end="7197:18">...</operator> <literal type="number" pos:start="7197:20" pos:end="7197:24">0x1c6</literal></expr>:</case>

    <case pos:start="7199:5" pos:end="7199:25">case <expr pos:start="7199:10" pos:end="7199:24"><literal type="number" pos:start="7199:10" pos:end="7199:14">0x1d0</literal> <operator pos:start="7199:16" pos:end="7199:18">...</operator> <literal type="number" pos:start="7199:20" pos:end="7199:24">0x1fe</literal></expr>:</case>

        <expr_stmt pos:start="7201:9" pos:end="7201:44"><expr pos:start="7201:9" pos:end="7201:43"><call pos:start="7201:9" pos:end="7201:43"><name pos:start="7201:9" pos:end="7201:15">gen_sse</name><argument_list pos:start="7201:16" pos:end="7201:43">(<argument pos:start="7201:17" pos:end="7201:19"><expr pos:start="7201:17" pos:end="7201:19"><name pos:start="7201:17" pos:end="7201:19">env</name></expr></argument>, <argument pos:start="7201:22" pos:end="7201:22"><expr pos:start="7201:22" pos:end="7201:22"><name pos:start="7201:22" pos:end="7201:22">s</name></expr></argument>, <argument pos:start="7201:25" pos:end="7201:25"><expr pos:start="7201:25" pos:end="7201:25"><name pos:start="7201:25" pos:end="7201:25">b</name></expr></argument>, <argument pos:start="7201:28" pos:end="7201:35"><expr pos:start="7201:28" pos:end="7201:35"><name pos:start="7201:28" pos:end="7201:35">pc_start</name></expr></argument>, <argument pos:start="7201:38" pos:end="7201:42"><expr pos:start="7201:38" pos:end="7201:42"><name pos:start="7201:38" pos:end="7201:42">rex_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7203:9" pos:end="7203:14">break;</break>

    <default pos:start="7205:5" pos:end="7205:12">default:</default>

        <goto pos:start="7207:9" pos:end="7207:24">goto <name pos:start="7207:14" pos:end="7207:23">illegal_op</name>;</goto>

    </block_content>}</block></switch>

    <comment type="block" pos:start="7211:5" pos:end="7211:25">/* lock generation */</comment>

    <if_stmt pos:start="7213:5" pos:end="7215:28"><if pos:start="7213:5" pos:end="7215:28">if <condition pos:start="7213:8" pos:end="7213:32">(<expr pos:start="7213:9" pos:end="7213:31"><name pos:start="7213:9" pos:end="7213:17"><name pos:start="7213:9" pos:end="7213:9">s</name><operator pos:start="7213:10" pos:end="7213:11">-&gt;</operator><name pos:start="7213:12" pos:end="7213:17">prefix</name></name> <operator pos:start="7213:19" pos:end="7213:19">&amp;</operator> <name pos:start="7213:21" pos:end="7213:31">PREFIX_LOCK</name></expr>)</condition><block type="pseudo" pos:start="7215:9" pos:end="7215:28"><block_content pos:start="7215:9" pos:end="7215:28">

        <expr_stmt pos:start="7215:9" pos:end="7215:28"><expr pos:start="7215:9" pos:end="7215:27"><call pos:start="7215:9" pos:end="7215:27"><name pos:start="7215:9" pos:end="7215:25">gen_helper_unlock</name><argument_list pos:start="7215:26" pos:end="7215:27">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="7217:5" pos:end="7217:17">return <expr pos:start="7217:12" pos:end="7217:16"><name pos:start="7217:12" pos:end="7217:16"><name pos:start="7217:12" pos:end="7217:12">s</name><operator pos:start="7217:13" pos:end="7217:14">-&gt;</operator><name pos:start="7217:15" pos:end="7217:16">pc</name></name></expr>;</return>

 <label pos:start="7219:2" pos:end="7219:12"><name pos:start="7219:2" pos:end="7219:11">illegal_op</name>:</label>

    <if_stmt pos:start="7221:5" pos:end="7223:28"><if pos:start="7221:5" pos:end="7223:28">if <condition pos:start="7221:8" pos:end="7221:32">(<expr pos:start="7221:9" pos:end="7221:31"><name pos:start="7221:9" pos:end="7221:17"><name pos:start="7221:9" pos:end="7221:9">s</name><operator pos:start="7221:10" pos:end="7221:11">-&gt;</operator><name pos:start="7221:12" pos:end="7221:17">prefix</name></name> <operator pos:start="7221:19" pos:end="7221:19">&amp;</operator> <name pos:start="7221:21" pos:end="7221:31">PREFIX_LOCK</name></expr>)</condition><block type="pseudo" pos:start="7223:9" pos:end="7223:28"><block_content pos:start="7223:9" pos:end="7223:28">

        <expr_stmt pos:start="7223:9" pos:end="7223:28"><expr pos:start="7223:9" pos:end="7223:27"><call pos:start="7223:9" pos:end="7223:27"><name pos:start="7223:9" pos:end="7223:25">gen_helper_unlock</name><argument_list pos:start="7223:26" pos:end="7223:27">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="7225:5" pos:end="7225:48">/* XXX: ensure that no lock was generated */</comment>

    <expr_stmt pos:start="7227:5" pos:end="7227:58"><expr pos:start="7227:5" pos:end="7227:57"><call pos:start="7227:5" pos:end="7227:57"><name pos:start="7227:5" pos:end="7227:17">gen_exception</name><argument_list pos:start="7227:18" pos:end="7227:57">(<argument pos:start="7227:19" pos:end="7227:19"><expr pos:start="7227:19" pos:end="7227:19"><name pos:start="7227:19" pos:end="7227:19">s</name></expr></argument>, <argument pos:start="7227:22" pos:end="7227:33"><expr pos:start="7227:22" pos:end="7227:33"><name pos:start="7227:22" pos:end="7227:33">EXCP06_ILLOP</name></expr></argument>, <argument pos:start="7227:36" pos:end="7227:56"><expr pos:start="7227:36" pos:end="7227:56"><name pos:start="7227:36" pos:end="7227:43">pc_start</name> <operator pos:start="7227:45" pos:end="7227:45">-</operator> <name pos:start="7227:47" pos:end="7227:56"><name pos:start="7227:47" pos:end="7227:47">s</name><operator pos:start="7227:48" pos:end="7227:49">-&gt;</operator><name pos:start="7227:50" pos:end="7227:56">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="7229:5" pos:end="7229:17">return <expr pos:start="7229:12" pos:end="7229:16"><name pos:start="7229:12" pos:end="7229:16"><name pos:start="7229:12" pos:end="7229:12">s</name><operator pos:start="7229:13" pos:end="7229:14">-&gt;</operator><name pos:start="7229:15" pos:end="7229:16">pc</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
