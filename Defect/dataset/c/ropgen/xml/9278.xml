<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9278.c" pos:tabs="8"><function pos:start="1:1" pos:end="153:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:30">mcf_fec_receive</name><parameter_list pos:start="1:31" pos:end="1:83">(<parameter pos:start="1:32" pos:end="1:49"><decl pos:start="1:32" pos:end="1:49"><type pos:start="1:32" pos:end="1:49"><name pos:start="1:32" pos:end="1:45">NetClientState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:49">nc</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:69"><decl pos:start="1:52" pos:end="1:69"><type pos:start="1:52" pos:end="1:69"><specifier pos:start="1:52" pos:end="1:56">const</specifier> <name pos:start="1:58" pos:end="1:64">uint8_t</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">buf</name></decl></parameter>, <parameter pos:start="1:72" pos:end="1:82"><decl pos:start="1:72" pos:end="1:82"><type pos:start="1:72" pos:end="1:82"><name pos:start="1:72" pos:end="1:77">size_t</name></type> <name pos:start="1:79" pos:end="1:82">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="153:1">{<block_content pos:start="5:5" pos:end="151:19">

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">mcf_fec_state</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:46">= <expr pos:start="5:24" pos:end="5:46"><call pos:start="5:24" pos:end="5:46"><name pos:start="5:24" pos:end="5:42">qemu_get_nic_opaque</name><argument_list pos:start="5:43" pos:end="5:46">(<argument pos:start="5:44" pos:end="5:45"><expr pos:start="5:44" pos:end="5:45"><name pos:start="5:44" pos:end="5:45">nc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:14">mcf_fec_bd</name></type> <name pos:start="7:16" pos:end="7:17">bd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:18">flags</name> <init pos:start="9:20" pos:end="9:22">= <expr pos:start="9:22" pos:end="9:22"><literal type="number" pos:start="9:22" pos:end="9:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:17">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:16">crc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:21">buf_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">uint8_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:20">crc_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:16">int</name></type> <name pos:start="19:18" pos:end="19:24">buf_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:19"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:10">size_t</name></type> <name pos:start="21:12" pos:end="21:18">retsize</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:36"><expr pos:start="25:5" pos:end="25:35"><call pos:start="25:5" pos:end="25:35"><name pos:start="25:5" pos:end="25:11">DPRINTF</name><argument_list pos:start="25:12" pos:end="25:35">(<argument pos:start="25:13" pos:end="25:28"><expr pos:start="25:13" pos:end="25:28"><literal type="string" pos:start="25:13" pos:end="25:28">"do_rx len %d\n"</literal></expr></argument>, <argument pos:start="25:31" pos:end="25:34"><expr pos:start="25:31" pos:end="25:34"><name pos:start="25:31" pos:end="25:34">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:23">(<expr pos:start="27:9" pos:end="27:22"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:22"><name pos:start="27:10" pos:end="27:10">s</name><operator pos:start="27:11" pos:end="27:12">-&gt;</operator><name pos:start="27:13" pos:end="27:22">rx_enabled</name></name></expr>)</condition> <block pos:start="27:25" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:18">

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="33:5" pos:end="33:31">/* 4 bytes for the CRC.  */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:14"><expr pos:start="35:5" pos:end="35:13"><name pos:start="35:5" pos:end="35:8">size</name> <operator pos:start="35:10" pos:end="35:11">+=</operator> <literal type="number" pos:start="35:13" pos:end="35:13">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:44"><expr pos:start="37:5" pos:end="37:43"><name pos:start="37:5" pos:end="37:7">crc</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:43"><name pos:start="37:11" pos:end="37:21">cpu_to_be32</name><argument_list pos:start="37:22" pos:end="37:43">(<argument pos:start="37:23" pos:end="37:42"><expr pos:start="37:23" pos:end="37:42"><call pos:start="37:23" pos:end="37:42"><name pos:start="37:23" pos:end="37:27">crc32</name><argument_list pos:start="37:28" pos:end="37:42">(<argument pos:start="37:29" pos:end="37:30"><expr pos:start="37:29" pos:end="37:30"><operator pos:start="37:29" pos:end="37:29">~</operator><literal type="number" pos:start="37:30" pos:end="37:30">0</literal></expr></argument>, <argument pos:start="37:33" pos:end="37:35"><expr pos:start="37:33" pos:end="37:35"><name pos:start="37:33" pos:end="37:35">buf</name></expr></argument>, <argument pos:start="37:38" pos:end="37:41"><expr pos:start="37:38" pos:end="37:41"><name pos:start="37:38" pos:end="37:41">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:30"><expr pos:start="39:5" pos:end="39:29"><name pos:start="39:5" pos:end="39:11">crc_ptr</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <operator pos:start="39:15" pos:end="39:15">(</operator><name pos:start="39:16" pos:end="39:22">uint8_t</name> <operator pos:start="39:24" pos:end="39:24">*</operator><operator pos:start="39:25" pos:end="39:25">)</operator><operator pos:start="39:26" pos:end="39:26">&amp;</operator><name pos:start="39:27" pos:end="39:29">crc</name></expr>;</expr_stmt>

    <comment type="block" pos:start="41:5" pos:end="41:36">/* Huge frames are truncted.  */</comment>

    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:34">(<expr pos:start="43:9" pos:end="43:33"><name pos:start="43:9" pos:end="43:12">size</name> <operator pos:start="43:14" pos:end="43:14">&gt;</operator> <name pos:start="43:16" pos:end="43:33">FEC_MAX_FRAME_SIZE</name></expr>)</condition> <block pos:start="43:36" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:39">

        <expr_stmt pos:start="45:9" pos:end="45:34"><expr pos:start="45:9" pos:end="45:33"><name pos:start="45:9" pos:end="45:12">size</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <name pos:start="45:16" pos:end="45:33">FEC_MAX_FRAME_SIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:39"><expr pos:start="47:9" pos:end="47:38"><name pos:start="47:9" pos:end="47:13">flags</name> <operator pos:start="47:15" pos:end="47:16">|=</operator> <name pos:start="47:18" pos:end="47:26">FEC_BD_TR</name> <operator pos:start="47:28" pos:end="47:28">|</operator> <name pos:start="47:30" pos:end="47:38">FEC_BD_LG</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="51:5" pos:end="51:66">/* Frames larger than the user limit just set error flags.  */</comment>

    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:30">(<expr pos:start="53:9" pos:end="53:29"><name pos:start="53:9" pos:end="53:12">size</name> <operator pos:start="53:14" pos:end="53:14">&gt;</operator> <operator pos:start="53:16" pos:end="53:16">(</operator><name pos:start="53:17" pos:end="53:22"><name pos:start="53:17" pos:end="53:17">s</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:22">rcr</name></name> <operator pos:start="53:24" pos:end="53:25">&gt;&gt;</operator> <literal type="number" pos:start="53:27" pos:end="53:28">16</literal><operator pos:start="53:29" pos:end="53:29">)</operator></expr>)</condition> <block pos:start="53:32" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:27">

        <expr_stmt pos:start="55:9" pos:end="55:27"><expr pos:start="55:9" pos:end="55:26"><name pos:start="55:9" pos:end="55:13">flags</name> <operator pos:start="55:15" pos:end="55:16">|=</operator> <name pos:start="55:18" pos:end="55:26">FEC_BD_LG</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:28"><expr pos:start="59:5" pos:end="59:27"><name pos:start="59:5" pos:end="59:8">addr</name> <operator pos:start="59:10" pos:end="59:10">=</operator> <name pos:start="59:12" pos:end="59:27"><name pos:start="59:12" pos:end="59:12">s</name><operator pos:start="59:13" pos:end="59:14">-&gt;</operator><name pos:start="59:15" pos:end="59:27">rx_descriptor</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:19"><expr pos:start="61:5" pos:end="61:18"><name pos:start="61:5" pos:end="61:11">retsize</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <name pos:start="61:15" pos:end="61:18">size</name></expr>;</expr_stmt>

    <while pos:start="63:5" pos:end="143:5">while <condition pos:start="63:11" pos:end="63:20">(<expr pos:start="63:12" pos:end="63:19"><name pos:start="63:12" pos:end="63:15">size</name> <operator pos:start="63:17" pos:end="63:17">&gt;</operator> <literal type="number" pos:start="63:19" pos:end="63:19">0</literal></expr>)</condition> <block pos:start="63:22" pos:end="143:5">{<block_content pos:start="65:9" pos:end="141:9">

        <expr_stmt pos:start="65:9" pos:end="65:35"><expr pos:start="65:9" pos:end="65:34"><call pos:start="65:9" pos:end="65:34"><name pos:start="65:9" pos:end="65:23">mcf_fec_read_bd</name><argument_list pos:start="65:24" pos:end="65:34">(<argument pos:start="65:25" pos:end="65:27"><expr pos:start="65:25" pos:end="65:27"><operator pos:start="65:25" pos:end="65:25">&amp;</operator><name pos:start="65:26" pos:end="65:27">bd</name></expr></argument>, <argument pos:start="65:30" pos:end="65:33"><expr pos:start="65:30" pos:end="65:33"><name pos:start="65:30" pos:end="65:33">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="81:9"><if pos:start="67:9" pos:end="81:9">if <condition pos:start="67:12" pos:end="67:39">(<expr pos:start="67:13" pos:end="67:38"><operator pos:start="67:13" pos:end="67:13">(</operator><name pos:start="67:14" pos:end="67:21"><name pos:start="67:14" pos:end="67:15">bd</name><operator pos:start="67:16" pos:end="67:16">.</operator><name pos:start="67:17" pos:end="67:21">flags</name></name> <operator pos:start="67:23" pos:end="67:23">&amp;</operator> <name pos:start="67:25" pos:end="67:32">FEC_BD_E</name><operator pos:start="67:33" pos:end="67:33">)</operator> <operator pos:start="67:35" pos:end="67:36">==</operator> <literal type="number" pos:start="67:38" pos:end="67:38">0</literal></expr>)</condition> <block pos:start="67:41" pos:end="81:9">{<block_content pos:start="77:13" pos:end="79:18">

            <comment type="block" pos:start="69:13" pos:end="69:55">/* No descriptors available.  Bail out.  */</comment>

            <comment type="block" pos:start="71:13" pos:end="75:33">/* FIXME: This is wrong.  We should probably either save the

               remainder for when more RX buffers are available, or

               flag an error.  */</comment>

            <expr_stmt pos:start="77:13" pos:end="77:60"><expr pos:start="77:13" pos:end="77:59"><call pos:start="77:13" pos:end="77:59"><name pos:start="77:13" pos:end="77:19">fprintf</name><argument_list pos:start="77:20" pos:end="77:59">(<argument pos:start="77:21" pos:end="77:26"><expr pos:start="77:21" pos:end="77:26"><name pos:start="77:21" pos:end="77:26">stderr</name></expr></argument>, <argument pos:start="77:29" pos:end="77:58"><expr pos:start="77:29" pos:end="77:58"><literal type="string" pos:start="77:29" pos:end="77:58">"mcf_fec: Lost end of frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="79:13" pos:end="79:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:54"><expr pos:start="83:9" pos:end="83:53"><name pos:start="83:9" pos:end="83:15">buf_len</name> <operator pos:start="83:17" pos:end="83:17">=</operator> <ternary pos:start="83:19" pos:end="83:53"><condition pos:start="83:19" pos:end="83:38"><expr pos:start="83:19" pos:end="83:36"><operator pos:start="83:19" pos:end="83:19">(</operator><name pos:start="83:20" pos:end="83:23">size</name> <operator pos:start="83:25" pos:end="83:26">&lt;=</operator> <name pos:start="83:28" pos:end="83:35"><name pos:start="83:28" pos:end="83:28">s</name><operator pos:start="83:29" pos:end="83:30">-&gt;</operator><name pos:start="83:31" pos:end="83:35">emrbr</name></name><operator pos:start="83:36" pos:end="83:36">)</operator></expr> ?</condition><then pos:start="83:40" pos:end="83:43"> <expr pos:start="83:40" pos:end="83:43"><name pos:start="83:40" pos:end="83:43">size</name></expr></then><else pos:start="83:44" pos:end="83:53">: <expr pos:start="83:46" pos:end="83:53"><name pos:start="83:46" pos:end="83:53"><name pos:start="83:46" pos:end="83:46">s</name><operator pos:start="83:47" pos:end="83:48">-&gt;</operator><name pos:start="83:49" pos:end="83:53">emrbr</name></name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:28"><expr pos:start="85:9" pos:end="85:27"><name pos:start="85:9" pos:end="85:17"><name pos:start="85:9" pos:end="85:10">bd</name><operator pos:start="85:11" pos:end="85:11">.</operator><name pos:start="85:12" pos:end="85:17">length</name></name> <operator pos:start="85:19" pos:end="85:19">=</operator> <name pos:start="85:21" pos:end="85:27">buf_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:24"><expr pos:start="87:9" pos:end="87:23"><name pos:start="87:9" pos:end="87:12">size</name> <operator pos:start="87:14" pos:end="87:15">-=</operator> <name pos:start="87:17" pos:end="87:23">buf_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:57"><expr pos:start="89:9" pos:end="89:56"><call pos:start="89:9" pos:end="89:56"><name pos:start="89:9" pos:end="89:15">DPRINTF</name><argument_list pos:start="89:16" pos:end="89:56">(<argument pos:start="89:17" pos:end="89:38"><expr pos:start="89:17" pos:end="89:38"><literal type="string" pos:start="89:17" pos:end="89:38">"rx_bd %x length %d\n"</literal></expr></argument>, <argument pos:start="89:41" pos:end="89:44"><expr pos:start="89:41" pos:end="89:44"><name pos:start="89:41" pos:end="89:44">addr</name></expr></argument>, <argument pos:start="89:47" pos:end="89:55"><expr pos:start="89:47" pos:end="89:55"><name pos:start="89:47" pos:end="89:55"><name pos:start="89:47" pos:end="89:48">bd</name><operator pos:start="89:49" pos:end="89:49">.</operator><name pos:start="89:50" pos:end="89:55">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="91:9" pos:end="91:44">/* The last 4 bytes are the CRC.  */</comment>

        <if_stmt pos:start="93:9" pos:end="95:32"><if pos:start="93:9" pos:end="95:32">if <condition pos:start="93:12" pos:end="93:21">(<expr pos:start="93:13" pos:end="93:20"><name pos:start="93:13" pos:end="93:16">size</name> <operator pos:start="93:18" pos:end="93:18">&lt;</operator> <literal type="number" pos:start="93:20" pos:end="93:20">4</literal></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:32"><block_content pos:start="95:13" pos:end="95:32">

            <expr_stmt pos:start="95:13" pos:end="95:32"><expr pos:start="95:13" pos:end="95:31"><name pos:start="95:13" pos:end="95:19">buf_len</name> <operator pos:start="95:21" pos:end="95:22">+=</operator> <name pos:start="95:24" pos:end="95:27">size</name> <operator pos:start="95:29" pos:end="95:29">-</operator> <literal type="number" pos:start="95:31" pos:end="95:31">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:27"><expr pos:start="97:9" pos:end="97:26"><name pos:start="97:9" pos:end="97:16">buf_addr</name> <operator pos:start="97:18" pos:end="97:18">=</operator> <name pos:start="97:20" pos:end="97:26"><name pos:start="97:20" pos:end="97:21">bd</name><operator pos:start="97:22" pos:end="97:22">.</operator><name pos:start="97:23" pos:end="97:26">data</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:58"><expr pos:start="99:9" pos:end="99:57"><call pos:start="99:9" pos:end="99:57"><name pos:start="99:9" pos:end="99:33">cpu_physical_memory_write</name><argument_list pos:start="99:34" pos:end="99:57">(<argument pos:start="99:35" pos:end="99:42"><expr pos:start="99:35" pos:end="99:42"><name pos:start="99:35" pos:end="99:42">buf_addr</name></expr></argument>, <argument pos:start="99:45" pos:end="99:47"><expr pos:start="99:45" pos:end="99:47"><name pos:start="99:45" pos:end="99:47">buf</name></expr></argument>, <argument pos:start="99:50" pos:end="99:56"><expr pos:start="99:50" pos:end="99:56"><name pos:start="99:50" pos:end="99:56">buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:23"><expr pos:start="101:9" pos:end="101:22"><name pos:start="101:9" pos:end="101:11">buf</name> <operator pos:start="101:13" pos:end="101:14">+=</operator> <name pos:start="101:16" pos:end="101:22">buf_len</name></expr>;</expr_stmt>

        <if_stmt pos:start="103:9" pos:end="109:9"><if pos:start="103:9" pos:end="109:9">if <condition pos:start="103:12" pos:end="103:21">(<expr pos:start="103:13" pos:end="103:20"><name pos:start="103:13" pos:end="103:16">size</name> <operator pos:start="103:18" pos:end="103:18">&lt;</operator> <literal type="number" pos:start="103:20" pos:end="103:20">4</literal></expr>)</condition> <block pos:start="103:23" pos:end="109:9">{<block_content pos:start="105:13" pos:end="107:32">

            <expr_stmt pos:start="105:13" pos:end="105:77"><expr pos:start="105:13" pos:end="105:76"><call pos:start="105:13" pos:end="105:76"><name pos:start="105:13" pos:end="105:37">cpu_physical_memory_write</name><argument_list pos:start="105:38" pos:end="105:76">(<argument pos:start="105:39" pos:end="105:56"><expr pos:start="105:39" pos:end="105:56"><name pos:start="105:39" pos:end="105:46">buf_addr</name> <operator pos:start="105:48" pos:end="105:48">+</operator> <name pos:start="105:50" pos:end="105:56">buf_len</name></expr></argument>, <argument pos:start="105:59" pos:end="105:65"><expr pos:start="105:59" pos:end="105:65"><name pos:start="105:59" pos:end="105:65">crc_ptr</name></expr></argument>, <argument pos:start="105:68" pos:end="105:75"><expr pos:start="105:68" pos:end="105:75"><literal type="number" pos:start="105:68" pos:end="105:70">4</literal> <operator pos:start="105:70" pos:end="105:70">-</operator> <name pos:start="105:72" pos:end="105:75">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:32"><expr pos:start="107:13" pos:end="107:31"><name pos:start="107:13" pos:end="107:19">crc_ptr</name> <operator pos:start="107:21" pos:end="107:22">+=</operator> <literal type="number" pos:start="107:24" pos:end="107:26">4</literal> <operator pos:start="107:26" pos:end="107:26">-</operator> <name pos:start="107:28" pos:end="107:31">size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:30"><expr pos:start="111:9" pos:end="111:29"><name pos:start="111:9" pos:end="111:16"><name pos:start="111:9" pos:end="111:10">bd</name><operator pos:start="111:11" pos:end="111:11">.</operator><name pos:start="111:12" pos:end="111:16">flags</name></name> <operator pos:start="111:18" pos:end="111:19">&amp;=</operator> <operator pos:start="111:21" pos:end="111:21">~</operator><name pos:start="111:22" pos:end="111:29">FEC_BD_E</name></expr>;</expr_stmt>

        <if_stmt pos:start="113:9" pos:end="127:9"><if pos:start="113:9" pos:end="123:9">if <condition pos:start="113:12" pos:end="113:22">(<expr pos:start="113:13" pos:end="113:21"><name pos:start="113:13" pos:end="113:16">size</name> <operator pos:start="113:18" pos:end="113:19">==</operator> <literal type="number" pos:start="113:21" pos:end="113:21">0</literal></expr>)</condition> <block pos:start="113:24" pos:end="123:9">{<block_content pos:start="117:13" pos:end="121:34">

            <comment type="block" pos:start="115:13" pos:end="115:40">/* Last buffer in frame.  */</comment>

            <expr_stmt pos:start="117:13" pos:end="117:41"><expr pos:start="117:13" pos:end="117:40"><name pos:start="117:13" pos:end="117:20"><name pos:start="117:13" pos:end="117:14">bd</name><operator pos:start="117:15" pos:end="117:15">.</operator><name pos:start="117:16" pos:end="117:20">flags</name></name> <operator pos:start="117:22" pos:end="117:23">|=</operator> <name pos:start="117:25" pos:end="117:29">flags</name> <operator pos:start="117:31" pos:end="117:31">|</operator> <name pos:start="117:33" pos:end="117:40">FEC_BD_L</name></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:55"><expr pos:start="119:13" pos:end="119:54"><call pos:start="119:13" pos:end="119:54"><name pos:start="119:13" pos:end="119:19">DPRINTF</name><argument_list pos:start="119:20" pos:end="119:54">(<argument pos:start="119:21" pos:end="119:43"><expr pos:start="119:21" pos:end="119:43"><literal type="string" pos:start="119:21" pos:end="119:43">"rx frame flags %04x\n"</literal></expr></argument>, <argument pos:start="119:46" pos:end="119:53"><expr pos:start="119:46" pos:end="119:53"><name pos:start="119:46" pos:end="119:53"><name pos:start="119:46" pos:end="119:47">bd</name><operator pos:start="119:48" pos:end="119:48">.</operator><name pos:start="119:49" pos:end="119:53">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:34"><expr pos:start="121:13" pos:end="121:33"><name pos:start="121:13" pos:end="121:18"><name pos:start="121:13" pos:end="121:13">s</name><operator pos:start="121:14" pos:end="121:15">-&gt;</operator><name pos:start="121:16" pos:end="121:18">eir</name></name> <operator pos:start="121:20" pos:end="121:21">|=</operator> <name pos:start="121:23" pos:end="121:33">FEC_INT_RXF</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="123:11" pos:end="127:9">else <block pos:start="123:16" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:34">

            <expr_stmt pos:start="125:13" pos:end="125:34"><expr pos:start="125:13" pos:end="125:33"><name pos:start="125:13" pos:end="125:18"><name pos:start="125:13" pos:end="125:13">s</name><operator pos:start="125:14" pos:end="125:15">-&gt;</operator><name pos:start="125:16" pos:end="125:18">eir</name></name> <operator pos:start="125:20" pos:end="125:21">|=</operator> <name pos:start="125:23" pos:end="125:33">FEC_INT_RXB</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:36"><expr pos:start="129:9" pos:end="129:35"><call pos:start="129:9" pos:end="129:35"><name pos:start="129:9" pos:end="129:24">mcf_fec_write_bd</name><argument_list pos:start="129:25" pos:end="129:35">(<argument pos:start="129:26" pos:end="129:28"><expr pos:start="129:26" pos:end="129:28"><operator pos:start="129:26" pos:end="129:26">&amp;</operator><name pos:start="129:27" pos:end="129:28">bd</name></expr></argument>, <argument pos:start="129:31" pos:end="129:34"><expr pos:start="129:31" pos:end="129:34"><name pos:start="129:31" pos:end="129:34">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="131:9" pos:end="131:46">/* Advance to the next descriptor.  */</comment>

        <if_stmt pos:start="133:9" pos:end="141:9"><if pos:start="133:9" pos:end="137:9">if <condition pos:start="133:12" pos:end="133:39">(<expr pos:start="133:13" pos:end="133:38"><operator pos:start="133:13" pos:end="133:13">(</operator><name pos:start="133:14" pos:end="133:21"><name pos:start="133:14" pos:end="133:15">bd</name><operator pos:start="133:16" pos:end="133:16">.</operator><name pos:start="133:17" pos:end="133:21">flags</name></name> <operator pos:start="133:23" pos:end="133:23">&amp;</operator> <name pos:start="133:25" pos:end="133:32">FEC_BD_W</name><operator pos:start="133:33" pos:end="133:33">)</operator> <operator pos:start="133:35" pos:end="133:36">!=</operator> <literal type="number" pos:start="133:38" pos:end="133:38">0</literal></expr>)</condition> <block pos:start="133:41" pos:end="137:9">{<block_content pos:start="135:13" pos:end="135:28">

            <expr_stmt pos:start="135:13" pos:end="135:28"><expr pos:start="135:13" pos:end="135:27"><name pos:start="135:13" pos:end="135:16">addr</name> <operator pos:start="135:18" pos:end="135:18">=</operator> <name pos:start="135:20" pos:end="135:27"><name pos:start="135:20" pos:end="135:20">s</name><operator pos:start="135:21" pos:end="135:22">-&gt;</operator><name pos:start="135:23" pos:end="135:27">erdsr</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="137:11" pos:end="141:9">else <block pos:start="137:16" pos:end="141:9">{<block_content pos:start="139:13" pos:end="139:22">

            <expr_stmt pos:start="139:13" pos:end="139:22"><expr pos:start="139:13" pos:end="139:21"><name pos:start="139:13" pos:end="139:16">addr</name> <operator pos:start="139:18" pos:end="139:19">+=</operator> <literal type="number" pos:start="139:21" pos:end="139:21">8</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="145:5" pos:end="145:28"><expr pos:start="145:5" pos:end="145:27"><name pos:start="145:5" pos:end="145:20"><name pos:start="145:5" pos:end="145:5">s</name><operator pos:start="145:6" pos:end="145:7">-&gt;</operator><name pos:start="145:8" pos:end="145:20">rx_descriptor</name></name> <operator pos:start="145:22" pos:end="145:22">=</operator> <name pos:start="145:24" pos:end="145:27">addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:25"><expr pos:start="147:5" pos:end="147:24"><call pos:start="147:5" pos:end="147:24"><name pos:start="147:5" pos:end="147:21">mcf_fec_enable_rx</name><argument_list pos:start="147:22" pos:end="147:24">(<argument pos:start="147:23" pos:end="147:23"><expr pos:start="147:23" pos:end="147:23"><name pos:start="147:23" pos:end="147:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:22"><expr pos:start="149:5" pos:end="149:21"><call pos:start="149:5" pos:end="149:21"><name pos:start="149:5" pos:end="149:18">mcf_fec_update</name><argument_list pos:start="149:19" pos:end="149:21">(<argument pos:start="149:20" pos:end="149:20"><expr pos:start="149:20" pos:end="149:20"><name pos:start="149:20" pos:end="149:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="151:5" pos:end="151:19">return <expr pos:start="151:12" pos:end="151:18"><name pos:start="151:12" pos:end="151:18">retsize</name></expr>;</return>

</block_content>}</block></function>
</unit>
