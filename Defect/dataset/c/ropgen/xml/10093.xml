<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10093.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">qemu_rbd_aio_event_reader</name><parameter_list pos:start="1:38" pos:end="1:51">(<parameter pos:start="1:39" pos:end="1:50"><decl pos:start="1:39" pos:end="1:50"><type pos:start="1:39" pos:end="1:44"><name pos:start="1:39" pos:end="1:42">void</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:50">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="45:1">{<block_content pos:start="5:5" pos:end="43:40">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">BDRVRBDState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:28">= <expr pos:start="5:23" pos:end="5:28"><name pos:start="5:23" pos:end="5:28">opaque</name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">ssize_t</name></type> <name pos:start="9:13" pos:end="9:15">ret</name></decl>;</decl_stmt>



    <do pos:start="13:5" pos:end="43:40">do <block pos:start="13:8" pos:end="43:5">{<block_content pos:start="15:9" pos:end="41:9">

        <decl_stmt pos:start="15:9" pos:end="15:40"><decl pos:start="15:9" pos:end="15:39"><type pos:start="15:9" pos:end="15:14"><name pos:start="15:9" pos:end="15:12">char</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:15">p</name> <init pos:start="15:17" pos:end="15:39">= <expr pos:start="15:19" pos:end="15:39"><operator pos:start="15:19" pos:end="15:19">(</operator><name pos:start="15:20" pos:end="15:23">char</name> <operator pos:start="15:25" pos:end="15:25">*</operator><operator pos:start="15:26" pos:end="15:26">)</operator><operator pos:start="15:27" pos:end="15:27">&amp;</operator><name pos:start="15:28" pos:end="15:39"><name pos:start="15:28" pos:end="15:28">s</name><operator pos:start="15:29" pos:end="15:30">-&gt;</operator><name pos:start="15:31" pos:end="15:39">event_rcb</name></name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="19:9" pos:end="19:75">/* now read the rcb pointer that was sent from a non qemu thread */</comment>

        <if_stmt pos:start="21:9" pos:end="41:9"><if pos:start="21:9" pos:end="41:9">if <condition pos:start="21:12" pos:end="23:73">(<expr pos:start="21:13" pos:end="23:72"><operator pos:start="21:13" pos:end="21:13">(</operator><name pos:start="21:14" pos:end="21:16">ret</name> <operator pos:start="21:18" pos:end="21:18">=</operator> <call pos:start="21:20" pos:end="23:67"><name pos:start="21:20" pos:end="21:23">read</name><argument_list pos:start="21:24" pos:end="23:67">(<argument pos:start="21:25" pos:end="21:43"><expr pos:start="21:25" pos:end="21:43"><name pos:start="21:25" pos:end="21:43"><name pos:start="21:25" pos:end="21:25">s</name><operator pos:start="21:26" pos:end="21:27">-&gt;</operator><name pos:start="21:28" pos:end="21:30">fds</name><index pos:start="21:31" pos:end="21:43">[<expr pos:start="21:32" pos:end="21:42"><name pos:start="21:32" pos:end="21:42">RBD_FD_READ</name></expr>]</index></name></expr></argument>, <argument pos:start="21:46" pos:end="21:68"><expr pos:start="21:46" pos:end="21:68"><name pos:start="21:46" pos:end="21:46">p</name> <operator pos:start="21:48" pos:end="21:48">+</operator> <name pos:start="21:50" pos:end="21:68"><name pos:start="21:50" pos:end="21:50">s</name><operator pos:start="21:51" pos:end="21:52">-&gt;</operator><name pos:start="21:53" pos:end="21:68">event_reader_pos</name></name></expr></argument>,

                        <argument pos:start="23:25" pos:end="23:66"><expr pos:start="23:25" pos:end="23:66"><sizeof pos:start="23:25" pos:end="23:44">sizeof<argument_list pos:start="23:31" pos:end="23:44">(<argument pos:start="23:32" pos:end="23:43"><expr pos:start="23:32" pos:end="23:43"><name pos:start="23:32" pos:end="23:43"><name pos:start="23:32" pos:end="23:32">s</name><operator pos:start="23:33" pos:end="23:34">-&gt;</operator><name pos:start="23:35" pos:end="23:43">event_rcb</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="23:46" pos:end="23:46">-</operator> <name pos:start="23:48" pos:end="23:66"><name pos:start="23:48" pos:end="23:48">s</name><operator pos:start="23:49" pos:end="23:50">-&gt;</operator><name pos:start="23:51" pos:end="23:66">event_reader_pos</name></name></expr></argument>)</argument_list></call><operator pos:start="23:68" pos:end="23:68">)</operator> <operator pos:start="23:70" pos:end="23:70">&gt;</operator> <literal type="number" pos:start="23:72" pos:end="23:72">0</literal></expr>)</condition> <block pos:start="23:75" pos:end="41:9">{<block_content pos:start="25:13" pos:end="39:13">

            <if_stmt pos:start="25:13" pos:end="39:13"><if pos:start="25:13" pos:end="39:13">if <condition pos:start="25:16" pos:end="25:24">(<expr pos:start="25:17" pos:end="25:23"><name pos:start="25:17" pos:end="25:19">ret</name> <operator pos:start="25:21" pos:end="25:21">&gt;</operator> <literal type="number" pos:start="25:23" pos:end="25:23">0</literal></expr>)</condition> <block pos:start="25:26" pos:end="39:13">{<block_content pos:start="27:17" pos:end="37:17">

                <expr_stmt pos:start="27:17" pos:end="27:43"><expr pos:start="27:17" pos:end="27:42"><name pos:start="27:17" pos:end="27:35"><name pos:start="27:17" pos:end="27:17">s</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:35">event_reader_pos</name></name> <operator pos:start="27:37" pos:end="27:38">+=</operator> <name pos:start="27:40" pos:end="27:42">ret</name></expr>;</expr_stmt>

                <if_stmt pos:start="29:17" pos:end="37:17"><if pos:start="29:17" pos:end="37:17">if <condition pos:start="29:20" pos:end="29:64">(<expr pos:start="29:21" pos:end="29:63"><name pos:start="29:21" pos:end="29:39"><name pos:start="29:21" pos:end="29:21">s</name><operator pos:start="29:22" pos:end="29:23">-&gt;</operator><name pos:start="29:24" pos:end="29:39">event_reader_pos</name></name> <operator pos:start="29:41" pos:end="29:42">==</operator> <sizeof pos:start="29:44" pos:end="29:63">sizeof<argument_list pos:start="29:50" pos:end="29:63">(<argument pos:start="29:51" pos:end="29:62"><expr pos:start="29:51" pos:end="29:62"><name pos:start="29:51" pos:end="29:62"><name pos:start="29:51" pos:end="29:51">s</name><operator pos:start="29:52" pos:end="29:53">-&gt;</operator><name pos:start="29:54" pos:end="29:62">event_rcb</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="29:66" pos:end="37:17">{<block_content pos:start="31:21" pos:end="35:40">

                    <expr_stmt pos:start="31:21" pos:end="31:44"><expr pos:start="31:21" pos:end="31:43"><name pos:start="31:21" pos:end="31:39"><name pos:start="31:21" pos:end="31:21">s</name><operator pos:start="31:22" pos:end="31:23">-&gt;</operator><name pos:start="31:24" pos:end="31:39">event_reader_pos</name></name> <operator pos:start="31:41" pos:end="31:41">=</operator> <literal type="number" pos:start="31:43" pos:end="31:43">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="33:21" pos:end="33:56"><expr pos:start="33:21" pos:end="33:55"><call pos:start="33:21" pos:end="33:55"><name pos:start="33:21" pos:end="33:41">qemu_rbd_complete_aio</name><argument_list pos:start="33:42" pos:end="33:55">(<argument pos:start="33:43" pos:end="33:54"><expr pos:start="33:43" pos:end="33:54"><name pos:start="33:43" pos:end="33:54"><name pos:start="33:43" pos:end="33:43">s</name><operator pos:start="33:44" pos:end="33:45">-&gt;</operator><name pos:start="33:46" pos:end="33:54">event_rcb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="35:21" pos:end="35:40"><expr pos:start="35:21" pos:end="35:39"><name pos:start="35:21" pos:end="35:37"><name pos:start="35:21" pos:end="35:21">s</name><operator pos:start="35:22" pos:end="35:23">-&gt;</operator><name pos:start="35:24" pos:end="35:37">qemu_aio_count</name></name><operator pos:start="35:38" pos:end="35:39">--</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="43:13" pos:end="43:39">(<expr pos:start="43:14" pos:end="43:38"><name pos:start="43:14" pos:end="43:16">ret</name> <operator pos:start="43:18" pos:end="43:18">&lt;</operator> <literal type="number" pos:start="43:20" pos:end="43:20">0</literal> <operator pos:start="43:22" pos:end="43:23">&amp;&amp;</operator> <name pos:start="43:25" pos:end="43:29">errno</name> <operator pos:start="43:31" pos:end="43:32">==</operator> <name pos:start="43:34" pos:end="43:38">EINTR</name></expr>)</condition>;</do>

</block_content>}</block></function>
</unit>
