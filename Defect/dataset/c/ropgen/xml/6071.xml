<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6071.c" pos:tabs="8"><function pos:start="1:1" pos:end="789:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">ff_h263_decode_frame</name><parameter_list pos:start="1:25" pos:end="5:54">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:46"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>, 

                             <parameter pos:start="3:30" pos:end="3:39"><decl pos:start="3:30" pos:end="3:39"><type pos:start="3:30" pos:end="3:39"><name pos:start="3:30" pos:end="3:33">void</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">data</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:55"><decl pos:start="3:42" pos:end="3:55"><type pos:start="3:42" pos:end="3:55"><name pos:start="3:42" pos:end="3:44">int</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:55">data_size</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:39"><decl pos:start="5:30" pos:end="5:39"><type pos:start="5:30" pos:end="5:39"><name pos:start="5:30" pos:end="5:34">UINT8</name> <modifier pos:start="5:36" pos:end="5:36">*</modifier></type><name pos:start="5:37" pos:end="5:39">buf</name></decl></parameter>, <parameter pos:start="5:42" pos:end="5:53"><decl pos:start="5:42" pos:end="5:53"><type pos:start="5:42" pos:end="5:53"><name pos:start="5:42" pos:end="5:44">int</name></type> <name pos:start="5:46" pos:end="5:53">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="789:1">{<block_content pos:start="9:5" pos:end="787:43">

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">MpegEncContext</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:21">s</name> <init pos:start="9:23" pos:end="9:40">= <expr pos:start="9:25" pos:end="9:40"><name pos:start="9:25" pos:end="9:40"><name pos:start="9:25" pos:end="9:29">avctx</name><operator pos:start="9:30" pos:end="9:31">-&gt;</operator><name pos:start="9:32" pos:end="9:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>,<decl pos:start="11:13" pos:end="11:13"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:13" pos:end="11:13">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">AVFrame</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:17">pict</name> <init pos:start="13:19" pos:end="13:24">= <expr pos:start="13:21" pos:end="13:24"><name pos:start="13:21" pos:end="13:24">data</name></expr></init></decl>;</decl_stmt> 

    <decl_stmt pos:start="15:5" pos:end="20:0"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:9">float</name></type> <name pos:start="15:11" pos:end="15:20">new_aspect</name></decl>;</decl_stmt>

    

<cpp:ifdef pos:start="19:1" pos:end="19:23">#<cpp:directive pos:start="19:2" pos:end="19:6">ifdef</cpp:directive> <name pos:start="19:8" pos:end="19:23">PRINT_FRAME_TIME</name></cpp:ifdef>

<decl_stmt pos:start="21:1" pos:end="26:0"><decl pos:start="21:1" pos:end="21:22"><type pos:start="21:1" pos:end="21:8"><name pos:start="21:1" pos:end="21:8">uint64_t</name></type> <name pos:start="21:10" pos:end="21:13">time</name><init pos:start="21:14" pos:end="21:22">= <expr pos:start="21:16" pos:end="21:22"><call pos:start="21:16" pos:end="21:22"><name pos:start="21:16" pos:end="21:20">rdtsc</name><argument_list pos:start="21:21" pos:end="21:22">()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="25:1" pos:end="25:12">#<cpp:directive pos:start="25:2" pos:end="25:6">ifdef</cpp:directive> <name pos:start="25:8" pos:end="25:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="27:5" pos:end="27:69"><expr pos:start="27:5" pos:end="27:68"><call pos:start="27:5" pos:end="27:68"><name pos:start="27:5" pos:end="27:10">printf</name><argument_list pos:start="27:11" pos:end="27:68">(<argument pos:start="27:12" pos:end="27:36"><expr pos:start="27:12" pos:end="27:36"><literal type="string" pos:start="27:12" pos:end="27:36">"*****frame %d size=%d\n"</literal></expr></argument>, <argument pos:start="27:39" pos:end="27:57"><expr pos:start="27:39" pos:end="27:57"><name pos:start="27:39" pos:end="27:57"><name pos:start="27:39" pos:end="27:43">avctx</name><operator pos:start="27:44" pos:end="27:45">-&gt;</operator><name pos:start="27:46" pos:end="27:57">frame_number</name></name></expr></argument>, <argument pos:start="27:60" pos:end="27:67"><expr pos:start="27:60" pos:end="27:67"><name pos:start="27:60" pos:end="27:67">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="32:0"><expr pos:start="29:5" pos:end="29:65"><call pos:start="29:5" pos:end="29:65"><name pos:start="29:5" pos:end="29:10">printf</name><argument_list pos:start="29:11" pos:end="29:65">(<argument pos:start="29:12" pos:end="29:32"><expr pos:start="29:12" pos:end="29:32"><literal type="string" pos:start="29:12" pos:end="29:32">"bytes=%x %x %x %x\n"</literal></expr></argument>, <argument pos:start="29:35" pos:end="29:40"><expr pos:start="29:35" pos:end="29:40"><name pos:start="29:35" pos:end="29:40"><name pos:start="29:35" pos:end="29:37">buf</name><index pos:start="29:38" pos:end="29:40">[<expr pos:start="29:39" pos:end="29:39"><literal type="number" pos:start="29:39" pos:end="29:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="29:43" pos:end="29:48"><expr pos:start="29:43" pos:end="29:48"><name pos:start="29:43" pos:end="29:48"><name pos:start="29:43" pos:end="29:45">buf</name><index pos:start="29:46" pos:end="29:48">[<expr pos:start="29:47" pos:end="29:47"><literal type="number" pos:start="29:47" pos:end="29:47">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="29:51" pos:end="29:56"><expr pos:start="29:51" pos:end="29:56"><name pos:start="29:51" pos:end="29:56"><name pos:start="29:51" pos:end="29:53">buf</name><index pos:start="29:54" pos:end="29:56">[<expr pos:start="29:55" pos:end="29:55"><literal type="number" pos:start="29:55" pos:end="29:55">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="29:59" pos:end="29:64"><expr pos:start="29:59" pos:end="29:64"><name pos:start="29:59" pos:end="29:64"><name pos:start="29:59" pos:end="29:61">buf</name><index pos:start="29:62" pos:end="29:64">[<expr pos:start="29:63" pos:end="29:63"><literal type="number" pos:start="29:63" pos:end="29:63">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="33:5" pos:end="33:27"><expr pos:start="33:5" pos:end="33:26"><name pos:start="33:5" pos:end="33:12"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:12">flags</name></name><operator pos:start="33:13" pos:end="33:13">=</operator> <name pos:start="33:15" pos:end="33:26"><name pos:start="33:15" pos:end="33:19">avctx</name><operator pos:start="33:20" pos:end="33:21">-&gt;</operator><name pos:start="33:22" pos:end="33:26">flags</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:19"><expr pos:start="37:5" pos:end="37:18"><operator pos:start="37:5" pos:end="37:5">*</operator><name pos:start="37:6" pos:end="37:14">data_size</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <literal type="number" pos:start="37:18" pos:end="37:18">0</literal></expr>;</expr_stmt>

   

   <comment type="block" pos:start="41:4" pos:end="41:33">/* no supplementary picture */</comment>

    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:22">(<expr pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:16">buf_size</name> <operator pos:start="43:18" pos:end="43:19">==</operator> <literal type="number" pos:start="43:21" pos:end="43:21">0</literal></expr>)</condition> <block pos:start="43:24" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:17">

        <return pos:start="45:9" pos:end="45:17">return <expr pos:start="45:16" pos:end="45:16"><literal type="number" pos:start="45:16" pos:end="45:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    

    <if_stmt pos:start="51:5" pos:end="119:5"><if pos:start="51:5" pos:end="119:5">if<condition pos:start="51:7" pos:end="51:37">(<expr pos:start="51:8" pos:end="51:36"><name pos:start="51:8" pos:end="51:15"><name pos:start="51:8" pos:end="51:8">s</name><operator pos:start="51:9" pos:end="51:10">-&gt;</operator><name pos:start="51:11" pos:end="51:15">flags</name></name><operator pos:start="51:16" pos:end="51:16">&amp;</operator><name pos:start="51:17" pos:end="51:36">CODEC_FLAG_TRUNCATED</name></expr>)</condition><block pos:start="51:38" pos:end="119:5">{<block_content pos:start="53:9" pos:end="117:9">

        <decl_stmt pos:start="53:9" pos:end="53:17"><decl pos:start="53:9" pos:end="53:16"><type pos:start="53:9" pos:end="53:11"><name pos:start="53:9" pos:end="53:11">int</name></type> <name pos:start="53:13" pos:end="53:16">next</name></decl>;</decl_stmt>

        <decl_stmt pos:start="55:9" pos:end="55:44"><decl pos:start="55:9" pos:end="55:43"><type pos:start="55:9" pos:end="55:22"><name pos:start="55:9" pos:end="55:20">ParseContext</name> <modifier pos:start="55:22" pos:end="55:22">*</modifier></type><name pos:start="55:23" pos:end="55:24">pc</name><init pos:start="55:25" pos:end="55:43">= <expr pos:start="55:27" pos:end="55:43"><operator pos:start="55:27" pos:end="55:27">&amp;</operator><name pos:start="55:28" pos:end="55:43"><name pos:start="55:28" pos:end="55:28">s</name><operator pos:start="55:29" pos:end="55:30">-&gt;</operator><name pos:start="55:31" pos:end="55:43">parse_context</name></name></expr></init></decl>;</decl_stmt>

        

        <expr_stmt pos:start="59:9" pos:end="59:34"><expr pos:start="59:9" pos:end="59:33"><name pos:start="59:9" pos:end="59:22"><name pos:start="59:9" pos:end="59:10">pc</name><operator pos:start="59:11" pos:end="59:12">-&gt;</operator><name pos:start="59:13" pos:end="59:22">last_index</name></name><operator pos:start="59:23" pos:end="59:23">=</operator> <name pos:start="59:25" pos:end="59:33"><name pos:start="59:25" pos:end="59:26">pc</name><operator pos:start="59:27" pos:end="59:28">-&gt;</operator><name pos:start="59:29" pos:end="59:33">index</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="63:9" pos:end="73:9"><if pos:start="63:9" pos:end="67:9">if<condition pos:start="63:11" pos:end="63:39">(<expr pos:start="63:12" pos:end="63:38"><name pos:start="63:12" pos:end="63:22"><name pos:start="63:12" pos:end="63:12">s</name><operator pos:start="63:13" pos:end="63:14">-&gt;</operator><name pos:start="63:15" pos:end="63:22">codec_id</name></name><operator pos:start="63:23" pos:end="63:24">==</operator><name pos:start="63:25" pos:end="63:38">CODEC_ID_MPEG4</name></expr>)</condition><block pos:start="63:40" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:57">

            <expr_stmt pos:start="65:13" pos:end="65:57"><expr pos:start="65:13" pos:end="65:56"><name pos:start="65:13" pos:end="65:16">next</name><operator pos:start="65:17" pos:end="65:17">=</operator> <call pos:start="65:19" pos:end="65:56"><name pos:start="65:19" pos:end="65:38">mpeg4_find_frame_end</name><argument_list pos:start="65:39" pos:end="65:56">(<argument pos:start="65:40" pos:end="65:40"><expr pos:start="65:40" pos:end="65:40"><name pos:start="65:40" pos:end="65:40">s</name></expr></argument>, <argument pos:start="65:43" pos:end="65:45"><expr pos:start="65:43" pos:end="65:45"><name pos:start="65:43" pos:end="65:45">buf</name></expr></argument>, <argument pos:start="65:48" pos:end="65:55"><expr pos:start="65:48" pos:end="65:55"><name pos:start="65:48" pos:end="65:55">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="67:10" pos:end="73:9">else<block pos:start="67:14" pos:end="73:9">{<block_content pos:start="69:13" pos:end="71:22">

            <expr_stmt pos:start="69:13" pos:end="69:80"><expr pos:start="69:13" pos:end="69:79"><call pos:start="69:13" pos:end="69:79"><name pos:start="69:13" pos:end="69:19">fprintf</name><argument_list pos:start="69:20" pos:end="69:79">(<argument pos:start="69:21" pos:end="69:26"><expr pos:start="69:21" pos:end="69:26"><name pos:start="69:21" pos:end="69:26">stderr</name></expr></argument>, <argument pos:start="69:29" pos:end="69:78"><expr pos:start="69:29" pos:end="69:78"><literal type="string" pos:start="69:29" pos:end="69:78">"this codec doesnt support truncated bitstreams\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="71:13" pos:end="71:22">return <expr pos:start="71:20" pos:end="71:21"><operator pos:start="71:20" pos:end="71:20">-</operator><literal type="number" pos:start="71:21" pos:end="71:21">1</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="75:9" pos:end="93:9"><if pos:start="75:9" pos:end="93:9">if<condition pos:start="75:11" pos:end="75:20">(<expr pos:start="75:12" pos:end="75:19"><name pos:start="75:12" pos:end="75:15">next</name><operator pos:start="75:16" pos:end="75:17">==</operator><operator pos:start="75:18" pos:end="75:18">-</operator><literal type="number" pos:start="75:19" pos:end="75:19">1</literal></expr>)</condition><block pos:start="75:21" pos:end="93:9">{<block_content pos:start="77:13" pos:end="91:28">

            <if_stmt pos:start="77:13" pos:end="83:13"><if pos:start="77:13" pos:end="83:13">if<condition pos:start="77:15" pos:end="77:85">(<expr pos:start="77:16" pos:end="77:84"><name pos:start="77:16" pos:end="77:23">buf_size</name> <operator pos:start="77:25" pos:end="77:25">+</operator> <name pos:start="77:27" pos:end="77:54">FF_INPUT_BUFFER_PADDING_SIZE</name> <operator pos:start="77:56" pos:end="77:56">+</operator> <name pos:start="77:58" pos:end="77:66"><name pos:start="77:58" pos:end="77:59">pc</name><operator pos:start="77:60" pos:end="77:61">-&gt;</operator><name pos:start="77:62" pos:end="77:66">index</name></name> <operator pos:start="77:68" pos:end="77:68">&gt;</operator> <name pos:start="77:70" pos:end="77:84"><name pos:start="77:70" pos:end="77:71">pc</name><operator pos:start="77:72" pos:end="77:73">-&gt;</operator><name pos:start="77:74" pos:end="77:84">buffer_size</name></name></expr>)</condition><block pos:start="77:86" pos:end="83:13">{<block_content pos:start="79:17" pos:end="81:65">

                <expr_stmt pos:start="79:17" pos:end="79:64"><expr pos:start="79:17" pos:end="79:63"><name pos:start="79:17" pos:end="79:31"><name pos:start="79:17" pos:end="79:18">pc</name><operator pos:start="79:19" pos:end="79:20">-&gt;</operator><name pos:start="79:21" pos:end="79:31">buffer_size</name></name><operator pos:start="79:32" pos:end="79:32">=</operator> <name pos:start="79:34" pos:end="79:41">buf_size</name> <operator pos:start="79:43" pos:end="79:43">+</operator> <name pos:start="79:45" pos:end="79:53"><name pos:start="79:45" pos:end="79:46">pc</name><operator pos:start="79:47" pos:end="79:48">-&gt;</operator><name pos:start="79:49" pos:end="79:53">index</name></name> <operator pos:start="79:55" pos:end="79:55">+</operator> <literal type="number" pos:start="79:57" pos:end="79:58">10</literal><operator pos:start="79:59" pos:end="79:59">*</operator><literal type="number" pos:start="79:60" pos:end="79:63">1024</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:65"><expr pos:start="81:17" pos:end="81:64"><name pos:start="81:17" pos:end="81:26"><name pos:start="81:17" pos:end="81:18">pc</name><operator pos:start="81:19" pos:end="81:20">-&gt;</operator><name pos:start="81:21" pos:end="81:26">buffer</name></name><operator pos:start="81:27" pos:end="81:27">=</operator> <call pos:start="81:29" pos:end="81:64"><name pos:start="81:29" pos:end="81:35">realloc</name><argument_list pos:start="81:36" pos:end="81:64">(<argument pos:start="81:37" pos:end="81:46"><expr pos:start="81:37" pos:end="81:46"><name pos:start="81:37" pos:end="81:46"><name pos:start="81:37" pos:end="81:38">pc</name><operator pos:start="81:39" pos:end="81:40">-&gt;</operator><name pos:start="81:41" pos:end="81:46">buffer</name></name></expr></argument>, <argument pos:start="81:49" pos:end="81:63"><expr pos:start="81:49" pos:end="81:63"><name pos:start="81:49" pos:end="81:63"><name pos:start="81:49" pos:end="81:50">pc</name><operator pos:start="81:51" pos:end="81:52">-&gt;</operator><name pos:start="81:53" pos:end="81:63">buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="87:13" pos:end="87:58"><expr pos:start="87:13" pos:end="87:57"><call pos:start="87:13" pos:end="87:57"><name pos:start="87:13" pos:end="87:18">memcpy</name><argument_list pos:start="87:19" pos:end="87:57">(<argument pos:start="87:20" pos:end="87:41"><expr pos:start="87:20" pos:end="87:41"><operator pos:start="87:20" pos:end="87:20">&amp;</operator><name pos:start="87:21" pos:end="87:41"><name pos:start="87:21" pos:end="87:22">pc</name><operator pos:start="87:23" pos:end="87:24">-&gt;</operator><name pos:start="87:25" pos:end="87:30">buffer</name><index pos:start="87:31" pos:end="87:41">[<expr pos:start="87:32" pos:end="87:40"><name pos:start="87:32" pos:end="87:40"><name pos:start="87:32" pos:end="87:33">pc</name><operator pos:start="87:34" pos:end="87:35">-&gt;</operator><name pos:start="87:36" pos:end="87:40">index</name></name></expr>]</index></name></expr></argument>, <argument pos:start="87:44" pos:end="87:46"><expr pos:start="87:44" pos:end="87:46"><name pos:start="87:44" pos:end="87:46">buf</name></expr></argument>, <argument pos:start="87:49" pos:end="87:56"><expr pos:start="87:49" pos:end="87:56"><name pos:start="87:49" pos:end="87:56">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:34"><expr pos:start="89:13" pos:end="89:33"><name pos:start="89:13" pos:end="89:21"><name pos:start="89:13" pos:end="89:14">pc</name><operator pos:start="89:15" pos:end="89:16">-&gt;</operator><name pos:start="89:17" pos:end="89:21">index</name></name> <operator pos:start="89:23" pos:end="89:24">+=</operator> <name pos:start="89:26" pos:end="89:33">buf_size</name></expr>;</expr_stmt>

            <return pos:start="91:13" pos:end="91:28">return <expr pos:start="91:20" pos:end="91:27"><name pos:start="91:20" pos:end="91:27">buf_size</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="97:9" pos:end="117:9"><if pos:start="97:9" pos:end="117:9">if<condition pos:start="97:11" pos:end="97:21">(<expr pos:start="97:12" pos:end="97:20"><name pos:start="97:12" pos:end="97:20"><name pos:start="97:12" pos:end="97:13">pc</name><operator pos:start="97:14" pos:end="97:15">-&gt;</operator><name pos:start="97:16" pos:end="97:20">index</name></name></expr>)</condition><block pos:start="97:22" pos:end="117:9">{<block_content pos:start="99:13" pos:end="115:44">

            <if_stmt pos:start="99:13" pos:end="105:13"><if pos:start="99:13" pos:end="105:13">if<condition pos:start="99:15" pos:end="99:81">(<expr pos:start="99:16" pos:end="99:80"><name pos:start="99:16" pos:end="99:19">next</name> <operator pos:start="99:21" pos:end="99:21">+</operator> <name pos:start="99:23" pos:end="99:50">FF_INPUT_BUFFER_PADDING_SIZE</name> <operator pos:start="99:52" pos:end="99:52">+</operator> <name pos:start="99:54" pos:end="99:62"><name pos:start="99:54" pos:end="99:55">pc</name><operator pos:start="99:56" pos:end="99:57">-&gt;</operator><name pos:start="99:58" pos:end="99:62">index</name></name> <operator pos:start="99:64" pos:end="99:64">&gt;</operator> <name pos:start="99:66" pos:end="99:80"><name pos:start="99:66" pos:end="99:67">pc</name><operator pos:start="99:68" pos:end="99:69">-&gt;</operator><name pos:start="99:70" pos:end="99:80">buffer_size</name></name></expr>)</condition><block pos:start="99:82" pos:end="105:13">{<block_content pos:start="101:17" pos:end="103:65">

                <expr_stmt pos:start="101:17" pos:end="101:60"><expr pos:start="101:17" pos:end="101:59"><name pos:start="101:17" pos:end="101:31"><name pos:start="101:17" pos:end="101:18">pc</name><operator pos:start="101:19" pos:end="101:20">-&gt;</operator><name pos:start="101:21" pos:end="101:31">buffer_size</name></name><operator pos:start="101:32" pos:end="101:32">=</operator> <name pos:start="101:34" pos:end="101:37">next</name> <operator pos:start="101:39" pos:end="101:39">+</operator> <name pos:start="101:41" pos:end="101:49"><name pos:start="101:41" pos:end="101:42">pc</name><operator pos:start="101:43" pos:end="101:44">-&gt;</operator><name pos:start="101:45" pos:end="101:49">index</name></name> <operator pos:start="101:51" pos:end="101:51">+</operator> <literal type="number" pos:start="101:53" pos:end="101:54">10</literal><operator pos:start="101:55" pos:end="101:55">*</operator><literal type="number" pos:start="101:56" pos:end="101:59">1024</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="103:17" pos:end="103:65"><expr pos:start="103:17" pos:end="103:64"><name pos:start="103:17" pos:end="103:26"><name pos:start="103:17" pos:end="103:18">pc</name><operator pos:start="103:19" pos:end="103:20">-&gt;</operator><name pos:start="103:21" pos:end="103:26">buffer</name></name><operator pos:start="103:27" pos:end="103:27">=</operator> <call pos:start="103:29" pos:end="103:64"><name pos:start="103:29" pos:end="103:35">realloc</name><argument_list pos:start="103:36" pos:end="103:64">(<argument pos:start="103:37" pos:end="103:46"><expr pos:start="103:37" pos:end="103:46"><name pos:start="103:37" pos:end="103:46"><name pos:start="103:37" pos:end="103:38">pc</name><operator pos:start="103:39" pos:end="103:40">-&gt;</operator><name pos:start="103:41" pos:end="103:46">buffer</name></name></expr></argument>, <argument pos:start="103:49" pos:end="103:63"><expr pos:start="103:49" pos:end="103:63"><name pos:start="103:49" pos:end="103:63"><name pos:start="103:49" pos:end="103:50">pc</name><operator pos:start="103:51" pos:end="103:52">-&gt;</operator><name pos:start="103:53" pos:end="103:63">buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="109:13" pos:end="109:86"><expr pos:start="109:13" pos:end="109:85"><call pos:start="109:13" pos:end="109:85"><name pos:start="109:13" pos:end="109:18">memcpy</name><argument_list pos:start="109:19" pos:end="109:85">(<argument pos:start="109:20" pos:end="109:41"><expr pos:start="109:20" pos:end="109:41"><operator pos:start="109:20" pos:end="109:20">&amp;</operator><name pos:start="109:21" pos:end="109:41"><name pos:start="109:21" pos:end="109:22">pc</name><operator pos:start="109:23" pos:end="109:24">-&gt;</operator><name pos:start="109:25" pos:end="109:30">buffer</name><index pos:start="109:31" pos:end="109:41">[<expr pos:start="109:32" pos:end="109:40"><name pos:start="109:32" pos:end="109:40"><name pos:start="109:32" pos:end="109:33">pc</name><operator pos:start="109:34" pos:end="109:35">-&gt;</operator><name pos:start="109:36" pos:end="109:40">index</name></name></expr>]</index></name></expr></argument>, <argument pos:start="109:44" pos:end="109:46"><expr pos:start="109:44" pos:end="109:46"><name pos:start="109:44" pos:end="109:46">buf</name></expr></argument>, <argument pos:start="109:49" pos:end="109:83"><expr pos:start="109:49" pos:end="109:83"><name pos:start="109:49" pos:end="109:52">next</name> <operator pos:start="109:54" pos:end="109:54">+</operator> <name pos:start="109:56" pos:end="109:83">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:26"><expr pos:start="111:13" pos:end="111:25"><name pos:start="111:13" pos:end="111:21"><name pos:start="111:13" pos:end="111:14">pc</name><operator pos:start="111:15" pos:end="111:16">-&gt;</operator><name pos:start="111:17" pos:end="111:21">index</name></name> <operator pos:start="111:23" pos:end="111:23">=</operator> <literal type="number" pos:start="111:25" pos:end="111:25">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:28"><expr pos:start="113:13" pos:end="113:27"><name pos:start="113:13" pos:end="113:15">buf</name><operator pos:start="113:16" pos:end="113:16">=</operator> <name pos:start="113:18" pos:end="113:27"><name pos:start="113:18" pos:end="113:19">pc</name><operator pos:start="113:20" pos:end="113:21">-&gt;</operator><name pos:start="113:22" pos:end="113:27">buffer</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:44"><expr pos:start="115:13" pos:end="115:43"><name pos:start="115:13" pos:end="115:20">buf_size</name><operator pos:start="115:21" pos:end="115:21">=</operator> <name pos:start="115:23" pos:end="115:36"><name pos:start="115:23" pos:end="115:24">pc</name><operator pos:start="115:25" pos:end="115:26">-&gt;</operator><name pos:start="115:27" pos:end="115:36">last_index</name></name> <operator pos:start="115:38" pos:end="115:38">+</operator> <name pos:start="115:40" pos:end="115:43">next</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="123:1" pos:end="123:6"><name pos:start="123:1" pos:end="123:5">retry</name>:</label>

    

    <if_stmt pos:start="127:5" pos:end="133:45"><if pos:start="127:5" pos:end="131:5">if<condition pos:start="127:7" pos:end="127:47">(<expr pos:start="127:8" pos:end="127:46"><name pos:start="127:8" pos:end="127:31"><name pos:start="127:8" pos:end="127:8">s</name><operator pos:start="127:9" pos:end="127:10">-&gt;</operator><name pos:start="127:11" pos:end="127:31">bitstream_buffer_size</name></name> <operator pos:start="127:33" pos:end="127:34">&amp;&amp;</operator> <name pos:start="127:36" pos:end="127:43">buf_size</name><operator pos:start="127:44" pos:end="127:44">&lt;</operator><literal type="number" pos:start="127:45" pos:end="127:46">20</literal></expr>)</condition><block pos:start="127:48" pos:end="131:5">{<block_content pos:start="129:9" pos:end="129:77"> <comment type="line" pos:start="127:50" pos:end="127:75">//divx 5.01+ frame reorder</comment>

        <expr_stmt pos:start="129:9" pos:end="129:77"><expr pos:start="129:9" pos:end="129:76"><call pos:start="129:9" pos:end="129:76"><name pos:start="129:9" pos:end="129:21">init_get_bits</name><argument_list pos:start="129:22" pos:end="129:76">(<argument pos:start="129:23" pos:end="129:28"><expr pos:start="129:23" pos:end="129:28"><operator pos:start="129:23" pos:end="129:23">&amp;</operator><name pos:start="129:24" pos:end="129:28"><name pos:start="129:24" pos:end="129:24">s</name><operator pos:start="129:25" pos:end="129:26">-&gt;</operator><name pos:start="129:27" pos:end="129:28">gb</name></name></expr></argument>, <argument pos:start="129:31" pos:end="129:49"><expr pos:start="129:31" pos:end="129:49"><name pos:start="129:31" pos:end="129:49"><name pos:start="129:31" pos:end="129:31">s</name><operator pos:start="129:32" pos:end="129:33">-&gt;</operator><name pos:start="129:34" pos:end="129:49">bitstream_buffer</name></name></expr></argument>, <argument pos:start="129:52" pos:end="129:75"><expr pos:start="129:52" pos:end="129:75"><name pos:start="129:52" pos:end="129:75"><name pos:start="129:52" pos:end="129:52">s</name><operator pos:start="129:53" pos:end="129:54">-&gt;</operator><name pos:start="129:55" pos:end="129:75">bitstream_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="131:6" pos:end="133:45">else<block type="pseudo" pos:start="133:9" pos:end="133:45"><block_content pos:start="133:9" pos:end="133:45">

        <expr_stmt pos:start="133:9" pos:end="133:45"><expr pos:start="133:9" pos:end="133:44"><call pos:start="133:9" pos:end="133:44"><name pos:start="133:9" pos:end="133:21">init_get_bits</name><argument_list pos:start="133:22" pos:end="133:44">(<argument pos:start="133:23" pos:end="133:28"><expr pos:start="133:23" pos:end="133:28"><operator pos:start="133:23" pos:end="133:23">&amp;</operator><name pos:start="133:24" pos:end="133:28"><name pos:start="133:24" pos:end="133:24">s</name><operator pos:start="133:25" pos:end="133:26">-&gt;</operator><name pos:start="133:27" pos:end="133:28">gb</name></name></expr></argument>, <argument pos:start="133:31" pos:end="133:33"><expr pos:start="133:31" pos:end="133:33"><name pos:start="133:31" pos:end="133:33">buf</name></expr></argument>, <argument pos:start="133:36" pos:end="133:43"><expr pos:start="133:36" pos:end="133:43"><name pos:start="133:36" pos:end="133:43">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:31"><expr pos:start="135:5" pos:end="135:30"><name pos:start="135:5" pos:end="135:28"><name pos:start="135:5" pos:end="135:5">s</name><operator pos:start="135:6" pos:end="135:7">-&gt;</operator><name pos:start="135:8" pos:end="135:28">bitstream_buffer_size</name></name><operator pos:start="135:29" pos:end="135:29">=</operator><literal type="number" pos:start="135:30" pos:end="135:30">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="139:5" pos:end="145:5"><if pos:start="139:5" pos:end="145:5">if <condition pos:start="139:8" pos:end="139:32">(<expr pos:start="139:9" pos:end="139:31"><operator pos:start="139:9" pos:end="139:9">!</operator><name pos:start="139:10" pos:end="139:31"><name pos:start="139:10" pos:end="139:10">s</name><operator pos:start="139:11" pos:end="139:12">-&gt;</operator><name pos:start="139:13" pos:end="139:31">context_initialized</name></name></expr>)</condition> <block pos:start="139:34" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:22">

        <if_stmt pos:start="141:9" pos:end="143:22"><if pos:start="141:9" pos:end="143:22">if <condition pos:start="141:12" pos:end="141:35">(<expr pos:start="141:13" pos:end="141:34"><call pos:start="141:13" pos:end="141:30"><name pos:start="141:13" pos:end="141:27">MPV_common_init</name><argument_list pos:start="141:28" pos:end="141:30">(<argument pos:start="141:29" pos:end="141:29"><expr pos:start="141:29" pos:end="141:29"><name pos:start="141:29" pos:end="141:29">s</name></expr></argument>)</argument_list></call> <operator pos:start="141:32" pos:end="141:32">&lt;</operator> <literal type="number" pos:start="141:34" pos:end="141:34">0</literal></expr>)</condition><block type="pseudo" pos:start="143:13" pos:end="143:22"><block_content pos:start="143:13" pos:end="143:22"> <comment type="line" pos:start="141:37" pos:end="141:93">//we need the idct permutaton for reading a custom matrix</comment>

            <return pos:start="143:13" pos:end="143:22">return <expr pos:start="143:20" pos:end="143:21"><operator pos:start="143:20" pos:end="143:20">-</operator><literal type="number" pos:start="143:21" pos:end="143:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

      

    <comment type="block" pos:start="149:5" pos:end="149:22">/* let's go :-) */</comment>

    <if_stmt pos:start="151:5" pos:end="189:5"><if pos:start="151:5" pos:end="155:5">if <condition pos:start="151:8" pos:end="151:30">(<expr pos:start="151:9" pos:end="151:29"><name pos:start="151:9" pos:end="151:26"><name pos:start="151:9" pos:end="151:9">s</name><operator pos:start="151:10" pos:end="151:11">-&gt;</operator><name pos:start="151:12" pos:end="151:26">msmpeg4_version</name></name><operator pos:start="151:27" pos:end="151:28">==</operator><literal type="number" pos:start="151:29" pos:end="151:29">5</literal></expr>)</condition> <block pos:start="151:32" pos:end="155:5">{<block_content pos:start="153:9" pos:end="153:46">

        <expr_stmt pos:start="153:9" pos:end="153:46"><expr pos:start="153:9" pos:end="153:45"><name pos:start="153:9" pos:end="153:11">ret</name><operator pos:start="153:12" pos:end="153:12">=</operator> <call pos:start="153:14" pos:end="153:45"><name pos:start="153:14" pos:end="153:42">ff_wmv2_decode_picture_header</name><argument_list pos:start="153:43" pos:end="153:45">(<argument pos:start="153:44" pos:end="153:44"><expr pos:start="153:44" pos:end="153:44"><name pos:start="153:44" pos:end="153:44">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="155:7" pos:end="159:5">else if <condition pos:start="155:15" pos:end="155:34">(<expr pos:start="155:16" pos:end="155:33"><name pos:start="155:16" pos:end="155:33"><name pos:start="155:16" pos:end="155:16">s</name><operator pos:start="155:17" pos:end="155:18">-&gt;</operator><name pos:start="155:19" pos:end="155:33">msmpeg4_version</name></name></expr>)</condition> <block pos:start="155:36" pos:end="159:5">{<block_content pos:start="157:9" pos:end="157:47">

        <expr_stmt pos:start="157:9" pos:end="157:47"><expr pos:start="157:9" pos:end="157:46"><name pos:start="157:9" pos:end="157:11">ret</name> <operator pos:start="157:13" pos:end="157:13">=</operator> <call pos:start="157:15" pos:end="157:46"><name pos:start="157:15" pos:end="157:43">msmpeg4_decode_picture_header</name><argument_list pos:start="157:44" pos:end="157:46">(<argument pos:start="157:45" pos:end="157:45"><expr pos:start="157:45" pos:end="157:45"><name pos:start="157:45" pos:end="157:45">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="159:7" pos:end="181:5">else if <condition pos:start="159:15" pos:end="159:28">(<expr pos:start="159:16" pos:end="159:27"><name pos:start="159:16" pos:end="159:27"><name pos:start="159:16" pos:end="159:16">s</name><operator pos:start="159:17" pos:end="159:18">-&gt;</operator><name pos:start="159:19" pos:end="159:27">h263_pred</name></name></expr>)</condition> <block pos:start="159:30" pos:end="181:5">{<block_content pos:start="161:9" pos:end="179:27">

        <if_stmt pos:start="161:9" pos:end="171:9"><if pos:start="161:9" pos:end="171:9">if<condition pos:start="161:11" pos:end="161:60">(<expr pos:start="161:12" pos:end="161:59"><name pos:start="161:12" pos:end="161:35"><name pos:start="161:12" pos:end="161:12">s</name><operator pos:start="161:13" pos:end="161:14">-&gt;</operator><name pos:start="161:15" pos:end="161:19">avctx</name><operator pos:start="161:20" pos:end="161:21">-&gt;</operator><name pos:start="161:22" pos:end="161:35">extradata_size</name></name> <operator pos:start="161:37" pos:end="161:38">&amp;&amp;</operator> <name pos:start="161:40" pos:end="161:56"><name pos:start="161:40" pos:end="161:40">s</name><operator pos:start="161:41" pos:end="161:42">-&gt;</operator><name pos:start="161:43" pos:end="161:56">picture_number</name></name><operator pos:start="161:57" pos:end="161:58">==</operator><literal type="number" pos:start="161:59" pos:end="161:59">0</literal></expr>)</condition><block pos:start="161:61" pos:end="171:9">{<block_content pos:start="163:13" pos:end="169:57">

            <decl_stmt pos:start="163:13" pos:end="163:29"><decl pos:start="163:13" pos:end="163:28"><type pos:start="163:13" pos:end="163:25"><name pos:start="163:13" pos:end="163:25">GetBitContext</name></type> <name pos:start="163:27" pos:end="163:28">gb</name></decl>;</decl_stmt>

            

            <expr_stmt pos:start="167:13" pos:end="167:78"><expr pos:start="167:13" pos:end="167:77"><call pos:start="167:13" pos:end="167:77"><name pos:start="167:13" pos:end="167:25">init_get_bits</name><argument_list pos:start="167:26" pos:end="167:77">(<argument pos:start="167:27" pos:end="167:29"><expr pos:start="167:27" pos:end="167:29"><operator pos:start="167:27" pos:end="167:27">&amp;</operator><name pos:start="167:28" pos:end="167:29">gb</name></expr></argument>, <argument pos:start="167:32" pos:end="167:50"><expr pos:start="167:32" pos:end="167:50"><name pos:start="167:32" pos:end="167:50"><name pos:start="167:32" pos:end="167:32">s</name><operator pos:start="167:33" pos:end="167:34">-&gt;</operator><name pos:start="167:35" pos:end="167:39">avctx</name><operator pos:start="167:40" pos:end="167:41">-&gt;</operator><name pos:start="167:42" pos:end="167:50">extradata</name></name></expr></argument>, <argument pos:start="167:53" pos:end="167:76"><expr pos:start="167:53" pos:end="167:76"><name pos:start="167:53" pos:end="167:76"><name pos:start="167:53" pos:end="167:53">s</name><operator pos:start="167:54" pos:end="167:55">-&gt;</operator><name pos:start="167:56" pos:end="167:60">avctx</name><operator pos:start="167:61" pos:end="167:62">-&gt;</operator><name pos:start="167:63" pos:end="167:76">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:57"><expr pos:start="169:13" pos:end="169:56"><name pos:start="169:13" pos:end="169:15">ret</name> <operator pos:start="169:17" pos:end="169:17">=</operator> <call pos:start="169:19" pos:end="169:56"><name pos:start="169:19" pos:end="169:48">ff_mpeg4_decode_picture_header</name><argument_list pos:start="169:49" pos:end="169:56">(<argument pos:start="169:50" pos:end="169:50"><expr pos:start="169:50" pos:end="169:50"><name pos:start="169:50" pos:end="169:50">s</name></expr></argument>, <argument pos:start="169:53" pos:end="169:55"><expr pos:start="169:53" pos:end="169:55"><operator pos:start="169:53" pos:end="169:53">&amp;</operator><name pos:start="169:54" pos:end="169:55">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:56"><expr pos:start="173:9" pos:end="173:55"><name pos:start="173:9" pos:end="173:11">ret</name> <operator pos:start="173:13" pos:end="173:13">=</operator> <call pos:start="173:15" pos:end="173:55"><name pos:start="173:15" pos:end="173:44">ff_mpeg4_decode_picture_header</name><argument_list pos:start="173:45" pos:end="173:55">(<argument pos:start="173:46" pos:end="173:46"><expr pos:start="173:46" pos:end="173:46"><name pos:start="173:46" pos:end="173:46">s</name></expr></argument>, <argument pos:start="173:49" pos:end="173:54"><expr pos:start="173:49" pos:end="173:54"><operator pos:start="173:49" pos:end="173:49">&amp;</operator><name pos:start="173:50" pos:end="173:54"><name pos:start="173:50" pos:end="173:50">s</name><operator pos:start="173:51" pos:end="173:52">-&gt;</operator><name pos:start="173:53" pos:end="173:54">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="177:9" pos:end="179:27"><if pos:start="177:9" pos:end="179:27">if<condition pos:start="177:11" pos:end="177:42">(<expr pos:start="177:12" pos:end="177:41"><name pos:start="177:12" pos:end="177:19"><name pos:start="177:12" pos:end="177:12">s</name><operator pos:start="177:13" pos:end="177:14">-&gt;</operator><name pos:start="177:15" pos:end="177:19">flags</name></name><operator pos:start="177:20" pos:end="177:20">&amp;</operator> <name pos:start="177:22" pos:end="177:41">CODEC_FLAG_LOW_DELAY</name></expr>)</condition><block type="pseudo" pos:start="179:13" pos:end="179:27"><block_content pos:start="179:13" pos:end="179:27">

            <expr_stmt pos:start="179:13" pos:end="179:27"><expr pos:start="179:13" pos:end="179:26"><name pos:start="179:13" pos:end="179:24"><name pos:start="179:13" pos:end="179:13">s</name><operator pos:start="179:14" pos:end="179:15">-&gt;</operator><name pos:start="179:16" pos:end="179:24">low_delay</name></name><operator pos:start="179:25" pos:end="179:25">=</operator><literal type="number" pos:start="179:26" pos:end="179:26">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="181:7" pos:end="185:5">else if <condition pos:start="181:15" pos:end="181:29">(<expr pos:start="181:16" pos:end="181:28"><name pos:start="181:16" pos:end="181:28"><name pos:start="181:16" pos:end="181:16">s</name><operator pos:start="181:17" pos:end="181:18">-&gt;</operator><name pos:start="181:19" pos:end="181:28">h263_intel</name></name></expr>)</condition> <block pos:start="181:31" pos:end="185:5">{<block_content pos:start="183:9" pos:end="183:50">

        <expr_stmt pos:start="183:9" pos:end="183:50"><expr pos:start="183:9" pos:end="183:49"><name pos:start="183:9" pos:end="183:11">ret</name> <operator pos:start="183:13" pos:end="183:13">=</operator> <call pos:start="183:15" pos:end="183:49"><name pos:start="183:15" pos:end="183:46">intel_h263_decode_picture_header</name><argument_list pos:start="183:47" pos:end="183:49">(<argument pos:start="183:48" pos:end="183:48"><expr pos:start="183:48" pos:end="183:48"><name pos:start="183:48" pos:end="183:48">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="185:7" pos:end="189:5">else <block pos:start="185:12" pos:end="189:5">{<block_content pos:start="187:9" pos:end="187:44">

        <expr_stmt pos:start="187:9" pos:end="187:44"><expr pos:start="187:9" pos:end="187:43"><name pos:start="187:9" pos:end="187:11">ret</name> <operator pos:start="187:13" pos:end="187:13">=</operator> <call pos:start="187:15" pos:end="187:43"><name pos:start="187:15" pos:end="187:40">h263_decode_picture_header</name><argument_list pos:start="187:41" pos:end="187:43">(<argument pos:start="187:42" pos:end="187:42"><expr pos:start="187:42" pos:end="187:42"><name pos:start="187:42" pos:end="187:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:39"><expr pos:start="191:5" pos:end="191:38"><name pos:start="191:5" pos:end="191:23"><name pos:start="191:5" pos:end="191:9">avctx</name><operator pos:start="191:10" pos:end="191:11">-&gt;</operator><name pos:start="191:12" pos:end="191:23">has_b_frames</name></name><operator pos:start="191:24" pos:end="191:24">=</operator> <operator pos:start="191:26" pos:end="191:26">!</operator><name pos:start="191:27" pos:end="191:38"><name pos:start="191:27" pos:end="191:27">s</name><operator pos:start="191:28" pos:end="191:29">-&gt;</operator><name pos:start="191:30" pos:end="191:38">low_delay</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="195:5" pos:end="313:5"><if pos:start="195:5" pos:end="313:5">if<condition pos:start="195:7" pos:end="195:44">(<expr pos:start="195:8" pos:end="195:43"><name pos:start="195:8" pos:end="195:25"><name pos:start="195:8" pos:end="195:8">s</name><operator pos:start="195:9" pos:end="195:10">-&gt;</operator><name pos:start="195:11" pos:end="195:25">workaround_bugs</name></name><operator pos:start="195:26" pos:end="195:26">&amp;</operator><name pos:start="195:27" pos:end="195:43">FF_BUG_AUTODETECT</name></expr>)</condition><block pos:start="195:45" pos:end="313:5">{<block_content pos:start="197:9" pos:end="312:0">

        <if_stmt pos:start="197:9" pos:end="203:53"><if pos:start="197:9" pos:end="199:53">if<condition pos:start="197:11" pos:end="197:62">(<expr pos:start="197:12" pos:end="197:61"><name pos:start="197:12" pos:end="197:31"><name pos:start="197:12" pos:end="197:12">s</name><operator pos:start="197:13" pos:end="197:14">-&gt;</operator><name pos:start="197:15" pos:end="197:31">padding_bug_score</name></name> <operator pos:start="197:33" pos:end="197:33">&gt;</operator> <operator pos:start="197:35" pos:end="197:35">-</operator><literal type="number" pos:start="197:36" pos:end="197:36">2</literal> <operator pos:start="197:38" pos:end="197:39">&amp;&amp;</operator> <operator pos:start="197:41" pos:end="197:41">!</operator><name pos:start="197:42" pos:end="197:61"><name pos:start="197:42" pos:end="197:42">s</name><operator pos:start="197:43" pos:end="197:44">-&gt;</operator><name pos:start="197:45" pos:end="197:61">data_partitioning</name></name></expr>)</condition><block type="pseudo" pos:start="199:13" pos:end="199:53"><block_content pos:start="199:13" pos:end="199:53">

            <expr_stmt pos:start="199:13" pos:end="199:53"><expr pos:start="199:13" pos:end="199:52"><name pos:start="199:13" pos:end="199:30"><name pos:start="199:13" pos:end="199:13">s</name><operator pos:start="199:14" pos:end="199:15">-&gt;</operator><name pos:start="199:16" pos:end="199:30">workaround_bugs</name></name> <operator pos:start="199:32" pos:end="199:33">|=</operator>  <name pos:start="199:36" pos:end="199:52">FF_BUG_NO_PADDING</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="201:9" pos:end="203:53">else<block type="pseudo" pos:start="203:13" pos:end="203:53"><block_content pos:start="203:13" pos:end="203:53">

            <expr_stmt pos:start="203:13" pos:end="203:53"><expr pos:start="203:13" pos:end="203:52"><name pos:start="203:13" pos:end="203:30"><name pos:start="203:13" pos:end="203:13">s</name><operator pos:start="203:14" pos:end="203:15">-&gt;</operator><name pos:start="203:16" pos:end="203:30">workaround_bugs</name></name> <operator pos:start="203:32" pos:end="203:33">&amp;=</operator> <operator pos:start="203:35" pos:end="203:35">~</operator><name pos:start="203:36" pos:end="203:52">FF_BUG_NO_PADDING</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="207:9" pos:end="224:0"><if pos:start="207:9" pos:end="224:0">if<condition pos:start="207:11" pos:end="207:53">(<expr pos:start="207:12" pos:end="207:52"><name pos:start="207:12" pos:end="207:27"><name pos:start="207:12" pos:end="207:12">s</name><operator pos:start="207:13" pos:end="207:14">-&gt;</operator><name pos:start="207:15" pos:end="207:19">avctx</name><operator pos:start="207:20" pos:end="207:21">-&gt;</operator><name pos:start="207:22" pos:end="207:27">fourcc</name></name> <operator pos:start="207:29" pos:end="207:30">==</operator> <call pos:start="207:32" pos:end="207:52"><name pos:start="207:32" pos:end="207:44">ff_get_fourcc</name><argument_list pos:start="207:45" pos:end="207:52">(<argument pos:start="207:46" pos:end="207:51"><expr pos:start="207:46" pos:end="207:51"><literal type="string" pos:start="207:46" pos:end="207:51">"XVIX"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="209:13" pos:end="224:0"><block_content pos:start="209:13" pos:end="224:0"> 

            <expr_stmt pos:start="209:13" pos:end="224:0"><expr pos:start="209:13" pos:end="209:50"><name pos:start="209:13" pos:end="209:30"><name pos:start="209:13" pos:end="209:13">s</name><operator pos:start="209:14" pos:end="209:15">-&gt;</operator><name pos:start="209:16" pos:end="209:30">workaround_bugs</name></name><operator pos:start="209:31" pos:end="209:32">|=</operator> <name pos:start="209:34" pos:end="209:50">FF_BUG_XVID_ILACE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if pos:start="211:1" pos:end="211:5">#<cpp:directive pos:start="211:2" pos:end="211:3">if</cpp:directive> <expr pos:start="211:5" pos:end="211:5"><literal type="number" pos:start="211:5" pos:end="211:5">0</literal></expr></cpp:if>

        if(s-&gt;avctx-&gt;fourcc == ff_get_fourcc("MP4S")) 

            s-&gt;workaround_bugs|= FF_BUG_AC_VLC;

        

        if(s-&gt;avctx-&gt;fourcc == ff_get_fourcc("M4S2")) 

            s-&gt;workaround_bugs|= FF_BUG_AC_VLC;

<cpp:endif pos:start="223:1" pos:end="223:6">#<cpp:directive pos:start="223:2" pos:end="223:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="225:9" pos:end="231:9"><if pos:start="225:9" pos:end="231:9">if<condition pos:start="225:11" pos:end="225:53">(<expr pos:start="225:12" pos:end="225:52"><name pos:start="225:12" pos:end="225:27"><name pos:start="225:12" pos:end="225:12">s</name><operator pos:start="225:13" pos:end="225:14">-&gt;</operator><name pos:start="225:15" pos:end="225:19">avctx</name><operator pos:start="225:20" pos:end="225:21">-&gt;</operator><name pos:start="225:22" pos:end="225:27">fourcc</name></name> <operator pos:start="225:29" pos:end="225:30">==</operator> <call pos:start="225:32" pos:end="225:52"><name pos:start="225:32" pos:end="225:44">ff_get_fourcc</name><argument_list pos:start="225:45" pos:end="225:52">(<argument pos:start="225:46" pos:end="225:51"><expr pos:start="225:46" pos:end="225:51"><literal type="string" pos:start="225:46" pos:end="225:51">"UMP4"</literal></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="225:54" pos:end="231:9">{<block_content pos:start="227:13" pos:end="229:47">

            <expr_stmt pos:start="227:13" pos:end="227:45"><expr pos:start="227:13" pos:end="227:44"><name pos:start="227:13" pos:end="227:30"><name pos:start="227:13" pos:end="227:13">s</name><operator pos:start="227:14" pos:end="227:15">-&gt;</operator><name pos:start="227:16" pos:end="227:30">workaround_bugs</name></name><operator pos:start="227:31" pos:end="227:32">|=</operator> <name pos:start="227:34" pos:end="227:44">FF_BUG_UMP4</name></expr>;</expr_stmt>

            <expr_stmt pos:start="229:13" pos:end="229:47"><expr pos:start="229:13" pos:end="229:46"><name pos:start="229:13" pos:end="229:30"><name pos:start="229:13" pos:end="229:13">s</name><operator pos:start="229:14" pos:end="229:15">-&gt;</operator><name pos:start="229:16" pos:end="229:30">workaround_bugs</name></name><operator pos:start="229:31" pos:end="229:32">|=</operator> <name pos:start="229:34" pos:end="229:46">FF_BUG_AC_VLC</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="235:9" pos:end="239:9"><if pos:start="235:9" pos:end="239:9">if<condition pos:start="235:11" pos:end="235:27">(<expr pos:start="235:12" pos:end="235:26"><name pos:start="235:12" pos:end="235:26"><name pos:start="235:12" pos:end="235:12">s</name><operator pos:start="235:13" pos:end="235:14">-&gt;</operator><name pos:start="235:15" pos:end="235:26">divx_version</name></name></expr>)</condition><block pos:start="235:28" pos:end="239:9">{<block_content pos:start="237:13" pos:end="237:52">

            <expr_stmt pos:start="237:13" pos:end="237:52"><expr pos:start="237:13" pos:end="237:51"><name pos:start="237:13" pos:end="237:30"><name pos:start="237:13" pos:end="237:13">s</name><operator pos:start="237:14" pos:end="237:15">-&gt;</operator><name pos:start="237:16" pos:end="237:30">workaround_bugs</name></name><operator pos:start="237:31" pos:end="237:32">|=</operator> <name pos:start="237:34" pos:end="237:51">FF_BUG_QPEL_CHROMA</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="243:9" pos:end="245:52"><if pos:start="243:9" pos:end="245:52">if<condition pos:start="243:11" pos:end="243:73">(<expr pos:start="243:12" pos:end="243:72"><name pos:start="243:12" pos:end="243:27"><name pos:start="243:12" pos:end="243:12">s</name><operator pos:start="243:13" pos:end="243:14">-&gt;</operator><name pos:start="243:15" pos:end="243:19">avctx</name><operator pos:start="243:20" pos:end="243:21">-&gt;</operator><name pos:start="243:22" pos:end="243:27">fourcc</name></name> <operator pos:start="243:29" pos:end="243:30">==</operator> <call pos:start="243:32" pos:end="243:52"><name pos:start="243:32" pos:end="243:44">ff_get_fourcc</name><argument_list pos:start="243:45" pos:end="243:52">(<argument pos:start="243:46" pos:end="243:51"><expr pos:start="243:46" pos:end="243:51"><literal type="string" pos:start="243:46" pos:end="243:51">"XVID"</literal></expr></argument>)</argument_list></call> <operator pos:start="243:54" pos:end="243:55">&amp;&amp;</operator> <name pos:start="243:57" pos:end="243:69"><name pos:start="243:57" pos:end="243:57">s</name><operator pos:start="243:58" pos:end="243:59">-&gt;</operator><name pos:start="243:60" pos:end="243:69">xvid_build</name></name><operator pos:start="243:70" pos:end="243:71">==</operator><literal type="number" pos:start="243:72" pos:end="243:72">0</literal></expr>)</condition><block type="pseudo" pos:start="245:13" pos:end="245:52"><block_content pos:start="245:13" pos:end="245:52">

            <expr_stmt pos:start="245:13" pos:end="245:52"><expr pos:start="245:13" pos:end="245:51"><name pos:start="245:13" pos:end="245:30"><name pos:start="245:13" pos:end="245:13">s</name><operator pos:start="245:14" pos:end="245:15">-&gt;</operator><name pos:start="245:16" pos:end="245:30">workaround_bugs</name></name><operator pos:start="245:31" pos:end="245:32">|=</operator> <name pos:start="245:34" pos:end="245:51">FF_BUG_QPEL_CHROMA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        

        <if_stmt pos:start="249:9" pos:end="251:49"><if pos:start="249:9" pos:end="251:49">if<condition pos:start="249:11" pos:end="249:73">(<expr pos:start="249:12" pos:end="249:72"><name pos:start="249:12" pos:end="249:27"><name pos:start="249:12" pos:end="249:12">s</name><operator pos:start="249:13" pos:end="249:14">-&gt;</operator><name pos:start="249:15" pos:end="249:19">avctx</name><operator pos:start="249:20" pos:end="249:21">-&gt;</operator><name pos:start="249:22" pos:end="249:27">fourcc</name></name> <operator pos:start="249:29" pos:end="249:30">==</operator> <call pos:start="249:32" pos:end="249:52"><name pos:start="249:32" pos:end="249:44">ff_get_fourcc</name><argument_list pos:start="249:45" pos:end="249:52">(<argument pos:start="249:46" pos:end="249:51"><expr pos:start="249:46" pos:end="249:51"><literal type="string" pos:start="249:46" pos:end="249:51">"XVID"</literal></expr></argument>)</argument_list></call> <operator pos:start="249:54" pos:end="249:55">&amp;&amp;</operator> <name pos:start="249:57" pos:end="249:69"><name pos:start="249:57" pos:end="249:57">s</name><operator pos:start="249:58" pos:end="249:59">-&gt;</operator><name pos:start="249:60" pos:end="249:69">xvid_build</name></name><operator pos:start="249:70" pos:end="249:71">==</operator><literal type="number" pos:start="249:72" pos:end="249:72">0</literal></expr>)</condition><block type="pseudo" pos:start="251:13" pos:end="251:49"><block_content pos:start="251:13" pos:end="251:49">

            <expr_stmt pos:start="251:13" pos:end="251:49"><expr pos:start="251:13" pos:end="251:48"><name pos:start="251:13" pos:end="251:32"><name pos:start="251:13" pos:end="251:13">s</name><operator pos:start="251:14" pos:end="251:15">-&gt;</operator><name pos:start="251:16" pos:end="251:32">padding_bug_score</name></name><operator pos:start="251:33" pos:end="251:33">=</operator> <literal type="number" pos:start="251:35" pos:end="251:37">256</literal><operator pos:start="251:38" pos:end="251:38">*</operator><literal type="number" pos:start="251:39" pos:end="251:41">256</literal><operator pos:start="251:42" pos:end="251:42">*</operator><literal type="number" pos:start="251:43" pos:end="251:45">256</literal><operator pos:start="251:46" pos:end="251:46">*</operator><literal type="number" pos:start="251:47" pos:end="251:48">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        

        <if_stmt pos:start="255:9" pos:end="257:49"><if pos:start="255:9" pos:end="257:49">if<condition pos:start="255:11" pos:end="255:45">(<expr pos:start="255:12" pos:end="255:44"><name pos:start="255:12" pos:end="255:24"><name pos:start="255:12" pos:end="255:12">s</name><operator pos:start="255:13" pos:end="255:14">-&gt;</operator><name pos:start="255:15" pos:end="255:24">xvid_build</name></name> <operator pos:start="255:26" pos:end="255:27">&amp;&amp;</operator> <name pos:start="255:29" pos:end="255:41"><name pos:start="255:29" pos:end="255:29">s</name><operator pos:start="255:30" pos:end="255:31">-&gt;</operator><name pos:start="255:32" pos:end="255:41">xvid_build</name></name><operator pos:start="255:42" pos:end="255:43">&lt;=</operator><literal type="number" pos:start="255:44" pos:end="255:44">3</literal></expr>)</condition><block type="pseudo" pos:start="257:13" pos:end="257:49"><block_content pos:start="257:13" pos:end="257:49">

            <expr_stmt pos:start="257:13" pos:end="257:49"><expr pos:start="257:13" pos:end="257:48"><name pos:start="257:13" pos:end="257:32"><name pos:start="257:13" pos:end="257:13">s</name><operator pos:start="257:14" pos:end="257:15">-&gt;</operator><name pos:start="257:16" pos:end="257:32">padding_bug_score</name></name><operator pos:start="257:33" pos:end="257:33">=</operator> <literal type="number" pos:start="257:35" pos:end="257:37">256</literal><operator pos:start="257:38" pos:end="257:38">*</operator><literal type="number" pos:start="257:39" pos:end="257:41">256</literal><operator pos:start="257:42" pos:end="257:42">*</operator><literal type="number" pos:start="257:43" pos:end="257:45">256</literal><operator pos:start="257:46" pos:end="257:46">*</operator><literal type="number" pos:start="257:47" pos:end="257:48">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        

        <if_stmt pos:start="261:9" pos:end="274:0"><if pos:start="261:9" pos:end="274:0">if<condition pos:start="261:11" pos:end="261:45">(<expr pos:start="261:12" pos:end="261:44"><name pos:start="261:12" pos:end="261:24"><name pos:start="261:12" pos:end="261:12">s</name><operator pos:start="261:13" pos:end="261:14">-&gt;</operator><name pos:start="261:15" pos:end="261:24">xvid_build</name></name> <operator pos:start="261:26" pos:end="261:27">&amp;&amp;</operator> <name pos:start="261:29" pos:end="261:41"><name pos:start="261:29" pos:end="261:29">s</name><operator pos:start="261:30" pos:end="261:31">-&gt;</operator><name pos:start="261:32" pos:end="261:41">xvid_build</name></name><operator pos:start="261:42" pos:end="261:43">&lt;=</operator><literal type="number" pos:start="261:44" pos:end="261:44">1</literal></expr>)</condition><block type="pseudo" pos:start="263:13" pos:end="274:0"><block_content pos:start="263:13" pos:end="274:0">

            <expr_stmt pos:start="263:13" pos:end="274:0"><expr pos:start="263:13" pos:end="263:51"><name pos:start="263:13" pos:end="263:30"><name pos:start="263:13" pos:end="263:13">s</name><operator pos:start="263:14" pos:end="263:15">-&gt;</operator><name pos:start="263:16" pos:end="263:30">workaround_bugs</name></name><operator pos:start="263:31" pos:end="263:32">|=</operator> <name pos:start="263:34" pos:end="263:51">FF_BUG_QPEL_CHROMA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<cpp:define pos:start="267:1" pos:end="273:50">#<cpp:directive pos:start="267:2" pos:end="267:7">define</cpp:directive> <cpp:macro pos:start="267:9" pos:end="267:41"><name pos:start="267:9" pos:end="267:21">SET_QPEL_FUNC</name><parameter_list pos:start="267:22" pos:end="267:41">(<parameter pos:start="267:23" pos:end="267:30"><type pos:start="267:23" pos:end="267:30"><name pos:start="267:23" pos:end="267:30">postfix1</name></type></parameter>, <parameter pos:start="267:33" pos:end="267:40"><type pos:start="267:33" pos:end="267:40"><name pos:start="267:33" pos:end="267:40">postfix2</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="269:5" pos:end="273:50">s-&gt;dsp.put_ ## postfix1 = ff_put_ ## postfix2;\

    s-&gt;dsp.put_no_rnd_ ## postfix1 = ff_put_no_rnd_ ## postfix2;\

    s-&gt;dsp.avg_ ## postfix1 = ff_avg_ ## postfix2;</cpp:value></cpp:define>



        <if_stmt pos:start="277:9" pos:end="312:0"><if pos:start="277:9" pos:end="312:0">if<condition pos:start="277:11" pos:end="277:47">(<expr pos:start="277:12" pos:end="277:46"><name pos:start="277:12" pos:end="277:24"><name pos:start="277:12" pos:end="277:12">s</name><operator pos:start="277:13" pos:end="277:14">-&gt;</operator><name pos:start="277:15" pos:end="277:24">lavc_build</name></name> <operator pos:start="277:26" pos:end="277:27">&amp;&amp;</operator> <name pos:start="277:29" pos:end="277:41"><name pos:start="277:29" pos:end="277:29">s</name><operator pos:start="277:30" pos:end="277:31">-&gt;</operator><name pos:start="277:32" pos:end="277:41">lavc_build</name></name><operator pos:start="277:42" pos:end="277:42">&lt;</operator><literal type="number" pos:start="277:43" pos:end="277:46">4653</literal></expr>)</condition><block type="pseudo" pos:start="279:13" pos:end="312:0"><block_content pos:start="279:13" pos:end="312:0">

            <expr_stmt pos:start="279:13" pos:end="312:0"><expr pos:start="279:13" pos:end="279:48"><name pos:start="279:13" pos:end="279:30"><name pos:start="279:13" pos:end="279:13">s</name><operator pos:start="279:14" pos:end="279:15">-&gt;</operator><name pos:start="279:16" pos:end="279:30">workaround_bugs</name></name><operator pos:start="279:31" pos:end="279:32">|=</operator> <name pos:start="279:34" pos:end="279:48">FF_BUG_STD_QPEL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        

<comment type="line" pos:start="283:1" pos:end="283:58">//printf("padding_bug_score: %d\n", s-&gt;padding_bug_score);</comment>

<cpp:if pos:start="285:1" pos:end="285:5">#<cpp:directive pos:start="285:2" pos:end="285:3">if</cpp:directive> <expr pos:start="285:5" pos:end="285:5"><literal type="number" pos:start="285:5" pos:end="285:5">0</literal></expr></cpp:if>

        if(s-&gt;divx_version==500)

            s-&gt;workaround_bugs|= FF_BUG_NO_PADDING;



        <comment type="block" pos:start="293:9" pos:end="297:11">/* very ugly XVID padding bug detection FIXME/XXX solve this differently

         * lets hope this at least works

         */</comment>

        if(   s-&gt;resync_marker==0 &amp;&amp; s-&gt;data_partitioning==0 &amp;&amp; s-&gt;divx_version==0

           &amp;&amp; s-&gt;codec_id==CODEC_ID_MPEG4 &amp;&amp; s-&gt;vo_type==0)

            s-&gt;workaround_bugs|= FF_BUG_NO_PADDING;

        

        if(s-&gt;lavc_build &amp;&amp; s-&gt;lavc_build&lt;4609) <comment type="line" pos:start="307:49" pos:end="307:111">//FIXME not sure about the version num but a 4609 file seems ok</comment>

            s-&gt;workaround_bugs|= FF_BUG_NO_PADDING;

<cpp:endif pos:start="311:1" pos:end="311:6">#<cpp:directive pos:start="311:2" pos:end="311:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    

    <if_stmt pos:start="317:5" pos:end="362:0"><if pos:start="317:5" pos:end="362:0">if<condition pos:start="317:7" pos:end="317:43">(<expr pos:start="317:8" pos:end="317:42"><name pos:start="317:8" pos:end="317:25"><name pos:start="317:8" pos:end="317:8">s</name><operator pos:start="317:9" pos:end="317:10">-&gt;</operator><name pos:start="317:11" pos:end="317:25">workaround_bugs</name></name><operator pos:start="317:26" pos:end="317:26">&amp;</operator> <name pos:start="317:28" pos:end="317:42">FF_BUG_STD_QPEL</name></expr>)</condition><block pos:start="317:44" pos:end="362:0">{<block_content pos:start="319:9" pos:end="343:63">

        <macro pos:start="319:9" pos:end="319:64"><name pos:start="319:9" pos:end="319:21">SET_QPEL_FUNC</name><argument_list pos:start="319:22" pos:end="319:64">(<argument pos:start="319:23" pos:end="319:44">qpel_pixels_tab[<literal type="number" pos:start="319:39" pos:end="319:39">0</literal>][ <literal type="number" pos:start="319:43" pos:end="319:43">5</literal>]</argument>, <argument pos:start="319:47" pos:end="319:63">qpel16_mc11_old_c</argument>)</argument_list></macro>

        <macro pos:start="321:9" pos:end="321:64"><name pos:start="321:9" pos:end="321:21">SET_QPEL_FUNC</name><argument_list pos:start="321:22" pos:end="321:64">(<argument pos:start="321:23" pos:end="321:44">qpel_pixels_tab[<literal type="number" pos:start="321:39" pos:end="321:39">0</literal>][ <literal type="number" pos:start="321:43" pos:end="321:43">7</literal>]</argument>, <argument pos:start="321:47" pos:end="321:63">qpel16_mc31_old_c</argument>)</argument_list></macro>

        <macro pos:start="323:9" pos:end="323:64"><name pos:start="323:9" pos:end="323:21">SET_QPEL_FUNC</name><argument_list pos:start="323:22" pos:end="323:64">(<argument pos:start="323:23" pos:end="323:44">qpel_pixels_tab[<literal type="number" pos:start="323:39" pos:end="323:39">0</literal>][ <literal type="number" pos:start="323:43" pos:end="323:43">9</literal>]</argument>, <argument pos:start="323:47" pos:end="323:63">qpel16_mc12_old_c</argument>)</argument_list></macro>

        <macro pos:start="325:9" pos:end="325:64"><name pos:start="325:9" pos:end="325:21">SET_QPEL_FUNC</name><argument_list pos:start="325:22" pos:end="325:64">(<argument pos:start="325:23" pos:end="325:44">qpel_pixels_tab[<literal type="number" pos:start="325:39" pos:end="325:39">0</literal>][<literal type="number" pos:start="325:42" pos:end="325:43">11</literal>]</argument>, <argument pos:start="325:47" pos:end="325:63">qpel16_mc32_old_c</argument>)</argument_list></macro>

        <macro pos:start="327:9" pos:end="327:64"><name pos:start="327:9" pos:end="327:21">SET_QPEL_FUNC</name><argument_list pos:start="327:22" pos:end="327:64">(<argument pos:start="327:23" pos:end="327:44">qpel_pixels_tab[<literal type="number" pos:start="327:39" pos:end="327:39">0</literal>][<literal type="number" pos:start="327:42" pos:end="327:43">13</literal>]</argument>, <argument pos:start="327:47" pos:end="327:63">qpel16_mc13_old_c</argument>)</argument_list></macro>

        <macro pos:start="329:9" pos:end="329:64"><name pos:start="329:9" pos:end="329:21">SET_QPEL_FUNC</name><argument_list pos:start="329:22" pos:end="329:64">(<argument pos:start="329:23" pos:end="329:44">qpel_pixels_tab[<literal type="number" pos:start="329:39" pos:end="329:39">0</literal>][<literal type="number" pos:start="329:42" pos:end="329:43">15</literal>]</argument>, <argument pos:start="329:47" pos:end="329:63">qpel16_mc33_old_c</argument>)</argument_list></macro>



        <macro pos:start="333:9" pos:end="333:63"><name pos:start="333:9" pos:end="333:21">SET_QPEL_FUNC</name><argument_list pos:start="333:22" pos:end="333:63">(<argument pos:start="333:23" pos:end="333:44">qpel_pixels_tab[<literal type="number" pos:start="333:39" pos:end="333:39">1</literal>][ <literal type="number" pos:start="333:43" pos:end="333:43">5</literal>]</argument>, <argument pos:start="333:47" pos:end="333:62">qpel8_mc11_old_c</argument>)</argument_list></macro>

        <macro pos:start="335:9" pos:end="335:63"><name pos:start="335:9" pos:end="335:21">SET_QPEL_FUNC</name><argument_list pos:start="335:22" pos:end="335:63">(<argument pos:start="335:23" pos:end="335:44">qpel_pixels_tab[<literal type="number" pos:start="335:39" pos:end="335:39">1</literal>][ <literal type="number" pos:start="335:43" pos:end="335:43">7</literal>]</argument>, <argument pos:start="335:47" pos:end="335:62">qpel8_mc31_old_c</argument>)</argument_list></macro>

        <macro pos:start="337:9" pos:end="337:63"><name pos:start="337:9" pos:end="337:21">SET_QPEL_FUNC</name><argument_list pos:start="337:22" pos:end="337:63">(<argument pos:start="337:23" pos:end="337:44">qpel_pixels_tab[<literal type="number" pos:start="337:39" pos:end="337:39">1</literal>][ <literal type="number" pos:start="337:43" pos:end="337:43">9</literal>]</argument>, <argument pos:start="337:47" pos:end="337:62">qpel8_mc12_old_c</argument>)</argument_list></macro>

        <macro pos:start="339:9" pos:end="339:63"><name pos:start="339:9" pos:end="339:21">SET_QPEL_FUNC</name><argument_list pos:start="339:22" pos:end="339:63">(<argument pos:start="339:23" pos:end="339:44">qpel_pixels_tab[<literal type="number" pos:start="339:39" pos:end="339:39">1</literal>][<literal type="number" pos:start="339:42" pos:end="339:43">11</literal>]</argument>, <argument pos:start="339:47" pos:end="339:62">qpel8_mc32_old_c</argument>)</argument_list></macro>

        <macro pos:start="341:9" pos:end="341:63"><name pos:start="341:9" pos:end="341:21">SET_QPEL_FUNC</name><argument_list pos:start="341:22" pos:end="341:63">(<argument pos:start="341:23" pos:end="341:44">qpel_pixels_tab[<literal type="number" pos:start="341:39" pos:end="341:39">1</literal>][<literal type="number" pos:start="341:42" pos:end="341:43">13</literal>]</argument>, <argument pos:start="341:47" pos:end="341:62">qpel8_mc13_old_c</argument>)</argument_list></macro>

        <macro pos:start="343:9" pos:end="343:63"><name pos:start="343:9" pos:end="343:21">SET_QPEL_FUNC</name><argument_list pos:start="343:22" pos:end="343:63">(<argument pos:start="343:23" pos:end="343:44">qpel_pixels_tab[<literal type="number" pos:start="343:39" pos:end="343:39">1</literal>][<literal type="number" pos:start="343:42" pos:end="343:43">15</literal>]</argument>, <argument pos:start="343:47" pos:end="343:62">qpel8_mc33_old_c</argument>)</argument_list></macro>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="349:1" pos:end="349:5">#<cpp:directive pos:start="349:2" pos:end="349:3">if</cpp:directive> <expr pos:start="349:5" pos:end="349:5"><literal type="number" pos:start="349:5" pos:end="349:5">0</literal></expr></cpp:if> <comment type="line" pos:start="349:7" pos:end="349:46">// dump bits per frame / qp / complexity</comment>

{

    static FILE *f=NULL;

    if(!f) f=fopen("rate_qp_cplx.txt", "w");

    fprintf(f, "%d %d %f\n", buf_size, s-&gt;qscale, buf_size*(double)s-&gt;qscale);

}

<cpp:endif pos:start="361:1" pos:end="361:6">#<cpp:directive pos:start="361:2" pos:end="361:6">endif</cpp:directive></cpp:endif>

       

        <comment type="block" pos:start="365:9" pos:end="365:72">/* After H263 &amp; mpeg4 header decode we have the height, width,*/</comment>

        <comment type="block" pos:start="367:9" pos:end="367:71">/* and other parameters. So then we could init the picture   */</comment>

        <comment type="block" pos:start="369:9" pos:end="369:71">/* FIXME: By the way H263 decoder is evolving it should have */</comment>

        <comment type="block" pos:start="371:9" pos:end="371:71">/* an H263EncContext                                         */</comment>

    <if_stmt pos:start="373:5" pos:end="379:21"><if pos:start="373:5" pos:end="375:87">if<condition pos:start="373:7" pos:end="373:26">(<expr pos:start="373:8" pos:end="373:25"><name pos:start="373:8" pos:end="373:25"><name pos:start="373:8" pos:end="373:8">s</name><operator pos:start="373:9" pos:end="373:10">-&gt;</operator><name pos:start="373:11" pos:end="373:25">aspected_height</name></name></expr>)</condition><block type="pseudo" pos:start="375:9" pos:end="375:87"><block_content pos:start="375:9" pos:end="375:87">

        <expr_stmt pos:start="375:9" pos:end="375:87"><expr pos:start="375:9" pos:end="375:86"><name pos:start="375:9" pos:end="375:18">new_aspect</name><operator pos:start="375:19" pos:end="375:19">=</operator> <name pos:start="375:21" pos:end="375:37"><name pos:start="375:21" pos:end="375:21">s</name><operator pos:start="375:22" pos:end="375:23">-&gt;</operator><name pos:start="375:24" pos:end="375:37">aspected_width</name></name><operator pos:start="375:38" pos:end="375:38">*</operator><name pos:start="375:39" pos:end="375:46"><name pos:start="375:39" pos:end="375:39">s</name><operator pos:start="375:40" pos:end="375:41">-&gt;</operator><name pos:start="375:42" pos:end="375:46">width</name></name> <operator pos:start="375:48" pos:end="375:48">/</operator> <operator pos:start="375:50" pos:end="375:50">(</operator><name pos:start="375:51" pos:end="375:55">float</name><operator pos:start="375:56" pos:end="375:56">)</operator><operator pos:start="375:57" pos:end="375:57">(</operator><name pos:start="375:58" pos:end="375:66"><name pos:start="375:58" pos:end="375:58">s</name><operator pos:start="375:59" pos:end="375:60">-&gt;</operator><name pos:start="375:61" pos:end="375:66">height</name></name><operator pos:start="375:67" pos:end="375:67">*</operator><name pos:start="375:68" pos:end="375:85"><name pos:start="375:68" pos:end="375:68">s</name><operator pos:start="375:69" pos:end="375:70">-&gt;</operator><name pos:start="375:71" pos:end="375:85">aspected_height</name></name><operator pos:start="375:86" pos:end="375:86">)</operator></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="377:5" pos:end="379:21">else<block type="pseudo" pos:start="379:9" pos:end="379:21"><block_content pos:start="379:9" pos:end="379:21">

        <expr_stmt pos:start="379:9" pos:end="379:21"><expr pos:start="379:9" pos:end="379:20"><name pos:start="379:9" pos:end="379:18">new_aspect</name><operator pos:start="379:19" pos:end="379:19">=</operator><literal type="number" pos:start="379:20" pos:end="379:20">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    

    <if_stmt pos:start="383:5" pos:end="393:5"><if pos:start="383:5" pos:end="393:5">if <condition pos:start="383:8" pos:end="385:57">(   <expr pos:start="383:12" pos:end="385:56"><name pos:start="383:12" pos:end="383:19"><name pos:start="383:12" pos:end="383:12">s</name><operator pos:start="383:13" pos:end="383:14">-&gt;</operator><name pos:start="383:15" pos:end="383:19">width</name></name> <operator pos:start="383:21" pos:end="383:22">!=</operator> <name pos:start="383:24" pos:end="383:35"><name pos:start="383:24" pos:end="383:28">avctx</name><operator pos:start="383:29" pos:end="383:30">-&gt;</operator><name pos:start="383:31" pos:end="383:35">width</name></name> <operator pos:start="383:37" pos:end="383:38">||</operator> <name pos:start="383:40" pos:end="383:48"><name pos:start="383:40" pos:end="383:40">s</name><operator pos:start="383:41" pos:end="383:42">-&gt;</operator><name pos:start="383:43" pos:end="383:48">height</name></name> <operator pos:start="383:50" pos:end="383:51">!=</operator> <name pos:start="383:53" pos:end="383:65"><name pos:start="383:53" pos:end="383:57">avctx</name><operator pos:start="383:58" pos:end="383:59">-&gt;</operator><name pos:start="383:60" pos:end="383:65">height</name></name> 

        <operator pos:start="385:9" pos:end="385:10">||</operator> <call pos:start="385:12" pos:end="385:48"><name pos:start="385:12" pos:end="385:14">ABS</name><argument_list pos:start="385:15" pos:end="385:48">(<argument pos:start="385:16" pos:end="385:47"><expr pos:start="385:16" pos:end="385:47"><name pos:start="385:16" pos:end="385:25">new_aspect</name> <operator pos:start="385:27" pos:end="385:27">-</operator> <name pos:start="385:29" pos:end="385:47"><name pos:start="385:29" pos:end="385:33">avctx</name><operator pos:start="385:34" pos:end="385:35">-&gt;</operator><name pos:start="385:36" pos:end="385:47">aspect_ratio</name></name></expr></argument>)</argument_list></call> <operator pos:start="385:50" pos:end="385:50">&gt;</operator> <literal type="number" pos:start="385:52" pos:end="385:56">0.001</literal></expr>)</condition> <block pos:start="385:59" pos:end="393:5">{<block_content pos:start="389:9" pos:end="391:33">

        <comment type="block" pos:start="387:9" pos:end="387:54">/* H.263 could change picture size any time */</comment>

        <expr_stmt pos:start="389:9" pos:end="389:26"><expr pos:start="389:9" pos:end="389:25"><call pos:start="389:9" pos:end="389:25"><name pos:start="389:9" pos:end="389:22">MPV_common_end</name><argument_list pos:start="389:23" pos:end="389:25">(<argument pos:start="389:24" pos:end="389:24"><expr pos:start="389:24" pos:end="389:24"><name pos:start="389:24" pos:end="389:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="391:9" pos:end="391:33"><expr pos:start="391:9" pos:end="391:32"><name pos:start="391:9" pos:end="391:30"><name pos:start="391:9" pos:end="391:9">s</name><operator pos:start="391:10" pos:end="391:11">-&gt;</operator><name pos:start="391:12" pos:end="391:30">context_initialized</name></name><operator pos:start="391:31" pos:end="391:31">=</operator><literal type="number" pos:start="391:32" pos:end="391:32">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="395:5" pos:end="407:5"><if pos:start="395:5" pos:end="407:5">if <condition pos:start="395:8" pos:end="395:32">(<expr pos:start="395:9" pos:end="395:31"><operator pos:start="395:9" pos:end="395:9">!</operator><name pos:start="395:10" pos:end="395:31"><name pos:start="395:10" pos:end="395:10">s</name><operator pos:start="395:11" pos:end="395:12">-&gt;</operator><name pos:start="395:13" pos:end="395:31">context_initialized</name></name></expr>)</condition> <block pos:start="395:34" pos:end="407:5">{<block_content pos:start="397:9" pos:end="405:19">

        <expr_stmt pos:start="397:9" pos:end="397:32"><expr pos:start="397:9" pos:end="397:31"><name pos:start="397:9" pos:end="397:20"><name pos:start="397:9" pos:end="397:13">avctx</name><operator pos:start="397:14" pos:end="397:15">-&gt;</operator><name pos:start="397:16" pos:end="397:20">width</name></name> <operator pos:start="397:22" pos:end="397:22">=</operator> <name pos:start="397:24" pos:end="397:31"><name pos:start="397:24" pos:end="397:24">s</name><operator pos:start="397:25" pos:end="397:26">-&gt;</operator><name pos:start="397:27" pos:end="397:31">width</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="399:9" pos:end="399:34"><expr pos:start="399:9" pos:end="399:33"><name pos:start="399:9" pos:end="399:21"><name pos:start="399:9" pos:end="399:13">avctx</name><operator pos:start="399:14" pos:end="399:15">-&gt;</operator><name pos:start="399:16" pos:end="399:21">height</name></name> <operator pos:start="399:23" pos:end="399:23">=</operator> <name pos:start="399:25" pos:end="399:33"><name pos:start="399:25" pos:end="399:25">s</name><operator pos:start="399:26" pos:end="399:27">-&gt;</operator><name pos:start="399:28" pos:end="399:33">height</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="401:9" pos:end="401:40"><expr pos:start="401:9" pos:end="401:39"><name pos:start="401:9" pos:end="401:27"><name pos:start="401:9" pos:end="401:13">avctx</name><operator pos:start="401:14" pos:end="401:15">-&gt;</operator><name pos:start="401:16" pos:end="401:27">aspect_ratio</name></name><operator pos:start="401:28" pos:end="401:28">=</operator> <name pos:start="401:30" pos:end="401:39">new_aspect</name></expr>;</expr_stmt>



        <goto pos:start="405:9" pos:end="405:19">goto <name pos:start="405:14" pos:end="405:18">retry</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="411:5" pos:end="413:49"><if pos:start="411:5" pos:end="413:49">if<condition pos:start="411:7" pos:end="411:67">(<expr pos:start="411:8" pos:end="411:66"><operator pos:start="411:8" pos:end="411:8">(</operator><name pos:start="411:9" pos:end="411:19"><name pos:start="411:9" pos:end="411:9">s</name><operator pos:start="411:10" pos:end="411:11">-&gt;</operator><name pos:start="411:12" pos:end="411:19">codec_id</name></name><operator pos:start="411:20" pos:end="411:21">==</operator><name pos:start="411:22" pos:end="411:34">CODEC_ID_H263</name> <operator pos:start="411:36" pos:end="411:37">||</operator> <name pos:start="411:39" pos:end="411:49"><name pos:start="411:39" pos:end="411:39">s</name><operator pos:start="411:40" pos:end="411:41">-&gt;</operator><name pos:start="411:42" pos:end="411:49">codec_id</name></name><operator pos:start="411:50" pos:end="411:51">==</operator><name pos:start="411:52" pos:end="411:65">CODEC_ID_H263P</name><operator pos:start="411:66" pos:end="411:66">)</operator></expr>)</condition><block type="pseudo" pos:start="413:9" pos:end="413:49"><block_content pos:start="413:9" pos:end="413:49">

        <expr_stmt pos:start="413:9" pos:end="413:49"><expr pos:start="413:9" pos:end="413:48"><name pos:start="413:9" pos:end="413:20"><name pos:start="413:9" pos:end="413:9">s</name><operator pos:start="413:10" pos:end="413:11">-&gt;</operator><name pos:start="413:12" pos:end="413:20">gob_index</name></name> <operator pos:start="413:22" pos:end="413:22">=</operator> <call pos:start="413:24" pos:end="413:48"><name pos:start="413:24" pos:end="413:45">ff_h263_get_gob_height</name><argument_list pos:start="413:46" pos:end="413:48">(<argument pos:start="413:47" pos:end="413:47"><expr pos:start="413:47" pos:end="413:47"><name pos:start="413:47" pos:end="413:47">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="417:5" pos:end="417:65"><if pos:start="417:5" pos:end="417:65">if<condition pos:start="417:7" pos:end="417:25">(<expr pos:start="417:8" pos:end="417:24"><name pos:start="417:8" pos:end="417:10">ret</name><operator pos:start="417:11" pos:end="417:12">==</operator><name pos:start="417:13" pos:end="417:24">FRAME_SKIPED</name></expr>)</condition><block type="pseudo" pos:start="417:27" pos:end="417:65"><block_content pos:start="417:27" pos:end="417:65"> <return pos:start="417:27" pos:end="417:65">return <expr pos:start="417:34" pos:end="417:64"><call pos:start="417:34" pos:end="417:64"><name pos:start="417:34" pos:end="417:51">get_consumed_bytes</name><argument_list pos:start="417:52" pos:end="417:64">(<argument pos:start="417:53" pos:end="417:53"><expr pos:start="417:53" pos:end="417:53"><name pos:start="417:53" pos:end="417:53">s</name></expr></argument>, <argument pos:start="417:56" pos:end="417:63"><expr pos:start="417:56" pos:end="417:63"><name pos:start="417:56" pos:end="417:63">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block" pos:start="419:5" pos:end="419:41">/* skip if the header was thrashed */</comment>

    <if_stmt pos:start="421:5" pos:end="427:5"><if pos:start="421:5" pos:end="427:5">if <condition pos:start="421:8" pos:end="421:16">(<expr pos:start="421:9" pos:end="421:15"><name pos:start="421:9" pos:end="421:11">ret</name> <operator pos:start="421:13" pos:end="421:13">&lt;</operator> <literal type="number" pos:start="421:15" pos:end="421:15">0</literal></expr>)</condition><block pos:start="421:17" pos:end="427:5">{<block_content pos:start="423:9" pos:end="425:18">

        <expr_stmt pos:start="423:9" pos:end="423:44"><expr pos:start="423:9" pos:end="423:43"><call pos:start="423:9" pos:end="423:43"><name pos:start="423:9" pos:end="423:15">fprintf</name><argument_list pos:start="423:16" pos:end="423:43">(<argument pos:start="423:17" pos:end="423:22"><expr pos:start="423:17" pos:end="423:22"><name pos:start="423:17" pos:end="423:22">stderr</name></expr></argument>, <argument pos:start="423:25" pos:end="423:42"><expr pos:start="423:25" pos:end="423:42"><literal type="string" pos:start="423:25" pos:end="423:42">"header damaged\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="425:9" pos:end="425:18">return <expr pos:start="425:16" pos:end="425:17"><operator pos:start="425:16" pos:end="425:16">-</operator><literal type="number" pos:start="425:17" pos:end="425:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    

    <comment type="line" pos:start="431:5" pos:end="431:22">// for hurry_up==5</comment>

    <expr_stmt pos:start="433:5" pos:end="433:47"><expr pos:start="433:5" pos:end="433:46"><name pos:start="433:5" pos:end="433:32"><name pos:start="433:5" pos:end="433:5">s</name><operator pos:start="433:6" pos:end="433:7">-&gt;</operator><name pos:start="433:8" pos:end="433:22">current_picture</name><operator pos:start="433:23" pos:end="433:23">.</operator><name pos:start="433:24" pos:end="433:32">pict_type</name></name><operator pos:start="433:33" pos:end="433:33">=</operator> <name pos:start="433:35" pos:end="433:46"><name pos:start="433:35" pos:end="433:35">s</name><operator pos:start="433:36" pos:end="433:37">-&gt;</operator><name pos:start="433:38" pos:end="433:46">pict_type</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="435:5" pos:end="435:57"><expr pos:start="435:5" pos:end="435:56"><name pos:start="435:5" pos:end="435:32"><name pos:start="435:5" pos:end="435:5">s</name><operator pos:start="435:6" pos:end="435:7">-&gt;</operator><name pos:start="435:8" pos:end="435:22">current_picture</name><operator pos:start="435:23" pos:end="435:23">.</operator><name pos:start="435:24" pos:end="435:32">key_frame</name></name><operator pos:start="435:33" pos:end="435:33">=</operator> <name pos:start="435:35" pos:end="435:46"><name pos:start="435:35" pos:end="435:35">s</name><operator pos:start="435:36" pos:end="435:37">-&gt;</operator><name pos:start="435:38" pos:end="435:46">pict_type</name></name> <operator pos:start="435:48" pos:end="435:49">==</operator> <name pos:start="435:51" pos:end="435:56">I_TYPE</name></expr>;</expr_stmt>



    <comment type="block" pos:start="439:5" pos:end="439:56">/* skip b frames if we dont have reference frames */</comment>

    <if_stmt pos:start="441:5" pos:end="441:101"><if pos:start="441:5" pos:end="441:101">if<condition pos:start="441:7" pos:end="441:61">(<expr pos:start="441:8" pos:end="441:60"><name pos:start="441:8" pos:end="441:30"><name pos:start="441:8" pos:end="441:8">s</name><operator pos:start="441:9" pos:end="441:10">-&gt;</operator><name pos:start="441:11" pos:end="441:22">last_picture</name><operator pos:start="441:23" pos:end="441:23">.</operator><name pos:start="441:24" pos:end="441:27">data</name><index pos:start="441:28" pos:end="441:30">[<expr pos:start="441:29" pos:end="441:29"><literal type="number" pos:start="441:29" pos:end="441:29">0</literal></expr>]</index></name><operator pos:start="441:31" pos:end="441:32">==</operator><name pos:start="441:33" pos:end="441:36">NULL</name> <operator pos:start="441:38" pos:end="441:39">&amp;&amp;</operator> <name pos:start="441:41" pos:end="441:52"><name pos:start="441:41" pos:end="441:41">s</name><operator pos:start="441:42" pos:end="441:43">-&gt;</operator><name pos:start="441:44" pos:end="441:52">pict_type</name></name><operator pos:start="441:53" pos:end="441:54">==</operator><name pos:start="441:55" pos:end="441:60">B_TYPE</name></expr>)</condition><block type="pseudo" pos:start="441:63" pos:end="441:101"><block_content pos:start="441:63" pos:end="441:101"> <return pos:start="441:63" pos:end="441:101">return <expr pos:start="441:70" pos:end="441:100"><call pos:start="441:70" pos:end="441:100"><name pos:start="441:70" pos:end="441:87">get_consumed_bytes</name><argument_list pos:start="441:88" pos:end="441:100">(<argument pos:start="441:89" pos:end="441:89"><expr pos:start="441:89" pos:end="441:89"><name pos:start="441:89" pos:end="441:89">s</name></expr></argument>, <argument pos:start="441:92" pos:end="441:99"><expr pos:start="441:92" pos:end="441:99"><name pos:start="441:92" pos:end="441:99">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block" pos:start="443:5" pos:end="443:44">/* skip b frames if we are in a hurry */</comment>

    <if_stmt pos:start="445:5" pos:end="445:87"><if pos:start="445:5" pos:end="445:87">if<condition pos:start="445:7" pos:end="445:47">(<expr pos:start="445:8" pos:end="445:46"><name pos:start="445:8" pos:end="445:22"><name pos:start="445:8" pos:end="445:12">avctx</name><operator pos:start="445:13" pos:end="445:14">-&gt;</operator><name pos:start="445:15" pos:end="445:22">hurry_up</name></name> <operator pos:start="445:24" pos:end="445:25">&amp;&amp;</operator> <name pos:start="445:27" pos:end="445:38"><name pos:start="445:27" pos:end="445:27">s</name><operator pos:start="445:28" pos:end="445:29">-&gt;</operator><name pos:start="445:30" pos:end="445:38">pict_type</name></name><operator pos:start="445:39" pos:end="445:40">==</operator><name pos:start="445:41" pos:end="445:46">B_TYPE</name></expr>)</condition><block type="pseudo" pos:start="445:49" pos:end="445:87"><block_content pos:start="445:49" pos:end="445:87"> <return pos:start="445:49" pos:end="445:87">return <expr pos:start="445:56" pos:end="445:86"><call pos:start="445:56" pos:end="445:86"><name pos:start="445:56" pos:end="445:73">get_consumed_bytes</name><argument_list pos:start="445:74" pos:end="445:86">(<argument pos:start="445:75" pos:end="445:75"><expr pos:start="445:75" pos:end="445:75"><name pos:start="445:75" pos:end="445:75">s</name></expr></argument>, <argument pos:start="445:78" pos:end="445:85"><expr pos:start="445:78" pos:end="445:85"><name pos:start="445:78" pos:end="445:85">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block" pos:start="447:5" pos:end="447:49">/* skip everything if we are in a hurry&gt;=5 */</comment>

    <if_stmt pos:start="449:5" pos:end="449:66"><if pos:start="449:5" pos:end="449:66">if<condition pos:start="449:7" pos:end="449:26">(<expr pos:start="449:8" pos:end="449:25"><name pos:start="449:8" pos:end="449:22"><name pos:start="449:8" pos:end="449:12">avctx</name><operator pos:start="449:13" pos:end="449:14">-&gt;</operator><name pos:start="449:15" pos:end="449:22">hurry_up</name></name><operator pos:start="449:23" pos:end="449:24">&gt;=</operator><literal type="number" pos:start="449:25" pos:end="449:25">5</literal></expr>)</condition><block type="pseudo" pos:start="449:28" pos:end="449:66"><block_content pos:start="449:28" pos:end="449:66"> <return pos:start="449:28" pos:end="449:66">return <expr pos:start="449:35" pos:end="449:65"><call pos:start="449:35" pos:end="449:65"><name pos:start="449:35" pos:end="449:52">get_consumed_bytes</name><argument_list pos:start="449:53" pos:end="449:65">(<argument pos:start="449:54" pos:end="449:54"><expr pos:start="449:54" pos:end="449:54"><name pos:start="449:54" pos:end="449:54">s</name></expr></argument>, <argument pos:start="449:57" pos:end="449:64"><expr pos:start="449:57" pos:end="449:64"><name pos:start="449:57" pos:end="449:64">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    

    <if_stmt pos:start="453:5" pos:end="463:5"><if pos:start="453:5" pos:end="463:5">if<condition pos:start="453:7" pos:end="453:31">(<expr pos:start="453:8" pos:end="453:30"><name pos:start="453:8" pos:end="453:30"><name pos:start="453:8" pos:end="453:8">s</name><operator pos:start="453:9" pos:end="453:10">-&gt;</operator><name pos:start="453:11" pos:end="453:30">next_p_frame_damaged</name></name></expr>)</condition><block pos:start="453:32" pos:end="463:5">{<block_content pos:start="455:9" pos:end="461:38">

        <if_stmt pos:start="455:9" pos:end="461:38"><if pos:start="455:9" pos:end="457:51">if<condition pos:start="455:11" pos:end="455:32">(<expr pos:start="455:12" pos:end="455:31"><name pos:start="455:12" pos:end="455:23"><name pos:start="455:12" pos:end="455:12">s</name><operator pos:start="455:13" pos:end="455:14">-&gt;</operator><name pos:start="455:15" pos:end="455:23">pict_type</name></name><operator pos:start="455:24" pos:end="455:25">==</operator><name pos:start="455:26" pos:end="455:31">B_TYPE</name></expr>)</condition><block type="pseudo" pos:start="457:13" pos:end="457:51"><block_content pos:start="457:13" pos:end="457:51">

            <return pos:start="457:13" pos:end="457:51">return <expr pos:start="457:20" pos:end="457:50"><call pos:start="457:20" pos:end="457:50"><name pos:start="457:20" pos:end="457:37">get_consumed_bytes</name><argument_list pos:start="457:38" pos:end="457:50">(<argument pos:start="457:39" pos:end="457:39"><expr pos:start="457:39" pos:end="457:39"><name pos:start="457:39" pos:end="457:39">s</name></expr></argument>, <argument pos:start="457:42" pos:end="457:49"><expr pos:start="457:42" pos:end="457:49"><name pos:start="457:42" pos:end="457:49">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

        <else pos:start="459:9" pos:end="461:38">else<block type="pseudo" pos:start="461:13" pos:end="461:38"><block_content pos:start="461:13" pos:end="461:38">

            <expr_stmt pos:start="461:13" pos:end="461:38"><expr pos:start="461:13" pos:end="461:37"><name pos:start="461:13" pos:end="461:35"><name pos:start="461:13" pos:end="461:13">s</name><operator pos:start="461:14" pos:end="461:15">-&gt;</operator><name pos:start="461:16" pos:end="461:35">next_p_frame_damaged</name></name><operator pos:start="461:36" pos:end="461:36">=</operator><literal type="number" pos:start="461:37" pos:end="461:37">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="467:5" pos:end="474:0"><if pos:start="467:5" pos:end="474:0">if<condition pos:start="467:7" pos:end="467:37">(<expr pos:start="467:8" pos:end="467:36"><call pos:start="467:8" pos:end="467:32"><name pos:start="467:8" pos:end="467:22">MPV_frame_start</name><argument_list pos:start="467:23" pos:end="467:32">(<argument pos:start="467:24" pos:end="467:24"><expr pos:start="467:24" pos:end="467:24"><name pos:start="467:24" pos:end="467:24">s</name></expr></argument>, <argument pos:start="467:27" pos:end="467:31"><expr pos:start="467:27" pos:end="467:31"><name pos:start="467:27" pos:end="467:31">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="467:34" pos:end="467:34">&lt;</operator> <literal type="number" pos:start="467:36" pos:end="467:36">0</literal></expr>)</condition><block type="pseudo" pos:start="469:9" pos:end="474:0"><block_content pos:start="469:9" pos:end="474:0">

        <return pos:start="469:9" pos:end="474:0">return <expr pos:start="469:16" pos:end="469:17"><operator pos:start="469:16" pos:end="469:16">-</operator><literal type="number" pos:start="469:17" pos:end="469:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



<cpp:ifdef pos:start="473:1" pos:end="473:12">#<cpp:directive pos:start="473:2" pos:end="473:6">ifdef</cpp:directive> <name pos:start="473:8" pos:end="473:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="475:5" pos:end="478:0"><expr pos:start="475:5" pos:end="475:36"><call pos:start="475:5" pos:end="475:36"><name pos:start="475:5" pos:end="475:10">printf</name><argument_list pos:start="475:11" pos:end="475:36">(<argument pos:start="475:12" pos:end="475:24"><expr pos:start="475:12" pos:end="475:24"><literal type="string" pos:start="475:12" pos:end="475:24">"qscale=%d\n"</literal></expr></argument>, <argument pos:start="475:27" pos:end="475:35"><expr pos:start="475:27" pos:end="475:35"><name pos:start="475:27" pos:end="475:35"><name pos:start="475:27" pos:end="475:27">s</name><operator pos:start="475:28" pos:end="475:29">-&gt;</operator><name pos:start="475:30" pos:end="475:35">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="477:1" pos:end="477:6">#<cpp:directive pos:start="477:2" pos:end="477:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="481:5" pos:end="483:121"><if pos:start="481:5" pos:end="483:121">if<condition pos:start="481:7" pos:end="481:27">(<expr pos:start="481:8" pos:end="481:26"><name pos:start="481:8" pos:end="481:26"><name pos:start="481:8" pos:end="481:8">s</name><operator pos:start="481:9" pos:end="481:10">-&gt;</operator><name pos:start="481:11" pos:end="481:26">error_resilience</name></name></expr>)</condition><block type="pseudo" pos:start="483:9" pos:end="483:121"><block_content pos:start="483:9" pos:end="483:121">

        <expr_stmt pos:start="483:9" pos:end="483:121"><expr pos:start="483:9" pos:end="483:120"><call pos:start="483:9" pos:end="483:120"><name pos:start="483:9" pos:end="483:14">memset</name><argument_list pos:start="483:15" pos:end="483:120">(<argument pos:start="483:16" pos:end="483:36"><expr pos:start="483:16" pos:end="483:36"><name pos:start="483:16" pos:end="483:36"><name pos:start="483:16" pos:end="483:16">s</name><operator pos:start="483:17" pos:end="483:18">-&gt;</operator><name pos:start="483:19" pos:end="483:36">error_status_table</name></name></expr></argument>, <argument pos:start="483:39" pos:end="483:94"><expr pos:start="483:39" pos:end="483:94"><name pos:start="483:39" pos:end="483:46">MV_ERROR</name><operator pos:start="483:47" pos:end="483:47">|</operator><name pos:start="483:48" pos:end="483:55">AC_ERROR</name><operator pos:start="483:56" pos:end="483:56">|</operator><name pos:start="483:57" pos:end="483:64">DC_ERROR</name><operator pos:start="483:65" pos:end="483:65">|</operator><name pos:start="483:66" pos:end="483:73">VP_START</name><operator pos:start="483:74" pos:end="483:74">|</operator><name pos:start="483:75" pos:end="483:80">AC_END</name><operator pos:start="483:81" pos:end="483:81">|</operator><name pos:start="483:82" pos:end="483:87">DC_END</name><operator pos:start="483:88" pos:end="483:88">|</operator><name pos:start="483:89" pos:end="483:94">MV_END</name></expr></argument>, <argument pos:start="483:97" pos:end="483:119"><expr pos:start="483:97" pos:end="483:119"><name pos:start="483:97" pos:end="483:105"><name pos:start="483:97" pos:end="483:97">s</name><operator pos:start="483:98" pos:end="483:99">-&gt;</operator><name pos:start="483:100" pos:end="483:105">mb_num</name></name><operator pos:start="483:106" pos:end="483:106">*</operator><sizeof pos:start="483:107" pos:end="483:119">sizeof<argument_list pos:start="483:113" pos:end="483:119">(<argument pos:start="483:114" pos:end="483:118"><expr pos:start="483:114" pos:end="483:118"><name pos:start="483:114" pos:end="483:118">UINT8</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    

    <comment type="block" pos:start="487:5" pos:end="487:32">/* decode each macroblock */</comment>

    <expr_stmt pos:start="489:5" pos:end="495:40"><expr pos:start="489:5" pos:end="495:39"><name pos:start="489:5" pos:end="489:20"><name pos:start="489:5" pos:end="489:5">s</name><operator pos:start="489:6" pos:end="489:7">-&gt;</operator><name pos:start="489:8" pos:end="489:17">block_wrap</name><index pos:start="489:18" pos:end="489:20">[<expr pos:start="489:19" pos:end="489:19"><literal type="number" pos:start="489:19" pos:end="489:19">0</literal></expr>]</index></name><operator pos:start="489:21" pos:end="489:21">=</operator>

    <name pos:start="491:5" pos:end="491:20"><name pos:start="491:5" pos:end="491:5">s</name><operator pos:start="491:6" pos:end="491:7">-&gt;</operator><name pos:start="491:8" pos:end="491:17">block_wrap</name><index pos:start="491:18" pos:end="491:20">[<expr pos:start="491:19" pos:end="491:19"><literal type="number" pos:start="491:19" pos:end="491:19">1</literal></expr>]</index></name><operator pos:start="491:21" pos:end="491:21">=</operator>

    <name pos:start="493:5" pos:end="493:20"><name pos:start="493:5" pos:end="493:5">s</name><operator pos:start="493:6" pos:end="493:7">-&gt;</operator><name pos:start="493:8" pos:end="493:17">block_wrap</name><index pos:start="493:18" pos:end="493:20">[<expr pos:start="493:19" pos:end="493:19"><literal type="number" pos:start="493:19" pos:end="493:19">2</literal></expr>]</index></name><operator pos:start="493:21" pos:end="493:21">=</operator>

    <name pos:start="495:5" pos:end="495:20"><name pos:start="495:5" pos:end="495:5">s</name><operator pos:start="495:6" pos:end="495:7">-&gt;</operator><name pos:start="495:8" pos:end="495:17">block_wrap</name><index pos:start="495:18" pos:end="495:20">[<expr pos:start="495:19" pos:end="495:19"><literal type="number" pos:start="495:19" pos:end="495:19">3</literal></expr>]</index></name><operator pos:start="495:21" pos:end="495:21">=</operator> <name pos:start="495:23" pos:end="495:33"><name pos:start="495:23" pos:end="495:23">s</name><operator pos:start="495:24" pos:end="495:25">-&gt;</operator><name pos:start="495:26" pos:end="495:33">mb_width</name></name><operator pos:start="495:34" pos:end="495:34">*</operator><literal type="number" pos:start="495:35" pos:end="495:37">2</literal> <operator pos:start="495:37" pos:end="495:37">+</operator> <literal type="number" pos:start="495:39" pos:end="495:39">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="497:5" pos:end="499:38"><expr pos:start="497:5" pos:end="499:37"><name pos:start="497:5" pos:end="497:20"><name pos:start="497:5" pos:end="497:5">s</name><operator pos:start="497:6" pos:end="497:7">-&gt;</operator><name pos:start="497:8" pos:end="497:17">block_wrap</name><index pos:start="497:18" pos:end="497:20">[<expr pos:start="497:19" pos:end="497:19"><literal type="number" pos:start="497:19" pos:end="497:19">4</literal></expr>]</index></name><operator pos:start="497:21" pos:end="497:21">=</operator>

    <name pos:start="499:5" pos:end="499:20"><name pos:start="499:5" pos:end="499:5">s</name><operator pos:start="499:6" pos:end="499:7">-&gt;</operator><name pos:start="499:8" pos:end="499:17">block_wrap</name><index pos:start="499:18" pos:end="499:20">[<expr pos:start="499:19" pos:end="499:19"><literal type="number" pos:start="499:19" pos:end="499:19">5</literal></expr>]</index></name><operator pos:start="499:21" pos:end="499:21">=</operator> <name pos:start="499:23" pos:end="499:33"><name pos:start="499:23" pos:end="499:23">s</name><operator pos:start="499:24" pos:end="499:25">-&gt;</operator><name pos:start="499:26" pos:end="499:33">mb_width</name></name> <operator pos:start="499:35" pos:end="499:35">+</operator> <literal type="number" pos:start="499:37" pos:end="499:37">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="501:5" pos:end="501:14"><expr pos:start="501:5" pos:end="501:13"><name pos:start="501:5" pos:end="501:11"><name pos:start="501:5" pos:end="501:5">s</name><operator pos:start="501:6" pos:end="501:7">-&gt;</operator><name pos:start="501:8" pos:end="501:11">mb_x</name></name><operator pos:start="501:12" pos:end="501:12">=</operator><literal type="number" pos:start="501:13" pos:end="501:13">0</literal></expr>;</expr_stmt> 

    <expr_stmt pos:start="503:5" pos:end="503:14"><expr pos:start="503:5" pos:end="503:13"><name pos:start="503:5" pos:end="503:11"><name pos:start="503:5" pos:end="503:5">s</name><operator pos:start="503:6" pos:end="503:7">-&gt;</operator><name pos:start="503:8" pos:end="503:11">mb_y</name></name><operator pos:start="503:12" pos:end="503:12">=</operator><literal type="number" pos:start="503:13" pos:end="503:13">0</literal></expr>;</expr_stmt>

    

    <expr_stmt pos:start="507:5" pos:end="507:20"><expr pos:start="507:5" pos:end="507:19"><call pos:start="507:5" pos:end="507:19"><name pos:start="507:5" pos:end="507:16">decode_slice</name><argument_list pos:start="507:17" pos:end="507:19">(<argument pos:start="507:18" pos:end="507:18"><expr pos:start="507:18" pos:end="507:18"><name pos:start="507:18" pos:end="507:18">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="509:5" pos:end="509:40"><expr pos:start="509:5" pos:end="509:39"><name pos:start="509:5" pos:end="509:28"><name pos:start="509:5" pos:end="509:5">s</name><operator pos:start="509:6" pos:end="509:7">-&gt;</operator><name pos:start="509:8" pos:end="509:25">error_status_table</name><index pos:start="509:26" pos:end="509:28">[<expr pos:start="509:27" pos:end="509:27"><literal type="number" pos:start="509:27" pos:end="509:27">0</literal></expr>]</index></name><operator pos:start="509:29" pos:end="509:30">|=</operator> <name pos:start="509:32" pos:end="509:39">VP_START</name></expr>;</expr_stmt>

    <while pos:start="511:5" pos:end="541:5">while<condition pos:start="511:10" pos:end="511:75">(<expr pos:start="511:11" pos:end="511:74"><name pos:start="511:11" pos:end="511:17"><name pos:start="511:11" pos:end="511:11">s</name><operator pos:start="511:12" pos:end="511:13">-&gt;</operator><name pos:start="511:14" pos:end="511:17">mb_y</name></name><operator pos:start="511:18" pos:end="511:18">&lt;</operator><name pos:start="511:19" pos:end="511:30"><name pos:start="511:19" pos:end="511:19">s</name><operator pos:start="511:20" pos:end="511:21">-&gt;</operator><name pos:start="511:22" pos:end="511:30">mb_height</name></name> <operator pos:start="511:32" pos:end="511:33">&amp;&amp;</operator> <name pos:start="511:35" pos:end="511:44"><name pos:start="511:35" pos:end="511:35">s</name><operator pos:start="511:36" pos:end="511:37">-&gt;</operator><name pos:start="511:38" pos:end="511:39">gb</name><operator pos:start="511:40" pos:end="511:40">.</operator><name pos:start="511:41" pos:end="511:44">size</name></name><operator pos:start="511:45" pos:end="511:45">*</operator><literal type="number" pos:start="511:46" pos:end="511:48">8</literal> <operator pos:start="511:48" pos:end="511:48">-</operator> <call pos:start="511:50" pos:end="511:71"><name pos:start="511:50" pos:end="511:63">get_bits_count</name><argument_list pos:start="511:64" pos:end="511:71">(<argument pos:start="511:65" pos:end="511:70"><expr pos:start="511:65" pos:end="511:70"><operator pos:start="511:65" pos:end="511:65">&amp;</operator><name pos:start="511:66" pos:end="511:70"><name pos:start="511:66" pos:end="511:66">s</name><operator pos:start="511:67" pos:end="511:68">-&gt;</operator><name pos:start="511:69" pos:end="511:70">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="511:72" pos:end="511:72">&gt;</operator><literal type="number" pos:start="511:73" pos:end="511:74">16</literal></expr>)</condition><block pos:start="511:76" pos:end="541:5">{<block_content pos:start="513:9" pos:end="539:86">

        <if_stmt pos:start="513:9" pos:end="525:9"><if pos:start="513:9" pos:end="519:9">if<condition pos:start="513:11" pos:end="513:30">(<expr pos:start="513:12" pos:end="513:29"><name pos:start="513:12" pos:end="513:29"><name pos:start="513:12" pos:end="513:12">s</name><operator pos:start="513:13" pos:end="513:14">-&gt;</operator><name pos:start="513:15" pos:end="513:29">msmpeg4_version</name></name></expr>)</condition><block pos:start="513:31" pos:end="519:9">{<block_content pos:start="515:13" pos:end="517:22">

            <if_stmt pos:start="515:13" pos:end="517:22"><if pos:start="515:13" pos:end="517:22">if<condition pos:start="515:15" pos:end="515:58">(<expr pos:start="515:16" pos:end="515:57"><name pos:start="515:16" pos:end="515:22"><name pos:start="515:16" pos:end="515:16">s</name><operator pos:start="515:17" pos:end="515:18">-&gt;</operator><name pos:start="515:19" pos:end="515:22">mb_x</name></name><operator pos:start="515:23" pos:end="515:24">!=</operator><literal type="number" pos:start="515:25" pos:end="515:25">0</literal> <operator pos:start="515:27" pos:end="515:28">||</operator> <operator pos:start="515:30" pos:end="515:30">(</operator><name pos:start="515:31" pos:end="515:37"><name pos:start="515:31" pos:end="515:31">s</name><operator pos:start="515:32" pos:end="515:33">-&gt;</operator><name pos:start="515:34" pos:end="515:37">mb_y</name></name><operator pos:start="515:38" pos:end="515:38">%</operator><name pos:start="515:39" pos:end="515:53"><name pos:start="515:39" pos:end="515:39">s</name><operator pos:start="515:40" pos:end="515:41">-&gt;</operator><name pos:start="515:42" pos:end="515:53">slice_height</name></name><operator pos:start="515:54" pos:end="515:54">)</operator><operator pos:start="515:55" pos:end="515:56">!=</operator><literal type="number" pos:start="515:57" pos:end="515:57">0</literal></expr>)</condition><block type="pseudo" pos:start="517:17" pos:end="517:22"><block_content pos:start="517:17" pos:end="517:22">

                <break pos:start="517:17" pos:end="517:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></if><else pos:start="519:10" pos:end="525:9">else<block pos:start="519:14" pos:end="525:9">{<block_content pos:start="521:13" pos:end="523:22">

            <if_stmt pos:start="521:13" pos:end="523:22"><if pos:start="521:13" pos:end="523:22">if<condition pos:start="521:15" pos:end="521:35">(<expr pos:start="521:16" pos:end="521:34"><call pos:start="521:16" pos:end="521:32"><name pos:start="521:16" pos:end="521:29">ff_h263_resync</name><argument_list pos:start="521:30" pos:end="521:32">(<argument pos:start="521:31" pos:end="521:31"><expr pos:start="521:31" pos:end="521:31"><name pos:start="521:31" pos:end="521:31">s</name></expr></argument>)</argument_list></call><operator pos:start="521:33" pos:end="521:33">&lt;</operator><literal type="number" pos:start="521:34" pos:end="521:34">0</literal></expr>)</condition><block type="pseudo" pos:start="523:17" pos:end="523:22"><block_content pos:start="523:17" pos:end="523:22">

                <break pos:start="523:17" pos:end="523:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        

        <if_stmt pos:start="529:9" pos:end="531:38"><if pos:start="529:9" pos:end="531:38">if<condition pos:start="529:11" pos:end="529:48">(<expr pos:start="529:12" pos:end="529:47"><name pos:start="529:12" pos:end="529:29"><name pos:start="529:12" pos:end="529:12">s</name><operator pos:start="529:13" pos:end="529:14">-&gt;</operator><name pos:start="529:15" pos:end="529:29">msmpeg4_version</name></name><operator pos:start="529:30" pos:end="529:30">&lt;</operator><literal type="number" pos:start="529:31" pos:end="529:31">4</literal> <operator pos:start="529:33" pos:end="529:34">&amp;&amp;</operator> <name pos:start="529:36" pos:end="529:47"><name pos:start="529:36" pos:end="529:36">s</name><operator pos:start="529:37" pos:end="529:38">-&gt;</operator><name pos:start="529:39" pos:end="529:47">h263_pred</name></name></expr>)</condition><block type="pseudo" pos:start="531:13" pos:end="531:38"><block_content pos:start="531:13" pos:end="531:38">

            <expr_stmt pos:start="531:13" pos:end="531:38"><expr pos:start="531:13" pos:end="531:37"><call pos:start="531:13" pos:end="531:37"><name pos:start="531:13" pos:end="531:34">ff_mpeg4_clean_buffers</name><argument_list pos:start="531:35" pos:end="531:37">(<argument pos:start="531:36" pos:end="531:36"><expr pos:start="531:36" pos:end="531:36"><name pos:start="531:36" pos:end="531:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="535:9" pos:end="535:24"><expr pos:start="535:9" pos:end="535:23"><call pos:start="535:9" pos:end="535:23"><name pos:start="535:9" pos:end="535:20">decode_slice</name><argument_list pos:start="535:21" pos:end="535:23">(<argument pos:start="535:22" pos:end="535:22"><expr pos:start="535:22" pos:end="535:22"><name pos:start="535:22" pos:end="535:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="539:9" pos:end="539:86"><expr pos:start="539:9" pos:end="539:85"><name pos:start="539:9" pos:end="539:74"><name pos:start="539:9" pos:end="539:9">s</name><operator pos:start="539:10" pos:end="539:11">-&gt;</operator><name pos:start="539:12" pos:end="539:29">error_status_table</name><index pos:start="539:30" pos:end="539:74">[<expr pos:start="539:31" pos:end="539:73"><name pos:start="539:31" pos:end="539:44"><name pos:start="539:31" pos:end="539:31">s</name><operator pos:start="539:32" pos:end="539:33">-&gt;</operator><name pos:start="539:34" pos:end="539:44">resync_mb_x</name></name> <operator pos:start="539:46" pos:end="539:46">+</operator> <name pos:start="539:48" pos:end="539:61"><name pos:start="539:48" pos:end="539:48">s</name><operator pos:start="539:49" pos:end="539:50">-&gt;</operator><name pos:start="539:51" pos:end="539:61">resync_mb_y</name></name><operator pos:start="539:62" pos:end="539:62">*</operator><name pos:start="539:63" pos:end="539:73"><name pos:start="539:63" pos:end="539:63">s</name><operator pos:start="539:64" pos:end="539:65">-&gt;</operator><name pos:start="539:66" pos:end="539:73">mb_width</name></name></expr>]</index></name><operator pos:start="539:75" pos:end="539:76">|=</operator> <name pos:start="539:78" pos:end="539:85">VP_START</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="545:5" pos:end="551:9"><if pos:start="545:5" pos:end="551:9">if <condition pos:start="545:8" pos:end="545:72">(<expr pos:start="545:9" pos:end="545:71"><name pos:start="545:9" pos:end="545:23"><name pos:start="545:9" pos:end="545:9">s</name><operator pos:start="545:10" pos:end="545:11">-&gt;</operator><name pos:start="545:12" pos:end="545:23">h263_msmpeg4</name></name> <operator pos:start="545:25" pos:end="545:26">&amp;&amp;</operator> <name pos:start="545:28" pos:end="545:45"><name pos:start="545:28" pos:end="545:28">s</name><operator pos:start="545:29" pos:end="545:30">-&gt;</operator><name pos:start="545:31" pos:end="545:45">msmpeg4_version</name></name><operator pos:start="545:46" pos:end="545:46">&lt;</operator><literal type="number" pos:start="545:47" pos:end="545:47">4</literal> <operator pos:start="545:49" pos:end="545:50">&amp;&amp;</operator> <name pos:start="545:52" pos:end="545:63"><name pos:start="545:52" pos:end="545:52">s</name><operator pos:start="545:53" pos:end="545:54">-&gt;</operator><name pos:start="545:55" pos:end="545:63">pict_type</name></name><operator pos:start="545:64" pos:end="545:65">==</operator><name pos:start="545:66" pos:end="545:71">I_TYPE</name></expr>)</condition><block type="pseudo" pos:start="547:9" pos:end="551:9"><block_content pos:start="547:9" pos:end="551:9">

        <if_stmt pos:start="547:9" pos:end="551:9"><if pos:start="547:9" pos:end="551:9">if<condition pos:start="547:11" pos:end="547:54">(<expr pos:start="547:12" pos:end="547:53"><call pos:start="547:12" pos:end="547:49"><name pos:start="547:12" pos:end="547:36">msmpeg4_decode_ext_header</name><argument_list pos:start="547:37" pos:end="547:49">(<argument pos:start="547:38" pos:end="547:38"><expr pos:start="547:38" pos:end="547:38"><name pos:start="547:38" pos:end="547:38">s</name></expr></argument>, <argument pos:start="547:41" pos:end="547:48"><expr pos:start="547:41" pos:end="547:48"><name pos:start="547:41" pos:end="547:48">buf_size</name></expr></argument>)</argument_list></call> <operator pos:start="547:51" pos:end="547:51">&lt;</operator> <literal type="number" pos:start="547:53" pos:end="547:53">0</literal></expr>)</condition><block pos:start="547:55" pos:end="551:9">{<block_content pos:start="549:13" pos:end="549:75">

            <expr_stmt pos:start="549:13" pos:end="549:75"><expr pos:start="549:13" pos:end="549:74"><name pos:start="549:13" pos:end="549:46"><name pos:start="549:13" pos:end="549:13">s</name><operator pos:start="549:14" pos:end="549:15">-&gt;</operator><name pos:start="549:16" pos:end="549:33">error_status_table</name><index pos:start="549:34" pos:end="549:46">[<expr pos:start="549:35" pos:end="549:45"><name pos:start="549:35" pos:end="549:43"><name pos:start="549:35" pos:end="549:35">s</name><operator pos:start="549:36" pos:end="549:37">-&gt;</operator><name pos:start="549:38" pos:end="549:43">mb_num</name></name><operator pos:start="549:44" pos:end="549:44">-</operator><literal type="number" pos:start="549:45" pos:end="549:45">1</literal></expr>]</index></name><operator pos:start="549:47" pos:end="549:47">=</operator> <name pos:start="549:49" pos:end="549:56">AC_ERROR</name><operator pos:start="549:57" pos:end="549:57">|</operator><name pos:start="549:58" pos:end="549:65">DC_ERROR</name><operator pos:start="549:66" pos:end="549:66">|</operator><name pos:start="549:67" pos:end="549:74">MV_ERROR</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

    

    <comment type="block" pos:start="555:5" pos:end="555:43">/* divx 5.01+ bistream reorder stuff */</comment>

    <if_stmt pos:start="557:5" pos:end="593:5"><if pos:start="557:5" pos:end="593:5">if<condition pos:start="557:7" pos:end="557:90">(<expr pos:start="557:8" pos:end="557:89"><name pos:start="557:8" pos:end="557:18"><name pos:start="557:8" pos:end="557:8">s</name><operator pos:start="557:9" pos:end="557:10">-&gt;</operator><name pos:start="557:11" pos:end="557:18">codec_id</name></name><operator pos:start="557:19" pos:end="557:20">==</operator><name pos:start="557:21" pos:end="557:34">CODEC_ID_MPEG4</name> <operator pos:start="557:36" pos:end="557:37">&amp;&amp;</operator> <name pos:start="557:39" pos:end="557:62"><name pos:start="557:39" pos:end="557:39">s</name><operator pos:start="557:40" pos:end="557:41">-&gt;</operator><name pos:start="557:42" pos:end="557:62">bitstream_buffer_size</name></name><operator pos:start="557:63" pos:end="557:64">==</operator><literal type="number" pos:start="557:65" pos:end="557:65">0</literal> <operator pos:start="557:67" pos:end="557:68">&amp;&amp;</operator> <name pos:start="557:70" pos:end="557:84"><name pos:start="557:70" pos:end="557:70">s</name><operator pos:start="557:71" pos:end="557:72">-&gt;</operator><name pos:start="557:73" pos:end="557:84">divx_version</name></name><operator pos:start="557:85" pos:end="557:86">&gt;=</operator><literal type="number" pos:start="557:87" pos:end="557:89">500</literal></expr>)</condition><block pos:start="557:91" pos:end="593:5">{<block_content pos:start="559:9" pos:end="591:9">

        <decl_stmt pos:start="559:9" pos:end="559:51"><decl pos:start="559:9" pos:end="559:50"><type pos:start="559:9" pos:end="559:11"><name pos:start="559:9" pos:end="559:11">int</name></type> <name pos:start="559:13" pos:end="559:23">current_pos</name><init pos:start="559:24" pos:end="559:50">= <expr pos:start="559:26" pos:end="559:50"><call pos:start="559:26" pos:end="559:47"><name pos:start="559:26" pos:end="559:39">get_bits_count</name><argument_list pos:start="559:40" pos:end="559:47">(<argument pos:start="559:41" pos:end="559:46"><expr pos:start="559:41" pos:end="559:46"><operator pos:start="559:41" pos:end="559:41">&amp;</operator><name pos:start="559:42" pos:end="559:46"><name pos:start="559:42" pos:end="559:42">s</name><operator pos:start="559:43" pos:end="559:44">-&gt;</operator><name pos:start="559:45" pos:end="559:46">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="559:48" pos:end="559:49">&gt;&gt;</operator><literal type="number" pos:start="559:50" pos:end="559:50">3</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="563:9" pos:end="591:9"><if pos:start="563:9" pos:end="591:9">if<condition pos:start="563:11" pos:end="565:61">(   <expr pos:start="563:15" pos:end="565:60"><name pos:start="563:15" pos:end="563:22">buf_size</name> <operator pos:start="563:24" pos:end="563:24">-</operator> <name pos:start="563:26" pos:end="563:36">current_pos</name> <operator pos:start="563:38" pos:end="563:38">&gt;</operator> <literal type="number" pos:start="563:40" pos:end="563:40">5</literal> 

           <operator pos:start="565:12" pos:end="565:13">&amp;&amp;</operator> <name pos:start="565:15" pos:end="565:22">buf_size</name> <operator pos:start="565:24" pos:end="565:24">-</operator> <name pos:start="565:26" pos:end="565:36">current_pos</name> <operator pos:start="565:38" pos:end="565:38">&lt;</operator> <name pos:start="565:40" pos:end="565:60">BITSTREAM_BUFFER_SIZE</name></expr>)</condition><block pos:start="565:62" pos:end="591:9">{<block_content pos:start="567:13" pos:end="589:13">

            <decl_stmt pos:start="567:13" pos:end="567:18"><decl pos:start="567:13" pos:end="567:17"><type pos:start="567:13" pos:end="567:15"><name pos:start="567:13" pos:end="567:15">int</name></type> <name pos:start="567:17" pos:end="567:17">i</name></decl>;</decl_stmt>

            <decl_stmt pos:start="569:13" pos:end="569:34"><decl pos:start="569:13" pos:end="569:33"><type pos:start="569:13" pos:end="569:15"><name pos:start="569:13" pos:end="569:15">int</name></type> <name pos:start="569:17" pos:end="569:31">startcode_found</name><init pos:start="569:32" pos:end="569:33">=<expr pos:start="569:33" pos:end="569:33"><literal type="number" pos:start="569:33" pos:end="569:33">0</literal></expr></init></decl>;</decl_stmt>

            <for pos:start="571:13" pos:end="581:13">for<control pos:start="571:16" pos:end="571:49">(<init pos:start="571:17" pos:end="571:30"><expr pos:start="571:17" pos:end="571:29"><name pos:start="571:17" pos:end="571:17">i</name><operator pos:start="571:18" pos:end="571:18">=</operator><name pos:start="571:19" pos:end="571:29">current_pos</name></expr>;</init> <condition pos:start="571:32" pos:end="571:44"><expr pos:start="571:32" pos:end="571:43"><name pos:start="571:32" pos:end="571:32">i</name><operator pos:start="571:33" pos:end="571:33">&lt;</operator><name pos:start="571:34" pos:end="571:41">buf_size</name><operator pos:start="571:42" pos:end="571:42">-</operator><literal type="number" pos:start="571:43" pos:end="571:43">3</literal></expr>;</condition> <incr pos:start="571:46" pos:end="571:48"><expr pos:start="571:46" pos:end="571:48"><name pos:start="571:46" pos:end="571:46">i</name><operator pos:start="571:47" pos:end="571:48">++</operator></expr></incr>)</control><block pos:start="571:50" pos:end="581:13">{<block_content pos:start="573:17" pos:end="579:17">

                <if_stmt pos:start="573:17" pos:end="579:17"><if pos:start="573:17" pos:end="579:17">if<condition pos:start="573:19" pos:end="573:77">(<expr pos:start="573:20" pos:end="573:76"><name pos:start="573:20" pos:end="573:25"><name pos:start="573:20" pos:end="573:22">buf</name><index pos:start="573:23" pos:end="573:25">[<expr pos:start="573:24" pos:end="573:24"><name pos:start="573:24" pos:end="573:24">i</name></expr>]</index></name><operator pos:start="573:26" pos:end="573:27">==</operator><literal type="number" pos:start="573:28" pos:end="573:28">0</literal> <operator pos:start="573:30" pos:end="573:31">&amp;&amp;</operator> <name pos:start="573:33" pos:end="573:40"><name pos:start="573:33" pos:end="573:35">buf</name><index pos:start="573:36" pos:end="573:40">[<expr pos:start="573:37" pos:end="573:39"><name pos:start="573:37" pos:end="573:37">i</name><operator pos:start="573:38" pos:end="573:38">+</operator><literal type="number" pos:start="573:39" pos:end="573:39">1</literal></expr>]</index></name><operator pos:start="573:41" pos:end="573:42">==</operator><literal type="number" pos:start="573:43" pos:end="573:43">0</literal> <operator pos:start="573:45" pos:end="573:46">&amp;&amp;</operator> <name pos:start="573:48" pos:end="573:55"><name pos:start="573:48" pos:end="573:50">buf</name><index pos:start="573:51" pos:end="573:55">[<expr pos:start="573:52" pos:end="573:54"><name pos:start="573:52" pos:end="573:52">i</name><operator pos:start="573:53" pos:end="573:53">+</operator><literal type="number" pos:start="573:54" pos:end="573:54">2</literal></expr>]</index></name><operator pos:start="573:56" pos:end="573:57">==</operator><literal type="number" pos:start="573:58" pos:end="573:58">1</literal> <operator pos:start="573:60" pos:end="573:61">&amp;&amp;</operator> <name pos:start="573:63" pos:end="573:70"><name pos:start="573:63" pos:end="573:65">buf</name><index pos:start="573:66" pos:end="573:70">[<expr pos:start="573:67" pos:end="573:69"><name pos:start="573:67" pos:end="573:67">i</name><operator pos:start="573:68" pos:end="573:68">+</operator><literal type="number" pos:start="573:69" pos:end="573:69">3</literal></expr>]</index></name><operator pos:start="573:71" pos:end="573:72">==</operator><literal type="number" pos:start="573:73" pos:end="573:76">0xB6</literal></expr>)</condition><block pos:start="573:78" pos:end="579:17">{<block_content pos:start="575:21" pos:end="577:26">

                    <expr_stmt pos:start="575:21" pos:end="575:38"><expr pos:start="575:21" pos:end="575:37"><name pos:start="575:21" pos:end="575:35">startcode_found</name><operator pos:start="575:36" pos:end="575:36">=</operator><literal type="number" pos:start="575:37" pos:end="575:37">1</literal></expr>;</expr_stmt>

                    <break pos:start="577:21" pos:end="577:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="583:13" pos:end="589:13"><if pos:start="583:13" pos:end="589:13">if<condition pos:start="583:15" pos:end="583:31">(<expr pos:start="583:16" pos:end="583:30"><name pos:start="583:16" pos:end="583:30">startcode_found</name></expr>)</condition><block pos:start="583:32" pos:end="589:13">{<block_content pos:start="585:17" pos:end="587:65">

                <expr_stmt pos:start="585:17" pos:end="585:87"><expr pos:start="585:17" pos:end="585:86"><call pos:start="585:17" pos:end="585:86"><name pos:start="585:17" pos:end="585:22">memcpy</name><argument_list pos:start="585:23" pos:end="585:86">(<argument pos:start="585:24" pos:end="585:42"><expr pos:start="585:24" pos:end="585:42"><name pos:start="585:24" pos:end="585:42"><name pos:start="585:24" pos:end="585:24">s</name><operator pos:start="585:25" pos:end="585:26">-&gt;</operator><name pos:start="585:27" pos:end="585:42">bitstream_buffer</name></name></expr></argument>, <argument pos:start="585:45" pos:end="585:61"><expr pos:start="585:45" pos:end="585:61"><name pos:start="585:45" pos:end="585:47">buf</name> <operator pos:start="585:49" pos:end="585:49">+</operator> <name pos:start="585:51" pos:end="585:61">current_pos</name></expr></argument>, <argument pos:start="585:64" pos:end="585:85"><expr pos:start="585:64" pos:end="585:85"><name pos:start="585:64" pos:end="585:71">buf_size</name> <operator pos:start="585:73" pos:end="585:73">-</operator> <name pos:start="585:75" pos:end="585:85">current_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="587:17" pos:end="587:65"><expr pos:start="587:17" pos:end="587:64"><name pos:start="587:17" pos:end="587:40"><name pos:start="587:17" pos:end="587:17">s</name><operator pos:start="587:18" pos:end="587:19">-&gt;</operator><name pos:start="587:20" pos:end="587:40">bitstream_buffer_size</name></name><operator pos:start="587:41" pos:end="587:41">=</operator> <name pos:start="587:43" pos:end="587:50">buf_size</name> <operator pos:start="587:52" pos:end="587:52">-</operator> <name pos:start="587:54" pos:end="587:64">current_pos</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="597:5" pos:end="653:5"><if pos:start="597:5" pos:end="653:5">if<condition pos:start="597:7" pos:end="597:27">(<expr pos:start="597:8" pos:end="597:26"><name pos:start="597:8" pos:end="597:26"><name pos:start="597:8" pos:end="597:8">s</name><operator pos:start="597:9" pos:end="597:10">-&gt;</operator><name pos:start="597:11" pos:end="597:26">error_resilience</name></name></expr>)</condition><block pos:start="597:28" pos:end="653:5">{<block_content pos:start="599:9" pos:end="651:9">

        <decl_stmt pos:start="599:9" pos:end="599:39"><decl pos:start="599:9" pos:end="599:19"><type pos:start="599:9" pos:end="599:11"><name pos:start="599:9" pos:end="599:11">int</name></type> <name pos:start="599:13" pos:end="599:17">error</name><init pos:start="599:18" pos:end="599:19">=<expr pos:start="599:19" pos:end="599:19"><literal type="number" pos:start="599:19" pos:end="599:19">0</literal></expr></init></decl>, <decl pos:start="599:22" pos:end="599:38"><type ref="prev" pos:start="599:9" pos:end="599:11"/><name pos:start="599:22" pos:end="599:36">num_end_markers</name><init pos:start="599:37" pos:end="599:38">=<expr pos:start="599:38" pos:end="599:38"><literal type="number" pos:start="599:38" pos:end="599:38">0</literal></expr></init></decl>;</decl_stmt>

        <for pos:start="601:9" pos:end="643:9">for<control pos:start="601:12" pos:end="601:34">(<init pos:start="601:13" pos:end="601:16"><expr pos:start="601:13" pos:end="601:15"><name pos:start="601:13" pos:end="601:13">i</name><operator pos:start="601:14" pos:end="601:14">=</operator><literal type="number" pos:start="601:15" pos:end="601:15">0</literal></expr>;</init> <condition pos:start="601:18" pos:end="601:29"><expr pos:start="601:18" pos:end="601:28"><name pos:start="601:18" pos:end="601:18">i</name><operator pos:start="601:19" pos:end="601:19">&lt;</operator><name pos:start="601:20" pos:end="601:28"><name pos:start="601:20" pos:end="601:20">s</name><operator pos:start="601:21" pos:end="601:22">-&gt;</operator><name pos:start="601:23" pos:end="601:28">mb_num</name></name></expr>;</condition> <incr pos:start="601:31" pos:end="601:33"><expr pos:start="601:31" pos:end="601:33"><name pos:start="601:31" pos:end="601:31">i</name><operator pos:start="601:32" pos:end="601:33">++</operator></expr></incr>)</control><block pos:start="601:35" pos:end="643:9">{<block_content pos:start="603:13" pos:end="641:34">

            <decl_stmt pos:start="603:13" pos:end="612:0"><decl pos:start="603:13" pos:end="603:48"><type pos:start="603:13" pos:end="603:15"><name pos:start="603:13" pos:end="603:15">int</name></type> <name pos:start="603:17" pos:end="603:22">status</name><init pos:start="603:23" pos:end="603:48">= <expr pos:start="603:25" pos:end="603:48"><name pos:start="603:25" pos:end="603:48"><name pos:start="603:25" pos:end="603:25">s</name><operator pos:start="603:26" pos:end="603:27">-&gt;</operator><name pos:start="603:28" pos:end="603:45">error_status_table</name><index pos:start="603:46" pos:end="603:48">[<expr pos:start="603:47" pos:end="603:47"><name pos:start="603:47" pos:end="603:47">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="605:1" pos:end="605:5">#<cpp:directive pos:start="605:2" pos:end="605:3">if</cpp:directive> <expr pos:start="605:5" pos:end="605:5"><literal type="number" pos:start="605:5" pos:end="605:5">0</literal></expr></cpp:if>

            if(i%s-&gt;mb_width == 0) printf("\n");

            printf("%2X ", status); 

<cpp:endif pos:start="611:1" pos:end="611:6">#<cpp:directive pos:start="611:2" pos:end="611:6">endif</cpp:directive></cpp:endif>

            <if_stmt pos:start="613:13" pos:end="613:35"><if pos:start="613:13" pos:end="613:35">if<condition pos:start="613:15" pos:end="613:25">(<expr pos:start="613:16" pos:end="613:24"><name pos:start="613:16" pos:end="613:21">status</name><operator pos:start="613:22" pos:end="613:23">==</operator><literal type="number" pos:start="613:24" pos:end="613:24">0</literal></expr>)</condition><block type="pseudo" pos:start="613:27" pos:end="613:35"><block_content pos:start="613:27" pos:end="613:35"> <continue pos:start="613:27" pos:end="613:35">continue;</continue></block_content></block></if></if_stmt>



            <if_stmt pos:start="617:13" pos:end="619:24"><if pos:start="617:13" pos:end="619:24">if<condition pos:start="617:15" pos:end="617:51">(<expr pos:start="617:16" pos:end="617:50"><name pos:start="617:16" pos:end="617:21">status</name><operator pos:start="617:22" pos:end="617:22">&amp;</operator><operator pos:start="617:23" pos:end="617:23">(</operator><name pos:start="617:24" pos:end="617:31">DC_ERROR</name><operator pos:start="617:32" pos:end="617:32">|</operator><name pos:start="617:33" pos:end="617:40">AC_ERROR</name><operator pos:start="617:41" pos:end="617:41">|</operator><name pos:start="617:42" pos:end="617:49">MV_ERROR</name><operator pos:start="617:50" pos:end="617:50">)</operator></expr>)</condition><block type="pseudo" pos:start="619:17" pos:end="619:24"><block_content pos:start="619:17" pos:end="619:24">

                <expr_stmt pos:start="619:17" pos:end="619:24"><expr pos:start="619:17" pos:end="619:23"><name pos:start="619:17" pos:end="619:21">error</name><operator pos:start="619:22" pos:end="619:22">=</operator><literal type="number" pos:start="619:23" pos:end="619:23">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="621:13" pos:end="629:13"><if pos:start="621:13" pos:end="629:13">if<condition pos:start="621:15" pos:end="621:31">(<expr pos:start="621:16" pos:end="621:30"><name pos:start="621:16" pos:end="621:21">status</name><operator pos:start="621:22" pos:end="621:22">&amp;</operator><name pos:start="621:23" pos:end="621:30">VP_START</name></expr>)</condition><block pos:start="621:32" pos:end="629:13">{<block_content pos:start="623:17" pos:end="627:34">

                <if_stmt pos:start="623:17" pos:end="625:28"><if pos:start="623:17" pos:end="625:28">if<condition pos:start="623:19" pos:end="623:35">(<expr pos:start="623:20" pos:end="623:34"><name pos:start="623:20" pos:end="623:34">num_end_markers</name></expr>)</condition><block type="pseudo" pos:start="625:21" pos:end="625:28"><block_content pos:start="625:21" pos:end="625:28"> 

                    <expr_stmt pos:start="625:21" pos:end="625:28"><expr pos:start="625:21" pos:end="625:27"><name pos:start="625:21" pos:end="625:25">error</name><operator pos:start="625:26" pos:end="625:26">=</operator><literal type="number" pos:start="625:27" pos:end="625:27">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="627:17" pos:end="627:34"><expr pos:start="627:17" pos:end="627:33"><name pos:start="627:17" pos:end="627:31">num_end_markers</name><operator pos:start="627:32" pos:end="627:32">=</operator><literal type="number" pos:start="627:33" pos:end="627:33">3</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="631:13" pos:end="633:34"><if pos:start="631:13" pos:end="633:34">if<condition pos:start="631:15" pos:end="631:29">(<expr pos:start="631:16" pos:end="631:28"><name pos:start="631:16" pos:end="631:21">status</name><operator pos:start="631:22" pos:end="631:22">&amp;</operator><name pos:start="631:23" pos:end="631:28">AC_END</name></expr>)</condition><block type="pseudo" pos:start="633:17" pos:end="633:34"><block_content pos:start="633:17" pos:end="633:34">

                <expr_stmt pos:start="633:17" pos:end="633:34"><expr pos:start="633:17" pos:end="633:33"><name pos:start="633:17" pos:end="633:31">num_end_markers</name><operator pos:start="633:32" pos:end="633:33">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="635:13" pos:end="637:34"><if pos:start="635:13" pos:end="637:34">if<condition pos:start="635:15" pos:end="635:29">(<expr pos:start="635:16" pos:end="635:28"><name pos:start="635:16" pos:end="635:21">status</name><operator pos:start="635:22" pos:end="635:22">&amp;</operator><name pos:start="635:23" pos:end="635:28">DC_END</name></expr>)</condition><block type="pseudo" pos:start="637:17" pos:end="637:34"><block_content pos:start="637:17" pos:end="637:34">

                <expr_stmt pos:start="637:17" pos:end="637:34"><expr pos:start="637:17" pos:end="637:33"><name pos:start="637:17" pos:end="637:31">num_end_markers</name><operator pos:start="637:32" pos:end="637:33">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="639:13" pos:end="641:34"><if pos:start="639:13" pos:end="641:34">if<condition pos:start="639:15" pos:end="639:29">(<expr pos:start="639:16" pos:end="639:28"><name pos:start="639:16" pos:end="639:21">status</name><operator pos:start="639:22" pos:end="639:22">&amp;</operator><name pos:start="639:23" pos:end="639:28">MV_END</name></expr>)</condition><block type="pseudo" pos:start="641:17" pos:end="641:34"><block_content pos:start="641:17" pos:end="641:34">

                <expr_stmt pos:start="641:17" pos:end="641:34"><expr pos:start="641:17" pos:end="641:33"><name pos:start="641:17" pos:end="641:31">num_end_markers</name><operator pos:start="641:32" pos:end="641:33">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="645:9" pos:end="651:9"><if pos:start="645:9" pos:end="651:9">if<condition pos:start="645:11" pos:end="645:36">(<expr pos:start="645:12" pos:end="645:35"><name pos:start="645:12" pos:end="645:26">num_end_markers</name> <operator pos:start="645:28" pos:end="645:29">||</operator> <name pos:start="645:31" pos:end="645:35">error</name></expr>)</condition><block pos:start="645:37" pos:end="651:9">{<block_content pos:start="647:13" pos:end="649:35">

            <expr_stmt pos:start="647:13" pos:end="647:51"><expr pos:start="647:13" pos:end="647:50"><call pos:start="647:13" pos:end="647:50"><name pos:start="647:13" pos:end="647:19">fprintf</name><argument_list pos:start="647:20" pos:end="647:50">(<argument pos:start="647:21" pos:end="647:26"><expr pos:start="647:21" pos:end="647:26"><name pos:start="647:21" pos:end="647:26">stderr</name></expr></argument>, <argument pos:start="647:29" pos:end="647:49"><expr pos:start="647:29" pos:end="647:49"><literal type="string" pos:start="647:29" pos:end="647:49">"concealing errors\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="649:13" pos:end="649:35"><expr pos:start="649:13" pos:end="649:34"><call pos:start="649:13" pos:end="649:34"><name pos:start="649:13" pos:end="649:31">ff_error_resilience</name><argument_list pos:start="649:32" pos:end="649:34">(<argument pos:start="649:33" pos:end="649:33"><expr pos:start="649:33" pos:end="649:33"><name pos:start="649:33" pos:end="649:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="657:5" pos:end="657:21"><expr pos:start="657:5" pos:end="657:20"><call pos:start="657:5" pos:end="657:20"><name pos:start="657:5" pos:end="657:17">MPV_frame_end</name><argument_list pos:start="657:18" pos:end="657:20">(<argument pos:start="657:19" pos:end="657:19"><expr pos:start="657:19" pos:end="657:19"><name pos:start="657:19" pos:end="657:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="661:5" pos:end="723:5"><if pos:start="661:5" pos:end="723:5">if<condition pos:start="661:7" pos:end="661:65">(<expr pos:start="661:8" pos:end="661:64"><operator pos:start="661:8" pos:end="661:8">(</operator><name pos:start="661:9" pos:end="661:20"><name pos:start="661:9" pos:end="661:13">avctx</name><operator pos:start="661:14" pos:end="661:15">-&gt;</operator><name pos:start="661:16" pos:end="661:20">debug</name></name><operator pos:start="661:21" pos:end="661:21">&amp;</operator><name pos:start="661:22" pos:end="661:36">FF_DEBUG_VIS_MV</name><operator pos:start="661:37" pos:end="661:37">)</operator> <operator pos:start="661:39" pos:end="661:40">&amp;&amp;</operator> <name pos:start="661:42" pos:end="661:64"><name pos:start="661:42" pos:end="661:42">s</name><operator pos:start="661:43" pos:end="661:44">-&gt;</operator><name pos:start="661:45" pos:end="661:56">last_picture</name><operator pos:start="661:57" pos:end="661:57">.</operator><name pos:start="661:58" pos:end="661:61">data</name><index pos:start="661:62" pos:end="661:64">[<expr pos:start="661:63" pos:end="661:63"><literal type="number" pos:start="661:63" pos:end="661:63">0</literal></expr>]</index></name></expr>)</condition><block pos:start="661:66" pos:end="723:5">{<block_content pos:start="663:9" pos:end="721:9">

        <decl_stmt pos:start="663:9" pos:end="663:47"><decl pos:start="663:9" pos:end="663:46"><type pos:start="663:9" pos:end="663:17"><specifier pos:start="663:9" pos:end="663:13">const</specifier> <name pos:start="663:15" pos:end="663:17">int</name></type> <name pos:start="663:19" pos:end="663:23">shift</name><init pos:start="663:24" pos:end="663:46">= <expr pos:start="663:26" pos:end="663:46"><literal type="number" pos:start="663:26" pos:end="663:28">1</literal> <operator pos:start="663:28" pos:end="663:28">+</operator> <name pos:start="663:30" pos:end="663:46"><name pos:start="663:30" pos:end="663:30">s</name><operator pos:start="663:31" pos:end="663:32">-&gt;</operator><name pos:start="663:33" pos:end="663:46">quarter_sample</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="665:9" pos:end="665:17"><decl pos:start="665:9" pos:end="665:16"><type pos:start="665:9" pos:end="665:11"><name pos:start="665:9" pos:end="665:11">int</name></type> <name pos:start="665:13" pos:end="665:16">mb_y</name></decl>;</decl_stmt>

        <decl_stmt pos:start="667:9" pos:end="667:46"><decl pos:start="667:9" pos:end="667:45"><type pos:start="667:9" pos:end="667:17"><name pos:start="667:9" pos:end="667:15">uint8_t</name> <modifier pos:start="667:17" pos:end="667:17">*</modifier></type><name pos:start="667:18" pos:end="667:20">ptr</name><init pos:start="667:21" pos:end="667:45">= <expr pos:start="667:23" pos:end="667:45"><name pos:start="667:23" pos:end="667:45"><name pos:start="667:23" pos:end="667:23">s</name><operator pos:start="667:24" pos:end="667:25">-&gt;</operator><name pos:start="667:26" pos:end="667:37">last_picture</name><operator pos:start="667:38" pos:end="667:38">.</operator><name pos:start="667:39" pos:end="667:42">data</name><index pos:start="667:43" pos:end="667:45">[<expr pos:start="667:44" pos:end="667:44"><literal type="number" pos:start="667:44" pos:end="667:44">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="669:9" pos:end="669:23"><expr pos:start="669:9" pos:end="669:22"><name pos:start="669:9" pos:end="669:20"><name pos:start="669:9" pos:end="669:9">s</name><operator pos:start="669:10" pos:end="669:11">-&gt;</operator><name pos:start="669:12" pos:end="669:20">low_delay</name></name><operator pos:start="669:21" pos:end="669:21">=</operator><literal type="number" pos:start="669:22" pos:end="669:22">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="669:25" pos:end="669:80">//needed to see the vectors without trashing the buffers</comment>



        <for pos:start="673:9" pos:end="721:9">for<control pos:start="673:12" pos:end="673:46">(<init pos:start="673:13" pos:end="673:19"><expr pos:start="673:13" pos:end="673:18"><name pos:start="673:13" pos:end="673:16">mb_y</name><operator pos:start="673:17" pos:end="673:17">=</operator><literal type="number" pos:start="673:18" pos:end="673:18">0</literal></expr>;</init> <condition pos:start="673:21" pos:end="673:38"><expr pos:start="673:21" pos:end="673:37"><name pos:start="673:21" pos:end="673:24">mb_y</name><operator pos:start="673:25" pos:end="673:25">&lt;</operator><name pos:start="673:26" pos:end="673:37"><name pos:start="673:26" pos:end="673:26">s</name><operator pos:start="673:27" pos:end="673:28">-&gt;</operator><name pos:start="673:29" pos:end="673:37">mb_height</name></name></expr>;</condition> <incr pos:start="673:40" pos:end="673:45"><expr pos:start="673:40" pos:end="673:45"><name pos:start="673:40" pos:end="673:43">mb_y</name><operator pos:start="673:44" pos:end="673:45">++</operator></expr></incr>)</control><block pos:start="673:47" pos:end="721:9">{<block_content pos:start="675:13" pos:end="719:13">

            <decl_stmt pos:start="675:13" pos:end="675:21"><decl pos:start="675:13" pos:end="675:20"><type pos:start="675:13" pos:end="675:15"><name pos:start="675:13" pos:end="675:15">int</name></type> <name pos:start="675:17" pos:end="675:20">mb_x</name></decl>;</decl_stmt>

            <for pos:start="677:13" pos:end="719:13">for<control pos:start="677:16" pos:end="677:49">(<init pos:start="677:17" pos:end="677:23"><expr pos:start="677:17" pos:end="677:22"><name pos:start="677:17" pos:end="677:20">mb_x</name><operator pos:start="677:21" pos:end="677:21">=</operator><literal type="number" pos:start="677:22" pos:end="677:22">0</literal></expr>;</init> <condition pos:start="677:25" pos:end="677:41"><expr pos:start="677:25" pos:end="677:40"><name pos:start="677:25" pos:end="677:28">mb_x</name><operator pos:start="677:29" pos:end="677:29">&lt;</operator><name pos:start="677:30" pos:end="677:40"><name pos:start="677:30" pos:end="677:30">s</name><operator pos:start="677:31" pos:end="677:32">-&gt;</operator><name pos:start="677:33" pos:end="677:40">mb_width</name></name></expr>;</condition> <incr pos:start="677:43" pos:end="677:48"><expr pos:start="677:43" pos:end="677:48"><name pos:start="677:43" pos:end="677:46">mb_x</name><operator pos:start="677:47" pos:end="677:48">++</operator></expr></incr>)</control><block pos:start="677:50" pos:end="719:13">{<block_content pos:start="679:17" pos:end="717:44">

                <decl_stmt pos:start="679:17" pos:end="679:60"><decl pos:start="679:17" pos:end="679:59"><type pos:start="679:17" pos:end="679:25"><specifier pos:start="679:17" pos:end="679:21">const</specifier> <name pos:start="679:23" pos:end="679:25">int</name></type> <name pos:start="679:27" pos:end="679:34">mb_index</name><init pos:start="679:35" pos:end="679:59">= <expr pos:start="679:37" pos:end="679:59"><name pos:start="679:37" pos:end="679:40">mb_x</name> <operator pos:start="679:42" pos:end="679:42">+</operator> <name pos:start="679:44" pos:end="679:47">mb_y</name><operator pos:start="679:48" pos:end="679:48">*</operator><name pos:start="679:49" pos:end="679:59"><name pos:start="679:49" pos:end="679:49">s</name><operator pos:start="679:50" pos:end="679:51">-&gt;</operator><name pos:start="679:52" pos:end="679:59">mb_width</name></name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="681:17" pos:end="715:17"><if pos:start="681:17" pos:end="701:17">if<condition pos:start="681:19" pos:end="681:69">(<expr pos:start="681:20" pos:end="681:68"><name pos:start="681:20" pos:end="681:53"><name pos:start="681:20" pos:end="681:20">s</name><operator pos:start="681:21" pos:end="681:22">-&gt;</operator><name pos:start="681:23" pos:end="681:43">co_located_type_table</name><index pos:start="681:44" pos:end="681:53">[<expr pos:start="681:45" pos:end="681:52"><name pos:start="681:45" pos:end="681:52">mb_index</name></expr>]</index></name> <operator pos:start="681:55" pos:end="681:56">==</operator> <name pos:start="681:58" pos:end="681:68">MV_TYPE_8X8</name></expr>)</condition><block pos:start="681:70" pos:end="701:17">{<block_content pos:start="683:21" pos:end="699:21">

                    <decl_stmt pos:start="683:21" pos:end="683:26"><decl pos:start="683:21" pos:end="683:25"><type pos:start="683:21" pos:end="683:23"><name pos:start="683:21" pos:end="683:23">int</name></type> <name pos:start="683:25" pos:end="683:25">i</name></decl>;</decl_stmt>

                    <for pos:start="685:21" pos:end="699:21">for<control pos:start="685:24" pos:end="685:38">(<init pos:start="685:25" pos:end="685:28"><expr pos:start="685:25" pos:end="685:27"><name pos:start="685:25" pos:end="685:25">i</name><operator pos:start="685:26" pos:end="685:26">=</operator><literal type="number" pos:start="685:27" pos:end="685:27">0</literal></expr>;</init> <condition pos:start="685:30" pos:end="685:33"><expr pos:start="685:30" pos:end="685:32"><name pos:start="685:30" pos:end="685:30">i</name><operator pos:start="685:31" pos:end="685:31">&lt;</operator><literal type="number" pos:start="685:32" pos:end="685:32">4</literal></expr>;</condition> <incr pos:start="685:35" pos:end="685:37"><expr pos:start="685:35" pos:end="685:37"><name pos:start="685:35" pos:end="685:35">i</name><operator pos:start="685:36" pos:end="685:37">++</operator></expr></incr>)</control><block pos:start="685:39" pos:end="699:21">{<block_content pos:start="687:25" pos:end="697:94">

                        <decl_stmt pos:start="687:25" pos:end="687:54"><decl pos:start="687:25" pos:end="687:53"><type pos:start="687:25" pos:end="687:27"><name pos:start="687:25" pos:end="687:27">int</name></type> <name pos:start="687:29" pos:end="687:30">sx</name><init pos:start="687:31" pos:end="687:53">= <expr pos:start="687:33" pos:end="687:53"><name pos:start="687:33" pos:end="687:36">mb_x</name><operator pos:start="687:37" pos:end="687:37">*</operator><literal type="number" pos:start="687:38" pos:end="687:41">16</literal> <operator pos:start="687:41" pos:end="687:41">+</operator> <literal type="number" pos:start="687:43" pos:end="687:45">4</literal> <operator pos:start="687:45" pos:end="687:45">+</operator> <literal type="number" pos:start="687:47" pos:end="687:47">8</literal><operator pos:start="687:48" pos:end="687:48">*</operator><operator pos:start="687:49" pos:end="687:49">(</operator><name pos:start="687:50" pos:end="687:50">i</name><operator pos:start="687:51" pos:end="687:51">&amp;</operator><literal type="number" pos:start="687:52" pos:end="687:52">1</literal><operator pos:start="687:53" pos:end="687:53">)</operator></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="689:25" pos:end="689:55"><decl pos:start="689:25" pos:end="689:54"><type pos:start="689:25" pos:end="689:27"><name pos:start="689:25" pos:end="689:27">int</name></type> <name pos:start="689:29" pos:end="689:30">sy</name><init pos:start="689:31" pos:end="689:54">= <expr pos:start="689:33" pos:end="689:54"><name pos:start="689:33" pos:end="689:36">mb_y</name><operator pos:start="689:37" pos:end="689:37">*</operator><literal type="number" pos:start="689:38" pos:end="689:41">16</literal> <operator pos:start="689:41" pos:end="689:41">+</operator> <literal type="number" pos:start="689:43" pos:end="689:45">4</literal> <operator pos:start="689:45" pos:end="689:45">+</operator> <literal type="number" pos:start="689:47" pos:end="689:47">8</literal><operator pos:start="689:48" pos:end="689:48">*</operator><operator pos:start="689:49" pos:end="689:49">(</operator><name pos:start="689:50" pos:end="689:50">i</name><operator pos:start="689:51" pos:end="689:52">&gt;&gt;</operator><literal type="number" pos:start="689:53" pos:end="689:53">1</literal><operator pos:start="689:54" pos:end="689:54">)</operator></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="691:25" pos:end="691:95"><decl pos:start="691:25" pos:end="691:94"><type pos:start="691:25" pos:end="691:27"><name pos:start="691:25" pos:end="691:27">int</name></type> <name pos:start="691:29" pos:end="691:30">xy</name><init pos:start="691:31" pos:end="691:94">= <expr pos:start="691:33" pos:end="691:94"><literal type="number" pos:start="691:33" pos:end="691:35">1</literal> <operator pos:start="691:35" pos:end="691:35">+</operator> <name pos:start="691:37" pos:end="691:40">mb_x</name><operator pos:start="691:41" pos:end="691:41">*</operator><literal type="number" pos:start="691:42" pos:end="691:44">2</literal> <operator pos:start="691:44" pos:end="691:44">+</operator> <operator pos:start="691:46" pos:end="691:46">(</operator><name pos:start="691:47" pos:end="691:47">i</name><operator pos:start="691:48" pos:end="691:48">&amp;</operator><literal type="number" pos:start="691:49" pos:end="691:49">1</literal><operator pos:start="691:50" pos:end="691:50">)</operator> <operator pos:start="691:52" pos:end="691:52">+</operator> <operator pos:start="691:54" pos:end="691:54">(</operator><name pos:start="691:55" pos:end="691:58">mb_y</name><operator pos:start="691:59" pos:end="691:59">*</operator><literal type="number" pos:start="691:60" pos:end="691:62">2</literal> <operator pos:start="691:62" pos:end="691:62">+</operator> <literal type="number" pos:start="691:64" pos:end="691:66">1</literal> <operator pos:start="691:66" pos:end="691:66">+</operator> <operator pos:start="691:68" pos:end="691:68">(</operator><name pos:start="691:69" pos:end="691:69">i</name><operator pos:start="691:70" pos:end="691:71">&gt;&gt;</operator><literal type="number" pos:start="691:72" pos:end="691:72">1</literal><operator pos:start="691:73" pos:end="691:73">)</operator><operator pos:start="691:74" pos:end="691:74">)</operator><operator pos:start="691:75" pos:end="691:75">*</operator><operator pos:start="691:76" pos:end="691:76">(</operator><name pos:start="691:77" pos:end="691:87"><name pos:start="691:77" pos:end="691:77">s</name><operator pos:start="691:78" pos:end="691:79">-&gt;</operator><name pos:start="691:80" pos:end="691:87">mb_width</name></name><operator pos:start="691:88" pos:end="691:88">*</operator><literal type="number" pos:start="691:89" pos:end="691:91">2</literal> <operator pos:start="691:91" pos:end="691:91">+</operator> <literal type="number" pos:start="691:93" pos:end="691:93">2</literal><operator pos:start="691:94" pos:end="691:94">)</operator></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="693:25" pos:end="693:67"><decl pos:start="693:25" pos:end="693:66"><type pos:start="693:25" pos:end="693:27"><name pos:start="693:25" pos:end="693:27">int</name></type> <name pos:start="693:29" pos:end="693:30">mx</name><init pos:start="693:31" pos:end="693:66">= <expr pos:start="693:33" pos:end="693:66"><operator pos:start="693:33" pos:end="693:33">(</operator><name pos:start="693:34" pos:end="693:53"><name pos:start="693:34" pos:end="693:34">s</name><operator pos:start="693:35" pos:end="693:36">-&gt;</operator><name pos:start="693:37" pos:end="693:46">motion_val</name><index pos:start="693:47" pos:end="693:50">[<expr pos:start="693:48" pos:end="693:49"><name pos:start="693:48" pos:end="693:49">xy</name></expr>]</index><index pos:start="693:51" pos:end="693:53">[<expr pos:start="693:52" pos:end="693:52"><literal type="number" pos:start="693:52" pos:end="693:52">0</literal></expr>]</index></name><operator pos:start="693:54" pos:end="693:55">&gt;&gt;</operator><name pos:start="693:56" pos:end="693:60">shift</name><operator pos:start="693:61" pos:end="693:61">)</operator> <operator pos:start="693:63" pos:end="693:63">+</operator> <name pos:start="693:65" pos:end="693:66">sx</name></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="695:25" pos:end="695:67"><decl pos:start="695:25" pos:end="695:66"><type pos:start="695:25" pos:end="695:27"><name pos:start="695:25" pos:end="695:27">int</name></type> <name pos:start="695:29" pos:end="695:30">my</name><init pos:start="695:31" pos:end="695:66">= <expr pos:start="695:33" pos:end="695:66"><operator pos:start="695:33" pos:end="695:33">(</operator><name pos:start="695:34" pos:end="695:53"><name pos:start="695:34" pos:end="695:34">s</name><operator pos:start="695:35" pos:end="695:36">-&gt;</operator><name pos:start="695:37" pos:end="695:46">motion_val</name><index pos:start="695:47" pos:end="695:50">[<expr pos:start="695:48" pos:end="695:49"><name pos:start="695:48" pos:end="695:49">xy</name></expr>]</index><index pos:start="695:51" pos:end="695:53">[<expr pos:start="695:52" pos:end="695:52"><literal type="number" pos:start="695:52" pos:end="695:52">1</literal></expr>]</index></name><operator pos:start="695:54" pos:end="695:55">&gt;&gt;</operator><name pos:start="695:56" pos:end="695:60">shift</name><operator pos:start="695:61" pos:end="695:61">)</operator> <operator pos:start="695:63" pos:end="695:63">+</operator> <name pos:start="695:65" pos:end="695:66">sy</name></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="697:25" pos:end="697:94"><expr pos:start="697:25" pos:end="697:93"><call pos:start="697:25" pos:end="697:93"><name pos:start="697:25" pos:end="697:33">draw_line</name><argument_list pos:start="697:34" pos:end="697:93">(<argument pos:start="697:35" pos:end="697:37"><expr pos:start="697:35" pos:end="697:37"><name pos:start="697:35" pos:end="697:37">ptr</name></expr></argument>, <argument pos:start="697:40" pos:end="697:41"><expr pos:start="697:40" pos:end="697:41"><name pos:start="697:40" pos:end="697:41">sx</name></expr></argument>, <argument pos:start="697:44" pos:end="697:45"><expr pos:start="697:44" pos:end="697:45"><name pos:start="697:44" pos:end="697:45">sy</name></expr></argument>, <argument pos:start="697:48" pos:end="697:49"><expr pos:start="697:48" pos:end="697:49"><name pos:start="697:48" pos:end="697:49">mx</name></expr></argument>, <argument pos:start="697:52" pos:end="697:53"><expr pos:start="697:52" pos:end="697:53"><name pos:start="697:52" pos:end="697:53">my</name></expr></argument>, <argument pos:start="697:56" pos:end="697:63"><expr pos:start="697:56" pos:end="697:63"><name pos:start="697:56" pos:end="697:63"><name pos:start="697:56" pos:end="697:56">s</name><operator pos:start="697:57" pos:end="697:58">-&gt;</operator><name pos:start="697:59" pos:end="697:63">width</name></name></expr></argument>, <argument pos:start="697:66" pos:end="697:74"><expr pos:start="697:66" pos:end="697:74"><name pos:start="697:66" pos:end="697:74"><name pos:start="697:66" pos:end="697:66">s</name><operator pos:start="697:67" pos:end="697:68">-&gt;</operator><name pos:start="697:69" pos:end="697:74">height</name></name></expr></argument>, <argument pos:start="697:77" pos:end="697:87"><expr pos:start="697:77" pos:end="697:87"><name pos:start="697:77" pos:end="697:87"><name pos:start="697:77" pos:end="697:77">s</name><operator pos:start="697:78" pos:end="697:79">-&gt;</operator><name pos:start="697:80" pos:end="697:87">linesize</name></name></expr></argument>, <argument pos:start="697:90" pos:end="697:92"><expr pos:start="697:90" pos:end="697:92"><literal type="number" pos:start="697:90" pos:end="697:92">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if><else pos:start="701:18" pos:end="715:17">else<block pos:start="701:22" pos:end="715:17">{<block_content pos:start="703:21" pos:end="713:90">

                    <decl_stmt pos:start="703:21" pos:end="703:40"><decl pos:start="703:21" pos:end="703:39"><type pos:start="703:21" pos:end="703:23"><name pos:start="703:21" pos:end="703:23">int</name></type> <name pos:start="703:25" pos:end="703:26">sx</name><init pos:start="703:27" pos:end="703:39">= <expr pos:start="703:29" pos:end="703:39"><name pos:start="703:29" pos:end="703:32">mb_x</name><operator pos:start="703:33" pos:end="703:33">*</operator><literal type="number" pos:start="703:34" pos:end="703:37">16</literal> <operator pos:start="703:37" pos:end="703:37">+</operator> <literal type="number" pos:start="703:39" pos:end="703:39">8</literal></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="705:21" pos:end="705:40"><decl pos:start="705:21" pos:end="705:39"><type pos:start="705:21" pos:end="705:23"><name pos:start="705:21" pos:end="705:23">int</name></type> <name pos:start="705:25" pos:end="705:26">sy</name><init pos:start="705:27" pos:end="705:39">= <expr pos:start="705:29" pos:end="705:39"><name pos:start="705:29" pos:end="705:32">mb_y</name><operator pos:start="705:33" pos:end="705:33">*</operator><literal type="number" pos:start="705:34" pos:end="705:37">16</literal> <operator pos:start="705:37" pos:end="705:37">+</operator> <literal type="number" pos:start="705:39" pos:end="705:39">8</literal></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="707:21" pos:end="707:74"><decl pos:start="707:21" pos:end="707:73"><type pos:start="707:21" pos:end="707:23"><name pos:start="707:21" pos:end="707:23">int</name></type> <name pos:start="707:25" pos:end="707:26">xy</name><init pos:start="707:27" pos:end="707:73">= <expr pos:start="707:29" pos:end="707:73"><literal type="number" pos:start="707:29" pos:end="707:31">1</literal> <operator pos:start="707:31" pos:end="707:31">+</operator> <name pos:start="707:33" pos:end="707:36">mb_x</name><operator pos:start="707:37" pos:end="707:37">*</operator><literal type="number" pos:start="707:38" pos:end="707:40">2</literal> <operator pos:start="707:40" pos:end="707:40">+</operator> <operator pos:start="707:42" pos:end="707:42">(</operator><name pos:start="707:43" pos:end="707:46">mb_y</name><operator pos:start="707:47" pos:end="707:47">*</operator><literal type="number" pos:start="707:48" pos:end="707:50">2</literal> <operator pos:start="707:50" pos:end="707:50">+</operator> <literal type="number" pos:start="707:52" pos:end="707:52">1</literal><operator pos:start="707:53" pos:end="707:53">)</operator><operator pos:start="707:54" pos:end="707:54">*</operator><operator pos:start="707:55" pos:end="707:55">(</operator><name pos:start="707:56" pos:end="707:66"><name pos:start="707:56" pos:end="707:56">s</name><operator pos:start="707:57" pos:end="707:58">-&gt;</operator><name pos:start="707:59" pos:end="707:66">mb_width</name></name><operator pos:start="707:67" pos:end="707:67">*</operator><literal type="number" pos:start="707:68" pos:end="707:70">2</literal> <operator pos:start="707:70" pos:end="707:70">+</operator> <literal type="number" pos:start="707:72" pos:end="707:72">2</literal><operator pos:start="707:73" pos:end="707:73">)</operator></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="709:21" pos:end="709:63"><decl pos:start="709:21" pos:end="709:62"><type pos:start="709:21" pos:end="709:23"><name pos:start="709:21" pos:end="709:23">int</name></type> <name pos:start="709:25" pos:end="709:26">mx</name><init pos:start="709:27" pos:end="709:62">= <expr pos:start="709:29" pos:end="709:62"><operator pos:start="709:29" pos:end="709:29">(</operator><name pos:start="709:30" pos:end="709:49"><name pos:start="709:30" pos:end="709:30">s</name><operator pos:start="709:31" pos:end="709:32">-&gt;</operator><name pos:start="709:33" pos:end="709:42">motion_val</name><index pos:start="709:43" pos:end="709:46">[<expr pos:start="709:44" pos:end="709:45"><name pos:start="709:44" pos:end="709:45">xy</name></expr>]</index><index pos:start="709:47" pos:end="709:49">[<expr pos:start="709:48" pos:end="709:48"><literal type="number" pos:start="709:48" pos:end="709:48">0</literal></expr>]</index></name><operator pos:start="709:50" pos:end="709:51">&gt;&gt;</operator><name pos:start="709:52" pos:end="709:56">shift</name><operator pos:start="709:57" pos:end="709:57">)</operator> <operator pos:start="709:59" pos:end="709:59">+</operator> <name pos:start="709:61" pos:end="709:62">sx</name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="711:21" pos:end="711:63"><decl pos:start="711:21" pos:end="711:62"><type pos:start="711:21" pos:end="711:23"><name pos:start="711:21" pos:end="711:23">int</name></type> <name pos:start="711:25" pos:end="711:26">my</name><init pos:start="711:27" pos:end="711:62">= <expr pos:start="711:29" pos:end="711:62"><operator pos:start="711:29" pos:end="711:29">(</operator><name pos:start="711:30" pos:end="711:49"><name pos:start="711:30" pos:end="711:30">s</name><operator pos:start="711:31" pos:end="711:32">-&gt;</operator><name pos:start="711:33" pos:end="711:42">motion_val</name><index pos:start="711:43" pos:end="711:46">[<expr pos:start="711:44" pos:end="711:45"><name pos:start="711:44" pos:end="711:45">xy</name></expr>]</index><index pos:start="711:47" pos:end="711:49">[<expr pos:start="711:48" pos:end="711:48"><literal type="number" pos:start="711:48" pos:end="711:48">1</literal></expr>]</index></name><operator pos:start="711:50" pos:end="711:51">&gt;&gt;</operator><name pos:start="711:52" pos:end="711:56">shift</name><operator pos:start="711:57" pos:end="711:57">)</operator> <operator pos:start="711:59" pos:end="711:59">+</operator> <name pos:start="711:61" pos:end="711:62">sy</name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="713:21" pos:end="713:90"><expr pos:start="713:21" pos:end="713:89"><call pos:start="713:21" pos:end="713:89"><name pos:start="713:21" pos:end="713:29">draw_line</name><argument_list pos:start="713:30" pos:end="713:89">(<argument pos:start="713:31" pos:end="713:33"><expr pos:start="713:31" pos:end="713:33"><name pos:start="713:31" pos:end="713:33">ptr</name></expr></argument>, <argument pos:start="713:36" pos:end="713:37"><expr pos:start="713:36" pos:end="713:37"><name pos:start="713:36" pos:end="713:37">sx</name></expr></argument>, <argument pos:start="713:40" pos:end="713:41"><expr pos:start="713:40" pos:end="713:41"><name pos:start="713:40" pos:end="713:41">sy</name></expr></argument>, <argument pos:start="713:44" pos:end="713:45"><expr pos:start="713:44" pos:end="713:45"><name pos:start="713:44" pos:end="713:45">mx</name></expr></argument>, <argument pos:start="713:48" pos:end="713:49"><expr pos:start="713:48" pos:end="713:49"><name pos:start="713:48" pos:end="713:49">my</name></expr></argument>, <argument pos:start="713:52" pos:end="713:59"><expr pos:start="713:52" pos:end="713:59"><name pos:start="713:52" pos:end="713:59"><name pos:start="713:52" pos:end="713:52">s</name><operator pos:start="713:53" pos:end="713:54">-&gt;</operator><name pos:start="713:55" pos:end="713:59">width</name></name></expr></argument>, <argument pos:start="713:62" pos:end="713:70"><expr pos:start="713:62" pos:end="713:70"><name pos:start="713:62" pos:end="713:70"><name pos:start="713:62" pos:end="713:62">s</name><operator pos:start="713:63" pos:end="713:64">-&gt;</operator><name pos:start="713:65" pos:end="713:70">height</name></name></expr></argument>, <argument pos:start="713:73" pos:end="713:83"><expr pos:start="713:73" pos:end="713:83"><name pos:start="713:73" pos:end="713:83"><name pos:start="713:73" pos:end="713:73">s</name><operator pos:start="713:74" pos:end="713:75">-&gt;</operator><name pos:start="713:76" pos:end="713:83">linesize</name></name></expr></argument>, <argument pos:start="713:86" pos:end="713:88"><expr pos:start="713:86" pos:end="713:88"><literal type="number" pos:start="713:86" pos:end="713:88">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="717:17" pos:end="717:44"><expr pos:start="717:17" pos:end="717:43"><name pos:start="717:17" pos:end="717:41"><name pos:start="717:17" pos:end="717:17">s</name><operator pos:start="717:18" pos:end="717:19">-&gt;</operator><name pos:start="717:20" pos:end="717:31">mbskip_table</name><index pos:start="717:32" pos:end="717:41">[<expr pos:start="717:33" pos:end="717:40"><name pos:start="717:33" pos:end="717:40">mb_index</name></expr>]</index></name><operator pos:start="717:42" pos:end="717:42">=</operator><literal type="number" pos:start="717:43" pos:end="717:43">0</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>





    <if_stmt pos:start="729:5" pos:end="737:5"><if pos:start="729:5" pos:end="733:5">if<condition pos:start="729:7" pos:end="729:44">(<expr pos:start="729:8" pos:end="729:43"><name pos:start="729:8" pos:end="729:19"><name pos:start="729:8" pos:end="729:8">s</name><operator pos:start="729:9" pos:end="729:10">-&gt;</operator><name pos:start="729:11" pos:end="729:19">pict_type</name></name><operator pos:start="729:20" pos:end="729:21">==</operator><name pos:start="729:22" pos:end="729:27">B_TYPE</name> <operator pos:start="729:29" pos:end="729:30">||</operator> <name pos:start="729:32" pos:end="729:43"><name pos:start="729:32" pos:end="729:32">s</name><operator pos:start="729:33" pos:end="729:34">-&gt;</operator><name pos:start="729:35" pos:end="729:43">low_delay</name></name></expr>)</condition><block pos:start="729:45" pos:end="733:5">{<block_content pos:start="731:9" pos:end="731:46">

        <expr_stmt pos:start="731:9" pos:end="731:46"><expr pos:start="731:9" pos:end="731:45"><operator pos:start="731:9" pos:end="731:9">*</operator><name pos:start="731:10" pos:end="731:13">pict</name><operator pos:start="731:14" pos:end="731:14">=</operator> <operator pos:start="731:16" pos:end="731:16">*</operator><operator pos:start="731:17" pos:end="731:17">(</operator><name pos:start="731:18" pos:end="731:24">AVFrame</name><operator pos:start="731:25" pos:end="731:25">*</operator><operator pos:start="731:26" pos:end="731:26">)</operator><operator pos:start="731:27" pos:end="731:27">&amp;</operator><name pos:start="731:28" pos:end="731:45"><name pos:start="731:28" pos:end="731:28">s</name><operator pos:start="731:29" pos:end="731:30">-&gt;</operator><name pos:start="731:31" pos:end="731:45">current_picture</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="733:7" pos:end="737:5">else <block pos:start="733:12" pos:end="737:5">{<block_content pos:start="735:9" pos:end="735:43">

        <expr_stmt pos:start="735:9" pos:end="735:43"><expr pos:start="735:9" pos:end="735:42"><operator pos:start="735:9" pos:end="735:9">*</operator><name pos:start="735:10" pos:end="735:13">pict</name><operator pos:start="735:14" pos:end="735:14">=</operator> <operator pos:start="735:16" pos:end="735:16">*</operator><operator pos:start="735:17" pos:end="735:17">(</operator><name pos:start="735:18" pos:end="735:24">AVFrame</name><operator pos:start="735:25" pos:end="735:25">*</operator><operator pos:start="735:26" pos:end="735:26">)</operator><operator pos:start="735:27" pos:end="735:27">&amp;</operator><name pos:start="735:28" pos:end="735:42"><name pos:start="735:28" pos:end="735:28">s</name><operator pos:start="735:29" pos:end="735:30">-&gt;</operator><name pos:start="735:31" pos:end="735:42">last_picture</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="741:5" pos:end="763:5"><if pos:start="741:5" pos:end="763:5">if<condition pos:start="741:7" pos:end="741:32">(<expr pos:start="741:8" pos:end="741:31"><name pos:start="741:8" pos:end="741:19"><name pos:start="741:8" pos:end="741:12">avctx</name><operator pos:start="741:13" pos:end="741:14">-&gt;</operator><name pos:start="741:15" pos:end="741:19">debug</name></name><operator pos:start="741:20" pos:end="741:20">&amp;</operator><name pos:start="741:21" pos:end="741:31">FF_DEBUG_QP</name></expr>)</condition><block pos:start="741:33" pos:end="763:5">{<block_content pos:start="743:9" pos:end="761:21">

        <decl_stmt pos:start="743:9" pos:end="743:41"><decl pos:start="743:9" pos:end="743:40"><type pos:start="743:9" pos:end="743:16"><name pos:start="743:9" pos:end="743:14">int8_t</name> <modifier pos:start="743:16" pos:end="743:16">*</modifier></type><name pos:start="743:17" pos:end="743:20">qtab</name><init pos:start="743:21" pos:end="743:40">= <expr pos:start="743:23" pos:end="743:40"><name pos:start="743:23" pos:end="743:40"><name pos:start="743:23" pos:end="743:26">pict</name><operator pos:start="743:27" pos:end="743:28">-&gt;</operator><name pos:start="743:29" pos:end="743:40">qscale_table</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="745:9" pos:end="745:16"><decl pos:start="745:9" pos:end="745:13"><type pos:start="745:9" pos:end="745:11"><name pos:start="745:9" pos:end="745:11">int</name></type> <name pos:start="745:13" pos:end="745:13">x</name></decl>,<decl pos:start="745:15" pos:end="745:15"><type ref="prev" pos:start="745:9" pos:end="745:11"/><name pos:start="745:15" pos:end="745:15">y</name></decl>;</decl_stmt>

        

        <for pos:start="749:9" pos:end="759:9">for<control pos:start="749:12" pos:end="749:37">(<init pos:start="749:13" pos:end="749:16"><expr pos:start="749:13" pos:end="749:15"><name pos:start="749:13" pos:end="749:13">y</name><operator pos:start="749:14" pos:end="749:14">=</operator><literal type="number" pos:start="749:15" pos:end="749:15">0</literal></expr>;</init> <condition pos:start="749:18" pos:end="749:32"><expr pos:start="749:18" pos:end="749:31"><name pos:start="749:18" pos:end="749:18">y</name><operator pos:start="749:19" pos:end="749:19">&lt;</operator><name pos:start="749:20" pos:end="749:31"><name pos:start="749:20" pos:end="749:20">s</name><operator pos:start="749:21" pos:end="749:22">-&gt;</operator><name pos:start="749:23" pos:end="749:31">mb_height</name></name></expr>;</condition> <incr pos:start="749:34" pos:end="749:36"><expr pos:start="749:34" pos:end="749:36"><name pos:start="749:34" pos:end="749:34">y</name><operator pos:start="749:35" pos:end="749:36">++</operator></expr></incr>)</control><block pos:start="749:38" pos:end="759:9">{<block_content pos:start="751:13" pos:end="757:25">

            <for pos:start="751:13" pos:end="755:13">for<control pos:start="751:16" pos:end="751:40">(<init pos:start="751:17" pos:end="751:20"><expr pos:start="751:17" pos:end="751:19"><name pos:start="751:17" pos:end="751:17">x</name><operator pos:start="751:18" pos:end="751:18">=</operator><literal type="number" pos:start="751:19" pos:end="751:19">0</literal></expr>;</init> <condition pos:start="751:22" pos:end="751:35"><expr pos:start="751:22" pos:end="751:34"><name pos:start="751:22" pos:end="751:22">x</name><operator pos:start="751:23" pos:end="751:23">&lt;</operator><name pos:start="751:24" pos:end="751:34"><name pos:start="751:24" pos:end="751:24">s</name><operator pos:start="751:25" pos:end="751:26">-&gt;</operator><name pos:start="751:27" pos:end="751:34">mb_width</name></name></expr>;</condition> <incr pos:start="751:37" pos:end="751:39"><expr pos:start="751:37" pos:end="751:39"><name pos:start="751:37" pos:end="751:37">x</name><operator pos:start="751:38" pos:end="751:39">++</operator></expr></incr>)</control><block pos:start="751:41" pos:end="755:13">{<block_content pos:start="753:17" pos:end="753:56">

                <expr_stmt pos:start="753:17" pos:end="753:56"><expr pos:start="753:17" pos:end="753:55"><call pos:start="753:17" pos:end="753:55"><name pos:start="753:17" pos:end="753:22">printf</name><argument_list pos:start="753:23" pos:end="753:55">(<argument pos:start="753:24" pos:end="753:29"><expr pos:start="753:24" pos:end="753:29"><literal type="string" pos:start="753:24" pos:end="753:29">"%2d "</literal></expr></argument>, <argument pos:start="753:32" pos:end="753:54"><expr pos:start="753:32" pos:end="753:54"><name pos:start="753:32" pos:end="753:54"><name pos:start="753:32" pos:end="753:35">qtab</name><index pos:start="753:36" pos:end="753:54">[<expr pos:start="753:37" pos:end="753:53"><name pos:start="753:37" pos:end="753:37">x</name> <operator pos:start="753:39" pos:end="753:39">+</operator> <name pos:start="753:41" pos:end="753:41">y</name><operator pos:start="753:42" pos:end="753:42">*</operator><name pos:start="753:43" pos:end="753:53"><name pos:start="753:43" pos:end="753:43">s</name><operator pos:start="753:44" pos:end="753:45">-&gt;</operator><name pos:start="753:46" pos:end="753:53">mb_width</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="757:13" pos:end="757:25"><expr pos:start="757:13" pos:end="757:24"><call pos:start="757:13" pos:end="757:24"><name pos:start="757:13" pos:end="757:18">printf</name><argument_list pos:start="757:19" pos:end="757:24">(<argument pos:start="757:20" pos:end="757:23"><expr pos:start="757:20" pos:end="757:23"><literal type="string" pos:start="757:20" pos:end="757:23">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="761:9" pos:end="761:21"><expr pos:start="761:9" pos:end="761:20"><call pos:start="761:9" pos:end="761:20"><name pos:start="761:9" pos:end="761:14">printf</name><argument_list pos:start="761:15" pos:end="761:20">(<argument pos:start="761:16" pos:end="761:19"><expr pos:start="761:16" pos:end="761:19"><literal type="string" pos:start="761:16" pos:end="761:19">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="767:5" pos:end="767:58">/* Return the Picture timestamp as the frame number */</comment>

    <comment type="block" pos:start="769:5" pos:end="769:58">/* we substract 1 because it is added on utils.c    */</comment>

    <expr_stmt pos:start="771:5" pos:end="771:48"><expr pos:start="771:5" pos:end="771:47"><name pos:start="771:5" pos:end="771:23"><name pos:start="771:5" pos:end="771:9">avctx</name><operator pos:start="771:10" pos:end="771:11">-&gt;</operator><name pos:start="771:12" pos:end="771:23">frame_number</name></name> <operator pos:start="771:25" pos:end="771:25">=</operator> <name pos:start="771:27" pos:end="771:43"><name pos:start="771:27" pos:end="771:27">s</name><operator pos:start="771:28" pos:end="771:29">-&gt;</operator><name pos:start="771:30" pos:end="771:43">picture_number</name></name> <operator pos:start="771:45" pos:end="771:45">-</operator> <literal type="number" pos:start="771:47" pos:end="771:47">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="775:5" pos:end="775:48">/* dont output the last pic after seeking */</comment>

    <if_stmt pos:start="777:5" pos:end="782:0"><if pos:start="777:5" pos:end="782:0">if<condition pos:start="777:7" pos:end="777:47">(<expr pos:start="777:8" pos:end="777:46"><name pos:start="777:8" pos:end="777:30"><name pos:start="777:8" pos:end="777:8">s</name><operator pos:start="777:9" pos:end="777:10">-&gt;</operator><name pos:start="777:11" pos:end="777:22">last_picture</name><operator pos:start="777:23" pos:end="777:23">.</operator><name pos:start="777:24" pos:end="777:27">data</name><index pos:start="777:28" pos:end="777:30">[<expr pos:start="777:29" pos:end="777:29"><literal type="number" pos:start="777:29" pos:end="777:29">0</literal></expr>]</index></name> <operator pos:start="777:32" pos:end="777:33">||</operator> <name pos:start="777:35" pos:end="777:46"><name pos:start="777:35" pos:end="777:35">s</name><operator pos:start="777:36" pos:end="777:37">-&gt;</operator><name pos:start="777:38" pos:end="777:46">low_delay</name></name></expr>)</condition><block type="pseudo" pos:start="779:9" pos:end="782:0"><block_content pos:start="779:9" pos:end="782:0">

        <expr_stmt pos:start="779:9" pos:end="782:0"><expr pos:start="779:9" pos:end="779:36"><operator pos:start="779:9" pos:end="779:9">*</operator><name pos:start="779:10" pos:end="779:18">data_size</name> <operator pos:start="779:20" pos:end="779:20">=</operator> <sizeof pos:start="779:22" pos:end="779:36">sizeof<argument_list pos:start="779:28" pos:end="779:36">(<argument pos:start="779:29" pos:end="779:35"><expr pos:start="779:29" pos:end="779:35"><name pos:start="779:29" pos:end="779:35">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="781:1" pos:end="781:23">#<cpp:directive pos:start="781:2" pos:end="781:6">ifdef</cpp:directive> <name pos:start="781:8" pos:end="781:23">PRINT_FRAME_TIME</name></cpp:ifdef>

<expr_stmt pos:start="783:1" pos:end="786:0"><expr pos:start="783:1" pos:end="783:29"><call pos:start="783:1" pos:end="783:29"><name pos:start="783:1" pos:end="783:6">printf</name><argument_list pos:start="783:7" pos:end="783:29">(<argument pos:start="783:8" pos:end="783:14"><expr pos:start="783:8" pos:end="783:14"><literal type="string" pos:start="783:8" pos:end="783:14">"%Ld\n"</literal></expr></argument>, <argument pos:start="783:17" pos:end="783:28"><expr pos:start="783:17" pos:end="783:28"><call pos:start="783:17" pos:end="783:23"><name pos:start="783:17" pos:end="783:21">rdtsc</name><argument_list pos:start="783:22" pos:end="783:23">()</argument_list></call><operator pos:start="783:24" pos:end="783:24">-</operator><name pos:start="783:25" pos:end="783:28">time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="785:1" pos:end="785:6">#<cpp:directive pos:start="785:2" pos:end="785:6">endif</cpp:directive></cpp:endif>

    <return pos:start="787:5" pos:end="787:43">return <expr pos:start="787:12" pos:end="787:42"><call pos:start="787:12" pos:end="787:42"><name pos:start="787:12" pos:end="787:29">get_consumed_bytes</name><argument_list pos:start="787:30" pos:end="787:42">(<argument pos:start="787:31" pos:end="787:31"><expr pos:start="787:31" pos:end="787:31"><name pos:start="787:31" pos:end="787:31">s</name></expr></argument>, <argument pos:start="787:34" pos:end="787:41"><expr pos:start="787:34" pos:end="787:41"><name pos:start="787:34" pos:end="787:41">buf_size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
