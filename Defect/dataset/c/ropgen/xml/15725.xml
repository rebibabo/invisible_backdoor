<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15725.c" pos:tabs="8"><function pos:start="1:1" pos:end="267:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:13">main_loop</name><parameter_list pos:start="1:14" pos:end="1:19">(<parameter pos:start="1:15" pos:end="1:18"><decl pos:start="1:15" pos:end="1:18"><type pos:start="1:15" pos:end="1:18"><name pos:start="1:15" pos:end="1:18">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="267:1">{<block_content pos:start="7:5" pos:end="265:15">

<cpp:ifndef pos:start="5:1" pos:end="5:14">#<cpp:directive pos:start="5:2" pos:end="5:7">ifndef</cpp:directive> <name pos:start="5:9" pos:end="5:14">_WIN32</name></cpp:ifndef>

    <decl_stmt pos:start="7:5" pos:end="7:49"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:17">pollfd</name></name></type> <name pos:start="7:19" pos:end="7:43"><name pos:start="7:19" pos:end="7:22">ufds</name><index pos:start="7:23" pos:end="7:43">[<expr pos:start="7:24" pos:end="7:42"><name pos:start="7:24" pos:end="7:38">MAX_IO_HANDLERS</name> <operator pos:start="7:40" pos:end="7:40">+</operator> <literal type="number" pos:start="7:42" pos:end="7:42">1</literal></expr>]</index></name></decl>, <decl pos:start="7:46" pos:end="7:48"><type ref="prev" pos:start="7:5" pos:end="7:17"><modifier pos:start="7:46" pos:end="7:46">*</modifier></type><name pos:start="7:47" pos:end="7:48">pf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:19">IOHandlerRecord</name> <modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:24">ioh</name></decl>, <decl pos:start="9:27" pos:end="9:35"><type ref="prev" pos:start="9:5" pos:end="9:21"><modifier pos:start="9:27" pos:end="9:27">*</modifier></type><name pos:start="9:28" pos:end="9:35">ioh_next</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:21"><name pos:start="11:13" pos:end="11:15">buf</name><index pos:start="11:16" pos:end="11:21">[<expr pos:start="11:17" pos:end="11:20"><literal type="number" pos:start="11:17" pos:end="11:20">4096</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="16:0"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">n</name></decl>, <decl pos:start="13:12" pos:end="13:19"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:19">max_size</name></decl>;</decl_stmt>

<cpp:endif pos:start="15:1" pos:end="15:6">#<cpp:directive pos:start="15:2" pos:end="15:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>, <decl pos:start="17:14" pos:end="17:20"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:14" pos:end="17:20">timeout</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">CPUState</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:17">env</name> <init pos:start="19:19" pos:end="19:30">= <expr pos:start="19:21" pos:end="19:30"><name pos:start="19:21" pos:end="19:30">global_env</name></expr></init></decl>;</decl_stmt>



    <for pos:start="23:5" pos:end="261:5">for<control pos:start="23:8" pos:end="23:11">(<init pos:start="23:9" pos:end="23:9">;</init><condition pos:start="23:10" pos:end="23:10">;</condition><incr/>)</control> <block pos:start="23:13" pos:end="261:5">{<block_content pos:start="25:9" pos:end="259:50">

        <if_stmt pos:start="25:9" pos:end="74:0"><if pos:start="25:9" pos:end="65:9">if <condition pos:start="25:12" pos:end="25:23">(<expr pos:start="25:13" pos:end="25:22"><name pos:start="25:13" pos:end="25:22">vm_running</name></expr>)</condition> <block pos:start="25:25" pos:end="65:9">{<block_content pos:start="27:13" pos:end="63:28">

            <expr_stmt pos:start="27:13" pos:end="27:32"><expr pos:start="27:13" pos:end="27:31"><name pos:start="27:13" pos:end="27:15">ret</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <call pos:start="27:19" pos:end="27:31"><name pos:start="27:19" pos:end="27:26">cpu_exec</name><argument_list pos:start="27:27" pos:end="27:31">(<argument pos:start="27:28" pos:end="27:30"><expr pos:start="27:28" pos:end="27:30"><name pos:start="27:28" pos:end="27:30">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="29:13" pos:end="35:13"><if pos:start="29:13" pos:end="35:13">if <condition pos:start="29:16" pos:end="29:35">(<expr pos:start="29:17" pos:end="29:34"><name pos:start="29:17" pos:end="29:34">shutdown_requested</name></expr>)</condition> <block pos:start="29:37" pos:end="35:13">{<block_content pos:start="31:17" pos:end="33:22">

                <expr_stmt pos:start="31:17" pos:end="31:37"><expr pos:start="31:17" pos:end="31:36"><name pos:start="31:17" pos:end="31:19">ret</name> <operator pos:start="31:21" pos:end="31:21">=</operator> <name pos:start="31:23" pos:end="31:36">EXCP_INTERRUPT</name></expr>;</expr_stmt> 

                <break pos:start="33:17" pos:end="33:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="37:13" pos:end="45:13"><if pos:start="37:13" pos:end="45:13">if <condition pos:start="37:16" pos:end="37:32">(<expr pos:start="37:17" pos:end="37:31"><name pos:start="37:17" pos:end="37:31">reset_requested</name></expr>)</condition> <block pos:start="37:34" pos:end="45:13">{<block_content pos:start="39:17" pos:end="43:37">

                <expr_stmt pos:start="39:17" pos:end="39:36"><expr pos:start="39:17" pos:end="39:35"><name pos:start="39:17" pos:end="39:31">reset_requested</name> <operator pos:start="39:33" pos:end="39:33">=</operator> <literal type="number" pos:start="39:35" pos:end="39:35">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="41:17" pos:end="41:36"><expr pos:start="41:17" pos:end="41:35"><call pos:start="41:17" pos:end="41:35"><name pos:start="41:17" pos:end="41:33">qemu_system_reset</name><argument_list pos:start="41:34" pos:end="41:35">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="43:17" pos:end="43:37"><expr pos:start="43:17" pos:end="43:36"><name pos:start="43:17" pos:end="43:19">ret</name> <operator pos:start="43:21" pos:end="43:21">=</operator> <name pos:start="43:23" pos:end="43:36">EXCP_INTERRUPT</name></expr>;</expr_stmt> 

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="47:13" pos:end="51:13"><if pos:start="47:13" pos:end="51:13">if <condition pos:start="47:16" pos:end="47:34">(<expr pos:start="47:17" pos:end="47:33"><name pos:start="47:17" pos:end="47:19">ret</name> <operator pos:start="47:21" pos:end="47:22">==</operator> <name pos:start="47:24" pos:end="47:33">EXCP_DEBUG</name></expr>)</condition> <block pos:start="47:36" pos:end="51:13">{<block_content pos:start="49:17" pos:end="49:36">

                <expr_stmt pos:start="49:17" pos:end="49:36"><expr pos:start="49:17" pos:end="49:35"><call pos:start="49:17" pos:end="49:35"><name pos:start="49:17" pos:end="49:23">vm_stop</name><argument_list pos:start="49:24" pos:end="49:35">(<argument pos:start="49:25" pos:end="49:34"><expr pos:start="49:25" pos:end="49:34"><name pos:start="49:25" pos:end="49:34">EXCP_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="53:13" pos:end="53:64">/* if hlt instruction, we wait until the next IRQ */</comment>

            <comment type="block" pos:start="55:13" pos:end="55:55">/* XXX: use timeout computed from timers */</comment>

            <if_stmt pos:start="57:13" pos:end="63:28"><if pos:start="57:13" pos:end="59:29">if <condition pos:start="57:16" pos:end="57:32">(<expr pos:start="57:17" pos:end="57:31"><name pos:start="57:17" pos:end="57:19">ret</name> <operator pos:start="57:21" pos:end="57:22">==</operator> <name pos:start="57:24" pos:end="57:31">EXCP_HLT</name></expr>)</condition><block type="pseudo" pos:start="59:17" pos:end="59:29"><block_content pos:start="59:17" pos:end="59:29"> 

                <expr_stmt pos:start="59:17" pos:end="59:29"><expr pos:start="59:17" pos:end="59:28"><name pos:start="59:17" pos:end="59:23">timeout</name> <operator pos:start="59:25" pos:end="59:25">=</operator> <literal type="number" pos:start="59:27" pos:end="59:28">10</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="61:13" pos:end="63:28">else<block type="pseudo" pos:start="63:17" pos:end="63:28"><block_content pos:start="63:17" pos:end="63:28">

                <expr_stmt pos:start="63:17" pos:end="63:28"><expr pos:start="63:17" pos:end="63:27"><name pos:start="63:17" pos:end="63:23">timeout</name> <operator pos:start="63:25" pos:end="63:25">=</operator> <literal type="number" pos:start="63:27" pos:end="63:27">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="65:11" pos:end="74:0">else <block pos:start="65:16" pos:end="74:0">{<block_content pos:start="67:13" pos:end="67:25">

            <expr_stmt pos:start="67:13" pos:end="67:25"><expr pos:start="67:13" pos:end="67:24"><name pos:start="67:13" pos:end="67:19">timeout</name> <operator pos:start="67:21" pos:end="67:21">=</operator> <literal type="number" pos:start="67:23" pos:end="67:24">10</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



<cpp:ifdef pos:start="73:1" pos:end="73:13">#<cpp:directive pos:start="73:2" pos:end="73:6">ifdef</cpp:directive> <name pos:start="73:8" pos:end="73:13">_WIN32</name></cpp:ifdef>

        <if_stmt pos:start="75:9" pos:end="80:0"><if pos:start="75:9" pos:end="80:0">if <condition pos:start="75:12" pos:end="75:24">(<expr pos:start="75:13" pos:end="75:23"><name pos:start="75:13" pos:end="75:19">timeout</name> <operator pos:start="75:21" pos:end="75:21">&gt;</operator> <literal type="number" pos:start="75:23" pos:end="75:23">0</literal></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="80:0"><block_content pos:start="77:13" pos:end="80:0">

            <expr_stmt pos:start="77:13" pos:end="80:0"><expr pos:start="77:13" pos:end="77:26"><call pos:start="77:13" pos:end="77:26"><name pos:start="77:13" pos:end="77:17">Sleep</name><argument_list pos:start="77:18" pos:end="77:26">(<argument pos:start="77:19" pos:end="77:25"><expr pos:start="77:19" pos:end="77:25"><name pos:start="77:19" pos:end="77:25">timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else pos:start="79:1" pos:end="79:5">#<cpp:directive pos:start="79:2" pos:end="79:5">else</cpp:directive></cpp:else>



        <comment type="block" pos:start="83:9" pos:end="83:29">/* poll any events */</comment>

        <comment type="block" pos:start="85:9" pos:end="85:60">/* XXX: separate device handlers from system ones */</comment>

        <expr_stmt pos:start="87:9" pos:end="87:18"><expr pos:start="87:9" pos:end="87:17"><name pos:start="87:9" pos:end="87:10">pf</name> <operator pos:start="87:12" pos:end="87:12">=</operator> <name pos:start="87:14" pos:end="87:17">ufds</name></expr>;</expr_stmt>

        <for pos:start="89:9" pos:end="131:9">for<control pos:start="89:12" pos:end="89:65">(<init pos:start="89:13" pos:end="89:35"><expr pos:start="89:13" pos:end="89:34"><name pos:start="89:13" pos:end="89:15">ioh</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <name pos:start="89:19" pos:end="89:34">first_io_handler</name></expr>;</init> <condition pos:start="89:37" pos:end="89:48"><expr pos:start="89:37" pos:end="89:47"><name pos:start="89:37" pos:end="89:39">ioh</name> <operator pos:start="89:41" pos:end="89:42">!=</operator> <name pos:start="89:44" pos:end="89:47">NULL</name></expr>;</condition> <incr pos:start="89:50" pos:end="89:64"><expr pos:start="89:50" pos:end="89:64"><name pos:start="89:50" pos:end="89:52">ioh</name> <operator pos:start="89:54" pos:end="89:54">=</operator> <name pos:start="89:56" pos:end="89:64"><name pos:start="89:56" pos:end="89:58">ioh</name><operator pos:start="89:59" pos:end="89:60">-&gt;</operator><name pos:start="89:61" pos:end="89:64">next</name></name></expr></incr>)</control> <block pos:start="89:67" pos:end="131:9">{<block_content pos:start="91:13" pos:end="129:37">

            <if_stmt pos:start="91:13" pos:end="127:13"><if pos:start="91:13" pos:end="103:13">if <condition pos:start="91:16" pos:end="91:34">(<expr pos:start="91:17" pos:end="91:33"><operator pos:start="91:17" pos:end="91:17">!</operator><name pos:start="91:18" pos:end="91:33"><name pos:start="91:18" pos:end="91:20">ioh</name><operator pos:start="91:21" pos:end="91:22">-&gt;</operator><name pos:start="91:23" pos:end="91:33">fd_can_read</name></name></expr>)</condition> <block pos:start="91:36" pos:end="103:13">{<block_content pos:start="93:17" pos:end="101:21">

                <expr_stmt pos:start="93:17" pos:end="93:29"><expr pos:start="93:17" pos:end="93:28"><name pos:start="93:17" pos:end="93:24">max_size</name> <operator pos:start="93:26" pos:end="93:26">=</operator> <literal type="number" pos:start="93:28" pos:end="93:28">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:33"><expr pos:start="95:17" pos:end="95:32"><name pos:start="95:17" pos:end="95:22"><name pos:start="95:17" pos:end="95:18">pf</name><operator pos:start="95:19" pos:end="95:20">-&gt;</operator><name pos:start="95:21" pos:end="95:22">fd</name></name> <operator pos:start="95:24" pos:end="95:24">=</operator> <name pos:start="95:26" pos:end="95:32"><name pos:start="95:26" pos:end="95:28">ioh</name><operator pos:start="95:29" pos:end="95:30">-&gt;</operator><name pos:start="95:31" pos:end="95:32">fd</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:36"><expr pos:start="97:17" pos:end="97:35"><name pos:start="97:17" pos:end="97:26"><name pos:start="97:17" pos:end="97:18">pf</name><operator pos:start="97:19" pos:end="97:20">-&gt;</operator><name pos:start="97:21" pos:end="97:26">events</name></name> <operator pos:start="97:28" pos:end="97:28">=</operator> <name pos:start="97:30" pos:end="97:35">POLLIN</name></expr>;</expr_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:30"><expr pos:start="99:17" pos:end="99:29"><name pos:start="99:17" pos:end="99:24"><name pos:start="99:17" pos:end="99:19">ioh</name><operator pos:start="99:20" pos:end="99:21">-&gt;</operator><name pos:start="99:22" pos:end="99:24">ufd</name></name> <operator pos:start="99:26" pos:end="99:26">=</operator> <name pos:start="99:28" pos:end="99:29">pf</name></expr>;</expr_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:21"><expr pos:start="101:17" pos:end="101:20"><name pos:start="101:17" pos:end="101:18">pf</name><operator pos:start="101:19" pos:end="101:20">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="103:15" pos:end="127:13">else <block pos:start="103:20" pos:end="127:13">{<block_content pos:start="105:17" pos:end="125:17">

                <expr_stmt pos:start="105:17" pos:end="105:57"><expr pos:start="105:17" pos:end="105:56"><name pos:start="105:17" pos:end="105:24">max_size</name> <operator pos:start="105:26" pos:end="105:26">=</operator> <call pos:start="105:28" pos:end="105:56"><name pos:start="105:28" pos:end="105:43"><name pos:start="105:28" pos:end="105:30">ioh</name><operator pos:start="105:31" pos:end="105:32">-&gt;</operator><name pos:start="105:33" pos:end="105:43">fd_can_read</name></name><argument_list pos:start="105:44" pos:end="105:56">(<argument pos:start="105:45" pos:end="105:55"><expr pos:start="105:45" pos:end="105:55"><name pos:start="105:45" pos:end="105:55"><name pos:start="105:45" pos:end="105:47">ioh</name><operator pos:start="105:48" pos:end="105:49">-&gt;</operator><name pos:start="105:50" pos:end="105:55">opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="107:17" pos:end="125:17"><if pos:start="107:17" pos:end="121:17">if <condition pos:start="107:20" pos:end="107:33">(<expr pos:start="107:21" pos:end="107:32"><name pos:start="107:21" pos:end="107:28">max_size</name> <operator pos:start="107:30" pos:end="107:30">&gt;</operator> <literal type="number" pos:start="107:32" pos:end="107:32">0</literal></expr>)</condition> <block pos:start="107:35" pos:end="121:17">{<block_content pos:start="109:21" pos:end="119:25">

                    <if_stmt pos:start="109:21" pos:end="111:47"><if pos:start="109:21" pos:end="111:47">if <condition pos:start="109:24" pos:end="109:47">(<expr pos:start="109:25" pos:end="109:46"><name pos:start="109:25" pos:end="109:32">max_size</name> <operator pos:start="109:34" pos:end="109:34">&gt;</operator> <sizeof pos:start="109:36" pos:end="109:46">sizeof<argument_list pos:start="109:42" pos:end="109:46">(<argument pos:start="109:43" pos:end="109:45"><expr pos:start="109:43" pos:end="109:45"><name pos:start="109:43" pos:end="109:45">buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="111:25" pos:end="111:47"><block_content pos:start="111:25" pos:end="111:47">

                        <expr_stmt pos:start="111:25" pos:end="111:47"><expr pos:start="111:25" pos:end="111:46"><name pos:start="111:25" pos:end="111:32">max_size</name> <operator pos:start="111:34" pos:end="111:34">=</operator> <sizeof pos:start="111:36" pos:end="111:46">sizeof<argument_list pos:start="111:42" pos:end="111:46">(<argument pos:start="111:43" pos:end="111:45"><expr pos:start="111:43" pos:end="111:45"><name pos:start="111:43" pos:end="111:45">buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="113:21" pos:end="113:37"><expr pos:start="113:21" pos:end="113:36"><name pos:start="113:21" pos:end="113:26"><name pos:start="113:21" pos:end="113:22">pf</name><operator pos:start="113:23" pos:end="113:24">-&gt;</operator><name pos:start="113:25" pos:end="113:26">fd</name></name> <operator pos:start="113:28" pos:end="113:28">=</operator> <name pos:start="113:30" pos:end="113:36"><name pos:start="113:30" pos:end="113:32">ioh</name><operator pos:start="113:33" pos:end="113:34">-&gt;</operator><name pos:start="113:35" pos:end="113:36">fd</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="115:21" pos:end="115:40"><expr pos:start="115:21" pos:end="115:39"><name pos:start="115:21" pos:end="115:30"><name pos:start="115:21" pos:end="115:22">pf</name><operator pos:start="115:23" pos:end="115:24">-&gt;</operator><name pos:start="115:25" pos:end="115:30">events</name></name> <operator pos:start="115:32" pos:end="115:32">=</operator> <name pos:start="115:34" pos:end="115:39">POLLIN</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="117:21" pos:end="117:34"><expr pos:start="117:21" pos:end="117:33"><name pos:start="117:21" pos:end="117:28"><name pos:start="117:21" pos:end="117:23">ioh</name><operator pos:start="117:24" pos:end="117:25">-&gt;</operator><name pos:start="117:26" pos:end="117:28">ufd</name></name> <operator pos:start="117:30" pos:end="117:30">=</operator> <name pos:start="117:32" pos:end="117:33">pf</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="119:21" pos:end="119:25"><expr pos:start="119:21" pos:end="119:24"><name pos:start="119:21" pos:end="119:22">pf</name><operator pos:start="119:23" pos:end="119:24">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="121:19" pos:end="125:17">else <block pos:start="121:24" pos:end="125:17">{<block_content pos:start="123:21" pos:end="123:36">

                    <expr_stmt pos:start="123:21" pos:end="123:36"><expr pos:start="123:21" pos:end="123:35"><name pos:start="123:21" pos:end="123:28"><name pos:start="123:21" pos:end="123:23">ioh</name><operator pos:start="123:24" pos:end="123:25">-&gt;</operator><name pos:start="123:26" pos:end="123:28">ufd</name></name> <operator pos:start="123:30" pos:end="123:30">=</operator> <name pos:start="123:32" pos:end="123:35">NULL</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:37"><expr pos:start="129:13" pos:end="129:36"><name pos:start="129:13" pos:end="129:25"><name pos:start="129:13" pos:end="129:15">ioh</name><operator pos:start="129:16" pos:end="129:17">-&gt;</operator><name pos:start="129:18" pos:end="129:25">max_size</name></name> <operator pos:start="129:27" pos:end="129:27">=</operator> <name pos:start="129:29" pos:end="129:36">max_size</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        

        <expr_stmt pos:start="135:9" pos:end="135:45"><expr pos:start="135:9" pos:end="135:44"><name pos:start="135:9" pos:end="135:11">ret</name> <operator pos:start="135:13" pos:end="135:13">=</operator> <call pos:start="135:15" pos:end="135:44"><name pos:start="135:15" pos:end="135:18">poll</name><argument_list pos:start="135:19" pos:end="135:44">(<argument pos:start="135:20" pos:end="135:23"><expr pos:start="135:20" pos:end="135:23"><name pos:start="135:20" pos:end="135:23">ufds</name></expr></argument>, <argument pos:start="135:26" pos:end="135:34"><expr pos:start="135:26" pos:end="135:34"><name pos:start="135:26" pos:end="135:27">pf</name> <operator pos:start="135:29" pos:end="135:29">-</operator> <name pos:start="135:31" pos:end="135:34">ufds</name></expr></argument>, <argument pos:start="135:37" pos:end="135:43"><expr pos:start="135:37" pos:end="135:43"><name pos:start="135:37" pos:end="135:43">timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="137:9" pos:end="184:0"><if pos:start="137:9" pos:end="184:0">if <condition pos:start="137:12" pos:end="137:20">(<expr pos:start="137:13" pos:end="137:19"><name pos:start="137:13" pos:end="137:15">ret</name> <operator pos:start="137:17" pos:end="137:17">&gt;</operator> <literal type="number" pos:start="137:19" pos:end="137:19">0</literal></expr>)</condition> <block pos:start="137:22" pos:end="184:0">{<block_content pos:start="141:13" pos:end="177:13">

            <comment type="block" pos:start="139:13" pos:end="139:49">/* XXX: better handling of removal */</comment>

            <for pos:start="141:13" pos:end="177:13">for<control pos:start="141:16" pos:end="141:68">(<init pos:start="141:17" pos:end="141:39"><expr pos:start="141:17" pos:end="141:38"><name pos:start="141:17" pos:end="141:19">ioh</name> <operator pos:start="141:21" pos:end="141:21">=</operator> <name pos:start="141:23" pos:end="141:38">first_io_handler</name></expr>;</init> <condition pos:start="141:41" pos:end="141:52"><expr pos:start="141:41" pos:end="141:51"><name pos:start="141:41" pos:end="141:43">ioh</name> <operator pos:start="141:45" pos:end="141:46">!=</operator> <name pos:start="141:48" pos:end="141:51">NULL</name></expr>;</condition> <incr pos:start="141:54" pos:end="141:67"><expr pos:start="141:54" pos:end="141:67"><name pos:start="141:54" pos:end="141:56">ioh</name> <operator pos:start="141:58" pos:end="141:58">=</operator> <name pos:start="141:60" pos:end="141:67">ioh_next</name></expr></incr>)</control> <block pos:start="141:70" pos:end="177:13">{<block_content pos:start="143:17" pos:end="175:17">

                <expr_stmt pos:start="143:17" pos:end="143:37"><expr pos:start="143:17" pos:end="143:36"><name pos:start="143:17" pos:end="143:24">ioh_next</name> <operator pos:start="143:26" pos:end="143:26">=</operator> <name pos:start="143:28" pos:end="143:36"><name pos:start="143:28" pos:end="143:30">ioh</name><operator pos:start="143:31" pos:end="143:32">-&gt;</operator><name pos:start="143:33" pos:end="143:36">next</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="145:17" pos:end="145:30"><expr pos:start="145:17" pos:end="145:29"><name pos:start="145:17" pos:end="145:18">pf</name> <operator pos:start="145:20" pos:end="145:20">=</operator> <name pos:start="145:22" pos:end="145:29"><name pos:start="145:22" pos:end="145:24">ioh</name><operator pos:start="145:25" pos:end="145:26">-&gt;</operator><name pos:start="145:27" pos:end="145:29">ufd</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="147:17" pos:end="175:17"><if pos:start="147:17" pos:end="175:17">if <condition pos:start="147:20" pos:end="147:23">(<expr pos:start="147:21" pos:end="147:22"><name pos:start="147:21" pos:end="147:22">pf</name></expr>)</condition> <block pos:start="147:25" pos:end="175:17">{<block_content pos:start="149:21" pos:end="173:21">

                    <if_stmt pos:start="149:21" pos:end="173:21"><if pos:start="149:21" pos:end="173:21">if <condition pos:start="149:24" pos:end="149:45">(<expr pos:start="149:25" pos:end="149:44"><name pos:start="149:25" pos:end="149:35"><name pos:start="149:25" pos:end="149:26">pf</name><operator pos:start="149:27" pos:end="149:28">-&gt;</operator><name pos:start="149:29" pos:end="149:35">revents</name></name> <operator pos:start="149:37" pos:end="149:37">&amp;</operator> <name pos:start="149:39" pos:end="149:44">POLLIN</name></expr>)</condition> <block pos:start="149:47" pos:end="173:21">{<block_content pos:start="151:25" pos:end="171:25">

                        <if_stmt pos:start="151:25" pos:end="171:25"><if pos:start="151:25" pos:end="157:25">if <condition pos:start="151:28" pos:end="151:47">(<expr pos:start="151:29" pos:end="151:46"><name pos:start="151:29" pos:end="151:41"><name pos:start="151:29" pos:end="151:31">ioh</name><operator pos:start="151:32" pos:end="151:33">-&gt;</operator><name pos:start="151:34" pos:end="151:41">max_size</name></name> <operator pos:start="151:43" pos:end="151:44">==</operator> <literal type="number" pos:start="151:46" pos:end="151:46">0</literal></expr>)</condition> <block pos:start="151:49" pos:end="157:25">{<block_content pos:start="155:29" pos:end="155:63">

                            <comment type="block" pos:start="153:29" pos:end="153:51">/* just a read event */</comment>

                            <expr_stmt pos:start="155:29" pos:end="155:63"><expr pos:start="155:29" pos:end="155:62"><call pos:start="155:29" pos:end="155:62"><name pos:start="155:29" pos:end="155:40"><name pos:start="155:29" pos:end="155:31">ioh</name><operator pos:start="155:32" pos:end="155:33">-&gt;</operator><name pos:start="155:34" pos:end="155:40">fd_read</name></name><argument_list pos:start="155:41" pos:end="155:62">(<argument pos:start="155:42" pos:end="155:52"><expr pos:start="155:42" pos:end="155:52"><name pos:start="155:42" pos:end="155:52"><name pos:start="155:42" pos:end="155:44">ioh</name><operator pos:start="155:45" pos:end="155:46">-&gt;</operator><name pos:start="155:47" pos:end="155:52">opaque</name></name></expr></argument>, <argument pos:start="155:55" pos:end="155:58"><expr pos:start="155:55" pos:end="155:58"><name pos:start="155:55" pos:end="155:58">NULL</name></expr></argument>, <argument pos:start="155:61" pos:end="155:61"><expr pos:start="155:61" pos:end="155:61"><literal type="number" pos:start="155:61" pos:end="155:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="157:27" pos:end="171:25">else <block pos:start="157:32" pos:end="171:25">{<block_content pos:start="159:29" pos:end="169:29">

                            <expr_stmt pos:start="159:29" pos:end="159:66"><expr pos:start="159:29" pos:end="159:65"><name pos:start="159:29" pos:end="159:29">n</name> <operator pos:start="159:31" pos:end="159:31">=</operator> <call pos:start="159:33" pos:end="159:65"><name pos:start="159:33" pos:end="159:36">read</name><argument_list pos:start="159:37" pos:end="159:65">(<argument pos:start="159:38" pos:end="159:44"><expr pos:start="159:38" pos:end="159:44"><name pos:start="159:38" pos:end="159:44"><name pos:start="159:38" pos:end="159:40">ioh</name><operator pos:start="159:41" pos:end="159:42">-&gt;</operator><name pos:start="159:43" pos:end="159:44">fd</name></name></expr></argument>, <argument pos:start="159:47" pos:end="159:49"><expr pos:start="159:47" pos:end="159:49"><name pos:start="159:47" pos:end="159:49">buf</name></expr></argument>, <argument pos:start="159:52" pos:end="159:64"><expr pos:start="159:52" pos:end="159:64"><name pos:start="159:52" pos:end="159:64"><name pos:start="159:52" pos:end="159:54">ioh</name><operator pos:start="159:55" pos:end="159:56">-&gt;</operator><name pos:start="159:57" pos:end="159:64">max_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="161:29" pos:end="169:29"><if pos:start="161:29" pos:end="165:29">if <condition pos:start="161:32" pos:end="161:39">(<expr pos:start="161:33" pos:end="161:38"><name pos:start="161:33" pos:end="161:33">n</name> <operator pos:start="161:35" pos:end="161:36">&gt;=</operator> <literal type="number" pos:start="161:38" pos:end="161:38">0</literal></expr>)</condition> <block pos:start="161:41" pos:end="165:29">{<block_content pos:start="163:33" pos:end="163:66">

                                <expr_stmt pos:start="163:33" pos:end="163:66"><expr pos:start="163:33" pos:end="163:65"><call pos:start="163:33" pos:end="163:65"><name pos:start="163:33" pos:end="163:44"><name pos:start="163:33" pos:end="163:35">ioh</name><operator pos:start="163:36" pos:end="163:37">-&gt;</operator><name pos:start="163:38" pos:end="163:44">fd_read</name></name><argument_list pos:start="163:45" pos:end="163:65">(<argument pos:start="163:46" pos:end="163:56"><expr pos:start="163:46" pos:end="163:56"><name pos:start="163:46" pos:end="163:56"><name pos:start="163:46" pos:end="163:48">ioh</name><operator pos:start="163:49" pos:end="163:50">-&gt;</operator><name pos:start="163:51" pos:end="163:56">opaque</name></name></expr></argument>, <argument pos:start="163:59" pos:end="163:61"><expr pos:start="163:59" pos:end="163:61"><name pos:start="163:59" pos:end="163:61">buf</name></expr></argument>, <argument pos:start="163:64" pos:end="163:64"><expr pos:start="163:64" pos:end="163:64"><name pos:start="163:64" pos:end="163:64">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <if type="elseif" pos:start="165:31" pos:end="169:29">else if <condition pos:start="165:39" pos:end="165:55">(<expr pos:start="165:40" pos:end="165:54"><name pos:start="165:40" pos:end="165:44">errno</name> <operator pos:start="165:46" pos:end="165:47">!=</operator> <name pos:start="165:49" pos:end="165:54">EAGAIN</name></expr>)</condition> <block pos:start="165:57" pos:end="169:29">{<block_content pos:start="167:33" pos:end="167:72">

                                <expr_stmt pos:start="167:33" pos:end="167:72"><expr pos:start="167:33" pos:end="167:71"><call pos:start="167:33" pos:end="167:71"><name pos:start="167:33" pos:end="167:44"><name pos:start="167:33" pos:end="167:35">ioh</name><operator pos:start="167:36" pos:end="167:37">-&gt;</operator><name pos:start="167:38" pos:end="167:44">fd_read</name></name><argument_list pos:start="167:45" pos:end="167:71">(<argument pos:start="167:46" pos:end="167:56"><expr pos:start="167:46" pos:end="167:56"><name pos:start="167:46" pos:end="167:56"><name pos:start="167:46" pos:end="167:48">ioh</name><operator pos:start="167:49" pos:end="167:50">-&gt;</operator><name pos:start="167:51" pos:end="167:56">opaque</name></name></expr></argument>, <argument pos:start="167:59" pos:end="167:62"><expr pos:start="167:59" pos:end="167:62"><name pos:start="167:59" pos:end="167:62">NULL</name></expr></argument>, <argument pos:start="167:65" pos:end="167:70"><expr pos:start="167:65" pos:end="167:70"><operator pos:start="167:65" pos:end="167:65">-</operator><name pos:start="167:66" pos:end="167:70">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if></if_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>



<cpp:if pos:start="183:1" pos:end="183:25">#<cpp:directive pos:start="183:2" pos:end="183:3">if</cpp:directive> <expr pos:start="183:5" pos:end="183:25"><call pos:start="183:5" pos:end="183:25"><name pos:start="183:5" pos:end="183:11">defined</name><argument_list pos:start="183:12" pos:end="183:25">(<argument pos:start="183:13" pos:end="183:24"><expr pos:start="183:13" pos:end="183:24"><name pos:start="183:13" pos:end="183:24">CONFIG_SLIRP</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <comment type="block" pos:start="185:9" pos:end="185:36">/* XXX: merge with poll() */</comment>

        <if_stmt pos:start="187:9" pos:end="226:0"><if pos:start="187:9" pos:end="226:0">if <condition pos:start="187:12" pos:end="187:25">(<expr pos:start="187:13" pos:end="187:24"><name pos:start="187:13" pos:end="187:24">slirp_inited</name></expr>)</condition> <block pos:start="187:27" pos:end="226:0">{<block_content pos:start="189:13" pos:end="217:13">

            <decl_stmt pos:start="189:13" pos:end="189:36"><decl pos:start="189:13" pos:end="189:23"><type pos:start="189:13" pos:end="189:18"><name pos:start="189:13" pos:end="189:18">fd_set</name></type> <name pos:start="189:20" pos:end="189:23">rfds</name></decl>, <decl pos:start="189:26" pos:end="189:29"><type ref="prev" pos:start="189:13" pos:end="189:18"/><name pos:start="189:26" pos:end="189:29">wfds</name></decl>, <decl pos:start="189:32" pos:end="189:35"><type ref="prev" pos:start="189:13" pos:end="189:18"/><name pos:start="189:32" pos:end="189:35">xfds</name></decl>;</decl_stmt>

            <decl_stmt pos:start="191:13" pos:end="191:21"><decl pos:start="191:13" pos:end="191:20"><type pos:start="191:13" pos:end="191:15"><name pos:start="191:13" pos:end="191:15">int</name></type> <name pos:start="191:17" pos:end="191:20">nfds</name></decl>;</decl_stmt>

            <decl_stmt pos:start="193:13" pos:end="193:30"><decl pos:start="193:13" pos:end="193:29"><type pos:start="193:13" pos:end="193:26"><name pos:start="193:13" pos:end="193:26"><name pos:start="193:13" pos:end="193:18">struct</name> <name pos:start="193:20" pos:end="193:26">timeval</name></name></type> <name pos:start="193:28" pos:end="193:29">tv</name></decl>;</decl_stmt>



            <expr_stmt pos:start="197:13" pos:end="197:22"><expr pos:start="197:13" pos:end="197:21"><name pos:start="197:13" pos:end="197:16">nfds</name> <operator pos:start="197:18" pos:end="197:18">=</operator> <operator pos:start="197:20" pos:end="197:20">-</operator><literal type="number" pos:start="197:21" pos:end="197:21">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="199:13" pos:end="199:27"><expr pos:start="199:13" pos:end="199:26"><call pos:start="199:13" pos:end="199:26"><name pos:start="199:13" pos:end="199:19">FD_ZERO</name><argument_list pos:start="199:20" pos:end="199:26">(<argument pos:start="199:21" pos:end="199:25"><expr pos:start="199:21" pos:end="199:25"><operator pos:start="199:21" pos:end="199:21">&amp;</operator><name pos:start="199:22" pos:end="199:25">rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:27"><expr pos:start="201:13" pos:end="201:26"><call pos:start="201:13" pos:end="201:26"><name pos:start="201:13" pos:end="201:19">FD_ZERO</name><argument_list pos:start="201:20" pos:end="201:26">(<argument pos:start="201:21" pos:end="201:25"><expr pos:start="201:21" pos:end="201:25"><operator pos:start="201:21" pos:end="201:21">&amp;</operator><name pos:start="201:22" pos:end="201:25">wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:27"><expr pos:start="203:13" pos:end="203:26"><call pos:start="203:13" pos:end="203:26"><name pos:start="203:13" pos:end="203:19">FD_ZERO</name><argument_list pos:start="203:20" pos:end="203:26">(<argument pos:start="203:21" pos:end="203:25"><expr pos:start="203:21" pos:end="203:25"><operator pos:start="203:21" pos:end="203:21">&amp;</operator><name pos:start="203:22" pos:end="203:25">xfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:58"><expr pos:start="205:13" pos:end="205:57"><call pos:start="205:13" pos:end="205:57"><name pos:start="205:13" pos:end="205:29">slirp_select_fill</name><argument_list pos:start="205:30" pos:end="205:57">(<argument pos:start="205:31" pos:end="205:35"><expr pos:start="205:31" pos:end="205:35"><operator pos:start="205:31" pos:end="205:31">&amp;</operator><name pos:start="205:32" pos:end="205:35">nfds</name></expr></argument>, <argument pos:start="205:38" pos:end="205:42"><expr pos:start="205:38" pos:end="205:42"><operator pos:start="205:38" pos:end="205:38">&amp;</operator><name pos:start="205:39" pos:end="205:42">rfds</name></expr></argument>, <argument pos:start="205:45" pos:end="205:49"><expr pos:start="205:45" pos:end="205:49"><operator pos:start="205:45" pos:end="205:45">&amp;</operator><name pos:start="205:46" pos:end="205:49">wfds</name></expr></argument>, <argument pos:start="205:52" pos:end="205:56"><expr pos:start="205:52" pos:end="205:56"><operator pos:start="205:52" pos:end="205:52">&amp;</operator><name pos:start="205:53" pos:end="205:56">xfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:26"><expr pos:start="207:13" pos:end="207:25"><name pos:start="207:13" pos:end="207:21"><name pos:start="207:13" pos:end="207:14">tv</name><operator pos:start="207:15" pos:end="207:15">.</operator><name pos:start="207:16" pos:end="207:21">tv_sec</name></name> <operator pos:start="207:23" pos:end="207:23">=</operator> <literal type="number" pos:start="207:25" pos:end="207:25">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="209:13" pos:end="209:27"><expr pos:start="209:13" pos:end="209:26"><name pos:start="209:13" pos:end="209:22"><name pos:start="209:13" pos:end="209:14">tv</name><operator pos:start="209:15" pos:end="209:15">.</operator><name pos:start="209:16" pos:end="209:22">tv_usec</name></name> <operator pos:start="209:24" pos:end="209:24">=</operator> <literal type="number" pos:start="209:26" pos:end="209:26">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:61"><expr pos:start="211:13" pos:end="211:60"><name pos:start="211:13" pos:end="211:15">ret</name> <operator pos:start="211:17" pos:end="211:17">=</operator> <call pos:start="211:19" pos:end="211:60"><name pos:start="211:19" pos:end="211:24">select</name><argument_list pos:start="211:25" pos:end="211:60">(<argument pos:start="211:26" pos:end="211:33"><expr pos:start="211:26" pos:end="211:33"><name pos:start="211:26" pos:end="211:29">nfds</name> <operator pos:start="211:31" pos:end="211:31">+</operator> <literal type="number" pos:start="211:33" pos:end="211:33">1</literal></expr></argument>, <argument pos:start="211:36" pos:end="211:40"><expr pos:start="211:36" pos:end="211:40"><operator pos:start="211:36" pos:end="211:36">&amp;</operator><name pos:start="211:37" pos:end="211:40">rfds</name></expr></argument>, <argument pos:start="211:43" pos:end="211:47"><expr pos:start="211:43" pos:end="211:47"><operator pos:start="211:43" pos:end="211:43">&amp;</operator><name pos:start="211:44" pos:end="211:47">wfds</name></expr></argument>, <argument pos:start="211:50" pos:end="211:54"><expr pos:start="211:50" pos:end="211:54"><operator pos:start="211:50" pos:end="211:50">&amp;</operator><name pos:start="211:51" pos:end="211:54">xfds</name></expr></argument>, <argument pos:start="211:57" pos:end="211:59"><expr pos:start="211:57" pos:end="211:59"><operator pos:start="211:57" pos:end="211:57">&amp;</operator><name pos:start="211:58" pos:end="211:59">tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="213:13" pos:end="217:13"><if pos:start="213:13" pos:end="217:13">if <condition pos:start="213:16" pos:end="213:25">(<expr pos:start="213:17" pos:end="213:24"><name pos:start="213:17" pos:end="213:19">ret</name> <operator pos:start="213:21" pos:end="213:22">&gt;=</operator> <literal type="number" pos:start="213:24" pos:end="213:24">0</literal></expr>)</condition> <block pos:start="213:27" pos:end="217:13">{<block_content pos:start="215:17" pos:end="215:55">

                <expr_stmt pos:start="215:17" pos:end="215:55"><expr pos:start="215:17" pos:end="215:54"><call pos:start="215:17" pos:end="215:54"><name pos:start="215:17" pos:end="215:33">slirp_select_poll</name><argument_list pos:start="215:34" pos:end="215:54">(<argument pos:start="215:35" pos:end="215:39"><expr pos:start="215:35" pos:end="215:39"><operator pos:start="215:35" pos:end="215:35">&amp;</operator><name pos:start="215:36" pos:end="215:39">rfds</name></expr></argument>, <argument pos:start="215:42" pos:end="215:46"><expr pos:start="215:42" pos:end="215:46"><operator pos:start="215:42" pos:end="215:42">&amp;</operator><name pos:start="215:43" pos:end="215:46">wfds</name></expr></argument>, <argument pos:start="215:49" pos:end="215:53"><expr pos:start="215:49" pos:end="215:53"><operator pos:start="215:49" pos:end="215:49">&amp;</operator><name pos:start="215:50" pos:end="215:53">xfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="221:1" pos:end="221:6">#<cpp:directive pos:start="221:2" pos:end="221:6">endif</cpp:directive></cpp:endif>



<cpp:endif pos:start="225:1" pos:end="225:6">#<cpp:directive pos:start="225:2" pos:end="225:6">endif</cpp:directive></cpp:endif>



        <if_stmt pos:start="229:9" pos:end="251:9"><if pos:start="229:9" pos:end="251:9">if <condition pos:start="229:12" pos:end="229:23">(<expr pos:start="229:13" pos:end="229:22"><name pos:start="229:13" pos:end="229:22">vm_running</name></expr>)</condition> <block pos:start="229:25" pos:end="251:9">{<block_content pos:start="231:13" pos:end="249:22">

            <expr_stmt pos:start="231:13" pos:end="233:54"><expr pos:start="231:13" pos:end="233:53"><call pos:start="231:13" pos:end="233:53"><name pos:start="231:13" pos:end="231:27">qemu_run_timers</name><argument_list pos:start="231:28" pos:end="233:53">(<argument pos:start="231:29" pos:end="231:62"><expr pos:start="231:29" pos:end="231:62"><operator pos:start="231:29" pos:end="231:29">&amp;</operator><name pos:start="231:30" pos:end="231:62"><name pos:start="231:30" pos:end="231:42">active_timers</name><index pos:start="231:43" pos:end="231:62">[<expr pos:start="231:44" pos:end="231:61"><name pos:start="231:44" pos:end="231:61">QEMU_TIMER_VIRTUAL</name></expr>]</index></name></expr></argument>, 

                            <argument pos:start="233:29" pos:end="233:52"><expr pos:start="233:29" pos:end="233:52"><call pos:start="233:29" pos:end="233:52"><name pos:start="233:29" pos:end="233:42">qemu_get_clock</name><argument_list pos:start="233:43" pos:end="233:52">(<argument pos:start="233:44" pos:end="233:51"><expr pos:start="233:44" pos:end="233:51"><name pos:start="233:44" pos:end="233:51">vm_clock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            

            <if_stmt pos:start="237:13" pos:end="243:13"><if pos:start="237:13" pos:end="243:13">if <condition pos:start="237:16" pos:end="237:30">(<expr pos:start="237:17" pos:end="237:29"><name pos:start="237:17" pos:end="237:29">audio_enabled</name></expr>)</condition> <block pos:start="237:32" pos:end="243:13">{<block_content pos:start="241:17" pos:end="241:27">

                <comment type="block" pos:start="239:17" pos:end="239:45">/* XXX: add explicit timer */</comment>

                <expr_stmt pos:start="241:17" pos:end="241:27"><expr pos:start="241:17" pos:end="241:26"><call pos:start="241:17" pos:end="241:26"><name pos:start="241:17" pos:end="241:24">SB16_run</name><argument_list pos:start="241:25" pos:end="241:26">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            

            <comment type="block" pos:start="247:13" pos:end="247:43">/* run dma transfers, if any */</comment>

            <expr_stmt pos:start="249:13" pos:end="249:22"><expr pos:start="249:13" pos:end="249:21"><call pos:start="249:13" pos:end="249:21"><name pos:start="249:13" pos:end="249:19">DMA_run</name><argument_list pos:start="249:20" pos:end="249:21">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="255:9" pos:end="255:30">/* real time timers */</comment>

        <expr_stmt pos:start="257:9" pos:end="259:50"><expr pos:start="257:9" pos:end="259:49"><call pos:start="257:9" pos:end="259:49"><name pos:start="257:9" pos:end="257:23">qemu_run_timers</name><argument_list pos:start="257:24" pos:end="259:49">(<argument pos:start="257:25" pos:end="257:59"><expr pos:start="257:25" pos:end="257:59"><operator pos:start="257:25" pos:end="257:25">&amp;</operator><name pos:start="257:26" pos:end="257:59"><name pos:start="257:26" pos:end="257:38">active_timers</name><index pos:start="257:39" pos:end="257:59">[<expr pos:start="257:40" pos:end="257:58"><name pos:start="257:40" pos:end="257:58">QEMU_TIMER_REALTIME</name></expr>]</index></name></expr></argument>, 

                        <argument pos:start="259:25" pos:end="259:48"><expr pos:start="259:25" pos:end="259:48"><call pos:start="259:25" pos:end="259:48"><name pos:start="259:25" pos:end="259:38">qemu_get_clock</name><argument_list pos:start="259:39" pos:end="259:48">(<argument pos:start="259:40" pos:end="259:47"><expr pos:start="259:40" pos:end="259:47"><name pos:start="259:40" pos:end="259:47">rt_clock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="263:5" pos:end="263:24"><expr pos:start="263:5" pos:end="263:23"><call pos:start="263:5" pos:end="263:23"><name pos:start="263:5" pos:end="263:21">cpu_disable_ticks</name><argument_list pos:start="263:22" pos:end="263:23">()</argument_list></call></expr>;</expr_stmt>

    <return pos:start="265:5" pos:end="265:15">return <expr pos:start="265:12" pos:end="265:14"><name pos:start="265:12" pos:end="265:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
