<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4077.c" pos:tabs="8"><function pos:start="1:1" pos:end="169:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:34">serial_ioport_read</name><parameter_list pos:start="1:35" pos:end="1:76">(<parameter pos:start="1:36" pos:end="1:47"><decl pos:start="1:36" pos:end="1:47"><type pos:start="1:36" pos:end="1:47"><name pos:start="1:36" pos:end="1:39">void</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:47">opaque</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:60"><decl pos:start="1:50" pos:end="1:60"><type pos:start="1:50" pos:end="1:60"><name pos:start="1:50" pos:end="1:55">hwaddr</name></type> <name pos:start="1:57" pos:end="1:60">addr</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:75"><decl pos:start="1:63" pos:end="1:75"><type pos:start="1:63" pos:end="1:75"><name pos:start="1:63" pos:end="1:70">unsigned</name></type> <name pos:start="1:72" pos:end="1:75">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="169:1">{<block_content pos:start="5:5" pos:end="167:15">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">SerialState</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">s</name> <init pos:start="5:20" pos:end="5:27">= <expr pos:start="5:22" pos:end="5:27"><name pos:start="5:22" pos:end="5:27">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:16">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:14"><expr pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:8">addr</name> <operator pos:start="11:10" pos:end="11:11">&amp;=</operator> <literal type="number" pos:start="11:13" pos:end="11:13">7</literal></expr>;</expr_stmt>

    <switch pos:start="13:5" pos:end="163:5">switch<condition pos:start="13:11" pos:end="13:16">(<expr pos:start="13:12" pos:end="13:15"><name pos:start="13:12" pos:end="13:15">addr</name></expr>)</condition> <block pos:start="13:18" pos:end="163:5">{<block_content pos:start="15:5" pos:end="161:14">

    <default pos:start="15:5" pos:end="15:12">default:</default>

    <case pos:start="17:5" pos:end="17:11">case <expr pos:start="17:10" pos:end="17:10"><literal type="number" pos:start="17:10" pos:end="17:10">0</literal></expr>:</case>

        <if_stmt pos:start="19:9" pos:end="61:9"><if pos:start="19:9" pos:end="23:9">if <condition pos:start="19:12" pos:end="19:35">(<expr pos:start="19:13" pos:end="19:34"><name pos:start="19:13" pos:end="19:18"><name pos:start="19:13" pos:end="19:13">s</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:18">lcr</name></name> <operator pos:start="19:20" pos:end="19:20">&amp;</operator> <name pos:start="19:22" pos:end="19:34">UART_LCR_DLAB</name></expr>)</condition> <block pos:start="19:37" pos:end="23:9">{<block_content pos:start="21:13" pos:end="21:36">

            <expr_stmt pos:start="21:13" pos:end="21:36"><expr pos:start="21:13" pos:end="21:35"><name pos:start="21:13" pos:end="21:15">ret</name> <operator pos:start="21:17" pos:end="21:17">=</operator> <name pos:start="21:19" pos:end="21:28"><name pos:start="21:19" pos:end="21:19">s</name><operator pos:start="21:20" pos:end="21:21">-&gt;</operator><name pos:start="21:22" pos:end="21:28">divider</name></name> <operator pos:start="21:30" pos:end="21:30">&amp;</operator> <literal type="number" pos:start="21:32" pos:end="21:35">0xff</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="23:11" pos:end="61:9">else <block pos:start="23:16" pos:end="61:9">{<block_content pos:start="25:13" pos:end="59:13">

            <if_stmt pos:start="25:13" pos:end="49:13"><if pos:start="25:13" pos:end="43:13">if<condition pos:start="25:15" pos:end="25:36">(<expr pos:start="25:16" pos:end="25:35"><name pos:start="25:16" pos:end="25:21"><name pos:start="25:16" pos:end="25:16">s</name><operator pos:start="25:17" pos:end="25:18">-&gt;</operator><name pos:start="25:19" pos:end="25:21">fcr</name></name> <operator pos:start="25:23" pos:end="25:23">&amp;</operator> <name pos:start="25:25" pos:end="25:35">UART_FCR_FE</name></expr>)</condition> <block pos:start="25:38" pos:end="43:13">{<block_content pos:start="27:17" pos:end="41:40">

                <expr_stmt pos:start="27:17" pos:end="29:57"><expr pos:start="27:17" pos:end="29:56"><name pos:start="27:17" pos:end="27:19">ret</name> <operator pos:start="27:21" pos:end="27:21">=</operator> <ternary pos:start="27:23" pos:end="29:56"><condition pos:start="27:23" pos:end="27:52"><expr pos:start="27:23" pos:end="27:50"><call pos:start="27:23" pos:end="27:50"><name pos:start="27:23" pos:end="27:35">fifo8_is_full</name><argument_list pos:start="27:36" pos:end="27:50">(<argument pos:start="27:37" pos:end="27:49"><expr pos:start="27:37" pos:end="27:49"><operator pos:start="27:37" pos:end="27:37">&amp;</operator><name pos:start="27:38" pos:end="27:49"><name pos:start="27:38" pos:end="27:38">s</name><operator pos:start="27:39" pos:end="27:40">-&gt;</operator><name pos:start="27:41" pos:end="27:49">recv_fifo</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="29:29" pos:end="29:29">

                            <expr pos:start="29:29" pos:end="29:29"><literal type="number" pos:start="29:29" pos:end="29:29">0</literal></expr> </then><else pos:start="29:31" pos:end="29:56">: <expr pos:start="29:33" pos:end="29:56"><call pos:start="29:33" pos:end="29:56"><name pos:start="29:33" pos:end="29:41">fifo8_pop</name><argument_list pos:start="29:42" pos:end="29:56">(<argument pos:start="29:43" pos:end="29:55"><expr pos:start="29:43" pos:end="29:55"><operator pos:start="29:43" pos:end="29:43">&amp;</operator><name pos:start="29:44" pos:end="29:55"><name pos:start="29:44" pos:end="29:44">s</name><operator pos:start="29:45" pos:end="29:46">-&gt;</operator><name pos:start="29:47" pos:end="29:55">recv_fifo</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

                <if_stmt pos:start="31:17" pos:end="39:17"><if pos:start="31:17" pos:end="35:17">if <condition pos:start="31:20" pos:end="31:42">(<expr pos:start="31:21" pos:end="31:41"><name pos:start="31:21" pos:end="31:36"><name pos:start="31:21" pos:end="31:21">s</name><operator pos:start="31:22" pos:end="31:23">-&gt;</operator><name pos:start="31:24" pos:end="31:32">recv_fifo</name><operator pos:start="31:33" pos:end="31:33">.</operator><name pos:start="31:34" pos:end="31:36">num</name></name> <operator pos:start="31:38" pos:end="31:39">==</operator> <literal type="number" pos:start="31:41" pos:end="31:41">0</literal></expr>)</condition> <block pos:start="31:44" pos:end="35:17">{<block_content pos:start="33:21" pos:end="33:59">

                    <expr_stmt pos:start="33:21" pos:end="33:59"><expr pos:start="33:21" pos:end="33:58"><name pos:start="33:21" pos:end="33:26"><name pos:start="33:21" pos:end="33:21">s</name><operator pos:start="33:22" pos:end="33:23">-&gt;</operator><name pos:start="33:24" pos:end="33:26">lsr</name></name> <operator pos:start="33:28" pos:end="33:29">&amp;=</operator> <operator pos:start="33:31" pos:end="33:31">~</operator><operator pos:start="33:32" pos:end="33:32">(</operator><name pos:start="33:33" pos:end="33:43">UART_LSR_DR</name> <operator pos:start="33:45" pos:end="33:45">|</operator> <name pos:start="33:47" pos:end="33:57">UART_LSR_BI</name><operator pos:start="33:58" pos:end="33:58">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="35:19" pos:end="39:17">else <block pos:start="35:24" pos:end="39:17">{<block_content pos:start="37:21" pos:end="37:116">

                    <expr_stmt pos:start="37:21" pos:end="37:116"><expr pos:start="37:21" pos:end="37:115"><call pos:start="37:21" pos:end="37:115"><name pos:start="37:21" pos:end="37:34">qemu_mod_timer</name><argument_list pos:start="37:35" pos:end="37:115">(<argument pos:start="37:36" pos:end="37:56"><expr pos:start="37:36" pos:end="37:56"><name pos:start="37:36" pos:end="37:56"><name pos:start="37:36" pos:end="37:36">s</name><operator pos:start="37:37" pos:end="37:38">-&gt;</operator><name pos:start="37:39" pos:end="37:56">fifo_timeout_timer</name></name></expr></argument>, <argument pos:start="37:59" pos:end="37:114"><expr pos:start="37:59" pos:end="37:114"><call pos:start="37:59" pos:end="37:86"><name pos:start="37:59" pos:end="37:75">qemu_get_clock_ns</name> <argument_list pos:start="37:77" pos:end="37:86">(<argument pos:start="37:78" pos:end="37:85"><expr pos:start="37:78" pos:end="37:85"><name pos:start="37:78" pos:end="37:85">vm_clock</name></expr></argument>)</argument_list></call> <operator pos:start="37:88" pos:end="37:88">+</operator> <name pos:start="37:90" pos:end="37:110"><name pos:start="37:90" pos:end="37:90">s</name><operator pos:start="37:91" pos:end="37:92">-&gt;</operator><name pos:start="37:93" pos:end="37:110">char_transmit_time</name></name> <operator pos:start="37:112" pos:end="37:112">*</operator> <literal type="number" pos:start="37:114" pos:end="37:114">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="41:17" pos:end="41:40"><expr pos:start="41:17" pos:end="41:39"><name pos:start="41:17" pos:end="41:35"><name pos:start="41:17" pos:end="41:17">s</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:35">timeout_ipending</name></name> <operator pos:start="41:37" pos:end="41:37">=</operator> <literal type="number" pos:start="41:39" pos:end="41:39">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="43:15" pos:end="49:13">else <block pos:start="43:20" pos:end="49:13">{<block_content pos:start="45:17" pos:end="47:55">

                <expr_stmt pos:start="45:17" pos:end="45:29"><expr pos:start="45:17" pos:end="45:28"><name pos:start="45:17" pos:end="45:19">ret</name> <operator pos:start="45:21" pos:end="45:21">=</operator> <name pos:start="45:23" pos:end="45:28"><name pos:start="45:23" pos:end="45:23">s</name><operator pos:start="45:24" pos:end="45:25">-&gt;</operator><name pos:start="45:26" pos:end="45:28">rbr</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="47:17" pos:end="47:55"><expr pos:start="47:17" pos:end="47:54"><name pos:start="47:17" pos:end="47:22"><name pos:start="47:17" pos:end="47:17">s</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:22">lsr</name></name> <operator pos:start="47:24" pos:end="47:25">&amp;=</operator> <operator pos:start="47:27" pos:end="47:27">~</operator><operator pos:start="47:28" pos:end="47:28">(</operator><name pos:start="47:29" pos:end="47:39">UART_LSR_DR</name> <operator pos:start="47:41" pos:end="47:41">|</operator> <name pos:start="47:43" pos:end="47:53">UART_LSR_BI</name><operator pos:start="47:54" pos:end="47:54">)</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:33"><expr pos:start="51:13" pos:end="51:32"><call pos:start="51:13" pos:end="51:32"><name pos:start="51:13" pos:end="51:29">serial_update_irq</name><argument_list pos:start="51:30" pos:end="51:32">(<argument pos:start="51:31" pos:end="51:31"><expr pos:start="51:31" pos:end="51:31"><name pos:start="51:31" pos:end="51:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="53:13" pos:end="59:13"><if pos:start="53:13" pos:end="59:13">if <condition pos:start="53:16" pos:end="53:42">(<expr pos:start="53:17" pos:end="53:41"><operator pos:start="53:17" pos:end="53:17">!</operator><operator pos:start="53:18" pos:end="53:18">(</operator><name pos:start="53:19" pos:end="53:24"><name pos:start="53:19" pos:end="53:19">s</name><operator pos:start="53:20" pos:end="53:21">-&gt;</operator><name pos:start="53:22" pos:end="53:24">mcr</name></name> <operator pos:start="53:26" pos:end="53:26">&amp;</operator> <name pos:start="53:28" pos:end="53:40">UART_MCR_LOOP</name><operator pos:start="53:41" pos:end="53:41">)</operator></expr>)</condition> <block pos:start="53:44" pos:end="59:13">{<block_content pos:start="57:17" pos:end="57:46">

                <comment type="block" pos:start="55:17" pos:end="55:62">/* in loopback mode, don't receive any data */</comment>

                <expr_stmt pos:start="57:17" pos:end="57:46"><expr pos:start="57:17" pos:end="57:45"><call pos:start="57:17" pos:end="57:45"><name pos:start="57:17" pos:end="57:37">qemu_chr_accept_input</name><argument_list pos:start="57:38" pos:end="57:45">(<argument pos:start="57:39" pos:end="57:44"><expr pos:start="57:39" pos:end="57:44"><name pos:start="57:39" pos:end="57:44"><name pos:start="57:39" pos:end="57:39">s</name><operator pos:start="57:40" pos:end="57:41">-&gt;</operator><name pos:start="57:42" pos:end="57:44">chr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="63:9" pos:end="63:14">break;</break>

    <case pos:start="65:5" pos:end="65:11">case <expr pos:start="65:10" pos:end="65:10"><literal type="number" pos:start="65:10" pos:end="65:10">1</literal></expr>:</case>

        <if_stmt pos:start="67:9" pos:end="75:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:35">(<expr pos:start="67:13" pos:end="67:34"><name pos:start="67:13" pos:end="67:18"><name pos:start="67:13" pos:end="67:13">s</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:18">lcr</name></name> <operator pos:start="67:20" pos:end="67:20">&amp;</operator> <name pos:start="67:22" pos:end="67:34">UART_LCR_DLAB</name></expr>)</condition> <block pos:start="67:37" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:43">

            <expr_stmt pos:start="69:13" pos:end="69:43"><expr pos:start="69:13" pos:end="69:42"><name pos:start="69:13" pos:end="69:15">ret</name> <operator pos:start="69:17" pos:end="69:17">=</operator> <operator pos:start="69:19" pos:end="69:19">(</operator><name pos:start="69:20" pos:end="69:29"><name pos:start="69:20" pos:end="69:20">s</name><operator pos:start="69:21" pos:end="69:22">-&gt;</operator><name pos:start="69:23" pos:end="69:29">divider</name></name> <operator pos:start="69:31" pos:end="69:32">&gt;&gt;</operator> <literal type="number" pos:start="69:34" pos:end="69:34">8</literal><operator pos:start="69:35" pos:end="69:35">)</operator> <operator pos:start="69:37" pos:end="69:37">&amp;</operator> <literal type="number" pos:start="69:39" pos:end="69:42">0xff</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="71:11" pos:end="75:9">else <block pos:start="71:16" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:25">

            <expr_stmt pos:start="73:13" pos:end="73:25"><expr pos:start="73:13" pos:end="73:24"><name pos:start="73:13" pos:end="73:15">ret</name> <operator pos:start="73:17" pos:end="73:17">=</operator> <name pos:start="73:19" pos:end="73:24"><name pos:start="73:19" pos:end="73:19">s</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:24">ier</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <case pos:start="79:5" pos:end="79:11">case <expr pos:start="79:10" pos:end="79:10"><literal type="number" pos:start="79:10" pos:end="79:10">2</literal></expr>:</case>

        <expr_stmt pos:start="81:9" pos:end="81:21"><expr pos:start="81:9" pos:end="81:20"><name pos:start="81:9" pos:end="81:11">ret</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <name pos:start="81:15" pos:end="81:20"><name pos:start="81:15" pos:end="81:15">s</name><operator pos:start="81:16" pos:end="81:17">-&gt;</operator><name pos:start="81:18" pos:end="81:20">iir</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="89:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="83:49">(<expr pos:start="83:13" pos:end="83:48"><operator pos:start="83:13" pos:end="83:13">(</operator><name pos:start="83:14" pos:end="83:16">ret</name> <operator pos:start="83:18" pos:end="83:18">&amp;</operator> <name pos:start="83:20" pos:end="83:30">UART_IIR_ID</name><operator pos:start="83:31" pos:end="83:31">)</operator> <operator pos:start="83:33" pos:end="83:34">==</operator> <name pos:start="83:36" pos:end="83:48">UART_IIR_THRI</name></expr>)</condition> <block pos:start="83:51" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:33">

            <expr_stmt pos:start="85:13" pos:end="85:32"><expr pos:start="85:13" pos:end="85:31"><name pos:start="85:13" pos:end="85:27"><name pos:start="85:13" pos:end="85:13">s</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:27">thr_ipending</name></name> <operator pos:start="85:29" pos:end="85:29">=</operator> <literal type="number" pos:start="85:31" pos:end="85:31">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:33"><expr pos:start="87:13" pos:end="87:32"><call pos:start="87:13" pos:end="87:32"><name pos:start="87:13" pos:end="87:29">serial_update_irq</name><argument_list pos:start="87:30" pos:end="87:32">(<argument pos:start="87:31" pos:end="87:31"><expr pos:start="87:31" pos:end="87:31"><name pos:start="87:31" pos:end="87:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>

    <case pos:start="93:5" pos:end="93:11">case <expr pos:start="93:10" pos:end="93:10"><literal type="number" pos:start="93:10" pos:end="93:10">3</literal></expr>:</case>

        <expr_stmt pos:start="95:9" pos:end="95:21"><expr pos:start="95:9" pos:end="95:20"><name pos:start="95:9" pos:end="95:11">ret</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <name pos:start="95:15" pos:end="95:20"><name pos:start="95:15" pos:end="95:15">s</name><operator pos:start="95:16" pos:end="95:17">-&gt;</operator><name pos:start="95:18" pos:end="95:20">lcr</name></name></expr>;</expr_stmt>

        <break pos:start="97:9" pos:end="97:14">break;</break>

    <case pos:start="99:5" pos:end="99:11">case <expr pos:start="99:10" pos:end="99:10"><literal type="number" pos:start="99:10" pos:end="99:10">4</literal></expr>:</case>

        <expr_stmt pos:start="101:9" pos:end="101:21"><expr pos:start="101:9" pos:end="101:20"><name pos:start="101:9" pos:end="101:11">ret</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <name pos:start="101:15" pos:end="101:20"><name pos:start="101:15" pos:end="101:15">s</name><operator pos:start="101:16" pos:end="101:17">-&gt;</operator><name pos:start="101:18" pos:end="101:20">mcr</name></name></expr>;</expr_stmt>

        <break pos:start="103:9" pos:end="103:14">break;</break>

    <case pos:start="105:5" pos:end="105:11">case <expr pos:start="105:10" pos:end="105:10"><literal type="number" pos:start="105:10" pos:end="105:10">5</literal></expr>:</case>

        <expr_stmt pos:start="107:9" pos:end="107:21"><expr pos:start="107:9" pos:end="107:20"><name pos:start="107:9" pos:end="107:11">ret</name> <operator pos:start="107:13" pos:end="107:13">=</operator> <name pos:start="107:15" pos:end="107:20"><name pos:start="107:15" pos:end="107:15">s</name><operator pos:start="107:16" pos:end="107:17">-&gt;</operator><name pos:start="107:18" pos:end="107:20">lsr</name></name></expr>;</expr_stmt>

        <comment type="block" pos:start="109:9" pos:end="109:48">/* Clear break and overrun interrupts */</comment>

        <if_stmt pos:start="111:9" pos:end="117:9"><if pos:start="111:9" pos:end="117:9">if <condition pos:start="111:12" pos:end="111:47">(<expr pos:start="111:13" pos:end="111:46"><name pos:start="111:13" pos:end="111:18"><name pos:start="111:13" pos:end="111:13">s</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:18">lsr</name></name> <operator pos:start="111:20" pos:end="111:20">&amp;</operator> <operator pos:start="111:22" pos:end="111:22">(</operator><name pos:start="111:23" pos:end="111:33">UART_LSR_BI</name><operator pos:start="111:34" pos:end="111:34">|</operator><name pos:start="111:35" pos:end="111:45">UART_LSR_OE</name><operator pos:start="111:46" pos:end="111:46">)</operator></expr>)</condition> <block pos:start="111:49" pos:end="117:9">{<block_content pos:start="113:13" pos:end="115:33">

            <expr_stmt pos:start="113:13" pos:end="113:49"><expr pos:start="113:13" pos:end="113:48"><name pos:start="113:13" pos:end="113:18"><name pos:start="113:13" pos:end="113:13">s</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:18">lsr</name></name> <operator pos:start="113:20" pos:end="113:21">&amp;=</operator> <operator pos:start="113:23" pos:end="113:23">~</operator><operator pos:start="113:24" pos:end="113:24">(</operator><name pos:start="113:25" pos:end="113:35">UART_LSR_BI</name><operator pos:start="113:36" pos:end="113:36">|</operator><name pos:start="113:37" pos:end="113:47">UART_LSR_OE</name><operator pos:start="113:48" pos:end="113:48">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:33"><expr pos:start="115:13" pos:end="115:32"><call pos:start="115:13" pos:end="115:32"><name pos:start="115:13" pos:end="115:29">serial_update_irq</name><argument_list pos:start="115:30" pos:end="115:32">(<argument pos:start="115:31" pos:end="115:31"><expr pos:start="115:31" pos:end="115:31"><name pos:start="115:31" pos:end="115:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="119:9" pos:end="119:14">break;</break>

    <case pos:start="121:5" pos:end="121:11">case <expr pos:start="121:10" pos:end="121:10"><literal type="number" pos:start="121:10" pos:end="121:10">6</literal></expr>:</case>

        <if_stmt pos:start="123:9" pos:end="153:9"><if pos:start="123:9" pos:end="135:9">if <condition pos:start="123:12" pos:end="123:35">(<expr pos:start="123:13" pos:end="123:34"><name pos:start="123:13" pos:end="123:18"><name pos:start="123:13" pos:end="123:13">s</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:18">mcr</name></name> <operator pos:start="123:20" pos:end="123:20">&amp;</operator> <name pos:start="123:22" pos:end="123:34">UART_MCR_LOOP</name></expr>)</condition> <block pos:start="123:37" pos:end="135:9">{<block_content pos:start="129:13" pos:end="133:40">

            <comment type="block" pos:start="125:13" pos:end="127:24">/* in loopback, the modem output pins are connected to the

               inputs */</comment>

            <expr_stmt pos:start="129:13" pos:end="129:39"><expr pos:start="129:13" pos:end="129:38"><name pos:start="129:13" pos:end="129:15">ret</name> <operator pos:start="129:17" pos:end="129:17">=</operator> <operator pos:start="129:19" pos:end="129:19">(</operator><name pos:start="129:20" pos:end="129:25"><name pos:start="129:20" pos:end="129:20">s</name><operator pos:start="129:21" pos:end="129:22">-&gt;</operator><name pos:start="129:23" pos:end="129:25">mcr</name></name> <operator pos:start="129:27" pos:end="129:27">&amp;</operator> <literal type="number" pos:start="129:29" pos:end="129:32">0x0c</literal><operator pos:start="129:33" pos:end="129:33">)</operator> <operator pos:start="129:35" pos:end="129:36">&lt;&lt;</operator> <literal type="number" pos:start="129:38" pos:end="129:38">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:40"><expr pos:start="131:13" pos:end="131:39"><name pos:start="131:13" pos:end="131:15">ret</name> <operator pos:start="131:17" pos:end="131:18">|=</operator> <operator pos:start="131:20" pos:end="131:20">(</operator><name pos:start="131:21" pos:end="131:26"><name pos:start="131:21" pos:end="131:21">s</name><operator pos:start="131:22" pos:end="131:23">-&gt;</operator><name pos:start="131:24" pos:end="131:26">mcr</name></name> <operator pos:start="131:28" pos:end="131:28">&amp;</operator> <literal type="number" pos:start="131:30" pos:end="131:33">0x02</literal><operator pos:start="131:34" pos:end="131:34">)</operator> <operator pos:start="131:36" pos:end="131:37">&lt;&lt;</operator> <literal type="number" pos:start="131:39" pos:end="131:39">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:40"><expr pos:start="133:13" pos:end="133:39"><name pos:start="133:13" pos:end="133:15">ret</name> <operator pos:start="133:17" pos:end="133:18">|=</operator> <operator pos:start="133:20" pos:end="133:20">(</operator><name pos:start="133:21" pos:end="133:26"><name pos:start="133:21" pos:end="133:21">s</name><operator pos:start="133:22" pos:end="133:23">-&gt;</operator><name pos:start="133:24" pos:end="133:26">mcr</name></name> <operator pos:start="133:28" pos:end="133:28">&amp;</operator> <literal type="number" pos:start="133:30" pos:end="133:33">0x01</literal><operator pos:start="133:34" pos:end="133:34">)</operator> <operator pos:start="133:36" pos:end="133:37">&lt;&lt;</operator> <literal type="number" pos:start="133:39" pos:end="133:39">5</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="135:11" pos:end="153:9">else <block pos:start="135:16" pos:end="153:9">{<block_content pos:start="137:13" pos:end="151:13">

            <if_stmt pos:start="137:13" pos:end="139:37"><if pos:start="137:13" pos:end="139:37">if <condition pos:start="137:16" pos:end="137:33">(<expr pos:start="137:17" pos:end="137:32"><name pos:start="137:17" pos:end="137:27"><name pos:start="137:17" pos:end="137:17">s</name><operator pos:start="137:18" pos:end="137:19">-&gt;</operator><name pos:start="137:20" pos:end="137:27">poll_msl</name></name> <operator pos:start="137:29" pos:end="137:30">&gt;=</operator> <literal type="number" pos:start="137:32" pos:end="137:32">0</literal></expr>)</condition><block type="pseudo" pos:start="139:17" pos:end="139:37"><block_content pos:start="139:17" pos:end="139:37">

                <expr_stmt pos:start="139:17" pos:end="139:37"><expr pos:start="139:17" pos:end="139:36"><call pos:start="139:17" pos:end="139:36"><name pos:start="139:17" pos:end="139:33">serial_update_msl</name><argument_list pos:start="139:34" pos:end="139:36">(<argument pos:start="139:35" pos:end="139:35"><expr pos:start="139:35" pos:end="139:35"><name pos:start="139:35" pos:end="139:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:25"><expr pos:start="141:13" pos:end="141:24"><name pos:start="141:13" pos:end="141:15">ret</name> <operator pos:start="141:17" pos:end="141:17">=</operator> <name pos:start="141:19" pos:end="141:24"><name pos:start="141:19" pos:end="141:19">s</name><operator pos:start="141:20" pos:end="141:21">-&gt;</operator><name pos:start="141:22" pos:end="141:24">msr</name></name></expr>;</expr_stmt>

            <comment type="block" pos:start="143:13" pos:end="143:73">/* Clear delta bits &amp; msr int after read, if they were set */</comment>

            <if_stmt pos:start="145:13" pos:end="151:13"><if pos:start="145:13" pos:end="151:13">if <condition pos:start="145:16" pos:end="145:44">(<expr pos:start="145:17" pos:end="145:43"><name pos:start="145:17" pos:end="145:22"><name pos:start="145:17" pos:end="145:17">s</name><operator pos:start="145:18" pos:end="145:19">-&gt;</operator><name pos:start="145:20" pos:end="145:22">msr</name></name> <operator pos:start="145:24" pos:end="145:24">&amp;</operator> <name pos:start="145:26" pos:end="145:43">UART_MSR_ANY_DELTA</name></expr>)</condition> <block pos:start="145:46" pos:end="151:13">{<block_content pos:start="147:17" pos:end="149:37">

                <expr_stmt pos:start="147:17" pos:end="147:31"><expr pos:start="147:17" pos:end="147:30"><name pos:start="147:17" pos:end="147:22"><name pos:start="147:17" pos:end="147:17">s</name><operator pos:start="147:18" pos:end="147:19">-&gt;</operator><name pos:start="147:20" pos:end="147:22">msr</name></name> <operator pos:start="147:24" pos:end="147:25">&amp;=</operator> <literal type="number" pos:start="147:27" pos:end="147:30">0xF0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="149:17" pos:end="149:37"><expr pos:start="149:17" pos:end="149:36"><call pos:start="149:17" pos:end="149:36"><name pos:start="149:17" pos:end="149:33">serial_update_irq</name><argument_list pos:start="149:34" pos:end="149:36">(<argument pos:start="149:35" pos:end="149:35"><expr pos:start="149:35" pos:end="149:35"><name pos:start="149:35" pos:end="149:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="155:9" pos:end="155:14">break;</break>

    <case pos:start="157:5" pos:end="157:11">case <expr pos:start="157:10" pos:end="157:10"><literal type="number" pos:start="157:10" pos:end="157:10">7</literal></expr>:</case>

        <expr_stmt pos:start="159:9" pos:end="159:21"><expr pos:start="159:9" pos:end="159:20"><name pos:start="159:9" pos:end="159:11">ret</name> <operator pos:start="159:13" pos:end="159:13">=</operator> <name pos:start="159:15" pos:end="159:20"><name pos:start="159:15" pos:end="159:15">s</name><operator pos:start="159:16" pos:end="159:17">-&gt;</operator><name pos:start="159:18" pos:end="159:20">scr</name></name></expr>;</expr_stmt>

        <break pos:start="161:9" pos:end="161:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="165:5" pos:end="165:68"><expr pos:start="165:5" pos:end="165:67"><call pos:start="165:5" pos:end="165:67"><name pos:start="165:5" pos:end="165:11">DPRINTF</name><argument_list pos:start="165:12" pos:end="165:67">(<argument pos:start="165:13" pos:end="165:55"><expr pos:start="165:13" pos:end="165:55"><literal type="string" pos:start="165:13" pos:end="165:27">"read addr=0x%"</literal> <name pos:start="165:29" pos:end="165:39">HWADDR_PRIx</name> <literal type="string" pos:start="165:41" pos:end="165:55">" val=0x%02x\n"</literal></expr></argument>, <argument pos:start="165:58" pos:end="165:61"><expr pos:start="165:58" pos:end="165:61"><name pos:start="165:58" pos:end="165:61">addr</name></expr></argument>, <argument pos:start="165:64" pos:end="165:66"><expr pos:start="165:64" pos:end="165:66"><name pos:start="165:64" pos:end="165:66">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="167:5" pos:end="167:15">return <expr pos:start="167:12" pos:end="167:14"><name pos:start="167:12" pos:end="167:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
