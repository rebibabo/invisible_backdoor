<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12736.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:73"><name pos:start="1:1" pos:end="1:10">build_spcr</name><argument_list pos:start="1:11" pos:end="1:73">(<argument pos:start="1:12" pos:end="1:29">GArray *table_data</argument>, <argument pos:start="1:32" pos:end="1:45">GArray *linker</argument>, <argument pos:start="1:48" pos:end="1:72">VirtGuestInfo *guest_info</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="61:1">{<block_content pos:start="5:5" pos:end="59:23">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:38"><name pos:start="5:5" pos:end="5:36">AcpiSerialPortConsoleRedirection</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:42">spcr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:68"><decl pos:start="7:5" pos:end="7:67"><type pos:start="7:5" pos:end="7:23"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:21">MemMapEntry</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:34">uart_memmap</name> <init pos:start="7:36" pos:end="7:67">= <expr pos:start="7:38" pos:end="7:67"><operator pos:start="7:38" pos:end="7:38">&amp;</operator><name pos:start="7:39" pos:end="7:67"><name pos:start="7:39" pos:end="7:48">guest_info</name><operator pos:start="7:49" pos:end="7:50">-&gt;</operator><name pos:start="7:51" pos:end="7:56">memmap</name><index pos:start="7:57" pos:end="7:67">[<expr pos:start="7:58" pos:end="7:66"><name pos:start="7:58" pos:end="7:66">VIRT_UART</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:59"><decl pos:start="9:5" pos:end="9:58"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">irq</name> <init pos:start="9:13" pos:end="9:58">= <expr pos:start="9:15" pos:end="9:58"><name pos:start="9:15" pos:end="9:43"><name pos:start="9:15" pos:end="9:24">guest_info</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:32">irqmap</name><index pos:start="9:33" pos:end="9:43">[<expr pos:start="9:34" pos:end="9:42"><name pos:start="9:34" pos:end="9:42">VIRT_UART</name></expr>]</index></name> <operator pos:start="9:45" pos:end="9:45">+</operator> <name pos:start="9:47" pos:end="9:58">ARM_SPI_BASE</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:53"><expr pos:start="13:5" pos:end="13:52"><name pos:start="13:5" pos:end="13:8">spcr</name> <operator pos:start="13:10" pos:end="13:10">=</operator> <call pos:start="13:12" pos:end="13:52"><name pos:start="13:12" pos:end="13:25">acpi_data_push</name><argument_list pos:start="13:26" pos:end="13:52">(<argument pos:start="13:27" pos:end="13:36"><expr pos:start="13:27" pos:end="13:36"><name pos:start="13:27" pos:end="13:36">table_data</name></expr></argument>, <argument pos:start="13:39" pos:end="13:51"><expr pos:start="13:39" pos:end="13:51"><sizeof pos:start="13:39" pos:end="13:51">sizeof<argument_list pos:start="13:45" pos:end="13:51">(<argument pos:start="13:46" pos:end="13:50"><expr pos:start="13:46" pos:end="13:50"><operator pos:start="13:46" pos:end="13:46">*</operator><name pos:start="13:47" pos:end="13:50">spcr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:31"><expr pos:start="17:5" pos:end="17:30"><name pos:start="17:5" pos:end="17:24"><name pos:start="17:5" pos:end="17:8">spcr</name><operator pos:start="17:9" pos:end="17:10">-&gt;</operator><name pos:start="17:11" pos:end="17:24">interface_type</name></name> <operator pos:start="17:26" pos:end="17:26">=</operator> <literal type="number" pos:start="17:28" pos:end="17:30">0x3</literal></expr>;</expr_stmt>    <comment type="block" pos:start="17:36" pos:end="17:55">/* ARM PL011 UART */</comment>



    <expr_stmt pos:start="21:5" pos:end="21:52"><expr pos:start="21:5" pos:end="21:51"><name pos:start="21:5" pos:end="21:31"><name pos:start="21:5" pos:end="21:8">spcr</name><operator pos:start="21:9" pos:end="21:10">-&gt;</operator><name pos:start="21:11" pos:end="21:22">base_address</name><operator pos:start="21:23" pos:end="21:23">.</operator><name pos:start="21:24" pos:end="21:31">space_id</name></name> <operator pos:start="21:33" pos:end="21:33">=</operator> <name pos:start="21:35" pos:end="21:51">AML_SYSTEM_MEMORY</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:37"><expr pos:start="23:5" pos:end="23:36"><name pos:start="23:5" pos:end="23:32"><name pos:start="23:5" pos:end="23:8">spcr</name><operator pos:start="23:9" pos:end="23:10">-&gt;</operator><name pos:start="23:11" pos:end="23:22">base_address</name><operator pos:start="23:23" pos:end="23:23">.</operator><name pos:start="23:24" pos:end="23:32">bit_width</name></name> <operator pos:start="23:34" pos:end="23:34">=</operator> <literal type="number" pos:start="23:36" pos:end="23:36">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:38"><expr pos:start="25:5" pos:end="25:37"><name pos:start="25:5" pos:end="25:33"><name pos:start="25:5" pos:end="25:8">spcr</name><operator pos:start="25:9" pos:end="25:10">-&gt;</operator><name pos:start="25:11" pos:end="25:22">base_address</name><operator pos:start="25:23" pos:end="25:23">.</operator><name pos:start="25:24" pos:end="25:33">bit_offset</name></name> <operator pos:start="25:35" pos:end="25:35">=</operator> <literal type="number" pos:start="25:37" pos:end="25:37">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:40"><expr pos:start="27:5" pos:end="27:39"><name pos:start="27:5" pos:end="27:35"><name pos:start="27:5" pos:end="27:8">spcr</name><operator pos:start="27:9" pos:end="27:10">-&gt;</operator><name pos:start="27:11" pos:end="27:22">base_address</name><operator pos:start="27:23" pos:end="27:23">.</operator><name pos:start="27:24" pos:end="27:35">access_width</name></name> <operator pos:start="27:37" pos:end="27:37">=</operator> <literal type="number" pos:start="27:39" pos:end="27:39">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:64"><expr pos:start="29:5" pos:end="29:63"><name pos:start="29:5" pos:end="29:30"><name pos:start="29:5" pos:end="29:8">spcr</name><operator pos:start="29:9" pos:end="29:10">-&gt;</operator><name pos:start="29:11" pos:end="29:22">base_address</name><operator pos:start="29:23" pos:end="29:23">.</operator><name pos:start="29:24" pos:end="29:30">address</name></name> <operator pos:start="29:32" pos:end="29:32">=</operator> <call pos:start="29:34" pos:end="29:63"><name pos:start="29:34" pos:end="29:44">cpu_to_le64</name><argument_list pos:start="29:45" pos:end="29:63">(<argument pos:start="29:46" pos:end="29:62"><expr pos:start="29:46" pos:end="29:62"><name pos:start="29:46" pos:end="29:62"><name pos:start="29:46" pos:end="29:56">uart_memmap</name><operator pos:start="29:57" pos:end="29:58">-&gt;</operator><name pos:start="29:59" pos:end="29:62">base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:37"><expr pos:start="33:5" pos:end="33:36"><name pos:start="33:5" pos:end="33:25"><name pos:start="33:5" pos:end="33:8">spcr</name><operator pos:start="33:9" pos:end="33:10">-&gt;</operator><name pos:start="33:11" pos:end="33:25">interrupt_types</name></name> <operator pos:start="33:27" pos:end="33:27">=</operator> <operator pos:start="33:29" pos:end="33:29">(</operator><literal type="number" pos:start="33:30" pos:end="33:30">1</literal> <operator pos:start="33:32" pos:end="33:33">&lt;&lt;</operator> <literal type="number" pos:start="33:35" pos:end="33:35">3</literal><operator pos:start="33:36" pos:end="33:36">)</operator></expr>;</expr_stmt> <comment type="block" pos:start="33:39" pos:end="33:69">/* Bit[3] ARMH GIC interrupt */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:33"><expr pos:start="35:5" pos:end="35:32"><name pos:start="35:5" pos:end="35:13"><name pos:start="35:5" pos:end="35:8">spcr</name><operator pos:start="35:9" pos:end="35:10">-&gt;</operator><name pos:start="35:11" pos:end="35:13">gsi</name></name> <operator pos:start="35:15" pos:end="35:15">=</operator> <call pos:start="35:17" pos:end="35:32"><name pos:start="35:17" pos:end="35:27">cpu_to_le32</name><argument_list pos:start="35:28" pos:end="35:32">(<argument pos:start="35:29" pos:end="35:31"><expr pos:start="35:29" pos:end="35:31"><name pos:start="35:29" pos:end="35:31">irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="35:36" pos:end="35:64">/* Global System Interrupt */</comment>



    <expr_stmt pos:start="39:5" pos:end="39:19"><expr pos:start="39:5" pos:end="39:18"><name pos:start="39:5" pos:end="39:14"><name pos:start="39:5" pos:end="39:8">spcr</name><operator pos:start="39:9" pos:end="39:10">-&gt;</operator><name pos:start="39:11" pos:end="39:14">baud</name></name> <operator pos:start="39:16" pos:end="39:16">=</operator> <literal type="number" pos:start="39:18" pos:end="39:18">3</literal></expr>;</expr_stmt>                <comment type="block" pos:start="39:36" pos:end="39:60">/* Baud Rate: 3 = 9600 */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:21"><expr pos:start="41:5" pos:end="41:20"><name pos:start="41:5" pos:end="41:16"><name pos:start="41:5" pos:end="41:8">spcr</name><operator pos:start="41:9" pos:end="41:10">-&gt;</operator><name pos:start="41:11" pos:end="41:16">parity</name></name> <operator pos:start="41:18" pos:end="41:18">=</operator> <literal type="number" pos:start="41:20" pos:end="41:20">0</literal></expr>;</expr_stmt>              <comment type="block" pos:start="41:36" pos:end="41:50">/* No Parity */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:23"><expr pos:start="43:5" pos:end="43:22"><name pos:start="43:5" pos:end="43:18"><name pos:start="43:5" pos:end="43:8">spcr</name><operator pos:start="43:9" pos:end="43:10">-&gt;</operator><name pos:start="43:11" pos:end="43:18">stopbits</name></name> <operator pos:start="43:20" pos:end="43:20">=</operator> <literal type="number" pos:start="43:22" pos:end="43:22">1</literal></expr>;</expr_stmt>            <comment type="block" pos:start="43:36" pos:end="43:51">/* 1 Stop bit */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:30"><expr pos:start="45:5" pos:end="45:29"><name pos:start="45:5" pos:end="45:18"><name pos:start="45:5" pos:end="45:8">spcr</name><operator pos:start="45:9" pos:end="45:10">-&gt;</operator><name pos:start="45:11" pos:end="45:18">flowctrl</name></name> <operator pos:start="45:20" pos:end="45:20">=</operator> <operator pos:start="45:22" pos:end="45:22">(</operator><literal type="number" pos:start="45:23" pos:end="45:23">1</literal> <operator pos:start="45:25" pos:end="45:26">&lt;&lt;</operator> <literal type="number" pos:start="45:28" pos:end="45:28">1</literal><operator pos:start="45:29" pos:end="45:29">)</operator></expr>;</expr_stmt>     <comment type="block" pos:start="45:36" pos:end="45:79">/* Bit[1] = RTS/CTS hardware flow control */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:24"><expr pos:start="47:5" pos:end="47:23"><name pos:start="47:5" pos:end="47:19"><name pos:start="47:5" pos:end="47:8">spcr</name><operator pos:start="47:9" pos:end="47:10">-&gt;</operator><name pos:start="47:11" pos:end="47:19">term_type</name></name> <operator pos:start="47:21" pos:end="47:21">=</operator> <literal type="number" pos:start="47:23" pos:end="47:23">0</literal></expr>;</expr_stmt>           <comment type="block" pos:start="47:36" pos:end="47:65">/* Terminal Type: 0 = VT100 */</comment>



    <expr_stmt pos:start="51:5" pos:end="51:33"><expr pos:start="51:5" pos:end="51:32"><name pos:start="51:5" pos:end="51:23"><name pos:start="51:5" pos:end="51:8">spcr</name><operator pos:start="51:9" pos:end="51:10">-&gt;</operator><name pos:start="51:11" pos:end="51:23">pci_device_id</name></name> <operator pos:start="51:25" pos:end="51:25">=</operator> <literal type="number" pos:start="51:27" pos:end="51:32">0xffff</literal></expr>;</expr_stmt>  <comment type="block" pos:start="51:36" pos:end="51:72">/* PCI Device ID: not a PCI device */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:33"><expr pos:start="53:5" pos:end="53:32"><name pos:start="53:5" pos:end="53:23"><name pos:start="53:5" pos:end="53:8">spcr</name><operator pos:start="53:9" pos:end="53:10">-&gt;</operator><name pos:start="53:11" pos:end="53:23">pci_vendor_id</name></name> <operator pos:start="53:25" pos:end="53:25">=</operator> <literal type="number" pos:start="53:27" pos:end="53:32">0xffff</literal></expr>;</expr_stmt>  <comment type="block" pos:start="53:36" pos:end="53:72">/* PCI Vendor ID: not a PCI device */</comment>



    <expr_stmt pos:start="57:5" pos:end="59:23"><expr pos:start="57:5" pos:end="59:22"><call pos:start="57:5" pos:end="59:22"><name pos:start="57:5" pos:end="57:16">build_header</name><argument_list pos:start="57:17" pos:end="59:22">(<argument pos:start="57:18" pos:end="57:23"><expr pos:start="57:18" pos:end="57:23"><name pos:start="57:18" pos:end="57:23">linker</name></expr></argument>, <argument pos:start="57:26" pos:end="57:35"><expr pos:start="57:26" pos:end="57:35"><name pos:start="57:26" pos:end="57:35">table_data</name></expr></argument>, <argument pos:start="57:38" pos:end="57:49"><expr pos:start="57:38" pos:end="57:49"><operator pos:start="57:38" pos:end="57:38">(</operator><name pos:start="57:39" pos:end="57:42">void</name> <operator pos:start="57:44" pos:end="57:44">*</operator><operator pos:start="57:45" pos:end="57:45">)</operator><name pos:start="57:46" pos:end="57:49">spcr</name></expr></argument>, <argument pos:start="57:52" pos:end="57:57"><expr pos:start="57:52" pos:end="57:57"><literal type="string" pos:start="57:52" pos:end="57:57">"SPCR"</literal></expr></argument>, <argument pos:start="57:60" pos:end="57:72"><expr pos:start="57:60" pos:end="57:72"><sizeof pos:start="57:60" pos:end="57:72">sizeof<argument_list pos:start="57:66" pos:end="57:72">(<argument pos:start="57:67" pos:end="57:71"><expr pos:start="57:67" pos:end="57:71"><operator pos:start="57:67" pos:end="57:67">*</operator><name pos:start="57:68" pos:end="57:71">spcr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="57:75" pos:end="57:75"><expr pos:start="57:75" pos:end="57:75"><literal type="number" pos:start="57:75" pos:end="57:75">2</literal></expr></argument>,

                 <argument pos:start="59:18" pos:end="59:21"><expr pos:start="59:18" pos:end="59:21"><name pos:start="59:18" pos:end="59:21">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
