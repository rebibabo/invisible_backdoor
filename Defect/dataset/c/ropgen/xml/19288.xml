<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19288.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">coroutine_fn</name> <name pos:start="1:21" pos:end="1:23">int</name></type> <name pos:start="1:25" pos:end="1:36">sd_co_writev</name><parameter_list pos:start="1:37" pos:end="3:59">(<parameter pos:start="1:38" pos:end="1:57"><decl pos:start="1:38" pos:end="1:57"><type pos:start="1:38" pos:end="1:57"><name pos:start="1:38" pos:end="1:53">BlockDriverState</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:57">bs</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:77"><decl pos:start="1:60" pos:end="1:77"><type pos:start="1:60" pos:end="1:77"><name pos:start="1:60" pos:end="1:66">int64_t</name></type> <name pos:start="1:68" pos:end="1:77">sector_num</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:38"><decl pos:start="3:25" pos:end="3:38"><type pos:start="3:25" pos:end="3:38"><name pos:start="3:25" pos:end="3:27">int</name></type> <name pos:start="3:29" pos:end="3:38">nb_sectors</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:58"><decl pos:start="3:41" pos:end="3:58"><type pos:start="3:41" pos:end="3:58"><name pos:start="3:41" pos:end="3:52">QEMUIOVector</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:58">qiov</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="59:1">{<block_content pos:start="7:5" pos:end="57:19">

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17">SheepdogAIOCB</name></type> <name pos:start="7:19" pos:end="7:21">acb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:66"><decl pos:start="11:5" pos:end="11:65"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:18">offset</name> <init pos:start="11:20" pos:end="11:65">= <expr pos:start="11:22" pos:end="11:65"><operator pos:start="11:22" pos:end="11:22">(</operator><name pos:start="11:23" pos:end="11:32">sector_num</name> <operator pos:start="11:34" pos:end="11:34">+</operator> <name pos:start="11:36" pos:end="11:45">nb_sectors</name><operator pos:start="11:46" pos:end="11:46">)</operator> <operator pos:start="11:48" pos:end="11:48">*</operator> <name pos:start="11:50" pos:end="11:65">BDRV_SECTOR_SIZE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:38"><decl pos:start="13:5" pos:end="13:37"><type pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:21">BDRVSheepdogState</name> <modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:24">s</name> <init pos:start="13:26" pos:end="13:37">= <expr pos:start="13:28" pos:end="13:37"><name pos:start="13:28" pos:end="13:37"><name pos:start="13:28" pos:end="13:29">bs</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:37">opaque</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="27:5"><if pos:start="17:5" pos:end="27:5">if <condition pos:start="17:8" pos:end="17:35">(<expr pos:start="17:9" pos:end="17:34"><name pos:start="17:9" pos:end="17:14">offset</name> <operator pos:start="17:16" pos:end="17:16">&gt;</operator> <name pos:start="17:18" pos:end="17:34"><name pos:start="17:18" pos:end="17:18">s</name><operator pos:start="17:19" pos:end="17:20">-&gt;</operator><name pos:start="17:21" pos:end="17:25">inode</name><operator pos:start="17:26" pos:end="17:26">.</operator><name pos:start="17:27" pos:end="17:34">vdi_size</name></name></expr>)</condition> <block pos:start="17:37" pos:end="27:5">{<block_content pos:start="19:9" pos:end="25:9">

        <expr_stmt pos:start="19:9" pos:end="19:38"><expr pos:start="19:9" pos:end="19:37"><name pos:start="19:9" pos:end="19:11">ret</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:37"><name pos:start="19:15" pos:end="19:25">sd_truncate</name><argument_list pos:start="19:26" pos:end="19:37">(<argument pos:start="19:27" pos:end="19:28"><expr pos:start="19:27" pos:end="19:28"><name pos:start="19:27" pos:end="19:28">bs</name></expr></argument>, <argument pos:start="19:31" pos:end="19:36"><expr pos:start="19:31" pos:end="19:36"><name pos:start="19:31" pos:end="19:36">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="25:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:20">(<expr pos:start="21:13" pos:end="21:19"><name pos:start="21:13" pos:end="21:15">ret</name> <operator pos:start="21:17" pos:end="21:17">&lt;</operator> <literal type="number" pos:start="21:19" pos:end="21:19">0</literal></expr>)</condition> <block pos:start="21:22" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:23">

            <return pos:start="23:13" pos:end="23:23">return <expr pos:start="23:20" pos:end="23:22"><name pos:start="23:20" pos:end="23:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:75"><expr pos:start="31:5" pos:end="31:74"><call pos:start="31:5" pos:end="31:74"><name pos:start="31:5" pos:end="31:16">sd_aio_setup</name><argument_list pos:start="31:17" pos:end="31:74">(<argument pos:start="31:18" pos:end="31:21"><expr pos:start="31:18" pos:end="31:21"><operator pos:start="31:18" pos:end="31:18">&amp;</operator><name pos:start="31:19" pos:end="31:21">acb</name></expr></argument>, <argument pos:start="31:24" pos:end="31:24"><expr pos:start="31:24" pos:end="31:24"><name pos:start="31:24" pos:end="31:24">s</name></expr></argument>, <argument pos:start="31:27" pos:end="31:30"><expr pos:start="31:27" pos:end="31:30"><name pos:start="31:27" pos:end="31:30">qiov</name></expr></argument>, <argument pos:start="31:33" pos:end="31:42"><expr pos:start="31:33" pos:end="31:42"><name pos:start="31:33" pos:end="31:42">sector_num</name></expr></argument>, <argument pos:start="31:45" pos:end="31:54"><expr pos:start="31:45" pos:end="31:54"><name pos:start="31:45" pos:end="31:54">nb_sectors</name></expr></argument>, <argument pos:start="31:57" pos:end="31:73"><expr pos:start="31:57" pos:end="31:73"><name pos:start="31:57" pos:end="31:73">AIOCB_WRITE_UDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="35:1" pos:end="35:6"><name pos:start="35:1" pos:end="35:5">retry</name>:</label>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:41">(<expr pos:start="37:9" pos:end="37:40"><call pos:start="37:9" pos:end="37:40"><name pos:start="37:9" pos:end="37:31">check_overlapping_aiocb</name><argument_list pos:start="37:32" pos:end="37:40">(<argument pos:start="37:33" pos:end="37:33"><expr pos:start="37:33" pos:end="37:33"><name pos:start="37:33" pos:end="37:33">s</name></expr></argument>, <argument pos:start="37:36" pos:end="37:39"><expr pos:start="37:36" pos:end="37:39"><operator pos:start="37:36" pos:end="37:36">&amp;</operator><name pos:start="37:37" pos:end="37:39">acb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:43" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:19">

        <expr_stmt pos:start="39:9" pos:end="39:50"><expr pos:start="39:9" pos:end="39:49"><call pos:start="39:9" pos:end="39:49"><name pos:start="39:9" pos:end="39:26">qemu_co_queue_wait</name><argument_list pos:start="39:27" pos:end="39:49">(<argument pos:start="39:28" pos:end="39:48"><expr pos:start="39:28" pos:end="39:48"><operator pos:start="39:28" pos:end="39:28">&amp;</operator><name pos:start="39:29" pos:end="39:48"><name pos:start="39:29" pos:end="39:29">s</name><operator pos:start="39:30" pos:end="39:31">-&gt;</operator><name pos:start="39:32" pos:end="39:48">overlapping_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="41:9" pos:end="41:19">goto <name pos:start="41:14" pos:end="41:18">retry</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:26"><expr pos:start="47:5" pos:end="47:25"><call pos:start="47:5" pos:end="47:25"><name pos:start="47:5" pos:end="47:19">sd_co_rw_vector</name><argument_list pos:start="47:20" pos:end="47:25">(<argument pos:start="47:21" pos:end="47:24"><expr pos:start="47:21" pos:end="47:24"><operator pos:start="47:21" pos:end="47:21">&amp;</operator><name pos:start="47:22" pos:end="47:24">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:24"><expr pos:start="49:5" pos:end="49:23"><call pos:start="49:5" pos:end="49:23"><name pos:start="49:5" pos:end="49:17">sd_write_done</name><argument_list pos:start="49:18" pos:end="49:23">(<argument pos:start="49:19" pos:end="49:22"><expr pos:start="49:19" pos:end="49:22"><operator pos:start="49:19" pos:end="49:19">&amp;</operator><name pos:start="49:20" pos:end="49:22">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:39"><expr pos:start="53:5" pos:end="53:38"><call pos:start="53:5" pos:end="53:38"><name pos:start="53:5" pos:end="53:16">QLIST_REMOVE</name><argument_list pos:start="53:17" pos:end="53:38">(<argument pos:start="53:18" pos:end="53:21"><expr pos:start="53:18" pos:end="53:21"><operator pos:start="53:18" pos:end="53:18">&amp;</operator><name pos:start="53:19" pos:end="53:21">acb</name></expr></argument>, <argument pos:start="53:24" pos:end="53:37"><expr pos:start="53:24" pos:end="53:37"><name pos:start="53:24" pos:end="53:37">aiocb_siblings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:53"><expr pos:start="55:5" pos:end="55:52"><call pos:start="55:5" pos:end="55:52"><name pos:start="55:5" pos:end="55:29">qemu_co_queue_restart_all</name><argument_list pos:start="55:30" pos:end="55:52">(<argument pos:start="55:31" pos:end="55:51"><expr pos:start="55:31" pos:end="55:51"><operator pos:start="55:31" pos:end="55:31">&amp;</operator><name pos:start="55:32" pos:end="55:51"><name pos:start="55:32" pos:end="55:32">s</name><operator pos:start="55:33" pos:end="55:34">-&gt;</operator><name pos:start="55:35" pos:end="55:51">overlapping_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="57:5" pos:end="57:19">return <expr pos:start="57:12" pos:end="57:18"><name pos:start="57:12" pos:end="57:18"><name pos:start="57:12" pos:end="57:14">acb</name><operator pos:start="57:15" pos:end="57:15">.</operator><name pos:start="57:16" pos:end="57:18">ret</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
