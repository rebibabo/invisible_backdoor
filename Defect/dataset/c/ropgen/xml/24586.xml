<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24586.c" pos:tabs="8"><function pos:start="1:1" pos:end="167:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">test_to_from_buf_1</name><parameter_list pos:start="1:31" pos:end="1:36">(<parameter pos:start="1:32" pos:end="1:35"><decl pos:start="1:32" pos:end="1:35"><type pos:start="1:32" pos:end="1:35"><name pos:start="1:32" pos:end="1:35">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="167:1">{<block_content pos:start="5:6" pos:end="165:24">

     <decl_stmt pos:start="5:6" pos:end="5:19"><decl pos:start="5:6" pos:end="5:18"><type pos:start="5:6" pos:end="5:13"><name pos:start="5:6" pos:end="5:13">unsigned</name></type> <name pos:start="5:15" pos:end="5:18">niov</name></decl>;</decl_stmt>

     <decl_stmt pos:start="7:6" pos:end="7:23"><decl pos:start="7:6" pos:end="7:22"><type pos:start="7:6" pos:end="7:19"><name pos:start="7:6" pos:end="7:17"><name pos:start="7:6" pos:end="7:11">struct</name> <name pos:start="7:13" pos:end="7:17">iovec</name></name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">iov</name></decl>;</decl_stmt>

     <decl_stmt pos:start="9:6" pos:end="9:15"><decl pos:start="9:6" pos:end="9:14"><type pos:start="9:6" pos:end="9:11"><name pos:start="9:6" pos:end="9:11">size_t</name></type> <name pos:start="9:13" pos:end="9:14">sz</name></decl>;</decl_stmt>

     <decl_stmt pos:start="11:6" pos:end="11:32"><decl pos:start="11:6" pos:end="11:24"><type pos:start="11:6" pos:end="11:20"><name pos:start="11:6" pos:end="11:13">unsigned</name> <name pos:start="11:15" pos:end="11:18">char</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:24">ibuf</name></decl>, <decl pos:start="11:27" pos:end="11:31"><type ref="prev" pos:start="11:6" pos:end="11:20"><modifier pos:start="11:27" pos:end="11:27">*</modifier></type><name pos:start="11:28" pos:end="11:31">obuf</name></decl>;</decl_stmt>

     <decl_stmt pos:start="13:6" pos:end="13:22"><decl pos:start="13:6" pos:end="13:15"><type pos:start="13:6" pos:end="13:13"><name pos:start="13:6" pos:end="13:13">unsigned</name></type> <name pos:start="13:15" pos:end="13:15">i</name></decl>, <decl pos:start="13:18" pos:end="13:18"><type ref="prev" pos:start="13:6" pos:end="13:13"/><name pos:start="13:18" pos:end="13:18">j</name></decl>, <decl pos:start="13:21" pos:end="13:21"><type ref="prev" pos:start="13:6" pos:end="13:13"/><name pos:start="13:21" pos:end="13:21">n</name></decl>;</decl_stmt>



     <expr_stmt pos:start="17:6" pos:end="17:29"><expr pos:start="17:6" pos:end="17:28"><call pos:start="17:6" pos:end="17:28"><name pos:start="17:6" pos:end="17:15">iov_random</name><argument_list pos:start="17:16" pos:end="17:28">(<argument pos:start="17:17" pos:end="17:20"><expr pos:start="17:17" pos:end="17:20"><operator pos:start="17:17" pos:end="17:17">&amp;</operator><name pos:start="17:18" pos:end="17:20">iov</name></expr></argument>, <argument pos:start="17:23" pos:end="17:27"><expr pos:start="17:23" pos:end="17:27"><operator pos:start="17:23" pos:end="17:23">&amp;</operator><name pos:start="17:24" pos:end="17:27">niov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



     <expr_stmt pos:start="21:6" pos:end="21:30"><expr pos:start="21:6" pos:end="21:29"><name pos:start="21:6" pos:end="21:7">sz</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:29"><name pos:start="21:11" pos:end="21:18">iov_size</name><argument_list pos:start="21:19" pos:end="21:29">(<argument pos:start="21:20" pos:end="21:22"><expr pos:start="21:20" pos:end="21:22"><name pos:start="21:20" pos:end="21:22">iov</name></expr></argument>, <argument pos:start="21:25" pos:end="21:28"><expr pos:start="21:25" pos:end="21:28"><name pos:start="21:25" pos:end="21:28">niov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



     <expr_stmt pos:start="25:6" pos:end="25:33"><expr pos:start="25:6" pos:end="25:32"><name pos:start="25:6" pos:end="25:9">ibuf</name> <operator pos:start="25:11" pos:end="25:11">=</operator> <call pos:start="25:13" pos:end="25:28"><name pos:start="25:13" pos:end="25:20">g_malloc</name><argument_list pos:start="25:21" pos:end="25:28">(<argument pos:start="25:22" pos:end="25:27"><expr pos:start="25:22" pos:end="25:27"><name pos:start="25:22" pos:end="25:23">sz</name> <operator pos:start="25:25" pos:end="25:25">+</operator> <literal type="number" pos:start="25:27" pos:end="25:27">8</literal></expr></argument>)</argument_list></call> <operator pos:start="25:30" pos:end="25:30">+</operator> <literal type="number" pos:start="25:32" pos:end="25:32">4</literal></expr>;</expr_stmt>

     <expr_stmt pos:start="27:6" pos:end="27:31"><expr pos:start="27:6" pos:end="27:30"><call pos:start="27:6" pos:end="27:30"><name pos:start="27:6" pos:end="27:11">memcpy</name><argument_list pos:start="27:12" pos:end="27:30">(<argument pos:start="27:13" pos:end="27:18"><expr pos:start="27:13" pos:end="27:18"><name pos:start="27:13" pos:end="27:16">ibuf</name><operator pos:start="27:17" pos:end="27:17">-</operator><literal type="number" pos:start="27:18" pos:end="27:18">4</literal></expr></argument>, <argument pos:start="27:21" pos:end="27:26"><expr pos:start="27:21" pos:end="27:26"><literal type="string" pos:start="27:21" pos:end="27:26">"aaaa"</literal></expr></argument>, <argument pos:start="27:29" pos:end="27:29"><expr pos:start="27:29" pos:end="27:29"><literal type="number" pos:start="27:29" pos:end="27:29">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="27:33" pos:end="27:61"><expr pos:start="27:33" pos:end="27:60"><call pos:start="27:33" pos:end="27:60"><name pos:start="27:33" pos:end="27:38">memcpy</name><argument_list pos:start="27:39" pos:end="27:60">(<argument pos:start="27:40" pos:end="27:48"><expr pos:start="27:40" pos:end="27:48"><name pos:start="27:40" pos:end="27:43">ibuf</name> <operator pos:start="27:45" pos:end="27:45">+</operator> <name pos:start="27:47" pos:end="27:48">sz</name></expr></argument>, <argument pos:start="27:51" pos:end="27:56"><expr pos:start="27:51" pos:end="27:56"><literal type="string" pos:start="27:51" pos:end="27:56">"bbbb"</literal></expr></argument>, <argument pos:start="27:59" pos:end="27:59"><expr pos:start="27:59" pos:end="27:59"><literal type="number" pos:start="27:59" pos:end="27:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <expr_stmt pos:start="29:6" pos:end="29:33"><expr pos:start="29:6" pos:end="29:32"><name pos:start="29:6" pos:end="29:9">obuf</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <call pos:start="29:13" pos:end="29:28"><name pos:start="29:13" pos:end="29:20">g_malloc</name><argument_list pos:start="29:21" pos:end="29:28">(<argument pos:start="29:22" pos:end="29:27"><expr pos:start="29:22" pos:end="29:27"><name pos:start="29:22" pos:end="29:23">sz</name> <operator pos:start="29:25" pos:end="29:25">+</operator> <literal type="number" pos:start="29:27" pos:end="29:27">8</literal></expr></argument>)</argument_list></call> <operator pos:start="29:30" pos:end="29:30">+</operator> <literal type="number" pos:start="29:32" pos:end="29:32">4</literal></expr>;</expr_stmt>

     <expr_stmt pos:start="31:6" pos:end="31:31"><expr pos:start="31:6" pos:end="31:30"><call pos:start="31:6" pos:end="31:30"><name pos:start="31:6" pos:end="31:11">memcpy</name><argument_list pos:start="31:12" pos:end="31:30">(<argument pos:start="31:13" pos:end="31:18"><expr pos:start="31:13" pos:end="31:18"><name pos:start="31:13" pos:end="31:16">obuf</name><operator pos:start="31:17" pos:end="31:17">-</operator><literal type="number" pos:start="31:18" pos:end="31:18">4</literal></expr></argument>, <argument pos:start="31:21" pos:end="31:26"><expr pos:start="31:21" pos:end="31:26"><literal type="string" pos:start="31:21" pos:end="31:26">"xxxx"</literal></expr></argument>, <argument pos:start="31:29" pos:end="31:29"><expr pos:start="31:29" pos:end="31:29"><literal type="number" pos:start="31:29" pos:end="31:29">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="31:33" pos:end="31:61"><expr pos:start="31:33" pos:end="31:60"><call pos:start="31:33" pos:end="31:60"><name pos:start="31:33" pos:end="31:38">memcpy</name><argument_list pos:start="31:39" pos:end="31:60">(<argument pos:start="31:40" pos:end="31:48"><expr pos:start="31:40" pos:end="31:48"><name pos:start="31:40" pos:end="31:43">obuf</name> <operator pos:start="31:45" pos:end="31:45">+</operator> <name pos:start="31:47" pos:end="31:48">sz</name></expr></argument>, <argument pos:start="31:51" pos:end="31:56"><expr pos:start="31:51" pos:end="31:56"><literal type="string" pos:start="31:51" pos:end="31:56">"yyyy"</literal></expr></argument>, <argument pos:start="31:59" pos:end="31:59"><expr pos:start="31:59" pos:end="31:59"><literal type="number" pos:start="31:59" pos:end="31:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



     <comment type="block" pos:start="35:6" pos:end="35:39">/* fill in ibuf with 0123456... */</comment>

     <for pos:start="37:6" pos:end="41:6">for <control pos:start="37:10" pos:end="37:29">(<init pos:start="37:11" pos:end="37:16"><expr pos:start="37:11" pos:end="37:15"><name pos:start="37:11" pos:end="37:11">i</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <literal type="number" pos:start="37:15" pos:end="37:15">0</literal></expr>;</init> <condition pos:start="37:18" pos:end="37:24"><expr pos:start="37:18" pos:end="37:23"><name pos:start="37:18" pos:end="37:18">i</name> <operator pos:start="37:20" pos:end="37:20">&lt;</operator> <name pos:start="37:22" pos:end="37:23">sz</name></expr>;</condition> <incr pos:start="37:26" pos:end="37:28"><expr pos:start="37:26" pos:end="37:28"><operator pos:start="37:26" pos:end="37:27">++</operator><name pos:start="37:28" pos:end="37:28">i</name></expr></incr>)</control> <block pos:start="37:31" pos:end="41:6">{<block_content pos:start="39:10" pos:end="39:27">

         <expr_stmt pos:start="39:10" pos:end="39:27"><expr pos:start="39:10" pos:end="39:26"><name pos:start="39:10" pos:end="39:16"><name pos:start="39:10" pos:end="39:13">ibuf</name><index pos:start="39:14" pos:end="39:16">[<expr pos:start="39:15" pos:end="39:15"><name pos:start="39:15" pos:end="39:15">i</name></expr>]</index></name> <operator pos:start="39:18" pos:end="39:18">=</operator> <name pos:start="39:20" pos:end="39:20">i</name> <operator pos:start="39:22" pos:end="39:22">&amp;</operator> <literal type="number" pos:start="39:24" pos:end="39:26">255</literal></expr>;</expr_stmt>

     </block_content>}</block></for>



     <for pos:start="45:6" pos:end="155:5">for <control pos:start="45:10" pos:end="45:30">(<init pos:start="45:11" pos:end="45:16"><expr pos:start="45:11" pos:end="45:15"><name pos:start="45:11" pos:end="45:11">i</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <literal type="number" pos:start="45:15" pos:end="45:15">0</literal></expr>;</init> <condition pos:start="45:18" pos:end="45:25"><expr pos:start="45:18" pos:end="45:24"><name pos:start="45:18" pos:end="45:18">i</name> <operator pos:start="45:20" pos:end="45:21">&lt;=</operator> <name pos:start="45:23" pos:end="45:24">sz</name></expr>;</condition> <incr pos:start="45:27" pos:end="45:29"><expr pos:start="45:27" pos:end="45:29"><operator pos:start="45:27" pos:end="45:28">++</operator><name pos:start="45:29" pos:end="45:29">i</name></expr></incr>)</control> <block pos:start="45:32" pos:end="155:5">{<block_content pos:start="59:10" pos:end="153:10">



         <comment type="block" pos:start="49:10" pos:end="53:60">/* Test from/to buf for offset(i) in [0..sz] up to the end of buffer.

          * For last iteration with offset == sz, the procedure should

          * skip whole vector and process exactly 0 bytes */</comment>



         <comment type="block" pos:start="57:10" pos:end="57:61">/* first set bytes [i..sz) to some "random" value */</comment>

         <expr_stmt pos:start="59:10" pos:end="59:48"><expr pos:start="59:10" pos:end="59:47"><name pos:start="59:10" pos:end="59:10">n</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <call pos:start="59:14" pos:end="59:47"><name pos:start="59:14" pos:end="59:23">iov_memset</name><argument_list pos:start="59:24" pos:end="59:47">(<argument pos:start="59:25" pos:end="59:27"><expr pos:start="59:25" pos:end="59:27"><name pos:start="59:25" pos:end="59:27">iov</name></expr></argument>, <argument pos:start="59:30" pos:end="59:33"><expr pos:start="59:30" pos:end="59:33"><name pos:start="59:30" pos:end="59:33">niov</name></expr></argument>, <argument pos:start="59:36" pos:end="59:36"><expr pos:start="59:36" pos:end="59:36"><literal type="number" pos:start="59:36" pos:end="59:36">0</literal></expr></argument>, <argument pos:start="59:39" pos:end="59:42"><expr pos:start="59:39" pos:end="59:42"><literal type="number" pos:start="59:39" pos:end="59:42">0xff</literal></expr></argument>, <argument pos:start="59:45" pos:end="59:46"><expr pos:start="59:45" pos:end="59:46"><operator pos:start="59:45" pos:end="59:45">-</operator><literal type="number" pos:start="59:46" pos:end="59:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <expr_stmt pos:start="61:10" pos:end="61:27"><expr pos:start="61:10" pos:end="61:26"><call pos:start="61:10" pos:end="61:26"><name pos:start="61:10" pos:end="61:17">g_assert</name><argument_list pos:start="61:18" pos:end="61:26">(<argument pos:start="61:19" pos:end="61:25"><expr pos:start="61:19" pos:end="61:25"><name pos:start="61:19" pos:end="61:19">n</name> <operator pos:start="61:21" pos:end="61:22">==</operator> <name pos:start="61:24" pos:end="61:25">sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



         <comment type="block" pos:start="65:10" pos:end="65:57">/* next copy bytes [i..sz) from ibuf to iovec */</comment>

         <expr_stmt pos:start="67:10" pos:end="67:54"><expr pos:start="67:10" pos:end="67:53"><name pos:start="67:10" pos:end="67:10">n</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <call pos:start="67:14" pos:end="67:53"><name pos:start="67:14" pos:end="67:25">iov_from_buf</name><argument_list pos:start="67:26" pos:end="67:53">(<argument pos:start="67:27" pos:end="67:29"><expr pos:start="67:27" pos:end="67:29"><name pos:start="67:27" pos:end="67:29">iov</name></expr></argument>, <argument pos:start="67:32" pos:end="67:35"><expr pos:start="67:32" pos:end="67:35"><name pos:start="67:32" pos:end="67:35">niov</name></expr></argument>, <argument pos:start="67:38" pos:end="67:38"><expr pos:start="67:38" pos:end="67:38"><name pos:start="67:38" pos:end="67:38">i</name></expr></argument>, <argument pos:start="67:41" pos:end="67:48"><expr pos:start="67:41" pos:end="67:48"><name pos:start="67:41" pos:end="67:44">ibuf</name> <operator pos:start="67:46" pos:end="67:46">+</operator> <name pos:start="67:48" pos:end="67:48">i</name></expr></argument>, <argument pos:start="67:51" pos:end="67:52"><expr pos:start="67:51" pos:end="67:52"><operator pos:start="67:51" pos:end="67:51">-</operator><literal type="number" pos:start="67:52" pos:end="67:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <expr_stmt pos:start="69:10" pos:end="69:31"><expr pos:start="69:10" pos:end="69:30"><call pos:start="69:10" pos:end="69:30"><name pos:start="69:10" pos:end="69:17">g_assert</name><argument_list pos:start="69:18" pos:end="69:30">(<argument pos:start="69:19" pos:end="69:29"><expr pos:start="69:19" pos:end="69:29"><name pos:start="69:19" pos:end="69:19">n</name> <operator pos:start="69:21" pos:end="69:22">==</operator> <name pos:start="69:24" pos:end="69:25">sz</name> <operator pos:start="69:27" pos:end="69:27">-</operator> <name pos:start="69:29" pos:end="69:29">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



         <comment type="block" pos:start="73:10" pos:end="73:33">/* clear part of obuf */</comment>

         <expr_stmt pos:start="75:10" pos:end="75:37"><expr pos:start="75:10" pos:end="75:36"><call pos:start="75:10" pos:end="75:36"><name pos:start="75:10" pos:end="75:15">memset</name><argument_list pos:start="75:16" pos:end="75:36">(<argument pos:start="75:17" pos:end="75:24"><expr pos:start="75:17" pos:end="75:24"><name pos:start="75:17" pos:end="75:20">obuf</name> <operator pos:start="75:22" pos:end="75:22">+</operator> <name pos:start="75:24" pos:end="75:24">i</name></expr></argument>, <argument pos:start="75:27" pos:end="75:27"><expr pos:start="75:27" pos:end="75:27"><literal type="number" pos:start="75:27" pos:end="75:27">0</literal></expr></argument>, <argument pos:start="75:30" pos:end="75:35"><expr pos:start="75:30" pos:end="75:35"><name pos:start="75:30" pos:end="75:31">sz</name> <operator pos:start="75:33" pos:end="75:33">-</operator> <name pos:start="75:35" pos:end="75:35">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <comment type="block" pos:start="77:10" pos:end="77:61">/* and set this part of obuf to values from iovec */</comment>

         <expr_stmt pos:start="79:10" pos:end="79:52"><expr pos:start="79:10" pos:end="79:51"><name pos:start="79:10" pos:end="79:10">n</name> <operator pos:start="79:12" pos:end="79:12">=</operator> <call pos:start="79:14" pos:end="79:51"><name pos:start="79:14" pos:end="79:23">iov_to_buf</name><argument_list pos:start="79:24" pos:end="79:51">(<argument pos:start="79:25" pos:end="79:27"><expr pos:start="79:25" pos:end="79:27"><name pos:start="79:25" pos:end="79:27">iov</name></expr></argument>, <argument pos:start="79:30" pos:end="79:33"><expr pos:start="79:30" pos:end="79:33"><name pos:start="79:30" pos:end="79:33">niov</name></expr></argument>, <argument pos:start="79:36" pos:end="79:36"><expr pos:start="79:36" pos:end="79:36"><name pos:start="79:36" pos:end="79:36">i</name></expr></argument>, <argument pos:start="79:39" pos:end="79:46"><expr pos:start="79:39" pos:end="79:46"><name pos:start="79:39" pos:end="79:42">obuf</name> <operator pos:start="79:44" pos:end="79:44">+</operator> <name pos:start="79:46" pos:end="79:46">i</name></expr></argument>, <argument pos:start="79:49" pos:end="79:50"><expr pos:start="79:49" pos:end="79:50"><operator pos:start="79:49" pos:end="79:49">-</operator><literal type="number" pos:start="79:50" pos:end="79:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <expr_stmt pos:start="81:10" pos:end="81:31"><expr pos:start="81:10" pos:end="81:30"><call pos:start="81:10" pos:end="81:30"><name pos:start="81:10" pos:end="81:17">g_assert</name><argument_list pos:start="81:18" pos:end="81:30">(<argument pos:start="81:19" pos:end="81:29"><expr pos:start="81:19" pos:end="81:29"><name pos:start="81:19" pos:end="81:19">n</name> <operator pos:start="81:21" pos:end="81:22">==</operator> <name pos:start="81:24" pos:end="81:25">sz</name> <operator pos:start="81:27" pos:end="81:27">-</operator> <name pos:start="81:29" pos:end="81:29">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



         <comment type="block" pos:start="85:10" pos:end="85:44">/* now compare resulting buffers */</comment>

         <expr_stmt pos:start="87:10" pos:end="87:47"><expr pos:start="87:10" pos:end="87:46"><call pos:start="87:10" pos:end="87:46"><name pos:start="87:10" pos:end="87:17">g_assert</name><argument_list pos:start="87:18" pos:end="87:46">(<argument pos:start="87:19" pos:end="87:45"><expr pos:start="87:19" pos:end="87:45"><call pos:start="87:19" pos:end="87:40"><name pos:start="87:19" pos:end="87:24">memcmp</name><argument_list pos:start="87:25" pos:end="87:40">(<argument pos:start="87:26" pos:end="87:29"><expr pos:start="87:26" pos:end="87:29"><name pos:start="87:26" pos:end="87:29">ibuf</name></expr></argument>, <argument pos:start="87:32" pos:end="87:35"><expr pos:start="87:32" pos:end="87:35"><name pos:start="87:32" pos:end="87:35">obuf</name></expr></argument>, <argument pos:start="87:38" pos:end="87:39"><expr pos:start="87:38" pos:end="87:39"><name pos:start="87:38" pos:end="87:39">sz</name></expr></argument>)</argument_list></call> <operator pos:start="87:42" pos:end="87:43">==</operator> <literal type="number" pos:start="87:45" pos:end="87:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



         <comment type="block" pos:start="91:10" pos:end="91:33">/* test just one char */</comment>

         <expr_stmt pos:start="93:10" pos:end="93:51"><expr pos:start="93:10" pos:end="93:50"><name pos:start="93:10" pos:end="93:10">n</name> <operator pos:start="93:12" pos:end="93:12">=</operator> <call pos:start="93:14" pos:end="93:50"><name pos:start="93:14" pos:end="93:23">iov_to_buf</name><argument_list pos:start="93:24" pos:end="93:50">(<argument pos:start="93:25" pos:end="93:27"><expr pos:start="93:25" pos:end="93:27"><name pos:start="93:25" pos:end="93:27">iov</name></expr></argument>, <argument pos:start="93:30" pos:end="93:33"><expr pos:start="93:30" pos:end="93:33"><name pos:start="93:30" pos:end="93:33">niov</name></expr></argument>, <argument pos:start="93:36" pos:end="93:36"><expr pos:start="93:36" pos:end="93:36"><name pos:start="93:36" pos:end="93:36">i</name></expr></argument>, <argument pos:start="93:39" pos:end="93:46"><expr pos:start="93:39" pos:end="93:46"><name pos:start="93:39" pos:end="93:42">obuf</name> <operator pos:start="93:44" pos:end="93:44">+</operator> <name pos:start="93:46" pos:end="93:46">i</name></expr></argument>, <argument pos:start="93:49" pos:end="93:49"><expr pos:start="93:49" pos:end="93:49"><literal type="number" pos:start="93:49" pos:end="93:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <expr_stmt pos:start="95:10" pos:end="95:33"><expr pos:start="95:10" pos:end="95:32"><call pos:start="95:10" pos:end="95:32"><name pos:start="95:10" pos:end="95:17">g_assert</name><argument_list pos:start="95:18" pos:end="95:32">(<argument pos:start="95:19" pos:end="95:31"><expr pos:start="95:19" pos:end="95:31"><name pos:start="95:19" pos:end="95:19">n</name> <operator pos:start="95:21" pos:end="95:22">==</operator> <operator pos:start="95:24" pos:end="95:24">(</operator><name pos:start="95:25" pos:end="95:25">i</name> <operator pos:start="95:27" pos:end="95:27">&lt;</operator> <name pos:start="95:29" pos:end="95:30">sz</name><operator pos:start="95:31" pos:end="95:31">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <if_stmt pos:start="97:10" pos:end="101:10"><if pos:start="97:10" pos:end="101:10">if <condition pos:start="97:13" pos:end="97:15">(<expr pos:start="97:14" pos:end="97:14"><name pos:start="97:14" pos:end="97:14">n</name></expr>)</condition> <block pos:start="97:17" pos:end="101:10">{<block_content pos:start="99:14" pos:end="99:44">

             <expr_stmt pos:start="99:14" pos:end="99:44"><expr pos:start="99:14" pos:end="99:43"><call pos:start="99:14" pos:end="99:43"><name pos:start="99:14" pos:end="99:21">g_assert</name><argument_list pos:start="99:22" pos:end="99:43">(<argument pos:start="99:23" pos:end="99:42"><expr pos:start="99:23" pos:end="99:42"><name pos:start="99:23" pos:end="99:29"><name pos:start="99:23" pos:end="99:26">obuf</name><index pos:start="99:27" pos:end="99:29">[<expr pos:start="99:28" pos:end="99:28"><name pos:start="99:28" pos:end="99:28">i</name></expr>]</index></name> <operator pos:start="99:31" pos:end="99:32">==</operator> <operator pos:start="99:34" pos:end="99:34">(</operator><name pos:start="99:35" pos:end="99:35">i</name> <operator pos:start="99:37" pos:end="99:37">&amp;</operator> <literal type="number" pos:start="99:39" pos:end="99:41">255</literal><operator pos:start="99:42" pos:end="99:42">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         </block_content>}</block></if></if_stmt>



         <for pos:start="105:10" pos:end="153:10">for <control pos:start="105:14" pos:end="105:34">(<init pos:start="105:15" pos:end="105:20"><expr pos:start="105:15" pos:end="105:19"><name pos:start="105:15" pos:end="105:15">j</name> <operator pos:start="105:17" pos:end="105:17">=</operator> <name pos:start="105:19" pos:end="105:19">i</name></expr>;</init> <condition pos:start="105:22" pos:end="105:29"><expr pos:start="105:22" pos:end="105:28"><name pos:start="105:22" pos:end="105:22">j</name> <operator pos:start="105:24" pos:end="105:25">&lt;=</operator> <name pos:start="105:27" pos:end="105:28">sz</name></expr>;</condition> <incr pos:start="105:31" pos:end="105:33"><expr pos:start="105:31" pos:end="105:33"><operator pos:start="105:31" pos:end="105:32">++</operator><name pos:start="105:33" pos:end="105:33">j</name></expr></incr>)</control> <block pos:start="105:36" pos:end="153:10">{<block_content pos:start="115:14" pos:end="151:49">

             <comment type="block" pos:start="107:14" pos:end="109:37">/* now test num of bytes cap up to byte no. j,

              * with j in [i..sz]. */</comment>



             <comment type="block" pos:start="113:14" pos:end="113:30">/* clear iovec */</comment>

             <expr_stmt pos:start="115:14" pos:end="115:52"><expr pos:start="115:14" pos:end="115:51"><name pos:start="115:14" pos:end="115:14">n</name> <operator pos:start="115:16" pos:end="115:16">=</operator> <call pos:start="115:18" pos:end="115:51"><name pos:start="115:18" pos:end="115:27">iov_memset</name><argument_list pos:start="115:28" pos:end="115:51">(<argument pos:start="115:29" pos:end="115:31"><expr pos:start="115:29" pos:end="115:31"><name pos:start="115:29" pos:end="115:31">iov</name></expr></argument>, <argument pos:start="115:34" pos:end="115:37"><expr pos:start="115:34" pos:end="115:37"><name pos:start="115:34" pos:end="115:37">niov</name></expr></argument>, <argument pos:start="115:40" pos:end="115:40"><expr pos:start="115:40" pos:end="115:40"><literal type="number" pos:start="115:40" pos:end="115:40">0</literal></expr></argument>, <argument pos:start="115:43" pos:end="115:46"><expr pos:start="115:43" pos:end="115:46"><literal type="number" pos:start="115:43" pos:end="115:46">0xff</literal></expr></argument>, <argument pos:start="115:49" pos:end="115:50"><expr pos:start="115:49" pos:end="115:50"><operator pos:start="115:49" pos:end="115:49">-</operator><literal type="number" pos:start="115:50" pos:end="115:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

             <expr_stmt pos:start="117:14" pos:end="117:31"><expr pos:start="117:14" pos:end="117:30"><call pos:start="117:14" pos:end="117:30"><name pos:start="117:14" pos:end="117:21">g_assert</name><argument_list pos:start="117:22" pos:end="117:30">(<argument pos:start="117:23" pos:end="117:29"><expr pos:start="117:23" pos:end="117:29"><name pos:start="117:23" pos:end="117:23">n</name> <operator pos:start="117:25" pos:end="117:26">==</operator> <name pos:start="117:28" pos:end="117:29">sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



             <comment type="block" pos:start="121:14" pos:end="121:55">/* copy bytes [i..j) from ibuf to iovec */</comment>

             <expr_stmt pos:start="123:14" pos:end="123:61"><expr pos:start="123:14" pos:end="123:60"><name pos:start="123:14" pos:end="123:14">n</name> <operator pos:start="123:16" pos:end="123:16">=</operator> <call pos:start="123:18" pos:end="123:60"><name pos:start="123:18" pos:end="123:29">iov_from_buf</name><argument_list pos:start="123:30" pos:end="123:60">(<argument pos:start="123:31" pos:end="123:33"><expr pos:start="123:31" pos:end="123:33"><name pos:start="123:31" pos:end="123:33">iov</name></expr></argument>, <argument pos:start="123:36" pos:end="123:39"><expr pos:start="123:36" pos:end="123:39"><name pos:start="123:36" pos:end="123:39">niov</name></expr></argument>, <argument pos:start="123:42" pos:end="123:42"><expr pos:start="123:42" pos:end="123:42"><name pos:start="123:42" pos:end="123:42">i</name></expr></argument>, <argument pos:start="123:45" pos:end="123:52"><expr pos:start="123:45" pos:end="123:52"><name pos:start="123:45" pos:end="123:48">ibuf</name> <operator pos:start="123:50" pos:end="123:50">+</operator> <name pos:start="123:52" pos:end="123:52">i</name></expr></argument>, <argument pos:start="123:55" pos:end="123:59"><expr pos:start="123:55" pos:end="123:59"><name pos:start="123:55" pos:end="123:55">j</name> <operator pos:start="123:57" pos:end="123:57">-</operator> <name pos:start="123:59" pos:end="123:59">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

             <expr_stmt pos:start="125:14" pos:end="125:34"><expr pos:start="125:14" pos:end="125:33"><call pos:start="125:14" pos:end="125:33"><name pos:start="125:14" pos:end="125:21">g_assert</name><argument_list pos:start="125:22" pos:end="125:33">(<argument pos:start="125:23" pos:end="125:32"><expr pos:start="125:23" pos:end="125:32"><name pos:start="125:23" pos:end="125:23">n</name> <operator pos:start="125:25" pos:end="125:26">==</operator> <name pos:start="125:28" pos:end="125:28">j</name> <operator pos:start="125:30" pos:end="125:30">-</operator> <name pos:start="125:32" pos:end="125:32">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



             <comment type="block" pos:start="129:14" pos:end="129:37">/* clear part of obuf */</comment>

             <expr_stmt pos:start="131:14" pos:end="131:40"><expr pos:start="131:14" pos:end="131:39"><call pos:start="131:14" pos:end="131:39"><name pos:start="131:14" pos:end="131:19">memset</name><argument_list pos:start="131:20" pos:end="131:39">(<argument pos:start="131:21" pos:end="131:28"><expr pos:start="131:21" pos:end="131:28"><name pos:start="131:21" pos:end="131:24">obuf</name> <operator pos:start="131:26" pos:end="131:26">+</operator> <name pos:start="131:28" pos:end="131:28">i</name></expr></argument>, <argument pos:start="131:31" pos:end="131:31"><expr pos:start="131:31" pos:end="131:31"><literal type="number" pos:start="131:31" pos:end="131:31">0</literal></expr></argument>, <argument pos:start="131:34" pos:end="131:38"><expr pos:start="131:34" pos:end="131:38"><name pos:start="131:34" pos:end="131:34">j</name> <operator pos:start="131:36" pos:end="131:36">-</operator> <name pos:start="131:38" pos:end="131:38">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



             <comment type="block" pos:start="135:14" pos:end="135:55">/* copy bytes [i..j) from iovec to obuf */</comment>

             <expr_stmt pos:start="137:14" pos:end="137:59"><expr pos:start="137:14" pos:end="137:58"><name pos:start="137:14" pos:end="137:14">n</name> <operator pos:start="137:16" pos:end="137:16">=</operator> <call pos:start="137:18" pos:end="137:58"><name pos:start="137:18" pos:end="137:27">iov_to_buf</name><argument_list pos:start="137:28" pos:end="137:58">(<argument pos:start="137:29" pos:end="137:31"><expr pos:start="137:29" pos:end="137:31"><name pos:start="137:29" pos:end="137:31">iov</name></expr></argument>, <argument pos:start="137:34" pos:end="137:37"><expr pos:start="137:34" pos:end="137:37"><name pos:start="137:34" pos:end="137:37">niov</name></expr></argument>, <argument pos:start="137:40" pos:end="137:40"><expr pos:start="137:40" pos:end="137:40"><name pos:start="137:40" pos:end="137:40">i</name></expr></argument>, <argument pos:start="137:43" pos:end="137:50"><expr pos:start="137:43" pos:end="137:50"><name pos:start="137:43" pos:end="137:46">obuf</name> <operator pos:start="137:48" pos:end="137:48">+</operator> <name pos:start="137:50" pos:end="137:50">i</name></expr></argument>, <argument pos:start="137:53" pos:end="137:57"><expr pos:start="137:53" pos:end="137:57"><name pos:start="137:53" pos:end="137:53">j</name> <operator pos:start="137:55" pos:end="137:55">-</operator> <name pos:start="137:57" pos:end="137:57">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

             <expr_stmt pos:start="139:14" pos:end="139:34"><expr pos:start="139:14" pos:end="139:33"><call pos:start="139:14" pos:end="139:33"><name pos:start="139:14" pos:end="139:21">g_assert</name><argument_list pos:start="139:22" pos:end="139:33">(<argument pos:start="139:23" pos:end="139:32"><expr pos:start="139:23" pos:end="139:32"><name pos:start="139:23" pos:end="139:23">n</name> <operator pos:start="139:25" pos:end="139:26">==</operator> <name pos:start="139:28" pos:end="139:28">j</name> <operator pos:start="139:30" pos:end="139:30">-</operator> <name pos:start="139:32" pos:end="139:32">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



             <comment type="block" pos:start="143:14" pos:end="143:32">/* verify result */</comment>

             <expr_stmt pos:start="145:14" pos:end="145:51"><expr pos:start="145:14" pos:end="145:50"><call pos:start="145:14" pos:end="145:50"><name pos:start="145:14" pos:end="145:21">g_assert</name><argument_list pos:start="145:22" pos:end="145:50">(<argument pos:start="145:23" pos:end="145:49"><expr pos:start="145:23" pos:end="145:49"><call pos:start="145:23" pos:end="145:44"><name pos:start="145:23" pos:end="145:28">memcmp</name><argument_list pos:start="145:29" pos:end="145:44">(<argument pos:start="145:30" pos:end="145:33"><expr pos:start="145:30" pos:end="145:33"><name pos:start="145:30" pos:end="145:33">ibuf</name></expr></argument>, <argument pos:start="145:36" pos:end="145:39"><expr pos:start="145:36" pos:end="145:39"><name pos:start="145:36" pos:end="145:39">obuf</name></expr></argument>, <argument pos:start="145:42" pos:end="145:43"><expr pos:start="145:42" pos:end="145:43"><name pos:start="145:42" pos:end="145:43">sz</name></expr></argument>)</argument_list></call> <operator pos:start="145:46" pos:end="145:47">==</operator> <literal type="number" pos:start="145:49" pos:end="145:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



             <comment type="block" pos:start="149:14" pos:end="149:74">/* now actually check if the iovec contains the right data */</comment>

             <expr_stmt pos:start="151:14" pos:end="151:49"><expr pos:start="151:14" pos:end="151:48"><call pos:start="151:14" pos:end="151:48"><name pos:start="151:14" pos:end="151:27">test_iov_bytes</name><argument_list pos:start="151:28" pos:end="151:48">(<argument pos:start="151:29" pos:end="151:31"><expr pos:start="151:29" pos:end="151:31"><name pos:start="151:29" pos:end="151:31">iov</name></expr></argument>, <argument pos:start="151:34" pos:end="151:37"><expr pos:start="151:34" pos:end="151:37"><name pos:start="151:34" pos:end="151:37">niov</name></expr></argument>, <argument pos:start="151:40" pos:end="151:40"><expr pos:start="151:40" pos:end="151:40"><name pos:start="151:40" pos:end="151:40">i</name></expr></argument>, <argument pos:start="151:43" pos:end="151:47"><expr pos:start="151:43" pos:end="151:47"><name pos:start="151:43" pos:end="151:43">j</name> <operator pos:start="151:45" pos:end="151:45">-</operator> <name pos:start="151:47" pos:end="151:47">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         </block_content>}</block></for>

    </block_content>}</block></for>

    <expr_stmt pos:start="157:5" pos:end="157:72"><expr pos:start="157:5" pos:end="157:71"><call pos:start="157:5" pos:end="157:71"><name pos:start="157:5" pos:end="157:12">g_assert</name><argument_list pos:start="157:13" pos:end="157:71">(<argument pos:start="157:14" pos:end="157:70"><expr pos:start="157:14" pos:end="157:70"><operator pos:start="157:14" pos:end="157:14">!</operator><call pos:start="157:15" pos:end="157:39"><name pos:start="157:15" pos:end="157:20">memcmp</name><argument_list pos:start="157:21" pos:end="157:39">(<argument pos:start="157:22" pos:end="157:27"><expr pos:start="157:22" pos:end="157:27"><name pos:start="157:22" pos:end="157:25">ibuf</name><operator pos:start="157:26" pos:end="157:26">-</operator><literal type="number" pos:start="157:27" pos:end="157:27">4</literal></expr></argument>, <argument pos:start="157:30" pos:end="157:35"><expr pos:start="157:30" pos:end="157:35"><literal type="string" pos:start="157:30" pos:end="157:35">"aaaa"</literal></expr></argument>, <argument pos:start="157:38" pos:end="157:38"><expr pos:start="157:38" pos:end="157:38"><literal type="number" pos:start="157:38" pos:end="157:38">4</literal></expr></argument>)</argument_list></call> <operator pos:start="157:41" pos:end="157:42">&amp;&amp;</operator> <operator pos:start="157:44" pos:end="157:44">!</operator><call pos:start="157:45" pos:end="157:70"><name pos:start="157:45" pos:end="157:50">memcmp</name><argument_list pos:start="157:51" pos:end="157:70">(<argument pos:start="157:52" pos:end="157:58"><expr pos:start="157:52" pos:end="157:58"><name pos:start="157:52" pos:end="157:55">ibuf</name><operator pos:start="157:56" pos:end="157:56">+</operator><name pos:start="157:57" pos:end="157:58">sz</name></expr></argument>, <argument pos:start="157:61" pos:end="157:66"><expr pos:start="157:61" pos:end="157:66"><literal type="string" pos:start="157:61" pos:end="157:66">"bbbb"</literal></expr></argument>, <argument pos:start="157:69" pos:end="157:69"><expr pos:start="157:69" pos:end="157:69"><literal type="number" pos:start="157:69" pos:end="157:69">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:19"><expr pos:start="159:5" pos:end="159:18"><call pos:start="159:5" pos:end="159:18"><name pos:start="159:5" pos:end="159:10">g_free</name><argument_list pos:start="159:11" pos:end="159:18">(<argument pos:start="159:12" pos:end="159:17"><expr pos:start="159:12" pos:end="159:17"><name pos:start="159:12" pos:end="159:15">ibuf</name><operator pos:start="159:16" pos:end="159:16">-</operator><literal type="number" pos:start="159:17" pos:end="159:17">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:72"><expr pos:start="161:5" pos:end="161:71"><call pos:start="161:5" pos:end="161:71"><name pos:start="161:5" pos:end="161:12">g_assert</name><argument_list pos:start="161:13" pos:end="161:71">(<argument pos:start="161:14" pos:end="161:70"><expr pos:start="161:14" pos:end="161:70"><operator pos:start="161:14" pos:end="161:14">!</operator><call pos:start="161:15" pos:end="161:39"><name pos:start="161:15" pos:end="161:20">memcmp</name><argument_list pos:start="161:21" pos:end="161:39">(<argument pos:start="161:22" pos:end="161:27"><expr pos:start="161:22" pos:end="161:27"><name pos:start="161:22" pos:end="161:25">obuf</name><operator pos:start="161:26" pos:end="161:26">-</operator><literal type="number" pos:start="161:27" pos:end="161:27">4</literal></expr></argument>, <argument pos:start="161:30" pos:end="161:35"><expr pos:start="161:30" pos:end="161:35"><literal type="string" pos:start="161:30" pos:end="161:35">"xxxx"</literal></expr></argument>, <argument pos:start="161:38" pos:end="161:38"><expr pos:start="161:38" pos:end="161:38"><literal type="number" pos:start="161:38" pos:end="161:38">4</literal></expr></argument>)</argument_list></call> <operator pos:start="161:41" pos:end="161:42">&amp;&amp;</operator> <operator pos:start="161:44" pos:end="161:44">!</operator><call pos:start="161:45" pos:end="161:70"><name pos:start="161:45" pos:end="161:50">memcmp</name><argument_list pos:start="161:51" pos:end="161:70">(<argument pos:start="161:52" pos:end="161:58"><expr pos:start="161:52" pos:end="161:58"><name pos:start="161:52" pos:end="161:55">obuf</name><operator pos:start="161:56" pos:end="161:56">+</operator><name pos:start="161:57" pos:end="161:58">sz</name></expr></argument>, <argument pos:start="161:61" pos:end="161:66"><expr pos:start="161:61" pos:end="161:66"><literal type="string" pos:start="161:61" pos:end="161:66">"yyyy"</literal></expr></argument>, <argument pos:start="161:69" pos:end="161:69"><expr pos:start="161:69" pos:end="161:69"><literal type="number" pos:start="161:69" pos:end="161:69">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:19"><expr pos:start="163:5" pos:end="163:18"><call pos:start="163:5" pos:end="163:18"><name pos:start="163:5" pos:end="163:10">g_free</name><argument_list pos:start="163:11" pos:end="163:18">(<argument pos:start="163:12" pos:end="163:17"><expr pos:start="163:12" pos:end="163:17"><name pos:start="163:12" pos:end="163:15">obuf</name><operator pos:start="163:16" pos:end="163:16">-</operator><literal type="number" pos:start="163:17" pos:end="163:17">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:24"><expr pos:start="165:5" pos:end="165:23"><call pos:start="165:5" pos:end="165:23"><name pos:start="165:5" pos:end="165:12">iov_free</name><argument_list pos:start="165:13" pos:end="165:23">(<argument pos:start="165:14" pos:end="165:16"><expr pos:start="165:14" pos:end="165:16"><name pos:start="165:14" pos:end="165:16">iov</name></expr></argument>, <argument pos:start="165:19" pos:end="165:22"><expr pos:start="165:19" pos:end="165:22"><name pos:start="165:19" pos:end="165:22">niov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
