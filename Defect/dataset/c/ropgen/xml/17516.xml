<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17516.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:33"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:26">attribute_align_arg</name> <name pos:start="1:28" pos:end="1:31">void</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:52">frame_worker_thread</name><parameter_list pos:start="1:53" pos:end="1:63">(<parameter pos:start="1:54" pos:end="1:62"><decl pos:start="1:54" pos:end="1:62"><type pos:start="1:54" pos:end="1:59"><name pos:start="1:54" pos:end="1:57">void</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:16">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">PerThreadContext</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:23">p</name> <init pos:start="5:25" pos:end="5:29">= <expr pos:start="5:27" pos:end="5:29"><name pos:start="5:27" pos:end="5:29">arg</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">FrameThreadContext</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:28">fctx</name> <init pos:start="7:30" pos:end="7:40">= <expr pos:start="7:32" pos:end="7:40"><name pos:start="7:32" pos:end="7:40"><name pos:start="7:32" pos:end="7:32">p</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:40">parent</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">AVCodecContext</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:25">avctx</name> <init pos:start="9:27" pos:end="9:36">= <expr pos:start="9:29" pos:end="9:36"><name pos:start="9:29" pos:end="9:36"><name pos:start="9:29" pos:end="9:29">p</name><operator pos:start="9:30" pos:end="9:31">-&gt;</operator><name pos:start="9:32" pos:end="9:36">avctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:39"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">AVCodec</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:24">codec</name> <init pos:start="11:26" pos:end="11:39">= <expr pos:start="11:28" pos:end="11:39"><name pos:start="11:28" pos:end="11:39"><name pos:start="11:28" pos:end="11:32">avctx</name><operator pos:start="11:33" pos:end="11:34">-&gt;</operator><name pos:start="11:35" pos:end="11:39">codec</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:34"><expr pos:start="15:5" pos:end="15:33"><call pos:start="15:5" pos:end="15:33"><name pos:start="15:5" pos:end="15:22">pthread_mutex_lock</name><argument_list pos:start="15:23" pos:end="15:33">(<argument pos:start="15:24" pos:end="15:32"><expr pos:start="15:24" pos:end="15:32"><operator pos:start="15:24" pos:end="15:24">&amp;</operator><name pos:start="15:25" pos:end="15:32"><name pos:start="15:25" pos:end="15:25">p</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:32">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="17:5" pos:end="89:5">while <condition pos:start="17:11" pos:end="17:13">(<expr pos:start="17:12" pos:end="17:12"><literal type="number" pos:start="17:12" pos:end="17:12">1</literal></expr>)</condition> <block pos:start="17:15" pos:end="89:5">{<block_content pos:start="19:13" pos:end="87:49">

            <while pos:start="19:13" pos:end="21:61">while <condition pos:start="19:19" pos:end="19:63">(<expr pos:start="19:20" pos:end="19:62"><name pos:start="19:20" pos:end="19:27"><name pos:start="19:20" pos:end="19:20">p</name><operator pos:start="19:21" pos:end="19:22">-&gt;</operator><name pos:start="19:23" pos:end="19:27">state</name></name> <operator pos:start="19:29" pos:end="19:30">==</operator> <name pos:start="19:32" pos:end="19:48">STATE_INPUT_READY</name> <operator pos:start="19:50" pos:end="19:51">&amp;&amp;</operator> <operator pos:start="19:53" pos:end="19:53">!</operator><name pos:start="19:54" pos:end="19:62"><name pos:start="19:54" pos:end="19:57">fctx</name><operator pos:start="19:58" pos:end="19:59">-&gt;</operator><name pos:start="19:60" pos:end="19:62">die</name></name></expr>)</condition><block type="pseudo" pos:start="21:17" pos:end="21:61"><block_content pos:start="21:17" pos:end="21:61">

                <expr_stmt pos:start="21:17" pos:end="21:61"><expr pos:start="21:17" pos:end="21:60"><call pos:start="21:17" pos:end="21:60"><name pos:start="21:17" pos:end="21:33">pthread_cond_wait</name><argument_list pos:start="21:34" pos:end="21:60">(<argument pos:start="21:35" pos:end="21:48"><expr pos:start="21:35" pos:end="21:48"><operator pos:start="21:35" pos:end="21:35">&amp;</operator><name pos:start="21:36" pos:end="21:48"><name pos:start="21:36" pos:end="21:36">p</name><operator pos:start="21:37" pos:end="21:38">-&gt;</operator><name pos:start="21:39" pos:end="21:48">input_cond</name></name></expr></argument>, <argument pos:start="21:51" pos:end="21:59"><expr pos:start="21:51" pos:end="21:59"><operator pos:start="21:51" pos:end="21:51">&amp;</operator><name pos:start="21:52" pos:end="21:59"><name pos:start="21:52" pos:end="21:52">p</name><operator pos:start="21:53" pos:end="21:54">-&gt;</operator><name pos:start="21:55" pos:end="21:59">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>



        <if_stmt pos:start="25:9" pos:end="25:29"><if pos:start="25:9" pos:end="25:29">if <condition pos:start="25:12" pos:end="25:22">(<expr pos:start="25:13" pos:end="25:21"><name pos:start="25:13" pos:end="25:21"><name pos:start="25:13" pos:end="25:16">fctx</name><operator pos:start="25:17" pos:end="25:18">-&gt;</operator><name pos:start="25:19" pos:end="25:21">die</name></name></expr>)</condition><block type="pseudo" pos:start="25:24" pos:end="25:29"><block_content pos:start="25:24" pos:end="25:29"> <break pos:start="25:24" pos:end="25:29">break;</break></block_content></block></if></if_stmt>



        <if_stmt pos:start="29:9" pos:end="39:42"><if pos:start="29:9" pos:end="39:42">if <condition pos:start="29:12" pos:end="37:64">(<expr pos:start="29:13" pos:end="37:63"><operator pos:start="29:13" pos:end="29:13">!</operator><name pos:start="29:14" pos:end="29:41"><name pos:start="29:14" pos:end="29:18">codec</name><operator pos:start="29:19" pos:end="29:20">-&gt;</operator><name pos:start="29:21" pos:end="29:41">update_thread_context</name></name> <operator pos:start="29:43" pos:end="29:44">&amp;&amp;</operator> <operator pos:start="29:46" pos:end="29:46">(</operator><name pos:start="29:47" pos:end="29:74"><name pos:start="29:47" pos:end="29:51">avctx</name><operator pos:start="29:52" pos:end="29:53">-&gt;</operator><name pos:start="29:54" pos:end="29:74">thread_safe_callbacks</name></name> <operator pos:start="29:76" pos:end="29:77">||</operator> <operator pos:start="29:79" pos:end="32:0">(</operator>

<cpp:if pos:start="31:1" pos:end="31:21">#<cpp:directive pos:start="31:2" pos:end="31:3">if</cpp:directive> <expr pos:start="31:5" pos:end="31:21"><name pos:start="31:5" pos:end="31:21">FF_API_GET_BUFFER</name></expr></cpp:if>

            <operator pos:start="33:13" pos:end="33:13">!</operator><name pos:start="33:14" pos:end="33:30"><name pos:start="33:14" pos:end="33:18">avctx</name><operator pos:start="33:19" pos:end="33:20">-&gt;</operator><name pos:start="33:21" pos:end="33:30">get_buffer</name></name> <operator pos:start="33:32" pos:end="36:0">&amp;&amp;</operator>

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>

            <name pos:start="37:13" pos:end="37:30"><name pos:start="37:13" pos:end="37:17">avctx</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:30">get_buffer2</name></name> <operator pos:start="37:32" pos:end="37:33">==</operator> <name pos:start="37:35" pos:end="37:61">avcodec_default_get_buffer2</name><operator pos:start="37:62" pos:end="37:62">)</operator><operator pos:start="37:63" pos:end="37:63">)</operator></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:42"><block_content pos:start="39:13" pos:end="39:42">

            <expr_stmt pos:start="39:13" pos:end="39:42"><expr pos:start="39:13" pos:end="39:41"><call pos:start="39:13" pos:end="39:41"><name pos:start="39:13" pos:end="39:34">ff_thread_finish_setup</name><argument_list pos:start="39:35" pos:end="39:41">(<argument pos:start="39:36" pos:end="39:40"><expr pos:start="39:36" pos:end="39:40"><name pos:start="39:36" pos:end="39:40">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:46"><expr pos:start="43:9" pos:end="43:45"><call pos:start="43:9" pos:end="43:45"><name pos:start="43:9" pos:end="43:34">avcodec_get_frame_defaults</name><argument_list pos:start="43:35" pos:end="43:45">(<argument pos:start="43:36" pos:end="43:44"><expr pos:start="43:36" pos:end="43:44"><operator pos:start="43:36" pos:end="43:36">&amp;</operator><name pos:start="43:37" pos:end="43:44"><name pos:start="43:37" pos:end="43:37">p</name><operator pos:start="43:38" pos:end="43:39">-&gt;</operator><name pos:start="43:40" pos:end="43:44">frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:25"><expr pos:start="45:9" pos:end="45:24"><name pos:start="45:9" pos:end="45:20"><name pos:start="45:9" pos:end="45:9">p</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:20">got_frame</name></name> <operator pos:start="45:22" pos:end="45:22">=</operator> <literal type="number" pos:start="45:24" pos:end="45:24">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:78"><expr pos:start="47:9" pos:end="47:77"><name pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:9">p</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:17">result</name></name> <operator pos:start="47:19" pos:end="47:19">=</operator> <call pos:start="47:21" pos:end="47:77"><name pos:start="47:21" pos:end="47:33"><name pos:start="47:21" pos:end="47:25">codec</name><operator pos:start="47:26" pos:end="47:27">-&gt;</operator><name pos:start="47:28" pos:end="47:33">decode</name></name><argument_list pos:start="47:34" pos:end="47:77">(<argument pos:start="47:35" pos:end="47:39"><expr pos:start="47:35" pos:end="47:39"><name pos:start="47:35" pos:end="47:39">avctx</name></expr></argument>, <argument pos:start="47:42" pos:end="47:50"><expr pos:start="47:42" pos:end="47:50"><operator pos:start="47:42" pos:end="47:42">&amp;</operator><name pos:start="47:43" pos:end="47:50"><name pos:start="47:43" pos:end="47:43">p</name><operator pos:start="47:44" pos:end="47:45">-&gt;</operator><name pos:start="47:46" pos:end="47:50">frame</name></name></expr></argument>, <argument pos:start="47:53" pos:end="47:65"><expr pos:start="47:53" pos:end="47:65"><operator pos:start="47:53" pos:end="47:53">&amp;</operator><name pos:start="47:54" pos:end="47:65"><name pos:start="47:54" pos:end="47:54">p</name><operator pos:start="47:55" pos:end="47:56">-&gt;</operator><name pos:start="47:57" pos:end="47:65">got_frame</name></name></expr></argument>, <argument pos:start="47:68" pos:end="47:76"><expr pos:start="47:68" pos:end="47:76"><operator pos:start="47:68" pos:end="47:68">&amp;</operator><name pos:start="47:69" pos:end="47:76"><name pos:start="47:69" pos:end="47:69">p</name><operator pos:start="47:70" pos:end="47:71">-&gt;</operator><name pos:start="47:72" pos:end="47:76">avpkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="51:9" pos:end="53:42">/* many decoders assign whole AVFrames, thus overwriting extended_data;

         * make sure it's set correctly */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:47"><expr pos:start="55:9" pos:end="55:46"><name pos:start="55:9" pos:end="55:30"><name pos:start="55:9" pos:end="55:9">p</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:16">frame</name><operator pos:start="55:17" pos:end="55:17">.</operator><name pos:start="55:18" pos:end="55:30">extended_data</name></name> <operator pos:start="55:32" pos:end="55:32">=</operator> <name pos:start="55:34" pos:end="55:46"><name pos:start="55:34" pos:end="55:34">p</name><operator pos:start="55:35" pos:end="55:36">-&gt;</operator><name pos:start="55:37" pos:end="55:41">frame</name><operator pos:start="55:42" pos:end="55:42">.</operator><name pos:start="55:43" pos:end="55:46">data</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="59:9" pos:end="59:72"><if pos:start="59:9" pos:end="59:72">if <condition pos:start="59:12" pos:end="59:41">(<expr pos:start="59:13" pos:end="59:40"><name pos:start="59:13" pos:end="59:20"><name pos:start="59:13" pos:end="59:13">p</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:20">state</name></name> <operator pos:start="59:22" pos:end="59:23">==</operator> <name pos:start="59:25" pos:end="59:40">STATE_SETTING_UP</name></expr>)</condition><block type="pseudo" pos:start="59:43" pos:end="59:72"><block_content pos:start="59:43" pos:end="59:72"> <expr_stmt pos:start="59:43" pos:end="59:72"><expr pos:start="59:43" pos:end="59:71"><call pos:start="59:43" pos:end="59:71"><name pos:start="59:43" pos:end="59:64">ff_thread_finish_setup</name><argument_list pos:start="59:65" pos:end="59:71">(<argument pos:start="59:66" pos:end="59:70"><expr pos:start="59:66" pos:end="59:70"><name pos:start="59:66" pos:end="59:70">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="63:9" pos:end="78:0"><expr pos:start="63:9" pos:end="63:46"><call pos:start="63:9" pos:end="63:46"><name pos:start="63:9" pos:end="63:26">pthread_mutex_lock</name><argument_list pos:start="63:27" pos:end="63:46">(<argument pos:start="63:28" pos:end="63:45"><expr pos:start="63:28" pos:end="63:45"><operator pos:start="63:28" pos:end="63:28">&amp;</operator><name pos:start="63:29" pos:end="63:45"><name pos:start="63:29" pos:end="63:29">p</name><operator pos:start="63:30" pos:end="63:31">-&gt;</operator><name pos:start="63:32" pos:end="63:45">progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="65:1" pos:end="65:5">#<cpp:directive pos:start="65:2" pos:end="65:3">if</cpp:directive> <expr pos:start="65:5" pos:end="65:5"><literal type="number" pos:start="65:5" pos:end="65:5">0</literal></expr></cpp:if> <comment type="line" pos:start="65:7" pos:end="65:20">//BUFREF-FIXME</comment>

        for (i = 0; i &lt; MAX_BUFFERS; i++)

            if (p-&gt;progress_used[i] &amp;&amp; (p-&gt;got_frame || p-&gt;result&lt;0 || avctx-&gt;codec_id != AV_CODEC_ID_H264)) {

                p-&gt;progress[i][0] = INT_MAX;

                p-&gt;progress[i][1] = INT_MAX;

            }

<cpp:endif pos:start="77:1" pos:end="77:6">#<cpp:directive pos:start="77:2" pos:end="77:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="79:9" pos:end="79:37"><expr pos:start="79:9" pos:end="79:36"><name pos:start="79:9" pos:end="79:16"><name pos:start="79:9" pos:end="79:9">p</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:16">state</name></name> <operator pos:start="79:18" pos:end="79:18">=</operator> <name pos:start="79:20" pos:end="79:36">STATE_INPUT_READY</name></expr>;</expr_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:50"><expr pos:start="83:9" pos:end="83:49"><call pos:start="83:9" pos:end="83:49"><name pos:start="83:9" pos:end="83:30">pthread_cond_broadcast</name><argument_list pos:start="83:31" pos:end="83:49">(<argument pos:start="83:32" pos:end="83:48"><expr pos:start="83:32" pos:end="83:48"><operator pos:start="83:32" pos:end="83:32">&amp;</operator><name pos:start="83:33" pos:end="83:48"><name pos:start="83:33" pos:end="83:33">p</name><operator pos:start="83:34" pos:end="83:35">-&gt;</operator><name pos:start="83:36" pos:end="83:48">progress_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:45"><expr pos:start="85:9" pos:end="85:44"><call pos:start="85:9" pos:end="85:44"><name pos:start="85:9" pos:end="85:27">pthread_cond_signal</name><argument_list pos:start="85:28" pos:end="85:44">(<argument pos:start="85:29" pos:end="85:43"><expr pos:start="85:29" pos:end="85:43"><operator pos:start="85:29" pos:end="85:29">&amp;</operator><name pos:start="85:30" pos:end="85:43"><name pos:start="85:30" pos:end="85:30">p</name><operator pos:start="85:31" pos:end="85:32">-&gt;</operator><name pos:start="85:33" pos:end="85:43">output_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:49"><expr pos:start="87:9" pos:end="87:48"><call pos:start="87:9" pos:end="87:48"><name pos:start="87:9" pos:end="87:28">pthread_mutex_unlock</name><argument_list pos:start="87:29" pos:end="87:48">(<argument pos:start="87:30" pos:end="87:47"><expr pos:start="87:30" pos:end="87:47"><operator pos:start="87:30" pos:end="87:30">&amp;</operator><name pos:start="87:31" pos:end="87:47"><name pos:start="87:31" pos:end="87:31">p</name><operator pos:start="87:32" pos:end="87:33">-&gt;</operator><name pos:start="87:34" pos:end="87:47">progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="91:5" pos:end="91:36"><expr pos:start="91:5" pos:end="91:35"><call pos:start="91:5" pos:end="91:35"><name pos:start="91:5" pos:end="91:24">pthread_mutex_unlock</name><argument_list pos:start="91:25" pos:end="91:35">(<argument pos:start="91:26" pos:end="91:34"><expr pos:start="91:26" pos:end="91:34"><operator pos:start="91:26" pos:end="91:26">&amp;</operator><name pos:start="91:27" pos:end="91:34"><name pos:start="91:27" pos:end="91:27">p</name><operator pos:start="91:28" pos:end="91:29">-&gt;</operator><name pos:start="91:30" pos:end="91:34">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="95:5" pos:end="95:16">return <expr pos:start="95:12" pos:end="95:15"><name pos:start="95:12" pos:end="95:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
