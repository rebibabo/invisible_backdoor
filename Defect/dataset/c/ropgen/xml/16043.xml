<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16043.c" pos:tabs="8"><function pos:start="1:1" pos:end="449:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:34">tcg_out_qemu_ld</name><parameter_list pos:start="1:35" pos:end="1:78">(<parameter pos:start="1:36" pos:end="1:48"><decl pos:start="1:36" pos:end="1:48"><type pos:start="1:36" pos:end="1:48"><name pos:start="1:36" pos:end="1:45">TCGContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:68"><decl pos:start="1:51" pos:end="1:68"><type pos:start="1:51" pos:end="1:68"><specifier pos:start="1:51" pos:end="1:55">const</specifier> <name pos:start="1:57" pos:end="1:62">TCGArg</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:68">args</name></decl></parameter>, <parameter pos:start="1:71" pos:end="1:77"><decl pos:start="1:71" pos:end="1:77"><type pos:start="1:71" pos:end="1:77"><name pos:start="1:71" pos:end="1:73">int</name></type> <name pos:start="1:75" pos:end="1:77">opc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="449:1">{<block_content pos:start="5:5" pos:end="448:0">

    <decl_stmt pos:start="5:5" pos:end="8:0"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:16">addr_reg</name></decl>, <decl pos:start="5:19" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:19" pos:end="5:26">data_reg</name></decl>, <decl pos:start="5:29" pos:end="5:37"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:29" pos:end="5:37">data_reg2</name></decl>, <decl pos:start="5:40" pos:end="5:44"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:40" pos:end="5:44">bswap</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="7:1" pos:end="7:21">#<cpp:directive pos:start="7:2" pos:end="7:6">ifdef</cpp:directive> <name pos:start="7:8" pos:end="7:21">CONFIG_SOFTMMU</name></cpp:ifdef>

    <decl_stmt pos:start="9:5" pos:end="12:0"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">mem_index</name></decl>, <decl pos:start="9:20" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:20" pos:end="9:25">s_bits</name></decl>;</decl_stmt>

<cpp:if pos:start="11:1" pos:end="11:27"># <cpp:directive pos:start="11:3" pos:end="11:4">if</cpp:directive> <expr pos:start="11:6" pos:end="11:27"><name pos:start="11:6" pos:end="11:21">TARGET_LONG_BITS</name> <operator pos:start="11:23" pos:end="11:24">==</operator> <literal type="number" pos:start="11:26" pos:end="11:27">64</literal></expr></cpp:if>

    <decl_stmt pos:start="13:5" pos:end="16:0"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:17">addr_reg2</name></decl>;</decl_stmt>

<cpp:endif pos:start="15:1" pos:end="15:7"># <cpp:directive pos:start="15:3" pos:end="15:7">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="17:5" pos:end="24:0"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">uint32_t</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:23">label_ptr</name></decl>;</decl_stmt>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="23:1" pos:end="23:29">#<cpp:directive pos:start="23:2" pos:end="23:6">ifdef</cpp:directive> <name pos:start="23:8" pos:end="23:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="25:5" pos:end="28:0"><expr pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:9">bswap</name> <operator pos:start="25:11" pos:end="25:11">=</operator> <literal type="number" pos:start="25:13" pos:end="25:13">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="27:1" pos:end="27:5">#<cpp:directive pos:start="27:2" pos:end="27:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="29:5" pos:end="32:0"><expr pos:start="29:5" pos:end="29:13"><name pos:start="29:5" pos:end="29:9">bswap</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <literal type="number" pos:start="29:13" pos:end="29:13">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="33:5" pos:end="33:23"><expr pos:start="33:5" pos:end="33:22"><name pos:start="33:5" pos:end="33:12">data_reg</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <operator pos:start="33:16" pos:end="33:16">*</operator><name pos:start="33:17" pos:end="33:20">args</name><operator pos:start="33:21" pos:end="33:22">++</operator></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:22"><if pos:start="35:5" pos:end="37:28">if <condition pos:start="35:8" pos:end="35:17">(<expr pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:11">opc</name> <operator pos:start="35:13" pos:end="35:14">==</operator> <literal type="number" pos:start="35:16" pos:end="35:16">3</literal></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:28"><block_content pos:start="37:9" pos:end="37:28">

        <expr_stmt pos:start="37:9" pos:end="37:28"><expr pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:17">data_reg2</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <operator pos:start="37:21" pos:end="37:21">*</operator><name pos:start="37:22" pos:end="37:25">args</name><operator pos:start="37:26" pos:end="37:27">++</operator></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="39:5" pos:end="41:22">else<block type="pseudo" pos:start="41:9" pos:end="41:22"><block_content pos:start="41:9" pos:end="41:22">

        <expr_stmt pos:start="41:9" pos:end="41:22"><expr pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:17">data_reg2</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <literal type="number" pos:start="41:21" pos:end="41:21">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="block" pos:start="41:24" pos:end="41:45">/* suppress warning */</comment>

    <expr_stmt pos:start="43:5" pos:end="48:0"><expr pos:start="43:5" pos:end="43:22"><name pos:start="43:5" pos:end="43:12">addr_reg</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <operator pos:start="43:16" pos:end="43:16">*</operator><name pos:start="43:17" pos:end="43:20">args</name><operator pos:start="43:21" pos:end="43:22">++</operator></expr>;</expr_stmt>

<cpp:ifdef pos:start="45:1" pos:end="45:21">#<cpp:directive pos:start="45:2" pos:end="45:6">ifdef</cpp:directive> <name pos:start="45:8" pos:end="45:21">CONFIG_SOFTMMU</name></cpp:ifdef>

<cpp:if pos:start="47:1" pos:end="47:27"># <cpp:directive pos:start="47:3" pos:end="47:4">if</cpp:directive> <expr pos:start="47:6" pos:end="47:27"><name pos:start="47:6" pos:end="47:21">TARGET_LONG_BITS</name> <operator pos:start="47:23" pos:end="47:24">==</operator> <literal type="number" pos:start="47:26" pos:end="47:27">64</literal></expr></cpp:if>

    <expr_stmt pos:start="49:5" pos:end="52:0"><expr pos:start="49:5" pos:end="49:23"><name pos:start="49:5" pos:end="49:13">addr_reg2</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <operator pos:start="49:17" pos:end="49:17">*</operator><name pos:start="49:18" pos:end="49:21">args</name><operator pos:start="49:22" pos:end="49:23">++</operator></expr>;</expr_stmt>

<cpp:endif pos:start="51:1" pos:end="51:7"># <cpp:directive pos:start="51:3" pos:end="51:7">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="53:5" pos:end="53:22"><expr pos:start="53:5" pos:end="53:21"><name pos:start="53:5" pos:end="53:13">mem_index</name> <operator pos:start="53:15" pos:end="53:15">=</operator> <operator pos:start="53:17" pos:end="53:17">*</operator><name pos:start="53:18" pos:end="53:21">args</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="74:0"><expr pos:start="55:5" pos:end="55:20"><name pos:start="55:5" pos:end="55:10">s_bits</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <name pos:start="55:14" pos:end="55:16">opc</name> <operator pos:start="55:18" pos:end="55:18">&amp;</operator> <literal type="number" pos:start="55:20" pos:end="55:20">3</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="59:5" pos:end="67:7">/* Should generate something like the following:

     *  shr r8, addr_reg, #TARGET_PAGE_BITS

     *  and r0, r8, #(CPU_TLB_SIZE - 1)   @ Assumption: CPU_TLB_BITS &lt;= 8

     *  add r0, env, r0 lsl #CPU_TLB_ENTRY_BITS

     */</comment>

<cpp:if pos:start="69:1" pos:end="69:22">#  <cpp:directive pos:start="69:4" pos:end="69:5">if</cpp:directive> <expr pos:start="69:7" pos:end="69:22"><name pos:start="69:7" pos:end="69:18">CPU_TLB_BITS</name> <operator pos:start="69:20" pos:end="69:20">&gt;</operator> <literal type="number" pos:start="69:22" pos:end="69:22">8</literal></expr></cpp:if>

<cpp:error pos:start="71:1" pos:end="71:9">#   <cpp:directive pos:start="71:5" pos:end="71:9">error</cpp:directive></cpp:error>

<cpp:endif pos:start="73:1" pos:end="73:8">#  <cpp:directive pos:start="73:4" pos:end="73:8">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="75:5" pos:end="77:66"><expr pos:start="75:5" pos:end="77:65"><call pos:start="75:5" pos:end="77:65"><name pos:start="75:5" pos:end="75:19">tcg_out_dat_reg</name><argument_list pos:start="75:20" pos:end="77:65">(<argument pos:start="75:21" pos:end="75:21"><expr pos:start="75:21" pos:end="75:21"><name pos:start="75:21" pos:end="75:21">s</name></expr></argument>, <argument pos:start="75:24" pos:end="75:30"><expr pos:start="75:24" pos:end="75:30"><name pos:start="75:24" pos:end="75:30">COND_AL</name></expr></argument>, <argument pos:start="75:33" pos:end="75:41"><expr pos:start="75:33" pos:end="75:41"><name pos:start="75:33" pos:end="75:41">ARITH_MOV</name></expr></argument>, <argument pos:start="75:44" pos:end="75:53"><expr pos:start="75:44" pos:end="75:53"><name pos:start="75:44" pos:end="75:53">TCG_REG_R8</name></expr></argument>,

                    <argument pos:start="77:21" pos:end="77:21"><expr pos:start="77:21" pos:end="77:21"><literal type="number" pos:start="77:21" pos:end="77:21">0</literal></expr></argument>, <argument pos:start="77:24" pos:end="77:31"><expr pos:start="77:24" pos:end="77:31"><name pos:start="77:24" pos:end="77:31">addr_reg</name></expr></argument>, <argument pos:start="77:34" pos:end="77:64"><expr pos:start="77:34" pos:end="77:64"><call pos:start="77:34" pos:end="77:64"><name pos:start="77:34" pos:end="77:46">SHIFT_IMM_LSR</name><argument_list pos:start="77:47" pos:end="77:64">(<argument pos:start="77:48" pos:end="77:63"><expr pos:start="77:48" pos:end="77:63"><name pos:start="77:48" pos:end="77:63">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="81:62"><expr pos:start="79:5" pos:end="81:61"><call pos:start="79:5" pos:end="81:61"><name pos:start="79:5" pos:end="79:19">tcg_out_dat_imm</name><argument_list pos:start="79:20" pos:end="81:61">(<argument pos:start="79:21" pos:end="79:21"><expr pos:start="79:21" pos:end="79:21"><name pos:start="79:21" pos:end="79:21">s</name></expr></argument>, <argument pos:start="79:24" pos:end="79:30"><expr pos:start="79:24" pos:end="79:30"><name pos:start="79:24" pos:end="79:30">COND_AL</name></expr></argument>, <argument pos:start="79:33" pos:end="79:41"><expr pos:start="79:33" pos:end="79:41"><name pos:start="79:33" pos:end="79:41">ARITH_AND</name></expr></argument>,

                    <argument pos:start="81:21" pos:end="81:30"><expr pos:start="81:21" pos:end="81:30"><name pos:start="81:21" pos:end="81:30">TCG_REG_R0</name></expr></argument>, <argument pos:start="81:33" pos:end="81:42"><expr pos:start="81:33" pos:end="81:42"><name pos:start="81:33" pos:end="81:42">TCG_REG_R8</name></expr></argument>, <argument pos:start="81:45" pos:end="81:60"><expr pos:start="81:45" pos:end="81:60"><name pos:start="81:45" pos:end="81:56">CPU_TLB_SIZE</name> <operator pos:start="81:58" pos:end="81:58">-</operator> <literal type="number" pos:start="81:60" pos:end="81:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="85:67"><expr pos:start="83:5" pos:end="85:66"><call pos:start="83:5" pos:end="85:66"><name pos:start="83:5" pos:end="83:19">tcg_out_dat_reg</name><argument_list pos:start="83:20" pos:end="85:66">(<argument pos:start="83:21" pos:end="83:21"><expr pos:start="83:21" pos:end="83:21"><name pos:start="83:21" pos:end="83:21">s</name></expr></argument>, <argument pos:start="83:24" pos:end="83:30"><expr pos:start="83:24" pos:end="83:30"><name pos:start="83:24" pos:end="83:30">COND_AL</name></expr></argument>, <argument pos:start="83:33" pos:end="83:41"><expr pos:start="83:33" pos:end="83:41"><name pos:start="83:33" pos:end="83:41">ARITH_ADD</name></expr></argument>, <argument pos:start="83:44" pos:end="83:53"><expr pos:start="83:44" pos:end="83:53"><name pos:start="83:44" pos:end="83:53">TCG_REG_R0</name></expr></argument>, <argument pos:start="83:56" pos:end="83:64"><expr pos:start="83:56" pos:end="83:64"><name pos:start="83:56" pos:end="83:64">TCG_AREG0</name></expr></argument>,

                    <argument pos:start="85:21" pos:end="85:30"><expr pos:start="85:21" pos:end="85:30"><name pos:start="85:21" pos:end="85:30">TCG_REG_R0</name></expr></argument>, <argument pos:start="85:33" pos:end="85:65"><expr pos:start="85:33" pos:end="85:65"><call pos:start="85:33" pos:end="85:65"><name pos:start="85:33" pos:end="85:45">SHIFT_IMM_LSL</name><argument_list pos:start="85:46" pos:end="85:65">(<argument pos:start="85:47" pos:end="85:64"><expr pos:start="85:47" pos:end="85:64"><name pos:start="85:47" pos:end="85:64">CPU_TLB_ENTRY_BITS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="87:5" pos:end="99:7">/* In the

     *  ldr r1 [r0, #(offsetof(CPUState, tlb_table[mem_index][0].addr_read))]

     * below, the offset is likely to exceed 12 bits if mem_index != 0 and

     * not exceed otherwise, so use an

     *  add r0, r0, #(mem_index * sizeof *CPUState.tlb_table)

     * before.

     */</comment>

    <if_stmt pos:start="101:5" pos:end="107:56"><if pos:start="101:5" pos:end="107:56">if <condition pos:start="101:8" pos:end="101:18">(<expr pos:start="101:9" pos:end="101:17"><name pos:start="101:9" pos:end="101:17">mem_index</name></expr>)</condition><block type="pseudo" pos:start="103:9" pos:end="107:56"><block_content pos:start="103:9" pos:end="107:56">

        <expr_stmt pos:start="103:9" pos:end="107:56"><expr pos:start="103:9" pos:end="107:55"><call pos:start="103:9" pos:end="107:55"><name pos:start="103:9" pos:end="103:23">tcg_out_dat_imm</name><argument_list pos:start="103:24" pos:end="107:55">(<argument pos:start="103:25" pos:end="103:25"><expr pos:start="103:25" pos:end="103:25"><name pos:start="103:25" pos:end="103:25">s</name></expr></argument>, <argument pos:start="103:28" pos:end="103:34"><expr pos:start="103:28" pos:end="103:34"><name pos:start="103:28" pos:end="103:34">COND_AL</name></expr></argument>, <argument pos:start="103:37" pos:end="103:45"><expr pos:start="103:37" pos:end="103:45"><name pos:start="103:37" pos:end="103:45">ARITH_ADD</name></expr></argument>, <argument pos:start="103:48" pos:end="103:57"><expr pos:start="103:48" pos:end="103:57"><name pos:start="103:48" pos:end="103:57">TCG_REG_R0</name></expr></argument>, <argument pos:start="103:60" pos:end="103:69"><expr pos:start="103:60" pos:end="103:69"><name pos:start="103:60" pos:end="103:69">TCG_REG_R0</name></expr></argument>,

                        <argument pos:start="105:25" pos:end="107:54"><expr pos:start="105:25" pos:end="107:54"><operator pos:start="105:25" pos:end="105:25">(</operator><name pos:start="105:26" pos:end="105:34">mem_index</name> <operator pos:start="105:36" pos:end="105:37">&lt;&lt;</operator> <operator pos:start="105:39" pos:end="105:39">(</operator><name pos:start="105:40" pos:end="105:48">TLB_SHIFT</name> <operator pos:start="105:50" pos:end="105:50">&amp;</operator> <literal type="number" pos:start="105:52" pos:end="105:52">1</literal><operator pos:start="105:53" pos:end="105:53">)</operator><operator pos:start="105:54" pos:end="105:54">)</operator> <operator pos:start="105:56" pos:end="105:56">|</operator>

                        <operator pos:start="107:25" pos:end="107:25">(</operator><operator pos:start="107:26" pos:end="107:26">(</operator><literal type="number" pos:start="107:27" pos:end="107:30">16</literal> <operator pos:start="107:30" pos:end="107:30">-</operator> <operator pos:start="107:32" pos:end="107:32">(</operator><name pos:start="107:33" pos:end="107:41">TLB_SHIFT</name> <operator pos:start="107:43" pos:end="107:44">&gt;&gt;</operator> <literal type="number" pos:start="107:46" pos:end="107:46">1</literal><operator pos:start="107:47" pos:end="107:47">)</operator><operator pos:start="107:48" pos:end="107:48">)</operator> <operator pos:start="107:50" pos:end="107:51">&lt;&lt;</operator> <literal type="number" pos:start="107:53" pos:end="107:53">8</literal><operator pos:start="107:54" pos:end="107:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="109:5" pos:end="111:67"><expr pos:start="109:5" pos:end="111:66"><call pos:start="109:5" pos:end="111:66"><name pos:start="109:5" pos:end="109:19">tcg_out_ld32_12</name><argument_list pos:start="109:20" pos:end="111:66">(<argument pos:start="109:21" pos:end="109:21"><expr pos:start="109:21" pos:end="109:21"><name pos:start="109:21" pos:end="109:21">s</name></expr></argument>, <argument pos:start="109:24" pos:end="109:30"><expr pos:start="109:24" pos:end="109:30"><name pos:start="109:24" pos:end="109:30">COND_AL</name></expr></argument>, <argument pos:start="109:33" pos:end="109:42"><expr pos:start="109:33" pos:end="109:42"><name pos:start="109:33" pos:end="109:42">TCG_REG_R1</name></expr></argument>, <argument pos:start="109:45" pos:end="109:54"><expr pos:start="109:45" pos:end="109:54"><name pos:start="109:45" pos:end="109:54">TCG_REG_R0</name></expr></argument>,

                    <argument pos:start="111:21" pos:end="111:65"><expr pos:start="111:21" pos:end="111:65"><call pos:start="111:21" pos:end="111:65"><name pos:start="111:21" pos:end="111:28">offsetof</name><argument_list pos:start="111:29" pos:end="111:65">(<argument pos:start="111:30" pos:end="111:37"><expr pos:start="111:30" pos:end="111:37"><name pos:start="111:30" pos:end="111:37">CPUState</name></expr></argument>, <argument pos:start="111:40" pos:end="111:64"><expr pos:start="111:40" pos:end="111:64"><name pos:start="111:40" pos:end="111:54"><name pos:start="111:40" pos:end="111:48">tlb_table</name><index pos:start="111:49" pos:end="111:51">[<expr pos:start="111:50" pos:end="111:50"><literal type="number" pos:start="111:50" pos:end="111:50">0</literal></expr>]</index><index pos:start="111:52" pos:end="111:54">[<expr pos:start="111:53" pos:end="111:53"><literal type="number" pos:start="111:53" pos:end="111:53">0</literal></expr>]</index></name><operator pos:start="111:55" pos:end="111:55">.</operator><name pos:start="111:56" pos:end="111:64">addr_read</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="115:65"><expr pos:start="113:5" pos:end="115:64"><call pos:start="113:5" pos:end="115:64"><name pos:start="113:5" pos:end="113:19">tcg_out_dat_reg</name><argument_list pos:start="113:20" pos:end="115:64">(<argument pos:start="113:21" pos:end="113:21"><expr pos:start="113:21" pos:end="113:21"><name pos:start="113:21" pos:end="113:21">s</name></expr></argument>, <argument pos:start="113:24" pos:end="113:30"><expr pos:start="113:24" pos:end="113:30"><name pos:start="113:24" pos:end="113:30">COND_AL</name></expr></argument>, <argument pos:start="113:33" pos:end="113:41"><expr pos:start="113:33" pos:end="113:41"><name pos:start="113:33" pos:end="113:41">ARITH_CMP</name></expr></argument>, <argument pos:start="113:44" pos:end="113:44"><expr pos:start="113:44" pos:end="113:44"><literal type="number" pos:start="113:44" pos:end="113:44">0</literal></expr></argument>, <argument pos:start="113:47" pos:end="113:56"><expr pos:start="113:47" pos:end="113:56"><name pos:start="113:47" pos:end="113:56">TCG_REG_R1</name></expr></argument>,

                    <argument pos:start="115:21" pos:end="115:30"><expr pos:start="115:21" pos:end="115:30"><name pos:start="115:21" pos:end="115:30">TCG_REG_R8</name></expr></argument>, <argument pos:start="115:33" pos:end="115:63"><expr pos:start="115:33" pos:end="115:63"><call pos:start="115:33" pos:end="115:63"><name pos:start="115:33" pos:end="115:45">SHIFT_IMM_LSL</name><argument_list pos:start="115:46" pos:end="115:63">(<argument pos:start="115:47" pos:end="115:62"><expr pos:start="115:47" pos:end="115:62"><name pos:start="115:47" pos:end="115:62">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="117:5" pos:end="117:27">/* Check alignment.  */</comment>

    <if_stmt pos:start="119:5" pos:end="126:0"><if pos:start="119:5" pos:end="126:0">if <condition pos:start="119:8" pos:end="119:15">(<expr pos:start="119:9" pos:end="119:14"><name pos:start="119:9" pos:end="119:14">s_bits</name></expr>)</condition><block type="pseudo" pos:start="121:9" pos:end="126:0"><block_content pos:start="121:9" pos:end="126:0">

        <expr_stmt pos:start="121:9" pos:end="126:0"><expr pos:start="121:9" pos:end="123:55"><call pos:start="121:9" pos:end="123:55"><name pos:start="121:9" pos:end="121:23">tcg_out_dat_imm</name><argument_list pos:start="121:24" pos:end="123:55">(<argument pos:start="121:25" pos:end="121:25"><expr pos:start="121:25" pos:end="121:25"><name pos:start="121:25" pos:end="121:25">s</name></expr></argument>, <argument pos:start="121:28" pos:end="121:34"><expr pos:start="121:28" pos:end="121:34"><name pos:start="121:28" pos:end="121:34">COND_EQ</name></expr></argument>, <argument pos:start="121:37" pos:end="121:45"><expr pos:start="121:37" pos:end="121:45"><name pos:start="121:37" pos:end="121:45">ARITH_TST</name></expr></argument>,

                        <argument pos:start="123:25" pos:end="123:25"><expr pos:start="123:25" pos:end="123:25"><literal type="number" pos:start="123:25" pos:end="123:25">0</literal></expr></argument>, <argument pos:start="123:28" pos:end="123:35"><expr pos:start="123:28" pos:end="123:35"><name pos:start="123:28" pos:end="123:35">addr_reg</name></expr></argument>, <argument pos:start="123:38" pos:end="123:54"><expr pos:start="123:38" pos:end="123:54"><operator pos:start="123:38" pos:end="123:38">(</operator><literal type="number" pos:start="123:39" pos:end="123:39">1</literal> <operator pos:start="123:41" pos:end="123:42">&lt;&lt;</operator> <name pos:start="123:44" pos:end="123:49">s_bits</name><operator pos:start="123:50" pos:end="123:50">)</operator> <operator pos:start="123:52" pos:end="123:52">-</operator> <literal type="number" pos:start="123:54" pos:end="123:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if pos:start="125:1" pos:end="125:28">#  <cpp:directive pos:start="125:4" pos:end="125:5">if</cpp:directive> <expr pos:start="125:7" pos:end="125:28"><name pos:start="125:7" pos:end="125:22">TARGET_LONG_BITS</name> <operator pos:start="125:24" pos:end="125:25">==</operator> <literal type="number" pos:start="125:27" pos:end="125:28">64</literal></expr></cpp:if>

    <comment type="block" pos:start="127:5" pos:end="129:28">/* XXX: possibly we could use a block data load or writeback in

     * the first access.  */</comment>

    <expr_stmt pos:start="131:5" pos:end="133:71"><expr pos:start="131:5" pos:end="133:70"><call pos:start="131:5" pos:end="133:70"><name pos:start="131:5" pos:end="131:19">tcg_out_ld32_12</name><argument_list pos:start="131:20" pos:end="133:70">(<argument pos:start="131:21" pos:end="131:21"><expr pos:start="131:21" pos:end="131:21"><name pos:start="131:21" pos:end="131:21">s</name></expr></argument>, <argument pos:start="131:24" pos:end="131:30"><expr pos:start="131:24" pos:end="131:30"><name pos:start="131:24" pos:end="131:30">COND_EQ</name></expr></argument>, <argument pos:start="131:33" pos:end="131:42"><expr pos:start="131:33" pos:end="131:42"><name pos:start="131:33" pos:end="131:42">TCG_REG_R1</name></expr></argument>, <argument pos:start="131:45" pos:end="131:54"><expr pos:start="131:45" pos:end="131:54"><name pos:start="131:45" pos:end="131:54">TCG_REG_R0</name></expr></argument>,

                    <argument pos:start="133:21" pos:end="133:69"><expr pos:start="133:21" pos:end="133:69"><call pos:start="133:21" pos:end="133:65"><name pos:start="133:21" pos:end="133:28">offsetof</name><argument_list pos:start="133:29" pos:end="133:65">(<argument pos:start="133:30" pos:end="133:37"><expr pos:start="133:30" pos:end="133:37"><name pos:start="133:30" pos:end="133:37">CPUState</name></expr></argument>, <argument pos:start="133:40" pos:end="133:64"><expr pos:start="133:40" pos:end="133:64"><name pos:start="133:40" pos:end="133:54"><name pos:start="133:40" pos:end="133:48">tlb_table</name><index pos:start="133:49" pos:end="133:51">[<expr pos:start="133:50" pos:end="133:50"><literal type="number" pos:start="133:50" pos:end="133:50">0</literal></expr>]</index><index pos:start="133:52" pos:end="133:54">[<expr pos:start="133:53" pos:end="133:53"><literal type="number" pos:start="133:53" pos:end="133:53">0</literal></expr>]</index></name><operator pos:start="133:55" pos:end="133:55">.</operator><name pos:start="133:56" pos:end="133:64">addr_read</name></expr></argument>)</argument_list></call> <operator pos:start="133:67" pos:end="133:67">+</operator> <literal type="number" pos:start="133:69" pos:end="133:69">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="140:0"><expr pos:start="135:5" pos:end="137:60"><call pos:start="135:5" pos:end="137:60"><name pos:start="135:5" pos:end="135:19">tcg_out_dat_reg</name><argument_list pos:start="135:20" pos:end="137:60">(<argument pos:start="135:21" pos:end="135:21"><expr pos:start="135:21" pos:end="135:21"><name pos:start="135:21" pos:end="135:21">s</name></expr></argument>, <argument pos:start="135:24" pos:end="135:30"><expr pos:start="135:24" pos:end="135:30"><name pos:start="135:24" pos:end="135:30">COND_EQ</name></expr></argument>, <argument pos:start="135:33" pos:end="135:41"><expr pos:start="135:33" pos:end="135:41"><name pos:start="135:33" pos:end="135:41">ARITH_CMP</name></expr></argument>, <argument pos:start="135:44" pos:end="135:44"><expr pos:start="135:44" pos:end="135:44"><literal type="number" pos:start="135:44" pos:end="135:44">0</literal></expr></argument>,

                    <argument pos:start="137:21" pos:end="137:30"><expr pos:start="137:21" pos:end="137:30"><name pos:start="137:21" pos:end="137:30">TCG_REG_R1</name></expr></argument>, <argument pos:start="137:33" pos:end="137:41"><expr pos:start="137:33" pos:end="137:41"><name pos:start="137:33" pos:end="137:41">addr_reg2</name></expr></argument>, <argument pos:start="137:44" pos:end="137:59"><expr pos:start="137:44" pos:end="137:59"><call pos:start="137:44" pos:end="137:59"><name pos:start="137:44" pos:end="137:56">SHIFT_IMM_LSL</name><argument_list pos:start="137:57" pos:end="137:59">(<argument pos:start="137:58" pos:end="137:58"><expr pos:start="137:58" pos:end="137:58"><literal type="number" pos:start="137:58" pos:end="137:58">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="139:1" pos:end="139:8">#  <cpp:directive pos:start="139:4" pos:end="139:8">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="141:5" pos:end="143:64"><expr pos:start="141:5" pos:end="143:63"><call pos:start="141:5" pos:end="143:63"><name pos:start="141:5" pos:end="141:19">tcg_out_ld32_12</name><argument_list pos:start="141:20" pos:end="143:63">(<argument pos:start="141:21" pos:end="141:21"><expr pos:start="141:21" pos:end="141:21"><name pos:start="141:21" pos:end="141:21">s</name></expr></argument>, <argument pos:start="141:24" pos:end="141:30"><expr pos:start="141:24" pos:end="141:30"><name pos:start="141:24" pos:end="141:30">COND_EQ</name></expr></argument>, <argument pos:start="141:33" pos:end="141:42"><expr pos:start="141:33" pos:end="141:42"><name pos:start="141:33" pos:end="141:42">TCG_REG_R1</name></expr></argument>, <argument pos:start="141:45" pos:end="141:54"><expr pos:start="141:45" pos:end="141:54"><name pos:start="141:45" pos:end="141:54">TCG_REG_R0</name></expr></argument>,

                    <argument pos:start="143:21" pos:end="143:62"><expr pos:start="143:21" pos:end="143:62"><call pos:start="143:21" pos:end="143:62"><name pos:start="143:21" pos:end="143:28">offsetof</name><argument_list pos:start="143:29" pos:end="143:62">(<argument pos:start="143:30" pos:end="143:37"><expr pos:start="143:30" pos:end="143:37"><name pos:start="143:30" pos:end="143:37">CPUState</name></expr></argument>, <argument pos:start="143:40" pos:end="143:61"><expr pos:start="143:40" pos:end="143:61"><name pos:start="143:40" pos:end="143:54"><name pos:start="143:40" pos:end="143:48">tlb_table</name><index pos:start="143:49" pos:end="143:51">[<expr pos:start="143:50" pos:end="143:50"><literal type="number" pos:start="143:50" pos:end="143:50">0</literal></expr>]</index><index pos:start="143:52" pos:end="143:54">[<expr pos:start="143:53" pos:end="143:53"><literal type="number" pos:start="143:53" pos:end="143:53">0</literal></expr>]</index></name><operator pos:start="143:55" pos:end="143:55">.</operator><name pos:start="143:56" pos:end="143:61">addend</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="147:5" pos:end="225:5">switch <condition pos:start="147:12" pos:end="147:16">(<expr pos:start="147:13" pos:end="147:15"><name pos:start="147:13" pos:end="147:15">opc</name></expr>)</condition> <block pos:start="147:18" pos:end="225:5">{<block_content pos:start="149:5" pos:end="223:14">

    <case pos:start="149:5" pos:end="149:11">case <expr pos:start="149:10" pos:end="149:10"><literal type="number" pos:start="149:10" pos:end="149:10">0</literal></expr>:</case>

        <expr_stmt pos:start="151:9" pos:end="151:66"><expr pos:start="151:9" pos:end="151:65"><call pos:start="151:9" pos:end="151:65"><name pos:start="151:9" pos:end="151:21">tcg_out_ld8_r</name><argument_list pos:start="151:22" pos:end="151:65">(<argument pos:start="151:23" pos:end="151:23"><expr pos:start="151:23" pos:end="151:23"><name pos:start="151:23" pos:end="151:23">s</name></expr></argument>, <argument pos:start="151:26" pos:end="151:32"><expr pos:start="151:26" pos:end="151:32"><name pos:start="151:26" pos:end="151:32">COND_EQ</name></expr></argument>, <argument pos:start="151:35" pos:end="151:42"><expr pos:start="151:35" pos:end="151:42"><name pos:start="151:35" pos:end="151:42">data_reg</name></expr></argument>, <argument pos:start="151:45" pos:end="151:52"><expr pos:start="151:45" pos:end="151:52"><name pos:start="151:45" pos:end="151:52">addr_reg</name></expr></argument>, <argument pos:start="151:55" pos:end="151:64"><expr pos:start="151:55" pos:end="151:64"><name pos:start="151:55" pos:end="151:64">TCG_REG_R1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="153:9" pos:end="153:14">break;</break>

    <case pos:start="155:5" pos:end="155:15">case <expr pos:start="155:10" pos:end="155:14"><literal type="number" pos:start="155:10" pos:end="155:10">0</literal> <operator pos:start="155:12" pos:end="155:12">|</operator> <literal type="number" pos:start="155:14" pos:end="155:14">4</literal></expr>:</case>

        <expr_stmt pos:start="157:9" pos:end="157:67"><expr pos:start="157:9" pos:end="157:66"><call pos:start="157:9" pos:end="157:66"><name pos:start="157:9" pos:end="157:22">tcg_out_ld8s_r</name><argument_list pos:start="157:23" pos:end="157:66">(<argument pos:start="157:24" pos:end="157:24"><expr pos:start="157:24" pos:end="157:24"><name pos:start="157:24" pos:end="157:24">s</name></expr></argument>, <argument pos:start="157:27" pos:end="157:33"><expr pos:start="157:27" pos:end="157:33"><name pos:start="157:27" pos:end="157:33">COND_EQ</name></expr></argument>, <argument pos:start="157:36" pos:end="157:43"><expr pos:start="157:36" pos:end="157:43"><name pos:start="157:36" pos:end="157:43">data_reg</name></expr></argument>, <argument pos:start="157:46" pos:end="157:53"><expr pos:start="157:46" pos:end="157:53"><name pos:start="157:46" pos:end="157:53">addr_reg</name></expr></argument>, <argument pos:start="157:56" pos:end="157:65"><expr pos:start="157:56" pos:end="157:65"><name pos:start="157:56" pos:end="157:65">TCG_REG_R1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="159:9" pos:end="159:14">break;</break>

    <case pos:start="161:5" pos:end="161:11">case <expr pos:start="161:10" pos:end="161:10"><literal type="number" pos:start="161:10" pos:end="161:10">1</literal></expr>:</case>

        <expr_stmt pos:start="163:9" pos:end="163:68"><expr pos:start="163:9" pos:end="163:67"><call pos:start="163:9" pos:end="163:67"><name pos:start="163:9" pos:end="163:23">tcg_out_ld16u_r</name><argument_list pos:start="163:24" pos:end="163:67">(<argument pos:start="163:25" pos:end="163:25"><expr pos:start="163:25" pos:end="163:25"><name pos:start="163:25" pos:end="163:25">s</name></expr></argument>, <argument pos:start="163:28" pos:end="163:34"><expr pos:start="163:28" pos:end="163:34"><name pos:start="163:28" pos:end="163:34">COND_EQ</name></expr></argument>, <argument pos:start="163:37" pos:end="163:44"><expr pos:start="163:37" pos:end="163:44"><name pos:start="163:37" pos:end="163:44">data_reg</name></expr></argument>, <argument pos:start="163:47" pos:end="163:54"><expr pos:start="163:47" pos:end="163:54"><name pos:start="163:47" pos:end="163:54">addr_reg</name></expr></argument>, <argument pos:start="163:57" pos:end="163:66"><expr pos:start="163:57" pos:end="163:66"><name pos:start="163:57" pos:end="163:66">TCG_REG_R1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="165:9" pos:end="169:9"><if pos:start="165:9" pos:end="169:9">if <condition pos:start="165:12" pos:end="165:18">(<expr pos:start="165:13" pos:end="165:17"><name pos:start="165:13" pos:end="165:17">bswap</name></expr>)</condition> <block pos:start="165:20" pos:end="169:9">{<block_content pos:start="167:13" pos:end="167:60">

            <expr_stmt pos:start="167:13" pos:end="167:60"><expr pos:start="167:13" pos:end="167:59"><call pos:start="167:13" pos:end="167:59"><name pos:start="167:13" pos:end="167:27">tcg_out_bswap16</name><argument_list pos:start="167:28" pos:end="167:59">(<argument pos:start="167:29" pos:end="167:29"><expr pos:start="167:29" pos:end="167:29"><name pos:start="167:29" pos:end="167:29">s</name></expr></argument>, <argument pos:start="167:32" pos:end="167:38"><expr pos:start="167:32" pos:end="167:38"><name pos:start="167:32" pos:end="167:38">COND_EQ</name></expr></argument>, <argument pos:start="167:41" pos:end="167:48"><expr pos:start="167:41" pos:end="167:48"><name pos:start="167:41" pos:end="167:48">data_reg</name></expr></argument>, <argument pos:start="167:51" pos:end="167:58"><expr pos:start="167:51" pos:end="167:58"><name pos:start="167:51" pos:end="167:58">data_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="171:9" pos:end="171:14">break;</break>

    <case pos:start="173:5" pos:end="173:15">case <expr pos:start="173:10" pos:end="173:14"><literal type="number" pos:start="173:10" pos:end="173:10">1</literal> <operator pos:start="173:12" pos:end="173:12">|</operator> <literal type="number" pos:start="173:14" pos:end="173:14">4</literal></expr>:</case>

        <if_stmt pos:start="175:9" pos:end="185:9"><if pos:start="175:9" pos:end="181:9">if <condition pos:start="175:12" pos:end="175:18">(<expr pos:start="175:13" pos:end="175:17"><name pos:start="175:13" pos:end="175:17">bswap</name></expr>)</condition> <block pos:start="175:20" pos:end="181:9">{<block_content pos:start="177:13" pos:end="179:61">

            <expr_stmt pos:start="177:13" pos:end="177:72"><expr pos:start="177:13" pos:end="177:71"><call pos:start="177:13" pos:end="177:71"><name pos:start="177:13" pos:end="177:27">tcg_out_ld16u_r</name><argument_list pos:start="177:28" pos:end="177:71">(<argument pos:start="177:29" pos:end="177:29"><expr pos:start="177:29" pos:end="177:29"><name pos:start="177:29" pos:end="177:29">s</name></expr></argument>, <argument pos:start="177:32" pos:end="177:38"><expr pos:start="177:32" pos:end="177:38"><name pos:start="177:32" pos:end="177:38">COND_EQ</name></expr></argument>, <argument pos:start="177:41" pos:end="177:48"><expr pos:start="177:41" pos:end="177:48"><name pos:start="177:41" pos:end="177:48">data_reg</name></expr></argument>, <argument pos:start="177:51" pos:end="177:58"><expr pos:start="177:51" pos:end="177:58"><name pos:start="177:51" pos:end="177:58">addr_reg</name></expr></argument>, <argument pos:start="177:61" pos:end="177:70"><expr pos:start="177:61" pos:end="177:70"><name pos:start="177:61" pos:end="177:70">TCG_REG_R1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:61"><expr pos:start="179:13" pos:end="179:60"><call pos:start="179:13" pos:end="179:60"><name pos:start="179:13" pos:end="179:28">tcg_out_bswap16s</name><argument_list pos:start="179:29" pos:end="179:60">(<argument pos:start="179:30" pos:end="179:30"><expr pos:start="179:30" pos:end="179:30"><name pos:start="179:30" pos:end="179:30">s</name></expr></argument>, <argument pos:start="179:33" pos:end="179:39"><expr pos:start="179:33" pos:end="179:39"><name pos:start="179:33" pos:end="179:39">COND_EQ</name></expr></argument>, <argument pos:start="179:42" pos:end="179:49"><expr pos:start="179:42" pos:end="179:49"><name pos:start="179:42" pos:end="179:49">data_reg</name></expr></argument>, <argument pos:start="179:52" pos:end="179:59"><expr pos:start="179:52" pos:end="179:59"><name pos:start="179:52" pos:end="179:59">data_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="181:11" pos:end="185:9">else <block pos:start="181:16" pos:end="185:9">{<block_content pos:start="183:13" pos:end="183:72">

            <expr_stmt pos:start="183:13" pos:end="183:72"><expr pos:start="183:13" pos:end="183:71"><call pos:start="183:13" pos:end="183:71"><name pos:start="183:13" pos:end="183:27">tcg_out_ld16s_r</name><argument_list pos:start="183:28" pos:end="183:71">(<argument pos:start="183:29" pos:end="183:29"><expr pos:start="183:29" pos:end="183:29"><name pos:start="183:29" pos:end="183:29">s</name></expr></argument>, <argument pos:start="183:32" pos:end="183:38"><expr pos:start="183:32" pos:end="183:38"><name pos:start="183:32" pos:end="183:38">COND_EQ</name></expr></argument>, <argument pos:start="183:41" pos:end="183:48"><expr pos:start="183:41" pos:end="183:48"><name pos:start="183:41" pos:end="183:48">data_reg</name></expr></argument>, <argument pos:start="183:51" pos:end="183:58"><expr pos:start="183:51" pos:end="183:58"><name pos:start="183:51" pos:end="183:58">addr_reg</name></expr></argument>, <argument pos:start="183:61" pos:end="183:70"><expr pos:start="183:61" pos:end="183:70"><name pos:start="183:61" pos:end="183:70">TCG_REG_R1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="187:9" pos:end="187:14">break;</break>

    <case pos:start="189:5" pos:end="189:11">case <expr pos:start="189:10" pos:end="189:10"><literal type="number" pos:start="189:10" pos:end="189:10">2</literal></expr>:</case>

    <default pos:start="191:5" pos:end="191:12">default:</default>

        <expr_stmt pos:start="193:9" pos:end="193:67"><expr pos:start="193:9" pos:end="193:66"><call pos:start="193:9" pos:end="193:66"><name pos:start="193:9" pos:end="193:22">tcg_out_ld32_r</name><argument_list pos:start="193:23" pos:end="193:66">(<argument pos:start="193:24" pos:end="193:24"><expr pos:start="193:24" pos:end="193:24"><name pos:start="193:24" pos:end="193:24">s</name></expr></argument>, <argument pos:start="193:27" pos:end="193:33"><expr pos:start="193:27" pos:end="193:33"><name pos:start="193:27" pos:end="193:33">COND_EQ</name></expr></argument>, <argument pos:start="193:36" pos:end="193:43"><expr pos:start="193:36" pos:end="193:43"><name pos:start="193:36" pos:end="193:43">data_reg</name></expr></argument>, <argument pos:start="193:46" pos:end="193:53"><expr pos:start="193:46" pos:end="193:53"><name pos:start="193:46" pos:end="193:53">addr_reg</name></expr></argument>, <argument pos:start="193:56" pos:end="193:65"><expr pos:start="193:56" pos:end="193:65"><name pos:start="193:56" pos:end="193:65">TCG_REG_R1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="195:9" pos:end="199:9"><if pos:start="195:9" pos:end="199:9">if <condition pos:start="195:12" pos:end="195:18">(<expr pos:start="195:13" pos:end="195:17"><name pos:start="195:13" pos:end="195:17">bswap</name></expr>)</condition> <block pos:start="195:20" pos:end="199:9">{<block_content pos:start="197:13" pos:end="197:60">

            <expr_stmt pos:start="197:13" pos:end="197:60"><expr pos:start="197:13" pos:end="197:59"><call pos:start="197:13" pos:end="197:59"><name pos:start="197:13" pos:end="197:27">tcg_out_bswap32</name><argument_list pos:start="197:28" pos:end="197:59">(<argument pos:start="197:29" pos:end="197:29"><expr pos:start="197:29" pos:end="197:29"><name pos:start="197:29" pos:end="197:29">s</name></expr></argument>, <argument pos:start="197:32" pos:end="197:38"><expr pos:start="197:32" pos:end="197:38"><name pos:start="197:32" pos:end="197:38">COND_EQ</name></expr></argument>, <argument pos:start="197:41" pos:end="197:48"><expr pos:start="197:41" pos:end="197:48"><name pos:start="197:41" pos:end="197:48">data_reg</name></expr></argument>, <argument pos:start="197:51" pos:end="197:58"><expr pos:start="197:51" pos:end="197:58"><name pos:start="197:51" pos:end="197:58">data_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="201:9" pos:end="201:14">break;</break>

    <case pos:start="203:5" pos:end="203:11">case <expr pos:start="203:10" pos:end="203:10"><literal type="number" pos:start="203:10" pos:end="203:10">3</literal></expr>:</case>

        <if_stmt pos:start="205:9" pos:end="221:9"><if pos:start="205:9" pos:end="215:9">if <condition pos:start="205:12" pos:end="205:18">(<expr pos:start="205:13" pos:end="205:17"><name pos:start="205:13" pos:end="205:17">bswap</name></expr>)</condition> <block pos:start="205:20" pos:end="215:9">{<block_content pos:start="207:13" pos:end="213:60">

            <expr_stmt pos:start="207:13" pos:end="207:74"><expr pos:start="207:13" pos:end="207:73"><call pos:start="207:13" pos:end="207:73"><name pos:start="207:13" pos:end="207:28">tcg_out_ld32_rwb</name><argument_list pos:start="207:29" pos:end="207:73">(<argument pos:start="207:30" pos:end="207:30"><expr pos:start="207:30" pos:end="207:30"><name pos:start="207:30" pos:end="207:30">s</name></expr></argument>, <argument pos:start="207:33" pos:end="207:39"><expr pos:start="207:33" pos:end="207:39"><name pos:start="207:33" pos:end="207:39">COND_EQ</name></expr></argument>, <argument pos:start="207:42" pos:end="207:50"><expr pos:start="207:42" pos:end="207:50"><name pos:start="207:42" pos:end="207:50">data_reg2</name></expr></argument>, <argument pos:start="207:53" pos:end="207:62"><expr pos:start="207:53" pos:end="207:62"><name pos:start="207:53" pos:end="207:62">TCG_REG_R1</name></expr></argument>, <argument pos:start="207:65" pos:end="207:72"><expr pos:start="207:65" pos:end="207:72"><name pos:start="207:65" pos:end="207:72">addr_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="209:13" pos:end="209:65"><expr pos:start="209:13" pos:end="209:64"><call pos:start="209:13" pos:end="209:64"><name pos:start="209:13" pos:end="209:27">tcg_out_ld32_12</name><argument_list pos:start="209:28" pos:end="209:64">(<argument pos:start="209:29" pos:end="209:29"><expr pos:start="209:29" pos:end="209:29"><name pos:start="209:29" pos:end="209:29">s</name></expr></argument>, <argument pos:start="209:32" pos:end="209:38"><expr pos:start="209:32" pos:end="209:38"><name pos:start="209:32" pos:end="209:38">COND_EQ</name></expr></argument>, <argument pos:start="209:41" pos:end="209:48"><expr pos:start="209:41" pos:end="209:48"><name pos:start="209:41" pos:end="209:48">data_reg</name></expr></argument>, <argument pos:start="209:51" pos:end="209:60"><expr pos:start="209:51" pos:end="209:60"><name pos:start="209:51" pos:end="209:60">TCG_REG_R1</name></expr></argument>, <argument pos:start="209:63" pos:end="209:63"><expr pos:start="209:63" pos:end="209:63"><literal type="number" pos:start="209:63" pos:end="209:63">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:62"><expr pos:start="211:13" pos:end="211:61"><call pos:start="211:13" pos:end="211:61"><name pos:start="211:13" pos:end="211:27">tcg_out_bswap32</name><argument_list pos:start="211:28" pos:end="211:61">(<argument pos:start="211:29" pos:end="211:29"><expr pos:start="211:29" pos:end="211:29"><name pos:start="211:29" pos:end="211:29">s</name></expr></argument>, <argument pos:start="211:32" pos:end="211:38"><expr pos:start="211:32" pos:end="211:38"><name pos:start="211:32" pos:end="211:38">COND_EQ</name></expr></argument>, <argument pos:start="211:41" pos:end="211:49"><expr pos:start="211:41" pos:end="211:49"><name pos:start="211:41" pos:end="211:49">data_reg2</name></expr></argument>, <argument pos:start="211:52" pos:end="211:60"><expr pos:start="211:52" pos:end="211:60"><name pos:start="211:52" pos:end="211:60">data_reg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:60"><expr pos:start="213:13" pos:end="213:59"><call pos:start="213:13" pos:end="213:59"><name pos:start="213:13" pos:end="213:27">tcg_out_bswap32</name><argument_list pos:start="213:28" pos:end="213:59">(<argument pos:start="213:29" pos:end="213:29"><expr pos:start="213:29" pos:end="213:29"><name pos:start="213:29" pos:end="213:29">s</name></expr></argument>, <argument pos:start="213:32" pos:end="213:38"><expr pos:start="213:32" pos:end="213:38"><name pos:start="213:32" pos:end="213:38">COND_EQ</name></expr></argument>, <argument pos:start="213:41" pos:end="213:48"><expr pos:start="213:41" pos:end="213:48"><name pos:start="213:41" pos:end="213:48">data_reg</name></expr></argument>, <argument pos:start="213:51" pos:end="213:58"><expr pos:start="213:51" pos:end="213:58"><name pos:start="213:51" pos:end="213:58">data_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="215:11" pos:end="221:9">else <block pos:start="215:16" pos:end="221:9">{<block_content pos:start="217:13" pos:end="219:66">

            <expr_stmt pos:start="217:13" pos:end="217:73"><expr pos:start="217:13" pos:end="217:72"><call pos:start="217:13" pos:end="217:72"><name pos:start="217:13" pos:end="217:28">tcg_out_ld32_rwb</name><argument_list pos:start="217:29" pos:end="217:72">(<argument pos:start="217:30" pos:end="217:30"><expr pos:start="217:30" pos:end="217:30"><name pos:start="217:30" pos:end="217:30">s</name></expr></argument>, <argument pos:start="217:33" pos:end="217:39"><expr pos:start="217:33" pos:end="217:39"><name pos:start="217:33" pos:end="217:39">COND_EQ</name></expr></argument>, <argument pos:start="217:42" pos:end="217:49"><expr pos:start="217:42" pos:end="217:49"><name pos:start="217:42" pos:end="217:49">data_reg</name></expr></argument>, <argument pos:start="217:52" pos:end="217:61"><expr pos:start="217:52" pos:end="217:61"><name pos:start="217:52" pos:end="217:61">TCG_REG_R1</name></expr></argument>, <argument pos:start="217:64" pos:end="217:71"><expr pos:start="217:64" pos:end="217:71"><name pos:start="217:64" pos:end="217:71">addr_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:66"><expr pos:start="219:13" pos:end="219:65"><call pos:start="219:13" pos:end="219:65"><name pos:start="219:13" pos:end="219:27">tcg_out_ld32_12</name><argument_list pos:start="219:28" pos:end="219:65">(<argument pos:start="219:29" pos:end="219:29"><expr pos:start="219:29" pos:end="219:29"><name pos:start="219:29" pos:end="219:29">s</name></expr></argument>, <argument pos:start="219:32" pos:end="219:38"><expr pos:start="219:32" pos:end="219:38"><name pos:start="219:32" pos:end="219:38">COND_EQ</name></expr></argument>, <argument pos:start="219:41" pos:end="219:49"><expr pos:start="219:41" pos:end="219:49"><name pos:start="219:41" pos:end="219:49">data_reg2</name></expr></argument>, <argument pos:start="219:52" pos:end="219:61"><expr pos:start="219:52" pos:end="219:61"><name pos:start="219:52" pos:end="219:61">TCG_REG_R1</name></expr></argument>, <argument pos:start="219:64" pos:end="219:64"><expr pos:start="219:64" pos:end="219:64"><literal type="number" pos:start="219:64" pos:end="219:64">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="223:9" pos:end="223:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="229:5" pos:end="229:37"><expr pos:start="229:5" pos:end="229:36"><name pos:start="229:5" pos:end="229:13">label_ptr</name> <operator pos:start="229:15" pos:end="229:15">=</operator> <operator pos:start="229:17" pos:end="229:17">(</operator><name pos:start="229:18" pos:end="229:21">void</name> <operator pos:start="229:23" pos:end="229:23">*</operator><operator pos:start="229:24" pos:end="229:24">)</operator> <name pos:start="229:26" pos:end="229:36"><name pos:start="229:26" pos:end="229:26">s</name><operator pos:start="229:27" pos:end="229:28">-&gt;</operator><name pos:start="229:29" pos:end="229:36">code_ptr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="231:5" pos:end="231:29"><expr pos:start="231:5" pos:end="231:28"><call pos:start="231:5" pos:end="231:28"><name pos:start="231:5" pos:end="231:13">tcg_out_b</name><argument_list pos:start="231:14" pos:end="231:28">(<argument pos:start="231:15" pos:end="231:15"><expr pos:start="231:15" pos:end="231:15"><name pos:start="231:15" pos:end="231:15">s</name></expr></argument>, <argument pos:start="231:18" pos:end="231:24"><expr pos:start="231:18" pos:end="231:24"><name pos:start="231:18" pos:end="231:24">COND_EQ</name></expr></argument>, <argument pos:start="231:27" pos:end="231:27"><expr pos:start="231:27" pos:end="231:27"><literal type="number" pos:start="231:27" pos:end="231:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="235:5" pos:end="235:66">/* TODO: move this code to where the constants pool will be */</comment>

    <if_stmt pos:start="237:5" pos:end="246:0"><if pos:start="237:5" pos:end="246:0">if <condition pos:start="237:8" pos:end="237:31">(<expr pos:start="237:9" pos:end="237:30"><name pos:start="237:9" pos:end="237:16">addr_reg</name> <operator pos:start="237:18" pos:end="237:19">!=</operator> <name pos:start="237:21" pos:end="237:30">TCG_REG_R0</name></expr>)</condition> <block pos:start="237:33" pos:end="246:0">{<block_content pos:start="239:9" pos:end="241:67">

        <expr_stmt pos:start="239:9" pos:end="241:67"><expr pos:start="239:9" pos:end="241:66"><call pos:start="239:9" pos:end="241:66"><name pos:start="239:9" pos:end="239:23">tcg_out_dat_reg</name><argument_list pos:start="239:24" pos:end="241:66">(<argument pos:start="239:25" pos:end="239:25"><expr pos:start="239:25" pos:end="239:25"><name pos:start="239:25" pos:end="239:25">s</name></expr></argument>, <argument pos:start="239:28" pos:end="239:34"><expr pos:start="239:28" pos:end="239:34"><name pos:start="239:28" pos:end="239:34">COND_AL</name></expr></argument>, <argument pos:start="239:37" pos:end="239:45"><expr pos:start="239:37" pos:end="239:45"><name pos:start="239:37" pos:end="239:45">ARITH_MOV</name></expr></argument>,

                        <argument pos:start="241:25" pos:end="241:34"><expr pos:start="241:25" pos:end="241:34"><name pos:start="241:25" pos:end="241:34">TCG_REG_R0</name></expr></argument>, <argument pos:start="241:37" pos:end="241:37"><expr pos:start="241:37" pos:end="241:37"><literal type="number" pos:start="241:37" pos:end="241:37">0</literal></expr></argument>, <argument pos:start="241:40" pos:end="241:47"><expr pos:start="241:40" pos:end="241:47"><name pos:start="241:40" pos:end="241:47">addr_reg</name></expr></argument>, <argument pos:start="241:50" pos:end="241:65"><expr pos:start="241:50" pos:end="241:65"><call pos:start="241:50" pos:end="241:65"><name pos:start="241:50" pos:end="241:62">SHIFT_IMM_LSL</name><argument_list pos:start="241:63" pos:end="241:65">(<argument pos:start="241:64" pos:end="241:64"><expr pos:start="241:64" pos:end="241:64"><literal type="number" pos:start="241:64" pos:end="241:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:if pos:start="245:1" pos:end="245:27"># <cpp:directive pos:start="245:3" pos:end="245:4">if</cpp:directive> <expr pos:start="245:6" pos:end="245:27"><name pos:start="245:6" pos:end="245:21">TARGET_LONG_BITS</name> <operator pos:start="245:23" pos:end="245:24">==</operator> <literal type="number" pos:start="245:26" pos:end="245:27">32</literal></expr></cpp:if>

    <expr_stmt pos:start="247:5" pos:end="250:0"><expr pos:start="247:5" pos:end="247:68"><call pos:start="247:5" pos:end="247:68"><name pos:start="247:5" pos:end="247:19">tcg_out_dat_imm</name><argument_list pos:start="247:20" pos:end="247:68">(<argument pos:start="247:21" pos:end="247:21"><expr pos:start="247:21" pos:end="247:21"><name pos:start="247:21" pos:end="247:21">s</name></expr></argument>, <argument pos:start="247:24" pos:end="247:30"><expr pos:start="247:24" pos:end="247:30"><name pos:start="247:24" pos:end="247:30">COND_AL</name></expr></argument>, <argument pos:start="247:33" pos:end="247:41"><expr pos:start="247:33" pos:end="247:41"><name pos:start="247:33" pos:end="247:41">ARITH_MOV</name></expr></argument>, <argument pos:start="247:44" pos:end="247:53"><expr pos:start="247:44" pos:end="247:53"><name pos:start="247:44" pos:end="247:53">TCG_REG_R1</name></expr></argument>, <argument pos:start="247:56" pos:end="247:56"><expr pos:start="247:56" pos:end="247:56"><literal type="number" pos:start="247:56" pos:end="247:56">0</literal></expr></argument>, <argument pos:start="247:59" pos:end="247:67"><expr pos:start="247:59" pos:end="247:67"><name pos:start="247:59" pos:end="247:67">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="249:1" pos:end="249:6"># <cpp:directive pos:start="249:3" pos:end="249:6">else</cpp:directive></cpp:else>

    <if_stmt pos:start="251:5" pos:end="257:5"><if pos:start="251:5" pos:end="257:5">if <condition pos:start="251:8" pos:end="251:32">(<expr pos:start="251:9" pos:end="251:31"><name pos:start="251:9" pos:end="251:17">addr_reg2</name> <operator pos:start="251:19" pos:end="251:20">!=</operator> <name pos:start="251:22" pos:end="251:31">TCG_REG_R1</name></expr>)</condition> <block pos:start="251:34" pos:end="257:5">{<block_content pos:start="253:9" pos:end="255:68">

        <expr_stmt pos:start="253:9" pos:end="255:68"><expr pos:start="253:9" pos:end="255:67"><call pos:start="253:9" pos:end="255:67"><name pos:start="253:9" pos:end="253:23">tcg_out_dat_reg</name><argument_list pos:start="253:24" pos:end="255:67">(<argument pos:start="253:25" pos:end="253:25"><expr pos:start="253:25" pos:end="253:25"><name pos:start="253:25" pos:end="253:25">s</name></expr></argument>, <argument pos:start="253:28" pos:end="253:34"><expr pos:start="253:28" pos:end="253:34"><name pos:start="253:28" pos:end="253:34">COND_AL</name></expr></argument>, <argument pos:start="253:37" pos:end="253:45"><expr pos:start="253:37" pos:end="253:45"><name pos:start="253:37" pos:end="253:45">ARITH_MOV</name></expr></argument>,

                        <argument pos:start="255:25" pos:end="255:34"><expr pos:start="255:25" pos:end="255:34"><name pos:start="255:25" pos:end="255:34">TCG_REG_R1</name></expr></argument>, <argument pos:start="255:37" pos:end="255:37"><expr pos:start="255:37" pos:end="255:37"><literal type="number" pos:start="255:37" pos:end="255:37">0</literal></expr></argument>, <argument pos:start="255:40" pos:end="255:48"><expr pos:start="255:40" pos:end="255:48"><name pos:start="255:40" pos:end="255:48">addr_reg2</name></expr></argument>, <argument pos:start="255:51" pos:end="255:66"><expr pos:start="255:51" pos:end="255:66"><call pos:start="255:51" pos:end="255:66"><name pos:start="255:51" pos:end="255:63">SHIFT_IMM_LSL</name><argument_list pos:start="255:64" pos:end="255:66">(<argument pos:start="255:65" pos:end="255:65"><expr pos:start="255:65" pos:end="255:65"><literal type="number" pos:start="255:65" pos:end="255:65">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="259:5" pos:end="262:0"><expr pos:start="259:5" pos:end="259:68"><call pos:start="259:5" pos:end="259:68"><name pos:start="259:5" pos:end="259:19">tcg_out_dat_imm</name><argument_list pos:start="259:20" pos:end="259:68">(<argument pos:start="259:21" pos:end="259:21"><expr pos:start="259:21" pos:end="259:21"><name pos:start="259:21" pos:end="259:21">s</name></expr></argument>, <argument pos:start="259:24" pos:end="259:30"><expr pos:start="259:24" pos:end="259:30"><name pos:start="259:24" pos:end="259:30">COND_AL</name></expr></argument>, <argument pos:start="259:33" pos:end="259:41"><expr pos:start="259:33" pos:end="259:41"><name pos:start="259:33" pos:end="259:41">ARITH_MOV</name></expr></argument>, <argument pos:start="259:44" pos:end="259:53"><expr pos:start="259:44" pos:end="259:53"><name pos:start="259:44" pos:end="259:53">TCG_REG_R2</name></expr></argument>, <argument pos:start="259:56" pos:end="259:56"><expr pos:start="259:56" pos:end="259:56"><literal type="number" pos:start="259:56" pos:end="259:56">0</literal></expr></argument>, <argument pos:start="259:59" pos:end="259:67"><expr pos:start="259:59" pos:end="259:67"><name pos:start="259:59" pos:end="259:67">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="261:1" pos:end="261:7"># <cpp:directive pos:start="261:3" pos:end="261:7">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="263:5" pos:end="265:51"><expr pos:start="263:5" pos:end="265:50"><call pos:start="263:5" pos:end="265:50"><name pos:start="263:5" pos:end="263:14">tcg_out_bl</name><argument_list pos:start="263:15" pos:end="265:50">(<argument pos:start="263:16" pos:end="263:16"><expr pos:start="263:16" pos:end="263:16"><name pos:start="263:16" pos:end="263:16">s</name></expr></argument>, <argument pos:start="263:19" pos:end="263:25"><expr pos:start="263:19" pos:end="263:25"><name pos:start="263:19" pos:end="263:25">COND_AL</name></expr></argument>, <argument pos:start="263:28" pos:end="265:49"><expr pos:start="263:28" pos:end="265:49"><operator pos:start="263:28" pos:end="263:28">(</operator><name pos:start="263:29" pos:end="263:43">tcg_target_long</name><operator pos:start="263:44" pos:end="263:44">)</operator> <name pos:start="263:46" pos:end="263:68"><name pos:start="263:46" pos:end="263:60">qemu_ld_helpers</name><index pos:start="263:61" pos:end="263:68">[<expr pos:start="263:62" pos:end="263:67"><name pos:start="263:62" pos:end="263:67">s_bits</name></expr>]</index></name> <operator pos:start="263:70" pos:end="263:70">-</operator>

                    <operator pos:start="265:21" pos:end="265:21">(</operator><name pos:start="265:22" pos:end="265:36">tcg_target_long</name><operator pos:start="265:37" pos:end="265:37">)</operator> <name pos:start="265:39" pos:end="265:49"><name pos:start="265:39" pos:end="265:39">s</name><operator pos:start="265:40" pos:end="265:41">-&gt;</operator><name pos:start="265:42" pos:end="265:49">code_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="269:5" pos:end="321:5">switch <condition pos:start="269:12" pos:end="269:16">(<expr pos:start="269:13" pos:end="269:15"><name pos:start="269:13" pos:end="269:15">opc</name></expr>)</condition> <block pos:start="269:18" pos:end="321:5">{<block_content pos:start="271:5" pos:end="319:14">

    <case pos:start="271:5" pos:end="271:15">case <expr pos:start="271:10" pos:end="271:14"><literal type="number" pos:start="271:10" pos:end="271:10">0</literal> <operator pos:start="271:12" pos:end="271:12">|</operator> <literal type="number" pos:start="271:14" pos:end="271:14">4</literal></expr>:</case>

        <expr_stmt pos:start="273:9" pos:end="273:56"><expr pos:start="273:9" pos:end="273:55"><call pos:start="273:9" pos:end="273:55"><name pos:start="273:9" pos:end="273:21">tcg_out_ext8s</name><argument_list pos:start="273:22" pos:end="273:55">(<argument pos:start="273:23" pos:end="273:23"><expr pos:start="273:23" pos:end="273:23"><name pos:start="273:23" pos:end="273:23">s</name></expr></argument>, <argument pos:start="273:26" pos:end="273:32"><expr pos:start="273:26" pos:end="273:32"><name pos:start="273:26" pos:end="273:32">COND_AL</name></expr></argument>, <argument pos:start="273:35" pos:end="273:42"><expr pos:start="273:35" pos:end="273:42"><name pos:start="273:35" pos:end="273:42">data_reg</name></expr></argument>, <argument pos:start="273:45" pos:end="273:54"><expr pos:start="273:45" pos:end="273:54"><name pos:start="273:45" pos:end="273:54">TCG_REG_R0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="275:9" pos:end="275:14">break;</break>

    <case pos:start="277:5" pos:end="277:15">case <expr pos:start="277:10" pos:end="277:14"><literal type="number" pos:start="277:10" pos:end="277:10">1</literal> <operator pos:start="277:12" pos:end="277:12">|</operator> <literal type="number" pos:start="277:14" pos:end="277:14">4</literal></expr>:</case>

        <expr_stmt pos:start="279:9" pos:end="279:57"><expr pos:start="279:9" pos:end="279:56"><call pos:start="279:9" pos:end="279:56"><name pos:start="279:9" pos:end="279:22">tcg_out_ext16s</name><argument_list pos:start="279:23" pos:end="279:56">(<argument pos:start="279:24" pos:end="279:24"><expr pos:start="279:24" pos:end="279:24"><name pos:start="279:24" pos:end="279:24">s</name></expr></argument>, <argument pos:start="279:27" pos:end="279:33"><expr pos:start="279:27" pos:end="279:33"><name pos:start="279:27" pos:end="279:33">COND_AL</name></expr></argument>, <argument pos:start="279:36" pos:end="279:43"><expr pos:start="279:36" pos:end="279:43"><name pos:start="279:36" pos:end="279:43">data_reg</name></expr></argument>, <argument pos:start="279:46" pos:end="279:55"><expr pos:start="279:46" pos:end="279:55"><name pos:start="279:46" pos:end="279:55">TCG_REG_R0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="281:9" pos:end="281:14">break;</break>

    <case pos:start="283:5" pos:end="283:11">case <expr pos:start="283:10" pos:end="283:10"><literal type="number" pos:start="283:10" pos:end="283:10">0</literal></expr>:</case>

    <case pos:start="285:5" pos:end="285:11">case <expr pos:start="285:10" pos:end="285:10"><literal type="number" pos:start="285:10" pos:end="285:10">1</literal></expr>:</case>

    <case pos:start="287:5" pos:end="287:11">case <expr pos:start="287:10" pos:end="287:10"><literal type="number" pos:start="287:10" pos:end="287:10">2</literal></expr>:</case>

    <default pos:start="289:5" pos:end="289:12">default:</default>

        <if_stmt pos:start="291:9" pos:end="297:9"><if pos:start="291:9" pos:end="297:9">if <condition pos:start="291:12" pos:end="291:35">(<expr pos:start="291:13" pos:end="291:34"><name pos:start="291:13" pos:end="291:20">data_reg</name> <operator pos:start="291:22" pos:end="291:23">!=</operator> <name pos:start="291:25" pos:end="291:34">TCG_REG_R0</name></expr>)</condition> <block pos:start="291:37" pos:end="297:9">{<block_content pos:start="293:13" pos:end="295:71">

            <expr_stmt pos:start="293:13" pos:end="295:71"><expr pos:start="293:13" pos:end="295:70"><call pos:start="293:13" pos:end="295:70"><name pos:start="293:13" pos:end="293:27">tcg_out_dat_reg</name><argument_list pos:start="293:28" pos:end="295:70">(<argument pos:start="293:29" pos:end="293:29"><expr pos:start="293:29" pos:end="293:29"><name pos:start="293:29" pos:end="293:29">s</name></expr></argument>, <argument pos:start="293:32" pos:end="293:38"><expr pos:start="293:32" pos:end="293:38"><name pos:start="293:32" pos:end="293:38">COND_AL</name></expr></argument>, <argument pos:start="293:41" pos:end="293:49"><expr pos:start="293:41" pos:end="293:49"><name pos:start="293:41" pos:end="293:49">ARITH_MOV</name></expr></argument>,

                            <argument pos:start="295:29" pos:end="295:36"><expr pos:start="295:29" pos:end="295:36"><name pos:start="295:29" pos:end="295:36">data_reg</name></expr></argument>, <argument pos:start="295:39" pos:end="295:39"><expr pos:start="295:39" pos:end="295:39"><literal type="number" pos:start="295:39" pos:end="295:39">0</literal></expr></argument>, <argument pos:start="295:42" pos:end="295:51"><expr pos:start="295:42" pos:end="295:51"><name pos:start="295:42" pos:end="295:51">TCG_REG_R0</name></expr></argument>, <argument pos:start="295:54" pos:end="295:69"><expr pos:start="295:54" pos:end="295:69"><call pos:start="295:54" pos:end="295:69"><name pos:start="295:54" pos:end="295:66">SHIFT_IMM_LSL</name><argument_list pos:start="295:67" pos:end="295:69">(<argument pos:start="295:68" pos:end="295:68"><expr pos:start="295:68" pos:end="295:68"><literal type="number" pos:start="295:68" pos:end="295:68">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="299:9" pos:end="299:14">break;</break>

    <case pos:start="301:5" pos:end="301:11">case <expr pos:start="301:10" pos:end="301:10"><literal type="number" pos:start="301:10" pos:end="301:10">3</literal></expr>:</case>

        <if_stmt pos:start="303:9" pos:end="309:9"><if pos:start="303:9" pos:end="309:9">if <condition pos:start="303:12" pos:end="303:35">(<expr pos:start="303:13" pos:end="303:34"><name pos:start="303:13" pos:end="303:20">data_reg</name> <operator pos:start="303:22" pos:end="303:23">!=</operator> <name pos:start="303:25" pos:end="303:34">TCG_REG_R0</name></expr>)</condition> <block pos:start="303:37" pos:end="309:9">{<block_content pos:start="305:13" pos:end="307:71">

            <expr_stmt pos:start="305:13" pos:end="307:71"><expr pos:start="305:13" pos:end="307:70"><call pos:start="305:13" pos:end="307:70"><name pos:start="305:13" pos:end="305:27">tcg_out_dat_reg</name><argument_list pos:start="305:28" pos:end="307:70">(<argument pos:start="305:29" pos:end="305:29"><expr pos:start="305:29" pos:end="305:29"><name pos:start="305:29" pos:end="305:29">s</name></expr></argument>, <argument pos:start="305:32" pos:end="305:38"><expr pos:start="305:32" pos:end="305:38"><name pos:start="305:32" pos:end="305:38">COND_AL</name></expr></argument>, <argument pos:start="305:41" pos:end="305:49"><expr pos:start="305:41" pos:end="305:49"><name pos:start="305:41" pos:end="305:49">ARITH_MOV</name></expr></argument>,

                            <argument pos:start="307:29" pos:end="307:36"><expr pos:start="307:29" pos:end="307:36"><name pos:start="307:29" pos:end="307:36">data_reg</name></expr></argument>, <argument pos:start="307:39" pos:end="307:39"><expr pos:start="307:39" pos:end="307:39"><literal type="number" pos:start="307:39" pos:end="307:39">0</literal></expr></argument>, <argument pos:start="307:42" pos:end="307:51"><expr pos:start="307:42" pos:end="307:51"><name pos:start="307:42" pos:end="307:51">TCG_REG_R0</name></expr></argument>, <argument pos:start="307:54" pos:end="307:69"><expr pos:start="307:54" pos:end="307:69"><call pos:start="307:54" pos:end="307:69"><name pos:start="307:54" pos:end="307:66">SHIFT_IMM_LSL</name><argument_list pos:start="307:67" pos:end="307:69">(<argument pos:start="307:68" pos:end="307:68"><expr pos:start="307:68" pos:end="307:68"><literal type="number" pos:start="307:68" pos:end="307:68">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="311:9" pos:end="317:9"><if pos:start="311:9" pos:end="317:9">if <condition pos:start="311:12" pos:end="311:36">(<expr pos:start="311:13" pos:end="311:35"><name pos:start="311:13" pos:end="311:21">data_reg2</name> <operator pos:start="311:23" pos:end="311:24">!=</operator> <name pos:start="311:26" pos:end="311:35">TCG_REG_R1</name></expr>)</condition> <block pos:start="311:38" pos:end="317:9">{<block_content pos:start="313:13" pos:end="315:72">

            <expr_stmt pos:start="313:13" pos:end="315:72"><expr pos:start="313:13" pos:end="315:71"><call pos:start="313:13" pos:end="315:71"><name pos:start="313:13" pos:end="313:27">tcg_out_dat_reg</name><argument_list pos:start="313:28" pos:end="315:71">(<argument pos:start="313:29" pos:end="313:29"><expr pos:start="313:29" pos:end="313:29"><name pos:start="313:29" pos:end="313:29">s</name></expr></argument>, <argument pos:start="313:32" pos:end="313:38"><expr pos:start="313:32" pos:end="313:38"><name pos:start="313:32" pos:end="313:38">COND_AL</name></expr></argument>, <argument pos:start="313:41" pos:end="313:49"><expr pos:start="313:41" pos:end="313:49"><name pos:start="313:41" pos:end="313:49">ARITH_MOV</name></expr></argument>,

                            <argument pos:start="315:29" pos:end="315:37"><expr pos:start="315:29" pos:end="315:37"><name pos:start="315:29" pos:end="315:37">data_reg2</name></expr></argument>, <argument pos:start="315:40" pos:end="315:40"><expr pos:start="315:40" pos:end="315:40"><literal type="number" pos:start="315:40" pos:end="315:40">0</literal></expr></argument>, <argument pos:start="315:43" pos:end="315:52"><expr pos:start="315:43" pos:end="315:52"><name pos:start="315:43" pos:end="315:52">TCG_REG_R1</name></expr></argument>, <argument pos:start="315:55" pos:end="315:70"><expr pos:start="315:55" pos:end="315:70"><call pos:start="315:55" pos:end="315:70"><name pos:start="315:55" pos:end="315:67">SHIFT_IMM_LSL</name><argument_list pos:start="315:68" pos:end="315:70">(<argument pos:start="315:69" pos:end="315:69"><expr pos:start="315:69" pos:end="315:69"><literal type="number" pos:start="315:69" pos:end="315:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="319:9" pos:end="319:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="325:5" pos:end="328:0"><expr pos:start="325:5" pos:end="325:70"><operator pos:start="325:5" pos:end="325:5">*</operator><name pos:start="325:6" pos:end="325:14">label_ptr</name> <operator pos:start="325:16" pos:end="325:17">+=</operator> <operator pos:start="325:19" pos:end="325:19">(</operator><operator pos:start="325:20" pos:end="325:20">(</operator><name pos:start="325:21" pos:end="325:24">void</name> <operator pos:start="325:26" pos:end="325:26">*</operator><operator pos:start="325:27" pos:end="325:27">)</operator> <name pos:start="325:29" pos:end="325:39"><name pos:start="325:29" pos:end="325:29">s</name><operator pos:start="325:30" pos:end="325:31">-&gt;</operator><name pos:start="325:32" pos:end="325:39">code_ptr</name></name> <operator pos:start="325:41" pos:end="325:41">-</operator> <operator pos:start="325:43" pos:end="325:43">(</operator><name pos:start="325:44" pos:end="325:47">void</name> <operator pos:start="325:49" pos:end="325:49">*</operator><operator pos:start="325:50" pos:end="325:50">)</operator> <name pos:start="325:52" pos:end="325:60">label_ptr</name> <operator pos:start="325:62" pos:end="325:62">-</operator> <literal type="number" pos:start="325:64" pos:end="325:64">8</literal><operator pos:start="325:65" pos:end="325:65">)</operator> <operator pos:start="325:67" pos:end="325:68">&gt;&gt;</operator> <literal type="number" pos:start="325:70" pos:end="325:70">2</literal></expr>;</expr_stmt>

<cpp:else pos:start="327:1" pos:end="327:5">#<cpp:directive pos:start="327:2" pos:end="327:5">else</cpp:directive></cpp:else> <comment type="block" pos:start="327:7" pos:end="327:27">/* !CONFIG_SOFTMMU */</comment>

    <if_stmt pos:start="329:5" pos:end="357:5"><if pos:start="329:5" pos:end="357:5">if <condition pos:start="329:8" pos:end="329:19">(<expr pos:start="329:9" pos:end="329:18"><name pos:start="329:9" pos:end="329:18">GUEST_BASE</name></expr>)</condition> <block pos:start="329:21" pos:end="357:5">{<block_content pos:start="331:9" pos:end="355:9">

        <decl_stmt pos:start="331:9" pos:end="331:37"><decl pos:start="331:9" pos:end="331:36"><type pos:start="331:9" pos:end="331:16"><name pos:start="331:9" pos:end="331:16">uint32_t</name></type> <name pos:start="331:18" pos:end="331:23">offset</name> <init pos:start="331:25" pos:end="331:36">= <expr pos:start="331:27" pos:end="331:36"><name pos:start="331:27" pos:end="331:36">GUEST_BASE</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="333:9" pos:end="333:14"><decl pos:start="333:9" pos:end="333:13"><type pos:start="333:9" pos:end="333:11"><name pos:start="333:9" pos:end="333:11">int</name></type> <name pos:start="333:13" pos:end="333:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="335:9" pos:end="335:16"><decl pos:start="335:9" pos:end="335:15"><type pos:start="335:9" pos:end="335:11"><name pos:start="335:9" pos:end="335:11">int</name></type> <name pos:start="335:13" pos:end="335:15">rot</name></decl>;</decl_stmt>



        <while pos:start="339:9" pos:end="355:9">while <condition pos:start="339:15" pos:end="339:22">(<expr pos:start="339:16" pos:end="339:21"><name pos:start="339:16" pos:end="339:21">offset</name></expr>)</condition> <block pos:start="339:24" pos:end="355:9">{<block_content pos:start="341:13" pos:end="353:35">

            <expr_stmt pos:start="341:13" pos:end="341:35"><expr pos:start="341:13" pos:end="341:34"><name pos:start="341:13" pos:end="341:13">i</name> <operator pos:start="341:15" pos:end="341:15">=</operator> <call pos:start="341:17" pos:end="341:29"><name pos:start="341:17" pos:end="341:21">ctz32</name><argument_list pos:start="341:22" pos:end="341:29">(<argument pos:start="341:23" pos:end="341:28"><expr pos:start="341:23" pos:end="341:28"><name pos:start="341:23" pos:end="341:28">offset</name></expr></argument>)</argument_list></call> <operator pos:start="341:31" pos:end="341:31">&amp;</operator> <operator pos:start="341:33" pos:end="341:33">~</operator><literal type="number" pos:start="341:34" pos:end="341:34">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="343:13" pos:end="343:42"><expr pos:start="343:13" pos:end="343:41"><name pos:start="343:13" pos:end="343:15">rot</name> <operator pos:start="343:17" pos:end="343:17">=</operator> <operator pos:start="343:19" pos:end="343:19">(</operator><operator pos:start="343:20" pos:end="343:20">(</operator><literal type="number" pos:start="343:21" pos:end="343:24">32</literal> <operator pos:start="343:24" pos:end="343:24">-</operator> <name pos:start="343:26" pos:end="343:26">i</name><operator pos:start="343:27" pos:end="343:27">)</operator> <operator pos:start="343:29" pos:end="343:30">&lt;&lt;</operator> <literal type="number" pos:start="343:32" pos:end="343:32">7</literal><operator pos:start="343:33" pos:end="343:33">)</operator> <operator pos:start="343:35" pos:end="343:35">&amp;</operator> <literal type="number" pos:start="343:37" pos:end="343:41">0xf00</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="347:13" pos:end="349:58"><expr pos:start="347:13" pos:end="349:57"><call pos:start="347:13" pos:end="349:57"><name pos:start="347:13" pos:end="347:27">tcg_out_dat_imm</name><argument_list pos:start="347:28" pos:end="349:57">(<argument pos:start="347:29" pos:end="347:29"><expr pos:start="347:29" pos:end="347:29"><name pos:start="347:29" pos:end="347:29">s</name></expr></argument>, <argument pos:start="347:32" pos:end="347:38"><expr pos:start="347:32" pos:end="347:38"><name pos:start="347:32" pos:end="347:38">COND_AL</name></expr></argument>, <argument pos:start="347:41" pos:end="347:49"><expr pos:start="347:41" pos:end="347:49"><name pos:start="347:41" pos:end="347:49">ARITH_ADD</name></expr></argument>, <argument pos:start="347:52" pos:end="347:61"><expr pos:start="347:52" pos:end="347:61"><name pos:start="347:52" pos:end="347:61">TCG_REG_R8</name></expr></argument>, <argument pos:start="347:64" pos:end="347:71"><expr pos:start="347:64" pos:end="347:71"><name pos:start="347:64" pos:end="347:71">addr_reg</name></expr></argument>,

                            <argument pos:start="349:29" pos:end="349:56"><expr pos:start="349:29" pos:end="349:56"><operator pos:start="349:29" pos:end="349:29">(</operator><operator pos:start="349:30" pos:end="349:30">(</operator><name pos:start="349:31" pos:end="349:36">offset</name> <operator pos:start="349:38" pos:end="349:39">&gt;&gt;</operator> <name pos:start="349:41" pos:end="349:41">i</name><operator pos:start="349:42" pos:end="349:42">)</operator> <operator pos:start="349:44" pos:end="349:44">&amp;</operator> <literal type="number" pos:start="349:46" pos:end="349:49">0xff</literal><operator pos:start="349:50" pos:end="349:50">)</operator> <operator pos:start="349:52" pos:end="349:52">|</operator> <name pos:start="349:54" pos:end="349:56">rot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="351:13" pos:end="351:34"><expr pos:start="351:13" pos:end="351:33"><name pos:start="351:13" pos:end="351:20">addr_reg</name> <operator pos:start="351:22" pos:end="351:22">=</operator> <name pos:start="351:24" pos:end="351:33">TCG_REG_R8</name></expr>;</expr_stmt>

            <expr_stmt pos:start="353:13" pos:end="353:35"><expr pos:start="353:13" pos:end="353:34"><name pos:start="353:13" pos:end="353:18">offset</name> <operator pos:start="353:20" pos:end="353:21">&amp;=</operator> <operator pos:start="353:23" pos:end="353:23">~</operator><operator pos:start="353:24" pos:end="353:24">(</operator><literal type="number" pos:start="353:25" pos:end="353:28">0xff</literal> <operator pos:start="353:30" pos:end="353:31">&lt;&lt;</operator> <name pos:start="353:33" pos:end="353:33">i</name><operator pos:start="353:34" pos:end="353:34">)</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>

    <switch pos:start="359:5" pos:end="448:0">switch <condition pos:start="359:12" pos:end="359:16">(<expr pos:start="359:13" pos:end="359:15"><name pos:start="359:13" pos:end="359:15">opc</name></expr>)</condition> <block pos:start="359:18" pos:end="448:0">{<block_content pos:start="361:5" pos:end="443:14">

    <case pos:start="361:5" pos:end="361:11">case <expr pos:start="361:10" pos:end="361:10"><literal type="number" pos:start="361:10" pos:end="361:10">0</literal></expr>:</case>

        <expr_stmt pos:start="363:9" pos:end="363:58"><expr pos:start="363:9" pos:end="363:57"><call pos:start="363:9" pos:end="363:57"><name pos:start="363:9" pos:end="363:22">tcg_out_ld8_12</name><argument_list pos:start="363:23" pos:end="363:57">(<argument pos:start="363:24" pos:end="363:24"><expr pos:start="363:24" pos:end="363:24"><name pos:start="363:24" pos:end="363:24">s</name></expr></argument>, <argument pos:start="363:27" pos:end="363:33"><expr pos:start="363:27" pos:end="363:33"><name pos:start="363:27" pos:end="363:33">COND_AL</name></expr></argument>, <argument pos:start="363:36" pos:end="363:43"><expr pos:start="363:36" pos:end="363:43"><name pos:start="363:36" pos:end="363:43">data_reg</name></expr></argument>, <argument pos:start="363:46" pos:end="363:53"><expr pos:start="363:46" pos:end="363:53"><name pos:start="363:46" pos:end="363:53">addr_reg</name></expr></argument>, <argument pos:start="363:56" pos:end="363:56"><expr pos:start="363:56" pos:end="363:56"><literal type="number" pos:start="363:56" pos:end="363:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="365:9" pos:end="365:14">break;</break>

    <case pos:start="367:5" pos:end="367:15">case <expr pos:start="367:10" pos:end="367:14"><literal type="number" pos:start="367:10" pos:end="367:10">0</literal> <operator pos:start="367:12" pos:end="367:12">|</operator> <literal type="number" pos:start="367:14" pos:end="367:14">4</literal></expr>:</case>

        <expr_stmt pos:start="369:9" pos:end="369:58"><expr pos:start="369:9" pos:end="369:57"><call pos:start="369:9" pos:end="369:57"><name pos:start="369:9" pos:end="369:22">tcg_out_ld8s_8</name><argument_list pos:start="369:23" pos:end="369:57">(<argument pos:start="369:24" pos:end="369:24"><expr pos:start="369:24" pos:end="369:24"><name pos:start="369:24" pos:end="369:24">s</name></expr></argument>, <argument pos:start="369:27" pos:end="369:33"><expr pos:start="369:27" pos:end="369:33"><name pos:start="369:27" pos:end="369:33">COND_AL</name></expr></argument>, <argument pos:start="369:36" pos:end="369:43"><expr pos:start="369:36" pos:end="369:43"><name pos:start="369:36" pos:end="369:43">data_reg</name></expr></argument>, <argument pos:start="369:46" pos:end="369:53"><expr pos:start="369:46" pos:end="369:53"><name pos:start="369:46" pos:end="369:53">addr_reg</name></expr></argument>, <argument pos:start="369:56" pos:end="369:56"><expr pos:start="369:56" pos:end="369:56"><literal type="number" pos:start="369:56" pos:end="369:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="371:9" pos:end="371:14">break;</break>

    <case pos:start="373:5" pos:end="373:11">case <expr pos:start="373:10" pos:end="373:10"><literal type="number" pos:start="373:10" pos:end="373:10">1</literal></expr>:</case>

        <expr_stmt pos:start="375:9" pos:end="375:59"><expr pos:start="375:9" pos:end="375:58"><call pos:start="375:9" pos:end="375:58"><name pos:start="375:9" pos:end="375:23">tcg_out_ld16u_8</name><argument_list pos:start="375:24" pos:end="375:58">(<argument pos:start="375:25" pos:end="375:25"><expr pos:start="375:25" pos:end="375:25"><name pos:start="375:25" pos:end="375:25">s</name></expr></argument>, <argument pos:start="375:28" pos:end="375:34"><expr pos:start="375:28" pos:end="375:34"><name pos:start="375:28" pos:end="375:34">COND_AL</name></expr></argument>, <argument pos:start="375:37" pos:end="375:44"><expr pos:start="375:37" pos:end="375:44"><name pos:start="375:37" pos:end="375:44">data_reg</name></expr></argument>, <argument pos:start="375:47" pos:end="375:54"><expr pos:start="375:47" pos:end="375:54"><name pos:start="375:47" pos:end="375:54">addr_reg</name></expr></argument>, <argument pos:start="375:57" pos:end="375:57"><expr pos:start="375:57" pos:end="375:57"><literal type="number" pos:start="375:57" pos:end="375:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="377:9" pos:end="381:9"><if pos:start="377:9" pos:end="381:9">if <condition pos:start="377:12" pos:end="377:18">(<expr pos:start="377:13" pos:end="377:17"><name pos:start="377:13" pos:end="377:17">bswap</name></expr>)</condition> <block pos:start="377:20" pos:end="381:9">{<block_content pos:start="379:13" pos:end="379:60">

            <expr_stmt pos:start="379:13" pos:end="379:60"><expr pos:start="379:13" pos:end="379:59"><call pos:start="379:13" pos:end="379:59"><name pos:start="379:13" pos:end="379:27">tcg_out_bswap16</name><argument_list pos:start="379:28" pos:end="379:59">(<argument pos:start="379:29" pos:end="379:29"><expr pos:start="379:29" pos:end="379:29"><name pos:start="379:29" pos:end="379:29">s</name></expr></argument>, <argument pos:start="379:32" pos:end="379:38"><expr pos:start="379:32" pos:end="379:38"><name pos:start="379:32" pos:end="379:38">COND_AL</name></expr></argument>, <argument pos:start="379:41" pos:end="379:48"><expr pos:start="379:41" pos:end="379:48"><name pos:start="379:41" pos:end="379:48">data_reg</name></expr></argument>, <argument pos:start="379:51" pos:end="379:58"><expr pos:start="379:51" pos:end="379:58"><name pos:start="379:51" pos:end="379:58">data_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="383:9" pos:end="383:14">break;</break>

    <case pos:start="385:5" pos:end="385:15">case <expr pos:start="385:10" pos:end="385:14"><literal type="number" pos:start="385:10" pos:end="385:10">1</literal> <operator pos:start="385:12" pos:end="385:12">|</operator> <literal type="number" pos:start="385:14" pos:end="385:14">4</literal></expr>:</case>

        <if_stmt pos:start="387:9" pos:end="397:9"><if pos:start="387:9" pos:end="393:9">if <condition pos:start="387:12" pos:end="387:18">(<expr pos:start="387:13" pos:end="387:17"><name pos:start="387:13" pos:end="387:17">bswap</name></expr>)</condition> <block pos:start="387:20" pos:end="393:9">{<block_content pos:start="389:13" pos:end="391:61">

            <expr_stmt pos:start="389:13" pos:end="389:63"><expr pos:start="389:13" pos:end="389:62"><call pos:start="389:13" pos:end="389:62"><name pos:start="389:13" pos:end="389:27">tcg_out_ld16u_8</name><argument_list pos:start="389:28" pos:end="389:62">(<argument pos:start="389:29" pos:end="389:29"><expr pos:start="389:29" pos:end="389:29"><name pos:start="389:29" pos:end="389:29">s</name></expr></argument>, <argument pos:start="389:32" pos:end="389:38"><expr pos:start="389:32" pos:end="389:38"><name pos:start="389:32" pos:end="389:38">COND_AL</name></expr></argument>, <argument pos:start="389:41" pos:end="389:48"><expr pos:start="389:41" pos:end="389:48"><name pos:start="389:41" pos:end="389:48">data_reg</name></expr></argument>, <argument pos:start="389:51" pos:end="389:58"><expr pos:start="389:51" pos:end="389:58"><name pos:start="389:51" pos:end="389:58">addr_reg</name></expr></argument>, <argument pos:start="389:61" pos:end="389:61"><expr pos:start="389:61" pos:end="389:61"><literal type="number" pos:start="389:61" pos:end="389:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="391:13" pos:end="391:61"><expr pos:start="391:13" pos:end="391:60"><call pos:start="391:13" pos:end="391:60"><name pos:start="391:13" pos:end="391:28">tcg_out_bswap16s</name><argument_list pos:start="391:29" pos:end="391:60">(<argument pos:start="391:30" pos:end="391:30"><expr pos:start="391:30" pos:end="391:30"><name pos:start="391:30" pos:end="391:30">s</name></expr></argument>, <argument pos:start="391:33" pos:end="391:39"><expr pos:start="391:33" pos:end="391:39"><name pos:start="391:33" pos:end="391:39">COND_AL</name></expr></argument>, <argument pos:start="391:42" pos:end="391:49"><expr pos:start="391:42" pos:end="391:49"><name pos:start="391:42" pos:end="391:49">data_reg</name></expr></argument>, <argument pos:start="391:52" pos:end="391:59"><expr pos:start="391:52" pos:end="391:59"><name pos:start="391:52" pos:end="391:59">data_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="393:11" pos:end="397:9">else <block pos:start="393:16" pos:end="397:9">{<block_content pos:start="395:13" pos:end="395:63">

            <expr_stmt pos:start="395:13" pos:end="395:63"><expr pos:start="395:13" pos:end="395:62"><call pos:start="395:13" pos:end="395:62"><name pos:start="395:13" pos:end="395:27">tcg_out_ld16s_8</name><argument_list pos:start="395:28" pos:end="395:62">(<argument pos:start="395:29" pos:end="395:29"><expr pos:start="395:29" pos:end="395:29"><name pos:start="395:29" pos:end="395:29">s</name></expr></argument>, <argument pos:start="395:32" pos:end="395:38"><expr pos:start="395:32" pos:end="395:38"><name pos:start="395:32" pos:end="395:38">COND_AL</name></expr></argument>, <argument pos:start="395:41" pos:end="395:48"><expr pos:start="395:41" pos:end="395:48"><name pos:start="395:41" pos:end="395:48">data_reg</name></expr></argument>, <argument pos:start="395:51" pos:end="395:58"><expr pos:start="395:51" pos:end="395:58"><name pos:start="395:51" pos:end="395:58">addr_reg</name></expr></argument>, <argument pos:start="395:61" pos:end="395:61"><expr pos:start="395:61" pos:end="395:61"><literal type="number" pos:start="395:61" pos:end="395:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="399:9" pos:end="399:14">break;</break>

    <case pos:start="401:5" pos:end="401:11">case <expr pos:start="401:10" pos:end="401:10"><literal type="number" pos:start="401:10" pos:end="401:10">2</literal></expr>:</case>

    <default pos:start="403:5" pos:end="403:12">default:</default>

        <expr_stmt pos:start="405:9" pos:end="405:59"><expr pos:start="405:9" pos:end="405:58"><call pos:start="405:9" pos:end="405:58"><name pos:start="405:9" pos:end="405:23">tcg_out_ld32_12</name><argument_list pos:start="405:24" pos:end="405:58">(<argument pos:start="405:25" pos:end="405:25"><expr pos:start="405:25" pos:end="405:25"><name pos:start="405:25" pos:end="405:25">s</name></expr></argument>, <argument pos:start="405:28" pos:end="405:34"><expr pos:start="405:28" pos:end="405:34"><name pos:start="405:28" pos:end="405:34">COND_AL</name></expr></argument>, <argument pos:start="405:37" pos:end="405:44"><expr pos:start="405:37" pos:end="405:44"><name pos:start="405:37" pos:end="405:44">data_reg</name></expr></argument>, <argument pos:start="405:47" pos:end="405:54"><expr pos:start="405:47" pos:end="405:54"><name pos:start="405:47" pos:end="405:54">addr_reg</name></expr></argument>, <argument pos:start="405:57" pos:end="405:57"><expr pos:start="405:57" pos:end="405:57"><literal type="number" pos:start="405:57" pos:end="405:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="407:9" pos:end="411:9"><if pos:start="407:9" pos:end="411:9">if <condition pos:start="407:12" pos:end="407:18">(<expr pos:start="407:13" pos:end="407:17"><name pos:start="407:13" pos:end="407:17">bswap</name></expr>)</condition> <block pos:start="407:20" pos:end="411:9">{<block_content pos:start="409:13" pos:end="409:60">

            <expr_stmt pos:start="409:13" pos:end="409:60"><expr pos:start="409:13" pos:end="409:59"><call pos:start="409:13" pos:end="409:59"><name pos:start="409:13" pos:end="409:27">tcg_out_bswap32</name><argument_list pos:start="409:28" pos:end="409:59">(<argument pos:start="409:29" pos:end="409:29"><expr pos:start="409:29" pos:end="409:29"><name pos:start="409:29" pos:end="409:29">s</name></expr></argument>, <argument pos:start="409:32" pos:end="409:38"><expr pos:start="409:32" pos:end="409:38"><name pos:start="409:32" pos:end="409:38">COND_AL</name></expr></argument>, <argument pos:start="409:41" pos:end="409:48"><expr pos:start="409:41" pos:end="409:48"><name pos:start="409:41" pos:end="409:48">data_reg</name></expr></argument>, <argument pos:start="409:51" pos:end="409:58"><expr pos:start="409:51" pos:end="409:58"><name pos:start="409:51" pos:end="409:58">data_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="413:9" pos:end="413:14">break;</break>

    <case pos:start="415:5" pos:end="415:11">case <expr pos:start="415:10" pos:end="415:10"><literal type="number" pos:start="415:10" pos:end="415:10">3</literal></expr>:</case>

        <comment type="block" pos:start="417:9" pos:end="419:62">/* TODO: use block load -

         * check that data_reg2 &gt; data_reg or the other way */</comment>

        <if_stmt pos:start="421:9" pos:end="433:9"><if pos:start="421:9" pos:end="427:9">if <condition pos:start="421:12" pos:end="421:33">(<expr pos:start="421:13" pos:end="421:32"><name pos:start="421:13" pos:end="421:20">data_reg</name> <operator pos:start="421:22" pos:end="421:23">==</operator> <name pos:start="421:25" pos:end="421:32">addr_reg</name></expr>)</condition> <block pos:start="421:35" pos:end="427:9">{<block_content pos:start="423:13" pos:end="425:75">

            <expr_stmt pos:start="423:13" pos:end="423:76"><expr pos:start="423:13" pos:end="423:75"><call pos:start="423:13" pos:end="423:75"><name pos:start="423:13" pos:end="423:27">tcg_out_ld32_12</name><argument_list pos:start="423:28" pos:end="423:75">(<argument pos:start="423:29" pos:end="423:29"><expr pos:start="423:29" pos:end="423:29"><name pos:start="423:29" pos:end="423:29">s</name></expr></argument>, <argument pos:start="423:32" pos:end="423:38"><expr pos:start="423:32" pos:end="423:38"><name pos:start="423:32" pos:end="423:38">COND_AL</name></expr></argument>, <argument pos:start="423:41" pos:end="423:49"><expr pos:start="423:41" pos:end="423:49"><name pos:start="423:41" pos:end="423:49">data_reg2</name></expr></argument>, <argument pos:start="423:52" pos:end="423:59"><expr pos:start="423:52" pos:end="423:59"><name pos:start="423:52" pos:end="423:59">addr_reg</name></expr></argument>, <argument pos:start="423:62" pos:end="423:74"><expr pos:start="423:62" pos:end="423:74"><ternary pos:start="423:62" pos:end="423:74"><condition pos:start="423:62" pos:end="423:68"><expr pos:start="423:62" pos:end="423:66"><name pos:start="423:62" pos:end="423:66">bswap</name></expr> ?</condition><then pos:start="423:70" pos:end="423:70"> <expr pos:start="423:70" pos:end="423:70"><literal type="number" pos:start="423:70" pos:end="423:70">0</literal></expr> </then><else pos:start="423:72" pos:end="423:74">: <expr pos:start="423:74" pos:end="423:74"><literal type="number" pos:start="423:74" pos:end="423:74">4</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="425:13" pos:end="425:75"><expr pos:start="425:13" pos:end="425:74"><call pos:start="425:13" pos:end="425:74"><name pos:start="425:13" pos:end="425:27">tcg_out_ld32_12</name><argument_list pos:start="425:28" pos:end="425:74">(<argument pos:start="425:29" pos:end="425:29"><expr pos:start="425:29" pos:end="425:29"><name pos:start="425:29" pos:end="425:29">s</name></expr></argument>, <argument pos:start="425:32" pos:end="425:38"><expr pos:start="425:32" pos:end="425:38"><name pos:start="425:32" pos:end="425:38">COND_AL</name></expr></argument>, <argument pos:start="425:41" pos:end="425:48"><expr pos:start="425:41" pos:end="425:48"><name pos:start="425:41" pos:end="425:48">data_reg</name></expr></argument>, <argument pos:start="425:51" pos:end="425:58"><expr pos:start="425:51" pos:end="425:58"><name pos:start="425:51" pos:end="425:58">addr_reg</name></expr></argument>, <argument pos:start="425:61" pos:end="425:73"><expr pos:start="425:61" pos:end="425:73"><ternary pos:start="425:61" pos:end="425:73"><condition pos:start="425:61" pos:end="425:67"><expr pos:start="425:61" pos:end="425:65"><name pos:start="425:61" pos:end="425:65">bswap</name></expr> ?</condition><then pos:start="425:69" pos:end="425:69"> <expr pos:start="425:69" pos:end="425:69"><literal type="number" pos:start="425:69" pos:end="425:69">4</literal></expr> </then><else pos:start="425:71" pos:end="425:73">: <expr pos:start="425:73" pos:end="425:73"><literal type="number" pos:start="425:73" pos:end="425:73">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="427:11" pos:end="433:9">else <block pos:start="427:16" pos:end="433:9">{<block_content pos:start="429:13" pos:end="431:76">

            <expr_stmt pos:start="429:13" pos:end="429:75"><expr pos:start="429:13" pos:end="429:74"><call pos:start="429:13" pos:end="429:74"><name pos:start="429:13" pos:end="429:27">tcg_out_ld32_12</name><argument_list pos:start="429:28" pos:end="429:74">(<argument pos:start="429:29" pos:end="429:29"><expr pos:start="429:29" pos:end="429:29"><name pos:start="429:29" pos:end="429:29">s</name></expr></argument>, <argument pos:start="429:32" pos:end="429:38"><expr pos:start="429:32" pos:end="429:38"><name pos:start="429:32" pos:end="429:38">COND_AL</name></expr></argument>, <argument pos:start="429:41" pos:end="429:48"><expr pos:start="429:41" pos:end="429:48"><name pos:start="429:41" pos:end="429:48">data_reg</name></expr></argument>, <argument pos:start="429:51" pos:end="429:58"><expr pos:start="429:51" pos:end="429:58"><name pos:start="429:51" pos:end="429:58">addr_reg</name></expr></argument>, <argument pos:start="429:61" pos:end="429:73"><expr pos:start="429:61" pos:end="429:73"><ternary pos:start="429:61" pos:end="429:73"><condition pos:start="429:61" pos:end="429:67"><expr pos:start="429:61" pos:end="429:65"><name pos:start="429:61" pos:end="429:65">bswap</name></expr> ?</condition><then pos:start="429:69" pos:end="429:69"> <expr pos:start="429:69" pos:end="429:69"><literal type="number" pos:start="429:69" pos:end="429:69">4</literal></expr> </then><else pos:start="429:71" pos:end="429:73">: <expr pos:start="429:73" pos:end="429:73"><literal type="number" pos:start="429:73" pos:end="429:73">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="431:13" pos:end="431:76"><expr pos:start="431:13" pos:end="431:75"><call pos:start="431:13" pos:end="431:75"><name pos:start="431:13" pos:end="431:27">tcg_out_ld32_12</name><argument_list pos:start="431:28" pos:end="431:75">(<argument pos:start="431:29" pos:end="431:29"><expr pos:start="431:29" pos:end="431:29"><name pos:start="431:29" pos:end="431:29">s</name></expr></argument>, <argument pos:start="431:32" pos:end="431:38"><expr pos:start="431:32" pos:end="431:38"><name pos:start="431:32" pos:end="431:38">COND_AL</name></expr></argument>, <argument pos:start="431:41" pos:end="431:49"><expr pos:start="431:41" pos:end="431:49"><name pos:start="431:41" pos:end="431:49">data_reg2</name></expr></argument>, <argument pos:start="431:52" pos:end="431:59"><expr pos:start="431:52" pos:end="431:59"><name pos:start="431:52" pos:end="431:59">addr_reg</name></expr></argument>, <argument pos:start="431:62" pos:end="431:74"><expr pos:start="431:62" pos:end="431:74"><ternary pos:start="431:62" pos:end="431:74"><condition pos:start="431:62" pos:end="431:68"><expr pos:start="431:62" pos:end="431:66"><name pos:start="431:62" pos:end="431:66">bswap</name></expr> ?</condition><then pos:start="431:70" pos:end="431:70"> <expr pos:start="431:70" pos:end="431:70"><literal type="number" pos:start="431:70" pos:end="431:70">0</literal></expr> </then><else pos:start="431:72" pos:end="431:74">: <expr pos:start="431:74" pos:end="431:74"><literal type="number" pos:start="431:74" pos:end="431:74">4</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="435:9" pos:end="441:9"><if pos:start="435:9" pos:end="441:9">if <condition pos:start="435:12" pos:end="435:18">(<expr pos:start="435:13" pos:end="435:17"><name pos:start="435:13" pos:end="435:17">bswap</name></expr>)</condition> <block pos:start="435:20" pos:end="441:9">{<block_content pos:start="437:13" pos:end="439:62">

            <expr_stmt pos:start="437:13" pos:end="437:60"><expr pos:start="437:13" pos:end="437:59"><call pos:start="437:13" pos:end="437:59"><name pos:start="437:13" pos:end="437:27">tcg_out_bswap32</name><argument_list pos:start="437:28" pos:end="437:59">(<argument pos:start="437:29" pos:end="437:29"><expr pos:start="437:29" pos:end="437:29"><name pos:start="437:29" pos:end="437:29">s</name></expr></argument>, <argument pos:start="437:32" pos:end="437:38"><expr pos:start="437:32" pos:end="437:38"><name pos:start="437:32" pos:end="437:38">COND_AL</name></expr></argument>, <argument pos:start="437:41" pos:end="437:48"><expr pos:start="437:41" pos:end="437:48"><name pos:start="437:41" pos:end="437:48">data_reg</name></expr></argument>, <argument pos:start="437:51" pos:end="437:58"><expr pos:start="437:51" pos:end="437:58"><name pos:start="437:51" pos:end="437:58">data_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="439:13" pos:end="439:62"><expr pos:start="439:13" pos:end="439:61"><call pos:start="439:13" pos:end="439:61"><name pos:start="439:13" pos:end="439:27">tcg_out_bswap32</name><argument_list pos:start="439:28" pos:end="439:61">(<argument pos:start="439:29" pos:end="439:29"><expr pos:start="439:29" pos:end="439:29"><name pos:start="439:29" pos:end="439:29">s</name></expr></argument>, <argument pos:start="439:32" pos:end="439:38"><expr pos:start="439:32" pos:end="439:38"><name pos:start="439:32" pos:end="439:38">COND_AL</name></expr></argument>, <argument pos:start="439:41" pos:end="439:49"><expr pos:start="439:41" pos:end="439:49"><name pos:start="439:41" pos:end="439:49">data_reg2</name></expr></argument>, <argument pos:start="439:52" pos:end="439:60"><expr pos:start="439:52" pos:end="439:60"><name pos:start="439:52" pos:end="439:60">data_reg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="443:9" pos:end="443:14">break;</break>

    </block_content>}</block></switch>

<cpp:endif pos:start="447:1" pos:end="447:6">#<cpp:directive pos:start="447:2" pos:end="447:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
