<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13109.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:77"><name pos:start="1:1" pos:end="1:15">rtsp_read_reply</name> <argument_list pos:start="1:17" pos:end="3:77">(<argument pos:start="1:18" pos:end="1:35">AVFormatContext *s</argument>, <argument pos:start="1:38" pos:end="1:61">RTSPMessageHeader *reply</argument>,

                 <argument pos:start="3:18" pos:end="3:44">unsigned char **content_ptr</argument>, <argument pos:start="3:47" pos:end="3:76">int return_on_interleaved_data</argument>)</argument_list></macro>

<block pos:start="5:1" pos:end="169:1">{<block_content pos:start="7:5" pos:end="167:13">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">RTSPState</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:17">rt</name> <init pos:start="7:19" pos:end="7:32">= <expr pos:start="7:21" pos:end="7:32"><name pos:start="7:21" pos:end="7:32"><name pos:start="7:21" pos:end="7:21">s</name><operator pos:start="7:22" pos:end="7:23">-&gt;</operator><name pos:start="7:24" pos:end="7:32">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:18"><name pos:start="9:10" pos:end="9:12">buf</name><index pos:start="9:13" pos:end="9:18">[<expr pos:start="9:14" pos:end="9:17"><literal type="number" pos:start="9:14" pos:end="9:17">4096</literal></expr>]</index></name></decl>, <decl pos:start="9:21" pos:end="9:30"><type ref="prev" pos:start="9:5" pos:end="9:8"/><name pos:start="9:21" pos:end="9:30"><name pos:start="9:21" pos:end="9:24">buf1</name><index pos:start="9:25" pos:end="9:30">[<expr pos:start="9:26" pos:end="9:29"><literal type="number" pos:start="9:26" pos:end="9:29">1024</literal></expr>]</index></name></decl>, <decl pos:start="9:33" pos:end="9:34"><type ref="prev" pos:start="9:5" pos:end="9:8"><modifier pos:start="9:33" pos:end="9:33">*</modifier></type><name pos:start="9:34" pos:end="9:34">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">char</name></type> <name pos:start="11:19" pos:end="11:20">ch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:17">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:44"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>, <decl pos:start="15:14" pos:end="15:27"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:14" pos:end="15:27">content_length</name></decl>, <decl pos:start="15:30" pos:end="15:43"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:30" pos:end="15:39">line_count</name> <init pos:start="15:41" pos:end="15:43">= <expr pos:start="15:43" pos:end="15:43"><literal type="number" pos:start="15:43" pos:end="15:43">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:34"><decl pos:start="17:5" pos:end="17:33"><type pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:17">char</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:26">content</name> <init pos:start="17:28" pos:end="17:33">= <expr pos:start="17:30" pos:end="17:33"><name pos:start="17:30" pos:end="17:33">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:37"><expr pos:start="21:5" pos:end="21:36"><call pos:start="21:5" pos:end="21:36"><name pos:start="21:5" pos:end="21:10">memset</name><argument_list pos:start="21:11" pos:end="21:36">(<argument pos:start="21:12" pos:end="21:16"><expr pos:start="21:12" pos:end="21:16"><name pos:start="21:12" pos:end="21:16">reply</name></expr></argument>, <argument pos:start="21:19" pos:end="21:19"><expr pos:start="21:19" pos:end="21:19"><literal type="number" pos:start="21:19" pos:end="21:19">0</literal></expr></argument>, <argument pos:start="21:22" pos:end="21:35"><expr pos:start="21:22" pos:end="21:35"><sizeof pos:start="21:22" pos:end="21:35">sizeof<argument_list pos:start="21:28" pos:end="21:35">(<argument pos:start="21:29" pos:end="21:34"><expr pos:start="21:29" pos:end="21:34"><operator pos:start="21:29" pos:end="21:29">*</operator><name pos:start="21:30" pos:end="21:34">reply</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:40">/* parse reply (XXX: use buffers) */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:29"><expr pos:start="27:5" pos:end="27:28"><name pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:6">rt</name><operator pos:start="27:7" pos:end="27:8">-&gt;</operator><name pos:start="27:9" pos:end="27:18">last_reply</name><index pos:start="27:19" pos:end="27:21">[<expr pos:start="27:20" pos:end="27:20"><literal type="number" pos:start="27:20" pos:end="27:20">0</literal></expr>]</index></name> <operator pos:start="27:23" pos:end="27:23">=</operator> <literal type="char" pos:start="27:25" pos:end="27:28">'\0'</literal></expr>;</expr_stmt>

    <for pos:start="29:5" pos:end="111:5">for<control pos:start="29:8" pos:end="29:11">(<init pos:start="29:9" pos:end="29:9">;</init><condition pos:start="29:10" pos:end="29:10">;</condition><incr/>)</control> <block pos:start="29:13" pos:end="111:5">{<block_content pos:start="31:9" pos:end="109:21">

        <expr_stmt pos:start="31:9" pos:end="31:16"><expr pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:9">q</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <name pos:start="31:13" pos:end="31:15">buf</name></expr>;</expr_stmt>

        <for pos:start="33:9" pos:end="71:9">for<control pos:start="33:12" pos:end="33:15">(<init pos:start="33:13" pos:end="33:13">;</init><condition pos:start="33:14" pos:end="33:14">;</condition><incr/>)</control> <block pos:start="33:17" pos:end="71:9">{<block_content pos:start="35:13" pos:end="69:13">

            <expr_stmt pos:start="35:13" pos:end="38:0"><expr pos:start="35:13" pos:end="35:56"><name pos:start="35:13" pos:end="35:15">ret</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:56"><name pos:start="35:19" pos:end="35:35">url_read_complete</name><argument_list pos:start="35:36" pos:end="35:56">(<argument pos:start="35:37" pos:end="35:47"><expr pos:start="35:37" pos:end="35:47"><name pos:start="35:37" pos:end="35:47"><name pos:start="35:37" pos:end="35:38">rt</name><operator pos:start="35:39" pos:end="35:40">-&gt;</operator><name pos:start="35:41" pos:end="35:47">rtsp_hd</name></name></expr></argument>, <argument pos:start="35:50" pos:end="35:52"><expr pos:start="35:50" pos:end="35:52"><operator pos:start="35:50" pos:end="35:50">&amp;</operator><name pos:start="35:51" pos:end="35:52">ch</name></expr></argument>, <argument pos:start="35:55" pos:end="35:55"><expr pos:start="35:55" pos:end="35:55"><literal type="number" pos:start="35:55" pos:end="35:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="37:1" pos:end="37:20">#<cpp:directive pos:start="37:2" pos:end="37:6">ifdef</cpp:directive> <name pos:start="37:8" pos:end="37:20">DEBUG_RTP_TCP</name></cpp:ifdef>

            <expr_stmt pos:start="39:13" pos:end="42:0"><expr pos:start="39:13" pos:end="39:59"><call pos:start="39:13" pos:end="39:59"><name pos:start="39:13" pos:end="39:19">dprintf</name><argument_list pos:start="39:20" pos:end="39:59">(<argument pos:start="39:21" pos:end="39:21"><expr pos:start="39:21" pos:end="39:21"><name pos:start="39:21" pos:end="39:21">s</name></expr></argument>, <argument pos:start="39:24" pos:end="39:45"><expr pos:start="39:24" pos:end="39:45"><literal type="string" pos:start="39:24" pos:end="39:45">"ret=%d c=%02x [%c]\n"</literal></expr></argument>, <argument pos:start="39:48" pos:end="39:50"><expr pos:start="39:48" pos:end="39:50"><name pos:start="39:48" pos:end="39:50">ret</name></expr></argument>, <argument pos:start="39:53" pos:end="39:54"><expr pos:start="39:53" pos:end="39:54"><name pos:start="39:53" pos:end="39:54">ch</name></expr></argument>, <argument pos:start="39:57" pos:end="39:58"><expr pos:start="39:57" pos:end="39:58"><name pos:start="39:57" pos:end="39:58">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="41:1" pos:end="41:6">#<cpp:directive pos:start="41:2" pos:end="41:6">endif</cpp:directive></cpp:endif>

            <if_stmt pos:start="43:13" pos:end="45:26"><if pos:start="43:13" pos:end="45:26">if <condition pos:start="43:16" pos:end="43:25">(<expr pos:start="43:17" pos:end="43:24"><name pos:start="43:17" pos:end="43:19">ret</name> <operator pos:start="43:21" pos:end="43:22">!=</operator> <literal type="number" pos:start="43:24" pos:end="43:24">1</literal></expr>)</condition><block type="pseudo" pos:start="45:17" pos:end="45:26"><block_content pos:start="45:17" pos:end="45:26">

                <return pos:start="45:17" pos:end="45:26">return <expr pos:start="45:24" pos:end="45:25"><operator pos:start="45:24" pos:end="45:24">-</operator><literal type="number" pos:start="45:25" pos:end="45:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="47:13" pos:end="49:22"><if pos:start="47:13" pos:end="49:22">if <condition pos:start="47:16" pos:end="47:27">(<expr pos:start="47:17" pos:end="47:26"><name pos:start="47:17" pos:end="47:18">ch</name> <operator pos:start="47:20" pos:end="47:21">==</operator> <literal type="char" pos:start="47:23" pos:end="47:26">'\n'</literal></expr>)</condition><block type="pseudo" pos:start="49:17" pos:end="49:22"><block_content pos:start="49:17" pos:end="49:22">

                <break pos:start="49:17" pos:end="49:22">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="51:13" pos:end="69:13"><if pos:start="51:13" pos:end="63:13">if <condition pos:start="51:16" pos:end="51:26">(<expr pos:start="51:17" pos:end="51:25"><name pos:start="51:17" pos:end="51:18">ch</name> <operator pos:start="51:20" pos:end="51:21">==</operator> <literal type="char" pos:start="51:23" pos:end="51:25">'$'</literal></expr>)</condition> <block pos:start="51:28" pos:end="63:13">{<block_content pos:start="55:17" pos:end="61:36">

                <comment type="block" pos:start="53:17" pos:end="53:64">/* XXX: only parse it if first char on line ? */</comment>

                <if_stmt pos:start="55:17" pos:end="61:36"><if pos:start="55:17" pos:end="59:17">if <condition pos:start="55:20" pos:end="55:47">(<expr pos:start="55:21" pos:end="55:46"><name pos:start="55:21" pos:end="55:46">return_on_interleaved_data</name></expr>)</condition> <block pos:start="55:49" pos:end="59:17">{<block_content pos:start="57:21" pos:end="57:29">

                    <return pos:start="57:21" pos:end="57:29">return <expr pos:start="57:28" pos:end="57:28"><literal type="number" pos:start="57:28" pos:end="57:28">1</literal></expr>;</return>

                </block_content>}</block></if> <else pos:start="59:19" pos:end="61:36">else<block type="pseudo" pos:start="61:17" pos:end="61:36"><block_content pos:start="61:17" pos:end="61:36">

                <expr_stmt pos:start="61:17" pos:end="61:36"><expr pos:start="61:17" pos:end="61:35"><call pos:start="61:17" pos:end="61:35"><name pos:start="61:17" pos:end="61:32">rtsp_skip_packet</name><argument_list pos:start="61:33" pos:end="61:35">(<argument pos:start="61:34" pos:end="61:34"><expr pos:start="61:34" pos:end="61:34"><name pos:start="61:34" pos:end="61:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="63:15" pos:end="69:13">else if <condition pos:start="63:23" pos:end="63:34">(<expr pos:start="63:24" pos:end="63:33"><name pos:start="63:24" pos:end="63:25">ch</name> <operator pos:start="63:27" pos:end="63:28">!=</operator> <literal type="char" pos:start="63:30" pos:end="63:33">'\r'</literal></expr>)</condition> <block pos:start="63:36" pos:end="69:13">{<block_content pos:start="65:17" pos:end="67:30">

                <if_stmt pos:start="65:17" pos:end="67:30"><if pos:start="65:17" pos:end="67:30">if <condition pos:start="65:20" pos:end="65:48">(<expr pos:start="65:21" pos:end="65:47"><operator pos:start="65:21" pos:end="65:21">(</operator><name pos:start="65:22" pos:end="65:22">q</name> <operator pos:start="65:24" pos:end="65:24">-</operator> <name pos:start="65:26" pos:end="65:28">buf</name><operator pos:start="65:29" pos:end="65:29">)</operator> <operator pos:start="65:31" pos:end="65:31">&lt;</operator> <sizeof pos:start="65:33" pos:end="65:43">sizeof<argument_list pos:start="65:39" pos:end="65:43">(<argument pos:start="65:40" pos:end="65:42"><expr pos:start="65:40" pos:end="65:42"><name pos:start="65:40" pos:end="65:42">buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="65:45" pos:end="65:45">-</operator> <literal type="number" pos:start="65:47" pos:end="65:47">1</literal></expr>)</condition><block type="pseudo" pos:start="67:21" pos:end="67:30"><block_content pos:start="67:21" pos:end="67:30">

                    <expr_stmt pos:start="67:21" pos:end="67:30"><expr pos:start="67:21" pos:end="67:29"><operator pos:start="67:21" pos:end="67:21">*</operator><name pos:start="67:22" pos:end="67:22">q</name><operator pos:start="67:23" pos:end="67:24">++</operator> <operator pos:start="67:26" pos:end="67:26">=</operator> <name pos:start="67:28" pos:end="67:29">ch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="73:9" pos:end="73:18"><expr pos:start="73:9" pos:end="73:17"><operator pos:start="73:9" pos:end="73:9">*</operator><name pos:start="73:10" pos:end="73:10">q</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <literal type="char" pos:start="73:14" pos:end="73:17">'\0'</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="77:9" pos:end="77:39"><expr pos:start="77:9" pos:end="77:38"><call pos:start="77:9" pos:end="77:38"><name pos:start="77:9" pos:end="77:15">dprintf</name><argument_list pos:start="77:16" pos:end="77:38">(<argument pos:start="77:17" pos:end="77:17"><expr pos:start="77:17" pos:end="77:17"><name pos:start="77:17" pos:end="77:17">s</name></expr></argument>, <argument pos:start="77:20" pos:end="77:32"><expr pos:start="77:20" pos:end="77:32"><literal type="string" pos:start="77:20" pos:end="77:32">"line='%s'\n"</literal></expr></argument>, <argument pos:start="77:35" pos:end="77:37"><expr pos:start="77:35" pos:end="77:37"><name pos:start="77:35" pos:end="77:37">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="81:9" pos:end="81:31">/* test if last line */</comment>

        <if_stmt pos:start="83:9" pos:end="85:18"><if pos:start="83:9" pos:end="85:18">if <condition pos:start="83:12" pos:end="83:27">(<expr pos:start="83:13" pos:end="83:26"><name pos:start="83:13" pos:end="83:18"><name pos:start="83:13" pos:end="83:15">buf</name><index pos:start="83:16" pos:end="83:18">[<expr pos:start="83:17" pos:end="83:17"><literal type="number" pos:start="83:17" pos:end="83:17">0</literal></expr>]</index></name> <operator pos:start="83:20" pos:end="83:21">==</operator> <literal type="char" pos:start="83:23" pos:end="83:26">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:18"><block_content pos:start="85:13" pos:end="85:18">

            <break pos:start="85:13" pos:end="85:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:16"><expr pos:start="87:9" pos:end="87:15"><name pos:start="87:9" pos:end="87:9">p</name> <operator pos:start="87:11" pos:end="87:11">=</operator> <name pos:start="87:13" pos:end="87:15">buf</name></expr>;</expr_stmt>

        <if_stmt pos:start="89:9" pos:end="107:9"><if pos:start="89:9" pos:end="99:9">if <condition pos:start="89:12" pos:end="89:28">(<expr pos:start="89:13" pos:end="89:27"><name pos:start="89:13" pos:end="89:22">line_count</name> <operator pos:start="89:24" pos:end="89:25">==</operator> <literal type="number" pos:start="89:27" pos:end="89:27">0</literal></expr>)</condition> <block pos:start="89:30" pos:end="99:9">{<block_content pos:start="93:13" pos:end="97:44">

            <comment type="block" pos:start="91:13" pos:end="91:32">/* get reply code */</comment>

            <expr_stmt pos:start="93:13" pos:end="93:45"><expr pos:start="93:13" pos:end="93:44"><call pos:start="93:13" pos:end="93:44"><name pos:start="93:13" pos:end="93:20">get_word</name><argument_list pos:start="93:21" pos:end="93:44">(<argument pos:start="93:22" pos:end="93:25"><expr pos:start="93:22" pos:end="93:25"><name pos:start="93:22" pos:end="93:25">buf1</name></expr></argument>, <argument pos:start="93:28" pos:end="93:39"><expr pos:start="93:28" pos:end="93:39"><sizeof pos:start="93:28" pos:end="93:39">sizeof<argument_list pos:start="93:34" pos:end="93:39">(<argument pos:start="93:35" pos:end="93:38"><expr pos:start="93:35" pos:end="93:38"><name pos:start="93:35" pos:end="93:38">buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="93:42" pos:end="93:43"><expr pos:start="93:42" pos:end="93:43"><operator pos:start="93:42" pos:end="93:42">&amp;</operator><name pos:start="93:43" pos:end="93:43">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:45"><expr pos:start="95:13" pos:end="95:44"><call pos:start="95:13" pos:end="95:44"><name pos:start="95:13" pos:end="95:20">get_word</name><argument_list pos:start="95:21" pos:end="95:44">(<argument pos:start="95:22" pos:end="95:25"><expr pos:start="95:22" pos:end="95:25"><name pos:start="95:22" pos:end="95:25">buf1</name></expr></argument>, <argument pos:start="95:28" pos:end="95:39"><expr pos:start="95:28" pos:end="95:39"><sizeof pos:start="95:28" pos:end="95:39">sizeof<argument_list pos:start="95:34" pos:end="95:39">(<argument pos:start="95:35" pos:end="95:38"><expr pos:start="95:35" pos:end="95:38"><name pos:start="95:35" pos:end="95:38">buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="95:42" pos:end="95:43"><expr pos:start="95:42" pos:end="95:43"><operator pos:start="95:42" pos:end="95:42">&amp;</operator><name pos:start="95:43" pos:end="95:43">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:44"><expr pos:start="97:13" pos:end="97:43"><name pos:start="97:13" pos:end="97:30"><name pos:start="97:13" pos:end="97:17">reply</name><operator pos:start="97:18" pos:end="97:19">-&gt;</operator><name pos:start="97:20" pos:end="97:30">status_code</name></name> <operator pos:start="97:32" pos:end="97:32">=</operator> <call pos:start="97:34" pos:end="97:43"><name pos:start="97:34" pos:end="97:37">atoi</name><argument_list pos:start="97:38" pos:end="97:43">(<argument pos:start="97:39" pos:end="97:42"><expr pos:start="97:39" pos:end="97:42"><name pos:start="97:39" pos:end="97:42">buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="99:11" pos:end="107:9">else <block pos:start="99:16" pos:end="107:9">{<block_content pos:start="101:13" pos:end="105:69">

            <expr_stmt pos:start="101:13" pos:end="101:38"><expr pos:start="101:13" pos:end="101:37"><call pos:start="101:13" pos:end="101:37"><name pos:start="101:13" pos:end="101:27">rtsp_parse_line</name><argument_list pos:start="101:28" pos:end="101:37">(<argument pos:start="101:29" pos:end="101:33"><expr pos:start="101:29" pos:end="101:33"><name pos:start="101:29" pos:end="101:33">reply</name></expr></argument>, <argument pos:start="101:36" pos:end="101:36"><expr pos:start="101:36" pos:end="101:36"><name pos:start="101:36" pos:end="101:36">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:69"><expr pos:start="103:13" pos:end="103:68"><call pos:start="103:13" pos:end="103:68"><name pos:start="103:13" pos:end="103:22">av_strlcat</name><argument_list pos:start="103:23" pos:end="103:68">(<argument pos:start="103:24" pos:end="103:37"><expr pos:start="103:24" pos:end="103:37"><name pos:start="103:24" pos:end="103:37"><name pos:start="103:24" pos:end="103:25">rt</name><operator pos:start="103:26" pos:end="103:27">-&gt;</operator><name pos:start="103:28" pos:end="103:37">last_reply</name></name></expr></argument>, <argument pos:start="103:40" pos:end="103:40"><expr pos:start="103:40" pos:end="103:40"><name pos:start="103:40" pos:end="103:40">p</name></expr></argument>,    <argument pos:start="103:46" pos:end="103:67"><expr pos:start="103:46" pos:end="103:67"><sizeof pos:start="103:46" pos:end="103:67">sizeof<argument_list pos:start="103:52" pos:end="103:67">(<argument pos:start="103:53" pos:end="103:66"><expr pos:start="103:53" pos:end="103:66"><name pos:start="103:53" pos:end="103:66"><name pos:start="103:53" pos:end="103:54">rt</name><operator pos:start="103:55" pos:end="103:56">-&gt;</operator><name pos:start="103:57" pos:end="103:66">last_reply</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:69"><expr pos:start="105:13" pos:end="105:68"><call pos:start="105:13" pos:end="105:68"><name pos:start="105:13" pos:end="105:22">av_strlcat</name><argument_list pos:start="105:23" pos:end="105:68">(<argument pos:start="105:24" pos:end="105:37"><expr pos:start="105:24" pos:end="105:37"><name pos:start="105:24" pos:end="105:37"><name pos:start="105:24" pos:end="105:25">rt</name><operator pos:start="105:26" pos:end="105:27">-&gt;</operator><name pos:start="105:28" pos:end="105:37">last_reply</name></name></expr></argument>, <argument pos:start="105:40" pos:end="105:43"><expr pos:start="105:40" pos:end="105:43"><literal type="string" pos:start="105:40" pos:end="105:43">"\n"</literal></expr></argument>, <argument pos:start="105:46" pos:end="105:67"><expr pos:start="105:46" pos:end="105:67"><sizeof pos:start="105:46" pos:end="105:67">sizeof<argument_list pos:start="105:52" pos:end="105:67">(<argument pos:start="105:53" pos:end="105:66"><expr pos:start="105:53" pos:end="105:66"><name pos:start="105:53" pos:end="105:66"><name pos:start="105:53" pos:end="105:54">rt</name><operator pos:start="105:55" pos:end="105:56">-&gt;</operator><name pos:start="105:57" pos:end="105:66">last_reply</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:21"><expr pos:start="109:9" pos:end="109:20"><name pos:start="109:9" pos:end="109:18">line_count</name><operator pos:start="109:19" pos:end="109:20">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="115:5" pos:end="117:78"><if pos:start="115:5" pos:end="117:78">if <condition pos:start="115:8" pos:end="115:66">(<expr pos:start="115:9" pos:end="115:65"><name pos:start="115:9" pos:end="115:25"><name pos:start="115:9" pos:end="115:10">rt</name><operator pos:start="115:11" pos:end="115:12">-&gt;</operator><name pos:start="115:13" pos:end="115:22">session_id</name><index pos:start="115:23" pos:end="115:25">[<expr pos:start="115:24" pos:end="115:24"><literal type="number" pos:start="115:24" pos:end="115:24">0</literal></expr>]</index></name> <operator pos:start="115:27" pos:end="115:28">==</operator> <literal type="char" pos:start="115:30" pos:end="115:33">'\0'</literal> <operator pos:start="115:35" pos:end="115:36">&amp;&amp;</operator> <name pos:start="115:38" pos:end="115:57"><name pos:start="115:38" pos:end="115:42">reply</name><operator pos:start="115:43" pos:end="115:44">-&gt;</operator><name pos:start="115:45" pos:end="115:54">session_id</name><index pos:start="115:55" pos:end="115:57">[<expr pos:start="115:56" pos:end="115:56"><literal type="number" pos:start="115:56" pos:end="115:56">0</literal></expr>]</index></name> <operator pos:start="115:59" pos:end="115:60">!=</operator> <literal type="char" pos:start="115:62" pos:end="115:65">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="117:9" pos:end="117:78"><block_content pos:start="117:9" pos:end="117:78">

        <expr_stmt pos:start="117:9" pos:end="117:78"><expr pos:start="117:9" pos:end="117:77"><call pos:start="117:9" pos:end="117:77"><name pos:start="117:9" pos:end="117:18">av_strlcpy</name><argument_list pos:start="117:19" pos:end="117:77">(<argument pos:start="117:20" pos:end="117:33"><expr pos:start="117:20" pos:end="117:33"><name pos:start="117:20" pos:end="117:33"><name pos:start="117:20" pos:end="117:21">rt</name><operator pos:start="117:22" pos:end="117:23">-&gt;</operator><name pos:start="117:24" pos:end="117:33">session_id</name></name></expr></argument>, <argument pos:start="117:36" pos:end="117:52"><expr pos:start="117:36" pos:end="117:52"><name pos:start="117:36" pos:end="117:52"><name pos:start="117:36" pos:end="117:40">reply</name><operator pos:start="117:41" pos:end="117:42">-&gt;</operator><name pos:start="117:43" pos:end="117:52">session_id</name></name></expr></argument>, <argument pos:start="117:55" pos:end="117:76"><expr pos:start="117:55" pos:end="117:76"><sizeof pos:start="117:55" pos:end="117:76">sizeof<argument_list pos:start="117:61" pos:end="117:76">(<argument pos:start="117:62" pos:end="117:75"><expr pos:start="117:62" pos:end="117:75"><name pos:start="117:62" pos:end="117:75"><name pos:start="117:62" pos:end="117:63">rt</name><operator pos:start="117:64" pos:end="117:65">-&gt;</operator><name pos:start="117:66" pos:end="117:75">session_id</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:43"><expr pos:start="121:5" pos:end="121:42"><name pos:start="121:5" pos:end="121:18">content_length</name> <operator pos:start="121:20" pos:end="121:20">=</operator> <name pos:start="121:22" pos:end="121:42"><name pos:start="121:22" pos:end="121:26">reply</name><operator pos:start="121:27" pos:end="121:28">-&gt;</operator><name pos:start="121:29" pos:end="121:42">content_length</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="123:5" pos:end="133:5"><if pos:start="123:5" pos:end="133:5">if <condition pos:start="123:8" pos:end="123:27">(<expr pos:start="123:9" pos:end="123:26"><name pos:start="123:9" pos:end="123:22">content_length</name> <operator pos:start="123:24" pos:end="123:24">&gt;</operator> <literal type="number" pos:start="123:26" pos:end="123:26">0</literal></expr>)</condition> <block pos:start="123:29" pos:end="133:5">{<block_content pos:start="127:9" pos:end="131:39">

        <comment type="block" pos:start="125:9" pos:end="125:77">/* leave some room for a trailing '\0' (useful for simple parsing) */</comment>

        <expr_stmt pos:start="127:9" pos:end="127:48"><expr pos:start="127:9" pos:end="127:47"><name pos:start="127:9" pos:end="127:15">content</name> <operator pos:start="127:17" pos:end="127:17">=</operator> <call pos:start="127:19" pos:end="127:47"><name pos:start="127:19" pos:end="127:27">av_malloc</name><argument_list pos:start="127:28" pos:end="127:47">(<argument pos:start="127:29" pos:end="127:46"><expr pos:start="127:29" pos:end="127:46"><name pos:start="127:29" pos:end="127:42">content_length</name> <operator pos:start="127:44" pos:end="127:44">+</operator> <literal type="number" pos:start="127:46" pos:end="127:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:70"><expr pos:start="129:9" pos:end="129:69"><operator pos:start="129:9" pos:end="129:9">(</operator><name pos:start="129:10" pos:end="129:13">void</name><operator pos:start="129:14" pos:end="129:14">)</operator><call pos:start="129:15" pos:end="129:69"><name pos:start="129:15" pos:end="129:31">url_read_complete</name><argument_list pos:start="129:32" pos:end="129:69">(<argument pos:start="129:33" pos:end="129:43"><expr pos:start="129:33" pos:end="129:43"><name pos:start="129:33" pos:end="129:43"><name pos:start="129:33" pos:end="129:34">rt</name><operator pos:start="129:35" pos:end="129:36">-&gt;</operator><name pos:start="129:37" pos:end="129:43">rtsp_hd</name></name></expr></argument>, <argument pos:start="129:46" pos:end="129:52"><expr pos:start="129:46" pos:end="129:52"><name pos:start="129:46" pos:end="129:52">content</name></expr></argument>, <argument pos:start="129:55" pos:end="129:68"><expr pos:start="129:55" pos:end="129:68"><name pos:start="129:55" pos:end="129:68">content_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:39"><expr pos:start="131:9" pos:end="131:38"><name pos:start="131:9" pos:end="131:31"><name pos:start="131:9" pos:end="131:15">content</name><index pos:start="131:16" pos:end="131:31">[<expr pos:start="131:17" pos:end="131:30"><name pos:start="131:17" pos:end="131:30">content_length</name></expr>]</index></name> <operator pos:start="131:33" pos:end="131:33">=</operator> <literal type="char" pos:start="131:35" pos:end="131:38">'\0'</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="135:5" pos:end="141:25"><if pos:start="135:5" pos:end="137:31">if <condition pos:start="135:8" pos:end="135:20">(<expr pos:start="135:9" pos:end="135:19"><name pos:start="135:9" pos:end="135:19">content_ptr</name></expr>)</condition><block type="pseudo" pos:start="137:9" pos:end="137:31"><block_content pos:start="137:9" pos:end="137:31">

        <expr_stmt pos:start="137:9" pos:end="137:31"><expr pos:start="137:9" pos:end="137:30"><operator pos:start="137:9" pos:end="137:9">*</operator><name pos:start="137:10" pos:end="137:20">content_ptr</name> <operator pos:start="137:22" pos:end="137:22">=</operator> <name pos:start="137:24" pos:end="137:30">content</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="139:5" pos:end="141:25">else<block type="pseudo" pos:start="141:9" pos:end="141:25"><block_content pos:start="141:9" pos:end="141:25">

        <expr_stmt pos:start="141:9" pos:end="141:25"><expr pos:start="141:9" pos:end="141:24"><call pos:start="141:9" pos:end="141:24"><name pos:start="141:9" pos:end="141:15">av_free</name><argument_list pos:start="141:16" pos:end="141:24">(<argument pos:start="141:17" pos:end="141:23"><expr pos:start="141:17" pos:end="141:23"><name pos:start="141:17" pos:end="141:23">content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <comment type="block" pos:start="145:5" pos:end="145:13">/* EOS */</comment>

    <if_stmt pos:start="147:5" pos:end="163:30"><if pos:start="147:5" pos:end="153:36">if <condition pos:start="147:8" pos:end="151:63">(<expr pos:start="147:9" pos:end="151:29"><name pos:start="147:9" pos:end="147:21"><name pos:start="147:9" pos:end="147:13">reply</name><operator pos:start="147:14" pos:end="147:15">-&gt;</operator><name pos:start="147:16" pos:end="147:21">notice</name></name> <operator pos:start="147:23" pos:end="147:24">==</operator> <literal type="number" pos:start="147:26" pos:end="147:29">2101</literal> <comment type="block" pos:start="147:31" pos:end="147:57">/* End-of-Stream Reached */</comment>      <operator pos:start="147:64" pos:end="147:65">||</operator>

        <name pos:start="149:9" pos:end="149:21"><name pos:start="149:9" pos:end="149:13">reply</name><operator pos:start="149:14" pos:end="149:15">-&gt;</operator><name pos:start="149:16" pos:end="149:21">notice</name></name> <operator pos:start="149:23" pos:end="149:24">==</operator> <literal type="number" pos:start="149:26" pos:end="149:29">2104</literal> <comment type="block" pos:start="149:31" pos:end="149:59">/* Start-of-Stream Reached */</comment>    <operator pos:start="149:64" pos:end="149:65">||</operator>

        <name pos:start="151:9" pos:end="151:21"><name pos:start="151:9" pos:end="151:13">reply</name><operator pos:start="151:14" pos:end="151:15">-&gt;</operator><name pos:start="151:16" pos:end="151:21">notice</name></name> <operator pos:start="151:23" pos:end="151:24">==</operator> <literal type="number" pos:start="151:26" pos:end="151:29">2306</literal></expr> <comment type="block" pos:start="151:31" pos:end="151:62">/* Continuous Feed Terminated */</comment>)</condition><block type="pseudo" pos:start="153:9" pos:end="153:36"><block_content pos:start="153:9" pos:end="153:36">

        <expr_stmt pos:start="153:9" pos:end="153:36"><expr pos:start="153:9" pos:end="153:35"><name pos:start="153:9" pos:end="153:17"><name pos:start="153:9" pos:end="153:10">rt</name><operator pos:start="153:11" pos:end="153:12">-&gt;</operator><name pos:start="153:13" pos:end="153:17">state</name></name> <operator pos:start="153:19" pos:end="153:19">=</operator> <name pos:start="153:21" pos:end="153:35">RTSP_STATE_IDLE</name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="155:5" pos:end="157:28">else if <condition pos:start="155:13" pos:end="155:59">(<expr pos:start="155:14" pos:end="155:58"><name pos:start="155:14" pos:end="155:26"><name pos:start="155:14" pos:end="155:18">reply</name><operator pos:start="155:19" pos:end="155:20">-&gt;</operator><name pos:start="155:21" pos:end="155:26">notice</name></name> <operator pos:start="155:28" pos:end="155:29">&gt;=</operator> <literal type="number" pos:start="155:31" pos:end="155:34">4400</literal> <operator pos:start="155:36" pos:end="155:37">&amp;&amp;</operator> <name pos:start="155:39" pos:end="155:51"><name pos:start="155:39" pos:end="155:43">reply</name><operator pos:start="155:44" pos:end="155:45">-&gt;</operator><name pos:start="155:46" pos:end="155:51">notice</name></name> <operator pos:start="155:53" pos:end="155:53">&lt;</operator> <literal type="number" pos:start="155:55" pos:end="155:58">5500</literal></expr>)</condition><block type="pseudo" pos:start="157:9" pos:end="157:28"><block_content pos:start="157:9" pos:end="157:28">

        <return pos:start="157:9" pos:end="157:28">return <expr pos:start="157:16" pos:end="157:27"><call pos:start="157:16" pos:end="157:27"><name pos:start="157:16" pos:end="157:22">AVERROR</name><argument_list pos:start="157:23" pos:end="157:27">(<argument pos:start="157:24" pos:end="157:26"><expr pos:start="157:24" pos:end="157:26"><name pos:start="157:24" pos:end="157:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if> <comment type="block" pos:start="157:30" pos:end="157:55">/* data or server error */</comment>

    <if type="elseif" pos:start="159:5" pos:end="163:30">else if <condition pos:start="159:13" pos:end="161:80">(<expr pos:start="159:14" pos:end="161:60"><name pos:start="159:14" pos:end="159:26"><name pos:start="159:14" pos:end="159:18">reply</name><operator pos:start="159:19" pos:end="159:20">-&gt;</operator><name pos:start="159:21" pos:end="159:26">notice</name></name> <operator pos:start="159:28" pos:end="159:29">==</operator> <literal type="number" pos:start="159:31" pos:end="159:34">2401</literal> <comment type="block" pos:start="159:36" pos:end="159:55">/* Ticket Expired */</comment> <operator pos:start="159:57" pos:end="159:58">||</operator>

             <operator pos:start="161:14" pos:end="161:14">(</operator><name pos:start="161:15" pos:end="161:27"><name pos:start="161:15" pos:end="161:19">reply</name><operator pos:start="161:20" pos:end="161:21">-&gt;</operator><name pos:start="161:22" pos:end="161:27">notice</name></name> <operator pos:start="161:29" pos:end="161:30">&gt;=</operator> <literal type="number" pos:start="161:32" pos:end="161:35">5500</literal> <operator pos:start="161:37" pos:end="161:38">&amp;&amp;</operator> <name pos:start="161:40" pos:end="161:52"><name pos:start="161:40" pos:end="161:44">reply</name><operator pos:start="161:45" pos:end="161:46">-&gt;</operator><name pos:start="161:47" pos:end="161:52">notice</name></name> <operator pos:start="161:54" pos:end="161:54">&lt;</operator> <literal type="number" pos:start="161:56" pos:end="161:59">5600</literal><operator pos:start="161:60" pos:end="161:60">)</operator></expr> <comment type="block" pos:start="161:62" pos:end="161:78">/* end of term */</comment> )</condition><block type="pseudo" pos:start="163:9" pos:end="163:30"><block_content pos:start="163:9" pos:end="163:30">

        <return pos:start="163:9" pos:end="163:30">return <expr pos:start="163:16" pos:end="163:29"><call pos:start="163:16" pos:end="163:29"><name pos:start="163:16" pos:end="163:22">AVERROR</name><argument_list pos:start="163:23" pos:end="163:29">(<argument pos:start="163:24" pos:end="163:28"><expr pos:start="163:24" pos:end="163:28"><name pos:start="163:24" pos:end="163:28">EPERM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="167:5" pos:end="167:13">return <expr pos:start="167:12" pos:end="167:12"><literal type="number" pos:start="167:12" pos:end="167:12">0</literal></expr>;</return>

</block_content>}</block>
</unit>
