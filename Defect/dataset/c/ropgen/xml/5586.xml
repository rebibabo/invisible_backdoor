<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5586.c" pos:tabs="8"><function pos:start="1:1" pos:end="171:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">qesd_init_in</name> <parameter_list pos:start="1:25" pos:end="1:58">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:34">HWVoiceIn</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:38">hw</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:57"><decl pos:start="1:41" pos:end="1:57"><type pos:start="1:41" pos:end="1:57"><name pos:start="1:41" pos:end="1:53">audsettings_t</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:57">as</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="171:1">{<block_content pos:start="5:5" pos:end="169:14">

    <decl_stmt pos:start="5:5" pos:end="5:40"><decl pos:start="5:5" pos:end="5:39"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">ESDVoiceIn</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">esd</name> <init pos:start="5:21" pos:end="5:39">= <expr pos:start="5:23" pos:end="5:39"><operator pos:start="5:23" pos:end="5:23">(</operator><name pos:start="5:24" pos:end="5:33">ESDVoiceIn</name> <operator pos:start="5:35" pos:end="5:35">*</operator><operator pos:start="5:36" pos:end="5:36">)</operator> <name pos:start="5:38" pos:end="5:39">hw</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17">audsettings_t</name></type> <name pos:start="7:19" pos:end="7:24">obt_as</name> <init pos:start="7:26" pos:end="7:30">= <expr pos:start="7:28" pos:end="7:30"><operator pos:start="7:28" pos:end="7:28">*</operator><name pos:start="7:29" pos:end="7:30">as</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">esdfmt</name> <init pos:start="9:16" pos:end="9:40">= <expr pos:start="9:18" pos:end="9:40"><name pos:start="9:18" pos:end="9:27">ESD_STREAM</name> <operator pos:start="9:29" pos:end="9:29">|</operator> <name pos:start="9:31" pos:end="9:40">ESD_RECORD</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">sigset_t</name></type> <name pos:start="13:14" pos:end="13:16">set</name></decl>, <decl pos:start="13:19" pos:end="13:25"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:19" pos:end="13:25">old_set</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:22"><expr pos:start="17:5" pos:end="17:21"><call pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:14">sigfillset</name> <argument_list pos:start="17:16" pos:end="17:21">(<argument pos:start="17:17" pos:end="17:20"><expr pos:start="17:17" pos:end="17:20"><operator pos:start="17:17" pos:end="17:17">&amp;</operator><name pos:start="17:18" pos:end="17:20">set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:59"><expr pos:start="21:5" pos:end="21:58"><name pos:start="21:5" pos:end="21:10">esdfmt</name> <operator pos:start="21:12" pos:end="21:13">|=</operator> <ternary pos:start="21:15" pos:end="21:58"><condition pos:start="21:15" pos:end="21:36"><expr pos:start="21:15" pos:end="21:34"><operator pos:start="21:15" pos:end="21:15">(</operator><name pos:start="21:16" pos:end="21:28"><name pos:start="21:16" pos:end="21:17">as</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:28">nchannels</name></name> <operator pos:start="21:30" pos:end="21:31">==</operator> <literal type="number" pos:start="21:33" pos:end="21:33">2</literal><operator pos:start="21:34" pos:end="21:34">)</operator></expr> ?</condition><then pos:start="21:38" pos:end="21:47"> <expr pos:start="21:38" pos:end="21:47"><name pos:start="21:38" pos:end="21:47">ESD_STEREO</name></expr> </then><else pos:start="21:49" pos:end="21:58">: <expr pos:start="21:51" pos:end="21:58"><name pos:start="21:51" pos:end="21:58">ESD_MONO</name></expr></else></ternary></expr>;</expr_stmt>

    <switch pos:start="23:5" pos:end="61:5">switch <condition pos:start="23:12" pos:end="23:20">(<expr pos:start="23:13" pos:end="23:19"><name pos:start="23:13" pos:end="23:19"><name pos:start="23:13" pos:end="23:14">as</name><operator pos:start="23:15" pos:end="23:16">-&gt;</operator><name pos:start="23:17" pos:end="23:19">fmt</name></name></expr>)</condition> <block pos:start="23:22" pos:end="61:5">{<block_content pos:start="25:5" pos:end="59:14">

    <case pos:start="25:5" pos:end="25:20">case <expr pos:start="25:10" pos:end="25:19"><name pos:start="25:10" pos:end="25:19">AUD_FMT_S8</name></expr>:</case>

    <case pos:start="27:5" pos:end="27:20">case <expr pos:start="27:10" pos:end="27:19"><name pos:start="27:10" pos:end="27:19">AUD_FMT_U8</name></expr>:</case>

        <expr_stmt pos:start="29:9" pos:end="29:28"><expr pos:start="29:9" pos:end="29:27"><name pos:start="29:9" pos:end="29:14">esdfmt</name> <operator pos:start="29:16" pos:end="29:17">|=</operator> <name pos:start="29:19" pos:end="29:27">ESD_BITS8</name></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:32"><expr pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:18"><name pos:start="31:9" pos:end="31:14">obt_as</name><operator pos:start="31:15" pos:end="31:15">.</operator><name pos:start="31:16" pos:end="31:18">fmt</name></name> <operator pos:start="31:20" pos:end="31:20">=</operator> <name pos:start="31:22" pos:end="31:31">AUD_FMT_U8</name></expr>;</expr_stmt>

        <break pos:start="33:9" pos:end="33:14">break;</break>



    <case pos:start="37:5" pos:end="37:21">case <expr pos:start="37:10" pos:end="37:20"><name pos:start="37:10" pos:end="37:20">AUD_FMT_S16</name></expr>:</case>

    <case pos:start="39:5" pos:end="39:21">case <expr pos:start="39:10" pos:end="39:20"><name pos:start="39:10" pos:end="39:20">AUD_FMT_U16</name></expr>:</case>

        <expr_stmt pos:start="41:9" pos:end="41:29"><expr pos:start="41:9" pos:end="41:28"><name pos:start="41:9" pos:end="41:14">esdfmt</name> <operator pos:start="41:16" pos:end="41:17">|=</operator> <name pos:start="41:19" pos:end="41:28">ESD_BITS16</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:33"><expr pos:start="43:9" pos:end="43:32"><name pos:start="43:9" pos:end="43:18"><name pos:start="43:9" pos:end="43:14">obt_as</name><operator pos:start="43:15" pos:end="43:15">.</operator><name pos:start="43:16" pos:end="43:18">fmt</name></name> <operator pos:start="43:20" pos:end="43:20">=</operator> <name pos:start="43:22" pos:end="43:32">AUD_FMT_S16</name></expr>;</expr_stmt>

        <break pos:start="45:9" pos:end="45:14">break;</break>



    <case pos:start="49:5" pos:end="49:21">case <expr pos:start="49:10" pos:end="49:20"><name pos:start="49:10" pos:end="49:20">AUD_FMT_S32</name></expr>:</case>

    <case pos:start="51:5" pos:end="51:21">case <expr pos:start="51:10" pos:end="51:20"><name pos:start="51:10" pos:end="51:20">AUD_FMT_U32</name></expr>:</case>

        <expr_stmt pos:start="53:9" pos:end="53:58"><expr pos:start="53:9" pos:end="53:57"><call pos:start="53:9" pos:end="53:57"><name pos:start="53:9" pos:end="53:13">dolog</name> <argument_list pos:start="53:15" pos:end="53:57">(<argument pos:start="53:16" pos:end="53:56"><expr pos:start="53:16" pos:end="53:56"><literal type="string" pos:start="53:16" pos:end="53:56">"Will use 16 instead of 32 bit samples\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:29"><expr pos:start="55:9" pos:end="55:28"><name pos:start="55:9" pos:end="55:14">esdfmt</name> <operator pos:start="55:16" pos:end="55:17">|=</operator> <name pos:start="55:19" pos:end="55:28">ESD_BITS16</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:33"><expr pos:start="57:9" pos:end="57:32"><name pos:start="57:9" pos:end="57:18"><name pos:start="57:9" pos:end="57:14">obt_as</name><operator pos:start="57:15" pos:end="57:15">.</operator><name pos:start="57:16" pos:end="57:18">fmt</name></name> <operator pos:start="57:20" pos:end="57:20">=</operator> <name pos:start="57:22" pos:end="57:32">AUD_FMT_S16</name></expr>;</expr_stmt>

        <break pos:start="59:9" pos:end="59:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="63:5" pos:end="63:46"><expr pos:start="63:5" pos:end="63:45"><name pos:start="63:5" pos:end="63:21"><name pos:start="63:5" pos:end="63:10">obt_as</name><operator pos:start="63:11" pos:end="63:11">.</operator><name pos:start="63:12" pos:end="63:21">endianness</name></name> <operator pos:start="63:23" pos:end="63:23">=</operator> <name pos:start="63:25" pos:end="63:45">AUDIO_HOST_ENDIANNESS</name></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:45"><expr pos:start="67:5" pos:end="67:44"><call pos:start="67:5" pos:end="67:44"><name pos:start="67:5" pos:end="67:23">audio_pcm_init_info</name> <argument_list pos:start="67:25" pos:end="67:44">(<argument pos:start="67:26" pos:end="67:34"><expr pos:start="67:26" pos:end="67:34"><operator pos:start="67:26" pos:end="67:26">&amp;</operator><name pos:start="67:27" pos:end="67:34"><name pos:start="67:27" pos:end="67:28">hw</name><operator pos:start="67:29" pos:end="67:30">-&gt;</operator><name pos:start="67:31" pos:end="67:34">info</name></name></expr></argument>, <argument pos:start="67:37" pos:end="67:43"><expr pos:start="67:37" pos:end="67:43"><operator pos:start="67:37" pos:end="67:37">&amp;</operator><name pos:start="67:38" pos:end="67:43">obt_as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:31"><expr pos:start="71:5" pos:end="71:30"><name pos:start="71:5" pos:end="71:15"><name pos:start="71:5" pos:end="71:6">hw</name><operator pos:start="71:7" pos:end="71:8">-&gt;</operator><name pos:start="71:9" pos:end="71:15">samples</name></name> <operator pos:start="71:17" pos:end="71:17">=</operator> <name pos:start="71:19" pos:end="71:30"><name pos:start="71:19" pos:end="71:22">conf</name><operator pos:start="71:23" pos:end="71:23">.</operator><name pos:start="71:24" pos:end="71:30">samples</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:79"><expr pos:start="73:5" pos:end="73:78"><name pos:start="73:5" pos:end="73:16"><name pos:start="73:5" pos:end="73:7">esd</name><operator pos:start="73:8" pos:end="73:9">-&gt;</operator><name pos:start="73:10" pos:end="73:16">pcm_buf</name></name> <operator pos:start="73:18" pos:end="73:18">=</operator> <call pos:start="73:20" pos:end="73:78"><name pos:start="73:20" pos:end="73:31">audio_calloc</name> <argument_list pos:start="73:33" pos:end="73:78">(<argument pos:start="73:34" pos:end="73:43"><expr pos:start="73:34" pos:end="73:43"><name pos:start="73:34" pos:end="73:43">AUDIO_FUNC</name></expr></argument>, <argument pos:start="73:46" pos:end="73:56"><expr pos:start="73:46" pos:end="73:56"><name pos:start="73:46" pos:end="73:56"><name pos:start="73:46" pos:end="73:47">hw</name><operator pos:start="73:48" pos:end="73:49">-&gt;</operator><name pos:start="73:50" pos:end="73:56">samples</name></name></expr></argument>, <argument pos:start="73:59" pos:end="73:77"><expr pos:start="73:59" pos:end="73:77"><literal type="number" pos:start="73:59" pos:end="73:59">1</literal> <operator pos:start="73:61" pos:end="73:62">&lt;&lt;</operator> <name pos:start="73:64" pos:end="73:77"><name pos:start="73:64" pos:end="73:65">hw</name><operator pos:start="73:66" pos:end="73:67">-&gt;</operator><name pos:start="73:68" pos:end="73:71">info</name><operator pos:start="73:72" pos:end="73:72">.</operator><name pos:start="73:73" pos:end="73:77">shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="83:5"><if pos:start="75:5" pos:end="83:5">if <condition pos:start="75:8" pos:end="75:22">(<expr pos:start="75:9" pos:end="75:21"><operator pos:start="75:9" pos:end="75:9">!</operator><name pos:start="75:10" pos:end="75:21"><name pos:start="75:10" pos:end="75:12">esd</name><operator pos:start="75:13" pos:end="75:14">-&gt;</operator><name pos:start="75:15" pos:end="75:21">pcm_buf</name></name></expr>)</condition> <block pos:start="75:24" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:18">

        <expr_stmt pos:start="77:9" pos:end="79:46"><expr pos:start="77:9" pos:end="79:45"><call pos:start="77:9" pos:end="79:45"><name pos:start="77:9" pos:end="77:13">dolog</name> <argument_list pos:start="77:15" pos:end="79:45">(<argument pos:start="77:16" pos:end="77:55"><expr pos:start="77:16" pos:end="77:55"><literal type="string" pos:start="77:16" pos:end="77:55">"Could not allocate buffer (%d bytes)\n"</literal></expr></argument>,

               <argument pos:start="79:16" pos:end="79:44"><expr pos:start="79:16" pos:end="79:44"><name pos:start="79:16" pos:end="79:26"><name pos:start="79:16" pos:end="79:17">hw</name><operator pos:start="79:18" pos:end="79:19">-&gt;</operator><name pos:start="79:20" pos:end="79:26">samples</name></name> <operator pos:start="79:28" pos:end="79:29">&lt;&lt;</operator> <name pos:start="79:31" pos:end="79:44"><name pos:start="79:31" pos:end="79:32">hw</name><operator pos:start="79:33" pos:end="79:34">-&gt;</operator><name pos:start="79:35" pos:end="79:38">info</name><operator pos:start="79:39" pos:end="79:39">.</operator><name pos:start="79:40" pos:end="79:44">shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:18">return <expr pos:start="81:16" pos:end="81:17"><operator pos:start="81:16" pos:end="81:16">-</operator><literal type="number" pos:start="81:17" pos:end="81:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:17"><expr pos:start="87:5" pos:end="87:16"><name pos:start="87:5" pos:end="87:11"><name pos:start="87:5" pos:end="87:7">esd</name><operator pos:start="87:8" pos:end="87:9">-&gt;</operator><name pos:start="87:10" pos:end="87:11">fd</name></name> <operator pos:start="87:13" pos:end="87:13">=</operator> <operator pos:start="87:15" pos:end="87:15">-</operator><literal type="number" pos:start="87:16" pos:end="87:16">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:54"><expr pos:start="91:5" pos:end="91:53"><name pos:start="91:5" pos:end="91:7">err</name> <operator pos:start="91:9" pos:end="91:9">=</operator> <call pos:start="91:11" pos:end="91:53"><name pos:start="91:11" pos:end="91:25">pthread_sigmask</name> <argument_list pos:start="91:27" pos:end="91:53">(<argument pos:start="91:28" pos:end="91:36"><expr pos:start="91:28" pos:end="91:36"><name pos:start="91:28" pos:end="91:36">SIG_BLOCK</name></expr></argument>, <argument pos:start="91:39" pos:end="91:42"><expr pos:start="91:39" pos:end="91:42"><operator pos:start="91:39" pos:end="91:39">&amp;</operator><name pos:start="91:40" pos:end="91:42">set</name></expr></argument>, <argument pos:start="91:45" pos:end="91:52"><expr pos:start="91:45" pos:end="91:52"><operator pos:start="91:45" pos:end="91:45">&amp;</operator><name pos:start="91:46" pos:end="91:52">old_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="99:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:12">(<expr pos:start="93:9" pos:end="93:11"><name pos:start="93:9" pos:end="93:11">err</name></expr>)</condition> <block pos:start="93:14" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:19">

        <expr_stmt pos:start="95:9" pos:end="95:54"><expr pos:start="95:9" pos:end="95:53"><call pos:start="95:9" pos:end="95:53"><name pos:start="95:9" pos:end="95:19">qesd_logerr</name> <argument_list pos:start="95:21" pos:end="95:53">(<argument pos:start="95:22" pos:end="95:24"><expr pos:start="95:22" pos:end="95:24"><name pos:start="95:22" pos:end="95:24">err</name></expr></argument>, <argument pos:start="95:27" pos:end="95:52"><expr pos:start="95:27" pos:end="95:52"><literal type="string" pos:start="95:27" pos:end="95:52">"pthread_sigmask failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="97:9" pos:end="97:19">goto <name pos:start="97:14" pos:end="97:18">fail1</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:72"><expr pos:start="103:5" pos:end="103:71"><name pos:start="103:5" pos:end="103:11"><name pos:start="103:5" pos:end="103:7">esd</name><operator pos:start="103:8" pos:end="103:9">-&gt;</operator><name pos:start="103:10" pos:end="103:11">fd</name></name> <operator pos:start="103:13" pos:end="103:13">=</operator> <call pos:start="103:15" pos:end="103:71"><name pos:start="103:15" pos:end="103:31">esd_record_stream</name> <argument_list pos:start="103:33" pos:end="103:71">(<argument pos:start="103:34" pos:end="103:39"><expr pos:start="103:34" pos:end="103:39"><name pos:start="103:34" pos:end="103:39">esdfmt</name></expr></argument>, <argument pos:start="103:42" pos:end="103:49"><expr pos:start="103:42" pos:end="103:49"><name pos:start="103:42" pos:end="103:49"><name pos:start="103:42" pos:end="103:43">as</name><operator pos:start="103:44" pos:end="103:45">-&gt;</operator><name pos:start="103:46" pos:end="103:49">freq</name></name></expr></argument>, <argument pos:start="103:52" pos:end="103:64"><expr pos:start="103:52" pos:end="103:64"><name pos:start="103:52" pos:end="103:64"><name pos:start="103:52" pos:end="103:55">conf</name><operator pos:start="103:56" pos:end="103:56">.</operator><name pos:start="103:57" pos:end="103:64">adc_host</name></name></expr></argument>, <argument pos:start="103:67" pos:end="103:70"><expr pos:start="103:67" pos:end="103:70"><name pos:start="103:67" pos:end="103:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="111:5"><if pos:start="105:5" pos:end="111:5">if <condition pos:start="105:8" pos:end="105:20">(<expr pos:start="105:9" pos:end="105:19"><name pos:start="105:9" pos:end="105:15"><name pos:start="105:9" pos:end="105:11">esd</name><operator pos:start="105:12" pos:end="105:13">-&gt;</operator><name pos:start="105:14" pos:end="105:15">fd</name></name> <operator pos:start="105:17" pos:end="105:17">&lt;</operator> <literal type="number" pos:start="105:19" pos:end="105:19">0</literal></expr>)</condition> <block pos:start="105:22" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:19">

        <expr_stmt pos:start="107:9" pos:end="107:58"><expr pos:start="107:9" pos:end="107:57"><call pos:start="107:9" pos:end="107:57"><name pos:start="107:9" pos:end="107:19">qesd_logerr</name> <argument_list pos:start="107:21" pos:end="107:57">(<argument pos:start="107:22" pos:end="107:26"><expr pos:start="107:22" pos:end="107:26"><name pos:start="107:22" pos:end="107:26">errno</name></expr></argument>, <argument pos:start="107:29" pos:end="107:56"><expr pos:start="107:29" pos:end="107:56"><literal type="string" pos:start="107:29" pos:end="107:56">"esd_record_stream failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="109:9" pos:end="109:19">goto <name pos:start="109:14" pos:end="109:18">fail2</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="115:5" pos:end="119:5"><if pos:start="115:5" pos:end="119:5">if <condition pos:start="115:8" pos:end="115:77">(<expr pos:start="115:9" pos:end="115:76"><call pos:start="115:9" pos:end="115:76"><name pos:start="115:9" pos:end="115:21">audio_pt_init</name> <argument_list pos:start="115:23" pos:end="115:76">(<argument pos:start="115:24" pos:end="115:31"><expr pos:start="115:24" pos:end="115:31"><operator pos:start="115:24" pos:end="115:24">&amp;</operator><name pos:start="115:25" pos:end="115:31"><name pos:start="115:25" pos:end="115:27">esd</name><operator pos:start="115:28" pos:end="115:29">-&gt;</operator><name pos:start="115:30" pos:end="115:31">pt</name></name></expr></argument>, <argument pos:start="115:34" pos:end="115:47"><expr pos:start="115:34" pos:end="115:47"><name pos:start="115:34" pos:end="115:47">qesd_thread_in</name></expr></argument>, <argument pos:start="115:50" pos:end="115:52"><expr pos:start="115:50" pos:end="115:52"><name pos:start="115:50" pos:end="115:52">esd</name></expr></argument>, <argument pos:start="115:55" pos:end="115:63"><expr pos:start="115:55" pos:end="115:63"><name pos:start="115:55" pos:end="115:63">AUDIO_CAP</name></expr></argument>, <argument pos:start="115:66" pos:end="115:75"><expr pos:start="115:66" pos:end="115:75"><name pos:start="115:66" pos:end="115:75">AUDIO_FUNC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:79" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:19">

        <goto pos:start="117:9" pos:end="117:19">goto <name pos:start="117:14" pos:end="117:18">fail3</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:56"><expr pos:start="123:5" pos:end="123:55"><name pos:start="123:5" pos:end="123:7">err</name> <operator pos:start="123:9" pos:end="123:9">=</operator> <call pos:start="123:11" pos:end="123:55"><name pos:start="123:11" pos:end="123:25">pthread_sigmask</name> <argument_list pos:start="123:27" pos:end="123:55">(<argument pos:start="123:28" pos:end="123:38"><expr pos:start="123:28" pos:end="123:38"><name pos:start="123:28" pos:end="123:38">SIG_SETMASK</name></expr></argument>, <argument pos:start="123:41" pos:end="123:48"><expr pos:start="123:41" pos:end="123:48"><operator pos:start="123:41" pos:end="123:41">&amp;</operator><name pos:start="123:42" pos:end="123:48">old_set</name></expr></argument>, <argument pos:start="123:51" pos:end="123:54"><expr pos:start="123:51" pos:end="123:54"><name pos:start="123:51" pos:end="123:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="129:5"><if pos:start="125:5" pos:end="129:5">if <condition pos:start="125:8" pos:end="125:12">(<expr pos:start="125:9" pos:end="125:11"><name pos:start="125:9" pos:end="125:11">err</name></expr>)</condition> <block pos:start="125:14" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:63">

        <expr_stmt pos:start="127:9" pos:end="127:63"><expr pos:start="127:9" pos:end="127:62"><call pos:start="127:9" pos:end="127:62"><name pos:start="127:9" pos:end="127:19">qesd_logerr</name> <argument_list pos:start="127:21" pos:end="127:62">(<argument pos:start="127:22" pos:end="127:24"><expr pos:start="127:22" pos:end="127:24"><name pos:start="127:22" pos:end="127:24">err</name></expr></argument>, <argument pos:start="127:27" pos:end="127:61"><expr pos:start="127:27" pos:end="127:61"><literal type="string" pos:start="127:27" pos:end="127:61">"pthread_sigmask(restore) failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="133:5" pos:end="133:13">return <expr pos:start="133:12" pos:end="133:12"><literal type="number" pos:start="133:12" pos:end="133:12">0</literal></expr>;</return>



 <label pos:start="137:2" pos:end="137:7"><name pos:start="137:2" pos:end="137:6">fail3</name>:</label>

    <if_stmt pos:start="139:5" pos:end="145:5"><if pos:start="139:5" pos:end="145:5">if <condition pos:start="139:8" pos:end="139:24">(<expr pos:start="139:9" pos:end="139:23"><call pos:start="139:9" pos:end="139:23"><name pos:start="139:9" pos:end="139:13">close</name> <argument_list pos:start="139:15" pos:end="139:23">(<argument pos:start="139:16" pos:end="139:22"><expr pos:start="139:16" pos:end="139:22"><name pos:start="139:16" pos:end="139:22"><name pos:start="139:16" pos:end="139:18">esd</name><operator pos:start="139:19" pos:end="139:20">-&gt;</operator><name pos:start="139:21" pos:end="139:22">fd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="139:26" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:42">

        <expr_stmt pos:start="141:9" pos:end="143:42"><expr pos:start="141:9" pos:end="143:41"><call pos:start="141:9" pos:end="143:41"><name pos:start="141:9" pos:end="141:19">qesd_logerr</name> <argument_list pos:start="141:21" pos:end="143:41">(<argument pos:start="141:22" pos:end="141:26"><expr pos:start="141:22" pos:end="141:26"><name pos:start="141:22" pos:end="141:26">errno</name></expr></argument>, <argument pos:start="141:29" pos:end="141:66"><expr pos:start="141:29" pos:end="141:66"><literal type="string" pos:start="141:29" pos:end="141:66">"%s: close on esd socket(%d) failed\n"</literal></expr></argument>,

                     <argument pos:start="143:22" pos:end="143:31"><expr pos:start="143:22" pos:end="143:31"><name pos:start="143:22" pos:end="143:31">AUDIO_FUNC</name></expr></argument>, <argument pos:start="143:34" pos:end="143:40"><expr pos:start="143:34" pos:end="143:40"><name pos:start="143:34" pos:end="143:40"><name pos:start="143:34" pos:end="143:36">esd</name><operator pos:start="143:37" pos:end="143:38">-&gt;</operator><name pos:start="143:39" pos:end="143:40">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:17"><expr pos:start="147:5" pos:end="147:16"><name pos:start="147:5" pos:end="147:11"><name pos:start="147:5" pos:end="147:7">esd</name><operator pos:start="147:8" pos:end="147:9">-&gt;</operator><name pos:start="147:10" pos:end="147:11">fd</name></name> <operator pos:start="147:13" pos:end="147:13">=</operator> <operator pos:start="147:15" pos:end="147:15">-</operator><literal type="number" pos:start="147:16" pos:end="147:16">1</literal></expr>;</expr_stmt>



 <label pos:start="151:2" pos:end="151:7"><name pos:start="151:2" pos:end="151:6">fail2</name>:</label>

    <expr_stmt pos:start="153:5" pos:end="153:56"><expr pos:start="153:5" pos:end="153:55"><name pos:start="153:5" pos:end="153:7">err</name> <operator pos:start="153:9" pos:end="153:9">=</operator> <call pos:start="153:11" pos:end="153:55"><name pos:start="153:11" pos:end="153:25">pthread_sigmask</name> <argument_list pos:start="153:27" pos:end="153:55">(<argument pos:start="153:28" pos:end="153:38"><expr pos:start="153:28" pos:end="153:38"><name pos:start="153:28" pos:end="153:38">SIG_SETMASK</name></expr></argument>, <argument pos:start="153:41" pos:end="153:48"><expr pos:start="153:41" pos:end="153:48"><operator pos:start="153:41" pos:end="153:41">&amp;</operator><name pos:start="153:42" pos:end="153:48">old_set</name></expr></argument>, <argument pos:start="153:51" pos:end="153:54"><expr pos:start="153:51" pos:end="153:54"><name pos:start="153:51" pos:end="153:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="155:5" pos:end="159:5"><if pos:start="155:5" pos:end="159:5">if <condition pos:start="155:8" pos:end="155:12">(<expr pos:start="155:9" pos:end="155:11"><name pos:start="155:9" pos:end="155:11">err</name></expr>)</condition> <block pos:start="155:14" pos:end="159:5">{<block_content pos:start="157:9" pos:end="157:63">

        <expr_stmt pos:start="157:9" pos:end="157:63"><expr pos:start="157:9" pos:end="157:62"><call pos:start="157:9" pos:end="157:62"><name pos:start="157:9" pos:end="157:19">qesd_logerr</name> <argument_list pos:start="157:21" pos:end="157:62">(<argument pos:start="157:22" pos:end="157:24"><expr pos:start="157:22" pos:end="157:24"><name pos:start="157:22" pos:end="157:24">err</name></expr></argument>, <argument pos:start="157:27" pos:end="157:61"><expr pos:start="157:27" pos:end="157:61"><literal type="string" pos:start="157:27" pos:end="157:61">"pthread_sigmask(restore) failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



 <label pos:start="163:2" pos:end="163:7"><name pos:start="163:2" pos:end="163:6">fail1</name>:</label>

    <expr_stmt pos:start="165:5" pos:end="165:29"><expr pos:start="165:5" pos:end="165:28"><call pos:start="165:5" pos:end="165:28"><name pos:start="165:5" pos:end="165:13">qemu_free</name> <argument_list pos:start="165:15" pos:end="165:28">(<argument pos:start="165:16" pos:end="165:27"><expr pos:start="165:16" pos:end="165:27"><name pos:start="165:16" pos:end="165:27"><name pos:start="165:16" pos:end="165:18">esd</name><operator pos:start="165:19" pos:end="165:20">-&gt;</operator><name pos:start="165:21" pos:end="165:27">pcm_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:24"><expr pos:start="167:5" pos:end="167:23"><name pos:start="167:5" pos:end="167:16"><name pos:start="167:5" pos:end="167:7">esd</name><operator pos:start="167:8" pos:end="167:9">-&gt;</operator><name pos:start="167:10" pos:end="167:16">pcm_buf</name></name> <operator pos:start="167:18" pos:end="167:18">=</operator> <name pos:start="167:20" pos:end="167:23">NULL</name></expr>;</expr_stmt>

    <return pos:start="169:5" pos:end="169:14">return <expr pos:start="169:12" pos:end="169:13"><operator pos:start="169:12" pos:end="169:12">-</operator><literal type="number" pos:start="169:13" pos:end="169:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
