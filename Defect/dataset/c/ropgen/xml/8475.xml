<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8475.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">libspeex_decode_frame</name><parameter_list pos:start="1:33" pos:end="3:69">(<parameter pos:start="1:34" pos:end="1:54"><decl pos:start="1:34" pos:end="1:54"><type pos:start="1:34" pos:end="1:54"><name pos:start="1:34" pos:end="1:47">AVCodecContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:54">avctx</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:66"><decl pos:start="1:57" pos:end="1:66"><type pos:start="1:57" pos:end="1:66"><name pos:start="1:57" pos:end="1:60">void</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:66">data</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:51"><decl pos:start="3:34" pos:end="3:51"><type pos:start="3:34" pos:end="3:51"><name pos:start="3:34" pos:end="3:36">int</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:51">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:68"><decl pos:start="3:54" pos:end="3:68"><type pos:start="3:54" pos:end="3:68"><name pos:start="3:54" pos:end="3:61">AVPacket</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:68">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="93:1">{<block_content pos:start="7:5" pos:end="91:20">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:16">buf</name> <init pos:start="7:18" pos:end="7:30">= <expr pos:start="7:20" pos:end="7:30"><name pos:start="7:20" pos:end="7:30"><name pos:start="7:20" pos:end="7:24">avpkt</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:30">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name> <init pos:start="9:18" pos:end="9:30">= <expr pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:24">avpkt</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:42"><decl pos:start="11:5" pos:end="11:41"><type pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:19">LibSpeexContext</name> <modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:22">s</name> <init pos:start="11:24" pos:end="11:41">= <expr pos:start="11:26" pos:end="11:41"><name pos:start="11:26" pos:end="11:41"><name pos:start="11:26" pos:end="11:30">avctx</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">int16_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:19">output</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>, <decl pos:start="15:14" pos:end="15:25"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:14" pos:end="15:21">consumed</name> <init pos:start="15:23" pos:end="15:25">= <expr pos:start="15:25" pos:end="15:25"><literal type="number" pos:start="15:25" pos:end="15:25">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:27">/* get output buffer */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:40"><expr pos:start="21:5" pos:end="21:39"><name pos:start="21:5" pos:end="21:23"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:12">frame</name><operator pos:start="21:13" pos:end="21:13">.</operator><name pos:start="21:14" pos:end="21:23">nb_samples</name></name> <operator pos:start="21:25" pos:end="21:25">=</operator> <name pos:start="21:27" pos:end="21:39"><name pos:start="21:27" pos:end="21:27">s</name><operator pos:start="21:28" pos:end="21:29">-&gt;</operator><name pos:start="21:30" pos:end="21:39">frame_size</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:52">(<expr pos:start="23:9" pos:end="23:51"><operator pos:start="23:9" pos:end="23:9">(</operator><name pos:start="23:10" pos:end="23:12">ret</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <call pos:start="23:16" pos:end="23:46"><name pos:start="23:16" pos:end="23:28">ff_get_buffer</name><argument_list pos:start="23:29" pos:end="23:46">(<argument pos:start="23:30" pos:end="23:34"><expr pos:start="23:30" pos:end="23:34"><name pos:start="23:30" pos:end="23:34">avctx</name></expr></argument>, <argument pos:start="23:37" pos:end="23:45"><expr pos:start="23:37" pos:end="23:45"><operator pos:start="23:37" pos:end="23:37">&amp;</operator><name pos:start="23:38" pos:end="23:45"><name pos:start="23:38" pos:end="23:38">s</name><operator pos:start="23:39" pos:end="23:40">-&gt;</operator><name pos:start="23:41" pos:end="23:45">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="23:47" pos:end="23:47">)</operator> <operator pos:start="23:49" pos:end="23:49">&lt;</operator> <literal type="number" pos:start="23:51" pos:end="23:51">0</literal></expr>)</condition> <block pos:start="23:54" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:19">

        <expr_stmt pos:start="25:9" pos:end="25:61"><expr pos:start="25:9" pos:end="25:60"><call pos:start="25:9" pos:end="25:60"><name pos:start="25:9" pos:end="25:14">av_log</name><argument_list pos:start="25:15" pos:end="25:60">(<argument pos:start="25:16" pos:end="25:20"><expr pos:start="25:16" pos:end="25:20"><name pos:start="25:16" pos:end="25:20">avctx</name></expr></argument>, <argument pos:start="25:23" pos:end="25:34"><expr pos:start="25:23" pos:end="25:34"><name pos:start="25:23" pos:end="25:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="25:37" pos:end="25:59"><expr pos:start="25:37" pos:end="25:59"><literal type="string" pos:start="25:37" pos:end="25:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:19">return <expr pos:start="27:16" pos:end="27:18"><name pos:start="27:16" pos:end="27:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:41"><expr pos:start="31:5" pos:end="31:40"><name pos:start="31:5" pos:end="31:10">output</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <operator pos:start="31:14" pos:end="31:14">(</operator><name pos:start="31:15" pos:end="31:21">int16_t</name> <operator pos:start="31:23" pos:end="31:23">*</operator><operator pos:start="31:24" pos:end="31:24">)</operator><name pos:start="31:25" pos:end="31:40"><name pos:start="31:25" pos:end="31:25">s</name><operator pos:start="31:26" pos:end="31:27">-&gt;</operator><name pos:start="31:28" pos:end="31:32">frame</name><operator pos:start="31:33" pos:end="31:33">.</operator><name pos:start="31:34" pos:end="31:37">data</name><index pos:start="31:38" pos:end="31:40">[<expr pos:start="31:39" pos:end="31:39"><literal type="number" pos:start="31:39" pos:end="31:39">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="41:42">/* if there is not enough data left for the smallest possible frame or the

       next 5 bits are a terminator code, reset the libspeex buffer using the

       current packet, otherwise ignore the current packet and keep decoding

       frames from the libspeex buffer. */</comment>

    <if_stmt pos:start="43:5" pos:end="63:5"><if pos:start="43:5" pos:end="63:5">if <condition pos:start="43:8" pos:end="45:54">(<expr pos:start="43:9" pos:end="45:53"><call pos:start="43:9" pos:end="43:38"><name pos:start="43:9" pos:end="43:28">speex_bits_remaining</name><argument_list pos:start="43:29" pos:end="43:38">(<argument pos:start="43:30" pos:end="43:37"><expr pos:start="43:30" pos:end="43:37"><operator pos:start="43:30" pos:end="43:30">&amp;</operator><name pos:start="43:31" pos:end="43:37"><name pos:start="43:31" pos:end="43:31">s</name><operator pos:start="43:32" pos:end="43:33">-&gt;</operator><name pos:start="43:34" pos:end="43:37">bits</name></name></expr></argument>)</argument_list></call> <operator pos:start="43:40" pos:end="43:40">&lt;</operator> <literal type="number" pos:start="43:42" pos:end="43:42">5</literal> <operator pos:start="43:44" pos:end="43:45">||</operator>

        <call pos:start="45:9" pos:end="45:45"><name pos:start="45:9" pos:end="45:32">speex_bits_peek_unsigned</name><argument_list pos:start="45:33" pos:end="45:45">(<argument pos:start="45:34" pos:end="45:41"><expr pos:start="45:34" pos:end="45:41"><operator pos:start="45:34" pos:end="45:34">&amp;</operator><name pos:start="45:35" pos:end="45:41"><name pos:start="45:35" pos:end="45:35">s</name><operator pos:start="45:36" pos:end="45:37">-&gt;</operator><name pos:start="45:38" pos:end="45:41">bits</name></name></expr></argument>, <argument pos:start="45:44" pos:end="45:44"><expr pos:start="45:44" pos:end="45:44"><literal type="number" pos:start="45:44" pos:end="45:44">5</literal></expr></argument>)</argument_list></call> <operator pos:start="45:47" pos:end="45:48">==</operator> <literal type="number" pos:start="45:50" pos:end="45:53">0x1F</literal></expr>)</condition> <block pos:start="45:56" pos:end="63:5">{<block_content pos:start="49:9" pos:end="61:28">

        <comment type="block" pos:start="47:9" pos:end="47:36">/* check for flush packet */</comment>

        <if_stmt pos:start="49:9" pos:end="55:9"><if pos:start="49:9" pos:end="55:9">if <condition pos:start="49:12" pos:end="49:30">(<expr pos:start="49:13" pos:end="49:29"><operator pos:start="49:13" pos:end="49:13">!</operator><name pos:start="49:14" pos:end="49:16">buf</name> <operator pos:start="49:18" pos:end="49:19">||</operator> <operator pos:start="49:21" pos:end="49:21">!</operator><name pos:start="49:22" pos:end="49:29">buf_size</name></expr>)</condition> <block pos:start="49:32" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:28">

            <expr_stmt pos:start="51:13" pos:end="51:31"><expr pos:start="51:13" pos:end="51:30"><operator pos:start="51:13" pos:end="51:13">*</operator><name pos:start="51:14" pos:end="51:26">got_frame_ptr</name> <operator pos:start="51:28" pos:end="51:28">=</operator> <literal type="number" pos:start="51:30" pos:end="51:30">0</literal></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:28">return <expr pos:start="53:20" pos:end="53:27"><name pos:start="53:20" pos:end="53:27">buf_size</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="57:9" pos:end="57:28">/* set new buffer */</comment>

        <expr_stmt pos:start="59:9" pos:end="59:54"><expr pos:start="59:9" pos:end="59:53"><call pos:start="59:9" pos:end="59:53"><name pos:start="59:9" pos:end="59:28">speex_bits_read_from</name><argument_list pos:start="59:29" pos:end="59:53">(<argument pos:start="59:30" pos:end="59:37"><expr pos:start="59:30" pos:end="59:37"><operator pos:start="59:30" pos:end="59:30">&amp;</operator><name pos:start="59:31" pos:end="59:37"><name pos:start="59:31" pos:end="59:31">s</name><operator pos:start="59:32" pos:end="59:33">-&gt;</operator><name pos:start="59:34" pos:end="59:37">bits</name></name></expr></argument>, <argument pos:start="59:40" pos:end="59:42"><expr pos:start="59:40" pos:end="59:42"><name pos:start="59:40" pos:end="59:42">buf</name></expr></argument>, <argument pos:start="59:45" pos:end="59:52"><expr pos:start="59:45" pos:end="59:52"><name pos:start="59:45" pos:end="59:52">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:28"><expr pos:start="61:9" pos:end="61:27"><name pos:start="61:9" pos:end="61:16">consumed</name> <operator pos:start="61:18" pos:end="61:18">=</operator> <name pos:start="61:20" pos:end="61:27">buf_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:31">/* decode a single frame */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:59"><expr pos:start="69:5" pos:end="69:58"><name pos:start="69:5" pos:end="69:7">ret</name> <operator pos:start="69:9" pos:end="69:9">=</operator> <call pos:start="69:11" pos:end="69:58"><name pos:start="69:11" pos:end="69:26">speex_decode_int</name><argument_list pos:start="69:27" pos:end="69:58">(<argument pos:start="69:28" pos:end="69:39"><expr pos:start="69:28" pos:end="69:39"><name pos:start="69:28" pos:end="69:39"><name pos:start="69:28" pos:end="69:28">s</name><operator pos:start="69:29" pos:end="69:30">-&gt;</operator><name pos:start="69:31" pos:end="69:39">dec_state</name></name></expr></argument>, <argument pos:start="69:42" pos:end="69:49"><expr pos:start="69:42" pos:end="69:49"><operator pos:start="69:42" pos:end="69:42">&amp;</operator><name pos:start="69:43" pos:end="69:49"><name pos:start="69:43" pos:end="69:43">s</name><operator pos:start="69:44" pos:end="69:45">-&gt;</operator><name pos:start="69:46" pos:end="69:49">bits</name></name></expr></argument>, <argument pos:start="69:52" pos:end="69:57"><expr pos:start="69:52" pos:end="69:57"><name pos:start="69:52" pos:end="69:57">output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="77:5"><if pos:start="71:5" pos:end="77:5">if <condition pos:start="71:8" pos:end="71:18">(<expr pos:start="71:9" pos:end="71:17"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:14">&lt;=</operator> <operator pos:start="71:16" pos:end="71:16">-</operator><literal type="number" pos:start="71:17" pos:end="71:17">2</literal></expr>)</condition> <block pos:start="71:20" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:35">

        <expr_stmt pos:start="73:9" pos:end="73:69"><expr pos:start="73:9" pos:end="73:68"><call pos:start="73:9" pos:end="73:68"><name pos:start="73:9" pos:end="73:14">av_log</name><argument_list pos:start="73:15" pos:end="73:68">(<argument pos:start="73:16" pos:end="73:20"><expr pos:start="73:16" pos:end="73:20"><name pos:start="73:16" pos:end="73:20">avctx</name></expr></argument>, <argument pos:start="73:23" pos:end="73:34"><expr pos:start="73:23" pos:end="73:34"><name pos:start="73:23" pos:end="73:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="73:37" pos:end="73:67"><expr pos:start="73:37" pos:end="73:67"><literal type="string" pos:start="73:37" pos:end="73:67">"Error decoding Speex frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:35">return <expr pos:start="75:16" pos:end="75:34"><name pos:start="75:16" pos:end="75:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="79:5" pos:end="81:67"><if pos:start="79:5" pos:end="81:67">if <condition pos:start="79:8" pos:end="79:29">(<expr pos:start="79:9" pos:end="79:28"><name pos:start="79:9" pos:end="79:23"><name pos:start="79:9" pos:end="79:13">avctx</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:23">channels</name></name> <operator pos:start="79:25" pos:end="79:26">==</operator> <literal type="number" pos:start="79:28" pos:end="79:28">2</literal></expr>)</condition><block type="pseudo" pos:start="81:9" pos:end="81:67"><block_content pos:start="81:9" pos:end="81:67">

        <expr_stmt pos:start="81:9" pos:end="81:67"><expr pos:start="81:9" pos:end="81:66"><call pos:start="81:9" pos:end="81:66"><name pos:start="81:9" pos:end="81:31">speex_decode_stereo_int</name><argument_list pos:start="81:32" pos:end="81:66">(<argument pos:start="81:33" pos:end="81:38"><expr pos:start="81:33" pos:end="81:38"><name pos:start="81:33" pos:end="81:38">output</name></expr></argument>, <argument pos:start="81:41" pos:end="81:53"><expr pos:start="81:41" pos:end="81:53"><name pos:start="81:41" pos:end="81:53"><name pos:start="81:41" pos:end="81:41">s</name><operator pos:start="81:42" pos:end="81:43">-&gt;</operator><name pos:start="81:44" pos:end="81:53">frame_size</name></name></expr></argument>, <argument pos:start="81:56" pos:end="81:65"><expr pos:start="81:56" pos:end="81:65"><operator pos:start="81:56" pos:end="81:56">&amp;</operator><name pos:start="81:57" pos:end="81:65"><name pos:start="81:57" pos:end="81:57">s</name><operator pos:start="81:58" pos:end="81:59">-&gt;</operator><name pos:start="81:60" pos:end="81:65">stereo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:25"><expr pos:start="85:5" pos:end="85:24"><operator pos:start="85:5" pos:end="85:5">*</operator><name pos:start="85:6" pos:end="85:18">got_frame_ptr</name>   <operator pos:start="85:22" pos:end="85:22">=</operator> <literal type="number" pos:start="85:24" pos:end="85:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:32"><expr pos:start="87:5" pos:end="87:31"><operator pos:start="87:5" pos:end="87:5">*</operator><operator pos:start="87:6" pos:end="87:6">(</operator><name pos:start="87:7" pos:end="87:13">AVFrame</name> <operator pos:start="87:15" pos:end="87:15">*</operator><operator pos:start="87:16" pos:end="87:16">)</operator><name pos:start="87:17" pos:end="87:20">data</name> <operator pos:start="87:22" pos:end="87:22">=</operator> <name pos:start="87:24" pos:end="87:31"><name pos:start="87:24" pos:end="87:24">s</name><operator pos:start="87:25" pos:end="87:26">-&gt;</operator><name pos:start="87:27" pos:end="87:31">frame</name></name></expr>;</expr_stmt>



    <return pos:start="91:5" pos:end="91:20">return <expr pos:start="91:12" pos:end="91:19"><name pos:start="91:12" pos:end="91:19">consumed</name></expr>;</return>

</block_content>}</block></function>
</unit>
