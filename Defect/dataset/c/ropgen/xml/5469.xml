<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5469.c" pos:tabs="8"><function pos:start="1:1" pos:end="137:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:35">opus_encode_init</name><parameter_list pos:start="1:36" pos:end="1:58">(<parameter pos:start="1:37" pos:end="1:57"><decl pos:start="1:37" pos:end="1:57"><type pos:start="1:37" pos:end="1:52"><name pos:start="1:37" pos:end="1:50">AVCodecContext</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:57">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="137:1">{<block_content pos:start="5:5" pos:end="135:13">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:13"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:13">ch</name></decl>, <decl pos:start="5:16" pos:end="5:18"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:16" pos:end="5:18">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">OpusEncContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:40">= <expr pos:start="7:25" pos:end="7:40"><name pos:start="7:25" pos:end="7:40"><name pos:start="7:25" pos:end="7:29">avctx</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:40">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:21"><expr pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:5">s</name><operator pos:start="11:6" pos:end="11:7">-&gt;</operator><name pos:start="11:8" pos:end="11:12">avctx</name></name> <operator pos:start="11:14" pos:end="11:14">=</operator> <name pos:start="11:16" pos:end="11:20">avctx</name></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:34"><expr pos:start="13:5" pos:end="13:33"><name pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:5">s</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:15">channels</name></name> <operator pos:start="13:17" pos:end="13:17">=</operator> <name pos:start="13:19" pos:end="13:33"><name pos:start="13:19" pos:end="13:23">avctx</name><operator pos:start="13:24" pos:end="13:25">-&gt;</operator><name pos:start="13:26" pos:end="13:33">channels</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="17:5" pos:end="25:29">/* Opus allows us to change the framesize on each packet (and each packet may

     * have multiple frames in it) but we can't change the codec's frame size on

     * runtime, so fix it to the lowest possible number of samples and use a queue

     * to accumulate AVFrames until we have enough to encode whatever the encoder

     * decides is the best */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:28"><expr pos:start="27:5" pos:end="27:27"><name pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:9">avctx</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:21">frame_size</name></name> <operator pos:start="27:23" pos:end="27:23">=</operator> <literal type="number" pos:start="27:25" pos:end="27:27">120</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="29:5" pos:end="29:63">/* Initial padding will change if SILK is ever supported */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:33"><expr pos:start="31:5" pos:end="31:32"><name pos:start="31:5" pos:end="31:26"><name pos:start="31:5" pos:end="31:9">avctx</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:26">initial_padding</name></name> <operator pos:start="31:28" pos:end="31:28">=</operator> <literal type="number" pos:start="31:30" pos:end="31:32">120</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:59"><expr pos:start="35:5" pos:end="35:58"><name pos:start="35:5" pos:end="35:17"><name pos:start="35:5" pos:end="35:9">avctx</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:17">cutoff</name></name> <operator pos:start="35:19" pos:end="35:19">=</operator> <ternary pos:start="35:21" pos:end="35:58"><condition pos:start="35:21" pos:end="35:36"><expr pos:start="35:21" pos:end="35:34"><operator pos:start="35:21" pos:end="35:21">!</operator><name pos:start="35:22" pos:end="35:34"><name pos:start="35:22" pos:end="35:26">avctx</name><operator pos:start="35:27" pos:end="35:28">-&gt;</operator><name pos:start="35:29" pos:end="35:34">cutoff</name></name></expr> ?</condition><then pos:start="35:38" pos:end="35:42"> <expr pos:start="35:38" pos:end="35:42"><literal type="number" pos:start="35:38" pos:end="35:42">20000</literal></expr> </then><else pos:start="35:44" pos:end="35:58">: <expr pos:start="35:46" pos:end="35:58"><name pos:start="35:46" pos:end="35:58"><name pos:start="35:46" pos:end="35:50">avctx</name><operator pos:start="35:51" pos:end="35:52">-&gt;</operator><name pos:start="35:53" pos:end="35:58">cutoff</name></name></expr></else></ternary></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="55:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:25">(<expr pos:start="39:9" pos:end="39:24"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:24"><name pos:start="39:10" pos:end="39:14">avctx</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:24">bit_rate</name></name></expr>)</condition> <block pos:start="39:27" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:78">

        <decl_stmt pos:start="41:9" pos:end="41:71"><decl pos:start="41:9" pos:end="41:70"><type pos:start="41:9" pos:end="41:11"><name pos:start="41:9" pos:end="41:11">int</name></type> <name pos:start="41:13" pos:end="41:19">coupled</name> <init pos:start="41:21" pos:end="41:70">= <expr pos:start="41:23" pos:end="41:70"><name pos:start="41:23" pos:end="41:70"><name pos:start="41:23" pos:end="41:53">ff_opus_default_coupled_streams</name><index pos:start="41:54" pos:end="41:70">[<expr pos:start="41:55" pos:end="41:69"><name pos:start="41:55" pos:end="41:65"><name pos:start="41:55" pos:end="41:55">s</name><operator pos:start="41:56" pos:end="41:57">-&gt;</operator><name pos:start="41:58" pos:end="41:65">channels</name></name> <operator pos:start="41:67" pos:end="41:67">-</operator> <literal type="number" pos:start="41:69" pos:end="41:69">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:78"><expr pos:start="43:9" pos:end="43:77"><name pos:start="43:9" pos:end="43:23"><name pos:start="43:9" pos:end="43:13">avctx</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:23">bit_rate</name></name> <operator pos:start="43:25" pos:end="43:25">=</operator> <name pos:start="43:27" pos:end="43:33">coupled</name><operator pos:start="43:34" pos:end="43:34">*</operator><operator pos:start="43:35" pos:end="43:35">(</operator><literal type="number" pos:start="43:36" pos:end="43:40">96000</literal><operator pos:start="43:41" pos:end="43:41">)</operator> <operator pos:start="43:43" pos:end="43:43">+</operator> <operator pos:start="43:45" pos:end="43:45">(</operator><name pos:start="43:46" pos:end="43:56"><name pos:start="43:46" pos:end="43:46">s</name><operator pos:start="43:47" pos:end="43:48">-&gt;</operator><name pos:start="43:49" pos:end="43:56">channels</name></name> <operator pos:start="43:58" pos:end="43:58">-</operator> <name pos:start="43:60" pos:end="43:66">coupled</name><operator pos:start="43:67" pos:end="43:67">*</operator><literal type="number" pos:start="43:68" pos:end="43:68">2</literal><operator pos:start="43:69" pos:end="43:69">)</operator><operator pos:start="43:70" pos:end="43:70">*</operator><operator pos:start="43:71" pos:end="43:71">(</operator><literal type="number" pos:start="43:72" pos:end="43:76">48000</literal><operator pos:start="43:77" pos:end="43:77">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="45:7" pos:end="55:5">else if <condition pos:start="45:15" pos:end="45:80">(<expr pos:start="45:16" pos:end="45:79"><name pos:start="45:16" pos:end="45:30"><name pos:start="45:16" pos:end="45:20">avctx</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:30">bit_rate</name></name> <operator pos:start="45:32" pos:end="45:32">&lt;</operator> <literal type="number" pos:start="45:34" pos:end="45:37">6000</literal> <operator pos:start="45:39" pos:end="45:40">||</operator> <name pos:start="45:42" pos:end="45:56"><name pos:start="45:42" pos:end="45:46">avctx</name><operator pos:start="45:47" pos:end="45:48">-&gt;</operator><name pos:start="45:49" pos:end="45:56">bit_rate</name></name> <operator pos:start="45:58" pos:end="45:58">&gt;</operator> <literal type="number" pos:start="45:60" pos:end="45:65">255000</literal> <operator pos:start="45:67" pos:end="45:67">*</operator> <name pos:start="45:69" pos:end="45:79"><name pos:start="45:69" pos:end="45:69">s</name><operator pos:start="45:70" pos:end="45:71">-&gt;</operator><name pos:start="45:72" pos:end="45:79">channels</name></name></expr>)</condition> <block pos:start="45:82" pos:end="55:5">{<block_content pos:start="47:9" pos:end="53:39">

        <decl_stmt pos:start="47:9" pos:end="47:84"><decl pos:start="47:9" pos:end="47:83"><type pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:15">int64_t</name></type> <name pos:start="47:17" pos:end="47:28">clipped_rate</name> <init pos:start="47:30" pos:end="47:83">= <expr pos:start="47:32" pos:end="47:83"><call pos:start="47:32" pos:end="47:83"><name pos:start="47:32" pos:end="47:38">av_clip</name><argument_list pos:start="47:39" pos:end="47:83">(<argument pos:start="47:40" pos:end="47:54"><expr pos:start="47:40" pos:end="47:54"><name pos:start="47:40" pos:end="47:54"><name pos:start="47:40" pos:end="47:44">avctx</name><operator pos:start="47:45" pos:end="47:46">-&gt;</operator><name pos:start="47:47" pos:end="47:54">bit_rate</name></name></expr></argument>, <argument pos:start="47:57" pos:end="47:60"><expr pos:start="47:57" pos:end="47:60"><literal type="number" pos:start="47:57" pos:end="47:60">6000</literal></expr></argument>, <argument pos:start="47:63" pos:end="47:82"><expr pos:start="47:63" pos:end="47:82"><literal type="number" pos:start="47:63" pos:end="47:68">255000</literal> <operator pos:start="47:70" pos:end="47:70">*</operator> <name pos:start="47:72" pos:end="47:82"><name pos:start="47:72" pos:end="47:72">s</name><operator pos:start="47:73" pos:end="47:74">-&gt;</operator><name pos:start="47:75" pos:end="47:82">channels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="49:9" pos:end="51:56"><expr pos:start="49:9" pos:end="51:55"><call pos:start="49:9" pos:end="51:55"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="51:55">(<argument pos:start="49:16" pos:end="49:20"><expr pos:start="49:16" pos:end="49:20"><name pos:start="49:16" pos:end="49:20">avctx</name></expr></argument>, <argument pos:start="49:23" pos:end="49:34"><expr pos:start="49:23" pos:end="49:34"><name pos:start="49:23" pos:end="49:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:37" pos:end="49:102"><expr pos:start="49:37" pos:end="49:102"><literal type="string" pos:start="49:37" pos:end="49:59">"Unsupported bitrate %"</literal><name pos:start="49:60" pos:end="49:65">PRId64</name><literal type="string" pos:start="49:66" pos:end="49:87">" kbps, clipping to %"</literal><name pos:start="49:88" pos:end="49:93">PRId64</name><literal type="string" pos:start="49:94" pos:end="49:102">" kbps\n"</literal></expr></argument>,

               <argument pos:start="51:16" pos:end="51:35"><expr pos:start="51:16" pos:end="51:35"><name pos:start="51:16" pos:end="51:30"><name pos:start="51:16" pos:end="51:20">avctx</name><operator pos:start="51:21" pos:end="51:22">-&gt;</operator><name pos:start="51:23" pos:end="51:30">bit_rate</name></name><operator pos:start="51:31" pos:end="51:31">/</operator><literal type="number" pos:start="51:32" pos:end="51:35">1000</literal></expr></argument>, <argument pos:start="51:38" pos:end="51:54"><expr pos:start="51:38" pos:end="51:54"><name pos:start="51:38" pos:end="51:49">clipped_rate</name><operator pos:start="51:50" pos:end="51:50">/</operator><literal type="number" pos:start="51:51" pos:end="51:54">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:39"><expr pos:start="53:9" pos:end="53:38"><name pos:start="53:9" pos:end="53:23"><name pos:start="53:9" pos:end="53:13">avctx</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:23">bit_rate</name></name> <operator pos:start="53:25" pos:end="53:25">=</operator> <name pos:start="53:27" pos:end="53:38">clipped_rate</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="59:5" pos:end="59:47">/* Frame structs and range coder buffers */</comment>

    <expr_stmt pos:start="61:5" pos:end="61:71"><expr pos:start="61:5" pos:end="61:70"><name pos:start="61:5" pos:end="61:12"><name pos:start="61:5" pos:end="61:5">s</name><operator pos:start="61:6" pos:end="61:7">-&gt;</operator><name pos:start="61:8" pos:end="61:12">frame</name></name> <operator pos:start="61:14" pos:end="61:14">=</operator> <call pos:start="61:16" pos:end="61:70"><name pos:start="61:16" pos:end="61:24">av_malloc</name><argument_list pos:start="61:25" pos:end="61:70">(<argument pos:start="61:26" pos:end="61:69"><expr pos:start="61:26" pos:end="61:69"><name pos:start="61:26" pos:end="61:51">OPUS_MAX_FRAMES_PER_PACKET</name><operator pos:start="61:52" pos:end="61:52">*</operator><sizeof pos:start="61:53" pos:end="61:69">sizeof<argument_list pos:start="61:59" pos:end="61:69">(<argument pos:start="61:60" pos:end="61:68"><expr pos:start="61:60" pos:end="61:68"><name pos:start="61:60" pos:end="61:68">CeltFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="65:31"><if pos:start="63:5" pos:end="65:31">if <condition pos:start="63:8" pos:end="63:18">(<expr pos:start="63:9" pos:end="63:17"><operator pos:start="63:9" pos:end="63:9">!</operator><name pos:start="63:10" pos:end="63:17"><name pos:start="63:10" pos:end="63:10">s</name><operator pos:start="63:11" pos:end="63:12">-&gt;</operator><name pos:start="63:13" pos:end="63:17">frame</name></name></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:31"><block_content pos:start="65:9" pos:end="65:31">

        <return pos:start="65:9" pos:end="65:31">return <expr pos:start="65:16" pos:end="65:30"><call pos:start="65:16" pos:end="65:30"><name pos:start="65:16" pos:end="65:22">AVERROR</name><argument_list pos:start="65:23" pos:end="65:30">(<argument pos:start="65:24" pos:end="65:29"><expr pos:start="65:24" pos:end="65:29"><name pos:start="65:24" pos:end="65:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:73"><expr pos:start="67:5" pos:end="67:72"><name pos:start="67:5" pos:end="67:9"><name pos:start="67:5" pos:end="67:5">s</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:9">rc</name></name> <operator pos:start="67:11" pos:end="67:11">=</operator> <call pos:start="67:13" pos:end="67:72"><name pos:start="67:13" pos:end="67:21">av_malloc</name><argument_list pos:start="67:22" pos:end="67:72">(<argument pos:start="67:23" pos:end="67:71"><expr pos:start="67:23" pos:end="67:71"><name pos:start="67:23" pos:end="67:48">OPUS_MAX_FRAMES_PER_PACKET</name><operator pos:start="67:49" pos:end="67:49">*</operator><sizeof pos:start="67:50" pos:end="67:71">sizeof<argument_list pos:start="67:56" pos:end="67:71">(<argument pos:start="67:57" pos:end="67:70"><expr pos:start="67:57" pos:end="67:70"><name pos:start="67:57" pos:end="67:70">OpusRangeCoder</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="71:31"><if pos:start="69:5" pos:end="71:31">if <condition pos:start="69:8" pos:end="69:15">(<expr pos:start="69:9" pos:end="69:14"><operator pos:start="69:9" pos:end="69:9">!</operator><name pos:start="69:10" pos:end="69:14"><name pos:start="69:10" pos:end="69:10">s</name><operator pos:start="69:11" pos:end="69:12">-&gt;</operator><name pos:start="69:13" pos:end="69:14">rc</name></name></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:31"><block_content pos:start="71:9" pos:end="71:31">

        <return pos:start="71:9" pos:end="71:31">return <expr pos:start="71:16" pos:end="71:30"><call pos:start="71:16" pos:end="71:30"><name pos:start="71:16" pos:end="71:22">AVERROR</name><argument_list pos:start="71:23" pos:end="71:30">(<argument pos:start="71:24" pos:end="71:29"><expr pos:start="71:24" pos:end="71:29"><name pos:start="71:24" pos:end="71:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:19">/* Extradata */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:31"><expr pos:start="77:5" pos:end="77:30"><name pos:start="77:5" pos:end="77:25"><name pos:start="77:5" pos:end="77:9">avctx</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:25">extradata_size</name></name> <operator pos:start="77:27" pos:end="77:27">=</operator> <literal type="number" pos:start="77:29" pos:end="77:30">19</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:87"><expr pos:start="79:5" pos:end="79:86"><name pos:start="79:5" pos:end="79:20"><name pos:start="79:5" pos:end="79:9">avctx</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:20">extradata</name></name> <operator pos:start="79:22" pos:end="79:22">=</operator> <call pos:start="79:24" pos:end="79:86"><name pos:start="79:24" pos:end="79:32">av_malloc</name><argument_list pos:start="79:33" pos:end="79:86">(<argument pos:start="79:34" pos:end="79:85"><expr pos:start="79:34" pos:end="79:85"><name pos:start="79:34" pos:end="79:54"><name pos:start="79:34" pos:end="79:38">avctx</name><operator pos:start="79:39" pos:end="79:40">-&gt;</operator><name pos:start="79:41" pos:end="79:54">extradata_size</name></name> <operator pos:start="79:56" pos:end="79:56">+</operator> <name pos:start="79:58" pos:end="79:85">AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="83:31"><if pos:start="81:5" pos:end="83:31">if <condition pos:start="81:8" pos:end="81:26">(<expr pos:start="81:9" pos:end="81:25"><operator pos:start="81:9" pos:end="81:9">!</operator><name pos:start="81:10" pos:end="81:25"><name pos:start="81:10" pos:end="81:14">avctx</name><operator pos:start="81:15" pos:end="81:16">-&gt;</operator><name pos:start="81:17" pos:end="81:25">extradata</name></name></expr>)</condition><block type="pseudo" pos:start="83:9" pos:end="83:31"><block_content pos:start="83:9" pos:end="83:31">

        <return pos:start="83:9" pos:end="83:31">return <expr pos:start="83:16" pos:end="83:30"><call pos:start="83:16" pos:end="83:30"><name pos:start="83:16" pos:end="83:22">AVERROR</name><argument_list pos:start="83:23" pos:end="83:30">(<argument pos:start="83:24" pos:end="83:29"><expr pos:start="83:24" pos:end="83:29"><name pos:start="83:24" pos:end="83:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:32"><expr pos:start="85:5" pos:end="85:31"><call pos:start="85:5" pos:end="85:31"><name pos:start="85:5" pos:end="85:24">opus_write_extradata</name><argument_list pos:start="85:25" pos:end="85:31">(<argument pos:start="85:26" pos:end="85:30"><expr pos:start="85:26" pos:end="85:30"><name pos:start="85:26" pos:end="85:30">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:37"><expr pos:start="89:5" pos:end="89:36"><call pos:start="89:5" pos:end="89:36"><name pos:start="89:5" pos:end="89:20">ff_af_queue_init</name><argument_list pos:start="89:21" pos:end="89:36">(<argument pos:start="89:22" pos:end="89:26"><expr pos:start="89:22" pos:end="89:26"><name pos:start="89:22" pos:end="89:26">avctx</name></expr></argument>, <argument pos:start="89:29" pos:end="89:35"><expr pos:start="89:29" pos:end="89:35"><operator pos:start="89:29" pos:end="89:29">&amp;</operator><name pos:start="89:30" pos:end="89:35"><name pos:start="89:30" pos:end="89:30">s</name><operator pos:start="89:31" pos:end="89:32">-&gt;</operator><name pos:start="89:33" pos:end="89:35">afq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="93:5" pos:end="95:31"><if pos:start="93:5" pos:end="95:31">if <condition pos:start="93:8" pos:end="93:82">(<expr pos:start="93:9" pos:end="93:81"><operator pos:start="93:9" pos:end="93:9">!</operator><operator pos:start="93:10" pos:end="93:10">(</operator><name pos:start="93:11" pos:end="93:16"><name pos:start="93:11" pos:end="93:11">s</name><operator pos:start="93:12" pos:end="93:13">-&gt;</operator><name pos:start="93:14" pos:end="93:16">dsp</name></name> <operator pos:start="93:18" pos:end="93:18">=</operator> <call pos:start="93:20" pos:end="93:80"><name pos:start="93:20" pos:end="93:41">avpriv_float_dsp_alloc</name><argument_list pos:start="93:42" pos:end="93:80">(<argument pos:start="93:43" pos:end="93:79"><expr pos:start="93:43" pos:end="93:79"><name pos:start="93:43" pos:end="93:54"><name pos:start="93:43" pos:end="93:47">avctx</name><operator pos:start="93:48" pos:end="93:49">-&gt;</operator><name pos:start="93:50" pos:end="93:54">flags</name></name> <operator pos:start="93:56" pos:end="93:56">&amp;</operator> <name pos:start="93:58" pos:end="93:79">AV_CODEC_FLAG_BITEXACT</name></expr></argument>)</argument_list></call><operator pos:start="93:81" pos:end="93:81">)</operator></expr>)</condition><block type="pseudo" pos:start="95:9" pos:end="95:31"><block_content pos:start="95:9" pos:end="95:31">

        <return pos:start="95:9" pos:end="95:31">return <expr pos:start="95:16" pos:end="95:30"><call pos:start="95:16" pos:end="95:30"><name pos:start="95:16" pos:end="95:22">AVERROR</name><argument_list pos:start="95:23" pos:end="95:30">(<argument pos:start="95:24" pos:end="95:29"><expr pos:start="95:24" pos:end="95:29"><name pos:start="95:24" pos:end="95:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:85">/* I have no idea why a base scaling factor of 68 works, could be the twiddles */</comment>

    <for pos:start="101:5" pos:end="105:35">for <control pos:start="101:9" pos:end="101:39">(<init pos:start="101:10" pos:end="101:15"><expr pos:start="101:10" pos:end="101:14"><name pos:start="101:10" pos:end="101:10">i</name> <operator pos:start="101:12" pos:end="101:12">=</operator> <literal type="number" pos:start="101:14" pos:end="101:14">0</literal></expr>;</init> <condition pos:start="101:17" pos:end="101:34"><expr pos:start="101:17" pos:end="101:33"><name pos:start="101:17" pos:end="101:17">i</name> <operator pos:start="101:19" pos:end="101:19">&lt;</operator> <name pos:start="101:21" pos:end="101:33">CELT_BLOCK_NB</name></expr>;</condition> <incr pos:start="101:36" pos:end="101:38"><expr pos:start="101:36" pos:end="101:38"><name pos:start="101:36" pos:end="101:36">i</name><operator pos:start="101:37" pos:end="101:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="103:9" pos:end="105:35"><block_content pos:start="103:9" pos:end="105:35">

        <if_stmt pos:start="103:9" pos:end="105:35"><if pos:start="103:9" pos:end="105:35">if <condition pos:start="103:12" pos:end="103:89">(<expr pos:start="103:13" pos:end="103:88"><operator pos:start="103:13" pos:end="103:13">(</operator><name pos:start="103:14" pos:end="103:16">ret</name> <operator pos:start="103:18" pos:end="103:18">=</operator> <call pos:start="103:20" pos:end="103:87"><name pos:start="103:20" pos:end="103:33">ff_mdct15_init</name><argument_list pos:start="103:34" pos:end="103:87">(<argument pos:start="103:35" pos:end="103:45"><expr pos:start="103:35" pos:end="103:45"><operator pos:start="103:35" pos:end="103:35">&amp;</operator><name pos:start="103:36" pos:end="103:45"><name pos:start="103:36" pos:end="103:36">s</name><operator pos:start="103:37" pos:end="103:38">-&gt;</operator><name pos:start="103:39" pos:end="103:42">mdct</name><index pos:start="103:43" pos:end="103:45">[<expr pos:start="103:44" pos:end="103:44"><name pos:start="103:44" pos:end="103:44">i</name></expr>]</index></name></expr></argument>, <argument pos:start="103:48" pos:end="103:48"><expr pos:start="103:48" pos:end="103:48"><literal type="number" pos:start="103:48" pos:end="103:48">0</literal></expr></argument>, <argument pos:start="103:51" pos:end="103:55"><expr pos:start="103:51" pos:end="103:55"><name pos:start="103:51" pos:end="103:51">i</name> <operator pos:start="103:53" pos:end="103:53">+</operator> <literal type="number" pos:start="103:55" pos:end="103:55">3</literal></expr></argument>, <argument pos:start="103:58" pos:end="103:86"><expr pos:start="103:58" pos:end="103:86"><literal type="number" pos:start="103:58" pos:end="103:59">68</literal> <operator pos:start="103:61" pos:end="103:62">&lt;&lt;</operator> <operator pos:start="103:64" pos:end="103:64">(</operator><name pos:start="103:65" pos:end="103:77">CELT_BLOCK_NB</name> <operator pos:start="103:79" pos:end="103:79">-</operator> <literal type="number" pos:start="103:81" pos:end="103:83">1</literal> <operator pos:start="103:83" pos:end="103:83">-</operator> <name pos:start="103:85" pos:end="103:85">i</name><operator pos:start="103:86" pos:end="103:86">)</operator></expr></argument>)</argument_list></call><operator pos:start="103:88" pos:end="103:88">)</operator></expr>)</condition><block type="pseudo" pos:start="105:13" pos:end="105:35"><block_content pos:start="105:13" pos:end="105:35">

            <return pos:start="105:13" pos:end="105:35">return <expr pos:start="105:20" pos:end="105:34"><call pos:start="105:20" pos:end="105:34"><name pos:start="105:20" pos:end="105:26">AVERROR</name><argument_list pos:start="105:27" pos:end="105:34">(<argument pos:start="105:28" pos:end="105:33"><expr pos:start="105:28" pos:end="105:33"><name pos:start="105:28" pos:end="105:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>



    <for pos:start="109:5" pos:end="111:81">for <control pos:start="109:9" pos:end="109:52">(<init pos:start="109:10" pos:end="109:15"><expr pos:start="109:10" pos:end="109:14"><name pos:start="109:10" pos:end="109:10">i</name> <operator pos:start="109:12" pos:end="109:12">=</operator> <literal type="number" pos:start="109:14" pos:end="109:14">0</literal></expr>;</init> <condition pos:start="109:17" pos:end="109:47"><expr pos:start="109:17" pos:end="109:46"><name pos:start="109:17" pos:end="109:17">i</name> <operator pos:start="109:19" pos:end="109:19">&lt;</operator> <name pos:start="109:21" pos:end="109:46">OPUS_MAX_FRAMES_PER_PACKET</name></expr>;</condition> <incr pos:start="109:49" pos:end="109:51"><expr pos:start="109:49" pos:end="109:51"><name pos:start="109:49" pos:end="109:49">i</name><operator pos:start="109:50" pos:end="109:51">++</operator></expr></incr>)</control><block type="pseudo" pos:start="111:9" pos:end="111:81"><block_content pos:start="111:9" pos:end="111:81">

        <expr_stmt pos:start="111:9" pos:end="111:81"><expr pos:start="111:9" pos:end="111:80"><name pos:start="111:9" pos:end="111:19"><name pos:start="111:9" pos:end="111:9">s</name><operator pos:start="111:10" pos:end="111:11">-&gt;</operator><name pos:start="111:12" pos:end="111:16">frame</name><index pos:start="111:17" pos:end="111:19">[<expr pos:start="111:18" pos:end="111:18"><name pos:start="111:18" pos:end="111:18">i</name></expr>]</index></name><operator pos:start="111:20" pos:end="111:20">.</operator><name pos:start="111:21" pos:end="111:28"><name pos:start="111:21" pos:end="111:25">block</name><index pos:start="111:26" pos:end="111:28">[<expr pos:start="111:27" pos:end="111:27"><literal type="number" pos:start="111:27" pos:end="111:27">0</literal></expr>]</index></name><operator pos:start="111:29" pos:end="111:29">.</operator><name pos:start="111:30" pos:end="111:39">emph_coeff</name> <operator pos:start="111:41" pos:end="111:41">=</operator> <name pos:start="111:43" pos:end="111:53"><name pos:start="111:43" pos:end="111:43">s</name><operator pos:start="111:44" pos:end="111:45">-&gt;</operator><name pos:start="111:46" pos:end="111:50">frame</name><index pos:start="111:51" pos:end="111:53">[<expr pos:start="111:52" pos:end="111:52"><name pos:start="111:52" pos:end="111:52">i</name></expr>]</index></name><operator pos:start="111:54" pos:end="111:54">.</operator><name pos:start="111:55" pos:end="111:62"><name pos:start="111:55" pos:end="111:59">block</name><index pos:start="111:60" pos:end="111:62">[<expr pos:start="111:61" pos:end="111:61"><literal type="number" pos:start="111:61" pos:end="111:61">1</literal></expr>]</index></name><operator pos:start="111:63" pos:end="111:63">.</operator><name pos:start="111:64" pos:end="111:73">emph_coeff</name> <operator pos:start="111:75" pos:end="111:75">=</operator> <literal type="number" pos:start="111:77" pos:end="111:80">0.0f</literal></expr>;</expr_stmt></block_content></block></for>



    <comment type="block" pos:start="115:5" pos:end="115:66">/* Zero out previous energy (matters for inter first frame) */</comment>

    <for pos:start="117:5" pos:end="121:51">for <control pos:start="117:9" pos:end="117:40">(<init pos:start="117:10" pos:end="117:16"><expr pos:start="117:10" pos:end="117:15"><name pos:start="117:10" pos:end="117:11">ch</name> <operator pos:start="117:13" pos:end="117:13">=</operator> <literal type="number" pos:start="117:15" pos:end="117:15">0</literal></expr>;</init> <condition pos:start="117:18" pos:end="117:34"><expr pos:start="117:18" pos:end="117:33"><name pos:start="117:18" pos:end="117:19">ch</name> <operator pos:start="117:21" pos:end="117:21">&lt;</operator> <name pos:start="117:23" pos:end="117:33"><name pos:start="117:23" pos:end="117:23">s</name><operator pos:start="117:24" pos:end="117:25">-&gt;</operator><name pos:start="117:26" pos:end="117:33">channels</name></name></expr>;</condition> <incr pos:start="117:36" pos:end="117:39"><expr pos:start="117:36" pos:end="117:39"><name pos:start="117:36" pos:end="117:37">ch</name><operator pos:start="117:38" pos:end="117:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="119:9" pos:end="121:51"><block_content pos:start="119:9" pos:end="121:51">

        <for pos:start="119:9" pos:end="121:51">for <control pos:start="119:13" pos:end="119:44">(<init pos:start="119:14" pos:end="119:19"><expr pos:start="119:14" pos:end="119:18"><name pos:start="119:14" pos:end="119:14">i</name> <operator pos:start="119:16" pos:end="119:16">=</operator> <literal type="number" pos:start="119:18" pos:end="119:18">0</literal></expr>;</init> <condition pos:start="119:21" pos:end="119:39"><expr pos:start="119:21" pos:end="119:38"><name pos:start="119:21" pos:end="119:21">i</name> <operator pos:start="119:23" pos:end="119:23">&lt;</operator> <name pos:start="119:25" pos:end="119:38">CELT_MAX_BANDS</name></expr>;</condition> <incr pos:start="119:41" pos:end="119:43"><expr pos:start="119:41" pos:end="119:43"><name pos:start="119:41" pos:end="119:41">i</name><operator pos:start="119:42" pos:end="119:43">++</operator></expr></incr>)</control><block type="pseudo" pos:start="121:13" pos:end="121:51"><block_content pos:start="121:13" pos:end="121:51">

            <expr_stmt pos:start="121:13" pos:end="121:51"><expr pos:start="121:13" pos:end="121:50"><name pos:start="121:13" pos:end="121:43"><name pos:start="121:13" pos:end="121:13">s</name><operator pos:start="121:14" pos:end="121:15">-&gt;</operator><name pos:start="121:16" pos:end="121:36">last_quantized_energy</name><index pos:start="121:37" pos:end="121:40">[<expr pos:start="121:38" pos:end="121:39"><name pos:start="121:38" pos:end="121:39">ch</name></expr>]</index><index pos:start="121:41" pos:end="121:43">[<expr pos:start="121:42" pos:end="121:42"><name pos:start="121:42" pos:end="121:42">i</name></expr>]</index></name> <operator pos:start="121:45" pos:end="121:45">=</operator> <literal type="number" pos:start="121:47" pos:end="121:50">0.0f</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for>



    <comment type="block" pos:start="125:5" pos:end="125:80">/* Allocate an empty frame to use as overlap for the first frame of audio */</comment>

    <expr_stmt pos:start="127:5" pos:end="127:63"><expr pos:start="127:5" pos:end="127:62"><call pos:start="127:5" pos:end="127:62"><name pos:start="127:5" pos:end="127:19">ff_bufqueue_add</name><argument_list pos:start="127:20" pos:end="127:62">(<argument pos:start="127:21" pos:end="127:25"><expr pos:start="127:21" pos:end="127:25"><name pos:start="127:21" pos:end="127:25">avctx</name></expr></argument>, <argument pos:start="127:28" pos:end="127:39"><expr pos:start="127:28" pos:end="127:39"><operator pos:start="127:28" pos:end="127:28">&amp;</operator><name pos:start="127:29" pos:end="127:39"><name pos:start="127:29" pos:end="127:29">s</name><operator pos:start="127:30" pos:end="127:31">-&gt;</operator><name pos:start="127:32" pos:end="127:39">bufqueue</name></name></expr></argument>, <argument pos:start="127:42" pos:end="127:61"><expr pos:start="127:42" pos:end="127:61"><call pos:start="127:42" pos:end="127:61"><name pos:start="127:42" pos:end="127:58">spawn_empty_frame</name><argument_list pos:start="127:59" pos:end="127:61">(<argument pos:start="127:60" pos:end="127:60"><expr pos:start="127:60" pos:end="127:60"><name pos:start="127:60" pos:end="127:60">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="129:5" pos:end="131:31"><if pos:start="129:5" pos:end="131:31">if <condition pos:start="129:8" pos:end="129:43">(<expr pos:start="129:9" pos:end="129:42"><operator pos:start="129:9" pos:end="129:9">!</operator><call pos:start="129:10" pos:end="129:42"><name pos:start="129:10" pos:end="129:25">ff_bufqueue_peek</name><argument_list pos:start="129:26" pos:end="129:42">(<argument pos:start="129:27" pos:end="129:38"><expr pos:start="129:27" pos:end="129:38"><operator pos:start="129:27" pos:end="129:27">&amp;</operator><name pos:start="129:28" pos:end="129:38"><name pos:start="129:28" pos:end="129:28">s</name><operator pos:start="129:29" pos:end="129:30">-&gt;</operator><name pos:start="129:31" pos:end="129:38">bufqueue</name></name></expr></argument>, <argument pos:start="129:41" pos:end="129:41"><expr pos:start="129:41" pos:end="129:41"><literal type="number" pos:start="129:41" pos:end="129:41">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="131:9" pos:end="131:31"><block_content pos:start="131:9" pos:end="131:31">

        <return pos:start="131:9" pos:end="131:31">return <expr pos:start="131:16" pos:end="131:30"><call pos:start="131:16" pos:end="131:30"><name pos:start="131:16" pos:end="131:22">AVERROR</name><argument_list pos:start="131:23" pos:end="131:30">(<argument pos:start="131:24" pos:end="131:29"><expr pos:start="131:24" pos:end="131:29"><name pos:start="131:24" pos:end="131:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="135:5" pos:end="135:13">return <expr pos:start="135:12" pos:end="135:12"><literal type="number" pos:start="135:12" pos:end="135:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
