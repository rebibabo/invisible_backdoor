<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22883.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:58"><name pos:start="1:1" pos:end="1:18">rdt_parse_sdp_line</name> <argument_list pos:start="1:20" pos:end="3:58">(<argument pos:start="1:21" pos:end="1:38">AVFormatContext *s</argument>, <argument pos:start="1:41" pos:end="1:52">int st_index</argument>,

                    <argument pos:start="3:21" pos:end="3:39">PayloadContext *rdt</argument>, <argument pos:start="3:42" pos:end="3:57">const char *line</argument>)</argument_list></macro>

<block pos:start="5:1" pos:end="71:1">{<block_content pos:start="7:5" pos:end="69:13">

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">AVStream</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:20">stream</name> <init pos:start="7:22" pos:end="7:43">= <expr pos:start="7:24" pos:end="7:43"><name pos:start="7:24" pos:end="7:43"><name pos:start="7:24" pos:end="7:24">s</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:33">streams</name><index pos:start="7:34" pos:end="7:43">[<expr pos:start="7:35" pos:end="7:42"><name pos:start="7:35" pos:end="7:42">st_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">p</name> <init pos:start="9:19" pos:end="9:24">= <expr pos:start="9:21" pos:end="9:24"><name pos:start="9:21" pos:end="9:24">line</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="65:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:49">(<expr pos:start="13:9" pos:end="13:48"><call pos:start="13:9" pos:end="13:48"><name pos:start="13:9" pos:end="13:19">av_strstart</name><argument_list pos:start="13:20" pos:end="13:48">(<argument pos:start="13:21" pos:end="13:21"><expr pos:start="13:21" pos:end="13:21"><name pos:start="13:21" pos:end="13:21">p</name></expr></argument>, <argument pos:start="13:24" pos:end="13:43"><expr pos:start="13:24" pos:end="13:43"><literal type="string" pos:start="13:24" pos:end="13:43">"OpaqueData:buffer;"</literal></expr></argument>, <argument pos:start="13:46" pos:end="13:47"><expr pos:start="13:46" pos:end="13:47"><operator pos:start="13:46" pos:end="13:46">&amp;</operator><name pos:start="13:47" pos:end="13:47">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:51" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:67">

        <expr_stmt pos:start="15:9" pos:end="15:67"><expr pos:start="15:9" pos:end="15:66"><name pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:11">rdt</name><operator pos:start="15:12" pos:end="15:13">-&gt;</operator><name pos:start="15:14" pos:end="15:22">mlti_data</name></name> <operator pos:start="15:24" pos:end="15:24">=</operator> <call pos:start="15:26" pos:end="15:66"><name pos:start="15:26" pos:end="15:41">rdt_parse_b64buf</name><argument_list pos:start="15:42" pos:end="15:66">(<argument pos:start="15:43" pos:end="15:62"><expr pos:start="15:43" pos:end="15:62"><operator pos:start="15:43" pos:end="15:43">&amp;</operator><name pos:start="15:44" pos:end="15:62"><name pos:start="15:44" pos:end="15:46">rdt</name><operator pos:start="15:47" pos:end="15:48">-&gt;</operator><name pos:start="15:49" pos:end="15:62">mlti_data_size</name></name></expr></argument>, <argument pos:start="15:65" pos:end="15:65"><expr pos:start="15:65" pos:end="15:65"><name pos:start="15:65" pos:end="15:65">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="17:7" pos:end="19:36">else if <condition pos:start="17:15" pos:end="17:56">(<expr pos:start="17:16" pos:end="17:55"><call pos:start="17:16" pos:end="17:55"><name pos:start="17:16" pos:end="17:26">av_strstart</name><argument_list pos:start="17:27" pos:end="17:55">(<argument pos:start="17:28" pos:end="17:28"><expr pos:start="17:28" pos:end="17:28"><name pos:start="17:28" pos:end="17:28">p</name></expr></argument>, <argument pos:start="17:31" pos:end="17:50"><expr pos:start="17:31" pos:end="17:50"><literal type="string" pos:start="17:31" pos:end="17:50">"StartTime:integer;"</literal></expr></argument>, <argument pos:start="17:53" pos:end="17:54"><expr pos:start="17:53" pos:end="17:54"><operator pos:start="17:53" pos:end="17:53">&amp;</operator><name pos:start="17:54" pos:end="17:54">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:36"><block_content pos:start="19:9" pos:end="19:36">

        <expr_stmt pos:start="19:9" pos:end="19:36"><expr pos:start="19:9" pos:end="19:35"><name pos:start="19:9" pos:end="19:25"><name pos:start="19:9" pos:end="19:14">stream</name><operator pos:start="19:15" pos:end="19:16">-&gt;</operator><name pos:start="19:17" pos:end="19:25">first_dts</name></name> <operator pos:start="19:27" pos:end="19:27">=</operator> <call pos:start="19:29" pos:end="19:35"><name pos:start="19:29" pos:end="19:32">atoi</name><argument_list pos:start="19:33" pos:end="19:35">(<argument pos:start="19:34" pos:end="19:34"><expr pos:start="19:34" pos:end="19:34"><name pos:start="19:34" pos:end="19:34">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="21:5" pos:end="65:5">else if <condition pos:start="21:13" pos:end="21:55">(<expr pos:start="21:14" pos:end="21:54"><call pos:start="21:14" pos:end="21:54"><name pos:start="21:14" pos:end="21:24">av_strstart</name><argument_list pos:start="21:25" pos:end="21:54">(<argument pos:start="21:26" pos:end="21:26"><expr pos:start="21:26" pos:end="21:26"><name pos:start="21:26" pos:end="21:26">p</name></expr></argument>, <argument pos:start="21:29" pos:end="21:49"><expr pos:start="21:29" pos:end="21:49"><literal type="string" pos:start="21:29" pos:end="21:49">"ASMRuleBook:string;"</literal></expr></argument>, <argument pos:start="21:52" pos:end="21:53"><expr pos:start="21:52" pos:end="21:53"><operator pos:start="21:52" pos:end="21:52">&amp;</operator><name pos:start="21:53" pos:end="21:53">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:57" pos:end="65:5">{<block_content pos:start="23:9" pos:end="63:12">

        <decl_stmt pos:start="23:9" pos:end="23:26"><decl pos:start="23:9" pos:end="23:13"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:13">n</name></decl>, <decl pos:start="23:16" pos:end="23:25"><type ref="prev" pos:start="23:9" pos:end="23:11"/><name pos:start="23:16" pos:end="23:20">first</name> <init pos:start="23:22" pos:end="23:25">= <expr pos:start="23:24" pos:end="23:25"><operator pos:start="23:24" pos:end="23:24">-</operator><literal type="number" pos:start="23:25" pos:end="23:25">1</literal></expr></init></decl>;</decl_stmt>



        <for pos:start="27:9" pos:end="63:12">for <control pos:start="27:13" pos:end="27:43">(<init pos:start="27:14" pos:end="27:19"><expr pos:start="27:14" pos:end="27:18"><name pos:start="27:14" pos:end="27:14">n</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <literal type="number" pos:start="27:18" pos:end="27:18">0</literal></expr>;</init> <condition pos:start="27:21" pos:end="27:38"><expr pos:start="27:21" pos:end="27:37"><name pos:start="27:21" pos:end="27:21">n</name> <operator pos:start="27:23" pos:end="27:23">&lt;</operator> <name pos:start="27:25" pos:end="27:37"><name pos:start="27:25" pos:end="27:25">s</name><operator pos:start="27:26" pos:end="27:27">-&gt;</operator><name pos:start="27:28" pos:end="27:37">nb_streams</name></name></expr>;</condition> <incr pos:start="27:40" pos:end="27:42"><expr pos:start="27:40" pos:end="27:42"><name pos:start="27:40" pos:end="27:40">n</name><operator pos:start="27:41" pos:end="27:42">++</operator></expr></incr>)</control><block type="pseudo" pos:start="29:13" pos:end="63:12"><block_content pos:start="29:13" pos:end="63:12">

            <if_stmt pos:start="29:13" pos:end="63:12"><if pos:start="29:13" pos:end="63:12">if <condition pos:start="29:16" pos:end="29:48">(<expr pos:start="29:17" pos:end="29:47"><name pos:start="29:17" pos:end="29:29"><name pos:start="29:17" pos:end="29:17">s</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:26">streams</name><index pos:start="29:27" pos:end="29:29">[<expr pos:start="29:28" pos:end="29:28"><name pos:start="29:28" pos:end="29:28">n</name></expr>]</index></name><operator pos:start="29:30" pos:end="29:31">-&gt;</operator><name pos:start="29:32" pos:end="29:33">id</name> <operator pos:start="29:35" pos:end="29:36">==</operator> <name pos:start="29:38" pos:end="29:47"><name pos:start="29:38" pos:end="29:43">stream</name><operator pos:start="29:44" pos:end="29:45">-&gt;</operator><name pos:start="29:46" pos:end="29:47">id</name></name></expr>)</condition> <block pos:start="29:50" pos:end="63:12">{<block_content pos:start="31:17" pos:end="61:57">

                <decl_stmt pos:start="31:17" pos:end="31:53"><decl pos:start="31:17" pos:end="31:52"><type pos:start="31:17" pos:end="31:19"><name pos:start="31:17" pos:end="31:19">int</name></type> <name pos:start="31:21" pos:end="31:25">count</name> <init pos:start="31:27" pos:end="31:52">= <expr pos:start="31:29" pos:end="31:52"><name pos:start="31:29" pos:end="31:41"><name pos:start="31:29" pos:end="31:29">s</name><operator pos:start="31:30" pos:end="31:31">-&gt;</operator><name pos:start="31:32" pos:end="31:38">streams</name><index pos:start="31:39" pos:end="31:41">[<expr pos:start="31:40" pos:end="31:40"><name pos:start="31:40" pos:end="31:40">n</name></expr>]</index></name><operator pos:start="31:42" pos:end="31:43">-&gt;</operator><name pos:start="31:44" pos:end="31:48">index</name> <operator pos:start="31:50" pos:end="31:50">+</operator> <literal type="number" pos:start="31:52" pos:end="31:52">1</literal></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="33:17" pos:end="33:43"><if pos:start="33:17" pos:end="33:43">if <condition pos:start="33:20" pos:end="33:32">(<expr pos:start="33:21" pos:end="33:31"><name pos:start="33:21" pos:end="33:25">first</name> <operator pos:start="33:27" pos:end="33:28">==</operator> <operator pos:start="33:30" pos:end="33:30">-</operator><literal type="number" pos:start="33:31" pos:end="33:31">1</literal></expr>)</condition><block type="pseudo" pos:start="33:34" pos:end="33:43"><block_content pos:start="33:34" pos:end="33:43"> <expr_stmt pos:start="33:34" pos:end="33:43"><expr pos:start="33:34" pos:end="33:42"><name pos:start="33:34" pos:end="33:38">first</name> <operator pos:start="33:40" pos:end="33:40">=</operator> <name pos:start="33:42" pos:end="33:42">n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="35:17" pos:end="51:17"><if pos:start="35:17" pos:end="51:17">if <condition pos:start="35:20" pos:end="35:41">(<expr pos:start="35:21" pos:end="35:40"><name pos:start="35:21" pos:end="35:32"><name pos:start="35:21" pos:end="35:23">rdt</name><operator pos:start="35:24" pos:end="35:25">-&gt;</operator><name pos:start="35:26" pos:end="35:32">nb_rmst</name></name> <operator pos:start="35:34" pos:end="35:34">&lt;</operator> <name pos:start="35:36" pos:end="35:40">count</name></expr>)</condition> <block pos:start="35:43" pos:end="51:17">{<block_content pos:start="37:21" pos:end="49:41">

                    <decl_stmt pos:start="37:21" pos:end="37:80"><decl pos:start="37:21" pos:end="37:79"><type pos:start="37:21" pos:end="37:31"><name pos:start="37:21" pos:end="37:28">RMStream</name> <modifier pos:start="37:30" pos:end="37:30">*</modifier><modifier pos:start="37:31" pos:end="37:31">*</modifier></type><name pos:start="37:32" pos:end="37:35">rmst</name><init pos:start="37:36" pos:end="37:79">= <expr pos:start="37:38" pos:end="37:79"><call pos:start="37:38" pos:end="37:79"><name pos:start="37:38" pos:end="37:47">av_realloc</name><argument_list pos:start="37:48" pos:end="37:79">(<argument pos:start="37:49" pos:end="37:57"><expr pos:start="37:49" pos:end="37:57"><name pos:start="37:49" pos:end="37:57"><name pos:start="37:49" pos:end="37:51">rdt</name><operator pos:start="37:52" pos:end="37:53">-&gt;</operator><name pos:start="37:54" pos:end="37:57">rmst</name></name></expr></argument>, <argument pos:start="37:60" pos:end="37:78"><expr pos:start="37:60" pos:end="37:78"><name pos:start="37:60" pos:end="37:64">count</name><operator pos:start="37:65" pos:end="37:65">*</operator><sizeof pos:start="37:66" pos:end="37:78">sizeof<argument_list pos:start="37:72" pos:end="37:78">(<argument pos:start="37:73" pos:end="37:77"><expr pos:start="37:73" pos:end="37:77"><operator pos:start="37:73" pos:end="37:73">*</operator><name pos:start="37:74" pos:end="37:77">rmst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="39:21" pos:end="41:47"><if pos:start="39:21" pos:end="41:47">if <condition pos:start="39:24" pos:end="39:30">(<expr pos:start="39:25" pos:end="39:29"><operator pos:start="39:25" pos:end="39:25">!</operator><name pos:start="39:26" pos:end="39:29">rmst</name></expr>)</condition><block type="pseudo" pos:start="41:25" pos:end="41:47"><block_content pos:start="41:25" pos:end="41:47">

                        <return pos:start="41:25" pos:end="41:47">return <expr pos:start="41:32" pos:end="41:46"><call pos:start="41:32" pos:end="41:46"><name pos:start="41:32" pos:end="41:38">AVERROR</name><argument_list pos:start="41:39" pos:end="41:46">(<argument pos:start="41:40" pos:end="41:45"><expr pos:start="41:40" pos:end="41:45"><name pos:start="41:40" pos:end="41:45">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="43:21" pos:end="45:67"><expr pos:start="43:21" pos:end="45:66"><call pos:start="43:21" pos:end="45:66"><name pos:start="43:21" pos:end="43:26">memset</name><argument_list pos:start="43:27" pos:end="45:66">(<argument pos:start="43:28" pos:end="43:46"><expr pos:start="43:28" pos:end="43:46"><name pos:start="43:28" pos:end="43:31">rmst</name> <operator pos:start="43:33" pos:end="43:33">+</operator> <name pos:start="43:35" pos:end="43:46"><name pos:start="43:35" pos:end="43:37">rdt</name><operator pos:start="43:38" pos:end="43:39">-&gt;</operator><name pos:start="43:40" pos:end="43:46">nb_rmst</name></name></expr></argument>, <argument pos:start="43:49" pos:end="43:49"><expr pos:start="43:49" pos:end="43:49"><literal type="number" pos:start="43:49" pos:end="43:49">0</literal></expr></argument>,

                           <argument pos:start="45:28" pos:end="45:65"><expr pos:start="45:28" pos:end="45:65"><operator pos:start="45:28" pos:end="45:28">(</operator><name pos:start="45:29" pos:end="45:33">count</name> <operator pos:start="45:35" pos:end="45:35">-</operator> <name pos:start="45:37" pos:end="45:48"><name pos:start="45:37" pos:end="45:39">rdt</name><operator pos:start="45:40" pos:end="45:41">-&gt;</operator><name pos:start="45:42" pos:end="45:48">nb_rmst</name></name><operator pos:start="45:49" pos:end="45:49">)</operator> <operator pos:start="45:51" pos:end="45:51">*</operator> <sizeof pos:start="45:53" pos:end="45:65">sizeof<argument_list pos:start="45:59" pos:end="45:65">(<argument pos:start="45:60" pos:end="45:64"><expr pos:start="45:60" pos:end="45:64"><operator pos:start="45:60" pos:end="45:60">*</operator><name pos:start="45:61" pos:end="45:64">rmst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="47:21" pos:end="47:40"><expr pos:start="47:21" pos:end="47:39"><name pos:start="47:21" pos:end="47:29"><name pos:start="47:21" pos:end="47:23">rdt</name><operator pos:start="47:24" pos:end="47:25">-&gt;</operator><name pos:start="47:26" pos:end="47:29">rmst</name></name>    <operator pos:start="47:34" pos:end="47:34">=</operator> <name pos:start="47:36" pos:end="47:39">rmst</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="49:21" pos:end="49:41"><expr pos:start="49:21" pos:end="49:40"><name pos:start="49:21" pos:end="49:32"><name pos:start="49:21" pos:end="49:23">rdt</name><operator pos:start="49:24" pos:end="49:25">-&gt;</operator><name pos:start="49:26" pos:end="49:32">nb_rmst</name></name> <operator pos:start="49:34" pos:end="49:34">=</operator> <name pos:start="49:36" pos:end="49:40">count</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="53:17" pos:end="53:73"><expr pos:start="53:17" pos:end="53:72"><name pos:start="53:17" pos:end="53:47"><name pos:start="53:17" pos:end="53:19">rdt</name><operator pos:start="53:20" pos:end="53:21">-&gt;</operator><name pos:start="53:22" pos:end="53:25">rmst</name><index pos:start="53:26" pos:end="53:47">[<expr pos:start="53:27" pos:end="53:46"><name pos:start="53:27" pos:end="53:39"><name pos:start="53:27" pos:end="53:27">s</name><operator pos:start="53:28" pos:end="53:29">-&gt;</operator><name pos:start="53:30" pos:end="53:36">streams</name><index pos:start="53:37" pos:end="53:39">[<expr pos:start="53:38" pos:end="53:38"><name pos:start="53:38" pos:end="53:38">n</name></expr>]</index></name><operator pos:start="53:40" pos:end="53:41">-&gt;</operator><name pos:start="53:42" pos:end="53:46">index</name></expr>]</index></name> <operator pos:start="53:49" pos:end="53:49">=</operator> <call pos:start="53:51" pos:end="53:72"><name pos:start="53:51" pos:end="53:70">ff_rm_alloc_rmstream</name><argument_list pos:start="53:71" pos:end="53:72">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:67"><expr pos:start="55:17" pos:end="55:66"><call pos:start="55:17" pos:end="55:66"><name pos:start="55:17" pos:end="55:29">rdt_load_mdpr</name><argument_list pos:start="55:30" pos:end="55:66">(<argument pos:start="55:31" pos:end="55:33"><expr pos:start="55:31" pos:end="55:33"><name pos:start="55:31" pos:end="55:33">rdt</name></expr></argument>, <argument pos:start="55:36" pos:end="55:48"><expr pos:start="55:36" pos:end="55:48"><name pos:start="55:36" pos:end="55:48"><name pos:start="55:36" pos:end="55:36">s</name><operator pos:start="55:37" pos:end="55:38">-&gt;</operator><name pos:start="55:39" pos:end="55:45">streams</name><index pos:start="55:46" pos:end="55:48">[<expr pos:start="55:47" pos:end="55:47"><name pos:start="55:47" pos:end="55:47">n</name></expr>]</index></name></expr></argument>, <argument pos:start="55:51" pos:end="55:65"><expr pos:start="55:51" pos:end="55:65"><operator pos:start="55:51" pos:end="55:51">(</operator><name pos:start="55:52" pos:end="55:52">n</name> <operator pos:start="55:54" pos:end="55:54">-</operator> <name pos:start="55:56" pos:end="55:60">first</name><operator pos:start="55:61" pos:end="55:61">)</operator> <operator pos:start="55:63" pos:end="55:63">*</operator> <literal type="number" pos:start="55:65" pos:end="55:65">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="59:17" pos:end="61:57"><if pos:start="59:17" pos:end="61:57">if <condition pos:start="59:20" pos:end="59:67">(<expr pos:start="59:21" pos:end="59:66"><name pos:start="59:21" pos:end="59:33"><name pos:start="59:21" pos:end="59:21">s</name><operator pos:start="59:22" pos:end="59:23">-&gt;</operator><name pos:start="59:24" pos:end="59:30">streams</name><index pos:start="59:31" pos:end="59:33">[<expr pos:start="59:32" pos:end="59:32"><name pos:start="59:32" pos:end="59:32">n</name></expr>]</index></name><operator pos:start="59:34" pos:end="59:35">-&gt;</operator><name pos:start="59:36" pos:end="59:50"><name pos:start="59:36" pos:end="59:40">codec</name><operator pos:start="59:41" pos:end="59:42">-&gt;</operator><name pos:start="59:43" pos:end="59:50">codec_id</name></name> <operator pos:start="59:52" pos:end="59:53">==</operator> <name pos:start="59:55" pos:end="59:66">CODEC_ID_AAC</name></expr>)</condition><block type="pseudo" pos:start="61:21" pos:end="61:57"><block_content pos:start="61:21" pos:end="61:57">

                    <expr_stmt pos:start="61:21" pos:end="61:57"><expr pos:start="61:21" pos:end="61:56"><name pos:start="61:21" pos:end="61:33"><name pos:start="61:21" pos:end="61:21">s</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:30">streams</name><index pos:start="61:31" pos:end="61:33">[<expr pos:start="61:32" pos:end="61:32"><name pos:start="61:32" pos:end="61:32">n</name></expr>]</index></name><operator pos:start="61:34" pos:end="61:35">-&gt;</operator><name pos:start="61:36" pos:end="61:52"><name pos:start="61:36" pos:end="61:40">codec</name><operator pos:start="61:41" pos:end="61:42">-&gt;</operator><name pos:start="61:43" pos:end="61:52">frame_size</name></name> <operator pos:start="61:54" pos:end="61:54">=</operator> <literal type="number" pos:start="61:56" pos:end="61:56">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="61:59" pos:end="61:66">// FIXME</comment>

           </block_content>}</block></if></if_stmt></block_content></block></for>

    </block_content>}</block></if></if_stmt>



    <return pos:start="69:5" pos:end="69:13">return <expr pos:start="69:12" pos:end="69:12"><literal type="number" pos:start="69:12" pos:end="69:12">0</literal></expr>;</return>

</block_content>}</block>
</unit>
