<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9847.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:29"><name pos:start="1:1" pos:end="1:14">minimac2_write</name><argument_list pos:start="1:15" pos:end="3:29">(<argument pos:start="1:16" pos:end="1:27">void *opaque</argument>, <argument pos:start="1:30" pos:end="1:52">target_phys_addr_t addr</argument>, <argument pos:start="1:55" pos:end="1:68">uint64_t value</argument>,

               <argument pos:start="3:16" pos:end="3:28">unsigned size</argument>)</argument_list></macro>

<block pos:start="5:1" pos:end="89:1">{<block_content pos:start="7:5" pos:end="87:5">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:28"><name pos:start="7:5" pos:end="7:26">MilkymistMinimac2State</name> <modifier pos:start="7:28" pos:end="7:28">*</modifier></type><name pos:start="7:29" pos:end="7:29">s</name> <init pos:start="7:31" pos:end="7:38">= <expr pos:start="7:33" pos:end="7:38"><name pos:start="7:33" pos:end="7:38">opaque</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:54"><expr pos:start="11:5" pos:end="11:53"><call pos:start="11:5" pos:end="11:53"><name pos:start="11:5" pos:end="11:40">trace_milkymist_minimac2_memory_read</name><argument_list pos:start="11:41" pos:end="11:53">(<argument pos:start="11:42" pos:end="11:45"><expr pos:start="11:42" pos:end="11:45"><name pos:start="11:42" pos:end="11:45">addr</name></expr></argument>, <argument pos:start="11:48" pos:end="11:52"><expr pos:start="11:48" pos:end="11:52"><name pos:start="11:48" pos:end="11:52">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:15"><expr pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:8">addr</name> <operator pos:start="15:10" pos:end="15:12">&gt;&gt;=</operator> <literal type="number" pos:start="15:14" pos:end="15:14">2</literal></expr>;</expr_stmt>

    <switch pos:start="17:5" pos:end="87:5">switch <condition pos:start="17:12" pos:end="17:17">(<expr pos:start="17:13" pos:end="17:16"><name pos:start="17:13" pos:end="17:16">addr</name></expr>)</condition> <block pos:start="17:19" pos:end="87:5">{<block_content pos:start="19:5" pos:end="85:14">

    <case pos:start="19:5" pos:end="19:16">case <expr pos:start="19:10" pos:end="19:15"><name pos:start="19:10" pos:end="19:15">R_MDIO</name></expr>:</case>

    <block pos:start="21:5" pos:end="43:5">{<block_content pos:start="25:9" pos:end="41:32">

        <comment type="block" pos:start="23:9" pos:end="23:34">/* MDIO_DI is read only */</comment>

        <decl_stmt pos:start="25:9" pos:end="25:50"><decl pos:start="25:9" pos:end="25:49"><type pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">int</name></type> <name pos:start="25:13" pos:end="25:19">mdio_di</name> <init pos:start="25:21" pos:end="25:49">= <expr pos:start="25:23" pos:end="25:49"><operator pos:start="25:23" pos:end="25:23">(</operator><name pos:start="25:24" pos:end="25:38"><name pos:start="25:24" pos:end="25:24">s</name><operator pos:start="25:25" pos:end="25:26">-&gt;</operator><name pos:start="25:27" pos:end="25:30">regs</name><index pos:start="25:31" pos:end="25:38">[<expr pos:start="25:32" pos:end="25:37"><name pos:start="25:32" pos:end="25:37">R_MDIO</name></expr>]</index></name> <operator pos:start="25:40" pos:end="25:40">&amp;</operator> <name pos:start="25:42" pos:end="25:48">MDIO_DI</name><operator pos:start="25:49" pos:end="25:49">)</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:32"><expr pos:start="27:9" pos:end="27:31"><name pos:start="27:9" pos:end="27:23"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:15">regs</name><index pos:start="27:16" pos:end="27:23">[<expr pos:start="27:17" pos:end="27:22"><name pos:start="27:17" pos:end="27:22">R_MDIO</name></expr>]</index></name> <operator pos:start="27:25" pos:end="27:25">=</operator> <name pos:start="27:27" pos:end="27:31">value</name></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="37:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:20">(<expr pos:start="29:13" pos:end="29:19"><name pos:start="29:13" pos:end="29:19">mdio_di</name></expr>)</condition> <block pos:start="29:22" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:39">

            <expr_stmt pos:start="31:13" pos:end="31:39"><expr pos:start="31:13" pos:end="31:38"><name pos:start="31:13" pos:end="31:27"><name pos:start="31:13" pos:end="31:13">s</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:19">regs</name><index pos:start="31:20" pos:end="31:27">[<expr pos:start="31:21" pos:end="31:26"><name pos:start="31:21" pos:end="31:26">R_MDIO</name></expr>]</index></name> <operator pos:start="31:29" pos:end="31:30">|=</operator> <name pos:start="31:32" pos:end="31:38">mdio_di</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="33:11" pos:end="37:9">else <block pos:start="33:16" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:40">

            <expr_stmt pos:start="35:13" pos:end="35:40"><expr pos:start="35:13" pos:end="35:39"><name pos:start="35:13" pos:end="35:27"><name pos:start="35:13" pos:end="35:13">s</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:19">regs</name><index pos:start="35:20" pos:end="35:27">[<expr pos:start="35:21" pos:end="35:26"><name pos:start="35:21" pos:end="35:26">R_MDIO</name></expr>]</index></name> <operator pos:start="35:29" pos:end="35:30">&amp;=</operator> <operator pos:start="35:32" pos:end="35:32">~</operator><name pos:start="35:33" pos:end="35:39">mdio_di</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:32"><expr pos:start="41:9" pos:end="41:31"><call pos:start="41:9" pos:end="41:31"><name pos:start="41:9" pos:end="41:28">minimac2_update_mdio</name><argument_list pos:start="41:29" pos:end="41:31">(<argument pos:start="41:30" pos:end="41:30"><expr pos:start="41:30" pos:end="41:30"><name pos:start="41:30" pos:end="41:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> <break pos:start="43:7" pos:end="43:12">break;</break>

    <case pos:start="45:5" pos:end="45:19">case <expr pos:start="45:10" pos:end="45:18"><name pos:start="45:10" pos:end="45:18">R_TXCOUNT</name></expr>:</case>

        <expr_stmt pos:start="47:9" pos:end="47:30"><expr pos:start="47:9" pos:end="47:29"><name pos:start="47:9" pos:end="47:21"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:15">regs</name><index pos:start="47:16" pos:end="47:21">[<expr pos:start="47:17" pos:end="47:20"><name pos:start="47:17" pos:end="47:20">addr</name></expr>]</index></name> <operator pos:start="47:23" pos:end="47:23">=</operator> <name pos:start="47:25" pos:end="47:29">value</name></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:22">(<expr pos:start="49:13" pos:end="49:21"><name pos:start="49:13" pos:end="49:17">value</name> <operator pos:start="49:19" pos:end="49:19">&gt;</operator> <literal type="number" pos:start="49:21" pos:end="49:21">0</literal></expr>)</condition> <block pos:start="49:24" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:27">

            <expr_stmt pos:start="51:13" pos:end="51:27"><expr pos:start="51:13" pos:end="51:26"><call pos:start="51:13" pos:end="51:26"><name pos:start="51:13" pos:end="51:23">minimac2_tx</name><argument_list pos:start="51:24" pos:end="51:26">(<argument pos:start="51:25" pos:end="51:25"><expr pos:start="51:25" pos:end="51:25"><name pos:start="51:25" pos:end="51:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    <case pos:start="57:5" pos:end="57:18">case <expr pos:start="57:10" pos:end="57:17"><name pos:start="57:10" pos:end="57:17">R_STATE0</name></expr>:</case>

    <case pos:start="59:5" pos:end="59:18">case <expr pos:start="59:10" pos:end="59:17"><name pos:start="59:10" pos:end="59:17">R_STATE1</name></expr>:</case>

        <expr_stmt pos:start="61:9" pos:end="61:30"><expr pos:start="61:9" pos:end="61:29"><name pos:start="61:9" pos:end="61:21"><name pos:start="61:9" pos:end="61:9">s</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:15">regs</name><index pos:start="61:16" pos:end="61:21">[<expr pos:start="61:17" pos:end="61:20"><name pos:start="61:17" pos:end="61:20">addr</name></expr>]</index></name> <operator pos:start="61:23" pos:end="61:23">=</operator> <name pos:start="61:25" pos:end="61:29">value</name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:31"><expr pos:start="63:9" pos:end="63:30"><call pos:start="63:9" pos:end="63:30"><name pos:start="63:9" pos:end="63:27">update_rx_interrupt</name><argument_list pos:start="63:28" pos:end="63:30">(<argument pos:start="63:29" pos:end="63:29"><expr pos:start="63:29" pos:end="63:29"><name pos:start="63:29" pos:end="63:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="65:9" pos:end="65:14">break;</break>

    <case pos:start="67:5" pos:end="67:17">case <expr pos:start="67:10" pos:end="67:16"><name pos:start="67:10" pos:end="67:16">R_SETUP</name></expr>:</case>

    <case pos:start="69:5" pos:end="69:18">case <expr pos:start="69:10" pos:end="69:17"><name pos:start="69:10" pos:end="69:17">R_COUNT0</name></expr>:</case>

    <case pos:start="71:5" pos:end="71:18">case <expr pos:start="71:10" pos:end="71:17"><name pos:start="71:10" pos:end="71:17">R_COUNT1</name></expr>:</case>

        <expr_stmt pos:start="73:9" pos:end="73:30"><expr pos:start="73:9" pos:end="73:29"><name pos:start="73:9" pos:end="73:21"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:15">regs</name><index pos:start="73:16" pos:end="73:21">[<expr pos:start="73:17" pos:end="73:20"><name pos:start="73:17" pos:end="73:20">addr</name></expr>]</index></name> <operator pos:start="73:23" pos:end="73:23">=</operator> <name pos:start="73:25" pos:end="73:29">value</name></expr>;</expr_stmt>

        <break pos:start="75:9" pos:end="75:14">break;</break>



    <default pos:start="79:5" pos:end="79:12">default:</default>

        <expr_stmt pos:start="81:9" pos:end="83:43"><expr pos:start="81:9" pos:end="83:42"><call pos:start="81:9" pos:end="83:42"><name pos:start="81:9" pos:end="81:20">error_report</name><argument_list pos:start="81:21" pos:end="83:42">(<argument pos:start="81:22" pos:end="83:30"><expr pos:start="81:22" pos:end="83:30"><literal type="string" pos:start="81:22" pos:end="81:78">"milkymist_minimac2: write access to unknown register 0x"</literal>

                <name pos:start="83:17" pos:end="83:30">TARGET_FMT_plx</name></expr></argument>, <argument pos:start="83:33" pos:end="83:41"><expr pos:start="83:33" pos:end="83:41"><name pos:start="83:33" pos:end="83:36">addr</name> <operator pos:start="83:38" pos:end="83:39">&lt;&lt;</operator> <literal type="number" pos:start="83:41" pos:end="83:41">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="85:9" pos:end="85:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block>
</unit>
