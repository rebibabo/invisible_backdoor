<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2118.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">cpu_ioreq_move</name><parameter_list pos:start="1:27" pos:end="1:40">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:36"><name pos:start="1:28" pos:end="1:34">ioreq_t</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">req</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="87:1">{<block_content pos:start="5:5" pos:end="85:5">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:15"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:15">sign</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:28"><expr pos:start="9:5" pos:end="9:27"><name pos:start="9:5" pos:end="9:8">sign</name> <operator pos:start="9:10" pos:end="9:10">=</operator> <ternary pos:start="9:12" pos:end="9:27"><condition pos:start="9:12" pos:end="9:20"><expr pos:start="9:12" pos:end="9:18"><name pos:start="9:12" pos:end="9:18"><name pos:start="9:12" pos:end="9:14">req</name><operator pos:start="9:15" pos:end="9:16">-&gt;</operator><name pos:start="9:17" pos:end="9:18">df</name></name></expr> ?</condition><then pos:start="9:22" pos:end="9:23"> <expr pos:start="9:22" pos:end="9:23"><operator pos:start="9:22" pos:end="9:22">-</operator><literal type="number" pos:start="9:23" pos:end="9:23">1</literal></expr> </then><else pos:start="9:25" pos:end="9:27">: <expr pos:start="9:27" pos:end="9:27"><literal type="number" pos:start="9:27" pos:end="9:27">1</literal></expr></else></ternary></expr>;</expr_stmt>



    <if_stmt pos:start="13:5" pos:end="85:5"><if pos:start="13:5" pos:end="41:5">if <condition pos:start="13:8" pos:end="13:26">(<expr pos:start="13:9" pos:end="13:25"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:25"><name pos:start="13:10" pos:end="13:12">req</name><operator pos:start="13:13" pos:end="13:14">-&gt;</operator><name pos:start="13:15" pos:end="13:25">data_is_ptr</name></name></expr>)</condition> <block pos:start="13:28" pos:end="41:5">{<block_content pos:start="15:9" pos:end="39:9">

        <if_stmt pos:start="15:9" pos:end="39:9"><if pos:start="15:9" pos:end="27:9">if <condition pos:start="15:12" pos:end="15:35">(<expr pos:start="15:13" pos:end="15:34"><name pos:start="15:13" pos:end="15:20"><name pos:start="15:13" pos:end="15:15">req</name><operator pos:start="15:16" pos:end="15:17">-&gt;</operator><name pos:start="15:18" pos:end="15:20">dir</name></name> <operator pos:start="15:22" pos:end="15:23">==</operator> <name pos:start="15:25" pos:end="15:34">IOREQ_READ</name></expr>)</condition> <block pos:start="15:37" pos:end="27:9">{<block_content pos:start="17:13" pos:end="25:13">

            <for pos:start="17:13" pos:end="25:13">for <control pos:start="17:17" pos:end="17:44">(<init pos:start="17:18" pos:end="17:23"><expr pos:start="17:18" pos:end="17:22"><name pos:start="17:18" pos:end="17:18">i</name> <operator pos:start="17:20" pos:end="17:20">=</operator> <literal type="number" pos:start="17:22" pos:end="17:22">0</literal></expr>;</init> <condition pos:start="17:25" pos:end="17:39"><expr pos:start="17:25" pos:end="17:38"><name pos:start="17:25" pos:end="17:25">i</name> <operator pos:start="17:27" pos:end="17:27">&lt;</operator> <name pos:start="17:29" pos:end="17:38"><name pos:start="17:29" pos:end="17:31">req</name><operator pos:start="17:32" pos:end="17:33">-&gt;</operator><name pos:start="17:34" pos:end="17:38">count</name></name></expr>;</condition> <incr pos:start="17:41" pos:end="17:43"><expr pos:start="17:41" pos:end="17:43"><name pos:start="17:41" pos:end="17:41">i</name><operator pos:start="17:42" pos:end="17:43">++</operator></expr></incr>)</control> <block pos:start="17:46" pos:end="25:13">{<block_content pos:start="19:17" pos:end="23:59">

                <expr_stmt pos:start="19:17" pos:end="23:59"><expr pos:start="19:17" pos:end="23:58"><call pos:start="19:17" pos:end="23:58"><name pos:start="19:17" pos:end="19:40">cpu_physical_memory_read</name><argument_list pos:start="19:41" pos:end="23:58">(

                        <argument pos:start="21:25" pos:end="21:67"><expr pos:start="21:25" pos:end="21:67"><name pos:start="21:25" pos:end="21:33"><name pos:start="21:25" pos:end="21:27">req</name><operator pos:start="21:28" pos:end="21:29">-&gt;</operator><name pos:start="21:30" pos:end="21:33">addr</name></name> <operator pos:start="21:35" pos:end="21:35">+</operator> <operator pos:start="21:37" pos:end="21:37">(</operator><name pos:start="21:38" pos:end="21:41">sign</name> <operator pos:start="21:43" pos:end="21:43">*</operator> <name pos:start="21:45" pos:end="21:45">i</name> <operator pos:start="21:47" pos:end="21:47">*</operator> <operator pos:start="21:49" pos:end="21:49">(</operator><name pos:start="21:50" pos:end="21:56">int64_t</name><operator pos:start="21:57" pos:end="21:57">)</operator><name pos:start="21:58" pos:end="21:66"><name pos:start="21:58" pos:end="21:60">req</name><operator pos:start="21:61" pos:end="21:62">-&gt;</operator><name pos:start="21:63" pos:end="21:66">size</name></name><operator pos:start="21:67" pos:end="21:67">)</operator></expr></argument>,

                        <argument pos:start="23:25" pos:end="23:46"><expr pos:start="23:25" pos:end="23:46"><operator pos:start="23:25" pos:end="23:25">(</operator><name pos:start="23:26" pos:end="23:32">uint8_t</name> <operator pos:start="23:34" pos:end="23:34">*</operator><operator pos:start="23:35" pos:end="23:35">)</operator> <operator pos:start="23:37" pos:end="23:37">&amp;</operator><name pos:start="23:38" pos:end="23:46"><name pos:start="23:38" pos:end="23:40">req</name><operator pos:start="23:41" pos:end="23:42">-&gt;</operator><name pos:start="23:43" pos:end="23:46">data</name></name></expr></argument>, <argument pos:start="23:49" pos:end="23:57"><expr pos:start="23:49" pos:end="23:57"><name pos:start="23:49" pos:end="23:57"><name pos:start="23:49" pos:end="23:51">req</name><operator pos:start="23:52" pos:end="23:53">-&gt;</operator><name pos:start="23:54" pos:end="23:57">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <if type="elseif" pos:start="27:11" pos:end="39:9">else if <condition pos:start="27:19" pos:end="27:43">(<expr pos:start="27:20" pos:end="27:42"><name pos:start="27:20" pos:end="27:27"><name pos:start="27:20" pos:end="27:22">req</name><operator pos:start="27:23" pos:end="27:24">-&gt;</operator><name pos:start="27:25" pos:end="27:27">dir</name></name> <operator pos:start="27:29" pos:end="27:30">==</operator> <name pos:start="27:32" pos:end="27:42">IOREQ_WRITE</name></expr>)</condition> <block pos:start="27:45" pos:end="39:9">{<block_content pos:start="29:13" pos:end="37:13">

            <for pos:start="29:13" pos:end="37:13">for <control pos:start="29:17" pos:end="29:44">(<init pos:start="29:18" pos:end="29:23"><expr pos:start="29:18" pos:end="29:22"><name pos:start="29:18" pos:end="29:18">i</name> <operator pos:start="29:20" pos:end="29:20">=</operator> <literal type="number" pos:start="29:22" pos:end="29:22">0</literal></expr>;</init> <condition pos:start="29:25" pos:end="29:39"><expr pos:start="29:25" pos:end="29:38"><name pos:start="29:25" pos:end="29:25">i</name> <operator pos:start="29:27" pos:end="29:27">&lt;</operator> <name pos:start="29:29" pos:end="29:38"><name pos:start="29:29" pos:end="29:31">req</name><operator pos:start="29:32" pos:end="29:33">-&gt;</operator><name pos:start="29:34" pos:end="29:38">count</name></name></expr>;</condition> <incr pos:start="29:41" pos:end="29:43"><expr pos:start="29:41" pos:end="29:43"><name pos:start="29:41" pos:end="29:41">i</name><operator pos:start="29:42" pos:end="29:43">++</operator></expr></incr>)</control> <block pos:start="29:46" pos:end="37:13">{<block_content pos:start="31:17" pos:end="35:59">

                <expr_stmt pos:start="31:17" pos:end="35:59"><expr pos:start="31:17" pos:end="35:58"><call pos:start="31:17" pos:end="35:58"><name pos:start="31:17" pos:end="31:41">cpu_physical_memory_write</name><argument_list pos:start="31:42" pos:end="35:58">(

                        <argument pos:start="33:25" pos:end="33:67"><expr pos:start="33:25" pos:end="33:67"><name pos:start="33:25" pos:end="33:33"><name pos:start="33:25" pos:end="33:27">req</name><operator pos:start="33:28" pos:end="33:29">-&gt;</operator><name pos:start="33:30" pos:end="33:33">addr</name></name> <operator pos:start="33:35" pos:end="33:35">+</operator> <operator pos:start="33:37" pos:end="33:37">(</operator><name pos:start="33:38" pos:end="33:41">sign</name> <operator pos:start="33:43" pos:end="33:43">*</operator> <name pos:start="33:45" pos:end="33:45">i</name> <operator pos:start="33:47" pos:end="33:47">*</operator> <operator pos:start="33:49" pos:end="33:49">(</operator><name pos:start="33:50" pos:end="33:56">int64_t</name><operator pos:start="33:57" pos:end="33:57">)</operator><name pos:start="33:58" pos:end="33:66"><name pos:start="33:58" pos:end="33:60">req</name><operator pos:start="33:61" pos:end="33:62">-&gt;</operator><name pos:start="33:63" pos:end="33:66">size</name></name><operator pos:start="33:67" pos:end="33:67">)</operator></expr></argument>,

                        <argument pos:start="35:25" pos:end="35:46"><expr pos:start="35:25" pos:end="35:46"><operator pos:start="35:25" pos:end="35:25">(</operator><name pos:start="35:26" pos:end="35:32">uint8_t</name> <operator pos:start="35:34" pos:end="35:34">*</operator><operator pos:start="35:35" pos:end="35:35">)</operator> <operator pos:start="35:37" pos:end="35:37">&amp;</operator><name pos:start="35:38" pos:end="35:46"><name pos:start="35:38" pos:end="35:40">req</name><operator pos:start="35:41" pos:end="35:42">-&gt;</operator><name pos:start="35:43" pos:end="35:46">data</name></name></expr></argument>, <argument pos:start="35:49" pos:end="35:57"><expr pos:start="35:49" pos:end="35:57"><name pos:start="35:49" pos:end="35:57"><name pos:start="35:49" pos:end="35:51">req</name><operator pos:start="35:52" pos:end="35:53">-&gt;</operator><name pos:start="35:54" pos:end="35:57">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="85:5">else <block pos:start="41:12" pos:end="85:5">{<block_content pos:start="43:9" pos:end="83:9">

        <decl_stmt pos:start="43:9" pos:end="43:21"><decl pos:start="43:9" pos:end="43:20"><type pos:start="43:9" pos:end="43:16"><name pos:start="43:9" pos:end="43:16">uint64_t</name></type> <name pos:start="43:18" pos:end="43:20">tmp</name></decl>;</decl_stmt>



        <if_stmt pos:start="47:9" pos:end="83:9"><if pos:start="47:9" pos:end="65:9">if <condition pos:start="47:12" pos:end="47:35">(<expr pos:start="47:13" pos:end="47:34"><name pos:start="47:13" pos:end="47:20"><name pos:start="47:13" pos:end="47:15">req</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:20">dir</name></name> <operator pos:start="47:22" pos:end="47:23">==</operator> <name pos:start="47:25" pos:end="47:34">IOREQ_READ</name></expr>)</condition> <block pos:start="47:37" pos:end="65:9">{<block_content pos:start="49:13" pos:end="63:13">

            <for pos:start="49:13" pos:end="63:13">for <control pos:start="49:17" pos:end="49:44">(<init pos:start="49:18" pos:end="49:23"><expr pos:start="49:18" pos:end="49:22"><name pos:start="49:18" pos:end="49:18">i</name> <operator pos:start="49:20" pos:end="49:20">=</operator> <literal type="number" pos:start="49:22" pos:end="49:22">0</literal></expr>;</init> <condition pos:start="49:25" pos:end="49:39"><expr pos:start="49:25" pos:end="49:38"><name pos:start="49:25" pos:end="49:25">i</name> <operator pos:start="49:27" pos:end="49:27">&lt;</operator> <name pos:start="49:29" pos:end="49:38"><name pos:start="49:29" pos:end="49:31">req</name><operator pos:start="49:32" pos:end="49:33">-&gt;</operator><name pos:start="49:34" pos:end="49:38">count</name></name></expr>;</condition> <incr pos:start="49:41" pos:end="49:43"><expr pos:start="49:41" pos:end="49:43"><name pos:start="49:41" pos:end="49:41">i</name><operator pos:start="49:42" pos:end="49:43">++</operator></expr></incr>)</control> <block pos:start="49:46" pos:end="63:13">{<block_content pos:start="51:17" pos:end="61:52">

                <expr_stmt pos:start="51:17" pos:end="55:52"><expr pos:start="51:17" pos:end="55:51"><call pos:start="51:17" pos:end="55:51"><name pos:start="51:17" pos:end="51:40">cpu_physical_memory_read</name><argument_list pos:start="51:41" pos:end="55:51">(

                        <argument pos:start="53:25" pos:end="53:67"><expr pos:start="53:25" pos:end="53:67"><name pos:start="53:25" pos:end="53:33"><name pos:start="53:25" pos:end="53:27">req</name><operator pos:start="53:28" pos:end="53:29">-&gt;</operator><name pos:start="53:30" pos:end="53:33">addr</name></name> <operator pos:start="53:35" pos:end="53:35">+</operator> <operator pos:start="53:37" pos:end="53:37">(</operator><name pos:start="53:38" pos:end="53:41">sign</name> <operator pos:start="53:43" pos:end="53:43">*</operator> <name pos:start="53:45" pos:end="53:45">i</name> <operator pos:start="53:47" pos:end="53:47">*</operator> <operator pos:start="53:49" pos:end="53:49">(</operator><name pos:start="53:50" pos:end="53:56">int64_t</name><operator pos:start="53:57" pos:end="53:57">)</operator><name pos:start="53:58" pos:end="53:66"><name pos:start="53:58" pos:end="53:60">req</name><operator pos:start="53:61" pos:end="53:62">-&gt;</operator><name pos:start="53:63" pos:end="53:66">size</name></name><operator pos:start="53:67" pos:end="53:67">)</operator></expr></argument>,

                        <argument pos:start="55:25" pos:end="55:39"><expr pos:start="55:25" pos:end="55:39"><operator pos:start="55:25" pos:end="55:25">(</operator><name pos:start="55:26" pos:end="55:32">uint8_t</name><operator pos:start="55:33" pos:end="55:33">*</operator><operator pos:start="55:34" pos:end="55:34">)</operator> <operator pos:start="55:36" pos:end="55:36">&amp;</operator><name pos:start="55:37" pos:end="55:39">tmp</name></expr></argument>, <argument pos:start="55:42" pos:end="55:50"><expr pos:start="55:42" pos:end="55:50"><name pos:start="55:42" pos:end="55:50"><name pos:start="55:42" pos:end="55:44">req</name><operator pos:start="55:45" pos:end="55:46">-&gt;</operator><name pos:start="55:47" pos:end="55:50">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="61:52"><expr pos:start="57:17" pos:end="61:51"><call pos:start="57:17" pos:end="61:51"><name pos:start="57:17" pos:end="57:41">cpu_physical_memory_write</name><argument_list pos:start="57:42" pos:end="61:51">(

                        <argument pos:start="59:25" pos:end="59:67"><expr pos:start="59:25" pos:end="59:67"><name pos:start="59:25" pos:end="59:33"><name pos:start="59:25" pos:end="59:27">req</name><operator pos:start="59:28" pos:end="59:29">-&gt;</operator><name pos:start="59:30" pos:end="59:33">data</name></name> <operator pos:start="59:35" pos:end="59:35">+</operator> <operator pos:start="59:37" pos:end="59:37">(</operator><name pos:start="59:38" pos:end="59:41">sign</name> <operator pos:start="59:43" pos:end="59:43">*</operator> <name pos:start="59:45" pos:end="59:45">i</name> <operator pos:start="59:47" pos:end="59:47">*</operator> <operator pos:start="59:49" pos:end="59:49">(</operator><name pos:start="59:50" pos:end="59:56">int64_t</name><operator pos:start="59:57" pos:end="59:57">)</operator><name pos:start="59:58" pos:end="59:66"><name pos:start="59:58" pos:end="59:60">req</name><operator pos:start="59:61" pos:end="59:62">-&gt;</operator><name pos:start="59:63" pos:end="59:66">size</name></name><operator pos:start="59:67" pos:end="59:67">)</operator></expr></argument>,

                        <argument pos:start="61:25" pos:end="61:39"><expr pos:start="61:25" pos:end="61:39"><operator pos:start="61:25" pos:end="61:25">(</operator><name pos:start="61:26" pos:end="61:32">uint8_t</name><operator pos:start="61:33" pos:end="61:33">*</operator><operator pos:start="61:34" pos:end="61:34">)</operator> <operator pos:start="61:36" pos:end="61:36">&amp;</operator><name pos:start="61:37" pos:end="61:39">tmp</name></expr></argument>, <argument pos:start="61:42" pos:end="61:50"><expr pos:start="61:42" pos:end="61:50"><name pos:start="61:42" pos:end="61:50"><name pos:start="61:42" pos:end="61:44">req</name><operator pos:start="61:45" pos:end="61:46">-&gt;</operator><name pos:start="61:47" pos:end="61:50">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <if type="elseif" pos:start="65:11" pos:end="83:9">else if <condition pos:start="65:19" pos:end="65:43">(<expr pos:start="65:20" pos:end="65:42"><name pos:start="65:20" pos:end="65:27"><name pos:start="65:20" pos:end="65:22">req</name><operator pos:start="65:23" pos:end="65:24">-&gt;</operator><name pos:start="65:25" pos:end="65:27">dir</name></name> <operator pos:start="65:29" pos:end="65:30">==</operator> <name pos:start="65:32" pos:end="65:42">IOREQ_WRITE</name></expr>)</condition> <block pos:start="65:45" pos:end="83:9">{<block_content pos:start="67:13" pos:end="81:13">

            <for pos:start="67:13" pos:end="81:13">for <control pos:start="67:17" pos:end="67:44">(<init pos:start="67:18" pos:end="67:23"><expr pos:start="67:18" pos:end="67:22"><name pos:start="67:18" pos:end="67:18">i</name> <operator pos:start="67:20" pos:end="67:20">=</operator> <literal type="number" pos:start="67:22" pos:end="67:22">0</literal></expr>;</init> <condition pos:start="67:25" pos:end="67:39"><expr pos:start="67:25" pos:end="67:38"><name pos:start="67:25" pos:end="67:25">i</name> <operator pos:start="67:27" pos:end="67:27">&lt;</operator> <name pos:start="67:29" pos:end="67:38"><name pos:start="67:29" pos:end="67:31">req</name><operator pos:start="67:32" pos:end="67:33">-&gt;</operator><name pos:start="67:34" pos:end="67:38">count</name></name></expr>;</condition> <incr pos:start="67:41" pos:end="67:43"><expr pos:start="67:41" pos:end="67:43"><name pos:start="67:41" pos:end="67:41">i</name><operator pos:start="67:42" pos:end="67:43">++</operator></expr></incr>)</control> <block pos:start="67:46" pos:end="81:13">{<block_content pos:start="69:17" pos:end="79:52">

                <expr_stmt pos:start="69:17" pos:end="73:52"><expr pos:start="69:17" pos:end="73:51"><call pos:start="69:17" pos:end="73:51"><name pos:start="69:17" pos:end="69:40">cpu_physical_memory_read</name><argument_list pos:start="69:41" pos:end="73:51">(

                        <argument pos:start="71:25" pos:end="71:67"><expr pos:start="71:25" pos:end="71:67"><name pos:start="71:25" pos:end="71:33"><name pos:start="71:25" pos:end="71:27">req</name><operator pos:start="71:28" pos:end="71:29">-&gt;</operator><name pos:start="71:30" pos:end="71:33">data</name></name> <operator pos:start="71:35" pos:end="71:35">+</operator> <operator pos:start="71:37" pos:end="71:37">(</operator><name pos:start="71:38" pos:end="71:41">sign</name> <operator pos:start="71:43" pos:end="71:43">*</operator> <name pos:start="71:45" pos:end="71:45">i</name> <operator pos:start="71:47" pos:end="71:47">*</operator> <operator pos:start="71:49" pos:end="71:49">(</operator><name pos:start="71:50" pos:end="71:56">int64_t</name><operator pos:start="71:57" pos:end="71:57">)</operator><name pos:start="71:58" pos:end="71:66"><name pos:start="71:58" pos:end="71:60">req</name><operator pos:start="71:61" pos:end="71:62">-&gt;</operator><name pos:start="71:63" pos:end="71:66">size</name></name><operator pos:start="71:67" pos:end="71:67">)</operator></expr></argument>,

                        <argument pos:start="73:25" pos:end="73:39"><expr pos:start="73:25" pos:end="73:39"><operator pos:start="73:25" pos:end="73:25">(</operator><name pos:start="73:26" pos:end="73:32">uint8_t</name><operator pos:start="73:33" pos:end="73:33">*</operator><operator pos:start="73:34" pos:end="73:34">)</operator> <operator pos:start="73:36" pos:end="73:36">&amp;</operator><name pos:start="73:37" pos:end="73:39">tmp</name></expr></argument>, <argument pos:start="73:42" pos:end="73:50"><expr pos:start="73:42" pos:end="73:50"><name pos:start="73:42" pos:end="73:50"><name pos:start="73:42" pos:end="73:44">req</name><operator pos:start="73:45" pos:end="73:46">-&gt;</operator><name pos:start="73:47" pos:end="73:50">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="75:17" pos:end="79:52"><expr pos:start="75:17" pos:end="79:51"><call pos:start="75:17" pos:end="79:51"><name pos:start="75:17" pos:end="75:41">cpu_physical_memory_write</name><argument_list pos:start="75:42" pos:end="79:51">(

                        <argument pos:start="77:25" pos:end="77:67"><expr pos:start="77:25" pos:end="77:67"><name pos:start="77:25" pos:end="77:33"><name pos:start="77:25" pos:end="77:27">req</name><operator pos:start="77:28" pos:end="77:29">-&gt;</operator><name pos:start="77:30" pos:end="77:33">addr</name></name> <operator pos:start="77:35" pos:end="77:35">+</operator> <operator pos:start="77:37" pos:end="77:37">(</operator><name pos:start="77:38" pos:end="77:41">sign</name> <operator pos:start="77:43" pos:end="77:43">*</operator> <name pos:start="77:45" pos:end="77:45">i</name> <operator pos:start="77:47" pos:end="77:47">*</operator> <operator pos:start="77:49" pos:end="77:49">(</operator><name pos:start="77:50" pos:end="77:56">int64_t</name><operator pos:start="77:57" pos:end="77:57">)</operator><name pos:start="77:58" pos:end="77:66"><name pos:start="77:58" pos:end="77:60">req</name><operator pos:start="77:61" pos:end="77:62">-&gt;</operator><name pos:start="77:63" pos:end="77:66">size</name></name><operator pos:start="77:67" pos:end="77:67">)</operator></expr></argument>,

                        <argument pos:start="79:25" pos:end="79:39"><expr pos:start="79:25" pos:end="79:39"><operator pos:start="79:25" pos:end="79:25">(</operator><name pos:start="79:26" pos:end="79:32">uint8_t</name><operator pos:start="79:33" pos:end="79:33">*</operator><operator pos:start="79:34" pos:end="79:34">)</operator> <operator pos:start="79:36" pos:end="79:36">&amp;</operator><name pos:start="79:37" pos:end="79:39">tmp</name></expr></argument>, <argument pos:start="79:42" pos:end="79:50"><expr pos:start="79:42" pos:end="79:50"><name pos:start="79:42" pos:end="79:50"><name pos:start="79:42" pos:end="79:44">req</name><operator pos:start="79:45" pos:end="79:46">-&gt;</operator><name pos:start="79:47" pos:end="79:50">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
