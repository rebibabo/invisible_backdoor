<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4979.c" pos:tabs="8"><function pos:start="1:1" pos:end="183:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">ahci_populate_sglist</name><parameter_list pos:start="1:32" pos:end="3:47">(<parameter pos:start="1:33" pos:end="1:46"><decl pos:start="1:33" pos:end="1:46"><type pos:start="1:33" pos:end="1:46"><name pos:start="1:33" pos:end="1:42">AHCIDevice</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:46">ad</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:66"><decl pos:start="1:49" pos:end="1:66"><type pos:start="1:49" pos:end="1:66"><name pos:start="1:49" pos:end="1:58">QEMUSGList</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:66">sglist</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:46"><decl pos:start="3:33" pos:end="3:46"><type pos:start="3:33" pos:end="3:46"><name pos:start="3:33" pos:end="3:39">int32_t</name></type> <name pos:start="3:41" pos:end="3:46">offset</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="183:1">{<block_content pos:start="7:5" pos:end="181:13">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">AHCICmdHdr</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">cmd</name> <init pos:start="7:21" pos:end="7:33">= <expr pos:start="7:23" pos:end="7:33"><name pos:start="7:23" pos:end="7:33"><name pos:start="7:23" pos:end="7:24">ad</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:33">cur_cmd</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:43"><decl pos:start="9:5" pos:end="9:42"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint16_t</name></type> <name pos:start="9:14" pos:end="9:17">opts</name> <init pos:start="9:19" pos:end="9:42">= <expr pos:start="9:21" pos:end="9:42"><call pos:start="9:21" pos:end="9:42"><name pos:start="9:21" pos:end="9:31">le16_to_cpu</name><argument_list pos:start="9:32" pos:end="9:42">(<argument pos:start="9:33" pos:end="9:41"><expr pos:start="9:33" pos:end="9:41"><name pos:start="9:33" pos:end="9:41"><name pos:start="9:33" pos:end="9:35">cmd</name><operator pos:start="9:36" pos:end="9:37">-&gt;</operator><name pos:start="9:38" pos:end="9:41">opts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:45"><decl pos:start="11:5" pos:end="11:44"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint16_t</name></type> <name pos:start="11:14" pos:end="11:18">prdtl</name> <init pos:start="11:20" pos:end="11:44">= <expr pos:start="11:22" pos:end="11:44"><call pos:start="11:22" pos:end="11:44"><name pos:start="11:22" pos:end="11:32">le16_to_cpu</name><argument_list pos:start="11:33" pos:end="11:44">(<argument pos:start="11:34" pos:end="11:43"><expr pos:start="11:34" pos:end="11:43"><name pos:start="11:34" pos:end="11:43"><name pos:start="11:34" pos:end="11:36">cmd</name><operator pos:start="11:37" pos:end="11:38">-&gt;</operator><name pos:start="11:39" pos:end="11:43">prdtl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:52"><decl pos:start="13:5" pos:end="13:51"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:22">cfis_addr</name> <init pos:start="13:24" pos:end="13:51">= <expr pos:start="13:26" pos:end="13:51"><call pos:start="13:26" pos:end="13:51"><name pos:start="13:26" pos:end="13:36">le64_to_cpu</name><argument_list pos:start="13:37" pos:end="13:51">(<argument pos:start="13:38" pos:end="13:50"><expr pos:start="13:38" pos:end="13:50"><name pos:start="13:38" pos:end="13:50"><name pos:start="13:38" pos:end="13:40">cmd</name><operator pos:start="13:41" pos:end="13:42">-&gt;</operator><name pos:start="13:43" pos:end="13:50">tbl_addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:42"><decl pos:start="15:5" pos:end="15:41"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:22">prdt_addr</name> <init pos:start="15:24" pos:end="15:41">= <expr pos:start="15:26" pos:end="15:41"><name pos:start="15:26" pos:end="15:34">cfis_addr</name> <operator pos:start="15:36" pos:end="15:36">+</operator> <literal type="number" pos:start="15:38" pos:end="15:41">0x80</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:52"><decl pos:start="17:5" pos:end="17:51"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:14">dma_addr_t</name></type> <name pos:start="17:16" pos:end="17:23">prdt_len</name> <init pos:start="17:25" pos:end="17:51">= <expr pos:start="17:27" pos:end="17:51"><operator pos:start="17:27" pos:end="17:27">(</operator><name pos:start="17:28" pos:end="17:32">prdtl</name> <operator pos:start="17:34" pos:end="17:34">*</operator> <sizeof pos:start="17:36" pos:end="17:50">sizeof<argument_list pos:start="17:42" pos:end="17:50">(<argument pos:start="17:43" pos:end="17:49"><expr pos:start="17:43" pos:end="17:49"><name pos:start="17:43" pos:end="17:49">AHCI_SG</name></expr></argument>)</argument_list></sizeof><operator pos:start="17:51" pos:end="17:51">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:40"><decl pos:start="19:5" pos:end="19:39"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:14">dma_addr_t</name></type> <name pos:start="19:16" pos:end="19:28">real_prdt_len</name> <init pos:start="19:30" pos:end="19:39">= <expr pos:start="19:32" pos:end="19:39"><name pos:start="19:32" pos:end="19:39">prdt_len</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:18"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">uint8_t</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:17">prdt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:10"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:14"><decl pos:start="25:5" pos:end="25:13"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">r</name> <init pos:start="25:11" pos:end="25:13">= <expr pos:start="25:13" pos:end="25:13"><literal type="number" pos:start="25:13" pos:end="25:13">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:21"><decl pos:start="27:5" pos:end="27:20"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:12">uint64_t</name></type> <name pos:start="27:14" pos:end="27:16">sum</name> <init pos:start="27:18" pos:end="27:20">= <expr pos:start="27:20" pos:end="27:20"><literal type="number" pos:start="27:20" pos:end="27:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:21"><decl pos:start="29:5" pos:end="29:20"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:15">off_idx</name> <init pos:start="29:17" pos:end="29:20">= <expr pos:start="29:19" pos:end="29:20"><operator pos:start="29:19" pos:end="29:19">-</operator><literal type="number" pos:start="29:20" pos:end="29:20">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:25"><decl pos:start="31:5" pos:end="31:24"><type pos:start="31:5" pos:end="31:11"><name pos:start="31:5" pos:end="31:11">int64_t</name></type> <name pos:start="31:13" pos:end="31:19">off_pos</name> <init pos:start="31:21" pos:end="31:24">= <expr pos:start="31:23" pos:end="31:24"><operator pos:start="31:23" pos:end="31:23">-</operator><literal type="number" pos:start="31:24" pos:end="31:24">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:23"><decl pos:start="33:5" pos:end="33:22"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:22">tbl_entry_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:28"><decl pos:start="35:5" pos:end="35:27"><type pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:10">IDEBus</name> <modifier pos:start="35:12" pos:end="35:12">*</modifier></type><name pos:start="35:13" pos:end="35:15">bus</name> <init pos:start="35:17" pos:end="35:27">= <expr pos:start="35:19" pos:end="35:27"><operator pos:start="35:19" pos:end="35:19">&amp;</operator><name pos:start="35:20" pos:end="35:27"><name pos:start="35:20" pos:end="35:21">ad</name><operator pos:start="35:22" pos:end="35:23">-&gt;</operator><name pos:start="35:24" pos:end="35:27">port</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:30"><decl pos:start="37:5" pos:end="37:29"><type pos:start="37:5" pos:end="37:14"><name pos:start="37:5" pos:end="37:12">BusState</name> <modifier pos:start="37:14" pos:end="37:14">*</modifier></type><name pos:start="37:15" pos:end="37:18">qbus</name> <init pos:start="37:20" pos:end="37:29">= <expr pos:start="37:22" pos:end="37:29"><call pos:start="37:22" pos:end="37:29"><name pos:start="37:22" pos:end="37:24">BUS</name><argument_list pos:start="37:25" pos:end="37:29">(<argument pos:start="37:26" pos:end="37:28"><expr pos:start="37:26" pos:end="37:28"><name pos:start="37:26" pos:end="37:28">bus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="41:5" pos:end="53:7">/*

     * Note: AHCI PRDT can describe up to 256GiB. SATA/ATA only support

     * transactions of up to 32MiB as of ATA8-ACS3 rev 1b, assuming a

     * 512 byte sector size. We limit the PRDT in this implementation to

     * a reasonably large 2GiB, which can accommodate the maximum transfer

     * request for sector sizes up to 32K.

     */</comment>



    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:15">(<expr pos:start="57:9" pos:end="57:14"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:14">prdtl</name></expr>)</condition> <block pos:start="57:17" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:18">

        <expr_stmt pos:start="59:9" pos:end="59:74"><expr pos:start="59:9" pos:end="59:73"><call pos:start="59:9" pos:end="59:73"><name pos:start="59:9" pos:end="59:15">DPRINTF</name><argument_list pos:start="59:16" pos:end="59:73">(<argument pos:start="59:17" pos:end="59:27"><expr pos:start="59:17" pos:end="59:27"><name pos:start="59:17" pos:end="59:27"><name pos:start="59:17" pos:end="59:18">ad</name><operator pos:start="59:19" pos:end="59:20">-&gt;</operator><name pos:start="59:21" pos:end="59:27">port_no</name></name></expr></argument>, <argument pos:start="59:30" pos:end="59:66"><expr pos:start="59:30" pos:end="59:66"><literal type="string" pos:start="59:30" pos:end="59:66">"no sg list given by guest: 0x%08x\n"</literal></expr></argument>, <argument pos:start="59:69" pos:end="59:72"><expr pos:start="59:69" pos:end="59:72"><name pos:start="59:69" pos:end="59:72">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:18">return <expr pos:start="61:16" pos:end="61:17"><operator pos:start="61:16" pos:end="61:16">-</operator><literal type="number" pos:start="61:17" pos:end="61:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:18">/* map PRDT */</comment>

    <if_stmt pos:start="69:5" pos:end="77:5"><if pos:start="69:5" pos:end="77:5">if <condition pos:start="69:8" pos:end="71:58">(<expr pos:start="69:9" pos:end="71:57"><operator pos:start="69:9" pos:end="69:9">!</operator><operator pos:start="69:10" pos:end="69:10">(</operator><name pos:start="69:11" pos:end="69:14">prdt</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <call pos:start="69:18" pos:end="71:56"><name pos:start="69:18" pos:end="69:31">dma_memory_map</name><argument_list pos:start="69:32" pos:end="71:56">(<argument pos:start="69:33" pos:end="69:43"><expr pos:start="69:33" pos:end="69:43"><name pos:start="69:33" pos:end="69:43"><name pos:start="69:33" pos:end="69:34">ad</name><operator pos:start="69:35" pos:end="69:36">-&gt;</operator><name pos:start="69:37" pos:end="69:39">hba</name><operator pos:start="69:40" pos:end="69:41">-&gt;</operator><name pos:start="69:42" pos:end="69:43">as</name></name></expr></argument>, <argument pos:start="69:46" pos:end="69:54"><expr pos:start="69:46" pos:end="69:54"><name pos:start="69:46" pos:end="69:54">prdt_addr</name></expr></argument>, <argument pos:start="69:57" pos:end="69:65"><expr pos:start="69:57" pos:end="69:65"><operator pos:start="69:57" pos:end="69:57">&amp;</operator><name pos:start="69:58" pos:end="69:65">prdt_len</name></expr></argument>,

                                <argument pos:start="71:33" pos:end="71:55"><expr pos:start="71:33" pos:end="71:55"><name pos:start="71:33" pos:end="71:55">DMA_DIRECTION_TO_DEVICE</name></expr></argument>)</argument_list></call><operator pos:start="71:57" pos:end="71:57">)</operator></expr>)</condition><block pos:start="71:59" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:18">

        <expr_stmt pos:start="73:9" pos:end="73:45"><expr pos:start="73:9" pos:end="73:44"><call pos:start="73:9" pos:end="73:44"><name pos:start="73:9" pos:end="73:15">DPRINTF</name><argument_list pos:start="73:16" pos:end="73:44">(<argument pos:start="73:17" pos:end="73:27"><expr pos:start="73:17" pos:end="73:27"><name pos:start="73:17" pos:end="73:27"><name pos:start="73:17" pos:end="73:18">ad</name><operator pos:start="73:19" pos:end="73:20">-&gt;</operator><name pos:start="73:21" pos:end="73:27">port_no</name></name></expr></argument>, <argument pos:start="73:30" pos:end="73:43"><expr pos:start="73:30" pos:end="73:43"><literal type="string" pos:start="73:30" pos:end="73:43">"map failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:18">return <expr pos:start="75:16" pos:end="75:17"><operator pos:start="75:16" pos:end="75:16">-</operator><literal type="number" pos:start="75:17" pos:end="75:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="81:5" pos:end="89:5"><if pos:start="81:5" pos:end="89:5">if <condition pos:start="81:8" pos:end="81:33">(<expr pos:start="81:9" pos:end="81:32"><name pos:start="81:9" pos:end="81:16">prdt_len</name> <operator pos:start="81:18" pos:end="81:18">&lt;</operator> <name pos:start="81:20" pos:end="81:32">real_prdt_len</name></expr>)</condition> <block pos:start="81:35" pos:end="89:5">{<block_content pos:start="83:9" pos:end="87:17">

        <expr_stmt pos:start="83:9" pos:end="83:60"><expr pos:start="83:9" pos:end="83:59"><call pos:start="83:9" pos:end="83:59"><name pos:start="83:9" pos:end="83:15">DPRINTF</name><argument_list pos:start="83:16" pos:end="83:59">(<argument pos:start="83:17" pos:end="83:27"><expr pos:start="83:17" pos:end="83:27"><name pos:start="83:17" pos:end="83:27"><name pos:start="83:17" pos:end="83:18">ad</name><operator pos:start="83:19" pos:end="83:20">-&gt;</operator><name pos:start="83:21" pos:end="83:27">port_no</name></name></expr></argument>, <argument pos:start="83:30" pos:end="83:58"><expr pos:start="83:30" pos:end="83:58"><literal type="string" pos:start="83:30" pos:end="83:58">"mapped less than expected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:15"><expr pos:start="85:9" pos:end="85:14"><name pos:start="85:9" pos:end="85:9">r</name> <operator pos:start="85:11" pos:end="85:11">=</operator> <operator pos:start="85:13" pos:end="85:13">-</operator><literal type="number" pos:start="85:14" pos:end="85:14">1</literal></expr>;</expr_stmt>

        <goto pos:start="87:9" pos:end="87:17">goto <name pos:start="87:14" pos:end="87:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="93:5" pos:end="93:65">/* Get entries in the PRDT, init a qemu sglist accordingly */</comment>

    <if_stmt pos:start="95:5" pos:end="171:5"><if pos:start="95:5" pos:end="171:5">if <condition pos:start="95:8" pos:end="95:18">(<expr pos:start="95:9" pos:end="95:17"><name pos:start="95:9" pos:end="95:13">prdtl</name> <operator pos:start="95:15" pos:end="95:15">&gt;</operator> <literal type="number" pos:start="95:17" pos:end="95:17">0</literal></expr>)</condition> <block pos:start="95:20" pos:end="171:5">{<block_content pos:start="97:9" pos:end="169:9">

        <decl_stmt pos:start="97:9" pos:end="97:39"><decl pos:start="97:9" pos:end="97:38"><type pos:start="97:9" pos:end="97:17"><name pos:start="97:9" pos:end="97:15">AHCI_SG</name> <modifier pos:start="97:17" pos:end="97:17">*</modifier></type><name pos:start="97:18" pos:end="97:20">tbl</name> <init pos:start="97:22" pos:end="97:38">= <expr pos:start="97:24" pos:end="97:38"><operator pos:start="97:24" pos:end="97:24">(</operator><name pos:start="97:25" pos:end="97:31">AHCI_SG</name> <operator pos:start="97:33" pos:end="97:33">*</operator><operator pos:start="97:34" pos:end="97:34">)</operator><name pos:start="97:35" pos:end="97:38">prdt</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:16"><expr pos:start="99:9" pos:end="99:15"><name pos:start="99:9" pos:end="99:11">sum</name> <operator pos:start="99:13" pos:end="99:13">=</operator> <literal type="number" pos:start="99:15" pos:end="99:15">0</literal></expr>;</expr_stmt>

        <for pos:start="101:9" pos:end="119:9">for <control pos:start="101:13" pos:end="101:35">(<init pos:start="101:14" pos:end="101:19"><expr pos:start="101:14" pos:end="101:18"><name pos:start="101:14" pos:end="101:14">i</name> <operator pos:start="101:16" pos:end="101:16">=</operator> <literal type="number" pos:start="101:18" pos:end="101:18">0</literal></expr>;</init> <condition pos:start="101:21" pos:end="101:30"><expr pos:start="101:21" pos:end="101:29"><name pos:start="101:21" pos:end="101:21">i</name> <operator pos:start="101:23" pos:end="101:23">&lt;</operator> <name pos:start="101:25" pos:end="101:29">prdtl</name></expr>;</condition> <incr pos:start="101:32" pos:end="101:34"><expr pos:start="101:32" pos:end="101:34"><name pos:start="101:32" pos:end="101:32">i</name><operator pos:start="101:33" pos:end="101:34">++</operator></expr></incr>)</control> <block pos:start="101:37" pos:end="119:9">{<block_content pos:start="105:13" pos:end="117:34">

            <comment type="block" pos:start="103:13" pos:end="103:42">/* flags_size is zero-based */</comment>

            <expr_stmt pos:start="105:13" pos:end="105:58"><expr pos:start="105:13" pos:end="105:57"><name pos:start="105:13" pos:end="105:26">tbl_entry_size</name> <operator pos:start="105:28" pos:end="105:28">=</operator> <call pos:start="105:30" pos:end="105:57"><name pos:start="105:30" pos:end="105:48">prdt_tbl_entry_size</name><argument_list pos:start="105:49" pos:end="105:57">(<argument pos:start="105:50" pos:end="105:56"><expr pos:start="105:50" pos:end="105:56"><operator pos:start="105:50" pos:end="105:50">&amp;</operator><name pos:start="105:51" pos:end="105:56"><name pos:start="105:51" pos:end="105:53">tbl</name><index pos:start="105:54" pos:end="105:56">[<expr pos:start="105:55" pos:end="105:55"><name pos:start="105:55" pos:end="105:55">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="107:13" pos:end="115:13"><if pos:start="107:13" pos:end="115:13">if <condition pos:start="107:16" pos:end="107:49">(<expr pos:start="107:17" pos:end="107:48"><name pos:start="107:17" pos:end="107:22">offset</name> <operator pos:start="107:24" pos:end="107:25">&lt;=</operator> <operator pos:start="107:27" pos:end="107:27">(</operator><name pos:start="107:28" pos:end="107:30">sum</name> <operator pos:start="107:32" pos:end="107:32">+</operator> <name pos:start="107:34" pos:end="107:47">tbl_entry_size</name><operator pos:start="107:48" pos:end="107:48">)</operator></expr>)</condition> <block pos:start="107:51" pos:end="115:13">{<block_content pos:start="109:17" pos:end="113:22">

                <expr_stmt pos:start="109:17" pos:end="109:28"><expr pos:start="109:17" pos:end="109:27"><name pos:start="109:17" pos:end="109:23">off_idx</name> <operator pos:start="109:25" pos:end="109:25">=</operator> <name pos:start="109:27" pos:end="109:27">i</name></expr>;</expr_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:39"><expr pos:start="111:17" pos:end="111:38"><name pos:start="111:17" pos:end="111:23">off_pos</name> <operator pos:start="111:25" pos:end="111:25">=</operator> <name pos:start="111:27" pos:end="111:32">offset</name> <operator pos:start="111:34" pos:end="111:34">-</operator> <name pos:start="111:36" pos:end="111:38">sum</name></expr>;</expr_stmt>

                <break pos:start="113:17" pos:end="113:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:34"><expr pos:start="117:13" pos:end="117:33"><name pos:start="117:13" pos:end="117:15">sum</name> <operator pos:start="117:17" pos:end="117:18">+=</operator> <name pos:start="117:20" pos:end="117:33">tbl_entry_size</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="121:9" pos:end="133:9"><if pos:start="121:9" pos:end="133:9">if <condition pos:start="121:12" pos:end="121:75">(<expr pos:start="121:13" pos:end="121:74"><operator pos:start="121:13" pos:end="121:13">(</operator><name pos:start="121:14" pos:end="121:20">off_idx</name> <operator pos:start="121:22" pos:end="121:23">==</operator> <operator pos:start="121:25" pos:end="121:25">-</operator><literal type="number" pos:start="121:26" pos:end="121:26">1</literal><operator pos:start="121:27" pos:end="121:27">)</operator> <operator pos:start="121:29" pos:end="121:30">||</operator> <operator pos:start="121:32" pos:end="121:32">(</operator><name pos:start="121:33" pos:end="121:39">off_pos</name> <operator pos:start="121:41" pos:end="121:41">&lt;</operator> <literal type="number" pos:start="121:43" pos:end="121:43">0</literal><operator pos:start="121:44" pos:end="121:44">)</operator> <operator pos:start="121:46" pos:end="121:47">||</operator> <operator pos:start="121:49" pos:end="121:49">(</operator><name pos:start="121:50" pos:end="121:56">off_pos</name> <operator pos:start="121:58" pos:end="121:58">&gt;</operator> <name pos:start="121:60" pos:end="121:73">tbl_entry_size</name><operator pos:start="121:74" pos:end="121:74">)</operator></expr>)</condition> <block pos:start="121:77" pos:end="133:9">{<block_content pos:start="123:13" pos:end="131:21">

            <expr_stmt pos:start="123:13" pos:end="127:56"><expr pos:start="123:13" pos:end="127:55"><call pos:start="123:13" pos:end="127:55"><name pos:start="123:13" pos:end="123:19">DPRINTF</name><argument_list pos:start="123:20" pos:end="127:55">(<argument pos:start="123:21" pos:end="123:31"><expr pos:start="123:21" pos:end="123:31"><name pos:start="123:21" pos:end="123:31"><name pos:start="123:21" pos:end="123:22">ad</name><operator pos:start="123:23" pos:end="123:24">-&gt;</operator><name pos:start="123:25" pos:end="123:31">port_no</name></name></expr></argument>, <argument pos:start="123:34" pos:end="125:63"><expr pos:start="123:34" pos:end="125:63"><literal type="string" pos:start="123:34" pos:end="123:57">"%s: Incorrect offset! "</literal>

                            <literal type="string" pos:start="125:29" pos:end="125:53">"off_idx: %d, off_pos: %"</literal><name pos:start="125:54" pos:end="125:59">PRId64</name><literal type="string" pos:start="125:60" pos:end="125:63">"\n"</literal></expr></argument>,

                            <argument pos:start="127:29" pos:end="127:36"><expr pos:start="127:29" pos:end="127:36"><name pos:start="127:29" pos:end="127:36">__func__</name></expr></argument>, <argument pos:start="127:39" pos:end="127:45"><expr pos:start="127:39" pos:end="127:45"><name pos:start="127:39" pos:end="127:45">off_idx</name></expr></argument>, <argument pos:start="127:48" pos:end="127:54"><expr pos:start="127:48" pos:end="127:54"><name pos:start="127:48" pos:end="127:54">off_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:19"><expr pos:start="129:13" pos:end="129:18"><name pos:start="129:13" pos:end="129:13">r</name> <operator pos:start="129:15" pos:end="129:15">=</operator> <operator pos:start="129:17" pos:end="129:17">-</operator><literal type="number" pos:start="129:18" pos:end="129:18">1</literal></expr>;</expr_stmt>

            <goto pos:start="131:13" pos:end="131:21">goto <name pos:start="131:18" pos:end="131:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="137:9" pos:end="139:38"><expr pos:start="137:9" pos:end="139:37"><call pos:start="137:9" pos:end="139:37"><name pos:start="137:9" pos:end="137:24">qemu_sglist_init</name><argument_list pos:start="137:25" pos:end="139:37">(<argument pos:start="137:26" pos:end="137:31"><expr pos:start="137:26" pos:end="137:31"><name pos:start="137:26" pos:end="137:31">sglist</name></expr></argument>, <argument pos:start="137:34" pos:end="137:45"><expr pos:start="137:34" pos:end="137:45"><name pos:start="137:34" pos:end="137:45"><name pos:start="137:34" pos:end="137:37">qbus</name><operator pos:start="137:38" pos:end="137:39">-&gt;</operator><name pos:start="137:40" pos:end="137:45">parent</name></name></expr></argument>, <argument pos:start="137:48" pos:end="137:64"><expr pos:start="137:48" pos:end="137:64"><operator pos:start="137:48" pos:end="137:48">(</operator><name pos:start="137:49" pos:end="137:53">prdtl</name> <operator pos:start="137:55" pos:end="137:55">-</operator> <name pos:start="137:57" pos:end="137:63">off_idx</name><operator pos:start="137:64" pos:end="137:64">)</operator></expr></argument>,

                         <argument pos:start="139:26" pos:end="139:36"><expr pos:start="139:26" pos:end="139:36"><name pos:start="139:26" pos:end="139:36"><name pos:start="139:26" pos:end="139:27">ad</name><operator pos:start="139:28" pos:end="139:29">-&gt;</operator><name pos:start="139:30" pos:end="139:32">hba</name><operator pos:start="139:33" pos:end="139:34">-&gt;</operator><name pos:start="139:35" pos:end="139:36">as</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="143:70"><expr pos:start="141:9" pos:end="143:69"><call pos:start="141:9" pos:end="143:69"><name pos:start="141:9" pos:end="141:23">qemu_sglist_add</name><argument_list pos:start="141:24" pos:end="143:69">(<argument pos:start="141:25" pos:end="141:30"><expr pos:start="141:25" pos:end="141:30"><name pos:start="141:25" pos:end="141:30">sglist</name></expr></argument>, <argument pos:start="141:33" pos:end="141:72"><expr pos:start="141:33" pos:end="141:72"><call pos:start="141:33" pos:end="141:62"><name pos:start="141:33" pos:end="141:43">le64_to_cpu</name><argument_list pos:start="141:44" pos:end="141:62">(<argument pos:start="141:45" pos:end="141:61"><expr pos:start="141:45" pos:end="141:61"><name pos:start="141:45" pos:end="141:56"><name pos:start="141:45" pos:end="141:47">tbl</name><index pos:start="141:48" pos:end="141:56">[<expr pos:start="141:49" pos:end="141:55"><name pos:start="141:49" pos:end="141:55">off_idx</name></expr>]</index></name><operator pos:start="141:57" pos:end="141:57">.</operator><name pos:start="141:58" pos:end="141:61">addr</name></expr></argument>)</argument_list></call> <operator pos:start="141:64" pos:end="141:64">+</operator> <name pos:start="141:66" pos:end="141:72">off_pos</name></expr></argument>,

                        <argument pos:start="143:25" pos:end="143:68"><expr pos:start="143:25" pos:end="143:68"><call pos:start="143:25" pos:end="143:58"><name pos:start="143:25" pos:end="143:43">prdt_tbl_entry_size</name><argument_list pos:start="143:44" pos:end="143:58">(<argument pos:start="143:45" pos:end="143:57"><expr pos:start="143:45" pos:end="143:57"><operator pos:start="143:45" pos:end="143:45">&amp;</operator><name pos:start="143:46" pos:end="143:57"><name pos:start="143:46" pos:end="143:48">tbl</name><index pos:start="143:49" pos:end="143:57">[<expr pos:start="143:50" pos:end="143:56"><name pos:start="143:50" pos:end="143:56">off_idx</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="143:60" pos:end="143:60">-</operator> <name pos:start="143:62" pos:end="143:68">off_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="147:9" pos:end="169:9">for <control pos:start="147:13" pos:end="147:45">(<init pos:start="147:14" pos:end="147:29"><expr pos:start="147:14" pos:end="147:28"><name pos:start="147:14" pos:end="147:14">i</name> <operator pos:start="147:16" pos:end="147:16">=</operator> <name pos:start="147:18" pos:end="147:24">off_idx</name> <operator pos:start="147:26" pos:end="147:26">+</operator> <literal type="number" pos:start="147:28" pos:end="147:28">1</literal></expr>;</init> <condition pos:start="147:31" pos:end="147:40"><expr pos:start="147:31" pos:end="147:39"><name pos:start="147:31" pos:end="147:31">i</name> <operator pos:start="147:33" pos:end="147:33">&lt;</operator> <name pos:start="147:35" pos:end="147:39">prdtl</name></expr>;</condition> <incr pos:start="147:42" pos:end="147:44"><expr pos:start="147:42" pos:end="147:44"><name pos:start="147:42" pos:end="147:42">i</name><operator pos:start="147:43" pos:end="147:44">++</operator></expr></incr>)</control> <block pos:start="147:47" pos:end="169:9">{<block_content pos:start="151:13" pos:end="167:13">

            <comment type="block" pos:start="149:13" pos:end="149:42">/* flags_size is zero-based */</comment>

            <expr_stmt pos:start="151:13" pos:end="153:58"><expr pos:start="151:13" pos:end="153:57"><call pos:start="151:13" pos:end="153:57"><name pos:start="151:13" pos:end="151:27">qemu_sglist_add</name><argument_list pos:start="151:28" pos:end="153:57">(<argument pos:start="151:29" pos:end="151:34"><expr pos:start="151:29" pos:end="151:34"><name pos:start="151:29" pos:end="151:34">sglist</name></expr></argument>, <argument pos:start="151:37" pos:end="151:60"><expr pos:start="151:37" pos:end="151:60"><call pos:start="151:37" pos:end="151:60"><name pos:start="151:37" pos:end="151:47">le64_to_cpu</name><argument_list pos:start="151:48" pos:end="151:60">(<argument pos:start="151:49" pos:end="151:59"><expr pos:start="151:49" pos:end="151:59"><name pos:start="151:49" pos:end="151:54"><name pos:start="151:49" pos:end="151:51">tbl</name><index pos:start="151:52" pos:end="151:54">[<expr pos:start="151:53" pos:end="151:53"><name pos:start="151:53" pos:end="151:53">i</name></expr>]</index></name><operator pos:start="151:55" pos:end="151:55">.</operator><name pos:start="151:56" pos:end="151:59">addr</name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="153:29" pos:end="153:56"><expr pos:start="153:29" pos:end="153:56"><call pos:start="153:29" pos:end="153:56"><name pos:start="153:29" pos:end="153:47">prdt_tbl_entry_size</name><argument_list pos:start="153:48" pos:end="153:56">(<argument pos:start="153:49" pos:end="153:55"><expr pos:start="153:49" pos:end="153:55"><operator pos:start="153:49" pos:end="153:49">&amp;</operator><name pos:start="153:50" pos:end="153:55"><name pos:start="153:50" pos:end="153:52">tbl</name><index pos:start="153:53" pos:end="153:55">[<expr pos:start="153:54" pos:end="153:54"><name pos:start="153:54" pos:end="153:54">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="155:13" pos:end="167:13"><if pos:start="155:13" pos:end="167:13">if <condition pos:start="155:16" pos:end="155:41">(<expr pos:start="155:17" pos:end="155:40"><name pos:start="155:17" pos:end="155:28"><name pos:start="155:17" pos:end="155:22">sglist</name><operator pos:start="155:23" pos:end="155:24">-&gt;</operator><name pos:start="155:25" pos:end="155:28">size</name></name> <operator pos:start="155:30" pos:end="155:30">&gt;</operator> <name pos:start="155:32" pos:end="155:40">INT32_MAX</name></expr>)</condition> <block pos:start="155:43" pos:end="167:13">{<block_content pos:start="157:17" pos:end="165:25">

                <expr_stmt pos:start="157:17" pos:end="159:51"><expr pos:start="157:17" pos:end="159:50"><call pos:start="157:17" pos:end="159:50"><name pos:start="157:17" pos:end="157:28">error_report</name><argument_list pos:start="157:29" pos:end="159:50">(<argument pos:start="157:30" pos:end="159:49"><expr pos:start="157:30" pos:end="159:49"><literal type="string" pos:start="157:30" pos:end="157:79">"AHCI Physical Region Descriptor Table describes "</literal>

                             <literal type="string" pos:start="159:30" pos:end="159:49">"more than 2 GiB.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="161:17" pos:end="161:44"><expr pos:start="161:17" pos:end="161:43"><call pos:start="161:17" pos:end="161:43"><name pos:start="161:17" pos:end="161:35">qemu_sglist_destroy</name><argument_list pos:start="161:36" pos:end="161:43">(<argument pos:start="161:37" pos:end="161:42"><expr pos:start="161:37" pos:end="161:42"><name pos:start="161:37" pos:end="161:42">sglist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="163:17" pos:end="163:23"><expr pos:start="163:17" pos:end="163:22"><name pos:start="163:17" pos:end="163:17">r</name> <operator pos:start="163:19" pos:end="163:19">=</operator> <operator pos:start="163:21" pos:end="163:21">-</operator><literal type="number" pos:start="163:22" pos:end="163:22">1</literal></expr>;</expr_stmt>

                <goto pos:start="165:17" pos:end="165:25">goto <name pos:start="165:22" pos:end="165:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



<label pos:start="175:1" pos:end="175:4"><name pos:start="175:1" pos:end="175:3">out</name>:</label>

    <expr_stmt pos:start="177:5" pos:end="179:56"><expr pos:start="177:5" pos:end="179:55"><call pos:start="177:5" pos:end="179:55"><name pos:start="177:5" pos:end="177:20">dma_memory_unmap</name><argument_list pos:start="177:21" pos:end="179:55">(<argument pos:start="177:22" pos:end="177:32"><expr pos:start="177:22" pos:end="177:32"><name pos:start="177:22" pos:end="177:32"><name pos:start="177:22" pos:end="177:23">ad</name><operator pos:start="177:24" pos:end="177:25">-&gt;</operator><name pos:start="177:26" pos:end="177:28">hba</name><operator pos:start="177:29" pos:end="177:30">-&gt;</operator><name pos:start="177:31" pos:end="177:32">as</name></name></expr></argument>, <argument pos:start="177:35" pos:end="177:38"><expr pos:start="177:35" pos:end="177:38"><name pos:start="177:35" pos:end="177:38">prdt</name></expr></argument>, <argument pos:start="177:41" pos:end="177:48"><expr pos:start="177:41" pos:end="177:48"><name pos:start="177:41" pos:end="177:48">prdt_len</name></expr></argument>,

                     <argument pos:start="179:22" pos:end="179:44"><expr pos:start="179:22" pos:end="179:44"><name pos:start="179:22" pos:end="179:44">DMA_DIRECTION_TO_DEVICE</name></expr></argument>, <argument pos:start="179:47" pos:end="179:54"><expr pos:start="179:47" pos:end="179:54"><name pos:start="179:47" pos:end="179:54">prdt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="181:5" pos:end="181:13">return <expr pos:start="181:12" pos:end="181:12"><name pos:start="181:12" pos:end="181:12">r</name></expr>;</return>

</block_content>}</block></function>
</unit>
