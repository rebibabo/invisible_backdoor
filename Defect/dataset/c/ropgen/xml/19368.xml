<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19368.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <name pos:start="1:13" pos:end="1:24">coroutine_fn</name></type> <name pos:start="1:26" pos:end="1:54">wait_for_overlapping_requests</name><parameter_list pos:start="1:55" pos:end="3:69">(<parameter pos:start="1:56" pos:end="1:75"><decl pos:start="1:56" pos:end="1:75"><type pos:start="1:56" pos:end="1:75"><name pos:start="1:56" pos:end="1:71">BlockDriverState</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:75">bs</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:32"><decl pos:start="3:9" pos:end="3:32"><type pos:start="3:9" pos:end="3:32"><name pos:start="3:9" pos:end="3:26">BdrvTrackedRequest</name> <modifier pos:start="3:28" pos:end="3:28">*</modifier></type><name pos:start="3:29" pos:end="3:32">self</name></decl></parameter>, <parameter pos:start="3:35" pos:end="3:48"><decl pos:start="3:35" pos:end="3:48"><type pos:start="3:35" pos:end="3:48"><name pos:start="3:35" pos:end="3:41">int64_t</name></type> <name pos:start="3:43" pos:end="3:48">offset</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:68"><decl pos:start="3:51" pos:end="3:68"><type pos:start="3:51" pos:end="3:68"><name pos:start="3:51" pos:end="3:58">unsigned</name> <name pos:start="3:60" pos:end="3:62">int</name></type> <name pos:start="3:64" pos:end="3:68">bytes</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="71:1">{<block_content pos:start="7:5" pos:end="69:20">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">BdrvTrackedRequest</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:27">req</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:26">cluster_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:30">cluster_bytes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">bool</name></type> <name pos:start="13:10" pos:end="13:14">retry</name></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="27:7">/* If we touch the same cluster it counts as an overlap.  This guarantees

     * that allocating writes will be serialized and not race with each other

     * for the same cluster.  For example, in copy-on-read it ensures that the

     * CoR read and write operations are atomic and guest writes cannot

     * interleave between them.

     */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:80"><expr pos:start="29:5" pos:end="29:79"><call pos:start="29:5" pos:end="29:79"><name pos:start="29:5" pos:end="29:27">round_bytes_to_clusters</name><argument_list pos:start="29:28" pos:end="29:79">(<argument pos:start="29:29" pos:end="29:30"><expr pos:start="29:29" pos:end="29:30"><name pos:start="29:29" pos:end="29:30">bs</name></expr></argument>, <argument pos:start="29:33" pos:end="29:38"><expr pos:start="29:33" pos:end="29:38"><name pos:start="29:33" pos:end="29:38">offset</name></expr></argument>, <argument pos:start="29:41" pos:end="29:45"><expr pos:start="29:41" pos:end="29:45"><name pos:start="29:41" pos:end="29:45">bytes</name></expr></argument>, <argument pos:start="29:48" pos:end="29:62"><expr pos:start="29:48" pos:end="29:62"><operator pos:start="29:48" pos:end="29:48">&amp;</operator><name pos:start="29:49" pos:end="29:62">cluster_offset</name></expr></argument>, <argument pos:start="29:65" pos:end="29:78"><expr pos:start="29:65" pos:end="29:78"><operator pos:start="29:65" pos:end="29:65">&amp;</operator><name pos:start="29:66" pos:end="29:78">cluster_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <do pos:start="33:5" pos:end="69:20">do <block pos:start="33:8" pos:end="69:5">{<block_content pos:start="35:9" pos:end="67:9">

        <expr_stmt pos:start="35:9" pos:end="35:22"><expr pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:13">retry</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <name pos:start="35:17" pos:end="35:21">false</name></expr>;</expr_stmt>

        <macro pos:start="37:9" pos:end="37:55"><name pos:start="37:9" pos:end="37:21">QLIST_FOREACH</name><argument_list pos:start="37:22" pos:end="37:55">(<argument pos:start="37:23" pos:end="37:25">req</argument>, <argument pos:start="37:28" pos:end="37:48">&amp;bs-&gt;tracked_requests</argument>, <argument pos:start="37:51" pos:end="37:54">list</argument>)</argument_list></macro> <block pos:start="37:57" pos:end="67:9">{<block_content pos:start="39:13" pos:end="65:13">

            <if_stmt pos:start="39:13" pos:end="43:13"><if pos:start="39:13" pos:end="43:13">if <condition pos:start="39:16" pos:end="39:28">(<expr pos:start="39:17" pos:end="39:27"><name pos:start="39:17" pos:end="39:19">req</name> <operator pos:start="39:21" pos:end="39:22">==</operator> <name pos:start="39:24" pos:end="39:27">self</name></expr>)</condition> <block pos:start="39:30" pos:end="43:13">{<block_content pos:start="41:17" pos:end="41:25">

                <continue pos:start="41:17" pos:end="41:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="45:13" pos:end="65:13"><if pos:start="45:13" pos:end="65:13">if <condition pos:start="45:16" pos:end="45:77">(<expr pos:start="45:17" pos:end="45:76"><call pos:start="45:17" pos:end="45:76"><name pos:start="45:17" pos:end="45:40">tracked_request_overlaps</name><argument_list pos:start="45:41" pos:end="45:76">(<argument pos:start="45:42" pos:end="45:44"><expr pos:start="45:42" pos:end="45:44"><name pos:start="45:42" pos:end="45:44">req</name></expr></argument>, <argument pos:start="45:47" pos:end="45:60"><expr pos:start="45:47" pos:end="45:60"><name pos:start="45:47" pos:end="45:60">cluster_offset</name></expr></argument>, <argument pos:start="45:63" pos:end="45:75"><expr pos:start="45:63" pos:end="45:75"><name pos:start="45:63" pos:end="45:75">cluster_bytes</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:79" pos:end="65:13">{<block_content pos:start="55:17" pos:end="63:22">

                <comment type="block" pos:start="47:17" pos:end="53:19">/* Hitting this means there was a reentrant request, for

                 * example, a block driver issuing nested requests.  This must

                 * never happen since it means deadlock.

                 */</comment>

                <expr_stmt pos:start="55:17" pos:end="55:57"><expr pos:start="55:17" pos:end="55:56"><call pos:start="55:17" pos:end="55:56"><name pos:start="55:17" pos:end="55:22">assert</name><argument_list pos:start="55:23" pos:end="55:56">(<argument pos:start="55:24" pos:end="55:55"><expr pos:start="55:24" pos:end="55:55"><call pos:start="55:24" pos:end="55:44"><name pos:start="55:24" pos:end="55:42">qemu_coroutine_self</name><argument_list pos:start="55:43" pos:end="55:44">()</argument_list></call> <operator pos:start="55:46" pos:end="55:47">!=</operator> <name pos:start="55:49" pos:end="55:55"><name pos:start="55:49" pos:end="55:51">req</name><operator pos:start="55:52" pos:end="55:53">-&gt;</operator><name pos:start="55:54" pos:end="55:55">co</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="59:17" pos:end="59:53"><expr pos:start="59:17" pos:end="59:52"><call pos:start="59:17" pos:end="59:52"><name pos:start="59:17" pos:end="59:34">qemu_co_queue_wait</name><argument_list pos:start="59:35" pos:end="59:52">(<argument pos:start="59:36" pos:end="59:51"><expr pos:start="59:36" pos:end="59:51"><operator pos:start="59:36" pos:end="59:36">&amp;</operator><name pos:start="59:37" pos:end="59:51"><name pos:start="59:37" pos:end="59:39">req</name><operator pos:start="59:40" pos:end="59:41">-&gt;</operator><name pos:start="59:42" pos:end="59:51">wait_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="61:17" pos:end="61:29"><expr pos:start="61:17" pos:end="61:28"><name pos:start="61:17" pos:end="61:21">retry</name> <operator pos:start="61:23" pos:end="61:23">=</operator> <name pos:start="61:25" pos:end="61:28">true</name></expr>;</expr_stmt>

                <break pos:start="63:17" pos:end="63:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

    </block_content>}</block> while <condition pos:start="69:13" pos:end="69:19">(<expr pos:start="69:14" pos:end="69:18"><name pos:start="69:14" pos:end="69:18">retry</name></expr>)</condition>;</do>

</block_content>}</block></function>
</unit>
