<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10689.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:22"><name pos:start="1:1" pos:end="1:13">print_ipc_cmd</name><argument_list pos:start="1:14" pos:end="1:22">(<argument pos:start="1:15" pos:end="1:21">int cmd</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="17:5" pos:end="93:23">

<cpp:define pos:start="5:1" pos:end="13:1">#<cpp:directive pos:start="5:2" pos:end="5:7">define</cpp:directive> <cpp:macro pos:start="5:9" pos:end="5:23"><name pos:start="5:9" pos:end="5:18">output_cmd</name><parameter_list pos:start="5:19" pos:end="5:23">(<parameter pos:start="5:20" pos:end="5:22"><type pos:start="5:20" pos:end="5:22"><name pos:start="5:20" pos:end="5:22">val</name></type></parameter>)</parameter_list></cpp:macro> \

<cpp:value pos:start="7:1" pos:end="13:1">if( cmd == val ) { \

    gemu_log(#val); \

    return; \

}</cpp:value></cpp:define>



    <expr_stmt pos:start="17:5" pos:end="17:16"><expr pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:7">cmd</name> <operator pos:start="17:9" pos:end="17:10">&amp;=</operator> <literal type="number" pos:start="17:12" pos:end="17:15">0xff</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:30">/* General IPC commands */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:27"><expr pos:start="23:5" pos:end="23:26"><call pos:start="23:5" pos:end="23:26"><name pos:start="23:5" pos:end="23:14">output_cmd</name><argument_list pos:start="23:15" pos:end="23:26">( <argument pos:start="23:17" pos:end="23:24"><expr pos:start="23:17" pos:end="23:24"><name pos:start="23:17" pos:end="23:24">IPC_RMID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:26"><expr pos:start="25:5" pos:end="25:25"><call pos:start="25:5" pos:end="25:25"><name pos:start="25:5" pos:end="25:14">output_cmd</name><argument_list pos:start="25:15" pos:end="25:25">( <argument pos:start="25:17" pos:end="25:23"><expr pos:start="25:17" pos:end="25:23"><name pos:start="25:17" pos:end="25:23">IPC_SET</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:27"><expr pos:start="27:5" pos:end="27:26"><call pos:start="27:5" pos:end="27:26"><name pos:start="27:5" pos:end="27:14">output_cmd</name><argument_list pos:start="27:15" pos:end="27:26">( <argument pos:start="27:17" pos:end="27:24"><expr pos:start="27:17" pos:end="27:24"><name pos:start="27:17" pos:end="27:24">IPC_STAT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="34:0"><expr pos:start="29:5" pos:end="29:26"><call pos:start="29:5" pos:end="29:26"><name pos:start="29:5" pos:end="29:14">output_cmd</name><argument_list pos:start="29:15" pos:end="29:26">( <argument pos:start="29:17" pos:end="29:24"><expr pos:start="29:17" pos:end="29:24"><name pos:start="29:17" pos:end="29:24">IPC_INFO</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="31:5" pos:end="31:27">/* msgctl() commands */</comment>

    <cpp:ifdef pos:start="33:5" pos:end="33:22">#<cpp:directive pos:start="33:6" pos:end="33:10">ifdef</cpp:directive> <name pos:start="33:12" pos:end="33:22">__USER_MISC</name></cpp:ifdef>

    <expr_stmt pos:start="35:5" pos:end="35:27"><expr pos:start="35:5" pos:end="35:26"><call pos:start="35:5" pos:end="35:26"><name pos:start="35:5" pos:end="35:14">output_cmd</name><argument_list pos:start="35:15" pos:end="35:26">( <argument pos:start="35:17" pos:end="35:24"><expr pos:start="35:17" pos:end="35:24"><name pos:start="35:17" pos:end="35:24">MSG_STAT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="40:0"><expr pos:start="37:5" pos:end="37:26"><call pos:start="37:5" pos:end="37:26"><name pos:start="37:5" pos:end="37:14">output_cmd</name><argument_list pos:start="37:15" pos:end="37:26">( <argument pos:start="37:17" pos:end="37:24"><expr pos:start="37:17" pos:end="37:24"><name pos:start="37:17" pos:end="37:24">MSG_INFO</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <cpp:endif pos:start="39:5" pos:end="39:10">#<cpp:directive pos:start="39:6" pos:end="39:10">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="41:5" pos:end="41:27">/* shmctl() commands */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:27"><expr pos:start="43:5" pos:end="43:26"><call pos:start="43:5" pos:end="43:26"><name pos:start="43:5" pos:end="43:14">output_cmd</name><argument_list pos:start="43:15" pos:end="43:26">( <argument pos:start="43:17" pos:end="43:24"><expr pos:start="43:17" pos:end="43:24"><name pos:start="43:17" pos:end="43:24">SHM_LOCK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:29"><expr pos:start="45:5" pos:end="45:28"><call pos:start="45:5" pos:end="45:28"><name pos:start="45:5" pos:end="45:14">output_cmd</name><argument_list pos:start="45:15" pos:end="45:28">( <argument pos:start="45:17" pos:end="45:26"><expr pos:start="45:17" pos:end="45:26"><name pos:start="45:17" pos:end="45:26">SHM_UNLOCK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:27"><expr pos:start="47:5" pos:end="47:26"><call pos:start="47:5" pos:end="47:26"><name pos:start="47:5" pos:end="47:14">output_cmd</name><argument_list pos:start="47:15" pos:end="47:26">( <argument pos:start="47:17" pos:end="47:24"><expr pos:start="47:17" pos:end="47:24"><name pos:start="47:17" pos:end="47:24">SHM_STAT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:27"><expr pos:start="49:5" pos:end="49:26"><call pos:start="49:5" pos:end="49:26"><name pos:start="49:5" pos:end="49:14">output_cmd</name><argument_list pos:start="49:15" pos:end="49:26">( <argument pos:start="49:17" pos:end="49:24"><expr pos:start="49:17" pos:end="49:24"><name pos:start="49:17" pos:end="49:24">SHM_INFO</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="51:5" pos:end="51:27">/* semctl() commands */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:25"><expr pos:start="53:5" pos:end="53:24"><call pos:start="53:5" pos:end="53:24"><name pos:start="53:5" pos:end="53:14">output_cmd</name><argument_list pos:start="53:15" pos:end="53:24">( <argument pos:start="53:17" pos:end="53:22"><expr pos:start="53:17" pos:end="53:22"><name pos:start="53:17" pos:end="53:22">GETPID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:25"><expr pos:start="55:5" pos:end="55:24"><call pos:start="55:5" pos:end="55:24"><name pos:start="55:5" pos:end="55:14">output_cmd</name><argument_list pos:start="55:15" pos:end="55:24">( <argument pos:start="55:17" pos:end="55:22"><expr pos:start="55:17" pos:end="55:22"><name pos:start="55:17" pos:end="55:22">GETVAL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:25"><expr pos:start="57:5" pos:end="57:24"><call pos:start="57:5" pos:end="57:24"><name pos:start="57:5" pos:end="57:14">output_cmd</name><argument_list pos:start="57:15" pos:end="57:24">( <argument pos:start="57:17" pos:end="57:22"><expr pos:start="57:17" pos:end="57:22"><name pos:start="57:17" pos:end="57:22">GETALL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:26"><expr pos:start="59:5" pos:end="59:25"><call pos:start="59:5" pos:end="59:25"><name pos:start="59:5" pos:end="59:14">output_cmd</name><argument_list pos:start="59:15" pos:end="59:25">( <argument pos:start="59:17" pos:end="59:23"><expr pos:start="59:17" pos:end="59:23"><name pos:start="59:17" pos:end="59:23">GETNCNT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:26"><expr pos:start="61:5" pos:end="61:25"><call pos:start="61:5" pos:end="61:25"><name pos:start="61:5" pos:end="61:14">output_cmd</name><argument_list pos:start="61:15" pos:end="61:25">( <argument pos:start="61:17" pos:end="61:23"><expr pos:start="61:17" pos:end="61:23"><name pos:start="61:17" pos:end="61:23">GETZCNT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:25"><expr pos:start="63:5" pos:end="63:24"><call pos:start="63:5" pos:end="63:24"><name pos:start="63:5" pos:end="63:14">output_cmd</name><argument_list pos:start="63:15" pos:end="63:24">( <argument pos:start="63:17" pos:end="63:22"><expr pos:start="63:17" pos:end="63:22"><name pos:start="63:17" pos:end="63:22">SETVAL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:25"><expr pos:start="65:5" pos:end="65:24"><call pos:start="65:5" pos:end="65:24"><name pos:start="65:5" pos:end="65:14">output_cmd</name><argument_list pos:start="65:15" pos:end="65:24">( <argument pos:start="65:17" pos:end="65:22"><expr pos:start="65:17" pos:end="65:22"><name pos:start="65:17" pos:end="65:22">SETALL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:27"><expr pos:start="67:5" pos:end="67:26"><call pos:start="67:5" pos:end="67:26"><name pos:start="67:5" pos:end="67:14">output_cmd</name><argument_list pos:start="67:15" pos:end="67:26">( <argument pos:start="67:17" pos:end="67:24"><expr pos:start="67:17" pos:end="67:24"><name pos:start="67:17" pos:end="67:24">SEM_STAT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:27"><expr pos:start="69:5" pos:end="69:26"><call pos:start="69:5" pos:end="69:26"><name pos:start="69:5" pos:end="69:14">output_cmd</name><argument_list pos:start="69:15" pos:end="69:26">( <argument pos:start="69:17" pos:end="69:24"><expr pos:start="69:17" pos:end="69:24"><name pos:start="69:17" pos:end="69:24">SEM_INFO</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:27"><expr pos:start="71:5" pos:end="71:26"><call pos:start="71:5" pos:end="71:26"><name pos:start="71:5" pos:end="71:14">output_cmd</name><argument_list pos:start="71:15" pos:end="71:26">( <argument pos:start="71:17" pos:end="71:24"><expr pos:start="71:17" pos:end="71:24"><name pos:start="71:17" pos:end="71:24">IPC_RMID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:27"><expr pos:start="73:5" pos:end="73:26"><call pos:start="73:5" pos:end="73:26"><name pos:start="73:5" pos:end="73:14">output_cmd</name><argument_list pos:start="73:15" pos:end="73:26">( <argument pos:start="73:17" pos:end="73:24"><expr pos:start="73:17" pos:end="73:24"><name pos:start="73:17" pos:end="73:24">IPC_RMID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:27"><expr pos:start="75:5" pos:end="75:26"><call pos:start="75:5" pos:end="75:26"><name pos:start="75:5" pos:end="75:14">output_cmd</name><argument_list pos:start="75:15" pos:end="75:26">( <argument pos:start="75:17" pos:end="75:24"><expr pos:start="75:17" pos:end="75:24"><name pos:start="75:17" pos:end="75:24">IPC_RMID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:27"><expr pos:start="77:5" pos:end="77:26"><call pos:start="77:5" pos:end="77:26"><name pos:start="77:5" pos:end="77:14">output_cmd</name><argument_list pos:start="77:15" pos:end="77:26">( <argument pos:start="77:17" pos:end="77:24"><expr pos:start="77:17" pos:end="77:24"><name pos:start="77:17" pos:end="77:24">IPC_RMID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:27"><expr pos:start="79:5" pos:end="79:26"><call pos:start="79:5" pos:end="79:26"><name pos:start="79:5" pos:end="79:14">output_cmd</name><argument_list pos:start="79:15" pos:end="79:26">( <argument pos:start="79:17" pos:end="79:24"><expr pos:start="79:17" pos:end="79:24"><name pos:start="79:17" pos:end="79:24">IPC_RMID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:27"><expr pos:start="81:5" pos:end="81:26"><call pos:start="81:5" pos:end="81:26"><name pos:start="81:5" pos:end="81:14">output_cmd</name><argument_list pos:start="81:15" pos:end="81:26">( <argument pos:start="81:17" pos:end="81:24"><expr pos:start="81:17" pos:end="81:24"><name pos:start="81:17" pos:end="81:24">IPC_RMID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:27"><expr pos:start="83:5" pos:end="83:26"><call pos:start="83:5" pos:end="83:26"><name pos:start="83:5" pos:end="83:14">output_cmd</name><argument_list pos:start="83:15" pos:end="83:26">( <argument pos:start="83:17" pos:end="83:24"><expr pos:start="83:17" pos:end="83:24"><name pos:start="83:17" pos:end="83:24">IPC_RMID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:27"><expr pos:start="85:5" pos:end="85:26"><call pos:start="85:5" pos:end="85:26"><name pos:start="85:5" pos:end="85:14">output_cmd</name><argument_list pos:start="85:15" pos:end="85:26">( <argument pos:start="85:17" pos:end="85:24"><expr pos:start="85:17" pos:end="85:24"><name pos:start="85:17" pos:end="85:24">IPC_RMID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:27"><expr pos:start="87:5" pos:end="87:26"><call pos:start="87:5" pos:end="87:26"><name pos:start="87:5" pos:end="87:14">output_cmd</name><argument_list pos:start="87:15" pos:end="87:26">( <argument pos:start="87:17" pos:end="87:24"><expr pos:start="87:17" pos:end="87:24"><name pos:start="87:17" pos:end="87:24">IPC_RMID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:39">/* Some value we don't recognize */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:23"><expr pos:start="93:5" pos:end="93:22"><call pos:start="93:5" pos:end="93:22"><name pos:start="93:5" pos:end="93:12">gemu_log</name><argument_list pos:start="93:13" pos:end="93:22">(<argument pos:start="93:14" pos:end="93:17"><expr pos:start="93:14" pos:end="93:17"><literal type="string" pos:start="93:14" pos:end="93:17">"%d"</literal></expr></argument>,<argument pos:start="93:19" pos:end="93:21"><expr pos:start="93:19" pos:end="93:21"><name pos:start="93:19" pos:end="93:21">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
