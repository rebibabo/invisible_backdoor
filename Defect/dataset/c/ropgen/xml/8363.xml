<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8363.c" pos:tabs="8"><function pos:start="1:1" pos:end="58:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">unix_connect_opts</name><parameter_list pos:start="1:22" pos:end="1:37">(<parameter pos:start="1:23" pos:end="1:36"><decl pos:start="1:23" pos:end="1:36"><type pos:start="1:23" pos:end="1:32"><name pos:start="1:23" pos:end="1:30">QemuOpts</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:36">opts</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="58:1">{<block_content pos:start="5:5" pos:end="56:16">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:22">sockaddr_un</name></name></type> <name pos:start="5:24" pos:end="5:25">un</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:50"><decl pos:start="7:5" pos:end="7:49"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:20">path</name> <init pos:start="7:22" pos:end="7:49">= <expr pos:start="7:24" pos:end="7:49"><call pos:start="7:24" pos:end="7:49"><name pos:start="7:24" pos:end="7:35">qemu_opt_get</name><argument_list pos:start="7:36" pos:end="7:49">(<argument pos:start="7:37" pos:end="7:40"><expr pos:start="7:37" pos:end="7:40"><name pos:start="7:37" pos:end="7:40">opts</name></expr></argument>, <argument pos:start="7:43" pos:end="7:48"><expr pos:start="7:43" pos:end="7:48"><literal type="string" pos:start="7:43" pos:end="7:48">"path"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">sock</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:21">(<expr pos:start="13:9" pos:end="13:20"><name pos:start="13:9" pos:end="13:12">NULL</name> <operator pos:start="13:14" pos:end="13:15">==</operator> <name pos:start="13:17" pos:end="13:20">path</name></expr>)</condition> <block pos:start="13:23" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:18">

        <expr_stmt pos:start="15:9" pos:end="15:61"><expr pos:start="15:9" pos:end="15:60"><call pos:start="15:9" pos:end="15:60"><name pos:start="15:9" pos:end="15:15">fprintf</name><argument_list pos:start="15:16" pos:end="15:60">(<argument pos:start="15:17" pos:end="15:22"><expr pos:start="15:17" pos:end="15:22"><name pos:start="15:17" pos:end="15:22">stderr</name></expr></argument>, <argument pos:start="15:25" pos:end="15:59"><expr pos:start="15:25" pos:end="15:59"><literal type="string" pos:start="15:25" pos:end="15:59">"unix connect: no path specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:18">return <expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:48"><expr pos:start="23:5" pos:end="23:47"><name pos:start="23:5" pos:end="23:8">sock</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <call pos:start="23:12" pos:end="23:47"><name pos:start="23:12" pos:end="23:22">qemu_socket</name><argument_list pos:start="23:23" pos:end="23:47">(<argument pos:start="23:24" pos:end="23:30"><expr pos:start="23:24" pos:end="23:30"><name pos:start="23:24" pos:end="23:30">PF_UNIX</name></expr></argument>, <argument pos:start="23:33" pos:end="23:43"><expr pos:start="23:33" pos:end="23:43"><name pos:start="23:33" pos:end="23:43">SOCK_STREAM</name></expr></argument>, <argument pos:start="23:46" pos:end="23:46"><expr pos:start="23:46" pos:end="23:46"><literal type="number" pos:start="23:46" pos:end="23:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:17">(<expr pos:start="25:9" pos:end="25:16"><name pos:start="25:9" pos:end="25:12">sock</name> <operator pos:start="25:14" pos:end="25:14">&lt;</operator> <literal type="number" pos:start="25:16" pos:end="25:16">0</literal></expr>)</condition> <block pos:start="25:19" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:18">

        <expr_stmt pos:start="27:9" pos:end="27:31"><expr pos:start="27:9" pos:end="27:30"><call pos:start="27:9" pos:end="27:30"><name pos:start="27:9" pos:end="27:14">perror</name><argument_list pos:start="27:15" pos:end="27:30">(<argument pos:start="27:16" pos:end="27:29"><expr pos:start="27:16" pos:end="27:29"><literal type="string" pos:start="27:16" pos:end="27:29">"socket(unix)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:31"><expr pos:start="35:5" pos:end="35:30"><call pos:start="35:5" pos:end="35:30"><name pos:start="35:5" pos:end="35:10">memset</name><argument_list pos:start="35:11" pos:end="35:30">(<argument pos:start="35:12" pos:end="35:14"><expr pos:start="35:12" pos:end="35:14"><operator pos:start="35:12" pos:end="35:12">&amp;</operator><name pos:start="35:13" pos:end="35:14">un</name></expr></argument>, <argument pos:start="35:17" pos:end="35:17"><expr pos:start="35:17" pos:end="35:17"><literal type="number" pos:start="35:17" pos:end="35:17">0</literal></expr></argument>, <argument pos:start="35:20" pos:end="35:29"><expr pos:start="35:20" pos:end="35:29"><sizeof pos:start="35:20" pos:end="35:29">sizeof<argument_list pos:start="35:26" pos:end="35:29">(<argument pos:start="35:27" pos:end="35:28"><expr pos:start="35:27" pos:end="35:28"><name pos:start="35:27" pos:end="35:28">un</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:28"><expr pos:start="37:5" pos:end="37:27"><name pos:start="37:5" pos:end="37:17"><name pos:start="37:5" pos:end="37:6">un</name><operator pos:start="37:7" pos:end="37:7">.</operator><name pos:start="37:8" pos:end="37:17">sun_family</name></name> <operator pos:start="37:19" pos:end="37:19">=</operator> <name pos:start="37:21" pos:end="37:27">AF_UNIX</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:59"><expr pos:start="39:5" pos:end="39:58"><call pos:start="39:5" pos:end="39:58"><name pos:start="39:5" pos:end="39:12">snprintf</name><argument_list pos:start="39:13" pos:end="39:58">(<argument pos:start="39:14" pos:end="39:24"><expr pos:start="39:14" pos:end="39:24"><name pos:start="39:14" pos:end="39:24"><name pos:start="39:14" pos:end="39:15">un</name><operator pos:start="39:16" pos:end="39:16">.</operator><name pos:start="39:17" pos:end="39:24">sun_path</name></name></expr></argument>, <argument pos:start="39:27" pos:end="39:45"><expr pos:start="39:27" pos:end="39:45"><sizeof pos:start="39:27" pos:end="39:45">sizeof<argument_list pos:start="39:33" pos:end="39:45">(<argument pos:start="39:34" pos:end="39:44"><expr pos:start="39:34" pos:end="39:44"><name pos:start="39:34" pos:end="39:44"><name pos:start="39:34" pos:end="39:35">un</name><operator pos:start="39:36" pos:end="39:36">.</operator><name pos:start="39:37" pos:end="39:44">sun_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="39:48" pos:end="39:51"><expr pos:start="39:48" pos:end="39:51"><literal type="string" pos:start="39:48" pos:end="39:51">"%s"</literal></expr></argument>, <argument pos:start="39:54" pos:end="39:57"><expr pos:start="39:54" pos:end="39:57"><name pos:start="39:54" pos:end="39:57">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="48:5"><if pos:start="41:5" pos:end="48:5">if <condition pos:start="41:8" pos:end="41:62">(<expr pos:start="41:9" pos:end="41:61"><call pos:start="41:9" pos:end="41:57"><name pos:start="41:9" pos:end="41:15">connect</name><argument_list pos:start="41:16" pos:end="41:57">(<argument pos:start="41:17" pos:end="41:20"><expr pos:start="41:17" pos:end="41:20"><name pos:start="41:17" pos:end="41:20">sock</name></expr></argument>, <argument pos:start="41:23" pos:end="41:44"><expr pos:start="41:23" pos:end="41:44"><operator pos:start="41:23" pos:end="41:23">(</operator>struct <name pos:start="41:31" pos:end="41:38">sockaddr</name><operator pos:start="41:39" pos:end="41:39">*</operator><operator pos:start="41:40" pos:end="41:40">)</operator> <operator pos:start="41:42" pos:end="41:42">&amp;</operator><name pos:start="41:43" pos:end="41:44">un</name></expr></argument>, <argument pos:start="41:47" pos:end="41:56"><expr pos:start="41:47" pos:end="41:56"><sizeof pos:start="41:47" pos:end="41:56">sizeof<argument_list pos:start="41:53" pos:end="41:56">(<argument pos:start="41:54" pos:end="41:55"><expr pos:start="41:54" pos:end="41:55"><name pos:start="41:54" pos:end="41:55">un</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="41:59" pos:end="41:59">&lt;</operator> <literal type="number" pos:start="41:61" pos:end="41:61">0</literal></expr>)</condition> <block pos:start="41:64" pos:end="48:5">{<block_content pos:start="43:9" pos:end="46:18">

        <expr_stmt pos:start="43:9" pos:end="43:73"><expr pos:start="43:9" pos:end="43:72"><call pos:start="43:9" pos:end="43:72"><name pos:start="43:9" pos:end="43:15">fprintf</name><argument_list pos:start="43:16" pos:end="43:72">(<argument pos:start="43:17" pos:end="43:22"><expr pos:start="43:17" pos:end="43:22"><name pos:start="43:17" pos:end="43:22">stderr</name></expr></argument>, <argument pos:start="43:25" pos:end="43:48"><expr pos:start="43:25" pos:end="43:48"><literal type="string" pos:start="43:25" pos:end="43:48">"connect(unix:%s): %s\n"</literal></expr></argument>, <argument pos:start="43:51" pos:end="43:54"><expr pos:start="43:51" pos:end="43:54"><name pos:start="43:51" pos:end="43:54">path</name></expr></argument>, <argument pos:start="43:57" pos:end="43:71"><expr pos:start="43:57" pos:end="43:71"><call pos:start="43:57" pos:end="43:71"><name pos:start="43:57" pos:end="43:64">strerror</name><argument_list pos:start="43:65" pos:end="43:71">(<argument pos:start="43:66" pos:end="43:70"><expr pos:start="43:66" pos:end="43:70"><name pos:start="43:66" pos:end="43:70">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<return pos:start="46:9" pos:end="46:18">return <expr pos:start="46:16" pos:end="46:17"><operator pos:start="46:16" pos:end="46:16">-</operator><literal type="number" pos:start="46:17" pos:end="46:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="52:5" pos:end="54:56"><if pos:start="52:5" pos:end="54:56">if <condition pos:start="52:8" pos:end="52:22">(<expr pos:start="52:9" pos:end="52:21"><name pos:start="52:9" pos:end="52:21">sockets_debug</name></expr>)</condition><block type="pseudo" pos:start="54:9" pos:end="54:56"><block_content pos:start="54:9" pos:end="54:56">

        <expr_stmt pos:start="54:9" pos:end="54:56"><expr pos:start="54:9" pos:end="54:55"><call pos:start="54:9" pos:end="54:55"><name pos:start="54:9" pos:end="54:15">fprintf</name><argument_list pos:start="54:16" pos:end="54:55">(<argument pos:start="54:17" pos:end="54:22"><expr pos:start="54:17" pos:end="54:22"><name pos:start="54:17" pos:end="54:22">stderr</name></expr></argument>, <argument pos:start="54:25" pos:end="54:48"><expr pos:start="54:25" pos:end="54:48"><literal type="string" pos:start="54:25" pos:end="54:48">"connect(unix:%s): OK\n"</literal></expr></argument>, <argument pos:start="54:51" pos:end="54:54"><expr pos:start="54:51" pos:end="54:54"><name pos:start="54:51" pos:end="54:54">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="56:5" pos:end="56:16">return <expr pos:start="56:12" pos:end="56:15"><name pos:start="56:12" pos:end="56:15">sock</name></expr>;</return>

</block_content>}</block></function></unit>
