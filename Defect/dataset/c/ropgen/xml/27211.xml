<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/27211.c" pos:tabs="8"><function pos:start="1:1" pos:end="415:1"><type pos:start="1:1" pos:end="1:7"><name pos:start="1:1" pos:end="1:7">float64</name></type> <name pos:start="1:9" pos:end="1:22">float64_muladd</name><parameter_list pos:start="1:23" pos:end="1:79">(<parameter pos:start="1:24" pos:end="1:32"><decl pos:start="1:24" pos:end="1:32"><type pos:start="1:24" pos:end="1:32"><name pos:start="1:24" pos:end="1:30">float64</name></type> <name pos:start="1:32" pos:end="1:32">a</name></decl></parameter>, <parameter pos:start="1:35" pos:end="1:43"><decl pos:start="1:35" pos:end="1:43"><type pos:start="1:35" pos:end="1:43"><name pos:start="1:35" pos:end="1:41">float64</name></type> <name pos:start="1:43" pos:end="1:43">b</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:54"><decl pos:start="1:46" pos:end="1:54"><type pos:start="1:46" pos:end="1:54"><name pos:start="1:46" pos:end="1:52">float64</name></type> <name pos:start="1:54" pos:end="1:54">c</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:78"><decl pos:start="1:57" pos:end="1:78"><type pos:start="1:57" pos:end="1:78"><name pos:start="1:57" pos:end="1:59">int</name> <name pos:start="1:61" pos:end="1:65">flags</name></type> <name pos:start="1:67" pos:end="1:78">STATUS_PARAM</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="415:1">{<block_content pos:start="5:5" pos:end="413:5">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">flag</name></type> <name pos:start="5:10" pos:end="5:14">aSign</name></decl>, <decl pos:start="5:17" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:8"/><name pos:start="5:17" pos:end="5:21">bSign</name></decl>, <decl pos:start="5:24" pos:end="5:28"><type ref="prev" pos:start="5:5" pos:end="5:8"/><name pos:start="5:24" pos:end="5:28">cSign</name></decl>, <decl pos:start="5:31" pos:end="5:35"><type ref="prev" pos:start="5:5" pos:end="5:8"/><name pos:start="5:31" pos:end="5:35">zSign</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:55"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">int_fast16_t</name></type> <name pos:start="7:18" pos:end="7:21">aExp</name></decl>, <decl pos:start="7:24" pos:end="7:27"><type ref="prev" pos:start="7:5" pos:end="7:16"/><name pos:start="7:24" pos:end="7:27">bExp</name></decl>, <decl pos:start="7:30" pos:end="7:33"><type ref="prev" pos:start="7:5" pos:end="7:16"/><name pos:start="7:30" pos:end="7:33">cExp</name></decl>, <decl pos:start="7:36" pos:end="7:39"><type ref="prev" pos:start="7:5" pos:end="7:16"/><name pos:start="7:36" pos:end="7:39">pExp</name></decl>, <decl pos:start="7:42" pos:end="7:45"><type ref="prev" pos:start="7:5" pos:end="7:16"/><name pos:start="7:42" pos:end="7:45">zExp</name></decl>, <decl pos:start="7:48" pos:end="7:54"><type ref="prev" pos:start="7:5" pos:end="7:16"/><name pos:start="7:48" pos:end="7:54">expDiff</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:17">aSig</name></decl>, <decl pos:start="9:20" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:20" pos:end="9:23">bSig</name></decl>, <decl pos:start="9:26" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:26" pos:end="9:29">cSig</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">flag</name></type> <name pos:start="11:10" pos:end="11:13">pInf</name></decl>, <decl pos:start="11:16" pos:end="11:20"><type ref="prev" pos:start="11:5" pos:end="11:8"/><name pos:start="11:16" pos:end="11:20">pZero</name></decl>, <decl pos:start="11:23" pos:end="11:27"><type ref="prev" pos:start="11:5" pos:end="11:8"/><name pos:start="11:23" pos:end="11:27">pSign</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:54"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:18">pSig0</name></decl>, <decl pos:start="13:21" pos:end="13:25"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:21" pos:end="13:25">pSig1</name></decl>, <decl pos:start="13:28" pos:end="13:32"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:28" pos:end="13:32">cSig0</name></decl>, <decl pos:start="13:35" pos:end="13:39"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:35" pos:end="13:39">cSig1</name></decl>, <decl pos:start="13:42" pos:end="13:46"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:42" pos:end="13:46">zSig0</name></decl>, <decl pos:start="13:49" pos:end="13:53"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:49" pos:end="13:53">zSig1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:18">shiftcount</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">flag</name></type> <name pos:start="17:10" pos:end="17:17">signflip</name></decl>, <decl pos:start="17:20" pos:end="17:26"><type ref="prev" pos:start="17:5" pos:end="17:8"/><name pos:start="17:20" pos:end="17:26">infzero</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:52"><expr pos:start="21:5" pos:end="21:51"><name pos:start="21:5" pos:end="21:5">a</name> <operator pos:start="21:7" pos:end="21:7">=</operator> <macro pos:start="21:9" pos:end="21:51"><name pos:start="21:9" pos:end="21:37">float64_squash_input_denormal</name><argument_list pos:start="21:38" pos:end="21:51">(<argument pos:start="21:39" pos:end="21:50">a STATUS_VAR</argument>)</argument_list></macro></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:52"><expr pos:start="23:5" pos:end="23:51"><name pos:start="23:5" pos:end="23:5">b</name> <operator pos:start="23:7" pos:end="23:7">=</operator> <macro pos:start="23:9" pos:end="23:51"><name pos:start="23:9" pos:end="23:37">float64_squash_input_denormal</name><argument_list pos:start="23:38" pos:end="23:51">(<argument pos:start="23:39" pos:end="23:50">b STATUS_VAR</argument>)</argument_list></macro></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:52"><expr pos:start="25:5" pos:end="25:51"><name pos:start="25:5" pos:end="25:5">c</name> <operator pos:start="25:7" pos:end="25:7">=</operator> <macro pos:start="25:9" pos:end="25:51"><name pos:start="25:9" pos:end="25:37">float64_squash_input_denormal</name><argument_list pos:start="25:38" pos:end="25:51">(<argument pos:start="25:39" pos:end="25:50">c STATUS_VAR</argument>)</argument_list></macro></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:33"><expr pos:start="27:5" pos:end="27:32"><name pos:start="27:5" pos:end="27:8">aSig</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <call pos:start="27:12" pos:end="27:32"><name pos:start="27:12" pos:end="27:29">extractFloat64Frac</name><argument_list pos:start="27:30" pos:end="27:32">(<argument pos:start="27:31" pos:end="27:31"><expr pos:start="27:31" pos:end="27:31"><name pos:start="27:31" pos:end="27:31">a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:32"><expr pos:start="29:5" pos:end="29:31"><name pos:start="29:5" pos:end="29:8">aExp</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <call pos:start="29:12" pos:end="29:31"><name pos:start="29:12" pos:end="29:28">extractFloat64Exp</name><argument_list pos:start="29:29" pos:end="29:31">(<argument pos:start="29:30" pos:end="29:30"><expr pos:start="29:30" pos:end="29:30"><name pos:start="29:30" pos:end="29:30">a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:34"><expr pos:start="31:5" pos:end="31:33"><name pos:start="31:5" pos:end="31:9">aSign</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <call pos:start="31:13" pos:end="31:33"><name pos:start="31:13" pos:end="31:30">extractFloat64Sign</name><argument_list pos:start="31:31" pos:end="31:33">(<argument pos:start="31:32" pos:end="31:32"><expr pos:start="31:32" pos:end="31:32"><name pos:start="31:32" pos:end="31:32">a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:33"><expr pos:start="33:5" pos:end="33:32"><name pos:start="33:5" pos:end="33:8">bSig</name> <operator pos:start="33:10" pos:end="33:10">=</operator> <call pos:start="33:12" pos:end="33:32"><name pos:start="33:12" pos:end="33:29">extractFloat64Frac</name><argument_list pos:start="33:30" pos:end="33:32">(<argument pos:start="33:31" pos:end="33:31"><expr pos:start="33:31" pos:end="33:31"><name pos:start="33:31" pos:end="33:31">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:32"><expr pos:start="35:5" pos:end="35:31"><name pos:start="35:5" pos:end="35:8">bExp</name> <operator pos:start="35:10" pos:end="35:10">=</operator> <call pos:start="35:12" pos:end="35:31"><name pos:start="35:12" pos:end="35:28">extractFloat64Exp</name><argument_list pos:start="35:29" pos:end="35:31">(<argument pos:start="35:30" pos:end="35:30"><expr pos:start="35:30" pos:end="35:30"><name pos:start="35:30" pos:end="35:30">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:34"><expr pos:start="37:5" pos:end="37:33"><name pos:start="37:5" pos:end="37:9">bSign</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <call pos:start="37:13" pos:end="37:33"><name pos:start="37:13" pos:end="37:30">extractFloat64Sign</name><argument_list pos:start="37:31" pos:end="37:33">(<argument pos:start="37:32" pos:end="37:32"><expr pos:start="37:32" pos:end="37:32"><name pos:start="37:32" pos:end="37:32">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:33"><expr pos:start="39:5" pos:end="39:32"><name pos:start="39:5" pos:end="39:8">cSig</name> <operator pos:start="39:10" pos:end="39:10">=</operator> <call pos:start="39:12" pos:end="39:32"><name pos:start="39:12" pos:end="39:29">extractFloat64Frac</name><argument_list pos:start="39:30" pos:end="39:32">(<argument pos:start="39:31" pos:end="39:31"><expr pos:start="39:31" pos:end="39:31"><name pos:start="39:31" pos:end="39:31">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:32"><expr pos:start="41:5" pos:end="41:31"><name pos:start="41:5" pos:end="41:8">cExp</name> <operator pos:start="41:10" pos:end="41:10">=</operator> <call pos:start="41:12" pos:end="41:31"><name pos:start="41:12" pos:end="41:28">extractFloat64Exp</name><argument_list pos:start="41:29" pos:end="41:31">(<argument pos:start="41:30" pos:end="41:30"><expr pos:start="41:30" pos:end="41:30"><name pos:start="41:30" pos:end="41:30">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:34"><expr pos:start="43:5" pos:end="43:33"><name pos:start="43:5" pos:end="43:9">cSign</name> <operator pos:start="43:11" pos:end="43:11">=</operator> <call pos:start="43:13" pos:end="43:33"><name pos:start="43:13" pos:end="43:30">extractFloat64Sign</name><argument_list pos:start="43:31" pos:end="43:33">(<argument pos:start="43:32" pos:end="43:32"><expr pos:start="43:32" pos:end="43:32"><name pos:start="43:32" pos:end="43:32">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="49:71"><expr pos:start="47:5" pos:end="49:70"><name pos:start="47:5" pos:end="47:11">infzero</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <operator pos:start="47:15" pos:end="47:15">(</operator><operator pos:start="47:16" pos:end="47:16">(</operator><name pos:start="47:17" pos:end="47:20">aExp</name> <operator pos:start="47:22" pos:end="47:23">==</operator> <literal type="number" pos:start="47:25" pos:end="47:25">0</literal> <operator pos:start="47:27" pos:end="47:28">&amp;&amp;</operator> <name pos:start="47:30" pos:end="47:33">aSig</name> <operator pos:start="47:35" pos:end="47:36">==</operator> <literal type="number" pos:start="47:38" pos:end="47:38">0</literal> <operator pos:start="47:40" pos:end="47:41">&amp;&amp;</operator> <name pos:start="47:43" pos:end="47:46">bExp</name> <operator pos:start="47:48" pos:end="47:49">==</operator> <literal type="number" pos:start="47:51" pos:end="47:55">0x7ff</literal> <operator pos:start="47:57" pos:end="47:58">&amp;&amp;</operator> <name pos:start="47:60" pos:end="47:63">bSig</name> <operator pos:start="47:65" pos:end="47:66">==</operator> <literal type="number" pos:start="47:68" pos:end="47:68">0</literal><operator pos:start="47:69" pos:end="47:69">)</operator> <operator pos:start="47:71" pos:end="47:72">||</operator>

               <operator pos:start="49:16" pos:end="49:16">(</operator><name pos:start="49:17" pos:end="49:20">aExp</name> <operator pos:start="49:22" pos:end="49:23">==</operator> <literal type="number" pos:start="49:25" pos:end="49:29">0x7ff</literal> <operator pos:start="49:31" pos:end="49:32">&amp;&amp;</operator> <name pos:start="49:34" pos:end="49:37">aSig</name> <operator pos:start="49:39" pos:end="49:40">==</operator> <literal type="number" pos:start="49:42" pos:end="49:42">0</literal> <operator pos:start="49:44" pos:end="49:45">&amp;&amp;</operator> <name pos:start="49:47" pos:end="49:50">bExp</name> <operator pos:start="49:52" pos:end="49:53">==</operator> <literal type="number" pos:start="49:55" pos:end="49:55">0</literal> <operator pos:start="49:57" pos:end="49:58">&amp;&amp;</operator> <name pos:start="49:60" pos:end="49:63">bSig</name> <operator pos:start="49:65" pos:end="49:66">==</operator> <literal type="number" pos:start="49:68" pos:end="49:68">0</literal><operator pos:start="49:69" pos:end="49:69">)</operator><operator pos:start="49:70" pos:end="49:70">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="61:7">/* It is implementation-defined whether the cases of (0,inf,qnan)

     * and (inf,0,qnan) raise InvalidOperation or not (and what QNaN

     * they return if they do), so we have to hand this information

     * off to the target-specific pick-a-NaN routine.

     */</comment>

    <if_stmt pos:start="63:5" pos:end="71:5"><if pos:start="63:5" pos:end="71:5">if <condition pos:start="63:8" pos:end="67:34">(<expr pos:start="63:9" pos:end="67:33"><operator pos:start="63:9" pos:end="63:9">(</operator><operator pos:start="63:10" pos:end="63:10">(</operator><name pos:start="63:11" pos:end="63:14">aExp</name> <operator pos:start="63:16" pos:end="63:17">==</operator> <literal type="number" pos:start="63:19" pos:end="63:23">0x7ff</literal><operator pos:start="63:24" pos:end="63:24">)</operator> <operator pos:start="63:26" pos:end="63:27">&amp;&amp;</operator> <name pos:start="63:29" pos:end="63:32">aSig</name><operator pos:start="63:33" pos:end="63:33">)</operator> <operator pos:start="63:35" pos:end="63:36">||</operator>

        <operator pos:start="65:9" pos:end="65:9">(</operator><operator pos:start="65:10" pos:end="65:10">(</operator><name pos:start="65:11" pos:end="65:14">bExp</name> <operator pos:start="65:16" pos:end="65:17">==</operator> <literal type="number" pos:start="65:19" pos:end="65:23">0x7ff</literal><operator pos:start="65:24" pos:end="65:24">)</operator> <operator pos:start="65:26" pos:end="65:27">&amp;&amp;</operator> <name pos:start="65:29" pos:end="65:32">bSig</name><operator pos:start="65:33" pos:end="65:33">)</operator> <operator pos:start="65:35" pos:end="65:36">||</operator>

        <operator pos:start="67:9" pos:end="67:9">(</operator><operator pos:start="67:10" pos:end="67:10">(</operator><name pos:start="67:11" pos:end="67:14">cExp</name> <operator pos:start="67:16" pos:end="67:17">==</operator> <literal type="number" pos:start="67:19" pos:end="67:23">0x7ff</literal><operator pos:start="67:24" pos:end="67:24">)</operator> <operator pos:start="67:26" pos:end="67:27">&amp;&amp;</operator> <name pos:start="67:29" pos:end="67:32">cSig</name><operator pos:start="67:33" pos:end="67:33">)</operator></expr>)</condition> <block pos:start="67:36" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:70">

        <return pos:start="69:9" pos:end="69:70">return <macro pos:start="69:16" pos:end="69:69"><name pos:start="69:16" pos:end="69:40">propagateFloat64MulAddNaN</name><argument_list pos:start="69:41" pos:end="69:69">(<argument pos:start="69:42" pos:end="69:42">a</argument>, <argument pos:start="69:45" pos:end="69:45">b</argument>, <argument pos:start="69:48" pos:end="69:48">c</argument>, <argument pos:start="69:51" pos:end="69:68">infzero STATUS_VAR</argument>)</argument_list></macro>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="75:5" pos:end="81:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:16">(<expr pos:start="75:9" pos:end="75:15"><name pos:start="75:9" pos:end="75:15">infzero</name></expr>)</condition> <block pos:start="75:18" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:35">

        <macro pos:start="77:9" pos:end="77:50"><name pos:start="77:9" pos:end="77:19">float_raise</name><argument_list pos:start="77:20" pos:end="77:50">(<argument pos:start="77:21" pos:end="77:49">float_flag_invalid STATUS_VAR</argument>)</argument_list></macro><empty_stmt pos:start="77:51" pos:end="77:51">;</empty_stmt>

        <return pos:start="79:9" pos:end="79:35">return <expr pos:start="79:16" pos:end="79:34"><name pos:start="79:16" pos:end="79:34">float64_default_nan</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:38">(<expr pos:start="85:9" pos:end="85:37"><name pos:start="85:9" pos:end="85:13">flags</name> <operator pos:start="85:15" pos:end="85:15">&amp;</operator> <name pos:start="85:17" pos:end="85:37">float_muladd_negate_c</name></expr>)</condition> <block pos:start="85:40" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:19">

        <expr_stmt pos:start="87:9" pos:end="87:19"><expr pos:start="87:9" pos:end="87:18"><name pos:start="87:9" pos:end="87:13">cSign</name> <operator pos:start="87:15" pos:end="87:16">^=</operator> <literal type="number" pos:start="87:18" pos:end="87:18">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:60"><expr pos:start="93:5" pos:end="93:59"><name pos:start="93:5" pos:end="93:12">signflip</name> <operator pos:start="93:14" pos:end="93:14">=</operator> <ternary pos:start="93:16" pos:end="93:59"><condition pos:start="93:16" pos:end="93:53"><expr pos:start="93:16" pos:end="93:51"><operator pos:start="93:16" pos:end="93:16">(</operator><name pos:start="93:17" pos:end="93:21">flags</name> <operator pos:start="93:23" pos:end="93:23">&amp;</operator> <name pos:start="93:25" pos:end="93:50">float_muladd_negate_result</name><operator pos:start="93:51" pos:end="93:51">)</operator></expr> ?</condition><then pos:start="93:55" pos:end="93:55"> <expr pos:start="93:55" pos:end="93:55"><literal type="number" pos:start="93:55" pos:end="93:55">1</literal></expr> </then><else pos:start="93:57" pos:end="93:59">: <expr pos:start="93:59" pos:end="93:59"><literal type="number" pos:start="93:59" pos:end="93:59">0</literal></expr></else></ternary></expr>;</expr_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:51">/* Work out the sign and type of the product */</comment>

    <expr_stmt pos:start="99:5" pos:end="99:26"><expr pos:start="99:5" pos:end="99:25"><name pos:start="99:5" pos:end="99:9">pSign</name> <operator pos:start="99:11" pos:end="99:11">=</operator> <name pos:start="99:13" pos:end="99:17">aSign</name> <operator pos:start="99:19" pos:end="99:19">^</operator> <name pos:start="99:21" pos:end="99:25">bSign</name></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="105:5"><if pos:start="101:5" pos:end="105:5">if <condition pos:start="101:8" pos:end="101:44">(<expr pos:start="101:9" pos:end="101:43"><name pos:start="101:9" pos:end="101:13">flags</name> <operator pos:start="101:15" pos:end="101:15">&amp;</operator> <name pos:start="101:17" pos:end="101:43">float_muladd_negate_product</name></expr>)</condition> <block pos:start="101:46" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:19">

        <expr_stmt pos:start="103:9" pos:end="103:19"><expr pos:start="103:9" pos:end="103:18"><name pos:start="103:9" pos:end="103:13">pSign</name> <operator pos:start="103:15" pos:end="103:16">^=</operator> <literal type="number" pos:start="103:18" pos:end="103:18">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:46"><expr pos:start="107:5" pos:end="107:45"><name pos:start="107:5" pos:end="107:8">pInf</name> <operator pos:start="107:10" pos:end="107:10">=</operator> <operator pos:start="107:12" pos:end="107:12">(</operator><name pos:start="107:13" pos:end="107:16">aExp</name> <operator pos:start="107:18" pos:end="107:19">==</operator> <literal type="number" pos:start="107:21" pos:end="107:25">0x7ff</literal><operator pos:start="107:26" pos:end="107:26">)</operator> <operator pos:start="107:28" pos:end="107:29">||</operator> <operator pos:start="107:31" pos:end="107:31">(</operator><name pos:start="107:32" pos:end="107:35">bExp</name> <operator pos:start="107:37" pos:end="107:38">==</operator> <literal type="number" pos:start="107:40" pos:end="107:44">0x7ff</literal><operator pos:start="107:45" pos:end="107:45">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:57"><expr pos:start="109:5" pos:end="109:56"><name pos:start="109:5" pos:end="109:9">pZero</name> <operator pos:start="109:11" pos:end="109:11">=</operator> <operator pos:start="109:13" pos:end="109:13">(</operator><operator pos:start="109:14" pos:end="109:14">(</operator><name pos:start="109:15" pos:end="109:18">aExp</name> <operator pos:start="109:20" pos:end="109:20">|</operator> <name pos:start="109:22" pos:end="109:25">aSig</name><operator pos:start="109:26" pos:end="109:26">)</operator> <operator pos:start="109:28" pos:end="109:29">==</operator> <literal type="number" pos:start="109:31" pos:end="109:31">0</literal><operator pos:start="109:32" pos:end="109:32">)</operator> <operator pos:start="109:34" pos:end="109:35">||</operator> <operator pos:start="109:37" pos:end="109:37">(</operator><operator pos:start="109:38" pos:end="109:38">(</operator><name pos:start="109:39" pos:end="109:42">bExp</name> <operator pos:start="109:44" pos:end="109:44">|</operator> <name pos:start="109:46" pos:end="109:49">bSig</name><operator pos:start="109:50" pos:end="109:50">)</operator> <operator pos:start="109:52" pos:end="109:53">==</operator> <literal type="number" pos:start="109:55" pos:end="109:55">0</literal><operator pos:start="109:56" pos:end="109:56">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="113:5" pos:end="129:5"><if pos:start="113:5" pos:end="129:5">if <condition pos:start="113:8" pos:end="113:22">(<expr pos:start="113:9" pos:end="113:21"><name pos:start="113:9" pos:end="113:12">cExp</name> <operator pos:start="113:14" pos:end="113:15">==</operator> <literal type="number" pos:start="113:17" pos:end="113:21">0x7ff</literal></expr>)</condition> <block pos:start="113:24" pos:end="129:5">{<block_content pos:start="115:9" pos:end="127:55">

        <if_stmt pos:start="115:9" pos:end="123:9"><if pos:start="115:9" pos:end="123:9">if <condition pos:start="115:12" pos:end="115:36">(<expr pos:start="115:13" pos:end="115:35"><name pos:start="115:13" pos:end="115:16">pInf</name> <operator pos:start="115:18" pos:end="115:19">&amp;&amp;</operator> <operator pos:start="115:21" pos:end="115:21">(</operator><name pos:start="115:22" pos:end="115:26">pSign</name> <operator pos:start="115:28" pos:end="115:28">^</operator> <name pos:start="115:30" pos:end="115:34">cSign</name><operator pos:start="115:35" pos:end="115:35">)</operator></expr>)</condition> <block pos:start="115:38" pos:end="123:9">{<block_content pos:start="119:13" pos:end="121:39">

            <comment type="block" pos:start="117:13" pos:end="117:76">/* addition of opposite-signed infinities =&gt; InvalidOperation */</comment>

            <macro pos:start="119:13" pos:end="119:54"><name pos:start="119:13" pos:end="119:23">float_raise</name><argument_list pos:start="119:24" pos:end="119:54">(<argument pos:start="119:25" pos:end="119:53">float_flag_invalid STATUS_VAR</argument>)</argument_list></macro><empty_stmt pos:start="119:55" pos:end="119:55">;</empty_stmt>

            <return pos:start="121:13" pos:end="121:39">return <expr pos:start="121:20" pos:end="121:38"><name pos:start="121:20" pos:end="121:38">float64_default_nan</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="125:9" pos:end="125:61">/* Otherwise generate an infinity of the same sign */</comment>

        <return pos:start="127:9" pos:end="127:55">return <expr pos:start="127:16" pos:end="127:54"><call pos:start="127:16" pos:end="127:54"><name pos:start="127:16" pos:end="127:26">packFloat64</name><argument_list pos:start="127:27" pos:end="127:54">(<argument pos:start="127:28" pos:end="127:43"><expr pos:start="127:28" pos:end="127:43"><name pos:start="127:28" pos:end="127:32">cSign</name> <operator pos:start="127:34" pos:end="127:34">^</operator> <name pos:start="127:36" pos:end="127:43">signflip</name></expr></argument>, <argument pos:start="127:46" pos:end="127:50"><expr pos:start="127:46" pos:end="127:50"><literal type="number" pos:start="127:46" pos:end="127:50">0x7ff</literal></expr></argument>, <argument pos:start="127:53" pos:end="127:53"><expr pos:start="127:53" pos:end="127:53"><literal type="number" pos:start="127:53" pos:end="127:53">0</literal></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="133:5" pos:end="137:5"><if pos:start="133:5" pos:end="137:5">if <condition pos:start="133:8" pos:end="133:13">(<expr pos:start="133:9" pos:end="133:12"><name pos:start="133:9" pos:end="133:12">pInf</name></expr>)</condition> <block pos:start="133:15" pos:end="137:5">{<block_content pos:start="135:9" pos:end="135:55">

        <return pos:start="135:9" pos:end="135:55">return <expr pos:start="135:16" pos:end="135:54"><call pos:start="135:16" pos:end="135:54"><name pos:start="135:16" pos:end="135:26">packFloat64</name><argument_list pos:start="135:27" pos:end="135:54">(<argument pos:start="135:28" pos:end="135:43"><expr pos:start="135:28" pos:end="135:43"><name pos:start="135:28" pos:end="135:32">pSign</name> <operator pos:start="135:34" pos:end="135:34">^</operator> <name pos:start="135:36" pos:end="135:43">signflip</name></expr></argument>, <argument pos:start="135:46" pos:end="135:50"><expr pos:start="135:46" pos:end="135:50"><literal type="number" pos:start="135:46" pos:end="135:50">0x7ff</literal></expr></argument>, <argument pos:start="135:53" pos:end="135:53"><expr pos:start="135:53" pos:end="135:53"><literal type="number" pos:start="135:53" pos:end="135:53">0</literal></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="141:5" pos:end="183:5"><if pos:start="141:5" pos:end="183:5">if <condition pos:start="141:8" pos:end="141:14">(<expr pos:start="141:9" pos:end="141:13"><name pos:start="141:9" pos:end="141:13">pZero</name></expr>)</condition> <block pos:start="141:16" pos:end="183:5">{<block_content pos:start="143:9" pos:end="181:57">

        <if_stmt pos:start="143:9" pos:end="177:9"><if pos:start="143:9" pos:end="177:9">if <condition pos:start="143:12" pos:end="143:22">(<expr pos:start="143:13" pos:end="143:21"><name pos:start="143:13" pos:end="143:16">cExp</name> <operator pos:start="143:18" pos:end="143:19">==</operator> <literal type="number" pos:start="143:21" pos:end="143:21">0</literal></expr>)</condition> <block pos:start="143:24" pos:end="177:9">{<block_content pos:start="145:13" pos:end="175:13">

            <if_stmt pos:start="145:13" pos:end="165:13"><if pos:start="145:13" pos:end="165:13">if <condition pos:start="145:16" pos:end="145:26">(<expr pos:start="145:17" pos:end="145:25"><name pos:start="145:17" pos:end="145:20">cSig</name> <operator pos:start="145:22" pos:end="145:23">==</operator> <literal type="number" pos:start="145:25" pos:end="145:25">0</literal></expr>)</condition> <block pos:start="145:28" pos:end="165:13">{<block_content pos:start="149:17" pos:end="163:59">

                <comment type="block" pos:start="147:17" pos:end="147:45">/* Adding two exact zeroes */</comment>

                <if_stmt pos:start="149:17" pos:end="161:17"><if pos:start="149:17" pos:end="153:17">if <condition pos:start="149:20" pos:end="149:35">(<expr pos:start="149:21" pos:end="149:34"><name pos:start="149:21" pos:end="149:25">pSign</name> <operator pos:start="149:27" pos:end="149:28">==</operator> <name pos:start="149:30" pos:end="149:34">cSign</name></expr>)</condition> <block pos:start="149:37" pos:end="153:17">{<block_content pos:start="151:21" pos:end="151:34">

                    <expr_stmt pos:start="151:21" pos:end="151:34"><expr pos:start="151:21" pos:end="151:33"><name pos:start="151:21" pos:end="151:25">zSign</name> <operator pos:start="151:27" pos:end="151:27">=</operator> <name pos:start="151:29" pos:end="151:33">pSign</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="153:19" pos:end="157:17">else if <condition pos:start="153:27" pos:end="153:75">(<expr pos:start="153:28" pos:end="153:74"><call pos:start="153:28" pos:end="153:54"><name pos:start="153:28" pos:end="153:33">STATUS</name><argument_list pos:start="153:34" pos:end="153:54">(<argument pos:start="153:35" pos:end="153:53"><expr pos:start="153:35" pos:end="153:53"><name pos:start="153:35" pos:end="153:53">float_rounding_mode</name></expr></argument>)</argument_list></call> <operator pos:start="153:56" pos:end="153:57">==</operator> <name pos:start="153:59" pos:end="153:74">float_round_down</name></expr>)</condition> <block pos:start="153:77" pos:end="157:17">{<block_content pos:start="155:21" pos:end="155:30">

                    <expr_stmt pos:start="155:21" pos:end="155:30"><expr pos:start="155:21" pos:end="155:29"><name pos:start="155:21" pos:end="155:25">zSign</name> <operator pos:start="155:27" pos:end="155:27">=</operator> <literal type="number" pos:start="155:29" pos:end="155:29">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="157:19" pos:end="161:17">else <block pos:start="157:24" pos:end="161:17">{<block_content pos:start="159:21" pos:end="159:30">

                    <expr_stmt pos:start="159:21" pos:end="159:30"><expr pos:start="159:21" pos:end="159:29"><name pos:start="159:21" pos:end="159:25">zSign</name> <operator pos:start="159:27" pos:end="159:27">=</operator> <literal type="number" pos:start="159:29" pos:end="159:29">0</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <return pos:start="163:17" pos:end="163:59">return <expr pos:start="163:24" pos:end="163:58"><call pos:start="163:24" pos:end="163:58"><name pos:start="163:24" pos:end="163:34">packFloat64</name><argument_list pos:start="163:35" pos:end="163:58">(<argument pos:start="163:36" pos:end="163:51"><expr pos:start="163:36" pos:end="163:51"><name pos:start="163:36" pos:end="163:40">zSign</name> <operator pos:start="163:42" pos:end="163:42">^</operator> <name pos:start="163:44" pos:end="163:51">signflip</name></expr></argument>, <argument pos:start="163:54" pos:end="163:54"><expr pos:start="163:54" pos:end="163:54"><literal type="number" pos:start="163:54" pos:end="163:54">0</literal></expr></argument>, <argument pos:start="163:57" pos:end="163:57"><expr pos:start="163:57" pos:end="163:57"><literal type="number" pos:start="163:57" pos:end="163:57">0</literal></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="167:13" pos:end="167:42">/* Exact zero plus a denorm */</comment>

            <if_stmt pos:start="169:13" pos:end="175:13"><if pos:start="169:13" pos:end="175:13">if <condition pos:start="169:16" pos:end="169:38">(<expr pos:start="169:17" pos:end="169:37"><call pos:start="169:17" pos:end="169:37"><name pos:start="169:17" pos:end="169:22">STATUS</name><argument_list pos:start="169:23" pos:end="169:37">(<argument pos:start="169:24" pos:end="169:36"><expr pos:start="169:24" pos:end="169:36"><name pos:start="169:24" pos:end="169:36">flush_to_zero</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="169:40" pos:end="175:13">{<block_content pos:start="171:17" pos:end="173:59">

                <macro pos:start="171:17" pos:end="171:66"><name pos:start="171:17" pos:end="171:27">float_raise</name><argument_list pos:start="171:28" pos:end="171:66">(<argument pos:start="171:29" pos:end="171:65">float_flag_output_denormal STATUS_VAR</argument>)</argument_list></macro><empty_stmt pos:start="171:67" pos:end="171:67">;</empty_stmt>

                <return pos:start="173:17" pos:end="173:59">return <expr pos:start="173:24" pos:end="173:58"><call pos:start="173:24" pos:end="173:58"><name pos:start="173:24" pos:end="173:34">packFloat64</name><argument_list pos:start="173:35" pos:end="173:58">(<argument pos:start="173:36" pos:end="173:51"><expr pos:start="173:36" pos:end="173:51"><name pos:start="173:36" pos:end="173:40">cSign</name> <operator pos:start="173:42" pos:end="173:42">^</operator> <name pos:start="173:44" pos:end="173:51">signflip</name></expr></argument>, <argument pos:start="173:54" pos:end="173:54"><expr pos:start="173:54" pos:end="173:54"><literal type="number" pos:start="173:54" pos:end="173:54">0</literal></expr></argument>, <argument pos:start="173:57" pos:end="173:57"><expr pos:start="173:57" pos:end="173:57"><literal type="number" pos:start="173:57" pos:end="173:57">0</literal></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="179:9" pos:end="179:70">/* Zero plus something non-zero : just return the something */</comment>

        <return pos:start="181:9" pos:end="181:57">return <expr pos:start="181:16" pos:end="181:56"><call pos:start="181:16" pos:end="181:56"><name pos:start="181:16" pos:end="181:26">packFloat64</name><argument_list pos:start="181:27" pos:end="181:56">(<argument pos:start="181:28" pos:end="181:43"><expr pos:start="181:28" pos:end="181:43"><name pos:start="181:28" pos:end="181:32">cSign</name> <operator pos:start="181:34" pos:end="181:34">^</operator> <name pos:start="181:36" pos:end="181:43">signflip</name></expr></argument>, <argument pos:start="181:46" pos:end="181:49"><expr pos:start="181:46" pos:end="181:49"><name pos:start="181:46" pos:end="181:49">cExp</name></expr></argument>, <argument pos:start="181:52" pos:end="181:55"><expr pos:start="181:52" pos:end="181:55"><name pos:start="181:52" pos:end="181:55">cSig</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="187:5" pos:end="191:5"><if pos:start="187:5" pos:end="191:5">if <condition pos:start="187:8" pos:end="187:18">(<expr pos:start="187:9" pos:end="187:17"><name pos:start="187:9" pos:end="187:12">aExp</name> <operator pos:start="187:14" pos:end="187:15">==</operator> <literal type="number" pos:start="187:17" pos:end="187:17">0</literal></expr>)</condition> <block pos:start="187:20" pos:end="191:5">{<block_content pos:start="189:9" pos:end="189:54">

        <expr_stmt pos:start="189:9" pos:end="189:54"><expr pos:start="189:9" pos:end="189:53"><call pos:start="189:9" pos:end="189:53"><name pos:start="189:9" pos:end="189:33">normalizeFloat64Subnormal</name><argument_list pos:start="189:34" pos:end="189:53">(<argument pos:start="189:35" pos:end="189:38"><expr pos:start="189:35" pos:end="189:38"><name pos:start="189:35" pos:end="189:38">aSig</name></expr></argument>, <argument pos:start="189:41" pos:end="189:45"><expr pos:start="189:41" pos:end="189:45"><operator pos:start="189:41" pos:end="189:41">&amp;</operator><name pos:start="189:42" pos:end="189:45">aExp</name></expr></argument>, <argument pos:start="189:48" pos:end="189:52"><expr pos:start="189:48" pos:end="189:52"><operator pos:start="189:48" pos:end="189:48">&amp;</operator><name pos:start="189:49" pos:end="189:52">aSig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="193:5" pos:end="197:5"><if pos:start="193:5" pos:end="197:5">if <condition pos:start="193:8" pos:end="193:18">(<expr pos:start="193:9" pos:end="193:17"><name pos:start="193:9" pos:end="193:12">bExp</name> <operator pos:start="193:14" pos:end="193:15">==</operator> <literal type="number" pos:start="193:17" pos:end="193:17">0</literal></expr>)</condition> <block pos:start="193:20" pos:end="197:5">{<block_content pos:start="195:9" pos:end="195:54">

        <expr_stmt pos:start="195:9" pos:end="195:54"><expr pos:start="195:9" pos:end="195:53"><call pos:start="195:9" pos:end="195:53"><name pos:start="195:9" pos:end="195:33">normalizeFloat64Subnormal</name><argument_list pos:start="195:34" pos:end="195:53">(<argument pos:start="195:35" pos:end="195:38"><expr pos:start="195:35" pos:end="195:38"><name pos:start="195:35" pos:end="195:38">bSig</name></expr></argument>, <argument pos:start="195:41" pos:end="195:45"><expr pos:start="195:41" pos:end="195:45"><operator pos:start="195:41" pos:end="195:41">&amp;</operator><name pos:start="195:42" pos:end="195:45">bExp</name></expr></argument>, <argument pos:start="195:48" pos:end="195:52"><expr pos:start="195:48" pos:end="195:52"><operator pos:start="195:48" pos:end="195:48">&amp;</operator><name pos:start="195:49" pos:end="195:52">bSig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="201:5" pos:end="201:47">/* Calculate the actual result a * b + c */</comment>



    <comment type="block" pos:start="205:5" pos:end="205:39">/* Multiply first; this is easy. */</comment>

    <comment type="block" pos:start="207:5" pos:end="213:7">/* NB: we subtract 0x3fe where float64_mul() subtracts 0x3ff

     * because we want the true exponent, not the "one-less-than"

     * flavour that roundAndPackFloat64() takes.

     */</comment>

    <expr_stmt pos:start="215:5" pos:end="215:31"><expr pos:start="215:5" pos:end="215:30"><name pos:start="215:5" pos:end="215:8">pExp</name> <operator pos:start="215:10" pos:end="215:10">=</operator> <name pos:start="215:12" pos:end="215:15">aExp</name> <operator pos:start="215:17" pos:end="215:17">+</operator> <name pos:start="215:19" pos:end="215:22">bExp</name> <operator pos:start="215:24" pos:end="215:24">-</operator> <literal type="number" pos:start="215:26" pos:end="215:30">0x3fe</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:50"><expr pos:start="217:5" pos:end="217:49"><name pos:start="217:5" pos:end="217:8">aSig</name> <operator pos:start="217:10" pos:end="217:10">=</operator> <operator pos:start="217:12" pos:end="217:12">(</operator><name pos:start="217:13" pos:end="217:16">aSig</name> <operator pos:start="217:18" pos:end="217:18">|</operator> <call pos:start="217:20" pos:end="217:44"><name pos:start="217:20" pos:end="217:24">LIT64</name><argument_list pos:start="217:25" pos:end="217:44">(<argument pos:start="217:26" pos:end="217:43"><expr pos:start="217:26" pos:end="217:43"><literal type="number" pos:start="217:26" pos:end="217:43">0x0010000000000000</literal></expr></argument>)</argument_list></call><operator pos:start="217:45" pos:end="217:45">)</operator><operator pos:start="217:46" pos:end="217:47">&lt;&lt;</operator><literal type="number" pos:start="217:48" pos:end="217:49">10</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:50"><expr pos:start="219:5" pos:end="219:49"><name pos:start="219:5" pos:end="219:8">bSig</name> <operator pos:start="219:10" pos:end="219:10">=</operator> <operator pos:start="219:12" pos:end="219:12">(</operator><name pos:start="219:13" pos:end="219:16">bSig</name> <operator pos:start="219:18" pos:end="219:18">|</operator> <call pos:start="219:20" pos:end="219:44"><name pos:start="219:20" pos:end="219:24">LIT64</name><argument_list pos:start="219:25" pos:end="219:44">(<argument pos:start="219:26" pos:end="219:43"><expr pos:start="219:26" pos:end="219:43"><literal type="number" pos:start="219:26" pos:end="219:43">0x0010000000000000</literal></expr></argument>)</argument_list></call><operator pos:start="219:45" pos:end="219:45">)</operator><operator pos:start="219:46" pos:end="219:47">&lt;&lt;</operator><literal type="number" pos:start="219:48" pos:end="219:49">11</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:43"><expr pos:start="221:5" pos:end="221:42"><call pos:start="221:5" pos:end="221:42"><name pos:start="221:5" pos:end="221:14">mul64To128</name><argument_list pos:start="221:15" pos:end="221:42">(<argument pos:start="221:16" pos:end="221:19"><expr pos:start="221:16" pos:end="221:19"><name pos:start="221:16" pos:end="221:19">aSig</name></expr></argument>, <argument pos:start="221:22" pos:end="221:25"><expr pos:start="221:22" pos:end="221:25"><name pos:start="221:22" pos:end="221:25">bSig</name></expr></argument>, <argument pos:start="221:28" pos:end="221:33"><expr pos:start="221:28" pos:end="221:33"><operator pos:start="221:28" pos:end="221:28">&amp;</operator><name pos:start="221:29" pos:end="221:33">pSig0</name></expr></argument>, <argument pos:start="221:36" pos:end="221:41"><expr pos:start="221:36" pos:end="221:41"><operator pos:start="221:36" pos:end="221:36">&amp;</operator><name pos:start="221:37" pos:end="221:41">pSig1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="223:5" pos:end="229:5"><if pos:start="223:5" pos:end="229:5">if <condition pos:start="223:8" pos:end="223:35">(<expr pos:start="223:9" pos:end="223:34"><operator pos:start="223:9" pos:end="223:9">(</operator><name pos:start="223:10" pos:end="223:16">int64_t</name><operator pos:start="223:17" pos:end="223:17">)</operator><operator pos:start="223:18" pos:end="223:18">(</operator><name pos:start="223:19" pos:end="223:23">pSig0</name> <operator pos:start="223:25" pos:end="223:26">&lt;&lt;</operator> <literal type="number" pos:start="223:28" pos:end="223:28">1</literal><operator pos:start="223:29" pos:end="223:29">)</operator> <operator pos:start="223:31" pos:end="223:32">&gt;=</operator> <literal type="number" pos:start="223:34" pos:end="223:34">0</literal></expr>)</condition> <block pos:start="223:37" pos:end="229:5">{<block_content pos:start="225:9" pos:end="227:15">

        <expr_stmt pos:start="225:9" pos:end="225:59"><expr pos:start="225:9" pos:end="225:58"><call pos:start="225:9" pos:end="225:58"><name pos:start="225:9" pos:end="225:25">shortShift128Left</name><argument_list pos:start="225:26" pos:end="225:58">(<argument pos:start="225:27" pos:end="225:31"><expr pos:start="225:27" pos:end="225:31"><name pos:start="225:27" pos:end="225:31">pSig0</name></expr></argument>, <argument pos:start="225:34" pos:end="225:38"><expr pos:start="225:34" pos:end="225:38"><name pos:start="225:34" pos:end="225:38">pSig1</name></expr></argument>, <argument pos:start="225:41" pos:end="225:41"><expr pos:start="225:41" pos:end="225:41"><literal type="number" pos:start="225:41" pos:end="225:41">1</literal></expr></argument>, <argument pos:start="225:44" pos:end="225:49"><expr pos:start="225:44" pos:end="225:49"><operator pos:start="225:44" pos:end="225:44">&amp;</operator><name pos:start="225:45" pos:end="225:49">pSig0</name></expr></argument>, <argument pos:start="225:52" pos:end="225:57"><expr pos:start="225:52" pos:end="225:57"><operator pos:start="225:52" pos:end="225:52">&amp;</operator><name pos:start="225:53" pos:end="225:57">pSig1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:15"><expr pos:start="227:9" pos:end="227:14"><name pos:start="227:9" pos:end="227:12">pExp</name><operator pos:start="227:13" pos:end="227:14">--</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="233:5" pos:end="233:29"><expr pos:start="233:5" pos:end="233:28"><name pos:start="233:5" pos:end="233:9">zSign</name> <operator pos:start="233:11" pos:end="233:11">=</operator> <name pos:start="233:13" pos:end="233:17">pSign</name> <operator pos:start="233:19" pos:end="233:19">^</operator> <name pos:start="233:21" pos:end="233:28">signflip</name></expr>;</expr_stmt>



    <comment type="block" pos:start="237:5" pos:end="241:7">/* Now [pSig0:pSig1] is the significand of the multiply, with the explicit

     * bit in position 126.

     */</comment>

    <if_stmt pos:start="243:5" pos:end="259:5"><if pos:start="243:5" pos:end="259:5">if <condition pos:start="243:8" pos:end="243:18">(<expr pos:start="243:9" pos:end="243:17"><name pos:start="243:9" pos:end="243:12">cExp</name> <operator pos:start="243:14" pos:end="243:15">==</operator> <literal type="number" pos:start="243:17" pos:end="243:17">0</literal></expr>)</condition> <block pos:start="243:20" pos:end="259:5">{<block_content pos:start="245:9" pos:end="257:54">

        <if_stmt pos:start="245:9" pos:end="255:9"><if pos:start="245:9" pos:end="255:9">if <condition pos:start="245:12" pos:end="245:18">(<expr pos:start="245:13" pos:end="245:17"><operator pos:start="245:13" pos:end="245:13">!</operator><name pos:start="245:14" pos:end="245:17">cSig</name></expr>)</condition> <block pos:start="245:20" pos:end="255:9">{<block_content pos:start="249:13" pos:end="253:57">

            <comment type="block" pos:start="247:13" pos:end="247:73">/* Throw out the special case of c being an exact zero now */</comment>

            <expr_stmt pos:start="249:13" pos:end="249:67"><expr pos:start="249:13" pos:end="249:66"><call pos:start="249:13" pos:end="249:66"><name pos:start="249:13" pos:end="249:32">shift128RightJamming</name><argument_list pos:start="249:33" pos:end="249:66">(<argument pos:start="249:34" pos:end="249:38"><expr pos:start="249:34" pos:end="249:38"><name pos:start="249:34" pos:end="249:38">pSig0</name></expr></argument>, <argument pos:start="249:41" pos:end="249:45"><expr pos:start="249:41" pos:end="249:45"><name pos:start="249:41" pos:end="249:45">pSig1</name></expr></argument>, <argument pos:start="249:48" pos:end="249:49"><expr pos:start="249:48" pos:end="249:49"><literal type="number" pos:start="249:48" pos:end="249:49">64</literal></expr></argument>, <argument pos:start="249:52" pos:end="249:57"><expr pos:start="249:52" pos:end="249:57"><operator pos:start="249:52" pos:end="249:52">&amp;</operator><name pos:start="249:53" pos:end="249:57">pSig0</name></expr></argument>, <argument pos:start="249:60" pos:end="249:65"><expr pos:start="249:60" pos:end="249:65"><operator pos:start="249:60" pos:end="249:60">&amp;</operator><name pos:start="249:61" pos:end="249:65">pSig1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="251:13" pos:end="253:57">return <macro pos:start="251:20" pos:end="253:56"><name pos:start="251:20" pos:end="251:38">roundAndPackFloat64</name><argument_list pos:start="251:39" pos:end="253:56">(<argument pos:start="251:40" pos:end="251:44">zSign</argument>, <argument pos:start="251:47" pos:end="251:54">pExp - <literal type="number" pos:start="251:54" pos:end="251:54">1</literal></argument>,

                                       <argument pos:start="253:40" pos:end="253:55">pSig1 STATUS_VAR</argument>)</argument_list></macro>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:54"><expr pos:start="257:9" pos:end="257:53"><call pos:start="257:9" pos:end="257:53"><name pos:start="257:9" pos:end="257:33">normalizeFloat64Subnormal</name><argument_list pos:start="257:34" pos:end="257:53">(<argument pos:start="257:35" pos:end="257:38"><expr pos:start="257:35" pos:end="257:38"><name pos:start="257:35" pos:end="257:38">cSig</name></expr></argument>, <argument pos:start="257:41" pos:end="257:45"><expr pos:start="257:41" pos:end="257:45"><operator pos:start="257:41" pos:end="257:41">&amp;</operator><name pos:start="257:42" pos:end="257:45">cExp</name></expr></argument>, <argument pos:start="257:48" pos:end="257:52"><expr pos:start="257:48" pos:end="257:52"><operator pos:start="257:48" pos:end="257:48">&amp;</operator><name pos:start="257:49" pos:end="257:52">cSig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="263:5" pos:end="267:7">/* Shift cSig and add the explicit bit so [cSig0:cSig1] is the

     * significand of the addend, with the explicit bit in position 126.

     */</comment>

    <expr_stmt pos:start="269:5" pos:end="269:36"><expr pos:start="269:5" pos:end="269:35"><name pos:start="269:5" pos:end="269:9">cSig0</name> <operator pos:start="269:11" pos:end="269:11">=</operator> <name pos:start="269:13" pos:end="269:16">cSig</name> <operator pos:start="269:18" pos:end="269:19">&lt;&lt;</operator> <operator pos:start="269:21" pos:end="269:21">(</operator><literal type="number" pos:start="269:22" pos:end="269:26">126</literal> <operator pos:start="269:26" pos:end="269:26">-</operator> <literal type="number" pos:start="269:28" pos:end="269:31">64</literal> <operator pos:start="269:31" pos:end="269:31">-</operator> <literal type="number" pos:start="269:33" pos:end="269:34">52</literal><operator pos:start="269:35" pos:end="269:35">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="271:5" pos:end="271:14"><expr pos:start="271:5" pos:end="271:13"><name pos:start="271:5" pos:end="271:9">cSig1</name> <operator pos:start="271:11" pos:end="271:11">=</operator> <literal type="number" pos:start="271:13" pos:end="271:13">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="273:5" pos:end="273:39"><expr pos:start="273:5" pos:end="273:38"><name pos:start="273:5" pos:end="273:9">cSig0</name> <operator pos:start="273:11" pos:end="273:12">|=</operator> <call pos:start="273:14" pos:end="273:38"><name pos:start="273:14" pos:end="273:18">LIT64</name><argument_list pos:start="273:19" pos:end="273:38">(<argument pos:start="273:20" pos:end="273:37"><expr pos:start="273:20" pos:end="273:37"><literal type="number" pos:start="273:20" pos:end="273:37">0x4000000000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="275:5" pos:end="275:26"><expr pos:start="275:5" pos:end="275:25"><name pos:start="275:5" pos:end="275:11">expDiff</name> <operator pos:start="275:13" pos:end="275:13">=</operator> <name pos:start="275:15" pos:end="275:18">pExp</name> <operator pos:start="275:20" pos:end="275:20">-</operator> <name pos:start="275:22" pos:end="275:25">cExp</name></expr>;</expr_stmt>



    <if_stmt pos:start="279:5" pos:end="413:5"><if pos:start="279:5" pos:end="325:5">if <condition pos:start="279:8" pos:end="279:23">(<expr pos:start="279:9" pos:end="279:22"><name pos:start="279:9" pos:end="279:13">pSign</name> <operator pos:start="279:15" pos:end="279:16">==</operator> <name pos:start="279:18" pos:end="279:22">cSign</name></expr>)</condition> <block pos:start="279:25" pos:end="325:5">{<block_content pos:start="283:9" pos:end="323:66">

        <comment type="block" pos:start="281:9" pos:end="281:22">/* Addition */</comment>

        <if_stmt pos:start="283:9" pos:end="305:9"><if pos:start="283:9" pos:end="291:9">if <condition pos:start="283:12" pos:end="283:24">(<expr pos:start="283:13" pos:end="283:23"><name pos:start="283:13" pos:end="283:19">expDiff</name> <operator pos:start="283:21" pos:end="283:21">&gt;</operator> <literal type="number" pos:start="283:23" pos:end="283:23">0</literal></expr>)</condition> <block pos:start="283:26" pos:end="291:9">{<block_content pos:start="287:13" pos:end="289:24">

            <comment type="block" pos:start="285:13" pos:end="285:36">/* scale c to match p */</comment>

            <expr_stmt pos:start="287:13" pos:end="287:72"><expr pos:start="287:13" pos:end="287:71"><call pos:start="287:13" pos:end="287:71"><name pos:start="287:13" pos:end="287:32">shift128RightJamming</name><argument_list pos:start="287:33" pos:end="287:71">(<argument pos:start="287:34" pos:end="287:38"><expr pos:start="287:34" pos:end="287:38"><name pos:start="287:34" pos:end="287:38">cSig0</name></expr></argument>, <argument pos:start="287:41" pos:end="287:45"><expr pos:start="287:41" pos:end="287:45"><name pos:start="287:41" pos:end="287:45">cSig1</name></expr></argument>, <argument pos:start="287:48" pos:end="287:54"><expr pos:start="287:48" pos:end="287:54"><name pos:start="287:48" pos:end="287:54">expDiff</name></expr></argument>, <argument pos:start="287:57" pos:end="287:62"><expr pos:start="287:57" pos:end="287:62"><operator pos:start="287:57" pos:end="287:57">&amp;</operator><name pos:start="287:58" pos:end="287:62">cSig0</name></expr></argument>, <argument pos:start="287:65" pos:end="287:70"><expr pos:start="287:65" pos:end="287:70"><operator pos:start="287:65" pos:end="287:65">&amp;</operator><name pos:start="287:66" pos:end="287:70">cSig1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="289:13" pos:end="289:24"><expr pos:start="289:13" pos:end="289:23"><name pos:start="289:13" pos:end="289:16">zExp</name> <operator pos:start="289:18" pos:end="289:18">=</operator> <name pos:start="289:20" pos:end="289:23">pExp</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="291:11" pos:end="299:9">else if <condition pos:start="291:19" pos:end="291:31">(<expr pos:start="291:20" pos:end="291:30"><name pos:start="291:20" pos:end="291:26">expDiff</name> <operator pos:start="291:28" pos:end="291:28">&lt;</operator> <literal type="number" pos:start="291:30" pos:end="291:30">0</literal></expr>)</condition> <block pos:start="291:33" pos:end="299:9">{<block_content pos:start="295:13" pos:end="297:24">

            <comment type="block" pos:start="293:13" pos:end="293:36">/* scale p to match c */</comment>

            <expr_stmt pos:start="295:13" pos:end="295:73"><expr pos:start="295:13" pos:end="295:72"><call pos:start="295:13" pos:end="295:72"><name pos:start="295:13" pos:end="295:32">shift128RightJamming</name><argument_list pos:start="295:33" pos:end="295:72">(<argument pos:start="295:34" pos:end="295:38"><expr pos:start="295:34" pos:end="295:38"><name pos:start="295:34" pos:end="295:38">pSig0</name></expr></argument>, <argument pos:start="295:41" pos:end="295:45"><expr pos:start="295:41" pos:end="295:45"><name pos:start="295:41" pos:end="295:45">pSig1</name></expr></argument>, <argument pos:start="295:48" pos:end="295:55"><expr pos:start="295:48" pos:end="295:55"><operator pos:start="295:48" pos:end="295:48">-</operator><name pos:start="295:49" pos:end="295:55">expDiff</name></expr></argument>, <argument pos:start="295:58" pos:end="295:63"><expr pos:start="295:58" pos:end="295:63"><operator pos:start="295:58" pos:end="295:58">&amp;</operator><name pos:start="295:59" pos:end="295:63">pSig0</name></expr></argument>, <argument pos:start="295:66" pos:end="295:71"><expr pos:start="295:66" pos:end="295:71"><operator pos:start="295:66" pos:end="295:66">&amp;</operator><name pos:start="295:67" pos:end="295:71">pSig1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="297:13" pos:end="297:24"><expr pos:start="297:13" pos:end="297:23"><name pos:start="297:13" pos:end="297:16">zExp</name> <operator pos:start="297:18" pos:end="297:18">=</operator> <name pos:start="297:20" pos:end="297:23">cExp</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="299:11" pos:end="305:9">else <block pos:start="299:16" pos:end="305:9">{<block_content pos:start="303:13" pos:end="303:24">

            <comment type="block" pos:start="301:13" pos:end="301:35">/* no scaling needed */</comment>

            <expr_stmt pos:start="303:13" pos:end="303:24"><expr pos:start="303:13" pos:end="303:23"><name pos:start="303:13" pos:end="303:16">zExp</name> <operator pos:start="303:18" pos:end="303:18">=</operator> <name pos:start="303:20" pos:end="303:23">cExp</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="307:9" pos:end="307:77">/* Add significands and make sure explicit bit ends up in posn 126 */</comment>

        <expr_stmt pos:start="309:9" pos:end="309:59"><expr pos:start="309:9" pos:end="309:58"><call pos:start="309:9" pos:end="309:58"><name pos:start="309:9" pos:end="309:14">add128</name><argument_list pos:start="309:15" pos:end="309:58">(<argument pos:start="309:16" pos:end="309:20"><expr pos:start="309:16" pos:end="309:20"><name pos:start="309:16" pos:end="309:20">pSig0</name></expr></argument>, <argument pos:start="309:23" pos:end="309:27"><expr pos:start="309:23" pos:end="309:27"><name pos:start="309:23" pos:end="309:27">pSig1</name></expr></argument>, <argument pos:start="309:30" pos:end="309:34"><expr pos:start="309:30" pos:end="309:34"><name pos:start="309:30" pos:end="309:34">cSig0</name></expr></argument>, <argument pos:start="309:37" pos:end="309:41"><expr pos:start="309:37" pos:end="309:41"><name pos:start="309:37" pos:end="309:41">cSig1</name></expr></argument>, <argument pos:start="309:44" pos:end="309:49"><expr pos:start="309:44" pos:end="309:49"><operator pos:start="309:44" pos:end="309:44">&amp;</operator><name pos:start="309:45" pos:end="309:49">zSig0</name></expr></argument>, <argument pos:start="309:52" pos:end="309:57"><expr pos:start="309:52" pos:end="309:57"><operator pos:start="309:52" pos:end="309:52">&amp;</operator><name pos:start="309:53" pos:end="309:57">zSig1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="311:9" pos:end="319:9"><if pos:start="311:9" pos:end="315:9">if <condition pos:start="311:12" pos:end="311:31">(<expr pos:start="311:13" pos:end="311:30"><operator pos:start="311:13" pos:end="311:13">(</operator><name pos:start="311:14" pos:end="311:20">int64_t</name><operator pos:start="311:21" pos:end="311:21">)</operator><name pos:start="311:22" pos:end="311:26">zSig0</name> <operator pos:start="311:28" pos:end="311:28">&lt;</operator> <literal type="number" pos:start="311:30" pos:end="311:30">0</literal></expr>)</condition> <block pos:start="311:33" pos:end="315:9">{<block_content pos:start="313:13" pos:end="313:66">

            <expr_stmt pos:start="313:13" pos:end="313:66"><expr pos:start="313:13" pos:end="313:65"><call pos:start="313:13" pos:end="313:65"><name pos:start="313:13" pos:end="313:32">shift128RightJamming</name><argument_list pos:start="313:33" pos:end="313:65">(<argument pos:start="313:34" pos:end="313:38"><expr pos:start="313:34" pos:end="313:38"><name pos:start="313:34" pos:end="313:38">zSig0</name></expr></argument>, <argument pos:start="313:41" pos:end="313:45"><expr pos:start="313:41" pos:end="313:45"><name pos:start="313:41" pos:end="313:45">zSig1</name></expr></argument>, <argument pos:start="313:48" pos:end="313:48"><expr pos:start="313:48" pos:end="313:48"><literal type="number" pos:start="313:48" pos:end="313:48">1</literal></expr></argument>, <argument pos:start="313:51" pos:end="313:56"><expr pos:start="313:51" pos:end="313:56"><operator pos:start="313:51" pos:end="313:51">&amp;</operator><name pos:start="313:52" pos:end="313:56">zSig0</name></expr></argument>, <argument pos:start="313:59" pos:end="313:64"><expr pos:start="313:59" pos:end="313:64"><operator pos:start="313:59" pos:end="313:59">&amp;</operator><name pos:start="313:60" pos:end="313:64">zSig1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="315:11" pos:end="319:9">else <block pos:start="315:16" pos:end="319:9">{<block_content pos:start="317:13" pos:end="317:19">

            <expr_stmt pos:start="317:13" pos:end="317:19"><expr pos:start="317:13" pos:end="317:18"><name pos:start="317:13" pos:end="317:16">zExp</name><operator pos:start="317:17" pos:end="317:18">--</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="321:9" pos:end="321:63"><expr pos:start="321:9" pos:end="321:62"><call pos:start="321:9" pos:end="321:62"><name pos:start="321:9" pos:end="321:28">shift128RightJamming</name><argument_list pos:start="321:29" pos:end="321:62">(<argument pos:start="321:30" pos:end="321:34"><expr pos:start="321:30" pos:end="321:34"><name pos:start="321:30" pos:end="321:34">zSig0</name></expr></argument>, <argument pos:start="321:37" pos:end="321:41"><expr pos:start="321:37" pos:end="321:41"><name pos:start="321:37" pos:end="321:41">zSig1</name></expr></argument>, <argument pos:start="321:44" pos:end="321:45"><expr pos:start="321:44" pos:end="321:45"><literal type="number" pos:start="321:44" pos:end="321:45">64</literal></expr></argument>, <argument pos:start="321:48" pos:end="321:53"><expr pos:start="321:48" pos:end="321:53"><operator pos:start="321:48" pos:end="321:48">&amp;</operator><name pos:start="321:49" pos:end="321:53">zSig0</name></expr></argument>, <argument pos:start="321:56" pos:end="321:61"><expr pos:start="321:56" pos:end="321:61"><operator pos:start="321:56" pos:end="321:56">&amp;</operator><name pos:start="321:57" pos:end="321:61">zSig1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="323:9" pos:end="323:66">return <macro pos:start="323:16" pos:end="323:65"><name pos:start="323:16" pos:end="323:34">roundAndPackFloat64</name><argument_list pos:start="323:35" pos:end="323:65">(<argument pos:start="323:36" pos:end="323:40">zSign</argument>, <argument pos:start="323:43" pos:end="323:46">zExp</argument>, <argument pos:start="323:49" pos:end="323:64">zSig1 STATUS_VAR</argument>)</argument_list></macro>;</return>

    </block_content>}</block></if> <else pos:start="325:7" pos:end="413:5">else <block pos:start="325:12" pos:end="413:5">{<block_content pos:start="329:9" pos:end="411:66">

        <comment type="block" pos:start="327:9" pos:end="327:25">/* Subtraction */</comment>

        <if_stmt pos:start="329:9" pos:end="377:9"><if pos:start="329:9" pos:end="337:9">if <condition pos:start="329:12" pos:end="329:24">(<expr pos:start="329:13" pos:end="329:23"><name pos:start="329:13" pos:end="329:19">expDiff</name> <operator pos:start="329:21" pos:end="329:21">&gt;</operator> <literal type="number" pos:start="329:23" pos:end="329:23">0</literal></expr>)</condition> <block pos:start="329:26" pos:end="337:9">{<block_content pos:start="331:13" pos:end="335:24">

            <expr_stmt pos:start="331:13" pos:end="331:72"><expr pos:start="331:13" pos:end="331:71"><call pos:start="331:13" pos:end="331:71"><name pos:start="331:13" pos:end="331:32">shift128RightJamming</name><argument_list pos:start="331:33" pos:end="331:71">(<argument pos:start="331:34" pos:end="331:38"><expr pos:start="331:34" pos:end="331:38"><name pos:start="331:34" pos:end="331:38">cSig0</name></expr></argument>, <argument pos:start="331:41" pos:end="331:45"><expr pos:start="331:41" pos:end="331:45"><name pos:start="331:41" pos:end="331:45">cSig1</name></expr></argument>, <argument pos:start="331:48" pos:end="331:54"><expr pos:start="331:48" pos:end="331:54"><name pos:start="331:48" pos:end="331:54">expDiff</name></expr></argument>, <argument pos:start="331:57" pos:end="331:62"><expr pos:start="331:57" pos:end="331:62"><operator pos:start="331:57" pos:end="331:57">&amp;</operator><name pos:start="331:58" pos:end="331:62">cSig0</name></expr></argument>, <argument pos:start="331:65" pos:end="331:70"><expr pos:start="331:65" pos:end="331:70"><operator pos:start="331:65" pos:end="331:65">&amp;</operator><name pos:start="331:66" pos:end="331:70">cSig1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="333:13" pos:end="333:63"><expr pos:start="333:13" pos:end="333:62"><call pos:start="333:13" pos:end="333:62"><name pos:start="333:13" pos:end="333:18">sub128</name><argument_list pos:start="333:19" pos:end="333:62">(<argument pos:start="333:20" pos:end="333:24"><expr pos:start="333:20" pos:end="333:24"><name pos:start="333:20" pos:end="333:24">pSig0</name></expr></argument>, <argument pos:start="333:27" pos:end="333:31"><expr pos:start="333:27" pos:end="333:31"><name pos:start="333:27" pos:end="333:31">pSig1</name></expr></argument>, <argument pos:start="333:34" pos:end="333:38"><expr pos:start="333:34" pos:end="333:38"><name pos:start="333:34" pos:end="333:38">cSig0</name></expr></argument>, <argument pos:start="333:41" pos:end="333:45"><expr pos:start="333:41" pos:end="333:45"><name pos:start="333:41" pos:end="333:45">cSig1</name></expr></argument>, <argument pos:start="333:48" pos:end="333:53"><expr pos:start="333:48" pos:end="333:53"><operator pos:start="333:48" pos:end="333:48">&amp;</operator><name pos:start="333:49" pos:end="333:53">zSig0</name></expr></argument>, <argument pos:start="333:56" pos:end="333:61"><expr pos:start="333:56" pos:end="333:61"><operator pos:start="333:56" pos:end="333:56">&amp;</operator><name pos:start="333:57" pos:end="333:61">zSig1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="335:13" pos:end="335:24"><expr pos:start="335:13" pos:end="335:23"><name pos:start="335:13" pos:end="335:16">zExp</name> <operator pos:start="335:18" pos:end="335:18">=</operator> <name pos:start="335:20" pos:end="335:23">pExp</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="337:11" pos:end="347:9">else if <condition pos:start="337:19" pos:end="337:31">(<expr pos:start="337:20" pos:end="337:30"><name pos:start="337:20" pos:end="337:26">expDiff</name> <operator pos:start="337:28" pos:end="337:28">&lt;</operator> <literal type="number" pos:start="337:30" pos:end="337:30">0</literal></expr>)</condition> <block pos:start="337:33" pos:end="347:9">{<block_content pos:start="339:13" pos:end="345:23">

            <expr_stmt pos:start="339:13" pos:end="339:73"><expr pos:start="339:13" pos:end="339:72"><call pos:start="339:13" pos:end="339:72"><name pos:start="339:13" pos:end="339:32">shift128RightJamming</name><argument_list pos:start="339:33" pos:end="339:72">(<argument pos:start="339:34" pos:end="339:38"><expr pos:start="339:34" pos:end="339:38"><name pos:start="339:34" pos:end="339:38">pSig0</name></expr></argument>, <argument pos:start="339:41" pos:end="339:45"><expr pos:start="339:41" pos:end="339:45"><name pos:start="339:41" pos:end="339:45">pSig1</name></expr></argument>, <argument pos:start="339:48" pos:end="339:55"><expr pos:start="339:48" pos:end="339:55"><operator pos:start="339:48" pos:end="339:48">-</operator><name pos:start="339:49" pos:end="339:55">expDiff</name></expr></argument>, <argument pos:start="339:58" pos:end="339:63"><expr pos:start="339:58" pos:end="339:63"><operator pos:start="339:58" pos:end="339:58">&amp;</operator><name pos:start="339:59" pos:end="339:63">pSig0</name></expr></argument>, <argument pos:start="339:66" pos:end="339:71"><expr pos:start="339:66" pos:end="339:71"><operator pos:start="339:66" pos:end="339:66">&amp;</operator><name pos:start="339:67" pos:end="339:71">pSig1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="341:13" pos:end="341:63"><expr pos:start="341:13" pos:end="341:62"><call pos:start="341:13" pos:end="341:62"><name pos:start="341:13" pos:end="341:18">sub128</name><argument_list pos:start="341:19" pos:end="341:62">(<argument pos:start="341:20" pos:end="341:24"><expr pos:start="341:20" pos:end="341:24"><name pos:start="341:20" pos:end="341:24">cSig0</name></expr></argument>, <argument pos:start="341:27" pos:end="341:31"><expr pos:start="341:27" pos:end="341:31"><name pos:start="341:27" pos:end="341:31">cSig1</name></expr></argument>, <argument pos:start="341:34" pos:end="341:38"><expr pos:start="341:34" pos:end="341:38"><name pos:start="341:34" pos:end="341:38">pSig0</name></expr></argument>, <argument pos:start="341:41" pos:end="341:45"><expr pos:start="341:41" pos:end="341:45"><name pos:start="341:41" pos:end="341:45">pSig1</name></expr></argument>, <argument pos:start="341:48" pos:end="341:53"><expr pos:start="341:48" pos:end="341:53"><operator pos:start="341:48" pos:end="341:48">&amp;</operator><name pos:start="341:49" pos:end="341:53">zSig0</name></expr></argument>, <argument pos:start="341:56" pos:end="341:61"><expr pos:start="341:56" pos:end="341:61"><operator pos:start="341:56" pos:end="341:56">&amp;</operator><name pos:start="341:57" pos:end="341:61">zSig1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="343:13" pos:end="343:24"><expr pos:start="343:13" pos:end="343:23"><name pos:start="343:13" pos:end="343:16">zExp</name> <operator pos:start="343:18" pos:end="343:18">=</operator> <name pos:start="343:20" pos:end="343:23">cExp</name></expr>;</expr_stmt>

            <expr_stmt pos:start="345:13" pos:end="345:23"><expr pos:start="345:13" pos:end="345:22"><name pos:start="345:13" pos:end="345:17">zSign</name> <operator pos:start="345:19" pos:end="345:20">^=</operator> <literal type="number" pos:start="345:22" pos:end="345:22">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="347:11" pos:end="377:9">else <block pos:start="347:16" pos:end="377:9">{<block_content pos:start="349:13" pos:end="375:13">

            <expr_stmt pos:start="349:13" pos:end="349:24"><expr pos:start="349:13" pos:end="349:23"><name pos:start="349:13" pos:end="349:16">zExp</name> <operator pos:start="349:18" pos:end="349:18">=</operator> <name pos:start="349:20" pos:end="349:23">pExp</name></expr>;</expr_stmt>

            <if_stmt pos:start="351:13" pos:end="375:13"><if pos:start="351:13" pos:end="355:13">if <condition pos:start="351:16" pos:end="351:50">(<expr pos:start="351:17" pos:end="351:49"><call pos:start="351:17" pos:end="351:49"><name pos:start="351:17" pos:end="351:21">lt128</name><argument_list pos:start="351:22" pos:end="351:49">(<argument pos:start="351:23" pos:end="351:27"><expr pos:start="351:23" pos:end="351:27"><name pos:start="351:23" pos:end="351:27">cSig0</name></expr></argument>, <argument pos:start="351:30" pos:end="351:34"><expr pos:start="351:30" pos:end="351:34"><name pos:start="351:30" pos:end="351:34">cSig1</name></expr></argument>, <argument pos:start="351:37" pos:end="351:41"><expr pos:start="351:37" pos:end="351:41"><name pos:start="351:37" pos:end="351:41">pSig0</name></expr></argument>, <argument pos:start="351:44" pos:end="351:48"><expr pos:start="351:44" pos:end="351:48"><name pos:start="351:44" pos:end="351:48">pSig1</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="351:52" pos:end="355:13">{<block_content pos:start="353:17" pos:end="353:67">

                <expr_stmt pos:start="353:17" pos:end="353:67"><expr pos:start="353:17" pos:end="353:66"><call pos:start="353:17" pos:end="353:66"><name pos:start="353:17" pos:end="353:22">sub128</name><argument_list pos:start="353:23" pos:end="353:66">(<argument pos:start="353:24" pos:end="353:28"><expr pos:start="353:24" pos:end="353:28"><name pos:start="353:24" pos:end="353:28">pSig0</name></expr></argument>, <argument pos:start="353:31" pos:end="353:35"><expr pos:start="353:31" pos:end="353:35"><name pos:start="353:31" pos:end="353:35">pSig1</name></expr></argument>, <argument pos:start="353:38" pos:end="353:42"><expr pos:start="353:38" pos:end="353:42"><name pos:start="353:38" pos:end="353:42">cSig0</name></expr></argument>, <argument pos:start="353:45" pos:end="353:49"><expr pos:start="353:45" pos:end="353:49"><name pos:start="353:45" pos:end="353:49">cSig1</name></expr></argument>, <argument pos:start="353:52" pos:end="353:57"><expr pos:start="353:52" pos:end="353:57"><operator pos:start="353:52" pos:end="353:52">&amp;</operator><name pos:start="353:53" pos:end="353:57">zSig0</name></expr></argument>, <argument pos:start="353:60" pos:end="353:65"><expr pos:start="353:60" pos:end="353:65"><operator pos:start="353:60" pos:end="353:60">&amp;</operator><name pos:start="353:61" pos:end="353:65">zSig1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="355:15" pos:end="361:13">else if <condition pos:start="355:23" pos:end="355:57">(<expr pos:start="355:24" pos:end="355:56"><call pos:start="355:24" pos:end="355:56"><name pos:start="355:24" pos:end="355:28">lt128</name><argument_list pos:start="355:29" pos:end="355:56">(<argument pos:start="355:30" pos:end="355:34"><expr pos:start="355:30" pos:end="355:34"><name pos:start="355:30" pos:end="355:34">pSig0</name></expr></argument>, <argument pos:start="355:37" pos:end="355:41"><expr pos:start="355:37" pos:end="355:41"><name pos:start="355:37" pos:end="355:41">pSig1</name></expr></argument>, <argument pos:start="355:44" pos:end="355:48"><expr pos:start="355:44" pos:end="355:48"><name pos:start="355:44" pos:end="355:48">cSig0</name></expr></argument>, <argument pos:start="355:51" pos:end="355:55"><expr pos:start="355:51" pos:end="355:55"><name pos:start="355:51" pos:end="355:55">cSig1</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="355:59" pos:end="361:13">{<block_content pos:start="357:17" pos:end="359:27">

                <expr_stmt pos:start="357:17" pos:end="357:67"><expr pos:start="357:17" pos:end="357:66"><call pos:start="357:17" pos:end="357:66"><name pos:start="357:17" pos:end="357:22">sub128</name><argument_list pos:start="357:23" pos:end="357:66">(<argument pos:start="357:24" pos:end="357:28"><expr pos:start="357:24" pos:end="357:28"><name pos:start="357:24" pos:end="357:28">cSig0</name></expr></argument>, <argument pos:start="357:31" pos:end="357:35"><expr pos:start="357:31" pos:end="357:35"><name pos:start="357:31" pos:end="357:35">cSig1</name></expr></argument>, <argument pos:start="357:38" pos:end="357:42"><expr pos:start="357:38" pos:end="357:42"><name pos:start="357:38" pos:end="357:42">pSig0</name></expr></argument>, <argument pos:start="357:45" pos:end="357:49"><expr pos:start="357:45" pos:end="357:49"><name pos:start="357:45" pos:end="357:49">pSig1</name></expr></argument>, <argument pos:start="357:52" pos:end="357:57"><expr pos:start="357:52" pos:end="357:57"><operator pos:start="357:52" pos:end="357:52">&amp;</operator><name pos:start="357:53" pos:end="357:57">zSig0</name></expr></argument>, <argument pos:start="357:60" pos:end="357:65"><expr pos:start="357:60" pos:end="357:65"><operator pos:start="357:60" pos:end="357:60">&amp;</operator><name pos:start="357:61" pos:end="357:65">zSig1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="359:17" pos:end="359:27"><expr pos:start="359:17" pos:end="359:26"><name pos:start="359:17" pos:end="359:21">zSign</name> <operator pos:start="359:23" pos:end="359:24">^=</operator> <literal type="number" pos:start="359:26" pos:end="359:26">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="361:15" pos:end="375:13">else <block pos:start="361:20" pos:end="375:13">{<block_content pos:start="365:17" pos:end="373:48">

                <comment type="block" pos:start="363:17" pos:end="363:32">/* Exact zero */</comment>

                <expr_stmt pos:start="365:17" pos:end="365:33"><expr pos:start="365:17" pos:end="365:32"><name pos:start="365:17" pos:end="365:21">zSign</name> <operator pos:start="365:23" pos:end="365:23">=</operator> <name pos:start="365:25" pos:end="365:32">signflip</name></expr>;</expr_stmt>

                <if_stmt pos:start="367:17" pos:end="371:17"><if pos:start="367:17" pos:end="371:17">if <condition pos:start="367:20" pos:end="367:68">(<expr pos:start="367:21" pos:end="367:67"><call pos:start="367:21" pos:end="367:47"><name pos:start="367:21" pos:end="367:26">STATUS</name><argument_list pos:start="367:27" pos:end="367:47">(<argument pos:start="367:28" pos:end="367:46"><expr pos:start="367:28" pos:end="367:46"><name pos:start="367:28" pos:end="367:46">float_rounding_mode</name></expr></argument>)</argument_list></call> <operator pos:start="367:49" pos:end="367:50">==</operator> <name pos:start="367:52" pos:end="367:67">float_round_down</name></expr>)</condition> <block pos:start="367:70" pos:end="371:17">{<block_content pos:start="369:21" pos:end="369:31">

                    <expr_stmt pos:start="369:21" pos:end="369:31"><expr pos:start="369:21" pos:end="369:30"><name pos:start="369:21" pos:end="369:25">zSign</name> <operator pos:start="369:27" pos:end="369:28">^=</operator> <literal type="number" pos:start="369:30" pos:end="369:30">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <return pos:start="373:17" pos:end="373:48">return <expr pos:start="373:24" pos:end="373:47"><call pos:start="373:24" pos:end="373:47"><name pos:start="373:24" pos:end="373:34">packFloat64</name><argument_list pos:start="373:35" pos:end="373:47">(<argument pos:start="373:36" pos:end="373:40"><expr pos:start="373:36" pos:end="373:40"><name pos:start="373:36" pos:end="373:40">zSign</name></expr></argument>, <argument pos:start="373:43" pos:end="373:43"><expr pos:start="373:43" pos:end="373:43"><literal type="number" pos:start="373:43" pos:end="373:43">0</literal></expr></argument>, <argument pos:start="373:46" pos:end="373:46"><expr pos:start="373:46" pos:end="373:46"><literal type="number" pos:start="373:46" pos:end="373:46">0</literal></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="379:9" pos:end="379:15"><expr pos:start="379:9" pos:end="379:14"><operator pos:start="379:9" pos:end="379:10">--</operator><name pos:start="379:11" pos:end="379:14">zExp</name></expr>;</expr_stmt>

        <comment type="block" pos:start="381:9" pos:end="385:11">/* Do the equivalent of normalizeRoundAndPackFloat64() but

         * starting with the significand in a pair of uint64_t.

         */</comment>

        <if_stmt pos:start="387:9" pos:end="409:9"><if pos:start="387:9" pos:end="401:9">if <condition pos:start="387:12" pos:end="387:18">(<expr pos:start="387:13" pos:end="387:17"><name pos:start="387:13" pos:end="387:17">zSig0</name></expr>)</condition> <block pos:start="387:20" pos:end="401:9">{<block_content pos:start="389:13" pos:end="399:31">

            <expr_stmt pos:start="389:13" pos:end="389:56"><expr pos:start="389:13" pos:end="389:55"><name pos:start="389:13" pos:end="389:22">shiftcount</name> <operator pos:start="389:24" pos:end="389:24">=</operator> <call pos:start="389:26" pos:end="389:51"><name pos:start="389:26" pos:end="389:44">countLeadingZeros64</name><argument_list pos:start="389:45" pos:end="389:51">(<argument pos:start="389:46" pos:end="389:50"><expr pos:start="389:46" pos:end="389:50"><name pos:start="389:46" pos:end="389:50">zSig0</name></expr></argument>)</argument_list></call> <operator pos:start="389:53" pos:end="389:53">-</operator> <literal type="number" pos:start="389:55" pos:end="389:55">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="391:13" pos:end="391:72"><expr pos:start="391:13" pos:end="391:71"><call pos:start="391:13" pos:end="391:71"><name pos:start="391:13" pos:end="391:29">shortShift128Left</name><argument_list pos:start="391:30" pos:end="391:71">(<argument pos:start="391:31" pos:end="391:35"><expr pos:start="391:31" pos:end="391:35"><name pos:start="391:31" pos:end="391:35">zSig0</name></expr></argument>, <argument pos:start="391:38" pos:end="391:42"><expr pos:start="391:38" pos:end="391:42"><name pos:start="391:38" pos:end="391:42">zSig1</name></expr></argument>, <argument pos:start="391:45" pos:end="391:54"><expr pos:start="391:45" pos:end="391:54"><name pos:start="391:45" pos:end="391:54">shiftcount</name></expr></argument>, <argument pos:start="391:57" pos:end="391:62"><expr pos:start="391:57" pos:end="391:62"><operator pos:start="391:57" pos:end="391:57">&amp;</operator><name pos:start="391:58" pos:end="391:62">zSig0</name></expr></argument>, <argument pos:start="391:65" pos:end="391:70"><expr pos:start="391:65" pos:end="391:70"><operator pos:start="391:65" pos:end="391:65">&amp;</operator><name pos:start="391:66" pos:end="391:70">zSig1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="393:13" pos:end="397:13"><if pos:start="393:13" pos:end="397:13">if <condition pos:start="393:16" pos:end="393:22">(<expr pos:start="393:17" pos:end="393:21"><name pos:start="393:17" pos:end="393:21">zSig1</name></expr>)</condition> <block pos:start="393:24" pos:end="397:13">{<block_content pos:start="395:17" pos:end="395:27">

                <expr_stmt pos:start="395:17" pos:end="395:27"><expr pos:start="395:17" pos:end="395:26"><name pos:start="395:17" pos:end="395:21">zSig0</name> <operator pos:start="395:23" pos:end="395:24">|=</operator> <literal type="number" pos:start="395:26" pos:end="395:26">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="399:13" pos:end="399:31"><expr pos:start="399:13" pos:end="399:30"><name pos:start="399:13" pos:end="399:16">zExp</name> <operator pos:start="399:18" pos:end="399:19">-=</operator> <name pos:start="399:21" pos:end="399:30">shiftcount</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="401:11" pos:end="409:9">else <block pos:start="401:16" pos:end="409:9">{<block_content pos:start="403:13" pos:end="407:38">

            <expr_stmt pos:start="403:13" pos:end="403:56"><expr pos:start="403:13" pos:end="403:55"><name pos:start="403:13" pos:end="403:22">shiftcount</name> <operator pos:start="403:24" pos:end="403:24">=</operator> <call pos:start="403:26" pos:end="403:51"><name pos:start="403:26" pos:end="403:44">countLeadingZeros64</name><argument_list pos:start="403:45" pos:end="403:51">(<argument pos:start="403:46" pos:end="403:50"><expr pos:start="403:46" pos:end="403:50"><name pos:start="403:46" pos:end="403:50">zSig1</name></expr></argument>)</argument_list></call> <operator pos:start="403:53" pos:end="403:53">-</operator> <literal type="number" pos:start="403:55" pos:end="403:55">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="405:13" pos:end="405:40"><expr pos:start="405:13" pos:end="405:39"><name pos:start="405:13" pos:end="405:17">zSig0</name> <operator pos:start="405:19" pos:end="405:19">=</operator> <name pos:start="405:21" pos:end="405:25">zSig1</name> <operator pos:start="405:27" pos:end="405:28">&lt;&lt;</operator> <name pos:start="405:30" pos:end="405:39">shiftcount</name></expr>;</expr_stmt>

            <expr_stmt pos:start="407:13" pos:end="407:38"><expr pos:start="407:13" pos:end="407:37"><name pos:start="407:13" pos:end="407:16">zExp</name> <operator pos:start="407:18" pos:end="407:19">-=</operator> <operator pos:start="407:21" pos:end="407:21">(</operator><name pos:start="407:22" pos:end="407:31">shiftcount</name> <operator pos:start="407:33" pos:end="407:33">+</operator> <literal type="number" pos:start="407:35" pos:end="407:36">64</literal><operator pos:start="407:37" pos:end="407:37">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <return pos:start="411:9" pos:end="411:66">return <macro pos:start="411:16" pos:end="411:65"><name pos:start="411:16" pos:end="411:34">roundAndPackFloat64</name><argument_list pos:start="411:35" pos:end="411:65">(<argument pos:start="411:36" pos:end="411:40">zSign</argument>, <argument pos:start="411:43" pos:end="411:46">zExp</argument>, <argument pos:start="411:49" pos:end="411:64">zSig0 STATUS_VAR</argument>)</argument_list></macro>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
