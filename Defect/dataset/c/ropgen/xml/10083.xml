<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10083.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">qmp_block_stream</name><parameter_list pos:start="1:22" pos:end="11:35">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:40"><specifier pos:start="1:23" pos:end="1:27">const</specifier> <name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:40">device</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:35"><decl pos:start="3:23" pos:end="3:35"><type pos:start="3:23" pos:end="3:35"><name pos:start="3:23" pos:end="3:26">bool</name></type> <name pos:start="3:28" pos:end="3:35">has_base</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:53"><decl pos:start="3:38" pos:end="3:53"><type pos:start="3:38" pos:end="3:53"><specifier pos:start="3:38" pos:end="3:42">const</specifier> <name pos:start="3:44" pos:end="3:47">char</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:53">base</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:43"><decl pos:start="5:23" pos:end="5:43"><type pos:start="5:23" pos:end="5:43"><name pos:start="5:23" pos:end="5:26">bool</name></type> <name pos:start="5:28" pos:end="5:43">has_backing_file</name></decl></parameter>, <parameter pos:start="5:46" pos:end="5:69"><decl pos:start="5:46" pos:end="5:69"><type pos:start="5:46" pos:end="5:69"><specifier pos:start="5:46" pos:end="5:50">const</specifier> <name pos:start="5:52" pos:end="5:55">char</name> <modifier pos:start="5:57" pos:end="5:57">*</modifier></type><name pos:start="5:58" pos:end="5:69">backing_file</name></decl></parameter>,

                      <parameter pos:start="7:23" pos:end="7:36"><decl pos:start="7:23" pos:end="7:36"><type pos:start="7:23" pos:end="7:36"><name pos:start="7:23" pos:end="7:26">bool</name></type> <name pos:start="7:28" pos:end="7:36">has_speed</name></decl></parameter>, <parameter pos:start="7:39" pos:end="7:51"><decl pos:start="7:39" pos:end="7:51"><type pos:start="7:39" pos:end="7:51"><name pos:start="7:39" pos:end="7:45">int64_t</name></type> <name pos:start="7:47" pos:end="7:51">speed</name></decl></parameter>,

                      <parameter pos:start="9:23" pos:end="9:39"><decl pos:start="9:23" pos:end="9:39"><type pos:start="9:23" pos:end="9:39"><name pos:start="9:23" pos:end="9:26">bool</name></type> <name pos:start="9:28" pos:end="9:39">has_on_error</name></decl></parameter>, <parameter pos:start="9:42" pos:end="9:65"><decl pos:start="9:42" pos:end="9:65"><type pos:start="9:42" pos:end="9:65"><name pos:start="9:42" pos:end="9:56">BlockdevOnError</name></type> <name pos:start="9:58" pos:end="9:65">on_error</name></decl></parameter>,

                      <parameter pos:start="11:23" pos:end="11:34"><decl pos:start="11:23" pos:end="11:34"><type pos:start="11:23" pos:end="11:34"><name pos:start="11:23" pos:end="11:27">Error</name> <modifier pos:start="11:29" pos:end="11:29">*</modifier><modifier pos:start="11:30" pos:end="11:30">*</modifier></type><name pos:start="11:31" pos:end="11:34">errp</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="109:1">{<block_content pos:start="15:5" pos:end="107:40">

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:20">BlockDriverState</name> <modifier pos:start="15:22" pos:end="15:22">*</modifier></type><name pos:start="15:23" pos:end="15:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:37"><decl pos:start="17:5" pos:end="17:36"><type pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:20">BlockDriverState</name> <modifier pos:start="17:22" pos:end="17:22">*</modifier></type><name pos:start="17:23" pos:end="17:29">base_bs</name> <init pos:start="17:31" pos:end="17:36">= <expr pos:start="17:33" pos:end="17:36"><name pos:start="17:33" pos:end="17:36">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:9">Error</name> <modifier pos:start="19:11" pos:end="19:11">*</modifier></type><name pos:start="19:12" pos:end="19:20">local_err</name> <init pos:start="19:22" pos:end="19:27">= <expr pos:start="19:24" pos:end="19:27"><name pos:start="19:24" pos:end="19:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:33"><decl pos:start="21:5" pos:end="21:32"><type pos:start="21:5" pos:end="21:16"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:14">char</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:25">base_name</name> <init pos:start="21:27" pos:end="21:32">= <expr pos:start="21:29" pos:end="21:32"><name pos:start="21:29" pos:end="21:32">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:22">(<expr pos:start="25:9" pos:end="25:21"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:21">has_on_error</name></expr>)</condition> <block pos:start="25:24" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:44">

        <expr_stmt pos:start="27:9" pos:end="27:44"><expr pos:start="27:9" pos:end="27:43"><name pos:start="27:9" pos:end="27:16">on_error</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <name pos:start="27:20" pos:end="27:43">BLOCKDEV_ON_ERROR_REPORT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:27"><expr pos:start="33:5" pos:end="33:26"><name pos:start="33:5" pos:end="33:6">bs</name> <operator pos:start="33:8" pos:end="33:8">=</operator> <call pos:start="33:10" pos:end="33:26"><name pos:start="33:10" pos:end="33:18">bdrv_find</name><argument_list pos:start="33:19" pos:end="33:26">(<argument pos:start="33:20" pos:end="33:25"><expr pos:start="33:20" pos:end="33:25"><name pos:start="33:20" pos:end="33:25">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:12">(<expr pos:start="35:9" pos:end="35:11"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:11">bs</name></expr>)</condition> <block pos:start="35:14" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:15">

        <expr_stmt pos:start="37:9" pos:end="37:55"><expr pos:start="37:9" pos:end="37:54"><call pos:start="37:9" pos:end="37:54"><name pos:start="37:9" pos:end="37:17">error_set</name><argument_list pos:start="37:18" pos:end="37:54">(<argument pos:start="37:19" pos:end="37:22"><expr pos:start="37:19" pos:end="37:22"><name pos:start="37:19" pos:end="37:22">errp</name></expr></argument>, <argument pos:start="37:25" pos:end="37:45"><expr pos:start="37:25" pos:end="37:45"><name pos:start="37:25" pos:end="37:45">QERR_DEVICE_NOT_FOUND</name></expr></argument>, <argument pos:start="37:48" pos:end="37:53"><expr pos:start="37:48" pos:end="37:53"><name pos:start="37:48" pos:end="37:53">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:59">(<expr pos:start="45:9" pos:end="45:58"><call pos:start="45:9" pos:end="45:58"><name pos:start="45:9" pos:end="45:26">bdrv_op_is_blocked</name><argument_list pos:start="45:27" pos:end="45:58">(<argument pos:start="45:28" pos:end="45:29"><expr pos:start="45:28" pos:end="45:29"><name pos:start="45:28" pos:end="45:29">bs</name></expr></argument>, <argument pos:start="45:32" pos:end="45:51"><expr pos:start="45:32" pos:end="45:51"><name pos:start="45:32" pos:end="45:51">BLOCK_OP_TYPE_STREAM</name></expr></argument>, <argument pos:start="45:54" pos:end="45:57"><expr pos:start="45:54" pos:end="45:57"><name pos:start="45:54" pos:end="45:57">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:61" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:15">

        <return pos:start="47:9" pos:end="47:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="67:5"><if pos:start="53:5" pos:end="67:5">if <condition pos:start="53:8" pos:end="53:17">(<expr pos:start="53:9" pos:end="53:16"><name pos:start="53:9" pos:end="53:16">has_base</name></expr>)</condition> <block pos:start="53:19" pos:end="67:5">{<block_content pos:start="55:9" pos:end="65:25">

        <expr_stmt pos:start="55:9" pos:end="55:52"><expr pos:start="55:9" pos:end="55:51"><name pos:start="55:9" pos:end="55:15">base_bs</name> <operator pos:start="55:17" pos:end="55:17">=</operator> <call pos:start="55:19" pos:end="55:51"><name pos:start="55:19" pos:end="55:41">bdrv_find_backing_image</name><argument_list pos:start="55:42" pos:end="55:51">(<argument pos:start="55:43" pos:end="55:44"><expr pos:start="55:43" pos:end="55:44"><name pos:start="55:43" pos:end="55:44">bs</name></expr></argument>, <argument pos:start="55:47" pos:end="55:50"><expr pos:start="55:47" pos:end="55:50"><name pos:start="55:47" pos:end="55:50">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="63:9"><if pos:start="57:9" pos:end="63:9">if <condition pos:start="57:12" pos:end="57:28">(<expr pos:start="57:13" pos:end="57:27"><name pos:start="57:13" pos:end="57:19">base_bs</name> <operator pos:start="57:21" pos:end="57:22">==</operator> <name pos:start="57:24" pos:end="57:27">NULL</name></expr>)</condition> <block pos:start="57:30" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:19">

            <expr_stmt pos:start="59:13" pos:end="59:55"><expr pos:start="59:13" pos:end="59:54"><call pos:start="59:13" pos:end="59:54"><name pos:start="59:13" pos:end="59:21">error_set</name><argument_list pos:start="59:22" pos:end="59:54">(<argument pos:start="59:23" pos:end="59:26"><expr pos:start="59:23" pos:end="59:26"><name pos:start="59:23" pos:end="59:26">errp</name></expr></argument>, <argument pos:start="59:29" pos:end="59:47"><expr pos:start="59:29" pos:end="59:47"><name pos:start="59:29" pos:end="59:47">QERR_BASE_NOT_FOUND</name></expr></argument>, <argument pos:start="59:50" pos:end="59:53"><expr pos:start="59:50" pos:end="59:53"><name pos:start="59:50" pos:end="59:53">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="61:13" pos:end="61:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:25"><expr pos:start="65:9" pos:end="65:24"><name pos:start="65:9" pos:end="65:17">base_name</name> <operator pos:start="65:19" pos:end="65:19">=</operator> <name pos:start="65:21" pos:end="65:24">base</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="71:5" pos:end="73:56">/* if we are streaming the entire chain, the result will have no backing

     * file, and specifying one is therefore an error */</comment>

    <if_stmt pos:start="75:5" pos:end="83:5"><if pos:start="75:5" pos:end="83:5">if <condition pos:start="75:8" pos:end="75:44">(<expr pos:start="75:9" pos:end="75:43"><name pos:start="75:9" pos:end="75:15">base_bs</name> <operator pos:start="75:17" pos:end="75:18">==</operator> <name pos:start="75:20" pos:end="75:23">NULL</name> <operator pos:start="75:25" pos:end="75:26">&amp;&amp;</operator> <name pos:start="75:28" pos:end="75:43">has_backing_file</name></expr>)</condition> <block pos:start="75:46" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:15">

        <expr_stmt pos:start="77:9" pos:end="79:41"><expr pos:start="77:9" pos:end="79:40"><call pos:start="77:9" pos:end="79:40"><name pos:start="77:9" pos:end="77:18">error_setg</name><argument_list pos:start="77:19" pos:end="79:40">(<argument pos:start="77:20" pos:end="77:23"><expr pos:start="77:20" pos:end="77:23"><name pos:start="77:20" pos:end="77:23">errp</name></expr></argument>, <argument pos:start="77:26" pos:end="79:39"><expr pos:start="77:26" pos:end="79:39"><literal type="string" pos:start="77:26" pos:end="77:69">"backing file specified, but streaming the "</literal>

                         <literal type="string" pos:start="79:26" pos:end="79:39">"entire chain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:56">/* backing_file string overrides base bs filename */</comment>

    <expr_stmt pos:start="89:5" pos:end="89:60"><expr pos:start="89:5" pos:end="89:59"><name pos:start="89:5" pos:end="89:13">base_name</name> <operator pos:start="89:15" pos:end="89:15">=</operator> <ternary pos:start="89:17" pos:end="89:59"><condition pos:start="89:17" pos:end="89:34"><expr pos:start="89:17" pos:end="89:32"><name pos:start="89:17" pos:end="89:32">has_backing_file</name></expr> ?</condition><then pos:start="89:36" pos:end="89:47"> <expr pos:start="89:36" pos:end="89:47"><name pos:start="89:36" pos:end="89:47">backing_file</name></expr> </then><else pos:start="89:49" pos:end="89:59">: <expr pos:start="89:51" pos:end="89:59"><name pos:start="89:51" pos:end="89:59">base_name</name></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="95:57"><expr pos:start="93:5" pos:end="95:56"><call pos:start="93:5" pos:end="95:56"><name pos:start="93:5" pos:end="93:16">stream_start</name><argument_list pos:start="93:17" pos:end="95:56">(<argument pos:start="93:18" pos:end="93:19"><expr pos:start="93:18" pos:end="93:19"><name pos:start="93:18" pos:end="93:19">bs</name></expr></argument>, <argument pos:start="93:22" pos:end="93:28"><expr pos:start="93:22" pos:end="93:28"><name pos:start="93:22" pos:end="93:28">base_bs</name></expr></argument>, <argument pos:start="93:31" pos:end="93:39"><expr pos:start="93:31" pos:end="93:39"><name pos:start="93:31" pos:end="93:39">base_name</name></expr></argument>, <argument pos:start="93:42" pos:end="93:62"><expr pos:start="93:42" pos:end="93:62"><ternary pos:start="93:42" pos:end="93:62"><condition pos:start="93:42" pos:end="93:52"><expr pos:start="93:42" pos:end="93:50"><name pos:start="93:42" pos:end="93:50">has_speed</name></expr> ?</condition><then pos:start="93:54" pos:end="93:58"> <expr pos:start="93:54" pos:end="93:58"><name pos:start="93:54" pos:end="93:58">speed</name></expr> </then><else pos:start="93:60" pos:end="93:62">: <expr pos:start="93:62" pos:end="93:62"><literal type="number" pos:start="93:62" pos:end="93:62">0</literal></expr></else></ternary></expr></argument>,

                 <argument pos:start="95:18" pos:end="95:25"><expr pos:start="95:18" pos:end="95:25"><name pos:start="95:18" pos:end="95:25">on_error</name></expr></argument>, <argument pos:start="95:28" pos:end="95:39"><expr pos:start="95:28" pos:end="95:39"><name pos:start="95:28" pos:end="95:39">block_job_cb</name></expr></argument>, <argument pos:start="95:42" pos:end="95:43"><expr pos:start="95:42" pos:end="95:43"><name pos:start="95:42" pos:end="95:43">bs</name></expr></argument>, <argument pos:start="95:46" pos:end="95:55"><expr pos:start="95:46" pos:end="95:55"><operator pos:start="95:46" pos:end="95:46">&amp;</operator><name pos:start="95:47" pos:end="95:55">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="103:5"><if pos:start="97:5" pos:end="103:5">if <condition pos:start="97:8" pos:end="97:18">(<expr pos:start="97:9" pos:end="97:17"><name pos:start="97:9" pos:end="97:17">local_err</name></expr>)</condition> <block pos:start="97:20" pos:end="103:5">{<block_content pos:start="99:9" pos:end="101:15">

        <expr_stmt pos:start="99:9" pos:end="99:41"><expr pos:start="99:9" pos:end="99:40"><call pos:start="99:9" pos:end="99:40"><name pos:start="99:9" pos:end="99:23">error_propagate</name><argument_list pos:start="99:24" pos:end="99:40">(<argument pos:start="99:25" pos:end="99:28"><expr pos:start="99:25" pos:end="99:28"><name pos:start="99:25" pos:end="99:28">errp</name></expr></argument>, <argument pos:start="99:31" pos:end="99:39"><expr pos:start="99:31" pos:end="99:39"><name pos:start="99:31" pos:end="99:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="101:9" pos:end="101:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:40"><expr pos:start="107:5" pos:end="107:39"><call pos:start="107:5" pos:end="107:39"><name pos:start="107:5" pos:end="107:26">trace_qmp_block_stream</name><argument_list pos:start="107:27" pos:end="107:39">(<argument pos:start="107:28" pos:end="107:29"><expr pos:start="107:28" pos:end="107:29"><name pos:start="107:28" pos:end="107:29">bs</name></expr></argument>, <argument pos:start="107:32" pos:end="107:38"><expr pos:start="107:32" pos:end="107:38"><name pos:start="107:32" pos:end="107:38"><name pos:start="107:32" pos:end="107:33">bs</name><operator pos:start="107:34" pos:end="107:35">-&gt;</operator><name pos:start="107:36" pos:end="107:38">job</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
