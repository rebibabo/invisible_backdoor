<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26625.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">v9fs_write</name><parameter_list pos:start="1:23" pos:end="1:36">(<parameter pos:start="1:24" pos:end="1:35"><decl pos:start="1:24" pos:end="1:35"><type pos:start="1:24" pos:end="1:29"><name pos:start="1:24" pos:end="1:27">void</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:35">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="133:1">{<block_content pos:start="5:5" pos:end="131:30">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">cnt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">ssize_t</name></type> <name pos:start="7:13" pos:end="7:15">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int32_t</name></type> <name pos:start="9:13" pos:end="9:15">fid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:15">off</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int32_t</name></type> <name pos:start="13:13" pos:end="13:17">count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int32_t</name></type> <name pos:start="15:13" pos:end="15:15">len</name> <init pos:start="15:17" pos:end="15:19">= <expr pos:start="15:19" pos:end="15:19"><literal type="number" pos:start="15:19" pos:end="15:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int32_t</name></type> <name pos:start="17:13" pos:end="17:17">total</name> <init pos:start="17:19" pos:end="17:21">= <expr pos:start="17:21" pos:end="17:21"><literal type="number" pos:start="17:21" pos:end="17:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:10">size_t</name></type> <name pos:start="19:12" pos:end="19:17">offset</name> <init pos:start="19:19" pos:end="19:21">= <expr pos:start="19:21" pos:end="19:21"><literal type="number" pos:start="19:21" pos:end="19:21">7</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">V9fsFidState</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:22">fidp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:26"><decl pos:start="23:5" pos:end="23:25"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:10">struct</name> <name pos:start="23:12" pos:end="23:16">iovec</name></name></type> <name pos:start="23:18" pos:end="23:25"><name pos:start="23:18" pos:end="23:20">iov</name><index pos:start="23:21" pos:end="23:25">[<expr pos:start="23:22" pos:end="23:24"><literal type="number" pos:start="23:22" pos:end="23:24">128</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block" pos:start="23:28" pos:end="23:53">/* FIXME: bad, bad, bad */</comment>

    <decl_stmt pos:start="25:5" pos:end="25:27"><decl pos:start="25:5" pos:end="25:26"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:10">struct</name> <name pos:start="25:12" pos:end="25:16">iovec</name></name> <modifier pos:start="25:18" pos:end="25:18">*</modifier></type><name pos:start="25:19" pos:end="25:20">sg</name> <init pos:start="25:22" pos:end="25:26">= <expr pos:start="25:24" pos:end="25:26"><name pos:start="25:24" pos:end="25:26">iov</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:26"><decl pos:start="27:5" pos:end="27:25"><type pos:start="27:5" pos:end="27:13"><name pos:start="27:5" pos:end="27:11">V9fsPDU</name> <modifier pos:start="27:13" pos:end="27:13">*</modifier></type><name pos:start="27:14" pos:end="27:16">pdu</name> <init pos:start="27:18" pos:end="27:25">= <expr pos:start="27:20" pos:end="27:25"><name pos:start="27:20" pos:end="27:25">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:26"><decl pos:start="29:5" pos:end="29:25"><type pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:13">V9fsState</name> <modifier pos:start="29:15" pos:end="29:15">*</modifier></type><name pos:start="29:16" pos:end="29:16">s</name> <init pos:start="29:18" pos:end="29:25">= <expr pos:start="29:20" pos:end="29:25"><name pos:start="29:20" pos:end="29:25"><name pos:start="29:20" pos:end="29:22">pdu</name><operator pos:start="29:23" pos:end="29:24">-&gt;</operator><name pos:start="29:25" pos:end="29:25">s</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:69"><expr pos:start="33:5" pos:end="33:68"><call pos:start="33:5" pos:end="33:68"><name pos:start="33:5" pos:end="33:17">pdu_unmarshal</name><argument_list pos:start="33:18" pos:end="33:68">(<argument pos:start="33:19" pos:end="33:21"><expr pos:start="33:19" pos:end="33:21"><name pos:start="33:19" pos:end="33:21">pdu</name></expr></argument>, <argument pos:start="33:24" pos:end="33:29"><expr pos:start="33:24" pos:end="33:29"><name pos:start="33:24" pos:end="33:29">offset</name></expr></argument>, <argument pos:start="33:32" pos:end="33:37"><expr pos:start="33:32" pos:end="33:37"><literal type="string" pos:start="33:32" pos:end="33:37">"dqdv"</literal></expr></argument>, <argument pos:start="33:40" pos:end="33:43"><expr pos:start="33:40" pos:end="33:43"><operator pos:start="33:40" pos:end="33:40">&amp;</operator><name pos:start="33:41" pos:end="33:43">fid</name></expr></argument>, <argument pos:start="33:46" pos:end="33:49"><expr pos:start="33:46" pos:end="33:49"><operator pos:start="33:46" pos:end="33:46">&amp;</operator><name pos:start="33:47" pos:end="33:49">off</name></expr></argument>, <argument pos:start="33:52" pos:end="33:57"><expr pos:start="33:52" pos:end="33:57"><operator pos:start="33:52" pos:end="33:52">&amp;</operator><name pos:start="33:53" pos:end="33:57">count</name></expr></argument>, <argument pos:start="33:60" pos:end="33:61"><expr pos:start="33:60" pos:end="33:61"><name pos:start="33:60" pos:end="33:61">sg</name></expr></argument>, <argument pos:start="33:64" pos:end="33:67"><expr pos:start="33:64" pos:end="33:67"><operator pos:start="33:64" pos:end="33:64">&amp;</operator><name pos:start="33:65" pos:end="33:67">cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:62"><expr pos:start="35:5" pos:end="35:61"><call pos:start="35:5" pos:end="35:61"><name pos:start="35:5" pos:end="35:20">trace_v9fs_write</name><argument_list pos:start="35:21" pos:end="35:61">(<argument pos:start="35:22" pos:end="35:29"><expr pos:start="35:22" pos:end="35:29"><name pos:start="35:22" pos:end="35:29"><name pos:start="35:22" pos:end="35:24">pdu</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:29">tag</name></name></expr></argument>, <argument pos:start="35:32" pos:end="35:38"><expr pos:start="35:32" pos:end="35:38"><name pos:start="35:32" pos:end="35:38"><name pos:start="35:32" pos:end="35:34">pdu</name><operator pos:start="35:35" pos:end="35:36">-&gt;</operator><name pos:start="35:37" pos:end="35:38">id</name></name></expr></argument>, <argument pos:start="35:41" pos:end="35:43"><expr pos:start="35:41" pos:end="35:43"><name pos:start="35:41" pos:end="35:43">fid</name></expr></argument>, <argument pos:start="35:46" pos:end="35:48"><expr pos:start="35:46" pos:end="35:48"><name pos:start="35:46" pos:end="35:48">off</name></expr></argument>, <argument pos:start="35:51" pos:end="35:55"><expr pos:start="35:51" pos:end="35:55"><name pos:start="35:51" pos:end="35:55">count</name></expr></argument>, <argument pos:start="35:58" pos:end="35:60"><expr pos:start="35:58" pos:end="35:60"><name pos:start="35:58" pos:end="35:60">cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:29"><expr pos:start="39:5" pos:end="39:28"><name pos:start="39:5" pos:end="39:8">fidp</name> <operator pos:start="39:10" pos:end="39:10">=</operator> <call pos:start="39:12" pos:end="39:28"><name pos:start="39:12" pos:end="39:18">get_fid</name><argument_list pos:start="39:19" pos:end="39:28">(<argument pos:start="39:20" pos:end="39:22"><expr pos:start="39:20" pos:end="39:22"><name pos:start="39:20" pos:end="39:22">pdu</name></expr></argument>, <argument pos:start="39:25" pos:end="39:27"><expr pos:start="39:25" pos:end="39:27"><name pos:start="39:25" pos:end="39:27">fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:21">(<expr pos:start="41:9" pos:end="41:20"><name pos:start="41:9" pos:end="41:12">fidp</name> <operator pos:start="41:14" pos:end="41:15">==</operator> <name pos:start="41:17" pos:end="41:20">NULL</name></expr>)</condition> <block pos:start="41:23" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:23">

        <expr_stmt pos:start="43:9" pos:end="43:22"><expr pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:11">err</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <operator pos:start="43:15" pos:end="43:15">-</operator><name pos:start="43:16" pos:end="43:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="45:9" pos:end="45:23">goto <name pos:start="45:14" pos:end="45:22">out_nofid</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="49:5" pos:end="77:5"><if pos:start="49:5" pos:end="59:5">if <condition pos:start="49:8" pos:end="49:38">(<expr pos:start="49:9" pos:end="49:37"><name pos:start="49:9" pos:end="49:22"><name pos:start="49:9" pos:end="49:12">fidp</name><operator pos:start="49:13" pos:end="49:14">-&gt;</operator><name pos:start="49:15" pos:end="49:22">fid_type</name></name> <operator pos:start="49:24" pos:end="49:25">==</operator> <name pos:start="49:27" pos:end="49:37">P9_FID_FILE</name></expr>)</condition> <block pos:start="49:40" pos:end="59:5">{<block_content pos:start="51:9" pos:end="57:9">

        <if_stmt pos:start="51:9" pos:end="57:9"><if pos:start="51:9" pos:end="57:9">if <condition pos:start="51:12" pos:end="51:30">(<expr pos:start="51:13" pos:end="51:29"><name pos:start="51:13" pos:end="51:23"><name pos:start="51:13" pos:end="51:16">fidp</name><operator pos:start="51:17" pos:end="51:18">-&gt;</operator><name pos:start="51:19" pos:end="51:20">fs</name><operator pos:start="51:21" pos:end="51:21">.</operator><name pos:start="51:22" pos:end="51:23">fd</name></name> <operator pos:start="51:25" pos:end="51:26">==</operator> <operator pos:start="51:28" pos:end="51:28">-</operator><literal type="number" pos:start="51:29" pos:end="51:29">1</literal></expr>)</condition> <block pos:start="51:32" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:21">

            <expr_stmt pos:start="53:13" pos:end="53:26"><expr pos:start="53:13" pos:end="53:25"><name pos:start="53:13" pos:end="53:15">err</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <operator pos:start="53:19" pos:end="53:19">-</operator><name pos:start="53:20" pos:end="53:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="55:13" pos:end="55:21">goto <name pos:start="55:18" pos:end="55:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="59:7" pos:end="71:5">else if <condition pos:start="59:15" pos:end="59:46">(<expr pos:start="59:16" pos:end="59:45"><name pos:start="59:16" pos:end="59:29"><name pos:start="59:16" pos:end="59:19">fidp</name><operator pos:start="59:20" pos:end="59:21">-&gt;</operator><name pos:start="59:22" pos:end="59:29">fid_type</name></name> <operator pos:start="59:31" pos:end="59:32">==</operator> <name pos:start="59:34" pos:end="59:45">P9_FID_XATTR</name></expr>)</condition> <block pos:start="59:48" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:17">

        <comment type="block" pos:start="61:9" pos:end="65:11">/*

         * setxattr operation

         */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:66"><expr pos:start="67:9" pos:end="67:65"><name pos:start="67:9" pos:end="67:11">err</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <call pos:start="67:15" pos:end="67:65"><name pos:start="67:15" pos:end="67:30">v9fs_xattr_write</name><argument_list pos:start="67:31" pos:end="67:65">(<argument pos:start="67:32" pos:end="67:32"><expr pos:start="67:32" pos:end="67:32"><name pos:start="67:32" pos:end="67:32">s</name></expr></argument>, <argument pos:start="67:35" pos:end="67:37"><expr pos:start="67:35" pos:end="67:37"><name pos:start="67:35" pos:end="67:37">pdu</name></expr></argument>, <argument pos:start="67:40" pos:end="67:43"><expr pos:start="67:40" pos:end="67:43"><name pos:start="67:40" pos:end="67:43">fidp</name></expr></argument>, <argument pos:start="67:46" pos:end="67:48"><expr pos:start="67:46" pos:end="67:48"><name pos:start="67:46" pos:end="67:48">off</name></expr></argument>, <argument pos:start="67:51" pos:end="67:55"><expr pos:start="67:51" pos:end="67:55"><name pos:start="67:51" pos:end="67:55">count</name></expr></argument>, <argument pos:start="67:58" pos:end="67:59"><expr pos:start="67:58" pos:end="67:59"><name pos:start="67:58" pos:end="67:59">sg</name></expr></argument>, <argument pos:start="67:62" pos:end="67:64"><expr pos:start="67:62" pos:end="67:64"><name pos:start="67:62" pos:end="67:64">cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="69:9" pos:end="69:17">goto <name pos:start="69:14" pos:end="69:16">out</name>;</goto>

    </block_content>}</block></if> <else pos:start="71:7" pos:end="77:5">else <block pos:start="71:12" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:17">

        <expr_stmt pos:start="73:9" pos:end="73:22"><expr pos:start="73:9" pos:end="73:21"><name pos:start="73:9" pos:end="73:11">err</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <operator pos:start="73:15" pos:end="73:15">-</operator><name pos:start="73:16" pos:end="73:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="75:9" pos:end="75:17">goto <name pos:start="75:14" pos:end="75:16">out</name>;</goto>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:33"><expr pos:start="79:5" pos:end="79:32"><name pos:start="79:5" pos:end="79:6">sg</name> <operator pos:start="79:8" pos:end="79:8">=</operator> <call pos:start="79:10" pos:end="79:32"><name pos:start="79:10" pos:end="79:15">cap_sg</name><argument_list pos:start="79:16" pos:end="79:32">(<argument pos:start="79:17" pos:end="79:18"><expr pos:start="79:17" pos:end="79:18"><name pos:start="79:17" pos:end="79:18">sg</name></expr></argument>, <argument pos:start="79:21" pos:end="79:25"><expr pos:start="79:21" pos:end="79:25"><name pos:start="79:21" pos:end="79:25">count</name></expr></argument>, <argument pos:start="79:28" pos:end="79:31"><expr pos:start="79:28" pos:end="79:31"><operator pos:start="79:28" pos:end="79:28">&amp;</operator><name pos:start="79:29" pos:end="79:31">cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <do pos:start="81:5" pos:end="117:39">do <block pos:start="81:8" pos:end="117:5">{<block_content pos:start="83:9" pos:end="115:38">

        <if_stmt pos:start="83:9" pos:end="87:9"><if pos:start="83:9" pos:end="87:9">if <condition pos:start="83:12" pos:end="83:14">(<expr pos:start="83:13" pos:end="83:13"><literal type="number" pos:start="83:13" pos:end="83:13">0</literal></expr>)</condition> <block pos:start="83:16" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:30">

            <expr_stmt pos:start="85:13" pos:end="85:30"><expr pos:start="85:13" pos:end="85:29"><call pos:start="85:13" pos:end="85:29"><name pos:start="85:13" pos:end="85:20">print_sg</name><argument_list pos:start="85:21" pos:end="85:29">(<argument pos:start="85:22" pos:end="85:23"><expr pos:start="85:22" pos:end="85:23"><name pos:start="85:22" pos:end="85:23">sg</name></expr></argument>, <argument pos:start="85:26" pos:end="85:28"><expr pos:start="85:26" pos:end="85:28"><name pos:start="85:26" pos:end="85:28">cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="89:9" pos:end="89:35">/* Loop in case of EINTR */</comment>

        <do pos:start="91:9" pos:end="103:51">do <block pos:start="91:12" pos:end="103:9">{<block_content pos:start="93:13" pos:end="101:13">

            <expr_stmt pos:start="93:13" pos:end="93:59"><expr pos:start="93:13" pos:end="93:58"><name pos:start="93:13" pos:end="93:15">len</name> <operator pos:start="93:17" pos:end="93:17">=</operator> <call pos:start="93:19" pos:end="93:58"><name pos:start="93:19" pos:end="93:33">v9fs_co_pwritev</name><argument_list pos:start="93:34" pos:end="93:58">(<argument pos:start="93:35" pos:end="93:37"><expr pos:start="93:35" pos:end="93:37"><name pos:start="93:35" pos:end="93:37">pdu</name></expr></argument>, <argument pos:start="93:40" pos:end="93:43"><expr pos:start="93:40" pos:end="93:43"><name pos:start="93:40" pos:end="93:43">fidp</name></expr></argument>, <argument pos:start="93:46" pos:end="93:47"><expr pos:start="93:46" pos:end="93:47"><name pos:start="93:46" pos:end="93:47">sg</name></expr></argument>, <argument pos:start="93:50" pos:end="93:52"><expr pos:start="93:50" pos:end="93:52"><name pos:start="93:50" pos:end="93:52">cnt</name></expr></argument>, <argument pos:start="93:55" pos:end="93:57"><expr pos:start="93:55" pos:end="93:57"><name pos:start="93:55" pos:end="93:57">off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="95:13" pos:end="101:13"><if pos:start="95:13" pos:end="101:13">if <condition pos:start="95:16" pos:end="95:25">(<expr pos:start="95:17" pos:end="95:24"><name pos:start="95:17" pos:end="95:19">len</name> <operator pos:start="95:21" pos:end="95:22">&gt;=</operator> <literal type="number" pos:start="95:24" pos:end="95:24">0</literal></expr>)</condition> <block pos:start="95:27" pos:end="101:13">{<block_content pos:start="97:17" pos:end="99:29">

                <expr_stmt pos:start="97:17" pos:end="97:29"><expr pos:start="97:17" pos:end="97:28"><name pos:start="97:17" pos:end="97:19">off</name>   <operator pos:start="97:23" pos:end="97:24">+=</operator> <name pos:start="97:26" pos:end="97:28">len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:29"><expr pos:start="99:17" pos:end="99:28"><name pos:start="99:17" pos:end="99:21">total</name> <operator pos:start="99:23" pos:end="99:24">+=</operator> <name pos:start="99:26" pos:end="99:28">len</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block> while <condition pos:start="103:17" pos:end="103:50">(<expr pos:start="103:18" pos:end="103:49"><name pos:start="103:18" pos:end="103:20">len</name> <operator pos:start="103:22" pos:end="103:23">==</operator> <operator pos:start="103:25" pos:end="103:25">-</operator><name pos:start="103:26" pos:end="103:30">EINTR</name> <operator pos:start="103:32" pos:end="103:33">&amp;&amp;</operator> <operator pos:start="103:35" pos:end="103:35">!</operator><name pos:start="103:36" pos:end="103:49"><name pos:start="103:36" pos:end="103:38">pdu</name><operator pos:start="103:39" pos:end="103:40">-&gt;</operator><name pos:start="103:41" pos:end="103:49">cancelled</name></name></expr>)</condition>;</do>

        <if_stmt pos:start="105:9" pos:end="113:9"><if pos:start="105:9" pos:end="113:9">if <condition pos:start="105:12" pos:end="105:20">(<expr pos:start="105:13" pos:end="105:19"><name pos:start="105:13" pos:end="105:15">len</name> <operator pos:start="105:17" pos:end="105:17">&lt;</operator> <literal type="number" pos:start="105:19" pos:end="105:19">0</literal></expr>)</condition> <block pos:start="105:22" pos:end="113:9">{<block_content pos:start="109:13" pos:end="111:21">

            <comment type="block" pos:start="107:13" pos:end="107:43">/* IO error return the error */</comment>

            <expr_stmt pos:start="109:13" pos:end="109:22"><expr pos:start="109:13" pos:end="109:21"><name pos:start="109:13" pos:end="109:15">err</name> <operator pos:start="109:17" pos:end="109:17">=</operator> <name pos:start="109:19" pos:end="109:21">len</name></expr>;</expr_stmt>

            <goto pos:start="111:13" pos:end="111:21">goto <name pos:start="111:18" pos:end="111:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:38"><expr pos:start="115:9" pos:end="115:37"><name pos:start="115:9" pos:end="115:10">sg</name> <operator pos:start="115:12" pos:end="115:12">=</operator> <call pos:start="115:14" pos:end="115:37"><name pos:start="115:14" pos:end="115:22">adjust_sg</name><argument_list pos:start="115:23" pos:end="115:37">(<argument pos:start="115:24" pos:end="115:25"><expr pos:start="115:24" pos:end="115:25"><name pos:start="115:24" pos:end="115:25">sg</name></expr></argument>, <argument pos:start="115:28" pos:end="115:30"><expr pos:start="115:28" pos:end="115:30"><name pos:start="115:28" pos:end="115:30">len</name></expr></argument>, <argument pos:start="115:33" pos:end="115:36"><expr pos:start="115:33" pos:end="115:36"><operator pos:start="115:33" pos:end="115:33">&amp;</operator><name pos:start="115:34" pos:end="115:36">cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="117:13" pos:end="117:38">(<expr pos:start="117:14" pos:end="117:37"><name pos:start="117:14" pos:end="117:35"><name pos:start="117:14" pos:end="117:18">total</name> <argument_list type="generic" pos:start="117:20" pos:end="117:35">&lt; <argument pos:start="117:22" pos:end="117:33"><expr pos:start="117:22" pos:end="117:33"><name pos:start="117:22" pos:end="117:26">count</name> <operator pos:start="117:28" pos:end="117:29">&amp;&amp;</operator> <name pos:start="117:31" pos:end="117:33">len</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="117:37" pos:end="117:37">0</literal></expr>)</condition>;</do>

    <expr_stmt pos:start="119:5" pos:end="119:51"><expr pos:start="119:5" pos:end="119:50"><name pos:start="119:5" pos:end="119:10">offset</name> <operator pos:start="119:12" pos:end="119:13">+=</operator> <call pos:start="119:15" pos:end="119:50"><name pos:start="119:15" pos:end="119:25">pdu_marshal</name><argument_list pos:start="119:26" pos:end="119:50">(<argument pos:start="119:27" pos:end="119:29"><expr pos:start="119:27" pos:end="119:29"><name pos:start="119:27" pos:end="119:29">pdu</name></expr></argument>, <argument pos:start="119:32" pos:end="119:37"><expr pos:start="119:32" pos:end="119:37"><name pos:start="119:32" pos:end="119:37">offset</name></expr></argument>, <argument pos:start="119:40" pos:end="119:42"><expr pos:start="119:40" pos:end="119:42"><literal type="string" pos:start="119:40" pos:end="119:42">"d"</literal></expr></argument>, <argument pos:start="119:45" pos:end="119:49"><expr pos:start="119:45" pos:end="119:49"><name pos:start="119:45" pos:end="119:49">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:17"><expr pos:start="121:5" pos:end="121:16"><name pos:start="121:5" pos:end="121:7">err</name> <operator pos:start="121:9" pos:end="121:9">=</operator> <name pos:start="121:11" pos:end="121:16">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:59"><expr pos:start="123:5" pos:end="123:58"><call pos:start="123:5" pos:end="123:58"><name pos:start="123:5" pos:end="123:27">trace_v9fs_write_return</name><argument_list pos:start="123:28" pos:end="123:58">(<argument pos:start="123:29" pos:end="123:36"><expr pos:start="123:29" pos:end="123:36"><name pos:start="123:29" pos:end="123:36"><name pos:start="123:29" pos:end="123:31">pdu</name><operator pos:start="123:32" pos:end="123:33">-&gt;</operator><name pos:start="123:34" pos:end="123:36">tag</name></name></expr></argument>, <argument pos:start="123:39" pos:end="123:45"><expr pos:start="123:39" pos:end="123:45"><name pos:start="123:39" pos:end="123:45"><name pos:start="123:39" pos:end="123:41">pdu</name><operator pos:start="123:42" pos:end="123:43">-&gt;</operator><name pos:start="123:44" pos:end="123:45">id</name></name></expr></argument>, <argument pos:start="123:48" pos:end="123:52"><expr pos:start="123:48" pos:end="123:52"><name pos:start="123:48" pos:end="123:52">total</name></expr></argument>, <argument pos:start="123:55" pos:end="123:57"><expr pos:start="123:55" pos:end="123:57"><name pos:start="123:55" pos:end="123:57">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="125:1" pos:end="125:4"><name pos:start="125:1" pos:end="125:3">out</name>:</label>

    <expr_stmt pos:start="127:5" pos:end="127:23"><expr pos:start="127:5" pos:end="127:22"><call pos:start="127:5" pos:end="127:22"><name pos:start="127:5" pos:end="127:11">put_fid</name><argument_list pos:start="127:12" pos:end="127:22">(<argument pos:start="127:13" pos:end="127:15"><expr pos:start="127:13" pos:end="127:15"><name pos:start="127:13" pos:end="127:15">pdu</name></expr></argument>, <argument pos:start="127:18" pos:end="127:21"><expr pos:start="127:18" pos:end="127:21"><name pos:start="127:18" pos:end="127:21">fidp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="129:1" pos:end="129:10"><name pos:start="129:1" pos:end="129:9">out_nofid</name>:</label>

    <expr_stmt pos:start="131:5" pos:end="131:30"><expr pos:start="131:5" pos:end="131:29"><call pos:start="131:5" pos:end="131:29"><name pos:start="131:5" pos:end="131:16">complete_pdu</name><argument_list pos:start="131:17" pos:end="131:29">(<argument pos:start="131:18" pos:end="131:18"><expr pos:start="131:18" pos:end="131:18"><name pos:start="131:18" pos:end="131:18">s</name></expr></argument>, <argument pos:start="131:21" pos:end="131:23"><expr pos:start="131:21" pos:end="131:23"><name pos:start="131:21" pos:end="131:23">pdu</name></expr></argument>, <argument pos:start="131:26" pos:end="131:28"><expr pos:start="131:26" pos:end="131:28"><name pos:start="131:26" pos:end="131:28">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
