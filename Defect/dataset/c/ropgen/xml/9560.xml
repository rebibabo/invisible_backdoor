<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9560.c" pos:tabs="8"><function pos:start="1:1" pos:end="561:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">pc_init1</name><parameter_list pos:start="1:21" pos:end="13:37">(<parameter pos:start="1:22" pos:end="1:40"><decl pos:start="1:22" pos:end="1:40"><type pos:start="1:22" pos:end="1:40"><name pos:start="1:22" pos:end="1:31">ram_addr_t</name></type> <name pos:start="1:33" pos:end="1:40">ram_size</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:44"><decl pos:start="3:22" pos:end="3:44"><type pos:start="3:22" pos:end="3:44"><specifier pos:start="3:22" pos:end="3:26">const</specifier> <name pos:start="3:28" pos:end="3:31">char</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:44">boot_device</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:48"><decl pos:start="5:22" pos:end="5:48"><type pos:start="5:22" pos:end="5:48"><specifier pos:start="5:22" pos:end="5:26">const</specifier> <name pos:start="5:28" pos:end="5:31">char</name> <modifier pos:start="5:33" pos:end="5:33">*</modifier></type><name pos:start="5:34" pos:end="5:48">kernel_filename</name></decl></parameter>,

                     <parameter pos:start="7:22" pos:end="7:47"><decl pos:start="7:22" pos:end="7:47"><type pos:start="7:22" pos:end="7:47"><specifier pos:start="7:22" pos:end="7:26">const</specifier> <name pos:start="7:28" pos:end="7:31">char</name> <modifier pos:start="7:33" pos:end="7:33">*</modifier></type><name pos:start="7:34" pos:end="7:47">kernel_cmdline</name></decl></parameter>,

                     <parameter pos:start="9:22" pos:end="9:48"><decl pos:start="9:22" pos:end="9:48"><type pos:start="9:22" pos:end="9:48"><specifier pos:start="9:22" pos:end="9:26">const</specifier> <name pos:start="9:28" pos:end="9:31">char</name> <modifier pos:start="9:33" pos:end="9:33">*</modifier></type><name pos:start="9:34" pos:end="9:48">initrd_filename</name></decl></parameter>,

                     <parameter pos:start="11:22" pos:end="11:42"><decl pos:start="11:22" pos:end="11:42"><type pos:start="11:22" pos:end="11:42"><specifier pos:start="11:22" pos:end="11:26">const</specifier> <name pos:start="11:28" pos:end="11:31">char</name> <modifier pos:start="11:33" pos:end="11:33">*</modifier></type><name pos:start="11:34" pos:end="11:42">cpu_model</name></decl></parameter>,

                     <parameter pos:start="13:22" pos:end="13:36"><decl pos:start="13:22" pos:end="13:36"><type pos:start="13:22" pos:end="13:36"><name pos:start="13:22" pos:end="13:24">int</name></type> <name pos:start="13:26" pos:end="13:36">pci_enabled</name></decl></parameter>)</parameter_list>

<block pos:start="15:1" pos:end="561:1">{<block_content pos:start="17:5" pos:end="559:24">

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">char</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>, <decl pos:start="19:14" pos:end="19:23"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:14" pos:end="19:23">linux_boot</name></decl>, <decl pos:start="19:26" pos:end="19:26"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:26" pos:end="19:26">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:56"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:14">ram_addr_t</name></type> <name pos:start="21:16" pos:end="21:23">ram_addr</name></decl>, <decl pos:start="21:26" pos:end="21:36"><type ref="prev" pos:start="21:5" pos:end="21:14"/><name pos:start="21:26" pos:end="21:36">bios_offset</name></decl>, <decl pos:start="21:39" pos:end="21:55"><type ref="prev" pos:start="21:5" pos:end="21:14"/><name pos:start="21:39" pos:end="21:55">option_rom_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:56"><decl pos:start="23:5" pos:end="23:32"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:14">ram_addr_t</name></type> <name pos:start="23:16" pos:end="23:32">below_4g_mem_size</name></decl>, <decl pos:start="23:35" pos:end="23:55"><type ref="prev" pos:start="23:5" pos:end="23:14"/><name pos:start="23:35" pos:end="23:51">above_4g_mem_size</name> <init pos:start="23:53" pos:end="23:55">= <expr pos:start="23:55" pos:end="23:55"><literal type="number" pos:start="23:55" pos:end="23:55">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:33"><decl pos:start="25:5" pos:end="25:17"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:17">bios_size</name></decl>, <decl pos:start="25:20" pos:end="25:32"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:20" pos:end="25:32">isa_bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:20"><decl pos:start="27:5" pos:end="27:19"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:10">PCIBus</name> <modifier pos:start="27:12" pos:end="27:12">*</modifier></type><name pos:start="27:13" pos:end="27:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:23"><decl pos:start="29:5" pos:end="29:22"><type pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:13">ISADevice</name> <modifier pos:start="29:15" pos:end="29:15">*</modifier></type><name pos:start="29:16" pos:end="29:22">isa_dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:25"><decl pos:start="31:5" pos:end="31:24"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:19">piix3_devfn</name> <init pos:start="31:21" pos:end="31:24">= <expr pos:start="31:23" pos:end="31:24"><operator pos:start="31:23" pos:end="31:23">-</operator><literal type="number" pos:start="31:24" pos:end="31:24">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:18"><decl pos:start="33:5" pos:end="33:17"><type pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:12">CPUState</name> <modifier pos:start="33:14" pos:end="33:14">*</modifier></type><name pos:start="33:15" pos:end="33:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:22"><decl pos:start="35:5" pos:end="35:21"><type pos:start="35:5" pos:end="35:14"><name pos:start="35:5" pos:end="35:12">qemu_irq</name> <modifier pos:start="35:14" pos:end="35:14">*</modifier></type><name pos:start="35:15" pos:end="35:21">cpu_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:22"><decl pos:start="37:5" pos:end="37:21"><type pos:start="37:5" pos:end="37:14"><name pos:start="37:5" pos:end="37:12">qemu_irq</name> <modifier pos:start="37:14" pos:end="37:14">*</modifier></type><name pos:start="37:15" pos:end="37:21">isa_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:20"><decl pos:start="39:5" pos:end="39:19"><type pos:start="39:5" pos:end="39:14"><name pos:start="39:5" pos:end="39:12">qemu_irq</name> <modifier pos:start="39:14" pos:end="39:14">*</modifier></type><name pos:start="39:15" pos:end="39:19">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:31"><decl pos:start="41:5" pos:end="41:30"><type pos:start="41:5" pos:end="41:17"><name pos:start="41:5" pos:end="41:15">IsaIrqState</name> <modifier pos:start="41:17" pos:end="41:17">*</modifier></type><name pos:start="41:18" pos:end="41:30">isa_irq_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:46"><decl pos:start="43:5" pos:end="43:45"><type pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:13">DriveInfo</name> <modifier pos:start="43:15" pos:end="43:15">*</modifier></type><name pos:start="43:16" pos:end="43:45"><name pos:start="43:16" pos:end="43:17">hd</name><index pos:start="43:18" pos:end="43:45">[<expr pos:start="43:19" pos:end="43:44"><name pos:start="43:19" pos:end="43:29">MAX_IDE_BUS</name> <operator pos:start="43:31" pos:end="43:31">*</operator> <name pos:start="43:33" pos:end="43:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:26"><decl pos:start="45:5" pos:end="45:25"><type pos:start="45:5" pos:end="45:15"><name pos:start="45:5" pos:end="45:13">DriveInfo</name> <modifier pos:start="45:15" pos:end="45:15">*</modifier></type><name pos:start="45:16" pos:end="45:25"><name pos:start="45:16" pos:end="45:17">fd</name><index pos:start="45:18" pos:end="45:25">[<expr pos:start="45:19" pos:end="45:24"><name pos:start="45:19" pos:end="45:24">MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:17"><decl pos:start="47:5" pos:end="47:16"><type pos:start="47:5" pos:end="47:10"><name pos:start="47:5" pos:end="47:8">void</name> <modifier pos:start="47:10" pos:end="47:10">*</modifier></type><name pos:start="47:11" pos:end="47:16">fw_cfg</name></decl>;</decl_stmt>



    <if_stmt pos:start="51:5" pos:end="61:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:32">(<expr pos:start="51:9" pos:end="51:30"><name pos:start="51:9" pos:end="51:16">ram_size</name> <operator pos:start="51:18" pos:end="51:19">&gt;=</operator> <literal type="number" pos:start="51:21" pos:end="51:30">0xe0000000</literal></expr> )</condition> <block pos:start="51:34" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:39">

        <expr_stmt pos:start="53:9" pos:end="53:50"><expr pos:start="53:9" pos:end="53:49"><name pos:start="53:9" pos:end="53:25">above_4g_mem_size</name> <operator pos:start="53:27" pos:end="53:27">=</operator> <name pos:start="53:29" pos:end="53:36">ram_size</name> <operator pos:start="53:38" pos:end="53:38">-</operator> <literal type="number" pos:start="53:40" pos:end="53:49">0xe0000000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:39"><expr pos:start="55:9" pos:end="55:38"><name pos:start="55:9" pos:end="55:25">below_4g_mem_size</name> <operator pos:start="55:27" pos:end="55:27">=</operator> <literal type="number" pos:start="55:29" pos:end="55:38">0xe0000000</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="57:7" pos:end="61:5">else <block pos:start="57:12" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:37">

        <expr_stmt pos:start="59:9" pos:end="59:37"><expr pos:start="59:9" pos:end="59:36"><name pos:start="59:9" pos:end="59:25">below_4g_mem_size</name> <operator pos:start="59:27" pos:end="59:27">=</operator> <name pos:start="59:29" pos:end="59:36">ram_size</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:43"><expr pos:start="65:5" pos:end="65:42"><name pos:start="65:5" pos:end="65:14">linux_boot</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <operator pos:start="65:18" pos:end="65:18">(</operator><name pos:start="65:19" pos:end="65:33">kernel_filename</name> <operator pos:start="65:35" pos:end="65:36">!=</operator> <name pos:start="65:38" pos:end="65:41">NULL</name><operator pos:start="65:42" pos:end="65:42">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="69:5" pos:end="69:19">/* init CPUs */</comment>

    <if_stmt pos:start="71:5" pos:end="83:5"><if pos:start="71:5" pos:end="83:5">if <condition pos:start="71:8" pos:end="71:26">(<expr pos:start="71:9" pos:end="71:25"><name pos:start="71:9" pos:end="71:17">cpu_model</name> <operator pos:start="71:19" pos:end="71:20">==</operator> <name pos:start="71:22" pos:end="71:25">NULL</name></expr>)</condition> <block pos:start="71:28" pos:end="83:5">{<block_content pos:start="75:9" pos:end="82:0">

<cpp:ifdef pos:start="73:1" pos:end="73:20">#<cpp:directive pos:start="73:2" pos:end="73:6">ifdef</cpp:directive> <name pos:start="73:8" pos:end="73:20">TARGET_X86_64</name></cpp:ifdef>

        <expr_stmt pos:start="75:9" pos:end="78:0"><expr pos:start="75:9" pos:end="75:28"><name pos:start="75:9" pos:end="75:17">cpu_model</name> <operator pos:start="75:19" pos:end="75:19">=</operator> <literal type="string" pos:start="75:21" pos:end="75:28">"qemu64"</literal></expr>;</expr_stmt>

<cpp:else pos:start="77:1" pos:end="77:5">#<cpp:directive pos:start="77:2" pos:end="77:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="79:9" pos:end="82:0"><expr pos:start="79:9" pos:end="79:28"><name pos:start="79:9" pos:end="79:17">cpu_model</name> <operator pos:start="79:19" pos:end="79:19">=</operator> <literal type="string" pos:start="79:21" pos:end="79:28">"qemu32"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="81:1" pos:end="81:6">#<cpp:directive pos:start="81:2" pos:end="81:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



    <for pos:start="87:5" pos:end="91:5">for <control pos:start="87:9" pos:end="87:34">(<init pos:start="87:10" pos:end="87:15"><expr pos:start="87:10" pos:end="87:14"><name pos:start="87:10" pos:end="87:10">i</name> <operator pos:start="87:12" pos:end="87:12">=</operator> <literal type="number" pos:start="87:14" pos:end="87:14">0</literal></expr>;</init> <condition pos:start="87:17" pos:end="87:29"><expr pos:start="87:17" pos:end="87:28"><name pos:start="87:17" pos:end="87:17">i</name> <operator pos:start="87:19" pos:end="87:19">&lt;</operator> <name pos:start="87:21" pos:end="87:28">smp_cpus</name></expr>;</condition> <incr pos:start="87:31" pos:end="87:33"><expr pos:start="87:31" pos:end="87:33"><name pos:start="87:31" pos:end="87:31">i</name><operator pos:start="87:32" pos:end="87:33">++</operator></expr></incr>)</control> <block pos:start="87:36" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:36">

        <expr_stmt pos:start="89:9" pos:end="89:36"><expr pos:start="89:9" pos:end="89:35"><name pos:start="89:9" pos:end="89:11">env</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <call pos:start="89:15" pos:end="89:35"><name pos:start="89:15" pos:end="89:24">pc_new_cpu</name><argument_list pos:start="89:25" pos:end="89:35">(<argument pos:start="89:26" pos:end="89:34"><expr pos:start="89:26" pos:end="89:34"><name pos:start="89:26" pos:end="89:34">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="95:5" pos:end="95:18"><expr pos:start="95:5" pos:end="95:17"><call pos:start="95:5" pos:end="95:17"><name pos:start="95:5" pos:end="95:15">vmport_init</name><argument_list pos:start="95:16" pos:end="95:17">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:39"><expr pos:start="101:5" pos:end="101:38"><name pos:start="101:5" pos:end="101:12">ram_addr</name> <operator pos:start="101:14" pos:end="101:14">=</operator> <call pos:start="101:16" pos:end="101:38"><name pos:start="101:16" pos:end="101:29">qemu_ram_alloc</name><argument_list pos:start="101:30" pos:end="101:38">(<argument pos:start="101:31" pos:end="101:37"><expr pos:start="101:31" pos:end="101:37"><literal type="number" pos:start="101:31" pos:end="101:37">0xa0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:55"><expr pos:start="103:5" pos:end="103:54"><call pos:start="103:5" pos:end="103:54"><name pos:start="103:5" pos:end="103:32">cpu_register_physical_memory</name><argument_list pos:start="103:33" pos:end="103:54">(<argument pos:start="103:34" pos:end="103:34"><expr pos:start="103:34" pos:end="103:34"><literal type="number" pos:start="103:34" pos:end="103:34">0</literal></expr></argument>, <argument pos:start="103:37" pos:end="103:43"><expr pos:start="103:37" pos:end="103:43"><literal type="number" pos:start="103:37" pos:end="103:43">0xa0000</literal></expr></argument>, <argument pos:start="103:46" pos:end="103:53"><expr pos:start="103:46" pos:end="103:53"><name pos:start="103:46" pos:end="103:53">ram_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="107:5" pos:end="113:7">/* Allocate, even though we won't register, so we don't break the

     * phys_ram_base + PA assumption. This range includes vga (0xa0000 - 0xc0000),

     * and some bios areas, which will be registered later

     */</comment>

    <expr_stmt pos:start="115:5" pos:end="115:50"><expr pos:start="115:5" pos:end="115:49"><name pos:start="115:5" pos:end="115:12">ram_addr</name> <operator pos:start="115:14" pos:end="115:14">=</operator> <call pos:start="115:16" pos:end="115:49"><name pos:start="115:16" pos:end="115:29">qemu_ram_alloc</name><argument_list pos:start="115:30" pos:end="115:49">(<argument pos:start="115:31" pos:end="115:48"><expr pos:start="115:31" pos:end="115:48"><literal type="number" pos:start="115:31" pos:end="115:40">0x100000</literal> <operator pos:start="115:40" pos:end="115:40">-</operator> <literal type="number" pos:start="115:42" pos:end="115:48">0xa0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:60"><expr pos:start="117:5" pos:end="117:59"><name pos:start="117:5" pos:end="117:12">ram_addr</name> <operator pos:start="117:14" pos:end="117:14">=</operator> <call pos:start="117:16" pos:end="117:59"><name pos:start="117:16" pos:end="117:29">qemu_ram_alloc</name><argument_list pos:start="117:30" pos:end="117:59">(<argument pos:start="117:31" pos:end="117:58"><expr pos:start="117:31" pos:end="117:58"><name pos:start="117:31" pos:end="117:47">below_4g_mem_size</name> <operator pos:start="117:49" pos:end="117:49">-</operator> <literal type="number" pos:start="117:51" pos:end="117:58">0x100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="123:27"><expr pos:start="119:5" pos:end="123:26"><call pos:start="119:5" pos:end="123:26"><name pos:start="119:5" pos:end="119:32">cpu_register_physical_memory</name><argument_list pos:start="119:33" pos:end="123:26">(<argument pos:start="119:34" pos:end="119:41"><expr pos:start="119:34" pos:end="119:41"><literal type="number" pos:start="119:34" pos:end="119:41">0x100000</literal></expr></argument>,

                 <argument pos:start="121:18" pos:end="121:45"><expr pos:start="121:18" pos:end="121:45"><name pos:start="121:18" pos:end="121:34">below_4g_mem_size</name> <operator pos:start="121:36" pos:end="121:36">-</operator> <literal type="number" pos:start="121:38" pos:end="121:45">0x100000</literal></expr></argument>,

                 <argument pos:start="123:18" pos:end="123:25"><expr pos:start="123:18" pos:end="123:25"><name pos:start="123:18" pos:end="123:25">ram_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="127:5" pos:end="127:39">/* above 4giga memory allocation */</comment>

    <if_stmt pos:start="129:5" pos:end="147:5"><if pos:start="129:5" pos:end="147:5">if <condition pos:start="129:8" pos:end="129:30">(<expr pos:start="129:9" pos:end="129:29"><name pos:start="129:9" pos:end="129:25">above_4g_mem_size</name> <operator pos:start="129:27" pos:end="129:27">&gt;</operator> <literal type="number" pos:start="129:29" pos:end="129:29">0</literal></expr>)</condition> <block pos:start="129:32" pos:end="147:5">{<block_content pos:start="133:9" pos:end="146:0">

<cpp:if pos:start="131:1" pos:end="131:31">#<cpp:directive pos:start="131:2" pos:end="131:3">if</cpp:directive> <expr pos:start="131:5" pos:end="131:31"><name pos:start="131:5" pos:end="131:25">TARGET_PHYS_ADDR_BITS</name> <operator pos:start="131:27" pos:end="131:28">==</operator> <literal type="number" pos:start="131:30" pos:end="131:31">32</literal></expr></cpp:if>

        <expr_stmt pos:start="133:9" pos:end="136:0"><expr pos:start="133:9" pos:end="133:59"><call pos:start="133:9" pos:end="133:59"><name pos:start="133:9" pos:end="133:16">hw_error</name><argument_list pos:start="133:17" pos:end="133:59">(<argument pos:start="133:18" pos:end="133:58"><expr pos:start="133:18" pos:end="133:58"><literal type="string" pos:start="133:18" pos:end="133:58">"To much RAM for 32-bit physical address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="135:1" pos:end="135:5">#<cpp:directive pos:start="135:2" pos:end="135:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="137:9" pos:end="137:53"><expr pos:start="137:9" pos:end="137:52"><name pos:start="137:9" pos:end="137:16">ram_addr</name> <operator pos:start="137:18" pos:end="137:18">=</operator> <call pos:start="137:20" pos:end="137:52"><name pos:start="137:20" pos:end="137:33">qemu_ram_alloc</name><argument_list pos:start="137:34" pos:end="137:52">(<argument pos:start="137:35" pos:end="137:51"><expr pos:start="137:35" pos:end="137:51"><name pos:start="137:35" pos:end="137:51">above_4g_mem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="146:0"><expr pos:start="139:9" pos:end="143:46"><call pos:start="139:9" pos:end="143:46"><name pos:start="139:9" pos:end="139:36">cpu_register_physical_memory</name><argument_list pos:start="139:37" pos:end="143:46">(<argument pos:start="139:38" pos:end="139:51"><expr pos:start="139:38" pos:end="139:51"><literal type="number" pos:start="139:38" pos:end="139:51">0x100000000ULL</literal></expr></argument>,

                                     <argument pos:start="141:38" pos:end="141:54"><expr pos:start="141:38" pos:end="141:54"><name pos:start="141:38" pos:end="141:54">above_4g_mem_size</name></expr></argument>,

                                     <argument pos:start="143:38" pos:end="143:45"><expr pos:start="143:38" pos:end="143:45"><name pos:start="143:38" pos:end="143:45">ram_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="145:1" pos:end="145:6">#<cpp:directive pos:start="145:2" pos:end="145:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>





    <comment type="block" pos:start="153:5" pos:end="153:19">/* BIOS load */</comment>

    <if_stmt pos:start="155:5" pos:end="157:34"><if pos:start="155:5" pos:end="157:34">if <condition pos:start="155:8" pos:end="155:26">(<expr pos:start="155:9" pos:end="155:25"><name pos:start="155:9" pos:end="155:17">bios_name</name> <operator pos:start="155:19" pos:end="155:20">==</operator> <name pos:start="155:22" pos:end="155:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="157:9" pos:end="157:34"><block_content pos:start="157:9" pos:end="157:34">

        <expr_stmt pos:start="157:9" pos:end="157:34"><expr pos:start="157:9" pos:end="157:33"><name pos:start="157:9" pos:end="157:17">bios_name</name> <operator pos:start="157:19" pos:end="157:19">=</operator> <name pos:start="157:21" pos:end="157:33">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:62"><expr pos:start="159:5" pos:end="159:61"><name pos:start="159:5" pos:end="159:12">filename</name> <operator pos:start="159:14" pos:end="159:14">=</operator> <call pos:start="159:16" pos:end="159:61"><name pos:start="159:16" pos:end="159:29">qemu_find_file</name><argument_list pos:start="159:30" pos:end="159:61">(<argument pos:start="159:31" pos:end="159:49"><expr pos:start="159:31" pos:end="159:49"><name pos:start="159:31" pos:end="159:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="159:52" pos:end="159:60"><expr pos:start="159:52" pos:end="159:60"><name pos:start="159:52" pos:end="159:60">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="161:5" pos:end="169:5"><if pos:start="161:5" pos:end="165:5">if <condition pos:start="161:8" pos:end="161:17">(<expr pos:start="161:9" pos:end="161:16"><name pos:start="161:9" pos:end="161:16">filename</name></expr>)</condition> <block pos:start="161:19" pos:end="165:5">{<block_content pos:start="163:9" pos:end="163:45">

        <expr_stmt pos:start="163:9" pos:end="163:45"><expr pos:start="163:9" pos:end="163:44"><name pos:start="163:9" pos:end="163:17">bios_size</name> <operator pos:start="163:19" pos:end="163:19">=</operator> <call pos:start="163:21" pos:end="163:44"><name pos:start="163:21" pos:end="163:34">get_image_size</name><argument_list pos:start="163:35" pos:end="163:44">(<argument pos:start="163:36" pos:end="163:43"><expr pos:start="163:36" pos:end="163:43"><name pos:start="163:36" pos:end="163:43">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="165:7" pos:end="169:5">else <block pos:start="165:12" pos:end="169:5">{<block_content pos:start="167:9" pos:end="167:23">

        <expr_stmt pos:start="167:9" pos:end="167:23"><expr pos:start="167:9" pos:end="167:22"><name pos:start="167:9" pos:end="167:17">bios_size</name> <operator pos:start="167:19" pos:end="167:19">=</operator> <operator pos:start="167:21" pos:end="167:21">-</operator><literal type="number" pos:start="167:22" pos:end="167:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="171:5" pos:end="177:5"><if pos:start="171:5" pos:end="177:5">if <condition pos:start="171:8" pos:end="173:33">(<expr pos:start="171:9" pos:end="173:32"><name pos:start="171:9" pos:end="171:17">bios_size</name> <operator pos:start="171:19" pos:end="171:20">&lt;=</operator> <literal type="number" pos:start="171:22" pos:end="171:22">0</literal> <operator pos:start="171:24" pos:end="171:25">||</operator>

        <operator pos:start="173:9" pos:end="173:9">(</operator><name pos:start="173:10" pos:end="173:18">bios_size</name> <operator pos:start="173:20" pos:end="173:20">%</operator> <literal type="number" pos:start="173:22" pos:end="173:26">65536</literal><operator pos:start="173:27" pos:end="173:27">)</operator> <operator pos:start="173:29" pos:end="173:30">!=</operator> <literal type="number" pos:start="173:32" pos:end="173:32">0</literal></expr>)</condition> <block pos:start="173:35" pos:end="177:5">{<block_content pos:start="175:9" pos:end="175:24">

        <goto pos:start="175:9" pos:end="175:24">goto <name pos:start="175:14" pos:end="175:23">bios_error</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:44"><expr pos:start="179:5" pos:end="179:43"><name pos:start="179:5" pos:end="179:15">bios_offset</name> <operator pos:start="179:17" pos:end="179:17">=</operator> <call pos:start="179:19" pos:end="179:43"><name pos:start="179:19" pos:end="179:32">qemu_ram_alloc</name><argument_list pos:start="179:33" pos:end="179:43">(<argument pos:start="179:34" pos:end="179:42"><expr pos:start="179:34" pos:end="179:42"><name pos:start="179:34" pos:end="179:42">bios_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:64"><expr pos:start="181:5" pos:end="181:63"><name pos:start="181:5" pos:end="181:7">ret</name> <operator pos:start="181:9" pos:end="181:9">=</operator> <call pos:start="181:11" pos:end="181:63"><name pos:start="181:11" pos:end="181:28">rom_add_file_fixed</name><argument_list pos:start="181:29" pos:end="181:63">(<argument pos:start="181:30" pos:end="181:38"><expr pos:start="181:30" pos:end="181:38"><name pos:start="181:30" pos:end="181:38">bios_name</name></expr></argument>, <argument pos:start="181:41" pos:end="181:62"><expr pos:start="181:41" pos:end="181:62"><operator pos:start="181:41" pos:end="181:41">(</operator><name pos:start="181:42" pos:end="181:49">uint32_t</name><operator pos:start="181:50" pos:end="181:50">)</operator><operator pos:start="181:51" pos:end="181:51">(</operator><operator pos:start="181:52" pos:end="181:52">-</operator><name pos:start="181:53" pos:end="181:61">bios_size</name><operator pos:start="181:62" pos:end="181:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="183:5" pos:end="191:5"><if pos:start="183:5" pos:end="191:5">if <condition pos:start="183:8" pos:end="183:17">(<expr pos:start="183:9" pos:end="183:16"><name pos:start="183:9" pos:end="183:11">ret</name> <operator pos:start="183:13" pos:end="183:14">!=</operator> <literal type="number" pos:start="183:16" pos:end="183:16">0</literal></expr>)</condition> <block pos:start="183:19" pos:end="191:5">{<block_content pos:start="185:5" pos:end="189:16">

    <label pos:start="185:5" pos:end="185:15"><name pos:start="185:5" pos:end="185:14">bios_error</name>:</label>

        <expr_stmt pos:start="187:9" pos:end="187:74"><expr pos:start="187:9" pos:end="187:73"><call pos:start="187:9" pos:end="187:73"><name pos:start="187:9" pos:end="187:15">fprintf</name><argument_list pos:start="187:16" pos:end="187:73">(<argument pos:start="187:17" pos:end="187:22"><expr pos:start="187:17" pos:end="187:22"><name pos:start="187:17" pos:end="187:22">stderr</name></expr></argument>, <argument pos:start="187:25" pos:end="187:61"><expr pos:start="187:25" pos:end="187:61"><literal type="string" pos:start="187:25" pos:end="187:61">"qemu: could not load PC BIOS '%s'\n"</literal></expr></argument>, <argument pos:start="187:64" pos:end="187:72"><expr pos:start="187:64" pos:end="187:72"><name pos:start="187:64" pos:end="187:72">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:16"><expr pos:start="189:9" pos:end="189:15"><call pos:start="189:9" pos:end="189:15"><name pos:start="189:9" pos:end="189:12">exit</name><argument_list pos:start="189:13" pos:end="189:15">(<argument pos:start="189:14" pos:end="189:14"><expr pos:start="189:14" pos:end="189:14"><literal type="number" pos:start="189:14" pos:end="189:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="193:5" pos:end="197:5"><if pos:start="193:5" pos:end="197:5">if <condition pos:start="193:8" pos:end="193:17">(<expr pos:start="193:9" pos:end="193:16"><name pos:start="193:9" pos:end="193:16">filename</name></expr>)</condition> <block pos:start="193:19" pos:end="197:5">{<block_content pos:start="195:9" pos:end="195:28">

        <expr_stmt pos:start="195:9" pos:end="195:28"><expr pos:start="195:9" pos:end="195:27"><call pos:start="195:9" pos:end="195:27"><name pos:start="195:9" pos:end="195:17">qemu_free</name><argument_list pos:start="195:18" pos:end="195:27">(<argument pos:start="195:19" pos:end="195:26"><expr pos:start="195:19" pos:end="195:26"><name pos:start="195:19" pos:end="195:26">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="199:5" pos:end="199:53">/* map the last 128KB of the BIOS in ISA space */</comment>

    <expr_stmt pos:start="201:5" pos:end="201:30"><expr pos:start="201:5" pos:end="201:29"><name pos:start="201:5" pos:end="201:17">isa_bios_size</name> <operator pos:start="201:19" pos:end="201:19">=</operator> <name pos:start="201:21" pos:end="201:29">bios_size</name></expr>;</expr_stmt>

    <if_stmt pos:start="203:5" pos:end="205:35"><if pos:start="203:5" pos:end="205:35">if <condition pos:start="203:8" pos:end="203:37">(<expr pos:start="203:9" pos:end="203:36"><name pos:start="203:9" pos:end="203:21">isa_bios_size</name> <operator pos:start="203:23" pos:end="203:23">&gt;</operator> <operator pos:start="203:25" pos:end="203:25">(</operator><literal type="number" pos:start="203:26" pos:end="203:28">128</literal> <operator pos:start="203:30" pos:end="203:30">*</operator> <literal type="number" pos:start="203:32" pos:end="203:35">1024</literal><operator pos:start="203:36" pos:end="203:36">)</operator></expr>)</condition><block type="pseudo" pos:start="205:9" pos:end="205:35"><block_content pos:start="205:9" pos:end="205:35">

        <expr_stmt pos:start="205:9" pos:end="205:35"><expr pos:start="205:9" pos:end="205:34"><name pos:start="205:9" pos:end="205:21">isa_bios_size</name> <operator pos:start="205:23" pos:end="205:23">=</operator> <literal type="number" pos:start="205:25" pos:end="205:27">128</literal> <operator pos:start="205:29" pos:end="205:29">*</operator> <literal type="number" pos:start="205:31" pos:end="205:34">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="207:5" pos:end="211:89"><expr pos:start="207:5" pos:end="211:88"><call pos:start="207:5" pos:end="211:88"><name pos:start="207:5" pos:end="207:32">cpu_register_physical_memory</name><argument_list pos:start="207:33" pos:end="211:88">(<argument pos:start="207:34" pos:end="207:57"><expr pos:start="207:34" pos:end="207:57"><literal type="number" pos:start="207:34" pos:end="207:43">0x100000</literal> <operator pos:start="207:43" pos:end="207:43">-</operator> <name pos:start="207:45" pos:end="207:57">isa_bios_size</name></expr></argument>,

                                 <argument pos:start="209:34" pos:end="209:46"><expr pos:start="209:34" pos:end="209:46"><name pos:start="209:34" pos:end="209:46">isa_bios_size</name></expr></argument>,

                                 <argument pos:start="211:34" pos:end="211:87"><expr pos:start="211:34" pos:end="211:87"><operator pos:start="211:34" pos:end="211:34">(</operator><name pos:start="211:35" pos:end="211:45">bios_offset</name> <operator pos:start="211:47" pos:end="211:47">+</operator> <name pos:start="211:49" pos:end="211:57">bios_size</name> <operator pos:start="211:59" pos:end="211:59">-</operator> <name pos:start="211:61" pos:end="211:73">isa_bios_size</name><operator pos:start="211:74" pos:end="211:74">)</operator> <operator pos:start="211:76" pos:end="211:76">|</operator> <name pos:start="211:78" pos:end="211:87">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







    <expr_stmt pos:start="219:5" pos:end="219:31"><expr pos:start="219:5" pos:end="219:30"><name pos:start="219:5" pos:end="219:26">rom_enable_driver_roms</name> <operator pos:start="219:28" pos:end="219:28">=</operator> <literal type="number" pos:start="219:30" pos:end="219:30">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:52"><expr pos:start="221:5" pos:end="221:51"><name pos:start="221:5" pos:end="221:21">option_rom_offset</name> <operator pos:start="221:23" pos:end="221:23">=</operator> <call pos:start="221:25" pos:end="221:51"><name pos:start="221:25" pos:end="221:38">qemu_ram_alloc</name><argument_list pos:start="221:39" pos:end="221:51">(<argument pos:start="221:40" pos:end="221:50"><expr pos:start="221:40" pos:end="221:50"><name pos:start="221:40" pos:end="221:50">PC_ROM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:81"><expr pos:start="223:5" pos:end="223:80"><call pos:start="223:5" pos:end="223:80"><name pos:start="223:5" pos:end="223:32">cpu_register_physical_memory</name><argument_list pos:start="223:33" pos:end="223:80">(<argument pos:start="223:34" pos:end="223:47"><expr pos:start="223:34" pos:end="223:47"><name pos:start="223:34" pos:end="223:47">PC_ROM_MIN_VGA</name></expr></argument>, <argument pos:start="223:50" pos:end="223:60"><expr pos:start="223:50" pos:end="223:60"><name pos:start="223:50" pos:end="223:60">PC_ROM_SIZE</name></expr></argument>, <argument pos:start="223:63" pos:end="223:79"><expr pos:start="223:63" pos:end="223:79"><name pos:start="223:63" pos:end="223:79">option_rom_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="227:5" pos:end="227:47">/* map all the bios at the top of memory */</comment>

    <expr_stmt pos:start="229:5" pos:end="231:70"><expr pos:start="229:5" pos:end="231:69"><call pos:start="229:5" pos:end="231:69"><name pos:start="229:5" pos:end="229:32">cpu_register_physical_memory</name><argument_list pos:start="229:33" pos:end="231:69">(<argument pos:start="229:34" pos:end="229:55"><expr pos:start="229:34" pos:end="229:55"><operator pos:start="229:34" pos:end="229:34">(</operator><name pos:start="229:35" pos:end="229:42">uint32_t</name><operator pos:start="229:43" pos:end="229:43">)</operator><operator pos:start="229:44" pos:end="229:44">(</operator><operator pos:start="229:45" pos:end="229:45">-</operator><name pos:start="229:46" pos:end="229:54">bios_size</name><operator pos:start="229:55" pos:end="229:55">)</operator></expr></argument>,

                                 <argument pos:start="231:34" pos:end="231:42"><expr pos:start="231:34" pos:end="231:42"><name pos:start="231:34" pos:end="231:42">bios_size</name></expr></argument>, <argument pos:start="231:45" pos:end="231:68"><expr pos:start="231:45" pos:end="231:68"><name pos:start="231:45" pos:end="231:55">bios_offset</name> <operator pos:start="231:57" pos:end="231:57">|</operator> <name pos:start="231:59" pos:end="231:68">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="235:5" pos:end="235:31"><expr pos:start="235:5" pos:end="235:30"><name pos:start="235:5" pos:end="235:10">fw_cfg</name> <operator pos:start="235:12" pos:end="235:12">=</operator> <call pos:start="235:14" pos:end="235:30"><name pos:start="235:14" pos:end="235:28">bochs_bios_init</name><argument_list pos:start="235:29" pos:end="235:30">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="239:5" pos:end="243:5"><if pos:start="239:5" pos:end="243:5">if <condition pos:start="239:8" pos:end="239:19">(<expr pos:start="239:9" pos:end="239:18"><name pos:start="239:9" pos:end="239:18">linux_boot</name></expr>)</condition> <block pos:start="239:21" pos:end="243:5">{<block_content pos:start="241:9" pos:end="241:96">

        <expr_stmt pos:start="241:9" pos:end="241:96"><expr pos:start="241:9" pos:end="241:95"><call pos:start="241:9" pos:end="241:95"><name pos:start="241:9" pos:end="241:18">load_linux</name><argument_list pos:start="241:19" pos:end="241:95">(<argument pos:start="241:20" pos:end="241:25"><expr pos:start="241:20" pos:end="241:25"><name pos:start="241:20" pos:end="241:25">fw_cfg</name></expr></argument>, <argument pos:start="241:28" pos:end="241:42"><expr pos:start="241:28" pos:end="241:42"><name pos:start="241:28" pos:end="241:42">kernel_filename</name></expr></argument>, <argument pos:start="241:45" pos:end="241:59"><expr pos:start="241:45" pos:end="241:59"><name pos:start="241:45" pos:end="241:59">initrd_filename</name></expr></argument>, <argument pos:start="241:62" pos:end="241:75"><expr pos:start="241:62" pos:end="241:75"><name pos:start="241:62" pos:end="241:75">kernel_cmdline</name></expr></argument>, <argument pos:start="241:78" pos:end="241:94"><expr pos:start="241:78" pos:end="241:94"><name pos:start="241:78" pos:end="241:94">below_4g_mem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="247:5" pos:end="251:5">for <control pos:start="247:9" pos:end="247:40">(<init pos:start="247:10" pos:end="247:15"><expr pos:start="247:10" pos:end="247:14"><name pos:start="247:10" pos:end="247:10">i</name> <operator pos:start="247:12" pos:end="247:12">=</operator> <literal type="number" pos:start="247:14" pos:end="247:14">0</literal></expr>;</init> <condition pos:start="247:17" pos:end="247:35"><expr pos:start="247:17" pos:end="247:34"><name pos:start="247:17" pos:end="247:17">i</name> <operator pos:start="247:19" pos:end="247:19">&lt;</operator> <name pos:start="247:21" pos:end="247:34">nb_option_roms</name></expr>;</condition> <incr pos:start="247:37" pos:end="247:39"><expr pos:start="247:37" pos:end="247:39"><name pos:start="247:37" pos:end="247:37">i</name><operator pos:start="247:38" pos:end="247:39">++</operator></expr></incr>)</control> <block pos:start="247:42" pos:end="251:5">{<block_content pos:start="249:9" pos:end="249:38">

        <expr_stmt pos:start="249:9" pos:end="249:38"><expr pos:start="249:9" pos:end="249:37"><call pos:start="249:9" pos:end="249:37"><name pos:start="249:9" pos:end="249:22">rom_add_option</name><argument_list pos:start="249:23" pos:end="249:37">(<argument pos:start="249:24" pos:end="249:36"><expr pos:start="249:24" pos:end="249:36"><name pos:start="249:24" pos:end="249:36"><name pos:start="249:24" pos:end="249:33">option_rom</name><index pos:start="249:34" pos:end="249:36">[<expr pos:start="249:35" pos:end="249:35"><name pos:start="249:35" pos:end="249:35">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="255:5" pos:end="255:59"><expr pos:start="255:5" pos:end="255:58"><name pos:start="255:5" pos:end="255:11">cpu_irq</name> <operator pos:start="255:13" pos:end="255:13">=</operator> <call pos:start="255:15" pos:end="255:58"><name pos:start="255:15" pos:end="255:32">qemu_allocate_irqs</name><argument_list pos:start="255:33" pos:end="255:58">(<argument pos:start="255:34" pos:end="255:48"><expr pos:start="255:34" pos:end="255:48"><name pos:start="255:34" pos:end="255:48">pic_irq_request</name></expr></argument>, <argument pos:start="255:51" pos:end="255:54"><expr pos:start="255:51" pos:end="255:54"><name pos:start="255:51" pos:end="255:54">NULL</name></expr></argument>, <argument pos:start="255:57" pos:end="255:57"><expr pos:start="255:57" pos:end="255:57"><literal type="number" pos:start="255:57" pos:end="255:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:35"><expr pos:start="257:5" pos:end="257:34"><name pos:start="257:5" pos:end="257:9">i8259</name> <operator pos:start="257:11" pos:end="257:11">=</operator> <call pos:start="257:13" pos:end="257:34"><name pos:start="257:13" pos:end="257:22">i8259_init</name><argument_list pos:start="257:23" pos:end="257:34">(<argument pos:start="257:24" pos:end="257:33"><expr pos:start="257:24" pos:end="257:33"><name pos:start="257:24" pos:end="257:33"><name pos:start="257:24" pos:end="257:30">cpu_irq</name><index pos:start="257:31" pos:end="257:33">[<expr pos:start="257:32" pos:end="257:32"><literal type="number" pos:start="257:32" pos:end="257:32">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="259:5" pos:end="259:57"><expr pos:start="259:5" pos:end="259:56"><name pos:start="259:5" pos:end="259:17">isa_irq_state</name> <operator pos:start="259:19" pos:end="259:19">=</operator> <call pos:start="259:21" pos:end="259:56"><name pos:start="259:21" pos:end="259:32">qemu_mallocz</name><argument_list pos:start="259:33" pos:end="259:56">(<argument pos:start="259:34" pos:end="259:55"><expr pos:start="259:34" pos:end="259:55"><sizeof pos:start="259:34" pos:end="259:55">sizeof<argument_list pos:start="259:40" pos:end="259:55">(<argument pos:start="259:41" pos:end="259:54"><expr pos:start="259:41" pos:end="259:54"><operator pos:start="259:41" pos:end="259:41">*</operator><name pos:start="259:42" pos:end="259:54">isa_irq_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="261:5" pos:end="261:33"><expr pos:start="261:5" pos:end="261:32"><name pos:start="261:5" pos:end="261:24"><name pos:start="261:5" pos:end="261:17">isa_irq_state</name><operator pos:start="261:18" pos:end="261:19">-&gt;</operator><name pos:start="261:20" pos:end="261:24">i8259</name></name> <operator pos:start="261:26" pos:end="261:26">=</operator> <name pos:start="261:28" pos:end="261:32">i8259</name></expr>;</expr_stmt>

    <expr_stmt pos:start="263:5" pos:end="263:69"><expr pos:start="263:5" pos:end="263:68"><name pos:start="263:5" pos:end="263:11">isa_irq</name> <operator pos:start="263:13" pos:end="263:13">=</operator> <call pos:start="263:15" pos:end="263:68"><name pos:start="263:15" pos:end="263:32">qemu_allocate_irqs</name><argument_list pos:start="263:33" pos:end="263:68">(<argument pos:start="263:34" pos:end="263:48"><expr pos:start="263:34" pos:end="263:48"><name pos:start="263:34" pos:end="263:48">isa_irq_handler</name></expr></argument>, <argument pos:start="263:51" pos:end="263:63"><expr pos:start="263:51" pos:end="263:63"><name pos:start="263:51" pos:end="263:63">isa_irq_state</name></expr></argument>, <argument pos:start="263:66" pos:end="263:67"><expr pos:start="263:66" pos:end="263:67"><literal type="number" pos:start="263:66" pos:end="263:67">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="267:5" pos:end="277:5"><if pos:start="267:5" pos:end="271:5">if <condition pos:start="267:8" pos:end="267:20">(<expr pos:start="267:9" pos:end="267:19"><name pos:start="267:9" pos:end="267:19">pci_enabled</name></expr>)</condition> <block pos:start="267:22" pos:end="271:5">{<block_content pos:start="269:9" pos:end="269:68">

        <expr_stmt pos:start="269:9" pos:end="269:68"><expr pos:start="269:9" pos:end="269:67"><name pos:start="269:9" pos:end="269:15">pci_bus</name> <operator pos:start="269:17" pos:end="269:17">=</operator> <call pos:start="269:19" pos:end="269:67"><name pos:start="269:19" pos:end="269:29">i440fx_init</name><argument_list pos:start="269:30" pos:end="269:67">(<argument pos:start="269:31" pos:end="269:43"><expr pos:start="269:31" pos:end="269:43"><operator pos:start="269:31" pos:end="269:31">&amp;</operator><name pos:start="269:32" pos:end="269:43">i440fx_state</name></expr></argument>, <argument pos:start="269:46" pos:end="269:57"><expr pos:start="269:46" pos:end="269:57"><operator pos:start="269:46" pos:end="269:46">&amp;</operator><name pos:start="269:47" pos:end="269:57">piix3_devfn</name></expr></argument>, <argument pos:start="269:60" pos:end="269:66"><expr pos:start="269:60" pos:end="269:66"><name pos:start="269:60" pos:end="269:66">isa_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="271:7" pos:end="277:5">else <block pos:start="271:12" pos:end="277:5">{<block_content pos:start="273:9" pos:end="275:26">

        <expr_stmt pos:start="273:9" pos:end="273:23"><expr pos:start="273:9" pos:end="273:22"><name pos:start="273:9" pos:end="273:15">pci_bus</name> <operator pos:start="273:17" pos:end="273:17">=</operator> <name pos:start="273:19" pos:end="273:22">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:26"><expr pos:start="275:9" pos:end="275:25"><call pos:start="275:9" pos:end="275:25"><name pos:start="275:9" pos:end="275:19">isa_bus_new</name><argument_list pos:start="275:20" pos:end="275:25">(<argument pos:start="275:21" pos:end="275:24"><expr pos:start="275:21" pos:end="275:24"><name pos:start="275:21" pos:end="275:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="279:5" pos:end="279:26"><expr pos:start="279:5" pos:end="279:25"><call pos:start="279:5" pos:end="279:25"><name pos:start="279:5" pos:end="279:16">isa_bus_irqs</name><argument_list pos:start="279:17" pos:end="279:25">(<argument pos:start="279:18" pos:end="279:24"><expr pos:start="279:18" pos:end="279:24"><name pos:start="279:18" pos:end="279:24">isa_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="283:5" pos:end="283:35"><expr pos:start="283:5" pos:end="283:34"><name pos:start="283:5" pos:end="283:12">ferr_irq</name> <operator pos:start="283:14" pos:end="283:14">=</operator> <call pos:start="283:16" pos:end="283:34"><name pos:start="283:16" pos:end="283:30">isa_reserve_irq</name><argument_list pos:start="283:31" pos:end="283:34">(<argument pos:start="283:32" pos:end="283:33"><expr pos:start="283:32" pos:end="283:33"><literal type="number" pos:start="283:32" pos:end="283:33">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="287:5" pos:end="287:32">/* init basic PC hardware */</comment>

    <expr_stmt pos:start="289:5" pos:end="289:60"><expr pos:start="289:5" pos:end="289:59"><call pos:start="289:5" pos:end="289:59"><name pos:start="289:5" pos:end="289:25">register_ioport_write</name><argument_list pos:start="289:26" pos:end="289:59">(<argument pos:start="289:27" pos:end="289:30"><expr pos:start="289:27" pos:end="289:30"><literal type="number" pos:start="289:27" pos:end="289:30">0x80</literal></expr></argument>, <argument pos:start="289:33" pos:end="289:33"><expr pos:start="289:33" pos:end="289:33"><literal type="number" pos:start="289:33" pos:end="289:33">1</literal></expr></argument>, <argument pos:start="289:36" pos:end="289:36"><expr pos:start="289:36" pos:end="289:36"><literal type="number" pos:start="289:36" pos:end="289:36">1</literal></expr></argument>, <argument pos:start="289:39" pos:end="289:52"><expr pos:start="289:39" pos:end="289:52"><name pos:start="289:39" pos:end="289:52">ioport80_write</name></expr></argument>, <argument pos:start="289:55" pos:end="289:58"><expr pos:start="289:55" pos:end="289:58"><name pos:start="289:55" pos:end="289:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="293:5" pos:end="293:60"><expr pos:start="293:5" pos:end="293:59"><call pos:start="293:5" pos:end="293:59"><name pos:start="293:5" pos:end="293:25">register_ioport_write</name><argument_list pos:start="293:26" pos:end="293:59">(<argument pos:start="293:27" pos:end="293:30"><expr pos:start="293:27" pos:end="293:30"><literal type="number" pos:start="293:27" pos:end="293:30">0xf0</literal></expr></argument>, <argument pos:start="293:33" pos:end="293:33"><expr pos:start="293:33" pos:end="293:33"><literal type="number" pos:start="293:33" pos:end="293:33">1</literal></expr></argument>, <argument pos:start="293:36" pos:end="293:36"><expr pos:start="293:36" pos:end="293:36"><literal type="number" pos:start="293:36" pos:end="293:36">1</literal></expr></argument>, <argument pos:start="293:39" pos:end="293:52"><expr pos:start="293:39" pos:end="293:52"><name pos:start="293:39" pos:end="293:52">ioportF0_write</name></expr></argument>, <argument pos:start="293:55" pos:end="293:58"><expr pos:start="293:55" pos:end="293:58"><name pos:start="293:55" pos:end="293:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="297:5" pos:end="331:5"><if pos:start="297:5" pos:end="309:5">if <condition pos:start="297:8" pos:end="297:27">(<expr pos:start="297:9" pos:end="297:26"><name pos:start="297:9" pos:end="297:26">cirrus_vga_enabled</name></expr>)</condition> <block pos:start="297:29" pos:end="309:5">{<block_content pos:start="299:9" pos:end="307:9">

        <if_stmt pos:start="299:9" pos:end="307:9"><if pos:start="299:9" pos:end="303:9">if <condition pos:start="299:12" pos:end="299:24">(<expr pos:start="299:13" pos:end="299:23"><name pos:start="299:13" pos:end="299:23">pci_enabled</name></expr>)</condition> <block pos:start="299:26" pos:end="303:9">{<block_content pos:start="301:13" pos:end="301:41">

            <expr_stmt pos:start="301:13" pos:end="301:41"><expr pos:start="301:13" pos:end="301:40"><call pos:start="301:13" pos:end="301:40"><name pos:start="301:13" pos:end="301:31">pci_cirrus_vga_init</name><argument_list pos:start="301:32" pos:end="301:40">(<argument pos:start="301:33" pos:end="301:39"><expr pos:start="301:33" pos:end="301:39"><name pos:start="301:33" pos:end="301:39">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="303:11" pos:end="307:9">else <block pos:start="303:16" pos:end="307:9">{<block_content pos:start="305:13" pos:end="305:34">

            <expr_stmt pos:start="305:13" pos:end="305:34"><expr pos:start="305:13" pos:end="305:33"><call pos:start="305:13" pos:end="305:33"><name pos:start="305:13" pos:end="305:31">isa_cirrus_vga_init</name><argument_list pos:start="305:32" pos:end="305:33">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="309:7" pos:end="319:5">else if <condition pos:start="309:15" pos:end="309:30">(<expr pos:start="309:16" pos:end="309:29"><name pos:start="309:16" pos:end="309:29">vmsvga_enabled</name></expr>)</condition> <block pos:start="309:32" pos:end="319:5">{<block_content pos:start="311:9" pos:end="317:74">

        <if_stmt pos:start="311:9" pos:end="317:74"><if pos:start="311:9" pos:end="313:37">if <condition pos:start="311:12" pos:end="311:24">(<expr pos:start="311:13" pos:end="311:23"><name pos:start="311:13" pos:end="311:23">pci_enabled</name></expr>)</condition><block type="pseudo" pos:start="313:13" pos:end="313:37"><block_content pos:start="313:13" pos:end="313:37">

            <expr_stmt pos:start="313:13" pos:end="313:37"><expr pos:start="313:13" pos:end="313:36"><call pos:start="313:13" pos:end="313:36"><name pos:start="313:13" pos:end="313:27">pci_vmsvga_init</name><argument_list pos:start="313:28" pos:end="313:36">(<argument pos:start="313:29" pos:end="313:35"><expr pos:start="313:29" pos:end="313:35"><name pos:start="313:29" pos:end="313:35">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="315:9" pos:end="317:74">else<block type="pseudo" pos:start="317:13" pos:end="317:74"><block_content pos:start="317:13" pos:end="317:74">

            <expr_stmt pos:start="317:13" pos:end="317:74"><expr pos:start="317:13" pos:end="317:73"><call pos:start="317:13" pos:end="317:73"><name pos:start="317:13" pos:end="317:19">fprintf</name><argument_list pos:start="317:20" pos:end="317:73">(<argument pos:start="317:21" pos:end="317:26"><expr pos:start="317:21" pos:end="317:26"><name pos:start="317:21" pos:end="317:26">stderr</name></expr></argument>, <argument pos:start="317:29" pos:end="317:58"><expr pos:start="317:29" pos:end="317:58"><literal type="string" pos:start="317:29" pos:end="317:58">"%s: vmware_vga: no PCI bus\n"</literal></expr></argument>, <argument pos:start="317:61" pos:end="317:72"><expr pos:start="317:61" pos:end="317:72"><name pos:start="317:61" pos:end="317:72">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="319:7" pos:end="331:5">else if <condition pos:start="319:15" pos:end="319:31">(<expr pos:start="319:16" pos:end="319:30"><name pos:start="319:16" pos:end="319:30">std_vga_enabled</name></expr>)</condition> <block pos:start="319:33" pos:end="331:5">{<block_content pos:start="321:9" pos:end="329:9">

        <if_stmt pos:start="321:9" pos:end="329:9"><if pos:start="321:9" pos:end="325:9">if <condition pos:start="321:12" pos:end="321:24">(<expr pos:start="321:13" pos:end="321:23"><name pos:start="321:13" pos:end="321:23">pci_enabled</name></expr>)</condition> <block pos:start="321:26" pos:end="325:9">{<block_content pos:start="323:13" pos:end="323:40">

            <expr_stmt pos:start="323:13" pos:end="323:40"><expr pos:start="323:13" pos:end="323:39"><call pos:start="323:13" pos:end="323:39"><name pos:start="323:13" pos:end="323:24">pci_vga_init</name><argument_list pos:start="323:25" pos:end="323:39">(<argument pos:start="323:26" pos:end="323:32"><expr pos:start="323:26" pos:end="323:32"><name pos:start="323:26" pos:end="323:32">pci_bus</name></expr></argument>, <argument pos:start="323:35" pos:end="323:35"><expr pos:start="323:35" pos:end="323:35"><literal type="number" pos:start="323:35" pos:end="323:35">0</literal></expr></argument>, <argument pos:start="323:38" pos:end="323:38"><expr pos:start="323:38" pos:end="323:38"><literal type="number" pos:start="323:38" pos:end="323:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="325:11" pos:end="329:9">else <block pos:start="325:16" pos:end="329:9">{<block_content pos:start="327:13" pos:end="327:27">

            <expr_stmt pos:start="327:13" pos:end="327:27"><expr pos:start="327:13" pos:end="327:26"><call pos:start="327:13" pos:end="327:26"><name pos:start="327:13" pos:end="327:24">isa_vga_init</name><argument_list pos:start="327:25" pos:end="327:26">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="335:5" pos:end="335:31"><expr pos:start="335:5" pos:end="335:30"><name pos:start="335:5" pos:end="335:13">rtc_state</name> <operator pos:start="335:15" pos:end="335:15">=</operator> <call pos:start="335:17" pos:end="335:30"><name pos:start="335:17" pos:end="335:24">rtc_init</name><argument_list pos:start="335:25" pos:end="335:30">(<argument pos:start="335:26" pos:end="335:29"><expr pos:start="335:26" pos:end="335:29"><literal type="number" pos:start="335:26" pos:end="335:29">2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="339:5" pos:end="339:51"><expr pos:start="339:5" pos:end="339:50"><call pos:start="339:5" pos:end="339:50"><name pos:start="339:5" pos:end="339:26">qemu_register_boot_set</name><argument_list pos:start="339:27" pos:end="339:50">(<argument pos:start="339:28" pos:end="339:38"><expr pos:start="339:28" pos:end="339:38"><name pos:start="339:28" pos:end="339:38">pc_boot_set</name></expr></argument>, <argument pos:start="339:41" pos:end="339:49"><expr pos:start="339:41" pos:end="339:49"><name pos:start="339:41" pos:end="339:49">rtc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="343:5" pos:end="343:58"><expr pos:start="343:5" pos:end="343:57"><call pos:start="343:5" pos:end="343:57"><name pos:start="343:5" pos:end="343:24">register_ioport_read</name><argument_list pos:start="343:25" pos:end="343:57">(<argument pos:start="343:26" pos:end="343:29"><expr pos:start="343:26" pos:end="343:29"><literal type="number" pos:start="343:26" pos:end="343:29">0x92</literal></expr></argument>, <argument pos:start="343:32" pos:end="343:32"><expr pos:start="343:32" pos:end="343:32"><literal type="number" pos:start="343:32" pos:end="343:32">1</literal></expr></argument>, <argument pos:start="343:35" pos:end="343:35"><expr pos:start="343:35" pos:end="343:35"><literal type="number" pos:start="343:35" pos:end="343:35">1</literal></expr></argument>, <argument pos:start="343:38" pos:end="343:50"><expr pos:start="343:38" pos:end="343:50"><name pos:start="343:38" pos:end="343:50">ioport92_read</name></expr></argument>, <argument pos:start="343:53" pos:end="343:56"><expr pos:start="343:53" pos:end="343:56"><name pos:start="343:53" pos:end="343:56">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="345:5" pos:end="345:60"><expr pos:start="345:5" pos:end="345:59"><call pos:start="345:5" pos:end="345:59"><name pos:start="345:5" pos:end="345:25">register_ioport_write</name><argument_list pos:start="345:26" pos:end="345:59">(<argument pos:start="345:27" pos:end="345:30"><expr pos:start="345:27" pos:end="345:30"><literal type="number" pos:start="345:27" pos:end="345:30">0x92</literal></expr></argument>, <argument pos:start="345:33" pos:end="345:33"><expr pos:start="345:33" pos:end="345:33"><literal type="number" pos:start="345:33" pos:end="345:33">1</literal></expr></argument>, <argument pos:start="345:36" pos:end="345:36"><expr pos:start="345:36" pos:end="345:36"><literal type="number" pos:start="345:36" pos:end="345:36">1</literal></expr></argument>, <argument pos:start="345:39" pos:end="345:52"><expr pos:start="345:39" pos:end="345:52"><name pos:start="345:39" pos:end="345:52">ioport92_write</name></expr></argument>, <argument pos:start="345:55" pos:end="345:58"><expr pos:start="345:55" pos:end="345:58"><name pos:start="345:55" pos:end="345:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="349:5" pos:end="353:5"><if pos:start="349:5" pos:end="353:5">if <condition pos:start="349:8" pos:end="349:20">(<expr pos:start="349:9" pos:end="349:19"><name pos:start="349:9" pos:end="349:19">pci_enabled</name></expr>)</condition> <block pos:start="349:22" pos:end="353:5">{<block_content pos:start="351:9" pos:end="351:46">

        <expr_stmt pos:start="351:9" pos:end="351:46"><expr pos:start="351:9" pos:end="351:45"><name pos:start="351:9" pos:end="351:29"><name pos:start="351:9" pos:end="351:21">isa_irq_state</name><operator pos:start="351:22" pos:end="351:23">-&gt;</operator><name pos:start="351:24" pos:end="351:29">ioapic</name></name> <operator pos:start="351:31" pos:end="351:31">=</operator> <call pos:start="351:33" pos:end="351:45"><name pos:start="351:33" pos:end="351:43">ioapic_init</name><argument_list pos:start="351:44" pos:end="351:45">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="355:5" pos:end="355:45"><expr pos:start="355:5" pos:end="355:44"><name pos:start="355:5" pos:end="355:7">pit</name> <operator pos:start="355:9" pos:end="355:9">=</operator> <call pos:start="355:11" pos:end="355:44"><name pos:start="355:11" pos:end="355:18">pit_init</name><argument_list pos:start="355:19" pos:end="355:44">(<argument pos:start="355:20" pos:end="355:23"><expr pos:start="355:20" pos:end="355:23"><literal type="number" pos:start="355:20" pos:end="355:23">0x40</literal></expr></argument>, <argument pos:start="355:26" pos:end="355:43"><expr pos:start="355:26" pos:end="355:43"><call pos:start="355:26" pos:end="355:43"><name pos:start="355:26" pos:end="355:40">isa_reserve_irq</name><argument_list pos:start="355:41" pos:end="355:43">(<argument pos:start="355:42" pos:end="355:42"><expr pos:start="355:42" pos:end="355:42"><literal type="number" pos:start="355:42" pos:end="355:42">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="357:5" pos:end="357:20"><expr pos:start="357:5" pos:end="357:19"><call pos:start="357:5" pos:end="357:19"><name pos:start="357:5" pos:end="357:14">pcspk_init</name><argument_list pos:start="357:15" pos:end="357:19">(<argument pos:start="357:16" pos:end="357:18"><expr pos:start="357:16" pos:end="357:18"><name pos:start="357:16" pos:end="357:18">pit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="359:5" pos:end="363:5"><if pos:start="359:5" pos:end="363:5">if <condition pos:start="359:8" pos:end="359:17">(<expr pos:start="359:9" pos:end="359:16"><operator pos:start="359:9" pos:end="359:9">!</operator><name pos:start="359:10" pos:end="359:16">no_hpet</name></expr>)</condition> <block pos:start="359:19" pos:end="363:5">{<block_content pos:start="361:9" pos:end="361:27">

        <expr_stmt pos:start="361:9" pos:end="361:27"><expr pos:start="361:9" pos:end="361:26"><call pos:start="361:9" pos:end="361:26"><name pos:start="361:9" pos:end="361:17">hpet_init</name><argument_list pos:start="361:18" pos:end="361:26">(<argument pos:start="361:19" pos:end="361:25"><expr pos:start="361:19" pos:end="361:25"><name pos:start="361:19" pos:end="361:25">isa_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="367:5" pos:end="375:5">for<control pos:start="367:8" pos:end="367:41">(<init pos:start="367:9" pos:end="367:14"><expr pos:start="367:9" pos:end="367:13"><name pos:start="367:9" pos:end="367:9">i</name> <operator pos:start="367:11" pos:end="367:11">=</operator> <literal type="number" pos:start="367:13" pos:end="367:13">0</literal></expr>;</init> <condition pos:start="367:16" pos:end="367:36"><expr pos:start="367:16" pos:end="367:35"><name pos:start="367:16" pos:end="367:16">i</name> <operator pos:start="367:18" pos:end="367:18">&lt;</operator> <name pos:start="367:20" pos:end="367:35">MAX_SERIAL_PORTS</name></expr>;</condition> <incr pos:start="367:38" pos:end="367:40"><expr pos:start="367:38" pos:end="367:40"><name pos:start="367:38" pos:end="367:38">i</name><operator pos:start="367:39" pos:end="367:40">++</operator></expr></incr>)</control> <block pos:start="367:43" pos:end="375:5">{<block_content pos:start="369:9" pos:end="373:9">

        <if_stmt pos:start="369:9" pos:end="373:9"><if pos:start="369:9" pos:end="373:9">if <condition pos:start="369:12" pos:end="369:26">(<expr pos:start="369:13" pos:end="369:25"><name pos:start="369:13" pos:end="369:25"><name pos:start="369:13" pos:end="369:22">serial_hds</name><index pos:start="369:23" pos:end="369:25">[<expr pos:start="369:24" pos:end="369:24"><name pos:start="369:24" pos:end="369:24">i</name></expr>]</index></name></expr>)</condition> <block pos:start="369:28" pos:end="373:9">{<block_content pos:start="371:13" pos:end="371:46">

            <expr_stmt pos:start="371:13" pos:end="371:46"><expr pos:start="371:13" pos:end="371:45"><call pos:start="371:13" pos:end="371:45"><name pos:start="371:13" pos:end="371:27">serial_isa_init</name><argument_list pos:start="371:28" pos:end="371:45">(<argument pos:start="371:29" pos:end="371:29"><expr pos:start="371:29" pos:end="371:29"><name pos:start="371:29" pos:end="371:29">i</name></expr></argument>, <argument pos:start="371:32" pos:end="371:44"><expr pos:start="371:32" pos:end="371:44"><name pos:start="371:32" pos:end="371:44"><name pos:start="371:32" pos:end="371:41">serial_hds</name><index pos:start="371:42" pos:end="371:44">[<expr pos:start="371:43" pos:end="371:43"><name pos:start="371:43" pos:end="371:43">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <for pos:start="379:5" pos:end="387:5">for<control pos:start="379:8" pos:end="379:43">(<init pos:start="379:9" pos:end="379:14"><expr pos:start="379:9" pos:end="379:13"><name pos:start="379:9" pos:end="379:9">i</name> <operator pos:start="379:11" pos:end="379:11">=</operator> <literal type="number" pos:start="379:13" pos:end="379:13">0</literal></expr>;</init> <condition pos:start="379:16" pos:end="379:38"><expr pos:start="379:16" pos:end="379:37"><name pos:start="379:16" pos:end="379:16">i</name> <operator pos:start="379:18" pos:end="379:18">&lt;</operator> <name pos:start="379:20" pos:end="379:37">MAX_PARALLEL_PORTS</name></expr>;</condition> <incr pos:start="379:40" pos:end="379:42"><expr pos:start="379:40" pos:end="379:42"><name pos:start="379:40" pos:end="379:40">i</name><operator pos:start="379:41" pos:end="379:42">++</operator></expr></incr>)</control> <block pos:start="379:45" pos:end="387:5">{<block_content pos:start="381:9" pos:end="385:9">

        <if_stmt pos:start="381:9" pos:end="385:9"><if pos:start="381:9" pos:end="385:9">if <condition pos:start="381:12" pos:end="381:28">(<expr pos:start="381:13" pos:end="381:27"><name pos:start="381:13" pos:end="381:27"><name pos:start="381:13" pos:end="381:24">parallel_hds</name><index pos:start="381:25" pos:end="381:27">[<expr pos:start="381:26" pos:end="381:26"><name pos:start="381:26" pos:end="381:26">i</name></expr>]</index></name></expr>)</condition> <block pos:start="381:30" pos:end="385:9">{<block_content pos:start="383:13" pos:end="383:46">

            <expr_stmt pos:start="383:13" pos:end="383:46"><expr pos:start="383:13" pos:end="383:45"><call pos:start="383:13" pos:end="383:45"><name pos:start="383:13" pos:end="383:25">parallel_init</name><argument_list pos:start="383:26" pos:end="383:45">(<argument pos:start="383:27" pos:end="383:27"><expr pos:start="383:27" pos:end="383:27"><name pos:start="383:27" pos:end="383:27">i</name></expr></argument>, <argument pos:start="383:30" pos:end="383:44"><expr pos:start="383:30" pos:end="383:44"><name pos:start="383:30" pos:end="383:44"><name pos:start="383:30" pos:end="383:41">parallel_hds</name><index pos:start="383:42" pos:end="383:44">[<expr pos:start="383:43" pos:end="383:43"><name pos:start="383:43" pos:end="383:43">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <for pos:start="391:5" pos:end="405:5">for<control pos:start="391:8" pos:end="391:32">(<init pos:start="391:9" pos:end="391:14"><expr pos:start="391:9" pos:end="391:13"><name pos:start="391:9" pos:end="391:9">i</name> <operator pos:start="391:11" pos:end="391:11">=</operator> <literal type="number" pos:start="391:13" pos:end="391:13">0</literal></expr>;</init> <condition pos:start="391:16" pos:end="391:27"><expr pos:start="391:16" pos:end="391:26"><name pos:start="391:16" pos:end="391:16">i</name> <operator pos:start="391:18" pos:end="391:18">&lt;</operator> <name pos:start="391:20" pos:end="391:26">nb_nics</name></expr>;</condition> <incr pos:start="391:29" pos:end="391:31"><expr pos:start="391:29" pos:end="391:31"><name pos:start="391:29" pos:end="391:29">i</name><operator pos:start="391:30" pos:end="391:31">++</operator></expr></incr>)</control> <block pos:start="391:34" pos:end="405:5">{<block_content pos:start="393:9" pos:end="403:51">

        <decl_stmt pos:start="393:9" pos:end="393:35"><decl pos:start="393:9" pos:end="393:34"><type pos:start="393:9" pos:end="393:17"><name pos:start="393:9" pos:end="393:15">NICInfo</name> <modifier pos:start="393:17" pos:end="393:17">*</modifier></type><name pos:start="393:18" pos:end="393:19">nd</name> <init pos:start="393:21" pos:end="393:34">= <expr pos:start="393:23" pos:end="393:34"><operator pos:start="393:23" pos:end="393:23">&amp;</operator><name pos:start="393:24" pos:end="393:34"><name pos:start="393:24" pos:end="393:31">nd_table</name><index pos:start="393:32" pos:end="393:34">[<expr pos:start="393:33" pos:end="393:33"><name pos:start="393:33" pos:end="393:33">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="397:9" pos:end="403:51"><if pos:start="397:9" pos:end="399:33">if <condition pos:start="397:12" pos:end="397:78">(<expr pos:start="397:13" pos:end="397:77"><operator pos:start="397:13" pos:end="397:13">!</operator><name pos:start="397:14" pos:end="397:24">pci_enabled</name> <operator pos:start="397:26" pos:end="397:27">||</operator> <operator pos:start="397:29" pos:end="397:29">(</operator><name pos:start="397:30" pos:end="397:38"><name pos:start="397:30" pos:end="397:31">nd</name><operator pos:start="397:32" pos:end="397:33">-&gt;</operator><name pos:start="397:34" pos:end="397:38">model</name></name> <operator pos:start="397:40" pos:end="397:41">&amp;&amp;</operator> <call pos:start="397:43" pos:end="397:71"><name pos:start="397:43" pos:end="397:48">strcmp</name><argument_list pos:start="397:49" pos:end="397:71">(<argument pos:start="397:50" pos:end="397:58"><expr pos:start="397:50" pos:end="397:58"><name pos:start="397:50" pos:end="397:58"><name pos:start="397:50" pos:end="397:51">nd</name><operator pos:start="397:52" pos:end="397:53">-&gt;</operator><name pos:start="397:54" pos:end="397:58">model</name></name></expr></argument>, <argument pos:start="397:61" pos:end="397:70"><expr pos:start="397:61" pos:end="397:70"><literal type="string" pos:start="397:61" pos:end="397:70">"ne2k_isa"</literal></expr></argument>)</argument_list></call> <operator pos:start="397:73" pos:end="397:74">==</operator> <literal type="number" pos:start="397:76" pos:end="397:76">0</literal><operator pos:start="397:77" pos:end="397:77">)</operator></expr>)</condition><block type="pseudo" pos:start="399:13" pos:end="399:33"><block_content pos:start="399:13" pos:end="399:33">

            <expr_stmt pos:start="399:13" pos:end="399:33"><expr pos:start="399:13" pos:end="399:32"><call pos:start="399:13" pos:end="399:32"><name pos:start="399:13" pos:end="399:28">pc_init_ne2k_isa</name><argument_list pos:start="399:29" pos:end="399:32">(<argument pos:start="399:30" pos:end="399:31"><expr pos:start="399:30" pos:end="399:31"><name pos:start="399:30" pos:end="399:31">nd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="401:9" pos:end="403:51">else<block type="pseudo" pos:start="403:13" pos:end="403:51"><block_content pos:start="403:13" pos:end="403:51">

            <expr_stmt pos:start="403:13" pos:end="403:51"><expr pos:start="403:13" pos:end="403:50"><call pos:start="403:13" pos:end="403:50"><name pos:start="403:13" pos:end="403:31">pci_nic_init_nofail</name><argument_list pos:start="403:32" pos:end="403:50">(<argument pos:start="403:33" pos:end="403:34"><expr pos:start="403:33" pos:end="403:34"><name pos:start="403:33" pos:end="403:34">nd</name></expr></argument>, <argument pos:start="403:37" pos:end="403:43"><expr pos:start="403:37" pos:end="403:43"><literal type="string" pos:start="403:37" pos:end="403:43">"e1000"</literal></expr></argument>, <argument pos:start="403:46" pos:end="403:49"><expr pos:start="403:46" pos:end="403:49"><name pos:start="403:46" pos:end="403:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="409:5" pos:end="415:5"><if pos:start="409:5" pos:end="415:5">if <condition pos:start="409:8" pos:end="409:49">(<expr pos:start="409:9" pos:end="409:48"><call pos:start="409:9" pos:end="409:33"><name pos:start="409:9" pos:end="409:25">drive_get_max_bus</name><argument_list pos:start="409:26" pos:end="409:33">(<argument pos:start="409:27" pos:end="409:32"><expr pos:start="409:27" pos:end="409:32"><name pos:start="409:27" pos:end="409:32">IF_IDE</name></expr></argument>)</argument_list></call> <operator pos:start="409:35" pos:end="409:36">&gt;=</operator> <name pos:start="409:38" pos:end="409:48">MAX_IDE_BUS</name></expr>)</condition> <block pos:start="409:51" pos:end="415:5">{<block_content pos:start="411:9" pos:end="413:16">

        <expr_stmt pos:start="411:9" pos:end="411:52"><expr pos:start="411:9" pos:end="411:51"><call pos:start="411:9" pos:end="411:51"><name pos:start="411:9" pos:end="411:15">fprintf</name><argument_list pos:start="411:16" pos:end="411:51">(<argument pos:start="411:17" pos:end="411:22"><expr pos:start="411:17" pos:end="411:22"><name pos:start="411:17" pos:end="411:22">stderr</name></expr></argument>, <argument pos:start="411:25" pos:end="411:50"><expr pos:start="411:25" pos:end="411:50"><literal type="string" pos:start="411:25" pos:end="411:50">"qemu: too many IDE bus\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="413:9" pos:end="413:16"><expr pos:start="413:9" pos:end="413:15"><call pos:start="413:9" pos:end="413:15"><name pos:start="413:9" pos:end="413:12">exit</name><argument_list pos:start="413:13" pos:end="413:15">(<argument pos:start="413:14" pos:end="413:14"><expr pos:start="413:14" pos:end="413:14"><literal type="number" pos:start="413:14" pos:end="413:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="419:5" pos:end="423:5">for<control pos:start="419:8" pos:end="419:51">(<init pos:start="419:9" pos:end="419:14"><expr pos:start="419:9" pos:end="419:13"><name pos:start="419:9" pos:end="419:9">i</name> <operator pos:start="419:11" pos:end="419:11">=</operator> <literal type="number" pos:start="419:13" pos:end="419:13">0</literal></expr>;</init> <condition pos:start="419:16" pos:end="419:46"><expr pos:start="419:16" pos:end="419:45"><name pos:start="419:16" pos:end="419:16">i</name> <operator pos:start="419:18" pos:end="419:18">&lt;</operator> <name pos:start="419:20" pos:end="419:30">MAX_IDE_BUS</name> <operator pos:start="419:32" pos:end="419:32">*</operator> <name pos:start="419:34" pos:end="419:45">MAX_IDE_DEVS</name></expr>;</condition> <incr pos:start="419:48" pos:end="419:50"><expr pos:start="419:48" pos:end="419:50"><name pos:start="419:48" pos:end="419:48">i</name><operator pos:start="419:49" pos:end="419:50">++</operator></expr></incr>)</control> <block pos:start="419:53" pos:end="423:5">{<block_content pos:start="421:9" pos:end="421:70">

        <expr_stmt pos:start="421:9" pos:end="421:70"><expr pos:start="421:9" pos:end="421:69"><name pos:start="421:9" pos:end="421:13"><name pos:start="421:9" pos:end="421:10">hd</name><index pos:start="421:11" pos:end="421:13">[<expr pos:start="421:12" pos:end="421:12"><name pos:start="421:12" pos:end="421:12">i</name></expr>]</index></name> <operator pos:start="421:15" pos:end="421:15">=</operator> <call pos:start="421:17" pos:end="421:69"><name pos:start="421:17" pos:end="421:25">drive_get</name><argument_list pos:start="421:26" pos:end="421:69">(<argument pos:start="421:27" pos:end="421:32"><expr pos:start="421:27" pos:end="421:32"><name pos:start="421:27" pos:end="421:32">IF_IDE</name></expr></argument>, <argument pos:start="421:35" pos:end="421:50"><expr pos:start="421:35" pos:end="421:50"><name pos:start="421:35" pos:end="421:35">i</name> <operator pos:start="421:37" pos:end="421:37">/</operator> <name pos:start="421:39" pos:end="421:50">MAX_IDE_DEVS</name></expr></argument>, <argument pos:start="421:53" pos:end="421:68"><expr pos:start="421:53" pos:end="421:68"><name pos:start="421:53" pos:end="421:53">i</name> <operator pos:start="421:55" pos:end="421:55">%</operator> <name pos:start="421:57" pos:end="421:68">MAX_IDE_DEVS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="427:5" pos:end="441:5"><if pos:start="427:5" pos:end="431:5">if <condition pos:start="427:8" pos:end="427:20">(<expr pos:start="427:9" pos:end="427:19"><name pos:start="427:9" pos:end="427:19">pci_enabled</name></expr>)</condition> <block pos:start="427:22" pos:end="431:5">{<block_content pos:start="429:9" pos:end="429:57">

        <expr_stmt pos:start="429:9" pos:end="429:57"><expr pos:start="429:9" pos:end="429:56"><call pos:start="429:9" pos:end="429:56"><name pos:start="429:9" pos:end="429:26">pci_piix3_ide_init</name><argument_list pos:start="429:27" pos:end="429:56">(<argument pos:start="429:28" pos:end="429:34"><expr pos:start="429:28" pos:end="429:34"><name pos:start="429:28" pos:end="429:34">pci_bus</name></expr></argument>, <argument pos:start="429:37" pos:end="429:38"><expr pos:start="429:37" pos:end="429:38"><name pos:start="429:37" pos:end="429:38">hd</name></expr></argument>, <argument pos:start="429:41" pos:end="429:55"><expr pos:start="429:41" pos:end="429:55"><name pos:start="429:41" pos:end="429:51">piix3_devfn</name> <operator pos:start="429:53" pos:end="429:53">+</operator> <literal type="number" pos:start="429:55" pos:end="429:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="431:7" pos:end="441:5">else <block pos:start="431:12" pos:end="441:5">{<block_content pos:start="433:9" pos:end="439:9">

        <for pos:start="433:9" pos:end="439:9">for<control pos:start="433:12" pos:end="433:40">(<init pos:start="433:13" pos:end="433:18"><expr pos:start="433:13" pos:end="433:17"><name pos:start="433:13" pos:end="433:13">i</name> <operator pos:start="433:15" pos:end="433:15">=</operator> <literal type="number" pos:start="433:17" pos:end="433:17">0</literal></expr>;</init> <condition pos:start="433:20" pos:end="433:35"><expr pos:start="433:20" pos:end="433:34"><name pos:start="433:20" pos:end="433:20">i</name> <operator pos:start="433:22" pos:end="433:22">&lt;</operator> <name pos:start="433:24" pos:end="433:34">MAX_IDE_BUS</name></expr>;</condition> <incr pos:start="433:37" pos:end="433:39"><expr pos:start="433:37" pos:end="433:39"><name pos:start="433:37" pos:end="433:37">i</name><operator pos:start="433:38" pos:end="433:39">++</operator></expr></incr>)</control> <block pos:start="433:42" pos:end="439:9">{<block_content pos:start="435:13" pos:end="437:73">

            <expr_stmt pos:start="435:13" pos:end="437:73"><expr pos:start="435:13" pos:end="437:72"><call pos:start="435:13" pos:end="437:72"><name pos:start="435:13" pos:end="435:24">isa_ide_init</name><argument_list pos:start="435:25" pos:end="437:72">(<argument pos:start="435:26" pos:end="435:38"><expr pos:start="435:26" pos:end="435:38"><name pos:start="435:26" pos:end="435:38"><name pos:start="435:26" pos:end="435:35">ide_iobase</name><index pos:start="435:36" pos:end="435:38">[<expr pos:start="435:37" pos:end="435:37"><name pos:start="435:37" pos:end="435:37">i</name></expr>]</index></name></expr></argument>, <argument pos:start="435:41" pos:end="435:54"><expr pos:start="435:41" pos:end="435:54"><name pos:start="435:41" pos:end="435:54"><name pos:start="435:41" pos:end="435:51">ide_iobase2</name><index pos:start="435:52" pos:end="435:54">[<expr pos:start="435:53" pos:end="435:53"><name pos:start="435:53" pos:end="435:53">i</name></expr>]</index></name></expr></argument>, <argument pos:start="435:57" pos:end="435:66"><expr pos:start="435:57" pos:end="435:66"><name pos:start="435:57" pos:end="435:66"><name pos:start="435:57" pos:end="435:63">ide_irq</name><index pos:start="435:64" pos:end="435:66">[<expr pos:start="435:65" pos:end="435:65"><name pos:start="435:65" pos:end="435:65">i</name></expr>]</index></name></expr></argument>,

	                 <argument pos:start="437:26" pos:end="437:45"><expr pos:start="437:26" pos:end="437:45"><name pos:start="437:26" pos:end="437:45"><name pos:start="437:26" pos:end="437:27">hd</name><index pos:start="437:28" pos:end="437:45">[<expr pos:start="437:29" pos:end="437:44"><name pos:start="437:29" pos:end="437:40">MAX_IDE_DEVS</name> <operator pos:start="437:42" pos:end="437:42">*</operator> <name pos:start="437:44" pos:end="437:44">i</name></expr>]</index></name></expr></argument>, <argument pos:start="437:48" pos:end="437:71"><expr pos:start="437:48" pos:end="437:71"><name pos:start="437:48" pos:end="437:71"><name pos:start="437:48" pos:end="437:49">hd</name><index pos:start="437:50" pos:end="437:71">[<expr pos:start="437:51" pos:end="437:70"><name pos:start="437:51" pos:end="437:62">MAX_IDE_DEVS</name> <operator pos:start="437:64" pos:end="437:64">*</operator> <name pos:start="437:66" pos:end="437:66">i</name> <operator pos:start="437:68" pos:end="437:68">+</operator> <literal type="number" pos:start="437:70" pos:end="437:70">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="445:5" pos:end="445:41"><expr pos:start="445:5" pos:end="445:40"><name pos:start="445:5" pos:end="445:11">isa_dev</name> <operator pos:start="445:13" pos:end="445:13">=</operator> <call pos:start="445:15" pos:end="445:40"><name pos:start="445:15" pos:end="445:31">isa_create_simple</name><argument_list pos:start="445:32" pos:end="445:40">(<argument pos:start="445:33" pos:end="445:39"><expr pos:start="445:33" pos:end="445:39"><literal type="string" pos:start="445:33" pos:end="445:39">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="447:5" pos:end="450:0"><expr pos:start="447:5" pos:end="447:15"><call pos:start="447:5" pos:end="447:15"><name pos:start="447:5" pos:end="447:12">DMA_init</name><argument_list pos:start="447:13" pos:end="447:15">(<argument pos:start="447:14" pos:end="447:14"><expr pos:start="447:14" pos:end="447:14"><literal type="number" pos:start="447:14" pos:end="447:14">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="449:1" pos:end="449:16">#<cpp:directive pos:start="449:2" pos:end="449:6">ifdef</cpp:directive> <name pos:start="449:8" pos:end="449:16">HAS_AUDIO</name></cpp:ifdef>

    <expr_stmt pos:start="451:5" pos:end="454:0"><expr pos:start="451:5" pos:end="451:53"><call pos:start="451:5" pos:end="451:53"><name pos:start="451:5" pos:end="451:14">audio_init</name><argument_list pos:start="451:15" pos:end="451:53">(<argument pos:start="451:16" pos:end="451:43"><expr pos:start="451:16" pos:end="451:43"><ternary pos:start="451:16" pos:end="451:43"><condition pos:start="451:16" pos:end="451:28"><expr pos:start="451:16" pos:end="451:26"><name pos:start="451:16" pos:end="451:26">pci_enabled</name></expr> ?</condition><then pos:start="451:30" pos:end="451:36"> <expr pos:start="451:30" pos:end="451:36"><name pos:start="451:30" pos:end="451:36">pci_bus</name></expr> </then><else pos:start="451:38" pos:end="451:43">: <expr pos:start="451:40" pos:end="451:43"><name pos:start="451:40" pos:end="451:43">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="451:46" pos:end="451:52"><expr pos:start="451:46" pos:end="451:52"><name pos:start="451:46" pos:end="451:52">isa_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="453:1" pos:end="453:6">#<cpp:directive pos:start="453:2" pos:end="453:6">endif</cpp:directive></cpp:endif>



    <for pos:start="457:5" pos:end="461:5">for<control pos:start="457:8" pos:end="457:31">(<init pos:start="457:9" pos:end="457:14"><expr pos:start="457:9" pos:end="457:13"><name pos:start="457:9" pos:end="457:9">i</name> <operator pos:start="457:11" pos:end="457:11">=</operator> <literal type="number" pos:start="457:13" pos:end="457:13">0</literal></expr>;</init> <condition pos:start="457:16" pos:end="457:26"><expr pos:start="457:16" pos:end="457:25"><name pos:start="457:16" pos:end="457:16">i</name> <operator pos:start="457:18" pos:end="457:18">&lt;</operator> <name pos:start="457:20" pos:end="457:25">MAX_FD</name></expr>;</condition> <incr pos:start="457:28" pos:end="457:30"><expr pos:start="457:28" pos:end="457:30"><name pos:start="457:28" pos:end="457:28">i</name><operator pos:start="457:29" pos:end="457:30">++</operator></expr></incr>)</control> <block pos:start="457:33" pos:end="461:5">{<block_content pos:start="459:9" pos:end="459:43">

        <expr_stmt pos:start="459:9" pos:end="459:43"><expr pos:start="459:9" pos:end="459:42"><name pos:start="459:9" pos:end="459:13"><name pos:start="459:9" pos:end="459:10">fd</name><index pos:start="459:11" pos:end="459:13">[<expr pos:start="459:12" pos:end="459:12"><name pos:start="459:12" pos:end="459:12">i</name></expr>]</index></name> <operator pos:start="459:15" pos:end="459:15">=</operator> <call pos:start="459:17" pos:end="459:42"><name pos:start="459:17" pos:end="459:25">drive_get</name><argument_list pos:start="459:26" pos:end="459:42">(<argument pos:start="459:27" pos:end="459:35"><expr pos:start="459:27" pos:end="459:35"><name pos:start="459:27" pos:end="459:35">IF_FLOPPY</name></expr></argument>, <argument pos:start="459:38" pos:end="459:38"><expr pos:start="459:38" pos:end="459:38"><literal type="number" pos:start="459:38" pos:end="459:38">0</literal></expr></argument>, <argument pos:start="459:41" pos:end="459:41"><expr pos:start="459:41" pos:end="459:41"><name pos:start="459:41" pos:end="459:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="463:5" pos:end="463:44"><expr pos:start="463:5" pos:end="463:43"><name pos:start="463:5" pos:end="463:21">floppy_controller</name> <operator pos:start="463:23" pos:end="463:23">=</operator> <call pos:start="463:25" pos:end="463:43"><name pos:start="463:25" pos:end="463:39">fdctrl_init_isa</name><argument_list pos:start="463:40" pos:end="463:43">(<argument pos:start="463:41" pos:end="463:42"><expr pos:start="463:41" pos:end="463:42"><name pos:start="463:41" pos:end="463:42">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="467:5" pos:end="467:69"><expr pos:start="467:5" pos:end="467:68"><call pos:start="467:5" pos:end="467:68"><name pos:start="467:5" pos:end="467:13">cmos_init</name><argument_list pos:start="467:14" pos:end="467:68">(<argument pos:start="467:15" pos:end="467:31"><expr pos:start="467:15" pos:end="467:31"><name pos:start="467:15" pos:end="467:31">below_4g_mem_size</name></expr></argument>, <argument pos:start="467:34" pos:end="467:50"><expr pos:start="467:34" pos:end="467:50"><name pos:start="467:34" pos:end="467:50">above_4g_mem_size</name></expr></argument>, <argument pos:start="467:53" pos:end="467:63"><expr pos:start="467:53" pos:end="467:63"><name pos:start="467:53" pos:end="467:63">boot_device</name></expr></argument>, <argument pos:start="467:66" pos:end="467:67"><expr pos:start="467:66" pos:end="467:67"><name pos:start="467:66" pos:end="467:67">hd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="471:5" pos:end="475:5"><if pos:start="471:5" pos:end="475:5">if <condition pos:start="471:8" pos:end="471:35">(<expr pos:start="471:9" pos:end="471:34"><name pos:start="471:9" pos:end="471:19">pci_enabled</name> <operator pos:start="471:21" pos:end="471:22">&amp;&amp;</operator> <name pos:start="471:24" pos:end="471:34">usb_enabled</name></expr>)</condition> <block pos:start="471:37" pos:end="475:5">{<block_content pos:start="473:9" pos:end="473:54">

        <expr_stmt pos:start="473:9" pos:end="473:54"><expr pos:start="473:9" pos:end="473:53"><call pos:start="473:9" pos:end="473:53"><name pos:start="473:9" pos:end="473:27">usb_uhci_piix3_init</name><argument_list pos:start="473:28" pos:end="473:53">(<argument pos:start="473:29" pos:end="473:35"><expr pos:start="473:29" pos:end="473:35"><name pos:start="473:29" pos:end="473:35">pci_bus</name></expr></argument>, <argument pos:start="473:38" pos:end="473:52"><expr pos:start="473:38" pos:end="473:52"><name pos:start="473:38" pos:end="473:48">piix3_devfn</name> <operator pos:start="473:50" pos:end="473:50">+</operator> <literal type="number" pos:start="473:52" pos:end="473:52">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="479:5" pos:end="509:5"><if pos:start="479:5" pos:end="509:5">if <condition pos:start="479:8" pos:end="479:36">(<expr pos:start="479:9" pos:end="479:35"><name pos:start="479:9" pos:end="479:19">pci_enabled</name> <operator pos:start="479:21" pos:end="479:22">&amp;&amp;</operator> <name pos:start="479:24" pos:end="479:35">acpi_enabled</name></expr>)</condition> <block pos:start="479:38" pos:end="509:5">{<block_content pos:start="481:9" pos:end="507:48">

        <decl_stmt pos:start="481:9" pos:end="481:52"><decl pos:start="481:9" pos:end="481:51"><type pos:start="481:9" pos:end="481:17"><name pos:start="481:9" pos:end="481:15">uint8_t</name> <modifier pos:start="481:17" pos:end="481:17">*</modifier></type><name pos:start="481:18" pos:end="481:27">eeprom_buf</name> <init pos:start="481:29" pos:end="481:51">= <expr pos:start="481:31" pos:end="481:51"><call pos:start="481:31" pos:end="481:51"><name pos:start="481:31" pos:end="481:42">qemu_mallocz</name><argument_list pos:start="481:43" pos:end="481:51">(<argument pos:start="481:44" pos:end="481:50"><expr pos:start="481:44" pos:end="481:50"><literal type="number" pos:start="481:44" pos:end="481:44">8</literal> <operator pos:start="481:46" pos:end="481:46">*</operator> <literal type="number" pos:start="481:48" pos:end="481:50">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="481:54" pos:end="481:84">/* XXX: make this persistent */</comment>

        <decl_stmt pos:start="483:9" pos:end="483:23"><decl pos:start="483:9" pos:end="483:22"><type pos:start="483:9" pos:end="483:17"><name pos:start="483:9" pos:end="483:15">i2c_bus</name> <modifier pos:start="483:17" pos:end="483:17">*</modifier></type><name pos:start="483:18" pos:end="483:22">smbus</name></decl>;</decl_stmt>



        <comment type="block" pos:start="487:9" pos:end="487:46">/* TODO: Populate SPD eeprom data.  */</comment>

        <expr_stmt pos:start="489:9" pos:end="491:50"><expr pos:start="489:9" pos:end="491:49"><name pos:start="489:9" pos:end="489:13">smbus</name> <operator pos:start="489:15" pos:end="489:15">=</operator> <call pos:start="489:17" pos:end="491:49"><name pos:start="489:17" pos:end="489:29">piix4_pm_init</name><argument_list pos:start="489:30" pos:end="491:49">(<argument pos:start="489:31" pos:end="489:37"><expr pos:start="489:31" pos:end="489:37"><name pos:start="489:31" pos:end="489:37">pci_bus</name></expr></argument>, <argument pos:start="489:40" pos:end="489:54"><expr pos:start="489:40" pos:end="489:54"><name pos:start="489:40" pos:end="489:50">piix3_devfn</name> <operator pos:start="489:52" pos:end="489:52">+</operator> <literal type="number" pos:start="489:54" pos:end="489:54">3</literal></expr></argument>, <argument pos:start="489:57" pos:end="489:62"><expr pos:start="489:57" pos:end="489:62"><literal type="number" pos:start="489:57" pos:end="489:62">0xb100</literal></expr></argument>,

                              <argument pos:start="491:31" pos:end="491:48"><expr pos:start="491:31" pos:end="491:48"><call pos:start="491:31" pos:end="491:48"><name pos:start="491:31" pos:end="491:45">isa_reserve_irq</name><argument_list pos:start="491:46" pos:end="491:48">(<argument pos:start="491:47" pos:end="491:47"><expr pos:start="491:47" pos:end="491:47"><literal type="number" pos:start="491:47" pos:end="491:47">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="493:9" pos:end="505:9">for <control pos:start="493:13" pos:end="493:31">(<init pos:start="493:14" pos:end="493:19"><expr pos:start="493:14" pos:end="493:18"><name pos:start="493:14" pos:end="493:14">i</name> <operator pos:start="493:16" pos:end="493:16">=</operator> <literal type="number" pos:start="493:18" pos:end="493:18">0</literal></expr>;</init> <condition pos:start="493:21" pos:end="493:26"><expr pos:start="493:21" pos:end="493:25"><name pos:start="493:21" pos:end="493:21">i</name> <operator pos:start="493:23" pos:end="493:23">&lt;</operator> <literal type="number" pos:start="493:25" pos:end="493:25">8</literal></expr>;</condition> <incr pos:start="493:28" pos:end="493:30"><expr pos:start="493:28" pos:end="493:30"><name pos:start="493:28" pos:end="493:28">i</name><operator pos:start="493:29" pos:end="493:30">++</operator></expr></incr>)</control> <block pos:start="493:33" pos:end="505:9">{<block_content pos:start="495:13" pos:end="503:37">

            <decl_stmt pos:start="495:13" pos:end="495:32"><decl pos:start="495:13" pos:end="495:31"><type pos:start="495:13" pos:end="495:25"><name pos:start="495:13" pos:end="495:23">DeviceState</name> <modifier pos:start="495:25" pos:end="495:25">*</modifier></type><name pos:start="495:26" pos:end="495:31">eeprom</name></decl>;</decl_stmt>

            <expr_stmt pos:start="497:13" pos:end="497:68"><expr pos:start="497:13" pos:end="497:67"><name pos:start="497:13" pos:end="497:18">eeprom</name> <operator pos:start="497:20" pos:end="497:20">=</operator> <call pos:start="497:22" pos:end="497:67"><name pos:start="497:22" pos:end="497:32">qdev_create</name><argument_list pos:start="497:33" pos:end="497:67">(<argument pos:start="497:34" pos:end="497:50"><expr pos:start="497:34" pos:end="497:50"><operator pos:start="497:34" pos:end="497:34">(</operator><name pos:start="497:35" pos:end="497:42">BusState</name> <operator pos:start="497:44" pos:end="497:44">*</operator><operator pos:start="497:45" pos:end="497:45">)</operator><name pos:start="497:46" pos:end="497:50">smbus</name></expr></argument>, <argument pos:start="497:53" pos:end="497:66"><expr pos:start="497:53" pos:end="497:66"><literal type="string" pos:start="497:53" pos:end="497:66">"smbus-eeprom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="499:13" pos:end="499:61"><expr pos:start="499:13" pos:end="499:60"><call pos:start="499:13" pos:end="499:60"><name pos:start="499:13" pos:end="499:31">qdev_prop_set_uint8</name><argument_list pos:start="499:32" pos:end="499:60">(<argument pos:start="499:33" pos:end="499:38"><expr pos:start="499:33" pos:end="499:38"><name pos:start="499:33" pos:end="499:38">eeprom</name></expr></argument>, <argument pos:start="499:41" pos:end="499:49"><expr pos:start="499:41" pos:end="499:49"><literal type="string" pos:start="499:41" pos:end="499:49">"address"</literal></expr></argument>, <argument pos:start="499:52" pos:end="499:59"><expr pos:start="499:52" pos:end="499:59"><literal type="number" pos:start="499:52" pos:end="499:57">0x50</literal> <operator pos:start="499:57" pos:end="499:57">+</operator> <name pos:start="499:59" pos:end="499:59">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="501:13" pos:end="501:70"><expr pos:start="501:13" pos:end="501:69"><call pos:start="501:13" pos:end="501:69"><name pos:start="501:13" pos:end="501:29">qdev_prop_set_ptr</name><argument_list pos:start="501:30" pos:end="501:69">(<argument pos:start="501:31" pos:end="501:36"><expr pos:start="501:31" pos:end="501:36"><name pos:start="501:31" pos:end="501:36">eeprom</name></expr></argument>, <argument pos:start="501:39" pos:end="501:44"><expr pos:start="501:39" pos:end="501:44"><literal type="string" pos:start="501:39" pos:end="501:44">"data"</literal></expr></argument>, <argument pos:start="501:47" pos:end="501:68"><expr pos:start="501:47" pos:end="501:68"><name pos:start="501:47" pos:end="501:56">eeprom_buf</name> <operator pos:start="501:58" pos:end="501:58">+</operator> <operator pos:start="501:60" pos:end="501:60">(</operator><name pos:start="501:61" pos:end="501:61">i</name> <operator pos:start="501:63" pos:end="501:63">*</operator> <literal type="number" pos:start="501:65" pos:end="501:67">256</literal><operator pos:start="501:68" pos:end="501:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="503:13" pos:end="503:37"><expr pos:start="503:13" pos:end="503:36"><call pos:start="503:13" pos:end="503:36"><name pos:start="503:13" pos:end="503:28">qdev_init_nofail</name><argument_list pos:start="503:29" pos:end="503:36">(<argument pos:start="503:30" pos:end="503:35"><expr pos:start="503:30" pos:end="503:35"><name pos:start="503:30" pos:end="503:35">eeprom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="507:9" pos:end="507:48"><expr pos:start="507:9" pos:end="507:47"><call pos:start="507:9" pos:end="507:47"><name pos:start="507:9" pos:end="507:38">piix4_acpi_system_hot_add_init</name><argument_list pos:start="507:39" pos:end="507:47">(<argument pos:start="507:40" pos:end="507:46"><expr pos:start="507:40" pos:end="507:46"><name pos:start="507:40" pos:end="507:46">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="513:5" pos:end="517:5"><if pos:start="513:5" pos:end="517:5">if <condition pos:start="513:8" pos:end="513:21">(<expr pos:start="513:9" pos:end="513:20"><name pos:start="513:9" pos:end="513:20">i440fx_state</name></expr>)</condition> <block pos:start="513:23" pos:end="517:5">{<block_content pos:start="515:9" pos:end="515:50">

        <expr_stmt pos:start="515:9" pos:end="515:50"><expr pos:start="515:9" pos:end="515:49"><call pos:start="515:9" pos:end="515:49"><name pos:start="515:9" pos:end="515:35">i440fx_init_memory_mappings</name><argument_list pos:start="515:36" pos:end="515:49">(<argument pos:start="515:37" pos:end="515:48"><expr pos:start="515:37" pos:end="515:48"><name pos:start="515:37" pos:end="515:48">i440fx_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="521:5" pos:end="537:5"><if pos:start="521:5" pos:end="537:5">if <condition pos:start="521:8" pos:end="521:20">(<expr pos:start="521:9" pos:end="521:19"><name pos:start="521:9" pos:end="521:19">pci_enabled</name></expr>)</condition> <block pos:start="521:22" pos:end="537:5">{<block_content pos:start="523:9" pos:end="535:9">

	<decl_stmt pos:start="523:9" pos:end="523:20"><decl pos:start="523:9" pos:end="523:19"><type pos:start="523:9" pos:end="523:11"><name pos:start="523:9" pos:end="523:11">int</name></type> <name pos:start="523:13" pos:end="523:19">max_bus</name></decl>;</decl_stmt>

        <decl_stmt pos:start="525:9" pos:end="525:16"><decl pos:start="525:9" pos:end="525:15"><type pos:start="525:9" pos:end="525:11"><name pos:start="525:9" pos:end="525:11">int</name></type> <name pos:start="525:13" pos:end="525:15">bus</name></decl>;</decl_stmt>



        <expr_stmt pos:start="529:9" pos:end="529:45"><expr pos:start="529:9" pos:end="529:44"><name pos:start="529:9" pos:end="529:15">max_bus</name> <operator pos:start="529:17" pos:end="529:17">=</operator> <call pos:start="529:19" pos:end="529:44"><name pos:start="529:19" pos:end="529:35">drive_get_max_bus</name><argument_list pos:start="529:36" pos:end="529:44">(<argument pos:start="529:37" pos:end="529:43"><expr pos:start="529:37" pos:end="529:43"><name pos:start="529:37" pos:end="529:43">IF_SCSI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for pos:start="531:9" pos:end="535:9">for <control pos:start="531:13" pos:end="531:44">(<init pos:start="531:14" pos:end="531:21"><expr pos:start="531:14" pos:end="531:20"><name pos:start="531:14" pos:end="531:16">bus</name> <operator pos:start="531:18" pos:end="531:18">=</operator> <literal type="number" pos:start="531:20" pos:end="531:20">0</literal></expr>;</init> <condition pos:start="531:23" pos:end="531:37"><expr pos:start="531:23" pos:end="531:36"><name pos:start="531:23" pos:end="531:25">bus</name> <operator pos:start="531:27" pos:end="531:28">&lt;=</operator> <name pos:start="531:30" pos:end="531:36">max_bus</name></expr>;</condition> <incr pos:start="531:39" pos:end="531:43"><expr pos:start="531:39" pos:end="531:43"><name pos:start="531:39" pos:end="531:41">bus</name><operator pos:start="531:42" pos:end="531:43">++</operator></expr></incr>)</control> <block pos:start="531:46" pos:end="535:9">{<block_content pos:start="533:13" pos:end="533:57">

            <expr_stmt pos:start="533:13" pos:end="533:57"><expr pos:start="533:13" pos:end="533:56"><call pos:start="533:13" pos:end="533:56"><name pos:start="533:13" pos:end="533:29">pci_create_simple</name><argument_list pos:start="533:30" pos:end="533:56">(<argument pos:start="533:31" pos:end="533:37"><expr pos:start="533:31" pos:end="533:37"><name pos:start="533:31" pos:end="533:37">pci_bus</name></expr></argument>, <argument pos:start="533:40" pos:end="533:41"><expr pos:start="533:40" pos:end="533:41"><operator pos:start="533:40" pos:end="533:40">-</operator><literal type="number" pos:start="533:41" pos:end="533:41">1</literal></expr></argument>, <argument pos:start="533:44" pos:end="533:55"><expr pos:start="533:44" pos:end="533:55"><literal type="string" pos:start="533:44" pos:end="533:55">"lsi53c895a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="541:5" pos:end="541:36">/* Add virtio console devices */</comment>

    <if_stmt pos:start="543:5" pos:end="555:5"><if pos:start="543:5" pos:end="555:5">if <condition pos:start="543:8" pos:end="543:20">(<expr pos:start="543:9" pos:end="543:19"><name pos:start="543:9" pos:end="543:19">pci_enabled</name></expr>)</condition> <block pos:start="543:22" pos:end="555:5">{<block_content pos:start="545:9" pos:end="553:9">

        <for pos:start="545:9" pos:end="553:9">for<control pos:start="545:12" pos:end="545:48">(<init pos:start="545:13" pos:end="545:18"><expr pos:start="545:13" pos:end="545:17"><name pos:start="545:13" pos:end="545:13">i</name> <operator pos:start="545:15" pos:end="545:15">=</operator> <literal type="number" pos:start="545:17" pos:end="545:17">0</literal></expr>;</init> <condition pos:start="545:20" pos:end="545:43"><expr pos:start="545:20" pos:end="545:42"><name pos:start="545:20" pos:end="545:20">i</name> <operator pos:start="545:22" pos:end="545:22">&lt;</operator> <name pos:start="545:24" pos:end="545:42">MAX_VIRTIO_CONSOLES</name></expr>;</condition> <incr pos:start="545:45" pos:end="545:47"><expr pos:start="545:45" pos:end="545:47"><name pos:start="545:45" pos:end="545:45">i</name><operator pos:start="545:46" pos:end="545:47">++</operator></expr></incr>)</control> <block pos:start="545:50" pos:end="553:9">{<block_content pos:start="547:13" pos:end="551:13">

            <if_stmt pos:start="547:13" pos:end="551:13"><if pos:start="547:13" pos:end="551:13">if <condition pos:start="547:16" pos:end="547:31">(<expr pos:start="547:17" pos:end="547:30"><name pos:start="547:17" pos:end="547:30"><name pos:start="547:17" pos:end="547:27">virtcon_hds</name><index pos:start="547:28" pos:end="547:30">[<expr pos:start="547:29" pos:end="547:29"><name pos:start="547:29" pos:end="547:29">i</name></expr>]</index></name></expr>)</condition> <block pos:start="547:33" pos:end="551:13">{<block_content pos:start="549:17" pos:end="549:69">

                <expr_stmt pos:start="549:17" pos:end="549:69"><expr pos:start="549:17" pos:end="549:68"><call pos:start="549:17" pos:end="549:68"><name pos:start="549:17" pos:end="549:33">pci_create_simple</name><argument_list pos:start="549:34" pos:end="549:68">(<argument pos:start="549:35" pos:end="549:41"><expr pos:start="549:35" pos:end="549:41"><name pos:start="549:35" pos:end="549:41">pci_bus</name></expr></argument>, <argument pos:start="549:44" pos:end="549:45"><expr pos:start="549:44" pos:end="549:45"><operator pos:start="549:44" pos:end="549:44">-</operator><literal type="number" pos:start="549:45" pos:end="549:45">1</literal></expr></argument>, <argument pos:start="549:48" pos:end="549:67"><expr pos:start="549:48" pos:end="549:67"><literal type="string" pos:start="549:48" pos:end="549:67">"virtio-console-pci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="559:5" pos:end="559:24"><expr pos:start="559:5" pos:end="559:23"><call pos:start="559:5" pos:end="559:23"><name pos:start="559:5" pos:end="559:15">rom_load_fw</name><argument_list pos:start="559:16" pos:end="559:23">(<argument pos:start="559:17" pos:end="559:22"><expr pos:start="559:17" pos:end="559:22"><name pos:start="559:17" pos:end="559:22">fw_cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
