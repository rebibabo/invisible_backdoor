<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24445.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:41">process_incoming_migration_bh</name><parameter_list pos:start="1:42" pos:end="1:55">(<parameter pos:start="1:43" pos:end="1:54"><decl pos:start="1:43" pos:end="1:54"><type pos:start="1:43" pos:end="1:48"><name pos:start="1:43" pos:end="1:46">void</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:54">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:39">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">Error</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:20">local_err</name> <init pos:start="5:22" pos:end="5:27">= <expr pos:start="5:24" pos:end="5:27"><name pos:start="5:24" pos:end="5:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:28"><name pos:start="7:5" pos:end="7:26">MigrationIncomingState</name> <modifier pos:start="7:28" pos:end="7:28">*</modifier></type><name pos:start="7:29" pos:end="7:31">mis</name> <init pos:start="7:33" pos:end="7:40">= <expr pos:start="7:35" pos:end="7:40"><name pos:start="7:35" pos:end="7:40">opaque</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="13:65">/* Make sure all file formats flush their mutable metadata.

     * If we get an error here, just don't restart the VM yet. */</comment>

    <expr_stmt pos:start="15:5" pos:end="15:42"><expr pos:start="15:5" pos:end="15:41"><call pos:start="15:5" pos:end="15:41"><name pos:start="15:5" pos:end="15:29">bdrv_invalidate_cache_all</name><argument_list pos:start="15:30" pos:end="15:41">(<argument pos:start="15:31" pos:end="15:40"><expr pos:start="15:31" pos:end="15:40"><operator pos:start="15:31" pos:end="15:31">&amp;</operator><name pos:start="15:32" pos:end="15:40">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:19">(<expr pos:start="17:9" pos:end="17:18"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:18">local_err</name></expr>)</condition> <block pos:start="17:21" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:47">

        <expr_stmt pos:start="19:9" pos:end="19:47"><expr pos:start="19:9" pos:end="19:46"><call pos:start="19:9" pos:end="19:46"><name pos:start="19:9" pos:end="19:34">blk_resume_after_migration</name><argument_list pos:start="19:35" pos:end="19:46">(<argument pos:start="19:36" pos:end="19:45"><expr pos:start="19:36" pos:end="19:45"><operator pos:start="19:36" pos:end="19:36">&amp;</operator><name pos:start="19:37" pos:end="19:45">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:18">(<expr pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:17">local_err</name></expr>)</condition> <block pos:start="23:20" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:26">

        <expr_stmt pos:start="25:9" pos:end="25:36"><expr pos:start="25:9" pos:end="25:35"><call pos:start="25:9" pos:end="25:35"><name pos:start="25:9" pos:end="25:24">error_report_err</name><argument_list pos:start="25:25" pos:end="25:35">(<argument pos:start="25:26" pos:end="25:34"><expr pos:start="25:26" pos:end="25:34"><name pos:start="25:26" pos:end="25:34">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:25"><expr pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:17">local_err</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <name pos:start="27:21" pos:end="27:24">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:26"><expr pos:start="29:9" pos:end="29:25"><name pos:start="29:9" pos:end="29:17">autostart</name> <operator pos:start="29:19" pos:end="29:19">=</operator> <name pos:start="29:21" pos:end="29:25">false</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="41:7">/*

     * This must happen after all error conditions are dealt with and

     * we're sure the VM is going to be running on this host.

     */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:25"><expr pos:start="43:5" pos:end="43:24"><call pos:start="43:5" pos:end="43:24"><name pos:start="43:5" pos:end="43:22">qemu_announce_self</name><argument_list pos:start="43:23" pos:end="43:24">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="47:5" pos:end="51:23">/* If global state section was not received or we are in running

       state, we need to obey autostart. Any other state is set with

       runstate_set. */</comment>



    <if_stmt pos:start="55:5" pos:end="73:5"><if pos:start="55:5" pos:end="69:5">if <condition pos:start="55:8" pos:end="57:57">(<expr pos:start="55:9" pos:end="57:56"><operator pos:start="55:9" pos:end="55:9">!</operator><call pos:start="55:10" pos:end="55:32"><name pos:start="55:10" pos:end="55:30">global_state_received</name><argument_list pos:start="55:31" pos:end="55:32">()</argument_list></call> <operator pos:start="55:34" pos:end="55:35">||</operator>

        <call pos:start="57:9" pos:end="57:35"><name pos:start="57:9" pos:end="57:33">global_state_get_runstate</name><argument_list pos:start="57:34" pos:end="57:35">()</argument_list></call> <operator pos:start="57:37" pos:end="57:38">==</operator> <name pos:start="57:40" pos:end="57:56">RUN_STATE_RUNNING</name></expr>)</condition> <block pos:start="57:59" pos:end="69:5">{<block_content pos:start="59:9" pos:end="67:9">

        <if_stmt pos:start="59:9" pos:end="67:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:22">(<expr pos:start="59:13" pos:end="59:21"><name pos:start="59:13" pos:end="59:21">autostart</name></expr>)</condition> <block pos:start="59:24" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:23">

            <expr_stmt pos:start="61:13" pos:end="61:23"><expr pos:start="61:13" pos:end="61:22"><call pos:start="61:13" pos:end="61:22"><name pos:start="61:13" pos:end="61:20">vm_start</name><argument_list pos:start="61:21" pos:end="61:22">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="63:11" pos:end="67:9">else <block pos:start="63:16" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:43">

            <expr_stmt pos:start="65:13" pos:end="65:43"><expr pos:start="65:13" pos:end="65:42"><call pos:start="65:13" pos:end="65:42"><name pos:start="65:13" pos:end="65:24">runstate_set</name><argument_list pos:start="65:25" pos:end="65:42">(<argument pos:start="65:26" pos:end="65:41"><expr pos:start="65:26" pos:end="65:41"><name pos:start="65:26" pos:end="65:41">RUN_STATE_PAUSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="69:7" pos:end="73:5">else <block pos:start="69:12" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:50">

        <expr_stmt pos:start="71:9" pos:end="71:50"><expr pos:start="71:9" pos:end="71:49"><call pos:start="71:9" pos:end="71:49"><name pos:start="71:9" pos:end="71:20">runstate_set</name><argument_list pos:start="71:21" pos:end="71:49">(<argument pos:start="71:22" pos:end="71:48"><expr pos:start="71:22" pos:end="71:48"><call pos:start="71:22" pos:end="71:48"><name pos:start="71:22" pos:end="71:46">global_state_get_runstate</name><argument_list pos:start="71:47" pos:end="71:48">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:38"><expr pos:start="75:5" pos:end="75:37"><call pos:start="75:5" pos:end="75:37"><name pos:start="75:5" pos:end="75:35">migrate_decompress_threads_join</name><argument_list pos:start="75:36" pos:end="75:37">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="77:5" pos:end="85:7">/*

     * This must happen after any state changes since as soon as an external

     * observer sees this event they might start to prod at the VM assuming

     * it's ready to use.

     */</comment>

    <expr_stmt pos:start="87:5" pos:end="89:50"><expr pos:start="87:5" pos:end="89:49"><call pos:start="87:5" pos:end="89:49"><name pos:start="87:5" pos:end="87:21">migrate_set_state</name><argument_list pos:start="87:22" pos:end="89:49">(<argument pos:start="87:23" pos:end="87:33"><expr pos:start="87:23" pos:end="87:33"><operator pos:start="87:23" pos:end="87:23">&amp;</operator><name pos:start="87:24" pos:end="87:33"><name pos:start="87:24" pos:end="87:26">mis</name><operator pos:start="87:27" pos:end="87:28">-&gt;</operator><name pos:start="87:29" pos:end="87:33">state</name></name></expr></argument>, <argument pos:start="87:36" pos:end="87:58"><expr pos:start="87:36" pos:end="87:58"><name pos:start="87:36" pos:end="87:58">MIGRATION_STATUS_ACTIVE</name></expr></argument>,

                      <argument pos:start="89:23" pos:end="89:48"><expr pos:start="89:23" pos:end="89:48"><name pos:start="89:23" pos:end="89:48">MIGRATION_STATUS_COMPLETED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:28"><expr pos:start="91:5" pos:end="91:27"><call pos:start="91:5" pos:end="91:27"><name pos:start="91:5" pos:end="91:18">qemu_bh_delete</name><argument_list pos:start="91:19" pos:end="91:27">(<argument pos:start="91:20" pos:end="91:26"><expr pos:start="91:20" pos:end="91:26"><name pos:start="91:20" pos:end="91:26"><name pos:start="91:20" pos:end="91:22">mis</name><operator pos:start="91:23" pos:end="91:24">-&gt;</operator><name pos:start="91:25" pos:end="91:26">bh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:39"><expr pos:start="93:5" pos:end="93:38"><call pos:start="93:5" pos:end="93:38"><name pos:start="93:5" pos:end="93:36">migration_incoming_state_destroy</name><argument_list pos:start="93:37" pos:end="93:38">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
