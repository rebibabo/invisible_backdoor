<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25302.c" pos:tabs="8"><function pos:start="1:1" pos:end="721:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:9">DriveInfo</name> <modifier pos:start="1:11" pos:end="1:11">*</modifier></type><name pos:start="1:12" pos:end="1:21">drive_init</name><parameter_list pos:start="1:22" pos:end="3:39">(<parameter pos:start="1:23" pos:end="1:36"><decl pos:start="1:23" pos:end="1:36"><type pos:start="1:23" pos:end="1:36"><name pos:start="1:23" pos:end="1:30">QemuOpts</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:36">opts</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:50"><decl pos:start="1:39" pos:end="1:50"><type pos:start="1:39" pos:end="1:50"><name pos:start="1:39" pos:end="1:42">void</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:50">opaque</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:38"><decl pos:start="3:23" pos:end="3:38"><type pos:start="3:23" pos:end="3:38"><name pos:start="3:23" pos:end="3:25">int</name> <modifier pos:start="3:27" pos:end="3:27">*</modifier></type><name pos:start="3:28" pos:end="3:38">fatal_error</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="721:1">{<block_content pos:start="7:5" pos:end="719:17">

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:20">file</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:21"><name pos:start="11:10" pos:end="11:16">devname</name><index pos:start="11:17" pos:end="11:21">[<expr pos:start="11:18" pos:end="11:20"><literal type="number" pos:start="11:18" pos:end="11:20">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:22">serial</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:24">mediastr</name> <init pos:start="15:26" pos:end="15:29">= <expr pos:start="15:28" pos:end="15:29"><literal type="string" pos:start="15:28" pos:end="15:29">""</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:22">BlockInterfaceType</name></type> <name pos:start="17:24" pos:end="17:27">type</name></decl>;</decl_stmt>

    <enum pos:start="19:5" pos:end="19:43">enum <block pos:start="19:10" pos:end="19:36">{ <decl pos:start="19:12" pos:end="19:21"><name pos:start="19:12" pos:end="19:21">MEDIA_DISK</name></decl>, <decl pos:start="19:24" pos:end="19:34"><name pos:start="19:24" pos:end="19:34">MEDIA_CDROM</name></decl> }</block> <decl pos:start="19:38" pos:end="19:42"><name pos:start="19:38" pos:end="19:42">media</name></decl>;</enum>

    <decl_stmt pos:start="21:5" pos:end="21:24"><decl pos:start="21:5" pos:end="21:14"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:14">bus_id</name></decl>, <decl pos:start="21:17" pos:end="21:23"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:17" pos:end="21:23">unit_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:39"><decl pos:start="23:5" pos:end="23:12"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:12">cyls</name></decl>, <decl pos:start="23:15" pos:end="23:19"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:15" pos:end="23:19">heads</name></decl>, <decl pos:start="23:22" pos:end="23:25"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:22" pos:end="23:25">secs</name></decl>, <decl pos:start="23:28" pos:end="23:38"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:28" pos:end="23:38">translation</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:28"><decl pos:start="25:5" pos:end="25:27"><type pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:15">BlockDriver</name> <modifier pos:start="25:17" pos:end="25:17">*</modifier></type><name pos:start="25:18" pos:end="25:20">drv</name> <init pos:start="25:22" pos:end="25:27">= <expr pos:start="25:24" pos:end="25:27"><name pos:start="25:24" pos:end="25:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:34"><decl pos:start="27:5" pos:end="27:33"><type pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:15">QEMUMachine</name> <modifier pos:start="27:17" pos:end="27:17">*</modifier></type><name pos:start="27:18" pos:end="27:24">machine</name> <init pos:start="27:26" pos:end="27:33">= <expr pos:start="27:28" pos:end="27:33"><name pos:start="27:28" pos:end="27:33">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:17"><decl pos:start="29:5" pos:end="29:16"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:16">max_devs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:14"><decl pos:start="31:5" pos:end="31:13"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:13">index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:15"><decl pos:start="33:5" pos:end="33:14"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:10">ro</name> <init pos:start="33:12" pos:end="33:14">= <expr pos:start="33:14" pos:end="33:14"><literal type="number" pos:start="33:14" pos:end="33:14">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:23"><decl pos:start="35:5" pos:end="35:22"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:18">bdrv_flags</name> <init pos:start="35:20" pos:end="35:22">= <expr pos:start="35:22" pos:end="35:22"><literal type="number" pos:start="35:22" pos:end="35:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:38"><decl pos:start="37:5" pos:end="37:21"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:21">on_read_error</name></decl>, <decl pos:start="37:24" pos:end="37:37"><type ref="prev" pos:start="37:5" pos:end="37:7"/><name pos:start="37:24" pos:end="37:37">on_write_error</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:24"><decl pos:start="39:5" pos:end="39:23"><type pos:start="39:5" pos:end="39:16"><specifier pos:start="39:5" pos:end="39:9">const</specifier> <name pos:start="39:11" pos:end="39:14">char</name> <modifier pos:start="39:16" pos:end="39:16">*</modifier></type><name pos:start="39:17" pos:end="39:23">devaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:21"><decl pos:start="41:5" pos:end="41:20"><type pos:start="41:5" pos:end="41:15"><name pos:start="41:5" pos:end="41:13">DriveInfo</name> <modifier pos:start="41:15" pos:end="41:15">*</modifier></type><name pos:start="41:16" pos:end="41:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:21"><decl pos:start="43:5" pos:end="43:20"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:16">snapshot</name> <init pos:start="43:18" pos:end="43:20">= <expr pos:start="43:20" pos:end="43:20"><literal type="number" pos:start="43:20" pos:end="43:20">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:21"><expr pos:start="47:5" pos:end="47:20"><operator pos:start="47:5" pos:end="47:5">*</operator><name pos:start="47:6" pos:end="47:16">fatal_error</name> <operator pos:start="47:18" pos:end="47:18">=</operator> <literal type="number" pos:start="47:20" pos:end="47:20">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:44"><expr pos:start="51:5" pos:end="51:43"><name pos:start="51:5" pos:end="51:15">translation</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <name pos:start="51:19" pos:end="51:43">BIOS_ATA_TRANSLATION_AUTO</name></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="71:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:37">(<expr pos:start="55:9" pos:end="55:36"><name pos:start="55:9" pos:end="55:15">machine</name> <operator pos:start="55:17" pos:end="55:18">&amp;&amp;</operator> <name pos:start="55:20" pos:end="55:36"><name pos:start="55:20" pos:end="55:26">machine</name><operator pos:start="55:27" pos:end="55:28">-&gt;</operator><name pos:start="55:29" pos:end="55:36">use_scsi</name></name></expr>)</condition> <block pos:start="55:39" pos:end="63:5">{<block_content pos:start="57:9" pos:end="61:50">

        <expr_stmt pos:start="57:9" pos:end="57:23"><expr pos:start="57:9" pos:end="57:22"><name pos:start="57:9" pos:end="57:12">type</name> <operator pos:start="57:14" pos:end="57:14">=</operator> <name pos:start="57:16" pos:end="57:22">IF_SCSI</name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:33"><expr pos:start="59:9" pos:end="59:32"><name pos:start="59:9" pos:end="59:16">max_devs</name> <operator pos:start="59:18" pos:end="59:18">=</operator> <name pos:start="59:20" pos:end="59:32">MAX_SCSI_DEVS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:50"><expr pos:start="61:9" pos:end="61:49"><call pos:start="61:9" pos:end="61:49"><name pos:start="61:9" pos:end="61:15">pstrcpy</name><argument_list pos:start="61:16" pos:end="61:49">(<argument pos:start="61:17" pos:end="61:23"><expr pos:start="61:17" pos:end="61:23"><name pos:start="61:17" pos:end="61:23">devname</name></expr></argument>, <argument pos:start="61:26" pos:end="61:40"><expr pos:start="61:26" pos:end="61:40"><sizeof pos:start="61:26" pos:end="61:40">sizeof<argument_list pos:start="61:32" pos:end="61:40">(<argument pos:start="61:33" pos:end="61:39"><expr pos:start="61:33" pos:end="61:39"><name pos:start="61:33" pos:end="61:39">devname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="61:43" pos:end="61:48"><expr pos:start="61:43" pos:end="61:48"><literal type="string" pos:start="61:43" pos:end="61:48">"scsi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="63:7" pos:end="71:5">else <block pos:start="63:12" pos:end="71:5">{<block_content pos:start="65:9" pos:end="69:49">

        <expr_stmt pos:start="65:9" pos:end="65:22"><expr pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:12">type</name> <operator pos:start="65:14" pos:end="65:14">=</operator> <name pos:start="65:16" pos:end="65:21">IF_IDE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:32"><expr pos:start="67:9" pos:end="67:31"><name pos:start="67:9" pos:end="67:16">max_devs</name> <operator pos:start="67:18" pos:end="67:18">=</operator> <name pos:start="67:20" pos:end="67:31">MAX_IDE_DEVS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:49"><expr pos:start="69:9" pos:end="69:48"><call pos:start="69:9" pos:end="69:48"><name pos:start="69:9" pos:end="69:15">pstrcpy</name><argument_list pos:start="69:16" pos:end="69:48">(<argument pos:start="69:17" pos:end="69:23"><expr pos:start="69:17" pos:end="69:23"><name pos:start="69:17" pos:end="69:23">devname</name></expr></argument>, <argument pos:start="69:26" pos:end="69:40"><expr pos:start="69:26" pos:end="69:40"><sizeof pos:start="69:26" pos:end="69:40">sizeof<argument_list pos:start="69:32" pos:end="69:40">(<argument pos:start="69:33" pos:end="69:39"><expr pos:start="69:33" pos:end="69:39"><name pos:start="69:33" pos:end="69:39">devname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="69:43" pos:end="69:47"><expr pos:start="69:43" pos:end="69:47"><literal type="string" pos:start="69:43" pos:end="69:47">"ide"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:23"><expr pos:start="73:5" pos:end="73:22"><name pos:start="73:5" pos:end="73:9">media</name> <operator pos:start="73:11" pos:end="73:11">=</operator> <name pos:start="73:13" pos:end="73:22">MEDIA_DISK</name></expr>;</expr_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:28">/* extract parameters */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:50"><expr pos:start="79:5" pos:end="79:49"><name pos:start="79:5" pos:end="79:10">bus_id</name>  <operator pos:start="79:13" pos:end="79:13">=</operator> <call pos:start="79:15" pos:end="79:49"><name pos:start="79:15" pos:end="79:33">qemu_opt_get_number</name><argument_list pos:start="79:34" pos:end="79:49">(<argument pos:start="79:35" pos:end="79:38"><expr pos:start="79:35" pos:end="79:38"><name pos:start="79:35" pos:end="79:38">opts</name></expr></argument>, <argument pos:start="79:41" pos:end="79:45"><expr pos:start="79:41" pos:end="79:45"><literal type="string" pos:start="79:41" pos:end="79:45">"bus"</literal></expr></argument>, <argument pos:start="79:48" pos:end="79:48"><expr pos:start="79:48" pos:end="79:48"><literal type="number" pos:start="79:48" pos:end="79:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:52"><expr pos:start="81:5" pos:end="81:51"><name pos:start="81:5" pos:end="81:11">unit_id</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="81:51"><name pos:start="81:15" pos:end="81:33">qemu_opt_get_number</name><argument_list pos:start="81:34" pos:end="81:51">(<argument pos:start="81:35" pos:end="81:38"><expr pos:start="81:35" pos:end="81:38"><name pos:start="81:35" pos:end="81:38">opts</name></expr></argument>, <argument pos:start="81:41" pos:end="81:46"><expr pos:start="81:41" pos:end="81:46"><literal type="string" pos:start="81:41" pos:end="81:46">"unit"</literal></expr></argument>, <argument pos:start="81:49" pos:end="81:50"><expr pos:start="81:49" pos:end="81:50"><operator pos:start="81:49" pos:end="81:49">-</operator><literal type="number" pos:start="81:50" pos:end="81:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:53"><expr pos:start="83:5" pos:end="83:52"><name pos:start="83:5" pos:end="83:9">index</name>   <operator pos:start="83:13" pos:end="83:13">=</operator> <call pos:start="83:15" pos:end="83:52"><name pos:start="83:15" pos:end="83:33">qemu_opt_get_number</name><argument_list pos:start="83:34" pos:end="83:52">(<argument pos:start="83:35" pos:end="83:38"><expr pos:start="83:35" pos:end="83:38"><name pos:start="83:35" pos:end="83:38">opts</name></expr></argument>, <argument pos:start="83:41" pos:end="83:47"><expr pos:start="83:41" pos:end="83:47"><literal type="string" pos:start="83:41" pos:end="83:47">"index"</literal></expr></argument>, <argument pos:start="83:50" pos:end="83:51"><expr pos:start="83:50" pos:end="83:51"><operator pos:start="83:50" pos:end="83:50">-</operator><literal type="number" pos:start="83:51" pos:end="83:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:49"><expr pos:start="87:5" pos:end="87:48"><name pos:start="87:5" pos:end="87:8">cyls</name>  <operator pos:start="87:11" pos:end="87:11">=</operator> <call pos:start="87:13" pos:end="87:48"><name pos:start="87:13" pos:end="87:31">qemu_opt_get_number</name><argument_list pos:start="87:32" pos:end="87:48">(<argument pos:start="87:33" pos:end="87:36"><expr pos:start="87:33" pos:end="87:36"><name pos:start="87:33" pos:end="87:36">opts</name></expr></argument>, <argument pos:start="87:39" pos:end="87:44"><expr pos:start="87:39" pos:end="87:44"><literal type="string" pos:start="87:39" pos:end="87:44">"cyls"</literal></expr></argument>, <argument pos:start="87:47" pos:end="87:47"><expr pos:start="87:47" pos:end="87:47"><literal type="number" pos:start="87:47" pos:end="87:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:50"><expr pos:start="89:5" pos:end="89:49"><name pos:start="89:5" pos:end="89:9">heads</name> <operator pos:start="89:11" pos:end="89:11">=</operator> <call pos:start="89:13" pos:end="89:49"><name pos:start="89:13" pos:end="89:31">qemu_opt_get_number</name><argument_list pos:start="89:32" pos:end="89:49">(<argument pos:start="89:33" pos:end="89:36"><expr pos:start="89:33" pos:end="89:36"><name pos:start="89:33" pos:end="89:36">opts</name></expr></argument>, <argument pos:start="89:39" pos:end="89:45"><expr pos:start="89:39" pos:end="89:45"><literal type="string" pos:start="89:39" pos:end="89:45">"heads"</literal></expr></argument>, <argument pos:start="89:48" pos:end="89:48"><expr pos:start="89:48" pos:end="89:48"><literal type="number" pos:start="89:48" pos:end="89:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:49"><expr pos:start="91:5" pos:end="91:48"><name pos:start="91:5" pos:end="91:8">secs</name>  <operator pos:start="91:11" pos:end="91:11">=</operator> <call pos:start="91:13" pos:end="91:48"><name pos:start="91:13" pos:end="91:31">qemu_opt_get_number</name><argument_list pos:start="91:32" pos:end="91:48">(<argument pos:start="91:33" pos:end="91:36"><expr pos:start="91:33" pos:end="91:36"><name pos:start="91:33" pos:end="91:36">opts</name></expr></argument>, <argument pos:start="91:39" pos:end="91:44"><expr pos:start="91:39" pos:end="91:44"><literal type="string" pos:start="91:39" pos:end="91:44">"secs"</literal></expr></argument>, <argument pos:start="91:47" pos:end="91:47"><expr pos:start="91:47" pos:end="91:47"><literal type="number" pos:start="91:47" pos:end="91:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:54"><expr pos:start="95:5" pos:end="95:53"><name pos:start="95:5" pos:end="95:12">snapshot</name> <operator pos:start="95:14" pos:end="95:14">=</operator> <call pos:start="95:16" pos:end="95:53"><name pos:start="95:16" pos:end="95:32">qemu_opt_get_bool</name><argument_list pos:start="95:33" pos:end="95:53">(<argument pos:start="95:34" pos:end="95:37"><expr pos:start="95:34" pos:end="95:37"><name pos:start="95:34" pos:end="95:37">opts</name></expr></argument>, <argument pos:start="95:40" pos:end="95:49"><expr pos:start="95:40" pos:end="95:49"><literal type="string" pos:start="95:40" pos:end="95:49">"snapshot"</literal></expr></argument>, <argument pos:start="95:52" pos:end="95:52"><expr pos:start="95:52" pos:end="95:52"><literal type="number" pos:start="95:52" pos:end="95:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:48"><expr pos:start="97:5" pos:end="97:47"><name pos:start="97:5" pos:end="97:6">ro</name> <operator pos:start="97:8" pos:end="97:8">=</operator> <call pos:start="97:10" pos:end="97:47"><name pos:start="97:10" pos:end="97:26">qemu_opt_get_bool</name><argument_list pos:start="97:27" pos:end="97:47">(<argument pos:start="97:28" pos:end="97:31"><expr pos:start="97:28" pos:end="97:31"><name pos:start="97:28" pos:end="97:31">opts</name></expr></argument>, <argument pos:start="97:34" pos:end="97:43"><expr pos:start="97:34" pos:end="97:43"><literal type="string" pos:start="97:34" pos:end="97:43">"readonly"</literal></expr></argument>, <argument pos:start="97:46" pos:end="97:46"><expr pos:start="97:46" pos:end="97:46"><literal type="number" pos:start="97:46" pos:end="97:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:38"><expr pos:start="101:5" pos:end="101:37"><name pos:start="101:5" pos:end="101:8">file</name> <operator pos:start="101:10" pos:end="101:10">=</operator> <call pos:start="101:12" pos:end="101:37"><name pos:start="101:12" pos:end="101:23">qemu_opt_get</name><argument_list pos:start="101:24" pos:end="101:37">(<argument pos:start="101:25" pos:end="101:28"><expr pos:start="101:25" pos:end="101:28"><name pos:start="101:25" pos:end="101:28">opts</name></expr></argument>, <argument pos:start="101:31" pos:end="101:36"><expr pos:start="101:31" pos:end="101:36"><literal type="string" pos:start="101:31" pos:end="101:36">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:42"><expr pos:start="103:5" pos:end="103:41"><name pos:start="103:5" pos:end="103:10">serial</name> <operator pos:start="103:12" pos:end="103:12">=</operator> <call pos:start="103:14" pos:end="103:41"><name pos:start="103:14" pos:end="103:25">qemu_opt_get</name><argument_list pos:start="103:26" pos:end="103:41">(<argument pos:start="103:27" pos:end="103:30"><expr pos:start="103:27" pos:end="103:30"><name pos:start="103:27" pos:end="103:30">opts</name></expr></argument>, <argument pos:start="103:33" pos:end="103:40"><expr pos:start="103:33" pos:end="103:40"><literal type="string" pos:start="103:33" pos:end="103:40">"serial"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="107:5" pos:end="173:5"><if pos:start="107:5" pos:end="173:5">if <condition pos:start="107:8" pos:end="107:49">(<expr pos:start="107:9" pos:end="107:48"><operator pos:start="107:9" pos:end="107:9">(</operator><name pos:start="107:10" pos:end="107:12">buf</name> <operator pos:start="107:14" pos:end="107:14">=</operator> <call pos:start="107:16" pos:end="107:39"><name pos:start="107:16" pos:end="107:27">qemu_opt_get</name><argument_list pos:start="107:28" pos:end="107:39">(<argument pos:start="107:29" pos:end="107:32"><expr pos:start="107:29" pos:end="107:32"><name pos:start="107:29" pos:end="107:32">opts</name></expr></argument>, <argument pos:start="107:35" pos:end="107:38"><expr pos:start="107:35" pos:end="107:38"><literal type="string" pos:start="107:35" pos:end="107:38">"if"</literal></expr></argument>)</argument_list></call><operator pos:start="107:40" pos:end="107:40">)</operator> <operator pos:start="107:42" pos:end="107:43">!=</operator> <name pos:start="107:45" pos:end="107:48">NULL</name></expr>)</condition> <block pos:start="107:51" pos:end="173:5">{<block_content pos:start="109:9" pos:end="171:9">

        <expr_stmt pos:start="109:9" pos:end="109:47"><expr pos:start="109:9" pos:end="109:46"><call pos:start="109:9" pos:end="109:46"><name pos:start="109:9" pos:end="109:15">pstrcpy</name><argument_list pos:start="109:16" pos:end="109:46">(<argument pos:start="109:17" pos:end="109:23"><expr pos:start="109:17" pos:end="109:23"><name pos:start="109:17" pos:end="109:23">devname</name></expr></argument>, <argument pos:start="109:26" pos:end="109:40"><expr pos:start="109:26" pos:end="109:40"><sizeof pos:start="109:26" pos:end="109:40">sizeof<argument_list pos:start="109:32" pos:end="109:40">(<argument pos:start="109:33" pos:end="109:39"><expr pos:start="109:33" pos:end="109:39"><name pos:start="109:33" pos:end="109:39">devname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="109:43" pos:end="109:45"><expr pos:start="109:43" pos:end="109:45"><name pos:start="109:43" pos:end="109:45">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="171:9"><if pos:start="111:9" pos:end="117:9">if <condition pos:start="111:12" pos:end="111:32">(<expr pos:start="111:13" pos:end="111:31"><operator pos:start="111:13" pos:end="111:13">!</operator><call pos:start="111:14" pos:end="111:31"><name pos:start="111:14" pos:end="111:19">strcmp</name><argument_list pos:start="111:20" pos:end="111:31">(<argument pos:start="111:21" pos:end="111:23"><expr pos:start="111:21" pos:end="111:23"><name pos:start="111:21" pos:end="111:23">buf</name></expr></argument>, <argument pos:start="111:26" pos:end="111:30"><expr pos:start="111:26" pos:end="111:30"><literal type="string" pos:start="111:26" pos:end="111:30">"ide"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="111:34" pos:end="117:9">{<block_content pos:start="113:13" pos:end="115:36">

	    <expr_stmt pos:start="113:13" pos:end="113:26"><expr pos:start="113:13" pos:end="113:25"><name pos:start="113:13" pos:end="113:16">type</name> <operator pos:start="113:18" pos:end="113:18">=</operator> <name pos:start="113:20" pos:end="113:25">IF_IDE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:36"><expr pos:start="115:13" pos:end="115:35"><name pos:start="115:13" pos:end="115:20">max_devs</name> <operator pos:start="115:22" pos:end="115:22">=</operator> <name pos:start="115:24" pos:end="115:35">MAX_IDE_DEVS</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="117:11" pos:end="123:9">else if <condition pos:start="117:19" pos:end="117:40">(<expr pos:start="117:20" pos:end="117:39"><operator pos:start="117:20" pos:end="117:20">!</operator><call pos:start="117:21" pos:end="117:39"><name pos:start="117:21" pos:end="117:26">strcmp</name><argument_list pos:start="117:27" pos:end="117:39">(<argument pos:start="117:28" pos:end="117:30"><expr pos:start="117:28" pos:end="117:30"><name pos:start="117:28" pos:end="117:30">buf</name></expr></argument>, <argument pos:start="117:33" pos:end="117:38"><expr pos:start="117:33" pos:end="117:38"><literal type="string" pos:start="117:33" pos:end="117:38">"scsi"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="117:42" pos:end="123:9">{<block_content pos:start="119:13" pos:end="121:37">

	    <expr_stmt pos:start="119:13" pos:end="119:27"><expr pos:start="119:13" pos:end="119:26"><name pos:start="119:13" pos:end="119:16">type</name> <operator pos:start="119:18" pos:end="119:18">=</operator> <name pos:start="119:20" pos:end="119:26">IF_SCSI</name></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:37"><expr pos:start="121:13" pos:end="121:36"><name pos:start="121:13" pos:end="121:20">max_devs</name> <operator pos:start="121:22" pos:end="121:22">=</operator> <name pos:start="121:24" pos:end="121:36">MAX_SCSI_DEVS</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="123:11" pos:end="129:9">else if <condition pos:start="123:19" pos:end="123:42">(<expr pos:start="123:20" pos:end="123:41"><operator pos:start="123:20" pos:end="123:20">!</operator><call pos:start="123:21" pos:end="123:41"><name pos:start="123:21" pos:end="123:26">strcmp</name><argument_list pos:start="123:27" pos:end="123:41">(<argument pos:start="123:28" pos:end="123:30"><expr pos:start="123:28" pos:end="123:30"><name pos:start="123:28" pos:end="123:30">buf</name></expr></argument>, <argument pos:start="123:33" pos:end="123:40"><expr pos:start="123:33" pos:end="123:40"><literal type="string" pos:start="123:33" pos:end="123:40">"floppy"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="123:44" pos:end="129:9">{<block_content pos:start="125:13" pos:end="127:25">

	    <expr_stmt pos:start="125:13" pos:end="125:29"><expr pos:start="125:13" pos:end="125:28"><name pos:start="125:13" pos:end="125:16">type</name> <operator pos:start="125:18" pos:end="125:18">=</operator> <name pos:start="125:20" pos:end="125:28">IF_FLOPPY</name></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:25"><expr pos:start="127:13" pos:end="127:24"><name pos:start="127:13" pos:end="127:20">max_devs</name> <operator pos:start="127:22" pos:end="127:22">=</operator> <literal type="number" pos:start="127:24" pos:end="127:24">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="129:11" pos:end="135:9">else if <condition pos:start="129:19" pos:end="129:42">(<expr pos:start="129:20" pos:end="129:41"><operator pos:start="129:20" pos:end="129:20">!</operator><call pos:start="129:21" pos:end="129:41"><name pos:start="129:21" pos:end="129:26">strcmp</name><argument_list pos:start="129:27" pos:end="129:41">(<argument pos:start="129:28" pos:end="129:30"><expr pos:start="129:28" pos:end="129:30"><name pos:start="129:28" pos:end="129:30">buf</name></expr></argument>, <argument pos:start="129:33" pos:end="129:40"><expr pos:start="129:33" pos:end="129:40"><literal type="string" pos:start="129:33" pos:end="129:40">"pflash"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="129:44" pos:end="135:9">{<block_content pos:start="131:13" pos:end="133:25">

	    <expr_stmt pos:start="131:13" pos:end="131:29"><expr pos:start="131:13" pos:end="131:28"><name pos:start="131:13" pos:end="131:16">type</name> <operator pos:start="131:18" pos:end="131:18">=</operator> <name pos:start="131:20" pos:end="131:28">IF_PFLASH</name></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:25"><expr pos:start="133:13" pos:end="133:24"><name pos:start="133:13" pos:end="133:20">max_devs</name> <operator pos:start="133:22" pos:end="133:22">=</operator> <literal type="number" pos:start="133:24" pos:end="133:24">0</literal></expr>;</expr_stmt>

	</block_content>}</block></if> <if type="elseif" pos:start="135:11" pos:end="141:9">else if <condition pos:start="135:19" pos:end="135:39">(<expr pos:start="135:20" pos:end="135:38"><operator pos:start="135:20" pos:end="135:20">!</operator><call pos:start="135:21" pos:end="135:38"><name pos:start="135:21" pos:end="135:26">strcmp</name><argument_list pos:start="135:27" pos:end="135:38">(<argument pos:start="135:28" pos:end="135:30"><expr pos:start="135:28" pos:end="135:30"><name pos:start="135:28" pos:end="135:30">buf</name></expr></argument>, <argument pos:start="135:33" pos:end="135:37"><expr pos:start="135:33" pos:end="135:37"><literal type="string" pos:start="135:33" pos:end="135:37">"mtd"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="135:41" pos:end="141:9">{<block_content pos:start="137:13" pos:end="139:25">

	    <expr_stmt pos:start="137:13" pos:end="137:26"><expr pos:start="137:13" pos:end="137:25"><name pos:start="137:13" pos:end="137:16">type</name> <operator pos:start="137:18" pos:end="137:18">=</operator> <name pos:start="137:20" pos:end="137:25">IF_MTD</name></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:25"><expr pos:start="139:13" pos:end="139:24"><name pos:start="139:13" pos:end="139:20">max_devs</name> <operator pos:start="139:22" pos:end="139:22">=</operator> <literal type="number" pos:start="139:24" pos:end="139:24">0</literal></expr>;</expr_stmt>

	</block_content>}</block></if> <if type="elseif" pos:start="141:11" pos:end="147:9">else if <condition pos:start="141:19" pos:end="141:38">(<expr pos:start="141:20" pos:end="141:37"><operator pos:start="141:20" pos:end="141:20">!</operator><call pos:start="141:21" pos:end="141:37"><name pos:start="141:21" pos:end="141:26">strcmp</name><argument_list pos:start="141:27" pos:end="141:37">(<argument pos:start="141:28" pos:end="141:30"><expr pos:start="141:28" pos:end="141:30"><name pos:start="141:28" pos:end="141:30">buf</name></expr></argument>, <argument pos:start="141:33" pos:end="141:36"><expr pos:start="141:33" pos:end="141:36"><literal type="string" pos:start="141:33" pos:end="141:36">"sd"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="141:40" pos:end="147:9">{<block_content pos:start="143:13" pos:end="145:25">

	    <expr_stmt pos:start="143:13" pos:end="143:25"><expr pos:start="143:13" pos:end="143:24"><name pos:start="143:13" pos:end="143:16">type</name> <operator pos:start="143:18" pos:end="143:18">=</operator> <name pos:start="143:20" pos:end="143:24">IF_SD</name></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:25"><expr pos:start="145:13" pos:end="145:24"><name pos:start="145:13" pos:end="145:20">max_devs</name> <operator pos:start="145:22" pos:end="145:22">=</operator> <literal type="number" pos:start="145:24" pos:end="145:24">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="147:11" pos:end="153:9">else if <condition pos:start="147:19" pos:end="147:42">(<expr pos:start="147:20" pos:end="147:41"><operator pos:start="147:20" pos:end="147:20">!</operator><call pos:start="147:21" pos:end="147:41"><name pos:start="147:21" pos:end="147:26">strcmp</name><argument_list pos:start="147:27" pos:end="147:41">(<argument pos:start="147:28" pos:end="147:30"><expr pos:start="147:28" pos:end="147:30"><name pos:start="147:28" pos:end="147:30">buf</name></expr></argument>, <argument pos:start="147:33" pos:end="147:40"><expr pos:start="147:33" pos:end="147:40"><literal type="string" pos:start="147:33" pos:end="147:40">"virtio"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="147:44" pos:end="153:9">{<block_content pos:start="149:13" pos:end="151:25">

            <expr_stmt pos:start="149:13" pos:end="149:29"><expr pos:start="149:13" pos:end="149:28"><name pos:start="149:13" pos:end="149:16">type</name> <operator pos:start="149:18" pos:end="149:18">=</operator> <name pos:start="149:20" pos:end="149:28">IF_VIRTIO</name></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:25"><expr pos:start="151:13" pos:end="151:24"><name pos:start="151:13" pos:end="151:20">max_devs</name> <operator pos:start="151:22" pos:end="151:22">=</operator> <literal type="number" pos:start="151:24" pos:end="151:24">0</literal></expr>;</expr_stmt>

	</block_content>}</block></if> <if type="elseif" pos:start="153:11" pos:end="159:9">else if <condition pos:start="153:19" pos:end="153:39">(<expr pos:start="153:20" pos:end="153:38"><operator pos:start="153:20" pos:end="153:20">!</operator><call pos:start="153:21" pos:end="153:38"><name pos:start="153:21" pos:end="153:26">strcmp</name><argument_list pos:start="153:27" pos:end="153:38">(<argument pos:start="153:28" pos:end="153:30"><expr pos:start="153:28" pos:end="153:30"><name pos:start="153:28" pos:end="153:30">buf</name></expr></argument>, <argument pos:start="153:33" pos:end="153:37"><expr pos:start="153:33" pos:end="153:37"><literal type="string" pos:start="153:33" pos:end="153:37">"xen"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="153:41" pos:end="159:9">{<block_content pos:start="155:13" pos:end="157:25">

	    <expr_stmt pos:start="155:13" pos:end="155:26"><expr pos:start="155:13" pos:end="155:25"><name pos:start="155:13" pos:end="155:16">type</name> <operator pos:start="155:18" pos:end="155:18">=</operator> <name pos:start="155:20" pos:end="155:25">IF_XEN</name></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:25"><expr pos:start="157:13" pos:end="157:24"><name pos:start="157:13" pos:end="157:20">max_devs</name> <operator pos:start="157:22" pos:end="157:22">=</operator> <literal type="number" pos:start="157:24" pos:end="157:24">0</literal></expr>;</expr_stmt>

	</block_content>}</block></if> <if type="elseif" pos:start="159:11" pos:end="165:9">else if <condition pos:start="159:19" pos:end="159:40">(<expr pos:start="159:20" pos:end="159:39"><operator pos:start="159:20" pos:end="159:20">!</operator><call pos:start="159:21" pos:end="159:39"><name pos:start="159:21" pos:end="159:26">strcmp</name><argument_list pos:start="159:27" pos:end="159:39">(<argument pos:start="159:28" pos:end="159:30"><expr pos:start="159:28" pos:end="159:30"><name pos:start="159:28" pos:end="159:30">buf</name></expr></argument>, <argument pos:start="159:33" pos:end="159:38"><expr pos:start="159:33" pos:end="159:38"><literal type="string" pos:start="159:33" pos:end="159:38">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="159:42" pos:end="165:9">{<block_content pos:start="161:13" pos:end="163:25">

	    <expr_stmt pos:start="161:13" pos:end="161:27"><expr pos:start="161:13" pos:end="161:26"><name pos:start="161:13" pos:end="161:16">type</name> <operator pos:start="161:18" pos:end="161:18">=</operator> <name pos:start="161:20" pos:end="161:26">IF_NONE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:25"><expr pos:start="163:13" pos:end="163:24"><name pos:start="163:13" pos:end="163:20">max_devs</name> <operator pos:start="163:22" pos:end="163:22">=</operator> <literal type="number" pos:start="163:24" pos:end="163:24">0</literal></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="165:11" pos:end="171:9">else <block pos:start="165:16" pos:end="171:9">{<block_content pos:start="167:13" pos:end="169:24">

            <expr_stmt pos:start="167:13" pos:end="167:70"><expr pos:start="167:13" pos:end="167:69"><call pos:start="167:13" pos:end="167:69"><name pos:start="167:13" pos:end="167:19">fprintf</name><argument_list pos:start="167:20" pos:end="167:69">(<argument pos:start="167:21" pos:end="167:26"><expr pos:start="167:21" pos:end="167:26"><name pos:start="167:21" pos:end="167:26">stderr</name></expr></argument>, <argument pos:start="167:29" pos:end="167:63"><expr pos:start="167:29" pos:end="167:63"><literal type="string" pos:start="167:29" pos:end="167:63">"qemu: unsupported bus type '%s'\n"</literal></expr></argument>, <argument pos:start="167:66" pos:end="167:68"><expr pos:start="167:66" pos:end="167:68"><name pos:start="167:66" pos:end="167:68">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="169:13" pos:end="169:24">return <expr pos:start="169:20" pos:end="169:23"><name pos:start="169:20" pos:end="169:23">NULL</name></expr>;</return>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="177:5" pos:end="203:5"><if pos:start="177:5" pos:end="203:5">if <condition pos:start="177:8" pos:end="177:30">(<expr pos:start="177:9" pos:end="177:29"><name pos:start="177:9" pos:end="177:12">cyls</name> <operator pos:start="177:14" pos:end="177:15">||</operator> <name pos:start="177:17" pos:end="177:21">heads</name> <operator pos:start="177:23" pos:end="177:24">||</operator> <name pos:start="177:26" pos:end="177:29">secs</name></expr>)</condition> <block pos:start="177:32" pos:end="203:5">{<block_content pos:start="179:9" pos:end="201:9">

        <if_stmt pos:start="179:9" pos:end="185:9"><if pos:start="179:9" pos:end="185:9">if <condition pos:start="179:12" pos:end="179:57">(<expr pos:start="179:13" pos:end="179:56"><name pos:start="179:13" pos:end="179:16">cyls</name> <operator pos:start="179:18" pos:end="179:18">&lt;</operator> <literal type="number" pos:start="179:20" pos:end="179:20">1</literal> <operator pos:start="179:22" pos:end="179:23">||</operator> <operator pos:start="179:25" pos:end="179:25">(</operator><name pos:start="179:26" pos:end="179:29">type</name> <operator pos:start="179:31" pos:end="179:32">==</operator> <name pos:start="179:34" pos:end="179:39">IF_IDE</name> <operator pos:start="179:41" pos:end="179:42">&amp;&amp;</operator> <name pos:start="179:44" pos:end="179:47">cyls</name> <operator pos:start="179:49" pos:end="179:49">&gt;</operator> <literal type="number" pos:start="179:51" pos:end="179:55">16383</literal><operator pos:start="179:56" pos:end="179:56">)</operator></expr>)</condition> <block pos:start="179:59" pos:end="185:9">{<block_content pos:start="181:13" pos:end="183:24">

            <expr_stmt pos:start="181:13" pos:end="181:78"><expr pos:start="181:13" pos:end="181:77"><call pos:start="181:13" pos:end="181:77"><name pos:start="181:13" pos:end="181:19">fprintf</name><argument_list pos:start="181:20" pos:end="181:77">(<argument pos:start="181:21" pos:end="181:26"><expr pos:start="181:21" pos:end="181:26"><name pos:start="181:21" pos:end="181:26">stderr</name></expr></argument>, <argument pos:start="181:29" pos:end="181:71"><expr pos:start="181:29" pos:end="181:71"><literal type="string" pos:start="181:29" pos:end="181:71">"qemu: '%s' invalid physical cyls number\n"</literal></expr></argument>, <argument pos:start="181:74" pos:end="181:76"><expr pos:start="181:74" pos:end="181:76"><name pos:start="181:74" pos:end="181:76">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="183:13" pos:end="183:24">return <expr pos:start="183:20" pos:end="183:23"><name pos:start="183:20" pos:end="183:23">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

        <if_stmt pos:start="187:9" pos:end="193:9"><if pos:start="187:9" pos:end="193:9">if <condition pos:start="187:12" pos:end="187:56">(<expr pos:start="187:13" pos:end="187:55"><name pos:start="187:13" pos:end="187:17">heads</name> <operator pos:start="187:19" pos:end="187:19">&lt;</operator> <literal type="number" pos:start="187:21" pos:end="187:21">1</literal> <operator pos:start="187:23" pos:end="187:24">||</operator> <operator pos:start="187:26" pos:end="187:26">(</operator><name pos:start="187:27" pos:end="187:30">type</name> <operator pos:start="187:32" pos:end="187:33">==</operator> <name pos:start="187:35" pos:end="187:40">IF_IDE</name> <operator pos:start="187:42" pos:end="187:43">&amp;&amp;</operator> <name pos:start="187:45" pos:end="187:49">heads</name> <operator pos:start="187:51" pos:end="187:51">&gt;</operator> <literal type="number" pos:start="187:53" pos:end="187:54">16</literal><operator pos:start="187:55" pos:end="187:55">)</operator></expr>)</condition> <block pos:start="187:58" pos:end="193:9">{<block_content pos:start="189:13" pos:end="191:24">

            <expr_stmt pos:start="189:13" pos:end="189:79"><expr pos:start="189:13" pos:end="189:78"><call pos:start="189:13" pos:end="189:78"><name pos:start="189:13" pos:end="189:19">fprintf</name><argument_list pos:start="189:20" pos:end="189:78">(<argument pos:start="189:21" pos:end="189:26"><expr pos:start="189:21" pos:end="189:26"><name pos:start="189:21" pos:end="189:26">stderr</name></expr></argument>, <argument pos:start="189:29" pos:end="189:72"><expr pos:start="189:29" pos:end="189:72"><literal type="string" pos:start="189:29" pos:end="189:72">"qemu: '%s' invalid physical heads number\n"</literal></expr></argument>, <argument pos:start="189:75" pos:end="189:77"><expr pos:start="189:75" pos:end="189:77"><name pos:start="189:75" pos:end="189:77">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="191:13" pos:end="191:24">return <expr pos:start="191:20" pos:end="191:23"><name pos:start="191:20" pos:end="191:23">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

        <if_stmt pos:start="195:9" pos:end="201:9"><if pos:start="195:9" pos:end="201:9">if <condition pos:start="195:12" pos:end="195:54">(<expr pos:start="195:13" pos:end="195:53"><name pos:start="195:13" pos:end="195:16">secs</name> <operator pos:start="195:18" pos:end="195:18">&lt;</operator> <literal type="number" pos:start="195:20" pos:end="195:20">1</literal> <operator pos:start="195:22" pos:end="195:23">||</operator> <operator pos:start="195:25" pos:end="195:25">(</operator><name pos:start="195:26" pos:end="195:29">type</name> <operator pos:start="195:31" pos:end="195:32">==</operator> <name pos:start="195:34" pos:end="195:39">IF_IDE</name> <operator pos:start="195:41" pos:end="195:42">&amp;&amp;</operator> <name pos:start="195:44" pos:end="195:47">secs</name> <operator pos:start="195:49" pos:end="195:49">&gt;</operator> <literal type="number" pos:start="195:51" pos:end="195:52">63</literal><operator pos:start="195:53" pos:end="195:53">)</operator></expr>)</condition> <block pos:start="195:56" pos:end="201:9">{<block_content pos:start="197:13" pos:end="199:24">

            <expr_stmt pos:start="197:13" pos:end="197:78"><expr pos:start="197:13" pos:end="197:77"><call pos:start="197:13" pos:end="197:77"><name pos:start="197:13" pos:end="197:19">fprintf</name><argument_list pos:start="197:20" pos:end="197:77">(<argument pos:start="197:21" pos:end="197:26"><expr pos:start="197:21" pos:end="197:26"><name pos:start="197:21" pos:end="197:26">stderr</name></expr></argument>, <argument pos:start="197:29" pos:end="197:71"><expr pos:start="197:29" pos:end="197:71"><literal type="string" pos:start="197:29" pos:end="197:71">"qemu: '%s' invalid physical secs number\n"</literal></expr></argument>, <argument pos:start="197:74" pos:end="197:76"><expr pos:start="197:74" pos:end="197:76"><name pos:start="197:74" pos:end="197:76">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="199:13" pos:end="199:24">return <expr pos:start="199:20" pos:end="199:23"><name pos:start="199:20" pos:end="199:23">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="207:5" pos:end="241:5"><if pos:start="207:5" pos:end="241:5">if <condition pos:start="207:8" pos:end="207:52">(<expr pos:start="207:9" pos:end="207:51"><operator pos:start="207:9" pos:end="207:9">(</operator><name pos:start="207:10" pos:end="207:12">buf</name> <operator pos:start="207:14" pos:end="207:14">=</operator> <call pos:start="207:16" pos:end="207:42"><name pos:start="207:16" pos:end="207:27">qemu_opt_get</name><argument_list pos:start="207:28" pos:end="207:42">(<argument pos:start="207:29" pos:end="207:32"><expr pos:start="207:29" pos:end="207:32"><name pos:start="207:29" pos:end="207:32">opts</name></expr></argument>, <argument pos:start="207:35" pos:end="207:41"><expr pos:start="207:35" pos:end="207:41"><literal type="string" pos:start="207:35" pos:end="207:41">"trans"</literal></expr></argument>)</argument_list></call><operator pos:start="207:43" pos:end="207:43">)</operator> <operator pos:start="207:45" pos:end="207:46">!=</operator> <name pos:start="207:48" pos:end="207:51">NULL</name></expr>)</condition> <block pos:start="207:54" pos:end="241:5">{<block_content pos:start="209:9" pos:end="239:9">

        <if_stmt pos:start="209:9" pos:end="219:9"><if pos:start="209:9" pos:end="219:9">if <condition pos:start="209:12" pos:end="209:18">(<expr pos:start="209:13" pos:end="209:17"><operator pos:start="209:13" pos:end="209:13">!</operator><name pos:start="209:14" pos:end="209:17">cyls</name></expr>)</condition> <block pos:start="209:20" pos:end="219:9">{<block_content pos:start="211:13" pos:end="217:24">

            <expr_stmt pos:start="211:13" pos:end="215:25"><expr pos:start="211:13" pos:end="215:24"><call pos:start="211:13" pos:end="215:24"><name pos:start="211:13" pos:end="211:19">fprintf</name><argument_list pos:start="211:20" pos:end="215:24">(<argument pos:start="211:21" pos:end="211:26"><expr pos:start="211:21" pos:end="211:26"><name pos:start="211:21" pos:end="211:26">stderr</name></expr></argument>,

                    <argument pos:start="213:21" pos:end="213:78"><expr pos:start="213:21" pos:end="213:78"><literal type="string" pos:start="213:21" pos:end="213:78">"qemu: '%s' trans must be used with cyls,heads and secs\n"</literal></expr></argument>,

                    <argument pos:start="215:21" pos:end="215:23"><expr pos:start="215:21" pos:end="215:23"><name pos:start="215:21" pos:end="215:23">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="217:13" pos:end="217:24">return <expr pos:start="217:20" pos:end="217:23"><name pos:start="217:20" pos:end="217:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="221:9" pos:end="239:9"><if pos:start="221:9" pos:end="223:52">if <condition pos:start="221:12" pos:end="221:33">(<expr pos:start="221:13" pos:end="221:32"><operator pos:start="221:13" pos:end="221:13">!</operator><call pos:start="221:14" pos:end="221:32"><name pos:start="221:14" pos:end="221:19">strcmp</name><argument_list pos:start="221:20" pos:end="221:32">(<argument pos:start="221:21" pos:end="221:23"><expr pos:start="221:21" pos:end="221:23"><name pos:start="221:21" pos:end="221:23">buf</name></expr></argument>, <argument pos:start="221:26" pos:end="221:31"><expr pos:start="221:26" pos:end="221:31"><literal type="string" pos:start="221:26" pos:end="221:31">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="223:13" pos:end="223:52"><block_content pos:start="223:13" pos:end="223:52">

            <expr_stmt pos:start="223:13" pos:end="223:52"><expr pos:start="223:13" pos:end="223:51"><name pos:start="223:13" pos:end="223:23">translation</name> <operator pos:start="223:25" pos:end="223:25">=</operator> <name pos:start="223:27" pos:end="223:51">BIOS_ATA_TRANSLATION_NONE</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="225:9" pos:end="227:51">else if <condition pos:start="225:17" pos:end="225:37">(<expr pos:start="225:18" pos:end="225:36"><operator pos:start="225:18" pos:end="225:18">!</operator><call pos:start="225:19" pos:end="225:36"><name pos:start="225:19" pos:end="225:24">strcmp</name><argument_list pos:start="225:25" pos:end="225:36">(<argument pos:start="225:26" pos:end="225:28"><expr pos:start="225:26" pos:end="225:28"><name pos:start="225:26" pos:end="225:28">buf</name></expr></argument>, <argument pos:start="225:31" pos:end="225:35"><expr pos:start="225:31" pos:end="225:35"><literal type="string" pos:start="225:31" pos:end="225:35">"lba"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="227:13" pos:end="227:51"><block_content pos:start="227:13" pos:end="227:51">

            <expr_stmt pos:start="227:13" pos:end="227:51"><expr pos:start="227:13" pos:end="227:50"><name pos:start="227:13" pos:end="227:23">translation</name> <operator pos:start="227:25" pos:end="227:25">=</operator> <name pos:start="227:27" pos:end="227:50">BIOS_ATA_TRANSLATION_LBA</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="229:9" pos:end="231:52">else if <condition pos:start="229:17" pos:end="229:38">(<expr pos:start="229:18" pos:end="229:37"><operator pos:start="229:18" pos:end="229:18">!</operator><call pos:start="229:19" pos:end="229:37"><name pos:start="229:19" pos:end="229:24">strcmp</name><argument_list pos:start="229:25" pos:end="229:37">(<argument pos:start="229:26" pos:end="229:28"><expr pos:start="229:26" pos:end="229:28"><name pos:start="229:26" pos:end="229:28">buf</name></expr></argument>, <argument pos:start="229:31" pos:end="229:36"><expr pos:start="229:31" pos:end="229:36"><literal type="string" pos:start="229:31" pos:end="229:36">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="231:13" pos:end="231:52"><block_content pos:start="231:13" pos:end="231:52">

            <expr_stmt pos:start="231:13" pos:end="231:52"><expr pos:start="231:13" pos:end="231:51"><name pos:start="231:13" pos:end="231:23">translation</name> <operator pos:start="231:25" pos:end="231:25">=</operator> <name pos:start="231:27" pos:end="231:51">BIOS_ATA_TRANSLATION_AUTO</name></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="233:9" pos:end="239:9">else <block pos:start="233:14" pos:end="239:9">{<block_content pos:start="235:13" pos:end="237:24">

            <expr_stmt pos:start="235:13" pos:end="235:74"><expr pos:start="235:13" pos:end="235:73"><call pos:start="235:13" pos:end="235:73"><name pos:start="235:13" pos:end="235:19">fprintf</name><argument_list pos:start="235:20" pos:end="235:73">(<argument pos:start="235:21" pos:end="235:26"><expr pos:start="235:21" pos:end="235:26"><name pos:start="235:21" pos:end="235:26">stderr</name></expr></argument>, <argument pos:start="235:29" pos:end="235:67"><expr pos:start="235:29" pos:end="235:67"><literal type="string" pos:start="235:29" pos:end="235:67">"qemu: '%s' invalid translation type\n"</literal></expr></argument>, <argument pos:start="235:70" pos:end="235:72"><expr pos:start="235:70" pos:end="235:72"><name pos:start="235:70" pos:end="235:72">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="237:13" pos:end="237:24">return <expr pos:start="237:20" pos:end="237:23"><name pos:start="237:20" pos:end="237:23">NULL</name></expr>;</return>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="245:5" pos:end="273:5"><if pos:start="245:5" pos:end="273:5">if <condition pos:start="245:8" pos:end="245:52">(<expr pos:start="245:9" pos:end="245:51"><operator pos:start="245:9" pos:end="245:9">(</operator><name pos:start="245:10" pos:end="245:12">buf</name> <operator pos:start="245:14" pos:end="245:14">=</operator> <call pos:start="245:16" pos:end="245:42"><name pos:start="245:16" pos:end="245:27">qemu_opt_get</name><argument_list pos:start="245:28" pos:end="245:42">(<argument pos:start="245:29" pos:end="245:32"><expr pos:start="245:29" pos:end="245:32"><name pos:start="245:29" pos:end="245:32">opts</name></expr></argument>, <argument pos:start="245:35" pos:end="245:41"><expr pos:start="245:35" pos:end="245:41"><literal type="string" pos:start="245:35" pos:end="245:41">"media"</literal></expr></argument>)</argument_list></call><operator pos:start="245:43" pos:end="245:43">)</operator> <operator pos:start="245:45" pos:end="245:46">!=</operator> <name pos:start="245:48" pos:end="245:51">NULL</name></expr>)</condition> <block pos:start="245:54" pos:end="273:5">{<block_content pos:start="247:9" pos:end="271:9">

        <if_stmt pos:start="247:9" pos:end="271:9"><if pos:start="247:9" pos:end="251:9">if <condition pos:start="247:12" pos:end="247:33">(<expr pos:start="247:13" pos:end="247:32"><operator pos:start="247:13" pos:end="247:13">!</operator><call pos:start="247:14" pos:end="247:32"><name pos:start="247:14" pos:end="247:19">strcmp</name><argument_list pos:start="247:20" pos:end="247:32">(<argument pos:start="247:21" pos:end="247:23"><expr pos:start="247:21" pos:end="247:23"><name pos:start="247:21" pos:end="247:23">buf</name></expr></argument>, <argument pos:start="247:26" pos:end="247:31"><expr pos:start="247:26" pos:end="247:31"><literal type="string" pos:start="247:26" pos:end="247:31">"disk"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="247:35" pos:end="251:9">{<block_content pos:start="249:13" pos:end="249:31">

	    <expr_stmt pos:start="249:13" pos:end="249:31"><expr pos:start="249:13" pos:end="249:30"><name pos:start="249:13" pos:end="249:17">media</name> <operator pos:start="249:19" pos:end="249:19">=</operator> <name pos:start="249:21" pos:end="249:30">MEDIA_DISK</name></expr>;</expr_stmt>

	</block_content>}</block></if> <if type="elseif" pos:start="251:11" pos:end="265:9">else if <condition pos:start="251:19" pos:end="251:41">(<expr pos:start="251:20" pos:end="251:40"><operator pos:start="251:20" pos:end="251:20">!</operator><call pos:start="251:21" pos:end="251:40"><name pos:start="251:21" pos:end="251:26">strcmp</name><argument_list pos:start="251:27" pos:end="251:40">(<argument pos:start="251:28" pos:end="251:30"><expr pos:start="251:28" pos:end="251:30"><name pos:start="251:28" pos:end="251:30">buf</name></expr></argument>, <argument pos:start="251:33" pos:end="251:39"><expr pos:start="251:33" pos:end="251:39"><literal type="string" pos:start="251:33" pos:end="251:39">"cdrom"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="251:43" pos:end="265:9">{<block_content pos:start="253:13" pos:end="263:32">

            <if_stmt pos:start="253:13" pos:end="261:13"><if pos:start="253:13" pos:end="261:13">if <condition pos:start="253:16" pos:end="253:38">(<expr pos:start="253:17" pos:end="253:37"><name pos:start="253:17" pos:end="253:20">cyls</name> <operator pos:start="253:22" pos:end="253:23">||</operator> <name pos:start="253:25" pos:end="253:28">secs</name> <operator pos:start="253:30" pos:end="253:31">||</operator> <name pos:start="253:33" pos:end="253:37">heads</name></expr>)</condition> <block pos:start="253:40" pos:end="261:13">{<block_content pos:start="255:17" pos:end="259:28">

                <expr_stmt pos:start="255:17" pos:end="257:73"><expr pos:start="255:17" pos:end="257:72"><call pos:start="255:17" pos:end="257:72"><name pos:start="255:17" pos:end="255:23">fprintf</name><argument_list pos:start="255:24" pos:end="257:72">(<argument pos:start="255:25" pos:end="255:30"><expr pos:start="255:25" pos:end="255:30"><name pos:start="255:25" pos:end="255:30">stderr</name></expr></argument>,

                        <argument pos:start="257:25" pos:end="257:66"><expr pos:start="257:25" pos:end="257:66"><literal type="string" pos:start="257:25" pos:end="257:66">"qemu: '%s' invalid physical CHS format\n"</literal></expr></argument>, <argument pos:start="257:69" pos:end="257:71"><expr pos:start="257:69" pos:end="257:71"><name pos:start="257:69" pos:end="257:71">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	        <return pos:start="259:17" pos:end="259:28">return <expr pos:start="259:24" pos:end="259:27"><name pos:start="259:24" pos:end="259:27">NULL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

	    <expr_stmt pos:start="263:13" pos:end="263:32"><expr pos:start="263:13" pos:end="263:31"><name pos:start="263:13" pos:end="263:17">media</name> <operator pos:start="263:19" pos:end="263:19">=</operator> <name pos:start="263:21" pos:end="263:31">MEDIA_CDROM</name></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="265:11" pos:end="271:9">else <block pos:start="265:16" pos:end="271:9">{<block_content pos:start="267:13" pos:end="269:24">

	    <expr_stmt pos:start="267:13" pos:end="267:63"><expr pos:start="267:13" pos:end="267:62"><call pos:start="267:13" pos:end="267:62"><name pos:start="267:13" pos:end="267:19">fprintf</name><argument_list pos:start="267:20" pos:end="267:62">(<argument pos:start="267:21" pos:end="267:26"><expr pos:start="267:21" pos:end="267:26"><name pos:start="267:21" pos:end="267:26">stderr</name></expr></argument>, <argument pos:start="267:29" pos:end="267:56"><expr pos:start="267:29" pos:end="267:56"><literal type="string" pos:start="267:29" pos:end="267:56">"qemu: '%s' invalid media\n"</literal></expr></argument>, <argument pos:start="267:59" pos:end="267:61"><expr pos:start="267:59" pos:end="267:61"><name pos:start="267:59" pos:end="267:61">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="269:13" pos:end="269:24">return <expr pos:start="269:20" pos:end="269:23"><name pos:start="269:20" pos:end="269:23">NULL</name></expr>;</return>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="277:5" pos:end="306:0"><if pos:start="277:5" pos:end="306:0">if <condition pos:start="277:8" pos:end="277:52">(<expr pos:start="277:9" pos:end="277:51"><operator pos:start="277:9" pos:end="277:9">(</operator><name pos:start="277:10" pos:end="277:12">buf</name> <operator pos:start="277:14" pos:end="277:14">=</operator> <call pos:start="277:16" pos:end="277:42"><name pos:start="277:16" pos:end="277:27">qemu_opt_get</name><argument_list pos:start="277:28" pos:end="277:42">(<argument pos:start="277:29" pos:end="277:32"><expr pos:start="277:29" pos:end="277:32"><name pos:start="277:29" pos:end="277:32">opts</name></expr></argument>, <argument pos:start="277:35" pos:end="277:41"><expr pos:start="277:35" pos:end="277:41"><literal type="string" pos:start="277:35" pos:end="277:41">"cache"</literal></expr></argument>)</argument_list></call><operator pos:start="277:43" pos:end="277:43">)</operator> <operator pos:start="277:45" pos:end="277:46">!=</operator> <name pos:start="277:48" pos:end="277:51">NULL</name></expr>)</condition> <block pos:start="277:54" pos:end="306:0">{<block_content pos:start="279:9" pos:end="299:9">

        <if_stmt pos:start="279:9" pos:end="299:9"><if pos:start="279:9" pos:end="283:9">if <condition pos:start="279:12" pos:end="279:56">(<expr pos:start="279:13" pos:end="279:55"><operator pos:start="279:13" pos:end="279:13">!</operator><call pos:start="279:14" pos:end="279:31"><name pos:start="279:14" pos:end="279:19">strcmp</name><argument_list pos:start="279:20" pos:end="279:31">(<argument pos:start="279:21" pos:end="279:23"><expr pos:start="279:21" pos:end="279:23"><name pos:start="279:21" pos:end="279:23">buf</name></expr></argument>, <argument pos:start="279:26" pos:end="279:30"><expr pos:start="279:26" pos:end="279:30"><literal type="string" pos:start="279:26" pos:end="279:30">"off"</literal></expr></argument>)</argument_list></call> <operator pos:start="279:33" pos:end="279:34">||</operator> <operator pos:start="279:36" pos:end="279:36">!</operator><call pos:start="279:37" pos:end="279:55"><name pos:start="279:37" pos:end="279:42">strcmp</name><argument_list pos:start="279:43" pos:end="279:55">(<argument pos:start="279:44" pos:end="279:46"><expr pos:start="279:44" pos:end="279:46"><name pos:start="279:44" pos:end="279:46">buf</name></expr></argument>, <argument pos:start="279:49" pos:end="279:54"><expr pos:start="279:49" pos:end="279:54"><literal type="string" pos:start="279:49" pos:end="279:54">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="279:58" pos:end="283:9">{<block_content pos:start="281:13" pos:end="281:41">

            <expr_stmt pos:start="281:13" pos:end="281:41"><expr pos:start="281:13" pos:end="281:40"><name pos:start="281:13" pos:end="281:22">bdrv_flags</name> <operator pos:start="281:24" pos:end="281:25">|=</operator> <name pos:start="281:27" pos:end="281:40">BDRV_O_NOCACHE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="283:11" pos:end="289:9">else if <condition pos:start="283:19" pos:end="283:45">(<expr pos:start="283:20" pos:end="283:44"><operator pos:start="283:20" pos:end="283:20">!</operator><call pos:start="283:21" pos:end="283:44"><name pos:start="283:21" pos:end="283:26">strcmp</name><argument_list pos:start="283:27" pos:end="283:44">(<argument pos:start="283:28" pos:end="283:30"><expr pos:start="283:28" pos:end="283:30"><name pos:start="283:28" pos:end="283:30">buf</name></expr></argument>, <argument pos:start="283:33" pos:end="283:43"><expr pos:start="283:33" pos:end="283:43"><literal type="string" pos:start="283:33" pos:end="283:43">"writeback"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="283:47" pos:end="289:9">{<block_content>





        </block_content>}</block></if> <if type="elseif" pos:start="289:11" pos:end="293:9">else if <condition pos:start="289:19" pos:end="289:48">(<expr pos:start="289:20" pos:end="289:47"><operator pos:start="289:20" pos:end="289:20">!</operator><call pos:start="289:21" pos:end="289:47"><name pos:start="289:21" pos:end="289:26">strcmp</name><argument_list pos:start="289:27" pos:end="289:47">(<argument pos:start="289:28" pos:end="289:30"><expr pos:start="289:28" pos:end="289:30"><name pos:start="289:28" pos:end="289:30">buf</name></expr></argument>, <argument pos:start="289:33" pos:end="289:46"><expr pos:start="289:33" pos:end="289:46"><literal type="string" pos:start="289:33" pos:end="289:46">"writethrough"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="289:50" pos:end="293:9">{<block_content>

            <comment type="block" pos:start="291:13" pos:end="291:37">/* this is the default */</comment>

        </block_content>}</block></if> <else pos:start="293:11" pos:end="299:9">else <block pos:start="293:16" pos:end="299:9">{<block_content pos:start="295:12" pos:end="297:23">

           <expr_stmt pos:start="295:12" pos:end="295:59"><expr pos:start="295:12" pos:end="295:58"><call pos:start="295:12" pos:end="295:58"><name pos:start="295:12" pos:end="295:18">fprintf</name><argument_list pos:start="295:19" pos:end="295:58">(<argument pos:start="295:20" pos:end="295:25"><expr pos:start="295:20" pos:end="295:25"><name pos:start="295:20" pos:end="295:25">stderr</name></expr></argument>, <argument pos:start="295:28" pos:end="295:57"><expr pos:start="295:28" pos:end="295:57"><literal type="string" pos:start="295:28" pos:end="295:57">"qemu: invalid cache option\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <return pos:start="297:12" pos:end="297:23">return <expr pos:start="297:19" pos:end="297:22"><name pos:start="297:19" pos:end="297:22">NULL</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="305:1" pos:end="305:23">#<cpp:directive pos:start="305:2" pos:end="305:6">ifdef</cpp:directive> <name pos:start="305:8" pos:end="305:23">CONFIG_LINUX_AIO</name></cpp:ifdef>

    <if_stmt pos:start="307:5" pos:end="328:0"><if pos:start="307:5" pos:end="328:0">if <condition pos:start="307:8" pos:end="307:50">(<expr pos:start="307:9" pos:end="307:49"><operator pos:start="307:9" pos:end="307:9">(</operator><name pos:start="307:10" pos:end="307:12">buf</name> <operator pos:start="307:14" pos:end="307:14">=</operator> <call pos:start="307:16" pos:end="307:40"><name pos:start="307:16" pos:end="307:27">qemu_opt_get</name><argument_list pos:start="307:28" pos:end="307:40">(<argument pos:start="307:29" pos:end="307:32"><expr pos:start="307:29" pos:end="307:32"><name pos:start="307:29" pos:end="307:32">opts</name></expr></argument>, <argument pos:start="307:35" pos:end="307:39"><expr pos:start="307:35" pos:end="307:39"><literal type="string" pos:start="307:35" pos:end="307:39">"aio"</literal></expr></argument>)</argument_list></call><operator pos:start="307:41" pos:end="307:41">)</operator> <operator pos:start="307:43" pos:end="307:44">!=</operator> <name pos:start="307:46" pos:end="307:49">NULL</name></expr>)</condition> <block pos:start="307:52" pos:end="328:0">{<block_content pos:start="309:9" pos:end="323:9">

        <if_stmt pos:start="309:9" pos:end="323:9"><if pos:start="309:9" pos:end="313:9">if <condition pos:start="309:12" pos:end="309:35">(<expr pos:start="309:13" pos:end="309:34"><operator pos:start="309:13" pos:end="309:13">!</operator><call pos:start="309:14" pos:end="309:34"><name pos:start="309:14" pos:end="309:19">strcmp</name><argument_list pos:start="309:20" pos:end="309:34">(<argument pos:start="309:21" pos:end="309:23"><expr pos:start="309:21" pos:end="309:23"><name pos:start="309:21" pos:end="309:23">buf</name></expr></argument>, <argument pos:start="309:26" pos:end="309:33"><expr pos:start="309:26" pos:end="309:33"><literal type="string" pos:start="309:26" pos:end="309:33">"native"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="309:37" pos:end="313:9">{<block_content pos:start="311:13" pos:end="311:44">

            <expr_stmt pos:start="311:13" pos:end="311:44"><expr pos:start="311:13" pos:end="311:43"><name pos:start="311:13" pos:end="311:22">bdrv_flags</name> <operator pos:start="311:24" pos:end="311:25">|=</operator> <name pos:start="311:27" pos:end="311:43">BDRV_O_NATIVE_AIO</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="313:11" pos:end="317:9">else if <condition pos:start="313:19" pos:end="313:43">(<expr pos:start="313:20" pos:end="313:42"><operator pos:start="313:20" pos:end="313:20">!</operator><call pos:start="313:21" pos:end="313:42"><name pos:start="313:21" pos:end="313:26">strcmp</name><argument_list pos:start="313:27" pos:end="313:42">(<argument pos:start="313:28" pos:end="313:30"><expr pos:start="313:28" pos:end="313:30"><name pos:start="313:28" pos:end="313:30">buf</name></expr></argument>, <argument pos:start="313:33" pos:end="313:41"><expr pos:start="313:33" pos:end="313:41"><literal type="string" pos:start="313:33" pos:end="313:41">"threads"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="313:45" pos:end="317:9">{<block_content>

            <comment type="block" pos:start="315:13" pos:end="315:37">/* this is the default */</comment>

        </block_content>}</block></if> <else pos:start="317:11" pos:end="323:9">else <block pos:start="317:16" pos:end="323:9">{<block_content pos:start="319:12" pos:end="321:23">

           <expr_stmt pos:start="319:12" pos:end="319:57"><expr pos:start="319:12" pos:end="319:56"><call pos:start="319:12" pos:end="319:56"><name pos:start="319:12" pos:end="319:18">fprintf</name><argument_list pos:start="319:19" pos:end="319:56">(<argument pos:start="319:20" pos:end="319:25"><expr pos:start="319:20" pos:end="319:25"><name pos:start="319:20" pos:end="319:25">stderr</name></expr></argument>, <argument pos:start="319:28" pos:end="319:55"><expr pos:start="319:28" pos:end="319:55"><literal type="string" pos:start="319:28" pos:end="319:55">"qemu: invalid aio option\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <return pos:start="321:12" pos:end="321:23">return <expr pos:start="321:19" pos:end="321:22"><name pos:start="321:19" pos:end="321:22">NULL</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="327:1" pos:end="327:6">#<cpp:directive pos:start="327:2" pos:end="327:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="331:5" pos:end="355:5"><if pos:start="331:5" pos:end="355:5">if <condition pos:start="331:8" pos:end="331:53">(<expr pos:start="331:9" pos:end="331:52"><operator pos:start="331:9" pos:end="331:9">(</operator><name pos:start="331:10" pos:end="331:12">buf</name> <operator pos:start="331:14" pos:end="331:14">=</operator> <call pos:start="331:16" pos:end="331:43"><name pos:start="331:16" pos:end="331:27">qemu_opt_get</name><argument_list pos:start="331:28" pos:end="331:43">(<argument pos:start="331:29" pos:end="331:32"><expr pos:start="331:29" pos:end="331:32"><name pos:start="331:29" pos:end="331:32">opts</name></expr></argument>, <argument pos:start="331:35" pos:end="331:42"><expr pos:start="331:35" pos:end="331:42"><literal type="string" pos:start="331:35" pos:end="331:42">"format"</literal></expr></argument>)</argument_list></call><operator pos:start="331:44" pos:end="331:44">)</operator> <operator pos:start="331:46" pos:end="331:47">!=</operator> <name pos:start="331:49" pos:end="331:52">NULL</name></expr>)</condition> <block pos:start="331:55" pos:end="355:5">{<block_content pos:start="333:8" pos:end="353:9">

       <if_stmt pos:start="333:8" pos:end="343:9"><if pos:start="333:8" pos:end="343:9">if <condition pos:start="333:11" pos:end="333:33">(<expr pos:start="333:12" pos:end="333:32"><call pos:start="333:12" pos:end="333:27"><name pos:start="333:12" pos:end="333:17">strcmp</name><argument_list pos:start="333:18" pos:end="333:27">(<argument pos:start="333:19" pos:end="333:21"><expr pos:start="333:19" pos:end="333:21"><name pos:start="333:19" pos:end="333:21">buf</name></expr></argument>, <argument pos:start="333:24" pos:end="333:26"><expr pos:start="333:24" pos:end="333:26"><literal type="string" pos:start="333:24" pos:end="333:26">"?"</literal></expr></argument>)</argument_list></call> <operator pos:start="333:29" pos:end="333:30">==</operator> <literal type="number" pos:start="333:32" pos:end="333:32">0</literal></expr>)</condition> <block pos:start="333:35" pos:end="343:9">{<block_content pos:start="335:13" pos:end="341:24">

            <expr_stmt pos:start="335:13" pos:end="335:56"><expr pos:start="335:13" pos:end="335:55"><call pos:start="335:13" pos:end="335:55"><name pos:start="335:13" pos:end="335:19">fprintf</name><argument_list pos:start="335:20" pos:end="335:55">(<argument pos:start="335:21" pos:end="335:26"><expr pos:start="335:21" pos:end="335:26"><name pos:start="335:21" pos:end="335:26">stderr</name></expr></argument>, <argument pos:start="335:29" pos:end="335:54"><expr pos:start="335:29" pos:end="335:54"><literal type="string" pos:start="335:29" pos:end="335:54">"qemu: Supported formats:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="337:13" pos:end="337:57"><expr pos:start="337:13" pos:end="337:56"><call pos:start="337:13" pos:end="337:56"><name pos:start="337:13" pos:end="337:31">bdrv_iterate_format</name><argument_list pos:start="337:32" pos:end="337:56">(<argument pos:start="337:33" pos:end="337:49"><expr pos:start="337:33" pos:end="337:49"><name pos:start="337:33" pos:end="337:49">bdrv_format_print</name></expr></argument>, <argument pos:start="337:52" pos:end="337:55"><expr pos:start="337:52" pos:end="337:55"><name pos:start="337:52" pos:end="337:55">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="339:13" pos:end="339:34"><expr pos:start="339:13" pos:end="339:33"><call pos:start="339:13" pos:end="339:33"><name pos:start="339:13" pos:end="339:19">fprintf</name><argument_list pos:start="339:20" pos:end="339:33">(<argument pos:start="339:21" pos:end="339:26"><expr pos:start="339:21" pos:end="339:26"><name pos:start="339:21" pos:end="339:26">stderr</name></expr></argument>, <argument pos:start="339:29" pos:end="339:32"><expr pos:start="339:29" pos:end="339:32"><literal type="string" pos:start="339:29" pos:end="339:32">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="341:13" pos:end="341:24">return <expr pos:start="341:20" pos:end="341:23"><name pos:start="341:20" pos:end="341:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="345:9" pos:end="345:48"><expr pos:start="345:9" pos:end="345:47"><name pos:start="345:9" pos:end="345:11">drv</name> <operator pos:start="345:13" pos:end="345:13">=</operator> <call pos:start="345:15" pos:end="345:47"><name pos:start="345:15" pos:end="345:42">bdrv_find_whitelisted_format</name><argument_list pos:start="345:43" pos:end="345:47">(<argument pos:start="345:44" pos:end="345:46"><expr pos:start="345:44" pos:end="345:46"><name pos:start="345:44" pos:end="345:46">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="347:9" pos:end="353:9"><if pos:start="347:9" pos:end="353:9">if <condition pos:start="347:12" pos:end="347:17">(<expr pos:start="347:13" pos:end="347:16"><operator pos:start="347:13" pos:end="347:13">!</operator><name pos:start="347:14" pos:end="347:16">drv</name></expr>)</condition> <block pos:start="347:19" pos:end="353:9">{<block_content pos:start="349:13" pos:end="351:24">

            <expr_stmt pos:start="349:13" pos:end="349:64"><expr pos:start="349:13" pos:end="349:63"><call pos:start="349:13" pos:end="349:63"><name pos:start="349:13" pos:end="349:19">fprintf</name><argument_list pos:start="349:20" pos:end="349:63">(<argument pos:start="349:21" pos:end="349:26"><expr pos:start="349:21" pos:end="349:26"><name pos:start="349:21" pos:end="349:26">stderr</name></expr></argument>, <argument pos:start="349:29" pos:end="349:57"><expr pos:start="349:29" pos:end="349:57"><literal type="string" pos:start="349:29" pos:end="349:57">"qemu: '%s' invalid format\n"</literal></expr></argument>, <argument pos:start="349:60" pos:end="349:62"><expr pos:start="349:60" pos:end="349:62"><name pos:start="349:60" pos:end="349:62">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="351:13" pos:end="351:24">return <expr pos:start="351:20" pos:end="351:23"><name pos:start="351:20" pos:end="351:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="359:5" pos:end="359:43"><expr pos:start="359:5" pos:end="359:42"><name pos:start="359:5" pos:end="359:18">on_write_error</name> <operator pos:start="359:20" pos:end="359:20">=</operator> <name pos:start="359:22" pos:end="359:42">BLOCK_ERR_STOP_ENOSPC</name></expr>;</expr_stmt>

    <if_stmt pos:start="361:5" pos:end="381:5"><if pos:start="361:5" pos:end="381:5">if <condition pos:start="361:8" pos:end="361:53">(<expr pos:start="361:9" pos:end="361:52"><operator pos:start="361:9" pos:end="361:9">(</operator><name pos:start="361:10" pos:end="361:12">buf</name> <operator pos:start="361:14" pos:end="361:14">=</operator> <call pos:start="361:16" pos:end="361:43"><name pos:start="361:16" pos:end="361:27">qemu_opt_get</name><argument_list pos:start="361:28" pos:end="361:43">(<argument pos:start="361:29" pos:end="361:32"><expr pos:start="361:29" pos:end="361:32"><name pos:start="361:29" pos:end="361:32">opts</name></expr></argument>, <argument pos:start="361:35" pos:end="361:42"><expr pos:start="361:35" pos:end="361:42"><literal type="string" pos:start="361:35" pos:end="361:42">"werror"</literal></expr></argument>)</argument_list></call><operator pos:start="361:44" pos:end="361:44">)</operator> <operator pos:start="361:46" pos:end="361:47">!=</operator> <name pos:start="361:49" pos:end="361:52">NULL</name></expr>)</condition> <block pos:start="361:55" pos:end="381:5">{<block_content pos:start="363:9" pos:end="379:9">

        <if_stmt pos:start="363:9" pos:end="369:9"><if pos:start="363:9" pos:end="369:9">if <condition pos:start="363:12" pos:end="363:67">(<expr pos:start="363:13" pos:end="363:66"><name pos:start="363:13" pos:end="363:16">type</name> <operator pos:start="363:18" pos:end="363:19">!=</operator> <name pos:start="363:21" pos:end="363:26">IF_IDE</name> <operator pos:start="363:28" pos:end="363:29">&amp;&amp;</operator> <name pos:start="363:31" pos:end="363:34">type</name> <operator pos:start="363:36" pos:end="363:37">!=</operator> <name pos:start="363:39" pos:end="363:45">IF_SCSI</name> <operator pos:start="363:47" pos:end="363:48">&amp;&amp;</operator> <name pos:start="363:50" pos:end="363:53">type</name> <operator pos:start="363:55" pos:end="363:56">!=</operator> <name pos:start="363:58" pos:end="363:66">IF_VIRTIO</name></expr>)</condition> <block pos:start="363:69" pos:end="369:9">{<block_content pos:start="365:13" pos:end="367:24">

            <expr_stmt pos:start="365:13" pos:end="365:71"><expr pos:start="365:13" pos:end="365:70"><call pos:start="365:13" pos:end="365:70"><name pos:start="365:13" pos:end="365:19">fprintf</name><argument_list pos:start="365:20" pos:end="365:70">(<argument pos:start="365:21" pos:end="365:26"><expr pos:start="365:21" pos:end="365:26"><name pos:start="365:21" pos:end="365:26">stderr</name></expr></argument>, <argument pos:start="365:29" pos:end="365:69"><expr pos:start="365:29" pos:end="365:69"><literal type="string" pos:start="365:29" pos:end="365:69">"werror is no supported by this format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="367:13" pos:end="367:24">return <expr pos:start="367:20" pos:end="367:23"><name pos:start="367:20" pos:end="367:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="373:9" pos:end="373:58"><expr pos:start="373:9" pos:end="373:57"><name pos:start="373:9" pos:end="373:22">on_write_error</name> <operator pos:start="373:24" pos:end="373:24">=</operator> <call pos:start="373:26" pos:end="373:57"><name pos:start="373:26" pos:end="373:49">parse_block_error_action</name><argument_list pos:start="373:50" pos:end="373:57">(<argument pos:start="373:51" pos:end="373:53"><expr pos:start="373:51" pos:end="373:53"><name pos:start="373:51" pos:end="373:53">buf</name></expr></argument>, <argument pos:start="373:56" pos:end="373:56"><expr pos:start="373:56" pos:end="373:56"><literal type="number" pos:start="373:56" pos:end="373:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="375:9" pos:end="379:9"><if pos:start="375:9" pos:end="379:9">if <condition pos:start="375:12" pos:end="375:31">(<expr pos:start="375:13" pos:end="375:30"><name pos:start="375:13" pos:end="375:26">on_write_error</name> <operator pos:start="375:28" pos:end="375:28">&lt;</operator> <literal type="number" pos:start="375:30" pos:end="375:30">0</literal></expr>)</condition> <block pos:start="375:33" pos:end="379:9">{<block_content pos:start="377:13" pos:end="377:24">

            <return pos:start="377:13" pos:end="377:24">return <expr pos:start="377:20" pos:end="377:23"><name pos:start="377:20" pos:end="377:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="385:5" pos:end="385:37"><expr pos:start="385:5" pos:end="385:36"><name pos:start="385:5" pos:end="385:17">on_read_error</name> <operator pos:start="385:19" pos:end="385:19">=</operator> <name pos:start="385:21" pos:end="385:36">BLOCK_ERR_REPORT</name></expr>;</expr_stmt>

    <if_stmt pos:start="387:5" pos:end="407:5"><if pos:start="387:5" pos:end="407:5">if <condition pos:start="387:8" pos:end="387:53">(<expr pos:start="387:9" pos:end="387:52"><operator pos:start="387:9" pos:end="387:9">(</operator><name pos:start="387:10" pos:end="387:12">buf</name> <operator pos:start="387:14" pos:end="387:14">=</operator> <call pos:start="387:16" pos:end="387:43"><name pos:start="387:16" pos:end="387:27">qemu_opt_get</name><argument_list pos:start="387:28" pos:end="387:43">(<argument pos:start="387:29" pos:end="387:32"><expr pos:start="387:29" pos:end="387:32"><name pos:start="387:29" pos:end="387:32">opts</name></expr></argument>, <argument pos:start="387:35" pos:end="387:42"><expr pos:start="387:35" pos:end="387:42"><literal type="string" pos:start="387:35" pos:end="387:42">"rerror"</literal></expr></argument>)</argument_list></call><operator pos:start="387:44" pos:end="387:44">)</operator> <operator pos:start="387:46" pos:end="387:47">!=</operator> <name pos:start="387:49" pos:end="387:52">NULL</name></expr>)</condition> <block pos:start="387:55" pos:end="407:5">{<block_content pos:start="389:9" pos:end="405:9">

        <if_stmt pos:start="389:9" pos:end="395:9"><if pos:start="389:9" pos:end="395:9">if <condition pos:start="389:12" pos:end="389:48">(<expr pos:start="389:13" pos:end="389:47"><name pos:start="389:13" pos:end="389:16">type</name> <operator pos:start="389:18" pos:end="389:19">!=</operator> <name pos:start="389:21" pos:end="389:26">IF_IDE</name> <operator pos:start="389:28" pos:end="389:29">&amp;&amp;</operator> <name pos:start="389:31" pos:end="389:34">type</name> <operator pos:start="389:36" pos:end="389:37">!=</operator> <name pos:start="389:39" pos:end="389:47">IF_VIRTIO</name></expr>)</condition> <block pos:start="389:50" pos:end="395:9">{<block_content pos:start="391:13" pos:end="393:24">

            <expr_stmt pos:start="391:13" pos:end="391:71"><expr pos:start="391:13" pos:end="391:70"><call pos:start="391:13" pos:end="391:70"><name pos:start="391:13" pos:end="391:19">fprintf</name><argument_list pos:start="391:20" pos:end="391:70">(<argument pos:start="391:21" pos:end="391:26"><expr pos:start="391:21" pos:end="391:26"><name pos:start="391:21" pos:end="391:26">stderr</name></expr></argument>, <argument pos:start="391:29" pos:end="391:69"><expr pos:start="391:29" pos:end="391:69"><literal type="string" pos:start="391:29" pos:end="391:69">"rerror is no supported by this format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="393:13" pos:end="393:24">return <expr pos:start="393:20" pos:end="393:23"><name pos:start="393:20" pos:end="393:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="399:9" pos:end="399:57"><expr pos:start="399:9" pos:end="399:56"><name pos:start="399:9" pos:end="399:21">on_read_error</name> <operator pos:start="399:23" pos:end="399:23">=</operator> <call pos:start="399:25" pos:end="399:56"><name pos:start="399:25" pos:end="399:48">parse_block_error_action</name><argument_list pos:start="399:49" pos:end="399:56">(<argument pos:start="399:50" pos:end="399:52"><expr pos:start="399:50" pos:end="399:52"><name pos:start="399:50" pos:end="399:52">buf</name></expr></argument>, <argument pos:start="399:55" pos:end="399:55"><expr pos:start="399:55" pos:end="399:55"><literal type="number" pos:start="399:55" pos:end="399:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="401:9" pos:end="405:9"><if pos:start="401:9" pos:end="405:9">if <condition pos:start="401:12" pos:end="401:30">(<expr pos:start="401:13" pos:end="401:29"><name pos:start="401:13" pos:end="401:25">on_read_error</name> <operator pos:start="401:27" pos:end="401:27">&lt;</operator> <literal type="number" pos:start="401:29" pos:end="401:29">0</literal></expr>)</condition> <block pos:start="401:32" pos:end="405:9">{<block_content pos:start="403:13" pos:end="403:24">

            <return pos:start="403:13" pos:end="403:24">return <expr pos:start="403:20" pos:end="403:23"><name pos:start="403:20" pos:end="403:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="411:5" pos:end="421:5"><if pos:start="411:5" pos:end="421:5">if <condition pos:start="411:8" pos:end="411:55">(<expr pos:start="411:9" pos:end="411:54"><operator pos:start="411:9" pos:end="411:9">(</operator><name pos:start="411:10" pos:end="411:16">devaddr</name> <operator pos:start="411:18" pos:end="411:18">=</operator> <call pos:start="411:20" pos:end="411:45"><name pos:start="411:20" pos:end="411:31">qemu_opt_get</name><argument_list pos:start="411:32" pos:end="411:45">(<argument pos:start="411:33" pos:end="411:36"><expr pos:start="411:33" pos:end="411:36"><name pos:start="411:33" pos:end="411:36">opts</name></expr></argument>, <argument pos:start="411:39" pos:end="411:44"><expr pos:start="411:39" pos:end="411:44"><literal type="string" pos:start="411:39" pos:end="411:44">"addr"</literal></expr></argument>)</argument_list></call><operator pos:start="411:46" pos:end="411:46">)</operator> <operator pos:start="411:48" pos:end="411:49">!=</operator> <name pos:start="411:51" pos:end="411:54">NULL</name></expr>)</condition> <block pos:start="411:57" pos:end="421:5">{<block_content pos:start="413:9" pos:end="419:9">

        <if_stmt pos:start="413:9" pos:end="419:9"><if pos:start="413:9" pos:end="419:9">if <condition pos:start="413:12" pos:end="413:30">(<expr pos:start="413:13" pos:end="413:29"><name pos:start="413:13" pos:end="413:16">type</name> <operator pos:start="413:18" pos:end="413:19">!=</operator> <name pos:start="413:21" pos:end="413:29">IF_VIRTIO</name></expr>)</condition> <block pos:start="413:32" pos:end="419:9">{<block_content pos:start="415:13" pos:end="417:24">

            <expr_stmt pos:start="415:13" pos:end="415:55"><expr pos:start="415:13" pos:end="415:54"><call pos:start="415:13" pos:end="415:54"><name pos:start="415:13" pos:end="415:19">fprintf</name><argument_list pos:start="415:20" pos:end="415:54">(<argument pos:start="415:21" pos:end="415:26"><expr pos:start="415:21" pos:end="415:26"><name pos:start="415:21" pos:end="415:26">stderr</name></expr></argument>, <argument pos:start="415:29" pos:end="415:53"><expr pos:start="415:29" pos:end="415:53"><literal type="string" pos:start="415:29" pos:end="415:53">"addr is not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="417:13" pos:end="417:24">return <expr pos:start="417:20" pos:end="417:23"><name pos:start="417:20" pos:end="417:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="425:5" pos:end="425:46">/* compute bus and unit according index */</comment>



    <if_stmt pos:start="429:5" pos:end="457:5"><if pos:start="429:5" pos:end="457:5">if <condition pos:start="429:8" pos:end="429:20">(<expr pos:start="429:9" pos:end="429:19"><name pos:start="429:9" pos:end="429:13">index</name> <operator pos:start="429:15" pos:end="429:16">!=</operator> <operator pos:start="429:18" pos:end="429:18">-</operator><literal type="number" pos:start="429:19" pos:end="429:19">1</literal></expr>)</condition> <block pos:start="429:22" pos:end="457:5">{<block_content pos:start="431:9" pos:end="455:9">

        <if_stmt pos:start="431:9" pos:end="439:9"><if pos:start="431:9" pos:end="439:9">if <condition pos:start="431:12" pos:end="431:41">(<expr pos:start="431:13" pos:end="431:40"><name pos:start="431:13" pos:end="431:18">bus_id</name> <operator pos:start="431:20" pos:end="431:21">!=</operator> <literal type="number" pos:start="431:23" pos:end="431:23">0</literal> <operator pos:start="431:25" pos:end="431:26">||</operator> <name pos:start="431:28" pos:end="431:34">unit_id</name> <operator pos:start="431:36" pos:end="431:37">!=</operator> <operator pos:start="431:39" pos:end="431:39">-</operator><literal type="number" pos:start="431:40" pos:end="431:40">1</literal></expr>)</condition> <block pos:start="431:43" pos:end="439:9">{<block_content pos:start="433:13" pos:end="437:24">

            <expr_stmt pos:start="433:13" pos:end="435:70"><expr pos:start="433:13" pos:end="435:69"><call pos:start="433:13" pos:end="435:69"><name pos:start="433:13" pos:end="433:19">fprintf</name><argument_list pos:start="433:20" pos:end="435:69">(<argument pos:start="433:21" pos:end="433:26"><expr pos:start="433:21" pos:end="433:26"><name pos:start="433:21" pos:end="433:26">stderr</name></expr></argument>,

                    <argument pos:start="435:21" pos:end="435:68"><expr pos:start="435:21" pos:end="435:68"><literal type="string" pos:start="435:21" pos:end="435:68">"qemu: index cannot be used with bus and unit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="437:13" pos:end="437:24">return <expr pos:start="437:20" pos:end="437:23"><name pos:start="437:20" pos:end="437:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="441:9" pos:end="455:9"><if pos:start="441:9" pos:end="449:9">if <condition pos:start="441:12" pos:end="441:26">(<expr pos:start="441:13" pos:end="441:25"><name pos:start="441:13" pos:end="441:20">max_devs</name> <operator pos:start="441:22" pos:end="441:23">==</operator> <literal type="number" pos:start="441:25" pos:end="441:25">0</literal></expr>)</condition>

        <block pos:start="443:9" pos:end="449:9">{<block_content pos:start="445:13" pos:end="447:23">

            <expr_stmt pos:start="445:13" pos:end="445:28"><expr pos:start="445:13" pos:end="445:27"><name pos:start="445:13" pos:end="445:19">unit_id</name> <operator pos:start="445:21" pos:end="445:21">=</operator> <name pos:start="445:23" pos:end="445:27">index</name></expr>;</expr_stmt>

            <expr_stmt pos:start="447:13" pos:end="447:23"><expr pos:start="447:13" pos:end="447:22"><name pos:start="447:13" pos:end="447:18">bus_id</name> <operator pos:start="447:20" pos:end="447:20">=</operator> <literal type="number" pos:start="447:22" pos:end="447:22">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="449:11" pos:end="455:9">else <block pos:start="449:16" pos:end="455:9">{<block_content pos:start="451:13" pos:end="453:38">

            <expr_stmt pos:start="451:13" pos:end="451:39"><expr pos:start="451:13" pos:end="451:38"><name pos:start="451:13" pos:end="451:19">unit_id</name> <operator pos:start="451:21" pos:end="451:21">=</operator> <name pos:start="451:23" pos:end="451:27">index</name> <operator pos:start="451:29" pos:end="451:29">%</operator> <name pos:start="451:31" pos:end="451:38">max_devs</name></expr>;</expr_stmt>

            <expr_stmt pos:start="453:13" pos:end="453:38"><expr pos:start="453:13" pos:end="453:37"><name pos:start="453:13" pos:end="453:18">bus_id</name> <operator pos:start="453:20" pos:end="453:20">=</operator> <name pos:start="453:22" pos:end="453:26">index</name> <operator pos:start="453:28" pos:end="453:28">/</operator> <name pos:start="453:30" pos:end="453:37">max_devs</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="461:5" pos:end="465:7">/* if user doesn't specify a unit_id,

     * try to find the first free

     */</comment>



    <if_stmt pos:start="469:5" pos:end="487:5"><if pos:start="469:5" pos:end="487:5">if <condition pos:start="469:8" pos:end="469:22">(<expr pos:start="469:9" pos:end="469:21"><name pos:start="469:9" pos:end="469:15">unit_id</name> <operator pos:start="469:17" pos:end="469:18">==</operator> <operator pos:start="469:20" pos:end="469:20">-</operator><literal type="number" pos:start="469:21" pos:end="469:21">1</literal></expr>)</condition> <block pos:start="469:24" pos:end="487:5">{<block_content pos:start="471:8" pos:end="485:8">

       <expr_stmt pos:start="471:8" pos:end="471:19"><expr pos:start="471:8" pos:end="471:18"><name pos:start="471:8" pos:end="471:14">unit_id</name> <operator pos:start="471:16" pos:end="471:16">=</operator> <literal type="number" pos:start="471:18" pos:end="471:18">0</literal></expr>;</expr_stmt>

       <while pos:start="473:8" pos:end="485:8">while <condition pos:start="473:14" pos:end="473:55">(<expr pos:start="473:15" pos:end="473:54"><call pos:start="473:15" pos:end="473:46"><name pos:start="473:15" pos:end="473:23">drive_get</name><argument_list pos:start="473:24" pos:end="473:46">(<argument pos:start="473:25" pos:end="473:28"><expr pos:start="473:25" pos:end="473:28"><name pos:start="473:25" pos:end="473:28">type</name></expr></argument>, <argument pos:start="473:31" pos:end="473:36"><expr pos:start="473:31" pos:end="473:36"><name pos:start="473:31" pos:end="473:36">bus_id</name></expr></argument>, <argument pos:start="473:39" pos:end="473:45"><expr pos:start="473:39" pos:end="473:45"><name pos:start="473:39" pos:end="473:45">unit_id</name></expr></argument>)</argument_list></call> <operator pos:start="473:48" pos:end="473:49">!=</operator> <name pos:start="473:51" pos:end="473:54">NULL</name></expr>)</condition> <block pos:start="473:57" pos:end="485:8">{<block_content pos:start="475:12" pos:end="483:12">

           <expr_stmt pos:start="475:12" pos:end="475:21"><expr pos:start="475:12" pos:end="475:20"><name pos:start="475:12" pos:end="475:18">unit_id</name><operator pos:start="475:19" pos:end="475:20">++</operator></expr>;</expr_stmt>

           <if_stmt pos:start="477:12" pos:end="483:12"><if pos:start="477:12" pos:end="483:12">if <condition pos:start="477:15" pos:end="477:47">(<expr pos:start="477:16" pos:end="477:46"><name pos:start="477:16" pos:end="477:23">max_devs</name> <operator pos:start="477:25" pos:end="477:26">&amp;&amp;</operator> <name pos:start="477:28" pos:end="477:34">unit_id</name> <operator pos:start="477:36" pos:end="477:37">&gt;=</operator> <name pos:start="477:39" pos:end="477:46">max_devs</name></expr>)</condition> <block pos:start="477:49" pos:end="483:12">{<block_content pos:start="479:16" pos:end="481:24">

               <expr_stmt pos:start="479:16" pos:end="479:35"><expr pos:start="479:16" pos:end="479:34"><name pos:start="479:16" pos:end="479:22">unit_id</name> <operator pos:start="479:24" pos:end="479:25">-=</operator> <name pos:start="479:27" pos:end="479:34">max_devs</name></expr>;</expr_stmt>

               <expr_stmt pos:start="481:16" pos:end="481:24"><expr pos:start="481:16" pos:end="481:23"><name pos:start="481:16" pos:end="481:21">bus_id</name><operator pos:start="481:22" pos:end="481:23">++</operator></expr>;</expr_stmt>

           </block_content>}</block></if></if_stmt>

       </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="491:5" pos:end="491:23">/* check unit id */</comment>



    <if_stmt pos:start="495:5" pos:end="503:5"><if pos:start="495:5" pos:end="503:5">if <condition pos:start="495:8" pos:end="495:40">(<expr pos:start="495:9" pos:end="495:39"><name pos:start="495:9" pos:end="495:16">max_devs</name> <operator pos:start="495:18" pos:end="495:19">&amp;&amp;</operator> <name pos:start="495:21" pos:end="495:27">unit_id</name> <operator pos:start="495:29" pos:end="495:30">&gt;=</operator> <name pos:start="495:32" pos:end="495:39">max_devs</name></expr>)</condition> <block pos:start="495:42" pos:end="503:5">{<block_content pos:start="497:9" pos:end="501:20">

        <expr_stmt pos:start="497:9" pos:end="499:39"><expr pos:start="497:9" pos:end="499:38"><call pos:start="497:9" pos:end="499:38"><name pos:start="497:9" pos:end="497:15">fprintf</name><argument_list pos:start="497:16" pos:end="499:38">(<argument pos:start="497:17" pos:end="497:22"><expr pos:start="497:17" pos:end="497:22"><name pos:start="497:17" pos:end="497:22">stderr</name></expr></argument>, <argument pos:start="497:25" pos:end="497:61"><expr pos:start="497:25" pos:end="497:61"><literal type="string" pos:start="497:25" pos:end="497:61">"qemu: unit %d too big (max is %d)\n"</literal></expr></argument>,

                <argument pos:start="499:17" pos:end="499:23"><expr pos:start="499:17" pos:end="499:23"><name pos:start="499:17" pos:end="499:23">unit_id</name></expr></argument>, <argument pos:start="499:26" pos:end="499:37"><expr pos:start="499:26" pos:end="499:37"><name pos:start="499:26" pos:end="499:33">max_devs</name> <operator pos:start="499:35" pos:end="499:35">-</operator> <literal type="number" pos:start="499:37" pos:end="499:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="501:9" pos:end="501:20">return <expr pos:start="501:16" pos:end="501:19"><name pos:start="501:16" pos:end="501:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="507:5" pos:end="511:7">/*

     * ignore multiple definitions

     */</comment>



    <if_stmt pos:start="515:5" pos:end="521:5"><if pos:start="515:5" pos:end="521:5">if <condition pos:start="515:8" pos:end="515:49">(<expr pos:start="515:9" pos:end="515:48"><call pos:start="515:9" pos:end="515:40"><name pos:start="515:9" pos:end="515:17">drive_get</name><argument_list pos:start="515:18" pos:end="515:40">(<argument pos:start="515:19" pos:end="515:22"><expr pos:start="515:19" pos:end="515:22"><name pos:start="515:19" pos:end="515:22">type</name></expr></argument>, <argument pos:start="515:25" pos:end="515:30"><expr pos:start="515:25" pos:end="515:30"><name pos:start="515:25" pos:end="515:30">bus_id</name></expr></argument>, <argument pos:start="515:33" pos:end="515:39"><expr pos:start="515:33" pos:end="515:39"><name pos:start="515:33" pos:end="515:39">unit_id</name></expr></argument>)</argument_list></call> <operator pos:start="515:42" pos:end="515:43">!=</operator> <name pos:start="515:45" pos:end="515:48">NULL</name></expr>)</condition> <block pos:start="515:51" pos:end="521:5">{<block_content pos:start="517:9" pos:end="519:20">

        <expr_stmt pos:start="517:9" pos:end="517:25"><expr pos:start="517:9" pos:end="517:24"><operator pos:start="517:9" pos:end="517:9">*</operator><name pos:start="517:10" pos:end="517:20">fatal_error</name> <operator pos:start="517:22" pos:end="517:22">=</operator> <literal type="number" pos:start="517:24" pos:end="517:24">0</literal></expr>;</expr_stmt>

        <return pos:start="519:9" pos:end="519:20">return <expr pos:start="519:16" pos:end="519:19"><name pos:start="519:16" pos:end="519:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="525:5" pos:end="525:14">/* init */</comment>



    <expr_stmt pos:start="529:5" pos:end="529:41"><expr pos:start="529:5" pos:end="529:40"><name pos:start="529:5" pos:end="529:9">dinfo</name> <operator pos:start="529:11" pos:end="529:11">=</operator> <call pos:start="529:13" pos:end="529:40"><name pos:start="529:13" pos:end="529:24">qemu_mallocz</name><argument_list pos:start="529:25" pos:end="529:40">(<argument pos:start="529:26" pos:end="529:39"><expr pos:start="529:26" pos:end="529:39"><sizeof pos:start="529:26" pos:end="529:39">sizeof<argument_list pos:start="529:32" pos:end="529:39">(<argument pos:start="529:33" pos:end="529:38"><expr pos:start="529:33" pos:end="529:38"><operator pos:start="529:33" pos:end="529:33">*</operator><name pos:start="529:34" pos:end="529:38">dinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="531:5" pos:end="557:5"><if pos:start="531:5" pos:end="535:5">if <condition pos:start="531:8" pos:end="531:43">(<expr pos:start="531:9" pos:end="531:42"><operator pos:start="531:9" pos:end="531:9">(</operator><name pos:start="531:10" pos:end="531:12">buf</name> <operator pos:start="531:14" pos:end="531:14">=</operator> <call pos:start="531:16" pos:end="531:33"><name pos:start="531:16" pos:end="531:27">qemu_opts_id</name><argument_list pos:start="531:28" pos:end="531:33">(<argument pos:start="531:29" pos:end="531:32"><expr pos:start="531:29" pos:end="531:32"><name pos:start="531:29" pos:end="531:32">opts</name></expr></argument>)</argument_list></call><operator pos:start="531:34" pos:end="531:34">)</operator> <operator pos:start="531:36" pos:end="531:37">!=</operator> <name pos:start="531:39" pos:end="531:42">NULL</name></expr>)</condition> <block pos:start="531:45" pos:end="535:5">{<block_content pos:start="533:9" pos:end="533:37">

        <expr_stmt pos:start="533:9" pos:end="533:37"><expr pos:start="533:9" pos:end="533:36"><name pos:start="533:9" pos:end="533:17"><name pos:start="533:9" pos:end="533:13">dinfo</name><operator pos:start="533:14" pos:end="533:15">-&gt;</operator><name pos:start="533:16" pos:end="533:17">id</name></name> <operator pos:start="533:19" pos:end="533:19">=</operator> <call pos:start="533:21" pos:end="533:36"><name pos:start="533:21" pos:end="533:31">qemu_strdup</name><argument_list pos:start="533:32" pos:end="533:36">(<argument pos:start="533:33" pos:end="533:35"><expr pos:start="533:33" pos:end="533:35"><name pos:start="533:33" pos:end="533:35">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="535:7" pos:end="557:5">else <block pos:start="535:12" pos:end="557:5">{<block_content pos:start="539:9" pos:end="555:49">

        <comment type="block" pos:start="537:9" pos:end="537:42">/* no id supplied -&gt; create one */</comment>

        <expr_stmt pos:start="539:9" pos:end="539:37"><expr pos:start="539:9" pos:end="539:36"><name pos:start="539:9" pos:end="539:17"><name pos:start="539:9" pos:end="539:13">dinfo</name><operator pos:start="539:14" pos:end="539:15">-&gt;</operator><name pos:start="539:16" pos:end="539:17">id</name></name> <operator pos:start="539:19" pos:end="539:19">=</operator> <call pos:start="539:21" pos:end="539:36"><name pos:start="539:21" pos:end="539:32">qemu_mallocz</name><argument_list pos:start="539:33" pos:end="539:36">(<argument pos:start="539:34" pos:end="539:35"><expr pos:start="539:34" pos:end="539:35"><literal type="number" pos:start="539:34" pos:end="539:35">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="541:9" pos:end="543:62"><if pos:start="541:9" pos:end="543:62">if <condition pos:start="541:12" pos:end="541:46">(<expr pos:start="541:13" pos:end="541:45"><name pos:start="541:13" pos:end="541:16">type</name> <operator pos:start="541:18" pos:end="541:19">==</operator> <name pos:start="541:21" pos:end="541:26">IF_IDE</name> <operator pos:start="541:28" pos:end="541:29">||</operator> <name pos:start="541:31" pos:end="541:34">type</name> <operator pos:start="541:36" pos:end="541:37">==</operator> <name pos:start="541:39" pos:end="541:45">IF_SCSI</name></expr>)</condition><block type="pseudo" pos:start="543:13" pos:end="543:62"><block_content pos:start="543:13" pos:end="543:62">

            <expr_stmt pos:start="543:13" pos:end="543:62"><expr pos:start="543:13" pos:end="543:61"><name pos:start="543:13" pos:end="543:20">mediastr</name> <operator pos:start="543:22" pos:end="543:22">=</operator> <ternary pos:start="543:24" pos:end="543:61"><condition pos:start="543:24" pos:end="543:47"><expr pos:start="543:24" pos:end="543:45"><operator pos:start="543:24" pos:end="543:24">(</operator><name pos:start="543:25" pos:end="543:29">media</name> <operator pos:start="543:31" pos:end="543:32">==</operator> <name pos:start="543:34" pos:end="543:44">MEDIA_CDROM</name><operator pos:start="543:45" pos:end="543:45">)</operator></expr> ?</condition><then pos:start="543:49" pos:end="543:53"> <expr pos:start="543:49" pos:end="543:53"><literal type="string" pos:start="543:49" pos:end="543:53">"-cd"</literal></expr> </then><else pos:start="543:55" pos:end="543:61">: <expr pos:start="543:57" pos:end="543:61"><literal type="string" pos:start="543:57" pos:end="543:61">"-hd"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="545:9" pos:end="555:49"><if pos:start="545:9" pos:end="549:57">if <condition pos:start="545:12" pos:end="545:21">(<expr pos:start="545:13" pos:end="545:20"><name pos:start="545:13" pos:end="545:20">max_devs</name></expr>)</condition><block type="pseudo" pos:start="547:13" pos:end="549:57"><block_content pos:start="547:13" pos:end="549:57">

            <expr_stmt pos:start="547:13" pos:end="549:57"><expr pos:start="547:13" pos:end="549:56"><call pos:start="547:13" pos:end="549:56"><name pos:start="547:13" pos:end="547:20">snprintf</name><argument_list pos:start="547:21" pos:end="549:56">(<argument pos:start="547:22" pos:end="547:30"><expr pos:start="547:22" pos:end="547:30"><name pos:start="547:22" pos:end="547:30"><name pos:start="547:22" pos:end="547:26">dinfo</name><operator pos:start="547:27" pos:end="547:28">-&gt;</operator><name pos:start="547:29" pos:end="547:30">id</name></name></expr></argument>, <argument pos:start="547:33" pos:end="547:34"><expr pos:start="547:33" pos:end="547:34"><literal type="number" pos:start="547:33" pos:end="547:34">32</literal></expr></argument>, <argument pos:start="547:37" pos:end="547:46"><expr pos:start="547:37" pos:end="547:46"><literal type="string" pos:start="547:37" pos:end="547:46">"%s%i%s%i"</literal></expr></argument>,

                     <argument pos:start="549:22" pos:end="549:28"><expr pos:start="549:22" pos:end="549:28"><name pos:start="549:22" pos:end="549:28">devname</name></expr></argument>, <argument pos:start="549:31" pos:end="549:36"><expr pos:start="549:31" pos:end="549:36"><name pos:start="549:31" pos:end="549:36">bus_id</name></expr></argument>, <argument pos:start="549:39" pos:end="549:46"><expr pos:start="549:39" pos:end="549:46"><name pos:start="549:39" pos:end="549:46">mediastr</name></expr></argument>, <argument pos:start="549:49" pos:end="549:55"><expr pos:start="549:49" pos:end="549:55"><name pos:start="549:49" pos:end="549:55">unit_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="551:9" pos:end="555:49">else<block type="pseudo" pos:start="553:13" pos:end="555:49"><block_content pos:start="553:13" pos:end="555:49">

            <expr_stmt pos:start="553:13" pos:end="555:49"><expr pos:start="553:13" pos:end="555:48"><call pos:start="553:13" pos:end="555:48"><name pos:start="553:13" pos:end="553:20">snprintf</name><argument_list pos:start="553:21" pos:end="555:48">(<argument pos:start="553:22" pos:end="553:30"><expr pos:start="553:22" pos:end="553:30"><name pos:start="553:22" pos:end="553:30"><name pos:start="553:22" pos:end="553:26">dinfo</name><operator pos:start="553:27" pos:end="553:28">-&gt;</operator><name pos:start="553:29" pos:end="553:30">id</name></name></expr></argument>, <argument pos:start="553:33" pos:end="553:34"><expr pos:start="553:33" pos:end="553:34"><literal type="number" pos:start="553:33" pos:end="553:34">32</literal></expr></argument>, <argument pos:start="553:37" pos:end="553:44"><expr pos:start="553:37" pos:end="553:44"><literal type="string" pos:start="553:37" pos:end="553:44">"%s%s%i"</literal></expr></argument>,

                     <argument pos:start="555:22" pos:end="555:28"><expr pos:start="555:22" pos:end="555:28"><name pos:start="555:22" pos:end="555:28">devname</name></expr></argument>, <argument pos:start="555:31" pos:end="555:38"><expr pos:start="555:31" pos:end="555:38"><name pos:start="555:31" pos:end="555:38">mediastr</name></expr></argument>, <argument pos:start="555:41" pos:end="555:47"><expr pos:start="555:41" pos:end="555:47"><name pos:start="555:41" pos:end="555:47">unit_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="559:5" pos:end="559:38"><expr pos:start="559:5" pos:end="559:37"><name pos:start="559:5" pos:end="559:15"><name pos:start="559:5" pos:end="559:9">dinfo</name><operator pos:start="559:10" pos:end="559:11">-&gt;</operator><name pos:start="559:12" pos:end="559:15">bdrv</name></name> <operator pos:start="559:17" pos:end="559:17">=</operator> <call pos:start="559:19" pos:end="559:37"><name pos:start="559:19" pos:end="559:26">bdrv_new</name><argument_list pos:start="559:27" pos:end="559:37">(<argument pos:start="559:28" pos:end="559:36"><expr pos:start="559:28" pos:end="559:36"><name pos:start="559:28" pos:end="559:36"><name pos:start="559:28" pos:end="559:32">dinfo</name><operator pos:start="559:33" pos:end="559:34">-&gt;</operator><name pos:start="559:35" pos:end="559:36">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="561:5" pos:end="561:29"><expr pos:start="561:5" pos:end="561:28"><name pos:start="561:5" pos:end="561:18"><name pos:start="561:5" pos:end="561:9">dinfo</name><operator pos:start="561:10" pos:end="561:11">-&gt;</operator><name pos:start="561:12" pos:end="561:18">devaddr</name></name> <operator pos:start="561:20" pos:end="561:20">=</operator> <name pos:start="561:22" pos:end="561:28">devaddr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="563:5" pos:end="563:23"><expr pos:start="563:5" pos:end="563:22"><name pos:start="563:5" pos:end="563:15"><name pos:start="563:5" pos:end="563:9">dinfo</name><operator pos:start="563:10" pos:end="563:11">-&gt;</operator><name pos:start="563:12" pos:end="563:15">type</name></name> <operator pos:start="563:17" pos:end="563:17">=</operator> <name pos:start="563:19" pos:end="563:22">type</name></expr>;</expr_stmt>

    <expr_stmt pos:start="565:5" pos:end="565:24"><expr pos:start="565:5" pos:end="565:23"><name pos:start="565:5" pos:end="565:14"><name pos:start="565:5" pos:end="565:9">dinfo</name><operator pos:start="565:10" pos:end="565:11">-&gt;</operator><name pos:start="565:12" pos:end="565:14">bus</name></name> <operator pos:start="565:16" pos:end="565:16">=</operator> <name pos:start="565:18" pos:end="565:23">bus_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="567:5" pos:end="567:26"><expr pos:start="567:5" pos:end="567:25"><name pos:start="567:5" pos:end="567:15"><name pos:start="567:5" pos:end="567:9">dinfo</name><operator pos:start="567:10" pos:end="567:11">-&gt;</operator><name pos:start="567:12" pos:end="567:15">unit</name></name> <operator pos:start="567:17" pos:end="567:17">=</operator> <name pos:start="567:19" pos:end="567:25">unit_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="569:5" pos:end="569:41"><expr pos:start="569:5" pos:end="569:40"><name pos:start="569:5" pos:end="569:24"><name pos:start="569:5" pos:end="569:9">dinfo</name><operator pos:start="569:10" pos:end="569:11">-&gt;</operator><name pos:start="569:12" pos:end="569:24">on_read_error</name></name> <operator pos:start="569:26" pos:end="569:26">=</operator> <name pos:start="569:28" pos:end="569:40">on_read_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="571:5" pos:end="571:43"><expr pos:start="571:5" pos:end="571:42"><name pos:start="571:5" pos:end="571:25"><name pos:start="571:5" pos:end="571:9">dinfo</name><operator pos:start="571:10" pos:end="571:11">-&gt;</operator><name pos:start="571:12" pos:end="571:25">on_write_error</name></name> <operator pos:start="571:27" pos:end="571:27">=</operator> <name pos:start="571:29" pos:end="571:42">on_write_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="573:5" pos:end="573:23"><expr pos:start="573:5" pos:end="573:22"><name pos:start="573:5" pos:end="573:15"><name pos:start="573:5" pos:end="573:9">dinfo</name><operator pos:start="573:10" pos:end="573:11">-&gt;</operator><name pos:start="573:12" pos:end="573:15">opts</name></name> <operator pos:start="573:17" pos:end="573:17">=</operator> <name pos:start="573:19" pos:end="573:22">opts</name></expr>;</expr_stmt>

    <if_stmt pos:start="575:5" pos:end="577:55"><if pos:start="575:5" pos:end="577:55">if <condition pos:start="575:8" pos:end="575:15">(<expr pos:start="575:9" pos:end="575:14"><name pos:start="575:9" pos:end="575:14">serial</name></expr>)</condition><block type="pseudo" pos:start="577:9" pos:end="577:55"><block_content pos:start="577:9" pos:end="577:55">

        <expr_stmt pos:start="577:9" pos:end="577:55"><expr pos:start="577:9" pos:end="577:54"><call pos:start="577:9" pos:end="577:54"><name pos:start="577:9" pos:end="577:15">strncpy</name><argument_list pos:start="577:16" pos:end="577:54">(<argument pos:start="577:17" pos:end="577:29"><expr pos:start="577:17" pos:end="577:29"><name pos:start="577:17" pos:end="577:29"><name pos:start="577:17" pos:end="577:21">dinfo</name><operator pos:start="577:22" pos:end="577:23">-&gt;</operator><name pos:start="577:24" pos:end="577:29">serial</name></name></expr></argument>, <argument pos:start="577:32" pos:end="577:37"><expr pos:start="577:32" pos:end="577:37"><name pos:start="577:32" pos:end="577:37">serial</name></expr></argument>, <argument pos:start="577:40" pos:end="577:53"><expr pos:start="577:40" pos:end="577:53"><sizeof pos:start="577:40" pos:end="577:53">sizeof<argument_list pos:start="577:46" pos:end="577:53">(<argument pos:start="577:47" pos:end="577:52"><expr pos:start="577:47" pos:end="577:52"><name pos:start="577:47" pos:end="577:52">serial</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="579:5" pos:end="579:45"><expr pos:start="579:5" pos:end="579:44"><call pos:start="579:5" pos:end="579:44"><name pos:start="579:5" pos:end="579:22">QTAILQ_INSERT_TAIL</name><argument_list pos:start="579:23" pos:end="579:44">(<argument pos:start="579:24" pos:end="579:30"><expr pos:start="579:24" pos:end="579:30"><operator pos:start="579:24" pos:end="579:24">&amp;</operator><name pos:start="579:25" pos:end="579:30">drives</name></expr></argument>, <argument pos:start="579:33" pos:end="579:37"><expr pos:start="579:33" pos:end="579:37"><name pos:start="579:33" pos:end="579:37">dinfo</name></expr></argument>, <argument pos:start="579:40" pos:end="579:43"><expr pos:start="579:40" pos:end="579:43"><name pos:start="579:40" pos:end="579:43">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="583:5" pos:end="655:5">switch<condition pos:start="583:11" pos:end="583:16">(<expr pos:start="583:12" pos:end="583:15"><name pos:start="583:12" pos:end="583:15">type</name></expr>)</condition> <block pos:start="583:18" pos:end="655:5">{<block_content pos:start="585:5" pos:end="653:16">

    <case pos:start="585:5" pos:end="585:16">case <expr pos:start="585:10" pos:end="585:15"><name pos:start="585:10" pos:end="585:15">IF_IDE</name></expr>:</case>

    <case pos:start="587:5" pos:end="587:17">case <expr pos:start="587:10" pos:end="587:16"><name pos:start="587:10" pos:end="587:16">IF_SCSI</name></expr>:</case>

    <case pos:start="589:5" pos:end="589:16">case <expr pos:start="589:10" pos:end="589:15"><name pos:start="589:10" pos:end="589:15">IF_XEN</name></expr>:</case>

    <case pos:start="591:5" pos:end="591:17">case <expr pos:start="591:10" pos:end="591:16"><name pos:start="591:10" pos:end="591:16">IF_NONE</name></expr>:</case>

        <switch pos:start="593:9" pos:end="613:9">switch<condition pos:start="593:15" pos:end="593:21">(<expr pos:start="593:16" pos:end="593:20"><name pos:start="593:16" pos:end="593:20">media</name></expr>)</condition> <block pos:start="593:23" pos:end="613:9">{<block_content pos:start="595:9" pos:end="611:18">

	<case pos:start="595:9" pos:end="595:24">case <expr pos:start="595:14" pos:end="595:23"><name pos:start="595:14" pos:end="595:23">MEDIA_DISK</name></expr>:</case>

            <if_stmt pos:start="597:13" pos:end="603:13"><if pos:start="597:13" pos:end="603:13">if <condition pos:start="597:16" pos:end="597:26">(<expr pos:start="597:17" pos:end="597:25"><name pos:start="597:17" pos:end="597:20">cyls</name> <operator pos:start="597:22" pos:end="597:23">!=</operator> <literal type="number" pos:start="597:25" pos:end="597:25">0</literal></expr>)</condition> <block pos:start="597:28" pos:end="603:13">{<block_content pos:start="599:17" pos:end="601:68">

                <expr_stmt pos:start="599:17" pos:end="599:71"><expr pos:start="599:17" pos:end="599:70"><call pos:start="599:17" pos:end="599:70"><name pos:start="599:17" pos:end="599:38">bdrv_set_geometry_hint</name><argument_list pos:start="599:39" pos:end="599:70">(<argument pos:start="599:40" pos:end="599:50"><expr pos:start="599:40" pos:end="599:50"><name pos:start="599:40" pos:end="599:50"><name pos:start="599:40" pos:end="599:44">dinfo</name><operator pos:start="599:45" pos:end="599:46">-&gt;</operator><name pos:start="599:47" pos:end="599:50">bdrv</name></name></expr></argument>, <argument pos:start="599:53" pos:end="599:56"><expr pos:start="599:53" pos:end="599:56"><name pos:start="599:53" pos:end="599:56">cyls</name></expr></argument>, <argument pos:start="599:59" pos:end="599:63"><expr pos:start="599:59" pos:end="599:63"><name pos:start="599:59" pos:end="599:63">heads</name></expr></argument>, <argument pos:start="599:66" pos:end="599:69"><expr pos:start="599:66" pos:end="599:69"><name pos:start="599:66" pos:end="599:69">secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="601:17" pos:end="601:68"><expr pos:start="601:17" pos:end="601:67"><call pos:start="601:17" pos:end="601:67"><name pos:start="601:17" pos:end="601:41">bdrv_set_translation_hint</name><argument_list pos:start="601:42" pos:end="601:67">(<argument pos:start="601:43" pos:end="601:53"><expr pos:start="601:43" pos:end="601:53"><name pos:start="601:43" pos:end="601:53"><name pos:start="601:43" pos:end="601:47">dinfo</name><operator pos:start="601:48" pos:end="601:49">-&gt;</operator><name pos:start="601:50" pos:end="601:53">bdrv</name></name></expr></argument>, <argument pos:start="601:56" pos:end="601:66"><expr pos:start="601:56" pos:end="601:66"><name pos:start="601:56" pos:end="601:66">translation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

	    <break pos:start="605:13" pos:end="605:18">break;</break>

	<case pos:start="607:9" pos:end="607:25">case <expr pos:start="607:14" pos:end="607:24"><name pos:start="607:14" pos:end="607:24">MEDIA_CDROM</name></expr>:</case>

            <expr_stmt pos:start="609:13" pos:end="609:61"><expr pos:start="609:13" pos:end="609:60"><call pos:start="609:13" pos:end="609:60"><name pos:start="609:13" pos:end="609:30">bdrv_set_type_hint</name><argument_list pos:start="609:31" pos:end="609:60">(<argument pos:start="609:32" pos:end="609:42"><expr pos:start="609:32" pos:end="609:42"><name pos:start="609:32" pos:end="609:42"><name pos:start="609:32" pos:end="609:36">dinfo</name><operator pos:start="609:37" pos:end="609:38">-&gt;</operator><name pos:start="609:39" pos:end="609:42">bdrv</name></name></expr></argument>, <argument pos:start="609:45" pos:end="609:59"><expr pos:start="609:45" pos:end="609:59"><name pos:start="609:45" pos:end="609:59">BDRV_TYPE_CDROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <break pos:start="611:13" pos:end="611:18">break;</break>

	</block_content>}</block></switch>

        <break pos:start="615:9" pos:end="615:14">break;</break>

    <case pos:start="617:5" pos:end="617:15">case <expr pos:start="617:10" pos:end="617:14"><name pos:start="617:10" pos:end="617:14">IF_SD</name></expr>:</case>

        <comment type="block" pos:start="619:9" pos:end="621:29">/* FIXME: This isn't really a floppy, but it's a reasonable

           approximation.  */</comment>

    <case pos:start="623:5" pos:end="623:19">case <expr pos:start="623:10" pos:end="623:18"><name pos:start="623:10" pos:end="623:18">IF_FLOPPY</name></expr>:</case>

        <expr_stmt pos:start="625:9" pos:end="625:58"><expr pos:start="625:9" pos:end="625:57"><call pos:start="625:9" pos:end="625:57"><name pos:start="625:9" pos:end="625:26">bdrv_set_type_hint</name><argument_list pos:start="625:27" pos:end="625:57">(<argument pos:start="625:28" pos:end="625:38"><expr pos:start="625:28" pos:end="625:38"><name pos:start="625:28" pos:end="625:38"><name pos:start="625:28" pos:end="625:32">dinfo</name><operator pos:start="625:33" pos:end="625:34">-&gt;</operator><name pos:start="625:35" pos:end="625:38">bdrv</name></name></expr></argument>, <argument pos:start="625:41" pos:end="625:56"><expr pos:start="625:41" pos:end="625:56"><name pos:start="625:41" pos:end="625:56">BDRV_TYPE_FLOPPY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="627:9" pos:end="627:14">break;</break>

    <case pos:start="629:5" pos:end="629:19">case <expr pos:start="629:10" pos:end="629:18"><name pos:start="629:10" pos:end="629:18">IF_PFLASH</name></expr>:</case>

    <case pos:start="631:5" pos:end="631:16">case <expr pos:start="631:10" pos:end="631:15"><name pos:start="631:10" pos:end="631:15">IF_MTD</name></expr>:</case>

        <break pos:start="633:9" pos:end="633:14">break;</break>

    <case pos:start="635:5" pos:end="635:19">case <expr pos:start="635:10" pos:end="635:18"><name pos:start="635:10" pos:end="635:18">IF_VIRTIO</name></expr>:</case>

        <comment type="block" pos:start="637:9" pos:end="637:37">/* add virtio block device */</comment>

        <expr_stmt pos:start="639:9" pos:end="639:60"><expr pos:start="639:9" pos:end="639:59"><name pos:start="639:9" pos:end="639:12">opts</name> <operator pos:start="639:14" pos:end="639:14">=</operator> <call pos:start="639:16" pos:end="639:59"><name pos:start="639:16" pos:end="639:31">qemu_opts_create</name><argument_list pos:start="639:32" pos:end="639:59">(<argument pos:start="639:33" pos:end="639:49"><expr pos:start="639:33" pos:end="639:49"><operator pos:start="639:33" pos:end="639:33">&amp;</operator><name pos:start="639:34" pos:end="639:49">qemu_device_opts</name></expr></argument>, <argument pos:start="639:52" pos:end="639:55"><expr pos:start="639:52" pos:end="639:55"><name pos:start="639:52" pos:end="639:55">NULL</name></expr></argument>, <argument pos:start="639:58" pos:end="639:58"><expr pos:start="639:58" pos:end="639:58"><literal type="number" pos:start="639:58" pos:end="639:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="641:9" pos:end="641:55"><expr pos:start="641:9" pos:end="641:54"><call pos:start="641:9" pos:end="641:54"><name pos:start="641:9" pos:end="641:20">qemu_opt_set</name><argument_list pos:start="641:21" pos:end="641:54">(<argument pos:start="641:22" pos:end="641:25"><expr pos:start="641:22" pos:end="641:25"><name pos:start="641:22" pos:end="641:25">opts</name></expr></argument>, <argument pos:start="641:28" pos:end="641:35"><expr pos:start="641:28" pos:end="641:35"><literal type="string" pos:start="641:28" pos:end="641:35">"driver"</literal></expr></argument>, <argument pos:start="641:38" pos:end="641:53"><expr pos:start="641:38" pos:end="641:53"><literal type="string" pos:start="641:38" pos:end="641:53">"virtio-blk-pci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="643:9" pos:end="643:47"><expr pos:start="643:9" pos:end="643:46"><call pos:start="643:9" pos:end="643:46"><name pos:start="643:9" pos:end="643:20">qemu_opt_set</name><argument_list pos:start="643:21" pos:end="643:46">(<argument pos:start="643:22" pos:end="643:25"><expr pos:start="643:22" pos:end="643:25"><name pos:start="643:22" pos:end="643:25">opts</name></expr></argument>, <argument pos:start="643:28" pos:end="643:34"><expr pos:start="643:28" pos:end="643:34"><literal type="string" pos:start="643:28" pos:end="643:34">"drive"</literal></expr></argument>, <argument pos:start="643:37" pos:end="643:45"><expr pos:start="643:37" pos:end="643:45"><name pos:start="643:37" pos:end="643:45"><name pos:start="643:37" pos:end="643:41">dinfo</name><operator pos:start="643:42" pos:end="643:43">-&gt;</operator><name pos:start="643:44" pos:end="643:45">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="645:9" pos:end="647:48"><if pos:start="645:9" pos:end="647:48">if <condition pos:start="645:12" pos:end="645:20">(<expr pos:start="645:13" pos:end="645:19"><name pos:start="645:13" pos:end="645:19">devaddr</name></expr>)</condition><block type="pseudo" pos:start="647:13" pos:end="647:48"><block_content pos:start="647:13" pos:end="647:48">

            <expr_stmt pos:start="647:13" pos:end="647:48"><expr pos:start="647:13" pos:end="647:47"><call pos:start="647:13" pos:end="647:47"><name pos:start="647:13" pos:end="647:24">qemu_opt_set</name><argument_list pos:start="647:25" pos:end="647:47">(<argument pos:start="647:26" pos:end="647:29"><expr pos:start="647:26" pos:end="647:29"><name pos:start="647:26" pos:end="647:29">opts</name></expr></argument>, <argument pos:start="647:32" pos:end="647:37"><expr pos:start="647:32" pos:end="647:37"><literal type="string" pos:start="647:32" pos:end="647:37">"addr"</literal></expr></argument>, <argument pos:start="647:40" pos:end="647:46"><expr pos:start="647:40" pos:end="647:46"><name pos:start="647:40" pos:end="647:46">devaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="649:9" pos:end="649:14">break;</break>

    <case pos:start="651:5" pos:end="651:18">case <expr pos:start="651:10" pos:end="651:17"><name pos:start="651:10" pos:end="651:17">IF_COUNT</name></expr>:</case>

        <expr_stmt pos:start="653:9" pos:end="653:16"><expr pos:start="653:9" pos:end="653:15"><call pos:start="653:9" pos:end="653:15"><name pos:start="653:9" pos:end="653:13">abort</name><argument_list pos:start="653:14" pos:end="653:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

    <if_stmt pos:start="657:5" pos:end="663:5"><if pos:start="657:5" pos:end="663:5">if <condition pos:start="657:8" pos:end="657:14">(<expr pos:start="657:9" pos:end="657:13"><operator pos:start="657:9" pos:end="657:9">!</operator><name pos:start="657:10" pos:end="657:13">file</name></expr>)</condition> <block pos:start="657:16" pos:end="663:5">{<block_content pos:start="659:9" pos:end="661:20">

        <expr_stmt pos:start="659:9" pos:end="659:25"><expr pos:start="659:9" pos:end="659:24"><operator pos:start="659:9" pos:end="659:9">*</operator><name pos:start="659:10" pos:end="659:20">fatal_error</name> <operator pos:start="659:22" pos:end="659:22">=</operator> <literal type="number" pos:start="659:24" pos:end="659:24">0</literal></expr>;</expr_stmt>

        <return pos:start="661:9" pos:end="661:20">return <expr pos:start="661:16" pos:end="661:19"><name pos:start="661:16" pos:end="661:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="665:5" pos:end="673:5"><if pos:start="665:5" pos:end="673:5">if <condition pos:start="665:8" pos:end="665:17">(<expr pos:start="665:9" pos:end="665:16"><name pos:start="665:9" pos:end="665:16">snapshot</name></expr>)</condition> <block pos:start="665:19" pos:end="673:5">{<block_content pos:start="669:9" pos:end="671:56">

        <comment type="block" pos:start="667:9" pos:end="667:49">/* always use write-back with snapshot */</comment>

        <expr_stmt pos:start="669:9" pos:end="669:41"><expr pos:start="669:9" pos:end="669:40"><name pos:start="669:9" pos:end="669:18">bdrv_flags</name> <operator pos:start="669:20" pos:end="669:21">&amp;=</operator> <operator pos:start="669:23" pos:end="669:23">~</operator><name pos:start="669:24" pos:end="669:40">BDRV_O_CACHE_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="671:9" pos:end="671:56"><expr pos:start="671:9" pos:end="671:55"><name pos:start="671:9" pos:end="671:18">bdrv_flags</name> <operator pos:start="671:20" pos:end="671:21">|=</operator> <operator pos:start="671:23" pos:end="671:23">(</operator><name pos:start="671:24" pos:end="671:38">BDRV_O_SNAPSHOT</name><operator pos:start="671:39" pos:end="671:39">|</operator><name pos:start="671:40" pos:end="671:54">BDRV_O_CACHE_WB</name><operator pos:start="671:55" pos:end="671:55">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="677:5" pos:end="693:5"><if pos:start="677:5" pos:end="683:5">if <condition pos:start="677:8" pos:end="677:29">(<expr pos:start="677:9" pos:end="677:28"><name pos:start="677:9" pos:end="677:13">media</name> <operator pos:start="677:15" pos:end="677:16">==</operator> <name pos:start="677:18" pos:end="677:28">MEDIA_CDROM</name></expr>)</condition> <block pos:start="677:31" pos:end="683:5">{<block_content pos:start="681:9" pos:end="681:15">

        <comment type="block" pos:start="679:9" pos:end="679:60">/* CDROM is fine for any interface, don't check.  */</comment>

        <expr_stmt pos:start="681:9" pos:end="681:15"><expr pos:start="681:9" pos:end="681:14"><name pos:start="681:9" pos:end="681:10">ro</name> <operator pos:start="681:12" pos:end="681:12">=</operator> <literal type="number" pos:start="681:14" pos:end="681:14">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="683:7" pos:end="693:5">else if <condition pos:start="683:15" pos:end="683:23">(<expr pos:start="683:16" pos:end="683:22"><name pos:start="683:16" pos:end="683:17">ro</name> <operator pos:start="683:19" pos:end="683:20">==</operator> <literal type="number" pos:start="683:22" pos:end="683:22">1</literal></expr>)</condition> <block pos:start="683:25" pos:end="693:5">{<block_content pos:start="685:9" pos:end="691:9">

        <if_stmt pos:start="685:9" pos:end="691:9"><if pos:start="685:9" pos:end="691:9">if <condition pos:start="685:12" pos:end="685:70">(<expr pos:start="685:13" pos:end="685:69"><name pos:start="685:13" pos:end="685:16">type</name> <operator pos:start="685:18" pos:end="685:19">!=</operator> <name pos:start="685:21" pos:end="685:27">IF_SCSI</name> <operator pos:start="685:29" pos:end="685:30">&amp;&amp;</operator> <name pos:start="685:32" pos:end="685:35">type</name> <operator pos:start="685:37" pos:end="685:38">!=</operator> <name pos:start="685:40" pos:end="685:48">IF_VIRTIO</name> <operator pos:start="685:50" pos:end="685:51">&amp;&amp;</operator> <name pos:start="685:53" pos:end="685:56">type</name> <operator pos:start="685:58" pos:end="685:59">!=</operator> <name pos:start="685:61" pos:end="685:69">IF_FLOPPY</name></expr>)</condition> <block pos:start="685:72" pos:end="691:9">{<block_content pos:start="687:13" pos:end="689:24">

            <expr_stmt pos:start="687:13" pos:end="687:97"><expr pos:start="687:13" pos:end="687:96"><call pos:start="687:13" pos:end="687:96"><name pos:start="687:13" pos:end="687:19">fprintf</name><argument_list pos:start="687:20" pos:end="687:96">(<argument pos:start="687:21" pos:end="687:26"><expr pos:start="687:21" pos:end="687:26"><name pos:start="687:21" pos:end="687:26">stderr</name></expr></argument>, <argument pos:start="687:29" pos:end="687:95"><expr pos:start="687:29" pos:end="687:95"><literal type="string" pos:start="687:29" pos:end="687:95">"qemu: readonly flag not supported for drive with this interface\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="689:13" pos:end="689:24">return <expr pos:start="689:20" pos:end="689:23"><name pos:start="689:20" pos:end="689:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="697:5" pos:end="697:39"><expr pos:start="697:5" pos:end="697:38"><name pos:start="697:5" pos:end="697:14">bdrv_flags</name> <operator pos:start="697:16" pos:end="697:17">|=</operator> <ternary pos:start="697:19" pos:end="697:38"><condition pos:start="697:19" pos:end="697:22"><expr pos:start="697:19" pos:end="697:20"><name pos:start="697:19" pos:end="697:20">ro</name></expr> ?</condition><then pos:start="697:24" pos:end="697:24"> <expr pos:start="697:24" pos:end="697:24"><literal type="number" pos:start="697:24" pos:end="697:24">0</literal></expr> </then><else pos:start="697:26" pos:end="697:38">: <expr pos:start="697:28" pos:end="697:38"><name pos:start="697:28" pos:end="697:38">BDRV_O_RDWR</name></expr></else></ternary></expr>;</expr_stmt>



    <if_stmt pos:start="701:5" pos:end="709:5"><if pos:start="701:5" pos:end="709:5">if <condition pos:start="701:8" pos:end="701:58">(<expr pos:start="701:9" pos:end="701:57"><call pos:start="701:9" pos:end="701:53"><name pos:start="701:9" pos:end="701:17">bdrv_open</name><argument_list pos:start="701:18" pos:end="701:53">(<argument pos:start="701:19" pos:end="701:29"><expr pos:start="701:19" pos:end="701:29"><name pos:start="701:19" pos:end="701:29"><name pos:start="701:19" pos:end="701:23">dinfo</name><operator pos:start="701:24" pos:end="701:25">-&gt;</operator><name pos:start="701:26" pos:end="701:29">bdrv</name></name></expr></argument>, <argument pos:start="701:32" pos:end="701:35"><expr pos:start="701:32" pos:end="701:35"><name pos:start="701:32" pos:end="701:35">file</name></expr></argument>, <argument pos:start="701:38" pos:end="701:47"><expr pos:start="701:38" pos:end="701:47"><name pos:start="701:38" pos:end="701:47">bdrv_flags</name></expr></argument>, <argument pos:start="701:50" pos:end="701:52"><expr pos:start="701:50" pos:end="701:52"><name pos:start="701:50" pos:end="701:52">drv</name></expr></argument>)</argument_list></call> <operator pos:start="701:55" pos:end="701:55">&lt;</operator> <literal type="number" pos:start="701:57" pos:end="701:57">0</literal></expr>)</condition> <block pos:start="701:60" pos:end="709:5">{<block_content pos:start="703:9" pos:end="707:20">

        <expr_stmt pos:start="703:9" pos:end="705:47"><expr pos:start="703:9" pos:end="705:46"><call pos:start="703:9" pos:end="705:46"><name pos:start="703:9" pos:end="703:15">fprintf</name><argument_list pos:start="703:16" pos:end="705:46">(<argument pos:start="703:17" pos:end="703:22"><expr pos:start="703:17" pos:end="703:22"><name pos:start="703:17" pos:end="703:22">stderr</name></expr></argument>, <argument pos:start="703:25" pos:end="703:66"><expr pos:start="703:25" pos:end="703:66"><literal type="string" pos:start="703:25" pos:end="703:66">"qemu: could not open disk image %s: %s\n"</literal></expr></argument>,

                        <argument pos:start="705:25" pos:end="705:28"><expr pos:start="705:25" pos:end="705:28"><name pos:start="705:25" pos:end="705:28">file</name></expr></argument>, <argument pos:start="705:31" pos:end="705:45"><expr pos:start="705:31" pos:end="705:45"><call pos:start="705:31" pos:end="705:45"><name pos:start="705:31" pos:end="705:38">strerror</name><argument_list pos:start="705:39" pos:end="705:45">(<argument pos:start="705:40" pos:end="705:44"><expr pos:start="705:40" pos:end="705:44"><name pos:start="705:40" pos:end="705:44">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="707:9" pos:end="707:20">return <expr pos:start="707:16" pos:end="707:19"><name pos:start="707:16" pos:end="707:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="713:5" pos:end="715:22"><if pos:start="713:5" pos:end="715:22">if <condition pos:start="713:8" pos:end="713:39">(<expr pos:start="713:9" pos:end="713:38"><call pos:start="713:9" pos:end="713:38"><name pos:start="713:9" pos:end="713:25">bdrv_key_required</name><argument_list pos:start="713:26" pos:end="713:38">(<argument pos:start="713:27" pos:end="713:37"><expr pos:start="713:27" pos:end="713:37"><name pos:start="713:27" pos:end="713:37"><name pos:start="713:27" pos:end="713:31">dinfo</name><operator pos:start="713:32" pos:end="713:33">-&gt;</operator><name pos:start="713:34" pos:end="713:37">bdrv</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="715:9" pos:end="715:22"><block_content pos:start="715:9" pos:end="715:22">

        <expr_stmt pos:start="715:9" pos:end="715:22"><expr pos:start="715:9" pos:end="715:21"><name pos:start="715:9" pos:end="715:17">autostart</name> <operator pos:start="715:19" pos:end="715:19">=</operator> <literal type="number" pos:start="715:21" pos:end="715:21">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="717:5" pos:end="717:21"><expr pos:start="717:5" pos:end="717:20"><operator pos:start="717:5" pos:end="717:5">*</operator><name pos:start="717:6" pos:end="717:16">fatal_error</name> <operator pos:start="717:18" pos:end="717:18">=</operator> <literal type="number" pos:start="717:20" pos:end="717:20">0</literal></expr>;</expr_stmt>

    <return pos:start="719:5" pos:end="719:17">return <expr pos:start="719:12" pos:end="719:16"><name pos:start="719:12" pos:end="719:16">dinfo</name></expr>;</return>

</block_content>}</block></function></unit>
