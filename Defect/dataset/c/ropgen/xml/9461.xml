<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9461.c" pos:tabs="8"><function pos:start="1:1" pos:end="219:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">sh_serial_ioport_write</name><parameter_list pos:start="1:35" pos:end="1:77">(<parameter pos:start="1:36" pos:end="1:47"><decl pos:start="1:36" pos:end="1:47"><type pos:start="1:36" pos:end="1:47"><name pos:start="1:36" pos:end="1:39">void</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:47">opaque</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:62"><decl pos:start="1:50" pos:end="1:62"><type pos:start="1:50" pos:end="1:62"><name pos:start="1:50" pos:end="1:57">uint32_t</name></type> <name pos:start="1:59" pos:end="1:62">offs</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:76"><decl pos:start="1:65" pos:end="1:76"><type pos:start="1:65" pos:end="1:76"><name pos:start="1:65" pos:end="1:72">uint32_t</name></type> <name pos:start="1:74" pos:end="1:76">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="219:1">{<block_content pos:start="5:5" pos:end="217:14">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">sh_serial_state</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:22">s</name> <init pos:start="5:24" pos:end="5:31">= <expr pos:start="5:26" pos:end="5:31"><name pos:start="5:26" pos:end="5:31">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="12:0"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:17">char</name></type> <name pos:start="7:19" pos:end="7:20">ch</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="11:1" pos:end="11:19">#<cpp:directive pos:start="11:2" pos:end="11:6">ifdef</cpp:directive> <name pos:start="11:8" pos:end="11:19">DEBUG_SERIAL</name></cpp:ifdef>

    <expr_stmt pos:start="13:5" pos:end="18:0"><expr pos:start="13:5" pos:end="15:21"><call pos:start="13:5" pos:end="15:21"><name pos:start="13:5" pos:end="13:10">printf</name><argument_list pos:start="13:11" pos:end="15:21">(<argument pos:start="13:12" pos:end="13:54"><expr pos:start="13:12" pos:end="13:54"><literal type="string" pos:start="13:12" pos:end="13:54">"sh_serial: write offs=0x%02x val=0x%02x\n"</literal></expr></argument>,

	   <argument pos:start="15:12" pos:end="15:15"><expr pos:start="15:12" pos:end="15:15"><name pos:start="15:12" pos:end="15:15">offs</name></expr></argument>, <argument pos:start="15:18" pos:end="15:20"><expr pos:start="15:18" pos:end="15:20"><name pos:start="15:18" pos:end="15:20">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>

    <switch pos:start="19:5" pos:end="83:5">switch<condition pos:start="19:11" pos:end="19:16">(<expr pos:start="19:12" pos:end="19:15"><name pos:start="19:12" pos:end="19:15">offs</name></expr>)</condition> <block pos:start="19:18" pos:end="83:5">{<block_content pos:start="21:5" pos:end="82:0">

    <case pos:start="21:5" pos:end="21:14">case <expr pos:start="21:10" pos:end="21:13"><literal type="number" pos:start="21:10" pos:end="21:13">0x00</literal></expr>:</case> <comment type="block" pos:start="21:16" pos:end="21:24">/* SMR */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:71"><expr pos:start="23:9" pos:end="23:70"><name pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:14">smr</name></name> <operator pos:start="23:16" pos:end="23:16">=</operator> <name pos:start="23:18" pos:end="23:20">val</name> <operator pos:start="23:22" pos:end="23:22">&amp;</operator> <operator pos:start="23:24" pos:end="23:24">(</operator><ternary pos:start="23:25" pos:end="23:69"><condition pos:start="23:25" pos:end="23:57"><expr pos:start="23:25" pos:end="23:55"><operator pos:start="23:25" pos:end="23:25">(</operator><name pos:start="23:26" pos:end="23:32"><name pos:start="23:26" pos:end="23:26">s</name><operator pos:start="23:27" pos:end="23:28">-&gt;</operator><name pos:start="23:29" pos:end="23:32">feat</name></name> <operator pos:start="23:34" pos:end="23:34">&amp;</operator> <name pos:start="23:36" pos:end="23:54">SH_SERIAL_FEAT_SCIF</name><operator pos:start="23:55" pos:end="23:55">)</operator></expr> ?</condition><then pos:start="23:59" pos:end="23:62"> <expr pos:start="23:59" pos:end="23:62"><literal type="number" pos:start="23:59" pos:end="23:62">0x7b</literal></expr> </then><else pos:start="23:64" pos:end="23:69">: <expr pos:start="23:66" pos:end="23:69"><literal type="number" pos:start="23:66" pos:end="23:69">0xff</literal></expr></else></ternary><operator pos:start="23:70" pos:end="23:70">)</operator></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:15">return;</return>

    <case pos:start="27:5" pos:end="27:14">case <expr pos:start="27:10" pos:end="27:13"><literal type="number" pos:start="27:10" pos:end="27:13">0x04</literal></expr>:</case> <comment type="block" pos:start="27:16" pos:end="27:24">/* BRR */</comment>

        <expr_stmt pos:start="29:9" pos:end="29:21"><expr pos:start="29:9" pos:end="29:20"><name pos:start="29:9" pos:end="29:14"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:14">brr</name></name> <operator pos:start="29:16" pos:end="29:16">=</operator> <name pos:start="29:18" pos:end="29:20">val</name></expr>;</expr_stmt>

	<return pos:start="31:9" pos:end="31:15">return;</return>

    <case pos:start="33:5" pos:end="33:14">case <expr pos:start="33:10" pos:end="33:13"><literal type="number" pos:start="33:10" pos:end="33:13">0x08</literal></expr>:</case> <comment type="block" pos:start="33:16" pos:end="33:24">/* SCR */</comment>

        <comment type="block" pos:start="35:9" pos:end="35:58">/* TODO : For SH7751, SCIF mask should be 0xfb. */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:71"><expr pos:start="37:9" pos:end="37:70"><name pos:start="37:9" pos:end="37:14"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:14">scr</name></name> <operator pos:start="37:16" pos:end="37:16">=</operator> <name pos:start="37:18" pos:end="37:20">val</name> <operator pos:start="37:22" pos:end="37:22">&amp;</operator> <operator pos:start="37:24" pos:end="37:24">(</operator><ternary pos:start="37:25" pos:end="37:69"><condition pos:start="37:25" pos:end="37:57"><expr pos:start="37:25" pos:end="37:55"><operator pos:start="37:25" pos:end="37:25">(</operator><name pos:start="37:26" pos:end="37:32"><name pos:start="37:26" pos:end="37:26">s</name><operator pos:start="37:27" pos:end="37:28">-&gt;</operator><name pos:start="37:29" pos:end="37:32">feat</name></name> <operator pos:start="37:34" pos:end="37:34">&amp;</operator> <name pos:start="37:36" pos:end="37:54">SH_SERIAL_FEAT_SCIF</name><operator pos:start="37:55" pos:end="37:55">)</operator></expr> ?</condition><then pos:start="37:59" pos:end="37:62"> <expr pos:start="37:59" pos:end="37:62"><literal type="number" pos:start="37:59" pos:end="37:62">0xfa</literal></expr> </then><else pos:start="37:64" pos:end="37:69">: <expr pos:start="37:66" pos:end="37:69"><literal type="number" pos:start="37:66" pos:end="37:69">0xff</literal></expr></else></ternary><operator pos:start="37:70" pos:end="37:70">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="41:44"><if pos:start="39:9" pos:end="41:44">if <condition pos:start="39:12" pos:end="39:30">(<expr pos:start="39:13" pos:end="39:29"><operator pos:start="39:13" pos:end="39:13">!</operator><operator pos:start="39:14" pos:end="39:14">(</operator><name pos:start="39:15" pos:end="39:17">val</name> <operator pos:start="39:19" pos:end="39:19">&amp;</operator> <operator pos:start="39:21" pos:end="39:21">(</operator><literal type="number" pos:start="39:22" pos:end="39:22">1</literal> <operator pos:start="39:24" pos:end="39:25">&lt;&lt;</operator> <literal type="number" pos:start="39:27" pos:end="39:27">5</literal><operator pos:start="39:28" pos:end="39:28">)</operator><operator pos:start="39:29" pos:end="39:29">)</operator></expr>)</condition><block type="pseudo" pos:start="41:13" pos:end="41:44"><block_content pos:start="41:13" pos:end="41:44">

            <expr_stmt pos:start="41:13" pos:end="41:44"><expr pos:start="41:13" pos:end="41:43"><name pos:start="41:13" pos:end="41:20"><name pos:start="41:13" pos:end="41:13">s</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:20">flags</name></name> <operator pos:start="41:22" pos:end="41:23">|=</operator> <name pos:start="41:25" pos:end="41:43">SH_SERIAL_FLAG_TEND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="43:9" pos:end="47:9"><if pos:start="43:9" pos:end="47:9">if <condition pos:start="43:12" pos:end="43:54">(<expr pos:start="43:13" pos:end="43:53"><operator pos:start="43:13" pos:end="43:13">(</operator><name pos:start="43:14" pos:end="43:20"><name pos:start="43:14" pos:end="43:14">s</name><operator pos:start="43:15" pos:end="43:16">-&gt;</operator><name pos:start="43:17" pos:end="43:20">feat</name></name> <operator pos:start="43:22" pos:end="43:22">&amp;</operator> <name pos:start="43:24" pos:end="43:42">SH_SERIAL_FEAT_SCIF</name><operator pos:start="43:43" pos:end="43:43">)</operator> <operator pos:start="43:45" pos:end="43:46">&amp;&amp;</operator> <name pos:start="43:48" pos:end="43:53"><name pos:start="43:48" pos:end="43:48">s</name><operator pos:start="43:49" pos:end="43:50">-&gt;</operator><name pos:start="43:51" pos:end="43:53">txi</name></name></expr>)</condition> <block pos:start="43:56" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:49">

	    <expr_stmt pos:start="45:13" pos:end="45:49"><expr pos:start="45:13" pos:end="45:48"><call pos:start="45:13" pos:end="45:48"><name pos:start="45:13" pos:end="45:24">qemu_set_irq</name><argument_list pos:start="45:25" pos:end="45:48">(<argument pos:start="45:26" pos:end="45:31"><expr pos:start="45:26" pos:end="45:31"><name pos:start="45:26" pos:end="45:31"><name pos:start="45:26" pos:end="45:26">s</name><operator pos:start="45:27" pos:end="45:28">-&gt;</operator><name pos:start="45:29" pos:end="45:31">txi</name></name></expr></argument>, <argument pos:start="45:34" pos:end="45:47"><expr pos:start="45:34" pos:end="45:47"><name pos:start="45:34" pos:end="45:36">val</name> <operator pos:start="45:38" pos:end="45:38">&amp;</operator> <operator pos:start="45:40" pos:end="45:40">(</operator><literal type="number" pos:start="45:41" pos:end="45:41">1</literal> <operator pos:start="45:43" pos:end="45:44">&lt;&lt;</operator> <literal type="number" pos:start="45:46" pos:end="45:46">7</literal><operator pos:start="45:47" pos:end="45:47">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:30">(<expr pos:start="49:13" pos:end="49:29"><operator pos:start="49:13" pos:end="49:13">!</operator><operator pos:start="49:14" pos:end="49:14">(</operator><name pos:start="49:15" pos:end="49:17">val</name> <operator pos:start="49:19" pos:end="49:19">&amp;</operator> <operator pos:start="49:21" pos:end="49:21">(</operator><literal type="number" pos:start="49:22" pos:end="49:22">1</literal> <operator pos:start="49:24" pos:end="49:25">&lt;&lt;</operator> <literal type="number" pos:start="49:27" pos:end="49:27">6</literal><operator pos:start="49:28" pos:end="49:28">)</operator><operator pos:start="49:29" pos:end="49:29">)</operator></expr>)</condition> <block pos:start="49:32" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:36">

	    <expr_stmt pos:start="51:13" pos:end="51:36"><expr pos:start="51:13" pos:end="51:35"><call pos:start="51:13" pos:end="51:35"><name pos:start="51:13" pos:end="51:24">qemu_set_irq</name><argument_list pos:start="51:25" pos:end="51:35">(<argument pos:start="51:26" pos:end="51:31"><expr pos:start="51:26" pos:end="51:31"><name pos:start="51:26" pos:end="51:31"><name pos:start="51:26" pos:end="51:26">s</name><operator pos:start="51:27" pos:end="51:28">-&gt;</operator><name pos:start="51:29" pos:end="51:31">rxi</name></name></expr></argument>, <argument pos:start="51:34" pos:end="51:34"><expr pos:start="51:34" pos:end="51:34"><literal type="number" pos:start="51:34" pos:end="51:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="55:9" pos:end="55:15">return;</return>

    <case pos:start="57:5" pos:end="57:14">case <expr pos:start="57:10" pos:end="57:13"><literal type="number" pos:start="57:10" pos:end="57:13">0x0c</literal></expr>:</case> <comment type="block" pos:start="57:16" pos:end="57:31">/* FTDR / TDR */</comment>

        <if_stmt pos:start="59:9" pos:end="65:9"><if pos:start="59:9" pos:end="65:9">if <condition pos:start="59:12" pos:end="59:19">(<expr pos:start="59:13" pos:end="59:18"><name pos:start="59:13" pos:end="59:18"><name pos:start="59:13" pos:end="59:13">s</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:18">chr</name></name></expr>)</condition> <block pos:start="59:21" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:43">

            <expr_stmt pos:start="61:13" pos:end="61:21"><expr pos:start="61:13" pos:end="61:20"><name pos:start="61:13" pos:end="61:14">ch</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <name pos:start="61:18" pos:end="61:20">val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:43"><expr pos:start="63:13" pos:end="63:42"><call pos:start="63:13" pos:end="63:42"><name pos:start="63:13" pos:end="63:26">qemu_chr_write</name><argument_list pos:start="63:27" pos:end="63:42">(<argument pos:start="63:28" pos:end="63:33"><expr pos:start="63:28" pos:end="63:33"><name pos:start="63:28" pos:end="63:33"><name pos:start="63:28" pos:end="63:28">s</name><operator pos:start="63:29" pos:end="63:30">-&gt;</operator><name pos:start="63:31" pos:end="63:33">chr</name></name></expr></argument>, <argument pos:start="63:36" pos:end="63:38"><expr pos:start="63:36" pos:end="63:38"><operator pos:start="63:36" pos:end="63:36">&amp;</operator><name pos:start="63:37" pos:end="63:38">ch</name></expr></argument>, <argument pos:start="63:41" pos:end="63:41"><expr pos:start="63:41" pos:end="63:41"><literal type="number" pos:start="63:41" pos:end="63:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="67:9" pos:end="67:20"><expr pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:13"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:13">dr</name></name> <operator pos:start="67:15" pos:end="67:15">=</operator> <name pos:start="67:17" pos:end="67:19">val</name></expr>;</expr_stmt>

	<expr_stmt pos:start="69:9" pos:end="69:40"><expr pos:start="69:9" pos:end="69:39"><name pos:start="69:9" pos:end="69:16"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:16">flags</name></name> <operator pos:start="69:18" pos:end="69:19">&amp;=</operator> <operator pos:start="69:21" pos:end="69:21">~</operator><name pos:start="69:22" pos:end="69:39">SH_SERIAL_FLAG_TDE</name></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="82:0">return;</return>

<cpp:if pos:start="73:1" pos:end="73:5">#<cpp:directive pos:start="73:2" pos:end="73:3">if</cpp:directive> <expr pos:start="73:5" pos:end="73:5"><literal type="number" pos:start="73:5" pos:end="73:5">0</literal></expr></cpp:if>

    case 0x14: <comment type="block" pos:start="75:16" pos:end="75:31">/* FRDR / RDR */</comment>

        ret = 0;

        break;

<cpp:endif pos:start="81:1" pos:end="81:6">#<cpp:directive pos:start="81:2" pos:end="81:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></switch>

    <if_stmt pos:start="85:5" pos:end="211:5"><if pos:start="85:5" pos:end="181:5">if <condition pos:start="85:8" pos:end="85:38">(<expr pos:start="85:9" pos:end="85:37"><name pos:start="85:9" pos:end="85:15"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:15">feat</name></name> <operator pos:start="85:17" pos:end="85:17">&amp;</operator> <name pos:start="85:19" pos:end="85:37">SH_SERIAL_FEAT_SCIF</name></expr>)</condition> <block pos:start="85:40" pos:end="181:5">{<block_content pos:start="87:9" pos:end="179:9">

        <switch pos:start="87:9" pos:end="179:9">switch<condition pos:start="87:15" pos:end="87:20">(<expr pos:start="87:16" pos:end="87:19"><name pos:start="87:16" pos:end="87:19">offs</name></expr>)</condition> <block pos:start="87:22" pos:end="179:9">{<block_content pos:start="89:9" pos:end="177:19">

        <case pos:start="89:9" pos:end="89:18">case <expr pos:start="89:14" pos:end="89:17"><literal type="number" pos:start="89:14" pos:end="89:17">0x10</literal></expr>:</case> <comment type="block" pos:start="89:20" pos:end="89:28">/* FSR */</comment>

            <if_stmt pos:start="91:13" pos:end="93:49"><if pos:start="91:13" pos:end="93:49">if <condition pos:start="91:16" pos:end="91:34">(<expr pos:start="91:17" pos:end="91:33"><operator pos:start="91:17" pos:end="91:17">!</operator><operator pos:start="91:18" pos:end="91:18">(</operator><name pos:start="91:19" pos:end="91:21">val</name> <operator pos:start="91:23" pos:end="91:23">&amp;</operator> <operator pos:start="91:25" pos:end="91:25">(</operator><literal type="number" pos:start="91:26" pos:end="91:26">1</literal> <operator pos:start="91:28" pos:end="91:29">&lt;&lt;</operator> <literal type="number" pos:start="91:31" pos:end="91:31">6</literal><operator pos:start="91:32" pos:end="91:32">)</operator><operator pos:start="91:33" pos:end="91:33">)</operator></expr>)</condition><block type="pseudo" pos:start="93:17" pos:end="93:49"><block_content pos:start="93:17" pos:end="93:49">

                <expr_stmt pos:start="93:17" pos:end="93:49"><expr pos:start="93:17" pos:end="93:48"><name pos:start="93:17" pos:end="93:24"><name pos:start="93:17" pos:end="93:17">s</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:24">flags</name></name> <operator pos:start="93:26" pos:end="93:27">&amp;=</operator> <operator pos:start="93:29" pos:end="93:29">~</operator><name pos:start="93:30" pos:end="93:48">SH_SERIAL_FLAG_TEND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="95:13" pos:end="97:48"><if pos:start="95:13" pos:end="97:48">if <condition pos:start="95:16" pos:end="95:34">(<expr pos:start="95:17" pos:end="95:33"><operator pos:start="95:17" pos:end="95:17">!</operator><operator pos:start="95:18" pos:end="95:18">(</operator><name pos:start="95:19" pos:end="95:21">val</name> <operator pos:start="95:23" pos:end="95:23">&amp;</operator> <operator pos:start="95:25" pos:end="95:25">(</operator><literal type="number" pos:start="95:26" pos:end="95:26">1</literal> <operator pos:start="95:28" pos:end="95:29">&lt;&lt;</operator> <literal type="number" pos:start="95:31" pos:end="95:31">5</literal><operator pos:start="95:32" pos:end="95:32">)</operator><operator pos:start="95:33" pos:end="95:33">)</operator></expr>)</condition><block type="pseudo" pos:start="97:17" pos:end="97:48"><block_content pos:start="97:17" pos:end="97:48">

                <expr_stmt pos:start="97:17" pos:end="97:48"><expr pos:start="97:17" pos:end="97:47"><name pos:start="97:17" pos:end="97:24"><name pos:start="97:17" pos:end="97:17">s</name><operator pos:start="97:18" pos:end="97:19">-&gt;</operator><name pos:start="97:20" pos:end="97:24">flags</name></name> <operator pos:start="97:26" pos:end="97:27">&amp;=</operator> <operator pos:start="97:29" pos:end="97:29">~</operator><name pos:start="97:30" pos:end="97:47">SH_SERIAL_FLAG_TDE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="99:13" pos:end="101:48"><if pos:start="99:13" pos:end="101:48">if <condition pos:start="99:16" pos:end="99:34">(<expr pos:start="99:17" pos:end="99:33"><operator pos:start="99:17" pos:end="99:17">!</operator><operator pos:start="99:18" pos:end="99:18">(</operator><name pos:start="99:19" pos:end="99:21">val</name> <operator pos:start="99:23" pos:end="99:23">&amp;</operator> <operator pos:start="99:25" pos:end="99:25">(</operator><literal type="number" pos:start="99:26" pos:end="99:26">1</literal> <operator pos:start="99:28" pos:end="99:29">&lt;&lt;</operator> <literal type="number" pos:start="99:31" pos:end="99:31">4</literal><operator pos:start="99:32" pos:end="99:32">)</operator><operator pos:start="99:33" pos:end="99:33">)</operator></expr>)</condition><block type="pseudo" pos:start="101:17" pos:end="101:48"><block_content pos:start="101:17" pos:end="101:48">

                <expr_stmt pos:start="101:17" pos:end="101:48"><expr pos:start="101:17" pos:end="101:47"><name pos:start="101:17" pos:end="101:24"><name pos:start="101:17" pos:end="101:17">s</name><operator pos:start="101:18" pos:end="101:19">-&gt;</operator><name pos:start="101:20" pos:end="101:24">flags</name></name> <operator pos:start="101:26" pos:end="101:27">&amp;=</operator> <operator pos:start="101:29" pos:end="101:29">~</operator><name pos:start="101:30" pos:end="101:47">SH_SERIAL_FLAG_BRK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="103:13" pos:end="105:48"><if pos:start="103:13" pos:end="105:48">if <condition pos:start="103:16" pos:end="103:34">(<expr pos:start="103:17" pos:end="103:33"><operator pos:start="103:17" pos:end="103:17">!</operator><operator pos:start="103:18" pos:end="103:18">(</operator><name pos:start="103:19" pos:end="103:21">val</name> <operator pos:start="103:23" pos:end="103:23">&amp;</operator> <operator pos:start="103:25" pos:end="103:25">(</operator><literal type="number" pos:start="103:26" pos:end="103:26">1</literal> <operator pos:start="103:28" pos:end="103:29">&lt;&lt;</operator> <literal type="number" pos:start="103:31" pos:end="103:31">1</literal><operator pos:start="103:32" pos:end="103:32">)</operator><operator pos:start="103:33" pos:end="103:33">)</operator></expr>)</condition><block type="pseudo" pos:start="105:17" pos:end="105:48"><block_content pos:start="105:17" pos:end="105:48">

                <expr_stmt pos:start="105:17" pos:end="105:48"><expr pos:start="105:17" pos:end="105:47"><name pos:start="105:17" pos:end="105:24"><name pos:start="105:17" pos:end="105:17">s</name><operator pos:start="105:18" pos:end="105:19">-&gt;</operator><name pos:start="105:20" pos:end="105:24">flags</name></name> <operator pos:start="105:26" pos:end="105:27">&amp;=</operator> <operator pos:start="105:29" pos:end="105:29">~</operator><name pos:start="105:30" pos:end="105:47">SH_SERIAL_FLAG_RDF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="107:13" pos:end="109:47"><if pos:start="107:13" pos:end="109:47">if <condition pos:start="107:16" pos:end="107:34">(<expr pos:start="107:17" pos:end="107:33"><operator pos:start="107:17" pos:end="107:17">!</operator><operator pos:start="107:18" pos:end="107:18">(</operator><name pos:start="107:19" pos:end="107:21">val</name> <operator pos:start="107:23" pos:end="107:23">&amp;</operator> <operator pos:start="107:25" pos:end="107:25">(</operator><literal type="number" pos:start="107:26" pos:end="107:26">1</literal> <operator pos:start="107:28" pos:end="107:29">&lt;&lt;</operator> <literal type="number" pos:start="107:31" pos:end="107:31">0</literal><operator pos:start="107:32" pos:end="107:32">)</operator><operator pos:start="107:33" pos:end="107:33">)</operator></expr>)</condition><block type="pseudo" pos:start="109:17" pos:end="109:47"><block_content pos:start="109:17" pos:end="109:47">

                <expr_stmt pos:start="109:17" pos:end="109:47"><expr pos:start="109:17" pos:end="109:46"><name pos:start="109:17" pos:end="109:24"><name pos:start="109:17" pos:end="109:17">s</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:24">flags</name></name> <operator pos:start="109:26" pos:end="109:27">&amp;=</operator> <operator pos:start="109:29" pos:end="109:29">~</operator><name pos:start="109:30" pos:end="109:46">SH_SERIAL_FLAG_DR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="113:13" pos:end="121:13"><if pos:start="113:13" pos:end="121:13">if <condition pos:start="113:16" pos:end="113:55">(<expr pos:start="113:17" pos:end="113:54"><operator pos:start="113:17" pos:end="113:17">!</operator><operator pos:start="113:18" pos:end="113:18">(</operator><name pos:start="113:19" pos:end="113:21">val</name> <operator pos:start="113:23" pos:end="113:23">&amp;</operator> <operator pos:start="113:25" pos:end="113:25">(</operator><literal type="number" pos:start="113:26" pos:end="113:26">1</literal> <operator pos:start="113:28" pos:end="113:29">&lt;&lt;</operator> <literal type="number" pos:start="113:31" pos:end="113:31">1</literal><operator pos:start="113:32" pos:end="113:32">)</operator><operator pos:start="113:33" pos:end="113:33">)</operator> <operator pos:start="113:35" pos:end="113:36">||</operator> <operator pos:start="113:38" pos:end="113:38">!</operator><operator pos:start="113:39" pos:end="113:39">(</operator><name pos:start="113:40" pos:end="113:42">val</name> <operator pos:start="113:44" pos:end="113:44">&amp;</operator> <operator pos:start="113:46" pos:end="113:46">(</operator><literal type="number" pos:start="113:47" pos:end="113:47">1</literal> <operator pos:start="113:49" pos:end="113:50">&lt;&lt;</operator> <literal type="number" pos:start="113:52" pos:end="113:52">0</literal><operator pos:start="113:53" pos:end="113:53">)</operator><operator pos:start="113:54" pos:end="113:54">)</operator></expr>)</condition> <block pos:start="113:57" pos:end="121:13">{<block_content pos:start="115:17" pos:end="119:17">

                <if_stmt pos:start="115:17" pos:end="119:17"><if pos:start="115:17" pos:end="119:17">if <condition pos:start="115:20" pos:end="115:27">(<expr pos:start="115:21" pos:end="115:26"><name pos:start="115:21" pos:end="115:26"><name pos:start="115:21" pos:end="115:21">s</name><operator pos:start="115:22" pos:end="115:23">-&gt;</operator><name pos:start="115:24" pos:end="115:26">rxi</name></name></expr>)</condition> <block pos:start="115:29" pos:end="119:17">{<block_content pos:start="117:21" pos:end="117:44">

                    <expr_stmt pos:start="117:21" pos:end="117:44"><expr pos:start="117:21" pos:end="117:43"><call pos:start="117:21" pos:end="117:43"><name pos:start="117:21" pos:end="117:32">qemu_set_irq</name><argument_list pos:start="117:33" pos:end="117:43">(<argument pos:start="117:34" pos:end="117:39"><expr pos:start="117:34" pos:end="117:39"><name pos:start="117:34" pos:end="117:39"><name pos:start="117:34" pos:end="117:34">s</name><operator pos:start="117:35" pos:end="117:36">-&gt;</operator><name pos:start="117:37" pos:end="117:39">rxi</name></name></expr></argument>, <argument pos:start="117:42" pos:end="117:42"><expr pos:start="117:42" pos:end="117:42"><literal type="number" pos:start="117:42" pos:end="117:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <return pos:start="123:13" pos:end="123:19">return;</return>

        <case pos:start="125:9" pos:end="125:18">case <expr pos:start="125:14" pos:end="125:17"><literal type="number" pos:start="125:14" pos:end="125:17">0x18</literal></expr>:</case> <comment type="block" pos:start="125:20" pos:end="125:28">/* FCR */</comment>

            <expr_stmt pos:start="127:13" pos:end="127:25"><expr pos:start="127:13" pos:end="127:24"><name pos:start="127:13" pos:end="127:18"><name pos:start="127:13" pos:end="127:13">s</name><operator pos:start="127:14" pos:end="127:15">-&gt;</operator><name pos:start="127:16" pos:end="127:18">fcr</name></name> <operator pos:start="127:20" pos:end="127:20">=</operator> <name pos:start="127:22" pos:end="127:24">val</name></expr>;</expr_stmt>

            <switch pos:start="129:13" pos:end="155:13">switch <condition pos:start="129:20" pos:end="129:35">(<expr pos:start="129:21" pos:end="129:34"><operator pos:start="129:21" pos:end="129:21">(</operator><name pos:start="129:22" pos:end="129:24">val</name> <operator pos:start="129:26" pos:end="129:27">&gt;&gt;</operator> <literal type="number" pos:start="129:29" pos:end="129:29">6</literal><operator pos:start="129:30" pos:end="129:30">)</operator> <operator pos:start="129:32" pos:end="129:32">&amp;</operator> <literal type="number" pos:start="129:34" pos:end="129:34">3</literal></expr>)</condition> <block pos:start="129:37" pos:end="155:13">{<block_content pos:start="131:13" pos:end="153:22">

            <case pos:start="131:13" pos:end="131:19">case <expr pos:start="131:18" pos:end="131:18"><literal type="number" pos:start="131:18" pos:end="131:18">0</literal></expr>:</case>

                <expr_stmt pos:start="133:17" pos:end="133:28"><expr pos:start="133:17" pos:end="133:27"><name pos:start="133:17" pos:end="133:23"><name pos:start="133:17" pos:end="133:17">s</name><operator pos:start="133:18" pos:end="133:19">-&gt;</operator><name pos:start="133:20" pos:end="133:23">rtrg</name></name> <operator pos:start="133:25" pos:end="133:25">=</operator> <literal type="number" pos:start="133:27" pos:end="133:27">1</literal></expr>;</expr_stmt>

                <break pos:start="135:17" pos:end="135:22">break;</break>

            <case pos:start="137:13" pos:end="137:19">case <expr pos:start="137:18" pos:end="137:18"><literal type="number" pos:start="137:18" pos:end="137:18">1</literal></expr>:</case>

                <expr_stmt pos:start="139:17" pos:end="139:28"><expr pos:start="139:17" pos:end="139:27"><name pos:start="139:17" pos:end="139:23"><name pos:start="139:17" pos:end="139:17">s</name><operator pos:start="139:18" pos:end="139:19">-&gt;</operator><name pos:start="139:20" pos:end="139:23">rtrg</name></name> <operator pos:start="139:25" pos:end="139:25">=</operator> <literal type="number" pos:start="139:27" pos:end="139:27">4</literal></expr>;</expr_stmt>

                <break pos:start="141:17" pos:end="141:22">break;</break>

            <case pos:start="143:13" pos:end="143:19">case <expr pos:start="143:18" pos:end="143:18"><literal type="number" pos:start="143:18" pos:end="143:18">2</literal></expr>:</case>

                <expr_stmt pos:start="145:17" pos:end="145:28"><expr pos:start="145:17" pos:end="145:27"><name pos:start="145:17" pos:end="145:23"><name pos:start="145:17" pos:end="145:17">s</name><operator pos:start="145:18" pos:end="145:19">-&gt;</operator><name pos:start="145:20" pos:end="145:23">rtrg</name></name> <operator pos:start="145:25" pos:end="145:25">=</operator> <literal type="number" pos:start="145:27" pos:end="145:27">8</literal></expr>;</expr_stmt>

                <break pos:start="147:17" pos:end="147:22">break;</break>

            <case pos:start="149:13" pos:end="149:19">case <expr pos:start="149:18" pos:end="149:18"><literal type="number" pos:start="149:18" pos:end="149:18">3</literal></expr>:</case>

                <expr_stmt pos:start="151:17" pos:end="151:29"><expr pos:start="151:17" pos:end="151:28"><name pos:start="151:17" pos:end="151:23"><name pos:start="151:17" pos:end="151:17">s</name><operator pos:start="151:18" pos:end="151:19">-&gt;</operator><name pos:start="151:20" pos:end="151:23">rtrg</name></name> <operator pos:start="151:25" pos:end="151:25">=</operator> <literal type="number" pos:start="151:27" pos:end="151:28">14</literal></expr>;</expr_stmt>

                <break pos:start="153:17" pos:end="153:22">break;</break>

            </block_content>}</block></switch>

            <if_stmt pos:start="157:13" pos:end="163:13"><if pos:start="157:13" pos:end="163:13">if <condition pos:start="157:16" pos:end="157:31">(<expr pos:start="157:17" pos:end="157:30"><name pos:start="157:17" pos:end="157:19">val</name> <operator pos:start="157:21" pos:end="157:21">&amp;</operator> <operator pos:start="157:23" pos:end="157:23">(</operator><literal type="number" pos:start="157:24" pos:end="157:24">1</literal> <operator pos:start="157:26" pos:end="157:27">&lt;&lt;</operator> <literal type="number" pos:start="157:29" pos:end="157:29">1</literal><operator pos:start="157:30" pos:end="157:30">)</operator></expr>)</condition> <block pos:start="157:33" pos:end="163:13">{<block_content pos:start="159:17" pos:end="161:35">

                <expr_stmt pos:start="159:17" pos:end="159:40"><expr pos:start="159:17" pos:end="159:39"><call pos:start="159:17" pos:end="159:39"><name pos:start="159:17" pos:end="159:36">sh_serial_clear_fifo</name><argument_list pos:start="159:37" pos:end="159:39">(<argument pos:start="159:38" pos:end="159:38"><expr pos:start="159:38" pos:end="159:38"><name pos:start="159:38" pos:end="159:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="161:17" pos:end="161:35"><expr pos:start="161:17" pos:end="161:34"><name pos:start="161:17" pos:end="161:21"><name pos:start="161:17" pos:end="161:17">s</name><operator pos:start="161:18" pos:end="161:19">-&gt;</operator><name pos:start="161:20" pos:end="161:21">sr</name></name> <operator pos:start="161:23" pos:end="161:24">&amp;=</operator> <operator pos:start="161:26" pos:end="161:26">~</operator><operator pos:start="161:27" pos:end="161:27">(</operator><literal type="number" pos:start="161:28" pos:end="161:28">1</literal> <operator pos:start="161:30" pos:end="161:31">&lt;&lt;</operator> <literal type="number" pos:start="161:33" pos:end="161:33">1</literal><operator pos:start="161:34" pos:end="161:34">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <return pos:start="167:13" pos:end="167:19">return;</return>

        <case pos:start="169:9" pos:end="169:18">case <expr pos:start="169:14" pos:end="169:17"><literal type="number" pos:start="169:14" pos:end="169:17">0x20</literal></expr>:</case> <comment type="block" pos:start="169:20" pos:end="169:29">/* SPTR */</comment>

            <expr_stmt pos:start="171:13" pos:end="171:33"><expr pos:start="171:13" pos:end="171:32"><name pos:start="171:13" pos:end="171:19"><name pos:start="171:13" pos:end="171:13">s</name><operator pos:start="171:14" pos:end="171:15">-&gt;</operator><name pos:start="171:16" pos:end="171:19">sptr</name></name> <operator pos:start="171:21" pos:end="171:21">=</operator> <name pos:start="171:23" pos:end="171:25">val</name> <operator pos:start="171:27" pos:end="171:27">&amp;</operator> <literal type="number" pos:start="171:29" pos:end="171:32">0xf3</literal></expr>;</expr_stmt>

            <return pos:start="173:13" pos:end="173:19">return;</return>

        <case pos:start="175:9" pos:end="175:18">case <expr pos:start="175:14" pos:end="175:17"><literal type="number" pos:start="175:14" pos:end="175:17">0x24</literal></expr>:</case> <comment type="block" pos:start="175:20" pos:end="175:28">/* LSR */</comment>

            <return pos:start="177:13" pos:end="177:19">return;</return>

        </block_content>}</block></switch>

    </block_content>}</block></if>

    <else pos:start="183:5" pos:end="211:5">else <block pos:start="183:10" pos:end="211:5">{<block_content>

<cpp:if pos:start="185:1" pos:end="185:5">#<cpp:directive pos:start="185:2" pos:end="185:3">if</cpp:directive> <expr pos:start="185:5" pos:end="185:5"><literal type="number" pos:start="185:5" pos:end="185:5">0</literal></expr></cpp:if>

        switch(offs) {

        case 0x0c:

            ret = s-&gt;dr;

            break;

        case 0x10:

            ret = 0;

            break;

        case 0x1c:

            ret = s-&gt;sptr;

            break;

        }

<cpp:endif pos:start="209:1" pos:end="209:6">#<cpp:directive pos:start="209:2" pos:end="209:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="215:5" pos:end="215:70"><expr pos:start="215:5" pos:end="215:69"><call pos:start="215:5" pos:end="215:69"><name pos:start="215:5" pos:end="215:11">fprintf</name><argument_list pos:start="215:12" pos:end="215:69">(<argument pos:start="215:13" pos:end="215:18"><expr pos:start="215:13" pos:end="215:18"><name pos:start="215:13" pos:end="215:18">stderr</name></expr></argument>, <argument pos:start="215:21" pos:end="215:62"><expr pos:start="215:21" pos:end="215:62"><literal type="string" pos:start="215:21" pos:end="215:62">"sh_serial: unsupported write to 0x%02x\n"</literal></expr></argument>, <argument pos:start="215:65" pos:end="215:68"><expr pos:start="215:65" pos:end="215:68"><name pos:start="215:65" pos:end="215:68">offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:14"><expr pos:start="217:5" pos:end="217:13"><call pos:start="217:5" pos:end="217:13"><name pos:start="217:5" pos:end="217:10">assert</name><argument_list pos:start="217:11" pos:end="217:13">(<argument pos:start="217:12" pos:end="217:12"><expr pos:start="217:12" pos:end="217:12"><literal type="number" pos:start="217:12" pos:end="217:12">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
