<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25080.c" pos:tabs="8"><function pos:start="1:1" pos:end="681:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">smc_decode_stream</name><parameter_list pos:start="1:30" pos:end="1:44">(<parameter pos:start="1:31" pos:end="1:43"><decl pos:start="1:31" pos:end="1:43"><type pos:start="1:31" pos:end="1:42"><name pos:start="1:31" pos:end="1:40">SmcContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="681:1">{<block_content pos:start="5:5" pos:end="679:5">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">width</name> <init pos:start="5:15" pos:end="5:31">= <expr pos:start="5:17" pos:end="5:31"><name pos:start="5:17" pos:end="5:31"><name pos:start="5:17" pos:end="5:17">s</name><operator pos:start="5:18" pos:end="5:19">-&gt;</operator><name pos:start="5:20" pos:end="5:24">avctx</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:31">width</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">height</name> <init pos:start="7:16" pos:end="7:33">= <expr pos:start="7:18" pos:end="7:33"><name pos:start="7:18" pos:end="7:33"><name pos:start="7:18" pos:end="7:18">s</name><operator pos:start="7:19" pos:end="7:20">-&gt;</operator><name pos:start="7:21" pos:end="7:25">avctx</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">height</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">stride</name> <init pos:start="9:16" pos:end="9:37">= <expr pos:start="9:18" pos:end="9:37"><name pos:start="9:18" pos:end="9:37"><name pos:start="9:18" pos:end="9:18">s</name><operator pos:start="9:19" pos:end="9:20">-&gt;</operator><name pos:start="9:21" pos:end="9:25">frame</name><operator pos:start="9:26" pos:end="9:26">.</operator><name pos:start="9:27" pos:end="9:34">linesize</name><index pos:start="9:35" pos:end="9:37">[<expr pos:start="9:36" pos:end="9:36"><literal type="number" pos:start="9:36" pos:end="9:36">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:18">stream_ptr</name> <init pos:start="13:20" pos:end="13:22">= <expr pos:start="13:22" pos:end="13:22"><literal type="number" pos:start="13:22" pos:end="13:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:18">chunk_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:17">char</name></type> <name pos:start="17:19" pos:end="17:24">opcode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:16">n_blocks</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:29"><decl pos:start="21:5" pos:end="21:28"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:12">unsigned</name> <name pos:start="21:14" pos:end="21:16">int</name></type> <name pos:start="21:18" pos:end="21:28">color_flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:31"><decl pos:start="23:5" pos:end="23:30"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:12">unsigned</name> <name pos:start="23:14" pos:end="23:16">int</name></type> <name pos:start="23:18" pos:end="23:30">color_flags_a</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:31"><decl pos:start="25:5" pos:end="25:30"><type pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:12">unsigned</name> <name pos:start="25:14" pos:end="25:16">int</name></type> <name pos:start="25:18" pos:end="25:30">color_flags_b</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:27"><decl pos:start="27:5" pos:end="27:26"><type pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:12">unsigned</name> <name pos:start="27:14" pos:end="27:16">int</name></type> <name pos:start="27:18" pos:end="27:26">flag_mask</name></decl>;</decl_stmt>



    <decl_stmt pos:start="31:5" pos:end="31:45"><decl pos:start="31:5" pos:end="31:44"><type pos:start="31:5" pos:end="31:19"><name pos:start="31:5" pos:end="31:12">unsigned</name> <name pos:start="31:14" pos:end="31:17">char</name> <modifier pos:start="31:19" pos:end="31:19">*</modifier></type><name pos:start="31:20" pos:end="31:25">pixels</name> <init pos:start="31:27" pos:end="31:44">= <expr pos:start="31:29" pos:end="31:44"><name pos:start="31:29" pos:end="31:44"><name pos:start="31:29" pos:end="31:29">s</name><operator pos:start="31:30" pos:end="31:31">-&gt;</operator><name pos:start="31:32" pos:end="31:36">frame</name><operator pos:start="31:37" pos:end="31:37">.</operator><name pos:start="31:38" pos:end="31:41">data</name><index pos:start="31:42" pos:end="31:44">[<expr pos:start="31:43" pos:end="31:43"><literal type="number" pos:start="31:43" pos:end="31:43">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="35:5" pos:end="35:51"><decl pos:start="35:5" pos:end="35:50"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:18">image_size</name> <init pos:start="35:20" pos:end="35:50">= <expr pos:start="35:22" pos:end="35:50"><name pos:start="35:22" pos:end="35:27">height</name> <operator pos:start="35:29" pos:end="35:29">*</operator> <name pos:start="35:31" pos:end="35:50"><name pos:start="35:31" pos:end="35:31">s</name><operator pos:start="35:32" pos:end="35:33">-&gt;</operator><name pos:start="35:34" pos:end="35:38">frame</name><operator pos:start="35:39" pos:end="35:39">.</operator><name pos:start="35:40" pos:end="35:47">linesize</name><index pos:start="35:48" pos:end="35:50">[<expr pos:start="35:49" pos:end="35:49"><literal type="number" pos:start="35:49" pos:end="35:49">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:20"><decl pos:start="37:5" pos:end="37:19"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:15">row_ptr</name> <init pos:start="37:17" pos:end="37:19">= <expr pos:start="37:19" pos:end="37:19"><literal type="number" pos:start="37:19" pos:end="37:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:22"><decl pos:start="39:5" pos:end="39:21"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:17">pixel_ptr</name> <init pos:start="39:19" pos:end="39:21">= <expr pos:start="39:21" pos:end="39:21"><literal type="number" pos:start="39:21" pos:end="39:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:25"><decl pos:start="41:5" pos:end="41:15"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:15">pixel_x</name></decl>, <decl pos:start="41:18" pos:end="41:24"><type ref="prev" pos:start="41:5" pos:end="41:7"/><name pos:start="41:18" pos:end="41:24">pixel_y</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:29"><decl pos:start="43:5" pos:end="43:28"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:15">row_inc</name> <init pos:start="43:17" pos:end="43:28">= <expr pos:start="43:19" pos:end="43:28"><name pos:start="43:19" pos:end="43:24">stride</name> <operator pos:start="43:26" pos:end="43:26">-</operator> <literal type="number" pos:start="43:28" pos:end="43:28">4</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:18"><decl pos:start="45:5" pos:end="45:17"><type pos:start="45:5" pos:end="45:7"><name pos:start="45:5" pos:end="45:7">int</name></type> <name pos:start="45:9" pos:end="45:17">block_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:23"><decl pos:start="47:5" pos:end="47:22"><type pos:start="47:5" pos:end="47:7"><name pos:start="47:5" pos:end="47:7">int</name></type> <name pos:start="47:9" pos:end="47:22">prev_block_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:41"><decl pos:start="49:5" pos:end="49:23"><type pos:start="49:5" pos:end="49:7"><name pos:start="49:5" pos:end="49:7">int</name></type> <name pos:start="49:9" pos:end="49:23">prev_block_ptr1</name></decl>, <decl pos:start="49:26" pos:end="49:40"><type ref="prev" pos:start="49:5" pos:end="49:7"/><name pos:start="49:26" pos:end="49:40">prev_block_ptr2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:24"><decl pos:start="51:5" pos:end="51:23"><type pos:start="51:5" pos:end="51:7"><name pos:start="51:5" pos:end="51:7">int</name></type> <name pos:start="51:9" pos:end="51:23">prev_block_flag</name></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:21"><decl pos:start="53:5" pos:end="53:20"><type pos:start="53:5" pos:end="53:7"><name pos:start="53:5" pos:end="53:7">int</name></type> <name pos:start="53:9" pos:end="53:20">total_blocks</name></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:26"><decl pos:start="55:5" pos:end="55:25"><type pos:start="55:5" pos:end="55:7"><name pos:start="55:5" pos:end="55:7">int</name></type> <name pos:start="55:9" pos:end="55:25">color_table_index</name></decl>;</decl_stmt>  <comment type="block" pos:start="55:29" pos:end="55:78">/* indexes to color pair, quad, or octet tables */</comment>

    <decl_stmt pos:start="57:5" pos:end="57:14"><decl pos:start="57:5" pos:end="57:13"><type pos:start="57:5" pos:end="57:7"><name pos:start="57:5" pos:end="57:7">int</name></type> <name pos:start="57:9" pos:end="57:13">pixel</name></decl>;</decl_stmt>



    <decl_stmt pos:start="61:5" pos:end="61:29"><decl pos:start="61:5" pos:end="61:28"><type pos:start="61:5" pos:end="61:7"><name pos:start="61:5" pos:end="61:7">int</name></type> <name pos:start="61:9" pos:end="61:24">color_pair_index</name> <init pos:start="61:26" pos:end="61:28">= <expr pos:start="61:28" pos:end="61:28"><literal type="number" pos:start="61:28" pos:end="61:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="63:5" pos:end="63:29"><decl pos:start="63:5" pos:end="63:28"><type pos:start="63:5" pos:end="63:7"><name pos:start="63:5" pos:end="63:7">int</name></type> <name pos:start="63:9" pos:end="63:24">color_quad_index</name> <init pos:start="63:26" pos:end="63:28">= <expr pos:start="63:28" pos:end="63:28"><literal type="number" pos:start="63:28" pos:end="63:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="65:5" pos:end="65:30"><decl pos:start="65:5" pos:end="65:29"><type pos:start="65:5" pos:end="65:7"><name pos:start="65:5" pos:end="65:7">int</name></type> <name pos:start="65:9" pos:end="65:25">color_octet_index</name> <init pos:start="65:27" pos:end="65:29">= <expr pos:start="65:29" pos:end="65:29"><literal type="number" pos:start="65:29" pos:end="65:29">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="69:5" pos:end="69:36">/* make the palette available */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:53"><expr pos:start="71:5" pos:end="71:52"><call pos:start="71:5" pos:end="71:52"><name pos:start="71:5" pos:end="71:10">memcpy</name><argument_list pos:start="71:11" pos:end="71:52">(<argument pos:start="71:12" pos:end="71:27"><expr pos:start="71:12" pos:end="71:27"><name pos:start="71:12" pos:end="71:27"><name pos:start="71:12" pos:end="71:12">s</name><operator pos:start="71:13" pos:end="71:14">-&gt;</operator><name pos:start="71:15" pos:end="71:19">frame</name><operator pos:start="71:20" pos:end="71:20">.</operator><name pos:start="71:21" pos:end="71:24">data</name><index pos:start="71:25" pos:end="71:27">[<expr pos:start="71:26" pos:end="71:26"><literal type="number" pos:start="71:26" pos:end="71:26">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="71:30" pos:end="71:35"><expr pos:start="71:30" pos:end="71:35"><name pos:start="71:30" pos:end="71:35"><name pos:start="71:30" pos:end="71:30">s</name><operator pos:start="71:31" pos:end="71:32">-&gt;</operator><name pos:start="71:33" pos:end="71:35">pal</name></name></expr></argument>, <argument pos:start="71:38" pos:end="71:51"><expr pos:start="71:38" pos:end="71:51"><name pos:start="71:38" pos:end="71:51">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:59"><expr pos:start="75:5" pos:end="75:58"><name pos:start="75:5" pos:end="75:14">chunk_size</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <call pos:start="75:18" pos:end="75:45"><name pos:start="75:18" pos:end="75:24">AV_RB32</name><argument_list pos:start="75:25" pos:end="75:45">(<argument pos:start="75:26" pos:end="75:44"><expr pos:start="75:26" pos:end="75:44"><operator pos:start="75:26" pos:end="75:26">&amp;</operator><name pos:start="75:27" pos:end="75:44"><name pos:start="75:27" pos:end="75:27">s</name><operator pos:start="75:28" pos:end="75:29">-&gt;</operator><name pos:start="75:30" pos:end="75:32">buf</name><index pos:start="75:33" pos:end="75:44">[<expr pos:start="75:34" pos:end="75:43"><name pos:start="75:34" pos:end="75:43">stream_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="75:47" pos:end="75:47">&amp;</operator> <literal type="number" pos:start="75:49" pos:end="75:58">0x00FFFFFF</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:20"><expr pos:start="77:5" pos:end="77:19"><name pos:start="77:5" pos:end="77:14">stream_ptr</name> <operator pos:start="77:16" pos:end="77:17">+=</operator> <literal type="number" pos:start="77:19" pos:end="77:19">4</literal></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="83:33"><if pos:start="79:5" pos:end="83:33">if <condition pos:start="79:8" pos:end="79:30">(<expr pos:start="79:9" pos:end="79:29"><name pos:start="79:9" pos:end="79:18">chunk_size</name> <operator pos:start="79:20" pos:end="79:21">!=</operator> <name pos:start="79:23" pos:end="79:29"><name pos:start="79:23" pos:end="79:23">s</name><operator pos:start="79:24" pos:end="79:25">-&gt;</operator><name pos:start="79:26" pos:end="79:29">size</name></name></expr>)</condition><block type="pseudo" pos:start="81:9" pos:end="83:33"><block_content pos:start="81:9" pos:end="83:33">

        <expr_stmt pos:start="81:9" pos:end="83:33"><expr pos:start="81:9" pos:end="83:32"><call pos:start="81:9" pos:end="83:32"><name pos:start="81:9" pos:end="81:14">av_log</name><argument_list pos:start="81:15" pos:end="83:32">(<argument pos:start="81:16" pos:end="81:23"><expr pos:start="81:16" pos:end="81:23"><name pos:start="81:16" pos:end="81:23"><name pos:start="81:16" pos:end="81:16">s</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:23">avctx</name></name></expr></argument>, <argument pos:start="81:26" pos:end="81:36"><expr pos:start="81:26" pos:end="81:36"><name pos:start="81:26" pos:end="81:36">AV_LOG_INFO</name></expr></argument>, <argument pos:start="81:39" pos:end="81:120"><expr pos:start="81:39" pos:end="81:120"><literal type="string" pos:start="81:39" pos:end="81:120">"warning: MOV chunk size != encoded chunk size (%d != %d); using MOV chunk size\n"</literal></expr></argument>,

            <argument pos:start="83:13" pos:end="83:22"><expr pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:22">chunk_size</name></expr></argument>, <argument pos:start="83:25" pos:end="83:31"><expr pos:start="83:25" pos:end="83:31"><name pos:start="83:25" pos:end="83:31"><name pos:start="83:25" pos:end="83:25">s</name><operator pos:start="83:26" pos:end="83:27">-&gt;</operator><name pos:start="83:28" pos:end="83:31">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:25"><expr pos:start="87:5" pos:end="87:24"><name pos:start="87:5" pos:end="87:14">chunk_size</name> <operator pos:start="87:16" pos:end="87:16">=</operator> <name pos:start="87:18" pos:end="87:24"><name pos:start="87:18" pos:end="87:18">s</name><operator pos:start="87:19" pos:end="87:20">-&gt;</operator><name pos:start="87:21" pos:end="87:24">size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:78"><expr pos:start="89:5" pos:end="89:77"><name pos:start="89:5" pos:end="89:16">total_blocks</name> <operator pos:start="89:18" pos:end="89:18">=</operator> <operator pos:start="89:20" pos:end="89:20">(</operator><operator pos:start="89:21" pos:end="89:21">(</operator><name pos:start="89:22" pos:end="89:36"><name pos:start="89:22" pos:end="89:22">s</name><operator pos:start="89:23" pos:end="89:24">-&gt;</operator><name pos:start="89:25" pos:end="89:29">avctx</name><operator pos:start="89:30" pos:end="89:31">-&gt;</operator><name pos:start="89:32" pos:end="89:36">width</name></name> <operator pos:start="89:38" pos:end="89:38">+</operator> <literal type="number" pos:start="89:40" pos:end="89:40">3</literal><operator pos:start="89:41" pos:end="89:41">)</operator> <operator pos:start="89:43" pos:end="89:43">/</operator> <literal type="number" pos:start="89:45" pos:end="89:45">4</literal><operator pos:start="89:46" pos:end="89:46">)</operator> <operator pos:start="89:48" pos:end="89:48">*</operator> <operator pos:start="89:50" pos:end="89:50">(</operator><operator pos:start="89:51" pos:end="89:51">(</operator><name pos:start="89:52" pos:end="89:67"><name pos:start="89:52" pos:end="89:52">s</name><operator pos:start="89:53" pos:end="89:54">-&gt;</operator><name pos:start="89:55" pos:end="89:59">avctx</name><operator pos:start="89:60" pos:end="89:61">-&gt;</operator><name pos:start="89:62" pos:end="89:67">height</name></name> <operator pos:start="89:69" pos:end="89:69">+</operator> <literal type="number" pos:start="89:71" pos:end="89:71">3</literal><operator pos:start="89:72" pos:end="89:72">)</operator> <operator pos:start="89:74" pos:end="89:74">/</operator> <literal type="number" pos:start="89:76" pos:end="89:76">4</literal><operator pos:start="89:77" pos:end="89:77">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="93:5" pos:end="93:37">/* traverse through the blocks */</comment>

    <while pos:start="95:5" pos:end="679:5">while <condition pos:start="95:11" pos:end="95:24">(<expr pos:start="95:12" pos:end="95:23"><name pos:start="95:12" pos:end="95:23">total_blocks</name></expr>)</condition> <block pos:start="95:26" pos:end="679:5">{<block_content pos:start="101:9" pos:end="677:9">

        <comment type="block" pos:start="97:9" pos:end="97:27">/* sanity checks */</comment>

        <comment type="block" pos:start="99:9" pos:end="99:60">/* make sure stream ptr hasn't gone out of bounds */</comment>

        <if_stmt pos:start="101:9" pos:end="109:9"><if pos:start="101:9" pos:end="109:9">if <condition pos:start="101:12" pos:end="101:36">(<expr pos:start="101:13" pos:end="101:35"><name pos:start="101:13" pos:end="101:22">stream_ptr</name> <operator pos:start="101:24" pos:end="101:24">&gt;</operator> <name pos:start="101:26" pos:end="101:35">chunk_size</name></expr>)</condition> <block pos:start="101:38" pos:end="109:9">{<block_content pos:start="103:13" pos:end="107:19">

            <expr_stmt pos:start="103:13" pos:end="105:40"><expr pos:start="103:13" pos:end="105:39"><call pos:start="103:13" pos:end="105:39"><name pos:start="103:13" pos:end="103:18">av_log</name><argument_list pos:start="103:19" pos:end="105:39">(<argument pos:start="103:20" pos:end="103:27"><expr pos:start="103:20" pos:end="103:27"><name pos:start="103:20" pos:end="103:27"><name pos:start="103:20" pos:end="103:20">s</name><operator pos:start="103:21" pos:end="103:22">-&gt;</operator><name pos:start="103:23" pos:end="103:27">avctx</name></name></expr></argument>, <argument pos:start="103:30" pos:end="103:40"><expr pos:start="103:30" pos:end="103:40"><name pos:start="103:30" pos:end="103:40">AV_LOG_INFO</name></expr></argument>, <argument pos:start="103:43" pos:end="103:116"><expr pos:start="103:43" pos:end="103:116"><literal type="string" pos:start="103:43" pos:end="103:116">"SMC decoder just went out of bounds (stream ptr = %d, chunk size = %d)\n"</literal></expr></argument>,

                <argument pos:start="105:17" pos:end="105:26"><expr pos:start="105:17" pos:end="105:26"><name pos:start="105:17" pos:end="105:26">stream_ptr</name></expr></argument>, <argument pos:start="105:29" pos:end="105:38"><expr pos:start="105:29" pos:end="105:38"><name pos:start="105:29" pos:end="105:38">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="107:13" pos:end="107:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="111:9" pos:end="111:56">/* make sure the row pointer hasn't gone wild */</comment>

        <if_stmt pos:start="113:9" pos:end="121:9"><if pos:start="113:9" pos:end="121:9">if <condition pos:start="113:12" pos:end="113:34">(<expr pos:start="113:13" pos:end="113:33"><name pos:start="113:13" pos:end="113:19">row_ptr</name> <operator pos:start="113:21" pos:end="113:22">&gt;=</operator> <name pos:start="113:24" pos:end="113:33">image_size</name></expr>)</condition> <block pos:start="113:36" pos:end="121:9">{<block_content pos:start="115:13" pos:end="119:19">

            <expr_stmt pos:start="115:13" pos:end="117:37"><expr pos:start="115:13" pos:end="117:36"><call pos:start="115:13" pos:end="117:36"><name pos:start="115:13" pos:end="115:18">av_log</name><argument_list pos:start="115:19" pos:end="117:36">(<argument pos:start="115:20" pos:end="115:27"><expr pos:start="115:20" pos:end="115:27"><name pos:start="115:20" pos:end="115:27"><name pos:start="115:20" pos:end="115:20">s</name><operator pos:start="115:21" pos:end="115:22">-&gt;</operator><name pos:start="115:23" pos:end="115:27">avctx</name></name></expr></argument>, <argument pos:start="115:30" pos:end="115:40"><expr pos:start="115:30" pos:end="115:40"><name pos:start="115:30" pos:end="115:40">AV_LOG_INFO</name></expr></argument>, <argument pos:start="115:43" pos:end="115:109"><expr pos:start="115:43" pos:end="115:109"><literal type="string" pos:start="115:43" pos:end="115:109">"SMC decoder just went out of bounds (row ptr = %d, height = %d)\n"</literal></expr></argument>,

                <argument pos:start="117:17" pos:end="117:23"><expr pos:start="117:17" pos:end="117:23"><name pos:start="117:17" pos:end="117:23">row_ptr</name></expr></argument>, <argument pos:start="117:26" pos:end="117:35"><expr pos:start="117:26" pos:end="117:35"><name pos:start="117:26" pos:end="117:35">image_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="119:13" pos:end="119:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="125:9" pos:end="125:38"><expr pos:start="125:9" pos:end="125:37"><name pos:start="125:9" pos:end="125:14">opcode</name> <operator pos:start="125:16" pos:end="125:16">=</operator> <name pos:start="125:18" pos:end="125:37"><name pos:start="125:18" pos:end="125:18">s</name><operator pos:start="125:19" pos:end="125:20">-&gt;</operator><name pos:start="125:21" pos:end="125:23">buf</name><index pos:start="125:24" pos:end="125:37">[<expr pos:start="125:25" pos:end="125:36"><name pos:start="125:25" pos:end="125:34">stream_ptr</name><operator pos:start="125:35" pos:end="125:36">++</operator></expr>]</index></name></expr>;</expr_stmt>

        <switch pos:start="127:9" pos:end="677:9">switch <condition pos:start="127:16" pos:end="127:30">(<expr pos:start="127:17" pos:end="127:29"><name pos:start="127:17" pos:end="127:22">opcode</name> <operator pos:start="127:24" pos:end="127:24">&amp;</operator> <literal type="number" pos:start="127:26" pos:end="127:29">0xF0</literal></expr>)</condition> <block pos:start="127:32" pos:end="677:9">{<block_content pos:start="131:9" pos:end="675:18">

        <comment type="block" pos:start="129:9" pos:end="129:27">/* skip n blocks */</comment>

        <case pos:start="131:9" pos:end="131:18">case <expr pos:start="131:14" pos:end="131:17"><literal type="number" pos:start="131:14" pos:end="131:17">0x00</literal></expr>:</case>

        <case pos:start="133:9" pos:end="133:18">case <expr pos:start="133:14" pos:end="133:17"><literal type="number" pos:start="133:14" pos:end="133:17">0x10</literal></expr>:</case>

            <expr_stmt pos:start="135:13" pos:end="135:41"><expr pos:start="135:13" pos:end="135:40"><name pos:start="135:13" pos:end="135:20">n_blocks</name> <operator pos:start="135:22" pos:end="135:22">=</operator> <call pos:start="135:24" pos:end="135:40"><name pos:start="135:24" pos:end="135:38">GET_BLOCK_COUNT</name><argument_list pos:start="135:39" pos:end="135:40">()</argument_list></call></expr>;</expr_stmt>

            <while pos:start="137:13" pos:end="141:13">while <condition pos:start="137:19" pos:end="137:30">(<expr pos:start="137:20" pos:end="137:29"><name pos:start="137:20" pos:end="137:27">n_blocks</name><operator pos:start="137:28" pos:end="137:29">--</operator></expr>)</condition> <block pos:start="137:32" pos:end="141:13">{<block_content pos:start="139:17" pos:end="139:32">

                <expr_stmt pos:start="139:17" pos:end="139:32"><expr pos:start="139:17" pos:end="139:31"><call pos:start="139:17" pos:end="139:31"><name pos:start="139:17" pos:end="139:29">ADVANCE_BLOCK</name><argument_list pos:start="139:30" pos:end="139:31">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></while>

            <break pos:start="143:13" pos:end="143:18">break;</break>



        <comment type="block" pos:start="147:9" pos:end="147:39">/* repeat last block n times */</comment>

        <case pos:start="149:9" pos:end="149:18">case <expr pos:start="149:14" pos:end="149:17"><literal type="number" pos:start="149:14" pos:end="149:17">0x20</literal></expr>:</case>

        <case pos:start="151:9" pos:end="151:18">case <expr pos:start="151:14" pos:end="151:17"><literal type="number" pos:start="151:14" pos:end="151:17">0x30</literal></expr>:</case>

            <expr_stmt pos:start="153:13" pos:end="153:41"><expr pos:start="153:13" pos:end="153:40"><name pos:start="153:13" pos:end="153:20">n_blocks</name> <operator pos:start="153:22" pos:end="153:22">=</operator> <call pos:start="153:24" pos:end="153:40"><name pos:start="153:24" pos:end="153:38">GET_BLOCK_COUNT</name><argument_list pos:start="153:39" pos:end="153:40">()</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="157:13" pos:end="157:30">/* sanity check */</comment>

            <if_stmt pos:start="159:13" pos:end="167:13"><if pos:start="159:13" pos:end="167:13">if <condition pos:start="159:16" pos:end="159:51">(<expr pos:start="159:17" pos:end="159:50"><operator pos:start="159:17" pos:end="159:17">(</operator><name pos:start="159:18" pos:end="159:24">row_ptr</name> <operator pos:start="159:26" pos:end="159:27">==</operator> <literal type="number" pos:start="159:29" pos:end="159:29">0</literal><operator pos:start="159:30" pos:end="159:30">)</operator> <operator pos:start="159:32" pos:end="159:33">&amp;&amp;</operator> <operator pos:start="159:35" pos:end="159:35">(</operator><name pos:start="159:36" pos:end="159:44">pixel_ptr</name> <operator pos:start="159:46" pos:end="159:47">==</operator> <literal type="number" pos:start="159:49" pos:end="159:49">0</literal><operator pos:start="159:50" pos:end="159:50">)</operator></expr>)</condition> <block pos:start="159:53" pos:end="167:13">{<block_content pos:start="161:17" pos:end="165:22">

                <expr_stmt pos:start="161:17" pos:end="163:35"><expr pos:start="161:17" pos:end="163:34"><call pos:start="161:17" pos:end="163:34"><name pos:start="161:17" pos:end="161:22">av_log</name><argument_list pos:start="161:23" pos:end="163:34">(<argument pos:start="161:24" pos:end="161:31"><expr pos:start="161:24" pos:end="161:31"><name pos:start="161:24" pos:end="161:31"><name pos:start="161:24" pos:end="161:24">s</name><operator pos:start="161:25" pos:end="161:26">-&gt;</operator><name pos:start="161:27" pos:end="161:31">avctx</name></name></expr></argument>, <argument pos:start="161:34" pos:end="161:44"><expr pos:start="161:34" pos:end="161:44"><name pos:start="161:34" pos:end="161:44">AV_LOG_INFO</name></expr></argument>, <argument pos:start="161:47" pos:end="161:115"><expr pos:start="161:47" pos:end="161:115"><literal type="string" pos:start="161:47" pos:end="161:115">"encountered repeat block opcode (%02X) but no blocks rendered yet\n"</literal></expr></argument>,

                    <argument pos:start="163:21" pos:end="163:33"><expr pos:start="163:21" pos:end="163:33"><name pos:start="163:21" pos:end="163:26">opcode</name> <operator pos:start="163:28" pos:end="163:28">&amp;</operator> <literal type="number" pos:start="163:30" pos:end="163:33">0xF0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="165:17" pos:end="165:22">break;</break>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="171:13" pos:end="171:61">/* figure out where the previous block started */</comment>

            <if_stmt pos:start="173:13" pos:end="181:58"><if pos:start="173:13" pos:end="177:74">if <condition pos:start="173:16" pos:end="173:31">(<expr pos:start="173:17" pos:end="173:30"><name pos:start="173:17" pos:end="173:25">pixel_ptr</name> <operator pos:start="173:27" pos:end="173:28">==</operator> <literal type="number" pos:start="173:30" pos:end="173:30">0</literal></expr>)</condition><block type="pseudo" pos:start="175:17" pos:end="177:74"><block_content pos:start="175:17" pos:end="177:74">

                <expr_stmt pos:start="175:17" pos:end="177:74"><expr pos:start="175:17" pos:end="177:73"><name pos:start="175:17" pos:end="175:31">prev_block_ptr1</name> <operator pos:start="175:33" pos:end="175:33">=</operator>

                    <operator pos:start="177:21" pos:end="177:21">(</operator><name pos:start="177:22" pos:end="177:28">row_ptr</name> <operator pos:start="177:30" pos:end="177:30">-</operator> <name pos:start="177:32" pos:end="177:46"><name pos:start="177:32" pos:end="177:32">s</name><operator pos:start="177:33" pos:end="177:34">-&gt;</operator><name pos:start="177:35" pos:end="177:39">avctx</name><operator pos:start="177:40" pos:end="177:41">-&gt;</operator><name pos:start="177:42" pos:end="177:46">width</name></name> <operator pos:start="177:48" pos:end="177:48">*</operator> <literal type="number" pos:start="177:50" pos:end="177:50">4</literal><operator pos:start="177:51" pos:end="177:51">)</operator> <operator pos:start="177:53" pos:end="177:53">+</operator> <name pos:start="177:55" pos:end="177:69"><name pos:start="177:55" pos:end="177:55">s</name><operator pos:start="177:56" pos:end="177:57">-&gt;</operator><name pos:start="177:58" pos:end="177:62">avctx</name><operator pos:start="177:63" pos:end="177:64">-&gt;</operator><name pos:start="177:65" pos:end="177:69">width</name></name> <operator pos:start="177:71" pos:end="177:71">-</operator> <literal type="number" pos:start="177:73" pos:end="177:73">4</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="179:13" pos:end="181:58">else<block type="pseudo" pos:start="181:17" pos:end="181:58"><block_content pos:start="181:17" pos:end="181:58">

                <expr_stmt pos:start="181:17" pos:end="181:58"><expr pos:start="181:17" pos:end="181:57"><name pos:start="181:17" pos:end="181:31">prev_block_ptr1</name> <operator pos:start="181:33" pos:end="181:33">=</operator> <name pos:start="181:35" pos:end="181:41">row_ptr</name> <operator pos:start="181:43" pos:end="181:43">+</operator> <name pos:start="181:45" pos:end="181:53">pixel_ptr</name> <operator pos:start="181:55" pos:end="181:55">-</operator> <literal type="number" pos:start="181:57" pos:end="181:57">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <while pos:start="185:13" pos:end="207:13">while <condition pos:start="185:19" pos:end="185:30">(<expr pos:start="185:20" pos:end="185:29"><name pos:start="185:20" pos:end="185:27">n_blocks</name><operator pos:start="185:28" pos:end="185:29">--</operator></expr>)</condition> <block pos:start="185:32" pos:end="207:13">{<block_content pos:start="187:17" pos:end="205:32">

                <expr_stmt pos:start="187:17" pos:end="187:48"><expr pos:start="187:17" pos:end="187:47"><name pos:start="187:17" pos:end="187:25">block_ptr</name> <operator pos:start="187:27" pos:end="187:27">=</operator> <name pos:start="187:29" pos:end="187:35">row_ptr</name> <operator pos:start="187:37" pos:end="187:37">+</operator> <name pos:start="187:39" pos:end="187:47">pixel_ptr</name></expr>;</expr_stmt>

                <expr_stmt pos:start="189:17" pos:end="189:49"><expr pos:start="189:17" pos:end="189:48"><name pos:start="189:17" pos:end="189:30">prev_block_ptr</name> <operator pos:start="189:32" pos:end="189:32">=</operator> <name pos:start="189:34" pos:end="189:48">prev_block_ptr1</name></expr>;</expr_stmt>

                <for pos:start="191:17" pos:end="203:17">for <control pos:start="191:21" pos:end="191:57">(<init pos:start="191:22" pos:end="191:33"><expr pos:start="191:22" pos:end="191:32"><name pos:start="191:22" pos:end="191:28">pixel_y</name> <operator pos:start="191:30" pos:end="191:30">=</operator> <literal type="number" pos:start="191:32" pos:end="191:32">0</literal></expr>;</init> <condition pos:start="191:35" pos:end="191:46"><expr pos:start="191:35" pos:end="191:45"><name pos:start="191:35" pos:end="191:41">pixel_y</name> <operator pos:start="191:43" pos:end="191:43">&lt;</operator> <literal type="number" pos:start="191:45" pos:end="191:45">4</literal></expr>;</condition> <incr pos:start="191:48" pos:end="191:56"><expr pos:start="191:48" pos:end="191:56"><name pos:start="191:48" pos:end="191:54">pixel_y</name><operator pos:start="191:55" pos:end="191:56">++</operator></expr></incr>)</control> <block pos:start="191:59" pos:end="203:17">{<block_content pos:start="193:21" pos:end="201:46">

                    <for pos:start="193:21" pos:end="197:21">for <control pos:start="193:25" pos:end="193:61">(<init pos:start="193:26" pos:end="193:37"><expr pos:start="193:26" pos:end="193:36"><name pos:start="193:26" pos:end="193:32">pixel_x</name> <operator pos:start="193:34" pos:end="193:34">=</operator> <literal type="number" pos:start="193:36" pos:end="193:36">0</literal></expr>;</init> <condition pos:start="193:39" pos:end="193:50"><expr pos:start="193:39" pos:end="193:49"><name pos:start="193:39" pos:end="193:45">pixel_x</name> <operator pos:start="193:47" pos:end="193:47">&lt;</operator> <literal type="number" pos:start="193:49" pos:end="193:49">4</literal></expr>;</condition> <incr pos:start="193:52" pos:end="193:60"><expr pos:start="193:52" pos:end="193:60"><name pos:start="193:52" pos:end="193:58">pixel_x</name><operator pos:start="193:59" pos:end="193:60">++</operator></expr></incr>)</control> <block pos:start="193:63" pos:end="197:21">{<block_content pos:start="195:25" pos:end="195:71">

                        <expr_stmt pos:start="195:25" pos:end="195:71"><expr pos:start="195:25" pos:end="195:70"><name pos:start="195:25" pos:end="195:43"><name pos:start="195:25" pos:end="195:30">pixels</name><index pos:start="195:31" pos:end="195:43">[<expr pos:start="195:32" pos:end="195:42"><name pos:start="195:32" pos:end="195:40">block_ptr</name><operator pos:start="195:41" pos:end="195:42">++</operator></expr>]</index></name> <operator pos:start="195:45" pos:end="195:45">=</operator> <name pos:start="195:47" pos:end="195:70"><name pos:start="195:47" pos:end="195:52">pixels</name><index pos:start="195:53" pos:end="195:70">[<expr pos:start="195:54" pos:end="195:69"><name pos:start="195:54" pos:end="195:67">prev_block_ptr</name><operator pos:start="195:68" pos:end="195:69">++</operator></expr>]</index></name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <expr_stmt pos:start="199:21" pos:end="199:41"><expr pos:start="199:21" pos:end="199:40"><name pos:start="199:21" pos:end="199:29">block_ptr</name> <operator pos:start="199:31" pos:end="199:32">+=</operator> <name pos:start="199:34" pos:end="199:40">row_inc</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="201:21" pos:end="201:46"><expr pos:start="201:21" pos:end="201:45"><name pos:start="201:21" pos:end="201:34">prev_block_ptr</name> <operator pos:start="201:36" pos:end="201:37">+=</operator> <name pos:start="201:39" pos:end="201:45">row_inc</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="205:17" pos:end="205:32"><expr pos:start="205:17" pos:end="205:31"><call pos:start="205:17" pos:end="205:31"><name pos:start="205:17" pos:end="205:29">ADVANCE_BLOCK</name><argument_list pos:start="205:30" pos:end="205:31">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></while>

            <break pos:start="209:13" pos:end="209:18">break;</break>



        <comment type="block" pos:start="213:9" pos:end="213:52">/* repeat previous pair of blocks n times */</comment>

        <case pos:start="215:9" pos:end="215:18">case <expr pos:start="215:14" pos:end="215:17"><literal type="number" pos:start="215:14" pos:end="215:17">0x40</literal></expr>:</case>

        <case pos:start="217:9" pos:end="217:18">case <expr pos:start="217:14" pos:end="217:17"><literal type="number" pos:start="217:14" pos:end="217:17">0x50</literal></expr>:</case>

            <expr_stmt pos:start="219:13" pos:end="219:41"><expr pos:start="219:13" pos:end="219:40"><name pos:start="219:13" pos:end="219:20">n_blocks</name> <operator pos:start="219:22" pos:end="219:22">=</operator> <call pos:start="219:24" pos:end="219:40"><name pos:start="219:24" pos:end="219:38">GET_BLOCK_COUNT</name><argument_list pos:start="219:39" pos:end="219:40">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:26"><expr pos:start="221:13" pos:end="221:25"><name pos:start="221:13" pos:end="221:20">n_blocks</name> <operator pos:start="221:22" pos:end="221:23">*=</operator> <literal type="number" pos:start="221:25" pos:end="221:25">2</literal></expr>;</expr_stmt>



            <comment type="block" pos:start="225:13" pos:end="225:30">/* sanity check */</comment>

            <if_stmt pos:start="227:13" pos:end="235:13"><if pos:start="227:13" pos:end="235:13">if <condition pos:start="227:16" pos:end="227:54">(<expr pos:start="227:17" pos:end="227:53"><operator pos:start="227:17" pos:end="227:17">(</operator><name pos:start="227:18" pos:end="227:24">row_ptr</name> <operator pos:start="227:26" pos:end="227:27">==</operator> <literal type="number" pos:start="227:29" pos:end="227:29">0</literal><operator pos:start="227:30" pos:end="227:30">)</operator> <operator pos:start="227:32" pos:end="227:33">&amp;&amp;</operator> <operator pos:start="227:35" pos:end="227:35">(</operator><name pos:start="227:36" pos:end="227:44">pixel_ptr</name> <operator pos:start="227:46" pos:end="227:46">&lt;</operator> <literal type="number" pos:start="227:48" pos:end="227:48">2</literal> <operator pos:start="227:50" pos:end="227:50">*</operator> <literal type="number" pos:start="227:52" pos:end="227:52">4</literal><operator pos:start="227:53" pos:end="227:53">)</operator></expr>)</condition> <block pos:start="227:56" pos:end="235:13">{<block_content pos:start="229:17" pos:end="233:22">

                <expr_stmt pos:start="229:17" pos:end="231:35"><expr pos:start="229:17" pos:end="231:34"><call pos:start="229:17" pos:end="231:34"><name pos:start="229:17" pos:end="229:22">av_log</name><argument_list pos:start="229:23" pos:end="231:34">(<argument pos:start="229:24" pos:end="229:31"><expr pos:start="229:24" pos:end="229:31"><name pos:start="229:24" pos:end="229:31"><name pos:start="229:24" pos:end="229:24">s</name><operator pos:start="229:25" pos:end="229:26">-&gt;</operator><name pos:start="229:27" pos:end="229:31">avctx</name></name></expr></argument>, <argument pos:start="229:34" pos:end="229:44"><expr pos:start="229:34" pos:end="229:44"><name pos:start="229:34" pos:end="229:44">AV_LOG_INFO</name></expr></argument>, <argument pos:start="229:47" pos:end="229:123"><expr pos:start="229:47" pos:end="229:123"><literal type="string" pos:start="229:47" pos:end="229:123">"encountered repeat block opcode (%02X) but not enough blocks rendered yet\n"</literal></expr></argument>,

                    <argument pos:start="231:21" pos:end="231:33"><expr pos:start="231:21" pos:end="231:33"><name pos:start="231:21" pos:end="231:26">opcode</name> <operator pos:start="231:28" pos:end="231:28">&amp;</operator> <literal type="number" pos:start="231:30" pos:end="231:33">0xF0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="233:17" pos:end="233:22">break;</break>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="239:13" pos:end="239:64">/* figure out where the previous 2 blocks started */</comment>

            <if_stmt pos:start="241:13" pos:end="253:62"><if pos:start="241:13" pos:end="245:44">if <condition pos:start="241:16" pos:end="241:31">(<expr pos:start="241:17" pos:end="241:30"><name pos:start="241:17" pos:end="241:25">pixel_ptr</name> <operator pos:start="241:27" pos:end="241:28">==</operator> <literal type="number" pos:start="241:30" pos:end="241:30">0</literal></expr>)</condition><block type="pseudo" pos:start="243:17" pos:end="245:44"><block_content pos:start="243:17" pos:end="245:44">

                <expr_stmt pos:start="243:17" pos:end="245:44"><expr pos:start="243:17" pos:end="245:43"><name pos:start="243:17" pos:end="243:31">prev_block_ptr1</name> <operator pos:start="243:33" pos:end="243:33">=</operator> <operator pos:start="243:35" pos:end="243:35">(</operator><name pos:start="243:36" pos:end="243:42">row_ptr</name> <operator pos:start="243:44" pos:end="243:44">-</operator> <name pos:start="243:46" pos:end="243:60"><name pos:start="243:46" pos:end="243:46">s</name><operator pos:start="243:47" pos:end="243:48">-&gt;</operator><name pos:start="243:49" pos:end="243:53">avctx</name><operator pos:start="243:54" pos:end="243:55">-&gt;</operator><name pos:start="243:56" pos:end="243:60">width</name></name> <operator pos:start="243:62" pos:end="243:62">*</operator> <literal type="number" pos:start="243:64" pos:end="243:64">4</literal><operator pos:start="243:65" pos:end="243:65">)</operator> <operator pos:start="243:67" pos:end="243:67">+</operator>

                    <name pos:start="245:21" pos:end="245:35"><name pos:start="245:21" pos:end="245:21">s</name><operator pos:start="245:22" pos:end="245:23">-&gt;</operator><name pos:start="245:24" pos:end="245:28">avctx</name><operator pos:start="245:29" pos:end="245:30">-&gt;</operator><name pos:start="245:31" pos:end="245:35">width</name></name> <operator pos:start="245:37" pos:end="245:37">-</operator> <literal type="number" pos:start="245:39" pos:end="245:39">4</literal> <operator pos:start="245:41" pos:end="245:41">*</operator> <literal type="number" pos:start="245:43" pos:end="245:43">2</literal></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="247:13" pos:end="249:76">else if <condition pos:start="247:21" pos:end="247:36">(<expr pos:start="247:22" pos:end="247:35"><name pos:start="247:22" pos:end="247:30">pixel_ptr</name> <operator pos:start="247:32" pos:end="247:33">==</operator> <literal type="number" pos:start="247:35" pos:end="247:35">4</literal></expr>)</condition><block type="pseudo" pos:start="249:17" pos:end="249:76"><block_content pos:start="249:17" pos:end="249:76">

                <expr_stmt pos:start="249:17" pos:end="249:76"><expr pos:start="249:17" pos:end="249:75"><name pos:start="249:17" pos:end="249:31">prev_block_ptr1</name> <operator pos:start="249:33" pos:end="249:33">=</operator> <operator pos:start="249:35" pos:end="249:35">(</operator><name pos:start="249:36" pos:end="249:42">row_ptr</name> <operator pos:start="249:44" pos:end="249:44">-</operator> <name pos:start="249:46" pos:end="249:60"><name pos:start="249:46" pos:end="249:46">s</name><operator pos:start="249:47" pos:end="249:48">-&gt;</operator><name pos:start="249:49" pos:end="249:53">avctx</name><operator pos:start="249:54" pos:end="249:55">-&gt;</operator><name pos:start="249:56" pos:end="249:60">width</name></name> <operator pos:start="249:62" pos:end="249:62">*</operator> <literal type="number" pos:start="249:64" pos:end="249:64">4</literal><operator pos:start="249:65" pos:end="249:65">)</operator> <operator pos:start="249:67" pos:end="249:67">+</operator> <name pos:start="249:69" pos:end="249:75">row_inc</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="251:13" pos:end="253:62">else<block type="pseudo" pos:start="253:17" pos:end="253:62"><block_content pos:start="253:17" pos:end="253:62">

                <expr_stmt pos:start="253:17" pos:end="253:62"><expr pos:start="253:17" pos:end="253:61"><name pos:start="253:17" pos:end="253:31">prev_block_ptr1</name> <operator pos:start="253:33" pos:end="253:33">=</operator> <name pos:start="253:35" pos:end="253:41">row_ptr</name> <operator pos:start="253:43" pos:end="253:43">+</operator> <name pos:start="253:45" pos:end="253:53">pixel_ptr</name> <operator pos:start="253:55" pos:end="253:55">-</operator> <literal type="number" pos:start="253:57" pos:end="253:57">4</literal> <operator pos:start="253:59" pos:end="253:59">*</operator> <literal type="number" pos:start="253:61" pos:end="253:61">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <if_stmt pos:start="257:13" pos:end="263:58"><if pos:start="257:13" pos:end="259:76">if <condition pos:start="257:16" pos:end="257:31">(<expr pos:start="257:17" pos:end="257:30"><name pos:start="257:17" pos:end="257:25">pixel_ptr</name> <operator pos:start="257:27" pos:end="257:28">==</operator> <literal type="number" pos:start="257:30" pos:end="257:30">0</literal></expr>)</condition><block type="pseudo" pos:start="259:17" pos:end="259:76"><block_content pos:start="259:17" pos:end="259:76">

                <expr_stmt pos:start="259:17" pos:end="259:76"><expr pos:start="259:17" pos:end="259:75"><name pos:start="259:17" pos:end="259:31">prev_block_ptr2</name> <operator pos:start="259:33" pos:end="259:33">=</operator> <operator pos:start="259:35" pos:end="259:35">(</operator><name pos:start="259:36" pos:end="259:42">row_ptr</name> <operator pos:start="259:44" pos:end="259:44">-</operator> <name pos:start="259:46" pos:end="259:60"><name pos:start="259:46" pos:end="259:46">s</name><operator pos:start="259:47" pos:end="259:48">-&gt;</operator><name pos:start="259:49" pos:end="259:53">avctx</name><operator pos:start="259:54" pos:end="259:55">-&gt;</operator><name pos:start="259:56" pos:end="259:60">width</name></name> <operator pos:start="259:62" pos:end="259:62">*</operator> <literal type="number" pos:start="259:64" pos:end="259:64">4</literal><operator pos:start="259:65" pos:end="259:65">)</operator> <operator pos:start="259:67" pos:end="259:67">+</operator> <name pos:start="259:69" pos:end="259:75">row_inc</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="261:13" pos:end="263:58">else<block type="pseudo" pos:start="263:17" pos:end="263:58"><block_content pos:start="263:17" pos:end="263:58">

                <expr_stmt pos:start="263:17" pos:end="263:58"><expr pos:start="263:17" pos:end="263:57"><name pos:start="263:17" pos:end="263:31">prev_block_ptr2</name> <operator pos:start="263:33" pos:end="263:33">=</operator> <name pos:start="263:35" pos:end="263:41">row_ptr</name> <operator pos:start="263:43" pos:end="263:43">+</operator> <name pos:start="263:45" pos:end="263:53">pixel_ptr</name> <operator pos:start="263:55" pos:end="263:55">-</operator> <literal type="number" pos:start="263:57" pos:end="263:57">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <expr_stmt pos:start="267:13" pos:end="267:32"><expr pos:start="267:13" pos:end="267:31"><name pos:start="267:13" pos:end="267:27">prev_block_flag</name> <operator pos:start="267:29" pos:end="267:29">=</operator> <literal type="number" pos:start="267:31" pos:end="267:31">0</literal></expr>;</expr_stmt>

            <while pos:start="269:13" pos:end="301:13">while <condition pos:start="269:19" pos:end="269:30">(<expr pos:start="269:20" pos:end="269:29"><name pos:start="269:20" pos:end="269:27">n_blocks</name><operator pos:start="269:28" pos:end="269:29">--</operator></expr>)</condition> <block pos:start="269:32" pos:end="301:13">{<block_content pos:start="271:17" pos:end="299:32">

                <expr_stmt pos:start="271:17" pos:end="271:48"><expr pos:start="271:17" pos:end="271:47"><name pos:start="271:17" pos:end="271:25">block_ptr</name> <operator pos:start="271:27" pos:end="271:27">=</operator> <name pos:start="271:29" pos:end="271:35">row_ptr</name> <operator pos:start="271:37" pos:end="271:37">+</operator> <name pos:start="271:39" pos:end="271:47">pixel_ptr</name></expr>;</expr_stmt>

                <if_stmt pos:start="273:17" pos:end="279:53"><if pos:start="273:17" pos:end="275:53">if <condition pos:start="273:20" pos:end="273:36">(<expr pos:start="273:21" pos:end="273:35"><name pos:start="273:21" pos:end="273:35">prev_block_flag</name></expr>)</condition><block type="pseudo" pos:start="275:21" pos:end="275:53"><block_content pos:start="275:21" pos:end="275:53">

                    <expr_stmt pos:start="275:21" pos:end="275:53"><expr pos:start="275:21" pos:end="275:52"><name pos:start="275:21" pos:end="275:34">prev_block_ptr</name> <operator pos:start="275:36" pos:end="275:36">=</operator> <name pos:start="275:38" pos:end="275:52">prev_block_ptr2</name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="277:17" pos:end="279:53">else<block type="pseudo" pos:start="279:21" pos:end="279:53"><block_content pos:start="279:21" pos:end="279:53">

                    <expr_stmt pos:start="279:21" pos:end="279:53"><expr pos:start="279:21" pos:end="279:52"><name pos:start="279:21" pos:end="279:34">prev_block_ptr</name> <operator pos:start="279:36" pos:end="279:36">=</operator> <name pos:start="279:38" pos:end="279:52">prev_block_ptr1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="281:17" pos:end="281:51"><expr pos:start="281:17" pos:end="281:50"><name pos:start="281:17" pos:end="281:31">prev_block_flag</name> <operator pos:start="281:33" pos:end="281:33">=</operator> <operator pos:start="281:35" pos:end="281:35">!</operator><name pos:start="281:36" pos:end="281:50">prev_block_flag</name></expr>;</expr_stmt>



                <for pos:start="285:17" pos:end="297:17">for <control pos:start="285:21" pos:end="285:57">(<init pos:start="285:22" pos:end="285:33"><expr pos:start="285:22" pos:end="285:32"><name pos:start="285:22" pos:end="285:28">pixel_y</name> <operator pos:start="285:30" pos:end="285:30">=</operator> <literal type="number" pos:start="285:32" pos:end="285:32">0</literal></expr>;</init> <condition pos:start="285:35" pos:end="285:46"><expr pos:start="285:35" pos:end="285:45"><name pos:start="285:35" pos:end="285:41">pixel_y</name> <operator pos:start="285:43" pos:end="285:43">&lt;</operator> <literal type="number" pos:start="285:45" pos:end="285:45">4</literal></expr>;</condition> <incr pos:start="285:48" pos:end="285:56"><expr pos:start="285:48" pos:end="285:56"><name pos:start="285:48" pos:end="285:54">pixel_y</name><operator pos:start="285:55" pos:end="285:56">++</operator></expr></incr>)</control> <block pos:start="285:59" pos:end="297:17">{<block_content pos:start="287:21" pos:end="295:46">

                    <for pos:start="287:21" pos:end="291:21">for <control pos:start="287:25" pos:end="287:61">(<init pos:start="287:26" pos:end="287:37"><expr pos:start="287:26" pos:end="287:36"><name pos:start="287:26" pos:end="287:32">pixel_x</name> <operator pos:start="287:34" pos:end="287:34">=</operator> <literal type="number" pos:start="287:36" pos:end="287:36">0</literal></expr>;</init> <condition pos:start="287:39" pos:end="287:50"><expr pos:start="287:39" pos:end="287:49"><name pos:start="287:39" pos:end="287:45">pixel_x</name> <operator pos:start="287:47" pos:end="287:47">&lt;</operator> <literal type="number" pos:start="287:49" pos:end="287:49">4</literal></expr>;</condition> <incr pos:start="287:52" pos:end="287:60"><expr pos:start="287:52" pos:end="287:60"><name pos:start="287:52" pos:end="287:58">pixel_x</name><operator pos:start="287:59" pos:end="287:60">++</operator></expr></incr>)</control> <block pos:start="287:63" pos:end="291:21">{<block_content pos:start="289:25" pos:end="289:71">

                        <expr_stmt pos:start="289:25" pos:end="289:71"><expr pos:start="289:25" pos:end="289:70"><name pos:start="289:25" pos:end="289:43"><name pos:start="289:25" pos:end="289:30">pixels</name><index pos:start="289:31" pos:end="289:43">[<expr pos:start="289:32" pos:end="289:42"><name pos:start="289:32" pos:end="289:40">block_ptr</name><operator pos:start="289:41" pos:end="289:42">++</operator></expr>]</index></name> <operator pos:start="289:45" pos:end="289:45">=</operator> <name pos:start="289:47" pos:end="289:70"><name pos:start="289:47" pos:end="289:52">pixels</name><index pos:start="289:53" pos:end="289:70">[<expr pos:start="289:54" pos:end="289:69"><name pos:start="289:54" pos:end="289:67">prev_block_ptr</name><operator pos:start="289:68" pos:end="289:69">++</operator></expr>]</index></name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <expr_stmt pos:start="293:21" pos:end="293:41"><expr pos:start="293:21" pos:end="293:40"><name pos:start="293:21" pos:end="293:29">block_ptr</name> <operator pos:start="293:31" pos:end="293:32">+=</operator> <name pos:start="293:34" pos:end="293:40">row_inc</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="295:21" pos:end="295:46"><expr pos:start="295:21" pos:end="295:45"><name pos:start="295:21" pos:end="295:34">prev_block_ptr</name> <operator pos:start="295:36" pos:end="295:37">+=</operator> <name pos:start="295:39" pos:end="295:45">row_inc</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="299:17" pos:end="299:32"><expr pos:start="299:17" pos:end="299:31"><call pos:start="299:17" pos:end="299:31"><name pos:start="299:17" pos:end="299:29">ADVANCE_BLOCK</name><argument_list pos:start="299:30" pos:end="299:31">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></while>

            <break pos:start="303:13" pos:end="303:18">break;</break>



        <comment type="block" pos:start="307:9" pos:end="307:36">/* 1-color block encoding */</comment>

        <case pos:start="309:9" pos:end="309:18">case <expr pos:start="309:14" pos:end="309:17"><literal type="number" pos:start="309:14" pos:end="309:17">0x60</literal></expr>:</case>

        <case pos:start="311:9" pos:end="311:18">case <expr pos:start="311:14" pos:end="311:17"><literal type="number" pos:start="311:14" pos:end="311:17">0x70</literal></expr>:</case>

            <expr_stmt pos:start="313:13" pos:end="313:41"><expr pos:start="313:13" pos:end="313:40"><name pos:start="313:13" pos:end="313:20">n_blocks</name> <operator pos:start="313:22" pos:end="313:22">=</operator> <call pos:start="313:24" pos:end="313:40"><name pos:start="313:24" pos:end="313:38">GET_BLOCK_COUNT</name><argument_list pos:start="313:39" pos:end="313:40">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="315:13" pos:end="315:41"><expr pos:start="315:13" pos:end="315:40"><name pos:start="315:13" pos:end="315:17">pixel</name> <operator pos:start="315:19" pos:end="315:19">=</operator> <name pos:start="315:21" pos:end="315:40"><name pos:start="315:21" pos:end="315:21">s</name><operator pos:start="315:22" pos:end="315:23">-&gt;</operator><name pos:start="315:24" pos:end="315:26">buf</name><index pos:start="315:27" pos:end="315:40">[<expr pos:start="315:28" pos:end="315:39"><name pos:start="315:28" pos:end="315:37">stream_ptr</name><operator pos:start="315:38" pos:end="315:39">++</operator></expr>]</index></name></expr>;</expr_stmt>



            <while pos:start="319:13" pos:end="337:13">while <condition pos:start="319:19" pos:end="319:30">(<expr pos:start="319:20" pos:end="319:29"><name pos:start="319:20" pos:end="319:27">n_blocks</name><operator pos:start="319:28" pos:end="319:29">--</operator></expr>)</condition> <block pos:start="319:32" pos:end="337:13">{<block_content pos:start="321:17" pos:end="335:32">

                <expr_stmt pos:start="321:17" pos:end="321:48"><expr pos:start="321:17" pos:end="321:47"><name pos:start="321:17" pos:end="321:25">block_ptr</name> <operator pos:start="321:27" pos:end="321:27">=</operator> <name pos:start="321:29" pos:end="321:35">row_ptr</name> <operator pos:start="321:37" pos:end="321:37">+</operator> <name pos:start="321:39" pos:end="321:47">pixel_ptr</name></expr>;</expr_stmt>

                <for pos:start="323:17" pos:end="333:17">for <control pos:start="323:21" pos:end="323:57">(<init pos:start="323:22" pos:end="323:33"><expr pos:start="323:22" pos:end="323:32"><name pos:start="323:22" pos:end="323:28">pixel_y</name> <operator pos:start="323:30" pos:end="323:30">=</operator> <literal type="number" pos:start="323:32" pos:end="323:32">0</literal></expr>;</init> <condition pos:start="323:35" pos:end="323:46"><expr pos:start="323:35" pos:end="323:45"><name pos:start="323:35" pos:end="323:41">pixel_y</name> <operator pos:start="323:43" pos:end="323:43">&lt;</operator> <literal type="number" pos:start="323:45" pos:end="323:45">4</literal></expr>;</condition> <incr pos:start="323:48" pos:end="323:56"><expr pos:start="323:48" pos:end="323:56"><name pos:start="323:48" pos:end="323:54">pixel_y</name><operator pos:start="323:55" pos:end="323:56">++</operator></expr></incr>)</control> <block pos:start="323:59" pos:end="333:17">{<block_content pos:start="325:21" pos:end="331:41">

                    <for pos:start="325:21" pos:end="329:21">for <control pos:start="325:25" pos:end="325:61">(<init pos:start="325:26" pos:end="325:37"><expr pos:start="325:26" pos:end="325:36"><name pos:start="325:26" pos:end="325:32">pixel_x</name> <operator pos:start="325:34" pos:end="325:34">=</operator> <literal type="number" pos:start="325:36" pos:end="325:36">0</literal></expr>;</init> <condition pos:start="325:39" pos:end="325:50"><expr pos:start="325:39" pos:end="325:49"><name pos:start="325:39" pos:end="325:45">pixel_x</name> <operator pos:start="325:47" pos:end="325:47">&lt;</operator> <literal type="number" pos:start="325:49" pos:end="325:49">4</literal></expr>;</condition> <incr pos:start="325:52" pos:end="325:60"><expr pos:start="325:52" pos:end="325:60"><name pos:start="325:52" pos:end="325:58">pixel_x</name><operator pos:start="325:59" pos:end="325:60">++</operator></expr></incr>)</control> <block pos:start="325:63" pos:end="329:21">{<block_content pos:start="327:25" pos:end="327:52">

                        <expr_stmt pos:start="327:25" pos:end="327:52"><expr pos:start="327:25" pos:end="327:51"><name pos:start="327:25" pos:end="327:43"><name pos:start="327:25" pos:end="327:30">pixels</name><index pos:start="327:31" pos:end="327:43">[<expr pos:start="327:32" pos:end="327:42"><name pos:start="327:32" pos:end="327:40">block_ptr</name><operator pos:start="327:41" pos:end="327:42">++</operator></expr>]</index></name> <operator pos:start="327:45" pos:end="327:45">=</operator> <name pos:start="327:47" pos:end="327:51">pixel</name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <expr_stmt pos:start="331:21" pos:end="331:41"><expr pos:start="331:21" pos:end="331:40"><name pos:start="331:21" pos:end="331:29">block_ptr</name> <operator pos:start="331:31" pos:end="331:32">+=</operator> <name pos:start="331:34" pos:end="331:40">row_inc</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="335:17" pos:end="335:32"><expr pos:start="335:17" pos:end="335:31"><call pos:start="335:17" pos:end="335:31"><name pos:start="335:17" pos:end="335:29">ADVANCE_BLOCK</name><argument_list pos:start="335:30" pos:end="335:31">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></while>

            <break pos:start="339:13" pos:end="339:18">break;</break>



        <comment type="block" pos:start="343:9" pos:end="343:36">/* 2-color block encoding */</comment>

        <case pos:start="345:9" pos:end="345:18">case <expr pos:start="345:14" pos:end="345:17"><literal type="number" pos:start="345:14" pos:end="345:17">0x80</literal></expr>:</case>

        <case pos:start="347:9" pos:end="347:18">case <expr pos:start="347:14" pos:end="347:17"><literal type="number" pos:start="347:14" pos:end="347:17">0x90</literal></expr>:</case>

            <expr_stmt pos:start="349:13" pos:end="349:43"><expr pos:start="349:13" pos:end="349:42"><name pos:start="349:13" pos:end="349:20">n_blocks</name> <operator pos:start="349:22" pos:end="349:22">=</operator> <operator pos:start="349:24" pos:end="349:24">(</operator><name pos:start="349:25" pos:end="349:30">opcode</name> <operator pos:start="349:32" pos:end="349:32">&amp;</operator> <literal type="number" pos:start="349:34" pos:end="349:37">0x0F</literal><operator pos:start="349:38" pos:end="349:38">)</operator> <operator pos:start="349:40" pos:end="349:40">+</operator> <literal type="number" pos:start="349:42" pos:end="349:42">1</literal></expr>;</expr_stmt>



            <comment type="block" pos:start="353:13" pos:end="353:79">/* figure out which color pair to use to paint the 2-color block */</comment>

            <if_stmt pos:start="355:13" pos:end="385:65"><if pos:start="355:13" pos:end="383:13">if <condition pos:start="355:16" pos:end="355:40">(<expr pos:start="355:17" pos:end="355:39"><operator pos:start="355:17" pos:end="355:17">(</operator><name pos:start="355:18" pos:end="355:23">opcode</name> <operator pos:start="355:25" pos:end="355:25">&amp;</operator> <literal type="number" pos:start="355:27" pos:end="355:30">0xF0</literal><operator pos:start="355:31" pos:end="355:31">)</operator> <operator pos:start="355:33" pos:end="355:34">==</operator> <literal type="number" pos:start="355:36" pos:end="355:39">0x80</literal></expr>)</condition> <block pos:start="355:42" pos:end="383:13">{<block_content pos:start="361:17" pos:end="381:41">

                <comment type="block" pos:start="357:17" pos:end="359:61">/* fetch the next 2 colors from bytestream and store in next

                 * available entry in the color pair table */</comment>

                <for pos:start="361:17" pos:end="369:17">for <control pos:start="361:21" pos:end="361:43">(<init pos:start="361:22" pos:end="361:27"><expr pos:start="361:22" pos:end="361:26"><name pos:start="361:22" pos:end="361:22">i</name> <operator pos:start="361:24" pos:end="361:24">=</operator> <literal type="number" pos:start="361:26" pos:end="361:26">0</literal></expr>;</init> <condition pos:start="361:29" pos:end="361:38"><expr pos:start="361:29" pos:end="361:37"><name pos:start="361:29" pos:end="361:29">i</name> <operator pos:start="361:31" pos:end="361:31">&lt;</operator> <name pos:start="361:33" pos:end="361:37">CPAIR</name></expr>;</condition> <incr pos:start="361:40" pos:end="361:42"><expr pos:start="361:40" pos:end="361:42"><name pos:start="361:40" pos:end="361:40">i</name><operator pos:start="361:41" pos:end="361:42">++</operator></expr></incr>)</control> <block pos:start="361:45" pos:end="369:17">{<block_content pos:start="363:21" pos:end="367:62">

                    <expr_stmt pos:start="363:21" pos:end="363:49"><expr pos:start="363:21" pos:end="363:48"><name pos:start="363:21" pos:end="363:25">pixel</name> <operator pos:start="363:27" pos:end="363:27">=</operator> <name pos:start="363:29" pos:end="363:48"><name pos:start="363:29" pos:end="363:29">s</name><operator pos:start="363:30" pos:end="363:31">-&gt;</operator><name pos:start="363:32" pos:end="363:34">buf</name><index pos:start="363:35" pos:end="363:48">[<expr pos:start="363:36" pos:end="363:47"><name pos:start="363:36" pos:end="363:45">stream_ptr</name><operator pos:start="363:46" pos:end="363:47">++</operator></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="365:21" pos:end="365:69"><expr pos:start="365:21" pos:end="365:68"><name pos:start="365:21" pos:end="365:37">color_table_index</name> <operator pos:start="365:39" pos:end="365:39">=</operator> <name pos:start="365:41" pos:end="365:45">CPAIR</name> <operator pos:start="365:47" pos:end="365:47">*</operator> <name pos:start="365:49" pos:end="365:64">color_pair_index</name> <operator pos:start="365:66" pos:end="365:66">+</operator> <name pos:start="365:68" pos:end="365:68">i</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="367:21" pos:end="367:62"><expr pos:start="367:21" pos:end="367:61"><name pos:start="367:21" pos:end="367:53"><name pos:start="367:21" pos:end="367:21">s</name><operator pos:start="367:22" pos:end="367:23">-&gt;</operator><name pos:start="367:24" pos:end="367:34">color_pairs</name><index pos:start="367:35" pos:end="367:53">[<expr pos:start="367:36" pos:end="367:52"><name pos:start="367:36" pos:end="367:52">color_table_index</name></expr>]</index></name> <operator pos:start="367:55" pos:end="367:55">=</operator> <name pos:start="367:57" pos:end="367:61">pixel</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <comment type="block" pos:start="371:17" pos:end="371:66">/* this is the base index to use for this block */</comment>

                <expr_stmt pos:start="373:17" pos:end="373:61"><expr pos:start="373:17" pos:end="373:60"><name pos:start="373:17" pos:end="373:33">color_table_index</name> <operator pos:start="373:35" pos:end="373:35">=</operator> <name pos:start="373:37" pos:end="373:41">CPAIR</name> <operator pos:start="373:43" pos:end="373:43">*</operator> <name pos:start="373:45" pos:end="373:60">color_pair_index</name></expr>;</expr_stmt>

                <expr_stmt pos:start="375:17" pos:end="375:35"><expr pos:start="375:17" pos:end="375:34"><name pos:start="375:17" pos:end="375:32">color_pair_index</name><operator pos:start="375:33" pos:end="375:34">++</operator></expr>;</expr_stmt>

                <comment type="block" pos:start="377:17" pos:end="377:32">/* wraparound */</comment>

                <if_stmt pos:start="379:17" pos:end="381:41"><if pos:start="379:17" pos:end="381:41">if <condition pos:start="379:20" pos:end="379:57">(<expr pos:start="379:21" pos:end="379:56"><name pos:start="379:21" pos:end="379:36">color_pair_index</name> <operator pos:start="379:38" pos:end="379:39">==</operator> <name pos:start="379:41" pos:end="379:56">COLORS_PER_TABLE</name></expr>)</condition><block type="pseudo" pos:start="381:21" pos:end="381:41"><block_content pos:start="381:21" pos:end="381:41">

                    <expr_stmt pos:start="381:21" pos:end="381:41"><expr pos:start="381:21" pos:end="381:40"><name pos:start="381:21" pos:end="381:36">color_pair_index</name> <operator pos:start="381:38" pos:end="381:38">=</operator> <literal type="number" pos:start="381:40" pos:end="381:40">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="383:15" pos:end="385:65">else<block type="pseudo" pos:start="385:17" pos:end="385:65"><block_content pos:start="385:17" pos:end="385:65">

                <expr_stmt pos:start="385:17" pos:end="385:65"><expr pos:start="385:17" pos:end="385:64"><name pos:start="385:17" pos:end="385:33">color_table_index</name> <operator pos:start="385:35" pos:end="385:35">=</operator> <name pos:start="385:37" pos:end="385:41">CPAIR</name> <operator pos:start="385:43" pos:end="385:43">*</operator> <name pos:start="385:45" pos:end="385:64"><name pos:start="385:45" pos:end="385:45">s</name><operator pos:start="385:46" pos:end="385:47">-&gt;</operator><name pos:start="385:48" pos:end="385:50">buf</name><index pos:start="385:51" pos:end="385:64">[<expr pos:start="385:52" pos:end="385:63"><name pos:start="385:52" pos:end="385:61">stream_ptr</name><operator pos:start="385:62" pos:end="385:63">++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <while pos:start="389:13" pos:end="423:13">while <condition pos:start="389:19" pos:end="389:30">(<expr pos:start="389:20" pos:end="389:29"><name pos:start="389:20" pos:end="389:27">n_blocks</name><operator pos:start="389:28" pos:end="389:29">--</operator></expr>)</condition> <block pos:start="389:32" pos:end="423:13">{<block_content pos:start="391:17" pos:end="421:32">

                <expr_stmt pos:start="391:17" pos:end="391:59"><expr pos:start="391:17" pos:end="391:58"><name pos:start="391:17" pos:end="391:27">color_flags</name> <operator pos:start="391:29" pos:end="391:29">=</operator> <call pos:start="391:31" pos:end="391:58"><name pos:start="391:31" pos:end="391:37">AV_RB16</name><argument_list pos:start="391:38" pos:end="391:58">(<argument pos:start="391:39" pos:end="391:57"><expr pos:start="391:39" pos:end="391:57"><operator pos:start="391:39" pos:end="391:39">&amp;</operator><name pos:start="391:40" pos:end="391:57"><name pos:start="391:40" pos:end="391:40">s</name><operator pos:start="391:41" pos:end="391:42">-&gt;</operator><name pos:start="391:43" pos:end="391:45">buf</name><index pos:start="391:46" pos:end="391:57">[<expr pos:start="391:47" pos:end="391:56"><name pos:start="391:47" pos:end="391:56">stream_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="393:17" pos:end="393:32"><expr pos:start="393:17" pos:end="393:31"><name pos:start="393:17" pos:end="393:26">stream_ptr</name> <operator pos:start="393:28" pos:end="393:29">+=</operator> <literal type="number" pos:start="393:31" pos:end="393:31">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="395:17" pos:end="395:35"><expr pos:start="395:17" pos:end="395:34"><name pos:start="395:17" pos:end="395:25">flag_mask</name> <operator pos:start="395:27" pos:end="395:27">=</operator> <literal type="number" pos:start="395:29" pos:end="395:34">0x8000</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="397:17" pos:end="397:48"><expr pos:start="397:17" pos:end="397:47"><name pos:start="397:17" pos:end="397:25">block_ptr</name> <operator pos:start="397:27" pos:end="397:27">=</operator> <name pos:start="397:29" pos:end="397:35">row_ptr</name> <operator pos:start="397:37" pos:end="397:37">+</operator> <name pos:start="397:39" pos:end="397:47">pixel_ptr</name></expr>;</expr_stmt>

                <for pos:start="399:17" pos:end="419:17">for <control pos:start="399:21" pos:end="399:57">(<init pos:start="399:22" pos:end="399:33"><expr pos:start="399:22" pos:end="399:32"><name pos:start="399:22" pos:end="399:28">pixel_y</name> <operator pos:start="399:30" pos:end="399:30">=</operator> <literal type="number" pos:start="399:32" pos:end="399:32">0</literal></expr>;</init> <condition pos:start="399:35" pos:end="399:46"><expr pos:start="399:35" pos:end="399:45"><name pos:start="399:35" pos:end="399:41">pixel_y</name> <operator pos:start="399:43" pos:end="399:43">&lt;</operator> <literal type="number" pos:start="399:45" pos:end="399:45">4</literal></expr>;</condition> <incr pos:start="399:48" pos:end="399:56"><expr pos:start="399:48" pos:end="399:56"><name pos:start="399:48" pos:end="399:54">pixel_y</name><operator pos:start="399:55" pos:end="399:56">++</operator></expr></incr>)</control> <block pos:start="399:59" pos:end="419:17">{<block_content pos:start="401:21" pos:end="417:41">

                    <for pos:start="401:21" pos:end="415:21">for <control pos:start="401:25" pos:end="401:61">(<init pos:start="401:26" pos:end="401:37"><expr pos:start="401:26" pos:end="401:36"><name pos:start="401:26" pos:end="401:32">pixel_x</name> <operator pos:start="401:34" pos:end="401:34">=</operator> <literal type="number" pos:start="401:36" pos:end="401:36">0</literal></expr>;</init> <condition pos:start="401:39" pos:end="401:50"><expr pos:start="401:39" pos:end="401:49"><name pos:start="401:39" pos:end="401:45">pixel_x</name> <operator pos:start="401:47" pos:end="401:47">&lt;</operator> <literal type="number" pos:start="401:49" pos:end="401:49">4</literal></expr>;</condition> <incr pos:start="401:52" pos:end="401:60"><expr pos:start="401:52" pos:end="401:60"><name pos:start="401:52" pos:end="401:58">pixel_x</name><operator pos:start="401:59" pos:end="401:60">++</operator></expr></incr>)</control> <block pos:start="401:63" pos:end="415:21">{<block_content pos:start="403:25" pos:end="413:68">

                        <if_stmt pos:start="403:25" pos:end="409:54"><if pos:start="403:25" pos:end="405:58">if <condition pos:start="403:28" pos:end="403:52">(<expr pos:start="403:29" pos:end="403:51"><name pos:start="403:29" pos:end="403:39">color_flags</name> <operator pos:start="403:41" pos:end="403:41">&amp;</operator> <name pos:start="403:43" pos:end="403:51">flag_mask</name></expr>)</condition><block type="pseudo" pos:start="405:29" pos:end="405:58"><block_content pos:start="405:29" pos:end="405:58">

                            <expr_stmt pos:start="405:29" pos:end="405:58"><expr pos:start="405:29" pos:end="405:57"><name pos:start="405:29" pos:end="405:33">pixel</name> <operator pos:start="405:35" pos:end="405:35">=</operator> <name pos:start="405:37" pos:end="405:53">color_table_index</name> <operator pos:start="405:55" pos:end="405:55">+</operator> <literal type="number" pos:start="405:57" pos:end="405:57">1</literal></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="407:25" pos:end="409:54">else<block type="pseudo" pos:start="409:29" pos:end="409:54"><block_content pos:start="409:29" pos:end="409:54">

                            <expr_stmt pos:start="409:29" pos:end="409:54"><expr pos:start="409:29" pos:end="409:53"><name pos:start="409:29" pos:end="409:33">pixel</name> <operator pos:start="409:35" pos:end="409:35">=</operator> <name pos:start="409:37" pos:end="409:53">color_table_index</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <expr_stmt pos:start="411:25" pos:end="411:40"><expr pos:start="411:25" pos:end="411:39"><name pos:start="411:25" pos:end="411:33">flag_mask</name> <operator pos:start="411:35" pos:end="411:37">&gt;&gt;=</operator> <literal type="number" pos:start="411:39" pos:end="411:39">1</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="413:25" pos:end="413:68"><expr pos:start="413:25" pos:end="413:67"><name pos:start="413:25" pos:end="413:43"><name pos:start="413:25" pos:end="413:30">pixels</name><index pos:start="413:31" pos:end="413:43">[<expr pos:start="413:32" pos:end="413:42"><name pos:start="413:32" pos:end="413:40">block_ptr</name><operator pos:start="413:41" pos:end="413:42">++</operator></expr>]</index></name> <operator pos:start="413:45" pos:end="413:45">=</operator> <name pos:start="413:47" pos:end="413:67"><name pos:start="413:47" pos:end="413:47">s</name><operator pos:start="413:48" pos:end="413:49">-&gt;</operator><name pos:start="413:50" pos:end="413:60">color_pairs</name><index pos:start="413:61" pos:end="413:67">[<expr pos:start="413:62" pos:end="413:66"><name pos:start="413:62" pos:end="413:66">pixel</name></expr>]</index></name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <expr_stmt pos:start="417:21" pos:end="417:41"><expr pos:start="417:21" pos:end="417:40"><name pos:start="417:21" pos:end="417:29">block_ptr</name> <operator pos:start="417:31" pos:end="417:32">+=</operator> <name pos:start="417:34" pos:end="417:40">row_inc</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="421:17" pos:end="421:32"><expr pos:start="421:17" pos:end="421:31"><call pos:start="421:17" pos:end="421:31"><name pos:start="421:17" pos:end="421:29">ADVANCE_BLOCK</name><argument_list pos:start="421:30" pos:end="421:31">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></while>

            <break pos:start="425:13" pos:end="425:18">break;</break>



        <comment type="block" pos:start="429:9" pos:end="429:36">/* 4-color block encoding */</comment>

        <case pos:start="431:9" pos:end="431:18">case <expr pos:start="431:14" pos:end="431:17"><literal type="number" pos:start="431:14" pos:end="431:17">0xA0</literal></expr>:</case>

        <case pos:start="433:9" pos:end="433:18">case <expr pos:start="433:14" pos:end="433:17"><literal type="number" pos:start="433:14" pos:end="433:17">0xB0</literal></expr>:</case>

            <expr_stmt pos:start="435:13" pos:end="435:43"><expr pos:start="435:13" pos:end="435:42"><name pos:start="435:13" pos:end="435:20">n_blocks</name> <operator pos:start="435:22" pos:end="435:22">=</operator> <operator pos:start="435:24" pos:end="435:24">(</operator><name pos:start="435:25" pos:end="435:30">opcode</name> <operator pos:start="435:32" pos:end="435:32">&amp;</operator> <literal type="number" pos:start="435:34" pos:end="435:37">0x0F</literal><operator pos:start="435:38" pos:end="435:38">)</operator> <operator pos:start="435:40" pos:end="435:40">+</operator> <literal type="number" pos:start="435:42" pos:end="435:42">1</literal></expr>;</expr_stmt>



            <comment type="block" pos:start="439:13" pos:end="439:79">/* figure out which color quad to use to paint the 4-color block */</comment>

            <if_stmt pos:start="441:13" pos:end="471:65"><if pos:start="441:13" pos:end="469:13">if <condition pos:start="441:16" pos:end="441:40">(<expr pos:start="441:17" pos:end="441:39"><operator pos:start="441:17" pos:end="441:17">(</operator><name pos:start="441:18" pos:end="441:23">opcode</name> <operator pos:start="441:25" pos:end="441:25">&amp;</operator> <literal type="number" pos:start="441:27" pos:end="441:30">0xF0</literal><operator pos:start="441:31" pos:end="441:31">)</operator> <operator pos:start="441:33" pos:end="441:34">==</operator> <literal type="number" pos:start="441:36" pos:end="441:39">0xA0</literal></expr>)</condition> <block pos:start="441:42" pos:end="469:13">{<block_content pos:start="447:17" pos:end="467:41">

                <comment type="block" pos:start="443:17" pos:end="445:61">/* fetch the next 4 colors from bytestream and store in next

                 * available entry in the color quad table */</comment>

                <for pos:start="447:17" pos:end="455:17">for <control pos:start="447:21" pos:end="447:43">(<init pos:start="447:22" pos:end="447:27"><expr pos:start="447:22" pos:end="447:26"><name pos:start="447:22" pos:end="447:22">i</name> <operator pos:start="447:24" pos:end="447:24">=</operator> <literal type="number" pos:start="447:26" pos:end="447:26">0</literal></expr>;</init> <condition pos:start="447:29" pos:end="447:38"><expr pos:start="447:29" pos:end="447:37"><name pos:start="447:29" pos:end="447:29">i</name> <operator pos:start="447:31" pos:end="447:31">&lt;</operator> <name pos:start="447:33" pos:end="447:37">CQUAD</name></expr>;</condition> <incr pos:start="447:40" pos:end="447:42"><expr pos:start="447:40" pos:end="447:42"><name pos:start="447:40" pos:end="447:40">i</name><operator pos:start="447:41" pos:end="447:42">++</operator></expr></incr>)</control> <block pos:start="447:45" pos:end="455:17">{<block_content pos:start="449:21" pos:end="453:62">

                    <expr_stmt pos:start="449:21" pos:end="449:49"><expr pos:start="449:21" pos:end="449:48"><name pos:start="449:21" pos:end="449:25">pixel</name> <operator pos:start="449:27" pos:end="449:27">=</operator> <name pos:start="449:29" pos:end="449:48"><name pos:start="449:29" pos:end="449:29">s</name><operator pos:start="449:30" pos:end="449:31">-&gt;</operator><name pos:start="449:32" pos:end="449:34">buf</name><index pos:start="449:35" pos:end="449:48">[<expr pos:start="449:36" pos:end="449:47"><name pos:start="449:36" pos:end="449:45">stream_ptr</name><operator pos:start="449:46" pos:end="449:47">++</operator></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="451:21" pos:end="451:69"><expr pos:start="451:21" pos:end="451:68"><name pos:start="451:21" pos:end="451:37">color_table_index</name> <operator pos:start="451:39" pos:end="451:39">=</operator> <name pos:start="451:41" pos:end="451:45">CQUAD</name> <operator pos:start="451:47" pos:end="451:47">*</operator> <name pos:start="451:49" pos:end="451:64">color_quad_index</name> <operator pos:start="451:66" pos:end="451:66">+</operator> <name pos:start="451:68" pos:end="451:68">i</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="453:21" pos:end="453:62"><expr pos:start="453:21" pos:end="453:61"><name pos:start="453:21" pos:end="453:53"><name pos:start="453:21" pos:end="453:21">s</name><operator pos:start="453:22" pos:end="453:23">-&gt;</operator><name pos:start="453:24" pos:end="453:34">color_quads</name><index pos:start="453:35" pos:end="453:53">[<expr pos:start="453:36" pos:end="453:52"><name pos:start="453:36" pos:end="453:52">color_table_index</name></expr>]</index></name> <operator pos:start="453:55" pos:end="453:55">=</operator> <name pos:start="453:57" pos:end="453:61">pixel</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <comment type="block" pos:start="457:17" pos:end="457:66">/* this is the base index to use for this block */</comment>

                <expr_stmt pos:start="459:17" pos:end="459:61"><expr pos:start="459:17" pos:end="459:60"><name pos:start="459:17" pos:end="459:33">color_table_index</name> <operator pos:start="459:35" pos:end="459:35">=</operator> <name pos:start="459:37" pos:end="459:41">CQUAD</name> <operator pos:start="459:43" pos:end="459:43">*</operator> <name pos:start="459:45" pos:end="459:60">color_quad_index</name></expr>;</expr_stmt>

                <expr_stmt pos:start="461:17" pos:end="461:35"><expr pos:start="461:17" pos:end="461:34"><name pos:start="461:17" pos:end="461:32">color_quad_index</name><operator pos:start="461:33" pos:end="461:34">++</operator></expr>;</expr_stmt>

                <comment type="block" pos:start="463:17" pos:end="463:32">/* wraparound */</comment>

                <if_stmt pos:start="465:17" pos:end="467:41"><if pos:start="465:17" pos:end="467:41">if <condition pos:start="465:20" pos:end="465:57">(<expr pos:start="465:21" pos:end="465:56"><name pos:start="465:21" pos:end="465:36">color_quad_index</name> <operator pos:start="465:38" pos:end="465:39">==</operator> <name pos:start="465:41" pos:end="465:56">COLORS_PER_TABLE</name></expr>)</condition><block type="pseudo" pos:start="467:21" pos:end="467:41"><block_content pos:start="467:21" pos:end="467:41">

                    <expr_stmt pos:start="467:21" pos:end="467:41"><expr pos:start="467:21" pos:end="467:40"><name pos:start="467:21" pos:end="467:36">color_quad_index</name> <operator pos:start="467:38" pos:end="467:38">=</operator> <literal type="number" pos:start="467:40" pos:end="467:40">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="469:15" pos:end="471:65">else<block type="pseudo" pos:start="471:17" pos:end="471:65"><block_content pos:start="471:17" pos:end="471:65">

                <expr_stmt pos:start="471:17" pos:end="471:65"><expr pos:start="471:17" pos:end="471:64"><name pos:start="471:17" pos:end="471:33">color_table_index</name> <operator pos:start="471:35" pos:end="471:35">=</operator> <name pos:start="471:37" pos:end="471:41">CQUAD</name> <operator pos:start="471:43" pos:end="471:43">*</operator> <name pos:start="471:45" pos:end="471:64"><name pos:start="471:45" pos:end="471:45">s</name><operator pos:start="471:46" pos:end="471:47">-&gt;</operator><name pos:start="471:48" pos:end="471:50">buf</name><index pos:start="471:51" pos:end="471:64">[<expr pos:start="471:52" pos:end="471:63"><name pos:start="471:52" pos:end="471:61">stream_ptr</name><operator pos:start="471:62" pos:end="471:63">++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <while pos:start="475:13" pos:end="507:13">while <condition pos:start="475:19" pos:end="475:30">(<expr pos:start="475:20" pos:end="475:29"><name pos:start="475:20" pos:end="475:27">n_blocks</name><operator pos:start="475:28" pos:end="475:29">--</operator></expr>)</condition> <block pos:start="475:32" pos:end="507:13">{<block_content pos:start="477:17" pos:end="505:32">

                <expr_stmt pos:start="477:17" pos:end="477:59"><expr pos:start="477:17" pos:end="477:58"><name pos:start="477:17" pos:end="477:27">color_flags</name> <operator pos:start="477:29" pos:end="477:29">=</operator> <call pos:start="477:31" pos:end="477:58"><name pos:start="477:31" pos:end="477:37">AV_RB32</name><argument_list pos:start="477:38" pos:end="477:58">(<argument pos:start="477:39" pos:end="477:57"><expr pos:start="477:39" pos:end="477:57"><operator pos:start="477:39" pos:end="477:39">&amp;</operator><name pos:start="477:40" pos:end="477:57"><name pos:start="477:40" pos:end="477:40">s</name><operator pos:start="477:41" pos:end="477:42">-&gt;</operator><name pos:start="477:43" pos:end="477:45">buf</name><index pos:start="477:46" pos:end="477:57">[<expr pos:start="477:47" pos:end="477:56"><name pos:start="477:47" pos:end="477:56">stream_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="479:17" pos:end="479:32"><expr pos:start="479:17" pos:end="479:31"><name pos:start="479:17" pos:end="479:26">stream_ptr</name> <operator pos:start="479:28" pos:end="479:29">+=</operator> <literal type="number" pos:start="479:31" pos:end="479:31">4</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="481:17" pos:end="481:71">/* flag mask actually acts as a bit shift count here */</comment>

                <expr_stmt pos:start="483:17" pos:end="483:31"><expr pos:start="483:17" pos:end="483:30"><name pos:start="483:17" pos:end="483:25">flag_mask</name> <operator pos:start="483:27" pos:end="483:27">=</operator> <literal type="number" pos:start="483:29" pos:end="483:30">30</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="485:17" pos:end="485:48"><expr pos:start="485:17" pos:end="485:47"><name pos:start="485:17" pos:end="485:25">block_ptr</name> <operator pos:start="485:27" pos:end="485:27">=</operator> <name pos:start="485:29" pos:end="485:35">row_ptr</name> <operator pos:start="485:37" pos:end="485:37">+</operator> <name pos:start="485:39" pos:end="485:47">pixel_ptr</name></expr>;</expr_stmt>

                <for pos:start="487:17" pos:end="503:17">for <control pos:start="487:21" pos:end="487:57">(<init pos:start="487:22" pos:end="487:33"><expr pos:start="487:22" pos:end="487:32"><name pos:start="487:22" pos:end="487:28">pixel_y</name> <operator pos:start="487:30" pos:end="487:30">=</operator> <literal type="number" pos:start="487:32" pos:end="487:32">0</literal></expr>;</init> <condition pos:start="487:35" pos:end="487:46"><expr pos:start="487:35" pos:end="487:45"><name pos:start="487:35" pos:end="487:41">pixel_y</name> <operator pos:start="487:43" pos:end="487:43">&lt;</operator> <literal type="number" pos:start="487:45" pos:end="487:45">4</literal></expr>;</condition> <incr pos:start="487:48" pos:end="487:56"><expr pos:start="487:48" pos:end="487:56"><name pos:start="487:48" pos:end="487:54">pixel_y</name><operator pos:start="487:55" pos:end="487:56">++</operator></expr></incr>)</control> <block pos:start="487:59" pos:end="503:17">{<block_content pos:start="489:21" pos:end="501:41">

                    <for pos:start="489:21" pos:end="499:21">for <control pos:start="489:25" pos:end="489:61">(<init pos:start="489:26" pos:end="489:37"><expr pos:start="489:26" pos:end="489:36"><name pos:start="489:26" pos:end="489:32">pixel_x</name> <operator pos:start="489:34" pos:end="489:34">=</operator> <literal type="number" pos:start="489:36" pos:end="489:36">0</literal></expr>;</init> <condition pos:start="489:39" pos:end="489:50"><expr pos:start="489:39" pos:end="489:49"><name pos:start="489:39" pos:end="489:45">pixel_x</name> <operator pos:start="489:47" pos:end="489:47">&lt;</operator> <literal type="number" pos:start="489:49" pos:end="489:49">4</literal></expr>;</condition> <incr pos:start="489:52" pos:end="489:60"><expr pos:start="489:52" pos:end="489:60"><name pos:start="489:52" pos:end="489:58">pixel_x</name><operator pos:start="489:59" pos:end="489:60">++</operator></expr></incr>)</control> <block pos:start="489:63" pos:end="499:21">{<block_content pos:start="491:25" pos:end="497:68">

                        <expr_stmt pos:start="491:25" pos:end="493:64"><expr pos:start="491:25" pos:end="493:63"><name pos:start="491:25" pos:end="491:29">pixel</name> <operator pos:start="491:31" pos:end="491:31">=</operator> <name pos:start="491:33" pos:end="491:49">color_table_index</name> <operator pos:start="491:51" pos:end="491:51">+</operator>

                            <operator pos:start="493:29" pos:end="493:29">(</operator><operator pos:start="493:30" pos:end="493:30">(</operator><name pos:start="493:31" pos:end="493:41">color_flags</name> <operator pos:start="493:43" pos:end="493:44">&gt;&gt;</operator> <name pos:start="493:46" pos:end="493:54">flag_mask</name><operator pos:start="493:55" pos:end="493:55">)</operator> <operator pos:start="493:57" pos:end="493:57">&amp;</operator> <literal type="number" pos:start="493:59" pos:end="493:62">0x03</literal><operator pos:start="493:63" pos:end="493:63">)</operator></expr>;</expr_stmt>

                        <expr_stmt pos:start="495:25" pos:end="495:39"><expr pos:start="495:25" pos:end="495:38"><name pos:start="495:25" pos:end="495:33">flag_mask</name> <operator pos:start="495:35" pos:end="495:36">-=</operator> <literal type="number" pos:start="495:38" pos:end="495:38">2</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="497:25" pos:end="497:68"><expr pos:start="497:25" pos:end="497:67"><name pos:start="497:25" pos:end="497:43"><name pos:start="497:25" pos:end="497:30">pixels</name><index pos:start="497:31" pos:end="497:43">[<expr pos:start="497:32" pos:end="497:42"><name pos:start="497:32" pos:end="497:40">block_ptr</name><operator pos:start="497:41" pos:end="497:42">++</operator></expr>]</index></name> <operator pos:start="497:45" pos:end="497:45">=</operator> <name pos:start="497:47" pos:end="497:67"><name pos:start="497:47" pos:end="497:47">s</name><operator pos:start="497:48" pos:end="497:49">-&gt;</operator><name pos:start="497:50" pos:end="497:60">color_quads</name><index pos:start="497:61" pos:end="497:67">[<expr pos:start="497:62" pos:end="497:66"><name pos:start="497:62" pos:end="497:66">pixel</name></expr>]</index></name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <expr_stmt pos:start="501:21" pos:end="501:41"><expr pos:start="501:21" pos:end="501:40"><name pos:start="501:21" pos:end="501:29">block_ptr</name> <operator pos:start="501:31" pos:end="501:32">+=</operator> <name pos:start="501:34" pos:end="501:40">row_inc</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="505:17" pos:end="505:32"><expr pos:start="505:17" pos:end="505:31"><call pos:start="505:17" pos:end="505:31"><name pos:start="505:17" pos:end="505:29">ADVANCE_BLOCK</name><argument_list pos:start="505:30" pos:end="505:31">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></while>

            <break pos:start="509:13" pos:end="509:18">break;</break>



        <comment type="block" pos:start="513:9" pos:end="513:36">/* 8-color block encoding */</comment>

        <case pos:start="515:9" pos:end="515:18">case <expr pos:start="515:14" pos:end="515:17"><literal type="number" pos:start="515:14" pos:end="515:17">0xC0</literal></expr>:</case>

        <case pos:start="517:9" pos:end="517:18">case <expr pos:start="517:14" pos:end="517:17"><literal type="number" pos:start="517:14" pos:end="517:17">0xD0</literal></expr>:</case>

            <expr_stmt pos:start="519:13" pos:end="519:43"><expr pos:start="519:13" pos:end="519:42"><name pos:start="519:13" pos:end="519:20">n_blocks</name> <operator pos:start="519:22" pos:end="519:22">=</operator> <operator pos:start="519:24" pos:end="519:24">(</operator><name pos:start="519:25" pos:end="519:30">opcode</name> <operator pos:start="519:32" pos:end="519:32">&amp;</operator> <literal type="number" pos:start="519:34" pos:end="519:37">0x0F</literal><operator pos:start="519:38" pos:end="519:38">)</operator> <operator pos:start="519:40" pos:end="519:40">+</operator> <literal type="number" pos:start="519:42" pos:end="519:42">1</literal></expr>;</expr_stmt>



            <comment type="block" pos:start="523:13" pos:end="523:80">/* figure out which color octet to use to paint the 8-color block */</comment>

            <if_stmt pos:start="525:13" pos:end="555:66"><if pos:start="525:13" pos:end="553:13">if <condition pos:start="525:16" pos:end="525:40">(<expr pos:start="525:17" pos:end="525:39"><operator pos:start="525:17" pos:end="525:17">(</operator><name pos:start="525:18" pos:end="525:23">opcode</name> <operator pos:start="525:25" pos:end="525:25">&amp;</operator> <literal type="number" pos:start="525:27" pos:end="525:30">0xF0</literal><operator pos:start="525:31" pos:end="525:31">)</operator> <operator pos:start="525:33" pos:end="525:34">==</operator> <literal type="number" pos:start="525:36" pos:end="525:39">0xC0</literal></expr>)</condition> <block pos:start="525:42" pos:end="553:13">{<block_content pos:start="531:17" pos:end="551:42">

                <comment type="block" pos:start="527:17" pos:end="529:62">/* fetch the next 8 colors from bytestream and store in next

                 * available entry in the color octet table */</comment>

                <for pos:start="531:17" pos:end="539:17">for <control pos:start="531:21" pos:end="531:44">(<init pos:start="531:22" pos:end="531:27"><expr pos:start="531:22" pos:end="531:26"><name pos:start="531:22" pos:end="531:22">i</name> <operator pos:start="531:24" pos:end="531:24">=</operator> <literal type="number" pos:start="531:26" pos:end="531:26">0</literal></expr>;</init> <condition pos:start="531:29" pos:end="531:39"><expr pos:start="531:29" pos:end="531:38"><name pos:start="531:29" pos:end="531:29">i</name> <operator pos:start="531:31" pos:end="531:31">&lt;</operator> <name pos:start="531:33" pos:end="531:38">COCTET</name></expr>;</condition> <incr pos:start="531:41" pos:end="531:43"><expr pos:start="531:41" pos:end="531:43"><name pos:start="531:41" pos:end="531:41">i</name><operator pos:start="531:42" pos:end="531:43">++</operator></expr></incr>)</control> <block pos:start="531:46" pos:end="539:17">{<block_content pos:start="533:21" pos:end="537:63">

                    <expr_stmt pos:start="533:21" pos:end="533:49"><expr pos:start="533:21" pos:end="533:48"><name pos:start="533:21" pos:end="533:25">pixel</name> <operator pos:start="533:27" pos:end="533:27">=</operator> <name pos:start="533:29" pos:end="533:48"><name pos:start="533:29" pos:end="533:29">s</name><operator pos:start="533:30" pos:end="533:31">-&gt;</operator><name pos:start="533:32" pos:end="533:34">buf</name><index pos:start="533:35" pos:end="533:48">[<expr pos:start="533:36" pos:end="533:47"><name pos:start="533:36" pos:end="533:45">stream_ptr</name><operator pos:start="533:46" pos:end="533:47">++</operator></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="535:21" pos:end="535:71"><expr pos:start="535:21" pos:end="535:70"><name pos:start="535:21" pos:end="535:37">color_table_index</name> <operator pos:start="535:39" pos:end="535:39">=</operator> <name pos:start="535:41" pos:end="535:46">COCTET</name> <operator pos:start="535:48" pos:end="535:48">*</operator> <name pos:start="535:50" pos:end="535:66">color_octet_index</name> <operator pos:start="535:68" pos:end="535:68">+</operator> <name pos:start="535:70" pos:end="535:70">i</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="537:21" pos:end="537:63"><expr pos:start="537:21" pos:end="537:62"><name pos:start="537:21" pos:end="537:54"><name pos:start="537:21" pos:end="537:21">s</name><operator pos:start="537:22" pos:end="537:23">-&gt;</operator><name pos:start="537:24" pos:end="537:35">color_octets</name><index pos:start="537:36" pos:end="537:54">[<expr pos:start="537:37" pos:end="537:53"><name pos:start="537:37" pos:end="537:53">color_table_index</name></expr>]</index></name> <operator pos:start="537:56" pos:end="537:56">=</operator> <name pos:start="537:58" pos:end="537:62">pixel</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <comment type="block" pos:start="541:17" pos:end="541:66">/* this is the base index to use for this block */</comment>

                <expr_stmt pos:start="543:17" pos:end="543:63"><expr pos:start="543:17" pos:end="543:62"><name pos:start="543:17" pos:end="543:33">color_table_index</name> <operator pos:start="543:35" pos:end="543:35">=</operator> <name pos:start="543:37" pos:end="543:42">COCTET</name> <operator pos:start="543:44" pos:end="543:44">*</operator> <name pos:start="543:46" pos:end="543:62">color_octet_index</name></expr>;</expr_stmt>

                <expr_stmt pos:start="545:17" pos:end="545:36"><expr pos:start="545:17" pos:end="545:35"><name pos:start="545:17" pos:end="545:33">color_octet_index</name><operator pos:start="545:34" pos:end="545:35">++</operator></expr>;</expr_stmt>

                <comment type="block" pos:start="547:17" pos:end="547:32">/* wraparound */</comment>

                <if_stmt pos:start="549:17" pos:end="551:42"><if pos:start="549:17" pos:end="551:42">if <condition pos:start="549:20" pos:end="549:58">(<expr pos:start="549:21" pos:end="549:57"><name pos:start="549:21" pos:end="549:37">color_octet_index</name> <operator pos:start="549:39" pos:end="549:40">==</operator> <name pos:start="549:42" pos:end="549:57">COLORS_PER_TABLE</name></expr>)</condition><block type="pseudo" pos:start="551:21" pos:end="551:42"><block_content pos:start="551:21" pos:end="551:42">

                    <expr_stmt pos:start="551:21" pos:end="551:42"><expr pos:start="551:21" pos:end="551:41"><name pos:start="551:21" pos:end="551:37">color_octet_index</name> <operator pos:start="551:39" pos:end="551:39">=</operator> <literal type="number" pos:start="551:41" pos:end="551:41">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="553:15" pos:end="555:66">else<block type="pseudo" pos:start="555:17" pos:end="555:66"><block_content pos:start="555:17" pos:end="555:66">

                <expr_stmt pos:start="555:17" pos:end="555:66"><expr pos:start="555:17" pos:end="555:65"><name pos:start="555:17" pos:end="555:33">color_table_index</name> <operator pos:start="555:35" pos:end="555:35">=</operator> <name pos:start="555:37" pos:end="555:42">COCTET</name> <operator pos:start="555:44" pos:end="555:44">*</operator> <name pos:start="555:46" pos:end="555:65"><name pos:start="555:46" pos:end="555:46">s</name><operator pos:start="555:47" pos:end="555:48">-&gt;</operator><name pos:start="555:49" pos:end="555:51">buf</name><index pos:start="555:52" pos:end="555:65">[<expr pos:start="555:53" pos:end="555:64"><name pos:start="555:53" pos:end="555:62">stream_ptr</name><operator pos:start="555:63" pos:end="555:64">++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <while pos:start="559:13" pos:end="633:13">while <condition pos:start="559:19" pos:end="559:30">(<expr pos:start="559:20" pos:end="559:29"><name pos:start="559:20" pos:end="559:27">n_blocks</name><operator pos:start="559:28" pos:end="559:29">--</operator></expr>)</condition> <block pos:start="559:32" pos:end="633:13">{<block_content pos:start="575:17" pos:end="631:32">

                <comment type="block" pos:start="561:17" pos:end="571:18">/*

                  For this input of 6 hex bytes:

                    01 23 45 67 89 AB

                  Mangle it to this output:

                    flags_a = xx012456, flags_b = xx89A37B

                */</comment>

                <comment type="block" pos:start="573:17" pos:end="573:43">/* build the color flags */</comment>

                <expr_stmt pos:start="575:17" pos:end="579:61"><expr pos:start="575:17" pos:end="579:60"><name pos:start="575:17" pos:end="575:29">color_flags_a</name> <operator pos:start="575:31" pos:end="575:31">=</operator>

                    <operator pos:start="577:21" pos:end="577:21">(</operator><operator pos:start="577:22" pos:end="577:22">(</operator><call pos:start="577:23" pos:end="577:54"><name pos:start="577:23" pos:end="577:29">AV_RB16</name><argument_list pos:start="577:30" pos:end="577:54">(<argument pos:start="577:31" pos:end="577:49"><expr pos:start="577:31" pos:end="577:49"><name pos:start="577:31" pos:end="577:36"><name pos:start="577:31" pos:end="577:31">s</name><operator pos:start="577:32" pos:end="577:33">-&gt;</operator><name pos:start="577:34" pos:end="577:36">buf</name></name> <operator pos:start="577:38" pos:end="577:38">+</operator> <name pos:start="577:40" pos:end="577:49">stream_ptr</name></expr></argument>    )</argument_list></call> <operator pos:start="577:56" pos:end="577:56">&amp;</operator> <literal type="number" pos:start="577:58" pos:end="577:63">0xFFF0</literal><operator pos:start="577:64" pos:end="577:64">)</operator> <operator pos:start="577:66" pos:end="577:67">&lt;&lt;</operator> <literal type="number" pos:start="577:69" pos:end="577:69">8</literal><operator pos:start="577:70" pos:end="577:70">)</operator> <operator pos:start="577:72" pos:end="577:72">|</operator>

                     <operator pos:start="579:22" pos:end="579:22">(</operator><call pos:start="579:23" pos:end="579:54"><name pos:start="579:23" pos:end="579:29">AV_RB16</name><argument_list pos:start="579:30" pos:end="579:54">(<argument pos:start="579:31" pos:end="579:53"><expr pos:start="579:31" pos:end="579:53"><name pos:start="579:31" pos:end="579:36"><name pos:start="579:31" pos:end="579:31">s</name><operator pos:start="579:32" pos:end="579:33">-&gt;</operator><name pos:start="579:34" pos:end="579:36">buf</name></name> <operator pos:start="579:38" pos:end="579:38">+</operator> <name pos:start="579:40" pos:end="579:49">stream_ptr</name> <operator pos:start="579:51" pos:end="579:51">+</operator> <literal type="number" pos:start="579:53" pos:end="579:53">2</literal></expr></argument>)</argument_list></call> <operator pos:start="579:56" pos:end="579:57">&gt;&gt;</operator> <literal type="number" pos:start="579:59" pos:end="579:59">4</literal><operator pos:start="579:60" pos:end="579:60">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="581:17" pos:end="589:52"><expr pos:start="581:17" pos:end="589:51"><name pos:start="581:17" pos:end="581:29">color_flags_b</name> <operator pos:start="581:31" pos:end="581:31">=</operator>

                    <operator pos:start="583:21" pos:end="583:21">(</operator><operator pos:start="583:22" pos:end="583:22">(</operator><call pos:start="583:23" pos:end="583:54"><name pos:start="583:23" pos:end="583:29">AV_RB16</name><argument_list pos:start="583:30" pos:end="583:54">(<argument pos:start="583:31" pos:end="583:53"><expr pos:start="583:31" pos:end="583:53"><name pos:start="583:31" pos:end="583:36"><name pos:start="583:31" pos:end="583:31">s</name><operator pos:start="583:32" pos:end="583:33">-&gt;</operator><name pos:start="583:34" pos:end="583:36">buf</name></name> <operator pos:start="583:38" pos:end="583:38">+</operator> <name pos:start="583:40" pos:end="583:49">stream_ptr</name> <operator pos:start="583:51" pos:end="583:51">+</operator> <literal type="number" pos:start="583:53" pos:end="583:53">4</literal></expr></argument>)</argument_list></call> <operator pos:start="583:56" pos:end="583:56">&amp;</operator> <literal type="number" pos:start="583:58" pos:end="583:63">0xFFF0</literal><operator pos:start="583:64" pos:end="583:64">)</operator> <operator pos:start="583:66" pos:end="583:67">&lt;&lt;</operator> <literal type="number" pos:start="583:69" pos:end="583:69">8</literal><operator pos:start="583:70" pos:end="583:70">)</operator> <operator pos:start="583:72" pos:end="583:72">|</operator>

                    <operator pos:start="585:21" pos:end="585:21">(</operator><operator pos:start="585:22" pos:end="585:22">(</operator><name pos:start="585:23" pos:end="585:44"><name pos:start="585:23" pos:end="585:23">s</name><operator pos:start="585:24" pos:end="585:25">-&gt;</operator><name pos:start="585:26" pos:end="585:28">buf</name><index pos:start="585:29" pos:end="585:44">[<expr pos:start="585:30" pos:end="585:43"><name pos:start="585:30" pos:end="585:39">stream_ptr</name> <operator pos:start="585:41" pos:end="585:41">+</operator> <literal type="number" pos:start="585:43" pos:end="585:43">1</literal></expr>]</index></name> <operator pos:start="585:46" pos:end="585:46">&amp;</operator> <literal type="number" pos:start="585:48" pos:end="585:51">0x0F</literal><operator pos:start="585:52" pos:end="585:52">)</operator> <operator pos:start="585:54" pos:end="585:55">&lt;&lt;</operator> <literal type="number" pos:start="585:57" pos:end="585:57">8</literal><operator pos:start="585:58" pos:end="585:58">)</operator> <operator pos:start="585:60" pos:end="585:60">|</operator>

                    <operator pos:start="587:21" pos:end="587:21">(</operator><operator pos:start="587:22" pos:end="587:22">(</operator><name pos:start="587:23" pos:end="587:44"><name pos:start="587:23" pos:end="587:23">s</name><operator pos:start="587:24" pos:end="587:25">-&gt;</operator><name pos:start="587:26" pos:end="587:28">buf</name><index pos:start="587:29" pos:end="587:44">[<expr pos:start="587:30" pos:end="587:43"><name pos:start="587:30" pos:end="587:39">stream_ptr</name> <operator pos:start="587:41" pos:end="587:41">+</operator> <literal type="number" pos:start="587:43" pos:end="587:43">3</literal></expr>]</index></name> <operator pos:start="587:46" pos:end="587:46">&amp;</operator> <literal type="number" pos:start="587:48" pos:end="587:51">0x0F</literal><operator pos:start="587:52" pos:end="587:52">)</operator> <operator pos:start="587:54" pos:end="587:55">&lt;&lt;</operator> <literal type="number" pos:start="587:57" pos:end="587:57">4</literal><operator pos:start="587:58" pos:end="587:58">)</operator> <operator pos:start="587:60" pos:end="587:60">|</operator>

                    <operator pos:start="589:21" pos:end="589:21">(</operator><name pos:start="589:22" pos:end="589:43"><name pos:start="589:22" pos:end="589:22">s</name><operator pos:start="589:23" pos:end="589:24">-&gt;</operator><name pos:start="589:25" pos:end="589:27">buf</name><index pos:start="589:28" pos:end="589:43">[<expr pos:start="589:29" pos:end="589:42"><name pos:start="589:29" pos:end="589:38">stream_ptr</name> <operator pos:start="589:40" pos:end="589:40">+</operator> <literal type="number" pos:start="589:42" pos:end="589:42">5</literal></expr>]</index></name> <operator pos:start="589:45" pos:end="589:45">&amp;</operator> <literal type="number" pos:start="589:47" pos:end="589:50">0x0F</literal><operator pos:start="589:51" pos:end="589:51">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="591:17" pos:end="591:32"><expr pos:start="591:17" pos:end="591:31"><name pos:start="591:17" pos:end="591:26">stream_ptr</name> <operator pos:start="591:28" pos:end="591:29">+=</operator> <literal type="number" pos:start="591:31" pos:end="591:31">6</literal></expr>;</expr_stmt>



                <expr_stmt pos:start="595:17" pos:end="595:44"><expr pos:start="595:17" pos:end="595:43"><name pos:start="595:17" pos:end="595:27">color_flags</name> <operator pos:start="595:29" pos:end="595:29">=</operator> <name pos:start="595:31" pos:end="595:43">color_flags_a</name></expr>;</expr_stmt>

                <comment type="block" pos:start="597:17" pos:end="597:71">/* flag mask actually acts as a bit shift count here */</comment>

                <expr_stmt pos:start="599:17" pos:end="599:31"><expr pos:start="599:17" pos:end="599:30"><name pos:start="599:17" pos:end="599:25">flag_mask</name> <operator pos:start="599:27" pos:end="599:27">=</operator> <literal type="number" pos:start="599:29" pos:end="599:30">21</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="601:17" pos:end="601:48"><expr pos:start="601:17" pos:end="601:47"><name pos:start="601:17" pos:end="601:25">block_ptr</name> <operator pos:start="601:27" pos:end="601:27">=</operator> <name pos:start="601:29" pos:end="601:35">row_ptr</name> <operator pos:start="601:37" pos:end="601:37">+</operator> <name pos:start="601:39" pos:end="601:47">pixel_ptr</name></expr>;</expr_stmt>

                <for pos:start="603:17" pos:end="629:17">for <control pos:start="603:21" pos:end="603:57">(<init pos:start="603:22" pos:end="603:33"><expr pos:start="603:22" pos:end="603:32"><name pos:start="603:22" pos:end="603:28">pixel_y</name> <operator pos:start="603:30" pos:end="603:30">=</operator> <literal type="number" pos:start="603:32" pos:end="603:32">0</literal></expr>;</init> <condition pos:start="603:35" pos:end="603:46"><expr pos:start="603:35" pos:end="603:45"><name pos:start="603:35" pos:end="603:41">pixel_y</name> <operator pos:start="603:43" pos:end="603:43">&lt;</operator> <literal type="number" pos:start="603:45" pos:end="603:45">4</literal></expr>;</condition> <incr pos:start="603:48" pos:end="603:56"><expr pos:start="603:48" pos:end="603:56"><name pos:start="603:48" pos:end="603:54">pixel_y</name><operator pos:start="603:55" pos:end="603:56">++</operator></expr></incr>)</control> <block pos:start="603:59" pos:end="629:17">{<block_content pos:start="607:21" pos:end="627:41">

                    <comment type="block" pos:start="605:21" pos:end="605:76">/* reload flags at third row (iteration pixel_y == 2) */</comment>

                    <if_stmt pos:start="607:21" pos:end="613:21"><if pos:start="607:21" pos:end="613:21">if <condition pos:start="607:24" pos:end="607:37">(<expr pos:start="607:25" pos:end="607:36"><name pos:start="607:25" pos:end="607:31">pixel_y</name> <operator pos:start="607:33" pos:end="607:34">==</operator> <literal type="number" pos:start="607:36" pos:end="607:36">2</literal></expr>)</condition> <block pos:start="607:39" pos:end="613:21">{<block_content pos:start="609:25" pos:end="611:39">

                        <expr_stmt pos:start="609:25" pos:end="609:52"><expr pos:start="609:25" pos:end="609:51"><name pos:start="609:25" pos:end="609:35">color_flags</name> <operator pos:start="609:37" pos:end="609:37">=</operator> <name pos:start="609:39" pos:end="609:51">color_flags_b</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="611:25" pos:end="611:39"><expr pos:start="611:25" pos:end="611:38"><name pos:start="611:25" pos:end="611:33">flag_mask</name> <operator pos:start="611:35" pos:end="611:35">=</operator> <literal type="number" pos:start="611:37" pos:end="611:38">21</literal></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <for pos:start="615:21" pos:end="625:21">for <control pos:start="615:25" pos:end="615:61">(<init pos:start="615:26" pos:end="615:37"><expr pos:start="615:26" pos:end="615:36"><name pos:start="615:26" pos:end="615:32">pixel_x</name> <operator pos:start="615:34" pos:end="615:34">=</operator> <literal type="number" pos:start="615:36" pos:end="615:36">0</literal></expr>;</init> <condition pos:start="615:39" pos:end="615:50"><expr pos:start="615:39" pos:end="615:49"><name pos:start="615:39" pos:end="615:45">pixel_x</name> <operator pos:start="615:47" pos:end="615:47">&lt;</operator> <literal type="number" pos:start="615:49" pos:end="615:49">4</literal></expr>;</condition> <incr pos:start="615:52" pos:end="615:60"><expr pos:start="615:52" pos:end="615:60"><name pos:start="615:52" pos:end="615:58">pixel_x</name><operator pos:start="615:59" pos:end="615:60">++</operator></expr></incr>)</control> <block pos:start="615:63" pos:end="625:21">{<block_content pos:start="617:25" pos:end="623:69">

                        <expr_stmt pos:start="617:25" pos:end="619:64"><expr pos:start="617:25" pos:end="619:63"><name pos:start="617:25" pos:end="617:29">pixel</name> <operator pos:start="617:31" pos:end="617:31">=</operator> <name pos:start="617:33" pos:end="617:49">color_table_index</name> <operator pos:start="617:51" pos:end="617:51">+</operator>

                            <operator pos:start="619:29" pos:end="619:29">(</operator><operator pos:start="619:30" pos:end="619:30">(</operator><name pos:start="619:31" pos:end="619:41">color_flags</name> <operator pos:start="619:43" pos:end="619:44">&gt;&gt;</operator> <name pos:start="619:46" pos:end="619:54">flag_mask</name><operator pos:start="619:55" pos:end="619:55">)</operator> <operator pos:start="619:57" pos:end="619:57">&amp;</operator> <literal type="number" pos:start="619:59" pos:end="619:62">0x07</literal><operator pos:start="619:63" pos:end="619:63">)</operator></expr>;</expr_stmt>

                        <expr_stmt pos:start="621:25" pos:end="621:39"><expr pos:start="621:25" pos:end="621:38"><name pos:start="621:25" pos:end="621:33">flag_mask</name> <operator pos:start="621:35" pos:end="621:36">-=</operator> <literal type="number" pos:start="621:38" pos:end="621:38">3</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="623:25" pos:end="623:69"><expr pos:start="623:25" pos:end="623:68"><name pos:start="623:25" pos:end="623:43"><name pos:start="623:25" pos:end="623:30">pixels</name><index pos:start="623:31" pos:end="623:43">[<expr pos:start="623:32" pos:end="623:42"><name pos:start="623:32" pos:end="623:40">block_ptr</name><operator pos:start="623:41" pos:end="623:42">++</operator></expr>]</index></name> <operator pos:start="623:45" pos:end="623:45">=</operator> <name pos:start="623:47" pos:end="623:68"><name pos:start="623:47" pos:end="623:47">s</name><operator pos:start="623:48" pos:end="623:49">-&gt;</operator><name pos:start="623:50" pos:end="623:61">color_octets</name><index pos:start="623:62" pos:end="623:68">[<expr pos:start="623:63" pos:end="623:67"><name pos:start="623:63" pos:end="623:67">pixel</name></expr>]</index></name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <expr_stmt pos:start="627:21" pos:end="627:41"><expr pos:start="627:21" pos:end="627:40"><name pos:start="627:21" pos:end="627:29">block_ptr</name> <operator pos:start="627:31" pos:end="627:32">+=</operator> <name pos:start="627:34" pos:end="627:40">row_inc</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="631:17" pos:end="631:32"><expr pos:start="631:17" pos:end="631:31"><call pos:start="631:17" pos:end="631:31"><name pos:start="631:17" pos:end="631:29">ADVANCE_BLOCK</name><argument_list pos:start="631:30" pos:end="631:31">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></while>

            <break pos:start="635:13" pos:end="635:18">break;</break>



        <comment type="block" pos:start="639:9" pos:end="639:72">/* 16-color block encoding (every pixel is a different color) */</comment>

        <case pos:start="641:9" pos:end="641:18">case <expr pos:start="641:14" pos:end="641:17"><literal type="number" pos:start="641:14" pos:end="641:17">0xE0</literal></expr>:</case>

            <expr_stmt pos:start="643:13" pos:end="643:43"><expr pos:start="643:13" pos:end="643:42"><name pos:start="643:13" pos:end="643:20">n_blocks</name> <operator pos:start="643:22" pos:end="643:22">=</operator> <operator pos:start="643:24" pos:end="643:24">(</operator><name pos:start="643:25" pos:end="643:30">opcode</name> <operator pos:start="643:32" pos:end="643:32">&amp;</operator> <literal type="number" pos:start="643:34" pos:end="643:37">0x0F</literal><operator pos:start="643:38" pos:end="643:38">)</operator> <operator pos:start="643:40" pos:end="643:40">+</operator> <literal type="number" pos:start="643:42" pos:end="643:42">1</literal></expr>;</expr_stmt>



            <while pos:start="647:13" pos:end="665:13">while <condition pos:start="647:19" pos:end="647:30">(<expr pos:start="647:20" pos:end="647:29"><name pos:start="647:20" pos:end="647:27">n_blocks</name><operator pos:start="647:28" pos:end="647:29">--</operator></expr>)</condition> <block pos:start="647:32" pos:end="665:13">{<block_content pos:start="649:17" pos:end="663:32">

                <expr_stmt pos:start="649:17" pos:end="649:48"><expr pos:start="649:17" pos:end="649:47"><name pos:start="649:17" pos:end="649:25">block_ptr</name> <operator pos:start="649:27" pos:end="649:27">=</operator> <name pos:start="649:29" pos:end="649:35">row_ptr</name> <operator pos:start="649:37" pos:end="649:37">+</operator> <name pos:start="649:39" pos:end="649:47">pixel_ptr</name></expr>;</expr_stmt>

                <for pos:start="651:17" pos:end="661:17">for <control pos:start="651:21" pos:end="651:57">(<init pos:start="651:22" pos:end="651:33"><expr pos:start="651:22" pos:end="651:32"><name pos:start="651:22" pos:end="651:28">pixel_y</name> <operator pos:start="651:30" pos:end="651:30">=</operator> <literal type="number" pos:start="651:32" pos:end="651:32">0</literal></expr>;</init> <condition pos:start="651:35" pos:end="651:46"><expr pos:start="651:35" pos:end="651:45"><name pos:start="651:35" pos:end="651:41">pixel_y</name> <operator pos:start="651:43" pos:end="651:43">&lt;</operator> <literal type="number" pos:start="651:45" pos:end="651:45">4</literal></expr>;</condition> <incr pos:start="651:48" pos:end="651:56"><expr pos:start="651:48" pos:end="651:56"><name pos:start="651:48" pos:end="651:54">pixel_y</name><operator pos:start="651:55" pos:end="651:56">++</operator></expr></incr>)</control> <block pos:start="651:59" pos:end="661:17">{<block_content pos:start="653:21" pos:end="659:41">

                    <for pos:start="653:21" pos:end="657:21">for <control pos:start="653:25" pos:end="653:61">(<init pos:start="653:26" pos:end="653:37"><expr pos:start="653:26" pos:end="653:36"><name pos:start="653:26" pos:end="653:32">pixel_x</name> <operator pos:start="653:34" pos:end="653:34">=</operator> <literal type="number" pos:start="653:36" pos:end="653:36">0</literal></expr>;</init> <condition pos:start="653:39" pos:end="653:50"><expr pos:start="653:39" pos:end="653:49"><name pos:start="653:39" pos:end="653:45">pixel_x</name> <operator pos:start="653:47" pos:end="653:47">&lt;</operator> <literal type="number" pos:start="653:49" pos:end="653:49">4</literal></expr>;</condition> <incr pos:start="653:52" pos:end="653:60"><expr pos:start="653:52" pos:end="653:60"><name pos:start="653:52" pos:end="653:58">pixel_x</name><operator pos:start="653:59" pos:end="653:60">++</operator></expr></incr>)</control> <block pos:start="653:63" pos:end="657:21">{<block_content pos:start="655:25" pos:end="655:67">

                        <expr_stmt pos:start="655:25" pos:end="655:67"><expr pos:start="655:25" pos:end="655:66"><name pos:start="655:25" pos:end="655:43"><name pos:start="655:25" pos:end="655:30">pixels</name><index pos:start="655:31" pos:end="655:43">[<expr pos:start="655:32" pos:end="655:42"><name pos:start="655:32" pos:end="655:40">block_ptr</name><operator pos:start="655:41" pos:end="655:42">++</operator></expr>]</index></name> <operator pos:start="655:45" pos:end="655:45">=</operator> <name pos:start="655:47" pos:end="655:66"><name pos:start="655:47" pos:end="655:47">s</name><operator pos:start="655:48" pos:end="655:49">-&gt;</operator><name pos:start="655:50" pos:end="655:52">buf</name><index pos:start="655:53" pos:end="655:66">[<expr pos:start="655:54" pos:end="655:65"><name pos:start="655:54" pos:end="655:63">stream_ptr</name><operator pos:start="655:64" pos:end="655:65">++</operator></expr>]</index></name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <expr_stmt pos:start="659:21" pos:end="659:41"><expr pos:start="659:21" pos:end="659:40"><name pos:start="659:21" pos:end="659:29">block_ptr</name> <operator pos:start="659:31" pos:end="659:32">+=</operator> <name pos:start="659:34" pos:end="659:40">row_inc</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="663:17" pos:end="663:32"><expr pos:start="663:17" pos:end="663:31"><call pos:start="663:17" pos:end="663:31"><name pos:start="663:17" pos:end="663:29">ADVANCE_BLOCK</name><argument_list pos:start="663:30" pos:end="663:31">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></while>

            <break pos:start="667:13" pos:end="667:18">break;</break>



        <case pos:start="671:9" pos:end="671:18">case <expr pos:start="671:14" pos:end="671:17"><literal type="number" pos:start="671:14" pos:end="671:17">0xF0</literal></expr>:</case>

            <expr_stmt pos:start="673:13" pos:end="673:102"><expr pos:start="673:13" pos:end="673:101"><call pos:start="673:13" pos:end="673:101"><name pos:start="673:13" pos:end="673:18">av_log</name><argument_list pos:start="673:19" pos:end="673:101">(<argument pos:start="673:20" pos:end="673:27"><expr pos:start="673:20" pos:end="673:27"><name pos:start="673:20" pos:end="673:27"><name pos:start="673:20" pos:end="673:20">s</name><operator pos:start="673:21" pos:end="673:22">-&gt;</operator><name pos:start="673:23" pos:end="673:27">avctx</name></name></expr></argument>, <argument pos:start="673:30" pos:end="673:40"><expr pos:start="673:30" pos:end="673:40"><name pos:start="673:30" pos:end="673:40">AV_LOG_INFO</name></expr></argument>, <argument pos:start="673:43" pos:end="673:100"><expr pos:start="673:43" pos:end="673:100"><literal type="string" pos:start="673:43" pos:end="673:100">"0xF0 opcode seen in SMC chunk (contact the developers)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="675:13" pos:end="675:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
