<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23014.c" pos:tabs="8"><function pos:start="1:1" pos:end="193:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">sun4m_hw_init</name><parameter_list pos:start="1:26" pos:end="3:66">(<parameter pos:start="1:27" pos:end="1:51"><decl pos:start="1:27" pos:end="1:51"><type pos:start="1:27" pos:end="1:51"><specifier pos:start="1:27" pos:end="1:31">const</specifier> <name pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:38">struct</name> <name pos:start="1:40" pos:end="1:44">hwdef</name></name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">hwdef</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:65"><decl pos:start="1:54" pos:end="1:65"><type pos:start="1:54" pos:end="1:65"><name pos:start="1:54" pos:end="1:56">int</name></type> <name pos:start="1:58" pos:end="1:65">ram_size</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:42"><decl pos:start="3:27" pos:end="3:42"><type pos:start="3:27" pos:end="3:42"><name pos:start="3:27" pos:end="3:38">DisplayState</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:42">ds</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:65"><decl pos:start="3:45" pos:end="3:65"><type pos:start="3:45" pos:end="3:65"><specifier pos:start="3:45" pos:end="3:49">const</specifier> <name pos:start="3:51" pos:end="3:54">char</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier></type><name pos:start="3:57" pos:end="3:65">cpu_model</name></decl></parameter>)</parameter_list>



<block pos:start="7:1" pos:end="193:1">{<block_content pos:start="9:5" pos:end="191:62">

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">CPUState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:17">env</name></decl>, <decl pos:start="9:20" pos:end="9:34"><type ref="prev" pos:start="9:5" pos:end="9:14"><modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:34"><name pos:start="9:21" pos:end="9:24">envs</name><index pos:start="9:25" pos:end="9:34">[<expr pos:start="9:26" pos:end="9:33"><name pos:start="9:26" pos:end="9:33">MAX_CPUS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:18">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:44"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">void</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:15">iommu</name></decl>, <decl pos:start="13:18" pos:end="13:24"><type ref="prev" pos:start="13:5" pos:end="13:10"><modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:24">espdma</name></decl>, <decl pos:start="13:27" pos:end="13:32"><type ref="prev" pos:start="13:5" pos:end="13:10"><modifier pos:start="13:27" pos:end="13:27">*</modifier></type><name pos:start="13:28" pos:end="13:32">ledma</name></decl>, <decl pos:start="13:35" pos:end="13:43"><type ref="prev" pos:start="13:5" pos:end="13:10"><modifier pos:start="13:35" pos:end="13:35">*</modifier></type><name pos:start="13:36" pos:end="13:43">main_esp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:23"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:21">sparc_def_t</name> <modifier pos:start="15:23" pos:end="15:23">*</modifier></type><name pos:start="15:24" pos:end="15:26">def</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="19:32"><decl pos:start="17:5" pos:end="17:32"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">qemu_irq</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:32"><name pos:start="17:15" pos:end="17:22">cpu_irqs</name><index pos:start="17:23" pos:end="17:32">[<expr pos:start="17:24" pos:end="17:31"><name pos:start="17:24" pos:end="17:31">MAX_CPUS</name></expr>]</index></name></decl>, <decl pos:start="17:35" pos:end="17:45"><type ref="prev" pos:start="17:5" pos:end="17:14"><modifier pos:start="17:35" pos:end="17:35">*</modifier></type><name pos:start="17:36" pos:end="17:45">slavio_irq</name></decl>, <decl pos:start="17:48" pos:end="17:62"><type ref="prev" pos:start="17:5" pos:end="17:14"><modifier pos:start="17:48" pos:end="17:48">*</modifier></type><name pos:start="17:49" pos:end="17:62">slavio_cpu_irq</name></decl>,

        <decl pos:start="19:9" pos:end="19:19"><type ref="prev" pos:start="17:5" pos:end="17:14"><modifier pos:start="19:9" pos:end="19:9">*</modifier></type><name pos:start="19:10" pos:end="19:19">espdma_irq</name></decl>, <decl pos:start="19:22" pos:end="19:31"><type ref="prev" pos:start="17:5" pos:end="17:14"><modifier pos:start="19:22" pos:end="19:22">*</modifier></type><name pos:start="19:23" pos:end="19:31">ledma_irq</name></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:19">/* init CPUs */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:40"><expr pos:start="25:5" pos:end="25:39"><call pos:start="25:5" pos:end="25:39"><name pos:start="25:5" pos:end="25:22">sparc_find_by_name</name><argument_list pos:start="25:23" pos:end="25:39">(<argument pos:start="25:24" pos:end="25:32"><expr pos:start="25:24" pos:end="25:32"><name pos:start="25:24" pos:end="25:32">cpu_model</name></expr></argument>, <argument pos:start="25:35" pos:end="25:38"><expr pos:start="25:35" pos:end="25:38"><operator pos:start="25:35" pos:end="25:35">&amp;</operator><name pos:start="25:36" pos:end="25:38">def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:20">(<expr pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:11">def</name> <operator pos:start="27:13" pos:end="27:14">==</operator> <name pos:start="27:16" pos:end="27:19">NULL</name></expr>)</condition> <block pos:start="27:22" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:16">

        <expr_stmt pos:start="29:9" pos:end="29:65"><expr pos:start="29:9" pos:end="29:64"><call pos:start="29:9" pos:end="29:64"><name pos:start="29:9" pos:end="29:15">fprintf</name><argument_list pos:start="29:16" pos:end="29:64">(<argument pos:start="29:17" pos:end="29:22"><expr pos:start="29:17" pos:end="29:22"><name pos:start="29:17" pos:end="29:22">stderr</name></expr></argument>, <argument pos:start="29:25" pos:end="29:63"><expr pos:start="29:25" pos:end="29:63"><literal type="string" pos:start="29:25" pos:end="29:63">"Unable to find Sparc CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:16"><expr pos:start="31:9" pos:end="31:15"><call pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:12">exit</name><argument_list pos:start="31:13" pos:end="31:15">(<argument pos:start="31:14" pos:end="31:14"><expr pos:start="31:14" pos:end="31:14"><literal type="number" pos:start="31:14" pos:end="31:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="37:5" pos:end="61:5">for<control pos:start="37:8" pos:end="37:33">(<init pos:start="37:9" pos:end="37:14"><expr pos:start="37:9" pos:end="37:13"><name pos:start="37:9" pos:end="37:9">i</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <literal type="number" pos:start="37:13" pos:end="37:13">0</literal></expr>;</init> <condition pos:start="37:16" pos:end="37:28"><expr pos:start="37:16" pos:end="37:27"><name pos:start="37:16" pos:end="37:16">i</name> <operator pos:start="37:18" pos:end="37:18">&lt;</operator> <name pos:start="37:20" pos:end="37:27">smp_cpus</name></expr>;</condition> <incr pos:start="37:30" pos:end="37:32"><expr pos:start="37:30" pos:end="37:32"><name pos:start="37:30" pos:end="37:30">i</name><operator pos:start="37:31" pos:end="37:32">++</operator></expr></incr>)</control> <block pos:start="37:35" pos:end="61:5">{<block_content pos:start="39:9" pos:end="59:73">

        <expr_stmt pos:start="39:9" pos:end="39:25"><expr pos:start="39:9" pos:end="39:24"><name pos:start="39:9" pos:end="39:11">env</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:24"><name pos:start="39:15" pos:end="39:22">cpu_init</name><argument_list pos:start="39:23" pos:end="39:24">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:37"><expr pos:start="41:9" pos:end="41:36"><call pos:start="41:9" pos:end="41:36"><name pos:start="41:9" pos:end="41:26">cpu_sparc_register</name><argument_list pos:start="41:27" pos:end="41:36">(<argument pos:start="41:28" pos:end="41:30"><expr pos:start="41:28" pos:end="41:30"><name pos:start="41:28" pos:end="41:30">env</name></expr></argument>, <argument pos:start="41:33" pos:end="41:35"><expr pos:start="41:33" pos:end="41:35"><name pos:start="41:33" pos:end="41:35">def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:22"><expr pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:12">envs</name><index pos:start="43:13" pos:end="43:15">[<expr pos:start="43:14" pos:end="43:14"><name pos:start="43:14" pos:end="43:14">i</name></expr>]</index></name> <operator pos:start="43:17" pos:end="43:17">=</operator> <name pos:start="43:19" pos:end="43:21">env</name></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="55:9"><if pos:start="45:9" pos:end="49:9">if <condition pos:start="45:12" pos:end="45:19">(<expr pos:start="45:13" pos:end="45:18"><name pos:start="45:13" pos:end="45:13">i</name> <operator pos:start="45:15" pos:end="45:16">==</operator> <literal type="number" pos:start="45:18" pos:end="45:18">0</literal></expr>)</condition> <block pos:start="45:21" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:53">

            <expr_stmt pos:start="47:13" pos:end="47:53"><expr pos:start="47:13" pos:end="47:52"><call pos:start="47:13" pos:end="47:52"><name pos:start="47:13" pos:end="47:31">qemu_register_reset</name><argument_list pos:start="47:32" pos:end="47:52">(<argument pos:start="47:33" pos:end="47:46"><expr pos:start="47:33" pos:end="47:46"><name pos:start="47:33" pos:end="47:46">main_cpu_reset</name></expr></argument>, <argument pos:start="47:49" pos:end="47:51"><expr pos:start="47:49" pos:end="47:51"><name pos:start="47:49" pos:end="47:51">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="49:11" pos:end="55:9">else <block pos:start="49:16" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:28">

            <expr_stmt pos:start="51:13" pos:end="51:58"><expr pos:start="51:13" pos:end="51:57"><call pos:start="51:13" pos:end="51:57"><name pos:start="51:13" pos:end="51:31">qemu_register_reset</name><argument_list pos:start="51:32" pos:end="51:57">(<argument pos:start="51:33" pos:end="51:51"><expr pos:start="51:33" pos:end="51:51"><name pos:start="51:33" pos:end="51:51">secondary_cpu_reset</name></expr></argument>, <argument pos:start="51:54" pos:end="51:56"><expr pos:start="51:54" pos:end="51:56"><name pos:start="51:54" pos:end="51:56">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:28"><expr pos:start="53:13" pos:end="53:27"><name pos:start="53:13" pos:end="53:23"><name pos:start="53:13" pos:end="53:15">env</name><operator pos:start="53:16" pos:end="53:17">-&gt;</operator><name pos:start="53:18" pos:end="53:23">halted</name></name> <operator pos:start="53:25" pos:end="53:25">=</operator> <literal type="number" pos:start="53:27" pos:end="53:27">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:62"><expr pos:start="57:9" pos:end="57:61"><call pos:start="57:9" pos:end="57:61"><name pos:start="57:9" pos:end="57:23">register_savevm</name><argument_list pos:start="57:24" pos:end="57:61">(<argument pos:start="57:25" pos:end="57:29"><expr pos:start="57:25" pos:end="57:29"><literal type="string" pos:start="57:25" pos:end="57:29">"cpu"</literal></expr></argument>, <argument pos:start="57:32" pos:end="57:32"><expr pos:start="57:32" pos:end="57:32"><name pos:start="57:32" pos:end="57:32">i</name></expr></argument>, <argument pos:start="57:35" pos:end="57:35"><expr pos:start="57:35" pos:end="57:35"><literal type="number" pos:start="57:35" pos:end="57:35">3</literal></expr></argument>, <argument pos:start="57:38" pos:end="57:45"><expr pos:start="57:38" pos:end="57:45"><name pos:start="57:38" pos:end="57:45">cpu_save</name></expr></argument>, <argument pos:start="57:48" pos:end="57:55"><expr pos:start="57:48" pos:end="57:55"><name pos:start="57:48" pos:end="57:55">cpu_load</name></expr></argument>, <argument pos:start="57:58" pos:end="57:60"><expr pos:start="57:58" pos:end="57:60"><name pos:start="57:58" pos:end="57:60">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:73"><expr pos:start="59:9" pos:end="59:72"><name pos:start="59:9" pos:end="59:19"><name pos:start="59:9" pos:end="59:16">cpu_irqs</name><index pos:start="59:17" pos:end="59:19">[<expr pos:start="59:18" pos:end="59:18"><name pos:start="59:18" pos:end="59:18">i</name></expr>]</index></name> <operator pos:start="59:21" pos:end="59:21">=</operator> <call pos:start="59:23" pos:end="59:72"><name pos:start="59:23" pos:end="59:40">qemu_allocate_irqs</name><argument_list pos:start="59:41" pos:end="59:72">(<argument pos:start="59:42" pos:end="59:52"><expr pos:start="59:42" pos:end="59:52"><name pos:start="59:42" pos:end="59:52">cpu_set_irq</name></expr></argument>, <argument pos:start="59:55" pos:end="59:61"><expr pos:start="59:55" pos:end="59:61"><name pos:start="59:55" pos:end="59:61"><name pos:start="59:55" pos:end="59:58">envs</name><index pos:start="59:59" pos:end="59:61">[<expr pos:start="59:60" pos:end="59:60"><name pos:start="59:60" pos:end="59:60">i</name></expr>]</index></name></expr></argument>, <argument pos:start="59:64" pos:end="59:71"><expr pos:start="59:64" pos:end="59:71"><name pos:start="59:64" pos:end="59:71">MAX_PILS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="65:5" pos:end="67:76">for <control pos:start="65:9" pos:end="65:41">(<init pos:start="65:10" pos:end="65:22"><expr pos:start="65:10" pos:end="65:21"><name pos:start="65:10" pos:end="65:10">i</name> <operator pos:start="65:12" pos:end="65:12">=</operator> <name pos:start="65:14" pos:end="65:21">smp_cpus</name></expr>;</init> <condition pos:start="65:24" pos:end="65:36"><expr pos:start="65:24" pos:end="65:35"><name pos:start="65:24" pos:end="65:24">i</name> <operator pos:start="65:26" pos:end="65:26">&lt;</operator> <name pos:start="65:28" pos:end="65:35">MAX_CPUS</name></expr>;</condition> <incr pos:start="65:38" pos:end="65:40"><expr pos:start="65:38" pos:end="65:40"><name pos:start="65:38" pos:end="65:38">i</name><operator pos:start="65:39" pos:end="65:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="67:9" pos:end="67:76"><block_content pos:start="67:9" pos:end="67:76">

        <expr_stmt pos:start="67:9" pos:end="67:76"><expr pos:start="67:9" pos:end="67:75"><name pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:16">cpu_irqs</name><index pos:start="67:17" pos:end="67:19">[<expr pos:start="67:18" pos:end="67:18"><name pos:start="67:18" pos:end="67:18">i</name></expr>]</index></name> <operator pos:start="67:21" pos:end="67:21">=</operator> <call pos:start="67:23" pos:end="67:75"><name pos:start="67:23" pos:end="67:40">qemu_allocate_irqs</name><argument_list pos:start="67:41" pos:end="67:75">(<argument pos:start="67:42" pos:end="67:58"><expr pos:start="67:42" pos:end="67:58"><name pos:start="67:42" pos:end="67:58">dummy_cpu_set_irq</name></expr></argument>, <argument pos:start="67:61" pos:end="67:64"><expr pos:start="67:61" pos:end="67:64"><name pos:start="67:61" pos:end="67:64">NULL</name></expr></argument>, <argument pos:start="67:67" pos:end="67:74"><expr pos:start="67:67" pos:end="67:74"><name pos:start="67:67" pos:end="67:74">MAX_PILS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <comment type="block" pos:start="71:5" pos:end="71:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:49"><expr pos:start="73:5" pos:end="73:48"><call pos:start="73:5" pos:end="73:48"><name pos:start="73:5" pos:end="73:32">cpu_register_physical_memory</name><argument_list pos:start="73:33" pos:end="73:48">(<argument pos:start="73:34" pos:end="73:34"><expr pos:start="73:34" pos:end="73:34"><literal type="number" pos:start="73:34" pos:end="73:34">0</literal></expr></argument>, <argument pos:start="73:37" pos:end="73:44"><expr pos:start="73:37" pos:end="73:44"><name pos:start="73:37" pos:end="73:44">ram_size</name></expr></argument>, <argument pos:start="73:47" pos:end="73:47"><expr pos:start="73:47" pos:end="73:47"><literal type="number" pos:start="73:47" pos:end="73:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:42"><expr pos:start="77:5" pos:end="77:41"><name pos:start="77:5" pos:end="77:9">iommu</name> <operator pos:start="77:11" pos:end="77:11">=</operator> <call pos:start="77:13" pos:end="77:41"><name pos:start="77:13" pos:end="77:22">iommu_init</name><argument_list pos:start="77:23" pos:end="77:41">(<argument pos:start="77:24" pos:end="77:40"><expr pos:start="77:24" pos:end="77:40"><name pos:start="77:24" pos:end="77:40"><name pos:start="77:24" pos:end="77:28">hwdef</name><operator pos:start="77:29" pos:end="77:30">-&gt;</operator><name pos:start="77:31" pos:end="77:40">iommu_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="89:57"><expr pos:start="79:5" pos:end="89:56"><name pos:start="79:5" pos:end="79:17">slavio_intctl</name> <operator pos:start="79:19" pos:end="79:19">=</operator> <call pos:start="79:21" pos:end="89:56"><name pos:start="79:21" pos:end="79:38">slavio_intctl_init</name><argument_list pos:start="79:39" pos:end="89:56">(<argument pos:start="79:40" pos:end="79:57"><expr pos:start="79:40" pos:end="79:57"><name pos:start="79:40" pos:end="79:57"><name pos:start="79:40" pos:end="79:44">hwdef</name><operator pos:start="79:45" pos:end="79:46">-&gt;</operator><name pos:start="79:47" pos:end="79:57">intctl_base</name></name></expr></argument>,

                                       <argument pos:start="81:40" pos:end="81:70"><expr pos:start="81:40" pos:end="81:70"><name pos:start="81:40" pos:end="81:57"><name pos:start="81:40" pos:end="81:44">hwdef</name><operator pos:start="81:45" pos:end="81:46">-&gt;</operator><name pos:start="81:47" pos:end="81:57">intctl_base</name></name> <operator pos:start="81:59" pos:end="81:59">+</operator> <literal type="number" pos:start="81:61" pos:end="81:70">0x10000ULL</literal></expr></argument>,

                                       <argument pos:start="83:40" pos:end="83:65"><expr pos:start="83:40" pos:end="83:65"><operator pos:start="83:40" pos:end="83:40">&amp;</operator><name pos:start="83:41" pos:end="83:65"><name pos:start="83:41" pos:end="83:45">hwdef</name><operator pos:start="83:46" pos:end="83:47">-&gt;</operator><name pos:start="83:48" pos:end="83:62">intbit_to_level</name><index pos:start="83:63" pos:end="83:65">[<expr pos:start="83:64" pos:end="83:64"><literal type="number" pos:start="83:64" pos:end="83:64">0</literal></expr>]</index></name></expr></argument>,

                                       <argument pos:start="85:40" pos:end="85:50"><expr pos:start="85:40" pos:end="85:50"><operator pos:start="85:40" pos:end="85:40">&amp;</operator><name pos:start="85:41" pos:end="85:50">slavio_irq</name></expr></argument>, <argument pos:start="85:53" pos:end="85:67"><expr pos:start="85:53" pos:end="85:67"><operator pos:start="85:53" pos:end="85:53">&amp;</operator><name pos:start="85:54" pos:end="85:67">slavio_cpu_irq</name></expr></argument>,

                                       <argument pos:start="87:40" pos:end="87:47"><expr pos:start="87:40" pos:end="87:47"><name pos:start="87:40" pos:end="87:47">cpu_irqs</name></expr></argument>,

                                       <argument pos:start="89:40" pos:end="89:55"><expr pos:start="89:40" pos:end="89:55"><name pos:start="89:40" pos:end="89:55"><name pos:start="89:40" pos:end="89:44">hwdef</name><operator pos:start="89:45" pos:end="89:46">-&gt;</operator><name pos:start="89:47" pos:end="89:55">clock_irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="95:50"><expr pos:start="93:5" pos:end="95:49"><name pos:start="93:5" pos:end="93:10">espdma</name> <operator pos:start="93:12" pos:end="93:12">=</operator> <call pos:start="93:14" pos:end="95:49"><name pos:start="93:14" pos:end="93:29">sparc32_dma_init</name><argument_list pos:start="93:30" pos:end="95:49">(<argument pos:start="93:31" pos:end="93:45"><expr pos:start="93:31" pos:end="93:45"><name pos:start="93:31" pos:end="93:45"><name pos:start="93:31" pos:end="93:35">hwdef</name><operator pos:start="93:36" pos:end="93:37">-&gt;</operator><name pos:start="93:38" pos:end="93:45">dma_base</name></name></expr></argument>, <argument pos:start="93:48" pos:end="93:73"><expr pos:start="93:48" pos:end="93:73"><name pos:start="93:48" pos:end="93:73"><name pos:start="93:48" pos:end="93:57">slavio_irq</name><index pos:start="93:58" pos:end="93:73">[<expr pos:start="93:59" pos:end="93:72"><name pos:start="93:59" pos:end="93:72"><name pos:start="93:59" pos:end="93:63">hwdef</name><operator pos:start="93:64" pos:end="93:65">-&gt;</operator><name pos:start="93:66" pos:end="93:72">esp_irq</name></name></expr>]</index></name></expr></argument>,

                              <argument pos:start="95:31" pos:end="95:35"><expr pos:start="95:31" pos:end="95:35"><name pos:start="95:31" pos:end="95:35">iommu</name></expr></argument>, <argument pos:start="95:38" pos:end="95:48"><expr pos:start="95:38" pos:end="95:48"><operator pos:start="95:38" pos:end="95:38">&amp;</operator><name pos:start="95:39" pos:end="95:48">espdma_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="99:75"><expr pos:start="97:5" pos:end="99:74"><name pos:start="97:5" pos:end="97:9">ledma</name> <operator pos:start="97:11" pos:end="97:11">=</operator> <call pos:start="97:13" pos:end="99:74"><name pos:start="97:13" pos:end="97:28">sparc32_dma_init</name><argument_list pos:start="97:29" pos:end="99:74">(<argument pos:start="97:30" pos:end="97:52"><expr pos:start="97:30" pos:end="97:52"><name pos:start="97:30" pos:end="97:44"><name pos:start="97:30" pos:end="97:34">hwdef</name><operator pos:start="97:35" pos:end="97:36">-&gt;</operator><name pos:start="97:37" pos:end="97:44">dma_base</name></name> <operator pos:start="97:46" pos:end="97:46">+</operator> <literal type="number" pos:start="97:48" pos:end="97:52">16ULL</literal></expr></argument>,

                             <argument pos:start="99:30" pos:end="99:54"><expr pos:start="99:30" pos:end="99:54"><name pos:start="99:30" pos:end="99:54"><name pos:start="99:30" pos:end="99:39">slavio_irq</name><index pos:start="99:40" pos:end="99:54">[<expr pos:start="99:41" pos:end="99:53"><name pos:start="99:41" pos:end="99:53"><name pos:start="99:41" pos:end="99:45">hwdef</name><operator pos:start="99:46" pos:end="99:47">-&gt;</operator><name pos:start="99:48" pos:end="99:53">le_irq</name></name></expr>]</index></name></expr></argument>, <argument pos:start="99:57" pos:end="99:61"><expr pos:start="99:57" pos:end="99:61"><name pos:start="99:57" pos:end="99:61">iommu</name></expr></argument>, <argument pos:start="99:64" pos:end="99:73"><expr pos:start="99:64" pos:end="99:73"><operator pos:start="99:64" pos:end="99:64">&amp;</operator><name pos:start="99:65" pos:end="99:73">ledma_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="103:5" pos:end="109:5"><if pos:start="103:5" pos:end="109:5">if <condition pos:start="103:8" pos:end="103:50">(<expr pos:start="103:9" pos:end="103:49"><name pos:start="103:9" pos:end="103:21">graphic_depth</name> <operator pos:start="103:23" pos:end="103:24">!=</operator> <literal type="number" pos:start="103:26" pos:end="103:26">8</literal> <operator pos:start="103:28" pos:end="103:29">&amp;&amp;</operator> <name pos:start="103:31" pos:end="103:43">graphic_depth</name> <operator pos:start="103:45" pos:end="103:46">!=</operator> <literal type="number" pos:start="103:48" pos:end="103:49">24</literal></expr>)</condition> <block pos:start="103:52" pos:end="109:5">{<block_content pos:start="105:9" pos:end="107:17">

        <expr_stmt pos:start="105:9" pos:end="105:72"><expr pos:start="105:9" pos:end="105:71"><call pos:start="105:9" pos:end="105:71"><name pos:start="105:9" pos:end="105:15">fprintf</name><argument_list pos:start="105:16" pos:end="105:71">(<argument pos:start="105:17" pos:end="105:22"><expr pos:start="105:17" pos:end="105:22"><name pos:start="105:17" pos:end="105:22">stderr</name></expr></argument>, <argument pos:start="105:25" pos:end="105:55"><expr pos:start="105:25" pos:end="105:55"><literal type="string" pos:start="105:25" pos:end="105:55">"qemu: Unsupported depth: %d\n"</literal></expr></argument>, <argument pos:start="105:58" pos:end="105:70"><expr pos:start="105:58" pos:end="105:70"><name pos:start="105:58" pos:end="105:70">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:17"><expr pos:start="107:9" pos:end="107:16"><call pos:start="107:9" pos:end="107:16"><name pos:start="107:9" pos:end="107:12">exit</name> <argument_list pos:start="107:14" pos:end="107:16">(<argument pos:start="107:15" pos:end="107:15"><expr pos:start="107:15" pos:end="107:15"><literal type="number" pos:start="107:15" pos:end="107:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="111:5" pos:end="113:77"><expr pos:start="111:5" pos:end="113:76"><call pos:start="111:5" pos:end="113:76"><name pos:start="111:5" pos:end="111:12">tcx_init</name><argument_list pos:start="111:13" pos:end="113:76">(<argument pos:start="111:14" pos:end="111:15"><expr pos:start="111:14" pos:end="111:15"><name pos:start="111:14" pos:end="111:15">ds</name></expr></argument>, <argument pos:start="111:18" pos:end="111:32"><expr pos:start="111:18" pos:end="111:32"><name pos:start="111:18" pos:end="111:32"><name pos:start="111:18" pos:end="111:22">hwdef</name><operator pos:start="111:23" pos:end="111:24">-&gt;</operator><name pos:start="111:25" pos:end="111:32">tcx_base</name></name></expr></argument>, <argument pos:start="111:35" pos:end="111:58"><expr pos:start="111:35" pos:end="111:58"><name pos:start="111:35" pos:end="111:47">phys_ram_base</name> <operator pos:start="111:49" pos:end="111:49">+</operator> <name pos:start="111:51" pos:end="111:58">ram_size</name></expr></argument>, <argument pos:start="111:61" pos:end="111:68"><expr pos:start="111:61" pos:end="111:68"><name pos:start="111:61" pos:end="111:68">ram_size</name></expr></argument>,

             <argument pos:start="113:14" pos:end="113:29"><expr pos:start="113:14" pos:end="113:29"><name pos:start="113:14" pos:end="113:29"><name pos:start="113:14" pos:end="113:18">hwdef</name><operator pos:start="113:19" pos:end="113:20">-&gt;</operator><name pos:start="113:21" pos:end="113:29">vram_size</name></name></expr></argument>, <argument pos:start="113:32" pos:end="113:44"><expr pos:start="113:32" pos:end="113:44"><name pos:start="113:32" pos:end="113:44">graphic_width</name></expr></argument>, <argument pos:start="113:47" pos:end="113:60"><expr pos:start="113:47" pos:end="113:60"><name pos:start="113:47" pos:end="113:60">graphic_height</name></expr></argument>, <argument pos:start="113:63" pos:end="113:75"><expr pos:start="113:63" pos:end="113:75"><name pos:start="113:63" pos:end="113:75">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="117:5" pos:end="135:5"><if pos:start="117:5" pos:end="123:5">if <condition pos:start="117:8" pos:end="119:51">(<expr pos:start="117:9" pos:end="119:50"><name pos:start="117:9" pos:end="117:19"><name pos:start="117:9" pos:end="117:16">nd_table</name><index pos:start="117:17" pos:end="117:19">[<expr pos:start="117:18" pos:end="117:18"><literal type="number" pos:start="117:18" pos:end="117:18">0</literal></expr>]</index></name><operator pos:start="117:20" pos:end="117:20">.</operator><name pos:start="117:21" pos:end="117:25">model</name> <operator pos:start="117:27" pos:end="117:28">==</operator> <name pos:start="117:30" pos:end="117:33">NULL</name>

        <operator pos:start="119:9" pos:end="119:10">||</operator> <call pos:start="119:12" pos:end="119:45"><name pos:start="119:12" pos:end="119:17">strcmp</name><argument_list pos:start="119:18" pos:end="119:45">(<argument pos:start="119:19" pos:end="119:35"><expr pos:start="119:19" pos:end="119:35"><name pos:start="119:19" pos:end="119:29"><name pos:start="119:19" pos:end="119:26">nd_table</name><index pos:start="119:27" pos:end="119:29">[<expr pos:start="119:28" pos:end="119:28"><literal type="number" pos:start="119:28" pos:end="119:28">0</literal></expr>]</index></name><operator pos:start="119:30" pos:end="119:30">.</operator><name pos:start="119:31" pos:end="119:35">model</name></expr></argument>, <argument pos:start="119:38" pos:end="119:44"><expr pos:start="119:38" pos:end="119:44"><literal type="string" pos:start="119:38" pos:end="119:44">"lance"</literal></expr></argument>)</argument_list></call> <operator pos:start="119:47" pos:end="119:48">==</operator> <literal type="number" pos:start="119:50" pos:end="119:50">0</literal></expr>)</condition> <block pos:start="119:53" pos:end="123:5">{<block_content pos:start="121:9" pos:end="121:68">

        <expr_stmt pos:start="121:9" pos:end="121:68"><expr pos:start="121:9" pos:end="121:67"><call pos:start="121:9" pos:end="121:67"><name pos:start="121:9" pos:end="121:18">lance_init</name><argument_list pos:start="121:19" pos:end="121:67">(<argument pos:start="121:20" pos:end="121:31"><expr pos:start="121:20" pos:end="121:31"><operator pos:start="121:20" pos:end="121:20">&amp;</operator><name pos:start="121:21" pos:end="121:31"><name pos:start="121:21" pos:end="121:28">nd_table</name><index pos:start="121:29" pos:end="121:31">[<expr pos:start="121:30" pos:end="121:30"><literal type="number" pos:start="121:30" pos:end="121:30">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="121:34" pos:end="121:47"><expr pos:start="121:34" pos:end="121:47"><name pos:start="121:34" pos:end="121:47"><name pos:start="121:34" pos:end="121:38">hwdef</name><operator pos:start="121:39" pos:end="121:40">-&gt;</operator><name pos:start="121:41" pos:end="121:47">le_base</name></name></expr></argument>, <argument pos:start="121:50" pos:end="121:54"><expr pos:start="121:50" pos:end="121:54"><name pos:start="121:50" pos:end="121:54">ledma</name></expr></argument>, <argument pos:start="121:57" pos:end="121:66"><expr pos:start="121:57" pos:end="121:66"><operator pos:start="121:57" pos:end="121:57">*</operator><name pos:start="121:58" pos:end="121:66">ledma_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="123:7" pos:end="129:5">else if <condition pos:start="123:15" pos:end="123:51">(<expr pos:start="123:16" pos:end="123:50"><call pos:start="123:16" pos:end="123:45"><name pos:start="123:16" pos:end="123:21">strcmp</name><argument_list pos:start="123:22" pos:end="123:45">(<argument pos:start="123:23" pos:end="123:39"><expr pos:start="123:23" pos:end="123:39"><name pos:start="123:23" pos:end="123:33"><name pos:start="123:23" pos:end="123:30">nd_table</name><index pos:start="123:31" pos:end="123:33">[<expr pos:start="123:32" pos:end="123:32"><literal type="number" pos:start="123:32" pos:end="123:32">0</literal></expr>]</index></name><operator pos:start="123:34" pos:end="123:34">.</operator><name pos:start="123:35" pos:end="123:39">model</name></expr></argument>, <argument pos:start="123:42" pos:end="123:44"><expr pos:start="123:42" pos:end="123:44"><literal type="string" pos:start="123:42" pos:end="123:44">"?"</literal></expr></argument>)</argument_list></call> <operator pos:start="123:47" pos:end="123:48">==</operator> <literal type="number" pos:start="123:50" pos:end="123:50">0</literal></expr>)</condition> <block pos:start="123:53" pos:end="129:5">{<block_content pos:start="125:9" pos:end="127:17">

        <expr_stmt pos:start="125:9" pos:end="125:57"><expr pos:start="125:9" pos:end="125:56"><call pos:start="125:9" pos:end="125:56"><name pos:start="125:9" pos:end="125:15">fprintf</name><argument_list pos:start="125:16" pos:end="125:56">(<argument pos:start="125:17" pos:end="125:22"><expr pos:start="125:17" pos:end="125:22"><name pos:start="125:17" pos:end="125:22">stderr</name></expr></argument>, <argument pos:start="125:25" pos:end="125:55"><expr pos:start="125:25" pos:end="125:55"><literal type="string" pos:start="125:25" pos:end="125:55">"qemu: Supported NICs: lance\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:17"><expr pos:start="127:9" pos:end="127:16"><call pos:start="127:9" pos:end="127:16"><name pos:start="127:9" pos:end="127:12">exit</name> <argument_list pos:start="127:14" pos:end="127:16">(<argument pos:start="127:15" pos:end="127:15"><expr pos:start="127:15" pos:end="127:15"><literal type="number" pos:start="127:15" pos:end="127:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="129:7" pos:end="135:5">else <block pos:start="129:12" pos:end="135:5">{<block_content pos:start="131:9" pos:end="133:17">

        <expr_stmt pos:start="131:9" pos:end="131:74"><expr pos:start="131:9" pos:end="131:73"><call pos:start="131:9" pos:end="131:73"><name pos:start="131:9" pos:end="131:15">fprintf</name><argument_list pos:start="131:16" pos:end="131:73">(<argument pos:start="131:17" pos:end="131:22"><expr pos:start="131:17" pos:end="131:22"><name pos:start="131:17" pos:end="131:22">stderr</name></expr></argument>, <argument pos:start="131:25" pos:end="131:53"><expr pos:start="131:25" pos:end="131:53"><literal type="string" pos:start="131:25" pos:end="131:53">"qemu: Unsupported NIC: %s\n"</literal></expr></argument>, <argument pos:start="131:56" pos:end="131:72"><expr pos:start="131:56" pos:end="131:72"><name pos:start="131:56" pos:end="131:66"><name pos:start="131:56" pos:end="131:63">nd_table</name><index pos:start="131:64" pos:end="131:66">[<expr pos:start="131:65" pos:end="131:65"><literal type="number" pos:start="131:65" pos:end="131:65">0</literal></expr>]</index></name><operator pos:start="131:67" pos:end="131:67">.</operator><name pos:start="131:68" pos:end="131:72">model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:17"><expr pos:start="133:9" pos:end="133:16"><call pos:start="133:9" pos:end="133:16"><name pos:start="133:9" pos:end="133:12">exit</name> <argument_list pos:start="133:14" pos:end="133:16">(<argument pos:start="133:15" pos:end="133:15"><expr pos:start="133:15" pos:end="133:15"><literal type="number" pos:start="133:15" pos:end="133:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="139:5" pos:end="141:46"><expr pos:start="139:5" pos:end="141:45"><name pos:start="139:5" pos:end="139:9">nvram</name> <operator pos:start="139:11" pos:end="139:11">=</operator> <call pos:start="139:13" pos:end="141:45"><name pos:start="139:13" pos:end="139:23">m48t59_init</name><argument_list pos:start="139:24" pos:end="141:45">(<argument pos:start="139:25" pos:end="139:37"><expr pos:start="139:25" pos:end="139:37"><name pos:start="139:25" pos:end="139:37"><name pos:start="139:25" pos:end="139:34">slavio_irq</name><index pos:start="139:35" pos:end="139:37">[<expr pos:start="139:36" pos:end="139:36"><literal type="number" pos:start="139:36" pos:end="139:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="139:40" pos:end="139:56"><expr pos:start="139:40" pos:end="139:56"><name pos:start="139:40" pos:end="139:56"><name pos:start="139:40" pos:end="139:44">hwdef</name><operator pos:start="139:45" pos:end="139:46">-&gt;</operator><name pos:start="139:47" pos:end="139:56">nvram_base</name></name></expr></argument>, <argument pos:start="139:59" pos:end="139:59"><expr pos:start="139:59" pos:end="139:59"><literal type="number" pos:start="139:59" pos:end="139:59">0</literal></expr></argument>,

                        <argument pos:start="141:25" pos:end="141:41"><expr pos:start="141:25" pos:end="141:41"><name pos:start="141:25" pos:end="141:41"><name pos:start="141:25" pos:end="141:29">hwdef</name><operator pos:start="141:30" pos:end="141:31">-&gt;</operator><name pos:start="141:32" pos:end="141:41">nvram_size</name></name></expr></argument>, <argument pos:start="141:44" pos:end="141:44"><expr pos:start="141:44" pos:end="141:44"><literal type="number" pos:start="141:44" pos:end="141:44">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="143:5" pos:end="151:5">for <control pos:start="143:9" pos:end="143:34">(<init pos:start="143:10" pos:end="143:15"><expr pos:start="143:10" pos:end="143:14"><name pos:start="143:10" pos:end="143:10">i</name> <operator pos:start="143:12" pos:end="143:12">=</operator> <literal type="number" pos:start="143:14" pos:end="143:14">0</literal></expr>;</init> <condition pos:start="143:17" pos:end="143:29"><expr pos:start="143:17" pos:end="143:28"><name pos:start="143:17" pos:end="143:17">i</name> <operator pos:start="143:19" pos:end="143:19">&lt;</operator> <name pos:start="143:21" pos:end="143:28">MAX_CPUS</name></expr>;</condition> <incr pos:start="143:31" pos:end="143:33"><expr pos:start="143:31" pos:end="143:33"><name pos:start="143:31" pos:end="143:31">i</name><operator pos:start="143:32" pos:end="143:33">++</operator></expr></incr>)</control> <block pos:start="143:36" pos:end="151:5">{<block_content pos:start="145:9" pos:end="149:49">

        <expr_stmt pos:start="145:9" pos:end="149:49"><expr pos:start="145:9" pos:end="149:48"><call pos:start="145:9" pos:end="149:48"><name pos:start="145:9" pos:end="145:25">slavio_timer_init</name><argument_list pos:start="145:26" pos:end="149:48">(<argument pos:start="145:27" pos:end="147:68"><expr pos:start="145:27" pos:end="147:68"><name pos:start="145:27" pos:end="145:45"><name pos:start="145:27" pos:end="145:31">hwdef</name><operator pos:start="145:32" pos:end="145:33">-&gt;</operator><name pos:start="145:34" pos:end="145:45">counter_base</name></name> <operator pos:start="145:47" pos:end="145:47">+</operator>

                          <operator pos:start="147:27" pos:end="147:27">(</operator><name pos:start="147:28" pos:end="147:45">target_phys_addr_t</name><operator pos:start="147:46" pos:end="147:46">)</operator><operator pos:start="147:47" pos:end="147:47">(</operator><name pos:start="147:48" pos:end="147:48">i</name> <operator pos:start="147:50" pos:end="147:50">*</operator> <name pos:start="147:52" pos:end="147:67">TARGET_PAGE_SIZE</name><operator pos:start="147:68" pos:end="147:68">)</operator></expr></argument>,

                           <argument pos:start="149:28" pos:end="149:44"><expr pos:start="149:28" pos:end="149:44"><name pos:start="149:28" pos:end="149:44"><name pos:start="149:28" pos:end="149:41">slavio_cpu_irq</name><index pos:start="149:42" pos:end="149:44">[<expr pos:start="149:43" pos:end="149:43"><name pos:start="149:43" pos:end="149:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="149:47" pos:end="149:47"><expr pos:start="149:47" pos:end="149:47"><literal type="number" pos:start="149:47" pos:end="149:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="153:5" pos:end="155:56"><expr pos:start="153:5" pos:end="155:55"><call pos:start="153:5" pos:end="155:55"><name pos:start="153:5" pos:end="153:21">slavio_timer_init</name><argument_list pos:start="153:22" pos:end="155:55">(<argument pos:start="153:23" pos:end="153:54"><expr pos:start="153:23" pos:end="153:54"><name pos:start="153:23" pos:end="153:41"><name pos:start="153:23" pos:end="153:27">hwdef</name><operator pos:start="153:28" pos:end="153:29">-&gt;</operator><name pos:start="153:30" pos:end="153:41">counter_base</name></name> <operator pos:start="153:43" pos:end="153:43">+</operator> <literal type="number" pos:start="153:45" pos:end="153:54">0x10000ULL</literal></expr></argument>,

                      <argument pos:start="155:23" pos:end="155:51"><expr pos:start="155:23" pos:end="155:51"><name pos:start="155:23" pos:end="155:51"><name pos:start="155:23" pos:end="155:32">slavio_irq</name><index pos:start="155:33" pos:end="155:51">[<expr pos:start="155:34" pos:end="155:50"><name pos:start="155:34" pos:end="155:50"><name pos:start="155:34" pos:end="155:38">hwdef</name><operator pos:start="155:39" pos:end="155:40">-&gt;</operator><name pos:start="155:41" pos:end="155:50">clock1_irq</name></name></expr>]</index></name></expr></argument>, <argument pos:start="155:54" pos:end="155:54"><expr pos:start="155:54" pos:end="155:54"><literal type="number" pos:start="155:54" pos:end="155:54">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:79"><expr pos:start="157:5" pos:end="157:78"><call pos:start="157:5" pos:end="157:78"><name pos:start="157:5" pos:end="157:29">slavio_serial_ms_kbd_init</name><argument_list pos:start="157:30" pos:end="157:78">(<argument pos:start="157:31" pos:end="157:47"><expr pos:start="157:31" pos:end="157:47"><name pos:start="157:31" pos:end="157:47"><name pos:start="157:31" pos:end="157:35">hwdef</name><operator pos:start="157:36" pos:end="157:37">-&gt;</operator><name pos:start="157:38" pos:end="157:47">ms_kb_base</name></name></expr></argument>, <argument pos:start="157:50" pos:end="157:77"><expr pos:start="157:50" pos:end="157:77"><name pos:start="157:50" pos:end="157:77"><name pos:start="157:50" pos:end="157:59">slavio_irq</name><index pos:start="157:60" pos:end="157:77">[<expr pos:start="157:61" pos:end="157:76"><name pos:start="157:61" pos:end="157:76"><name pos:start="157:61" pos:end="157:65">hwdef</name><operator pos:start="157:66" pos:end="157:67">-&gt;</operator><name pos:start="157:68" pos:end="157:76">ms_kb_irq</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="159:5" pos:end="159:72">// Slavio TTYA (base+4, Linux ttyS0) is the first Qemu serial device</comment>

    <comment type="line" pos:start="161:5" pos:end="161:73">// Slavio TTYB (base+0, Linux ttyS1) is the second Qemu serial device</comment>

    <expr_stmt pos:start="163:5" pos:end="165:53"><expr pos:start="163:5" pos:end="165:52"><call pos:start="163:5" pos:end="165:52"><name pos:start="163:5" pos:end="163:22">slavio_serial_init</name><argument_list pos:start="163:23" pos:end="165:52">(<argument pos:start="163:24" pos:end="163:41"><expr pos:start="163:24" pos:end="163:41"><name pos:start="163:24" pos:end="163:41"><name pos:start="163:24" pos:end="163:28">hwdef</name><operator pos:start="163:29" pos:end="163:30">-&gt;</operator><name pos:start="163:31" pos:end="163:41">serial_base</name></name></expr></argument>, <argument pos:start="163:44" pos:end="163:69"><expr pos:start="163:44" pos:end="163:69"><name pos:start="163:44" pos:end="163:69"><name pos:start="163:44" pos:end="163:53">slavio_irq</name><index pos:start="163:54" pos:end="163:69">[<expr pos:start="163:55" pos:end="163:68"><name pos:start="163:55" pos:end="163:68"><name pos:start="163:55" pos:end="163:59">hwdef</name><operator pos:start="163:60" pos:end="163:61">-&gt;</operator><name pos:start="163:62" pos:end="163:68">ser_irq</name></name></expr>]</index></name></expr></argument>,

                       <argument pos:start="165:24" pos:end="165:36"><expr pos:start="165:24" pos:end="165:36"><name pos:start="165:24" pos:end="165:36"><name pos:start="165:24" pos:end="165:33">serial_hds</name><index pos:start="165:34" pos:end="165:36">[<expr pos:start="165:35" pos:end="165:35"><literal type="number" pos:start="165:35" pos:end="165:35">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="165:39" pos:end="165:51"><expr pos:start="165:39" pos:end="165:51"><name pos:start="165:39" pos:end="165:51"><name pos:start="165:39" pos:end="165:48">serial_hds</name><index pos:start="165:49" pos:end="165:51">[<expr pos:start="165:50" pos:end="165:50"><literal type="number" pos:start="165:50" pos:end="165:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:75"><expr pos:start="167:5" pos:end="167:74"><call pos:start="167:5" pos:end="167:74"><name pos:start="167:5" pos:end="167:15">fdctrl_init</name><argument_list pos:start="167:16" pos:end="167:74">(<argument pos:start="167:17" pos:end="167:41"><expr pos:start="167:17" pos:end="167:41"><name pos:start="167:17" pos:end="167:41"><name pos:start="167:17" pos:end="167:26">slavio_irq</name><index pos:start="167:27" pos:end="167:41">[<expr pos:start="167:28" pos:end="167:40"><name pos:start="167:28" pos:end="167:40"><name pos:start="167:28" pos:end="167:32">hwdef</name><operator pos:start="167:33" pos:end="167:34">-&gt;</operator><name pos:start="167:35" pos:end="167:40">fd_irq</name></name></expr>]</index></name></expr></argument>, <argument pos:start="167:44" pos:end="167:44"><expr pos:start="167:44" pos:end="167:44"><literal type="number" pos:start="167:44" pos:end="167:44">0</literal></expr></argument>, <argument pos:start="167:47" pos:end="167:47"><expr pos:start="167:47" pos:end="167:47"><literal type="number" pos:start="167:47" pos:end="167:47">1</literal></expr></argument>, <argument pos:start="167:50" pos:end="167:63"><expr pos:start="167:50" pos:end="167:63"><name pos:start="167:50" pos:end="167:63"><name pos:start="167:50" pos:end="167:54">hwdef</name><operator pos:start="167:55" pos:end="167:56">-&gt;</operator><name pos:start="167:57" pos:end="167:63">fd_base</name></name></expr></argument>, <argument pos:start="167:66" pos:end="167:73"><expr pos:start="167:66" pos:end="167:73"><name pos:start="167:66" pos:end="167:73">fd_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:72"><expr pos:start="169:5" pos:end="169:71"><name pos:start="169:5" pos:end="169:12">main_esp</name> <operator pos:start="169:14" pos:end="169:14">=</operator> <call pos:start="169:16" pos:end="169:71"><name pos:start="169:16" pos:end="169:23">esp_init</name><argument_list pos:start="169:24" pos:end="169:71">(<argument pos:start="169:25" pos:end="169:32"><expr pos:start="169:25" pos:end="169:32"><name pos:start="169:25" pos:end="169:32">bs_table</name></expr></argument>, <argument pos:start="169:35" pos:end="169:49"><expr pos:start="169:35" pos:end="169:49"><name pos:start="169:35" pos:end="169:49"><name pos:start="169:35" pos:end="169:39">hwdef</name><operator pos:start="169:40" pos:end="169:41">-&gt;</operator><name pos:start="169:42" pos:end="169:49">esp_base</name></name></expr></argument>, <argument pos:start="169:52" pos:end="169:57"><expr pos:start="169:52" pos:end="169:57"><name pos:start="169:52" pos:end="169:57">espdma</name></expr></argument>, <argument pos:start="169:60" pos:end="169:70"><expr pos:start="169:60" pos:end="169:70"><operator pos:start="169:60" pos:end="169:60">*</operator><name pos:start="169:61" pos:end="169:70">espdma_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="173:5" pos:end="181:5">for <control pos:start="173:9" pos:end="173:35">(<init pos:start="173:10" pos:end="173:15"><expr pos:start="173:10" pos:end="173:14"><name pos:start="173:10" pos:end="173:10">i</name> <operator pos:start="173:12" pos:end="173:12">=</operator> <literal type="number" pos:start="173:14" pos:end="173:14">0</literal></expr>;</init> <condition pos:start="173:17" pos:end="173:30"><expr pos:start="173:17" pos:end="173:29"><name pos:start="173:17" pos:end="173:17">i</name> <operator pos:start="173:19" pos:end="173:19">&lt;</operator> <name pos:start="173:21" pos:end="173:29">MAX_DISKS</name></expr>;</condition> <incr pos:start="173:32" pos:end="173:34"><expr pos:start="173:32" pos:end="173:34"><name pos:start="173:32" pos:end="173:32">i</name><operator pos:start="173:33" pos:end="173:34">++</operator></expr></incr>)</control> <block pos:start="173:37" pos:end="181:5">{<block_content pos:start="175:9" pos:end="179:9">

        <if_stmt pos:start="175:9" pos:end="179:9"><if pos:start="175:9" pos:end="179:9">if <condition pos:start="175:12" pos:end="175:24">(<expr pos:start="175:13" pos:end="175:23"><name pos:start="175:13" pos:end="175:23"><name pos:start="175:13" pos:end="175:20">bs_table</name><index pos:start="175:21" pos:end="175:23">[<expr pos:start="175:22" pos:end="175:22"><name pos:start="175:22" pos:end="175:22">i</name></expr>]</index></name></expr>)</condition> <block pos:start="175:26" pos:end="179:9">{<block_content pos:start="177:13" pos:end="177:54">

            <expr_stmt pos:start="177:13" pos:end="177:54"><expr pos:start="177:13" pos:end="177:53"><call pos:start="177:13" pos:end="177:53"><name pos:start="177:13" pos:end="177:27">esp_scsi_attach</name><argument_list pos:start="177:28" pos:end="177:53">(<argument pos:start="177:29" pos:end="177:36"><expr pos:start="177:29" pos:end="177:36"><name pos:start="177:29" pos:end="177:36">main_esp</name></expr></argument>, <argument pos:start="177:39" pos:end="177:49"><expr pos:start="177:39" pos:end="177:49"><name pos:start="177:39" pos:end="177:49"><name pos:start="177:39" pos:end="177:46">bs_table</name><index pos:start="177:47" pos:end="177:49">[<expr pos:start="177:48" pos:end="177:48"><name pos:start="177:48" pos:end="177:48">i</name></expr>]</index></name></expr></argument>, <argument pos:start="177:52" pos:end="177:52"><expr pos:start="177:52" pos:end="177:52"><name pos:start="177:52" pos:end="177:52">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="185:5" pos:end="187:62"><expr pos:start="185:5" pos:end="187:61"><name pos:start="185:5" pos:end="185:15">slavio_misc</name> <operator pos:start="185:17" pos:end="185:17">=</operator> <call pos:start="185:19" pos:end="187:61"><name pos:start="185:19" pos:end="185:34">slavio_misc_init</name><argument_list pos:start="185:35" pos:end="187:61">(<argument pos:start="185:36" pos:end="185:53"><expr pos:start="185:36" pos:end="185:53"><name pos:start="185:36" pos:end="185:53"><name pos:start="185:36" pos:end="185:40">hwdef</name><operator pos:start="185:41" pos:end="185:42">-&gt;</operator><name pos:start="185:43" pos:end="185:53">slavio_base</name></name></expr></argument>, <argument pos:start="185:56" pos:end="185:72"><expr pos:start="185:56" pos:end="185:72"><name pos:start="185:56" pos:end="185:72"><name pos:start="185:56" pos:end="185:60">hwdef</name><operator pos:start="185:61" pos:end="185:62">-&gt;</operator><name pos:start="185:63" pos:end="185:72">power_base</name></name></expr></argument>,

                                   <argument pos:start="187:36" pos:end="187:60"><expr pos:start="187:36" pos:end="187:60"><name pos:start="187:36" pos:end="187:60"><name pos:start="187:36" pos:end="187:45">slavio_irq</name><index pos:start="187:46" pos:end="187:60">[<expr pos:start="187:47" pos:end="187:59"><name pos:start="187:47" pos:end="187:59"><name pos:start="187:47" pos:end="187:51">hwdef</name><operator pos:start="187:52" pos:end="187:53">-&gt;</operator><name pos:start="187:54" pos:end="187:59">me_irq</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="189:5" pos:end="191:62"><if pos:start="189:5" pos:end="191:62">if <condition pos:start="189:8" pos:end="189:49">(<expr pos:start="189:9" pos:end="189:48"><name pos:start="189:9" pos:end="189:22"><name pos:start="189:9" pos:end="189:13">hwdef</name><operator pos:start="189:14" pos:end="189:15">-&gt;</operator><name pos:start="189:16" pos:end="189:22">cs_base</name></name> <operator pos:start="189:24" pos:end="189:25">!=</operator> <operator pos:start="189:27" pos:end="189:27">(</operator><name pos:start="189:28" pos:end="189:45">target_phys_addr_t</name><operator pos:start="189:46" pos:end="189:46">)</operator><operator pos:start="189:47" pos:end="189:47">-</operator><literal type="number" pos:start="189:48" pos:end="189:48">1</literal></expr>)</condition><block type="pseudo" pos:start="191:9" pos:end="191:62"><block_content pos:start="191:9" pos:end="191:62">

        <expr_stmt pos:start="191:9" pos:end="191:62"><expr pos:start="191:9" pos:end="191:61"><call pos:start="191:9" pos:end="191:61"><name pos:start="191:9" pos:end="191:15">cs_init</name><argument_list pos:start="191:16" pos:end="191:61">(<argument pos:start="191:17" pos:end="191:30"><expr pos:start="191:17" pos:end="191:30"><name pos:start="191:17" pos:end="191:30"><name pos:start="191:17" pos:end="191:21">hwdef</name><operator pos:start="191:22" pos:end="191:23">-&gt;</operator><name pos:start="191:24" pos:end="191:30">cs_base</name></name></expr></argument>, <argument pos:start="191:33" pos:end="191:45"><expr pos:start="191:33" pos:end="191:45"><name pos:start="191:33" pos:end="191:45"><name pos:start="191:33" pos:end="191:37">hwdef</name><operator pos:start="191:38" pos:end="191:39">-&gt;</operator><name pos:start="191:40" pos:end="191:45">cs_irq</name></name></expr></argument>, <argument pos:start="191:48" pos:end="191:60"><expr pos:start="191:48" pos:end="191:60"><name pos:start="191:48" pos:end="191:60">slavio_intctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
