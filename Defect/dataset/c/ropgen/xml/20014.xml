<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20014.c" pos:tabs="8"><function pos:start="1:1" pos:end="291:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">decode_subpacket</name><parameter_list pos:start="1:28" pos:end="3:68">(<parameter pos:start="1:29" pos:end="1:42"><decl pos:start="1:29" pos:end="1:42"><type pos:start="1:29" pos:end="1:42"><name pos:start="1:29" pos:end="1:39">COOKContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">q</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:61"><decl pos:start="1:45" pos:end="1:61"><type pos:start="1:45" pos:end="1:61"><name pos:start="1:45" pos:end="1:51">uint8_t</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:61">inbuffer</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:47"><decl pos:start="3:29" pos:end="3:47"><type pos:start="3:29" pos:end="3:47"><name pos:start="3:29" pos:end="3:31">int</name></type> <name pos:start="3:33" pos:end="3:47">sub_packet_size</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:67"><decl pos:start="3:50" pos:end="3:67"><type pos:start="3:50" pos:end="3:67"><name pos:start="3:50" pos:end="3:56">int16_t</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:67">outbuffer</name></decl></parameter>)</parameter_list> <block pos:start="3:70" pos:end="291:1">{<block_content pos:start="5:5" pos:end="289:50">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>,<decl pos:start="5:11" pos:end="5:11"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:11" pos:end="5:11">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">value</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:9">float</name><modifier pos:start="9:10" pos:end="9:10">*</modifier></type> <name pos:start="9:12" pos:end="9:18">tmp_ptr</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:21">/* packet dump */</comment>

<comment type="line" pos:start="15:1" pos:end="15:43">//    for (i=0 ; i&lt;sub_packet_size ; i++) {</comment>

<comment type="line" pos:start="17:1" pos:end="17:58">//        av_log(NULL, AV_LOG_ERROR, "%02x", inbuffer[i]);</comment>

<comment type="line" pos:start="19:1" pos:end="19:7">//    }</comment>

<comment type="line" pos:start="21:1" pos:end="21:39">//    av_log(NULL, AV_LOG_ERROR, "\n");</comment>



    <expr_stmt pos:start="25:5" pos:end="25:69"><expr pos:start="25:5" pos:end="25:68"><call pos:start="25:5" pos:end="25:68"><name pos:start="25:5" pos:end="25:16">decode_bytes</name><argument_list pos:start="25:17" pos:end="25:68">(<argument pos:start="25:18" pos:end="25:25"><expr pos:start="25:18" pos:end="25:25"><name pos:start="25:18" pos:end="25:25">inbuffer</name></expr></argument>, <argument pos:start="25:28" pos:end="25:50"><expr pos:start="25:28" pos:end="25:50"><name pos:start="25:28" pos:end="25:50"><name pos:start="25:28" pos:end="25:28">q</name><operator pos:start="25:29" pos:end="25:30">-&gt;</operator><name pos:start="25:31" pos:end="25:50">decoded_bytes_buffer</name></name></expr></argument>, <argument pos:start="25:53" pos:end="25:67"><expr pos:start="25:53" pos:end="25:67"><name pos:start="25:53" pos:end="25:67">sub_packet_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:70"><expr pos:start="27:5" pos:end="27:69"><call pos:start="27:5" pos:end="27:69"><name pos:start="27:5" pos:end="27:17">init_get_bits</name><argument_list pos:start="27:18" pos:end="27:69">(<argument pos:start="27:19" pos:end="27:24"><expr pos:start="27:19" pos:end="27:24"><operator pos:start="27:19" pos:end="27:19">&amp;</operator><name pos:start="27:20" pos:end="27:24"><name pos:start="27:20" pos:end="27:20">q</name><operator pos:start="27:21" pos:end="27:22">-&gt;</operator><name pos:start="27:23" pos:end="27:24">gb</name></name></expr></argument>, <argument pos:start="27:27" pos:end="27:49"><expr pos:start="27:27" pos:end="27:49"><name pos:start="27:27" pos:end="27:49"><name pos:start="27:27" pos:end="27:27">q</name><operator pos:start="27:28" pos:end="27:29">-&gt;</operator><name pos:start="27:30" pos:end="27:49">decoded_bytes_buffer</name></name></expr></argument>, <argument pos:start="27:52" pos:end="27:68"><expr pos:start="27:52" pos:end="27:68"><name pos:start="27:52" pos:end="27:66">sub_packet_size</name><operator pos:start="27:67" pos:end="27:67">*</operator><literal type="number" pos:start="27:68" pos:end="27:68">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:47"><expr pos:start="29:5" pos:end="29:46"><call pos:start="29:5" pos:end="29:46"><name pos:start="29:5" pos:end="29:20">decode_gain_info</name><argument_list pos:start="29:21" pos:end="29:46">(<argument pos:start="29:22" pos:end="29:27"><expr pos:start="29:22" pos:end="29:27"><operator pos:start="29:22" pos:end="29:22">&amp;</operator><name pos:start="29:23" pos:end="29:27"><name pos:start="29:23" pos:end="29:23">q</name><operator pos:start="29:24" pos:end="29:25">-&gt;</operator><name pos:start="29:26" pos:end="29:27">gb</name></name></expr></argument>, <argument pos:start="29:30" pos:end="29:45"><expr pos:start="29:30" pos:end="29:45"><operator pos:start="29:30" pos:end="29:30">&amp;</operator><name pos:start="29:31" pos:end="29:45"><name pos:start="29:31" pos:end="29:31">q</name><operator pos:start="29:32" pos:end="29:33">-&gt;</operator><name pos:start="29:34" pos:end="29:45">gain_current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:62"><expr pos:start="31:5" pos:end="31:61"><call pos:start="31:5" pos:end="31:61"><name pos:start="31:5" pos:end="31:10">memcpy</name><argument_list pos:start="31:11" pos:end="31:61">(<argument pos:start="31:12" pos:end="31:24"><expr pos:start="31:12" pos:end="31:24"><operator pos:start="31:12" pos:end="31:12">&amp;</operator><name pos:start="31:13" pos:end="31:24"><name pos:start="31:13" pos:end="31:13">q</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:24">gain_copy</name></name></expr></argument>, <argument pos:start="31:27" pos:end="31:42"><expr pos:start="31:27" pos:end="31:42"><operator pos:start="31:27" pos:end="31:27">&amp;</operator><name pos:start="31:28" pos:end="31:42"><name pos:start="31:28" pos:end="31:28">q</name><operator pos:start="31:29" pos:end="31:30">-&gt;</operator><name pos:start="31:31" pos:end="31:42">gain_current</name></name></expr></argument> ,<argument pos:start="31:45" pos:end="31:60"><expr pos:start="31:45" pos:end="31:60"><sizeof pos:start="31:45" pos:end="31:60">sizeof<argument_list pos:start="31:51" pos:end="31:60">(<argument pos:start="31:52" pos:end="31:59"><expr pos:start="31:52" pos:end="31:59"><name pos:start="31:52" pos:end="31:59">COOKgain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="31:65" pos:end="31:107">//This copy does not seem to be used. FIXME</comment>



    <if_stmt pos:start="35:5" pos:end="287:5"><if pos:start="35:5" pos:end="111:5">if<condition pos:start="35:7" pos:end="35:47">(<expr pos:start="35:8" pos:end="35:46"><name pos:start="35:8" pos:end="35:21"><name pos:start="35:8" pos:end="35:8">q</name><operator pos:start="35:9" pos:end="35:10">-&gt;</operator><name pos:start="35:11" pos:end="35:21">nb_channels</name></name><operator pos:start="35:22" pos:end="35:23">==</operator><literal type="number" pos:start="35:24" pos:end="35:24">2</literal> <operator pos:start="35:26" pos:end="35:27">&amp;&amp;</operator> <name pos:start="35:29" pos:end="35:43"><name pos:start="35:29" pos:end="35:29">q</name><operator pos:start="35:30" pos:end="35:31">-&gt;</operator><name pos:start="35:32" pos:end="35:43">joint_stereo</name></name><operator pos:start="35:44" pos:end="35:45">==</operator><literal type="number" pos:start="35:46" pos:end="35:46">1</literal></expr>)</condition><block pos:start="35:48" pos:end="111:5">{<block_content pos:start="37:9" pos:end="107:70">

        <expr_stmt pos:start="37:9" pos:end="37:68"><expr pos:start="37:9" pos:end="37:67"><call pos:start="37:9" pos:end="37:67"><name pos:start="37:9" pos:end="37:20">joint_decode</name><argument_list pos:start="37:21" pos:end="37:67">(<argument pos:start="37:22" pos:end="37:22"><expr pos:start="37:22" pos:end="37:22"><name pos:start="37:22" pos:end="37:22">q</name></expr></argument>, <argument pos:start="37:25" pos:end="37:44"><expr pos:start="37:25" pos:end="37:44"><name pos:start="37:25" pos:end="37:44"><name pos:start="37:25" pos:end="37:25">q</name><operator pos:start="37:26" pos:end="37:27">-&gt;</operator><name pos:start="37:28" pos:end="37:41">decode_buf_ptr</name><index pos:start="37:42" pos:end="37:44">[<expr pos:start="37:43" pos:end="37:43"><literal type="number" pos:start="37:43" pos:end="37:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="37:47" pos:end="37:66"><expr pos:start="37:47" pos:end="37:66"><name pos:start="37:47" pos:end="37:66"><name pos:start="37:47" pos:end="37:47">q</name><operator pos:start="37:48" pos:end="37:49">-&gt;</operator><name pos:start="37:50" pos:end="37:63">decode_buf_ptr</name><index pos:start="37:64" pos:end="37:66">[<expr pos:start="37:65" pos:end="37:65"><literal type="number" pos:start="37:65" pos:end="37:65">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="41:9" pos:end="41:35">/* Swap buffer pointers. */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:39"><expr pos:start="43:9" pos:end="43:38"><name pos:start="43:9" pos:end="43:15">tmp_ptr</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <name pos:start="43:19" pos:end="43:38"><name pos:start="43:19" pos:end="43:19">q</name><operator pos:start="43:20" pos:end="43:21">-&gt;</operator><name pos:start="43:22" pos:end="43:35">decode_buf_ptr</name><index pos:start="43:36" pos:end="43:38">[<expr pos:start="43:37" pos:end="43:37"><literal type="number" pos:start="43:37" pos:end="43:37">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:52"><expr pos:start="45:9" pos:end="45:51"><name pos:start="45:9" pos:end="45:28"><name pos:start="45:9" pos:end="45:9">q</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:25">decode_buf_ptr</name><index pos:start="45:26" pos:end="45:28">[<expr pos:start="45:27" pos:end="45:27"><literal type="number" pos:start="45:27" pos:end="45:27">1</literal></expr>]</index></name> <operator pos:start="45:30" pos:end="45:30">=</operator> <name pos:start="45:32" pos:end="45:51"><name pos:start="45:32" pos:end="45:32">q</name><operator pos:start="45:33" pos:end="45:34">-&gt;</operator><name pos:start="45:35" pos:end="45:48">decode_buf_ptr</name><index pos:start="45:49" pos:end="45:51">[<expr pos:start="45:50" pos:end="45:50"><literal type="number" pos:start="45:50" pos:end="45:50">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:39"><expr pos:start="47:9" pos:end="47:38"><name pos:start="47:9" pos:end="47:28"><name pos:start="47:9" pos:end="47:9">q</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:25">decode_buf_ptr</name><index pos:start="47:26" pos:end="47:28">[<expr pos:start="47:27" pos:end="47:27"><literal type="number" pos:start="47:27" pos:end="47:27">0</literal></expr>]</index></name> <operator pos:start="47:30" pos:end="47:30">=</operator> <name pos:start="47:32" pos:end="47:38">tmp_ptr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:39"><expr pos:start="49:9" pos:end="49:38"><name pos:start="49:9" pos:end="49:15">tmp_ptr</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <name pos:start="49:19" pos:end="49:38"><name pos:start="49:19" pos:end="49:19">q</name><operator pos:start="49:20" pos:end="49:21">-&gt;</operator><name pos:start="49:22" pos:end="49:35">decode_buf_ptr</name><index pos:start="49:36" pos:end="49:38">[<expr pos:start="49:37" pos:end="49:37"><literal type="number" pos:start="49:37" pos:end="49:37">3</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:52"><expr pos:start="51:9" pos:end="51:51"><name pos:start="51:9" pos:end="51:28"><name pos:start="51:9" pos:end="51:9">q</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:25">decode_buf_ptr</name><index pos:start="51:26" pos:end="51:28">[<expr pos:start="51:27" pos:end="51:27"><literal type="number" pos:start="51:27" pos:end="51:27">3</literal></expr>]</index></name> <operator pos:start="51:30" pos:end="51:30">=</operator> <name pos:start="51:32" pos:end="51:51"><name pos:start="51:32" pos:end="51:32">q</name><operator pos:start="51:33" pos:end="51:34">-&gt;</operator><name pos:start="51:35" pos:end="51:48">decode_buf_ptr</name><index pos:start="51:49" pos:end="51:51">[<expr pos:start="51:50" pos:end="51:50"><literal type="number" pos:start="51:50" pos:end="51:50">2</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:39"><expr pos:start="53:9" pos:end="53:38"><name pos:start="53:9" pos:end="53:28"><name pos:start="53:9" pos:end="53:9">q</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:25">decode_buf_ptr</name><index pos:start="53:26" pos:end="53:28">[<expr pos:start="53:27" pos:end="53:27"><literal type="number" pos:start="53:27" pos:end="53:27">2</literal></expr>]</index></name> <operator pos:start="53:30" pos:end="53:30">=</operator> <name pos:start="53:32" pos:end="53:38">tmp_ptr</name></expr>;</expr_stmt>



        <comment type="block" pos:start="57:9" pos:end="59:31">/* FIXME: Rethink the gainbuffer handling, maybe a rename?

           now/previous swap */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:39"><expr pos:start="61:9" pos:end="61:38"><name pos:start="61:9" pos:end="61:23"><name pos:start="61:9" pos:end="61:9">q</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:23">gain_now_ptr</name></name> <operator pos:start="61:25" pos:end="61:25">=</operator> <operator pos:start="61:27" pos:end="61:27">&amp;</operator><name pos:start="61:28" pos:end="61:38"><name pos:start="61:28" pos:end="61:28">q</name><operator pos:start="61:29" pos:end="61:30">-&gt;</operator><name pos:start="61:31" pos:end="61:38">gain_now</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:49"><expr pos:start="63:9" pos:end="63:48"><name pos:start="63:9" pos:end="63:28"><name pos:start="63:9" pos:end="63:9">q</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:28">gain_previous_ptr</name></name> <operator pos:start="63:30" pos:end="63:30">=</operator> <operator pos:start="63:32" pos:end="63:32">&amp;</operator><name pos:start="63:33" pos:end="63:48"><name pos:start="63:33" pos:end="63:33">q</name><operator pos:start="63:34" pos:end="63:35">-&gt;</operator><name pos:start="63:36" pos:end="63:48">gain_previous</name></name></expr>;</expr_stmt>

        <for pos:start="65:9" pos:end="101:9">for <control pos:start="65:13" pos:end="65:42">(<init pos:start="65:14" pos:end="65:18"><expr pos:start="65:14" pos:end="65:16"><name pos:start="65:14" pos:end="65:14">i</name><operator pos:start="65:15" pos:end="65:15">=</operator><literal type="number" pos:start="65:16" pos:end="65:16">0</literal></expr> ;</init> <condition pos:start="65:20" pos:end="65:37"><expr pos:start="65:20" pos:end="65:35"><name pos:start="65:20" pos:end="65:20">i</name><operator pos:start="65:21" pos:end="65:21">&lt;</operator><name pos:start="65:22" pos:end="65:35"><name pos:start="65:22" pos:end="65:22">q</name><operator pos:start="65:23" pos:end="65:24">-&gt;</operator><name pos:start="65:25" pos:end="65:35">nb_channels</name></name></expr> ;</condition> <incr pos:start="65:39" pos:end="65:41"><expr pos:start="65:39" pos:end="65:41"><name pos:start="65:39" pos:end="65:39">i</name><operator pos:start="65:40" pos:end="65:41">++</operator></expr></incr>)</control><block pos:start="65:43" pos:end="101:9">{<block_content pos:start="69:13" pos:end="99:13">



            <expr_stmt pos:start="69:13" pos:end="69:82"><expr pos:start="69:13" pos:end="69:81"><call pos:start="69:13" pos:end="69:81"><name pos:start="69:13" pos:end="69:21">cook_imlt</name><argument_list pos:start="69:22" pos:end="69:81">(<argument pos:start="69:23" pos:end="69:23"><expr pos:start="69:23" pos:end="69:23"><name pos:start="69:23" pos:end="69:23">q</name></expr></argument>, <argument pos:start="69:26" pos:end="69:47"><expr pos:start="69:26" pos:end="69:47"><name pos:start="69:26" pos:end="69:47"><name pos:start="69:26" pos:end="69:26">q</name><operator pos:start="69:27" pos:end="69:28">-&gt;</operator><name pos:start="69:29" pos:end="69:42">decode_buf_ptr</name><index pos:start="69:43" pos:end="69:47">[<expr pos:start="69:44" pos:end="69:46"><name pos:start="69:44" pos:end="69:44">i</name><operator pos:start="69:45" pos:end="69:45">*</operator><literal type="number" pos:start="69:46" pos:end="69:46">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="69:50" pos:end="69:68"><expr pos:start="69:50" pos:end="69:68"><name pos:start="69:50" pos:end="69:68"><name pos:start="69:50" pos:end="69:50">q</name><operator pos:start="69:51" pos:end="69:52">-&gt;</operator><name pos:start="69:53" pos:end="69:68">mono_mdct_output</name></name></expr></argument>, <argument pos:start="69:71" pos:end="69:80"><expr pos:start="69:71" pos:end="69:80"><name pos:start="69:71" pos:end="69:80"><name pos:start="69:71" pos:end="69:71">q</name><operator pos:start="69:72" pos:end="69:73">-&gt;</operator><name pos:start="69:74" pos:end="69:80">mlt_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="73:77"><expr pos:start="71:13" pos:end="73:76"><call pos:start="71:13" pos:end="73:76"><name pos:start="71:13" pos:end="71:27">gain_compensate</name><argument_list pos:start="71:28" pos:end="73:76">(<argument pos:start="71:29" pos:end="71:29"><expr pos:start="71:29" pos:end="71:29"><name pos:start="71:29" pos:end="71:29">q</name></expr></argument>, <argument pos:start="71:32" pos:end="71:50"><expr pos:start="71:32" pos:end="71:50"><name pos:start="71:32" pos:end="71:50"><name pos:start="71:32" pos:end="71:32">q</name><operator pos:start="71:33" pos:end="71:34">-&gt;</operator><name pos:start="71:35" pos:end="71:50">mono_mdct_output</name></name></expr></argument>, <argument pos:start="71:53" pos:end="71:67"><expr pos:start="71:53" pos:end="71:67"><name pos:start="71:53" pos:end="71:67"><name pos:start="71:53" pos:end="71:53">q</name><operator pos:start="71:54" pos:end="71:55">-&gt;</operator><name pos:start="71:56" pos:end="71:67">gain_now_ptr</name></name></expr></argument>,

                            <argument pos:start="73:29" pos:end="73:48"><expr pos:start="73:29" pos:end="73:48"><name pos:start="73:29" pos:end="73:48"><name pos:start="73:29" pos:end="73:29">q</name><operator pos:start="73:30" pos:end="73:31">-&gt;</operator><name pos:start="73:32" pos:end="73:48">gain_previous_ptr</name></name></expr></argument>, <argument pos:start="73:51" pos:end="73:75"><expr pos:start="73:51" pos:end="73:75"><name pos:start="73:51" pos:end="73:75"><name pos:start="73:51" pos:end="73:51">q</name><operator pos:start="73:52" pos:end="73:53">-&gt;</operator><name pos:start="73:54" pos:end="73:72">previous_buffer_ptr</name><index pos:start="73:73" pos:end="73:75">[<expr pos:start="73:74" pos:end="73:74"><literal type="number" pos:start="73:74" pos:end="73:74">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="77:13" pos:end="77:47">/* Swap out the previous buffer. */</comment>

            <expr_stmt pos:start="79:13" pos:end="79:48"><expr pos:start="79:13" pos:end="79:47"><name pos:start="79:13" pos:end="79:19">tmp_ptr</name> <operator pos:start="79:21" pos:end="79:21">=</operator> <name pos:start="79:23" pos:end="79:47"><name pos:start="79:23" pos:end="79:23">q</name><operator pos:start="79:24" pos:end="79:25">-&gt;</operator><name pos:start="79:26" pos:end="79:44">previous_buffer_ptr</name><index pos:start="79:45" pos:end="79:47">[<expr pos:start="79:46" pos:end="79:46"><literal type="number" pos:start="79:46" pos:end="79:46">0</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:66"><expr pos:start="81:13" pos:end="81:65"><name pos:start="81:13" pos:end="81:37"><name pos:start="81:13" pos:end="81:13">q</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:34">previous_buffer_ptr</name><index pos:start="81:35" pos:end="81:37">[<expr pos:start="81:36" pos:end="81:36"><literal type="number" pos:start="81:36" pos:end="81:36">0</literal></expr>]</index></name> <operator pos:start="81:39" pos:end="81:39">=</operator> <name pos:start="81:41" pos:end="81:65"><name pos:start="81:41" pos:end="81:41">q</name><operator pos:start="81:42" pos:end="81:43">-&gt;</operator><name pos:start="81:44" pos:end="81:62">previous_buffer_ptr</name><index pos:start="81:63" pos:end="81:65">[<expr pos:start="81:64" pos:end="81:64"><literal type="number" pos:start="81:64" pos:end="81:64">1</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:48"><expr pos:start="83:13" pos:end="83:47"><name pos:start="83:13" pos:end="83:37"><name pos:start="83:13" pos:end="83:13">q</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:34">previous_buffer_ptr</name><index pos:start="83:35" pos:end="83:37">[<expr pos:start="83:36" pos:end="83:36"><literal type="number" pos:start="83:36" pos:end="83:36">1</literal></expr>]</index></name> <operator pos:start="83:39" pos:end="83:39">=</operator> <name pos:start="83:41" pos:end="83:47">tmp_ptr</name></expr>;</expr_stmt>



            <comment type="block" pos:start="87:13" pos:end="87:57">/* Clip and convert the floats to 16 bits. */</comment>

            <for pos:start="89:13" pos:end="99:13">for <control pos:start="89:17" pos:end="89:52">(<init pos:start="89:18" pos:end="89:22"><expr pos:start="89:18" pos:end="89:20"><name pos:start="89:18" pos:end="89:18">j</name><operator pos:start="89:19" pos:end="89:19">=</operator><literal type="number" pos:start="89:20" pos:end="89:20">0</literal></expr> ;</init> <condition pos:start="89:24" pos:end="89:47"><expr pos:start="89:24" pos:end="89:45"><name pos:start="89:24" pos:end="89:24">j</name><operator pos:start="89:25" pos:end="89:25">&lt;</operator><name pos:start="89:26" pos:end="89:45"><name pos:start="89:26" pos:end="89:26">q</name><operator pos:start="89:27" pos:end="89:28">-&gt;</operator><name pos:start="89:29" pos:end="89:45">samples_per_frame</name></name></expr> ;</condition> <incr pos:start="89:49" pos:end="89:51"><expr pos:start="89:49" pos:end="89:51"><name pos:start="89:49" pos:end="89:49">j</name><operator pos:start="89:50" pos:end="89:51">++</operator></expr></incr>)</control><block pos:start="89:53" pos:end="99:13">{<block_content pos:start="91:17" pos:end="97:41">

                <expr_stmt pos:start="91:17" pos:end="91:55"><expr pos:start="91:17" pos:end="91:54"><name pos:start="91:17" pos:end="91:21">value</name> <operator pos:start="91:23" pos:end="91:23">=</operator> <call pos:start="91:25" pos:end="91:54"><name pos:start="91:25" pos:end="91:30">lrintf</name><argument_list pos:start="91:31" pos:end="91:54">(<argument pos:start="91:32" pos:end="91:53"><expr pos:start="91:32" pos:end="91:53"><name pos:start="91:32" pos:end="91:53"><name pos:start="91:32" pos:end="91:32">q</name><operator pos:start="91:33" pos:end="91:34">-&gt;</operator><name pos:start="91:35" pos:end="91:50">mono_mdct_output</name><index pos:start="91:51" pos:end="91:53">[<expr pos:start="91:52" pos:end="91:52"><name pos:start="91:52" pos:end="91:52">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="93:17" pos:end="95:53"><if pos:start="93:17" pos:end="93:50">if<condition pos:start="93:19" pos:end="93:34">(<expr pos:start="93:20" pos:end="93:33"><name pos:start="93:20" pos:end="93:24">value</name> <operator pos:start="93:26" pos:end="93:26">&lt;</operator> <operator pos:start="93:28" pos:end="93:28">-</operator><literal type="number" pos:start="93:29" pos:end="93:33">32768</literal></expr>)</condition><block type="pseudo" pos:start="93:36" pos:end="93:50"><block_content pos:start="93:36" pos:end="93:50"> <expr_stmt pos:start="93:36" pos:end="93:50"><expr pos:start="93:36" pos:end="93:49"><name pos:start="93:36" pos:end="93:40">value</name> <operator pos:start="93:42" pos:end="93:42">=</operator> <operator pos:start="93:44" pos:end="93:44">-</operator><literal type="number" pos:start="93:45" pos:end="93:49">32768</literal></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="95:17" pos:end="95:53">else if<condition pos:start="95:24" pos:end="95:38">(<expr pos:start="95:25" pos:end="95:37"><name pos:start="95:25" pos:end="95:29">value</name> <operator pos:start="95:31" pos:end="95:31">&gt;</operator> <literal type="number" pos:start="95:33" pos:end="95:37">32767</literal></expr>)</condition><block type="pseudo" pos:start="95:40" pos:end="95:53"><block_content pos:start="95:40" pos:end="95:53"> <expr_stmt pos:start="95:40" pos:end="95:53"><expr pos:start="95:40" pos:end="95:52"><name pos:start="95:40" pos:end="95:44">value</name> <operator pos:start="95:46" pos:end="95:46">=</operator> <literal type="number" pos:start="95:48" pos:end="95:52">32767</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:41"><expr pos:start="97:17" pos:end="97:40"><name pos:start="97:17" pos:end="97:32"><name pos:start="97:17" pos:end="97:25">outbuffer</name><index pos:start="97:26" pos:end="97:32">[<expr pos:start="97:27" pos:end="97:31"><literal type="number" pos:start="97:27" pos:end="97:27">2</literal><operator pos:start="97:28" pos:end="97:28">*</operator><name pos:start="97:29" pos:end="97:29">j</name><operator pos:start="97:30" pos:end="97:30">+</operator><name pos:start="97:31" pos:end="97:31">i</name></expr>]</index></name> <operator pos:start="97:34" pos:end="97:34">=</operator> <name pos:start="97:36" pos:end="97:40">value</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>



        <expr_stmt pos:start="105:9" pos:end="105:66"><expr pos:start="105:9" pos:end="105:65"><call pos:start="105:9" pos:end="105:65"><name pos:start="105:9" pos:end="105:14">memcpy</name><argument_list pos:start="105:15" pos:end="105:65">(<argument pos:start="105:16" pos:end="105:27"><expr pos:start="105:16" pos:end="105:27"><operator pos:start="105:16" pos:end="105:16">&amp;</operator><name pos:start="105:17" pos:end="105:27"><name pos:start="105:17" pos:end="105:17">q</name><operator pos:start="105:18" pos:end="105:19">-&gt;</operator><name pos:start="105:20" pos:end="105:27">gain_now</name></name></expr></argument>, <argument pos:start="105:30" pos:end="105:46"><expr pos:start="105:30" pos:end="105:46"><operator pos:start="105:30" pos:end="105:30">&amp;</operator><name pos:start="105:31" pos:end="105:46"><name pos:start="105:31" pos:end="105:31">q</name><operator pos:start="105:32" pos:end="105:33">-&gt;</operator><name pos:start="105:34" pos:end="105:46">gain_previous</name></name></expr></argument>, <argument pos:start="105:49" pos:end="105:64"><expr pos:start="105:49" pos:end="105:64"><sizeof pos:start="105:49" pos:end="105:64">sizeof<argument_list pos:start="105:55" pos:end="105:64">(<argument pos:start="105:56" pos:end="105:63"><expr pos:start="105:56" pos:end="105:63"><name pos:start="105:56" pos:end="105:63">COOKgain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:70"><expr pos:start="107:9" pos:end="107:69"><call pos:start="107:9" pos:end="107:69"><name pos:start="107:9" pos:end="107:14">memcpy</name><argument_list pos:start="107:15" pos:end="107:69">(<argument pos:start="107:16" pos:end="107:32"><expr pos:start="107:16" pos:end="107:32"><operator pos:start="107:16" pos:end="107:16">&amp;</operator><name pos:start="107:17" pos:end="107:32"><name pos:start="107:17" pos:end="107:17">q</name><operator pos:start="107:18" pos:end="107:19">-&gt;</operator><name pos:start="107:20" pos:end="107:32">gain_previous</name></name></expr></argument>, <argument pos:start="107:35" pos:end="107:50"><expr pos:start="107:35" pos:end="107:50"><operator pos:start="107:35" pos:end="107:35">&amp;</operator><name pos:start="107:36" pos:end="107:50"><name pos:start="107:36" pos:end="107:36">q</name><operator pos:start="107:37" pos:end="107:38">-&gt;</operator><name pos:start="107:39" pos:end="107:50">gain_current</name></name></expr></argument>, <argument pos:start="107:53" pos:end="107:68"><expr pos:start="107:53" pos:end="107:68"><sizeof pos:start="107:53" pos:end="107:68">sizeof<argument_list pos:start="107:59" pos:end="107:68">(<argument pos:start="107:60" pos:end="107:67"><expr pos:start="107:60" pos:end="107:67"><name pos:start="107:60" pos:end="107:67">COOKgain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <if type="elseif" pos:start="111:7" pos:end="235:5">else if <condition pos:start="111:15" pos:end="111:55">(<expr pos:start="111:16" pos:end="111:54"><name pos:start="111:16" pos:end="111:29"><name pos:start="111:16" pos:end="111:16">q</name><operator pos:start="111:17" pos:end="111:18">-&gt;</operator><name pos:start="111:19" pos:end="111:29">nb_channels</name></name><operator pos:start="111:30" pos:end="111:31">==</operator><literal type="number" pos:start="111:32" pos:end="111:32">2</literal> <operator pos:start="111:34" pos:end="111:35">&amp;&amp;</operator> <name pos:start="111:37" pos:end="111:51"><name pos:start="111:37" pos:end="111:37">q</name><operator pos:start="111:38" pos:end="111:39">-&gt;</operator><name pos:start="111:40" pos:end="111:51">joint_stereo</name></name><operator pos:start="111:52" pos:end="111:53">==</operator><literal type="number" pos:start="111:54" pos:end="111:54">0</literal></expr>)</condition> <block pos:start="111:57" pos:end="235:5">{<block_content pos:start="115:13" pos:end="231:74">

            <comment type="block" pos:start="113:13" pos:end="113:27">/* channel 0 */</comment>

            <expr_stmt pos:start="115:13" pos:end="115:49"><expr pos:start="115:13" pos:end="115:48"><call pos:start="115:13" pos:end="115:48"><name pos:start="115:13" pos:end="115:23">mono_decode</name><argument_list pos:start="115:24" pos:end="115:48">(<argument pos:start="115:25" pos:end="115:25"><expr pos:start="115:25" pos:end="115:25"><name pos:start="115:25" pos:end="115:25">q</name></expr></argument>, <argument pos:start="115:28" pos:end="115:47"><expr pos:start="115:28" pos:end="115:47"><name pos:start="115:28" pos:end="115:47"><name pos:start="115:28" pos:end="115:28">q</name><operator pos:start="115:29" pos:end="115:30">-&gt;</operator><name pos:start="115:31" pos:end="115:44">decode_buf_ptr</name><index pos:start="115:45" pos:end="115:47">[<expr pos:start="115:46" pos:end="115:46"><literal type="number" pos:start="115:46" pos:end="115:46">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="119:13" pos:end="119:43"><expr pos:start="119:13" pos:end="119:42"><name pos:start="119:13" pos:end="119:19">tmp_ptr</name> <operator pos:start="119:21" pos:end="119:21">=</operator> <name pos:start="119:23" pos:end="119:42"><name pos:start="119:23" pos:end="119:23">q</name><operator pos:start="119:24" pos:end="119:25">-&gt;</operator><name pos:start="119:26" pos:end="119:39">decode_buf_ptr</name><index pos:start="119:40" pos:end="119:42">[<expr pos:start="119:41" pos:end="119:41"><literal type="number" pos:start="119:41" pos:end="119:41">0</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:56"><expr pos:start="121:13" pos:end="121:55"><name pos:start="121:13" pos:end="121:32"><name pos:start="121:13" pos:end="121:13">q</name><operator pos:start="121:14" pos:end="121:15">-&gt;</operator><name pos:start="121:16" pos:end="121:29">decode_buf_ptr</name><index pos:start="121:30" pos:end="121:32">[<expr pos:start="121:31" pos:end="121:31"><literal type="number" pos:start="121:31" pos:end="121:31">0</literal></expr>]</index></name> <operator pos:start="121:34" pos:end="121:34">=</operator> <name pos:start="121:36" pos:end="121:55"><name pos:start="121:36" pos:end="121:36">q</name><operator pos:start="121:37" pos:end="121:38">-&gt;</operator><name pos:start="121:39" pos:end="121:52">decode_buf_ptr</name><index pos:start="121:53" pos:end="121:55">[<expr pos:start="121:54" pos:end="121:54"><literal type="number" pos:start="121:54" pos:end="121:54">1</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:56"><expr pos:start="123:13" pos:end="123:55"><name pos:start="123:13" pos:end="123:32"><name pos:start="123:13" pos:end="123:13">q</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:29">decode_buf_ptr</name><index pos:start="123:30" pos:end="123:32">[<expr pos:start="123:31" pos:end="123:31"><literal type="number" pos:start="123:31" pos:end="123:31">1</literal></expr>]</index></name> <operator pos:start="123:34" pos:end="123:34">=</operator> <name pos:start="123:36" pos:end="123:55"><name pos:start="123:36" pos:end="123:36">q</name><operator pos:start="123:37" pos:end="123:38">-&gt;</operator><name pos:start="123:39" pos:end="123:52">decode_buf_ptr</name><index pos:start="123:53" pos:end="123:55">[<expr pos:start="123:54" pos:end="123:54"><literal type="number" pos:start="123:54" pos:end="123:54">2</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:56"><expr pos:start="125:13" pos:end="125:55"><name pos:start="125:13" pos:end="125:32"><name pos:start="125:13" pos:end="125:13">q</name><operator pos:start="125:14" pos:end="125:15">-&gt;</operator><name pos:start="125:16" pos:end="125:29">decode_buf_ptr</name><index pos:start="125:30" pos:end="125:32">[<expr pos:start="125:31" pos:end="125:31"><literal type="number" pos:start="125:31" pos:end="125:31">2</literal></expr>]</index></name> <operator pos:start="125:34" pos:end="125:34">=</operator> <name pos:start="125:36" pos:end="125:55"><name pos:start="125:36" pos:end="125:36">q</name><operator pos:start="125:37" pos:end="125:38">-&gt;</operator><name pos:start="125:39" pos:end="125:52">decode_buf_ptr</name><index pos:start="125:53" pos:end="125:55">[<expr pos:start="125:54" pos:end="125:54"><literal type="number" pos:start="125:54" pos:end="125:54">3</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:43"><expr pos:start="127:13" pos:end="127:42"><name pos:start="127:13" pos:end="127:32"><name pos:start="127:13" pos:end="127:13">q</name><operator pos:start="127:14" pos:end="127:15">-&gt;</operator><name pos:start="127:16" pos:end="127:29">decode_buf_ptr</name><index pos:start="127:30" pos:end="127:32">[<expr pos:start="127:31" pos:end="127:31"><literal type="number" pos:start="127:31" pos:end="127:31">3</literal></expr>]</index></name> <operator pos:start="127:34" pos:end="127:34">=</operator> <name pos:start="127:36" pos:end="127:42">tmp_ptr</name></expr>;</expr_stmt>



            <expr_stmt pos:start="131:13" pos:end="131:43"><expr pos:start="131:13" pos:end="131:42"><name pos:start="131:13" pos:end="131:27"><name pos:start="131:13" pos:end="131:13">q</name><operator pos:start="131:14" pos:end="131:15">-&gt;</operator><name pos:start="131:16" pos:end="131:27">gain_now_ptr</name></name> <operator pos:start="131:29" pos:end="131:29">=</operator> <operator pos:start="131:31" pos:end="131:31">&amp;</operator><name pos:start="131:32" pos:end="131:42"><name pos:start="131:32" pos:end="131:32">q</name><operator pos:start="131:33" pos:end="131:34">-&gt;</operator><name pos:start="131:35" pos:end="131:42">gain_now</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:53"><expr pos:start="133:13" pos:end="133:52"><name pos:start="133:13" pos:end="133:32"><name pos:start="133:13" pos:end="133:13">q</name><operator pos:start="133:14" pos:end="133:15">-&gt;</operator><name pos:start="133:16" pos:end="133:32">gain_previous_ptr</name></name> <operator pos:start="133:34" pos:end="133:34">=</operator> <operator pos:start="133:36" pos:end="133:36">&amp;</operator><name pos:start="133:37" pos:end="133:52"><name pos:start="133:37" pos:end="133:37">q</name><operator pos:start="133:38" pos:end="133:39">-&gt;</operator><name pos:start="133:40" pos:end="133:52">gain_previous</name></name></expr>;</expr_stmt>



            <expr_stmt pos:start="137:13" pos:end="137:79"><expr pos:start="137:13" pos:end="137:78"><call pos:start="137:13" pos:end="137:78"><name pos:start="137:13" pos:end="137:21">cook_imlt</name><argument_list pos:start="137:22" pos:end="137:78">(<argument pos:start="137:23" pos:end="137:23"><expr pos:start="137:23" pos:end="137:23"><name pos:start="137:23" pos:end="137:23">q</name></expr></argument>, <argument pos:start="137:26" pos:end="137:45"><expr pos:start="137:26" pos:end="137:45"><name pos:start="137:26" pos:end="137:45"><name pos:start="137:26" pos:end="137:26">q</name><operator pos:start="137:27" pos:end="137:28">-&gt;</operator><name pos:start="137:29" pos:end="137:42">decode_buf_ptr</name><index pos:start="137:43" pos:end="137:45">[<expr pos:start="137:44" pos:end="137:44"><literal type="number" pos:start="137:44" pos:end="137:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="137:48" pos:end="137:66"><expr pos:start="137:48" pos:end="137:66"><name pos:start="137:48" pos:end="137:66"><name pos:start="137:48" pos:end="137:48">q</name><operator pos:start="137:49" pos:end="137:50">-&gt;</operator><name pos:start="137:51" pos:end="137:66">mono_mdct_output</name></name></expr></argument>,<argument pos:start="137:68" pos:end="137:77"><expr pos:start="137:68" pos:end="137:77"><name pos:start="137:68" pos:end="137:77"><name pos:start="137:68" pos:end="137:68">q</name><operator pos:start="137:69" pos:end="137:70">-&gt;</operator><name pos:start="137:71" pos:end="137:77">mlt_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="141:77"><expr pos:start="139:13" pos:end="141:76"><call pos:start="139:13" pos:end="141:76"><name pos:start="139:13" pos:end="139:27">gain_compensate</name><argument_list pos:start="139:28" pos:end="141:76">(<argument pos:start="139:29" pos:end="139:29"><expr pos:start="139:29" pos:end="139:29"><name pos:start="139:29" pos:end="139:29">q</name></expr></argument>, <argument pos:start="139:32" pos:end="139:50"><expr pos:start="139:32" pos:end="139:50"><name pos:start="139:32" pos:end="139:50"><name pos:start="139:32" pos:end="139:32">q</name><operator pos:start="139:33" pos:end="139:34">-&gt;</operator><name pos:start="139:35" pos:end="139:50">mono_mdct_output</name></name></expr></argument>, <argument pos:start="139:53" pos:end="139:67"><expr pos:start="139:53" pos:end="139:67"><name pos:start="139:53" pos:end="139:67"><name pos:start="139:53" pos:end="139:53">q</name><operator pos:start="139:54" pos:end="139:55">-&gt;</operator><name pos:start="139:56" pos:end="139:67">gain_now_ptr</name></name></expr></argument>,

                            <argument pos:start="141:29" pos:end="141:48"><expr pos:start="141:29" pos:end="141:48"><name pos:start="141:29" pos:end="141:48"><name pos:start="141:29" pos:end="141:29">q</name><operator pos:start="141:30" pos:end="141:31">-&gt;</operator><name pos:start="141:32" pos:end="141:48">gain_previous_ptr</name></name></expr></argument>, <argument pos:start="141:51" pos:end="141:75"><expr pos:start="141:51" pos:end="141:75"><name pos:start="141:51" pos:end="141:75"><name pos:start="141:51" pos:end="141:51">q</name><operator pos:start="141:52" pos:end="141:53">-&gt;</operator><name pos:start="141:54" pos:end="141:72">previous_buffer_ptr</name><index pos:start="141:73" pos:end="141:75">[<expr pos:start="141:74" pos:end="141:74"><literal type="number" pos:start="141:74" pos:end="141:74">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="143:13" pos:end="143:47">/* Swap out the previous buffer. */</comment>

            <expr_stmt pos:start="145:13" pos:end="145:48"><expr pos:start="145:13" pos:end="145:47"><name pos:start="145:13" pos:end="145:19">tmp_ptr</name> <operator pos:start="145:21" pos:end="145:21">=</operator> <name pos:start="145:23" pos:end="145:47"><name pos:start="145:23" pos:end="145:23">q</name><operator pos:start="145:24" pos:end="145:25">-&gt;</operator><name pos:start="145:26" pos:end="145:44">previous_buffer_ptr</name><index pos:start="145:45" pos:end="145:47">[<expr pos:start="145:46" pos:end="145:46"><literal type="number" pos:start="145:46" pos:end="145:46">0</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:66"><expr pos:start="147:13" pos:end="147:65"><name pos:start="147:13" pos:end="147:37"><name pos:start="147:13" pos:end="147:13">q</name><operator pos:start="147:14" pos:end="147:15">-&gt;</operator><name pos:start="147:16" pos:end="147:34">previous_buffer_ptr</name><index pos:start="147:35" pos:end="147:37">[<expr pos:start="147:36" pos:end="147:36"><literal type="number" pos:start="147:36" pos:end="147:36">0</literal></expr>]</index></name> <operator pos:start="147:39" pos:end="147:39">=</operator> <name pos:start="147:41" pos:end="147:65"><name pos:start="147:41" pos:end="147:41">q</name><operator pos:start="147:42" pos:end="147:43">-&gt;</operator><name pos:start="147:44" pos:end="147:62">previous_buffer_ptr</name><index pos:start="147:63" pos:end="147:65">[<expr pos:start="147:64" pos:end="147:64"><literal type="number" pos:start="147:64" pos:end="147:64">1</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:48"><expr pos:start="149:13" pos:end="149:47"><name pos:start="149:13" pos:end="149:37"><name pos:start="149:13" pos:end="149:13">q</name><operator pos:start="149:14" pos:end="149:15">-&gt;</operator><name pos:start="149:16" pos:end="149:34">previous_buffer_ptr</name><index pos:start="149:35" pos:end="149:37">[<expr pos:start="149:36" pos:end="149:36"><literal type="number" pos:start="149:36" pos:end="149:36">1</literal></expr>]</index></name> <operator pos:start="149:39" pos:end="149:39">=</operator> <name pos:start="149:41" pos:end="149:47">tmp_ptr</name></expr>;</expr_stmt>



            <for pos:start="153:13" pos:end="163:13">for <control pos:start="153:17" pos:end="153:52">(<init pos:start="153:18" pos:end="153:22"><expr pos:start="153:18" pos:end="153:20"><name pos:start="153:18" pos:end="153:18">j</name><operator pos:start="153:19" pos:end="153:19">=</operator><literal type="number" pos:start="153:20" pos:end="153:20">0</literal></expr> ;</init> <condition pos:start="153:24" pos:end="153:47"><expr pos:start="153:24" pos:end="153:45"><name pos:start="153:24" pos:end="153:24">j</name><operator pos:start="153:25" pos:end="153:25">&lt;</operator><name pos:start="153:26" pos:end="153:45"><name pos:start="153:26" pos:end="153:26">q</name><operator pos:start="153:27" pos:end="153:28">-&gt;</operator><name pos:start="153:29" pos:end="153:45">samples_per_frame</name></name></expr> ;</condition> <incr pos:start="153:49" pos:end="153:51"><expr pos:start="153:49" pos:end="153:51"><name pos:start="153:49" pos:end="153:49">j</name><operator pos:start="153:50" pos:end="153:51">++</operator></expr></incr>)</control><block pos:start="153:53" pos:end="163:13">{<block_content pos:start="155:17" pos:end="161:41">

                <expr_stmt pos:start="155:17" pos:end="155:55"><expr pos:start="155:17" pos:end="155:54"><name pos:start="155:17" pos:end="155:21">value</name> <operator pos:start="155:23" pos:end="155:23">=</operator> <call pos:start="155:25" pos:end="155:54"><name pos:start="155:25" pos:end="155:30">lrintf</name><argument_list pos:start="155:31" pos:end="155:54">(<argument pos:start="155:32" pos:end="155:53"><expr pos:start="155:32" pos:end="155:53"><name pos:start="155:32" pos:end="155:53"><name pos:start="155:32" pos:end="155:32">q</name><operator pos:start="155:33" pos:end="155:34">-&gt;</operator><name pos:start="155:35" pos:end="155:50">mono_mdct_output</name><index pos:start="155:51" pos:end="155:53">[<expr pos:start="155:52" pos:end="155:52"><name pos:start="155:52" pos:end="155:52">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="157:17" pos:end="159:53"><if pos:start="157:17" pos:end="157:50">if<condition pos:start="157:19" pos:end="157:34">(<expr pos:start="157:20" pos:end="157:33"><name pos:start="157:20" pos:end="157:24">value</name> <operator pos:start="157:26" pos:end="157:26">&lt;</operator> <operator pos:start="157:28" pos:end="157:28">-</operator><literal type="number" pos:start="157:29" pos:end="157:33">32768</literal></expr>)</condition><block type="pseudo" pos:start="157:36" pos:end="157:50"><block_content pos:start="157:36" pos:end="157:50"> <expr_stmt pos:start="157:36" pos:end="157:50"><expr pos:start="157:36" pos:end="157:49"><name pos:start="157:36" pos:end="157:40">value</name> <operator pos:start="157:42" pos:end="157:42">=</operator> <operator pos:start="157:44" pos:end="157:44">-</operator><literal type="number" pos:start="157:45" pos:end="157:49">32768</literal></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="159:17" pos:end="159:53">else if<condition pos:start="159:24" pos:end="159:38">(<expr pos:start="159:25" pos:end="159:37"><name pos:start="159:25" pos:end="159:29">value</name> <operator pos:start="159:31" pos:end="159:31">&gt;</operator> <literal type="number" pos:start="159:33" pos:end="159:37">32767</literal></expr>)</condition><block type="pseudo" pos:start="159:40" pos:end="159:53"><block_content pos:start="159:40" pos:end="159:53"> <expr_stmt pos:start="159:40" pos:end="159:53"><expr pos:start="159:40" pos:end="159:52"><name pos:start="159:40" pos:end="159:44">value</name> <operator pos:start="159:46" pos:end="159:46">=</operator> <literal type="number" pos:start="159:48" pos:end="159:52">32767</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="161:17" pos:end="161:41"><expr pos:start="161:17" pos:end="161:40"><name pos:start="161:17" pos:end="161:32"><name pos:start="161:17" pos:end="161:25">outbuffer</name><index pos:start="161:26" pos:end="161:32">[<expr pos:start="161:27" pos:end="161:31"><literal type="number" pos:start="161:27" pos:end="161:27">2</literal><operator pos:start="161:28" pos:end="161:28">*</operator><name pos:start="161:29" pos:end="161:29">j</name><operator pos:start="161:30" pos:end="161:30">+</operator><literal type="number" pos:start="161:31" pos:end="161:31">1</literal></expr>]</index></name> <operator pos:start="161:34" pos:end="161:34">=</operator> <name pos:start="161:36" pos:end="161:40">value</name></expr>;</expr_stmt>

            </block_content>}</block></for>



            <comment type="block" pos:start="167:13" pos:end="167:27">/* channel 1 */</comment>

            <comment type="line" pos:start="169:13" pos:end="169:77">//av_log(NULL,AV_LOG_ERROR,"bits = %d\n",get_bits_count(&amp;q-&gt;gb));</comment>

            <expr_stmt pos:start="171:13" pos:end="171:100"><expr pos:start="171:13" pos:end="171:99"><call pos:start="171:13" pos:end="171:99"><name pos:start="171:13" pos:end="171:25">init_get_bits</name><argument_list pos:start="171:26" pos:end="171:99">(<argument pos:start="171:27" pos:end="171:32"><expr pos:start="171:27" pos:end="171:32"><operator pos:start="171:27" pos:end="171:27">&amp;</operator><name pos:start="171:28" pos:end="171:32"><name pos:start="171:28" pos:end="171:28">q</name><operator pos:start="171:29" pos:end="171:30">-&gt;</operator><name pos:start="171:31" pos:end="171:32">gb</name></name></expr></argument>, <argument pos:start="171:35" pos:end="171:57"><expr pos:start="171:35" pos:end="171:57"><name pos:start="171:35" pos:end="171:57"><name pos:start="171:35" pos:end="171:35">q</name><operator pos:start="171:36" pos:end="171:37">-&gt;</operator><name pos:start="171:38" pos:end="171:57">decoded_bytes_buffer</name></name></expr></argument>, <argument pos:start="171:60" pos:end="171:98"><expr pos:start="171:60" pos:end="171:98"><name pos:start="171:60" pos:end="171:74">sub_packet_size</name><operator pos:start="171:75" pos:end="171:75">*</operator><literal type="number" pos:start="171:76" pos:end="171:77">8</literal><operator pos:start="171:77" pos:end="171:77">+</operator><name pos:start="171:78" pos:end="171:98"><name pos:start="171:78" pos:end="171:78">q</name><operator pos:start="171:79" pos:end="171:80">-&gt;</operator><name pos:start="171:81" pos:end="171:98">bits_per_subpacket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:55"><expr pos:start="173:13" pos:end="173:54"><call pos:start="173:13" pos:end="173:54"><name pos:start="173:13" pos:end="173:28">decode_gain_info</name><argument_list pos:start="173:29" pos:end="173:54">(<argument pos:start="173:30" pos:end="173:35"><expr pos:start="173:30" pos:end="173:35"><operator pos:start="173:30" pos:end="173:30">&amp;</operator><name pos:start="173:31" pos:end="173:35"><name pos:start="173:31" pos:end="173:31">q</name><operator pos:start="173:32" pos:end="173:33">-&gt;</operator><name pos:start="173:34" pos:end="173:35">gb</name></name></expr></argument>, <argument pos:start="173:38" pos:end="173:53"><expr pos:start="173:38" pos:end="173:53"><operator pos:start="173:38" pos:end="173:38">&amp;</operator><name pos:start="173:39" pos:end="173:53"><name pos:start="173:39" pos:end="173:39">q</name><operator pos:start="173:40" pos:end="173:41">-&gt;</operator><name pos:start="173:42" pos:end="173:53">gain_current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:start="175:13" pos:end="175:72">//memcpy(&amp;q-&gt;gain_copy, &amp;q-&gt;gain_current ,sizeof(COOKgain));</comment>

            <expr_stmt pos:start="177:13" pos:end="177:49"><expr pos:start="177:13" pos:end="177:48"><call pos:start="177:13" pos:end="177:48"><name pos:start="177:13" pos:end="177:23">mono_decode</name><argument_list pos:start="177:24" pos:end="177:48">(<argument pos:start="177:25" pos:end="177:25"><expr pos:start="177:25" pos:end="177:25"><name pos:start="177:25" pos:end="177:25">q</name></expr></argument>, <argument pos:start="177:28" pos:end="177:47"><expr pos:start="177:28" pos:end="177:47"><name pos:start="177:28" pos:end="177:47"><name pos:start="177:28" pos:end="177:28">q</name><operator pos:start="177:29" pos:end="177:30">-&gt;</operator><name pos:start="177:31" pos:end="177:44">decode_buf_ptr</name><index pos:start="177:45" pos:end="177:47">[<expr pos:start="177:46" pos:end="177:46"><literal type="number" pos:start="177:46" pos:end="177:46">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:43"><expr pos:start="179:13" pos:end="179:42"><name pos:start="179:13" pos:end="179:19">tmp_ptr</name> <operator pos:start="179:21" pos:end="179:21">=</operator> <name pos:start="179:23" pos:end="179:42"><name pos:start="179:23" pos:end="179:23">q</name><operator pos:start="179:24" pos:end="179:25">-&gt;</operator><name pos:start="179:26" pos:end="179:39">decode_buf_ptr</name><index pos:start="179:40" pos:end="179:42">[<expr pos:start="179:41" pos:end="179:41"><literal type="number" pos:start="179:41" pos:end="179:41">0</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:56"><expr pos:start="181:13" pos:end="181:55"><name pos:start="181:13" pos:end="181:32"><name pos:start="181:13" pos:end="181:13">q</name><operator pos:start="181:14" pos:end="181:15">-&gt;</operator><name pos:start="181:16" pos:end="181:29">decode_buf_ptr</name><index pos:start="181:30" pos:end="181:32">[<expr pos:start="181:31" pos:end="181:31"><literal type="number" pos:start="181:31" pos:end="181:31">1</literal></expr>]</index></name> <operator pos:start="181:34" pos:end="181:34">=</operator> <name pos:start="181:36" pos:end="181:55"><name pos:start="181:36" pos:end="181:36">q</name><operator pos:start="181:37" pos:end="181:38">-&gt;</operator><name pos:start="181:39" pos:end="181:52">decode_buf_ptr</name><index pos:start="181:53" pos:end="181:55">[<expr pos:start="181:54" pos:end="181:54"><literal type="number" pos:start="181:54" pos:end="181:54">2</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:56"><expr pos:start="183:13" pos:end="183:55"><name pos:start="183:13" pos:end="183:32"><name pos:start="183:13" pos:end="183:13">q</name><operator pos:start="183:14" pos:end="183:15">-&gt;</operator><name pos:start="183:16" pos:end="183:29">decode_buf_ptr</name><index pos:start="183:30" pos:end="183:32">[<expr pos:start="183:31" pos:end="183:31"><literal type="number" pos:start="183:31" pos:end="183:31">2</literal></expr>]</index></name> <operator pos:start="183:34" pos:end="183:34">=</operator> <name pos:start="183:36" pos:end="183:55"><name pos:start="183:36" pos:end="183:36">q</name><operator pos:start="183:37" pos:end="183:38">-&gt;</operator><name pos:start="183:39" pos:end="183:52">decode_buf_ptr</name><index pos:start="183:53" pos:end="183:55">[<expr pos:start="183:54" pos:end="183:54"><literal type="number" pos:start="183:54" pos:end="183:54">3</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:43"><expr pos:start="185:13" pos:end="185:42"><name pos:start="185:13" pos:end="185:32"><name pos:start="185:13" pos:end="185:13">q</name><operator pos:start="185:14" pos:end="185:15">-&gt;</operator><name pos:start="185:16" pos:end="185:29">decode_buf_ptr</name><index pos:start="185:30" pos:end="185:32">[<expr pos:start="185:31" pos:end="185:31"><literal type="number" pos:start="185:31" pos:end="185:31">3</literal></expr>]</index></name> <operator pos:start="185:34" pos:end="185:34">=</operator> <name pos:start="185:36" pos:end="185:42">tmp_ptr</name></expr>;</expr_stmt>



            <expr_stmt pos:start="189:13" pos:end="189:43"><expr pos:start="189:13" pos:end="189:42"><name pos:start="189:13" pos:end="189:27"><name pos:start="189:13" pos:end="189:13">q</name><operator pos:start="189:14" pos:end="189:15">-&gt;</operator><name pos:start="189:16" pos:end="189:27">gain_now_ptr</name></name> <operator pos:start="189:29" pos:end="189:29">=</operator> <operator pos:start="189:31" pos:end="189:31">&amp;</operator><name pos:start="189:32" pos:end="189:42"><name pos:start="189:32" pos:end="189:32">q</name><operator pos:start="189:33" pos:end="189:34">-&gt;</operator><name pos:start="189:35" pos:end="189:42">gain_now</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:53"><expr pos:start="191:13" pos:end="191:52"><name pos:start="191:13" pos:end="191:32"><name pos:start="191:13" pos:end="191:13">q</name><operator pos:start="191:14" pos:end="191:15">-&gt;</operator><name pos:start="191:16" pos:end="191:32">gain_previous_ptr</name></name> <operator pos:start="191:34" pos:end="191:34">=</operator> <operator pos:start="191:36" pos:end="191:36">&amp;</operator><name pos:start="191:37" pos:end="191:52"><name pos:start="191:37" pos:end="191:37">q</name><operator pos:start="191:38" pos:end="191:39">-&gt;</operator><name pos:start="191:40" pos:end="191:52">gain_previous</name></name></expr>;</expr_stmt>



            <expr_stmt pos:start="195:13" pos:end="195:79"><expr pos:start="195:13" pos:end="195:78"><call pos:start="195:13" pos:end="195:78"><name pos:start="195:13" pos:end="195:21">cook_imlt</name><argument_list pos:start="195:22" pos:end="195:78">(<argument pos:start="195:23" pos:end="195:23"><expr pos:start="195:23" pos:end="195:23"><name pos:start="195:23" pos:end="195:23">q</name></expr></argument>, <argument pos:start="195:26" pos:end="195:45"><expr pos:start="195:26" pos:end="195:45"><name pos:start="195:26" pos:end="195:45"><name pos:start="195:26" pos:end="195:26">q</name><operator pos:start="195:27" pos:end="195:28">-&gt;</operator><name pos:start="195:29" pos:end="195:42">decode_buf_ptr</name><index pos:start="195:43" pos:end="195:45">[<expr pos:start="195:44" pos:end="195:44"><literal type="number" pos:start="195:44" pos:end="195:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="195:48" pos:end="195:66"><expr pos:start="195:48" pos:end="195:66"><name pos:start="195:48" pos:end="195:66"><name pos:start="195:48" pos:end="195:48">q</name><operator pos:start="195:49" pos:end="195:50">-&gt;</operator><name pos:start="195:51" pos:end="195:66">mono_mdct_output</name></name></expr></argument>,<argument pos:start="195:68" pos:end="195:77"><expr pos:start="195:68" pos:end="195:77"><name pos:start="195:68" pos:end="195:77"><name pos:start="195:68" pos:end="195:68">q</name><operator pos:start="195:69" pos:end="195:70">-&gt;</operator><name pos:start="195:71" pos:end="195:77">mlt_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:118"><expr pos:start="197:13" pos:end="197:117"><call pos:start="197:13" pos:end="197:117"><name pos:start="197:13" pos:end="197:27">gain_compensate</name><argument_list pos:start="197:28" pos:end="197:117">(<argument pos:start="197:29" pos:end="197:29"><expr pos:start="197:29" pos:end="197:29"><name pos:start="197:29" pos:end="197:29">q</name></expr></argument>, <argument pos:start="197:32" pos:end="197:50"><expr pos:start="197:32" pos:end="197:50"><name pos:start="197:32" pos:end="197:50"><name pos:start="197:32" pos:end="197:32">q</name><operator pos:start="197:33" pos:end="197:34">-&gt;</operator><name pos:start="197:35" pos:end="197:50">mono_mdct_output</name></name></expr></argument>, <argument pos:start="197:53" pos:end="197:67"><expr pos:start="197:53" pos:end="197:67"><name pos:start="197:53" pos:end="197:67"><name pos:start="197:53" pos:end="197:53">q</name><operator pos:start="197:54" pos:end="197:55">-&gt;</operator><name pos:start="197:56" pos:end="197:67">gain_now_ptr</name></name></expr></argument>, <argument pos:start="197:70" pos:end="197:89"><expr pos:start="197:70" pos:end="197:89"><name pos:start="197:70" pos:end="197:89"><name pos:start="197:70" pos:end="197:70">q</name><operator pos:start="197:71" pos:end="197:72">-&gt;</operator><name pos:start="197:73" pos:end="197:89">gain_previous_ptr</name></name></expr></argument>, <argument pos:start="197:92" pos:end="197:116"><expr pos:start="197:92" pos:end="197:116"><name pos:start="197:92" pos:end="197:116"><name pos:start="197:92" pos:end="197:92">q</name><operator pos:start="197:93" pos:end="197:94">-&gt;</operator><name pos:start="197:95" pos:end="197:113">previous_buffer_ptr</name><index pos:start="197:114" pos:end="197:116">[<expr pos:start="197:115" pos:end="197:115"><literal type="number" pos:start="197:115" pos:end="197:115">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="201:13" pos:end="201:47">/* Swap out the previous buffer. */</comment>

            <expr_stmt pos:start="203:13" pos:end="203:48"><expr pos:start="203:13" pos:end="203:47"><name pos:start="203:13" pos:end="203:19">tmp_ptr</name> <operator pos:start="203:21" pos:end="203:21">=</operator> <name pos:start="203:23" pos:end="203:47"><name pos:start="203:23" pos:end="203:23">q</name><operator pos:start="203:24" pos:end="203:25">-&gt;</operator><name pos:start="203:26" pos:end="203:44">previous_buffer_ptr</name><index pos:start="203:45" pos:end="203:47">[<expr pos:start="203:46" pos:end="203:46"><literal type="number" pos:start="203:46" pos:end="203:46">0</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:66"><expr pos:start="205:13" pos:end="205:65"><name pos:start="205:13" pos:end="205:37"><name pos:start="205:13" pos:end="205:13">q</name><operator pos:start="205:14" pos:end="205:15">-&gt;</operator><name pos:start="205:16" pos:end="205:34">previous_buffer_ptr</name><index pos:start="205:35" pos:end="205:37">[<expr pos:start="205:36" pos:end="205:36"><literal type="number" pos:start="205:36" pos:end="205:36">0</literal></expr>]</index></name> <operator pos:start="205:39" pos:end="205:39">=</operator> <name pos:start="205:41" pos:end="205:65"><name pos:start="205:41" pos:end="205:41">q</name><operator pos:start="205:42" pos:end="205:43">-&gt;</operator><name pos:start="205:44" pos:end="205:62">previous_buffer_ptr</name><index pos:start="205:63" pos:end="205:65">[<expr pos:start="205:64" pos:end="205:64"><literal type="number" pos:start="205:64" pos:end="205:64">1</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:48"><expr pos:start="207:13" pos:end="207:47"><name pos:start="207:13" pos:end="207:37"><name pos:start="207:13" pos:end="207:13">q</name><operator pos:start="207:14" pos:end="207:15">-&gt;</operator><name pos:start="207:16" pos:end="207:34">previous_buffer_ptr</name><index pos:start="207:35" pos:end="207:37">[<expr pos:start="207:36" pos:end="207:36"><literal type="number" pos:start="207:36" pos:end="207:36">1</literal></expr>]</index></name> <operator pos:start="207:39" pos:end="207:39">=</operator> <name pos:start="207:41" pos:end="207:47">tmp_ptr</name></expr>;</expr_stmt>



            <for pos:start="211:13" pos:end="221:13">for <control pos:start="211:17" pos:end="211:52">(<init pos:start="211:18" pos:end="211:22"><expr pos:start="211:18" pos:end="211:20"><name pos:start="211:18" pos:end="211:18">j</name><operator pos:start="211:19" pos:end="211:19">=</operator><literal type="number" pos:start="211:20" pos:end="211:20">0</literal></expr> ;</init> <condition pos:start="211:24" pos:end="211:47"><expr pos:start="211:24" pos:end="211:45"><name pos:start="211:24" pos:end="211:24">j</name><operator pos:start="211:25" pos:end="211:25">&lt;</operator><name pos:start="211:26" pos:end="211:45"><name pos:start="211:26" pos:end="211:26">q</name><operator pos:start="211:27" pos:end="211:28">-&gt;</operator><name pos:start="211:29" pos:end="211:45">samples_per_frame</name></name></expr> ;</condition> <incr pos:start="211:49" pos:end="211:51"><expr pos:start="211:49" pos:end="211:51"><name pos:start="211:49" pos:end="211:49">j</name><operator pos:start="211:50" pos:end="211:51">++</operator></expr></incr>)</control><block pos:start="211:53" pos:end="221:13">{<block_content pos:start="213:17" pos:end="219:39">

                <expr_stmt pos:start="213:17" pos:end="213:55"><expr pos:start="213:17" pos:end="213:54"><name pos:start="213:17" pos:end="213:21">value</name> <operator pos:start="213:23" pos:end="213:23">=</operator> <call pos:start="213:25" pos:end="213:54"><name pos:start="213:25" pos:end="213:30">lrintf</name><argument_list pos:start="213:31" pos:end="213:54">(<argument pos:start="213:32" pos:end="213:53"><expr pos:start="213:32" pos:end="213:53"><name pos:start="213:32" pos:end="213:53"><name pos:start="213:32" pos:end="213:32">q</name><operator pos:start="213:33" pos:end="213:34">-&gt;</operator><name pos:start="213:35" pos:end="213:50">mono_mdct_output</name><index pos:start="213:51" pos:end="213:53">[<expr pos:start="213:52" pos:end="213:52"><name pos:start="213:52" pos:end="213:52">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="215:17" pos:end="217:53"><if pos:start="215:17" pos:end="215:50">if<condition pos:start="215:19" pos:end="215:34">(<expr pos:start="215:20" pos:end="215:33"><name pos:start="215:20" pos:end="215:24">value</name> <operator pos:start="215:26" pos:end="215:26">&lt;</operator> <operator pos:start="215:28" pos:end="215:28">-</operator><literal type="number" pos:start="215:29" pos:end="215:33">32768</literal></expr>)</condition><block type="pseudo" pos:start="215:36" pos:end="215:50"><block_content pos:start="215:36" pos:end="215:50"> <expr_stmt pos:start="215:36" pos:end="215:50"><expr pos:start="215:36" pos:end="215:49"><name pos:start="215:36" pos:end="215:40">value</name> <operator pos:start="215:42" pos:end="215:42">=</operator> <operator pos:start="215:44" pos:end="215:44">-</operator><literal type="number" pos:start="215:45" pos:end="215:49">32768</literal></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="217:17" pos:end="217:53">else if<condition pos:start="217:24" pos:end="217:38">(<expr pos:start="217:25" pos:end="217:37"><name pos:start="217:25" pos:end="217:29">value</name> <operator pos:start="217:31" pos:end="217:31">&gt;</operator> <literal type="number" pos:start="217:33" pos:end="217:37">32767</literal></expr>)</condition><block type="pseudo" pos:start="217:40" pos:end="217:53"><block_content pos:start="217:40" pos:end="217:53"> <expr_stmt pos:start="217:40" pos:end="217:53"><expr pos:start="217:40" pos:end="217:52"><name pos:start="217:40" pos:end="217:44">value</name> <operator pos:start="217:46" pos:end="217:46">=</operator> <literal type="number" pos:start="217:48" pos:end="217:52">32767</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="219:17" pos:end="219:39"><expr pos:start="219:17" pos:end="219:38"><name pos:start="219:17" pos:end="219:30"><name pos:start="219:17" pos:end="219:25">outbuffer</name><index pos:start="219:26" pos:end="219:30">[<expr pos:start="219:27" pos:end="219:29"><literal type="number" pos:start="219:27" pos:end="219:27">2</literal><operator pos:start="219:28" pos:end="219:28">*</operator><name pos:start="219:29" pos:end="219:29">j</name></expr>]</index></name> <operator pos:start="219:32" pos:end="219:32">=</operator> <name pos:start="219:34" pos:end="219:38">value</name></expr>;</expr_stmt>

            </block_content>}</block></for>





            <comment type="block" pos:start="227:13" pos:end="227:47">/* Swap out the previous buffer. */</comment>

            <expr_stmt pos:start="229:13" pos:end="229:70"><expr pos:start="229:13" pos:end="229:69"><call pos:start="229:13" pos:end="229:69"><name pos:start="229:13" pos:end="229:18">memcpy</name><argument_list pos:start="229:19" pos:end="229:69">(<argument pos:start="229:20" pos:end="229:31"><expr pos:start="229:20" pos:end="229:31"><operator pos:start="229:20" pos:end="229:20">&amp;</operator><name pos:start="229:21" pos:end="229:31"><name pos:start="229:21" pos:end="229:21">q</name><operator pos:start="229:22" pos:end="229:23">-&gt;</operator><name pos:start="229:24" pos:end="229:31">gain_now</name></name></expr></argument>, <argument pos:start="229:34" pos:end="229:50"><expr pos:start="229:34" pos:end="229:50"><operator pos:start="229:34" pos:end="229:34">&amp;</operator><name pos:start="229:35" pos:end="229:50"><name pos:start="229:35" pos:end="229:35">q</name><operator pos:start="229:36" pos:end="229:37">-&gt;</operator><name pos:start="229:38" pos:end="229:50">gain_previous</name></name></expr></argument>, <argument pos:start="229:53" pos:end="229:68"><expr pos:start="229:53" pos:end="229:68"><sizeof pos:start="229:53" pos:end="229:68">sizeof<argument_list pos:start="229:59" pos:end="229:68">(<argument pos:start="229:60" pos:end="229:67"><expr pos:start="229:60" pos:end="229:67"><name pos:start="229:60" pos:end="229:67">COOKgain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:74"><expr pos:start="231:13" pos:end="231:73"><call pos:start="231:13" pos:end="231:73"><name pos:start="231:13" pos:end="231:18">memcpy</name><argument_list pos:start="231:19" pos:end="231:73">(<argument pos:start="231:20" pos:end="231:36"><expr pos:start="231:20" pos:end="231:36"><operator pos:start="231:20" pos:end="231:20">&amp;</operator><name pos:start="231:21" pos:end="231:36"><name pos:start="231:21" pos:end="231:21">q</name><operator pos:start="231:22" pos:end="231:23">-&gt;</operator><name pos:start="231:24" pos:end="231:36">gain_previous</name></name></expr></argument>, <argument pos:start="231:39" pos:end="231:54"><expr pos:start="231:39" pos:end="231:54"><operator pos:start="231:39" pos:end="231:39">&amp;</operator><name pos:start="231:40" pos:end="231:54"><name pos:start="231:40" pos:end="231:40">q</name><operator pos:start="231:41" pos:end="231:42">-&gt;</operator><name pos:start="231:43" pos:end="231:54">gain_current</name></name></expr></argument>, <argument pos:start="231:57" pos:end="231:72"><expr pos:start="231:57" pos:end="231:72"><sizeof pos:start="231:57" pos:end="231:72">sizeof<argument_list pos:start="231:63" pos:end="231:72">(<argument pos:start="231:64" pos:end="231:71"><expr pos:start="231:64" pos:end="231:71"><name pos:start="231:64" pos:end="231:71">COOKgain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <else pos:start="235:7" pos:end="287:5">else <block pos:start="235:12" pos:end="287:5">{<block_content pos:start="237:9" pos:end="285:70">

        <expr_stmt pos:start="237:9" pos:end="237:45"><expr pos:start="237:9" pos:end="237:44"><call pos:start="237:9" pos:end="237:44"><name pos:start="237:9" pos:end="237:19">mono_decode</name><argument_list pos:start="237:20" pos:end="237:44">(<argument pos:start="237:21" pos:end="237:21"><expr pos:start="237:21" pos:end="237:21"><name pos:start="237:21" pos:end="237:21">q</name></expr></argument>, <argument pos:start="237:24" pos:end="237:43"><expr pos:start="237:24" pos:end="237:43"><name pos:start="237:24" pos:end="237:43"><name pos:start="237:24" pos:end="237:24">q</name><operator pos:start="237:25" pos:end="237:26">-&gt;</operator><name pos:start="237:27" pos:end="237:40">decode_buf_ptr</name><index pos:start="237:41" pos:end="237:43">[<expr pos:start="237:42" pos:end="237:42"><literal type="number" pos:start="237:42" pos:end="237:42">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="241:9" pos:end="241:35">/* Swap buffer pointers. */</comment>

        <expr_stmt pos:start="243:9" pos:end="243:39"><expr pos:start="243:9" pos:end="243:38"><name pos:start="243:9" pos:end="243:15">tmp_ptr</name> <operator pos:start="243:17" pos:end="243:17">=</operator> <name pos:start="243:19" pos:end="243:38"><name pos:start="243:19" pos:end="243:19">q</name><operator pos:start="243:20" pos:end="243:21">-&gt;</operator><name pos:start="243:22" pos:end="243:35">decode_buf_ptr</name><index pos:start="243:36" pos:end="243:38">[<expr pos:start="243:37" pos:end="243:37"><literal type="number" pos:start="243:37" pos:end="243:37">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="245:9" pos:end="245:52"><expr pos:start="245:9" pos:end="245:51"><name pos:start="245:9" pos:end="245:28"><name pos:start="245:9" pos:end="245:9">q</name><operator pos:start="245:10" pos:end="245:11">-&gt;</operator><name pos:start="245:12" pos:end="245:25">decode_buf_ptr</name><index pos:start="245:26" pos:end="245:28">[<expr pos:start="245:27" pos:end="245:27"><literal type="number" pos:start="245:27" pos:end="245:27">1</literal></expr>]</index></name> <operator pos:start="245:30" pos:end="245:30">=</operator> <name pos:start="245:32" pos:end="245:51"><name pos:start="245:32" pos:end="245:32">q</name><operator pos:start="245:33" pos:end="245:34">-&gt;</operator><name pos:start="245:35" pos:end="245:48">decode_buf_ptr</name><index pos:start="245:49" pos:end="245:51">[<expr pos:start="245:50" pos:end="245:50"><literal type="number" pos:start="245:50" pos:end="245:50">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:39"><expr pos:start="247:9" pos:end="247:38"><name pos:start="247:9" pos:end="247:28"><name pos:start="247:9" pos:end="247:9">q</name><operator pos:start="247:10" pos:end="247:11">-&gt;</operator><name pos:start="247:12" pos:end="247:25">decode_buf_ptr</name><index pos:start="247:26" pos:end="247:28">[<expr pos:start="247:27" pos:end="247:27"><literal type="number" pos:start="247:27" pos:end="247:27">0</literal></expr>]</index></name> <operator pos:start="247:30" pos:end="247:30">=</operator> <name pos:start="247:32" pos:end="247:38">tmp_ptr</name></expr>;</expr_stmt>



        <comment type="block" pos:start="251:9" pos:end="253:31">/* FIXME: Rethink the gainbuffer handling, maybe a rename?

           now/previous swap */</comment>

        <expr_stmt pos:start="255:9" pos:end="255:39"><expr pos:start="255:9" pos:end="255:38"><name pos:start="255:9" pos:end="255:23"><name pos:start="255:9" pos:end="255:9">q</name><operator pos:start="255:10" pos:end="255:11">-&gt;</operator><name pos:start="255:12" pos:end="255:23">gain_now_ptr</name></name> <operator pos:start="255:25" pos:end="255:25">=</operator> <operator pos:start="255:27" pos:end="255:27">&amp;</operator><name pos:start="255:28" pos:end="255:38"><name pos:start="255:28" pos:end="255:28">q</name><operator pos:start="255:29" pos:end="255:30">-&gt;</operator><name pos:start="255:31" pos:end="255:38">gain_now</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:49"><expr pos:start="257:9" pos:end="257:48"><name pos:start="257:9" pos:end="257:28"><name pos:start="257:9" pos:end="257:9">q</name><operator pos:start="257:10" pos:end="257:11">-&gt;</operator><name pos:start="257:12" pos:end="257:28">gain_previous_ptr</name></name> <operator pos:start="257:30" pos:end="257:30">=</operator> <operator pos:start="257:32" pos:end="257:32">&amp;</operator><name pos:start="257:33" pos:end="257:48"><name pos:start="257:33" pos:end="257:33">q</name><operator pos:start="257:34" pos:end="257:35">-&gt;</operator><name pos:start="257:36" pos:end="257:48">gain_previous</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="261:9" pos:end="261:75"><expr pos:start="261:9" pos:end="261:74"><call pos:start="261:9" pos:end="261:74"><name pos:start="261:9" pos:end="261:17">cook_imlt</name><argument_list pos:start="261:18" pos:end="261:74">(<argument pos:start="261:19" pos:end="261:19"><expr pos:start="261:19" pos:end="261:19"><name pos:start="261:19" pos:end="261:19">q</name></expr></argument>, <argument pos:start="261:22" pos:end="261:41"><expr pos:start="261:22" pos:end="261:41"><name pos:start="261:22" pos:end="261:41"><name pos:start="261:22" pos:end="261:22">q</name><operator pos:start="261:23" pos:end="261:24">-&gt;</operator><name pos:start="261:25" pos:end="261:38">decode_buf_ptr</name><index pos:start="261:39" pos:end="261:41">[<expr pos:start="261:40" pos:end="261:40"><literal type="number" pos:start="261:40" pos:end="261:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="261:44" pos:end="261:62"><expr pos:start="261:44" pos:end="261:62"><name pos:start="261:44" pos:end="261:62"><name pos:start="261:44" pos:end="261:44">q</name><operator pos:start="261:45" pos:end="261:46">-&gt;</operator><name pos:start="261:47" pos:end="261:62">mono_mdct_output</name></name></expr></argument>,<argument pos:start="261:64" pos:end="261:73"><expr pos:start="261:64" pos:end="261:73"><name pos:start="261:64" pos:end="261:73"><name pos:start="261:64" pos:end="261:64">q</name><operator pos:start="261:65" pos:end="261:66">-&gt;</operator><name pos:start="261:67" pos:end="261:73">mlt_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="263:9" pos:end="265:72"><expr pos:start="263:9" pos:end="265:71"><call pos:start="263:9" pos:end="265:71"><name pos:start="263:9" pos:end="263:23">gain_compensate</name><argument_list pos:start="263:24" pos:end="265:71">(<argument pos:start="263:25" pos:end="263:25"><expr pos:start="263:25" pos:end="263:25"><name pos:start="263:25" pos:end="263:25">q</name></expr></argument>, <argument pos:start="263:28" pos:end="263:46"><expr pos:start="263:28" pos:end="263:46"><name pos:start="263:28" pos:end="263:46"><name pos:start="263:28" pos:end="263:28">q</name><operator pos:start="263:29" pos:end="263:30">-&gt;</operator><name pos:start="263:31" pos:end="263:46">mono_mdct_output</name></name></expr></argument>, <argument pos:start="263:49" pos:end="263:63"><expr pos:start="263:49" pos:end="263:63"><name pos:start="263:49" pos:end="263:63"><name pos:start="263:49" pos:end="263:49">q</name><operator pos:start="263:50" pos:end="263:51">-&gt;</operator><name pos:start="263:52" pos:end="263:63">gain_now_ptr</name></name></expr></argument>,

                        <argument pos:start="265:25" pos:end="265:44"><expr pos:start="265:25" pos:end="265:44"><name pos:start="265:25" pos:end="265:44"><name pos:start="265:25" pos:end="265:25">q</name><operator pos:start="265:26" pos:end="265:27">-&gt;</operator><name pos:start="265:28" pos:end="265:44">gain_previous_ptr</name></name></expr></argument>, <argument pos:start="265:47" pos:end="265:70"><expr pos:start="265:47" pos:end="265:70"><name pos:start="265:47" pos:end="265:70"><name pos:start="265:47" pos:end="265:47">q</name><operator pos:start="265:48" pos:end="265:49">-&gt;</operator><name pos:start="265:50" pos:end="265:70">mono_previous_buffer1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="269:9" pos:end="269:52">/* Clip and convert the floats to 16 bits */</comment>

        <for pos:start="271:9" pos:end="281:9">for <control pos:start="271:13" pos:end="271:48">(<init pos:start="271:14" pos:end="271:18"><expr pos:start="271:14" pos:end="271:16"><name pos:start="271:14" pos:end="271:14">j</name><operator pos:start="271:15" pos:end="271:15">=</operator><literal type="number" pos:start="271:16" pos:end="271:16">0</literal></expr> ;</init> <condition pos:start="271:20" pos:end="271:43"><expr pos:start="271:20" pos:end="271:41"><name pos:start="271:20" pos:end="271:20">j</name><operator pos:start="271:21" pos:end="271:21">&lt;</operator><name pos:start="271:22" pos:end="271:41"><name pos:start="271:22" pos:end="271:22">q</name><operator pos:start="271:23" pos:end="271:24">-&gt;</operator><name pos:start="271:25" pos:end="271:41">samples_per_frame</name></name></expr> ;</condition> <incr pos:start="271:45" pos:end="271:47"><expr pos:start="271:45" pos:end="271:47"><name pos:start="271:45" pos:end="271:45">j</name><operator pos:start="271:46" pos:end="271:47">++</operator></expr></incr>)</control><block pos:start="271:49" pos:end="281:9">{<block_content pos:start="273:13" pos:end="279:33">

            <expr_stmt pos:start="273:13" pos:end="273:51"><expr pos:start="273:13" pos:end="273:50"><name pos:start="273:13" pos:end="273:17">value</name> <operator pos:start="273:19" pos:end="273:19">=</operator> <call pos:start="273:21" pos:end="273:50"><name pos:start="273:21" pos:end="273:26">lrintf</name><argument_list pos:start="273:27" pos:end="273:50">(<argument pos:start="273:28" pos:end="273:49"><expr pos:start="273:28" pos:end="273:49"><name pos:start="273:28" pos:end="273:49"><name pos:start="273:28" pos:end="273:28">q</name><operator pos:start="273:29" pos:end="273:30">-&gt;</operator><name pos:start="273:31" pos:end="273:46">mono_mdct_output</name><index pos:start="273:47" pos:end="273:49">[<expr pos:start="273:48" pos:end="273:48"><name pos:start="273:48" pos:end="273:48">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="275:13" pos:end="277:49"><if pos:start="275:13" pos:end="275:46">if<condition pos:start="275:15" pos:end="275:30">(<expr pos:start="275:16" pos:end="275:29"><name pos:start="275:16" pos:end="275:20">value</name> <operator pos:start="275:22" pos:end="275:22">&lt;</operator> <operator pos:start="275:24" pos:end="275:24">-</operator><literal type="number" pos:start="275:25" pos:end="275:29">32768</literal></expr>)</condition><block type="pseudo" pos:start="275:32" pos:end="275:46"><block_content pos:start="275:32" pos:end="275:46"> <expr_stmt pos:start="275:32" pos:end="275:46"><expr pos:start="275:32" pos:end="275:45"><name pos:start="275:32" pos:end="275:36">value</name> <operator pos:start="275:38" pos:end="275:38">=</operator> <operator pos:start="275:40" pos:end="275:40">-</operator><literal type="number" pos:start="275:41" pos:end="275:45">32768</literal></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="277:13" pos:end="277:49">else if<condition pos:start="277:20" pos:end="277:34">(<expr pos:start="277:21" pos:end="277:33"><name pos:start="277:21" pos:end="277:25">value</name> <operator pos:start="277:27" pos:end="277:27">&gt;</operator> <literal type="number" pos:start="277:29" pos:end="277:33">32767</literal></expr>)</condition><block type="pseudo" pos:start="277:36" pos:end="277:49"><block_content pos:start="277:36" pos:end="277:49"> <expr_stmt pos:start="277:36" pos:end="277:49"><expr pos:start="277:36" pos:end="277:48"><name pos:start="277:36" pos:end="277:40">value</name> <operator pos:start="277:42" pos:end="277:42">=</operator> <literal type="number" pos:start="277:44" pos:end="277:48">32767</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:33"><expr pos:start="279:13" pos:end="279:32"><name pos:start="279:13" pos:end="279:24"><name pos:start="279:13" pos:end="279:21">outbuffer</name><index pos:start="279:22" pos:end="279:24">[<expr pos:start="279:23" pos:end="279:23"><name pos:start="279:23" pos:end="279:23">j</name></expr>]</index></name> <operator pos:start="279:26" pos:end="279:26">=</operator> <name pos:start="279:28" pos:end="279:32">value</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="283:9" pos:end="283:66"><expr pos:start="283:9" pos:end="283:65"><call pos:start="283:9" pos:end="283:65"><name pos:start="283:9" pos:end="283:14">memcpy</name><argument_list pos:start="283:15" pos:end="283:65">(<argument pos:start="283:16" pos:end="283:27"><expr pos:start="283:16" pos:end="283:27"><operator pos:start="283:16" pos:end="283:16">&amp;</operator><name pos:start="283:17" pos:end="283:27"><name pos:start="283:17" pos:end="283:17">q</name><operator pos:start="283:18" pos:end="283:19">-&gt;</operator><name pos:start="283:20" pos:end="283:27">gain_now</name></name></expr></argument>, <argument pos:start="283:30" pos:end="283:46"><expr pos:start="283:30" pos:end="283:46"><operator pos:start="283:30" pos:end="283:30">&amp;</operator><name pos:start="283:31" pos:end="283:46"><name pos:start="283:31" pos:end="283:31">q</name><operator pos:start="283:32" pos:end="283:33">-&gt;</operator><name pos:start="283:34" pos:end="283:46">gain_previous</name></name></expr></argument>, <argument pos:start="283:49" pos:end="283:64"><expr pos:start="283:49" pos:end="283:64"><sizeof pos:start="283:49" pos:end="283:64">sizeof<argument_list pos:start="283:55" pos:end="283:64">(<argument pos:start="283:56" pos:end="283:63"><expr pos:start="283:56" pos:end="283:63"><name pos:start="283:56" pos:end="283:63">COOKgain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="285:9" pos:end="285:70"><expr pos:start="285:9" pos:end="285:69"><call pos:start="285:9" pos:end="285:69"><name pos:start="285:9" pos:end="285:14">memcpy</name><argument_list pos:start="285:15" pos:end="285:69">(<argument pos:start="285:16" pos:end="285:32"><expr pos:start="285:16" pos:end="285:32"><operator pos:start="285:16" pos:end="285:16">&amp;</operator><name pos:start="285:17" pos:end="285:32"><name pos:start="285:17" pos:end="285:17">q</name><operator pos:start="285:18" pos:end="285:19">-&gt;</operator><name pos:start="285:20" pos:end="285:32">gain_previous</name></name></expr></argument>, <argument pos:start="285:35" pos:end="285:50"><expr pos:start="285:35" pos:end="285:50"><operator pos:start="285:35" pos:end="285:35">&amp;</operator><name pos:start="285:36" pos:end="285:50"><name pos:start="285:36" pos:end="285:36">q</name><operator pos:start="285:37" pos:end="285:38">-&gt;</operator><name pos:start="285:39" pos:end="285:50">gain_current</name></name></expr></argument>, <argument pos:start="285:53" pos:end="285:68"><expr pos:start="285:53" pos:end="285:68"><sizeof pos:start="285:53" pos:end="285:68">sizeof<argument_list pos:start="285:59" pos:end="285:68">(<argument pos:start="285:60" pos:end="285:67"><expr pos:start="285:60" pos:end="285:67"><name pos:start="285:60" pos:end="285:67">COOKgain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="289:5" pos:end="289:50">return <expr pos:start="289:12" pos:end="289:49"><name pos:start="289:12" pos:end="289:31"><name pos:start="289:12" pos:end="289:12">q</name><operator pos:start="289:13" pos:end="289:14">-&gt;</operator><name pos:start="289:15" pos:end="289:31">samples_per_frame</name></name> <operator pos:start="289:33" pos:end="289:33">*</operator> <sizeof pos:start="289:35" pos:end="289:49">sizeof<argument_list pos:start="289:41" pos:end="289:49">(<argument pos:start="289:42" pos:end="289:48"><expr pos:start="289:42" pos:end="289:48"><name pos:start="289:42" pos:end="289:48">int16_t</name></expr></argument>)</argument_list></sizeof></expr>;</return>

</block_content>}</block></function>
</unit>
