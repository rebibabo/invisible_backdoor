<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5895.c" pos:tabs="8"><function pos:start="1:1" pos:end="25:1"><type pos:start="1:1" pos:end="1:21"><name pos:start="1:1" pos:end="1:19">SocketAddressLegacy</name> <modifier pos:start="1:21" pos:end="1:21">*</modifier></type><name pos:start="1:22" pos:end="1:41">socket_local_address</name><parameter_list pos:start="1:42" pos:end="1:63">(<parameter pos:start="1:43" pos:end="1:48"><decl pos:start="1:43" pos:end="1:48"><type pos:start="1:43" pos:end="1:48"><name pos:start="1:43" pos:end="1:45">int</name></type> <name pos:start="1:47" pos:end="1:48">fd</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:55">Error</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier><modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="25:1">{<block_content pos:start="5:5" pos:end="23:56">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:27"><name pos:start="5:5" pos:end="5:27"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:27">sockaddr_storage</name></name></type> <name pos:start="5:29" pos:end="5:30">ss</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">socklen_t</name></type> <name pos:start="7:15" pos:end="7:19">sslen</name> <init pos:start="7:21" pos:end="7:32">= <expr pos:start="7:23" pos:end="7:32"><sizeof pos:start="7:23" pos:end="7:32">sizeof<argument_list pos:start="7:29" pos:end="7:32">(<argument pos:start="7:30" pos:end="7:31"><expr pos:start="7:30" pos:end="7:31"><name pos:start="7:30" pos:end="7:31">ss</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="19:5"><if pos:start="11:5" pos:end="19:5">if <condition pos:start="11:8" pos:end="11:60">(<expr pos:start="11:9" pos:end="11:59"><call pos:start="11:9" pos:end="11:55"><name pos:start="11:9" pos:end="11:19">getsockname</name><argument_list pos:start="11:20" pos:end="11:55">(<argument pos:start="11:21" pos:end="11:22"><expr pos:start="11:21" pos:end="11:22"><name pos:start="11:21" pos:end="11:22">fd</name></expr></argument>, <argument pos:start="11:25" pos:end="11:46"><expr pos:start="11:25" pos:end="11:46"><operator pos:start="11:25" pos:end="11:25">(</operator>struct <name pos:start="11:33" pos:end="11:40">sockaddr</name> <operator pos:start="11:42" pos:end="11:42">*</operator><operator pos:start="11:43" pos:end="11:43">)</operator><operator pos:start="11:44" pos:end="11:44">&amp;</operator><name pos:start="11:45" pos:end="11:46">ss</name></expr></argument>, <argument pos:start="11:49" pos:end="11:54"><expr pos:start="11:49" pos:end="11:54"><operator pos:start="11:49" pos:end="11:49">&amp;</operator><name pos:start="11:50" pos:end="11:54">sslen</name></expr></argument>)</argument_list></call> <operator pos:start="11:57" pos:end="11:57">&lt;</operator> <literal type="number" pos:start="11:59" pos:end="11:59">0</literal></expr>)</condition> <block pos:start="11:62" pos:end="19:5">{<block_content pos:start="13:9" pos:end="17:20">

        <expr_stmt pos:start="13:9" pos:end="15:65"><expr pos:start="13:9" pos:end="15:64"><call pos:start="13:9" pos:end="15:64"><name pos:start="13:9" pos:end="13:24">error_setg_errno</name><argument_list pos:start="13:25" pos:end="15:64">(<argument pos:start="13:26" pos:end="13:29"><expr pos:start="13:26" pos:end="13:29"><name pos:start="13:26" pos:end="13:29">errp</name></expr></argument>, <argument pos:start="13:32" pos:end="13:36"><expr pos:start="13:32" pos:end="13:36"><name pos:start="13:32" pos:end="13:36">errno</name></expr></argument>, <argument pos:start="13:39" pos:end="13:42"><expr pos:start="13:39" pos:end="13:42"><literal type="string" pos:start="13:39" pos:end="13:42">"%s"</literal></expr></argument>,

                         <argument pos:start="15:26" pos:end="15:63"><expr pos:start="15:26" pos:end="15:63"><literal type="string" pos:start="15:26" pos:end="15:63">"Unable to query local socket address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:20">return <expr pos:start="17:16" pos:end="17:19"><name pos:start="17:16" pos:end="17:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="23:5" pos:end="23:56">return <expr pos:start="23:12" pos:end="23:55"><call pos:start="23:12" pos:end="23:55"><name pos:start="23:12" pos:end="23:37">socket_sockaddr_to_address</name><argument_list pos:start="23:38" pos:end="23:55">(<argument pos:start="23:39" pos:end="23:41"><expr pos:start="23:39" pos:end="23:41"><operator pos:start="23:39" pos:end="23:39">&amp;</operator><name pos:start="23:40" pos:end="23:41">ss</name></expr></argument>, <argument pos:start="23:44" pos:end="23:48"><expr pos:start="23:44" pos:end="23:48"><name pos:start="23:44" pos:end="23:48">sslen</name></expr></argument>, <argument pos:start="23:51" pos:end="23:54"><expr pos:start="23:51" pos:end="23:54"><name pos:start="23:51" pos:end="23:54">errp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
