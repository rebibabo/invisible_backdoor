<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21111.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">roq_encode_frame</name><parameter_list pos:start="1:28" pos:end="3:66">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:64"><decl pos:start="1:52" pos:end="1:64"><type pos:start="1:52" pos:end="1:64"><name pos:start="1:52" pos:end="1:59">AVPacket</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:64">pkt</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:48"><decl pos:start="3:29" pos:end="3:48"><type pos:start="3:29" pos:end="3:48"><specifier pos:start="3:29" pos:end="3:33">const</specifier> <name pos:start="3:35" pos:end="3:41">AVFrame</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:48">frame</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:65"><decl pos:start="3:51" pos:end="3:65"><type pos:start="3:51" pos:end="3:65"><name pos:start="3:51" pos:end="3:53">int</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:65">got_packet</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="105:1">{<block_content pos:start="7:5" pos:end="103:13">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">RoqContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">enc</name> <init pos:start="7:21" pos:end="7:38">= <expr pos:start="7:23" pos:end="7:38"><name pos:start="7:23" pos:end="7:38"><name pos:start="7:23" pos:end="7:27">avctx</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">size</name></decl>, <decl pos:start="9:15" pos:end="9:17"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:17">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:23"><expr pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:7">enc</name><operator pos:start="13:8" pos:end="13:9">-&gt;</operator><name pos:start="13:10" pos:end="13:14">avctx</name></name> <operator pos:start="13:16" pos:end="13:16">=</operator> <name pos:start="13:18" pos:end="13:22">avctx</name></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:30"><expr pos:start="17:5" pos:end="17:29"><name pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:7">enc</name><operator pos:start="17:8" pos:end="17:9">-&gt;</operator><name pos:start="17:10" pos:end="17:21">frame_to_enc</name></name> <operator pos:start="17:23" pos:end="17:23">=</operator> <name pos:start="17:25" pos:end="17:29">frame</name></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="27:41"><if pos:start="21:5" pos:end="23:41">if <condition pos:start="21:8" pos:end="21:23">(<expr pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:13">frame</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:22">quality</name></name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:41"><block_content pos:start="23:9" pos:end="23:41">

        <expr_stmt pos:start="23:9" pos:end="23:41"><expr pos:start="23:9" pos:end="23:40"><name pos:start="23:9" pos:end="23:19"><name pos:start="23:9" pos:end="23:11">enc</name><operator pos:start="23:12" pos:end="23:13">-&gt;</operator><name pos:start="23:14" pos:end="23:19">lambda</name></name> <operator pos:start="23:21" pos:end="23:21">=</operator> <name pos:start="23:23" pos:end="23:36"><name pos:start="23:23" pos:end="23:27">frame</name><operator pos:start="23:28" pos:end="23:29">-&gt;</operator><name pos:start="23:30" pos:end="23:36">quality</name></name> <operator pos:start="23:38" pos:end="23:38">-</operator> <literal type="number" pos:start="23:40" pos:end="23:40">1</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="25:5" pos:end="27:41">else<block type="pseudo" pos:start="27:9" pos:end="27:41"><block_content pos:start="27:9" pos:end="27:41">

        <expr_stmt pos:start="27:9" pos:end="27:41"><expr pos:start="27:9" pos:end="27:40"><name pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:11">enc</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:19">lambda</name></name> <operator pos:start="27:21" pos:end="27:21">=</operator> <literal type="number" pos:start="27:23" pos:end="27:23">2</literal><operator pos:start="27:24" pos:end="27:24">*</operator><name pos:start="27:25" pos:end="27:40">ROQ_LAMBDA_SCALE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="33:78">/* 138 bits max per 8x8 block +

     *     256 codebooks*(6 bytes 2x2 + 4 bytes 4x4) + 8 bytes frame header */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:79"><expr pos:start="35:5" pos:end="35:78"><name pos:start="35:5" pos:end="35:8">size</name> <operator pos:start="35:10" pos:end="35:10">=</operator> <operator pos:start="35:12" pos:end="35:12">(</operator><operator pos:start="35:13" pos:end="35:13">(</operator><name pos:start="35:14" pos:end="35:23"><name pos:start="35:14" pos:end="35:16">enc</name><operator pos:start="35:17" pos:end="35:18">-&gt;</operator><name pos:start="35:19" pos:end="35:23">width</name></name> <operator pos:start="35:25" pos:end="35:25">*</operator> <name pos:start="35:27" pos:end="35:37"><name pos:start="35:27" pos:end="35:29">enc</name><operator pos:start="35:30" pos:end="35:31">-&gt;</operator><name pos:start="35:32" pos:end="35:37">height</name></name> <operator pos:start="35:39" pos:end="35:39">/</operator> <literal type="number" pos:start="35:41" pos:end="35:42">64</literal><operator pos:start="35:43" pos:end="35:43">)</operator> <operator pos:start="35:45" pos:end="35:45">*</operator> <literal type="number" pos:start="35:47" pos:end="35:51">138</literal> <operator pos:start="35:51" pos:end="35:51">+</operator> <literal type="number" pos:start="35:53" pos:end="35:53">7</literal><operator pos:start="35:54" pos:end="35:54">)</operator> <operator pos:start="35:56" pos:end="35:56">/</operator> <literal type="number" pos:start="35:58" pos:end="35:60">8</literal> <operator pos:start="35:60" pos:end="35:60">+</operator> <literal type="number" pos:start="35:62" pos:end="35:64">256</literal> <operator pos:start="35:66" pos:end="35:66">*</operator> <operator pos:start="35:68" pos:end="35:68">(</operator><literal type="number" pos:start="35:69" pos:end="35:71">6</literal> <operator pos:start="35:71" pos:end="35:71">+</operator> <literal type="number" pos:start="35:73" pos:end="35:73">4</literal><operator pos:start="35:74" pos:end="35:74">)</operator> <operator pos:start="35:76" pos:end="35:76">+</operator> <literal type="number" pos:start="35:78" pos:end="35:78">8</literal></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:47">(<expr pos:start="37:9" pos:end="37:46"><operator pos:start="37:9" pos:end="37:9">(</operator><name pos:start="37:10" pos:end="37:12">ret</name> <operator pos:start="37:14" pos:end="37:14">=</operator> <call pos:start="37:16" pos:end="37:41"><name pos:start="37:16" pos:end="37:30">ff_alloc_packet</name><argument_list pos:start="37:31" pos:end="37:41">(<argument pos:start="37:32" pos:end="37:34"><expr pos:start="37:32" pos:end="37:34"><name pos:start="37:32" pos:end="37:34">pkt</name></expr></argument>, <argument pos:start="37:37" pos:end="37:40"><expr pos:start="37:37" pos:end="37:40"><name pos:start="37:37" pos:end="37:40">size</name></expr></argument>)</argument_list></call><operator pos:start="37:42" pos:end="37:42">)</operator> <operator pos:start="37:44" pos:end="37:44">&lt;</operator> <literal type="number" pos:start="37:46" pos:end="37:46">0</literal></expr>)</condition> <block pos:start="37:49" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:19">

        <expr_stmt pos:start="39:9" pos:end="39:89"><expr pos:start="39:9" pos:end="39:88"><call pos:start="39:9" pos:end="39:88"><name pos:start="39:9" pos:end="39:14">av_log</name><argument_list pos:start="39:15" pos:end="39:88">(<argument pos:start="39:16" pos:end="39:20"><expr pos:start="39:16" pos:end="39:20"><name pos:start="39:16" pos:end="39:20">avctx</name></expr></argument>, <argument pos:start="39:23" pos:end="39:34"><expr pos:start="39:23" pos:end="39:34"><name pos:start="39:23" pos:end="39:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="39:37" pos:end="39:81"><expr pos:start="39:37" pos:end="39:81"><literal type="string" pos:start="39:37" pos:end="39:81">"Error getting output packet with size %d.\n"</literal></expr></argument>, <argument pos:start="39:84" pos:end="39:87"><expr pos:start="39:84" pos:end="39:87"><name pos:start="39:84" pos:end="39:87">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:19">return <expr pos:start="41:16" pos:end="41:18"><name pos:start="41:16" pos:end="41:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:29"><expr pos:start="45:5" pos:end="45:28"><name pos:start="45:5" pos:end="45:16"><name pos:start="45:5" pos:end="45:7">enc</name><operator pos:start="45:8" pos:end="45:9">-&gt;</operator><name pos:start="45:10" pos:end="45:16">out_buf</name></name> <operator pos:start="45:18" pos:end="45:18">=</operator> <name pos:start="45:20" pos:end="45:28"><name pos:start="45:20" pos:end="45:22">pkt</name><operator pos:start="45:23" pos:end="45:24">-&gt;</operator><name pos:start="45:25" pos:end="45:28">data</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:27">/* Check for I frame */</comment>

    <if_stmt pos:start="51:5" pos:end="53:37"><if pos:start="51:5" pos:end="53:37">if <condition pos:start="51:8" pos:end="51:52">(<expr pos:start="51:9" pos:end="51:51"><name pos:start="51:9" pos:end="51:32"><name pos:start="51:9" pos:end="51:11">enc</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:32">framesSinceKeyframe</name></name> <operator pos:start="51:34" pos:end="51:35">==</operator> <name pos:start="51:37" pos:end="51:51"><name pos:start="51:37" pos:end="51:41">avctx</name><operator pos:start="51:42" pos:end="51:43">-&gt;</operator><name pos:start="51:44" pos:end="51:51">gop_size</name></name></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:37"><block_content pos:start="53:9" pos:end="53:37">

        <expr_stmt pos:start="53:9" pos:end="53:37"><expr pos:start="53:9" pos:end="53:36"><name pos:start="53:9" pos:end="53:32"><name pos:start="53:9" pos:end="53:11">enc</name><operator pos:start="53:12" pos:end="53:13">-&gt;</operator><name pos:start="53:14" pos:end="53:32">framesSinceKeyframe</name></name> <operator pos:start="53:34" pos:end="53:34">=</operator> <literal type="number" pos:start="53:36" pos:end="53:36">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="83:5"><if pos:start="57:5" pos:end="83:5">if <condition pos:start="57:8" pos:end="57:25">(<expr pos:start="57:9" pos:end="57:24"><name pos:start="57:9" pos:end="57:24"><name pos:start="57:9" pos:end="57:11">enc</name><operator pos:start="57:12" pos:end="57:13">-&gt;</operator><name pos:start="57:14" pos:end="57:24">first_frame</name></name></expr>)</condition> <block pos:start="57:27" pos:end="83:5">{<block_content pos:start="63:9" pos:end="81:29">

        <comment type="block" pos:start="59:9" pos:end="61:21">/* Alloc memory for the reconstruction data (we must know the stride

         for that) */</comment>

        <if_stmt pos:start="63:9" pos:end="71:9"><if pos:start="63:9" pos:end="71:9">if <condition pos:start="63:12" pos:end="65:53">(<expr pos:start="63:13" pos:end="65:52"><call pos:start="63:13" pos:end="63:55"><name pos:start="63:13" pos:end="63:25">ff_get_buffer</name><argument_list pos:start="63:26" pos:end="63:55">(<argument pos:start="63:27" pos:end="63:31"><expr pos:start="63:27" pos:end="63:31"><name pos:start="63:27" pos:end="63:31">avctx</name></expr></argument>, <argument pos:start="63:34" pos:end="63:51"><expr pos:start="63:34" pos:end="63:51"><name pos:start="63:34" pos:end="63:51"><name pos:start="63:34" pos:end="63:36">enc</name><operator pos:start="63:37" pos:end="63:38">-&gt;</operator><name pos:start="63:39" pos:end="63:51">current_frame</name></name></expr></argument>, <argument pos:start="63:54" pos:end="63:54"><expr pos:start="63:54" pos:end="63:54"><literal type="number" pos:start="63:54" pos:end="63:54">0</literal></expr></argument>)</argument_list></call> <operator pos:start="63:57" pos:end="63:58">||</operator>

            <call pos:start="65:13" pos:end="65:52"><name pos:start="65:13" pos:end="65:25">ff_get_buffer</name><argument_list pos:start="65:26" pos:end="65:52">(<argument pos:start="65:27" pos:end="65:31"><expr pos:start="65:27" pos:end="65:31"><name pos:start="65:27" pos:end="65:31">avctx</name></expr></argument>, <argument pos:start="65:34" pos:end="65:48"><expr pos:start="65:34" pos:end="65:48"><name pos:start="65:34" pos:end="65:48"><name pos:start="65:34" pos:end="65:36">enc</name><operator pos:start="65:37" pos:end="65:38">-&gt;</operator><name pos:start="65:39" pos:end="65:48">last_frame</name></name></expr></argument>, <argument pos:start="65:51" pos:end="65:51"><expr pos:start="65:51" pos:end="65:51"><literal type="number" pos:start="65:51" pos:end="65:51">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:55" pos:end="71:9">{<block_content pos:start="67:13" pos:end="69:22">

            <expr_stmt pos:start="67:13" pos:end="67:72"><expr pos:start="67:13" pos:end="67:71"><call pos:start="67:13" pos:end="67:71"><name pos:start="67:13" pos:end="67:18">av_log</name><argument_list pos:start="67:19" pos:end="67:71">(<argument pos:start="67:20" pos:end="67:24"><expr pos:start="67:20" pos:end="67:24"><name pos:start="67:20" pos:end="67:24">avctx</name></expr></argument>, <argument pos:start="67:27" pos:end="67:38"><expr pos:start="67:27" pos:end="67:38"><name pos:start="67:27" pos:end="67:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="67:41" pos:end="67:70"><expr pos:start="67:41" pos:end="67:70"><literal type="string" pos:start="67:41" pos:end="67:70">"  RoQ: get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="69:13" pos:end="69:22">return <expr pos:start="69:20" pos:end="69:21"><operator pos:start="69:20" pos:end="69:20">-</operator><literal type="number" pos:start="69:21" pos:end="69:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="75:9" pos:end="75:70">/* Before the first video frame, write a "video info" chunk */</comment>

        <expr_stmt pos:start="77:9" pos:end="77:40"><expr pos:start="77:9" pos:end="77:39"><call pos:start="77:9" pos:end="77:39"><name pos:start="77:9" pos:end="77:34">roq_write_video_info_chunk</name><argument_list pos:start="77:35" pos:end="77:39">(<argument pos:start="77:36" pos:end="77:38"><expr pos:start="77:36" pos:end="77:38"><name pos:start="77:36" pos:end="77:38">enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:29"><expr pos:start="81:9" pos:end="81:28"><name pos:start="81:9" pos:end="81:24"><name pos:start="81:9" pos:end="81:11">enc</name><operator pos:start="81:12" pos:end="81:13">-&gt;</operator><name pos:start="81:14" pos:end="81:24">first_frame</name></name> <operator pos:start="81:26" pos:end="81:26">=</operator> <literal type="number" pos:start="81:28" pos:end="81:28">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:33">/* Encode the actual frame */</comment>

    <expr_stmt pos:start="89:5" pos:end="89:26"><expr pos:start="89:5" pos:end="89:25"><call pos:start="89:5" pos:end="89:25"><name pos:start="89:5" pos:end="89:20">roq_encode_video</name><argument_list pos:start="89:21" pos:end="89:25">(<argument pos:start="89:22" pos:end="89:24"><expr pos:start="89:22" pos:end="89:24"><name pos:start="89:22" pos:end="89:24">enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:43"><expr pos:start="93:5" pos:end="93:42"><name pos:start="93:5" pos:end="93:13"><name pos:start="93:5" pos:end="93:7">pkt</name><operator pos:start="93:8" pos:end="93:9">-&gt;</operator><name pos:start="93:10" pos:end="93:13">size</name></name>   <operator pos:start="93:17" pos:end="93:17">=</operator> <name pos:start="93:19" pos:end="93:30"><name pos:start="93:19" pos:end="93:21">enc</name><operator pos:start="93:22" pos:end="93:23">-&gt;</operator><name pos:start="93:24" pos:end="93:30">out_buf</name></name> <operator pos:start="93:32" pos:end="93:32">-</operator> <name pos:start="93:34" pos:end="93:42"><name pos:start="93:34" pos:end="93:36">pkt</name><operator pos:start="93:37" pos:end="93:38">-&gt;</operator><name pos:start="93:39" pos:end="93:42">data</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="95:5" pos:end="97:38"><if pos:start="95:5" pos:end="97:38">if <condition pos:start="95:8" pos:end="95:38">(<expr pos:start="95:9" pos:end="95:37"><name pos:start="95:9" pos:end="95:32"><name pos:start="95:9" pos:end="95:11">enc</name><operator pos:start="95:12" pos:end="95:13">-&gt;</operator><name pos:start="95:14" pos:end="95:32">framesSinceKeyframe</name></name> <operator pos:start="95:34" pos:end="95:35">==</operator> <literal type="number" pos:start="95:37" pos:end="95:37">1</literal></expr>)</condition><block type="pseudo" pos:start="97:9" pos:end="97:38"><block_content pos:start="97:9" pos:end="97:38">

        <expr_stmt pos:start="97:9" pos:end="97:38"><expr pos:start="97:9" pos:end="97:37"><name pos:start="97:9" pos:end="97:18"><name pos:start="97:9" pos:end="97:11">pkt</name><operator pos:start="97:12" pos:end="97:13">-&gt;</operator><name pos:start="97:14" pos:end="97:18">flags</name></name> <operator pos:start="97:20" pos:end="97:21">|=</operator> <name pos:start="97:23" pos:end="97:37">AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:20"><expr pos:start="99:5" pos:end="99:19"><operator pos:start="99:5" pos:end="99:5">*</operator><name pos:start="99:6" pos:end="99:15">got_packet</name> <operator pos:start="99:17" pos:end="99:17">=</operator> <literal type="number" pos:start="99:19" pos:end="99:19">1</literal></expr>;</expr_stmt>



    <return pos:start="103:5" pos:end="103:13">return <expr pos:start="103:12" pos:end="103:12"><literal type="number" pos:start="103:12" pos:end="103:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
