<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22283.c" pos:tabs="8"><function pos:start="1:1" pos:end="137:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">megasas_mmio_write</name><parameter_list pos:start="1:31" pos:end="3:59">(<parameter pos:start="1:32" pos:end="1:43"><decl pos:start="1:32" pos:end="1:43"><type pos:start="1:32" pos:end="1:43"><name pos:start="1:32" pos:end="1:35">void</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:43">opaque</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:68"><decl pos:start="1:46" pos:end="1:68"><type pos:start="1:46" pos:end="1:68"><name pos:start="1:46" pos:end="1:63">target_phys_addr_t</name></type> <name pos:start="1:65" pos:end="1:68">addr</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:43"><decl pos:start="3:32" pos:end="3:43"><type pos:start="3:32" pos:end="3:43"><name pos:start="3:32" pos:end="3:39">uint64_t</name></type> <name pos:start="3:41" pos:end="3:43">val</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:58"><decl pos:start="3:46" pos:end="3:58"><type pos:start="3:46" pos:end="3:58"><name pos:start="3:46" pos:end="3:53">unsigned</name></type> <name pos:start="3:55" pos:end="3:58">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="137:1">{<block_content pos:start="7:5" pos:end="135:5">

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">MegasasState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:28">= <expr pos:start="7:23" pos:end="7:28"><name pos:start="7:23" pos:end="7:28">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:23">frame_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:24">frame_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:41"><expr pos:start="17:5" pos:end="17:40"><call pos:start="17:5" pos:end="17:40"><name pos:start="17:5" pos:end="17:29">trace_megasas_mmio_writel</name><argument_list pos:start="17:30" pos:end="17:40">(<argument pos:start="17:31" pos:end="17:34"><expr pos:start="17:31" pos:end="17:34"><name pos:start="17:31" pos:end="17:34">addr</name></expr></argument>, <argument pos:start="17:37" pos:end="17:39"><expr pos:start="17:37" pos:end="17:39"><name pos:start="17:37" pos:end="17:39">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="19:5" pos:end="135:5">switch <condition pos:start="19:12" pos:end="19:17">(<expr pos:start="19:13" pos:end="19:16"><name pos:start="19:13" pos:end="19:16">addr</name></expr>)</condition> <block pos:start="19:19" pos:end="135:5">{<block_content pos:start="21:5" pos:end="133:14">

    <case pos:start="21:5" pos:end="21:17">case <expr pos:start="21:10" pos:end="21:16"><name pos:start="21:10" pos:end="21:16">MFI_IDB</name></expr>:</case>

        <if_stmt pos:start="23:9" pos:end="33:9"><if pos:start="23:9" pos:end="33:9">if <condition pos:start="23:12" pos:end="23:35">(<expr pos:start="23:13" pos:end="23:34"><name pos:start="23:13" pos:end="23:15">val</name> <operator pos:start="23:17" pos:end="23:17">&amp;</operator> <name pos:start="23:19" pos:end="23:34">MFI_FWINIT_ABORT</name></expr>)</condition> <block pos:start="23:37" pos:end="33:9">{<block_content pos:start="27:13" pos:end="31:13">

            <comment type="block" pos:start="25:13" pos:end="25:40">/* Abort all pending cmds */</comment>

            <for pos:start="27:13" pos:end="31:13">for <control pos:start="27:17" pos:end="27:44">(<init pos:start="27:18" pos:end="27:23"><expr pos:start="27:18" pos:end="27:22"><name pos:start="27:18" pos:end="27:18">i</name> <operator pos:start="27:20" pos:end="27:20">=</operator> <literal type="number" pos:start="27:22" pos:end="27:22">0</literal></expr>;</init> <condition pos:start="27:25" pos:end="27:39"><expr pos:start="27:25" pos:end="27:38"><name pos:start="27:25" pos:end="27:25">i</name> <operator pos:start="27:27" pos:end="27:27">&lt;</operator> <name pos:start="27:29" pos:end="27:38"><name pos:start="27:29" pos:end="27:29">s</name><operator pos:start="27:30" pos:end="27:31">-&gt;</operator><name pos:start="27:32" pos:end="27:38">fw_cmds</name></name></expr>;</condition> <incr pos:start="27:41" pos:end="27:43"><expr pos:start="27:41" pos:end="27:43"><name pos:start="27:41" pos:end="27:41">i</name><operator pos:start="27:42" pos:end="27:43">++</operator></expr></incr>)</control> <block pos:start="27:46" pos:end="31:13">{<block_content pos:start="29:17" pos:end="29:53">

                <expr_stmt pos:start="29:17" pos:end="29:53"><expr pos:start="29:17" pos:end="29:52"><call pos:start="29:17" pos:end="29:52"><name pos:start="29:17" pos:end="29:37">megasas_abort_command</name><argument_list pos:start="29:38" pos:end="29:52">(<argument pos:start="29:39" pos:end="29:51"><expr pos:start="29:39" pos:end="29:51"><operator pos:start="29:39" pos:end="29:39">&amp;</operator><name pos:start="29:40" pos:end="29:51"><name pos:start="29:40" pos:end="29:40">s</name><operator pos:start="29:41" pos:end="29:42">-&gt;</operator><name pos:start="29:43" pos:end="29:48">frames</name><index pos:start="29:49" pos:end="29:51">[<expr pos:start="29:50" pos:end="29:50"><name pos:start="29:50" pos:end="29:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="35:9" pos:end="41:9"><if pos:start="35:9" pos:end="41:9">if <condition pos:start="35:12" pos:end="35:35">(<expr pos:start="35:13" pos:end="35:34"><name pos:start="35:13" pos:end="35:15">val</name> <operator pos:start="35:17" pos:end="35:17">&amp;</operator> <name pos:start="35:19" pos:end="35:34">MFI_FWINIT_READY</name></expr>)</condition> <block pos:start="35:37" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:34">

            <comment type="block" pos:start="37:13" pos:end="37:34">/* move to FW READY */</comment>

            <expr_stmt pos:start="39:13" pos:end="39:34"><expr pos:start="39:13" pos:end="39:33"><call pos:start="39:13" pos:end="39:33"><name pos:start="39:13" pos:end="39:30">megasas_soft_reset</name><argument_list pos:start="39:31" pos:end="39:33">(<argument pos:start="39:32" pos:end="39:32"><expr pos:start="39:32" pos:end="39:32"><name pos:start="39:32" pos:end="39:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="43:9" pos:end="47:9"><if pos:start="43:9" pos:end="47:9">if <condition pos:start="43:12" pos:end="43:37">(<expr pos:start="43:13" pos:end="43:36"><name pos:start="43:13" pos:end="43:15">val</name> <operator pos:start="43:17" pos:end="43:17">&amp;</operator> <name pos:start="43:19" pos:end="43:36">MFI_FWINIT_MFIMODE</name></expr>)</condition> <block pos:start="43:39" pos:end="47:9">{<block_content>

            <comment type="block" pos:start="45:13" pos:end="45:30">/* discard MFIs */</comment>

        </block_content>}</block></if></if_stmt>

        <break pos:start="49:9" pos:end="49:14">break;</break>

    <case pos:start="51:5" pos:end="51:18">case <expr pos:start="51:10" pos:end="51:17"><name pos:start="51:10" pos:end="51:17">MFI_OMSK</name></expr>:</case>

        <expr_stmt pos:start="53:9" pos:end="53:27"><expr pos:start="53:9" pos:end="53:26"><name pos:start="53:9" pos:end="53:20"><name pos:start="53:9" pos:end="53:9">s</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:20">intr_mask</name></name> <operator pos:start="53:22" pos:end="53:22">=</operator> <name pos:start="53:24" pos:end="53:26">val</name></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="61:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:63">(<expr pos:start="55:13" pos:end="55:62"><operator pos:start="55:13" pos:end="55:13">!</operator><call pos:start="55:14" pos:end="55:36"><name pos:start="55:14" pos:end="55:33">megasas_intr_enabled</name><argument_list pos:start="55:34" pos:end="55:36">(<argument pos:start="55:35" pos:end="55:35"><expr pos:start="55:35" pos:end="55:35"><name pos:start="55:35" pos:end="55:35">s</name></expr></argument>)</argument_list></call> <operator pos:start="55:38" pos:end="55:39">&amp;&amp;</operator> <operator pos:start="55:41" pos:end="55:41">!</operator><call pos:start="55:42" pos:end="55:62"><name pos:start="55:42" pos:end="55:53">msix_enabled</name><argument_list pos:start="55:54" pos:end="55:62">(<argument pos:start="55:55" pos:end="55:61"><expr pos:start="55:55" pos:end="55:61"><operator pos:start="55:55" pos:end="55:55">&amp;</operator><name pos:start="55:56" pos:end="55:61"><name pos:start="55:56" pos:end="55:56">s</name><operator pos:start="55:57" pos:end="55:58">-&gt;</operator><name pos:start="55:59" pos:end="55:61">dev</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:65" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:42">

            <expr_stmt pos:start="57:13" pos:end="57:38"><expr pos:start="57:13" pos:end="57:37"><call pos:start="57:13" pos:end="57:37"><name pos:start="57:13" pos:end="57:35">trace_megasas_irq_lower</name><argument_list pos:start="57:36" pos:end="57:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:42"><expr pos:start="59:13" pos:end="59:41"><call pos:start="59:13" pos:end="59:41"><name pos:start="59:13" pos:end="59:26">qemu_irq_lower</name><argument_list pos:start="59:27" pos:end="59:41">(<argument pos:start="59:28" pos:end="59:40"><expr pos:start="59:28" pos:end="59:40"><name pos:start="59:28" pos:end="59:40"><name pos:start="59:28" pos:end="59:28">s</name><operator pos:start="59:29" pos:end="59:30">-&gt;</operator><name pos:start="59:31" pos:end="59:33">dev</name><operator pos:start="59:34" pos:end="59:34">.</operator><name pos:start="59:35" pos:end="59:37">irq</name><index pos:start="59:38" pos:end="59:40">[<expr pos:start="59:39" pos:end="59:39"><literal type="number" pos:start="59:39" pos:end="59:39">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="63:9" pos:end="71:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:36">(<expr pos:start="63:13" pos:end="63:35"><call pos:start="63:13" pos:end="63:35"><name pos:start="63:13" pos:end="63:32">megasas_intr_enabled</name><argument_list pos:start="63:33" pos:end="63:35">(<argument pos:start="63:34" pos:end="63:34"><expr pos:start="63:34" pos:end="63:34"><name pos:start="63:34" pos:end="63:34">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:38" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:41">

            <expr_stmt pos:start="65:13" pos:end="65:41"><expr pos:start="65:13" pos:end="65:40"><call pos:start="65:13" pos:end="65:40"><name pos:start="65:13" pos:end="65:38">trace_megasas_intr_enabled</name><argument_list pos:start="65:39" pos:end="65:40">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="67:11" pos:end="71:9">else <block pos:start="67:16" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:42">

            <expr_stmt pos:start="69:13" pos:end="69:42"><expr pos:start="69:13" pos:end="69:41"><call pos:start="69:13" pos:end="69:41"><name pos:start="69:13" pos:end="69:39">trace_megasas_intr_disabled</name><argument_list pos:start="69:40" pos:end="69:41">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>

    <case pos:start="75:5" pos:end="75:19">case <expr pos:start="75:10" pos:end="75:18"><name pos:start="75:10" pos:end="75:18">MFI_ODCR0</name></expr>:</case>

        <expr_stmt pos:start="77:9" pos:end="77:24"><expr pos:start="77:9" pos:end="77:23"><name pos:start="77:9" pos:end="77:19"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:19">doorbell</name></name> <operator pos:start="77:21" pos:end="77:21">=</operator> <literal type="number" pos:start="77:23" pos:end="77:23">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="95:9"><if pos:start="79:9" pos:end="95:9">if <condition pos:start="79:12" pos:end="79:54">(<expr pos:start="79:13" pos:end="79:53"><name pos:start="79:13" pos:end="79:26"><name pos:start="79:13" pos:end="79:13">s</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:26">producer_pa</name></name> <operator pos:start="79:28" pos:end="79:29">&amp;&amp;</operator> <call pos:start="79:31" pos:end="79:53"><name pos:start="79:31" pos:end="79:50">megasas_intr_enabled</name><argument_list pos:start="79:51" pos:end="79:53">(<argument pos:start="79:52" pos:end="79:52"><expr pos:start="79:52" pos:end="79:52"><name pos:start="79:52" pos:end="79:52">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="79:56" pos:end="95:9">{<block_content pos:start="83:13" pos:end="93:13">

            <comment type="block" pos:start="81:13" pos:end="81:44">/* Update reply queue pointer */</comment>

            <expr_stmt pos:start="83:13" pos:end="83:66"><expr pos:start="83:13" pos:end="83:65"><call pos:start="83:13" pos:end="83:65"><name pos:start="83:13" pos:end="83:35">trace_megasas_qf_update</name><argument_list pos:start="83:36" pos:end="83:65">(<argument pos:start="83:37" pos:end="83:55"><expr pos:start="83:37" pos:end="83:55"><name pos:start="83:37" pos:end="83:55"><name pos:start="83:37" pos:end="83:37">s</name><operator pos:start="83:38" pos:end="83:39">-&gt;</operator><name pos:start="83:40" pos:end="83:55">reply_queue_head</name></name></expr></argument>, <argument pos:start="83:58" pos:end="83:64"><expr pos:start="83:58" pos:end="83:64"><name pos:start="83:58" pos:end="83:64"><name pos:start="83:58" pos:end="83:58">s</name><operator pos:start="83:59" pos:end="83:60">-&gt;</operator><name pos:start="83:61" pos:end="83:64">busy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:61"><expr pos:start="85:13" pos:end="85:60"><call pos:start="85:13" pos:end="85:60"><name pos:start="85:13" pos:end="85:23">stl_le_phys</name><argument_list pos:start="85:24" pos:end="85:60">(<argument pos:start="85:25" pos:end="85:38"><expr pos:start="85:25" pos:end="85:38"><name pos:start="85:25" pos:end="85:38"><name pos:start="85:25" pos:end="85:25">s</name><operator pos:start="85:26" pos:end="85:27">-&gt;</operator><name pos:start="85:28" pos:end="85:38">producer_pa</name></name></expr></argument>, <argument pos:start="85:41" pos:end="85:59"><expr pos:start="85:41" pos:end="85:59"><name pos:start="85:41" pos:end="85:59"><name pos:start="85:41" pos:end="85:41">s</name><operator pos:start="85:42" pos:end="85:43">-&gt;</operator><name pos:start="85:44" pos:end="85:59">reply_queue_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="87:13" pos:end="93:13"><if pos:start="87:13" pos:end="93:13">if <condition pos:start="87:16" pos:end="87:39">(<expr pos:start="87:17" pos:end="87:38"><operator pos:start="87:17" pos:end="87:17">!</operator><call pos:start="87:18" pos:end="87:38"><name pos:start="87:18" pos:end="87:29">msix_enabled</name><argument_list pos:start="87:30" pos:end="87:38">(<argument pos:start="87:31" pos:end="87:37"><expr pos:start="87:31" pos:end="87:37"><operator pos:start="87:31" pos:end="87:31">&amp;</operator><name pos:start="87:32" pos:end="87:37"><name pos:start="87:32" pos:end="87:32">s</name><operator pos:start="87:33" pos:end="87:34">-&gt;</operator><name pos:start="87:35" pos:end="87:37">dev</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:41" pos:end="93:13">{<block_content pos:start="89:17" pos:end="91:46">

                <expr_stmt pos:start="89:17" pos:end="89:42"><expr pos:start="89:17" pos:end="89:41"><call pos:start="89:17" pos:end="89:41"><name pos:start="89:17" pos:end="89:39">trace_megasas_irq_lower</name><argument_list pos:start="89:40" pos:end="89:41">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="91:17" pos:end="91:46"><expr pos:start="91:17" pos:end="91:45"><call pos:start="91:17" pos:end="91:45"><name pos:start="91:17" pos:end="91:30">qemu_irq_lower</name><argument_list pos:start="91:31" pos:end="91:45">(<argument pos:start="91:32" pos:end="91:44"><expr pos:start="91:32" pos:end="91:44"><name pos:start="91:32" pos:end="91:44"><name pos:start="91:32" pos:end="91:32">s</name><operator pos:start="91:33" pos:end="91:34">-&gt;</operator><name pos:start="91:35" pos:end="91:37">dev</name><operator pos:start="91:38" pos:end="91:38">.</operator><name pos:start="91:39" pos:end="91:41">irq</name><index pos:start="91:42" pos:end="91:44">[<expr pos:start="91:43" pos:end="91:43"><literal type="number" pos:start="91:43" pos:end="91:43">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="97:9" pos:end="97:14">break;</break>

    <case pos:start="99:5" pos:end="99:18">case <expr pos:start="99:10" pos:end="99:17"><name pos:start="99:10" pos:end="99:17">MFI_IQPH</name></expr>:</case>

        <comment type="block" pos:start="101:9" pos:end="101:65">/* Received high 32 bits of a 64 bit MFI frame address */</comment>

        <expr_stmt pos:start="103:9" pos:end="103:26"><expr pos:start="103:9" pos:end="103:25"><name pos:start="103:9" pos:end="103:19"><name pos:start="103:9" pos:end="103:9">s</name><operator pos:start="103:10" pos:end="103:11">-&gt;</operator><name pos:start="103:12" pos:end="103:19">frame_hi</name></name> <operator pos:start="103:21" pos:end="103:21">=</operator> <name pos:start="103:23" pos:end="103:25">val</name></expr>;</expr_stmt>

        <break pos:start="105:9" pos:end="105:14">break;</break>

    <case pos:start="107:5" pos:end="107:18">case <expr pos:start="107:10" pos:end="107:17"><name pos:start="107:10" pos:end="107:17">MFI_IQPL</name></expr>:</case>

        <comment type="block" pos:start="109:9" pos:end="109:64">/* Received low 32 bits of a 64 bit MFI frame address */</comment>

    <case pos:start="111:5" pos:end="111:17">case <expr pos:start="111:10" pos:end="111:16"><name pos:start="111:10" pos:end="111:16">MFI_IQP</name></expr>:</case>

        <comment type="block" pos:start="113:9" pos:end="113:47">/* Received 32 bit MFI frame address */</comment>

        <expr_stmt pos:start="115:9" pos:end="115:35"><expr pos:start="115:9" pos:end="115:34"><name pos:start="115:9" pos:end="115:18">frame_addr</name> <operator pos:start="115:20" pos:end="115:20">=</operator> <operator pos:start="115:22" pos:end="115:22">(</operator><name pos:start="115:23" pos:end="115:25">val</name> <operator pos:start="115:27" pos:end="115:27">&amp;</operator> <operator pos:start="115:29" pos:end="115:29">~</operator><literal type="number" pos:start="115:30" pos:end="115:33">0x1F</literal><operator pos:start="115:34" pos:end="115:34">)</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="117:9" pos:end="117:40">/* Add possible 64 bit offset */</comment>

        <expr_stmt pos:start="119:9" pos:end="119:52"><expr pos:start="119:9" pos:end="119:51"><name pos:start="119:9" pos:end="119:18">frame_addr</name> <operator pos:start="119:20" pos:end="119:21">|=</operator> <operator pos:start="119:23" pos:end="119:23">(</operator><operator pos:start="119:24" pos:end="119:24">(</operator><name pos:start="119:25" pos:end="119:32">uint64_t</name><operator pos:start="119:33" pos:end="119:33">)</operator><name pos:start="119:34" pos:end="119:44"><name pos:start="119:34" pos:end="119:34">s</name><operator pos:start="119:35" pos:end="119:36">-&gt;</operator><name pos:start="119:37" pos:end="119:44">frame_hi</name></name> <operator pos:start="119:46" pos:end="119:47">&lt;&lt;</operator> <literal type="number" pos:start="119:49" pos:end="119:50">32</literal><operator pos:start="119:51" pos:end="119:51">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:24"><expr pos:start="121:9" pos:end="121:23"><name pos:start="121:9" pos:end="121:19"><name pos:start="121:9" pos:end="121:9">s</name><operator pos:start="121:10" pos:end="121:11">-&gt;</operator><name pos:start="121:12" pos:end="121:19">frame_hi</name></name> <operator pos:start="121:21" pos:end="121:21">=</operator> <literal type="number" pos:start="121:23" pos:end="121:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:39"><expr pos:start="123:9" pos:end="123:38"><name pos:start="123:9" pos:end="123:19">frame_count</name> <operator pos:start="123:21" pos:end="123:21">=</operator> <operator pos:start="123:23" pos:end="123:23">(</operator><name pos:start="123:24" pos:end="123:26">val</name> <operator pos:start="123:28" pos:end="123:29">&gt;&gt;</operator> <literal type="number" pos:start="123:31" pos:end="123:31">1</literal><operator pos:start="123:32" pos:end="123:32">)</operator> <operator pos:start="123:34" pos:end="123:34">&amp;</operator> <literal type="number" pos:start="123:36" pos:end="123:38">0xF</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:57"><expr pos:start="125:9" pos:end="125:56"><call pos:start="125:9" pos:end="125:56"><name pos:start="125:9" pos:end="125:28">megasas_handle_frame</name><argument_list pos:start="125:29" pos:end="125:56">(<argument pos:start="125:30" pos:end="125:30"><expr pos:start="125:30" pos:end="125:30"><name pos:start="125:30" pos:end="125:30">s</name></expr></argument>, <argument pos:start="125:33" pos:end="125:42"><expr pos:start="125:33" pos:end="125:42"><name pos:start="125:33" pos:end="125:42">frame_addr</name></expr></argument>, <argument pos:start="125:45" pos:end="125:55"><expr pos:start="125:45" pos:end="125:55"><name pos:start="125:45" pos:end="125:55">frame_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="127:9" pos:end="127:14">break;</break>

    <default pos:start="129:5" pos:end="129:12">default:</default>

        <expr_stmt pos:start="131:9" pos:end="131:53"><expr pos:start="131:9" pos:end="131:52"><call pos:start="131:9" pos:end="131:52"><name pos:start="131:9" pos:end="131:41">trace_megasas_mmio_invalid_writel</name><argument_list pos:start="131:42" pos:end="131:52">(<argument pos:start="131:43" pos:end="131:46"><expr pos:start="131:43" pos:end="131:46"><name pos:start="131:43" pos:end="131:46">addr</name></expr></argument>, <argument pos:start="131:49" pos:end="131:51"><expr pos:start="131:49" pos:end="131:51"><name pos:start="131:49" pos:end="131:51">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="133:9" pos:end="133:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
