<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10538.c" pos:tabs="8"><function pos:start="1:1" pos:end="29:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">cpu_pre_save</name><parameter_list pos:start="1:25" pos:end="1:38">(<parameter pos:start="1:26" pos:end="1:37"><decl pos:start="1:26" pos:end="1:37"><type pos:start="1:26" pos:end="1:31"><name pos:start="1:26" pos:end="1:29">void</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:37">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="29:1">{<block_content pos:start="5:5" pos:end="27:52">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">ARMCPU</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:15">cpu</name> <init pos:start="5:17" pos:end="5:24">= <expr pos:start="5:19" pos:end="5:24"><name pos:start="5:19" pos:end="5:24">opaque</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="15:5"><if pos:start="9:5" pos:end="15:5">if <condition pos:start="9:8" pos:end="9:37">(<expr pos:start="9:9" pos:end="9:36"><operator pos:start="9:9" pos:end="9:9">!</operator><call pos:start="9:10" pos:end="9:36"><name pos:start="9:10" pos:end="9:31">write_cpustate_to_list</name><argument_list pos:start="9:32" pos:end="9:36">(<argument pos:start="9:33" pos:end="9:35"><expr pos:start="9:33" pos:end="9:35"><name pos:start="9:33" pos:end="9:35">cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="9:39" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:16">

        <comment type="block" pos:start="11:9" pos:end="11:37">/* This should never fail. */</comment>

        <expr_stmt pos:start="13:9" pos:end="13:16"><expr pos:start="13:9" pos:end="13:15"><call pos:start="13:9" pos:end="13:15"><name pos:start="13:9" pos:end="13:13">abort</name><argument_list pos:start="13:14" pos:end="13:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:56"><expr pos:start="19:5" pos:end="19:55"><name pos:start="19:5" pos:end="19:32"><name pos:start="19:5" pos:end="19:7">cpu</name><operator pos:start="19:8" pos:end="19:9">-&gt;</operator><name pos:start="19:10" pos:end="19:32">cpreg_vmstate_array_len</name></name> <operator pos:start="19:34" pos:end="19:34">=</operator> <name pos:start="19:36" pos:end="19:55"><name pos:start="19:36" pos:end="19:38">cpu</name><operator pos:start="19:39" pos:end="19:40">-&gt;</operator><name pos:start="19:41" pos:end="19:55">cpreg_array_len</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="23:52"><expr pos:start="21:5" pos:end="23:51"><call pos:start="21:5" pos:end="23:51"><name pos:start="21:5" pos:end="21:10">memcpy</name><argument_list pos:start="21:11" pos:end="23:51">(<argument pos:start="21:12" pos:end="21:37"><expr pos:start="21:12" pos:end="21:37"><name pos:start="21:12" pos:end="21:37"><name pos:start="21:12" pos:end="21:14">cpu</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:37">cpreg_vmstate_indexes</name></name></expr></argument>, <argument pos:start="21:40" pos:end="21:57"><expr pos:start="21:40" pos:end="21:57"><name pos:start="21:40" pos:end="21:57"><name pos:start="21:40" pos:end="21:42">cpu</name><operator pos:start="21:43" pos:end="21:44">-&gt;</operator><name pos:start="21:45" pos:end="21:57">cpreg_indexes</name></name></expr></argument>,

           <argument pos:start="23:12" pos:end="23:50"><expr pos:start="23:12" pos:end="23:50"><name pos:start="23:12" pos:end="23:31"><name pos:start="23:12" pos:end="23:14">cpu</name><operator pos:start="23:15" pos:end="23:16">-&gt;</operator><name pos:start="23:17" pos:end="23:31">cpreg_array_len</name></name> <operator pos:start="23:33" pos:end="23:33">*</operator> <sizeof pos:start="23:35" pos:end="23:50">sizeof<argument_list pos:start="23:41" pos:end="23:50">(<argument pos:start="23:42" pos:end="23:49"><expr pos:start="23:42" pos:end="23:49"><name pos:start="23:42" pos:end="23:49">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="27:52"><expr pos:start="25:5" pos:end="27:51"><call pos:start="25:5" pos:end="27:51"><name pos:start="25:5" pos:end="25:10">memcpy</name><argument_list pos:start="25:11" pos:end="27:51">(<argument pos:start="25:12" pos:end="25:36"><expr pos:start="25:12" pos:end="25:36"><name pos:start="25:12" pos:end="25:36"><name pos:start="25:12" pos:end="25:14">cpu</name><operator pos:start="25:15" pos:end="25:16">-&gt;</operator><name pos:start="25:17" pos:end="25:36">cpreg_vmstate_values</name></name></expr></argument>, <argument pos:start="25:39" pos:end="25:55"><expr pos:start="25:39" pos:end="25:55"><name pos:start="25:39" pos:end="25:55"><name pos:start="25:39" pos:end="25:41">cpu</name><operator pos:start="25:42" pos:end="25:43">-&gt;</operator><name pos:start="25:44" pos:end="25:55">cpreg_values</name></name></expr></argument>,

           <argument pos:start="27:12" pos:end="27:50"><expr pos:start="27:12" pos:end="27:50"><name pos:start="27:12" pos:end="27:31"><name pos:start="27:12" pos:end="27:14">cpu</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:31">cpreg_array_len</name></name> <operator pos:start="27:33" pos:end="27:33">*</operator> <sizeof pos:start="27:35" pos:end="27:50">sizeof<argument_list pos:start="27:41" pos:end="27:50">(<argument pos:start="27:42" pos:end="27:49"><expr pos:start="27:42" pos:end="27:49"><name pos:start="27:42" pos:end="27:49">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
