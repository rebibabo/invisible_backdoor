<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9360.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:20">avpriv_vsnprintf</name><parameter_list pos:start="1:21" pos:end="3:32">(<parameter pos:start="1:22" pos:end="1:37"><decl pos:start="1:22" pos:end="1:37"><type pos:start="1:22" pos:end="1:37"><name pos:start="1:22" pos:end="1:25">char</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier><specifier pos:start="1:28" pos:end="1:35">restrict</specifier></type> <name pos:start="1:37" pos:end="1:37">s</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:47"><decl pos:start="1:40" pos:end="1:47"><type pos:start="1:40" pos:end="1:47"><name pos:start="1:40" pos:end="1:45">size_t</name></type> <name pos:start="1:47" pos:end="1:47">n</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:73"><decl pos:start="1:50" pos:end="1:73"><type pos:start="1:50" pos:end="1:73"><specifier pos:start="1:50" pos:end="1:54">const</specifier> <name pos:start="1:56" pos:end="1:59">char</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier><specifier pos:start="1:62" pos:end="1:69">restrict</specifier></type> <name pos:start="1:71" pos:end="1:73">fmt</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:31"><decl pos:start="3:22" pos:end="3:31"><type pos:start="3:22" pos:end="3:31"><name pos:start="3:22" pos:end="3:28">va_list</name></type> <name pos:start="3:30" pos:end="3:31">ap</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="45:1">{<block_content pos:start="7:5" pos:end="43:15">

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:31"><if pos:start="11:5" pos:end="13:17">if <condition pos:start="11:8" pos:end="11:15">(<expr pos:start="11:9" pos:end="11:14"><name pos:start="11:9" pos:end="11:9">n</name> <operator pos:start="11:11" pos:end="11:12">==</operator> <literal type="number" pos:start="11:14" pos:end="11:14">0</literal></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:17"><block_content pos:start="13:9" pos:end="13:17">

        <return pos:start="13:9" pos:end="13:17">return <expr pos:start="13:16" pos:end="13:16"><literal type="number" pos:start="13:16" pos:end="13:16">0</literal></expr>;</return></block_content></block></if>

    <if type="elseif" pos:start="15:5" pos:end="17:31">else if <condition pos:start="15:13" pos:end="15:25">(<expr pos:start="15:14" pos:end="15:24"><name pos:start="15:14" pos:end="15:14">n</name> <operator pos:start="15:16" pos:end="15:16">&gt;</operator> <name pos:start="15:18" pos:end="15:24">INT_MAX</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:31"><block_content pos:start="17:9" pos:end="17:31">

        <return pos:start="17:9" pos:end="17:31">return <expr pos:start="17:16" pos:end="17:30"><call pos:start="17:16" pos:end="17:30"><name pos:start="17:16" pos:end="17:22">AVERROR</name><argument_list pos:start="17:23" pos:end="17:30">(<argument pos:start="17:24" pos:end="17:29"><expr pos:start="17:24" pos:end="17:29"><name pos:start="17:24" pos:end="17:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="21:5" pos:end="31:76">/* we use n - 1 here because if the buffer is not big enough, the MS

     * runtime libraries don't add a terminating zero at the end. MSDN

     * recommends to provide _snprintf/_vsnprintf() a buffer size that

     * is one less than the actual buffer, and zero it before calling

     * _snprintf/_vsnprintf() to workaround this problem.

     * See http://msdn.microsoft.com/en-us/library/1kt27hek(v=vs.80).aspx */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:20"><expr pos:start="33:5" pos:end="33:19"><call pos:start="33:5" pos:end="33:19"><name pos:start="33:5" pos:end="33:10">memset</name><argument_list pos:start="33:11" pos:end="33:19">(<argument pos:start="33:12" pos:end="33:12"><expr pos:start="33:12" pos:end="33:12"><name pos:start="33:12" pos:end="33:12">s</name></expr></argument>, <argument pos:start="33:15" pos:end="33:15"><expr pos:start="33:15" pos:end="33:15"><literal type="number" pos:start="33:15" pos:end="33:15">0</literal></expr></argument>, <argument pos:start="33:18" pos:end="33:18"><expr pos:start="33:18" pos:end="33:18"><name pos:start="33:18" pos:end="33:18">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:39"><expr pos:start="35:5" pos:end="35:38"><name pos:start="35:5" pos:end="35:7">ret</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:38"><name pos:start="35:11" pos:end="35:19">vsnprintf</name><argument_list pos:start="35:20" pos:end="35:38">(<argument pos:start="35:21" pos:end="35:21"><expr pos:start="35:21" pos:end="35:21"><name pos:start="35:21" pos:end="35:21">s</name></expr></argument>, <argument pos:start="35:24" pos:end="35:28"><expr pos:start="35:24" pos:end="35:28"><name pos:start="35:24" pos:end="35:24">n</name> <operator pos:start="35:26" pos:end="35:26">-</operator> <literal type="number" pos:start="35:28" pos:end="35:28">1</literal></expr></argument>, <argument pos:start="35:31" pos:end="35:33"><expr pos:start="35:31" pos:end="35:33"><name pos:start="35:31" pos:end="35:33">fmt</name></expr></argument>, <argument pos:start="35:36" pos:end="35:37"><expr pos:start="35:36" pos:end="35:37"><name pos:start="35:36" pos:end="35:37">ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="39:16"><if pos:start="37:5" pos:end="39:16">if <condition pos:start="37:8" pos:end="37:18">(<expr pos:start="37:9" pos:end="37:17"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:14">==</operator> <operator pos:start="37:16" pos:end="37:16">-</operator><literal type="number" pos:start="37:17" pos:end="37:17">1</literal></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:16"><block_content pos:start="39:9" pos:end="39:16">

        <expr_stmt pos:start="39:9" pos:end="39:16"><expr pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <name pos:start="39:15" pos:end="39:15">n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="43:5" pos:end="43:15">return <expr pos:start="43:12" pos:end="43:14"><name pos:start="43:12" pos:end="43:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
