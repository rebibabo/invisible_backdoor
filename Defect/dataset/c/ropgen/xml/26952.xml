<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26952.c" pos:tabs="8"><function pos:start="1:1" pos:end="21:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">bdrv_aio_co_cancel_em</name><parameter_list pos:start="1:34" pos:end="1:61">(<parameter pos:start="1:35" pos:end="1:60"><decl pos:start="1:35" pos:end="1:60"><type pos:start="1:35" pos:end="1:52"><name pos:start="1:35" pos:end="1:50">BlockDriverAIOCB</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:60">blockacb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="21:1">{<block_content pos:start="5:5" pos:end="19:5">

    <decl_stmt pos:start="5:5" pos:end="7:66"><decl pos:start="5:5" pos:end="7:65"><type pos:start="5:5" pos:end="5:31"><name pos:start="5:5" pos:end="5:29">BlockDriverAIOCBCoroutine</name> <modifier pos:start="5:31" pos:end="5:31">*</modifier></type><name pos:start="5:32" pos:end="5:34">acb</name> <init pos:start="5:36" pos:end="7:65">=

        <expr pos:start="7:9" pos:end="7:65"><call pos:start="7:9" pos:end="7:65"><name pos:start="7:9" pos:end="7:20">container_of</name><argument_list pos:start="7:21" pos:end="7:65">(<argument pos:start="7:22" pos:end="7:29"><expr pos:start="7:22" pos:end="7:29"><name pos:start="7:22" pos:end="7:29">blockacb</name></expr></argument>, <argument pos:start="7:32" pos:end="7:56"><expr pos:start="7:32" pos:end="7:56"><name pos:start="7:32" pos:end="7:56">BlockDriverAIOCBCoroutine</name></expr></argument>, <argument pos:start="7:59" pos:end="7:64"><expr pos:start="7:59" pos:end="7:64"><name pos:start="7:59" pos:end="7:64">common</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:13">done</name> <init pos:start="9:15" pos:end="9:21">= <expr pos:start="9:17" pos:end="9:21"><name pos:start="9:17" pos:end="9:21">false</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:22"><expr pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:7">acb</name><operator pos:start="13:8" pos:end="13:9">-&gt;</operator><name pos:start="13:10" pos:end="13:13">done</name></name> <operator pos:start="13:15" pos:end="13:15">=</operator> <operator pos:start="13:17" pos:end="13:17">&amp;</operator><name pos:start="13:18" pos:end="13:21">done</name></expr>;</expr_stmt>

    <while pos:start="15:5" pos:end="19:5">while <condition pos:start="15:11" pos:end="15:17">(<expr pos:start="15:12" pos:end="15:16"><operator pos:start="15:12" pos:end="15:12">!</operator><name pos:start="15:13" pos:end="15:16">done</name></expr>)</condition> <block pos:start="15:19" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:24">

        <expr_stmt pos:start="17:9" pos:end="17:24"><expr pos:start="17:9" pos:end="17:23"><call pos:start="17:9" pos:end="17:23"><name pos:start="17:9" pos:end="17:21">qemu_aio_wait</name><argument_list pos:start="17:22" pos:end="17:23">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
