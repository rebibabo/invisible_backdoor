<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3730.c" pos:tabs="8"><function pos:start="1:1" pos:end="369:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">pc_init1</name><parameter_list pos:start="1:21" pos:end="19:42">(<parameter pos:start="1:22" pos:end="1:48"><decl pos:start="1:22" pos:end="1:48"><type pos:start="1:22" pos:end="1:48"><name pos:start="1:22" pos:end="1:33">MemoryRegion</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:48">system_memory</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:44"><decl pos:start="3:22" pos:end="3:44"><type pos:start="3:22" pos:end="3:44"><name pos:start="3:22" pos:end="3:33">MemoryRegion</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:44">system_io</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:40"><decl pos:start="5:22" pos:end="5:40"><type pos:start="5:22" pos:end="5:40"><name pos:start="5:22" pos:end="5:31">ram_addr_t</name></type> <name pos:start="5:33" pos:end="5:40">ram_size</name></decl></parameter>,

                     <parameter pos:start="7:22" pos:end="7:44"><decl pos:start="7:22" pos:end="7:44"><type pos:start="7:22" pos:end="7:44"><specifier pos:start="7:22" pos:end="7:26">const</specifier> <name pos:start="7:28" pos:end="7:31">char</name> <modifier pos:start="7:33" pos:end="7:33">*</modifier></type><name pos:start="7:34" pos:end="7:44">boot_device</name></decl></parameter>,

                     <parameter pos:start="9:22" pos:end="9:48"><decl pos:start="9:22" pos:end="9:48"><type pos:start="9:22" pos:end="9:48"><specifier pos:start="9:22" pos:end="9:26">const</specifier> <name pos:start="9:28" pos:end="9:31">char</name> <modifier pos:start="9:33" pos:end="9:33">*</modifier></type><name pos:start="9:34" pos:end="9:48">kernel_filename</name></decl></parameter>,

                     <parameter pos:start="11:22" pos:end="11:47"><decl pos:start="11:22" pos:end="11:47"><type pos:start="11:22" pos:end="11:47"><specifier pos:start="11:22" pos:end="11:26">const</specifier> <name pos:start="11:28" pos:end="11:31">char</name> <modifier pos:start="11:33" pos:end="11:33">*</modifier></type><name pos:start="11:34" pos:end="11:47">kernel_cmdline</name></decl></parameter>,

                     <parameter pos:start="13:22" pos:end="13:48"><decl pos:start="13:22" pos:end="13:48"><type pos:start="13:22" pos:end="13:48"><specifier pos:start="13:22" pos:end="13:26">const</specifier> <name pos:start="13:28" pos:end="13:31">char</name> <modifier pos:start="13:33" pos:end="13:33">*</modifier></type><name pos:start="13:34" pos:end="13:48">initrd_filename</name></decl></parameter>,

                     <parameter pos:start="15:22" pos:end="15:42"><decl pos:start="15:22" pos:end="15:42"><type pos:start="15:22" pos:end="15:42"><specifier pos:start="15:22" pos:end="15:26">const</specifier> <name pos:start="15:28" pos:end="15:31">char</name> <modifier pos:start="15:33" pos:end="15:33">*</modifier></type><name pos:start="15:34" pos:end="15:42">cpu_model</name></decl></parameter>,

                     <parameter pos:start="17:22" pos:end="17:36"><decl pos:start="17:22" pos:end="17:36"><type pos:start="17:22" pos:end="17:36"><name pos:start="17:22" pos:end="17:24">int</name></type> <name pos:start="17:26" pos:end="17:36">pci_enabled</name></decl></parameter>,

                     <parameter pos:start="19:22" pos:end="19:41"><decl pos:start="19:22" pos:end="19:41"><type pos:start="19:22" pos:end="19:41"><name pos:start="19:22" pos:end="19:24">int</name></type> <name pos:start="19:26" pos:end="19:41">kvmclock_enabled</name></decl></parameter>)</parameter_list>

<block pos:start="21:1" pos:end="369:1">{<block_content pos:start="23:5" pos:end="367:5">

    <decl_stmt pos:start="23:5" pos:end="23:10"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:52"><decl pos:start="25:5" pos:end="25:32"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:14">ram_addr_t</name></type> <name pos:start="25:16" pos:end="25:32">below_4g_mem_size</name></decl>, <decl pos:start="25:35" pos:end="25:51"><type ref="prev" pos:start="25:5" pos:end="25:14"/><name pos:start="25:35" pos:end="25:51">above_4g_mem_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:20"><decl pos:start="27:5" pos:end="27:19"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:10">PCIBus</name> <modifier pos:start="27:12" pos:end="27:12">*</modifier></type><name pos:start="27:13" pos:end="27:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:20"><decl pos:start="29:5" pos:end="29:19"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:10">ISABus</name> <modifier pos:start="29:12" pos:end="29:12">*</modifier></type><name pos:start="29:13" pos:end="29:19">isa_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:33"><decl pos:start="31:5" pos:end="31:32"><type pos:start="31:5" pos:end="31:20"><name pos:start="31:5" pos:end="31:18">PCII440FXState</name> <modifier pos:start="31:20" pos:end="31:20">*</modifier></type><name pos:start="31:21" pos:end="31:32">i440fx_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:25"><decl pos:start="33:5" pos:end="33:24"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:19">piix3_devfn</name> <init pos:start="33:21" pos:end="33:24">= <expr pos:start="33:23" pos:end="33:24"><operator pos:start="33:23" pos:end="33:23">-</operator><literal type="number" pos:start="33:24" pos:end="33:24">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:22"><decl pos:start="35:5" pos:end="35:21"><type pos:start="35:5" pos:end="35:14"><name pos:start="35:5" pos:end="35:12">qemu_irq</name> <modifier pos:start="35:14" pos:end="35:14">*</modifier></type><name pos:start="35:15" pos:end="35:21">cpu_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:18"><decl pos:start="37:5" pos:end="37:17"><type pos:start="37:5" pos:end="37:14"><name pos:start="37:5" pos:end="37:12">qemu_irq</name> <modifier pos:start="37:14" pos:end="37:14">*</modifier></type><name pos:start="37:15" pos:end="37:17">gsi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:20"><decl pos:start="39:5" pos:end="39:19"><type pos:start="39:5" pos:end="39:14"><name pos:start="39:5" pos:end="39:12">qemu_irq</name> <modifier pos:start="39:14" pos:end="39:14">*</modifier></type><name pos:start="39:15" pos:end="39:19">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:22"><decl pos:start="41:5" pos:end="41:21"><type pos:start="41:5" pos:end="41:14"><name pos:start="41:5" pos:end="41:12">qemu_irq</name> <modifier pos:start="41:14" pos:end="41:14">*</modifier></type><name pos:start="41:15" pos:end="41:21">smi_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:24"><decl pos:start="43:5" pos:end="43:23"><type pos:start="43:5" pos:end="43:14"><name pos:start="43:5" pos:end="43:12">GSIState</name> <modifier pos:start="43:14" pos:end="43:14">*</modifier></type><name pos:start="43:15" pos:end="43:23">gsi_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:46"><decl pos:start="45:5" pos:end="45:45"><type pos:start="45:5" pos:end="45:15"><name pos:start="45:5" pos:end="45:13">DriveInfo</name> <modifier pos:start="45:15" pos:end="45:15">*</modifier></type><name pos:start="45:16" pos:end="45:45"><name pos:start="45:16" pos:end="45:17">hd</name><index pos:start="45:18" pos:end="45:45">[<expr pos:start="45:19" pos:end="45:44"><name pos:start="45:19" pos:end="45:29">MAX_IDE_BUS</name> <operator pos:start="45:31" pos:end="45:31">*</operator> <name pos:start="45:33" pos:end="45:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:34"><decl pos:start="47:5" pos:end="47:33"><type pos:start="47:5" pos:end="47:14"><name pos:start="47:5" pos:end="47:12">BusState</name> <modifier pos:start="47:14" pos:end="47:14">*</modifier></type><name pos:start="47:15" pos:end="47:33"><name pos:start="47:15" pos:end="47:20">idebus</name><index pos:start="47:21" pos:end="47:33">[<expr pos:start="47:22" pos:end="47:32"><name pos:start="47:22" pos:end="47:32">MAX_IDE_BUS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:25"><decl pos:start="49:5" pos:end="49:24"><type pos:start="49:5" pos:end="49:15"><name pos:start="49:5" pos:end="49:13">ISADevice</name> <modifier pos:start="49:15" pos:end="49:15">*</modifier></type><name pos:start="49:16" pos:end="49:24">rtc_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:22"><decl pos:start="51:5" pos:end="51:21"><type pos:start="51:5" pos:end="51:15"><name pos:start="51:5" pos:end="51:13">ISADevice</name> <modifier pos:start="51:15" pos:end="51:15">*</modifier></type><name pos:start="51:16" pos:end="51:21">floppy</name></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:29"><decl pos:start="53:5" pos:end="53:28"><type pos:start="53:5" pos:end="53:18"><name pos:start="53:5" pos:end="53:16">MemoryRegion</name> <modifier pos:start="53:18" pos:end="53:18">*</modifier></type><name pos:start="53:19" pos:end="53:28">ram_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:29"><decl pos:start="55:5" pos:end="55:28"><type pos:start="55:5" pos:end="55:18"><name pos:start="55:5" pos:end="55:16">MemoryRegion</name> <modifier pos:start="55:18" pos:end="55:18">*</modifier></type><name pos:start="55:19" pos:end="55:28">pci_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="57:5" pos:end="57:29"><decl pos:start="57:5" pos:end="57:28"><type pos:start="57:5" pos:end="57:18"><name pos:start="57:5" pos:end="57:16">MemoryRegion</name> <modifier pos:start="57:18" pos:end="57:18">*</modifier></type><name pos:start="57:19" pos:end="57:28">rom_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="59:5" pos:end="59:28"><decl pos:start="59:5" pos:end="59:27"><type pos:start="59:5" pos:end="59:17"><name pos:start="59:5" pos:end="59:15">DeviceState</name> <modifier pos:start="59:17" pos:end="59:17">*</modifier></type><name pos:start="59:18" pos:end="59:27">icc_bridge</name></decl>;</decl_stmt>

    <decl_stmt pos:start="61:5" pos:end="61:30"><decl pos:start="61:5" pos:end="61:29"><type pos:start="61:5" pos:end="61:16"><name pos:start="61:5" pos:end="61:14">FWCfgState</name> <modifier pos:start="61:16" pos:end="61:16">*</modifier></type><name pos:start="61:17" pos:end="61:22">fw_cfg</name> <init pos:start="61:24" pos:end="61:29">= <expr pos:start="61:26" pos:end="61:29"><name pos:start="61:26" pos:end="61:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="63:5" pos:end="63:28"><decl pos:start="63:5" pos:end="63:27"><type pos:start="63:5" pos:end="63:17"><name pos:start="63:5" pos:end="63:15">PcGuestInfo</name> <modifier pos:start="63:17" pos:end="63:17">*</modifier></type><name pos:start="63:18" pos:end="63:27">guest_info</name></decl>;</decl_stmt>



    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:45">(<expr pos:start="67:9" pos:end="67:44"><call pos:start="67:9" pos:end="67:21"><name pos:start="67:9" pos:end="67:19">xen_enabled</name><argument_list pos:start="67:20" pos:end="67:21">()</argument_list></call> <operator pos:start="67:23" pos:end="67:24">&amp;&amp;</operator> <call pos:start="67:26" pos:end="67:39"><name pos:start="67:26" pos:end="67:37">xen_hvm_init</name><argument_list pos:start="67:38" pos:end="67:39">()</argument_list></call> <operator pos:start="67:41" pos:end="67:42">!=</operator> <literal type="number" pos:start="67:44" pos:end="67:44">0</literal></expr>)</condition> <block pos:start="67:47" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:16">

        <expr_stmt pos:start="69:9" pos:end="69:80"><expr pos:start="69:9" pos:end="69:79"><call pos:start="69:9" pos:end="69:79"><name pos:start="69:9" pos:end="69:15">fprintf</name><argument_list pos:start="69:16" pos:end="69:79">(<argument pos:start="69:17" pos:end="69:22"><expr pos:start="69:17" pos:end="69:22"><name pos:start="69:17" pos:end="69:22">stderr</name></expr></argument>, <argument pos:start="69:25" pos:end="69:78"><expr pos:start="69:25" pos:end="69:78"><literal type="string" pos:start="69:25" pos:end="69:78">"xen hardware virtual machine initialisation failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:16"><expr pos:start="71:9" pos:end="71:15"><call pos:start="71:9" pos:end="71:15"><name pos:start="71:9" pos:end="71:12">exit</name><argument_list pos:start="71:13" pos:end="71:15">(<argument pos:start="71:14" pos:end="71:14"><expr pos:start="71:14" pos:end="71:14"><literal type="number" pos:start="71:14" pos:end="71:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:52"><expr pos:start="77:5" pos:end="77:51"><name pos:start="77:5" pos:end="77:14">icc_bridge</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <call pos:start="77:18" pos:end="77:51"><name pos:start="77:18" pos:end="77:28">qdev_create</name><argument_list pos:start="77:29" pos:end="77:51">(<argument pos:start="77:30" pos:end="77:33"><expr pos:start="77:30" pos:end="77:33"><name pos:start="77:30" pos:end="77:33">NULL</name></expr></argument>, <argument pos:start="77:36" pos:end="77:50"><expr pos:start="77:36" pos:end="77:50"><name pos:start="77:36" pos:end="77:50">TYPE_ICC_BRIDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="81:56"><expr pos:start="79:5" pos:end="81:55"><call pos:start="79:5" pos:end="81:55"><name pos:start="79:5" pos:end="79:29">object_property_add_child</name><argument_list pos:start="79:30" pos:end="81:55">(<argument pos:start="79:31" pos:end="79:48"><expr pos:start="79:31" pos:end="79:48"><call pos:start="79:31" pos:end="79:48"><name pos:start="79:31" pos:end="79:46">qdev_get_machine</name><argument_list pos:start="79:47" pos:end="79:48">()</argument_list></call></expr></argument>, <argument pos:start="79:51" pos:end="79:62"><expr pos:start="79:51" pos:end="79:62"><literal type="string" pos:start="79:51" pos:end="79:62">"icc-bridge"</literal></expr></argument>,

                              <argument pos:start="81:31" pos:end="81:48"><expr pos:start="81:31" pos:end="81:48"><call pos:start="81:31" pos:end="81:48"><name pos:start="81:31" pos:end="81:36">OBJECT</name><argument_list pos:start="81:37" pos:end="81:48">(<argument pos:start="81:38" pos:end="81:47"><expr pos:start="81:38" pos:end="81:47"><name pos:start="81:38" pos:end="81:47">icc_bridge</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="81:51" pos:end="81:54"><expr pos:start="81:51" pos:end="81:54"><name pos:start="81:51" pos:end="81:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:40"><expr pos:start="85:5" pos:end="85:39"><call pos:start="85:5" pos:end="85:39"><name pos:start="85:5" pos:end="85:16">pc_cpus_init</name><argument_list pos:start="85:17" pos:end="85:39">(<argument pos:start="85:18" pos:end="85:26"><expr pos:start="85:18" pos:end="85:26"><name pos:start="85:18" pos:end="85:26">cpu_model</name></expr></argument>, <argument pos:start="85:29" pos:end="85:38"><expr pos:start="85:29" pos:end="85:38"><name pos:start="85:29" pos:end="85:38">icc_bridge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:34"><expr pos:start="87:5" pos:end="87:33"><call pos:start="87:5" pos:end="87:33"><name pos:start="87:5" pos:end="87:16">pc_acpi_init</name><argument_list pos:start="87:17" pos:end="87:33">(<argument pos:start="87:18" pos:end="87:32"><expr pos:start="87:18" pos:end="87:32"><literal type="string" pos:start="87:18" pos:end="87:32">"acpi-dsdt.aml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="91:5" pos:end="95:5"><if pos:start="91:5" pos:end="95:5">if <condition pos:start="91:8" pos:end="91:42">(<expr pos:start="91:9" pos:end="91:41"><call pos:start="91:9" pos:end="91:21"><name pos:start="91:9" pos:end="91:19">kvm_enabled</name><argument_list pos:start="91:20" pos:end="91:21">()</argument_list></call> <operator pos:start="91:23" pos:end="91:24">&amp;&amp;</operator> <name pos:start="91:26" pos:end="91:41">kvmclock_enabled</name></expr>)</condition> <block pos:start="91:44" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:26">

        <expr_stmt pos:start="93:9" pos:end="93:26"><expr pos:start="93:9" pos:end="93:25"><call pos:start="93:9" pos:end="93:25"><name pos:start="93:9" pos:end="93:23">kvmclock_create</name><argument_list pos:start="93:24" pos:end="93:25">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="99:5" pos:end="111:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:32">(<expr pos:start="99:9" pos:end="99:30"><name pos:start="99:9" pos:end="99:16">ram_size</name> <operator pos:start="99:18" pos:end="99:19">&gt;=</operator> <literal type="number" pos:start="99:21" pos:end="99:30">0xe0000000</literal></expr> )</condition> <block pos:start="99:34" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:39">

        <expr_stmt pos:start="101:9" pos:end="101:50"><expr pos:start="101:9" pos:end="101:49"><name pos:start="101:9" pos:end="101:25">above_4g_mem_size</name> <operator pos:start="101:27" pos:end="101:27">=</operator> <name pos:start="101:29" pos:end="101:36">ram_size</name> <operator pos:start="101:38" pos:end="101:38">-</operator> <literal type="number" pos:start="101:40" pos:end="101:49">0xe0000000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:39"><expr pos:start="103:9" pos:end="103:38"><name pos:start="103:9" pos:end="103:25">below_4g_mem_size</name> <operator pos:start="103:27" pos:end="103:27">=</operator> <literal type="number" pos:start="103:29" pos:end="103:38">0xe0000000</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="105:7" pos:end="111:5">else <block pos:start="105:12" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:37">

        <expr_stmt pos:start="107:9" pos:end="107:30"><expr pos:start="107:9" pos:end="107:29"><name pos:start="107:9" pos:end="107:25">above_4g_mem_size</name> <operator pos:start="107:27" pos:end="107:27">=</operator> <literal type="number" pos:start="107:29" pos:end="107:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:37"><expr pos:start="109:9" pos:end="109:36"><name pos:start="109:9" pos:end="109:25">below_4g_mem_size</name> <operator pos:start="109:27" pos:end="109:27">=</operator> <name pos:start="109:29" pos:end="109:36">ram_size</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="115:5" pos:end="129:5"><if pos:start="115:5" pos:end="123:5">if <condition pos:start="115:8" pos:end="115:20">(<expr pos:start="115:9" pos:end="115:19"><name pos:start="115:9" pos:end="115:19">pci_enabled</name></expr>)</condition> <block pos:start="115:22" pos:end="123:5">{<block_content pos:start="117:9" pos:end="121:32">

        <expr_stmt pos:start="117:9" pos:end="117:44"><expr pos:start="117:9" pos:end="117:43"><name pos:start="117:9" pos:end="117:18">pci_memory</name> <operator pos:start="117:20" pos:end="117:20">=</operator> <call pos:start="117:22" pos:end="117:43"><name pos:start="117:22" pos:end="117:26">g_new</name><argument_list pos:start="117:27" pos:end="117:43">(<argument pos:start="117:28" pos:end="117:39"><expr pos:start="117:28" pos:end="117:39"><name pos:start="117:28" pos:end="117:39">MemoryRegion</name></expr></argument>, <argument pos:start="117:42" pos:end="117:42"><expr pos:start="117:42" pos:end="117:42"><literal type="number" pos:start="117:42" pos:end="117:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:63"><expr pos:start="119:9" pos:end="119:62"><call pos:start="119:9" pos:end="119:62"><name pos:start="119:9" pos:end="119:26">memory_region_init</name><argument_list pos:start="119:27" pos:end="119:62">(<argument pos:start="119:28" pos:end="119:37"><expr pos:start="119:28" pos:end="119:37"><name pos:start="119:28" pos:end="119:37">pci_memory</name></expr></argument>, <argument pos:start="119:40" pos:end="119:43"><expr pos:start="119:40" pos:end="119:43"><name pos:start="119:40" pos:end="119:43">NULL</name></expr></argument>, <argument pos:start="119:46" pos:end="119:50"><expr pos:start="119:46" pos:end="119:50"><literal type="string" pos:start="119:46" pos:end="119:50">"pci"</literal></expr></argument>, <argument pos:start="119:53" pos:end="119:61"><expr pos:start="119:53" pos:end="119:61"><name pos:start="119:53" pos:end="119:61">INT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:32"><expr pos:start="121:9" pos:end="121:31"><name pos:start="121:9" pos:end="121:18">rom_memory</name> <operator pos:start="121:20" pos:end="121:20">=</operator> <name pos:start="121:22" pos:end="121:31">pci_memory</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="123:7" pos:end="129:5">else <block pos:start="123:12" pos:end="129:5">{<block_content pos:start="125:9" pos:end="127:35">

        <expr_stmt pos:start="125:9" pos:end="125:26"><expr pos:start="125:9" pos:end="125:25"><name pos:start="125:9" pos:end="125:18">pci_memory</name> <operator pos:start="125:20" pos:end="125:20">=</operator> <name pos:start="125:22" pos:end="125:25">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:35"><expr pos:start="127:9" pos:end="127:34"><name pos:start="127:9" pos:end="127:18">rom_memory</name> <operator pos:start="127:20" pos:end="127:20">=</operator> <name pos:start="127:22" pos:end="127:34">system_memory</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:74"><expr pos:start="133:5" pos:end="133:73"><name pos:start="133:5" pos:end="133:14">guest_info</name> <operator pos:start="133:16" pos:end="133:16">=</operator> <call pos:start="133:18" pos:end="133:73"><name pos:start="133:18" pos:end="133:35">pc_guest_info_init</name><argument_list pos:start="133:36" pos:end="133:73">(<argument pos:start="133:37" pos:end="133:53"><expr pos:start="133:37" pos:end="133:53"><name pos:start="133:37" pos:end="133:53">below_4g_mem_size</name></expr></argument>, <argument pos:start="133:56" pos:end="133:72"><expr pos:start="133:56" pos:end="133:72"><name pos:start="133:56" pos:end="133:72">above_4g_mem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:44"><expr pos:start="135:5" pos:end="135:43"><name pos:start="135:5" pos:end="135:28"><name pos:start="135:5" pos:end="135:14">guest_info</name><operator pos:start="135:15" pos:end="135:16">-&gt;</operator><name pos:start="135:17" pos:end="135:28">has_pci_info</name></name> <operator pos:start="135:30" pos:end="135:30">=</operator> <name pos:start="135:32" pos:end="135:43">has_pci_info</name></expr>;</expr_stmt>



    <comment type="block" pos:start="139:5" pos:end="139:65">/* Set PCI window size the way seabios has always done it. */</comment>

    <comment type="block" pos:start="141:5" pos:end="141:60">/* Power of 2 so bios can cover it with a single MTRR */</comment>

    <if_stmt pos:start="143:5" pos:end="153:52"><if pos:start="143:5" pos:end="145:52">if <condition pos:start="143:8" pos:end="143:31">(<expr pos:start="143:9" pos:end="143:30"><name pos:start="143:9" pos:end="143:16">ram_size</name> <operator pos:start="143:18" pos:end="143:19">&lt;=</operator> <literal type="number" pos:start="143:21" pos:end="143:30">0x80000000</literal></expr>)</condition><block type="pseudo" pos:start="145:9" pos:end="145:52"><block_content pos:start="145:9" pos:end="145:52">

        <expr_stmt pos:start="145:9" pos:end="145:52"><expr pos:start="145:9" pos:end="145:51"><name pos:start="145:9" pos:end="145:38"><name pos:start="145:9" pos:end="145:18">guest_info</name><operator pos:start="145:19" pos:end="145:20">-&gt;</operator><name pos:start="145:21" pos:end="145:28">pci_info</name><operator pos:start="145:29" pos:end="145:29">.</operator><name pos:start="145:30" pos:end="145:32">w32</name><operator pos:start="145:33" pos:end="145:33">.</operator><name pos:start="145:34" pos:end="145:38">begin</name></name> <operator pos:start="145:40" pos:end="145:40">=</operator> <literal type="number" pos:start="145:42" pos:end="145:51">0x80000000</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="147:5" pos:end="149:52">else if <condition pos:start="147:13" pos:end="147:36">(<expr pos:start="147:14" pos:end="147:35"><name pos:start="147:14" pos:end="147:21">ram_size</name> <operator pos:start="147:23" pos:end="147:24">&lt;=</operator> <literal type="number" pos:start="147:26" pos:end="147:35">0xc0000000</literal></expr>)</condition><block type="pseudo" pos:start="149:9" pos:end="149:52"><block_content pos:start="149:9" pos:end="149:52">

        <expr_stmt pos:start="149:9" pos:end="149:52"><expr pos:start="149:9" pos:end="149:51"><name pos:start="149:9" pos:end="149:38"><name pos:start="149:9" pos:end="149:18">guest_info</name><operator pos:start="149:19" pos:end="149:20">-&gt;</operator><name pos:start="149:21" pos:end="149:28">pci_info</name><operator pos:start="149:29" pos:end="149:29">.</operator><name pos:start="149:30" pos:end="149:32">w32</name><operator pos:start="149:33" pos:end="149:33">.</operator><name pos:start="149:34" pos:end="149:38">begin</name></name> <operator pos:start="149:40" pos:end="149:40">=</operator> <literal type="number" pos:start="149:42" pos:end="149:51">0xc0000000</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="151:5" pos:end="153:52">else<block type="pseudo" pos:start="153:9" pos:end="153:52"><block_content pos:start="153:9" pos:end="153:52">

        <expr_stmt pos:start="153:9" pos:end="153:52"><expr pos:start="153:9" pos:end="153:51"><name pos:start="153:9" pos:end="153:38"><name pos:start="153:9" pos:end="153:18">guest_info</name><operator pos:start="153:19" pos:end="153:20">-&gt;</operator><name pos:start="153:21" pos:end="153:28">pci_info</name><operator pos:start="153:29" pos:end="153:29">.</operator><name pos:start="153:30" pos:end="153:32">w32</name><operator pos:start="153:33" pos:end="153:33">.</operator><name pos:start="153:34" pos:end="153:38">begin</name></name> <operator pos:start="153:40" pos:end="153:40">=</operator> <literal type="number" pos:start="153:42" pos:end="153:51">0xe0000000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <comment type="block" pos:start="157:5" pos:end="157:40">/* allocate ram and load rom/bios */</comment>

    <if_stmt pos:start="159:5" pos:end="169:5"><if pos:start="159:5" pos:end="169:5">if <condition pos:start="159:8" pos:end="159:23">(<expr pos:start="159:9" pos:end="159:22"><operator pos:start="159:9" pos:end="159:9">!</operator><call pos:start="159:10" pos:end="159:22"><name pos:start="159:10" pos:end="159:20">xen_enabled</name><argument_list pos:start="159:21" pos:end="159:22">()</argument_list></call></expr>)</condition> <block pos:start="159:25" pos:end="169:5">{<block_content pos:start="161:9" pos:end="167:60">

        <expr_stmt pos:start="161:9" pos:end="167:60"><expr pos:start="161:9" pos:end="167:59"><name pos:start="161:9" pos:end="161:14">fw_cfg</name> <operator pos:start="161:16" pos:end="161:16">=</operator> <call pos:start="161:18" pos:end="167:59"><name pos:start="161:18" pos:end="161:31">pc_memory_init</name><argument_list pos:start="161:32" pos:end="167:59">(<argument pos:start="161:33" pos:end="161:45"><expr pos:start="161:33" pos:end="161:45"><name pos:start="161:33" pos:end="161:45">system_memory</name></expr></argument>,

                       <argument pos:start="163:24" pos:end="163:38"><expr pos:start="163:24" pos:end="163:38"><name pos:start="163:24" pos:end="163:38">kernel_filename</name></expr></argument>, <argument pos:start="163:41" pos:end="163:54"><expr pos:start="163:41" pos:end="163:54"><name pos:start="163:41" pos:end="163:54">kernel_cmdline</name></expr></argument>, <argument pos:start="163:57" pos:end="163:71"><expr pos:start="163:57" pos:end="163:71"><name pos:start="163:57" pos:end="163:71">initrd_filename</name></expr></argument>,

                       <argument pos:start="165:24" pos:end="165:40"><expr pos:start="165:24" pos:end="165:40"><name pos:start="165:24" pos:end="165:40">below_4g_mem_size</name></expr></argument>, <argument pos:start="165:43" pos:end="165:59"><expr pos:start="165:43" pos:end="165:59"><name pos:start="165:43" pos:end="165:59">above_4g_mem_size</name></expr></argument>,

                       <argument pos:start="167:24" pos:end="167:33"><expr pos:start="167:24" pos:end="167:33"><name pos:start="167:24" pos:end="167:33">rom_memory</name></expr></argument>, <argument pos:start="167:36" pos:end="167:46"><expr pos:start="167:36" pos:end="167:46"><operator pos:start="167:36" pos:end="167:36">&amp;</operator><name pos:start="167:37" pos:end="167:46">ram_memory</name></expr></argument>, <argument pos:start="167:49" pos:end="167:58"><expr pos:start="167:49" pos:end="167:58"><name pos:start="167:49" pos:end="167:58">guest_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:46"><expr pos:start="173:5" pos:end="173:45"><name pos:start="173:5" pos:end="173:13">gsi_state</name> <operator pos:start="173:15" pos:end="173:15">=</operator> <call pos:start="173:17" pos:end="173:45"><name pos:start="173:17" pos:end="173:25">g_malloc0</name><argument_list pos:start="173:26" pos:end="173:45">(<argument pos:start="173:27" pos:end="173:44"><expr pos:start="173:27" pos:end="173:44"><sizeof pos:start="173:27" pos:end="173:44">sizeof<argument_list pos:start="173:33" pos:end="173:44">(<argument pos:start="173:34" pos:end="173:43"><expr pos:start="173:34" pos:end="173:43"><operator pos:start="173:34" pos:end="173:34">*</operator><name pos:start="173:35" pos:end="173:43">gsi_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="175:5" pos:end="187:5"><if pos:start="175:5" pos:end="183:5">if <condition pos:start="175:8" pos:end="175:32">(<expr pos:start="175:9" pos:end="175:31"><call pos:start="175:9" pos:end="175:31"><name pos:start="175:9" pos:end="175:29">kvm_irqchip_in_kernel</name><argument_list pos:start="175:30" pos:end="175:31">()</argument_list></call></expr>)</condition> <block pos:start="175:34" pos:end="183:5">{<block_content pos:start="177:9" pos:end="181:47">

        <expr_stmt pos:start="177:9" pos:end="177:46"><expr pos:start="177:9" pos:end="177:45"><call pos:start="177:9" pos:end="177:45"><name pos:start="177:9" pos:end="177:32">kvm_pc_setup_irq_routing</name><argument_list pos:start="177:33" pos:end="177:45">(<argument pos:start="177:34" pos:end="177:44"><expr pos:start="177:34" pos:end="177:44"><name pos:start="177:34" pos:end="177:44">pci_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="181:47"><expr pos:start="179:9" pos:end="181:46"><name pos:start="179:9" pos:end="179:11">gsi</name> <operator pos:start="179:13" pos:end="179:13">=</operator> <call pos:start="179:15" pos:end="181:46"><name pos:start="179:15" pos:end="179:32">qemu_allocate_irqs</name><argument_list pos:start="179:33" pos:end="181:46">(<argument pos:start="179:34" pos:end="179:51"><expr pos:start="179:34" pos:end="179:51"><name pos:start="179:34" pos:end="179:51">kvm_pc_gsi_handler</name></expr></argument>, <argument pos:start="179:54" pos:end="179:62"><expr pos:start="179:54" pos:end="179:62"><name pos:start="179:54" pos:end="179:62">gsi_state</name></expr></argument>,

                                 <argument pos:start="181:34" pos:end="181:45"><expr pos:start="181:34" pos:end="181:45"><name pos:start="181:34" pos:end="181:45">GSI_NUM_PINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="183:7" pos:end="187:5">else <block pos:start="183:12" pos:end="187:5">{<block_content pos:start="185:9" pos:end="185:71">

        <expr_stmt pos:start="185:9" pos:end="185:71"><expr pos:start="185:9" pos:end="185:70"><name pos:start="185:9" pos:end="185:11">gsi</name> <operator pos:start="185:13" pos:end="185:13">=</operator> <call pos:start="185:15" pos:end="185:70"><name pos:start="185:15" pos:end="185:32">qemu_allocate_irqs</name><argument_list pos:start="185:33" pos:end="185:70">(<argument pos:start="185:34" pos:end="185:44"><expr pos:start="185:34" pos:end="185:44"><name pos:start="185:34" pos:end="185:44">gsi_handler</name></expr></argument>, <argument pos:start="185:47" pos:end="185:55"><expr pos:start="185:47" pos:end="185:55"><name pos:start="185:47" pos:end="185:55">gsi_state</name></expr></argument>, <argument pos:start="185:58" pos:end="185:69"><expr pos:start="185:58" pos:end="185:69"><name pos:start="185:58" pos:end="185:69">GSI_NUM_PINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="191:5" pos:end="221:5"><if pos:start="191:5" pos:end="211:5">if <condition pos:start="191:8" pos:end="191:20">(<expr pos:start="191:9" pos:end="191:19"><name pos:start="191:9" pos:end="191:19">pci_enabled</name></expr>)</condition> <block pos:start="191:22" pos:end="211:5">{<block_content pos:start="193:9" pos:end="209:54">

        <expr_stmt pos:start="193:9" pos:end="209:54"><expr pos:start="193:9" pos:end="209:53"><name pos:start="193:9" pos:end="193:15">pci_bus</name> <operator pos:start="193:17" pos:end="193:17">=</operator> <call pos:start="193:19" pos:end="209:53"><name pos:start="193:19" pos:end="193:29">i440fx_init</name><argument_list pos:start="193:30" pos:end="209:53">(<argument pos:start="193:31" pos:end="193:43"><expr pos:start="193:31" pos:end="193:43"><operator pos:start="193:31" pos:end="193:31">&amp;</operator><name pos:start="193:32" pos:end="193:43">i440fx_state</name></expr></argument>, <argument pos:start="193:46" pos:end="193:57"><expr pos:start="193:46" pos:end="193:57"><operator pos:start="193:46" pos:end="193:46">&amp;</operator><name pos:start="193:47" pos:end="193:57">piix3_devfn</name></expr></argument>, <argument pos:start="193:60" pos:end="193:67"><expr pos:start="193:60" pos:end="193:67"><operator pos:start="193:60" pos:end="193:60">&amp;</operator><name pos:start="193:61" pos:end="193:67">isa_bus</name></expr></argument>, <argument pos:start="193:70" pos:end="193:72"><expr pos:start="193:70" pos:end="193:72"><name pos:start="193:70" pos:end="193:72">gsi</name></expr></argument>,

                              <argument pos:start="195:31" pos:end="195:43"><expr pos:start="195:31" pos:end="195:43"><name pos:start="195:31" pos:end="195:43">system_memory</name></expr></argument>, <argument pos:start="195:46" pos:end="195:54"><expr pos:start="195:46" pos:end="195:54"><name pos:start="195:46" pos:end="195:54">system_io</name></expr></argument>, <argument pos:start="195:57" pos:end="195:64"><expr pos:start="195:57" pos:end="195:64"><name pos:start="195:57" pos:end="195:64">ram_size</name></expr></argument>,

                              <argument pos:start="197:31" pos:end="197:47"><expr pos:start="197:31" pos:end="197:47"><name pos:start="197:31" pos:end="197:47">below_4g_mem_size</name></expr></argument>,

                              <argument pos:start="199:31" pos:end="199:64"><expr pos:start="199:31" pos:end="199:64"><literal type="number" pos:start="199:31" pos:end="199:46">0x100000000ULL</literal> <operator pos:start="199:46" pos:end="199:46">-</operator> <name pos:start="199:48" pos:end="199:64">below_4g_mem_size</name></expr></argument>,

                              <argument pos:start="201:31" pos:end="201:64"><expr pos:start="201:31" pos:end="201:64"><literal type="number" pos:start="201:31" pos:end="201:46">0x100000000ULL</literal> <operator pos:start="201:46" pos:end="201:46">+</operator> <name pos:start="201:48" pos:end="201:64">above_4g_mem_size</name></expr></argument>,

                              <argument pos:start="203:31" pos:end="207:53"><expr pos:start="203:31" pos:end="207:53"><operator pos:start="203:31" pos:end="203:31">(</operator><ternary pos:start="203:32" pos:end="207:52"><condition pos:start="203:32" pos:end="205:32"><expr pos:start="203:32" pos:end="203:50"><sizeof pos:start="203:32" pos:end="203:45">sizeof<argument_list pos:start="203:38" pos:end="203:45">(<argument pos:start="203:39" pos:end="203:44"><expr pos:start="203:39" pos:end="203:44"><name pos:start="203:39" pos:end="203:44">hwaddr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="203:47" pos:end="203:48">==</operator> <literal type="number" pos:start="203:50" pos:end="203:50">4</literal></expr>

                               ?</condition><then pos:start="205:34" pos:end="205:34"> <expr pos:start="205:34" pos:end="205:34"><literal type="number" pos:start="205:34" pos:end="205:34">0</literal></expr>

                               </then><else pos:start="207:32" pos:end="207:52">: <expr pos:start="207:34" pos:end="207:52"><operator pos:start="207:34" pos:end="207:34">(</operator><operator pos:start="207:35" pos:end="207:35">(</operator><name pos:start="207:36" pos:end="207:43">uint64_t</name><operator pos:start="207:44" pos:end="207:44">)</operator><literal type="number" pos:start="207:45" pos:end="207:45">1</literal> <operator pos:start="207:47" pos:end="207:48">&lt;&lt;</operator> <literal type="number" pos:start="207:50" pos:end="207:51">62</literal><operator pos:start="207:52" pos:end="207:52">)</operator></expr></else></ternary><operator pos:start="207:53" pos:end="207:53">)</operator></expr></argument>,

                              <argument pos:start="209:31" pos:end="209:40"><expr pos:start="209:31" pos:end="209:40"><name pos:start="209:31" pos:end="209:40">pci_memory</name></expr></argument>, <argument pos:start="209:43" pos:end="209:52"><expr pos:start="209:43" pos:end="209:52"><name pos:start="209:43" pos:end="209:52">ram_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="211:7" pos:end="221:5">else <block pos:start="211:12" pos:end="221:5">{<block_content pos:start="213:9" pos:end="219:20">

        <expr_stmt pos:start="213:9" pos:end="213:23"><expr pos:start="213:9" pos:end="213:22"><name pos:start="213:9" pos:end="213:15">pci_bus</name> <operator pos:start="213:17" pos:end="213:17">=</operator> <name pos:start="213:19" pos:end="213:22">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:28"><expr pos:start="215:9" pos:end="215:27"><name pos:start="215:9" pos:end="215:20">i440fx_state</name> <operator pos:start="215:22" pos:end="215:22">=</operator> <name pos:start="215:24" pos:end="215:27">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:47"><expr pos:start="217:9" pos:end="217:46"><name pos:start="217:9" pos:end="217:15">isa_bus</name> <operator pos:start="217:17" pos:end="217:17">=</operator> <call pos:start="217:19" pos:end="217:46"><name pos:start="217:19" pos:end="217:29">isa_bus_new</name><argument_list pos:start="217:30" pos:end="217:46">(<argument pos:start="217:31" pos:end="217:34"><expr pos:start="217:31" pos:end="217:34"><name pos:start="217:31" pos:end="217:34">NULL</name></expr></argument>, <argument pos:start="217:37" pos:end="217:45"><expr pos:start="217:37" pos:end="217:45"><name pos:start="217:37" pos:end="217:45">system_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:20"><expr pos:start="219:9" pos:end="219:19"><name pos:start="219:9" pos:end="219:15">no_hpet</name> <operator pos:start="219:17" pos:end="219:17">=</operator> <literal type="number" pos:start="219:19" pos:end="219:19">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:31"><expr pos:start="223:5" pos:end="223:30"><call pos:start="223:5" pos:end="223:30"><name pos:start="223:5" pos:end="223:16">isa_bus_irqs</name><argument_list pos:start="223:17" pos:end="223:30">(<argument pos:start="223:18" pos:end="223:24"><expr pos:start="223:18" pos:end="223:24"><name pos:start="223:18" pos:end="223:24">isa_bus</name></expr></argument>, <argument pos:start="223:27" pos:end="223:29"><expr pos:start="223:27" pos:end="223:29"><name pos:start="223:27" pos:end="223:29">gsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="227:5" pos:end="241:5"><if pos:start="227:5" pos:end="231:5">if <condition pos:start="227:8" pos:end="227:32">(<expr pos:start="227:9" pos:end="227:31"><call pos:start="227:9" pos:end="227:31"><name pos:start="227:9" pos:end="227:29">kvm_irqchip_in_kernel</name><argument_list pos:start="227:30" pos:end="227:31">()</argument_list></call></expr>)</condition> <block pos:start="227:34" pos:end="231:5">{<block_content pos:start="229:9" pos:end="229:40">

        <expr_stmt pos:start="229:9" pos:end="229:40"><expr pos:start="229:9" pos:end="229:39"><name pos:start="229:9" pos:end="229:13">i8259</name> <operator pos:start="229:15" pos:end="229:15">=</operator> <call pos:start="229:17" pos:end="229:39"><name pos:start="229:17" pos:end="229:30">kvm_i8259_init</name><argument_list pos:start="229:31" pos:end="229:39">(<argument pos:start="229:32" pos:end="229:38"><expr pos:start="229:32" pos:end="229:38"><name pos:start="229:32" pos:end="229:38">isa_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="231:7" pos:end="235:5">else if <condition pos:start="231:15" pos:end="231:29">(<expr pos:start="231:16" pos:end="231:28"><call pos:start="231:16" pos:end="231:28"><name pos:start="231:16" pos:end="231:26">xen_enabled</name><argument_list pos:start="231:27" pos:end="231:28">()</argument_list></call></expr>)</condition> <block pos:start="231:31" pos:end="235:5">{<block_content pos:start="233:9" pos:end="233:48">

        <expr_stmt pos:start="233:9" pos:end="233:48"><expr pos:start="233:9" pos:end="233:47"><name pos:start="233:9" pos:end="233:13">i8259</name> <operator pos:start="233:15" pos:end="233:15">=</operator> <call pos:start="233:17" pos:end="233:47"><name pos:start="233:17" pos:end="233:45">xen_interrupt_controller_init</name><argument_list pos:start="233:46" pos:end="233:47">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="235:7" pos:end="241:5">else <block pos:start="235:12" pos:end="241:5">{<block_content pos:start="237:9" pos:end="239:48">

        <expr_stmt pos:start="237:9" pos:end="237:40"><expr pos:start="237:9" pos:end="237:39"><name pos:start="237:9" pos:end="237:15">cpu_irq</name> <operator pos:start="237:17" pos:end="237:17">=</operator> <call pos:start="237:19" pos:end="237:39"><name pos:start="237:19" pos:end="237:37">pc_allocate_cpu_irq</name><argument_list pos:start="237:38" pos:end="237:39">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:48"><expr pos:start="239:9" pos:end="239:47"><name pos:start="239:9" pos:end="239:13">i8259</name> <operator pos:start="239:15" pos:end="239:15">=</operator> <call pos:start="239:17" pos:end="239:47"><name pos:start="239:17" pos:end="239:26">i8259_init</name><argument_list pos:start="239:27" pos:end="239:47">(<argument pos:start="239:28" pos:end="239:34"><expr pos:start="239:28" pos:end="239:34"><name pos:start="239:28" pos:end="239:34">isa_bus</name></expr></argument>, <argument pos:start="239:37" pos:end="239:46"><expr pos:start="239:37" pos:end="239:46"><name pos:start="239:37" pos:end="239:46"><name pos:start="239:37" pos:end="239:43">cpu_irq</name><index pos:start="239:44" pos:end="239:46">[<expr pos:start="239:45" pos:end="239:45"><literal type="number" pos:start="239:45" pos:end="239:45">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <for pos:start="245:5" pos:end="249:5">for <control pos:start="245:9" pos:end="245:38">(<init pos:start="245:10" pos:end="245:15"><expr pos:start="245:10" pos:end="245:14"><name pos:start="245:10" pos:end="245:10">i</name> <operator pos:start="245:12" pos:end="245:12">=</operator> <literal type="number" pos:start="245:14" pos:end="245:14">0</literal></expr>;</init> <condition pos:start="245:17" pos:end="245:33"><expr pos:start="245:17" pos:end="245:32"><name pos:start="245:17" pos:end="245:17">i</name> <operator pos:start="245:19" pos:end="245:19">&lt;</operator> <name pos:start="245:21" pos:end="245:32">ISA_NUM_IRQS</name></expr>;</condition> <incr pos:start="245:35" pos:end="245:37"><expr pos:start="245:35" pos:end="245:37"><name pos:start="245:35" pos:end="245:35">i</name><operator pos:start="245:36" pos:end="245:37">++</operator></expr></incr>)</control> <block pos:start="245:40" pos:end="249:5">{<block_content pos:start="247:9" pos:end="247:43">

        <expr_stmt pos:start="247:9" pos:end="247:43"><expr pos:start="247:9" pos:end="247:42"><name pos:start="247:9" pos:end="247:31"><name pos:start="247:9" pos:end="247:17">gsi_state</name><operator pos:start="247:18" pos:end="247:19">-&gt;</operator><name pos:start="247:20" pos:end="247:28">i8259_irq</name><index pos:start="247:29" pos:end="247:31">[<expr pos:start="247:30" pos:end="247:30"><name pos:start="247:30" pos:end="247:30">i</name></expr>]</index></name> <operator pos:start="247:33" pos:end="247:33">=</operator> <name pos:start="247:35" pos:end="247:42"><name pos:start="247:35" pos:end="247:39">i8259</name><index pos:start="247:40" pos:end="247:42">[<expr pos:start="247:41" pos:end="247:41"><name pos:start="247:41" pos:end="247:41">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="251:5" pos:end="255:5"><if pos:start="251:5" pos:end="255:5">if <condition pos:start="251:8" pos:end="251:20">(<expr pos:start="251:9" pos:end="251:19"><name pos:start="251:9" pos:end="251:19">pci_enabled</name></expr>)</condition> <block pos:start="251:22" pos:end="255:5">{<block_content pos:start="253:9" pos:end="253:45">

        <expr_stmt pos:start="253:9" pos:end="253:45"><expr pos:start="253:9" pos:end="253:44"><call pos:start="253:9" pos:end="253:44"><name pos:start="253:9" pos:end="253:23">ioapic_init_gsi</name><argument_list pos:start="253:24" pos:end="253:44">(<argument pos:start="253:25" pos:end="253:33"><expr pos:start="253:25" pos:end="253:33"><name pos:start="253:25" pos:end="253:33">gsi_state</name></expr></argument>, <argument pos:start="253:36" pos:end="253:43"><expr pos:start="253:36" pos:end="253:43"><literal type="string" pos:start="253:36" pos:end="253:43">"i440fx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:33"><expr pos:start="257:5" pos:end="257:32"><call pos:start="257:5" pos:end="257:32"><name pos:start="257:5" pos:end="257:20">qdev_init_nofail</name><argument_list pos:start="257:21" pos:end="257:32">(<argument pos:start="257:22" pos:end="257:31"><expr pos:start="257:22" pos:end="257:31"><name pos:start="257:22" pos:end="257:31">icc_bridge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="261:5" pos:end="261:34"><expr pos:start="261:5" pos:end="261:33"><call pos:start="261:5" pos:end="261:33"><name pos:start="261:5" pos:end="261:24">pc_register_ferr_irq</name><argument_list pos:start="261:25" pos:end="261:33">(<argument pos:start="261:26" pos:end="261:32"><expr pos:start="261:26" pos:end="261:32"><name pos:start="261:26" pos:end="261:32"><name pos:start="261:26" pos:end="261:28">gsi</name><index pos:start="261:29" pos:end="261:32">[<expr pos:start="261:30" pos:end="261:31"><literal type="number" pos:start="261:30" pos:end="261:31">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="265:5" pos:end="265:55"><expr pos:start="265:5" pos:end="265:54"><call pos:start="265:5" pos:end="265:54"><name pos:start="265:5" pos:end="265:15">pc_vga_init</name><argument_list pos:start="265:16" pos:end="265:54">(<argument pos:start="265:17" pos:end="265:23"><expr pos:start="265:17" pos:end="265:23"><name pos:start="265:17" pos:end="265:23">isa_bus</name></expr></argument>, <argument pos:start="265:26" pos:end="265:53"><expr pos:start="265:26" pos:end="265:53"><ternary pos:start="265:26" pos:end="265:53"><condition pos:start="265:26" pos:end="265:38"><expr pos:start="265:26" pos:end="265:36"><name pos:start="265:26" pos:end="265:36">pci_enabled</name></expr> ?</condition><then pos:start="265:40" pos:end="265:46"> <expr pos:start="265:40" pos:end="265:46"><name pos:start="265:40" pos:end="265:46">pci_bus</name></expr> </then><else pos:start="265:48" pos:end="265:53">: <expr pos:start="265:50" pos:end="265:53"><name pos:start="265:50" pos:end="265:53">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="269:5" pos:end="269:32">/* init basic PC hardware */</comment>

    <expr_stmt pos:start="271:5" pos:end="271:75"><expr pos:start="271:5" pos:end="271:74"><call pos:start="271:5" pos:end="271:74"><name pos:start="271:5" pos:end="271:24">pc_basic_device_init</name><argument_list pos:start="271:25" pos:end="271:74">(<argument pos:start="271:26" pos:end="271:32"><expr pos:start="271:26" pos:end="271:32"><name pos:start="271:26" pos:end="271:32">isa_bus</name></expr></argument>, <argument pos:start="271:35" pos:end="271:37"><expr pos:start="271:35" pos:end="271:37"><name pos:start="271:35" pos:end="271:37">gsi</name></expr></argument>, <argument pos:start="271:40" pos:end="271:49"><expr pos:start="271:40" pos:end="271:49"><operator pos:start="271:40" pos:end="271:40">&amp;</operator><name pos:start="271:41" pos:end="271:49">rtc_state</name></expr></argument>, <argument pos:start="271:52" pos:end="271:58"><expr pos:start="271:52" pos:end="271:58"><operator pos:start="271:52" pos:end="271:52">&amp;</operator><name pos:start="271:53" pos:end="271:58">floppy</name></expr></argument>, <argument pos:start="271:61" pos:end="271:73"><expr pos:start="271:61" pos:end="271:73"><call pos:start="271:61" pos:end="271:73"><name pos:start="271:61" pos:end="271:71">xen_enabled</name><argument_list pos:start="271:72" pos:end="271:73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="275:5" pos:end="275:34"><expr pos:start="275:5" pos:end="275:33"><call pos:start="275:5" pos:end="275:33"><name pos:start="275:5" pos:end="275:15">pc_nic_init</name><argument_list pos:start="275:16" pos:end="275:33">(<argument pos:start="275:17" pos:end="275:23"><expr pos:start="275:17" pos:end="275:23"><name pos:start="275:17" pos:end="275:23">isa_bus</name></expr></argument>, <argument pos:start="275:26" pos:end="275:32"><expr pos:start="275:26" pos:end="275:32"><name pos:start="275:26" pos:end="275:32">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="279:5" pos:end="279:35"><expr pos:start="279:5" pos:end="279:34"><call pos:start="279:5" pos:end="279:34"><name pos:start="279:5" pos:end="279:17">ide_drive_get</name><argument_list pos:start="279:18" pos:end="279:34">(<argument pos:start="279:19" pos:end="279:20"><expr pos:start="279:19" pos:end="279:20"><name pos:start="279:19" pos:end="279:20">hd</name></expr></argument>, <argument pos:start="279:23" pos:end="279:33"><expr pos:start="279:23" pos:end="279:33"><name pos:start="279:23" pos:end="279:33">MAX_IDE_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="281:5" pos:end="315:5"><if pos:start="281:5" pos:end="299:5">if <condition pos:start="281:8" pos:end="281:20">(<expr pos:start="281:9" pos:end="281:19"><name pos:start="281:9" pos:end="281:19">pci_enabled</name></expr>)</condition> <block pos:start="281:22" pos:end="299:5">{<block_content pos:start="283:9" pos:end="297:60">

        <decl_stmt pos:start="283:9" pos:end="283:23"><decl pos:start="283:9" pos:end="283:22"><type pos:start="283:9" pos:end="283:19"><name pos:start="283:9" pos:end="283:17">PCIDevice</name> <modifier pos:start="283:19" pos:end="283:19">*</modifier></type><name pos:start="283:20" pos:end="283:22">dev</name></decl>;</decl_stmt>

        <if_stmt pos:start="285:9" pos:end="293:9"><if pos:start="285:9" pos:end="289:9">if <condition pos:start="285:12" pos:end="285:26">(<expr pos:start="285:13" pos:end="285:25"><call pos:start="285:13" pos:end="285:25"><name pos:start="285:13" pos:end="285:23">xen_enabled</name><argument_list pos:start="285:24" pos:end="285:25">()</argument_list></call></expr>)</condition> <block pos:start="285:28" pos:end="289:9">{<block_content pos:start="287:13" pos:end="287:71">

            <expr_stmt pos:start="287:13" pos:end="287:71"><expr pos:start="287:13" pos:end="287:70"><name pos:start="287:13" pos:end="287:15">dev</name> <operator pos:start="287:17" pos:end="287:17">=</operator> <call pos:start="287:19" pos:end="287:70"><name pos:start="287:19" pos:end="287:40">pci_piix3_xen_ide_init</name><argument_list pos:start="287:41" pos:end="287:70">(<argument pos:start="287:42" pos:end="287:48"><expr pos:start="287:42" pos:end="287:48"><name pos:start="287:42" pos:end="287:48">pci_bus</name></expr></argument>, <argument pos:start="287:51" pos:end="287:52"><expr pos:start="287:51" pos:end="287:52"><name pos:start="287:51" pos:end="287:52">hd</name></expr></argument>, <argument pos:start="287:55" pos:end="287:69"><expr pos:start="287:55" pos:end="287:69"><name pos:start="287:55" pos:end="287:65">piix3_devfn</name> <operator pos:start="287:67" pos:end="287:67">+</operator> <literal type="number" pos:start="287:69" pos:end="287:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="289:11" pos:end="293:9">else <block pos:start="289:16" pos:end="293:9">{<block_content pos:start="291:13" pos:end="291:67">

            <expr_stmt pos:start="291:13" pos:end="291:67"><expr pos:start="291:13" pos:end="291:66"><name pos:start="291:13" pos:end="291:15">dev</name> <operator pos:start="291:17" pos:end="291:17">=</operator> <call pos:start="291:19" pos:end="291:66"><name pos:start="291:19" pos:end="291:36">pci_piix3_ide_init</name><argument_list pos:start="291:37" pos:end="291:66">(<argument pos:start="291:38" pos:end="291:44"><expr pos:start="291:38" pos:end="291:44"><name pos:start="291:38" pos:end="291:44">pci_bus</name></expr></argument>, <argument pos:start="291:47" pos:end="291:48"><expr pos:start="291:47" pos:end="291:48"><name pos:start="291:47" pos:end="291:48">hd</name></expr></argument>, <argument pos:start="291:51" pos:end="291:65"><expr pos:start="291:51" pos:end="291:65"><name pos:start="291:51" pos:end="291:61">piix3_devfn</name> <operator pos:start="291:63" pos:end="291:63">+</operator> <literal type="number" pos:start="291:65" pos:end="291:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="295:9" pos:end="295:60"><expr pos:start="295:9" pos:end="295:59"><name pos:start="295:9" pos:end="295:17"><name pos:start="295:9" pos:end="295:14">idebus</name><index pos:start="295:15" pos:end="295:17">[<expr pos:start="295:16" pos:end="295:16"><literal type="number" pos:start="295:16" pos:end="295:16">0</literal></expr>]</index></name> <operator pos:start="295:19" pos:end="295:19">=</operator> <call pos:start="295:21" pos:end="295:59"><name pos:start="295:21" pos:end="295:38">qdev_get_child_bus</name><argument_list pos:start="295:39" pos:end="295:59">(<argument pos:start="295:40" pos:end="295:49"><expr pos:start="295:40" pos:end="295:49"><operator pos:start="295:40" pos:end="295:40">&amp;</operator><name pos:start="295:41" pos:end="295:49"><name pos:start="295:41" pos:end="295:43">dev</name><operator pos:start="295:44" pos:end="295:45">-&gt;</operator><name pos:start="295:46" pos:end="295:49">qdev</name></name></expr></argument>, <argument pos:start="295:52" pos:end="295:58"><expr pos:start="295:52" pos:end="295:58"><literal type="string" pos:start="295:52" pos:end="295:58">"ide.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="297:9" pos:end="297:60"><expr pos:start="297:9" pos:end="297:59"><name pos:start="297:9" pos:end="297:17"><name pos:start="297:9" pos:end="297:14">idebus</name><index pos:start="297:15" pos:end="297:17">[<expr pos:start="297:16" pos:end="297:16"><literal type="number" pos:start="297:16" pos:end="297:16">1</literal></expr>]</index></name> <operator pos:start="297:19" pos:end="297:19">=</operator> <call pos:start="297:21" pos:end="297:59"><name pos:start="297:21" pos:end="297:38">qdev_get_child_bus</name><argument_list pos:start="297:39" pos:end="297:59">(<argument pos:start="297:40" pos:end="297:49"><expr pos:start="297:40" pos:end="297:49"><operator pos:start="297:40" pos:end="297:40">&amp;</operator><name pos:start="297:41" pos:end="297:49"><name pos:start="297:41" pos:end="297:43">dev</name><operator pos:start="297:44" pos:end="297:45">-&gt;</operator><name pos:start="297:46" pos:end="297:49">qdev</name></name></expr></argument>, <argument pos:start="297:52" pos:end="297:58"><expr pos:start="297:52" pos:end="297:58"><literal type="string" pos:start="297:52" pos:end="297:58">"ide.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="299:7" pos:end="315:5">else <block pos:start="299:12" pos:end="315:5">{<block_content pos:start="301:9" pos:end="313:9">

        <for pos:start="301:9" pos:end="313:9">for<control pos:start="301:12" pos:end="301:40">(<init pos:start="301:13" pos:end="301:18"><expr pos:start="301:13" pos:end="301:17"><name pos:start="301:13" pos:end="301:13">i</name> <operator pos:start="301:15" pos:end="301:15">=</operator> <literal type="number" pos:start="301:17" pos:end="301:17">0</literal></expr>;</init> <condition pos:start="301:20" pos:end="301:35"><expr pos:start="301:20" pos:end="301:34"><name pos:start="301:20" pos:end="301:20">i</name> <operator pos:start="301:22" pos:end="301:22">&lt;</operator> <name pos:start="301:24" pos:end="301:34">MAX_IDE_BUS</name></expr>;</condition> <incr pos:start="301:37" pos:end="301:39"><expr pos:start="301:37" pos:end="301:39"><name pos:start="301:37" pos:end="301:37">i</name><operator pos:start="301:38" pos:end="301:39">++</operator></expr></incr>)</control> <block pos:start="301:42" pos:end="313:9">{<block_content pos:start="303:13" pos:end="311:65">

            <decl_stmt pos:start="303:13" pos:end="303:27"><decl pos:start="303:13" pos:end="303:26"><type pos:start="303:13" pos:end="303:23"><name pos:start="303:13" pos:end="303:21">ISADevice</name> <modifier pos:start="303:23" pos:end="303:23">*</modifier></type><name pos:start="303:24" pos:end="303:26">dev</name></decl>;</decl_stmt>

            <expr_stmt pos:start="305:13" pos:end="309:79"><expr pos:start="305:13" pos:end="309:78"><name pos:start="305:13" pos:end="305:15">dev</name> <operator pos:start="305:17" pos:end="305:17">=</operator> <call pos:start="305:19" pos:end="309:78"><name pos:start="305:19" pos:end="305:30">isa_ide_init</name><argument_list pos:start="305:31" pos:end="309:78">(<argument pos:start="305:32" pos:end="305:38"><expr pos:start="305:32" pos:end="305:38"><name pos:start="305:32" pos:end="305:38">isa_bus</name></expr></argument>, <argument pos:start="305:41" pos:end="305:53"><expr pos:start="305:41" pos:end="305:53"><name pos:start="305:41" pos:end="305:53"><name pos:start="305:41" pos:end="305:50">ide_iobase</name><index pos:start="305:51" pos:end="305:53">[<expr pos:start="305:52" pos:end="305:52"><name pos:start="305:52" pos:end="305:52">i</name></expr>]</index></name></expr></argument>, <argument pos:start="305:56" pos:end="305:69"><expr pos:start="305:56" pos:end="305:69"><name pos:start="305:56" pos:end="305:69"><name pos:start="305:56" pos:end="305:66">ide_iobase2</name><index pos:start="305:67" pos:end="305:69">[<expr pos:start="305:68" pos:end="305:68"><name pos:start="305:68" pos:end="305:68">i</name></expr>]</index></name></expr></argument>,

                               <argument pos:start="307:32" pos:end="307:41"><expr pos:start="307:32" pos:end="307:41"><name pos:start="307:32" pos:end="307:41"><name pos:start="307:32" pos:end="307:38">ide_irq</name><index pos:start="307:39" pos:end="307:41">[<expr pos:start="307:40" pos:end="307:40"><name pos:start="307:40" pos:end="307:40">i</name></expr>]</index></name></expr></argument>,

                               <argument pos:start="309:32" pos:end="309:51"><expr pos:start="309:32" pos:end="309:51"><name pos:start="309:32" pos:end="309:51"><name pos:start="309:32" pos:end="309:33">hd</name><index pos:start="309:34" pos:end="309:51">[<expr pos:start="309:35" pos:end="309:50"><name pos:start="309:35" pos:end="309:46">MAX_IDE_DEVS</name> <operator pos:start="309:48" pos:end="309:48">*</operator> <name pos:start="309:50" pos:end="309:50">i</name></expr>]</index></name></expr></argument>, <argument pos:start="309:54" pos:end="309:77"><expr pos:start="309:54" pos:end="309:77"><name pos:start="309:54" pos:end="309:77"><name pos:start="309:54" pos:end="309:55">hd</name><index pos:start="309:56" pos:end="309:77">[<expr pos:start="309:57" pos:end="309:76"><name pos:start="309:57" pos:end="309:68">MAX_IDE_DEVS</name> <operator pos:start="309:70" pos:end="309:70">*</operator> <name pos:start="309:72" pos:end="309:72">i</name> <operator pos:start="309:74" pos:end="309:74">+</operator> <literal type="number" pos:start="309:76" pos:end="309:76">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="311:13" pos:end="311:65"><expr pos:start="311:13" pos:end="311:64"><name pos:start="311:13" pos:end="311:21"><name pos:start="311:13" pos:end="311:18">idebus</name><index pos:start="311:19" pos:end="311:21">[<expr pos:start="311:20" pos:end="311:20"><name pos:start="311:20" pos:end="311:20">i</name></expr>]</index></name> <operator pos:start="311:23" pos:end="311:23">=</operator> <call pos:start="311:25" pos:end="311:64"><name pos:start="311:25" pos:end="311:42">qdev_get_child_bus</name><argument_list pos:start="311:43" pos:end="311:64">(<argument pos:start="311:44" pos:end="311:54"><expr pos:start="311:44" pos:end="311:54"><call pos:start="311:44" pos:end="311:54"><name pos:start="311:44" pos:end="311:49">DEVICE</name><argument_list pos:start="311:50" pos:end="311:54">(<argument pos:start="311:51" pos:end="311:53"><expr pos:start="311:51" pos:end="311:53"><name pos:start="311:51" pos:end="311:53">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="311:57" pos:end="311:63"><expr pos:start="311:57" pos:end="311:63"><literal type="string" pos:start="311:57" pos:end="311:63">"ide.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="319:5" pos:end="321:58"><expr pos:start="319:5" pos:end="321:57"><call pos:start="319:5" pos:end="321:57"><name pos:start="319:5" pos:end="319:16">pc_cmos_init</name><argument_list pos:start="319:17" pos:end="321:57">(<argument pos:start="319:18" pos:end="319:34"><expr pos:start="319:18" pos:end="319:34"><name pos:start="319:18" pos:end="319:34">below_4g_mem_size</name></expr></argument>, <argument pos:start="319:37" pos:end="319:53"><expr pos:start="319:37" pos:end="319:53"><name pos:start="319:37" pos:end="319:53">above_4g_mem_size</name></expr></argument>, <argument pos:start="319:56" pos:end="319:66"><expr pos:start="319:56" pos:end="319:66"><name pos:start="319:56" pos:end="319:66">boot_device</name></expr></argument>,

                 <argument pos:start="321:18" pos:end="321:23"><expr pos:start="321:18" pos:end="321:23"><name pos:start="321:18" pos:end="321:23">floppy</name></expr></argument>, <argument pos:start="321:26" pos:end="321:34"><expr pos:start="321:26" pos:end="321:34"><name pos:start="321:26" pos:end="321:34"><name pos:start="321:26" pos:end="321:31">idebus</name><index pos:start="321:32" pos:end="321:34">[<expr pos:start="321:33" pos:end="321:33"><literal type="number" pos:start="321:33" pos:end="321:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="321:37" pos:end="321:45"><expr pos:start="321:37" pos:end="321:45"><name pos:start="321:37" pos:end="321:45"><name pos:start="321:37" pos:end="321:42">idebus</name><index pos:start="321:43" pos:end="321:45">[<expr pos:start="321:44" pos:end="321:44"><literal type="number" pos:start="321:44" pos:end="321:44">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="321:48" pos:end="321:56"><expr pos:start="321:48" pos:end="321:56"><name pos:start="321:48" pos:end="321:56">rtc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="325:5" pos:end="329:5"><if pos:start="325:5" pos:end="329:5">if <condition pos:start="325:8" pos:end="325:42">(<expr pos:start="325:9" pos:end="325:41"><name pos:start="325:9" pos:end="325:19">pci_enabled</name> <operator pos:start="325:21" pos:end="325:22">&amp;&amp;</operator> <call pos:start="325:24" pos:end="325:41"><name pos:start="325:24" pos:end="325:34">usb_enabled</name><argument_list pos:start="325:35" pos:end="325:41">(<argument pos:start="325:36" pos:end="325:40"><expr pos:start="325:36" pos:end="325:40"><name pos:start="325:36" pos:end="325:40">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="325:44" pos:end="329:5">{<block_content pos:start="327:9" pos:end="327:70">

        <expr_stmt pos:start="327:9" pos:end="327:70"><expr pos:start="327:9" pos:end="327:69"><call pos:start="327:9" pos:end="327:69"><name pos:start="327:9" pos:end="327:25">pci_create_simple</name><argument_list pos:start="327:26" pos:end="327:69">(<argument pos:start="327:27" pos:end="327:33"><expr pos:start="327:27" pos:end="327:33"><name pos:start="327:27" pos:end="327:33">pci_bus</name></expr></argument>, <argument pos:start="327:36" pos:end="327:50"><expr pos:start="327:36" pos:end="327:50"><name pos:start="327:36" pos:end="327:46">piix3_devfn</name> <operator pos:start="327:48" pos:end="327:48">+</operator> <literal type="number" pos:start="327:50" pos:end="327:50">2</literal></expr></argument>, <argument pos:start="327:53" pos:end="327:68"><expr pos:start="327:53" pos:end="327:68"><literal type="string" pos:start="327:53" pos:end="327:68">"piix3-usb-uhci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="333:5" pos:end="351:5"><if pos:start="333:5" pos:end="351:5">if <condition pos:start="333:8" pos:end="333:36">(<expr pos:start="333:9" pos:end="333:35"><name pos:start="333:9" pos:end="333:19">pci_enabled</name> <operator pos:start="333:21" pos:end="333:22">&amp;&amp;</operator> <name pos:start="333:24" pos:end="333:35">acpi_enabled</name></expr>)</condition> <block pos:start="333:38" pos:end="351:5">{<block_content pos:start="335:9" pos:end="349:45">

        <decl_stmt pos:start="335:9" pos:end="335:23"><decl pos:start="335:9" pos:end="335:22"><type pos:start="335:9" pos:end="335:17"><name pos:start="335:9" pos:end="335:15">i2c_bus</name> <modifier pos:start="335:17" pos:end="335:17">*</modifier></type><name pos:start="335:18" pos:end="335:22">smbus</name></decl>;</decl_stmt>



        <expr_stmt pos:start="339:9" pos:end="339:74"><expr pos:start="339:9" pos:end="339:73"><name pos:start="339:9" pos:end="339:15">smi_irq</name> <operator pos:start="339:17" pos:end="339:17">=</operator> <call pos:start="339:19" pos:end="339:73"><name pos:start="339:19" pos:end="339:36">qemu_allocate_irqs</name><argument_list pos:start="339:37" pos:end="339:73">(<argument pos:start="339:38" pos:end="339:58"><expr pos:start="339:38" pos:end="339:58"><name pos:start="339:38" pos:end="339:58">pc_acpi_smi_interrupt</name></expr></argument>, <argument pos:start="339:61" pos:end="339:69"><expr pos:start="339:61" pos:end="339:69"><name pos:start="339:61" pos:end="339:69">first_cpu</name></expr></argument>, <argument pos:start="339:72" pos:end="339:72"><expr pos:start="339:72" pos:end="339:72"><literal type="number" pos:start="339:72" pos:end="339:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="341:9" pos:end="341:46">/* TODO: Populate SPD eeprom data.  */</comment>

        <expr_stmt pos:start="343:9" pos:end="347:53"><expr pos:start="343:9" pos:end="347:52"><name pos:start="343:9" pos:end="343:13">smbus</name> <operator pos:start="343:15" pos:end="343:15">=</operator> <call pos:start="343:17" pos:end="347:52"><name pos:start="343:17" pos:end="343:29">piix4_pm_init</name><argument_list pos:start="343:30" pos:end="347:52">(<argument pos:start="343:31" pos:end="343:37"><expr pos:start="343:31" pos:end="343:37"><name pos:start="343:31" pos:end="343:37">pci_bus</name></expr></argument>, <argument pos:start="343:40" pos:end="343:54"><expr pos:start="343:40" pos:end="343:54"><name pos:start="343:40" pos:end="343:50">piix3_devfn</name> <operator pos:start="343:52" pos:end="343:52">+</operator> <literal type="number" pos:start="343:54" pos:end="343:54">3</literal></expr></argument>, <argument pos:start="343:57" pos:end="343:62"><expr pos:start="343:57" pos:end="343:62"><literal type="number" pos:start="343:57" pos:end="343:62">0xb100</literal></expr></argument>,

                              <argument pos:start="345:31" pos:end="345:36"><expr pos:start="345:31" pos:end="345:36"><name pos:start="345:31" pos:end="345:36"><name pos:start="345:31" pos:end="345:33">gsi</name><index pos:start="345:34" pos:end="345:36">[<expr pos:start="345:35" pos:end="345:35"><literal type="number" pos:start="345:35" pos:end="345:35">9</literal></expr>]</index></name></expr></argument>, <argument pos:start="345:39" pos:end="345:46"><expr pos:start="345:39" pos:end="345:46"><operator pos:start="345:39" pos:end="345:39">*</operator><name pos:start="345:40" pos:end="345:46">smi_irq</name></expr></argument>,

                              <argument pos:start="347:31" pos:end="347:43"><expr pos:start="347:31" pos:end="347:43"><call pos:start="347:31" pos:end="347:43"><name pos:start="347:31" pos:end="347:41">kvm_enabled</name><argument_list pos:start="347:42" pos:end="347:43">()</argument_list></call></expr></argument>, <argument pos:start="347:46" pos:end="347:51"><expr pos:start="347:46" pos:end="347:51"><name pos:start="347:46" pos:end="347:51">fw_cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="349:9" pos:end="349:45"><expr pos:start="349:9" pos:end="349:44"><call pos:start="349:9" pos:end="349:44"><name pos:start="349:9" pos:end="349:25">smbus_eeprom_init</name><argument_list pos:start="349:26" pos:end="349:44">(<argument pos:start="349:27" pos:end="349:31"><expr pos:start="349:27" pos:end="349:31"><name pos:start="349:27" pos:end="349:31">smbus</name></expr></argument>, <argument pos:start="349:34" pos:end="349:34"><expr pos:start="349:34" pos:end="349:34"><literal type="number" pos:start="349:34" pos:end="349:34">8</literal></expr></argument>, <argument pos:start="349:37" pos:end="349:40"><expr pos:start="349:37" pos:end="349:40"><name pos:start="349:37" pos:end="349:40">NULL</name></expr></argument>, <argument pos:start="349:43" pos:end="349:43"><expr pos:start="349:43" pos:end="349:43"><literal type="number" pos:start="349:43" pos:end="349:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="355:5" pos:end="359:5"><if pos:start="355:5" pos:end="359:5">if <condition pos:start="355:8" pos:end="355:20">(<expr pos:start="355:9" pos:end="355:19"><name pos:start="355:9" pos:end="355:19">pci_enabled</name></expr>)</condition> <block pos:start="355:22" pos:end="359:5">{<block_content pos:start="357:9" pos:end="357:36">

        <expr_stmt pos:start="357:9" pos:end="357:36"><expr pos:start="357:9" pos:end="357:35"><call pos:start="357:9" pos:end="357:35"><name pos:start="357:9" pos:end="357:26">pc_pci_device_init</name><argument_list pos:start="357:27" pos:end="357:35">(<argument pos:start="357:28" pos:end="357:34"><expr pos:start="357:28" pos:end="357:34"><name pos:start="357:28" pos:end="357:34">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="363:5" pos:end="367:5"><if pos:start="363:5" pos:end="367:5">if <condition pos:start="363:8" pos:end="363:20">(<expr pos:start="363:9" pos:end="363:19"><name pos:start="363:9" pos:end="363:19">has_pvpanic</name></expr>)</condition> <block pos:start="363:22" pos:end="367:5">{<block_content pos:start="365:9" pos:end="365:30">

        <expr_stmt pos:start="365:9" pos:end="365:30"><expr pos:start="365:9" pos:end="365:29"><call pos:start="365:9" pos:end="365:29"><name pos:start="365:9" pos:end="365:20">pvpanic_init</name><argument_list pos:start="365:21" pos:end="365:29">(<argument pos:start="365:22" pos:end="365:28"><expr pos:start="365:22" pos:end="365:28"><name pos:start="365:22" pos:end="365:28">isa_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
