<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4977.c" pos:tabs="8"><function pos:start="1:1" pos:end="343:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">usb_mtp_handle_data</name><parameter_list pos:start="1:32" pos:end="1:61">(<parameter pos:start="1:33" pos:end="1:46"><decl pos:start="1:33" pos:end="1:46"><type pos:start="1:33" pos:end="1:46"><name pos:start="1:33" pos:end="1:41">USBDevice</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">dev</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:60"><decl pos:start="1:49" pos:end="1:60"><type pos:start="1:49" pos:end="1:60"><name pos:start="1:49" pos:end="1:57">USBPacket</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:60">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="343:1">{<block_content pos:start="5:5" pos:end="341:5">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">MTPState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:30">= <expr pos:start="5:19" pos:end="5:30"><call pos:start="5:19" pos:end="5:30"><name pos:start="5:19" pos:end="5:25">USB_MTP</name><argument_list pos:start="5:26" pos:end="5:30">(<argument pos:start="5:27" pos:end="5:29"><expr pos:start="5:27" pos:end="5:29"><name pos:start="5:27" pos:end="5:29">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:14">MTPControl</name></type> <name pos:start="7:16" pos:end="7:18">cmd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:17">mtp_container</name></type> <name pos:start="9:19" pos:end="9:27">container</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:22"><name pos:start="11:14" pos:end="11:19">params</name><index pos:start="11:20" pos:end="11:22">[<expr pos:start="11:21" pos:end="11:21"><literal type="number" pos:start="11:21" pos:end="11:21">5</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:13"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:13">rc</name></decl>;</decl_stmt>



    <switch pos:start="17:5" pos:end="321:5">switch <condition pos:start="17:12" pos:end="17:22">(<expr pos:start="17:13" pos:end="17:21"><name pos:start="17:13" pos:end="17:21"><name pos:start="17:13" pos:end="17:13">p</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:17">ep</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:21">nr</name></name></expr>)</condition> <block pos:start="17:24" pos:end="321:5">{<block_content pos:start="19:5" pos:end="319:15">

    <case pos:start="19:5" pos:end="19:20">case <expr pos:start="19:10" pos:end="19:19"><name pos:start="19:10" pos:end="19:19">EP_DATA_IN</name></expr>:</case>

        <if_stmt pos:start="21:9" pos:end="31:9"><if pos:start="21:9" pos:end="31:9">if <condition pos:start="21:12" pos:end="21:32">(<expr pos:start="21:13" pos:end="21:31"><name pos:start="21:13" pos:end="21:23"><name pos:start="21:13" pos:end="21:13">s</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:23">data_out</name></name> <operator pos:start="21:25" pos:end="21:26">!=</operator> <name pos:start="21:28" pos:end="21:31">NULL</name></expr>)</condition> <block pos:start="21:34" pos:end="31:9">{<block_content pos:start="25:13" pos:end="29:19">

            <comment type="block" pos:start="23:13" pos:end="23:27">/* guest bug */</comment>

            <expr_stmt pos:start="25:13" pos:end="25:66"><expr pos:start="25:13" pos:end="25:65"><call pos:start="25:13" pos:end="25:65"><name pos:start="25:13" pos:end="25:31">trace_usb_mtp_stall</name><argument_list pos:start="25:32" pos:end="25:65">(<argument pos:start="25:33" pos:end="25:43"><expr pos:start="25:33" pos:end="25:43"><name pos:start="25:33" pos:end="25:43"><name pos:start="25:33" pos:end="25:33">s</name><operator pos:start="25:34" pos:end="25:35">-&gt;</operator><name pos:start="25:36" pos:end="25:38">dev</name><operator pos:start="25:39" pos:end="25:39">.</operator><name pos:start="25:40" pos:end="25:43">addr</name></name></expr></argument>, <argument pos:start="25:46" pos:end="25:64"><expr pos:start="25:46" pos:end="25:64"><literal type="string" pos:start="25:46" pos:end="25:64">"awaiting data-out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:38"><expr pos:start="27:13" pos:end="27:37"><name pos:start="27:13" pos:end="27:21"><name pos:start="27:13" pos:end="27:13">p</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:21">status</name></name> <operator pos:start="27:23" pos:end="27:23">=</operator> <name pos:start="27:25" pos:end="27:37">USB_RET_STALL</name></expr>;</expr_stmt>

            <return pos:start="29:13" pos:end="29:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="33:9" pos:end="41:9"><if pos:start="33:9" pos:end="41:9">if <condition pos:start="33:12" pos:end="33:44">(<expr pos:start="33:13" pos:end="33:43"><name pos:start="33:13" pos:end="33:23"><name pos:start="33:13" pos:end="33:13">p</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:18">iov</name><operator pos:start="33:19" pos:end="33:19">.</operator><name pos:start="33:20" pos:end="33:23">size</name></name> <operator pos:start="33:25" pos:end="33:25">&lt;</operator> <sizeof pos:start="33:27" pos:end="33:43">sizeof<argument_list pos:start="33:33" pos:end="33:43">(<argument pos:start="33:34" pos:end="33:42"><expr pos:start="33:34" pos:end="33:42"><name pos:start="33:34" pos:end="33:42">container</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="33:46" pos:end="41:9">{<block_content pos:start="35:13" pos:end="39:19">

            <expr_stmt pos:start="35:13" pos:end="35:65"><expr pos:start="35:13" pos:end="35:64"><call pos:start="35:13" pos:end="35:64"><name pos:start="35:13" pos:end="35:31">trace_usb_mtp_stall</name><argument_list pos:start="35:32" pos:end="35:64">(<argument pos:start="35:33" pos:end="35:43"><expr pos:start="35:33" pos:end="35:43"><name pos:start="35:33" pos:end="35:43"><name pos:start="35:33" pos:end="35:33">s</name><operator pos:start="35:34" pos:end="35:35">-&gt;</operator><name pos:start="35:36" pos:end="35:38">dev</name><operator pos:start="35:39" pos:end="35:39">.</operator><name pos:start="35:40" pos:end="35:43">addr</name></name></expr></argument>, <argument pos:start="35:46" pos:end="35:63"><expr pos:start="35:46" pos:end="35:63"><literal type="string" pos:start="35:46" pos:end="35:63">"packet too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:38"><expr pos:start="37:13" pos:end="37:37"><name pos:start="37:13" pos:end="37:21"><name pos:start="37:13" pos:end="37:13">p</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:21">status</name></name> <operator pos:start="37:23" pos:end="37:23">=</operator> <name pos:start="37:25" pos:end="37:37">USB_RET_STALL</name></expr>;</expr_stmt>

            <return pos:start="39:13" pos:end="39:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="43:9" pos:end="165:9"><if pos:start="43:9" pos:end="119:9">if <condition pos:start="43:12" pos:end="43:32">(<expr pos:start="43:13" pos:end="43:31"><name pos:start="43:13" pos:end="43:22"><name pos:start="43:13" pos:end="43:13">s</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:22">data_in</name></name> <operator pos:start="43:24" pos:end="43:25">!=</operator>  <name pos:start="43:28" pos:end="43:31">NULL</name></expr>)</condition> <block pos:start="43:34" pos:end="119:9">{<block_content pos:start="45:13" pos:end="117:13">

            <decl_stmt pos:start="45:13" pos:end="45:36"><decl pos:start="45:13" pos:end="45:35"><type pos:start="45:13" pos:end="45:21"><name pos:start="45:13" pos:end="45:19">MTPData</name> <modifier pos:start="45:21" pos:end="45:21">*</modifier></type><name pos:start="45:22" pos:end="45:22">d</name> <init pos:start="45:24" pos:end="45:35">= <expr pos:start="45:26" pos:end="45:35"><name pos:start="45:26" pos:end="45:35"><name pos:start="45:26" pos:end="45:26">s</name><operator pos:start="45:27" pos:end="45:28">-&gt;</operator><name pos:start="45:29" pos:end="45:35">data_in</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="47:13" pos:end="47:45"><decl pos:start="47:13" pos:end="47:44"><type pos:start="47:13" pos:end="47:15"><name pos:start="47:13" pos:end="47:15">int</name></type> <name pos:start="47:17" pos:end="47:20">dlen</name> <init pos:start="47:22" pos:end="47:44">= <expr pos:start="47:24" pos:end="47:44"><name pos:start="47:24" pos:end="47:32"><name pos:start="47:24" pos:end="47:24">d</name><operator pos:start="47:25" pos:end="47:26">-&gt;</operator><name pos:start="47:27" pos:end="47:32">length</name></name> <operator pos:start="47:34" pos:end="47:34">-</operator> <name pos:start="47:36" pos:end="47:44"><name pos:start="47:36" pos:end="47:36">d</name><operator pos:start="47:37" pos:end="47:38">-&gt;</operator><name pos:start="47:39" pos:end="47:44">offset</name></name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="49:13" pos:end="79:13"><if pos:start="49:13" pos:end="71:13">if <condition pos:start="49:16" pos:end="49:25">(<expr pos:start="49:17" pos:end="49:24"><name pos:start="49:17" pos:end="49:24"><name pos:start="49:17" pos:end="49:17">d</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:24">first</name></name></expr>)</condition> <block pos:start="49:27" pos:end="71:13">{<block_content pos:start="51:17" pos:end="69:17">

                <expr_stmt pos:start="51:17" pos:end="51:72"><expr pos:start="51:17" pos:end="51:71"><call pos:start="51:17" pos:end="51:71"><name pos:start="51:17" pos:end="51:37">trace_usb_mtp_data_in</name><argument_list pos:start="51:38" pos:end="51:71">(<argument pos:start="51:39" pos:end="51:49"><expr pos:start="51:39" pos:end="51:49"><name pos:start="51:39" pos:end="51:49"><name pos:start="51:39" pos:end="51:39">s</name><operator pos:start="51:40" pos:end="51:41">-&gt;</operator><name pos:start="51:42" pos:end="51:44">dev</name><operator pos:start="51:45" pos:end="51:45">.</operator><name pos:start="51:46" pos:end="51:49">addr</name></name></expr></argument>, <argument pos:start="51:52" pos:end="51:59"><expr pos:start="51:52" pos:end="51:59"><name pos:start="51:52" pos:end="51:59"><name pos:start="51:52" pos:end="51:52">d</name><operator pos:start="51:53" pos:end="51:54">-&gt;</operator><name pos:start="51:55" pos:end="51:59">trans</name></name></expr></argument>, <argument pos:start="51:62" pos:end="51:70"><expr pos:start="51:62" pos:end="51:70"><name pos:start="51:62" pos:end="51:70"><name pos:start="51:62" pos:end="51:62">d</name><operator pos:start="51:63" pos:end="51:64">-&gt;</operator><name pos:start="51:65" pos:end="51:70">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="53:17" pos:end="53:78"><expr pos:start="53:17" pos:end="53:77"><name pos:start="53:17" pos:end="53:32"><name pos:start="53:17" pos:end="53:25">container</name><operator pos:start="53:26" pos:end="53:26">.</operator><name pos:start="53:27" pos:end="53:32">length</name></name> <operator pos:start="53:34" pos:end="53:34">=</operator> <call pos:start="53:36" pos:end="53:77"><name pos:start="53:36" pos:end="53:46">cpu_to_le32</name><argument_list pos:start="53:47" pos:end="53:77">(<argument pos:start="53:48" pos:end="53:76"><expr pos:start="53:48" pos:end="53:76"><name pos:start="53:48" pos:end="53:56"><name pos:start="53:48" pos:end="53:48">d</name><operator pos:start="53:49" pos:end="53:50">-&gt;</operator><name pos:start="53:51" pos:end="53:56">length</name></name> <operator pos:start="53:58" pos:end="53:58">+</operator> <sizeof pos:start="53:60" pos:end="53:76">sizeof<argument_list pos:start="53:66" pos:end="53:76">(<argument pos:start="53:67" pos:end="53:75"><expr pos:start="53:67" pos:end="53:75"><name pos:start="53:67" pos:end="53:75">container</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:58"><expr pos:start="55:17" pos:end="55:57"><name pos:start="55:17" pos:end="55:30"><name pos:start="55:17" pos:end="55:25">container</name><operator pos:start="55:26" pos:end="55:26">.</operator><name pos:start="55:27" pos:end="55:30">type</name></name>   <operator pos:start="55:34" pos:end="55:34">=</operator> <call pos:start="55:36" pos:end="55:57"><name pos:start="55:36" pos:end="55:46">cpu_to_le16</name><argument_list pos:start="55:47" pos:end="55:57">(<argument pos:start="55:48" pos:end="55:56"><expr pos:start="55:48" pos:end="55:56"><name pos:start="55:48" pos:end="55:56">TYPE_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:56"><expr pos:start="57:17" pos:end="57:55"><name pos:start="57:17" pos:end="57:30"><name pos:start="57:17" pos:end="57:25">container</name><operator pos:start="57:26" pos:end="57:26">.</operator><name pos:start="57:27" pos:end="57:30">code</name></name>   <operator pos:start="57:34" pos:end="57:34">=</operator> <call pos:start="57:36" pos:end="57:55"><name pos:start="57:36" pos:end="57:46">cpu_to_le16</name><argument_list pos:start="57:47" pos:end="57:55">(<argument pos:start="57:48" pos:end="57:54"><expr pos:start="57:48" pos:end="57:54"><name pos:start="57:48" pos:end="57:54"><name pos:start="57:48" pos:end="57:48">d</name><operator pos:start="57:49" pos:end="57:50">-&gt;</operator><name pos:start="57:51" pos:end="57:54">code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:57"><expr pos:start="59:17" pos:end="59:56"><name pos:start="59:17" pos:end="59:31"><name pos:start="59:17" pos:end="59:25">container</name><operator pos:start="59:26" pos:end="59:26">.</operator><name pos:start="59:27" pos:end="59:31">trans</name></name>  <operator pos:start="59:34" pos:end="59:34">=</operator> <call pos:start="59:36" pos:end="59:56"><name pos:start="59:36" pos:end="59:46">cpu_to_le32</name><argument_list pos:start="59:47" pos:end="59:56">(<argument pos:start="59:48" pos:end="59:55"><expr pos:start="59:48" pos:end="59:55"><name pos:start="59:48" pos:end="59:55"><name pos:start="59:48" pos:end="59:48">d</name><operator pos:start="59:49" pos:end="59:50">-&gt;</operator><name pos:start="59:51" pos:end="59:55">trans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="61:17" pos:end="61:66"><expr pos:start="61:17" pos:end="61:65"><call pos:start="61:17" pos:end="61:65"><name pos:start="61:17" pos:end="61:31">usb_packet_copy</name><argument_list pos:start="61:32" pos:end="61:65">(<argument pos:start="61:33" pos:end="61:33"><expr pos:start="61:33" pos:end="61:33"><name pos:start="61:33" pos:end="61:33">p</name></expr></argument>, <argument pos:start="61:36" pos:end="61:45"><expr pos:start="61:36" pos:end="61:45"><operator pos:start="61:36" pos:end="61:36">&amp;</operator><name pos:start="61:37" pos:end="61:45">container</name></expr></argument>, <argument pos:start="61:48" pos:end="61:64"><expr pos:start="61:48" pos:end="61:64"><sizeof pos:start="61:48" pos:end="61:64">sizeof<argument_list pos:start="61:54" pos:end="61:64">(<argument pos:start="61:55" pos:end="61:63"><expr pos:start="61:55" pos:end="61:63"><name pos:start="61:55" pos:end="61:63">container</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="63:17" pos:end="63:33"><expr pos:start="63:17" pos:end="63:32"><name pos:start="63:17" pos:end="63:24"><name pos:start="63:17" pos:end="63:17">d</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:24">first</name></name> <operator pos:start="63:26" pos:end="63:26">=</operator> <name pos:start="63:28" pos:end="63:32">false</name></expr>;</expr_stmt>

                <if_stmt pos:start="65:17" pos:end="69:17"><if pos:start="65:17" pos:end="69:17">if <condition pos:start="65:20" pos:end="65:59">(<expr pos:start="65:21" pos:end="65:58"><name pos:start="65:21" pos:end="65:24">dlen</name> <operator pos:start="65:26" pos:end="65:26">&gt;</operator> <name pos:start="65:28" pos:end="65:38"><name pos:start="65:28" pos:end="65:28">p</name><operator pos:start="65:29" pos:end="65:30">-&gt;</operator><name pos:start="65:31" pos:end="65:33">iov</name><operator pos:start="65:34" pos:end="65:34">.</operator><name pos:start="65:35" pos:end="65:38">size</name></name> <operator pos:start="65:40" pos:end="65:40">-</operator> <sizeof pos:start="65:42" pos:end="65:58">sizeof<argument_list pos:start="65:48" pos:end="65:58">(<argument pos:start="65:49" pos:end="65:57"><expr pos:start="65:49" pos:end="65:57"><name pos:start="65:49" pos:end="65:57">container</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="65:61" pos:end="69:17">{<block_content pos:start="67:21" pos:end="67:59">

                    <expr_stmt pos:start="67:21" pos:end="67:59"><expr pos:start="67:21" pos:end="67:58"><name pos:start="67:21" pos:end="67:24">dlen</name> <operator pos:start="67:26" pos:end="67:26">=</operator> <name pos:start="67:28" pos:end="67:38"><name pos:start="67:28" pos:end="67:28">p</name><operator pos:start="67:29" pos:end="67:30">-&gt;</operator><name pos:start="67:31" pos:end="67:33">iov</name><operator pos:start="67:34" pos:end="67:34">.</operator><name pos:start="67:35" pos:end="67:38">size</name></name> <operator pos:start="67:40" pos:end="67:40">-</operator> <sizeof pos:start="67:42" pos:end="67:58">sizeof<argument_list pos:start="67:48" pos:end="67:58">(<argument pos:start="67:49" pos:end="67:57"><expr pos:start="67:49" pos:end="67:57"><name pos:start="67:49" pos:end="67:57">container</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="71:15" pos:end="79:13">else <block pos:start="71:20" pos:end="79:13">{<block_content pos:start="73:17" pos:end="77:17">

                <if_stmt pos:start="73:17" pos:end="77:17"><if pos:start="73:17" pos:end="77:17">if <condition pos:start="73:20" pos:end="73:39">(<expr pos:start="73:21" pos:end="73:38"><name pos:start="73:21" pos:end="73:24">dlen</name> <operator pos:start="73:26" pos:end="73:26">&gt;</operator> <name pos:start="73:28" pos:end="73:38"><name pos:start="73:28" pos:end="73:28">p</name><operator pos:start="73:29" pos:end="73:30">-&gt;</operator><name pos:start="73:31" pos:end="73:33">iov</name><operator pos:start="73:34" pos:end="73:34">.</operator><name pos:start="73:35" pos:end="73:38">size</name></name></expr>)</condition> <block pos:start="73:41" pos:end="77:17">{<block_content pos:start="75:21" pos:end="75:39">

                    <expr_stmt pos:start="75:21" pos:end="75:39"><expr pos:start="75:21" pos:end="75:38"><name pos:start="75:21" pos:end="75:24">dlen</name> <operator pos:start="75:26" pos:end="75:26">=</operator> <name pos:start="75:28" pos:end="75:38"><name pos:start="75:28" pos:end="75:28">p</name><operator pos:start="75:29" pos:end="75:30">-&gt;</operator><name pos:start="75:31" pos:end="75:33">iov</name><operator pos:start="75:34" pos:end="75:34">.</operator><name pos:start="75:35" pos:end="75:38">size</name></name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="81:13" pos:end="107:13"><if pos:start="81:13" pos:end="85:13">if <condition pos:start="81:16" pos:end="81:28">(<expr pos:start="81:17" pos:end="81:27"><name pos:start="81:17" pos:end="81:21"><name pos:start="81:17" pos:end="81:17">d</name><operator pos:start="81:18" pos:end="81:19">-&gt;</operator><name pos:start="81:20" pos:end="81:21">fd</name></name> <operator pos:start="81:23" pos:end="81:24">==</operator> <operator pos:start="81:26" pos:end="81:26">-</operator><literal type="number" pos:start="81:27" pos:end="81:27">1</literal></expr>)</condition> <block pos:start="81:30" pos:end="85:13">{<block_content pos:start="83:17" pos:end="83:62">

                <expr_stmt pos:start="83:17" pos:end="83:62"><expr pos:start="83:17" pos:end="83:61"><call pos:start="83:17" pos:end="83:61"><name pos:start="83:17" pos:end="83:31">usb_packet_copy</name><argument_list pos:start="83:32" pos:end="83:61">(<argument pos:start="83:33" pos:end="83:33"><expr pos:start="83:33" pos:end="83:33"><name pos:start="83:33" pos:end="83:33">p</name></expr></argument>, <argument pos:start="83:36" pos:end="83:54"><expr pos:start="83:36" pos:end="83:54"><name pos:start="83:36" pos:end="83:42"><name pos:start="83:36" pos:end="83:36">d</name><operator pos:start="83:37" pos:end="83:38">-&gt;</operator><name pos:start="83:39" pos:end="83:42">data</name></name> <operator pos:start="83:44" pos:end="83:44">+</operator> <name pos:start="83:46" pos:end="83:54"><name pos:start="83:46" pos:end="83:46">d</name><operator pos:start="83:47" pos:end="83:48">-&gt;</operator><name pos:start="83:49" pos:end="83:54">offset</name></name></expr></argument>, <argument pos:start="83:57" pos:end="83:60"><expr pos:start="83:57" pos:end="83:60"><name pos:start="83:57" pos:end="83:60">dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="85:15" pos:end="107:13">else <block pos:start="85:20" pos:end="107:13">{<block_content pos:start="87:17" pos:end="105:50">

                <if_stmt pos:start="87:17" pos:end="93:17"><if pos:start="87:17" pos:end="93:17">if <condition pos:start="87:20" pos:end="87:43">(<expr pos:start="87:21" pos:end="87:42"><name pos:start="87:21" pos:end="87:28"><name pos:start="87:21" pos:end="87:21">d</name><operator pos:start="87:22" pos:end="87:23">-&gt;</operator><name pos:start="87:24" pos:end="87:28">alloc</name></name> <operator pos:start="87:30" pos:end="87:30">&lt;</operator> <name pos:start="87:32" pos:end="87:42"><name pos:start="87:32" pos:end="87:32">p</name><operator pos:start="87:33" pos:end="87:34">-&gt;</operator><name pos:start="87:35" pos:end="87:37">iov</name><operator pos:start="87:38" pos:end="87:38">.</operator><name pos:start="87:39" pos:end="87:42">size</name></name></expr>)</condition> <block pos:start="87:45" pos:end="93:17">{<block_content pos:start="89:21" pos:end="91:59">

                    <expr_stmt pos:start="89:21" pos:end="89:43"><expr pos:start="89:21" pos:end="89:42"><name pos:start="89:21" pos:end="89:28"><name pos:start="89:21" pos:end="89:21">d</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:28">alloc</name></name> <operator pos:start="89:30" pos:end="89:30">=</operator> <name pos:start="89:32" pos:end="89:42"><name pos:start="89:32" pos:end="89:32">p</name><operator pos:start="89:33" pos:end="89:34">-&gt;</operator><name pos:start="89:35" pos:end="89:37">iov</name><operator pos:start="89:38" pos:end="89:38">.</operator><name pos:start="89:39" pos:end="89:42">size</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="91:21" pos:end="91:59"><expr pos:start="91:21" pos:end="91:58"><name pos:start="91:21" pos:end="91:27"><name pos:start="91:21" pos:end="91:21">d</name><operator pos:start="91:22" pos:end="91:23">-&gt;</operator><name pos:start="91:24" pos:end="91:27">data</name></name> <operator pos:start="91:29" pos:end="91:29">=</operator> <call pos:start="91:31" pos:end="91:58"><name pos:start="91:31" pos:end="91:39">g_realloc</name><argument_list pos:start="91:40" pos:end="91:58">(<argument pos:start="91:41" pos:end="91:47"><expr pos:start="91:41" pos:end="91:47"><name pos:start="91:41" pos:end="91:47"><name pos:start="91:41" pos:end="91:41">d</name><operator pos:start="91:42" pos:end="91:43">-&gt;</operator><name pos:start="91:44" pos:end="91:47">data</name></name></expr></argument>, <argument pos:start="91:50" pos:end="91:57"><expr pos:start="91:50" pos:end="91:57"><name pos:start="91:50" pos:end="91:57"><name pos:start="91:50" pos:end="91:50">d</name><operator pos:start="91:51" pos:end="91:52">-&gt;</operator><name pos:start="91:53" pos:end="91:57">alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:48"><expr pos:start="95:17" pos:end="95:47"><name pos:start="95:17" pos:end="95:18">rc</name> <operator pos:start="95:20" pos:end="95:20">=</operator> <call pos:start="95:22" pos:end="95:47"><name pos:start="95:22" pos:end="95:25">read</name><argument_list pos:start="95:26" pos:end="95:47">(<argument pos:start="95:27" pos:end="95:31"><expr pos:start="95:27" pos:end="95:31"><name pos:start="95:27" pos:end="95:31"><name pos:start="95:27" pos:end="95:27">d</name><operator pos:start="95:28" pos:end="95:29">-&gt;</operator><name pos:start="95:30" pos:end="95:31">fd</name></name></expr></argument>, <argument pos:start="95:34" pos:end="95:40"><expr pos:start="95:34" pos:end="95:40"><name pos:start="95:34" pos:end="95:40"><name pos:start="95:34" pos:end="95:34">d</name><operator pos:start="95:35" pos:end="95:36">-&gt;</operator><name pos:start="95:37" pos:end="95:40">data</name></name></expr></argument>, <argument pos:start="95:43" pos:end="95:46"><expr pos:start="95:43" pos:end="95:46"><name pos:start="95:43" pos:end="95:46">dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="97:17" pos:end="103:17"><if pos:start="97:17" pos:end="103:17">if <condition pos:start="97:20" pos:end="97:31">(<expr pos:start="97:21" pos:end="97:30"><name pos:start="97:21" pos:end="97:22">rc</name> <operator pos:start="97:24" pos:end="97:25">!=</operator> <name pos:start="97:27" pos:end="97:30">dlen</name></expr>)</condition> <block pos:start="97:33" pos:end="103:17">{<block_content pos:start="99:21" pos:end="101:62">

                    <expr_stmt pos:start="99:21" pos:end="99:45"><expr pos:start="99:21" pos:end="99:44"><call pos:start="99:21" pos:end="99:44"><name pos:start="99:21" pos:end="99:26">memset</name><argument_list pos:start="99:27" pos:end="99:44">(<argument pos:start="99:28" pos:end="99:34"><expr pos:start="99:28" pos:end="99:34"><name pos:start="99:28" pos:end="99:34"><name pos:start="99:28" pos:end="99:28">d</name><operator pos:start="99:29" pos:end="99:30">-&gt;</operator><name pos:start="99:31" pos:end="99:34">data</name></name></expr></argument>, <argument pos:start="99:37" pos:end="99:37"><expr pos:start="99:37" pos:end="99:37"><literal type="number" pos:start="99:37" pos:end="99:37">0</literal></expr></argument>, <argument pos:start="99:40" pos:end="99:43"><expr pos:start="99:40" pos:end="99:43"><name pos:start="99:40" pos:end="99:43">dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="101:21" pos:end="101:62"><expr pos:start="101:21" pos:end="101:61"><name pos:start="101:21" pos:end="101:35"><name pos:start="101:21" pos:end="101:21">s</name><operator pos:start="101:22" pos:end="101:23">-&gt;</operator><name pos:start="101:24" pos:end="101:29">result</name><operator pos:start="101:30" pos:end="101:31">-&gt;</operator><name pos:start="101:32" pos:end="101:35">code</name></name> <operator pos:start="101:37" pos:end="101:37">=</operator> <name pos:start="101:39" pos:end="101:61">RES_INCOMPLETE_TRANSFER</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:50"><expr pos:start="105:17" pos:end="105:49"><call pos:start="105:17" pos:end="105:49"><name pos:start="105:17" pos:end="105:31">usb_packet_copy</name><argument_list pos:start="105:32" pos:end="105:49">(<argument pos:start="105:33" pos:end="105:33"><expr pos:start="105:33" pos:end="105:33"><name pos:start="105:33" pos:end="105:33">p</name></expr></argument>, <argument pos:start="105:36" pos:end="105:42"><expr pos:start="105:36" pos:end="105:42"><name pos:start="105:36" pos:end="105:42"><name pos:start="105:36" pos:end="105:36">d</name><operator pos:start="105:37" pos:end="105:38">-&gt;</operator><name pos:start="105:39" pos:end="105:42">data</name></name></expr></argument>, <argument pos:start="105:45" pos:end="105:48"><expr pos:start="105:45" pos:end="105:48"><name pos:start="105:45" pos:end="105:48">dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:30"><expr pos:start="109:13" pos:end="109:29"><name pos:start="109:13" pos:end="109:21"><name pos:start="109:13" pos:end="109:13">d</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:21">offset</name></name> <operator pos:start="109:23" pos:end="109:24">+=</operator> <name pos:start="109:26" pos:end="109:29">dlen</name></expr>;</expr_stmt>

            <if_stmt pos:start="111:13" pos:end="117:13"><if pos:start="111:13" pos:end="117:13">if <condition pos:start="111:16" pos:end="111:39">(<expr pos:start="111:17" pos:end="111:38"><name pos:start="111:17" pos:end="111:25"><name pos:start="111:17" pos:end="111:17">d</name><operator pos:start="111:18" pos:end="111:19">-&gt;</operator><name pos:start="111:20" pos:end="111:25">offset</name></name> <operator pos:start="111:27" pos:end="111:28">==</operator> <name pos:start="111:30" pos:end="111:38"><name pos:start="111:30" pos:end="111:30">d</name><operator pos:start="111:31" pos:end="111:32">-&gt;</operator><name pos:start="111:33" pos:end="111:38">length</name></name></expr>)</condition> <block pos:start="111:41" pos:end="117:13">{<block_content pos:start="113:17" pos:end="115:34">

                <expr_stmt pos:start="113:17" pos:end="113:46"><expr pos:start="113:17" pos:end="113:45"><call pos:start="113:17" pos:end="113:45"><name pos:start="113:17" pos:end="113:33">usb_mtp_data_free</name><argument_list pos:start="113:34" pos:end="113:45">(<argument pos:start="113:35" pos:end="113:44"><expr pos:start="113:35" pos:end="113:44"><name pos:start="113:35" pos:end="113:44"><name pos:start="113:35" pos:end="113:35">s</name><operator pos:start="113:36" pos:end="113:37">-&gt;</operator><name pos:start="113:38" pos:end="113:44">data_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="115:17" pos:end="115:34"><expr pos:start="115:17" pos:end="115:33"><name pos:start="115:17" pos:end="115:26"><name pos:start="115:17" pos:end="115:17">s</name><operator pos:start="115:18" pos:end="115:19">-&gt;</operator><name pos:start="115:20" pos:end="115:26">data_in</name></name> <operator pos:start="115:28" pos:end="115:28">=</operator> <name pos:start="115:30" pos:end="115:33">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="119:11" pos:end="165:9">else if <condition pos:start="119:19" pos:end="119:37">(<expr pos:start="119:20" pos:end="119:36"><name pos:start="119:20" pos:end="119:28"><name pos:start="119:20" pos:end="119:20">s</name><operator pos:start="119:21" pos:end="119:22">-&gt;</operator><name pos:start="119:23" pos:end="119:28">result</name></name> <operator pos:start="119:30" pos:end="119:31">!=</operator> <name pos:start="119:33" pos:end="119:36">NULL</name></expr>)</condition> <block pos:start="119:39" pos:end="165:9">{<block_content pos:start="121:13" pos:end="163:29">

            <decl_stmt pos:start="121:13" pos:end="121:38"><decl pos:start="121:13" pos:end="121:37"><type pos:start="121:13" pos:end="121:24"><name pos:start="121:13" pos:end="121:22">MTPControl</name> <modifier pos:start="121:24" pos:end="121:24">*</modifier></type><name pos:start="121:25" pos:end="121:25">r</name> <init pos:start="121:27" pos:end="121:37">= <expr pos:start="121:29" pos:end="121:37"><name pos:start="121:29" pos:end="121:37"><name pos:start="121:29" pos:end="121:29">s</name><operator pos:start="121:30" pos:end="121:31">-&gt;</operator><name pos:start="121:32" pos:end="121:37">result</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="123:13" pos:end="123:72"><decl pos:start="123:13" pos:end="123:71"><type pos:start="123:13" pos:end="123:15"><name pos:start="123:13" pos:end="123:15">int</name></type> <name pos:start="123:17" pos:end="123:22">length</name> <init pos:start="123:24" pos:end="123:71">= <expr pos:start="123:26" pos:end="123:71"><sizeof pos:start="123:26" pos:end="123:42">sizeof<argument_list pos:start="123:32" pos:end="123:42">(<argument pos:start="123:33" pos:end="123:41"><expr pos:start="123:33" pos:end="123:41"><name pos:start="123:33" pos:end="123:41">container</name></expr></argument>)</argument_list></sizeof> <operator pos:start="123:44" pos:end="123:44">+</operator> <name pos:start="123:46" pos:end="123:52"><name pos:start="123:46" pos:end="123:46">r</name><operator pos:start="123:47" pos:end="123:48">-&gt;</operator><name pos:start="123:49" pos:end="123:52">argc</name></name> <operator pos:start="123:54" pos:end="123:54">*</operator> <sizeof pos:start="123:56" pos:end="123:71">sizeof<argument_list pos:start="123:62" pos:end="123:71">(<argument pos:start="123:63" pos:end="123:70"><expr pos:start="123:63" pos:end="123:70"><name pos:start="123:63" pos:end="123:70">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="125:13" pos:end="141:13"><if pos:start="125:13" pos:end="133:13">if <condition pos:start="125:16" pos:end="125:34">(<expr pos:start="125:17" pos:end="125:33"><name pos:start="125:17" pos:end="125:23"><name pos:start="125:17" pos:end="125:17">r</name><operator pos:start="125:18" pos:end="125:19">-&gt;</operator><name pos:start="125:20" pos:end="125:23">code</name></name> <operator pos:start="125:25" pos:end="125:26">==</operator> <name pos:start="125:28" pos:end="125:33">RES_OK</name></expr>)</condition> <block pos:start="125:36" pos:end="133:13">{<block_content pos:start="127:17" pos:end="131:70">

                <expr_stmt pos:start="127:17" pos:end="131:70"><expr pos:start="127:17" pos:end="131:69"><call pos:start="127:17" pos:end="131:69"><name pos:start="127:17" pos:end="127:37">trace_usb_mtp_success</name><argument_list pos:start="127:38" pos:end="131:69">(<argument pos:start="127:39" pos:end="127:49"><expr pos:start="127:39" pos:end="127:49"><name pos:start="127:39" pos:end="127:49"><name pos:start="127:39" pos:end="127:39">s</name><operator pos:start="127:40" pos:end="127:41">-&gt;</operator><name pos:start="127:42" pos:end="127:44">dev</name><operator pos:start="127:45" pos:end="127:45">.</operator><name pos:start="127:46" pos:end="127:49">addr</name></name></expr></argument>, <argument pos:start="127:52" pos:end="127:59"><expr pos:start="127:52" pos:end="127:59"><name pos:start="127:52" pos:end="127:59"><name pos:start="127:52" pos:end="127:52">r</name><operator pos:start="127:53" pos:end="127:54">-&gt;</operator><name pos:start="127:55" pos:end="127:59">trans</name></name></expr></argument>,

                                      <argument pos:start="129:39" pos:end="129:68"><expr pos:start="129:39" pos:end="129:68"><ternary pos:start="129:39" pos:end="129:68"><condition pos:start="129:39" pos:end="129:53"><expr pos:start="129:39" pos:end="129:51"><operator pos:start="129:39" pos:end="129:39">(</operator><name pos:start="129:40" pos:end="129:46"><name pos:start="129:40" pos:end="129:40">r</name><operator pos:start="129:41" pos:end="129:42">-&gt;</operator><name pos:start="129:43" pos:end="129:46">argc</name></name> <operator pos:start="129:48" pos:end="129:48">&gt;</operator> <literal type="number" pos:start="129:50" pos:end="129:50">0</literal><operator pos:start="129:51" pos:end="129:51">)</operator></expr> ?</condition><then pos:start="129:55" pos:end="129:64"> <expr pos:start="129:55" pos:end="129:64"><name pos:start="129:55" pos:end="129:64"><name pos:start="129:55" pos:end="129:55">r</name><operator pos:start="129:56" pos:end="129:57">-&gt;</operator><name pos:start="129:58" pos:end="129:61">argv</name><index pos:start="129:62" pos:end="129:64">[<expr pos:start="129:63" pos:end="129:63"><literal type="number" pos:start="129:63" pos:end="129:63">0</literal></expr>]</index></name></expr> </then><else pos:start="129:66" pos:end="129:68">: <expr pos:start="129:68" pos:end="129:68"><literal type="number" pos:start="129:68" pos:end="129:68">0</literal></expr></else></ternary></expr></argument>,

                                      <argument pos:start="131:39" pos:end="131:68"><expr pos:start="131:39" pos:end="131:68"><ternary pos:start="131:39" pos:end="131:68"><condition pos:start="131:39" pos:end="131:53"><expr pos:start="131:39" pos:end="131:51"><operator pos:start="131:39" pos:end="131:39">(</operator><name pos:start="131:40" pos:end="131:46"><name pos:start="131:40" pos:end="131:40">r</name><operator pos:start="131:41" pos:end="131:42">-&gt;</operator><name pos:start="131:43" pos:end="131:46">argc</name></name> <operator pos:start="131:48" pos:end="131:48">&gt;</operator> <literal type="number" pos:start="131:50" pos:end="131:50">1</literal><operator pos:start="131:51" pos:end="131:51">)</operator></expr> ?</condition><then pos:start="131:55" pos:end="131:64"> <expr pos:start="131:55" pos:end="131:64"><name pos:start="131:55" pos:end="131:64"><name pos:start="131:55" pos:end="131:55">r</name><operator pos:start="131:56" pos:end="131:57">-&gt;</operator><name pos:start="131:58" pos:end="131:61">argv</name><index pos:start="131:62" pos:end="131:64">[<expr pos:start="131:63" pos:end="131:63"><literal type="number" pos:start="131:63" pos:end="131:63">1</literal></expr>]</index></name></expr> </then><else pos:start="131:66" pos:end="131:68">: <expr pos:start="131:68" pos:end="131:68"><literal type="number" pos:start="131:68" pos:end="131:68">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="133:15" pos:end="141:13">else <block pos:start="133:20" pos:end="141:13">{<block_content pos:start="135:17" pos:end="139:68">

                <expr_stmt pos:start="135:17" pos:end="139:68"><expr pos:start="135:17" pos:end="139:67"><call pos:start="135:17" pos:end="139:67"><name pos:start="135:17" pos:end="135:35">trace_usb_mtp_error</name><argument_list pos:start="135:36" pos:end="139:67">(<argument pos:start="135:37" pos:end="135:47"><expr pos:start="135:37" pos:end="135:47"><name pos:start="135:37" pos:end="135:47"><name pos:start="135:37" pos:end="135:37">s</name><operator pos:start="135:38" pos:end="135:39">-&gt;</operator><name pos:start="135:40" pos:end="135:42">dev</name><operator pos:start="135:43" pos:end="135:43">.</operator><name pos:start="135:44" pos:end="135:47">addr</name></name></expr></argument>, <argument pos:start="135:50" pos:end="135:56"><expr pos:start="135:50" pos:end="135:56"><name pos:start="135:50" pos:end="135:56"><name pos:start="135:50" pos:end="135:50">r</name><operator pos:start="135:51" pos:end="135:52">-&gt;</operator><name pos:start="135:53" pos:end="135:56">code</name></name></expr></argument>, <argument pos:start="135:59" pos:end="135:66"><expr pos:start="135:59" pos:end="135:66"><name pos:start="135:59" pos:end="135:66"><name pos:start="135:59" pos:end="135:59">r</name><operator pos:start="135:60" pos:end="135:61">-&gt;</operator><name pos:start="135:62" pos:end="135:66">trans</name></name></expr></argument>,

                                    <argument pos:start="137:37" pos:end="137:66"><expr pos:start="137:37" pos:end="137:66"><ternary pos:start="137:37" pos:end="137:66"><condition pos:start="137:37" pos:end="137:51"><expr pos:start="137:37" pos:end="137:49"><operator pos:start="137:37" pos:end="137:37">(</operator><name pos:start="137:38" pos:end="137:44"><name pos:start="137:38" pos:end="137:38">r</name><operator pos:start="137:39" pos:end="137:40">-&gt;</operator><name pos:start="137:41" pos:end="137:44">argc</name></name> <operator pos:start="137:46" pos:end="137:46">&gt;</operator> <literal type="number" pos:start="137:48" pos:end="137:48">0</literal><operator pos:start="137:49" pos:end="137:49">)</operator></expr> ?</condition><then pos:start="137:53" pos:end="137:62"> <expr pos:start="137:53" pos:end="137:62"><name pos:start="137:53" pos:end="137:62"><name pos:start="137:53" pos:end="137:53">r</name><operator pos:start="137:54" pos:end="137:55">-&gt;</operator><name pos:start="137:56" pos:end="137:59">argv</name><index pos:start="137:60" pos:end="137:62">[<expr pos:start="137:61" pos:end="137:61"><literal type="number" pos:start="137:61" pos:end="137:61">0</literal></expr>]</index></name></expr> </then><else pos:start="137:64" pos:end="137:66">: <expr pos:start="137:66" pos:end="137:66"><literal type="number" pos:start="137:66" pos:end="137:66">0</literal></expr></else></ternary></expr></argument>,

                                    <argument pos:start="139:37" pos:end="139:66"><expr pos:start="139:37" pos:end="139:66"><ternary pos:start="139:37" pos:end="139:66"><condition pos:start="139:37" pos:end="139:51"><expr pos:start="139:37" pos:end="139:49"><operator pos:start="139:37" pos:end="139:37">(</operator><name pos:start="139:38" pos:end="139:44"><name pos:start="139:38" pos:end="139:38">r</name><operator pos:start="139:39" pos:end="139:40">-&gt;</operator><name pos:start="139:41" pos:end="139:44">argc</name></name> <operator pos:start="139:46" pos:end="139:46">&gt;</operator> <literal type="number" pos:start="139:48" pos:end="139:48">1</literal><operator pos:start="139:49" pos:end="139:49">)</operator></expr> ?</condition><then pos:start="139:53" pos:end="139:62"> <expr pos:start="139:53" pos:end="139:62"><name pos:start="139:53" pos:end="139:62"><name pos:start="139:53" pos:end="139:53">r</name><operator pos:start="139:54" pos:end="139:55">-&gt;</operator><name pos:start="139:56" pos:end="139:59">argv</name><index pos:start="139:60" pos:end="139:62">[<expr pos:start="139:61" pos:end="139:61"><literal type="number" pos:start="139:61" pos:end="139:61">1</literal></expr>]</index></name></expr> </then><else pos:start="139:64" pos:end="139:66">: <expr pos:start="139:66" pos:end="139:66"><literal type="number" pos:start="139:66" pos:end="139:66">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:51"><expr pos:start="143:13" pos:end="143:50"><name pos:start="143:13" pos:end="143:28"><name pos:start="143:13" pos:end="143:21">container</name><operator pos:start="143:22" pos:end="143:22">.</operator><name pos:start="143:23" pos:end="143:28">length</name></name> <operator pos:start="143:30" pos:end="143:30">=</operator> <call pos:start="143:32" pos:end="143:50"><name pos:start="143:32" pos:end="143:42">cpu_to_le32</name><argument_list pos:start="143:43" pos:end="143:50">(<argument pos:start="143:44" pos:end="143:49"><expr pos:start="143:44" pos:end="143:49"><name pos:start="143:44" pos:end="143:49">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:58"><expr pos:start="145:13" pos:end="145:57"><name pos:start="145:13" pos:end="145:26"><name pos:start="145:13" pos:end="145:21">container</name><operator pos:start="145:22" pos:end="145:22">.</operator><name pos:start="145:23" pos:end="145:26">type</name></name>   <operator pos:start="145:30" pos:end="145:30">=</operator> <call pos:start="145:32" pos:end="145:57"><name pos:start="145:32" pos:end="145:42">cpu_to_le16</name><argument_list pos:start="145:43" pos:end="145:57">(<argument pos:start="145:44" pos:end="145:56"><expr pos:start="145:44" pos:end="145:56"><name pos:start="145:44" pos:end="145:56">TYPE_RESPONSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:52"><expr pos:start="147:13" pos:end="147:51"><name pos:start="147:13" pos:end="147:26"><name pos:start="147:13" pos:end="147:21">container</name><operator pos:start="147:22" pos:end="147:22">.</operator><name pos:start="147:23" pos:end="147:26">code</name></name>   <operator pos:start="147:30" pos:end="147:30">=</operator> <call pos:start="147:32" pos:end="147:51"><name pos:start="147:32" pos:end="147:42">cpu_to_le16</name><argument_list pos:start="147:43" pos:end="147:51">(<argument pos:start="147:44" pos:end="147:50"><expr pos:start="147:44" pos:end="147:50"><name pos:start="147:44" pos:end="147:50"><name pos:start="147:44" pos:end="147:44">r</name><operator pos:start="147:45" pos:end="147:46">-&gt;</operator><name pos:start="147:47" pos:end="147:50">code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:53"><expr pos:start="149:13" pos:end="149:52"><name pos:start="149:13" pos:end="149:27"><name pos:start="149:13" pos:end="149:21">container</name><operator pos:start="149:22" pos:end="149:22">.</operator><name pos:start="149:23" pos:end="149:27">trans</name></name>  <operator pos:start="149:30" pos:end="149:30">=</operator> <call pos:start="149:32" pos:end="149:52"><name pos:start="149:32" pos:end="149:42">cpu_to_le32</name><argument_list pos:start="149:43" pos:end="149:52">(<argument pos:start="149:44" pos:end="149:51"><expr pos:start="149:44" pos:end="149:51"><name pos:start="149:44" pos:end="149:51"><name pos:start="149:44" pos:end="149:44">r</name><operator pos:start="149:45" pos:end="149:46">-&gt;</operator><name pos:start="149:47" pos:end="149:51">trans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="151:13" pos:end="155:13">for <control pos:start="151:17" pos:end="151:41">(<init pos:start="151:18" pos:end="151:23"><expr pos:start="151:18" pos:end="151:22"><name pos:start="151:18" pos:end="151:18">i</name> <operator pos:start="151:20" pos:end="151:20">=</operator> <literal type="number" pos:start="151:22" pos:end="151:22">0</literal></expr>;</init> <condition pos:start="151:25" pos:end="151:36"><expr pos:start="151:25" pos:end="151:35"><name pos:start="151:25" pos:end="151:25">i</name> <operator pos:start="151:27" pos:end="151:27">&lt;</operator> <name pos:start="151:29" pos:end="151:35"><name pos:start="151:29" pos:end="151:29">r</name><operator pos:start="151:30" pos:end="151:31">-&gt;</operator><name pos:start="151:32" pos:end="151:35">argc</name></name></expr>;</condition> <incr pos:start="151:38" pos:end="151:40"><expr pos:start="151:38" pos:end="151:40"><name pos:start="151:38" pos:end="151:38">i</name><operator pos:start="151:39" pos:end="151:40">++</operator></expr></incr>)</control> <block pos:start="151:43" pos:end="155:13">{<block_content pos:start="153:17" pos:end="153:52">

                <expr_stmt pos:start="153:17" pos:end="153:52"><expr pos:start="153:17" pos:end="153:51"><name pos:start="153:17" pos:end="153:25"><name pos:start="153:17" pos:end="153:22">params</name><index pos:start="153:23" pos:end="153:25">[<expr pos:start="153:24" pos:end="153:24"><name pos:start="153:24" pos:end="153:24">i</name></expr>]</index></name> <operator pos:start="153:27" pos:end="153:27">=</operator> <call pos:start="153:29" pos:end="153:51"><name pos:start="153:29" pos:end="153:39">cpu_to_le32</name><argument_list pos:start="153:40" pos:end="153:51">(<argument pos:start="153:41" pos:end="153:50"><expr pos:start="153:41" pos:end="153:50"><name pos:start="153:41" pos:end="153:50"><name pos:start="153:41" pos:end="153:41">r</name><operator pos:start="153:42" pos:end="153:43">-&gt;</operator><name pos:start="153:44" pos:end="153:47">argv</name><index pos:start="153:48" pos:end="153:50">[<expr pos:start="153:49" pos:end="153:49"><name pos:start="153:49" pos:end="153:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="157:13" pos:end="157:62"><expr pos:start="157:13" pos:end="157:61"><call pos:start="157:13" pos:end="157:61"><name pos:start="157:13" pos:end="157:27">usb_packet_copy</name><argument_list pos:start="157:28" pos:end="157:61">(<argument pos:start="157:29" pos:end="157:29"><expr pos:start="157:29" pos:end="157:29"><name pos:start="157:29" pos:end="157:29">p</name></expr></argument>, <argument pos:start="157:32" pos:end="157:41"><expr pos:start="157:32" pos:end="157:41"><operator pos:start="157:32" pos:end="157:32">&amp;</operator><name pos:start="157:33" pos:end="157:41">container</name></expr></argument>, <argument pos:start="157:44" pos:end="157:60"><expr pos:start="157:44" pos:end="157:60"><sizeof pos:start="157:44" pos:end="157:60">sizeof<argument_list pos:start="157:50" pos:end="157:60">(<argument pos:start="157:51" pos:end="157:59"><expr pos:start="157:51" pos:end="157:59"><name pos:start="157:51" pos:end="157:59">container</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:68"><expr pos:start="159:13" pos:end="159:67"><call pos:start="159:13" pos:end="159:67"><name pos:start="159:13" pos:end="159:27">usb_packet_copy</name><argument_list pos:start="159:28" pos:end="159:67">(<argument pos:start="159:29" pos:end="159:29"><expr pos:start="159:29" pos:end="159:29"><name pos:start="159:29" pos:end="159:29">p</name></expr></argument>, <argument pos:start="159:32" pos:end="159:38"><expr pos:start="159:32" pos:end="159:38"><operator pos:start="159:32" pos:end="159:32">&amp;</operator><name pos:start="159:33" pos:end="159:38">params</name></expr></argument>, <argument pos:start="159:41" pos:end="159:66"><expr pos:start="159:41" pos:end="159:66"><name pos:start="159:41" pos:end="159:46">length</name> <operator pos:start="159:48" pos:end="159:48">-</operator> <sizeof pos:start="159:50" pos:end="159:66">sizeof<argument_list pos:start="159:56" pos:end="159:66">(<argument pos:start="159:57" pos:end="159:65"><expr pos:start="159:57" pos:end="159:65"><name pos:start="159:57" pos:end="159:65">container</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:30"><expr pos:start="161:13" pos:end="161:29"><call pos:start="161:13" pos:end="161:29"><name pos:start="161:13" pos:end="161:18">g_free</name><argument_list pos:start="161:19" pos:end="161:29">(<argument pos:start="161:20" pos:end="161:28"><expr pos:start="161:20" pos:end="161:28"><name pos:start="161:20" pos:end="161:28"><name pos:start="161:20" pos:end="161:20">s</name><operator pos:start="161:21" pos:end="161:22">-&gt;</operator><name pos:start="161:23" pos:end="161:28">result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:29"><expr pos:start="163:13" pos:end="163:28"><name pos:start="163:13" pos:end="163:21"><name pos:start="163:13" pos:end="163:13">s</name><operator pos:start="163:14" pos:end="163:15">-&gt;</operator><name pos:start="163:16" pos:end="163:21">result</name></name> <operator pos:start="163:23" pos:end="163:23">=</operator> <name pos:start="163:25" pos:end="163:28">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="167:9" pos:end="167:14">break;</break>

    <case pos:start="169:5" pos:end="169:21">case <expr pos:start="169:10" pos:end="169:20"><name pos:start="169:10" pos:end="169:20">EP_DATA_OUT</name></expr>:</case>

        <if_stmt pos:start="171:9" pos:end="179:9"><if pos:start="171:9" pos:end="179:9">if <condition pos:start="171:12" pos:end="171:44">(<expr pos:start="171:13" pos:end="171:43"><name pos:start="171:13" pos:end="171:23"><name pos:start="171:13" pos:end="171:13">p</name><operator pos:start="171:14" pos:end="171:15">-&gt;</operator><name pos:start="171:16" pos:end="171:18">iov</name><operator pos:start="171:19" pos:end="171:19">.</operator><name pos:start="171:20" pos:end="171:23">size</name></name> <operator pos:start="171:25" pos:end="171:25">&lt;</operator> <sizeof pos:start="171:27" pos:end="171:43">sizeof<argument_list pos:start="171:33" pos:end="171:43">(<argument pos:start="171:34" pos:end="171:42"><expr pos:start="171:34" pos:end="171:42"><name pos:start="171:34" pos:end="171:42">container</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="171:46" pos:end="179:9">{<block_content pos:start="173:13" pos:end="177:19">

            <expr_stmt pos:start="173:13" pos:end="173:65"><expr pos:start="173:13" pos:end="173:64"><call pos:start="173:13" pos:end="173:64"><name pos:start="173:13" pos:end="173:31">trace_usb_mtp_stall</name><argument_list pos:start="173:32" pos:end="173:64">(<argument pos:start="173:33" pos:end="173:43"><expr pos:start="173:33" pos:end="173:43"><name pos:start="173:33" pos:end="173:43"><name pos:start="173:33" pos:end="173:33">s</name><operator pos:start="173:34" pos:end="173:35">-&gt;</operator><name pos:start="173:36" pos:end="173:38">dev</name><operator pos:start="173:39" pos:end="173:39">.</operator><name pos:start="173:40" pos:end="173:43">addr</name></name></expr></argument>, <argument pos:start="173:46" pos:end="173:63"><expr pos:start="173:46" pos:end="173:63"><literal type="string" pos:start="173:46" pos:end="173:63">"packet too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:38"><expr pos:start="175:13" pos:end="175:37"><name pos:start="175:13" pos:end="175:21"><name pos:start="175:13" pos:end="175:13">p</name><operator pos:start="175:14" pos:end="175:15">-&gt;</operator><name pos:start="175:16" pos:end="175:21">status</name></name> <operator pos:start="175:23" pos:end="175:23">=</operator> <name pos:start="175:25" pos:end="175:37">USB_RET_STALL</name></expr>;</expr_stmt>

            <return pos:start="177:13" pos:end="177:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:58"><expr pos:start="181:9" pos:end="181:57"><call pos:start="181:9" pos:end="181:57"><name pos:start="181:9" pos:end="181:23">usb_packet_copy</name><argument_list pos:start="181:24" pos:end="181:57">(<argument pos:start="181:25" pos:end="181:25"><expr pos:start="181:25" pos:end="181:25"><name pos:start="181:25" pos:end="181:25">p</name></expr></argument>, <argument pos:start="181:28" pos:end="181:37"><expr pos:start="181:28" pos:end="181:37"><operator pos:start="181:28" pos:end="181:28">&amp;</operator><name pos:start="181:29" pos:end="181:37">container</name></expr></argument>, <argument pos:start="181:40" pos:end="181:56"><expr pos:start="181:40" pos:end="181:56"><sizeof pos:start="181:40" pos:end="181:56">sizeof<argument_list pos:start="181:46" pos:end="181:56">(<argument pos:start="181:47" pos:end="181:55"><expr pos:start="181:47" pos:end="181:55"><name pos:start="181:47" pos:end="181:55">container</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="183:9" pos:end="253:9">switch <condition pos:start="183:16" pos:end="183:44">(<expr pos:start="183:17" pos:end="183:43"><call pos:start="183:17" pos:end="183:43"><name pos:start="183:17" pos:end="183:27">le16_to_cpu</name><argument_list pos:start="183:28" pos:end="183:43">(<argument pos:start="183:29" pos:end="183:42"><expr pos:start="183:29" pos:end="183:42"><name pos:start="183:29" pos:end="183:42"><name pos:start="183:29" pos:end="183:37">container</name><operator pos:start="183:38" pos:end="183:38">.</operator><name pos:start="183:39" pos:end="183:42">type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="183:46" pos:end="253:9">{<block_content pos:start="185:9" pos:end="251:19">

        <case pos:start="185:9" pos:end="185:26">case <expr pos:start="185:14" pos:end="185:25"><name pos:start="185:14" pos:end="185:25">TYPE_COMMAND</name></expr>:</case>

            <if_stmt pos:start="187:13" pos:end="195:13"><if pos:start="187:13" pos:end="195:13">if <condition pos:start="187:16" pos:end="187:55">(<expr pos:start="187:17" pos:end="187:54"><name pos:start="187:17" pos:end="187:26"><name pos:start="187:17" pos:end="187:17">s</name><operator pos:start="187:18" pos:end="187:19">-&gt;</operator><name pos:start="187:20" pos:end="187:26">data_in</name></name> <operator pos:start="187:28" pos:end="187:29">||</operator> <name pos:start="187:31" pos:end="187:41"><name pos:start="187:31" pos:end="187:31">s</name><operator pos:start="187:32" pos:end="187:33">-&gt;</operator><name pos:start="187:34" pos:end="187:41">data_out</name></name> <operator pos:start="187:43" pos:end="187:44">||</operator> <name pos:start="187:46" pos:end="187:54"><name pos:start="187:46" pos:end="187:46">s</name><operator pos:start="187:47" pos:end="187:48">-&gt;</operator><name pos:start="187:49" pos:end="187:54">result</name></name></expr>)</condition> <block pos:start="187:57" pos:end="195:13">{<block_content pos:start="189:17" pos:end="193:23">

                <expr_stmt pos:start="189:17" pos:end="189:73"><expr pos:start="189:17" pos:end="189:72"><call pos:start="189:17" pos:end="189:72"><name pos:start="189:17" pos:end="189:35">trace_usb_mtp_stall</name><argument_list pos:start="189:36" pos:end="189:72">(<argument pos:start="189:37" pos:end="189:47"><expr pos:start="189:37" pos:end="189:47"><name pos:start="189:37" pos:end="189:47"><name pos:start="189:37" pos:end="189:37">s</name><operator pos:start="189:38" pos:end="189:39">-&gt;</operator><name pos:start="189:40" pos:end="189:42">dev</name><operator pos:start="189:43" pos:end="189:43">.</operator><name pos:start="189:44" pos:end="189:47">addr</name></name></expr></argument>, <argument pos:start="189:50" pos:end="189:71"><expr pos:start="189:50" pos:end="189:71"><literal type="string" pos:start="189:50" pos:end="189:71">"transaction inflight"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="191:17" pos:end="191:42"><expr pos:start="191:17" pos:end="191:41"><name pos:start="191:17" pos:end="191:25"><name pos:start="191:17" pos:end="191:17">p</name><operator pos:start="191:18" pos:end="191:19">-&gt;</operator><name pos:start="191:20" pos:end="191:25">status</name></name> <operator pos:start="191:27" pos:end="191:27">=</operator> <name pos:start="191:29" pos:end="191:41">USB_RET_STALL</name></expr>;</expr_stmt>

                <return pos:start="193:17" pos:end="193:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:51"><expr pos:start="197:13" pos:end="197:50"><name pos:start="197:13" pos:end="197:20"><name pos:start="197:13" pos:end="197:15">cmd</name><operator pos:start="197:16" pos:end="197:16">.</operator><name pos:start="197:17" pos:end="197:20">code</name></name> <operator pos:start="197:22" pos:end="197:22">=</operator> <call pos:start="197:24" pos:end="197:50"><name pos:start="197:24" pos:end="197:34">le16_to_cpu</name><argument_list pos:start="197:35" pos:end="197:50">(<argument pos:start="197:36" pos:end="197:49"><expr pos:start="197:36" pos:end="197:49"><name pos:start="197:36" pos:end="197:49"><name pos:start="197:36" pos:end="197:44">container</name><operator pos:start="197:45" pos:end="197:45">.</operator><name pos:start="197:46" pos:end="197:49">code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="199:13" pos:end="201:35"><expr pos:start="199:13" pos:end="201:34"><name pos:start="199:13" pos:end="199:20"><name pos:start="199:13" pos:end="199:15">cmd</name><operator pos:start="199:16" pos:end="199:16">.</operator><name pos:start="199:17" pos:end="199:20">argc</name></name> <operator pos:start="199:22" pos:end="199:22">=</operator> <operator pos:start="199:24" pos:end="199:24">(</operator><call pos:start="199:25" pos:end="199:53"><name pos:start="199:25" pos:end="199:35">le32_to_cpu</name><argument_list pos:start="199:36" pos:end="199:53">(<argument pos:start="199:37" pos:end="199:52"><expr pos:start="199:37" pos:end="199:52"><name pos:start="199:37" pos:end="199:52"><name pos:start="199:37" pos:end="199:45">container</name><operator pos:start="199:46" pos:end="199:46">.</operator><name pos:start="199:47" pos:end="199:52">length</name></name></expr></argument>)</argument_list></call> <operator pos:start="199:55" pos:end="199:55">-</operator> <sizeof pos:start="199:57" pos:end="199:73">sizeof<argument_list pos:start="199:63" pos:end="199:73">(<argument pos:start="199:64" pos:end="199:72"><expr pos:start="199:64" pos:end="199:72"><name pos:start="199:64" pos:end="199:72">container</name></expr></argument>)</argument_list></sizeof><operator pos:start="199:74" pos:end="199:74">)</operator>

                <operator pos:start="201:17" pos:end="201:17">/</operator> <sizeof pos:start="201:19" pos:end="201:34">sizeof<argument_list pos:start="201:25" pos:end="201:34">(<argument pos:start="201:26" pos:end="201:33"><expr pos:start="201:26" pos:end="201:33"><name pos:start="201:26" pos:end="201:33">uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:53"><expr pos:start="203:13" pos:end="203:52"><name pos:start="203:13" pos:end="203:21"><name pos:start="203:13" pos:end="203:15">cmd</name><operator pos:start="203:16" pos:end="203:16">.</operator><name pos:start="203:17" pos:end="203:21">trans</name></name> <operator pos:start="203:23" pos:end="203:23">=</operator> <call pos:start="203:25" pos:end="203:52"><name pos:start="203:25" pos:end="203:35">le32_to_cpu</name><argument_list pos:start="203:36" pos:end="203:52">(<argument pos:start="203:37" pos:end="203:51"><expr pos:start="203:37" pos:end="203:51"><name pos:start="203:37" pos:end="203:51"><name pos:start="203:37" pos:end="203:45">container</name><operator pos:start="203:46" pos:end="203:46">.</operator><name pos:start="203:47" pos:end="203:51">trans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="205:13" pos:end="209:13"><if pos:start="205:13" pos:end="209:13">if <condition pos:start="205:16" pos:end="205:48">(<expr pos:start="205:17" pos:end="205:47"><name pos:start="205:17" pos:end="205:24"><name pos:start="205:17" pos:end="205:19">cmd</name><operator pos:start="205:20" pos:end="205:20">.</operator><name pos:start="205:21" pos:end="205:24">argc</name></name> <operator pos:start="205:26" pos:end="205:26">&gt;</operator> <call pos:start="205:28" pos:end="205:47"><name pos:start="205:28" pos:end="205:37">ARRAY_SIZE</name><argument_list pos:start="205:38" pos:end="205:47">(<argument pos:start="205:39" pos:end="205:46"><expr pos:start="205:39" pos:end="205:46"><name pos:start="205:39" pos:end="205:46"><name pos:start="205:39" pos:end="205:41">cmd</name><operator pos:start="205:42" pos:end="205:42">.</operator><name pos:start="205:43" pos:end="205:46">argv</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="205:50" pos:end="209:13">{<block_content pos:start="207:17" pos:end="207:48">

                <expr_stmt pos:start="207:17" pos:end="207:48"><expr pos:start="207:17" pos:end="207:47"><name pos:start="207:17" pos:end="207:24"><name pos:start="207:17" pos:end="207:19">cmd</name><operator pos:start="207:20" pos:end="207:20">.</operator><name pos:start="207:21" pos:end="207:24">argc</name></name> <operator pos:start="207:26" pos:end="207:26">=</operator> <call pos:start="207:28" pos:end="207:47"><name pos:start="207:28" pos:end="207:37">ARRAY_SIZE</name><argument_list pos:start="207:38" pos:end="207:47">(<argument pos:start="207:39" pos:end="207:46"><expr pos:start="207:39" pos:end="207:46"><name pos:start="207:39" pos:end="207:46"><name pos:start="207:39" pos:end="207:41">cmd</name><operator pos:start="207:42" pos:end="207:42">.</operator><name pos:start="207:43" pos:end="207:46">argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="211:13" pos:end="219:13"><if pos:start="211:13" pos:end="219:13">if <condition pos:start="211:16" pos:end="211:78">(<expr pos:start="211:17" pos:end="211:77"><name pos:start="211:17" pos:end="211:27"><name pos:start="211:17" pos:end="211:17">p</name><operator pos:start="211:18" pos:end="211:19">-&gt;</operator><name pos:start="211:20" pos:end="211:22">iov</name><operator pos:start="211:23" pos:end="211:23">.</operator><name pos:start="211:24" pos:end="211:27">size</name></name> <operator pos:start="211:29" pos:end="211:29">&lt;</operator> <sizeof pos:start="211:31" pos:end="211:47">sizeof<argument_list pos:start="211:37" pos:end="211:47">(<argument pos:start="211:38" pos:end="211:46"><expr pos:start="211:38" pos:end="211:46"><name pos:start="211:38" pos:end="211:46">container</name></expr></argument>)</argument_list></sizeof> <operator pos:start="211:49" pos:end="211:49">+</operator> <name pos:start="211:51" pos:end="211:58"><name pos:start="211:51" pos:end="211:53">cmd</name><operator pos:start="211:54" pos:end="211:54">.</operator><name pos:start="211:55" pos:end="211:58">argc</name></name> <operator pos:start="211:60" pos:end="211:60">*</operator> <sizeof pos:start="211:62" pos:end="211:77">sizeof<argument_list pos:start="211:68" pos:end="211:77">(<argument pos:start="211:69" pos:end="211:76"><expr pos:start="211:69" pos:end="211:76"><name pos:start="211:69" pos:end="211:76">uint32_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="211:80" pos:end="219:13">{<block_content pos:start="213:17" pos:end="217:23">

                <expr_stmt pos:start="213:17" pos:end="213:69"><expr pos:start="213:17" pos:end="213:68"><call pos:start="213:17" pos:end="213:68"><name pos:start="213:17" pos:end="213:35">trace_usb_mtp_stall</name><argument_list pos:start="213:36" pos:end="213:68">(<argument pos:start="213:37" pos:end="213:47"><expr pos:start="213:37" pos:end="213:47"><name pos:start="213:37" pos:end="213:47"><name pos:start="213:37" pos:end="213:37">s</name><operator pos:start="213:38" pos:end="213:39">-&gt;</operator><name pos:start="213:40" pos:end="213:42">dev</name><operator pos:start="213:43" pos:end="213:43">.</operator><name pos:start="213:44" pos:end="213:47">addr</name></name></expr></argument>, <argument pos:start="213:50" pos:end="213:67"><expr pos:start="213:50" pos:end="213:67"><literal type="string" pos:start="213:50" pos:end="213:67">"packet too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="215:17" pos:end="215:42"><expr pos:start="215:17" pos:end="215:41"><name pos:start="215:17" pos:end="215:25"><name pos:start="215:17" pos:end="215:17">p</name><operator pos:start="215:18" pos:end="215:19">-&gt;</operator><name pos:start="215:20" pos:end="215:25">status</name></name> <operator pos:start="215:27" pos:end="215:27">=</operator> <name pos:start="215:29" pos:end="215:41">USB_RET_STALL</name></expr>;</expr_stmt>

                <return pos:start="217:17" pos:end="217:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:69"><expr pos:start="221:13" pos:end="221:68"><call pos:start="221:13" pos:end="221:68"><name pos:start="221:13" pos:end="221:27">usb_packet_copy</name><argument_list pos:start="221:28" pos:end="221:68">(<argument pos:start="221:29" pos:end="221:29"><expr pos:start="221:29" pos:end="221:29"><name pos:start="221:29" pos:end="221:29">p</name></expr></argument>, <argument pos:start="221:32" pos:end="221:38"><expr pos:start="221:32" pos:end="221:38"><operator pos:start="221:32" pos:end="221:32">&amp;</operator><name pos:start="221:33" pos:end="221:38">params</name></expr></argument>, <argument pos:start="221:41" pos:end="221:67"><expr pos:start="221:41" pos:end="221:67"><name pos:start="221:41" pos:end="221:48"><name pos:start="221:41" pos:end="221:43">cmd</name><operator pos:start="221:44" pos:end="221:44">.</operator><name pos:start="221:45" pos:end="221:48">argc</name></name> <operator pos:start="221:50" pos:end="221:50">*</operator> <sizeof pos:start="221:52" pos:end="221:67">sizeof<argument_list pos:start="221:58" pos:end="221:67">(<argument pos:start="221:59" pos:end="221:66"><expr pos:start="221:59" pos:end="221:66"><name pos:start="221:59" pos:end="221:66">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="223:13" pos:end="227:13">for <control pos:start="223:17" pos:end="223:42">(<init pos:start="223:18" pos:end="223:23"><expr pos:start="223:18" pos:end="223:22"><name pos:start="223:18" pos:end="223:18">i</name> <operator pos:start="223:20" pos:end="223:20">=</operator> <literal type="number" pos:start="223:22" pos:end="223:22">0</literal></expr>;</init> <condition pos:start="223:25" pos:end="223:37"><expr pos:start="223:25" pos:end="223:36"><name pos:start="223:25" pos:end="223:25">i</name> <operator pos:start="223:27" pos:end="223:27">&lt;</operator> <name pos:start="223:29" pos:end="223:36"><name pos:start="223:29" pos:end="223:31">cmd</name><operator pos:start="223:32" pos:end="223:32">.</operator><name pos:start="223:33" pos:end="223:36">argc</name></name></expr>;</condition> <incr pos:start="223:39" pos:end="223:41"><expr pos:start="223:39" pos:end="223:41"><name pos:start="223:39" pos:end="223:39">i</name><operator pos:start="223:40" pos:end="223:41">++</operator></expr></incr>)</control> <block pos:start="223:44" pos:end="227:13">{<block_content pos:start="225:17" pos:end="225:53">

                <expr_stmt pos:start="225:17" pos:end="225:53"><expr pos:start="225:17" pos:end="225:52"><name pos:start="225:17" pos:end="225:27"><name pos:start="225:17" pos:end="225:19">cmd</name><operator pos:start="225:20" pos:end="225:20">.</operator><name pos:start="225:21" pos:end="225:24">argv</name><index pos:start="225:25" pos:end="225:27">[<expr pos:start="225:26" pos:end="225:26"><name pos:start="225:26" pos:end="225:26">i</name></expr>]</index></name> <operator pos:start="225:29" pos:end="225:29">=</operator> <call pos:start="225:31" pos:end="225:52"><name pos:start="225:31" pos:end="225:41">le32_to_cpu</name><argument_list pos:start="225:42" pos:end="225:52">(<argument pos:start="225:43" pos:end="225:51"><expr pos:start="225:43" pos:end="225:51"><name pos:start="225:43" pos:end="225:51"><name pos:start="225:43" pos:end="225:48">params</name><index pos:start="225:49" pos:end="225:51">[<expr pos:start="225:50" pos:end="225:50"><name pos:start="225:50" pos:end="225:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="229:13" pos:end="239:68"><expr pos:start="229:13" pos:end="239:67"><call pos:start="229:13" pos:end="239:67"><name pos:start="229:13" pos:end="229:33">trace_usb_mtp_command</name><argument_list pos:start="229:34" pos:end="239:67">(<argument pos:start="229:35" pos:end="229:45"><expr pos:start="229:35" pos:end="229:45"><name pos:start="229:35" pos:end="229:45"><name pos:start="229:35" pos:end="229:35">s</name><operator pos:start="229:36" pos:end="229:37">-&gt;</operator><name pos:start="229:38" pos:end="229:40">dev</name><operator pos:start="229:41" pos:end="229:41">.</operator><name pos:start="229:42" pos:end="229:45">addr</name></name></expr></argument>, <argument pos:start="229:48" pos:end="229:55"><expr pos:start="229:48" pos:end="229:55"><name pos:start="229:48" pos:end="229:55"><name pos:start="229:48" pos:end="229:50">cmd</name><operator pos:start="229:51" pos:end="229:51">.</operator><name pos:start="229:52" pos:end="229:55">code</name></name></expr></argument>, <argument pos:start="229:58" pos:end="229:66"><expr pos:start="229:58" pos:end="229:66"><name pos:start="229:58" pos:end="229:66"><name pos:start="229:58" pos:end="229:60">cmd</name><operator pos:start="229:61" pos:end="229:61">.</operator><name pos:start="229:62" pos:end="229:66">trans</name></name></expr></argument>,

                                  <argument pos:start="231:35" pos:end="231:66"><expr pos:start="231:35" pos:end="231:66"><ternary pos:start="231:35" pos:end="231:66"><condition pos:start="231:35" pos:end="231:50"><expr pos:start="231:35" pos:end="231:48"><operator pos:start="231:35" pos:end="231:35">(</operator><name pos:start="231:36" pos:end="231:43"><name pos:start="231:36" pos:end="231:38">cmd</name><operator pos:start="231:39" pos:end="231:39">.</operator><name pos:start="231:40" pos:end="231:43">argc</name></name> <operator pos:start="231:45" pos:end="231:45">&gt;</operator> <literal type="number" pos:start="231:47" pos:end="231:47">0</literal><operator pos:start="231:48" pos:end="231:48">)</operator></expr> ?</condition><then pos:start="231:52" pos:end="231:62"> <expr pos:start="231:52" pos:end="231:62"><name pos:start="231:52" pos:end="231:62"><name pos:start="231:52" pos:end="231:54">cmd</name><operator pos:start="231:55" pos:end="231:55">.</operator><name pos:start="231:56" pos:end="231:59">argv</name><index pos:start="231:60" pos:end="231:62">[<expr pos:start="231:61" pos:end="231:61"><literal type="number" pos:start="231:61" pos:end="231:61">0</literal></expr>]</index></name></expr> </then><else pos:start="231:64" pos:end="231:66">: <expr pos:start="231:66" pos:end="231:66"><literal type="number" pos:start="231:66" pos:end="231:66">0</literal></expr></else></ternary></expr></argument>,

                                  <argument pos:start="233:35" pos:end="233:66"><expr pos:start="233:35" pos:end="233:66"><ternary pos:start="233:35" pos:end="233:66"><condition pos:start="233:35" pos:end="233:50"><expr pos:start="233:35" pos:end="233:48"><operator pos:start="233:35" pos:end="233:35">(</operator><name pos:start="233:36" pos:end="233:43"><name pos:start="233:36" pos:end="233:38">cmd</name><operator pos:start="233:39" pos:end="233:39">.</operator><name pos:start="233:40" pos:end="233:43">argc</name></name> <operator pos:start="233:45" pos:end="233:45">&gt;</operator> <literal type="number" pos:start="233:47" pos:end="233:47">1</literal><operator pos:start="233:48" pos:end="233:48">)</operator></expr> ?</condition><then pos:start="233:52" pos:end="233:62"> <expr pos:start="233:52" pos:end="233:62"><name pos:start="233:52" pos:end="233:62"><name pos:start="233:52" pos:end="233:54">cmd</name><operator pos:start="233:55" pos:end="233:55">.</operator><name pos:start="233:56" pos:end="233:59">argv</name><index pos:start="233:60" pos:end="233:62">[<expr pos:start="233:61" pos:end="233:61"><literal type="number" pos:start="233:61" pos:end="233:61">1</literal></expr>]</index></name></expr> </then><else pos:start="233:64" pos:end="233:66">: <expr pos:start="233:66" pos:end="233:66"><literal type="number" pos:start="233:66" pos:end="233:66">0</literal></expr></else></ternary></expr></argument>,

                                  <argument pos:start="235:35" pos:end="235:66"><expr pos:start="235:35" pos:end="235:66"><ternary pos:start="235:35" pos:end="235:66"><condition pos:start="235:35" pos:end="235:50"><expr pos:start="235:35" pos:end="235:48"><operator pos:start="235:35" pos:end="235:35">(</operator><name pos:start="235:36" pos:end="235:43"><name pos:start="235:36" pos:end="235:38">cmd</name><operator pos:start="235:39" pos:end="235:39">.</operator><name pos:start="235:40" pos:end="235:43">argc</name></name> <operator pos:start="235:45" pos:end="235:45">&gt;</operator> <literal type="number" pos:start="235:47" pos:end="235:47">2</literal><operator pos:start="235:48" pos:end="235:48">)</operator></expr> ?</condition><then pos:start="235:52" pos:end="235:62"> <expr pos:start="235:52" pos:end="235:62"><name pos:start="235:52" pos:end="235:62"><name pos:start="235:52" pos:end="235:54">cmd</name><operator pos:start="235:55" pos:end="235:55">.</operator><name pos:start="235:56" pos:end="235:59">argv</name><index pos:start="235:60" pos:end="235:62">[<expr pos:start="235:61" pos:end="235:61"><literal type="number" pos:start="235:61" pos:end="235:61">2</literal></expr>]</index></name></expr> </then><else pos:start="235:64" pos:end="235:66">: <expr pos:start="235:66" pos:end="235:66"><literal type="number" pos:start="235:66" pos:end="235:66">0</literal></expr></else></ternary></expr></argument>,

                                  <argument pos:start="237:35" pos:end="237:66"><expr pos:start="237:35" pos:end="237:66"><ternary pos:start="237:35" pos:end="237:66"><condition pos:start="237:35" pos:end="237:50"><expr pos:start="237:35" pos:end="237:48"><operator pos:start="237:35" pos:end="237:35">(</operator><name pos:start="237:36" pos:end="237:43"><name pos:start="237:36" pos:end="237:38">cmd</name><operator pos:start="237:39" pos:end="237:39">.</operator><name pos:start="237:40" pos:end="237:43">argc</name></name> <operator pos:start="237:45" pos:end="237:45">&gt;</operator> <literal type="number" pos:start="237:47" pos:end="237:47">3</literal><operator pos:start="237:48" pos:end="237:48">)</operator></expr> ?</condition><then pos:start="237:52" pos:end="237:62"> <expr pos:start="237:52" pos:end="237:62"><name pos:start="237:52" pos:end="237:62"><name pos:start="237:52" pos:end="237:54">cmd</name><operator pos:start="237:55" pos:end="237:55">.</operator><name pos:start="237:56" pos:end="237:59">argv</name><index pos:start="237:60" pos:end="237:62">[<expr pos:start="237:61" pos:end="237:61"><literal type="number" pos:start="237:61" pos:end="237:61">3</literal></expr>]</index></name></expr> </then><else pos:start="237:64" pos:end="237:66">: <expr pos:start="237:66" pos:end="237:66"><literal type="number" pos:start="237:66" pos:end="237:66">0</literal></expr></else></ternary></expr></argument>,

                                  <argument pos:start="239:35" pos:end="239:66"><expr pos:start="239:35" pos:end="239:66"><ternary pos:start="239:35" pos:end="239:66"><condition pos:start="239:35" pos:end="239:50"><expr pos:start="239:35" pos:end="239:48"><operator pos:start="239:35" pos:end="239:35">(</operator><name pos:start="239:36" pos:end="239:43"><name pos:start="239:36" pos:end="239:38">cmd</name><operator pos:start="239:39" pos:end="239:39">.</operator><name pos:start="239:40" pos:end="239:43">argc</name></name> <operator pos:start="239:45" pos:end="239:45">&gt;</operator> <literal type="number" pos:start="239:47" pos:end="239:47">4</literal><operator pos:start="239:48" pos:end="239:48">)</operator></expr> ?</condition><then pos:start="239:52" pos:end="239:62"> <expr pos:start="239:52" pos:end="239:62"><name pos:start="239:52" pos:end="239:62"><name pos:start="239:52" pos:end="239:54">cmd</name><operator pos:start="239:55" pos:end="239:55">.</operator><name pos:start="239:56" pos:end="239:59">argv</name><index pos:start="239:60" pos:end="239:62">[<expr pos:start="239:61" pos:end="239:61"><literal type="number" pos:start="239:61" pos:end="239:61">4</literal></expr>]</index></name></expr> </then><else pos:start="239:64" pos:end="239:66">: <expr pos:start="239:66" pos:end="239:66"><literal type="number" pos:start="239:66" pos:end="239:66">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="241:13" pos:end="241:37"><expr pos:start="241:13" pos:end="241:36"><call pos:start="241:13" pos:end="241:36"><name pos:start="241:13" pos:end="241:27">usb_mtp_command</name><argument_list pos:start="241:28" pos:end="241:36">(<argument pos:start="241:29" pos:end="241:29"><expr pos:start="241:29" pos:end="241:29"><name pos:start="241:29" pos:end="241:29">s</name></expr></argument>, <argument pos:start="241:32" pos:end="241:35"><expr pos:start="241:32" pos:end="241:35"><operator pos:start="241:32" pos:end="241:32">&amp;</operator><name pos:start="241:33" pos:end="241:35">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="243:13" pos:end="243:18">break;</break>

        <default pos:start="245:9" pos:end="245:16">default:</default>

            <comment type="block" pos:start="247:13" pos:end="247:67">/* not needed as long as the mtp device is read-only */</comment>

            <expr_stmt pos:start="249:13" pos:end="249:38"><expr pos:start="249:13" pos:end="249:37"><name pos:start="249:13" pos:end="249:21"><name pos:start="249:13" pos:end="249:13">p</name><operator pos:start="249:14" pos:end="249:15">-&gt;</operator><name pos:start="249:16" pos:end="249:21">status</name></name> <operator pos:start="249:23" pos:end="249:23">=</operator> <name pos:start="249:25" pos:end="249:37">USB_RET_STALL</name></expr>;</expr_stmt>

            <return pos:start="251:13" pos:end="251:19">return;</return>

        </block_content>}</block></switch>

        <break pos:start="255:9" pos:end="255:14">break;</break>

    <case pos:start="257:5" pos:end="260:0">case <expr pos:start="257:10" pos:end="257:17"><name pos:start="257:10" pos:end="257:17">EP_EVENT</name></expr>:</case>

<cpp:ifdef pos:start="259:1" pos:end="259:16">#<cpp:directive pos:start="259:2" pos:end="259:6">ifdef</cpp:directive> <name pos:start="259:8" pos:end="259:16">__linux__</name></cpp:ifdef>

        <if_stmt pos:start="261:9" pos:end="308:0"><if pos:start="261:9" pos:end="308:0">if <condition pos:start="261:12" pos:end="261:38">(<expr pos:start="261:13" pos:end="261:37"><operator pos:start="261:13" pos:end="261:13">!</operator><call pos:start="261:14" pos:end="261:37"><name pos:start="261:14" pos:end="261:25">QTAILQ_EMPTY</name><argument_list pos:start="261:26" pos:end="261:37">(<argument pos:start="261:27" pos:end="261:36"><expr pos:start="261:27" pos:end="261:36"><operator pos:start="261:27" pos:end="261:27">&amp;</operator><name pos:start="261:28" pos:end="261:36"><name pos:start="261:28" pos:end="261:28">s</name><operator pos:start="261:29" pos:end="261:30">-&gt;</operator><name pos:start="261:31" pos:end="261:36">events</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="261:40" pos:end="308:0">{<block_content pos:start="263:13" pos:end="303:19">

            <decl_stmt pos:start="263:13" pos:end="263:68"><decl pos:start="263:13" pos:end="263:67"><type pos:start="263:13" pos:end="263:32"><name pos:start="263:13" pos:end="263:30"><name pos:start="263:13" pos:end="263:18">struct</name> <name pos:start="263:20" pos:end="263:30">MTPMonEntry</name></name> <modifier pos:start="263:32" pos:end="263:32">*</modifier></type><name pos:start="263:33" pos:end="263:33">e</name> <init pos:start="263:35" pos:end="263:67">= <expr pos:start="263:37" pos:end="263:67"><call pos:start="263:37" pos:end="263:67"><name pos:start="263:37" pos:end="263:47">QTAILQ_LAST</name><argument_list pos:start="263:48" pos:end="263:67">(<argument pos:start="263:49" pos:end="263:58"><expr pos:start="263:49" pos:end="263:58"><operator pos:start="263:49" pos:end="263:49">&amp;</operator><name pos:start="263:50" pos:end="263:58"><name pos:start="263:50" pos:end="263:50">s</name><operator pos:start="263:51" pos:end="263:52">-&gt;</operator><name pos:start="263:53" pos:end="263:58">events</name></name></expr></argument>, <argument pos:start="263:61" pos:end="263:66"><expr pos:start="263:61" pos:end="263:66"><name pos:start="263:61" pos:end="263:66">events</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="265:13" pos:end="265:28"><decl pos:start="265:13" pos:end="265:27"><type pos:start="265:13" pos:end="265:20"><name pos:start="265:13" pos:end="265:20">uint32_t</name></type> <name pos:start="265:22" pos:end="265:27">handle</name></decl>;</decl_stmt>

            <decl_stmt pos:start="267:13" pos:end="267:59"><decl pos:start="267:13" pos:end="267:58"><type pos:start="267:13" pos:end="267:15"><name pos:start="267:13" pos:end="267:15">int</name></type> <name pos:start="267:17" pos:end="267:19">len</name> <init pos:start="267:21" pos:end="267:58">= <expr pos:start="267:23" pos:end="267:58"><sizeof pos:start="267:23" pos:end="267:39">sizeof<argument_list pos:start="267:29" pos:end="267:39">(<argument pos:start="267:30" pos:end="267:38"><expr pos:start="267:30" pos:end="267:38"><name pos:start="267:30" pos:end="267:38">container</name></expr></argument>)</argument_list></sizeof> <operator pos:start="267:41" pos:end="267:41">+</operator> <sizeof pos:start="267:43" pos:end="267:58">sizeof<argument_list pos:start="267:49" pos:end="267:58">(<argument pos:start="267:50" pos:end="267:57"><expr pos:start="267:50" pos:end="267:57"><name pos:start="267:50" pos:end="267:57">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="271:13" pos:end="281:13"><if pos:start="271:13" pos:end="281:13">if <condition pos:start="271:16" pos:end="271:34">(<expr pos:start="271:17" pos:end="271:33"><name pos:start="271:17" pos:end="271:27"><name pos:start="271:17" pos:end="271:17">p</name><operator pos:start="271:18" pos:end="271:19">-&gt;</operator><name pos:start="271:20" pos:end="271:22">iov</name><operator pos:start="271:23" pos:end="271:23">.</operator><name pos:start="271:24" pos:end="271:27">size</name></name> <operator pos:start="271:29" pos:end="271:29">&lt;</operator> <name pos:start="271:31" pos:end="271:33">len</name></expr>)</condition> <block pos:start="271:36" pos:end="281:13">{<block_content pos:start="273:17" pos:end="279:23">

                <expr_stmt pos:start="273:17" pos:end="275:70"><expr pos:start="273:17" pos:end="275:69"><call pos:start="273:17" pos:end="275:69"><name pos:start="273:17" pos:end="273:35">trace_usb_mtp_stall</name><argument_list pos:start="273:36" pos:end="275:69">(<argument pos:start="273:37" pos:end="273:47"><expr pos:start="273:37" pos:end="273:47"><name pos:start="273:37" pos:end="273:47"><name pos:start="273:37" pos:end="273:37">s</name><operator pos:start="273:38" pos:end="273:39">-&gt;</operator><name pos:start="273:40" pos:end="273:42">dev</name><operator pos:start="273:43" pos:end="273:43">.</operator><name pos:start="273:44" pos:end="273:47">addr</name></name></expr></argument>,

                                    <argument pos:start="275:37" pos:end="275:68"><expr pos:start="275:37" pos:end="275:68"><literal type="string" pos:start="275:37" pos:end="275:68">"packet too small to send event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="277:17" pos:end="277:42"><expr pos:start="277:17" pos:end="277:41"><name pos:start="277:17" pos:end="277:25"><name pos:start="277:17" pos:end="277:17">p</name><operator pos:start="277:18" pos:end="277:19">-&gt;</operator><name pos:start="277:20" pos:end="277:25">status</name></name> <operator pos:start="277:27" pos:end="277:27">=</operator> <name pos:start="277:29" pos:end="277:41">USB_RET_STALL</name></expr>;</expr_stmt>

                <return pos:start="279:17" pos:end="279:23">return;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="285:13" pos:end="285:47"><expr pos:start="285:13" pos:end="285:46"><call pos:start="285:13" pos:end="285:46"><name pos:start="285:13" pos:end="285:25">QTAILQ_REMOVE</name><argument_list pos:start="285:26" pos:end="285:46">(<argument pos:start="285:27" pos:end="285:36"><expr pos:start="285:27" pos:end="285:36"><operator pos:start="285:27" pos:end="285:27">&amp;</operator><name pos:start="285:28" pos:end="285:36"><name pos:start="285:28" pos:end="285:28">s</name><operator pos:start="285:29" pos:end="285:30">-&gt;</operator><name pos:start="285:31" pos:end="285:36">events</name></name></expr></argument>, <argument pos:start="285:39" pos:end="285:39"><expr pos:start="285:39" pos:end="285:39"><name pos:start="285:39" pos:end="285:39">e</name></expr></argument>, <argument pos:start="285:42" pos:end="285:45"><expr pos:start="285:42" pos:end="285:45"><name pos:start="285:42" pos:end="285:45">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="287:13" pos:end="287:48"><expr pos:start="287:13" pos:end="287:47"><name pos:start="287:13" pos:end="287:28"><name pos:start="287:13" pos:end="287:21">container</name><operator pos:start="287:22" pos:end="287:22">.</operator><name pos:start="287:23" pos:end="287:28">length</name></name> <operator pos:start="287:30" pos:end="287:30">=</operator> <call pos:start="287:32" pos:end="287:47"><name pos:start="287:32" pos:end="287:42">cpu_to_le32</name><argument_list pos:start="287:43" pos:end="287:47">(<argument pos:start="287:44" pos:end="287:46"><expr pos:start="287:44" pos:end="287:46"><name pos:start="287:44" pos:end="287:46">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="289:13" pos:end="289:53"><expr pos:start="289:13" pos:end="289:52"><name pos:start="289:13" pos:end="289:26"><name pos:start="289:13" pos:end="289:21">container</name><operator pos:start="289:22" pos:end="289:22">.</operator><name pos:start="289:23" pos:end="289:26">type</name></name> <operator pos:start="289:28" pos:end="289:28">=</operator> <call pos:start="289:30" pos:end="289:52"><name pos:start="289:30" pos:end="289:40">cpu_to_le32</name><argument_list pos:start="289:41" pos:end="289:52">(<argument pos:start="289:42" pos:end="289:51"><expr pos:start="289:42" pos:end="289:51"><name pos:start="289:42" pos:end="289:51">TYPE_EVENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="291:13" pos:end="291:51"><expr pos:start="291:13" pos:end="291:50"><name pos:start="291:13" pos:end="291:26"><name pos:start="291:13" pos:end="291:21">container</name><operator pos:start="291:22" pos:end="291:22">.</operator><name pos:start="291:23" pos:end="291:26">code</name></name> <operator pos:start="291:28" pos:end="291:28">=</operator> <call pos:start="291:30" pos:end="291:50"><name pos:start="291:30" pos:end="291:40">cpu_to_le16</name><argument_list pos:start="291:41" pos:end="291:50">(<argument pos:start="291:42" pos:end="291:49"><expr pos:start="291:42" pos:end="291:49"><name pos:start="291:42" pos:end="291:49"><name pos:start="291:42" pos:end="291:42">e</name><operator pos:start="291:43" pos:end="291:44">-&gt;</operator><name pos:start="291:45" pos:end="291:49">event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="293:13" pos:end="293:32"><expr pos:start="293:13" pos:end="293:31"><name pos:start="293:13" pos:end="293:27"><name pos:start="293:13" pos:end="293:21">container</name><operator pos:start="293:22" pos:end="293:22">.</operator><name pos:start="293:23" pos:end="293:27">trans</name></name> <operator pos:start="293:29" pos:end="293:29">=</operator> <literal type="number" pos:start="293:31" pos:end="293:31">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="293:34" pos:end="293:63">/* no trans specific events */</comment>

            <expr_stmt pos:start="295:13" pos:end="295:44"><expr pos:start="295:13" pos:end="295:43"><name pos:start="295:13" pos:end="295:18">handle</name> <operator pos:start="295:20" pos:end="295:20">=</operator> <call pos:start="295:22" pos:end="295:43"><name pos:start="295:22" pos:end="295:32">cpu_to_le32</name><argument_list pos:start="295:33" pos:end="295:43">(<argument pos:start="295:34" pos:end="295:42"><expr pos:start="295:34" pos:end="295:42"><name pos:start="295:34" pos:end="295:42"><name pos:start="295:34" pos:end="295:34">e</name><operator pos:start="295:35" pos:end="295:36">-&gt;</operator><name pos:start="295:37" pos:end="295:42">handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="297:13" pos:end="297:62"><expr pos:start="297:13" pos:end="297:61"><call pos:start="297:13" pos:end="297:61"><name pos:start="297:13" pos:end="297:27">usb_packet_copy</name><argument_list pos:start="297:28" pos:end="297:61">(<argument pos:start="297:29" pos:end="297:29"><expr pos:start="297:29" pos:end="297:29"><name pos:start="297:29" pos:end="297:29">p</name></expr></argument>, <argument pos:start="297:32" pos:end="297:41"><expr pos:start="297:32" pos:end="297:41"><operator pos:start="297:32" pos:end="297:32">&amp;</operator><name pos:start="297:33" pos:end="297:41">container</name></expr></argument>, <argument pos:start="297:44" pos:end="297:60"><expr pos:start="297:44" pos:end="297:60"><sizeof pos:start="297:44" pos:end="297:60">sizeof<argument_list pos:start="297:50" pos:end="297:60">(<argument pos:start="297:51" pos:end="297:59"><expr pos:start="297:51" pos:end="297:59"><name pos:start="297:51" pos:end="297:59">container</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="299:13" pos:end="299:58"><expr pos:start="299:13" pos:end="299:57"><call pos:start="299:13" pos:end="299:57"><name pos:start="299:13" pos:end="299:27">usb_packet_copy</name><argument_list pos:start="299:28" pos:end="299:57">(<argument pos:start="299:29" pos:end="299:29"><expr pos:start="299:29" pos:end="299:29"><name pos:start="299:29" pos:end="299:29">p</name></expr></argument>, <argument pos:start="299:32" pos:end="299:38"><expr pos:start="299:32" pos:end="299:38"><operator pos:start="299:32" pos:end="299:32">&amp;</operator><name pos:start="299:33" pos:end="299:38">handle</name></expr></argument>, <argument pos:start="299:41" pos:end="299:56"><expr pos:start="299:41" pos:end="299:56"><sizeof pos:start="299:41" pos:end="299:56">sizeof<argument_list pos:start="299:47" pos:end="299:56">(<argument pos:start="299:48" pos:end="299:55"><expr pos:start="299:48" pos:end="299:55"><name pos:start="299:48" pos:end="299:55">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:22"><expr pos:start="301:13" pos:end="301:21"><call pos:start="301:13" pos:end="301:21"><name pos:start="301:13" pos:end="301:18">g_free</name><argument_list pos:start="301:19" pos:end="301:21">(<argument pos:start="301:20" pos:end="301:20"><expr pos:start="301:20" pos:end="301:20"><name pos:start="301:20" pos:end="301:20">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="303:13" pos:end="303:19">return;</return>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="307:1" pos:end="307:6">#<cpp:directive pos:start="307:2" pos:end="307:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="309:9" pos:end="309:32"><expr pos:start="309:9" pos:end="309:31"><name pos:start="309:9" pos:end="309:17"><name pos:start="309:9" pos:end="309:9">p</name><operator pos:start="309:10" pos:end="309:11">-&gt;</operator><name pos:start="309:12" pos:end="309:17">status</name></name> <operator pos:start="309:19" pos:end="309:19">=</operator> <name pos:start="309:21" pos:end="309:31">USB_RET_NAK</name></expr>;</expr_stmt>

        <return pos:start="311:9" pos:end="311:15">return;</return>

    <default pos:start="313:5" pos:end="313:12">default:</default>

        <expr_stmt pos:start="315:9" pos:end="315:61"><expr pos:start="315:9" pos:end="315:60"><call pos:start="315:9" pos:end="315:60"><name pos:start="315:9" pos:end="315:27">trace_usb_mtp_stall</name><argument_list pos:start="315:28" pos:end="315:60">(<argument pos:start="315:29" pos:end="315:39"><expr pos:start="315:29" pos:end="315:39"><name pos:start="315:29" pos:end="315:39"><name pos:start="315:29" pos:end="315:29">s</name><operator pos:start="315:30" pos:end="315:31">-&gt;</operator><name pos:start="315:32" pos:end="315:34">dev</name><operator pos:start="315:35" pos:end="315:35">.</operator><name pos:start="315:36" pos:end="315:39">addr</name></name></expr></argument>, <argument pos:start="315:42" pos:end="315:59"><expr pos:start="315:42" pos:end="315:59"><literal type="string" pos:start="315:42" pos:end="315:59">"invalid endpoint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="317:9" pos:end="317:34"><expr pos:start="317:9" pos:end="317:33"><name pos:start="317:9" pos:end="317:17"><name pos:start="317:9" pos:end="317:9">p</name><operator pos:start="317:10" pos:end="317:11">-&gt;</operator><name pos:start="317:12" pos:end="317:17">status</name></name> <operator pos:start="317:19" pos:end="317:19">=</operator> <name pos:start="317:21" pos:end="317:33">USB_RET_STALL</name></expr>;</expr_stmt>

        <return pos:start="319:9" pos:end="319:15">return;</return>

    </block_content>}</block></switch>



    <if_stmt pos:start="325:5" pos:end="341:5"><if pos:start="325:5" pos:end="333:5">if <condition pos:start="325:8" pos:end="325:30">(<expr pos:start="325:9" pos:end="325:29"><name pos:start="325:9" pos:end="325:24"><name pos:start="325:9" pos:end="325:9">p</name><operator pos:start="325:10" pos:end="325:11">-&gt;</operator><name pos:start="325:12" pos:end="325:24">actual_length</name></name> <operator pos:start="325:26" pos:end="325:27">==</operator> <literal type="number" pos:start="325:29" pos:end="325:29">0</literal></expr>)</condition> <block pos:start="325:32" pos:end="333:5">{<block_content pos:start="327:9" pos:end="331:15">

        <expr_stmt pos:start="327:9" pos:end="327:50"><expr pos:start="327:9" pos:end="327:49"><call pos:start="327:9" pos:end="327:49"><name pos:start="327:9" pos:end="327:25">trace_usb_mtp_nak</name><argument_list pos:start="327:26" pos:end="327:49">(<argument pos:start="327:27" pos:end="327:37"><expr pos:start="327:27" pos:end="327:37"><name pos:start="327:27" pos:end="327:37"><name pos:start="327:27" pos:end="327:27">s</name><operator pos:start="327:28" pos:end="327:29">-&gt;</operator><name pos:start="327:30" pos:end="327:32">dev</name><operator pos:start="327:33" pos:end="327:33">.</operator><name pos:start="327:34" pos:end="327:37">addr</name></name></expr></argument>, <argument pos:start="327:40" pos:end="327:48"><expr pos:start="327:40" pos:end="327:48"><name pos:start="327:40" pos:end="327:48"><name pos:start="327:40" pos:end="327:40">p</name><operator pos:start="327:41" pos:end="327:42">-&gt;</operator><name pos:start="327:43" pos:end="327:44">ep</name><operator pos:start="327:45" pos:end="327:46">-&gt;</operator><name pos:start="327:47" pos:end="327:48">nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="329:9" pos:end="329:32"><expr pos:start="329:9" pos:end="329:31"><name pos:start="329:9" pos:end="329:17"><name pos:start="329:9" pos:end="329:9">p</name><operator pos:start="329:10" pos:end="329:11">-&gt;</operator><name pos:start="329:12" pos:end="329:17">status</name></name> <operator pos:start="329:19" pos:end="329:19">=</operator> <name pos:start="329:21" pos:end="329:31">USB_RET_NAK</name></expr>;</expr_stmt>

        <return pos:start="331:9" pos:end="331:15">return;</return>

    </block_content>}</block></if> <else pos:start="333:7" pos:end="341:5">else <block pos:start="333:12" pos:end="341:5">{<block_content pos:start="335:9" pos:end="339:15">

        <expr_stmt pos:start="335:9" pos:end="337:40"><expr pos:start="335:9" pos:end="337:39"><call pos:start="335:9" pos:end="337:39"><name pos:start="335:9" pos:end="335:26">trace_usb_mtp_xfer</name><argument_list pos:start="335:27" pos:end="337:39">(<argument pos:start="335:28" pos:end="335:38"><expr pos:start="335:28" pos:end="335:38"><name pos:start="335:28" pos:end="335:38"><name pos:start="335:28" pos:end="335:28">s</name><operator pos:start="335:29" pos:end="335:30">-&gt;</operator><name pos:start="335:31" pos:end="335:33">dev</name><operator pos:start="335:34" pos:end="335:34">.</operator><name pos:start="335:35" pos:end="335:38">addr</name></name></expr></argument>, <argument pos:start="335:41" pos:end="335:49"><expr pos:start="335:41" pos:end="335:49"><name pos:start="335:41" pos:end="335:49"><name pos:start="335:41" pos:end="335:41">p</name><operator pos:start="335:42" pos:end="335:43">-&gt;</operator><name pos:start="335:44" pos:end="335:45">ep</name><operator pos:start="335:46" pos:end="335:47">-&gt;</operator><name pos:start="335:48" pos:end="335:49">nr</name></name></expr></argument>, <argument pos:start="335:52" pos:end="335:67"><expr pos:start="335:52" pos:end="335:67"><name pos:start="335:52" pos:end="335:67"><name pos:start="335:52" pos:end="335:52">p</name><operator pos:start="335:53" pos:end="335:54">-&gt;</operator><name pos:start="335:55" pos:end="335:67">actual_length</name></name></expr></argument>,

                           <argument pos:start="337:28" pos:end="337:38"><expr pos:start="337:28" pos:end="337:38"><name pos:start="337:28" pos:end="337:38"><name pos:start="337:28" pos:end="337:28">p</name><operator pos:start="337:29" pos:end="337:30">-&gt;</operator><name pos:start="337:31" pos:end="337:33">iov</name><operator pos:start="337:34" pos:end="337:34">.</operator><name pos:start="337:35" pos:end="337:38">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="339:9" pos:end="339:15">return;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
