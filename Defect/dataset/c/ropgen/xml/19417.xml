<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19417.c" pos:tabs="8"><function pos:start="1:1" pos:end="196:13"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:7">av_cold</name> <name pos:start="1:9" pos:end="1:11">int</name></type> <name pos:start="1:13" pos:end="1:32">ff_mss12_decode_init</name><parameter_list pos:start="1:33" pos:end="3:70">(<parameter pos:start="1:34" pos:end="1:48"><decl pos:start="1:34" pos:end="1:48"><type pos:start="1:34" pos:end="1:48"><name pos:start="1:34" pos:end="1:45">MSS12Context</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">c</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:61"><decl pos:start="1:51" pos:end="1:61"><type pos:start="1:51" pos:end="1:61"><name pos:start="1:51" pos:end="1:53">int</name></type> <name pos:start="1:55" pos:end="1:61">version</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:50"><decl pos:start="3:34" pos:end="3:50"><type pos:start="3:34" pos:end="3:50"><name pos:start="3:34" pos:end="3:45">SliceContext</name><modifier pos:start="3:46" pos:end="3:46">*</modifier></type> <name pos:start="3:48" pos:end="3:50">sc1</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:69"><decl pos:start="3:53" pos:end="3:69"><type pos:start="3:53" pos:end="3:69"><name pos:start="3:53" pos:end="3:64">SliceContext</name> <modifier pos:start="3:66" pos:end="3:66">*</modifier></type><name pos:start="3:67" pos:end="3:69">sc2</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="196:13">{<block_content pos:start="7:5" pos:end="196:13">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">AVCodecContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:25">avctx</name> <init pos:start="7:27" pos:end="7:36">= <expr pos:start="7:29" pos:end="7:36"><name pos:start="7:29" pos:end="7:36"><name pos:start="7:29" pos:end="7:29">c</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:36">avctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="196:13"><if pos:start="13:5" pos:end="196:13">if <condition pos:start="13:8" pos:end="13:45">(<expr pos:start="13:9" pos:end="13:44"><name pos:start="13:9" pos:end="13:29"><name pos:start="13:9" pos:end="13:13">avctx</name><operator pos:start="13:14" pos:end="13:15">-&gt;</operator><name pos:start="13:16" pos:end="13:29">extradata_size</name></name> <operator pos:start="13:31" pos:end="13:31">&lt;</operator> <literal type="number" pos:start="13:33" pos:end="13:36">52</literal> <operator pos:start="13:36" pos:end="13:36">+</operator> <literal type="number" pos:start="13:38" pos:end="13:40">256</literal> <operator pos:start="13:42" pos:end="13:42">*</operator> <literal type="number" pos:start="13:44" pos:end="13:44">3</literal></expr>)</condition> <block pos:start="13:47" pos:end="196:13">{<block_content pos:start="15:9" pos:end="196:13">

        <expr_stmt pos:start="15:9" pos:end="17:38"><expr pos:start="15:9" pos:end="17:37"><call pos:start="15:9" pos:end="17:37"><name pos:start="15:9" pos:end="15:14">av_log</name><argument_list pos:start="15:15" pos:end="17:37">(<argument pos:start="15:16" pos:end="15:20"><expr pos:start="15:16" pos:end="15:20"><name pos:start="15:16" pos:end="15:20">avctx</name></expr></argument>, <argument pos:start="15:23" pos:end="15:34"><expr pos:start="15:23" pos:end="15:34"><name pos:start="15:23" pos:end="15:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="15:37" pos:end="15:70"><expr pos:start="15:37" pos:end="15:70"><literal type="string" pos:start="15:37" pos:end="15:70">"Insufficient extradata size %d\n"</literal></expr></argument>,

               <argument pos:start="17:16" pos:end="17:36"><expr pos:start="17:16" pos:end="17:36"><name pos:start="17:16" pos:end="17:36"><name pos:start="17:16" pos:end="17:20">avctx</name><operator pos:start="17:21" pos:end="17:22">-&gt;</operator><name pos:start="17:23" pos:end="17:36">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <if_stmt pos:start="23:5" pos:end="196:13"><if pos:start="23:5" pos:end="196:13">if <condition pos:start="23:8" pos:end="23:58">(<expr pos:start="23:9" pos:end="23:57"><call pos:start="23:9" pos:end="23:33"><name pos:start="23:9" pos:end="23:15">AV_RB32</name><argument_list pos:start="23:16" pos:end="23:33">(<argument pos:start="23:17" pos:end="23:32"><expr pos:start="23:17" pos:end="23:32"><name pos:start="23:17" pos:end="23:32"><name pos:start="23:17" pos:end="23:21">avctx</name><operator pos:start="23:22" pos:end="23:23">-&gt;</operator><name pos:start="23:24" pos:end="23:32">extradata</name></name></expr></argument>)</argument_list></call> <operator pos:start="23:35" pos:end="23:35">&lt;</operator> <name pos:start="23:37" pos:end="23:57"><name pos:start="23:37" pos:end="23:41">avctx</name><operator pos:start="23:42" pos:end="23:43">-&gt;</operator><name pos:start="23:44" pos:end="23:57">extradata_size</name></name></expr>)</condition> <block pos:start="23:60" pos:end="196:13">{<block_content pos:start="25:9" pos:end="196:13">

        <expr_stmt pos:start="25:9" pos:end="31:38"><expr pos:start="25:9" pos:end="31:37"><call pos:start="25:9" pos:end="31:37"><name pos:start="25:9" pos:end="25:14">av_log</name><argument_list pos:start="25:15" pos:end="31:37">(<argument pos:start="25:16" pos:end="25:20"><expr pos:start="25:16" pos:end="25:20"><name pos:start="25:16" pos:end="25:20">avctx</name></expr></argument>, <argument pos:start="25:23" pos:end="25:34"><expr pos:start="25:23" pos:end="25:34"><name pos:start="25:23" pos:end="25:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="27:16" pos:end="27:66"><expr pos:start="27:16" pos:end="27:66"><literal type="string" pos:start="27:16" pos:end="27:66">"Insufficient extradata size: expected %d got %d\n"</literal></expr></argument>,

               <argument pos:start="29:16" pos:end="29:40"><expr pos:start="29:16" pos:end="29:40"><call pos:start="29:16" pos:end="29:40"><name pos:start="29:16" pos:end="29:22">AV_RB32</name><argument_list pos:start="29:23" pos:end="29:40">(<argument pos:start="29:24" pos:end="29:39"><expr pos:start="29:24" pos:end="29:39"><name pos:start="29:24" pos:end="29:39"><name pos:start="29:24" pos:end="29:28">avctx</name><operator pos:start="29:29" pos:end="29:30">-&gt;</operator><name pos:start="29:31" pos:end="29:39">extradata</name></name></expr></argument>)</argument_list></call></expr></argument>,

               <argument pos:start="31:16" pos:end="31:36"><expr pos:start="31:16" pos:end="31:36"><name pos:start="31:16" pos:end="31:36"><name pos:start="31:16" pos:end="31:20">avctx</name><operator pos:start="31:21" pos:end="31:22">-&gt;</operator><name pos:start="31:23" pos:end="31:36">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="37:5" pos:end="37:57"><expr pos:start="37:5" pos:end="37:56"><name pos:start="37:5" pos:end="37:22"><name pos:start="37:5" pos:end="37:9">avctx</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:22">coded_width</name></name>  <operator pos:start="37:25" pos:end="37:25">=</operator> <call pos:start="37:27" pos:end="37:56"><name pos:start="37:27" pos:end="37:33">AV_RB32</name><argument_list pos:start="37:34" pos:end="37:56">(<argument pos:start="37:35" pos:end="37:55"><expr pos:start="37:35" pos:end="37:55"><name pos:start="37:35" pos:end="37:50"><name pos:start="37:35" pos:end="37:39">avctx</name><operator pos:start="37:40" pos:end="37:41">-&gt;</operator><name pos:start="37:42" pos:end="37:50">extradata</name></name> <operator pos:start="37:52" pos:end="37:52">+</operator> <literal type="number" pos:start="37:54" pos:end="37:55">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:57"><expr pos:start="39:5" pos:end="39:56"><name pos:start="39:5" pos:end="39:23"><name pos:start="39:5" pos:end="39:9">avctx</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:23">coded_height</name></name> <operator pos:start="39:25" pos:end="39:25">=</operator> <call pos:start="39:27" pos:end="39:56"><name pos:start="39:27" pos:end="39:33">AV_RB32</name><argument_list pos:start="39:34" pos:end="39:56">(<argument pos:start="39:35" pos:end="39:55"><expr pos:start="39:35" pos:end="39:55"><name pos:start="39:35" pos:end="39:50"><name pos:start="39:35" pos:end="39:39">avctx</name><operator pos:start="39:40" pos:end="39:41">-&gt;</operator><name pos:start="39:42" pos:end="39:50">extradata</name></name> <operator pos:start="39:52" pos:end="39:52">+</operator> <literal type="number" pos:start="39:54" pos:end="39:55">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="196:13"><if pos:start="41:5" pos:end="196:13">if <condition pos:start="41:8" pos:end="41:64">(<expr pos:start="41:9" pos:end="41:63"><name pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:13">avctx</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:26">coded_width</name></name> <operator pos:start="41:28" pos:end="41:28">&gt;</operator> <literal type="number" pos:start="41:30" pos:end="41:33">4096</literal> <operator pos:start="41:35" pos:end="41:36">||</operator> <name pos:start="41:38" pos:end="41:56"><name pos:start="41:38" pos:end="41:42">avctx</name><operator pos:start="41:43" pos:end="41:44">-&gt;</operator><name pos:start="41:45" pos:end="41:56">coded_height</name></name> <operator pos:start="41:58" pos:end="41:58">&gt;</operator> <literal type="number" pos:start="41:60" pos:end="41:63">4096</literal></expr>)</condition> <block pos:start="41:66" pos:end="196:13">{<block_content pos:start="43:9" pos:end="196:13">

        <macro pos:start="43:9" pos:end="196:13"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="196:13">(<argument pos:start="43:16" pos:end="43:20">avctx</argument>, <argument pos:start="43:23" pos:end="43:34">AV_LOG_ERROR</argument>, <argument pos:start="43:37" pos:end="43:70"><literal type="string" pos:start="43:37" pos:end="43:70">"Frame dimensions %dx%d too large"</literal></argument>,











    <argument pos:start="55:5" pos:end="196:13">av_log(avctx, AV_LOG_DEBUG, <literal type="string" pos:start="55:33" pos:end="55:57">"Encoder version %d.%d\n"</literal>,

           AV_RB32(avctx-&gt;extradata + <literal type="number" pos:start="57:39" pos:end="57:39">4</literal>), AV_RB32(avctx-&gt;extradata + <literal type="number" pos:start="57:70" pos:end="57:70">8</literal>));

    if (version != AV_RB32(avctx-&gt;extradata + <literal type="number" pos:start="59:47" pos:end="59:47">4</literal>) &gt; <literal type="number" pos:start="59:52" pos:end="59:52">1</literal>) {

        av_log(avctx, AV_LOG_ERROR,

               <literal type="string" pos:start="63:16" pos:end="63:57">"Header version doesn't match codec tag\n"</literal>);

        return -<literal type="number" pos:start="65:17" pos:end="65:17">1</literal>;




    c-&gt;free_colours = AV_RB32(avctx-&gt;extradata + <literal type="number" pos:start="70:50" pos:end="70:51">48</literal>);

    if ((unsigned)c-&gt;free_colours &gt; <literal type="number" pos:start="72:37" pos:end="72:39">256</literal>) {

        av_log(avctx, AV_LOG_ERROR,

               <literal type="string" pos:start="76:16" pos:end="76:69">"Incorrect number of changeable palette entries: %d\n"</literal>,

               c-&gt;free_colours);



    av_log(avctx, AV_LOG_DEBUG, <literal type="string" pos:start="82:33" pos:end="82:53">"%d free colour(s)\n"</literal>, c-&gt;free_colours);



    av_log(avctx, AV_LOG_DEBUG, <literal type="string" pos:start="86:33" pos:end="86:60">"Display dimensions %dx%d\n"</literal>,

           AV_RB32(avctx-&gt;extradata + <literal type="number" pos:start="88:39" pos:end="88:40">12</literal>), AV_RB32(avctx-&gt;extradata + <literal type="number" pos:start="88:71" pos:end="88:72">16</literal>));

    av_log(avctx, AV_LOG_DEBUG, <literal type="string" pos:start="90:33" pos:end="90:58">"Coded dimensions %dx%d\n"</literal>,


    av_log(avctx, AV_LOG_DEBUG, <literal type="string" pos:start="93:33" pos:end="93:56">"%g frames per second\n"</literal>,

           av_int2float(AV_RB32(avctx-&gt;extradata + <literal type="number" pos:start="95:52" pos:end="95:53">28</literal>)));

    av_log(avctx, AV_LOG_DEBUG, <literal type="string" pos:start="97:33" pos:end="97:50">"Bitrate %d bps\n"</literal>,

           AV_RB32(avctx-&gt;extradata + <literal type="number" pos:start="99:39" pos:end="99:40">32</literal>));

    av_log(avctx, AV_LOG_DEBUG, <literal type="string" pos:start="101:33" pos:end="101:56">"Max. lead time %g ms\n"</literal>,

           av_int2float(AV_RB32(avctx-&gt;extradata + <literal type="number" pos:start="103:52" pos:end="103:53">36</literal>)));

    av_log(avctx, AV_LOG_DEBUG, <literal type="string" pos:start="105:33" pos:end="105:55">"Max. lag time %g ms\n"</literal>,

           av_int2float(AV_RB32(avctx-&gt;extradata + <literal type="number" pos:start="107:52" pos:end="107:53">40</literal>)));

    av_log(avctx, AV_LOG_DEBUG, <literal type="string" pos:start="109:33" pos:end="109:56">"Max. seek time %g ms\n"</literal>,

           av_int2float(AV_RB32(avctx-&gt;extradata + <literal type="number" pos:start="111:52" pos:end="111:53">44</literal>)));



    if (version) {

        if (avctx-&gt;extradata_size &lt; <literal type="number" pos:start="117:37" pos:end="117:40">60</literal> + <literal type="number" pos:start="117:42" pos:end="117:44">256</literal> * <literal type="number" pos:start="117:48" pos:end="117:48">3</literal>) {

            av_log(avctx, AV_LOG_ERROR,

                   <literal type="string" pos:start="121:20" pos:end="121:60">"Insufficient extradata size %d for v2\n"</literal>,

                   avctx-&gt;extradata_size);





        c-&gt;slice_split = AV_RB32(avctx-&gt;extradata + <literal type="number" pos:start="129:53" pos:end="129:54">52</literal>);

        av_log(avctx, AV_LOG_DEBUG, <literal type="string" pos:start="131:37" pos:end="131:54">"Slice split %d\n"</literal>, c-&gt;slice_split);



        c-&gt;full_model_syms = AV_RB32(avctx-&gt;extradata + <literal type="number" pos:start="135:57" pos:end="135:58">56</literal>);

        if (c-&gt;full_model_syms &lt; <literal type="number" pos:start="137:34" pos:end="137:34">2</literal> || c-&gt;full_model_syms &gt; <literal type="number" pos:start="137:60" pos:end="137:62">256</literal>) {

            av_log(avctx, AV_LOG_ERROR,

                   <literal type="string" pos:start="141:20" pos:end="141:58">"Incorrect number of used colours %d\n"</literal>,

                   c-&gt;full_model_syms);



        av_log(avctx, AV_LOG_DEBUG, <literal type="string" pos:start="147:37" pos:end="147:55">"Used colours %d\n"</literal>,

               c-&gt;full_model_syms);

    } else {

        c-&gt;slice_split     = <literal type="number" pos:start="153:30" pos:end="153:30">0</literal>;

        c-&gt;full_model_syms = <literal type="number" pos:start="155:30" pos:end="155:32">256</literal>;




    for (i = <literal type="number" pos:start="160:14" pos:end="160:14">0</literal>; i &lt; <literal type="number" pos:start="160:21" pos:end="160:23">256</literal>; i++)

        c-&gt;pal[i] = <literal type="number" pos:start="162:21" pos:end="162:25">0xFFU</literal> &lt;&lt; <literal type="number" pos:start="162:30" pos:end="162:31">24</literal> | AV_RB24(avctx-&gt;extradata + <literal type="number" pos:start="162:62" pos:end="162:65">52</literal> +

                            (version ? <literal type="number" pos:start="164:40" pos:end="164:40">8</literal> : <literal type="number" pos:start="164:44" pos:end="164:44">0</literal>) + i * <literal type="number" pos:start="164:53" pos:end="164:53">3</literal>);



    c-&gt;mask_stride = FFALIGN(avctx-&gt;width, <literal type="number" pos:start="168:44" pos:end="168:45">16</literal>);

    c-&gt;mask        = av_malloc(c-&gt;mask_stride * avctx-&gt;height);

    if (!c-&gt;mask) {

        av_log(avctx, AV_LOG_ERROR, <literal type="string" pos:start="174:37" pos:end="174:66">"Cannot allocate mask plane\n"</literal>);

        return AVERROR(ENOMEM);




    sc1-&gt;c = c;

    slicecontext_init(sc1, version, c-&gt;full_model_syms);

    if (c-&gt;slice_split) {

        sc2-&gt;c = c;

        slicecontext_init(sc2, version, c-&gt;full_model_syms);


    c-&gt;corrupted = <literal type="number" pos:start="192:20" pos:end="192:20">1</literal>;



    return <literal type="number" pos:start="196:12" pos:end="196:12">0</literal>;</argument></argument_list></macro></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>
</unit>
