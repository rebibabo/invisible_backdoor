<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2952.c" pos:tabs="8"><function pos:start="1:1" pos:end="32:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:42">bdrv_driver_preadv</name><parameter_list pos:start="1:43" pos:end="3:73">(<parameter pos:start="1:44" pos:end="1:63"><decl pos:start="1:44" pos:end="1:63"><type pos:start="1:44" pos:end="1:63"><name pos:start="1:44" pos:end="1:59">BlockDriverState</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:63">bs</name></decl></parameter>,
                                           <parameter pos:start="2:44" pos:end="2:58"><decl pos:start="2:44" pos:end="2:58"><type pos:start="2:44" pos:end="2:58"><name pos:start="2:44" pos:end="2:51">uint64_t</name></type> <name pos:start="2:53" pos:end="2:58">offset</name></decl></parameter>, <parameter pos:start="2:61" pos:end="2:74"><decl pos:start="2:61" pos:end="2:74"><type pos:start="2:61" pos:end="2:74"><name pos:start="2:61" pos:end="2:68">uint64_t</name></type> <name pos:start="2:70" pos:end="2:74">bytes</name></decl></parameter>,
                                           <parameter pos:start="3:44" pos:end="3:61"><decl pos:start="3:44" pos:end="3:61"><type pos:start="3:44" pos:end="3:61"><name pos:start="3:44" pos:end="3:55">QEMUIOVector</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:61">qiov</name></decl></parameter>, <parameter pos:start="3:64" pos:end="3:72"><decl pos:start="3:64" pos:end="3:72"><type pos:start="3:64" pos:end="3:72"><name pos:start="3:64" pos:end="3:66">int</name></type> <name pos:start="3:68" pos:end="3:72">flags</name></decl></parameter>)</parameter_list>
<block pos:start="4:1" pos:end="32:1">{<block_content pos:start="5:5" pos:end="31:5">
    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">BlockDriver</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">drv</name> <init pos:start="5:22" pos:end="5:30">= <expr pos:start="5:24" pos:end="5:30"><name pos:start="5:24" pos:end="5:30"><name pos:start="5:24" pos:end="5:25">bs</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:30">drv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:23"><decl pos:start="6:5" pos:end="6:22"><type pos:start="6:5" pos:end="6:11"><name pos:start="6:5" pos:end="6:11">int64_t</name></type> <name pos:start="6:13" pos:end="6:22">sector_num</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:27">nb_sectors</name></decl>;</decl_stmt>
    <if_stmt pos:start="8:5" pos:end="10:5"><if pos:start="8:5" pos:end="10:5">if <condition pos:start="8:8" pos:end="8:28">(<expr pos:start="8:9" pos:end="8:27"><name pos:start="8:9" pos:end="8:27"><name pos:start="8:9" pos:end="8:11">drv</name><operator pos:start="8:12" pos:end="8:13">-&gt;</operator><name pos:start="8:14" pos:end="8:27">bdrv_co_preadv</name></name></expr>)</condition> <block pos:start="8:30" pos:end="10:5">{<block_content pos:start="9:9" pos:end="9:67">
        <return pos:start="9:9" pos:end="9:67">return <expr pos:start="9:16" pos:end="9:66"><call pos:start="9:16" pos:end="9:66"><name pos:start="9:16" pos:end="9:34"><name pos:start="9:16" pos:end="9:18">drv</name><operator pos:start="9:19" pos:end="9:20">-&gt;</operator><name pos:start="9:21" pos:end="9:34">bdrv_co_preadv</name></name><argument_list pos:start="9:35" pos:end="9:66">(<argument pos:start="9:36" pos:end="9:37"><expr pos:start="9:36" pos:end="9:37"><name pos:start="9:36" pos:end="9:37">bs</name></expr></argument>, <argument pos:start="9:40" pos:end="9:45"><expr pos:start="9:40" pos:end="9:45"><name pos:start="9:40" pos:end="9:45">offset</name></expr></argument>, <argument pos:start="9:48" pos:end="9:52"><expr pos:start="9:48" pos:end="9:52"><name pos:start="9:48" pos:end="9:52">bytes</name></expr></argument>, <argument pos:start="9:55" pos:end="9:58"><expr pos:start="9:55" pos:end="9:58"><name pos:start="9:55" pos:end="9:58">qiov</name></expr></argument>, <argument pos:start="9:61" pos:end="9:65"><expr pos:start="9:61" pos:end="9:65"><name pos:start="9:61" pos:end="9:65">flags</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:44"><expr pos:start="11:5" pos:end="11:43"><name pos:start="11:5" pos:end="11:14">sector_num</name> <operator pos:start="11:16" pos:end="11:16">=</operator> <name pos:start="11:18" pos:end="11:23">offset</name> <operator pos:start="11:25" pos:end="11:26">&gt;&gt;</operator> <name pos:start="11:28" pos:end="11:43">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:43"><expr pos:start="12:5" pos:end="12:42"><name pos:start="12:5" pos:end="12:14">nb_sectors</name> <operator pos:start="12:16" pos:end="12:16">=</operator> <name pos:start="12:18" pos:end="12:22">bytes</name> <operator pos:start="12:24" pos:end="12:25">&gt;&gt;</operator> <name pos:start="12:27" pos:end="12:42">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:51"><expr pos:start="13:5" pos:end="13:50"><call pos:start="13:5" pos:end="13:50"><name pos:start="13:5" pos:end="13:10">assert</name><argument_list pos:start="13:11" pos:end="13:50">(<argument pos:start="13:12" pos:end="13:49"><expr pos:start="13:12" pos:end="13:49"><operator pos:start="13:12" pos:end="13:12">(</operator><name pos:start="13:13" pos:end="13:18">offset</name> <operator pos:start="13:20" pos:end="13:20">&amp;</operator> <operator pos:start="13:22" pos:end="13:22">(</operator><name pos:start="13:23" pos:end="13:38">BDRV_SECTOR_SIZE</name> <operator pos:start="13:40" pos:end="13:40">-</operator> <literal type="number" pos:start="13:42" pos:end="13:42">1</literal><operator pos:start="13:43" pos:end="13:43">)</operator><operator pos:start="13:44" pos:end="13:44">)</operator> <operator pos:start="13:46" pos:end="13:47">==</operator> <literal type="number" pos:start="13:49" pos:end="13:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="14:5" pos:end="14:50"><expr pos:start="14:5" pos:end="14:49"><call pos:start="14:5" pos:end="14:49"><name pos:start="14:5" pos:end="14:10">assert</name><argument_list pos:start="14:11" pos:end="14:49">(<argument pos:start="14:12" pos:end="14:48"><expr pos:start="14:12" pos:end="14:48"><operator pos:start="14:12" pos:end="14:12">(</operator><name pos:start="14:13" pos:end="14:17">bytes</name> <operator pos:start="14:19" pos:end="14:19">&amp;</operator> <operator pos:start="14:21" pos:end="14:21">(</operator><name pos:start="14:22" pos:end="14:37">BDRV_SECTOR_SIZE</name> <operator pos:start="14:39" pos:end="14:39">-</operator> <literal type="number" pos:start="14:41" pos:end="14:41">1</literal><operator pos:start="14:42" pos:end="14:42">)</operator><operator pos:start="14:43" pos:end="14:43">)</operator> <operator pos:start="14:45" pos:end="14:46">==</operator> <literal type="number" pos:start="14:48" pos:end="14:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="15:5" pos:end="15:68"><expr pos:start="15:5" pos:end="15:67"><call pos:start="15:5" pos:end="15:67"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:67">(<argument pos:start="15:12" pos:end="15:66"><expr pos:start="15:12" pos:end="15:66"><operator pos:start="15:12" pos:end="15:12">(</operator><name pos:start="15:13" pos:end="15:17">bytes</name> <operator pos:start="15:19" pos:end="15:20">&gt;&gt;</operator> <name pos:start="15:22" pos:end="15:37">BDRV_SECTOR_BITS</name><operator pos:start="15:38" pos:end="15:38">)</operator> <operator pos:start="15:40" pos:end="15:41">&lt;=</operator> <name pos:start="15:43" pos:end="15:66">BDRV_REQUEST_MAX_SECTORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="16:5" pos:end="31:5"><if pos:start="16:5" pos:end="18:5">if <condition pos:start="16:8" pos:end="16:27">(<expr pos:start="16:9" pos:end="16:26"><name pos:start="16:9" pos:end="16:26"><name pos:start="16:9" pos:end="16:11">drv</name><operator pos:start="16:12" pos:end="16:13">-&gt;</operator><name pos:start="16:14" pos:end="16:26">bdrv_co_readv</name></name></expr>)</condition> <block pos:start="16:29" pos:end="18:5">{<block_content pos:start="17:9" pos:end="17:68">
        <return pos:start="17:9" pos:end="17:68">return <expr pos:start="17:16" pos:end="17:67"><call pos:start="17:16" pos:end="17:67"><name pos:start="17:16" pos:end="17:33"><name pos:start="17:16" pos:end="17:18">drv</name><operator pos:start="17:19" pos:end="17:20">-&gt;</operator><name pos:start="17:21" pos:end="17:33">bdrv_co_readv</name></name><argument_list pos:start="17:34" pos:end="17:67">(<argument pos:start="17:35" pos:end="17:36"><expr pos:start="17:35" pos:end="17:36"><name pos:start="17:35" pos:end="17:36">bs</name></expr></argument>, <argument pos:start="17:39" pos:end="17:48"><expr pos:start="17:39" pos:end="17:48"><name pos:start="17:39" pos:end="17:48">sector_num</name></expr></argument>, <argument pos:start="17:51" pos:end="17:60"><expr pos:start="17:51" pos:end="17:60"><name pos:start="17:51" pos:end="17:60">nb_sectors</name></expr></argument>, <argument pos:start="17:63" pos:end="17:66"><expr pos:start="17:63" pos:end="17:66"><name pos:start="17:63" pos:end="17:66">qiov</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else pos:start="18:7" pos:end="31:5">else <block pos:start="18:12" pos:end="31:5">{<block_content pos:start="19:9" pos:end="30:9">
        <decl_stmt pos:start="19:9" pos:end="19:24"><decl pos:start="19:9" pos:end="19:23"><type pos:start="19:9" pos:end="19:20"><name pos:start="19:9" pos:end="19:18">BlockAIOCB</name> <modifier pos:start="19:20" pos:end="19:20">*</modifier></type><name pos:start="19:21" pos:end="19:23">acb</name></decl>;</decl_stmt>
        <decl_stmt pos:start="20:9" pos:end="22:10"><decl pos:start="20:9" pos:end="22:9"><type pos:start="20:9" pos:end="20:29"><name pos:start="20:9" pos:end="20:29">CoroutineIOCompletion</name></type> <name pos:start="20:31" pos:end="20:32">co</name> <init pos:start="20:34" pos:end="22:9">= <expr pos:start="20:36" pos:end="22:9"><block pos:start="20:36" pos:end="22:9">{
            <expr pos:start="21:13" pos:end="21:46"><operator pos:start="21:13" pos:end="21:13">.</operator><name pos:start="21:14" pos:end="21:22">coroutine</name> <operator pos:start="21:24" pos:end="21:24">=</operator> <call pos:start="21:26" pos:end="21:46"><name pos:start="21:26" pos:end="21:44">qemu_coroutine_self</name><argument_list pos:start="21:45" pos:end="21:46">()</argument_list></call></expr>,
        }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="23:9" pos:end="24:67"><expr pos:start="23:9" pos:end="24:66"><name pos:start="23:9" pos:end="23:11">acb</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="24:66"><name pos:start="23:15" pos:end="23:37"><name pos:start="23:15" pos:end="23:16">bs</name><operator pos:start="23:17" pos:end="23:18">-&gt;</operator><name pos:start="23:19" pos:end="23:21">drv</name><operator pos:start="23:22" pos:end="23:23">-&gt;</operator><name pos:start="23:24" pos:end="23:37">bdrv_aio_readv</name></name><argument_list pos:start="23:38" pos:end="24:66">(<argument pos:start="23:39" pos:end="23:40"><expr pos:start="23:39" pos:end="23:40"><name pos:start="23:39" pos:end="23:40">bs</name></expr></argument>, <argument pos:start="23:43" pos:end="23:52"><expr pos:start="23:43" pos:end="23:52"><name pos:start="23:43" pos:end="23:52">sector_num</name></expr></argument>, <argument pos:start="23:55" pos:end="23:58"><expr pos:start="23:55" pos:end="23:58"><name pos:start="23:55" pos:end="23:58">qiov</name></expr></argument>, <argument pos:start="23:61" pos:end="23:70"><expr pos:start="23:61" pos:end="23:70"><name pos:start="23:61" pos:end="23:70">nb_sectors</name></expr></argument>,
                                      <argument pos:start="24:39" pos:end="24:60"><expr pos:start="24:39" pos:end="24:60"><name pos:start="24:39" pos:end="24:60">bdrv_co_io_em_complete</name></expr></argument>, <argument pos:start="24:63" pos:end="24:65"><expr pos:start="24:63" pos:end="24:65"><operator pos:start="24:63" pos:end="24:63">&amp;</operator><name pos:start="24:64" pos:end="24:65">co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="25:9" pos:end="30:9"><if pos:start="25:9" pos:end="27:9">if <condition pos:start="25:12" pos:end="25:24">(<expr pos:start="25:13" pos:end="25:23"><name pos:start="25:13" pos:end="25:15">acb</name> <operator pos:start="25:17" pos:end="25:18">==</operator> <name pos:start="25:20" pos:end="25:23">NULL</name></expr>)</condition> <block pos:start="25:26" pos:end="27:9">{<block_content pos:start="26:13" pos:end="26:24">
            <return pos:start="26:13" pos:end="26:24">return <expr pos:start="26:20" pos:end="26:23"><operator pos:start="26:20" pos:end="26:20">-</operator><name pos:start="26:21" pos:end="26:23">EIO</name></expr>;</return>
        </block_content>}</block></if> <else pos:start="27:11" pos:end="30:9">else <block pos:start="27:16" pos:end="30:9">{<block_content pos:start="28:13" pos:end="29:26">
            <expr_stmt pos:start="28:13" pos:end="28:35"><expr pos:start="28:13" pos:end="28:34"><call pos:start="28:13" pos:end="28:34"><name pos:start="28:13" pos:end="28:32">qemu_coroutine_yield</name><argument_list pos:start="28:33" pos:end="28:34">()</argument_list></call></expr>;</expr_stmt>
            <return pos:start="29:13" pos:end="29:26">return <expr pos:start="29:20" pos:end="29:25"><name pos:start="29:20" pos:end="29:25"><name pos:start="29:20" pos:end="29:21">co</name><operator pos:start="29:22" pos:end="29:22">.</operator><name pos:start="29:23" pos:end="29:25">ret</name></name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function></unit>
