<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15825.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">vfio_intp_interrupt</name><parameter_list pos:start="1:32" pos:end="1:47">(<parameter pos:start="1:33" pos:end="1:46"><decl pos:start="1:33" pos:end="1:46"><type pos:start="1:33" pos:end="1:42"><name pos:start="1:33" pos:end="1:40">VFIOINTp</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:46">intp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="117:1">{<block_content pos:start="5:5" pos:end="115:41">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">VFIOINTp</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:41"><type pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:22">VFIOPlatformDevice</name> <modifier pos:start="9:24" pos:end="9:24">*</modifier></type><name pos:start="9:25" pos:end="9:28">vdev</name> <init pos:start="9:30" pos:end="9:41">= <expr pos:start="9:32" pos:end="9:41"><name pos:start="9:32" pos:end="9:41"><name pos:start="9:32" pos:end="9:35">intp</name><operator pos:start="9:36" pos:end="9:37">-&gt;</operator><name pos:start="9:38" pos:end="9:41">vdev</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:23">delay_handling</name> <init pos:start="11:25" pos:end="11:31">= <expr pos:start="11:27" pos:end="11:31"><name pos:start="11:27" pos:end="11:31">false</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:39"><expr pos:start="15:5" pos:end="15:38"><call pos:start="15:5" pos:end="15:38"><name pos:start="15:5" pos:end="15:19">qemu_mutex_lock</name><argument_list pos:start="15:20" pos:end="15:38">(<argument pos:start="15:21" pos:end="15:37"><expr pos:start="15:21" pos:end="15:37"><operator pos:start="15:21" pos:end="15:21">&amp;</operator><name pos:start="15:22" pos:end="15:37"><name pos:start="15:22" pos:end="15:25">vdev</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:37">intp_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="33:5"><if pos:start="17:5" pos:end="33:5">if <condition pos:start="17:8" pos:end="17:41">(<expr pos:start="17:9" pos:end="17:40"><name pos:start="17:9" pos:end="17:19"><name pos:start="17:9" pos:end="17:12">intp</name><operator pos:start="17:13" pos:end="17:14">-&gt;</operator><name pos:start="17:15" pos:end="17:19">state</name></name> <operator pos:start="17:21" pos:end="17:22">==</operator> <name pos:start="17:24" pos:end="17:40">VFIO_IRQ_INACTIVE</name></expr>)</condition> <block pos:start="17:43" pos:end="33:5">{<block_content pos:start="19:9" pos:end="31:9">

        <macro pos:start="19:9" pos:end="19:50"><name pos:start="19:9" pos:end="19:21">QLIST_FOREACH</name><argument_list pos:start="19:22" pos:end="19:50">(<argument pos:start="19:23" pos:end="19:25">tmp</argument>, <argument pos:start="19:28" pos:end="19:43">&amp;vdev-&gt;intp_list</argument>, <argument pos:start="19:46" pos:end="19:49">next</argument>)</argument_list></macro> <block pos:start="19:52" pos:end="31:9">{<block_content pos:start="21:13" pos:end="29:13">

            <if_stmt pos:start="21:13" pos:end="29:13"><if pos:start="21:13" pos:end="29:13">if <condition pos:start="21:16" pos:end="23:47">(<expr pos:start="21:17" pos:end="23:46"><name pos:start="21:17" pos:end="21:26"><name pos:start="21:17" pos:end="21:19">tmp</name><operator pos:start="21:20" pos:end="21:21">-&gt;</operator><name pos:start="21:22" pos:end="21:26">state</name></name> <operator pos:start="21:28" pos:end="21:29">==</operator> <name pos:start="21:31" pos:end="21:45">VFIO_IRQ_ACTIVE</name> <operator pos:start="21:47" pos:end="21:48">||</operator>

                <name pos:start="23:17" pos:end="23:26"><name pos:start="23:17" pos:end="23:19">tmp</name><operator pos:start="23:20" pos:end="23:21">-&gt;</operator><name pos:start="23:22" pos:end="23:26">state</name></name> <operator pos:start="23:28" pos:end="23:29">==</operator> <name pos:start="23:31" pos:end="23:46">VFIO_IRQ_PENDING</name></expr>)</condition> <block pos:start="23:49" pos:end="29:13">{<block_content pos:start="25:17" pos:end="27:22">

                <expr_stmt pos:start="25:17" pos:end="25:38"><expr pos:start="25:17" pos:end="25:37"><name pos:start="25:17" pos:end="25:30">delay_handling</name> <operator pos:start="25:32" pos:end="25:32">=</operator> <name pos:start="25:34" pos:end="25:37">true</name></expr>;</expr_stmt>

                <break pos:start="27:17" pos:end="27:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="35:5" pos:end="59:5"><if pos:start="35:5" pos:end="59:5">if <condition pos:start="35:8" pos:end="35:23">(<expr pos:start="35:9" pos:end="35:22"><name pos:start="35:9" pos:end="35:22">delay_handling</name></expr>)</condition> <block pos:start="35:25" pos:end="59:5">{<block_content pos:start="45:9" pos:end="57:15">

        <comment type="block" pos:start="37:9" pos:end="43:11">/*

         * the new IRQ gets a pending status and is pushed in

         * the pending queue

         */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:39"><expr pos:start="45:9" pos:end="45:38"><name pos:start="45:9" pos:end="45:19"><name pos:start="45:9" pos:end="45:12">intp</name><operator pos:start="45:13" pos:end="45:14">-&gt;</operator><name pos:start="45:15" pos:end="45:19">state</name></name> <operator pos:start="45:21" pos:end="45:21">=</operator> <name pos:start="45:23" pos:end="45:38">VFIO_IRQ_PENDING</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:57"><expr pos:start="47:9" pos:end="47:56"><call pos:start="47:9" pos:end="47:56"><name pos:start="47:9" pos:end="47:45">trace_vfio_intp_interrupt_set_pending</name><argument_list pos:start="47:46" pos:end="47:56">(<argument pos:start="47:47" pos:end="47:55"><expr pos:start="47:47" pos:end="47:55"><name pos:start="47:47" pos:end="47:55"><name pos:start="47:47" pos:end="47:50">intp</name><operator pos:start="47:51" pos:end="47:52">-&gt;</operator><name pos:start="47:53" pos:end="47:55">pin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="51:43"><expr pos:start="49:9" pos:end="51:42"><call pos:start="49:9" pos:end="51:42"><name pos:start="49:9" pos:end="49:28">QSIMPLEQ_INSERT_TAIL</name><argument_list pos:start="49:29" pos:end="51:42">(<argument pos:start="49:30" pos:end="49:54"><expr pos:start="49:30" pos:end="49:54"><operator pos:start="49:30" pos:end="49:30">&amp;</operator><name pos:start="49:31" pos:end="49:54"><name pos:start="49:31" pos:end="49:34">vdev</name><operator pos:start="49:35" pos:end="49:36">-&gt;</operator><name pos:start="49:37" pos:end="49:54">pending_intp_queue</name></name></expr></argument>,

                             <argument pos:start="51:30" pos:end="51:33"><expr pos:start="51:30" pos:end="51:33"><name pos:start="51:30" pos:end="51:33">intp</name></expr></argument>, <argument pos:start="51:36" pos:end="51:41"><expr pos:start="51:36" pos:end="51:41"><name pos:start="51:36" pos:end="51:41">pqnext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:62"><expr pos:start="53:9" pos:end="53:61"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:61"><name pos:start="53:15" pos:end="53:43">event_notifier_test_and_clear</name><argument_list pos:start="53:44" pos:end="53:61">(<argument pos:start="53:45" pos:end="53:60"><expr pos:start="53:45" pos:end="53:60"><operator pos:start="53:45" pos:end="53:45">&amp;</operator><name pos:start="53:46" pos:end="53:60"><name pos:start="53:46" pos:end="53:49">intp</name><operator pos:start="53:50" pos:end="53:51">-&gt;</operator><name pos:start="53:52" pos:end="53:60">interrupt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:45"><expr pos:start="55:9" pos:end="55:44"><call pos:start="55:9" pos:end="55:44"><name pos:start="55:9" pos:end="55:25">qemu_mutex_unlock</name><argument_list pos:start="55:26" pos:end="55:44">(<argument pos:start="55:27" pos:end="55:43"><expr pos:start="55:27" pos:end="55:43"><operator pos:start="55:27" pos:end="55:27">&amp;</operator><name pos:start="55:28" pos:end="55:43"><name pos:start="55:28" pos:end="55:31">vdev</name><operator pos:start="55:32" pos:end="55:33">-&gt;</operator><name pos:start="55:34" pos:end="55:43">intp_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="65:71"><expr pos:start="63:5" pos:end="65:70"><call pos:start="63:5" pos:end="65:70"><name pos:start="63:5" pos:end="63:38">trace_vfio_platform_intp_interrupt</name><argument_list pos:start="63:39" pos:end="65:70">(<argument pos:start="63:40" pos:end="63:48"><expr pos:start="63:40" pos:end="63:48"><name pos:start="63:40" pos:end="63:48"><name pos:start="63:40" pos:end="63:43">intp</name><operator pos:start="63:44" pos:end="63:45">-&gt;</operator><name pos:start="63:46" pos:end="63:48">pin</name></name></expr></argument>,

                              <argument pos:start="65:31" pos:end="65:69"><expr pos:start="65:31" pos:end="65:69"><call pos:start="65:31" pos:end="65:69"><name pos:start="65:31" pos:end="65:51">event_notifier_get_fd</name><argument_list pos:start="65:52" pos:end="65:69">(<argument pos:start="65:53" pos:end="65:68"><expr pos:start="65:53" pos:end="65:68"><operator pos:start="65:53" pos:end="65:53">&amp;</operator><name pos:start="65:54" pos:end="65:68"><name pos:start="65:54" pos:end="65:57">intp</name><operator pos:start="65:58" pos:end="65:59">-&gt;</operator><name pos:start="65:60" pos:end="65:68">interrupt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:58"><expr pos:start="69:5" pos:end="69:57"><name pos:start="69:5" pos:end="69:7">ret</name> <operator pos:start="69:9" pos:end="69:9">=</operator> <call pos:start="69:11" pos:end="69:57"><name pos:start="69:11" pos:end="69:39">event_notifier_test_and_clear</name><argument_list pos:start="69:40" pos:end="69:57">(<argument pos:start="69:41" pos:end="69:56"><expr pos:start="69:41" pos:end="69:56"><operator pos:start="69:41" pos:end="69:41">&amp;</operator><name pos:start="69:42" pos:end="69:56"><name pos:start="69:42" pos:end="69:45">intp</name><operator pos:start="69:46" pos:end="69:47">-&gt;</operator><name pos:start="69:48" pos:end="69:56">interrupt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="77:5"><if pos:start="71:5" pos:end="77:5">if <condition pos:start="71:8" pos:end="71:13">(<expr pos:start="71:9" pos:end="71:12"><operator pos:start="71:9" pos:end="71:9">!</operator><name pos:start="71:10" pos:end="71:12">ret</name></expr>)</condition> <block pos:start="71:15" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:67">

        <expr_stmt pos:start="73:9" pos:end="75:67"><expr pos:start="73:9" pos:end="75:66"><call pos:start="73:9" pos:end="75:66"><name pos:start="73:9" pos:end="73:20">error_report</name><argument_list pos:start="73:21" pos:end="75:66">(<argument pos:start="73:22" pos:end="73:59"><expr pos:start="73:22" pos:end="73:59"><literal type="string" pos:start="73:22" pos:end="73:59">"Error when clearing fd=%d (ret = %d)"</literal></expr></argument>,

                     <argument pos:start="75:22" pos:end="75:60"><expr pos:start="75:22" pos:end="75:60"><call pos:start="75:22" pos:end="75:60"><name pos:start="75:22" pos:end="75:42">event_notifier_get_fd</name><argument_list pos:start="75:43" pos:end="75:60">(<argument pos:start="75:44" pos:end="75:59"><expr pos:start="75:44" pos:end="75:59"><operator pos:start="75:44" pos:end="75:44">&amp;</operator><name pos:start="75:45" pos:end="75:59"><name pos:start="75:45" pos:end="75:48">intp</name><operator pos:start="75:49" pos:end="75:50">-&gt;</operator><name pos:start="75:51" pos:end="75:59">interrupt</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="75:63" pos:end="75:65"><expr pos:start="75:63" pos:end="75:65"><name pos:start="75:63" pos:end="75:65">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:34"><expr pos:start="81:5" pos:end="81:33"><name pos:start="81:5" pos:end="81:15"><name pos:start="81:5" pos:end="81:8">intp</name><operator pos:start="81:9" pos:end="81:10">-&gt;</operator><name pos:start="81:11" pos:end="81:15">state</name></name> <operator pos:start="81:17" pos:end="81:17">=</operator> <name pos:start="81:19" pos:end="81:33">VFIO_IRQ_ACTIVE</name></expr>;</expr_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:24">/* sets slow path */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:39"><expr pos:start="87:5" pos:end="87:38"><call pos:start="87:5" pos:end="87:38"><name pos:start="87:5" pos:end="87:25">vfio_mmap_set_enabled</name><argument_list pos:start="87:26" pos:end="87:38">(<argument pos:start="87:27" pos:end="87:30"><expr pos:start="87:27" pos:end="87:30"><name pos:start="87:27" pos:end="87:30">vdev</name></expr></argument>, <argument pos:start="87:33" pos:end="87:37"><expr pos:start="87:33" pos:end="87:37"><name pos:start="87:33" pos:end="87:37">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:33">/* trigger the virtual IRQ */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:35"><expr pos:start="93:5" pos:end="93:34"><call pos:start="93:5" pos:end="93:34"><name pos:start="93:5" pos:end="93:16">qemu_set_irq</name><argument_list pos:start="93:17" pos:end="93:34">(<argument pos:start="93:18" pos:end="93:30"><expr pos:start="93:18" pos:end="93:30"><name pos:start="93:18" pos:end="93:30"><name pos:start="93:18" pos:end="93:21">intp</name><operator pos:start="93:22" pos:end="93:23">-&gt;</operator><name pos:start="93:24" pos:end="93:30">qemuirq</name></name></expr></argument>, <argument pos:start="93:33" pos:end="93:33"><expr pos:start="93:33" pos:end="93:33"><literal type="number" pos:start="93:33" pos:end="93:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="97:5" pos:end="103:7">/*

     * Schedule the mmap timer which will restore fastpath when no IRQ

     * is active anymore

     */</comment>

    <if_stmt pos:start="105:5" pos:end="113:5"><if pos:start="105:5" pos:end="113:5">if <condition pos:start="105:8" pos:end="105:27">(<expr pos:start="105:9" pos:end="105:26"><name pos:start="105:9" pos:end="105:26"><name pos:start="105:9" pos:end="105:12">vdev</name><operator pos:start="105:13" pos:end="105:14">-&gt;</operator><name pos:start="105:15" pos:end="105:26">mmap_timeout</name></name></expr>)</condition> <block pos:start="105:29" pos:end="113:5">{<block_content pos:start="107:9" pos:end="111:42">

        <expr_stmt pos:start="107:9" pos:end="111:42"><expr pos:start="107:9" pos:end="111:41"><call pos:start="107:9" pos:end="111:41"><name pos:start="107:9" pos:end="107:17">timer_mod</name><argument_list pos:start="107:18" pos:end="111:41">(<argument pos:start="107:19" pos:end="107:34"><expr pos:start="107:19" pos:end="107:34"><name pos:start="107:19" pos:end="107:34"><name pos:start="107:19" pos:end="107:22">vdev</name><operator pos:start="107:23" pos:end="107:24">-&gt;</operator><name pos:start="107:25" pos:end="107:34">mmap_timer</name></name></expr></argument>,

                  <argument pos:start="109:19" pos:end="111:40"><expr pos:start="109:19" pos:end="111:40"><call pos:start="109:19" pos:end="109:55"><name pos:start="109:19" pos:end="109:35">qemu_clock_get_ms</name><argument_list pos:start="109:36" pos:end="109:55">(<argument pos:start="109:37" pos:end="109:54"><expr pos:start="109:37" pos:end="109:54"><name pos:start="109:37" pos:end="109:54">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call> <operator pos:start="109:57" pos:end="109:57">+</operator>

                      <name pos:start="111:23" pos:end="111:40"><name pos:start="111:23" pos:end="111:26">vdev</name><operator pos:start="111:27" pos:end="111:28">-&gt;</operator><name pos:start="111:29" pos:end="111:40">mmap_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:41"><expr pos:start="115:5" pos:end="115:40"><call pos:start="115:5" pos:end="115:40"><name pos:start="115:5" pos:end="115:21">qemu_mutex_unlock</name><argument_list pos:start="115:22" pos:end="115:40">(<argument pos:start="115:23" pos:end="115:39"><expr pos:start="115:23" pos:end="115:39"><operator pos:start="115:23" pos:end="115:23">&amp;</operator><name pos:start="115:24" pos:end="115:39"><name pos:start="115:24" pos:end="115:27">vdev</name><operator pos:start="115:28" pos:end="115:29">-&gt;</operator><name pos:start="115:30" pos:end="115:39">intp_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
