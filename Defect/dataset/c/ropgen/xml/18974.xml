<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18974.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:25">ff_probe_input_buffer</name><parameter_list pos:start="1:26" pos:end="5:75">(<parameter pos:start="1:27" pos:end="1:44"><decl pos:start="1:27" pos:end="1:44"><type pos:start="1:27" pos:end="1:44"><name pos:start="1:27" pos:end="1:39">ByteIOContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier><modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">pb</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:65"><decl pos:start="1:47" pos:end="1:65"><type pos:start="1:47" pos:end="1:65"><name pos:start="1:47" pos:end="1:59">AVInputFormat</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier><modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:65">fmt</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:46"><decl pos:start="3:27" pos:end="3:46"><type pos:start="3:27" pos:end="3:46"><specifier pos:start="3:27" pos:end="3:31">const</specifier> <name pos:start="3:33" pos:end="3:36">char</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:46">filename</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:60"><decl pos:start="3:49" pos:end="3:60"><type pos:start="3:49" pos:end="3:60"><name pos:start="3:49" pos:end="3:52">void</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:60">logctx</name></decl></parameter>,

                          <parameter pos:start="5:27" pos:end="5:45"><decl pos:start="5:27" pos:end="5:45"><type pos:start="5:27" pos:end="5:45"><name pos:start="5:27" pos:end="5:34">unsigned</name> <name pos:start="5:36" pos:end="5:38">int</name></type> <name pos:start="5:40" pos:end="5:45">offset</name></decl></parameter>, <parameter pos:start="5:48" pos:end="5:74"><decl pos:start="5:48" pos:end="5:74"><type pos:start="5:48" pos:end="5:74"><name pos:start="5:48" pos:end="5:55">unsigned</name> <name pos:start="5:57" pos:end="5:59">int</name></type> <name pos:start="5:61" pos:end="5:74">max_probe_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="125:1">{<block_content pos:start="9:5" pos:end="123:13">

    <decl_stmt pos:start="9:5" pos:end="9:65"><decl pos:start="9:5" pos:end="9:64"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:15">AVProbeData</name></type> <name pos:start="9:17" pos:end="9:18">pd</name> <init pos:start="9:20" pos:end="9:64">= <expr pos:start="9:22" pos:end="9:64"><block pos:start="9:22" pos:end="9:64">{ <expr pos:start="9:24" pos:end="9:47"><name pos:start="9:24" pos:end="9:31">filename</name> <operator pos:start="9:33" pos:end="9:33">?</operator> <name pos:start="9:35" pos:end="9:42">filename</name> <operator pos:start="9:44" pos:end="9:44">:</operator> <literal type="string" pos:start="9:46" pos:end="9:47">""</literal></expr>, <expr pos:start="9:50" pos:end="9:53"><name pos:start="9:50" pos:end="9:53">NULL</name></expr>, <expr pos:start="9:56" pos:end="9:62"><operator pos:start="9:56" pos:end="9:56">-</operator><name pos:start="9:57" pos:end="9:62">offset</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">char</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:22">buf</name> <init pos:start="11:24" pos:end="11:29">= <expr pos:start="11:26" pos:end="11:29"><name pos:start="11:26" pos:end="11:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name> <init pos:start="13:13" pos:end="13:15">= <expr pos:start="13:15" pos:end="13:15"><literal type="number" pos:start="13:15" pos:end="13:15">0</literal></expr></init></decl>, <decl pos:start="13:18" pos:end="13:27"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:18" pos:end="13:27">probe_size</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="29:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:24">(<expr pos:start="17:9" pos:end="17:23"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:23">max_probe_size</name></expr>)</condition> <block pos:start="17:26" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:39">

        <expr_stmt pos:start="19:9" pos:end="19:39"><expr pos:start="19:9" pos:end="19:38"><name pos:start="19:9" pos:end="19:22">max_probe_size</name> <operator pos:start="19:24" pos:end="19:24">=</operator> <name pos:start="19:26" pos:end="19:38">PROBE_BUF_MAX</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="21:7" pos:end="25:5">else if <condition pos:start="21:15" pos:end="21:46">(<expr pos:start="21:16" pos:end="21:45"><name pos:start="21:16" pos:end="21:29">max_probe_size</name> <operator pos:start="21:31" pos:end="21:31">&gt;</operator> <name pos:start="21:33" pos:end="21:45">PROBE_BUF_MAX</name></expr>)</condition> <block pos:start="21:48" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:39">

        <expr_stmt pos:start="23:9" pos:end="23:39"><expr pos:start="23:9" pos:end="23:38"><name pos:start="23:9" pos:end="23:22">max_probe_size</name> <operator pos:start="23:24" pos:end="23:24">=</operator> <name pos:start="23:26" pos:end="23:38">PROBE_BUF_MAX</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="25:7" pos:end="29:5">else if <condition pos:start="25:15" pos:end="25:46">(<expr pos:start="25:16" pos:end="25:45"><name pos:start="25:16" pos:end="25:29">max_probe_size</name> <operator pos:start="25:31" pos:end="25:31">&lt;</operator> <name pos:start="25:33" pos:end="25:45">PROBE_BUF_MIN</name></expr>)</condition> <block pos:start="25:48" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:31">

        <return pos:start="27:9" pos:end="27:31">return <expr pos:start="27:16" pos:end="27:30"><call pos:start="27:16" pos:end="27:30"><name pos:start="27:16" pos:end="27:22">AVERROR</name><argument_list pos:start="27:23" pos:end="27:30">(<argument pos:start="27:24" pos:end="27:29"><expr pos:start="27:24" pos:end="27:29"><name pos:start="27:24" pos:end="27:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:33">(<expr pos:start="33:9" pos:end="33:32"><name pos:start="33:9" pos:end="33:14">offset</name> <operator pos:start="33:16" pos:end="33:17">&gt;=</operator> <name pos:start="33:19" pos:end="33:32">max_probe_size</name></expr>)</condition> <block pos:start="33:35" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:31">

        <return pos:start="35:9" pos:end="35:31">return <expr pos:start="35:16" pos:end="35:30"><call pos:start="35:16" pos:end="35:30"><name pos:start="35:16" pos:end="35:22">AVERROR</name><argument_list pos:start="35:23" pos:end="35:30">(<argument pos:start="35:24" pos:end="35:29"><expr pos:start="35:24" pos:end="35:29"><name pos:start="35:24" pos:end="35:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="41:5" pos:end="105:5">for<control pos:start="41:8" pos:end="41:99">(<init pos:start="41:9" pos:end="41:34"><expr pos:start="41:9" pos:end="41:33"><name pos:start="41:9" pos:end="41:18">probe_size</name><operator pos:start="41:19" pos:end="41:19">=</operator> <name pos:start="41:21" pos:end="41:33">PROBE_BUF_MIN</name></expr>;</init> <condition pos:start="41:36" pos:end="41:83"><expr pos:start="41:36" pos:end="41:82"><name pos:start="41:36" pos:end="41:45">probe_size</name><operator pos:start="41:46" pos:end="41:47">&lt;=</operator><name pos:start="41:48" pos:end="41:61">max_probe_size</name> <operator pos:start="41:63" pos:end="41:64">&amp;&amp;</operator> <operator pos:start="41:66" pos:end="41:66">!</operator><operator pos:start="41:67" pos:end="41:67">*</operator><name pos:start="41:68" pos:end="41:70">fmt</name> <operator pos:start="41:72" pos:end="41:73">&amp;&amp;</operator> <name pos:start="41:75" pos:end="41:77">ret</name> <operator pos:start="41:79" pos:end="41:80">&gt;=</operator> <literal type="number" pos:start="41:82" pos:end="41:82">0</literal></expr>;</condition> <incr pos:start="41:85" pos:end="41:98"><expr pos:start="41:85" pos:end="41:98"><name pos:start="41:85" pos:end="41:94">probe_size</name><operator pos:start="41:95" pos:end="41:97">&lt;&lt;=</operator><literal type="number" pos:start="41:98" pos:end="41:98">1</literal></expr></incr>)</control><block pos:start="41:100" pos:end="105:5">{<block_content pos:start="43:9" pos:end="103:9">

        <decl_stmt pos:start="43:9" pos:end="43:79"><decl pos:start="43:9" pos:end="43:15"><type pos:start="43:9" pos:end="43:11"><name pos:start="43:9" pos:end="43:11">int</name></type> <name pos:start="43:13" pos:end="43:15">ret</name></decl>, <decl pos:start="43:18" pos:end="43:78"><type ref="prev" pos:start="43:9" pos:end="43:11"/><name pos:start="43:18" pos:end="43:22">score</name> <init pos:start="43:24" pos:end="43:78">= <expr pos:start="43:26" pos:end="43:78"><ternary pos:start="43:26" pos:end="43:78"><condition pos:start="43:26" pos:end="43:54"><expr pos:start="43:26" pos:end="43:52"><name pos:start="43:26" pos:end="43:35">probe_size</name> <operator pos:start="43:37" pos:end="43:37">&lt;</operator> <name pos:start="43:39" pos:end="43:52">max_probe_size</name></expr> ?</condition><then pos:start="43:56" pos:end="43:74"> <expr pos:start="43:56" pos:end="43:74"><name pos:start="43:56" pos:end="43:72">AVPROBE_SCORE_MAX</name><operator pos:start="43:73" pos:end="43:73">/</operator><literal type="number" pos:start="43:74" pos:end="43:74">4</literal></expr> </then><else pos:start="43:76" pos:end="43:78">: <expr pos:start="43:78" pos:end="43:78"><literal type="number" pos:start="43:78" pos:end="43:78">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="45:9" pos:end="45:75"><decl pos:start="45:9" pos:end="45:74"><type pos:start="45:9" pos:end="45:11"><name pos:start="45:9" pos:end="45:11">int</name></type> <name pos:start="45:13" pos:end="45:22">buf_offset</name> <init pos:start="45:24" pos:end="45:74">= <expr pos:start="45:26" pos:end="45:74"><ternary pos:start="45:26" pos:end="45:74"><condition pos:start="45:26" pos:end="45:56"><expr pos:start="45:26" pos:end="45:54"><operator pos:start="45:26" pos:end="45:26">(</operator><name pos:start="45:27" pos:end="45:36">probe_size</name> <operator pos:start="45:38" pos:end="45:39">==</operator> <name pos:start="45:41" pos:end="45:53">PROBE_BUF_MIN</name><operator pos:start="45:54" pos:end="45:54">)</operator></expr> ?</condition><then pos:start="45:58" pos:end="45:58"> <expr pos:start="45:58" pos:end="45:58"><literal type="number" pos:start="45:58" pos:end="45:58">0</literal></expr> </then><else pos:start="45:60" pos:end="45:74">: <expr pos:start="45:62" pos:end="45:74"><name pos:start="45:62" pos:end="45:71">probe_size</name><operator pos:start="45:72" pos:end="45:73">&gt;&gt;</operator><literal type="number" pos:start="45:74" pos:end="45:74">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:32">(<expr pos:start="49:13" pos:end="49:31"><name pos:start="49:13" pos:end="49:22">probe_size</name> <operator pos:start="49:24" pos:end="49:24">&lt;</operator> <name pos:start="49:26" pos:end="49:31">offset</name></expr>)</condition> <block pos:start="49:34" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:21">

            <continue pos:start="51:13" pos:end="51:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="57:9" pos:end="57:29">/* read probe data */</comment>

        <expr_stmt pos:start="59:9" pos:end="59:65"><expr pos:start="59:9" pos:end="59:64"><name pos:start="59:9" pos:end="59:11">buf</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="59:64"><name pos:start="59:15" pos:end="59:24">av_realloc</name><argument_list pos:start="59:25" pos:end="59:64">(<argument pos:start="59:26" pos:end="59:28"><expr pos:start="59:26" pos:end="59:28"><name pos:start="59:26" pos:end="59:28">buf</name></expr></argument>, <argument pos:start="59:31" pos:end="59:63"><expr pos:start="59:31" pos:end="59:63"><name pos:start="59:31" pos:end="59:40">probe_size</name> <operator pos:start="59:42" pos:end="59:42">+</operator> <name pos:start="59:44" pos:end="59:63">AVPROBE_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="77:9"><if pos:start="61:9" pos:end="77:9">if <condition pos:start="61:12" pos:end="61:83">(<expr pos:start="61:13" pos:end="61:82"><operator pos:start="61:13" pos:end="61:13">(</operator><name pos:start="61:14" pos:end="61:16">ret</name> <operator pos:start="61:18" pos:end="61:18">=</operator> <call pos:start="61:20" pos:end="61:77"><name pos:start="61:20" pos:end="61:29">get_buffer</name><argument_list pos:start="61:30" pos:end="61:77">(<argument pos:start="61:31" pos:end="61:33"><expr pos:start="61:31" pos:end="61:33"><operator pos:start="61:31" pos:end="61:31">*</operator><name pos:start="61:32" pos:end="61:33">pb</name></expr></argument>, <argument pos:start="61:36" pos:end="61:51"><expr pos:start="61:36" pos:end="61:51"><name pos:start="61:36" pos:end="61:38">buf</name> <operator pos:start="61:40" pos:end="61:40">+</operator> <name pos:start="61:42" pos:end="61:51">buf_offset</name></expr></argument>, <argument pos:start="61:54" pos:end="61:76"><expr pos:start="61:54" pos:end="61:76"><name pos:start="61:54" pos:end="61:63">probe_size</name> <operator pos:start="61:65" pos:end="61:65">-</operator> <name pos:start="61:67" pos:end="61:76">buf_offset</name></expr></argument>)</argument_list></call><operator pos:start="61:78" pos:end="61:78">)</operator> <operator pos:start="61:80" pos:end="61:80">&lt;</operator> <literal type="number" pos:start="61:82" pos:end="61:82">0</literal></expr>)</condition> <block pos:start="61:85" pos:end="77:9">{<block_content pos:start="65:13" pos:end="75:20">

            <comment type="block" pos:start="63:13" pos:end="63:75">/* fail if error was not end of file, otherwise, lower score */</comment>

            <if_stmt pos:start="65:13" pos:end="71:13"><if pos:start="65:13" pos:end="71:13">if <condition pos:start="65:16" pos:end="65:35">(<expr pos:start="65:17" pos:end="65:34"><name pos:start="65:17" pos:end="65:19">ret</name> <operator pos:start="65:21" pos:end="65:22">!=</operator> <name pos:start="65:24" pos:end="65:34">AVERROR_EOF</name></expr>)</condition> <block pos:start="65:37" pos:end="71:13">{<block_content pos:start="67:17" pos:end="69:27">

                <expr_stmt pos:start="67:17" pos:end="67:29"><expr pos:start="67:17" pos:end="67:28"><call pos:start="67:17" pos:end="67:28"><name pos:start="67:17" pos:end="67:23">av_free</name><argument_list pos:start="67:24" pos:end="67:28">(<argument pos:start="67:25" pos:end="67:27"><expr pos:start="67:25" pos:end="67:27"><name pos:start="67:25" pos:end="67:27">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="69:17" pos:end="69:27">return <expr pos:start="69:24" pos:end="69:26"><name pos:start="69:24" pos:end="69:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:22"><expr pos:start="73:13" pos:end="73:21"><name pos:start="73:13" pos:end="73:17">score</name> <operator pos:start="73:19" pos:end="73:19">=</operator> <literal type="number" pos:start="73:21" pos:end="73:21">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:20"><expr pos:start="75:13" pos:end="75:19"><name pos:start="75:13" pos:end="75:15">ret</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <literal type="number" pos:start="75:19" pos:end="75:19">0</literal></expr>;</expr_stmt>            <comment type="block" pos:start="75:33" pos:end="75:73">/* error was end of file, nothing read */</comment>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:27"><expr pos:start="79:9" pos:end="79:26"><name pos:start="79:9" pos:end="79:19"><name pos:start="79:9" pos:end="79:10">pd</name><operator pos:start="79:11" pos:end="79:11">.</operator><name pos:start="79:12" pos:end="79:19">buf_size</name></name> <operator pos:start="79:21" pos:end="79:22">+=</operator> <name pos:start="79:24" pos:end="79:26">ret</name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:30"><expr pos:start="81:9" pos:end="81:29"><name pos:start="81:9" pos:end="81:14"><name pos:start="81:9" pos:end="81:10">pd</name><operator pos:start="81:11" pos:end="81:11">.</operator><name pos:start="81:12" pos:end="81:14">buf</name></name> <operator pos:start="81:16" pos:end="81:16">=</operator> <operator pos:start="81:18" pos:end="81:18">&amp;</operator><name pos:start="81:19" pos:end="81:29"><name pos:start="81:19" pos:end="81:21">buf</name><index pos:start="81:22" pos:end="81:29">[<expr pos:start="81:23" pos:end="81:28"><name pos:start="81:23" pos:end="81:28">offset</name></expr>]</index></name></expr>;</expr_stmt>



        <expr_stmt pos:start="85:9" pos:end="85:62"><expr pos:start="85:9" pos:end="85:61"><call pos:start="85:9" pos:end="85:61"><name pos:start="85:9" pos:end="85:14">memset</name><argument_list pos:start="85:15" pos:end="85:61">(<argument pos:start="85:16" pos:end="85:35"><expr pos:start="85:16" pos:end="85:35"><name pos:start="85:16" pos:end="85:21"><name pos:start="85:16" pos:end="85:17">pd</name><operator pos:start="85:18" pos:end="85:18">.</operator><name pos:start="85:19" pos:end="85:21">buf</name></name> <operator pos:start="85:23" pos:end="85:23">+</operator> <name pos:start="85:25" pos:end="85:35"><name pos:start="85:25" pos:end="85:26">pd</name><operator pos:start="85:27" pos:end="85:27">.</operator><name pos:start="85:28" pos:end="85:35">buf_size</name></name></expr></argument>, <argument pos:start="85:38" pos:end="85:38"><expr pos:start="85:38" pos:end="85:38"><literal type="number" pos:start="85:38" pos:end="85:38">0</literal></expr></argument>, <argument pos:start="85:41" pos:end="85:60"><expr pos:start="85:41" pos:end="85:60"><name pos:start="85:41" pos:end="85:60">AVPROBE_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="89:9" pos:end="89:31">/* guess file format */</comment>

        <expr_stmt pos:start="91:9" pos:end="91:54"><expr pos:start="91:9" pos:end="91:53"><operator pos:start="91:9" pos:end="91:9">*</operator><name pos:start="91:10" pos:end="91:12">fmt</name> <operator pos:start="91:14" pos:end="91:14">=</operator> <call pos:start="91:16" pos:end="91:53"><name pos:start="91:16" pos:end="91:37">av_probe_input_format2</name><argument_list pos:start="91:38" pos:end="91:53">(<argument pos:start="91:39" pos:end="91:41"><expr pos:start="91:39" pos:end="91:41"><operator pos:start="91:39" pos:end="91:39">&amp;</operator><name pos:start="91:40" pos:end="91:41">pd</name></expr></argument>, <argument pos:start="91:44" pos:end="91:44"><expr pos:start="91:44" pos:end="91:44"><literal type="number" pos:start="91:44" pos:end="91:44">1</literal></expr></argument>, <argument pos:start="91:47" pos:end="91:52"><expr pos:start="91:47" pos:end="91:52"><operator pos:start="91:47" pos:end="91:47">&amp;</operator><name pos:start="91:48" pos:end="91:52">score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="103:9"><if pos:start="93:9" pos:end="103:9">if<condition pos:start="93:11" pos:end="93:16">(<expr pos:start="93:12" pos:end="93:15"><operator pos:start="93:12" pos:end="93:12">*</operator><name pos:start="93:13" pos:end="93:15">fmt</name></expr>)</condition><block pos:start="93:17" pos:end="103:9">{<block_content pos:start="95:13" pos:end="101:102">

            <if_stmt pos:start="95:13" pos:end="101:102"><if pos:start="95:13" pos:end="99:13">if<condition pos:start="95:15" pos:end="95:44">(<expr pos:start="95:16" pos:end="95:43"><name pos:start="95:16" pos:end="95:20">score</name> <operator pos:start="95:22" pos:end="95:23">&lt;=</operator> <name pos:start="95:25" pos:end="95:41">AVPROBE_SCORE_MAX</name><operator pos:start="95:42" pos:end="95:42">/</operator><literal type="number" pos:start="95:43" pos:end="95:43">4</literal></expr>)</condition><block pos:start="95:45" pos:end="99:13">{<block_content pos:start="97:17" pos:end="97:125"> <comment type="line" pos:start="95:47" pos:end="95:91">//this can only be true in the last iteration</comment>

                <expr_stmt pos:start="97:17" pos:end="97:125"><expr pos:start="97:17" pos:end="97:124"><call pos:start="97:17" pos:end="97:124"><name pos:start="97:17" pos:end="97:22">av_log</name><argument_list pos:start="97:23" pos:end="97:124">(<argument pos:start="97:24" pos:end="97:29"><expr pos:start="97:24" pos:end="97:29"><name pos:start="97:24" pos:end="97:29">logctx</name></expr></argument>, <argument pos:start="97:32" pos:end="97:45"><expr pos:start="97:32" pos:end="97:45"><name pos:start="97:32" pos:end="97:45">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="97:48" pos:end="97:116"><expr pos:start="97:48" pos:end="97:116"><literal type="string" pos:start="97:48" pos:end="97:116">"Format detected only with low score of %d, misdetection possible!\n"</literal></expr></argument>, <argument pos:start="97:119" pos:end="97:123"><expr pos:start="97:119" pos:end="97:123"><name pos:start="97:119" pos:end="97:123">score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if><else pos:start="99:14" pos:end="101:102">else<block type="pseudo" pos:start="101:17" pos:end="101:102"><block_content pos:start="101:17" pos:end="101:102">

                <expr_stmt pos:start="101:17" pos:end="101:102"><expr pos:start="101:17" pos:end="101:101"><call pos:start="101:17" pos:end="101:101"><name pos:start="101:17" pos:end="101:22">av_log</name><argument_list pos:start="101:23" pos:end="101:101">(<argument pos:start="101:24" pos:end="101:29"><expr pos:start="101:24" pos:end="101:29"><name pos:start="101:24" pos:end="101:29">logctx</name></expr></argument>, <argument pos:start="101:32" pos:end="101:43"><expr pos:start="101:32" pos:end="101:43"><name pos:start="101:32" pos:end="101:43">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="101:46" pos:end="101:81"><expr pos:start="101:46" pos:end="101:81"><literal type="string" pos:start="101:46" pos:end="101:81">"Probed with size=%d and score=%d\n"</literal></expr></argument>, <argument pos:start="101:84" pos:end="101:93"><expr pos:start="101:84" pos:end="101:93"><name pos:start="101:84" pos:end="101:93">probe_size</name></expr></argument>, <argument pos:start="101:96" pos:end="101:100"><expr pos:start="101:96" pos:end="101:100"><name pos:start="101:96" pos:end="101:100">score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="109:5" pos:end="109:17"><expr pos:start="109:5" pos:end="109:16"><call pos:start="109:5" pos:end="109:16"><name pos:start="109:5" pos:end="109:11">av_free</name><argument_list pos:start="109:12" pos:end="109:16">(<argument pos:start="109:13" pos:end="109:15"><expr pos:start="109:13" pos:end="109:15"><name pos:start="109:13" pos:end="109:15">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="111:5" pos:end="119:5"><if pos:start="111:5" pos:end="119:5">if <condition pos:start="111:8" pos:end="111:40">(<expr pos:start="111:9" pos:end="111:39"><call pos:start="111:9" pos:end="111:35"><name pos:start="111:9" pos:end="111:17">url_fseek</name><argument_list pos:start="111:18" pos:end="111:35">(<argument pos:start="111:19" pos:end="111:21"><expr pos:start="111:19" pos:end="111:21"><operator pos:start="111:19" pos:end="111:19">*</operator><name pos:start="111:20" pos:end="111:21">pb</name></expr></argument>, <argument pos:start="111:24" pos:end="111:24"><expr pos:start="111:24" pos:end="111:24"><literal type="number" pos:start="111:24" pos:end="111:24">0</literal></expr></argument>, <argument pos:start="111:27" pos:end="111:34"><expr pos:start="111:27" pos:end="111:34"><name pos:start="111:27" pos:end="111:34">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="111:37" pos:end="111:37">&lt;</operator> <literal type="number" pos:start="111:39" pos:end="111:39">0</literal></expr>)</condition> <block pos:start="111:42" pos:end="119:5">{<block_content pos:start="113:9" pos:end="117:32">

        <expr_stmt pos:start="113:9" pos:end="113:24"><expr pos:start="113:9" pos:end="113:23"><call pos:start="113:9" pos:end="113:23"><name pos:start="113:9" pos:end="113:18">url_fclose</name><argument_list pos:start="113:19" pos:end="113:23">(<argument pos:start="113:20" pos:end="113:22"><expr pos:start="113:20" pos:end="113:22"><operator pos:start="113:20" pos:end="113:20">*</operator><name pos:start="113:21" pos:end="113:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="117:32"><if pos:start="115:9" pos:end="117:32">if <condition pos:start="115:12" pos:end="115:52">(<expr pos:start="115:13" pos:end="115:51"><call pos:start="115:13" pos:end="115:47"><name pos:start="115:13" pos:end="115:21">url_fopen</name><argument_list pos:start="115:22" pos:end="115:47">(<argument pos:start="115:23" pos:end="115:24"><expr pos:start="115:23" pos:end="115:24"><name pos:start="115:23" pos:end="115:24">pb</name></expr></argument>, <argument pos:start="115:27" pos:end="115:34"><expr pos:start="115:27" pos:end="115:34"><name pos:start="115:27" pos:end="115:34">filename</name></expr></argument>, <argument pos:start="115:37" pos:end="115:46"><expr pos:start="115:37" pos:end="115:46"><name pos:start="115:37" pos:end="115:46">URL_RDONLY</name></expr></argument>)</argument_list></call> <operator pos:start="115:49" pos:end="115:49">&lt;</operator> <literal type="number" pos:start="115:51" pos:end="115:51">0</literal></expr>)</condition><block type="pseudo" pos:start="117:13" pos:end="117:32"><block_content pos:start="117:13" pos:end="117:32">

            <return pos:start="117:13" pos:end="117:32">return <expr pos:start="117:20" pos:end="117:31"><call pos:start="117:20" pos:end="117:31"><name pos:start="117:20" pos:end="117:26">AVERROR</name><argument_list pos:start="117:27" pos:end="117:31">(<argument pos:start="117:28" pos:end="117:30"><expr pos:start="117:28" pos:end="117:30"><name pos:start="117:28" pos:end="117:30">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="123:5" pos:end="123:13">return <expr pos:start="123:12" pos:end="123:12"><literal type="number" pos:start="123:12" pos:end="123:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
