<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6473.c" pos:tabs="8"><function pos:start="1:1" pos:end="165:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">ram_save_block</name><parameter_list pos:start="1:26" pos:end="1:55">(<parameter pos:start="1:27" pos:end="1:37"><decl pos:start="1:27" pos:end="1:37"><type pos:start="1:27" pos:end="1:37"><name pos:start="1:27" pos:end="1:34">QEMUFile</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">f</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:54"><decl pos:start="1:40" pos:end="1:54"><type pos:start="1:40" pos:end="1:54"><name pos:start="1:40" pos:end="1:43">bool</name></type> <name pos:start="1:45" pos:end="1:54">last_stage</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="165:1">{<block_content pos:start="5:5" pos:end="163:22">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">RAMBlock</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:19">block</name> <init pos:start="5:21" pos:end="5:37">= <expr pos:start="5:23" pos:end="5:37"><name pos:start="5:23" pos:end="5:37">last_seen_block</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:14">ram_addr_t</name></type> <name pos:start="7:16" pos:end="7:21">offset</name> <init pos:start="7:23" pos:end="7:35">= <expr pos:start="7:25" pos:end="7:35"><name pos:start="7:25" pos:end="7:35">last_offset</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:23">complete_round</name> <init pos:start="9:25" pos:end="9:31">= <expr pos:start="9:27" pos:end="9:31"><name pos:start="9:27" pos:end="9:31">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:18">bytes_sent</name> <init pos:start="11:20" pos:end="11:22">= <expr pos:start="11:22" pos:end="11:22"><literal type="number" pos:start="11:22" pos:end="11:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MemoryRegion</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:20">mr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:14">ram_addr_t</name></type> <name pos:start="15:16" pos:end="15:27">current_addr</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="21:47"><if pos:start="19:5" pos:end="21:47">if <condition pos:start="19:8" pos:end="19:15">(<expr pos:start="19:9" pos:end="19:14"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:14">block</name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:47"><block_content pos:start="21:9" pos:end="21:47">

        <expr_stmt pos:start="21:9" pos:end="21:47"><expr pos:start="21:9" pos:end="21:46"><name pos:start="21:9" pos:end="21:13">block</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <call pos:start="21:17" pos:end="21:46"><name pos:start="21:17" pos:end="21:28">QTAILQ_FIRST</name><argument_list pos:start="21:29" pos:end="21:46">(<argument pos:start="21:30" pos:end="21:45"><expr pos:start="21:30" pos:end="21:45"><operator pos:start="21:30" pos:end="21:30">&amp;</operator><name pos:start="21:31" pos:end="21:45"><name pos:start="21:31" pos:end="21:38">ram_list</name><operator pos:start="21:39" pos:end="21:39">.</operator><name pos:start="21:40" pos:end="21:45">blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <while pos:start="25:5" pos:end="155:5">while <condition pos:start="25:11" pos:end="25:16">(<expr pos:start="25:12" pos:end="25:15"><name pos:start="25:12" pos:end="25:15">true</name></expr>)</condition> <block pos:start="25:18" pos:end="155:5">{<block_content pos:start="27:9" pos:end="153:9">

        <expr_stmt pos:start="27:9" pos:end="27:23"><expr pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:10">mr</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <name pos:start="27:14" pos:end="27:22"><name pos:start="27:14" pos:end="27:18">block</name><operator pos:start="27:19" pos:end="27:20">-&gt;</operator><name pos:start="27:21" pos:end="27:22">mr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:67"><expr pos:start="29:9" pos:end="29:66"><name pos:start="29:9" pos:end="29:14">offset</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <call pos:start="29:18" pos:end="29:66"><name pos:start="29:18" pos:end="29:54">migration_bitmap_find_and_reset_dirty</name><argument_list pos:start="29:55" pos:end="29:66">(<argument pos:start="29:56" pos:end="29:57"><expr pos:start="29:56" pos:end="29:57"><name pos:start="29:56" pos:end="29:57">mr</name></expr></argument>, <argument pos:start="29:60" pos:end="29:65"><expr pos:start="29:60" pos:end="29:65"><name pos:start="29:60" pos:end="29:65">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="37:9"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="33:34">(<expr pos:start="31:13" pos:end="33:33"><name pos:start="31:13" pos:end="31:26">complete_round</name> <operator pos:start="31:28" pos:end="31:29">&amp;&amp;</operator> <name pos:start="31:31" pos:end="31:35">block</name> <operator pos:start="31:37" pos:end="31:38">==</operator> <name pos:start="31:40" pos:end="31:54">last_seen_block</name> <operator pos:start="31:56" pos:end="31:57">&amp;&amp;</operator>

            <name pos:start="33:13" pos:end="33:18">offset</name> <operator pos:start="33:20" pos:end="33:21">&gt;=</operator> <name pos:start="33:23" pos:end="33:33">last_offset</name></expr>)</condition> <block pos:start="33:36" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:18">

            <break pos:start="35:13" pos:end="35:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="39:9" pos:end="153:9"><if pos:start="39:9" pos:end="55:9">if <condition pos:start="39:12" pos:end="39:36">(<expr pos:start="39:13" pos:end="39:35"><name pos:start="39:13" pos:end="39:18">offset</name> <operator pos:start="39:20" pos:end="39:21">&gt;=</operator> <name pos:start="39:23" pos:end="39:35"><name pos:start="39:23" pos:end="39:27">block</name><operator pos:start="39:28" pos:end="39:29">-&gt;</operator><name pos:start="39:30" pos:end="39:35">length</name></name></expr>)</condition> <block pos:start="39:38" pos:end="55:9">{<block_content pos:start="41:13" pos:end="53:13">

            <expr_stmt pos:start="41:13" pos:end="41:23"><expr pos:start="41:13" pos:end="41:22"><name pos:start="41:13" pos:end="41:18">offset</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <literal type="number" pos:start="41:22" pos:end="41:22">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:45"><expr pos:start="43:13" pos:end="43:44"><name pos:start="43:13" pos:end="43:17">block</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <call pos:start="43:21" pos:end="43:44"><name pos:start="43:21" pos:end="43:31">QTAILQ_NEXT</name><argument_list pos:start="43:32" pos:end="43:44">(<argument pos:start="43:33" pos:end="43:37"><expr pos:start="43:33" pos:end="43:37"><name pos:start="43:33" pos:end="43:37">block</name></expr></argument>, <argument pos:start="43:40" pos:end="43:43"><expr pos:start="43:40" pos:end="43:43"><name pos:start="43:40" pos:end="43:43">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="45:13" pos:end="53:13"><if pos:start="45:13" pos:end="53:13">if <condition pos:start="45:16" pos:end="45:23">(<expr pos:start="45:17" pos:end="45:22"><operator pos:start="45:17" pos:end="45:17">!</operator><name pos:start="45:18" pos:end="45:22">block</name></expr>)</condition> <block pos:start="45:25" pos:end="53:13">{<block_content pos:start="47:17" pos:end="51:39">

                <expr_stmt pos:start="47:17" pos:end="47:55"><expr pos:start="47:17" pos:end="47:54"><name pos:start="47:17" pos:end="47:21">block</name> <operator pos:start="47:23" pos:end="47:23">=</operator> <call pos:start="47:25" pos:end="47:54"><name pos:start="47:25" pos:end="47:36">QTAILQ_FIRST</name><argument_list pos:start="47:37" pos:end="47:54">(<argument pos:start="47:38" pos:end="47:53"><expr pos:start="47:38" pos:end="47:53"><operator pos:start="47:38" pos:end="47:38">&amp;</operator><name pos:start="47:39" pos:end="47:53"><name pos:start="47:39" pos:end="47:46">ram_list</name><operator pos:start="47:47" pos:end="47:47">.</operator><name pos:start="47:48" pos:end="47:53">blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="49:17" pos:end="49:38"><expr pos:start="49:17" pos:end="49:37"><name pos:start="49:17" pos:end="49:30">complete_round</name> <operator pos:start="49:32" pos:end="49:32">=</operator> <name pos:start="49:34" pos:end="49:37">true</name></expr>;</expr_stmt>

                <expr_stmt pos:start="51:17" pos:end="51:39"><expr pos:start="51:17" pos:end="51:38"><name pos:start="51:17" pos:end="51:30">ram_bulk_stage</name> <operator pos:start="51:32" pos:end="51:32">=</operator> <name pos:start="51:34" pos:end="51:38">false</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="55:11" pos:end="153:9">else <block pos:start="55:16" pos:end="153:9">{<block_content pos:start="57:13" pos:end="151:13">

            <decl_stmt pos:start="57:13" pos:end="57:20"><decl pos:start="57:13" pos:end="57:19"><type pos:start="57:13" pos:end="57:15"><name pos:start="57:13" pos:end="57:15">int</name></type> <name pos:start="57:17" pos:end="57:19">ret</name></decl>;</decl_stmt>

            <decl_stmt pos:start="59:13" pos:end="59:23"><decl pos:start="59:13" pos:end="59:22"><type pos:start="59:13" pos:end="59:21"><name pos:start="59:13" pos:end="59:19">uint8_t</name> <modifier pos:start="59:21" pos:end="59:21">*</modifier></type><name pos:start="59:22" pos:end="59:22">p</name></decl>;</decl_stmt>

            <decl_stmt pos:start="61:13" pos:end="63:43"><decl pos:start="61:13" pos:end="63:42"><type pos:start="61:13" pos:end="61:15"><name pos:start="61:13" pos:end="61:15">int</name></type> <name pos:start="61:17" pos:end="61:20">cont</name> <init pos:start="61:22" pos:end="63:42">= <expr pos:start="61:24" pos:end="63:42"><ternary pos:start="61:24" pos:end="63:42"><condition pos:start="61:24" pos:end="61:51"><expr pos:start="61:24" pos:end="61:49"><operator pos:start="61:24" pos:end="61:24">(</operator><name pos:start="61:25" pos:end="61:29">block</name> <operator pos:start="61:31" pos:end="61:32">==</operator> <name pos:start="61:34" pos:end="61:48">last_sent_block</name><operator pos:start="61:49" pos:end="61:49">)</operator></expr> ?</condition><then pos:start="63:17" pos:end="63:38">

                <expr pos:start="63:17" pos:end="63:38"><name pos:start="63:17" pos:end="63:38">RAM_SAVE_FLAG_CONTINUE</name></expr> </then><else pos:start="63:40" pos:end="63:42">: <expr pos:start="63:42" pos:end="63:42"><literal type="number" pos:start="63:42" pos:end="63:42">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="67:13" pos:end="67:55"><expr pos:start="67:13" pos:end="67:54"><name pos:start="67:13" pos:end="67:13">p</name> <operator pos:start="67:15" pos:end="67:15">=</operator> <call pos:start="67:17" pos:end="67:45"><name pos:start="67:17" pos:end="67:41">memory_region_get_ram_ptr</name><argument_list pos:start="67:42" pos:end="67:45">(<argument pos:start="67:43" pos:end="67:44"><expr pos:start="67:43" pos:end="67:44"><name pos:start="67:43" pos:end="67:44">mr</name></expr></argument>)</argument_list></call> <operator pos:start="67:47" pos:end="67:47">+</operator> <name pos:start="67:49" pos:end="67:54">offset</name></expr>;</expr_stmt>



            <comment type="block" pos:start="71:13" pos:end="71:46">/* In doubt sent page as normal */</comment>

            <expr_stmt pos:start="73:13" pos:end="73:28"><expr pos:start="73:13" pos:end="73:27"><name pos:start="73:13" pos:end="73:22">bytes_sent</name> <operator pos:start="73:24" pos:end="73:24">=</operator> <operator pos:start="73:26" pos:end="73:26">-</operator><literal type="number" pos:start="73:27" pos:end="73:27">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="77:70"><expr pos:start="75:13" pos:end="77:69"><name pos:start="75:13" pos:end="75:15">ret</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <call pos:start="75:19" pos:end="77:69"><name pos:start="75:19" pos:end="75:39">ram_control_save_page</name><argument_list pos:start="75:40" pos:end="77:69">(<argument pos:start="75:41" pos:end="75:41"><expr pos:start="75:41" pos:end="75:41"><name pos:start="75:41" pos:end="75:41">f</name></expr></argument>, <argument pos:start="75:44" pos:end="75:56"><expr pos:start="75:44" pos:end="75:56"><name pos:start="75:44" pos:end="75:56"><name pos:start="75:44" pos:end="75:48">block</name><operator pos:start="75:49" pos:end="75:50">-&gt;</operator><name pos:start="75:51" pos:end="75:56">offset</name></name></expr></argument>,

                               <argument pos:start="77:32" pos:end="77:37"><expr pos:start="77:32" pos:end="77:37"><name pos:start="77:32" pos:end="77:37">offset</name></expr></argument>, <argument pos:start="77:40" pos:end="77:55"><expr pos:start="77:40" pos:end="77:55"><name pos:start="77:40" pos:end="77:55">TARGET_PAGE_SIZE</name></expr></argument>, <argument pos:start="77:58" pos:end="77:68"><expr pos:start="77:58" pos:end="77:68"><operator pos:start="77:58" pos:end="77:58">&amp;</operator><name pos:start="77:59" pos:end="77:68">bytes_sent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="81:13" pos:end="123:13"><if pos:start="81:13" pos:end="97:13">if <condition pos:start="81:16" pos:end="81:49">(<expr pos:start="81:17" pos:end="81:48"><name pos:start="81:17" pos:end="81:19">ret</name> <operator pos:start="81:21" pos:end="81:22">!=</operator> <name pos:start="81:24" pos:end="81:48">RAM_SAVE_CONTROL_NOT_SUPP</name></expr>)</condition> <block pos:start="81:51" pos:end="97:13">{<block_content pos:start="83:17" pos:end="95:17">

                <if_stmt pos:start="83:17" pos:end="95:17"><if pos:start="83:17" pos:end="95:17">if <condition pos:start="83:20" pos:end="83:52">(<expr pos:start="83:21" pos:end="83:51"><name pos:start="83:21" pos:end="83:23">ret</name> <operator pos:start="83:25" pos:end="83:26">!=</operator> <name pos:start="83:28" pos:end="83:51">RAM_SAVE_CONTROL_DELAYED</name></expr>)</condition> <block pos:start="83:54" pos:end="95:17">{<block_content pos:start="85:21" pos:end="93:21">

                    <if_stmt pos:start="85:21" pos:end="93:21"><if pos:start="85:21" pos:end="89:21">if <condition pos:start="85:24" pos:end="85:39">(<expr pos:start="85:25" pos:end="85:38"><name pos:start="85:25" pos:end="85:34">bytes_sent</name> <operator pos:start="85:36" pos:end="85:36">&gt;</operator> <literal type="number" pos:start="85:38" pos:end="85:38">0</literal></expr>)</condition> <block pos:start="85:41" pos:end="89:21">{<block_content pos:start="87:25" pos:end="87:47">

                        <expr_stmt pos:start="87:25" pos:end="87:47"><expr pos:start="87:25" pos:end="87:46"><name pos:start="87:25" pos:end="87:44"><name pos:start="87:25" pos:end="87:33">acct_info</name><operator pos:start="87:34" pos:end="87:34">.</operator><name pos:start="87:35" pos:end="87:44">norm_pages</name></name><operator pos:start="87:45" pos:end="87:46">++</operator></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="89:23" pos:end="93:21">else if <condition pos:start="89:31" pos:end="89:47">(<expr pos:start="89:32" pos:end="89:46"><name pos:start="89:32" pos:end="89:41">bytes_sent</name> <operator pos:start="89:43" pos:end="89:44">==</operator> <literal type="number" pos:start="89:46" pos:end="89:46">0</literal></expr>)</condition> <block pos:start="89:49" pos:end="93:21">{<block_content pos:start="91:25" pos:end="91:46">

                        <expr_stmt pos:start="91:25" pos:end="91:46"><expr pos:start="91:25" pos:end="91:45"><name pos:start="91:25" pos:end="91:43"><name pos:start="91:25" pos:end="91:33">acct_info</name><operator pos:start="91:34" pos:end="91:34">.</operator><name pos:start="91:35" pos:end="91:43">dup_pages</name></name><operator pos:start="91:44" pos:end="91:45">++</operator></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="97:15" pos:end="109:13">else if <condition pos:start="97:23" pos:end="97:58">(<expr pos:start="97:24" pos:end="97:57"><call pos:start="97:24" pos:end="97:57"><name pos:start="97:24" pos:end="97:36">is_zero_range</name><argument_list pos:start="97:37" pos:end="97:57">(<argument pos:start="97:38" pos:end="97:38"><expr pos:start="97:38" pos:end="97:38"><name pos:start="97:38" pos:end="97:38">p</name></expr></argument>, <argument pos:start="97:41" pos:end="97:56"><expr pos:start="97:41" pos:end="97:56"><name pos:start="97:41" pos:end="97:56">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="97:60" pos:end="109:13">{<block_content pos:start="99:17" pos:end="107:29">

                <expr_stmt pos:start="99:17" pos:end="99:38"><expr pos:start="99:17" pos:end="99:37"><name pos:start="99:17" pos:end="99:35"><name pos:start="99:17" pos:end="99:25">acct_info</name><operator pos:start="99:26" pos:end="99:26">.</operator><name pos:start="99:27" pos:end="99:35">dup_pages</name></name><operator pos:start="99:36" pos:end="99:37">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="101:17" pos:end="103:68"><expr pos:start="101:17" pos:end="103:67"><name pos:start="101:17" pos:end="101:26">bytes_sent</name> <operator pos:start="101:28" pos:end="101:28">=</operator> <call pos:start="101:30" pos:end="103:67"><name pos:start="101:30" pos:end="101:43">save_block_hdr</name><argument_list pos:start="101:44" pos:end="103:67">(<argument pos:start="101:45" pos:end="101:45"><expr pos:start="101:45" pos:end="101:45"><name pos:start="101:45" pos:end="101:45">f</name></expr></argument>, <argument pos:start="101:48" pos:end="101:52"><expr pos:start="101:48" pos:end="101:52"><name pos:start="101:48" pos:end="101:52">block</name></expr></argument>, <argument pos:start="101:55" pos:end="101:60"><expr pos:start="101:55" pos:end="101:60"><name pos:start="101:55" pos:end="101:60">offset</name></expr></argument>, <argument pos:start="101:63" pos:end="101:66"><expr pos:start="101:63" pos:end="101:66"><name pos:start="101:63" pos:end="101:66">cont</name></expr></argument>,

                                            <argument pos:start="103:45" pos:end="103:66"><expr pos:start="103:45" pos:end="103:66"><name pos:start="103:45" pos:end="103:66">RAM_SAVE_FLAG_COMPRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:36"><expr pos:start="105:17" pos:end="105:35"><call pos:start="105:17" pos:end="105:35"><name pos:start="105:17" pos:end="105:29">qemu_put_byte</name><argument_list pos:start="105:30" pos:end="105:35">(<argument pos:start="105:31" pos:end="105:31"><expr pos:start="105:31" pos:end="105:31"><name pos:start="105:31" pos:end="105:31">f</name></expr></argument>, <argument pos:start="105:34" pos:end="105:34"><expr pos:start="105:34" pos:end="105:34"><literal type="number" pos:start="105:34" pos:end="105:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="107:17" pos:end="107:29"><expr pos:start="107:17" pos:end="107:28"><name pos:start="107:17" pos:end="107:26">bytes_sent</name><operator pos:start="107:27" pos:end="107:28">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="109:15" pos:end="123:13">else if <condition pos:start="109:23" pos:end="109:63">(<expr pos:start="109:24" pos:end="109:62"><operator pos:start="109:24" pos:end="109:24">!</operator><name pos:start="109:25" pos:end="109:38">ram_bulk_stage</name> <operator pos:start="109:40" pos:end="109:41">&amp;&amp;</operator> <call pos:start="109:43" pos:end="109:62"><name pos:start="109:43" pos:end="109:60">migrate_use_xbzrle</name><argument_list pos:start="109:61" pos:end="109:62">()</argument_list></call></expr>)</condition> <block pos:start="109:65" pos:end="123:13">{<block_content pos:start="111:17" pos:end="121:17">

                <expr_stmt pos:start="111:17" pos:end="111:54"><expr pos:start="111:17" pos:end="111:53"><name pos:start="111:17" pos:end="111:28">current_addr</name> <operator pos:start="111:30" pos:end="111:30">=</operator> <name pos:start="111:32" pos:end="111:44"><name pos:start="111:32" pos:end="111:36">block</name><operator pos:start="111:37" pos:end="111:38">-&gt;</operator><name pos:start="111:39" pos:end="111:44">offset</name></name> <operator pos:start="111:46" pos:end="111:46">+</operator> <name pos:start="111:48" pos:end="111:53">offset</name></expr>;</expr_stmt>

                <expr_stmt pos:start="113:17" pos:end="115:72"><expr pos:start="113:17" pos:end="115:71"><name pos:start="113:17" pos:end="113:26">bytes_sent</name> <operator pos:start="113:28" pos:end="113:28">=</operator> <call pos:start="113:30" pos:end="115:71"><name pos:start="113:30" pos:end="113:45">save_xbzrle_page</name><argument_list pos:start="113:46" pos:end="115:71">(<argument pos:start="113:47" pos:end="113:47"><expr pos:start="113:47" pos:end="113:47"><name pos:start="113:47" pos:end="113:47">f</name></expr></argument>, <argument pos:start="113:50" pos:end="113:50"><expr pos:start="113:50" pos:end="113:50"><name pos:start="113:50" pos:end="113:50">p</name></expr></argument>, <argument pos:start="113:53" pos:end="113:64"><expr pos:start="113:53" pos:end="113:64"><name pos:start="113:53" pos:end="113:64">current_addr</name></expr></argument>, <argument pos:start="113:67" pos:end="113:71"><expr pos:start="113:67" pos:end="113:71"><name pos:start="113:67" pos:end="113:71">block</name></expr></argument>,

                                              <argument pos:start="115:47" pos:end="115:52"><expr pos:start="115:47" pos:end="115:52"><name pos:start="115:47" pos:end="115:52">offset</name></expr></argument>, <argument pos:start="115:55" pos:end="115:58"><expr pos:start="115:55" pos:end="115:58"><name pos:start="115:55" pos:end="115:58">cont</name></expr></argument>, <argument pos:start="115:61" pos:end="115:70"><expr pos:start="115:61" pos:end="115:70"><name pos:start="115:61" pos:end="115:70">last_stage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="117:17" pos:end="121:17"><if pos:start="117:17" pos:end="121:17">if <condition pos:start="117:20" pos:end="117:32">(<expr pos:start="117:21" pos:end="117:31"><operator pos:start="117:21" pos:end="117:21">!</operator><name pos:start="117:22" pos:end="117:31">last_stage</name></expr>)</condition> <block pos:start="117:34" pos:end="121:17">{<block_content pos:start="119:21" pos:end="119:68">

                    <expr_stmt pos:start="119:21" pos:end="119:68"><expr pos:start="119:21" pos:end="119:67"><name pos:start="119:21" pos:end="119:21">p</name> <operator pos:start="119:23" pos:end="119:23">=</operator> <call pos:start="119:25" pos:end="119:67"><name pos:start="119:25" pos:end="119:39">get_cached_data</name><argument_list pos:start="119:40" pos:end="119:67">(<argument pos:start="119:41" pos:end="119:52"><expr pos:start="119:41" pos:end="119:52"><name pos:start="119:41" pos:end="119:52"><name pos:start="119:41" pos:end="119:46">XBZRLE</name><operator pos:start="119:47" pos:end="119:47">.</operator><name pos:start="119:48" pos:end="119:52">cache</name></name></expr></argument>, <argument pos:start="119:55" pos:end="119:66"><expr pos:start="119:55" pos:end="119:66"><name pos:start="119:55" pos:end="119:66">current_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="127:13" pos:end="127:48">/* XBZRLE overflow or normal page */</comment>

            <if_stmt pos:start="129:13" pos:end="139:13"><if pos:start="129:13" pos:end="139:13">if <condition pos:start="129:16" pos:end="129:33">(<expr pos:start="129:17" pos:end="129:32"><name pos:start="129:17" pos:end="129:26">bytes_sent</name> <operator pos:start="129:28" pos:end="129:29">==</operator> <operator pos:start="129:31" pos:end="129:31">-</operator><literal type="number" pos:start="129:32" pos:end="129:32">1</literal></expr>)</condition> <block pos:start="129:35" pos:end="139:13">{<block_content pos:start="131:17" pos:end="137:39">

                <expr_stmt pos:start="131:17" pos:end="131:88"><expr pos:start="131:17" pos:end="131:87"><name pos:start="131:17" pos:end="131:26">bytes_sent</name> <operator pos:start="131:28" pos:end="131:28">=</operator> <call pos:start="131:30" pos:end="131:87"><name pos:start="131:30" pos:end="131:43">save_block_hdr</name><argument_list pos:start="131:44" pos:end="131:87">(<argument pos:start="131:45" pos:end="131:45"><expr pos:start="131:45" pos:end="131:45"><name pos:start="131:45" pos:end="131:45">f</name></expr></argument>, <argument pos:start="131:48" pos:end="131:52"><expr pos:start="131:48" pos:end="131:52"><name pos:start="131:48" pos:end="131:52">block</name></expr></argument>, <argument pos:start="131:55" pos:end="131:60"><expr pos:start="131:55" pos:end="131:60"><name pos:start="131:55" pos:end="131:60">offset</name></expr></argument>, <argument pos:start="131:63" pos:end="131:66"><expr pos:start="131:63" pos:end="131:66"><name pos:start="131:63" pos:end="131:66">cont</name></expr></argument>, <argument pos:start="131:69" pos:end="131:86"><expr pos:start="131:69" pos:end="131:86"><name pos:start="131:69" pos:end="131:86">RAM_SAVE_FLAG_PAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:62"><expr pos:start="133:17" pos:end="133:61"><call pos:start="133:17" pos:end="133:61"><name pos:start="133:17" pos:end="133:37">qemu_put_buffer_async</name><argument_list pos:start="133:38" pos:end="133:61">(<argument pos:start="133:39" pos:end="133:39"><expr pos:start="133:39" pos:end="133:39"><name pos:start="133:39" pos:end="133:39">f</name></expr></argument>, <argument pos:start="133:42" pos:end="133:42"><expr pos:start="133:42" pos:end="133:42"><name pos:start="133:42" pos:end="133:42">p</name></expr></argument>, <argument pos:start="133:45" pos:end="133:60"><expr pos:start="133:45" pos:end="133:60"><name pos:start="133:45" pos:end="133:60">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="135:17" pos:end="135:47"><expr pos:start="135:17" pos:end="135:46"><name pos:start="135:17" pos:end="135:26">bytes_sent</name> <operator pos:start="135:28" pos:end="135:29">+=</operator> <name pos:start="135:31" pos:end="135:46">TARGET_PAGE_SIZE</name></expr>;</expr_stmt>

                <expr_stmt pos:start="137:17" pos:end="137:39"><expr pos:start="137:17" pos:end="137:38"><name pos:start="137:17" pos:end="137:36"><name pos:start="137:17" pos:end="137:25">acct_info</name><operator pos:start="137:26" pos:end="137:26">.</operator><name pos:start="137:27" pos:end="137:36">norm_pages</name></name><operator pos:start="137:37" pos:end="137:38">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="143:13" pos:end="143:61">/* if page is unmodified, continue to the next */</comment>

            <if_stmt pos:start="145:13" pos:end="151:13"><if pos:start="145:13" pos:end="151:13">if <condition pos:start="145:16" pos:end="145:31">(<expr pos:start="145:17" pos:end="145:30"><name pos:start="145:17" pos:end="145:26">bytes_sent</name> <operator pos:start="145:28" pos:end="145:28">&gt;</operator> <literal type="number" pos:start="145:30" pos:end="145:30">0</literal></expr>)</condition> <block pos:start="145:33" pos:end="151:13">{<block_content pos:start="147:17" pos:end="149:22">

                <expr_stmt pos:start="147:17" pos:end="147:40"><expr pos:start="147:17" pos:end="147:39"><name pos:start="147:17" pos:end="147:31">last_sent_block</name> <operator pos:start="147:33" pos:end="147:33">=</operator> <name pos:start="147:35" pos:end="147:39">block</name></expr>;</expr_stmt>

                <break pos:start="149:17" pos:end="149:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="157:5" pos:end="157:28"><expr pos:start="157:5" pos:end="157:27"><name pos:start="157:5" pos:end="157:19">last_seen_block</name> <operator pos:start="157:21" pos:end="157:21">=</operator> <name pos:start="157:23" pos:end="157:27">block</name></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:25"><expr pos:start="159:5" pos:end="159:24"><name pos:start="159:5" pos:end="159:15">last_offset</name> <operator pos:start="159:17" pos:end="159:17">=</operator> <name pos:start="159:19" pos:end="159:24">offset</name></expr>;</expr_stmt>



    <return pos:start="163:5" pos:end="163:22">return <expr pos:start="163:12" pos:end="163:21"><name pos:start="163:12" pos:end="163:21">bytes_sent</name></expr>;</return>

</block_content>}</block></function>
</unit>
