<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9668.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">fpu_dump_state</name><parameter_list pos:start="1:27" pos:end="5:37">(<parameter pos:start="1:28" pos:end="1:40"><decl pos:start="1:28" pos:end="1:40"><type pos:start="1:28" pos:end="1:40"><name pos:start="1:28" pos:end="1:35">CPUState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">env</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:49"><decl pos:start="1:43" pos:end="1:49"><type pos:start="1:43" pos:end="1:49"><name pos:start="1:43" pos:end="1:46">FILE</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">f</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:76"><function_decl pos:start="3:28" pos:end="3:76"><type pos:start="3:28" pos:end="3:30"><name pos:start="3:28" pos:end="3:30">int</name></type> (<modifier pos:start="3:33" pos:end="3:33">*</modifier><name pos:start="3:34" pos:end="3:44">fpu_fprintf</name>)<parameter_list pos:start="3:46" pos:end="3:76">(<parameter pos:start="3:47" pos:end="3:53"><decl pos:start="3:47" pos:end="3:53"><type pos:start="3:47" pos:end="3:53"><name pos:start="3:47" pos:end="3:50">FILE</name> <modifier pos:start="3:52" pos:end="3:52">*</modifier></type><name pos:start="3:53" pos:end="3:53">f</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:70"><decl pos:start="3:56" pos:end="3:70"><type pos:start="3:56" pos:end="3:70"><specifier pos:start="3:56" pos:end="3:60">const</specifier> <name pos:start="3:62" pos:end="3:65">char</name> <modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:70">fmt</name></decl></parameter>, <parameter pos:start="3:73" pos:end="3:75"><decl pos:start="3:73" pos:end="3:75"><type pos:start="3:73" pos:end="3:75"><modifier pos:start="3:73" pos:end="3:75">...</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:36"><decl pos:start="5:28" pos:end="5:36"><type pos:start="5:28" pos:end="5:36"><name pos:start="5:28" pos:end="5:30">int</name></type> <name pos:start="5:32" pos:end="5:36">flags</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="79:1">{<block_content pos:start="9:5" pos:end="78:0">

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="56:0"><decl pos:start="11:5" pos:end="11:51"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">is_fpu64</name> <init pos:start="11:18" pos:end="11:51">= <expr pos:start="11:20" pos:end="11:51"><operator pos:start="11:20" pos:end="11:20">!</operator><operator pos:start="11:21" pos:end="11:21">!</operator><operator pos:start="11:22" pos:end="11:22">(</operator><name pos:start="11:23" pos:end="11:33"><name pos:start="11:23" pos:end="11:25">env</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:33">hflags</name></name> <operator pos:start="11:35" pos:end="11:35">&amp;</operator> <name pos:start="11:37" pos:end="11:50">MIPS_HFLAG_F64</name><operator pos:start="11:51" pos:end="11:51">)</operator></expr></init></decl>;</decl_stmt>



<cpp:define pos:start="15:1" pos:end="55:14">#<cpp:directive pos:start="15:2" pos:end="15:7">define</cpp:directive> <cpp:macro pos:start="15:9" pos:end="15:20"><name pos:start="15:9" pos:end="15:16">printfpr</name><parameter_list pos:start="15:17" pos:end="15:20">(<parameter pos:start="15:18" pos:end="15:19"><type pos:start="15:18" pos:end="15:19"><name pos:start="15:18" pos:end="15:19">fp</name></type></parameter>)</parameter_list></cpp:macro>                                                    \

    <cpp:value pos:start="17:5" pos:end="55:14">do {                                                                \

        if (is_fpu64)                                                   \

            fpu_fprintf(f, "w:%08x d:%016" PRIx64                       \

                        " fd:%13g fs:%13g psu: %13g\n",                 \

                        (fp)-&gt;w[FP_ENDIAN_IDX], (fp)-&gt;d,                \

                        (double)(fp)-&gt;fd,                               \

                        (double)(fp)-&gt;fs[FP_ENDIAN_IDX],                \

                        (double)(fp)-&gt;fs[!FP_ENDIAN_IDX]);              \

        else {                                                          \

            fpr_t tmp;                                                  \

            tmp.w[FP_ENDIAN_IDX] = (fp)-&gt;w[FP_ENDIAN_IDX];              \

            tmp.w[!FP_ENDIAN_IDX] = ((fp) + 1)-&gt;w[FP_ENDIAN_IDX];       \

            fpu_fprintf(f, "w:%08x d:%016" PRIx64                       \

                        " fd:%13g fs:%13g psu:%13g\n",                  \

                        tmp.w[FP_ENDIAN_IDX], tmp.d,                    \

                        (double)tmp.fd,                                 \

                        (double)tmp.fs[FP_ENDIAN_IDX],                  \

                        (double)tmp.fs[!FP_ENDIAN_IDX]);                \

        }                                                               \

    } while(0)</cpp:value></cpp:define>





    <expr_stmt pos:start="61:5" pos:end="65:71"><expr pos:start="61:5" pos:end="65:70"><call pos:start="61:5" pos:end="65:70"><name pos:start="61:5" pos:end="61:15">fpu_fprintf</name><argument_list pos:start="61:16" pos:end="65:70">(<argument pos:start="61:17" pos:end="61:17"><expr pos:start="61:17" pos:end="61:17"><name pos:start="61:17" pos:end="61:17">f</name></expr></argument>, <argument pos:start="61:20" pos:end="61:88"><expr pos:start="61:20" pos:end="61:88"><literal type="string" pos:start="61:20" pos:end="61:88">"CP1 FCR0 0x%08x  FCR31 0x%08x  SR.FR %d  fp_status 0x%08x(0x%02x)\n"</literal></expr></argument>,

                <argument pos:start="63:17" pos:end="63:36"><expr pos:start="63:17" pos:end="63:36"><name pos:start="63:17" pos:end="63:36"><name pos:start="63:17" pos:end="63:19">env</name><operator pos:start="63:20" pos:end="63:21">-&gt;</operator><name pos:start="63:22" pos:end="63:31">active_fpu</name><operator pos:start="63:32" pos:end="63:32">.</operator><name pos:start="63:33" pos:end="63:36">fcr0</name></name></expr></argument>, <argument pos:start="63:39" pos:end="63:59"><expr pos:start="63:39" pos:end="63:59"><name pos:start="63:39" pos:end="63:59"><name pos:start="63:39" pos:end="63:41">env</name><operator pos:start="63:42" pos:end="63:43">-&gt;</operator><name pos:start="63:44" pos:end="63:53">active_fpu</name><operator pos:start="63:54" pos:end="63:54">.</operator><name pos:start="63:55" pos:end="63:59">fcr31</name></name></expr></argument>, <argument pos:start="63:62" pos:end="63:69"><expr pos:start="63:62" pos:end="63:69"><name pos:start="63:62" pos:end="63:69">is_fpu64</name></expr></argument>, <argument pos:start="63:72" pos:end="63:96"><expr pos:start="63:72" pos:end="63:96"><name pos:start="63:72" pos:end="63:96"><name pos:start="63:72" pos:end="63:74">env</name><operator pos:start="63:75" pos:end="63:76">-&gt;</operator><name pos:start="63:77" pos:end="63:86">active_fpu</name><operator pos:start="63:87" pos:end="63:87">.</operator><name pos:start="63:88" pos:end="63:96">fp_status</name></name></expr></argument>,

                <argument pos:start="65:17" pos:end="65:69"><expr pos:start="65:17" pos:end="65:69"><call pos:start="65:17" pos:end="65:69"><name pos:start="65:17" pos:end="65:41">get_float_exception_flags</name><argument_list pos:start="65:42" pos:end="65:69">(<argument pos:start="65:43" pos:end="65:68"><expr pos:start="65:43" pos:end="65:68"><operator pos:start="65:43" pos:end="65:43">&amp;</operator><name pos:start="65:44" pos:end="65:68"><name pos:start="65:44" pos:end="65:46">env</name><operator pos:start="65:47" pos:end="65:48">-&gt;</operator><name pos:start="65:49" pos:end="65:58">active_fpu</name><operator pos:start="65:59" pos:end="65:59">.</operator><name pos:start="65:60" pos:end="65:68">fp_status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="67:5" pos:end="78:0">for <control pos:start="67:9" pos:end="67:52">(<init pos:start="67:10" pos:end="67:15"><expr pos:start="67:10" pos:end="67:14"><name pos:start="67:10" pos:end="67:10">i</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <literal type="number" pos:start="67:14" pos:end="67:14">0</literal></expr>;</init> <condition pos:start="67:17" pos:end="67:23"><expr pos:start="67:17" pos:end="67:22"><name pos:start="67:17" pos:end="67:17">i</name> <operator pos:start="67:19" pos:end="67:19">&lt;</operator> <literal type="number" pos:start="67:21" pos:end="67:22">32</literal></expr>;</condition> <incr pos:start="67:25" pos:end="67:51"><expr pos:start="67:25" pos:end="67:51"><ternary pos:start="67:25" pos:end="67:51"><condition pos:start="67:25" pos:end="67:36"><expr pos:start="67:25" pos:end="67:34"><operator pos:start="67:25" pos:end="67:25">(</operator><name pos:start="67:26" pos:end="67:33">is_fpu64</name><operator pos:start="67:34" pos:end="67:34">)</operator></expr> ?</condition><then pos:start="67:38" pos:end="67:40"> <expr pos:start="67:38" pos:end="67:40"><name pos:start="67:38" pos:end="67:38">i</name><operator pos:start="67:39" pos:end="67:40">++</operator></expr> </then><else pos:start="67:42" pos:end="67:51">: <expr pos:start="67:44" pos:end="67:51"><operator pos:start="67:44" pos:end="67:44">(</operator><name pos:start="67:45" pos:end="67:45">i</name> <operator pos:start="67:47" pos:end="67:48">+=</operator> <literal type="number" pos:start="67:50" pos:end="67:50">2</literal><operator pos:start="67:51" pos:end="67:51">)</operator></expr></else></ternary></expr></incr>)</control> <block pos:start="67:54" pos:end="78:0">{<block_content pos:start="69:9" pos:end="71:42">

        <expr_stmt pos:start="69:9" pos:end="69:46"><expr pos:start="69:9" pos:end="69:45"><call pos:start="69:9" pos:end="69:45"><name pos:start="69:9" pos:end="69:19">fpu_fprintf</name><argument_list pos:start="69:20" pos:end="69:45">(<argument pos:start="69:21" pos:end="69:21"><expr pos:start="69:21" pos:end="69:21"><name pos:start="69:21" pos:end="69:21">f</name></expr></argument>, <argument pos:start="69:24" pos:end="69:30"><expr pos:start="69:24" pos:end="69:30"><literal type="string" pos:start="69:24" pos:end="69:30">"%3s: "</literal></expr></argument>, <argument pos:start="69:33" pos:end="69:44"><expr pos:start="69:33" pos:end="69:44"><name pos:start="69:33" pos:end="69:44"><name pos:start="69:33" pos:end="69:41">fregnames</name><index pos:start="69:42" pos:end="69:44">[<expr pos:start="69:43" pos:end="69:43"><name pos:start="69:43" pos:end="69:43">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:42"><expr pos:start="71:9" pos:end="71:41"><call pos:start="71:9" pos:end="71:41"><name pos:start="71:9" pos:end="71:16">printfpr</name><argument_list pos:start="71:17" pos:end="71:41">(<argument pos:start="71:18" pos:end="71:40"><expr pos:start="71:18" pos:end="71:40"><operator pos:start="71:18" pos:end="71:18">&amp;</operator><name pos:start="71:19" pos:end="71:40"><name pos:start="71:19" pos:end="71:21">env</name><operator pos:start="71:22" pos:end="71:23">-&gt;</operator><name pos:start="71:24" pos:end="71:33">active_fpu</name><operator pos:start="71:34" pos:end="71:34">.</operator><name pos:start="71:35" pos:end="71:37">fpr</name><index pos:start="71:38" pos:end="71:40">[<expr pos:start="71:39" pos:end="71:39"><name pos:start="71:39" pos:end="71:39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



<cpp:undef pos:start="77:1" pos:end="77:15">#<cpp:directive pos:start="77:2" pos:end="77:6">undef</cpp:directive> <name pos:start="77:8" pos:end="77:15">printfpr</name></cpp:undef>

</block_content>}</block></function>
</unit>
