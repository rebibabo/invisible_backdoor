<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16445.c" pos:tabs="8"><function pos:start="1:1" pos:end="173:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">assign_intx</name><parameter_list pos:start="1:23" pos:end="1:43">(<parameter pos:start="1:24" pos:end="1:42"><decl pos:start="1:24" pos:end="1:42"><type pos:start="1:24" pos:end="1:39"><name pos:start="1:24" pos:end="1:37">AssignedDevice</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">dev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="173:1">{<block_content pos:start="5:5" pos:end="171:13">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:19">AssignedIRQType</name></type> <name pos:start="5:21" pos:end="5:28">new_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">PCIINTxRoute</name></type> <name pos:start="7:18" pos:end="7:27">intx_route</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:22">intx_host_msi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">r</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:46">/* Interrupt PIN 0 means don't use INTx */</comment>

    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:70">(<expr pos:start="17:9" pos:end="17:69"><call pos:start="17:9" pos:end="17:64"><name pos:start="17:9" pos:end="17:34">assigned_dev_pci_read_byte</name><argument_list pos:start="17:35" pos:end="17:64">(<argument pos:start="17:36" pos:end="17:44"><expr pos:start="17:36" pos:end="17:44"><operator pos:start="17:36" pos:end="17:36">&amp;</operator><name pos:start="17:37" pos:end="17:44"><name pos:start="17:37" pos:end="17:39">dev</name><operator pos:start="17:40" pos:end="17:41">-&gt;</operator><name pos:start="17:42" pos:end="17:44">dev</name></name></expr></argument>, <argument pos:start="17:47" pos:end="17:63"><expr pos:start="17:47" pos:end="17:63"><name pos:start="17:47" pos:end="17:63">PCI_INTERRUPT_PIN</name></expr></argument>)</argument_list></call> <operator pos:start="17:66" pos:end="17:67">==</operator> <literal type="number" pos:start="17:69" pos:end="17:69">0</literal></expr>)</condition> <block pos:start="17:72" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:17">

        <expr_stmt pos:start="19:9" pos:end="19:62"><expr pos:start="19:9" pos:end="19:61"><call pos:start="19:9" pos:end="19:61"><name pos:start="19:9" pos:end="19:44">pci_device_set_intx_routing_notifier</name><argument_list pos:start="19:45" pos:end="19:61">(<argument pos:start="19:46" pos:end="19:54"><expr pos:start="19:46" pos:end="19:54"><operator pos:start="19:46" pos:end="19:46">&amp;</operator><name pos:start="19:47" pos:end="19:54"><name pos:start="19:47" pos:end="19:49">dev</name><operator pos:start="19:50" pos:end="19:51">-&gt;</operator><name pos:start="19:52" pos:end="19:54">dev</name></name></expr></argument>, <argument pos:start="19:57" pos:end="19:60"><expr pos:start="19:57" pos:end="19:60"><name pos:start="19:57" pos:end="19:60">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:17">return <expr pos:start="21:16" pos:end="21:16"><literal type="number" pos:start="21:16" pos:end="21:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:35">(<expr pos:start="27:9" pos:end="27:34"><operator pos:start="27:9" pos:end="27:9">!</operator><call pos:start="27:10" pos:end="27:34"><name pos:start="27:10" pos:end="27:32">check_irqchip_in_kernel</name><argument_list pos:start="27:33" pos:end="27:34">()</argument_list></call></expr>)</condition> <block pos:start="27:37" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:24">

        <return pos:start="29:9" pos:end="29:24">return <expr pos:start="29:16" pos:end="29:23"><operator pos:start="29:16" pos:end="29:16">-</operator><name pos:start="29:17" pos:end="29:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="37:74"><expr pos:start="35:5" pos:end="37:73"><call pos:start="35:5" pos:end="37:73"><name pos:start="35:5" pos:end="35:40">pci_device_set_intx_routing_notifier</name><argument_list pos:start="35:41" pos:end="37:73">(<argument pos:start="35:42" pos:end="35:50"><expr pos:start="35:42" pos:end="35:50"><operator pos:start="35:42" pos:end="35:42">&amp;</operator><name pos:start="35:43" pos:end="35:50"><name pos:start="35:43" pos:end="35:45">dev</name><operator pos:start="35:46" pos:end="35:47">-&gt;</operator><name pos:start="35:48" pos:end="35:50">dev</name></name></expr></argument>,

                                         <argument pos:start="37:42" pos:end="37:72"><expr pos:start="37:42" pos:end="37:72"><name pos:start="37:42" pos:end="37:72">assigned_dev_update_irq_routing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:70"><expr pos:start="41:5" pos:end="41:69"><name pos:start="41:5" pos:end="41:14">intx_route</name> <operator pos:start="41:16" pos:end="41:16">=</operator> <call pos:start="41:18" pos:end="41:69"><name pos:start="41:18" pos:end="41:45">pci_device_route_intx_to_irq</name><argument_list pos:start="41:46" pos:end="41:69">(<argument pos:start="41:47" pos:end="41:55"><expr pos:start="41:47" pos:end="41:55"><operator pos:start="41:47" pos:end="41:47">&amp;</operator><name pos:start="41:48" pos:end="41:55"><name pos:start="41:48" pos:end="41:50">dev</name><operator pos:start="41:51" pos:end="41:52">-&gt;</operator><name pos:start="41:53" pos:end="41:55">dev</name></name></expr></argument>, <argument pos:start="41:58" pos:end="41:68"><expr pos:start="41:58" pos:end="41:68"><name pos:start="41:58" pos:end="41:68"><name pos:start="41:58" pos:end="41:60">dev</name><operator pos:start="41:61" pos:end="41:62">-&gt;</operator><name pos:start="41:63" pos:end="41:68">intpin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:49"><expr pos:start="43:5" pos:end="43:48"><call pos:start="43:5" pos:end="43:48"><name pos:start="43:5" pos:end="43:10">assert</name><argument_list pos:start="43:11" pos:end="43:48">(<argument pos:start="43:12" pos:end="43:47"><expr pos:start="43:12" pos:end="43:47"><name pos:start="43:12" pos:end="43:26"><name pos:start="43:12" pos:end="43:21">intx_route</name><operator pos:start="43:22" pos:end="43:22">.</operator><name pos:start="43:23" pos:end="43:26">mode</name></name> <operator pos:start="43:28" pos:end="43:29">!=</operator> <name pos:start="43:31" pos:end="43:47">PCI_INTX_INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="47:5" pos:end="51:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:63">(<expr pos:start="47:9" pos:end="47:62"><operator pos:start="47:9" pos:end="47:9">!</operator><call pos:start="47:10" pos:end="47:62"><name pos:start="47:10" pos:end="47:31">pci_intx_route_changed</name><argument_list pos:start="47:32" pos:end="47:62">(<argument pos:start="47:33" pos:end="47:48"><expr pos:start="47:33" pos:end="47:48"><operator pos:start="47:33" pos:end="47:33">&amp;</operator><name pos:start="47:34" pos:end="47:48"><name pos:start="47:34" pos:end="47:36">dev</name><operator pos:start="47:37" pos:end="47:38">-&gt;</operator><name pos:start="47:39" pos:end="47:48">intx_route</name></name></expr></argument>, <argument pos:start="47:51" pos:end="47:61"><expr pos:start="47:51" pos:end="47:61"><operator pos:start="47:51" pos:end="47:51">&amp;</operator><name pos:start="47:52" pos:end="47:61">intx_route</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:65" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:17">

        <return pos:start="49:9" pos:end="49:17">return <expr pos:start="49:16" pos:end="49:16"><literal type="number" pos:start="49:16" pos:end="49:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="55:5" pos:end="85:5">switch <condition pos:start="55:12" pos:end="55:35">(<expr pos:start="55:13" pos:end="55:34"><name pos:start="55:13" pos:end="55:34"><name pos:start="55:13" pos:end="55:15">dev</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:34">assigned_irq_type</name></name></expr>)</condition> <block pos:start="55:37" pos:end="85:5">{<block_content pos:start="57:5" pos:end="83:14">

    <case pos:start="57:5" pos:end="57:37">case <expr pos:start="57:10" pos:end="57:36"><name pos:start="57:10" pos:end="57:36">ASSIGNED_IRQ_INTX_HOST_INTX</name></expr>:</case>

    <case pos:start="59:5" pos:end="59:36">case <expr pos:start="59:10" pos:end="59:35"><name pos:start="59:10" pos:end="59:35">ASSIGNED_IRQ_INTX_HOST_MSI</name></expr>:</case>

        <expr_stmt pos:start="61:9" pos:end="61:77"><expr pos:start="61:9" pos:end="61:76"><name pos:start="61:9" pos:end="61:21">intx_host_msi</name> <operator pos:start="61:23" pos:end="61:23">=</operator> <name pos:start="61:25" pos:end="61:46"><name pos:start="61:25" pos:end="61:27">dev</name><operator pos:start="61:28" pos:end="61:29">-&gt;</operator><name pos:start="61:30" pos:end="61:46">assigned_irq_type</name></name> <operator pos:start="61:48" pos:end="61:49">==</operator> <name pos:start="61:51" pos:end="61:76">ASSIGNED_IRQ_INTX_HOST_MSI</name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:76"><expr pos:start="63:9" pos:end="63:75"><name pos:start="63:9" pos:end="63:9">r</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <call pos:start="63:13" pos:end="63:75"><name pos:start="63:13" pos:end="63:36">kvm_device_intx_deassign</name><argument_list pos:start="63:37" pos:end="63:75">(<argument pos:start="63:38" pos:end="63:46"><expr pos:start="63:38" pos:end="63:46"><name pos:start="63:38" pos:end="63:46">kvm_state</name></expr></argument>, <argument pos:start="63:49" pos:end="63:59"><expr pos:start="63:49" pos:end="63:59"><name pos:start="63:49" pos:end="63:59"><name pos:start="63:49" pos:end="63:51">dev</name><operator pos:start="63:52" pos:end="63:53">-&gt;</operator><name pos:start="63:54" pos:end="63:59">dev_id</name></name></expr></argument>, <argument pos:start="63:62" pos:end="63:74"><expr pos:start="63:62" pos:end="63:74"><name pos:start="63:62" pos:end="63:74">intx_host_msi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="65:9" pos:end="65:14">break;</break>

    <case pos:start="67:5" pos:end="67:26">case <expr pos:start="67:10" pos:end="67:25"><name pos:start="67:10" pos:end="67:25">ASSIGNED_IRQ_MSI</name></expr>:</case>

        <expr_stmt pos:start="69:9" pos:end="69:60"><expr pos:start="69:9" pos:end="69:59"><name pos:start="69:9" pos:end="69:9">r</name> <operator pos:start="69:11" pos:end="69:11">=</operator> <call pos:start="69:13" pos:end="69:59"><name pos:start="69:13" pos:end="69:35">kvm_device_msi_deassign</name><argument_list pos:start="69:36" pos:end="69:59">(<argument pos:start="69:37" pos:end="69:45"><expr pos:start="69:37" pos:end="69:45"><name pos:start="69:37" pos:end="69:45">kvm_state</name></expr></argument>, <argument pos:start="69:48" pos:end="69:58"><expr pos:start="69:48" pos:end="69:58"><name pos:start="69:48" pos:end="69:58"><name pos:start="69:48" pos:end="69:50">dev</name><operator pos:start="69:51" pos:end="69:52">-&gt;</operator><name pos:start="69:53" pos:end="69:58">dev_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="71:9" pos:end="71:14">break;</break>

    <case pos:start="73:5" pos:end="73:27">case <expr pos:start="73:10" pos:end="73:26"><name pos:start="73:10" pos:end="73:26">ASSIGNED_IRQ_MSIX</name></expr>:</case>

        <expr_stmt pos:start="75:9" pos:end="75:61"><expr pos:start="75:9" pos:end="75:60"><name pos:start="75:9" pos:end="75:9">r</name> <operator pos:start="75:11" pos:end="75:11">=</operator> <call pos:start="75:13" pos:end="75:60"><name pos:start="75:13" pos:end="75:36">kvm_device_msix_deassign</name><argument_list pos:start="75:37" pos:end="75:60">(<argument pos:start="75:38" pos:end="75:46"><expr pos:start="75:38" pos:end="75:46"><name pos:start="75:38" pos:end="75:46">kvm_state</name></expr></argument>, <argument pos:start="75:49" pos:end="75:59"><expr pos:start="75:49" pos:end="75:59"><name pos:start="75:49" pos:end="75:59"><name pos:start="75:49" pos:end="75:51">dev</name><operator pos:start="75:52" pos:end="75:53">-&gt;</operator><name pos:start="75:54" pos:end="75:59">dev_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <default pos:start="79:5" pos:end="79:12">default:</default>

        <expr_stmt pos:start="81:9" pos:end="81:14"><expr pos:start="81:9" pos:end="81:13"><name pos:start="81:9" pos:end="81:9">r</name> <operator pos:start="81:11" pos:end="81:11">=</operator> <literal type="number" pos:start="81:13" pos:end="81:13">0</literal></expr>;</expr_stmt>

        <break pos:start="83:9" pos:end="83:14">break;</break>

    </block_content>}</block></switch>

    <if_stmt pos:start="87:5" pos:end="91:5"><if pos:start="87:5" pos:end="91:5">if <condition pos:start="87:8" pos:end="87:10">(<expr pos:start="87:9" pos:end="87:9"><name pos:start="87:9" pos:end="87:9">r</name></expr>)</condition> <block pos:start="87:12" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:73">

        <expr_stmt pos:start="89:9" pos:end="89:73"><expr pos:start="89:9" pos:end="89:72"><call pos:start="89:9" pos:end="89:72"><name pos:start="89:9" pos:end="89:14">perror</name><argument_list pos:start="89:15" pos:end="89:72">(<argument pos:start="89:16" pos:end="89:71"><expr pos:start="89:16" pos:end="89:71"><literal type="string" pos:start="89:16" pos:end="89:71">"assign_intx: deassignment of previous interrupt failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:47"><expr pos:start="93:5" pos:end="93:46"><name pos:start="93:5" pos:end="93:26"><name pos:start="93:5" pos:end="93:7">dev</name><operator pos:start="93:8" pos:end="93:9">-&gt;</operator><name pos:start="93:10" pos:end="93:26">assigned_irq_type</name></name> <operator pos:start="93:28" pos:end="93:28">=</operator> <name pos:start="93:30" pos:end="93:46">ASSIGNED_IRQ_NONE</name></expr>;</expr_stmt>



    <if_stmt pos:start="97:5" pos:end="103:5"><if pos:start="97:5" pos:end="103:5">if <condition pos:start="97:8" pos:end="97:45">(<expr pos:start="97:9" pos:end="97:44"><name pos:start="97:9" pos:end="97:23"><name pos:start="97:9" pos:end="97:18">intx_route</name><operator pos:start="97:19" pos:end="97:19">.</operator><name pos:start="97:20" pos:end="97:23">mode</name></name> <operator pos:start="97:25" pos:end="97:26">==</operator> <name pos:start="97:28" pos:end="97:44">PCI_INTX_DISABLED</name></expr>)</condition> <block pos:start="97:47" pos:end="103:5">{<block_content pos:start="99:9" pos:end="101:17">

        <expr_stmt pos:start="99:9" pos:end="99:37"><expr pos:start="99:9" pos:end="99:36"><name pos:start="99:9" pos:end="99:23"><name pos:start="99:9" pos:end="99:11">dev</name><operator pos:start="99:12" pos:end="99:13">-&gt;</operator><name pos:start="99:14" pos:end="99:23">intx_route</name></name> <operator pos:start="99:25" pos:end="99:25">=</operator> <name pos:start="99:27" pos:end="99:36">intx_route</name></expr>;</expr_stmt>

        <return pos:start="101:9" pos:end="101:17">return <expr pos:start="101:16" pos:end="101:16"><literal type="number" pos:start="101:16" pos:end="101:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



<label pos:start="107:1" pos:end="107:6"><name pos:start="107:1" pos:end="107:5">retry</name>:</label>

    <if_stmt pos:start="109:5" pos:end="123:5"><if pos:start="109:5" pos:end="117:5">if <condition pos:start="109:8" pos:end="111:53">(<expr pos:start="109:9" pos:end="111:52"><name pos:start="109:9" pos:end="109:21"><name pos:start="109:9" pos:end="109:11">dev</name><operator pos:start="109:12" pos:end="109:13">-&gt;</operator><name pos:start="109:14" pos:end="109:21">features</name></name> <operator pos:start="109:23" pos:end="109:23">&amp;</operator> <name pos:start="109:25" pos:end="109:55">ASSIGNED_DEVICE_PREFER_MSI_MASK</name> <operator pos:start="109:57" pos:end="109:58">&amp;&amp;</operator>

        <name pos:start="111:9" pos:end="111:26"><name pos:start="111:9" pos:end="111:11">dev</name><operator pos:start="111:12" pos:end="111:13">-&gt;</operator><name pos:start="111:14" pos:end="111:16">cap</name><operator pos:start="111:17" pos:end="111:17">.</operator><name pos:start="111:18" pos:end="111:26">available</name></name> <operator pos:start="111:28" pos:end="111:28">&amp;</operator> <name pos:start="111:30" pos:end="111:52">ASSIGNED_DEVICE_CAP_MSI</name></expr>)</condition> <block pos:start="111:55" pos:end="117:5">{<block_content pos:start="113:9" pos:end="115:46">

        <expr_stmt pos:start="113:9" pos:end="113:29"><expr pos:start="113:9" pos:end="113:28"><name pos:start="113:9" pos:end="113:21">intx_host_msi</name> <operator pos:start="113:23" pos:end="113:23">=</operator> <name pos:start="113:25" pos:end="113:28">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:46"><expr pos:start="115:9" pos:end="115:45"><name pos:start="115:9" pos:end="115:16">new_type</name> <operator pos:start="115:18" pos:end="115:18">=</operator> <name pos:start="115:20" pos:end="115:45">ASSIGNED_IRQ_INTX_HOST_MSI</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="117:7" pos:end="123:5">else <block pos:start="117:12" pos:end="123:5">{<block_content pos:start="119:9" pos:end="121:47">

        <expr_stmt pos:start="119:9" pos:end="119:30"><expr pos:start="119:9" pos:end="119:29"><name pos:start="119:9" pos:end="119:21">intx_host_msi</name> <operator pos:start="119:23" pos:end="119:23">=</operator> <name pos:start="119:25" pos:end="119:29">false</name></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:47"><expr pos:start="121:9" pos:end="121:46"><name pos:start="121:9" pos:end="121:16">new_type</name> <operator pos:start="121:18" pos:end="121:18">=</operator> <name pos:start="121:20" pos:end="121:46">ASSIGNED_IRQ_INTX_HOST_INTX</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="127:5" pos:end="129:47"><expr pos:start="127:5" pos:end="129:46"><name pos:start="127:5" pos:end="127:5">r</name> <operator pos:start="127:7" pos:end="127:7">=</operator> <call pos:start="127:9" pos:end="129:46"><name pos:start="127:9" pos:end="127:30">kvm_device_intx_assign</name><argument_list pos:start="127:31" pos:end="129:46">(<argument pos:start="127:32" pos:end="127:40"><expr pos:start="127:32" pos:end="127:40"><name pos:start="127:32" pos:end="127:40">kvm_state</name></expr></argument>, <argument pos:start="127:43" pos:end="127:53"><expr pos:start="127:43" pos:end="127:53"><name pos:start="127:43" pos:end="127:53"><name pos:start="127:43" pos:end="127:45">dev</name><operator pos:start="127:46" pos:end="127:47">-&gt;</operator><name pos:start="127:48" pos:end="127:53">dev_id</name></name></expr></argument>, <argument pos:start="127:56" pos:end="127:68"><expr pos:start="127:56" pos:end="127:68"><name pos:start="127:56" pos:end="127:68">intx_host_msi</name></expr></argument>,

                               <argument pos:start="129:32" pos:end="129:45"><expr pos:start="129:32" pos:end="129:45"><name pos:start="129:32" pos:end="129:45"><name pos:start="129:32" pos:end="129:41">intx_route</name><operator pos:start="129:42" pos:end="129:42">.</operator><name pos:start="129:43" pos:end="129:45">irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="131:5" pos:end="163:5"><if pos:start="131:5" pos:end="163:5">if <condition pos:start="131:8" pos:end="131:14">(<expr pos:start="131:9" pos:end="131:13"><name pos:start="131:9" pos:end="131:9">r</name> <operator pos:start="131:11" pos:end="131:11">&lt;</operator> <literal type="number" pos:start="131:13" pos:end="131:13">0</literal></expr>)</condition> <block pos:start="131:16" pos:end="163:5">{<block_content pos:start="133:9" pos:end="161:17">

        <if_stmt pos:start="133:9" pos:end="151:9"><if pos:start="133:9" pos:end="151:9">if <condition pos:start="133:12" pos:end="135:57">(<expr pos:start="133:13" pos:end="135:56"><name pos:start="133:13" pos:end="133:13">r</name> <operator pos:start="133:15" pos:end="133:16">==</operator> <operator pos:start="133:18" pos:end="133:18">-</operator><name pos:start="133:19" pos:end="133:21">EIO</name> <operator pos:start="133:23" pos:end="133:24">&amp;&amp;</operator> <operator pos:start="133:26" pos:end="133:26">!</operator><operator pos:start="133:27" pos:end="133:27">(</operator><name pos:start="133:28" pos:end="133:40"><name pos:start="133:28" pos:end="133:30">dev</name><operator pos:start="133:31" pos:end="133:32">-&gt;</operator><name pos:start="133:33" pos:end="133:40">features</name></name> <operator pos:start="133:42" pos:end="133:42">&amp;</operator> <name pos:start="133:44" pos:end="133:74">ASSIGNED_DEVICE_PREFER_MSI_MASK</name><operator pos:start="133:75" pos:end="133:75">)</operator> <operator pos:start="133:77" pos:end="133:78">&amp;&amp;</operator>

            <name pos:start="135:13" pos:end="135:30"><name pos:start="135:13" pos:end="135:15">dev</name><operator pos:start="135:16" pos:end="135:17">-&gt;</operator><name pos:start="135:18" pos:end="135:20">cap</name><operator pos:start="135:21" pos:end="135:21">.</operator><name pos:start="135:22" pos:end="135:30">available</name></name> <operator pos:start="135:32" pos:end="135:32">&amp;</operator> <name pos:start="135:34" pos:end="135:56">ASSIGNED_DEVICE_CAP_MSI</name></expr>)</condition> <block pos:start="135:59" pos:end="151:9">{<block_content pos:start="141:13" pos:end="149:23">

            <comment type="block" pos:start="137:13" pos:end="139:74">/* Retry with host-side MSI. There might be an IRQ conflict and

             * either the kernel or the device doesn't support sharing. */</comment>

            <expr_stmt pos:start="141:13" pos:end="143:46"><expr pos:start="141:13" pos:end="143:45"><call pos:start="141:13" pos:end="143:45"><name pos:start="141:13" pos:end="141:24">error_report</name><argument_list pos:start="141:25" pos:end="143:45">(<argument pos:start="141:26" pos:end="143:44"><expr pos:start="141:26" pos:end="143:44"><literal type="string" pos:start="141:26" pos:end="141:65">"Host-side INTx sharing not supported, "</literal>

                         <literal type="string" pos:start="143:26" pos:end="143:44">"using MSI instead"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:78"><expr pos:start="145:13" pos:end="145:77"><call pos:start="145:13" pos:end="145:77"><name pos:start="145:13" pos:end="145:24">error_printf</name><argument_list pos:start="145:25" pos:end="145:77">(<argument pos:start="145:26" pos:end="145:76"><expr pos:start="145:26" pos:end="145:76"><literal type="string" pos:start="145:26" pos:end="145:76">"Some devices do not work properly in this mode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:61"><expr pos:start="147:13" pos:end="147:60"><name pos:start="147:13" pos:end="147:25"><name pos:start="147:13" pos:end="147:15">dev</name><operator pos:start="147:16" pos:end="147:17">-&gt;</operator><name pos:start="147:18" pos:end="147:25">features</name></name> <operator pos:start="147:27" pos:end="147:28">|=</operator> <name pos:start="147:30" pos:end="147:60">ASSIGNED_DEVICE_PREFER_MSI_MASK</name></expr>;</expr_stmt>

            <goto pos:start="149:13" pos:end="149:23">goto <name pos:start="149:18" pos:end="149:22">retry</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="153:9" pos:end="155:53"><expr pos:start="153:9" pos:end="155:52"><call pos:start="153:9" pos:end="155:52"><name pos:start="153:9" pos:end="153:20">error_report</name><argument_list pos:start="153:21" pos:end="155:52">(<argument pos:start="153:22" pos:end="153:58"><expr pos:start="153:22" pos:end="153:58"><literal type="string" pos:start="153:22" pos:end="153:58">"Failed to assign irq for \"%s\": %s"</literal></expr></argument>,

                     <argument pos:start="155:22" pos:end="155:37"><expr pos:start="155:22" pos:end="155:37"><name pos:start="155:22" pos:end="155:37"><name pos:start="155:22" pos:end="155:24">dev</name><operator pos:start="155:25" pos:end="155:26">-&gt;</operator><name pos:start="155:27" pos:end="155:29">dev</name><operator pos:start="155:30" pos:end="155:30">.</operator><name pos:start="155:31" pos:end="155:34">qdev</name><operator pos:start="155:35" pos:end="155:35">.</operator><name pos:start="155:36" pos:end="155:37">id</name></name></expr></argument>, <argument pos:start="155:40" pos:end="155:51"><expr pos:start="155:40" pos:end="155:51"><call pos:start="155:40" pos:end="155:51"><name pos:start="155:40" pos:end="155:47">strerror</name><argument_list pos:start="155:48" pos:end="155:51">(<argument pos:start="155:49" pos:end="155:50"><expr pos:start="155:49" pos:end="155:50"><operator pos:start="155:49" pos:end="155:49">-</operator><name pos:start="155:50" pos:end="155:50">r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="159:64"><expr pos:start="157:9" pos:end="159:63"><call pos:start="157:9" pos:end="159:63"><name pos:start="157:9" pos:end="157:20">error_report</name><argument_list pos:start="157:21" pos:end="159:63">(<argument pos:start="157:22" pos:end="159:62"><expr pos:start="157:22" pos:end="159:62"><literal type="string" pos:start="157:22" pos:end="157:58">"Perhaps you are assigning a device "</literal>

                     <literal type="string" pos:start="159:22" pos:end="159:62">"that shares an IRQ with another device?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="161:9" pos:end="161:17">return <expr pos:start="161:16" pos:end="161:16"><name pos:start="161:16" pos:end="161:16">r</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="167:5" pos:end="167:33"><expr pos:start="167:5" pos:end="167:32"><name pos:start="167:5" pos:end="167:19"><name pos:start="167:5" pos:end="167:7">dev</name><operator pos:start="167:8" pos:end="167:9">-&gt;</operator><name pos:start="167:10" pos:end="167:19">intx_route</name></name> <operator pos:start="167:21" pos:end="167:21">=</operator> <name pos:start="167:23" pos:end="167:32">intx_route</name></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:38"><expr pos:start="169:5" pos:end="169:37"><name pos:start="169:5" pos:end="169:26"><name pos:start="169:5" pos:end="169:7">dev</name><operator pos:start="169:8" pos:end="169:9">-&gt;</operator><name pos:start="169:10" pos:end="169:26">assigned_irq_type</name></name> <operator pos:start="169:28" pos:end="169:28">=</operator> <name pos:start="169:30" pos:end="169:37">new_type</name></expr>;</expr_stmt>

    <return pos:start="171:5" pos:end="171:13">return <expr pos:start="171:12" pos:end="171:12"><name pos:start="171:12" pos:end="171:12">r</name></expr>;</return>

</block_content>}</block></function>
</unit>
