<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15336.c" pos:tabs="8"><function pos:start="1:1" pos:end="343:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">bdrv_img_create</name><parameter_list pos:start="1:21" pos:end="7:34">(<parameter pos:start="1:22" pos:end="1:41"><decl pos:start="1:22" pos:end="1:41"><type pos:start="1:22" pos:end="1:41"><specifier pos:start="1:22" pos:end="1:26">const</specifier> <name pos:start="1:28" pos:end="1:31">char</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:41">filename</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:58"><decl pos:start="1:44" pos:end="1:58"><type pos:start="1:44" pos:end="1:58"><specifier pos:start="1:44" pos:end="1:48">const</specifier> <name pos:start="1:50" pos:end="1:53">char</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:58">fmt</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:46"><decl pos:start="3:22" pos:end="3:46"><type pos:start="3:22" pos:end="3:46"><specifier pos:start="3:22" pos:end="3:26">const</specifier> <name pos:start="3:28" pos:end="3:31">char</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:46">base_filename</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:68"><decl pos:start="3:49" pos:end="3:68"><type pos:start="3:49" pos:end="3:68"><specifier pos:start="3:49" pos:end="3:53">const</specifier> <name pos:start="3:55" pos:end="3:58">char</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:68">base_fmt</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:34"><decl pos:start="5:22" pos:end="5:34"><type pos:start="5:22" pos:end="5:34"><name pos:start="5:22" pos:end="5:25">char</name> <modifier pos:start="5:27" pos:end="5:27">*</modifier></type><name pos:start="5:28" pos:end="5:34">options</name></decl></parameter>, <parameter pos:start="5:37" pos:end="5:53"><decl pos:start="5:37" pos:end="5:53"><type pos:start="5:37" pos:end="5:53"><name pos:start="5:37" pos:end="5:44">uint64_t</name></type> <name pos:start="5:46" pos:end="5:53">img_size</name></decl></parameter>, <parameter pos:start="5:56" pos:end="5:64"><decl pos:start="5:56" pos:end="5:64"><type pos:start="5:56" pos:end="5:64"><name pos:start="5:56" pos:end="5:58">int</name></type> <name pos:start="5:60" pos:end="5:64">flags</name></decl></parameter>, <parameter pos:start="5:67" pos:end="5:76"><decl pos:start="5:67" pos:end="5:76"><type pos:start="5:67" pos:end="5:76"><name pos:start="5:67" pos:end="5:70">bool</name></type> <name pos:start="5:72" pos:end="5:76">quiet</name></decl></parameter>,

                     <parameter pos:start="7:22" pos:end="7:33"><decl pos:start="7:22" pos:end="7:33"><type pos:start="7:22" pos:end="7:33"><name pos:start="7:22" pos:end="7:26">Error</name> <modifier pos:start="7:28" pos:end="7:28">*</modifier><modifier pos:start="7:29" pos:end="7:29">*</modifier></type><name pos:start="7:30" pos:end="7:33">errp</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="343:1">{<block_content pos:start="11:5" pos:end="341:37">

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">QemuOptsList</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:29">create_opts</name> <init pos:start="11:31" pos:end="11:36">= <expr pos:start="11:33" pos:end="11:36"><name pos:start="11:33" pos:end="11:36">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">QemuOpts</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:18">opts</name> <init pos:start="13:20" pos:end="13:25">= <expr pos:start="13:22" pos:end="13:25"><name pos:start="13:22" pos:end="13:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:43"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:27">backing_fmt</name></decl>, <decl pos:start="15:30" pos:end="15:42"><type ref="prev" pos:start="15:5" pos:end="15:16"><modifier pos:start="15:30" pos:end="15:30">*</modifier></type><name pos:start="15:31" pos:end="15:42">backing_file</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:16">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:33"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:15">BlockDriver</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:20">drv</name></decl>, <decl pos:start="19:23" pos:end="19:32"><type ref="prev" pos:start="19:5" pos:end="19:17"><modifier pos:start="19:23" pos:end="19:23">*</modifier></type><name pos:start="19:24" pos:end="19:32">proto_drv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:9">Error</name> <modifier pos:start="21:11" pos:end="21:11">*</modifier></type><name pos:start="21:12" pos:end="21:20">local_err</name> <init pos:start="21:22" pos:end="21:27">= <expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:16"><decl pos:start="23:5" pos:end="23:15"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">ret</name> <init pos:start="23:13" pos:end="23:15">= <expr pos:start="23:15" pos:end="23:15"><literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:43">/* Find driver and parse its options */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:32"><expr pos:start="29:5" pos:end="29:31"><name pos:start="29:5" pos:end="29:7">drv</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:31"><name pos:start="29:11" pos:end="29:26">bdrv_find_format</name><argument_list pos:start="29:27" pos:end="29:31">(<argument pos:start="29:28" pos:end="29:30"><expr pos:start="29:28" pos:end="29:30"><name pos:start="29:28" pos:end="29:30">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:13">(<expr pos:start="31:9" pos:end="31:12"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:12">drv</name></expr>)</condition> <block pos:start="31:15" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:15">

        <expr_stmt pos:start="33:9" pos:end="33:58"><expr pos:start="33:9" pos:end="33:57"><call pos:start="33:9" pos:end="33:57"><name pos:start="33:9" pos:end="33:18">error_setg</name><argument_list pos:start="33:19" pos:end="33:57">(<argument pos:start="33:20" pos:end="33:23"><expr pos:start="33:20" pos:end="33:23"><name pos:start="33:20" pos:end="33:23">errp</name></expr></argument>, <argument pos:start="33:26" pos:end="33:51"><expr pos:start="33:26" pos:end="33:51"><literal type="string" pos:start="33:26" pos:end="33:51">"Unknown file format '%s'"</literal></expr></argument>, <argument pos:start="33:54" pos:end="33:56"><expr pos:start="33:54" pos:end="33:56"><name pos:start="33:54" pos:end="33:56">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:57"><expr pos:start="41:5" pos:end="41:56"><name pos:start="41:5" pos:end="41:13">proto_drv</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <call pos:start="41:17" pos:end="41:56"><name pos:start="41:17" pos:end="41:34">bdrv_find_protocol</name><argument_list pos:start="41:35" pos:end="41:56">(<argument pos:start="41:36" pos:end="41:43"><expr pos:start="41:36" pos:end="41:43"><name pos:start="41:36" pos:end="41:43">filename</name></expr></argument>, <argument pos:start="41:46" pos:end="41:49"><expr pos:start="41:46" pos:end="41:49"><name pos:start="41:46" pos:end="41:49">true</name></expr></argument>, <argument pos:start="41:52" pos:end="41:55"><expr pos:start="41:52" pos:end="41:55"><name pos:start="41:52" pos:end="41:55">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:19">(<expr pos:start="43:9" pos:end="43:18"><operator pos:start="43:9" pos:end="43:9">!</operator><name pos:start="43:10" pos:end="43:18">proto_drv</name></expr>)</condition> <block pos:start="43:21" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:15">

        <return pos:start="45:9" pos:end="45:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="59:5"><if pos:start="51:5" pos:end="59:5">if <condition pos:start="51:8" pos:end="51:26">(<expr pos:start="51:9" pos:end="51:25"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:25"><name pos:start="51:10" pos:end="51:12">drv</name><operator pos:start="51:13" pos:end="51:14">-&gt;</operator><name pos:start="51:15" pos:end="51:25">create_opts</name></name></expr>)</condition> <block pos:start="51:28" pos:end="59:5">{<block_content pos:start="53:9" pos:end="57:15">

        <expr_stmt pos:start="53:9" pos:end="55:37"><expr pos:start="53:9" pos:end="55:36"><call pos:start="53:9" pos:end="55:36"><name pos:start="53:9" pos:end="53:18">error_setg</name><argument_list pos:start="53:19" pos:end="55:36">(<argument pos:start="53:20" pos:end="53:23"><expr pos:start="53:20" pos:end="53:23"><name pos:start="53:20" pos:end="53:23">errp</name></expr></argument>, <argument pos:start="53:26" pos:end="53:77"><expr pos:start="53:26" pos:end="53:77"><literal type="string" pos:start="53:26" pos:end="53:77">"Format driver '%s' does not support image creation"</literal></expr></argument>,

                   <argument pos:start="55:20" pos:end="55:35"><expr pos:start="55:20" pos:end="55:35"><name pos:start="55:20" pos:end="55:35"><name pos:start="55:20" pos:end="55:22">drv</name><operator pos:start="55:23" pos:end="55:24">-&gt;</operator><name pos:start="55:25" pos:end="55:35">format_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="63:5" pos:end="71:5"><if pos:start="63:5" pos:end="71:5">if <condition pos:start="63:8" pos:end="63:32">(<expr pos:start="63:9" pos:end="63:31"><operator pos:start="63:9" pos:end="63:9">!</operator><name pos:start="63:10" pos:end="63:31"><name pos:start="63:10" pos:end="63:18">proto_drv</name><operator pos:start="63:19" pos:end="63:20">-&gt;</operator><name pos:start="63:21" pos:end="63:31">create_opts</name></name></expr>)</condition> <block pos:start="63:34" pos:end="71:5">{<block_content pos:start="65:9" pos:end="69:15">

        <expr_stmt pos:start="65:9" pos:end="67:43"><expr pos:start="65:9" pos:end="67:42"><call pos:start="65:9" pos:end="67:42"><name pos:start="65:9" pos:end="65:18">error_setg</name><argument_list pos:start="65:19" pos:end="67:42">(<argument pos:start="65:20" pos:end="65:23"><expr pos:start="65:20" pos:end="65:23"><name pos:start="65:20" pos:end="65:23">errp</name></expr></argument>, <argument pos:start="65:26" pos:end="65:79"><expr pos:start="65:26" pos:end="65:79"><literal type="string" pos:start="65:26" pos:end="65:79">"Protocol driver '%s' does not support image creation"</literal></expr></argument>,

                   <argument pos:start="67:20" pos:end="67:41"><expr pos:start="67:20" pos:end="67:41"><name pos:start="67:20" pos:end="67:41"><name pos:start="67:20" pos:end="67:28">proto_drv</name><operator pos:start="67:29" pos:end="67:30">-&gt;</operator><name pos:start="67:31" pos:end="67:41">format_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:66"><expr pos:start="75:5" pos:end="75:65"><name pos:start="75:5" pos:end="75:15">create_opts</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <call pos:start="75:19" pos:end="75:65"><name pos:start="75:19" pos:end="75:34">qemu_opts_append</name><argument_list pos:start="75:35" pos:end="75:65">(<argument pos:start="75:36" pos:end="75:46"><expr pos:start="75:36" pos:end="75:46"><name pos:start="75:36" pos:end="75:46">create_opts</name></expr></argument>, <argument pos:start="75:49" pos:end="75:64"><expr pos:start="75:49" pos:end="75:64"><name pos:start="75:49" pos:end="75:64"><name pos:start="75:49" pos:end="75:51">drv</name><operator pos:start="75:52" pos:end="75:53">-&gt;</operator><name pos:start="75:54" pos:end="75:64">create_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:72"><expr pos:start="77:5" pos:end="77:71"><name pos:start="77:5" pos:end="77:15">create_opts</name> <operator pos:start="77:17" pos:end="77:17">=</operator> <call pos:start="77:19" pos:end="77:71"><name pos:start="77:19" pos:end="77:34">qemu_opts_append</name><argument_list pos:start="77:35" pos:end="77:71">(<argument pos:start="77:36" pos:end="77:46"><expr pos:start="77:36" pos:end="77:46"><name pos:start="77:36" pos:end="77:46">create_opts</name></expr></argument>, <argument pos:start="77:49" pos:end="77:70"><expr pos:start="77:49" pos:end="77:70"><name pos:start="77:49" pos:end="77:70"><name pos:start="77:49" pos:end="77:57">proto_drv</name><operator pos:start="77:58" pos:end="77:59">-&gt;</operator><name pos:start="77:60" pos:end="77:70">create_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="81:5" pos:end="81:51">/* Create parameter list with default values */</comment>

    <expr_stmt pos:start="83:5" pos:end="83:64"><expr pos:start="83:5" pos:end="83:63"><name pos:start="83:5" pos:end="83:8">opts</name> <operator pos:start="83:10" pos:end="83:10">=</operator> <call pos:start="83:12" pos:end="83:63"><name pos:start="83:12" pos:end="83:27">qemu_opts_create</name><argument_list pos:start="83:28" pos:end="83:63">(<argument pos:start="83:29" pos:end="83:39"><expr pos:start="83:29" pos:end="83:39"><name pos:start="83:29" pos:end="83:39">create_opts</name></expr></argument>, <argument pos:start="83:42" pos:end="83:45"><expr pos:start="83:42" pos:end="83:45"><name pos:start="83:42" pos:end="83:45">NULL</name></expr></argument>, <argument pos:start="83:48" pos:end="83:48"><expr pos:start="83:48" pos:end="83:48"><literal type="number" pos:start="83:48" pos:end="83:48">0</literal></expr></argument>, <argument pos:start="83:51" pos:end="83:62"><expr pos:start="83:51" pos:end="83:62"><operator pos:start="83:51" pos:end="83:51">&amp;</operator><name pos:start="83:52" pos:end="83:62">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:70"><expr pos:start="85:5" pos:end="85:69"><call pos:start="85:5" pos:end="85:69"><name pos:start="85:5" pos:end="85:23">qemu_opt_set_number</name><argument_list pos:start="85:24" pos:end="85:69">(<argument pos:start="85:25" pos:end="85:28"><expr pos:start="85:25" pos:end="85:28"><name pos:start="85:25" pos:end="85:28">opts</name></expr></argument>, <argument pos:start="85:31" pos:end="85:44"><expr pos:start="85:31" pos:end="85:44"><name pos:start="85:31" pos:end="85:44">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="85:47" pos:end="85:54"><expr pos:start="85:47" pos:end="85:54"><name pos:start="85:47" pos:end="85:54">img_size</name></expr></argument>, <argument pos:start="85:57" pos:end="85:68"><expr pos:start="85:57" pos:end="85:68"><operator pos:start="85:57" pos:end="85:57">&amp;</operator><name pos:start="85:58" pos:end="85:68">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="89:5" pos:end="89:26">/* Parse -o options */</comment>

    <if_stmt pos:start="91:5" pos:end="107:5"><if pos:start="91:5" pos:end="107:5">if <condition pos:start="91:8" pos:end="91:16">(<expr pos:start="91:9" pos:end="91:15"><name pos:start="91:9" pos:end="91:15">options</name></expr>)</condition> <block pos:start="91:18" pos:end="107:5">{<block_content pos:start="93:9" pos:end="105:9">

        <expr_stmt pos:start="93:9" pos:end="93:60"><expr pos:start="93:9" pos:end="93:59"><call pos:start="93:9" pos:end="93:59"><name pos:start="93:9" pos:end="93:26">qemu_opts_do_parse</name><argument_list pos:start="93:27" pos:end="93:59">(<argument pos:start="93:28" pos:end="93:31"><expr pos:start="93:28" pos:end="93:31"><name pos:start="93:28" pos:end="93:31">opts</name></expr></argument>, <argument pos:start="93:34" pos:end="93:40"><expr pos:start="93:34" pos:end="93:40"><name pos:start="93:34" pos:end="93:40">options</name></expr></argument>, <argument pos:start="93:43" pos:end="93:46"><expr pos:start="93:43" pos:end="93:46"><name pos:start="93:43" pos:end="93:46">NULL</name></expr></argument>, <argument pos:start="93:49" pos:end="93:58"><expr pos:start="93:49" pos:end="93:58"><operator pos:start="93:49" pos:end="93:49">&amp;</operator><name pos:start="93:50" pos:end="93:58">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="95:9" pos:end="105:9"><if pos:start="95:9" pos:end="105:9">if <condition pos:start="95:12" pos:end="95:22">(<expr pos:start="95:13" pos:end="95:21"><name pos:start="95:13" pos:end="95:21">local_err</name></expr>)</condition> <block pos:start="95:24" pos:end="105:9">{<block_content pos:start="97:13" pos:end="103:21">

            <expr_stmt pos:start="97:13" pos:end="97:40"><expr pos:start="97:13" pos:end="97:39"><call pos:start="97:13" pos:end="97:39"><name pos:start="97:13" pos:end="97:28">error_report_err</name><argument_list pos:start="97:29" pos:end="97:39">(<argument pos:start="97:30" pos:end="97:38"><expr pos:start="97:30" pos:end="97:38"><name pos:start="97:30" pos:end="97:38">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:29"><expr pos:start="99:13" pos:end="99:28"><name pos:start="99:13" pos:end="99:21">local_err</name> <operator pos:start="99:23" pos:end="99:23">=</operator> <name pos:start="99:25" pos:end="99:28">NULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:74"><expr pos:start="101:13" pos:end="101:73"><call pos:start="101:13" pos:end="101:73"><name pos:start="101:13" pos:end="101:22">error_setg</name><argument_list pos:start="101:23" pos:end="101:73">(<argument pos:start="101:24" pos:end="101:27"><expr pos:start="101:24" pos:end="101:27"><name pos:start="101:24" pos:end="101:27">errp</name></expr></argument>, <argument pos:start="101:30" pos:end="101:67"><expr pos:start="101:30" pos:end="101:67"><literal type="string" pos:start="101:30" pos:end="101:67">"Invalid options for file format '%s'"</literal></expr></argument>, <argument pos:start="101:70" pos:end="101:72"><expr pos:start="101:70" pos:end="101:72"><name pos:start="101:70" pos:end="101:72">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="103:13" pos:end="103:21">goto <name pos:start="103:18" pos:end="103:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="111:5" pos:end="125:5"><if pos:start="111:5" pos:end="125:5">if <condition pos:start="111:8" pos:end="111:22">(<expr pos:start="111:9" pos:end="111:21"><name pos:start="111:9" pos:end="111:21">base_filename</name></expr>)</condition> <block pos:start="111:24" pos:end="125:5">{<block_content pos:start="113:9" pos:end="123:9">

        <expr_stmt pos:start="113:9" pos:end="113:78"><expr pos:start="113:9" pos:end="113:77"><call pos:start="113:9" pos:end="113:77"><name pos:start="113:9" pos:end="113:20">qemu_opt_set</name><argument_list pos:start="113:21" pos:end="113:77">(<argument pos:start="113:22" pos:end="113:25"><expr pos:start="113:22" pos:end="113:25"><name pos:start="113:22" pos:end="113:25">opts</name></expr></argument>, <argument pos:start="113:28" pos:end="113:49"><expr pos:start="113:28" pos:end="113:49"><name pos:start="113:28" pos:end="113:49">BLOCK_OPT_BACKING_FILE</name></expr></argument>, <argument pos:start="113:52" pos:end="113:64"><expr pos:start="113:52" pos:end="113:64"><name pos:start="113:52" pos:end="113:64">base_filename</name></expr></argument>, <argument pos:start="113:67" pos:end="113:76"><expr pos:start="113:67" pos:end="113:76"><operator pos:start="113:67" pos:end="113:67">&amp;</operator><name pos:start="113:68" pos:end="113:76">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="123:9"><if pos:start="115:9" pos:end="123:9">if <condition pos:start="115:12" pos:end="115:22">(<expr pos:start="115:13" pos:end="115:21"><name pos:start="115:13" pos:end="115:21">local_err</name></expr>)</condition> <block pos:start="115:24" pos:end="123:9">{<block_content pos:start="117:13" pos:end="121:21">

            <expr_stmt pos:start="117:13" pos:end="119:28"><expr pos:start="117:13" pos:end="119:27"><call pos:start="117:13" pos:end="119:27"><name pos:start="117:13" pos:end="117:22">error_setg</name><argument_list pos:start="117:23" pos:end="119:27">(<argument pos:start="117:24" pos:end="117:27"><expr pos:start="117:24" pos:end="117:27"><name pos:start="117:24" pos:end="117:27">errp</name></expr></argument>, <argument pos:start="117:30" pos:end="117:78"><expr pos:start="117:30" pos:end="117:78"><literal type="string" pos:start="117:30" pos:end="117:78">"Backing file not supported for file format '%s'"</literal></expr></argument>,

                       <argument pos:start="119:24" pos:end="119:26"><expr pos:start="119:24" pos:end="119:26"><name pos:start="119:24" pos:end="119:26">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="121:13" pos:end="121:21">goto <name pos:start="121:18" pos:end="121:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="129:5" pos:end="143:5"><if pos:start="129:5" pos:end="143:5">if <condition pos:start="129:8" pos:end="129:17">(<expr pos:start="129:9" pos:end="129:16"><name pos:start="129:9" pos:end="129:16">base_fmt</name></expr>)</condition> <block pos:start="129:19" pos:end="143:5">{<block_content pos:start="131:9" pos:end="141:9">

        <expr_stmt pos:start="131:9" pos:end="131:72"><expr pos:start="131:9" pos:end="131:71"><call pos:start="131:9" pos:end="131:71"><name pos:start="131:9" pos:end="131:20">qemu_opt_set</name><argument_list pos:start="131:21" pos:end="131:71">(<argument pos:start="131:22" pos:end="131:25"><expr pos:start="131:22" pos:end="131:25"><name pos:start="131:22" pos:end="131:25">opts</name></expr></argument>, <argument pos:start="131:28" pos:end="131:48"><expr pos:start="131:28" pos:end="131:48"><name pos:start="131:28" pos:end="131:48">BLOCK_OPT_BACKING_FMT</name></expr></argument>, <argument pos:start="131:51" pos:end="131:58"><expr pos:start="131:51" pos:end="131:58"><name pos:start="131:51" pos:end="131:58">base_fmt</name></expr></argument>, <argument pos:start="131:61" pos:end="131:70"><expr pos:start="131:61" pos:end="131:70"><operator pos:start="131:61" pos:end="131:61">&amp;</operator><name pos:start="131:62" pos:end="131:70">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="133:9" pos:end="141:9"><if pos:start="133:9" pos:end="141:9">if <condition pos:start="133:12" pos:end="133:22">(<expr pos:start="133:13" pos:end="133:21"><name pos:start="133:13" pos:end="133:21">local_err</name></expr>)</condition> <block pos:start="133:24" pos:end="141:9">{<block_content pos:start="135:13" pos:end="139:21">

            <expr_stmt pos:start="135:13" pos:end="137:49"><expr pos:start="135:13" pos:end="137:48"><call pos:start="135:13" pos:end="137:48"><name pos:start="135:13" pos:end="135:22">error_setg</name><argument_list pos:start="135:23" pos:end="137:48">(<argument pos:start="135:24" pos:end="135:27"><expr pos:start="135:24" pos:end="135:27"><name pos:start="135:24" pos:end="135:27">errp</name></expr></argument>, <argument pos:start="135:30" pos:end="137:42"><expr pos:start="135:30" pos:end="137:42"><literal type="string" pos:start="135:30" pos:end="135:74">"Backing file format not supported for file "</literal>

                             <literal type="string" pos:start="137:30" pos:end="137:42">"format '%s'"</literal></expr></argument>, <argument pos:start="137:45" pos:end="137:47"><expr pos:start="137:45" pos:end="137:47"><name pos:start="137:45" pos:end="137:47">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="139:13" pos:end="139:21">goto <name pos:start="139:18" pos:end="139:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:62"><expr pos:start="147:5" pos:end="147:61"><name pos:start="147:5" pos:end="147:16">backing_file</name> <operator pos:start="147:18" pos:end="147:18">=</operator> <call pos:start="147:20" pos:end="147:61"><name pos:start="147:20" pos:end="147:31">qemu_opt_get</name><argument_list pos:start="147:32" pos:end="147:61">(<argument pos:start="147:33" pos:end="147:36"><expr pos:start="147:33" pos:end="147:36"><name pos:start="147:33" pos:end="147:36">opts</name></expr></argument>, <argument pos:start="147:39" pos:end="147:60"><expr pos:start="147:39" pos:end="147:60"><name pos:start="147:39" pos:end="147:60">BLOCK_OPT_BACKING_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="149:5" pos:end="161:5"><if pos:start="149:5" pos:end="161:5">if <condition pos:start="149:8" pos:end="149:21">(<expr pos:start="149:9" pos:end="149:20"><name pos:start="149:9" pos:end="149:20">backing_file</name></expr>)</condition> <block pos:start="149:23" pos:end="161:5">{<block_content pos:start="151:9" pos:end="159:9">

        <if_stmt pos:start="151:9" pos:end="159:9"><if pos:start="151:9" pos:end="159:9">if <condition pos:start="151:12" pos:end="151:44">(<expr pos:start="151:13" pos:end="151:43"><operator pos:start="151:13" pos:end="151:13">!</operator><call pos:start="151:14" pos:end="151:43"><name pos:start="151:14" pos:end="151:19">strcmp</name><argument_list pos:start="151:20" pos:end="151:43">(<argument pos:start="151:21" pos:end="151:28"><expr pos:start="151:21" pos:end="151:28"><name pos:start="151:21" pos:end="151:28">filename</name></expr></argument>, <argument pos:start="151:31" pos:end="151:42"><expr pos:start="151:31" pos:end="151:42"><name pos:start="151:31" pos:end="151:42">backing_file</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="151:46" pos:end="159:9">{<block_content pos:start="153:13" pos:end="157:21">

            <expr_stmt pos:start="153:13" pos:end="155:66"><expr pos:start="153:13" pos:end="155:65"><call pos:start="153:13" pos:end="155:65"><name pos:start="153:13" pos:end="153:22">error_setg</name><argument_list pos:start="153:23" pos:end="155:65">(<argument pos:start="153:24" pos:end="153:27"><expr pos:start="153:24" pos:end="153:27"><name pos:start="153:24" pos:end="153:27">errp</name></expr></argument>, <argument pos:start="153:30" pos:end="155:64"><expr pos:start="153:30" pos:end="155:64"><literal type="string" pos:start="153:30" pos:end="153:73">"Error: Trying to create an image with the "</literal>

                             <literal type="string" pos:start="155:30" pos:end="155:64">"same filename as the backing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="157:13" pos:end="157:21">goto <name pos:start="157:18" pos:end="157:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="165:5" pos:end="165:60"><expr pos:start="165:5" pos:end="165:59"><name pos:start="165:5" pos:end="165:15">backing_fmt</name> <operator pos:start="165:17" pos:end="165:17">=</operator> <call pos:start="165:19" pos:end="165:59"><name pos:start="165:19" pos:end="165:30">qemu_opt_get</name><argument_list pos:start="165:31" pos:end="165:59">(<argument pos:start="165:32" pos:end="165:35"><expr pos:start="165:32" pos:end="165:35"><name pos:start="165:32" pos:end="165:35">opts</name></expr></argument>, <argument pos:start="165:38" pos:end="165:58"><expr pos:start="165:38" pos:end="165:58"><name pos:start="165:38" pos:end="165:58">BLOCK_OPT_BACKING_FMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="169:5" pos:end="171:62">/* The size for the image must always be specified, unless we have a backing

     * file and we have not been forbidden from opening it. */</comment>

    <expr_stmt pos:start="173:5" pos:end="173:54"><expr pos:start="173:5" pos:end="173:53"><name pos:start="173:5" pos:end="173:8">size</name> <operator pos:start="173:10" pos:end="173:10">=</operator> <call pos:start="173:12" pos:end="173:53"><name pos:start="173:12" pos:end="173:28">qemu_opt_get_size</name><argument_list pos:start="173:29" pos:end="173:53">(<argument pos:start="173:30" pos:end="173:33"><expr pos:start="173:30" pos:end="173:33"><name pos:start="173:30" pos:end="173:33">opts</name></expr></argument>, <argument pos:start="173:36" pos:end="173:49"><expr pos:start="173:36" pos:end="173:49"><name pos:start="173:36" pos:end="173:49">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="173:52" pos:end="173:52"><expr pos:start="173:52" pos:end="173:52"><literal type="number" pos:start="173:52" pos:end="173:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="175:5" pos:end="277:5"><if pos:start="175:5" pos:end="277:5">if <condition pos:start="175:8" pos:end="175:53">(<expr pos:start="175:9" pos:end="175:52"><name pos:start="175:9" pos:end="175:20">backing_file</name> <operator pos:start="175:22" pos:end="175:23">&amp;&amp;</operator> <operator pos:start="175:25" pos:end="175:25">!</operator><operator pos:start="175:26" pos:end="175:26">(</operator><name pos:start="175:27" pos:end="175:31">flags</name> <operator pos:start="175:33" pos:end="175:33">&amp;</operator> <name pos:start="175:35" pos:end="175:51">BDRV_O_NO_BACKING</name><operator pos:start="175:52" pos:end="175:52">)</operator></expr>)</condition> <block pos:start="175:55" pos:end="277:5">{<block_content pos:start="177:9" pos:end="275:9">

        <decl_stmt pos:start="177:9" pos:end="177:29"><decl pos:start="177:9" pos:end="177:28"><type pos:start="177:9" pos:end="177:26"><name pos:start="177:9" pos:end="177:24">BlockDriverState</name> <modifier pos:start="177:26" pos:end="177:26">*</modifier></type><name pos:start="177:27" pos:end="177:28">bs</name></decl>;</decl_stmt>

        <decl_stmt pos:start="179:9" pos:end="179:52"><decl pos:start="179:9" pos:end="179:51"><type pos:start="179:9" pos:end="179:14"><name pos:start="179:9" pos:end="179:12">char</name> <modifier pos:start="179:14" pos:end="179:14">*</modifier></type><name pos:start="179:15" pos:end="179:26">full_backing</name> <init pos:start="179:28" pos:end="179:51">= <expr pos:start="179:30" pos:end="179:51"><call pos:start="179:30" pos:end="179:51"><name pos:start="179:30" pos:end="179:35">g_new0</name><argument_list pos:start="179:36" pos:end="179:51">(<argument pos:start="179:37" pos:end="179:40"><expr pos:start="179:37" pos:end="179:40"><name pos:start="179:37" pos:end="179:40">char</name></expr></argument>, <argument pos:start="179:43" pos:end="179:50"><expr pos:start="179:43" pos:end="179:50"><name pos:start="179:43" pos:end="179:50">PATH_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="181:9" pos:end="181:23"><decl pos:start="181:9" pos:end="181:22"><type pos:start="181:9" pos:end="181:11"><name pos:start="181:9" pos:end="181:11">int</name></type> <name pos:start="181:13" pos:end="181:22">back_flags</name></decl>;</decl_stmt>

        <decl_stmt pos:start="183:9" pos:end="183:38"><decl pos:start="183:9" pos:end="183:37"><type pos:start="183:9" pos:end="183:15"><name pos:start="183:9" pos:end="183:13">QDict</name> <modifier pos:start="183:15" pos:end="183:15">*</modifier></type><name pos:start="183:16" pos:end="183:30">backing_options</name> <init pos:start="183:32" pos:end="183:37">= <expr pos:start="183:34" pos:end="183:37"><name pos:start="183:34" pos:end="183:37">NULL</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="187:9" pos:end="191:65"><expr pos:start="187:9" pos:end="191:64"><call pos:start="187:9" pos:end="191:64"><name pos:start="187:9" pos:end="187:52">bdrv_get_full_backing_filename_from_filename</name><argument_list pos:start="187:53" pos:end="191:64">(<argument pos:start="187:54" pos:end="187:61"><expr pos:start="187:54" pos:end="187:61"><name pos:start="187:54" pos:end="187:61">filename</name></expr></argument>, <argument pos:start="187:64" pos:end="187:75"><expr pos:start="187:64" pos:end="187:75"><name pos:start="187:64" pos:end="187:75">backing_file</name></expr></argument>,

                                                     <argument pos:start="189:54" pos:end="189:65"><expr pos:start="189:54" pos:end="189:65"><name pos:start="189:54" pos:end="189:65">full_backing</name></expr></argument>, <argument pos:start="189:68" pos:end="189:75"><expr pos:start="189:68" pos:end="189:75"><name pos:start="189:68" pos:end="189:75">PATH_MAX</name></expr></argument>,

                                                     <argument pos:start="191:54" pos:end="191:63"><expr pos:start="191:54" pos:end="191:63"><operator pos:start="191:54" pos:end="191:54">&amp;</operator><name pos:start="191:55" pos:end="191:63">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="193:9" pos:end="199:9"><if pos:start="193:9" pos:end="199:9">if <condition pos:start="193:12" pos:end="193:22">(<expr pos:start="193:13" pos:end="193:21"><name pos:start="193:13" pos:end="193:21">local_err</name></expr>)</condition> <block pos:start="193:24" pos:end="199:9">{<block_content pos:start="195:13" pos:end="197:21">

            <expr_stmt pos:start="195:13" pos:end="195:33"><expr pos:start="195:13" pos:end="195:32"><call pos:start="195:13" pos:end="195:32"><name pos:start="195:13" pos:end="195:18">g_free</name><argument_list pos:start="195:19" pos:end="195:32">(<argument pos:start="195:20" pos:end="195:31"><expr pos:start="195:20" pos:end="195:31"><name pos:start="195:20" pos:end="195:31">full_backing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="197:13" pos:end="197:21">goto <name pos:start="197:18" pos:end="197:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="203:9" pos:end="203:51">/* backing files always opened read-only */</comment>

        <expr_stmt pos:start="205:9" pos:end="205:27"><expr pos:start="205:9" pos:end="205:26"><name pos:start="205:9" pos:end="205:18">back_flags</name> <operator pos:start="205:20" pos:end="205:20">=</operator> <name pos:start="205:22" pos:end="205:26">flags</name></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:75"><expr pos:start="207:9" pos:end="207:74"><name pos:start="207:9" pos:end="207:18">back_flags</name> <operator pos:start="207:20" pos:end="207:21">&amp;=</operator> <operator pos:start="207:23" pos:end="207:23">~</operator><operator pos:start="207:24" pos:end="207:24">(</operator><name pos:start="207:25" pos:end="207:35">BDRV_O_RDWR</name> <operator pos:start="207:37" pos:end="207:37">|</operator> <name pos:start="207:39" pos:end="207:53">BDRV_O_SNAPSHOT</name> <operator pos:start="207:55" pos:end="207:55">|</operator> <name pos:start="207:57" pos:end="207:73">BDRV_O_NO_BACKING</name><operator pos:start="207:74" pos:end="207:74">)</operator></expr>;</expr_stmt>



        <if_stmt pos:start="211:9" pos:end="217:9"><if pos:start="211:9" pos:end="217:9">if <condition pos:start="211:12" pos:end="211:24">(<expr pos:start="211:13" pos:end="211:23"><name pos:start="211:13" pos:end="211:23">backing_fmt</name></expr>)</condition> <block pos:start="211:26" pos:end="217:9">{<block_content pos:start="213:13" pos:end="215:66">

            <expr_stmt pos:start="213:13" pos:end="213:42"><expr pos:start="213:13" pos:end="213:41"><name pos:start="213:13" pos:end="213:27">backing_options</name> <operator pos:start="213:29" pos:end="213:29">=</operator> <call pos:start="213:31" pos:end="213:41"><name pos:start="213:31" pos:end="213:39">qdict_new</name><argument_list pos:start="213:40" pos:end="213:41">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:66"><expr pos:start="215:13" pos:end="215:65"><call pos:start="215:13" pos:end="215:65"><name pos:start="215:13" pos:end="215:25">qdict_put_str</name><argument_list pos:start="215:26" pos:end="215:65">(<argument pos:start="215:27" pos:end="215:41"><expr pos:start="215:27" pos:end="215:41"><name pos:start="215:27" pos:end="215:41">backing_options</name></expr></argument>, <argument pos:start="215:44" pos:end="215:51"><expr pos:start="215:44" pos:end="215:51"><literal type="string" pos:start="215:44" pos:end="215:51">"driver"</literal></expr></argument>, <argument pos:start="215:54" pos:end="215:64"><expr pos:start="215:54" pos:end="215:64"><name pos:start="215:54" pos:end="215:64">backing_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="221:9" pos:end="223:35"><expr pos:start="221:9" pos:end="223:34"><name pos:start="221:9" pos:end="221:10">bs</name> <operator pos:start="221:12" pos:end="221:12">=</operator> <call pos:start="221:14" pos:end="223:34"><name pos:start="221:14" pos:end="221:22">bdrv_open</name><argument_list pos:start="221:23" pos:end="223:34">(<argument pos:start="221:24" pos:end="221:35"><expr pos:start="221:24" pos:end="221:35"><name pos:start="221:24" pos:end="221:35">full_backing</name></expr></argument>, <argument pos:start="221:38" pos:end="221:41"><expr pos:start="221:38" pos:end="221:41"><name pos:start="221:38" pos:end="221:41">NULL</name></expr></argument>, <argument pos:start="221:44" pos:end="221:58"><expr pos:start="221:44" pos:end="221:58"><name pos:start="221:44" pos:end="221:58">backing_options</name></expr></argument>, <argument pos:start="221:61" pos:end="221:70"><expr pos:start="221:61" pos:end="221:70"><name pos:start="221:61" pos:end="221:70">back_flags</name></expr></argument>,

                       <argument pos:start="223:24" pos:end="223:33"><expr pos:start="223:24" pos:end="223:33"><operator pos:start="223:24" pos:end="223:24">&amp;</operator><name pos:start="223:25" pos:end="223:33">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="225:9" pos:end="225:29"><expr pos:start="225:9" pos:end="225:28"><call pos:start="225:9" pos:end="225:28"><name pos:start="225:9" pos:end="225:14">g_free</name><argument_list pos:start="225:15" pos:end="225:28">(<argument pos:start="225:16" pos:end="225:27"><expr pos:start="225:16" pos:end="225:27"><name pos:start="225:16" pos:end="225:27">full_backing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="227:9" pos:end="275:9"><if pos:start="227:9" pos:end="239:9">if <condition pos:start="227:12" pos:end="227:30">(<expr pos:start="227:13" pos:end="227:29"><operator pos:start="227:13" pos:end="227:13">!</operator><name pos:start="227:14" pos:end="227:15">bs</name> <operator pos:start="227:17" pos:end="227:18">&amp;&amp;</operator> <name pos:start="227:20" pos:end="227:23">size</name> <operator pos:start="227:25" pos:end="227:26">!=</operator> <operator pos:start="227:28" pos:end="227:28">-</operator><literal type="number" pos:start="227:29" pos:end="227:29">1</literal></expr>)</condition> <block pos:start="227:32" pos:end="239:9">{<block_content pos:start="231:13" pos:end="237:29">

            <comment type="block" pos:start="229:13" pos:end="229:72">/* Couldn't open BS, but we have a size, so it's nonfatal */</comment>

            <expr_stmt pos:start="231:13" pos:end="235:78"><expr pos:start="231:13" pos:end="235:77"><call pos:start="231:13" pos:end="235:77"><name pos:start="231:13" pos:end="231:28">warn_reportf_err</name><argument_list pos:start="231:29" pos:end="235:77">(<argument pos:start="231:30" pos:end="231:38"><expr pos:start="231:30" pos:end="231:38"><name pos:start="231:30" pos:end="231:38">local_err</name></expr></argument>,

                            <argument pos:start="233:29" pos:end="235:76"><expr pos:start="233:29" pos:end="235:76"><literal type="string" pos:start="233:29" pos:end="233:62">"Could not verify backing image. "</literal>

                            <literal type="string" pos:start="235:29" pos:end="235:76">"This may become an error in future versions.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:29"><expr pos:start="237:13" pos:end="237:28"><name pos:start="237:13" pos:end="237:21">local_err</name> <operator pos:start="237:23" pos:end="237:23">=</operator> <name pos:start="237:25" pos:end="237:28">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="239:11" pos:end="249:9">else if <condition pos:start="239:19" pos:end="239:23">(<expr pos:start="239:20" pos:end="239:22"><operator pos:start="239:20" pos:end="239:20">!</operator><name pos:start="239:21" pos:end="239:22">bs</name></expr>)</condition> <block pos:start="239:25" pos:end="249:9">{<block_content pos:start="243:13" pos:end="247:21">

            <comment type="block" pos:start="241:13" pos:end="241:52">/* Couldn't open bs, do not have size */</comment>

            <expr_stmt pos:start="243:13" pos:end="245:83"><expr pos:start="243:13" pos:end="245:82"><call pos:start="243:13" pos:end="245:82"><name pos:start="243:13" pos:end="243:29">error_append_hint</name><argument_list pos:start="243:30" pos:end="245:82">(<argument pos:start="243:31" pos:end="243:40"><expr pos:start="243:31" pos:end="243:40"><operator pos:start="243:31" pos:end="243:31">&amp;</operator><name pos:start="243:32" pos:end="243:40">local_err</name></expr></argument>,

                              <argument pos:start="245:31" pos:end="245:81"><expr pos:start="245:31" pos:end="245:81"><literal type="string" pos:start="245:31" pos:end="245:81">"Could not open backing image to determine size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="247:13" pos:end="247:21">goto <name pos:start="247:18" pos:end="247:20">out</name>;</goto>

        </block_content>}</block></if> <else pos:start="249:11" pos:end="275:9">else <block pos:start="249:16" pos:end="275:9">{<block_content pos:start="251:13" pos:end="273:27">

            <if_stmt pos:start="251:13" pos:end="271:13"><if pos:start="251:13" pos:end="271:13">if <condition pos:start="251:16" pos:end="251:27">(<expr pos:start="251:17" pos:end="251:26"><name pos:start="251:17" pos:end="251:20">size</name> <operator pos:start="251:22" pos:end="251:23">==</operator> <operator pos:start="251:25" pos:end="251:25">-</operator><literal type="number" pos:start="251:26" pos:end="251:26">1</literal></expr>)</condition> <block pos:start="251:29" pos:end="271:13">{<block_content pos:start="255:17" pos:end="269:78">

                <comment type="block" pos:start="253:17" pos:end="253:45">/* Opened BS, have no size */</comment>

                <expr_stmt pos:start="255:17" pos:end="255:42"><expr pos:start="255:17" pos:end="255:41"><name pos:start="255:17" pos:end="255:20">size</name> <operator pos:start="255:22" pos:end="255:22">=</operator> <call pos:start="255:24" pos:end="255:41"><name pos:start="255:24" pos:end="255:37">bdrv_getlength</name><argument_list pos:start="255:38" pos:end="255:41">(<argument pos:start="255:39" pos:end="255:40"><expr pos:start="255:39" pos:end="255:40"><name pos:start="255:39" pos:end="255:40">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="257:17" pos:end="267:17"><if pos:start="257:17" pos:end="267:17">if <condition pos:start="257:20" pos:end="257:29">(<expr pos:start="257:21" pos:end="257:28"><name pos:start="257:21" pos:end="257:24">size</name> <operator pos:start="257:26" pos:end="257:26">&lt;</operator> <literal type="number" pos:start="257:28" pos:end="257:28">0</literal></expr>)</condition> <block pos:start="257:31" pos:end="267:17">{<block_content pos:start="259:21" pos:end="265:29">

                    <expr_stmt pos:start="259:21" pos:end="261:51"><expr pos:start="259:21" pos:end="261:50"><call pos:start="259:21" pos:end="261:50"><name pos:start="259:21" pos:end="259:36">error_setg_errno</name><argument_list pos:start="259:37" pos:end="261:50">(<argument pos:start="259:38" pos:end="259:41"><expr pos:start="259:38" pos:end="259:41"><name pos:start="259:38" pos:end="259:41">errp</name></expr></argument>, <argument pos:start="259:44" pos:end="259:48"><expr pos:start="259:44" pos:end="259:48"><operator pos:start="259:44" pos:end="259:44">-</operator><name pos:start="259:45" pos:end="259:48">size</name></expr></argument>, <argument pos:start="259:51" pos:end="259:78"><expr pos:start="259:51" pos:end="259:78"><literal type="string" pos:start="259:51" pos:end="259:78">"Could not get size of '%s'"</literal></expr></argument>,

                                     <argument pos:start="261:38" pos:end="261:49"><expr pos:start="261:38" pos:end="261:49"><name pos:start="261:38" pos:end="261:49">backing_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="263:21" pos:end="263:35"><expr pos:start="263:21" pos:end="263:34"><call pos:start="263:21" pos:end="263:34"><name pos:start="263:21" pos:end="263:30">bdrv_unref</name><argument_list pos:start="263:31" pos:end="263:34">(<argument pos:start="263:32" pos:end="263:33"><expr pos:start="263:32" pos:end="263:33"><name pos:start="263:32" pos:end="263:33">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="265:21" pos:end="265:29">goto <name pos:start="265:26" pos:end="265:28">out</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="269:17" pos:end="269:78"><expr pos:start="269:17" pos:end="269:77"><call pos:start="269:17" pos:end="269:77"><name pos:start="269:17" pos:end="269:35">qemu_opt_set_number</name><argument_list pos:start="269:36" pos:end="269:77">(<argument pos:start="269:37" pos:end="269:40"><expr pos:start="269:37" pos:end="269:40"><name pos:start="269:37" pos:end="269:40">opts</name></expr></argument>, <argument pos:start="269:43" pos:end="269:56"><expr pos:start="269:43" pos:end="269:56"><name pos:start="269:43" pos:end="269:56">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="269:59" pos:end="269:62"><expr pos:start="269:59" pos:end="269:62"><name pos:start="269:59" pos:end="269:62">size</name></expr></argument>, <argument pos:start="269:65" pos:end="269:76"><expr pos:start="269:65" pos:end="269:76"><operator pos:start="269:65" pos:end="269:65">&amp;</operator><name pos:start="269:66" pos:end="269:76">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:27"><expr pos:start="273:13" pos:end="273:26"><call pos:start="273:13" pos:end="273:26"><name pos:start="273:13" pos:end="273:22">bdrv_unref</name><argument_list pos:start="273:23" pos:end="273:26">(<argument pos:start="273:24" pos:end="273:25"><expr pos:start="273:24" pos:end="273:25"><name pos:start="273:24" pos:end="273:25">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt> <comment type="block" pos:start="277:7" pos:end="277:58">/* (backing_file &amp;&amp; !(flags &amp; BDRV_O_NO_BACKING)) */</comment>



    <if_stmt pos:start="281:5" pos:end="287:5"><if pos:start="281:5" pos:end="287:5">if <condition pos:start="281:8" pos:end="281:19">(<expr pos:start="281:9" pos:end="281:18"><name pos:start="281:9" pos:end="281:12">size</name> <operator pos:start="281:14" pos:end="281:15">==</operator> <operator pos:start="281:17" pos:end="281:17">-</operator><literal type="number" pos:start="281:18" pos:end="281:18">1</literal></expr>)</condition> <block pos:start="281:21" pos:end="287:5">{<block_content pos:start="283:9" pos:end="285:17">

        <expr_stmt pos:start="283:9" pos:end="283:66"><expr pos:start="283:9" pos:end="283:65"><call pos:start="283:9" pos:end="283:65"><name pos:start="283:9" pos:end="283:18">error_setg</name><argument_list pos:start="283:19" pos:end="283:65">(<argument pos:start="283:20" pos:end="283:23"><expr pos:start="283:20" pos:end="283:23"><name pos:start="283:20" pos:end="283:23">errp</name></expr></argument>, <argument pos:start="283:26" pos:end="283:64"><expr pos:start="283:26" pos:end="283:64"><literal type="string" pos:start="283:26" pos:end="283:64">"Image creation needs a size parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="285:9" pos:end="285:17">goto <name pos:start="285:14" pos:end="285:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="291:5" pos:end="299:5"><if pos:start="291:5" pos:end="299:5">if <condition pos:start="291:8" pos:end="291:15">(<expr pos:start="291:9" pos:end="291:14"><operator pos:start="291:9" pos:end="291:9">!</operator><name pos:start="291:10" pos:end="291:14">quiet</name></expr>)</condition> <block pos:start="291:17" pos:end="299:5">{<block_content pos:start="293:9" pos:end="297:17">

        <expr_stmt pos:start="293:9" pos:end="293:58"><expr pos:start="293:9" pos:end="293:57"><call pos:start="293:9" pos:end="293:57"><name pos:start="293:9" pos:end="293:14">printf</name><argument_list pos:start="293:15" pos:end="293:57">(<argument pos:start="293:16" pos:end="293:41"><expr pos:start="293:16" pos:end="293:41"><literal type="string" pos:start="293:16" pos:end="293:41">"Formatting '%s', fmt=%s "</literal></expr></argument>, <argument pos:start="293:44" pos:end="293:51"><expr pos:start="293:44" pos:end="293:51"><name pos:start="293:44" pos:end="293:51">filename</name></expr></argument>, <argument pos:start="293:54" pos:end="293:56"><expr pos:start="293:54" pos:end="293:56"><name pos:start="293:54" pos:end="293:56">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="295:9" pos:end="295:35"><expr pos:start="295:9" pos:end="295:34"><call pos:start="295:9" pos:end="295:34"><name pos:start="295:9" pos:end="295:23">qemu_opts_print</name><argument_list pos:start="295:24" pos:end="295:34">(<argument pos:start="295:25" pos:end="295:28"><expr pos:start="295:25" pos:end="295:28"><name pos:start="295:25" pos:end="295:28">opts</name></expr></argument>, <argument pos:start="295:31" pos:end="295:33"><expr pos:start="295:31" pos:end="295:33"><literal type="string" pos:start="295:31" pos:end="295:33">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="297:9" pos:end="297:17"><expr pos:start="297:9" pos:end="297:16"><call pos:start="297:9" pos:end="297:16"><name pos:start="297:9" pos:end="297:12">puts</name><argument_list pos:start="297:13" pos:end="297:16">(<argument pos:start="297:14" pos:end="297:15"><expr pos:start="297:14" pos:end="297:15"><literal type="string" pos:start="297:14" pos:end="297:15">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="303:5" pos:end="303:55"><expr pos:start="303:5" pos:end="303:54"><name pos:start="303:5" pos:end="303:7">ret</name> <operator pos:start="303:9" pos:end="303:9">=</operator> <call pos:start="303:11" pos:end="303:54"><name pos:start="303:11" pos:end="303:21">bdrv_create</name><argument_list pos:start="303:22" pos:end="303:54">(<argument pos:start="303:23" pos:end="303:25"><expr pos:start="303:23" pos:end="303:25"><name pos:start="303:23" pos:end="303:25">drv</name></expr></argument>, <argument pos:start="303:28" pos:end="303:35"><expr pos:start="303:28" pos:end="303:35"><name pos:start="303:28" pos:end="303:35">filename</name></expr></argument>, <argument pos:start="303:38" pos:end="303:41"><expr pos:start="303:38" pos:end="303:41"><name pos:start="303:38" pos:end="303:41">opts</name></expr></argument>, <argument pos:start="303:44" pos:end="303:53"><expr pos:start="303:44" pos:end="303:53"><operator pos:start="303:44" pos:end="303:44">&amp;</operator><name pos:start="303:45" pos:end="303:53">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="307:5" pos:end="331:5"><if pos:start="307:5" pos:end="331:5">if <condition pos:start="307:8" pos:end="307:22">(<expr pos:start="307:9" pos:end="307:21"><name pos:start="307:9" pos:end="307:11">ret</name> <operator pos:start="307:13" pos:end="307:14">==</operator> <operator pos:start="307:16" pos:end="307:16">-</operator><name pos:start="307:17" pos:end="307:21">EFBIG</name></expr>)</condition> <block pos:start="307:24" pos:end="331:5">{<block_content pos:start="315:9" pos:end="329:25">

        <comment type="block" pos:start="309:9" pos:end="313:73">/* This is generally a better message than whatever the driver would

         * deliver (especially because of the cluster_size_hint), since that

         * is most probably not much different from "image too large". */</comment>

        <decl_stmt pos:start="315:9" pos:end="315:43"><decl pos:start="315:9" pos:end="315:42"><type pos:start="315:9" pos:end="315:20"><specifier pos:start="315:9" pos:end="315:13">const</specifier> <name pos:start="315:15" pos:end="315:18">char</name> <modifier pos:start="315:20" pos:end="315:20">*</modifier></type><name pos:start="315:21" pos:end="315:37">cluster_size_hint</name> <init pos:start="315:39" pos:end="315:42">= <expr pos:start="315:41" pos:end="315:42"><literal type="string" pos:start="315:41" pos:end="315:42">""</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="317:9" pos:end="321:9"><if pos:start="317:9" pos:end="321:9">if <condition pos:start="317:12" pos:end="317:63">(<expr pos:start="317:13" pos:end="317:62"><call pos:start="317:13" pos:end="317:62"><name pos:start="317:13" pos:end="317:29">qemu_opt_get_size</name><argument_list pos:start="317:30" pos:end="317:62">(<argument pos:start="317:31" pos:end="317:34"><expr pos:start="317:31" pos:end="317:34"><name pos:start="317:31" pos:end="317:34">opts</name></expr></argument>, <argument pos:start="317:37" pos:end="317:58"><expr pos:start="317:37" pos:end="317:58"><name pos:start="317:37" pos:end="317:58">BLOCK_OPT_CLUSTER_SIZE</name></expr></argument>, <argument pos:start="317:61" pos:end="317:61"><expr pos:start="317:61" pos:end="317:61"><literal type="number" pos:start="317:61" pos:end="317:61">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="317:65" pos:end="321:9">{<block_content pos:start="319:13" pos:end="319:69">

            <expr_stmt pos:start="319:13" pos:end="319:69"><expr pos:start="319:13" pos:end="319:68"><name pos:start="319:13" pos:end="319:29">cluster_size_hint</name> <operator pos:start="319:31" pos:end="319:31">=</operator> <literal type="string" pos:start="319:33" pos:end="319:68">" (try using a larger cluster size)"</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="323:9" pos:end="325:49"><expr pos:start="323:9" pos:end="325:48"><call pos:start="323:9" pos:end="325:48"><name pos:start="323:9" pos:end="323:18">error_setg</name><argument_list pos:start="323:19" pos:end="325:48">(<argument pos:start="323:20" pos:end="323:23"><expr pos:start="323:20" pos:end="323:23"><name pos:start="323:20" pos:end="323:23">errp</name></expr></argument>, <argument pos:start="323:26" pos:end="325:23"><expr pos:start="323:26" pos:end="325:23"><literal type="string" pos:start="323:26" pos:end="323:75">"The image size is too large for file format '%s'"</literal>

                   <literal type="string" pos:start="325:20" pos:end="325:23">"%s"</literal></expr></argument>, <argument pos:start="325:26" pos:end="325:28"><expr pos:start="325:26" pos:end="325:28"><name pos:start="325:26" pos:end="325:28">fmt</name></expr></argument>, <argument pos:start="325:31" pos:end="325:47"><expr pos:start="325:31" pos:end="325:47"><name pos:start="325:31" pos:end="325:47">cluster_size_hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="327:9" pos:end="327:30"><expr pos:start="327:9" pos:end="327:29"><call pos:start="327:9" pos:end="327:29"><name pos:start="327:9" pos:end="327:18">error_free</name><argument_list pos:start="327:19" pos:end="327:29">(<argument pos:start="327:20" pos:end="327:28"><expr pos:start="327:20" pos:end="327:28"><name pos:start="327:20" pos:end="327:28">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="329:9" pos:end="329:25"><expr pos:start="329:9" pos:end="329:24"><name pos:start="329:9" pos:end="329:17">local_err</name> <operator pos:start="329:19" pos:end="329:19">=</operator> <name pos:start="329:21" pos:end="329:24">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="335:1" pos:end="335:4"><name pos:start="335:1" pos:end="335:3">out</name>:</label>

    <expr_stmt pos:start="337:5" pos:end="337:24"><expr pos:start="337:5" pos:end="337:23"><call pos:start="337:5" pos:end="337:23"><name pos:start="337:5" pos:end="337:17">qemu_opts_del</name><argument_list pos:start="337:18" pos:end="337:23">(<argument pos:start="337:19" pos:end="337:22"><expr pos:start="337:19" pos:end="337:22"><name pos:start="337:19" pos:end="337:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="339:5" pos:end="339:32"><expr pos:start="339:5" pos:end="339:31"><call pos:start="339:5" pos:end="339:31"><name pos:start="339:5" pos:end="339:18">qemu_opts_free</name><argument_list pos:start="339:19" pos:end="339:31">(<argument pos:start="339:20" pos:end="339:30"><expr pos:start="339:20" pos:end="339:30"><name pos:start="339:20" pos:end="339:30">create_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="341:5" pos:end="341:37"><expr pos:start="341:5" pos:end="341:36"><call pos:start="341:5" pos:end="341:36"><name pos:start="341:5" pos:end="341:19">error_propagate</name><argument_list pos:start="341:20" pos:end="341:36">(<argument pos:start="341:21" pos:end="341:24"><expr pos:start="341:21" pos:end="341:24"><name pos:start="341:21" pos:end="341:24">errp</name></expr></argument>, <argument pos:start="341:27" pos:end="341:35"><expr pos:start="341:27" pos:end="341:35"><name pos:start="341:27" pos:end="341:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
