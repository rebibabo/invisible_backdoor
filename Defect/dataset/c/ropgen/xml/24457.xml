<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24457.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:27">check_io</name><parameter_list pos:start="1:28" pos:end="1:65">(<parameter pos:start="1:29" pos:end="1:44"><decl pos:start="1:29" pos:end="1:44"><type pos:start="1:29" pos:end="1:44"><name pos:start="1:29" pos:end="1:39">CPUX86State</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">env</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:54"><decl pos:start="1:47" pos:end="1:54"><type pos:start="1:47" pos:end="1:54"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:54">addr</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:64"><decl pos:start="1:57" pos:end="1:64"><type pos:start="1:57" pos:end="1:64"><name pos:start="1:57" pos:end="1:59">int</name></type> <name pos:start="1:61" pos:end="1:64">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="49:1">{<block_content pos:start="5:5" pos:end="47:5">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:17">io_offset</name></decl>, <decl pos:start="5:20" pos:end="5:22"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:20" pos:end="5:22">val</name></decl>, <decl pos:start="5:25" pos:end="5:28"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:25" pos:end="5:28">mask</name></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="9:40">/* TSS must be a valid 32 bit one */</comment>

    <if_stmt pos:start="11:5" pos:end="19:5"><if pos:start="11:5" pos:end="19:5">if <condition pos:start="11:8" pos:end="15:28">(<expr pos:start="11:9" pos:end="15:27"><operator pos:start="11:9" pos:end="11:9">!</operator><operator pos:start="11:10" pos:end="11:10">(</operator><name pos:start="11:11" pos:end="11:23"><name pos:start="11:11" pos:end="11:13">env</name><operator pos:start="11:14" pos:end="11:15">-&gt;</operator><name pos:start="11:16" pos:end="11:17">tr</name><operator pos:start="11:18" pos:end="11:18">.</operator><name pos:start="11:19" pos:end="11:23">flags</name></name> <operator pos:start="11:25" pos:end="11:25">&amp;</operator> <name pos:start="11:27" pos:end="11:37">DESC_P_MASK</name><operator pos:start="11:38" pos:end="11:38">)</operator> <operator pos:start="11:40" pos:end="11:41">||</operator>

        <operator pos:start="13:9" pos:end="13:9">(</operator><operator pos:start="13:10" pos:end="13:10">(</operator><name pos:start="13:11" pos:end="13:23"><name pos:start="13:11" pos:end="13:13">env</name><operator pos:start="13:14" pos:end="13:15">-&gt;</operator><name pos:start="13:16" pos:end="13:17">tr</name><operator pos:start="13:18" pos:end="13:18">.</operator><name pos:start="13:19" pos:end="13:23">flags</name></name> <operator pos:start="13:25" pos:end="13:26">&gt;&gt;</operator> <name pos:start="13:28" pos:end="13:42">DESC_TYPE_SHIFT</name><operator pos:start="13:43" pos:end="13:43">)</operator> <operator pos:start="13:45" pos:end="13:45">&amp;</operator> <literal type="number" pos:start="13:47" pos:end="13:49">0xf</literal><operator pos:start="13:50" pos:end="13:50">)</operator> <operator pos:start="13:52" pos:end="13:53">!=</operator> <literal type="number" pos:start="13:55" pos:end="13:55">9</literal> <operator pos:start="13:57" pos:end="13:58">||</operator>

        <name pos:start="15:9" pos:end="15:21"><name pos:start="15:9" pos:end="15:11">env</name><operator pos:start="15:12" pos:end="15:13">-&gt;</operator><name pos:start="15:14" pos:end="15:15">tr</name><operator pos:start="15:16" pos:end="15:16">.</operator><name pos:start="15:17" pos:end="15:21">limit</name></name> <operator pos:start="15:23" pos:end="15:23">&lt;</operator> <literal type="number" pos:start="15:25" pos:end="15:27">103</literal></expr>)</condition> <block pos:start="15:30" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:18">

        <goto pos:start="17:9" pos:end="17:18">goto <name pos:start="17:14" pos:end="17:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:58"><expr pos:start="21:5" pos:end="21:57"><name pos:start="21:5" pos:end="21:13">io_offset</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <call pos:start="21:17" pos:end="21:57"><name pos:start="21:17" pos:end="21:31">cpu_lduw_kernel</name><argument_list pos:start="21:32" pos:end="21:57">(<argument pos:start="21:33" pos:end="21:35"><expr pos:start="21:33" pos:end="21:35"><name pos:start="21:33" pos:end="21:35">env</name></expr></argument>, <argument pos:start="21:38" pos:end="21:56"><expr pos:start="21:38" pos:end="21:56"><name pos:start="21:38" pos:end="21:49"><name pos:start="21:38" pos:end="21:40">env</name><operator pos:start="21:41" pos:end="21:42">-&gt;</operator><name pos:start="21:43" pos:end="21:44">tr</name><operator pos:start="21:45" pos:end="21:45">.</operator><name pos:start="21:46" pos:end="21:49">base</name></name> <operator pos:start="21:51" pos:end="21:51">+</operator> <literal type="number" pos:start="21:53" pos:end="21:56">0x66</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:29"><expr pos:start="23:5" pos:end="23:28"><name pos:start="23:5" pos:end="23:13">io_offset</name> <operator pos:start="23:15" pos:end="23:16">+=</operator> <operator pos:start="23:18" pos:end="23:18">(</operator><name pos:start="23:19" pos:end="23:22">addr</name> <operator pos:start="23:24" pos:end="23:25">&gt;&gt;</operator> <literal type="number" pos:start="23:27" pos:end="23:27">3</literal><operator pos:start="23:28" pos:end="23:28">)</operator></expr>;</expr_stmt>

    <comment type="block" pos:start="25:5" pos:end="25:41">/* Note: the check needs two bytes */</comment>

    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:40">(<expr pos:start="27:9" pos:end="27:39"><operator pos:start="27:9" pos:end="27:9">(</operator><name pos:start="27:10" pos:end="27:18">io_offset</name> <operator pos:start="27:20" pos:end="27:20">+</operator> <literal type="number" pos:start="27:22" pos:end="27:22">1</literal><operator pos:start="27:23" pos:end="27:23">)</operator> <operator pos:start="27:25" pos:end="27:25">&gt;</operator> <name pos:start="27:27" pos:end="27:39"><name pos:start="27:27" pos:end="27:29">env</name><operator pos:start="27:30" pos:end="27:31">-&gt;</operator><name pos:start="27:32" pos:end="27:33">tr</name><operator pos:start="27:34" pos:end="27:34">.</operator><name pos:start="27:35" pos:end="27:39">limit</name></name></expr>)</condition> <block pos:start="27:42" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:18">

        <goto pos:start="29:9" pos:end="29:18">goto <name pos:start="29:14" pos:end="29:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:57"><expr pos:start="33:5" pos:end="33:56"><name pos:start="33:5" pos:end="33:7">val</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:56"><name pos:start="33:11" pos:end="33:25">cpu_lduw_kernel</name><argument_list pos:start="33:26" pos:end="33:56">(<argument pos:start="33:27" pos:end="33:29"><expr pos:start="33:27" pos:end="33:29"><name pos:start="33:27" pos:end="33:29">env</name></expr></argument>, <argument pos:start="33:32" pos:end="33:55"><expr pos:start="33:32" pos:end="33:55"><name pos:start="33:32" pos:end="33:43"><name pos:start="33:32" pos:end="33:34">env</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:38">tr</name><operator pos:start="33:39" pos:end="33:39">.</operator><name pos:start="33:40" pos:end="33:43">base</name></name> <operator pos:start="33:45" pos:end="33:45">+</operator> <name pos:start="33:47" pos:end="33:55">io_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:23"><expr pos:start="35:5" pos:end="35:22"><name pos:start="35:5" pos:end="35:7">val</name> <operator pos:start="35:9" pos:end="35:11">&gt;&gt;=</operator> <operator pos:start="35:13" pos:end="35:13">(</operator><name pos:start="35:14" pos:end="35:17">addr</name> <operator pos:start="35:19" pos:end="35:19">&amp;</operator> <literal type="number" pos:start="35:21" pos:end="35:21">7</literal><operator pos:start="35:22" pos:end="35:22">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:27"><expr pos:start="37:5" pos:end="37:26"><name pos:start="37:5" pos:end="37:8">mask</name> <operator pos:start="37:10" pos:end="37:10">=</operator> <operator pos:start="37:12" pos:end="37:12">(</operator><literal type="number" pos:start="37:13" pos:end="37:13">1</literal> <operator pos:start="37:15" pos:end="37:16">&lt;&lt;</operator> <name pos:start="37:18" pos:end="37:21">size</name><operator pos:start="37:22" pos:end="37:22">)</operator> <operator pos:start="37:24" pos:end="37:24">-</operator> <literal type="number" pos:start="37:26" pos:end="37:26">1</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="39:5" pos:end="39:48">/* all bits must be zero to allow the I/O */</comment>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:26">(<expr pos:start="41:9" pos:end="41:25"><operator pos:start="41:9" pos:end="41:9">(</operator><name pos:start="41:10" pos:end="41:12">val</name> <operator pos:start="41:14" pos:end="41:14">&amp;</operator> <name pos:start="41:16" pos:end="41:19">mask</name><operator pos:start="41:20" pos:end="41:20">)</operator> <operator pos:start="41:22" pos:end="41:23">!=</operator> <literal type="number" pos:start="41:25" pos:end="41:25">0</literal></expr>)</condition> <block pos:start="41:28" pos:end="47:5">{<block_content pos:start="43:5" pos:end="45:48">

    <label pos:start="43:5" pos:end="43:9"><name pos:start="43:5" pos:end="43:8">fail</name>:</label>

        <expr_stmt pos:start="45:9" pos:end="45:48"><expr pos:start="45:9" pos:end="45:47"><call pos:start="45:9" pos:end="45:47"><name pos:start="45:9" pos:end="45:27">raise_exception_err</name><argument_list pos:start="45:28" pos:end="45:47">(<argument pos:start="45:29" pos:end="45:31"><expr pos:start="45:29" pos:end="45:31"><name pos:start="45:29" pos:end="45:31">env</name></expr></argument>, <argument pos:start="45:34" pos:end="45:43"><expr pos:start="45:34" pos:end="45:43"><name pos:start="45:34" pos:end="45:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="45:46" pos:end="45:46"><expr pos:start="45:46" pos:end="45:46"><literal type="number" pos:start="45:46" pos:end="45:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
