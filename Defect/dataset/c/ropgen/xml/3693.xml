<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3693.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:23">bdrv_aio_multiwrite</name><parameter_list pos:start="1:24" pos:end="1:79">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:44"><name pos:start="1:25" pos:end="1:40">BlockDriverState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">bs</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:64"><decl pos:start="1:47" pos:end="1:64"><type pos:start="1:47" pos:end="1:64"><name pos:start="1:47" pos:end="1:58">BlockRequest</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">reqs</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:78"><decl pos:start="1:67" pos:end="1:78"><type pos:start="1:67" pos:end="1:78"><name pos:start="1:67" pos:end="1:69">int</name></type> <name pos:start="1:71" pos:end="1:78">num_reqs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="99:1">{<block_content pos:start="5:5" pos:end="97:14">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">BlockDriverAIOCB</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:25">acb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">MultiwriteCB</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">mcb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:22">(<expr pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:16">num_reqs</name> <operator pos:start="13:18" pos:end="13:19">==</operator> <literal type="number" pos:start="13:21" pos:end="13:21">0</literal></expr>)</condition> <block pos:start="13:24" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:17">

        <return pos:start="15:9" pos:end="15:17">return <expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="21:5" pos:end="21:36">// Create MultiwriteCB structure</comment>

    <expr_stmt pos:start="23:5" pos:end="23:74"><expr pos:start="23:5" pos:end="23:73"><name pos:start="23:5" pos:end="23:7">mcb</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:73"><name pos:start="23:11" pos:end="23:22">qemu_mallocz</name><argument_list pos:start="23:23" pos:end="23:73">(<argument pos:start="23:24" pos:end="23:72"><expr pos:start="23:24" pos:end="23:72"><sizeof pos:start="23:24" pos:end="23:35">sizeof<argument_list pos:start="23:30" pos:end="23:35">(<argument pos:start="23:31" pos:end="23:34"><expr pos:start="23:31" pos:end="23:34"><operator pos:start="23:31" pos:end="23:31">*</operator><name pos:start="23:32" pos:end="23:34">mcb</name></expr></argument>)</argument_list></sizeof> <operator pos:start="23:37" pos:end="23:37">+</operator> <name pos:start="23:39" pos:end="23:46">num_reqs</name> <operator pos:start="23:48" pos:end="23:48">*</operator> <sizeof pos:start="23:50" pos:end="23:72">sizeof<argument_list pos:start="23:56" pos:end="23:72">(<argument pos:start="23:57" pos:end="23:71"><expr pos:start="23:57" pos:end="23:71"><operator pos:start="23:57" pos:end="23:57">*</operator><name pos:start="23:58" pos:end="23:71"><name pos:start="23:58" pos:end="23:60">mcb</name><operator pos:start="23:61" pos:end="23:62">-&gt;</operator><name pos:start="23:63" pos:end="23:71">callbacks</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:26"><expr pos:start="25:5" pos:end="25:25"><name pos:start="25:5" pos:end="25:21"><name pos:start="25:5" pos:end="25:7">mcb</name><operator pos:start="25:8" pos:end="25:9">-&gt;</operator><name pos:start="25:10" pos:end="25:21">num_requests</name></name> <operator pos:start="25:23" pos:end="25:23">=</operator> <literal type="number" pos:start="25:25" pos:end="25:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:34"><expr pos:start="27:5" pos:end="27:33"><name pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:7">mcb</name><operator pos:start="27:8" pos:end="27:9">-&gt;</operator><name pos:start="27:10" pos:end="27:22">num_callbacks</name></name> <operator pos:start="27:24" pos:end="27:24">=</operator> <name pos:start="27:26" pos:end="27:33">num_reqs</name></expr>;</expr_stmt>



    <for pos:start="31:5" pos:end="37:5">for <control pos:start="31:9" pos:end="31:34">(<init pos:start="31:10" pos:end="31:15"><expr pos:start="31:10" pos:end="31:14"><name pos:start="31:10" pos:end="31:10">i</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <literal type="number" pos:start="31:14" pos:end="31:14">0</literal></expr>;</init> <condition pos:start="31:17" pos:end="31:29"><expr pos:start="31:17" pos:end="31:28"><name pos:start="31:17" pos:end="31:17">i</name> <operator pos:start="31:19" pos:end="31:19">&lt;</operator> <name pos:start="31:21" pos:end="31:28">num_reqs</name></expr>;</condition> <incr pos:start="31:31" pos:end="31:33"><expr pos:start="31:31" pos:end="31:33"><name pos:start="31:31" pos:end="31:31">i</name><operator pos:start="31:32" pos:end="31:33">++</operator></expr></incr>)</control> <block pos:start="31:36" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:50">

        <expr_stmt pos:start="33:9" pos:end="33:42"><expr pos:start="33:9" pos:end="33:41"><name pos:start="33:9" pos:end="33:25"><name pos:start="33:9" pos:end="33:11">mcb</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:22">callbacks</name><index pos:start="33:23" pos:end="33:25">[<expr pos:start="33:24" pos:end="33:24"><name pos:start="33:24" pos:end="33:24">i</name></expr>]</index></name><operator pos:start="33:26" pos:end="33:26">.</operator><name pos:start="33:27" pos:end="33:28">cb</name> <operator pos:start="33:30" pos:end="33:30">=</operator> <name pos:start="33:32" pos:end="33:38"><name pos:start="33:32" pos:end="33:35">reqs</name><index pos:start="33:36" pos:end="33:38">[<expr pos:start="33:37" pos:end="33:37"><name pos:start="33:37" pos:end="33:37">i</name></expr>]</index></name><operator pos:start="33:39" pos:end="33:39">.</operator><name pos:start="33:40" pos:end="33:41">cb</name></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:50"><expr pos:start="35:9" pos:end="35:49"><name pos:start="35:9" pos:end="35:25"><name pos:start="35:9" pos:end="35:11">mcb</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:22">callbacks</name><index pos:start="35:23" pos:end="35:25">[<expr pos:start="35:24" pos:end="35:24"><name pos:start="35:24" pos:end="35:24">i</name></expr>]</index></name><operator pos:start="35:26" pos:end="35:26">.</operator><name pos:start="35:27" pos:end="35:32">opaque</name> <operator pos:start="35:34" pos:end="35:34">=</operator> <name pos:start="35:36" pos:end="35:42"><name pos:start="35:36" pos:end="35:39">reqs</name><index pos:start="35:40" pos:end="35:42">[<expr pos:start="35:41" pos:end="35:41"><name pos:start="35:41" pos:end="35:41">i</name></expr>]</index></name><operator pos:start="35:43" pos:end="35:43">.</operator><name pos:start="35:44" pos:end="35:49">opaque</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="line" pos:start="41:5" pos:end="41:34">// Check for mergable requests</comment>

    <expr_stmt pos:start="43:5" pos:end="43:57"><expr pos:start="43:5" pos:end="43:56"><name pos:start="43:5" pos:end="43:12">num_reqs</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <call pos:start="43:16" pos:end="43:56"><name pos:start="43:16" pos:end="43:31">multiwrite_merge</name><argument_list pos:start="43:32" pos:end="43:56">(<argument pos:start="43:33" pos:end="43:34"><expr pos:start="43:33" pos:end="43:34"><name pos:start="43:33" pos:end="43:34">bs</name></expr></argument>, <argument pos:start="43:37" pos:end="43:40"><expr pos:start="43:37" pos:end="43:40"><name pos:start="43:37" pos:end="43:40">reqs</name></expr></argument>, <argument pos:start="43:43" pos:end="43:50"><expr pos:start="43:43" pos:end="43:50"><name pos:start="43:43" pos:end="43:50">num_reqs</name></expr></argument>, <argument pos:start="43:53" pos:end="43:55"><expr pos:start="43:53" pos:end="43:55"><name pos:start="43:53" pos:end="43:55">mcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="47:5" pos:end="47:27">// Run the aio requests</comment>

    <for pos:start="49:5" pos:end="85:5">for <control pos:start="49:9" pos:end="49:34">(<init pos:start="49:10" pos:end="49:15"><expr pos:start="49:10" pos:end="49:14"><name pos:start="49:10" pos:end="49:10">i</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <literal type="number" pos:start="49:14" pos:end="49:14">0</literal></expr>;</init> <condition pos:start="49:17" pos:end="49:29"><expr pos:start="49:17" pos:end="49:28"><name pos:start="49:17" pos:end="49:17">i</name> <operator pos:start="49:19" pos:end="49:19">&lt;</operator> <name pos:start="49:21" pos:end="49:28">num_reqs</name></expr>;</condition> <incr pos:start="49:31" pos:end="49:33"><expr pos:start="49:31" pos:end="49:33"><name pos:start="49:31" pos:end="49:31">i</name><operator pos:start="49:32" pos:end="49:33">++</operator></expr></incr>)</control> <block pos:start="49:36" pos:end="85:5">{<block_content pos:start="51:9" pos:end="83:9">

        <expr_stmt pos:start="51:9" pos:end="53:52"><expr pos:start="51:9" pos:end="53:51"><name pos:start="51:9" pos:end="51:11">acb</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <call pos:start="51:15" pos:end="53:51"><name pos:start="51:15" pos:end="51:29">bdrv_aio_writev</name><argument_list pos:start="51:30" pos:end="53:51">(<argument pos:start="51:31" pos:end="51:32"><expr pos:start="51:31" pos:end="51:32"><name pos:start="51:31" pos:end="51:32">bs</name></expr></argument>, <argument pos:start="51:35" pos:end="51:48"><expr pos:start="51:35" pos:end="51:48"><name pos:start="51:35" pos:end="51:41"><name pos:start="51:35" pos:end="51:38">reqs</name><index pos:start="51:39" pos:end="51:41">[<expr pos:start="51:40" pos:end="51:40"><name pos:start="51:40" pos:end="51:40">i</name></expr>]</index></name><operator pos:start="51:42" pos:end="51:42">.</operator><name pos:start="51:43" pos:end="51:48">sector</name></expr></argument>, <argument pos:start="51:51" pos:end="51:62"><expr pos:start="51:51" pos:end="51:62"><name pos:start="51:51" pos:end="51:57"><name pos:start="51:51" pos:end="51:54">reqs</name><index pos:start="51:55" pos:end="51:57">[<expr pos:start="51:56" pos:end="51:56"><name pos:start="51:56" pos:end="51:56">i</name></expr>]</index></name><operator pos:start="51:58" pos:end="51:58">.</operator><name pos:start="51:59" pos:end="51:62">qiov</name></expr></argument>,

            <argument pos:start="53:13" pos:end="53:30"><expr pos:start="53:13" pos:end="53:30"><name pos:start="53:13" pos:end="53:19"><name pos:start="53:13" pos:end="53:16">reqs</name><index pos:start="53:17" pos:end="53:19">[<expr pos:start="53:18" pos:end="53:18"><name pos:start="53:18" pos:end="53:18">i</name></expr>]</index></name><operator pos:start="53:20" pos:end="53:20">.</operator><name pos:start="53:21" pos:end="53:30">nb_sectors</name></expr></argument>, <argument pos:start="53:33" pos:end="53:45"><expr pos:start="53:33" pos:end="53:45"><name pos:start="53:33" pos:end="53:45">multiwrite_cb</name></expr></argument>, <argument pos:start="53:48" pos:end="53:50"><expr pos:start="53:48" pos:end="53:50"><name pos:start="53:48" pos:end="53:50">mcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="57:9" pos:end="83:9"><if pos:start="57:9" pos:end="79:9">if <condition pos:start="57:12" pos:end="57:24">(<expr pos:start="57:13" pos:end="57:23"><name pos:start="57:13" pos:end="57:15">acb</name> <operator pos:start="57:17" pos:end="57:18">==</operator> <name pos:start="57:20" pos:end="57:23">NULL</name></expr>)</condition> <block pos:start="57:26" pos:end="79:9">{<block_content pos:start="65:13" pos:end="77:13">

            <comment type="line" pos:start="59:13" pos:end="59:70">// We can only fail the whole thing if no request has been</comment>

            <comment type="line" pos:start="61:13" pos:end="61:76">// submitted yet. Otherwise we'll wait for the submitted AIOs to</comment>

            <comment type="line" pos:start="63:13" pos:end="63:61">// complete and report the error in the callback.</comment>

            <if_stmt pos:start="65:13" pos:end="77:13"><if pos:start="65:13" pos:end="71:13">if <condition pos:start="65:16" pos:end="65:39">(<expr pos:start="65:17" pos:end="65:38"><name pos:start="65:17" pos:end="65:33"><name pos:start="65:17" pos:end="65:19">mcb</name><operator pos:start="65:20" pos:end="65:21">-&gt;</operator><name pos:start="65:22" pos:end="65:33">num_requests</name></name> <operator pos:start="65:35" pos:end="65:36">==</operator> <literal type="number" pos:start="65:38" pos:end="65:38">0</literal></expr>)</condition> <block pos:start="65:41" pos:end="71:13">{<block_content pos:start="67:17" pos:end="69:26">

                <expr_stmt pos:start="67:17" pos:end="67:37"><expr pos:start="67:17" pos:end="67:36"><name pos:start="67:17" pos:end="67:23"><name pos:start="67:17" pos:end="67:20">reqs</name><index pos:start="67:21" pos:end="67:23">[<expr pos:start="67:22" pos:end="67:22"><name pos:start="67:22" pos:end="67:22">i</name></expr>]</index></name><operator pos:start="67:24" pos:end="67:24">.</operator><name pos:start="67:25" pos:end="67:29">error</name> <operator pos:start="67:31" pos:end="67:31">=</operator> <operator pos:start="67:33" pos:end="67:33">-</operator><name pos:start="67:34" pos:end="67:36">EIO</name></expr>;</expr_stmt>

                <goto pos:start="69:17" pos:end="69:26">goto <name pos:start="69:22" pos:end="69:25">fail</name>;</goto>

            </block_content>}</block></if> <else pos:start="71:15" pos:end="77:13">else <block pos:start="71:20" pos:end="77:13">{<block_content pos:start="73:17" pos:end="75:22">

                <expr_stmt pos:start="73:17" pos:end="73:34"><expr pos:start="73:17" pos:end="73:33"><name pos:start="73:17" pos:end="73:26"><name pos:start="73:17" pos:end="73:19">mcb</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:26">error</name></name> <operator pos:start="73:28" pos:end="73:28">=</operator> <operator pos:start="73:30" pos:end="73:30">-</operator><name pos:start="73:31" pos:end="73:33">EIO</name></expr>;</expr_stmt>

                <break pos:start="75:17" pos:end="75:22">break;</break>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="79:11" pos:end="83:9">else <block pos:start="79:16" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:32">

            <expr_stmt pos:start="81:13" pos:end="81:32"><expr pos:start="81:13" pos:end="81:31"><name pos:start="81:13" pos:end="81:29"><name pos:start="81:13" pos:end="81:15">mcb</name><operator pos:start="81:16" pos:end="81:17">-&gt;</operator><name pos:start="81:18" pos:end="81:29">num_requests</name></name><operator pos:start="81:30" pos:end="81:31">++</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <return pos:start="89:5" pos:end="89:13">return <expr pos:start="89:12" pos:end="89:12"><literal type="number" pos:start="89:12" pos:end="89:12">0</literal></expr>;</return>



<label pos:start="93:1" pos:end="93:5"><name pos:start="93:1" pos:end="93:4">fail</name>:</label>

    <expr_stmt pos:start="95:5" pos:end="95:14"><expr pos:start="95:5" pos:end="95:13"><call pos:start="95:5" pos:end="95:13"><name pos:start="95:5" pos:end="95:8">free</name><argument_list pos:start="95:9" pos:end="95:13">(<argument pos:start="95:10" pos:end="95:12"><expr pos:start="95:10" pos:end="95:12"><name pos:start="95:10" pos:end="95:12">mcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="97:5" pos:end="97:14">return <expr pos:start="97:12" pos:end="97:13"><operator pos:start="97:12" pos:end="97:12">-</operator><literal type="number" pos:start="97:13" pos:end="97:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
