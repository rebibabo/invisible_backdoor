<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26495.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">vmdk_write_extent</name><parameter_list pos:start="1:29" pos:end="7:44">(<parameter pos:start="1:30" pos:end="1:47"><decl pos:start="1:30" pos:end="1:47"><type pos:start="1:30" pos:end="1:47"><name pos:start="1:30" pos:end="1:39">VmdkExtent</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:47">extent</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:71"><decl pos:start="1:50" pos:end="1:71"><type pos:start="1:50" pos:end="1:71"><name pos:start="1:50" pos:end="1:56">int64_t</name></type> <name pos:start="1:58" pos:end="1:71">cluster_offset</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:53"><decl pos:start="3:29" pos:end="3:53"><type pos:start="3:29" pos:end="3:53"><name pos:start="3:29" pos:end="3:35">int64_t</name></type> <name pos:start="3:37" pos:end="3:53">offset_in_cluster</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:73"><decl pos:start="3:56" pos:end="3:73"><type pos:start="3:56" pos:end="3:73"><name pos:start="3:56" pos:end="3:67">QEMUIOVector</name> <modifier pos:start="3:69" pos:end="3:69">*</modifier></type><name pos:start="3:70" pos:end="3:73">qiov</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:48"><decl pos:start="5:29" pos:end="5:48"><type pos:start="5:29" pos:end="5:48"><name pos:start="5:29" pos:end="5:36">uint64_t</name></type> <name pos:start="5:38" pos:end="5:48">qiov_offset</name></decl></parameter>, <parameter pos:start="5:51" pos:end="5:66"><decl pos:start="5:51" pos:end="5:66"><type pos:start="5:51" pos:end="5:66"><name pos:start="5:51" pos:end="5:58">uint64_t</name></type> <name pos:start="5:60" pos:end="5:66">n_bytes</name></decl></parameter>,

                            <parameter pos:start="7:29" pos:end="7:43"><decl pos:start="7:29" pos:end="7:43"><type pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:36">uint64_t</name></type> <name pos:start="7:38" pos:end="7:43">offset</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="141:1">{<block_content pos:start="11:5" pos:end="139:15">

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:19">VmdkGrainMarker</name> <modifier pos:start="13:21" pos:end="13:21">*</modifier></type><name pos:start="13:22" pos:end="13:25">data</name> <init pos:start="13:27" pos:end="13:32">= <expr pos:start="13:29" pos:end="13:32"><name pos:start="13:29" pos:end="13:32">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:10">uLongf</name></type> <name pos:start="15:12" pos:end="15:18">buf_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:16">QEMUIOVector</name></type> <name pos:start="17:18" pos:end="17:27">local_qiov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:10">struct</name> <name pos:start="19:12" pos:end="19:16">iovec</name></name></type> <name pos:start="19:18" pos:end="19:20">iov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:25"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">int64_t</name></type> <name pos:start="21:13" pos:end="21:24">write_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:29"><decl pos:start="23:5" pos:end="23:28"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">int64_t</name></type> <name pos:start="23:13" pos:end="23:28">write_end_sector</name></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="91:5"><if pos:start="27:5" pos:end="85:5">if <condition pos:start="27:8" pos:end="27:27">(<expr pos:start="27:9" pos:end="27:26"><name pos:start="27:9" pos:end="27:26"><name pos:start="27:9" pos:end="27:14">extent</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:26">compressed</name></name></expr>)</condition> <block pos:start="27:29" pos:end="85:5">{<block_content pos:start="29:9" pos:end="83:55">

        <decl_stmt pos:start="29:9" pos:end="29:30"><decl pos:start="29:9" pos:end="29:29"><type pos:start="29:9" pos:end="29:14"><name pos:start="29:9" pos:end="29:12">void</name> <modifier pos:start="29:14" pos:end="29:14">*</modifier></type><name pos:start="29:15" pos:end="29:29">compressed_data</name></decl>;</decl_stmt>



        <if_stmt pos:start="33:9" pos:end="39:9"><if pos:start="33:9" pos:end="39:9">if <condition pos:start="33:12" pos:end="33:32">(<expr pos:start="33:13" pos:end="33:31"><operator pos:start="33:13" pos:end="33:13">!</operator><name pos:start="33:14" pos:end="33:31"><name pos:start="33:14" pos:end="33:19">extent</name><operator pos:start="33:20" pos:end="33:21">-&gt;</operator><name pos:start="33:22" pos:end="33:31">has_marker</name></name></expr>)</condition> <block pos:start="33:34" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:21">

            <expr_stmt pos:start="35:13" pos:end="35:26"><expr pos:start="35:13" pos:end="35:25"><name pos:start="35:13" pos:end="35:15">ret</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <operator pos:start="35:19" pos:end="35:19">-</operator><name pos:start="35:20" pos:end="35:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="37:13" pos:end="37:21">goto <name pos:start="37:18" pos:end="37:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:53"><expr pos:start="41:9" pos:end="41:52"><name pos:start="41:9" pos:end="41:15">buf_len</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <operator pos:start="41:19" pos:end="41:19">(</operator><name pos:start="41:20" pos:end="41:42"><name pos:start="41:20" pos:end="41:25">extent</name><operator pos:start="41:26" pos:end="41:27">-&gt;</operator><name pos:start="41:28" pos:end="41:42">cluster_sectors</name></name> <operator pos:start="41:44" pos:end="41:45">&lt;&lt;</operator> <literal type="number" pos:start="41:47" pos:end="41:47">9</literal><operator pos:start="41:48" pos:end="41:48">)</operator> <operator pos:start="41:50" pos:end="41:50">*</operator> <literal type="number" pos:start="41:52" pos:end="41:52">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:59"><expr pos:start="43:9" pos:end="43:58"><name pos:start="43:9" pos:end="43:12">data</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <call pos:start="43:16" pos:end="43:58"><name pos:start="43:16" pos:end="43:23">g_malloc</name><argument_list pos:start="43:24" pos:end="43:58">(<argument pos:start="43:25" pos:end="43:57"><expr pos:start="43:25" pos:end="43:57"><name pos:start="43:25" pos:end="43:31">buf_len</name> <operator pos:start="43:33" pos:end="43:33">+</operator> <sizeof pos:start="43:35" pos:end="43:57">sizeof<argument_list pos:start="43:41" pos:end="43:57">(<argument pos:start="43:42" pos:end="43:56"><expr pos:start="43:42" pos:end="43:56"><name pos:start="43:42" pos:end="43:56">VmdkGrainMarker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:44"><expr pos:start="47:9" pos:end="47:43"><name pos:start="47:9" pos:end="47:23">compressed_data</name> <operator pos:start="47:25" pos:end="47:25">=</operator> <call pos:start="47:27" pos:end="47:43"><name pos:start="47:27" pos:end="47:34">g_malloc</name><argument_list pos:start="47:35" pos:end="47:43">(<argument pos:start="47:36" pos:end="47:42"><expr pos:start="47:36" pos:end="47:42"><name pos:start="47:36" pos:end="47:42">n_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:71"><expr pos:start="49:9" pos:end="49:70"><call pos:start="49:9" pos:end="49:70"><name pos:start="49:9" pos:end="49:25">qemu_iovec_to_buf</name><argument_list pos:start="49:26" pos:end="49:70">(<argument pos:start="49:27" pos:end="49:30"><expr pos:start="49:27" pos:end="49:30"><name pos:start="49:27" pos:end="49:30">qiov</name></expr></argument>, <argument pos:start="49:33" pos:end="49:43"><expr pos:start="49:33" pos:end="49:43"><name pos:start="49:33" pos:end="49:43">qiov_offset</name></expr></argument>, <argument pos:start="49:46" pos:end="49:60"><expr pos:start="49:46" pos:end="49:60"><name pos:start="49:46" pos:end="49:60">compressed_data</name></expr></argument>, <argument pos:start="49:63" pos:end="49:69"><expr pos:start="49:63" pos:end="49:69"><name pos:start="49:63" pos:end="49:69">n_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:71"><expr pos:start="51:9" pos:end="51:70"><name pos:start="51:9" pos:end="51:11">ret</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <call pos:start="51:15" pos:end="51:70"><name pos:start="51:15" pos:end="51:22">compress</name><argument_list pos:start="51:23" pos:end="51:70">(<argument pos:start="51:24" pos:end="51:33"><expr pos:start="51:24" pos:end="51:33"><name pos:start="51:24" pos:end="51:33"><name pos:start="51:24" pos:end="51:27">data</name><operator pos:start="51:28" pos:end="51:29">-&gt;</operator><name pos:start="51:30" pos:end="51:33">data</name></name></expr></argument>, <argument pos:start="51:36" pos:end="51:43"><expr pos:start="51:36" pos:end="51:43"><operator pos:start="51:36" pos:end="51:36">&amp;</operator><name pos:start="51:37" pos:end="51:43">buf_len</name></expr></argument>, <argument pos:start="51:46" pos:end="51:60"><expr pos:start="51:46" pos:end="51:60"><name pos:start="51:46" pos:end="51:60">compressed_data</name></expr></argument>, <argument pos:start="51:63" pos:end="51:69"><expr pos:start="51:63" pos:end="51:69"><name pos:start="51:63" pos:end="51:69">n_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:32"><expr pos:start="53:9" pos:end="53:31"><call pos:start="53:9" pos:end="53:31"><name pos:start="53:9" pos:end="53:14">g_free</name><argument_list pos:start="53:15" pos:end="53:31">(<argument pos:start="53:16" pos:end="53:30"><expr pos:start="53:16" pos:end="53:30"><name pos:start="53:16" pos:end="53:30">compressed_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="57:9" pos:end="63:9"><if pos:start="57:9" pos:end="63:9">if <condition pos:start="57:12" pos:end="57:40">(<expr pos:start="57:13" pos:end="57:39"><name pos:start="57:13" pos:end="57:15">ret</name> <operator pos:start="57:17" pos:end="57:18">!=</operator> <name pos:start="57:20" pos:end="57:23">Z_OK</name> <operator pos:start="57:25" pos:end="57:26">||</operator> <name pos:start="57:28" pos:end="57:34">buf_len</name> <operator pos:start="57:36" pos:end="57:37">==</operator> <literal type="number" pos:start="57:39" pos:end="57:39">0</literal></expr>)</condition> <block pos:start="57:42" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:21">

            <expr_stmt pos:start="59:13" pos:end="59:26"><expr pos:start="59:13" pos:end="59:25"><name pos:start="59:13" pos:end="59:15">ret</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <operator pos:start="59:19" pos:end="59:19">-</operator><name pos:start="59:20" pos:end="59:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="61:13" pos:end="61:21">goto <name pos:start="61:18" pos:end="61:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="67:9" pos:end="67:47"><expr pos:start="67:9" pos:end="67:46"><name pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:12">data</name><operator pos:start="67:13" pos:end="67:14">-&gt;</operator><name pos:start="67:15" pos:end="67:17">lba</name></name> <operator pos:start="67:19" pos:end="67:19">=</operator> <name pos:start="67:21" pos:end="67:26">offset</name> <operator pos:start="67:28" pos:end="67:29">&gt;&gt;</operator> <name pos:start="67:31" pos:end="67:46">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:29"><expr pos:start="69:9" pos:end="69:28"><name pos:start="69:9" pos:end="69:18"><name pos:start="69:9" pos:end="69:12">data</name><operator pos:start="69:13" pos:end="69:14">-&gt;</operator><name pos:start="69:15" pos:end="69:18">size</name></name> <operator pos:start="69:20" pos:end="69:20">=</operator> <name pos:start="69:22" pos:end="69:28">buf_len</name></expr>;</expr_stmt>



        <expr_stmt pos:start="73:9" pos:end="73:52"><expr pos:start="73:9" pos:end="73:51"><name pos:start="73:9" pos:end="73:15">n_bytes</name> <operator pos:start="73:17" pos:end="73:17">=</operator> <name pos:start="73:19" pos:end="73:25">buf_len</name> <operator pos:start="73:27" pos:end="73:27">+</operator> <sizeof pos:start="73:29" pos:end="73:51">sizeof<argument_list pos:start="73:35" pos:end="73:51">(<argument pos:start="73:36" pos:end="73:50"><expr pos:start="73:36" pos:end="73:50"><name pos:start="73:36" pos:end="73:50">VmdkGrainMarker</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="81:10"><expr pos:start="75:9" pos:end="81:9"><name pos:start="75:9" pos:end="75:11">iov</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <operator pos:start="75:15" pos:end="75:15">(</operator>struct <name pos:start="75:23" pos:end="75:27">iovec</name><operator pos:start="75:28" pos:end="75:28">)</operator> <block pos:start="75:30" pos:end="81:9">{

            <expr pos:start="77:13" pos:end="77:30"><operator pos:start="77:13" pos:end="77:13">.</operator><name pos:start="77:14" pos:end="77:21">iov_base</name>   <operator pos:start="77:25" pos:end="77:25">=</operator> <name pos:start="77:27" pos:end="77:30">data</name></expr>,

            <expr pos:start="79:13" pos:end="79:33"><operator pos:start="79:13" pos:end="79:13">.</operator><name pos:start="79:14" pos:end="79:20">iov_len</name>    <operator pos:start="79:25" pos:end="79:25">=</operator> <name pos:start="79:27" pos:end="79:33">n_bytes</name></expr>,

        }</block></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:55"><expr pos:start="83:9" pos:end="83:54"><call pos:start="83:9" pos:end="83:54"><name pos:start="83:9" pos:end="83:32">qemu_iovec_init_external</name><argument_list pos:start="83:33" pos:end="83:54">(<argument pos:start="83:34" pos:end="83:44"><expr pos:start="83:34" pos:end="83:44"><operator pos:start="83:34" pos:end="83:34">&amp;</operator><name pos:start="83:35" pos:end="83:44">local_qiov</name></expr></argument>, <argument pos:start="83:47" pos:end="83:50"><expr pos:start="83:47" pos:end="83:50"><operator pos:start="83:47" pos:end="83:47">&amp;</operator><name pos:start="83:48" pos:end="83:50">iov</name></expr></argument>, <argument pos:start="83:53" pos:end="83:53"><expr pos:start="83:53" pos:end="83:53"><literal type="number" pos:start="83:53" pos:end="83:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="85:7" pos:end="91:5">else <block pos:start="85:12" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:67">

        <expr_stmt pos:start="87:9" pos:end="87:49"><expr pos:start="87:9" pos:end="87:48"><call pos:start="87:9" pos:end="87:48"><name pos:start="87:9" pos:end="87:23">qemu_iovec_init</name><argument_list pos:start="87:24" pos:end="87:48">(<argument pos:start="87:25" pos:end="87:35"><expr pos:start="87:25" pos:end="87:35"><operator pos:start="87:25" pos:end="87:25">&amp;</operator><name pos:start="87:26" pos:end="87:35">local_qiov</name></expr></argument>, <argument pos:start="87:38" pos:end="87:47"><expr pos:start="87:38" pos:end="87:47"><name pos:start="87:38" pos:end="87:47"><name pos:start="87:38" pos:end="87:41">qiov</name><operator pos:start="87:42" pos:end="87:43">-&gt;</operator><name pos:start="87:44" pos:end="87:47">niov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:67"><expr pos:start="89:9" pos:end="89:66"><call pos:start="89:9" pos:end="89:66"><name pos:start="89:9" pos:end="89:25">qemu_iovec_concat</name><argument_list pos:start="89:26" pos:end="89:66">(<argument pos:start="89:27" pos:end="89:37"><expr pos:start="89:27" pos:end="89:37"><operator pos:start="89:27" pos:end="89:27">&amp;</operator><name pos:start="89:28" pos:end="89:37">local_qiov</name></expr></argument>, <argument pos:start="89:40" pos:end="89:43"><expr pos:start="89:40" pos:end="89:43"><name pos:start="89:40" pos:end="89:43">qiov</name></expr></argument>, <argument pos:start="89:46" pos:end="89:56"><expr pos:start="89:46" pos:end="89:56"><name pos:start="89:46" pos:end="89:56">qiov_offset</name></expr></argument>, <argument pos:start="89:59" pos:end="89:65"><expr pos:start="89:59" pos:end="89:65"><name pos:start="89:59" pos:end="89:65">n_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="99:42"><expr pos:start="95:5" pos:end="95:53"><name pos:start="95:5" pos:end="95:16">write_offset</name> <operator pos:start="95:18" pos:end="95:18">=</operator> <name pos:start="95:20" pos:end="95:33">cluster_offset</name> <operator pos:start="95:35" pos:end="95:35">+</operator> <name pos:start="95:37" pos:end="95:53">offset_in_cluster</name></expr><operator pos:start="95:54" pos:end="95:54">,</operator>

    <expr pos:start="97:5" pos:end="99:41"><name pos:start="97:5" pos:end="97:7">ret</name> <operator pos:start="97:9" pos:end="97:9">=</operator> <call pos:start="97:11" pos:end="99:41"><name pos:start="97:11" pos:end="97:25">bdrv_co_pwritev</name><argument_list pos:start="97:26" pos:end="99:41">(<argument pos:start="97:27" pos:end="97:42"><expr pos:start="97:27" pos:end="97:42"><name pos:start="97:27" pos:end="97:42"><name pos:start="97:27" pos:end="97:32">extent</name><operator pos:start="97:33" pos:end="97:34">-&gt;</operator><name pos:start="97:35" pos:end="97:38">file</name><operator pos:start="97:39" pos:end="97:40">-&gt;</operator><name pos:start="97:41" pos:end="97:42">bs</name></name></expr></argument>, <argument pos:start="97:45" pos:end="97:56"><expr pos:start="97:45" pos:end="97:56"><name pos:start="97:45" pos:end="97:56">write_offset</name></expr></argument>, <argument pos:start="97:59" pos:end="97:65"><expr pos:start="97:59" pos:end="97:65"><name pos:start="97:59" pos:end="97:65">n_bytes</name></expr></argument>,

                          <argument pos:start="99:27" pos:end="99:37"><expr pos:start="99:27" pos:end="99:37"><operator pos:start="99:27" pos:end="99:27">&amp;</operator><name pos:start="99:28" pos:end="99:37">local_qiov</name></expr></argument>, <argument pos:start="99:40" pos:end="99:40"><expr pos:start="99:40" pos:end="99:40"><literal type="number" pos:start="99:40" pos:end="99:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:78"><expr pos:start="103:5" pos:end="103:77"><name pos:start="103:5" pos:end="103:20">write_end_sector</name> <operator pos:start="103:22" pos:end="103:22">=</operator> <call pos:start="103:24" pos:end="103:77"><name pos:start="103:24" pos:end="103:35">DIV_ROUND_UP</name><argument_list pos:start="103:36" pos:end="103:77">(<argument pos:start="103:37" pos:end="103:58"><expr pos:start="103:37" pos:end="103:58"><name pos:start="103:37" pos:end="103:48">write_offset</name> <operator pos:start="103:50" pos:end="103:50">+</operator> <name pos:start="103:52" pos:end="103:58">n_bytes</name></expr></argument>, <argument pos:start="103:61" pos:end="103:76"><expr pos:start="103:61" pos:end="103:76"><name pos:start="103:61" pos:end="103:76">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="107:5" pos:end="117:5"><if pos:start="107:5" pos:end="111:5">if <condition pos:start="107:8" pos:end="107:27">(<expr pos:start="107:9" pos:end="107:26"><name pos:start="107:9" pos:end="107:26"><name pos:start="107:9" pos:end="107:14">extent</name><operator pos:start="107:15" pos:end="107:16">-&gt;</operator><name pos:start="107:17" pos:end="107:26">compressed</name></name></expr>)</condition> <block pos:start="107:29" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:55">

        <expr_stmt pos:start="109:9" pos:end="109:55"><expr pos:start="109:9" pos:end="109:54"><name pos:start="109:9" pos:end="109:35"><name pos:start="109:9" pos:end="109:14">extent</name><operator pos:start="109:15" pos:end="109:16">-&gt;</operator><name pos:start="109:17" pos:end="109:35">next_cluster_sector</name></name> <operator pos:start="109:37" pos:end="109:37">=</operator> <name pos:start="109:39" pos:end="109:54">write_end_sector</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="111:7" pos:end="117:5">else <block pos:start="111:12" pos:end="117:5">{<block_content pos:start="113:9" pos:end="115:60">

        <expr_stmt pos:start="113:9" pos:end="115:60"><expr pos:start="113:9" pos:end="115:59"><name pos:start="113:9" pos:end="113:35"><name pos:start="113:9" pos:end="113:14">extent</name><operator pos:start="113:15" pos:end="113:16">-&gt;</operator><name pos:start="113:17" pos:end="113:35">next_cluster_sector</name></name> <operator pos:start="113:37" pos:end="113:37">=</operator> <call pos:start="113:39" pos:end="115:59"><name pos:start="113:39" pos:end="113:41">MAX</name><argument_list pos:start="113:42" pos:end="115:59">(<argument pos:start="113:43" pos:end="113:69"><expr pos:start="113:43" pos:end="113:69"><name pos:start="113:43" pos:end="113:69"><name pos:start="113:43" pos:end="113:48">extent</name><operator pos:start="113:49" pos:end="113:50">-&gt;</operator><name pos:start="113:51" pos:end="113:69">next_cluster_sector</name></name></expr></argument>,

                                          <argument pos:start="115:43" pos:end="115:58"><expr pos:start="115:43" pos:end="115:58"><name pos:start="115:43" pos:end="115:58">write_end_sector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="121:5" pos:end="125:5"><if pos:start="121:5" pos:end="125:5">if <condition pos:start="121:8" pos:end="121:16">(<expr pos:start="121:9" pos:end="121:15"><name pos:start="121:9" pos:end="121:11">ret</name> <operator pos:start="121:13" pos:end="121:13">&lt;</operator> <literal type="number" pos:start="121:15" pos:end="121:15">0</literal></expr>)</condition> <block pos:start="121:18" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:17">

        <goto pos:start="123:9" pos:end="123:17">goto <name pos:start="123:14" pos:end="123:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:12"><expr pos:start="127:5" pos:end="127:11"><name pos:start="127:5" pos:end="127:7">ret</name> <operator pos:start="127:9" pos:end="127:9">=</operator> <literal type="number" pos:start="127:11" pos:end="127:11">0</literal></expr>;</expr_stmt>

 <label pos:start="129:2" pos:end="129:5"><name pos:start="129:2" pos:end="129:4">out</name>:</label>

    <expr_stmt pos:start="131:5" pos:end="131:17"><expr pos:start="131:5" pos:end="131:16"><call pos:start="131:5" pos:end="131:16"><name pos:start="131:5" pos:end="131:10">g_free</name><argument_list pos:start="131:11" pos:end="131:16">(<argument pos:start="131:12" pos:end="131:15"><expr pos:start="131:12" pos:end="131:15"><name pos:start="131:12" pos:end="131:15">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="133:5" pos:end="137:5"><if pos:start="133:5" pos:end="137:5">if <condition pos:start="133:8" pos:end="133:28">(<expr pos:start="133:9" pos:end="133:27"><operator pos:start="133:9" pos:end="133:9">!</operator><name pos:start="133:10" pos:end="133:27"><name pos:start="133:10" pos:end="133:15">extent</name><operator pos:start="133:16" pos:end="133:17">-&gt;</operator><name pos:start="133:18" pos:end="133:27">compressed</name></name></expr>)</condition> <block pos:start="133:30" pos:end="137:5">{<block_content pos:start="135:9" pos:end="135:40">

        <expr_stmt pos:start="135:9" pos:end="135:40"><expr pos:start="135:9" pos:end="135:39"><call pos:start="135:9" pos:end="135:39"><name pos:start="135:9" pos:end="135:26">qemu_iovec_destroy</name><argument_list pos:start="135:27" pos:end="135:39">(<argument pos:start="135:28" pos:end="135:38"><expr pos:start="135:28" pos:end="135:38"><operator pos:start="135:28" pos:end="135:28">&amp;</operator><name pos:start="135:29" pos:end="135:38">local_qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="139:5" pos:end="139:15">return <expr pos:start="139:12" pos:end="139:14"><name pos:start="139:12" pos:end="139:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
