<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19597.c" pos:tabs="8"><function pos:start="1:1" pos:end="273:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">decode_bmv_frame</name><parameter_list pos:start="1:28" pos:end="1:94">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><specifier pos:start="1:29" pos:end="1:33">const</specifier> <name pos:start="1:35" pos:end="1:41">uint8_t</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:49">source</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:62"><decl pos:start="1:52" pos:end="1:62"><type pos:start="1:52" pos:end="1:62"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:62">src_len</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:78"><decl pos:start="1:65" pos:end="1:78"><type pos:start="1:65" pos:end="1:78"><name pos:start="1:65" pos:end="1:71">uint8_t</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:78">frame</name></decl></parameter>, <parameter pos:start="1:81" pos:end="1:93"><decl pos:start="1:81" pos:end="1:93"><type pos:start="1:81" pos:end="1:93"><name pos:start="1:81" pos:end="1:83">int</name></type> <name pos:start="1:85" pos:end="1:93">frame_off</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="273:1">{<block_content pos:start="5:5" pos:end="271:13">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">val</name></decl>, <decl pos:start="5:14" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:22">saved_val</name> <init pos:start="5:24" pos:end="5:26">= <expr pos:start="5:26" pos:end="5:26"><literal type="number" pos:start="5:26" pos:end="5:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">tmplen</name> <init pos:start="7:16" pos:end="7:24">= <expr pos:start="7:18" pos:end="7:24"><name pos:start="7:18" pos:end="7:24">src_len</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:55"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">src</name></decl>, <decl pos:start="9:25" pos:end="9:54"><type ref="prev" pos:start="9:5" pos:end="9:19"><modifier pos:start="9:25" pos:end="9:25">*</modifier></type><name pos:start="9:26" pos:end="9:35">source_end</name> <init pos:start="9:37" pos:end="9:54">= <expr pos:start="9:39" pos:end="9:54"><name pos:start="9:39" pos:end="9:44">source</name> <operator pos:start="9:46" pos:end="9:46">+</operator> <name pos:start="9:48" pos:end="9:54">src_len</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:59"><decl pos:start="11:5" pos:end="11:58"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:22">frame_end</name> <init pos:start="11:24" pos:end="11:58">= <expr pos:start="11:26" pos:end="11:58"><name pos:start="11:26" pos:end="11:30">frame</name> <operator pos:start="11:32" pos:end="11:32">+</operator> <name pos:start="11:34" pos:end="11:44">SCREEN_WIDE</name> <operator pos:start="11:46" pos:end="11:46">*</operator> <name pos:start="11:48" pos:end="11:58">SCREEN_HIGH</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:16">dst</name></decl>, <decl pos:start="13:19" pos:end="13:26"><type ref="prev" pos:start="13:5" pos:end="13:13"><modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:26">dst_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">len</name></decl>, <decl pos:start="15:14" pos:end="15:17"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:14" pos:end="15:17">mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:66"><decl pos:start="17:5" pos:end="17:65"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:15">forward</name> <init pos:start="17:17" pos:end="17:65">= <expr pos:start="17:19" pos:end="17:65"><operator pos:start="17:19" pos:end="17:19">(</operator><name pos:start="17:20" pos:end="17:28">frame_off</name> <operator pos:start="17:30" pos:end="17:31">&lt;=</operator> <operator pos:start="17:33" pos:end="17:33">-</operator><name pos:start="17:34" pos:end="17:44">SCREEN_WIDE</name><operator pos:start="17:45" pos:end="17:45">)</operator> <operator pos:start="17:47" pos:end="17:48">||</operator> <operator pos:start="17:50" pos:end="17:50">(</operator><name pos:start="17:51" pos:end="17:59">frame_off</name> <operator pos:start="17:61" pos:end="17:62">&gt;=</operator> <literal type="number" pos:start="17:64" pos:end="17:64">0</literal><operator pos:start="17:65" pos:end="17:65">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:24">read_two_nibbles</name></decl>, <decl pos:start="19:27" pos:end="19:30"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:27" pos:end="19:30">flag</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:20">advance_mode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:17"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:12">mode</name> <init pos:start="23:14" pos:end="23:16">= <expr pos:start="23:16" pos:end="23:16"><literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:10"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="31:18"><if pos:start="29:5" pos:end="31:18">if <condition pos:start="29:8" pos:end="29:21">(<expr pos:start="29:9" pos:end="29:20"><name pos:start="29:9" pos:end="29:15">src_len</name> <operator pos:start="29:17" pos:end="29:18">&lt;=</operator> <literal type="number" pos:start="29:20" pos:end="29:20">0</literal></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:18"><block_content pos:start="31:9" pos:end="31:18">

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="51:5"><if pos:start="35:5" pos:end="43:5">if <condition pos:start="35:8" pos:end="35:16">(<expr pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:15">forward</name></expr>)</condition> <block pos:start="35:18" pos:end="43:5">{<block_content pos:start="37:9" pos:end="41:28">

        <expr_stmt pos:start="37:9" pos:end="37:21"><expr pos:start="37:9" pos:end="37:20"><name pos:start="37:9" pos:end="37:11">src</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <name pos:start="37:15" pos:end="37:20">source</name></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:20"><expr pos:start="39:9" pos:end="39:19"><name pos:start="39:9" pos:end="39:11">dst</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <name pos:start="39:15" pos:end="39:19">frame</name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:28"><expr pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:15">dst_end</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <name pos:start="41:19" pos:end="41:27">frame_end</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="43:7" pos:end="51:5">else <block pos:start="43:12" pos:end="51:5">{<block_content pos:start="45:9" pos:end="49:28">

        <expr_stmt pos:start="45:9" pos:end="45:35"><expr pos:start="45:9" pos:end="45:34"><name pos:start="45:9" pos:end="45:11">src</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <name pos:start="45:15" pos:end="45:20">source</name> <operator pos:start="45:22" pos:end="45:22">+</operator> <name pos:start="45:24" pos:end="45:30">src_len</name> <operator pos:start="45:32" pos:end="45:32">-</operator> <literal type="number" pos:start="45:34" pos:end="45:34">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:28"><expr pos:start="47:9" pos:end="47:27"><name pos:start="47:9" pos:end="47:11">dst</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <name pos:start="47:15" pos:end="47:23">frame_end</name> <operator pos:start="47:25" pos:end="47:25">-</operator> <literal type="number" pos:start="47:27" pos:end="47:27">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:28"><expr pos:start="49:9" pos:end="49:27"><name pos:start="49:9" pos:end="49:15">dst_end</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <name pos:start="49:19" pos:end="49:23">frame</name> <operator pos:start="49:25" pos:end="49:25">-</operator> <literal type="number" pos:start="49:27" pos:end="49:27">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <for pos:start="53:5" pos:end="269:5">for <control pos:start="53:9" pos:end="53:12">(<init pos:start="53:10" pos:end="53:10">;</init><condition pos:start="53:11" pos:end="53:11">;</condition><incr/>)</control> <block pos:start="53:14" pos:end="269:5">{<block_content pos:start="55:9" pos:end="267:21">

        <decl_stmt pos:start="55:9" pos:end="55:22"><decl pos:start="55:9" pos:end="55:21"><type pos:start="55:9" pos:end="55:11"><name pos:start="55:9" pos:end="55:11">int</name></type> <name pos:start="55:13" pos:end="55:17">shift</name> <init pos:start="55:19" pos:end="55:21">= <expr pos:start="55:21" pos:end="55:21"><literal type="number" pos:start="55:21" pos:end="55:21">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:17"><expr pos:start="57:9" pos:end="57:16"><name pos:start="57:9" pos:end="57:12">flag</name> <operator pos:start="57:14" pos:end="57:14">=</operator> <literal type="number" pos:start="57:16" pos:end="57:16">0</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="61:9" pos:end="73:11">/* The mode/len decoding is a bit strange:

         * values are coded as variable-length codes with nibble units,

         * code end is signalled by two top bits in the nibble being nonzero.

         * And since data is bytepacked and we read two nibbles at a time,

         * we may get a nibble belonging to the next code.

         * Hence this convoluted loop.

         */</comment>

        <if_stmt pos:start="75:9" pos:end="91:9"><if pos:start="75:9" pos:end="85:9">if <condition pos:start="75:12" pos:end="75:35">(<expr pos:start="75:13" pos:end="75:34"><operator pos:start="75:13" pos:end="75:13">!</operator><name pos:start="75:14" pos:end="75:17">mode</name> <operator pos:start="75:19" pos:end="75:20">||</operator> <operator pos:start="75:22" pos:end="75:22">(</operator><name pos:start="75:23" pos:end="75:28">tmplen</name> <operator pos:start="75:30" pos:end="75:31">==</operator> <literal type="number" pos:start="75:33" pos:end="75:33">4</literal><operator pos:start="75:34" pos:end="75:34">)</operator></expr>)</condition> <block pos:start="75:37" pos:end="85:9">{<block_content pos:start="77:13" pos:end="83:33">

            <if_stmt pos:start="77:13" pos:end="79:26"><if pos:start="77:13" pos:end="79:26">if <condition pos:start="77:16" pos:end="77:50">(<expr pos:start="77:17" pos:end="77:49"><name pos:start="77:17" pos:end="77:19">src</name> <operator pos:start="77:21" pos:end="77:21">&lt;</operator> <name pos:start="77:23" pos:end="77:28">source</name> <operator pos:start="77:30" pos:end="77:31">||</operator> <name pos:start="77:33" pos:end="77:35">src</name> <operator pos:start="77:37" pos:end="77:38">&gt;=</operator> <name pos:start="77:40" pos:end="77:49">source_end</name></expr>)</condition><block type="pseudo" pos:start="79:17" pos:end="79:26"><block_content pos:start="79:17" pos:end="79:26">

                <return pos:start="79:17" pos:end="79:26">return <expr pos:start="79:24" pos:end="79:25"><operator pos:start="79:24" pos:end="79:24">-</operator><literal type="number" pos:start="79:25" pos:end="79:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:23"><expr pos:start="81:13" pos:end="81:22"><name pos:start="81:13" pos:end="81:15">val</name> <operator pos:start="81:17" pos:end="81:17">=</operator> <operator pos:start="81:19" pos:end="81:19">*</operator><name pos:start="81:20" pos:end="81:22">src</name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:33"><expr pos:start="83:13" pos:end="83:32"><name pos:start="83:13" pos:end="83:28">read_two_nibbles</name> <operator pos:start="83:30" pos:end="83:30">=</operator> <literal type="number" pos:start="83:32" pos:end="83:32">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="85:11" pos:end="91:9">else <block pos:start="85:16" pos:end="91:9">{<block_content pos:start="87:13" pos:end="89:33">

            <expr_stmt pos:start="87:13" pos:end="87:28"><expr pos:start="87:13" pos:end="87:27"><name pos:start="87:13" pos:end="87:15">val</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <name pos:start="87:19" pos:end="87:27">saved_val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:33"><expr pos:start="89:13" pos:end="89:32"><name pos:start="89:13" pos:end="89:28">read_two_nibbles</name> <operator pos:start="89:30" pos:end="89:30">=</operator> <literal type="number" pos:start="89:32" pos:end="89:32">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="93:9" pos:end="141:9"><if pos:start="93:9" pos:end="137:9">if <condition pos:start="93:12" pos:end="93:25">(<expr pos:start="93:13" pos:end="93:24"><operator pos:start="93:13" pos:end="93:13">!</operator><operator pos:start="93:14" pos:end="93:14">(</operator><name pos:start="93:15" pos:end="93:17">val</name> <operator pos:start="93:19" pos:end="93:19">&amp;</operator> <literal type="number" pos:start="93:21" pos:end="93:23">0xC</literal><operator pos:start="93:24" pos:end="93:24">)</operator></expr>)</condition> <block pos:start="93:27" pos:end="137:9">{<block_content pos:start="95:13" pos:end="135:13">

            <for pos:start="95:13" pos:end="135:13">for <control pos:start="95:17" pos:end="95:20">(<init pos:start="95:18" pos:end="95:18">;</init><condition pos:start="95:19" pos:end="95:19">;</condition><incr/>)</control> <block pos:start="95:22" pos:end="135:13">{<block_content pos:start="97:17" pos:end="133:17">

                <if_stmt pos:start="97:17" pos:end="111:17"><if pos:start="97:17" pos:end="111:17">if <condition pos:start="97:20" pos:end="97:38">(<expr pos:start="97:21" pos:end="97:37"><operator pos:start="97:21" pos:end="97:21">!</operator><name pos:start="97:22" pos:end="97:37">read_two_nibbles</name></expr>)</condition> <block pos:start="97:40" pos:end="111:17">{<block_content pos:start="99:21" pos:end="109:30">

                    <if_stmt pos:start="99:21" pos:end="101:34"><if pos:start="99:21" pos:end="101:34">if <condition pos:start="99:24" pos:end="99:58">(<expr pos:start="99:25" pos:end="99:57"><name pos:start="99:25" pos:end="99:27">src</name> <operator pos:start="99:29" pos:end="99:29">&lt;</operator> <name pos:start="99:31" pos:end="99:36">source</name> <operator pos:start="99:38" pos:end="99:39">||</operator> <name pos:start="99:41" pos:end="99:43">src</name> <operator pos:start="99:45" pos:end="99:46">&gt;=</operator> <name pos:start="99:48" pos:end="99:57">source_end</name></expr>)</condition><block type="pseudo" pos:start="101:25" pos:end="101:34"><block_content pos:start="101:25" pos:end="101:34">

                        <return pos:start="101:25" pos:end="101:34">return <expr pos:start="101:32" pos:end="101:33"><operator pos:start="101:32" pos:end="101:32">-</operator><literal type="number" pos:start="101:33" pos:end="101:33">1</literal></expr>;</return></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="103:21" pos:end="103:31"><expr pos:start="103:21" pos:end="103:30"><name pos:start="103:21" pos:end="103:25">shift</name> <operator pos:start="103:27" pos:end="103:28">+=</operator> <literal type="number" pos:start="103:30" pos:end="103:30">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="105:21" pos:end="105:41"><expr pos:start="105:21" pos:end="105:40"><name pos:start="105:21" pos:end="105:23">val</name> <operator pos:start="105:25" pos:end="105:26">|=</operator> <operator pos:start="105:28" pos:end="105:28">*</operator><name pos:start="105:29" pos:end="105:31">src</name> <operator pos:start="105:33" pos:end="105:34">&lt;&lt;</operator> <name pos:start="105:36" pos:end="105:40">shift</name></expr>;</expr_stmt>

                    <if_stmt pos:start="107:21" pos:end="109:30"><if pos:start="107:21" pos:end="109:30">if <condition pos:start="107:24" pos:end="107:35">(<expr pos:start="107:25" pos:end="107:34"><operator pos:start="107:25" pos:end="107:25">*</operator><name pos:start="107:26" pos:end="107:28">src</name> <operator pos:start="107:30" pos:end="107:30">&amp;</operator> <literal type="number" pos:start="107:32" pos:end="107:34">0xC</literal></expr>)</condition><block type="pseudo" pos:start="109:25" pos:end="109:30"><block_content pos:start="109:25" pos:end="109:30">

                        <break pos:start="109:25" pos:end="109:30">break;</break></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <comment type="line" pos:start="113:17" pos:end="113:56">// two upper bits of the nibble is zero,</comment>

                <comment type="line" pos:start="115:17" pos:end="115:66">// so shift top nibble value down into their place</comment>

                <expr_stmt pos:start="117:17" pos:end="117:37"><expr pos:start="117:17" pos:end="117:36"><name pos:start="117:17" pos:end="117:32">read_two_nibbles</name> <operator pos:start="117:34" pos:end="117:34">=</operator> <literal type="number" pos:start="117:36" pos:end="117:36">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="119:17" pos:end="119:27"><expr pos:start="119:17" pos:end="119:26"><name pos:start="119:17" pos:end="119:21">shift</name> <operator pos:start="119:23" pos:end="119:24">+=</operator> <literal type="number" pos:start="119:26" pos:end="119:26">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="121:17" pos:end="121:40"><expr pos:start="121:17" pos:end="121:39"><name pos:start="121:17" pos:end="121:20">mask</name> <operator pos:start="121:22" pos:end="121:22">=</operator> <operator pos:start="121:24" pos:end="121:24">(</operator><literal type="number" pos:start="121:25" pos:end="121:25">1</literal> <operator pos:start="121:27" pos:end="121:28">&lt;&lt;</operator> <name pos:start="121:30" pos:end="121:34">shift</name><operator pos:start="121:35" pos:end="121:35">)</operator> <operator pos:start="121:37" pos:end="121:37">-</operator> <literal type="number" pos:start="121:39" pos:end="121:39">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="123:17" pos:end="123:58"><expr pos:start="123:17" pos:end="123:57"><name pos:start="123:17" pos:end="123:19">val</name> <operator pos:start="123:21" pos:end="123:21">=</operator> <operator pos:start="123:23" pos:end="123:23">(</operator><operator pos:start="123:24" pos:end="123:24">(</operator><name pos:start="123:25" pos:end="123:27">val</name> <operator pos:start="123:29" pos:end="123:30">&gt;&gt;</operator> <literal type="number" pos:start="123:32" pos:end="123:32">2</literal><operator pos:start="123:33" pos:end="123:33">)</operator> <operator pos:start="123:35" pos:end="123:35">&amp;</operator> <operator pos:start="123:37" pos:end="123:37">~</operator><name pos:start="123:38" pos:end="123:41">mask</name><operator pos:start="123:42" pos:end="123:42">)</operator> <operator pos:start="123:44" pos:end="123:44">|</operator> <operator pos:start="123:46" pos:end="123:46">(</operator><name pos:start="123:47" pos:end="123:49">val</name> <operator pos:start="123:51" pos:end="123:51">&amp;</operator> <name pos:start="123:53" pos:end="123:56">mask</name><operator pos:start="123:57" pos:end="123:57">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="125:17" pos:end="125:31"><expr pos:start="125:17" pos:end="125:30"><call pos:start="125:17" pos:end="125:30"><name pos:start="125:17" pos:end="125:25">NEXT_BYTE</name><argument_list pos:start="125:26" pos:end="125:30">(<argument pos:start="125:27" pos:end="125:29"><expr pos:start="125:27" pos:end="125:29"><name pos:start="125:27" pos:end="125:29">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="127:17" pos:end="133:17"><if pos:start="127:17" pos:end="133:17">if <condition pos:start="127:20" pos:end="127:43">(<expr pos:start="127:21" pos:end="127:42"><operator pos:start="127:21" pos:end="127:21">(</operator><name pos:start="127:22" pos:end="127:24">val</name> <operator pos:start="127:26" pos:end="127:26">&amp;</operator> <operator pos:start="127:28" pos:end="127:28">(</operator><literal type="number" pos:start="127:29" pos:end="127:31">0xC</literal> <operator pos:start="127:33" pos:end="127:34">&lt;&lt;</operator> <name pos:start="127:36" pos:end="127:40">shift</name><operator pos:start="127:41" pos:end="127:41">)</operator><operator pos:start="127:42" pos:end="127:42">)</operator></expr>)</condition> <block pos:start="127:45" pos:end="133:17">{<block_content pos:start="129:21" pos:end="131:26">

                    <expr_stmt pos:start="129:21" pos:end="129:29"><expr pos:start="129:21" pos:end="129:28"><name pos:start="129:21" pos:end="129:24">flag</name> <operator pos:start="129:26" pos:end="129:26">=</operator> <literal type="number" pos:start="129:28" pos:end="129:28">1</literal></expr>;</expr_stmt>

                    <break pos:start="131:21" pos:end="131:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <if type="elseif" pos:start="137:11" pos:end="141:9">else if <condition pos:start="137:19" pos:end="137:24">(<expr pos:start="137:20" pos:end="137:23"><name pos:start="137:20" pos:end="137:23">mode</name></expr>)</condition> <block pos:start="137:26" pos:end="141:9">{<block_content pos:start="139:13" pos:end="139:31">

            <expr_stmt pos:start="139:13" pos:end="139:31"><expr pos:start="139:13" pos:end="139:30"><name pos:start="139:13" pos:end="139:16">flag</name> <operator pos:start="139:18" pos:end="139:18">=</operator> <name pos:start="139:20" pos:end="139:25">tmplen</name> <operator pos:start="139:27" pos:end="139:28">!=</operator> <literal type="number" pos:start="139:30" pos:end="139:30">4</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="143:9" pos:end="157:9"><if pos:start="143:9" pos:end="147:9">if <condition pos:start="143:12" pos:end="143:17">(<expr pos:start="143:13" pos:end="143:16"><name pos:start="143:13" pos:end="143:16">flag</name></expr>)</condition> <block pos:start="143:19" pos:end="147:9">{<block_content pos:start="145:13" pos:end="145:23">

            <expr_stmt pos:start="145:13" pos:end="145:23"><expr pos:start="145:13" pos:end="145:22"><name pos:start="145:13" pos:end="145:18">tmplen</name> <operator pos:start="145:20" pos:end="145:20">=</operator> <literal type="number" pos:start="145:22" pos:end="145:22">4</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="147:11" pos:end="157:9">else <block pos:start="147:16" pos:end="157:9">{<block_content pos:start="149:13" pos:end="155:27">

            <expr_stmt pos:start="149:13" pos:end="149:43"><expr pos:start="149:13" pos:end="149:42"><name pos:start="149:13" pos:end="149:21">saved_val</name> <operator pos:start="149:23" pos:end="149:23">=</operator> <name pos:start="149:25" pos:end="149:27">val</name> <operator pos:start="149:29" pos:end="149:30">&gt;&gt;</operator> <operator pos:start="149:32" pos:end="149:32">(</operator><literal type="number" pos:start="149:33" pos:end="149:35">4</literal> <operator pos:start="149:35" pos:end="149:35">+</operator> <name pos:start="149:37" pos:end="149:41">shift</name><operator pos:start="149:42" pos:end="149:42">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:23"><expr pos:start="151:13" pos:end="151:22"><name pos:start="151:13" pos:end="151:18">tmplen</name> <operator pos:start="151:20" pos:end="151:20">=</operator> <literal type="number" pos:start="151:22" pos:end="151:22">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:42"><expr pos:start="153:13" pos:end="153:41"><name pos:start="153:13" pos:end="153:15">val</name> <operator pos:start="153:17" pos:end="153:18">&amp;=</operator> <operator pos:start="153:20" pos:end="153:20">(</operator><literal type="number" pos:start="153:21" pos:end="153:21">1</literal> <operator pos:start="153:23" pos:end="153:24">&lt;&lt;</operator> <operator pos:start="153:26" pos:end="153:26">(</operator><name pos:start="153:27" pos:end="153:31">shift</name> <operator pos:start="153:33" pos:end="153:33">+</operator> <literal type="number" pos:start="153:35" pos:end="153:35">4</literal><operator pos:start="153:36" pos:end="153:36">)</operator><operator pos:start="153:37" pos:end="153:37">)</operator> <operator pos:start="153:39" pos:end="153:39">-</operator> <literal type="number" pos:start="153:41" pos:end="153:41">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:27"><expr pos:start="155:13" pos:end="155:26"><call pos:start="155:13" pos:end="155:26"><name pos:start="155:13" pos:end="155:21">NEXT_BYTE</name><argument_list pos:start="155:22" pos:end="155:26">(<argument pos:start="155:23" pos:end="155:25"><expr pos:start="155:23" pos:end="155:25"><name pos:start="155:23" pos:end="155:25">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:31"><expr pos:start="159:9" pos:end="159:30"><name pos:start="159:9" pos:end="159:20">advance_mode</name> <operator pos:start="159:22" pos:end="159:22">=</operator> <name pos:start="159:24" pos:end="159:26">val</name> <operator pos:start="159:28" pos:end="159:28">&amp;</operator> <literal type="number" pos:start="159:30" pos:end="159:30">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:29"><expr pos:start="161:9" pos:end="161:28"><name pos:start="161:9" pos:end="161:11">len</name> <operator pos:start="161:13" pos:end="161:13">=</operator> <operator pos:start="161:15" pos:end="161:15">(</operator><name pos:start="161:16" pos:end="161:18">val</name> <operator pos:start="161:20" pos:end="161:21">&gt;&gt;</operator> <literal type="number" pos:start="161:23" pos:end="161:23">1</literal><operator pos:start="161:24" pos:end="161:24">)</operator> <operator pos:start="161:26" pos:end="161:26">-</operator> <literal type="number" pos:start="161:28" pos:end="161:28">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:33"><expr pos:start="163:9" pos:end="163:32"><name pos:start="163:9" pos:end="163:12">mode</name> <operator pos:start="163:14" pos:end="163:15">+=</operator> <literal type="number" pos:start="163:17" pos:end="163:19">1</literal> <operator pos:start="163:19" pos:end="163:19">+</operator> <name pos:start="163:21" pos:end="163:32">advance_mode</name></expr>;</expr_stmt>

        <if_stmt pos:start="165:9" pos:end="167:22"><if pos:start="165:9" pos:end="167:22">if <condition pos:start="165:12" pos:end="165:22">(<expr pos:start="165:13" pos:end="165:21"><name pos:start="165:13" pos:end="165:16">mode</name> <operator pos:start="165:18" pos:end="165:19">&gt;=</operator> <literal type="number" pos:start="165:21" pos:end="165:21">4</literal></expr>)</condition><block type="pseudo" pos:start="167:13" pos:end="167:22"><block_content pos:start="167:13" pos:end="167:22">

            <expr_stmt pos:start="167:13" pos:end="167:22"><expr pos:start="167:13" pos:end="167:21"><name pos:start="167:13" pos:end="167:16">mode</name> <operator pos:start="167:18" pos:end="167:19">-=</operator> <literal type="number" pos:start="167:21" pos:end="167:21">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="169:9" pos:end="171:22"><if pos:start="169:9" pos:end="171:22">if <condition pos:start="169:12" pos:end="169:39">(<expr pos:start="169:13" pos:end="169:38"><call pos:start="169:13" pos:end="169:32"><name pos:start="169:13" pos:end="169:17">FFABS</name><argument_list pos:start="169:18" pos:end="169:32">(<argument pos:start="169:19" pos:end="169:31"><expr pos:start="169:19" pos:end="169:31"><name pos:start="169:19" pos:end="169:25">dst_end</name> <operator pos:start="169:27" pos:end="169:27">-</operator> <name pos:start="169:29" pos:end="169:31">dst</name></expr></argument>)</argument_list></call> <operator pos:start="169:34" pos:end="169:34">&lt;</operator> <name pos:start="169:36" pos:end="169:38">len</name></expr>)</condition><block type="pseudo" pos:start="171:13" pos:end="171:22"><block_content pos:start="171:13" pos:end="171:22">

            <return pos:start="171:13" pos:end="171:22">return <expr pos:start="171:20" pos:end="171:21"><operator pos:start="171:20" pos:end="171:20">-</operator><literal type="number" pos:start="171:21" pos:end="171:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <switch pos:start="173:9" pos:end="263:9">switch <condition pos:start="173:16" pos:end="173:21">(<expr pos:start="173:17" pos:end="173:20"><name pos:start="173:17" pos:end="173:20">mode</name></expr>)</condition> <block pos:start="173:23" pos:end="263:9">{<block_content pos:start="175:9" pos:end="261:18">

        <case pos:start="175:9" pos:end="175:15">case <expr pos:start="175:14" pos:end="175:14"><literal type="number" pos:start="175:14" pos:end="175:14">1</literal></expr>:</case>

            <if_stmt pos:start="177:13" pos:end="205:13"><if pos:start="177:13" pos:end="191:13">if <condition pos:start="177:16" pos:end="177:24">(<expr pos:start="177:17" pos:end="177:23"><name pos:start="177:17" pos:end="177:23">forward</name></expr>)</condition> <block pos:start="177:26" pos:end="191:13">{<block_content pos:start="179:17" pos:end="189:27">

                <if_stmt pos:start="179:17" pos:end="183:30"><if pos:start="179:17" pos:end="183:30">if <condition pos:start="179:20" pos:end="181:58">(<expr pos:start="179:21" pos:end="181:57"><name pos:start="179:21" pos:end="179:23">dst</name> <operator pos:start="179:25" pos:end="179:25">-</operator> <name pos:start="179:27" pos:end="179:31">frame</name> <operator pos:start="179:33" pos:end="179:33">+</operator> <name pos:start="179:35" pos:end="179:45">SCREEN_WIDE</name> <operator pos:start="179:47" pos:end="179:47">&lt;</operator> <name pos:start="179:49" pos:end="179:57">frame_off</name> <operator pos:start="179:59" pos:end="179:60">||</operator>

                        <name pos:start="181:25" pos:end="181:33">frame_end</name> <operator pos:start="181:35" pos:end="181:35">-</operator> <name pos:start="181:37" pos:end="181:39">dst</name> <operator pos:start="181:41" pos:end="181:41">&lt;</operator> <name pos:start="181:43" pos:end="181:51">frame_off</name> <operator pos:start="181:53" pos:end="181:53">+</operator> <name pos:start="181:55" pos:end="181:57">len</name></expr>)</condition><block type="pseudo" pos:start="183:21" pos:end="183:30"><block_content pos:start="183:21" pos:end="183:30">

                    <return pos:start="183:21" pos:end="183:30">return <expr pos:start="183:28" pos:end="183:29"><operator pos:start="183:28" pos:end="183:28">-</operator><literal type="number" pos:start="183:29" pos:end="183:29">1</literal></expr>;</return></block_content></block></if></if_stmt>

                <for pos:start="185:17" pos:end="187:48">for <control pos:start="185:21" pos:end="185:41">(<init pos:start="185:22" pos:end="185:27"><expr pos:start="185:22" pos:end="185:26"><name pos:start="185:22" pos:end="185:22">i</name> <operator pos:start="185:24" pos:end="185:24">=</operator> <literal type="number" pos:start="185:26" pos:end="185:26">0</literal></expr>;</init> <condition pos:start="185:29" pos:end="185:36"><expr pos:start="185:29" pos:end="185:35"><name pos:start="185:29" pos:end="185:29">i</name> <operator pos:start="185:31" pos:end="185:31">&lt;</operator> <name pos:start="185:33" pos:end="185:35">len</name></expr>;</condition> <incr pos:start="185:38" pos:end="185:40"><expr pos:start="185:38" pos:end="185:40"><name pos:start="185:38" pos:end="185:38">i</name><operator pos:start="185:39" pos:end="185:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="187:21" pos:end="187:48"><block_content pos:start="187:21" pos:end="187:48">

                    <expr_stmt pos:start="187:21" pos:end="187:48"><expr pos:start="187:21" pos:end="187:47"><name pos:start="187:21" pos:end="187:26"><name pos:start="187:21" pos:end="187:23">dst</name><index pos:start="187:24" pos:end="187:26">[<expr pos:start="187:25" pos:end="187:25"><name pos:start="187:25" pos:end="187:25">i</name></expr>]</index></name> <operator pos:start="187:28" pos:end="187:28">=</operator> <name pos:start="187:30" pos:end="187:47"><name pos:start="187:30" pos:end="187:32">dst</name><index pos:start="187:33" pos:end="187:47">[<expr pos:start="187:34" pos:end="187:46"><name pos:start="187:34" pos:end="187:42">frame_off</name> <operator pos:start="187:44" pos:end="187:44">+</operator> <name pos:start="187:46" pos:end="187:46">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="189:17" pos:end="189:27"><expr pos:start="189:17" pos:end="189:26"><name pos:start="189:17" pos:end="189:19">dst</name> <operator pos:start="189:21" pos:end="189:22">+=</operator> <name pos:start="189:24" pos:end="189:26">len</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="191:15" pos:end="205:13">else <block pos:start="191:20" pos:end="205:13">{<block_content pos:start="193:17" pos:end="203:48">

                <expr_stmt pos:start="193:17" pos:end="193:27"><expr pos:start="193:17" pos:end="193:26"><name pos:start="193:17" pos:end="193:19">dst</name> <operator pos:start="193:21" pos:end="193:22">-=</operator> <name pos:start="193:24" pos:end="193:26">len</name></expr>;</expr_stmt>

                <if_stmt pos:start="195:17" pos:end="199:30"><if pos:start="195:17" pos:end="199:30">if <condition pos:start="195:20" pos:end="197:58">(<expr pos:start="195:21" pos:end="197:57"><name pos:start="195:21" pos:end="195:23">dst</name> <operator pos:start="195:25" pos:end="195:25">-</operator> <name pos:start="195:27" pos:end="195:31">frame</name> <operator pos:start="195:33" pos:end="195:33">+</operator> <name pos:start="195:35" pos:end="195:45">SCREEN_WIDE</name> <operator pos:start="195:47" pos:end="195:47">&lt;</operator> <name pos:start="195:49" pos:end="195:57">frame_off</name> <operator pos:start="195:59" pos:end="195:60">||</operator>

                        <name pos:start="197:25" pos:end="197:33">frame_end</name> <operator pos:start="197:35" pos:end="197:35">-</operator> <name pos:start="197:37" pos:end="197:39">dst</name> <operator pos:start="197:41" pos:end="197:41">&lt;</operator> <name pos:start="197:43" pos:end="197:51">frame_off</name> <operator pos:start="197:53" pos:end="197:53">+</operator> <name pos:start="197:55" pos:end="197:57">len</name></expr>)</condition><block type="pseudo" pos:start="199:21" pos:end="199:30"><block_content pos:start="199:21" pos:end="199:30">

                    <return pos:start="199:21" pos:end="199:30">return <expr pos:start="199:28" pos:end="199:29"><operator pos:start="199:28" pos:end="199:28">-</operator><literal type="number" pos:start="199:29" pos:end="199:29">1</literal></expr>;</return></block_content></block></if></if_stmt>

                <for pos:start="201:17" pos:end="203:48">for <control pos:start="201:21" pos:end="201:46">(<init pos:start="201:22" pos:end="201:33"><expr pos:start="201:22" pos:end="201:32"><name pos:start="201:22" pos:end="201:22">i</name> <operator pos:start="201:24" pos:end="201:24">=</operator> <name pos:start="201:26" pos:end="201:28">len</name> <operator pos:start="201:30" pos:end="201:30">-</operator> <literal type="number" pos:start="201:32" pos:end="201:32">1</literal></expr>;</init> <condition pos:start="201:35" pos:end="201:41"><expr pos:start="201:35" pos:end="201:40"><name pos:start="201:35" pos:end="201:35">i</name> <operator pos:start="201:37" pos:end="201:38">&gt;=</operator> <literal type="number" pos:start="201:40" pos:end="201:40">0</literal></expr>;</condition> <incr pos:start="201:43" pos:end="201:45"><expr pos:start="201:43" pos:end="201:45"><name pos:start="201:43" pos:end="201:43">i</name><operator pos:start="201:44" pos:end="201:45">--</operator></expr></incr>)</control><block type="pseudo" pos:start="203:21" pos:end="203:48"><block_content pos:start="203:21" pos:end="203:48">

                    <expr_stmt pos:start="203:21" pos:end="203:48"><expr pos:start="203:21" pos:end="203:47"><name pos:start="203:21" pos:end="203:26"><name pos:start="203:21" pos:end="203:23">dst</name><index pos:start="203:24" pos:end="203:26">[<expr pos:start="203:25" pos:end="203:25"><name pos:start="203:25" pos:end="203:25">i</name></expr>]</index></name> <operator pos:start="203:28" pos:end="203:28">=</operator> <name pos:start="203:30" pos:end="203:47"><name pos:start="203:30" pos:end="203:32">dst</name><index pos:start="203:33" pos:end="203:47">[<expr pos:start="203:34" pos:end="203:46"><name pos:start="203:34" pos:end="203:42">frame_off</name> <operator pos:start="203:44" pos:end="203:44">+</operator> <name pos:start="203:46" pos:end="203:46">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></else></if_stmt>

            <break pos:start="207:13" pos:end="207:18">break;</break>

        <case pos:start="209:9" pos:end="209:15">case <expr pos:start="209:14" pos:end="209:14"><literal type="number" pos:start="209:14" pos:end="209:14">2</literal></expr>:</case>

            <if_stmt pos:start="211:13" pos:end="235:13"><if pos:start="211:13" pos:end="223:13">if <condition pos:start="211:16" pos:end="211:24">(<expr pos:start="211:17" pos:end="211:23"><name pos:start="211:17" pos:end="211:23">forward</name></expr>)</condition> <block pos:start="211:26" pos:end="223:13">{<block_content pos:start="213:17" pos:end="221:27">

                <if_stmt pos:start="213:17" pos:end="215:30"><if pos:start="213:17" pos:end="215:30">if <condition pos:start="213:20" pos:end="213:49">(<expr pos:start="213:21" pos:end="213:48"><name pos:start="213:21" pos:end="213:26">source</name> <operator pos:start="213:28" pos:end="213:28">+</operator> <name pos:start="213:30" pos:end="213:36">src_len</name> <operator pos:start="213:38" pos:end="213:38">-</operator> <name pos:start="213:40" pos:end="213:42">src</name> <operator pos:start="213:44" pos:end="213:44">&lt;</operator> <name pos:start="213:46" pos:end="213:48">len</name></expr>)</condition><block type="pseudo" pos:start="215:21" pos:end="215:30"><block_content pos:start="215:21" pos:end="215:30">

                    <return pos:start="215:21" pos:end="215:30">return <expr pos:start="215:28" pos:end="215:29"><operator pos:start="215:28" pos:end="215:28">-</operator><literal type="number" pos:start="215:29" pos:end="215:29">1</literal></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="217:17" pos:end="217:38"><expr pos:start="217:17" pos:end="217:37"><call pos:start="217:17" pos:end="217:37"><name pos:start="217:17" pos:end="217:22">memcpy</name><argument_list pos:start="217:23" pos:end="217:37">(<argument pos:start="217:24" pos:end="217:26"><expr pos:start="217:24" pos:end="217:26"><name pos:start="217:24" pos:end="217:26">dst</name></expr></argument>, <argument pos:start="217:29" pos:end="217:31"><expr pos:start="217:29" pos:end="217:31"><name pos:start="217:29" pos:end="217:31">src</name></expr></argument>, <argument pos:start="217:34" pos:end="217:36"><expr pos:start="217:34" pos:end="217:36"><name pos:start="217:34" pos:end="217:36">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="219:17" pos:end="219:27"><expr pos:start="219:17" pos:end="219:26"><name pos:start="219:17" pos:end="219:19">dst</name> <operator pos:start="219:21" pos:end="219:22">+=</operator> <name pos:start="219:24" pos:end="219:26">len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="221:17" pos:end="221:27"><expr pos:start="221:17" pos:end="221:26"><name pos:start="221:17" pos:end="221:19">src</name> <operator pos:start="221:21" pos:end="221:22">+=</operator> <name pos:start="221:24" pos:end="221:26">len</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="223:15" pos:end="235:13">else <block pos:start="223:20" pos:end="235:13">{<block_content pos:start="225:17" pos:end="233:38">

                <if_stmt pos:start="225:17" pos:end="227:30"><if pos:start="225:17" pos:end="227:30">if <condition pos:start="225:20" pos:end="225:39">(<expr pos:start="225:21" pos:end="225:38"><name pos:start="225:21" pos:end="225:23">src</name> <operator pos:start="225:25" pos:end="225:25">-</operator> <name pos:start="225:27" pos:end="225:32">source</name> <operator pos:start="225:34" pos:end="225:34">&lt;</operator> <name pos:start="225:36" pos:end="225:38">len</name></expr>)</condition><block type="pseudo" pos:start="227:21" pos:end="227:30"><block_content pos:start="227:21" pos:end="227:30">

                    <return pos:start="227:21" pos:end="227:30">return <expr pos:start="227:28" pos:end="227:29"><operator pos:start="227:28" pos:end="227:28">-</operator><literal type="number" pos:start="227:29" pos:end="227:29">1</literal></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="229:17" pos:end="229:27"><expr pos:start="229:17" pos:end="229:26"><name pos:start="229:17" pos:end="229:19">dst</name> <operator pos:start="229:21" pos:end="229:22">-=</operator> <name pos:start="229:24" pos:end="229:26">len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="231:17" pos:end="231:27"><expr pos:start="231:17" pos:end="231:26"><name pos:start="231:17" pos:end="231:19">src</name> <operator pos:start="231:21" pos:end="231:22">-=</operator> <name pos:start="231:24" pos:end="231:26">len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="233:17" pos:end="233:38"><expr pos:start="233:17" pos:end="233:37"><call pos:start="233:17" pos:end="233:37"><name pos:start="233:17" pos:end="233:22">memcpy</name><argument_list pos:start="233:23" pos:end="233:37">(<argument pos:start="233:24" pos:end="233:26"><expr pos:start="233:24" pos:end="233:26"><name pos:start="233:24" pos:end="233:26">dst</name></expr></argument>, <argument pos:start="233:29" pos:end="233:31"><expr pos:start="233:29" pos:end="233:31"><name pos:start="233:29" pos:end="233:31">src</name></expr></argument>, <argument pos:start="233:34" pos:end="233:36"><expr pos:start="233:34" pos:end="233:36"><name pos:start="233:34" pos:end="233:36">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="237:13" pos:end="237:18">break;</break>

        <case pos:start="239:9" pos:end="239:15">case <expr pos:start="239:14" pos:end="239:14"><literal type="number" pos:start="239:14" pos:end="239:14">3</literal></expr>:</case>

            <expr_stmt pos:start="241:13" pos:end="241:45"><expr pos:start="241:13" pos:end="241:44"><name pos:start="241:13" pos:end="241:15">val</name> <operator pos:start="241:17" pos:end="241:17">=</operator> <ternary pos:start="241:19" pos:end="241:44"><condition pos:start="241:19" pos:end="241:27"><expr pos:start="241:19" pos:end="241:25"><name pos:start="241:19" pos:end="241:25">forward</name></expr> ?</condition><then pos:start="241:29" pos:end="241:35"> <expr pos:start="241:29" pos:end="241:35"><name pos:start="241:29" pos:end="241:35"><name pos:start="241:29" pos:end="241:31">dst</name><index pos:start="241:32" pos:end="241:35">[<expr pos:start="241:33" pos:end="241:34"><operator pos:start="241:33" pos:end="241:33">-</operator><literal type="number" pos:start="241:34" pos:end="241:34">1</literal></expr>]</index></name></expr> </then><else pos:start="241:37" pos:end="241:44">: <expr pos:start="241:39" pos:end="241:44"><name pos:start="241:39" pos:end="241:44"><name pos:start="241:39" pos:end="241:41">dst</name><index pos:start="241:42" pos:end="241:44">[<expr pos:start="241:43" pos:end="241:43"><literal type="number" pos:start="241:43" pos:end="241:43">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

            <if_stmt pos:start="243:13" pos:end="255:13"><if pos:start="243:13" pos:end="249:13">if <condition pos:start="243:16" pos:end="243:24">(<expr pos:start="243:17" pos:end="243:23"><name pos:start="243:17" pos:end="243:23">forward</name></expr>)</condition> <block pos:start="243:26" pos:end="249:13">{<block_content pos:start="245:17" pos:end="247:27">

                <expr_stmt pos:start="245:17" pos:end="245:38"><expr pos:start="245:17" pos:end="245:37"><call pos:start="245:17" pos:end="245:37"><name pos:start="245:17" pos:end="245:22">memset</name><argument_list pos:start="245:23" pos:end="245:37">(<argument pos:start="245:24" pos:end="245:26"><expr pos:start="245:24" pos:end="245:26"><name pos:start="245:24" pos:end="245:26">dst</name></expr></argument>, <argument pos:start="245:29" pos:end="245:31"><expr pos:start="245:29" pos:end="245:31"><name pos:start="245:29" pos:end="245:31">val</name></expr></argument>, <argument pos:start="245:34" pos:end="245:36"><expr pos:start="245:34" pos:end="245:36"><name pos:start="245:34" pos:end="245:36">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="247:17" pos:end="247:27"><expr pos:start="247:17" pos:end="247:26"><name pos:start="247:17" pos:end="247:19">dst</name> <operator pos:start="247:21" pos:end="247:22">+=</operator> <name pos:start="247:24" pos:end="247:26">len</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="249:15" pos:end="255:13">else <block pos:start="249:20" pos:end="255:13">{<block_content pos:start="251:17" pos:end="253:38">

                <expr_stmt pos:start="251:17" pos:end="251:27"><expr pos:start="251:17" pos:end="251:26"><name pos:start="251:17" pos:end="251:19">dst</name> <operator pos:start="251:21" pos:end="251:22">-=</operator> <name pos:start="251:24" pos:end="251:26">len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="253:17" pos:end="253:38"><expr pos:start="253:17" pos:end="253:37"><call pos:start="253:17" pos:end="253:37"><name pos:start="253:17" pos:end="253:22">memset</name><argument_list pos:start="253:23" pos:end="253:37">(<argument pos:start="253:24" pos:end="253:26"><expr pos:start="253:24" pos:end="253:26"><name pos:start="253:24" pos:end="253:26">dst</name></expr></argument>, <argument pos:start="253:29" pos:end="253:31"><expr pos:start="253:29" pos:end="253:31"><name pos:start="253:29" pos:end="253:31">val</name></expr></argument>, <argument pos:start="253:34" pos:end="253:36"><expr pos:start="253:34" pos:end="253:36"><name pos:start="253:34" pos:end="253:36">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="257:13" pos:end="257:18">break;</break>

        <default pos:start="259:9" pos:end="259:16">default:</default>

            <break pos:start="261:13" pos:end="261:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="265:9" pos:end="267:21"><if pos:start="265:9" pos:end="267:21">if <condition pos:start="265:12" pos:end="265:27">(<expr pos:start="265:13" pos:end="265:26"><name pos:start="265:13" pos:end="265:15">dst</name> <operator pos:start="265:17" pos:end="265:18">==</operator> <name pos:start="265:20" pos:end="265:26">dst_end</name></expr>)</condition><block type="pseudo" pos:start="267:13" pos:end="267:21"><block_content pos:start="267:13" pos:end="267:21">

            <return pos:start="267:13" pos:end="267:21">return <expr pos:start="267:20" pos:end="267:20"><literal type="number" pos:start="267:20" pos:end="267:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    <return pos:start="271:5" pos:end="271:13">return <expr pos:start="271:12" pos:end="271:12"><literal type="number" pos:start="271:12" pos:end="271:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
