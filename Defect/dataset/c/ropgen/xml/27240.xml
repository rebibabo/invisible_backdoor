<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27240.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int64_t</name></type> <name pos:start="1:16" pos:end="1:25">expr_unary</name><parameter_list pos:start="1:26" pos:end="1:39">(<parameter pos:start="1:27" pos:end="1:38"><decl pos:start="1:27" pos:end="1:38"><type pos:start="1:27" pos:end="1:35"><name pos:start="1:27" pos:end="1:33">Monitor</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">mon</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="161:1">{<block_content pos:start="5:5" pos:end="159:13">

    <decl_stmt pos:start="5:5" pos:end="5:14"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:13">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:11">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <switch pos:start="13:5" pos:end="157:5">switch<condition pos:start="13:11" pos:end="13:16">(<expr pos:start="13:12" pos:end="13:15"><operator pos:start="13:12" pos:end="13:12">*</operator><name pos:start="13:13" pos:end="13:15">pch</name></expr>)</condition> <block pos:start="13:18" pos:end="157:5">{<block_content pos:start="15:5" pos:end="155:14">

    <case pos:start="15:5" pos:end="15:13">case <expr pos:start="15:10" pos:end="15:12"><literal type="char" pos:start="15:10" pos:end="15:12">'+'</literal></expr>:</case>

        <expr_stmt pos:start="17:9" pos:end="17:15"><expr pos:start="17:9" pos:end="17:14"><call pos:start="17:9" pos:end="17:14"><name pos:start="17:9" pos:end="17:12">next</name><argument_list pos:start="17:13" pos:end="17:14">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:28"><expr pos:start="19:9" pos:end="19:27"><name pos:start="19:9" pos:end="19:9">n</name> <operator pos:start="19:11" pos:end="19:11">=</operator> <call pos:start="19:13" pos:end="19:27"><name pos:start="19:13" pos:end="19:22">expr_unary</name><argument_list pos:start="19:23" pos:end="19:27">(<argument pos:start="19:24" pos:end="19:26"><expr pos:start="19:24" pos:end="19:26"><name pos:start="19:24" pos:end="19:26">mon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="21:9" pos:end="21:14">break;</break>

    <case pos:start="23:5" pos:end="23:13">case <expr pos:start="23:10" pos:end="23:12"><literal type="char" pos:start="23:10" pos:end="23:12">'-'</literal></expr>:</case>

        <expr_stmt pos:start="25:9" pos:end="25:15"><expr pos:start="25:9" pos:end="25:14"><call pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:12">next</name><argument_list pos:start="25:13" pos:end="25:14">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:29"><expr pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:9">n</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <operator pos:start="27:13" pos:end="27:13">-</operator><call pos:start="27:14" pos:end="27:28"><name pos:start="27:14" pos:end="27:23">expr_unary</name><argument_list pos:start="27:24" pos:end="27:28">(<argument pos:start="27:25" pos:end="27:27"><expr pos:start="27:25" pos:end="27:27"><name pos:start="27:25" pos:end="27:27">mon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="29:9" pos:end="29:14">break;</break>

    <case pos:start="31:5" pos:end="31:13">case <expr pos:start="31:10" pos:end="31:12"><literal type="char" pos:start="31:10" pos:end="31:12">'~'</literal></expr>:</case>

        <expr_stmt pos:start="33:9" pos:end="33:15"><expr pos:start="33:9" pos:end="33:14"><call pos:start="33:9" pos:end="33:14"><name pos:start="33:9" pos:end="33:12">next</name><argument_list pos:start="33:13" pos:end="33:14">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:29"><expr pos:start="35:9" pos:end="35:28"><name pos:start="35:9" pos:end="35:9">n</name> <operator pos:start="35:11" pos:end="35:11">=</operator> <operator pos:start="35:13" pos:end="35:13">~</operator><call pos:start="35:14" pos:end="35:28"><name pos:start="35:14" pos:end="35:23">expr_unary</name><argument_list pos:start="35:24" pos:end="35:28">(<argument pos:start="35:25" pos:end="35:27"><expr pos:start="35:25" pos:end="35:27"><name pos:start="35:25" pos:end="35:27">mon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="37:9" pos:end="37:14">break;</break>

    <case pos:start="39:5" pos:end="39:13">case <expr pos:start="39:10" pos:end="39:12"><literal type="char" pos:start="39:10" pos:end="39:12">'('</literal></expr>:</case>

        <expr_stmt pos:start="41:9" pos:end="41:15"><expr pos:start="41:9" pos:end="41:14"><call pos:start="41:9" pos:end="41:14"><name pos:start="41:9" pos:end="41:12">next</name><argument_list pos:start="41:13" pos:end="41:14">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:26"><expr pos:start="43:9" pos:end="43:25"><name pos:start="43:9" pos:end="43:9">n</name> <operator pos:start="43:11" pos:end="43:11">=</operator> <call pos:start="43:13" pos:end="43:25"><name pos:start="43:13" pos:end="43:20">expr_sum</name><argument_list pos:start="43:21" pos:end="43:25">(<argument pos:start="43:22" pos:end="43:24"><expr pos:start="43:22" pos:end="43:24"><name pos:start="43:22" pos:end="43:24">mon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="49:9"><if pos:start="45:9" pos:end="49:9">if <condition pos:start="45:12" pos:end="45:24">(<expr pos:start="45:13" pos:end="45:23"><operator pos:start="45:13" pos:end="45:13">*</operator><name pos:start="45:14" pos:end="45:16">pch</name> <operator pos:start="45:18" pos:end="45:19">!=</operator> <literal type="char" pos:start="45:21" pos:end="45:23">')'</literal></expr>)</condition> <block pos:start="45:26" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:44">

            <expr_stmt pos:start="47:13" pos:end="47:44"><expr pos:start="47:13" pos:end="47:43"><call pos:start="47:13" pos:end="47:43"><name pos:start="47:13" pos:end="47:22">expr_error</name><argument_list pos:start="47:23" pos:end="47:43">(<argument pos:start="47:24" pos:end="47:26"><expr pos:start="47:24" pos:end="47:26"><name pos:start="47:24" pos:end="47:26">mon</name></expr></argument>, <argument pos:start="47:29" pos:end="47:42"><expr pos:start="47:29" pos:end="47:42"><literal type="string" pos:start="47:29" pos:end="47:42">"')' expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:15"><expr pos:start="51:9" pos:end="51:14"><call pos:start="51:9" pos:end="51:14"><name pos:start="51:9" pos:end="51:12">next</name><argument_list pos:start="51:13" pos:end="51:14">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="53:9" pos:end="53:14">break;</break>

    <case pos:start="55:5" pos:end="55:14">case <expr pos:start="55:10" pos:end="55:13"><literal type="char" pos:start="55:10" pos:end="55:13">'\''</literal></expr>:</case>

        <expr_stmt pos:start="57:9" pos:end="57:14"><expr pos:start="57:9" pos:end="57:13"><name pos:start="57:9" pos:end="57:11">pch</name><operator pos:start="57:12" pos:end="57:13">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="61:59"><if pos:start="59:9" pos:end="61:59">if <condition pos:start="59:12" pos:end="59:25">(<expr pos:start="59:13" pos:end="59:24"><operator pos:start="59:13" pos:end="59:13">*</operator><name pos:start="59:14" pos:end="59:16">pch</name> <operator pos:start="59:18" pos:end="59:19">==</operator> <literal type="char" pos:start="59:21" pos:end="59:24">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:59"><block_content pos:start="61:13" pos:end="61:59">

            <expr_stmt pos:start="61:13" pos:end="61:59"><expr pos:start="61:13" pos:end="61:58"><call pos:start="61:13" pos:end="61:58"><name pos:start="61:13" pos:end="61:22">expr_error</name><argument_list pos:start="61:23" pos:end="61:58">(<argument pos:start="61:24" pos:end="61:26"><expr pos:start="61:24" pos:end="61:26"><name pos:start="61:24" pos:end="61:26">mon</name></expr></argument>, <argument pos:start="61:29" pos:end="61:57"><expr pos:start="61:29" pos:end="61:57"><literal type="string" pos:start="61:29" pos:end="61:57">"character constant expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:17"><expr pos:start="63:9" pos:end="63:16"><name pos:start="63:9" pos:end="63:9">n</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <operator pos:start="63:13" pos:end="63:13">*</operator><name pos:start="63:14" pos:end="63:16">pch</name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:14"><expr pos:start="65:9" pos:end="65:13"><name pos:start="65:9" pos:end="65:11">pch</name><operator pos:start="65:12" pos:end="65:13">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="69:64"><if pos:start="67:9" pos:end="69:64">if <condition pos:start="67:12" pos:end="67:25">(<expr pos:start="67:13" pos:end="67:24"><operator pos:start="67:13" pos:end="67:13">*</operator><name pos:start="67:14" pos:end="67:16">pch</name> <operator pos:start="67:18" pos:end="67:19">!=</operator> <literal type="char" pos:start="67:21" pos:end="67:24">'\''</literal></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:64"><block_content pos:start="69:13" pos:end="69:64">

            <expr_stmt pos:start="69:13" pos:end="69:64"><expr pos:start="69:13" pos:end="69:63"><call pos:start="69:13" pos:end="69:63"><name pos:start="69:13" pos:end="69:22">expr_error</name><argument_list pos:start="69:23" pos:end="69:63">(<argument pos:start="69:24" pos:end="69:26"><expr pos:start="69:24" pos:end="69:26"><name pos:start="69:24" pos:end="69:26">mon</name></expr></argument>, <argument pos:start="69:29" pos:end="69:62"><expr pos:start="69:29" pos:end="69:62"><literal type="string" pos:start="69:29" pos:end="69:62">"missing terminating \' character"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:15"><expr pos:start="71:9" pos:end="71:14"><call pos:start="71:9" pos:end="71:14"><name pos:start="71:9" pos:end="71:12">next</name><argument_list pos:start="71:13" pos:end="71:14">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>

    <case pos:start="75:5" pos:end="75:13">case <expr pos:start="75:10" pos:end="75:12"><literal type="char" pos:start="75:10" pos:end="75:12">'$'</literal></expr>:</case>

        <block pos:start="77:9" pos:end="119:9">{<block_content pos:start="79:13" pos:end="117:20">

            <decl_stmt pos:start="79:13" pos:end="79:30"><decl pos:start="79:13" pos:end="79:25"><type pos:start="79:13" pos:end="79:16"><name pos:start="79:13" pos:end="79:16">char</name></type> <name pos:start="79:18" pos:end="79:25"><name pos:start="79:18" pos:end="79:20">buf</name><index pos:start="79:21" pos:end="79:25">[<expr pos:start="79:22" pos:end="79:24"><literal type="number" pos:start="79:22" pos:end="79:24">128</literal></expr>]</index></name></decl>, <decl pos:start="79:28" pos:end="79:29"><type ref="prev" pos:start="79:13" pos:end="79:16"><modifier pos:start="79:28" pos:end="79:28">*</modifier></type><name pos:start="79:29" pos:end="79:29">q</name></decl>;</decl_stmt>

            <decl_stmt pos:start="81:13" pos:end="81:30"><decl pos:start="81:13" pos:end="81:29"><type pos:start="81:13" pos:end="81:23"><name pos:start="81:13" pos:end="81:23">target_long</name></type> <name pos:start="81:25" pos:end="81:27">reg</name><init pos:start="81:28" pos:end="81:29">=<expr pos:start="81:29" pos:end="81:29"><literal type="number" pos:start="81:29" pos:end="81:29">0</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="85:13" pos:end="85:18"><expr pos:start="85:13" pos:end="85:17"><name pos:start="85:13" pos:end="85:15">pch</name><operator pos:start="85:16" pos:end="85:17">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:20"><expr pos:start="87:13" pos:end="87:19"><name pos:start="87:13" pos:end="87:13">q</name> <operator pos:start="87:15" pos:end="87:15">=</operator> <name pos:start="87:17" pos:end="87:19">buf</name></expr>;</expr_stmt>

            <while pos:start="89:13" pos:end="103:13">while <condition pos:start="89:19" pos:end="95:46">(<expr pos:start="89:20" pos:end="95:45"><operator pos:start="89:20" pos:end="89:20">(</operator><operator pos:start="89:21" pos:end="89:21">*</operator><name pos:start="89:22" pos:end="89:24">pch</name> <operator pos:start="89:26" pos:end="89:27">&gt;=</operator> <literal type="char" pos:start="89:29" pos:end="89:31">'a'</literal> <operator pos:start="89:33" pos:end="89:34">&amp;&amp;</operator> <operator pos:start="89:36" pos:end="89:36">*</operator><name pos:start="89:37" pos:end="89:39">pch</name> <operator pos:start="89:41" pos:end="89:42">&lt;=</operator> <literal type="char" pos:start="89:44" pos:end="89:46">'z'</literal><operator pos:start="89:47" pos:end="89:47">)</operator> <operator pos:start="89:49" pos:end="89:50">||</operator>

                   <operator pos:start="91:20" pos:end="91:20">(</operator><operator pos:start="91:21" pos:end="91:21">*</operator><name pos:start="91:22" pos:end="91:24">pch</name> <operator pos:start="91:26" pos:end="91:27">&gt;=</operator> <literal type="char" pos:start="91:29" pos:end="91:31">'A'</literal> <operator pos:start="91:33" pos:end="91:34">&amp;&amp;</operator> <operator pos:start="91:36" pos:end="91:36">*</operator><name pos:start="91:37" pos:end="91:39">pch</name> <operator pos:start="91:41" pos:end="91:42">&lt;=</operator> <literal type="char" pos:start="91:44" pos:end="91:46">'Z'</literal><operator pos:start="91:47" pos:end="91:47">)</operator> <operator pos:start="91:49" pos:end="91:50">||</operator>

                   <operator pos:start="93:20" pos:end="93:20">(</operator><operator pos:start="93:21" pos:end="93:21">*</operator><name pos:start="93:22" pos:end="93:24">pch</name> <operator pos:start="93:26" pos:end="93:27">&gt;=</operator> <literal type="char" pos:start="93:29" pos:end="93:31">'0'</literal> <operator pos:start="93:33" pos:end="93:34">&amp;&amp;</operator> <operator pos:start="93:36" pos:end="93:36">*</operator><name pos:start="93:37" pos:end="93:39">pch</name> <operator pos:start="93:41" pos:end="93:42">&lt;=</operator> <literal type="char" pos:start="93:44" pos:end="93:46">'9'</literal><operator pos:start="93:47" pos:end="93:47">)</operator> <operator pos:start="93:49" pos:end="93:50">||</operator>

                   <operator pos:start="95:20" pos:end="95:20">*</operator><name pos:start="95:21" pos:end="95:23">pch</name> <operator pos:start="95:25" pos:end="95:26">==</operator> <literal type="char" pos:start="95:28" pos:end="95:30">'_'</literal> <operator pos:start="95:32" pos:end="95:33">||</operator> <operator pos:start="95:35" pos:end="95:35">*</operator><name pos:start="95:36" pos:end="95:38">pch</name> <operator pos:start="95:40" pos:end="95:41">==</operator> <literal type="char" pos:start="95:43" pos:end="95:45">'.'</literal></expr>)</condition> <block pos:start="95:48" pos:end="103:13">{<block_content pos:start="97:17" pos:end="101:22">

                <if_stmt pos:start="97:17" pos:end="99:32"><if pos:start="97:17" pos:end="99:32">if <condition pos:start="97:20" pos:end="97:48">(<expr pos:start="97:21" pos:end="97:47"><operator pos:start="97:21" pos:end="97:21">(</operator><name pos:start="97:22" pos:end="97:22">q</name> <operator pos:start="97:24" pos:end="97:24">-</operator> <name pos:start="97:26" pos:end="97:28">buf</name><operator pos:start="97:29" pos:end="97:29">)</operator> <operator pos:start="97:31" pos:end="97:31">&lt;</operator> <sizeof pos:start="97:33" pos:end="97:43">sizeof<argument_list pos:start="97:39" pos:end="97:43">(<argument pos:start="97:40" pos:end="97:42"><expr pos:start="97:40" pos:end="97:42"><name pos:start="97:40" pos:end="97:42">buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="97:45" pos:end="97:45">-</operator> <literal type="number" pos:start="97:47" pos:end="97:47">1</literal></expr>)</condition><block type="pseudo" pos:start="99:21" pos:end="99:32"><block_content pos:start="99:21" pos:end="99:32">

                    <expr_stmt pos:start="99:21" pos:end="99:32"><expr pos:start="99:21" pos:end="99:31"><operator pos:start="99:21" pos:end="99:21">*</operator><name pos:start="99:22" pos:end="99:22">q</name><operator pos:start="99:23" pos:end="99:24">++</operator> <operator pos:start="99:26" pos:end="99:26">=</operator> <operator pos:start="99:28" pos:end="99:28">*</operator><name pos:start="99:29" pos:end="99:31">pch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:22"><expr pos:start="101:17" pos:end="101:21"><name pos:start="101:17" pos:end="101:19">pch</name><operator pos:start="101:20" pos:end="101:21">++</operator></expr>;</expr_stmt>

            </block_content>}</block></while>

            <while pos:start="105:13" pos:end="107:22">while <condition pos:start="105:19" pos:end="105:38">(<expr pos:start="105:20" pos:end="105:37"><call pos:start="105:20" pos:end="105:37"><name pos:start="105:20" pos:end="105:31">qemu_isspace</name><argument_list pos:start="105:32" pos:end="105:37">(<argument pos:start="105:33" pos:end="105:36"><expr pos:start="105:33" pos:end="105:36"><operator pos:start="105:33" pos:end="105:33">*</operator><name pos:start="105:34" pos:end="105:36">pch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="107:17" pos:end="107:22"><block_content pos:start="107:17" pos:end="107:22">

                <expr_stmt pos:start="107:17" pos:end="107:22"><expr pos:start="107:17" pos:end="107:21"><name pos:start="107:17" pos:end="107:19">pch</name><operator pos:start="107:20" pos:end="107:21">++</operator></expr>;</expr_stmt></block_content></block></while>

            <expr_stmt pos:start="109:13" pos:end="109:19"><expr pos:start="109:13" pos:end="109:18"><operator pos:start="109:13" pos:end="109:13">*</operator><name pos:start="109:14" pos:end="109:14">q</name> <operator pos:start="109:16" pos:end="109:16">=</operator> <literal type="number" pos:start="109:18" pos:end="109:18">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:45"><expr pos:start="111:13" pos:end="111:44"><name pos:start="111:13" pos:end="111:15">ret</name> <operator pos:start="111:17" pos:end="111:17">=</operator> <call pos:start="111:19" pos:end="111:44"><name pos:start="111:19" pos:end="111:33">get_monitor_def</name><argument_list pos:start="111:34" pos:end="111:44">(<argument pos:start="111:35" pos:end="111:38"><expr pos:start="111:35" pos:end="111:38"><operator pos:start="111:35" pos:end="111:35">&amp;</operator><name pos:start="111:36" pos:end="111:38">reg</name></expr></argument>, <argument pos:start="111:41" pos:end="111:43"><expr pos:start="111:41" pos:end="111:43"><name pos:start="111:41" pos:end="111:43">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="113:13" pos:end="115:52"><if pos:start="113:13" pos:end="115:52">if <condition pos:start="113:16" pos:end="113:24">(<expr pos:start="113:17" pos:end="113:23"><name pos:start="113:17" pos:end="113:19">ret</name> <operator pos:start="113:21" pos:end="113:21">&lt;</operator> <literal type="number" pos:start="113:23" pos:end="113:23">0</literal></expr>)</condition><block type="pseudo" pos:start="115:17" pos:end="115:52"><block_content pos:start="115:17" pos:end="115:52">

                <expr_stmt pos:start="115:17" pos:end="115:52"><expr pos:start="115:17" pos:end="115:51"><call pos:start="115:17" pos:end="115:51"><name pos:start="115:17" pos:end="115:26">expr_error</name><argument_list pos:start="115:27" pos:end="115:51">(<argument pos:start="115:28" pos:end="115:30"><expr pos:start="115:28" pos:end="115:30"><name pos:start="115:28" pos:end="115:30">mon</name></expr></argument>, <argument pos:start="115:33" pos:end="115:50"><expr pos:start="115:33" pos:end="115:50"><literal type="string" pos:start="115:33" pos:end="115:50">"unknown register"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:20"><expr pos:start="117:13" pos:end="117:19"><name pos:start="117:13" pos:end="117:13">n</name> <operator pos:start="117:15" pos:end="117:15">=</operator> <name pos:start="117:17" pos:end="117:19">reg</name></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="121:9" pos:end="121:14">break;</break>

    <case pos:start="123:5" pos:end="123:14">case <expr pos:start="123:10" pos:end="123:13"><literal type="char" pos:start="123:10" pos:end="123:13">'\0'</literal></expr>:</case>

        <expr_stmt pos:start="125:9" pos:end="125:56"><expr pos:start="125:9" pos:end="125:55"><call pos:start="125:9" pos:end="125:55"><name pos:start="125:9" pos:end="125:18">expr_error</name><argument_list pos:start="125:19" pos:end="125:55">(<argument pos:start="125:20" pos:end="125:22"><expr pos:start="125:20" pos:end="125:22"><name pos:start="125:20" pos:end="125:22">mon</name></expr></argument>, <argument pos:start="125:25" pos:end="125:54"><expr pos:start="125:25" pos:end="125:54"><literal type="string" pos:start="125:25" pos:end="125:54">"unexpected end of expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:14"><expr pos:start="127:9" pos:end="127:13"><name pos:start="127:9" pos:end="127:9">n</name> <operator pos:start="127:11" pos:end="127:11">=</operator> <literal type="number" pos:start="127:13" pos:end="127:13">0</literal></expr>;</expr_stmt>

        <break pos:start="129:9" pos:end="129:14">break;</break>

    <default pos:start="131:5" pos:end="131:12">default:</default>

        <expr_stmt pos:start="133:9" pos:end="133:18"><expr pos:start="133:9" pos:end="133:17"><name pos:start="133:9" pos:end="133:13">errno</name> <operator pos:start="133:15" pos:end="133:15">=</operator> <literal type="number" pos:start="133:17" pos:end="133:17">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:33"><expr pos:start="135:9" pos:end="135:32"><name pos:start="135:9" pos:end="135:9">n</name> <operator pos:start="135:11" pos:end="135:11">=</operator> <call pos:start="135:13" pos:end="135:32"><name pos:start="135:13" pos:end="135:20">strtoull</name><argument_list pos:start="135:21" pos:end="135:32">(<argument pos:start="135:22" pos:end="135:24"><expr pos:start="135:22" pos:end="135:24"><name pos:start="135:22" pos:end="135:24">pch</name></expr></argument>, <argument pos:start="135:27" pos:end="135:28"><expr pos:start="135:27" pos:end="135:28"><operator pos:start="135:27" pos:end="135:27">&amp;</operator><name pos:start="135:28" pos:end="135:28">p</name></expr></argument>, <argument pos:start="135:31" pos:end="135:31"><expr pos:start="135:31" pos:end="135:31"><literal type="number" pos:start="135:31" pos:end="135:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="137:9" pos:end="141:9"><if pos:start="137:9" pos:end="141:9">if <condition pos:start="137:12" pos:end="137:28">(<expr pos:start="137:13" pos:end="137:27"><name pos:start="137:13" pos:end="137:17">errno</name> <operator pos:start="137:19" pos:end="137:20">==</operator> <name pos:start="137:22" pos:end="137:27">ERANGE</name></expr>)</condition> <block pos:start="137:30" pos:end="141:9">{<block_content pos:start="139:13" pos:end="139:48">

            <expr_stmt pos:start="139:13" pos:end="139:48"><expr pos:start="139:13" pos:end="139:47"><call pos:start="139:13" pos:end="139:47"><name pos:start="139:13" pos:end="139:22">expr_error</name><argument_list pos:start="139:23" pos:end="139:47">(<argument pos:start="139:24" pos:end="139:26"><expr pos:start="139:24" pos:end="139:26"><name pos:start="139:24" pos:end="139:26">mon</name></expr></argument>, <argument pos:start="139:29" pos:end="139:46"><expr pos:start="139:29" pos:end="139:46"><literal type="string" pos:start="139:29" pos:end="139:46">"number too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="143:9" pos:end="147:9"><if pos:start="143:9" pos:end="147:9">if <condition pos:start="143:12" pos:end="143:21">(<expr pos:start="143:13" pos:end="143:20"><name pos:start="143:13" pos:end="143:15">pch</name> <operator pos:start="143:17" pos:end="143:18">==</operator> <name pos:start="143:20" pos:end="143:20">p</name></expr>)</condition> <block pos:start="143:23" pos:end="147:9">{<block_content pos:start="145:13" pos:end="145:58">

            <expr_stmt pos:start="145:13" pos:end="145:58"><expr pos:start="145:13" pos:end="145:57"><call pos:start="145:13" pos:end="145:57"><name pos:start="145:13" pos:end="145:22">expr_error</name><argument_list pos:start="145:23" pos:end="145:57">(<argument pos:start="145:24" pos:end="145:26"><expr pos:start="145:24" pos:end="145:26"><name pos:start="145:24" pos:end="145:26">mon</name></expr></argument>, <argument pos:start="145:29" pos:end="145:56"><expr pos:start="145:29" pos:end="145:56"><literal type="string" pos:start="145:29" pos:end="145:56">"invalid char in expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:16"><expr pos:start="149:9" pos:end="149:15"><name pos:start="149:9" pos:end="149:11">pch</name> <operator pos:start="149:13" pos:end="149:13">=</operator> <name pos:start="149:15" pos:end="149:15">p</name></expr>;</expr_stmt>

        <while pos:start="151:9" pos:end="153:18">while <condition pos:start="151:15" pos:end="151:34">(<expr pos:start="151:16" pos:end="151:33"><call pos:start="151:16" pos:end="151:33"><name pos:start="151:16" pos:end="151:27">qemu_isspace</name><argument_list pos:start="151:28" pos:end="151:33">(<argument pos:start="151:29" pos:end="151:32"><expr pos:start="151:29" pos:end="151:32"><operator pos:start="151:29" pos:end="151:29">*</operator><name pos:start="151:30" pos:end="151:32">pch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="153:13" pos:end="153:18"><block_content pos:start="153:13" pos:end="153:18">

            <expr_stmt pos:start="153:13" pos:end="153:18"><expr pos:start="153:13" pos:end="153:17"><name pos:start="153:13" pos:end="153:15">pch</name><operator pos:start="153:16" pos:end="153:17">++</operator></expr>;</expr_stmt></block_content></block></while>

        <break pos:start="155:9" pos:end="155:14">break;</break>

    </block_content>}</block></switch>

    <return pos:start="159:5" pos:end="159:13">return <expr pos:start="159:12" pos:end="159:12"><name pos:start="159:12" pos:end="159:12">n</name></expr>;</return>

</block_content>}</block></function>
</unit>
