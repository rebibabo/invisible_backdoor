<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6004.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">nbd_co_receive_request</name><parameter_list pos:start="1:34" pos:end="3:47">(<parameter pos:start="1:35" pos:end="1:53"><decl pos:start="1:35" pos:end="1:53"><type pos:start="1:35" pos:end="1:53"><name pos:start="1:35" pos:end="1:48">NBDRequestData</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:53">req</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:74"><decl pos:start="1:56" pos:end="1:74"><type pos:start="1:56" pos:end="1:74"><name pos:start="1:56" pos:end="1:65">NBDRequest</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:74">request</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:46"><decl pos:start="3:35" pos:end="3:46"><type pos:start="3:35" pos:end="3:46"><name pos:start="3:35" pos:end="3:39">Error</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier><modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:46">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="151:1">{<block_content pos:start="7:5" pos:end="149:13">

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">NBDClient</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:21">client</name> <init pos:start="7:23" pos:end="7:35">= <expr pos:start="7:25" pos:end="7:35"><name pos:start="7:25" pos:end="7:35"><name pos:start="7:25" pos:end="7:27">req</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:35">client</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:34"><expr pos:start="11:5" pos:end="11:33"><call pos:start="11:5" pos:end="11:33"><name pos:start="11:5" pos:end="11:12">g_assert</name><argument_list pos:start="11:13" pos:end="11:33">(<argument pos:start="11:14" pos:end="11:32"><expr pos:start="11:14" pos:end="11:32"><call pos:start="11:14" pos:end="11:32"><name pos:start="11:14" pos:end="11:30">qemu_in_coroutine</name><argument_list pos:start="11:31" pos:end="11:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:60"><expr pos:start="13:5" pos:end="13:59"><call pos:start="13:5" pos:end="13:59"><name pos:start="13:5" pos:end="13:10">assert</name><argument_list pos:start="13:11" pos:end="13:59">(<argument pos:start="13:12" pos:end="13:58"><expr pos:start="13:12" pos:end="13:58"><name pos:start="13:12" pos:end="13:33"><name pos:start="13:12" pos:end="13:17">client</name><operator pos:start="13:18" pos:end="13:19">-&gt;</operator><name pos:start="13:20" pos:end="13:33">recv_coroutine</name></name> <operator pos:start="13:35" pos:end="13:36">==</operator> <call pos:start="13:38" pos:end="13:58"><name pos:start="13:38" pos:end="13:56">qemu_coroutine_self</name><argument_list pos:start="13:57" pos:end="13:58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:60">(<expr pos:start="15:9" pos:end="15:59"><call pos:start="15:9" pos:end="15:55"><name pos:start="15:9" pos:end="15:27">nbd_receive_request</name><argument_list pos:start="15:28" pos:end="15:55">(<argument pos:start="15:29" pos:end="15:39"><expr pos:start="15:29" pos:end="15:39"><name pos:start="15:29" pos:end="15:39"><name pos:start="15:29" pos:end="15:34">client</name><operator pos:start="15:35" pos:end="15:36">-&gt;</operator><name pos:start="15:37" pos:end="15:39">ioc</name></name></expr></argument>, <argument pos:start="15:42" pos:end="15:48"><expr pos:start="15:42" pos:end="15:48"><name pos:start="15:42" pos:end="15:48">request</name></expr></argument>, <argument pos:start="15:51" pos:end="15:54"><expr pos:start="15:51" pos:end="15:54"><name pos:start="15:51" pos:end="15:54">errp</name></expr></argument>)</argument_list></call> <operator pos:start="15:57" pos:end="15:57">&lt;</operator> <literal type="number" pos:start="15:59" pos:end="15:59">0</literal></expr>)</condition> <block pos:start="15:62" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:20">

        <return pos:start="17:9" pos:end="17:20">return <expr pos:start="17:16" pos:end="17:19"><operator pos:start="17:16" pos:end="17:16">-</operator><name pos:start="17:17" pos:end="17:19">EIO</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:77"><expr pos:start="23:5" pos:end="23:76"><call pos:start="23:5" pos:end="23:76"><name pos:start="23:5" pos:end="23:44">trace_nbd_co_receive_request_decode_type</name><argument_list pos:start="23:45" pos:end="23:76">(<argument pos:start="23:46" pos:end="23:60"><expr pos:start="23:46" pos:end="23:60"><name pos:start="23:46" pos:end="23:60"><name pos:start="23:46" pos:end="23:52">request</name><operator pos:start="23:53" pos:end="23:54">-&gt;</operator><name pos:start="23:55" pos:end="23:60">handle</name></name></expr></argument>, <argument pos:start="23:63" pos:end="23:75"><expr pos:start="23:63" pos:end="23:75"><name pos:start="23:63" pos:end="23:75"><name pos:start="23:63" pos:end="23:69">request</name><operator pos:start="23:70" pos:end="23:71">-&gt;</operator><name pos:start="23:72" pos:end="23:75">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:39">(<expr pos:start="27:9" pos:end="27:38"><name pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:15">request</name><operator pos:start="27:16" pos:end="27:17">-&gt;</operator><name pos:start="27:18" pos:end="27:21">type</name></name> <operator pos:start="27:23" pos:end="27:24">!=</operator> <name pos:start="27:26" pos:end="27:38">NBD_CMD_WRITE</name></expr>)</condition> <block pos:start="27:41" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:29">

        <comment type="block" pos:start="29:9" pos:end="29:65">/* No payload, we are ready to read the next request.  */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:29"><expr pos:start="31:9" pos:end="31:28"><name pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:11">req</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:21">complete</name></name> <operator pos:start="31:23" pos:end="31:23">=</operator> <name pos:start="31:25" pos:end="31:28">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="37:38">(<expr pos:start="37:9" pos:end="37:37"><name pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:15">request</name><operator pos:start="37:16" pos:end="37:17">-&gt;</operator><name pos:start="37:18" pos:end="37:21">type</name></name> <operator pos:start="37:23" pos:end="37:24">==</operator> <name pos:start="37:26" pos:end="37:37">NBD_CMD_DISC</name></expr>)</condition> <block pos:start="37:40" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:20">

        <comment type="block" pos:start="39:9" pos:end="41:58">/* Special case: we're going to disconnect without a reply,

         * whether or not flags, from, or len are bogus */</comment>

        <return pos:start="43:9" pos:end="43:20">return <expr pos:start="43:16" pos:end="43:19"><operator pos:start="43:16" pos:end="43:16">-</operator><name pos:start="43:17" pos:end="43:19">EIO</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="53:64">/* Check for sanity in the parameters, part 1.  Defer as many

     * checks as possible until after reading any NBD_CMD_WRITE

     * payload, so we can try and keep the connection alive.  */</comment>

    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:55">(<expr pos:start="55:9" pos:end="55:54"><operator pos:start="55:9" pos:end="55:9">(</operator><name pos:start="55:10" pos:end="55:22"><name pos:start="55:10" pos:end="55:16">request</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:22">from</name></name> <operator pos:start="55:24" pos:end="55:24">+</operator> <name pos:start="55:26" pos:end="55:37"><name pos:start="55:26" pos:end="55:32">request</name><operator pos:start="55:33" pos:end="55:34">-&gt;</operator><name pos:start="55:35" pos:end="55:37">len</name></name><operator pos:start="55:38" pos:end="55:38">)</operator> <operator pos:start="55:40" pos:end="55:40">&lt;</operator> <name pos:start="55:42" pos:end="55:54"><name pos:start="55:42" pos:end="55:48">request</name><operator pos:start="55:49" pos:end="55:50">-&gt;</operator><name pos:start="55:51" pos:end="55:54">from</name></name></expr>)</condition> <block pos:start="55:57" pos:end="63:5">{<block_content pos:start="57:9" pos:end="61:23">

        <expr_stmt pos:start="57:9" pos:end="59:80"><expr pos:start="57:9" pos:end="59:79"><call pos:start="57:9" pos:end="59:79"><name pos:start="57:9" pos:end="57:18">error_setg</name><argument_list pos:start="57:19" pos:end="59:79">(<argument pos:start="57:20" pos:end="57:23"><expr pos:start="57:20" pos:end="57:23"><name pos:start="57:20" pos:end="57:23">errp</name></expr></argument>,

                   <argument pos:start="59:20" pos:end="59:78"><expr pos:start="59:20" pos:end="59:78"><literal type="string" pos:start="59:20" pos:end="59:78">"integer overflow detected, you're probably being attacked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:23">return <expr pos:start="61:16" pos:end="61:22"><operator pos:start="61:16" pos:end="61:16">-</operator><name pos:start="61:17" pos:end="61:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="67:5" pos:end="91:5"><if pos:start="67:5" pos:end="91:5">if <condition pos:start="67:8" pos:end="67:72">(<expr pos:start="67:9" pos:end="67:71"><name pos:start="67:9" pos:end="67:21"><name pos:start="67:9" pos:end="67:15">request</name><operator pos:start="67:16" pos:end="67:17">-&gt;</operator><name pos:start="67:18" pos:end="67:21">type</name></name> <operator pos:start="67:23" pos:end="67:24">==</operator> <name pos:start="67:26" pos:end="67:37">NBD_CMD_READ</name> <operator pos:start="67:39" pos:end="67:40">||</operator> <name pos:start="67:42" pos:end="67:54"><name pos:start="67:42" pos:end="67:48">request</name><operator pos:start="67:49" pos:end="67:50">-&gt;</operator><name pos:start="67:51" pos:end="67:54">type</name></name> <operator pos:start="67:56" pos:end="67:57">==</operator> <name pos:start="67:59" pos:end="67:71">NBD_CMD_WRITE</name></expr>)</condition> <block pos:start="67:74" pos:end="91:5">{<block_content pos:start="69:9" pos:end="89:9">

        <if_stmt pos:start="69:9" pos:end="77:9"><if pos:start="69:9" pos:end="77:9">if <condition pos:start="69:12" pos:end="69:47">(<expr pos:start="69:13" pos:end="69:46"><name pos:start="69:13" pos:end="69:24"><name pos:start="69:13" pos:end="69:19">request</name><operator pos:start="69:20" pos:end="69:21">-&gt;</operator><name pos:start="69:22" pos:end="69:24">len</name></name> <operator pos:start="69:26" pos:end="69:26">&gt;</operator> <name pos:start="69:28" pos:end="69:46">NBD_MAX_BUFFER_SIZE</name></expr>)</condition> <block pos:start="69:49" pos:end="77:9">{<block_content pos:start="71:13" pos:end="75:27">

            <expr_stmt pos:start="71:13" pos:end="73:58"><expr pos:start="71:13" pos:end="73:57"><call pos:start="71:13" pos:end="73:57"><name pos:start="71:13" pos:end="71:22">error_setg</name><argument_list pos:start="71:23" pos:end="73:57">(<argument pos:start="71:24" pos:end="71:27"><expr pos:start="71:24" pos:end="71:27"><name pos:start="71:24" pos:end="71:27">errp</name></expr></argument>, <argument pos:start="71:30" pos:end="71:76"><expr pos:start="71:30" pos:end="71:76"><literal type="string" pos:start="71:30" pos:end="71:37">"len (%"</literal> <name pos:start="71:39" pos:end="71:44">PRIu32</name><literal type="string" pos:start="71:45" pos:end="71:76">" ) is larger than max len (%u)"</literal></expr></argument>,

                       <argument pos:start="73:24" pos:end="73:35"><expr pos:start="73:24" pos:end="73:35"><name pos:start="73:24" pos:end="73:35"><name pos:start="73:24" pos:end="73:30">request</name><operator pos:start="73:31" pos:end="73:32">-&gt;</operator><name pos:start="73:33" pos:end="73:35">len</name></name></expr></argument>, <argument pos:start="73:38" pos:end="73:56"><expr pos:start="73:38" pos:end="73:56"><name pos:start="73:38" pos:end="73:56">NBD_MAX_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="75:13" pos:end="75:27">return <expr pos:start="75:20" pos:end="75:26"><operator pos:start="75:20" pos:end="75:20">-</operator><name pos:start="75:21" pos:end="75:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:71"><expr pos:start="81:9" pos:end="81:70"><name pos:start="81:9" pos:end="81:17"><name pos:start="81:9" pos:end="81:11">req</name><operator pos:start="81:12" pos:end="81:13">-&gt;</operator><name pos:start="81:14" pos:end="81:17">data</name></name> <operator pos:start="81:19" pos:end="81:19">=</operator> <call pos:start="81:21" pos:end="81:70"><name pos:start="81:21" pos:end="81:38">blk_try_blockalign</name><argument_list pos:start="81:39" pos:end="81:70">(<argument pos:start="81:40" pos:end="81:55"><expr pos:start="81:40" pos:end="81:55"><name pos:start="81:40" pos:end="81:55"><name pos:start="81:40" pos:end="81:45">client</name><operator pos:start="81:46" pos:end="81:47">-&gt;</operator><name pos:start="81:48" pos:end="81:50">exp</name><operator pos:start="81:51" pos:end="81:52">-&gt;</operator><name pos:start="81:53" pos:end="81:55">blk</name></name></expr></argument>, <argument pos:start="81:58" pos:end="81:69"><expr pos:start="81:58" pos:end="81:69"><name pos:start="81:58" pos:end="81:69"><name pos:start="81:58" pos:end="81:64">request</name><operator pos:start="81:65" pos:end="81:66">-&gt;</operator><name pos:start="81:67" pos:end="81:69">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="89:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="83:30">(<expr pos:start="83:13" pos:end="83:29"><name pos:start="83:13" pos:end="83:21"><name pos:start="83:13" pos:end="83:15">req</name><operator pos:start="83:16" pos:end="83:17">-&gt;</operator><name pos:start="83:18" pos:end="83:21">data</name></name> <operator pos:start="83:23" pos:end="83:24">==</operator> <name pos:start="83:26" pos:end="83:29">NULL</name></expr>)</condition> <block pos:start="83:32" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:27">

            <expr_stmt pos:start="85:13" pos:end="85:42"><expr pos:start="85:13" pos:end="85:41"><call pos:start="85:13" pos:end="85:41"><name pos:start="85:13" pos:end="85:22">error_setg</name><argument_list pos:start="85:23" pos:end="85:41">(<argument pos:start="85:24" pos:end="85:27"><expr pos:start="85:24" pos:end="85:27"><name pos:start="85:24" pos:end="85:27">errp</name></expr></argument>, <argument pos:start="85:30" pos:end="85:40"><expr pos:start="85:30" pos:end="85:40"><literal type="string" pos:start="85:30" pos:end="85:40">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="87:13" pos:end="87:27">return <expr pos:start="87:20" pos:end="87:26"><operator pos:start="87:20" pos:end="87:20">-</operator><name pos:start="87:21" pos:end="87:26">ENOMEM</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="93:5" pos:end="111:5"><if pos:start="93:5" pos:end="111:5">if <condition pos:start="93:8" pos:end="93:39">(<expr pos:start="93:9" pos:end="93:38"><name pos:start="93:9" pos:end="93:21"><name pos:start="93:9" pos:end="93:15">request</name><operator pos:start="93:16" pos:end="93:17">-&gt;</operator><name pos:start="93:18" pos:end="93:21">type</name></name> <operator pos:start="93:23" pos:end="93:24">==</operator> <name pos:start="93:26" pos:end="93:38">NBD_CMD_WRITE</name></expr>)</condition> <block pos:start="93:41" pos:end="111:5">{<block_content pos:start="95:9" pos:end="109:68">

        <if_stmt pos:start="95:9" pos:end="101:9"><if pos:start="95:9" pos:end="101:9">if <condition pos:start="95:12" pos:end="95:69">(<expr pos:start="95:13" pos:end="95:68"><call pos:start="95:13" pos:end="95:64"><name pos:start="95:13" pos:end="95:20">nbd_read</name><argument_list pos:start="95:21" pos:end="95:64">(<argument pos:start="95:22" pos:end="95:32"><expr pos:start="95:22" pos:end="95:32"><name pos:start="95:22" pos:end="95:32"><name pos:start="95:22" pos:end="95:27">client</name><operator pos:start="95:28" pos:end="95:29">-&gt;</operator><name pos:start="95:30" pos:end="95:32">ioc</name></name></expr></argument>, <argument pos:start="95:35" pos:end="95:43"><expr pos:start="95:35" pos:end="95:43"><name pos:start="95:35" pos:end="95:43"><name pos:start="95:35" pos:end="95:37">req</name><operator pos:start="95:38" pos:end="95:39">-&gt;</operator><name pos:start="95:40" pos:end="95:43">data</name></name></expr></argument>, <argument pos:start="95:46" pos:end="95:57"><expr pos:start="95:46" pos:end="95:57"><name pos:start="95:46" pos:end="95:57"><name pos:start="95:46" pos:end="95:52">request</name><operator pos:start="95:53" pos:end="95:54">-&gt;</operator><name pos:start="95:55" pos:end="95:57">len</name></name></expr></argument>, <argument pos:start="95:60" pos:end="95:63"><expr pos:start="95:60" pos:end="95:63"><name pos:start="95:60" pos:end="95:63">errp</name></expr></argument>)</argument_list></call> <operator pos:start="95:66" pos:end="95:66">&lt;</operator> <literal type="number" pos:start="95:68" pos:end="95:68">0</literal></expr>)</condition> <block pos:start="95:71" pos:end="101:9">{<block_content pos:start="97:13" pos:end="99:24">

            <expr_stmt pos:start="97:13" pos:end="97:64"><expr pos:start="97:13" pos:end="97:63"><call pos:start="97:13" pos:end="97:63"><name pos:start="97:13" pos:end="97:25">error_prepend</name><argument_list pos:start="97:26" pos:end="97:63">(<argument pos:start="97:27" pos:end="97:30"><expr pos:start="97:27" pos:end="97:30"><name pos:start="97:27" pos:end="97:30">errp</name></expr></argument>, <argument pos:start="97:33" pos:end="97:62"><expr pos:start="97:33" pos:end="97:62"><literal type="string" pos:start="97:33" pos:end="97:62">"reading from socket failed: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="99:13" pos:end="99:24">return <expr pos:start="99:20" pos:end="99:23"><operator pos:start="99:20" pos:end="99:20">-</operator><name pos:start="99:21" pos:end="99:23">EIO</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:29"><expr pos:start="103:9" pos:end="103:28"><name pos:start="103:9" pos:end="103:21"><name pos:start="103:9" pos:end="103:11">req</name><operator pos:start="103:12" pos:end="103:13">-&gt;</operator><name pos:start="103:14" pos:end="103:21">complete</name></name> <operator pos:start="103:23" pos:end="103:23">=</operator> <name pos:start="103:25" pos:end="103:28">true</name></expr>;</expr_stmt>



        <expr_stmt pos:start="107:9" pos:end="109:68"><expr pos:start="107:9" pos:end="109:67"><call pos:start="107:9" pos:end="109:67"><name pos:start="107:9" pos:end="107:53">trace_nbd_co_receive_request_payload_received</name><argument_list pos:start="107:54" pos:end="109:67">(<argument pos:start="107:55" pos:end="107:69"><expr pos:start="107:55" pos:end="107:69"><name pos:start="107:55" pos:end="107:69"><name pos:start="107:55" pos:end="107:61">request</name><operator pos:start="107:62" pos:end="107:63">-&gt;</operator><name pos:start="107:64" pos:end="107:69">handle</name></name></expr></argument>,

                                                      <argument pos:start="109:55" pos:end="109:66"><expr pos:start="109:55" pos:end="109:66"><name pos:start="109:55" pos:end="109:66"><name pos:start="109:55" pos:end="109:61">request</name><operator pos:start="109:62" pos:end="109:63">-&gt;</operator><name pos:start="109:64" pos:end="109:66">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:32">/* Sanity checks, part 2. */</comment>

    <if_stmt pos:start="117:5" pos:end="127:5"><if pos:start="117:5" pos:end="127:5">if <condition pos:start="117:8" pos:end="117:57">(<expr pos:start="117:9" pos:end="117:56"><name pos:start="117:9" pos:end="117:21"><name pos:start="117:9" pos:end="117:15">request</name><operator pos:start="117:16" pos:end="117:17">-&gt;</operator><name pos:start="117:18" pos:end="117:21">from</name></name> <operator pos:start="117:23" pos:end="117:23">+</operator> <name pos:start="117:25" pos:end="117:36"><name pos:start="117:25" pos:end="117:31">request</name><operator pos:start="117:32" pos:end="117:33">-&gt;</operator><name pos:start="117:34" pos:end="117:36">len</name></name> <operator pos:start="117:38" pos:end="117:38">&gt;</operator> <name pos:start="117:40" pos:end="117:56"><name pos:start="117:40" pos:end="117:45">client</name><operator pos:start="117:46" pos:end="117:47">-&gt;</operator><name pos:start="117:48" pos:end="117:50">exp</name><operator pos:start="117:51" pos:end="117:52">-&gt;</operator><name pos:start="117:53" pos:end="117:56">size</name></name></expr>)</condition> <block pos:start="117:59" pos:end="127:5">{<block_content pos:start="119:9" pos:end="125:66">

        <expr_stmt pos:start="119:9" pos:end="123:48"><expr pos:start="119:9" pos:end="123:47"><call pos:start="119:9" pos:end="123:47"><name pos:start="119:9" pos:end="119:18">error_setg</name><argument_list pos:start="119:19" pos:end="123:47">(<argument pos:start="119:20" pos:end="119:23"><expr pos:start="119:20" pos:end="119:23"><name pos:start="119:20" pos:end="119:23">errp</name></expr></argument>, <argument pos:start="119:26" pos:end="121:37"><expr pos:start="119:26" pos:end="121:37"><literal type="string" pos:start="119:26" pos:end="119:54">"operation past EOF; From: %"</literal> <name pos:start="119:56" pos:end="119:61">PRIu64</name> <literal type="string" pos:start="119:63" pos:end="119:72">", Len: %"</literal> <name pos:start="119:74" pos:end="119:79">PRIu32</name>

                   <literal type="string" pos:start="121:20" pos:end="121:30">", Size: %"</literal> <name pos:start="121:32" pos:end="121:37">PRIu64</name></expr></argument>, <argument pos:start="121:40" pos:end="121:52"><expr pos:start="121:40" pos:end="121:52"><name pos:start="121:40" pos:end="121:52"><name pos:start="121:40" pos:end="121:46">request</name><operator pos:start="121:47" pos:end="121:48">-&gt;</operator><name pos:start="121:49" pos:end="121:52">from</name></name></expr></argument>, <argument pos:start="121:55" pos:end="121:66"><expr pos:start="121:55" pos:end="121:66"><name pos:start="121:55" pos:end="121:66"><name pos:start="121:55" pos:end="121:61">request</name><operator pos:start="121:62" pos:end="121:63">-&gt;</operator><name pos:start="121:64" pos:end="121:66">len</name></name></expr></argument>,

                   <argument pos:start="123:20" pos:end="123:46"><expr pos:start="123:20" pos:end="123:46"><operator pos:start="123:20" pos:end="123:20">(</operator><name pos:start="123:21" pos:end="123:28">uint64_t</name><operator pos:start="123:29" pos:end="123:29">)</operator><name pos:start="123:30" pos:end="123:46"><name pos:start="123:30" pos:end="123:35">client</name><operator pos:start="123:36" pos:end="123:37">-&gt;</operator><name pos:start="123:38" pos:end="123:40">exp</name><operator pos:start="123:41" pos:end="123:42">-&gt;</operator><name pos:start="123:43" pos:end="123:46">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="125:9" pos:end="125:66">return <expr pos:start="125:16" pos:end="125:65"><ternary pos:start="125:16" pos:end="125:65"><condition pos:start="125:16" pos:end="125:47"><expr pos:start="125:16" pos:end="125:45"><name pos:start="125:16" pos:end="125:28"><name pos:start="125:16" pos:end="125:22">request</name><operator pos:start="125:23" pos:end="125:24">-&gt;</operator><name pos:start="125:25" pos:end="125:28">type</name></name> <operator pos:start="125:30" pos:end="125:31">==</operator> <name pos:start="125:33" pos:end="125:45">NBD_CMD_WRITE</name></expr> ?</condition><then pos:start="125:49" pos:end="125:55"> <expr pos:start="125:49" pos:end="125:55"><operator pos:start="125:49" pos:end="125:49">-</operator><name pos:start="125:50" pos:end="125:55">ENOSPC</name></expr> </then><else pos:start="125:57" pos:end="125:65">: <expr pos:start="125:59" pos:end="125:65"><operator pos:start="125:59" pos:end="125:59">-</operator><name pos:start="125:60" pos:end="125:65">EINVAL</name></expr></else></ternary></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="129:5" pos:end="135:5"><if pos:start="129:5" pos:end="135:5">if <condition pos:start="129:8" pos:end="129:68">(<expr pos:start="129:9" pos:end="129:67"><name pos:start="129:9" pos:end="129:22"><name pos:start="129:9" pos:end="129:15">request</name><operator pos:start="129:16" pos:end="129:17">-&gt;</operator><name pos:start="129:18" pos:end="129:22">flags</name></name> <operator pos:start="129:24" pos:end="129:24">&amp;</operator> <operator pos:start="129:26" pos:end="129:26">~</operator><operator pos:start="129:27" pos:end="129:27">(</operator><name pos:start="129:28" pos:end="129:43">NBD_CMD_FLAG_FUA</name> <operator pos:start="129:45" pos:end="129:45">|</operator> <name pos:start="129:47" pos:end="129:66">NBD_CMD_FLAG_NO_HOLE</name><operator pos:start="129:67" pos:end="129:67">)</operator></expr>)</condition> <block pos:start="129:70" pos:end="135:5">{<block_content pos:start="131:9" pos:end="133:23">

        <expr_stmt pos:start="131:9" pos:end="131:73"><expr pos:start="131:9" pos:end="131:72"><call pos:start="131:9" pos:end="131:72"><name pos:start="131:9" pos:end="131:18">error_setg</name><argument_list pos:start="131:19" pos:end="131:72">(<argument pos:start="131:20" pos:end="131:23"><expr pos:start="131:20" pos:end="131:23"><name pos:start="131:20" pos:end="131:23">errp</name></expr></argument>, <argument pos:start="131:26" pos:end="131:55"><expr pos:start="131:26" pos:end="131:55"><literal type="string" pos:start="131:26" pos:end="131:55">"unsupported flags (got 0x%x)"</literal></expr></argument>, <argument pos:start="131:58" pos:end="131:71"><expr pos:start="131:58" pos:end="131:71"><name pos:start="131:58" pos:end="131:71"><name pos:start="131:58" pos:end="131:64">request</name><operator pos:start="131:65" pos:end="131:66">-&gt;</operator><name pos:start="131:67" pos:end="131:71">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="133:9" pos:end="133:23">return <expr pos:start="133:16" pos:end="133:22"><operator pos:start="133:16" pos:end="133:16">-</operator><name pos:start="133:17" pos:end="133:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="137:5" pos:end="145:5"><if pos:start="137:5" pos:end="145:5">if <condition pos:start="137:8" pos:end="139:48">(<expr pos:start="137:9" pos:end="139:47"><name pos:start="137:9" pos:end="137:21"><name pos:start="137:9" pos:end="137:15">request</name><operator pos:start="137:16" pos:end="137:17">-&gt;</operator><name pos:start="137:18" pos:end="137:21">type</name></name> <operator pos:start="137:23" pos:end="137:24">!=</operator> <name pos:start="137:26" pos:end="137:45">NBD_CMD_WRITE_ZEROES</name> <operator pos:start="137:47" pos:end="137:48">&amp;&amp;</operator>

        <operator pos:start="139:9" pos:end="139:9">(</operator><name pos:start="139:10" pos:end="139:23"><name pos:start="139:10" pos:end="139:16">request</name><operator pos:start="139:17" pos:end="139:18">-&gt;</operator><name pos:start="139:19" pos:end="139:23">flags</name></name> <operator pos:start="139:25" pos:end="139:25">&amp;</operator> <name pos:start="139:27" pos:end="139:46">NBD_CMD_FLAG_NO_HOLE</name><operator pos:start="139:47" pos:end="139:47">)</operator></expr>)</condition> <block pos:start="139:50" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:23">

        <expr_stmt pos:start="141:9" pos:end="141:72"><expr pos:start="141:9" pos:end="141:71"><call pos:start="141:9" pos:end="141:71"><name pos:start="141:9" pos:end="141:18">error_setg</name><argument_list pos:start="141:19" pos:end="141:71">(<argument pos:start="141:20" pos:end="141:23"><expr pos:start="141:20" pos:end="141:23"><name pos:start="141:20" pos:end="141:23">errp</name></expr></argument>, <argument pos:start="141:26" pos:end="141:54"><expr pos:start="141:26" pos:end="141:54"><literal type="string" pos:start="141:26" pos:end="141:54">"unexpected flags (got 0x%x)"</literal></expr></argument>, <argument pos:start="141:57" pos:end="141:70"><expr pos:start="141:57" pos:end="141:70"><name pos:start="141:57" pos:end="141:70"><name pos:start="141:57" pos:end="141:63">request</name><operator pos:start="141:64" pos:end="141:65">-&gt;</operator><name pos:start="141:66" pos:end="141:70">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="143:9" pos:end="143:23">return <expr pos:start="143:16" pos:end="143:22"><operator pos:start="143:16" pos:end="143:16">-</operator><name pos:start="143:17" pos:end="143:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="149:5" pos:end="149:13">return <expr pos:start="149:12" pos:end="149:12"><literal type="number" pos:start="149:12" pos:end="149:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
