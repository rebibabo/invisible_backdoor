<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26557.c" pos:tabs="8"><function pos:start="1:1" pos:end="209:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:27">file_ram_alloc</name><parameter_list pos:start="1:28" pos:end="5:45">(<parameter pos:start="1:29" pos:end="1:43"><decl pos:start="1:29" pos:end="1:43"><type pos:start="1:29" pos:end="1:43"><name pos:start="1:29" pos:end="1:36">RAMBlock</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:43">block</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:45"><decl pos:start="3:29" pos:end="3:45"><type pos:start="3:29" pos:end="3:45"><name pos:start="3:29" pos:end="3:38">ram_addr_t</name></type> <name pos:start="3:40" pos:end="3:45">memory</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:44"><decl pos:start="5:29" pos:end="5:44"><type pos:start="5:29" pos:end="5:44"><specifier pos:start="5:29" pos:end="5:33">const</specifier> <name pos:start="5:35" pos:end="5:38">char</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:44">path</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="209:1">{<block_content pos:start="9:5" pos:end="207:16">

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:24">sanitized_name</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:11">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">void</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:14">area</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:11"><decl pos:start="17:5" pos:end="17:10"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:10">fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:17">long</name></type> <name pos:start="19:19" pos:end="19:27">hpagesize</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:38"><expr pos:start="23:5" pos:end="23:37"><name pos:start="23:5" pos:end="23:13">hpagesize</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <call pos:start="23:17" pos:end="23:37"><name pos:start="23:17" pos:end="23:31">gethugepagesize</name><argument_list pos:start="23:32" pos:end="23:37">(<argument pos:start="23:33" pos:end="23:36"><expr pos:start="23:33" pos:end="23:36"><name pos:start="23:33" pos:end="23:36">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:19">(<expr pos:start="25:9" pos:end="25:18"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:18">hpagesize</name></expr>)</condition> <block pos:start="25:21" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:20">

        <return pos:start="27:9" pos:end="27:20">return <expr pos:start="27:16" pos:end="27:19"><name pos:start="27:16" pos:end="27:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:27">(<expr pos:start="33:9" pos:end="33:26"><name pos:start="33:9" pos:end="33:14">memory</name> <operator pos:start="33:16" pos:end="33:16">&lt;</operator> <name pos:start="33:18" pos:end="33:26">hpagesize</name></expr>)</condition> <block pos:start="33:29" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:20">

        <return pos:start="35:9" pos:end="35:20">return <expr pos:start="35:16" pos:end="35:19"><name pos:start="35:16" pos:end="35:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:45">(<expr pos:start="41:9" pos:end="41:44"><call pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:19">kvm_enabled</name><argument_list pos:start="41:20" pos:end="41:21">()</argument_list></call> <operator pos:start="41:23" pos:end="41:24">&amp;&amp;</operator> <operator pos:start="41:26" pos:end="41:26">!</operator><call pos:start="41:27" pos:end="41:44"><name pos:start="41:27" pos:end="41:42">kvm_has_sync_mmu</name><argument_list pos:start="41:43" pos:end="41:44">()</argument_list></call></expr>)</condition> <block pos:start="41:47" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:20">

        <expr_stmt pos:start="43:9" pos:end="43:81"><expr pos:start="43:9" pos:end="43:80"><call pos:start="43:9" pos:end="43:80"><name pos:start="43:9" pos:end="43:15">fprintf</name><argument_list pos:start="43:16" pos:end="43:80">(<argument pos:start="43:17" pos:end="43:22"><expr pos:start="43:17" pos:end="43:22"><name pos:start="43:17" pos:end="43:22">stderr</name></expr></argument>, <argument pos:start="43:25" pos:end="43:79"><expr pos:start="43:25" pos:end="43:79"><literal type="string" pos:start="43:25" pos:end="43:79">"host lacks kvm mmu notifiers, -mem-path unsupported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:20">return <expr pos:start="45:16" pos:end="45:19"><name pos:start="45:16" pos:end="45:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:71">/* Make name safe to use with mkstemp by replacing '/' with '_'. */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:47"><expr pos:start="53:5" pos:end="53:46"><name pos:start="53:5" pos:end="53:18">sanitized_name</name> <operator pos:start="53:20" pos:end="53:20">=</operator> <call pos:start="53:22" pos:end="53:46"><name pos:start="53:22" pos:end="53:29">g_strdup</name><argument_list pos:start="53:30" pos:end="53:46">(<argument pos:start="53:31" pos:end="53:45"><expr pos:start="53:31" pos:end="53:45"><name pos:start="53:31" pos:end="53:45"><name pos:start="53:31" pos:end="53:35">block</name><operator pos:start="53:36" pos:end="53:37">-&gt;</operator><name pos:start="53:38" pos:end="53:39">mr</name><operator pos:start="53:40" pos:end="53:41">-&gt;</operator><name pos:start="53:42" pos:end="53:45">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="55:5" pos:end="61:5">for <control pos:start="55:9" pos:end="55:45">(<init pos:start="55:10" pos:end="55:28"><expr pos:start="55:10" pos:end="55:27"><name pos:start="55:10" pos:end="55:10">c</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <name pos:start="55:14" pos:end="55:27">sanitized_name</name></expr>;</init> <condition pos:start="55:30" pos:end="55:40"><expr pos:start="55:30" pos:end="55:39"><operator pos:start="55:30" pos:end="55:30">*</operator><name pos:start="55:31" pos:end="55:31">c</name> <operator pos:start="55:33" pos:end="55:34">!=</operator> <literal type="char" pos:start="55:36" pos:end="55:39">'\0'</literal></expr>;</condition> <incr pos:start="55:42" pos:end="55:44"><expr pos:start="55:42" pos:end="55:44"><name pos:start="55:42" pos:end="55:42">c</name><operator pos:start="55:43" pos:end="55:44">++</operator></expr></incr>)</control> <block pos:start="55:47" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:21">

        <if_stmt pos:start="57:9" pos:end="59:21"><if pos:start="57:9" pos:end="59:21">if <condition pos:start="57:12" pos:end="57:22">(<expr pos:start="57:13" pos:end="57:21"><operator pos:start="57:13" pos:end="57:13">*</operator><name pos:start="57:14" pos:end="57:14">c</name> <operator pos:start="57:16" pos:end="57:17">==</operator> <literal type="char" pos:start="57:19" pos:end="57:21">'/'</literal></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:21"><block_content pos:start="59:13" pos:end="59:21">

            <expr_stmt pos:start="59:13" pos:end="59:21"><expr pos:start="59:13" pos:end="59:20"><operator pos:start="59:13" pos:end="59:13">*</operator><name pos:start="59:14" pos:end="59:14">c</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <literal type="char" pos:start="59:18" pos:end="59:20">'_'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="65:5" pos:end="67:47"><expr pos:start="65:5" pos:end="67:46"><name pos:start="65:5" pos:end="65:12">filename</name> <operator pos:start="65:14" pos:end="65:14">=</operator> <call pos:start="65:16" pos:end="67:46"><name pos:start="65:16" pos:end="65:30">g_strdup_printf</name><argument_list pos:start="65:31" pos:end="67:46">(<argument pos:start="65:32" pos:end="65:59"><expr pos:start="65:32" pos:end="65:59"><literal type="string" pos:start="65:32" pos:end="65:59">"%s/qemu_back_mem.%s.XXXXXX"</literal></expr></argument>, <argument pos:start="65:62" pos:end="65:65"><expr pos:start="65:62" pos:end="65:65"><name pos:start="65:62" pos:end="65:65">path</name></expr></argument>,

                               <argument pos:start="67:32" pos:end="67:45"><expr pos:start="67:32" pos:end="67:45"><name pos:start="67:32" pos:end="67:45">sanitized_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:27"><expr pos:start="69:5" pos:end="69:26"><call pos:start="69:5" pos:end="69:26"><name pos:start="69:5" pos:end="69:10">g_free</name><argument_list pos:start="69:11" pos:end="69:26">(<argument pos:start="69:12" pos:end="69:25"><expr pos:start="69:12" pos:end="69:25"><name pos:start="69:12" pos:end="69:25">sanitized_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:27"><expr pos:start="73:5" pos:end="73:26"><name pos:start="73:5" pos:end="73:6">fd</name> <operator pos:start="73:8" pos:end="73:8">=</operator> <call pos:start="73:10" pos:end="73:26"><name pos:start="73:10" pos:end="73:16">mkstemp</name><argument_list pos:start="73:17" pos:end="73:26">(<argument pos:start="73:18" pos:end="73:25"><expr pos:start="73:18" pos:end="73:25"><name pos:start="73:18" pos:end="73:25">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="83:5"><if pos:start="75:5" pos:end="83:5">if <condition pos:start="75:8" pos:end="75:15">(<expr pos:start="75:9" pos:end="75:14"><name pos:start="75:9" pos:end="75:10">fd</name> <operator pos:start="75:12" pos:end="75:12">&lt;</operator> <literal type="number" pos:start="75:14" pos:end="75:14">0</literal></expr>)</condition> <block pos:start="75:17" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:20">

        <expr_stmt pos:start="77:9" pos:end="77:63"><expr pos:start="77:9" pos:end="77:62"><call pos:start="77:9" pos:end="77:62"><name pos:start="77:9" pos:end="77:14">perror</name><argument_list pos:start="77:15" pos:end="77:62">(<argument pos:start="77:16" pos:end="77:61"><expr pos:start="77:16" pos:end="77:61"><literal type="string" pos:start="77:16" pos:end="77:61">"unable to create backing store for hugepages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:25"><expr pos:start="79:9" pos:end="79:24"><call pos:start="79:9" pos:end="79:24"><name pos:start="79:9" pos:end="79:14">g_free</name><argument_list pos:start="79:15" pos:end="79:24">(<argument pos:start="79:16" pos:end="79:23"><expr pos:start="79:16" pos:end="79:23"><name pos:start="79:16" pos:end="79:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:20">return <expr pos:start="81:16" pos:end="81:19"><name pos:start="81:16" pos:end="81:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:21"><expr pos:start="85:5" pos:end="85:20"><call pos:start="85:5" pos:end="85:20"><name pos:start="85:5" pos:end="85:10">unlink</name><argument_list pos:start="85:11" pos:end="85:20">(<argument pos:start="85:12" pos:end="85:19"><expr pos:start="85:12" pos:end="85:19"><name pos:start="85:12" pos:end="85:19">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:21"><expr pos:start="87:5" pos:end="87:20"><call pos:start="87:5" pos:end="87:20"><name pos:start="87:5" pos:end="87:10">g_free</name><argument_list pos:start="87:11" pos:end="87:20">(<argument pos:start="87:12" pos:end="87:19"><expr pos:start="87:12" pos:end="87:19"><name pos:start="87:12" pos:end="87:19">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:51"><expr pos:start="91:5" pos:end="91:50"><name pos:start="91:5" pos:end="91:10">memory</name> <operator pos:start="91:12" pos:end="91:12">=</operator> <operator pos:start="91:14" pos:end="91:14">(</operator><name pos:start="91:15" pos:end="91:20">memory</name><operator pos:start="91:21" pos:end="91:21">+</operator><name pos:start="91:22" pos:end="91:30">hpagesize</name><operator pos:start="91:31" pos:end="91:31">-</operator><literal type="number" pos:start="91:32" pos:end="91:32">1</literal><operator pos:start="91:33" pos:end="91:33">)</operator> <operator pos:start="91:35" pos:end="91:35">&amp;</operator> <operator pos:start="91:37" pos:end="91:37">~</operator><operator pos:start="91:38" pos:end="91:38">(</operator><name pos:start="91:39" pos:end="91:47">hpagesize</name><operator pos:start="91:48" pos:end="91:48">-</operator><literal type="number" pos:start="91:49" pos:end="91:49">1</literal><operator pos:start="91:50" pos:end="91:50">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="95:5" pos:end="105:7">/*

     * ftruncate is not supported by hugetlbfs in older

     * hosts, so don't bother bailing out on errors.

     * If anything goes wrong with it under other filesystems,

     * mmap will fail.

     */</comment>

    <if_stmt pos:start="107:5" pos:end="109:28"><if pos:start="107:5" pos:end="109:28">if <condition pos:start="107:8" pos:end="107:30">(<expr pos:start="107:9" pos:end="107:29"><call pos:start="107:9" pos:end="107:29"><name pos:start="107:9" pos:end="107:17">ftruncate</name><argument_list pos:start="107:18" pos:end="107:29">(<argument pos:start="107:19" pos:end="107:20"><expr pos:start="107:19" pos:end="107:20"><name pos:start="107:19" pos:end="107:20">fd</name></expr></argument>, <argument pos:start="107:23" pos:end="107:28"><expr pos:start="107:23" pos:end="107:28"><name pos:start="107:23" pos:end="107:28">memory</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="109:9" pos:end="109:28"><block_content pos:start="109:9" pos:end="109:28">

        <expr_stmt pos:start="109:9" pos:end="109:28"><expr pos:start="109:9" pos:end="109:27"><call pos:start="109:9" pos:end="109:27"><name pos:start="109:9" pos:end="109:14">perror</name><argument_list pos:start="109:15" pos:end="109:27">(<argument pos:start="109:16" pos:end="109:26"><expr pos:start="109:16" pos:end="109:26"><literal type="string" pos:start="109:16" pos:end="109:26">"ftruncate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:71"><expr pos:start="113:5" pos:end="113:70"><name pos:start="113:5" pos:end="113:8">area</name> <operator pos:start="113:10" pos:end="113:10">=</operator> <call pos:start="113:12" pos:end="113:70"><name pos:start="113:12" pos:end="113:15">mmap</name><argument_list pos:start="113:16" pos:end="113:70">(<argument pos:start="113:17" pos:end="113:17"><expr pos:start="113:17" pos:end="113:17"><literal type="number" pos:start="113:17" pos:end="113:17">0</literal></expr></argument>, <argument pos:start="113:20" pos:end="113:25"><expr pos:start="113:20" pos:end="113:25"><name pos:start="113:20" pos:end="113:25">memory</name></expr></argument>, <argument pos:start="113:28" pos:end="113:49"><expr pos:start="113:28" pos:end="113:49"><name pos:start="113:28" pos:end="113:36">PROT_READ</name> <operator pos:start="113:38" pos:end="113:38">|</operator> <name pos:start="113:40" pos:end="113:49">PROT_WRITE</name></expr></argument>, <argument pos:start="113:52" pos:end="113:62"><expr pos:start="113:52" pos:end="113:62"><name pos:start="113:52" pos:end="113:62">MAP_PRIVATE</name></expr></argument>, <argument pos:start="113:65" pos:end="113:66"><expr pos:start="113:65" pos:end="113:66"><name pos:start="113:65" pos:end="113:66">fd</name></expr></argument>, <argument pos:start="113:69" pos:end="113:69"><expr pos:start="113:69" pos:end="113:69"><literal type="number" pos:start="113:69" pos:end="113:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="115:5" pos:end="123:5"><if pos:start="115:5" pos:end="123:5">if <condition pos:start="115:8" pos:end="115:27">(<expr pos:start="115:9" pos:end="115:26"><name pos:start="115:9" pos:end="115:12">area</name> <operator pos:start="115:14" pos:end="115:15">==</operator> <name pos:start="115:17" pos:end="115:26">MAP_FAILED</name></expr>)</condition> <block pos:start="115:29" pos:end="123:5">{<block_content pos:start="117:9" pos:end="121:22">

        <expr_stmt pos:start="117:9" pos:end="117:55"><expr pos:start="117:9" pos:end="117:54"><call pos:start="117:9" pos:end="117:54"><name pos:start="117:9" pos:end="117:14">perror</name><argument_list pos:start="117:15" pos:end="117:54">(<argument pos:start="117:16" pos:end="117:53"><expr pos:start="117:16" pos:end="117:53"><literal type="string" pos:start="117:16" pos:end="117:53">"file_ram_alloc: can't mmap RAM pages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:18"><expr pos:start="119:9" pos:end="119:17"><call pos:start="119:9" pos:end="119:17"><name pos:start="119:9" pos:end="119:13">close</name><argument_list pos:start="119:14" pos:end="119:17">(<argument pos:start="119:15" pos:end="119:16"><expr pos:start="119:15" pos:end="119:16"><name pos:start="119:15" pos:end="119:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="121:9" pos:end="121:22">return <expr pos:start="121:16" pos:end="121:21"><operator pos:start="121:16" pos:end="121:16">(</operator><name pos:start="121:17" pos:end="121:20">NULL</name><operator pos:start="121:21" pos:end="121:21">)</operator></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="127:5" pos:end="201:5"><if pos:start="127:5" pos:end="201:5">if <condition pos:start="127:8" pos:end="127:21">(<expr pos:start="127:9" pos:end="127:20"><name pos:start="127:9" pos:end="127:20">mem_prealloc</name></expr>)</condition> <block pos:start="127:23" pos:end="201:5">{<block_content pos:start="129:9" pos:end="199:52">

        <decl_stmt pos:start="129:9" pos:end="129:19"><decl pos:start="129:9" pos:end="129:15"><type pos:start="129:9" pos:end="129:11"><name pos:start="129:9" pos:end="129:11">int</name></type> <name pos:start="129:13" pos:end="129:15">ret</name></decl>, <decl pos:start="129:18" pos:end="129:18"><type ref="prev" pos:start="129:9" pos:end="129:11"/><name pos:start="129:18" pos:end="129:18">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="131:9" pos:end="131:37"><decl pos:start="131:9" pos:end="131:28"><type pos:start="131:9" pos:end="131:24"><name pos:start="131:9" pos:end="131:24"><name pos:start="131:9" pos:end="131:14">struct</name> <name pos:start="131:16" pos:end="131:24">sigaction</name></name></type> <name pos:start="131:26" pos:end="131:28">act</name></decl>, <decl pos:start="131:31" pos:end="131:36"><type ref="prev" pos:start="131:9" pos:end="131:24"/><name pos:start="131:31" pos:end="131:36">oldact</name></decl>;</decl_stmt>

        <decl_stmt pos:start="133:9" pos:end="133:29"><decl pos:start="133:9" pos:end="133:20"><type pos:start="133:9" pos:end="133:16"><name pos:start="133:9" pos:end="133:16">sigset_t</name></type> <name pos:start="133:18" pos:end="133:20">set</name></decl>, <decl pos:start="133:23" pos:end="133:28"><type ref="prev" pos:start="133:9" pos:end="133:16"/><name pos:start="133:23" pos:end="133:28">oldset</name></decl>;</decl_stmt>



        <expr_stmt pos:start="137:9" pos:end="137:37"><expr pos:start="137:9" pos:end="137:36"><call pos:start="137:9" pos:end="137:36"><name pos:start="137:9" pos:end="137:14">memset</name><argument_list pos:start="137:15" pos:end="137:36">(<argument pos:start="137:16" pos:end="137:19"><expr pos:start="137:16" pos:end="137:19"><operator pos:start="137:16" pos:end="137:16">&amp;</operator><name pos:start="137:17" pos:end="137:19">act</name></expr></argument>, <argument pos:start="137:22" pos:end="137:22"><expr pos:start="137:22" pos:end="137:22"><literal type="number" pos:start="137:22" pos:end="137:22">0</literal></expr></argument>, <argument pos:start="137:25" pos:end="137:35"><expr pos:start="137:25" pos:end="137:35"><sizeof pos:start="137:25" pos:end="137:35">sizeof<argument_list pos:start="137:31" pos:end="137:35">(<argument pos:start="137:32" pos:end="137:34"><expr pos:start="137:32" pos:end="137:34"><name pos:start="137:32" pos:end="137:34">act</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:41"><expr pos:start="139:9" pos:end="139:40"><name pos:start="139:9" pos:end="139:22"><name pos:start="139:9" pos:end="139:11">act</name><operator pos:start="139:12" pos:end="139:12">.</operator><name pos:start="139:13" pos:end="139:22">sa_handler</name></name> <operator pos:start="139:24" pos:end="139:24">=</operator> <operator pos:start="139:26" pos:end="139:26">&amp;</operator><name pos:start="139:27" pos:end="139:40">sigbus_handler</name></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:25"><expr pos:start="141:9" pos:end="141:24"><name pos:start="141:9" pos:end="141:20"><name pos:start="141:9" pos:end="141:11">act</name><operator pos:start="141:12" pos:end="141:12">.</operator><name pos:start="141:13" pos:end="141:20">sa_flags</name></name> <operator pos:start="141:22" pos:end="141:22">=</operator> <literal type="number" pos:start="141:24" pos:end="141:24">0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="145:9" pos:end="145:47"><expr pos:start="145:9" pos:end="145:46"><name pos:start="145:9" pos:end="145:11">ret</name> <operator pos:start="145:13" pos:end="145:13">=</operator> <call pos:start="145:15" pos:end="145:46"><name pos:start="145:15" pos:end="145:23">sigaction</name><argument_list pos:start="145:24" pos:end="145:46">(<argument pos:start="145:25" pos:end="145:30"><expr pos:start="145:25" pos:end="145:30"><name pos:start="145:25" pos:end="145:30">SIGBUS</name></expr></argument>, <argument pos:start="145:33" pos:end="145:36"><expr pos:start="145:33" pos:end="145:36"><operator pos:start="145:33" pos:end="145:33">&amp;</operator><name pos:start="145:34" pos:end="145:36">act</name></expr></argument>, <argument pos:start="145:39" pos:end="145:45"><expr pos:start="145:39" pos:end="145:45"><operator pos:start="145:39" pos:end="145:39">&amp;</operator><name pos:start="145:40" pos:end="145:45">oldact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="147:9" pos:end="153:9"><if pos:start="147:9" pos:end="153:9">if <condition pos:start="147:12" pos:end="147:16">(<expr pos:start="147:13" pos:end="147:15"><name pos:start="147:13" pos:end="147:15">ret</name></expr>)</condition> <block pos:start="147:18" pos:end="153:9">{<block_content pos:start="149:13" pos:end="151:20">

            <expr_stmt pos:start="149:13" pos:end="149:71"><expr pos:start="149:13" pos:end="149:70"><call pos:start="149:13" pos:end="149:70"><name pos:start="149:13" pos:end="149:18">perror</name><argument_list pos:start="149:19" pos:end="149:70">(<argument pos:start="149:20" pos:end="149:69"><expr pos:start="149:20" pos:end="149:69"><literal type="string" pos:start="149:20" pos:end="149:69">"file_ram_alloc: failed to install signal handler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:20"><expr pos:start="151:13" pos:end="151:19"><call pos:start="151:13" pos:end="151:19"><name pos:start="151:13" pos:end="151:16">exit</name><argument_list pos:start="151:17" pos:end="151:19">(<argument pos:start="151:18" pos:end="151:18"><expr pos:start="151:18" pos:end="151:18"><literal type="number" pos:start="151:18" pos:end="151:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="157:9" pos:end="157:28">/* unblock SIGBUS */</comment>

        <expr_stmt pos:start="159:9" pos:end="159:26"><expr pos:start="159:9" pos:end="159:25"><call pos:start="159:9" pos:end="159:25"><name pos:start="159:9" pos:end="159:19">sigemptyset</name><argument_list pos:start="159:20" pos:end="159:25">(<argument pos:start="159:21" pos:end="159:24"><expr pos:start="159:21" pos:end="159:24"><operator pos:start="159:21" pos:end="159:21">&amp;</operator><name pos:start="159:22" pos:end="159:24">set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:32"><expr pos:start="161:9" pos:end="161:31"><call pos:start="161:9" pos:end="161:31"><name pos:start="161:9" pos:end="161:17">sigaddset</name><argument_list pos:start="161:18" pos:end="161:31">(<argument pos:start="161:19" pos:end="161:22"><expr pos:start="161:19" pos:end="161:22"><operator pos:start="161:19" pos:end="161:19">&amp;</operator><name pos:start="161:20" pos:end="161:22">set</name></expr></argument>, <argument pos:start="161:25" pos:end="161:30"><expr pos:start="161:25" pos:end="161:30"><name pos:start="161:25" pos:end="161:30">SIGBUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:52"><expr pos:start="163:9" pos:end="163:51"><call pos:start="163:9" pos:end="163:51"><name pos:start="163:9" pos:end="163:23">pthread_sigmask</name><argument_list pos:start="163:24" pos:end="163:51">(<argument pos:start="163:25" pos:end="163:35"><expr pos:start="163:25" pos:end="163:35"><name pos:start="163:25" pos:end="163:35">SIG_UNBLOCK</name></expr></argument>, <argument pos:start="163:38" pos:end="163:41"><expr pos:start="163:38" pos:end="163:41"><operator pos:start="163:38" pos:end="163:38">&amp;</operator><name pos:start="163:39" pos:end="163:41">set</name></expr></argument>, <argument pos:start="163:44" pos:end="163:50"><expr pos:start="163:44" pos:end="163:50"><operator pos:start="163:44" pos:end="163:44">&amp;</operator><name pos:start="163:45" pos:end="163:50">oldset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="167:9" pos:end="173:9"><if pos:start="167:9" pos:end="173:9">if <condition pos:start="167:12" pos:end="167:34">(<expr pos:start="167:13" pos:end="167:33"><call pos:start="167:13" pos:end="167:33"><name pos:start="167:13" pos:end="167:21">sigsetjmp</name><argument_list pos:start="167:22" pos:end="167:33">(<argument pos:start="167:23" pos:end="167:29"><expr pos:start="167:23" pos:end="167:29"><name pos:start="167:23" pos:end="167:29">sigjump</name></expr></argument>, <argument pos:start="167:32" pos:end="167:32"><expr pos:start="167:32" pos:end="167:32"><literal type="number" pos:start="167:32" pos:end="167:32">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="167:36" pos:end="173:9">{<block_content pos:start="169:13" pos:end="171:20">

            <expr_stmt pos:start="169:13" pos:end="169:77"><expr pos:start="169:13" pos:end="169:76"><call pos:start="169:13" pos:end="169:76"><name pos:start="169:13" pos:end="169:19">fprintf</name><argument_list pos:start="169:20" pos:end="169:76">(<argument pos:start="169:21" pos:end="169:26"><expr pos:start="169:21" pos:end="169:26"><name pos:start="169:21" pos:end="169:26">stderr</name></expr></argument>, <argument pos:start="169:29" pos:end="169:75"><expr pos:start="169:29" pos:end="169:75"><literal type="string" pos:start="169:29" pos:end="169:75">"file_ram_alloc: failed to preallocate pages\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:20"><expr pos:start="171:13" pos:end="171:19"><call pos:start="171:13" pos:end="171:19"><name pos:start="171:13" pos:end="171:16">exit</name><argument_list pos:start="171:17" pos:end="171:19">(<argument pos:start="171:18" pos:end="171:18"><expr pos:start="171:18" pos:end="171:18"><literal type="number" pos:start="171:18" pos:end="171:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="177:9" pos:end="177:52">/* MAP_POPULATE silently ignores failures */</comment>

        <for pos:start="179:9" pos:end="183:9">for <control pos:start="179:13" pos:end="179:50">(<init pos:start="179:14" pos:end="179:19"><expr pos:start="179:14" pos:end="179:18"><name pos:start="179:14" pos:end="179:14">i</name> <operator pos:start="179:16" pos:end="179:16">=</operator> <literal type="number" pos:start="179:18" pos:end="179:18">0</literal></expr>;</init> <condition pos:start="179:21" pos:end="179:45"><expr pos:start="179:21" pos:end="179:44"><name pos:start="179:21" pos:end="179:21">i</name> <operator pos:start="179:23" pos:end="179:23">&lt;</operator> <operator pos:start="179:25" pos:end="179:25">(</operator><name pos:start="179:26" pos:end="179:31">memory</name><operator pos:start="179:32" pos:end="179:32">/</operator><name pos:start="179:33" pos:end="179:41">hpagesize</name><operator pos:start="179:42" pos:end="179:42">)</operator><operator pos:start="179:43" pos:end="179:43">-</operator><literal type="number" pos:start="179:44" pos:end="179:44">1</literal></expr>;</condition> <incr pos:start="179:47" pos:end="179:49"><expr pos:start="179:47" pos:end="179:49"><name pos:start="179:47" pos:end="179:47">i</name><operator pos:start="179:48" pos:end="179:49">++</operator></expr></incr>)</control> <block pos:start="179:52" pos:end="183:9">{<block_content pos:start="181:13" pos:end="181:47">

            <expr_stmt pos:start="181:13" pos:end="181:47"><expr pos:start="181:13" pos:end="181:46"><call pos:start="181:13" pos:end="181:46"><name pos:start="181:13" pos:end="181:18">memset</name><argument_list pos:start="181:19" pos:end="181:46">(<argument pos:start="181:20" pos:end="181:39"><expr pos:start="181:20" pos:end="181:39"><name pos:start="181:20" pos:end="181:23">area</name> <operator pos:start="181:25" pos:end="181:25">+</operator> <operator pos:start="181:27" pos:end="181:27">(</operator><name pos:start="181:28" pos:end="181:36">hpagesize</name><operator pos:start="181:37" pos:end="181:37">*</operator><name pos:start="181:38" pos:end="181:38">i</name><operator pos:start="181:39" pos:end="181:39">)</operator></expr></argument>, <argument pos:start="181:42" pos:end="181:42"><expr pos:start="181:42" pos:end="181:42"><literal type="number" pos:start="181:42" pos:end="181:42">0</literal></expr></argument>, <argument pos:start="181:45" pos:end="181:45"><expr pos:start="181:45" pos:end="181:45"><literal type="number" pos:start="181:45" pos:end="181:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="187:9" pos:end="187:47"><expr pos:start="187:9" pos:end="187:46"><name pos:start="187:9" pos:end="187:11">ret</name> <operator pos:start="187:13" pos:end="187:13">=</operator> <call pos:start="187:15" pos:end="187:46"><name pos:start="187:15" pos:end="187:23">sigaction</name><argument_list pos:start="187:24" pos:end="187:46">(<argument pos:start="187:25" pos:end="187:30"><expr pos:start="187:25" pos:end="187:30"><name pos:start="187:25" pos:end="187:30">SIGBUS</name></expr></argument>, <argument pos:start="187:33" pos:end="187:39"><expr pos:start="187:33" pos:end="187:39"><operator pos:start="187:33" pos:end="187:33">&amp;</operator><name pos:start="187:34" pos:end="187:39">oldact</name></expr></argument>, <argument pos:start="187:42" pos:end="187:45"><expr pos:start="187:42" pos:end="187:45"><name pos:start="187:42" pos:end="187:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="189:9" pos:end="195:9"><if pos:start="189:9" pos:end="195:9">if <condition pos:start="189:12" pos:end="189:16">(<expr pos:start="189:13" pos:end="189:15"><name pos:start="189:13" pos:end="189:15">ret</name></expr>)</condition> <block pos:start="189:18" pos:end="195:9">{<block_content pos:start="191:13" pos:end="193:20">

            <expr_stmt pos:start="191:13" pos:end="191:73"><expr pos:start="191:13" pos:end="191:72"><call pos:start="191:13" pos:end="191:72"><name pos:start="191:13" pos:end="191:18">perror</name><argument_list pos:start="191:19" pos:end="191:72">(<argument pos:start="191:20" pos:end="191:71"><expr pos:start="191:20" pos:end="191:71"><literal type="string" pos:start="191:20" pos:end="191:71">"file_ram_alloc: failed to reinstall signal handler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:20"><expr pos:start="193:13" pos:end="193:19"><call pos:start="193:13" pos:end="193:19"><name pos:start="193:13" pos:end="193:16">exit</name><argument_list pos:start="193:17" pos:end="193:19">(<argument pos:start="193:18" pos:end="193:18"><expr pos:start="193:18" pos:end="193:18"><literal type="number" pos:start="193:18" pos:end="193:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="199:9" pos:end="199:52"><expr pos:start="199:9" pos:end="199:51"><call pos:start="199:9" pos:end="199:51"><name pos:start="199:9" pos:end="199:23">pthread_sigmask</name><argument_list pos:start="199:24" pos:end="199:51">(<argument pos:start="199:25" pos:end="199:35"><expr pos:start="199:25" pos:end="199:35"><name pos:start="199:25" pos:end="199:35">SIG_SETMASK</name></expr></argument>, <argument pos:start="199:38" pos:end="199:44"><expr pos:start="199:38" pos:end="199:44"><operator pos:start="199:38" pos:end="199:38">&amp;</operator><name pos:start="199:39" pos:end="199:44">oldset</name></expr></argument>, <argument pos:start="199:47" pos:end="199:50"><expr pos:start="199:47" pos:end="199:50"><name pos:start="199:47" pos:end="199:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="205:5" pos:end="205:19"><expr pos:start="205:5" pos:end="205:18"><name pos:start="205:5" pos:end="205:13"><name pos:start="205:5" pos:end="205:9">block</name><operator pos:start="205:10" pos:end="205:11">-&gt;</operator><name pos:start="205:12" pos:end="205:13">fd</name></name> <operator pos:start="205:15" pos:end="205:15">=</operator> <name pos:start="205:17" pos:end="205:18">fd</name></expr>;</expr_stmt>

    <return pos:start="207:5" pos:end="207:16">return <expr pos:start="207:12" pos:end="207:15"><name pos:start="207:12" pos:end="207:15">area</name></expr>;</return>

</block_content>}</block></function>
</unit>
