<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21094.c" pos:tabs="8"><function pos:start="1:1" pos:end="267:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">ac3_decode_frame</name><parameter_list pos:start="1:28" pos:end="1:107">(<parameter pos:start="1:29" pos:end="1:50"><decl pos:start="1:29" pos:end="1:50"><type pos:start="1:29" pos:end="1:50"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type> <name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:62"><decl pos:start="1:53" pos:end="1:62"><type pos:start="1:53" pos:end="1:62"><name pos:start="1:53" pos:end="1:56">void</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">data</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:78"><decl pos:start="1:65" pos:end="1:78"><type pos:start="1:65" pos:end="1:78"><name pos:start="1:65" pos:end="1:67">int</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:78">data_size</name></decl></parameter>, <parameter pos:start="1:81" pos:end="1:92"><decl pos:start="1:81" pos:end="1:92"><type pos:start="1:81" pos:end="1:92"><name pos:start="1:81" pos:end="1:87">uint8_t</name> <modifier pos:start="1:89" pos:end="1:89">*</modifier></type><name pos:start="1:90" pos:end="1:92">buf</name></decl></parameter>, <parameter pos:start="1:95" pos:end="1:106"><decl pos:start="1:95" pos:end="1:106"><type pos:start="1:95" pos:end="1:106"><name pos:start="1:95" pos:end="1:97">int</name></type> <name pos:start="1:99" pos:end="1:106">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="267:1">{<block_content pos:start="5:5" pos:end="265:36">

    <decl_stmt pos:start="5:5" pos:end="5:65"><decl pos:start="5:5" pos:end="5:64"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">AC3DecodeContext</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:25">ctx</name> <init pos:start="5:27" pos:end="5:64">= <expr pos:start="5:29" pos:end="5:64"><operator pos:start="5:29" pos:end="5:29">(</operator><name pos:start="5:30" pos:end="5:45">AC3DecodeContext</name> <operator pos:start="5:47" pos:end="5:47">*</operator><operator pos:start="5:48" pos:end="5:48">)</operator><name pos:start="5:49" pos:end="5:64"><name pos:start="5:49" pos:end="5:53">avctx</name><operator pos:start="5:54" pos:end="5:55">-&gt;</operator><name pos:start="5:56" pos:end="5:64">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">ac3_audio_block</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:23">ab</name> <init pos:start="7:25" pos:end="7:43">= <expr pos:start="7:27" pos:end="7:43"><operator pos:start="7:27" pos:end="7:27">&amp;</operator><name pos:start="7:28" pos:end="7:43"><name pos:start="7:28" pos:end="7:30">ctx</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:43">audio_block</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:19">frame_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:12"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:12">j</name></decl>, <decl pos:start="11:15" pos:end="11:15"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:15">k</name></decl>, <decl pos:start="11:18" pos:end="11:18"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:18" pos:end="11:18">l</name></decl>, <decl pos:start="11:21" pos:end="11:25"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:21" pos:end="11:25">value</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:64"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:9"><name pos:start="13:5" pos:end="13:9">float</name></type> <name pos:start="13:11" pos:end="13:35"><name pos:start="13:11" pos:end="13:30">tmp_block_first_half</name><index pos:start="13:31" pos:end="13:35">[<expr pos:start="13:32" pos:end="13:34"><literal type="number" pos:start="13:32" pos:end="13:34">128</literal></expr>]</index></name></decl>, <decl pos:start="13:38" pos:end="13:63"><type ref="prev" pos:start="13:5" pos:end="13:9"/><name pos:start="13:38" pos:end="13:63"><name pos:start="13:38" pos:end="13:58">tmp_block_second_half</name><index pos:start="13:59" pos:end="13:63">[<expr pos:start="13:60" pos:end="13:62"><literal type="number" pos:start="13:60" pos:end="13:62">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:43"><decl pos:start="15:5" pos:end="15:42"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">int16_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:24">out_samples</name> <init pos:start="15:26" pos:end="15:42">= <expr pos:start="15:28" pos:end="15:42"><operator pos:start="15:28" pos:end="15:28">(</operator><name pos:start="15:29" pos:end="15:35">int16_t</name> <operator pos:start="15:37" pos:end="15:37">*</operator><operator pos:start="15:38" pos:end="15:38">)</operator><name pos:start="15:39" pos:end="15:42">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:15">nfchans</name></decl>;</decl_stmt>



    <comment type="line" pos:start="21:5" pos:end="21:28">//Synchronize the frame.</comment>

    <expr_stmt pos:start="23:5" pos:end="23:49"><expr pos:start="23:5" pos:end="23:48"><name pos:start="23:5" pos:end="23:15">frame_start</name> <operator pos:start="23:17" pos:end="23:17">=</operator> <call pos:start="23:19" pos:end="23:48"><name pos:start="23:19" pos:end="23:33">ac3_synchronize</name><argument_list pos:start="23:34" pos:end="23:48">(<argument pos:start="23:35" pos:end="23:37"><expr pos:start="23:35" pos:end="23:37"><name pos:start="23:35" pos:end="23:37">buf</name></expr></argument>, <argument pos:start="23:40" pos:end="23:47"><expr pos:start="23:40" pos:end="23:47"><name pos:start="23:40" pos:end="23:47">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:26">(<expr pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:19">frame_start</name> <operator pos:start="25:21" pos:end="25:22">==</operator> <operator pos:start="25:24" pos:end="25:24">-</operator><literal type="number" pos:start="25:25" pos:end="25:25">1</literal></expr>)</condition> <block pos:start="25:28" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:24">

        <expr_stmt pos:start="27:9" pos:end="27:67"><expr pos:start="27:9" pos:end="27:66"><call pos:start="27:9" pos:end="27:66"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="27:66">(<argument pos:start="27:16" pos:end="27:20"><expr pos:start="27:16" pos:end="27:20"><name pos:start="27:16" pos:end="27:20">avctx</name></expr></argument>, <argument pos:start="27:23" pos:end="27:34"><expr pos:start="27:23" pos:end="27:34"><name pos:start="27:23" pos:end="27:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:37" pos:end="27:65"><expr pos:start="27:37" pos:end="27:65"><literal type="string" pos:start="27:37" pos:end="27:65">"frame is not synchronized\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:23"><expr pos:start="29:9" pos:end="29:22"><operator pos:start="29:9" pos:end="29:9">*</operator><name pos:start="29:10" pos:end="29:18">data_size</name> <operator pos:start="29:20" pos:end="29:20">=</operator> <literal type="number" pos:start="29:22" pos:end="29:22">0</literal></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:24">return <expr pos:start="31:16" pos:end="31:23"><name pos:start="31:16" pos:end="31:23">buf_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="37:5" pos:end="37:69">//Initialize the GetBitContext with the start of valid AC3 Frame.</comment>

    <expr_stmt pos:start="39:5" pos:end="39:79"><expr pos:start="39:5" pos:end="39:78"><call pos:start="39:5" pos:end="39:78"><name pos:start="39:5" pos:end="39:17">init_get_bits</name><argument_list pos:start="39:18" pos:end="39:78">(<argument pos:start="39:19" pos:end="39:28"><expr pos:start="39:19" pos:end="39:28"><operator pos:start="39:19" pos:end="39:19">&amp;</operator><operator pos:start="39:20" pos:end="39:20">(</operator><name pos:start="39:21" pos:end="39:27"><name pos:start="39:21" pos:end="39:23">ctx</name><operator pos:start="39:24" pos:end="39:25">-&gt;</operator><name pos:start="39:26" pos:end="39:27">gb</name></name><operator pos:start="39:28" pos:end="39:28">)</operator></expr></argument>, <argument pos:start="39:31" pos:end="39:47"><expr pos:start="39:31" pos:end="39:47"><name pos:start="39:31" pos:end="39:33">buf</name> <operator pos:start="39:35" pos:end="39:35">+</operator> <name pos:start="39:37" pos:end="39:47">frame_start</name></expr></argument>, <argument pos:start="39:50" pos:end="39:77"><expr pos:start="39:50" pos:end="39:77"><operator pos:start="39:50" pos:end="39:50">(</operator><name pos:start="39:51" pos:end="39:58">buf_size</name> <operator pos:start="39:60" pos:end="39:60">-</operator> <name pos:start="39:62" pos:end="39:72">frame_start</name><operator pos:start="39:73" pos:end="39:73">)</operator> <operator pos:start="39:75" pos:end="39:75">*</operator> <literal type="number" pos:start="39:77" pos:end="39:77">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="43:5" pos:end="43:25">//Parse the syncinfo.</comment>

    <comment type="line" pos:start="45:5" pos:end="45:83">//If 'fscod' or 'bsid' is not valid the decoder shall mute as per the standard.</comment>

    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="55:5">if <condition pos:start="47:8" pos:end="47:34">(<expr pos:start="47:9" pos:end="47:33"><operator pos:start="47:9" pos:end="47:9">!</operator><call pos:start="47:10" pos:end="47:33"><name pos:start="47:10" pos:end="47:28">ac3_parse_sync_info</name><argument_list pos:start="47:29" pos:end="47:33">(<argument pos:start="47:30" pos:end="47:32"><expr pos:start="47:30" pos:end="47:32"><name pos:start="47:30" pos:end="47:32">ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:36" pos:end="55:5">{<block_content pos:start="49:9" pos:end="53:18">

        <expr_stmt pos:start="49:9" pos:end="49:42"><expr pos:start="49:9" pos:end="49:41"><call pos:start="49:9" pos:end="49:41"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="49:41">(<argument pos:start="49:16" pos:end="49:20"><expr pos:start="49:16" pos:end="49:20"><name pos:start="49:16" pos:end="49:20">avctx</name></expr></argument>, <argument pos:start="49:23" pos:end="49:34"><expr pos:start="49:23" pos:end="49:34"><name pos:start="49:23" pos:end="49:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:37" pos:end="49:40"><expr pos:start="49:37" pos:end="49:40"><literal type="string" pos:start="49:37" pos:end="49:40">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:23"><expr pos:start="51:9" pos:end="51:22"><operator pos:start="51:9" pos:end="51:9">*</operator><name pos:start="51:10" pos:end="51:18">data_size</name> <operator pos:start="51:20" pos:end="51:20">=</operator> <literal type="number" pos:start="51:22" pos:end="51:22">0</literal></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:18">return <expr pos:start="53:16" pos:end="53:17"><operator pos:start="53:16" pos:end="53:16">-</operator><literal type="number" pos:start="53:17" pos:end="53:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="59:5" pos:end="59:27">//Check for the errors.</comment>

    <comment type="block" pos:start="61:5" pos:end="67:8">/* if (ac3_error_check(ctx)) {

        *data_size = 0;

        return -1;

    } */</comment>



    <comment type="line" pos:start="71:5" pos:end="71:20">//Parse the BSI.</comment>

    <comment type="line" pos:start="73:5" pos:end="73:84">//If 'bsid' is not valid decoder shall not decode the audio as per the standard.</comment>

    <if_stmt pos:start="75:5" pos:end="83:5"><if pos:start="75:5" pos:end="83:5">if <condition pos:start="75:8" pos:end="75:27">(<expr pos:start="75:9" pos:end="75:26"><call pos:start="75:9" pos:end="75:26"><name pos:start="75:9" pos:end="75:21">ac3_parse_bsi</name><argument_list pos:start="75:22" pos:end="75:26">(<argument pos:start="75:23" pos:end="75:25"><expr pos:start="75:23" pos:end="75:25"><name pos:start="75:23" pos:end="75:25">ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:29" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:18">

        <expr_stmt pos:start="77:9" pos:end="77:59"><expr pos:start="77:9" pos:end="77:58"><call pos:start="77:9" pos:end="77:58"><name pos:start="77:9" pos:end="77:14">av_log</name><argument_list pos:start="77:15" pos:end="77:58">(<argument pos:start="77:16" pos:end="77:20"><expr pos:start="77:16" pos:end="77:20"><name pos:start="77:16" pos:end="77:20">avctx</name></expr></argument>, <argument pos:start="77:23" pos:end="77:34"><expr pos:start="77:23" pos:end="77:34"><name pos:start="77:23" pos:end="77:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="77:37" pos:end="77:57"><expr pos:start="77:37" pos:end="77:57"><literal type="string" pos:start="77:37" pos:end="77:57">"bsid is not valid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:23"><expr pos:start="79:9" pos:end="79:22"><operator pos:start="79:9" pos:end="79:9">*</operator><name pos:start="79:10" pos:end="79:18">data_size</name> <operator pos:start="79:20" pos:end="79:20">=</operator> <literal type="number" pos:start="79:22" pos:end="79:22">0</literal></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:18">return <expr pos:start="81:16" pos:end="81:17"><operator pos:start="81:16" pos:end="81:16">-</operator><literal type="number" pos:start="81:17" pos:end="81:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="87:5" pos:end="89:56">for <control pos:start="87:9" pos:end="87:36">(<init pos:start="87:10" pos:end="87:15"><expr pos:start="87:10" pos:end="87:14"><name pos:start="87:10" pos:end="87:10">i</name> <operator pos:start="87:12" pos:end="87:12">=</operator> <literal type="number" pos:start="87:14" pos:end="87:14">0</literal></expr>;</init> <condition pos:start="87:17" pos:end="87:31"><expr pos:start="87:17" pos:end="87:30"><name pos:start="87:17" pos:end="87:17">i</name> <operator pos:start="87:19" pos:end="87:19">&lt;</operator> <name pos:start="87:21" pos:end="87:30">MAX_BLOCKS</name></expr>;</condition> <incr pos:start="87:33" pos:end="87:35"><expr pos:start="87:33" pos:end="87:35"><name pos:start="87:33" pos:end="87:33">i</name><operator pos:start="87:34" pos:end="87:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="89:9" pos:end="89:56"><block_content pos:start="89:9" pos:end="89:56">

        <expr_stmt pos:start="89:9" pos:end="89:56"><expr pos:start="89:9" pos:end="89:55"><call pos:start="89:9" pos:end="89:55"><name pos:start="89:9" pos:end="89:14">memset</name><argument_list pos:start="89:15" pos:end="89:55">(<argument pos:start="89:16" pos:end="89:28"><expr pos:start="89:16" pos:end="89:28"><name pos:start="89:16" pos:end="89:28"><name pos:start="89:16" pos:end="89:18">ctx</name><operator pos:start="89:19" pos:end="89:20">-&gt;</operator><name pos:start="89:21" pos:end="89:25">delay</name><index pos:start="89:26" pos:end="89:28">[<expr pos:start="89:27" pos:end="89:27"><name pos:start="89:27" pos:end="89:27">i</name></expr>]</index></name></expr></argument>, <argument pos:start="89:31" pos:end="89:31"><expr pos:start="89:31" pos:end="89:31"><literal type="number" pos:start="89:31" pos:end="89:31">0</literal></expr></argument>, <argument pos:start="89:34" pos:end="89:54"><expr pos:start="89:34" pos:end="89:54"><sizeof pos:start="89:34" pos:end="89:54">sizeof<argument_list pos:start="89:40" pos:end="89:54">(<argument pos:start="89:41" pos:end="89:53"><expr pos:start="89:41" pos:end="89:53"><name pos:start="89:41" pos:end="89:53"><name pos:start="89:41" pos:end="89:43">ctx</name><operator pos:start="89:44" pos:end="89:45">-&gt;</operator><name pos:start="89:46" pos:end="89:50">delay</name><index pos:start="89:51" pos:end="89:53">[<expr pos:start="89:52" pos:end="89:52"><name pos:start="89:52" pos:end="89:52">i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt pos:start="91:5" pos:end="91:54"><expr pos:start="91:5" pos:end="91:53"><name pos:start="91:5" pos:end="91:22"><name pos:start="91:5" pos:end="91:9">avctx</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:22">sample_rate</name></name> <operator pos:start="91:24" pos:end="91:24">=</operator> <name pos:start="91:26" pos:end="91:53"><name pos:start="91:26" pos:end="91:28">ctx</name><operator pos:start="91:29" pos:end="91:30">-&gt;</operator><name pos:start="91:31" pos:end="91:39">sync_info</name><operator pos:start="91:40" pos:end="91:40">.</operator><name pos:start="91:41" pos:end="91:53">sampling_rate</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:46"><expr pos:start="93:5" pos:end="93:45"><name pos:start="93:5" pos:end="93:19"><name pos:start="93:5" pos:end="93:9">avctx</name><operator pos:start="93:10" pos:end="93:11">-&gt;</operator><name pos:start="93:12" pos:end="93:19">bit_rate</name></name> <operator pos:start="93:21" pos:end="93:21">=</operator> <name pos:start="93:23" pos:end="93:45"><name pos:start="93:23" pos:end="93:25">ctx</name><operator pos:start="93:26" pos:end="93:27">-&gt;</operator><name pos:start="93:28" pos:end="93:36">sync_info</name><operator pos:start="93:37" pos:end="93:37">.</operator><name pos:start="93:38" pos:end="93:45">bit_rate</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="95:5" pos:end="129:5"><if pos:start="95:5" pos:end="101:5">if <condition pos:start="95:8" pos:end="95:29">(<expr pos:start="95:9" pos:end="95:28"><name pos:start="95:9" pos:end="95:23"><name pos:start="95:9" pos:end="95:13">avctx</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:23">channels</name></name> <operator pos:start="95:25" pos:end="95:26">==</operator> <literal type="number" pos:start="95:28" pos:end="95:28">0</literal></expr>)</condition> <block pos:start="95:31" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:44">

        <comment type="line" pos:start="97:9" pos:end="97:90">//avctx-&gt;channels = ctx-&gt;bsi.nfchans + ((ctx-&gt;bsi.flags &amp; AC3_BSI_LFEON) ? 1 : 0);</comment>

        <expr_stmt pos:start="99:9" pos:end="99:44"><expr pos:start="99:9" pos:end="99:43"><name pos:start="99:9" pos:end="99:19"><name pos:start="99:9" pos:end="99:11">ctx</name><operator pos:start="99:12" pos:end="99:13">-&gt;</operator><name pos:start="99:14" pos:end="99:19">output</name></name> <operator pos:start="99:21" pos:end="99:21">=</operator> <name pos:start="99:23" pos:end="99:43">AC3_OUTPUT_UNMODIFIED</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="103:5" pos:end="113:5">else if <condition pos:start="103:13" pos:end="103:95">(<expr pos:start="103:14" pos:end="103:94"><operator pos:start="103:14" pos:end="103:14">(</operator><name pos:start="103:15" pos:end="103:30"><name pos:start="103:15" pos:end="103:17">ctx</name><operator pos:start="103:18" pos:end="103:19">-&gt;</operator><name pos:start="103:20" pos:end="103:22">bsi</name><operator pos:start="103:23" pos:end="103:23">.</operator><name pos:start="103:24" pos:end="103:30">nfchans</name></name> <operator pos:start="103:32" pos:end="103:32">+</operator> <operator pos:start="103:34" pos:end="103:34">(</operator><ternary pos:start="103:35" pos:end="103:74"><condition pos:start="103:35" pos:end="103:68"><expr pos:start="103:35" pos:end="103:66"><operator pos:start="103:35" pos:end="103:35">(</operator><name pos:start="103:36" pos:end="103:49"><name pos:start="103:36" pos:end="103:38">ctx</name><operator pos:start="103:39" pos:end="103:40">-&gt;</operator><name pos:start="103:41" pos:end="103:43">bsi</name><operator pos:start="103:44" pos:end="103:44">.</operator><name pos:start="103:45" pos:end="103:49">flags</name></name> <operator pos:start="103:51" pos:end="103:51">&amp;</operator> <name pos:start="103:53" pos:end="103:65">AC3_BSI_LFEON</name><operator pos:start="103:66" pos:end="103:66">)</operator></expr> ?</condition><then pos:start="103:70" pos:end="103:70"> <expr pos:start="103:70" pos:end="103:70"><literal type="number" pos:start="103:70" pos:end="103:70">1</literal></expr> </then><else pos:start="103:72" pos:end="103:74">: <expr pos:start="103:74" pos:end="103:74"><literal type="number" pos:start="103:74" pos:end="103:74">0</literal></expr></else></ternary><operator pos:start="103:75" pos:end="103:75">)</operator><operator pos:start="103:76" pos:end="103:76">)</operator> <operator pos:start="103:78" pos:end="103:78">&lt;</operator> <name pos:start="103:80" pos:end="103:94"><name pos:start="103:80" pos:end="103:84">avctx</name><operator pos:start="103:85" pos:end="103:86">-&gt;</operator><name pos:start="103:87" pos:end="103:94">channels</name></name></expr>)</condition> <block pos:start="103:97" pos:end="113:5">{<block_content pos:start="105:9" pos:end="111:44">

        <expr_stmt pos:start="105:9" pos:end="107:98"><expr pos:start="105:9" pos:end="107:97"><call pos:start="105:9" pos:end="107:97"><name pos:start="105:9" pos:end="105:14">av_log</name><argument_list pos:start="105:15" pos:end="107:97">(<argument pos:start="105:16" pos:end="105:20"><expr pos:start="105:16" pos:end="105:20"><name pos:start="105:16" pos:end="105:20">avctx</name></expr></argument>, <argument pos:start="105:23" pos:end="105:33"><expr pos:start="105:23" pos:end="105:33"><name pos:start="105:23" pos:end="105:33">AV_LOG_INFO</name></expr></argument>, <argument pos:start="105:36" pos:end="105:121"><expr pos:start="105:36" pos:end="105:121"><literal type="string" pos:start="105:36" pos:end="105:121">"ac3_decoder: AC3 Source Channels Are Less Then Specified %d: Output to %d Channels\n"</literal></expr></argument>,

                <argument pos:start="107:17" pos:end="107:31"><expr pos:start="107:17" pos:end="107:31"><name pos:start="107:17" pos:end="107:31"><name pos:start="107:17" pos:end="107:21">avctx</name><operator pos:start="107:22" pos:end="107:23">-&gt;</operator><name pos:start="107:24" pos:end="107:31">channels</name></name></expr></argument>, <argument pos:start="107:34" pos:end="107:96"><expr pos:start="107:34" pos:end="107:96"><operator pos:start="107:34" pos:end="107:34">(</operator><name pos:start="107:35" pos:end="107:50"><name pos:start="107:35" pos:end="107:37">ctx</name><operator pos:start="107:38" pos:end="107:39">-&gt;</operator><name pos:start="107:40" pos:end="107:42">bsi</name><operator pos:start="107:43" pos:end="107:43">.</operator><name pos:start="107:44" pos:end="107:50">nfchans</name></name> <operator pos:start="107:52" pos:end="107:52">+</operator> <operator pos:start="107:54" pos:end="107:54">(</operator><ternary pos:start="107:55" pos:end="107:94"><condition pos:start="107:55" pos:end="107:88"><expr pos:start="107:55" pos:end="107:86"><operator pos:start="107:55" pos:end="107:55">(</operator><name pos:start="107:56" pos:end="107:69"><name pos:start="107:56" pos:end="107:58">ctx</name><operator pos:start="107:59" pos:end="107:60">-&gt;</operator><name pos:start="107:61" pos:end="107:63">bsi</name><operator pos:start="107:64" pos:end="107:64">.</operator><name pos:start="107:65" pos:end="107:69">flags</name></name> <operator pos:start="107:71" pos:end="107:71">&amp;</operator> <name pos:start="107:73" pos:end="107:85">AC3_BSI_LFEON</name><operator pos:start="107:86" pos:end="107:86">)</operator></expr> ?</condition><then pos:start="107:90" pos:end="107:90"> <expr pos:start="107:90" pos:end="107:90"><literal type="number" pos:start="107:90" pos:end="107:90">1</literal></expr> </then><else pos:start="107:92" pos:end="107:94">: <expr pos:start="107:94" pos:end="107:94"><literal type="number" pos:start="107:94" pos:end="107:94">0</literal></expr></else></ternary><operator pos:start="107:95" pos:end="107:95">)</operator><operator pos:start="107:96" pos:end="107:96">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="109:9" pos:end="109:90">//avctx-&gt;channels = ctx-&gt;bsi.nfchans + ((ctx-&gt;bsi.flags &amp; AC3_BSI_LFEON) ? 1 : 0);</comment>

        <expr_stmt pos:start="111:9" pos:end="111:44"><expr pos:start="111:9" pos:end="111:43"><name pos:start="111:9" pos:end="111:19"><name pos:start="111:9" pos:end="111:11">ctx</name><operator pos:start="111:12" pos:end="111:13">-&gt;</operator><name pos:start="111:14" pos:end="111:19">output</name></name> <operator pos:start="111:21" pos:end="111:21">=</operator> <name pos:start="111:23" pos:end="111:43">AC3_OUTPUT_UNMODIFIED</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="115:5" pos:end="119:5">else if <condition pos:start="115:13" pos:end="115:34">(<expr pos:start="115:14" pos:end="115:33"><name pos:start="115:14" pos:end="115:28"><name pos:start="115:14" pos:end="115:18">avctx</name><operator pos:start="115:19" pos:end="115:20">-&gt;</operator><name pos:start="115:21" pos:end="115:28">channels</name></name> <operator pos:start="115:30" pos:end="115:31">==</operator> <literal type="number" pos:start="115:33" pos:end="115:33">1</literal></expr>)</condition> <block pos:start="115:36" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:38">

        <expr_stmt pos:start="117:9" pos:end="117:38"><expr pos:start="117:9" pos:end="117:37"><name pos:start="117:9" pos:end="117:19"><name pos:start="117:9" pos:end="117:11">ctx</name><operator pos:start="117:12" pos:end="117:13">-&gt;</operator><name pos:start="117:14" pos:end="117:19">output</name></name> <operator pos:start="117:21" pos:end="117:21">=</operator> <name pos:start="117:23" pos:end="117:37">AC3_OUTPUT_MONO</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="119:7" pos:end="129:5">else if <condition pos:start="119:15" pos:end="119:36">(<expr pos:start="119:16" pos:end="119:35"><name pos:start="119:16" pos:end="119:30"><name pos:start="119:16" pos:end="119:20">avctx</name><operator pos:start="119:21" pos:end="119:22">-&gt;</operator><name pos:start="119:23" pos:end="119:30">channels</name></name> <operator pos:start="119:32" pos:end="119:33">==</operator> <literal type="number" pos:start="119:35" pos:end="119:35">2</literal></expr>)</condition> <block pos:start="119:38" pos:end="129:5">{<block_content pos:start="121:9" pos:end="127:44">

        <if_stmt pos:start="121:9" pos:end="127:44"><if pos:start="121:9" pos:end="123:43">if <condition pos:start="121:12" pos:end="121:37">(<expr pos:start="121:13" pos:end="121:36"><name pos:start="121:13" pos:end="121:28"><name pos:start="121:13" pos:end="121:15">ctx</name><operator pos:start="121:16" pos:end="121:17">-&gt;</operator><name pos:start="121:18" pos:end="121:20">bsi</name><operator pos:start="121:21" pos:end="121:21">.</operator><name pos:start="121:22" pos:end="121:28">dsurmod</name></name> <operator pos:start="121:30" pos:end="121:31">==</operator> <literal type="number" pos:start="121:33" pos:end="121:36">0x02</literal></expr>)</condition><block type="pseudo" pos:start="123:13" pos:end="123:43"><block_content pos:start="123:13" pos:end="123:43">

            <expr_stmt pos:start="123:13" pos:end="123:43"><expr pos:start="123:13" pos:end="123:42"><name pos:start="123:13" pos:end="123:23"><name pos:start="123:13" pos:end="123:15">ctx</name><operator pos:start="123:16" pos:end="123:17">-&gt;</operator><name pos:start="123:18" pos:end="123:23">output</name></name> <operator pos:start="123:25" pos:end="123:25">=</operator> <name pos:start="123:27" pos:end="123:42">AC3_OUTPUT_DOLBY</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="125:9" pos:end="127:44">else<block type="pseudo" pos:start="127:13" pos:end="127:44"><block_content pos:start="127:13" pos:end="127:44">

            <expr_stmt pos:start="127:13" pos:end="127:44"><expr pos:start="127:13" pos:end="127:43"><name pos:start="127:13" pos:end="127:23"><name pos:start="127:13" pos:end="127:15">ctx</name><operator pos:start="127:16" pos:end="127:17">-&gt;</operator><name pos:start="127:18" pos:end="127:23">output</name></name> <operator pos:start="127:25" pos:end="127:25">=</operator> <name pos:start="127:27" pos:end="127:43">AC3_OUTPUT_STEREO</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>





    <expr_stmt pos:start="135:5" pos:end="135:144"><expr pos:start="135:5" pos:end="135:143"><call pos:start="135:5" pos:end="135:143"><name pos:start="135:5" pos:end="135:10">av_log</name><argument_list pos:start="135:11" pos:end="135:143">(<argument pos:start="135:12" pos:end="135:16"><expr pos:start="135:12" pos:end="135:16"><name pos:start="135:12" pos:end="135:16">avctx</name></expr></argument>, <argument pos:start="135:19" pos:end="135:29"><expr pos:start="135:19" pos:end="135:29"><name pos:start="135:19" pos:end="135:29">AV_LOG_INFO</name></expr></argument>, <argument pos:start="135:32" pos:end="135:88"><expr pos:start="135:32" pos:end="135:88"><literal type="string" pos:start="135:32" pos:end="135:88">"channels = %d \t bit rate = %d \t sampling rate = %d \n"</literal></expr></argument>, <argument pos:start="135:91" pos:end="135:105"><expr pos:start="135:91" pos:end="135:105"><name pos:start="135:91" pos:end="135:105"><name pos:start="135:91" pos:end="135:95">avctx</name><operator pos:start="135:96" pos:end="135:97">-&gt;</operator><name pos:start="135:98" pos:end="135:105">channels</name></name></expr></argument>, <argument pos:start="135:108" pos:end="135:125"><expr pos:start="135:108" pos:end="135:125"><name pos:start="135:108" pos:end="135:125"><name pos:start="135:108" pos:end="135:112">avctx</name><operator pos:start="135:113" pos:end="135:114">-&gt;</operator><name pos:start="135:115" pos:end="135:125">sample_rate</name></name></expr></argument>, <argument pos:start="135:128" pos:end="135:142"><expr pos:start="135:128" pos:end="135:142"><name pos:start="135:128" pos:end="135:142"><name pos:start="135:128" pos:end="135:132">avctx</name><operator pos:start="135:133" pos:end="135:134">-&gt;</operator><name pos:start="135:135" pos:end="135:142">bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="139:5" pos:end="139:29">//Parse the Audio Blocks.</comment>

    <expr_stmt pos:start="141:5" pos:end="141:19"><expr pos:start="141:5" pos:end="141:18"><operator pos:start="141:5" pos:end="141:5">*</operator><name pos:start="141:6" pos:end="141:14">data_size</name> <operator pos:start="141:16" pos:end="141:16">=</operator> <literal type="number" pos:start="141:18" pos:end="141:18">0</literal></expr>;</expr_stmt>

    <for pos:start="143:5" pos:end="261:5">for <control pos:start="143:9" pos:end="143:27">(<init pos:start="143:10" pos:end="143:15"><expr pos:start="143:10" pos:end="143:14"><name pos:start="143:10" pos:end="143:10">i</name> <operator pos:start="143:12" pos:end="143:12">=</operator> <literal type="number" pos:start="143:14" pos:end="143:14">0</literal></expr>;</init> <condition pos:start="143:17" pos:end="143:22"><expr pos:start="143:17" pos:end="143:21"><name pos:start="143:17" pos:end="143:17">i</name> <operator pos:start="143:19" pos:end="143:19">&lt;</operator> <literal type="number" pos:start="143:21" pos:end="143:21">6</literal></expr>;</condition> <incr pos:start="143:24" pos:end="143:26"><expr pos:start="143:24" pos:end="143:26"><name pos:start="143:24" pos:end="143:24">i</name><operator pos:start="143:25" pos:end="143:26">++</operator></expr></incr>)</control> <block pos:start="143:29" pos:end="261:5">{<block_content pos:start="145:9" pos:end="259:55">

        <if_stmt pos:start="145:9" pos:end="153:9"><if pos:start="145:9" pos:end="153:9">if <condition pos:start="145:12" pos:end="145:42">(<expr pos:start="145:13" pos:end="145:41"><call pos:start="145:13" pos:end="145:41"><name pos:start="145:13" pos:end="145:33">ac3_parse_audio_block</name><argument_list pos:start="145:34" pos:end="145:41">(<argument pos:start="145:35" pos:end="145:37"><expr pos:start="145:35" pos:end="145:37"><name pos:start="145:35" pos:end="145:37">ctx</name></expr></argument>, <argument pos:start="145:40" pos:end="145:40"><expr pos:start="145:40" pos:end="145:40"><name pos:start="145:40" pos:end="145:40">i</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="145:44" pos:end="153:9">{<block_content pos:start="147:13" pos:end="151:22">

            <expr_stmt pos:start="147:13" pos:end="147:75"><expr pos:start="147:13" pos:end="147:74"><call pos:start="147:13" pos:end="147:74"><name pos:start="147:13" pos:end="147:18">av_log</name><argument_list pos:start="147:19" pos:end="147:74">(<argument pos:start="147:20" pos:end="147:24"><expr pos:start="147:20" pos:end="147:24"><name pos:start="147:20" pos:end="147:24">avctx</name></expr></argument>, <argument pos:start="147:27" pos:end="147:38"><expr pos:start="147:27" pos:end="147:38"><name pos:start="147:27" pos:end="147:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="147:41" pos:end="147:73"><expr pos:start="147:41" pos:end="147:73"><literal type="string" pos:start="147:41" pos:end="147:73">"error parsing the audio block\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:27"><expr pos:start="149:13" pos:end="149:26"><operator pos:start="149:13" pos:end="149:13">*</operator><name pos:start="149:14" pos:end="149:22">data_size</name> <operator pos:start="149:24" pos:end="149:24">=</operator> <literal type="number" pos:start="149:26" pos:end="149:26">0</literal></expr>;</expr_stmt>

            <return pos:start="151:13" pos:end="151:22">return <expr pos:start="151:20" pos:end="151:21"><operator pos:start="151:20" pos:end="151:20">-</operator><literal type="number" pos:start="151:21" pos:end="151:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="157:9" pos:end="157:51"><expr pos:start="157:9" pos:end="157:50"><call pos:start="157:9" pos:end="157:50"><name pos:start="157:9" pos:end="157:14">av_log</name><argument_list pos:start="157:15" pos:end="157:50">(<argument pos:start="157:16" pos:end="157:19"><expr pos:start="157:16" pos:end="157:19"><name pos:start="157:16" pos:end="157:19">NULL</name></expr></argument>, <argument pos:start="157:22" pos:end="157:32"><expr pos:start="157:22" pos:end="157:32"><name pos:start="157:22" pos:end="157:32">AV_LOG_INFO</name></expr></argument>, <argument pos:start="157:35" pos:end="157:49"><expr pos:start="157:35" pos:end="157:49"><literal type="string" pos:start="157:35" pos:end="157:49">"doing imdct\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="161:9" pos:end="171:9"><if pos:start="161:9" pos:end="171:9">if <condition pos:start="161:12" pos:end="161:43">(<expr pos:start="161:13" pos:end="161:42"><name pos:start="161:13" pos:end="161:26"><name pos:start="161:13" pos:end="161:15">ctx</name><operator pos:start="161:16" pos:end="161:17">-&gt;</operator><name pos:start="161:18" pos:end="161:20">bsi</name><operator pos:start="161:21" pos:end="161:21">.</operator><name pos:start="161:22" pos:end="161:26">flags</name></name> <operator pos:start="161:28" pos:end="161:28">&amp;</operator> <name pos:start="161:30" pos:end="161:42">AC3_BSI_LFEON</name></expr>)</condition> <block pos:start="161:45" pos:end="171:9">{<block_content pos:start="163:13" pos:end="169:80">

            <expr_stmt pos:start="163:13" pos:end="163:105"><expr pos:start="163:13" pos:end="163:104"><call pos:start="163:13" pos:end="163:104"><name pos:start="163:13" pos:end="163:25">ff_imdct_calc</name><argument_list pos:start="163:26" pos:end="163:104">(<argument pos:start="163:27" pos:end="163:45"><expr pos:start="163:27" pos:end="163:45"><operator pos:start="163:27" pos:end="163:27">&amp;</operator><name pos:start="163:28" pos:end="163:45"><name pos:start="163:28" pos:end="163:30">ctx</name><operator pos:start="163:31" pos:end="163:32">-&gt;</operator><name pos:start="163:33" pos:end="163:45">imdct_ctx_512</name></name></expr></argument>, <argument pos:start="163:48" pos:end="163:62"><expr pos:start="163:48" pos:end="163:62"><name pos:start="163:48" pos:end="163:62"><name pos:start="163:48" pos:end="163:50">ctx</name><operator pos:start="163:51" pos:end="163:52">-&gt;</operator><name pos:start="163:53" pos:end="163:62">tmp_output</name></name></expr></argument>, <argument pos:start="163:65" pos:end="163:87"><expr pos:start="163:65" pos:end="163:87"><name pos:start="163:65" pos:end="163:87"><name pos:start="163:65" pos:end="163:66">ab</name><operator pos:start="163:67" pos:end="163:68">-&gt;</operator><name pos:start="163:69" pos:end="163:84">transform_coeffs</name><index pos:start="163:85" pos:end="163:87">[<expr pos:start="163:86" pos:end="163:86"><literal type="number" pos:start="163:86" pos:end="163:86">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="163:90" pos:end="163:103"><expr pos:start="163:90" pos:end="163:103"><name pos:start="163:90" pos:end="163:103"><name pos:start="163:90" pos:end="163:92">ctx</name><operator pos:start="163:93" pos:end="163:94">-&gt;</operator><name pos:start="163:95" pos:end="163:103">tmp_imdct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="165:13" pos:end="167:108">for <control pos:start="165:17" pos:end="165:37">(<init pos:start="165:18" pos:end="165:23"><expr pos:start="165:18" pos:end="165:22"><name pos:start="165:18" pos:end="165:18">l</name> <operator pos:start="165:20" pos:end="165:20">=</operator> <literal type="number" pos:start="165:22" pos:end="165:22">0</literal></expr>;</init> <condition pos:start="165:25" pos:end="165:32"><expr pos:start="165:25" pos:end="165:31"><name pos:start="165:25" pos:end="165:25">l</name> <operator pos:start="165:27" pos:end="165:27">&lt;</operator> <literal type="number" pos:start="165:29" pos:end="165:31">256</literal></expr>;</condition> <incr pos:start="165:34" pos:end="165:36"><expr pos:start="165:34" pos:end="165:36"><name pos:start="165:34" pos:end="165:34">l</name><operator pos:start="165:35" pos:end="165:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="167:17" pos:end="167:108"><block_content pos:start="167:17" pos:end="167:108">

                <expr_stmt pos:start="167:17" pos:end="167:108"><expr pos:start="167:17" pos:end="167:107"><name pos:start="167:17" pos:end="167:38"><name pos:start="167:17" pos:end="167:18">ab</name><operator pos:start="167:19" pos:end="167:20">-&gt;</operator><name pos:start="167:21" pos:end="167:32">block_output</name><index pos:start="167:33" pos:end="167:35">[<expr pos:start="167:34" pos:end="167:34"><literal type="number" pos:start="167:34" pos:end="167:34">0</literal></expr>]</index><index pos:start="167:36" pos:end="167:38">[<expr pos:start="167:37" pos:end="167:37"><name pos:start="167:37" pos:end="167:37">l</name></expr>]</index></name> <operator pos:start="167:40" pos:end="167:40">=</operator> <name pos:start="167:42" pos:end="167:59"><name pos:start="167:42" pos:end="167:44">ctx</name><operator pos:start="167:45" pos:end="167:46">-&gt;</operator><name pos:start="167:47" pos:end="167:56">tmp_output</name><index pos:start="167:57" pos:end="167:59">[<expr pos:start="167:58" pos:end="167:58"><name pos:start="167:58" pos:end="167:58">l</name></expr>]</index></name> <operator pos:start="167:61" pos:end="167:61">*</operator> <name pos:start="167:63" pos:end="167:71"><name pos:start="167:63" pos:end="167:68">window</name><index pos:start="167:69" pos:end="167:71">[<expr pos:start="167:70" pos:end="167:70"><name pos:start="167:70" pos:end="167:70">l</name></expr>]</index></name> <operator pos:start="167:73" pos:end="167:73">+</operator> <name pos:start="167:75" pos:end="167:90"><name pos:start="167:75" pos:end="167:77">ctx</name><operator pos:start="167:78" pos:end="167:79">-&gt;</operator><name pos:start="167:80" pos:end="167:84">delay</name><index pos:start="167:85" pos:end="167:87">[<expr pos:start="167:86" pos:end="167:86"><literal type="number" pos:start="167:86" pos:end="167:86">0</literal></expr>]</index><index pos:start="167:88" pos:end="167:90">[<expr pos:start="167:89" pos:end="167:89"><name pos:start="167:89" pos:end="167:89">l</name></expr>]</index></name> <operator pos:start="167:92" pos:end="167:92">*</operator> <name pos:start="167:94" pos:end="167:107"><name pos:start="167:94" pos:end="167:99">window</name><index pos:start="167:100" pos:end="167:107">[<expr pos:start="167:101" pos:end="167:106"><literal type="number" pos:start="167:101" pos:end="167:105">255</literal> <operator pos:start="167:105" pos:end="167:105">-</operator><name pos:start="167:106" pos:end="167:106">l</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="169:13" pos:end="169:80"><expr pos:start="169:13" pos:end="169:79"><call pos:start="169:13" pos:end="169:79"><name pos:start="169:13" pos:end="169:18">memcpy</name><argument_list pos:start="169:19" pos:end="169:79">(<argument pos:start="169:20" pos:end="169:32"><expr pos:start="169:20" pos:end="169:32"><name pos:start="169:20" pos:end="169:32"><name pos:start="169:20" pos:end="169:22">ctx</name><operator pos:start="169:23" pos:end="169:24">-&gt;</operator><name pos:start="169:25" pos:end="169:29">delay</name><index pos:start="169:30" pos:end="169:32">[<expr pos:start="169:31" pos:end="169:31"><literal type="number" pos:start="169:31" pos:end="169:31">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="169:35" pos:end="169:55"><expr pos:start="169:35" pos:end="169:55"><name pos:start="169:35" pos:end="169:49"><name pos:start="169:35" pos:end="169:37">ctx</name><operator pos:start="169:38" pos:end="169:39">-&gt;</operator><name pos:start="169:40" pos:end="169:49">tmp_output</name></name> <operator pos:start="169:51" pos:end="169:51">+</operator> <literal type="number" pos:start="169:53" pos:end="169:55">256</literal></expr></argument>, <argument pos:start="169:58" pos:end="169:78"><expr pos:start="169:58" pos:end="169:78"><sizeof pos:start="169:58" pos:end="169:78">sizeof<argument_list pos:start="169:64" pos:end="169:78">(<argument pos:start="169:65" pos:end="169:77"><expr pos:start="169:65" pos:end="169:77"><name pos:start="169:65" pos:end="169:77"><name pos:start="169:65" pos:end="169:67">ctx</name><operator pos:start="169:68" pos:end="169:69">-&gt;</operator><name pos:start="169:70" pos:end="169:74">delay</name><index pos:start="169:75" pos:end="169:77">[<expr pos:start="169:76" pos:end="169:76"><literal type="number" pos:start="169:76" pos:end="169:76">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="175:9" pos:end="207:9">for <control pos:start="175:13" pos:end="175:46">(<init pos:start="175:14" pos:end="175:19"><expr pos:start="175:14" pos:end="175:18"><name pos:start="175:14" pos:end="175:14">j</name> <operator pos:start="175:16" pos:end="175:16">=</operator> <literal type="number" pos:start="175:18" pos:end="175:18">0</literal></expr>;</init> <condition pos:start="175:21" pos:end="175:41"><expr pos:start="175:21" pos:end="175:40"><name pos:start="175:21" pos:end="175:21">j</name> <operator pos:start="175:23" pos:end="175:23">&lt;</operator> <name pos:start="175:25" pos:end="175:40"><name pos:start="175:25" pos:end="175:27">ctx</name><operator pos:start="175:28" pos:end="175:29">-&gt;</operator><name pos:start="175:30" pos:end="175:32">bsi</name><operator pos:start="175:33" pos:end="175:33">.</operator><name pos:start="175:34" pos:end="175:40">nfchans</name></name></expr>;</condition> <incr pos:start="175:43" pos:end="175:45"><expr pos:start="175:43" pos:end="175:45"><name pos:start="175:43" pos:end="175:43">j</name><operator pos:start="175:44" pos:end="175:45">++</operator></expr></incr>)</control> <block pos:start="175:48" pos:end="207:9">{<block_content pos:start="177:13" pos:end="205:13">

            <if_stmt pos:start="177:13" pos:end="205:13"><if pos:start="177:13" pos:end="195:13">if <condition pos:start="177:16" pos:end="177:50">(<expr pos:start="177:17" pos:end="177:49"><name pos:start="177:17" pos:end="177:38"><name pos:start="177:17" pos:end="177:19">ctx</name><operator pos:start="177:20" pos:end="177:21">-&gt;</operator><name pos:start="177:22" pos:end="177:32">audio_block</name><operator pos:start="177:33" pos:end="177:33">.</operator><name pos:start="177:34" pos:end="177:38">blksw</name></name> <operator pos:start="177:40" pos:end="177:40">&amp;</operator> <operator pos:start="177:42" pos:end="177:42">(</operator><literal type="number" pos:start="177:43" pos:end="177:43">1</literal> <operator pos:start="177:45" pos:end="177:46">&lt;&lt;</operator> <name pos:start="177:48" pos:end="177:48">j</name><operator pos:start="177:49" pos:end="177:49">)</operator></expr>)</condition> <block pos:start="177:52" pos:end="195:13">{<block_content pos:start="179:17" pos:end="193:109">

                <for pos:start="179:17" pos:end="185:17">for <control pos:start="179:21" pos:end="179:41">(<init pos:start="179:22" pos:end="179:27"><expr pos:start="179:22" pos:end="179:26"><name pos:start="179:22" pos:end="179:22">k</name> <operator pos:start="179:24" pos:end="179:24">=</operator> <literal type="number" pos:start="179:26" pos:end="179:26">0</literal></expr>;</init> <condition pos:start="179:29" pos:end="179:36"><expr pos:start="179:29" pos:end="179:35"><name pos:start="179:29" pos:end="179:29">k</name> <operator pos:start="179:31" pos:end="179:31">&lt;</operator> <literal type="number" pos:start="179:33" pos:end="179:35">128</literal></expr>;</condition> <incr pos:start="179:38" pos:end="179:40"><expr pos:start="179:38" pos:end="179:40"><name pos:start="179:38" pos:end="179:38">k</name><operator pos:start="179:39" pos:end="179:40">++</operator></expr></incr>)</control> <block pos:start="179:43" pos:end="185:17">{<block_content pos:start="181:21" pos:end="183:86">

                    <expr_stmt pos:start="181:21" pos:end="181:81"><expr pos:start="181:21" pos:end="181:80"><name pos:start="181:21" pos:end="181:43"><name pos:start="181:21" pos:end="181:40">tmp_block_first_half</name><index pos:start="181:41" pos:end="181:43">[<expr pos:start="181:42" pos:end="181:42"><name pos:start="181:42" pos:end="181:42">k</name></expr>]</index></name> <operator pos:start="181:45" pos:end="181:45">=</operator> <name pos:start="181:47" pos:end="181:80"><name pos:start="181:47" pos:end="181:48">ab</name><operator pos:start="181:49" pos:end="181:50">-&gt;</operator><name pos:start="181:51" pos:end="181:66">transform_coeffs</name><index pos:start="181:67" pos:end="181:73">[<expr pos:start="181:68" pos:end="181:72"><name pos:start="181:68" pos:end="181:68">j</name> <operator pos:start="181:70" pos:end="181:70">+</operator> <literal type="number" pos:start="181:72" pos:end="181:72">1</literal></expr>]</index><index pos:start="181:74" pos:end="181:80">[<expr pos:start="181:75" pos:end="181:79"><literal type="number" pos:start="181:75" pos:end="181:75">2</literal> <operator pos:start="181:77" pos:end="181:77">*</operator> <name pos:start="181:79" pos:end="181:79">k</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="183:21" pos:end="183:86"><expr pos:start="183:21" pos:end="183:85"><name pos:start="183:21" pos:end="183:44"><name pos:start="183:21" pos:end="183:41">tmp_block_second_half</name><index pos:start="183:42" pos:end="183:44">[<expr pos:start="183:43" pos:end="183:43"><name pos:start="183:43" pos:end="183:43">k</name></expr>]</index></name> <operator pos:start="183:46" pos:end="183:46">=</operator> <name pos:start="183:48" pos:end="183:85"><name pos:start="183:48" pos:end="183:49">ab</name><operator pos:start="183:50" pos:end="183:51">-&gt;</operator><name pos:start="183:52" pos:end="183:67">transform_coeffs</name><index pos:start="183:68" pos:end="183:74">[<expr pos:start="183:69" pos:end="183:73"><name pos:start="183:69" pos:end="183:69">j</name> <operator pos:start="183:71" pos:end="183:71">+</operator> <literal type="number" pos:start="183:73" pos:end="183:73">1</literal></expr>]</index><index pos:start="183:75" pos:end="183:85">[<expr pos:start="183:76" pos:end="183:84"><literal type="number" pos:start="183:76" pos:end="183:76">2</literal> <operator pos:start="183:78" pos:end="183:78">*</operator> <name pos:start="183:80" pos:end="183:80">k</name> <operator pos:start="183:82" pos:end="183:82">+</operator> <literal type="number" pos:start="183:84" pos:end="183:84">1</literal></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="187:17" pos:end="187:106"><expr pos:start="187:17" pos:end="187:105"><call pos:start="187:17" pos:end="187:105"><name pos:start="187:17" pos:end="187:29">ff_imdct_calc</name><argument_list pos:start="187:30" pos:end="187:105">(<argument pos:start="187:31" pos:end="187:49"><expr pos:start="187:31" pos:end="187:49"><operator pos:start="187:31" pos:end="187:31">&amp;</operator><name pos:start="187:32" pos:end="187:49"><name pos:start="187:32" pos:end="187:34">ctx</name><operator pos:start="187:35" pos:end="187:36">-&gt;</operator><name pos:start="187:37" pos:end="187:49">imdct_ctx_256</name></name></expr></argument>, <argument pos:start="187:52" pos:end="187:66"><expr pos:start="187:52" pos:end="187:66"><name pos:start="187:52" pos:end="187:66"><name pos:start="187:52" pos:end="187:54">ctx</name><operator pos:start="187:55" pos:end="187:56">-&gt;</operator><name pos:start="187:57" pos:end="187:66">tmp_output</name></name></expr></argument>, <argument pos:start="187:69" pos:end="187:88"><expr pos:start="187:69" pos:end="187:88"><name pos:start="187:69" pos:end="187:88">tmp_block_first_half</name></expr></argument>, <argument pos:start="187:91" pos:end="187:104"><expr pos:start="187:91" pos:end="187:104"><name pos:start="187:91" pos:end="187:104"><name pos:start="187:91" pos:end="187:93">ctx</name><operator pos:start="187:94" pos:end="187:95">-&gt;</operator><name pos:start="187:96" pos:end="187:104">tmp_imdct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="189:17" pos:end="191:121">for <control pos:start="189:21" pos:end="189:41">(<init pos:start="189:22" pos:end="189:27"><expr pos:start="189:22" pos:end="189:26"><name pos:start="189:22" pos:end="189:22">l</name> <operator pos:start="189:24" pos:end="189:24">=</operator> <literal type="number" pos:start="189:26" pos:end="189:26">0</literal></expr>;</init> <condition pos:start="189:29" pos:end="189:36"><expr pos:start="189:29" pos:end="189:35"><name pos:start="189:29" pos:end="189:29">l</name> <operator pos:start="189:31" pos:end="189:31">&lt;</operator> <literal type="number" pos:start="189:33" pos:end="189:35">256</literal></expr>;</condition> <incr pos:start="189:38" pos:end="189:40"><expr pos:start="189:38" pos:end="189:40"><name pos:start="189:38" pos:end="189:38">l</name><operator pos:start="189:39" pos:end="189:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="191:21" pos:end="191:121"><block_content pos:start="191:21" pos:end="191:121">

                    <expr_stmt pos:start="191:21" pos:end="191:121"><expr pos:start="191:21" pos:end="191:120"><name pos:start="191:21" pos:end="191:46"><name pos:start="191:21" pos:end="191:22">ab</name><operator pos:start="191:23" pos:end="191:24">-&gt;</operator><name pos:start="191:25" pos:end="191:36">block_output</name><index pos:start="191:37" pos:end="191:43">[<expr pos:start="191:38" pos:end="191:42"><name pos:start="191:38" pos:end="191:38">j</name> <operator pos:start="191:40" pos:end="191:40">+</operator> <literal type="number" pos:start="191:42" pos:end="191:42">1</literal></expr>]</index><index pos:start="191:44" pos:end="191:46">[<expr pos:start="191:45" pos:end="191:45"><name pos:start="191:45" pos:end="191:45">l</name></expr>]</index></name> <operator pos:start="191:48" pos:end="191:48">=</operator> <name pos:start="191:50" pos:end="191:67"><name pos:start="191:50" pos:end="191:52">ctx</name><operator pos:start="191:53" pos:end="191:54">-&gt;</operator><name pos:start="191:55" pos:end="191:64">tmp_output</name><index pos:start="191:65" pos:end="191:67">[<expr pos:start="191:66" pos:end="191:66"><name pos:start="191:66" pos:end="191:66">l</name></expr>]</index></name> <operator pos:start="191:69" pos:end="191:69">*</operator> <name pos:start="191:71" pos:end="191:79"><name pos:start="191:71" pos:end="191:76">window</name><index pos:start="191:77" pos:end="191:79">[<expr pos:start="191:78" pos:end="191:78"><name pos:start="191:78" pos:end="191:78">l</name></expr>]</index></name> <operator pos:start="191:81" pos:end="191:81">+</operator> <name pos:start="191:83" pos:end="191:102"><name pos:start="191:83" pos:end="191:85">ctx</name><operator pos:start="191:86" pos:end="191:87">-&gt;</operator><name pos:start="191:88" pos:end="191:92">delay</name><index pos:start="191:93" pos:end="191:99">[<expr pos:start="191:94" pos:end="191:98"><name pos:start="191:94" pos:end="191:94">j</name> <operator pos:start="191:96" pos:end="191:96">+</operator> <literal type="number" pos:start="191:98" pos:end="191:98">1</literal></expr>]</index><index pos:start="191:100" pos:end="191:102">[<expr pos:start="191:101" pos:end="191:101"><name pos:start="191:101" pos:end="191:101">l</name></expr>]</index></name> <operator pos:start="191:104" pos:end="191:104">*</operator> <name pos:start="191:106" pos:end="191:120"><name pos:start="191:106" pos:end="191:111">window</name><index pos:start="191:112" pos:end="191:120">[<expr pos:start="191:113" pos:end="191:119"><literal type="number" pos:start="191:113" pos:end="191:117">255</literal> <operator pos:start="191:117" pos:end="191:117">-</operator> <name pos:start="191:119" pos:end="191:119">l</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="193:17" pos:end="193:109"><expr pos:start="193:17" pos:end="193:108"><call pos:start="193:17" pos:end="193:108"><name pos:start="193:17" pos:end="193:29">ff_imdct_calc</name><argument_list pos:start="193:30" pos:end="193:108">(<argument pos:start="193:31" pos:end="193:49"><expr pos:start="193:31" pos:end="193:49"><operator pos:start="193:31" pos:end="193:31">&amp;</operator><name pos:start="193:32" pos:end="193:49"><name pos:start="193:32" pos:end="193:34">ctx</name><operator pos:start="193:35" pos:end="193:36">-&gt;</operator><name pos:start="193:37" pos:end="193:49">imdct_ctx_256</name></name></expr></argument>, <argument pos:start="193:52" pos:end="193:68"><expr pos:start="193:52" pos:end="193:68"><name pos:start="193:52" pos:end="193:68"><name pos:start="193:52" pos:end="193:54">ctx</name><operator pos:start="193:55" pos:end="193:56">-&gt;</operator><name pos:start="193:57" pos:end="193:61">delay</name><index pos:start="193:62" pos:end="193:68">[<expr pos:start="193:63" pos:end="193:67"><name pos:start="193:63" pos:end="193:63">j</name> <operator pos:start="193:65" pos:end="193:65">+</operator> <literal type="number" pos:start="193:67" pos:end="193:67">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="193:71" pos:end="193:91"><expr pos:start="193:71" pos:end="193:91"><name pos:start="193:71" pos:end="193:91">tmp_block_second_half</name></expr></argument>, <argument pos:start="193:94" pos:end="193:107"><expr pos:start="193:94" pos:end="193:107"><name pos:start="193:94" pos:end="193:107"><name pos:start="193:94" pos:end="193:96">ctx</name><operator pos:start="193:97" pos:end="193:98">-&gt;</operator><name pos:start="193:99" pos:end="193:107">tmp_imdct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="195:15" pos:end="205:13">else <block pos:start="195:20" pos:end="205:13">{<block_content pos:start="197:17" pos:end="203:92">

                <expr_stmt pos:start="197:17" pos:end="197:113"><expr pos:start="197:17" pos:end="197:112"><call pos:start="197:17" pos:end="197:112"><name pos:start="197:17" pos:end="197:29">ff_imdct_calc</name><argument_list pos:start="197:30" pos:end="197:112">(<argument pos:start="197:31" pos:end="197:49"><expr pos:start="197:31" pos:end="197:49"><operator pos:start="197:31" pos:end="197:31">&amp;</operator><name pos:start="197:32" pos:end="197:49"><name pos:start="197:32" pos:end="197:34">ctx</name><operator pos:start="197:35" pos:end="197:36">-&gt;</operator><name pos:start="197:37" pos:end="197:49">imdct_ctx_512</name></name></expr></argument>, <argument pos:start="197:52" pos:end="197:66"><expr pos:start="197:52" pos:end="197:66"><name pos:start="197:52" pos:end="197:66"><name pos:start="197:52" pos:end="197:54">ctx</name><operator pos:start="197:55" pos:end="197:56">-&gt;</operator><name pos:start="197:57" pos:end="197:66">tmp_output</name></name></expr></argument>, <argument pos:start="197:69" pos:end="197:95"><expr pos:start="197:69" pos:end="197:95"><name pos:start="197:69" pos:end="197:95"><name pos:start="197:69" pos:end="197:70">ab</name><operator pos:start="197:71" pos:end="197:72">-&gt;</operator><name pos:start="197:73" pos:end="197:88">transform_coeffs</name><index pos:start="197:89" pos:end="197:95">[<expr pos:start="197:90" pos:end="197:94"><name pos:start="197:90" pos:end="197:90">j</name> <operator pos:start="197:92" pos:end="197:92">+</operator> <literal type="number" pos:start="197:94" pos:end="197:94">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="197:98" pos:end="197:111"><expr pos:start="197:98" pos:end="197:111"><name pos:start="197:98" pos:end="197:111"><name pos:start="197:98" pos:end="197:100">ctx</name><operator pos:start="197:101" pos:end="197:102">-&gt;</operator><name pos:start="197:103" pos:end="197:111">tmp_imdct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="199:17" pos:end="201:121">for <control pos:start="199:21" pos:end="199:41">(<init pos:start="199:22" pos:end="199:27"><expr pos:start="199:22" pos:end="199:26"><name pos:start="199:22" pos:end="199:22">l</name> <operator pos:start="199:24" pos:end="199:24">=</operator> <literal type="number" pos:start="199:26" pos:end="199:26">0</literal></expr>;</init> <condition pos:start="199:29" pos:end="199:36"><expr pos:start="199:29" pos:end="199:35"><name pos:start="199:29" pos:end="199:29">l</name> <operator pos:start="199:31" pos:end="199:31">&lt;</operator> <literal type="number" pos:start="199:33" pos:end="199:35">256</literal></expr>;</condition> <incr pos:start="199:38" pos:end="199:40"><expr pos:start="199:38" pos:end="199:40"><name pos:start="199:38" pos:end="199:38">l</name><operator pos:start="199:39" pos:end="199:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="201:21" pos:end="201:121"><block_content pos:start="201:21" pos:end="201:121">

                    <expr_stmt pos:start="201:21" pos:end="201:121"><expr pos:start="201:21" pos:end="201:120"><name pos:start="201:21" pos:end="201:46"><name pos:start="201:21" pos:end="201:22">ab</name><operator pos:start="201:23" pos:end="201:24">-&gt;</operator><name pos:start="201:25" pos:end="201:36">block_output</name><index pos:start="201:37" pos:end="201:43">[<expr pos:start="201:38" pos:end="201:42"><name pos:start="201:38" pos:end="201:38">j</name> <operator pos:start="201:40" pos:end="201:40">+</operator> <literal type="number" pos:start="201:42" pos:end="201:42">1</literal></expr>]</index><index pos:start="201:44" pos:end="201:46">[<expr pos:start="201:45" pos:end="201:45"><name pos:start="201:45" pos:end="201:45">l</name></expr>]</index></name> <operator pos:start="201:48" pos:end="201:48">=</operator> <name pos:start="201:50" pos:end="201:67"><name pos:start="201:50" pos:end="201:52">ctx</name><operator pos:start="201:53" pos:end="201:54">-&gt;</operator><name pos:start="201:55" pos:end="201:64">tmp_output</name><index pos:start="201:65" pos:end="201:67">[<expr pos:start="201:66" pos:end="201:66"><name pos:start="201:66" pos:end="201:66">l</name></expr>]</index></name> <operator pos:start="201:69" pos:end="201:69">*</operator> <name pos:start="201:71" pos:end="201:79"><name pos:start="201:71" pos:end="201:76">window</name><index pos:start="201:77" pos:end="201:79">[<expr pos:start="201:78" pos:end="201:78"><name pos:start="201:78" pos:end="201:78">l</name></expr>]</index></name> <operator pos:start="201:81" pos:end="201:81">+</operator> <name pos:start="201:83" pos:end="201:102"><name pos:start="201:83" pos:end="201:85">ctx</name><operator pos:start="201:86" pos:end="201:87">-&gt;</operator><name pos:start="201:88" pos:end="201:92">delay</name><index pos:start="201:93" pos:end="201:99">[<expr pos:start="201:94" pos:end="201:98"><name pos:start="201:94" pos:end="201:94">j</name> <operator pos:start="201:96" pos:end="201:96">+</operator> <literal type="number" pos:start="201:98" pos:end="201:98">1</literal></expr>]</index><index pos:start="201:100" pos:end="201:102">[<expr pos:start="201:101" pos:end="201:101"><name pos:start="201:101" pos:end="201:101">l</name></expr>]</index></name> <operator pos:start="201:104" pos:end="201:104">*</operator> <name pos:start="201:106" pos:end="201:120"><name pos:start="201:106" pos:end="201:111">window</name><index pos:start="201:112" pos:end="201:120">[<expr pos:start="201:113" pos:end="201:119"><literal type="number" pos:start="201:113" pos:end="201:117">255</literal> <operator pos:start="201:117" pos:end="201:117">-</operator> <name pos:start="201:119" pos:end="201:119">l</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="203:17" pos:end="203:92"><expr pos:start="203:17" pos:end="203:91"><call pos:start="203:17" pos:end="203:91"><name pos:start="203:17" pos:end="203:22">memcpy</name><argument_list pos:start="203:23" pos:end="203:91">(<argument pos:start="203:24" pos:end="203:40"><expr pos:start="203:24" pos:end="203:40"><name pos:start="203:24" pos:end="203:40"><name pos:start="203:24" pos:end="203:26">ctx</name><operator pos:start="203:27" pos:end="203:28">-&gt;</operator><name pos:start="203:29" pos:end="203:33">delay</name><index pos:start="203:34" pos:end="203:40">[<expr pos:start="203:35" pos:end="203:39"><name pos:start="203:35" pos:end="203:35">j</name> <operator pos:start="203:37" pos:end="203:37">+</operator> <literal type="number" pos:start="203:39" pos:end="203:39">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="203:43" pos:end="203:63"><expr pos:start="203:43" pos:end="203:63"><name pos:start="203:43" pos:end="203:57"><name pos:start="203:43" pos:end="203:45">ctx</name><operator pos:start="203:46" pos:end="203:47">-&gt;</operator><name pos:start="203:48" pos:end="203:57">tmp_output</name></name> <operator pos:start="203:59" pos:end="203:59">+</operator> <literal type="number" pos:start="203:61" pos:end="203:63">256</literal></expr></argument>, <argument pos:start="203:66" pos:end="203:90"><expr pos:start="203:66" pos:end="203:90"><sizeof pos:start="203:66" pos:end="203:90">sizeof<argument_list pos:start="203:72" pos:end="203:90">(<argument pos:start="203:73" pos:end="203:89"><expr pos:start="203:73" pos:end="203:89"><name pos:start="203:73" pos:end="203:89"><name pos:start="203:73" pos:end="203:75">ctx</name><operator pos:start="203:76" pos:end="203:77">-&gt;</operator><name pos:start="203:78" pos:end="203:82">delay</name><index pos:start="203:83" pos:end="203:89">[<expr pos:start="203:84" pos:end="203:88"><name pos:start="203:84" pos:end="203:84">j</name> <operator pos:start="203:86" pos:end="203:86">+</operator> <literal type="number" pos:start="203:88" pos:end="203:88">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="209:9" pos:end="229:9"><if pos:start="209:9" pos:end="229:9">if <condition pos:start="209:12" pos:end="209:43">(<expr pos:start="209:13" pos:end="209:42"><name pos:start="209:13" pos:end="209:26"><name pos:start="209:13" pos:end="209:15">ctx</name><operator pos:start="209:16" pos:end="209:17">-&gt;</operator><name pos:start="209:18" pos:end="209:20">bsi</name><operator pos:start="209:21" pos:end="209:21">.</operator><name pos:start="209:22" pos:end="209:26">flags</name></name> <operator pos:start="209:28" pos:end="209:28">&amp;</operator> <name pos:start="209:30" pos:end="209:42">AC3_BSI_LFEON</name></expr>)</condition> <block pos:start="209:45" pos:end="229:9">{<block_content pos:start="211:13" pos:end="227:48">

            <for pos:start="211:13" pos:end="225:13">for <control pos:start="211:17" pos:end="211:37">(<init pos:start="211:18" pos:end="211:23"><expr pos:start="211:18" pos:end="211:22"><name pos:start="211:18" pos:end="211:18">l</name> <operator pos:start="211:20" pos:end="211:20">=</operator> <literal type="number" pos:start="211:22" pos:end="211:22">0</literal></expr>;</init> <condition pos:start="211:25" pos:end="211:32"><expr pos:start="211:25" pos:end="211:31"><name pos:start="211:25" pos:end="211:25">l</name> <operator pos:start="211:27" pos:end="211:27">&lt;</operator> <literal type="number" pos:start="211:29" pos:end="211:31">256</literal></expr>;</condition> <incr pos:start="211:34" pos:end="211:36"><expr pos:start="211:34" pos:end="211:36"><name pos:start="211:34" pos:end="211:34">l</name><operator pos:start="211:35" pos:end="211:36">++</operator></expr></incr>)</control> <block pos:start="211:39" pos:end="225:13">{<block_content pos:start="213:17" pos:end="223:41">

                <expr_stmt pos:start="213:17" pos:end="213:54"><expr pos:start="213:17" pos:end="213:53"><name pos:start="213:17" pos:end="213:21">value</name> <operator pos:start="213:23" pos:end="213:23">=</operator> <call pos:start="213:25" pos:end="213:53"><name pos:start="213:25" pos:end="213:29">lrint</name><argument_list pos:start="213:30" pos:end="213:53">(<argument pos:start="213:31" pos:end="213:52"><expr pos:start="213:31" pos:end="213:52"><name pos:start="213:31" pos:end="213:52"><name pos:start="213:31" pos:end="213:32">ab</name><operator pos:start="213:33" pos:end="213:34">-&gt;</operator><name pos:start="213:35" pos:end="213:46">block_output</name><index pos:start="213:47" pos:end="213:49">[<expr pos:start="213:48" pos:end="213:48"><literal type="number" pos:start="213:48" pos:end="213:48">0</literal></expr>]</index><index pos:start="213:50" pos:end="213:52">[<expr pos:start="213:51" pos:end="213:51"><name pos:start="213:51" pos:end="213:51">l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="215:17" pos:end="221:34"><if pos:start="215:17" pos:end="217:35">if <condition pos:start="215:20" pos:end="215:35">(<expr pos:start="215:21" pos:end="215:34"><name pos:start="215:21" pos:end="215:25">value</name> <operator pos:start="215:27" pos:end="215:27">&lt;</operator> <operator pos:start="215:29" pos:end="215:29">-</operator><literal type="number" pos:start="215:30" pos:end="215:34">32768</literal></expr>)</condition><block type="pseudo" pos:start="217:21" pos:end="217:35"><block_content pos:start="217:21" pos:end="217:35">

                    <expr_stmt pos:start="217:21" pos:end="217:35"><expr pos:start="217:21" pos:end="217:34"><name pos:start="217:21" pos:end="217:25">value</name> <operator pos:start="217:27" pos:end="217:27">=</operator> <operator pos:start="217:29" pos:end="217:29">-</operator><literal type="number" pos:start="217:30" pos:end="217:34">32768</literal></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="219:17" pos:end="221:34">else if <condition pos:start="219:25" pos:end="219:39">(<expr pos:start="219:26" pos:end="219:38"><name pos:start="219:26" pos:end="219:30">value</name> <operator pos:start="219:32" pos:end="219:32">&gt;</operator> <literal type="number" pos:start="219:34" pos:end="219:38">32767</literal></expr>)</condition><block type="pseudo" pos:start="221:21" pos:end="221:34"><block_content pos:start="221:21" pos:end="221:34">

                    <expr_stmt pos:start="221:21" pos:end="221:34"><expr pos:start="221:21" pos:end="221:33"><name pos:start="221:21" pos:end="221:25">value</name> <operator pos:start="221:27" pos:end="221:27">=</operator> <literal type="number" pos:start="221:29" pos:end="221:33">32767</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="223:17" pos:end="223:41"><expr pos:start="223:17" pos:end="223:40"><operator pos:start="223:17" pos:end="223:17">*</operator><operator pos:start="223:18" pos:end="223:18">(</operator><name pos:start="223:19" pos:end="223:29">out_samples</name><operator pos:start="223:30" pos:end="223:31">++</operator><operator pos:start="223:32" pos:end="223:32">)</operator> <operator pos:start="223:34" pos:end="223:34">=</operator> <name pos:start="223:36" pos:end="223:40">value</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="227:13" pos:end="227:48"><expr pos:start="227:13" pos:end="227:47"><operator pos:start="227:13" pos:end="227:13">*</operator><name pos:start="227:14" pos:end="227:22">data_size</name> <operator pos:start="227:24" pos:end="227:25">+=</operator> <literal type="number" pos:start="227:27" pos:end="227:29">256</literal> <operator pos:start="227:31" pos:end="227:31">*</operator> <sizeof pos:start="227:33" pos:end="227:47">sizeof<argument_list pos:start="227:39" pos:end="227:47">(<argument pos:start="227:40" pos:end="227:46"><expr pos:start="227:40" pos:end="227:46"><name pos:start="227:40" pos:end="227:46">int16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:24"><expr pos:start="231:9" pos:end="231:23"><call pos:start="231:9" pos:end="231:23"><name pos:start="231:9" pos:end="231:18">do_downmix</name><argument_list pos:start="231:19" pos:end="231:23">(<argument pos:start="231:20" pos:end="231:22"><expr pos:start="231:20" pos:end="231:22"><name pos:start="231:20" pos:end="231:22">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="233:9" pos:end="239:38"><if pos:start="233:9" pos:end="235:39">if <condition pos:start="233:12" pos:end="233:49">(<expr pos:start="233:13" pos:end="233:48"><name pos:start="233:13" pos:end="233:23"><name pos:start="233:13" pos:end="233:15">ctx</name><operator pos:start="233:16" pos:end="233:17">-&gt;</operator><name pos:start="233:18" pos:end="233:23">output</name></name> <operator pos:start="233:25" pos:end="233:26">==</operator> <name pos:start="233:28" pos:end="233:48">AC3_OUTPUT_UNMODIFIED</name></expr>)</condition><block type="pseudo" pos:start="235:13" pos:end="235:39"><block_content pos:start="235:13" pos:end="235:39">

            <expr_stmt pos:start="235:13" pos:end="235:39"><expr pos:start="235:13" pos:end="235:38"><name pos:start="235:13" pos:end="235:19">nfchans</name> <operator pos:start="235:21" pos:end="235:21">=</operator> <name pos:start="235:23" pos:end="235:38"><name pos:start="235:23" pos:end="235:25">ctx</name><operator pos:start="235:26" pos:end="235:27">-&gt;</operator><name pos:start="235:28" pos:end="235:30">bsi</name><operator pos:start="235:31" pos:end="235:31">.</operator><name pos:start="235:32" pos:end="235:38">nfchans</name></name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="237:9" pos:end="239:38">else<block type="pseudo" pos:start="239:13" pos:end="239:38"><block_content pos:start="239:13" pos:end="239:38">

            <expr_stmt pos:start="239:13" pos:end="239:38"><expr pos:start="239:13" pos:end="239:37"><name pos:start="239:13" pos:end="239:19">nfchans</name> <operator pos:start="239:21" pos:end="239:21">=</operator> <name pos:start="239:23" pos:end="239:37"><name pos:start="239:23" pos:end="239:27">avctx</name><operator pos:start="239:28" pos:end="239:29">-&gt;</operator><name pos:start="239:30" pos:end="239:37">channels</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <for pos:start="241:9" pos:end="257:13">for <control pos:start="241:13" pos:end="241:37">(<init pos:start="241:14" pos:end="241:19"><expr pos:start="241:14" pos:end="241:18"><name pos:start="241:14" pos:end="241:14">k</name> <operator pos:start="241:16" pos:end="241:16">=</operator> <literal type="number" pos:start="241:18" pos:end="241:18">0</literal></expr>;</init> <condition pos:start="241:21" pos:end="241:32"><expr pos:start="241:21" pos:end="241:31"><name pos:start="241:21" pos:end="241:21">k</name> <operator pos:start="241:23" pos:end="241:23">&lt;</operator> <name pos:start="241:25" pos:end="241:31">nfchans</name></expr>;</condition> <incr pos:start="241:34" pos:end="241:36"><expr pos:start="241:34" pos:end="241:36"><name pos:start="241:34" pos:end="241:34">k</name><operator pos:start="241:35" pos:end="241:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="243:13" pos:end="257:13"><block_content pos:start="243:13" pos:end="257:13">

            <for pos:start="243:13" pos:end="257:13">for <control pos:start="243:17" pos:end="243:37">(<init pos:start="243:18" pos:end="243:23"><expr pos:start="243:18" pos:end="243:22"><name pos:start="243:18" pos:end="243:18">l</name> <operator pos:start="243:20" pos:end="243:20">=</operator> <literal type="number" pos:start="243:22" pos:end="243:22">0</literal></expr>;</init> <condition pos:start="243:25" pos:end="243:32"><expr pos:start="243:25" pos:end="243:31"><name pos:start="243:25" pos:end="243:25">l</name> <operator pos:start="243:27" pos:end="243:27">&lt;</operator> <literal type="number" pos:start="243:29" pos:end="243:31">256</literal></expr>;</condition> <incr pos:start="243:34" pos:end="243:36"><expr pos:start="243:34" pos:end="243:36"><name pos:start="243:34" pos:end="243:34">l</name><operator pos:start="243:35" pos:end="243:36">++</operator></expr></incr>)</control> <block pos:start="243:39" pos:end="257:13">{<block_content pos:start="245:17" pos:end="255:41">

                <expr_stmt pos:start="245:17" pos:end="245:58"><expr pos:start="245:17" pos:end="245:57"><name pos:start="245:17" pos:end="245:21">value</name> <operator pos:start="245:23" pos:end="245:23">=</operator> <call pos:start="245:25" pos:end="245:57"><name pos:start="245:25" pos:end="245:29">lrint</name><argument_list pos:start="245:30" pos:end="245:57">(<argument pos:start="245:31" pos:end="245:56"><expr pos:start="245:31" pos:end="245:56"><name pos:start="245:31" pos:end="245:56"><name pos:start="245:31" pos:end="245:32">ab</name><operator pos:start="245:33" pos:end="245:34">-&gt;</operator><name pos:start="245:35" pos:end="245:46">block_output</name><index pos:start="245:47" pos:end="245:53">[<expr pos:start="245:48" pos:end="245:52"><name pos:start="245:48" pos:end="245:48">k</name> <operator pos:start="245:50" pos:end="245:50">+</operator> <literal type="number" pos:start="245:52" pos:end="245:52">1</literal></expr>]</index><index pos:start="245:54" pos:end="245:56">[<expr pos:start="245:55" pos:end="245:55"><name pos:start="245:55" pos:end="245:55">l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="247:17" pos:end="253:34"><if pos:start="247:17" pos:end="249:35">if <condition pos:start="247:20" pos:end="247:35">(<expr pos:start="247:21" pos:end="247:34"><name pos:start="247:21" pos:end="247:25">value</name> <operator pos:start="247:27" pos:end="247:27">&lt;</operator> <operator pos:start="247:29" pos:end="247:29">-</operator><literal type="number" pos:start="247:30" pos:end="247:34">32768</literal></expr>)</condition><block type="pseudo" pos:start="249:21" pos:end="249:35"><block_content pos:start="249:21" pos:end="249:35">

                    <expr_stmt pos:start="249:21" pos:end="249:35"><expr pos:start="249:21" pos:end="249:34"><name pos:start="249:21" pos:end="249:25">value</name> <operator pos:start="249:27" pos:end="249:27">=</operator> <operator pos:start="249:29" pos:end="249:29">-</operator><literal type="number" pos:start="249:30" pos:end="249:34">32768</literal></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="251:17" pos:end="253:34">else if <condition pos:start="251:25" pos:end="251:39">(<expr pos:start="251:26" pos:end="251:38"><name pos:start="251:26" pos:end="251:30">value</name> <operator pos:start="251:32" pos:end="251:32">&gt;</operator> <literal type="number" pos:start="251:34" pos:end="251:38">32767</literal></expr>)</condition><block type="pseudo" pos:start="253:21" pos:end="253:34"><block_content pos:start="253:21" pos:end="253:34">

                    <expr_stmt pos:start="253:21" pos:end="253:34"><expr pos:start="253:21" pos:end="253:33"><name pos:start="253:21" pos:end="253:25">value</name> <operator pos:start="253:27" pos:end="253:27">=</operator> <literal type="number" pos:start="253:29" pos:end="253:33">32767</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="255:17" pos:end="255:41"><expr pos:start="255:17" pos:end="255:40"><operator pos:start="255:17" pos:end="255:17">*</operator><operator pos:start="255:18" pos:end="255:18">(</operator><name pos:start="255:19" pos:end="255:29">out_samples</name><operator pos:start="255:30" pos:end="255:31">++</operator><operator pos:start="255:32" pos:end="255:32">)</operator> <operator pos:start="255:34" pos:end="255:34">=</operator> <name pos:start="255:36" pos:end="255:40">value</name></expr>;</expr_stmt>

            </block_content>}</block></for></block_content></block></for>

        <expr_stmt pos:start="259:9" pos:end="259:55"><expr pos:start="259:9" pos:end="259:54"><operator pos:start="259:9" pos:end="259:9">*</operator><name pos:start="259:10" pos:end="259:18">data_size</name> <operator pos:start="259:20" pos:end="259:21">+=</operator> <name pos:start="259:23" pos:end="259:29">nfchans</name> <operator pos:start="259:31" pos:end="259:31">*</operator> <literal type="number" pos:start="259:33" pos:end="259:35">256</literal> <operator pos:start="259:37" pos:end="259:37">*</operator> <sizeof pos:start="259:39" pos:end="259:54">sizeof <argument_list pos:start="259:46" pos:end="259:54">(<argument pos:start="259:47" pos:end="259:53"><expr pos:start="259:47" pos:end="259:53"><name pos:start="259:47" pos:end="259:53">int16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="265:5" pos:end="265:36">return <expr pos:start="265:12" pos:end="265:35"><name pos:start="265:12" pos:end="265:35"><name pos:start="265:12" pos:end="265:14">ctx</name><operator pos:start="265:15" pos:end="265:16">-&gt;</operator><name pos:start="265:17" pos:end="265:25">sync_info</name><operator pos:start="265:26" pos:end="265:26">.</operator><name pos:start="265:27" pos:end="265:35">framesize</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
