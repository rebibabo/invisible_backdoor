<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22020.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:37">prores_encode_init</name><parameter_list pos:start="1:38" pos:end="1:60">(<parameter pos:start="1:39" pos:end="1:59"><decl pos:start="1:39" pos:end="1:59"><type pos:start="1:39" pos:end="1:54"><name pos:start="1:39" pos:end="1:52">AVCodecContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:59">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:13">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:17">ProresContext</name><modifier pos:start="7:18" pos:end="7:18">*</modifier></type> <name pos:start="7:20" pos:end="7:22">ctx</name> <init pos:start="7:24" pos:end="7:41">= <expr pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:30">avctx</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:41">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:46">(<expr pos:start="11:9" pos:end="11:45"><name pos:start="11:9" pos:end="11:22"><name pos:start="11:9" pos:end="11:13">avctx</name><operator pos:start="11:14" pos:end="11:15">-&gt;</operator><name pos:start="11:16" pos:end="11:22">pix_fmt</name></name> <operator pos:start="11:24" pos:end="11:25">!=</operator> <name pos:start="11:27" pos:end="11:45">PIX_FMT_YUV422P10LE</name></expr>)</condition> <block pos:start="11:48" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:18">

        <expr_stmt pos:start="13:9" pos:end="13:56"><expr pos:start="13:9" pos:end="13:55"><call pos:start="13:9" pos:end="13:55"><name pos:start="13:9" pos:end="13:14">av_log</name><argument_list pos:start="13:15" pos:end="13:55">(<argument pos:start="13:16" pos:end="13:20"><expr pos:start="13:16" pos:end="13:20"><name pos:start="13:16" pos:end="13:20">avctx</name></expr></argument>, <argument pos:start="13:23" pos:end="13:34"><expr pos:start="13:23" pos:end="13:34"><name pos:start="13:23" pos:end="13:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="13:37" pos:end="13:54"><expr pos:start="13:37" pos:end="13:54"><literal type="string" pos:start="13:37" pos:end="13:54">"need YUV422P10\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="15:9" pos:end="15:18">return <expr pos:start="15:16" pos:end="15:17"><operator pos:start="15:16" pos:end="15:16">-</operator><literal type="number" pos:start="15:17" pos:end="15:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="27:5">if <condition pos:start="19:8" pos:end="19:27">(<expr pos:start="19:9" pos:end="19:26"><name pos:start="19:9" pos:end="19:20"><name pos:start="19:9" pos:end="19:13">avctx</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:20">width</name></name> <operator pos:start="19:22" pos:end="19:22">&amp;</operator> <literal type="number" pos:start="19:24" pos:end="19:26">0x1</literal></expr>)</condition> <block pos:start="19:29" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:18">

        <expr_stmt pos:start="21:9" pos:end="23:59"><expr pos:start="21:9" pos:end="23:58"><call pos:start="21:9" pos:end="23:58"><name pos:start="21:9" pos:end="21:14">av_log</name><argument_list pos:start="21:15" pos:end="23:58">(<argument pos:start="21:16" pos:end="21:20"><expr pos:start="21:16" pos:end="21:20"><name pos:start="21:16" pos:end="21:20">avctx</name></expr></argument>, <argument pos:start="21:23" pos:end="21:34"><expr pos:start="21:23" pos:end="21:34"><name pos:start="21:23" pos:end="21:34">AV_LOG_ERROR</name></expr></argument>,

                <argument pos:start="23:17" pos:end="23:57"><expr pos:start="23:17" pos:end="23:57"><literal type="string" pos:start="23:17" pos:end="23:57">"frame width needs to be multiple of 2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="39:5">if <condition pos:start="31:8" pos:end="31:54">(<expr pos:start="31:9" pos:end="31:53"><operator pos:start="31:9" pos:end="31:9">(</operator><name pos:start="31:10" pos:end="31:22"><name pos:start="31:10" pos:end="31:14">avctx</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:22">height</name></name> <operator pos:start="31:24" pos:end="31:24">&amp;</operator> <literal type="number" pos:start="31:26" pos:end="31:28">0xf</literal><operator pos:start="31:29" pos:end="31:29">)</operator> <operator pos:start="31:31" pos:end="31:32">||</operator> <operator pos:start="31:34" pos:end="31:34">(</operator><name pos:start="31:35" pos:end="31:46"><name pos:start="31:35" pos:end="31:39">avctx</name><operator pos:start="31:40" pos:end="31:41">-&gt;</operator><name pos:start="31:42" pos:end="31:46">width</name></name> <operator pos:start="31:48" pos:end="31:48">&amp;</operator> <literal type="number" pos:start="31:50" pos:end="31:52">0xf</literal><operator pos:start="31:53" pos:end="31:53">)</operator></expr>)</condition> <block pos:start="31:56" pos:end="39:5">{<block_content pos:start="33:9" pos:end="37:61">

        <expr_stmt pos:start="33:9" pos:end="33:61"><expr pos:start="33:9" pos:end="33:60"><name pos:start="33:9" pos:end="33:19"><name pos:start="33:9" pos:end="33:11">ctx</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:19">fill_y</name></name> <operator pos:start="33:21" pos:end="33:21">=</operator> <call pos:start="33:23" pos:end="33:60"><name pos:start="33:23" pos:end="33:31">av_malloc</name><argument_list pos:start="33:32" pos:end="33:60">(<argument pos:start="33:33" pos:end="33:59"><expr pos:start="33:33" pos:end="33:59"><name pos:start="33:33" pos:end="33:54">DEFAULT_SLICE_MB_WIDTH</name> <operator pos:start="33:56" pos:end="33:57">&lt;&lt;</operator> <literal type="number" pos:start="33:59" pos:end="33:59">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:61"><expr pos:start="35:9" pos:end="35:60"><name pos:start="35:9" pos:end="35:19"><name pos:start="35:9" pos:end="35:11">ctx</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:19">fill_u</name></name> <operator pos:start="35:21" pos:end="35:21">=</operator> <call pos:start="35:23" pos:end="35:60"><name pos:start="35:23" pos:end="35:31">av_malloc</name><argument_list pos:start="35:32" pos:end="35:60">(<argument pos:start="35:33" pos:end="35:59"><expr pos:start="35:33" pos:end="35:59"><name pos:start="35:33" pos:end="35:54">DEFAULT_SLICE_MB_WIDTH</name> <operator pos:start="35:56" pos:end="35:57">&lt;&lt;</operator> <literal type="number" pos:start="35:59" pos:end="35:59">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:61"><expr pos:start="37:9" pos:end="37:60"><name pos:start="37:9" pos:end="37:19"><name pos:start="37:9" pos:end="37:11">ctx</name><operator pos:start="37:12" pos:end="37:13">-&gt;</operator><name pos:start="37:14" pos:end="37:19">fill_v</name></name> <operator pos:start="37:21" pos:end="37:21">=</operator> <call pos:start="37:23" pos:end="37:60"><name pos:start="37:23" pos:end="37:31">av_malloc</name><argument_list pos:start="37:32" pos:end="37:60">(<argument pos:start="37:33" pos:end="37:59"><expr pos:start="37:33" pos:end="37:59"><name pos:start="37:33" pos:end="37:54">DEFAULT_SLICE_MB_WIDTH</name> <operator pos:start="37:56" pos:end="37:57">&lt;&lt;</operator> <literal type="number" pos:start="37:59" pos:end="37:59">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="43:5" pos:end="69:5"><if pos:start="43:5" pos:end="53:5">if <condition pos:start="43:8" pos:end="43:45">(<expr pos:start="43:9" pos:end="43:44"><name pos:start="43:9" pos:end="43:22"><name pos:start="43:9" pos:end="43:13">avctx</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:22">profile</name></name> <operator pos:start="43:24" pos:end="43:25">==</operator> <name pos:start="43:27" pos:end="43:44">FF_PROFILE_UNKNOWN</name></expr>)</condition> <block pos:start="43:47" pos:end="53:5">{<block_content pos:start="45:9" pos:end="49:66">

        <expr_stmt pos:start="45:9" pos:end="45:52"><expr pos:start="45:9" pos:end="45:51"><name pos:start="45:9" pos:end="45:22"><name pos:start="45:9" pos:end="45:13">avctx</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:22">profile</name></name> <operator pos:start="45:24" pos:end="45:24">=</operator> <name pos:start="45:26" pos:end="45:51">FF_PROFILE_PRORES_STANDARD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="49:66"><expr pos:start="47:9" pos:end="49:65"><call pos:start="47:9" pos:end="49:65"><name pos:start="47:9" pos:end="47:14">av_log</name><argument_list pos:start="47:15" pos:end="49:65">(<argument pos:start="47:16" pos:end="47:20"><expr pos:start="47:16" pos:end="47:20"><name pos:start="47:16" pos:end="47:20">avctx</name></expr></argument>, <argument pos:start="47:23" pos:end="47:33"><expr pos:start="47:23" pos:end="47:33"><name pos:start="47:23" pos:end="47:33">AV_LOG_INFO</name></expr></argument>,

                <argument pos:start="49:17" pos:end="49:64"><expr pos:start="49:17" pos:end="49:64"><literal type="string" pos:start="49:17" pos:end="49:64">"encoding with ProRes standard (apcn) profile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <if type="elseif" pos:start="53:7" pos:end="69:5">else if <condition pos:start="53:15" pos:end="55:53">(<expr pos:start="53:16" pos:end="55:52"><name pos:start="53:16" pos:end="53:29"><name pos:start="53:16" pos:end="53:20">avctx</name><operator pos:start="53:21" pos:end="53:22">-&gt;</operator><name pos:start="53:23" pos:end="53:29">profile</name></name> <operator pos:start="53:31" pos:end="53:31">&lt;</operator> <name pos:start="53:33" pos:end="53:55">FF_PROFILE_PRORES_PROXY</name>

            <operator pos:start="55:13" pos:end="55:14">||</operator> <name pos:start="55:16" pos:end="55:29"><name pos:start="55:16" pos:end="55:20">avctx</name><operator pos:start="55:21" pos:end="55:22">-&gt;</operator><name pos:start="55:23" pos:end="55:29">profile</name></name> <operator pos:start="55:31" pos:end="55:31">&gt;</operator> <name pos:start="55:33" pos:end="55:52">FF_PROFILE_PRORES_HQ</name></expr>)</condition> <block pos:start="55:55" pos:end="69:5">{<block_content pos:start="57:9" pos:end="67:18">

        <expr_stmt pos:start="57:9" pos:end="65:32"><expr pos:start="57:9" pos:end="65:31"><call pos:start="57:9" pos:end="65:31"><name pos:start="57:9" pos:end="57:14">av_log</name><argument_list pos:start="57:15" pos:end="65:31">(

                <argument pos:start="59:17" pos:end="59:21"><expr pos:start="59:17" pos:end="59:21"><name pos:start="59:17" pos:end="59:21">avctx</name></expr></argument>,

                <argument pos:start="61:17" pos:end="61:28"><expr pos:start="61:17" pos:end="61:28"><name pos:start="61:17" pos:end="61:28">AV_LOG_ERROR</name></expr></argument>,

                <argument pos:start="63:17" pos:end="63:94"><expr pos:start="63:17" pos:end="63:94"><literal type="string" pos:start="63:17" pos:end="63:94">"unknown profile %d, use [0 - apco, 1 - apcs, 2 - apcn (default), 3 - apch]\n"</literal></expr></argument>,

                <argument pos:start="65:17" pos:end="65:30"><expr pos:start="65:17" pos:end="65:30"><name pos:start="65:17" pos:end="65:30"><name pos:start="65:17" pos:end="65:21">avctx</name><operator pos:start="65:22" pos:end="65:23">-&gt;</operator><name pos:start="65:24" pos:end="65:30">profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:18">return <expr pos:start="67:16" pos:end="67:17"><operator pos:start="67:16" pos:end="67:16">-</operator><literal type="number" pos:start="67:17" pos:end="67:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:78"><expr pos:start="73:5" pos:end="73:77"><name pos:start="73:5" pos:end="73:20"><name pos:start="73:5" pos:end="73:9">avctx</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:20">codec_tag</name></name> <operator pos:start="73:22" pos:end="73:22">=</operator> <call pos:start="73:24" pos:end="73:77"><name pos:start="73:24" pos:end="73:30">AV_RL32</name><argument_list pos:start="73:31" pos:end="73:77">(<argument pos:start="73:32" pos:end="73:76"><expr pos:start="73:32" pos:end="73:76"><operator pos:start="73:32" pos:end="73:32">(</operator><specifier pos:start="73:33" pos:end="73:37">const</specifier> <name pos:start="73:39" pos:end="73:45">uint8_t</name><operator pos:start="73:46" pos:end="73:46">*</operator><operator pos:start="73:47" pos:end="73:47">)</operator><name pos:start="73:48" pos:end="73:71"><name pos:start="73:48" pos:end="73:55">profiles</name><index pos:start="73:56" pos:end="73:71">[<expr pos:start="73:57" pos:end="73:70"><name pos:start="73:57" pos:end="73:70"><name pos:start="73:57" pos:end="73:61">avctx</name><operator pos:start="73:62" pos:end="73:63">-&gt;</operator><name pos:start="73:64" pos:end="73:70">profile</name></name></expr>]</index></name><operator pos:start="73:72" pos:end="73:72">.</operator><name pos:start="73:73" pos:end="73:76">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="77:5" pos:end="83:5">for <control pos:start="77:9" pos:end="77:29">(<init pos:start="77:10" pos:end="77:15"><expr pos:start="77:10" pos:end="77:14"><name pos:start="77:10" pos:end="77:10">i</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <literal type="number" pos:start="77:14" pos:end="77:14">1</literal></expr>;</init> <condition pos:start="77:17" pos:end="77:24"><expr pos:start="77:17" pos:end="77:23"><name pos:start="77:17" pos:end="77:17">i</name> <operator pos:start="77:19" pos:end="77:20">&lt;=</operator> <literal type="number" pos:start="77:22" pos:end="77:23">16</literal></expr>;</condition> <incr pos:start="77:26" pos:end="77:28"><expr pos:start="77:26" pos:end="77:28"><name pos:start="77:26" pos:end="77:26">i</name><operator pos:start="77:27" pos:end="77:28">++</operator></expr></incr>)</control> <block pos:start="77:31" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:75">

        <expr_stmt pos:start="79:9" pos:end="79:75"><expr pos:start="79:9" pos:end="79:74"><call pos:start="79:9" pos:end="79:74"><name pos:start="79:9" pos:end="79:17">scale_mat</name><argument_list pos:start="79:18" pos:end="79:74">(<argument pos:start="79:19" pos:end="79:43"><expr pos:start="79:19" pos:end="79:43"><name pos:start="79:19" pos:end="79:43"><name pos:start="79:19" pos:end="79:27">QMAT_LUMA</name><index pos:start="79:28" pos:end="79:43">[<expr pos:start="79:29" pos:end="79:42"><name pos:start="79:29" pos:end="79:42"><name pos:start="79:29" pos:end="79:33">avctx</name><operator pos:start="79:34" pos:end="79:35">-&gt;</operator><name pos:start="79:36" pos:end="79:42">profile</name></name></expr>]</index></name></expr></argument>  , <argument pos:start="79:48" pos:end="79:68"><expr pos:start="79:48" pos:end="79:68"><name pos:start="79:48" pos:end="79:68"><name pos:start="79:48" pos:end="79:50">ctx</name><operator pos:start="79:51" pos:end="79:52">-&gt;</operator><name pos:start="79:53" pos:end="79:61">qmat_luma</name><index pos:start="79:62" pos:end="79:68">[<expr pos:start="79:63" pos:end="79:67"><name pos:start="79:63" pos:end="79:63">i</name> <operator pos:start="79:65" pos:end="79:65">-</operator> <literal type="number" pos:start="79:67" pos:end="79:67">1</literal></expr>]</index></name></expr></argument>  , <argument pos:start="79:73" pos:end="79:73"><expr pos:start="79:73" pos:end="79:73"><name pos:start="79:73" pos:end="79:73">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:75"><expr pos:start="81:9" pos:end="81:74"><call pos:start="81:9" pos:end="81:74"><name pos:start="81:9" pos:end="81:17">scale_mat</name><argument_list pos:start="81:18" pos:end="81:74">(<argument pos:start="81:19" pos:end="81:45"><expr pos:start="81:19" pos:end="81:45"><name pos:start="81:19" pos:end="81:45"><name pos:start="81:19" pos:end="81:29">QMAT_CHROMA</name><index pos:start="81:30" pos:end="81:45">[<expr pos:start="81:31" pos:end="81:44"><name pos:start="81:31" pos:end="81:44"><name pos:start="81:31" pos:end="81:35">avctx</name><operator pos:start="81:36" pos:end="81:37">-&gt;</operator><name pos:start="81:38" pos:end="81:44">profile</name></name></expr>]</index></name></expr></argument>, <argument pos:start="81:48" pos:end="81:70"><expr pos:start="81:48" pos:end="81:70"><name pos:start="81:48" pos:end="81:70"><name pos:start="81:48" pos:end="81:50">ctx</name><operator pos:start="81:51" pos:end="81:52">-&gt;</operator><name pos:start="81:53" pos:end="81:63">qmat_chroma</name><index pos:start="81:64" pos:end="81:70">[<expr pos:start="81:65" pos:end="81:69"><name pos:start="81:65" pos:end="81:65">i</name> <operator pos:start="81:67" pos:end="81:67">-</operator> <literal type="number" pos:start="81:69" pos:end="81:69">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="81:73" pos:end="81:73"><expr pos:start="81:73" pos:end="81:73"><name pos:start="81:73" pos:end="81:73">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="87:5" pos:end="87:47"><expr pos:start="87:5" pos:end="87:46"><name pos:start="87:5" pos:end="87:22"><name pos:start="87:5" pos:end="87:9">avctx</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:22">coded_frame</name></name> <operator pos:start="87:24" pos:end="87:24">=</operator> <call pos:start="87:26" pos:end="87:46"><name pos:start="87:26" pos:end="87:44">avcodec_alloc_frame</name><argument_list pos:start="87:45" pos:end="87:46">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:38"><expr pos:start="89:5" pos:end="89:37"><name pos:start="89:5" pos:end="89:33"><name pos:start="89:5" pos:end="89:9">avctx</name><operator pos:start="89:10" pos:end="89:11">-&gt;</operator><name pos:start="89:12" pos:end="89:22">coded_frame</name><operator pos:start="89:23" pos:end="89:24">-&gt;</operator><name pos:start="89:25" pos:end="89:33">key_frame</name></name> <operator pos:start="89:35" pos:end="89:35">=</operator> <literal type="number" pos:start="89:37" pos:end="89:37">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:54"><expr pos:start="91:5" pos:end="91:53"><name pos:start="91:5" pos:end="91:33"><name pos:start="91:5" pos:end="91:9">avctx</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:22">coded_frame</name><operator pos:start="91:23" pos:end="91:24">-&gt;</operator><name pos:start="91:25" pos:end="91:33">pict_type</name></name> <operator pos:start="91:35" pos:end="91:35">=</operator> <name pos:start="91:37" pos:end="91:53">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>



    <return pos:start="95:5" pos:end="95:13">return <expr pos:start="95:12" pos:end="95:12"><literal type="number" pos:start="95:12" pos:end="95:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
