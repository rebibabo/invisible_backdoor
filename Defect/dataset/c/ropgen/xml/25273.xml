<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25273.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">test_cancel</name><parameter_list pos:start="1:24" pos:end="1:29">(<parameter pos:start="1:25" pos:end="1:28"><decl pos:start="1:25" pos:end="1:28"><type pos:start="1:25" pos:end="1:28"><name pos:start="1:25" pos:end="1:28">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="133:1">{<block_content pos:start="5:5" pos:end="131:5">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:18">WorkerTestData</name></type> <name pos:start="5:20" pos:end="5:28"><name pos:start="5:20" pos:end="5:23">data</name><index pos:start="5:24" pos:end="5:28">[<expr pos:start="5:25" pos:end="5:27"><literal type="number" pos:start="5:25" pos:end="5:27">100</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:20">num_canceled</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="17:7">/* Start more work items than there will be threads, to ensure

     * the pool is full.

     */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:23"><expr pos:start="19:5" pos:end="19:22"><call pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:20">test_submit_many</name><argument_list pos:start="19:21" pos:end="19:22">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:65">/* Start long running jobs, to ensure we can cancel some.  */</comment>

    <for pos:start="25:5" pos:end="35:5">for <control pos:start="25:9" pos:end="25:29">(<init pos:start="25:10" pos:end="25:15"><expr pos:start="25:10" pos:end="25:14"><name pos:start="25:10" pos:end="25:10">i</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <literal type="number" pos:start="25:14" pos:end="25:14">0</literal></expr>;</init> <condition pos:start="25:17" pos:end="25:24"><expr pos:start="25:17" pos:end="25:23"><name pos:start="25:17" pos:end="25:17">i</name> <operator pos:start="25:19" pos:end="25:19">&lt;</operator> <literal type="number" pos:start="25:21" pos:end="25:23">100</literal></expr>;</condition> <incr pos:start="25:26" pos:end="25:28"><expr pos:start="25:26" pos:end="25:28"><name pos:start="25:26" pos:end="25:26">i</name><operator pos:start="25:27" pos:end="25:28">++</operator></expr></incr>)</control> <block pos:start="25:31" pos:end="35:5">{<block_content pos:start="27:9" pos:end="33:66">

        <expr_stmt pos:start="27:9" pos:end="27:22"><expr pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:12">data</name><index pos:start="27:13" pos:end="27:15">[<expr pos:start="27:14" pos:end="27:14"><name pos:start="27:14" pos:end="27:14">i</name></expr>]</index></name><operator pos:start="27:16" pos:end="27:16">.</operator><name pos:start="27:17" pos:end="27:17">n</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <literal type="number" pos:start="27:21" pos:end="27:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:35"><expr pos:start="29:9" pos:end="29:34"><name pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:12">data</name><index pos:start="29:13" pos:end="29:15">[<expr pos:start="29:14" pos:end="29:14"><name pos:start="29:14" pos:end="29:14">i</name></expr>]</index></name><operator pos:start="29:16" pos:end="29:16">.</operator><name pos:start="29:17" pos:end="29:19">ret</name> <operator pos:start="29:21" pos:end="29:21">=</operator> <operator pos:start="29:23" pos:end="29:23">-</operator><name pos:start="29:24" pos:end="29:34">EINPROGRESS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="33:66"><expr pos:start="31:9" pos:end="33:65"><name pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:12">data</name><index pos:start="31:13" pos:end="31:15">[<expr pos:start="31:14" pos:end="31:14"><name pos:start="31:14" pos:end="31:14">i</name></expr>]</index></name><operator pos:start="31:16" pos:end="31:16">.</operator><name pos:start="31:17" pos:end="31:21">aiocb</name> <operator pos:start="31:23" pos:end="31:23">=</operator> <call pos:start="31:25" pos:end="33:65"><name pos:start="31:25" pos:end="31:46">thread_pool_submit_aio</name><argument_list pos:start="31:47" pos:end="33:65">(<argument pos:start="31:48" pos:end="31:51"><expr pos:start="31:48" pos:end="31:51"><name pos:start="31:48" pos:end="31:51">pool</name></expr></argument>, <argument pos:start="31:54" pos:end="31:60"><expr pos:start="31:54" pos:end="31:60"><name pos:start="31:54" pos:end="31:60">long_cb</name></expr></argument>, <argument pos:start="31:63" pos:end="31:70"><expr pos:start="31:63" pos:end="31:70"><operator pos:start="31:63" pos:end="31:63">&amp;</operator><name pos:start="31:64" pos:end="31:70"><name pos:start="31:64" pos:end="31:67">data</name><index pos:start="31:68" pos:end="31:70">[<expr pos:start="31:69" pos:end="31:69"><name pos:start="31:69" pos:end="31:69">i</name></expr>]</index></name></expr></argument>,

                                               <argument pos:start="33:48" pos:end="33:54"><expr pos:start="33:48" pos:end="33:54"><name pos:start="33:48" pos:end="33:54">done_cb</name></expr></argument>, <argument pos:start="33:57" pos:end="33:64"><expr pos:start="33:57" pos:end="33:64"><operator pos:start="33:57" pos:end="33:57">&amp;</operator><name pos:start="33:58" pos:end="33:64"><name pos:start="33:58" pos:end="33:61">data</name><index pos:start="33:62" pos:end="33:64">[<expr pos:start="33:63" pos:end="33:63"><name pos:start="33:63" pos:end="33:63">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="39:5" pos:end="43:7">/* Starting the threads may be left to a bottom half.  Let it

     * run, but do not waste too much time...

     */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:17"><expr pos:start="45:5" pos:end="45:16"><name pos:start="45:5" pos:end="45:10">active</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <literal type="number" pos:start="45:14" pos:end="45:16">100</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:20"><expr pos:start="47:5" pos:end="47:19"><call pos:start="47:5" pos:end="47:19"><name pos:start="47:5" pos:end="47:14">aio_notify</name><argument_list pos:start="47:15" pos:end="47:19">(<argument pos:start="47:16" pos:end="47:18"><expr pos:start="47:16" pos:end="47:18"><name pos:start="47:16" pos:end="47:18">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:25"><expr pos:start="49:5" pos:end="49:24"><call pos:start="49:5" pos:end="49:24"><name pos:start="49:5" pos:end="49:12">aio_poll</name><argument_list pos:start="49:13" pos:end="49:24">(<argument pos:start="49:14" pos:end="49:16"><expr pos:start="49:14" pos:end="49:16"><name pos:start="49:14" pos:end="49:16">ctx</name></expr></argument>, <argument pos:start="49:19" pos:end="49:23"><expr pos:start="49:19" pos:end="49:23"><name pos:start="49:19" pos:end="49:23">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="57:7">/* Wait some time for the threads to start, with some sanity

     * testing on the behavior of the scheduler...

     */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:37"><expr pos:start="59:5" pos:end="59:36"><call pos:start="59:5" pos:end="59:36"><name pos:start="59:5" pos:end="59:19">g_assert_cmpint</name><argument_list pos:start="59:20" pos:end="59:36">(<argument pos:start="59:21" pos:end="59:26"><expr pos:start="59:21" pos:end="59:26"><name pos:start="59:21" pos:end="59:26">active</name></expr></argument>, <argument pos:start="59:29" pos:end="59:30"><expr pos:start="59:29" pos:end="59:30"><operator pos:start="59:29" pos:end="59:30">==</operator></expr></argument>, <argument pos:start="59:33" pos:end="59:35"><expr pos:start="59:33" pos:end="59:35"><literal type="number" pos:start="59:33" pos:end="59:35">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:22"><expr pos:start="61:5" pos:end="61:21"><call pos:start="61:5" pos:end="61:21"><name pos:start="61:5" pos:end="61:12">g_usleep</name><argument_list pos:start="61:13" pos:end="61:21">(<argument pos:start="61:14" pos:end="61:20"><expr pos:start="61:14" pos:end="61:20"><literal type="number" pos:start="61:14" pos:end="61:20">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:35"><expr pos:start="63:5" pos:end="63:34"><call pos:start="63:5" pos:end="63:34"><name pos:start="63:5" pos:end="63:19">g_assert_cmpint</name><argument_list pos:start="63:20" pos:end="63:34">(<argument pos:start="63:21" pos:end="63:26"><expr pos:start="63:21" pos:end="63:26"><name pos:start="63:21" pos:end="63:26">active</name></expr></argument>, <argument pos:start="63:29" pos:end="63:29"><expr pos:start="63:29" pos:end="63:29"><operator pos:start="63:29" pos:end="63:29">&gt;</operator></expr></argument>, <argument pos:start="63:32" pos:end="63:33"><expr pos:start="63:32" pos:end="63:33"><literal type="number" pos:start="63:32" pos:end="63:33">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:57">/* Cancel the jobs that haven't been started yet.  */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:21"><expr pos:start="69:5" pos:end="69:20"><name pos:start="69:5" pos:end="69:16">num_canceled</name> <operator pos:start="69:18" pos:end="69:18">=</operator> <literal type="number" pos:start="69:20" pos:end="69:20">0</literal></expr>;</expr_stmt>

    <for pos:start="71:5" pos:end="85:5">for <control pos:start="71:9" pos:end="71:29">(<init pos:start="71:10" pos:end="71:15"><expr pos:start="71:10" pos:end="71:14"><name pos:start="71:10" pos:end="71:10">i</name> <operator pos:start="71:12" pos:end="71:12">=</operator> <literal type="number" pos:start="71:14" pos:end="71:14">0</literal></expr>;</init> <condition pos:start="71:17" pos:end="71:24"><expr pos:start="71:17" pos:end="71:23"><name pos:start="71:17" pos:end="71:17">i</name> <operator pos:start="71:19" pos:end="71:19">&lt;</operator> <literal type="number" pos:start="71:21" pos:end="71:23">100</literal></expr>;</condition> <incr pos:start="71:26" pos:end="71:28"><expr pos:start="71:26" pos:end="71:28"><name pos:start="71:26" pos:end="71:26">i</name><operator pos:start="71:27" pos:end="71:28">++</operator></expr></incr>)</control> <block pos:start="71:31" pos:end="85:5">{<block_content pos:start="73:9" pos:end="83:9">

        <if_stmt pos:start="73:9" pos:end="83:9"><if pos:start="73:9" pos:end="83:9">if <condition pos:start="73:12" pos:end="73:50">(<expr pos:start="73:13" pos:end="73:49"><call pos:start="73:13" pos:end="73:44"><name pos:start="73:13" pos:end="73:26">atomic_cmpxchg</name><argument_list pos:start="73:27" pos:end="73:44">(<argument pos:start="73:28" pos:end="73:37"><expr pos:start="73:28" pos:end="73:37"><operator pos:start="73:28" pos:end="73:28">&amp;</operator><name pos:start="73:29" pos:end="73:35"><name pos:start="73:29" pos:end="73:32">data</name><index pos:start="73:33" pos:end="73:35">[<expr pos:start="73:34" pos:end="73:34"><name pos:start="73:34" pos:end="73:34">i</name></expr>]</index></name><operator pos:start="73:36" pos:end="73:36">.</operator><name pos:start="73:37" pos:end="73:37">n</name></expr></argument>, <argument pos:start="73:40" pos:end="73:40"><expr pos:start="73:40" pos:end="73:40"><literal type="number" pos:start="73:40" pos:end="73:40">0</literal></expr></argument>, <argument pos:start="73:43" pos:end="73:43"><expr pos:start="73:43" pos:end="73:43"><literal type="number" pos:start="73:43" pos:end="73:43">3</literal></expr></argument>)</argument_list></call> <operator pos:start="73:46" pos:end="73:47">==</operator> <literal type="number" pos:start="73:49" pos:end="73:49">0</literal></expr>)</condition> <block pos:start="73:52" pos:end="83:9">{<block_content pos:start="75:13" pos:end="81:27">

            <expr_stmt pos:start="75:13" pos:end="75:37"><expr pos:start="75:13" pos:end="75:36"><name pos:start="75:13" pos:end="75:19"><name pos:start="75:13" pos:end="75:16">data</name><index pos:start="75:17" pos:end="75:19">[<expr pos:start="75:18" pos:end="75:18"><name pos:start="75:18" pos:end="75:18">i</name></expr>]</index></name><operator pos:start="75:20" pos:end="75:20">.</operator><name pos:start="75:21" pos:end="75:23">ret</name> <operator pos:start="75:25" pos:end="75:25">=</operator> <operator pos:start="75:27" pos:end="75:27">-</operator><name pos:start="75:28" pos:end="75:36">ECANCELED</name></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:43"><expr pos:start="77:13" pos:end="77:42"><call pos:start="77:13" pos:end="77:42"><name pos:start="77:13" pos:end="77:27">bdrv_aio_cancel</name><argument_list pos:start="77:28" pos:end="77:42">(<argument pos:start="77:29" pos:end="77:41"><expr pos:start="77:29" pos:end="77:41"><name pos:start="77:29" pos:end="77:35"><name pos:start="77:29" pos:end="77:32">data</name><index pos:start="77:33" pos:end="77:35">[<expr pos:start="77:34" pos:end="77:34"><name pos:start="77:34" pos:end="77:34">i</name></expr>]</index></name><operator pos:start="77:36" pos:end="77:36">.</operator><name pos:start="77:37" pos:end="77:41">aiocb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:21"><expr pos:start="79:13" pos:end="79:20"><name pos:start="79:13" pos:end="79:18">active</name><operator pos:start="79:19" pos:end="79:20">--</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:27"><expr pos:start="81:13" pos:end="81:26"><name pos:start="81:13" pos:end="81:24">num_canceled</name><operator pos:start="81:25" pos:end="81:26">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="87:5" pos:end="87:34"><expr pos:start="87:5" pos:end="87:33"><call pos:start="87:5" pos:end="87:33"><name pos:start="87:5" pos:end="87:19">g_assert_cmpint</name><argument_list pos:start="87:20" pos:end="87:33">(<argument pos:start="87:21" pos:end="87:26"><expr pos:start="87:21" pos:end="87:26"><name pos:start="87:21" pos:end="87:26">active</name></expr></argument>, <argument pos:start="87:29" pos:end="87:29"><expr pos:start="87:29" pos:end="87:29"><operator pos:start="87:29" pos:end="87:29">&gt;</operator></expr></argument>, <argument pos:start="87:32" pos:end="87:32"><expr pos:start="87:32" pos:end="87:32"><literal type="number" pos:start="87:32" pos:end="87:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:42"><expr pos:start="89:5" pos:end="89:41"><call pos:start="89:5" pos:end="89:41"><name pos:start="89:5" pos:end="89:19">g_assert_cmpint</name><argument_list pos:start="89:20" pos:end="89:41">(<argument pos:start="89:21" pos:end="89:32"><expr pos:start="89:21" pos:end="89:32"><name pos:start="89:21" pos:end="89:32">num_canceled</name></expr></argument>, <argument pos:start="89:35" pos:end="89:35"><expr pos:start="89:35" pos:end="89:35"><operator pos:start="89:35" pos:end="89:35">&lt;</operator></expr></argument>, <argument pos:start="89:38" pos:end="89:40"><expr pos:start="89:38" pos:end="89:40"><literal type="number" pos:start="89:38" pos:end="89:40">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="93:5" pos:end="93:61">/* Canceling the others will be a blocking operation.  */</comment>

    <for pos:start="95:5" pos:end="103:5">for <control pos:start="95:9" pos:end="95:29">(<init pos:start="95:10" pos:end="95:15"><expr pos:start="95:10" pos:end="95:14"><name pos:start="95:10" pos:end="95:10">i</name> <operator pos:start="95:12" pos:end="95:12">=</operator> <literal type="number" pos:start="95:14" pos:end="95:14">0</literal></expr>;</init> <condition pos:start="95:17" pos:end="95:24"><expr pos:start="95:17" pos:end="95:23"><name pos:start="95:17" pos:end="95:17">i</name> <operator pos:start="95:19" pos:end="95:19">&lt;</operator> <literal type="number" pos:start="95:21" pos:end="95:23">100</literal></expr>;</condition> <incr pos:start="95:26" pos:end="95:28"><expr pos:start="95:26" pos:end="95:28"><name pos:start="95:26" pos:end="95:26">i</name><operator pos:start="95:27" pos:end="95:28">++</operator></expr></incr>)</control> <block pos:start="95:31" pos:end="103:5">{<block_content pos:start="97:9" pos:end="101:9">

        <if_stmt pos:start="97:9" pos:end="101:9"><if pos:start="97:9" pos:end="101:9">if <condition pos:start="97:12" pos:end="97:27">(<expr pos:start="97:13" pos:end="97:26"><name pos:start="97:13" pos:end="97:19"><name pos:start="97:13" pos:end="97:16">data</name><index pos:start="97:17" pos:end="97:19">[<expr pos:start="97:18" pos:end="97:18"><name pos:start="97:18" pos:end="97:18">i</name></expr>]</index></name><operator pos:start="97:20" pos:end="97:20">.</operator><name pos:start="97:21" pos:end="97:21">n</name> <operator pos:start="97:23" pos:end="97:24">!=</operator> <literal type="number" pos:start="97:26" pos:end="97:26">3</literal></expr>)</condition> <block pos:start="97:29" pos:end="101:9">{<block_content pos:start="99:13" pos:end="99:43">

            <expr_stmt pos:start="99:13" pos:end="99:43"><expr pos:start="99:13" pos:end="99:42"><call pos:start="99:13" pos:end="99:42"><name pos:start="99:13" pos:end="99:27">bdrv_aio_cancel</name><argument_list pos:start="99:28" pos:end="99:42">(<argument pos:start="99:29" pos:end="99:41"><expr pos:start="99:29" pos:end="99:41"><name pos:start="99:29" pos:end="99:35"><name pos:start="99:29" pos:end="99:32">data</name><index pos:start="99:33" pos:end="99:35">[<expr pos:start="99:34" pos:end="99:34"><name pos:start="99:34" pos:end="99:34">i</name></expr>]</index></name><operator pos:start="99:36" pos:end="99:36">.</operator><name pos:start="99:37" pos:end="99:41">aiocb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="107:5" pos:end="107:64">/* Finish execution and execute any remaining callbacks.  */</comment>

    <expr_stmt pos:start="109:5" pos:end="109:24"><expr pos:start="109:5" pos:end="109:23"><call pos:start="109:5" pos:end="109:23"><name pos:start="109:5" pos:end="109:21">qemu_aio_wait_all</name><argument_list pos:start="109:22" pos:end="109:23">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:35"><expr pos:start="111:5" pos:end="111:34"><call pos:start="111:5" pos:end="111:34"><name pos:start="111:5" pos:end="111:19">g_assert_cmpint</name><argument_list pos:start="111:20" pos:end="111:34">(<argument pos:start="111:21" pos:end="111:26"><expr pos:start="111:21" pos:end="111:26"><name pos:start="111:21" pos:end="111:26">active</name></expr></argument>, <argument pos:start="111:29" pos:end="111:30"><expr pos:start="111:29" pos:end="111:30"><operator pos:start="111:29" pos:end="111:30">==</operator></expr></argument>, <argument pos:start="111:33" pos:end="111:33"><expr pos:start="111:33" pos:end="111:33"><literal type="number" pos:start="111:33" pos:end="111:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="113:5" pos:end="131:5">for <control pos:start="113:9" pos:end="113:29">(<init pos:start="113:10" pos:end="113:15"><expr pos:start="113:10" pos:end="113:14"><name pos:start="113:10" pos:end="113:10">i</name> <operator pos:start="113:12" pos:end="113:12">=</operator> <literal type="number" pos:start="113:14" pos:end="113:14">0</literal></expr>;</init> <condition pos:start="113:17" pos:end="113:24"><expr pos:start="113:17" pos:end="113:23"><name pos:start="113:17" pos:end="113:17">i</name> <operator pos:start="113:19" pos:end="113:19">&lt;</operator> <literal type="number" pos:start="113:21" pos:end="113:23">100</literal></expr>;</condition> <incr pos:start="113:26" pos:end="113:28"><expr pos:start="113:26" pos:end="113:28"><name pos:start="113:26" pos:end="113:26">i</name><operator pos:start="113:27" pos:end="113:28">++</operator></expr></incr>)</control> <block pos:start="113:31" pos:end="131:5">{<block_content pos:start="115:9" pos:end="129:9">

        <if_stmt pos:start="115:9" pos:end="129:9"><if pos:start="115:9" pos:end="121:9">if <condition pos:start="115:12" pos:end="115:27">(<expr pos:start="115:13" pos:end="115:26"><name pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:16">data</name><index pos:start="115:17" pos:end="115:19">[<expr pos:start="115:18" pos:end="115:18"><name pos:start="115:18" pos:end="115:18">i</name></expr>]</index></name><operator pos:start="115:20" pos:end="115:20">.</operator><name pos:start="115:21" pos:end="115:21">n</name> <operator pos:start="115:23" pos:end="115:24">==</operator> <literal type="number" pos:start="115:26" pos:end="115:26">3</literal></expr>)</condition> <block pos:start="115:29" pos:end="121:9">{<block_content pos:start="117:13" pos:end="119:44">

            <expr_stmt pos:start="117:13" pos:end="117:57"><expr pos:start="117:13" pos:end="117:56"><call pos:start="117:13" pos:end="117:56"><name pos:start="117:13" pos:end="117:27">g_assert_cmpint</name><argument_list pos:start="117:28" pos:end="117:56">(<argument pos:start="117:29" pos:end="117:39"><expr pos:start="117:29" pos:end="117:39"><name pos:start="117:29" pos:end="117:35"><name pos:start="117:29" pos:end="117:32">data</name><index pos:start="117:33" pos:end="117:35">[<expr pos:start="117:34" pos:end="117:34"><name pos:start="117:34" pos:end="117:34">i</name></expr>]</index></name><operator pos:start="117:36" pos:end="117:36">.</operator><name pos:start="117:37" pos:end="117:39">ret</name></expr></argument>, <argument pos:start="117:42" pos:end="117:43"><expr pos:start="117:42" pos:end="117:43"><operator pos:start="117:42" pos:end="117:43">==</operator></expr></argument>, <argument pos:start="117:46" pos:end="117:55"><expr pos:start="117:46" pos:end="117:55"><operator pos:start="117:46" pos:end="117:46">-</operator><name pos:start="117:47" pos:end="117:55">ECANCELED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:44"><expr pos:start="119:13" pos:end="119:43"><call pos:start="119:13" pos:end="119:43"><name pos:start="119:13" pos:end="119:20">g_assert</name><argument_list pos:start="119:21" pos:end="119:43">(<argument pos:start="119:22" pos:end="119:42"><expr pos:start="119:22" pos:end="119:42"><name pos:start="119:22" pos:end="119:28"><name pos:start="119:22" pos:end="119:25">data</name><index pos:start="119:26" pos:end="119:28">[<expr pos:start="119:27" pos:end="119:27"><name pos:start="119:27" pos:end="119:27">i</name></expr>]</index></name><operator pos:start="119:29" pos:end="119:29">.</operator><name pos:start="119:30" pos:end="119:34">aiocb</name> <operator pos:start="119:36" pos:end="119:37">!=</operator> <name pos:start="119:39" pos:end="119:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="121:11" pos:end="129:9">else <block pos:start="121:16" pos:end="129:9">{<block_content pos:start="123:13" pos:end="127:44">

            <expr_stmt pos:start="123:13" pos:end="123:46"><expr pos:start="123:13" pos:end="123:45"><call pos:start="123:13" pos:end="123:45"><name pos:start="123:13" pos:end="123:27">g_assert_cmpint</name><argument_list pos:start="123:28" pos:end="123:45">(<argument pos:start="123:29" pos:end="123:37"><expr pos:start="123:29" pos:end="123:37"><name pos:start="123:29" pos:end="123:35"><name pos:start="123:29" pos:end="123:32">data</name><index pos:start="123:33" pos:end="123:35">[<expr pos:start="123:34" pos:end="123:34"><name pos:start="123:34" pos:end="123:34">i</name></expr>]</index></name><operator pos:start="123:36" pos:end="123:36">.</operator><name pos:start="123:37" pos:end="123:37">n</name></expr></argument>, <argument pos:start="123:40" pos:end="123:41"><expr pos:start="123:40" pos:end="123:41"><operator pos:start="123:40" pos:end="123:41">==</operator></expr></argument>, <argument pos:start="123:44" pos:end="123:44"><expr pos:start="123:44" pos:end="123:44"><literal type="number" pos:start="123:44" pos:end="123:44">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:48"><expr pos:start="125:13" pos:end="125:47"><call pos:start="125:13" pos:end="125:47"><name pos:start="125:13" pos:end="125:27">g_assert_cmpint</name><argument_list pos:start="125:28" pos:end="125:47">(<argument pos:start="125:29" pos:end="125:39"><expr pos:start="125:29" pos:end="125:39"><name pos:start="125:29" pos:end="125:35"><name pos:start="125:29" pos:end="125:32">data</name><index pos:start="125:33" pos:end="125:35">[<expr pos:start="125:34" pos:end="125:34"><name pos:start="125:34" pos:end="125:34">i</name></expr>]</index></name><operator pos:start="125:36" pos:end="125:36">.</operator><name pos:start="125:37" pos:end="125:39">ret</name></expr></argument>, <argument pos:start="125:42" pos:end="125:43"><expr pos:start="125:42" pos:end="125:43"><operator pos:start="125:42" pos:end="125:43">==</operator></expr></argument>, <argument pos:start="125:46" pos:end="125:46"><expr pos:start="125:46" pos:end="125:46"><literal type="number" pos:start="125:46" pos:end="125:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:44"><expr pos:start="127:13" pos:end="127:43"><call pos:start="127:13" pos:end="127:43"><name pos:start="127:13" pos:end="127:20">g_assert</name><argument_list pos:start="127:21" pos:end="127:43">(<argument pos:start="127:22" pos:end="127:42"><expr pos:start="127:22" pos:end="127:42"><name pos:start="127:22" pos:end="127:28"><name pos:start="127:22" pos:end="127:25">data</name><index pos:start="127:26" pos:end="127:28">[<expr pos:start="127:27" pos:end="127:27"><name pos:start="127:27" pos:end="127:27">i</name></expr>]</index></name><operator pos:start="127:29" pos:end="127:29">.</operator><name pos:start="127:30" pos:end="127:34">aiocb</name> <operator pos:start="127:36" pos:end="127:37">==</operator> <name pos:start="127:39" pos:end="127:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
