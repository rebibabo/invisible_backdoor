<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20208.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:44"><name pos:start="1:1" pos:end="1:9">eth_write</name><argument_list pos:start="1:10" pos:end="3:44">(<argument pos:start="1:11" pos:end="1:22">void *opaque</argument>, <argument pos:start="1:25" pos:end="1:47">target_phys_addr_t addr</argument>,

          <argument pos:start="3:11" pos:end="3:24">uint64_t val64</argument>, <argument pos:start="3:27" pos:end="3:43">unsigned int size</argument>)</argument_list></macro>

<block pos:start="5:1" pos:end="87:1">{<block_content pos:start="7:9" pos:end="85:9">

	<decl_stmt pos:start="7:9" pos:end="7:36"><decl pos:start="7:9" pos:end="7:35"><type pos:start="7:9" pos:end="7:23"><name pos:start="7:9" pos:end="7:21"><name pos:start="7:9" pos:end="7:14">struct</name> <name pos:start="7:16" pos:end="7:21">fs_eth</name></name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:26">eth</name> <init pos:start="7:28" pos:end="7:35">= <expr pos:start="7:30" pos:end="7:35"><name pos:start="7:30" pos:end="7:35">opaque</name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:31"><decl pos:start="9:9" pos:end="9:30"><type pos:start="9:9" pos:end="9:16"><name pos:start="9:9" pos:end="9:16">uint32_t</name></type> <name pos:start="9:18" pos:end="9:22">value</name> <init pos:start="9:24" pos:end="9:30">= <expr pos:start="9:26" pos:end="9:30"><name pos:start="9:26" pos:end="9:30">val64</name></expr></init></decl>;</decl_stmt>



	<expr_stmt pos:start="13:9" pos:end="13:19"><expr pos:start="13:9" pos:end="13:18"><name pos:start="13:9" pos:end="13:12">addr</name> <operator pos:start="13:14" pos:end="13:16">&gt;&gt;=</operator> <literal type="number" pos:start="13:18" pos:end="13:18">2</literal></expr>;</expr_stmt>

	<switch pos:start="15:9" pos:end="85:9">switch <condition pos:start="15:16" pos:end="15:21">(<expr pos:start="15:17" pos:end="15:20"><name pos:start="15:17" pos:end="15:20">addr</name></expr>)</condition>

	<block pos:start="17:9" pos:end="85:9">{<block_content pos:start="19:17" pos:end="83:30">

		<case pos:start="19:17" pos:end="19:31">case <expr pos:start="19:22" pos:end="19:30"><name pos:start="19:22" pos:end="19:30">RW_MA0_LO</name></expr>:</case>

		<case pos:start="21:17" pos:end="21:31">case <expr pos:start="21:22" pos:end="21:30"><name pos:start="21:22" pos:end="21:30">RW_MA0_HI</name></expr>:</case>

			<expr_stmt pos:start="23:25" pos:end="23:48"><expr pos:start="23:25" pos:end="23:47"><name pos:start="23:25" pos:end="23:39"><name pos:start="23:25" pos:end="23:27">eth</name><operator pos:start="23:28" pos:end="23:29">-&gt;</operator><name pos:start="23:30" pos:end="23:33">regs</name><index pos:start="23:34" pos:end="23:39">[<expr pos:start="23:35" pos:end="23:38"><name pos:start="23:35" pos:end="23:38">addr</name></expr>]</index></name> <operator pos:start="23:41" pos:end="23:41">=</operator> <name pos:start="23:43" pos:end="23:47">value</name></expr>;</expr_stmt>

			<expr_stmt pos:start="25:25" pos:end="25:46"><expr pos:start="25:25" pos:end="25:45"><call pos:start="25:25" pos:end="25:45"><name pos:start="25:25" pos:end="25:37">eth_update_ma</name><argument_list pos:start="25:38" pos:end="25:45">(<argument pos:start="25:39" pos:end="25:41"><expr pos:start="25:39" pos:end="25:41"><name pos:start="25:39" pos:end="25:41">eth</name></expr></argument>, <argument pos:start="25:44" pos:end="25:44"><expr pos:start="25:44" pos:end="25:44"><literal type="number" pos:start="25:44" pos:end="25:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<break pos:start="27:25" pos:end="27:30">break;</break>

		<case pos:start="29:17" pos:end="29:31">case <expr pos:start="29:22" pos:end="29:30"><name pos:start="29:22" pos:end="29:30">RW_MA1_LO</name></expr>:</case>

		<case pos:start="31:17" pos:end="31:31">case <expr pos:start="31:22" pos:end="31:30"><name pos:start="31:22" pos:end="31:30">RW_MA1_HI</name></expr>:</case>

			<expr_stmt pos:start="33:25" pos:end="33:48"><expr pos:start="33:25" pos:end="33:47"><name pos:start="33:25" pos:end="33:39"><name pos:start="33:25" pos:end="33:27">eth</name><operator pos:start="33:28" pos:end="33:29">-&gt;</operator><name pos:start="33:30" pos:end="33:33">regs</name><index pos:start="33:34" pos:end="33:39">[<expr pos:start="33:35" pos:end="33:38"><name pos:start="33:35" pos:end="33:38">addr</name></expr>]</index></name> <operator pos:start="33:41" pos:end="33:41">=</operator> <name pos:start="33:43" pos:end="33:47">value</name></expr>;</expr_stmt>

			<expr_stmt pos:start="35:25" pos:end="35:46"><expr pos:start="35:25" pos:end="35:45"><call pos:start="35:25" pos:end="35:45"><name pos:start="35:25" pos:end="35:37">eth_update_ma</name><argument_list pos:start="35:38" pos:end="35:45">(<argument pos:start="35:39" pos:end="35:41"><expr pos:start="35:39" pos:end="35:41"><name pos:start="35:39" pos:end="35:41">eth</name></expr></argument>, <argument pos:start="35:44" pos:end="35:44"><expr pos:start="35:44" pos:end="35:44"><literal type="number" pos:start="35:44" pos:end="35:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<break pos:start="37:25" pos:end="37:30">break;</break>



		<case pos:start="41:17" pos:end="41:33">case <expr pos:start="41:22" pos:end="41:32"><name pos:start="41:22" pos:end="41:32">RW_MGM_CTRL</name></expr>:</case>

			<comment type="block" pos:start="43:25" pos:end="43:62">/* Attach an MDIO/PHY abstraction.  */</comment>

			<if_stmt pos:start="45:25" pos:end="47:63"><if pos:start="45:25" pos:end="47:63">if <condition pos:start="45:28" pos:end="45:38">(<expr pos:start="45:29" pos:end="45:37"><name pos:start="45:29" pos:end="45:33">value</name> <operator pos:start="45:35" pos:end="45:35">&amp;</operator> <literal type="number" pos:start="45:37" pos:end="45:37">2</literal></expr>)</condition><block type="pseudo" pos:start="47:33" pos:end="47:63"><block_content pos:start="47:33" pos:end="47:63">

				<expr_stmt pos:start="47:33" pos:end="47:63"><expr pos:start="47:33" pos:end="47:62"><name pos:start="47:33" pos:end="47:50"><name pos:start="47:33" pos:end="47:35">eth</name><operator pos:start="47:36" pos:end="47:37">-&gt;</operator><name pos:start="47:38" pos:end="47:45">mdio_bus</name><operator pos:start="47:46" pos:end="47:46">.</operator><name pos:start="47:47" pos:end="47:50">mdio</name></name> <operator pos:start="47:52" pos:end="47:52">=</operator> <name pos:start="47:54" pos:end="47:58">value</name> <operator pos:start="47:60" pos:end="47:60">&amp;</operator> <literal type="number" pos:start="47:62" pos:end="47:62">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt pos:start="49:25" pos:end="55:25"><if pos:start="49:25" pos:end="55:25">if <condition pos:start="49:28" pos:end="49:61">(<expr pos:start="49:29" pos:end="49:60"><name pos:start="49:29" pos:end="49:45"><name pos:start="49:29" pos:end="49:31">eth</name><operator pos:start="49:32" pos:end="49:33">-&gt;</operator><name pos:start="49:34" pos:end="49:41">mdio_bus</name><operator pos:start="49:42" pos:end="49:42">.</operator><name pos:start="49:43" pos:end="49:45">mdc</name></name> <operator pos:start="49:47" pos:end="49:48">!=</operator> <operator pos:start="49:50" pos:end="49:50">(</operator><name pos:start="49:51" pos:end="49:55">value</name> <operator pos:start="49:57" pos:end="49:57">&amp;</operator> <literal type="number" pos:start="49:59" pos:end="49:59">4</literal><operator pos:start="49:60" pos:end="49:60">)</operator></expr>)</condition> <block pos:start="49:63" pos:end="55:25">{<block_content pos:start="51:33" pos:end="53:57">

				<expr_stmt pos:start="51:33" pos:end="51:59"><expr pos:start="51:33" pos:end="51:58"><call pos:start="51:33" pos:end="51:58"><name pos:start="51:33" pos:end="51:42">mdio_cycle</name><argument_list pos:start="51:43" pos:end="51:58">(<argument pos:start="51:44" pos:end="51:57"><expr pos:start="51:44" pos:end="51:57"><operator pos:start="51:44" pos:end="51:44">&amp;</operator><name pos:start="51:45" pos:end="51:57"><name pos:start="51:45" pos:end="51:47">eth</name><operator pos:start="51:48" pos:end="51:49">-&gt;</operator><name pos:start="51:50" pos:end="51:57">mdio_bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt pos:start="53:33" pos:end="53:57"><expr pos:start="53:33" pos:end="53:56"><call pos:start="53:33" pos:end="53:56"><name pos:start="53:33" pos:end="53:51">eth_validate_duplex</name><argument_list pos:start="53:52" pos:end="53:56">(<argument pos:start="53:53" pos:end="53:55"><expr pos:start="53:53" pos:end="53:55"><name pos:start="53:53" pos:end="53:55">eth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			</block_content>}</block></if></if_stmt>

			<expr_stmt pos:start="57:25" pos:end="57:58"><expr pos:start="57:25" pos:end="57:57"><name pos:start="57:25" pos:end="57:41"><name pos:start="57:25" pos:end="57:27">eth</name><operator pos:start="57:28" pos:end="57:29">-&gt;</operator><name pos:start="57:30" pos:end="57:37">mdio_bus</name><operator pos:start="57:38" pos:end="57:38">.</operator><name pos:start="57:39" pos:end="57:41">mdc</name></name> <operator pos:start="57:43" pos:end="57:43">=</operator> <operator pos:start="57:45" pos:end="57:45">!</operator><operator pos:start="57:46" pos:end="57:46">!</operator><operator pos:start="57:47" pos:end="57:47">(</operator><name pos:start="57:48" pos:end="57:52">value</name> <operator pos:start="57:54" pos:end="57:54">&amp;</operator> <literal type="number" pos:start="57:56" pos:end="57:56">4</literal><operator pos:start="57:57" pos:end="57:57">)</operator></expr>;</expr_stmt>

			<expr_stmt pos:start="59:25" pos:end="59:48"><expr pos:start="59:25" pos:end="59:47"><name pos:start="59:25" pos:end="59:39"><name pos:start="59:25" pos:end="59:27">eth</name><operator pos:start="59:28" pos:end="59:29">-&gt;</operator><name pos:start="59:30" pos:end="59:33">regs</name><index pos:start="59:34" pos:end="59:39">[<expr pos:start="59:35" pos:end="59:38"><name pos:start="59:35" pos:end="59:38">addr</name></expr>]</index></name> <operator pos:start="59:41" pos:end="59:41">=</operator> <name pos:start="59:43" pos:end="59:47">value</name></expr>;</expr_stmt>

			<break pos:start="61:25" pos:end="61:30">break;</break>



		<case pos:start="65:17" pos:end="65:33">case <expr pos:start="65:22" pos:end="65:32"><name pos:start="65:22" pos:end="65:32">RW_REC_CTRL</name></expr>:</case>

			<expr_stmt pos:start="67:25" pos:end="67:48"><expr pos:start="67:25" pos:end="67:47"><name pos:start="67:25" pos:end="67:39"><name pos:start="67:25" pos:end="67:27">eth</name><operator pos:start="67:28" pos:end="67:29">-&gt;</operator><name pos:start="67:30" pos:end="67:33">regs</name><index pos:start="67:34" pos:end="67:39">[<expr pos:start="67:35" pos:end="67:38"><name pos:start="67:35" pos:end="67:38">addr</name></expr>]</index></name> <operator pos:start="67:41" pos:end="67:41">=</operator> <name pos:start="67:43" pos:end="67:47">value</name></expr>;</expr_stmt>

			<expr_stmt pos:start="69:25" pos:end="69:49"><expr pos:start="69:25" pos:end="69:48"><call pos:start="69:25" pos:end="69:48"><name pos:start="69:25" pos:end="69:43">eth_validate_duplex</name><argument_list pos:start="69:44" pos:end="69:48">(<argument pos:start="69:45" pos:end="69:47"><expr pos:start="69:45" pos:end="69:47"><name pos:start="69:45" pos:end="69:47">eth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<break pos:start="71:25" pos:end="71:30">break;</break>



		<default pos:start="75:17" pos:end="75:24">default:</default>

			<expr_stmt pos:start="77:25" pos:end="77:48"><expr pos:start="77:25" pos:end="77:47"><name pos:start="77:25" pos:end="77:39"><name pos:start="77:25" pos:end="77:27">eth</name><operator pos:start="77:28" pos:end="77:29">-&gt;</operator><name pos:start="77:30" pos:end="77:33">regs</name><index pos:start="77:34" pos:end="77:39">[<expr pos:start="77:35" pos:end="77:38"><name pos:start="77:35" pos:end="77:38">addr</name></expr>]</index></name> <operator pos:start="77:41" pos:end="77:41">=</operator> <name pos:start="77:43" pos:end="77:47">value</name></expr>;</expr_stmt>

			<expr_stmt pos:start="79:25" pos:end="81:58"><expr pos:start="79:25" pos:end="81:57"><call pos:start="79:25" pos:end="81:57"><name pos:start="79:25" pos:end="79:25">D</name><argument_list pos:start="79:26" pos:end="81:57">(<argument pos:start="79:27" pos:end="81:56"><expr pos:start="79:27" pos:end="81:56"><call pos:start="79:27" pos:end="81:56"><name pos:start="79:27" pos:end="79:32">printf</name> <argument_list pos:start="79:34" pos:end="81:56">(<argument pos:start="79:35" pos:end="79:46"><expr pos:start="79:35" pos:end="79:46"><literal type="string" pos:start="79:35" pos:end="79:46">"%s %x %x\n"</literal></expr></argument>,

				  <argument pos:start="81:35" pos:end="81:42"><expr pos:start="81:35" pos:end="81:42"><name pos:start="81:35" pos:end="81:42">__func__</name></expr></argument>, <argument pos:start="81:45" pos:end="81:48"><expr pos:start="81:45" pos:end="81:48"><name pos:start="81:45" pos:end="81:48">addr</name></expr></argument>, <argument pos:start="81:51" pos:end="81:55"><expr pos:start="81:51" pos:end="81:55"><name pos:start="81:51" pos:end="81:55">value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<break pos:start="83:25" pos:end="83:30">break;</break>

	</block_content>}</block></switch>

</block_content>}</block>
</unit>
