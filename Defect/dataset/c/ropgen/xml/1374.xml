<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1374.c" pos:tabs="8"><function pos:start="1:1" pos:end="183:1"><type pos:start="1:1" pos:end="1:10"><name pos:start="1:1" pos:end="1:8">qemu_irq</name> <modifier pos:start="1:10" pos:end="1:10">*</modifier></type><name pos:start="1:11" pos:end="1:21">armv7m_init</name><parameter_list pos:start="1:22" pos:end="3:73">(<parameter pos:start="1:23" pos:end="1:36"><decl pos:start="1:23" pos:end="1:36"><type pos:start="1:23" pos:end="1:36"><name pos:start="1:23" pos:end="1:25">int</name></type> <name pos:start="1:27" pos:end="1:36">flash_size</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:51"><decl pos:start="1:39" pos:end="1:51"><type pos:start="1:39" pos:end="1:51"><name pos:start="1:39" pos:end="1:41">int</name></type> <name pos:start="1:43" pos:end="1:51">sram_size</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:49"><decl pos:start="3:23" pos:end="3:49"><type pos:start="3:23" pos:end="3:49"><specifier pos:start="3:23" pos:end="3:27">const</specifier> <name pos:start="3:29" pos:end="3:32">char</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:49">kernel_filename</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:72"><decl pos:start="3:52" pos:end="3:72"><type pos:start="3:52" pos:end="3:72"><specifier pos:start="3:52" pos:end="3:56">const</specifier> <name pos:start="3:58" pos:end="3:61">char</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:72">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="183:1">{<block_content pos:start="7:5" pos:end="181:15">

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">DeviceState</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:21">nvic</name></decl>;</decl_stmt>

    <comment type="block" pos:start="11:5" pos:end="11:40">/* FIXME: make this local state.  */</comment>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:19"><specifier pos:start="13:5" pos:end="13:10">static</specifier> <name pos:start="13:12" pos:end="13:19">qemu_irq</name></type> <name pos:start="13:21" pos:end="13:27"><name pos:start="13:21" pos:end="13:23">pic</name><index pos:start="13:24" pos:end="13:27">[<expr pos:start="13:25" pos:end="13:26"><literal type="number" pos:start="13:25" pos:end="13:26">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">qemu_irq</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:21">cpu_pic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:15">pc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:18">image_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:19"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:18">entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint64_t</name></type> <name pos:start="23:14" pos:end="23:20">lowaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:10"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:19"><decl pos:start="27:5" pos:end="27:18"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:18">big_endian</name></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:23"><expr pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:14">flash_size</name> <operator pos:start="31:16" pos:end="31:17">*=</operator> <literal type="number" pos:start="31:19" pos:end="31:22">1024</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:22"><expr pos:start="33:5" pos:end="33:21"><name pos:start="33:5" pos:end="33:13">sram_size</name> <operator pos:start="33:15" pos:end="33:16">*=</operator> <literal type="number" pos:start="33:18" pos:end="33:21">1024</literal></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="39:32"><if pos:start="37:5" pos:end="39:32">if <condition pos:start="37:8" pos:end="37:19">(<expr pos:start="37:9" pos:end="37:18"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:18">cpu_model</name></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:32"><block_content pos:start="39:9" pos:end="39:32">

	<expr_stmt pos:start="39:9" pos:end="39:32"><expr pos:start="39:9" pos:end="39:31"><name pos:start="39:9" pos:end="39:17">cpu_model</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <literal type="string" pos:start="39:21" pos:end="39:31">"cortex-m3"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:30"><expr pos:start="41:5" pos:end="41:29"><name pos:start="41:5" pos:end="41:7">env</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:29"><name pos:start="41:11" pos:end="41:18">cpu_init</name><argument_list pos:start="41:19" pos:end="41:29">(<argument pos:start="41:20" pos:end="41:28"><expr pos:start="41:20" pos:end="41:28"><name pos:start="41:20" pos:end="41:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="74:0"><if pos:start="43:5" pos:end="74:0">if <condition pos:start="43:8" pos:end="43:13">(<expr pos:start="43:9" pos:end="43:12"><operator pos:start="43:9" pos:end="43:9">!</operator><name pos:start="43:10" pos:end="43:12">env</name></expr>)</condition> <block pos:start="43:15" pos:end="74:0">{<block_content pos:start="45:9" pos:end="47:16">

        <expr_stmt pos:start="45:9" pos:end="45:59"><expr pos:start="45:9" pos:end="45:58"><call pos:start="45:9" pos:end="45:58"><name pos:start="45:9" pos:end="45:15">fprintf</name><argument_list pos:start="45:16" pos:end="45:58">(<argument pos:start="45:17" pos:end="45:22"><expr pos:start="45:17" pos:end="45:22"><name pos:start="45:17" pos:end="45:22">stderr</name></expr></argument>, <argument pos:start="45:25" pos:end="45:57"><expr pos:start="45:25" pos:end="45:57"><literal type="string" pos:start="45:25" pos:end="45:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:16"><expr pos:start="47:9" pos:end="47:15"><call pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:12">exit</name><argument_list pos:start="47:13" pos:end="47:15">(<argument pos:start="47:14" pos:end="47:14"><expr pos:start="47:14" pos:end="47:14"><literal type="number" pos:start="47:14" pos:end="47:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="53:1" pos:end="53:5">#<cpp:directive pos:start="53:2" pos:end="53:3">if</cpp:directive> <expr pos:start="53:5" pos:end="53:5"><literal type="number" pos:start="53:5" pos:end="53:5">0</literal></expr></cpp:if>

    <comment type="block" pos:start="55:5" pos:end="59:66">/* &gt; 32Mb SRAM gets complicated because it overlaps the bitband area.

       We don't have proper commandline options, so allocate half of memory

       as SRAM, up to a maximum of 32Mb, and the rest as code.  */</comment>

    if (ram_size &gt; (512 + 32) * 1024 * 1024)

        ram_size = (512 + 32) * 1024 * 1024;

    sram_size = (ram_size / 2) &amp; TARGET_PAGE_MASK;

    if (sram_size &gt; 32 * 1024 * 1024)

        sram_size = 32 * 1024 * 1024;

    code_size = ram_size - sram_size;

<cpp:endif pos:start="73:1" pos:end="73:6">#<cpp:directive pos:start="73:2" pos:end="73:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="77:5" pos:end="77:71">/* Flash programming is done via the SCU, so pretend it is ROM.  */</comment>

    <expr_stmt pos:start="79:5" pos:end="81:74"><expr pos:start="79:5" pos:end="81:73"><call pos:start="79:5" pos:end="81:73"><name pos:start="79:5" pos:end="79:32">cpu_register_physical_memory</name><argument_list pos:start="79:33" pos:end="81:73">(<argument pos:start="79:34" pos:end="79:34"><expr pos:start="79:34" pos:end="79:34"><literal type="number" pos:start="79:34" pos:end="79:34">0</literal></expr></argument>, <argument pos:start="79:37" pos:end="79:46"><expr pos:start="79:37" pos:end="79:46"><name pos:start="79:37" pos:end="79:46">flash_size</name></expr></argument>,

                                 <argument pos:start="81:34" pos:end="81:72"><expr pos:start="81:34" pos:end="81:72"><call pos:start="81:34" pos:end="81:59"><name pos:start="81:34" pos:end="81:47">qemu_ram_alloc</name><argument_list pos:start="81:48" pos:end="81:59">(<argument pos:start="81:49" pos:end="81:58"><expr pos:start="81:49" pos:end="81:58"><name pos:start="81:49" pos:end="81:58">flash_size</name></expr></argument>)</argument_list></call> <operator pos:start="81:61" pos:end="81:61">|</operator> <name pos:start="81:63" pos:end="81:72">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="85:73"><expr pos:start="83:5" pos:end="85:72"><call pos:start="83:5" pos:end="85:72"><name pos:start="83:5" pos:end="83:32">cpu_register_physical_memory</name><argument_list pos:start="83:33" pos:end="85:72">(<argument pos:start="83:34" pos:end="83:43"><expr pos:start="83:34" pos:end="83:43"><literal type="number" pos:start="83:34" pos:end="83:43">0x20000000</literal></expr></argument>, <argument pos:start="83:46" pos:end="83:54"><expr pos:start="83:46" pos:end="83:54"><name pos:start="83:46" pos:end="83:54">sram_size</name></expr></argument>,

                                 <argument pos:start="85:34" pos:end="85:71"><expr pos:start="85:34" pos:end="85:71"><call pos:start="85:34" pos:end="85:58"><name pos:start="85:34" pos:end="85:47">qemu_ram_alloc</name><argument_list pos:start="85:48" pos:end="85:58">(<argument pos:start="85:49" pos:end="85:57"><expr pos:start="85:49" pos:end="85:57"><name pos:start="85:49" pos:end="85:57">sram_size</name></expr></argument>)</argument_list></call> <operator pos:start="85:60" pos:end="85:60">|</operator> <name pos:start="85:62" pos:end="85:71">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:26"><expr pos:start="87:5" pos:end="87:25"><call pos:start="87:5" pos:end="87:25"><name pos:start="87:5" pos:end="87:23">armv7m_bitband_init</name><argument_list pos:start="87:24" pos:end="87:25">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:44"><expr pos:start="91:5" pos:end="91:43"><name pos:start="91:5" pos:end="91:8">nvic</name> <operator pos:start="91:10" pos:end="91:10">=</operator> <call pos:start="91:12" pos:end="91:43"><name pos:start="91:12" pos:end="91:22">qdev_create</name><argument_list pos:start="91:23" pos:end="91:43">(<argument pos:start="91:24" pos:end="91:27"><expr pos:start="91:24" pos:end="91:27"><name pos:start="91:24" pos:end="91:27">NULL</name></expr></argument>, <argument pos:start="91:30" pos:end="91:42"><expr pos:start="91:30" pos:end="91:42"><literal type="string" pos:start="91:30" pos:end="91:42">"armv7m_nvic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:25"><expr pos:start="93:5" pos:end="93:24"><name pos:start="93:5" pos:end="93:17"><name pos:start="93:5" pos:end="93:7">env</name><operator pos:start="93:8" pos:end="93:9">-&gt;</operator><name pos:start="93:10" pos:end="93:12">v7m</name><operator pos:start="93:13" pos:end="93:13">.</operator><name pos:start="93:14" pos:end="93:17">nvic</name></name> <operator pos:start="93:19" pos:end="93:19">=</operator> <name pos:start="93:21" pos:end="93:24">nvic</name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:20"><expr pos:start="95:5" pos:end="95:19"><call pos:start="95:5" pos:end="95:19"><name pos:start="95:5" pos:end="95:13">qdev_init</name><argument_list pos:start="95:14" pos:end="95:19">(<argument pos:start="95:15" pos:end="95:18"><expr pos:start="95:15" pos:end="95:18"><name pos:start="95:15" pos:end="95:18">nvic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:36"><expr pos:start="97:5" pos:end="97:35"><name pos:start="97:5" pos:end="97:11">cpu_pic</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <call pos:start="97:15" pos:end="97:35"><name pos:start="97:15" pos:end="97:30">arm_pic_init_cpu</name><argument_list pos:start="97:31" pos:end="97:35">(<argument pos:start="97:32" pos:end="97:34"><expr pos:start="97:32" pos:end="97:34"><name pos:start="97:32" pos:end="97:34">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:76"><expr pos:start="99:5" pos:end="99:75"><call pos:start="99:5" pos:end="99:75"><name pos:start="99:5" pos:end="99:22">sysbus_connect_irq</name><argument_list pos:start="99:23" pos:end="99:75">(<argument pos:start="99:24" pos:end="99:45"><expr pos:start="99:24" pos:end="99:45"><call pos:start="99:24" pos:end="99:45"><name pos:start="99:24" pos:end="99:39">sysbus_from_qdev</name><argument_list pos:start="99:40" pos:end="99:45">(<argument pos:start="99:41" pos:end="99:44"><expr pos:start="99:41" pos:end="99:44"><name pos:start="99:41" pos:end="99:44">nvic</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="99:48" pos:end="99:48"><expr pos:start="99:48" pos:end="99:48"><literal type="number" pos:start="99:48" pos:end="99:48">0</literal></expr></argument>, <argument pos:start="99:51" pos:end="99:74"><expr pos:start="99:51" pos:end="99:74"><name pos:start="99:51" pos:end="99:74"><name pos:start="99:51" pos:end="99:57">cpu_pic</name><index pos:start="99:58" pos:end="99:74">[<expr pos:start="99:59" pos:end="99:73"><name pos:start="99:59" pos:end="99:73">ARM_PIC_CPU_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="101:5" pos:end="110:0">for <control pos:start="101:9" pos:end="101:28">(<init pos:start="101:10" pos:end="101:15"><expr pos:start="101:10" pos:end="101:14"><name pos:start="101:10" pos:end="101:10">i</name> <operator pos:start="101:12" pos:end="101:12">=</operator> <literal type="number" pos:start="101:14" pos:end="101:14">0</literal></expr>;</init> <condition pos:start="101:17" pos:end="101:23"><expr pos:start="101:17" pos:end="101:22"><name pos:start="101:17" pos:end="101:17">i</name> <operator pos:start="101:19" pos:end="101:19">&lt;</operator> <literal type="number" pos:start="101:21" pos:end="101:22">64</literal></expr>;</condition> <incr pos:start="101:25" pos:end="101:27"><expr pos:start="101:25" pos:end="101:27"><name pos:start="101:25" pos:end="101:25">i</name><operator pos:start="101:26" pos:end="101:27">++</operator></expr></incr>)</control> <block pos:start="101:30" pos:end="110:0">{<block_content pos:start="103:9" pos:end="103:43">

        <expr_stmt pos:start="103:9" pos:end="103:43"><expr pos:start="103:9" pos:end="103:42"><name pos:start="103:9" pos:end="103:14"><name pos:start="103:9" pos:end="103:11">pic</name><index pos:start="103:12" pos:end="103:14">[<expr pos:start="103:13" pos:end="103:13"><name pos:start="103:13" pos:end="103:13">i</name></expr>]</index></name> <operator pos:start="103:16" pos:end="103:16">=</operator> <call pos:start="103:18" pos:end="103:42"><name pos:start="103:18" pos:end="103:33">qdev_get_gpio_in</name><argument_list pos:start="103:34" pos:end="103:42">(<argument pos:start="103:35" pos:end="103:38"><expr pos:start="103:35" pos:end="103:38"><name pos:start="103:35" pos:end="103:38">nvic</name></expr></argument>, <argument pos:start="103:41" pos:end="103:41"><expr pos:start="103:41" pos:end="103:41"><name pos:start="103:41" pos:end="103:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



<cpp:ifdef pos:start="109:1" pos:end="109:29">#<cpp:directive pos:start="109:2" pos:end="109:6">ifdef</cpp:directive> <name pos:start="109:8" pos:end="109:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="111:5" pos:end="114:0"><expr pos:start="111:5" pos:end="111:18"><name pos:start="111:5" pos:end="111:14">big_endian</name> <operator pos:start="111:16" pos:end="111:16">=</operator> <literal type="number" pos:start="111:18" pos:end="111:18">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="113:1" pos:end="113:5">#<cpp:directive pos:start="113:2" pos:end="113:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="115:5" pos:end="118:0"><expr pos:start="115:5" pos:end="115:18"><name pos:start="115:5" pos:end="115:14">big_endian</name> <operator pos:start="115:16" pos:end="115:16">=</operator> <literal type="number" pos:start="115:18" pos:end="115:18">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="117:1" pos:end="117:6">#<cpp:directive pos:start="117:2" pos:end="117:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="121:5" pos:end="123:54"><expr pos:start="121:5" pos:end="123:53"><name pos:start="121:5" pos:end="121:14">image_size</name> <operator pos:start="121:16" pos:end="121:16">=</operator> <call pos:start="121:18" pos:end="123:53"><name pos:start="121:18" pos:end="121:25">load_elf</name><argument_list pos:start="121:26" pos:end="123:53">(<argument pos:start="121:27" pos:end="121:41"><expr pos:start="121:27" pos:end="121:41"><name pos:start="121:27" pos:end="121:41">kernel_filename</name></expr></argument>, <argument pos:start="121:44" pos:end="121:44"><expr pos:start="121:44" pos:end="121:44"><literal type="number" pos:start="121:44" pos:end="121:44">0</literal></expr></argument>, <argument pos:start="121:47" pos:end="121:52"><expr pos:start="121:47" pos:end="121:52"><operator pos:start="121:47" pos:end="121:47">&amp;</operator><name pos:start="121:48" pos:end="121:52">entry</name></expr></argument>, <argument pos:start="121:55" pos:end="121:62"><expr pos:start="121:55" pos:end="121:62"><operator pos:start="121:55" pos:end="121:55">&amp;</operator><name pos:start="121:56" pos:end="121:62">lowaddr</name></expr></argument>, <argument pos:start="121:65" pos:end="121:68"><expr pos:start="121:65" pos:end="121:68"><name pos:start="121:65" pos:end="121:68">NULL</name></expr></argument>,

                          <argument pos:start="123:27" pos:end="123:36"><expr pos:start="123:27" pos:end="123:36"><name pos:start="123:27" pos:end="123:36">big_endian</name></expr></argument>, <argument pos:start="123:39" pos:end="123:49"><expr pos:start="123:39" pos:end="123:49"><name pos:start="123:39" pos:end="123:49">ELF_MACHINE</name></expr></argument>, <argument pos:start="123:52" pos:end="123:52"><expr pos:start="123:52" pos:end="123:52"><literal type="number" pos:start="123:52" pos:end="123:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="131:5"><if pos:start="125:5" pos:end="131:5">if <condition pos:start="125:8" pos:end="125:23">(<expr pos:start="125:9" pos:end="125:22"><name pos:start="125:9" pos:end="125:18">image_size</name> <operator pos:start="125:20" pos:end="125:20">&lt;</operator> <literal type="number" pos:start="125:22" pos:end="125:22">0</literal></expr>)</condition> <block pos:start="125:25" pos:end="131:5">{<block_content pos:start="127:9" pos:end="129:20">

        <expr_stmt pos:start="127:9" pos:end="127:73"><expr pos:start="127:9" pos:end="127:72"><name pos:start="127:9" pos:end="127:18">image_size</name> <operator pos:start="127:20" pos:end="127:20">=</operator> <call pos:start="127:22" pos:end="127:72"><name pos:start="127:22" pos:end="127:40">load_image_targphys</name><argument_list pos:start="127:41" pos:end="127:72">(<argument pos:start="127:42" pos:end="127:56"><expr pos:start="127:42" pos:end="127:56"><name pos:start="127:42" pos:end="127:56">kernel_filename</name></expr></argument>, <argument pos:start="127:59" pos:end="127:59"><expr pos:start="127:59" pos:end="127:59"><literal type="number" pos:start="127:59" pos:end="127:59">0</literal></expr></argument>, <argument pos:start="127:62" pos:end="127:71"><expr pos:start="127:62" pos:end="127:71"><name pos:start="127:62" pos:end="127:71">flash_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="129:9" pos:end="129:20"><expr pos:start="129:9" pos:end="129:19"><name pos:start="129:9" pos:end="129:15">lowaddr</name> <operator pos:start="129:17" pos:end="129:17">=</operator> <literal type="number" pos:start="129:19" pos:end="129:19">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="133:5" pos:end="141:5"><if pos:start="133:5" pos:end="141:5">if <condition pos:start="133:8" pos:end="133:23">(<expr pos:start="133:9" pos:end="133:22"><name pos:start="133:9" pos:end="133:18">image_size</name> <operator pos:start="133:20" pos:end="133:20">&lt;</operator> <literal type="number" pos:start="133:22" pos:end="133:22">0</literal></expr>)</condition> <block pos:start="133:25" pos:end="141:5">{<block_content pos:start="135:9" pos:end="139:16">

        <expr_stmt pos:start="135:9" pos:end="137:33"><expr pos:start="135:9" pos:end="137:32"><call pos:start="135:9" pos:end="137:32"><name pos:start="135:9" pos:end="135:15">fprintf</name><argument_list pos:start="135:16" pos:end="137:32">(<argument pos:start="135:17" pos:end="135:22"><expr pos:start="135:17" pos:end="135:22"><name pos:start="135:17" pos:end="135:22">stderr</name></expr></argument>, <argument pos:start="135:25" pos:end="135:60"><expr pos:start="135:25" pos:end="135:60"><literal type="string" pos:start="135:25" pos:end="135:60">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                <argument pos:start="137:17" pos:end="137:31"><expr pos:start="137:17" pos:end="137:31"><name pos:start="137:17" pos:end="137:31">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:16"><expr pos:start="139:9" pos:end="139:15"><call pos:start="139:9" pos:end="139:15"><name pos:start="139:9" pos:end="139:12">exit</name><argument_list pos:start="139:13" pos:end="139:15">(<argument pos:start="139:14" pos:end="139:14"><expr pos:start="139:14" pos:end="139:14"><literal type="number" pos:start="139:14" pos:end="139:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="145:5" pos:end="149:54">/* If the image was loaded at address zero then assume it is a

       regular ROM image and perform the normal CPU reset sequence.

       Otherwise jump directly to the entry point.  */</comment>

    <if_stmt pos:start="151:5" pos:end="161:5"><if pos:start="151:5" pos:end="157:5">if <condition pos:start="151:8" pos:end="151:21">(<expr pos:start="151:9" pos:end="151:20"><name pos:start="151:9" pos:end="151:15">lowaddr</name> <operator pos:start="151:17" pos:end="151:18">==</operator> <literal type="number" pos:start="151:20" pos:end="151:20">0</literal></expr>)</condition> <block pos:start="151:23" pos:end="157:5">{<block_content pos:start="153:9" pos:end="155:25">

	<expr_stmt pos:start="153:9" pos:end="153:36"><expr pos:start="153:9" pos:end="153:35"><name pos:start="153:9" pos:end="153:21"><name pos:start="153:9" pos:end="153:11">env</name><operator pos:start="153:12" pos:end="153:13">-&gt;</operator><name pos:start="153:14" pos:end="153:17">regs</name><index pos:start="153:18" pos:end="153:21">[<expr pos:start="153:19" pos:end="153:20"><literal type="number" pos:start="153:19" pos:end="153:20">13</literal></expr>]</index></name> <operator pos:start="153:23" pos:end="153:23">=</operator> <call pos:start="153:25" pos:end="153:35"><name pos:start="153:25" pos:end="153:32">ldl_phys</name><argument_list pos:start="153:33" pos:end="153:35">(<argument pos:start="153:34" pos:end="153:34"><expr pos:start="153:34" pos:end="153:34"><literal type="number" pos:start="153:34" pos:end="153:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="155:9" pos:end="155:25"><expr pos:start="155:9" pos:end="155:24"><name pos:start="155:9" pos:end="155:10">pc</name> <operator pos:start="155:12" pos:end="155:12">=</operator> <call pos:start="155:14" pos:end="155:24"><name pos:start="155:14" pos:end="155:21">ldl_phys</name><argument_list pos:start="155:22" pos:end="155:24">(<argument pos:start="155:23" pos:end="155:23"><expr pos:start="155:23" pos:end="155:23"><literal type="number" pos:start="155:23" pos:end="155:23">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="157:7" pos:end="161:5">else <block pos:start="157:12" pos:end="161:5">{<block_content pos:start="159:9" pos:end="159:19">

	<expr_stmt pos:start="159:9" pos:end="159:19"><expr pos:start="159:9" pos:end="159:18"><name pos:start="159:9" pos:end="159:10">pc</name> <operator pos:start="159:12" pos:end="159:12">=</operator> <name pos:start="159:14" pos:end="159:18">entry</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:24"><expr pos:start="163:5" pos:end="163:23"><name pos:start="163:5" pos:end="163:14"><name pos:start="163:5" pos:end="163:7">env</name><operator pos:start="163:8" pos:end="163:9">-&gt;</operator><name pos:start="163:10" pos:end="163:14">thumb</name></name> <operator pos:start="163:16" pos:end="163:16">=</operator> <name pos:start="163:18" pos:end="163:19">pc</name> <operator pos:start="163:21" pos:end="163:21">&amp;</operator> <literal type="number" pos:start="163:23" pos:end="163:23">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:28"><expr pos:start="165:5" pos:end="165:27"><name pos:start="165:5" pos:end="165:17"><name pos:start="165:5" pos:end="165:7">env</name><operator pos:start="165:8" pos:end="165:9">-&gt;</operator><name pos:start="165:10" pos:end="165:13">regs</name><index pos:start="165:14" pos:end="165:17">[<expr pos:start="165:15" pos:end="165:16"><literal type="number" pos:start="165:15" pos:end="165:16">15</literal></expr>]</index></name> <operator pos:start="165:19" pos:end="165:19">=</operator> <name pos:start="165:21" pos:end="165:22">pc</name> <operator pos:start="165:24" pos:end="165:24">&amp;</operator> <operator pos:start="165:26" pos:end="165:26">~</operator><literal type="number" pos:start="165:27" pos:end="165:27">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="169:5" pos:end="173:44">/* Hack to map an additional page of ram at the top of the address

       space.  This stops qemu complaining about executing code outside RAM

       when returning from an exception.  */</comment>

    <expr_stmt pos:start="175:5" pos:end="177:70"><expr pos:start="175:5" pos:end="177:69"><call pos:start="175:5" pos:end="177:69"><name pos:start="175:5" pos:end="175:32">cpu_register_physical_memory</name><argument_list pos:start="175:33" pos:end="177:69">(<argument pos:start="175:34" pos:end="175:43"><expr pos:start="175:34" pos:end="175:43"><literal type="number" pos:start="175:34" pos:end="175:43">0xfffff000</literal></expr></argument>, <argument pos:start="175:46" pos:end="175:51"><expr pos:start="175:46" pos:end="175:51"><literal type="number" pos:start="175:46" pos:end="175:51">0x1000</literal></expr></argument>,

                                 <argument pos:start="177:34" pos:end="177:68"><expr pos:start="177:34" pos:end="177:68"><call pos:start="177:34" pos:end="177:55"><name pos:start="177:34" pos:end="177:47">qemu_ram_alloc</name><argument_list pos:start="177:48" pos:end="177:55">(<argument pos:start="177:49" pos:end="177:54"><expr pos:start="177:49" pos:end="177:54"><literal type="number" pos:start="177:49" pos:end="177:54">0x1000</literal></expr></argument>)</argument_list></call> <operator pos:start="177:57" pos:end="177:57">|</operator> <name pos:start="177:59" pos:end="177:68">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="181:5" pos:end="181:15">return <expr pos:start="181:12" pos:end="181:14"><name pos:start="181:12" pos:end="181:14">pic</name></expr>;</return>

</block_content>}</block></function>
</unit>
