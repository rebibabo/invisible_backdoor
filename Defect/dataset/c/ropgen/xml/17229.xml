<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17229.c" pos:tabs="8"><function pos:start="1:1" pos:end="329:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">pcm_decode_frame</name><parameter_list pos:start="1:28" pos:end="5:61">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:46"><decl pos:start="5:29" pos:end="5:46"><type pos:start="5:29" pos:end="5:46"><specifier pos:start="5:29" pos:end="5:33">const</specifier> <name pos:start="5:35" pos:end="5:41">uint8_t</name> <modifier pos:start="5:43" pos:end="5:43">*</modifier></type><name pos:start="5:44" pos:end="5:46">buf</name></decl></parameter>, <parameter pos:start="5:49" pos:end="5:60"><decl pos:start="5:49" pos:end="5:60"><type pos:start="5:49" pos:end="5:60"><name pos:start="5:49" pos:end="5:51">int</name></type> <name pos:start="5:53" pos:end="5:60">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="329:1">{<block_content pos:start="9:5" pos:end="327:21">

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">PCMDecode</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:16">s</name> <init pos:start="9:18" pos:end="9:35">= <expr pos:start="9:20" pos:end="9:35"><name pos:start="9:20" pos:end="9:35"><name pos:start="9:20" pos:end="9:24">avctx</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:35">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:19">sample_size</name></decl>, <decl pos:start="11:22" pos:end="11:22"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:22" pos:end="11:22">c</name></decl>, <decl pos:start="11:25" pos:end="11:25"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:25" pos:end="11:25">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">short</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:18">samples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:44"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:19"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">uint8_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:22">src</name></decl>, <decl pos:start="15:25" pos:end="15:43"><type ref="prev" pos:start="15:5" pos:end="15:19"><modifier pos:start="15:25" pos:end="15:25">*</modifier></type><name pos:start="15:26" pos:end="15:43"><name pos:start="15:26" pos:end="15:29">src2</name><index pos:start="15:30" pos:end="15:43">[<expr pos:start="15:31" pos:end="15:42"><name pos:start="15:31" pos:end="15:42">MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">uint8_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:18">dstu8</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">int16_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:24">dst_int16_t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:25"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">int32_t</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:24">dst_int32_t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:11">int64_t</name> <modifier pos:start="23:13" pos:end="23:13">*</modifier></type><name pos:start="23:14" pos:end="23:24">dst_int64_t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:27"><decl pos:start="25:5" pos:end="25:26"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:12">uint16_t</name> <modifier pos:start="25:14" pos:end="25:14">*</modifier></type><name pos:start="25:15" pos:end="25:26">dst_uint16_t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:27"><decl pos:start="27:5" pos:end="27:26"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:12">uint32_t</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:26">dst_uint32_t</name></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:19"><expr pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:11">samples</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:18">data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:14"><expr pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:7">src</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <name pos:start="33:11" pos:end="33:13">buf</name></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:56">(<expr pos:start="37:9" pos:end="37:55"><name pos:start="37:9" pos:end="37:25"><name pos:start="37:9" pos:end="37:13">avctx</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:25">sample_fmt</name></name><operator pos:start="37:26" pos:end="37:27">!=</operator><name pos:start="37:28" pos:end="37:55"><name pos:start="37:28" pos:end="37:32">avctx</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:39">codec</name><operator pos:start="37:40" pos:end="37:41">-&gt;</operator><name pos:start="37:42" pos:end="37:52">sample_fmts</name><index pos:start="37:53" pos:end="37:55">[<expr pos:start="37:54" pos:end="37:54"><literal type="number" pos:start="37:54" pos:end="37:54">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="37:58" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:18">

        <expr_stmt pos:start="39:9" pos:end="39:60"><expr pos:start="39:9" pos:end="39:59"><call pos:start="39:9" pos:end="39:59"><name pos:start="39:9" pos:end="39:14">av_log</name><argument_list pos:start="39:15" pos:end="39:59">(<argument pos:start="39:16" pos:end="39:20"><expr pos:start="39:16" pos:end="39:20"><name pos:start="39:16" pos:end="39:20">avctx</name></expr></argument>, <argument pos:start="39:23" pos:end="39:34"><expr pos:start="39:23" pos:end="39:34"><name pos:start="39:23" pos:end="39:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="39:37" pos:end="39:58"><expr pos:start="39:37" pos:end="39:58"><literal type="string" pos:start="39:37" pos:end="39:58">"invalid sample_fmt\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:18">return <expr pos:start="41:16" pos:end="41:17"><operator pos:start="41:16" pos:end="41:16">-</operator><literal type="number" pos:start="41:17" pos:end="41:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if<condition pos:start="47:7" pos:end="47:62">(<expr pos:start="47:8" pos:end="47:61"><name pos:start="47:8" pos:end="47:22"><name pos:start="47:8" pos:end="47:12">avctx</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:22">channels</name></name> <operator pos:start="47:24" pos:end="47:25">&lt;=</operator> <literal type="number" pos:start="47:27" pos:end="47:27">0</literal> <operator pos:start="47:29" pos:end="47:30">||</operator> <name pos:start="47:32" pos:end="47:46"><name pos:start="47:32" pos:end="47:36">avctx</name><operator pos:start="47:37" pos:end="47:38">-&gt;</operator><name pos:start="47:39" pos:end="47:46">channels</name></name> <operator pos:start="47:48" pos:end="47:48">&gt;</operator> <name pos:start="47:50" pos:end="47:61">MAX_CHANNELS</name></expr>)</condition><block pos:start="47:63" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:18">

        <expr_stmt pos:start="49:9" pos:end="49:68"><expr pos:start="49:9" pos:end="49:67"><call pos:start="49:9" pos:end="49:67"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="49:67">(<argument pos:start="49:16" pos:end="49:20"><expr pos:start="49:16" pos:end="49:20"><name pos:start="49:16" pos:end="49:20">avctx</name></expr></argument>, <argument pos:start="49:23" pos:end="49:34"><expr pos:start="49:23" pos:end="49:34"><name pos:start="49:23" pos:end="49:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:37" pos:end="49:66"><expr pos:start="49:37" pos:end="49:66"><literal type="string" pos:start="49:37" pos:end="49:66">"PCM channels out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:18">return <expr pos:start="51:16" pos:end="51:17"><operator pos:start="51:16" pos:end="51:16">-</operator><literal type="number" pos:start="51:17" pos:end="51:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:60"><expr pos:start="57:5" pos:end="57:59"><name pos:start="57:5" pos:end="57:15">sample_size</name> <operator pos:start="57:17" pos:end="57:17">=</operator> <call pos:start="57:19" pos:end="57:57"><name pos:start="57:19" pos:end="57:40">av_get_bits_per_sample</name><argument_list pos:start="57:41" pos:end="57:57">(<argument pos:start="57:42" pos:end="57:56"><expr pos:start="57:42" pos:end="57:56"><name pos:start="57:42" pos:end="57:56"><name pos:start="57:42" pos:end="57:46">avctx</name><operator pos:start="57:47" pos:end="57:48">-&gt;</operator><name pos:start="57:49" pos:end="57:56">codec_id</name></name></expr></argument>)</argument_list></call><operator pos:start="57:58" pos:end="57:58">/</operator><literal type="number" pos:start="57:59" pos:end="57:59">8</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:38"><expr pos:start="61:5" pos:end="61:37"><name pos:start="61:5" pos:end="61:5">n</name> <operator pos:start="61:7" pos:end="61:7">=</operator> <name pos:start="61:9" pos:end="61:23"><name pos:start="61:9" pos:end="61:13">avctx</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:23">channels</name></name> <operator pos:start="61:25" pos:end="61:25">*</operator> <name pos:start="61:27" pos:end="61:37">sample_size</name></expr>;</expr_stmt>

    <comment type="block" pos:start="63:5" pos:end="63:63">/* av_get_bits_per_sample returns 0 for CODEC_ID_PCM_DVD */</comment>

    <if_stmt pos:start="65:5" pos:end="69:59"><if pos:start="65:5" pos:end="69:59">if <condition pos:start="65:8" pos:end="65:44">(<expr pos:start="65:9" pos:end="65:43"><name pos:start="65:9" pos:end="65:24">CODEC_ID_PCM_DVD</name> <operator pos:start="65:26" pos:end="65:27">==</operator> <name pos:start="65:29" pos:end="65:43"><name pos:start="65:29" pos:end="65:33">avctx</name><operator pos:start="65:34" pos:end="65:35">-&gt;</operator><name pos:start="65:36" pos:end="65:43">codec_id</name></name></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="69:59"><block_content pos:start="69:9" pos:end="69:59">

        <comment type="block" pos:start="67:9" pos:end="67:60">/* 2 samples are interleaved per block in PCM_DVD */</comment>

        <expr_stmt pos:start="69:9" pos:end="69:59"><expr pos:start="69:9" pos:end="69:58"><name pos:start="69:9" pos:end="69:9">n</name> <operator pos:start="69:11" pos:end="69:11">=</operator> <literal type="number" pos:start="69:13" pos:end="69:13">2</literal> <operator pos:start="69:15" pos:end="69:15">*</operator> <name pos:start="69:17" pos:end="69:31"><name pos:start="69:17" pos:end="69:21">avctx</name><operator pos:start="69:22" pos:end="69:23">-&gt;</operator><name pos:start="69:24" pos:end="69:31">channels</name></name> <operator pos:start="69:33" pos:end="69:33">*</operator> <name pos:start="69:35" pos:end="69:56"><name pos:start="69:35" pos:end="69:39">avctx</name><operator pos:start="69:40" pos:end="69:41">-&gt;</operator><name pos:start="69:42" pos:end="69:56">bits_per_sample</name></name><operator pos:start="69:57" pos:end="69:57">/</operator><literal type="number" pos:start="69:58" pos:end="69:58">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="73:5" pos:end="79:5"><if pos:start="73:5" pos:end="79:5">if<condition pos:start="73:7" pos:end="73:25">(<expr pos:start="73:8" pos:end="73:24"><name pos:start="73:8" pos:end="73:8">n</name> <operator pos:start="73:10" pos:end="73:11">&amp;&amp;</operator> <name pos:start="73:13" pos:end="73:20">buf_size</name> <operator pos:start="73:22" pos:end="73:22">%</operator> <name pos:start="73:24" pos:end="73:24">n</name></expr>)</condition><block pos:start="73:26" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:18">

        <expr_stmt pos:start="75:9" pos:end="75:60"><expr pos:start="75:9" pos:end="75:59"><call pos:start="75:9" pos:end="75:59"><name pos:start="75:9" pos:end="75:14">av_log</name><argument_list pos:start="75:15" pos:end="75:59">(<argument pos:start="75:16" pos:end="75:20"><expr pos:start="75:16" pos:end="75:20"><name pos:start="75:16" pos:end="75:20">avctx</name></expr></argument>, <argument pos:start="75:23" pos:end="75:34"><expr pos:start="75:23" pos:end="75:34"><name pos:start="75:23" pos:end="75:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="75:37" pos:end="75:58"><expr pos:start="75:37" pos:end="75:58"><literal type="string" pos:start="75:37" pos:end="75:58">"invalid PCM packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="77:9" pos:end="77:18">return <expr pos:start="77:16" pos:end="77:17"><operator pos:start="77:16" pos:end="77:16">-</operator><literal type="number" pos:start="77:17" pos:end="77:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:44"><expr pos:start="83:5" pos:end="83:43"><name pos:start="83:5" pos:end="83:12">buf_size</name><operator pos:start="83:13" pos:end="83:13">=</operator> <call pos:start="83:15" pos:end="83:43"><name pos:start="83:15" pos:end="83:19">FFMIN</name><argument_list pos:start="83:20" pos:end="83:43">(<argument pos:start="83:21" pos:end="83:28"><expr pos:start="83:21" pos:end="83:28"><name pos:start="83:21" pos:end="83:28">buf_size</name></expr></argument>, <argument pos:start="83:31" pos:end="83:42"><expr pos:start="83:31" pos:end="83:42"><operator pos:start="83:31" pos:end="83:31">*</operator><name pos:start="83:32" pos:end="83:40">data_size</name><operator pos:start="83:41" pos:end="83:41">/</operator><literal type="number" pos:start="83:42" pos:end="83:42">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:17"><expr pos:start="85:5" pos:end="85:16"><operator pos:start="85:5" pos:end="85:5">*</operator><name pos:start="85:6" pos:end="85:14">data_size</name><operator pos:start="85:15" pos:end="85:15">=</operator><literal type="number" pos:start="85:16" pos:end="85:16">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:29"><expr pos:start="89:5" pos:end="89:28"><name pos:start="89:5" pos:end="89:5">n</name> <operator pos:start="89:7" pos:end="89:7">=</operator> <name pos:start="89:9" pos:end="89:16">buf_size</name><operator pos:start="89:17" pos:end="89:17">/</operator><name pos:start="89:18" pos:end="89:28">sample_size</name></expr>;</expr_stmt>



    <switch pos:start="93:5" pos:end="323:5">switch<condition pos:start="93:11" pos:end="93:28">(<expr pos:start="93:12" pos:end="93:27"><name pos:start="93:12" pos:end="93:27"><name pos:start="93:12" pos:end="93:16">avctx</name><operator pos:start="93:17" pos:end="93:18">-&gt;</operator><name pos:start="93:19" pos:end="93:23">codec</name><operator pos:start="93:24" pos:end="93:25">-&gt;</operator><name pos:start="93:26" pos:end="93:27">id</name></name></expr>)</condition> <block pos:start="93:30" pos:end="323:5">{<block_content pos:start="95:5" pos:end="321:18">

    <case pos:start="95:5" pos:end="95:28">case <expr pos:start="95:10" pos:end="95:27"><name pos:start="95:10" pos:end="95:27">CODEC_ID_PCM_U32LE</name></expr>:</case>

        <macro pos:start="97:9" pos:end="97:62"><name pos:start="97:9" pos:end="97:14">DECODE</name><argument_list pos:start="97:15" pos:end="97:62">(<argument pos:start="97:16" pos:end="97:23">uint32_t</argument>, <argument pos:start="97:26" pos:end="97:29">le32</argument>, <argument pos:start="97:32" pos:end="97:34">src</argument>, <argument pos:start="97:37" pos:end="97:43">samples</argument>, <argument pos:start="97:46" pos:end="97:46">n</argument>, <argument pos:start="97:49" pos:end="97:49"><literal type="number" pos:start="97:49" pos:end="97:49">0</literal></argument>, <argument pos:start="97:52" pos:end="97:61"><literal type="number" pos:start="97:52" pos:end="97:61">0x80000000</literal></argument>)</argument_list></macro>

        <break pos:start="99:9" pos:end="99:14">break;</break>

    <case pos:start="101:5" pos:end="101:28">case <expr pos:start="101:10" pos:end="101:27"><name pos:start="101:10" pos:end="101:27">CODEC_ID_PCM_U32BE</name></expr>:</case>

        <macro pos:start="103:9" pos:end="103:62"><name pos:start="103:9" pos:end="103:14">DECODE</name><argument_list pos:start="103:15" pos:end="103:62">(<argument pos:start="103:16" pos:end="103:23">uint32_t</argument>, <argument pos:start="103:26" pos:end="103:29">be32</argument>, <argument pos:start="103:32" pos:end="103:34">src</argument>, <argument pos:start="103:37" pos:end="103:43">samples</argument>, <argument pos:start="103:46" pos:end="103:46">n</argument>, <argument pos:start="103:49" pos:end="103:49"><literal type="number" pos:start="103:49" pos:end="103:49">0</literal></argument>, <argument pos:start="103:52" pos:end="103:61"><literal type="number" pos:start="103:52" pos:end="103:61">0x80000000</literal></argument>)</argument_list></macro>

        <break pos:start="105:9" pos:end="105:14">break;</break>

    <case pos:start="107:5" pos:end="107:28">case <expr pos:start="107:10" pos:end="107:27"><name pos:start="107:10" pos:end="107:27">CODEC_ID_PCM_S24LE</name></expr>:</case>

        <macro pos:start="109:9" pos:end="109:52"><name pos:start="109:9" pos:end="109:14">DECODE</name><argument_list pos:start="109:15" pos:end="109:52">(<argument pos:start="109:16" pos:end="109:22">int32_t</argument>, <argument pos:start="109:25" pos:end="109:28">le24</argument>, <argument pos:start="109:31" pos:end="109:33">src</argument>, <argument pos:start="109:36" pos:end="109:42">samples</argument>, <argument pos:start="109:45" pos:end="109:45">n</argument>, <argument pos:start="109:48" pos:end="109:48"><literal type="number" pos:start="109:48" pos:end="109:48">8</literal></argument>, <argument pos:start="109:51" pos:end="109:51"><literal type="number" pos:start="109:51" pos:end="109:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="111:9" pos:end="111:14">break;</break>

    <case pos:start="113:5" pos:end="113:28">case <expr pos:start="113:10" pos:end="113:27"><name pos:start="113:10" pos:end="113:27">CODEC_ID_PCM_S24BE</name></expr>:</case>

        <macro pos:start="115:9" pos:end="115:52"><name pos:start="115:9" pos:end="115:14">DECODE</name><argument_list pos:start="115:15" pos:end="115:52">(<argument pos:start="115:16" pos:end="115:22">int32_t</argument>, <argument pos:start="115:25" pos:end="115:28">be24</argument>, <argument pos:start="115:31" pos:end="115:33">src</argument>, <argument pos:start="115:36" pos:end="115:42">samples</argument>, <argument pos:start="115:45" pos:end="115:45">n</argument>, <argument pos:start="115:48" pos:end="115:48"><literal type="number" pos:start="115:48" pos:end="115:48">8</literal></argument>, <argument pos:start="115:51" pos:end="115:51"><literal type="number" pos:start="115:51" pos:end="115:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="117:9" pos:end="117:14">break;</break>

    <case pos:start="119:5" pos:end="119:28">case <expr pos:start="119:10" pos:end="119:27"><name pos:start="119:10" pos:end="119:27">CODEC_ID_PCM_U24LE</name></expr>:</case>

        <macro pos:start="121:9" pos:end="121:60"><name pos:start="121:9" pos:end="121:14">DECODE</name><argument_list pos:start="121:15" pos:end="121:60">(<argument pos:start="121:16" pos:end="121:23">uint32_t</argument>, <argument pos:start="121:26" pos:end="121:29">le24</argument>, <argument pos:start="121:32" pos:end="121:34">src</argument>, <argument pos:start="121:37" pos:end="121:43">samples</argument>, <argument pos:start="121:46" pos:end="121:46">n</argument>, <argument pos:start="121:49" pos:end="121:49"><literal type="number" pos:start="121:49" pos:end="121:49">8</literal></argument>, <argument pos:start="121:52" pos:end="121:59"><literal type="number" pos:start="121:52" pos:end="121:59">0x800000</literal></argument>)</argument_list></macro>

        <break pos:start="123:9" pos:end="123:14">break;</break>

    <case pos:start="125:5" pos:end="125:28">case <expr pos:start="125:10" pos:end="125:27"><name pos:start="125:10" pos:end="125:27">CODEC_ID_PCM_U24BE</name></expr>:</case>

        <macro pos:start="127:9" pos:end="127:60"><name pos:start="127:9" pos:end="127:14">DECODE</name><argument_list pos:start="127:15" pos:end="127:60">(<argument pos:start="127:16" pos:end="127:23">uint32_t</argument>, <argument pos:start="127:26" pos:end="127:29">be24</argument>, <argument pos:start="127:32" pos:end="127:34">src</argument>, <argument pos:start="127:37" pos:end="127:43">samples</argument>, <argument pos:start="127:46" pos:end="127:46">n</argument>, <argument pos:start="127:49" pos:end="127:49"><literal type="number" pos:start="127:49" pos:end="127:49">8</literal></argument>, <argument pos:start="127:52" pos:end="127:59"><literal type="number" pos:start="127:52" pos:end="127:59">0x800000</literal></argument>)</argument_list></macro>

        <break pos:start="129:9" pos:end="129:14">break;</break>

    <case pos:start="131:5" pos:end="131:30">case <expr pos:start="131:10" pos:end="131:29"><name pos:start="131:10" pos:end="131:29">CODEC_ID_PCM_S24DAUD</name></expr>:</case>

        <for pos:start="133:9" pos:end="143:9">for<control pos:start="133:12" pos:end="133:21">(<init pos:start="133:13" pos:end="133:13">;</init><condition pos:start="133:14" pos:end="133:17"><expr pos:start="133:14" pos:end="133:16"><name pos:start="133:14" pos:end="133:14">n</name><operator pos:start="133:15" pos:end="133:15">&gt;</operator><literal type="number" pos:start="133:16" pos:end="133:16">0</literal></expr>;</condition><incr pos:start="133:18" pos:end="133:20"><expr pos:start="133:18" pos:end="133:20"><name pos:start="133:18" pos:end="133:18">n</name><operator pos:start="133:19" pos:end="133:20">--</operator></expr></incr>)</control> <block pos:start="133:23" pos:end="143:9">{<block_content pos:start="135:11" pos:end="141:51">

          <decl_stmt pos:start="135:11" pos:end="135:49"><decl pos:start="135:11" pos:end="135:48"><type pos:start="135:11" pos:end="135:18"><name pos:start="135:11" pos:end="135:18">uint32_t</name></type> <name pos:start="135:20" pos:end="135:20">v</name> <init pos:start="135:22" pos:end="135:48">= <expr pos:start="135:24" pos:end="135:48"><call pos:start="135:24" pos:end="135:48"><name pos:start="135:24" pos:end="135:42">bytestream_get_be24</name><argument_list pos:start="135:43" pos:end="135:48">(<argument pos:start="135:44" pos:end="135:47"><expr pos:start="135:44" pos:end="135:47"><operator pos:start="135:44" pos:end="135:44">&amp;</operator><name pos:start="135:45" pos:end="135:47">src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt pos:start="137:11" pos:end="137:18"><expr pos:start="137:11" pos:end="137:17"><name pos:start="137:11" pos:end="137:11">v</name> <operator pos:start="137:13" pos:end="137:15">&gt;&gt;=</operator> <literal type="number" pos:start="137:17" pos:end="137:17">4</literal></expr>;</expr_stmt> <comment type="line" pos:start="137:20" pos:end="137:41">// sync flags are here</comment>

          <expr_stmt pos:start="139:11" pos:end="141:51"><expr pos:start="139:11" pos:end="141:50"><operator pos:start="139:11" pos:end="139:11">*</operator><name pos:start="139:12" pos:end="139:18">samples</name><operator pos:start="139:19" pos:end="139:20">++</operator> <operator pos:start="139:22" pos:end="139:22">=</operator> <name pos:start="139:24" pos:end="139:50"><name pos:start="139:24" pos:end="139:33">ff_reverse</name><index pos:start="139:34" pos:end="139:50">[<expr pos:start="139:35" pos:end="139:49"><operator pos:start="139:35" pos:end="139:35">(</operator><name pos:start="139:36" pos:end="139:36">v</name> <operator pos:start="139:38" pos:end="139:39">&gt;&gt;</operator> <literal type="number" pos:start="139:41" pos:end="139:41">8</literal><operator pos:start="139:42" pos:end="139:42">)</operator> <operator pos:start="139:44" pos:end="139:44">&amp;</operator> <literal type="number" pos:start="139:46" pos:end="139:49">0xff</literal></expr>]</index></name> <operator pos:start="139:52" pos:end="139:52">+</operator>

                       <operator pos:start="141:24" pos:end="141:24">(</operator><name pos:start="141:25" pos:end="141:44"><name pos:start="141:25" pos:end="141:34">ff_reverse</name><index pos:start="141:35" pos:end="141:44">[<expr pos:start="141:36" pos:end="141:43"><name pos:start="141:36" pos:end="141:36">v</name> <operator pos:start="141:38" pos:end="141:38">&amp;</operator> <literal type="number" pos:start="141:40" pos:end="141:43">0xff</literal></expr>]</index></name> <operator pos:start="141:46" pos:end="141:47">&lt;&lt;</operator> <literal type="number" pos:start="141:49" pos:end="141:49">8</literal><operator pos:start="141:50" pos:end="141:50">)</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="145:9" pos:end="145:14">break;</break>

    <case pos:start="147:5" pos:end="147:35">case <expr pos:start="147:10" pos:end="147:34"><name pos:start="147:10" pos:end="147:34">CODEC_ID_PCM_S16LE_PLANAR</name></expr>:</case>

        <expr_stmt pos:start="149:9" pos:end="149:29"><expr pos:start="149:9" pos:end="149:28"><name pos:start="149:9" pos:end="149:9">n</name> <operator pos:start="149:11" pos:end="149:12">/=</operator> <name pos:start="149:14" pos:end="149:28"><name pos:start="149:14" pos:end="149:18">avctx</name><operator pos:start="149:19" pos:end="149:20">-&gt;</operator><name pos:start="149:21" pos:end="149:28">channels</name></name></expr>;</expr_stmt>

        <for pos:start="151:9" pos:end="153:34">for<control pos:start="151:12" pos:end="151:38">(<init pos:start="151:13" pos:end="151:16"><expr pos:start="151:13" pos:end="151:15"><name pos:start="151:13" pos:end="151:13">c</name><operator pos:start="151:14" pos:end="151:14">=</operator><literal type="number" pos:start="151:15" pos:end="151:15">0</literal></expr>;</init><condition pos:start="151:17" pos:end="151:34"><expr pos:start="151:17" pos:end="151:33"><name pos:start="151:17" pos:end="151:17">c</name><operator pos:start="151:18" pos:end="151:18">&lt;</operator><name pos:start="151:19" pos:end="151:33"><name pos:start="151:19" pos:end="151:23">avctx</name><operator pos:start="151:24" pos:end="151:25">-&gt;</operator><name pos:start="151:26" pos:end="151:33">channels</name></name></expr>;</condition><incr pos:start="151:35" pos:end="151:37"><expr pos:start="151:35" pos:end="151:37"><name pos:start="151:35" pos:end="151:35">c</name><operator pos:start="151:36" pos:end="151:37">++</operator></expr></incr>)</control><block type="pseudo" pos:start="153:13" pos:end="153:34"><block_content pos:start="153:13" pos:end="153:34">

            <expr_stmt pos:start="153:13" pos:end="153:34"><expr pos:start="153:13" pos:end="153:33"><name pos:start="153:13" pos:end="153:19"><name pos:start="153:13" pos:end="153:16">src2</name><index pos:start="153:17" pos:end="153:19">[<expr pos:start="153:18" pos:end="153:18"><name pos:start="153:18" pos:end="153:18">c</name></expr>]</index></name> <operator pos:start="153:21" pos:end="153:21">=</operator> <operator pos:start="153:23" pos:end="153:23">&amp;</operator><name pos:start="153:24" pos:end="153:33"><name pos:start="153:24" pos:end="153:26">src</name><index pos:start="153:27" pos:end="153:33">[<expr pos:start="153:28" pos:end="153:32"><name pos:start="153:28" pos:end="153:28">c</name><operator pos:start="153:29" pos:end="153:29">*</operator><name pos:start="153:30" pos:end="153:30">n</name><operator pos:start="153:31" pos:end="153:31">*</operator><literal type="number" pos:start="153:32" pos:end="153:32">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <for pos:start="155:9" pos:end="159:59">for<control pos:start="155:12" pos:end="155:21">(<init pos:start="155:13" pos:end="155:13">;</init><condition pos:start="155:14" pos:end="155:17"><expr pos:start="155:14" pos:end="155:16"><name pos:start="155:14" pos:end="155:14">n</name><operator pos:start="155:15" pos:end="155:15">&gt;</operator><literal type="number" pos:start="155:16" pos:end="155:16">0</literal></expr>;</condition><incr pos:start="155:18" pos:end="155:20"><expr pos:start="155:18" pos:end="155:20"><name pos:start="155:18" pos:end="155:18">n</name><operator pos:start="155:19" pos:end="155:20">--</operator></expr></incr>)</control><block type="pseudo" pos:start="157:13" pos:end="159:59"><block_content pos:start="157:13" pos:end="159:59">

            <for pos:start="157:13" pos:end="159:59">for<control pos:start="157:16" pos:end="157:42">(<init pos:start="157:17" pos:end="157:20"><expr pos:start="157:17" pos:end="157:19"><name pos:start="157:17" pos:end="157:17">c</name><operator pos:start="157:18" pos:end="157:18">=</operator><literal type="number" pos:start="157:19" pos:end="157:19">0</literal></expr>;</init><condition pos:start="157:21" pos:end="157:38"><expr pos:start="157:21" pos:end="157:37"><name pos:start="157:21" pos:end="157:21">c</name><operator pos:start="157:22" pos:end="157:22">&lt;</operator><name pos:start="157:23" pos:end="157:37"><name pos:start="157:23" pos:end="157:27">avctx</name><operator pos:start="157:28" pos:end="157:29">-&gt;</operator><name pos:start="157:30" pos:end="157:37">channels</name></name></expr>;</condition><incr pos:start="157:39" pos:end="157:41"><expr pos:start="157:39" pos:end="157:41"><name pos:start="157:39" pos:end="157:39">c</name><operator pos:start="157:40" pos:end="157:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="159:17" pos:end="159:59"><block_content pos:start="159:17" pos:end="159:59">

                <expr_stmt pos:start="159:17" pos:end="159:59"><expr pos:start="159:17" pos:end="159:58"><operator pos:start="159:17" pos:end="159:17">*</operator><name pos:start="159:18" pos:end="159:24">samples</name><operator pos:start="159:25" pos:end="159:26">++</operator> <operator pos:start="159:28" pos:end="159:28">=</operator> <call pos:start="159:30" pos:end="159:58"><name pos:start="159:30" pos:end="159:48">bytestream_get_le16</name><argument_list pos:start="159:49" pos:end="159:58">(<argument pos:start="159:50" pos:end="159:57"><expr pos:start="159:50" pos:end="159:57"><operator pos:start="159:50" pos:end="159:50">&amp;</operator><name pos:start="159:51" pos:end="159:57"><name pos:start="159:51" pos:end="159:54">src2</name><index pos:start="159:55" pos:end="159:57">[<expr pos:start="159:56" pos:end="159:56"><name pos:start="159:56" pos:end="159:56">c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

        <expr_stmt pos:start="161:9" pos:end="161:38"><expr pos:start="161:9" pos:end="161:37"><name pos:start="161:9" pos:end="161:11">src</name> <operator pos:start="161:13" pos:end="161:13">=</operator> <name pos:start="161:15" pos:end="161:37"><name pos:start="161:15" pos:end="161:18">src2</name><index pos:start="161:19" pos:end="161:37">[<expr pos:start="161:20" pos:end="161:36"><name pos:start="161:20" pos:end="161:34"><name pos:start="161:20" pos:end="161:24">avctx</name><operator pos:start="161:25" pos:end="161:26">-&gt;</operator><name pos:start="161:27" pos:end="161:34">channels</name></name><operator pos:start="161:35" pos:end="161:35">-</operator><literal type="number" pos:start="161:36" pos:end="161:36">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <break pos:start="163:9" pos:end="163:14">break;</break>

    <case pos:start="165:5" pos:end="165:28">case <expr pos:start="165:10" pos:end="165:27"><name pos:start="165:10" pos:end="165:27">CODEC_ID_PCM_U16LE</name></expr>:</case>

        <macro pos:start="167:9" pos:end="167:58"><name pos:start="167:9" pos:end="167:14">DECODE</name><argument_list pos:start="167:15" pos:end="167:58">(<argument pos:start="167:16" pos:end="167:23">uint16_t</argument>, <argument pos:start="167:26" pos:end="167:29">le16</argument>, <argument pos:start="167:32" pos:end="167:34">src</argument>, <argument pos:start="167:37" pos:end="167:43">samples</argument>, <argument pos:start="167:46" pos:end="167:46">n</argument>, <argument pos:start="167:49" pos:end="167:49"><literal type="number" pos:start="167:49" pos:end="167:49">0</literal></argument>, <argument pos:start="167:52" pos:end="167:57"><literal type="number" pos:start="167:52" pos:end="167:57">0x8000</literal></argument>)</argument_list></macro>

        <break pos:start="169:9" pos:end="169:14">break;</break>

    <case pos:start="171:5" pos:end="171:28">case <expr pos:start="171:10" pos:end="171:27"><name pos:start="171:10" pos:end="171:27">CODEC_ID_PCM_U16BE</name></expr>:</case>

        <macro pos:start="173:9" pos:end="173:58"><name pos:start="173:9" pos:end="173:14">DECODE</name><argument_list pos:start="173:15" pos:end="173:58">(<argument pos:start="173:16" pos:end="173:23">uint16_t</argument>, <argument pos:start="173:26" pos:end="173:29">be16</argument>, <argument pos:start="173:32" pos:end="173:34">src</argument>, <argument pos:start="173:37" pos:end="173:43">samples</argument>, <argument pos:start="173:46" pos:end="173:46">n</argument>, <argument pos:start="173:49" pos:end="173:49"><literal type="number" pos:start="173:49" pos:end="173:49">0</literal></argument>, <argument pos:start="173:52" pos:end="173:57"><literal type="number" pos:start="173:52" pos:end="173:57">0x8000</literal></argument>)</argument_list></macro>

        <break pos:start="175:9" pos:end="175:14">break;</break>

    <case pos:start="177:5" pos:end="177:25">case <expr pos:start="177:10" pos:end="177:24"><name pos:start="177:10" pos:end="177:24">CODEC_ID_PCM_S8</name></expr>:</case>

        <expr_stmt pos:start="179:9" pos:end="179:33"><expr pos:start="179:9" pos:end="179:32"><name pos:start="179:9" pos:end="179:13">dstu8</name><operator pos:start="179:14" pos:end="179:14">=</operator> <operator pos:start="179:16" pos:end="179:16">(</operator><name pos:start="179:17" pos:end="179:23">uint8_t</name><operator pos:start="179:24" pos:end="179:24">*</operator><operator pos:start="179:25" pos:end="179:25">)</operator><name pos:start="179:26" pos:end="179:32">samples</name></expr>;</expr_stmt>

        <for pos:start="181:9" pos:end="185:9">for<control pos:start="181:12" pos:end="181:21">(<init pos:start="181:13" pos:end="181:13">;</init><condition pos:start="181:14" pos:end="181:17"><expr pos:start="181:14" pos:end="181:16"><name pos:start="181:14" pos:end="181:14">n</name><operator pos:start="181:15" pos:end="181:15">&gt;</operator><literal type="number" pos:start="181:16" pos:end="181:16">0</literal></expr>;</condition><incr pos:start="181:18" pos:end="181:20"><expr pos:start="181:18" pos:end="181:20"><name pos:start="181:18" pos:end="181:18">n</name><operator pos:start="181:19" pos:end="181:20">--</operator></expr></incr>)</control> <block pos:start="181:23" pos:end="185:9">{<block_content pos:start="183:13" pos:end="183:36">

            <expr_stmt pos:start="183:13" pos:end="183:36"><expr pos:start="183:13" pos:end="183:35"><operator pos:start="183:13" pos:end="183:13">*</operator><name pos:start="183:14" pos:end="183:18">dstu8</name><operator pos:start="183:19" pos:end="183:20">++</operator> <operator pos:start="183:22" pos:end="183:22">=</operator> <operator pos:start="183:24" pos:end="183:24">*</operator><name pos:start="183:25" pos:end="183:27">src</name><operator pos:start="183:28" pos:end="183:29">++</operator> <operator pos:start="183:31" pos:end="183:31">+</operator> <literal type="number" pos:start="183:33" pos:end="183:35">128</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="187:9" pos:end="187:31"><expr pos:start="187:9" pos:end="187:30"><name pos:start="187:9" pos:end="187:15">samples</name><operator pos:start="187:16" pos:end="187:16">=</operator> <operator pos:start="187:18" pos:end="187:18">(</operator><name pos:start="187:19" pos:end="187:23">short</name><operator pos:start="187:24" pos:end="187:24">*</operator><operator pos:start="187:25" pos:end="187:25">)</operator><name pos:start="187:26" pos:end="187:30">dstu8</name></expr>;</expr_stmt>

        <break pos:start="189:9" pos:end="192:0">break;</break>

<cpp:if pos:start="191:1" pos:end="191:19">#<cpp:directive pos:start="191:2" pos:end="191:3">if</cpp:directive> <expr pos:start="191:5" pos:end="191:19"><name pos:start="191:5" pos:end="191:19">WORDS_BIGENDIAN</name></expr></cpp:if>

    <case pos:start="193:5" pos:end="193:28">case <expr pos:start="193:10" pos:end="193:27"><name pos:start="193:10" pos:end="193:27">CODEC_ID_PCM_F64LE</name></expr>:</case>

        <macro pos:start="195:9" pos:end="195:52"><name pos:start="195:9" pos:end="195:14">DECODE</name><argument_list pos:start="195:15" pos:end="195:52">(<argument pos:start="195:16" pos:end="195:22">int64_t</argument>, <argument pos:start="195:25" pos:end="195:28">le64</argument>, <argument pos:start="195:31" pos:end="195:33">src</argument>, <argument pos:start="195:36" pos:end="195:42">samples</argument>, <argument pos:start="195:45" pos:end="195:45">n</argument>, <argument pos:start="195:48" pos:end="195:48"><literal type="number" pos:start="195:48" pos:end="195:48">0</literal></argument>, <argument pos:start="195:51" pos:end="195:51"><literal type="number" pos:start="195:51" pos:end="195:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="197:9" pos:end="197:14">break;</break>

    <case pos:start="199:5" pos:end="199:28">case <expr pos:start="199:10" pos:end="199:27"><name pos:start="199:10" pos:end="199:27">CODEC_ID_PCM_S32LE</name></expr>:</case>

    <case pos:start="201:5" pos:end="201:28">case <expr pos:start="201:10" pos:end="201:27"><name pos:start="201:10" pos:end="201:27">CODEC_ID_PCM_F32LE</name></expr>:</case>

        <macro pos:start="203:9" pos:end="203:52"><name pos:start="203:9" pos:end="203:14">DECODE</name><argument_list pos:start="203:15" pos:end="203:52">(<argument pos:start="203:16" pos:end="203:22">int32_t</argument>, <argument pos:start="203:25" pos:end="203:28">le32</argument>, <argument pos:start="203:31" pos:end="203:33">src</argument>, <argument pos:start="203:36" pos:end="203:42">samples</argument>, <argument pos:start="203:45" pos:end="203:45">n</argument>, <argument pos:start="203:48" pos:end="203:48"><literal type="number" pos:start="203:48" pos:end="203:48">0</literal></argument>, <argument pos:start="203:51" pos:end="203:51"><literal type="number" pos:start="203:51" pos:end="203:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="205:9" pos:end="205:14">break;</break>

    <case pos:start="207:5" pos:end="207:28">case <expr pos:start="207:10" pos:end="207:27"><name pos:start="207:10" pos:end="207:27">CODEC_ID_PCM_S16LE</name></expr>:</case>

        <macro pos:start="209:9" pos:end="209:52"><name pos:start="209:9" pos:end="209:14">DECODE</name><argument_list pos:start="209:15" pos:end="209:52">(<argument pos:start="209:16" pos:end="209:22">int16_t</argument>, <argument pos:start="209:25" pos:end="209:28">le16</argument>, <argument pos:start="209:31" pos:end="209:33">src</argument>, <argument pos:start="209:36" pos:end="209:42">samples</argument>, <argument pos:start="209:45" pos:end="209:45">n</argument>, <argument pos:start="209:48" pos:end="209:48"><literal type="number" pos:start="209:48" pos:end="209:48">0</literal></argument>, <argument pos:start="209:51" pos:end="209:51"><literal type="number" pos:start="209:51" pos:end="209:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="211:9" pos:end="211:14">break;</break>

    <case pos:start="213:5" pos:end="213:28">case <expr pos:start="213:10" pos:end="213:27"><name pos:start="213:10" pos:end="213:27">CODEC_ID_PCM_F64BE</name></expr>:</case>

    <case pos:start="215:5" pos:end="215:28">case <expr pos:start="215:10" pos:end="215:27"><name pos:start="215:10" pos:end="215:27">CODEC_ID_PCM_F32BE</name></expr>:</case>

    <case pos:start="217:5" pos:end="217:28">case <expr pos:start="217:10" pos:end="217:27"><name pos:start="217:10" pos:end="217:27">CODEC_ID_PCM_S32BE</name></expr>:</case>

    <case pos:start="219:5" pos:end="222:0">case <expr pos:start="219:10" pos:end="219:27"><name pos:start="219:10" pos:end="219:27">CODEC_ID_PCM_S16BE</name></expr>:</case>

<cpp:else pos:start="221:1" pos:end="221:5">#<cpp:directive pos:start="221:2" pos:end="221:5">else</cpp:directive></cpp:else>

    <case pos:start="223:5" pos:end="223:28">case <expr pos:start="223:10" pos:end="223:27"><name pos:start="223:10" pos:end="223:27">CODEC_ID_PCM_F64BE</name></expr>:</case>

        <macro pos:start="225:9" pos:end="225:52"><name pos:start="225:9" pos:end="225:14">DECODE</name><argument_list pos:start="225:15" pos:end="225:52">(<argument pos:start="225:16" pos:end="225:22">int64_t</argument>, <argument pos:start="225:25" pos:end="225:28">be64</argument>, <argument pos:start="225:31" pos:end="225:33">src</argument>, <argument pos:start="225:36" pos:end="225:42">samples</argument>, <argument pos:start="225:45" pos:end="225:45">n</argument>, <argument pos:start="225:48" pos:end="225:48"><literal type="number" pos:start="225:48" pos:end="225:48">0</literal></argument>, <argument pos:start="225:51" pos:end="225:51"><literal type="number" pos:start="225:51" pos:end="225:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="227:9" pos:end="227:14">break;</break>

    <case pos:start="229:5" pos:end="229:28">case <expr pos:start="229:10" pos:end="229:27"><name pos:start="229:10" pos:end="229:27">CODEC_ID_PCM_F32BE</name></expr>:</case>

    <case pos:start="231:5" pos:end="231:28">case <expr pos:start="231:10" pos:end="231:27"><name pos:start="231:10" pos:end="231:27">CODEC_ID_PCM_S32BE</name></expr>:</case>

        <macro pos:start="233:9" pos:end="233:52"><name pos:start="233:9" pos:end="233:14">DECODE</name><argument_list pos:start="233:15" pos:end="233:52">(<argument pos:start="233:16" pos:end="233:22">int32_t</argument>, <argument pos:start="233:25" pos:end="233:28">be32</argument>, <argument pos:start="233:31" pos:end="233:33">src</argument>, <argument pos:start="233:36" pos:end="233:42">samples</argument>, <argument pos:start="233:45" pos:end="233:45">n</argument>, <argument pos:start="233:48" pos:end="233:48"><literal type="number" pos:start="233:48" pos:end="233:48">0</literal></argument>, <argument pos:start="233:51" pos:end="233:51"><literal type="number" pos:start="233:51" pos:end="233:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="235:9" pos:end="235:14">break;</break>

    <case pos:start="237:5" pos:end="237:28">case <expr pos:start="237:10" pos:end="237:27"><name pos:start="237:10" pos:end="237:27">CODEC_ID_PCM_S16BE</name></expr>:</case>

        <macro pos:start="239:9" pos:end="239:52"><name pos:start="239:9" pos:end="239:14">DECODE</name><argument_list pos:start="239:15" pos:end="239:52">(<argument pos:start="239:16" pos:end="239:22">int16_t</argument>, <argument pos:start="239:25" pos:end="239:28">be16</argument>, <argument pos:start="239:31" pos:end="239:33">src</argument>, <argument pos:start="239:36" pos:end="239:42">samples</argument>, <argument pos:start="239:45" pos:end="239:45">n</argument>, <argument pos:start="239:48" pos:end="239:48"><literal type="number" pos:start="239:48" pos:end="239:48">0</literal></argument>, <argument pos:start="239:51" pos:end="239:51"><literal type="number" pos:start="239:51" pos:end="239:51">0</literal></argument>)</argument_list></macro>

        <break pos:start="241:9" pos:end="241:14">break;</break>

    <case pos:start="243:5" pos:end="243:28">case <expr pos:start="243:10" pos:end="243:27"><name pos:start="243:10" pos:end="243:27">CODEC_ID_PCM_F64LE</name></expr>:</case>

    <case pos:start="245:5" pos:end="245:28">case <expr pos:start="245:10" pos:end="245:27"><name pos:start="245:10" pos:end="245:27">CODEC_ID_PCM_F32LE</name></expr>:</case>

    <case pos:start="247:5" pos:end="247:28">case <expr pos:start="247:10" pos:end="247:27"><name pos:start="247:10" pos:end="247:27">CODEC_ID_PCM_S32LE</name></expr>:</case>

    <case pos:start="249:5" pos:end="252:0">case <expr pos:start="249:10" pos:end="249:27"><name pos:start="249:10" pos:end="249:27">CODEC_ID_PCM_S16LE</name></expr>:</case>

<cpp:endif pos:start="251:1" pos:end="251:6">#<cpp:directive pos:start="251:2" pos:end="251:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="251:8" pos:end="251:28">/* WORDS_BIGENDIAN */</comment>

    <case pos:start="253:5" pos:end="253:25">case <expr pos:start="253:10" pos:end="253:24"><name pos:start="253:10" pos:end="253:24">CODEC_ID_PCM_U8</name></expr>:</case>

        <expr_stmt pos:start="255:9" pos:end="255:44"><expr pos:start="255:9" pos:end="255:43"><call pos:start="255:9" pos:end="255:43"><name pos:start="255:9" pos:end="255:14">memcpy</name><argument_list pos:start="255:15" pos:end="255:43">(<argument pos:start="255:16" pos:end="255:22"><expr pos:start="255:16" pos:end="255:22"><name pos:start="255:16" pos:end="255:22">samples</name></expr></argument>, <argument pos:start="255:25" pos:end="255:27"><expr pos:start="255:25" pos:end="255:27"><name pos:start="255:25" pos:end="255:27">src</name></expr></argument>, <argument pos:start="255:30" pos:end="255:42"><expr pos:start="255:30" pos:end="255:42"><name pos:start="255:30" pos:end="255:30">n</name><operator pos:start="255:31" pos:end="255:31">*</operator><name pos:start="255:32" pos:end="255:42">sample_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:29"><expr pos:start="257:9" pos:end="257:28"><name pos:start="257:9" pos:end="257:11">src</name> <operator pos:start="257:13" pos:end="257:14">+=</operator> <name pos:start="257:16" pos:end="257:16">n</name><operator pos:start="257:17" pos:end="257:17">*</operator><name pos:start="257:18" pos:end="257:28">sample_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:59"><expr pos:start="259:9" pos:end="259:58"><name pos:start="259:9" pos:end="259:15">samples</name> <operator pos:start="259:17" pos:end="259:17">=</operator> <operator pos:start="259:19" pos:end="259:19">(</operator><name pos:start="259:20" pos:end="259:24">short</name><operator pos:start="259:25" pos:end="259:25">*</operator><operator pos:start="259:26" pos:end="259:26">)</operator><operator pos:start="259:27" pos:end="259:27">(</operator><operator pos:start="259:28" pos:end="259:28">(</operator><name pos:start="259:29" pos:end="259:35">uint8_t</name><operator pos:start="259:36" pos:end="259:36">*</operator><operator pos:start="259:37" pos:end="259:37">)</operator><name pos:start="259:38" pos:end="259:41">data</name> <operator pos:start="259:43" pos:end="259:43">+</operator> <name pos:start="259:45" pos:end="259:45">n</name><operator pos:start="259:46" pos:end="259:46">*</operator><name pos:start="259:47" pos:end="259:57">sample_size</name><operator pos:start="259:58" pos:end="259:58">)</operator></expr>;</expr_stmt>

        <break pos:start="261:9" pos:end="261:14">break;</break>

    <case pos:start="263:5" pos:end="263:27">case <expr pos:start="263:10" pos:end="263:26"><name pos:start="263:10" pos:end="263:26">CODEC_ID_PCM_ZORK</name></expr>:</case>

        <for pos:start="265:9" pos:end="275:9">for<control pos:start="265:12" pos:end="265:21">(<init pos:start="265:13" pos:end="265:13">;</init><condition pos:start="265:14" pos:end="265:17"><expr pos:start="265:14" pos:end="265:16"><name pos:start="265:14" pos:end="265:14">n</name><operator pos:start="265:15" pos:end="265:15">&gt;</operator><literal type="number" pos:start="265:16" pos:end="265:16">0</literal></expr>;</condition><incr pos:start="265:18" pos:end="265:20"><expr pos:start="265:18" pos:end="265:20"><name pos:start="265:18" pos:end="265:18">n</name><operator pos:start="265:19" pos:end="265:20">--</operator></expr></incr>)</control> <block pos:start="265:23" pos:end="275:9">{<block_content pos:start="267:13" pos:end="273:32">

            <decl_stmt pos:start="267:13" pos:end="267:26"><decl pos:start="267:13" pos:end="267:25"><type pos:start="267:13" pos:end="267:15"><name pos:start="267:13" pos:end="267:15">int</name></type> <name pos:start="267:17" pos:end="267:17">x</name><init pos:start="267:18" pos:end="267:25">= <expr pos:start="267:20" pos:end="267:25"><operator pos:start="267:20" pos:end="267:20">*</operator><name pos:start="267:21" pos:end="267:23">src</name><operator pos:start="267:24" pos:end="267:25">++</operator></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="269:13" pos:end="271:29"><if pos:start="269:13" pos:end="269:30">if<condition pos:start="269:15" pos:end="269:21">(<expr pos:start="269:16" pos:end="269:20"><name pos:start="269:16" pos:end="269:16">x</name><operator pos:start="269:17" pos:end="269:17">&amp;</operator><literal type="number" pos:start="269:18" pos:end="269:20">128</literal></expr>)</condition><block type="pseudo" pos:start="269:23" pos:end="269:30"><block_content pos:start="269:23" pos:end="269:30"> <expr_stmt pos:start="269:23" pos:end="269:30"><expr pos:start="269:23" pos:end="269:29"><name pos:start="269:23" pos:end="269:23">x</name><operator pos:start="269:24" pos:end="269:25">-=</operator> <literal type="number" pos:start="269:27" pos:end="269:29">128</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="271:13" pos:end="271:29">else<block type="pseudo" pos:start="271:23" pos:end="271:29"><block_content pos:start="271:23" pos:end="271:29">      <expr_stmt pos:start="271:23" pos:end="271:29"><expr pos:start="271:23" pos:end="271:28"><name pos:start="271:23" pos:end="271:23">x</name> <operator pos:start="271:25" pos:end="271:25">=</operator> <operator pos:start="271:27" pos:end="271:27">-</operator><name pos:start="271:28" pos:end="271:28">x</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:32"><expr pos:start="273:13" pos:end="273:31"><operator pos:start="273:13" pos:end="273:13">*</operator><name pos:start="273:14" pos:end="273:20">samples</name><operator pos:start="273:21" pos:end="273:22">++</operator> <operator pos:start="273:24" pos:end="273:24">=</operator> <name pos:start="273:26" pos:end="273:26">x</name> <operator pos:start="273:28" pos:end="273:29">&lt;&lt;</operator> <literal type="number" pos:start="273:31" pos:end="273:31">8</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="277:9" pos:end="277:14">break;</break>

    <case pos:start="279:5" pos:end="279:27">case <expr pos:start="279:10" pos:end="279:26"><name pos:start="279:10" pos:end="279:26">CODEC_ID_PCM_ALAW</name></expr>:</case>

    <case pos:start="281:5" pos:end="281:28">case <expr pos:start="281:10" pos:end="281:27"><name pos:start="281:10" pos:end="281:27">CODEC_ID_PCM_MULAW</name></expr>:</case>

        <for pos:start="283:9" pos:end="287:9">for<control pos:start="283:12" pos:end="283:21">(<init pos:start="283:13" pos:end="283:13">;</init><condition pos:start="283:14" pos:end="283:17"><expr pos:start="283:14" pos:end="283:16"><name pos:start="283:14" pos:end="283:14">n</name><operator pos:start="283:15" pos:end="283:15">&gt;</operator><literal type="number" pos:start="283:16" pos:end="283:16">0</literal></expr>;</condition><incr pos:start="283:18" pos:end="283:20"><expr pos:start="283:18" pos:end="283:20"><name pos:start="283:18" pos:end="283:18">n</name><operator pos:start="283:19" pos:end="283:20">--</operator></expr></incr>)</control> <block pos:start="283:23" pos:end="287:9">{<block_content pos:start="285:13" pos:end="285:42">

            <expr_stmt pos:start="285:13" pos:end="285:42"><expr pos:start="285:13" pos:end="285:41"><operator pos:start="285:13" pos:end="285:13">*</operator><name pos:start="285:14" pos:end="285:20">samples</name><operator pos:start="285:21" pos:end="285:22">++</operator> <operator pos:start="285:24" pos:end="285:24">=</operator> <name pos:start="285:26" pos:end="285:41"><name pos:start="285:26" pos:end="285:26">s</name><operator pos:start="285:27" pos:end="285:28">-&gt;</operator><name pos:start="285:29" pos:end="285:33">table</name><index pos:start="285:34" pos:end="285:41">[<expr pos:start="285:35" pos:end="285:40"><operator pos:start="285:35" pos:end="285:35">*</operator><name pos:start="285:36" pos:end="285:38">src</name><operator pos:start="285:39" pos:end="285:40">++</operator></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="289:9" pos:end="289:14">break;</break>

    <case pos:start="291:5" pos:end="291:26">case <expr pos:start="291:10" pos:end="291:25"><name pos:start="291:10" pos:end="291:25">CODEC_ID_PCM_DVD</name></expr>:</case>

        <if_stmt pos:start="293:9" pos:end="315:9"><if pos:start="293:9" pos:end="299:9">if<condition pos:start="293:11" pos:end="293:72">(<expr pos:start="293:12" pos:end="293:71"><name pos:start="293:12" pos:end="293:33"><name pos:start="293:12" pos:end="293:16">avctx</name><operator pos:start="293:17" pos:end="293:18">-&gt;</operator><name pos:start="293:19" pos:end="293:33">bits_per_sample</name></name> <operator pos:start="293:35" pos:end="293:36">!=</operator> <literal type="number" pos:start="293:38" pos:end="293:39">20</literal> <operator pos:start="293:41" pos:end="293:42">&amp;&amp;</operator> <name pos:start="293:44" pos:end="293:65"><name pos:start="293:44" pos:end="293:48">avctx</name><operator pos:start="293:49" pos:end="293:50">-&gt;</operator><name pos:start="293:51" pos:end="293:65">bits_per_sample</name></name> <operator pos:start="293:67" pos:end="293:68">!=</operator> <literal type="number" pos:start="293:70" pos:end="293:71">24</literal></expr>)</condition> <block pos:start="293:74" pos:end="299:9">{<block_content pos:start="295:13" pos:end="297:22">

            <expr_stmt pos:start="295:13" pos:end="295:78"><expr pos:start="295:13" pos:end="295:77"><call pos:start="295:13" pos:end="295:77"><name pos:start="295:13" pos:end="295:18">av_log</name><argument_list pos:start="295:19" pos:end="295:77">(<argument pos:start="295:20" pos:end="295:24"><expr pos:start="295:20" pos:end="295:24"><name pos:start="295:20" pos:end="295:24">avctx</name></expr></argument>, <argument pos:start="295:27" pos:end="295:38"><expr pos:start="295:27" pos:end="295:38"><name pos:start="295:27" pos:end="295:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="295:41" pos:end="295:76"><expr pos:start="295:41" pos:end="295:76"><literal type="string" pos:start="295:41" pos:end="295:76">"PCM DVD unsupported sample depth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="297:13" pos:end="297:22">return <expr pos:start="297:20" pos:end="297:21"><operator pos:start="297:20" pos:end="297:20">-</operator><literal type="number" pos:start="297:21" pos:end="297:21">1</literal></expr>;</return>

        </block_content>}</block></if> <else pos:start="299:11" pos:end="315:9">else <block pos:start="299:16" pos:end="315:9">{<block_content pos:start="301:13" pos:end="313:13">

            <decl_stmt pos:start="301:13" pos:end="301:73"><decl pos:start="301:13" pos:end="301:72"><type pos:start="301:13" pos:end="301:15"><name pos:start="301:13" pos:end="301:15">int</name></type> <name pos:start="301:17" pos:end="301:20">jump</name> <init pos:start="301:22" pos:end="301:72">= <expr pos:start="301:24" pos:end="301:72"><name pos:start="301:24" pos:end="301:38"><name pos:start="301:24" pos:end="301:28">avctx</name><operator pos:start="301:29" pos:end="301:30">-&gt;</operator><name pos:start="301:31" pos:end="301:38">channels</name></name> <operator pos:start="301:40" pos:end="301:40">*</operator> <operator pos:start="301:42" pos:end="301:42">(</operator><name pos:start="301:43" pos:end="301:64"><name pos:start="301:43" pos:end="301:47">avctx</name><operator pos:start="301:48" pos:end="301:49">-&gt;</operator><name pos:start="301:50" pos:end="301:64">bits_per_sample</name></name><operator pos:start="301:65" pos:end="301:65">-</operator><literal type="number" pos:start="301:66" pos:end="301:67">16</literal><operator pos:start="301:68" pos:end="301:68">)</operator> <operator pos:start="301:70" pos:end="301:70">/</operator> <literal type="number" pos:start="301:72" pos:end="301:72">4</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="303:13" pos:end="303:78"><expr pos:start="303:13" pos:end="303:77"><name pos:start="303:13" pos:end="303:13">n</name> <operator pos:start="303:15" pos:end="303:15">=</operator> <name pos:start="303:17" pos:end="303:24">buf_size</name> <operator pos:start="303:26" pos:end="303:26">/</operator> <operator pos:start="303:28" pos:end="303:28">(</operator><name pos:start="303:29" pos:end="303:43"><name pos:start="303:29" pos:end="303:33">avctx</name><operator pos:start="303:34" pos:end="303:35">-&gt;</operator><name pos:start="303:36" pos:end="303:43">channels</name></name> <operator pos:start="303:45" pos:end="303:45">*</operator> <literal type="number" pos:start="303:47" pos:end="303:47">2</literal> <operator pos:start="303:49" pos:end="303:49">*</operator> <name pos:start="303:51" pos:end="303:72"><name pos:start="303:51" pos:end="303:55">avctx</name><operator pos:start="303:56" pos:end="303:57">-&gt;</operator><name pos:start="303:58" pos:end="303:72">bits_per_sample</name></name> <operator pos:start="303:74" pos:end="303:74">/</operator> <literal type="number" pos:start="303:76" pos:end="303:76">8</literal><operator pos:start="303:77" pos:end="303:77">)</operator></expr>;</expr_stmt>

            <while pos:start="305:13" pos:end="313:13">while <condition pos:start="305:19" pos:end="305:23">(<expr pos:start="305:20" pos:end="305:22"><name pos:start="305:20" pos:end="305:20">n</name><operator pos:start="305:21" pos:end="305:22">--</operator></expr>)</condition> <block pos:start="305:25" pos:end="313:13">{<block_content pos:start="307:17" pos:end="311:28">

                <for pos:start="307:17" pos:end="309:59">for <control pos:start="307:21" pos:end="307:53">(<init pos:start="307:22" pos:end="307:25"><expr pos:start="307:22" pos:end="307:24"><name pos:start="307:22" pos:end="307:22">c</name><operator pos:start="307:23" pos:end="307:23">=</operator><literal type="number" pos:start="307:24" pos:end="307:24">0</literal></expr>;</init> <condition pos:start="307:27" pos:end="307:48"><expr pos:start="307:27" pos:end="307:47"><name pos:start="307:27" pos:end="307:27">c</name> <operator pos:start="307:29" pos:end="307:29">&lt;</operator> <literal type="number" pos:start="307:31" pos:end="307:31">2</literal><operator pos:start="307:32" pos:end="307:32">*</operator><name pos:start="307:33" pos:end="307:47"><name pos:start="307:33" pos:end="307:37">avctx</name><operator pos:start="307:38" pos:end="307:39">-&gt;</operator><name pos:start="307:40" pos:end="307:47">channels</name></name></expr>;</condition> <incr pos:start="307:50" pos:end="307:52"><expr pos:start="307:50" pos:end="307:52"><name pos:start="307:50" pos:end="307:50">c</name><operator pos:start="307:51" pos:end="307:52">++</operator></expr></incr>)</control><block type="pseudo" pos:start="309:21" pos:end="309:59"><block_content pos:start="309:21" pos:end="309:59">

                    <expr_stmt pos:start="309:21" pos:end="309:59"><expr pos:start="309:21" pos:end="309:58"><operator pos:start="309:21" pos:end="309:21">*</operator><name pos:start="309:22" pos:end="309:28">samples</name><operator pos:start="309:29" pos:end="309:30">++</operator> <operator pos:start="309:32" pos:end="309:32">=</operator> <call pos:start="309:34" pos:end="309:58"><name pos:start="309:34" pos:end="309:52">bytestream_get_be16</name><argument_list pos:start="309:53" pos:end="309:58">(<argument pos:start="309:54" pos:end="309:57"><expr pos:start="309:54" pos:end="309:57"><operator pos:start="309:54" pos:end="309:54">&amp;</operator><name pos:start="309:55" pos:end="309:57">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="311:17" pos:end="311:28"><expr pos:start="311:17" pos:end="311:27"><name pos:start="311:17" pos:end="311:19">src</name> <operator pos:start="311:21" pos:end="311:22">+=</operator> <name pos:start="311:24" pos:end="311:27">jump</name></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></else></if_stmt>

        <break pos:start="317:9" pos:end="317:14">break;</break>

    <default pos:start="319:5" pos:end="319:12">default:</default>

        <return pos:start="321:9" pos:end="321:18">return <expr pos:start="321:16" pos:end="321:17"><operator pos:start="321:16" pos:end="321:16">-</operator><literal type="number" pos:start="321:17" pos:end="321:17">1</literal></expr>;</return>

    </block_content>}</block></switch>

    <expr_stmt pos:start="325:5" pos:end="325:54"><expr pos:start="325:5" pos:end="325:53"><operator pos:start="325:5" pos:end="325:5">*</operator><name pos:start="325:6" pos:end="325:14">data_size</name> <operator pos:start="325:16" pos:end="325:16">=</operator> <operator pos:start="325:18" pos:end="325:18">(</operator><name pos:start="325:19" pos:end="325:25">uint8_t</name> <operator pos:start="325:27" pos:end="325:27">*</operator><operator pos:start="325:28" pos:end="325:28">)</operator><name pos:start="325:29" pos:end="325:35">samples</name> <operator pos:start="325:37" pos:end="325:37">-</operator> <operator pos:start="325:39" pos:end="325:39">(</operator><name pos:start="325:40" pos:end="325:46">uint8_t</name> <operator pos:start="325:48" pos:end="325:48">*</operator><operator pos:start="325:49" pos:end="325:49">)</operator><name pos:start="325:50" pos:end="325:53">data</name></expr>;</expr_stmt>

    <return pos:start="327:5" pos:end="327:21">return <expr pos:start="327:12" pos:end="327:20"><name pos:start="327:12" pos:end="327:14">src</name> <operator pos:start="327:16" pos:end="327:16">-</operator> <name pos:start="327:18" pos:end="327:20">buf</name></expr>;</return>

</block_content>}</block></function>
</unit>
