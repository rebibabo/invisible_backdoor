<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17387.c" pos:tabs="8"><function pos:start="1:1" pos:end="225:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:45">hevc_sdp_parse_fmtp_config</name><parameter_list pos:start="1:46" pos:end="7:70">(<parameter pos:start="1:47" pos:end="1:64"><decl pos:start="1:47" pos:end="1:64"><type pos:start="1:47" pos:end="1:64"><name pos:start="1:47" pos:end="1:61">AVFormatContext</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:64">s</name></decl></parameter>,

                                              <parameter pos:start="3:47" pos:end="3:62"><decl pos:start="3:47" pos:end="3:62"><type pos:start="3:47" pos:end="3:62"><name pos:start="3:47" pos:end="3:54">AVStream</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier></type><name pos:start="3:57" pos:end="3:62">stream</name></decl></parameter>,

                                              <parameter pos:start="5:47" pos:end="5:71"><decl pos:start="5:47" pos:end="5:71"><type pos:start="5:47" pos:end="5:71"><name pos:start="5:47" pos:end="5:60">PayloadContext</name> <modifier pos:start="5:62" pos:end="5:62">*</modifier></type><name pos:start="5:63" pos:end="5:71">hevc_data</name></decl></parameter>,

                                              <parameter pos:start="7:47" pos:end="7:56"><decl pos:start="7:47" pos:end="7:56"><type pos:start="7:47" pos:end="7:56"><name pos:start="7:47" pos:end="7:50">char</name> <modifier pos:start="7:52" pos:end="7:52">*</modifier></type><name pos:start="7:53" pos:end="7:56">attr</name></decl></parameter>, <parameter pos:start="7:59" pos:end="7:69"><decl pos:start="7:59" pos:end="7:69"><type pos:start="7:59" pos:end="7:69"><name pos:start="7:59" pos:end="7:62">char</name> <modifier pos:start="7:64" pos:end="7:64">*</modifier></type><name pos:start="7:65" pos:end="7:69">value</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="225:1">{<block_content pos:start="15:5" pos:end="223:13">

    <comment type="block" pos:start="11:5" pos:end="11:28">/* profile-space: 0-3 */</comment>

    <comment type="block" pos:start="13:5" pos:end="13:26">/* profile-id: 0-31 */</comment>

    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:36">(<expr pos:start="15:9" pos:end="15:35"><operator pos:start="15:9" pos:end="15:9">!</operator><call pos:start="15:10" pos:end="15:35"><name pos:start="15:10" pos:end="15:15">strcmp</name><argument_list pos:start="15:16" pos:end="15:35">(<argument pos:start="15:17" pos:end="15:20"><expr pos:start="15:17" pos:end="15:20"><name pos:start="15:17" pos:end="15:20">attr</name></expr></argument>, <argument pos:start="15:23" pos:end="15:34"><expr pos:start="15:23" pos:end="15:34"><literal type="string" pos:start="15:23" pos:end="15:34">"profile-id"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:38" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:73">

        <expr_stmt pos:start="17:9" pos:end="17:44"><expr pos:start="17:9" pos:end="17:43"><name pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:17">hevc_data</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:29">profile_id</name></name> <operator pos:start="17:31" pos:end="17:31">=</operator> <call pos:start="17:33" pos:end="17:43"><name pos:start="17:33" pos:end="17:36">atoi</name><argument_list pos:start="17:37" pos:end="17:43">(<argument pos:start="17:38" pos:end="17:42"><expr pos:start="17:38" pos:end="17:42"><name pos:start="17:38" pos:end="17:42">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:73"><expr pos:start="19:9" pos:end="19:72"><call pos:start="19:9" pos:end="19:72"><name pos:start="19:9" pos:end="19:15">av_dlog</name><argument_list pos:start="19:16" pos:end="19:72">(<argument pos:start="19:17" pos:end="19:17"><expr pos:start="19:17" pos:end="19:17"><name pos:start="19:17" pos:end="19:17">s</name></expr></argument>, <argument pos:start="19:20" pos:end="19:48"><expr pos:start="19:20" pos:end="19:48"><literal type="string" pos:start="19:20" pos:end="19:48">"SDP: found profile-id: %d\n"</literal></expr></argument>, <argument pos:start="19:51" pos:end="19:71"><expr pos:start="19:51" pos:end="19:71"><name pos:start="19:51" pos:end="19:71"><name pos:start="19:51" pos:end="19:59">hevc_data</name><operator pos:start="19:60" pos:end="19:61">-&gt;</operator><name pos:start="19:62" pos:end="19:71">profile_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:24">/* tier-flag: 0-1 */</comment>

    <comment type="block" pos:start="27:5" pos:end="27:25">/* level-id: 0-255 */</comment>

    <comment type="block" pos:start="29:5" pos:end="29:39">/* interop-constraints: [base16] */</comment>

    <comment type="block" pos:start="31:5" pos:end="31:51">/* profile-compatibility-indicator: [base16] */</comment>

    <comment type="block" pos:start="33:5" pos:end="33:85">/* sprop-sub-layer-id: 0-6, defines highest possible value for TID, default: 6 */</comment>

    <comment type="block" pos:start="35:5" pos:end="35:32">/* recv-sub-layer-id: 0-6 */</comment>

    <comment type="block" pos:start="37:5" pos:end="37:34">/* max-recv-level-id: 0-255 */</comment>

    <comment type="block" pos:start="39:5" pos:end="39:26">/* tx-mode: MSM,SSM */</comment>

    <comment type="block" pos:start="41:5" pos:end="41:29">/* sprop-vps: [base64] */</comment>

    <comment type="block" pos:start="43:5" pos:end="43:29">/* sprop-sps: [base64] */</comment>

    <comment type="block" pos:start="45:5" pos:end="45:29">/* sprop-pps: [base64] */</comment>

    <comment type="block" pos:start="47:5" pos:end="47:29">/* sprop-sei: [base64] */</comment>

    <if_stmt pos:start="49:5" pos:end="155:5"><if pos:start="49:5" pos:end="155:5">if <condition pos:start="49:8" pos:end="51:65">(<expr pos:start="49:9" pos:end="51:64"><operator pos:start="49:9" pos:end="49:9">!</operator><call pos:start="49:10" pos:end="49:34"><name pos:start="49:10" pos:end="49:15">strcmp</name><argument_list pos:start="49:16" pos:end="49:34">(<argument pos:start="49:17" pos:end="49:20"><expr pos:start="49:17" pos:end="49:20"><name pos:start="49:17" pos:end="49:20">attr</name></expr></argument>, <argument pos:start="49:23" pos:end="49:33"><expr pos:start="49:23" pos:end="49:33"><literal type="string" pos:start="49:23" pos:end="49:33">"sprop-vps"</literal></expr></argument>)</argument_list></call> <operator pos:start="49:36" pos:end="49:37">||</operator> <operator pos:start="49:39" pos:end="49:39">!</operator><call pos:start="49:40" pos:end="49:64"><name pos:start="49:40" pos:end="49:45">strcmp</name><argument_list pos:start="49:46" pos:end="49:64">(<argument pos:start="49:47" pos:end="49:50"><expr pos:start="49:47" pos:end="49:50"><name pos:start="49:47" pos:end="49:50">attr</name></expr></argument>, <argument pos:start="49:53" pos:end="49:63"><expr pos:start="49:53" pos:end="49:63"><literal type="string" pos:start="49:53" pos:end="49:63">"sprop-sps"</literal></expr></argument>)</argument_list></call> <operator pos:start="49:66" pos:end="49:67">||</operator>

        <operator pos:start="51:9" pos:end="51:9">!</operator><call pos:start="51:10" pos:end="51:34"><name pos:start="51:10" pos:end="51:15">strcmp</name><argument_list pos:start="51:16" pos:end="51:34">(<argument pos:start="51:17" pos:end="51:20"><expr pos:start="51:17" pos:end="51:20"><name pos:start="51:17" pos:end="51:20">attr</name></expr></argument>, <argument pos:start="51:23" pos:end="51:33"><expr pos:start="51:23" pos:end="51:33"><literal type="string" pos:start="51:23" pos:end="51:33">"sprop-pps"</literal></expr></argument>)</argument_list></call> <operator pos:start="51:36" pos:end="51:37">||</operator> <operator pos:start="51:39" pos:end="51:39">!</operator><call pos:start="51:40" pos:end="51:64"><name pos:start="51:40" pos:end="51:45">strcmp</name><argument_list pos:start="51:46" pos:end="51:64">(<argument pos:start="51:47" pos:end="51:50"><expr pos:start="51:47" pos:end="51:50"><name pos:start="51:47" pos:end="51:50">attr</name></expr></argument>, <argument pos:start="51:53" pos:end="51:63"><expr pos:start="51:53" pos:end="51:63"><literal type="string" pos:start="51:53" pos:end="51:63">"sprop-sei"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:67" pos:end="155:5">{<block_content pos:start="53:9" pos:end="153:9">

        <decl_stmt pos:start="53:9" pos:end="53:27"><decl pos:start="53:9" pos:end="53:26"><type pos:start="53:9" pos:end="53:18"><name pos:start="53:9" pos:end="53:15">uint8_t</name> <modifier pos:start="53:17" pos:end="53:17">*</modifier><modifier pos:start="53:18" pos:end="53:18">*</modifier></type><name pos:start="53:19" pos:end="53:26">data_ptr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="55:9" pos:end="55:22"><decl pos:start="55:9" pos:end="55:21"><type pos:start="55:9" pos:end="55:13"><name pos:start="55:9" pos:end="55:11">int</name> <modifier pos:start="55:13" pos:end="55:13">*</modifier></type><name pos:start="55:14" pos:end="55:21">size_ptr</name></decl>;</decl_stmt>

        <if_stmt pos:start="57:9" pos:end="81:9"><if pos:start="57:9" pos:end="63:9">if <condition pos:start="57:12" pos:end="57:39">(<expr pos:start="57:13" pos:end="57:38"><operator pos:start="57:13" pos:end="57:13">!</operator><call pos:start="57:14" pos:end="57:38"><name pos:start="57:14" pos:end="57:19">strcmp</name><argument_list pos:start="57:20" pos:end="57:38">(<argument pos:start="57:21" pos:end="57:24"><expr pos:start="57:21" pos:end="57:24"><name pos:start="57:21" pos:end="57:24">attr</name></expr></argument>, <argument pos:start="57:27" pos:end="57:37"><expr pos:start="57:27" pos:end="57:37"><literal type="string" pos:start="57:27" pos:end="57:37">"sprop-vps"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:41" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:44">

            <expr_stmt pos:start="59:13" pos:end="59:39"><expr pos:start="59:13" pos:end="59:38"><name pos:start="59:13" pos:end="59:20">data_ptr</name> <operator pos:start="59:22" pos:end="59:22">=</operator> <operator pos:start="59:24" pos:end="59:24">&amp;</operator><name pos:start="59:25" pos:end="59:38"><name pos:start="59:25" pos:end="59:33">hevc_data</name><operator pos:start="59:34" pos:end="59:35">-&gt;</operator><name pos:start="59:36" pos:end="59:38">vps</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:44"><expr pos:start="61:13" pos:end="61:43"><name pos:start="61:13" pos:end="61:20">size_ptr</name> <operator pos:start="61:22" pos:end="61:22">=</operator> <operator pos:start="61:24" pos:end="61:24">&amp;</operator><name pos:start="61:25" pos:end="61:43"><name pos:start="61:25" pos:end="61:33">hevc_data</name><operator pos:start="61:34" pos:end="61:35">-&gt;</operator><name pos:start="61:36" pos:end="61:43">vps_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="63:11" pos:end="69:9">else if <condition pos:start="63:19" pos:end="63:46">(<expr pos:start="63:20" pos:end="63:45"><operator pos:start="63:20" pos:end="63:20">!</operator><call pos:start="63:21" pos:end="63:45"><name pos:start="63:21" pos:end="63:26">strcmp</name><argument_list pos:start="63:27" pos:end="63:45">(<argument pos:start="63:28" pos:end="63:31"><expr pos:start="63:28" pos:end="63:31"><name pos:start="63:28" pos:end="63:31">attr</name></expr></argument>, <argument pos:start="63:34" pos:end="63:44"><expr pos:start="63:34" pos:end="63:44"><literal type="string" pos:start="63:34" pos:end="63:44">"sprop-sps"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:48" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:44">

            <expr_stmt pos:start="65:13" pos:end="65:39"><expr pos:start="65:13" pos:end="65:38"><name pos:start="65:13" pos:end="65:20">data_ptr</name> <operator pos:start="65:22" pos:end="65:22">=</operator> <operator pos:start="65:24" pos:end="65:24">&amp;</operator><name pos:start="65:25" pos:end="65:38"><name pos:start="65:25" pos:end="65:33">hevc_data</name><operator pos:start="65:34" pos:end="65:35">-&gt;</operator><name pos:start="65:36" pos:end="65:38">sps</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:44"><expr pos:start="67:13" pos:end="67:43"><name pos:start="67:13" pos:end="67:20">size_ptr</name> <operator pos:start="67:22" pos:end="67:22">=</operator> <operator pos:start="67:24" pos:end="67:24">&amp;</operator><name pos:start="67:25" pos:end="67:43"><name pos:start="67:25" pos:end="67:33">hevc_data</name><operator pos:start="67:34" pos:end="67:35">-&gt;</operator><name pos:start="67:36" pos:end="67:43">sps_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="69:11" pos:end="75:9">else if <condition pos:start="69:19" pos:end="69:46">(<expr pos:start="69:20" pos:end="69:45"><operator pos:start="69:20" pos:end="69:20">!</operator><call pos:start="69:21" pos:end="69:45"><name pos:start="69:21" pos:end="69:26">strcmp</name><argument_list pos:start="69:27" pos:end="69:45">(<argument pos:start="69:28" pos:end="69:31"><expr pos:start="69:28" pos:end="69:31"><name pos:start="69:28" pos:end="69:31">attr</name></expr></argument>, <argument pos:start="69:34" pos:end="69:44"><expr pos:start="69:34" pos:end="69:44"><literal type="string" pos:start="69:34" pos:end="69:44">"sprop-pps"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:48" pos:end="75:9">{<block_content pos:start="71:13" pos:end="73:44">

            <expr_stmt pos:start="71:13" pos:end="71:39"><expr pos:start="71:13" pos:end="71:38"><name pos:start="71:13" pos:end="71:20">data_ptr</name> <operator pos:start="71:22" pos:end="71:22">=</operator> <operator pos:start="71:24" pos:end="71:24">&amp;</operator><name pos:start="71:25" pos:end="71:38"><name pos:start="71:25" pos:end="71:33">hevc_data</name><operator pos:start="71:34" pos:end="71:35">-&gt;</operator><name pos:start="71:36" pos:end="71:38">pps</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:44"><expr pos:start="73:13" pos:end="73:43"><name pos:start="73:13" pos:end="73:20">size_ptr</name> <operator pos:start="73:22" pos:end="73:22">=</operator> <operator pos:start="73:24" pos:end="73:24">&amp;</operator><name pos:start="73:25" pos:end="73:43"><name pos:start="73:25" pos:end="73:33">hevc_data</name><operator pos:start="73:34" pos:end="73:35">-&gt;</operator><name pos:start="73:36" pos:end="73:43">pps_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="75:11" pos:end="81:9">else if <condition pos:start="75:19" pos:end="75:46">(<expr pos:start="75:20" pos:end="75:45"><operator pos:start="75:20" pos:end="75:20">!</operator><call pos:start="75:21" pos:end="75:45"><name pos:start="75:21" pos:end="75:26">strcmp</name><argument_list pos:start="75:27" pos:end="75:45">(<argument pos:start="75:28" pos:end="75:31"><expr pos:start="75:28" pos:end="75:31"><name pos:start="75:28" pos:end="75:31">attr</name></expr></argument>, <argument pos:start="75:34" pos:end="75:44"><expr pos:start="75:34" pos:end="75:44"><literal type="string" pos:start="75:34" pos:end="75:44">"sprop-sei"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:48" pos:end="81:9">{<block_content pos:start="77:13" pos:end="79:44">

            <expr_stmt pos:start="77:13" pos:end="77:39"><expr pos:start="77:13" pos:end="77:38"><name pos:start="77:13" pos:end="77:20">data_ptr</name> <operator pos:start="77:22" pos:end="77:22">=</operator> <operator pos:start="77:24" pos:end="77:24">&amp;</operator><name pos:start="77:25" pos:end="77:38"><name pos:start="77:25" pos:end="77:33">hevc_data</name><operator pos:start="77:34" pos:end="77:35">-&gt;</operator><name pos:start="77:36" pos:end="77:38">sei</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:44"><expr pos:start="79:13" pos:end="79:43"><name pos:start="79:13" pos:end="79:20">size_ptr</name> <operator pos:start="79:22" pos:end="79:22">=</operator> <operator pos:start="79:24" pos:end="79:24">&amp;</operator><name pos:start="79:25" pos:end="79:43"><name pos:start="79:25" pos:end="79:33">hevc_data</name><operator pos:start="79:34" pos:end="79:35">-&gt;</operator><name pos:start="79:36" pos:end="79:43">sei_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <while pos:start="85:9" pos:end="153:9">while <condition pos:start="85:15" pos:end="85:22">(<expr pos:start="85:16" pos:end="85:21"><operator pos:start="85:16" pos:end="85:16">*</operator><name pos:start="85:17" pos:end="85:21">value</name></expr>)</condition> <block pos:start="85:24" pos:end="153:9">{<block_content pos:start="87:13" pos:end="151:13">

            <decl_stmt pos:start="87:13" pos:end="87:36"><decl pos:start="87:13" pos:end="87:35"><type pos:start="87:13" pos:end="87:16"><name pos:start="87:13" pos:end="87:16">char</name></type> <name pos:start="87:18" pos:end="87:35"><name pos:start="87:18" pos:end="87:29">base64packet</name><index pos:start="87:30" pos:end="87:35">[<expr pos:start="87:31" pos:end="87:34"><literal type="number" pos:start="87:31" pos:end="87:34">1024</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="89:13" pos:end="89:41"><decl pos:start="89:13" pos:end="89:40"><type pos:start="89:13" pos:end="89:19"><name pos:start="89:13" pos:end="89:19">uint8_t</name></type> <name pos:start="89:21" pos:end="89:40"><name pos:start="89:21" pos:end="89:34">decoded_packet</name><index pos:start="89:35" pos:end="89:40">[<expr pos:start="89:36" pos:end="89:39"><literal type="number" pos:start="89:36" pos:end="89:39">1024</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="91:13" pos:end="91:36"><decl pos:start="91:13" pos:end="91:35"><type pos:start="91:13" pos:end="91:15"><name pos:start="91:13" pos:end="91:15">int</name></type> <name pos:start="91:17" pos:end="91:35">decoded_packet_size</name></decl>;</decl_stmt>

            <decl_stmt pos:start="93:13" pos:end="93:37"><decl pos:start="93:13" pos:end="93:36"><type pos:start="93:13" pos:end="93:18"><name pos:start="93:13" pos:end="93:16">char</name> <modifier pos:start="93:18" pos:end="93:18">*</modifier></type><name pos:start="93:19" pos:end="93:21">dst</name> <init pos:start="93:23" pos:end="93:36">= <expr pos:start="93:25" pos:end="93:36"><name pos:start="93:25" pos:end="93:36">base64packet</name></expr></init></decl>;</decl_stmt>



            <while pos:start="97:13" pos:end="103:13">while <condition pos:start="97:19" pos:end="99:67">(<expr pos:start="97:20" pos:end="99:66"><operator pos:start="97:20" pos:end="97:20">*</operator><name pos:start="97:21" pos:end="97:25">value</name> <operator pos:start="97:27" pos:end="97:28">&amp;&amp;</operator> <operator pos:start="97:30" pos:end="97:30">*</operator><name pos:start="97:31" pos:end="97:35">value</name> <operator pos:start="97:37" pos:end="97:38">!=</operator> <literal type="char" pos:start="97:40" pos:end="97:42">','</literal> <operator pos:start="97:44" pos:end="97:45">&amp;&amp;</operator>

                   <operator pos:start="99:20" pos:end="99:20">(</operator><name pos:start="99:21" pos:end="99:23">dst</name> <operator pos:start="99:25" pos:end="99:25">-</operator> <name pos:start="99:27" pos:end="99:38">base64packet</name><operator pos:start="99:39" pos:end="99:39">)</operator> <operator pos:start="99:41" pos:end="99:41">&lt;</operator> <sizeof pos:start="99:43" pos:end="99:62">sizeof<argument_list pos:start="99:49" pos:end="99:62">(<argument pos:start="99:50" pos:end="99:61"><expr pos:start="99:50" pos:end="99:61"><name pos:start="99:50" pos:end="99:61">base64packet</name></expr></argument>)</argument_list></sizeof> <operator pos:start="99:64" pos:end="99:64">-</operator> <literal type="number" pos:start="99:66" pos:end="99:66">1</literal></expr>)</condition> <block pos:start="99:69" pos:end="103:13">{<block_content pos:start="101:17" pos:end="101:34">

                <expr_stmt pos:start="101:17" pos:end="101:34"><expr pos:start="101:17" pos:end="101:33"><operator pos:start="101:17" pos:end="101:17">*</operator><name pos:start="101:18" pos:end="101:20">dst</name><operator pos:start="101:21" pos:end="101:22">++</operator> <operator pos:start="101:24" pos:end="101:24">=</operator> <operator pos:start="101:26" pos:end="101:26">*</operator><name pos:start="101:27" pos:end="101:31">value</name><operator pos:start="101:32" pos:end="101:33">++</operator></expr>;</expr_stmt>

            </block_content>}</block></while>

            <expr_stmt pos:start="105:13" pos:end="105:26"><expr pos:start="105:13" pos:end="105:25"><operator pos:start="105:13" pos:end="105:13">*</operator><name pos:start="105:14" pos:end="105:16">dst</name><operator pos:start="105:17" pos:end="105:18">++</operator> <operator pos:start="105:20" pos:end="105:20">=</operator> <literal type="char" pos:start="105:22" pos:end="105:25">'\0'</literal></expr>;</expr_stmt>



            <if_stmt pos:start="109:13" pos:end="111:24"><if pos:start="109:13" pos:end="111:24">if <condition pos:start="109:16" pos:end="109:30">(<expr pos:start="109:17" pos:end="109:29"><operator pos:start="109:17" pos:end="109:17">*</operator><name pos:start="109:18" pos:end="109:22">value</name> <operator pos:start="109:24" pos:end="109:25">==</operator> <literal type="char" pos:start="109:27" pos:end="109:29">','</literal></expr>)</condition><block type="pseudo" pos:start="111:17" pos:end="111:24"><block_content pos:start="111:17" pos:end="111:24">

                <expr_stmt pos:start="111:17" pos:end="111:24"><expr pos:start="111:17" pos:end="111:23"><name pos:start="111:17" pos:end="111:21">value</name><operator pos:start="111:22" pos:end="111:23">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="115:13" pos:end="117:75"><expr pos:start="115:13" pos:end="117:74"><name pos:start="115:13" pos:end="115:31">decoded_packet_size</name> <operator pos:start="115:33" pos:end="115:33">=</operator> <call pos:start="115:35" pos:end="117:74"><name pos:start="115:35" pos:end="115:50">av_base64_decode</name><argument_list pos:start="115:51" pos:end="117:74">(<argument pos:start="115:52" pos:end="115:65"><expr pos:start="115:52" pos:end="115:65"><name pos:start="115:52" pos:end="115:65">decoded_packet</name></expr></argument>, <argument pos:start="115:68" pos:end="115:79"><expr pos:start="115:68" pos:end="115:79"><name pos:start="115:68" pos:end="115:79">base64packet</name></expr></argument>,

                                                   <argument pos:start="117:52" pos:end="117:73"><expr pos:start="117:52" pos:end="117:73"><sizeof pos:start="117:52" pos:end="117:73">sizeof<argument_list pos:start="117:58" pos:end="117:73">(<argument pos:start="117:59" pos:end="117:72"><expr pos:start="117:59" pos:end="117:72"><name pos:start="117:59" pos:end="117:72">decoded_packet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="119:13" pos:end="151:13"><if pos:start="119:13" pos:end="151:13">if <condition pos:start="119:16" pos:end="119:40">(<expr pos:start="119:17" pos:end="119:39"><name pos:start="119:17" pos:end="119:35">decoded_packet_size</name> <operator pos:start="119:37" pos:end="119:37">&gt;</operator> <literal type="number" pos:start="119:39" pos:end="119:39">0</literal></expr>)</condition> <block pos:start="119:42" pos:end="151:13">{<block_content pos:start="121:17" pos:end="149:74">

                <decl_stmt pos:start="121:17" pos:end="123:78"><decl pos:start="121:17" pos:end="123:77"><type pos:start="121:17" pos:end="121:25"><name pos:start="121:17" pos:end="121:23">uint8_t</name> <modifier pos:start="121:25" pos:end="121:25">*</modifier></type><name pos:start="121:26" pos:end="121:28">tmp</name> <init pos:start="121:30" pos:end="123:77">= <expr pos:start="121:32" pos:end="123:77"><call pos:start="121:32" pos:end="123:77"><name pos:start="121:32" pos:end="121:41">av_realloc</name><argument_list pos:start="121:42" pos:end="123:77">(<argument pos:start="121:43" pos:end="121:51"><expr pos:start="121:43" pos:end="121:51"><operator pos:start="121:43" pos:end="121:43">*</operator><name pos:start="121:44" pos:end="121:51">data_ptr</name></expr></argument>, <argument pos:start="121:54" pos:end="123:76"><expr pos:start="121:54" pos:end="123:76"><name pos:start="121:54" pos:end="121:72">decoded_packet_size</name> <operator pos:start="121:74" pos:end="121:74">+</operator>

                                          <sizeof pos:start="123:43" pos:end="123:64">sizeof<argument_list pos:start="123:49" pos:end="123:64">(<argument pos:start="123:50" pos:end="123:63"><expr pos:start="123:50" pos:end="123:63"><name pos:start="123:50" pos:end="123:63">start_sequence</name></expr></argument>)</argument_list></sizeof> <operator pos:start="123:66" pos:end="123:66">+</operator> <operator pos:start="123:68" pos:end="123:68">*</operator><name pos:start="123:69" pos:end="123:76">size_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="125:17" pos:end="133:17"><if pos:start="125:17" pos:end="133:17">if <condition pos:start="125:20" pos:end="125:25">(<expr pos:start="125:21" pos:end="125:24"><operator pos:start="125:21" pos:end="125:21">!</operator><name pos:start="125:22" pos:end="125:24">tmp</name></expr>)</condition> <block pos:start="125:27" pos:end="133:17">{<block_content pos:start="127:21" pos:end="131:43">

                    <expr_stmt pos:start="127:21" pos:end="129:73"><expr pos:start="127:21" pos:end="129:72"><call pos:start="127:21" pos:end="129:72"><name pos:start="127:21" pos:end="127:26">av_log</name><argument_list pos:start="127:27" pos:end="129:72">(<argument pos:start="127:28" pos:end="127:28"><expr pos:start="127:28" pos:end="127:28"><name pos:start="127:28" pos:end="127:28">s</name></expr></argument>, <argument pos:start="127:31" pos:end="127:42"><expr pos:start="127:31" pos:end="127:42"><name pos:start="127:31" pos:end="127:42">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="129:28" pos:end="129:71"><expr pos:start="129:28" pos:end="129:71"><literal type="string" pos:start="129:28" pos:end="129:71">"Unable to allocate memory for extradata!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="131:21" pos:end="131:43">return <expr pos:start="131:28" pos:end="131:42"><call pos:start="131:28" pos:end="131:42"><name pos:start="131:28" pos:end="131:34">AVERROR</name><argument_list pos:start="131:35" pos:end="131:42">(<argument pos:start="131:36" pos:end="131:41"><expr pos:start="131:36" pos:end="131:41"><name pos:start="131:36" pos:end="131:41">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="135:17" pos:end="135:32"><expr pos:start="135:17" pos:end="135:31"><operator pos:start="135:17" pos:end="135:17">*</operator><name pos:start="135:18" pos:end="135:25">data_ptr</name> <operator pos:start="135:27" pos:end="135:27">=</operator> <name pos:start="135:29" pos:end="135:31">tmp</name></expr>;</expr_stmt>



                <expr_stmt pos:start="139:17" pos:end="141:47"><expr pos:start="139:17" pos:end="141:46"><call pos:start="139:17" pos:end="141:46"><name pos:start="139:17" pos:end="139:22">memcpy</name><argument_list pos:start="139:23" pos:end="141:46">(<argument pos:start="139:24" pos:end="139:44"><expr pos:start="139:24" pos:end="139:44"><operator pos:start="139:24" pos:end="139:24">*</operator><name pos:start="139:25" pos:end="139:32">data_ptr</name> <operator pos:start="139:34" pos:end="139:34">+</operator> <operator pos:start="139:36" pos:end="139:36">*</operator><name pos:start="139:37" pos:end="139:44">size_ptr</name></expr></argument>, <argument pos:start="139:47" pos:end="139:60"><expr pos:start="139:47" pos:end="139:60"><name pos:start="139:47" pos:end="139:60">start_sequence</name></expr></argument>,

                       <argument pos:start="141:24" pos:end="141:45"><expr pos:start="141:24" pos:end="141:45"><sizeof pos:start="141:24" pos:end="141:45">sizeof<argument_list pos:start="141:30" pos:end="141:45">(<argument pos:start="141:31" pos:end="141:44"><expr pos:start="141:31" pos:end="141:44"><name pos:start="141:31" pos:end="141:44">start_sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="143:17" pos:end="145:60"><expr pos:start="143:17" pos:end="145:59"><call pos:start="143:17" pos:end="145:59"><name pos:start="143:17" pos:end="143:22">memcpy</name><argument_list pos:start="143:23" pos:end="145:59">(<argument pos:start="143:24" pos:end="143:69"><expr pos:start="143:24" pos:end="143:69"><operator pos:start="143:24" pos:end="143:24">*</operator><name pos:start="143:25" pos:end="143:32">data_ptr</name> <operator pos:start="143:34" pos:end="143:34">+</operator> <operator pos:start="143:36" pos:end="143:36">*</operator><name pos:start="143:37" pos:end="143:44">size_ptr</name> <operator pos:start="143:46" pos:end="143:46">+</operator> <sizeof pos:start="143:48" pos:end="143:69">sizeof<argument_list pos:start="143:54" pos:end="143:69">(<argument pos:start="143:55" pos:end="143:68"><expr pos:start="143:55" pos:end="143:68"><name pos:start="143:55" pos:end="143:68">start_sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                       <argument pos:start="145:24" pos:end="145:37"><expr pos:start="145:24" pos:end="145:37"><name pos:start="145:24" pos:end="145:37">decoded_packet</name></expr></argument>, <argument pos:start="145:40" pos:end="145:58"><expr pos:start="145:40" pos:end="145:58"><name pos:start="145:40" pos:end="145:58">decoded_packet_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="149:17" pos:end="149:74"><expr pos:start="149:17" pos:end="149:73"><operator pos:start="149:17" pos:end="149:17">*</operator><name pos:start="149:18" pos:end="149:25">size_ptr</name> <operator pos:start="149:27" pos:end="149:28">+=</operator> <sizeof pos:start="149:30" pos:end="149:51">sizeof<argument_list pos:start="149:36" pos:end="149:51">(<argument pos:start="149:37" pos:end="149:50"><expr pos:start="149:37" pos:end="149:50"><name pos:start="149:37" pos:end="149:50">start_sequence</name></expr></argument>)</argument_list></sizeof> <operator pos:start="149:53" pos:end="149:53">+</operator> <name pos:start="149:55" pos:end="149:73">decoded_packet_size</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="159:5" pos:end="159:68">/* max-lsr, max-lps, max-cpb, max-dpb, max-br, max-tr, max-tc */</comment>

    <comment type="block" pos:start="161:5" pos:end="161:17">/* max-fps */</comment>



    <comment type="block" pos:start="165:5" pos:end="177:6">/* sprop-max-don-diff: 0-32767



         When the RTP stream depends on one or more other RTP

         streams (in this case tx-mode MUST be equal to "MSM" and

         MSM is in use), this parameter MUST be present and the

         value MUST be greater than 0.

    */</comment>

    <if_stmt pos:start="179:5" pos:end="189:5"><if pos:start="179:5" pos:end="189:5">if <condition pos:start="179:8" pos:end="179:44">(<expr pos:start="179:9" pos:end="179:43"><operator pos:start="179:9" pos:end="179:9">!</operator><call pos:start="179:10" pos:end="179:43"><name pos:start="179:10" pos:end="179:15">strcmp</name><argument_list pos:start="179:16" pos:end="179:43">(<argument pos:start="179:17" pos:end="179:20"><expr pos:start="179:17" pos:end="179:20"><name pos:start="179:17" pos:end="179:20">attr</name></expr></argument>, <argument pos:start="179:23" pos:end="179:42"><expr pos:start="179:23" pos:end="179:42"><literal type="string" pos:start="179:23" pos:end="179:42">"sprop-max-don-diff"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="179:46" pos:end="189:5">{<block_content pos:start="181:9" pos:end="187:45">

        <if_stmt pos:start="181:9" pos:end="183:44"><if pos:start="181:9" pos:end="183:44">if <condition pos:start="181:12" pos:end="181:28">(<expr pos:start="181:13" pos:end="181:27"><call pos:start="181:13" pos:end="181:23"><name pos:start="181:13" pos:end="181:16">atoi</name><argument_list pos:start="181:17" pos:end="181:23">(<argument pos:start="181:18" pos:end="181:22"><expr pos:start="181:18" pos:end="181:22"><name pos:start="181:18" pos:end="181:22">value</name></expr></argument>)</argument_list></call> <operator pos:start="181:25" pos:end="181:25">&gt;</operator> <literal type="number" pos:start="181:27" pos:end="181:27">0</literal></expr>)</condition><block type="pseudo" pos:start="183:13" pos:end="183:44"><block_content pos:start="183:13" pos:end="183:44">

            <expr_stmt pos:start="183:13" pos:end="183:44"><expr pos:start="183:13" pos:end="183:43"><name pos:start="183:13" pos:end="183:39"><name pos:start="183:13" pos:end="183:21">hevc_data</name><operator pos:start="183:22" pos:end="183:23">-&gt;</operator><name pos:start="183:24" pos:end="183:39">using_donl_field</name></name> <operator pos:start="183:41" pos:end="183:41">=</operator> <literal type="number" pos:start="183:43" pos:end="183:43">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="185:9" pos:end="187:45"><expr pos:start="185:9" pos:end="187:44"><call pos:start="185:9" pos:end="187:44"><name pos:start="185:9" pos:end="185:15">av_dlog</name><argument_list pos:start="185:16" pos:end="187:44">(<argument pos:start="185:17" pos:end="185:17"><expr pos:start="185:17" pos:end="185:17"><name pos:start="185:17" pos:end="185:17">s</name></expr></argument>, <argument pos:start="185:20" pos:end="185:78"><expr pos:start="185:20" pos:end="185:78"><literal type="string" pos:start="185:20" pos:end="185:78">"Found sprop-max-don-diff in SDP, DON field usage is: %d\n"</literal></expr></argument>,

                <argument pos:start="187:17" pos:end="187:43"><expr pos:start="187:17" pos:end="187:43"><name pos:start="187:17" pos:end="187:43"><name pos:start="187:17" pos:end="187:25">hevc_data</name><operator pos:start="187:26" pos:end="187:27">-&gt;</operator><name pos:start="187:28" pos:end="187:43">using_donl_field</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="193:5" pos:end="193:41">/* sprop-depack-buf-nalus: 0-32767 */</comment>

    <if_stmt pos:start="195:5" pos:end="205:5"><if pos:start="195:5" pos:end="205:5">if <condition pos:start="195:8" pos:end="195:48">(<expr pos:start="195:9" pos:end="195:47"><operator pos:start="195:9" pos:end="195:9">!</operator><call pos:start="195:10" pos:end="195:47"><name pos:start="195:10" pos:end="195:15">strcmp</name><argument_list pos:start="195:16" pos:end="195:47">(<argument pos:start="195:17" pos:end="195:20"><expr pos:start="195:17" pos:end="195:20"><name pos:start="195:17" pos:end="195:20">attr</name></expr></argument>, <argument pos:start="195:23" pos:end="195:46"><expr pos:start="195:23" pos:end="195:46"><literal type="string" pos:start="195:23" pos:end="195:46">"sprop-depack-buf-nalus"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="195:50" pos:end="205:5">{<block_content pos:start="197:9" pos:end="203:45">

        <if_stmt pos:start="197:9" pos:end="199:44"><if pos:start="197:9" pos:end="199:44">if <condition pos:start="197:12" pos:end="197:28">(<expr pos:start="197:13" pos:end="197:27"><call pos:start="197:13" pos:end="197:23"><name pos:start="197:13" pos:end="197:16">atoi</name><argument_list pos:start="197:17" pos:end="197:23">(<argument pos:start="197:18" pos:end="197:22"><expr pos:start="197:18" pos:end="197:22"><name pos:start="197:18" pos:end="197:22">value</name></expr></argument>)</argument_list></call> <operator pos:start="197:25" pos:end="197:25">&gt;</operator> <literal type="number" pos:start="197:27" pos:end="197:27">0</literal></expr>)</condition><block type="pseudo" pos:start="199:13" pos:end="199:44"><block_content pos:start="199:13" pos:end="199:44">

            <expr_stmt pos:start="199:13" pos:end="199:44"><expr pos:start="199:13" pos:end="199:43"><name pos:start="199:13" pos:end="199:39"><name pos:start="199:13" pos:end="199:21">hevc_data</name><operator pos:start="199:22" pos:end="199:23">-&gt;</operator><name pos:start="199:24" pos:end="199:39">using_donl_field</name></name> <operator pos:start="199:41" pos:end="199:41">=</operator> <literal type="number" pos:start="199:43" pos:end="199:43">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="201:9" pos:end="203:45"><expr pos:start="201:9" pos:end="203:44"><call pos:start="201:9" pos:end="203:44"><name pos:start="201:9" pos:end="201:15">av_dlog</name><argument_list pos:start="201:16" pos:end="203:44">(<argument pos:start="201:17" pos:end="201:17"><expr pos:start="201:17" pos:end="201:17"><name pos:start="201:17" pos:end="201:17">s</name></expr></argument>, <argument pos:start="201:20" pos:end="201:82"><expr pos:start="201:20" pos:end="201:82"><literal type="string" pos:start="201:20" pos:end="201:82">"Found sprop-depack-buf-nalus in SDP, DON field usage is: %d\n"</literal></expr></argument>,

                <argument pos:start="203:17" pos:end="203:43"><expr pos:start="203:17" pos:end="203:43"><name pos:start="203:17" pos:end="203:43"><name pos:start="203:17" pos:end="203:25">hevc_data</name><operator pos:start="203:26" pos:end="203:27">-&gt;</operator><name pos:start="203:28" pos:end="203:43">using_donl_field</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="209:5" pos:end="209:46">/* sprop-depack-buf-bytes: 0-4294967295 */</comment>

    <comment type="block" pos:start="211:5" pos:end="211:24">/* depack-buf-cap */</comment>

    <comment type="block" pos:start="213:5" pos:end="213:36">/* sprop-segmentation-id: 0-3 */</comment>

    <comment type="block" pos:start="215:5" pos:end="215:50">/* sprop-spatial-segmentation-idc: [base16] */</comment>

    <comment type="block" pos:start="217:5" pos:end="217:26">/* dec-parallel-ca: */</comment>

    <comment type="block" pos:start="219:5" pos:end="219:21">/* include-dph */</comment>



    <return pos:start="223:5" pos:end="223:13">return <expr pos:start="223:12" pos:end="223:12"><literal type="number" pos:start="223:12" pos:end="223:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
