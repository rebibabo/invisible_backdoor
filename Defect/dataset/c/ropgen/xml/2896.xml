<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2896.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:37">kvm_mips_put_fpu_registers</name><parameter_list pos:start="1:38" pos:end="1:62">(<parameter pos:start="1:39" pos:end="1:50"><decl pos:start="1:39" pos:end="1:50"><type pos:start="1:39" pos:end="1:50"><name pos:start="1:39" pos:end="1:46">CPUState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">cs</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:61"><decl pos:start="1:53" pos:end="1:61"><type pos:start="1:53" pos:end="1:61"><name pos:start="1:53" pos:end="1:55">int</name></type> <name pos:start="1:57" pos:end="1:61">level</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:15">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">MIPSCPU</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">cpu</name> <init pos:start="5:18" pos:end="5:31">= <expr pos:start="5:20" pos:end="5:31"><call pos:start="5:20" pos:end="5:31"><name pos:start="5:20" pos:end="5:27">MIPS_CPU</name><argument_list pos:start="5:28" pos:end="5:31">(<argument pos:start="5:29" pos:end="5:30"><expr pos:start="5:29" pos:end="5:30"><name pos:start="5:29" pos:end="5:30">cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">CPUMIPSState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">env</name> <init pos:start="7:23" pos:end="7:33">= <expr pos:start="7:25" pos:end="7:33"><operator pos:start="7:25" pos:end="7:25">&amp;</operator><name pos:start="7:26" pos:end="7:33"><name pos:start="7:26" pos:end="7:28">cpu</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:33">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">err</name></decl>, <decl pos:start="9:14" pos:end="9:20"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:16">ret</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:18">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:65">/* Only put FPU state if we're emulating a CPU with an FPU */</comment>

    <if_stmt pos:start="17:5" pos:end="79:5"><if pos:start="17:5" pos:end="79:5">if <condition pos:start="17:8" pos:end="17:43">(<expr pos:start="17:9" pos:end="17:42"><name pos:start="17:9" pos:end="17:24"><name pos:start="17:9" pos:end="17:11">env</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:24">CP0_Config1</name></name> <operator pos:start="17:26" pos:end="17:26">&amp;</operator> <operator pos:start="17:28" pos:end="17:28">(</operator><literal type="number" pos:start="17:29" pos:end="17:29">1</literal> <operator pos:start="17:31" pos:end="17:32">&lt;&lt;</operator> <name pos:start="17:34" pos:end="17:41">CP0C1_FP</name><operator pos:start="17:42" pos:end="17:42">)</operator></expr>)</condition> <block pos:start="17:45" pos:end="79:5">{<block_content pos:start="21:9" pos:end="77:9">

        <comment type="block" pos:start="19:9" pos:end="19:35">/* FPU Control Registers */</comment>

        <if_stmt pos:start="21:9" pos:end="35:9"><if pos:start="21:9" pos:end="35:9">if <condition pos:start="21:12" pos:end="21:40">(<expr pos:start="21:13" pos:end="21:39"><name pos:start="21:13" pos:end="21:17">level</name> <operator pos:start="21:19" pos:end="21:20">==</operator> <name pos:start="21:22" pos:end="21:39">KVM_PUT_FULL_STATE</name></expr>)</condition> <block pos:start="21:42" pos:end="35:9">{<block_content pos:start="23:13" pos:end="33:13">

            <expr_stmt pos:start="23:13" pos:end="25:63"><expr pos:start="23:13" pos:end="25:62"><name pos:start="23:13" pos:end="23:15">err</name> <operator pos:start="23:17" pos:end="23:17">=</operator> <call pos:start="23:19" pos:end="25:62"><name pos:start="23:19" pos:end="23:39">kvm_mips_put_one_ureg</name><argument_list pos:start="23:40" pos:end="25:62">(<argument pos:start="23:41" pos:end="23:42"><expr pos:start="23:41" pos:end="23:42"><name pos:start="23:41" pos:end="23:42">cs</name></expr></argument>, <argument pos:start="23:45" pos:end="23:63"><expr pos:start="23:45" pos:end="23:63"><name pos:start="23:45" pos:end="23:63">KVM_REG_MIPS_FCR_IR</name></expr></argument>,

                                        <argument pos:start="25:41" pos:end="25:61"><expr pos:start="25:41" pos:end="25:61"><operator pos:start="25:41" pos:end="25:41">&amp;</operator><name pos:start="25:42" pos:end="25:61"><name pos:start="25:42" pos:end="25:44">env</name><operator pos:start="25:45" pos:end="25:46">-&gt;</operator><name pos:start="25:47" pos:end="25:56">active_fpu</name><operator pos:start="25:57" pos:end="25:57">.</operator><name pos:start="25:58" pos:end="25:61">fcr0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="27:13" pos:end="33:13"><if pos:start="27:13" pos:end="33:13">if <condition pos:start="27:16" pos:end="27:24">(<expr pos:start="27:17" pos:end="27:23"><name pos:start="27:17" pos:end="27:19">err</name> <operator pos:start="27:21" pos:end="27:21">&lt;</operator> <literal type="number" pos:start="27:23" pos:end="27:23">0</literal></expr>)</condition> <block pos:start="27:26" pos:end="33:13">{<block_content pos:start="29:17" pos:end="31:26">

                <expr_stmt pos:start="29:17" pos:end="29:74"><expr pos:start="29:17" pos:end="29:73"><call pos:start="29:17" pos:end="29:73"><name pos:start="29:17" pos:end="29:23">DPRINTF</name><argument_list pos:start="29:24" pos:end="29:73">(<argument pos:start="29:25" pos:end="29:57"><expr pos:start="29:25" pos:end="29:57"><literal type="string" pos:start="29:25" pos:end="29:57">"%s: Failed to put FCR_IR (%d)\n"</literal></expr></argument>, <argument pos:start="29:60" pos:end="29:67"><expr pos:start="29:60" pos:end="29:67"><name pos:start="29:60" pos:end="29:67">__func__</name></expr></argument>, <argument pos:start="29:70" pos:end="29:72"><expr pos:start="29:70" pos:end="29:72"><name pos:start="29:70" pos:end="29:72">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="31:17" pos:end="31:26"><expr pos:start="31:17" pos:end="31:25"><name pos:start="31:17" pos:end="31:19">ret</name> <operator pos:start="31:21" pos:end="31:21">=</operator> <name pos:start="31:23" pos:end="31:25">err</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="37:9" pos:end="39:60"><expr pos:start="37:9" pos:end="39:59"><name pos:start="37:9" pos:end="37:11">err</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="39:59"><name pos:start="37:15" pos:end="37:35">kvm_mips_put_one_ureg</name><argument_list pos:start="37:36" pos:end="39:59">(<argument pos:start="37:37" pos:end="37:38"><expr pos:start="37:37" pos:end="37:38"><name pos:start="37:37" pos:end="37:38">cs</name></expr></argument>, <argument pos:start="37:41" pos:end="37:60"><expr pos:start="37:41" pos:end="37:60"><name pos:start="37:41" pos:end="37:60">KVM_REG_MIPS_FCR_CSR</name></expr></argument>,

                                    <argument pos:start="39:37" pos:end="39:58"><expr pos:start="39:37" pos:end="39:58"><operator pos:start="39:37" pos:end="39:37">&amp;</operator><name pos:start="39:38" pos:end="39:58"><name pos:start="39:38" pos:end="39:40">env</name><operator pos:start="39:41" pos:end="39:42">-&gt;</operator><name pos:start="39:43" pos:end="39:52">active_fpu</name><operator pos:start="39:53" pos:end="39:53">.</operator><name pos:start="39:54" pos:end="39:58">fcr31</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="47:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:20">(<expr pos:start="41:13" pos:end="41:19"><name pos:start="41:13" pos:end="41:15">err</name> <operator pos:start="41:17" pos:end="41:17">&lt;</operator> <literal type="number" pos:start="41:19" pos:end="41:19">0</literal></expr>)</condition> <block pos:start="41:22" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:22">

            <expr_stmt pos:start="43:13" pos:end="43:71"><expr pos:start="43:13" pos:end="43:70"><call pos:start="43:13" pos:end="43:70"><name pos:start="43:13" pos:end="43:19">DPRINTF</name><argument_list pos:start="43:20" pos:end="43:70">(<argument pos:start="43:21" pos:end="43:54"><expr pos:start="43:21" pos:end="43:54"><literal type="string" pos:start="43:21" pos:end="43:54">"%s: Failed to put FCR_CSR (%d)\n"</literal></expr></argument>, <argument pos:start="43:57" pos:end="43:64"><expr pos:start="43:57" pos:end="43:64"><name pos:start="43:57" pos:end="43:64">__func__</name></expr></argument>, <argument pos:start="43:67" pos:end="43:69"><expr pos:start="43:67" pos:end="43:69"><name pos:start="43:67" pos:end="43:69">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:22"><expr pos:start="45:13" pos:end="45:21"><name pos:start="45:13" pos:end="45:15">ret</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <name pos:start="45:19" pos:end="45:21">err</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="51:9" pos:end="51:38">/* Floating point registers */</comment>

        <for pos:start="53:9" pos:end="77:9">for <control pos:start="53:13" pos:end="53:32">(<init pos:start="53:14" pos:end="53:19"><expr pos:start="53:14" pos:end="53:18"><name pos:start="53:14" pos:end="53:14">i</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <literal type="number" pos:start="53:18" pos:end="53:18">0</literal></expr>;</init> <condition pos:start="53:21" pos:end="53:27"><expr pos:start="53:21" pos:end="53:26"><name pos:start="53:21" pos:end="53:21">i</name> <operator pos:start="53:23" pos:end="53:23">&lt;</operator> <literal type="number" pos:start="53:25" pos:end="53:26">32</literal></expr>;</condition> <incr pos:start="53:29" pos:end="53:31"><expr pos:start="53:29" pos:end="53:31"><operator pos:start="53:29" pos:end="53:30">++</operator><name pos:start="53:31" pos:end="53:31">i</name></expr></incr>)</control> <block pos:start="53:34" pos:end="77:9">{<block_content pos:start="55:13" pos:end="75:13">

            <if_stmt pos:start="55:13" pos:end="67:13"><if pos:start="55:13" pos:end="61:13">if <condition pos:start="55:16" pos:end="55:50">(<expr pos:start="55:17" pos:end="55:49"><name pos:start="55:17" pos:end="55:31"><name pos:start="55:17" pos:end="55:19">env</name><operator pos:start="55:20" pos:end="55:21">-&gt;</operator><name pos:start="55:22" pos:end="55:31">CP0_Status</name></name> <operator pos:start="55:33" pos:end="55:33">&amp;</operator> <operator pos:start="55:35" pos:end="55:35">(</operator><literal type="number" pos:start="55:36" pos:end="55:36">1</literal> <operator pos:start="55:38" pos:end="55:39">&lt;&lt;</operator> <name pos:start="55:41" pos:end="55:48">CP0St_FR</name><operator pos:start="55:49" pos:end="55:49">)</operator></expr>)</condition> <block pos:start="55:52" pos:end="61:13">{<block_content pos:start="57:17" pos:end="59:73">

                <expr_stmt pos:start="57:17" pos:end="59:73"><expr pos:start="57:17" pos:end="59:72"><name pos:start="57:17" pos:end="57:19">err</name> <operator pos:start="57:21" pos:end="57:21">=</operator> <call pos:start="57:23" pos:end="59:72"><name pos:start="57:23" pos:end="57:45">kvm_mips_put_one_ureg64</name><argument_list pos:start="57:46" pos:end="59:72">(<argument pos:start="57:47" pos:end="57:48"><expr pos:start="57:47" pos:end="57:48"><name pos:start="57:47" pos:end="57:48">cs</name></expr></argument>, <argument pos:start="57:51" pos:end="57:72"><expr pos:start="57:51" pos:end="57:72"><call pos:start="57:51" pos:end="57:72"><name pos:start="57:51" pos:end="57:69">KVM_REG_MIPS_FPR_64</name><argument_list pos:start="57:70" pos:end="57:72">(<argument pos:start="57:71" pos:end="57:71"><expr pos:start="57:71" pos:end="57:71"><name pos:start="57:71" pos:end="57:71">i</name></expr></argument>)</argument_list></call></expr></argument>,

                                              <argument pos:start="59:47" pos:end="59:71"><expr pos:start="59:47" pos:end="59:71"><operator pos:start="59:47" pos:end="59:47">&amp;</operator><name pos:start="59:48" pos:end="59:69"><name pos:start="59:48" pos:end="59:50">env</name><operator pos:start="59:51" pos:end="59:52">-&gt;</operator><name pos:start="59:53" pos:end="59:62">active_fpu</name><operator pos:start="59:63" pos:end="59:63">.</operator><name pos:start="59:64" pos:end="59:66">fpr</name><index pos:start="59:67" pos:end="59:69">[<expr pos:start="59:68" pos:end="59:68"><name pos:start="59:68" pos:end="59:68">i</name></expr>]</index></name><operator pos:start="59:70" pos:end="59:70">.</operator><name pos:start="59:71" pos:end="59:71">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="61:15" pos:end="67:13">else <block pos:start="61:20" pos:end="67:13">{<block_content pos:start="63:17" pos:end="65:80">

                <expr_stmt pos:start="63:17" pos:end="65:80"><expr pos:start="63:17" pos:end="65:79"><name pos:start="63:17" pos:end="63:19">err</name> <operator pos:start="63:21" pos:end="63:21">=</operator> <call pos:start="63:23" pos:end="65:79"><name pos:start="63:23" pos:end="63:43">kvm_mips_get_one_ureg</name><argument_list pos:start="63:44" pos:end="65:79">(<argument pos:start="63:45" pos:end="63:46"><expr pos:start="63:45" pos:end="63:46"><name pos:start="63:45" pos:end="63:46">cs</name></expr></argument>, <argument pos:start="63:49" pos:end="63:70"><expr pos:start="63:49" pos:end="63:70"><call pos:start="63:49" pos:end="63:70"><name pos:start="63:49" pos:end="63:67">KVM_REG_MIPS_FPR_32</name><argument_list pos:start="63:68" pos:end="63:70">(<argument pos:start="63:69" pos:end="63:69"><expr pos:start="63:69" pos:end="63:69"><name pos:start="63:69" pos:end="63:69">i</name></expr></argument>)</argument_list></call></expr></argument>,

                                      <argument pos:start="65:39" pos:end="65:78"><expr pos:start="65:39" pos:end="65:78"><operator pos:start="65:39" pos:end="65:39">&amp;</operator><name pos:start="65:40" pos:end="65:61"><name pos:start="65:40" pos:end="65:42">env</name><operator pos:start="65:43" pos:end="65:44">-&gt;</operator><name pos:start="65:45" pos:end="65:54">active_fpu</name><operator pos:start="65:55" pos:end="65:55">.</operator><name pos:start="65:56" pos:end="65:58">fpr</name><index pos:start="65:59" pos:end="65:61">[<expr pos:start="65:60" pos:end="65:60"><name pos:start="65:60" pos:end="65:60">i</name></expr>]</index></name><operator pos:start="65:62" pos:end="65:62">.</operator><name pos:start="65:63" pos:end="65:78"><name pos:start="65:63" pos:end="65:63">w</name><index pos:start="65:64" pos:end="65:78">[<expr pos:start="65:65" pos:end="65:77"><name pos:start="65:65" pos:end="65:77">FP_ENDIAN_IDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="69:13" pos:end="75:13"><if pos:start="69:13" pos:end="75:13">if <condition pos:start="69:16" pos:end="69:24">(<expr pos:start="69:17" pos:end="69:23"><name pos:start="69:17" pos:end="69:19">err</name> <operator pos:start="69:21" pos:end="69:21">&lt;</operator> <literal type="number" pos:start="69:23" pos:end="69:23">0</literal></expr>)</condition> <block pos:start="69:26" pos:end="75:13">{<block_content pos:start="71:17" pos:end="73:26">

                <expr_stmt pos:start="71:17" pos:end="71:76"><expr pos:start="71:17" pos:end="71:75"><call pos:start="71:17" pos:end="71:75"><name pos:start="71:17" pos:end="71:23">DPRINTF</name><argument_list pos:start="71:24" pos:end="71:75">(<argument pos:start="71:25" pos:end="71:56"><expr pos:start="71:25" pos:end="71:56"><literal type="string" pos:start="71:25" pos:end="71:56">"%s: Failed to put FPR%u (%d)\n"</literal></expr></argument>, <argument pos:start="71:59" pos:end="71:66"><expr pos:start="71:59" pos:end="71:66"><name pos:start="71:59" pos:end="71:66">__func__</name></expr></argument>, <argument pos:start="71:69" pos:end="71:69"><expr pos:start="71:69" pos:end="71:69"><name pos:start="71:69" pos:end="71:69">i</name></expr></argument>, <argument pos:start="71:72" pos:end="71:74"><expr pos:start="71:72" pos:end="71:74"><name pos:start="71:72" pos:end="71:74">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="73:17" pos:end="73:26"><expr pos:start="73:17" pos:end="73:25"><name pos:start="73:17" pos:end="73:19">ret</name> <operator pos:start="73:21" pos:end="73:21">=</operator> <name pos:start="73:23" pos:end="73:25">err</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <return pos:start="83:5" pos:end="83:15">return <expr pos:start="83:12" pos:end="83:14"><name pos:start="83:12" pos:end="83:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
