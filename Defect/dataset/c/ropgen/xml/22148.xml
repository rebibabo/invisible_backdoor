<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22148.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">adts_write_packet</name><parameter_list pos:start="1:29" pos:end="1:63">(<parameter pos:start="1:30" pos:end="1:47"><decl pos:start="1:30" pos:end="1:47"><type pos:start="1:30" pos:end="1:47"><name pos:start="1:30" pos:end="1:44">AVFormatContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">s</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:62"><decl pos:start="1:50" pos:end="1:62"><type pos:start="1:50" pos:end="1:62"><name pos:start="1:50" pos:end="1:57">AVPacket</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:13">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">ADTSContext</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:21">adts</name> <init pos:start="5:23" pos:end="5:36">= <expr pos:start="5:25" pos:end="5:36"><name pos:start="5:25" pos:end="5:36"><name pos:start="5:25" pos:end="5:25">s</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">AVIOContext</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:19">pb</name> <init pos:start="7:21" pos:end="7:27">= <expr pos:start="7:23" pos:end="7:27"><name pos:start="7:23" pos:end="7:27"><name pos:start="7:23" pos:end="7:23">s</name><operator pos:start="7:24" pos:end="7:25">-&gt;</operator><name pos:start="7:26" pos:end="7:27">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:33"><name pos:start="9:13" pos:end="9:15">buf</name><index pos:start="9:16" pos:end="9:33">[<expr pos:start="9:17" pos:end="9:32"><name pos:start="9:17" pos:end="9:32">ADTS_HEADER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="15:17"><if pos:start="13:5" pos:end="15:17">if <condition pos:start="13:8" pos:end="13:19">(<expr pos:start="13:9" pos:end="13:18"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:18"><name pos:start="13:10" pos:end="13:12">pkt</name><operator pos:start="13:13" pos:end="13:14">-&gt;</operator><name pos:start="13:15" pos:end="13:18">size</name></name></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:17"><block_content pos:start="15:9" pos:end="15:17">

        <return pos:start="15:9" pos:end="15:17">return <expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="17:5" pos:end="31:5"><if pos:start="17:5" pos:end="31:5">if <condition pos:start="17:8" pos:end="17:25">(<expr pos:start="17:9" pos:end="17:24"><name pos:start="17:9" pos:end="17:24"><name pos:start="17:9" pos:end="17:12">adts</name><operator pos:start="17:13" pos:end="17:14">-&gt;</operator><name pos:start="17:15" pos:end="17:24">write_adts</name></name></expr>)</condition> <block pos:start="17:27" pos:end="31:5">{<block_content pos:start="19:9" pos:end="29:9">

        <expr_stmt pos:start="19:9" pos:end="19:73"><expr pos:start="19:9" pos:end="19:72"><call pos:start="19:9" pos:end="19:72"><name pos:start="19:9" pos:end="19:34">ff_adts_write_frame_header</name><argument_list pos:start="19:35" pos:end="19:72">(<argument pos:start="19:36" pos:end="19:39"><expr pos:start="19:36" pos:end="19:39"><name pos:start="19:36" pos:end="19:39">adts</name></expr></argument>, <argument pos:start="19:42" pos:end="19:44"><expr pos:start="19:42" pos:end="19:44"><name pos:start="19:42" pos:end="19:44">buf</name></expr></argument>, <argument pos:start="19:47" pos:end="19:55"><expr pos:start="19:47" pos:end="19:55"><name pos:start="19:47" pos:end="19:55"><name pos:start="19:47" pos:end="19:49">pkt</name><operator pos:start="19:50" pos:end="19:51">-&gt;</operator><name pos:start="19:52" pos:end="19:55">size</name></name></expr></argument>, <argument pos:start="19:58" pos:end="19:71"><expr pos:start="19:58" pos:end="19:71"><name pos:start="19:58" pos:end="19:71"><name pos:start="19:58" pos:end="19:61">adts</name><operator pos:start="19:62" pos:end="19:63">-&gt;</operator><name pos:start="19:64" pos:end="19:71">pce_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:46"><expr pos:start="21:9" pos:end="21:45"><call pos:start="21:9" pos:end="21:45"><name pos:start="21:9" pos:end="21:18">avio_write</name><argument_list pos:start="21:19" pos:end="21:45">(<argument pos:start="21:20" pos:end="21:21"><expr pos:start="21:20" pos:end="21:21"><name pos:start="21:20" pos:end="21:21">pb</name></expr></argument>, <argument pos:start="21:24" pos:end="21:26"><expr pos:start="21:24" pos:end="21:26"><name pos:start="21:24" pos:end="21:26">buf</name></expr></argument>, <argument pos:start="21:29" pos:end="21:44"><expr pos:start="21:29" pos:end="21:44"><name pos:start="21:29" pos:end="21:44">ADTS_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="29:9"><if pos:start="23:9" pos:end="29:9">if <condition pos:start="23:12" pos:end="23:27">(<expr pos:start="23:13" pos:end="23:26"><name pos:start="23:13" pos:end="23:26"><name pos:start="23:13" pos:end="23:16">adts</name><operator pos:start="23:17" pos:end="23:18">-&gt;</operator><name pos:start="23:19" pos:end="23:26">pce_size</name></name></expr>)</condition> <block pos:start="23:29" pos:end="29:9">{<block_content pos:start="25:13" pos:end="27:31">

            <expr_stmt pos:start="25:13" pos:end="25:59"><expr pos:start="25:13" pos:end="25:58"><call pos:start="25:13" pos:end="25:58"><name pos:start="25:13" pos:end="25:22">avio_write</name><argument_list pos:start="25:23" pos:end="25:58">(<argument pos:start="25:24" pos:end="25:25"><expr pos:start="25:24" pos:end="25:25"><name pos:start="25:24" pos:end="25:25">pb</name></expr></argument>, <argument pos:start="25:28" pos:end="25:41"><expr pos:start="25:28" pos:end="25:41"><name pos:start="25:28" pos:end="25:41"><name pos:start="25:28" pos:end="25:31">adts</name><operator pos:start="25:32" pos:end="25:33">-&gt;</operator><name pos:start="25:34" pos:end="25:41">pce_data</name></name></expr></argument>, <argument pos:start="25:44" pos:end="25:57"><expr pos:start="25:44" pos:end="25:57"><name pos:start="25:44" pos:end="25:57"><name pos:start="25:44" pos:end="25:47">adts</name><operator pos:start="25:48" pos:end="25:49">-&gt;</operator><name pos:start="25:50" pos:end="25:57">pce_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:31"><expr pos:start="27:13" pos:end="27:30"><name pos:start="27:13" pos:end="27:26"><name pos:start="27:13" pos:end="27:16">adts</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:26">pce_size</name></name> <operator pos:start="27:28" pos:end="27:28">=</operator> <literal type="number" pos:start="27:30" pos:end="27:30">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:41"><expr pos:start="33:5" pos:end="33:40"><call pos:start="33:5" pos:end="33:40"><name pos:start="33:5" pos:end="33:14">avio_write</name><argument_list pos:start="33:15" pos:end="33:40">(<argument pos:start="33:16" pos:end="33:17"><expr pos:start="33:16" pos:end="33:17"><name pos:start="33:16" pos:end="33:17">pb</name></expr></argument>, <argument pos:start="33:20" pos:end="33:28"><expr pos:start="33:20" pos:end="33:28"><name pos:start="33:20" pos:end="33:28"><name pos:start="33:20" pos:end="33:22">pkt</name><operator pos:start="33:23" pos:end="33:24">-&gt;</operator><name pos:start="33:25" pos:end="33:28">data</name></name></expr></argument>, <argument pos:start="33:31" pos:end="33:39"><expr pos:start="33:31" pos:end="33:39"><name pos:start="33:31" pos:end="33:39"><name pos:start="33:31" pos:end="33:33">pkt</name><operator pos:start="33:34" pos:end="33:35">-&gt;</operator><name pos:start="33:36" pos:end="33:39">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:19"><expr pos:start="35:5" pos:end="35:18"><call pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:14">avio_flush</name><argument_list pos:start="35:15" pos:end="35:18">(<argument pos:start="35:16" pos:end="35:17"><expr pos:start="35:16" pos:end="35:17"><name pos:start="35:16" pos:end="35:17">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="39:5" pos:end="39:13">return <expr pos:start="39:12" pos:end="39:12"><literal type="number" pos:start="39:12" pos:end="39:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
