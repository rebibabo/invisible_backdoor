<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12536.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">do_flush_queued_data</name><parameter_list pos:start="1:33" pos:end="3:52">(<parameter pos:start="1:34" pos:end="1:55"><decl pos:start="1:34" pos:end="1:55"><type pos:start="1:34" pos:end="1:55"><name pos:start="1:34" pos:end="1:49">VirtIOSerialPort</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:55">port</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:70"><decl pos:start="1:58" pos:end="1:70"><type pos:start="1:58" pos:end="1:70"><name pos:start="1:58" pos:end="1:66">VirtQueue</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:70">vq</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:51"><decl pos:start="3:34" pos:end="3:51"><type pos:start="3:34" pos:end="3:51"><name pos:start="3:34" pos:end="3:45">VirtIODevice</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:51">vdev</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="95:1">{<block_content pos:start="7:5" pos:end="93:28">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:27"><name pos:start="7:5" pos:end="7:25">VirtIOSerialPortClass</name> <modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:30">vsc</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:17"><expr pos:start="11:5" pos:end="11:16"><call pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:10">assert</name><argument_list pos:start="11:11" pos:end="11:16">(<argument pos:start="11:12" pos:end="11:15"><expr pos:start="11:12" pos:end="11:15"><name pos:start="11:12" pos:end="11:15">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:35"><expr pos:start="13:5" pos:end="13:34"><call pos:start="13:5" pos:end="13:34"><name pos:start="13:5" pos:end="13:10">assert</name><argument_list pos:start="13:11" pos:end="13:34">(<argument pos:start="13:12" pos:end="13:33"><expr pos:start="13:12" pos:end="13:33"><call pos:start="13:12" pos:end="13:33"><name pos:start="13:12" pos:end="13:29">virtio_queue_ready</name><argument_list pos:start="13:30" pos:end="13:33">(<argument pos:start="13:31" pos:end="13:32"><expr pos:start="13:31" pos:end="13:32"><name pos:start="13:31" pos:end="13:32">vq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:45"><expr pos:start="17:5" pos:end="17:44"><name pos:start="17:5" pos:end="17:7">vsc</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:44"><name pos:start="17:11" pos:end="17:38">VIRTIO_SERIAL_PORT_GET_CLASS</name><argument_list pos:start="17:39" pos:end="17:44">(<argument pos:start="17:40" pos:end="17:43"><expr pos:start="17:40" pos:end="17:43"><name pos:start="17:40" pos:end="17:43">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="21:5" pos:end="91:5">while <condition pos:start="21:11" pos:end="21:28">(<expr pos:start="21:12" pos:end="21:27"><operator pos:start="21:12" pos:end="21:12">!</operator><name pos:start="21:13" pos:end="21:27"><name pos:start="21:13" pos:end="21:16">port</name><operator pos:start="21:17" pos:end="21:18">-&gt;</operator><name pos:start="21:19" pos:end="21:27">throttled</name></name></expr>)</condition> <block pos:start="21:30" pos:end="91:5">{<block_content pos:start="23:9" pos:end="89:31">

        <decl_stmt pos:start="23:9" pos:end="23:23"><decl pos:start="23:9" pos:end="23:22"><type pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:16">unsigned</name> <name pos:start="23:18" pos:end="23:20">int</name></type> <name pos:start="23:22" pos:end="23:22">i</name></decl>;</decl_stmt>



        <comment type="block" pos:start="27:9" pos:end="27:76">/* Pop an elem only if we haven't left off a previous one mid-way */</comment>

        <if_stmt pos:start="29:9" pos:end="41:9"><if pos:start="29:9" pos:end="41:9">if <condition pos:start="29:12" pos:end="29:32">(<expr pos:start="29:13" pos:end="29:31"><operator pos:start="29:13" pos:end="29:13">!</operator><name pos:start="29:14" pos:end="29:31"><name pos:start="29:14" pos:end="29:17">port</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:23">elem</name><operator pos:start="29:24" pos:end="29:24">.</operator><name pos:start="29:25" pos:end="29:31">out_num</name></name></expr>)</condition> <block pos:start="29:34" pos:end="41:9">{<block_content pos:start="31:13" pos:end="39:33">

            <if_stmt pos:start="31:13" pos:end="35:13"><if pos:start="31:13" pos:end="35:13">if <condition pos:start="31:16" pos:end="31:48">(<expr pos:start="31:17" pos:end="31:47"><operator pos:start="31:17" pos:end="31:17">!</operator><call pos:start="31:18" pos:end="31:47"><name pos:start="31:18" pos:end="31:30">virtqueue_pop</name><argument_list pos:start="31:31" pos:end="31:47">(<argument pos:start="31:32" pos:end="31:33"><expr pos:start="31:32" pos:end="31:33"><name pos:start="31:32" pos:end="31:33">vq</name></expr></argument>, <argument pos:start="31:36" pos:end="31:46"><expr pos:start="31:36" pos:end="31:46"><operator pos:start="31:36" pos:end="31:36">&amp;</operator><name pos:start="31:37" pos:end="31:46"><name pos:start="31:37" pos:end="31:40">port</name><operator pos:start="31:41" pos:end="31:42">-&gt;</operator><name pos:start="31:43" pos:end="31:46">elem</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:50" pos:end="35:13">{<block_content pos:start="33:17" pos:end="33:22">

                <break pos:start="33:17" pos:end="33:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:30"><expr pos:start="37:13" pos:end="37:29"><name pos:start="37:13" pos:end="37:25"><name pos:start="37:13" pos:end="37:16">port</name><operator pos:start="37:17" pos:end="37:18">-&gt;</operator><name pos:start="37:19" pos:end="37:25">iov_idx</name></name> <operator pos:start="37:27" pos:end="37:27">=</operator> <literal type="number" pos:start="37:29" pos:end="37:29">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:33"><expr pos:start="39:13" pos:end="39:32"><name pos:start="39:13" pos:end="39:28"><name pos:start="39:13" pos:end="39:16">port</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:28">iov_offset</name></name> <operator pos:start="39:30" pos:end="39:30">=</operator> <literal type="number" pos:start="39:32" pos:end="39:32">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="45:9" pos:end="79:9">for <control pos:start="45:13" pos:end="45:60">(<init pos:start="45:14" pos:end="45:31"><expr pos:start="45:14" pos:end="45:30"><name pos:start="45:14" pos:end="45:14">i</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <name pos:start="45:18" pos:end="45:30"><name pos:start="45:18" pos:end="45:21">port</name><operator pos:start="45:22" pos:end="45:23">-&gt;</operator><name pos:start="45:24" pos:end="45:30">iov_idx</name></name></expr>;</init> <condition pos:start="45:33" pos:end="45:55"><expr pos:start="45:33" pos:end="45:54"><name pos:start="45:33" pos:end="45:33">i</name> <operator pos:start="45:35" pos:end="45:35">&lt;</operator> <name pos:start="45:37" pos:end="45:54"><name pos:start="45:37" pos:end="45:40">port</name><operator pos:start="45:41" pos:end="45:42">-&gt;</operator><name pos:start="45:43" pos:end="45:46">elem</name><operator pos:start="45:47" pos:end="45:47">.</operator><name pos:start="45:48" pos:end="45:54">out_num</name></name></expr>;</condition> <incr pos:start="45:57" pos:end="45:59"><expr pos:start="45:57" pos:end="45:59"><name pos:start="45:57" pos:end="45:57">i</name><operator pos:start="45:58" pos:end="45:59">++</operator></expr></incr>)</control> <block pos:start="45:62" pos:end="79:9">{<block_content pos:start="47:13" pos:end="77:33">

            <decl_stmt pos:start="47:13" pos:end="47:28"><decl pos:start="47:13" pos:end="47:27"><type pos:start="47:13" pos:end="47:18"><name pos:start="47:13" pos:end="47:18">size_t</name></type> <name pos:start="47:20" pos:end="47:27">buf_size</name></decl>;</decl_stmt>

            <decl_stmt pos:start="49:13" pos:end="49:24"><decl pos:start="49:13" pos:end="49:23"><type pos:start="49:13" pos:end="49:19"><name pos:start="49:13" pos:end="49:19">ssize_t</name></type> <name pos:start="49:21" pos:end="49:23">ret</name></decl>;</decl_stmt>



            <expr_stmt pos:start="53:13" pos:end="53:71"><expr pos:start="53:13" pos:end="53:70"><name pos:start="53:13" pos:end="53:20">buf_size</name> <operator pos:start="53:22" pos:end="53:22">=</operator> <name pos:start="53:24" pos:end="53:43"><name pos:start="53:24" pos:end="53:27">port</name><operator pos:start="53:28" pos:end="53:29">-&gt;</operator><name pos:start="53:30" pos:end="53:33">elem</name><operator pos:start="53:34" pos:end="53:34">.</operator><name pos:start="53:35" pos:end="53:40">out_sg</name><index pos:start="53:41" pos:end="53:43">[<expr pos:start="53:42" pos:end="53:42"><name pos:start="53:42" pos:end="53:42">i</name></expr>]</index></name><operator pos:start="53:44" pos:end="53:44">.</operator><name pos:start="53:45" pos:end="53:51">iov_len</name> <operator pos:start="53:53" pos:end="53:53">-</operator> <name pos:start="53:55" pos:end="53:70"><name pos:start="53:55" pos:end="53:58">port</name><operator pos:start="53:59" pos:end="53:60">-&gt;</operator><name pos:start="53:61" pos:end="53:70">iov_offset</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="61:44"><expr pos:start="55:13" pos:end="61:43"><name pos:start="55:13" pos:end="55:15">ret</name> <operator pos:start="55:17" pos:end="55:17">=</operator> <call pos:start="55:19" pos:end="61:43"><name pos:start="55:19" pos:end="55:32"><name pos:start="55:19" pos:end="55:21">vsc</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:32">have_data</name></name><argument_list pos:start="55:33" pos:end="61:43">(<argument pos:start="55:34" pos:end="55:37"><expr pos:start="55:34" pos:end="55:37"><name pos:start="55:34" pos:end="55:37">port</name></expr></argument>,

                                  <argument pos:start="57:35" pos:end="59:52"><expr pos:start="57:35" pos:end="59:52"><name pos:start="57:35" pos:end="57:54"><name pos:start="57:35" pos:end="57:38">port</name><operator pos:start="57:39" pos:end="57:40">-&gt;</operator><name pos:start="57:41" pos:end="57:44">elem</name><operator pos:start="57:45" pos:end="57:45">.</operator><name pos:start="57:46" pos:end="57:51">out_sg</name><index pos:start="57:52" pos:end="57:54">[<expr pos:start="57:53" pos:end="57:53"><name pos:start="57:53" pos:end="57:53">i</name></expr>]</index></name><operator pos:start="57:55" pos:end="57:55">.</operator><name pos:start="57:56" pos:end="57:63">iov_base</name>

                                  <operator pos:start="59:35" pos:end="59:35">+</operator> <name pos:start="59:37" pos:end="59:52"><name pos:start="59:37" pos:end="59:40">port</name><operator pos:start="59:41" pos:end="59:42">-&gt;</operator><name pos:start="59:43" pos:end="59:52">iov_offset</name></name></expr></argument>,

                                  <argument pos:start="61:35" pos:end="61:42"><expr pos:start="61:35" pos:end="61:42"><name pos:start="61:35" pos:end="61:42">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="75:13"><if pos:start="63:13" pos:end="75:13">if <condition pos:start="63:16" pos:end="63:32">(<expr pos:start="63:17" pos:end="63:31"><name pos:start="63:17" pos:end="63:31"><name pos:start="63:17" pos:end="63:20">port</name><operator pos:start="63:21" pos:end="63:22">-&gt;</operator><name pos:start="63:23" pos:end="63:31">throttled</name></name></expr>)</condition> <block pos:start="63:34" pos:end="75:13">{<block_content pos:start="65:17" pos:end="73:22">

                <expr_stmt pos:start="65:17" pos:end="65:34"><expr pos:start="65:17" pos:end="65:33"><name pos:start="65:17" pos:end="65:29"><name pos:start="65:17" pos:end="65:20">port</name><operator pos:start="65:21" pos:end="65:22">-&gt;</operator><name pos:start="65:23" pos:end="65:29">iov_idx</name></name> <operator pos:start="65:31" pos:end="65:31">=</operator> <name pos:start="65:33" pos:end="65:33">i</name></expr>;</expr_stmt>

                <if_stmt pos:start="67:17" pos:end="71:17"><if pos:start="67:17" pos:end="71:17">if <condition pos:start="67:20" pos:end="67:28">(<expr pos:start="67:21" pos:end="67:27"><name pos:start="67:21" pos:end="67:23">ret</name> <operator pos:start="67:25" pos:end="67:25">&gt;</operator> <literal type="number" pos:start="67:27" pos:end="67:27">0</literal></expr>)</condition> <block pos:start="67:30" pos:end="71:17">{<block_content pos:start="69:21" pos:end="69:44">

                    <expr_stmt pos:start="69:21" pos:end="69:44"><expr pos:start="69:21" pos:end="69:43"><name pos:start="69:21" pos:end="69:36"><name pos:start="69:21" pos:end="69:24">port</name><operator pos:start="69:25" pos:end="69:26">-&gt;</operator><name pos:start="69:27" pos:end="69:36">iov_offset</name></name> <operator pos:start="69:38" pos:end="69:39">+=</operator> <name pos:start="69:41" pos:end="69:43">ret</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="73:17" pos:end="73:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:33"><expr pos:start="77:13" pos:end="77:32"><name pos:start="77:13" pos:end="77:28"><name pos:start="77:13" pos:end="77:16">port</name><operator pos:start="77:17" pos:end="77:18">-&gt;</operator><name pos:start="77:19" pos:end="77:28">iov_offset</name></name> <operator pos:start="77:30" pos:end="77:30">=</operator> <literal type="number" pos:start="77:32" pos:end="77:32">0</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="81:9" pos:end="85:9"><if pos:start="81:9" pos:end="85:9">if <condition pos:start="81:12" pos:end="81:28">(<expr pos:start="81:13" pos:end="81:27"><name pos:start="81:13" pos:end="81:27"><name pos:start="81:13" pos:end="81:16">port</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:27">throttled</name></name></expr>)</condition> <block pos:start="81:30" pos:end="85:9">{<block_content pos:start="83:13" pos:end="83:18">

            <break pos:start="83:13" pos:end="83:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:43"><expr pos:start="87:9" pos:end="87:42"><call pos:start="87:9" pos:end="87:42"><name pos:start="87:9" pos:end="87:22">virtqueue_push</name><argument_list pos:start="87:23" pos:end="87:42">(<argument pos:start="87:24" pos:end="87:25"><expr pos:start="87:24" pos:end="87:25"><name pos:start="87:24" pos:end="87:25">vq</name></expr></argument>, <argument pos:start="87:28" pos:end="87:38"><expr pos:start="87:28" pos:end="87:38"><operator pos:start="87:28" pos:end="87:28">&amp;</operator><name pos:start="87:29" pos:end="87:38"><name pos:start="87:29" pos:end="87:32">port</name><operator pos:start="87:33" pos:end="87:34">-&gt;</operator><name pos:start="87:35" pos:end="87:38">elem</name></name></expr></argument>, <argument pos:start="87:41" pos:end="87:41"><expr pos:start="87:41" pos:end="87:41"><literal type="number" pos:start="87:41" pos:end="87:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:31"><expr pos:start="89:9" pos:end="89:30"><name pos:start="89:9" pos:end="89:26"><name pos:start="89:9" pos:end="89:12">port</name><operator pos:start="89:13" pos:end="89:14">-&gt;</operator><name pos:start="89:15" pos:end="89:18">elem</name><operator pos:start="89:19" pos:end="89:19">.</operator><name pos:start="89:20" pos:end="89:26">out_num</name></name> <operator pos:start="89:28" pos:end="89:28">=</operator> <literal type="number" pos:start="89:30" pos:end="89:30">0</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="93:5" pos:end="93:28"><expr pos:start="93:5" pos:end="93:27"><call pos:start="93:5" pos:end="93:27"><name pos:start="93:5" pos:end="93:17">virtio_notify</name><argument_list pos:start="93:18" pos:end="93:27">(<argument pos:start="93:19" pos:end="93:22"><expr pos:start="93:19" pos:end="93:22"><name pos:start="93:19" pos:end="93:22">vdev</name></expr></argument>, <argument pos:start="93:25" pos:end="93:26"><expr pos:start="93:25" pos:end="93:26"><name pos:start="93:25" pos:end="93:26">vq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
