<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19141.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:39">xen_pt_exp_rom_bar_reg_write</name><parameter_list pos:start="1:40" pos:end="5:80">(<parameter pos:start="1:41" pos:end="1:65"><decl pos:start="1:41" pos:end="1:65"><type pos:start="1:41" pos:end="1:65"><name pos:start="1:41" pos:end="1:62">XenPCIPassthroughState</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:65">s</name></decl></parameter>,

                                        <parameter pos:start="3:41" pos:end="3:59"><decl pos:start="3:41" pos:end="3:59"><type pos:start="3:41" pos:end="3:59"><name pos:start="3:41" pos:end="3:48">XenPTReg</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:59">cfg_entry</name></decl></parameter>, <parameter pos:start="3:62" pos:end="3:74"><decl pos:start="3:62" pos:end="3:74"><type pos:start="3:62" pos:end="3:74"><name pos:start="3:62" pos:end="3:69">uint32_t</name> <modifier pos:start="3:71" pos:end="3:71">*</modifier></type><name pos:start="3:72" pos:end="3:74">val</name></decl></parameter>,

                                        <parameter pos:start="5:41" pos:end="5:58"><decl pos:start="5:41" pos:end="5:58"><type pos:start="5:41" pos:end="5:58"><name pos:start="5:41" pos:end="5:48">uint32_t</name></type> <name pos:start="5:50" pos:end="5:58">dev_value</name></decl></parameter>, <parameter pos:start="5:61" pos:end="5:79"><decl pos:start="5:61" pos:end="5:79"><type pos:start="5:61" pos:end="5:79"><name pos:start="5:61" pos:end="5:68">uint32_t</name></type> <name pos:start="5:70" pos:end="5:79">valid_mask</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="57:1">{<block_content pos:start="9:5" pos:end="55:13">

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">XenPTRegInfo</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">reg</name> <init pos:start="9:23" pos:end="9:38">= <expr pos:start="9:25" pos:end="9:38"><name pos:start="9:25" pos:end="9:38"><name pos:start="9:25" pos:end="9:33">cfg_entry</name><operator pos:start="9:34" pos:end="9:35">-&gt;</operator><name pos:start="9:36" pos:end="9:38">reg</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">XenPTRegion</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:21">base</name> <init pos:start="11:23" pos:end="11:28">= <expr pos:start="11:25" pos:end="11:28"><name pos:start="11:25" pos:end="11:28">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:40"><decl pos:start="13:5" pos:end="13:39"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:13">PCIDevice</name> <modifier pos:start="13:15" pos:end="13:15">*</modifier></type><name pos:start="13:16" pos:end="13:16">d</name> <init pos:start="13:18" pos:end="13:39">= <expr pos:start="13:20" pos:end="13:39"><operator pos:start="13:20" pos:end="13:20">(</operator><name pos:start="13:21" pos:end="13:29">PCIDevice</name> <operator pos:start="13:31" pos:end="13:31">*</operator><operator pos:start="13:32" pos:end="13:32">)</operator><operator pos:start="13:33" pos:end="13:33">&amp;</operator><name pos:start="13:34" pos:end="13:39"><name pos:start="13:34" pos:end="13:34">s</name><operator pos:start="13:35" pos:end="13:36">-&gt;</operator><name pos:start="13:37" pos:end="13:39">dev</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:31"><decl pos:start="15:5" pos:end="15:30"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:26">writable_mask</name> <init pos:start="15:28" pos:end="15:30">= <expr pos:start="15:30" pos:end="15:30"><literal type="number" pos:start="15:30" pos:end="15:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:73"><decl pos:start="17:5" pos:end="17:72"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:29">throughable_mask</name> <init pos:start="17:31" pos:end="17:72">= <expr pos:start="17:33" pos:end="17:72"><call pos:start="17:33" pos:end="17:72"><name pos:start="17:33" pos:end="17:52">get_throughable_mask</name><argument_list pos:start="17:53" pos:end="17:72">(<argument pos:start="17:54" pos:end="17:54"><expr pos:start="17:54" pos:end="17:54"><name pos:start="17:54" pos:end="17:54">s</name></expr></argument>, <argument pos:start="17:57" pos:end="17:59"><expr pos:start="17:57" pos:end="17:59"><name pos:start="17:57" pos:end="17:59">reg</name></expr></argument>, <argument pos:start="17:62" pos:end="17:71"><expr pos:start="17:62" pos:end="17:71"><name pos:start="17:62" pos:end="17:71">valid_mask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:24"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">pcibus_t</name></type> <name pos:start="19:14" pos:end="19:19">r_size</name> <init pos:start="19:21" pos:end="19:23">= <expr pos:start="19:23" pos:end="19:23"><literal type="number" pos:start="19:23" pos:end="19:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:29"><decl pos:start="21:5" pos:end="21:28"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint32_t</name></type> <name pos:start="21:14" pos:end="21:24">bar_ro_mask</name> <init pos:start="21:26" pos:end="21:28">= <expr pos:start="21:28" pos:end="21:28"><literal type="number" pos:start="21:28" pos:end="21:28">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:46"><expr pos:start="25:5" pos:end="25:45"><name pos:start="25:5" pos:end="25:10">r_size</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <name pos:start="25:14" pos:end="25:40"><name pos:start="25:14" pos:end="25:14">d</name><operator pos:start="25:15" pos:end="25:16">-&gt;</operator><name pos:start="25:17" pos:end="25:26">io_regions</name><index pos:start="25:27" pos:end="25:40">[<expr pos:start="25:28" pos:end="25:39"><name pos:start="25:28" pos:end="25:39">PCI_ROM_SLOT</name></expr>]</index></name><operator pos:start="25:41" pos:end="25:41">.</operator><name pos:start="25:42" pos:end="25:45">size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:35"><expr pos:start="27:5" pos:end="27:34"><name pos:start="27:5" pos:end="27:8">base</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <operator pos:start="27:12" pos:end="27:12">&amp;</operator><name pos:start="27:13" pos:end="27:34"><name pos:start="27:13" pos:end="27:13">s</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:20">bases</name><index pos:start="27:21" pos:end="27:34">[<expr pos:start="27:22" pos:end="27:33"><name pos:start="27:22" pos:end="27:33">PCI_ROM_SLOT</name></expr>]</index></name></expr>;</expr_stmt>

    <comment type="block" pos:start="29:5" pos:end="29:41">/* align memory type resource size */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:58"><expr pos:start="31:5" pos:end="31:57"><name pos:start="31:5" pos:end="31:10">r_size</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <call pos:start="31:14" pos:end="31:57"><name pos:start="31:14" pos:end="31:33">xen_pt_get_emul_size</name><argument_list pos:start="31:34" pos:end="31:57">(<argument pos:start="31:35" pos:end="31:48"><expr pos:start="31:35" pos:end="31:48"><name pos:start="31:35" pos:end="31:48"><name pos:start="31:35" pos:end="31:38">base</name><operator pos:start="31:39" pos:end="31:40">-&gt;</operator><name pos:start="31:41" pos:end="31:48">bar_flag</name></name></expr></argument>, <argument pos:start="31:51" pos:end="31:56"><expr pos:start="31:51" pos:end="31:56"><name pos:start="31:51" pos:end="31:56">r_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:45">/* set emulate mask and read-only mask */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:74"><expr pos:start="37:5" pos:end="37:73"><name pos:start="37:5" pos:end="37:15">bar_ro_mask</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <operator pos:start="37:19" pos:end="37:19">(</operator><name pos:start="37:20" pos:end="37:31"><name pos:start="37:20" pos:end="37:22">reg</name><operator pos:start="37:23" pos:end="37:24">-&gt;</operator><name pos:start="37:25" pos:end="37:31">ro_mask</name></name> <operator pos:start="37:33" pos:end="37:33">|</operator> <operator pos:start="37:35" pos:end="37:35">(</operator><name pos:start="37:36" pos:end="37:41">r_size</name> <operator pos:start="37:43" pos:end="37:43">-</operator> <literal type="number" pos:start="37:45" pos:end="37:45">1</literal><operator pos:start="37:46" pos:end="37:46">)</operator><operator pos:start="37:47" pos:end="37:47">)</operator> <operator pos:start="37:49" pos:end="37:49">&amp;</operator> <operator pos:start="37:51" pos:end="37:51">~</operator><name pos:start="37:52" pos:end="37:73">PCI_ROM_ADDRESS_ENABLE</name></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:33">/* modify emulate register */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:46"><expr pos:start="43:5" pos:end="43:45"><name pos:start="43:5" pos:end="43:17">writable_mask</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <operator pos:start="43:21" pos:end="43:21">~</operator><name pos:start="43:22" pos:end="43:32">bar_ro_mask</name> <operator pos:start="43:34" pos:end="43:34">&amp;</operator> <name pos:start="43:36" pos:end="43:45">valid_mask</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:79"><expr pos:start="45:5" pos:end="45:78"><name pos:start="45:5" pos:end="45:19"><name pos:start="45:5" pos:end="45:13">cfg_entry</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:19">data</name></name> <operator pos:start="45:21" pos:end="45:21">=</operator> <call pos:start="45:23" pos:end="45:78"><name pos:start="45:23" pos:end="45:40">XEN_PT_MERGE_VALUE</name><argument_list pos:start="45:41" pos:end="45:78">(<argument pos:start="45:42" pos:end="45:45"><expr pos:start="45:42" pos:end="45:45"><operator pos:start="45:42" pos:end="45:42">*</operator><name pos:start="45:43" pos:end="45:45">val</name></expr></argument>, <argument pos:start="45:48" pos:end="45:62"><expr pos:start="45:48" pos:end="45:62"><name pos:start="45:48" pos:end="45:62"><name pos:start="45:48" pos:end="45:56">cfg_entry</name><operator pos:start="45:57" pos:end="45:58">-&gt;</operator><name pos:start="45:59" pos:end="45:62">data</name></name></expr></argument>, <argument pos:start="45:65" pos:end="45:77"><expr pos:start="45:65" pos:end="45:77"><name pos:start="45:65" pos:end="45:77">writable_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:57">/* create value for writing to I/O device register */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:65"><expr pos:start="51:5" pos:end="51:64"><operator pos:start="51:5" pos:end="51:5">*</operator><name pos:start="51:6" pos:end="51:8">val</name> <operator pos:start="51:10" pos:end="51:10">=</operator> <call pos:start="51:12" pos:end="51:64"><name pos:start="51:12" pos:end="51:29">XEN_PT_MERGE_VALUE</name><argument_list pos:start="51:30" pos:end="51:64">(<argument pos:start="51:31" pos:end="51:34"><expr pos:start="51:31" pos:end="51:34"><operator pos:start="51:31" pos:end="51:31">*</operator><name pos:start="51:32" pos:end="51:34">val</name></expr></argument>, <argument pos:start="51:37" pos:end="51:45"><expr pos:start="51:37" pos:end="51:45"><name pos:start="51:37" pos:end="51:45">dev_value</name></expr></argument>, <argument pos:start="51:48" pos:end="51:63"><expr pos:start="51:48" pos:end="51:63"><name pos:start="51:48" pos:end="51:63">throughable_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="55:5" pos:end="55:13">return <expr pos:start="55:12" pos:end="55:12"><literal type="number" pos:start="55:12" pos:end="55:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
