<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17197.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:18"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:34">cpu_physical_memory_write_rom</name><parameter_list pos:start="1:35" pos:end="3:63">(<parameter pos:start="1:36" pos:end="1:58"><decl pos:start="1:36" pos:end="1:58"><type pos:start="1:36" pos:end="1:58"><name pos:start="1:36" pos:end="1:53">target_phys_addr_t</name></type> <name pos:start="1:55" pos:end="1:58">addr</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:53"><decl pos:start="3:36" pos:end="3:53"><type pos:start="3:36" pos:end="3:53"><specifier pos:start="3:36" pos:end="3:40">const</specifier> <name pos:start="3:42" pos:end="3:48">uint8_t</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:53">buf</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:62"><decl pos:start="3:56" pos:end="3:62"><type pos:start="3:56" pos:end="3:62"><name pos:start="3:56" pos:end="3:58">int</name></type> <name pos:start="3:60" pos:end="3:62">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="65:18">{<block_content pos:start="7:5" pos:end="65:18">

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">l</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:22">target_phys_addr_t</name></type> <name pos:start="11:24" pos:end="11:27">page</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:25"><name pos:start="13:5" pos:end="13:23">MemoryRegionSection</name> <modifier pos:start="13:25" pos:end="13:25">*</modifier></type><name pos:start="13:26" pos:end="13:32">section</name></decl>;</decl_stmt>



    <while pos:start="17:5" pos:end="65:18">while <condition pos:start="17:11" pos:end="17:19">(<expr pos:start="17:12" pos:end="17:18"><name pos:start="17:12" pos:end="17:14">len</name> <operator pos:start="17:16" pos:end="17:16">&gt;</operator> <literal type="number" pos:start="17:18" pos:end="17:18">0</literal></expr>)</condition> <block pos:start="17:21" pos:end="65:18">{<block_content pos:start="19:9" pos:end="65:18">

        <expr_stmt pos:start="19:9" pos:end="19:39"><expr pos:start="19:9" pos:end="19:38"><name pos:start="19:9" pos:end="19:12">page</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <name pos:start="19:16" pos:end="19:19">addr</name> <operator pos:start="19:21" pos:end="19:21">&amp;</operator> <name pos:start="19:23" pos:end="19:38">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:45"><expr pos:start="21:9" pos:end="21:44"><name pos:start="21:9" pos:end="21:9">l</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <operator pos:start="21:13" pos:end="21:13">(</operator><name pos:start="21:14" pos:end="21:17">page</name> <operator pos:start="21:19" pos:end="21:19">+</operator> <name pos:start="21:21" pos:end="21:36">TARGET_PAGE_SIZE</name><operator pos:start="21:37" pos:end="21:37">)</operator> <operator pos:start="21:39" pos:end="21:39">-</operator> <name pos:start="21:41" pos:end="21:44">addr</name></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="25:20"><if pos:start="23:9" pos:end="25:20">if <condition pos:start="23:12" pos:end="23:20">(<expr pos:start="23:13" pos:end="23:19"><name pos:start="23:13" pos:end="23:13">l</name> <operator pos:start="23:15" pos:end="23:15">&gt;</operator> <name pos:start="23:17" pos:end="23:19">len</name></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:20"><block_content pos:start="25:13" pos:end="25:20">

            <expr_stmt pos:start="25:13" pos:end="25:20"><expr pos:start="25:13" pos:end="25:19"><name pos:start="25:13" pos:end="25:13">l</name> <operator pos:start="25:15" pos:end="25:15">=</operator> <name pos:start="25:17" pos:end="25:19">len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:59"><expr pos:start="27:9" pos:end="27:58"><name pos:start="27:9" pos:end="27:15">section</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <call pos:start="27:19" pos:end="27:58"><name pos:start="27:19" pos:end="27:32">phys_page_find</name><argument_list pos:start="27:33" pos:end="27:58">(<argument pos:start="27:34" pos:end="27:57"><expr pos:start="27:34" pos:end="27:57"><name pos:start="27:34" pos:end="27:37">page</name> <operator pos:start="27:39" pos:end="27:40">&gt;&gt;</operator> <name pos:start="27:42" pos:end="27:57">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="31:9" pos:end="65:18"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="33:50">(<expr pos:start="31:13" pos:end="33:49"><operator pos:start="31:13" pos:end="31:13">!</operator><operator pos:start="31:14" pos:end="31:14">(</operator><call pos:start="31:15" pos:end="31:47"><name pos:start="31:15" pos:end="31:34">memory_region_is_ram</name><argument_list pos:start="31:35" pos:end="31:47">(<argument pos:start="31:36" pos:end="31:46"><expr pos:start="31:36" pos:end="31:46"><name pos:start="31:36" pos:end="31:46"><name pos:start="31:36" pos:end="31:42">section</name><operator pos:start="31:43" pos:end="31:44">-&gt;</operator><name pos:start="31:45" pos:end="31:46">mr</name></name></expr></argument>)</argument_list></call> <operator pos:start="31:49" pos:end="31:50">||</operator>

              <call pos:start="33:15" pos:end="33:48"><name pos:start="33:15" pos:end="33:35">memory_region_is_romd</name><argument_list pos:start="33:36" pos:end="33:48">(<argument pos:start="33:37" pos:end="33:47"><expr pos:start="33:37" pos:end="33:47"><name pos:start="33:37" pos:end="33:47"><name pos:start="33:37" pos:end="33:43">section</name><operator pos:start="33:44" pos:end="33:45">-&gt;</operator><name pos:start="33:46" pos:end="33:47">mr</name></name></expr></argument>)</argument_list></call><operator pos:start="33:49" pos:end="33:49">)</operator></expr>)</condition> <block pos:start="33:52" pos:end="37:9">{<block_content>

            <comment type="block" pos:start="35:13" pos:end="35:28">/* do nothing */</comment>

        </block_content>}</block></if> <else pos:start="37:11" pos:end="65:18">else <block pos:start="37:16" pos:end="65:18">{<block_content pos:start="39:13" pos:end="65:18">

            <decl_stmt pos:start="39:13" pos:end="39:32"><decl pos:start="39:13" pos:end="39:31"><type pos:start="39:13" pos:end="39:25"><name pos:start="39:13" pos:end="39:20">unsigned</name> <name pos:start="39:22" pos:end="39:25">long</name></type> <name pos:start="39:27" pos:end="39:31">addr1</name></decl>;</decl_stmt>

            <expr_stmt pos:start="41:13" pos:end="43:60"><expr pos:start="41:13" pos:end="43:59"><name pos:start="41:13" pos:end="41:17">addr1</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <call pos:start="41:21" pos:end="41:59"><name pos:start="41:21" pos:end="41:46">memory_region_get_ram_addr</name><argument_list pos:start="41:47" pos:end="41:59">(<argument pos:start="41:48" pos:end="41:58"><expr pos:start="41:48" pos:end="41:58"><name pos:start="41:48" pos:end="41:58"><name pos:start="41:48" pos:end="41:54">section</name><operator pos:start="41:55" pos:end="41:56">-&gt;</operator><name pos:start="41:57" pos:end="41:58">mr</name></name></expr></argument>)</argument_list></call>

                <operator pos:start="43:17" pos:end="43:17">+</operator> <call pos:start="43:19" pos:end="43:59"><name pos:start="43:19" pos:end="43:44">memory_region_section_addr</name><argument_list pos:start="43:45" pos:end="43:59">(<argument pos:start="43:46" pos:end="43:52"><expr pos:start="43:46" pos:end="43:52"><name pos:start="43:46" pos:end="43:52">section</name></expr></argument>, <argument pos:start="43:55" pos:end="43:58"><expr pos:start="43:55" pos:end="43:58"><name pos:start="43:55" pos:end="43:58">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="45:13" pos:end="45:30">/* ROM/RAM case */</comment>

            <expr_stmt pos:start="47:13" pos:end="47:42"><expr pos:start="47:13" pos:end="47:41"><name pos:start="47:13" pos:end="47:15">ptr</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <call pos:start="47:19" pos:end="47:41"><name pos:start="47:19" pos:end="47:34">qemu_get_ram_ptr</name><argument_list pos:start="47:35" pos:end="47:41">(<argument pos:start="47:36" pos:end="47:40"><expr pos:start="47:36" pos:end="47:40"><name pos:start="47:36" pos:end="47:40">addr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:32"><expr pos:start="49:13" pos:end="49:31"><call pos:start="49:13" pos:end="49:31"><name pos:start="49:13" pos:end="49:18">memcpy</name><argument_list pos:start="49:19" pos:end="49:31">(<argument pos:start="49:20" pos:end="49:22"><expr pos:start="49:20" pos:end="49:22"><name pos:start="49:20" pos:end="49:22">ptr</name></expr></argument>, <argument pos:start="49:25" pos:end="49:27"><expr pos:start="49:25" pos:end="49:27"><name pos:start="49:25" pos:end="49:27">buf</name></expr></argument>, <argument pos:start="49:30" pos:end="49:30"><expr pos:start="49:30" pos:end="49:30"><name pos:start="49:30" pos:end="49:30">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








            <expr_stmt pos:start="58:13" pos:end="58:34"><expr pos:start="58:13" pos:end="58:33"><call pos:start="58:13" pos:end="58:33"><name pos:start="58:13" pos:end="58:28">qemu_put_ram_ptr</name><argument_list pos:start="58:29" pos:end="58:33">(<argument pos:start="58:30" pos:end="58:32"><expr pos:start="58:30" pos:end="58:32"><name pos:start="58:30" pos:end="58:32">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <expr_stmt pos:start="61:9" pos:end="61:17"><expr pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:11">len</name> <operator pos:start="61:13" pos:end="61:14">-=</operator> <name pos:start="61:16" pos:end="61:16">l</name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:17"><expr pos:start="63:9" pos:end="63:16"><name pos:start="63:9" pos:end="63:11">buf</name> <operator pos:start="63:13" pos:end="63:14">+=</operator> <name pos:start="63:16" pos:end="63:16">l</name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:18"><expr pos:start="65:9" pos:end="65:17"><name pos:start="65:9" pos:end="65:12">addr</name> <operator pos:start="65:14" pos:end="65:15">+=</operator> <name pos:start="65:17" pos:end="65:17">l</name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></while></block_content></block></function>

</unit>
