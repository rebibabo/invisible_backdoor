<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10586.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:18"><name pos:start="1:1" pos:end="1:16">BlockDriverAIOCB</name> <modifier pos:start="1:18" pos:end="1:18">*</modifier></type><name pos:start="1:19" pos:end="1:31">bdrv_aio_read</name><parameter_list pos:start="1:32" pos:end="5:76">(<parameter pos:start="1:33" pos:end="1:52"><decl pos:start="1:33" pos:end="1:52"><type pos:start="1:33" pos:end="1:52"><name pos:start="1:33" pos:end="1:48">BlockDriverState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:52">bs</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:72"><decl pos:start="1:55" pos:end="1:72"><type pos:start="1:55" pos:end="1:72"><name pos:start="1:55" pos:end="1:61">int64_t</name></type> <name pos:start="1:63" pos:end="1:72">sector_num</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:44"><decl pos:start="3:33" pos:end="3:44"><type pos:start="3:33" pos:end="3:44"><name pos:start="3:33" pos:end="3:39">uint8_t</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:44">buf</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:60"><decl pos:start="3:47" pos:end="3:60"><type pos:start="3:47" pos:end="3:60"><name pos:start="3:47" pos:end="3:49">int</name></type> <name pos:start="3:51" pos:end="3:60">nb_sectors</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:61"><decl pos:start="5:33" pos:end="5:61"><type pos:start="5:33" pos:end="5:61"><name pos:start="5:33" pos:end="5:57">BlockDriverCompletionFunc</name> <modifier pos:start="5:59" pos:end="5:59">*</modifier></type><name pos:start="5:60" pos:end="5:61">cb</name></decl></parameter>, <parameter pos:start="5:64" pos:end="5:75"><decl pos:start="5:64" pos:end="5:75"><type pos:start="5:64" pos:end="5:75"><name pos:start="5:64" pos:end="5:67">void</name> <modifier pos:start="5:69" pos:end="5:69">*</modifier></type><name pos:start="5:70" pos:end="5:75">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="55:1">{<block_content pos:start="9:5" pos:end="53:15">

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">BlockDriver</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">drv</name> <init pos:start="9:22" pos:end="9:30">= <expr pos:start="9:24" pos:end="9:30"><name pos:start="9:24" pos:end="9:30"><name pos:start="9:24" pos:end="9:25">bs</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:30">drv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverAIOCB</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:25">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:20"><if pos:start="15:5" pos:end="17:20">if <condition pos:start="15:8" pos:end="15:13">(<expr pos:start="15:9" pos:end="15:12"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:12">drv</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:20"><block_content pos:start="17:9" pos:end="17:20">

        <return pos:start="17:9" pos:end="17:20">return <expr pos:start="17:16" pos:end="17:19"><name pos:start="17:16" pos:end="17:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:75">/* XXX: we assume that nb_sectors == 0 is suppored by the async read */</comment>

    <if_stmt pos:start="23:5" pos:end="33:5"><if pos:start="23:5" pos:end="33:5">if <condition pos:start="23:8" pos:end="23:69">(<expr pos:start="23:9" pos:end="23:68"><name pos:start="23:9" pos:end="23:18">sector_num</name> <operator pos:start="23:20" pos:end="23:21">==</operator> <literal type="number" pos:start="23:23" pos:end="23:23">0</literal> <operator pos:start="23:25" pos:end="23:26">&amp;&amp;</operator> <name pos:start="23:28" pos:end="23:50"><name pos:start="23:28" pos:end="23:29">bs</name><operator pos:start="23:30" pos:end="23:31">-&gt;</operator><name pos:start="23:32" pos:end="23:50">boot_sector_enabled</name></name> <operator pos:start="23:52" pos:end="23:53">&amp;&amp;</operator> <name pos:start="23:55" pos:end="23:64">nb_sectors</name> <operator pos:start="23:66" pos:end="23:66">&gt;</operator> <literal type="number" pos:start="23:68" pos:end="23:68">0</literal></expr>)</condition> <block pos:start="23:71" pos:end="33:5">{<block_content pos:start="25:9" pos:end="31:19">

        <expr_stmt pos:start="25:9" pos:end="25:47"><expr pos:start="25:9" pos:end="25:46"><call pos:start="25:9" pos:end="25:46"><name pos:start="25:9" pos:end="25:14">memcpy</name><argument_list pos:start="25:15" pos:end="25:46">(<argument pos:start="25:16" pos:end="25:18"><expr pos:start="25:16" pos:end="25:18"><name pos:start="25:16" pos:end="25:18">buf</name></expr></argument>, <argument pos:start="25:21" pos:end="25:40"><expr pos:start="25:21" pos:end="25:40"><name pos:start="25:21" pos:end="25:40"><name pos:start="25:21" pos:end="25:22">bs</name><operator pos:start="25:23" pos:end="25:24">-&gt;</operator><name pos:start="25:25" pos:end="25:40">boot_sector_data</name></name></expr></argument>, <argument pos:start="25:43" pos:end="25:45"><expr pos:start="25:43" pos:end="25:45"><literal type="number" pos:start="25:43" pos:end="25:45">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:21"><expr pos:start="27:9" pos:end="27:20"><name pos:start="27:9" pos:end="27:18">sector_num</name><operator pos:start="27:19" pos:end="27:20">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:21"><expr pos:start="29:9" pos:end="29:20"><name pos:start="29:9" pos:end="29:18">nb_sectors</name><operator pos:start="29:19" pos:end="29:20">--</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:19"><expr pos:start="31:9" pos:end="31:18"><name pos:start="31:9" pos:end="31:11">buf</name> <operator pos:start="31:13" pos:end="31:14">+=</operator> <literal type="number" pos:start="31:16" pos:end="31:18">512</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:74"><expr pos:start="37:5" pos:end="37:73"><name pos:start="37:5" pos:end="37:7">ret</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:73"><name pos:start="37:11" pos:end="37:28"><name pos:start="37:11" pos:end="37:13">drv</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:28">bdrv_aio_read</name></name><argument_list pos:start="37:29" pos:end="37:73">(<argument pos:start="37:30" pos:end="37:31"><expr pos:start="37:30" pos:end="37:31"><name pos:start="37:30" pos:end="37:31">bs</name></expr></argument>, <argument pos:start="37:34" pos:end="37:43"><expr pos:start="37:34" pos:end="37:43"><name pos:start="37:34" pos:end="37:43">sector_num</name></expr></argument>, <argument pos:start="37:46" pos:end="37:48"><expr pos:start="37:46" pos:end="37:48"><name pos:start="37:46" pos:end="37:48">buf</name></expr></argument>, <argument pos:start="37:51" pos:end="37:60"><expr pos:start="37:51" pos:end="37:60"><name pos:start="37:51" pos:end="37:60">nb_sectors</name></expr></argument>, <argument pos:start="37:63" pos:end="37:64"><expr pos:start="37:63" pos:end="37:64"><name pos:start="37:63" pos:end="37:64">cb</name></expr></argument>, <argument pos:start="37:67" pos:end="37:72"><expr pos:start="37:67" pos:end="37:72"><name pos:start="37:67" pos:end="37:72">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="49:5"><if pos:start="41:5" pos:end="49:5">if <condition pos:start="41:8" pos:end="41:12">(<expr pos:start="41:9" pos:end="41:11"><name pos:start="41:9" pos:end="41:11">ret</name></expr>)</condition> <block pos:start="41:14" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:22">

	<comment type="block" pos:start="43:9" pos:end="43:77">/* Update stats even though technically transfer has not happened. */</comment>

	<expr_stmt pos:start="45:9" pos:end="45:60"><expr pos:start="45:9" pos:end="45:59"><name pos:start="45:9" pos:end="45:20"><name pos:start="45:9" pos:end="45:10">bs</name><operator pos:start="45:11" pos:end="45:12">-&gt;</operator><name pos:start="45:13" pos:end="45:20">rd_bytes</name></name> <operator pos:start="45:22" pos:end="45:23">+=</operator> <operator pos:start="45:25" pos:end="45:25">(</operator><name pos:start="45:26" pos:end="45:33">unsigned</name><operator pos:start="45:34" pos:end="45:34">)</operator> <name pos:start="45:36" pos:end="45:45">nb_sectors</name> <operator pos:start="45:47" pos:end="45:47">*</operator> <name pos:start="45:49" pos:end="45:59">SECTOR_SIZE</name></expr>;</expr_stmt>

	<expr_stmt pos:start="47:9" pos:end="47:22"><expr pos:start="47:9" pos:end="47:21"><name pos:start="47:9" pos:end="47:18"><name pos:start="47:9" pos:end="47:10">bs</name><operator pos:start="47:11" pos:end="47:12">-&gt;</operator><name pos:start="47:13" pos:end="47:18">rd_ops</name></name> <operator pos:start="47:20" pos:end="47:21">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="53:5" pos:end="53:15">return <expr pos:start="53:12" pos:end="53:14"><name pos:start="53:12" pos:end="53:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
