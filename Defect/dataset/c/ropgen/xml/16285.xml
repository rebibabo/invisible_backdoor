<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16285.c" pos:tabs="8"><function pos:start="1:1" pos:end="33:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">tcg_commit</name><parameter_list pos:start="1:23" pos:end="1:48">(<parameter pos:start="1:24" pos:end="1:47"><decl pos:start="1:24" pos:end="1:47"><type pos:start="1:24" pos:end="1:39"><name pos:start="1:24" pos:end="1:37">MemoryListener</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:47">listener</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="33:1">{<block_content pos:start="5:5" pos:end="31:29">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">CPUAddressSpace</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:26">cpuas</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:26"><name pos:start="7:5" pos:end="7:24">AddressSpaceDispatch</name> <modifier pos:start="7:26" pos:end="7:26">*</modifier></type><name pos:start="7:27" pos:end="7:27">d</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="13:36">/* since each CPU stores ram addresses in its TLB cache, we must

       reset the modified entries */</comment>

    <expr_stmt pos:start="15:5" pos:end="15:69"><expr pos:start="15:5" pos:end="15:68"><name pos:start="15:5" pos:end="15:9">cpuas</name> <operator pos:start="15:11" pos:end="15:11">=</operator> <call pos:start="15:13" pos:end="15:68"><name pos:start="15:13" pos:end="15:24">container_of</name><argument_list pos:start="15:25" pos:end="15:68">(<argument pos:start="15:26" pos:end="15:33"><expr pos:start="15:26" pos:end="15:33"><name pos:start="15:26" pos:end="15:33">listener</name></expr></argument>, <argument pos:start="15:36" pos:end="15:50"><expr pos:start="15:36" pos:end="15:50"><name pos:start="15:36" pos:end="15:50">CPUAddressSpace</name></expr></argument>, <argument pos:start="15:53" pos:end="15:67"><expr pos:start="15:53" pos:end="15:67"><name pos:start="15:53" pos:end="15:67">tcg_as_listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:31"><expr pos:start="17:5" pos:end="17:30"><call pos:start="17:5" pos:end="17:30"><name pos:start="17:5" pos:end="17:28">cpu_reloading_memory_map</name><argument_list pos:start="17:29" pos:end="17:30">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="19:5" pos:end="25:7">/* The CPU and TLB are protected by the iothread lock.

     * We reload the dispatch pointer now because cpu_reloading_memory_map()

     * may have split the RCU critical section.

     */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:46"><expr pos:start="27:5" pos:end="27:45"><name pos:start="27:5" pos:end="27:5">d</name> <operator pos:start="27:7" pos:end="27:7">=</operator> <call pos:start="27:9" pos:end="27:45"><name pos:start="27:9" pos:end="27:23">atomic_rcu_read</name><argument_list pos:start="27:24" pos:end="27:45">(<argument pos:start="27:25" pos:end="27:44"><expr pos:start="27:25" pos:end="27:44"><operator pos:start="27:25" pos:end="27:25">&amp;</operator><name pos:start="27:26" pos:end="27:44"><name pos:start="27:26" pos:end="27:30">cpuas</name><operator pos:start="27:31" pos:end="27:32">-&gt;</operator><name pos:start="27:33" pos:end="27:34">as</name><operator pos:start="27:35" pos:end="27:36">-&gt;</operator><name pos:start="27:37" pos:end="27:44">dispatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:31"><expr pos:start="29:5" pos:end="29:30"><name pos:start="29:5" pos:end="29:26"><name pos:start="29:5" pos:end="29:9">cpuas</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:26">memory_dispatch</name></name> <operator pos:start="29:28" pos:end="29:28">=</operator> <name pos:start="29:30" pos:end="29:30">d</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:29"><expr pos:start="31:5" pos:end="31:28"><call pos:start="31:5" pos:end="31:28"><name pos:start="31:5" pos:end="31:13">tlb_flush</name><argument_list pos:start="31:14" pos:end="31:28">(<argument pos:start="31:15" pos:end="31:24"><expr pos:start="31:15" pos:end="31:24"><name pos:start="31:15" pos:end="31:24"><name pos:start="31:15" pos:end="31:19">cpuas</name><operator pos:start="31:20" pos:end="31:21">-&gt;</operator><name pos:start="31:22" pos:end="31:24">cpu</name></name></expr></argument>, <argument pos:start="31:27" pos:end="31:27"><expr pos:start="31:27" pos:end="31:27"><literal type="number" pos:start="31:27" pos:end="31:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
