<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26393.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">TRBCCode</name></type> <name pos:start="1:17" pos:end="1:31">xhci_disable_ep</name><parameter_list pos:start="1:32" pos:end="3:49">(<parameter pos:start="1:33" pos:end="1:47"><decl pos:start="1:33" pos:end="1:47"><type pos:start="1:33" pos:end="1:47"><name pos:start="1:33" pos:end="1:41">XHCIState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:47">xhci</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:68"><decl pos:start="1:50" pos:end="1:68"><type pos:start="1:50" pos:end="1:68"><name pos:start="1:50" pos:end="1:57">unsigned</name> <name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:68">slotid</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:48"><decl pos:start="3:32" pos:end="3:48"><type pos:start="3:32" pos:end="3:48"><name pos:start="3:32" pos:end="3:39">unsigned</name> <name pos:start="3:41" pos:end="3:43">int</name></type> <name pos:start="3:45" pos:end="3:48">epid</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="81:1">{<block_content pos:start="7:5" pos:end="79:22">

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">XHCISlot</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:18">slot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">XHCIEPContext</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:24">epctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:44"><expr pos:start="15:5" pos:end="15:43"><call pos:start="15:5" pos:end="15:43"><name pos:start="15:5" pos:end="15:29">trace_usb_xhci_ep_disable</name><argument_list pos:start="15:30" pos:end="15:43">(<argument pos:start="15:31" pos:end="15:36"><expr pos:start="15:31" pos:end="15:36"><name pos:start="15:31" pos:end="15:36">slotid</name></expr></argument>, <argument pos:start="15:39" pos:end="15:42"><expr pos:start="15:39" pos:end="15:42"><name pos:start="15:39" pos:end="15:42">epid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:52"><expr pos:start="17:5" pos:end="17:51"><call pos:start="17:5" pos:end="17:51"><name pos:start="17:5" pos:end="17:10">assert</name><argument_list pos:start="17:11" pos:end="17:51">(<argument pos:start="17:12" pos:end="17:50"><expr pos:start="17:12" pos:end="17:50"><name pos:start="17:12" pos:end="17:17">slotid</name> <operator pos:start="17:19" pos:end="17:20">&gt;=</operator> <literal type="number" pos:start="17:22" pos:end="17:22">1</literal> <operator pos:start="17:24" pos:end="17:25">&amp;&amp;</operator> <name pos:start="17:27" pos:end="17:32">slotid</name> <operator pos:start="17:34" pos:end="17:35">&lt;=</operator> <name pos:start="17:37" pos:end="17:50"><name pos:start="17:37" pos:end="17:40">xhci</name><operator pos:start="17:41" pos:end="17:42">-&gt;</operator><name pos:start="17:43" pos:end="17:50">numslots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:36"><expr pos:start="19:5" pos:end="19:35"><call pos:start="19:5" pos:end="19:35"><name pos:start="19:5" pos:end="19:10">assert</name><argument_list pos:start="19:11" pos:end="19:35">(<argument pos:start="19:12" pos:end="19:34"><expr pos:start="19:12" pos:end="19:34"><name pos:start="19:12" pos:end="19:15">epid</name> <operator pos:start="19:17" pos:end="19:18">&gt;=</operator> <literal type="number" pos:start="19:20" pos:end="19:20">1</literal> <operator pos:start="19:22" pos:end="19:23">&amp;&amp;</operator> <name pos:start="19:25" pos:end="19:28">epid</name> <operator pos:start="19:30" pos:end="19:31">&lt;=</operator> <literal type="number" pos:start="19:33" pos:end="19:34">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:34"><expr pos:start="23:5" pos:end="23:33"><name pos:start="23:5" pos:end="23:8">slot</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <operator pos:start="23:12" pos:end="23:12">&amp;</operator><name pos:start="23:13" pos:end="23:33"><name pos:start="23:13" pos:end="23:16">xhci</name><operator pos:start="23:17" pos:end="23:18">-&gt;</operator><name pos:start="23:19" pos:end="23:23">slots</name><index pos:start="23:24" pos:end="23:33">[<expr pos:start="23:25" pos:end="23:32"><name pos:start="23:25" pos:end="23:30">slotid</name><operator pos:start="23:31" pos:end="23:31">-</operator><literal type="number" pos:start="23:32" pos:end="23:32">1</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:27">(<expr pos:start="27:9" pos:end="27:26"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:26"><name pos:start="27:10" pos:end="27:13">slot</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:18">eps</name><index pos:start="27:19" pos:end="27:26">[<expr pos:start="27:20" pos:end="27:25"><name pos:start="27:20" pos:end="27:23">epid</name><operator pos:start="27:24" pos:end="27:24">-</operator><literal type="number" pos:start="27:25" pos:end="27:25">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="27:29" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:26">

        <expr_stmt pos:start="29:9" pos:end="29:72"><expr pos:start="29:9" pos:end="29:71"><call pos:start="29:9" pos:end="29:71"><name pos:start="29:9" pos:end="29:15">DPRINTF</name><argument_list pos:start="29:16" pos:end="29:71">(<argument pos:start="29:17" pos:end="29:56"><expr pos:start="29:17" pos:end="29:56"><literal type="string" pos:start="29:17" pos:end="29:56">"xhci: slot %d ep %d already disabled\n"</literal></expr></argument>, <argument pos:start="29:59" pos:end="29:64"><expr pos:start="29:59" pos:end="29:64"><name pos:start="29:59" pos:end="29:64">slotid</name></expr></argument>, <argument pos:start="29:67" pos:end="29:70"><expr pos:start="29:67" pos:end="29:70"><name pos:start="29:67" pos:end="29:70">epid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:26">return <expr pos:start="31:16" pos:end="31:25"><name pos:start="31:16" pos:end="31:25">CC_SUCCESS</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:46"><expr pos:start="37:5" pos:end="37:45"><call pos:start="37:5" pos:end="37:45"><name pos:start="37:5" pos:end="37:22">xhci_ep_nuke_xfers</name><argument_list pos:start="37:23" pos:end="37:45">(<argument pos:start="37:24" pos:end="37:27"><expr pos:start="37:24" pos:end="37:27"><name pos:start="37:24" pos:end="37:27">xhci</name></expr></argument>, <argument pos:start="37:30" pos:end="37:35"><expr pos:start="37:30" pos:end="37:35"><name pos:start="37:30" pos:end="37:35">slotid</name></expr></argument>, <argument pos:start="37:38" pos:end="37:41"><expr pos:start="37:38" pos:end="37:41"><name pos:start="37:38" pos:end="37:41">epid</name></expr></argument>, <argument pos:start="37:44" pos:end="37:44"><expr pos:start="37:44" pos:end="37:44"><literal type="number" pos:start="37:44" pos:end="37:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:30"><expr pos:start="41:5" pos:end="41:29"><name pos:start="41:5" pos:end="41:9">epctx</name> <operator pos:start="41:11" pos:end="41:11">=</operator> <name pos:start="41:13" pos:end="41:29"><name pos:start="41:13" pos:end="41:16">slot</name><operator pos:start="41:17" pos:end="41:18">-&gt;</operator><name pos:start="41:19" pos:end="41:21">eps</name><index pos:start="41:22" pos:end="41:29">[<expr pos:start="41:23" pos:end="41:28"><name pos:start="41:23" pos:end="41:26">epid</name><operator pos:start="41:27" pos:end="41:27">-</operator><literal type="number" pos:start="41:28" pos:end="41:28">1</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:27">(<expr pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:13">epctx</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:26">nr_pstreams</name></name></expr>)</condition> <block pos:start="45:29" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:33">

        <expr_stmt pos:start="47:9" pos:end="47:33"><expr pos:start="47:9" pos:end="47:32"><call pos:start="47:9" pos:end="47:32"><name pos:start="47:9" pos:end="47:25">xhci_free_streams</name><argument_list pos:start="47:26" pos:end="47:32">(<argument pos:start="47:27" pos:end="47:31"><expr pos:start="47:27" pos:end="47:31"><name pos:start="47:27" pos:end="47:31">epctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="53:5" pos:end="57:5">for <control pos:start="53:9" pos:end="53:54">(<init pos:start="53:10" pos:end="53:15"><expr pos:start="53:10" pos:end="53:14"><name pos:start="53:10" pos:end="53:10">i</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <literal type="number" pos:start="53:14" pos:end="53:14">0</literal></expr>;</init> <condition pos:start="53:17" pos:end="53:49"><expr pos:start="53:17" pos:end="53:48"><name pos:start="53:17" pos:end="53:17">i</name> <operator pos:start="53:19" pos:end="53:19">&lt;</operator> <call pos:start="53:21" pos:end="53:48"><name pos:start="53:21" pos:end="53:30">ARRAY_SIZE</name><argument_list pos:start="53:31" pos:end="53:48">(<argument pos:start="53:32" pos:end="53:47"><expr pos:start="53:32" pos:end="53:47"><name pos:start="53:32" pos:end="53:47"><name pos:start="53:32" pos:end="53:36">epctx</name><operator pos:start="53:37" pos:end="53:38">-&gt;</operator><name pos:start="53:39" pos:end="53:47">transfers</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="53:51" pos:end="53:53"><expr pos:start="53:51" pos:end="53:53"><name pos:start="53:51" pos:end="53:51">i</name><operator pos:start="53:52" pos:end="53:53">++</operator></expr></incr>)</control> <block pos:start="53:56" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:56">

        <expr_stmt pos:start="55:9" pos:end="55:56"><expr pos:start="55:9" pos:end="55:55"><call pos:start="55:9" pos:end="55:55"><name pos:start="55:9" pos:end="55:26">usb_packet_cleanup</name><argument_list pos:start="55:27" pos:end="55:55">(<argument pos:start="55:28" pos:end="55:54"><expr pos:start="55:28" pos:end="55:54"><operator pos:start="55:28" pos:end="55:28">&amp;</operator><name pos:start="55:29" pos:end="55:47"><name pos:start="55:29" pos:end="55:33">epctx</name><operator pos:start="55:34" pos:end="55:35">-&gt;</operator><name pos:start="55:36" pos:end="55:44">transfers</name><index pos:start="55:45" pos:end="55:47">[<expr pos:start="55:46" pos:end="55:46"><name pos:start="55:46" pos:end="55:46">i</name></expr>]</index></name><operator pos:start="55:48" pos:end="55:48">.</operator><name pos:start="55:49" pos:end="55:54">packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="61:5" pos:end="61:60">/* only touch guest RAM if we're not resetting the HC */</comment>

    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:46">(<expr pos:start="63:9" pos:end="63:45"><name pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:12">xhci</name><operator pos:start="63:13" pos:end="63:14">-&gt;</operator><name pos:start="63:15" pos:end="63:24">dcbaap_low</name></name> <operator pos:start="63:26" pos:end="63:27">||</operator> <name pos:start="63:29" pos:end="63:45"><name pos:start="63:29" pos:end="63:32">xhci</name><operator pos:start="63:33" pos:end="63:34">-&gt;</operator><name pos:start="63:35" pos:end="63:45">dcbaap_high</name></name></expr>)</condition> <block pos:start="63:48" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:58">

        <expr_stmt pos:start="65:9" pos:end="65:58"><expr pos:start="65:9" pos:end="65:57"><call pos:start="65:9" pos:end="65:57"><name pos:start="65:9" pos:end="65:25">xhci_set_ep_state</name><argument_list pos:start="65:26" pos:end="65:57">(<argument pos:start="65:27" pos:end="65:30"><expr pos:start="65:27" pos:end="65:30"><name pos:start="65:27" pos:end="65:30">xhci</name></expr></argument>, <argument pos:start="65:33" pos:end="65:37"><expr pos:start="65:33" pos:end="65:37"><name pos:start="65:33" pos:end="65:37">epctx</name></expr></argument>, <argument pos:start="65:40" pos:end="65:43"><expr pos:start="65:40" pos:end="65:43"><name pos:start="65:40" pos:end="65:43">NULL</name></expr></argument>, <argument pos:start="65:46" pos:end="65:56"><expr pos:start="65:46" pos:end="65:56"><name pos:start="65:46" pos:end="65:56">EP_DISABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:34"><expr pos:start="71:5" pos:end="71:33"><call pos:start="71:5" pos:end="71:33"><name pos:start="71:5" pos:end="71:14">timer_free</name><argument_list pos:start="71:15" pos:end="71:33">(<argument pos:start="71:16" pos:end="71:32"><expr pos:start="71:16" pos:end="71:32"><name pos:start="71:16" pos:end="71:32"><name pos:start="71:16" pos:end="71:20">epctx</name><operator pos:start="71:21" pos:end="71:22">-&gt;</operator><name pos:start="71:23" pos:end="71:32">kick_timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:18"><expr pos:start="73:5" pos:end="73:17"><call pos:start="73:5" pos:end="73:17"><name pos:start="73:5" pos:end="73:10">g_free</name><argument_list pos:start="73:11" pos:end="73:17">(<argument pos:start="73:12" pos:end="73:16"><expr pos:start="73:12" pos:end="73:16"><name pos:start="73:12" pos:end="73:16">epctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:29"><expr pos:start="75:5" pos:end="75:28"><name pos:start="75:5" pos:end="75:21"><name pos:start="75:5" pos:end="75:8">slot</name><operator pos:start="75:9" pos:end="75:10">-&gt;</operator><name pos:start="75:11" pos:end="75:13">eps</name><index pos:start="75:14" pos:end="75:21">[<expr pos:start="75:15" pos:end="75:20"><name pos:start="75:15" pos:end="75:18">epid</name><operator pos:start="75:19" pos:end="75:19">-</operator><literal type="number" pos:start="75:20" pos:end="75:20">1</literal></expr>]</index></name> <operator pos:start="75:23" pos:end="75:23">=</operator> <name pos:start="75:25" pos:end="75:28">NULL</name></expr>;</expr_stmt>



    <return pos:start="79:5" pos:end="79:22">return <expr pos:start="79:12" pos:end="79:21"><name pos:start="79:12" pos:end="79:21">CC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>
</unit>
