<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26750.c" pos:tabs="8"><function pos:start="1:1" pos:end="621:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">decode_header</name><parameter_list pos:start="1:25" pos:end="1:39">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:37"><name pos:start="1:26" pos:end="1:35">EXRContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="621:1">{<block_content pos:start="5:5" pos:end="619:13">

    <decl_stmt pos:start="5:5" pos:end="5:49"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:20">magic_number</name></decl>, <decl pos:start="5:23" pos:end="5:29"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:23" pos:end="5:29">version</name></decl>, <decl pos:start="5:32" pos:end="5:32"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:32" pos:end="5:32">i</name></decl>, <decl pos:start="5:35" pos:end="5:39"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:35" pos:end="5:39">flags</name></decl>, <decl pos:start="5:42" pos:end="5:48"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:42" pos:end="5:44">sar</name> <init pos:start="5:46" pos:end="5:48">= <expr pos:start="5:48" pos:end="5:48"><literal type="number" pos:start="5:48" pos:end="5:48">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:19">layer_match</name> <init pos:start="7:21" pos:end="7:23">= <expr pos:start="7:23" pos:end="7:23"><literal type="number" pos:start="7:23" pos:end="7:23">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:34"><expr pos:start="11:5" pos:end="11:33"><name pos:start="11:5" pos:end="11:29"><name pos:start="11:5" pos:end="11:5">s</name><operator pos:start="11:6" pos:end="11:7">-&gt;</operator><name pos:start="11:8" pos:end="11:29">current_channel_offset</name></name> <operator pos:start="11:31" pos:end="11:31">=</operator> <literal type="number" pos:start="11:33" pos:end="11:33">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:31"><expr pos:start="13:5" pos:end="13:30"><name pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:5">s</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:11">xmin</name></name>               <operator pos:start="13:27" pos:end="13:27">=</operator> <operator pos:start="13:29" pos:end="13:29">~</operator><literal type="number" pos:start="13:30" pos:end="13:30">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:31"><expr pos:start="15:5" pos:end="15:30"><name pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:5">s</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:11">xmax</name></name>               <operator pos:start="15:27" pos:end="15:27">=</operator> <operator pos:start="15:29" pos:end="15:29">~</operator><literal type="number" pos:start="15:30" pos:end="15:30">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:31"><expr pos:start="17:5" pos:end="17:30"><name pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:5">s</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:11">ymin</name></name>               <operator pos:start="17:27" pos:end="17:27">=</operator> <operator pos:start="17:29" pos:end="17:29">~</operator><literal type="number" pos:start="17:30" pos:end="17:30">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:31"><expr pos:start="19:5" pos:end="19:30"><name pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:11">ymax</name></name>               <operator pos:start="19:27" pos:end="19:27">=</operator> <operator pos:start="19:29" pos:end="19:29">~</operator><literal type="number" pos:start="19:30" pos:end="19:30">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:31"><expr pos:start="21:5" pos:end="21:30"><name pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:13">xdelta</name></name>             <operator pos:start="21:27" pos:end="21:27">=</operator> <operator pos:start="21:29" pos:end="21:29">~</operator><literal type="number" pos:start="21:30" pos:end="21:30">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:31"><expr pos:start="23:5" pos:end="23:30"><name pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:13">ydelta</name></name>             <operator pos:start="23:27" pos:end="23:27">=</operator> <operator pos:start="23:29" pos:end="23:29">~</operator><literal type="number" pos:start="23:30" pos:end="23:30">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:31"><expr pos:start="25:5" pos:end="25:30"><name pos:start="25:5" pos:end="25:25"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:22">channel_offsets</name><index pos:start="25:23" pos:end="25:25">[<expr pos:start="25:24" pos:end="25:24"><literal type="number" pos:start="25:24" pos:end="25:24">0</literal></expr>]</index></name> <operator pos:start="25:27" pos:end="25:27">=</operator> <operator pos:start="25:29" pos:end="25:29">-</operator><literal type="number" pos:start="25:30" pos:end="25:30">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:31"><expr pos:start="27:5" pos:end="27:30"><name pos:start="27:5" pos:end="27:25"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:22">channel_offsets</name><index pos:start="27:23" pos:end="27:25">[<expr pos:start="27:24" pos:end="27:24"><literal type="number" pos:start="27:24" pos:end="27:24">1</literal></expr>]</index></name> <operator pos:start="27:27" pos:end="27:27">=</operator> <operator pos:start="27:29" pos:end="27:29">-</operator><literal type="number" pos:start="27:30" pos:end="27:30">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:31"><expr pos:start="29:5" pos:end="29:30"><name pos:start="29:5" pos:end="29:25"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:22">channel_offsets</name><index pos:start="29:23" pos:end="29:25">[<expr pos:start="29:24" pos:end="29:24"><literal type="number" pos:start="29:24" pos:end="29:24">2</literal></expr>]</index></name> <operator pos:start="29:27" pos:end="29:27">=</operator> <operator pos:start="29:29" pos:end="29:29">-</operator><literal type="number" pos:start="29:30" pos:end="29:30">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:31"><expr pos:start="31:5" pos:end="31:30"><name pos:start="31:5" pos:end="31:25"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:22">channel_offsets</name><index pos:start="31:23" pos:end="31:25">[<expr pos:start="31:24" pos:end="31:24"><literal type="number" pos:start="31:24" pos:end="31:24">3</literal></expr>]</index></name> <operator pos:start="31:27" pos:end="31:27">=</operator> <operator pos:start="31:29" pos:end="31:29">-</operator><literal type="number" pos:start="31:30" pos:end="31:30">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:40"><expr pos:start="33:5" pos:end="33:39"><name pos:start="33:5" pos:end="33:17"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:17">pixel_type</name></name>         <operator pos:start="33:27" pos:end="33:27">=</operator> <name pos:start="33:29" pos:end="33:39">EXR_UNKNOWN</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:37"><expr pos:start="35:5" pos:end="35:36"><name pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:18">compression</name></name>        <operator pos:start="35:27" pos:end="35:27">=</operator> <name pos:start="35:29" pos:end="35:36">EXR_UNKN</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:30"><expr pos:start="37:5" pos:end="37:29"><name pos:start="37:5" pos:end="37:18"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:18">nb_channels</name></name>        <operator pos:start="37:27" pos:end="37:27">=</operator> <literal type="number" pos:start="37:29" pos:end="37:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:30"><expr pos:start="39:5" pos:end="39:29"><name pos:start="39:5" pos:end="39:8"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:8">w</name></name>                  <operator pos:start="39:27" pos:end="39:27">=</operator> <literal type="number" pos:start="39:29" pos:end="39:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:30"><expr pos:start="41:5" pos:end="41:29"><name pos:start="41:5" pos:end="41:8"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:8">h</name></name>                  <operator pos:start="41:27" pos:end="41:27">=</operator> <literal type="number" pos:start="41:29" pos:end="41:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:31"><expr pos:start="43:5" pos:end="43:30"><name pos:start="43:5" pos:end="43:22"><name pos:start="43:5" pos:end="43:5">s</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:16">tile_attr</name><operator pos:start="43:17" pos:end="43:17">.</operator><name pos:start="43:18" pos:end="43:22">xSize</name></name>    <operator pos:start="43:27" pos:end="43:27">=</operator> <operator pos:start="43:29" pos:end="43:29">-</operator><literal type="number" pos:start="43:30" pos:end="43:30">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:31"><expr pos:start="45:5" pos:end="45:30"><name pos:start="45:5" pos:end="45:22"><name pos:start="45:5" pos:end="45:5">s</name><operator pos:start="45:6" pos:end="45:7">-&gt;</operator><name pos:start="45:8" pos:end="45:16">tile_attr</name><operator pos:start="45:17" pos:end="45:17">.</operator><name pos:start="45:18" pos:end="45:22">ySize</name></name>    <operator pos:start="45:27" pos:end="45:27">=</operator> <operator pos:start="45:29" pos:end="45:29">-</operator><literal type="number" pos:start="45:30" pos:end="45:30">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:30"><expr pos:start="47:5" pos:end="47:29"><name pos:start="47:5" pos:end="47:14"><name pos:start="47:5" pos:end="47:5">s</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:14">is_tile</name></name>            <operator pos:start="47:27" pos:end="47:27">=</operator> <literal type="number" pos:start="47:29" pos:end="47:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:30"><expr pos:start="49:5" pos:end="49:29"><name pos:start="49:5" pos:end="49:14"><name pos:start="49:5" pos:end="49:5">s</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:14">is_luma</name></name>            <operator pos:start="49:27" pos:end="49:27">=</operator> <literal type="number" pos:start="49:29" pos:end="49:29">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:48">(<expr pos:start="53:9" pos:end="53:47"><call pos:start="53:9" pos:end="53:42"><name pos:start="53:9" pos:end="53:34">bytestream2_get_bytes_left</name><argument_list pos:start="53:35" pos:end="53:42">(<argument pos:start="53:36" pos:end="53:41"><expr pos:start="53:36" pos:end="53:41"><operator pos:start="53:36" pos:end="53:36">&amp;</operator><name pos:start="53:37" pos:end="53:41"><name pos:start="53:37" pos:end="53:37">s</name><operator pos:start="53:38" pos:end="53:39">-&gt;</operator><name pos:start="53:40" pos:end="53:41">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="53:44" pos:end="53:44">&lt;</operator> <literal type="number" pos:start="53:46" pos:end="53:47">10</literal></expr>)</condition> <block pos:start="53:50" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:35">

        <expr_stmt pos:start="55:9" pos:end="55:71"><expr pos:start="55:9" pos:end="55:70"><call pos:start="55:9" pos:end="55:70"><name pos:start="55:9" pos:end="55:14">av_log</name><argument_list pos:start="55:15" pos:end="55:70">(<argument pos:start="55:16" pos:end="55:23"><expr pos:start="55:16" pos:end="55:23"><name pos:start="55:16" pos:end="55:23"><name pos:start="55:16" pos:end="55:16">s</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:23">avctx</name></name></expr></argument>, <argument pos:start="55:26" pos:end="55:37"><expr pos:start="55:26" pos:end="55:37"><name pos:start="55:26" pos:end="55:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="55:40" pos:end="55:69"><expr pos:start="55:40" pos:end="55:69"><literal type="string" pos:start="55:40" pos:end="55:69">"Header too short to parse.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:35">return <expr pos:start="57:16" pos:end="57:34"><name pos:start="57:16" pos:end="57:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:48"><expr pos:start="63:5" pos:end="63:47"><name pos:start="63:5" pos:end="63:16">magic_number</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <call pos:start="63:20" pos:end="63:47"><name pos:start="63:20" pos:end="63:39">bytestream2_get_le32</name><argument_list pos:start="63:40" pos:end="63:47">(<argument pos:start="63:41" pos:end="63:46"><expr pos:start="63:41" pos:end="63:46"><operator pos:start="63:41" pos:end="63:41">&amp;</operator><name pos:start="63:42" pos:end="63:46"><name pos:start="63:42" pos:end="63:42">s</name><operator pos:start="63:43" pos:end="63:44">-&gt;</operator><name pos:start="63:45" pos:end="63:46">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="75:5"><if pos:start="65:5" pos:end="75:5">if <condition pos:start="65:8" pos:end="65:33">(<expr pos:start="65:9" pos:end="65:32"><name pos:start="65:9" pos:end="65:20">magic_number</name> <operator pos:start="65:22" pos:end="65:23">!=</operator> <literal type="number" pos:start="65:25" pos:end="65:32">20000630</literal></expr>)</condition> <block pos:start="65:35" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:35">

        <comment type="block" pos:start="67:9" pos:end="69:40">/* As per documentation of OpenEXR, it is supposed to be

         * int 20000630 little-endian */</comment>

        <expr_stmt pos:start="71:9" pos:end="71:81"><expr pos:start="71:9" pos:end="71:80"><call pos:start="71:9" pos:end="71:80"><name pos:start="71:9" pos:end="71:14">av_log</name><argument_list pos:start="71:15" pos:end="71:80">(<argument pos:start="71:16" pos:end="71:23"><expr pos:start="71:16" pos:end="71:23"><name pos:start="71:16" pos:end="71:23"><name pos:start="71:16" pos:end="71:16">s</name><operator pos:start="71:17" pos:end="71:18">-&gt;</operator><name pos:start="71:19" pos:end="71:23">avctx</name></name></expr></argument>, <argument pos:start="71:26" pos:end="71:37"><expr pos:start="71:26" pos:end="71:37"><name pos:start="71:26" pos:end="71:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="71:40" pos:end="71:65"><expr pos:start="71:40" pos:end="71:65"><literal type="string" pos:start="71:40" pos:end="71:65">"Wrong magic number %d.\n"</literal></expr></argument>, <argument pos:start="71:68" pos:end="71:79"><expr pos:start="71:68" pos:end="71:79"><name pos:start="71:68" pos:end="71:79">magic_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:35">return <expr pos:start="73:16" pos:end="73:34"><name pos:start="73:16" pos:end="73:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:43"><expr pos:start="79:5" pos:end="79:42"><name pos:start="79:5" pos:end="79:11">version</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <call pos:start="79:15" pos:end="79:42"><name pos:start="79:15" pos:end="79:34">bytestream2_get_byte</name><argument_list pos:start="79:35" pos:end="79:42">(<argument pos:start="79:36" pos:end="79:41"><expr pos:start="79:36" pos:end="79:41"><operator pos:start="79:36" pos:end="79:36">&amp;</operator><name pos:start="79:37" pos:end="79:41"><name pos:start="79:37" pos:end="79:37">s</name><operator pos:start="79:38" pos:end="79:39">-&gt;</operator><name pos:start="79:40" pos:end="79:41">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:21">(<expr pos:start="81:9" pos:end="81:20"><name pos:start="81:9" pos:end="81:15">version</name> <operator pos:start="81:17" pos:end="81:18">!=</operator> <literal type="number" pos:start="81:20" pos:end="81:20">2</literal></expr>)</condition> <block pos:start="81:23" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:36">

        <expr_stmt pos:start="83:9" pos:end="83:71"><expr pos:start="83:9" pos:end="83:70"><call pos:start="83:9" pos:end="83:70"><name pos:start="83:9" pos:end="83:37">avpriv_report_missing_feature</name><argument_list pos:start="83:38" pos:end="83:70">(<argument pos:start="83:39" pos:end="83:46"><expr pos:start="83:39" pos:end="83:46"><name pos:start="83:39" pos:end="83:46"><name pos:start="83:39" pos:end="83:39">s</name><operator pos:start="83:40" pos:end="83:41">-&gt;</operator><name pos:start="83:42" pos:end="83:46">avctx</name></name></expr></argument>, <argument pos:start="83:49" pos:end="83:60"><expr pos:start="83:49" pos:end="83:60"><literal type="string" pos:start="83:49" pos:end="83:60">"Version %d"</literal></expr></argument>, <argument pos:start="83:63" pos:end="83:69"><expr pos:start="83:63" pos:end="83:69"><name pos:start="83:63" pos:end="83:69">version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="85:9" pos:end="85:36">return <expr pos:start="85:16" pos:end="85:35"><name pos:start="85:16" pos:end="85:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:41"><expr pos:start="91:5" pos:end="91:40"><name pos:start="91:5" pos:end="91:9">flags</name> <operator pos:start="91:11" pos:end="91:11">=</operator> <call pos:start="91:13" pos:end="91:40"><name pos:start="91:13" pos:end="91:32">bytestream2_get_le24</name><argument_list pos:start="91:33" pos:end="91:40">(<argument pos:start="91:34" pos:end="91:39"><expr pos:start="91:34" pos:end="91:39"><operator pos:start="91:34" pos:end="91:34">&amp;</operator><name pos:start="91:35" pos:end="91:39"><name pos:start="91:35" pos:end="91:35">s</name><operator pos:start="91:36" pos:end="91:37">-&gt;</operator><name pos:start="91:38" pos:end="91:39">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="95:5" pos:end="109:5"><if pos:start="95:5" pos:end="97:23">if <condition pos:start="95:8" pos:end="95:22">(<expr pos:start="95:9" pos:end="95:21"><name pos:start="95:9" pos:end="95:13">flags</name> <operator pos:start="95:15" pos:end="95:16">==</operator> <literal type="number" pos:start="95:18" pos:end="95:21">0x00</literal></expr>)</condition><block type="pseudo" pos:start="97:9" pos:end="97:23"><block_content pos:start="97:9" pos:end="97:23">

        <expr_stmt pos:start="97:9" pos:end="97:23"><expr pos:start="97:9" pos:end="97:22"><name pos:start="97:9" pos:end="97:18"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:18">is_tile</name></name> <operator pos:start="97:20" pos:end="97:20">=</operator> <literal type="number" pos:start="97:22" pos:end="97:22">0</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="99:5" pos:end="101:23">else if <condition pos:start="99:13" pos:end="99:26">(<expr pos:start="99:14" pos:end="99:25"><name pos:start="99:14" pos:end="99:18">flags</name> <operator pos:start="99:20" pos:end="99:20">&amp;</operator> <literal type="number" pos:start="99:22" pos:end="99:25">0x02</literal></expr>)</condition><block type="pseudo" pos:start="101:9" pos:end="101:23"><block_content pos:start="101:9" pos:end="101:23">

        <expr_stmt pos:start="101:9" pos:end="101:23"><expr pos:start="101:9" pos:end="101:22"><name pos:start="101:9" pos:end="101:18"><name pos:start="101:9" pos:end="101:9">s</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:18">is_tile</name></name> <operator pos:start="101:20" pos:end="101:20">=</operator> <literal type="number" pos:start="101:22" pos:end="101:22">1</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="103:5" pos:end="109:5">else<block pos:start="103:9" pos:end="109:5">{<block_content pos:start="105:9" pos:end="107:36">

        <expr_stmt pos:start="105:9" pos:end="105:67"><expr pos:start="105:9" pos:end="105:66"><call pos:start="105:9" pos:end="105:66"><name pos:start="105:9" pos:end="105:37">avpriv_report_missing_feature</name><argument_list pos:start="105:38" pos:end="105:66">(<argument pos:start="105:39" pos:end="105:46"><expr pos:start="105:39" pos:end="105:46"><name pos:start="105:39" pos:end="105:46"><name pos:start="105:39" pos:end="105:39">s</name><operator pos:start="105:40" pos:end="105:41">-&gt;</operator><name pos:start="105:42" pos:end="105:46">avctx</name></name></expr></argument>, <argument pos:start="105:49" pos:end="105:58"><expr pos:start="105:49" pos:end="105:58"><literal type="string" pos:start="105:49" pos:end="105:58">"flags %d"</literal></expr></argument>, <argument pos:start="105:61" pos:end="105:65"><expr pos:start="105:61" pos:end="105:65"><name pos:start="105:61" pos:end="105:65">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="107:9" pos:end="107:36">return <expr pos:start="107:16" pos:end="107:35"><name pos:start="107:16" pos:end="107:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <comment type="line" pos:start="113:5" pos:end="113:23">// Parse the header</comment>

    <while pos:start="115:5" pos:end="573:5">while <condition pos:start="115:11" pos:end="115:67">(<expr pos:start="115:12" pos:end="115:66"><call pos:start="115:12" pos:end="115:45"><name pos:start="115:12" pos:end="115:37">bytestream2_get_bytes_left</name><argument_list pos:start="115:38" pos:end="115:45">(<argument pos:start="115:39" pos:end="115:44"><expr pos:start="115:39" pos:end="115:44"><operator pos:start="115:39" pos:end="115:39">&amp;</operator><name pos:start="115:40" pos:end="115:44"><name pos:start="115:40" pos:end="115:40">s</name><operator pos:start="115:41" pos:end="115:42">-&gt;</operator><name pos:start="115:43" pos:end="115:44">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="115:47" pos:end="115:47">&gt;</operator> <literal type="number" pos:start="115:49" pos:end="115:49">0</literal> <operator pos:start="115:51" pos:end="115:52">&amp;&amp;</operator> <operator pos:start="115:54" pos:end="115:54">*</operator><name pos:start="115:55" pos:end="115:66"><name pos:start="115:55" pos:end="115:55">s</name><operator pos:start="115:56" pos:end="115:57">-&gt;</operator><name pos:start="115:58" pos:end="115:59">gb</name><operator pos:start="115:60" pos:end="115:60">.</operator><name pos:start="115:61" pos:end="115:66">buffer</name></name></expr>)</condition> <block pos:start="115:69" pos:end="573:5">{<block_content pos:start="117:9" pos:end="571:63">

        <decl_stmt pos:start="117:9" pos:end="117:21"><decl pos:start="117:9" pos:end="117:20"><type pos:start="117:9" pos:end="117:11"><name pos:start="117:9" pos:end="117:11">int</name></type> <name pos:start="117:13" pos:end="117:20">var_size</name></decl>;</decl_stmt>

        <if_stmt pos:start="119:9" pos:end="545:9"><if pos:start="119:9" pos:end="375:9">if <condition pos:start="119:12" pos:end="121:66">(<expr pos:start="119:13" pos:end="121:65"><operator pos:start="119:13" pos:end="119:13">(</operator><name pos:start="119:14" pos:end="119:21">var_size</name> <operator pos:start="119:23" pos:end="119:23">=</operator> <call pos:start="119:25" pos:end="121:59"><name pos:start="119:25" pos:end="119:45">check_header_variable</name><argument_list pos:start="119:46" pos:end="121:59">(<argument pos:start="119:47" pos:end="119:47"><expr pos:start="119:47" pos:end="119:47"><name pos:start="119:47" pos:end="119:47">s</name></expr></argument>, <argument pos:start="119:50" pos:end="119:59"><expr pos:start="119:50" pos:end="119:59"><literal type="string" pos:start="119:50" pos:end="119:59">"channels"</literal></expr></argument>,

                                              <argument pos:start="121:47" pos:end="121:54"><expr pos:start="121:47" pos:end="121:54"><literal type="string" pos:start="121:47" pos:end="121:54">"chlist"</literal></expr></argument>, <argument pos:start="121:57" pos:end="121:58"><expr pos:start="121:57" pos:end="121:58"><literal type="number" pos:start="121:57" pos:end="121:58">38</literal></expr></argument>)</argument_list></call><operator pos:start="121:60" pos:end="121:60">)</operator> <operator pos:start="121:62" pos:end="121:63">&gt;=</operator> <literal type="number" pos:start="121:65" pos:end="121:65">0</literal></expr>)</condition> <block pos:start="121:68" pos:end="375:9">{<block_content pos:start="123:13" pos:end="373:21">

            <decl_stmt pos:start="123:13" pos:end="123:33"><decl pos:start="123:13" pos:end="123:32"><type pos:start="123:13" pos:end="123:26"><name pos:start="123:13" pos:end="123:26">GetByteContext</name></type> <name pos:start="123:28" pos:end="123:32">ch_gb</name></decl>;</decl_stmt>

            <if_stmt pos:start="125:13" pos:end="127:43"><if pos:start="125:13" pos:end="127:43">if <condition pos:start="125:16" pos:end="125:26">(<expr pos:start="125:17" pos:end="125:25"><operator pos:start="125:17" pos:end="125:17">!</operator><name pos:start="125:18" pos:end="125:25">var_size</name></expr>)</condition><block type="pseudo" pos:start="127:17" pos:end="127:43"><block_content pos:start="127:17" pos:end="127:43">

                <return pos:start="127:17" pos:end="127:43">return <expr pos:start="127:24" pos:end="127:42"><name pos:start="127:24" pos:end="127:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="131:13" pos:end="131:61"><expr pos:start="131:13" pos:end="131:60"><call pos:start="131:13" pos:end="131:60"><name pos:start="131:13" pos:end="131:28">bytestream2_init</name><argument_list pos:start="131:29" pos:end="131:60">(<argument pos:start="131:30" pos:end="131:35"><expr pos:start="131:30" pos:end="131:35"><operator pos:start="131:30" pos:end="131:30">&amp;</operator><name pos:start="131:31" pos:end="131:35">ch_gb</name></expr></argument>, <argument pos:start="131:38" pos:end="131:49"><expr pos:start="131:38" pos:end="131:49"><name pos:start="131:38" pos:end="131:49"><name pos:start="131:38" pos:end="131:38">s</name><operator pos:start="131:39" pos:end="131:40">-&gt;</operator><name pos:start="131:41" pos:end="131:42">gb</name><operator pos:start="131:43" pos:end="131:43">.</operator><name pos:start="131:44" pos:end="131:49">buffer</name></name></expr></argument>, <argument pos:start="131:52" pos:end="131:59"><expr pos:start="131:52" pos:end="131:59"><name pos:start="131:52" pos:end="131:59">var_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <while pos:start="135:13" pos:end="333:13">while <condition pos:start="135:19" pos:end="135:60">(<expr pos:start="135:20" pos:end="135:59"><call pos:start="135:20" pos:end="135:53"><name pos:start="135:20" pos:end="135:45">bytestream2_get_bytes_left</name><argument_list pos:start="135:46" pos:end="135:53">(<argument pos:start="135:47" pos:end="135:52"><expr pos:start="135:47" pos:end="135:52"><operator pos:start="135:47" pos:end="135:47">&amp;</operator><name pos:start="135:48" pos:end="135:52">ch_gb</name></expr></argument>)</argument_list></call> <operator pos:start="135:55" pos:end="135:56">&gt;=</operator> <literal type="number" pos:start="135:58" pos:end="135:59">19</literal></expr>)</condition> <block pos:start="135:62" pos:end="333:13">{<block_content pos:start="137:17" pos:end="331:69">

                <decl_stmt pos:start="137:17" pos:end="137:36"><decl pos:start="137:17" pos:end="137:35"><type pos:start="137:17" pos:end="137:28"><name pos:start="137:17" pos:end="137:26">EXRChannel</name> <modifier pos:start="137:28" pos:end="137:28">*</modifier></type><name pos:start="137:29" pos:end="137:35">channel</name></decl>;</decl_stmt>

                <decl_stmt pos:start="139:17" pos:end="139:53"><decl pos:start="139:17" pos:end="139:52"><type pos:start="139:17" pos:end="139:33"><name pos:start="139:17" pos:end="139:33"><name pos:start="139:17" pos:end="139:20">enum</name> <name pos:start="139:22" pos:end="139:33">ExrPixelType</name></name></type> <name pos:start="139:35" pos:end="139:52">current_pixel_type</name></decl>;</decl_stmt>

                <decl_stmt pos:start="141:17" pos:end="141:39"><decl pos:start="141:17" pos:end="141:38"><type pos:start="141:17" pos:end="141:19"><name pos:start="141:17" pos:end="141:19">int</name></type> <name pos:start="141:21" pos:end="141:33">channel_index</name> <init pos:start="141:35" pos:end="141:38">= <expr pos:start="141:37" pos:end="141:38"><operator pos:start="141:37" pos:end="141:37">-</operator><literal type="number" pos:start="141:38" pos:end="141:38">1</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="143:17" pos:end="143:31"><decl pos:start="143:17" pos:end="143:24"><type pos:start="143:17" pos:end="143:19"><name pos:start="143:17" pos:end="143:19">int</name></type> <name pos:start="143:21" pos:end="143:24">xsub</name></decl>, <decl pos:start="143:27" pos:end="143:30"><type ref="prev" pos:start="143:17" pos:end="143:19"/><name pos:start="143:27" pos:end="143:30">ysub</name></decl>;</decl_stmt>



                <if_stmt pos:start="147:17" pos:end="175:17"><if pos:start="147:17" pos:end="171:17">if <condition pos:start="147:20" pos:end="147:46">(<expr pos:start="147:21" pos:end="147:45"><call pos:start="147:21" pos:end="147:40"><name pos:start="147:21" pos:end="147:26">strcmp</name><argument_list pos:start="147:27" pos:end="147:40">(<argument pos:start="147:28" pos:end="147:35"><expr pos:start="147:28" pos:end="147:35"><name pos:start="147:28" pos:end="147:35"><name pos:start="147:28" pos:end="147:28">s</name><operator pos:start="147:29" pos:end="147:30">-&gt;</operator><name pos:start="147:31" pos:end="147:35">layer</name></name></expr></argument>, <argument pos:start="147:38" pos:end="147:39"><expr pos:start="147:38" pos:end="147:39"><literal type="string" pos:start="147:38" pos:end="147:39">""</literal></expr></argument>)</argument_list></call> <operator pos:start="147:42" pos:end="147:43">!=</operator> <literal type="number" pos:start="147:45" pos:end="147:45">0</literal></expr>)</condition> <block pos:start="147:48" pos:end="171:17">{<block_content pos:start="149:21" pos:end="169:21">

                    <if_stmt pos:start="149:21" pos:end="169:21"><if pos:start="149:21" pos:end="163:21">if <condition pos:start="149:24" pos:end="149:79">(<expr pos:start="149:25" pos:end="149:78"><call pos:start="149:25" pos:end="149:73"><name pos:start="149:25" pos:end="149:31">strncmp</name><argument_list pos:start="149:32" pos:end="149:73">(<argument pos:start="149:33" pos:end="149:44"><expr pos:start="149:33" pos:end="149:44"><name pos:start="149:33" pos:end="149:44"><name pos:start="149:33" pos:end="149:37">ch_gb</name><operator pos:start="149:38" pos:end="149:38">.</operator><name pos:start="149:39" pos:end="149:44">buffer</name></name></expr></argument>, <argument pos:start="149:47" pos:end="149:54"><expr pos:start="149:47" pos:end="149:54"><name pos:start="149:47" pos:end="149:54"><name pos:start="149:47" pos:end="149:47">s</name><operator pos:start="149:48" pos:end="149:49">-&gt;</operator><name pos:start="149:50" pos:end="149:54">layer</name></name></expr></argument>, <argument pos:start="149:57" pos:end="149:72"><expr pos:start="149:57" pos:end="149:72"><call pos:start="149:57" pos:end="149:72"><name pos:start="149:57" pos:end="149:62">strlen</name><argument_list pos:start="149:63" pos:end="149:72">(<argument pos:start="149:64" pos:end="149:71"><expr pos:start="149:64" pos:end="149:71"><name pos:start="149:64" pos:end="149:71"><name pos:start="149:64" pos:end="149:64">s</name><operator pos:start="149:65" pos:end="149:66">-&gt;</operator><name pos:start="149:67" pos:end="149:71">layer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="149:75" pos:end="149:76">==</operator> <literal type="number" pos:start="149:78" pos:end="149:78">0</literal></expr>)</condition> <block pos:start="149:81" pos:end="163:21">{<block_content pos:start="151:25" pos:end="161:43">

                        <expr_stmt pos:start="151:25" pos:end="151:40"><expr pos:start="151:25" pos:end="151:39"><name pos:start="151:25" pos:end="151:35">layer_match</name> <operator pos:start="151:37" pos:end="151:37">=</operator> <literal type="number" pos:start="151:39" pos:end="151:39">1</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="153:25" pos:end="155:76"><expr pos:start="153:25" pos:end="155:75"><call pos:start="153:25" pos:end="155:75"><name pos:start="153:25" pos:end="153:30">av_log</name><argument_list pos:start="153:31" pos:end="155:75">(<argument pos:start="153:32" pos:end="153:39"><expr pos:start="153:32" pos:end="153:39"><name pos:start="153:32" pos:end="153:39"><name pos:start="153:32" pos:end="153:32">s</name><operator pos:start="153:33" pos:end="153:34">-&gt;</operator><name pos:start="153:35" pos:end="153:39">avctx</name></name></expr></argument>, <argument pos:start="153:42" pos:end="153:52"><expr pos:start="153:42" pos:end="153:52"><name pos:start="153:42" pos:end="153:52">AV_LOG_INFO</name></expr></argument>,

                               <argument pos:start="155:32" pos:end="155:60"><expr pos:start="155:32" pos:end="155:60"><literal type="string" pos:start="155:32" pos:end="155:60">"Channel match layer : %s.\n"</literal></expr></argument>, <argument pos:start="155:63" pos:end="155:74"><expr pos:start="155:63" pos:end="155:74"><name pos:start="155:63" pos:end="155:74"><name pos:start="155:63" pos:end="155:67">ch_gb</name><operator pos:start="155:68" pos:end="155:68">.</operator><name pos:start="155:69" pos:end="155:74">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="157:25" pos:end="157:57"><expr pos:start="157:25" pos:end="157:56"><name pos:start="157:25" pos:end="157:36"><name pos:start="157:25" pos:end="157:29">ch_gb</name><operator pos:start="157:30" pos:end="157:30">.</operator><name pos:start="157:31" pos:end="157:36">buffer</name></name> <operator pos:start="157:38" pos:end="157:39">+=</operator> <call pos:start="157:41" pos:end="157:56"><name pos:start="157:41" pos:end="157:46">strlen</name><argument_list pos:start="157:47" pos:end="157:56">(<argument pos:start="157:48" pos:end="157:55"><expr pos:start="157:48" pos:end="157:55"><name pos:start="157:48" pos:end="157:55"><name pos:start="157:48" pos:end="157:48">s</name><operator pos:start="157:49" pos:end="157:50">-&gt;</operator><name pos:start="157:51" pos:end="157:55">layer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="159:25" pos:end="161:43"><if pos:start="159:25" pos:end="161:43">if <condition pos:start="159:28" pos:end="159:49">(<expr pos:start="159:29" pos:end="159:48"><operator pos:start="159:29" pos:end="159:29">*</operator><name pos:start="159:30" pos:end="159:41"><name pos:start="159:30" pos:end="159:34">ch_gb</name><operator pos:start="159:35" pos:end="159:35">.</operator><name pos:start="159:36" pos:end="159:41">buffer</name></name> <operator pos:start="159:43" pos:end="159:44">==</operator> <literal type="char" pos:start="159:46" pos:end="159:48">'.'</literal></expr>)</condition><block type="pseudo" pos:start="161:29" pos:end="161:43"><block_content pos:start="161:29" pos:end="161:43">

                            <expr_stmt pos:start="161:29" pos:end="161:43"><expr pos:start="161:29" pos:end="161:42"><name pos:start="161:29" pos:end="161:40"><name pos:start="161:29" pos:end="161:33">ch_gb</name><operator pos:start="161:34" pos:end="161:34">.</operator><name pos:start="161:35" pos:end="161:40">buffer</name></name><operator pos:start="161:41" pos:end="161:42">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>         <comment type="block" pos:start="161:53" pos:end="161:79">/* skip dot if not given */</comment>

                    </block_content>}</block></if> <else pos:start="163:23" pos:end="169:21">else <block pos:start="163:28" pos:end="169:21">{<block_content pos:start="165:25" pos:end="167:84">

                        <expr_stmt pos:start="165:25" pos:end="167:84"><expr pos:start="165:25" pos:end="167:83"><call pos:start="165:25" pos:end="167:83"><name pos:start="165:25" pos:end="165:30">av_log</name><argument_list pos:start="165:31" pos:end="167:83">(<argument pos:start="165:32" pos:end="165:39"><expr pos:start="165:32" pos:end="165:39"><name pos:start="165:32" pos:end="165:39"><name pos:start="165:32" pos:end="165:32">s</name><operator pos:start="165:33" pos:end="165:34">-&gt;</operator><name pos:start="165:35" pos:end="165:39">avctx</name></name></expr></argument>, <argument pos:start="165:42" pos:end="165:52"><expr pos:start="165:42" pos:end="165:52"><name pos:start="165:42" pos:end="165:52">AV_LOG_INFO</name></expr></argument>,

                               <argument pos:start="167:32" pos:end="167:68"><expr pos:start="167:32" pos:end="167:68"><literal type="string" pos:start="167:32" pos:end="167:68">"Channel doesn't match layer : %s.\n"</literal></expr></argument>, <argument pos:start="167:71" pos:end="167:82"><expr pos:start="167:71" pos:end="167:82"><name pos:start="167:71" pos:end="167:82"><name pos:start="167:71" pos:end="167:75">ch_gb</name><operator pos:start="167:76" pos:end="167:76">.</operator><name pos:start="167:77" pos:end="167:82">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="171:19" pos:end="175:17">else <block pos:start="171:24" pos:end="175:17">{<block_content pos:start="173:21" pos:end="173:36">

                    <expr_stmt pos:start="173:21" pos:end="173:36"><expr pos:start="173:21" pos:end="173:35"><name pos:start="173:21" pos:end="173:31">layer_match</name> <operator pos:start="173:33" pos:end="173:33">=</operator> <literal type="number" pos:start="173:35" pos:end="173:35">1</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <if_stmt pos:start="179:17" pos:end="227:17"><if pos:start="179:17" pos:end="227:17">if <condition pos:start="179:20" pos:end="179:32">(<expr pos:start="179:21" pos:end="179:31"><name pos:start="179:21" pos:end="179:31">layer_match</name></expr>)</condition> <block pos:start="179:34" pos:end="227:17">{<block_content pos:start="181:21" pos:end="225:21"> <comment type="block" pos:start="179:36" pos:end="179:88">/* only search channel if the layer match is valid */</comment>

                    <if_stmt pos:start="181:21" pos:end="225:21"><if pos:start="181:21" pos:end="191:21">if <condition pos:start="181:24" pos:end="185:51">(<expr pos:start="181:25" pos:end="185:50"><operator pos:start="181:25" pos:end="181:25">!</operator><call pos:start="181:26" pos:end="181:50"><name pos:start="181:26" pos:end="181:31">strcmp</name><argument_list pos:start="181:32" pos:end="181:50">(<argument pos:start="181:33" pos:end="181:44"><expr pos:start="181:33" pos:end="181:44"><name pos:start="181:33" pos:end="181:44"><name pos:start="181:33" pos:end="181:37">ch_gb</name><operator pos:start="181:38" pos:end="181:38">.</operator><name pos:start="181:39" pos:end="181:44">buffer</name></name></expr></argument>, <argument pos:start="181:47" pos:end="181:49"><expr pos:start="181:47" pos:end="181:49"><literal type="string" pos:start="181:47" pos:end="181:49">"R"</literal></expr></argument>)</argument_list></call> <operator pos:start="181:52" pos:end="181:53">||</operator>

                        <operator pos:start="183:25" pos:end="183:25">!</operator><call pos:start="183:26" pos:end="183:50"><name pos:start="183:26" pos:end="183:31">strcmp</name><argument_list pos:start="183:32" pos:end="183:50">(<argument pos:start="183:33" pos:end="183:44"><expr pos:start="183:33" pos:end="183:44"><name pos:start="183:33" pos:end="183:44"><name pos:start="183:33" pos:end="183:37">ch_gb</name><operator pos:start="183:38" pos:end="183:38">.</operator><name pos:start="183:39" pos:end="183:44">buffer</name></name></expr></argument>, <argument pos:start="183:47" pos:end="183:49"><expr pos:start="183:47" pos:end="183:49"><literal type="string" pos:start="183:47" pos:end="183:49">"X"</literal></expr></argument>)</argument_list></call> <operator pos:start="183:52" pos:end="183:53">||</operator>

                        <operator pos:start="185:25" pos:end="185:25">!</operator><call pos:start="185:26" pos:end="185:50"><name pos:start="185:26" pos:end="185:31">strcmp</name><argument_list pos:start="185:32" pos:end="185:50">(<argument pos:start="185:33" pos:end="185:44"><expr pos:start="185:33" pos:end="185:44"><name pos:start="185:33" pos:end="185:44"><name pos:start="185:33" pos:end="185:37">ch_gb</name><operator pos:start="185:38" pos:end="185:38">.</operator><name pos:start="185:39" pos:end="185:44">buffer</name></name></expr></argument>, <argument pos:start="185:47" pos:end="185:49"><expr pos:start="185:47" pos:end="185:49"><literal type="string" pos:start="185:47" pos:end="185:49">"U"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="185:53" pos:end="191:21">{<block_content pos:start="187:25" pos:end="189:39">

                        <expr_stmt pos:start="187:25" pos:end="187:42"><expr pos:start="187:25" pos:end="187:41"><name pos:start="187:25" pos:end="187:37">channel_index</name> <operator pos:start="187:39" pos:end="187:39">=</operator> <literal type="number" pos:start="187:41" pos:end="187:41">0</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="189:25" pos:end="189:39"><expr pos:start="189:25" pos:end="189:38"><name pos:start="189:25" pos:end="189:34"><name pos:start="189:25" pos:end="189:25">s</name><operator pos:start="189:26" pos:end="189:27">-&gt;</operator><name pos:start="189:28" pos:end="189:34">is_luma</name></name> <operator pos:start="189:36" pos:end="189:36">=</operator> <literal type="number" pos:start="189:38" pos:end="189:38">0</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="191:23" pos:end="199:21">else if <condition pos:start="191:31" pos:end="193:58">(<expr pos:start="191:32" pos:end="193:57"><operator pos:start="191:32" pos:end="191:32">!</operator><call pos:start="191:33" pos:end="191:57"><name pos:start="191:33" pos:end="191:38">strcmp</name><argument_list pos:start="191:39" pos:end="191:57">(<argument pos:start="191:40" pos:end="191:51"><expr pos:start="191:40" pos:end="191:51"><name pos:start="191:40" pos:end="191:51"><name pos:start="191:40" pos:end="191:44">ch_gb</name><operator pos:start="191:45" pos:end="191:45">.</operator><name pos:start="191:46" pos:end="191:51">buffer</name></name></expr></argument>, <argument pos:start="191:54" pos:end="191:56"><expr pos:start="191:54" pos:end="191:56"><literal type="string" pos:start="191:54" pos:end="191:56">"G"</literal></expr></argument>)</argument_list></call> <operator pos:start="191:59" pos:end="191:60">||</operator>

                               <operator pos:start="193:32" pos:end="193:32">!</operator><call pos:start="193:33" pos:end="193:57"><name pos:start="193:33" pos:end="193:38">strcmp</name><argument_list pos:start="193:39" pos:end="193:57">(<argument pos:start="193:40" pos:end="193:51"><expr pos:start="193:40" pos:end="193:51"><name pos:start="193:40" pos:end="193:51"><name pos:start="193:40" pos:end="193:44">ch_gb</name><operator pos:start="193:45" pos:end="193:45">.</operator><name pos:start="193:46" pos:end="193:51">buffer</name></name></expr></argument>, <argument pos:start="193:54" pos:end="193:56"><expr pos:start="193:54" pos:end="193:56"><literal type="string" pos:start="193:54" pos:end="193:56">"V"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="193:60" pos:end="199:21">{<block_content pos:start="195:25" pos:end="197:39">

                        <expr_stmt pos:start="195:25" pos:end="195:42"><expr pos:start="195:25" pos:end="195:41"><name pos:start="195:25" pos:end="195:37">channel_index</name> <operator pos:start="195:39" pos:end="195:39">=</operator> <literal type="number" pos:start="195:41" pos:end="195:41">1</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="197:25" pos:end="197:39"><expr pos:start="197:25" pos:end="197:38"><name pos:start="197:25" pos:end="197:34"><name pos:start="197:25" pos:end="197:25">s</name><operator pos:start="197:26" pos:end="197:27">-&gt;</operator><name pos:start="197:28" pos:end="197:34">is_luma</name></name> <operator pos:start="197:36" pos:end="197:36">=</operator> <literal type="number" pos:start="197:38" pos:end="197:38">0</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="199:23" pos:end="205:21">else if <condition pos:start="199:31" pos:end="199:58">(<expr pos:start="199:32" pos:end="199:57"><operator pos:start="199:32" pos:end="199:32">!</operator><call pos:start="199:33" pos:end="199:57"><name pos:start="199:33" pos:end="199:38">strcmp</name><argument_list pos:start="199:39" pos:end="199:57">(<argument pos:start="199:40" pos:end="199:51"><expr pos:start="199:40" pos:end="199:51"><name pos:start="199:40" pos:end="199:51"><name pos:start="199:40" pos:end="199:44">ch_gb</name><operator pos:start="199:45" pos:end="199:45">.</operator><name pos:start="199:46" pos:end="199:51">buffer</name></name></expr></argument>, <argument pos:start="199:54" pos:end="199:56"><expr pos:start="199:54" pos:end="199:56"><literal type="string" pos:start="199:54" pos:end="199:56">"Y"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="199:60" pos:end="205:21">{<block_content pos:start="201:25" pos:end="203:39">

                        <expr_stmt pos:start="201:25" pos:end="201:42"><expr pos:start="201:25" pos:end="201:41"><name pos:start="201:25" pos:end="201:37">channel_index</name> <operator pos:start="201:39" pos:end="201:39">=</operator> <literal type="number" pos:start="201:41" pos:end="201:41">1</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="203:25" pos:end="203:39"><expr pos:start="203:25" pos:end="203:38"><name pos:start="203:25" pos:end="203:34"><name pos:start="203:25" pos:end="203:25">s</name><operator pos:start="203:26" pos:end="203:27">-&gt;</operator><name pos:start="203:28" pos:end="203:34">is_luma</name></name> <operator pos:start="203:36" pos:end="203:36">=</operator> <literal type="number" pos:start="203:38" pos:end="203:38">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="205:23" pos:end="215:21">else if <condition pos:start="205:31" pos:end="209:58">(<expr pos:start="205:32" pos:end="209:57"><operator pos:start="205:32" pos:end="205:32">!</operator><call pos:start="205:33" pos:end="205:57"><name pos:start="205:33" pos:end="205:38">strcmp</name><argument_list pos:start="205:39" pos:end="205:57">(<argument pos:start="205:40" pos:end="205:51"><expr pos:start="205:40" pos:end="205:51"><name pos:start="205:40" pos:end="205:51"><name pos:start="205:40" pos:end="205:44">ch_gb</name><operator pos:start="205:45" pos:end="205:45">.</operator><name pos:start="205:46" pos:end="205:51">buffer</name></name></expr></argument>, <argument pos:start="205:54" pos:end="205:56"><expr pos:start="205:54" pos:end="205:56"><literal type="string" pos:start="205:54" pos:end="205:56">"B"</literal></expr></argument>)</argument_list></call> <operator pos:start="205:59" pos:end="205:60">||</operator>

                               <operator pos:start="207:32" pos:end="207:32">!</operator><call pos:start="207:33" pos:end="207:57"><name pos:start="207:33" pos:end="207:38">strcmp</name><argument_list pos:start="207:39" pos:end="207:57">(<argument pos:start="207:40" pos:end="207:51"><expr pos:start="207:40" pos:end="207:51"><name pos:start="207:40" pos:end="207:51"><name pos:start="207:40" pos:end="207:44">ch_gb</name><operator pos:start="207:45" pos:end="207:45">.</operator><name pos:start="207:46" pos:end="207:51">buffer</name></name></expr></argument>, <argument pos:start="207:54" pos:end="207:56"><expr pos:start="207:54" pos:end="207:56"><literal type="string" pos:start="207:54" pos:end="207:56">"Z"</literal></expr></argument>)</argument_list></call> <operator pos:start="207:59" pos:end="207:60">||</operator>

                               <operator pos:start="209:32" pos:end="209:32">!</operator><call pos:start="209:33" pos:end="209:57"><name pos:start="209:33" pos:end="209:38">strcmp</name><argument_list pos:start="209:39" pos:end="209:57">(<argument pos:start="209:40" pos:end="209:51"><expr pos:start="209:40" pos:end="209:51"><name pos:start="209:40" pos:end="209:51"><name pos:start="209:40" pos:end="209:44">ch_gb</name><operator pos:start="209:45" pos:end="209:45">.</operator><name pos:start="209:46" pos:end="209:51">buffer</name></name></expr></argument>, <argument pos:start="209:54" pos:end="209:56"><expr pos:start="209:54" pos:end="209:56"><literal type="string" pos:start="209:54" pos:end="209:56">"W"</literal></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="209:59" pos:end="215:21">{<block_content pos:start="211:32" pos:end="213:39">

                               <expr_stmt pos:start="211:32" pos:end="211:49"><expr pos:start="211:32" pos:end="211:48"><name pos:start="211:32" pos:end="211:44">channel_index</name> <operator pos:start="211:46" pos:end="211:46">=</operator> <literal type="number" pos:start="211:48" pos:end="211:48">2</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="213:25" pos:end="213:39"><expr pos:start="213:25" pos:end="213:38"><name pos:start="213:25" pos:end="213:34"><name pos:start="213:25" pos:end="213:25">s</name><operator pos:start="213:26" pos:end="213:27">-&gt;</operator><name pos:start="213:28" pos:end="213:34">is_luma</name></name> <operator pos:start="213:36" pos:end="213:36">=</operator> <literal type="number" pos:start="213:38" pos:end="213:38">0</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="215:23" pos:end="219:21">else if <condition pos:start="215:31" pos:end="215:58">(<expr pos:start="215:32" pos:end="215:57"><operator pos:start="215:32" pos:end="215:32">!</operator><call pos:start="215:33" pos:end="215:57"><name pos:start="215:33" pos:end="215:38">strcmp</name><argument_list pos:start="215:39" pos:end="215:57">(<argument pos:start="215:40" pos:end="215:51"><expr pos:start="215:40" pos:end="215:51"><name pos:start="215:40" pos:end="215:51"><name pos:start="215:40" pos:end="215:44">ch_gb</name><operator pos:start="215:45" pos:end="215:45">.</operator><name pos:start="215:46" pos:end="215:51">buffer</name></name></expr></argument>, <argument pos:start="215:54" pos:end="215:56"><expr pos:start="215:54" pos:end="215:56"><literal type="string" pos:start="215:54" pos:end="215:56">"A"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="215:60" pos:end="219:21">{<block_content pos:start="217:25" pos:end="217:42">

                        <expr_stmt pos:start="217:25" pos:end="217:42"><expr pos:start="217:25" pos:end="217:41"><name pos:start="217:25" pos:end="217:37">channel_index</name> <operator pos:start="217:39" pos:end="217:39">=</operator> <literal type="number" pos:start="217:41" pos:end="217:41">3</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="219:23" pos:end="225:21">else <block pos:start="219:28" pos:end="225:21">{<block_content pos:start="221:25" pos:end="223:78">

                        <expr_stmt pos:start="221:25" pos:end="223:78"><expr pos:start="221:25" pos:end="223:77"><call pos:start="221:25" pos:end="223:77"><name pos:start="221:25" pos:end="221:30">av_log</name><argument_list pos:start="221:31" pos:end="223:77">(<argument pos:start="221:32" pos:end="221:39"><expr pos:start="221:32" pos:end="221:39"><name pos:start="221:32" pos:end="221:39"><name pos:start="221:32" pos:end="221:32">s</name><operator pos:start="221:33" pos:end="221:34">-&gt;</operator><name pos:start="221:35" pos:end="221:39">avctx</name></name></expr></argument>, <argument pos:start="221:42" pos:end="221:55"><expr pos:start="221:42" pos:end="221:55"><name pos:start="221:42" pos:end="221:55">AV_LOG_WARNING</name></expr></argument>,

                               <argument pos:start="223:32" pos:end="223:62"><expr pos:start="223:32" pos:end="223:62"><literal type="string" pos:start="223:32" pos:end="223:62">"Unsupported channel %.256s.\n"</literal></expr></argument>, <argument pos:start="223:65" pos:end="223:76"><expr pos:start="223:65" pos:end="223:76"><name pos:start="223:65" pos:end="223:76"><name pos:start="223:65" pos:end="223:69">ch_gb</name><operator pos:start="223:70" pos:end="223:70">.</operator><name pos:start="223:71" pos:end="223:76">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if></if_stmt>



                <comment type="block" pos:start="231:17" pos:end="231:44">/* skip until you get a 0 */</comment>

                <while pos:start="233:17" pos:end="237:29">while <condition pos:start="233:23" pos:end="235:52">(<expr pos:start="233:24" pos:end="235:51"><call pos:start="233:24" pos:end="233:57"><name pos:start="233:24" pos:end="233:49">bytestream2_get_bytes_left</name><argument_list pos:start="233:50" pos:end="233:57">(<argument pos:start="233:51" pos:end="233:56"><expr pos:start="233:51" pos:end="233:56"><operator pos:start="233:51" pos:end="233:51">&amp;</operator><name pos:start="233:52" pos:end="233:56">ch_gb</name></expr></argument>)</argument_list></call> <operator pos:start="233:59" pos:end="233:59">&gt;</operator> <literal type="number" pos:start="233:61" pos:end="233:61">0</literal> <operator pos:start="233:63" pos:end="233:64">&amp;&amp;</operator>

                       <call pos:start="235:24" pos:end="235:51"><name pos:start="235:24" pos:end="235:43">bytestream2_get_byte</name><argument_list pos:start="235:44" pos:end="235:51">(<argument pos:start="235:45" pos:end="235:50"><expr pos:start="235:45" pos:end="235:50"><operator pos:start="235:45" pos:end="235:45">&amp;</operator><name pos:start="235:46" pos:end="235:50">ch_gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="237:21" pos:end="237:29"><block_content pos:start="237:21" pos:end="237:29">

                    <continue pos:start="237:21" pos:end="237:29">continue;</continue></block_content></block></while>



                <if_stmt pos:start="241:17" pos:end="247:17"><if pos:start="241:17" pos:end="247:17">if <condition pos:start="241:20" pos:end="241:59">(<expr pos:start="241:21" pos:end="241:58"><call pos:start="241:21" pos:end="241:54"><name pos:start="241:21" pos:end="241:46">bytestream2_get_bytes_left</name><argument_list pos:start="241:47" pos:end="241:54">(<argument pos:start="241:48" pos:end="241:53"><expr pos:start="241:48" pos:end="241:53"><operator pos:start="241:48" pos:end="241:48">&amp;</operator><name pos:start="241:49" pos:end="241:53">ch_gb</name></expr></argument>)</argument_list></call> <operator pos:start="241:56" pos:end="241:56">&lt;</operator> <literal type="number" pos:start="241:58" pos:end="241:58">4</literal></expr>)</condition> <block pos:start="241:61" pos:end="247:17">{<block_content pos:start="243:21" pos:end="245:47">

                    <expr_stmt pos:start="243:21" pos:end="243:75"><expr pos:start="243:21" pos:end="243:74"><call pos:start="243:21" pos:end="243:74"><name pos:start="243:21" pos:end="243:26">av_log</name><argument_list pos:start="243:27" pos:end="243:74">(<argument pos:start="243:28" pos:end="243:35"><expr pos:start="243:28" pos:end="243:35"><name pos:start="243:28" pos:end="243:35"><name pos:start="243:28" pos:end="243:28">s</name><operator pos:start="243:29" pos:end="243:30">-&gt;</operator><name pos:start="243:31" pos:end="243:35">avctx</name></name></expr></argument>, <argument pos:start="243:38" pos:end="243:49"><expr pos:start="243:38" pos:end="243:49"><name pos:start="243:38" pos:end="243:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="243:52" pos:end="243:73"><expr pos:start="243:52" pos:end="243:73"><literal type="string" pos:start="243:52" pos:end="243:73">"Incomplete header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="245:21" pos:end="245:47">return <expr pos:start="245:28" pos:end="245:46"><name pos:start="245:28" pos:end="245:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="251:17" pos:end="251:66"><expr pos:start="251:17" pos:end="251:65"><name pos:start="251:17" pos:end="251:34">current_pixel_type</name> <operator pos:start="251:36" pos:end="251:36">=</operator> <call pos:start="251:38" pos:end="251:65"><name pos:start="251:38" pos:end="251:57">bytestream2_get_le32</name><argument_list pos:start="251:58" pos:end="251:65">(<argument pos:start="251:59" pos:end="251:64"><expr pos:start="251:59" pos:end="251:64"><operator pos:start="251:59" pos:end="251:59">&amp;</operator><name pos:start="251:60" pos:end="251:64">ch_gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="253:17" pos:end="261:17"><if pos:start="253:17" pos:end="261:17">if <condition pos:start="253:20" pos:end="253:54">(<expr pos:start="253:21" pos:end="253:53"><name pos:start="253:21" pos:end="253:38">current_pixel_type</name> <operator pos:start="253:40" pos:end="253:41">&gt;=</operator> <name pos:start="253:43" pos:end="253:53">EXR_UNKNOWN</name></expr>)</condition> <block pos:start="253:56" pos:end="261:17">{<block_content pos:start="255:21" pos:end="259:48">

                    <expr_stmt pos:start="255:21" pos:end="257:70"><expr pos:start="255:21" pos:end="257:69"><call pos:start="255:21" pos:end="257:69"><name pos:start="255:21" pos:end="255:49">avpriv_report_missing_feature</name><argument_list pos:start="255:50" pos:end="257:69">(<argument pos:start="255:51" pos:end="255:58"><expr pos:start="255:51" pos:end="255:58"><name pos:start="255:51" pos:end="255:58"><name pos:start="255:51" pos:end="255:51">s</name><operator pos:start="255:52" pos:end="255:53">-&gt;</operator><name pos:start="255:54" pos:end="255:58">avctx</name></name></expr></argument>, <argument pos:start="255:61" pos:end="255:75"><expr pos:start="255:61" pos:end="255:75"><literal type="string" pos:start="255:61" pos:end="255:75">"Pixel type %d"</literal></expr></argument>,

                                                  <argument pos:start="257:51" pos:end="257:68"><expr pos:start="257:51" pos:end="257:68"><name pos:start="257:51" pos:end="257:68">current_pixel_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="259:21" pos:end="259:48">return <expr pos:start="259:28" pos:end="259:47"><name pos:start="259:28" pos:end="259:47">AVERROR_PATCHWELCOME</name></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="265:17" pos:end="265:44"><expr pos:start="265:17" pos:end="265:43"><call pos:start="265:17" pos:end="265:43"><name pos:start="265:17" pos:end="265:32">bytestream2_skip</name><argument_list pos:start="265:33" pos:end="265:43">(<argument pos:start="265:34" pos:end="265:39"><expr pos:start="265:34" pos:end="265:39"><operator pos:start="265:34" pos:end="265:34">&amp;</operator><name pos:start="265:35" pos:end="265:39">ch_gb</name></expr></argument>, <argument pos:start="265:42" pos:end="265:42"><expr pos:start="265:42" pos:end="265:42"><literal type="number" pos:start="265:42" pos:end="265:42">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="267:17" pos:end="267:52"><expr pos:start="267:17" pos:end="267:51"><name pos:start="267:17" pos:end="267:20">xsub</name> <operator pos:start="267:22" pos:end="267:22">=</operator> <call pos:start="267:24" pos:end="267:51"><name pos:start="267:24" pos:end="267:43">bytestream2_get_le32</name><argument_list pos:start="267:44" pos:end="267:51">(<argument pos:start="267:45" pos:end="267:50"><expr pos:start="267:45" pos:end="267:50"><operator pos:start="267:45" pos:end="267:45">&amp;</operator><name pos:start="267:46" pos:end="267:50">ch_gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="269:17" pos:end="269:52"><expr pos:start="269:17" pos:end="269:51"><name pos:start="269:17" pos:end="269:20">ysub</name> <operator pos:start="269:22" pos:end="269:22">=</operator> <call pos:start="269:24" pos:end="269:51"><name pos:start="269:24" pos:end="269:43">bytestream2_get_le32</name><argument_list pos:start="269:44" pos:end="269:51">(<argument pos:start="269:45" pos:end="269:50"><expr pos:start="269:45" pos:end="269:50"><operator pos:start="269:45" pos:end="269:45">&amp;</operator><name pos:start="269:46" pos:end="269:50">ch_gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="273:17" pos:end="283:17"><if pos:start="273:17" pos:end="283:17">if <condition pos:start="273:20" pos:end="273:43">(<expr pos:start="273:21" pos:end="273:42"><name pos:start="273:21" pos:end="273:24">xsub</name> <operator pos:start="273:26" pos:end="273:27">!=</operator> <literal type="number" pos:start="273:29" pos:end="273:29">1</literal> <operator pos:start="273:31" pos:end="273:32">||</operator> <name pos:start="273:34" pos:end="273:37">ysub</name> <operator pos:start="273:39" pos:end="273:40">!=</operator> <literal type="number" pos:start="273:42" pos:end="273:42">1</literal></expr>)</condition> <block pos:start="273:45" pos:end="283:17">{<block_content pos:start="275:21" pos:end="281:48">

                    <expr_stmt pos:start="275:21" pos:end="279:62"><expr pos:start="275:21" pos:end="279:61"><call pos:start="275:21" pos:end="279:61"><name pos:start="275:21" pos:end="275:49">avpriv_report_missing_feature</name><argument_list pos:start="275:50" pos:end="279:61">(<argument pos:start="275:51" pos:end="275:58"><expr pos:start="275:51" pos:end="275:58"><name pos:start="275:51" pos:end="275:58"><name pos:start="275:51" pos:end="275:51">s</name><operator pos:start="275:52" pos:end="275:53">-&gt;</operator><name pos:start="275:54" pos:end="275:58">avctx</name></name></expr></argument>,

                                                  <argument pos:start="277:51" pos:end="277:69"><expr pos:start="277:51" pos:end="277:69"><literal type="string" pos:start="277:51" pos:end="277:69">"Subsampling %dx%d"</literal></expr></argument>,

                                                  <argument pos:start="279:51" pos:end="279:54"><expr pos:start="279:51" pos:end="279:54"><name pos:start="279:51" pos:end="279:54">xsub</name></expr></argument>, <argument pos:start="279:57" pos:end="279:60"><expr pos:start="279:57" pos:end="279:60"><name pos:start="279:57" pos:end="279:60">ysub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="281:21" pos:end="281:48">return <expr pos:start="281:28" pos:end="281:47"><name pos:start="281:28" pos:end="281:47">AVERROR_PATCHWELCOME</name></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="287:17" pos:end="309:17"><if pos:start="287:17" pos:end="309:17">if <condition pos:start="287:20" pos:end="287:60">(<expr pos:start="287:21" pos:end="287:59"><name pos:start="287:21" pos:end="287:53"><name pos:start="287:21" pos:end="287:21">s</name><operator pos:start="287:22" pos:end="287:23">-&gt;</operator><name pos:start="287:24" pos:end="287:38">channel_offsets</name><index pos:start="287:39" pos:end="287:53">[<expr pos:start="287:40" pos:end="287:52"><name pos:start="287:40" pos:end="287:52">channel_index</name></expr>]</index></name> <operator pos:start="287:55" pos:end="287:56">==</operator> <operator pos:start="287:58" pos:end="287:58">-</operator><literal type="number" pos:start="287:59" pos:end="287:59">1</literal></expr>)</condition><block pos:start="287:61" pos:end="309:17">{<block_content pos:start="289:21" pos:end="307:21"><comment type="block" pos:start="287:62" pos:end="287:106">/* channel have not been previously assign */</comment>

                    <if_stmt pos:start="289:21" pos:end="307:21"><if pos:start="289:21" pos:end="307:21">if <condition pos:start="289:24" pos:end="289:43">(<expr pos:start="289:25" pos:end="289:42"><name pos:start="289:25" pos:end="289:37">channel_index</name> <operator pos:start="289:39" pos:end="289:40">&gt;=</operator> <literal type="number" pos:start="289:42" pos:end="289:42">0</literal></expr>)</condition> <block pos:start="289:45" pos:end="307:21">{<block_content pos:start="291:25" pos:end="305:86">

                        <if_stmt pos:start="291:25" pos:end="301:25"><if pos:start="291:25" pos:end="301:25">if <condition pos:start="291:28" pos:end="293:64">(<expr pos:start="291:29" pos:end="293:63"><name pos:start="291:29" pos:end="291:41"><name pos:start="291:29" pos:end="291:29">s</name><operator pos:start="291:30" pos:end="291:31">-&gt;</operator><name pos:start="291:32" pos:end="291:41">pixel_type</name></name> <operator pos:start="291:43" pos:end="291:44">!=</operator> <name pos:start="291:46" pos:end="291:56">EXR_UNKNOWN</name> <operator pos:start="291:58" pos:end="291:59">&amp;&amp;</operator>

                            <name pos:start="293:29" pos:end="293:41"><name pos:start="293:29" pos:end="293:29">s</name><operator pos:start="293:30" pos:end="293:31">-&gt;</operator><name pos:start="293:32" pos:end="293:41">pixel_type</name></name> <operator pos:start="293:43" pos:end="293:44">!=</operator> <name pos:start="293:46" pos:end="293:63">current_pixel_type</name></expr>)</condition> <block pos:start="293:66" pos:end="301:25">{<block_content pos:start="295:29" pos:end="299:55">

                            <expr_stmt pos:start="295:29" pos:end="297:76"><expr pos:start="295:29" pos:end="297:75"><call pos:start="295:29" pos:end="297:75"><name pos:start="295:29" pos:end="295:34">av_log</name><argument_list pos:start="295:35" pos:end="297:75">(<argument pos:start="295:36" pos:end="295:43"><expr pos:start="295:36" pos:end="295:43"><name pos:start="295:36" pos:end="295:43"><name pos:start="295:36" pos:end="295:36">s</name><operator pos:start="295:37" pos:end="295:38">-&gt;</operator><name pos:start="295:39" pos:end="295:43">avctx</name></name></expr></argument>, <argument pos:start="295:46" pos:end="295:57"><expr pos:start="295:46" pos:end="295:57"><name pos:start="295:46" pos:end="295:57">AV_LOG_ERROR</name></expr></argument>,

                                   <argument pos:start="297:36" pos:end="297:74"><expr pos:start="297:36" pos:end="297:74"><literal type="string" pos:start="297:36" pos:end="297:74">"RGB channels not of the same depth.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <return pos:start="299:29" pos:end="299:55">return <expr pos:start="299:36" pos:end="299:54"><name pos:start="299:36" pos:end="299:54">AVERROR_INVALIDDATA</name></expr>;</return>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="303:25" pos:end="303:79"><expr pos:start="303:25" pos:end="303:78"><name pos:start="303:25" pos:end="303:37"><name pos:start="303:25" pos:end="303:25">s</name><operator pos:start="303:26" pos:end="303:27">-&gt;</operator><name pos:start="303:28" pos:end="303:37">pixel_type</name></name>                     <operator pos:start="303:59" pos:end="303:59">=</operator> <name pos:start="303:61" pos:end="303:78">current_pixel_type</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="305:25" pos:end="305:86"><expr pos:start="305:25" pos:end="305:85"><name pos:start="305:25" pos:end="305:57"><name pos:start="305:25" pos:end="305:25">s</name><operator pos:start="305:26" pos:end="305:27">-&gt;</operator><name pos:start="305:28" pos:end="305:42">channel_offsets</name><index pos:start="305:43" pos:end="305:57">[<expr pos:start="305:44" pos:end="305:56"><name pos:start="305:44" pos:end="305:56">channel_index</name></expr>]</index></name> <operator pos:start="305:59" pos:end="305:59">=</operator> <name pos:start="305:61" pos:end="305:85"><name pos:start="305:61" pos:end="305:61">s</name><operator pos:start="305:62" pos:end="305:63">-&gt;</operator><name pos:start="305:64" pos:end="305:85">current_channel_offset</name></name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="313:17" pos:end="315:80"><expr pos:start="313:17" pos:end="315:79"><name pos:start="313:17" pos:end="313:27"><name pos:start="313:17" pos:end="313:17">s</name><operator pos:start="313:18" pos:end="313:19">-&gt;</operator><name pos:start="313:20" pos:end="313:27">channels</name></name> <operator pos:start="313:29" pos:end="313:29">=</operator> <call pos:start="313:31" pos:end="315:79"><name pos:start="313:31" pos:end="313:40">av_realloc</name><argument_list pos:start="313:41" pos:end="315:79">(<argument pos:start="313:42" pos:end="313:52"><expr pos:start="313:42" pos:end="313:52"><name pos:start="313:42" pos:end="313:52"><name pos:start="313:42" pos:end="313:42">s</name><operator pos:start="313:43" pos:end="313:44">-&gt;</operator><name pos:start="313:45" pos:end="313:52">channels</name></name></expr></argument>,

                                         <argument pos:start="315:42" pos:end="315:78"><expr pos:start="315:42" pos:end="315:78"><operator pos:start="315:42" pos:end="315:43">++</operator><name pos:start="315:44" pos:end="315:57"><name pos:start="315:44" pos:end="315:44">s</name><operator pos:start="315:45" pos:end="315:46">-&gt;</operator><name pos:start="315:47" pos:end="315:57">nb_channels</name></name> <operator pos:start="315:59" pos:end="315:59">*</operator> <sizeof pos:start="315:61" pos:end="315:78">sizeof<argument_list pos:start="315:67" pos:end="315:78">(<argument pos:start="315:68" pos:end="315:77"><expr pos:start="315:68" pos:end="315:77"><name pos:start="315:68" pos:end="315:77">EXRChannel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="317:17" pos:end="319:43"><if pos:start="317:17" pos:end="319:43">if <condition pos:start="317:20" pos:end="317:33">(<expr pos:start="317:21" pos:end="317:32"><operator pos:start="317:21" pos:end="317:21">!</operator><name pos:start="317:22" pos:end="317:32"><name pos:start="317:22" pos:end="317:22">s</name><operator pos:start="317:23" pos:end="317:24">-&gt;</operator><name pos:start="317:25" pos:end="317:32">channels</name></name></expr>)</condition><block type="pseudo" pos:start="319:21" pos:end="319:43"><block_content pos:start="319:21" pos:end="319:43">

                    <return pos:start="319:21" pos:end="319:43">return <expr pos:start="319:28" pos:end="319:42"><call pos:start="319:28" pos:end="319:42"><name pos:start="319:28" pos:end="319:34">AVERROR</name><argument_list pos:start="319:35" pos:end="319:42">(<argument pos:start="319:36" pos:end="319:41"><expr pos:start="319:36" pos:end="319:41"><name pos:start="319:36" pos:end="319:41">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="321:17" pos:end="321:71"><expr pos:start="321:17" pos:end="321:70"><name pos:start="321:17" pos:end="321:23">channel</name>             <operator pos:start="321:37" pos:end="321:37">=</operator> <operator pos:start="321:39" pos:end="321:39">&amp;</operator><name pos:start="321:40" pos:end="321:70"><name pos:start="321:40" pos:end="321:40">s</name><operator pos:start="321:41" pos:end="321:42">-&gt;</operator><name pos:start="321:43" pos:end="321:50">channels</name><index pos:start="321:51" pos:end="321:70">[<expr pos:start="321:52" pos:end="321:69"><name pos:start="321:52" pos:end="321:65"><name pos:start="321:52" pos:end="321:52">s</name><operator pos:start="321:53" pos:end="321:54">-&gt;</operator><name pos:start="321:55" pos:end="321:65">nb_channels</name></name> <operator pos:start="321:67" pos:end="321:67">-</operator> <literal type="number" pos:start="321:69" pos:end="321:69">1</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="323:17" pos:end="323:57"><expr pos:start="323:17" pos:end="323:56"><name pos:start="323:17" pos:end="323:35"><name pos:start="323:17" pos:end="323:23">channel</name><operator pos:start="323:24" pos:end="323:25">-&gt;</operator><name pos:start="323:26" pos:end="323:35">pixel_type</name></name> <operator pos:start="323:37" pos:end="323:37">=</operator> <name pos:start="323:39" pos:end="323:56">current_pixel_type</name></expr>;</expr_stmt>

                <expr_stmt pos:start="325:17" pos:end="325:43"><expr pos:start="325:17" pos:end="325:42"><name pos:start="325:17" pos:end="325:29"><name pos:start="325:17" pos:end="325:23">channel</name><operator pos:start="325:24" pos:end="325:25">-&gt;</operator><name pos:start="325:26" pos:end="325:29">xsub</name></name>       <operator pos:start="325:37" pos:end="325:37">=</operator> <name pos:start="325:39" pos:end="325:42">xsub</name></expr>;</expr_stmt>

                <expr_stmt pos:start="327:17" pos:end="327:43"><expr pos:start="327:17" pos:end="327:42"><name pos:start="327:17" pos:end="327:29"><name pos:start="327:17" pos:end="327:23">channel</name><operator pos:start="327:24" pos:end="327:25">-&gt;</operator><name pos:start="327:26" pos:end="327:29">ysub</name></name>       <operator pos:start="327:37" pos:end="327:37">=</operator> <name pos:start="327:39" pos:end="327:42">ysub</name></expr>;</expr_stmt>



                <expr_stmt pos:start="331:17" pos:end="331:69"><expr pos:start="331:17" pos:end="331:68"><name pos:start="331:17" pos:end="331:41"><name pos:start="331:17" pos:end="331:17">s</name><operator pos:start="331:18" pos:end="331:19">-&gt;</operator><name pos:start="331:20" pos:end="331:41">current_channel_offset</name></name> <operator pos:start="331:43" pos:end="331:44">+=</operator> <literal type="number" pos:start="331:46" pos:end="331:46">1</literal> <operator pos:start="331:48" pos:end="331:49">&lt;&lt;</operator> <name pos:start="331:51" pos:end="331:68">current_pixel_type</name></expr>;</expr_stmt>

            </block_content>}</block></while>



            <comment type="block" pos:start="337:13" pos:end="339:42">/* Check if all channels are set with an offset or if the channels

             * are causing an overflow  */</comment>

            <if_stmt pos:start="341:13" pos:end="365:13"><if pos:start="341:13" pos:end="365:13">if <condition pos:start="341:16" pos:end="341:28">(<expr pos:start="341:17" pos:end="341:27"><operator pos:start="341:17" pos:end="341:17">!</operator><name pos:start="341:18" pos:end="341:27"><name pos:start="341:18" pos:end="341:18">s</name><operator pos:start="341:19" pos:end="341:20">-&gt;</operator><name pos:start="341:21" pos:end="341:27">is_luma</name></name></expr>)</condition><block pos:start="341:29" pos:end="365:13">{<block_content pos:start="343:17" pos:end="363:17"><comment type="block" pos:start="341:30" pos:end="341:77">/* if we expected to have at least 3 channels */</comment>

                <if_stmt pos:start="343:17" pos:end="363:17"><if pos:start="343:17" pos:end="363:17">if <condition pos:start="343:20" pos:end="347:54">(<expr pos:start="343:21" pos:end="347:53"><call pos:start="343:21" pos:end="347:49"><name pos:start="343:21" pos:end="343:26">FFMIN3</name><argument_list pos:start="343:27" pos:end="347:49">(<argument pos:start="343:28" pos:end="343:48"><expr pos:start="343:28" pos:end="343:48"><name pos:start="343:28" pos:end="343:48"><name pos:start="343:28" pos:end="343:28">s</name><operator pos:start="343:29" pos:end="343:30">-&gt;</operator><name pos:start="343:31" pos:end="343:45">channel_offsets</name><index pos:start="343:46" pos:end="343:48">[<expr pos:start="343:47" pos:end="343:47"><literal type="number" pos:start="343:47" pos:end="343:47">0</literal></expr>]</index></name></expr></argument>,

                           <argument pos:start="345:28" pos:end="345:48"><expr pos:start="345:28" pos:end="345:48"><name pos:start="345:28" pos:end="345:48"><name pos:start="345:28" pos:end="345:28">s</name><operator pos:start="345:29" pos:end="345:30">-&gt;</operator><name pos:start="345:31" pos:end="345:45">channel_offsets</name><index pos:start="345:46" pos:end="345:48">[<expr pos:start="345:47" pos:end="345:47"><literal type="number" pos:start="345:47" pos:end="345:47">1</literal></expr>]</index></name></expr></argument>,

                           <argument pos:start="347:28" pos:end="347:48"><expr pos:start="347:28" pos:end="347:48"><name pos:start="347:28" pos:end="347:48"><name pos:start="347:28" pos:end="347:28">s</name><operator pos:start="347:29" pos:end="347:30">-&gt;</operator><name pos:start="347:31" pos:end="347:45">channel_offsets</name><index pos:start="347:46" pos:end="347:48">[<expr pos:start="347:47" pos:end="347:47"><literal type="number" pos:start="347:47" pos:end="347:47">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="347:51" pos:end="347:51">&lt;</operator> <literal type="number" pos:start="347:53" pos:end="347:53">0</literal></expr>)</condition> <block pos:start="347:56" pos:end="363:17">{<block_content pos:start="349:21" pos:end="361:47">

                    <if_stmt pos:start="349:21" pos:end="351:81"><if pos:start="349:21" pos:end="351:81">if <condition pos:start="349:24" pos:end="349:50">(<expr pos:start="349:25" pos:end="349:49"><name pos:start="349:25" pos:end="349:45"><name pos:start="349:25" pos:end="349:25">s</name><operator pos:start="349:26" pos:end="349:27">-&gt;</operator><name pos:start="349:28" pos:end="349:42">channel_offsets</name><index pos:start="349:43" pos:end="349:45">[<expr pos:start="349:44" pos:end="349:44"><literal type="number" pos:start="349:44" pos:end="349:44">0</literal></expr>]</index></name> <operator pos:start="349:47" pos:end="349:47">&lt;</operator> <literal type="number" pos:start="349:49" pos:end="349:49">0</literal></expr>)</condition><block type="pseudo" pos:start="351:25" pos:end="351:81"><block_content pos:start="351:25" pos:end="351:81">

                        <expr_stmt pos:start="351:25" pos:end="351:81"><expr pos:start="351:25" pos:end="351:80"><call pos:start="351:25" pos:end="351:80"><name pos:start="351:25" pos:end="351:30">av_log</name><argument_list pos:start="351:31" pos:end="351:80">(<argument pos:start="351:32" pos:end="351:39"><expr pos:start="351:32" pos:end="351:39"><name pos:start="351:32" pos:end="351:39"><name pos:start="351:32" pos:end="351:32">s</name><operator pos:start="351:33" pos:end="351:34">-&gt;</operator><name pos:start="351:35" pos:end="351:39">avctx</name></name></expr></argument>, <argument pos:start="351:42" pos:end="351:53"><expr pos:start="351:42" pos:end="351:53"><name pos:start="351:42" pos:end="351:53">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="351:56" pos:end="351:79"><expr pos:start="351:56" pos:end="351:79"><literal type="string" pos:start="351:56" pos:end="351:79">"Missing red channel.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="353:21" pos:end="355:83"><if pos:start="353:21" pos:end="355:83">if <condition pos:start="353:24" pos:end="353:50">(<expr pos:start="353:25" pos:end="353:49"><name pos:start="353:25" pos:end="353:45"><name pos:start="353:25" pos:end="353:25">s</name><operator pos:start="353:26" pos:end="353:27">-&gt;</operator><name pos:start="353:28" pos:end="353:42">channel_offsets</name><index pos:start="353:43" pos:end="353:45">[<expr pos:start="353:44" pos:end="353:44"><literal type="number" pos:start="353:44" pos:end="353:44">1</literal></expr>]</index></name> <operator pos:start="353:47" pos:end="353:47">&lt;</operator> <literal type="number" pos:start="353:49" pos:end="353:49">0</literal></expr>)</condition><block type="pseudo" pos:start="355:25" pos:end="355:83"><block_content pos:start="355:25" pos:end="355:83">

                        <expr_stmt pos:start="355:25" pos:end="355:83"><expr pos:start="355:25" pos:end="355:82"><call pos:start="355:25" pos:end="355:82"><name pos:start="355:25" pos:end="355:30">av_log</name><argument_list pos:start="355:31" pos:end="355:82">(<argument pos:start="355:32" pos:end="355:39"><expr pos:start="355:32" pos:end="355:39"><name pos:start="355:32" pos:end="355:39"><name pos:start="355:32" pos:end="355:32">s</name><operator pos:start="355:33" pos:end="355:34">-&gt;</operator><name pos:start="355:35" pos:end="355:39">avctx</name></name></expr></argument>, <argument pos:start="355:42" pos:end="355:53"><expr pos:start="355:42" pos:end="355:53"><name pos:start="355:42" pos:end="355:53">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="355:56" pos:end="355:81"><expr pos:start="355:56" pos:end="355:81"><literal type="string" pos:start="355:56" pos:end="355:81">"Missing green channel.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="357:21" pos:end="359:82"><if pos:start="357:21" pos:end="359:82">if <condition pos:start="357:24" pos:end="357:50">(<expr pos:start="357:25" pos:end="357:49"><name pos:start="357:25" pos:end="357:45"><name pos:start="357:25" pos:end="357:25">s</name><operator pos:start="357:26" pos:end="357:27">-&gt;</operator><name pos:start="357:28" pos:end="357:42">channel_offsets</name><index pos:start="357:43" pos:end="357:45">[<expr pos:start="357:44" pos:end="357:44"><literal type="number" pos:start="357:44" pos:end="357:44">2</literal></expr>]</index></name> <operator pos:start="357:47" pos:end="357:47">&lt;</operator> <literal type="number" pos:start="357:49" pos:end="357:49">0</literal></expr>)</condition><block type="pseudo" pos:start="359:25" pos:end="359:82"><block_content pos:start="359:25" pos:end="359:82">

                        <expr_stmt pos:start="359:25" pos:end="359:82"><expr pos:start="359:25" pos:end="359:81"><call pos:start="359:25" pos:end="359:81"><name pos:start="359:25" pos:end="359:30">av_log</name><argument_list pos:start="359:31" pos:end="359:81">(<argument pos:start="359:32" pos:end="359:39"><expr pos:start="359:32" pos:end="359:39"><name pos:start="359:32" pos:end="359:39"><name pos:start="359:32" pos:end="359:32">s</name><operator pos:start="359:33" pos:end="359:34">-&gt;</operator><name pos:start="359:35" pos:end="359:39">avctx</name></name></expr></argument>, <argument pos:start="359:42" pos:end="359:53"><expr pos:start="359:42" pos:end="359:53"><name pos:start="359:42" pos:end="359:53">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="359:56" pos:end="359:80"><expr pos:start="359:56" pos:end="359:80"><literal type="string" pos:start="359:56" pos:end="359:80">"Missing blue channel.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <return pos:start="361:21" pos:end="361:47">return <expr pos:start="361:28" pos:end="361:46"><name pos:start="361:28" pos:end="361:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="line" pos:start="369:13" pos:end="369:52">// skip one last byte and update main gb</comment>

            <expr_stmt pos:start="371:13" pos:end="371:44"><expr pos:start="371:13" pos:end="371:43"><name pos:start="371:13" pos:end="371:24"><name pos:start="371:13" pos:end="371:13">s</name><operator pos:start="371:14" pos:end="371:15">-&gt;</operator><name pos:start="371:16" pos:end="371:17">gb</name><operator pos:start="371:18" pos:end="371:18">.</operator><name pos:start="371:19" pos:end="371:24">buffer</name></name> <operator pos:start="371:26" pos:end="371:26">=</operator> <name pos:start="371:28" pos:end="371:39"><name pos:start="371:28" pos:end="371:32">ch_gb</name><operator pos:start="371:33" pos:end="371:33">.</operator><name pos:start="371:34" pos:end="371:39">buffer</name></name> <operator pos:start="371:41" pos:end="371:41">+</operator> <literal type="number" pos:start="371:43" pos:end="371:43">1</literal></expr>;</expr_stmt>

            <continue pos:start="373:13" pos:end="373:21">continue;</continue>

        </block_content>}</block></if> <if type="elseif" pos:start="375:11" pos:end="401:9">else if <condition pos:start="375:19" pos:end="377:63">(<expr pos:start="375:20" pos:end="377:62"><operator pos:start="375:20" pos:end="375:20">(</operator><name pos:start="375:21" pos:end="375:28">var_size</name> <operator pos:start="375:30" pos:end="375:30">=</operator> <call pos:start="375:32" pos:end="377:56"><name pos:start="375:32" pos:end="375:52">check_header_variable</name><argument_list pos:start="375:53" pos:end="377:56">(<argument pos:start="375:54" pos:end="375:54"><expr pos:start="375:54" pos:end="375:54"><name pos:start="375:54" pos:end="375:54">s</name></expr></argument>, <argument pos:start="375:57" pos:end="375:68"><expr pos:start="375:57" pos:end="375:68"><literal type="string" pos:start="375:57" pos:end="375:68">"dataWindow"</literal></expr></argument>, <argument pos:start="375:71" pos:end="375:77"><expr pos:start="375:71" pos:end="375:77"><literal type="string" pos:start="375:71" pos:end="375:77">"box2i"</literal></expr></argument>,

                                                     <argument pos:start="377:54" pos:end="377:55"><expr pos:start="377:54" pos:end="377:55"><literal type="number" pos:start="377:54" pos:end="377:55">31</literal></expr></argument>)</argument_list></call><operator pos:start="377:57" pos:end="377:57">)</operator> <operator pos:start="377:59" pos:end="377:60">&gt;=</operator> <literal type="number" pos:start="377:62" pos:end="377:62">0</literal></expr>)</condition> <block pos:start="377:65" pos:end="401:9">{<block_content pos:start="379:13" pos:end="399:21">

            <if_stmt pos:start="379:13" pos:end="381:43"><if pos:start="379:13" pos:end="381:43">if <condition pos:start="379:16" pos:end="379:26">(<expr pos:start="379:17" pos:end="379:25"><operator pos:start="379:17" pos:end="379:17">!</operator><name pos:start="379:18" pos:end="379:25">var_size</name></expr>)</condition><block type="pseudo" pos:start="381:17" pos:end="381:43"><block_content pos:start="381:17" pos:end="381:43">

                <return pos:start="381:17" pos:end="381:43">return <expr pos:start="381:24" pos:end="381:42"><name pos:start="381:24" pos:end="381:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="385:13" pos:end="385:53"><expr pos:start="385:13" pos:end="385:52"><name pos:start="385:13" pos:end="385:19"><name pos:start="385:13" pos:end="385:13">s</name><operator pos:start="385:14" pos:end="385:15">-&gt;</operator><name pos:start="385:16" pos:end="385:19">xmin</name></name>   <operator pos:start="385:23" pos:end="385:23">=</operator> <call pos:start="385:25" pos:end="385:52"><name pos:start="385:25" pos:end="385:44">bytestream2_get_le32</name><argument_list pos:start="385:45" pos:end="385:52">(<argument pos:start="385:46" pos:end="385:51"><expr pos:start="385:46" pos:end="385:51"><operator pos:start="385:46" pos:end="385:46">&amp;</operator><name pos:start="385:47" pos:end="385:51"><name pos:start="385:47" pos:end="385:47">s</name><operator pos:start="385:48" pos:end="385:49">-&gt;</operator><name pos:start="385:50" pos:end="385:51">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="387:13" pos:end="387:53"><expr pos:start="387:13" pos:end="387:52"><name pos:start="387:13" pos:end="387:19"><name pos:start="387:13" pos:end="387:13">s</name><operator pos:start="387:14" pos:end="387:15">-&gt;</operator><name pos:start="387:16" pos:end="387:19">ymin</name></name>   <operator pos:start="387:23" pos:end="387:23">=</operator> <call pos:start="387:25" pos:end="387:52"><name pos:start="387:25" pos:end="387:44">bytestream2_get_le32</name><argument_list pos:start="387:45" pos:end="387:52">(<argument pos:start="387:46" pos:end="387:51"><expr pos:start="387:46" pos:end="387:51"><operator pos:start="387:46" pos:end="387:46">&amp;</operator><name pos:start="387:47" pos:end="387:51"><name pos:start="387:47" pos:end="387:47">s</name><operator pos:start="387:48" pos:end="387:49">-&gt;</operator><name pos:start="387:50" pos:end="387:51">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="389:13" pos:end="389:53"><expr pos:start="389:13" pos:end="389:52"><name pos:start="389:13" pos:end="389:19"><name pos:start="389:13" pos:end="389:13">s</name><operator pos:start="389:14" pos:end="389:15">-&gt;</operator><name pos:start="389:16" pos:end="389:19">xmax</name></name>   <operator pos:start="389:23" pos:end="389:23">=</operator> <call pos:start="389:25" pos:end="389:52"><name pos:start="389:25" pos:end="389:44">bytestream2_get_le32</name><argument_list pos:start="389:45" pos:end="389:52">(<argument pos:start="389:46" pos:end="389:51"><expr pos:start="389:46" pos:end="389:51"><operator pos:start="389:46" pos:end="389:46">&amp;</operator><name pos:start="389:47" pos:end="389:51"><name pos:start="389:47" pos:end="389:47">s</name><operator pos:start="389:48" pos:end="389:49">-&gt;</operator><name pos:start="389:50" pos:end="389:51">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="391:13" pos:end="391:53"><expr pos:start="391:13" pos:end="391:52"><name pos:start="391:13" pos:end="391:19"><name pos:start="391:13" pos:end="391:13">s</name><operator pos:start="391:14" pos:end="391:15">-&gt;</operator><name pos:start="391:16" pos:end="391:19">ymax</name></name>   <operator pos:start="391:23" pos:end="391:23">=</operator> <call pos:start="391:25" pos:end="391:52"><name pos:start="391:25" pos:end="391:44">bytestream2_get_le32</name><argument_list pos:start="391:45" pos:end="391:52">(<argument pos:start="391:46" pos:end="391:51"><expr pos:start="391:46" pos:end="391:51"><operator pos:start="391:46" pos:end="391:46">&amp;</operator><name pos:start="391:47" pos:end="391:51"><name pos:start="391:47" pos:end="391:47">s</name><operator pos:start="391:48" pos:end="391:49">-&gt;</operator><name pos:start="391:50" pos:end="391:51">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="393:13" pos:end="393:48"><expr pos:start="393:13" pos:end="393:47"><name pos:start="393:13" pos:end="393:21"><name pos:start="393:13" pos:end="393:13">s</name><operator pos:start="393:14" pos:end="393:15">-&gt;</operator><name pos:start="393:16" pos:end="393:21">xdelta</name></name> <operator pos:start="393:23" pos:end="393:23">=</operator> <operator pos:start="393:25" pos:end="393:25">(</operator><name pos:start="393:26" pos:end="393:32"><name pos:start="393:26" pos:end="393:26">s</name><operator pos:start="393:27" pos:end="393:28">-&gt;</operator><name pos:start="393:29" pos:end="393:32">xmax</name></name> <operator pos:start="393:34" pos:end="393:34">-</operator> <name pos:start="393:36" pos:end="393:42"><name pos:start="393:36" pos:end="393:36">s</name><operator pos:start="393:37" pos:end="393:38">-&gt;</operator><name pos:start="393:39" pos:end="393:42">xmin</name></name><operator pos:start="393:43" pos:end="393:43">)</operator> <operator pos:start="393:45" pos:end="393:45">+</operator> <literal type="number" pos:start="393:47" pos:end="393:47">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="395:13" pos:end="395:48"><expr pos:start="395:13" pos:end="395:47"><name pos:start="395:13" pos:end="395:21"><name pos:start="395:13" pos:end="395:13">s</name><operator pos:start="395:14" pos:end="395:15">-&gt;</operator><name pos:start="395:16" pos:end="395:21">ydelta</name></name> <operator pos:start="395:23" pos:end="395:23">=</operator> <operator pos:start="395:25" pos:end="395:25">(</operator><name pos:start="395:26" pos:end="395:32"><name pos:start="395:26" pos:end="395:26">s</name><operator pos:start="395:27" pos:end="395:28">-&gt;</operator><name pos:start="395:29" pos:end="395:32">ymax</name></name> <operator pos:start="395:34" pos:end="395:34">-</operator> <name pos:start="395:36" pos:end="395:42"><name pos:start="395:36" pos:end="395:36">s</name><operator pos:start="395:37" pos:end="395:38">-&gt;</operator><name pos:start="395:39" pos:end="395:42">ymin</name></name><operator pos:start="395:43" pos:end="395:43">)</operator> <operator pos:start="395:45" pos:end="395:45">+</operator> <literal type="number" pos:start="395:47" pos:end="395:47">1</literal></expr>;</expr_stmt>



            <continue pos:start="399:13" pos:end="399:21">continue;</continue>

        </block_content>}</block></if> <if type="elseif" pos:start="401:11" pos:end="421:9">else if <condition pos:start="401:19" pos:end="403:72">(<expr pos:start="401:20" pos:end="403:71"><operator pos:start="401:20" pos:end="401:20">(</operator><name pos:start="401:21" pos:end="401:28">var_size</name> <operator pos:start="401:30" pos:end="401:30">=</operator> <call pos:start="401:32" pos:end="403:65"><name pos:start="401:32" pos:end="401:52">check_header_variable</name><argument_list pos:start="401:53" pos:end="403:65">(<argument pos:start="401:54" pos:end="401:54"><expr pos:start="401:54" pos:end="401:54"><name pos:start="401:54" pos:end="401:54">s</name></expr></argument>, <argument pos:start="401:57" pos:end="401:71"><expr pos:start="401:57" pos:end="401:71"><literal type="string" pos:start="401:57" pos:end="401:71">"displayWindow"</literal></expr></argument>,

                                                     <argument pos:start="403:54" pos:end="403:60"><expr pos:start="403:54" pos:end="403:60"><literal type="string" pos:start="403:54" pos:end="403:60">"box2i"</literal></expr></argument>, <argument pos:start="403:63" pos:end="403:64"><expr pos:start="403:63" pos:end="403:64"><literal type="number" pos:start="403:63" pos:end="403:64">34</literal></expr></argument>)</argument_list></call><operator pos:start="403:66" pos:end="403:66">)</operator> <operator pos:start="403:68" pos:end="403:69">&gt;=</operator> <literal type="number" pos:start="403:71" pos:end="403:71">0</literal></expr>)</condition> <block pos:start="403:74" pos:end="421:9">{<block_content pos:start="405:13" pos:end="419:21">

            <if_stmt pos:start="405:13" pos:end="407:43"><if pos:start="405:13" pos:end="407:43">if <condition pos:start="405:16" pos:end="405:26">(<expr pos:start="405:17" pos:end="405:25"><operator pos:start="405:17" pos:end="405:17">!</operator><name pos:start="405:18" pos:end="405:25">var_size</name></expr>)</condition><block type="pseudo" pos:start="407:17" pos:end="407:43"><block_content pos:start="407:17" pos:end="407:43">

                <return pos:start="407:17" pos:end="407:43">return <expr pos:start="407:24" pos:end="407:42"><name pos:start="407:24" pos:end="407:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="411:13" pos:end="411:40"><expr pos:start="411:13" pos:end="411:39"><call pos:start="411:13" pos:end="411:39"><name pos:start="411:13" pos:end="411:28">bytestream2_skip</name><argument_list pos:start="411:29" pos:end="411:39">(<argument pos:start="411:30" pos:end="411:35"><expr pos:start="411:30" pos:end="411:35"><operator pos:start="411:30" pos:end="411:30">&amp;</operator><name pos:start="411:31" pos:end="411:35"><name pos:start="411:31" pos:end="411:31">s</name><operator pos:start="411:32" pos:end="411:33">-&gt;</operator><name pos:start="411:34" pos:end="411:35">gb</name></name></expr></argument>, <argument pos:start="411:38" pos:end="411:38"><expr pos:start="411:38" pos:end="411:38"><literal type="number" pos:start="411:38" pos:end="411:38">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="413:13" pos:end="413:52"><expr pos:start="413:13" pos:end="413:51"><name pos:start="413:13" pos:end="413:16"><name pos:start="413:13" pos:end="413:13">s</name><operator pos:start="413:14" pos:end="413:15">-&gt;</operator><name pos:start="413:16" pos:end="413:16">w</name></name> <operator pos:start="413:18" pos:end="413:18">=</operator> <call pos:start="413:20" pos:end="413:47"><name pos:start="413:20" pos:end="413:39">bytestream2_get_le32</name><argument_list pos:start="413:40" pos:end="413:47">(<argument pos:start="413:41" pos:end="413:46"><expr pos:start="413:41" pos:end="413:46"><operator pos:start="413:41" pos:end="413:41">&amp;</operator><name pos:start="413:42" pos:end="413:46"><name pos:start="413:42" pos:end="413:42">s</name><operator pos:start="413:43" pos:end="413:44">-&gt;</operator><name pos:start="413:45" pos:end="413:46">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="413:49" pos:end="413:49">+</operator> <literal type="number" pos:start="413:51" pos:end="413:51">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="415:13" pos:end="415:52"><expr pos:start="415:13" pos:end="415:51"><name pos:start="415:13" pos:end="415:16"><name pos:start="415:13" pos:end="415:13">s</name><operator pos:start="415:14" pos:end="415:15">-&gt;</operator><name pos:start="415:16" pos:end="415:16">h</name></name> <operator pos:start="415:18" pos:end="415:18">=</operator> <call pos:start="415:20" pos:end="415:47"><name pos:start="415:20" pos:end="415:39">bytestream2_get_le32</name><argument_list pos:start="415:40" pos:end="415:47">(<argument pos:start="415:41" pos:end="415:46"><expr pos:start="415:41" pos:end="415:46"><operator pos:start="415:41" pos:end="415:41">&amp;</operator><name pos:start="415:42" pos:end="415:46"><name pos:start="415:42" pos:end="415:42">s</name><operator pos:start="415:43" pos:end="415:44">-&gt;</operator><name pos:start="415:45" pos:end="415:46">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="415:49" pos:end="415:49">+</operator> <literal type="number" pos:start="415:51" pos:end="415:51">1</literal></expr>;</expr_stmt>



            <continue pos:start="419:13" pos:end="419:21">continue;</continue>

        </block_content>}</block></if> <if type="elseif" pos:start="421:11" pos:end="449:9">else if <condition pos:start="421:19" pos:end="423:76">(<expr pos:start="421:20" pos:end="423:75"><operator pos:start="421:20" pos:end="421:20">(</operator><name pos:start="421:21" pos:end="421:28">var_size</name> <operator pos:start="421:30" pos:end="421:30">=</operator> <call pos:start="421:32" pos:end="423:69"><name pos:start="421:32" pos:end="421:52">check_header_variable</name><argument_list pos:start="421:53" pos:end="423:69">(<argument pos:start="421:54" pos:end="421:54"><expr pos:start="421:54" pos:end="421:54"><name pos:start="421:54" pos:end="421:54">s</name></expr></argument>, <argument pos:start="421:57" pos:end="421:67"><expr pos:start="421:57" pos:end="421:67"><literal type="string" pos:start="421:57" pos:end="421:67">"lineOrder"</literal></expr></argument>,

                                                     <argument pos:start="423:54" pos:end="423:64"><expr pos:start="423:54" pos:end="423:64"><literal type="string" pos:start="423:54" pos:end="423:64">"lineOrder"</literal></expr></argument>, <argument pos:start="423:67" pos:end="423:68"><expr pos:start="423:67" pos:end="423:68"><literal type="number" pos:start="423:67" pos:end="423:68">25</literal></expr></argument>)</argument_list></call><operator pos:start="423:70" pos:end="423:70">)</operator> <operator pos:start="423:72" pos:end="423:73">&gt;=</operator> <literal type="number" pos:start="423:75" pos:end="423:75">0</literal></expr>)</condition> <block pos:start="423:78" pos:end="449:9">{<block_content pos:start="425:13" pos:end="447:21">

            <decl_stmt pos:start="425:13" pos:end="425:27"><decl pos:start="425:13" pos:end="425:26"><type pos:start="425:13" pos:end="425:15"><name pos:start="425:13" pos:end="425:15">int</name></type> <name pos:start="425:17" pos:end="425:26">line_order</name></decl>;</decl_stmt>

            <if_stmt pos:start="427:13" pos:end="429:43"><if pos:start="427:13" pos:end="429:43">if <condition pos:start="427:16" pos:end="427:26">(<expr pos:start="427:17" pos:end="427:25"><operator pos:start="427:17" pos:end="427:17">!</operator><name pos:start="427:18" pos:end="427:25">var_size</name></expr>)</condition><block type="pseudo" pos:start="429:17" pos:end="429:43"><block_content pos:start="429:17" pos:end="429:43">

                <return pos:start="429:17" pos:end="429:43">return <expr pos:start="429:24" pos:end="429:42"><name pos:start="429:24" pos:end="429:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="433:13" pos:end="433:54"><expr pos:start="433:13" pos:end="433:53"><name pos:start="433:13" pos:end="433:22">line_order</name> <operator pos:start="433:24" pos:end="433:24">=</operator> <call pos:start="433:26" pos:end="433:53"><name pos:start="433:26" pos:end="433:45">bytestream2_get_byte</name><argument_list pos:start="433:46" pos:end="433:53">(<argument pos:start="433:47" pos:end="433:52"><expr pos:start="433:47" pos:end="433:52"><operator pos:start="433:47" pos:end="433:47">&amp;</operator><name pos:start="433:48" pos:end="433:52"><name pos:start="433:48" pos:end="433:48">s</name><operator pos:start="433:49" pos:end="433:50">-&gt;</operator><name pos:start="433:51" pos:end="433:52">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="435:13" pos:end="435:76"><expr pos:start="435:13" pos:end="435:75"><call pos:start="435:13" pos:end="435:75"><name pos:start="435:13" pos:end="435:18">av_log</name><argument_list pos:start="435:19" pos:end="435:75">(<argument pos:start="435:20" pos:end="435:27"><expr pos:start="435:20" pos:end="435:27"><name pos:start="435:20" pos:end="435:27"><name pos:start="435:20" pos:end="435:20">s</name><operator pos:start="435:21" pos:end="435:22">-&gt;</operator><name pos:start="435:23" pos:end="435:27">avctx</name></name></expr></argument>, <argument pos:start="435:30" pos:end="435:41"><expr pos:start="435:30" pos:end="435:41"><name pos:start="435:30" pos:end="435:41">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="435:44" pos:end="435:62"><expr pos:start="435:44" pos:end="435:62"><literal type="string" pos:start="435:44" pos:end="435:62">"line order: %d.\n"</literal></expr></argument>, <argument pos:start="435:65" pos:end="435:74"><expr pos:start="435:65" pos:end="435:74"><name pos:start="435:65" pos:end="435:74">line_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="437:13" pos:end="443:13"><if pos:start="437:13" pos:end="443:13">if <condition pos:start="437:16" pos:end="437:31">(<expr pos:start="437:17" pos:end="437:30"><name pos:start="437:17" pos:end="437:26">line_order</name> <operator pos:start="437:28" pos:end="437:28">&gt;</operator> <literal type="number" pos:start="437:30" pos:end="437:30">2</literal></expr>)</condition> <block pos:start="437:33" pos:end="443:13">{<block_content pos:start="439:17" pos:end="441:43">

                <expr_stmt pos:start="439:17" pos:end="439:72"><expr pos:start="439:17" pos:end="439:71"><call pos:start="439:17" pos:end="439:71"><name pos:start="439:17" pos:end="439:22">av_log</name><argument_list pos:start="439:23" pos:end="439:71">(<argument pos:start="439:24" pos:end="439:31"><expr pos:start="439:24" pos:end="439:31"><name pos:start="439:24" pos:end="439:31"><name pos:start="439:24" pos:end="439:24">s</name><operator pos:start="439:25" pos:end="439:26">-&gt;</operator><name pos:start="439:27" pos:end="439:31">avctx</name></name></expr></argument>, <argument pos:start="439:34" pos:end="439:45"><expr pos:start="439:34" pos:end="439:45"><name pos:start="439:34" pos:end="439:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="439:48" pos:end="439:70"><expr pos:start="439:48" pos:end="439:70"><literal type="string" pos:start="439:48" pos:end="439:70">"Unknown line order.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="441:17" pos:end="441:43">return <expr pos:start="441:24" pos:end="441:42"><name pos:start="441:24" pos:end="441:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <continue pos:start="447:13" pos:end="447:21">continue;</continue>

        </block_content>}</block></if> <if type="elseif" pos:start="449:11" pos:end="465:9">else if <condition pos:start="449:19" pos:end="451:72">(<expr pos:start="449:20" pos:end="451:71"><operator pos:start="449:20" pos:end="449:20">(</operator><name pos:start="449:21" pos:end="449:28">var_size</name> <operator pos:start="449:30" pos:end="449:30">=</operator> <call pos:start="449:32" pos:end="451:65"><name pos:start="449:32" pos:end="449:52">check_header_variable</name><argument_list pos:start="449:53" pos:end="451:65">(<argument pos:start="449:54" pos:end="449:54"><expr pos:start="449:54" pos:end="449:54"><name pos:start="449:54" pos:end="449:54">s</name></expr></argument>, <argument pos:start="449:57" pos:end="449:74"><expr pos:start="449:57" pos:end="449:74"><literal type="string" pos:start="449:57" pos:end="449:74">"pixelAspectRatio"</literal></expr></argument>,

                                                     <argument pos:start="451:54" pos:end="451:60"><expr pos:start="451:54" pos:end="451:60"><literal type="string" pos:start="451:54" pos:end="451:60">"float"</literal></expr></argument>, <argument pos:start="451:63" pos:end="451:64"><expr pos:start="451:63" pos:end="451:64"><literal type="number" pos:start="451:63" pos:end="451:64">31</literal></expr></argument>)</argument_list></call><operator pos:start="451:66" pos:end="451:66">)</operator> <operator pos:start="451:68" pos:end="451:69">&gt;=</operator> <literal type="number" pos:start="451:71" pos:end="451:71">0</literal></expr>)</condition> <block pos:start="451:74" pos:end="465:9">{<block_content pos:start="453:13" pos:end="463:21">

            <if_stmt pos:start="453:13" pos:end="455:43"><if pos:start="453:13" pos:end="455:43">if <condition pos:start="453:16" pos:end="453:26">(<expr pos:start="453:17" pos:end="453:25"><operator pos:start="453:17" pos:end="453:17">!</operator><name pos:start="453:18" pos:end="453:25">var_size</name></expr>)</condition><block type="pseudo" pos:start="455:17" pos:end="455:43"><block_content pos:start="455:17" pos:end="455:43">

                <return pos:start="455:17" pos:end="455:43">return <expr pos:start="455:24" pos:end="455:42"><name pos:start="455:24" pos:end="455:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="459:13" pos:end="459:47"><expr pos:start="459:13" pos:end="459:46"><name pos:start="459:13" pos:end="459:15">sar</name> <operator pos:start="459:17" pos:end="459:17">=</operator> <call pos:start="459:19" pos:end="459:46"><name pos:start="459:19" pos:end="459:38">bytestream2_get_le32</name><argument_list pos:start="459:39" pos:end="459:46">(<argument pos:start="459:40" pos:end="459:45"><expr pos:start="459:40" pos:end="459:45"><operator pos:start="459:40" pos:end="459:40">&amp;</operator><name pos:start="459:41" pos:end="459:45"><name pos:start="459:41" pos:end="459:41">s</name><operator pos:start="459:42" pos:end="459:43">-&gt;</operator><name pos:start="459:44" pos:end="459:45">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <continue pos:start="463:13" pos:end="463:21">continue;</continue>

        </block_content>}</block></if> <if type="elseif" pos:start="465:11" pos:end="489:9">else if <condition pos:start="465:19" pos:end="467:78">(<expr pos:start="465:20" pos:end="467:77"><operator pos:start="465:20" pos:end="465:20">(</operator><name pos:start="465:21" pos:end="465:28">var_size</name> <operator pos:start="465:30" pos:end="465:30">=</operator> <call pos:start="465:32" pos:end="467:71"><name pos:start="465:32" pos:end="465:52">check_header_variable</name><argument_list pos:start="465:53" pos:end="467:71">(<argument pos:start="465:54" pos:end="465:54"><expr pos:start="465:54" pos:end="465:54"><name pos:start="465:54" pos:end="465:54">s</name></expr></argument>, <argument pos:start="465:57" pos:end="465:69"><expr pos:start="465:57" pos:end="465:69"><literal type="string" pos:start="465:57" pos:end="465:69">"compression"</literal></expr></argument>,

                                                     <argument pos:start="467:54" pos:end="467:66"><expr pos:start="467:54" pos:end="467:66"><literal type="string" pos:start="467:54" pos:end="467:66">"compression"</literal></expr></argument>, <argument pos:start="467:69" pos:end="467:70"><expr pos:start="467:69" pos:end="467:70"><literal type="number" pos:start="467:69" pos:end="467:70">29</literal></expr></argument>)</argument_list></call><operator pos:start="467:72" pos:end="467:72">)</operator> <operator pos:start="467:74" pos:end="467:75">&gt;=</operator> <literal type="number" pos:start="467:77" pos:end="467:77">0</literal></expr>)</condition> <block pos:start="467:80" pos:end="489:9">{<block_content pos:start="469:13" pos:end="487:21">

            <if_stmt pos:start="469:13" pos:end="471:43"><if pos:start="469:13" pos:end="471:43">if <condition pos:start="469:16" pos:end="469:26">(<expr pos:start="469:17" pos:end="469:25"><operator pos:start="469:17" pos:end="469:17">!</operator><name pos:start="469:18" pos:end="469:25">var_size</name></expr>)</condition><block type="pseudo" pos:start="471:17" pos:end="471:43"><block_content pos:start="471:17" pos:end="471:43">

                <return pos:start="471:17" pos:end="471:43">return <expr pos:start="471:24" pos:end="471:42"><name pos:start="471:24" pos:end="471:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



            <if_stmt pos:start="475:13" pos:end="483:71"><if pos:start="475:13" pos:end="477:62">if <condition pos:start="475:16" pos:end="475:43">(<expr pos:start="475:17" pos:end="475:42"><name pos:start="475:17" pos:end="475:30"><name pos:start="475:17" pos:end="475:17">s</name><operator pos:start="475:18" pos:end="475:19">-&gt;</operator><name pos:start="475:20" pos:end="475:30">compression</name></name> <operator pos:start="475:32" pos:end="475:33">==</operator> <name pos:start="475:35" pos:end="475:42">EXR_UNKN</name></expr>)</condition><block type="pseudo" pos:start="477:17" pos:end="477:62"><block_content pos:start="477:17" pos:end="477:62">

                <expr_stmt pos:start="477:17" pos:end="477:62"><expr pos:start="477:17" pos:end="477:61"><name pos:start="477:17" pos:end="477:30"><name pos:start="477:17" pos:end="477:17">s</name><operator pos:start="477:18" pos:end="477:19">-&gt;</operator><name pos:start="477:20" pos:end="477:30">compression</name></name> <operator pos:start="477:32" pos:end="477:32">=</operator> <call pos:start="477:34" pos:end="477:61"><name pos:start="477:34" pos:end="477:53">bytestream2_get_byte</name><argument_list pos:start="477:54" pos:end="477:61">(<argument pos:start="477:55" pos:end="477:60"><expr pos:start="477:55" pos:end="477:60"><operator pos:start="477:55" pos:end="477:55">&amp;</operator><name pos:start="477:56" pos:end="477:60"><name pos:start="477:56" pos:end="477:56">s</name><operator pos:start="477:57" pos:end="477:58">-&gt;</operator><name pos:start="477:59" pos:end="477:60">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="479:13" pos:end="483:71">else<block type="pseudo" pos:start="481:17" pos:end="483:71"><block_content pos:start="481:17" pos:end="483:71">

                <expr_stmt pos:start="481:17" pos:end="483:71"><expr pos:start="481:17" pos:end="483:70"><call pos:start="481:17" pos:end="483:70"><name pos:start="481:17" pos:end="481:22">av_log</name><argument_list pos:start="481:23" pos:end="483:70">(<argument pos:start="481:24" pos:end="481:31"><expr pos:start="481:24" pos:end="481:31"><name pos:start="481:24" pos:end="481:31"><name pos:start="481:24" pos:end="481:24">s</name><operator pos:start="481:25" pos:end="481:26">-&gt;</operator><name pos:start="481:27" pos:end="481:31">avctx</name></name></expr></argument>, <argument pos:start="481:34" pos:end="481:47"><expr pos:start="481:34" pos:end="481:47"><name pos:start="481:34" pos:end="481:47">AV_LOG_WARNING</name></expr></argument>,

                       <argument pos:start="483:24" pos:end="483:69"><expr pos:start="483:24" pos:end="483:69"><literal type="string" pos:start="483:24" pos:end="483:69">"Found more than one compression attribute.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <continue pos:start="487:13" pos:end="487:21">continue;</continue>

        </block_content>}</block></if> <if type="elseif" pos:start="489:11" pos:end="545:9">else if <condition pos:start="489:19" pos:end="491:75">(<expr pos:start="489:20" pos:end="491:74"><operator pos:start="489:20" pos:end="489:20">(</operator><name pos:start="489:21" pos:end="489:28">var_size</name> <operator pos:start="489:30" pos:end="489:30">=</operator> <call pos:start="489:32" pos:end="491:68"><name pos:start="489:32" pos:end="489:52">check_header_variable</name><argument_list pos:start="489:53" pos:end="491:68">(<argument pos:start="489:54" pos:end="489:54"><expr pos:start="489:54" pos:end="489:54"><name pos:start="489:54" pos:end="489:54">s</name></expr></argument>, <argument pos:start="489:57" pos:end="489:63"><expr pos:start="489:57" pos:end="489:63"><literal type="string" pos:start="489:57" pos:end="489:63">"tiles"</literal></expr></argument>,

                                                     <argument pos:start="491:54" pos:end="491:63"><expr pos:start="491:54" pos:end="491:63"><literal type="string" pos:start="491:54" pos:end="491:63">"tiledesc"</literal></expr></argument>, <argument pos:start="491:66" pos:end="491:67"><expr pos:start="491:66" pos:end="491:67"><literal type="number" pos:start="491:66" pos:end="491:67">22</literal></expr></argument>)</argument_list></call><operator pos:start="491:69" pos:end="491:69">)</operator> <operator pos:start="491:71" pos:end="491:72">&gt;=</operator> <literal type="number" pos:start="491:74" pos:end="491:74">0</literal></expr>)</condition> <block pos:start="491:77" pos:end="545:9">{<block_content pos:start="493:13" pos:end="543:21">

            <decl_stmt pos:start="493:13" pos:end="493:27"><decl pos:start="493:13" pos:end="493:26"><type pos:start="493:13" pos:end="493:16"><name pos:start="493:13" pos:end="493:16">char</name></type> <name pos:start="493:18" pos:end="493:26">tileLevel</name></decl>;</decl_stmt>



            <if_stmt pos:start="497:13" pos:end="501:106"><if pos:start="497:13" pos:end="501:106">if <condition pos:start="497:16" pos:end="497:28">(<expr pos:start="497:17" pos:end="497:27"><operator pos:start="497:17" pos:end="497:17">!</operator><name pos:start="497:18" pos:end="497:27"><name pos:start="497:18" pos:end="497:18">s</name><operator pos:start="497:19" pos:end="497:20">-&gt;</operator><name pos:start="497:21" pos:end="497:27">is_tile</name></name></expr>)</condition><block type="pseudo" pos:start="499:17" pos:end="501:106"><block_content pos:start="499:17" pos:end="501:106">

                <expr_stmt pos:start="499:17" pos:end="501:106"><expr pos:start="499:17" pos:end="501:105"><call pos:start="499:17" pos:end="501:105"><name pos:start="499:17" pos:end="499:22">av_log</name><argument_list pos:start="499:23" pos:end="501:105">(<argument pos:start="499:24" pos:end="499:31"><expr pos:start="499:24" pos:end="499:31"><name pos:start="499:24" pos:end="499:31"><name pos:start="499:24" pos:end="499:24">s</name><operator pos:start="499:25" pos:end="499:26">-&gt;</operator><name pos:start="499:27" pos:end="499:31">avctx</name></name></expr></argument>, <argument pos:start="499:34" pos:end="499:47"><expr pos:start="499:34" pos:end="499:47"><name pos:start="499:34" pos:end="499:47">AV_LOG_WARNING</name></expr></argument>,

                       <argument pos:start="501:24" pos:end="501:104"><expr pos:start="501:24" pos:end="501:104"><literal type="string" pos:start="501:24" pos:end="501:104">"Found tile attribute and scanline flags. Exr will be interpreted as scanline.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="505:13" pos:end="505:62"><expr pos:start="505:13" pos:end="505:61"><name pos:start="505:13" pos:end="505:30"><name pos:start="505:13" pos:end="505:13">s</name><operator pos:start="505:14" pos:end="505:15">-&gt;</operator><name pos:start="505:16" pos:end="505:24">tile_attr</name><operator pos:start="505:25" pos:end="505:25">.</operator><name pos:start="505:26" pos:end="505:30">xSize</name></name> <operator pos:start="505:32" pos:end="505:32">=</operator> <call pos:start="505:34" pos:end="505:61"><name pos:start="505:34" pos:end="505:53">bytestream2_get_le32</name><argument_list pos:start="505:54" pos:end="505:61">(<argument pos:start="505:55" pos:end="505:60"><expr pos:start="505:55" pos:end="505:60"><operator pos:start="505:55" pos:end="505:55">&amp;</operator><name pos:start="505:56" pos:end="505:60"><name pos:start="505:56" pos:end="505:56">s</name><operator pos:start="505:57" pos:end="505:58">-&gt;</operator><name pos:start="505:59" pos:end="505:60">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="507:13" pos:end="507:62"><expr pos:start="507:13" pos:end="507:61"><name pos:start="507:13" pos:end="507:30"><name pos:start="507:13" pos:end="507:13">s</name><operator pos:start="507:14" pos:end="507:15">-&gt;</operator><name pos:start="507:16" pos:end="507:24">tile_attr</name><operator pos:start="507:25" pos:end="507:25">.</operator><name pos:start="507:26" pos:end="507:30">ySize</name></name> <operator pos:start="507:32" pos:end="507:32">=</operator> <call pos:start="507:34" pos:end="507:61"><name pos:start="507:34" pos:end="507:53">bytestream2_get_le32</name><argument_list pos:start="507:54" pos:end="507:61">(<argument pos:start="507:55" pos:end="507:60"><expr pos:start="507:55" pos:end="507:60"><operator pos:start="507:55" pos:end="507:55">&amp;</operator><name pos:start="507:56" pos:end="507:60"><name pos:start="507:56" pos:end="507:56">s</name><operator pos:start="507:57" pos:end="507:58">-&gt;</operator><name pos:start="507:59" pos:end="507:60">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="511:13" pos:end="511:53"><expr pos:start="511:13" pos:end="511:52"><name pos:start="511:13" pos:end="511:21">tileLevel</name> <operator pos:start="511:23" pos:end="511:23">=</operator> <call pos:start="511:25" pos:end="511:52"><name pos:start="511:25" pos:end="511:44">bytestream2_get_byte</name><argument_list pos:start="511:45" pos:end="511:52">(<argument pos:start="511:46" pos:end="511:51"><expr pos:start="511:46" pos:end="511:51"><operator pos:start="511:46" pos:end="511:46">&amp;</operator><name pos:start="511:47" pos:end="511:51"><name pos:start="511:47" pos:end="511:47">s</name><operator pos:start="511:48" pos:end="511:49">-&gt;</operator><name pos:start="511:50" pos:end="511:51">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="513:13" pos:end="513:55"><expr pos:start="513:13" pos:end="513:54"><name pos:start="513:13" pos:end="513:35"><name pos:start="513:13" pos:end="513:13">s</name><operator pos:start="513:14" pos:end="513:15">-&gt;</operator><name pos:start="513:16" pos:end="513:24">tile_attr</name><operator pos:start="513:25" pos:end="513:25">.</operator><name pos:start="513:26" pos:end="513:35">level_mode</name></name> <operator pos:start="513:37" pos:end="513:37">=</operator> <name pos:start="513:39" pos:end="513:47">tileLevel</name> <operator pos:start="513:49" pos:end="513:49">&amp;</operator> <literal type="number" pos:start="513:51" pos:end="513:54">0x0f</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="515:13" pos:end="515:63"><expr pos:start="515:13" pos:end="515:62"><name pos:start="515:13" pos:end="515:36"><name pos:start="515:13" pos:end="515:13">s</name><operator pos:start="515:14" pos:end="515:15">-&gt;</operator><name pos:start="515:16" pos:end="515:24">tile_attr</name><operator pos:start="515:25" pos:end="515:25">.</operator><name pos:start="515:26" pos:end="515:36">level_round</name></name> <operator pos:start="515:38" pos:end="515:38">=</operator> <operator pos:start="515:40" pos:end="515:40">(</operator><name pos:start="515:41" pos:end="515:49">tileLevel</name> <operator pos:start="515:51" pos:end="515:52">&gt;&gt;</operator> <literal type="number" pos:start="515:54" pos:end="515:54">4</literal><operator pos:start="515:55" pos:end="515:55">)</operator> <operator pos:start="515:57" pos:end="515:57">&amp;</operator> <literal type="number" pos:start="515:59" pos:end="515:62">0x0f</literal></expr>;</expr_stmt>



            <if_stmt pos:start="519:13" pos:end="527:13"><if pos:start="519:13" pos:end="527:13">if <condition pos:start="519:16" pos:end="519:66">(<expr pos:start="519:17" pos:end="519:65"><name pos:start="519:17" pos:end="519:39"><name pos:start="519:17" pos:end="519:17">s</name><operator pos:start="519:18" pos:end="519:19">-&gt;</operator><name pos:start="519:20" pos:end="519:28">tile_attr</name><operator pos:start="519:29" pos:end="519:29">.</operator><name pos:start="519:30" pos:end="519:39">level_mode</name></name> <operator pos:start="519:41" pos:end="519:42">&gt;=</operator> <name pos:start="519:44" pos:end="519:65">EXR_TILE_LEVEL_UNKNOWN</name></expr>)</condition><block pos:start="519:67" pos:end="527:13">{<block_content pos:start="521:17" pos:end="525:44">

                <expr_stmt pos:start="521:17" pos:end="523:71"><expr pos:start="521:17" pos:end="523:70"><call pos:start="521:17" pos:end="523:70"><name pos:start="521:17" pos:end="521:45">avpriv_report_missing_feature</name><argument_list pos:start="521:46" pos:end="523:70">(<argument pos:start="521:47" pos:end="521:54"><expr pos:start="521:47" pos:end="521:54"><name pos:start="521:47" pos:end="521:54"><name pos:start="521:47" pos:end="521:47">s</name><operator pos:start="521:48" pos:end="521:49">-&gt;</operator><name pos:start="521:50" pos:end="521:54">avctx</name></name></expr></argument>, <argument pos:start="521:57" pos:end="521:76"><expr pos:start="521:57" pos:end="521:76"><literal type="string" pos:start="521:57" pos:end="521:76">"Tile level mode %d"</literal></expr></argument>,

                                              <argument pos:start="523:47" pos:end="523:69"><expr pos:start="523:47" pos:end="523:69"><name pos:start="523:47" pos:end="523:69"><name pos:start="523:47" pos:end="523:47">s</name><operator pos:start="523:48" pos:end="523:49">-&gt;</operator><name pos:start="523:50" pos:end="523:58">tile_attr</name><operator pos:start="523:59" pos:end="523:59">.</operator><name pos:start="523:60" pos:end="523:69">level_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="525:17" pos:end="525:44">return <expr pos:start="525:24" pos:end="525:43"><name pos:start="525:24" pos:end="525:43">AVERROR_PATCHWELCOME</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="531:13" pos:end="539:13"><if pos:start="531:13" pos:end="539:13">if <condition pos:start="531:16" pos:end="531:67">(<expr pos:start="531:17" pos:end="531:66"><name pos:start="531:17" pos:end="531:40"><name pos:start="531:17" pos:end="531:17">s</name><operator pos:start="531:18" pos:end="531:19">-&gt;</operator><name pos:start="531:20" pos:end="531:28">tile_attr</name><operator pos:start="531:29" pos:end="531:29">.</operator><name pos:start="531:30" pos:end="531:40">level_round</name></name> <operator pos:start="531:42" pos:end="531:43">&gt;=</operator> <name pos:start="531:45" pos:end="531:66">EXR_TILE_ROUND_UNKNOWN</name></expr>)</condition> <block pos:start="531:69" pos:end="539:13">{<block_content pos:start="533:17" pos:end="537:44">

                <expr_stmt pos:start="533:17" pos:end="535:72"><expr pos:start="533:17" pos:end="535:71"><call pos:start="533:17" pos:end="535:71"><name pos:start="533:17" pos:end="533:45">avpriv_report_missing_feature</name><argument_list pos:start="533:46" pos:end="535:71">(<argument pos:start="533:47" pos:end="533:54"><expr pos:start="533:47" pos:end="533:54"><name pos:start="533:47" pos:end="533:54"><name pos:start="533:47" pos:end="533:47">s</name><operator pos:start="533:48" pos:end="533:49">-&gt;</operator><name pos:start="533:50" pos:end="533:54">avctx</name></name></expr></argument>, <argument pos:start="533:57" pos:end="533:77"><expr pos:start="533:57" pos:end="533:77"><literal type="string" pos:start="533:57" pos:end="533:77">"Tile level round %d"</literal></expr></argument>,

                                              <argument pos:start="535:47" pos:end="535:70"><expr pos:start="535:47" pos:end="535:70"><name pos:start="535:47" pos:end="535:70"><name pos:start="535:47" pos:end="535:47">s</name><operator pos:start="535:48" pos:end="535:49">-&gt;</operator><name pos:start="535:50" pos:end="535:58">tile_attr</name><operator pos:start="535:59" pos:end="535:59">.</operator><name pos:start="535:60" pos:end="535:70">level_round</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="537:17" pos:end="537:44">return <expr pos:start="537:24" pos:end="537:43"><name pos:start="537:24" pos:end="537:43">AVERROR_PATCHWELCOME</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <continue pos:start="543:13" pos:end="543:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="549:9" pos:end="549:55">// Check if there are enough bytes for a header</comment>

        <if_stmt pos:start="551:9" pos:end="557:9"><if pos:start="551:9" pos:end="557:9">if <condition pos:start="551:12" pos:end="551:52">(<expr pos:start="551:13" pos:end="551:51"><call pos:start="551:13" pos:end="551:46"><name pos:start="551:13" pos:end="551:38">bytestream2_get_bytes_left</name><argument_list pos:start="551:39" pos:end="551:46">(<argument pos:start="551:40" pos:end="551:45"><expr pos:start="551:40" pos:end="551:45"><operator pos:start="551:40" pos:end="551:40">&amp;</operator><name pos:start="551:41" pos:end="551:45"><name pos:start="551:41" pos:end="551:41">s</name><operator pos:start="551:42" pos:end="551:43">-&gt;</operator><name pos:start="551:44" pos:end="551:45">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="551:48" pos:end="551:49">&lt;=</operator> <literal type="number" pos:start="551:51" pos:end="551:51">9</literal></expr>)</condition> <block pos:start="551:54" pos:end="557:9">{<block_content pos:start="553:13" pos:end="555:39">

            <expr_stmt pos:start="553:13" pos:end="553:66"><expr pos:start="553:13" pos:end="553:65"><call pos:start="553:13" pos:end="553:65"><name pos:start="553:13" pos:end="553:18">av_log</name><argument_list pos:start="553:19" pos:end="553:65">(<argument pos:start="553:20" pos:end="553:27"><expr pos:start="553:20" pos:end="553:27"><name pos:start="553:20" pos:end="553:27"><name pos:start="553:20" pos:end="553:20">s</name><operator pos:start="553:21" pos:end="553:22">-&gt;</operator><name pos:start="553:23" pos:end="553:27">avctx</name></name></expr></argument>, <argument pos:start="553:30" pos:end="553:41"><expr pos:start="553:30" pos:end="553:41"><name pos:start="553:30" pos:end="553:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="553:44" pos:end="553:64"><expr pos:start="553:44" pos:end="553:64"><literal type="string" pos:start="553:44" pos:end="553:64">"Incomplete header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="555:13" pos:end="555:39">return <expr pos:start="555:20" pos:end="555:38"><name pos:start="555:20" pos:end="555:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="561:9" pos:end="561:36">// Process unknown variables</comment>

        <for pos:start="563:9" pos:end="565:54">for <control pos:start="563:13" pos:end="563:31">(<init pos:start="563:14" pos:end="563:19"><expr pos:start="563:14" pos:end="563:18"><name pos:start="563:14" pos:end="563:14">i</name> <operator pos:start="563:16" pos:end="563:16">=</operator> <literal type="number" pos:start="563:18" pos:end="563:18">0</literal></expr>;</init> <condition pos:start="563:21" pos:end="563:26"><expr pos:start="563:21" pos:end="563:25"><name pos:start="563:21" pos:end="563:21">i</name> <operator pos:start="563:23" pos:end="563:23">&lt;</operator> <literal type="number" pos:start="563:25" pos:end="563:25">2</literal></expr>;</condition> <incr pos:start="563:28" pos:end="563:30"><expr pos:start="563:28" pos:end="563:30"><name pos:start="563:28" pos:end="563:28">i</name><operator pos:start="563:29" pos:end="563:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="565:13" pos:end="565:54"><block_content pos:start="565:13" pos:end="565:54"> <comment type="line" pos:start="563:33" pos:end="563:60">// value_name and value_type</comment>

            <while pos:start="565:13" pos:end="565:54">while <condition pos:start="565:19" pos:end="565:53">(<expr pos:start="565:20" pos:end="565:52"><call pos:start="565:20" pos:end="565:47"><name pos:start="565:20" pos:end="565:39">bytestream2_get_byte</name><argument_list pos:start="565:40" pos:end="565:47">(<argument pos:start="565:41" pos:end="565:46"><expr pos:start="565:41" pos:end="565:46"><operator pos:start="565:41" pos:end="565:41">&amp;</operator><name pos:start="565:42" pos:end="565:46"><name pos:start="565:42" pos:end="565:42">s</name><operator pos:start="565:43" pos:end="565:44">-&gt;</operator><name pos:start="565:45" pos:end="565:46">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="565:49" pos:end="565:50">!=</operator> <literal type="number" pos:start="565:52" pos:end="565:52">0</literal></expr>)</condition><block type="pseudo" pos:start="565:54" pos:end="565:54"><block_content pos:start="565:54" pos:end="565:54"><empty_stmt pos:start="565:54" pos:end="565:54">;</empty_stmt></block_content></block></while></block_content></block></for>



        <comment type="line" pos:start="569:9" pos:end="569:31">// Skip variable length</comment>

        <expr_stmt pos:start="571:9" pos:end="571:63"><expr pos:start="571:9" pos:end="571:62"><call pos:start="571:9" pos:end="571:62"><name pos:start="571:9" pos:end="571:24">bytestream2_skip</name><argument_list pos:start="571:25" pos:end="571:62">(<argument pos:start="571:26" pos:end="571:31"><expr pos:start="571:26" pos:end="571:31"><operator pos:start="571:26" pos:end="571:26">&amp;</operator><name pos:start="571:27" pos:end="571:31"><name pos:start="571:27" pos:end="571:27">s</name><operator pos:start="571:28" pos:end="571:29">-&gt;</operator><name pos:start="571:30" pos:end="571:31">gb</name></name></expr></argument>, <argument pos:start="571:34" pos:end="571:61"><expr pos:start="571:34" pos:end="571:61"><call pos:start="571:34" pos:end="571:61"><name pos:start="571:34" pos:end="571:53">bytestream2_get_le32</name><argument_list pos:start="571:54" pos:end="571:61">(<argument pos:start="571:55" pos:end="571:60"><expr pos:start="571:55" pos:end="571:60"><operator pos:start="571:55" pos:end="571:55">&amp;</operator><name pos:start="571:56" pos:end="571:60"><name pos:start="571:56" pos:end="571:56">s</name><operator pos:start="571:57" pos:end="571:58">-&gt;</operator><name pos:start="571:59" pos:end="571:60">gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="577:5" pos:end="577:57"><expr pos:start="577:5" pos:end="577:56"><call pos:start="577:5" pos:end="577:56"><name pos:start="577:5" pos:end="577:14">ff_set_sar</name><argument_list pos:start="577:15" pos:end="577:56">(<argument pos:start="577:16" pos:end="577:23"><expr pos:start="577:16" pos:end="577:23"><name pos:start="577:16" pos:end="577:23"><name pos:start="577:16" pos:end="577:16">s</name><operator pos:start="577:17" pos:end="577:18">-&gt;</operator><name pos:start="577:19" pos:end="577:23">avctx</name></name></expr></argument>, <argument pos:start="577:26" pos:end="577:55"><expr pos:start="577:26" pos:end="577:55"><call pos:start="577:26" pos:end="577:55"><name pos:start="577:26" pos:end="577:31">av_d2q</name><argument_list pos:start="577:32" pos:end="577:55">(<argument pos:start="577:33" pos:end="577:49"><expr pos:start="577:33" pos:end="577:49"><call pos:start="577:33" pos:end="577:49"><name pos:start="577:33" pos:end="577:44">av_int2float</name><argument_list pos:start="577:45" pos:end="577:49">(<argument pos:start="577:46" pos:end="577:48"><expr pos:start="577:46" pos:end="577:48"><name pos:start="577:46" pos:end="577:48">sar</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="577:52" pos:end="577:54"><expr pos:start="577:52" pos:end="577:54"><literal type="number" pos:start="577:52" pos:end="577:54">255</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="581:5" pos:end="587:5"><if pos:start="581:5" pos:end="587:5">if <condition pos:start="581:8" pos:end="581:35">(<expr pos:start="581:9" pos:end="581:34"><name pos:start="581:9" pos:end="581:22"><name pos:start="581:9" pos:end="581:9">s</name><operator pos:start="581:10" pos:end="581:11">-&gt;</operator><name pos:start="581:12" pos:end="581:22">compression</name></name> <operator pos:start="581:24" pos:end="581:25">==</operator> <name pos:start="581:27" pos:end="581:34">EXR_UNKN</name></expr>)</condition> <block pos:start="581:37" pos:end="587:5">{<block_content pos:start="583:9" pos:end="585:35">

        <expr_stmt pos:start="583:9" pos:end="583:75"><expr pos:start="583:9" pos:end="583:74"><call pos:start="583:9" pos:end="583:74"><name pos:start="583:9" pos:end="583:14">av_log</name><argument_list pos:start="583:15" pos:end="583:74">(<argument pos:start="583:16" pos:end="583:23"><expr pos:start="583:16" pos:end="583:23"><name pos:start="583:16" pos:end="583:23"><name pos:start="583:16" pos:end="583:16">s</name><operator pos:start="583:17" pos:end="583:18">-&gt;</operator><name pos:start="583:19" pos:end="583:23">avctx</name></name></expr></argument>, <argument pos:start="583:26" pos:end="583:37"><expr pos:start="583:26" pos:end="583:37"><name pos:start="583:26" pos:end="583:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="583:40" pos:end="583:73"><expr pos:start="583:40" pos:end="583:73"><literal type="string" pos:start="583:40" pos:end="583:73">"Missing compression attribute.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="585:9" pos:end="585:35">return <expr pos:start="585:16" pos:end="585:34"><name pos:start="585:16" pos:end="585:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="591:5" pos:end="601:5"><if pos:start="591:5" pos:end="601:5">if <condition pos:start="591:8" pos:end="591:19">(<expr pos:start="591:9" pos:end="591:18"><name pos:start="591:9" pos:end="591:18"><name pos:start="591:9" pos:end="591:9">s</name><operator pos:start="591:10" pos:end="591:11">-&gt;</operator><name pos:start="591:12" pos:end="591:18">is_tile</name></name></expr>)</condition> <block pos:start="591:21" pos:end="601:5">{<block_content pos:start="593:9" pos:end="599:9">

        <if_stmt pos:start="593:9" pos:end="599:9"><if pos:start="593:9" pos:end="599:9">if <condition pos:start="593:12" pos:end="593:61">(<expr pos:start="593:13" pos:end="593:60"><name pos:start="593:13" pos:end="593:30"><name pos:start="593:13" pos:end="593:13">s</name><operator pos:start="593:14" pos:end="593:15">-&gt;</operator><name pos:start="593:16" pos:end="593:24">tile_attr</name><operator pos:start="593:25" pos:end="593:25">.</operator><name pos:start="593:26" pos:end="593:30">xSize</name></name> <operator pos:start="593:32" pos:end="593:32">&lt;</operator> <literal type="number" pos:start="593:34" pos:end="593:34">1</literal> <operator pos:start="593:36" pos:end="593:37">||</operator> <name pos:start="593:39" pos:end="593:56"><name pos:start="593:39" pos:end="593:39">s</name><operator pos:start="593:40" pos:end="593:41">-&gt;</operator><name pos:start="593:42" pos:end="593:50">tile_attr</name><operator pos:start="593:51" pos:end="593:51">.</operator><name pos:start="593:52" pos:end="593:56">ySize</name></name> <operator pos:start="593:58" pos:end="593:58">&lt;</operator> <literal type="number" pos:start="593:60" pos:end="593:60">1</literal></expr>)</condition> <block pos:start="593:63" pos:end="599:9">{<block_content pos:start="595:13" pos:end="597:39">

            <expr_stmt pos:start="595:13" pos:end="595:72"><expr pos:start="595:13" pos:end="595:71"><call pos:start="595:13" pos:end="595:71"><name pos:start="595:13" pos:end="595:18">av_log</name><argument_list pos:start="595:19" pos:end="595:71">(<argument pos:start="595:20" pos:end="595:27"><expr pos:start="595:20" pos:end="595:27"><name pos:start="595:20" pos:end="595:27"><name pos:start="595:20" pos:end="595:20">s</name><operator pos:start="595:21" pos:end="595:22">-&gt;</operator><name pos:start="595:23" pos:end="595:27">avctx</name></name></expr></argument>, <argument pos:start="595:30" pos:end="595:41"><expr pos:start="595:30" pos:end="595:41"><name pos:start="595:30" pos:end="595:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="595:44" pos:end="595:70"><expr pos:start="595:44" pos:end="595:70"><literal type="string" pos:start="595:44" pos:end="595:70">"Invalid tile attribute.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="597:13" pos:end="597:39">return <expr pos:start="597:20" pos:end="597:38"><name pos:start="597:20" pos:end="597:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="605:5" pos:end="611:5"><if pos:start="605:5" pos:end="611:5">if <condition pos:start="605:8" pos:end="605:48">(<expr pos:start="605:9" pos:end="605:47"><call pos:start="605:9" pos:end="605:42"><name pos:start="605:9" pos:end="605:34">bytestream2_get_bytes_left</name><argument_list pos:start="605:35" pos:end="605:42">(<argument pos:start="605:36" pos:end="605:41"><expr pos:start="605:36" pos:end="605:41"><operator pos:start="605:36" pos:end="605:36">&amp;</operator><name pos:start="605:37" pos:end="605:41"><name pos:start="605:37" pos:end="605:37">s</name><operator pos:start="605:38" pos:end="605:39">-&gt;</operator><name pos:start="605:40" pos:end="605:41">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="605:44" pos:end="605:45">&lt;=</operator> <literal type="number" pos:start="605:47" pos:end="605:47">0</literal></expr>)</condition> <block pos:start="605:50" pos:end="611:5">{<block_content pos:start="607:9" pos:end="609:35">

        <expr_stmt pos:start="607:9" pos:end="607:62"><expr pos:start="607:9" pos:end="607:61"><call pos:start="607:9" pos:end="607:61"><name pos:start="607:9" pos:end="607:14">av_log</name><argument_list pos:start="607:15" pos:end="607:61">(<argument pos:start="607:16" pos:end="607:23"><expr pos:start="607:16" pos:end="607:23"><name pos:start="607:16" pos:end="607:23"><name pos:start="607:16" pos:end="607:16">s</name><operator pos:start="607:17" pos:end="607:18">-&gt;</operator><name pos:start="607:19" pos:end="607:23">avctx</name></name></expr></argument>, <argument pos:start="607:26" pos:end="607:37"><expr pos:start="607:26" pos:end="607:37"><name pos:start="607:26" pos:end="607:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="607:40" pos:end="607:60"><expr pos:start="607:40" pos:end="607:60"><literal type="string" pos:start="607:40" pos:end="607:60">"Incomplete frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="609:9" pos:end="609:35">return <expr pos:start="609:16" pos:end="609:34"><name pos:start="609:16" pos:end="609:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="615:5" pos:end="615:24">// aaand we are done</comment>

    <expr_stmt pos:start="617:5" pos:end="617:32"><expr pos:start="617:5" pos:end="617:31"><call pos:start="617:5" pos:end="617:31"><name pos:start="617:5" pos:end="617:20">bytestream2_skip</name><argument_list pos:start="617:21" pos:end="617:31">(<argument pos:start="617:22" pos:end="617:27"><expr pos:start="617:22" pos:end="617:27"><operator pos:start="617:22" pos:end="617:22">&amp;</operator><name pos:start="617:23" pos:end="617:27"><name pos:start="617:23" pos:end="617:23">s</name><operator pos:start="617:24" pos:end="617:25">-&gt;</operator><name pos:start="617:26" pos:end="617:27">gb</name></name></expr></argument>, <argument pos:start="617:30" pos:end="617:30"><expr pos:start="617:30" pos:end="617:30"><literal type="number" pos:start="617:30" pos:end="617:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="619:5" pos:end="619:13">return <expr pos:start="619:12" pos:end="619:12"><literal type="number" pos:start="619:12" pos:end="619:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
