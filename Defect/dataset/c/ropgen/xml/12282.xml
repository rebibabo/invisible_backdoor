<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12282.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">copy_packet_data</name><parameter_list pos:start="1:28" pos:end="1:72">(<parameter pos:start="1:29" pos:end="1:41"><decl pos:start="1:29" pos:end="1:41"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:36">AVPacket</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">pkt</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:62"><decl pos:start="1:44" pos:end="1:62"><type pos:start="1:44" pos:end="1:62"><specifier pos:start="1:44" pos:end="1:48">const</specifier> <name pos:start="1:50" pos:end="1:57">AVPacket</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">src</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:71"><decl pos:start="1:65" pos:end="1:71"><type pos:start="1:65" pos:end="1:71"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:71">dup</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="47:1">{<block_content pos:start="5:5" pos:end="45:27">

    <expr_stmt pos:start="5:5" pos:end="5:26"><expr pos:start="5:5" pos:end="5:25"><name pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:7">pkt</name><operator pos:start="5:8" pos:end="5:9">-&gt;</operator><name pos:start="5:10" pos:end="5:13">data</name></name>      <operator pos:start="5:20" pos:end="5:20">=</operator> <name pos:start="5:22" pos:end="5:25">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="7:5" pos:end="7:26"><expr pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:7">pkt</name><operator pos:start="7:8" pos:end="7:9">-&gt;</operator><name pos:start="7:10" pos:end="7:18">side_data</name></name> <operator pos:start="7:20" pos:end="7:20">=</operator> <name pos:start="7:22" pos:end="7:25">NULL</name></expr>;</expr_stmt>

    <if_stmt pos:start="9:5" pos:end="25:5"><if pos:start="9:5" pos:end="21:5">if <condition pos:start="9:8" pos:end="9:17">(<expr pos:start="9:9" pos:end="9:16"><name pos:start="9:9" pos:end="9:16"><name pos:start="9:9" pos:end="9:11">pkt</name><operator pos:start="9:12" pos:end="9:13">-&gt;</operator><name pos:start="9:14" pos:end="9:16">buf</name></name></expr>)</condition> <block pos:start="9:19" pos:end="21:5">{<block_content pos:start="11:9" pos:end="19:30">

        <decl_stmt pos:start="11:9" pos:end="11:51"><decl pos:start="11:9" pos:end="11:50"><type pos:start="11:9" pos:end="11:21"><name pos:start="11:9" pos:end="11:19">AVBufferRef</name> <modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:24">ref</name> <init pos:start="11:26" pos:end="11:50">= <expr pos:start="11:28" pos:end="11:50"><call pos:start="11:28" pos:end="11:50"><name pos:start="11:28" pos:end="11:40">av_buffer_ref</name><argument_list pos:start="11:41" pos:end="11:50">(<argument pos:start="11:42" pos:end="11:49"><expr pos:start="11:42" pos:end="11:49"><name pos:start="11:42" pos:end="11:49"><name pos:start="11:42" pos:end="11:44">src</name><operator pos:start="11:45" pos:end="11:46">-&gt;</operator><name pos:start="11:47" pos:end="11:49">buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="13:9" pos:end="15:35"><if pos:start="13:9" pos:end="15:35">if <condition pos:start="13:12" pos:end="13:17">(<expr pos:start="13:13" pos:end="13:16"><operator pos:start="13:13" pos:end="13:13">!</operator><name pos:start="13:14" pos:end="13:16">ref</name></expr>)</condition><block type="pseudo" pos:start="15:13" pos:end="15:35"><block_content pos:start="15:13" pos:end="15:35">

            <return pos:start="15:13" pos:end="15:35">return <expr pos:start="15:20" pos:end="15:34"><call pos:start="15:20" pos:end="15:34"><name pos:start="15:20" pos:end="15:26">AVERROR</name><argument_list pos:start="15:27" pos:end="15:34">(<argument pos:start="15:28" pos:end="15:33"><expr pos:start="15:28" pos:end="15:33"><name pos:start="15:28" pos:end="15:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:24"><expr pos:start="17:9" pos:end="17:23"><name pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:11">pkt</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:16">buf</name></name>  <operator pos:start="17:19" pos:end="17:19">=</operator> <name pos:start="17:21" pos:end="17:23">ref</name></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:30"><expr pos:start="19:9" pos:end="19:29"><name pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:11">pkt</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:17">data</name></name> <operator pos:start="19:19" pos:end="19:19">=</operator> <name pos:start="19:21" pos:end="19:29"><name pos:start="19:21" pos:end="19:23">ref</name><operator pos:start="19:24" pos:end="19:25">-&gt;</operator><name pos:start="19:26" pos:end="19:29">data</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="21:7" pos:end="25:5">else <block pos:start="21:12" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:64">

        <expr_stmt pos:start="23:9" pos:end="23:64"><expr pos:start="23:9" pos:end="23:63"><call pos:start="23:9" pos:end="23:63"><name pos:start="23:9" pos:end="23:16">DUP_DATA</name><argument_list pos:start="23:17" pos:end="23:63">(<argument pos:start="23:18" pos:end="23:26"><expr pos:start="23:18" pos:end="23:26"><name pos:start="23:18" pos:end="23:26"><name pos:start="23:18" pos:end="23:20">pkt</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:26">data</name></name></expr></argument>, <argument pos:start="23:29" pos:end="23:37"><expr pos:start="23:29" pos:end="23:37"><name pos:start="23:29" pos:end="23:37"><name pos:start="23:29" pos:end="23:31">src</name><operator pos:start="23:32" pos:end="23:33">-&gt;</operator><name pos:start="23:34" pos:end="23:37">data</name></name></expr></argument>, <argument pos:start="23:40" pos:end="23:48"><expr pos:start="23:40" pos:end="23:48"><name pos:start="23:40" pos:end="23:48"><name pos:start="23:40" pos:end="23:42">pkt</name><operator pos:start="23:43" pos:end="23:44">-&gt;</operator><name pos:start="23:45" pos:end="23:48">size</name></name></expr></argument>, <argument pos:start="23:51" pos:end="23:51"><expr pos:start="23:51" pos:end="23:51"><literal type="number" pos:start="23:51" pos:end="23:51">1</literal></expr></argument>, <argument pos:start="23:54" pos:end="23:62"><expr pos:start="23:54" pos:end="23:62"><name pos:start="23:54" pos:end="23:62">ALLOC_BUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="27:5" pos:end="29:40"><if pos:start="27:5" pos:end="29:40">if <condition pos:start="27:8" pos:end="27:36">(<expr pos:start="27:9" pos:end="27:35"><name pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:11">pkt</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:28">side_data_elems</name></name> <operator pos:start="27:30" pos:end="27:31">&amp;&amp;</operator> <name pos:start="27:33" pos:end="27:35">dup</name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:40"><block_content pos:start="29:9" pos:end="29:40">

        <expr_stmt pos:start="29:9" pos:end="29:40"><expr pos:start="29:9" pos:end="29:39"><name pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:11">pkt</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:22">side_data</name></name> <operator pos:start="29:24" pos:end="29:24">=</operator> <name pos:start="29:26" pos:end="29:39"><name pos:start="29:26" pos:end="29:28">src</name><operator pos:start="29:29" pos:end="29:30">-&gt;</operator><name pos:start="29:31" pos:end="29:39">side_data</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:37">(<expr pos:start="31:9" pos:end="31:36"><name pos:start="31:9" pos:end="31:28"><name pos:start="31:9" pos:end="31:11">pkt</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:28">side_data_elems</name></name> <operator pos:start="31:30" pos:end="31:31">&amp;&amp;</operator> <operator pos:start="31:33" pos:end="31:33">!</operator><name pos:start="31:34" pos:end="31:36">dup</name></expr>)</condition> <block pos:start="31:39" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:50">

        <return pos:start="33:9" pos:end="33:50">return <expr pos:start="33:16" pos:end="33:49"><call pos:start="33:16" pos:end="33:49"><name pos:start="33:16" pos:end="33:39">av_copy_packet_side_data</name><argument_list pos:start="33:40" pos:end="33:49">(<argument pos:start="33:41" pos:end="33:43"><expr pos:start="33:41" pos:end="33:43"><name pos:start="33:41" pos:end="33:43">pkt</name></expr></argument>, <argument pos:start="33:46" pos:end="33:48"><expr pos:start="33:46" pos:end="33:48"><name pos:start="33:46" pos:end="33:48">src</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="37:5" pos:end="37:13">return <expr pos:start="37:12" pos:end="37:12"><literal type="number" pos:start="37:12" pos:end="37:12">0</literal></expr>;</return>



<label pos:start="41:1" pos:end="41:13"><name pos:start="41:1" pos:end="41:12">failed_alloc</name>:</label>

    <expr_stmt pos:start="43:5" pos:end="43:25"><expr pos:start="43:5" pos:end="43:24"><call pos:start="43:5" pos:end="43:24"><name pos:start="43:5" pos:end="43:19">av_packet_unref</name><argument_list pos:start="43:20" pos:end="43:24">(<argument pos:start="43:21" pos:end="43:23"><expr pos:start="43:21" pos:end="43:23"><name pos:start="43:21" pos:end="43:23">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="45:5" pos:end="45:27">return <expr pos:start="45:12" pos:end="45:26"><call pos:start="45:12" pos:end="45:26"><name pos:start="45:12" pos:end="45:18">AVERROR</name><argument_list pos:start="45:19" pos:end="45:26">(<argument pos:start="45:20" pos:end="45:25"><expr pos:start="45:20" pos:end="45:25"><name pos:start="45:20" pos:end="45:25">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
