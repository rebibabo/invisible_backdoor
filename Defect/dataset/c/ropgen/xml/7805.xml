<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7805.c" pos:tabs="8"><function pos:start="1:1" pos:end="181:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">seek_test</name><parameter_list pos:start="1:21" pos:end="1:84">(<parameter pos:start="1:22" pos:end="1:47"><decl pos:start="1:22" pos:end="1:47"><type pos:start="1:22" pos:end="1:47"><specifier pos:start="1:22" pos:end="1:26">const</specifier> <name pos:start="1:28" pos:end="1:31">char</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:47">input_filename</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:66"><decl pos:start="1:50" pos:end="1:66"><type pos:start="1:50" pos:end="1:66"><specifier pos:start="1:50" pos:end="1:54">const</specifier> <name pos:start="1:56" pos:end="1:59">char</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:66">start</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:83"><decl pos:start="1:69" pos:end="1:83"><type pos:start="1:69" pos:end="1:83"><specifier pos:start="1:69" pos:end="1:73">const</specifier> <name pos:start="1:75" pos:end="1:78">char</name> <modifier pos:start="1:80" pos:end="1:80">*</modifier></type><name pos:start="1:81" pos:end="1:83">end</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="181:1">{<block_content pos:start="5:5" pos:end="179:13">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">AVCodec</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:18">codec</name> <init pos:start="5:20" pos:end="5:25">= <expr pos:start="5:22" pos:end="5:25"><name pos:start="5:22" pos:end="5:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">AVCodecContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:23">ctx</name><init pos:start="7:24" pos:end="7:29">= <expr pos:start="7:26" pos:end="7:29"><name pos:start="7:26" pos:end="7:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21">AVCodecParameters</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:33">origin_par</name> <init pos:start="9:35" pos:end="9:40">= <expr pos:start="9:37" pos:end="9:40"><name pos:start="9:37" pos:end="9:40">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">AVFrame</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:15">fr</name> <init pos:start="11:17" pos:end="11:22">= <expr pos:start="11:19" pos:end="11:22"><name pos:start="11:19" pos:end="11:22">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:19">AVFormatContext</name> <modifier pos:start="13:21" pos:end="13:21">*</modifier></type><name pos:start="13:22" pos:end="13:28">fmt_ctx</name> <init pos:start="13:30" pos:end="13:35">= <expr pos:start="13:32" pos:end="13:35"><name pos:start="13:32" pos:end="13:35">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:20">video_stream</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:14">result</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:13"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>, <decl pos:start="19:12" pos:end="19:12"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:12" pos:end="19:12">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:30"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:8">long</name> <name pos:start="21:10" pos:end="21:12">int</name></type> <name pos:start="21:14" pos:end="21:21">start_ts</name></decl>, <decl pos:start="21:24" pos:end="21:29"><type ref="prev" pos:start="21:5" pos:end="21:12"/><name pos:start="21:24" pos:end="21:29">end_ts</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:22"><expr pos:start="25:5" pos:end="25:21"><name pos:start="25:5" pos:end="25:17">size_of_array</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <literal type="number" pos:start="25:21" pos:end="25:21">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:27"><expr pos:start="27:5" pos:end="27:26"><name pos:start="27:5" pos:end="27:22">number_of_elements</name> <operator pos:start="27:24" pos:end="27:24">=</operator> <literal type="number" pos:start="27:26" pos:end="27:26">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:33"><expr pos:start="29:5" pos:end="29:32"><name pos:start="29:5" pos:end="29:13">crc_array</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <name pos:start="29:17" pos:end="29:25">pts_array</name> <operator pos:start="29:27" pos:end="29:27">=</operator> <name pos:start="29:29" pos:end="29:32">NULL</name></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:71"><expr pos:start="33:5" pos:end="33:70"><name pos:start="33:5" pos:end="33:10">result</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <call pos:start="33:14" pos:end="33:70"><name pos:start="33:14" pos:end="33:32">avformat_open_input</name><argument_list pos:start="33:33" pos:end="33:70">(<argument pos:start="33:34" pos:end="33:41"><expr pos:start="33:34" pos:end="33:41"><operator pos:start="33:34" pos:end="33:34">&amp;</operator><name pos:start="33:35" pos:end="33:41">fmt_ctx</name></expr></argument>, <argument pos:start="33:44" pos:end="33:57"><expr pos:start="33:44" pos:end="33:57"><name pos:start="33:44" pos:end="33:57">input_filename</name></expr></argument>, <argument pos:start="33:60" pos:end="33:63"><expr pos:start="33:60" pos:end="33:63"><name pos:start="33:60" pos:end="33:63">NULL</name></expr></argument>, <argument pos:start="33:66" pos:end="33:69"><expr pos:start="33:66" pos:end="33:69"><name pos:start="33:66" pos:end="33:69">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:19">(<expr pos:start="35:9" pos:end="35:18"><name pos:start="35:9" pos:end="35:14">result</name> <operator pos:start="35:16" pos:end="35:16">&lt;</operator> <literal type="number" pos:start="35:18" pos:end="35:18">0</literal></expr>)</condition> <block pos:start="35:21" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:22">

        <expr_stmt pos:start="37:9" pos:end="37:56"><expr pos:start="37:9" pos:end="37:55"><call pos:start="37:9" pos:end="37:55"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="37:55">(<argument pos:start="37:16" pos:end="37:19"><expr pos:start="37:16" pos:end="37:19"><name pos:start="37:16" pos:end="37:19">NULL</name></expr></argument>, <argument pos:start="37:22" pos:end="37:33"><expr pos:start="37:22" pos:end="37:33"><name pos:start="37:22" pos:end="37:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:36" pos:end="37:54"><expr pos:start="37:36" pos:end="37:54"><literal type="string" pos:start="37:36" pos:end="37:54">"Can't open file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:22">return <expr pos:start="39:16" pos:end="39:21"><name pos:start="39:16" pos:end="39:21">result</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:54"><expr pos:start="45:5" pos:end="45:53"><name pos:start="45:5" pos:end="45:10">result</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <call pos:start="45:14" pos:end="45:53"><name pos:start="45:14" pos:end="45:38">avformat_find_stream_info</name><argument_list pos:start="45:39" pos:end="45:53">(<argument pos:start="45:40" pos:end="45:46"><expr pos:start="45:40" pos:end="45:46"><name pos:start="45:40" pos:end="45:46">fmt_ctx</name></expr></argument>, <argument pos:start="45:49" pos:end="45:52"><expr pos:start="45:49" pos:end="45:52"><name pos:start="45:49" pos:end="45:52">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:19">(<expr pos:start="47:9" pos:end="47:18"><name pos:start="47:9" pos:end="47:14">result</name> <operator pos:start="47:16" pos:end="47:16">&lt;</operator> <literal type="number" pos:start="47:18" pos:end="47:18">0</literal></expr>)</condition> <block pos:start="47:21" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:22">

        <expr_stmt pos:start="49:9" pos:end="49:62"><expr pos:start="49:9" pos:end="49:61"><call pos:start="49:9" pos:end="49:61"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="49:61">(<argument pos:start="49:16" pos:end="49:19"><expr pos:start="49:16" pos:end="49:19"><name pos:start="49:16" pos:end="49:19">NULL</name></expr></argument>, <argument pos:start="49:22" pos:end="49:33"><expr pos:start="49:22" pos:end="49:33"><name pos:start="49:22" pos:end="49:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:36" pos:end="49:60"><expr pos:start="49:36" pos:end="49:60"><literal type="string" pos:start="49:36" pos:end="49:60">"Can't get stream info\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:22">return <expr pos:start="51:16" pos:end="51:21"><name pos:start="51:16" pos:end="51:21">result</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:38"><expr pos:start="57:5" pos:end="57:37"><name pos:start="57:5" pos:end="57:12">start_ts</name> <operator pos:start="57:14" pos:end="57:14">=</operator> <call pos:start="57:16" pos:end="57:37"><name pos:start="57:16" pos:end="57:30">read_seek_range</name><argument_list pos:start="57:31" pos:end="57:37">(<argument pos:start="57:32" pos:end="57:36"><expr pos:start="57:32" pos:end="57:36"><name pos:start="57:32" pos:end="57:36">start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:34"><expr pos:start="59:5" pos:end="59:33"><name pos:start="59:5" pos:end="59:10">end_ts</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <call pos:start="59:14" pos:end="59:33"><name pos:start="59:14" pos:end="59:28">read_seek_range</name><argument_list pos:start="59:29" pos:end="59:33">(<argument pos:start="59:30" pos:end="59:32"><expr pos:start="59:30" pos:end="59:32"><name pos:start="59:30" pos:end="59:32">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="63:18"><if pos:start="61:5" pos:end="63:18">if <condition pos:start="61:8" pos:end="61:39">(<expr pos:start="61:9" pos:end="61:38"><operator pos:start="61:9" pos:end="61:9">(</operator><name pos:start="61:10" pos:end="61:17">start_ts</name> <operator pos:start="61:19" pos:end="61:19">&lt;</operator> <literal type="number" pos:start="61:21" pos:end="61:21">0</literal><operator pos:start="61:22" pos:end="61:22">)</operator> <operator pos:start="61:24" pos:end="61:25">||</operator> <operator pos:start="61:27" pos:end="61:27">(</operator><name pos:start="61:28" pos:end="61:33">end_ts</name> <operator pos:start="61:35" pos:end="61:35">&lt;</operator> <literal type="number" pos:start="61:37" pos:end="61:37">0</literal><operator pos:start="61:38" pos:end="61:38">)</operator></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:18"><block_content pos:start="63:9" pos:end="63:18">

        <return pos:start="63:9" pos:end="63:18">return <expr pos:start="63:16" pos:end="63:17"><operator pos:start="63:16" pos:end="63:16">-</operator><literal type="number" pos:start="63:17" pos:end="63:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="line" pos:start="67:5" pos:end="67:49">//TODO: add ability to work with audio format</comment>

    <expr_stmt pos:start="69:5" pos:end="69:85"><expr pos:start="69:5" pos:end="69:84"><name pos:start="69:5" pos:end="69:16">video_stream</name> <operator pos:start="69:18" pos:end="69:18">=</operator> <call pos:start="69:20" pos:end="69:84"><name pos:start="69:20" pos:end="69:38">av_find_best_stream</name><argument_list pos:start="69:39" pos:end="69:84">(<argument pos:start="69:40" pos:end="69:46"><expr pos:start="69:40" pos:end="69:46"><name pos:start="69:40" pos:end="69:46">fmt_ctx</name></expr></argument>, <argument pos:start="69:49" pos:end="69:66"><expr pos:start="69:49" pos:end="69:66"><name pos:start="69:49" pos:end="69:66">AVMEDIA_TYPE_VIDEO</name></expr></argument>, <argument pos:start="69:69" pos:end="69:70"><expr pos:start="69:69" pos:end="69:70"><operator pos:start="69:69" pos:end="69:69">-</operator><literal type="number" pos:start="69:70" pos:end="69:70">1</literal></expr></argument>, <argument pos:start="69:73" pos:end="69:74"><expr pos:start="69:73" pos:end="69:74"><operator pos:start="69:73" pos:end="69:73">-</operator><literal type="number" pos:start="69:74" pos:end="69:74">1</literal></expr></argument>, <argument pos:start="69:77" pos:end="69:80"><expr pos:start="69:77" pos:end="69:80"><name pos:start="69:77" pos:end="69:80">NULL</name></expr></argument>, <argument pos:start="69:83" pos:end="69:83"><expr pos:start="69:83" pos:end="69:83"><literal type="number" pos:start="69:83" pos:end="69:83">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="77:5"><if pos:start="71:5" pos:end="77:5">if <condition pos:start="71:8" pos:end="71:25">(<expr pos:start="71:9" pos:end="71:24"><name pos:start="71:9" pos:end="71:20">video_stream</name> <operator pos:start="71:22" pos:end="71:22">&lt;</operator> <literal type="number" pos:start="71:24" pos:end="71:24">0</literal></expr>)</condition> <block pos:start="71:27" pos:end="77:5">{<block_content pos:start="73:7" pos:end="75:16">

      <expr_stmt pos:start="73:7" pos:end="73:76"><expr pos:start="73:7" pos:end="73:75"><call pos:start="73:7" pos:end="73:75"><name pos:start="73:7" pos:end="73:12">av_log</name><argument_list pos:start="73:13" pos:end="73:75">(<argument pos:start="73:14" pos:end="73:17"><expr pos:start="73:14" pos:end="73:17"><name pos:start="73:14" pos:end="73:17">NULL</name></expr></argument>, <argument pos:start="73:20" pos:end="73:31"><expr pos:start="73:20" pos:end="73:31"><name pos:start="73:20" pos:end="73:31">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="73:34" pos:end="73:74"><expr pos:start="73:34" pos:end="73:74"><literal type="string" pos:start="73:34" pos:end="73:74">"Can't find video stream in input file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return pos:start="75:7" pos:end="75:16">return <expr pos:start="75:14" pos:end="75:15"><operator pos:start="75:14" pos:end="75:14">-</operator><literal type="number" pos:start="75:15" pos:end="75:15">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:58"><expr pos:start="81:5" pos:end="81:57"><name pos:start="81:5" pos:end="81:14">origin_par</name> <operator pos:start="81:16" pos:end="81:16">=</operator> <name pos:start="81:18" pos:end="81:47"><name pos:start="81:18" pos:end="81:24">fmt_ctx</name><operator pos:start="81:25" pos:end="81:26">-&gt;</operator><name pos:start="81:27" pos:end="81:33">streams</name><index pos:start="81:34" pos:end="81:47">[<expr pos:start="81:35" pos:end="81:46"><name pos:start="81:35" pos:end="81:46">video_stream</name></expr>]</index></name><operator pos:start="81:48" pos:end="81:49">-&gt;</operator><name pos:start="81:50" pos:end="81:57">codecpar</name></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:55"><expr pos:start="85:5" pos:end="85:54"><name pos:start="85:5" pos:end="85:9">codec</name> <operator pos:start="85:11" pos:end="85:11">=</operator> <call pos:start="85:13" pos:end="85:54"><name pos:start="85:13" pos:end="85:32">avcodec_find_decoder</name><argument_list pos:start="85:33" pos:end="85:54">(<argument pos:start="85:34" pos:end="85:53"><expr pos:start="85:34" pos:end="85:53"><name pos:start="85:34" pos:end="85:53"><name pos:start="85:34" pos:end="85:43">origin_par</name><operator pos:start="85:44" pos:end="85:45">-&gt;</operator><name pos:start="85:46" pos:end="85:53">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="93:5"><if pos:start="87:5" pos:end="93:5">if <condition pos:start="87:8" pos:end="87:15">(<expr pos:start="87:9" pos:end="87:14"><operator pos:start="87:9" pos:end="87:9">!</operator><name pos:start="87:10" pos:end="87:14">codec</name></expr>)</condition> <block pos:start="87:17" pos:end="93:5">{<block_content pos:start="89:9" pos:end="91:18">

        <expr_stmt pos:start="89:9" pos:end="89:59"><expr pos:start="89:9" pos:end="89:58"><call pos:start="89:9" pos:end="89:58"><name pos:start="89:9" pos:end="89:14">av_log</name><argument_list pos:start="89:15" pos:end="89:58">(<argument pos:start="89:16" pos:end="89:19"><expr pos:start="89:16" pos:end="89:19"><name pos:start="89:16" pos:end="89:19">NULL</name></expr></argument>, <argument pos:start="89:22" pos:end="89:33"><expr pos:start="89:22" pos:end="89:33"><name pos:start="89:22" pos:end="89:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="89:36" pos:end="89:57"><expr pos:start="89:36" pos:end="89:57"><literal type="string" pos:start="89:36" pos:end="89:57">"Can't find decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="91:9" pos:end="91:18">return <expr pos:start="91:16" pos:end="91:17"><operator pos:start="91:16" pos:end="91:16">-</operator><literal type="number" pos:start="91:17" pos:end="91:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:40"><expr pos:start="97:5" pos:end="97:39"><name pos:start="97:5" pos:end="97:7">ctx</name> <operator pos:start="97:9" pos:end="97:9">=</operator> <call pos:start="97:11" pos:end="97:39"><name pos:start="97:11" pos:end="97:32">avcodec_alloc_context3</name><argument_list pos:start="97:33" pos:end="97:39">(<argument pos:start="97:34" pos:end="97:38"><expr pos:start="97:34" pos:end="97:38"><name pos:start="97:34" pos:end="97:38">codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:13">(<expr pos:start="99:9" pos:end="99:12"><operator pos:start="99:9" pos:end="99:9">!</operator><name pos:start="99:10" pos:end="99:12">ctx</name></expr>)</condition> <block pos:start="99:15" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:31">

        <expr_stmt pos:start="101:9" pos:end="101:71"><expr pos:start="101:9" pos:end="101:70"><call pos:start="101:9" pos:end="101:70"><name pos:start="101:9" pos:end="101:14">av_log</name><argument_list pos:start="101:15" pos:end="101:70">(<argument pos:start="101:16" pos:end="101:19"><expr pos:start="101:16" pos:end="101:19"><name pos:start="101:16" pos:end="101:19">NULL</name></expr></argument>, <argument pos:start="101:22" pos:end="101:33"><expr pos:start="101:22" pos:end="101:33"><name pos:start="101:22" pos:end="101:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="101:36" pos:end="101:69"><expr pos:start="101:36" pos:end="101:69"><literal type="string" pos:start="101:36" pos:end="101:69">"Can't allocate decoder context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="103:9" pos:end="103:31">return <expr pos:start="103:16" pos:end="103:30"><call pos:start="103:16" pos:end="103:30"><name pos:start="103:16" pos:end="103:22">AVERROR</name><argument_list pos:start="103:23" pos:end="103:30">(<argument pos:start="103:24" pos:end="103:29"><expr pos:start="103:24" pos:end="103:29"><name pos:start="103:24" pos:end="103:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:60"><expr pos:start="109:5" pos:end="109:59"><name pos:start="109:5" pos:end="109:10">result</name> <operator pos:start="109:12" pos:end="109:12">=</operator> <call pos:start="109:14" pos:end="109:59"><name pos:start="109:14" pos:end="109:42">avcodec_parameters_to_context</name><argument_list pos:start="109:43" pos:end="109:59">(<argument pos:start="109:44" pos:end="109:46"><expr pos:start="109:44" pos:end="109:46"><name pos:start="109:44" pos:end="109:46">ctx</name></expr></argument>, <argument pos:start="109:49" pos:end="109:58"><expr pos:start="109:49" pos:end="109:58"><name pos:start="109:49" pos:end="109:58">origin_par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="111:5" pos:end="117:5"><if pos:start="111:5" pos:end="117:5">if <condition pos:start="111:8" pos:end="111:15">(<expr pos:start="111:9" pos:end="111:14"><name pos:start="111:9" pos:end="111:14">result</name></expr>)</condition> <block pos:start="111:17" pos:end="117:5">{<block_content pos:start="113:9" pos:end="115:22">

        <expr_stmt pos:start="113:9" pos:end="113:67"><expr pos:start="113:9" pos:end="113:66"><call pos:start="113:9" pos:end="113:66"><name pos:start="113:9" pos:end="113:14">av_log</name><argument_list pos:start="113:15" pos:end="113:66">(<argument pos:start="113:16" pos:end="113:19"><expr pos:start="113:16" pos:end="113:19"><name pos:start="113:16" pos:end="113:19">NULL</name></expr></argument>, <argument pos:start="113:22" pos:end="113:33"><expr pos:start="113:22" pos:end="113:33"><name pos:start="113:22" pos:end="113:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="113:36" pos:end="113:65"><expr pos:start="113:36" pos:end="113:65"><literal type="string" pos:start="113:36" pos:end="113:65">"Can't copy decoder context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="115:9" pos:end="115:22">return <expr pos:start="115:16" pos:end="115:21"><name pos:start="115:16" pos:end="115:21">result</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:45"><expr pos:start="121:5" pos:end="121:44"><name pos:start="121:5" pos:end="121:10">result</name> <operator pos:start="121:12" pos:end="121:12">=</operator> <call pos:start="121:14" pos:end="121:44"><name pos:start="121:14" pos:end="121:26">avcodec_open2</name><argument_list pos:start="121:27" pos:end="121:44">(<argument pos:start="121:28" pos:end="121:30"><expr pos:start="121:28" pos:end="121:30"><name pos:start="121:28" pos:end="121:30">ctx</name></expr></argument>, <argument pos:start="121:33" pos:end="121:37"><expr pos:start="121:33" pos:end="121:37"><name pos:start="121:33" pos:end="121:37">codec</name></expr></argument>, <argument pos:start="121:40" pos:end="121:43"><expr pos:start="121:40" pos:end="121:43"><name pos:start="121:40" pos:end="121:43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="123:5" pos:end="129:5"><if pos:start="123:5" pos:end="129:5">if <condition pos:start="123:8" pos:end="123:19">(<expr pos:start="123:9" pos:end="123:18"><name pos:start="123:9" pos:end="123:14">result</name> <operator pos:start="123:16" pos:end="123:16">&lt;</operator> <literal type="number" pos:start="123:18" pos:end="123:18">0</literal></expr>)</condition> <block pos:start="123:21" pos:end="129:5">{<block_content pos:start="125:9" pos:end="127:22">

        <expr_stmt pos:start="125:9" pos:end="125:58"><expr pos:start="125:9" pos:end="125:57"><call pos:start="125:9" pos:end="125:57"><name pos:start="125:9" pos:end="125:14">av_log</name><argument_list pos:start="125:15" pos:end="125:57">(<argument pos:start="125:16" pos:end="125:18"><expr pos:start="125:16" pos:end="125:18"><name pos:start="125:16" pos:end="125:18">ctx</name></expr></argument>, <argument pos:start="125:21" pos:end="125:32"><expr pos:start="125:21" pos:end="125:32"><name pos:start="125:21" pos:end="125:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="125:35" pos:end="125:56"><expr pos:start="125:35" pos:end="125:56"><literal type="string" pos:start="125:35" pos:end="125:56">"Can't open decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="127:9" pos:end="127:22">return <expr pos:start="127:16" pos:end="127:21"><name pos:start="127:16" pos:end="127:21">result</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:26"><expr pos:start="133:5" pos:end="133:25"><name pos:start="133:5" pos:end="133:6">fr</name> <operator pos:start="133:8" pos:end="133:8">=</operator> <call pos:start="133:10" pos:end="133:25"><name pos:start="133:10" pos:end="133:23">av_frame_alloc</name><argument_list pos:start="133:24" pos:end="133:25">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="135:5" pos:end="141:5"><if pos:start="135:5" pos:end="141:5">if <condition pos:start="135:8" pos:end="135:12">(<expr pos:start="135:9" pos:end="135:11"><operator pos:start="135:9" pos:end="135:9">!</operator><name pos:start="135:10" pos:end="135:11">fr</name></expr>)</condition> <block pos:start="135:14" pos:end="141:5">{<block_content pos:start="137:9" pos:end="139:31">

        <expr_stmt pos:start="137:9" pos:end="137:61"><expr pos:start="137:9" pos:end="137:60"><call pos:start="137:9" pos:end="137:60"><name pos:start="137:9" pos:end="137:14">av_log</name><argument_list pos:start="137:15" pos:end="137:60">(<argument pos:start="137:16" pos:end="137:19"><expr pos:start="137:16" pos:end="137:19"><name pos:start="137:16" pos:end="137:19">NULL</name></expr></argument>, <argument pos:start="137:22" pos:end="137:33"><expr pos:start="137:22" pos:end="137:33"><name pos:start="137:22" pos:end="137:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="137:36" pos:end="137:59"><expr pos:start="137:36" pos:end="137:59"><literal type="string" pos:start="137:36" pos:end="137:59">"Can't allocate frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="139:9" pos:end="139:31">return <expr pos:start="139:16" pos:end="139:30"><call pos:start="139:16" pos:end="139:30"><name pos:start="139:16" pos:end="139:22">AVERROR</name><argument_list pos:start="139:23" pos:end="139:30">(<argument pos:start="139:24" pos:end="139:29"><expr pos:start="139:24" pos:end="139:29"><name pos:start="139:24" pos:end="139:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="145:5" pos:end="145:77"><expr pos:start="145:5" pos:end="145:76"><name pos:start="145:5" pos:end="145:10">result</name> <operator pos:start="145:12" pos:end="145:12">=</operator> <call pos:start="145:14" pos:end="145:76"><name pos:start="145:14" pos:end="145:35">compute_crc_of_packets</name><argument_list pos:start="145:36" pos:end="145:76">(<argument pos:start="145:37" pos:end="145:43"><expr pos:start="145:37" pos:end="145:43"><name pos:start="145:37" pos:end="145:43">fmt_ctx</name></expr></argument>, <argument pos:start="145:46" pos:end="145:57"><expr pos:start="145:46" pos:end="145:57"><name pos:start="145:46" pos:end="145:57">video_stream</name></expr></argument>, <argument pos:start="145:60" pos:end="145:62"><expr pos:start="145:60" pos:end="145:62"><name pos:start="145:60" pos:end="145:62">ctx</name></expr></argument>, <argument pos:start="145:65" pos:end="145:66"><expr pos:start="145:65" pos:end="145:66"><name pos:start="145:65" pos:end="145:66">fr</name></expr></argument>, <argument pos:start="145:69" pos:end="145:69"><expr pos:start="145:69" pos:end="145:69"><literal type="number" pos:start="145:69" pos:end="145:69">0</literal></expr></argument>, <argument pos:start="145:72" pos:end="145:72"><expr pos:start="145:72" pos:end="145:72"><literal type="number" pos:start="145:72" pos:end="145:72">0</literal></expr></argument>, <argument pos:start="145:75" pos:end="145:75"><expr pos:start="145:75" pos:end="145:75"><literal type="number" pos:start="145:75" pos:end="145:75">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="147:5" pos:end="149:18"><if pos:start="147:5" pos:end="149:18">if <condition pos:start="147:8" pos:end="147:20">(<expr pos:start="147:9" pos:end="147:19"><name pos:start="147:9" pos:end="147:14">result</name> <operator pos:start="147:16" pos:end="147:17">!=</operator> <literal type="number" pos:start="147:19" pos:end="147:19">0</literal></expr>)</condition><block type="pseudo" pos:start="149:9" pos:end="149:18"><block_content pos:start="149:9" pos:end="149:18">

        <return pos:start="149:9" pos:end="149:18">return <expr pos:start="149:16" pos:end="149:17"><operator pos:start="149:16" pos:end="149:16">-</operator><literal type="number" pos:start="149:17" pos:end="149:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <for pos:start="153:5" pos:end="163:5">for <control pos:start="153:9" pos:end="153:44">(<init pos:start="153:10" pos:end="153:22"><expr pos:start="153:10" pos:end="153:21"><name pos:start="153:10" pos:end="153:10">i</name> <operator pos:start="153:12" pos:end="153:12">=</operator> <name pos:start="153:14" pos:end="153:21">start_ts</name></expr>;</init> <condition pos:start="153:24" pos:end="153:34"><expr pos:start="153:24" pos:end="153:33"><name pos:start="153:24" pos:end="153:24">i</name> <operator pos:start="153:26" pos:end="153:26">&lt;</operator> <name pos:start="153:28" pos:end="153:33">end_ts</name></expr>;</condition> <incr pos:start="153:36" pos:end="153:43"><expr pos:start="153:36" pos:end="153:43"><name pos:start="153:36" pos:end="153:36">i</name> <operator pos:start="153:38" pos:end="153:39">+=</operator> <literal type="number" pos:start="153:41" pos:end="153:43">100</literal></expr></incr>)</control> <block pos:start="153:46" pos:end="163:5">{<block_content pos:start="155:9" pos:end="161:22">

        <for pos:start="155:9" pos:end="157:81">for <control pos:start="155:13" pos:end="155:47">(<init pos:start="155:14" pos:end="155:25"><expr pos:start="155:14" pos:end="155:24"><name pos:start="155:14" pos:end="155:14">j</name> <operator pos:start="155:16" pos:end="155:16">=</operator> <name pos:start="155:18" pos:end="155:18">i</name> <operator pos:start="155:20" pos:end="155:20">+</operator> <literal type="number" pos:start="155:22" pos:end="155:24">100</literal></expr>;</init> <condition pos:start="155:27" pos:end="155:37"><expr pos:start="155:27" pos:end="155:36"><name pos:start="155:27" pos:end="155:27">j</name> <operator pos:start="155:29" pos:end="155:29">&lt;</operator> <name pos:start="155:31" pos:end="155:36">end_ts</name></expr>;</condition> <incr pos:start="155:39" pos:end="155:46"><expr pos:start="155:39" pos:end="155:46"><name pos:start="155:39" pos:end="155:39">j</name> <operator pos:start="155:41" pos:end="155:42">+=</operator> <literal type="number" pos:start="155:44" pos:end="155:46">100</literal></expr></incr>)</control><block type="pseudo" pos:start="157:9" pos:end="157:81"><block_content pos:start="157:9" pos:end="157:81">

        <expr_stmt pos:start="157:9" pos:end="157:81"><expr pos:start="157:9" pos:end="157:80"><name pos:start="157:9" pos:end="157:14">result</name> <operator pos:start="157:16" pos:end="157:16">=</operator> <call pos:start="157:18" pos:end="157:80"><name pos:start="157:18" pos:end="157:39">compute_crc_of_packets</name><argument_list pos:start="157:40" pos:end="157:80">(<argument pos:start="157:41" pos:end="157:47"><expr pos:start="157:41" pos:end="157:47"><name pos:start="157:41" pos:end="157:47">fmt_ctx</name></expr></argument>, <argument pos:start="157:50" pos:end="157:61"><expr pos:start="157:50" pos:end="157:61"><name pos:start="157:50" pos:end="157:61">video_stream</name></expr></argument>, <argument pos:start="157:64" pos:end="157:66"><expr pos:start="157:64" pos:end="157:66"><name pos:start="157:64" pos:end="157:66">ctx</name></expr></argument>, <argument pos:start="157:69" pos:end="157:70"><expr pos:start="157:69" pos:end="157:70"><name pos:start="157:69" pos:end="157:70">fr</name></expr></argument>, <argument pos:start="157:73" pos:end="157:73"><expr pos:start="157:73" pos:end="157:73"><name pos:start="157:73" pos:end="157:73">i</name></expr></argument>, <argument pos:start="157:76" pos:end="157:76"><expr pos:start="157:76" pos:end="157:76"><name pos:start="157:76" pos:end="157:76">j</name></expr></argument>, <argument pos:start="157:79" pos:end="157:79"><expr pos:start="157:79" pos:end="157:79"><literal type="number" pos:start="157:79" pos:end="157:79">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <if_stmt pos:start="159:9" pos:end="161:22"><if pos:start="159:9" pos:end="161:22">if <condition pos:start="159:12" pos:end="159:24">(<expr pos:start="159:13" pos:end="159:23"><name pos:start="159:13" pos:end="159:18">result</name> <operator pos:start="159:20" pos:end="159:21">!=</operator> <literal type="number" pos:start="159:23" pos:end="159:23">0</literal></expr>)</condition><block type="pseudo" pos:start="161:13" pos:end="161:22"><block_content pos:start="161:13" pos:end="161:22">

            <return pos:start="161:13" pos:end="161:22">return <expr pos:start="161:20" pos:end="161:21"><operator pos:start="161:20" pos:end="161:20">-</operator><literal type="number" pos:start="161:21" pos:end="161:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="167:5" pos:end="167:25"><expr pos:start="167:5" pos:end="167:24"><call pos:start="167:5" pos:end="167:24"><name pos:start="167:5" pos:end="167:12">av_freep</name><argument_list pos:start="167:13" pos:end="167:24">(<argument pos:start="167:14" pos:end="167:23"><expr pos:start="167:14" pos:end="167:23"><operator pos:start="167:14" pos:end="167:14">&amp;</operator><name pos:start="167:15" pos:end="167:23">crc_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:25"><expr pos:start="169:5" pos:end="169:24"><call pos:start="169:5" pos:end="169:24"><name pos:start="169:5" pos:end="169:12">av_freep</name><argument_list pos:start="169:13" pos:end="169:24">(<argument pos:start="169:14" pos:end="169:23"><expr pos:start="169:14" pos:end="169:23"><operator pos:start="169:14" pos:end="169:14">&amp;</operator><name pos:start="169:15" pos:end="169:23">pts_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:23"><expr pos:start="171:5" pos:end="171:22"><call pos:start="171:5" pos:end="171:22"><name pos:start="171:5" pos:end="171:17">av_frame_free</name><argument_list pos:start="171:18" pos:end="171:22">(<argument pos:start="171:19" pos:end="171:21"><expr pos:start="171:19" pos:end="171:21"><operator pos:start="171:19" pos:end="171:19">&amp;</operator><name pos:start="171:20" pos:end="171:21">fr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:23"><expr pos:start="173:5" pos:end="173:22"><call pos:start="173:5" pos:end="173:22"><name pos:start="173:5" pos:end="173:17">avcodec_close</name><argument_list pos:start="173:18" pos:end="173:22">(<argument pos:start="173:19" pos:end="173:21"><expr pos:start="173:19" pos:end="173:21"><name pos:start="173:19" pos:end="173:21">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:35"><expr pos:start="175:5" pos:end="175:34"><call pos:start="175:5" pos:end="175:34"><name pos:start="175:5" pos:end="175:24">avformat_close_input</name><argument_list pos:start="175:25" pos:end="175:34">(<argument pos:start="175:26" pos:end="175:33"><expr pos:start="175:26" pos:end="175:33"><operator pos:start="175:26" pos:end="175:26">&amp;</operator><name pos:start="175:27" pos:end="175:33">fmt_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:31"><expr pos:start="177:5" pos:end="177:30"><call pos:start="177:5" pos:end="177:30"><name pos:start="177:5" pos:end="177:24">avcodec_free_context</name><argument_list pos:start="177:25" pos:end="177:30">(<argument pos:start="177:26" pos:end="177:29"><expr pos:start="177:26" pos:end="177:29"><operator pos:start="177:26" pos:end="177:26">&amp;</operator><name pos:start="177:27" pos:end="177:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="179:5" pos:end="179:13">return <expr pos:start="179:12" pos:end="179:12"><literal type="number" pos:start="179:12" pos:end="179:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
