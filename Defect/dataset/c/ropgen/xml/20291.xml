<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20291.c" pos:tabs="8"><function pos:start="1:1" pos:end="211:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:18">sd_open</name><parameter_list pos:start="1:19" pos:end="3:32">(<parameter pos:start="1:20" pos:end="1:39"><decl pos:start="1:20" pos:end="1:39"><type pos:start="1:20" pos:end="1:39"><name pos:start="1:20" pos:end="1:35">BlockDriverState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:39">bs</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:55"><decl pos:start="1:42" pos:end="1:55"><type pos:start="1:42" pos:end="1:55"><name pos:start="1:42" pos:end="1:46">QDict</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:55">options</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:66"><decl pos:start="1:58" pos:end="1:66"><type pos:start="1:58" pos:end="1:66"><name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:66">flags</name></decl></parameter>,

                   <parameter pos:start="3:20" pos:end="3:31"><decl pos:start="3:20" pos:end="3:31"><type pos:start="3:20" pos:end="3:31"><name pos:start="3:20" pos:end="3:24">Error</name> <modifier pos:start="3:26" pos:end="3:26">*</modifier><modifier pos:start="3:27" pos:end="3:27">*</modifier></type><name pos:start="3:28" pos:end="3:31">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="211:1">{<block_content pos:start="7:5" pos:end="209:15">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>, <decl pos:start="7:14" pos:end="7:15"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:15">fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">vid</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:38"><decl pos:start="11:5" pos:end="11:37"><type pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:21">BDRVSheepdogState</name> <modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:24">s</name> <init pos:start="11:26" pos:end="11:37">= <expr pos:start="11:28" pos:end="11:37"><name pos:start="11:28" pos:end="11:37"><name pos:start="11:28" pos:end="11:29">bs</name><operator pos:start="11:30" pos:end="11:31">-&gt;</operator><name pos:start="11:32" pos:end="11:37">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:54"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:28"><name pos:start="13:10" pos:end="13:12">vdi</name><index pos:start="13:13" pos:end="13:28">[<expr pos:start="13:14" pos:end="13:27"><name pos:start="13:14" pos:end="13:27">SD_MAX_VDI_LEN</name></expr>]</index></name></decl>, <decl pos:start="13:31" pos:end="13:53"><type ref="prev" pos:start="13:5" pos:end="13:8"/><name pos:start="13:31" pos:end="13:53"><name pos:start="13:31" pos:end="13:33">tag</name><index pos:start="13:34" pos:end="13:53">[<expr pos:start="13:35" pos:end="13:52"><name pos:start="13:35" pos:end="13:52">SD_MAX_VDI_TAG_LEN</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:19">snapid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">char</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:13">buf</name> <init pos:start="17:15" pos:end="17:20">= <expr pos:start="17:17" pos:end="17:20"><name pos:start="17:17" pos:end="17:20">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">QemuOpts</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:18">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:9">Error</name> <modifier pos:start="21:11" pos:end="21:11">*</modifier></type><name pos:start="21:12" pos:end="21:20">local_err</name> <init pos:start="21:22" pos:end="21:27">= <expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:16"><specifier pos:start="23:5" pos:end="23:9">const</specifier> <name pos:start="23:11" pos:end="23:14">char</name> <modifier pos:start="23:16" pos:end="23:16">*</modifier></type><name pos:start="23:17" pos:end="23:24">filename</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:15"><expr pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:9"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:9">bs</name></name> <operator pos:start="27:11" pos:end="27:11">=</operator> <name pos:start="27:13" pos:end="27:14">bs</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:46"><expr pos:start="29:5" pos:end="29:45"><name pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:18">aio_context</name></name> <operator pos:start="29:20" pos:end="29:20">=</operator> <call pos:start="29:22" pos:end="29:45"><name pos:start="29:22" pos:end="29:41">bdrv_get_aio_context</name><argument_list pos:start="29:42" pos:end="29:45">(<argument pos:start="29:43" pos:end="29:44"><expr pos:start="29:43" pos:end="29:44"><name pos:start="29:43" pos:end="29:44">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:66"><expr pos:start="33:5" pos:end="33:65"><name pos:start="33:5" pos:end="33:8">opts</name> <operator pos:start="33:10" pos:end="33:10">=</operator> <call pos:start="33:12" pos:end="33:65"><name pos:start="33:12" pos:end="33:27">qemu_opts_create</name><argument_list pos:start="33:28" pos:end="33:65">(<argument pos:start="33:29" pos:end="33:41"><expr pos:start="33:29" pos:end="33:41"><operator pos:start="33:29" pos:end="33:29">&amp;</operator><name pos:start="33:30" pos:end="33:41">runtime_opts</name></expr></argument>, <argument pos:start="33:44" pos:end="33:47"><expr pos:start="33:44" pos:end="33:47"><name pos:start="33:44" pos:end="33:47">NULL</name></expr></argument>, <argument pos:start="33:50" pos:end="33:50"><expr pos:start="33:50" pos:end="33:50"><literal type="number" pos:start="33:50" pos:end="33:50">0</literal></expr></argument>, <argument pos:start="33:53" pos:end="33:64"><expr pos:start="33:53" pos:end="33:64"><operator pos:start="33:53" pos:end="33:53">&amp;</operator><name pos:start="33:54" pos:end="33:64">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:54"><expr pos:start="35:5" pos:end="35:53"><call pos:start="35:5" pos:end="35:53"><name pos:start="35:5" pos:end="35:26">qemu_opts_absorb_qdict</name><argument_list pos:start="35:27" pos:end="35:53">(<argument pos:start="35:28" pos:end="35:31"><expr pos:start="35:28" pos:end="35:31"><name pos:start="35:28" pos:end="35:31">opts</name></expr></argument>, <argument pos:start="35:34" pos:end="35:40"><expr pos:start="35:34" pos:end="35:40"><name pos:start="35:34" pos:end="35:40">options</name></expr></argument>, <argument pos:start="35:43" pos:end="35:52"><expr pos:start="35:43" pos:end="35:52"><operator pos:start="35:43" pos:end="35:43">&amp;</operator><name pos:start="35:44" pos:end="35:52">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="37:18">(<expr pos:start="37:9" pos:end="37:17"><name pos:start="37:9" pos:end="37:17">local_err</name></expr>)</condition> <block pos:start="37:20" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:17">

        <expr_stmt pos:start="39:9" pos:end="39:41"><expr pos:start="39:9" pos:end="39:40"><call pos:start="39:9" pos:end="39:40"><name pos:start="39:9" pos:end="39:23">error_propagate</name><argument_list pos:start="39:24" pos:end="39:40">(<argument pos:start="39:25" pos:end="39:28"><expr pos:start="39:25" pos:end="39:28"><name pos:start="39:25" pos:end="39:28">errp</name></expr></argument>, <argument pos:start="39:31" pos:end="39:39"><expr pos:start="39:31" pos:end="39:39"><name pos:start="39:31" pos:end="39:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:22"><expr pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <operator pos:start="41:15" pos:end="41:15">-</operator><name pos:start="41:16" pos:end="41:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="43:9" pos:end="43:17">goto <name pos:start="43:14" pos:end="43:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:46"><expr pos:start="49:5" pos:end="49:45"><name pos:start="49:5" pos:end="49:12">filename</name> <operator pos:start="49:14" pos:end="49:14">=</operator> <call pos:start="49:16" pos:end="49:45"><name pos:start="49:16" pos:end="49:27">qemu_opt_get</name><argument_list pos:start="49:28" pos:end="49:45">(<argument pos:start="49:29" pos:end="49:32"><expr pos:start="49:29" pos:end="49:32"><name pos:start="49:29" pos:end="49:32">opts</name></expr></argument>, <argument pos:start="49:35" pos:end="49:44"><expr pos:start="49:35" pos:end="49:44"><literal type="string" pos:start="49:35" pos:end="49:44">"filename"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:38"><expr pos:start="53:5" pos:end="53:37"><call pos:start="53:5" pos:end="53:37"><name pos:start="53:5" pos:end="53:14">QLIST_INIT</name><argument_list pos:start="53:15" pos:end="53:37">(<argument pos:start="53:16" pos:end="53:36"><expr pos:start="53:16" pos:end="53:36"><operator pos:start="53:16" pos:end="53:16">&amp;</operator><name pos:start="53:17" pos:end="53:36"><name pos:start="53:17" pos:end="53:17">s</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:36">inflight_aio_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:36"><expr pos:start="55:5" pos:end="55:35"><call pos:start="55:5" pos:end="55:35"><name pos:start="55:5" pos:end="55:14">QLIST_INIT</name><argument_list pos:start="55:15" pos:end="55:35">(<argument pos:start="55:16" pos:end="55:34"><expr pos:start="55:16" pos:end="55:34"><operator pos:start="55:16" pos:end="55:16">&amp;</operator><name pos:start="55:17" pos:end="55:34"><name pos:start="55:17" pos:end="55:17">s</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:34">failed_aio_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:40"><expr pos:start="57:5" pos:end="57:39"><call pos:start="57:5" pos:end="57:39"><name pos:start="57:5" pos:end="57:14">QLIST_INIT</name><argument_list pos:start="57:15" pos:end="57:39">(<argument pos:start="57:16" pos:end="57:38"><expr pos:start="57:16" pos:end="57:38"><operator pos:start="57:16" pos:end="57:16">&amp;</operator><name pos:start="57:17" pos:end="57:38"><name pos:start="57:17" pos:end="57:17">s</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:38">inflight_aiocb_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:15"><expr pos:start="59:5" pos:end="59:14"><name pos:start="59:5" pos:end="59:9"><name pos:start="59:5" pos:end="59:5">s</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:9">fd</name></name> <operator pos:start="59:11" pos:end="59:11">=</operator> <operator pos:start="59:13" pos:end="59:13">-</operator><literal type="number" pos:start="59:14" pos:end="59:14">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:32"><expr pos:start="63:5" pos:end="63:31"><call pos:start="63:5" pos:end="63:31"><name pos:start="63:5" pos:end="63:10">memset</name><argument_list pos:start="63:11" pos:end="63:31">(<argument pos:start="63:12" pos:end="63:14"><expr pos:start="63:12" pos:end="63:14"><name pos:start="63:12" pos:end="63:14">vdi</name></expr></argument>, <argument pos:start="63:17" pos:end="63:17"><expr pos:start="63:17" pos:end="63:17"><literal type="number" pos:start="63:17" pos:end="63:17">0</literal></expr></argument>, <argument pos:start="63:20" pos:end="63:30"><expr pos:start="63:20" pos:end="63:30"><sizeof pos:start="63:20" pos:end="63:30">sizeof<argument_list pos:start="63:26" pos:end="63:30">(<argument pos:start="63:27" pos:end="63:29"><expr pos:start="63:27" pos:end="63:29"><name pos:start="63:27" pos:end="63:29">vdi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:32"><expr pos:start="65:5" pos:end="65:31"><call pos:start="65:5" pos:end="65:31"><name pos:start="65:5" pos:end="65:10">memset</name><argument_list pos:start="65:11" pos:end="65:31">(<argument pos:start="65:12" pos:end="65:14"><expr pos:start="65:12" pos:end="65:14"><name pos:start="65:12" pos:end="65:14">tag</name></expr></argument>, <argument pos:start="65:17" pos:end="65:17"><expr pos:start="65:17" pos:end="65:17"><literal type="number" pos:start="65:17" pos:end="65:17">0</literal></expr></argument>, <argument pos:start="65:20" pos:end="65:30"><expr pos:start="65:20" pos:end="65:30"><sizeof pos:start="65:20" pos:end="65:30">sizeof<argument_list pos:start="65:26" pos:end="65:30">(<argument pos:start="65:27" pos:end="65:29"><expr pos:start="65:27" pos:end="65:29"><name pos:start="65:27" pos:end="65:29">tag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="69:5" pos:end="77:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:32">(<expr pos:start="69:9" pos:end="69:31"><call pos:start="69:9" pos:end="69:31"><name pos:start="69:9" pos:end="69:14">strstr</name><argument_list pos:start="69:15" pos:end="69:31">(<argument pos:start="69:16" pos:end="69:23"><expr pos:start="69:16" pos:end="69:23"><name pos:start="69:16" pos:end="69:23">filename</name></expr></argument>, <argument pos:start="69:26" pos:end="69:30"><expr pos:start="69:26" pos:end="69:30"><literal type="string" pos:start="69:26" pos:end="69:30">"://"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:34" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:59">

        <expr_stmt pos:start="71:9" pos:end="71:59"><expr pos:start="71:9" pos:end="71:58"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <call pos:start="71:15" pos:end="71:58"><name pos:start="71:15" pos:end="71:26">sd_parse_uri</name><argument_list pos:start="71:27" pos:end="71:58">(<argument pos:start="71:28" pos:end="71:28"><expr pos:start="71:28" pos:end="71:28"><name pos:start="71:28" pos:end="71:28">s</name></expr></argument>, <argument pos:start="71:31" pos:end="71:38"><expr pos:start="71:31" pos:end="71:38"><name pos:start="71:31" pos:end="71:38">filename</name></expr></argument>, <argument pos:start="71:41" pos:end="71:43"><expr pos:start="71:41" pos:end="71:43"><name pos:start="71:41" pos:end="71:43">vdi</name></expr></argument>, <argument pos:start="71:46" pos:end="71:52"><expr pos:start="71:46" pos:end="71:52"><operator pos:start="71:46" pos:end="71:46">&amp;</operator><name pos:start="71:47" pos:end="71:52">snapid</name></expr></argument>, <argument pos:start="71:55" pos:end="71:57"><expr pos:start="71:55" pos:end="71:57"><name pos:start="71:55" pos:end="71:57">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="73:7" pos:end="77:5">else <block pos:start="73:12" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:60">

        <expr_stmt pos:start="75:9" pos:end="75:60"><expr pos:start="75:9" pos:end="75:59"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="75:59"><name pos:start="75:15" pos:end="75:27">parse_vdiname</name><argument_list pos:start="75:28" pos:end="75:59">(<argument pos:start="75:29" pos:end="75:29"><expr pos:start="75:29" pos:end="75:29"><name pos:start="75:29" pos:end="75:29">s</name></expr></argument>, <argument pos:start="75:32" pos:end="75:39"><expr pos:start="75:32" pos:end="75:39"><name pos:start="75:32" pos:end="75:39">filename</name></expr></argument>, <argument pos:start="75:42" pos:end="75:44"><expr pos:start="75:42" pos:end="75:44"><name pos:start="75:42" pos:end="75:44">vdi</name></expr></argument>, <argument pos:start="75:47" pos:end="75:53"><expr pos:start="75:47" pos:end="75:53"><operator pos:start="75:47" pos:end="75:47">&amp;</operator><name pos:start="75:48" pos:end="75:53">snapid</name></expr></argument>, <argument pos:start="75:56" pos:end="75:58"><expr pos:start="75:56" pos:end="75:58"><name pos:start="75:56" pos:end="75:58">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:16">(<expr pos:start="79:9" pos:end="79:15"><name pos:start="79:9" pos:end="79:11">ret</name> <operator pos:start="79:13" pos:end="79:13">&lt;</operator> <literal type="number" pos:start="79:15" pos:end="79:15">0</literal></expr>)</condition> <block pos:start="79:18" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:17">

        <expr_stmt pos:start="81:9" pos:end="81:49"><expr pos:start="81:9" pos:end="81:48"><call pos:start="81:9" pos:end="81:48"><name pos:start="81:9" pos:end="81:18">error_setg</name><argument_list pos:start="81:19" pos:end="81:48">(<argument pos:start="81:20" pos:end="81:23"><expr pos:start="81:20" pos:end="81:23"><name pos:start="81:20" pos:end="81:23">errp</name></expr></argument>, <argument pos:start="81:26" pos:end="81:47"><expr pos:start="81:26" pos:end="81:47"><literal type="string" pos:start="81:26" pos:end="81:47">"Can't parse filename"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="83:9" pos:end="83:17">goto <name pos:start="83:14" pos:end="83:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:34"><expr pos:start="87:5" pos:end="87:33"><name pos:start="87:5" pos:end="87:9"><name pos:start="87:5" pos:end="87:5">s</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:9">fd</name></name> <operator pos:start="87:11" pos:end="87:11">=</operator> <call pos:start="87:13" pos:end="87:33"><name pos:start="87:13" pos:end="87:24">get_sheep_fd</name><argument_list pos:start="87:25" pos:end="87:33">(<argument pos:start="87:26" pos:end="87:26"><expr pos:start="87:26" pos:end="87:26"><name pos:start="87:26" pos:end="87:26">s</name></expr></argument>, <argument pos:start="87:29" pos:end="87:32"><expr pos:start="87:29" pos:end="87:32"><name pos:start="87:29" pos:end="87:32">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="95:5"><if pos:start="89:5" pos:end="95:5">if <condition pos:start="89:8" pos:end="89:18">(<expr pos:start="89:9" pos:end="89:17"><name pos:start="89:9" pos:end="89:13"><name pos:start="89:9" pos:end="89:9">s</name><operator pos:start="89:10" pos:end="89:11">-&gt;</operator><name pos:start="89:12" pos:end="89:13">fd</name></name> <operator pos:start="89:15" pos:end="89:15">&lt;</operator> <literal type="number" pos:start="89:17" pos:end="89:17">0</literal></expr>)</condition> <block pos:start="89:20" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:17">

        <expr_stmt pos:start="91:9" pos:end="91:20"><expr pos:start="91:9" pos:end="91:19"><name pos:start="91:9" pos:end="91:11">ret</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <name pos:start="91:15" pos:end="91:19"><name pos:start="91:15" pos:end="91:15">s</name><operator pos:start="91:16" pos:end="91:17">-&gt;</operator><name pos:start="91:18" pos:end="91:19">fd</name></name></expr>;</expr_stmt>

        <goto pos:start="93:9" pos:end="93:17">goto <name pos:start="93:14" pos:end="93:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:63"><expr pos:start="99:5" pos:end="99:62"><name pos:start="99:5" pos:end="99:7">ret</name> <operator pos:start="99:9" pos:end="99:9">=</operator> <call pos:start="99:11" pos:end="99:62"><name pos:start="99:11" pos:end="99:23">find_vdi_name</name><argument_list pos:start="99:24" pos:end="99:62">(<argument pos:start="99:25" pos:end="99:25"><expr pos:start="99:25" pos:end="99:25"><name pos:start="99:25" pos:end="99:25">s</name></expr></argument>, <argument pos:start="99:28" pos:end="99:30"><expr pos:start="99:28" pos:end="99:30"><name pos:start="99:28" pos:end="99:30">vdi</name></expr></argument>, <argument pos:start="99:33" pos:end="99:38"><expr pos:start="99:33" pos:end="99:38"><name pos:start="99:33" pos:end="99:38">snapid</name></expr></argument>, <argument pos:start="99:41" pos:end="99:43"><expr pos:start="99:41" pos:end="99:43"><name pos:start="99:41" pos:end="99:43">tag</name></expr></argument>, <argument pos:start="99:46" pos:end="99:49"><expr pos:start="99:46" pos:end="99:49"><operator pos:start="99:46" pos:end="99:46">&amp;</operator><name pos:start="99:47" pos:end="99:49">vid</name></expr></argument>, <argument pos:start="99:52" pos:end="99:55"><expr pos:start="99:52" pos:end="99:55"><name pos:start="99:52" pos:end="99:55">true</name></expr></argument>, <argument pos:start="99:58" pos:end="99:61"><expr pos:start="99:58" pos:end="99:61"><name pos:start="99:58" pos:end="99:61">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="105:5"><if pos:start="101:5" pos:end="105:5">if <condition pos:start="101:8" pos:end="101:12">(<expr pos:start="101:9" pos:end="101:11"><name pos:start="101:9" pos:end="101:11">ret</name></expr>)</condition> <block pos:start="101:14" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:17">

        <goto pos:start="103:9" pos:end="103:17">goto <name pos:start="103:14" pos:end="103:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="109:5" pos:end="115:7">/*

     * QEMU block layer emulates writethrough cache as 'writeback + flush', so

     * we always set SD_FLAG_CMD_CACHE (writeback cache) as default.

     */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:39"><expr pos:start="117:5" pos:end="117:38"><name pos:start="117:5" pos:end="117:18"><name pos:start="117:5" pos:end="117:5">s</name><operator pos:start="117:6" pos:end="117:7">-&gt;</operator><name pos:start="117:8" pos:end="117:18">cache_flags</name></name> <operator pos:start="117:20" pos:end="117:20">=</operator> <name pos:start="117:22" pos:end="117:38">SD_FLAG_CMD_CACHE</name></expr>;</expr_stmt>

    <if_stmt pos:start="119:5" pos:end="123:5"><if pos:start="119:5" pos:end="123:5">if <condition pos:start="119:8" pos:end="119:31">(<expr pos:start="119:9" pos:end="119:30"><name pos:start="119:9" pos:end="119:13">flags</name> <operator pos:start="119:15" pos:end="119:15">&amp;</operator> <name pos:start="119:17" pos:end="119:30">BDRV_O_NOCACHE</name></expr>)</condition> <block pos:start="119:33" pos:end="123:5">{<block_content pos:start="121:9" pos:end="121:44">

        <expr_stmt pos:start="121:9" pos:end="121:44"><expr pos:start="121:9" pos:end="121:43"><name pos:start="121:9" pos:end="121:22"><name pos:start="121:9" pos:end="121:9">s</name><operator pos:start="121:10" pos:end="121:11">-&gt;</operator><name pos:start="121:12" pos:end="121:22">cache_flags</name></name> <operator pos:start="121:24" pos:end="121:24">=</operator> <name pos:start="121:26" pos:end="121:43">SD_FLAG_CMD_DIRECT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:32"><expr pos:start="125:5" pos:end="125:31"><name pos:start="125:5" pos:end="125:24"><name pos:start="125:5" pos:end="125:5">s</name><operator pos:start="125:6" pos:end="125:7">-&gt;</operator><name pos:start="125:8" pos:end="125:24">discard_supported</name></name> <operator pos:start="125:26" pos:end="125:26">=</operator> <name pos:start="125:28" pos:end="125:31">true</name></expr>;</expr_stmt>



    <if_stmt pos:start="129:5" pos:end="135:5"><if pos:start="129:5" pos:end="135:5">if <condition pos:start="129:8" pos:end="129:33">(<expr pos:start="129:9" pos:end="129:32"><name pos:start="129:9" pos:end="129:14">snapid</name> <operator pos:start="129:16" pos:end="129:17">||</operator> <name pos:start="129:19" pos:end="129:24"><name pos:start="129:19" pos:end="129:21">tag</name><index pos:start="129:22" pos:end="129:24">[<expr pos:start="129:23" pos:end="129:23"><literal type="number" pos:start="129:23" pos:end="129:23">0</literal></expr>]</index></name> <operator pos:start="129:26" pos:end="129:27">!=</operator> <literal type="char" pos:start="129:29" pos:end="129:32">'\0'</literal></expr>)</condition> <block pos:start="129:35" pos:end="135:5">{<block_content pos:start="131:9" pos:end="133:30">

        <expr_stmt pos:start="131:9" pos:end="131:63"><expr pos:start="131:9" pos:end="131:62"><call pos:start="131:9" pos:end="131:62"><name pos:start="131:9" pos:end="131:15">DPRINTF</name><argument_list pos:start="131:16" pos:end="131:62">(<argument pos:start="131:17" pos:end="131:56"><expr pos:start="131:17" pos:end="131:56"><literal type="string" pos:start="131:17" pos:end="131:19">"%"</literal> <name pos:start="131:21" pos:end="131:26">PRIx32</name> <literal type="string" pos:start="131:28" pos:end="131:56">" snapshot inode was open.\n"</literal></expr></argument>, <argument pos:start="131:59" pos:end="131:61"><expr pos:start="131:59" pos:end="131:61"><name pos:start="131:59" pos:end="131:61">vid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:30"><expr pos:start="133:9" pos:end="133:29"><name pos:start="133:9" pos:end="133:22"><name pos:start="133:9" pos:end="133:9">s</name><operator pos:start="133:10" pos:end="133:11">-&gt;</operator><name pos:start="133:12" pos:end="133:22">is_snapshot</name></name> <operator pos:start="133:24" pos:end="133:24">=</operator> <name pos:start="133:26" pos:end="133:29">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="139:5" pos:end="139:34"><expr pos:start="139:5" pos:end="139:33"><name pos:start="139:5" pos:end="139:6">fd</name> <operator pos:start="139:8" pos:end="139:8">=</operator> <call pos:start="139:10" pos:end="139:33"><name pos:start="139:10" pos:end="139:24">connect_to_sdog</name><argument_list pos:start="139:25" pos:end="139:33">(<argument pos:start="139:26" pos:end="139:26"><expr pos:start="139:26" pos:end="139:26"><name pos:start="139:26" pos:end="139:26">s</name></expr></argument>, <argument pos:start="139:29" pos:end="139:32"><expr pos:start="139:29" pos:end="139:32"><name pos:start="139:29" pos:end="139:32">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="141:5" pos:end="147:5"><if pos:start="141:5" pos:end="147:5">if <condition pos:start="141:8" pos:end="141:15">(<expr pos:start="141:9" pos:end="141:14"><name pos:start="141:9" pos:end="141:10">fd</name> <operator pos:start="141:12" pos:end="141:12">&lt;</operator> <literal type="number" pos:start="141:14" pos:end="141:14">0</literal></expr>)</condition> <block pos:start="141:17" pos:end="147:5">{<block_content pos:start="143:9" pos:end="145:17">

        <expr_stmt pos:start="143:9" pos:end="143:17"><expr pos:start="143:9" pos:end="143:16"><name pos:start="143:9" pos:end="143:11">ret</name> <operator pos:start="143:13" pos:end="143:13">=</operator> <name pos:start="143:15" pos:end="143:16">fd</name></expr>;</expr_stmt>

        <goto pos:start="145:9" pos:end="145:17">goto <name pos:start="145:14" pos:end="145:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="151:5" pos:end="151:34"><expr pos:start="151:5" pos:end="151:33"><name pos:start="151:5" pos:end="151:7">buf</name> <operator pos:start="151:9" pos:end="151:9">=</operator> <call pos:start="151:11" pos:end="151:33"><name pos:start="151:11" pos:end="151:18">g_malloc</name><argument_list pos:start="151:19" pos:end="151:33">(<argument pos:start="151:20" pos:end="151:32"><expr pos:start="151:20" pos:end="151:32"><name pos:start="151:20" pos:end="151:32">SD_INODE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="155:59"><expr pos:start="153:5" pos:end="155:58"><name pos:start="153:5" pos:end="153:7">ret</name> <operator pos:start="153:9" pos:end="153:9">=</operator> <call pos:start="153:11" pos:end="155:58"><name pos:start="153:11" pos:end="153:21">read_object</name><argument_list pos:start="153:22" pos:end="155:58">(<argument pos:start="153:23" pos:end="153:24"><expr pos:start="153:23" pos:end="153:24"><name pos:start="153:23" pos:end="153:24">fd</name></expr></argument>, <argument pos:start="153:27" pos:end="153:40"><expr pos:start="153:27" pos:end="153:40"><name pos:start="153:27" pos:end="153:40"><name pos:start="153:27" pos:end="153:27">s</name><operator pos:start="153:28" pos:end="153:29">-&gt;</operator><name pos:start="153:30" pos:end="153:40">aio_context</name></name></expr></argument>, <argument pos:start="153:43" pos:end="153:45"><expr pos:start="153:43" pos:end="153:45"><name pos:start="153:43" pos:end="153:45">buf</name></expr></argument>, <argument pos:start="153:48" pos:end="153:66"><expr pos:start="153:48" pos:end="153:66"><call pos:start="153:48" pos:end="153:66"><name pos:start="153:48" pos:end="153:61">vid_to_vdi_oid</name><argument_list pos:start="153:62" pos:end="153:66">(<argument pos:start="153:63" pos:end="153:65"><expr pos:start="153:63" pos:end="153:65"><name pos:start="153:63" pos:end="153:65">vid</name></expr></argument>)</argument_list></call></expr></argument>,

                      <argument pos:start="155:23" pos:end="155:23"><expr pos:start="155:23" pos:end="155:23"><literal type="number" pos:start="155:23" pos:end="155:23">0</literal></expr></argument>, <argument pos:start="155:26" pos:end="155:38"><expr pos:start="155:26" pos:end="155:38"><name pos:start="155:26" pos:end="155:38">SD_INODE_SIZE</name></expr></argument>, <argument pos:start="155:41" pos:end="155:41"><expr pos:start="155:41" pos:end="155:41"><literal type="number" pos:start="155:41" pos:end="155:41">0</literal></expr></argument>, <argument pos:start="155:44" pos:end="155:57"><expr pos:start="155:44" pos:end="155:57"><name pos:start="155:44" pos:end="155:57"><name pos:start="155:44" pos:end="155:44">s</name><operator pos:start="155:45" pos:end="155:46">-&gt;</operator><name pos:start="155:47" pos:end="155:57">cache_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="159:5" pos:end="159:20"><expr pos:start="159:5" pos:end="159:19"><call pos:start="159:5" pos:end="159:19"><name pos:start="159:5" pos:end="159:15">closesocket</name><argument_list pos:start="159:16" pos:end="159:19">(<argument pos:start="159:17" pos:end="159:18"><expr pos:start="159:17" pos:end="159:18"><name pos:start="159:17" pos:end="159:18">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="163:5" pos:end="169:5"><if pos:start="163:5" pos:end="169:5">if <condition pos:start="163:8" pos:end="163:12">(<expr pos:start="163:9" pos:end="163:11"><name pos:start="163:9" pos:end="163:11">ret</name></expr>)</condition> <block pos:start="163:14" pos:end="169:5">{<block_content pos:start="165:9" pos:end="167:17">

        <expr_stmt pos:start="165:9" pos:end="165:54"><expr pos:start="165:9" pos:end="165:53"><call pos:start="165:9" pos:end="165:53"><name pos:start="165:9" pos:end="165:18">error_setg</name><argument_list pos:start="165:19" pos:end="165:53">(<argument pos:start="165:20" pos:end="165:23"><expr pos:start="165:20" pos:end="165:23"><name pos:start="165:20" pos:end="165:23">errp</name></expr></argument>, <argument pos:start="165:26" pos:end="165:52"><expr pos:start="165:26" pos:end="165:52"><literal type="string" pos:start="165:26" pos:end="165:52">"Can't read snapshot inode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="167:9" pos:end="167:17">goto <name pos:start="167:14" pos:end="167:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:45"><expr pos:start="173:5" pos:end="173:44"><call pos:start="173:5" pos:end="173:44"><name pos:start="173:5" pos:end="173:10">memcpy</name><argument_list pos:start="173:11" pos:end="173:44">(<argument pos:start="173:12" pos:end="173:20"><expr pos:start="173:12" pos:end="173:20"><operator pos:start="173:12" pos:end="173:12">&amp;</operator><name pos:start="173:13" pos:end="173:20"><name pos:start="173:13" pos:end="173:13">s</name><operator pos:start="173:14" pos:end="173:15">-&gt;</operator><name pos:start="173:16" pos:end="173:20">inode</name></name></expr></argument>, <argument pos:start="173:23" pos:end="173:25"><expr pos:start="173:23" pos:end="173:25"><name pos:start="173:23" pos:end="173:25">buf</name></expr></argument>, <argument pos:start="173:28" pos:end="173:43"><expr pos:start="173:28" pos:end="173:43"><sizeof pos:start="173:28" pos:end="173:43">sizeof<argument_list pos:start="173:34" pos:end="173:43">(<argument pos:start="173:35" pos:end="173:42"><expr pos:start="173:35" pos:end="173:42"><name pos:start="173:35" pos:end="173:42"><name pos:start="173:35" pos:end="173:35">s</name><operator pos:start="173:36" pos:end="173:37">-&gt;</operator><name pos:start="173:38" pos:end="173:42">inode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:39"><expr pos:start="175:5" pos:end="175:38"><name pos:start="175:5" pos:end="175:25"><name pos:start="175:5" pos:end="175:5">s</name><operator pos:start="175:6" pos:end="175:7">-&gt;</operator><name pos:start="175:8" pos:end="175:25">min_dirty_data_idx</name></name> <operator pos:start="175:27" pos:end="175:27">=</operator> <name pos:start="175:29" pos:end="175:38">UINT32_MAX</name></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:30"><expr pos:start="177:5" pos:end="177:29"><name pos:start="177:5" pos:end="177:25"><name pos:start="177:5" pos:end="177:5">s</name><operator pos:start="177:6" pos:end="177:7">-&gt;</operator><name pos:start="177:8" pos:end="177:25">max_dirty_data_idx</name></name> <operator pos:start="177:27" pos:end="177:27">=</operator> <literal type="number" pos:start="177:29" pos:end="177:29">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="181:5" pos:end="181:61"><expr pos:start="181:5" pos:end="181:60"><name pos:start="181:5" pos:end="181:21"><name pos:start="181:5" pos:end="181:6">bs</name><operator pos:start="181:7" pos:end="181:8">-&gt;</operator><name pos:start="181:9" pos:end="181:21">total_sectors</name></name> <operator pos:start="181:23" pos:end="181:23">=</operator> <name pos:start="181:25" pos:end="181:41"><name pos:start="181:25" pos:end="181:25">s</name><operator pos:start="181:26" pos:end="181:27">-&gt;</operator><name pos:start="181:28" pos:end="181:32">inode</name><operator pos:start="181:33" pos:end="181:33">.</operator><name pos:start="181:34" pos:end="181:41">vdi_size</name></name> <operator pos:start="181:43" pos:end="181:43">/</operator> <name pos:start="181:45" pos:end="181:60">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:43"><expr pos:start="183:5" pos:end="183:42"><call pos:start="183:5" pos:end="183:42"><name pos:start="183:5" pos:end="183:11">pstrcpy</name><argument_list pos:start="183:12" pos:end="183:42">(<argument pos:start="183:13" pos:end="183:19"><expr pos:start="183:13" pos:end="183:19"><name pos:start="183:13" pos:end="183:19"><name pos:start="183:13" pos:end="183:13">s</name><operator pos:start="183:14" pos:end="183:15">-&gt;</operator><name pos:start="183:16" pos:end="183:19">name</name></name></expr></argument>, <argument pos:start="183:22" pos:end="183:36"><expr pos:start="183:22" pos:end="183:36"><sizeof pos:start="183:22" pos:end="183:36">sizeof<argument_list pos:start="183:28" pos:end="183:36">(<argument pos:start="183:29" pos:end="183:35"><expr pos:start="183:29" pos:end="183:35"><name pos:start="183:29" pos:end="183:35"><name pos:start="183:29" pos:end="183:29">s</name><operator pos:start="183:30" pos:end="183:31">-&gt;</operator><name pos:start="183:32" pos:end="183:35">name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="183:39" pos:end="183:41"><expr pos:start="183:39" pos:end="183:41"><name pos:start="183:39" pos:end="183:41">vdi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:33"><expr pos:start="185:5" pos:end="185:32"><call pos:start="185:5" pos:end="185:32"><name pos:start="185:5" pos:end="185:22">qemu_co_mutex_init</name><argument_list pos:start="185:23" pos:end="185:32">(<argument pos:start="185:24" pos:end="185:31"><expr pos:start="185:24" pos:end="185:31"><operator pos:start="185:24" pos:end="185:24">&amp;</operator><name pos:start="185:25" pos:end="185:31"><name pos:start="185:25" pos:end="185:25">s</name><operator pos:start="185:26" pos:end="185:27">-&gt;</operator><name pos:start="185:28" pos:end="185:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:47"><expr pos:start="187:5" pos:end="187:46"><call pos:start="187:5" pos:end="187:46"><name pos:start="187:5" pos:end="187:22">qemu_co_queue_init</name><argument_list pos:start="187:23" pos:end="187:46">(<argument pos:start="187:24" pos:end="187:45"><expr pos:start="187:24" pos:end="187:45"><operator pos:start="187:24" pos:end="187:24">&amp;</operator><name pos:start="187:25" pos:end="187:45"><name pos:start="187:25" pos:end="187:25">s</name><operator pos:start="187:26" pos:end="187:27">-&gt;</operator><name pos:start="187:28" pos:end="187:45">overwrapping_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:24"><expr pos:start="189:5" pos:end="189:23"><call pos:start="189:5" pos:end="189:23"><name pos:start="189:5" pos:end="189:17">qemu_opts_del</name><argument_list pos:start="189:18" pos:end="189:23">(<argument pos:start="189:19" pos:end="189:22"><expr pos:start="189:19" pos:end="189:22"><name pos:start="189:19" pos:end="189:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:16"><expr pos:start="191:5" pos:end="191:15"><call pos:start="191:5" pos:end="191:15"><name pos:start="191:5" pos:end="191:10">g_free</name><argument_list pos:start="191:11" pos:end="191:15">(<argument pos:start="191:12" pos:end="191:14"><expr pos:start="191:12" pos:end="191:14"><name pos:start="191:12" pos:end="191:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="193:5" pos:end="193:13">return <expr pos:start="193:12" pos:end="193:12"><literal type="number" pos:start="193:12" pos:end="193:12">0</literal></expr>;</return>

<label pos:start="195:1" pos:end="195:4"><name pos:start="195:1" pos:end="195:3">out</name>:</label>

    <expr_stmt pos:start="197:5" pos:end="197:74"><expr pos:start="197:5" pos:end="197:73"><call pos:start="197:5" pos:end="197:73"><name pos:start="197:5" pos:end="197:22">aio_set_fd_handler</name><argument_list pos:start="197:23" pos:end="197:73">(<argument pos:start="197:24" pos:end="197:47"><expr pos:start="197:24" pos:end="197:47"><call pos:start="197:24" pos:end="197:47"><name pos:start="197:24" pos:end="197:43">bdrv_get_aio_context</name><argument_list pos:start="197:44" pos:end="197:47">(<argument pos:start="197:45" pos:end="197:46"><expr pos:start="197:45" pos:end="197:46"><name pos:start="197:45" pos:end="197:46">bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="197:50" pos:end="197:54"><expr pos:start="197:50" pos:end="197:54"><name pos:start="197:50" pos:end="197:54"><name pos:start="197:50" pos:end="197:50">s</name><operator pos:start="197:51" pos:end="197:52">-&gt;</operator><name pos:start="197:53" pos:end="197:54">fd</name></name></expr></argument>, <argument pos:start="197:57" pos:end="197:60"><expr pos:start="197:57" pos:end="197:60"><name pos:start="197:57" pos:end="197:60">NULL</name></expr></argument>, <argument pos:start="197:63" pos:end="197:66"><expr pos:start="197:63" pos:end="197:66"><name pos:start="197:63" pos:end="197:66">NULL</name></expr></argument>, <argument pos:start="197:69" pos:end="197:72"><expr pos:start="197:69" pos:end="197:72"><name pos:start="197:69" pos:end="197:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="199:5" pos:end="203:5"><if pos:start="199:5" pos:end="203:5">if <condition pos:start="199:8" pos:end="199:19">(<expr pos:start="199:9" pos:end="199:18"><name pos:start="199:9" pos:end="199:13"><name pos:start="199:9" pos:end="199:9">s</name><operator pos:start="199:10" pos:end="199:11">-&gt;</operator><name pos:start="199:12" pos:end="199:13">fd</name></name> <operator pos:start="199:15" pos:end="199:16">&gt;=</operator> <literal type="number" pos:start="199:18" pos:end="199:18">0</literal></expr>)</condition> <block pos:start="199:21" pos:end="203:5">{<block_content pos:start="201:9" pos:end="201:27">

        <expr_stmt pos:start="201:9" pos:end="201:27"><expr pos:start="201:9" pos:end="201:26"><call pos:start="201:9" pos:end="201:26"><name pos:start="201:9" pos:end="201:19">closesocket</name><argument_list pos:start="201:20" pos:end="201:26">(<argument pos:start="201:21" pos:end="201:25"><expr pos:start="201:21" pos:end="201:25"><name pos:start="201:21" pos:end="201:25"><name pos:start="201:21" pos:end="201:21">s</name><operator pos:start="201:22" pos:end="201:23">-&gt;</operator><name pos:start="201:24" pos:end="201:25">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:24"><expr pos:start="205:5" pos:end="205:23"><call pos:start="205:5" pos:end="205:23"><name pos:start="205:5" pos:end="205:17">qemu_opts_del</name><argument_list pos:start="205:18" pos:end="205:23">(<argument pos:start="205:19" pos:end="205:22"><expr pos:start="205:19" pos:end="205:22"><name pos:start="205:19" pos:end="205:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:16"><expr pos:start="207:5" pos:end="207:15"><call pos:start="207:5" pos:end="207:15"><name pos:start="207:5" pos:end="207:10">g_free</name><argument_list pos:start="207:11" pos:end="207:15">(<argument pos:start="207:12" pos:end="207:14"><expr pos:start="207:12" pos:end="207:14"><name pos:start="207:12" pos:end="207:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="209:5" pos:end="209:15">return <expr pos:start="209:12" pos:end="209:14"><name pos:start="209:12" pos:end="209:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
