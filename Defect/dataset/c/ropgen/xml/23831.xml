<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23831.c" pos:tabs="8"><function pos:start="1:1" pos:end="195:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">qcow2_create</name><parameter_list pos:start="1:24" pos:end="1:75">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:44"><specifier pos:start="1:25" pos:end="1:29">const</specifier> <name pos:start="1:31" pos:end="1:34">char</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:44">filename</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:60"><decl pos:start="1:47" pos:end="1:60"><type pos:start="1:47" pos:end="1:60"><name pos:start="1:47" pos:end="1:54">QemuOpts</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">opts</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:74"><decl pos:start="1:63" pos:end="1:74"><type pos:start="1:63" pos:end="1:74"><name pos:start="1:63" pos:end="1:67">Error</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier><modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:74">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="195:1">{<block_content pos:start="5:5" pos:end="193:15">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">char</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:22">backing_file</name> <init pos:start="5:24" pos:end="5:29">= <expr pos:start="5:26" pos:end="5:29"><name pos:start="5:26" pos:end="5:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:21">backing_fmt</name> <init pos:start="7:23" pos:end="7:28">= <expr pos:start="7:25" pos:end="7:28"><name pos:start="7:25" pos:end="7:28">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:13">buf</name> <init pos:start="9:15" pos:end="9:20">= <expr pos:start="9:17" pos:end="9:20"><name pos:start="9:17" pos:end="9:20">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:17">size</name> <init pos:start="11:19" pos:end="11:21">= <expr pos:start="11:21" pos:end="11:21"><literal type="number" pos:start="11:21" pos:end="11:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">flags</name> <init pos:start="13:15" pos:end="13:17">= <expr pos:start="13:17" pos:end="13:17"><literal type="number" pos:start="13:17" pos:end="13:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:47"><decl pos:start="15:5" pos:end="15:46"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:10">size_t</name></type> <name pos:start="15:12" pos:end="15:23">cluster_size</name> <init pos:start="15:25" pos:end="15:46">= <expr pos:start="15:27" pos:end="15:46"><name pos:start="15:27" pos:end="15:46">DEFAULT_CLUSTER_SIZE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:16">PreallocMode</name></type> <name pos:start="17:18" pos:end="17:25">prealloc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:15">version</name> <init pos:start="19:17" pos:end="19:19">= <expr pos:start="19:19" pos:end="19:19"><literal type="number" pos:start="19:19" pos:end="19:19">3</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:32"><decl pos:start="21:5" pos:end="21:31"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:26">refcount_bits</name> <init pos:start="21:28" pos:end="21:31">= <expr pos:start="21:30" pos:end="21:31"><literal type="number" pos:start="21:30" pos:end="21:31">16</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:22">refcount_order</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:28"><decl pos:start="25:5" pos:end="25:27"><type pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:9">Error</name> <modifier pos:start="25:11" pos:end="25:11">*</modifier></type><name pos:start="25:12" pos:end="25:20">local_err</name> <init pos:start="25:22" pos:end="25:27">= <expr pos:start="25:24" pos:end="25:27"><name pos:start="25:24" pos:end="25:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:12"><decl pos:start="27:5" pos:end="27:11"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:26">/* Read out options */</comment>

    <expr_stmt pos:start="33:5" pos:end="35:38"><expr pos:start="33:5" pos:end="35:37"><name pos:start="33:5" pos:end="33:8">size</name> <operator pos:start="33:10" pos:end="33:10">=</operator> <call pos:start="33:12" pos:end="35:37"><name pos:start="33:12" pos:end="33:19">ROUND_UP</name><argument_list pos:start="33:20" pos:end="35:37">(<argument pos:start="33:21" pos:end="33:66"><expr pos:start="33:21" pos:end="33:66"><call pos:start="33:21" pos:end="33:66"><name pos:start="33:21" pos:end="33:41">qemu_opt_get_size_del</name><argument_list pos:start="33:42" pos:end="33:66">(<argument pos:start="33:43" pos:end="33:46"><expr pos:start="33:43" pos:end="33:46"><name pos:start="33:43" pos:end="33:46">opts</name></expr></argument>, <argument pos:start="33:49" pos:end="33:62"><expr pos:start="33:49" pos:end="33:62"><name pos:start="33:49" pos:end="33:62">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="33:65" pos:end="33:65"><expr pos:start="33:65" pos:end="33:65"><literal type="number" pos:start="33:65" pos:end="33:65">0</literal></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="35:21" pos:end="35:36"><expr pos:start="35:21" pos:end="35:36"><name pos:start="35:21" pos:end="35:36">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:66"><expr pos:start="37:5" pos:end="37:65"><name pos:start="37:5" pos:end="37:16">backing_file</name> <operator pos:start="37:18" pos:end="37:18">=</operator> <call pos:start="37:20" pos:end="37:65"><name pos:start="37:20" pos:end="37:35">qemu_opt_get_del</name><argument_list pos:start="37:36" pos:end="37:65">(<argument pos:start="37:37" pos:end="37:40"><expr pos:start="37:37" pos:end="37:40"><name pos:start="37:37" pos:end="37:40">opts</name></expr></argument>, <argument pos:start="37:43" pos:end="37:64"><expr pos:start="37:43" pos:end="37:64"><name pos:start="37:43" pos:end="37:64">BLOCK_OPT_BACKING_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:64"><expr pos:start="39:5" pos:end="39:63"><name pos:start="39:5" pos:end="39:15">backing_fmt</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <call pos:start="39:19" pos:end="39:63"><name pos:start="39:19" pos:end="39:34">qemu_opt_get_del</name><argument_list pos:start="39:35" pos:end="39:63">(<argument pos:start="39:36" pos:end="39:39"><expr pos:start="39:36" pos:end="39:39"><name pos:start="39:36" pos:end="39:39">opts</name></expr></argument>, <argument pos:start="39:42" pos:end="39:62"><expr pos:start="39:42" pos:end="39:62"><name pos:start="39:42" pos:end="39:62">BLOCK_OPT_BACKING_FMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:62">(<expr pos:start="41:9" pos:end="41:61"><call pos:start="41:9" pos:end="41:61"><name pos:start="41:9" pos:end="41:29">qemu_opt_get_bool_del</name><argument_list pos:start="41:30" pos:end="41:61">(<argument pos:start="41:31" pos:end="41:34"><expr pos:start="41:31" pos:end="41:34"><name pos:start="41:31" pos:end="41:34">opts</name></expr></argument>, <argument pos:start="41:37" pos:end="41:53"><expr pos:start="41:37" pos:end="41:53"><name pos:start="41:37" pos:end="41:53">BLOCK_OPT_ENCRYPT</name></expr></argument>, <argument pos:start="41:56" pos:end="41:60"><expr pos:start="41:56" pos:end="41:60"><name pos:start="41:56" pos:end="41:60">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:64" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:36">

        <expr_stmt pos:start="43:9" pos:end="43:36"><expr pos:start="43:9" pos:end="43:35"><name pos:start="43:9" pos:end="43:13">flags</name> <operator pos:start="43:15" pos:end="43:16">|=</operator> <name pos:start="43:18" pos:end="43:35">BLOCK_FLAG_ENCRYPT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="49:63"><expr pos:start="47:5" pos:end="49:62"><name pos:start="47:5" pos:end="47:16">cluster_size</name> <operator pos:start="47:18" pos:end="47:18">=</operator> <call pos:start="47:20" pos:end="49:62"><name pos:start="47:20" pos:end="47:40">qemu_opt_get_size_del</name><argument_list pos:start="47:41" pos:end="49:62">(<argument pos:start="47:42" pos:end="47:45"><expr pos:start="47:42" pos:end="47:45"><name pos:start="47:42" pos:end="47:45">opts</name></expr></argument>, <argument pos:start="47:48" pos:end="47:69"><expr pos:start="47:48" pos:end="47:69"><name pos:start="47:48" pos:end="47:69">BLOCK_OPT_CLUSTER_SIZE</name></expr></argument>,

                                         <argument pos:start="49:42" pos:end="49:61"><expr pos:start="49:42" pos:end="49:61"><name pos:start="49:42" pos:end="49:61">DEFAULT_CLUSTER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:53"><expr pos:start="51:5" pos:end="51:52"><name pos:start="51:5" pos:end="51:7">buf</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:52"><name pos:start="51:11" pos:end="51:26">qemu_opt_get_del</name><argument_list pos:start="51:27" pos:end="51:52">(<argument pos:start="51:28" pos:end="51:31"><expr pos:start="51:28" pos:end="51:31"><name pos:start="51:28" pos:end="51:31">opts</name></expr></argument>, <argument pos:start="51:34" pos:end="51:51"><expr pos:start="51:34" pos:end="51:51"><name pos:start="51:34" pos:end="51:51">BLOCK_OPT_PREALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="57:43"><expr pos:start="53:5" pos:end="57:42"><name pos:start="53:5" pos:end="53:12">prealloc</name> <operator pos:start="53:14" pos:end="53:14">=</operator> <call pos:start="53:16" pos:end="57:42"><name pos:start="53:16" pos:end="53:30">qapi_enum_parse</name><argument_list pos:start="53:31" pos:end="57:42">(<argument pos:start="53:32" pos:end="53:50"><expr pos:start="53:32" pos:end="53:50"><name pos:start="53:32" pos:end="53:50">PreallocMode_lookup</name></expr></argument>, <argument pos:start="53:53" pos:end="53:55"><expr pos:start="53:53" pos:end="53:55"><name pos:start="53:53" pos:end="53:55">buf</name></expr></argument>,

                               <argument pos:start="55:32" pos:end="55:49"><expr pos:start="55:32" pos:end="55:49"><name pos:start="55:32" pos:end="55:49">PREALLOC_MODE__MAX</name></expr></argument>, <argument pos:start="55:52" pos:end="55:68"><expr pos:start="55:52" pos:end="55:68"><name pos:start="55:52" pos:end="55:68">PREALLOC_MODE_OFF</name></expr></argument>,

                               <argument pos:start="57:32" pos:end="57:41"><expr pos:start="57:32" pos:end="57:41"><operator pos:start="57:32" pos:end="57:32">&amp;</operator><name pos:start="57:33" pos:end="57:41">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="67:5"><if pos:start="59:5" pos:end="67:5">if <condition pos:start="59:8" pos:end="59:18">(<expr pos:start="59:9" pos:end="59:17"><name pos:start="59:9" pos:end="59:17">local_err</name></expr>)</condition> <block pos:start="59:20" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:20">

        <expr_stmt pos:start="61:9" pos:end="61:41"><expr pos:start="61:9" pos:end="61:40"><call pos:start="61:9" pos:end="61:40"><name pos:start="61:9" pos:end="61:23">error_propagate</name><argument_list pos:start="61:24" pos:end="61:40">(<argument pos:start="61:25" pos:end="61:28"><expr pos:start="61:25" pos:end="61:28"><name pos:start="61:25" pos:end="61:28">errp</name></expr></argument>, <argument pos:start="61:31" pos:end="61:39"><expr pos:start="61:31" pos:end="61:39"><name pos:start="61:31" pos:end="61:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:22"><expr pos:start="63:9" pos:end="63:21"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <operator pos:start="63:15" pos:end="63:15">-</operator><name pos:start="63:16" pos:end="63:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="65:9" pos:end="65:20">goto <name pos:start="65:14" pos:end="65:19">finish</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:16"><expr pos:start="69:5" pos:end="69:15"><call pos:start="69:5" pos:end="69:15"><name pos:start="69:5" pos:end="69:10">g_free</name><argument_list pos:start="69:11" pos:end="69:15">(<argument pos:start="69:12" pos:end="69:14"><expr pos:start="69:12" pos:end="69:14"><name pos:start="69:12" pos:end="69:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:57"><expr pos:start="71:5" pos:end="71:56"><name pos:start="71:5" pos:end="71:7">buf</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <call pos:start="71:11" pos:end="71:56"><name pos:start="71:11" pos:end="71:26">qemu_opt_get_del</name><argument_list pos:start="71:27" pos:end="71:56">(<argument pos:start="71:28" pos:end="71:31"><expr pos:start="71:28" pos:end="71:31"><name pos:start="71:28" pos:end="71:31">opts</name></expr></argument>, <argument pos:start="71:34" pos:end="71:55"><expr pos:start="71:34" pos:end="71:55"><name pos:start="71:34" pos:end="71:55">BLOCK_OPT_COMPAT_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="93:5"><if pos:start="73:5" pos:end="77:5">if <condition pos:start="73:8" pos:end="73:13">(<expr pos:start="73:9" pos:end="73:12"><operator pos:start="73:9" pos:end="73:9">!</operator><name pos:start="73:10" pos:end="73:12">buf</name></expr>)</condition> <block pos:start="73:15" pos:end="77:5">{<block_content>

        <comment type="block" pos:start="75:9" pos:end="75:30">/* keep the default */</comment>

    </block_content>}</block></if> <if type="elseif" pos:start="77:7" pos:end="81:5">else if <condition pos:start="77:15" pos:end="77:36">(<expr pos:start="77:16" pos:end="77:35"><operator pos:start="77:16" pos:end="77:16">!</operator><call pos:start="77:17" pos:end="77:35"><name pos:start="77:17" pos:end="77:22">strcmp</name><argument_list pos:start="77:23" pos:end="77:35">(<argument pos:start="77:24" pos:end="77:26"><expr pos:start="77:24" pos:end="77:26"><name pos:start="77:24" pos:end="77:26">buf</name></expr></argument>, <argument pos:start="77:29" pos:end="77:34"><expr pos:start="77:29" pos:end="77:34"><literal type="string" pos:start="77:29" pos:end="77:34">"0.10"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="77:38" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:20">

        <expr_stmt pos:start="79:9" pos:end="79:20"><expr pos:start="79:9" pos:end="79:19"><name pos:start="79:9" pos:end="79:15">version</name> <operator pos:start="79:17" pos:end="79:17">=</operator> <literal type="number" pos:start="79:19" pos:end="79:19">2</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="81:7" pos:end="85:5">else if <condition pos:start="81:15" pos:end="81:35">(<expr pos:start="81:16" pos:end="81:34"><operator pos:start="81:16" pos:end="81:16">!</operator><call pos:start="81:17" pos:end="81:34"><name pos:start="81:17" pos:end="81:22">strcmp</name><argument_list pos:start="81:23" pos:end="81:34">(<argument pos:start="81:24" pos:end="81:26"><expr pos:start="81:24" pos:end="81:26"><name pos:start="81:24" pos:end="81:26">buf</name></expr></argument>, <argument pos:start="81:29" pos:end="81:33"><expr pos:start="81:29" pos:end="81:33"><literal type="string" pos:start="81:29" pos:end="81:33">"1.1"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:37" pos:end="85:5">{<block_content pos:start="83:9" pos:end="83:20">

        <expr_stmt pos:start="83:9" pos:end="83:20"><expr pos:start="83:9" pos:end="83:19"><name pos:start="83:9" pos:end="83:15">version</name> <operator pos:start="83:17" pos:end="83:17">=</operator> <literal type="number" pos:start="83:19" pos:end="83:19">3</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="85:7" pos:end="93:5">else <block pos:start="85:12" pos:end="93:5">{<block_content pos:start="87:9" pos:end="91:20">

        <expr_stmt pos:start="87:9" pos:end="87:67"><expr pos:start="87:9" pos:end="87:66"><call pos:start="87:9" pos:end="87:66"><name pos:start="87:9" pos:end="87:18">error_setg</name><argument_list pos:start="87:19" pos:end="87:66">(<argument pos:start="87:20" pos:end="87:23"><expr pos:start="87:20" pos:end="87:23"><name pos:start="87:20" pos:end="87:23">errp</name></expr></argument>, <argument pos:start="87:26" pos:end="87:60"><expr pos:start="87:26" pos:end="87:60"><literal type="string" pos:start="87:26" pos:end="87:60">"Invalid compatibility level: '%s'"</literal></expr></argument>, <argument pos:start="87:63" pos:end="87:65"><expr pos:start="87:63" pos:end="87:65"><name pos:start="87:63" pos:end="87:65">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:22"><expr pos:start="89:9" pos:end="89:21"><name pos:start="89:9" pos:end="89:11">ret</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <operator pos:start="89:15" pos:end="89:15">-</operator><name pos:start="89:16" pos:end="89:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="91:9" pos:end="91:20">goto <name pos:start="91:14" pos:end="91:19">finish</name>;</goto>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="97:5" pos:end="101:5"><if pos:start="97:5" pos:end="101:5">if <condition pos:start="97:8" pos:end="97:69">(<expr pos:start="97:9" pos:end="97:68"><call pos:start="97:9" pos:end="97:68"><name pos:start="97:9" pos:end="97:29">qemu_opt_get_bool_del</name><argument_list pos:start="97:30" pos:end="97:68">(<argument pos:start="97:31" pos:end="97:34"><expr pos:start="97:31" pos:end="97:34"><name pos:start="97:31" pos:end="97:34">opts</name></expr></argument>, <argument pos:start="97:37" pos:end="97:60"><expr pos:start="97:37" pos:end="97:60"><name pos:start="97:37" pos:end="97:60">BLOCK_OPT_LAZY_REFCOUNTS</name></expr></argument>, <argument pos:start="97:63" pos:end="97:67"><expr pos:start="97:63" pos:end="97:67"><name pos:start="97:63" pos:end="97:67">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="97:71" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:43">

        <expr_stmt pos:start="99:9" pos:end="99:43"><expr pos:start="99:9" pos:end="99:42"><name pos:start="99:9" pos:end="99:13">flags</name> <operator pos:start="99:15" pos:end="99:16">|=</operator> <name pos:start="99:18" pos:end="99:42">BLOCK_FLAG_LAZY_REFCOUNTS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="105:5" pos:end="115:5"><if pos:start="105:5" pos:end="115:5">if <condition pos:start="105:8" pos:end="105:54">(<expr pos:start="105:9" pos:end="105:53"><name pos:start="105:9" pos:end="105:20">backing_file</name> <operator pos:start="105:22" pos:end="105:23">&amp;&amp;</operator> <name pos:start="105:25" pos:end="105:32">prealloc</name> <operator pos:start="105:34" pos:end="105:35">!=</operator> <name pos:start="105:37" pos:end="105:53">PREALLOC_MODE_OFF</name></expr>)</condition> <block pos:start="105:56" pos:end="115:5">{<block_content pos:start="107:9" pos:end="113:20">

        <expr_stmt pos:start="107:9" pos:end="109:36"><expr pos:start="107:9" pos:end="109:35"><call pos:start="107:9" pos:end="109:35"><name pos:start="107:9" pos:end="107:18">error_setg</name><argument_list pos:start="107:19" pos:end="109:35">(<argument pos:start="107:20" pos:end="107:23"><expr pos:start="107:20" pos:end="107:23"><name pos:start="107:20" pos:end="107:23">errp</name></expr></argument>, <argument pos:start="107:26" pos:end="109:34"><expr pos:start="107:26" pos:end="109:34"><literal type="string" pos:start="107:26" pos:end="107:76">"Backing file and preallocation cannot be used at "</literal>

                   <literal type="string" pos:start="109:20" pos:end="109:34">"the same time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:22"><expr pos:start="111:9" pos:end="111:21"><name pos:start="111:9" pos:end="111:11">ret</name> <operator pos:start="111:13" pos:end="111:13">=</operator> <operator pos:start="111:15" pos:end="111:15">-</operator><name pos:start="111:16" pos:end="111:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="113:9" pos:end="113:20">goto <name pos:start="113:14" pos:end="113:19">finish</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="119:5" pos:end="129:5"><if pos:start="119:5" pos:end="129:5">if <condition pos:start="119:8" pos:end="119:59">(<expr pos:start="119:9" pos:end="119:58"><name pos:start="119:9" pos:end="119:15">version</name> <operator pos:start="119:17" pos:end="119:17">&lt;</operator> <literal type="number" pos:start="119:19" pos:end="119:19">3</literal> <operator pos:start="119:21" pos:end="119:22">&amp;&amp;</operator> <operator pos:start="119:24" pos:end="119:24">(</operator><name pos:start="119:25" pos:end="119:29">flags</name> <operator pos:start="119:31" pos:end="119:31">&amp;</operator> <name pos:start="119:33" pos:end="119:57">BLOCK_FLAG_LAZY_REFCOUNTS</name><operator pos:start="119:58" pos:end="119:58">)</operator></expr>)</condition> <block pos:start="119:61" pos:end="129:5">{<block_content pos:start="121:9" pos:end="127:20">

        <expr_stmt pos:start="121:9" pos:end="123:70"><expr pos:start="121:9" pos:end="123:69"><call pos:start="121:9" pos:end="123:69"><name pos:start="121:9" pos:end="121:18">error_setg</name><argument_list pos:start="121:19" pos:end="123:69">(<argument pos:start="121:20" pos:end="121:23"><expr pos:start="121:20" pos:end="121:23"><name pos:start="121:20" pos:end="121:23">errp</name></expr></argument>, <argument pos:start="121:26" pos:end="123:68"><expr pos:start="121:26" pos:end="123:68"><literal type="string" pos:start="121:26" pos:end="121:76">"Lazy refcounts only supported with compatibility "</literal>

                   <literal type="string" pos:start="123:20" pos:end="123:68">"level 1.1 and above (use compat=1.1 or greater)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:22"><expr pos:start="125:9" pos:end="125:21"><name pos:start="125:9" pos:end="125:11">ret</name> <operator pos:start="125:13" pos:end="125:13">=</operator> <operator pos:start="125:15" pos:end="125:15">-</operator><name pos:start="125:16" pos:end="125:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="127:9" pos:end="127:20">goto <name pos:start="127:14" pos:end="127:19">finish</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="133:5" pos:end="135:59"><expr pos:start="133:5" pos:end="135:58"><name pos:start="133:5" pos:end="133:17">refcount_bits</name> <operator pos:start="133:19" pos:end="133:19">=</operator> <call pos:start="133:21" pos:end="135:58"><name pos:start="133:21" pos:end="133:43">qemu_opt_get_number_del</name><argument_list pos:start="133:44" pos:end="135:58">(<argument pos:start="133:45" pos:end="133:48"><expr pos:start="133:45" pos:end="133:48"><name pos:start="133:45" pos:end="133:48">opts</name></expr></argument>, <argument pos:start="133:51" pos:end="133:73"><expr pos:start="133:51" pos:end="133:73"><name pos:start="133:51" pos:end="133:73">BLOCK_OPT_REFCOUNT_BITS</name></expr></argument>,

                                            <argument pos:start="135:45" pos:end="135:57"><expr pos:start="135:45" pos:end="135:57"><name pos:start="135:45" pos:end="135:57">refcount_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="137:5" pos:end="147:5"><if pos:start="137:5" pos:end="147:5">if <condition pos:start="137:8" pos:end="137:60">(<expr pos:start="137:9" pos:end="137:59"><name pos:start="137:9" pos:end="137:21">refcount_bits</name> <operator pos:start="137:23" pos:end="137:23">&gt;</operator> <literal type="number" pos:start="137:25" pos:end="137:26">64</literal> <operator pos:start="137:28" pos:end="137:29">||</operator> <operator pos:start="137:31" pos:end="137:31">!</operator><call pos:start="137:32" pos:end="137:59"><name pos:start="137:32" pos:end="137:44">is_power_of_2</name><argument_list pos:start="137:45" pos:end="137:59">(<argument pos:start="137:46" pos:end="137:58"><expr pos:start="137:46" pos:end="137:58"><name pos:start="137:46" pos:end="137:58">refcount_bits</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="137:62" pos:end="147:5">{<block_content pos:start="139:9" pos:end="145:20">

        <expr_stmt pos:start="139:9" pos:end="141:37"><expr pos:start="139:9" pos:end="141:36"><call pos:start="139:9" pos:end="141:36"><name pos:start="139:9" pos:end="139:18">error_setg</name><argument_list pos:start="139:19" pos:end="141:36">(<argument pos:start="139:20" pos:end="139:23"><expr pos:start="139:20" pos:end="139:23"><name pos:start="139:20" pos:end="139:23">errp</name></expr></argument>, <argument pos:start="139:26" pos:end="141:35"><expr pos:start="139:26" pos:end="141:35"><literal type="string" pos:start="139:26" pos:end="139:77">"Refcount width must be a power of two and may not "</literal>

                   <literal type="string" pos:start="141:20" pos:end="141:35">"exceed 64 bits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:22"><expr pos:start="143:9" pos:end="143:21"><name pos:start="143:9" pos:end="143:11">ret</name> <operator pos:start="143:13" pos:end="143:13">=</operator> <operator pos:start="143:15" pos:end="143:15">-</operator><name pos:start="143:16" pos:end="143:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="145:9" pos:end="145:20">goto <name pos:start="145:14" pos:end="145:19">finish</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="151:5" pos:end="163:5"><if pos:start="151:5" pos:end="163:5">if <condition pos:start="151:8" pos:end="151:43">(<expr pos:start="151:9" pos:end="151:42"><name pos:start="151:9" pos:end="151:15">version</name> <operator pos:start="151:17" pos:end="151:17">&lt;</operator> <literal type="number" pos:start="151:19" pos:end="151:19">3</literal> <operator pos:start="151:21" pos:end="151:22">&amp;&amp;</operator> <name pos:start="151:24" pos:end="151:36">refcount_bits</name> <operator pos:start="151:38" pos:end="151:39">!=</operator> <literal type="number" pos:start="151:41" pos:end="151:42">16</literal></expr>)</condition> <block pos:start="151:45" pos:end="163:5">{<block_content pos:start="153:9" pos:end="161:20">

        <expr_stmt pos:start="153:9" pos:end="157:31"><expr pos:start="153:9" pos:end="157:30"><call pos:start="153:9" pos:end="157:30"><name pos:start="153:9" pos:end="153:18">error_setg</name><argument_list pos:start="153:19" pos:end="157:30">(<argument pos:start="153:20" pos:end="153:23"><expr pos:start="153:20" pos:end="153:23"><name pos:start="153:20" pos:end="153:23">errp</name></expr></argument>, <argument pos:start="153:26" pos:end="157:29"><expr pos:start="153:26" pos:end="157:29"><literal type="string" pos:start="153:26" pos:end="153:74">"Different refcount widths than 16 bits require "</literal>

                   <literal type="string" pos:start="155:20" pos:end="155:73">"compatibility level 1.1 or above (use compat=1.1 or "</literal>

                   <literal type="string" pos:start="157:20" pos:end="157:29">"greater)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:22"><expr pos:start="159:9" pos:end="159:21"><name pos:start="159:9" pos:end="159:11">ret</name> <operator pos:start="159:13" pos:end="159:13">=</operator> <operator pos:start="159:15" pos:end="159:15">-</operator><name pos:start="159:16" pos:end="159:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="161:9" pos:end="161:20">goto <name pos:start="161:14" pos:end="161:19">finish</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="167:5" pos:end="167:42"><expr pos:start="167:5" pos:end="167:41"><name pos:start="167:5" pos:end="167:18">refcount_order</name> <operator pos:start="167:20" pos:end="167:20">=</operator> <call pos:start="167:22" pos:end="167:41"><name pos:start="167:22" pos:end="167:26">ctz32</name><argument_list pos:start="167:27" pos:end="167:41">(<argument pos:start="167:28" pos:end="167:40"><expr pos:start="167:28" pos:end="167:40"><name pos:start="167:28" pos:end="167:40">refcount_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="171:5" pos:end="175:36"><expr pos:start="171:5" pos:end="175:35"><name pos:start="171:5" pos:end="171:7">ret</name> <operator pos:start="171:9" pos:end="171:9">=</operator> <call pos:start="171:11" pos:end="175:35"><name pos:start="171:11" pos:end="171:23">qcow2_create2</name><argument_list pos:start="171:24" pos:end="175:35">(<argument pos:start="171:25" pos:end="171:32"><expr pos:start="171:25" pos:end="171:32"><name pos:start="171:25" pos:end="171:32">filename</name></expr></argument>, <argument pos:start="171:35" pos:end="171:38"><expr pos:start="171:35" pos:end="171:38"><name pos:start="171:35" pos:end="171:38">size</name></expr></argument>, <argument pos:start="171:41" pos:end="171:52"><expr pos:start="171:41" pos:end="171:52"><name pos:start="171:41" pos:end="171:52">backing_file</name></expr></argument>, <argument pos:start="171:55" pos:end="171:65"><expr pos:start="171:55" pos:end="171:65"><name pos:start="171:55" pos:end="171:65">backing_fmt</name></expr></argument>, <argument pos:start="171:68" pos:end="171:72"><expr pos:start="171:68" pos:end="171:72"><name pos:start="171:68" pos:end="171:72">flags</name></expr></argument>,

                        <argument pos:start="173:25" pos:end="173:36"><expr pos:start="173:25" pos:end="173:36"><name pos:start="173:25" pos:end="173:36">cluster_size</name></expr></argument>, <argument pos:start="173:39" pos:end="173:46"><expr pos:start="173:39" pos:end="173:46"><name pos:start="173:39" pos:end="173:46">prealloc</name></expr></argument>, <argument pos:start="173:49" pos:end="173:52"><expr pos:start="173:49" pos:end="173:52"><name pos:start="173:49" pos:end="173:52">opts</name></expr></argument>, <argument pos:start="173:55" pos:end="173:61"><expr pos:start="173:55" pos:end="173:61"><name pos:start="173:55" pos:end="173:61">version</name></expr></argument>, <argument pos:start="173:64" pos:end="173:77"><expr pos:start="173:64" pos:end="173:77"><name pos:start="173:64" pos:end="173:77">refcount_order</name></expr></argument>,

                        <argument pos:start="175:25" pos:end="175:34"><expr pos:start="175:25" pos:end="175:34"><operator pos:start="175:25" pos:end="175:25">&amp;</operator><name pos:start="175:26" pos:end="175:34">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="177:5" pos:end="181:5"><if pos:start="177:5" pos:end="181:5">if <condition pos:start="177:8" pos:end="177:18">(<expr pos:start="177:9" pos:end="177:17"><name pos:start="177:9" pos:end="177:17">local_err</name></expr>)</condition> <block pos:start="177:20" pos:end="181:5">{<block_content pos:start="179:9" pos:end="179:41">

        <expr_stmt pos:start="179:9" pos:end="179:41"><expr pos:start="179:9" pos:end="179:40"><call pos:start="179:9" pos:end="179:40"><name pos:start="179:9" pos:end="179:23">error_propagate</name><argument_list pos:start="179:24" pos:end="179:40">(<argument pos:start="179:25" pos:end="179:28"><expr pos:start="179:25" pos:end="179:28"><name pos:start="179:25" pos:end="179:28">errp</name></expr></argument>, <argument pos:start="179:31" pos:end="179:39"><expr pos:start="179:31" pos:end="179:39"><name pos:start="179:31" pos:end="179:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="185:1" pos:end="185:7"><name pos:start="185:1" pos:end="185:6">finish</name>:</label>

    <expr_stmt pos:start="187:5" pos:end="187:25"><expr pos:start="187:5" pos:end="187:24"><call pos:start="187:5" pos:end="187:24"><name pos:start="187:5" pos:end="187:10">g_free</name><argument_list pos:start="187:11" pos:end="187:24">(<argument pos:start="187:12" pos:end="187:23"><expr pos:start="187:12" pos:end="187:23"><name pos:start="187:12" pos:end="187:23">backing_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:24"><expr pos:start="189:5" pos:end="189:23"><call pos:start="189:5" pos:end="189:23"><name pos:start="189:5" pos:end="189:10">g_free</name><argument_list pos:start="189:11" pos:end="189:23">(<argument pos:start="189:12" pos:end="189:22"><expr pos:start="189:12" pos:end="189:22"><name pos:start="189:12" pos:end="189:22">backing_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:16"><expr pos:start="191:5" pos:end="191:15"><call pos:start="191:5" pos:end="191:15"><name pos:start="191:5" pos:end="191:10">g_free</name><argument_list pos:start="191:11" pos:end="191:15">(<argument pos:start="191:12" pos:end="191:14"><expr pos:start="191:12" pos:end="191:14"><name pos:start="191:12" pos:end="191:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="193:5" pos:end="193:15">return <expr pos:start="193:12" pos:end="193:14"><name pos:start="193:12" pos:end="193:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
