<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4712.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">vnc_display_connect</name><parameter_list pos:start="1:31" pos:end="11:44">(<parameter pos:start="1:32" pos:end="1:45"><decl pos:start="1:32" pos:end="1:45"><type pos:start="1:32" pos:end="1:45"><name pos:start="1:32" pos:end="1:41">VncDisplay</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:45">vd</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:52"><decl pos:start="3:32" pos:end="3:52"><type pos:start="3:32" pos:end="3:52"><name pos:start="3:32" pos:end="3:44">SocketAddress</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier><modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:52">saddr</name></decl></parameter>,

                               <parameter pos:start="5:32" pos:end="5:44"><decl pos:start="5:32" pos:end="5:44"><type pos:start="5:32" pos:end="5:44"><name pos:start="5:32" pos:end="5:37">size_t</name></type> <name pos:start="5:39" pos:end="5:44">nsaddr</name></decl></parameter>,

                               <parameter pos:start="7:32" pos:end="7:53"><decl pos:start="7:32" pos:end="7:53"><type pos:start="7:32" pos:end="7:53"><name pos:start="7:32" pos:end="7:44">SocketAddress</name> <modifier pos:start="7:46" pos:end="7:46">*</modifier><modifier pos:start="7:47" pos:end="7:47">*</modifier></type><name pos:start="7:48" pos:end="7:53">wsaddr</name></decl></parameter>,

                               <parameter pos:start="9:32" pos:end="9:45"><decl pos:start="9:32" pos:end="9:45"><type pos:start="9:32" pos:end="9:45"><name pos:start="9:32" pos:end="9:37">size_t</name></type> <name pos:start="9:39" pos:end="9:45">nwsaddr</name></decl></parameter>,

                               <parameter pos:start="11:32" pos:end="11:43"><decl pos:start="11:32" pos:end="11:43"><type pos:start="11:32" pos:end="11:43"><name pos:start="11:32" pos:end="11:36">Error</name> <modifier pos:start="11:38" pos:end="11:38">*</modifier><modifier pos:start="11:39" pos:end="11:39">*</modifier></type><name pos:start="11:40" pos:end="11:43">errp</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="55:1">{<block_content pos:start="17:5" pos:end="53:13">

    <comment type="block" pos:start="15:5" pos:end="15:27">/* connect to viewer */</comment>

    <decl_stmt pos:start="17:5" pos:end="17:34"><decl pos:start="17:5" pos:end="17:33"><type pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:20">QIOChannelSocket</name> <modifier pos:start="17:22" pos:end="17:22">*</modifier></type><name pos:start="17:23" pos:end="17:26">sioc</name> <init pos:start="17:28" pos:end="17:33">= <expr pos:start="17:30" pos:end="17:33"><name pos:start="17:30" pos:end="17:33">NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:21">(<expr pos:start="19:9" pos:end="19:20"><name pos:start="19:9" pos:end="19:15">nwsaddr</name> <operator pos:start="19:17" pos:end="19:18">!=</operator> <literal type="number" pos:start="19:20" pos:end="19:20">0</literal></expr>)</condition> <block pos:start="19:23" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:18">

        <expr_stmt pos:start="21:9" pos:end="21:66"><expr pos:start="21:9" pos:end="21:65"><call pos:start="21:9" pos:end="21:65"><name pos:start="21:9" pos:end="21:18">error_setg</name><argument_list pos:start="21:19" pos:end="21:65">(<argument pos:start="21:20" pos:end="21:23"><expr pos:start="21:20" pos:end="21:23"><name pos:start="21:20" pos:end="21:23">errp</name></expr></argument>, <argument pos:start="21:26" pos:end="21:64"><expr pos:start="21:26" pos:end="21:64"><literal type="string" pos:start="21:26" pos:end="21:64">"Cannot use websockets in reverse mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:18">return <expr pos:start="23:16" pos:end="23:17"><operator pos:start="23:16" pos:end="23:16">-</operator><literal type="number" pos:start="23:17" pos:end="23:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:20">(<expr pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:14">nsaddr</name> <operator pos:start="27:16" pos:end="27:17">!=</operator> <literal type="number" pos:start="27:19" pos:end="27:19">1</literal></expr>)</condition> <block pos:start="27:22" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:18">

        <expr_stmt pos:start="29:9" pos:end="29:70"><expr pos:start="29:9" pos:end="29:69"><call pos:start="29:9" pos:end="29:69"><name pos:start="29:9" pos:end="29:18">error_setg</name><argument_list pos:start="29:19" pos:end="29:69">(<argument pos:start="29:20" pos:end="29:23"><expr pos:start="29:20" pos:end="29:23"><name pos:start="29:20" pos:end="29:23">errp</name></expr></argument>, <argument pos:start="29:26" pos:end="29:68"><expr pos:start="29:26" pos:end="29:68"><literal type="string" pos:start="29:26" pos:end="29:68">"Expected a single address in reverse mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="35:5" pos:end="35:57">/* TODO SOCKET_ADDRESS_KIND_FD when fd has AF_UNIX */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:61"><expr pos:start="37:5" pos:end="37:60"><name pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:6">vd</name><operator pos:start="37:7" pos:end="37:8">-&gt;</operator><name pos:start="37:9" pos:end="37:15">is_unix</name></name> <operator pos:start="37:17" pos:end="37:17">=</operator> <name pos:start="37:19" pos:end="37:26"><name pos:start="37:19" pos:end="37:23">saddr</name><index pos:start="37:24" pos:end="37:26">[<expr pos:start="37:25" pos:end="37:25"><literal type="number" pos:start="37:25" pos:end="37:25">0</literal></expr>]</index></name><operator pos:start="37:27" pos:end="37:28">-&gt;</operator><name pos:start="37:29" pos:end="37:32">type</name> <operator pos:start="37:34" pos:end="37:35">==</operator> <name pos:start="37:37" pos:end="37:60">SOCKET_ADDRESS_KIND_UNIX</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:36"><expr pos:start="39:5" pos:end="39:35"><name pos:start="39:5" pos:end="39:8">sioc</name> <operator pos:start="39:10" pos:end="39:10">=</operator> <call pos:start="39:12" pos:end="39:35"><name pos:start="39:12" pos:end="39:33">qio_channel_socket_new</name><argument_list pos:start="39:34" pos:end="39:35">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:59"><expr pos:start="41:5" pos:end="41:58"><call pos:start="41:5" pos:end="41:58"><name pos:start="41:5" pos:end="41:24">qio_channel_set_name</name><argument_list pos:start="41:25" pos:end="41:58">(<argument pos:start="41:26" pos:end="41:42"><expr pos:start="41:26" pos:end="41:42"><call pos:start="41:26" pos:end="41:42"><name pos:start="41:26" pos:end="41:36">QIO_CHANNEL</name><argument_list pos:start="41:37" pos:end="41:42">(<argument pos:start="41:38" pos:end="41:41"><expr pos:start="41:38" pos:end="41:41"><name pos:start="41:38" pos:end="41:41">sioc</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="41:45" pos:end="41:57"><expr pos:start="41:45" pos:end="41:57"><literal type="string" pos:start="41:45" pos:end="41:57">"vnc-reverse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:66">(<expr pos:start="43:9" pos:end="43:65"><call pos:start="43:9" pos:end="43:61"><name pos:start="43:9" pos:end="43:39">qio_channel_socket_connect_sync</name><argument_list pos:start="43:40" pos:end="43:61">(<argument pos:start="43:41" pos:end="43:44"><expr pos:start="43:41" pos:end="43:44"><name pos:start="43:41" pos:end="43:44">sioc</name></expr></argument>, <argument pos:start="43:47" pos:end="43:54"><expr pos:start="43:47" pos:end="43:54"><name pos:start="43:47" pos:end="43:54"><name pos:start="43:47" pos:end="43:51">saddr</name><index pos:start="43:52" pos:end="43:54">[<expr pos:start="43:53" pos:end="43:53"><literal type="number" pos:start="43:53" pos:end="43:53">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="43:57" pos:end="43:60"><expr pos:start="43:57" pos:end="43:60"><name pos:start="43:57" pos:end="43:60">errp</name></expr></argument>)</argument_list></call> <operator pos:start="43:63" pos:end="43:63">&lt;</operator> <literal type="number" pos:start="43:65" pos:end="43:65">0</literal></expr>)</condition> <block pos:start="43:68" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:18">

        <return pos:start="45:9" pos:end="45:18">return <expr pos:start="45:16" pos:end="45:17"><operator pos:start="45:16" pos:end="45:16">-</operator><literal type="number" pos:start="45:17" pos:end="45:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:40"><expr pos:start="49:5" pos:end="49:39"><call pos:start="49:5" pos:end="49:39"><name pos:start="49:5" pos:end="49:15">vnc_connect</name><argument_list pos:start="49:16" pos:end="49:39">(<argument pos:start="49:17" pos:end="49:18"><expr pos:start="49:17" pos:end="49:18"><name pos:start="49:17" pos:end="49:18">vd</name></expr></argument>, <argument pos:start="49:21" pos:end="49:24"><expr pos:start="49:21" pos:end="49:24"><name pos:start="49:21" pos:end="49:24">sioc</name></expr></argument>, <argument pos:start="49:27" pos:end="49:31"><expr pos:start="49:27" pos:end="49:31"><name pos:start="49:27" pos:end="49:31">false</name></expr></argument>, <argument pos:start="49:34" pos:end="49:38"><expr pos:start="49:34" pos:end="49:38"><name pos:start="49:34" pos:end="49:38">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:31"><expr pos:start="51:5" pos:end="51:30"><call pos:start="51:5" pos:end="51:30"><name pos:start="51:5" pos:end="51:16">object_unref</name><argument_list pos:start="51:17" pos:end="51:30">(<argument pos:start="51:18" pos:end="51:29"><expr pos:start="51:18" pos:end="51:29"><call pos:start="51:18" pos:end="51:29"><name pos:start="51:18" pos:end="51:23">OBJECT</name><argument_list pos:start="51:24" pos:end="51:29">(<argument pos:start="51:25" pos:end="51:28"><expr pos:start="51:25" pos:end="51:28"><name pos:start="51:25" pos:end="51:28">sioc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="53:5" pos:end="53:13">return <expr pos:start="53:12" pos:end="53:12"><literal type="number" pos:start="53:12" pos:end="53:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
