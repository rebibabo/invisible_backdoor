<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20652.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">test_i440fx_pam</name><parameter_list pos:start="1:28" pos:end="1:49">(<parameter pos:start="1:29" pos:end="1:48"><decl pos:start="1:29" pos:end="1:48"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:41">gconstpointer</name></type> <name pos:start="1:43" pos:end="1:48">opaque</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="69:1">{<block_content pos:start="3:5" pos:end="68:16">
    <decl_stmt pos:start="3:5" pos:end="3:31"><decl pos:start="3:5" pos:end="3:30"><type pos:start="3:5" pos:end="3:20"><specifier pos:start="3:5" pos:end="3:9">const</specifier> <name pos:start="3:11" pos:end="3:18">TestData</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier></type><name pos:start="3:21" pos:end="3:21">s</name> <init pos:start="3:23" pos:end="3:30">= <expr pos:start="3:25" pos:end="3:30"><name pos:start="3:25" pos:end="3:30">opaque</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:17"><decl pos:start="4:5" pos:end="4:16"><type pos:start="4:5" pos:end="4:13"><name pos:start="4:5" pos:end="4:11">QPCIBus</name> <modifier pos:start="4:13" pos:end="4:13">*</modifier></type><name pos:start="4:14" pos:end="4:16">bus</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">QPCIDevice</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">dev</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:10"><decl pos:start="6:5" pos:end="6:9"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:9">i</name></decl>;</decl_stmt>
    <struct pos:start="7:5" pos:end="25:6"><specifier pos:start="7:5" pos:end="7:10">static</specifier> struct <block pos:start="7:19" pos:end="10:5">{
        <decl_stmt pos:start="8:9" pos:end="8:23"><decl pos:start="8:9" pos:end="8:22"><type pos:start="8:9" pos:end="8:16"><name pos:start="8:9" pos:end="8:16">uint32_t</name></type> <name pos:start="8:18" pos:end="8:22">start</name></decl>;</decl_stmt>
        <decl_stmt pos:start="9:9" pos:end="9:21"><decl pos:start="9:9" pos:end="9:20"><type pos:start="9:9" pos:end="9:16"><name pos:start="9:9" pos:end="9:16">uint32_t</name></type> <name pos:start="9:18" pos:end="9:20">end</name></decl>;</decl_stmt>
    }</block> <decl pos:start="10:7" pos:end="25:5"><name pos:start="10:7" pos:end="10:16"><name pos:start="10:7" pos:end="10:14">pam_area</name><index pos:start="10:15" pos:end="10:16">[]</index></name> <init pos:start="10:18" pos:end="25:5">= <expr pos:start="10:20" pos:end="25:5"><block pos:start="10:20" pos:end="25:5">{
        <expr pos:start="11:9" pos:end="11:16"><block pos:start="11:9" pos:end="11:16">{ <expr pos:start="11:11" pos:end="11:11"><literal type="number" pos:start="11:11" pos:end="11:11">0</literal></expr>, <expr pos:start="11:14" pos:end="11:14"><literal type="number" pos:start="11:14" pos:end="11:14">0</literal></expr> }</block></expr>,             <comment type="block" pos:start="11:31" pos:end="11:44">/* Reserved */</comment>
        <expr pos:start="12:9" pos:end="12:28"><block pos:start="12:9" pos:end="12:28">{ <expr pos:start="12:11" pos:end="12:17"><literal type="number" pos:start="12:11" pos:end="12:17">0xF0000</literal></expr>, <expr pos:start="12:20" pos:end="12:26"><literal type="number" pos:start="12:20" pos:end="12:26">0xFFFFF</literal></expr> }</block></expr>, <comment type="block" pos:start="12:31" pos:end="12:45">/* BIOS Area */</comment>
        <expr pos:start="13:9" pos:end="13:28"><block pos:start="13:9" pos:end="13:28">{ <expr pos:start="13:11" pos:end="13:17"><literal type="number" pos:start="13:11" pos:end="13:17">0xC0000</literal></expr>, <expr pos:start="13:20" pos:end="13:26"><literal type="number" pos:start="13:20" pos:end="13:26">0xC3FFF</literal></expr> }</block></expr>, <comment type="block" pos:start="13:31" pos:end="13:46">/* Option ROM */</comment>
        <expr pos:start="14:9" pos:end="14:28"><block pos:start="14:9" pos:end="14:28">{ <expr pos:start="14:11" pos:end="14:17"><literal type="number" pos:start="14:11" pos:end="14:17">0xC4000</literal></expr>, <expr pos:start="14:20" pos:end="14:26"><literal type="number" pos:start="14:20" pos:end="14:26">0xC7FFF</literal></expr> }</block></expr>, <comment type="block" pos:start="14:31" pos:end="14:46">/* Option ROM */</comment>
        <expr pos:start="15:9" pos:end="15:28"><block pos:start="15:9" pos:end="15:28">{ <expr pos:start="15:11" pos:end="15:17"><literal type="number" pos:start="15:11" pos:end="15:17">0xC8000</literal></expr>, <expr pos:start="15:20" pos:end="15:26"><literal type="number" pos:start="15:20" pos:end="15:26">0xCBFFF</literal></expr> }</block></expr>, <comment type="block" pos:start="15:31" pos:end="15:46">/* Option ROM */</comment>
        <expr pos:start="16:9" pos:end="16:28"><block pos:start="16:9" pos:end="16:28">{ <expr pos:start="16:11" pos:end="16:17"><literal type="number" pos:start="16:11" pos:end="16:17">0xCC000</literal></expr>, <expr pos:start="16:20" pos:end="16:26"><literal type="number" pos:start="16:20" pos:end="16:26">0xCFFFF</literal></expr> }</block></expr>, <comment type="block" pos:start="16:31" pos:end="16:46">/* Option ROM */</comment>
        <expr pos:start="17:9" pos:end="17:28"><block pos:start="17:9" pos:end="17:28">{ <expr pos:start="17:11" pos:end="17:17"><literal type="number" pos:start="17:11" pos:end="17:17">0xD0000</literal></expr>, <expr pos:start="17:20" pos:end="17:26"><literal type="number" pos:start="17:20" pos:end="17:26">0xD3FFF</literal></expr> }</block></expr>, <comment type="block" pos:start="17:31" pos:end="17:46">/* Option ROM */</comment>
        <expr pos:start="18:9" pos:end="18:28"><block pos:start="18:9" pos:end="18:28">{ <expr pos:start="18:11" pos:end="18:17"><literal type="number" pos:start="18:11" pos:end="18:17">0xD4000</literal></expr>, <expr pos:start="18:20" pos:end="18:26"><literal type="number" pos:start="18:20" pos:end="18:26">0xD7FFF</literal></expr> }</block></expr>, <comment type="block" pos:start="18:31" pos:end="18:46">/* Option ROM */</comment>
        <expr pos:start="19:9" pos:end="19:28"><block pos:start="19:9" pos:end="19:28">{ <expr pos:start="19:11" pos:end="19:17"><literal type="number" pos:start="19:11" pos:end="19:17">0xD8000</literal></expr>, <expr pos:start="19:20" pos:end="19:26"><literal type="number" pos:start="19:20" pos:end="19:26">0xDBFFF</literal></expr> }</block></expr>, <comment type="block" pos:start="19:31" pos:end="19:46">/* Option ROM */</comment>
        <expr pos:start="20:9" pos:end="20:28"><block pos:start="20:9" pos:end="20:28">{ <expr pos:start="20:11" pos:end="20:17"><literal type="number" pos:start="20:11" pos:end="20:17">0xDC000</literal></expr>, <expr pos:start="20:20" pos:end="20:26"><literal type="number" pos:start="20:20" pos:end="20:26">0xDFFFF</literal></expr> }</block></expr>, <comment type="block" pos:start="20:31" pos:end="20:46">/* Option ROM */</comment>
        <expr pos:start="21:9" pos:end="21:28"><block pos:start="21:9" pos:end="21:28">{ <expr pos:start="21:11" pos:end="21:17"><literal type="number" pos:start="21:11" pos:end="21:17">0xE0000</literal></expr>, <expr pos:start="21:20" pos:end="21:26"><literal type="number" pos:start="21:20" pos:end="21:26">0xE3FFF</literal></expr> }</block></expr>, <comment type="block" pos:start="21:31" pos:end="21:50">/* BIOS Extension */</comment>
        <expr pos:start="22:9" pos:end="22:28"><block pos:start="22:9" pos:end="22:28">{ <expr pos:start="22:11" pos:end="22:17"><literal type="number" pos:start="22:11" pos:end="22:17">0xE4000</literal></expr>, <expr pos:start="22:20" pos:end="22:26"><literal type="number" pos:start="22:20" pos:end="22:26">0xE7FFF</literal></expr> }</block></expr>, <comment type="block" pos:start="22:31" pos:end="22:50">/* BIOS Extension */</comment>
        <expr pos:start="23:9" pos:end="23:28"><block pos:start="23:9" pos:end="23:28">{ <expr pos:start="23:11" pos:end="23:17"><literal type="number" pos:start="23:11" pos:end="23:17">0xE8000</literal></expr>, <expr pos:start="23:20" pos:end="23:26"><literal type="number" pos:start="23:20" pos:end="23:26">0xEBFFF</literal></expr> }</block></expr>, <comment type="block" pos:start="23:31" pos:end="23:50">/* BIOS Extension */</comment>
        <expr pos:start="24:9" pos:end="24:28"><block pos:start="24:9" pos:end="24:28">{ <expr pos:start="24:11" pos:end="24:17"><literal type="number" pos:start="24:11" pos:end="24:17">0xEC000</literal></expr>, <expr pos:start="24:20" pos:end="24:26"><literal type="number" pos:start="24:20" pos:end="24:26">0xEFFFF</literal></expr> }</block></expr>, <comment type="block" pos:start="24:31" pos:end="24:50">/* BIOS Extension */</comment>
    }</block></expr></init></decl>;</struct>
    <expr_stmt pos:start="26:5" pos:end="26:32"><expr pos:start="26:5" pos:end="26:31"><name pos:start="26:5" pos:end="26:7">bus</name> <operator pos:start="26:9" pos:end="26:9">=</operator> <call pos:start="26:11" pos:end="26:31"><name pos:start="26:11" pos:end="26:28">test_start_get_bus</name><argument_list pos:start="26:29" pos:end="26:31">(<argument pos:start="26:30" pos:end="26:30"><expr pos:start="26:30" pos:end="26:30"><name pos:start="26:30" pos:end="26:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="27:5" pos:end="27:50"><expr pos:start="27:5" pos:end="27:49"><name pos:start="27:5" pos:end="27:7">dev</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:49"><name pos:start="27:11" pos:end="27:26">qpci_device_find</name><argument_list pos:start="27:27" pos:end="27:49">(<argument pos:start="27:28" pos:end="27:30"><expr pos:start="27:28" pos:end="27:30"><name pos:start="27:28" pos:end="27:30">bus</name></expr></argument>, <argument pos:start="27:33" pos:end="27:48"><expr pos:start="27:33" pos:end="27:48"><call pos:start="27:33" pos:end="27:48"><name pos:start="27:33" pos:end="27:42">QPCI_DEVFN</name><argument_list pos:start="27:43" pos:end="27:48">(<argument pos:start="27:44" pos:end="27:44"><expr pos:start="27:44" pos:end="27:44"><literal type="number" pos:start="27:44" pos:end="27:44">0</literal></expr></argument>, <argument pos:start="27:47" pos:end="27:47"><expr pos:start="27:47" pos:end="27:47"><literal type="number" pos:start="27:47" pos:end="27:47">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="28:5" pos:end="28:26"><expr pos:start="28:5" pos:end="28:25"><call pos:start="28:5" pos:end="28:25"><name pos:start="28:5" pos:end="28:12">g_assert</name><argument_list pos:start="28:13" pos:end="28:25">(<argument pos:start="28:14" pos:end="28:24"><expr pos:start="28:14" pos:end="28:24"><name pos:start="28:14" pos:end="28:16">dev</name> <operator pos:start="28:18" pos:end="28:19">!=</operator> <name pos:start="28:21" pos:end="28:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="29:5" pos:end="67:5">for <control pos:start="29:9" pos:end="29:46">(<init pos:start="29:10" pos:end="29:15"><expr pos:start="29:10" pos:end="29:14"><name pos:start="29:10" pos:end="29:10">i</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <literal type="number" pos:start="29:14" pos:end="29:14">0</literal></expr>;</init> <condition pos:start="29:17" pos:end="29:41"><expr pos:start="29:17" pos:end="29:40"><name pos:start="29:17" pos:end="29:17">i</name> <operator pos:start="29:19" pos:end="29:19">&lt;</operator> <call pos:start="29:21" pos:end="29:40"><name pos:start="29:21" pos:end="29:30">ARRAY_SIZE</name><argument_list pos:start="29:31" pos:end="29:40">(<argument pos:start="29:32" pos:end="29:39"><expr pos:start="29:32" pos:end="29:39"><name pos:start="29:32" pos:end="29:39">pam_area</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="29:43" pos:end="29:45"><expr pos:start="29:43" pos:end="29:45"><name pos:start="29:43" pos:end="29:43">i</name><operator pos:start="29:44" pos:end="29:45">++</operator></expr></incr>)</control> <block pos:start="29:48" pos:end="67:5">{<block_content pos:start="30:9" pos:end="66:73">
        <if_stmt pos:start="30:9" pos:end="32:9"><if pos:start="30:9" pos:end="32:9">if <condition pos:start="30:12" pos:end="30:49">(<expr pos:start="30:13" pos:end="30:48"><name pos:start="30:13" pos:end="30:23"><name pos:start="30:13" pos:end="30:20">pam_area</name><index pos:start="30:21" pos:end="30:23">[<expr pos:start="30:22" pos:end="30:22"><name pos:start="30:22" pos:end="30:22">i</name></expr>]</index></name><operator pos:start="30:24" pos:end="30:24">.</operator><name pos:start="30:25" pos:end="30:29">start</name> <operator pos:start="30:31" pos:end="30:32">==</operator> <name pos:start="30:34" pos:end="30:44"><name pos:start="30:34" pos:end="30:41">pam_area</name><index pos:start="30:42" pos:end="30:44">[<expr pos:start="30:43" pos:end="30:43"><name pos:start="30:43" pos:end="30:43">i</name></expr>]</index></name><operator pos:start="30:45" pos:end="30:45">.</operator><name pos:start="30:46" pos:end="30:48">end</name></expr>)</condition> <block pos:start="30:51" pos:end="32:9">{<block_content pos:start="31:13" pos:end="31:21">
            <continue pos:start="31:13" pos:end="31:21">continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="33:9" pos:end="34:59"><expr pos:start="33:9" pos:end="34:58"><call pos:start="33:9" pos:end="34:58"><name pos:start="33:9" pos:end="33:22">g_test_message</name><argument_list pos:start="33:23" pos:end="34:58">(<argument pos:start="33:24" pos:end="33:53"><expr pos:start="33:24" pos:end="33:53"><literal type="string" pos:start="33:24" pos:end="33:53">"Checking area 0x%05x..0x%05x"</literal></expr></argument>,
                       <argument pos:start="34:24" pos:end="34:40"><expr pos:start="34:24" pos:end="34:40"><name pos:start="34:24" pos:end="34:34"><name pos:start="34:24" pos:end="34:31">pam_area</name><index pos:start="34:32" pos:end="34:34">[<expr pos:start="34:33" pos:end="34:33"><name pos:start="34:33" pos:end="34:33">i</name></expr>]</index></name><operator pos:start="34:35" pos:end="34:35">.</operator><name pos:start="34:36" pos:end="34:40">start</name></expr></argument>, <argument pos:start="34:43" pos:end="34:57"><expr pos:start="34:43" pos:end="34:57"><name pos:start="34:43" pos:end="34:53"><name pos:start="34:43" pos:end="34:50">pam_area</name><index pos:start="34:51" pos:end="34:53">[<expr pos:start="34:52" pos:end="34:52"><name pos:start="34:52" pos:end="34:52">i</name></expr>]</index></name><operator pos:start="34:54" pos:end="34:54">.</operator><name pos:start="34:55" pos:end="34:57">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="35:9" pos:end="35:39">/* Switch to RE for the area */</comment>
        <expr_stmt pos:start="36:9" pos:end="36:32"><expr pos:start="36:9" pos:end="36:31"><call pos:start="36:9" pos:end="36:31"><name pos:start="36:9" pos:end="36:15">pam_set</name><argument_list pos:start="36:16" pos:end="36:31">(<argument pos:start="36:17" pos:end="36:19"><expr pos:start="36:17" pos:end="36:19"><name pos:start="36:17" pos:end="36:19">dev</name></expr></argument>, <argument pos:start="36:22" pos:end="36:22"><expr pos:start="36:22" pos:end="36:22"><name pos:start="36:22" pos:end="36:22">i</name></expr></argument>, <argument pos:start="36:25" pos:end="36:30"><expr pos:start="36:25" pos:end="36:30"><name pos:start="36:25" pos:end="36:30">PAM_RE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="37:9" pos:end="37:41">/* Verify the RAM is all zeros */</comment>
        <expr_stmt pos:start="38:9" pos:end="38:69"><expr pos:start="38:9" pos:end="38:68"><call pos:start="38:9" pos:end="38:68"><name pos:start="38:9" pos:end="38:16">g_assert</name><argument_list pos:start="38:17" pos:end="38:68">(<argument pos:start="38:18" pos:end="38:67"><expr pos:start="38:18" pos:end="38:67"><call pos:start="38:18" pos:end="38:67"><name pos:start="38:18" pos:end="38:28">verify_area</name><argument_list pos:start="38:29" pos:end="38:67">(<argument pos:start="38:30" pos:end="38:46"><expr pos:start="38:30" pos:end="38:46"><name pos:start="38:30" pos:end="38:40"><name pos:start="38:30" pos:end="38:37">pam_area</name><index pos:start="38:38" pos:end="38:40">[<expr pos:start="38:39" pos:end="38:39"><name pos:start="38:39" pos:end="38:39">i</name></expr>]</index></name><operator pos:start="38:41" pos:end="38:41">.</operator><name pos:start="38:42" pos:end="38:46">start</name></expr></argument>, <argument pos:start="38:49" pos:end="38:63"><expr pos:start="38:49" pos:end="38:63"><name pos:start="38:49" pos:end="38:59"><name pos:start="38:49" pos:end="38:56">pam_area</name><index pos:start="38:57" pos:end="38:59">[<expr pos:start="38:58" pos:end="38:58"><name pos:start="38:58" pos:end="38:58">i</name></expr>]</index></name><operator pos:start="38:60" pos:end="38:60">.</operator><name pos:start="38:61" pos:end="38:63">end</name></expr></argument>, <argument pos:start="38:66" pos:end="38:66"><expr pos:start="38:66" pos:end="38:66"><literal type="number" pos:start="38:66" pos:end="38:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="39:9" pos:end="39:39">/* Switch to WE for the area */</comment>
        <expr_stmt pos:start="40:9" pos:end="40:41"><expr pos:start="40:9" pos:end="40:40"><call pos:start="40:9" pos:end="40:40"><name pos:start="40:9" pos:end="40:15">pam_set</name><argument_list pos:start="40:16" pos:end="40:40">(<argument pos:start="40:17" pos:end="40:19"><expr pos:start="40:17" pos:end="40:19"><name pos:start="40:17" pos:end="40:19">dev</name></expr></argument>, <argument pos:start="40:22" pos:end="40:22"><expr pos:start="40:22" pos:end="40:22"><name pos:start="40:22" pos:end="40:22">i</name></expr></argument>, <argument pos:start="40:25" pos:end="40:39"><expr pos:start="40:25" pos:end="40:39"><name pos:start="40:25" pos:end="40:30">PAM_RE</name> <operator pos:start="40:32" pos:end="40:32">|</operator> <name pos:start="40:34" pos:end="40:39">PAM_WE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="41:9" pos:end="41:56">/* Write out a non-zero mask to the full area */</comment>
        <expr_stmt pos:start="42:9" pos:end="44:0"><expr pos:start="42:9" pos:end="42:60"><call pos:start="42:9" pos:end="42:60"><name pos:start="42:9" pos:end="42:18">write_area</name><argument_list pos:start="42:19" pos:end="42:60">(<argument pos:start="42:20" pos:end="42:36"><expr pos:start="42:20" pos:end="42:36"><name pos:start="42:20" pos:end="42:30"><name pos:start="42:20" pos:end="42:27">pam_area</name><index pos:start="42:28" pos:end="42:30">[<expr pos:start="42:29" pos:end="42:29"><name pos:start="42:29" pos:end="42:29">i</name></expr>]</index></name><operator pos:start="42:31" pos:end="42:31">.</operator><name pos:start="42:32" pos:end="42:36">start</name></expr></argument>, <argument pos:start="42:39" pos:end="42:53"><expr pos:start="42:39" pos:end="42:53"><name pos:start="42:39" pos:end="42:49"><name pos:start="42:39" pos:end="42:46">pam_area</name><index pos:start="42:47" pos:end="42:49">[<expr pos:start="42:48" pos:end="42:48"><name pos:start="42:48" pos:end="42:48">i</name></expr>]</index></name><operator pos:start="42:50" pos:end="42:50">.</operator><name pos:start="42:51" pos:end="42:53">end</name></expr></argument>, <argument pos:start="42:56" pos:end="42:59"><expr pos:start="42:56" pos:end="42:59"><literal type="number" pos:start="42:56" pos:end="42:59">0x42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef pos:start="43:1" pos:end="43:14">#<cpp:directive pos:start="43:2" pos:end="43:7">ifndef</cpp:directive> <name pos:start="43:9" pos:end="43:14">BROKEN</name></cpp:ifndef>
        <comment type="block" pos:start="44:9" pos:end="44:54">/* QEMU only supports a limited form of PAM */</comment>
        <comment type="block" pos:start="45:9" pos:end="45:40">/* Switch to !RE for the area */</comment>
        <expr_stmt pos:start="46:9" pos:end="46:32"><expr pos:start="46:9" pos:end="46:31"><call pos:start="46:9" pos:end="46:31"><name pos:start="46:9" pos:end="46:15">pam_set</name><argument_list pos:start="46:16" pos:end="46:31">(<argument pos:start="46:17" pos:end="46:19"><expr pos:start="46:17" pos:end="46:19"><name pos:start="46:17" pos:end="46:19">dev</name></expr></argument>, <argument pos:start="46:22" pos:end="46:22"><expr pos:start="46:22" pos:end="46:22"><name pos:start="46:22" pos:end="46:22">i</name></expr></argument>, <argument pos:start="46:25" pos:end="46:30"><expr pos:start="46:25" pos:end="46:30"><name pos:start="46:25" pos:end="46:30">PAM_WE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="47:9" pos:end="47:45">/* Verify the area is not our mask */</comment>
        <expr_stmt pos:start="48:9" pos:end="50:0"><expr pos:start="48:9" pos:end="48:72"><call pos:start="48:9" pos:end="48:72"><name pos:start="48:9" pos:end="48:16">g_assert</name><argument_list pos:start="48:17" pos:end="48:72">(<argument pos:start="48:18" pos:end="48:71"><expr pos:start="48:18" pos:end="48:71"><operator pos:start="48:18" pos:end="48:18">!</operator><call pos:start="48:19" pos:end="48:71"><name pos:start="48:19" pos:end="48:29">verify_area</name><argument_list pos:start="48:30" pos:end="48:71">(<argument pos:start="48:31" pos:end="48:47"><expr pos:start="48:31" pos:end="48:47"><name pos:start="48:31" pos:end="48:41"><name pos:start="48:31" pos:end="48:38">pam_area</name><index pos:start="48:39" pos:end="48:41">[<expr pos:start="48:40" pos:end="48:40"><name pos:start="48:40" pos:end="48:40">i</name></expr>]</index></name><operator pos:start="48:42" pos:end="48:42">.</operator><name pos:start="48:43" pos:end="48:47">start</name></expr></argument>, <argument pos:start="48:50" pos:end="48:64"><expr pos:start="48:50" pos:end="48:64"><name pos:start="48:50" pos:end="48:60"><name pos:start="48:50" pos:end="48:57">pam_area</name><index pos:start="48:58" pos:end="48:60">[<expr pos:start="48:59" pos:end="48:59"><name pos:start="48:59" pos:end="48:59">i</name></expr>]</index></name><operator pos:start="48:61" pos:end="48:61">.</operator><name pos:start="48:62" pos:end="48:64">end</name></expr></argument>, <argument pos:start="48:67" pos:end="48:70"><expr pos:start="48:67" pos:end="48:70"><literal type="number" pos:start="48:67" pos:end="48:70">0x42</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>
        <comment type="block" pos:start="50:9" pos:end="50:45">/* Verify the area is our new mask */</comment>
        <expr_stmt pos:start="51:9" pos:end="51:72"><expr pos:start="51:9" pos:end="51:71"><call pos:start="51:9" pos:end="51:71"><name pos:start="51:9" pos:end="51:16">g_assert</name><argument_list pos:start="51:17" pos:end="51:71">(<argument pos:start="51:18" pos:end="51:70"><expr pos:start="51:18" pos:end="51:70"><call pos:start="51:18" pos:end="51:70"><name pos:start="51:18" pos:end="51:28">verify_area</name><argument_list pos:start="51:29" pos:end="51:70">(<argument pos:start="51:30" pos:end="51:46"><expr pos:start="51:30" pos:end="51:46"><name pos:start="51:30" pos:end="51:40"><name pos:start="51:30" pos:end="51:37">pam_area</name><index pos:start="51:38" pos:end="51:40">[<expr pos:start="51:39" pos:end="51:39"><name pos:start="51:39" pos:end="51:39">i</name></expr>]</index></name><operator pos:start="51:41" pos:end="51:41">.</operator><name pos:start="51:42" pos:end="51:46">start</name></expr></argument>, <argument pos:start="51:49" pos:end="51:63"><expr pos:start="51:49" pos:end="51:63"><name pos:start="51:49" pos:end="51:59"><name pos:start="51:49" pos:end="51:56">pam_area</name><index pos:start="51:57" pos:end="51:59">[<expr pos:start="51:58" pos:end="51:58"><name pos:start="51:58" pos:end="51:58">i</name></expr>]</index></name><operator pos:start="51:60" pos:end="51:60">.</operator><name pos:start="51:61" pos:end="51:63">end</name></expr></argument>, <argument pos:start="51:66" pos:end="51:69"><expr pos:start="51:66" pos:end="51:69"><literal type="number" pos:start="51:66" pos:end="51:69">0x42</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="52:9" pos:end="52:34">/* Write out a new mask */</comment>
        <expr_stmt pos:start="53:9" pos:end="55:0"><expr pos:start="53:9" pos:end="53:60"><call pos:start="53:9" pos:end="53:60"><name pos:start="53:9" pos:end="53:18">write_area</name><argument_list pos:start="53:19" pos:end="53:60">(<argument pos:start="53:20" pos:end="53:36"><expr pos:start="53:20" pos:end="53:36"><name pos:start="53:20" pos:end="53:30"><name pos:start="53:20" pos:end="53:27">pam_area</name><index pos:start="53:28" pos:end="53:30">[<expr pos:start="53:29" pos:end="53:29"><name pos:start="53:29" pos:end="53:29">i</name></expr>]</index></name><operator pos:start="53:31" pos:end="53:31">.</operator><name pos:start="53:32" pos:end="53:36">start</name></expr></argument>, <argument pos:start="53:39" pos:end="53:53"><expr pos:start="53:39" pos:end="53:53"><name pos:start="53:39" pos:end="53:49"><name pos:start="53:39" pos:end="53:46">pam_area</name><index pos:start="53:47" pos:end="53:49">[<expr pos:start="53:48" pos:end="53:48"><name pos:start="53:48" pos:end="53:48">i</name></expr>]</index></name><operator pos:start="53:50" pos:end="53:50">.</operator><name pos:start="53:51" pos:end="53:53">end</name></expr></argument>, <argument pos:start="53:56" pos:end="53:59"><expr pos:start="53:56" pos:end="53:59"><literal type="number" pos:start="53:56" pos:end="53:59">0x82</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef pos:start="54:1" pos:end="54:14">#<cpp:directive pos:start="54:2" pos:end="54:7">ifndef</cpp:directive> <name pos:start="54:9" pos:end="54:14">BROKEN</name></cpp:ifndef>
        <comment type="block" pos:start="55:9" pos:end="55:54">/* QEMU only supports a limited form of PAM */</comment>
        <comment type="block" pos:start="56:9" pos:end="56:45">/* Verify the area is not our mask */</comment>
        <expr_stmt pos:start="57:9" pos:end="57:73"><expr pos:start="57:9" pos:end="57:72"><call pos:start="57:9" pos:end="57:72"><name pos:start="57:9" pos:end="57:16">g_assert</name><argument_list pos:start="57:17" pos:end="57:72">(<argument pos:start="57:18" pos:end="57:71"><expr pos:start="57:18" pos:end="57:71"><operator pos:start="57:18" pos:end="57:18">!</operator><call pos:start="57:19" pos:end="57:71"><name pos:start="57:19" pos:end="57:29">verify_area</name><argument_list pos:start="57:30" pos:end="57:71">(<argument pos:start="57:31" pos:end="57:47"><expr pos:start="57:31" pos:end="57:47"><name pos:start="57:31" pos:end="57:41"><name pos:start="57:31" pos:end="57:38">pam_area</name><index pos:start="57:39" pos:end="57:41">[<expr pos:start="57:40" pos:end="57:40"><name pos:start="57:40" pos:end="57:40">i</name></expr>]</index></name><operator pos:start="57:42" pos:end="57:42">.</operator><name pos:start="57:43" pos:end="57:47">start</name></expr></argument>, <argument pos:start="57:50" pos:end="57:64"><expr pos:start="57:50" pos:end="57:64"><name pos:start="57:50" pos:end="57:60"><name pos:start="57:50" pos:end="57:57">pam_area</name><index pos:start="57:58" pos:end="57:60">[<expr pos:start="57:59" pos:end="57:59"><name pos:start="57:59" pos:end="57:59">i</name></expr>]</index></name><operator pos:start="57:61" pos:end="57:61">.</operator><name pos:start="57:62" pos:end="57:64">end</name></expr></argument>, <argument pos:start="57:67" pos:end="57:70"><expr pos:start="57:67" pos:end="57:70"><literal type="number" pos:start="57:67" pos:end="57:70">0x82</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="58:9" pos:end="58:39">/* Switch to RE for the area */</comment>
        <expr_stmt pos:start="59:9" pos:end="61:0"><expr pos:start="59:9" pos:end="59:40"><call pos:start="59:9" pos:end="59:40"><name pos:start="59:9" pos:end="59:15">pam_set</name><argument_list pos:start="59:16" pos:end="59:40">(<argument pos:start="59:17" pos:end="59:19"><expr pos:start="59:17" pos:end="59:19"><name pos:start="59:17" pos:end="59:19">dev</name></expr></argument>, <argument pos:start="59:22" pos:end="59:22"><expr pos:start="59:22" pos:end="59:22"><name pos:start="59:22" pos:end="59:22">i</name></expr></argument>, <argument pos:start="59:25" pos:end="59:39"><expr pos:start="59:25" pos:end="59:39"><name pos:start="59:25" pos:end="59:30">PAM_RE</name> <operator pos:start="59:32" pos:end="59:32">|</operator> <name pos:start="59:34" pos:end="59:39">PAM_WE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="60:1" pos:end="60:6">#<cpp:directive pos:start="60:2" pos:end="60:6">endif</cpp:directive></cpp:endif>
        <comment type="block" pos:start="61:9" pos:end="61:45">/* Verify the area is our new mask */</comment>
        <expr_stmt pos:start="62:9" pos:end="62:72"><expr pos:start="62:9" pos:end="62:71"><call pos:start="62:9" pos:end="62:71"><name pos:start="62:9" pos:end="62:16">g_assert</name><argument_list pos:start="62:17" pos:end="62:71">(<argument pos:start="62:18" pos:end="62:70"><expr pos:start="62:18" pos:end="62:70"><call pos:start="62:18" pos:end="62:70"><name pos:start="62:18" pos:end="62:28">verify_area</name><argument_list pos:start="62:29" pos:end="62:70">(<argument pos:start="62:30" pos:end="62:46"><expr pos:start="62:30" pos:end="62:46"><name pos:start="62:30" pos:end="62:40"><name pos:start="62:30" pos:end="62:37">pam_area</name><index pos:start="62:38" pos:end="62:40">[<expr pos:start="62:39" pos:end="62:39"><name pos:start="62:39" pos:end="62:39">i</name></expr>]</index></name><operator pos:start="62:41" pos:end="62:41">.</operator><name pos:start="62:42" pos:end="62:46">start</name></expr></argument>, <argument pos:start="62:49" pos:end="62:63"><expr pos:start="62:49" pos:end="62:63"><name pos:start="62:49" pos:end="62:59"><name pos:start="62:49" pos:end="62:56">pam_area</name><index pos:start="62:57" pos:end="62:59">[<expr pos:start="62:58" pos:end="62:58"><name pos:start="62:58" pos:end="62:58">i</name></expr>]</index></name><operator pos:start="62:60" pos:end="62:60">.</operator><name pos:start="62:61" pos:end="62:63">end</name></expr></argument>, <argument pos:start="62:66" pos:end="62:69"><expr pos:start="62:66" pos:end="62:69"><literal type="number" pos:start="62:66" pos:end="62:69">0x82</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="63:9" pos:end="63:24">/* Reset area */</comment>
        <expr_stmt pos:start="64:9" pos:end="64:27"><expr pos:start="64:9" pos:end="64:26"><call pos:start="64:9" pos:end="64:26"><name pos:start="64:9" pos:end="64:15">pam_set</name><argument_list pos:start="64:16" pos:end="64:26">(<argument pos:start="64:17" pos:end="64:19"><expr pos:start="64:17" pos:end="64:19"><name pos:start="64:17" pos:end="64:19">dev</name></expr></argument>, <argument pos:start="64:22" pos:end="64:22"><expr pos:start="64:22" pos:end="64:22"><name pos:start="64:22" pos:end="64:22">i</name></expr></argument>, <argument pos:start="64:25" pos:end="64:25"><expr pos:start="64:25" pos:end="64:25"><literal type="number" pos:start="64:25" pos:end="64:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="65:9" pos:end="65:49">/* Verify the area is not our new mask */</comment>
        <expr_stmt pos:start="66:9" pos:end="66:73"><expr pos:start="66:9" pos:end="66:72"><call pos:start="66:9" pos:end="66:72"><name pos:start="66:9" pos:end="66:16">g_assert</name><argument_list pos:start="66:17" pos:end="66:72">(<argument pos:start="66:18" pos:end="66:71"><expr pos:start="66:18" pos:end="66:71"><operator pos:start="66:18" pos:end="66:18">!</operator><call pos:start="66:19" pos:end="66:71"><name pos:start="66:19" pos:end="66:29">verify_area</name><argument_list pos:start="66:30" pos:end="66:71">(<argument pos:start="66:31" pos:end="66:47"><expr pos:start="66:31" pos:end="66:47"><name pos:start="66:31" pos:end="66:41"><name pos:start="66:31" pos:end="66:38">pam_area</name><index pos:start="66:39" pos:end="66:41">[<expr pos:start="66:40" pos:end="66:40"><name pos:start="66:40" pos:end="66:40">i</name></expr>]</index></name><operator pos:start="66:42" pos:end="66:42">.</operator><name pos:start="66:43" pos:end="66:47">start</name></expr></argument>, <argument pos:start="66:50" pos:end="66:64"><expr pos:start="66:50" pos:end="66:64"><name pos:start="66:50" pos:end="66:60"><name pos:start="66:50" pos:end="66:57">pam_area</name><index pos:start="66:58" pos:end="66:60">[<expr pos:start="66:59" pos:end="66:59"><name pos:start="66:59" pos:end="66:59">i</name></expr>]</index></name><operator pos:start="66:61" pos:end="66:61">.</operator><name pos:start="66:62" pos:end="66:64">end</name></expr></argument>, <argument pos:start="66:67" pos:end="66:70"><expr pos:start="66:67" pos:end="66:70"><literal type="number" pos:start="66:67" pos:end="66:70">0x82</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="68:5" pos:end="68:16"><expr pos:start="68:5" pos:end="68:15"><call pos:start="68:5" pos:end="68:15"><name pos:start="68:5" pos:end="68:13">qtest_end</name><argument_list pos:start="68:14" pos:end="68:15">()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></unit>
