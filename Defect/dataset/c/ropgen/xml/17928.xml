<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17928.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:28">bochs_bios_init</name><parameter_list pos:start="1:29" pos:end="1:34">(<parameter pos:start="1:30" pos:end="1:33"><decl pos:start="1:30" pos:end="1:33"><type pos:start="1:30" pos:end="1:33"><name pos:start="1:30" pos:end="1:33">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:18">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">void</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:16">fw_cfg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:25">smbios_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:21">smbios_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">uint64_t</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:25">numa_fw_cfg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:13"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:12"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:12">j</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:69"><expr pos:start="17:5" pos:end="17:68"><name pos:start="17:5" pos:end="17:10">fw_cfg</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <call pos:start="17:14" pos:end="17:68"><name pos:start="17:14" pos:end="17:24">fw_cfg_init</name><argument_list pos:start="17:25" pos:end="17:68">(<argument pos:start="17:26" pos:end="17:40"><expr pos:start="17:26" pos:end="17:40"><name pos:start="17:26" pos:end="17:40">BIOS_CFG_IOPORT</name></expr></argument>, <argument pos:start="17:43" pos:end="17:61"><expr pos:start="17:43" pos:end="17:61"><name pos:start="17:43" pos:end="17:57">BIOS_CFG_IOPORT</name> <operator pos:start="17:59" pos:end="17:59">+</operator> <literal type="number" pos:start="17:61" pos:end="17:61">1</literal></expr></argument>, <argument pos:start="17:64" pos:end="17:64"><expr pos:start="17:64" pos:end="17:64"><literal type="number" pos:start="17:64" pos:end="17:64">0</literal></expr></argument>, <argument pos:start="17:67" pos:end="17:67"><expr pos:start="17:67" pos:end="17:67"><literal type="number" pos:start="17:67" pos:end="17:67">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:41"><expr pos:start="21:5" pos:end="21:40"><call pos:start="21:5" pos:end="21:40"><name pos:start="21:5" pos:end="21:18">fw_cfg_add_i32</name><argument_list pos:start="21:19" pos:end="21:40">(<argument pos:start="21:20" pos:end="21:25"><expr pos:start="21:20" pos:end="21:25"><name pos:start="21:20" pos:end="21:25">fw_cfg</name></expr></argument>, <argument pos:start="21:28" pos:end="21:36"><expr pos:start="21:28" pos:end="21:36"><name pos:start="21:28" pos:end="21:36">FW_CFG_ID</name></expr></argument>, <argument pos:start="21:39" pos:end="21:39"><expr pos:start="21:39" pos:end="21:39"><literal type="number" pos:start="21:39" pos:end="21:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:64"><expr pos:start="23:5" pos:end="23:63"><call pos:start="23:5" pos:end="23:63"><name pos:start="23:5" pos:end="23:18">fw_cfg_add_i64</name><argument_list pos:start="23:19" pos:end="23:63">(<argument pos:start="23:20" pos:end="23:25"><expr pos:start="23:20" pos:end="23:25"><name pos:start="23:20" pos:end="23:25">fw_cfg</name></expr></argument>, <argument pos:start="23:28" pos:end="23:42"><expr pos:start="23:28" pos:end="23:42"><name pos:start="23:28" pos:end="23:42">FW_CFG_RAM_SIZE</name></expr></argument>, <argument pos:start="23:45" pos:end="23:62"><expr pos:start="23:45" pos:end="23:62"><operator pos:start="23:45" pos:end="23:45">(</operator><name pos:start="23:46" pos:end="23:53">uint64_t</name><operator pos:start="23:54" pos:end="23:54">)</operator><name pos:start="23:55" pos:end="23:62">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="27:38"><expr pos:start="25:5" pos:end="27:37"><call pos:start="25:5" pos:end="27:37"><name pos:start="25:5" pos:end="25:20">fw_cfg_add_bytes</name><argument_list pos:start="25:21" pos:end="27:37">(<argument pos:start="25:22" pos:end="25:27"><expr pos:start="25:22" pos:end="25:27"><name pos:start="25:22" pos:end="25:27">fw_cfg</name></expr></argument>, <argument pos:start="25:30" pos:end="25:47"><expr pos:start="25:30" pos:end="25:47"><name pos:start="25:30" pos:end="25:47">FW_CFG_ACPI_TABLES</name></expr></argument>, <argument pos:start="25:50" pos:end="25:71"><expr pos:start="25:50" pos:end="25:71"><operator pos:start="25:50" pos:end="25:50">(</operator><name pos:start="25:51" pos:end="25:57">uint8_t</name> <operator pos:start="25:59" pos:end="25:59">*</operator><operator pos:start="25:60" pos:end="25:60">)</operator><name pos:start="25:61" pos:end="25:71">acpi_tables</name></expr></argument>,

                     <argument pos:start="27:22" pos:end="27:36"><expr pos:start="27:22" pos:end="27:36"><name pos:start="27:22" pos:end="27:36">acpi_tables_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:77"><expr pos:start="29:5" pos:end="29:76"><call pos:start="29:5" pos:end="29:76"><name pos:start="29:5" pos:end="29:18">fw_cfg_add_i32</name><argument_list pos:start="29:19" pos:end="29:76">(<argument pos:start="29:20" pos:end="29:25"><expr pos:start="29:20" pos:end="29:25"><name pos:start="29:20" pos:end="29:25">fw_cfg</name></expr></argument>, <argument pos:start="29:28" pos:end="29:47"><expr pos:start="29:28" pos:end="29:47"><name pos:start="29:28" pos:end="29:47">FW_CFG_IRQ0_OVERRIDE</name></expr></argument>, <argument pos:start="29:50" pos:end="29:75"><expr pos:start="29:50" pos:end="29:75"><call pos:start="29:50" pos:end="29:75"><name pos:start="29:50" pos:end="29:73">kvm_allows_irq0_override</name><argument_list pos:start="29:74" pos:end="29:75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:49"><expr pos:start="33:5" pos:end="33:48"><name pos:start="33:5" pos:end="33:16">smbios_table</name> <operator pos:start="33:18" pos:end="33:18">=</operator> <call pos:start="33:20" pos:end="33:48"><name pos:start="33:20" pos:end="33:35">smbios_get_table</name><argument_list pos:start="33:36" pos:end="33:48">(<argument pos:start="33:37" pos:end="33:47"><expr pos:start="33:37" pos:end="33:47"><operator pos:start="33:37" pos:end="33:37">&amp;</operator><name pos:start="33:38" pos:end="33:47">smbios_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="39:51"><if pos:start="35:5" pos:end="39:51">if <condition pos:start="35:8" pos:end="35:21">(<expr pos:start="35:9" pos:end="35:20"><name pos:start="35:9" pos:end="35:20">smbios_table</name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="39:51"><block_content pos:start="37:9" pos:end="39:51">

        <expr_stmt pos:start="37:9" pos:end="39:51"><expr pos:start="37:9" pos:end="39:50"><call pos:start="37:9" pos:end="39:50"><name pos:start="37:9" pos:end="37:24">fw_cfg_add_bytes</name><argument_list pos:start="37:25" pos:end="39:50">(<argument pos:start="37:26" pos:end="37:31"><expr pos:start="37:26" pos:end="37:31"><name pos:start="37:26" pos:end="37:31">fw_cfg</name></expr></argument>, <argument pos:start="37:34" pos:end="37:54"><expr pos:start="37:34" pos:end="37:54"><name pos:start="37:34" pos:end="37:54">FW_CFG_SMBIOS_ENTRIES</name></expr></argument>,

                         <argument pos:start="39:26" pos:end="39:37"><expr pos:start="39:26" pos:end="39:37"><name pos:start="39:26" pos:end="39:37">smbios_table</name></expr></argument>, <argument pos:start="39:40" pos:end="39:49"><expr pos:start="39:40" pos:end="39:49"><name pos:start="39:40" pos:end="39:49">smbios_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="43:41"><expr pos:start="41:5" pos:end="43:40"><call pos:start="41:5" pos:end="43:40"><name pos:start="41:5" pos:end="41:20">fw_cfg_add_bytes</name><argument_list pos:start="41:21" pos:end="43:40">(<argument pos:start="41:22" pos:end="41:27"><expr pos:start="41:22" pos:end="41:27"><name pos:start="41:22" pos:end="41:27">fw_cfg</name></expr></argument>, <argument pos:start="41:30" pos:end="41:46"><expr pos:start="41:30" pos:end="41:46"><name pos:start="41:30" pos:end="41:46">FW_CFG_E820_TABLE</name></expr></argument>, <argument pos:start="41:49" pos:end="41:70"><expr pos:start="41:49" pos:end="41:70"><operator pos:start="41:49" pos:end="41:49">(</operator><name pos:start="41:50" pos:end="41:56">uint8_t</name> <operator pos:start="41:58" pos:end="41:58">*</operator><operator pos:start="41:59" pos:end="41:59">)</operator><operator pos:start="41:60" pos:end="41:60">&amp;</operator><name pos:start="41:61" pos:end="41:70">e820_table</name></expr></argument>,

                     <argument pos:start="43:22" pos:end="43:39"><expr pos:start="43:22" pos:end="43:39"><sizeof pos:start="43:22" pos:end="43:39">sizeof<argument_list pos:start="43:28" pos:end="43:39">(<argument pos:start="43:29" pos:end="43:38"><expr pos:start="43:29" pos:end="43:38"><name pos:start="43:29" pos:end="43:38">e820_table</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="49:52"><expr pos:start="47:5" pos:end="49:51"><call pos:start="47:5" pos:end="49:51"><name pos:start="47:5" pos:end="47:20">fw_cfg_add_bytes</name><argument_list pos:start="47:21" pos:end="49:51">(<argument pos:start="47:22" pos:end="47:27"><expr pos:start="47:22" pos:end="47:27"><name pos:start="47:22" pos:end="47:27">fw_cfg</name></expr></argument>, <argument pos:start="47:30" pos:end="47:40"><expr pos:start="47:30" pos:end="47:40"><name pos:start="47:30" pos:end="47:40">FW_CFG_HPET</name></expr></argument>, <argument pos:start="47:43" pos:end="47:62"><expr pos:start="47:43" pos:end="47:62"><operator pos:start="47:43" pos:end="47:43">(</operator><name pos:start="47:44" pos:end="47:50">uint8_t</name> <operator pos:start="47:52" pos:end="47:52">*</operator><operator pos:start="47:53" pos:end="47:53">)</operator><operator pos:start="47:54" pos:end="47:54">&amp;</operator><name pos:start="47:55" pos:end="47:62">hpet_cfg</name></expr></argument>,

                     <argument pos:start="49:22" pos:end="49:50"><expr pos:start="49:22" pos:end="49:50"><sizeof pos:start="49:22" pos:end="49:50">sizeof<argument_list pos:start="49:28" pos:end="49:50">(<argument pos:start="49:29" pos:end="49:49"><expr pos:start="49:29" pos:end="49:49">struct <name pos:start="49:36" pos:end="49:49">hpet_fw_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="51:5" pos:end="57:7">/* allocate memory for the NUMA channel: one (64bit) word for the number

     * of nodes, one word for each VCPU-&gt;node and one word for each node to

     * hold the amount of memory.

     */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:65"><expr pos:start="59:5" pos:end="59:64"><name pos:start="59:5" pos:end="59:15">numa_fw_cfg</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <call pos:start="59:19" pos:end="59:64"><name pos:start="59:19" pos:end="59:24">g_new0</name><argument_list pos:start="59:25" pos:end="59:64">(<argument pos:start="59:26" pos:end="59:33"><expr pos:start="59:26" pos:end="59:33"><name pos:start="59:26" pos:end="59:33">uint64_t</name></expr></argument>, <argument pos:start="59:36" pos:end="59:63"><expr pos:start="59:36" pos:end="59:63"><literal type="number" pos:start="59:36" pos:end="59:38">1</literal> <operator pos:start="59:38" pos:end="59:38">+</operator> <name pos:start="59:40" pos:end="59:47">max_cpus</name> <operator pos:start="59:49" pos:end="59:49">+</operator> <name pos:start="59:51" pos:end="59:63">nb_numa_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:48"><expr pos:start="61:5" pos:end="61:47"><name pos:start="61:5" pos:end="61:18"><name pos:start="61:5" pos:end="61:15">numa_fw_cfg</name><index pos:start="61:16" pos:end="61:18">[<expr pos:start="61:17" pos:end="61:17"><literal type="number" pos:start="61:17" pos:end="61:17">0</literal></expr>]</index></name> <operator pos:start="61:20" pos:end="61:20">=</operator> <call pos:start="61:22" pos:end="61:47"><name pos:start="61:22" pos:end="61:32">cpu_to_le64</name><argument_list pos:start="61:33" pos:end="61:47">(<argument pos:start="61:34" pos:end="61:46"><expr pos:start="61:34" pos:end="61:46"><name pos:start="61:34" pos:end="61:46">nb_numa_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="63:5" pos:end="77:5">for <control pos:start="63:9" pos:end="63:34">(<init pos:start="63:10" pos:end="63:15"><expr pos:start="63:10" pos:end="63:14"><name pos:start="63:10" pos:end="63:10">i</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <literal type="number" pos:start="63:14" pos:end="63:14">0</literal></expr>;</init> <condition pos:start="63:17" pos:end="63:29"><expr pos:start="63:17" pos:end="63:28"><name pos:start="63:17" pos:end="63:17">i</name> <operator pos:start="63:19" pos:end="63:19">&lt;</operator> <name pos:start="63:21" pos:end="63:28">max_cpus</name></expr>;</condition> <incr pos:start="63:31" pos:end="63:33"><expr pos:start="63:31" pos:end="63:33"><name pos:start="63:31" pos:end="63:31">i</name><operator pos:start="63:32" pos:end="63:33">++</operator></expr></incr>)</control> <block pos:start="63:36" pos:end="77:5">{<block_content pos:start="65:9" pos:end="75:9">

        <for pos:start="65:9" pos:end="75:9">for <control pos:start="65:13" pos:end="65:43">(<init pos:start="65:14" pos:end="65:19"><expr pos:start="65:14" pos:end="65:18"><name pos:start="65:14" pos:end="65:14">j</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <literal type="number" pos:start="65:18" pos:end="65:18">0</literal></expr>;</init> <condition pos:start="65:21" pos:end="65:38"><expr pos:start="65:21" pos:end="65:37"><name pos:start="65:21" pos:end="65:21">j</name> <operator pos:start="65:23" pos:end="65:23">&lt;</operator> <name pos:start="65:25" pos:end="65:37">nb_numa_nodes</name></expr>;</condition> <incr pos:start="65:40" pos:end="65:42"><expr pos:start="65:40" pos:end="65:42"><name pos:start="65:40" pos:end="65:40">j</name><operator pos:start="65:41" pos:end="65:42">++</operator></expr></incr>)</control> <block pos:start="65:45" pos:end="75:9">{<block_content pos:start="67:13" pos:end="73:13">

            <if_stmt pos:start="67:13" pos:end="73:13"><if pos:start="67:13" pos:end="73:13">if <condition pos:start="67:16" pos:end="67:45">(<expr pos:start="67:17" pos:end="67:44"><call pos:start="67:17" pos:end="67:44"><name pos:start="67:17" pos:end="67:24">test_bit</name><argument_list pos:start="67:25" pos:end="67:44">(<argument pos:start="67:26" pos:end="67:26"><expr pos:start="67:26" pos:end="67:26"><name pos:start="67:26" pos:end="67:26">i</name></expr></argument>, <argument pos:start="67:29" pos:end="67:43"><expr pos:start="67:29" pos:end="67:43"><name pos:start="67:29" pos:end="67:43"><name pos:start="67:29" pos:end="67:40">node_cpumask</name><index pos:start="67:41" pos:end="67:43">[<expr pos:start="67:42" pos:end="67:42"><name pos:start="67:42" pos:end="67:42">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:47" pos:end="73:13">{<block_content pos:start="69:17" pos:end="71:22">

                <expr_stmt pos:start="69:17" pos:end="69:52"><expr pos:start="69:17" pos:end="69:51"><name pos:start="69:17" pos:end="69:34"><name pos:start="69:17" pos:end="69:27">numa_fw_cfg</name><index pos:start="69:28" pos:end="69:34">[<expr pos:start="69:29" pos:end="69:33"><name pos:start="69:29" pos:end="69:29">i</name> <operator pos:start="69:31" pos:end="69:31">+</operator> <literal type="number" pos:start="69:33" pos:end="69:33">1</literal></expr>]</index></name> <operator pos:start="69:36" pos:end="69:36">=</operator> <call pos:start="69:38" pos:end="69:51"><name pos:start="69:38" pos:end="69:48">cpu_to_le64</name><argument_list pos:start="69:49" pos:end="69:51">(<argument pos:start="69:50" pos:end="69:50"><expr pos:start="69:50" pos:end="69:50"><name pos:start="69:50" pos:end="69:50">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="71:17" pos:end="71:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

    <for pos:start="79:5" pos:end="83:5">for <control pos:start="79:9" pos:end="79:39">(<init pos:start="79:10" pos:end="79:15"><expr pos:start="79:10" pos:end="79:14"><name pos:start="79:10" pos:end="79:10">i</name> <operator pos:start="79:12" pos:end="79:12">=</operator> <literal type="number" pos:start="79:14" pos:end="79:14">0</literal></expr>;</init> <condition pos:start="79:17" pos:end="79:34"><expr pos:start="79:17" pos:end="79:33"><name pos:start="79:17" pos:end="79:17">i</name> <operator pos:start="79:19" pos:end="79:19">&lt;</operator> <name pos:start="79:21" pos:end="79:33">nb_numa_nodes</name></expr>;</condition> <incr pos:start="79:36" pos:end="79:38"><expr pos:start="79:36" pos:end="79:38"><name pos:start="79:36" pos:end="79:36">i</name><operator pos:start="79:37" pos:end="79:38">++</operator></expr></incr>)</control> <block pos:start="79:41" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:65">

        <expr_stmt pos:start="81:9" pos:end="81:65"><expr pos:start="81:9" pos:end="81:64"><name pos:start="81:9" pos:end="81:37"><name pos:start="81:9" pos:end="81:19">numa_fw_cfg</name><index pos:start="81:20" pos:end="81:37">[<expr pos:start="81:21" pos:end="81:36"><name pos:start="81:21" pos:end="81:28">max_cpus</name> <operator pos:start="81:30" pos:end="81:30">+</operator> <literal type="number" pos:start="81:32" pos:end="81:32">1</literal> <operator pos:start="81:34" pos:end="81:34">+</operator> <name pos:start="81:36" pos:end="81:36">i</name></expr>]</index></name> <operator pos:start="81:39" pos:end="81:39">=</operator> <call pos:start="81:41" pos:end="81:64"><name pos:start="81:41" pos:end="81:51">cpu_to_le64</name><argument_list pos:start="81:52" pos:end="81:64">(<argument pos:start="81:53" pos:end="81:63"><expr pos:start="81:53" pos:end="81:63"><name pos:start="81:53" pos:end="81:63"><name pos:start="81:53" pos:end="81:60">node_mem</name><index pos:start="81:61" pos:end="81:63">[<expr pos:start="81:62" pos:end="81:62"><name pos:start="81:62" pos:end="81:62">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="85:5" pos:end="87:76"><expr pos:start="85:5" pos:end="87:75"><call pos:start="85:5" pos:end="87:75"><name pos:start="85:5" pos:end="85:20">fw_cfg_add_bytes</name><argument_list pos:start="85:21" pos:end="87:75">(<argument pos:start="85:22" pos:end="85:27"><expr pos:start="85:22" pos:end="85:27"><name pos:start="85:22" pos:end="85:27">fw_cfg</name></expr></argument>, <argument pos:start="85:30" pos:end="85:40"><expr pos:start="85:30" pos:end="85:40"><name pos:start="85:30" pos:end="85:40">FW_CFG_NUMA</name></expr></argument>, <argument pos:start="85:43" pos:end="85:64"><expr pos:start="85:43" pos:end="85:64"><operator pos:start="85:43" pos:end="85:43">(</operator><name pos:start="85:44" pos:end="85:50">uint8_t</name> <operator pos:start="85:52" pos:end="85:52">*</operator><operator pos:start="85:53" pos:end="85:53">)</operator><name pos:start="85:54" pos:end="85:64">numa_fw_cfg</name></expr></argument>,

                     <argument pos:start="87:22" pos:end="87:74"><expr pos:start="87:22" pos:end="87:74"><operator pos:start="87:22" pos:end="87:22">(</operator><literal type="number" pos:start="87:23" pos:end="87:25">1</literal> <operator pos:start="87:25" pos:end="87:25">+</operator> <name pos:start="87:27" pos:end="87:34">max_cpus</name> <operator pos:start="87:36" pos:end="87:36">+</operator> <name pos:start="87:38" pos:end="87:50">nb_numa_nodes</name><operator pos:start="87:51" pos:end="87:51">)</operator> <operator pos:start="87:53" pos:end="87:53">*</operator> <sizeof pos:start="87:55" pos:end="87:74">sizeof<argument_list pos:start="87:61" pos:end="87:74">(<argument pos:start="87:62" pos:end="87:73"><expr pos:start="87:62" pos:end="87:73"><operator pos:start="87:62" pos:end="87:62">*</operator><name pos:start="87:63" pos:end="87:73">numa_fw_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="91:5" pos:end="91:18">return <expr pos:start="91:12" pos:end="91:17"><name pos:start="91:12" pos:end="91:17">fw_cfg</name></expr>;</return>

</block_content>}</block></function>
</unit>
