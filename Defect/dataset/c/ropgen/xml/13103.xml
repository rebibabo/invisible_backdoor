<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13103.c" pos:tabs="8"><function pos:start="1:1" pos:end="157:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">gen_rdhwr</name><parameter_list pos:start="1:22" pos:end="1:65">(<parameter pos:start="1:23" pos:end="1:39"><decl pos:start="1:23" pos:end="1:39"><type pos:start="1:23" pos:end="1:39"><name pos:start="1:23" pos:end="1:34">DisasContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">ctx</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:47"><decl pos:start="1:42" pos:end="1:47"><type pos:start="1:42" pos:end="1:47"><name pos:start="1:42" pos:end="1:44">int</name></type> <name pos:start="1:46" pos:end="1:47">rt</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:55"><decl pos:start="1:50" pos:end="1:55"><type pos:start="1:50" pos:end="1:55"><name pos:start="1:50" pos:end="1:52">int</name></type> <name pos:start="1:54" pos:end="1:55">rd</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:64"><decl pos:start="1:58" pos:end="1:64"><type pos:start="1:58" pos:end="1:64"><name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:64">sel</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="157:1">{<block_content pos:start="5:5" pos:end="155:22">

    <decl_stmt pos:start="5:5" pos:end="10:0"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">TCGv</name></type> <name pos:start="5:10" pos:end="5:11">t0</name></decl>;</decl_stmt>



<cpp:if pos:start="9:1" pos:end="9:30">#<cpp:directive pos:start="9:2" pos:end="9:3">if</cpp:directive> <expr pos:start="9:5" pos:end="9:30"><operator pos:start="9:5" pos:end="9:5">!</operator><call pos:start="9:6" pos:end="9:30"><name pos:start="9:6" pos:end="9:12">defined</name><argument_list pos:start="9:13" pos:end="9:30">(<argument pos:start="9:14" pos:end="9:29"><expr pos:start="9:14" pos:end="9:29"><name pos:start="9:14" pos:end="9:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="11:5" pos:end="13:55">/* The Linux kernel will emulate rdhwr if it's not supported natively.

       Therefore only check the ISA in system mode.  */</comment>

    <expr_stmt pos:start="15:5" pos:end="18:0"><expr pos:start="15:5" pos:end="15:33"><call pos:start="15:5" pos:end="15:33"><name pos:start="15:5" pos:end="15:14">check_insn</name><argument_list pos:start="15:15" pos:end="15:33">(<argument pos:start="15:16" pos:end="15:18"><expr pos:start="15:16" pos:end="15:18"><name pos:start="15:16" pos:end="15:18">ctx</name></expr></argument>, <argument pos:start="15:21" pos:end="15:32"><expr pos:start="15:21" pos:end="15:32"><name pos:start="15:21" pos:end="15:32">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="19:5" pos:end="19:24"><expr pos:start="19:5" pos:end="19:23"><name pos:start="19:5" pos:end="19:6">t0</name> <operator pos:start="19:8" pos:end="19:8">=</operator> <call pos:start="19:10" pos:end="19:23"><name pos:start="19:10" pos:end="19:21">tcg_temp_new</name><argument_list pos:start="19:22" pos:end="19:23">()</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="23:5" pos:end="153:5">switch <condition pos:start="23:12" pos:end="23:15">(<expr pos:start="23:13" pos:end="23:14"><name pos:start="23:13" pos:end="23:14">rd</name></expr>)</condition> <block pos:start="23:17" pos:end="153:5">{<block_content pos:start="25:5" pos:end="151:14">

    <case pos:start="25:5" pos:end="25:11">case <expr pos:start="25:10" pos:end="25:10"><literal type="number" pos:start="25:10" pos:end="25:10">0</literal></expr>:</case>

        <expr_stmt pos:start="27:9" pos:end="27:45"><expr pos:start="27:9" pos:end="27:44"><call pos:start="27:9" pos:end="27:44"><name pos:start="27:9" pos:end="27:31">gen_helper_rdhwr_cpunum</name><argument_list pos:start="27:32" pos:end="27:44">(<argument pos:start="27:33" pos:end="27:34"><expr pos:start="27:33" pos:end="27:34"><name pos:start="27:33" pos:end="27:34">t0</name></expr></argument>, <argument pos:start="27:37" pos:end="27:43"><expr pos:start="27:37" pos:end="27:43"><name pos:start="27:37" pos:end="27:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:30"><expr pos:start="29:9" pos:end="29:29"><call pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:21">gen_store_gpr</name><argument_list pos:start="29:22" pos:end="29:29">(<argument pos:start="29:23" pos:end="29:24"><expr pos:start="29:23" pos:end="29:24"><name pos:start="29:23" pos:end="29:24">t0</name></expr></argument>, <argument pos:start="29:27" pos:end="29:28"><expr pos:start="29:27" pos:end="29:28"><name pos:start="29:27" pos:end="29:28">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="31:9" pos:end="31:14">break;</break>

    <case pos:start="33:5" pos:end="33:11">case <expr pos:start="33:10" pos:end="33:10"><literal type="number" pos:start="33:10" pos:end="33:10">1</literal></expr>:</case>

        <expr_stmt pos:start="35:9" pos:end="35:49"><expr pos:start="35:9" pos:end="35:48"><call pos:start="35:9" pos:end="35:48"><name pos:start="35:9" pos:end="35:35">gen_helper_rdhwr_synci_step</name><argument_list pos:start="35:36" pos:end="35:48">(<argument pos:start="35:37" pos:end="35:38"><expr pos:start="35:37" pos:end="35:38"><name pos:start="35:37" pos:end="35:38">t0</name></expr></argument>, <argument pos:start="35:41" pos:end="35:47"><expr pos:start="35:41" pos:end="35:47"><name pos:start="35:41" pos:end="35:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:30"><expr pos:start="37:9" pos:end="37:29"><call pos:start="37:9" pos:end="37:29"><name pos:start="37:9" pos:end="37:21">gen_store_gpr</name><argument_list pos:start="37:22" pos:end="37:29">(<argument pos:start="37:23" pos:end="37:24"><expr pos:start="37:23" pos:end="37:24"><name pos:start="37:23" pos:end="37:24">t0</name></expr></argument>, <argument pos:start="37:27" pos:end="37:28"><expr pos:start="37:27" pos:end="37:28"><name pos:start="37:27" pos:end="37:28">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="39:9" pos:end="39:14">break;</break>

    <case pos:start="41:5" pos:end="41:11">case <expr pos:start="41:10" pos:end="41:10"><literal type="number" pos:start="41:10" pos:end="41:10">2</literal></expr>:</case>

        <if_stmt pos:start="43:9" pos:end="47:9"><if pos:start="43:9" pos:end="47:9">if <condition pos:start="43:12" pos:end="43:44">(<expr pos:start="43:13" pos:end="43:43"><name pos:start="43:13" pos:end="43:27"><name pos:start="43:13" pos:end="43:15">ctx</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:19">tb</name><operator pos:start="43:20" pos:end="43:21">-&gt;</operator><name pos:start="43:22" pos:end="43:27">cflags</name></name> <operator pos:start="43:29" pos:end="43:29">&amp;</operator> <name pos:start="43:31" pos:end="43:43">CF_USE_ICOUNT</name></expr>)</condition> <block pos:start="43:46" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:27">

            <expr_stmt pos:start="45:13" pos:end="45:27"><expr pos:start="45:13" pos:end="45:26"><call pos:start="45:13" pos:end="45:26"><name pos:start="45:13" pos:end="45:24">gen_io_start</name><argument_list pos:start="45:25" pos:end="45:26">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:41"><expr pos:start="49:9" pos:end="49:40"><call pos:start="49:9" pos:end="49:40"><name pos:start="49:9" pos:end="49:27">gen_helper_rdhwr_cc</name><argument_list pos:start="49:28" pos:end="49:40">(<argument pos:start="49:29" pos:end="49:30"><expr pos:start="49:29" pos:end="49:30"><name pos:start="49:29" pos:end="49:30">t0</name></expr></argument>, <argument pos:start="49:33" pos:end="49:39"><expr pos:start="49:33" pos:end="49:39"><name pos:start="49:33" pos:end="49:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:44">(<expr pos:start="51:13" pos:end="51:43"><name pos:start="51:13" pos:end="51:27"><name pos:start="51:13" pos:end="51:15">ctx</name><operator pos:start="51:16" pos:end="51:17">-&gt;</operator><name pos:start="51:18" pos:end="51:19">tb</name><operator pos:start="51:20" pos:end="51:21">-&gt;</operator><name pos:start="51:22" pos:end="51:27">cflags</name></name> <operator pos:start="51:29" pos:end="51:29">&amp;</operator> <name pos:start="51:31" pos:end="51:43">CF_USE_ICOUNT</name></expr>)</condition> <block pos:start="51:46" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:25">

            <expr_stmt pos:start="53:13" pos:end="53:25"><expr pos:start="53:13" pos:end="53:24"><call pos:start="53:13" pos:end="53:24"><name pos:start="53:13" pos:end="53:22">gen_io_end</name><argument_list pos:start="53:23" pos:end="53:24">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:30"><expr pos:start="57:9" pos:end="57:29"><call pos:start="57:9" pos:end="57:29"><name pos:start="57:9" pos:end="57:21">gen_store_gpr</name><argument_list pos:start="57:22" pos:end="57:29">(<argument pos:start="57:23" pos:end="57:24"><expr pos:start="57:23" pos:end="57:24"><name pos:start="57:23" pos:end="57:24">t0</name></expr></argument>, <argument pos:start="57:27" pos:end="57:28"><expr pos:start="57:27" pos:end="57:28"><name pos:start="57:27" pos:end="57:28">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="59:9" pos:end="63:58">/* Break the TB to be able to take timer interrupts immediately

           after reading count. BS_STOP isn't sufficient, we need to ensure

           we break completely out of translated code.  */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:33"><expr pos:start="65:9" pos:end="65:32"><call pos:start="65:9" pos:end="65:32"><name pos:start="65:9" pos:end="65:19">gen_save_pc</name><argument_list pos:start="65:20" pos:end="65:32">(<argument pos:start="65:21" pos:end="65:31"><expr pos:start="65:21" pos:end="65:31"><name pos:start="65:21" pos:end="65:27"><name pos:start="65:21" pos:end="65:23">ctx</name><operator pos:start="65:24" pos:end="65:25">-&gt;</operator><name pos:start="65:26" pos:end="65:27">pc</name></name> <operator pos:start="65:29" pos:end="65:29">+</operator> <literal type="number" pos:start="65:31" pos:end="65:31">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:30"><expr pos:start="67:9" pos:end="67:29"><name pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:11">ctx</name><operator pos:start="67:12" pos:end="67:13">-&gt;</operator><name pos:start="67:14" pos:end="67:19">bstate</name></name> <operator pos:start="67:21" pos:end="67:21">=</operator> <name pos:start="67:23" pos:end="67:29">BS_EXCP</name></expr>;</expr_stmt>

        <break pos:start="69:9" pos:end="69:14">break;</break>

    <case pos:start="71:5" pos:end="71:11">case <expr pos:start="71:10" pos:end="71:10"><literal type="number" pos:start="71:10" pos:end="71:10">3</literal></expr>:</case>

        <expr_stmt pos:start="73:9" pos:end="73:44"><expr pos:start="73:9" pos:end="73:43"><call pos:start="73:9" pos:end="73:43"><name pos:start="73:9" pos:end="73:30">gen_helper_rdhwr_ccres</name><argument_list pos:start="73:31" pos:end="73:43">(<argument pos:start="73:32" pos:end="73:33"><expr pos:start="73:32" pos:end="73:33"><name pos:start="73:32" pos:end="73:33">t0</name></expr></argument>, <argument pos:start="73:36" pos:end="73:42"><expr pos:start="73:36" pos:end="73:42"><name pos:start="73:36" pos:end="73:42">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:30"><expr pos:start="75:9" pos:end="75:29"><call pos:start="75:9" pos:end="75:29"><name pos:start="75:9" pos:end="75:21">gen_store_gpr</name><argument_list pos:start="75:22" pos:end="75:29">(<argument pos:start="75:23" pos:end="75:24"><expr pos:start="75:23" pos:end="75:24"><name pos:start="75:23" pos:end="75:24">t0</name></expr></argument>, <argument pos:start="75:27" pos:end="75:28"><expr pos:start="75:27" pos:end="75:28"><name pos:start="75:27" pos:end="75:28">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <case pos:start="79:5" pos:end="79:11">case <expr pos:start="79:10" pos:end="79:10"><literal type="number" pos:start="79:10" pos:end="79:10">4</literal></expr>:</case>

        <expr_stmt pos:start="81:9" pos:end="81:38"><expr pos:start="81:9" pos:end="81:37"><call pos:start="81:9" pos:end="81:37"><name pos:start="81:9" pos:end="81:18">check_insn</name><argument_list pos:start="81:19" pos:end="81:37">(<argument pos:start="81:20" pos:end="81:22"><expr pos:start="81:20" pos:end="81:22"><name pos:start="81:20" pos:end="81:22">ctx</name></expr></argument>, <argument pos:start="81:25" pos:end="81:36"><expr pos:start="81:25" pos:end="81:36"><name pos:start="81:25" pos:end="81:36">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="93:9"><if pos:start="83:9" pos:end="93:9">if <condition pos:start="83:12" pos:end="83:21">(<expr pos:start="83:13" pos:end="83:20"><name pos:start="83:13" pos:end="83:15">sel</name> <operator pos:start="83:17" pos:end="83:18">!=</operator> <literal type="number" pos:start="83:20" pos:end="83:20">0</literal></expr>)</condition> <block pos:start="83:23" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:45">

            <comment type="block" pos:start="85:13" pos:end="89:15">/* Performance counter registers are not implemented other than

             * control register 0.

             */</comment>

            <expr_stmt pos:start="91:13" pos:end="91:45"><expr pos:start="91:13" pos:end="91:44"><call pos:start="91:13" pos:end="91:44"><name pos:start="91:13" pos:end="91:30">generate_exception</name><argument_list pos:start="91:31" pos:end="91:44">(<argument pos:start="91:32" pos:end="91:34"><expr pos:start="91:32" pos:end="91:34"><name pos:start="91:32" pos:end="91:34">ctx</name></expr></argument>, <argument pos:start="91:37" pos:end="91:43"><expr pos:start="91:37" pos:end="91:43"><name pos:start="91:37" pos:end="91:43">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:50"><expr pos:start="95:9" pos:end="95:49"><call pos:start="95:9" pos:end="95:49"><name pos:start="95:9" pos:end="95:36">gen_helper_rdhwr_performance</name><argument_list pos:start="95:37" pos:end="95:49">(<argument pos:start="95:38" pos:end="95:39"><expr pos:start="95:38" pos:end="95:39"><name pos:start="95:38" pos:end="95:39">t0</name></expr></argument>, <argument pos:start="95:42" pos:end="95:48"><expr pos:start="95:42" pos:end="95:48"><name pos:start="95:42" pos:end="95:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:30"><expr pos:start="97:9" pos:end="97:29"><call pos:start="97:9" pos:end="97:29"><name pos:start="97:9" pos:end="97:21">gen_store_gpr</name><argument_list pos:start="97:22" pos:end="97:29">(<argument pos:start="97:23" pos:end="97:24"><expr pos:start="97:23" pos:end="97:24"><name pos:start="97:23" pos:end="97:24">t0</name></expr></argument>, <argument pos:start="97:27" pos:end="97:28"><expr pos:start="97:27" pos:end="97:28"><name pos:start="97:27" pos:end="97:28">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="99:9" pos:end="99:14">break;</break>

    <case pos:start="101:5" pos:end="101:11">case <expr pos:start="101:10" pos:end="101:10"><literal type="number" pos:start="101:10" pos:end="101:10">5</literal></expr>:</case>

        <expr_stmt pos:start="103:9" pos:end="103:38"><expr pos:start="103:9" pos:end="103:37"><call pos:start="103:9" pos:end="103:37"><name pos:start="103:9" pos:end="103:18">check_insn</name><argument_list pos:start="103:19" pos:end="103:37">(<argument pos:start="103:20" pos:end="103:22"><expr pos:start="103:20" pos:end="103:22"><name pos:start="103:20" pos:end="103:22">ctx</name></expr></argument>, <argument pos:start="103:25" pos:end="103:36"><expr pos:start="103:25" pos:end="103:36"><name pos:start="103:25" pos:end="103:36">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:42"><expr pos:start="105:9" pos:end="105:41"><call pos:start="105:9" pos:end="105:41"><name pos:start="105:9" pos:end="105:28">gen_helper_rdhwr_xnp</name><argument_list pos:start="105:29" pos:end="105:41">(<argument pos:start="105:30" pos:end="105:31"><expr pos:start="105:30" pos:end="105:31"><name pos:start="105:30" pos:end="105:31">t0</name></expr></argument>, <argument pos:start="105:34" pos:end="105:40"><expr pos:start="105:34" pos:end="105:40"><name pos:start="105:34" pos:end="105:40">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:30"><expr pos:start="107:9" pos:end="107:29"><call pos:start="107:9" pos:end="107:29"><name pos:start="107:9" pos:end="107:21">gen_store_gpr</name><argument_list pos:start="107:22" pos:end="107:29">(<argument pos:start="107:23" pos:end="107:24"><expr pos:start="107:23" pos:end="107:24"><name pos:start="107:23" pos:end="107:24">t0</name></expr></argument>, <argument pos:start="107:27" pos:end="107:28"><expr pos:start="107:27" pos:end="107:28"><name pos:start="107:27" pos:end="107:28">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="109:9" pos:end="109:14">break;</break>

    <case pos:start="111:5" pos:end="114:0">case <expr pos:start="111:10" pos:end="111:11"><literal type="number" pos:start="111:10" pos:end="111:11">29</literal></expr>:</case>

<cpp:if pos:start="113:1" pos:end="113:29">#<cpp:directive pos:start="113:2" pos:end="113:3">if</cpp:directive> <expr pos:start="113:5" pos:end="113:29"><call pos:start="113:5" pos:end="113:29"><name pos:start="113:5" pos:end="113:11">defined</name><argument_list pos:start="113:12" pos:end="113:29">(<argument pos:start="113:13" pos:end="113:28"><expr pos:start="113:13" pos:end="113:28"><name pos:start="113:13" pos:end="113:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="115:9" pos:end="117:71"><expr pos:start="115:9" pos:end="117:70"><call pos:start="115:9" pos:end="117:70"><name pos:start="115:9" pos:end="115:21">tcg_gen_ld_tl</name><argument_list pos:start="115:22" pos:end="117:70">(<argument pos:start="115:23" pos:end="115:24"><expr pos:start="115:23" pos:end="115:24"><name pos:start="115:23" pos:end="115:24">t0</name></expr></argument>, <argument pos:start="115:27" pos:end="115:33"><expr pos:start="115:27" pos:end="115:33"><name pos:start="115:27" pos:end="115:33">cpu_env</name></expr></argument>,

                      <argument pos:start="117:23" pos:end="117:69"><expr pos:start="117:23" pos:end="117:69"><call pos:start="117:23" pos:end="117:69"><name pos:start="117:23" pos:end="117:30">offsetof</name><argument_list pos:start="117:31" pos:end="117:69">(<argument pos:start="117:32" pos:end="117:43"><expr pos:start="117:32" pos:end="117:43"><name pos:start="117:32" pos:end="117:43">CPUMIPSState</name></expr></argument>, <argument pos:start="117:46" pos:end="117:68"><expr pos:start="117:46" pos:end="117:68"><name pos:start="117:46" pos:end="117:68"><name pos:start="117:46" pos:end="117:54">active_tc</name><operator pos:start="117:55" pos:end="117:55">.</operator><name pos:start="117:56" pos:end="117:68">CP0_UserLocal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:30"><expr pos:start="119:9" pos:end="119:29"><call pos:start="119:9" pos:end="119:29"><name pos:start="119:9" pos:end="119:21">gen_store_gpr</name><argument_list pos:start="119:22" pos:end="119:29">(<argument pos:start="119:23" pos:end="119:24"><expr pos:start="119:23" pos:end="119:24"><name pos:start="119:23" pos:end="119:24">t0</name></expr></argument>, <argument pos:start="119:27" pos:end="119:28"><expr pos:start="119:27" pos:end="119:28"><name pos:start="119:27" pos:end="119:28">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="121:9" pos:end="124:0">break;</break>

<cpp:else pos:start="123:1" pos:end="123:5">#<cpp:directive pos:start="123:2" pos:end="123:5">else</cpp:directive></cpp:else>

        <if_stmt pos:start="125:9" pos:end="139:9"><if pos:start="125:9" pos:end="135:9">if <condition pos:start="125:12" pos:end="127:50">(<expr pos:start="125:13" pos:end="127:49"><operator pos:start="125:13" pos:end="125:13">(</operator><name pos:start="125:14" pos:end="125:24"><name pos:start="125:14" pos:end="125:16">ctx</name><operator pos:start="125:17" pos:end="125:18">-&gt;</operator><name pos:start="125:19" pos:end="125:24">hflags</name></name> <operator pos:start="125:26" pos:end="125:26">&amp;</operator> <name pos:start="125:28" pos:end="125:41">MIPS_HFLAG_CP0</name><operator pos:start="125:42" pos:end="125:42">)</operator> <operator pos:start="125:44" pos:end="125:45">||</operator>

            <operator pos:start="127:13" pos:end="127:13">(</operator><name pos:start="127:14" pos:end="127:24"><name pos:start="127:14" pos:end="127:16">ctx</name><operator pos:start="127:17" pos:end="127:18">-&gt;</operator><name pos:start="127:19" pos:end="127:24">hflags</name></name> <operator pos:start="127:26" pos:end="127:26">&amp;</operator> <name pos:start="127:28" pos:end="127:48">MIPS_HFLAG_HWRENA_ULR</name><operator pos:start="127:49" pos:end="127:49">)</operator></expr>)</condition> <block pos:start="127:52" pos:end="135:9">{<block_content pos:start="129:13" pos:end="133:34">

            <expr_stmt pos:start="129:13" pos:end="131:75"><expr pos:start="129:13" pos:end="131:74"><call pos:start="129:13" pos:end="131:74"><name pos:start="129:13" pos:end="129:25">tcg_gen_ld_tl</name><argument_list pos:start="129:26" pos:end="131:74">(<argument pos:start="129:27" pos:end="129:28"><expr pos:start="129:27" pos:end="129:28"><name pos:start="129:27" pos:end="129:28">t0</name></expr></argument>, <argument pos:start="129:31" pos:end="129:37"><expr pos:start="129:31" pos:end="129:37"><name pos:start="129:31" pos:end="129:37">cpu_env</name></expr></argument>,

                          <argument pos:start="131:27" pos:end="131:73"><expr pos:start="131:27" pos:end="131:73"><call pos:start="131:27" pos:end="131:73"><name pos:start="131:27" pos:end="131:34">offsetof</name><argument_list pos:start="131:35" pos:end="131:73">(<argument pos:start="131:36" pos:end="131:47"><expr pos:start="131:36" pos:end="131:47"><name pos:start="131:36" pos:end="131:47">CPUMIPSState</name></expr></argument>, <argument pos:start="131:50" pos:end="131:72"><expr pos:start="131:50" pos:end="131:72"><name pos:start="131:50" pos:end="131:72"><name pos:start="131:50" pos:end="131:58">active_tc</name><operator pos:start="131:59" pos:end="131:59">.</operator><name pos:start="131:60" pos:end="131:72">CP0_UserLocal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:34"><expr pos:start="133:13" pos:end="133:33"><call pos:start="133:13" pos:end="133:33"><name pos:start="133:13" pos:end="133:25">gen_store_gpr</name><argument_list pos:start="133:26" pos:end="133:33">(<argument pos:start="133:27" pos:end="133:28"><expr pos:start="133:27" pos:end="133:28"><name pos:start="133:27" pos:end="133:28">t0</name></expr></argument>, <argument pos:start="133:31" pos:end="133:32"><expr pos:start="133:31" pos:end="133:32"><name pos:start="133:31" pos:end="133:32">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="135:11" pos:end="139:9">else <block pos:start="135:16" pos:end="139:9">{<block_content pos:start="137:13" pos:end="137:49">

            <expr_stmt pos:start="137:13" pos:end="137:49"><expr pos:start="137:13" pos:end="137:48"><call pos:start="137:13" pos:end="137:48"><name pos:start="137:13" pos:end="137:34">generate_exception_end</name><argument_list pos:start="137:35" pos:end="137:48">(<argument pos:start="137:36" pos:end="137:38"><expr pos:start="137:36" pos:end="137:38"><name pos:start="137:36" pos:end="137:38">ctx</name></expr></argument>, <argument pos:start="137:41" pos:end="137:47"><expr pos:start="137:41" pos:end="137:47"><name pos:start="137:41" pos:end="137:47">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="141:9" pos:end="144:0">break;</break>

<cpp:endif pos:start="143:1" pos:end="143:6">#<cpp:directive pos:start="143:2" pos:end="143:6">endif</cpp:directive></cpp:endif>

    <default pos:start="145:5" pos:end="145:12">default:</default>            <comment type="block" pos:start="145:25" pos:end="145:37">/* Invalid */</comment>

        <expr_stmt pos:start="147:9" pos:end="147:28"><expr pos:start="147:9" pos:end="147:27"><call pos:start="147:9" pos:end="147:27"><name pos:start="147:9" pos:end="147:18">MIPS_INVAL</name><argument_list pos:start="147:19" pos:end="147:27">(<argument pos:start="147:20" pos:end="147:26"><expr pos:start="147:20" pos:end="147:26"><literal type="string" pos:start="147:20" pos:end="147:26">"rdhwr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:45"><expr pos:start="149:9" pos:end="149:44"><call pos:start="149:9" pos:end="149:44"><name pos:start="149:9" pos:end="149:30">generate_exception_end</name><argument_list pos:start="149:31" pos:end="149:44">(<argument pos:start="149:32" pos:end="149:34"><expr pos:start="149:32" pos:end="149:34"><name pos:start="149:32" pos:end="149:34">ctx</name></expr></argument>, <argument pos:start="149:37" pos:end="149:43"><expr pos:start="149:37" pos:end="149:43"><name pos:start="149:37" pos:end="149:43">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="151:9" pos:end="151:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="155:5" pos:end="155:22"><expr pos:start="155:5" pos:end="155:21"><call pos:start="155:5" pos:end="155:21"><name pos:start="155:5" pos:end="155:17">tcg_temp_free</name><argument_list pos:start="155:18" pos:end="155:21">(<argument pos:start="155:19" pos:end="155:20"><expr pos:start="155:19" pos:end="155:20"><name pos:start="155:19" pos:end="155:20">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
