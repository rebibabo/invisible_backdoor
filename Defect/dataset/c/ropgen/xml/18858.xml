<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18858.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:30">tcg_cpu_thread_fn</name><parameter_list pos:start="1:31" pos:end="1:41">(<parameter pos:start="1:32" pos:end="1:40"><decl pos:start="1:32" pos:end="1:40"><type pos:start="1:32" pos:end="1:37"><name pos:start="1:32" pos:end="1:35">void</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="47:1">{<block_content pos:start="5:5" pos:end="45:16">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">env</name> <init pos:start="5:19" pos:end="5:23">= <expr pos:start="5:21" pos:end="5:23"><name pos:start="5:21" pos:end="5:23">arg</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:32"><expr pos:start="9:5" pos:end="9:31"><call pos:start="9:5" pos:end="9:31"><name pos:start="9:5" pos:end="9:29">qemu_tcg_init_cpu_signals</name><argument_list pos:start="9:30" pos:end="9:31">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:34"><expr pos:start="11:5" pos:end="11:33"><call pos:start="11:5" pos:end="11:33"><name pos:start="11:5" pos:end="11:20">qemu_thread_self</name><argument_list pos:start="11:21" pos:end="11:33">(<argument pos:start="11:22" pos:end="11:32"><expr pos:start="11:22" pos:end="11:32"><name pos:start="11:22" pos:end="11:32"><name pos:start="11:22" pos:end="11:24">env</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:32">thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:29">/* signal CPU creation */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:40"><expr pos:start="17:5" pos:end="17:39"><call pos:start="17:5" pos:end="17:39"><name pos:start="17:5" pos:end="17:19">qemu_mutex_lock</name><argument_list pos:start="17:20" pos:end="17:39">(<argument pos:start="17:21" pos:end="17:38"><expr pos:start="17:21" pos:end="17:38"><operator pos:start="17:21" pos:end="17:21">&amp;</operator><name pos:start="17:22" pos:end="17:38">qemu_global_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="19:5" pos:end="21:25">for <control pos:start="19:9" pos:end="19:59">(<init pos:start="19:10" pos:end="19:25"><expr pos:start="19:10" pos:end="19:24"><name pos:start="19:10" pos:end="19:12">env</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <name pos:start="19:16" pos:end="19:24">first_cpu</name></expr>;</init> <condition pos:start="19:27" pos:end="19:38"><expr pos:start="19:27" pos:end="19:37"><name pos:start="19:27" pos:end="19:29">env</name> <operator pos:start="19:31" pos:end="19:32">!=</operator> <name pos:start="19:34" pos:end="19:37">NULL</name></expr>;</condition> <incr pos:start="19:40" pos:end="19:58"><expr pos:start="19:40" pos:end="19:58"><name pos:start="19:40" pos:end="19:42">env</name> <operator pos:start="19:44" pos:end="19:44">=</operator> <name pos:start="19:46" pos:end="19:58"><name pos:start="19:46" pos:end="19:48">env</name><operator pos:start="19:49" pos:end="19:50">-&gt;</operator><name pos:start="19:51" pos:end="19:58">next_cpu</name></name></expr></incr>)</control><block type="pseudo" pos:start="21:9" pos:end="21:25"><block_content pos:start="21:9" pos:end="21:25">

        <expr_stmt pos:start="21:9" pos:end="21:25"><expr pos:start="21:9" pos:end="21:24"><name pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:11">env</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:20">created</name></name> <operator pos:start="21:22" pos:end="21:22">=</operator> <literal type="number" pos:start="21:24" pos:end="21:24">1</literal></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt pos:start="23:5" pos:end="23:37"><expr pos:start="23:5" pos:end="23:36"><call pos:start="23:5" pos:end="23:36"><name pos:start="23:5" pos:end="23:20">qemu_cond_signal</name><argument_list pos:start="23:21" pos:end="23:36">(<argument pos:start="23:22" pos:end="23:35"><expr pos:start="23:22" pos:end="23:35"><operator pos:start="23:22" pos:end="23:22">&amp;</operator><name pos:start="23:23" pos:end="23:35">qemu_cpu_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:45">/* and wait for machine initialization */</comment>

    <while pos:start="29:5" pos:end="31:72">while <condition pos:start="29:11" pos:end="29:30">(<expr pos:start="29:12" pos:end="29:29"><operator pos:start="29:12" pos:end="29:12">!</operator><name pos:start="29:13" pos:end="29:29">qemu_system_ready</name></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:72"><block_content pos:start="31:9" pos:end="31:72">

        <expr_stmt pos:start="31:9" pos:end="31:72"><expr pos:start="31:9" pos:end="31:71"><call pos:start="31:9" pos:end="31:71"><name pos:start="31:9" pos:end="31:27">qemu_cond_timedwait</name><argument_list pos:start="31:28" pos:end="31:71">(<argument pos:start="31:29" pos:end="31:45"><expr pos:start="31:29" pos:end="31:45"><operator pos:start="31:29" pos:end="31:29">&amp;</operator><name pos:start="31:30" pos:end="31:45">qemu_system_cond</name></expr></argument>, <argument pos:start="31:48" pos:end="31:65"><expr pos:start="31:48" pos:end="31:65"><operator pos:start="31:48" pos:end="31:48">&amp;</operator><name pos:start="31:49" pos:end="31:65">qemu_global_mutex</name></expr></argument>, <argument pos:start="31:68" pos:end="31:70"><expr pos:start="31:68" pos:end="31:70"><literal type="number" pos:start="31:68" pos:end="31:70">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>



    <while pos:start="35:5" pos:end="41:5">while <condition pos:start="35:11" pos:end="35:13">(<expr pos:start="35:12" pos:end="35:12"><literal type="number" pos:start="35:12" pos:end="35:12">1</literal></expr>)</condition> <block pos:start="35:15" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:33">

        <expr_stmt pos:start="37:9" pos:end="37:23"><expr pos:start="37:9" pos:end="37:22"><call pos:start="37:9" pos:end="37:22"><name pos:start="37:9" pos:end="37:20">cpu_exec_all</name><argument_list pos:start="37:21" pos:end="37:22">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:33"><expr pos:start="39:9" pos:end="39:32"><call pos:start="39:9" pos:end="39:32"><name pos:start="39:9" pos:end="39:30">qemu_tcg_wait_io_event</name><argument_list pos:start="39:31" pos:end="39:32">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="45:5" pos:end="45:16">return <expr pos:start="45:12" pos:end="45:15"><name pos:start="45:12" pos:end="45:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
