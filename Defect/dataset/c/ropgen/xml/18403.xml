<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18403.c" pos:tabs="8"><function pos:start="1:1" pos:end="153:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">qemu_rdma_dest_init</name><parameter_list pos:start="1:31" pos:end="1:63">(<parameter pos:start="1:32" pos:end="1:48"><decl pos:start="1:32" pos:end="1:48"><type pos:start="1:32" pos:end="1:48"><name pos:start="1:32" pos:end="1:42">RDMAContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:48">rdma</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:55">Error</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier><modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="153:1">{<block_content pos:start="5:5" pos:end="149:15">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:21">= <expr pos:start="5:15" pos:end="5:21"><operator pos:start="5:15" pos:end="5:15">-</operator><name pos:start="5:16" pos:end="5:21">EINVAL</name></expr></init></decl>, <decl pos:start="5:24" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:24" pos:end="5:26">idx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:21">rdma_cm_id</name></name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:32">listen_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:15"><name pos:start="9:10" pos:end="9:11">ip</name><index pos:start="9:12" pos:end="9:15">[<expr pos:start="9:13" pos:end="9:14"><literal type="number" pos:start="9:13" pos:end="9:14">40</literal></expr>]</index></name> <init pos:start="9:17" pos:end="9:27">= <expr pos:start="9:19" pos:end="9:27"><literal type="string" pos:start="9:19" pos:end="9:27">"unknown"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:19">addrinfo</name></name> <modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:24">res</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:21"><name pos:start="13:10" pos:end="13:17">port_str</name><index pos:start="13:18" pos:end="13:21">[<expr pos:start="13:19" pos:end="13:20"><literal type="number" pos:start="13:19" pos:end="13:20">16</literal></expr>]</index></name></decl>;</decl_stmt>



    <for pos:start="17:5" pos:end="23:5">for <control pos:start="17:9" pos:end="17:45">(<init pos:start="17:10" pos:end="17:17"><expr pos:start="17:10" pos:end="17:16"><name pos:start="17:10" pos:end="17:12">idx</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr>;</init> <condition pos:start="17:19" pos:end="17:38"><expr pos:start="17:19" pos:end="17:37"><name pos:start="17:19" pos:end="17:21">idx</name> <operator pos:start="17:23" pos:end="17:23">&lt;</operator> <name pos:start="17:25" pos:end="17:37">RDMA_WRID_MAX</name></expr>;</condition> <incr pos:start="17:40" pos:end="17:44"><expr pos:start="17:40" pos:end="17:44"><name pos:start="17:40" pos:end="17:42">idx</name><operator pos:start="17:43" pos:end="17:44">++</operator></expr></incr>)</control> <block pos:start="17:47" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:47">

        <expr_stmt pos:start="19:9" pos:end="19:43"><expr pos:start="19:9" pos:end="19:42"><name pos:start="19:9" pos:end="19:26"><name pos:start="19:9" pos:end="19:12">rdma</name><operator pos:start="19:13" pos:end="19:14">-&gt;</operator><name pos:start="19:15" pos:end="19:21">wr_data</name><index pos:start="19:22" pos:end="19:26">[<expr pos:start="19:23" pos:end="19:25"><name pos:start="19:23" pos:end="19:25">idx</name></expr>]</index></name><operator pos:start="19:27" pos:end="19:27">.</operator><name pos:start="19:28" pos:end="19:38">control_len</name> <operator pos:start="19:40" pos:end="19:40">=</operator> <literal type="number" pos:start="19:42" pos:end="19:42">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:47"><expr pos:start="21:9" pos:end="21:46"><name pos:start="21:9" pos:end="21:26"><name pos:start="21:9" pos:end="21:12">rdma</name><operator pos:start="21:13" pos:end="21:14">-&gt;</operator><name pos:start="21:15" pos:end="21:21">wr_data</name><index pos:start="21:22" pos:end="21:26">[<expr pos:start="21:23" pos:end="21:25"><name pos:start="21:23" pos:end="21:25">idx</name></expr>]</index></name><operator pos:start="21:27" pos:end="21:27">.</operator><name pos:start="21:28" pos:end="21:39">control_curr</name> <operator pos:start="21:41" pos:end="21:41">=</operator> <name pos:start="21:43" pos:end="21:46">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:27">(<expr pos:start="27:9" pos:end="27:26"><name pos:start="27:9" pos:end="27:18"><name pos:start="27:9" pos:end="27:12">rdma</name><operator pos:start="27:13" pos:end="27:14">-&gt;</operator><name pos:start="27:15" pos:end="27:18">host</name></name> <operator pos:start="27:20" pos:end="27:21">==</operator> <name pos:start="27:23" pos:end="27:26">NULL</name></expr>)</condition> <block pos:start="27:29" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:18">

        <expr_stmt pos:start="29:9" pos:end="29:45"><expr pos:start="29:9" pos:end="29:44"><call pos:start="29:9" pos:end="29:44"><name pos:start="29:9" pos:end="29:13">ERROR</name><argument_list pos:start="29:14" pos:end="29:44">(<argument pos:start="29:15" pos:end="29:18"><expr pos:start="29:15" pos:end="29:18"><name pos:start="29:15" pos:end="29:18">errp</name></expr></argument>, <argument pos:start="29:21" pos:end="29:43"><expr pos:start="29:21" pos:end="29:43"><literal type="string" pos:start="29:21" pos:end="29:43">"RDMA host is not set!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:36"><expr pos:start="31:9" pos:end="31:35"><name pos:start="31:9" pos:end="31:25"><name pos:start="31:9" pos:end="31:12">rdma</name><operator pos:start="31:13" pos:end="31:14">-&gt;</operator><name pos:start="31:15" pos:end="31:25">error_state</name></name> <operator pos:start="31:27" pos:end="31:27">=</operator> <operator pos:start="31:29" pos:end="31:29">-</operator><name pos:start="31:30" pos:end="31:35">EINVAL</name></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:18">return <expr pos:start="33:16" pos:end="33:17"><operator pos:start="33:16" pos:end="33:16">-</operator><literal type="number" pos:start="33:17" pos:end="33:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="37:5" pos:end="37:27">/* create CM channel */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:48"><expr pos:start="39:5" pos:end="39:47"><name pos:start="39:5" pos:end="39:17"><name pos:start="39:5" pos:end="39:8">rdma</name><operator pos:start="39:9" pos:end="39:10">-&gt;</operator><name pos:start="39:11" pos:end="39:17">channel</name></name> <operator pos:start="39:19" pos:end="39:19">=</operator> <call pos:start="39:21" pos:end="39:47"><name pos:start="39:21" pos:end="39:45">rdma_create_event_channel</name><argument_list pos:start="39:46" pos:end="39:47">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="49:5"><if pos:start="41:5" pos:end="49:5">if <condition pos:start="41:8" pos:end="41:23">(<expr pos:start="41:9" pos:end="41:22"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:22"><name pos:start="41:10" pos:end="41:13">rdma</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:22">channel</name></name></expr>)</condition> <block pos:start="41:25" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:18">

        <expr_stmt pos:start="43:9" pos:end="43:59"><expr pos:start="43:9" pos:end="43:58"><call pos:start="43:9" pos:end="43:58"><name pos:start="43:9" pos:end="43:13">ERROR</name><argument_list pos:start="43:14" pos:end="43:58">(<argument pos:start="43:15" pos:end="43:18"><expr pos:start="43:15" pos:end="43:18"><name pos:start="43:15" pos:end="43:18">errp</name></expr></argument>, <argument pos:start="43:21" pos:end="43:57"><expr pos:start="43:21" pos:end="43:57"><literal type="string" pos:start="43:21" pos:end="43:57">"could not create rdma event channel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:36"><expr pos:start="45:9" pos:end="45:35"><name pos:start="45:9" pos:end="45:25"><name pos:start="45:9" pos:end="45:12">rdma</name><operator pos:start="45:13" pos:end="45:14">-&gt;</operator><name pos:start="45:15" pos:end="45:25">error_state</name></name> <operator pos:start="45:27" pos:end="45:27">=</operator> <operator pos:start="45:29" pos:end="45:29">-</operator><name pos:start="45:30" pos:end="45:35">EINVAL</name></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:18">return <expr pos:start="47:16" pos:end="47:17"><operator pos:start="47:16" pos:end="47:16">-</operator><literal type="number" pos:start="47:17" pos:end="47:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:22">/* create CM id */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:71"><expr pos:start="55:5" pos:end="55:70"><name pos:start="55:5" pos:end="55:7">ret</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="55:70"><name pos:start="55:11" pos:end="55:24">rdma_create_id</name><argument_list pos:start="55:25" pos:end="55:70">(<argument pos:start="55:26" pos:end="55:38"><expr pos:start="55:26" pos:end="55:38"><name pos:start="55:26" pos:end="55:38"><name pos:start="55:26" pos:end="55:29">rdma</name><operator pos:start="55:30" pos:end="55:31">-&gt;</operator><name pos:start="55:32" pos:end="55:38">channel</name></name></expr></argument>, <argument pos:start="55:41" pos:end="55:50"><expr pos:start="55:41" pos:end="55:50"><operator pos:start="55:41" pos:end="55:41">&amp;</operator><name pos:start="55:42" pos:end="55:50">listen_id</name></expr></argument>, <argument pos:start="55:53" pos:end="55:56"><expr pos:start="55:53" pos:end="55:56"><name pos:start="55:53" pos:end="55:56">NULL</name></expr></argument>, <argument pos:start="55:59" pos:end="55:69"><expr pos:start="55:59" pos:end="55:69"><name pos:start="55:59" pos:end="55:69">RDMA_PS_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:12">(<expr pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">ret</name></expr>)</condition> <block pos:start="57:14" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:44">

        <expr_stmt pos:start="59:9" pos:end="59:47"><expr pos:start="59:9" pos:end="59:46"><call pos:start="59:9" pos:end="59:46"><name pos:start="59:9" pos:end="59:13">ERROR</name><argument_list pos:start="59:14" pos:end="59:46">(<argument pos:start="59:15" pos:end="59:18"><expr pos:start="59:15" pos:end="59:18"><name pos:start="59:15" pos:end="59:18">errp</name></expr></argument>, <argument pos:start="59:21" pos:end="59:45"><expr pos:start="59:21" pos:end="59:45"><literal type="string" pos:start="59:21" pos:end="59:45">"could not create cm_id!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="61:9" pos:end="61:44">goto <name pos:start="61:14" pos:end="61:43">err_dest_init_create_listen_id</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:45"><expr pos:start="67:5" pos:end="67:44"><call pos:start="67:5" pos:end="67:44"><name pos:start="67:5" pos:end="67:12">snprintf</name><argument_list pos:start="67:13" pos:end="67:44">(<argument pos:start="67:14" pos:end="67:21"><expr pos:start="67:14" pos:end="67:21"><name pos:start="67:14" pos:end="67:21">port_str</name></expr></argument>, <argument pos:start="67:24" pos:end="67:25"><expr pos:start="67:24" pos:end="67:25"><literal type="number" pos:start="67:24" pos:end="67:25">16</literal></expr></argument>, <argument pos:start="67:28" pos:end="67:31"><expr pos:start="67:28" pos:end="67:31"><literal type="string" pos:start="67:28" pos:end="67:31">"%d"</literal></expr></argument>, <argument pos:start="67:34" pos:end="67:43"><expr pos:start="67:34" pos:end="67:43"><name pos:start="67:34" pos:end="67:43"><name pos:start="67:34" pos:end="67:37">rdma</name><operator pos:start="67:38" pos:end="67:39">-&gt;</operator><name pos:start="67:40" pos:end="67:43">port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:24"><expr pos:start="69:5" pos:end="69:23"><name pos:start="69:5" pos:end="69:16"><name pos:start="69:5" pos:end="69:12">port_str</name><index pos:start="69:13" pos:end="69:16">[<expr pos:start="69:14" pos:end="69:15"><literal type="number" pos:start="69:14" pos:end="69:15">15</literal></expr>]</index></name> <operator pos:start="69:18" pos:end="69:18">=</operator> <literal type="char" pos:start="69:20" pos:end="69:23">'\0'</literal></expr>;</expr_stmt>



    <if_stmt pos:start="73:5" pos:end="123:5"><if pos:start="73:5" pos:end="115:5">if <condition pos:start="73:8" pos:end="73:45">(<expr pos:start="73:9" pos:end="73:44"><name pos:start="73:9" pos:end="73:18"><name pos:start="73:9" pos:end="73:12">rdma</name><operator pos:start="73:13" pos:end="73:14">-&gt;</operator><name pos:start="73:15" pos:end="73:18">host</name></name> <operator pos:start="73:20" pos:end="73:21">&amp;&amp;</operator> <call pos:start="73:23" pos:end="73:44"><name pos:start="73:23" pos:end="73:28">strcmp</name><argument_list pos:start="73:29" pos:end="73:44">(<argument pos:start="73:30" pos:end="73:31"><expr pos:start="73:30" pos:end="73:31"><literal type="string" pos:start="73:30" pos:end="73:31">""</literal></expr></argument>, <argument pos:start="73:34" pos:end="73:43"><expr pos:start="73:34" pos:end="73:43"><name pos:start="73:34" pos:end="73:43"><name pos:start="73:34" pos:end="73:37">rdma</name><operator pos:start="73:38" pos:end="73:39">-&gt;</operator><name pos:start="73:40" pos:end="73:43">host</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:47" pos:end="115:5">{<block_content pos:start="75:9" pos:end="113:37">

        <decl_stmt pos:start="75:9" pos:end="75:27"><decl pos:start="75:9" pos:end="75:26"><type pos:start="75:9" pos:end="75:25"><name pos:start="75:9" pos:end="75:23"><name pos:start="75:9" pos:end="75:14">struct</name> <name pos:start="75:16" pos:end="75:23">addrinfo</name></name> <modifier pos:start="75:25" pos:end="75:25">*</modifier></type><name pos:start="75:26" pos:end="75:26">e</name></decl>;</decl_stmt>



        <expr_stmt pos:start="79:9" pos:end="79:60"><expr pos:start="79:9" pos:end="79:59"><name pos:start="79:9" pos:end="79:11">ret</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <call pos:start="79:15" pos:end="79:59"><name pos:start="79:15" pos:end="79:25">getaddrinfo</name><argument_list pos:start="79:26" pos:end="79:59">(<argument pos:start="79:27" pos:end="79:36"><expr pos:start="79:27" pos:end="79:36"><name pos:start="79:27" pos:end="79:36"><name pos:start="79:27" pos:end="79:30">rdma</name><operator pos:start="79:31" pos:end="79:32">-&gt;</operator><name pos:start="79:33" pos:end="79:36">host</name></name></expr></argument>, <argument pos:start="79:39" pos:end="79:46"><expr pos:start="79:39" pos:end="79:46"><name pos:start="79:39" pos:end="79:46">port_str</name></expr></argument>, <argument pos:start="79:49" pos:end="79:52"><expr pos:start="79:49" pos:end="79:52"><name pos:start="79:49" pos:end="79:52">NULL</name></expr></argument>, <argument pos:start="79:55" pos:end="79:58"><expr pos:start="79:55" pos:end="79:58"><operator pos:start="79:55" pos:end="79:55">&amp;</operator><name pos:start="79:56" pos:end="79:58">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="87:9"><if pos:start="81:9" pos:end="87:9">if <condition pos:start="81:12" pos:end="81:20">(<expr pos:start="81:13" pos:end="81:19"><name pos:start="81:13" pos:end="81:15">ret</name> <operator pos:start="81:17" pos:end="81:17">&lt;</operator> <literal type="number" pos:start="81:19" pos:end="81:19">0</literal></expr>)</condition> <block pos:start="81:22" pos:end="87:9">{<block_content pos:start="83:13" pos:end="85:41">

            <expr_stmt pos:start="83:13" pos:end="83:72"><expr pos:start="83:13" pos:end="83:71"><call pos:start="83:13" pos:end="83:71"><name pos:start="83:13" pos:end="83:17">ERROR</name><argument_list pos:start="83:18" pos:end="83:71">(<argument pos:start="83:19" pos:end="83:22"><expr pos:start="83:19" pos:end="83:22"><name pos:start="83:19" pos:end="83:22">errp</name></expr></argument>, <argument pos:start="83:25" pos:end="83:58"><expr pos:start="83:25" pos:end="83:58"><literal type="string" pos:start="83:25" pos:end="83:58">"could not getaddrinfo address %s"</literal></expr></argument>, <argument pos:start="83:61" pos:end="83:70"><expr pos:start="83:61" pos:end="83:70"><name pos:start="83:61" pos:end="83:70"><name pos:start="83:61" pos:end="83:64">rdma</name><operator pos:start="83:65" pos:end="83:66">-&gt;</operator><name pos:start="83:67" pos:end="83:70">host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="85:13" pos:end="85:41">goto <name pos:start="85:18" pos:end="85:40">err_dest_init_bind_addr</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <for pos:start="91:9" pos:end="107:9">for <control pos:start="91:13" pos:end="91:48">(<init pos:start="91:14" pos:end="91:21"><expr pos:start="91:14" pos:end="91:20"><name pos:start="91:14" pos:end="91:14">e</name> <operator pos:start="91:16" pos:end="91:16">=</operator> <name pos:start="91:18" pos:end="91:20">res</name></expr>;</init> <condition pos:start="91:23" pos:end="91:32"><expr pos:start="91:23" pos:end="91:31"><name pos:start="91:23" pos:end="91:23">e</name> <operator pos:start="91:25" pos:end="91:26">!=</operator> <name pos:start="91:28" pos:end="91:31">NULL</name></expr>;</condition> <incr pos:start="91:34" pos:end="91:47"><expr pos:start="91:34" pos:end="91:47"><name pos:start="91:34" pos:end="91:34">e</name> <operator pos:start="91:36" pos:end="91:36">=</operator> <name pos:start="91:38" pos:end="91:47"><name pos:start="91:38" pos:end="91:38">e</name><operator pos:start="91:39" pos:end="91:40">-&gt;</operator><name pos:start="91:41" pos:end="91:47">ai_next</name></name></expr></incr>)</control> <block pos:start="91:50" pos:end="107:9">{<block_content pos:start="93:13" pos:end="105:13">

            <expr_stmt pos:start="93:13" pos:end="95:79"><expr pos:start="93:13" pos:end="95:78"><call pos:start="93:13" pos:end="95:78"><name pos:start="93:13" pos:end="93:21">inet_ntop</name><argument_list pos:start="93:22" pos:end="95:78">(<argument pos:start="93:23" pos:end="93:34"><expr pos:start="93:23" pos:end="93:34"><name pos:start="93:23" pos:end="93:34"><name pos:start="93:23" pos:end="93:23">e</name><operator pos:start="93:24" pos:end="93:25">-&gt;</operator><name pos:start="93:26" pos:end="93:34">ai_family</name></name></expr></argument>,

                <argument pos:start="95:17" pos:end="95:62"><expr pos:start="95:17" pos:end="95:62"><operator pos:start="95:17" pos:end="95:17">&amp;</operator><operator pos:start="95:18" pos:end="95:18">(</operator><operator pos:start="95:19" pos:end="95:19">(</operator>struct <name pos:start="95:27" pos:end="95:37">sockaddr_in</name> <operator pos:start="95:39" pos:end="95:39">*</operator><operator pos:start="95:40" pos:end="95:40">)</operator> <name pos:start="95:42" pos:end="95:51"><name pos:start="95:42" pos:end="95:42">e</name><operator pos:start="95:43" pos:end="95:44">-&gt;</operator><name pos:start="95:45" pos:end="95:51">ai_addr</name></name><operator pos:start="95:52" pos:end="95:52">)</operator><operator pos:start="95:53" pos:end="95:54">-&gt;</operator><name pos:start="95:55" pos:end="95:62">sin_addr</name></expr></argument>, <argument pos:start="95:65" pos:end="95:66"><expr pos:start="95:65" pos:end="95:66"><name pos:start="95:65" pos:end="95:66">ip</name></expr></argument>, <argument pos:start="95:69" pos:end="95:77"><expr pos:start="95:69" pos:end="95:77"><sizeof pos:start="95:69" pos:end="95:77">sizeof <name pos:start="95:76" pos:end="95:77">ip</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:57"><expr pos:start="97:13" pos:end="97:56"><call pos:start="97:13" pos:end="97:56"><name pos:start="97:13" pos:end="97:19">DPRINTF</name><argument_list pos:start="97:20" pos:end="97:56">(<argument pos:start="97:21" pos:end="97:39"><expr pos:start="97:21" pos:end="97:39"><literal type="string" pos:start="97:21" pos:end="97:39">"Trying %s =&gt; %s\n"</literal></expr></argument>, <argument pos:start="97:42" pos:end="97:51"><expr pos:start="97:42" pos:end="97:51"><name pos:start="97:42" pos:end="97:51"><name pos:start="97:42" pos:end="97:45">rdma</name><operator pos:start="97:46" pos:end="97:47">-&gt;</operator><name pos:start="97:48" pos:end="97:51">host</name></name></expr></argument>, <argument pos:start="97:54" pos:end="97:55"><expr pos:start="97:54" pos:end="97:55"><name pos:start="97:54" pos:end="97:55">ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:56"><expr pos:start="99:13" pos:end="99:55"><name pos:start="99:13" pos:end="99:15">ret</name> <operator pos:start="99:17" pos:end="99:17">=</operator> <call pos:start="99:19" pos:end="99:55"><name pos:start="99:19" pos:end="99:32">rdma_bind_addr</name><argument_list pos:start="99:33" pos:end="99:55">(<argument pos:start="99:34" pos:end="99:42"><expr pos:start="99:34" pos:end="99:42"><name pos:start="99:34" pos:end="99:42">listen_id</name></expr></argument>, <argument pos:start="99:45" pos:end="99:54"><expr pos:start="99:45" pos:end="99:54"><name pos:start="99:45" pos:end="99:54"><name pos:start="99:45" pos:end="99:45">e</name><operator pos:start="99:46" pos:end="99:47">-&gt;</operator><name pos:start="99:48" pos:end="99:54">ai_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="101:13" pos:end="105:13"><if pos:start="101:13" pos:end="105:13">if <condition pos:start="101:16" pos:end="101:21">(<expr pos:start="101:17" pos:end="101:20"><operator pos:start="101:17" pos:end="101:17">!</operator><name pos:start="101:18" pos:end="101:20">ret</name></expr>)</condition> <block pos:start="101:23" pos:end="105:13">{<block_content pos:start="103:17" pos:end="103:28">

                <goto pos:start="103:17" pos:end="103:28">goto <name pos:start="103:22" pos:end="103:27">listen</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="111:9" pos:end="111:56"><expr pos:start="111:9" pos:end="111:55"><call pos:start="111:9" pos:end="111:55"><name pos:start="111:9" pos:end="111:13">ERROR</name><argument_list pos:start="111:14" pos:end="111:55">(<argument pos:start="111:15" pos:end="111:18"><expr pos:start="111:15" pos:end="111:18"><name pos:start="111:15" pos:end="111:18">errp</name></expr></argument>, <argument pos:start="111:21" pos:end="111:54"><expr pos:start="111:21" pos:end="111:54"><literal type="string" pos:start="111:21" pos:end="111:54">"Error: could not rdma_bind_addr!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="113:9" pos:end="113:37">goto <name pos:start="113:14" pos:end="113:36">err_dest_init_bind_addr</name>;</goto>

    </block_content>}</block></if> <else pos:start="115:7" pos:end="123:5">else <block pos:start="115:12" pos:end="123:5">{<block_content pos:start="117:9" pos:end="121:37">

        <expr_stmt pos:start="117:9" pos:end="117:62"><expr pos:start="117:9" pos:end="117:61"><call pos:start="117:9" pos:end="117:61"><name pos:start="117:9" pos:end="117:13">ERROR</name><argument_list pos:start="117:14" pos:end="117:61">(<argument pos:start="117:15" pos:end="117:18"><expr pos:start="117:15" pos:end="117:18"><name pos:start="117:15" pos:end="117:18">errp</name></expr></argument>, <argument pos:start="117:21" pos:end="117:60"><expr pos:start="117:21" pos:end="117:60"><literal type="string" pos:start="117:21" pos:end="117:60">"migration host and port not specified!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:22"><expr pos:start="119:9" pos:end="119:21"><name pos:start="119:9" pos:end="119:11">ret</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <operator pos:start="119:15" pos:end="119:15">-</operator><name pos:start="119:16" pos:end="119:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="121:9" pos:end="121:37">goto <name pos:start="121:14" pos:end="121:36">err_dest_init_bind_addr</name>;</goto>

    </block_content>}</block></else></if_stmt>

<label pos:start="125:1" pos:end="125:7"><name pos:start="125:1" pos:end="125:6">listen</name>:</label>



    <expr_stmt pos:start="129:5" pos:end="129:32"><expr pos:start="129:5" pos:end="129:31"><name pos:start="129:5" pos:end="129:19"><name pos:start="129:5" pos:end="129:8">rdma</name><operator pos:start="129:9" pos:end="129:10">-&gt;</operator><name pos:start="129:11" pos:end="129:19">listen_id</name></name> <operator pos:start="129:21" pos:end="129:21">=</operator> <name pos:start="129:23" pos:end="129:31">listen_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:47"><expr pos:start="131:5" pos:end="131:46"><call pos:start="131:5" pos:end="131:46"><name pos:start="131:5" pos:end="131:22">qemu_rdma_dump_gid</name><argument_list pos:start="131:23" pos:end="131:46">(<argument pos:start="131:24" pos:end="131:34"><expr pos:start="131:24" pos:end="131:34"><literal type="string" pos:start="131:24" pos:end="131:34">"dest_init"</literal></expr></argument>, <argument pos:start="131:37" pos:end="131:45"><expr pos:start="131:37" pos:end="131:45"><name pos:start="131:37" pos:end="131:45">listen_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="133:5" pos:end="133:13">return <expr pos:start="133:12" pos:end="133:12"><literal type="number" pos:start="133:12" pos:end="133:12">0</literal></expr>;</return>



<label pos:start="137:1" pos:end="137:24"><name pos:start="137:1" pos:end="137:23">err_dest_init_bind_addr</name>:</label>

    <expr_stmt pos:start="139:5" pos:end="139:31"><expr pos:start="139:5" pos:end="139:30"><call pos:start="139:5" pos:end="139:30"><name pos:start="139:5" pos:end="139:19">rdma_destroy_id</name><argument_list pos:start="139:20" pos:end="139:30">(<argument pos:start="139:21" pos:end="139:29"><expr pos:start="139:21" pos:end="139:29"><name pos:start="139:21" pos:end="139:29">listen_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="141:1" pos:end="141:31"><name pos:start="141:1" pos:end="141:30">err_dest_init_create_listen_id</name>:</label>

    <expr_stmt pos:start="143:5" pos:end="143:46"><expr pos:start="143:5" pos:end="143:45"><call pos:start="143:5" pos:end="143:45"><name pos:start="143:5" pos:end="143:30">rdma_destroy_event_channel</name><argument_list pos:start="143:31" pos:end="143:45">(<argument pos:start="143:32" pos:end="143:44"><expr pos:start="143:32" pos:end="143:44"><name pos:start="143:32" pos:end="143:44"><name pos:start="143:32" pos:end="143:35">rdma</name><operator pos:start="143:36" pos:end="143:37">-&gt;</operator><name pos:start="143:38" pos:end="143:44">channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:25"><expr pos:start="145:5" pos:end="145:24"><name pos:start="145:5" pos:end="145:17"><name pos:start="145:5" pos:end="145:8">rdma</name><operator pos:start="145:9" pos:end="145:10">-&gt;</operator><name pos:start="145:11" pos:end="145:17">channel</name></name> <operator pos:start="145:19" pos:end="145:19">=</operator> <name pos:start="145:21" pos:end="145:24">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:28"><expr pos:start="147:5" pos:end="147:27"><name pos:start="147:5" pos:end="147:21"><name pos:start="147:5" pos:end="147:8">rdma</name><operator pos:start="147:9" pos:end="147:10">-&gt;</operator><name pos:start="147:11" pos:end="147:21">error_state</name></name> <operator pos:start="147:23" pos:end="147:23">=</operator> <name pos:start="147:25" pos:end="147:27">ret</name></expr>;</expr_stmt>

    <return pos:start="149:5" pos:end="149:15">return <expr pos:start="149:12" pos:end="149:14"><name pos:start="149:12" pos:end="149:14">ret</name></expr>;</return>



</block_content>}</block></function>
</unit>
