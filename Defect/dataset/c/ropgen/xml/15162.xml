<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15162.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:16">do_drive_del</name><parameter_list pos:start="1:17" pos:end="1:70">(<parameter pos:start="1:18" pos:end="1:29"><decl pos:start="1:18" pos:end="1:29"><type pos:start="1:18" pos:end="1:29"><name pos:start="1:18" pos:end="1:24">Monitor</name> <modifier pos:start="1:26" pos:end="1:26">*</modifier></type><name pos:start="1:27" pos:end="1:29">mon</name></decl></parameter>, <parameter pos:start="1:32" pos:end="1:49"><decl pos:start="1:32" pos:end="1:49"><type pos:start="1:32" pos:end="1:49"><specifier pos:start="1:32" pos:end="1:36">const</specifier> <name pos:start="1:38" pos:end="1:42">QDict</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">qdict</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:69"><decl pos:start="1:52" pos:end="1:69"><type pos:start="1:52" pos:end="1:69"><name pos:start="1:52" pos:end="1:58">QObject</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier><modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:69">ret_data</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:13">

    <decl_stmt pos:start="5:5" pos:end="5:48"><decl pos:start="5:5" pos:end="5:47"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:18">id</name> <init pos:start="5:20" pos:end="5:47">= <expr pos:start="5:22" pos:end="5:47"><call pos:start="5:22" pos:end="5:47"><name pos:start="5:22" pos:end="5:34">qdict_get_str</name><argument_list pos:start="5:35" pos:end="5:47">(<argument pos:start="5:36" pos:end="5:40"><expr pos:start="5:36" pos:end="5:40"><name pos:start="5:36" pos:end="5:40">qdict</name></expr></argument>, <argument pos:start="5:43" pos:end="5:46"><expr pos:start="5:43" pos:end="5:46"><literal type="string" pos:start="5:43" pos:end="5:46">"id"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">BlockDriverState</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">bs</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:23"><expr pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:6">bs</name> <operator pos:start="11:8" pos:end="11:8">=</operator> <call pos:start="11:10" pos:end="11:22"><name pos:start="11:10" pos:end="11:18">bdrv_find</name><argument_list pos:start="11:19" pos:end="11:22">(<argument pos:start="11:20" pos:end="11:21"><expr pos:start="11:20" pos:end="11:21"><name pos:start="11:20" pos:end="11:21">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:12">(<expr pos:start="13:9" pos:end="13:11"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:11">bs</name></expr>)</condition> <block pos:start="13:14" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:18">

        <expr_stmt pos:start="15:9" pos:end="15:49"><expr pos:start="15:9" pos:end="15:48"><call pos:start="15:9" pos:end="15:48"><name pos:start="15:9" pos:end="15:21">qerror_report</name><argument_list pos:start="15:22" pos:end="15:48">(<argument pos:start="15:23" pos:end="15:43"><expr pos:start="15:23" pos:end="15:43"><name pos:start="15:23" pos:end="15:43">QERR_DEVICE_NOT_FOUND</name></expr></argument>, <argument pos:start="15:46" pos:end="15:47"><expr pos:start="15:46" pos:end="15:47"><name pos:start="15:46" pos:end="15:47">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:18">return <expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:24">(<expr pos:start="21:9" pos:end="21:23"><call pos:start="21:9" pos:end="21:23"><name pos:start="21:9" pos:end="21:19">bdrv_in_use</name><argument_list pos:start="21:20" pos:end="21:23">(<argument pos:start="21:21" pos:end="21:22"><expr pos:start="21:21" pos:end="21:22"><name pos:start="21:21" pos:end="21:22">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:26" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:18">

        <expr_stmt pos:start="23:9" pos:end="23:46"><expr pos:start="23:9" pos:end="23:45"><call pos:start="23:9" pos:end="23:45"><name pos:start="23:9" pos:end="23:21">qerror_report</name><argument_list pos:start="23:22" pos:end="23:45">(<argument pos:start="23:23" pos:end="23:40"><expr pos:start="23:23" pos:end="23:40"><name pos:start="23:23" pos:end="23:40">QERR_DEVICE_IN_USE</name></expr></argument>, <argument pos:start="23:43" pos:end="23:44"><expr pos:start="23:43" pos:end="23:44"><name pos:start="23:43" pos:end="23:44">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:50">/* quiesce block driver; prevent further io */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:21"><expr pos:start="33:5" pos:end="33:20"><call pos:start="33:5" pos:end="33:20"><name pos:start="33:5" pos:end="33:18">qemu_aio_flush</name><argument_list pos:start="33:19" pos:end="33:20">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:19"><expr pos:start="35:5" pos:end="35:18"><call pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:14">bdrv_flush</name><argument_list pos:start="35:15" pos:end="35:18">(<argument pos:start="35:16" pos:end="35:17"><expr pos:start="35:16" pos:end="35:17"><name pos:start="35:16" pos:end="35:17">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:19"><expr pos:start="37:5" pos:end="37:18"><call pos:start="37:5" pos:end="37:18"><name pos:start="37:5" pos:end="37:14">bdrv_close</name><argument_list pos:start="37:15" pos:end="37:18">(<argument pos:start="37:16" pos:end="37:17"><expr pos:start="37:16" pos:end="37:17"><name pos:start="37:16" pos:end="37:17">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="49:7">/* if we have a device attached to this BlockDriverState

     * then we need to make the drive anonymous until the device

     * can be removed.  If this is a drive with no device backing

     * then we can just get rid of the block driver state right here.

     */</comment>

    <if_stmt pos:start="51:5" pos:end="59:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:34">(<expr pos:start="51:9" pos:end="51:33"><call pos:start="51:9" pos:end="51:33"><name pos:start="51:9" pos:end="51:29">bdrv_get_attached_dev</name><argument_list pos:start="51:30" pos:end="51:33">(<argument pos:start="51:31" pos:end="51:32"><expr pos:start="51:31" pos:end="51:32"><name pos:start="51:31" pos:end="51:32">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:36" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:27">

        <expr_stmt pos:start="53:9" pos:end="53:27"><expr pos:start="53:9" pos:end="53:26"><call pos:start="53:9" pos:end="53:26"><name pos:start="53:9" pos:end="53:22">bdrv_make_anon</name><argument_list pos:start="53:23" pos:end="53:26">(<argument pos:start="53:24" pos:end="53:25"><expr pos:start="53:24" pos:end="53:25"><name pos:start="53:24" pos:end="53:25">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="55:7" pos:end="59:5">else <block pos:start="55:12" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:48">

        <expr_stmt pos:start="57:9" pos:end="57:48"><expr pos:start="57:9" pos:end="57:47"><call pos:start="57:9" pos:end="57:47"><name pos:start="57:9" pos:end="57:20">drive_uninit</name><argument_list pos:start="57:21" pos:end="57:47">(<argument pos:start="57:22" pos:end="57:46"><expr pos:start="57:22" pos:end="57:46"><call pos:start="57:22" pos:end="57:46"><name pos:start="57:22" pos:end="57:42">drive_get_by_blockdev</name><argument_list pos:start="57:43" pos:end="57:46">(<argument pos:start="57:44" pos:end="57:45"><expr pos:start="57:44" pos:end="57:45"><name pos:start="57:44" pos:end="57:45">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="63:5" pos:end="63:13">return <expr pos:start="63:12" pos:end="63:12"><literal type="number" pos:start="63:12" pos:end="63:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
