<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/866.c" pos:tabs="8"><function pos:start="1:1" pos:end="78:0"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:35">rgb16to15</name>)<parameter_list pos:start="1:37" pos:end="1:83">(<parameter pos:start="1:38" pos:end="1:55"><decl pos:start="1:38" pos:end="1:55"><type pos:start="1:38" pos:end="1:55"><specifier pos:start="1:38" pos:end="1:42">const</specifier> <name pos:start="1:44" pos:end="1:50">uint8_t</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">src</name></decl></parameter>,<parameter pos:start="1:57" pos:end="1:68"><decl pos:start="1:57" pos:end="1:68"><type pos:start="1:57" pos:end="1:68"><name pos:start="1:57" pos:end="1:63">uint8_t</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:68">dst</name></decl></parameter>,<parameter pos:start="1:70" pos:end="1:82"><decl pos:start="1:70" pos:end="1:82"><type pos:start="1:70" pos:end="1:82"><name pos:start="1:70" pos:end="1:73">long</name></type> <name pos:start="1:75" pos:end="1:82">src_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="78:0">{<block_content pos:start="5:3" pos:end="69:14">

  <decl_stmt pos:start="5:3" pos:end="5:32"><decl pos:start="5:3" pos:end="5:31"><type pos:start="5:3" pos:end="5:25"><specifier pos:start="5:3" pos:end="5:10">register</specifier> <specifier pos:start="5:12" pos:end="5:16">const</specifier> <name pos:start="5:18" pos:end="5:24">uint8_t</name><modifier pos:start="5:25" pos:end="5:25">*</modifier></type> <name pos:start="5:27" pos:end="5:27">s</name><init pos:start="5:28" pos:end="5:31">=<expr pos:start="5:29" pos:end="5:31"><name pos:start="5:29" pos:end="5:31">src</name></expr></init></decl>;</decl_stmt>

  <decl_stmt pos:start="7:3" pos:end="7:26"><decl pos:start="7:3" pos:end="7:25"><type pos:start="7:3" pos:end="7:19"><specifier pos:start="7:3" pos:end="7:10">register</specifier> <name pos:start="7:12" pos:end="7:18">uint8_t</name><modifier pos:start="7:19" pos:end="7:19">*</modifier></type> <name pos:start="7:21" pos:end="7:21">d</name><init pos:start="7:22" pos:end="7:25">=<expr pos:start="7:23" pos:end="7:25"><name pos:start="7:23" pos:end="7:25">dst</name></expr></init></decl>;</decl_stmt>

  <decl_stmt pos:start="9:3" pos:end="9:30"><decl pos:start="9:3" pos:end="9:29"><type pos:start="9:3" pos:end="9:26"><specifier pos:start="9:3" pos:end="9:10">register</specifier> <specifier pos:start="9:12" pos:end="9:16">const</specifier> <name pos:start="9:18" pos:end="9:24">uint8_t</name> <modifier pos:start="9:26" pos:end="9:26">*</modifier></type><name pos:start="9:27" pos:end="9:29">end</name></decl>;</decl_stmt>

  <decl_stmt pos:start="11:3" pos:end="11:24"><decl pos:start="11:3" pos:end="11:23"><type pos:start="11:3" pos:end="11:17"><specifier pos:start="11:3" pos:end="11:7">const</specifier> <name pos:start="11:9" pos:end="11:15">uint8_t</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:23">mm_end</name></decl>;</decl_stmt>

  <expr_stmt pos:start="13:3" pos:end="21:58"><expr pos:start="13:3" pos:end="13:20"><name pos:start="13:3" pos:end="13:5">end</name> <operator pos:start="13:7" pos:end="13:7">=</operator> <name pos:start="13:9" pos:end="13:9">s</name> <operator pos:start="13:11" pos:end="13:11">+</operator> <name pos:start="13:13" pos:end="13:20">src_size</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="15:1" pos:end="15:15">#<cpp:directive pos:start="15:2" pos:end="15:6">ifdef</cpp:directive> <name pos:start="15:8" pos:end="15:15">HAVE_MMX</name></cpp:ifdef>

  <asm pos:start="17:3" pos:end="17:46">__asm __volatile(PREFETCH"	%0"::"m"(*s));</asm>

  <asm pos:start="19:3" pos:end="19:59">__asm __volatile("movq	%0, %%mm7"::"m"(mask15rg));</asm>

  <asm pos:start="21:3" pos:end="21:58">__asm __volatile("movq	%0, %%mm6"::"m"(mask15b));</asm>

  <expr_stmt pos:start="23:3" pos:end="23:20"><expr pos:start="23:3" pos:end="23:19"><name pos:start="23:3" pos:end="23:8">mm_end</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <name pos:start="23:12" pos:end="23:14">end</name> <operator pos:start="23:16" pos:end="23:16">-</operator> <literal type="number" pos:start="23:18" pos:end="23:19">15</literal></expr>;</expr_stmt>

  <while pos:start="25:3" pos:end="65:18">while<condition pos:start="25:8" pos:end="25:17">(<expr pos:start="25:9" pos:end="25:16"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:10">&lt;</operator><name pos:start="25:11" pos:end="25:16">mm_end</name></expr>)</condition>

  <block pos:start="27:3" pos:end="65:17">{<block_content pos:start="31:17" pos:end="65:17">

	<asm pos:start="29:9" pos:end="29:25">__asm __volatile(</asm>

		<expr_stmt pos:start="31:17" pos:end="63:24"><expr pos:start="31:17" pos:end="63:24"><name pos:start="31:17" pos:end="31:24">PREFETCH</name><literal type="string" pos:start="31:25" pos:end="31:41">"	32%1\n\t"</literal>

		<literal type="string" pos:start="33:17" pos:end="33:38">"movq	%1, %%mm0\n\t"</literal>

		<literal type="string" pos:start="35:17" pos:end="35:39">"movq	8%1, %%mm2\n\t"</literal>

		<literal type="string" pos:start="37:17" pos:end="37:41">"movq	%%mm0, %%mm1\n\t"</literal>

		<literal type="string" pos:start="39:17" pos:end="39:41">"movq	%%mm2, %%mm3\n\t"</literal>

		<literal type="string" pos:start="41:17" pos:end="41:38">"psrlq	$1, %%mm0\n\t"</literal>

		<literal type="string" pos:start="43:17" pos:end="43:38">"psrlq	$1, %%mm2\n\t"</literal>

		<literal type="string" pos:start="45:17" pos:end="45:41">"pand	%%mm7, %%mm0\n\t"</literal>

		<literal type="string" pos:start="47:17" pos:end="47:41">"pand	%%mm7, %%mm2\n\t"</literal>

		<literal type="string" pos:start="49:17" pos:end="49:41">"pand	%%mm6, %%mm1\n\t"</literal>

		<literal type="string" pos:start="51:17" pos:end="51:41">"pand	%%mm6, %%mm3\n\t"</literal>

		<literal type="string" pos:start="53:17" pos:end="53:41">"por	%%mm1, %%mm0\n\t"</literal>

		<literal type="string" pos:start="55:17" pos:end="55:41">"por	%%mm3, %%mm2\n\t"</literal>

		<name pos:start="57:17" pos:end="57:22">MOVNTQ</name><literal type="string" pos:start="57:23" pos:end="57:38">"	%%mm0, %0\n\t"</literal>

		<name pos:start="59:17" pos:end="59:22">MOVNTQ</name><literal type="string" pos:start="59:23" pos:end="59:35">"	%%mm2, 8%0"</literal>

		<operator pos:start="61:17" pos:end="61:17">:</operator><literal type="string" pos:start="61:18" pos:end="61:21">"=m"</literal><operator pos:start="61:22" pos:end="61:22">(</operator><operator pos:start="61:23" pos:end="61:23">*</operator><name pos:start="61:24" pos:end="61:24">d</name><operator pos:start="61:25" pos:end="61:25">)</operator>

		<operator pos:start="63:17" pos:end="63:17">:</operator><literal type="string" pos:start="63:18" pos:end="63:20">"m"</literal><operator pos:start="63:21" pos:end="63:21">(</operator><operator pos:start="63:22" pos:end="63:22">*</operator><name pos:start="63:23" pos:end="63:23">s</name><operator pos:start="63:24" pos:end="63:24">)</operator></expr></expr_stmt>

		)</block_content></block><empty_stmt pos:start="65:18" pos:end="65:18">;</empty_stmt></while>

	<expr_stmt pos:start="67:9" pos:end="67:14"><expr pos:start="67:9" pos:end="67:13"><name pos:start="67:9" pos:end="67:9">d</name><operator pos:start="67:10" pos:end="67:11">+=</operator><literal type="number" pos:start="67:12" pos:end="67:13">16</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="69:9" pos:end="69:14"><expr pos:start="69:9" pos:end="69:13"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">+=</operator><literal type="number" pos:start="69:12" pos:end="69:13">16</literal></expr>;</expr_stmt>

  </block_content>}</block></function>

  <asm pos:start="73:3" pos:end="73:38">__asm __volatile(SFENCE:::"memory");</asm>

  <asm pos:start="75:3" pos:end="75:36">__asm __volatile(EMMS:::"memory");</asm>

<cpp:endif pos:start="77:1" pos:end="77:6">#<cpp:directive pos:start="77:2" pos:end="77:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="79:5" pos:end="79:21"><expr pos:start="79:5" pos:end="79:20"><name pos:start="79:5" pos:end="79:10">mm_end</name> <operator pos:start="79:12" pos:end="79:12">=</operator> <name pos:start="79:14" pos:end="79:16">end</name> <operator pos:start="79:18" pos:end="79:18">-</operator> <literal type="number" pos:start="79:20" pos:end="79:20">3</literal></expr>;</expr_stmt>

    <while pos:start="81:5" pos:end="93:5">while<condition pos:start="81:10" pos:end="81:21">(<expr pos:start="81:11" pos:end="81:20"><name pos:start="81:11" pos:end="81:11">s</name> <operator pos:start="81:13" pos:end="81:13">&lt;</operator> <name pos:start="81:15" pos:end="81:20">mm_end</name></expr>)</condition>

    <block pos:start="83:5" pos:end="93:5">{<block_content pos:start="85:9" pos:end="91:13">

	<decl_stmt pos:start="85:9" pos:end="85:46"><decl pos:start="85:9" pos:end="85:45"><type pos:start="85:9" pos:end="85:25"><specifier pos:start="85:9" pos:end="85:16">register</specifier> <name pos:start="85:18" pos:end="85:25">uint32_t</name></type> <name pos:start="85:27" pos:end="85:27">x</name><init pos:start="85:28" pos:end="85:45">= <expr pos:start="85:30" pos:end="85:45"><operator pos:start="85:30" pos:end="85:30">*</operator><operator pos:start="85:31" pos:end="85:31">(</operator><operator pos:start="85:32" pos:end="85:32">(</operator><name pos:start="85:33" pos:end="85:40">uint32_t</name> <operator pos:start="85:42" pos:end="85:42">*</operator><operator pos:start="85:43" pos:end="85:43">)</operator><name pos:start="85:44" pos:end="85:44">s</name><operator pos:start="85:45" pos:end="85:45">)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt pos:start="87:9" pos:end="87:64"><expr pos:start="87:9" pos:end="87:63"><operator pos:start="87:9" pos:end="87:9">*</operator><operator pos:start="87:10" pos:end="87:10">(</operator><operator pos:start="87:11" pos:end="87:11">(</operator><name pos:start="87:12" pos:end="87:19">uint32_t</name> <operator pos:start="87:21" pos:end="87:21">*</operator><operator pos:start="87:22" pos:end="87:22">)</operator><name pos:start="87:23" pos:end="87:23">d</name><operator pos:start="87:24" pos:end="87:24">)</operator> <operator pos:start="87:26" pos:end="87:26">=</operator> <operator pos:start="87:28" pos:end="87:28">(</operator><operator pos:start="87:29" pos:end="87:29">(</operator><name pos:start="87:30" pos:end="87:30">x</name><operator pos:start="87:31" pos:end="87:32">&gt;&gt;</operator><literal type="number" pos:start="87:33" pos:end="87:33">1</literal><operator pos:start="87:34" pos:end="87:34">)</operator><operator pos:start="87:35" pos:end="87:35">&amp;</operator><literal type="number" pos:start="87:36" pos:end="87:45">0x7FE07FE0</literal><operator pos:start="87:46" pos:end="87:46">)</operator> <operator pos:start="87:48" pos:end="87:48">|</operator> <operator pos:start="87:50" pos:end="87:50">(</operator><name pos:start="87:51" pos:end="87:51">x</name><operator pos:start="87:52" pos:end="87:52">&amp;</operator><literal type="number" pos:start="87:53" pos:end="87:62">0x001F001F</literal><operator pos:start="87:63" pos:end="87:63">)</operator></expr>;</expr_stmt>

	<expr_stmt pos:start="89:9" pos:end="89:13"><expr pos:start="89:9" pos:end="89:12"><name pos:start="89:9" pos:end="89:9">s</name><operator pos:start="89:10" pos:end="89:11">+=</operator><literal type="number" pos:start="89:12" pos:end="89:12">4</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="91:9" pos:end="91:13"><expr pos:start="91:9" pos:end="91:12"><name pos:start="91:9" pos:end="91:9">d</name><operator pos:start="91:10" pos:end="91:11">+=</operator><literal type="number" pos:start="91:12" pos:end="91:12">4</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="95:5" pos:end="107:5"><if pos:start="95:5" pos:end="107:5">if<condition pos:start="95:7" pos:end="95:15">(<expr pos:start="95:8" pos:end="95:14"><name pos:start="95:8" pos:end="95:8">s</name> <operator pos:start="95:10" pos:end="95:10">&lt;</operator> <name pos:start="95:12" pos:end="95:14">end</name></expr>)</condition>

    <block pos:start="97:5" pos:end="107:5">{<block_content pos:start="99:9" pos:end="105:13">

	<decl_stmt pos:start="99:9" pos:end="99:46"><decl pos:start="99:9" pos:end="99:45"><type pos:start="99:9" pos:end="99:25"><specifier pos:start="99:9" pos:end="99:16">register</specifier> <name pos:start="99:18" pos:end="99:25">uint16_t</name></type> <name pos:start="99:27" pos:end="99:27">x</name><init pos:start="99:28" pos:end="99:45">= <expr pos:start="99:30" pos:end="99:45"><operator pos:start="99:30" pos:end="99:30">*</operator><operator pos:start="99:31" pos:end="99:31">(</operator><operator pos:start="99:32" pos:end="99:32">(</operator><name pos:start="99:33" pos:end="99:40">uint16_t</name> <operator pos:start="99:42" pos:end="99:42">*</operator><operator pos:start="99:43" pos:end="99:43">)</operator><name pos:start="99:44" pos:end="99:44">s</name><operator pos:start="99:45" pos:end="99:45">)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt pos:start="101:9" pos:end="101:56"><expr pos:start="101:9" pos:end="101:55"><operator pos:start="101:9" pos:end="101:9">*</operator><operator pos:start="101:10" pos:end="101:10">(</operator><operator pos:start="101:11" pos:end="101:11">(</operator><name pos:start="101:12" pos:end="101:19">uint16_t</name> <operator pos:start="101:21" pos:end="101:21">*</operator><operator pos:start="101:22" pos:end="101:22">)</operator><name pos:start="101:23" pos:end="101:23">d</name><operator pos:start="101:24" pos:end="101:24">)</operator> <operator pos:start="101:26" pos:end="101:26">=</operator> <operator pos:start="101:28" pos:end="101:28">(</operator><operator pos:start="101:29" pos:end="101:29">(</operator><name pos:start="101:30" pos:end="101:30">x</name><operator pos:start="101:31" pos:end="101:32">&gt;&gt;</operator><literal type="number" pos:start="101:33" pos:end="101:33">1</literal><operator pos:start="101:34" pos:end="101:34">)</operator><operator pos:start="101:35" pos:end="101:35">&amp;</operator><literal type="number" pos:start="101:36" pos:end="101:41">0x7FE0</literal><operator pos:start="101:42" pos:end="101:42">)</operator> <operator pos:start="101:44" pos:end="101:44">|</operator> <operator pos:start="101:46" pos:end="101:46">(</operator><name pos:start="101:47" pos:end="101:47">x</name><operator pos:start="101:48" pos:end="101:48">&amp;</operator><literal type="number" pos:start="101:49" pos:end="101:54">0x001F</literal><operator pos:start="101:55" pos:end="101:55">)</operator></expr>;</expr_stmt>

	<expr_stmt pos:start="103:9" pos:end="103:13"><expr pos:start="103:9" pos:end="103:12"><name pos:start="103:9" pos:end="103:9">s</name><operator pos:start="103:10" pos:end="103:11">+=</operator><literal type="number" pos:start="103:12" pos:end="103:12">2</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="105:9" pos:end="105:13"><expr pos:start="105:9" pos:end="105:12"><name pos:start="105:9" pos:end="105:9">d</name><operator pos:start="105:10" pos:end="105:11">+=</operator><literal type="number" pos:start="105:12" pos:end="105:12">2</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

}
</unit>
