<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16621.c" pos:tabs="8"><function pos:start="1:1" pos:end="284:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">taihu_405ep_init</name><parameter_list pos:start="1:29" pos:end="11:51">(<parameter pos:start="1:30" pos:end="1:48"><decl pos:start="1:30" pos:end="1:48"><type pos:start="1:30" pos:end="1:48"><name pos:start="1:30" pos:end="1:39">ram_addr_t</name></type> <name pos:start="1:41" pos:end="1:48">ram_size</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:52"><decl pos:start="3:30" pos:end="3:52"><type pos:start="3:30" pos:end="3:52"><specifier pos:start="3:30" pos:end="3:34">const</specifier> <name pos:start="3:36" pos:end="3:39">char</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:52">boot_device</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:56"><decl pos:start="5:30" pos:end="5:56"><type pos:start="5:30" pos:end="5:56"><specifier pos:start="5:30" pos:end="5:34">const</specifier> <name pos:start="5:36" pos:end="5:39">char</name> <modifier pos:start="5:41" pos:end="5:41">*</modifier></type><name pos:start="5:42" pos:end="5:56">kernel_filename</name></decl></parameter>,

                             <parameter pos:start="7:30" pos:end="7:55"><decl pos:start="7:30" pos:end="7:55"><type pos:start="7:30" pos:end="7:55"><specifier pos:start="7:30" pos:end="7:34">const</specifier> <name pos:start="7:36" pos:end="7:39">char</name> <modifier pos:start="7:41" pos:end="7:41">*</modifier></type><name pos:start="7:42" pos:end="7:55">kernel_cmdline</name></decl></parameter>,

                             <parameter pos:start="9:30" pos:end="9:56"><decl pos:start="9:30" pos:end="9:56"><type pos:start="9:30" pos:end="9:56"><specifier pos:start="9:30" pos:end="9:34">const</specifier> <name pos:start="9:36" pos:end="9:39">char</name> <modifier pos:start="9:41" pos:end="9:41">*</modifier></type><name pos:start="9:42" pos:end="9:56">initrd_filename</name></decl></parameter>,

                             <parameter pos:start="11:30" pos:end="11:50"><decl pos:start="11:30" pos:end="11:50"><type pos:start="11:30" pos:end="11:50"><specifier pos:start="11:30" pos:end="11:34">const</specifier> <name pos:start="11:36" pos:end="11:39">char</name> <modifier pos:start="11:41" pos:end="11:41">*</modifier></type><name pos:start="11:42" pos:end="11:50">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="284:1">{<block_content pos:start="15:5" pos:end="283:0">

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">qemu_irq</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:17">pic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:14">ram_addr_t</name></type> <name pos:start="19:16" pos:end="19:26">bios_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:50"><decl pos:start="21:5" pos:end="21:35"><type pos:start="21:5" pos:end="21:22"><name pos:start="21:5" pos:end="21:22">target_phys_addr_t</name></type> <name pos:start="21:24" pos:end="21:35"><name pos:start="21:24" pos:end="21:32">ram_bases</name><index pos:start="21:33" pos:end="21:35">[<expr pos:start="21:34" pos:end="21:34"><literal type="number" pos:start="21:34" pos:end="21:34">2</literal></expr>]</index></name></decl>, <decl pos:start="21:38" pos:end="21:49"><type ref="prev" pos:start="21:5" pos:end="21:22"/><name pos:start="21:38" pos:end="21:49"><name pos:start="21:38" pos:end="21:46">ram_sizes</name><index pos:start="21:47" pos:end="21:49">[<expr pos:start="21:48" pos:end="21:48"><literal type="number" pos:start="21:48" pos:end="21:48">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">long</name></type> <name pos:start="23:10" pos:end="23:18">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:42"><decl pos:start="25:5" pos:end="25:28"><type pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:16">target_ulong</name></type> <name pos:start="25:18" pos:end="25:28">kernel_base</name></decl>, <decl pos:start="25:31" pos:end="25:41"><type ref="prev" pos:start="25:5" pos:end="25:16"/><name pos:start="25:31" pos:end="25:41">initrd_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:34"><decl pos:start="27:5" pos:end="27:20"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">long</name></type> <name pos:start="27:10" pos:end="27:20">kernel_size</name></decl>, <decl pos:start="27:23" pos:end="27:33"><type ref="prev" pos:start="27:5" pos:end="27:8"/><name pos:start="27:23" pos:end="27:33">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:19"><decl pos:start="29:5" pos:end="29:18"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:18">linux_boot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:27"><decl pos:start="31:5" pos:end="31:14"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:14">fl_idx</name></decl>, <decl pos:start="31:17" pos:end="31:26"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:17" pos:end="31:26">fl_sectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:21"><decl pos:start="33:5" pos:end="33:20"><type pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:13">DriveInfo</name> <modifier pos:start="33:15" pos:end="33:15">*</modifier></type><name pos:start="33:16" pos:end="33:20">dinfo</name></decl>;</decl_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:68">/* RAM is soldered to the board so the size cannot be changed */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:73"><expr pos:start="39:5" pos:end="39:72"><name pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:13">ram_bases</name><index pos:start="39:14" pos:end="39:16">[<expr pos:start="39:15" pos:end="39:15"><literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr>]</index></name> <operator pos:start="39:18" pos:end="39:18">=</operator> <call pos:start="39:20" pos:end="39:72"><name pos:start="39:20" pos:end="39:33">qemu_ram_alloc</name><argument_list pos:start="39:34" pos:end="39:72">(<argument pos:start="39:35" pos:end="39:38"><expr pos:start="39:35" pos:end="39:38"><name pos:start="39:35" pos:end="39:38">NULL</name></expr></argument>, <argument pos:start="39:41" pos:end="39:59"><expr pos:start="39:41" pos:end="39:59"><literal type="string" pos:start="39:41" pos:end="39:59">"taihu_405ep.ram-0"</literal></expr></argument>, <argument pos:start="39:62" pos:end="39:71"><expr pos:start="39:62" pos:end="39:71"><literal type="number" pos:start="39:62" pos:end="39:71">0x04000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:30"><expr pos:start="41:5" pos:end="41:29"><name pos:start="41:5" pos:end="41:16"><name pos:start="41:5" pos:end="41:13">ram_sizes</name><index pos:start="41:14" pos:end="41:16">[<expr pos:start="41:15" pos:end="41:15"><literal type="number" pos:start="41:15" pos:end="41:15">0</literal></expr>]</index></name> <operator pos:start="41:18" pos:end="41:18">=</operator> <literal type="number" pos:start="41:20" pos:end="41:29">0x04000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:73"><expr pos:start="43:5" pos:end="43:72"><name pos:start="43:5" pos:end="43:16"><name pos:start="43:5" pos:end="43:13">ram_bases</name><index pos:start="43:14" pos:end="43:16">[<expr pos:start="43:15" pos:end="43:15"><literal type="number" pos:start="43:15" pos:end="43:15">1</literal></expr>]</index></name> <operator pos:start="43:18" pos:end="43:18">=</operator> <call pos:start="43:20" pos:end="43:72"><name pos:start="43:20" pos:end="43:33">qemu_ram_alloc</name><argument_list pos:start="43:34" pos:end="43:72">(<argument pos:start="43:35" pos:end="43:38"><expr pos:start="43:35" pos:end="43:38"><name pos:start="43:35" pos:end="43:38">NULL</name></expr></argument>, <argument pos:start="43:41" pos:end="43:59"><expr pos:start="43:41" pos:end="43:59"><literal type="string" pos:start="43:41" pos:end="43:59">"taihu_405ep.ram-1"</literal></expr></argument>, <argument pos:start="43:62" pos:end="43:71"><expr pos:start="43:62" pos:end="43:71"><literal type="number" pos:start="43:62" pos:end="43:71">0x04000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:30"><expr pos:start="45:5" pos:end="45:29"><name pos:start="45:5" pos:end="45:16"><name pos:start="45:5" pos:end="45:13">ram_sizes</name><index pos:start="45:14" pos:end="45:16">[<expr pos:start="45:15" pos:end="45:15"><literal type="number" pos:start="45:15" pos:end="45:15">1</literal></expr>]</index></name> <operator pos:start="45:18" pos:end="45:18">=</operator> <literal type="number" pos:start="45:20" pos:end="45:29">0x04000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="50:0"><expr pos:start="47:5" pos:end="47:25"><name pos:start="47:5" pos:end="47:12">ram_size</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <literal type="number" pos:start="47:16" pos:end="47:25">0x08000000</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="49:1" pos:end="49:23">#<cpp:directive pos:start="49:2" pos:end="49:6">ifdef</cpp:directive> <name pos:start="49:8" pos:end="49:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <expr_stmt pos:start="51:5" pos:end="54:0"><expr pos:start="51:5" pos:end="51:42"><call pos:start="51:5" pos:end="51:42"><name pos:start="51:5" pos:end="51:10">printf</name><argument_list pos:start="51:11" pos:end="51:42">(<argument pos:start="51:12" pos:end="51:31"><expr pos:start="51:12" pos:end="51:31"><literal type="string" pos:start="51:12" pos:end="51:31">"%s: register cpu\n"</literal></expr></argument>, <argument pos:start="51:34" pos:end="51:41"><expr pos:start="51:34" pos:end="51:41"><name pos:start="51:34" pos:end="51:41">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="55:5" pos:end="62:0"><expr pos:start="55:5" pos:end="57:50"><call pos:start="55:5" pos:end="57:50"><name pos:start="55:5" pos:end="55:17">ppc405ep_init</name><argument_list pos:start="55:18" pos:end="57:50">(<argument pos:start="55:19" pos:end="55:27"><expr pos:start="55:19" pos:end="55:27"><name pos:start="55:19" pos:end="55:27">ram_bases</name></expr></argument>, <argument pos:start="55:30" pos:end="55:38"><expr pos:start="55:30" pos:end="55:38"><name pos:start="55:30" pos:end="55:38">ram_sizes</name></expr></argument>, <argument pos:start="55:41" pos:end="55:48"><expr pos:start="55:41" pos:end="55:48"><literal type="number" pos:start="55:41" pos:end="55:48">33333333</literal></expr></argument>, <argument pos:start="55:51" pos:end="55:54"><expr pos:start="55:51" pos:end="55:54"><operator pos:start="55:51" pos:end="55:51">&amp;</operator><name pos:start="55:52" pos:end="55:54">pic</name></expr></argument>,

                  <argument pos:start="57:19" pos:end="57:49"><expr pos:start="57:19" pos:end="57:49"><ternary pos:start="57:19" pos:end="57:49"><condition pos:start="57:19" pos:end="57:43"><expr pos:start="57:19" pos:end="57:41"><name pos:start="57:19" pos:end="57:33">kernel_filename</name> <operator pos:start="57:35" pos:end="57:36">==</operator> <name pos:start="57:38" pos:end="57:41">NULL</name></expr> ?</condition><then pos:start="57:45" pos:end="57:45"> <expr pos:start="57:45" pos:end="57:45"><literal type="number" pos:start="57:45" pos:end="57:45">0</literal></expr> </then><else pos:start="57:47" pos:end="57:49">: <expr pos:start="57:49" pos:end="57:49"><literal type="number" pos:start="57:49" pos:end="57:49">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="59:5" pos:end="59:32">/* allocate and load BIOS */</comment>

<cpp:ifdef pos:start="61:1" pos:end="61:23">#<cpp:directive pos:start="61:2" pos:end="61:6">ifdef</cpp:directive> <name pos:start="61:8" pos:end="61:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <expr_stmt pos:start="63:5" pos:end="66:0"><expr pos:start="63:5" pos:end="63:43"><call pos:start="63:5" pos:end="63:43"><name pos:start="63:5" pos:end="63:10">printf</name><argument_list pos:start="63:11" pos:end="63:43">(<argument pos:start="63:12" pos:end="63:32"><expr pos:start="63:12" pos:end="63:32"><literal type="string" pos:start="63:12" pos:end="63:32">"%s: register BIOS\n"</literal></expr></argument>, <argument pos:start="63:35" pos:end="63:42"><expr pos:start="63:35" pos:end="63:42"><name pos:start="63:35" pos:end="63:42">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="67:5" pos:end="70:0"><expr pos:start="67:5" pos:end="67:14"><name pos:start="67:5" pos:end="67:10">fl_idx</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <literal type="number" pos:start="67:14" pos:end="67:14">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="69:1" pos:end="69:27">#<cpp:directive pos:start="69:2" pos:end="69:3">if</cpp:directive> <expr pos:start="69:5" pos:end="69:27"><call pos:start="69:5" pos:end="69:27"><name pos:start="69:5" pos:end="69:11">defined</name><argument_list pos:start="69:12" pos:end="69:27">(<argument pos:start="69:13" pos:end="69:26"><expr pos:start="69:13" pos:end="69:26"><name pos:start="69:13" pos:end="69:26">USE_FLASH_BIOS</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="71:5" pos:end="71:44"><expr pos:start="71:5" pos:end="71:43"><name pos:start="71:5" pos:end="71:9">dinfo</name> <operator pos:start="71:11" pos:end="71:11">=</operator> <call pos:start="71:13" pos:end="71:43"><name pos:start="71:13" pos:end="71:21">drive_get</name><argument_list pos:start="71:22" pos:end="71:43">(<argument pos:start="71:23" pos:end="71:31"><expr pos:start="71:23" pos:end="71:31"><name pos:start="71:23" pos:end="71:31">IF_PFLASH</name></expr></argument>, <argument pos:start="71:34" pos:end="71:34"><expr pos:start="71:34" pos:end="71:34"><literal type="number" pos:start="71:34" pos:end="71:34">0</literal></expr></argument>, <argument pos:start="71:37" pos:end="71:42"><expr pos:start="71:37" pos:end="71:42"><name pos:start="71:37" pos:end="71:42">fl_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="154:5"><if pos:start="73:5" pos:end="107:5">if <condition pos:start="73:8" pos:end="73:14">(<expr pos:start="73:9" pos:end="73:13"><name pos:start="73:9" pos:end="73:13">dinfo</name></expr>)</condition> <block pos:start="73:16" pos:end="107:5">{<block_content pos:start="75:9" pos:end="105:17">

        <expr_stmt pos:start="75:9" pos:end="75:48"><expr pos:start="75:9" pos:end="75:47"><name pos:start="75:9" pos:end="75:17">bios_size</name> <operator pos:start="75:19" pos:end="75:19">=</operator> <call pos:start="75:21" pos:end="75:47"><name pos:start="75:21" pos:end="75:34">bdrv_getlength</name><argument_list pos:start="75:35" pos:end="75:47">(<argument pos:start="75:36" pos:end="75:46"><expr pos:start="75:36" pos:end="75:46"><name pos:start="75:36" pos:end="75:46"><name pos:start="75:36" pos:end="75:40">dinfo</name><operator pos:start="75:41" pos:end="75:42">-&gt;</operator><name pos:start="75:43" pos:end="75:46">bdrv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="77:9" pos:end="77:48">/* XXX: should check that size is 2MB */</comment>

        <comment type="line" pos:start="79:9" pos:end="79:46">//        bios_size = 2 * 1024 * 1024;</comment>

        <expr_stmt pos:start="81:9" pos:end="81:47"><expr pos:start="81:9" pos:end="81:46"><name pos:start="81:9" pos:end="81:18">fl_sectors</name> <operator pos:start="81:20" pos:end="81:20">=</operator> <operator pos:start="81:22" pos:end="81:22">(</operator><name pos:start="81:23" pos:end="81:31">bios_size</name> <operator pos:start="81:33" pos:end="81:33">+</operator> <literal type="number" pos:start="81:35" pos:end="81:39">65535</literal><operator pos:start="81:40" pos:end="81:40">)</operator> <operator pos:start="81:42" pos:end="81:43">&gt;&gt;</operator> <literal type="number" pos:start="81:45" pos:end="81:46">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="86:0"><expr pos:start="83:9" pos:end="83:73"><name pos:start="83:9" pos:end="83:19">bios_offset</name> <operator pos:start="83:21" pos:end="83:21">=</operator> <call pos:start="83:23" pos:end="83:73"><name pos:start="83:23" pos:end="83:36">qemu_ram_alloc</name><argument_list pos:start="83:37" pos:end="83:73">(<argument pos:start="83:38" pos:end="83:41"><expr pos:start="83:38" pos:end="83:41"><name pos:start="83:38" pos:end="83:41">NULL</name></expr></argument>, <argument pos:start="83:44" pos:end="83:61"><expr pos:start="83:44" pos:end="83:61"><literal type="string" pos:start="83:44" pos:end="83:61">"taihu_405ep.bios"</literal></expr></argument>, <argument pos:start="83:64" pos:end="83:72"><expr pos:start="83:64" pos:end="83:72"><name pos:start="83:64" pos:end="83:72">bios_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="85:1" pos:end="85:23">#<cpp:directive pos:start="85:2" pos:end="85:6">ifdef</cpp:directive> <name pos:start="85:8" pos:end="85:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

        <expr_stmt pos:start="87:9" pos:end="96:0"><expr pos:start="87:9" pos:end="93:61"><call pos:start="87:9" pos:end="93:61"><name pos:start="87:9" pos:end="87:14">printf</name><argument_list pos:start="87:15" pos:end="93:61">(<argument pos:start="87:16" pos:end="89:52"><expr pos:start="87:16" pos:end="89:52"><literal type="string" pos:start="87:16" pos:end="87:52">"Register parallel flash %d size %lx"</literal>

               <literal type="string" pos:start="89:16" pos:end="89:52">" at offset %08lx addr %lx '%s' %d\n"</literal></expr></argument>,

               <argument pos:start="91:16" pos:end="91:21"><expr pos:start="91:16" pos:end="91:21"><name pos:start="91:16" pos:end="91:21">fl_idx</name></expr></argument>, <argument pos:start="91:24" pos:end="91:32"><expr pos:start="91:24" pos:end="91:32"><name pos:start="91:24" pos:end="91:32">bios_size</name></expr></argument>, <argument pos:start="91:35" pos:end="91:45"><expr pos:start="91:35" pos:end="91:45"><name pos:start="91:35" pos:end="91:45">bios_offset</name></expr></argument>, <argument pos:start="91:48" pos:end="91:57"><expr pos:start="91:48" pos:end="91:57"><operator pos:start="91:48" pos:end="91:48">-</operator><name pos:start="91:49" pos:end="91:57">bios_size</name></expr></argument>,

               <argument pos:start="93:16" pos:end="93:48"><expr pos:start="93:16" pos:end="93:48"><call pos:start="93:16" pos:end="93:48"><name pos:start="93:16" pos:end="93:35">bdrv_get_device_name</name><argument_list pos:start="93:36" pos:end="93:48">(<argument pos:start="93:37" pos:end="93:47"><expr pos:start="93:37" pos:end="93:47"><name pos:start="93:37" pos:end="93:47"><name pos:start="93:37" pos:end="93:41">dinfo</name><operator pos:start="93:42" pos:end="93:43">-&gt;</operator><name pos:start="93:44" pos:end="93:47">bdrv</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="93:51" pos:end="93:60"><expr pos:start="93:51" pos:end="93:60"><name pos:start="93:51" pos:end="93:60">fl_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="95:1" pos:end="95:6">#<cpp:directive pos:start="95:2" pos:end="95:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="97:9" pos:end="103:33"><expr pos:start="97:9" pos:end="103:32"><call pos:start="97:9" pos:end="103:32"><name pos:start="97:9" pos:end="97:29">pflash_cfi02_register</name><argument_list pos:start="97:30" pos:end="103:32">(<argument pos:start="97:31" pos:end="97:52"><expr pos:start="97:31" pos:end="97:52"><operator pos:start="97:31" pos:end="97:31">(</operator><name pos:start="97:32" pos:end="97:39">uint32_t</name><operator pos:start="97:40" pos:end="97:40">)</operator><operator pos:start="97:41" pos:end="97:41">(</operator><operator pos:start="97:42" pos:end="97:42">-</operator><name pos:start="97:43" pos:end="97:51">bios_size</name><operator pos:start="97:52" pos:end="97:52">)</operator></expr></argument>, <argument pos:start="97:55" pos:end="97:65"><expr pos:start="97:55" pos:end="97:65"><name pos:start="97:55" pos:end="97:65">bios_offset</name></expr></argument>,

                              <argument pos:start="99:31" pos:end="99:41"><expr pos:start="99:31" pos:end="99:41"><name pos:start="99:31" pos:end="99:41"><name pos:start="99:31" pos:end="99:35">dinfo</name><operator pos:start="99:36" pos:end="99:37">-&gt;</operator><name pos:start="99:38" pos:end="99:41">bdrv</name></name></expr></argument>, <argument pos:start="99:44" pos:end="99:48"><expr pos:start="99:44" pos:end="99:48"><literal type="number" pos:start="99:44" pos:end="99:48">65536</literal></expr></argument>, <argument pos:start="99:51" pos:end="99:60"><expr pos:start="99:51" pos:end="99:60"><name pos:start="99:51" pos:end="99:60">fl_sectors</name></expr></argument>, <argument pos:start="99:63" pos:end="99:63"><expr pos:start="99:63" pos:end="99:63"><literal type="number" pos:start="99:63" pos:end="99:63">1</literal></expr></argument>,

                              <argument pos:start="101:31" pos:end="101:31"><expr pos:start="101:31" pos:end="101:31"><literal type="number" pos:start="101:31" pos:end="101:31">4</literal></expr></argument>, <argument pos:start="101:34" pos:end="101:39"><expr pos:start="101:34" pos:end="101:39"><literal type="number" pos:start="101:34" pos:end="101:39">0x0001</literal></expr></argument>, <argument pos:start="101:42" pos:end="101:47"><expr pos:start="101:42" pos:end="101:47"><literal type="number" pos:start="101:42" pos:end="101:47">0x22DA</literal></expr></argument>, <argument pos:start="101:50" pos:end="101:55"><expr pos:start="101:50" pos:end="101:55"><literal type="number" pos:start="101:50" pos:end="101:55">0x0000</literal></expr></argument>, <argument pos:start="101:58" pos:end="101:63"><expr pos:start="101:58" pos:end="101:63"><literal type="number" pos:start="101:58" pos:end="101:63">0x0000</literal></expr></argument>, <argument pos:start="101:66" pos:end="101:70"><expr pos:start="101:66" pos:end="101:70"><literal type="number" pos:start="101:66" pos:end="101:70">0x555</literal></expr></argument>, <argument pos:start="101:73" pos:end="101:77"><expr pos:start="101:73" pos:end="101:77"><literal type="number" pos:start="101:73" pos:end="101:77">0x2AA</literal></expr></argument>,

                              <argument pos:start="103:31" pos:end="103:31"><expr pos:start="103:31" pos:end="103:31"><literal type="number" pos:start="103:31" pos:end="103:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:17"><expr pos:start="105:9" pos:end="105:16"><name pos:start="105:9" pos:end="105:14">fl_idx</name><operator pos:start="105:15" pos:end="105:16">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="107:7" pos:end="154:5">else

<cpp:endif pos:start="109:1" pos:end="109:6">#<cpp:directive pos:start="109:2" pos:end="109:6">endif</cpp:directive></cpp:endif>

    <block pos:start="111:5" pos:end="154:5">{<block_content pos:start="115:9" pos:end="152:74">

<cpp:ifdef pos:start="113:1" pos:end="113:23">#<cpp:directive pos:start="113:2" pos:end="113:6">ifdef</cpp:directive> <name pos:start="113:8" pos:end="113:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

        <expr_stmt pos:start="115:9" pos:end="118:0"><expr pos:start="115:9" pos:end="115:39"><call pos:start="115:9" pos:end="115:39"><name pos:start="115:9" pos:end="115:14">printf</name><argument_list pos:start="115:15" pos:end="115:39">(<argument pos:start="115:16" pos:end="115:38"><expr pos:start="115:16" pos:end="115:38"><literal type="string" pos:start="115:16" pos:end="115:38">"Load BIOS from file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="117:1" pos:end="117:6">#<cpp:directive pos:start="117:2" pos:end="117:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="119:9" pos:end="121:38"><if pos:start="119:9" pos:end="121:38">if <condition pos:start="119:12" pos:end="119:30">(<expr pos:start="119:13" pos:end="119:29"><name pos:start="119:13" pos:end="119:21">bios_name</name> <operator pos:start="119:23" pos:end="119:24">==</operator> <name pos:start="119:26" pos:end="119:29">NULL</name></expr>)</condition><block type="pseudo" pos:start="121:13" pos:end="121:38"><block_content pos:start="121:13" pos:end="121:38">

            <expr_stmt pos:start="121:13" pos:end="121:38"><expr pos:start="121:13" pos:end="121:37"><name pos:start="121:13" pos:end="121:21">bios_name</name> <operator pos:start="121:23" pos:end="121:23">=</operator> <name pos:start="121:25" pos:end="121:37">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:74"><expr pos:start="123:9" pos:end="123:73"><name pos:start="123:9" pos:end="123:19">bios_offset</name> <operator pos:start="123:21" pos:end="123:21">=</operator> <call pos:start="123:23" pos:end="123:73"><name pos:start="123:23" pos:end="123:36">qemu_ram_alloc</name><argument_list pos:start="123:37" pos:end="123:73">(<argument pos:start="123:38" pos:end="123:41"><expr pos:start="123:38" pos:end="123:41"><name pos:start="123:38" pos:end="123:41">NULL</name></expr></argument>, <argument pos:start="123:44" pos:end="123:61"><expr pos:start="123:44" pos:end="123:61"><literal type="string" pos:start="123:44" pos:end="123:61">"taihu_405ep.bios"</literal></expr></argument>, <argument pos:start="123:64" pos:end="123:72"><expr pos:start="123:64" pos:end="123:72"><name pos:start="123:64" pos:end="123:72">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:66"><expr pos:start="125:9" pos:end="125:65"><name pos:start="125:9" pos:end="125:16">filename</name> <operator pos:start="125:18" pos:end="125:18">=</operator> <call pos:start="125:20" pos:end="125:65"><name pos:start="125:20" pos:end="125:33">qemu_find_file</name><argument_list pos:start="125:34" pos:end="125:65">(<argument pos:start="125:35" pos:end="125:53"><expr pos:start="125:35" pos:end="125:53"><name pos:start="125:35" pos:end="125:53">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="125:56" pos:end="125:64"><expr pos:start="125:56" pos:end="125:64"><name pos:start="125:56" pos:end="125:64">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="127:9" pos:end="136:9"><if pos:start="127:9" pos:end="132:9">if <condition pos:start="127:12" pos:end="127:21">(<expr pos:start="127:13" pos:end="127:20"><name pos:start="127:13" pos:end="127:20">filename</name></expr>)</condition> <block pos:start="127:23" pos:end="132:9">{<block_content pos:start="129:13" pos:end="129:76">

            <expr_stmt pos:start="129:13" pos:end="129:76"><expr pos:start="129:13" pos:end="129:75"><name pos:start="129:13" pos:end="129:21">bios_size</name> <operator pos:start="129:23" pos:end="129:23">=</operator> <call pos:start="129:25" pos:end="129:75"><name pos:start="129:25" pos:end="129:34">load_image</name><argument_list pos:start="129:35" pos:end="129:75">(<argument pos:start="129:36" pos:end="129:43"><expr pos:start="129:36" pos:end="129:43"><name pos:start="129:36" pos:end="129:43">filename</name></expr></argument>, <argument pos:start="129:46" pos:end="129:74"><expr pos:start="129:46" pos:end="129:74"><call pos:start="129:46" pos:end="129:74"><name pos:start="129:46" pos:end="129:61">qemu_get_ram_ptr</name><argument_list pos:start="129:62" pos:end="129:74">(<argument pos:start="129:63" pos:end="129:73"><expr pos:start="129:63" pos:end="129:73"><name pos:start="129:63" pos:end="129:73">bios_offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        </block_content>}</block></if> <else pos:start="132:11" pos:end="136:9">else <block pos:start="132:16" pos:end="136:9">{<block_content pos:start="134:13" pos:end="134:27">

            <expr_stmt pos:start="134:13" pos:end="134:27"><expr pos:start="134:13" pos:end="134:26"><name pos:start="134:13" pos:end="134:21">bios_size</name> <operator pos:start="134:23" pos:end="134:23">=</operator> <operator pos:start="134:25" pos:end="134:25">-</operator><literal type="number" pos:start="134:26" pos:end="134:26">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="138:9" pos:end="146:9"><if pos:start="138:9" pos:end="146:9">if <condition pos:start="138:12" pos:end="138:51">(<expr pos:start="138:13" pos:end="138:50"><name pos:start="138:13" pos:end="138:40"><name pos:start="138:13" pos:end="138:21">bios_size</name> <argument_list type="generic" pos:start="138:23" pos:end="138:40">&lt; <argument pos:start="138:25" pos:end="138:38"><expr pos:start="138:25" pos:end="138:38"><literal type="number" pos:start="138:25" pos:end="138:25">0</literal> <operator pos:start="138:27" pos:end="138:28">||</operator> <name pos:start="138:30" pos:end="138:38">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="138:42" pos:end="138:50">BIOS_SIZE</name></expr>)</condition> <block pos:start="138:53" pos:end="146:9">{<block_content pos:start="140:13" pos:end="144:20">

            <expr_stmt pos:start="140:13" pos:end="142:31"><expr pos:start="140:13" pos:end="142:30"><call pos:start="140:13" pos:end="142:30"><name pos:start="140:13" pos:end="140:19">fprintf</name><argument_list pos:start="140:20" pos:end="142:30">(<argument pos:start="140:21" pos:end="140:26"><expr pos:start="140:21" pos:end="140:26"><name pos:start="140:21" pos:end="140:26">stderr</name></expr></argument>, <argument pos:start="140:29" pos:end="140:70"><expr pos:start="140:29" pos:end="140:70"><literal type="string" pos:start="140:29" pos:end="140:70">"qemu: could not load PowerPC bios '%s'\n"</literal></expr></argument>,

                    <argument pos:start="142:21" pos:end="142:29"><expr pos:start="142:21" pos:end="142:29"><name pos:start="142:21" pos:end="142:29">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="144:13" pos:end="144:20"><expr pos:start="144:13" pos:end="144:19"><call pos:start="144:13" pos:end="144:19"><name pos:start="144:13" pos:end="144:16">exit</name><argument_list pos:start="144:17" pos:end="144:19">(<argument pos:start="144:18" pos:end="144:18"><expr pos:start="144:18" pos:end="144:18"><literal type="number" pos:start="144:18" pos:end="144:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="148:9" pos:end="148:49"><expr pos:start="148:9" pos:end="148:48"><name pos:start="148:9" pos:end="148:17">bios_size</name> <operator pos:start="148:19" pos:end="148:19">=</operator> <operator pos:start="148:21" pos:end="148:21">(</operator><name pos:start="148:22" pos:end="148:30">bios_size</name> <operator pos:start="148:32" pos:end="148:32">+</operator> <literal type="number" pos:start="148:34" pos:end="148:38">0xfff</literal><operator pos:start="148:39" pos:end="148:39">)</operator> <operator pos:start="148:41" pos:end="148:41">&amp;</operator> <operator pos:start="148:43" pos:end="148:43">~</operator><literal type="number" pos:start="148:44" pos:end="148:48">0xfff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="150:9" pos:end="152:74"><expr pos:start="150:9" pos:end="152:73"><call pos:start="150:9" pos:end="152:73"><name pos:start="150:9" pos:end="150:36">cpu_register_physical_memory</name><argument_list pos:start="150:37" pos:end="152:73">(<argument pos:start="150:38" pos:end="150:59"><expr pos:start="150:38" pos:end="150:59"><operator pos:start="150:38" pos:end="150:38">(</operator><name pos:start="150:39" pos:end="150:46">uint32_t</name><operator pos:start="150:47" pos:end="150:47">)</operator><operator pos:start="150:48" pos:end="150:48">(</operator><operator pos:start="150:49" pos:end="150:49">-</operator><name pos:start="150:50" pos:end="150:58">bios_size</name><operator pos:start="150:59" pos:end="150:59">)</operator></expr></argument>,

                                     <argument pos:start="152:38" pos:end="152:46"><expr pos:start="152:38" pos:end="152:46"><name pos:start="152:38" pos:end="152:46">bios_size</name></expr></argument>, <argument pos:start="152:49" pos:end="152:72"><expr pos:start="152:49" pos:end="152:72"><name pos:start="152:49" pos:end="152:59">bios_offset</name> <operator pos:start="152:61" pos:end="152:61">|</operator> <name pos:start="152:63" pos:end="152:72">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="156:5" pos:end="156:30">/* Register Linux flash */</comment>

    <expr_stmt pos:start="158:5" pos:end="158:44"><expr pos:start="158:5" pos:end="158:43"><name pos:start="158:5" pos:end="158:9">dinfo</name> <operator pos:start="158:11" pos:end="158:11">=</operator> <call pos:start="158:13" pos:end="158:43"><name pos:start="158:13" pos:end="158:21">drive_get</name><argument_list pos:start="158:22" pos:end="158:43">(<argument pos:start="158:23" pos:end="158:31"><expr pos:start="158:23" pos:end="158:31"><name pos:start="158:23" pos:end="158:31">IF_PFLASH</name></expr></argument>, <argument pos:start="158:34" pos:end="158:34"><expr pos:start="158:34" pos:end="158:34"><literal type="number" pos:start="158:34" pos:end="158:34">0</literal></expr></argument>, <argument pos:start="158:37" pos:end="158:42"><expr pos:start="158:37" pos:end="158:42"><name pos:start="158:37" pos:end="158:42">fl_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="160:5" pos:end="199:0"><if pos:start="160:5" pos:end="199:0">if <condition pos:start="160:8" pos:end="160:14">(<expr pos:start="160:9" pos:end="160:13"><name pos:start="160:9" pos:end="160:13">dinfo</name></expr>)</condition> <block pos:start="160:16" pos:end="199:0">{<block_content pos:start="162:9" pos:end="192:17">

        <expr_stmt pos:start="162:9" pos:end="162:48"><expr pos:start="162:9" pos:end="162:47"><name pos:start="162:9" pos:end="162:17">bios_size</name> <operator pos:start="162:19" pos:end="162:19">=</operator> <call pos:start="162:21" pos:end="162:47"><name pos:start="162:21" pos:end="162:34">bdrv_getlength</name><argument_list pos:start="162:35" pos:end="162:47">(<argument pos:start="162:36" pos:end="162:46"><expr pos:start="162:36" pos:end="162:46"><name pos:start="162:36" pos:end="162:46"><name pos:start="162:36" pos:end="162:40">dinfo</name><operator pos:start="162:41" pos:end="162:42">-&gt;</operator><name pos:start="162:43" pos:end="162:46">bdrv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="164:9" pos:end="164:49">/* XXX: should check that size is 32MB */</comment>

        <expr_stmt pos:start="166:9" pos:end="166:37"><expr pos:start="166:9" pos:end="166:36"><name pos:start="166:9" pos:end="166:17">bios_size</name> <operator pos:start="166:19" pos:end="166:19">=</operator> <literal type="number" pos:start="166:21" pos:end="166:22">32</literal> <operator pos:start="166:24" pos:end="166:24">*</operator> <literal type="number" pos:start="166:26" pos:end="166:29">1024</literal> <operator pos:start="166:31" pos:end="166:31">*</operator> <literal type="number" pos:start="166:33" pos:end="166:36">1024</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="168:9" pos:end="171:0"><expr pos:start="168:9" pos:end="168:46"><name pos:start="168:9" pos:end="168:18">fl_sectors</name> <operator pos:start="168:20" pos:end="168:20">=</operator> <operator pos:start="168:22" pos:end="168:22">(</operator><name pos:start="168:23" pos:end="168:31">bios_size</name> <operator pos:start="168:33" pos:end="168:33">+</operator> <literal type="number" pos:start="168:35" pos:end="168:39">65535</literal><operator pos:start="168:40" pos:end="168:40">)</operator> <operator pos:start="168:42" pos:end="168:43">&gt;&gt;</operator> <literal type="number" pos:start="168:45" pos:end="168:46">16</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="170:1" pos:end="170:23">#<cpp:directive pos:start="170:2" pos:end="170:6">ifdef</cpp:directive> <name pos:start="170:8" pos:end="170:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

        <expr_stmt pos:start="172:9" pos:end="181:0"><expr pos:start="172:9" pos:end="178:49"><call pos:start="172:9" pos:end="178:49"><name pos:start="172:9" pos:end="172:14">printf</name><argument_list pos:start="172:15" pos:end="178:49">(<argument pos:start="172:16" pos:end="174:64"><expr pos:start="172:16" pos:end="174:64"><literal type="string" pos:start="172:16" pos:end="172:52">"Register parallel flash %d size %lx"</literal>

               <literal type="string" pos:start="174:16" pos:end="174:40">" at offset %08lx  addr "</literal> <name pos:start="174:42" pos:end="174:54">TARGET_FMT_lx</name> <literal type="string" pos:start="174:56" pos:end="174:64">" '%s'\n"</literal></expr></argument>,

               <argument pos:start="176:16" pos:end="176:21"><expr pos:start="176:16" pos:end="176:21"><name pos:start="176:16" pos:end="176:21">fl_idx</name></expr></argument>, <argument pos:start="176:24" pos:end="176:32"><expr pos:start="176:24" pos:end="176:32"><name pos:start="176:24" pos:end="176:32">bios_size</name></expr></argument>, <argument pos:start="176:35" pos:end="176:45"><expr pos:start="176:35" pos:end="176:45"><name pos:start="176:35" pos:end="176:45">bios_offset</name></expr></argument>, <argument pos:start="176:48" pos:end="176:71"><expr pos:start="176:48" pos:end="176:71"><operator pos:start="176:48" pos:end="176:48">(</operator><name pos:start="176:49" pos:end="176:60">target_ulong</name><operator pos:start="176:61" pos:end="176:61">)</operator><literal type="number" pos:start="176:62" pos:end="176:71">0xfc000000</literal></expr></argument>,

               <argument pos:start="178:16" pos:end="178:48"><expr pos:start="178:16" pos:end="178:48"><call pos:start="178:16" pos:end="178:48"><name pos:start="178:16" pos:end="178:35">bdrv_get_device_name</name><argument_list pos:start="178:36" pos:end="178:48">(<argument pos:start="178:37" pos:end="178:47"><expr pos:start="178:37" pos:end="178:47"><name pos:start="178:37" pos:end="178:47"><name pos:start="178:37" pos:end="178:41">dinfo</name><operator pos:start="178:42" pos:end="178:43">-&gt;</operator><name pos:start="178:44" pos:end="178:47">bdrv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="180:1" pos:end="180:6">#<cpp:directive pos:start="180:2" pos:end="180:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="182:9" pos:end="182:75"><expr pos:start="182:9" pos:end="182:74"><name pos:start="182:9" pos:end="182:19">bios_offset</name> <operator pos:start="182:21" pos:end="182:21">=</operator> <call pos:start="182:23" pos:end="182:74"><name pos:start="182:23" pos:end="182:36">qemu_ram_alloc</name><argument_list pos:start="182:37" pos:end="182:74">(<argument pos:start="182:38" pos:end="182:41"><expr pos:start="182:38" pos:end="182:41"><name pos:start="182:38" pos:end="182:41">NULL</name></expr></argument>, <argument pos:start="182:44" pos:end="182:62"><expr pos:start="182:44" pos:end="182:62"><literal type="string" pos:start="182:44" pos:end="182:62">"taihu_405ep.flash"</literal></expr></argument>, <argument pos:start="182:65" pos:end="182:73"><expr pos:start="182:65" pos:end="182:73"><name pos:start="182:65" pos:end="182:73">bios_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="184:9" pos:end="190:33"><expr pos:start="184:9" pos:end="190:32"><call pos:start="184:9" pos:end="190:32"><name pos:start="184:9" pos:end="184:29">pflash_cfi02_register</name><argument_list pos:start="184:30" pos:end="190:32">(<argument pos:start="184:31" pos:end="184:40"><expr pos:start="184:31" pos:end="184:40"><literal type="number" pos:start="184:31" pos:end="184:40">0xfc000000</literal></expr></argument>, <argument pos:start="184:43" pos:end="184:53"><expr pos:start="184:43" pos:end="184:53"><name pos:start="184:43" pos:end="184:53">bios_offset</name></expr></argument>,

                              <argument pos:start="186:31" pos:end="186:41"><expr pos:start="186:31" pos:end="186:41"><name pos:start="186:31" pos:end="186:41"><name pos:start="186:31" pos:end="186:35">dinfo</name><operator pos:start="186:36" pos:end="186:37">-&gt;</operator><name pos:start="186:38" pos:end="186:41">bdrv</name></name></expr></argument>, <argument pos:start="186:44" pos:end="186:48"><expr pos:start="186:44" pos:end="186:48"><literal type="number" pos:start="186:44" pos:end="186:48">65536</literal></expr></argument>, <argument pos:start="186:51" pos:end="186:60"><expr pos:start="186:51" pos:end="186:60"><name pos:start="186:51" pos:end="186:60">fl_sectors</name></expr></argument>, <argument pos:start="186:63" pos:end="186:63"><expr pos:start="186:63" pos:end="186:63"><literal type="number" pos:start="186:63" pos:end="186:63">1</literal></expr></argument>,

                              <argument pos:start="188:31" pos:end="188:31"><expr pos:start="188:31" pos:end="188:31"><literal type="number" pos:start="188:31" pos:end="188:31">4</literal></expr></argument>, <argument pos:start="188:34" pos:end="188:39"><expr pos:start="188:34" pos:end="188:39"><literal type="number" pos:start="188:34" pos:end="188:39">0x0001</literal></expr></argument>, <argument pos:start="188:42" pos:end="188:47"><expr pos:start="188:42" pos:end="188:47"><literal type="number" pos:start="188:42" pos:end="188:47">0x22DA</literal></expr></argument>, <argument pos:start="188:50" pos:end="188:55"><expr pos:start="188:50" pos:end="188:55"><literal type="number" pos:start="188:50" pos:end="188:55">0x0000</literal></expr></argument>, <argument pos:start="188:58" pos:end="188:63"><expr pos:start="188:58" pos:end="188:63"><literal type="number" pos:start="188:58" pos:end="188:63">0x0000</literal></expr></argument>, <argument pos:start="188:66" pos:end="188:70"><expr pos:start="188:66" pos:end="188:70"><literal type="number" pos:start="188:66" pos:end="188:70">0x555</literal></expr></argument>, <argument pos:start="188:73" pos:end="188:77"><expr pos:start="188:73" pos:end="188:77"><literal type="number" pos:start="188:73" pos:end="188:77">0x2AA</literal></expr></argument>,

                              <argument pos:start="190:31" pos:end="190:31"><expr pos:start="190:31" pos:end="190:31"><literal type="number" pos:start="190:31" pos:end="190:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="192:9" pos:end="192:17"><expr pos:start="192:9" pos:end="192:16"><name pos:start="192:9" pos:end="192:14">fl_idx</name><operator pos:start="192:15" pos:end="192:16">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="196:5" pos:end="196:37">/* Register CLPD &amp; LCD display */</comment>

<cpp:ifdef pos:start="198:1" pos:end="198:23">#<cpp:directive pos:start="198:2" pos:end="198:6">ifdef</cpp:directive> <name pos:start="198:8" pos:end="198:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <expr_stmt pos:start="200:5" pos:end="203:0"><expr pos:start="200:5" pos:end="200:43"><call pos:start="200:5" pos:end="200:43"><name pos:start="200:5" pos:end="200:10">printf</name><argument_list pos:start="200:11" pos:end="200:43">(<argument pos:start="200:12" pos:end="200:32"><expr pos:start="200:12" pos:end="200:32"><literal type="string" pos:start="200:12" pos:end="200:32">"%s: register CPLD\n"</literal></expr></argument>, <argument pos:start="200:35" pos:end="200:42"><expr pos:start="200:35" pos:end="200:42"><name pos:start="200:35" pos:end="200:42">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="202:1" pos:end="202:6">#<cpp:directive pos:start="202:2" pos:end="202:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="204:5" pos:end="204:32"><expr pos:start="204:5" pos:end="204:31"><call pos:start="204:5" pos:end="204:31"><name pos:start="204:5" pos:end="204:19">taihu_cpld_init</name><argument_list pos:start="204:20" pos:end="204:31">(<argument pos:start="204:21" pos:end="204:30"><expr pos:start="204:21" pos:end="204:30"><literal type="number" pos:start="204:21" pos:end="204:30">0x50100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="206:5" pos:end="206:21">/* Load kernel */</comment>

    <expr_stmt pos:start="208:5" pos:end="208:43"><expr pos:start="208:5" pos:end="208:42"><name pos:start="208:5" pos:end="208:14">linux_boot</name> <operator pos:start="208:16" pos:end="208:16">=</operator> <operator pos:start="208:18" pos:end="208:18">(</operator><name pos:start="208:19" pos:end="208:33">kernel_filename</name> <operator pos:start="208:35" pos:end="208:36">!=</operator> <name pos:start="208:38" pos:end="208:41">NULL</name><operator pos:start="208:42" pos:end="208:42">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="210:5" pos:end="279:0"><if pos:start="210:5" pos:end="266:5">if <condition pos:start="210:8" pos:end="210:19">(<expr pos:start="210:9" pos:end="210:18"><name pos:start="210:9" pos:end="210:18">linux_boot</name></expr>)</condition> <block pos:start="210:21" pos:end="266:5">{<block_content pos:start="214:9" pos:end="264:9">

<cpp:ifdef pos:start="212:1" pos:end="212:23">#<cpp:directive pos:start="212:2" pos:end="212:6">ifdef</cpp:directive> <name pos:start="212:8" pos:end="212:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

        <expr_stmt pos:start="214:9" pos:end="217:0"><expr pos:start="214:9" pos:end="214:45"><call pos:start="214:9" pos:end="214:45"><name pos:start="214:9" pos:end="214:14">printf</name><argument_list pos:start="214:15" pos:end="214:45">(<argument pos:start="214:16" pos:end="214:34"><expr pos:start="214:16" pos:end="214:34"><literal type="string" pos:start="214:16" pos:end="214:34">"%s: load kernel\n"</literal></expr></argument>, <argument pos:start="214:37" pos:end="214:44"><expr pos:start="214:37" pos:end="214:44"><name pos:start="214:37" pos:end="214:44">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="216:1" pos:end="216:6">#<cpp:directive pos:start="216:2" pos:end="216:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="218:9" pos:end="218:39"><expr pos:start="218:9" pos:end="218:38"><name pos:start="218:9" pos:end="218:19">kernel_base</name> <operator pos:start="218:21" pos:end="218:21">=</operator> <name pos:start="218:23" pos:end="218:38">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

        <comment type="block" pos:start="220:9" pos:end="220:40">/* now we can load the kernel */</comment>

        <expr_stmt pos:start="222:9" pos:end="224:66"><expr pos:start="222:9" pos:end="224:65"><name pos:start="222:9" pos:end="222:19">kernel_size</name> <operator pos:start="222:21" pos:end="222:21">=</operator> <call pos:start="222:23" pos:end="224:65"><name pos:start="222:23" pos:end="222:41">load_image_targphys</name><argument_list pos:start="222:42" pos:end="224:65">(<argument pos:start="222:43" pos:end="222:57"><expr pos:start="222:43" pos:end="222:57"><name pos:start="222:43" pos:end="222:57">kernel_filename</name></expr></argument>, <argument pos:start="222:60" pos:end="222:70"><expr pos:start="222:60" pos:end="222:70"><name pos:start="222:60" pos:end="222:70">kernel_base</name></expr></argument>,

                                          <argument pos:start="224:43" pos:end="224:64"><expr pos:start="224:43" pos:end="224:64"><name pos:start="224:43" pos:end="224:50">ram_size</name> <operator pos:start="224:52" pos:end="224:52">-</operator> <name pos:start="224:54" pos:end="224:64">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="226:9" pos:end="234:9"><if pos:start="226:9" pos:end="234:9">if <condition pos:start="226:12" pos:end="226:28">(<expr pos:start="226:13" pos:end="226:27"><name pos:start="226:13" pos:end="226:23">kernel_size</name> <operator pos:start="226:25" pos:end="226:25">&lt;</operator> <literal type="number" pos:start="226:27" pos:end="226:27">0</literal></expr>)</condition> <block pos:start="226:30" pos:end="234:9">{<block_content pos:start="228:13" pos:end="232:20">

            <expr_stmt pos:start="228:13" pos:end="230:37"><expr pos:start="228:13" pos:end="230:36"><call pos:start="228:13" pos:end="230:36"><name pos:start="228:13" pos:end="228:19">fprintf</name><argument_list pos:start="228:20" pos:end="230:36">(<argument pos:start="228:21" pos:end="228:26"><expr pos:start="228:21" pos:end="228:26"><name pos:start="228:21" pos:end="228:26">stderr</name></expr></argument>, <argument pos:start="228:29" pos:end="228:64"><expr pos:start="228:29" pos:end="228:64"><literal type="string" pos:start="228:29" pos:end="228:64">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                    <argument pos:start="230:21" pos:end="230:35"><expr pos:start="230:21" pos:end="230:35"><name pos:start="230:21" pos:end="230:35">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="232:13" pos:end="232:20"><expr pos:start="232:13" pos:end="232:19"><call pos:start="232:13" pos:end="232:19"><name pos:start="232:13" pos:end="232:16">exit</name><argument_list pos:start="232:17" pos:end="232:19">(<argument pos:start="232:18" pos:end="232:18"><expr pos:start="232:18" pos:end="232:18"><literal type="number" pos:start="232:18" pos:end="232:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="236:9" pos:end="236:25">/* load initrd */</comment>

        <if_stmt pos:start="238:9" pos:end="264:9"><if pos:start="238:9" pos:end="258:9">if <condition pos:start="238:12" pos:end="238:28">(<expr pos:start="238:13" pos:end="238:27"><name pos:start="238:13" pos:end="238:27">initrd_filename</name></expr>)</condition> <block pos:start="238:30" pos:end="258:9">{<block_content pos:start="240:13" pos:end="256:13">

            <expr_stmt pos:start="240:13" pos:end="240:43"><expr pos:start="240:13" pos:end="240:42"><name pos:start="240:13" pos:end="240:23">initrd_base</name> <operator pos:start="240:25" pos:end="240:25">=</operator> <name pos:start="240:27" pos:end="240:42">INITRD_LOAD_ADDR</name></expr>;</expr_stmt>

            <expr_stmt pos:start="242:13" pos:end="244:70"><expr pos:start="242:13" pos:end="244:69"><name pos:start="242:13" pos:end="242:23">initrd_size</name> <operator pos:start="242:25" pos:end="242:25">=</operator> <call pos:start="242:27" pos:end="244:69"><name pos:start="242:27" pos:end="242:45">load_image_targphys</name><argument_list pos:start="242:46" pos:end="244:69">(<argument pos:start="242:47" pos:end="242:61"><expr pos:start="242:47" pos:end="242:61"><name pos:start="242:47" pos:end="242:61">initrd_filename</name></expr></argument>, <argument pos:start="242:64" pos:end="242:74"><expr pos:start="242:64" pos:end="242:74"><name pos:start="242:64" pos:end="242:74">initrd_base</name></expr></argument>,

                                              <argument pos:start="244:47" pos:end="244:68"><expr pos:start="244:47" pos:end="244:68"><name pos:start="244:47" pos:end="244:54">ram_size</name> <operator pos:start="244:56" pos:end="244:56">-</operator> <name pos:start="244:58" pos:end="244:68">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="246:13" pos:end="256:13"><if pos:start="246:13" pos:end="256:13">if <condition pos:start="246:16" pos:end="246:32">(<expr pos:start="246:17" pos:end="246:31"><name pos:start="246:17" pos:end="246:27">initrd_size</name> <operator pos:start="246:29" pos:end="246:29">&lt;</operator> <literal type="number" pos:start="246:31" pos:end="246:31">0</literal></expr>)</condition> <block pos:start="246:34" pos:end="256:13">{<block_content pos:start="248:17" pos:end="254:24">

                <expr_stmt pos:start="248:17" pos:end="252:41"><expr pos:start="248:17" pos:end="252:40"><call pos:start="248:17" pos:end="252:40"><name pos:start="248:17" pos:end="248:23">fprintf</name><argument_list pos:start="248:24" pos:end="252:40">(<argument pos:start="248:25" pos:end="248:30"><expr pos:start="248:25" pos:end="248:30"><name pos:start="248:25" pos:end="248:30">stderr</name></expr></argument>,

                        <argument pos:start="250:25" pos:end="250:70"><expr pos:start="250:25" pos:end="250:70"><literal type="string" pos:start="250:25" pos:end="250:70">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                        <argument pos:start="252:25" pos:end="252:39"><expr pos:start="252:25" pos:end="252:39"><name pos:start="252:25" pos:end="252:39">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="254:17" pos:end="254:24"><expr pos:start="254:17" pos:end="254:23"><call pos:start="254:17" pos:end="254:23"><name pos:start="254:17" pos:end="254:20">exit</name><argument_list pos:start="254:21" pos:end="254:23">(<argument pos:start="254:22" pos:end="254:22"><expr pos:start="254:22" pos:end="254:22"><literal type="number" pos:start="254:22" pos:end="254:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="258:11" pos:end="264:9">else <block pos:start="258:16" pos:end="264:9">{<block_content pos:start="260:13" pos:end="262:28">

            <expr_stmt pos:start="260:13" pos:end="260:28"><expr pos:start="260:13" pos:end="260:27"><name pos:start="260:13" pos:end="260:23">initrd_base</name> <operator pos:start="260:25" pos:end="260:25">=</operator> <literal type="number" pos:start="260:27" pos:end="260:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="262:13" pos:end="262:28"><expr pos:start="262:13" pos:end="262:27"><name pos:start="262:13" pos:end="262:23">initrd_size</name> <operator pos:start="262:25" pos:end="262:25">=</operator> <literal type="number" pos:start="262:27" pos:end="262:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="266:7" pos:end="279:0">else <block pos:start="266:12" pos:end="279:0">{<block_content pos:start="268:9" pos:end="274:24">

        <expr_stmt pos:start="268:9" pos:end="268:24"><expr pos:start="268:9" pos:end="268:23"><name pos:start="268:9" pos:end="268:19">kernel_base</name> <operator pos:start="268:21" pos:end="268:21">=</operator> <literal type="number" pos:start="268:23" pos:end="268:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="270:9" pos:end="270:24"><expr pos:start="270:9" pos:end="270:23"><name pos:start="270:9" pos:end="270:19">kernel_size</name> <operator pos:start="270:21" pos:end="270:21">=</operator> <literal type="number" pos:start="270:23" pos:end="270:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="272:9" pos:end="272:24"><expr pos:start="272:9" pos:end="272:23"><name pos:start="272:9" pos:end="272:19">initrd_base</name> <operator pos:start="272:21" pos:end="272:21">=</operator> <literal type="number" pos:start="272:23" pos:end="272:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="274:9" pos:end="274:24"><expr pos:start="274:9" pos:end="274:23"><name pos:start="274:9" pos:end="274:19">initrd_size</name> <operator pos:start="274:21" pos:end="274:21">=</operator> <literal type="number" pos:start="274:23" pos:end="274:23">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="278:1" pos:end="278:23">#<cpp:directive pos:start="278:2" pos:end="278:6">ifdef</cpp:directive> <name pos:start="278:8" pos:end="278:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <expr_stmt pos:start="280:5" pos:end="283:0"><expr pos:start="280:5" pos:end="280:34"><call pos:start="280:5" pos:end="280:34"><name pos:start="280:5" pos:end="280:10">printf</name><argument_list pos:start="280:11" pos:end="280:34">(<argument pos:start="280:12" pos:end="280:23"><expr pos:start="280:12" pos:end="280:23"><literal type="string" pos:start="280:12" pos:end="280:23">"%s: Done\n"</literal></expr></argument>, <argument pos:start="280:26" pos:end="280:33"><expr pos:start="280:26" pos:end="280:33"><name pos:start="280:26" pos:end="280:33">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="282:1" pos:end="282:6">#<cpp:directive pos:start="282:2" pos:end="282:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function></unit>
