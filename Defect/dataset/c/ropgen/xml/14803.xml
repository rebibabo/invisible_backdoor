<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14803.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:31">memory_region_iommu_replay</name><parameter_list pos:start="1:32" pos:end="1:77">(<parameter pos:start="1:33" pos:end="1:48"><decl pos:start="1:33" pos:end="1:48"><type pos:start="1:33" pos:end="1:48"><name pos:start="1:33" pos:end="1:44">MemoryRegion</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:48">mr</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:61"><decl pos:start="1:51" pos:end="1:61"><type pos:start="1:51" pos:end="1:61"><name pos:start="1:51" pos:end="1:58">Notifier</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:61">n</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:76"><decl pos:start="1:64" pos:end="1:76"><type pos:start="1:64" pos:end="1:76"><name pos:start="1:64" pos:end="1:67">bool</name></type> <name pos:start="1:69" pos:end="1:76">is_write</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="39:1">{<block_content pos:start="5:5" pos:end="37:5">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:10">hwaddr</name></type> <name pos:start="5:12" pos:end="5:15">addr</name></decl>, <decl pos:start="5:18" pos:end="5:28"><type ref="prev" pos:start="5:5" pos:end="5:10"/><name pos:start="5:18" pos:end="5:28">granularity</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17">IOMMUTLBEntry</name></type> <name pos:start="7:19" pos:end="7:23">iotlb</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:60"><expr pos:start="11:5" pos:end="11:59"><name pos:start="11:5" pos:end="11:15">granularity</name> <operator pos:start="11:17" pos:end="11:17">=</operator> <call pos:start="11:19" pos:end="11:59"><name pos:start="11:19" pos:end="11:55">memory_region_iommu_get_min_page_size</name><argument_list pos:start="11:56" pos:end="11:59">(<argument pos:start="11:57" pos:end="11:58"><expr pos:start="11:57" pos:end="11:58"><name pos:start="11:57" pos:end="11:58">mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="15:5" pos:end="37:5">for <control pos:start="15:9" pos:end="15:70">(<init pos:start="15:10" pos:end="15:18"><expr pos:start="15:10" pos:end="15:17"><name pos:start="15:10" pos:end="15:13">addr</name> <operator pos:start="15:15" pos:end="15:15">=</operator> <literal type="number" pos:start="15:17" pos:end="15:17">0</literal></expr>;</init> <condition pos:start="15:20" pos:end="15:49"><expr pos:start="15:20" pos:end="15:48"><name pos:start="15:20" pos:end="15:23">addr</name> <operator pos:start="15:25" pos:end="15:25">&lt;</operator> <call pos:start="15:27" pos:end="15:48"><name pos:start="15:27" pos:end="15:44">memory_region_size</name><argument_list pos:start="15:45" pos:end="15:48">(<argument pos:start="15:46" pos:end="15:47"><expr pos:start="15:46" pos:end="15:47"><name pos:start="15:46" pos:end="15:47">mr</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="15:51" pos:end="15:69"><expr pos:start="15:51" pos:end="15:69"><name pos:start="15:51" pos:end="15:54">addr</name> <operator pos:start="15:56" pos:end="15:57">+=</operator> <name pos:start="15:59" pos:end="15:69">granularity</name></expr></incr>)</control> <block pos:start="15:72" pos:end="37:5">{<block_content pos:start="17:9" pos:end="35:9">

        <expr_stmt pos:start="17:9" pos:end="17:61"><expr pos:start="17:9" pos:end="17:60"><name pos:start="17:9" pos:end="17:13">iotlb</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <call pos:start="17:17" pos:end="17:60"><name pos:start="17:17" pos:end="17:40"><name pos:start="17:17" pos:end="17:18">mr</name><operator pos:start="17:19" pos:end="17:20">-&gt;</operator><name pos:start="17:21" pos:end="17:29">iommu_ops</name><operator pos:start="17:30" pos:end="17:31">-&gt;</operator><name pos:start="17:32" pos:end="17:40">translate</name></name><argument_list pos:start="17:41" pos:end="17:60">(<argument pos:start="17:42" pos:end="17:43"><expr pos:start="17:42" pos:end="17:43"><name pos:start="17:42" pos:end="17:43">mr</name></expr></argument>, <argument pos:start="17:46" pos:end="17:49"><expr pos:start="17:46" pos:end="17:49"><name pos:start="17:46" pos:end="17:49">addr</name></expr></argument>, <argument pos:start="17:52" pos:end="17:59"><expr pos:start="17:52" pos:end="17:59"><name pos:start="17:52" pos:end="17:59">is_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="19:9" pos:end="23:9"><if pos:start="19:9" pos:end="23:9">if <condition pos:start="19:12" pos:end="19:37">(<expr pos:start="19:13" pos:end="19:36"><name pos:start="19:13" pos:end="19:22"><name pos:start="19:13" pos:end="19:17">iotlb</name><operator pos:start="19:18" pos:end="19:18">.</operator><name pos:start="19:19" pos:end="19:22">perm</name></name> <operator pos:start="19:24" pos:end="19:25">!=</operator> <name pos:start="19:27" pos:end="19:36">IOMMU_NONE</name></expr>)</condition> <block pos:start="19:39" pos:end="23:9">{<block_content pos:start="21:13" pos:end="21:33">

            <expr_stmt pos:start="21:13" pos:end="21:33"><expr pos:start="21:13" pos:end="21:32"><call pos:start="21:13" pos:end="21:32"><name pos:start="21:13" pos:end="21:21"><name pos:start="21:13" pos:end="21:13">n</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:21">notify</name></name><argument_list pos:start="21:22" pos:end="21:32">(<argument pos:start="21:23" pos:end="21:23"><expr pos:start="21:23" pos:end="21:23"><name pos:start="21:23" pos:end="21:23">n</name></expr></argument>, <argument pos:start="21:26" pos:end="21:31"><expr pos:start="21:26" pos:end="21:31"><operator pos:start="21:26" pos:end="21:26">&amp;</operator><name pos:start="21:27" pos:end="21:31">iotlb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="27:9" pos:end="29:70">/* if (2^64 - MR size) &lt; granularity, it's possible to get an

         * infinite loop here.  This should catch such a wraparound */</comment>

        <if_stmt pos:start="31:9" pos:end="35:9"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:40">(<expr pos:start="31:13" pos:end="31:39"><operator pos:start="31:13" pos:end="31:13">(</operator><name pos:start="31:14" pos:end="31:17">addr</name> <operator pos:start="31:19" pos:end="31:19">+</operator> <name pos:start="31:21" pos:end="31:31">granularity</name><operator pos:start="31:32" pos:end="31:32">)</operator> <operator pos:start="31:34" pos:end="31:34">&lt;</operator> <name pos:start="31:36" pos:end="31:39">addr</name></expr>)</condition> <block pos:start="31:42" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:18">

            <break pos:start="33:13" pos:end="33:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
