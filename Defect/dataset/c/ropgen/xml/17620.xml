<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17620.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">filter_frame</name><parameter_list pos:start="1:24" pos:end="1:58">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:44"><name pos:start="1:25" pos:end="1:36">AVFilterLink</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:44">inlink</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:57"><decl pos:start="1:47" pos:end="1:57"><type pos:start="1:47" pos:end="1:57"><name pos:start="1:47" pos:end="1:53">AVFrame</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:57">in</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="117:1">{<block_content pos:start="5:5" pos:end="115:41">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">AVFilterContext</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:24">ctx</name> <init pos:start="5:26" pos:end="5:38">= <expr pos:start="5:28" pos:end="5:38"><name pos:start="5:28" pos:end="5:38"><name pos:start="5:28" pos:end="5:33">inlink</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:38">dst</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">HDCDContext</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:18">s</name> <init pos:start="7:20" pos:end="7:30">= <expr pos:start="7:22" pos:end="7:30"><name pos:start="7:22" pos:end="7:30"><name pos:start="7:22" pos:end="7:24">ctx</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:30">priv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:44"><decl pos:start="9:5" pos:end="9:43"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">AVFilterLink</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:25">outlink</name> <init pos:start="9:27" pos:end="9:43">= <expr pos:start="9:29" pos:end="9:43"><name pos:start="9:29" pos:end="9:43"><name pos:start="9:29" pos:end="9:31">ctx</name><operator pos:start="9:32" pos:end="9:33">-&gt;</operator><name pos:start="9:34" pos:end="9:40">outputs</name><index pos:start="9:41" pos:end="9:43">[<expr pos:start="9:42" pos:end="9:42"><literal type="number" pos:start="9:42" pos:end="9:42">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">AVFrame</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:16">out</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:19"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:17">int16_t</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:26">in_data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">int32_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:21">out_data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:13"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">n</name></decl>, <decl pos:start="17:12" pos:end="17:12"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:12">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:36"><decl pos:start="19:5" pos:end="19:14"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:14">detect</name></decl>, <decl pos:start="19:17" pos:end="19:23"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:17" pos:end="19:23">packets</name></decl>, <decl pos:start="19:26" pos:end="19:35"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:26" pos:end="19:35">pe_packets</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:55"><expr pos:start="23:5" pos:end="23:54"><name pos:start="23:5" pos:end="23:7">out</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:54"><name pos:start="23:11" pos:end="23:29">ff_get_audio_buffer</name><argument_list pos:start="23:30" pos:end="23:54">(<argument pos:start="23:31" pos:end="23:37"><expr pos:start="23:31" pos:end="23:37"><name pos:start="23:31" pos:end="23:37">outlink</name></expr></argument>, <argument pos:start="23:40" pos:end="23:53"><expr pos:start="23:40" pos:end="23:53"><name pos:start="23:40" pos:end="23:53"><name pos:start="23:40" pos:end="23:41">in</name><operator pos:start="23:42" pos:end="23:43">-&gt;</operator><name pos:start="23:44" pos:end="23:53">nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:13">(<expr pos:start="25:9" pos:end="25:12"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:12">out</name></expr>)</condition> <block pos:start="25:15" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:31">

        <expr_stmt pos:start="27:9" pos:end="27:27"><expr pos:start="27:9" pos:end="27:26"><call pos:start="27:9" pos:end="27:26"><name pos:start="27:9" pos:end="27:21">av_frame_free</name><argument_list pos:start="27:22" pos:end="27:26">(<argument pos:start="27:23" pos:end="27:25"><expr pos:start="27:23" pos:end="27:25"><operator pos:start="27:23" pos:end="27:23">&amp;</operator><name pos:start="27:24" pos:end="27:25">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:31">return <expr pos:start="29:16" pos:end="29:30"><call pos:start="29:16" pos:end="29:30"><name pos:start="29:16" pos:end="29:22">AVERROR</name><argument_list pos:start="29:23" pos:end="29:30">(<argument pos:start="29:24" pos:end="29:29"><expr pos:start="29:24" pos:end="29:29"><name pos:start="29:24" pos:end="29:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:33"><expr pos:start="33:5" pos:end="33:32"><call pos:start="33:5" pos:end="33:32"><name pos:start="33:5" pos:end="33:23">av_frame_copy_props</name><argument_list pos:start="33:24" pos:end="33:32">(<argument pos:start="33:25" pos:end="33:27"><expr pos:start="33:25" pos:end="33:27"><name pos:start="33:25" pos:end="33:27">out</name></expr></argument>, <argument pos:start="33:30" pos:end="33:31"><expr pos:start="33:30" pos:end="33:31"><name pos:start="33:30" pos:end="33:31">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:34"><expr pos:start="35:5" pos:end="35:33"><name pos:start="35:5" pos:end="35:15"><name pos:start="35:5" pos:end="35:7">out</name><operator pos:start="35:8" pos:end="35:9">-&gt;</operator><name pos:start="35:10" pos:end="35:15">format</name></name> <operator pos:start="35:17" pos:end="35:17">=</operator> <name pos:start="35:19" pos:end="35:33"><name pos:start="35:19" pos:end="35:25">outlink</name><operator pos:start="35:26" pos:end="35:27">-&gt;</operator><name pos:start="35:28" pos:end="35:33">format</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:37"><expr pos:start="39:5" pos:end="39:36"><name pos:start="39:5" pos:end="39:11">in_data</name>  <operator pos:start="39:14" pos:end="39:14">=</operator> <operator pos:start="39:16" pos:end="39:16">(</operator><name pos:start="39:17" pos:end="39:23">int16_t</name><operator pos:start="39:24" pos:end="39:24">*</operator><operator pos:start="39:25" pos:end="39:25">)</operator><name pos:start="39:26" pos:end="39:36"><name pos:start="39:26" pos:end="39:27">in</name><operator pos:start="39:28" pos:end="39:29">-&gt;</operator><name pos:start="39:30" pos:end="39:33">data</name><index pos:start="39:34" pos:end="39:36">[<expr pos:start="39:35" pos:end="39:35"><literal type="number" pos:start="39:35" pos:end="39:35">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:38"><expr pos:start="41:5" pos:end="41:37"><name pos:start="41:5" pos:end="41:12">out_data</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <operator pos:start="41:16" pos:end="41:16">(</operator><name pos:start="41:17" pos:end="41:23">int32_t</name><operator pos:start="41:24" pos:end="41:24">*</operator><operator pos:start="41:25" pos:end="41:25">)</operator><name pos:start="41:26" pos:end="41:37"><name pos:start="41:26" pos:end="41:28">out</name><operator pos:start="41:29" pos:end="41:30">-&gt;</operator><name pos:start="41:31" pos:end="41:34">data</name><index pos:start="41:35" pos:end="41:37">[<expr pos:start="41:36" pos:end="41:36"><literal type="number" pos:start="41:36" pos:end="41:36">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <for pos:start="43:5" pos:end="47:5">for <control pos:start="43:9" pos:end="43:55">(<init pos:start="43:10" pos:end="43:15"><expr pos:start="43:10" pos:end="43:14"><name pos:start="43:10" pos:end="43:10">n</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <literal type="number" pos:start="43:14" pos:end="43:14">0</literal></expr>;</init> <condition pos:start="43:17" pos:end="43:50"><expr pos:start="43:17" pos:end="43:49"><name pos:start="43:17" pos:end="43:17">n</name> <operator pos:start="43:19" pos:end="43:19">&lt;</operator> <name pos:start="43:21" pos:end="43:34"><name pos:start="43:21" pos:end="43:22">in</name><operator pos:start="43:23" pos:end="43:24">-&gt;</operator><name pos:start="43:25" pos:end="43:34">nb_samples</name></name> <operator pos:start="43:36" pos:end="43:36">*</operator> <name pos:start="43:38" pos:end="43:49"><name pos:start="43:38" pos:end="43:39">in</name><operator pos:start="43:40" pos:end="43:41">-&gt;</operator><name pos:start="43:42" pos:end="43:49">channels</name></name></expr>;</condition> <incr pos:start="43:52" pos:end="43:54"><expr pos:start="43:52" pos:end="43:54"><name pos:start="43:52" pos:end="43:52">n</name><operator pos:start="43:53" pos:end="43:54">++</operator></expr></incr>)</control> <block pos:start="43:57" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:33">

        <expr_stmt pos:start="45:9" pos:end="45:33"><expr pos:start="45:9" pos:end="45:32"><name pos:start="45:9" pos:end="45:19"><name pos:start="45:9" pos:end="45:16">out_data</name><index pos:start="45:17" pos:end="45:19">[<expr pos:start="45:18" pos:end="45:18"><name pos:start="45:18" pos:end="45:18">n</name></expr>]</index></name> <operator pos:start="45:21" pos:end="45:21">=</operator> <name pos:start="45:23" pos:end="45:32"><name pos:start="45:23" pos:end="45:29">in_data</name><index pos:start="45:30" pos:end="45:32">[<expr pos:start="45:31" pos:end="45:31"><name pos:start="45:31" pos:end="45:31">n</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="51:5" pos:end="51:15"><expr pos:start="51:5" pos:end="51:14"><name pos:start="51:5" pos:end="51:10">detect</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <literal type="number" pos:start="51:14" pos:end="51:14">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:16"><expr pos:start="53:5" pos:end="53:15"><name pos:start="53:5" pos:end="53:11">packets</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <literal type="number" pos:start="53:15" pos:end="53:15">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:19"><expr pos:start="55:5" pos:end="55:18"><name pos:start="55:5" pos:end="55:14">pe_packets</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <literal type="number" pos:start="55:18" pos:end="55:18">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:22"><expr pos:start="57:5" pos:end="57:21"><name pos:start="57:5" pos:end="57:17"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:17">det_errors</name></name> <operator pos:start="57:19" pos:end="57:19">=</operator> <literal type="number" pos:start="57:21" pos:end="57:21">0</literal></expr>;</expr_stmt>

    <for pos:start="59:5" pos:end="81:5">for <control pos:start="59:9" pos:end="59:42">(<init pos:start="59:10" pos:end="59:15"><expr pos:start="59:10" pos:end="59:14"><name pos:start="59:10" pos:end="59:10">c</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <literal type="number" pos:start="59:14" pos:end="59:14">0</literal></expr>;</init> <condition pos:start="59:17" pos:end="59:37"><expr pos:start="59:17" pos:end="59:36"><name pos:start="59:17" pos:end="59:17">c</name> <operator pos:start="59:19" pos:end="59:19">&lt;</operator> <name pos:start="59:21" pos:end="59:36"><name pos:start="59:21" pos:end="59:26">inlink</name><operator pos:start="59:27" pos:end="59:28">-&gt;</operator><name pos:start="59:29" pos:end="59:36">channels</name></name></expr>;</condition> <incr pos:start="59:39" pos:end="59:41"><expr pos:start="59:39" pos:end="59:41"><name pos:start="59:39" pos:end="59:39">c</name><operator pos:start="59:40" pos:end="59:41">++</operator></expr></incr>)</control> <block pos:start="59:44" pos:end="81:5">{<block_content pos:start="61:9" pos:end="79:45">

        <decl_stmt pos:start="61:9" pos:end="61:43"><decl pos:start="61:9" pos:end="61:42"><type pos:start="61:9" pos:end="61:22"><name pos:start="61:9" pos:end="61:20">hdcd_state_t</name> <modifier pos:start="61:22" pos:end="61:22">*</modifier></type><name pos:start="61:23" pos:end="61:27">state</name> <init pos:start="61:29" pos:end="61:42">= <expr pos:start="61:31" pos:end="61:42"><operator pos:start="61:31" pos:end="61:31">&amp;</operator><name pos:start="61:32" pos:end="61:42"><name pos:start="61:32" pos:end="61:32">s</name><operator pos:start="61:33" pos:end="61:34">-&gt;</operator><name pos:start="61:35" pos:end="61:39">state</name><index pos:start="61:40" pos:end="61:42">[<expr pos:start="61:41" pos:end="61:41"><name pos:start="61:41" pos:end="61:41">c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:76"><expr pos:start="63:9" pos:end="63:75"><call pos:start="63:9" pos:end="63:75"><name pos:start="63:9" pos:end="63:20">hdcd_process</name><argument_list pos:start="63:21" pos:end="63:75">(<argument pos:start="63:22" pos:end="63:22"><expr pos:start="63:22" pos:end="63:22"><name pos:start="63:22" pos:end="63:22">s</name></expr></argument>, <argument pos:start="63:25" pos:end="63:29"><expr pos:start="63:25" pos:end="63:29"><name pos:start="63:25" pos:end="63:29">state</name></expr></argument>, <argument pos:start="63:32" pos:end="63:43"><expr pos:start="63:32" pos:end="63:43"><name pos:start="63:32" pos:end="63:39">out_data</name> <operator pos:start="63:41" pos:end="63:41">+</operator> <name pos:start="63:43" pos:end="63:43">c</name></expr></argument>, <argument pos:start="63:46" pos:end="63:59"><expr pos:start="63:46" pos:end="63:59"><name pos:start="63:46" pos:end="63:59"><name pos:start="63:46" pos:end="63:47">in</name><operator pos:start="63:48" pos:end="63:49">-&gt;</operator><name pos:start="63:50" pos:end="63:59">nb_samples</name></name></expr></argument>, <argument pos:start="63:62" pos:end="63:74"><expr pos:start="63:62" pos:end="63:74"><name pos:start="63:62" pos:end="63:74"><name pos:start="63:62" pos:end="63:64">out</name><operator pos:start="63:65" pos:end="63:66">-&gt;</operator><name pos:start="63:67" pos:end="63:74">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="65:37"><if pos:start="65:9" pos:end="65:37">if <condition pos:start="65:12" pos:end="65:27">(<expr pos:start="65:13" pos:end="65:26"><name pos:start="65:13" pos:end="65:26"><name pos:start="65:13" pos:end="65:17">state</name><operator pos:start="65:18" pos:end="65:19">-&gt;</operator><name pos:start="65:20" pos:end="65:26">sustain</name></name></expr>)</condition><block type="pseudo" pos:start="65:29" pos:end="65:37"><block_content pos:start="65:29" pos:end="65:37"> <expr_stmt pos:start="65:29" pos:end="65:37"><expr pos:start="65:29" pos:end="65:36"><name pos:start="65:29" pos:end="65:34">detect</name><operator pos:start="65:35" pos:end="65:36">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:63"><expr pos:start="67:9" pos:end="67:62"><name pos:start="67:9" pos:end="67:15">packets</name> <operator pos:start="67:17" pos:end="67:18">+=</operator> <name pos:start="67:20" pos:end="67:39"><name pos:start="67:20" pos:end="67:24">state</name><operator pos:start="67:25" pos:end="67:26">-&gt;</operator><name pos:start="67:27" pos:end="67:39">code_counterA</name></name> <operator pos:start="67:41" pos:end="67:41">+</operator> <name pos:start="67:43" pos:end="67:62"><name pos:start="67:43" pos:end="67:47">state</name><operator pos:start="67:48" pos:end="67:49">-&gt;</operator><name pos:start="67:50" pos:end="67:62">code_counterB</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:47"><expr pos:start="69:9" pos:end="69:46"><name pos:start="69:9" pos:end="69:18">pe_packets</name> <operator pos:start="69:20" pos:end="69:21">+=</operator> <name pos:start="69:23" pos:end="69:46"><name pos:start="69:23" pos:end="69:27">state</name><operator pos:start="69:28" pos:end="69:29">-&gt;</operator><name pos:start="69:30" pos:end="69:46">count_peak_extend</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:68"><expr pos:start="71:9" pos:end="71:67"><name pos:start="71:9" pos:end="71:32"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:32">uses_transient_filter</name></name> <operator pos:start="71:34" pos:end="71:35">|=</operator> <operator pos:start="71:37" pos:end="71:37">!</operator><operator pos:start="71:38" pos:end="71:38">!</operator><name pos:start="71:39" pos:end="71:67"><name pos:start="71:39" pos:end="71:43">state</name><operator pos:start="71:44" pos:end="71:45">-&gt;</operator><name pos:start="71:46" pos:end="71:67">count_transient_filter</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:93"><expr pos:start="73:9" pos:end="73:92"><name pos:start="73:9" pos:end="73:30"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:30">max_gain_adjustment</name></name> <operator pos:start="73:32" pos:end="73:32">=</operator> <call pos:start="73:34" pos:end="73:92"><name pos:start="73:34" pos:end="73:38">FFMIN</name><argument_list pos:start="73:39" pos:end="73:92">(<argument pos:start="73:40" pos:end="73:61"><expr pos:start="73:40" pos:end="73:61"><name pos:start="73:40" pos:end="73:61"><name pos:start="73:40" pos:end="73:40">s</name><operator pos:start="73:41" pos:end="73:42">-&gt;</operator><name pos:start="73:43" pos:end="73:61">max_gain_adjustment</name></name></expr></argument>, <argument pos:start="73:64" pos:end="73:91"><expr pos:start="73:64" pos:end="73:91"><call pos:start="73:64" pos:end="73:91"><name pos:start="73:64" pos:end="73:74">GAINTOFLOAT</name><argument_list pos:start="73:75" pos:end="73:91">(<argument pos:start="73:76" pos:end="73:90"><expr pos:start="73:76" pos:end="73:90"><name pos:start="73:76" pos:end="73:90"><name pos:start="73:76" pos:end="73:80">state</name><operator pos:start="73:81" pos:end="73:82">-&gt;</operator><name pos:start="73:83" pos:end="73:90">max_gain</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="79:45"><expr pos:start="75:9" pos:end="79:44"><name pos:start="75:9" pos:end="75:21"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:21">det_errors</name></name> <operator pos:start="75:23" pos:end="75:24">+=</operator> <name pos:start="75:26" pos:end="75:52"><name pos:start="75:26" pos:end="75:30">state</name><operator pos:start="75:31" pos:end="75:32">-&gt;</operator><name pos:start="75:33" pos:end="75:52">code_counterA_almost</name></name>

            <operator pos:start="77:13" pos:end="77:13">+</operator> <name pos:start="77:15" pos:end="77:45"><name pos:start="77:15" pos:end="77:19">state</name><operator pos:start="77:20" pos:end="77:21">-&gt;</operator><name pos:start="77:22" pos:end="77:45">code_counterB_checkfails</name></name>

            <operator pos:start="79:13" pos:end="79:13">+</operator> <name pos:start="79:15" pos:end="79:44"><name pos:start="79:15" pos:end="79:19">state</name><operator pos:start="79:20" pos:end="79:21">-&gt;</operator><name pos:start="79:22" pos:end="79:44">code_counterC_unmatched</name></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="83:5" pos:end="99:5"><if pos:start="83:5" pos:end="95:5">if <condition pos:start="83:8" pos:end="83:19">(<expr pos:start="83:9" pos:end="83:18"><name pos:start="83:9" pos:end="83:18">pe_packets</name></expr>)</condition> <block pos:start="83:21" pos:end="95:5">{<block_content pos:start="87:9" pos:end="93:50">

        <comment type="block" pos:start="85:9" pos:end="85:66">/* if every valid packet has used PE, call it permanent */</comment>

        <if_stmt pos:start="87:9" pos:end="93:50"><if pos:start="87:9" pos:end="89:47">if <condition pos:start="87:12" pos:end="87:34">(<expr pos:start="87:13" pos:end="87:33"><name pos:start="87:13" pos:end="87:19">packets</name> <operator pos:start="87:21" pos:end="87:22">==</operator> <name pos:start="87:24" pos:end="87:33">pe_packets</name></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:47"><block_content pos:start="89:13" pos:end="89:47">

            <expr_stmt pos:start="89:13" pos:end="89:47"><expr pos:start="89:13" pos:end="89:46"><name pos:start="89:13" pos:end="89:26"><name pos:start="89:13" pos:end="89:13">s</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:26">peak_extend</name></name> <operator pos:start="89:28" pos:end="89:28">=</operator> <name pos:start="89:30" pos:end="89:46">HDCD_PE_PERMANENT</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="91:9" pos:end="93:50">else<block type="pseudo" pos:start="93:13" pos:end="93:50"><block_content pos:start="93:13" pos:end="93:50">

            <expr_stmt pos:start="93:13" pos:end="93:50"><expr pos:start="93:13" pos:end="93:49"><name pos:start="93:13" pos:end="93:26"><name pos:start="93:13" pos:end="93:13">s</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:26">peak_extend</name></name> <operator pos:start="93:28" pos:end="93:28">=</operator> <name pos:start="93:30" pos:end="93:49">HDCD_PE_INTERMITTENT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="95:7" pos:end="99:5">else <block pos:start="95:12" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:39">

        <expr_stmt pos:start="97:9" pos:end="97:39"><expr pos:start="97:9" pos:end="97:38"><name pos:start="97:9" pos:end="97:22"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:22">peak_extend</name></name> <operator pos:start="97:24" pos:end="97:24">=</operator> <name pos:start="97:26" pos:end="97:38">HDCD_PE_NEVER</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="101:5" pos:end="103:36">/* HDCD is detected if a valid packet is active in all (both)

     * channels at the same time. */</comment>

    <if_stmt pos:start="105:5" pos:end="105:57"><if pos:start="105:5" pos:end="105:57">if <condition pos:start="105:8" pos:end="105:35">(<expr pos:start="105:9" pos:end="105:34"><name pos:start="105:9" pos:end="105:14">detect</name> <operator pos:start="105:16" pos:end="105:17">==</operator> <name pos:start="105:19" pos:end="105:34"><name pos:start="105:19" pos:end="105:24">inlink</name><operator pos:start="105:25" pos:end="105:26">-&gt;</operator><name pos:start="105:27" pos:end="105:34">channels</name></name></expr>)</condition><block type="pseudo" pos:start="105:37" pos:end="105:57"><block_content pos:start="105:37" pos:end="105:57"> <expr_stmt pos:start="105:37" pos:end="105:57"><expr pos:start="105:37" pos:end="105:56"><name pos:start="105:37" pos:end="105:52"><name pos:start="105:37" pos:end="105:37">s</name><operator pos:start="105:38" pos:end="105:39">-&gt;</operator><name pos:start="105:40" pos:end="105:52">hdcd_detected</name></name> <operator pos:start="105:54" pos:end="105:54">=</operator> <literal type="number" pos:start="105:56" pos:end="105:56">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:53"><expr pos:start="109:5" pos:end="109:52"><name pos:start="109:5" pos:end="109:19"><name pos:start="109:5" pos:end="109:5">s</name><operator pos:start="109:6" pos:end="109:7">-&gt;</operator><name pos:start="109:8" pos:end="109:19">sample_count</name></name> <operator pos:start="109:21" pos:end="109:22">+=</operator> <name pos:start="109:24" pos:end="109:37"><name pos:start="109:24" pos:end="109:25">in</name><operator pos:start="109:26" pos:end="109:27">-&gt;</operator><name pos:start="109:28" pos:end="109:37">nb_samples</name></name> <operator pos:start="109:39" pos:end="109:39">*</operator> <name pos:start="109:41" pos:end="109:52"><name pos:start="109:41" pos:end="109:42">in</name><operator pos:start="109:43" pos:end="109:44">-&gt;</operator><name pos:start="109:45" pos:end="109:52">channels</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:23"><expr pos:start="113:5" pos:end="113:22"><call pos:start="113:5" pos:end="113:22"><name pos:start="113:5" pos:end="113:17">av_frame_free</name><argument_list pos:start="113:18" pos:end="113:22">(<argument pos:start="113:19" pos:end="113:21"><expr pos:start="113:19" pos:end="113:21"><operator pos:start="113:19" pos:end="113:19">&amp;</operator><name pos:start="113:20" pos:end="113:21">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="115:5" pos:end="115:41">return <expr pos:start="115:12" pos:end="115:40"><call pos:start="115:12" pos:end="115:40"><name pos:start="115:12" pos:end="115:26">ff_filter_frame</name><argument_list pos:start="115:27" pos:end="115:40">(<argument pos:start="115:28" pos:end="115:34"><expr pos:start="115:28" pos:end="115:34"><name pos:start="115:28" pos:end="115:34">outlink</name></expr></argument>, <argument pos:start="115:37" pos:end="115:39"><expr pos:start="115:37" pos:end="115:39"><name pos:start="115:37" pos:end="115:39">out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
