<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8394.c" pos:tabs="8"><function pos:start="1:1" pos:end="193:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">sd_create</name><parameter_list pos:start="1:21" pos:end="3:34">(<parameter pos:start="1:22" pos:end="1:41"><decl pos:start="1:22" pos:end="1:41"><type pos:start="1:22" pos:end="1:41"><specifier pos:start="1:22" pos:end="1:26">const</specifier> <name pos:start="1:28" pos:end="1:31">char</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:41">filename</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:71"><decl pos:start="1:44" pos:end="1:71"><type pos:start="1:44" pos:end="1:71"><name pos:start="1:44" pos:end="1:62">QEMUOptionParameter</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:71">options</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:33"><decl pos:start="3:22" pos:end="3:33"><type pos:start="3:22" pos:end="3:33"><name pos:start="3:22" pos:end="3:26">Error</name> <modifier pos:start="3:28" pos:end="3:28">*</modifier><modifier pos:start="3:29" pos:end="3:29">*</modifier></type><name pos:start="3:30" pos:end="3:33">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="193:1">{<block_content pos:start="7:5" pos:end="191:15">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">vid</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:22">backing_file</name> <init pos:start="11:24" pos:end="11:29">= <expr pos:start="11:26" pos:end="11:29"><name pos:start="11:26" pos:end="11:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:21">BDRVSheepdogState</name> <modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:24">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:33"><decl pos:start="15:5" pos:end="15:32"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">char</name></type> <name pos:start="15:10" pos:end="15:32"><name pos:start="15:10" pos:end="15:12">tag</name><index pos:start="15:13" pos:end="15:32">[<expr pos:start="15:14" pos:end="15:31"><name pos:start="15:14" pos:end="15:31">SD_MAX_VDI_TAG_LEN</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:19">snapid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">bool</name></type> <name pos:start="19:10" pos:end="19:17">prealloc</name> <init pos:start="19:19" pos:end="19:25">= <expr pos:start="19:21" pos:end="19:25"><name pos:start="19:21" pos:end="19:25">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:9">Error</name> <modifier pos:start="21:11" pos:end="21:11">*</modifier></type><name pos:start="21:12" pos:end="21:20">local_err</name> <init pos:start="21:22" pos:end="21:27">= <expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:45"><expr pos:start="25:5" pos:end="25:44"><name pos:start="25:5" pos:end="25:5">s</name> <operator pos:start="25:7" pos:end="25:7">=</operator> <call pos:start="25:9" pos:end="25:44"><name pos:start="25:9" pos:end="25:17">g_malloc0</name><argument_list pos:start="25:18" pos:end="25:44">(<argument pos:start="25:19" pos:end="25:43"><expr pos:start="25:19" pos:end="25:43"><sizeof pos:start="25:19" pos:end="25:43">sizeof<argument_list pos:start="25:25" pos:end="25:43">(<argument pos:start="25:26" pos:end="25:42"><expr pos:start="25:26" pos:end="25:42"><name pos:start="25:26" pos:end="25:42">BDRVSheepdogState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:32"><expr pos:start="29:5" pos:end="29:31"><call pos:start="29:5" pos:end="29:31"><name pos:start="29:5" pos:end="29:10">memset</name><argument_list pos:start="29:11" pos:end="29:31">(<argument pos:start="29:12" pos:end="29:14"><expr pos:start="29:12" pos:end="29:14"><name pos:start="29:12" pos:end="29:14">tag</name></expr></argument>, <argument pos:start="29:17" pos:end="29:17"><expr pos:start="29:17" pos:end="29:17"><literal type="number" pos:start="29:17" pos:end="29:17">0</literal></expr></argument>, <argument pos:start="29:20" pos:end="29:30"><expr pos:start="29:20" pos:end="29:30"><sizeof pos:start="29:20" pos:end="29:30">sizeof<argument_list pos:start="29:26" pos:end="29:30">(<argument pos:start="29:27" pos:end="29:29"><expr pos:start="29:27" pos:end="29:29"><name pos:start="29:27" pos:end="29:29">tag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:32">(<expr pos:start="31:9" pos:end="31:31"><call pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:14">strstr</name><argument_list pos:start="31:15" pos:end="31:31">(<argument pos:start="31:16" pos:end="31:23"><expr pos:start="31:16" pos:end="31:23"><name pos:start="31:16" pos:end="31:23">filename</name></expr></argument>, <argument pos:start="31:26" pos:end="31:30"><expr pos:start="31:26" pos:end="31:30"><literal type="string" pos:start="31:26" pos:end="31:30">"://"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:34" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:63">

        <expr_stmt pos:start="33:9" pos:end="33:63"><expr pos:start="33:9" pos:end="33:62"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <call pos:start="33:15" pos:end="33:62"><name pos:start="33:15" pos:end="33:26">sd_parse_uri</name><argument_list pos:start="33:27" pos:end="33:62">(<argument pos:start="33:28" pos:end="33:28"><expr pos:start="33:28" pos:end="33:28"><name pos:start="33:28" pos:end="33:28">s</name></expr></argument>, <argument pos:start="33:31" pos:end="33:38"><expr pos:start="33:31" pos:end="33:38"><name pos:start="33:31" pos:end="33:38">filename</name></expr></argument>, <argument pos:start="33:41" pos:end="33:47"><expr pos:start="33:41" pos:end="33:47"><name pos:start="33:41" pos:end="33:47"><name pos:start="33:41" pos:end="33:41">s</name><operator pos:start="33:42" pos:end="33:43">-&gt;</operator><name pos:start="33:44" pos:end="33:47">name</name></name></expr></argument>, <argument pos:start="33:50" pos:end="33:56"><expr pos:start="33:50" pos:end="33:56"><operator pos:start="33:50" pos:end="33:50">&amp;</operator><name pos:start="33:51" pos:end="33:56">snapid</name></expr></argument>, <argument pos:start="33:59" pos:end="33:61"><expr pos:start="33:59" pos:end="33:61"><name pos:start="33:59" pos:end="33:61">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="35:7" pos:end="39:5">else <block pos:start="35:12" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:64">

        <expr_stmt pos:start="37:9" pos:end="37:64"><expr pos:start="37:9" pos:end="37:63"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="37:63"><name pos:start="37:15" pos:end="37:27">parse_vdiname</name><argument_list pos:start="37:28" pos:end="37:63">(<argument pos:start="37:29" pos:end="37:29"><expr pos:start="37:29" pos:end="37:29"><name pos:start="37:29" pos:end="37:29">s</name></expr></argument>, <argument pos:start="37:32" pos:end="37:39"><expr pos:start="37:32" pos:end="37:39"><name pos:start="37:32" pos:end="37:39">filename</name></expr></argument>, <argument pos:start="37:42" pos:end="37:48"><expr pos:start="37:42" pos:end="37:48"><name pos:start="37:42" pos:end="37:48"><name pos:start="37:42" pos:end="37:42">s</name><operator pos:start="37:43" pos:end="37:44">-&gt;</operator><name pos:start="37:45" pos:end="37:48">name</name></name></expr></argument>, <argument pos:start="37:51" pos:end="37:57"><expr pos:start="37:51" pos:end="37:57"><operator pos:start="37:51" pos:end="37:51">&amp;</operator><name pos:start="37:52" pos:end="37:57">snapid</name></expr></argument>, <argument pos:start="37:60" pos:end="37:62"><expr pos:start="37:60" pos:end="37:62"><name pos:start="37:60" pos:end="37:62">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:16">(<expr pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">&lt;</operator> <literal type="number" pos:start="41:15" pos:end="41:15">0</literal></expr>)</condition> <block pos:start="41:18" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:17">

        <goto pos:start="43:9" pos:end="43:17">goto <name pos:start="43:14" pos:end="43:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <while pos:start="49:5" pos:end="95:5">while <condition pos:start="49:11" pos:end="49:36">(<expr pos:start="49:12" pos:end="49:35"><name pos:start="49:12" pos:end="49:18">options</name> <operator pos:start="49:20" pos:end="49:21">&amp;&amp;</operator> <name pos:start="49:23" pos:end="49:35"><name pos:start="49:23" pos:end="49:29">options</name><operator pos:start="49:30" pos:end="49:31">-&gt;</operator><name pos:start="49:32" pos:end="49:35">name</name></name></expr>)</condition> <block pos:start="49:38" pos:end="95:5">{<block_content pos:start="51:9" pos:end="93:18">

        <if_stmt pos:start="51:9" pos:end="91:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:51">(<expr pos:start="51:13" pos:end="51:50"><operator pos:start="51:13" pos:end="51:13">!</operator><call pos:start="51:14" pos:end="51:50"><name pos:start="51:14" pos:end="51:19">strcmp</name><argument_list pos:start="51:20" pos:end="51:50">(<argument pos:start="51:21" pos:end="51:33"><expr pos:start="51:21" pos:end="51:33"><name pos:start="51:21" pos:end="51:33"><name pos:start="51:21" pos:end="51:27">options</name><operator pos:start="51:28" pos:end="51:29">-&gt;</operator><name pos:start="51:30" pos:end="51:33">name</name></name></expr></argument>, <argument pos:start="51:36" pos:end="51:49"><expr pos:start="51:36" pos:end="51:49"><name pos:start="51:36" pos:end="51:49">BLOCK_OPT_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:53" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:49">

            <expr_stmt pos:start="53:13" pos:end="53:49"><expr pos:start="53:13" pos:end="53:48"><name pos:start="53:13" pos:end="53:29"><name pos:start="53:13" pos:end="53:13">s</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:20">inode</name><operator pos:start="53:21" pos:end="53:21">.</operator><name pos:start="53:22" pos:end="53:29">vdi_size</name></name> <operator pos:start="53:31" pos:end="53:31">=</operator> <name pos:start="53:33" pos:end="53:48"><name pos:start="53:33" pos:end="53:39">options</name><operator pos:start="53:40" pos:end="53:41">-&gt;</operator><name pos:start="53:42" pos:end="53:46">value</name><operator pos:start="53:47" pos:end="53:47">.</operator><name pos:start="53:48" pos:end="53:48">n</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="55:11" pos:end="59:9">else if <condition pos:start="55:19" pos:end="55:66">(<expr pos:start="55:20" pos:end="55:65"><operator pos:start="55:20" pos:end="55:20">!</operator><call pos:start="55:21" pos:end="55:65"><name pos:start="55:21" pos:end="55:26">strcmp</name><argument_list pos:start="55:27" pos:end="55:65">(<argument pos:start="55:28" pos:end="55:40"><expr pos:start="55:28" pos:end="55:40"><name pos:start="55:28" pos:end="55:40"><name pos:start="55:28" pos:end="55:34">options</name><operator pos:start="55:35" pos:end="55:36">-&gt;</operator><name pos:start="55:37" pos:end="55:40">name</name></name></expr></argument>, <argument pos:start="55:43" pos:end="55:64"><expr pos:start="55:43" pos:end="55:64"><name pos:start="55:43" pos:end="55:64">BLOCK_OPT_BACKING_FILE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:68" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:44">

            <expr_stmt pos:start="57:13" pos:end="57:44"><expr pos:start="57:13" pos:end="57:43"><name pos:start="57:13" pos:end="57:24">backing_file</name> <operator pos:start="57:26" pos:end="57:26">=</operator> <name pos:start="57:28" pos:end="57:43"><name pos:start="57:28" pos:end="57:34">options</name><operator pos:start="57:35" pos:end="57:36">-&gt;</operator><name pos:start="57:37" pos:end="57:41">value</name><operator pos:start="57:42" pos:end="57:42">.</operator><name pos:start="57:43" pos:end="57:43">s</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="59:11" pos:end="81:9">else if <condition pos:start="59:19" pos:end="59:62">(<expr pos:start="59:20" pos:end="59:61"><operator pos:start="59:20" pos:end="59:20">!</operator><call pos:start="59:21" pos:end="59:61"><name pos:start="59:21" pos:end="59:26">strcmp</name><argument_list pos:start="59:27" pos:end="59:61">(<argument pos:start="59:28" pos:end="59:40"><expr pos:start="59:28" pos:end="59:40"><name pos:start="59:28" pos:end="59:40"><name pos:start="59:28" pos:end="59:34">options</name><operator pos:start="59:35" pos:end="59:36">-&gt;</operator><name pos:start="59:37" pos:end="59:40">name</name></name></expr></argument>, <argument pos:start="59:43" pos:end="59:60"><expr pos:start="59:43" pos:end="59:60"><name pos:start="59:43" pos:end="59:60">BLOCK_OPT_PREALLOC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:64" pos:end="81:9">{<block_content pos:start="61:13" pos:end="79:13">

            <if_stmt pos:start="61:13" pos:end="79:13"><if pos:start="61:13" pos:end="65:13">if <condition pos:start="61:16" pos:end="61:70">(<expr pos:start="61:17" pos:end="61:69"><operator pos:start="61:17" pos:end="61:17">!</operator><name pos:start="61:18" pos:end="61:33"><name pos:start="61:18" pos:end="61:24">options</name><operator pos:start="61:25" pos:end="61:26">-&gt;</operator><name pos:start="61:27" pos:end="61:31">value</name><operator pos:start="61:32" pos:end="61:32">.</operator><name pos:start="61:33" pos:end="61:33">s</name></name> <operator pos:start="61:35" pos:end="61:36">||</operator> <operator pos:start="61:38" pos:end="61:38">!</operator><call pos:start="61:39" pos:end="61:69"><name pos:start="61:39" pos:end="61:44">strcmp</name><argument_list pos:start="61:45" pos:end="61:69">(<argument pos:start="61:46" pos:end="61:61"><expr pos:start="61:46" pos:end="61:61"><name pos:start="61:46" pos:end="61:61"><name pos:start="61:46" pos:end="61:52">options</name><operator pos:start="61:53" pos:end="61:54">-&gt;</operator><name pos:start="61:55" pos:end="61:59">value</name><operator pos:start="61:60" pos:end="61:60">.</operator><name pos:start="61:61" pos:end="61:61">s</name></name></expr></argument>, <argument pos:start="61:64" pos:end="61:68"><expr pos:start="61:64" pos:end="61:68"><literal type="string" pos:start="61:64" pos:end="61:68">"off"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:72" pos:end="65:13">{<block_content pos:start="63:17" pos:end="63:33">

                <expr_stmt pos:start="63:17" pos:end="63:33"><expr pos:start="63:17" pos:end="63:32"><name pos:start="63:17" pos:end="63:24">prealloc</name> <operator pos:start="63:26" pos:end="63:26">=</operator> <name pos:start="63:28" pos:end="63:32">false</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="65:15" pos:end="69:13">else if <condition pos:start="65:23" pos:end="65:57">(<expr pos:start="65:24" pos:end="65:56"><operator pos:start="65:24" pos:end="65:24">!</operator><call pos:start="65:25" pos:end="65:56"><name pos:start="65:25" pos:end="65:30">strcmp</name><argument_list pos:start="65:31" pos:end="65:56">(<argument pos:start="65:32" pos:end="65:47"><expr pos:start="65:32" pos:end="65:47"><name pos:start="65:32" pos:end="65:47"><name pos:start="65:32" pos:end="65:38">options</name><operator pos:start="65:39" pos:end="65:40">-&gt;</operator><name pos:start="65:41" pos:end="65:45">value</name><operator pos:start="65:46" pos:end="65:46">.</operator><name pos:start="65:47" pos:end="65:47">s</name></name></expr></argument>, <argument pos:start="65:50" pos:end="65:55"><expr pos:start="65:50" pos:end="65:55"><literal type="string" pos:start="65:50" pos:end="65:55">"full"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:59" pos:end="69:13">{<block_content pos:start="67:17" pos:end="67:32">

                <expr_stmt pos:start="67:17" pos:end="67:32"><expr pos:start="67:17" pos:end="67:31"><name pos:start="67:17" pos:end="67:24">prealloc</name> <operator pos:start="67:26" pos:end="67:26">=</operator> <name pos:start="67:28" pos:end="67:31">true</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="69:15" pos:end="79:13">else <block pos:start="69:20" pos:end="79:13">{<block_content pos:start="71:17" pos:end="77:25">

                <expr_stmt pos:start="71:17" pos:end="73:47"><expr pos:start="71:17" pos:end="73:46"><call pos:start="71:17" pos:end="73:46"><name pos:start="71:17" pos:end="71:28">error_report</name><argument_list pos:start="71:29" pos:end="73:46">(<argument pos:start="71:30" pos:end="71:63"><expr pos:start="71:30" pos:end="71:63"><literal type="string" pos:start="71:30" pos:end="71:63">"Invalid preallocation mode: '%s'"</literal></expr></argument>,

                             <argument pos:start="73:30" pos:end="73:45"><expr pos:start="73:30" pos:end="73:45"><name pos:start="73:30" pos:end="73:45"><name pos:start="73:30" pos:end="73:36">options</name><operator pos:start="73:37" pos:end="73:38">-&gt;</operator><name pos:start="73:39" pos:end="73:43">value</name><operator pos:start="73:44" pos:end="73:44">.</operator><name pos:start="73:45" pos:end="73:45">s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="75:17" pos:end="75:30"><expr pos:start="75:17" pos:end="75:29"><name pos:start="75:17" pos:end="75:19">ret</name> <operator pos:start="75:21" pos:end="75:21">=</operator> <operator pos:start="75:23" pos:end="75:23">-</operator><name pos:start="75:24" pos:end="75:29">EINVAL</name></expr>;</expr_stmt>

                <goto pos:start="77:17" pos:end="77:25">goto <name pos:start="77:22" pos:end="77:24">out</name>;</goto>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="81:11" pos:end="91:9">else if <condition pos:start="81:19" pos:end="81:64">(<expr pos:start="81:20" pos:end="81:63"><operator pos:start="81:20" pos:end="81:20">!</operator><call pos:start="81:21" pos:end="81:63"><name pos:start="81:21" pos:end="81:26">strcmp</name><argument_list pos:start="81:27" pos:end="81:63">(<argument pos:start="81:28" pos:end="81:40"><expr pos:start="81:28" pos:end="81:40"><name pos:start="81:28" pos:end="81:40"><name pos:start="81:28" pos:end="81:34">options</name><operator pos:start="81:35" pos:end="81:36">-&gt;</operator><name pos:start="81:37" pos:end="81:40">name</name></name></expr></argument>, <argument pos:start="81:43" pos:end="81:62"><expr pos:start="81:43" pos:end="81:62"><name pos:start="81:43" pos:end="81:62">BLOCK_OPT_REDUNDANCY</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:66" pos:end="91:9">{<block_content pos:start="83:13" pos:end="89:13">

            <expr_stmt pos:start="83:13" pos:end="83:56"><expr pos:start="83:13" pos:end="83:55"><name pos:start="83:13" pos:end="83:15">ret</name> <operator pos:start="83:17" pos:end="83:17">=</operator> <call pos:start="83:19" pos:end="83:55"><name pos:start="83:19" pos:end="83:34">parse_redundancy</name><argument_list pos:start="83:35" pos:end="83:55">(<argument pos:start="83:36" pos:end="83:36"><expr pos:start="83:36" pos:end="83:36"><name pos:start="83:36" pos:end="83:36">s</name></expr></argument>, <argument pos:start="83:39" pos:end="83:54"><expr pos:start="83:39" pos:end="83:54"><name pos:start="83:39" pos:end="83:54"><name pos:start="83:39" pos:end="83:45">options</name><operator pos:start="83:46" pos:end="83:47">-&gt;</operator><name pos:start="83:48" pos:end="83:52">value</name><operator pos:start="83:53" pos:end="83:53">.</operator><name pos:start="83:54" pos:end="83:54">s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="85:13" pos:end="89:13"><if pos:start="85:13" pos:end="89:13">if <condition pos:start="85:16" pos:end="85:24">(<expr pos:start="85:17" pos:end="85:23"><name pos:start="85:17" pos:end="85:19">ret</name> <operator pos:start="85:21" pos:end="85:21">&lt;</operator> <literal type="number" pos:start="85:23" pos:end="85:23">0</literal></expr>)</condition> <block pos:start="85:26" pos:end="89:13">{<block_content pos:start="87:17" pos:end="87:25">

                <goto pos:start="87:17" pos:end="87:25">goto <name pos:start="87:22" pos:end="87:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:18"><expr pos:start="93:9" pos:end="93:17"><name pos:start="93:9" pos:end="93:15">options</name><operator pos:start="93:16" pos:end="93:17">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="99:5" pos:end="107:5"><if pos:start="99:5" pos:end="107:5">if <condition pos:start="99:8" pos:end="99:44">(<expr pos:start="99:9" pos:end="99:43"><name pos:start="99:9" pos:end="99:25"><name pos:start="99:9" pos:end="99:9">s</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:16">inode</name><operator pos:start="99:17" pos:end="99:17">.</operator><name pos:start="99:18" pos:end="99:25">vdi_size</name></name> <operator pos:start="99:27" pos:end="99:27">&gt;</operator> <name pos:start="99:29" pos:end="99:43">SD_MAX_VDI_SIZE</name></expr>)</condition> <block pos:start="99:46" pos:end="107:5">{<block_content pos:start="101:9" pos:end="105:17">

        <expr_stmt pos:start="101:9" pos:end="101:43"><expr pos:start="101:9" pos:end="101:42"><call pos:start="101:9" pos:end="101:42"><name pos:start="101:9" pos:end="101:20">error_report</name><argument_list pos:start="101:21" pos:end="101:42">(<argument pos:start="101:22" pos:end="101:41"><expr pos:start="101:22" pos:end="101:41"><literal type="string" pos:start="101:22" pos:end="101:41">"too big image size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:22"><expr pos:start="103:9" pos:end="103:21"><name pos:start="103:9" pos:end="103:11">ret</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <operator pos:start="103:15" pos:end="103:15">-</operator><name pos:start="103:16" pos:end="103:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="105:9" pos:end="105:17">goto <name pos:start="105:14" pos:end="105:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="111:5" pos:end="171:5"><if pos:start="111:5" pos:end="171:5">if <condition pos:start="111:8" pos:end="111:21">(<expr pos:start="111:9" pos:end="111:20"><name pos:start="111:9" pos:end="111:20">backing_file</name></expr>)</condition> <block pos:start="111:23" pos:end="171:5">{<block_content pos:start="113:9" pos:end="169:23">

        <decl_stmt pos:start="113:9" pos:end="113:29"><decl pos:start="113:9" pos:end="113:28"><type pos:start="113:9" pos:end="113:26"><name pos:start="113:9" pos:end="113:24">BlockDriverState</name> <modifier pos:start="113:26" pos:end="113:26">*</modifier></type><name pos:start="113:27" pos:end="113:28">bs</name></decl>;</decl_stmt>

        <decl_stmt pos:start="115:9" pos:end="115:29"><decl pos:start="115:9" pos:end="115:28"><type pos:start="115:9" pos:end="115:27"><name pos:start="115:9" pos:end="115:25">BDRVSheepdogState</name> <modifier pos:start="115:27" pos:end="115:27">*</modifier></type><name pos:start="115:28" pos:end="115:28">s</name></decl>;</decl_stmt>

        <decl_stmt pos:start="117:9" pos:end="117:25"><decl pos:start="117:9" pos:end="117:24"><type pos:start="117:9" pos:end="117:21"><name pos:start="117:9" pos:end="117:19">BlockDriver</name> <modifier pos:start="117:21" pos:end="117:21">*</modifier></type><name pos:start="117:22" pos:end="117:24">drv</name></decl>;</decl_stmt>



        <comment type="block" pos:start="121:9" pos:end="121:66">/* Currently, only Sheepdog backing image is supported. */</comment>

        <expr_stmt pos:start="123:9" pos:end="123:53"><expr pos:start="123:9" pos:end="123:52"><name pos:start="123:9" pos:end="123:11">drv</name> <operator pos:start="123:13" pos:end="123:13">=</operator> <call pos:start="123:15" pos:end="123:52"><name pos:start="123:15" pos:end="123:32">bdrv_find_protocol</name><argument_list pos:start="123:33" pos:end="123:52">(<argument pos:start="123:34" pos:end="123:45"><expr pos:start="123:34" pos:end="123:45"><name pos:start="123:34" pos:end="123:45">backing_file</name></expr></argument>, <argument pos:start="123:48" pos:end="123:51"><expr pos:start="123:48" pos:end="123:51"><name pos:start="123:48" pos:end="123:51">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="125:9" pos:end="133:9"><if pos:start="125:9" pos:end="133:9">if <condition pos:start="125:12" pos:end="125:64">(<expr pos:start="125:13" pos:end="125:63"><operator pos:start="125:13" pos:end="125:13">!</operator><name pos:start="125:14" pos:end="125:16">drv</name> <operator pos:start="125:18" pos:end="125:19">||</operator> <call pos:start="125:21" pos:end="125:58"><name pos:start="125:21" pos:end="125:26">strcmp</name><argument_list pos:start="125:27" pos:end="125:58">(<argument pos:start="125:28" pos:end="125:45"><expr pos:start="125:28" pos:end="125:45"><name pos:start="125:28" pos:end="125:45"><name pos:start="125:28" pos:end="125:30">drv</name><operator pos:start="125:31" pos:end="125:32">-&gt;</operator><name pos:start="125:33" pos:end="125:45">protocol_name</name></name></expr></argument>, <argument pos:start="125:48" pos:end="125:57"><expr pos:start="125:48" pos:end="125:57"><literal type="string" pos:start="125:48" pos:end="125:57">"sheepdog"</literal></expr></argument>)</argument_list></call> <operator pos:start="125:60" pos:end="125:61">!=</operator> <literal type="number" pos:start="125:63" pos:end="125:63">0</literal></expr>)</condition> <block pos:start="125:66" pos:end="133:9">{<block_content pos:start="127:13" pos:end="131:21">

            <expr_stmt pos:start="127:13" pos:end="127:66"><expr pos:start="127:13" pos:end="127:65"><call pos:start="127:13" pos:end="127:65"><name pos:start="127:13" pos:end="127:24">error_report</name><argument_list pos:start="127:25" pos:end="127:65">(<argument pos:start="127:26" pos:end="127:64"><expr pos:start="127:26" pos:end="127:64"><literal type="string" pos:start="127:26" pos:end="127:64">"backing_file must be a sheepdog image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:26"><expr pos:start="129:13" pos:end="129:25"><name pos:start="129:13" pos:end="129:15">ret</name> <operator pos:start="129:17" pos:end="129:17">=</operator> <operator pos:start="129:19" pos:end="129:19">-</operator><name pos:start="129:20" pos:end="129:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="131:13" pos:end="131:21">goto <name pos:start="131:18" pos:end="131:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="137:9" pos:end="137:69"><expr pos:start="137:9" pos:end="137:68"><name pos:start="137:9" pos:end="137:11">ret</name> <operator pos:start="137:13" pos:end="137:13">=</operator> <call pos:start="137:15" pos:end="137:68"><name pos:start="137:15" pos:end="137:28">bdrv_file_open</name><argument_list pos:start="137:29" pos:end="137:68">(<argument pos:start="137:30" pos:end="137:32"><expr pos:start="137:30" pos:end="137:32"><operator pos:start="137:30" pos:end="137:30">&amp;</operator><name pos:start="137:31" pos:end="137:32">bs</name></expr></argument>, <argument pos:start="137:35" pos:end="137:46"><expr pos:start="137:35" pos:end="137:46"><name pos:start="137:35" pos:end="137:46">backing_file</name></expr></argument>, <argument pos:start="137:49" pos:end="137:52"><expr pos:start="137:49" pos:end="137:52"><name pos:start="137:49" pos:end="137:52">NULL</name></expr></argument>, <argument pos:start="137:55" pos:end="137:55"><expr pos:start="137:55" pos:end="137:55"><literal type="number" pos:start="137:55" pos:end="137:55">0</literal></expr></argument>, <argument pos:start="137:58" pos:end="137:67"><expr pos:start="137:58" pos:end="137:67"><operator pos:start="137:58" pos:end="137:58">&amp;</operator><name pos:start="137:59" pos:end="137:67">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="139:9" pos:end="147:9"><if pos:start="139:9" pos:end="147:9">if <condition pos:start="139:12" pos:end="139:20">(<expr pos:start="139:13" pos:end="139:19"><name pos:start="139:13" pos:end="139:15">ret</name> <operator pos:start="139:17" pos:end="139:17">&lt;</operator> <literal type="number" pos:start="139:19" pos:end="139:19">0</literal></expr>)</condition> <block pos:start="139:22" pos:end="147:9">{<block_content pos:start="141:13" pos:end="145:21">

            <expr_stmt pos:start="141:13" pos:end="141:41"><expr pos:start="141:13" pos:end="141:40"><call pos:start="141:13" pos:end="141:40"><name pos:start="141:13" pos:end="141:29">qerror_report_err</name><argument_list pos:start="141:30" pos:end="141:40">(<argument pos:start="141:31" pos:end="141:39"><expr pos:start="141:31" pos:end="141:39"><name pos:start="141:31" pos:end="141:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:34"><expr pos:start="143:13" pos:end="143:33"><call pos:start="143:13" pos:end="143:33"><name pos:start="143:13" pos:end="143:22">error_free</name><argument_list pos:start="143:23" pos:end="143:33">(<argument pos:start="143:24" pos:end="143:32"><expr pos:start="143:24" pos:end="143:32"><name pos:start="143:24" pos:end="143:32">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="145:13" pos:end="145:21">goto <name pos:start="145:18" pos:end="145:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="151:9" pos:end="151:23"><expr pos:start="151:9" pos:end="151:22"><name pos:start="151:9" pos:end="151:9">s</name> <operator pos:start="151:11" pos:end="151:11">=</operator> <name pos:start="151:13" pos:end="151:22"><name pos:start="151:13" pos:end="151:14">bs</name><operator pos:start="151:15" pos:end="151:16">-&gt;</operator><name pos:start="151:17" pos:end="151:22">opaque</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="155:9" pos:end="165:9"><if pos:start="155:9" pos:end="165:9">if <condition pos:start="155:12" pos:end="155:36">(<expr pos:start="155:13" pos:end="155:35"><operator pos:start="155:13" pos:end="155:13">!</operator><call pos:start="155:14" pos:end="155:35"><name pos:start="155:14" pos:end="155:24">is_snapshot</name><argument_list pos:start="155:25" pos:end="155:35">(<argument pos:start="155:26" pos:end="155:34"><expr pos:start="155:26" pos:end="155:34"><operator pos:start="155:26" pos:end="155:26">&amp;</operator><name pos:start="155:27" pos:end="155:34"><name pos:start="155:27" pos:end="155:27">s</name><operator pos:start="155:28" pos:end="155:29">-&gt;</operator><name pos:start="155:30" pos:end="155:34">inode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="155:38" pos:end="165:9">{<block_content pos:start="157:13" pos:end="163:21">

            <expr_stmt pos:start="157:13" pos:end="157:65"><expr pos:start="157:13" pos:end="157:64"><call pos:start="157:13" pos:end="157:64"><name pos:start="157:13" pos:end="157:24">error_report</name><argument_list pos:start="157:25" pos:end="157:64">(<argument pos:start="157:26" pos:end="157:63"><expr pos:start="157:26" pos:end="157:63"><literal type="string" pos:start="157:26" pos:end="157:63">"cannot clone from a non snapshot vdi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:27"><expr pos:start="159:13" pos:end="159:26"><call pos:start="159:13" pos:end="159:26"><name pos:start="159:13" pos:end="159:22">bdrv_unref</name><argument_list pos:start="159:23" pos:end="159:26">(<argument pos:start="159:24" pos:end="159:25"><expr pos:start="159:24" pos:end="159:25"><name pos:start="159:24" pos:end="159:25">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:26"><expr pos:start="161:13" pos:end="161:25"><name pos:start="161:13" pos:end="161:15">ret</name> <operator pos:start="161:17" pos:end="161:17">=</operator> <operator pos:start="161:19" pos:end="161:19">-</operator><name pos:start="161:20" pos:end="161:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="163:13" pos:end="163:21">goto <name pos:start="163:18" pos:end="163:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="169:9" pos:end="169:23"><expr pos:start="169:9" pos:end="169:22"><call pos:start="169:9" pos:end="169:22"><name pos:start="169:9" pos:end="169:18">bdrv_unref</name><argument_list pos:start="169:19" pos:end="169:22">(<argument pos:start="169:20" pos:end="169:21"><expr pos:start="169:20" pos:end="169:21"><name pos:start="169:20" pos:end="169:21">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="175:5" pos:end="175:35"><expr pos:start="175:5" pos:end="175:34"><name pos:start="175:5" pos:end="175:7">ret</name> <operator pos:start="175:9" pos:end="175:9">=</operator> <call pos:start="175:11" pos:end="175:34"><name pos:start="175:11" pos:end="175:22">do_sd_create</name><argument_list pos:start="175:23" pos:end="175:34">(<argument pos:start="175:24" pos:end="175:24"><expr pos:start="175:24" pos:end="175:24"><name pos:start="175:24" pos:end="175:24">s</name></expr></argument>, <argument pos:start="175:27" pos:end="175:30"><expr pos:start="175:27" pos:end="175:30"><operator pos:start="175:27" pos:end="175:27">&amp;</operator><name pos:start="175:28" pos:end="175:30">vid</name></expr></argument>, <argument pos:start="175:33" pos:end="175:33"><expr pos:start="175:33" pos:end="175:33"><literal type="number" pos:start="175:33" pos:end="175:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="177:5" pos:end="181:5"><if pos:start="177:5" pos:end="181:5">if <condition pos:start="177:8" pos:end="177:25">(<expr pos:start="177:9" pos:end="177:24"><operator pos:start="177:9" pos:end="177:9">!</operator><name pos:start="177:10" pos:end="177:17">prealloc</name> <operator pos:start="177:19" pos:end="177:20">||</operator> <name pos:start="177:22" pos:end="177:24">ret</name></expr>)</condition> <block pos:start="177:27" pos:end="181:5">{<block_content pos:start="179:9" pos:end="179:17">

        <goto pos:start="179:9" pos:end="179:17">goto <name pos:start="179:14" pos:end="179:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="185:5" pos:end="185:32"><expr pos:start="185:5" pos:end="185:31"><name pos:start="185:5" pos:end="185:7">ret</name> <operator pos:start="185:9" pos:end="185:9">=</operator> <call pos:start="185:11" pos:end="185:31"><name pos:start="185:11" pos:end="185:21">sd_prealloc</name><argument_list pos:start="185:22" pos:end="185:31">(<argument pos:start="185:23" pos:end="185:30"><expr pos:start="185:23" pos:end="185:30"><name pos:start="185:23" pos:end="185:30">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="187:1" pos:end="187:4"><name pos:start="187:1" pos:end="187:3">out</name>:</label>

    <expr_stmt pos:start="189:5" pos:end="189:14"><expr pos:start="189:5" pos:end="189:13"><call pos:start="189:5" pos:end="189:13"><name pos:start="189:5" pos:end="189:10">g_free</name><argument_list pos:start="189:11" pos:end="189:13">(<argument pos:start="189:12" pos:end="189:12"><expr pos:start="189:12" pos:end="189:12"><name pos:start="189:12" pos:end="189:12">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="191:5" pos:end="191:15">return <expr pos:start="191:12" pos:end="191:14"><name pos:start="191:12" pos:end="191:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
