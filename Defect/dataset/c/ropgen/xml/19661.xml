<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19661.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:25">avresample_set_matrix</name><parameter_list pos:start="1:26" pos:end="3:37">(<parameter pos:start="1:27" pos:end="1:53"><decl pos:start="1:27" pos:end="1:53"><type pos:start="1:27" pos:end="1:53"><name pos:start="1:27" pos:end="1:48">AVAudioResampleContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:53">avr</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:75"><decl pos:start="1:56" pos:end="1:75"><type pos:start="1:56" pos:end="1:75"><specifier pos:start="1:56" pos:end="1:60">const</specifier> <name pos:start="1:62" pos:end="1:67">double</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:75">matrix</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:36"><decl pos:start="3:27" pos:end="3:36"><type pos:start="3:27" pos:end="3:36"><name pos:start="3:27" pos:end="3:29">int</name></type> <name pos:start="3:31" pos:end="3:36">stride</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="105:1">{<block_content pos:start="7:5" pos:end="103:13">

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:19">in_channels</name></decl>, <decl pos:start="7:22" pos:end="7:33"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:22" pos:end="7:33">out_channels</name></decl>, <decl pos:start="7:36" pos:end="7:36"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:36" pos:end="7:36">i</name></decl>, <decl pos:start="7:39" pos:end="7:39"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:39" pos:end="7:39">o</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:77"><expr pos:start="11:5" pos:end="11:76"><name pos:start="11:5" pos:end="11:15">in_channels</name>  <operator pos:start="11:18" pos:end="11:18">=</operator> <call pos:start="11:20" pos:end="11:76"><name pos:start="11:20" pos:end="11:52">av_get_channel_layout_nb_channels</name><argument_list pos:start="11:53" pos:end="11:76">(<argument pos:start="11:54" pos:end="11:75"><expr pos:start="11:54" pos:end="11:75"><name pos:start="11:54" pos:end="11:75"><name pos:start="11:54" pos:end="11:56">avr</name><operator pos:start="11:57" pos:end="11:58">-&gt;</operator><name pos:start="11:59" pos:end="11:75">in_channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:78"><expr pos:start="13:5" pos:end="13:77"><name pos:start="13:5" pos:end="13:16">out_channels</name> <operator pos:start="13:18" pos:end="13:18">=</operator> <call pos:start="13:20" pos:end="13:77"><name pos:start="13:20" pos:end="13:52">av_get_channel_layout_nb_channels</name><argument_list pos:start="13:53" pos:end="13:77">(<argument pos:start="13:54" pos:end="13:76"><expr pos:start="13:54" pos:end="13:76"><name pos:start="13:54" pos:end="13:76"><name pos:start="13:54" pos:end="13:56">avr</name><operator pos:start="13:57" pos:end="13:58">-&gt;</operator><name pos:start="13:59" pos:end="13:76">out_channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="25:5"><if pos:start="17:5" pos:end="25:5">if <condition pos:start="17:8" pos:end="19:67">( <expr pos:start="17:10" pos:end="19:66"><name pos:start="17:10" pos:end="17:42"><name pos:start="17:10" pos:end="17:20">in_channels</name> <argument_list type="generic" pos:start="17:22" pos:end="17:42">&lt; <argument pos:start="17:24" pos:end="17:40"><expr pos:start="17:24" pos:end="17:40"><literal type="number" pos:start="17:24" pos:end="17:24">0</literal> <operator pos:start="17:26" pos:end="17:27">||</operator>  <name pos:start="17:30" pos:end="17:40">in_channels</name></expr></argument> &gt;</argument_list></name> <name pos:start="17:44" pos:end="17:66">AVRESAMPLE_MAX_CHANNELS</name> <operator pos:start="17:68" pos:end="17:69">||</operator>

        <name pos:start="19:9" pos:end="19:42"><name pos:start="19:9" pos:end="19:20">out_channels</name> <argument_list type="generic" pos:start="19:22" pos:end="19:42">&lt; <argument pos:start="19:24" pos:end="19:40"><expr pos:start="19:24" pos:end="19:40"><literal type="number" pos:start="19:24" pos:end="19:24">0</literal> <operator pos:start="19:26" pos:end="19:27">||</operator> <name pos:start="19:29" pos:end="19:40">out_channels</name></expr></argument> &gt;</argument_list></name> <name pos:start="19:44" pos:end="19:66">AVRESAMPLE_MAX_CHANNELS</name></expr>)</condition> <block pos:start="19:69" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:31">

        <expr_stmt pos:start="21:9" pos:end="21:63"><expr pos:start="21:9" pos:end="21:62"><call pos:start="21:9" pos:end="21:62"><name pos:start="21:9" pos:end="21:14">av_log</name><argument_list pos:start="21:15" pos:end="21:62">(<argument pos:start="21:16" pos:end="21:18"><expr pos:start="21:16" pos:end="21:18"><name pos:start="21:16" pos:end="21:18">avr</name></expr></argument>, <argument pos:start="21:21" pos:end="21:32"><expr pos:start="21:21" pos:end="21:32"><name pos:start="21:21" pos:end="21:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="21:35" pos:end="21:61"><expr pos:start="21:35" pos:end="21:61"><literal type="string" pos:start="21:35" pos:end="21:61">"Invalid channel layouts\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:31">return <expr pos:start="23:16" pos:end="23:30"><call pos:start="23:16" pos:end="23:30"><name pos:start="23:16" pos:end="23:22">AVERROR</name><argument_list pos:start="23:23" pos:end="23:30">(<argument pos:start="23:24" pos:end="23:29"><expr pos:start="23:24" pos:end="23:29"><name pos:start="23:24" pos:end="23:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="64:0"><if pos:start="29:5" pos:end="64:0">if <condition pos:start="29:8" pos:end="29:24">(<expr pos:start="29:9" pos:end="29:23"><name pos:start="29:9" pos:end="29:23"><name pos:start="29:9" pos:end="29:11">avr</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:15">am</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:23">matrix</name></name></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="64:0"><block_content pos:start="31:9" pos:end="64:0">

        <expr_stmt pos:start="31:9" pos:end="64:0"><expr pos:start="31:9" pos:end="31:33"><call pos:start="31:9" pos:end="31:33"><name pos:start="31:9" pos:end="31:16">av_freep</name><argument_list pos:start="31:17" pos:end="31:33">(<argument pos:start="31:18" pos:end="31:32"><expr pos:start="31:18" pos:end="31:32"><name pos:start="31:18" pos:end="31:32"><name pos:start="31:18" pos:end="31:20">avr</name><operator pos:start="31:21" pos:end="31:22">-&gt;</operator><name pos:start="31:23" pos:end="31:24">am</name><operator pos:start="31:25" pos:end="31:26">-&gt;</operator><name pos:start="31:27" pos:end="31:32">matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<cpp:define pos:start="35:1" pos:end="63:55">#<cpp:directive pos:start="35:2" pos:end="35:7">define</cpp:directive> <cpp:macro pos:start="35:9" pos:end="35:34"><name pos:start="35:9" pos:end="35:22">CONVERT_MATRIX</name><parameter_list pos:start="35:23" pos:end="35:34">(<parameter pos:start="35:24" pos:end="35:27"><type pos:start="35:24" pos:end="35:27"><name pos:start="35:24" pos:end="35:27">type</name></type></parameter>, <parameter pos:start="35:30" pos:end="35:33"><type pos:start="35:30" pos:end="35:33"><name pos:start="35:30" pos:end="35:33">expr</name></type></parameter>)</parameter_list></cpp:macro>                                          \

    <cpp:value pos:start="37:5" pos:end="63:55">avr-&gt;am-&gt;matrix_## type[0] = av_mallocz(out_channels * in_channels *    \

                                            sizeof(*avr-&gt;am-&gt;matrix_## type[0])); \

    if (!avr-&gt;am-&gt;matrix_## type[0])                                        \

        return AVERROR(ENOMEM);                                             \

    for (o = 0; o &lt; out_channels; o++) {                                    \

        if (o &gt; 0)                                                          \

            avr-&gt;am-&gt;matrix_## type[o] = avr-&gt;am-&gt;matrix_## type[o - 1] +   \

                                         in_channels;                       \

        for (i = 0; i &lt; in_channels; i++) {                                 \

            double v = matrix[o * stride + i];                              \

            avr-&gt;am-&gt;matrix_## type[o][i] = expr;                           \

        }                                                                   \

    }                                                                       \

    avr-&gt;am-&gt;matrix = (void **)avr-&gt;am-&gt;matrix_## type;</cpp:value></cpp:define>



    <switch pos:start="67:5" pos:end="93:5">switch <condition pos:start="67:12" pos:end="67:32">(<expr pos:start="67:13" pos:end="67:31"><name pos:start="67:13" pos:end="67:31"><name pos:start="67:13" pos:end="67:15">avr</name><operator pos:start="67:16" pos:end="67:17">-&gt;</operator><name pos:start="67:18" pos:end="67:31">mix_coeff_type</name></name></expr>)</condition> <block pos:start="67:34" pos:end="93:5">{<block_content pos:start="69:5" pos:end="91:31">

    <case pos:start="69:5" pos:end="69:30">case <expr pos:start="69:10" pos:end="69:29"><name pos:start="69:10" pos:end="69:29">AV_MIX_COEFF_TYPE_Q8</name></expr>:</case>

        <macro pos:start="71:9" pos:end="71:59"><name pos:start="71:9" pos:end="71:22">CONVERT_MATRIX</name><argument_list pos:start="71:23" pos:end="71:59">(<argument pos:start="71:24" pos:end="71:25">q8</argument>, <argument pos:start="71:28" pos:end="71:58">av_clip_int16(lrint(<literal type="number" pos:start="71:48" pos:end="71:52">256.0</literal> * v))</argument>)</argument_list></macro>

        <break pos:start="73:9" pos:end="73:14">break;</break>

    <case pos:start="75:5" pos:end="75:31">case <expr pos:start="75:10" pos:end="75:30"><name pos:start="75:10" pos:end="75:30">AV_MIX_COEFF_TYPE_Q15</name></expr>:</case>

        <macro pos:start="77:9" pos:end="77:64"><name pos:start="77:9" pos:end="77:22">CONVERT_MATRIX</name><argument_list pos:start="77:23" pos:end="77:64">(<argument pos:start="77:24" pos:end="77:26">q15</argument>, <argument pos:start="77:29" pos:end="77:63">av_clipl_int32(llrint(<literal type="number" pos:start="77:51" pos:end="77:57">32768.0</literal> * v))</argument>)</argument_list></macro>

        <break pos:start="79:9" pos:end="79:14">break;</break>

    <case pos:start="81:5" pos:end="81:31">case <expr pos:start="81:10" pos:end="81:30"><name pos:start="81:10" pos:end="81:30">AV_MIX_COEFF_TYPE_FLT</name></expr>:</case>

        <macro pos:start="83:9" pos:end="83:30"><name pos:start="83:9" pos:end="83:22">CONVERT_MATRIX</name><argument_list pos:start="83:23" pos:end="83:30">(<argument pos:start="83:24" pos:end="83:26">flt</argument>, <argument pos:start="83:29" pos:end="83:29">v</argument>)</argument_list></macro>

        <break pos:start="85:9" pos:end="85:14">break;</break>

    <default pos:start="87:5" pos:end="87:12">default:</default>

        <expr_stmt pos:start="89:9" pos:end="89:62"><expr pos:start="89:9" pos:end="89:61"><call pos:start="89:9" pos:end="89:61"><name pos:start="89:9" pos:end="89:14">av_log</name><argument_list pos:start="89:15" pos:end="89:61">(<argument pos:start="89:16" pos:end="89:18"><expr pos:start="89:16" pos:end="89:18"><name pos:start="89:16" pos:end="89:18">avr</name></expr></argument>, <argument pos:start="89:21" pos:end="89:32"><expr pos:start="89:21" pos:end="89:32"><name pos:start="89:21" pos:end="89:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="89:35" pos:end="89:60"><expr pos:start="89:35" pos:end="89:60"><literal type="string" pos:start="89:35" pos:end="89:60">"Invalid mix coeff type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="91:9" pos:end="91:31">return <expr pos:start="91:16" pos:end="91:30"><call pos:start="91:16" pos:end="91:30"><name pos:start="91:16" pos:end="91:22">AVERROR</name><argument_list pos:start="91:23" pos:end="91:30">(<argument pos:start="91:24" pos:end="91:29"><expr pos:start="91:24" pos:end="91:29"><name pos:start="91:24" pos:end="91:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></switch>



    <comment type="block" pos:start="97:5" pos:end="99:72">/* TODO: detect situations where we can just swap around pointers

             instead of doing matrix multiplications with 0.0 and 1.0 */</comment>



    <return pos:start="103:5" pos:end="103:13">return <expr pos:start="103:12" pos:end="103:12"><literal type="number" pos:start="103:12" pos:end="103:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
