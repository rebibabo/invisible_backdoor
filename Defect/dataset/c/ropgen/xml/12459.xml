<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12459.c" pos:tabs="8"><function pos:start="1:1" pos:end="581:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">vnc_display_open</name><parameter_list pos:start="1:22" pos:end="1:51">(<parameter pos:start="1:23" pos:end="1:36"><decl pos:start="1:23" pos:end="1:36"><type pos:start="1:23" pos:end="1:36"><specifier pos:start="1:23" pos:end="1:27">const</specifier> <name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:36">id</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:50"><decl pos:start="1:39" pos:end="1:50"><type pos:start="1:39" pos:end="1:50"><name pos:start="1:39" pos:end="1:43">Error</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier><modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:50">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="581:1">{<block_content pos:start="5:5" pos:end="580:0">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">VncDisplay</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:18">vs</name> <init pos:start="5:20" pos:end="5:41">= <expr pos:start="5:22" pos:end="5:41"><call pos:start="5:22" pos:end="5:41"><name pos:start="5:22" pos:end="5:37">vnc_display_find</name><argument_list pos:start="5:38" pos:end="5:41">(<argument pos:start="5:39" pos:end="5:40"><expr pos:start="5:39" pos:end="5:40"><name pos:start="5:39" pos:end="5:40">id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:56"><decl pos:start="7:5" pos:end="7:55"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">QemuOpts</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:18">opts</name> <init pos:start="7:20" pos:end="7:55">= <expr pos:start="7:22" pos:end="7:55"><call pos:start="7:22" pos:end="7:55"><name pos:start="7:22" pos:end="7:35">qemu_opts_find</name><argument_list pos:start="7:36" pos:end="7:55">(<argument pos:start="7:37" pos:end="7:50"><expr pos:start="7:37" pos:end="7:50"><operator pos:start="7:37" pos:end="7:37">&amp;</operator><name pos:start="7:38" pos:end="7:50">qemu_vnc_opts</name></expr></argument>, <argument pos:start="7:53" pos:end="7:54"><expr pos:start="7:53" pos:end="7:54"><name pos:start="7:53" pos:end="7:54">id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">QemuOpts</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:19">sopts</name></decl>, <decl pos:start="9:22" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:14"><modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:28">wsopts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:21">share</name></decl>, <decl pos:start="11:24" pos:end="11:33"><type ref="prev" pos:start="11:5" pos:end="11:16"><modifier pos:start="11:24" pos:end="11:24">*</modifier></type><name pos:start="11:25" pos:end="11:33">device_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">QemuConsole</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:20">con</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:17">password</name> <init pos:start="15:19" pos:end="15:25">= <expr pos:start="15:21" pos:end="15:25"><name pos:start="15:21" pos:end="15:25">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">bool</name></type> <name pos:start="17:10" pos:end="17:16">reverse</name> <init pos:start="17:18" pos:end="17:24">= <expr pos:start="17:20" pos:end="17:24"><name pos:start="17:20" pos:end="17:24">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:16"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:14">char</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:19">vnc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:16"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:14">char</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:22">has_to</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:12"><decl pos:start="23:5" pos:end="23:11"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:8">char</name> <modifier pos:start="23:10" pos:end="23:10">*</modifier></type><name pos:start="23:11" pos:end="23:11">h</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:26"><decl pos:start="25:5" pos:end="25:25"><type pos:start="25:5" pos:end="25:8"><name pos:start="25:5" pos:end="25:8">bool</name></type> <name pos:start="25:10" pos:end="25:17">has_ipv4</name> <init pos:start="25:19" pos:end="25:25">= <expr pos:start="25:21" pos:end="25:25"><name pos:start="25:21" pos:end="25:25">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:26"><decl pos:start="27:5" pos:end="27:25"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">bool</name></type> <name pos:start="27:10" pos:end="27:17">has_ipv6</name> <init pos:start="27:19" pos:end="27:25">= <expr pos:start="27:21" pos:end="27:25"><name pos:start="27:21" pos:end="27:25">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:26"><decl pos:start="29:5" pos:end="29:25"><type pos:start="29:5" pos:end="29:16"><specifier pos:start="29:5" pos:end="29:9">const</specifier> <name pos:start="29:11" pos:end="29:14">char</name> <modifier pos:start="29:16" pos:end="29:16">*</modifier></type><name pos:start="29:17" pos:end="29:25">websocket</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="34:0"><decl pos:start="31:5" pos:end="31:20"><type pos:start="31:5" pos:end="31:8"><name pos:start="31:5" pos:end="31:8">bool</name></type> <name pos:start="31:10" pos:end="31:12">tls</name> <init pos:start="31:14" pos:end="31:20">= <expr pos:start="31:16" pos:end="31:20"><name pos:start="31:16" pos:end="31:20">false</name></expr></init></decl>, <decl pos:start="31:23" pos:end="31:34"><type ref="prev" pos:start="31:5" pos:end="31:8"/><name pos:start="31:23" pos:end="31:26">x509</name> <init pos:start="31:28" pos:end="31:34">= <expr pos:start="31:30" pos:end="31:34"><name pos:start="31:30" pos:end="31:34">false</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:start="33:1" pos:end="33:21">#<cpp:directive pos:start="33:2" pos:end="33:6">ifdef</cpp:directive> <name pos:start="33:8" pos:end="33:21">CONFIG_VNC_TLS</name></cpp:ifdef>

    <decl_stmt pos:start="35:5" pos:end="38:0"><decl pos:start="35:5" pos:end="35:20"><type pos:start="35:5" pos:end="35:16"><specifier pos:start="35:5" pos:end="35:9">const</specifier> <name pos:start="35:11" pos:end="35:14">char</name> <modifier pos:start="35:16" pos:end="35:16">*</modifier></type><name pos:start="35:17" pos:end="35:20">path</name></decl>;</decl_stmt>

<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="39:5" pos:end="42:0"><decl pos:start="39:5" pos:end="39:21"><type pos:start="39:5" pos:end="39:8"><name pos:start="39:5" pos:end="39:8">bool</name></type> <name pos:start="39:10" pos:end="39:13">sasl</name> <init pos:start="39:15" pos:end="39:21">= <expr pos:start="39:17" pos:end="39:21"><name pos:start="39:17" pos:end="39:21">false</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:start="41:1" pos:end="41:22">#<cpp:directive pos:start="41:2" pos:end="41:6">ifdef</cpp:directive> <name pos:start="41:8" pos:end="41:22">CONFIG_VNC_SASL</name></cpp:ifdef>

    <decl_stmt pos:start="43:5" pos:end="48:0"><decl pos:start="43:5" pos:end="43:15"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:15">saslErr</name></decl>;</decl_stmt>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="47:1" pos:end="47:55">#<cpp:directive pos:start="47:2" pos:end="47:3">if</cpp:directive> <expr pos:start="47:5" pos:end="47:55"><call pos:start="47:5" pos:end="47:27"><name pos:start="47:5" pos:end="47:11">defined</name><argument_list pos:start="47:12" pos:end="47:27">(<argument pos:start="47:13" pos:end="47:26"><expr pos:start="47:13" pos:end="47:26"><name pos:start="47:13" pos:end="47:26">CONFIG_VNC_TLS</name></expr></argument>)</argument_list></call> <operator pos:start="47:29" pos:end="47:30">||</operator> <call pos:start="47:32" pos:end="47:55"><name pos:start="47:32" pos:end="47:38">defined</name><argument_list pos:start="47:39" pos:end="47:55">(<argument pos:start="47:40" pos:end="47:54"><expr pos:start="47:40" pos:end="47:54"><name pos:start="47:40" pos:end="47:54">CONFIG_VNC_SASL</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="49:5" pos:end="52:0"><decl pos:start="49:5" pos:end="49:15"><type pos:start="49:5" pos:end="49:7"><name pos:start="49:5" pos:end="49:7">int</name></type> <name pos:start="49:9" pos:end="49:11">acl</name> <init pos:start="49:13" pos:end="49:15">= <expr pos:start="49:15" pos:end="49:15"><literal type="number" pos:start="49:15" pos:end="49:15">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="51:1" pos:end="51:6">#<cpp:directive pos:start="51:2" pos:end="51:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="53:5" pos:end="53:26"><decl pos:start="53:5" pos:end="53:25"><type pos:start="53:5" pos:end="53:7"><name pos:start="53:5" pos:end="53:7">int</name></type> <name pos:start="53:9" pos:end="53:21">lock_key_sync</name> <init pos:start="53:23" pos:end="53:25">= <expr pos:start="53:25" pos:end="53:25"><literal type="number" pos:start="53:25" pos:end="53:25">1</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:12">(<expr pos:start="57:9" pos:end="57:11"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:11">vs</name></expr>)</condition> <block pos:start="57:14" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:15">

        <expr_stmt pos:start="59:9" pos:end="59:51"><expr pos:start="59:9" pos:end="59:50"><call pos:start="59:9" pos:end="59:50"><name pos:start="59:9" pos:end="59:18">error_setg</name><argument_list pos:start="59:19" pos:end="59:50">(<argument pos:start="59:20" pos:end="59:23"><expr pos:start="59:20" pos:end="59:23"><name pos:start="59:20" pos:end="59:23">errp</name></expr></argument>, <argument pos:start="59:26" pos:end="59:49"><expr pos:start="59:26" pos:end="59:49"><literal type="string" pos:start="59:26" pos:end="59:49">"VNC display not active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:26"><expr pos:start="65:5" pos:end="65:25"><call pos:start="65:5" pos:end="65:25"><name pos:start="65:5" pos:end="65:21">vnc_display_close</name><argument_list pos:start="65:22" pos:end="65:25">(<argument pos:start="65:23" pos:end="65:24"><expr pos:start="65:23" pos:end="65:24"><name pos:start="65:23" pos:end="65:24">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="69:5" pos:end="73:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:14">(<expr pos:start="69:9" pos:end="69:13"><operator pos:start="69:9" pos:end="69:9">!</operator><name pos:start="69:10" pos:end="69:13">opts</name></expr>)</condition> <block pos:start="69:16" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:15">

        <return pos:start="71:9" pos:end="71:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:36"><expr pos:start="75:5" pos:end="75:35"><name pos:start="75:5" pos:end="75:7">vnc</name> <operator pos:start="75:9" pos:end="75:9">=</operator> <call pos:start="75:11" pos:end="75:35"><name pos:start="75:11" pos:end="75:22">qemu_opt_get</name><argument_list pos:start="75:23" pos:end="75:35">(<argument pos:start="75:24" pos:end="75:27"><expr pos:start="75:24" pos:end="75:27"><name pos:start="75:24" pos:end="75:27">opts</name></expr></argument>, <argument pos:start="75:30" pos:end="75:34"><expr pos:start="75:30" pos:end="75:34"><literal type="string" pos:start="75:30" pos:end="75:34">"vnc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:41">(<expr pos:start="77:9" pos:end="77:40"><operator pos:start="77:9" pos:end="77:9">!</operator><name pos:start="77:10" pos:end="77:12">vnc</name> <operator pos:start="77:14" pos:end="77:15">||</operator> <call pos:start="77:17" pos:end="77:35"><name pos:start="77:17" pos:end="77:22">strcmp</name><argument_list pos:start="77:23" pos:end="77:35">(<argument pos:start="77:24" pos:end="77:26"><expr pos:start="77:24" pos:end="77:26"><name pos:start="77:24" pos:end="77:26">vnc</name></expr></argument>, <argument pos:start="77:29" pos:end="77:34"><expr pos:start="77:29" pos:end="77:34"><literal type="string" pos:start="77:29" pos:end="77:34">"none"</literal></expr></argument>)</argument_list></call> <operator pos:start="77:37" pos:end="77:38">==</operator> <literal type="number" pos:start="77:40" pos:end="77:40">0</literal></expr>)</condition> <block pos:start="77:43" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:15">

        <return pos:start="79:9" pos:end="79:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:70"><expr pos:start="85:5" pos:end="85:69"><name pos:start="85:5" pos:end="85:9">sopts</name> <operator pos:start="85:11" pos:end="85:11">=</operator> <call pos:start="85:13" pos:end="85:69"><name pos:start="85:13" pos:end="85:28">qemu_opts_create</name><argument_list pos:start="85:29" pos:end="85:69">(<argument pos:start="85:30" pos:end="85:45"><expr pos:start="85:30" pos:end="85:45"><operator pos:start="85:30" pos:end="85:30">&amp;</operator><name pos:start="85:31" pos:end="85:45">socket_optslist</name></expr></argument>, <argument pos:start="85:48" pos:end="85:51"><expr pos:start="85:48" pos:end="85:51"><name pos:start="85:48" pos:end="85:51">NULL</name></expr></argument>, <argument pos:start="85:54" pos:end="85:54"><expr pos:start="85:54" pos:end="85:54"><literal type="number" pos:start="85:54" pos:end="85:54">0</literal></expr></argument>, <argument pos:start="85:57" pos:end="85:68"><expr pos:start="85:57" pos:end="85:68"><operator pos:start="85:57" pos:end="85:57">&amp;</operator><name pos:start="85:58" pos:end="85:68">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:71"><expr pos:start="87:5" pos:end="87:70"><name pos:start="87:5" pos:end="87:10">wsopts</name> <operator pos:start="87:12" pos:end="87:12">=</operator> <call pos:start="87:14" pos:end="87:70"><name pos:start="87:14" pos:end="87:29">qemu_opts_create</name><argument_list pos:start="87:30" pos:end="87:70">(<argument pos:start="87:31" pos:end="87:46"><expr pos:start="87:31" pos:end="87:46"><operator pos:start="87:31" pos:end="87:31">&amp;</operator><name pos:start="87:32" pos:end="87:46">socket_optslist</name></expr></argument>, <argument pos:start="87:49" pos:end="87:52"><expr pos:start="87:49" pos:end="87:52"><name pos:start="87:49" pos:end="87:52">NULL</name></expr></argument>, <argument pos:start="87:55" pos:end="87:55"><expr pos:start="87:55" pos:end="87:55"><literal type="number" pos:start="87:55" pos:end="87:55">0</literal></expr></argument>, <argument pos:start="87:58" pos:end="87:69"><expr pos:start="87:58" pos:end="87:69"><operator pos:start="87:58" pos:end="87:58">&amp;</operator><name pos:start="87:59" pos:end="87:69">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:26"><expr pos:start="91:5" pos:end="91:25"><name pos:start="91:5" pos:end="91:5">h</name> <operator pos:start="91:7" pos:end="91:7">=</operator> <call pos:start="91:9" pos:end="91:25"><name pos:start="91:9" pos:end="91:15">strrchr</name><argument_list pos:start="91:16" pos:end="91:25">(<argument pos:start="91:17" pos:end="91:19"><expr pos:start="91:17" pos:end="91:19"><name pos:start="91:17" pos:end="91:19">vnc</name></expr></argument>, <argument pos:start="91:22" pos:end="91:24"><expr pos:start="91:22" pos:end="91:24"><literal type="char" pos:start="91:22" pos:end="91:24">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="111:5"><if pos:start="93:5" pos:end="105:5">if <condition pos:start="93:8" pos:end="93:10">(<expr pos:start="93:9" pos:end="93:9"><name pos:start="93:9" pos:end="93:9">h</name></expr>)</condition> <block pos:start="93:12" pos:end="105:5">{<block_content pos:start="95:9" pos:end="103:21">

        <decl_stmt pos:start="95:9" pos:end="95:45"><decl pos:start="95:9" pos:end="95:44"><type pos:start="95:9" pos:end="95:14"><name pos:start="95:9" pos:end="95:12">char</name> <modifier pos:start="95:14" pos:end="95:14">*</modifier></type><name pos:start="95:15" pos:end="95:18">host</name> <init pos:start="95:20" pos:end="95:44">= <expr pos:start="95:22" pos:end="95:44"><call pos:start="95:22" pos:end="95:44"><name pos:start="95:22" pos:end="95:30">g_strndup</name><argument_list pos:start="95:31" pos:end="95:44">(<argument pos:start="95:32" pos:end="95:34"><expr pos:start="95:32" pos:end="95:34"><name pos:start="95:32" pos:end="95:34">vnc</name></expr></argument>, <argument pos:start="95:37" pos:end="95:43"><expr pos:start="95:37" pos:end="95:43"><name pos:start="95:37" pos:end="95:37">h</name> <operator pos:start="95:39" pos:end="95:39">-</operator> <name pos:start="95:41" pos:end="95:43">vnc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:56"><expr pos:start="97:9" pos:end="97:55"><call pos:start="97:9" pos:end="97:55"><name pos:start="97:9" pos:end="97:20">qemu_opt_set</name><argument_list pos:start="97:21" pos:end="97:55">(<argument pos:start="97:22" pos:end="97:26"><expr pos:start="97:22" pos:end="97:26"><name pos:start="97:22" pos:end="97:26">sopts</name></expr></argument>, <argument pos:start="97:29" pos:end="97:34"><expr pos:start="97:29" pos:end="97:34"><literal type="string" pos:start="97:29" pos:end="97:34">"host"</literal></expr></argument>, <argument pos:start="97:37" pos:end="97:40"><expr pos:start="97:37" pos:end="97:40"><name pos:start="97:37" pos:end="97:40">host</name></expr></argument>, <argument pos:start="97:43" pos:end="97:54"><expr pos:start="97:43" pos:end="97:54"><operator pos:start="97:43" pos:end="97:43">&amp;</operator><name pos:start="97:44" pos:end="97:54">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:57"><expr pos:start="99:9" pos:end="99:56"><call pos:start="99:9" pos:end="99:56"><name pos:start="99:9" pos:end="99:20">qemu_opt_set</name><argument_list pos:start="99:21" pos:end="99:56">(<argument pos:start="99:22" pos:end="99:27"><expr pos:start="99:22" pos:end="99:27"><name pos:start="99:22" pos:end="99:27">wsopts</name></expr></argument>, <argument pos:start="99:30" pos:end="99:35"><expr pos:start="99:30" pos:end="99:35"><literal type="string" pos:start="99:30" pos:end="99:35">"host"</literal></expr></argument>, <argument pos:start="99:38" pos:end="99:41"><expr pos:start="99:38" pos:end="99:41"><name pos:start="99:38" pos:end="99:41">host</name></expr></argument>, <argument pos:start="99:44" pos:end="99:55"><expr pos:start="99:44" pos:end="99:55"><operator pos:start="99:44" pos:end="99:44">&amp;</operator><name pos:start="99:45" pos:end="99:55">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:55"><expr pos:start="101:9" pos:end="101:54"><call pos:start="101:9" pos:end="101:54"><name pos:start="101:9" pos:end="101:20">qemu_opt_set</name><argument_list pos:start="101:21" pos:end="101:54">(<argument pos:start="101:22" pos:end="101:26"><expr pos:start="101:22" pos:end="101:26"><name pos:start="101:22" pos:end="101:26">sopts</name></expr></argument>, <argument pos:start="101:29" pos:end="101:34"><expr pos:start="101:29" pos:end="101:34"><literal type="string" pos:start="101:29" pos:end="101:34">"port"</literal></expr></argument>, <argument pos:start="101:37" pos:end="101:39"><expr pos:start="101:37" pos:end="101:39"><name pos:start="101:37" pos:end="101:37">h</name><operator pos:start="101:38" pos:end="101:38">+</operator><literal type="number" pos:start="101:39" pos:end="101:39">1</literal></expr></argument>, <argument pos:start="101:42" pos:end="101:53"><expr pos:start="101:42" pos:end="101:53"><operator pos:start="101:42" pos:end="101:42">&amp;</operator><name pos:start="101:43" pos:end="101:53">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:21"><expr pos:start="103:9" pos:end="103:20"><call pos:start="103:9" pos:end="103:20"><name pos:start="103:9" pos:end="103:14">g_free</name><argument_list pos:start="103:15" pos:end="103:20">(<argument pos:start="103:16" pos:end="103:19"><expr pos:start="103:16" pos:end="103:19"><name pos:start="103:16" pos:end="103:19">host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="105:7" pos:end="111:5">else <block pos:start="105:12" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:18">

        <expr_stmt pos:start="107:9" pos:end="107:50"><expr pos:start="107:9" pos:end="107:49"><call pos:start="107:9" pos:end="107:49"><name pos:start="107:9" pos:end="107:18">error_setg</name><argument_list pos:start="107:19" pos:end="107:49">(<argument pos:start="107:20" pos:end="107:23"><expr pos:start="107:20" pos:end="107:23"><name pos:start="107:20" pos:end="107:23">errp</name></expr></argument>, <argument pos:start="107:26" pos:end="107:48"><expr pos:start="107:26" pos:end="107:48"><literal type="string" pos:start="107:26" pos:end="107:48">"no vnc port specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="109:9" pos:end="109:18">goto <name pos:start="109:14" pos:end="109:17">fail</name>;</goto>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:38"><expr pos:start="115:5" pos:end="115:37"><name pos:start="115:5" pos:end="115:10">has_to</name> <operator pos:start="115:12" pos:end="115:12">=</operator> <call pos:start="115:14" pos:end="115:37"><name pos:start="115:14" pos:end="115:25">qemu_opt_get</name><argument_list pos:start="115:26" pos:end="115:37">(<argument pos:start="115:27" pos:end="115:30"><expr pos:start="115:27" pos:end="115:30"><name pos:start="115:27" pos:end="115:30">opts</name></expr></argument>, <argument pos:start="115:33" pos:end="115:36"><expr pos:start="115:33" pos:end="115:36"><literal type="string" pos:start="115:33" pos:end="115:36">"to"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:54"><expr pos:start="117:5" pos:end="117:53"><name pos:start="117:5" pos:end="117:12">has_ipv4</name> <operator pos:start="117:14" pos:end="117:14">=</operator> <call pos:start="117:16" pos:end="117:53"><name pos:start="117:16" pos:end="117:32">qemu_opt_get_bool</name><argument_list pos:start="117:33" pos:end="117:53">(<argument pos:start="117:34" pos:end="117:37"><expr pos:start="117:34" pos:end="117:37"><name pos:start="117:34" pos:end="117:37">opts</name></expr></argument>, <argument pos:start="117:40" pos:end="117:45"><expr pos:start="117:40" pos:end="117:45"><literal type="string" pos:start="117:40" pos:end="117:45">"ipv4"</literal></expr></argument>, <argument pos:start="117:48" pos:end="117:52"><expr pos:start="117:48" pos:end="117:52"><name pos:start="117:48" pos:end="117:52">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:54"><expr pos:start="119:5" pos:end="119:53"><name pos:start="119:5" pos:end="119:12">has_ipv6</name> <operator pos:start="119:14" pos:end="119:14">=</operator> <call pos:start="119:16" pos:end="119:53"><name pos:start="119:16" pos:end="119:32">qemu_opt_get_bool</name><argument_list pos:start="119:33" pos:end="119:53">(<argument pos:start="119:34" pos:end="119:37"><expr pos:start="119:34" pos:end="119:37"><name pos:start="119:34" pos:end="119:37">opts</name></expr></argument>, <argument pos:start="119:40" pos:end="119:45"><expr pos:start="119:40" pos:end="119:45"><literal type="string" pos:start="119:40" pos:end="119:45">"ipv6"</literal></expr></argument>, <argument pos:start="119:48" pos:end="119:52"><expr pos:start="119:48" pos:end="119:52"><name pos:start="119:48" pos:end="119:52">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="127:5"><if pos:start="121:5" pos:end="127:5">if <condition pos:start="121:8" pos:end="121:15">(<expr pos:start="121:9" pos:end="121:14"><name pos:start="121:9" pos:end="121:14">has_to</name></expr>)</condition> <block pos:start="121:17" pos:end="127:5">{<block_content pos:start="123:9" pos:end="125:57">

        <expr_stmt pos:start="123:9" pos:end="123:56"><expr pos:start="123:9" pos:end="123:55"><call pos:start="123:9" pos:end="123:55"><name pos:start="123:9" pos:end="123:20">qemu_opt_set</name><argument_list pos:start="123:21" pos:end="123:55">(<argument pos:start="123:22" pos:end="123:26"><expr pos:start="123:22" pos:end="123:26"><name pos:start="123:22" pos:end="123:26">sopts</name></expr></argument>, <argument pos:start="123:29" pos:end="123:32"><expr pos:start="123:29" pos:end="123:32"><literal type="string" pos:start="123:29" pos:end="123:32">"to"</literal></expr></argument>, <argument pos:start="123:35" pos:end="123:40"><expr pos:start="123:35" pos:end="123:40"><name pos:start="123:35" pos:end="123:40">has_to</name></expr></argument>, <argument pos:start="123:43" pos:end="123:54"><expr pos:start="123:43" pos:end="123:54"><operator pos:start="123:43" pos:end="123:43">&amp;</operator><name pos:start="123:44" pos:end="123:54">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:57"><expr pos:start="125:9" pos:end="125:56"><call pos:start="125:9" pos:end="125:56"><name pos:start="125:9" pos:end="125:20">qemu_opt_set</name><argument_list pos:start="125:21" pos:end="125:56">(<argument pos:start="125:22" pos:end="125:27"><expr pos:start="125:22" pos:end="125:27"><name pos:start="125:22" pos:end="125:27">wsopts</name></expr></argument>, <argument pos:start="125:30" pos:end="125:33"><expr pos:start="125:30" pos:end="125:33"><literal type="string" pos:start="125:30" pos:end="125:33">"to"</literal></expr></argument>, <argument pos:start="125:36" pos:end="125:41"><expr pos:start="125:36" pos:end="125:41"><name pos:start="125:36" pos:end="125:41">has_to</name></expr></argument>, <argument pos:start="125:44" pos:end="125:55"><expr pos:start="125:44" pos:end="125:55"><operator pos:start="125:44" pos:end="125:44">&amp;</operator><name pos:start="125:45" pos:end="125:55">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="129:5" pos:end="135:5"><if pos:start="129:5" pos:end="135:5">if <condition pos:start="129:8" pos:end="129:17">(<expr pos:start="129:9" pos:end="129:16"><name pos:start="129:9" pos:end="129:16">has_ipv4</name></expr>)</condition> <block pos:start="129:19" pos:end="135:5">{<block_content pos:start="131:9" pos:end="133:57">

        <expr_stmt pos:start="131:9" pos:end="131:56"><expr pos:start="131:9" pos:end="131:55"><call pos:start="131:9" pos:end="131:55"><name pos:start="131:9" pos:end="131:20">qemu_opt_set</name><argument_list pos:start="131:21" pos:end="131:55">(<argument pos:start="131:22" pos:end="131:26"><expr pos:start="131:22" pos:end="131:26"><name pos:start="131:22" pos:end="131:26">sopts</name></expr></argument>, <argument pos:start="131:29" pos:end="131:34"><expr pos:start="131:29" pos:end="131:34"><literal type="string" pos:start="131:29" pos:end="131:34">"ipv4"</literal></expr></argument>, <argument pos:start="131:37" pos:end="131:40"><expr pos:start="131:37" pos:end="131:40"><literal type="string" pos:start="131:37" pos:end="131:40">"on"</literal></expr></argument>, <argument pos:start="131:43" pos:end="131:54"><expr pos:start="131:43" pos:end="131:54"><operator pos:start="131:43" pos:end="131:43">&amp;</operator><name pos:start="131:44" pos:end="131:54">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:57"><expr pos:start="133:9" pos:end="133:56"><call pos:start="133:9" pos:end="133:56"><name pos:start="133:9" pos:end="133:20">qemu_opt_set</name><argument_list pos:start="133:21" pos:end="133:56">(<argument pos:start="133:22" pos:end="133:27"><expr pos:start="133:22" pos:end="133:27"><name pos:start="133:22" pos:end="133:27">wsopts</name></expr></argument>, <argument pos:start="133:30" pos:end="133:35"><expr pos:start="133:30" pos:end="133:35"><literal type="string" pos:start="133:30" pos:end="133:35">"ipv4"</literal></expr></argument>, <argument pos:start="133:38" pos:end="133:41"><expr pos:start="133:38" pos:end="133:41"><literal type="string" pos:start="133:38" pos:end="133:41">"on"</literal></expr></argument>, <argument pos:start="133:44" pos:end="133:55"><expr pos:start="133:44" pos:end="133:55"><operator pos:start="133:44" pos:end="133:44">&amp;</operator><name pos:start="133:45" pos:end="133:55">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="137:5" pos:end="143:5"><if pos:start="137:5" pos:end="143:5">if <condition pos:start="137:8" pos:end="137:17">(<expr pos:start="137:9" pos:end="137:16"><name pos:start="137:9" pos:end="137:16">has_ipv6</name></expr>)</condition> <block pos:start="137:19" pos:end="143:5">{<block_content pos:start="139:9" pos:end="141:57">

        <expr_stmt pos:start="139:9" pos:end="139:56"><expr pos:start="139:9" pos:end="139:55"><call pos:start="139:9" pos:end="139:55"><name pos:start="139:9" pos:end="139:20">qemu_opt_set</name><argument_list pos:start="139:21" pos:end="139:55">(<argument pos:start="139:22" pos:end="139:26"><expr pos:start="139:22" pos:end="139:26"><name pos:start="139:22" pos:end="139:26">sopts</name></expr></argument>, <argument pos:start="139:29" pos:end="139:34"><expr pos:start="139:29" pos:end="139:34"><literal type="string" pos:start="139:29" pos:end="139:34">"ipv6"</literal></expr></argument>, <argument pos:start="139:37" pos:end="139:40"><expr pos:start="139:37" pos:end="139:40"><literal type="string" pos:start="139:37" pos:end="139:40">"on"</literal></expr></argument>, <argument pos:start="139:43" pos:end="139:54"><expr pos:start="139:43" pos:end="139:54"><operator pos:start="139:43" pos:end="139:43">&amp;</operator><name pos:start="139:44" pos:end="139:54">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:57"><expr pos:start="141:9" pos:end="141:56"><call pos:start="141:9" pos:end="141:56"><name pos:start="141:9" pos:end="141:20">qemu_opt_set</name><argument_list pos:start="141:21" pos:end="141:56">(<argument pos:start="141:22" pos:end="141:27"><expr pos:start="141:22" pos:end="141:27"><name pos:start="141:22" pos:end="141:27">wsopts</name></expr></argument>, <argument pos:start="141:30" pos:end="141:35"><expr pos:start="141:30" pos:end="141:35"><literal type="string" pos:start="141:30" pos:end="141:35">"ipv6"</literal></expr></argument>, <argument pos:start="141:38" pos:end="141:41"><expr pos:start="141:38" pos:end="141:41"><literal type="string" pos:start="141:38" pos:end="141:41">"on"</literal></expr></argument>, <argument pos:start="141:44" pos:end="141:55"><expr pos:start="141:44" pos:end="141:55"><operator pos:start="141:44" pos:end="141:44">&amp;</operator><name pos:start="141:45" pos:end="141:55">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:58"><expr pos:start="147:5" pos:end="147:57"><name pos:start="147:5" pos:end="147:12">password</name> <operator pos:start="147:14" pos:end="147:14">=</operator> <call pos:start="147:16" pos:end="147:57"><name pos:start="147:16" pos:end="147:32">qemu_opt_get_bool</name><argument_list pos:start="147:33" pos:end="147:57">(<argument pos:start="147:34" pos:end="147:37"><expr pos:start="147:34" pos:end="147:37"><name pos:start="147:34" pos:end="147:37">opts</name></expr></argument>, <argument pos:start="147:40" pos:end="147:49"><expr pos:start="147:40" pos:end="147:49"><literal type="string" pos:start="147:40" pos:end="147:49">"password"</literal></expr></argument>, <argument pos:start="147:52" pos:end="147:56"><expr pos:start="147:52" pos:end="147:56"><name pos:start="147:52" pos:end="147:56">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="149:5" pos:end="161:5"><if pos:start="149:5" pos:end="161:5">if <condition pos:start="149:8" pos:end="149:37">(<expr pos:start="149:9" pos:end="149:36"><name pos:start="149:9" pos:end="149:16">password</name> <operator pos:start="149:18" pos:end="149:19">&amp;&amp;</operator> <call pos:start="149:21" pos:end="149:36"><name pos:start="149:21" pos:end="149:34">fips_get_state</name><argument_list pos:start="149:35" pos:end="149:36">()</argument_list></call></expr>)</condition> <block pos:start="149:39" pos:end="161:5">{<block_content pos:start="151:9" pos:end="159:18">

        <expr_stmt pos:start="151:9" pos:end="157:48"><expr pos:start="151:9" pos:end="157:47"><call pos:start="151:9" pos:end="157:47"><name pos:start="151:9" pos:end="151:18">error_setg</name><argument_list pos:start="151:19" pos:end="157:47">(<argument pos:start="151:20" pos:end="151:23"><expr pos:start="151:20" pos:end="151:23"><name pos:start="151:20" pos:end="151:23">errp</name></expr></argument>,

                   <argument pos:start="153:20" pos:end="157:46"><expr pos:start="153:20" pos:end="157:46"><literal type="string" pos:start="153:20" pos:end="153:66">"VNC password auth disabled due to FIPS mode, "</literal>

                   <literal type="string" pos:start="155:20" pos:end="155:72">"consider using the VeNCrypt or SASL authentication "</literal>

                   <literal type="string" pos:start="157:20" pos:end="157:46">"methods as an alternative"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="159:9" pos:end="159:18">goto <name pos:start="159:14" pos:end="159:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="165:5" pos:end="165:56"><expr pos:start="165:5" pos:end="165:55"><name pos:start="165:5" pos:end="165:11">reverse</name> <operator pos:start="165:13" pos:end="165:13">=</operator> <call pos:start="165:15" pos:end="165:55"><name pos:start="165:15" pos:end="165:31">qemu_opt_get_bool</name><argument_list pos:start="165:32" pos:end="165:55">(<argument pos:start="165:33" pos:end="165:36"><expr pos:start="165:33" pos:end="165:36"><name pos:start="165:33" pos:end="165:36">opts</name></expr></argument>, <argument pos:start="165:39" pos:end="165:47"><expr pos:start="165:39" pos:end="165:47"><literal type="string" pos:start="165:39" pos:end="165:47">"reverse"</literal></expr></argument>, <argument pos:start="165:50" pos:end="165:54"><expr pos:start="165:50" pos:end="165:54"><name pos:start="165:50" pos:end="165:54">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:67"><expr pos:start="167:5" pos:end="167:66"><name pos:start="167:5" pos:end="167:17">lock_key_sync</name> <operator pos:start="167:19" pos:end="167:19">=</operator> <call pos:start="167:21" pos:end="167:66"><name pos:start="167:21" pos:end="167:37">qemu_opt_get_bool</name><argument_list pos:start="167:38" pos:end="167:66">(<argument pos:start="167:39" pos:end="167:42"><expr pos:start="167:39" pos:end="167:42"><name pos:start="167:39" pos:end="167:42">opts</name></expr></argument>, <argument pos:start="167:45" pos:end="167:59"><expr pos:start="167:45" pos:end="167:59"><literal type="string" pos:start="167:45" pos:end="167:59">"lock-key-sync"</literal></expr></argument>, <argument pos:start="167:62" pos:end="167:65"><expr pos:start="167:62" pos:end="167:65"><name pos:start="167:62" pos:end="167:65">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="172:0"><expr pos:start="169:5" pos:end="169:49"><name pos:start="169:5" pos:end="169:8">sasl</name> <operator pos:start="169:10" pos:end="169:10">=</operator> <call pos:start="169:12" pos:end="169:49"><name pos:start="169:12" pos:end="169:28">qemu_opt_get_bool</name><argument_list pos:start="169:29" pos:end="169:49">(<argument pos:start="169:30" pos:end="169:33"><expr pos:start="169:30" pos:end="169:33"><name pos:start="169:30" pos:end="169:33">opts</name></expr></argument>, <argument pos:start="169:36" pos:end="169:41"><expr pos:start="169:36" pos:end="169:41"><literal type="string" pos:start="169:36" pos:end="169:41">"sasl"</literal></expr></argument>, <argument pos:start="169:44" pos:end="169:48"><expr pos:start="169:44" pos:end="169:48"><name pos:start="169:44" pos:end="169:48">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef pos:start="171:1" pos:end="171:23">#<cpp:directive pos:start="171:2" pos:end="171:7">ifndef</cpp:directive> <name pos:start="171:9" pos:end="171:23">CONFIG_VNC_SASL</name></cpp:ifndef>

    <if_stmt pos:start="173:5" pos:end="182:0"><if pos:start="173:5" pos:end="182:0">if <condition pos:start="173:8" pos:end="173:13">(<expr pos:start="173:9" pos:end="173:12"><name pos:start="173:9" pos:end="173:12">sasl</name></expr>)</condition> <block pos:start="173:15" pos:end="182:0">{<block_content pos:start="175:9" pos:end="177:18">

        <expr_stmt pos:start="175:9" pos:end="175:70"><expr pos:start="175:9" pos:end="175:69"><call pos:start="175:9" pos:end="175:69"><name pos:start="175:9" pos:end="175:18">error_setg</name><argument_list pos:start="175:19" pos:end="175:69">(<argument pos:start="175:20" pos:end="175:23"><expr pos:start="175:20" pos:end="175:23"><name pos:start="175:20" pos:end="175:23">errp</name></expr></argument>, <argument pos:start="175:26" pos:end="175:68"><expr pos:start="175:26" pos:end="175:68"><literal type="string" pos:start="175:26" pos:end="175:68">"VNC SASL auth requires cyrus-sasl support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="177:9" pos:end="177:18">goto <name pos:start="177:14" pos:end="177:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="181:1" pos:end="181:6">#<cpp:directive pos:start="181:2" pos:end="181:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="181:8" pos:end="181:28">/* CONFIG_VNC_SASL */</comment>

    <expr_stmt pos:start="183:5" pos:end="186:0"><expr pos:start="183:5" pos:end="183:48"><name pos:start="183:5" pos:end="183:7">tls</name>  <operator pos:start="183:10" pos:end="183:10">=</operator> <call pos:start="183:12" pos:end="183:48"><name pos:start="183:12" pos:end="183:28">qemu_opt_get_bool</name><argument_list pos:start="183:29" pos:end="183:48">(<argument pos:start="183:30" pos:end="183:33"><expr pos:start="183:30" pos:end="183:33"><name pos:start="183:30" pos:end="183:33">opts</name></expr></argument>, <argument pos:start="183:36" pos:end="183:40"><expr pos:start="183:36" pos:end="183:40"><literal type="string" pos:start="183:36" pos:end="183:40">"tls"</literal></expr></argument>, <argument pos:start="183:43" pos:end="183:47"><expr pos:start="183:43" pos:end="183:47"><name pos:start="183:43" pos:end="183:47">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="185:1" pos:end="185:21">#<cpp:directive pos:start="185:2" pos:end="185:6">ifdef</cpp:directive> <name pos:start="185:8" pos:end="185:21">CONFIG_VNC_TLS</name></cpp:ifdef>

    <expr_stmt pos:start="187:5" pos:end="187:38"><expr pos:start="187:5" pos:end="187:37"><name pos:start="187:5" pos:end="187:8">path</name> <operator pos:start="187:10" pos:end="187:10">=</operator> <call pos:start="187:12" pos:end="187:37"><name pos:start="187:12" pos:end="187:23">qemu_opt_get</name><argument_list pos:start="187:24" pos:end="187:37">(<argument pos:start="187:25" pos:end="187:28"><expr pos:start="187:25" pos:end="187:28"><name pos:start="187:25" pos:end="187:28">opts</name></expr></argument>, <argument pos:start="187:31" pos:end="187:36"><expr pos:start="187:31" pos:end="187:36"><literal type="string" pos:start="187:31" pos:end="187:36">"x509"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="189:5" pos:end="199:5"><if pos:start="189:5" pos:end="199:5">if <condition pos:start="189:8" pos:end="189:14">(<expr pos:start="189:9" pos:end="189:13"><operator pos:start="189:9" pos:end="189:9">!</operator><name pos:start="189:10" pos:end="189:13">path</name></expr>)</condition> <block pos:start="189:16" pos:end="199:5">{<block_content pos:start="191:9" pos:end="197:9">

        <expr_stmt pos:start="191:9" pos:end="191:48"><expr pos:start="191:9" pos:end="191:47"><name pos:start="191:9" pos:end="191:12">path</name> <operator pos:start="191:14" pos:end="191:14">=</operator> <call pos:start="191:16" pos:end="191:47"><name pos:start="191:16" pos:end="191:27">qemu_opt_get</name><argument_list pos:start="191:28" pos:end="191:47">(<argument pos:start="191:29" pos:end="191:32"><expr pos:start="191:29" pos:end="191:32"><name pos:start="191:29" pos:end="191:32">opts</name></expr></argument>, <argument pos:start="191:35" pos:end="191:46"><expr pos:start="191:35" pos:end="191:46"><literal type="string" pos:start="191:35" pos:end="191:46">"x509verify"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="193:9" pos:end="197:9"><if pos:start="193:9" pos:end="197:9">if <condition pos:start="193:12" pos:end="193:17">(<expr pos:start="193:13" pos:end="193:16"><name pos:start="193:13" pos:end="193:16">path</name></expr>)</condition> <block pos:start="193:19" pos:end="197:9">{<block_content pos:start="195:13" pos:end="195:38">

            <expr_stmt pos:start="195:13" pos:end="195:38"><expr pos:start="195:13" pos:end="195:37"><name pos:start="195:13" pos:end="195:30"><name pos:start="195:13" pos:end="195:14">vs</name><operator pos:start="195:15" pos:end="195:16">-&gt;</operator><name pos:start="195:17" pos:end="195:19">tls</name><operator pos:start="195:20" pos:end="195:20">.</operator><name pos:start="195:21" pos:end="195:30">x509verify</name></name> <operator pos:start="195:32" pos:end="195:32">=</operator> <name pos:start="195:34" pos:end="195:37">true</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="201:5" pos:end="218:0"><if pos:start="201:5" pos:end="218:0">if <condition pos:start="201:8" pos:end="201:13">(<expr pos:start="201:9" pos:end="201:12"><name pos:start="201:9" pos:end="201:12">path</name></expr>)</condition> <block pos:start="201:15" pos:end="218:0">{<block_content pos:start="203:9" pos:end="213:9">

        <expr_stmt pos:start="203:9" pos:end="203:20"><expr pos:start="203:9" pos:end="203:19"><name pos:start="203:9" pos:end="203:12">x509</name> <operator pos:start="203:14" pos:end="203:14">=</operator> <name pos:start="203:16" pos:end="203:19">true</name></expr>;</expr_stmt>

        <if_stmt pos:start="205:9" pos:end="213:9"><if pos:start="205:9" pos:end="213:9">if <condition pos:start="205:12" pos:end="205:53">(<expr pos:start="205:13" pos:end="205:52"><call pos:start="205:13" pos:end="205:48"><name pos:start="205:13" pos:end="205:38">vnc_tls_set_x509_creds_dir</name><argument_list pos:start="205:39" pos:end="205:48">(<argument pos:start="205:40" pos:end="205:41"><expr pos:start="205:40" pos:end="205:41"><name pos:start="205:40" pos:end="205:41">vs</name></expr></argument>, <argument pos:start="205:44" pos:end="205:47"><expr pos:start="205:44" pos:end="205:47"><name pos:start="205:44" pos:end="205:47">path</name></expr></argument>)</argument_list></call> <operator pos:start="205:50" pos:end="205:50">&lt;</operator> <literal type="number" pos:start="205:52" pos:end="205:52">0</literal></expr>)</condition> <block pos:start="205:55" pos:end="213:9">{<block_content pos:start="207:13" pos:end="211:22">

            <expr_stmt pos:start="207:13" pos:end="209:29"><expr pos:start="207:13" pos:end="209:28"><call pos:start="207:13" pos:end="209:28"><name pos:start="207:13" pos:end="207:22">error_setg</name><argument_list pos:start="207:23" pos:end="209:28">(<argument pos:start="207:24" pos:end="207:27"><expr pos:start="207:24" pos:end="207:27"><name pos:start="207:24" pos:end="207:27">errp</name></expr></argument>, <argument pos:start="207:30" pos:end="207:74"><expr pos:start="207:30" pos:end="207:74"><literal type="string" pos:start="207:30" pos:end="207:74">"Failed to find x509 certificates/keys in %s"</literal></expr></argument>,

                       <argument pos:start="209:24" pos:end="209:27"><expr pos:start="209:24" pos:end="209:27"><name pos:start="209:24" pos:end="209:27">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="211:13" pos:end="211:22">goto <name pos:start="211:18" pos:end="211:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:else pos:start="217:1" pos:end="217:5">#<cpp:directive pos:start="217:2" pos:end="217:5">else</cpp:directive></cpp:else> <comment type="block" pos:start="217:7" pos:end="217:28">/* ! CONFIG_VNC_TLS */</comment>

    <if_stmt pos:start="219:5" pos:end="230:0"><if pos:start="219:5" pos:end="230:0">if <condition pos:start="219:8" pos:end="219:12">(<expr pos:start="219:9" pos:end="219:11"><name pos:start="219:9" pos:end="219:11">tls</name></expr>)</condition> <block pos:start="219:14" pos:end="230:0">{<block_content pos:start="221:9" pos:end="223:18">

        <expr_stmt pos:start="221:9" pos:end="221:65"><expr pos:start="221:9" pos:end="221:64"><call pos:start="221:9" pos:end="221:64"><name pos:start="221:9" pos:end="221:18">error_setg</name><argument_list pos:start="221:19" pos:end="221:64">(<argument pos:start="221:20" pos:end="221:23"><expr pos:start="221:20" pos:end="221:23"><name pos:start="221:20" pos:end="221:23">errp</name></expr></argument>, <argument pos:start="221:26" pos:end="221:63"><expr pos:start="221:26" pos:end="221:63"><literal type="string" pos:start="221:26" pos:end="221:63">"VNC TLS auth requires gnutls support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="223:9" pos:end="223:18">goto <name pos:start="223:14" pos:end="223:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="227:1" pos:end="227:6">#<cpp:directive pos:start="227:2" pos:end="227:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="227:8" pos:end="227:29">/* ! CONFIG_VNC_TLS */</comment>

<cpp:if pos:start="229:1" pos:end="229:55">#<cpp:directive pos:start="229:2" pos:end="229:3">if</cpp:directive> <expr pos:start="229:5" pos:end="229:55"><call pos:start="229:5" pos:end="229:27"><name pos:start="229:5" pos:end="229:11">defined</name><argument_list pos:start="229:12" pos:end="229:27">(<argument pos:start="229:13" pos:end="229:26"><expr pos:start="229:13" pos:end="229:26"><name pos:start="229:13" pos:end="229:26">CONFIG_VNC_TLS</name></expr></argument>)</argument_list></call> <operator pos:start="229:29" pos:end="229:30">||</operator> <call pos:start="229:32" pos:end="229:55"><name pos:start="229:32" pos:end="229:38">defined</name><argument_list pos:start="229:39" pos:end="229:55">(<argument pos:start="229:40" pos:end="229:54"><expr pos:start="229:40" pos:end="229:54"><name pos:start="229:40" pos:end="229:54">CONFIG_VNC_SASL</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="231:5" pos:end="234:0"><expr pos:start="231:5" pos:end="231:47"><name pos:start="231:5" pos:end="231:7">acl</name> <operator pos:start="231:9" pos:end="231:9">=</operator> <call pos:start="231:11" pos:end="231:47"><name pos:start="231:11" pos:end="231:27">qemu_opt_get_bool</name><argument_list pos:start="231:28" pos:end="231:47">(<argument pos:start="231:29" pos:end="231:32"><expr pos:start="231:29" pos:end="231:32"><name pos:start="231:29" pos:end="231:32">opts</name></expr></argument>, <argument pos:start="231:35" pos:end="231:39"><expr pos:start="231:35" pos:end="231:39"><literal type="string" pos:start="231:35" pos:end="231:39">"acl"</literal></expr></argument>, <argument pos:start="231:42" pos:end="231:46"><expr pos:start="231:42" pos:end="231:46"><name pos:start="231:42" pos:end="231:46">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="233:1" pos:end="233:6">#<cpp:directive pos:start="233:2" pos:end="233:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="237:5" pos:end="237:40"><expr pos:start="237:5" pos:end="237:39"><name pos:start="237:5" pos:end="237:9">share</name> <operator pos:start="237:11" pos:end="237:11">=</operator> <call pos:start="237:13" pos:end="237:39"><name pos:start="237:13" pos:end="237:24">qemu_opt_get</name><argument_list pos:start="237:25" pos:end="237:39">(<argument pos:start="237:26" pos:end="237:29"><expr pos:start="237:26" pos:end="237:29"><name pos:start="237:26" pos:end="237:29">opts</name></expr></argument>, <argument pos:start="237:32" pos:end="237:38"><expr pos:start="237:32" pos:end="237:38"><literal type="string" pos:start="237:32" pos:end="237:38">"share"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="239:5" pos:end="265:5"><if pos:start="239:5" pos:end="261:5">if <condition pos:start="239:8" pos:end="239:14">(<expr pos:start="239:9" pos:end="239:13"><name pos:start="239:9" pos:end="239:13">share</name></expr>)</condition> <block pos:start="239:16" pos:end="261:5">{<block_content pos:start="241:9" pos:end="259:9">

        <if_stmt pos:start="241:9" pos:end="259:9"><if pos:start="241:9" pos:end="245:9">if <condition pos:start="241:12" pos:end="241:41">(<expr pos:start="241:13" pos:end="241:40"><call pos:start="241:13" pos:end="241:35"><name pos:start="241:13" pos:end="241:18">strcmp</name><argument_list pos:start="241:19" pos:end="241:35">(<argument pos:start="241:20" pos:end="241:24"><expr pos:start="241:20" pos:end="241:24"><name pos:start="241:20" pos:end="241:24">share</name></expr></argument>, <argument pos:start="241:27" pos:end="241:34"><expr pos:start="241:27" pos:end="241:34"><literal type="string" pos:start="241:27" pos:end="241:34">"ignore"</literal></expr></argument>)</argument_list></call> <operator pos:start="241:37" pos:end="241:38">==</operator> <literal type="number" pos:start="241:40" pos:end="241:40">0</literal></expr>)</condition> <block pos:start="241:43" pos:end="245:9">{<block_content pos:start="243:13" pos:end="243:55">

            <expr_stmt pos:start="243:13" pos:end="243:55"><expr pos:start="243:13" pos:end="243:54"><name pos:start="243:13" pos:end="243:28"><name pos:start="243:13" pos:end="243:14">vs</name><operator pos:start="243:15" pos:end="243:16">-&gt;</operator><name pos:start="243:17" pos:end="243:28">share_policy</name></name> <operator pos:start="243:30" pos:end="243:30">=</operator> <name pos:start="243:32" pos:end="243:54">VNC_SHARE_POLICY_IGNORE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="245:11" pos:end="249:9">else if <condition pos:start="245:19" pos:end="245:57">(<expr pos:start="245:20" pos:end="245:56"><call pos:start="245:20" pos:end="245:51"><name pos:start="245:20" pos:end="245:25">strcmp</name><argument_list pos:start="245:26" pos:end="245:51">(<argument pos:start="245:27" pos:end="245:31"><expr pos:start="245:27" pos:end="245:31"><name pos:start="245:27" pos:end="245:31">share</name></expr></argument>, <argument pos:start="245:34" pos:end="245:50"><expr pos:start="245:34" pos:end="245:50"><literal type="string" pos:start="245:34" pos:end="245:50">"allow-exclusive"</literal></expr></argument>)</argument_list></call> <operator pos:start="245:53" pos:end="245:54">==</operator> <literal type="number" pos:start="245:56" pos:end="245:56">0</literal></expr>)</condition> <block pos:start="245:59" pos:end="249:9">{<block_content pos:start="247:13" pos:end="247:64">

            <expr_stmt pos:start="247:13" pos:end="247:64"><expr pos:start="247:13" pos:end="247:63"><name pos:start="247:13" pos:end="247:28"><name pos:start="247:13" pos:end="247:14">vs</name><operator pos:start="247:15" pos:end="247:16">-&gt;</operator><name pos:start="247:17" pos:end="247:28">share_policy</name></name> <operator pos:start="247:30" pos:end="247:30">=</operator> <name pos:start="247:32" pos:end="247:63">VNC_SHARE_POLICY_ALLOW_EXCLUSIVE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="249:11" pos:end="253:9">else if <condition pos:start="249:19" pos:end="249:54">(<expr pos:start="249:20" pos:end="249:53"><call pos:start="249:20" pos:end="249:48"><name pos:start="249:20" pos:end="249:25">strcmp</name><argument_list pos:start="249:26" pos:end="249:48">(<argument pos:start="249:27" pos:end="249:31"><expr pos:start="249:27" pos:end="249:31"><name pos:start="249:27" pos:end="249:31">share</name></expr></argument>, <argument pos:start="249:34" pos:end="249:47"><expr pos:start="249:34" pos:end="249:47"><literal type="string" pos:start="249:34" pos:end="249:47">"force-shared"</literal></expr></argument>)</argument_list></call> <operator pos:start="249:50" pos:end="249:51">==</operator> <literal type="number" pos:start="249:53" pos:end="249:53">0</literal></expr>)</condition> <block pos:start="249:56" pos:end="253:9">{<block_content pos:start="251:13" pos:end="251:61">

            <expr_stmt pos:start="251:13" pos:end="251:61"><expr pos:start="251:13" pos:end="251:60"><name pos:start="251:13" pos:end="251:28"><name pos:start="251:13" pos:end="251:14">vs</name><operator pos:start="251:15" pos:end="251:16">-&gt;</operator><name pos:start="251:17" pos:end="251:28">share_policy</name></name> <operator pos:start="251:30" pos:end="251:30">=</operator> <name pos:start="251:32" pos:end="251:60">VNC_SHARE_POLICY_FORCE_SHARED</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="253:11" pos:end="259:9">else <block pos:start="253:16" pos:end="259:9">{<block_content pos:start="255:13" pos:end="257:22">

            <expr_stmt pos:start="255:13" pos:end="255:58"><expr pos:start="255:13" pos:end="255:57"><call pos:start="255:13" pos:end="255:57"><name pos:start="255:13" pos:end="255:22">error_setg</name><argument_list pos:start="255:23" pos:end="255:57">(<argument pos:start="255:24" pos:end="255:27"><expr pos:start="255:24" pos:end="255:27"><name pos:start="255:24" pos:end="255:27">errp</name></expr></argument>, <argument pos:start="255:30" pos:end="255:56"><expr pos:start="255:30" pos:end="255:56"><literal type="string" pos:start="255:30" pos:end="255:56">"unknown vnc share= option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="257:13" pos:end="257:22">goto <name pos:start="257:18" pos:end="257:21">fail</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="261:7" pos:end="265:5">else <block pos:start="261:12" pos:end="265:5">{<block_content pos:start="263:9" pos:end="263:60">

        <expr_stmt pos:start="263:9" pos:end="263:60"><expr pos:start="263:9" pos:end="263:59"><name pos:start="263:9" pos:end="263:24"><name pos:start="263:9" pos:end="263:10">vs</name><operator pos:start="263:11" pos:end="263:12">-&gt;</operator><name pos:start="263:13" pos:end="263:24">share_policy</name></name> <operator pos:start="263:26" pos:end="263:26">=</operator> <name pos:start="263:28" pos:end="263:59">VNC_SHARE_POLICY_ALLOW_EXCLUSIVE</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="267:5" pos:end="267:73"><expr pos:start="267:5" pos:end="267:72"><name pos:start="267:5" pos:end="267:25"><name pos:start="267:5" pos:end="267:6">vs</name><operator pos:start="267:7" pos:end="267:8">-&gt;</operator><name pos:start="267:9" pos:end="267:25">connections_limit</name></name> <operator pos:start="267:27" pos:end="267:27">=</operator> <call pos:start="267:29" pos:end="267:72"><name pos:start="267:29" pos:end="267:47">qemu_opt_get_number</name><argument_list pos:start="267:48" pos:end="267:72">(<argument pos:start="267:49" pos:end="267:52"><expr pos:start="267:49" pos:end="267:52"><name pos:start="267:49" pos:end="267:52">opts</name></expr></argument>, <argument pos:start="267:55" pos:end="267:67"><expr pos:start="267:55" pos:end="267:67"><literal type="string" pos:start="267:55" pos:end="267:67">"connections"</literal></expr></argument>, <argument pos:start="267:70" pos:end="267:71"><expr pos:start="267:70" pos:end="267:71"><literal type="number" pos:start="267:70" pos:end="267:71">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="271:5" pos:end="271:48"><expr pos:start="271:5" pos:end="271:47"><name pos:start="271:5" pos:end="271:13">websocket</name> <operator pos:start="271:15" pos:end="271:15">=</operator> <call pos:start="271:17" pos:end="271:47"><name pos:start="271:17" pos:end="271:28">qemu_opt_get</name><argument_list pos:start="271:29" pos:end="271:47">(<argument pos:start="271:30" pos:end="271:33"><expr pos:start="271:30" pos:end="271:33"><name pos:start="271:30" pos:end="271:33">opts</name></expr></argument>, <argument pos:start="271:36" pos:end="271:46"><expr pos:start="271:36" pos:end="271:46"><literal type="string" pos:start="271:36" pos:end="271:46">"websocket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="273:5" pos:end="294:0"><if pos:start="273:5" pos:end="294:0">if <condition pos:start="273:8" pos:end="273:18">(<expr pos:start="273:9" pos:end="273:17"><name pos:start="273:9" pos:end="273:17">websocket</name></expr>)</condition> <block pos:start="273:20" pos:end="294:0">{<block_content pos:start="277:9" pos:end="288:0">

<cpp:ifdef pos:start="275:1" pos:end="275:20">#<cpp:directive pos:start="275:2" pos:end="275:6">ifdef</cpp:directive> <name pos:start="275:8" pos:end="275:20">CONFIG_VNC_WS</name></cpp:ifdef>

        <expr_stmt pos:start="277:9" pos:end="277:30"><expr pos:start="277:9" pos:end="277:29"><name pos:start="277:9" pos:end="277:22"><name pos:start="277:9" pos:end="277:10">vs</name><operator pos:start="277:11" pos:end="277:12">-&gt;</operator><name pos:start="277:13" pos:end="277:22">ws_enabled</name></name> <operator pos:start="277:24" pos:end="277:24">=</operator> <name pos:start="277:26" pos:end="277:29">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="279:9" pos:end="282:0"><expr pos:start="279:9" pos:end="279:61"><call pos:start="279:9" pos:end="279:61"><name pos:start="279:9" pos:end="279:20">qemu_opt_set</name><argument_list pos:start="279:21" pos:end="279:61">(<argument pos:start="279:22" pos:end="279:27"><expr pos:start="279:22" pos:end="279:27"><name pos:start="279:22" pos:end="279:27">wsopts</name></expr></argument>, <argument pos:start="279:30" pos:end="279:35"><expr pos:start="279:30" pos:end="279:35"><literal type="string" pos:start="279:30" pos:end="279:35">"port"</literal></expr></argument>, <argument pos:start="279:38" pos:end="279:46"><expr pos:start="279:38" pos:end="279:46"><name pos:start="279:38" pos:end="279:46">websocket</name></expr></argument>, <argument pos:start="279:49" pos:end="279:60"><expr pos:start="279:49" pos:end="279:60"><operator pos:start="279:49" pos:end="279:49">&amp;</operator><name pos:start="279:50" pos:end="279:60">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="281:1" pos:end="281:5">#<cpp:directive pos:start="281:2" pos:end="281:5">else</cpp:directive></cpp:else> <comment type="block" pos:start="281:7" pos:end="281:27">/* ! CONFIG_VNC_WS */</comment>

        <expr_stmt pos:start="283:9" pos:end="283:72"><expr pos:start="283:9" pos:end="283:71"><call pos:start="283:9" pos:end="283:71"><name pos:start="283:9" pos:end="283:18">error_setg</name><argument_list pos:start="283:19" pos:end="283:71">(<argument pos:start="283:20" pos:end="283:23"><expr pos:start="283:20" pos:end="283:23"><name pos:start="283:20" pos:end="283:23">errp</name></expr></argument>, <argument pos:start="283:26" pos:end="283:70"><expr pos:start="283:26" pos:end="283:70"><literal type="string" pos:start="283:26" pos:end="283:70">"Websockets protocol requires gnutls support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="285:9" pos:end="288:0">goto <name pos:start="285:14" pos:end="285:17">fail</name>;</goto>

<cpp:endif pos:start="287:1" pos:end="287:6">#<cpp:directive pos:start="287:2" pos:end="287:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="287:8" pos:end="287:28">/* ! CONFIG_VNC_WS */</comment>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="293:1" pos:end="293:22">#<cpp:directive pos:start="293:2" pos:end="293:6">ifdef</cpp:directive> <name pos:start="293:8" pos:end="293:22">CONFIG_VNC_JPEG</name></cpp:ifdef>

    <expr_stmt pos:start="295:5" pos:end="298:0"><expr pos:start="295:5" pos:end="295:55"><name pos:start="295:5" pos:end="295:13"><name pos:start="295:5" pos:end="295:6">vs</name><operator pos:start="295:7" pos:end="295:8">-&gt;</operator><name pos:start="295:9" pos:end="295:13">lossy</name></name> <operator pos:start="295:15" pos:end="295:15">=</operator> <call pos:start="295:17" pos:end="295:55"><name pos:start="295:17" pos:end="295:33">qemu_opt_get_bool</name><argument_list pos:start="295:34" pos:end="295:55">(<argument pos:start="295:35" pos:end="295:38"><expr pos:start="295:35" pos:end="295:38"><name pos:start="295:35" pos:end="295:38">opts</name></expr></argument>, <argument pos:start="295:41" pos:end="295:47"><expr pos:start="295:41" pos:end="295:47"><literal type="string" pos:start="295:41" pos:end="295:47">"lossy"</literal></expr></argument>, <argument pos:start="295:50" pos:end="295:54"><expr pos:start="295:50" pos:end="295:54"><name pos:start="295:50" pos:end="295:54">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="297:1" pos:end="297:6">#<cpp:directive pos:start="297:2" pos:end="297:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="299:5" pos:end="299:70"><expr pos:start="299:5" pos:end="299:69"><name pos:start="299:5" pos:end="299:20"><name pos:start="299:5" pos:end="299:6">vs</name><operator pos:start="299:7" pos:end="299:8">-&gt;</operator><name pos:start="299:9" pos:end="299:20">non_adaptive</name></name> <operator pos:start="299:22" pos:end="299:22">=</operator> <call pos:start="299:24" pos:end="299:69"><name pos:start="299:24" pos:end="299:40">qemu_opt_get_bool</name><argument_list pos:start="299:41" pos:end="299:69">(<argument pos:start="299:42" pos:end="299:45"><expr pos:start="299:42" pos:end="299:45"><name pos:start="299:42" pos:end="299:45">opts</name></expr></argument>, <argument pos:start="299:48" pos:end="299:61"><expr pos:start="299:48" pos:end="299:61"><literal type="string" pos:start="299:48" pos:end="299:61">"non-adaptive"</literal></expr></argument>, <argument pos:start="299:64" pos:end="299:68"><expr pos:start="299:64" pos:end="299:68"><name pos:start="299:64" pos:end="299:68">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="301:5" pos:end="305:32">/* adaptive updates are only used with tight encoding and

     * if lossy updates are enabled so we can disable all the

     * calculations otherwise */</comment>

    <if_stmt pos:start="307:5" pos:end="316:0"><if pos:start="307:5" pos:end="316:0">if <condition pos:start="307:8" pos:end="307:19">(<expr pos:start="307:9" pos:end="307:18"><operator pos:start="307:9" pos:end="307:9">!</operator><name pos:start="307:10" pos:end="307:18"><name pos:start="307:10" pos:end="307:11">vs</name><operator pos:start="307:12" pos:end="307:13">-&gt;</operator><name pos:start="307:14" pos:end="307:18">lossy</name></name></expr>)</condition> <block pos:start="307:21" pos:end="316:0">{<block_content pos:start="309:9" pos:end="309:32">

        <expr_stmt pos:start="309:9" pos:end="309:32"><expr pos:start="309:9" pos:end="309:31"><name pos:start="309:9" pos:end="309:24"><name pos:start="309:9" pos:end="309:10">vs</name><operator pos:start="309:11" pos:end="309:12">-&gt;</operator><name pos:start="309:13" pos:end="309:24">non_adaptive</name></name> <operator pos:start="309:26" pos:end="309:26">=</operator> <name pos:start="309:28" pos:end="309:31">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="315:1" pos:end="315:21">#<cpp:directive pos:start="315:2" pos:end="315:6">ifdef</cpp:directive> <name pos:start="315:8" pos:end="315:21">CONFIG_VNC_TLS</name></cpp:ifdef>

    <if_stmt pos:start="317:5" pos:end="350:0"><if pos:start="317:5" pos:end="350:0">if <condition pos:start="317:8" pos:end="317:42">(<expr pos:start="317:9" pos:end="317:41"><name pos:start="317:9" pos:end="317:11">acl</name> <operator pos:start="317:13" pos:end="317:14">&amp;&amp;</operator> <name pos:start="317:16" pos:end="317:19">x509</name> <operator pos:start="317:21" pos:end="317:22">&amp;&amp;</operator> <name pos:start="317:24" pos:end="317:41"><name pos:start="317:24" pos:end="317:25">vs</name><operator pos:start="317:26" pos:end="317:27">-&gt;</operator><name pos:start="317:28" pos:end="317:30">tls</name><operator pos:start="317:31" pos:end="317:31">.</operator><name pos:start="317:32" pos:end="317:41">x509verify</name></name></expr>)</condition> <block pos:start="317:44" pos:end="350:0">{<block_content pos:start="319:9" pos:end="343:24">

        <decl_stmt pos:start="319:9" pos:end="319:22"><decl pos:start="319:9" pos:end="319:21"><type pos:start="319:9" pos:end="319:14"><name pos:start="319:9" pos:end="319:12">char</name> <modifier pos:start="319:14" pos:end="319:14">*</modifier></type><name pos:start="319:15" pos:end="319:21">aclname</name></decl>;</decl_stmt>



        <if_stmt pos:start="323:9" pos:end="331:9"><if pos:start="323:9" pos:end="327:9">if <condition pos:start="323:12" pos:end="323:43">(<expr pos:start="323:13" pos:end="323:42"><call pos:start="323:13" pos:end="323:37"><name pos:start="323:13" pos:end="323:18">strcmp</name><argument_list pos:start="323:19" pos:end="323:37">(<argument pos:start="323:20" pos:end="323:25"><expr pos:start="323:20" pos:end="323:25"><name pos:start="323:20" pos:end="323:25"><name pos:start="323:20" pos:end="323:21">vs</name><operator pos:start="323:22" pos:end="323:23">-&gt;</operator><name pos:start="323:24" pos:end="323:25">id</name></name></expr></argument>, <argument pos:start="323:28" pos:end="323:36"><expr pos:start="323:28" pos:end="323:36"><literal type="string" pos:start="323:28" pos:end="323:36">"default"</literal></expr></argument>)</argument_list></call> <operator pos:start="323:39" pos:end="323:40">==</operator> <literal type="number" pos:start="323:42" pos:end="323:42">0</literal></expr>)</condition> <block pos:start="323:45" pos:end="327:9">{<block_content pos:start="325:13" pos:end="325:48">

            <expr_stmt pos:start="325:13" pos:end="325:48"><expr pos:start="325:13" pos:end="325:47"><name pos:start="325:13" pos:end="325:19">aclname</name> <operator pos:start="325:21" pos:end="325:21">=</operator> <call pos:start="325:23" pos:end="325:47"><name pos:start="325:23" pos:end="325:30">g_strdup</name><argument_list pos:start="325:31" pos:end="325:47">(<argument pos:start="325:32" pos:end="325:46"><expr pos:start="325:32" pos:end="325:46"><literal type="string" pos:start="325:32" pos:end="325:46">"vnc.x509dname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="327:11" pos:end="331:9">else <block pos:start="327:16" pos:end="331:9">{<block_content pos:start="329:13" pos:end="329:66">

            <expr_stmt pos:start="329:13" pos:end="329:66"><expr pos:start="329:13" pos:end="329:65"><name pos:start="329:13" pos:end="329:19">aclname</name> <operator pos:start="329:21" pos:end="329:21">=</operator> <call pos:start="329:23" pos:end="329:65"><name pos:start="329:23" pos:end="329:37">g_strdup_printf</name><argument_list pos:start="329:38" pos:end="329:65">(<argument pos:start="329:39" pos:end="329:56"><expr pos:start="329:39" pos:end="329:56"><literal type="string" pos:start="329:39" pos:end="329:56">"vnc.%s.x509dname"</literal></expr></argument>, <argument pos:start="329:59" pos:end="329:64"><expr pos:start="329:59" pos:end="329:64"><name pos:start="329:59" pos:end="329:64"><name pos:start="329:59" pos:end="329:60">vs</name><operator pos:start="329:61" pos:end="329:62">-&gt;</operator><name pos:start="329:63" pos:end="329:64">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="333:9" pos:end="333:45"><expr pos:start="333:9" pos:end="333:44"><name pos:start="333:9" pos:end="333:19"><name pos:start="333:9" pos:end="333:10">vs</name><operator pos:start="333:11" pos:end="333:12">-&gt;</operator><name pos:start="333:13" pos:end="333:15">tls</name><operator pos:start="333:16" pos:end="333:16">.</operator><name pos:start="333:17" pos:end="333:19">acl</name></name> <operator pos:start="333:21" pos:end="333:21">=</operator> <call pos:start="333:23" pos:end="333:44"><name pos:start="333:23" pos:end="333:35">qemu_acl_init</name><argument_list pos:start="333:36" pos:end="333:44">(<argument pos:start="333:37" pos:end="333:43"><expr pos:start="333:37" pos:end="333:43"><name pos:start="333:37" pos:end="333:43">aclname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="335:9" pos:end="341:9"><if pos:start="335:9" pos:end="341:9">if <condition pos:start="335:12" pos:end="335:25">(<expr pos:start="335:13" pos:end="335:24"><operator pos:start="335:13" pos:end="335:13">!</operator><name pos:start="335:14" pos:end="335:24"><name pos:start="335:14" pos:end="335:15">vs</name><operator pos:start="335:16" pos:end="335:17">-&gt;</operator><name pos:start="335:18" pos:end="335:20">tls</name><operator pos:start="335:21" pos:end="335:21">.</operator><name pos:start="335:22" pos:end="335:24">acl</name></name></expr>)</condition> <block pos:start="335:27" pos:end="341:9">{<block_content pos:start="337:13" pos:end="339:20">

            <expr_stmt pos:start="337:13" pos:end="337:65"><expr pos:start="337:13" pos:end="337:64"><call pos:start="337:13" pos:end="337:64"><name pos:start="337:13" pos:end="337:19">fprintf</name><argument_list pos:start="337:20" pos:end="337:64">(<argument pos:start="337:21" pos:end="337:26"><expr pos:start="337:21" pos:end="337:26"><name pos:start="337:21" pos:end="337:26">stderr</name></expr></argument>, <argument pos:start="337:29" pos:end="337:63"><expr pos:start="337:29" pos:end="337:63"><literal type="string" pos:start="337:29" pos:end="337:63">"Failed to create x509 dname ACL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="339:13" pos:end="339:20"><expr pos:start="339:13" pos:end="339:19"><call pos:start="339:13" pos:end="339:19"><name pos:start="339:13" pos:end="339:16">exit</name><argument_list pos:start="339:17" pos:end="339:19">(<argument pos:start="339:18" pos:end="339:18"><expr pos:start="339:18" pos:end="339:18"><literal type="number" pos:start="339:18" pos:end="339:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="343:9" pos:end="343:24"><expr pos:start="343:9" pos:end="343:23"><call pos:start="343:9" pos:end="343:23"><name pos:start="343:9" pos:end="343:14">g_free</name><argument_list pos:start="343:15" pos:end="343:23">(<argument pos:start="343:16" pos:end="343:22"><expr pos:start="343:16" pos:end="343:22"><name pos:start="343:16" pos:end="343:22">aclname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="347:1" pos:end="347:6">#<cpp:directive pos:start="347:2" pos:end="347:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="349:1" pos:end="349:22">#<cpp:directive pos:start="349:2" pos:end="349:6">ifdef</cpp:directive> <name pos:start="349:8" pos:end="349:22">CONFIG_VNC_SASL</name></cpp:ifdef>

    <if_stmt pos:start="351:5" pos:end="382:0"><if pos:start="351:5" pos:end="382:0">if <condition pos:start="351:8" pos:end="351:20">(<expr pos:start="351:9" pos:end="351:19"><name pos:start="351:9" pos:end="351:11">acl</name> <operator pos:start="351:13" pos:end="351:14">&amp;&amp;</operator> <name pos:start="351:16" pos:end="351:19">sasl</name></expr>)</condition> <block pos:start="351:22" pos:end="382:0">{<block_content pos:start="353:9" pos:end="377:24">

        <decl_stmt pos:start="353:9" pos:end="353:22"><decl pos:start="353:9" pos:end="353:21"><type pos:start="353:9" pos:end="353:14"><name pos:start="353:9" pos:end="353:12">char</name> <modifier pos:start="353:14" pos:end="353:14">*</modifier></type><name pos:start="353:15" pos:end="353:21">aclname</name></decl>;</decl_stmt>



        <if_stmt pos:start="357:9" pos:end="365:9"><if pos:start="357:9" pos:end="361:9">if <condition pos:start="357:12" pos:end="357:43">(<expr pos:start="357:13" pos:end="357:42"><call pos:start="357:13" pos:end="357:37"><name pos:start="357:13" pos:end="357:18">strcmp</name><argument_list pos:start="357:19" pos:end="357:37">(<argument pos:start="357:20" pos:end="357:25"><expr pos:start="357:20" pos:end="357:25"><name pos:start="357:20" pos:end="357:25"><name pos:start="357:20" pos:end="357:21">vs</name><operator pos:start="357:22" pos:end="357:23">-&gt;</operator><name pos:start="357:24" pos:end="357:25">id</name></name></expr></argument>, <argument pos:start="357:28" pos:end="357:36"><expr pos:start="357:28" pos:end="357:36"><literal type="string" pos:start="357:28" pos:end="357:36">"default"</literal></expr></argument>)</argument_list></call> <operator pos:start="357:39" pos:end="357:40">==</operator> <literal type="number" pos:start="357:42" pos:end="357:42">0</literal></expr>)</condition> <block pos:start="357:45" pos:end="361:9">{<block_content pos:start="359:13" pos:end="359:47">

            <expr_stmt pos:start="359:13" pos:end="359:47"><expr pos:start="359:13" pos:end="359:46"><name pos:start="359:13" pos:end="359:19">aclname</name> <operator pos:start="359:21" pos:end="359:21">=</operator> <call pos:start="359:23" pos:end="359:46"><name pos:start="359:23" pos:end="359:30">g_strdup</name><argument_list pos:start="359:31" pos:end="359:46">(<argument pos:start="359:32" pos:end="359:45"><expr pos:start="359:32" pos:end="359:45"><literal type="string" pos:start="359:32" pos:end="359:45">"vnc.username"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="361:11" pos:end="365:9">else <block pos:start="361:16" pos:end="365:9">{<block_content pos:start="363:13" pos:end="363:65">

            <expr_stmt pos:start="363:13" pos:end="363:65"><expr pos:start="363:13" pos:end="363:64"><name pos:start="363:13" pos:end="363:19">aclname</name> <operator pos:start="363:21" pos:end="363:21">=</operator> <call pos:start="363:23" pos:end="363:64"><name pos:start="363:23" pos:end="363:37">g_strdup_printf</name><argument_list pos:start="363:38" pos:end="363:64">(<argument pos:start="363:39" pos:end="363:55"><expr pos:start="363:39" pos:end="363:55"><literal type="string" pos:start="363:39" pos:end="363:55">"vnc.%s.username"</literal></expr></argument>, <argument pos:start="363:58" pos:end="363:63"><expr pos:start="363:58" pos:end="363:63"><name pos:start="363:58" pos:end="363:63"><name pos:start="363:58" pos:end="363:59">vs</name><operator pos:start="363:60" pos:end="363:61">-&gt;</operator><name pos:start="363:62" pos:end="363:63">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="367:9" pos:end="367:46"><expr pos:start="367:9" pos:end="367:45"><name pos:start="367:9" pos:end="367:20"><name pos:start="367:9" pos:end="367:10">vs</name><operator pos:start="367:11" pos:end="367:12">-&gt;</operator><name pos:start="367:13" pos:end="367:16">sasl</name><operator pos:start="367:17" pos:end="367:17">.</operator><name pos:start="367:18" pos:end="367:20">acl</name></name> <operator pos:start="367:22" pos:end="367:22">=</operator> <call pos:start="367:24" pos:end="367:45"><name pos:start="367:24" pos:end="367:36">qemu_acl_init</name><argument_list pos:start="367:37" pos:end="367:45">(<argument pos:start="367:38" pos:end="367:44"><expr pos:start="367:38" pos:end="367:44"><name pos:start="367:38" pos:end="367:44">aclname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="369:9" pos:end="375:9"><if pos:start="369:9" pos:end="375:9">if <condition pos:start="369:12" pos:end="369:26">(<expr pos:start="369:13" pos:end="369:25"><operator pos:start="369:13" pos:end="369:13">!</operator><name pos:start="369:14" pos:end="369:25"><name pos:start="369:14" pos:end="369:15">vs</name><operator pos:start="369:16" pos:end="369:17">-&gt;</operator><name pos:start="369:18" pos:end="369:21">sasl</name><operator pos:start="369:22" pos:end="369:22">.</operator><name pos:start="369:23" pos:end="369:25">acl</name></name></expr>)</condition> <block pos:start="369:28" pos:end="375:9">{<block_content pos:start="371:13" pos:end="373:20">

            <expr_stmt pos:start="371:13" pos:end="371:63"><expr pos:start="371:13" pos:end="371:62"><call pos:start="371:13" pos:end="371:62"><name pos:start="371:13" pos:end="371:19">fprintf</name><argument_list pos:start="371:20" pos:end="371:62">(<argument pos:start="371:21" pos:end="371:26"><expr pos:start="371:21" pos:end="371:26"><name pos:start="371:21" pos:end="371:26">stderr</name></expr></argument>, <argument pos:start="371:29" pos:end="371:61"><expr pos:start="371:29" pos:end="371:61"><literal type="string" pos:start="371:29" pos:end="371:61">"Failed to create username ACL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="373:13" pos:end="373:20"><expr pos:start="373:13" pos:end="373:19"><call pos:start="373:13" pos:end="373:19"><name pos:start="373:13" pos:end="373:16">exit</name><argument_list pos:start="373:17" pos:end="373:19">(<argument pos:start="373:18" pos:end="373:18"><expr pos:start="373:18" pos:end="373:18"><literal type="number" pos:start="373:18" pos:end="373:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="377:9" pos:end="377:24"><expr pos:start="377:9" pos:end="377:23"><call pos:start="377:9" pos:end="377:23"><name pos:start="377:9" pos:end="377:14">g_free</name><argument_list pos:start="377:15" pos:end="377:23">(<argument pos:start="377:16" pos:end="377:22"><expr pos:start="377:16" pos:end="377:22"><name pos:start="377:16" pos:end="377:22">aclname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="381:1" pos:end="381:6">#<cpp:directive pos:start="381:2" pos:end="381:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="385:5" pos:end="390:0"><expr pos:start="385:5" pos:end="385:68"><call pos:start="385:5" pos:end="385:68"><name pos:start="385:5" pos:end="385:26">vnc_display_setup_auth</name><argument_list pos:start="385:27" pos:end="385:68">(<argument pos:start="385:28" pos:end="385:29"><expr pos:start="385:28" pos:end="385:29"><name pos:start="385:28" pos:end="385:29">vs</name></expr></argument>, <argument pos:start="385:32" pos:end="385:39"><expr pos:start="385:32" pos:end="385:39"><name pos:start="385:32" pos:end="385:39">password</name></expr></argument>, <argument pos:start="385:42" pos:end="385:45"><expr pos:start="385:42" pos:end="385:45"><name pos:start="385:42" pos:end="385:45">sasl</name></expr></argument>, <argument pos:start="385:48" pos:end="385:50"><expr pos:start="385:48" pos:end="385:50"><name pos:start="385:48" pos:end="385:50">tls</name></expr></argument>, <argument pos:start="385:53" pos:end="385:56"><expr pos:start="385:53" pos:end="385:56"><name pos:start="385:53" pos:end="385:56">x509</name></expr></argument>, <argument pos:start="385:59" pos:end="385:67"><expr pos:start="385:59" pos:end="385:67"><name pos:start="385:59" pos:end="385:67">websocket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="389:1" pos:end="389:22">#<cpp:directive pos:start="389:2" pos:end="389:6">ifdef</cpp:directive> <name pos:start="389:8" pos:end="389:22">CONFIG_VNC_SASL</name></cpp:ifdef>

    <if_stmt pos:start="391:5" pos:end="402:0"><if pos:start="391:5" pos:end="402:0">if <condition pos:start="391:8" pos:end="391:62">(<expr pos:start="391:9" pos:end="391:61"><operator pos:start="391:9" pos:end="391:9">(</operator><name pos:start="391:10" pos:end="391:16">saslErr</name> <operator pos:start="391:18" pos:end="391:18">=</operator> <call pos:start="391:20" pos:end="391:49"><name pos:start="391:20" pos:end="391:35">sasl_server_init</name><argument_list pos:start="391:36" pos:end="391:49">(<argument pos:start="391:37" pos:end="391:40"><expr pos:start="391:37" pos:end="391:40"><name pos:start="391:37" pos:end="391:40">NULL</name></expr></argument>, <argument pos:start="391:43" pos:end="391:48"><expr pos:start="391:43" pos:end="391:48"><literal type="string" pos:start="391:43" pos:end="391:48">"qemu"</literal></expr></argument>)</argument_list></call><operator pos:start="391:50" pos:end="391:50">)</operator> <operator pos:start="391:52" pos:end="391:53">!=</operator> <name pos:start="391:55" pos:end="391:61">SASL_OK</name></expr>)</condition> <block pos:start="391:64" pos:end="402:0">{<block_content pos:start="393:9" pos:end="397:18">

        <expr_stmt pos:start="393:9" pos:end="395:56"><expr pos:start="393:9" pos:end="395:55"><call pos:start="393:9" pos:end="395:55"><name pos:start="393:9" pos:end="393:18">error_setg</name><argument_list pos:start="393:19" pos:end="395:55">(<argument pos:start="393:20" pos:end="393:23"><expr pos:start="393:20" pos:end="393:23"><name pos:start="393:20" pos:end="393:23">errp</name></expr></argument>, <argument pos:start="393:26" pos:end="393:61"><expr pos:start="393:26" pos:end="393:61"><literal type="string" pos:start="393:26" pos:end="393:61">"Failed to initialize SASL auth: %s"</literal></expr></argument>,

                   <argument pos:start="395:20" pos:end="395:54"><expr pos:start="395:20" pos:end="395:54"><call pos:start="395:20" pos:end="395:54"><name pos:start="395:20" pos:end="395:33">sasl_errstring</name><argument_list pos:start="395:34" pos:end="395:54">(<argument pos:start="395:35" pos:end="395:41"><expr pos:start="395:35" pos:end="395:41"><name pos:start="395:35" pos:end="395:41">saslErr</name></expr></argument>, <argument pos:start="395:44" pos:end="395:47"><expr pos:start="395:44" pos:end="395:47"><name pos:start="395:44" pos:end="395:47">NULL</name></expr></argument>, <argument pos:start="395:50" pos:end="395:53"><expr pos:start="395:50" pos:end="395:53"><name pos:start="395:50" pos:end="395:53">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="397:9" pos:end="397:18">goto <name pos:start="397:14" pos:end="397:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="401:1" pos:end="401:6">#<cpp:directive pos:start="401:2" pos:end="401:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="403:5" pos:end="403:38"><expr pos:start="403:5" pos:end="403:37"><name pos:start="403:5" pos:end="403:21"><name pos:start="403:5" pos:end="403:6">vs</name><operator pos:start="403:7" pos:end="403:8">-&gt;</operator><name pos:start="403:9" pos:end="403:21">lock_key_sync</name></name> <operator pos:start="403:23" pos:end="403:23">=</operator> <name pos:start="403:25" pos:end="403:37">lock_key_sync</name></expr>;</expr_stmt>



    <expr_stmt pos:start="407:5" pos:end="407:46"><expr pos:start="407:5" pos:end="407:45"><name pos:start="407:5" pos:end="407:13">device_id</name> <operator pos:start="407:15" pos:end="407:15">=</operator> <call pos:start="407:17" pos:end="407:45"><name pos:start="407:17" pos:end="407:28">qemu_opt_get</name><argument_list pos:start="407:29" pos:end="407:45">(<argument pos:start="407:30" pos:end="407:33"><expr pos:start="407:30" pos:end="407:33"><name pos:start="407:30" pos:end="407:33">opts</name></expr></argument>, <argument pos:start="407:36" pos:end="407:44"><expr pos:start="407:36" pos:end="407:44"><literal type="string" pos:start="407:36" pos:end="407:44">"display"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="409:5" pos:end="445:5"><if pos:start="409:5" pos:end="441:5">if <condition pos:start="409:8" pos:end="409:18">(<expr pos:start="409:9" pos:end="409:17"><name pos:start="409:9" pos:end="409:17">device_id</name></expr>)</condition> <block pos:start="409:20" pos:end="441:5">{<block_content pos:start="411:9" pos:end="439:9">

        <decl_stmt pos:start="411:9" pos:end="411:25"><decl pos:start="411:9" pos:end="411:24"><type pos:start="411:9" pos:end="411:21"><name pos:start="411:9" pos:end="411:19">DeviceState</name> <modifier pos:start="411:21" pos:end="411:21">*</modifier></type><name pos:start="411:22" pos:end="411:24">dev</name></decl>;</decl_stmt>

        <decl_stmt pos:start="413:9" pos:end="413:56"><decl pos:start="413:9" pos:end="413:55"><type pos:start="413:9" pos:end="413:11"><name pos:start="413:9" pos:end="413:11">int</name></type> <name pos:start="413:13" pos:end="413:16">head</name> <init pos:start="413:18" pos:end="413:55">= <expr pos:start="413:20" pos:end="413:55"><call pos:start="413:20" pos:end="413:55"><name pos:start="413:20" pos:end="413:38">qemu_opt_get_number</name><argument_list pos:start="413:39" pos:end="413:55">(<argument pos:start="413:40" pos:end="413:43"><expr pos:start="413:40" pos:end="413:43"><name pos:start="413:40" pos:end="413:43">opts</name></expr></argument>, <argument pos:start="413:46" pos:end="413:51"><expr pos:start="413:46" pos:end="413:51"><literal type="string" pos:start="413:46" pos:end="413:51">"head"</literal></expr></argument>, <argument pos:start="413:54" pos:end="413:54"><expr pos:start="413:54" pos:end="413:54"><literal type="number" pos:start="413:54" pos:end="413:54">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="417:9" pos:end="417:67"><expr pos:start="417:9" pos:end="417:66"><name pos:start="417:9" pos:end="417:11">dev</name> <operator pos:start="417:13" pos:end="417:13">=</operator> <call pos:start="417:15" pos:end="417:66"><name pos:start="417:15" pos:end="417:33">qdev_find_recursive</name><argument_list pos:start="417:34" pos:end="417:66">(<argument pos:start="417:35" pos:end="417:54"><expr pos:start="417:35" pos:end="417:54"><call pos:start="417:35" pos:end="417:54"><name pos:start="417:35" pos:end="417:52">sysbus_get_default</name><argument_list pos:start="417:53" pos:end="417:54">()</argument_list></call></expr></argument>, <argument pos:start="417:57" pos:end="417:65"><expr pos:start="417:57" pos:end="417:65"><name pos:start="417:57" pos:end="417:65">device_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="419:9" pos:end="425:9"><if pos:start="419:9" pos:end="425:9">if <condition pos:start="419:12" pos:end="419:24">(<expr pos:start="419:13" pos:end="419:23"><name pos:start="419:13" pos:end="419:15">dev</name> <operator pos:start="419:17" pos:end="419:18">==</operator> <name pos:start="419:20" pos:end="419:23">NULL</name></expr>)</condition> <block pos:start="419:26" pos:end="425:9">{<block_content pos:start="421:13" pos:end="423:22">

            <expr_stmt pos:start="421:13" pos:end="421:65"><expr pos:start="421:13" pos:end="421:64"><call pos:start="421:13" pos:end="421:64"><name pos:start="421:13" pos:end="421:22">error_setg</name><argument_list pos:start="421:23" pos:end="421:64">(<argument pos:start="421:24" pos:end="421:27"><expr pos:start="421:24" pos:end="421:27"><name pos:start="421:24" pos:end="421:27">errp</name></expr></argument>, <argument pos:start="421:30" pos:end="421:52"><expr pos:start="421:30" pos:end="421:52"><literal type="string" pos:start="421:30" pos:end="421:52">"Device '%s' not found"</literal></expr></argument>, <argument pos:start="421:55" pos:end="421:63"><expr pos:start="421:55" pos:end="421:63"><name pos:start="421:55" pos:end="421:63">device_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="423:13" pos:end="423:22">goto <name pos:start="423:18" pos:end="423:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="429:9" pos:end="429:55"><expr pos:start="429:9" pos:end="429:54"><name pos:start="429:9" pos:end="429:11">con</name> <operator pos:start="429:13" pos:end="429:13">=</operator> <call pos:start="429:15" pos:end="429:54"><name pos:start="429:15" pos:end="429:43">qemu_console_lookup_by_device</name><argument_list pos:start="429:44" pos:end="429:54">(<argument pos:start="429:45" pos:end="429:47"><expr pos:start="429:45" pos:end="429:47"><name pos:start="429:45" pos:end="429:47">dev</name></expr></argument>, <argument pos:start="429:50" pos:end="429:53"><expr pos:start="429:50" pos:end="429:53"><name pos:start="429:50" pos:end="429:53">head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="431:9" pos:end="439:9"><if pos:start="431:9" pos:end="439:9">if <condition pos:start="431:12" pos:end="431:24">(<expr pos:start="431:13" pos:end="431:23"><name pos:start="431:13" pos:end="431:15">con</name> <operator pos:start="431:17" pos:end="431:18">==</operator> <name pos:start="431:20" pos:end="431:23">NULL</name></expr>)</condition> <block pos:start="431:26" pos:end="439:9">{<block_content pos:start="433:13" pos:end="437:22">

            <expr_stmt pos:start="433:13" pos:end="435:34"><expr pos:start="433:13" pos:end="435:33"><call pos:start="433:13" pos:end="435:33"><name pos:start="433:13" pos:end="433:22">error_setg</name><argument_list pos:start="433:23" pos:end="435:33">(<argument pos:start="433:24" pos:end="433:27"><expr pos:start="433:24" pos:end="433:27"><name pos:start="433:24" pos:end="433:27">errp</name></expr></argument>, <argument pos:start="433:30" pos:end="433:70"><expr pos:start="433:30" pos:end="433:70"><literal type="string" pos:start="433:30" pos:end="433:70">"Device %s is not bound to a QemuConsole"</literal></expr></argument>,

                       <argument pos:start="435:24" pos:end="435:32"><expr pos:start="435:24" pos:end="435:32"><name pos:start="435:24" pos:end="435:32">device_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="437:13" pos:end="437:22">goto <name pos:start="437:18" pos:end="437:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="441:7" pos:end="445:5">else <block pos:start="441:12" pos:end="445:5">{<block_content pos:start="443:9" pos:end="443:19">

        <expr_stmt pos:start="443:9" pos:end="443:19"><expr pos:start="443:9" pos:end="443:18"><name pos:start="443:9" pos:end="443:11">con</name> <operator pos:start="443:13" pos:end="443:13">=</operator> <name pos:start="443:15" pos:end="443:18">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="449:5" pos:end="457:5"><if pos:start="449:5" pos:end="457:5">if <condition pos:start="449:8" pos:end="449:27">(<expr pos:start="449:9" pos:end="449:26"><name pos:start="449:9" pos:end="449:11">con</name> <operator pos:start="449:13" pos:end="449:14">!=</operator> <name pos:start="449:16" pos:end="449:26"><name pos:start="449:16" pos:end="449:17">vs</name><operator pos:start="449:18" pos:end="449:19">-&gt;</operator><name pos:start="449:20" pos:end="449:22">dcl</name><operator pos:start="449:23" pos:end="449:23">.</operator><name pos:start="449:24" pos:end="449:26">con</name></name></expr>)</condition> <block pos:start="449:29" pos:end="457:5">{<block_content pos:start="451:9" pos:end="455:49">

        <expr_stmt pos:start="451:9" pos:end="451:51"><expr pos:start="451:9" pos:end="451:50"><call pos:start="451:9" pos:end="451:50"><name pos:start="451:9" pos:end="451:40">unregister_displaychangelistener</name><argument_list pos:start="451:41" pos:end="451:50">(<argument pos:start="451:42" pos:end="451:49"><expr pos:start="451:42" pos:end="451:49"><operator pos:start="451:42" pos:end="451:42">&amp;</operator><name pos:start="451:43" pos:end="451:49"><name pos:start="451:43" pos:end="451:44">vs</name><operator pos:start="451:45" pos:end="451:46">-&gt;</operator><name pos:start="451:47" pos:end="451:49">dcl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="453:9" pos:end="453:26"><expr pos:start="453:9" pos:end="453:25"><name pos:start="453:9" pos:end="453:19"><name pos:start="453:9" pos:end="453:10">vs</name><operator pos:start="453:11" pos:end="453:12">-&gt;</operator><name pos:start="453:13" pos:end="453:15">dcl</name><operator pos:start="453:16" pos:end="453:16">.</operator><name pos:start="453:17" pos:end="453:19">con</name></name> <operator pos:start="453:21" pos:end="453:21">=</operator> <name pos:start="453:23" pos:end="453:25">con</name></expr>;</expr_stmt>

        <expr_stmt pos:start="455:9" pos:end="455:49"><expr pos:start="455:9" pos:end="455:48"><call pos:start="455:9" pos:end="455:48"><name pos:start="455:9" pos:end="455:38">register_displaychangelistener</name><argument_list pos:start="455:39" pos:end="455:48">(<argument pos:start="455:40" pos:end="455:47"><expr pos:start="455:40" pos:end="455:47"><operator pos:start="455:40" pos:end="455:40">&amp;</operator><name pos:start="455:41" pos:end="455:47"><name pos:start="455:41" pos:end="455:42">vs</name><operator pos:start="455:43" pos:end="455:44">-&gt;</operator><name pos:start="455:45" pos:end="455:47">dcl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="461:5" pos:end="557:5"><if pos:start="461:5" pos:end="493:5">if <condition pos:start="461:8" pos:end="461:16">(<expr pos:start="461:9" pos:end="461:15"><name pos:start="461:9" pos:end="461:15">reverse</name></expr>)</condition> <block pos:start="461:18" pos:end="493:5">{<block_content pos:start="465:9" pos:end="491:45">

        <comment type="block" pos:start="463:9" pos:end="463:31">/* connect to viewer */</comment>

        <decl_stmt pos:start="465:9" pos:end="465:18"><decl pos:start="465:9" pos:end="465:17"><type pos:start="465:9" pos:end="465:11"><name pos:start="465:9" pos:end="465:11">int</name></type> <name pos:start="465:13" pos:end="465:17">csock</name></decl>;</decl_stmt>

        <expr_stmt pos:start="467:9" pos:end="470:0"><expr pos:start="467:9" pos:end="467:22"><name pos:start="467:9" pos:end="467:17"><name pos:start="467:9" pos:end="467:10">vs</name><operator pos:start="467:11" pos:end="467:12">-&gt;</operator><name pos:start="467:13" pos:end="467:17">lsock</name></name> <operator pos:start="467:19" pos:end="467:19">=</operator> <operator pos:start="467:21" pos:end="467:21">-</operator><literal type="number" pos:start="467:22" pos:end="467:22">1</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="469:1" pos:end="469:20">#<cpp:directive pos:start="469:2" pos:end="469:6">ifdef</cpp:directive> <name pos:start="469:8" pos:end="469:20">CONFIG_VNC_WS</name></cpp:ifdef>

        <expr_stmt pos:start="471:9" pos:end="474:0"><expr pos:start="471:9" pos:end="471:25"><name pos:start="471:9" pos:end="471:20"><name pos:start="471:9" pos:end="471:10">vs</name><operator pos:start="471:11" pos:end="471:12">-&gt;</operator><name pos:start="471:13" pos:end="471:20">lwebsock</name></name> <operator pos:start="471:22" pos:end="471:22">=</operator> <operator pos:start="471:24" pos:end="471:24">-</operator><literal type="number" pos:start="471:25" pos:end="471:25">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="473:1" pos:end="473:6">#<cpp:directive pos:start="473:2" pos:end="473:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="475:9" pos:end="483:9"><if pos:start="475:9" pos:end="479:9">if <condition pos:start="475:12" pos:end="475:42">(<expr pos:start="475:13" pos:end="475:41"><call pos:start="475:13" pos:end="475:36"><name pos:start="475:13" pos:end="475:19">strncmp</name><argument_list pos:start="475:20" pos:end="475:36">(<argument pos:start="475:21" pos:end="475:23"><expr pos:start="475:21" pos:end="475:23"><name pos:start="475:21" pos:end="475:23">vnc</name></expr></argument>, <argument pos:start="475:26" pos:end="475:32"><expr pos:start="475:26" pos:end="475:32"><literal type="string" pos:start="475:26" pos:end="475:32">"unix:"</literal></expr></argument>, <argument pos:start="475:35" pos:end="475:35"><expr pos:start="475:35" pos:end="475:35"><literal type="number" pos:start="475:35" pos:end="475:35">5</literal></expr></argument>)</argument_list></call> <operator pos:start="475:38" pos:end="475:39">==</operator> <literal type="number" pos:start="475:41" pos:end="475:41">0</literal></expr>)</condition> <block pos:start="475:44" pos:end="479:9">{<block_content pos:start="477:13" pos:end="477:46">

            <expr_stmt pos:start="477:13" pos:end="477:46"><expr pos:start="477:13" pos:end="477:45"><name pos:start="477:13" pos:end="477:17">csock</name> <operator pos:start="477:19" pos:end="477:19">=</operator> <call pos:start="477:21" pos:end="477:45"><name pos:start="477:21" pos:end="477:32">unix_connect</name><argument_list pos:start="477:33" pos:end="477:45">(<argument pos:start="477:34" pos:end="477:38"><expr pos:start="477:34" pos:end="477:38"><name pos:start="477:34" pos:end="477:36">vnc</name><operator pos:start="477:37" pos:end="477:37">+</operator><literal type="number" pos:start="477:38" pos:end="477:38">5</literal></expr></argument>, <argument pos:start="477:41" pos:end="477:44"><expr pos:start="477:41" pos:end="477:44"><name pos:start="477:41" pos:end="477:44">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="479:11" pos:end="483:9">else <block pos:start="479:16" pos:end="483:9">{<block_content pos:start="481:13" pos:end="481:44">

            <expr_stmt pos:start="481:13" pos:end="481:44"><expr pos:start="481:13" pos:end="481:43"><name pos:start="481:13" pos:end="481:17">csock</name> <operator pos:start="481:19" pos:end="481:19">=</operator> <call pos:start="481:21" pos:end="481:43"><name pos:start="481:21" pos:end="481:32">inet_connect</name><argument_list pos:start="481:33" pos:end="481:43">(<argument pos:start="481:34" pos:end="481:36"><expr pos:start="481:34" pos:end="481:36"><name pos:start="481:34" pos:end="481:36">vnc</name></expr></argument>, <argument pos:start="481:39" pos:end="481:42"><expr pos:start="481:39" pos:end="481:42"><name pos:start="481:39" pos:end="481:42">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="485:9" pos:end="489:9"><if pos:start="485:9" pos:end="489:9">if <condition pos:start="485:12" pos:end="485:22">(<expr pos:start="485:13" pos:end="485:21"><name pos:start="485:13" pos:end="485:17">csock</name> <operator pos:start="485:19" pos:end="485:19">&lt;</operator> <literal type="number" pos:start="485:21" pos:end="485:21">0</literal></expr>)</condition> <block pos:start="485:24" pos:end="489:9">{<block_content pos:start="487:13" pos:end="487:22">

            <goto pos:start="487:13" pos:end="487:22">goto <name pos:start="487:18" pos:end="487:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="491:9" pos:end="491:45"><expr pos:start="491:9" pos:end="491:44"><call pos:start="491:9" pos:end="491:44"><name pos:start="491:9" pos:end="491:19">vnc_connect</name><argument_list pos:start="491:20" pos:end="491:44">(<argument pos:start="491:21" pos:end="491:22"><expr pos:start="491:21" pos:end="491:22"><name pos:start="491:21" pos:end="491:22">vs</name></expr></argument>, <argument pos:start="491:25" pos:end="491:29"><expr pos:start="491:25" pos:end="491:29"><name pos:start="491:25" pos:end="491:29">csock</name></expr></argument>, <argument pos:start="491:32" pos:end="491:36"><expr pos:start="491:32" pos:end="491:36"><name pos:start="491:32" pos:end="491:36">false</name></expr></argument>, <argument pos:start="491:39" pos:end="491:43"><expr pos:start="491:39" pos:end="491:43"><name pos:start="491:39" pos:end="491:43">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="493:7" pos:end="557:5">else <block pos:start="493:12" pos:end="557:5">{<block_content pos:start="497:9" pos:end="556:0">

        <comment type="block" pos:start="495:9" pos:end="495:33">/* listen for connects */</comment>

        <if_stmt pos:start="497:9" pos:end="537:9"><if pos:start="497:9" pos:end="503:9">if <condition pos:start="497:12" pos:end="497:42">(<expr pos:start="497:13" pos:end="497:41"><call pos:start="497:13" pos:end="497:36"><name pos:start="497:13" pos:end="497:19">strncmp</name><argument_list pos:start="497:20" pos:end="497:36">(<argument pos:start="497:21" pos:end="497:23"><expr pos:start="497:21" pos:end="497:23"><name pos:start="497:21" pos:end="497:23">vnc</name></expr></argument>, <argument pos:start="497:26" pos:end="497:32"><expr pos:start="497:26" pos:end="497:32"><literal type="string" pos:start="497:26" pos:end="497:32">"unix:"</literal></expr></argument>, <argument pos:start="497:35" pos:end="497:35"><expr pos:start="497:35" pos:end="497:35"><literal type="number" pos:start="497:35" pos:end="497:35">5</literal></expr></argument>)</argument_list></call> <operator pos:start="497:38" pos:end="497:39">==</operator> <literal type="number" pos:start="497:41" pos:end="497:41">0</literal></expr>)</condition> <block pos:start="497:44" pos:end="503:9">{<block_content pos:start="499:13" pos:end="501:31">

            <expr_stmt pos:start="499:13" pos:end="499:58"><expr pos:start="499:13" pos:end="499:57"><name pos:start="499:13" pos:end="499:21"><name pos:start="499:13" pos:end="499:14">vs</name><operator pos:start="499:15" pos:end="499:16">-&gt;</operator><name pos:start="499:17" pos:end="499:21">lsock</name></name> <operator pos:start="499:23" pos:end="499:23">=</operator> <call pos:start="499:25" pos:end="499:57"><name pos:start="499:25" pos:end="499:35">unix_listen</name><argument_list pos:start="499:36" pos:end="499:57">(<argument pos:start="499:37" pos:end="499:41"><expr pos:start="499:37" pos:end="499:41"><name pos:start="499:37" pos:end="499:39">vnc</name><operator pos:start="499:40" pos:end="499:40">+</operator><literal type="number" pos:start="499:41" pos:end="499:41">5</literal></expr></argument>, <argument pos:start="499:44" pos:end="499:47"><expr pos:start="499:44" pos:end="499:47"><name pos:start="499:44" pos:end="499:47">NULL</name></expr></argument>, <argument pos:start="499:50" pos:end="499:50"><expr pos:start="499:50" pos:end="499:50"><literal type="number" pos:start="499:50" pos:end="499:50">0</literal></expr></argument>, <argument pos:start="499:53" pos:end="499:56"><expr pos:start="499:53" pos:end="499:56"><name pos:start="499:53" pos:end="499:56">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="501:13" pos:end="501:31"><expr pos:start="501:13" pos:end="501:30"><name pos:start="501:13" pos:end="501:23"><name pos:start="501:13" pos:end="501:14">vs</name><operator pos:start="501:15" pos:end="501:16">-&gt;</operator><name pos:start="501:17" pos:end="501:23">is_unix</name></name> <operator pos:start="501:25" pos:end="501:25">=</operator> <name pos:start="501:27" pos:end="501:30">true</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="503:11" pos:end="537:9">else <block pos:start="503:16" pos:end="537:9">{<block_content pos:start="505:13" pos:end="536:0">

            <expr_stmt pos:start="505:13" pos:end="505:60"><expr pos:start="505:13" pos:end="505:59"><name pos:start="505:13" pos:end="505:21"><name pos:start="505:13" pos:end="505:14">vs</name><operator pos:start="505:15" pos:end="505:16">-&gt;</operator><name pos:start="505:17" pos:end="505:21">lsock</name></name> <operator pos:start="505:23" pos:end="505:23">=</operator> <call pos:start="505:25" pos:end="505:59"><name pos:start="505:25" pos:end="505:40">inet_listen_opts</name><argument_list pos:start="505:41" pos:end="505:59">(<argument pos:start="505:42" pos:end="505:46"><expr pos:start="505:42" pos:end="505:46"><name pos:start="505:42" pos:end="505:46">sopts</name></expr></argument>, <argument pos:start="505:49" pos:end="505:52"><expr pos:start="505:49" pos:end="505:52"><literal type="number" pos:start="505:49" pos:end="505:52">5900</literal></expr></argument>, <argument pos:start="505:55" pos:end="505:58"><expr pos:start="505:55" pos:end="505:58"><name pos:start="505:55" pos:end="505:58">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="507:13" pos:end="514:0"><if pos:start="507:13" pos:end="514:0">if <condition pos:start="507:16" pos:end="507:30">(<expr pos:start="507:17" pos:end="507:29"><name pos:start="507:17" pos:end="507:25"><name pos:start="507:17" pos:end="507:18">vs</name><operator pos:start="507:19" pos:end="507:20">-&gt;</operator><name pos:start="507:21" pos:end="507:25">lsock</name></name> <operator pos:start="507:27" pos:end="507:27">&lt;</operator> <literal type="number" pos:start="507:29" pos:end="507:29">0</literal></expr>)</condition> <block pos:start="507:32" pos:end="514:0">{<block_content pos:start="509:17" pos:end="509:26">

                <goto pos:start="509:17" pos:end="509:26">goto <name pos:start="509:22" pos:end="509:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="513:1" pos:end="513:20">#<cpp:directive pos:start="513:2" pos:end="513:6">ifdef</cpp:directive> <name pos:start="513:8" pos:end="513:20">CONFIG_VNC_WS</name></cpp:ifdef>

            <if_stmt pos:start="515:13" pos:end="536:0"><if pos:start="515:13" pos:end="536:0">if <condition pos:start="515:16" pos:end="515:31">(<expr pos:start="515:17" pos:end="515:30"><name pos:start="515:17" pos:end="515:30"><name pos:start="515:17" pos:end="515:18">vs</name><operator pos:start="515:19" pos:end="515:20">-&gt;</operator><name pos:start="515:21" pos:end="515:30">ws_enabled</name></name></expr>)</condition> <block pos:start="515:33" pos:end="536:0">{<block_content pos:start="517:17" pos:end="531:17">

                <expr_stmt pos:start="517:17" pos:end="517:65"><expr pos:start="517:17" pos:end="517:64"><name pos:start="517:17" pos:end="517:28"><name pos:start="517:17" pos:end="517:18">vs</name><operator pos:start="517:19" pos:end="517:20">-&gt;</operator><name pos:start="517:21" pos:end="517:28">lwebsock</name></name> <operator pos:start="517:30" pos:end="517:30">=</operator> <call pos:start="517:32" pos:end="517:64"><name pos:start="517:32" pos:end="517:47">inet_listen_opts</name><argument_list pos:start="517:48" pos:end="517:64">(<argument pos:start="517:49" pos:end="517:54"><expr pos:start="517:49" pos:end="517:54"><name pos:start="517:49" pos:end="517:54">wsopts</name></expr></argument>, <argument pos:start="517:57" pos:end="517:57"><expr pos:start="517:57" pos:end="517:57"><literal type="number" pos:start="517:57" pos:end="517:57">0</literal></expr></argument>, <argument pos:start="517:60" pos:end="517:63"><expr pos:start="517:60" pos:end="517:63"><name pos:start="517:60" pos:end="517:63">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="519:17" pos:end="531:17"><if pos:start="519:17" pos:end="531:17">if <condition pos:start="519:20" pos:end="519:37">(<expr pos:start="519:21" pos:end="519:36"><name pos:start="519:21" pos:end="519:32"><name pos:start="519:21" pos:end="519:22">vs</name><operator pos:start="519:23" pos:end="519:24">-&gt;</operator><name pos:start="519:25" pos:end="519:32">lwebsock</name></name> <operator pos:start="519:34" pos:end="519:34">&lt;</operator> <literal type="number" pos:start="519:36" pos:end="519:36">0</literal></expr>)</condition> <block pos:start="519:39" pos:end="531:17">{<block_content pos:start="521:21" pos:end="529:30">

                    <if_stmt pos:start="521:21" pos:end="527:21"><if pos:start="521:21" pos:end="527:21">if <condition pos:start="521:24" pos:end="521:40">(<expr pos:start="521:25" pos:end="521:39"><name pos:start="521:25" pos:end="521:33"><name pos:start="521:25" pos:end="521:26">vs</name><operator pos:start="521:27" pos:end="521:28">-&gt;</operator><name pos:start="521:29" pos:end="521:33">lsock</name></name> <operator pos:start="521:35" pos:end="521:36">!=</operator> <operator pos:start="521:38" pos:end="521:38">-</operator><literal type="number" pos:start="521:39" pos:end="521:39">1</literal></expr>)</condition> <block pos:start="521:42" pos:end="527:21">{<block_content pos:start="523:25" pos:end="525:39">

                        <expr_stmt pos:start="523:25" pos:end="523:41"><expr pos:start="523:25" pos:end="523:40"><call pos:start="523:25" pos:end="523:40"><name pos:start="523:25" pos:end="523:29">close</name><argument_list pos:start="523:30" pos:end="523:40">(<argument pos:start="523:31" pos:end="523:39"><expr pos:start="523:31" pos:end="523:39"><name pos:start="523:31" pos:end="523:39"><name pos:start="523:31" pos:end="523:32">vs</name><operator pos:start="523:33" pos:end="523:34">-&gt;</operator><name pos:start="523:35" pos:end="523:39">lsock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="525:25" pos:end="525:39"><expr pos:start="525:25" pos:end="525:38"><name pos:start="525:25" pos:end="525:33"><name pos:start="525:25" pos:end="525:26">vs</name><operator pos:start="525:27" pos:end="525:28">-&gt;</operator><name pos:start="525:29" pos:end="525:33">lsock</name></name> <operator pos:start="525:35" pos:end="525:35">=</operator> <operator pos:start="525:37" pos:end="525:37">-</operator><literal type="number" pos:start="525:38" pos:end="525:38">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <goto pos:start="529:21" pos:end="529:30">goto <name pos:start="529:26" pos:end="529:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="535:1" pos:end="535:6">#<cpp:directive pos:start="535:2" pos:end="535:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="535:8" pos:end="535:26">/* CONFIG_VNC_WS */</comment>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="539:9" pos:end="539:27"><expr pos:start="539:9" pos:end="539:26"><name pos:start="539:9" pos:end="539:19"><name pos:start="539:9" pos:end="539:10">vs</name><operator pos:start="539:11" pos:end="539:12">-&gt;</operator><name pos:start="539:13" pos:end="539:19">enabled</name></name> <operator pos:start="539:21" pos:end="539:21">=</operator> <name pos:start="539:23" pos:end="539:26">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="541:9" pos:end="546:0"><expr pos:start="541:9" pos:end="543:50"><call pos:start="541:9" pos:end="543:50"><name pos:start="541:9" pos:end="541:28">qemu_set_fd_handler2</name><argument_list pos:start="541:29" pos:end="543:50">(<argument pos:start="541:30" pos:end="541:38"><expr pos:start="541:30" pos:end="541:38"><name pos:start="541:30" pos:end="541:38"><name pos:start="541:30" pos:end="541:31">vs</name><operator pos:start="541:32" pos:end="541:33">-&gt;</operator><name pos:start="541:34" pos:end="541:38">lsock</name></name></expr></argument>, <argument pos:start="541:41" pos:end="541:44"><expr pos:start="541:41" pos:end="541:44"><name pos:start="541:41" pos:end="541:44">NULL</name></expr></argument>,

                <argument pos:start="543:17" pos:end="543:39"><expr pos:start="543:17" pos:end="543:39"><name pos:start="543:17" pos:end="543:39">vnc_listen_regular_read</name></expr></argument>, <argument pos:start="543:42" pos:end="543:45"><expr pos:start="543:42" pos:end="543:45"><name pos:start="543:42" pos:end="543:45">NULL</name></expr></argument>, <argument pos:start="543:48" pos:end="543:49"><expr pos:start="543:48" pos:end="543:49"><name pos:start="543:48" pos:end="543:49">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="545:1" pos:end="545:20">#<cpp:directive pos:start="545:2" pos:end="545:6">ifdef</cpp:directive> <name pos:start="545:8" pos:end="545:20">CONFIG_VNC_WS</name></cpp:ifdef>

        <if_stmt pos:start="547:9" pos:end="556:0"><if pos:start="547:9" pos:end="556:0">if <condition pos:start="547:12" pos:end="547:27">(<expr pos:start="547:13" pos:end="547:26"><name pos:start="547:13" pos:end="547:26"><name pos:start="547:13" pos:end="547:14">vs</name><operator pos:start="547:15" pos:end="547:16">-&gt;</operator><name pos:start="547:17" pos:end="547:26">ws_enabled</name></name></expr>)</condition> <block pos:start="547:29" pos:end="556:0">{<block_content pos:start="549:13" pos:end="551:57">

            <expr_stmt pos:start="549:13" pos:end="551:57"><expr pos:start="549:13" pos:end="551:56"><call pos:start="549:13" pos:end="551:56"><name pos:start="549:13" pos:end="549:32">qemu_set_fd_handler2</name><argument_list pos:start="549:33" pos:end="551:56">(<argument pos:start="549:34" pos:end="549:45"><expr pos:start="549:34" pos:end="549:45"><name pos:start="549:34" pos:end="549:45"><name pos:start="549:34" pos:end="549:35">vs</name><operator pos:start="549:36" pos:end="549:37">-&gt;</operator><name pos:start="549:38" pos:end="549:45">lwebsock</name></name></expr></argument>, <argument pos:start="549:48" pos:end="549:51"><expr pos:start="549:48" pos:end="549:51"><name pos:start="549:48" pos:end="549:51">NULL</name></expr></argument>,

                    <argument pos:start="551:21" pos:end="551:45"><expr pos:start="551:21" pos:end="551:45"><name pos:start="551:21" pos:end="551:45">vnc_listen_websocket_read</name></expr></argument>, <argument pos:start="551:48" pos:end="551:51"><expr pos:start="551:48" pos:end="551:51"><name pos:start="551:48" pos:end="551:51">NULL</name></expr></argument>, <argument pos:start="551:54" pos:end="551:55"><expr pos:start="551:54" pos:end="551:55"><name pos:start="551:54" pos:end="551:55">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="555:1" pos:end="555:6">#<cpp:directive pos:start="555:2" pos:end="555:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="555:8" pos:end="555:26">/* CONFIG_VNC_WS */</comment>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="559:5" pos:end="559:25"><expr pos:start="559:5" pos:end="559:24"><call pos:start="559:5" pos:end="559:24"><name pos:start="559:5" pos:end="559:17">qemu_opts_del</name><argument_list pos:start="559:18" pos:end="559:24">(<argument pos:start="559:19" pos:end="559:23"><expr pos:start="559:19" pos:end="559:23"><name pos:start="559:19" pos:end="559:23">sopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="561:5" pos:end="561:26"><expr pos:start="561:5" pos:end="561:25"><call pos:start="561:5" pos:end="561:25"><name pos:start="561:5" pos:end="561:17">qemu_opts_del</name><argument_list pos:start="561:18" pos:end="561:25">(<argument pos:start="561:19" pos:end="561:24"><expr pos:start="561:19" pos:end="561:24"><name pos:start="561:19" pos:end="561:24">wsopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="563:5" pos:end="563:11">return;</return>



<label pos:start="567:1" pos:end="567:5"><name pos:start="567:1" pos:end="567:4">fail</name>:</label>

    <expr_stmt pos:start="569:5" pos:end="569:25"><expr pos:start="569:5" pos:end="569:24"><call pos:start="569:5" pos:end="569:24"><name pos:start="569:5" pos:end="569:17">qemu_opts_del</name><argument_list pos:start="569:18" pos:end="569:24">(<argument pos:start="569:19" pos:end="569:23"><expr pos:start="569:19" pos:end="569:23"><name pos:start="569:19" pos:end="569:23">sopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="571:5" pos:end="571:26"><expr pos:start="571:5" pos:end="571:25"><call pos:start="571:5" pos:end="571:25"><name pos:start="571:5" pos:end="571:17">qemu_opts_del</name><argument_list pos:start="571:18" pos:end="571:25">(<argument pos:start="571:19" pos:end="571:24"><expr pos:start="571:19" pos:end="571:24"><name pos:start="571:19" pos:end="571:24">wsopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="573:5" pos:end="576:0"><expr pos:start="573:5" pos:end="573:23"><name pos:start="573:5" pos:end="573:15"><name pos:start="573:5" pos:end="573:6">vs</name><operator pos:start="573:7" pos:end="573:8">-&gt;</operator><name pos:start="573:9" pos:end="573:15">enabled</name></name> <operator pos:start="573:17" pos:end="573:17">=</operator> <name pos:start="573:19" pos:end="573:23">false</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="575:1" pos:end="575:20">#<cpp:directive pos:start="575:2" pos:end="575:6">ifdef</cpp:directive> <name pos:start="575:8" pos:end="575:20">CONFIG_VNC_WS</name></cpp:ifdef>

    <expr_stmt pos:start="577:5" pos:end="580:0"><expr pos:start="577:5" pos:end="577:26"><name pos:start="577:5" pos:end="577:18"><name pos:start="577:5" pos:end="577:6">vs</name><operator pos:start="577:7" pos:end="577:8">-&gt;</operator><name pos:start="577:9" pos:end="577:18">ws_enabled</name></name> <operator pos:start="577:20" pos:end="577:20">=</operator> <name pos:start="577:22" pos:end="577:26">false</name></expr>;</expr_stmt>

<cpp:endif pos:start="579:1" pos:end="579:6">#<cpp:directive pos:start="579:2" pos:end="579:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="579:8" pos:end="579:26">/* CONFIG_VNC_WS */</comment>

</block_content>}</block></function>
</unit>
