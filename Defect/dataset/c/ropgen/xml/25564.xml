<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25564.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">av_open_input_stream</name><parameter_list pos:start="1:25" pos:end="5:68">(<parameter pos:start="1:26" pos:end="1:49"><decl pos:start="1:26" pos:end="1:49"><type pos:start="1:26" pos:end="1:49"><name pos:start="1:26" pos:end="1:40">AVFormatContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier><modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:49">ic_ptr</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:40"><decl pos:start="3:26" pos:end="3:40"><type pos:start="3:26" pos:end="3:40"><name pos:start="3:26" pos:end="3:36">AVIOContext</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:40">pb</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:62"><decl pos:start="3:43" pos:end="3:62"><type pos:start="3:43" pos:end="3:62"><specifier pos:start="3:43" pos:end="3:47">const</specifier> <name pos:start="3:49" pos:end="3:52">char</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:62">filename</name></decl></parameter>,

                         <parameter pos:start="5:26" pos:end="5:43"><decl pos:start="5:26" pos:end="5:43"><type pos:start="5:26" pos:end="5:43"><name pos:start="5:26" pos:end="5:38">AVInputFormat</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:43">fmt</name></decl></parameter>, <parameter pos:start="5:46" pos:end="5:67"><decl pos:start="5:46" pos:end="5:67"><type pos:start="5:46" pos:end="5:67"><name pos:start="5:46" pos:end="5:63">AVFormatParameters</name> <modifier pos:start="5:65" pos:end="5:65">*</modifier></type><name pos:start="5:66" pos:end="5:67">ap</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="73:1">{<block_content pos:start="9:5" pos:end="71:15">

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">AVDictionary</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:22">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:19">AVFormatContext</name> <modifier pos:start="13:21" pos:end="13:21">*</modifier></type><name pos:start="13:22" pos:end="13:23">ic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:34"><decl pos:start="15:5" pos:end="15:33"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:22">AVFormatParameters</name></type> <name pos:start="15:24" pos:end="15:33">default_ap</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if<condition pos:start="19:7" pos:end="19:11">(<expr pos:start="19:8" pos:end="19:10"><operator pos:start="19:8" pos:end="19:8">!</operator><name pos:start="19:9" pos:end="19:10">ap</name></expr>)</condition><block pos:start="19:12" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:42">

        <expr_stmt pos:start="21:9" pos:end="21:23"><expr pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:10">ap</name><operator pos:start="21:11" pos:end="21:11">=</operator><operator pos:start="21:12" pos:end="21:12">&amp;</operator><name pos:start="21:13" pos:end="21:22">default_ap</name></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:42"><expr pos:start="23:9" pos:end="23:41"><call pos:start="23:9" pos:end="23:41"><name pos:start="23:9" pos:end="23:14">memset</name><argument_list pos:start="23:15" pos:end="23:41">(<argument pos:start="23:16" pos:end="23:17"><expr pos:start="23:16" pos:end="23:17"><name pos:start="23:16" pos:end="23:17">ap</name></expr></argument>, <argument pos:start="23:20" pos:end="23:20"><expr pos:start="23:20" pos:end="23:20"><literal type="number" pos:start="23:20" pos:end="23:20">0</literal></expr></argument>, <argument pos:start="23:23" pos:end="23:40"><expr pos:start="23:23" pos:end="23:40"><sizeof pos:start="23:23" pos:end="23:40">sizeof<argument_list pos:start="23:29" pos:end="23:40">(<argument pos:start="23:30" pos:end="23:39"><expr pos:start="23:30" pos:end="23:39"><name pos:start="23:30" pos:end="23:39">default_ap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:41"><expr pos:start="27:5" pos:end="27:40"><name pos:start="27:5" pos:end="27:8">opts</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <call pos:start="27:12" pos:end="27:40"><name pos:start="27:12" pos:end="27:36">convert_format_parameters</name><argument_list pos:start="27:37" pos:end="27:40">(<argument pos:start="27:38" pos:end="27:39"><expr pos:start="27:38" pos:end="27:39"><name pos:start="27:38" pos:end="27:39">ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="37:21"><if pos:start="31:5" pos:end="33:38">if<condition pos:start="31:7" pos:end="31:31">(<expr pos:start="31:8" pos:end="31:30"><operator pos:start="31:8" pos:end="31:8">!</operator><name pos:start="31:9" pos:end="31:30"><name pos:start="31:9" pos:end="31:10">ap</name><operator pos:start="31:11" pos:end="31:12">-&gt;</operator><name pos:start="31:13" pos:end="31:30">prealloced_context</name></name></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:38"><block_content pos:start="33:9" pos:end="33:38">

        <expr_stmt pos:start="33:9" pos:end="33:38"><expr pos:start="33:9" pos:end="33:37"><name pos:start="33:9" pos:end="33:10">ic</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <call pos:start="33:14" pos:end="33:37"><name pos:start="33:14" pos:end="33:35">avformat_alloc_context</name><argument_list pos:start="33:36" pos:end="33:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="35:5" pos:end="37:21">else<block type="pseudo" pos:start="37:9" pos:end="37:21"><block_content pos:start="37:9" pos:end="37:21">

        <expr_stmt pos:start="37:9" pos:end="37:21"><expr pos:start="37:9" pos:end="37:20"><name pos:start="37:9" pos:end="37:10">ic</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <operator pos:start="37:14" pos:end="37:14">*</operator><name pos:start="37:15" pos:end="37:20">ic_ptr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:12">(<expr pos:start="39:9" pos:end="39:11"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:11">ic</name></expr>)</condition> <block pos:start="39:14" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:18">

        <expr_stmt pos:start="41:9" pos:end="41:30"><expr pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:11">err</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <call pos:start="41:15" pos:end="41:29"><name pos:start="41:15" pos:end="41:21">AVERROR</name><argument_list pos:start="41:22" pos:end="41:29">(<argument pos:start="41:23" pos:end="41:28"><expr pos:start="41:23" pos:end="41:28"><name pos:start="41:23" pos:end="41:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="43:9" pos:end="43:18">goto <name pos:start="43:14" pos:end="43:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="47:5" pos:end="55:20"><if pos:start="47:5" pos:end="51:82">if <condition pos:start="47:8" pos:end="47:47">(<expr pos:start="47:9" pos:end="47:46"><name pos:start="47:9" pos:end="47:10">pb</name> <operator pos:start="47:12" pos:end="47:13">&amp;&amp;</operator> <name pos:start="47:15" pos:end="47:17">fmt</name> <operator pos:start="47:19" pos:end="47:20">&amp;&amp;</operator> <name pos:start="47:22" pos:end="47:31"><name pos:start="47:22" pos:end="47:24">fmt</name><operator pos:start="47:25" pos:end="47:26">-&gt;</operator><name pos:start="47:27" pos:end="47:31">flags</name></name> <operator pos:start="47:33" pos:end="47:33">&amp;</operator> <name pos:start="47:35" pos:end="47:46">AVFMT_NOFILE</name></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="51:82"><block_content pos:start="49:9" pos:end="51:82">

        <expr_stmt pos:start="49:9" pos:end="51:82"><expr pos:start="49:9" pos:end="51:81"><call pos:start="49:9" pos:end="51:81"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="51:81">(<argument pos:start="49:16" pos:end="49:17"><expr pos:start="49:16" pos:end="49:17"><name pos:start="49:16" pos:end="49:17">ic</name></expr></argument>, <argument pos:start="49:20" pos:end="49:33"><expr pos:start="49:20" pos:end="49:33"><name pos:start="49:20" pos:end="49:33">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="49:36" pos:end="51:80"><expr pos:start="49:36" pos:end="51:80"><literal type="string" pos:start="49:36" pos:end="49:75">"Custom AVIOContext makes no sense and "</literal>

                                   <literal type="string" pos:start="51:36" pos:end="51:80">"will be ignored with AVFMT_NOFILE format.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="53:5" pos:end="55:20">else<block type="pseudo" pos:start="55:9" pos:end="55:20"><block_content pos:start="55:9" pos:end="55:20">

        <expr_stmt pos:start="55:9" pos:end="55:20"><expr pos:start="55:9" pos:end="55:19"><name pos:start="55:9" pos:end="55:14"><name pos:start="55:9" pos:end="55:10">ic</name><operator pos:start="55:11" pos:end="55:12">-&gt;</operator><name pos:start="55:13" pos:end="55:14">pb</name></name> <operator pos:start="55:16" pos:end="55:16">=</operator> <name pos:start="55:18" pos:end="55:19">pb</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:57"><expr pos:start="59:5" pos:end="59:56"><name pos:start="59:5" pos:end="59:7">err</name> <operator pos:start="59:9" pos:end="59:9">=</operator> <call pos:start="59:11" pos:end="59:56"><name pos:start="59:11" pos:end="59:29">avformat_open_input</name><argument_list pos:start="59:30" pos:end="59:56">(<argument pos:start="59:31" pos:end="59:33"><expr pos:start="59:31" pos:end="59:33"><operator pos:start="59:31" pos:end="59:31">&amp;</operator><name pos:start="59:32" pos:end="59:33">ic</name></expr></argument>, <argument pos:start="59:36" pos:end="59:43"><expr pos:start="59:36" pos:end="59:43"><name pos:start="59:36" pos:end="59:43">filename</name></expr></argument>, <argument pos:start="59:46" pos:end="59:48"><expr pos:start="59:46" pos:end="59:48"><name pos:start="59:46" pos:end="59:48">fmt</name></expr></argument>, <argument pos:start="59:51" pos:end="59:55"><expr pos:start="59:51" pos:end="59:55"><operator pos:start="59:51" pos:end="59:51">&amp;</operator><name pos:start="59:52" pos:end="59:55">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:34"><expr pos:start="61:5" pos:end="61:33"><name pos:start="61:5" pos:end="61:10"><name pos:start="61:5" pos:end="61:6">ic</name><operator pos:start="61:7" pos:end="61:8">-&gt;</operator><name pos:start="61:9" pos:end="61:10">pb</name></name> <operator pos:start="61:12" pos:end="61:12">=</operator> <ternary pos:start="61:14" pos:end="61:33"><condition pos:start="61:14" pos:end="61:21"><expr pos:start="61:14" pos:end="61:19"><name pos:start="61:14" pos:end="61:19"><name pos:start="61:14" pos:end="61:15">ic</name><operator pos:start="61:16" pos:end="61:17">-&gt;</operator><name pos:start="61:18" pos:end="61:19">pb</name></name></expr> ?</condition><then pos:start="61:23" pos:end="61:28"> <expr pos:start="61:23" pos:end="61:28"><name pos:start="61:23" pos:end="61:28"><name pos:start="61:23" pos:end="61:24">ic</name><operator pos:start="61:25" pos:end="61:26">-&gt;</operator><name pos:start="61:27" pos:end="61:28">pb</name></name></expr> </then><else pos:start="61:30" pos:end="61:33">: <expr pos:start="61:32" pos:end="61:33"><name pos:start="61:32" pos:end="61:33">pb</name></expr></else></ternary></expr>;</expr_stmt> <comment type="line" pos:start="61:36" pos:end="61:81">// don't leak custom pb if it wasn't set above</comment>



    <expr_stmt pos:start="65:5" pos:end="65:17"><expr pos:start="65:5" pos:end="65:16"><operator pos:start="65:5" pos:end="65:5">*</operator><name pos:start="65:6" pos:end="65:11">ic_ptr</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <name pos:start="65:15" pos:end="65:16">ic</name></expr>;</expr_stmt>

<label pos:start="67:1" pos:end="67:5"><name pos:start="67:1" pos:end="67:4">fail</name>:</label>

    <expr_stmt pos:start="69:5" pos:end="69:24"><expr pos:start="69:5" pos:end="69:23"><call pos:start="69:5" pos:end="69:23"><name pos:start="69:5" pos:end="69:16">av_dict_free</name><argument_list pos:start="69:17" pos:end="69:23">(<argument pos:start="69:18" pos:end="69:22"><expr pos:start="69:18" pos:end="69:22"><operator pos:start="69:18" pos:end="69:18">&amp;</operator><name pos:start="69:19" pos:end="69:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="71:5" pos:end="71:15">return <expr pos:start="71:12" pos:end="71:14"><name pos:start="71:12" pos:end="71:14">err</name></expr>;</return>

</block_content>}</block></function>
</unit>
