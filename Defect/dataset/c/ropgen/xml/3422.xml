<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3422.c" pos:tabs="8"><function pos:start="1:1" pos:end="369:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">dec_float</name><parameter_list pos:start="1:22" pos:end="1:54">(<parameter pos:start="1:23" pos:end="1:38"><decl pos:start="1:23" pos:end="1:38"><type pos:start="1:23" pos:end="1:38"><name pos:start="1:23" pos:end="1:34">DisasContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:38">dc</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:53"><decl pos:start="1:41" pos:end="1:53"><type pos:start="1:41" pos:end="1:53"><name pos:start="1:41" pos:end="1:48">uint32_t</name></type> <name pos:start="1:50" pos:end="1:53">insn</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="369:1">{<block_content pos:start="5:5" pos:end="367:5">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:16">op0</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:15">ra</name></decl>, <decl pos:start="7:18" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:18" pos:end="7:19">rb</name></decl>, <decl pos:start="7:22" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:22" pos:end="7:23">rd</name></decl>;</decl_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:32"><expr pos:start="9:5" pos:end="9:31"><name pos:start="9:5" pos:end="9:7">op0</name> <operator pos:start="9:9" pos:end="9:9">=</operator> <call pos:start="9:11" pos:end="9:31"><name pos:start="9:11" pos:end="9:19">extract32</name><argument_list pos:start="9:20" pos:end="9:31">(<argument pos:start="9:21" pos:end="9:24"><expr pos:start="9:21" pos:end="9:24"><name pos:start="9:21" pos:end="9:24">insn</name></expr></argument>, <argument pos:start="9:27" pos:end="9:27"><expr pos:start="9:27" pos:end="9:27"><literal type="number" pos:start="9:27" pos:end="9:27">0</literal></expr></argument>, <argument pos:start="9:30" pos:end="9:30"><expr pos:start="9:30" pos:end="9:30"><literal type="number" pos:start="9:30" pos:end="9:30">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:32"><expr pos:start="11:5" pos:end="11:31"><name pos:start="11:5" pos:end="11:6">ra</name> <operator pos:start="11:8" pos:end="11:8">=</operator> <call pos:start="11:10" pos:end="11:31"><name pos:start="11:10" pos:end="11:18">extract32</name><argument_list pos:start="11:19" pos:end="11:31">(<argument pos:start="11:20" pos:end="11:23"><expr pos:start="11:20" pos:end="11:23"><name pos:start="11:20" pos:end="11:23">insn</name></expr></argument>, <argument pos:start="11:26" pos:end="11:27"><expr pos:start="11:26" pos:end="11:27"><literal type="number" pos:start="11:26" pos:end="11:27">16</literal></expr></argument>, <argument pos:start="11:30" pos:end="11:30"><expr pos:start="11:30" pos:end="11:30"><literal type="number" pos:start="11:30" pos:end="11:30">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:32"><expr pos:start="13:5" pos:end="13:31"><name pos:start="13:5" pos:end="13:6">rb</name> <operator pos:start="13:8" pos:end="13:8">=</operator> <call pos:start="13:10" pos:end="13:31"><name pos:start="13:10" pos:end="13:18">extract32</name><argument_list pos:start="13:19" pos:end="13:31">(<argument pos:start="13:20" pos:end="13:23"><expr pos:start="13:20" pos:end="13:23"><name pos:start="13:20" pos:end="13:23">insn</name></expr></argument>, <argument pos:start="13:26" pos:end="13:27"><expr pos:start="13:26" pos:end="13:27"><literal type="number" pos:start="13:26" pos:end="13:27">11</literal></expr></argument>, <argument pos:start="13:30" pos:end="13:30"><expr pos:start="13:30" pos:end="13:30"><literal type="number" pos:start="13:30" pos:end="13:30">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:32"><expr pos:start="15:5" pos:end="15:31"><name pos:start="15:5" pos:end="15:6">rd</name> <operator pos:start="15:8" pos:end="15:8">=</operator> <call pos:start="15:10" pos:end="15:31"><name pos:start="15:10" pos:end="15:18">extract32</name><argument_list pos:start="15:19" pos:end="15:31">(<argument pos:start="15:20" pos:end="15:23"><expr pos:start="15:20" pos:end="15:23"><name pos:start="15:20" pos:end="15:23">insn</name></expr></argument>, <argument pos:start="15:26" pos:end="15:27"><expr pos:start="15:26" pos:end="15:27"><literal type="number" pos:start="15:26" pos:end="15:27">21</literal></expr></argument>, <argument pos:start="15:30" pos:end="15:30"><expr pos:start="15:30" pos:end="15:30"><literal type="number" pos:start="15:30" pos:end="15:30">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="19:5" pos:end="367:5">switch <condition pos:start="19:12" pos:end="19:16">(<expr pos:start="19:13" pos:end="19:15"><name pos:start="19:13" pos:end="19:15">op0</name></expr>)</condition> <block pos:start="19:18" pos:end="367:5">{<block_content pos:start="21:5" pos:end="365:14">

    <case pos:start="21:5" pos:end="21:14">case <expr pos:start="21:10" pos:end="21:13"><literal type="number" pos:start="21:10" pos:end="21:13">0x00</literal></expr>:</case>    <comment type="block" pos:start="21:19" pos:end="21:32">/* lf.add.s */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:56"><expr pos:start="23:9" pos:end="23:55"><call pos:start="23:9" pos:end="23:55"><name pos:start="23:9" pos:end="23:15">LOG_DIS</name><argument_list pos:start="23:16" pos:end="23:55">(<argument pos:start="23:17" pos:end="23:42"><expr pos:start="23:17" pos:end="23:42"><literal type="string" pos:start="23:17" pos:end="23:42">"lf.add.s r%d, r%d, r%d\n"</literal></expr></argument>, <argument pos:start="23:45" pos:end="23:46"><expr pos:start="23:45" pos:end="23:46"><name pos:start="23:45" pos:end="23:46">rd</name></expr></argument>, <argument pos:start="23:49" pos:end="23:50"><expr pos:start="23:49" pos:end="23:50"><name pos:start="23:49" pos:end="23:50">ra</name></expr></argument>, <argument pos:start="23:53" pos:end="23:54"><expr pos:start="23:53" pos:end="23:54"><name pos:start="23:53" pos:end="23:54">rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:73"><expr pos:start="25:9" pos:end="25:72"><call pos:start="25:9" pos:end="25:72"><name pos:start="25:9" pos:end="25:30">gen_helper_float_add_s</name><argument_list pos:start="25:31" pos:end="25:72">(<argument pos:start="25:32" pos:end="25:40"><expr pos:start="25:32" pos:end="25:40"><name pos:start="25:32" pos:end="25:40"><name pos:start="25:32" pos:end="25:36">cpu_R</name><index pos:start="25:37" pos:end="25:40">[<expr pos:start="25:38" pos:end="25:39"><name pos:start="25:38" pos:end="25:39">rd</name></expr>]</index></name></expr></argument>, <argument pos:start="25:43" pos:end="25:49"><expr pos:start="25:43" pos:end="25:49"><name pos:start="25:43" pos:end="25:49">cpu_env</name></expr></argument>, <argument pos:start="25:52" pos:end="25:60"><expr pos:start="25:52" pos:end="25:60"><name pos:start="25:52" pos:end="25:60"><name pos:start="25:52" pos:end="25:56">cpu_R</name><index pos:start="25:57" pos:end="25:60">[<expr pos:start="25:58" pos:end="25:59"><name pos:start="25:58" pos:end="25:59">ra</name></expr>]</index></name></expr></argument>, <argument pos:start="25:63" pos:end="25:71"><expr pos:start="25:63" pos:end="25:71"><name pos:start="25:63" pos:end="25:71"><name pos:start="25:63" pos:end="25:67">cpu_R</name><index pos:start="25:68" pos:end="25:71">[<expr pos:start="25:69" pos:end="25:70"><name pos:start="25:69" pos:end="25:70">rb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="27:9" pos:end="27:14">break;</break>



    <case pos:start="31:5" pos:end="31:14">case <expr pos:start="31:10" pos:end="31:13"><literal type="number" pos:start="31:10" pos:end="31:13">0x01</literal></expr>:</case>    <comment type="block" pos:start="31:19" pos:end="31:32">/* lf.sub.s */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:56"><expr pos:start="33:9" pos:end="33:55"><call pos:start="33:9" pos:end="33:55"><name pos:start="33:9" pos:end="33:15">LOG_DIS</name><argument_list pos:start="33:16" pos:end="33:55">(<argument pos:start="33:17" pos:end="33:42"><expr pos:start="33:17" pos:end="33:42"><literal type="string" pos:start="33:17" pos:end="33:42">"lf.sub.s r%d, r%d, r%d\n"</literal></expr></argument>, <argument pos:start="33:45" pos:end="33:46"><expr pos:start="33:45" pos:end="33:46"><name pos:start="33:45" pos:end="33:46">rd</name></expr></argument>, <argument pos:start="33:49" pos:end="33:50"><expr pos:start="33:49" pos:end="33:50"><name pos:start="33:49" pos:end="33:50">ra</name></expr></argument>, <argument pos:start="33:53" pos:end="33:54"><expr pos:start="33:53" pos:end="33:54"><name pos:start="33:53" pos:end="33:54">rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:73"><expr pos:start="35:9" pos:end="35:72"><call pos:start="35:9" pos:end="35:72"><name pos:start="35:9" pos:end="35:30">gen_helper_float_sub_s</name><argument_list pos:start="35:31" pos:end="35:72">(<argument pos:start="35:32" pos:end="35:40"><expr pos:start="35:32" pos:end="35:40"><name pos:start="35:32" pos:end="35:40"><name pos:start="35:32" pos:end="35:36">cpu_R</name><index pos:start="35:37" pos:end="35:40">[<expr pos:start="35:38" pos:end="35:39"><name pos:start="35:38" pos:end="35:39">rd</name></expr>]</index></name></expr></argument>, <argument pos:start="35:43" pos:end="35:49"><expr pos:start="35:43" pos:end="35:49"><name pos:start="35:43" pos:end="35:49">cpu_env</name></expr></argument>, <argument pos:start="35:52" pos:end="35:60"><expr pos:start="35:52" pos:end="35:60"><name pos:start="35:52" pos:end="35:60"><name pos:start="35:52" pos:end="35:56">cpu_R</name><index pos:start="35:57" pos:end="35:60">[<expr pos:start="35:58" pos:end="35:59"><name pos:start="35:58" pos:end="35:59">ra</name></expr>]</index></name></expr></argument>, <argument pos:start="35:63" pos:end="35:71"><expr pos:start="35:63" pos:end="35:71"><name pos:start="35:63" pos:end="35:71"><name pos:start="35:63" pos:end="35:67">cpu_R</name><index pos:start="35:68" pos:end="35:71">[<expr pos:start="35:69" pos:end="35:70"><name pos:start="35:69" pos:end="35:70">rb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="37:9" pos:end="37:14">break;</break>





    <case pos:start="43:5" pos:end="43:14">case <expr pos:start="43:10" pos:end="43:13"><literal type="number" pos:start="43:10" pos:end="43:13">0x02</literal></expr>:</case>    <comment type="block" pos:start="43:19" pos:end="43:32">/* lf.mul.s */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:56"><expr pos:start="45:9" pos:end="45:55"><call pos:start="45:9" pos:end="45:55"><name pos:start="45:9" pos:end="45:15">LOG_DIS</name><argument_list pos:start="45:16" pos:end="45:55">(<argument pos:start="45:17" pos:end="45:42"><expr pos:start="45:17" pos:end="45:42"><literal type="string" pos:start="45:17" pos:end="45:42">"lf.mul.s r%d, r%d, r%d\n"</literal></expr></argument>, <argument pos:start="45:45" pos:end="45:46"><expr pos:start="45:45" pos:end="45:46"><name pos:start="45:45" pos:end="45:46">rd</name></expr></argument>, <argument pos:start="45:49" pos:end="45:50"><expr pos:start="45:49" pos:end="45:50"><name pos:start="45:49" pos:end="45:50">ra</name></expr></argument>, <argument pos:start="45:53" pos:end="45:54"><expr pos:start="45:53" pos:end="45:54"><name pos:start="45:53" pos:end="45:54">rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="57:9"><if pos:start="47:9" pos:end="51:9">if <condition pos:start="47:12" pos:end="47:31">(<expr pos:start="47:13" pos:end="47:30"><name pos:start="47:13" pos:end="47:14">ra</name> <operator pos:start="47:16" pos:end="47:17">!=</operator> <literal type="number" pos:start="47:19" pos:end="47:19">0</literal> <operator pos:start="47:21" pos:end="47:22">&amp;&amp;</operator> <name pos:start="47:24" pos:end="47:25">rb</name> <operator pos:start="47:27" pos:end="47:28">!=</operator> <literal type="number" pos:start="47:30" pos:end="47:30">0</literal></expr>)</condition> <block pos:start="47:33" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:77">

            <expr_stmt pos:start="49:13" pos:end="49:77"><expr pos:start="49:13" pos:end="49:76"><call pos:start="49:13" pos:end="49:76"><name pos:start="49:13" pos:end="49:34">gen_helper_float_mul_s</name><argument_list pos:start="49:35" pos:end="49:76">(<argument pos:start="49:36" pos:end="49:44"><expr pos:start="49:36" pos:end="49:44"><name pos:start="49:36" pos:end="49:44"><name pos:start="49:36" pos:end="49:40">cpu_R</name><index pos:start="49:41" pos:end="49:44">[<expr pos:start="49:42" pos:end="49:43"><name pos:start="49:42" pos:end="49:43">rd</name></expr>]</index></name></expr></argument>, <argument pos:start="49:47" pos:end="49:53"><expr pos:start="49:47" pos:end="49:53"><name pos:start="49:47" pos:end="49:53">cpu_env</name></expr></argument>, <argument pos:start="49:56" pos:end="49:64"><expr pos:start="49:56" pos:end="49:64"><name pos:start="49:56" pos:end="49:64"><name pos:start="49:56" pos:end="49:60">cpu_R</name><index pos:start="49:61" pos:end="49:64">[<expr pos:start="49:62" pos:end="49:63"><name pos:start="49:62" pos:end="49:63">ra</name></expr>]</index></name></expr></argument>, <argument pos:start="49:67" pos:end="49:75"><expr pos:start="49:67" pos:end="49:75"><name pos:start="49:67" pos:end="49:75"><name pos:start="49:67" pos:end="49:71">cpu_R</name><index pos:start="49:72" pos:end="49:75">[<expr pos:start="49:73" pos:end="49:74"><name pos:start="49:73" pos:end="49:74">rb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="51:11" pos:end="57:9">else <block pos:start="51:16" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:45">

            <expr_stmt pos:start="53:13" pos:end="53:51"><expr pos:start="53:13" pos:end="53:50"><call pos:start="53:13" pos:end="53:50"><name pos:start="53:13" pos:end="53:26">tcg_gen_ori_tl</name><argument_list pos:start="53:27" pos:end="53:50">(<argument pos:start="53:28" pos:end="53:32"><expr pos:start="53:28" pos:end="53:32"><name pos:start="53:28" pos:end="53:32">fpcsr</name></expr></argument>, <argument pos:start="53:35" pos:end="53:39"><expr pos:start="53:35" pos:end="53:39"><name pos:start="53:35" pos:end="53:39">fpcsr</name></expr></argument>, <argument pos:start="53:42" pos:end="53:49"><expr pos:start="53:42" pos:end="53:49"><name pos:start="53:42" pos:end="53:49">FPCSR_ZF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:45"><expr pos:start="55:13" pos:end="55:44"><call pos:start="55:13" pos:end="55:44"><name pos:start="55:13" pos:end="55:28">tcg_gen_movi_i32</name><argument_list pos:start="55:29" pos:end="55:44">(<argument pos:start="55:30" pos:end="55:38"><expr pos:start="55:30" pos:end="55:38"><name pos:start="55:30" pos:end="55:38"><name pos:start="55:30" pos:end="55:34">cpu_R</name><index pos:start="55:35" pos:end="55:38">[<expr pos:start="55:36" pos:end="55:37"><name pos:start="55:36" pos:end="55:37">rd</name></expr>]</index></name></expr></argument>, <argument pos:start="55:41" pos:end="55:43"><expr pos:start="55:41" pos:end="55:43"><literal type="number" pos:start="55:41" pos:end="55:43">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="59:9" pos:end="59:14">break;</break>



    <case pos:start="63:5" pos:end="63:14">case <expr pos:start="63:10" pos:end="63:13"><literal type="number" pos:start="63:10" pos:end="63:13">0x03</literal></expr>:</case>    <comment type="block" pos:start="63:19" pos:end="63:32">/* lf.div.s */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:56"><expr pos:start="65:9" pos:end="65:55"><call pos:start="65:9" pos:end="65:55"><name pos:start="65:9" pos:end="65:15">LOG_DIS</name><argument_list pos:start="65:16" pos:end="65:55">(<argument pos:start="65:17" pos:end="65:42"><expr pos:start="65:17" pos:end="65:42"><literal type="string" pos:start="65:17" pos:end="65:42">"lf.div.s r%d, r%d, r%d\n"</literal></expr></argument>, <argument pos:start="65:45" pos:end="65:46"><expr pos:start="65:45" pos:end="65:46"><name pos:start="65:45" pos:end="65:46">rd</name></expr></argument>, <argument pos:start="65:49" pos:end="65:50"><expr pos:start="65:49" pos:end="65:50"><name pos:start="65:49" pos:end="65:50">ra</name></expr></argument>, <argument pos:start="65:53" pos:end="65:54"><expr pos:start="65:53" pos:end="65:54"><name pos:start="65:53" pos:end="65:54">rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:73"><expr pos:start="67:9" pos:end="67:72"><call pos:start="67:9" pos:end="67:72"><name pos:start="67:9" pos:end="67:30">gen_helper_float_div_s</name><argument_list pos:start="67:31" pos:end="67:72">(<argument pos:start="67:32" pos:end="67:40"><expr pos:start="67:32" pos:end="67:40"><name pos:start="67:32" pos:end="67:40"><name pos:start="67:32" pos:end="67:36">cpu_R</name><index pos:start="67:37" pos:end="67:40">[<expr pos:start="67:38" pos:end="67:39"><name pos:start="67:38" pos:end="67:39">rd</name></expr>]</index></name></expr></argument>, <argument pos:start="67:43" pos:end="67:49"><expr pos:start="67:43" pos:end="67:49"><name pos:start="67:43" pos:end="67:49">cpu_env</name></expr></argument>, <argument pos:start="67:52" pos:end="67:60"><expr pos:start="67:52" pos:end="67:60"><name pos:start="67:52" pos:end="67:60"><name pos:start="67:52" pos:end="67:56">cpu_R</name><index pos:start="67:57" pos:end="67:60">[<expr pos:start="67:58" pos:end="67:59"><name pos:start="67:58" pos:end="67:59">ra</name></expr>]</index></name></expr></argument>, <argument pos:start="67:63" pos:end="67:71"><expr pos:start="67:63" pos:end="67:71"><name pos:start="67:63" pos:end="67:71"><name pos:start="67:63" pos:end="67:67">cpu_R</name><index pos:start="67:68" pos:end="67:71">[<expr pos:start="67:69" pos:end="67:70"><name pos:start="67:69" pos:end="67:70">rb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="69:9" pos:end="69:14">break;</break>



    <case pos:start="73:5" pos:end="73:14">case <expr pos:start="73:10" pos:end="73:13"><literal type="number" pos:start="73:10" pos:end="73:13">0x04</literal></expr>:</case>    <comment type="block" pos:start="73:19" pos:end="73:33">/* lf.itof.s */</comment>

        <expr_stmt pos:start="75:9" pos:end="75:46"><expr pos:start="75:9" pos:end="75:45"><call pos:start="75:9" pos:end="75:45"><name pos:start="75:9" pos:end="75:15">LOG_DIS</name><argument_list pos:start="75:16" pos:end="75:45">(<argument pos:start="75:17" pos:end="75:36"><expr pos:start="75:17" pos:end="75:36"><literal type="string" pos:start="75:17" pos:end="75:36">"lf.itof r%d, r%d\n"</literal></expr></argument>, <argument pos:start="75:39" pos:end="75:40"><expr pos:start="75:39" pos:end="75:40"><name pos:start="75:39" pos:end="75:40">rd</name></expr></argument>, <argument pos:start="75:43" pos:end="75:44"><expr pos:start="75:43" pos:end="75:44"><name pos:start="75:43" pos:end="75:44">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:56"><expr pos:start="77:9" pos:end="77:55"><call pos:start="77:9" pos:end="77:55"><name pos:start="77:9" pos:end="77:24">gen_helper_itofs</name><argument_list pos:start="77:25" pos:end="77:55">(<argument pos:start="77:26" pos:end="77:34"><expr pos:start="77:26" pos:end="77:34"><name pos:start="77:26" pos:end="77:34"><name pos:start="77:26" pos:end="77:30">cpu_R</name><index pos:start="77:31" pos:end="77:34">[<expr pos:start="77:32" pos:end="77:33"><name pos:start="77:32" pos:end="77:33">rd</name></expr>]</index></name></expr></argument>, <argument pos:start="77:37" pos:end="77:43"><expr pos:start="77:37" pos:end="77:43"><name pos:start="77:37" pos:end="77:43">cpu_env</name></expr></argument>, <argument pos:start="77:46" pos:end="77:54"><expr pos:start="77:46" pos:end="77:54"><name pos:start="77:46" pos:end="77:54"><name pos:start="77:46" pos:end="77:50">cpu_R</name><index pos:start="77:51" pos:end="77:54">[<expr pos:start="77:52" pos:end="77:53"><name pos:start="77:52" pos:end="77:53">ra</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="79:9" pos:end="79:14">break;</break>



    <case pos:start="83:5" pos:end="83:14">case <expr pos:start="83:10" pos:end="83:13"><literal type="number" pos:start="83:10" pos:end="83:13">0x05</literal></expr>:</case>    <comment type="block" pos:start="83:19" pos:end="83:33">/* lf.ftoi.s */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:46"><expr pos:start="85:9" pos:end="85:45"><call pos:start="85:9" pos:end="85:45"><name pos:start="85:9" pos:end="85:15">LOG_DIS</name><argument_list pos:start="85:16" pos:end="85:45">(<argument pos:start="85:17" pos:end="85:36"><expr pos:start="85:17" pos:end="85:36"><literal type="string" pos:start="85:17" pos:end="85:36">"lf.ftoi r%d, r%d\n"</literal></expr></argument>, <argument pos:start="85:39" pos:end="85:40"><expr pos:start="85:39" pos:end="85:40"><name pos:start="85:39" pos:end="85:40">rd</name></expr></argument>, <argument pos:start="85:43" pos:end="85:44"><expr pos:start="85:43" pos:end="85:44"><name pos:start="85:43" pos:end="85:44">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:56"><expr pos:start="87:9" pos:end="87:55"><call pos:start="87:9" pos:end="87:55"><name pos:start="87:9" pos:end="87:24">gen_helper_ftois</name><argument_list pos:start="87:25" pos:end="87:55">(<argument pos:start="87:26" pos:end="87:34"><expr pos:start="87:26" pos:end="87:34"><name pos:start="87:26" pos:end="87:34"><name pos:start="87:26" pos:end="87:30">cpu_R</name><index pos:start="87:31" pos:end="87:34">[<expr pos:start="87:32" pos:end="87:33"><name pos:start="87:32" pos:end="87:33">rd</name></expr>]</index></name></expr></argument>, <argument pos:start="87:37" pos:end="87:43"><expr pos:start="87:37" pos:end="87:43"><name pos:start="87:37" pos:end="87:43">cpu_env</name></expr></argument>, <argument pos:start="87:46" pos:end="87:54"><expr pos:start="87:46" pos:end="87:54"><name pos:start="87:46" pos:end="87:54"><name pos:start="87:46" pos:end="87:50">cpu_R</name><index pos:start="87:51" pos:end="87:54">[<expr pos:start="87:52" pos:end="87:53"><name pos:start="87:52" pos:end="87:53">ra</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="89:9" pos:end="89:14">break;</break>



    <case pos:start="93:5" pos:end="93:14">case <expr pos:start="93:10" pos:end="93:13"><literal type="number" pos:start="93:10" pos:end="93:13">0x06</literal></expr>:</case>    <comment type="block" pos:start="93:19" pos:end="93:32">/* lf.rem.s */</comment>

        <expr_stmt pos:start="95:9" pos:end="95:56"><expr pos:start="95:9" pos:end="95:55"><call pos:start="95:9" pos:end="95:55"><name pos:start="95:9" pos:end="95:15">LOG_DIS</name><argument_list pos:start="95:16" pos:end="95:55">(<argument pos:start="95:17" pos:end="95:42"><expr pos:start="95:17" pos:end="95:42"><literal type="string" pos:start="95:17" pos:end="95:42">"lf.rem.s r%d, r%d, r%d\n"</literal></expr></argument>, <argument pos:start="95:45" pos:end="95:46"><expr pos:start="95:45" pos:end="95:46"><name pos:start="95:45" pos:end="95:46">rd</name></expr></argument>, <argument pos:start="95:49" pos:end="95:50"><expr pos:start="95:49" pos:end="95:50"><name pos:start="95:49" pos:end="95:50">ra</name></expr></argument>, <argument pos:start="95:53" pos:end="95:54"><expr pos:start="95:53" pos:end="95:54"><name pos:start="95:53" pos:end="95:54">rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:73"><expr pos:start="97:9" pos:end="97:72"><call pos:start="97:9" pos:end="97:72"><name pos:start="97:9" pos:end="97:30">gen_helper_float_rem_s</name><argument_list pos:start="97:31" pos:end="97:72">(<argument pos:start="97:32" pos:end="97:40"><expr pos:start="97:32" pos:end="97:40"><name pos:start="97:32" pos:end="97:40"><name pos:start="97:32" pos:end="97:36">cpu_R</name><index pos:start="97:37" pos:end="97:40">[<expr pos:start="97:38" pos:end="97:39"><name pos:start="97:38" pos:end="97:39">rd</name></expr>]</index></name></expr></argument>, <argument pos:start="97:43" pos:end="97:49"><expr pos:start="97:43" pos:end="97:49"><name pos:start="97:43" pos:end="97:49">cpu_env</name></expr></argument>, <argument pos:start="97:52" pos:end="97:60"><expr pos:start="97:52" pos:end="97:60"><name pos:start="97:52" pos:end="97:60"><name pos:start="97:52" pos:end="97:56">cpu_R</name><index pos:start="97:57" pos:end="97:60">[<expr pos:start="97:58" pos:end="97:59"><name pos:start="97:58" pos:end="97:59">ra</name></expr>]</index></name></expr></argument>, <argument pos:start="97:63" pos:end="97:71"><expr pos:start="97:63" pos:end="97:71"><name pos:start="97:63" pos:end="97:71"><name pos:start="97:63" pos:end="97:67">cpu_R</name><index pos:start="97:68" pos:end="97:71">[<expr pos:start="97:69" pos:end="97:70"><name pos:start="97:69" pos:end="97:70">rb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="99:9" pos:end="99:14">break;</break>



    <case pos:start="103:5" pos:end="103:14">case <expr pos:start="103:10" pos:end="103:13"><literal type="number" pos:start="103:10" pos:end="103:13">0x07</literal></expr>:</case>    <comment type="block" pos:start="103:19" pos:end="103:33">/* lf.madd.s */</comment>

        <expr_stmt pos:start="105:9" pos:end="105:57"><expr pos:start="105:9" pos:end="105:56"><call pos:start="105:9" pos:end="105:56"><name pos:start="105:9" pos:end="105:15">LOG_DIS</name><argument_list pos:start="105:16" pos:end="105:56">(<argument pos:start="105:17" pos:end="105:43"><expr pos:start="105:17" pos:end="105:43"><literal type="string" pos:start="105:17" pos:end="105:43">"lf.madd.s r%d, r%d, r%d\n"</literal></expr></argument>, <argument pos:start="105:46" pos:end="105:47"><expr pos:start="105:46" pos:end="105:47"><name pos:start="105:46" pos:end="105:47">rd</name></expr></argument>, <argument pos:start="105:50" pos:end="105:51"><expr pos:start="105:50" pos:end="105:51"><name pos:start="105:50" pos:end="105:51">ra</name></expr></argument>, <argument pos:start="105:54" pos:end="105:55"><expr pos:start="105:54" pos:end="105:55"><name pos:start="105:54" pos:end="105:55">rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="109:54"><expr pos:start="107:9" pos:end="109:53"><call pos:start="107:9" pos:end="109:53"><name pos:start="107:9" pos:end="107:31">gen_helper_float_madd_s</name><argument_list pos:start="107:32" pos:end="109:53">(<argument pos:start="107:33" pos:end="107:41"><expr pos:start="107:33" pos:end="107:41"><name pos:start="107:33" pos:end="107:41"><name pos:start="107:33" pos:end="107:37">cpu_R</name><index pos:start="107:38" pos:end="107:41">[<expr pos:start="107:39" pos:end="107:40"><name pos:start="107:39" pos:end="107:40">rd</name></expr>]</index></name></expr></argument>, <argument pos:start="107:44" pos:end="107:50"><expr pos:start="107:44" pos:end="107:50"><name pos:start="107:44" pos:end="107:50">cpu_env</name></expr></argument>, <argument pos:start="107:53" pos:end="107:61"><expr pos:start="107:53" pos:end="107:61"><name pos:start="107:53" pos:end="107:61"><name pos:start="107:53" pos:end="107:57">cpu_R</name><index pos:start="107:58" pos:end="107:61">[<expr pos:start="107:59" pos:end="107:60"><name pos:start="107:59" pos:end="107:60">rd</name></expr>]</index></name></expr></argument>,

                                <argument pos:start="109:33" pos:end="109:41"><expr pos:start="109:33" pos:end="109:41"><name pos:start="109:33" pos:end="109:41"><name pos:start="109:33" pos:end="109:37">cpu_R</name><index pos:start="109:38" pos:end="109:41">[<expr pos:start="109:39" pos:end="109:40"><name pos:start="109:39" pos:end="109:40">ra</name></expr>]</index></name></expr></argument>, <argument pos:start="109:44" pos:end="109:52"><expr pos:start="109:44" pos:end="109:52"><name pos:start="109:44" pos:end="109:52"><name pos:start="109:44" pos:end="109:48">cpu_R</name><index pos:start="109:49" pos:end="109:52">[<expr pos:start="109:50" pos:end="109:51"><name pos:start="109:50" pos:end="109:51">rb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="111:9" pos:end="111:14">break;</break>



    <case pos:start="115:5" pos:end="115:14">case <expr pos:start="115:10" pos:end="115:13"><literal type="number" pos:start="115:10" pos:end="115:13">0x08</literal></expr>:</case>    <comment type="block" pos:start="115:19" pos:end="115:33">/* lf.sfeq.s */</comment>

        <expr_stmt pos:start="117:9" pos:end="117:48"><expr pos:start="117:9" pos:end="117:47"><call pos:start="117:9" pos:end="117:47"><name pos:start="117:9" pos:end="117:15">LOG_DIS</name><argument_list pos:start="117:16" pos:end="117:47">(<argument pos:start="117:17" pos:end="117:38"><expr pos:start="117:17" pos:end="117:38"><literal type="string" pos:start="117:17" pos:end="117:38">"lf.sfeq.s r%d, r%d\n"</literal></expr></argument>, <argument pos:start="117:41" pos:end="117:42"><expr pos:start="117:41" pos:end="117:42"><name pos:start="117:41" pos:end="117:42">ra</name></expr></argument>, <argument pos:start="117:45" pos:end="117:46"><expr pos:start="117:45" pos:end="117:46"><name pos:start="117:45" pos:end="117:46">rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:71"><expr pos:start="119:9" pos:end="119:70"><call pos:start="119:9" pos:end="119:70"><name pos:start="119:9" pos:end="119:29">gen_helper_float_eq_s</name><argument_list pos:start="119:30" pos:end="119:70">(<argument pos:start="119:31" pos:end="119:38"><expr pos:start="119:31" pos:end="119:38"><name pos:start="119:31" pos:end="119:38">cpu_sr_f</name></expr></argument>, <argument pos:start="119:41" pos:end="119:47"><expr pos:start="119:41" pos:end="119:47"><name pos:start="119:41" pos:end="119:47">cpu_env</name></expr></argument>, <argument pos:start="119:50" pos:end="119:58"><expr pos:start="119:50" pos:end="119:58"><name pos:start="119:50" pos:end="119:58"><name pos:start="119:50" pos:end="119:54">cpu_R</name><index pos:start="119:55" pos:end="119:58">[<expr pos:start="119:56" pos:end="119:57"><name pos:start="119:56" pos:end="119:57">ra</name></expr>]</index></name></expr></argument>, <argument pos:start="119:61" pos:end="119:69"><expr pos:start="119:61" pos:end="119:69"><name pos:start="119:61" pos:end="119:69"><name pos:start="119:61" pos:end="119:65">cpu_R</name><index pos:start="119:66" pos:end="119:69">[<expr pos:start="119:67" pos:end="119:68"><name pos:start="119:67" pos:end="119:68">rb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="121:9" pos:end="121:14">break;</break>



    <case pos:start="125:5" pos:end="125:14">case <expr pos:start="125:10" pos:end="125:13"><literal type="number" pos:start="125:10" pos:end="125:13">0x09</literal></expr>:</case>    <comment type="block" pos:start="125:19" pos:end="125:33">/* lf.sfne.s */</comment>

        <expr_stmt pos:start="127:9" pos:end="127:48"><expr pos:start="127:9" pos:end="127:47"><call pos:start="127:9" pos:end="127:47"><name pos:start="127:9" pos:end="127:15">LOG_DIS</name><argument_list pos:start="127:16" pos:end="127:47">(<argument pos:start="127:17" pos:end="127:38"><expr pos:start="127:17" pos:end="127:38"><literal type="string" pos:start="127:17" pos:end="127:38">"lf.sfne.s r%d, r%d\n"</literal></expr></argument>, <argument pos:start="127:41" pos:end="127:42"><expr pos:start="127:41" pos:end="127:42"><name pos:start="127:41" pos:end="127:42">ra</name></expr></argument>, <argument pos:start="127:45" pos:end="127:46"><expr pos:start="127:45" pos:end="127:46"><name pos:start="127:45" pos:end="127:46">rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:71"><expr pos:start="129:9" pos:end="129:70"><call pos:start="129:9" pos:end="129:70"><name pos:start="129:9" pos:end="129:29">gen_helper_float_ne_s</name><argument_list pos:start="129:30" pos:end="129:70">(<argument pos:start="129:31" pos:end="129:38"><expr pos:start="129:31" pos:end="129:38"><name pos:start="129:31" pos:end="129:38">cpu_sr_f</name></expr></argument>, <argument pos:start="129:41" pos:end="129:47"><expr pos:start="129:41" pos:end="129:47"><name pos:start="129:41" pos:end="129:47">cpu_env</name></expr></argument>, <argument pos:start="129:50" pos:end="129:58"><expr pos:start="129:50" pos:end="129:58"><name pos:start="129:50" pos:end="129:58"><name pos:start="129:50" pos:end="129:54">cpu_R</name><index pos:start="129:55" pos:end="129:58">[<expr pos:start="129:56" pos:end="129:57"><name pos:start="129:56" pos:end="129:57">ra</name></expr>]</index></name></expr></argument>, <argument pos:start="129:61" pos:end="129:69"><expr pos:start="129:61" pos:end="129:69"><name pos:start="129:61" pos:end="129:69"><name pos:start="129:61" pos:end="129:65">cpu_R</name><index pos:start="129:66" pos:end="129:69">[<expr pos:start="129:67" pos:end="129:68"><name pos:start="129:67" pos:end="129:68">rb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="131:9" pos:end="131:14">break;</break>



    <case pos:start="135:5" pos:end="135:14">case <expr pos:start="135:10" pos:end="135:13"><literal type="number" pos:start="135:10" pos:end="135:13">0x0a</literal></expr>:</case>    <comment type="block" pos:start="135:19" pos:end="135:33">/* lf.sfgt.s */</comment>

        <expr_stmt pos:start="137:9" pos:end="137:48"><expr pos:start="137:9" pos:end="137:47"><call pos:start="137:9" pos:end="137:47"><name pos:start="137:9" pos:end="137:15">LOG_DIS</name><argument_list pos:start="137:16" pos:end="137:47">(<argument pos:start="137:17" pos:end="137:38"><expr pos:start="137:17" pos:end="137:38"><literal type="string" pos:start="137:17" pos:end="137:38">"lf.sfgt.s r%d, r%d\n"</literal></expr></argument>, <argument pos:start="137:41" pos:end="137:42"><expr pos:start="137:41" pos:end="137:42"><name pos:start="137:41" pos:end="137:42">ra</name></expr></argument>, <argument pos:start="137:45" pos:end="137:46"><expr pos:start="137:45" pos:end="137:46"><name pos:start="137:45" pos:end="137:46">rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:71"><expr pos:start="139:9" pos:end="139:70"><call pos:start="139:9" pos:end="139:70"><name pos:start="139:9" pos:end="139:29">gen_helper_float_gt_s</name><argument_list pos:start="139:30" pos:end="139:70">(<argument pos:start="139:31" pos:end="139:38"><expr pos:start="139:31" pos:end="139:38"><name pos:start="139:31" pos:end="139:38">cpu_sr_f</name></expr></argument>, <argument pos:start="139:41" pos:end="139:47"><expr pos:start="139:41" pos:end="139:47"><name pos:start="139:41" pos:end="139:47">cpu_env</name></expr></argument>, <argument pos:start="139:50" pos:end="139:58"><expr pos:start="139:50" pos:end="139:58"><name pos:start="139:50" pos:end="139:58"><name pos:start="139:50" pos:end="139:54">cpu_R</name><index pos:start="139:55" pos:end="139:58">[<expr pos:start="139:56" pos:end="139:57"><name pos:start="139:56" pos:end="139:57">ra</name></expr>]</index></name></expr></argument>, <argument pos:start="139:61" pos:end="139:69"><expr pos:start="139:61" pos:end="139:69"><name pos:start="139:61" pos:end="139:69"><name pos:start="139:61" pos:end="139:65">cpu_R</name><index pos:start="139:66" pos:end="139:69">[<expr pos:start="139:67" pos:end="139:68"><name pos:start="139:67" pos:end="139:68">rb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="141:9" pos:end="141:14">break;</break>



    <case pos:start="145:5" pos:end="145:14">case <expr pos:start="145:10" pos:end="145:13"><literal type="number" pos:start="145:10" pos:end="145:13">0x0b</literal></expr>:</case>    <comment type="block" pos:start="145:19" pos:end="145:33">/* lf.sfge.s */</comment>

        <expr_stmt pos:start="147:9" pos:end="147:48"><expr pos:start="147:9" pos:end="147:47"><call pos:start="147:9" pos:end="147:47"><name pos:start="147:9" pos:end="147:15">LOG_DIS</name><argument_list pos:start="147:16" pos:end="147:47">(<argument pos:start="147:17" pos:end="147:38"><expr pos:start="147:17" pos:end="147:38"><literal type="string" pos:start="147:17" pos:end="147:38">"lf.sfge.s r%d, r%d\n"</literal></expr></argument>, <argument pos:start="147:41" pos:end="147:42"><expr pos:start="147:41" pos:end="147:42"><name pos:start="147:41" pos:end="147:42">ra</name></expr></argument>, <argument pos:start="147:45" pos:end="147:46"><expr pos:start="147:45" pos:end="147:46"><name pos:start="147:45" pos:end="147:46">rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:71"><expr pos:start="149:9" pos:end="149:70"><call pos:start="149:9" pos:end="149:70"><name pos:start="149:9" pos:end="149:29">gen_helper_float_ge_s</name><argument_list pos:start="149:30" pos:end="149:70">(<argument pos:start="149:31" pos:end="149:38"><expr pos:start="149:31" pos:end="149:38"><name pos:start="149:31" pos:end="149:38">cpu_sr_f</name></expr></argument>, <argument pos:start="149:41" pos:end="149:47"><expr pos:start="149:41" pos:end="149:47"><name pos:start="149:41" pos:end="149:47">cpu_env</name></expr></argument>, <argument pos:start="149:50" pos:end="149:58"><expr pos:start="149:50" pos:end="149:58"><name pos:start="149:50" pos:end="149:58"><name pos:start="149:50" pos:end="149:54">cpu_R</name><index pos:start="149:55" pos:end="149:58">[<expr pos:start="149:56" pos:end="149:57"><name pos:start="149:56" pos:end="149:57">ra</name></expr>]</index></name></expr></argument>, <argument pos:start="149:61" pos:end="149:69"><expr pos:start="149:61" pos:end="149:69"><name pos:start="149:61" pos:end="149:69"><name pos:start="149:61" pos:end="149:65">cpu_R</name><index pos:start="149:66" pos:end="149:69">[<expr pos:start="149:67" pos:end="149:68"><name pos:start="149:67" pos:end="149:68">rb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="151:9" pos:end="151:14">break;</break>



    <case pos:start="155:5" pos:end="155:14">case <expr pos:start="155:10" pos:end="155:13"><literal type="number" pos:start="155:10" pos:end="155:13">0x0c</literal></expr>:</case>    <comment type="block" pos:start="155:19" pos:end="155:33">/* lf.sflt.s */</comment>

        <expr_stmt pos:start="157:9" pos:end="157:48"><expr pos:start="157:9" pos:end="157:47"><call pos:start="157:9" pos:end="157:47"><name pos:start="157:9" pos:end="157:15">LOG_DIS</name><argument_list pos:start="157:16" pos:end="157:47">(<argument pos:start="157:17" pos:end="157:38"><expr pos:start="157:17" pos:end="157:38"><literal type="string" pos:start="157:17" pos:end="157:38">"lf.sflt.s r%d, r%d\n"</literal></expr></argument>, <argument pos:start="157:41" pos:end="157:42"><expr pos:start="157:41" pos:end="157:42"><name pos:start="157:41" pos:end="157:42">ra</name></expr></argument>, <argument pos:start="157:45" pos:end="157:46"><expr pos:start="157:45" pos:end="157:46"><name pos:start="157:45" pos:end="157:46">rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:71"><expr pos:start="159:9" pos:end="159:70"><call pos:start="159:9" pos:end="159:70"><name pos:start="159:9" pos:end="159:29">gen_helper_float_lt_s</name><argument_list pos:start="159:30" pos:end="159:70">(<argument pos:start="159:31" pos:end="159:38"><expr pos:start="159:31" pos:end="159:38"><name pos:start="159:31" pos:end="159:38">cpu_sr_f</name></expr></argument>, <argument pos:start="159:41" pos:end="159:47"><expr pos:start="159:41" pos:end="159:47"><name pos:start="159:41" pos:end="159:47">cpu_env</name></expr></argument>, <argument pos:start="159:50" pos:end="159:58"><expr pos:start="159:50" pos:end="159:58"><name pos:start="159:50" pos:end="159:58"><name pos:start="159:50" pos:end="159:54">cpu_R</name><index pos:start="159:55" pos:end="159:58">[<expr pos:start="159:56" pos:end="159:57"><name pos:start="159:56" pos:end="159:57">ra</name></expr>]</index></name></expr></argument>, <argument pos:start="159:61" pos:end="159:69"><expr pos:start="159:61" pos:end="159:69"><name pos:start="159:61" pos:end="159:69"><name pos:start="159:61" pos:end="159:65">cpu_R</name><index pos:start="159:66" pos:end="159:69">[<expr pos:start="159:67" pos:end="159:68"><name pos:start="159:67" pos:end="159:68">rb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="161:9" pos:end="161:14">break;</break>



    <case pos:start="165:5" pos:end="165:14">case <expr pos:start="165:10" pos:end="165:13"><literal type="number" pos:start="165:10" pos:end="165:13">0x0d</literal></expr>:</case>    <comment type="block" pos:start="165:19" pos:end="165:33">/* lf.sfle.s */</comment>

        <expr_stmt pos:start="167:9" pos:end="167:48"><expr pos:start="167:9" pos:end="167:47"><call pos:start="167:9" pos:end="167:47"><name pos:start="167:9" pos:end="167:15">LOG_DIS</name><argument_list pos:start="167:16" pos:end="167:47">(<argument pos:start="167:17" pos:end="167:38"><expr pos:start="167:17" pos:end="167:38"><literal type="string" pos:start="167:17" pos:end="167:38">"lf.sfle.s r%d, r%d\n"</literal></expr></argument>, <argument pos:start="167:41" pos:end="167:42"><expr pos:start="167:41" pos:end="167:42"><name pos:start="167:41" pos:end="167:42">ra</name></expr></argument>, <argument pos:start="167:45" pos:end="167:46"><expr pos:start="167:45" pos:end="167:46"><name pos:start="167:45" pos:end="167:46">rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:71"><expr pos:start="169:9" pos:end="169:70"><call pos:start="169:9" pos:end="169:70"><name pos:start="169:9" pos:end="169:29">gen_helper_float_le_s</name><argument_list pos:start="169:30" pos:end="169:70">(<argument pos:start="169:31" pos:end="169:38"><expr pos:start="169:31" pos:end="169:38"><name pos:start="169:31" pos:end="169:38">cpu_sr_f</name></expr></argument>, <argument pos:start="169:41" pos:end="169:47"><expr pos:start="169:41" pos:end="169:47"><name pos:start="169:41" pos:end="169:47">cpu_env</name></expr></argument>, <argument pos:start="169:50" pos:end="169:58"><expr pos:start="169:50" pos:end="169:58"><name pos:start="169:50" pos:end="169:58"><name pos:start="169:50" pos:end="169:54">cpu_R</name><index pos:start="169:55" pos:end="169:58">[<expr pos:start="169:56" pos:end="169:57"><name pos:start="169:56" pos:end="169:57">ra</name></expr>]</index></name></expr></argument>, <argument pos:start="169:61" pos:end="169:69"><expr pos:start="169:61" pos:end="169:69"><name pos:start="169:61" pos:end="169:69"><name pos:start="169:61" pos:end="169:65">cpu_R</name><index pos:start="169:66" pos:end="169:69">[<expr pos:start="169:67" pos:end="169:68"><name pos:start="169:67" pos:end="169:68">rb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="171:9" pos:end="171:14">break;</break>



<comment type="block" pos:start="175:1" pos:end="175:47">/* not used yet, open it when we need or64.  */</comment>

<comment type="block" pos:start="177:1" pos:end="357:8">/*#ifdef TARGET_OPENRISC64

    case 0x10:     lf.add.d

        LOG_DIS("lf.add.d r%d, r%d, r%d\n", rd, ra, rb);

        check_of64s(dc);

        gen_helper_float_add_d(cpu_R[rd], cpu_env, cpu_R[ra], cpu_R[rb]);

        break;



    case 0x11:     lf.sub.d

        LOG_DIS("lf.sub.d r%d, r%d, r%d\n", rd, ra, rb);

        check_of64s(dc);

        gen_helper_float_sub_d(cpu_R[rd], cpu_env, cpu_R[ra], cpu_R[rb]);

        break;



    case 0x12:     lf.mul.d

        LOG_DIS("lf.mul.d r%d, r%d, r%d\n", rd, ra, rb);

        check_of64s(dc);

        if (ra != 0 &amp;&amp; rb != 0) {

            gen_helper_float_mul_d(cpu_R[rd], cpu_env, cpu_R[ra], cpu_R[rb]);

        } else {

            tcg_gen_ori_tl(fpcsr, fpcsr, FPCSR_ZF);

            tcg_gen_movi_i64(cpu_R[rd], 0x0);

        }

        break;



    case 0x13:     lf.div.d

        LOG_DIS("lf.div.d r%d, r%d, r%d\n", rd, ra, rb);

        check_of64s(dc);

        gen_helper_float_div_d(cpu_R[rd], cpu_env, cpu_R[ra], cpu_R[rb]);

        break;



    case 0x14:     lf.itof.d

        LOG_DIS("lf.itof r%d, r%d\n", rd, ra);

        check_of64s(dc);

        gen_helper_itofd(cpu_R[rd], cpu_env, cpu_R[ra]);

        break;



    case 0x15:     lf.ftoi.d

        LOG_DIS("lf.ftoi r%d, r%d\n", rd, ra);

        check_of64s(dc);

        gen_helper_ftoid(cpu_R[rd], cpu_env, cpu_R[ra]);

        break;



    case 0x16:     lf.rem.d

        LOG_DIS("lf.rem.d r%d, r%d, r%d\n", rd, ra, rb);

        check_of64s(dc);

        gen_helper_float_rem_d(cpu_R[rd], cpu_env, cpu_R[ra], cpu_R[rb]);

        break;



    case 0x17:     lf.madd.d

        LOG_DIS("lf.madd.d r%d, r%d, r%d\n", rd, ra, rb);

        check_of64s(dc);

        gen_helper_float_madd_d(cpu_R[rd], cpu_env, cpu_R[rd],

                                cpu_R[ra], cpu_R[rb]);

        break;



    case 0x18:     lf.sfeq.d

        LOG_DIS("lf.sfeq.d r%d, r%d\n", ra, rb);

        check_of64s(dc);

        gen_helper_float_eq_d(cpu_sr_f, cpu_env, cpu_R[ra], cpu_R[rb]);

        break;



    case 0x1a:     lf.sfgt.d

        LOG_DIS("lf.sfgt.d r%d, r%d\n", ra, rb);

        check_of64s(dc);

        gen_helper_float_gt_d(cpu_sr_f, cpu_env, cpu_R[ra], cpu_R[rb]);

        break;



    case 0x1b:     lf.sfge.d

        LOG_DIS("lf.sfge.d r%d, r%d\n", ra, rb);

        check_of64s(dc);

        gen_helper_float_ge_d(cpu_sr_f, cpu_env, cpu_R[ra], cpu_R[rb]);

        break;



    case 0x19:     lf.sfne.d

        LOG_DIS("lf.sfne.d r%d, r%d\n", ra, rb);

        check_of64s(dc);

        gen_helper_float_ne_d(cpu_sr_f, cpu_env, cpu_R[ra], cpu_R[rb]);

        break;



    case 0x1c:     lf.sflt.d

        LOG_DIS("lf.sflt.d r%d, r%d\n", ra, rb);

        check_of64s(dc);

        gen_helper_float_lt_d(cpu_sr_f, cpu_env, cpu_R[ra], cpu_R[rb]);

        break;



    case 0x1d:     lf.sfle.d

        LOG_DIS("lf.sfle.d r%d, r%d\n", ra, rb);

        check_of64s(dc);

        gen_helper_float_le_d(cpu_sr_f, cpu_env, cpu_R[ra], cpu_R[rb]);

        break;

#endif*/</comment>



    <default pos:start="361:5" pos:end="361:12">default:</default>

        <expr_stmt pos:start="363:9" pos:end="363:34"><expr pos:start="363:9" pos:end="363:33"><call pos:start="363:9" pos:end="363:33"><name pos:start="363:9" pos:end="363:29">gen_illegal_exception</name><argument_list pos:start="363:30" pos:end="363:33">(<argument pos:start="363:31" pos:end="363:32"><expr pos:start="363:31" pos:end="363:32"><name pos:start="363:31" pos:end="363:32">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="365:9" pos:end="365:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
