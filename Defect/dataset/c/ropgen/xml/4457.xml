<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4457.c" pos:tabs="8"><function pos:start="1:1" pos:end="351:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">tcg_out_qemu_st</name><parameter_list pos:start="1:28" pos:end="3:36">(<parameter pos:start="1:29" pos:end="1:41"><decl pos:start="1:29" pos:end="1:41"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:38">TCGContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">s</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:61"><decl pos:start="1:44" pos:end="1:61"><type pos:start="1:44" pos:end="1:61"><specifier pos:start="1:44" pos:end="1:48">const</specifier> <name pos:start="1:50" pos:end="1:55">TCGArg</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">args</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:35"><decl pos:start="3:29" pos:end="3:35"><type pos:start="3:29" pos:end="3:35"><name pos:start="3:29" pos:end="3:31">int</name></type> <name pos:start="3:33" pos:end="3:35">opc</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="351:1">{<block_content pos:start="7:5" pos:end="350:0">

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">addr_regl</name></decl>, <decl pos:start="7:20" pos:end="7:28"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:20" pos:end="7:28">addr_reg1</name></decl>, <decl pos:start="7:31" pos:end="7:39"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:31" pos:end="7:39">addr_meml</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:51"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">data_regl</name></decl>, <decl pos:start="9:20" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:20" pos:end="9:28">data_regh</name></decl>, <decl pos:start="9:31" pos:end="9:39"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:31" pos:end="9:39">data_reg1</name></decl>, <decl pos:start="9:42" pos:end="9:50"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:42" pos:end="9:50">data_reg2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="14:0"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">mem_index</name></decl>, <decl pos:start="11:20" pos:end="11:25"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:20" pos:end="11:25">s_bits</name></decl>;</decl_stmt>

<cpp:if pos:start="13:1" pos:end="13:27">#<cpp:directive pos:start="13:2" pos:end="13:3">if</cpp:directive> <expr pos:start="13:5" pos:end="13:27"><call pos:start="13:5" pos:end="13:27"><name pos:start="13:5" pos:end="13:11">defined</name><argument_list pos:start="13:12" pos:end="13:27">(<argument pos:start="13:13" pos:end="13:26"><expr pos:start="13:13" pos:end="13:26"><name pos:start="13:13" pos:end="13:26">CONFIG_SOFTMMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="15:5" pos:end="15:37"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:23">label1_ptr</name></decl>, <decl pos:start="15:26" pos:end="15:36"><type ref="prev" pos:start="15:5" pos:end="15:13"><modifier pos:start="15:26" pos:end="15:26">*</modifier></type><name pos:start="15:27" pos:end="15:36">label2_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="24:0"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:15">sp_args</name></decl>;</decl_stmt>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="21:1" pos:end="21:26">#<cpp:directive pos:start="21:2" pos:end="21:3">if</cpp:directive> <expr pos:start="21:5" pos:end="21:26"><name pos:start="21:5" pos:end="21:20">TARGET_LONG_BITS</name> <operator pos:start="21:22" pos:end="21:23">==</operator> <literal type="number" pos:start="21:25" pos:end="21:26">64</literal></expr></cpp:if>

<cpp:if pos:start="23:1" pos:end="23:28"># <cpp:directive pos:start="23:3" pos:end="23:4">if</cpp:directive> <expr pos:start="23:6" pos:end="23:28"><call pos:start="23:6" pos:end="23:28"><name pos:start="23:6" pos:end="23:12">defined</name><argument_list pos:start="23:13" pos:end="23:28">(<argument pos:start="23:14" pos:end="23:27"><expr pos:start="23:14" pos:end="23:27"><name pos:start="23:14" pos:end="23:27">CONFIG_SOFTMMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="25:5" pos:end="28:0"><decl pos:start="25:5" pos:end="25:23"><type pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:11">uint8_t</name> <modifier pos:start="25:13" pos:end="25:13">*</modifier></type><name pos:start="25:14" pos:end="25:23">label3_ptr</name></decl>;</decl_stmt>

<cpp:endif pos:start="27:1" pos:end="27:7"># <cpp:directive pos:start="27:3" pos:end="27:7">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="29:5" pos:end="32:0"><decl pos:start="29:5" pos:end="29:17"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:17">addr_regh</name></decl>, <decl pos:start="29:20" pos:end="29:28"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:20" pos:end="29:28">addr_reg2</name></decl>, <decl pos:start="29:31" pos:end="29:39"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:31" pos:end="29:39">addr_memh</name></decl>;</decl_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="35:5" pos:end="35:24"><expr pos:start="35:5" pos:end="35:23"><name pos:start="35:5" pos:end="35:13">data_regl</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <operator pos:start="35:17" pos:end="35:17">*</operator><name pos:start="35:18" pos:end="35:21">args</name><operator pos:start="35:22" pos:end="35:23">++</operator></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="63:5"><if pos:start="37:5" pos:end="55:5">if <condition pos:start="37:8" pos:end="37:17">(<expr pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:11">opc</name> <operator pos:start="37:13" pos:end="37:14">==</operator> <literal type="number" pos:start="37:16" pos:end="37:16">3</literal></expr>)</condition> <block pos:start="37:19" pos:end="55:5">{<block_content pos:start="39:9" pos:end="54:0">

        <expr_stmt pos:start="39:9" pos:end="42:0"><expr pos:start="39:9" pos:end="39:27"><name pos:start="39:9" pos:end="39:17">data_regh</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <operator pos:start="39:21" pos:end="39:21">*</operator><name pos:start="39:22" pos:end="39:25">args</name><operator pos:start="39:26" pos:end="39:27">++</operator></expr>;</expr_stmt>

<cpp:if pos:start="41:1" pos:end="41:39">#<cpp:directive pos:start="41:2" pos:end="41:3">if</cpp:directive> <expr pos:start="41:5" pos:end="41:39"><call pos:start="41:5" pos:end="41:39"><name pos:start="41:5" pos:end="41:11">defined</name><argument_list pos:start="41:12" pos:end="41:39">(<argument pos:start="41:13" pos:end="41:38"><expr pos:start="41:13" pos:end="41:38"><name pos:start="41:13" pos:end="41:38">TCG_TARGET_WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="43:9" pos:end="43:30"><expr pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:17">data_reg1</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <name pos:start="43:21" pos:end="43:29">data_regh</name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="48:0"><expr pos:start="45:9" pos:end="45:29"><name pos:start="45:9" pos:end="45:17">data_reg2</name> <operator pos:start="45:19" pos:end="45:19">=</operator> <name pos:start="45:21" pos:end="45:29">data_regl</name></expr>;</expr_stmt>

<cpp:else pos:start="47:1" pos:end="47:5">#<cpp:directive pos:start="47:2" pos:end="47:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="49:9" pos:end="49:30"><expr pos:start="49:9" pos:end="49:29"><name pos:start="49:9" pos:end="49:17">data_reg1</name> <operator pos:start="49:19" pos:end="49:19">=</operator> <name pos:start="49:21" pos:end="49:29">data_regl</name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="54:0"><expr pos:start="51:9" pos:end="51:29"><name pos:start="51:9" pos:end="51:17">data_reg2</name> <operator pos:start="51:19" pos:end="51:19">=</operator> <name pos:start="51:21" pos:end="51:29">data_regh</name></expr>;</expr_stmt>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="55:7" pos:end="63:5">else <block pos:start="55:12" pos:end="63:5">{<block_content pos:start="57:9" pos:end="61:22">

        <expr_stmt pos:start="57:9" pos:end="57:30"><expr pos:start="57:9" pos:end="57:29"><name pos:start="57:9" pos:end="57:17">data_reg1</name> <operator pos:start="57:19" pos:end="57:19">=</operator> <name pos:start="57:21" pos:end="57:29">data_regl</name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:22"><expr pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:17">data_reg2</name> <operator pos:start="59:19" pos:end="59:19">=</operator> <literal type="number" pos:start="59:21" pos:end="59:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:22"><expr pos:start="61:9" pos:end="61:21"><name pos:start="61:9" pos:end="61:17">data_regh</name> <operator pos:start="61:19" pos:end="61:19">=</operator> <literal type="number" pos:start="61:21" pos:end="61:21">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="68:0"><expr pos:start="65:5" pos:end="65:23"><name pos:start="65:5" pos:end="65:13">addr_regl</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <operator pos:start="65:17" pos:end="65:17">*</operator><name pos:start="65:18" pos:end="65:21">args</name><operator pos:start="65:22" pos:end="65:23">++</operator></expr>;</expr_stmt>

<cpp:if pos:start="67:1" pos:end="67:26">#<cpp:directive pos:start="67:2" pos:end="67:3">if</cpp:directive> <expr pos:start="67:5" pos:end="67:26"><name pos:start="67:5" pos:end="67:20">TARGET_LONG_BITS</name> <operator pos:start="67:22" pos:end="67:23">==</operator> <literal type="number" pos:start="67:25" pos:end="67:26">64</literal></expr></cpp:if>

    <expr_stmt pos:start="69:5" pos:end="72:0"><expr pos:start="69:5" pos:end="69:23"><name pos:start="69:5" pos:end="69:13">addr_regh</name> <operator pos:start="69:15" pos:end="69:15">=</operator> <operator pos:start="69:17" pos:end="69:17">*</operator><name pos:start="69:18" pos:end="69:21">args</name><operator pos:start="69:22" pos:end="69:23">++</operator></expr>;</expr_stmt>

<cpp:if pos:start="71:1" pos:end="71:40"># <cpp:directive pos:start="71:3" pos:end="71:4">if</cpp:directive> <expr pos:start="71:6" pos:end="71:40"><call pos:start="71:6" pos:end="71:40"><name pos:start="71:6" pos:end="71:12">defined</name><argument_list pos:start="71:13" pos:end="71:40">(<argument pos:start="71:14" pos:end="71:39"><expr pos:start="71:14" pos:end="71:39"><name pos:start="71:14" pos:end="71:39">TCG_TARGET_WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="73:5" pos:end="73:26"><expr pos:start="73:5" pos:end="73:25"><name pos:start="73:5" pos:end="73:13">addr_reg1</name> <operator pos:start="73:15" pos:end="73:15">=</operator> <name pos:start="73:17" pos:end="73:25">addr_regh</name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:26"><expr pos:start="75:5" pos:end="75:25"><name pos:start="75:5" pos:end="75:13">addr_reg2</name> <operator pos:start="75:15" pos:end="75:15">=</operator> <name pos:start="75:17" pos:end="75:25">addr_regl</name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:18"><expr pos:start="77:5" pos:end="77:17"><name pos:start="77:5" pos:end="77:13">addr_memh</name> <operator pos:start="77:15" pos:end="77:15">=</operator> <literal type="number" pos:start="77:17" pos:end="77:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="82:0"><expr pos:start="79:5" pos:end="79:17"><name pos:start="79:5" pos:end="79:13">addr_meml</name> <operator pos:start="79:15" pos:end="79:15">=</operator> <literal type="number" pos:start="79:17" pos:end="79:17">4</literal></expr>;</expr_stmt>

<cpp:else pos:start="81:1" pos:end="81:6"># <cpp:directive pos:start="81:3" pos:end="81:6">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="83:5" pos:end="83:26"><expr pos:start="83:5" pos:end="83:25"><name pos:start="83:5" pos:end="83:13">addr_reg1</name> <operator pos:start="83:15" pos:end="83:15">=</operator> <name pos:start="83:17" pos:end="83:25">addr_regl</name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:26"><expr pos:start="85:5" pos:end="85:25"><name pos:start="85:5" pos:end="85:13">addr_reg2</name> <operator pos:start="85:15" pos:end="85:15">=</operator> <name pos:start="85:17" pos:end="85:25">addr_regh</name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:18"><expr pos:start="87:5" pos:end="87:17"><name pos:start="87:5" pos:end="87:13">addr_memh</name> <operator pos:start="87:15" pos:end="87:15">=</operator> <literal type="number" pos:start="87:17" pos:end="87:17">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="94:0"><expr pos:start="89:5" pos:end="89:17"><name pos:start="89:5" pos:end="89:13">addr_meml</name> <operator pos:start="89:15" pos:end="89:15">=</operator> <literal type="number" pos:start="89:17" pos:end="89:17">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="91:1" pos:end="91:7"># <cpp:directive pos:start="91:3" pos:end="91:7">endif</cpp:directive></cpp:endif>

<cpp:else pos:start="93:1" pos:end="93:5">#<cpp:directive pos:start="93:2" pos:end="93:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="95:5" pos:end="95:26"><expr pos:start="95:5" pos:end="95:25"><name pos:start="95:5" pos:end="95:13">addr_reg1</name> <operator pos:start="95:15" pos:end="95:15">=</operator> <name pos:start="95:17" pos:end="95:25">addr_regl</name></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="100:0"><expr pos:start="97:5" pos:end="97:17"><name pos:start="97:5" pos:end="97:13">addr_meml</name> <operator pos:start="97:15" pos:end="97:15">=</operator> <literal type="number" pos:start="97:17" pos:end="97:17">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="99:1" pos:end="99:6">#<cpp:directive pos:start="99:2" pos:end="99:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="101:5" pos:end="101:22"><expr pos:start="101:5" pos:end="101:21"><name pos:start="101:5" pos:end="101:13">mem_index</name> <operator pos:start="101:15" pos:end="101:15">=</operator> <operator pos:start="101:17" pos:end="101:17">*</operator><name pos:start="101:18" pos:end="101:21">args</name></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="108:0"><expr pos:start="103:5" pos:end="103:16"><name pos:start="103:5" pos:end="103:10">s_bits</name> <operator pos:start="103:12" pos:end="103:12">=</operator> <name pos:start="103:14" pos:end="103:16">opc</name></expr>;</expr_stmt>



<cpp:if pos:start="107:1" pos:end="107:27">#<cpp:directive pos:start="107:2" pos:end="107:3">if</cpp:directive> <expr pos:start="107:5" pos:end="107:27"><call pos:start="107:5" pos:end="107:27"><name pos:start="107:5" pos:end="107:11">defined</name><argument_list pos:start="107:12" pos:end="107:27">(<argument pos:start="107:13" pos:end="107:26"><expr pos:start="107:13" pos:end="107:26"><name pos:start="107:13" pos:end="107:26">CONFIG_SOFTMMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="109:5" pos:end="109:93"><expr pos:start="109:5" pos:end="109:92"><call pos:start="109:5" pos:end="109:92"><name pos:start="109:5" pos:end="109:18">tcg_out_opc_sa</name><argument_list pos:start="109:19" pos:end="109:92">(<argument pos:start="109:20" pos:end="109:20"><expr pos:start="109:20" pos:end="109:20"><name pos:start="109:20" pos:end="109:20">s</name></expr></argument>, <argument pos:start="109:23" pos:end="109:29"><expr pos:start="109:23" pos:end="109:29"><name pos:start="109:23" pos:end="109:29">OPC_SRL</name></expr></argument>, <argument pos:start="109:32" pos:end="109:41"><expr pos:start="109:32" pos:end="109:41"><name pos:start="109:32" pos:end="109:41">TCG_REG_A0</name></expr></argument>, <argument pos:start="109:44" pos:end="109:52"><expr pos:start="109:44" pos:end="109:52"><name pos:start="109:44" pos:end="109:52">addr_regl</name></expr></argument>, <argument pos:start="109:55" pos:end="109:91"><expr pos:start="109:55" pos:end="109:91"><name pos:start="109:55" pos:end="109:70">TARGET_PAGE_BITS</name> <operator pos:start="109:72" pos:end="109:72">-</operator> <name pos:start="109:74" pos:end="109:91">CPU_TLB_ENTRY_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:99"><expr pos:start="111:5" pos:end="111:98"><call pos:start="111:5" pos:end="111:98"><name pos:start="111:5" pos:end="111:19">tcg_out_opc_imm</name><argument_list pos:start="111:20" pos:end="111:98">(<argument pos:start="111:21" pos:end="111:21"><expr pos:start="111:21" pos:end="111:21"><name pos:start="111:21" pos:end="111:21">s</name></expr></argument>, <argument pos:start="111:24" pos:end="111:31"><expr pos:start="111:24" pos:end="111:31"><name pos:start="111:24" pos:end="111:31">OPC_ANDI</name></expr></argument>, <argument pos:start="111:34" pos:end="111:43"><expr pos:start="111:34" pos:end="111:43"><name pos:start="111:34" pos:end="111:43">TCG_REG_A0</name></expr></argument>, <argument pos:start="111:46" pos:end="111:55"><expr pos:start="111:46" pos:end="111:55"><name pos:start="111:46" pos:end="111:55">TCG_REG_A0</name></expr></argument>, <argument pos:start="111:58" pos:end="111:97"><expr pos:start="111:58" pos:end="111:97"><operator pos:start="111:58" pos:end="111:58">(</operator><name pos:start="111:59" pos:end="111:70">CPU_TLB_SIZE</name> <operator pos:start="111:72" pos:end="111:72">-</operator> <literal type="number" pos:start="111:74" pos:end="111:74">1</literal><operator pos:start="111:75" pos:end="111:75">)</operator> <operator pos:start="111:77" pos:end="111:78">&lt;&lt;</operator> <name pos:start="111:80" pos:end="111:97">CPU_TLB_ENTRY_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:68"><expr pos:start="113:5" pos:end="113:67"><call pos:start="113:5" pos:end="113:67"><name pos:start="113:5" pos:end="113:19">tcg_out_opc_reg</name><argument_list pos:start="113:20" pos:end="113:67">(<argument pos:start="113:21" pos:end="113:21"><expr pos:start="113:21" pos:end="113:21"><name pos:start="113:21" pos:end="113:21">s</name></expr></argument>, <argument pos:start="113:24" pos:end="113:31"><expr pos:start="113:24" pos:end="113:31"><name pos:start="113:24" pos:end="113:31">OPC_ADDU</name></expr></argument>, <argument pos:start="113:34" pos:end="113:43"><expr pos:start="113:34" pos:end="113:43"><name pos:start="113:34" pos:end="113:43">TCG_REG_A0</name></expr></argument>, <argument pos:start="113:46" pos:end="113:55"><expr pos:start="113:46" pos:end="113:55"><name pos:start="113:46" pos:end="113:55">TCG_REG_A0</name></expr></argument>, <argument pos:start="113:58" pos:end="113:66"><expr pos:start="113:58" pos:end="113:66"><name pos:start="113:58" pos:end="113:66">TCG_AREG0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="117:88"><expr pos:start="115:5" pos:end="117:87"><call pos:start="115:5" pos:end="117:87"><name pos:start="115:5" pos:end="115:19">tcg_out_opc_imm</name><argument_list pos:start="115:20" pos:end="117:87">(<argument pos:start="115:21" pos:end="115:21"><expr pos:start="115:21" pos:end="115:21"><name pos:start="115:21" pos:end="115:21">s</name></expr></argument>, <argument pos:start="115:24" pos:end="115:29"><expr pos:start="115:24" pos:end="115:29"><name pos:start="115:24" pos:end="115:29">OPC_LW</name></expr></argument>, <argument pos:start="115:32" pos:end="115:41"><expr pos:start="115:32" pos:end="115:41"><name pos:start="115:32" pos:end="115:41">TCG_REG_AT</name></expr></argument>, <argument pos:start="115:44" pos:end="115:53"><expr pos:start="115:44" pos:end="115:53"><name pos:start="115:44" pos:end="115:53">TCG_REG_A0</name></expr></argument>,

                    <argument pos:start="117:21" pos:end="117:86"><expr pos:start="117:21" pos:end="117:86"><call pos:start="117:21" pos:end="117:74"><name pos:start="117:21" pos:end="117:28">offsetof</name><argument_list pos:start="117:29" pos:end="117:74">(<argument pos:start="117:30" pos:end="117:37"><expr pos:start="117:30" pos:end="117:37"><name pos:start="117:30" pos:end="117:37">CPUState</name></expr></argument>, <argument pos:start="117:40" pos:end="117:73"><expr pos:start="117:40" pos:end="117:73"><name pos:start="117:40" pos:end="117:62"><name pos:start="117:40" pos:end="117:48">tlb_table</name><index pos:start="117:49" pos:end="117:59">[<expr pos:start="117:50" pos:end="117:58"><name pos:start="117:50" pos:end="117:58">mem_index</name></expr>]</index><index pos:start="117:60" pos:end="117:62">[<expr pos:start="117:61" pos:end="117:61"><literal type="number" pos:start="117:61" pos:end="117:61">0</literal></expr>]</index></name><operator pos:start="117:63" pos:end="117:63">.</operator><name pos:start="117:64" pos:end="117:73">addr_write</name></expr></argument>)</argument_list></call> <operator pos:start="117:76" pos:end="117:76">+</operator> <name pos:start="117:78" pos:end="117:86">addr_meml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:86"><expr pos:start="119:5" pos:end="119:85"><call pos:start="119:5" pos:end="119:85"><name pos:start="119:5" pos:end="119:16">tcg_out_movi</name><argument_list pos:start="119:17" pos:end="119:85">(<argument pos:start="119:18" pos:end="119:18"><expr pos:start="119:18" pos:end="119:18"><name pos:start="119:18" pos:end="119:18">s</name></expr></argument>, <argument pos:start="119:21" pos:end="119:32"><expr pos:start="119:21" pos:end="119:32"><name pos:start="119:21" pos:end="119:32">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="119:35" pos:end="119:44"><expr pos:start="119:35" pos:end="119:44"><name pos:start="119:35" pos:end="119:44">TCG_REG_T0</name></expr></argument>, <argument pos:start="119:47" pos:end="119:84"><expr pos:start="119:47" pos:end="119:84"><name pos:start="119:47" pos:end="119:62">TARGET_PAGE_MASK</name> <operator pos:start="119:64" pos:end="119:64">|</operator> <operator pos:start="119:66" pos:end="119:66">(</operator><operator pos:start="119:67" pos:end="119:67">(</operator><literal type="number" pos:start="119:68" pos:end="119:68">1</literal> <operator pos:start="119:70" pos:end="119:71">&lt;&lt;</operator> <name pos:start="119:73" pos:end="119:78">s_bits</name><operator pos:start="119:79" pos:end="119:79">)</operator> <operator pos:start="119:81" pos:end="119:81">-</operator> <literal type="number" pos:start="119:83" pos:end="119:83">1</literal><operator pos:start="119:84" pos:end="119:84">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="126:0"><expr pos:start="121:5" pos:end="121:66"><call pos:start="121:5" pos:end="121:66"><name pos:start="121:5" pos:end="121:19">tcg_out_opc_reg</name><argument_list pos:start="121:20" pos:end="121:66">(<argument pos:start="121:21" pos:end="121:21"><expr pos:start="121:21" pos:end="121:21"><name pos:start="121:21" pos:end="121:21">s</name></expr></argument>, <argument pos:start="121:24" pos:end="121:30"><expr pos:start="121:24" pos:end="121:30"><name pos:start="121:24" pos:end="121:30">OPC_AND</name></expr></argument>, <argument pos:start="121:33" pos:end="121:42"><expr pos:start="121:33" pos:end="121:42"><name pos:start="121:33" pos:end="121:42">TCG_REG_T0</name></expr></argument>, <argument pos:start="121:45" pos:end="121:54"><expr pos:start="121:45" pos:end="121:54"><name pos:start="121:45" pos:end="121:54">TCG_REG_T0</name></expr></argument>, <argument pos:start="121:57" pos:end="121:65"><expr pos:start="121:57" pos:end="121:65"><name pos:start="121:57" pos:end="121:65">addr_regl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="125:1" pos:end="125:27"># <cpp:directive pos:start="125:3" pos:end="125:4">if</cpp:directive> <expr pos:start="125:6" pos:end="125:27"><name pos:start="125:6" pos:end="125:21">TARGET_LONG_BITS</name> <operator pos:start="125:23" pos:end="125:24">==</operator> <literal type="number" pos:start="125:26" pos:end="125:27">64</literal></expr></cpp:if>

    <expr_stmt pos:start="127:5" pos:end="127:29"><expr pos:start="127:5" pos:end="127:28"><name pos:start="127:5" pos:end="127:14">label3_ptr</name> <operator pos:start="127:16" pos:end="127:16">=</operator> <name pos:start="127:18" pos:end="127:28"><name pos:start="127:18" pos:end="127:18">s</name><operator pos:start="127:19" pos:end="127:20">-&gt;</operator><name pos:start="127:21" pos:end="127:28">code_ptr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:55"><expr pos:start="129:5" pos:end="129:54"><call pos:start="129:5" pos:end="129:54"><name pos:start="129:5" pos:end="129:18">tcg_out_opc_br</name><argument_list pos:start="129:19" pos:end="129:54">(<argument pos:start="129:20" pos:end="129:20"><expr pos:start="129:20" pos:end="129:20"><name pos:start="129:20" pos:end="129:20">s</name></expr></argument>, <argument pos:start="129:23" pos:end="129:29"><expr pos:start="129:23" pos:end="129:29"><name pos:start="129:23" pos:end="129:29">OPC_BNE</name></expr></argument>, <argument pos:start="129:32" pos:end="129:41"><expr pos:start="129:32" pos:end="129:41"><name pos:start="129:32" pos:end="129:41">TCG_REG_T0</name></expr></argument>, <argument pos:start="129:44" pos:end="129:53"><expr pos:start="129:44" pos:end="129:53"><name pos:start="129:44" pos:end="129:53">TCG_REG_AT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:19"><expr pos:start="131:5" pos:end="131:18"><call pos:start="131:5" pos:end="131:18"><name pos:start="131:5" pos:end="131:15">tcg_out_nop</name><argument_list pos:start="131:16" pos:end="131:18">(<argument pos:start="131:17" pos:end="131:17"><expr pos:start="131:17" pos:end="131:17"><name pos:start="131:17" pos:end="131:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="135:5" pos:end="137:88"><expr pos:start="135:5" pos:end="137:87"><call pos:start="135:5" pos:end="137:87"><name pos:start="135:5" pos:end="135:19">tcg_out_opc_imm</name><argument_list pos:start="135:20" pos:end="137:87">(<argument pos:start="135:21" pos:end="135:21"><expr pos:start="135:21" pos:end="135:21"><name pos:start="135:21" pos:end="135:21">s</name></expr></argument>, <argument pos:start="135:24" pos:end="135:29"><expr pos:start="135:24" pos:end="135:29"><name pos:start="135:24" pos:end="135:29">OPC_LW</name></expr></argument>, <argument pos:start="135:32" pos:end="135:41"><expr pos:start="135:32" pos:end="135:41"><name pos:start="135:32" pos:end="135:41">TCG_REG_AT</name></expr></argument>, <argument pos:start="135:44" pos:end="135:53"><expr pos:start="135:44" pos:end="135:53"><name pos:start="135:44" pos:end="135:53">TCG_REG_A0</name></expr></argument>,

                    <argument pos:start="137:21" pos:end="137:86"><expr pos:start="137:21" pos:end="137:86"><call pos:start="137:21" pos:end="137:74"><name pos:start="137:21" pos:end="137:28">offsetof</name><argument_list pos:start="137:29" pos:end="137:74">(<argument pos:start="137:30" pos:end="137:37"><expr pos:start="137:30" pos:end="137:37"><name pos:start="137:30" pos:end="137:37">CPUState</name></expr></argument>, <argument pos:start="137:40" pos:end="137:73"><expr pos:start="137:40" pos:end="137:73"><name pos:start="137:40" pos:end="137:62"><name pos:start="137:40" pos:end="137:48">tlb_table</name><index pos:start="137:49" pos:end="137:59">[<expr pos:start="137:50" pos:end="137:58"><name pos:start="137:50" pos:end="137:58">mem_index</name></expr>]</index><index pos:start="137:60" pos:end="137:62">[<expr pos:start="137:61" pos:end="137:61"><literal type="number" pos:start="137:61" pos:end="137:61">0</literal></expr>]</index></name><operator pos:start="137:63" pos:end="137:63">.</operator><name pos:start="137:64" pos:end="137:73">addr_write</name></expr></argument>)</argument_list></call> <operator pos:start="137:76" pos:end="137:76">+</operator> <name pos:start="137:78" pos:end="137:86">addr_memh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:29"><expr pos:start="141:5" pos:end="141:28"><name pos:start="141:5" pos:end="141:14">label1_ptr</name> <operator pos:start="141:16" pos:end="141:16">=</operator> <name pos:start="141:18" pos:end="141:28"><name pos:start="141:18" pos:end="141:18">s</name><operator pos:start="141:19" pos:end="141:20">-&gt;</operator><name pos:start="141:21" pos:end="141:28">code_ptr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:54"><expr pos:start="143:5" pos:end="143:53"><call pos:start="143:5" pos:end="143:53"><name pos:start="143:5" pos:end="143:18">tcg_out_opc_br</name><argument_list pos:start="143:19" pos:end="143:53">(<argument pos:start="143:20" pos:end="143:20"><expr pos:start="143:20" pos:end="143:20"><name pos:start="143:20" pos:end="143:20">s</name></expr></argument>, <argument pos:start="143:23" pos:end="143:29"><expr pos:start="143:23" pos:end="143:29"><name pos:start="143:23" pos:end="143:29">OPC_BEQ</name></expr></argument>, <argument pos:start="143:32" pos:end="143:40"><expr pos:start="143:32" pos:end="143:40"><name pos:start="143:32" pos:end="143:40">addr_regh</name></expr></argument>, <argument pos:start="143:43" pos:end="143:52"><expr pos:start="143:43" pos:end="143:52"><name pos:start="143:43" pos:end="143:52">TCG_REG_AT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:19"><expr pos:start="145:5" pos:end="145:18"><call pos:start="145:5" pos:end="145:18"><name pos:start="145:5" pos:end="145:15">tcg_out_nop</name><argument_list pos:start="145:16" pos:end="145:18">(<argument pos:start="145:17" pos:end="145:17"><expr pos:start="145:17" pos:end="145:17"><name pos:start="145:17" pos:end="145:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="149:5" pos:end="152:0"><expr pos:start="149:5" pos:end="149:57"><call pos:start="149:5" pos:end="149:57"><name pos:start="149:5" pos:end="149:14">reloc_pc16</name><argument_list pos:start="149:15" pos:end="149:57">(<argument pos:start="149:16" pos:end="149:25"><expr pos:start="149:16" pos:end="149:25"><name pos:start="149:16" pos:end="149:25">label3_ptr</name></expr></argument>, <argument pos:start="149:28" pos:end="149:56"><expr pos:start="149:28" pos:end="149:56"><operator pos:start="149:28" pos:end="149:28">(</operator><name pos:start="149:29" pos:end="149:43">tcg_target_long</name><operator pos:start="149:44" pos:end="149:44">)</operator> <name pos:start="149:46" pos:end="149:56"><name pos:start="149:46" pos:end="149:46">s</name><operator pos:start="149:47" pos:end="149:48">-&gt;</operator><name pos:start="149:49" pos:end="149:56">code_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="151:1" pos:end="151:6"># <cpp:directive pos:start="151:3" pos:end="151:6">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="153:5" pos:end="153:29"><expr pos:start="153:5" pos:end="153:28"><name pos:start="153:5" pos:end="153:14">label1_ptr</name> <operator pos:start="153:16" pos:end="153:16">=</operator> <name pos:start="153:18" pos:end="153:28"><name pos:start="153:18" pos:end="153:18">s</name><operator pos:start="153:19" pos:end="153:20">-&gt;</operator><name pos:start="153:21" pos:end="153:28">code_ptr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:55"><expr pos:start="155:5" pos:end="155:54"><call pos:start="155:5" pos:end="155:54"><name pos:start="155:5" pos:end="155:18">tcg_out_opc_br</name><argument_list pos:start="155:19" pos:end="155:54">(<argument pos:start="155:20" pos:end="155:20"><expr pos:start="155:20" pos:end="155:20"><name pos:start="155:20" pos:end="155:20">s</name></expr></argument>, <argument pos:start="155:23" pos:end="155:29"><expr pos:start="155:23" pos:end="155:29"><name pos:start="155:23" pos:end="155:29">OPC_BEQ</name></expr></argument>, <argument pos:start="155:32" pos:end="155:41"><expr pos:start="155:32" pos:end="155:41"><name pos:start="155:32" pos:end="155:41">TCG_REG_T0</name></expr></argument>, <argument pos:start="155:44" pos:end="155:53"><expr pos:start="155:44" pos:end="155:53"><name pos:start="155:44" pos:end="155:53">TCG_REG_AT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="160:0"><expr pos:start="157:5" pos:end="157:18"><call pos:start="157:5" pos:end="157:18"><name pos:start="157:5" pos:end="157:15">tcg_out_nop</name><argument_list pos:start="157:16" pos:end="157:18">(<argument pos:start="157:17" pos:end="157:17"><expr pos:start="157:17" pos:end="157:17"><name pos:start="157:17" pos:end="157:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="159:1" pos:end="159:7"># <cpp:directive pos:start="159:3" pos:end="159:7">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="163:5" pos:end="163:19">/* slow path */</comment>

    <expr_stmt pos:start="165:5" pos:end="165:25"><expr pos:start="165:5" pos:end="165:24"><name pos:start="165:5" pos:end="165:11">sp_args</name> <operator pos:start="165:13" pos:end="165:13">=</operator> <name pos:start="165:15" pos:end="165:24">TCG_REG_A0</name></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="170:0"><expr pos:start="167:5" pos:end="167:40"><call pos:start="167:5" pos:end="167:40"><name pos:start="167:5" pos:end="167:15">tcg_out_mov</name><argument_list pos:start="167:16" pos:end="167:40">(<argument pos:start="167:17" pos:end="167:17"><expr pos:start="167:17" pos:end="167:17"><name pos:start="167:17" pos:end="167:17">s</name></expr></argument>, <argument pos:start="167:20" pos:end="167:28"><expr pos:start="167:20" pos:end="167:28"><name pos:start="167:20" pos:end="167:26">sp_args</name><operator pos:start="167:27" pos:end="167:28">++</operator></expr></argument>, <argument pos:start="167:31" pos:end="167:39"><expr pos:start="167:31" pos:end="167:39"><name pos:start="167:31" pos:end="167:39">addr_reg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="169:1" pos:end="169:27"># <cpp:directive pos:start="169:3" pos:end="169:4">if</cpp:directive> <expr pos:start="169:6" pos:end="169:27"><name pos:start="169:6" pos:end="169:21">TARGET_LONG_BITS</name> <operator pos:start="169:23" pos:end="169:24">==</operator> <literal type="number" pos:start="169:26" pos:end="169:27">64</literal></expr></cpp:if>

    <expr_stmt pos:start="171:5" pos:end="174:0"><expr pos:start="171:5" pos:end="171:40"><call pos:start="171:5" pos:end="171:40"><name pos:start="171:5" pos:end="171:15">tcg_out_mov</name><argument_list pos:start="171:16" pos:end="171:40">(<argument pos:start="171:17" pos:end="171:17"><expr pos:start="171:17" pos:end="171:17"><name pos:start="171:17" pos:end="171:17">s</name></expr></argument>, <argument pos:start="171:20" pos:end="171:28"><expr pos:start="171:20" pos:end="171:28"><name pos:start="171:20" pos:end="171:26">sp_args</name><operator pos:start="171:27" pos:end="171:28">++</operator></expr></argument>, <argument pos:start="171:31" pos:end="171:39"><expr pos:start="171:31" pos:end="171:39"><name pos:start="171:31" pos:end="171:39">addr_reg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="173:1" pos:end="173:7"># <cpp:directive pos:start="173:3" pos:end="173:7">endif</cpp:directive></cpp:endif>

    <switch pos:start="175:5" pos:end="209:5">switch<condition pos:start="175:11" pos:end="175:15">(<expr pos:start="175:12" pos:end="175:14"><name pos:start="175:12" pos:end="175:14">opc</name></expr>)</condition> <block pos:start="175:17" pos:end="209:5">{<block_content pos:start="177:5" pos:end="207:20">

    <case pos:start="177:5" pos:end="177:11">case <expr pos:start="177:10" pos:end="177:10"><literal type="number" pos:start="177:10" pos:end="177:10">0</literal></expr>:</case>

        <expr_stmt pos:start="179:9" pos:end="179:65"><expr pos:start="179:9" pos:end="179:64"><call pos:start="179:9" pos:end="179:64"><name pos:start="179:9" pos:end="179:23">tcg_out_opc_imm</name><argument_list pos:start="179:24" pos:end="179:64">(<argument pos:start="179:25" pos:end="179:25"><expr pos:start="179:25" pos:end="179:25"><name pos:start="179:25" pos:end="179:25">s</name></expr></argument>, <argument pos:start="179:28" pos:end="179:35"><expr pos:start="179:28" pos:end="179:35"><name pos:start="179:28" pos:end="179:35">OPC_ANDI</name></expr></argument>, <argument pos:start="179:38" pos:end="179:46"><expr pos:start="179:38" pos:end="179:46"><name pos:start="179:38" pos:end="179:44">sp_args</name><operator pos:start="179:45" pos:end="179:46">++</operator></expr></argument>, <argument pos:start="179:49" pos:end="179:57"><expr pos:start="179:49" pos:end="179:57"><name pos:start="179:49" pos:end="179:57">data_reg1</name></expr></argument>, <argument pos:start="179:60" pos:end="179:63"><expr pos:start="179:60" pos:end="179:63"><literal type="number" pos:start="179:60" pos:end="179:63">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="181:9" pos:end="181:14">break;</break>

    <case pos:start="183:5" pos:end="183:11">case <expr pos:start="183:10" pos:end="183:10"><literal type="number" pos:start="183:10" pos:end="183:10">1</literal></expr>:</case>

        <expr_stmt pos:start="185:9" pos:end="185:67"><expr pos:start="185:9" pos:end="185:66"><call pos:start="185:9" pos:end="185:66"><name pos:start="185:9" pos:end="185:23">tcg_out_opc_imm</name><argument_list pos:start="185:24" pos:end="185:66">(<argument pos:start="185:25" pos:end="185:25"><expr pos:start="185:25" pos:end="185:25"><name pos:start="185:25" pos:end="185:25">s</name></expr></argument>, <argument pos:start="185:28" pos:end="185:35"><expr pos:start="185:28" pos:end="185:35"><name pos:start="185:28" pos:end="185:35">OPC_ANDI</name></expr></argument>, <argument pos:start="185:38" pos:end="185:46"><expr pos:start="185:38" pos:end="185:46"><name pos:start="185:38" pos:end="185:44">sp_args</name><operator pos:start="185:45" pos:end="185:46">++</operator></expr></argument>, <argument pos:start="185:49" pos:end="185:57"><expr pos:start="185:49" pos:end="185:57"><name pos:start="185:49" pos:end="185:57">data_reg1</name></expr></argument>, <argument pos:start="185:60" pos:end="185:65"><expr pos:start="185:60" pos:end="185:65"><literal type="number" pos:start="185:60" pos:end="185:65">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="187:9" pos:end="187:14">break;</break>

    <case pos:start="189:5" pos:end="189:11">case <expr pos:start="189:10" pos:end="189:10"><literal type="number" pos:start="189:10" pos:end="189:10">2</literal></expr>:</case>

        <expr_stmt pos:start="191:9" pos:end="191:45"><expr pos:start="191:9" pos:end="191:44"><call pos:start="191:9" pos:end="191:44"><name pos:start="191:9" pos:end="191:19">tcg_out_mov</name><argument_list pos:start="191:20" pos:end="191:44">(<argument pos:start="191:21" pos:end="191:21"><expr pos:start="191:21" pos:end="191:21"><name pos:start="191:21" pos:end="191:21">s</name></expr></argument>, <argument pos:start="191:24" pos:end="191:32"><expr pos:start="191:24" pos:end="191:32"><name pos:start="191:24" pos:end="191:30">sp_args</name><operator pos:start="191:31" pos:end="191:32">++</operator></expr></argument>, <argument pos:start="191:35" pos:end="191:43"><expr pos:start="191:35" pos:end="191:43"><name pos:start="191:35" pos:end="191:43">data_reg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="193:9" pos:end="193:14">break;</break>

    <case pos:start="195:5" pos:end="195:11">case <expr pos:start="195:10" pos:end="195:10"><literal type="number" pos:start="195:10" pos:end="195:10">3</literal></expr>:</case>

        <expr_stmt pos:start="197:9" pos:end="197:37"><expr pos:start="197:9" pos:end="197:36"><name pos:start="197:9" pos:end="197:15">sp_args</name> <operator pos:start="197:17" pos:end="197:17">=</operator> <operator pos:start="197:19" pos:end="197:19">(</operator><name pos:start="197:20" pos:end="197:26">sp_args</name> <operator pos:start="197:28" pos:end="197:28">+</operator> <literal type="number" pos:start="197:30" pos:end="197:30">1</literal><operator pos:start="197:31" pos:end="197:31">)</operator> <operator pos:start="197:33" pos:end="197:33">&amp;</operator> <operator pos:start="197:35" pos:end="197:35">~</operator><literal type="number" pos:start="197:36" pos:end="197:36">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:45"><expr pos:start="199:9" pos:end="199:44"><call pos:start="199:9" pos:end="199:44"><name pos:start="199:9" pos:end="199:19">tcg_out_mov</name><argument_list pos:start="199:20" pos:end="199:44">(<argument pos:start="199:21" pos:end="199:21"><expr pos:start="199:21" pos:end="199:21"><name pos:start="199:21" pos:end="199:21">s</name></expr></argument>, <argument pos:start="199:24" pos:end="199:32"><expr pos:start="199:24" pos:end="199:32"><name pos:start="199:24" pos:end="199:30">sp_args</name><operator pos:start="199:31" pos:end="199:32">++</operator></expr></argument>, <argument pos:start="199:35" pos:end="199:43"><expr pos:start="199:35" pos:end="199:43"><name pos:start="199:35" pos:end="199:43">data_reg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:45"><expr pos:start="201:9" pos:end="201:44"><call pos:start="201:9" pos:end="201:44"><name pos:start="201:9" pos:end="201:19">tcg_out_mov</name><argument_list pos:start="201:20" pos:end="201:44">(<argument pos:start="201:21" pos:end="201:21"><expr pos:start="201:21" pos:end="201:21"><name pos:start="201:21" pos:end="201:21">s</name></expr></argument>, <argument pos:start="201:24" pos:end="201:32"><expr pos:start="201:24" pos:end="201:32"><name pos:start="201:24" pos:end="201:30">sp_args</name><operator pos:start="201:31" pos:end="201:32">++</operator></expr></argument>, <argument pos:start="201:35" pos:end="201:43"><expr pos:start="201:35" pos:end="201:43"><name pos:start="201:35" pos:end="201:43">data_reg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="203:9" pos:end="203:14">break;</break>

    <default pos:start="205:5" pos:end="205:12">default:</default>

        <expr_stmt pos:start="207:9" pos:end="207:20"><expr pos:start="207:9" pos:end="207:19"><call pos:start="207:9" pos:end="207:19"><name pos:start="207:9" pos:end="207:17">tcg_abort</name><argument_list pos:start="207:18" pos:end="207:19">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

    <if_stmt pos:start="211:5" pos:end="223:5"><if pos:start="211:5" pos:end="219:5">if <condition pos:start="211:8" pos:end="211:29">(<expr pos:start="211:9" pos:end="211:28"><name pos:start="211:9" pos:end="211:15">sp_args</name> <operator pos:start="211:17" pos:end="211:17">&gt;</operator> <name pos:start="211:19" pos:end="211:28">TCG_REG_A3</name></expr>)</condition> <block pos:start="211:31" pos:end="219:5">{<block_content pos:start="215:9" pos:end="217:64">

        <comment type="block" pos:start="213:9" pos:end="213:41">/* Push mem_index on the stack */</comment>

        <expr_stmt pos:start="215:9" pos:end="215:61"><expr pos:start="215:9" pos:end="215:60"><call pos:start="215:9" pos:end="215:60"><name pos:start="215:9" pos:end="215:20">tcg_out_movi</name><argument_list pos:start="215:21" pos:end="215:60">(<argument pos:start="215:22" pos:end="215:22"><expr pos:start="215:22" pos:end="215:22"><name pos:start="215:22" pos:end="215:22">s</name></expr></argument>, <argument pos:start="215:25" pos:end="215:36"><expr pos:start="215:25" pos:end="215:36"><name pos:start="215:25" pos:end="215:36">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="215:39" pos:end="215:48"><expr pos:start="215:39" pos:end="215:48"><name pos:start="215:39" pos:end="215:48">TCG_REG_AT</name></expr></argument>, <argument pos:start="215:51" pos:end="215:59"><expr pos:start="215:51" pos:end="215:59"><name pos:start="215:51" pos:end="215:59">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:64"><expr pos:start="217:9" pos:end="217:63"><call pos:start="217:9" pos:end="217:63"><name pos:start="217:9" pos:end="217:18">tcg_out_st</name><argument_list pos:start="217:19" pos:end="217:63">(<argument pos:start="217:20" pos:end="217:20"><expr pos:start="217:20" pos:end="217:20"><name pos:start="217:20" pos:end="217:20">s</name></expr></argument>, <argument pos:start="217:23" pos:end="217:34"><expr pos:start="217:23" pos:end="217:34"><name pos:start="217:23" pos:end="217:34">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="217:37" pos:end="217:46"><expr pos:start="217:37" pos:end="217:46"><name pos:start="217:37" pos:end="217:46">TCG_REG_AT</name></expr></argument>, <argument pos:start="217:49" pos:end="217:58"><expr pos:start="217:49" pos:end="217:58"><name pos:start="217:49" pos:end="217:58">TCG_REG_SP</name></expr></argument>, <argument pos:start="217:61" pos:end="217:62"><expr pos:start="217:61" pos:end="217:62"><literal type="number" pos:start="217:61" pos:end="217:62">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="219:7" pos:end="223:5">else <block pos:start="219:12" pos:end="223:5">{<block_content pos:start="221:9" pos:end="221:58">

        <expr_stmt pos:start="221:9" pos:end="221:58"><expr pos:start="221:9" pos:end="221:57"><call pos:start="221:9" pos:end="221:57"><name pos:start="221:9" pos:end="221:20">tcg_out_movi</name><argument_list pos:start="221:21" pos:end="221:57">(<argument pos:start="221:22" pos:end="221:22"><expr pos:start="221:22" pos:end="221:22"><name pos:start="221:22" pos:end="221:22">s</name></expr></argument>, <argument pos:start="221:25" pos:end="221:36"><expr pos:start="221:25" pos:end="221:36"><name pos:start="221:25" pos:end="221:36">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="221:39" pos:end="221:45"><expr pos:start="221:39" pos:end="221:45"><name pos:start="221:39" pos:end="221:45">sp_args</name></expr></argument>, <argument pos:start="221:48" pos:end="221:56"><expr pos:start="221:48" pos:end="221:56"><name pos:start="221:48" pos:end="221:56">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="227:5" pos:end="227:88"><expr pos:start="227:5" pos:end="227:87"><call pos:start="227:5" pos:end="227:87"><name pos:start="227:5" pos:end="227:16">tcg_out_movi</name><argument_list pos:start="227:17" pos:end="227:87">(<argument pos:start="227:18" pos:end="227:18"><expr pos:start="227:18" pos:end="227:18"><name pos:start="227:18" pos:end="227:18">s</name></expr></argument>, <argument pos:start="227:21" pos:end="227:32"><expr pos:start="227:21" pos:end="227:32"><name pos:start="227:21" pos:end="227:32">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="227:35" pos:end="227:44"><expr pos:start="227:35" pos:end="227:44"><name pos:start="227:35" pos:end="227:44">TCG_REG_T9</name></expr></argument>, <argument pos:start="227:47" pos:end="227:86"><expr pos:start="227:47" pos:end="227:86"><operator pos:start="227:47" pos:end="227:47">(</operator><name pos:start="227:48" pos:end="227:62">tcg_target_long</name><operator pos:start="227:63" pos:end="227:63">)</operator><name pos:start="227:64" pos:end="227:86"><name pos:start="227:64" pos:end="227:78">qemu_st_helpers</name><index pos:start="227:79" pos:end="227:86">[<expr pos:start="227:80" pos:end="227:85"><name pos:start="227:80" pos:end="227:85">s_bits</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:60"><expr pos:start="229:5" pos:end="229:59"><call pos:start="229:5" pos:end="229:59"><name pos:start="229:5" pos:end="229:19">tcg_out_opc_reg</name><argument_list pos:start="229:20" pos:end="229:59">(<argument pos:start="229:21" pos:end="229:21"><expr pos:start="229:21" pos:end="229:21"><name pos:start="229:21" pos:end="229:21">s</name></expr></argument>, <argument pos:start="229:24" pos:end="229:31"><expr pos:start="229:24" pos:end="229:31"><name pos:start="229:24" pos:end="229:31">OPC_JALR</name></expr></argument>, <argument pos:start="229:34" pos:end="229:43"><expr pos:start="229:34" pos:end="229:43"><name pos:start="229:34" pos:end="229:43">TCG_REG_RA</name></expr></argument>, <argument pos:start="229:46" pos:end="229:55"><expr pos:start="229:46" pos:end="229:55"><name pos:start="229:46" pos:end="229:55">TCG_REG_T9</name></expr></argument>, <argument pos:start="229:58" pos:end="229:58"><expr pos:start="229:58" pos:end="229:58"><literal type="number" pos:start="229:58" pos:end="229:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="231:5" pos:end="231:19"><expr pos:start="231:5" pos:end="231:18"><call pos:start="231:5" pos:end="231:18"><name pos:start="231:5" pos:end="231:15">tcg_out_nop</name><argument_list pos:start="231:16" pos:end="231:18">(<argument pos:start="231:17" pos:end="231:17"><expr pos:start="231:17" pos:end="231:17"><name pos:start="231:17" pos:end="231:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="235:5" pos:end="235:29"><expr pos:start="235:5" pos:end="235:28"><name pos:start="235:5" pos:end="235:14">label2_ptr</name> <operator pos:start="235:16" pos:end="235:16">=</operator> <name pos:start="235:18" pos:end="235:28"><name pos:start="235:18" pos:end="235:18">s</name><operator pos:start="235:19" pos:end="235:20">-&gt;</operator><name pos:start="235:21" pos:end="235:28">code_ptr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="237:5" pos:end="237:59"><expr pos:start="237:5" pos:end="237:58"><call pos:start="237:5" pos:end="237:58"><name pos:start="237:5" pos:end="237:18">tcg_out_opc_br</name><argument_list pos:start="237:19" pos:end="237:58">(<argument pos:start="237:20" pos:end="237:20"><expr pos:start="237:20" pos:end="237:20"><name pos:start="237:20" pos:end="237:20">s</name></expr></argument>, <argument pos:start="237:23" pos:end="237:29"><expr pos:start="237:23" pos:end="237:29"><name pos:start="237:23" pos:end="237:29">OPC_BEQ</name></expr></argument>, <argument pos:start="237:32" pos:end="237:43"><expr pos:start="237:32" pos:end="237:43"><name pos:start="237:32" pos:end="237:43">TCG_REG_ZERO</name></expr></argument>, <argument pos:start="237:46" pos:end="237:57"><expr pos:start="237:46" pos:end="237:57"><name pos:start="237:46" pos:end="237:57">TCG_REG_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="239:5" pos:end="239:19"><expr pos:start="239:5" pos:end="239:18"><call pos:start="239:5" pos:end="239:18"><name pos:start="239:5" pos:end="239:15">tcg_out_nop</name><argument_list pos:start="239:16" pos:end="239:18">(<argument pos:start="239:17" pos:end="239:17"><expr pos:start="239:17" pos:end="239:17"><name pos:start="239:17" pos:end="239:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="243:5" pos:end="243:27">/* label1: fast path */</comment>

    <expr_stmt pos:start="245:5" pos:end="245:58"><expr pos:start="245:5" pos:end="245:57"><call pos:start="245:5" pos:end="245:57"><name pos:start="245:5" pos:end="245:14">reloc_pc16</name><argument_list pos:start="245:15" pos:end="245:57">(<argument pos:start="245:16" pos:end="245:25"><expr pos:start="245:16" pos:end="245:25"><name pos:start="245:16" pos:end="245:25">label1_ptr</name></expr></argument>, <argument pos:start="245:28" pos:end="245:56"><expr pos:start="245:28" pos:end="245:56"><operator pos:start="245:28" pos:end="245:28">(</operator><name pos:start="245:29" pos:end="245:43">tcg_target_long</name><operator pos:start="245:44" pos:end="245:44">)</operator> <name pos:start="245:46" pos:end="245:56"><name pos:start="245:46" pos:end="245:46">s</name><operator pos:start="245:47" pos:end="245:48">-&gt;</operator><name pos:start="245:49" pos:end="245:56">code_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="249:5" pos:end="251:84"><expr pos:start="249:5" pos:end="251:83"><call pos:start="249:5" pos:end="251:83"><name pos:start="249:5" pos:end="249:19">tcg_out_opc_imm</name><argument_list pos:start="249:20" pos:end="251:83">(<argument pos:start="249:21" pos:end="249:21"><expr pos:start="249:21" pos:end="249:21"><name pos:start="249:21" pos:end="249:21">s</name></expr></argument>, <argument pos:start="249:24" pos:end="249:29"><expr pos:start="249:24" pos:end="249:29"><name pos:start="249:24" pos:end="249:29">OPC_LW</name></expr></argument>, <argument pos:start="249:32" pos:end="249:41"><expr pos:start="249:32" pos:end="249:41"><name pos:start="249:32" pos:end="249:41">TCG_REG_A0</name></expr></argument>, <argument pos:start="249:44" pos:end="249:53"><expr pos:start="249:44" pos:end="249:53"><name pos:start="249:44" pos:end="249:53">TCG_REG_A0</name></expr></argument>,

                    <argument pos:start="251:21" pos:end="251:82"><expr pos:start="251:21" pos:end="251:82"><call pos:start="251:21" pos:end="251:70"><name pos:start="251:21" pos:end="251:28">offsetof</name><argument_list pos:start="251:29" pos:end="251:70">(<argument pos:start="251:30" pos:end="251:37"><expr pos:start="251:30" pos:end="251:37"><name pos:start="251:30" pos:end="251:37">CPUState</name></expr></argument>, <argument pos:start="251:40" pos:end="251:69"><expr pos:start="251:40" pos:end="251:69"><name pos:start="251:40" pos:end="251:62"><name pos:start="251:40" pos:end="251:48">tlb_table</name><index pos:start="251:49" pos:end="251:59">[<expr pos:start="251:50" pos:end="251:58"><name pos:start="251:50" pos:end="251:58">mem_index</name></expr>]</index><index pos:start="251:60" pos:end="251:62">[<expr pos:start="251:61" pos:end="251:61"><literal type="number" pos:start="251:61" pos:end="251:61">0</literal></expr>]</index></name><operator pos:start="251:63" pos:end="251:63">.</operator><name pos:start="251:64" pos:end="251:69">addend</name></expr></argument>)</argument_list></call> <operator pos:start="251:72" pos:end="251:72">+</operator> <name pos:start="251:74" pos:end="251:82">addr_meml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="253:5" pos:end="256:0"><expr pos:start="253:5" pos:end="253:67"><call pos:start="253:5" pos:end="253:67"><name pos:start="253:5" pos:end="253:19">tcg_out_opc_reg</name><argument_list pos:start="253:20" pos:end="253:67">(<argument pos:start="253:21" pos:end="253:21"><expr pos:start="253:21" pos:end="253:21"><name pos:start="253:21" pos:end="253:21">s</name></expr></argument>, <argument pos:start="253:24" pos:end="253:31"><expr pos:start="253:24" pos:end="253:31"><name pos:start="253:24" pos:end="253:31">OPC_ADDU</name></expr></argument>, <argument pos:start="253:34" pos:end="253:43"><expr pos:start="253:34" pos:end="253:43"><name pos:start="253:34" pos:end="253:43">TCG_REG_A0</name></expr></argument>, <argument pos:start="253:46" pos:end="253:55"><expr pos:start="253:46" pos:end="253:55"><name pos:start="253:46" pos:end="253:55">TCG_REG_A0</name></expr></argument>, <argument pos:start="253:58" pos:end="253:66"><expr pos:start="253:58" pos:end="253:66"><name pos:start="253:58" pos:end="253:66">addr_regl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="255:1" pos:end="255:5">#<cpp:directive pos:start="255:2" pos:end="255:5">else</cpp:directive></cpp:else>

    <if_stmt pos:start="257:5" pos:end="272:0"><if pos:start="257:5" pos:end="261:5">if <condition pos:start="257:8" pos:end="257:42">(<expr pos:start="257:9" pos:end="257:41"><name pos:start="257:9" pos:end="257:18">GUEST_BASE</name> <operator pos:start="257:20" pos:end="257:21">==</operator> <operator pos:start="257:23" pos:end="257:23">(</operator><name pos:start="257:24" pos:end="257:30">int16_t</name><operator pos:start="257:31" pos:end="257:31">)</operator><name pos:start="257:32" pos:end="257:41">GUEST_BASE</name></expr>)</condition> <block pos:start="257:44" pos:end="261:5">{<block_content pos:start="259:9" pos:end="259:73">

        <expr_stmt pos:start="259:9" pos:end="259:73"><expr pos:start="259:9" pos:end="259:72"><call pos:start="259:9" pos:end="259:72"><name pos:start="259:9" pos:end="259:23">tcg_out_opc_imm</name><argument_list pos:start="259:24" pos:end="259:72">(<argument pos:start="259:25" pos:end="259:25"><expr pos:start="259:25" pos:end="259:25"><name pos:start="259:25" pos:end="259:25">s</name></expr></argument>, <argument pos:start="259:28" pos:end="259:36"><expr pos:start="259:28" pos:end="259:36"><name pos:start="259:28" pos:end="259:36">OPC_ADDIU</name></expr></argument>, <argument pos:start="259:39" pos:end="259:48"><expr pos:start="259:39" pos:end="259:48"><name pos:start="259:39" pos:end="259:48">TCG_REG_A0</name></expr></argument>, <argument pos:start="259:51" pos:end="259:59"><expr pos:start="259:51" pos:end="259:59"><name pos:start="259:51" pos:end="259:59">addr_reg1</name></expr></argument>, <argument pos:start="259:62" pos:end="259:71"><expr pos:start="259:62" pos:end="259:71"><name pos:start="259:62" pos:end="259:71">GUEST_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="261:7" pos:end="272:0">else <block pos:start="261:12" pos:end="272:0">{<block_content pos:start="263:9" pos:end="265:72">

        <expr_stmt pos:start="263:9" pos:end="263:62"><expr pos:start="263:9" pos:end="263:61"><call pos:start="263:9" pos:end="263:61"><name pos:start="263:9" pos:end="263:20">tcg_out_movi</name><argument_list pos:start="263:21" pos:end="263:61">(<argument pos:start="263:22" pos:end="263:22"><expr pos:start="263:22" pos:end="263:22"><name pos:start="263:22" pos:end="263:22">s</name></expr></argument>, <argument pos:start="263:25" pos:end="263:36"><expr pos:start="263:25" pos:end="263:36"><name pos:start="263:25" pos:end="263:36">TCG_TYPE_PTR</name></expr></argument>, <argument pos:start="263:39" pos:end="263:48"><expr pos:start="263:39" pos:end="263:48"><name pos:start="263:39" pos:end="263:48">TCG_REG_A0</name></expr></argument>, <argument pos:start="263:51" pos:end="263:60"><expr pos:start="263:51" pos:end="263:60"><name pos:start="263:51" pos:end="263:60">GUEST_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="265:9" pos:end="265:72"><expr pos:start="265:9" pos:end="265:71"><call pos:start="265:9" pos:end="265:71"><name pos:start="265:9" pos:end="265:23">tcg_out_opc_reg</name><argument_list pos:start="265:24" pos:end="265:71">(<argument pos:start="265:25" pos:end="265:25"><expr pos:start="265:25" pos:end="265:25"><name pos:start="265:25" pos:end="265:25">s</name></expr></argument>, <argument pos:start="265:28" pos:end="265:35"><expr pos:start="265:28" pos:end="265:35"><name pos:start="265:28" pos:end="265:35">OPC_ADDU</name></expr></argument>, <argument pos:start="265:38" pos:end="265:47"><expr pos:start="265:38" pos:end="265:47"><name pos:start="265:38" pos:end="265:47">TCG_REG_A0</name></expr></argument>, <argument pos:start="265:50" pos:end="265:59"><expr pos:start="265:50" pos:end="265:59"><name pos:start="265:50" pos:end="265:59">TCG_REG_A0</name></expr></argument>, <argument pos:start="265:62" pos:end="265:70"><expr pos:start="265:62" pos:end="265:70"><name pos:start="265:62" pos:end="265:70">addr_reg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



<cpp:endif pos:start="271:1" pos:end="271:6">#<cpp:directive pos:start="271:2" pos:end="271:6">endif</cpp:directive></cpp:endif>



    <switch pos:start="275:5" pos:end="346:0">switch<condition pos:start="275:11" pos:end="275:15">(<expr pos:start="275:12" pos:end="275:14"><name pos:start="275:12" pos:end="275:14">opc</name></expr>)</condition> <block pos:start="275:17" pos:end="346:0">{<block_content pos:start="277:5" pos:end="339:20">

    <case pos:start="277:5" pos:end="277:11">case <expr pos:start="277:10" pos:end="277:10"><literal type="number" pos:start="277:10" pos:end="277:10">0</literal></expr>:</case>

        <expr_stmt pos:start="279:9" pos:end="279:61"><expr pos:start="279:9" pos:end="279:60"><call pos:start="279:9" pos:end="279:60"><name pos:start="279:9" pos:end="279:23">tcg_out_opc_imm</name><argument_list pos:start="279:24" pos:end="279:60">(<argument pos:start="279:25" pos:end="279:25"><expr pos:start="279:25" pos:end="279:25"><name pos:start="279:25" pos:end="279:25">s</name></expr></argument>, <argument pos:start="279:28" pos:end="279:33"><expr pos:start="279:28" pos:end="279:33"><name pos:start="279:28" pos:end="279:33">OPC_SB</name></expr></argument>, <argument pos:start="279:36" pos:end="279:44"><expr pos:start="279:36" pos:end="279:44"><name pos:start="279:36" pos:end="279:44">data_reg1</name></expr></argument>, <argument pos:start="279:47" pos:end="279:56"><expr pos:start="279:47" pos:end="279:56"><name pos:start="279:47" pos:end="279:56">TCG_REG_A0</name></expr></argument>, <argument pos:start="279:59" pos:end="279:59"><expr pos:start="279:59" pos:end="279:59"><literal type="number" pos:start="279:59" pos:end="279:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="281:9" pos:end="281:14">break;</break>

    <case pos:start="283:5" pos:end="283:11">case <expr pos:start="283:10" pos:end="283:10"><literal type="number" pos:start="283:10" pos:end="283:10">1</literal></expr>:</case>

        <if_stmt pos:start="285:9" pos:end="295:9"><if pos:start="285:9" pos:end="291:9">if <condition pos:start="285:12" pos:end="285:27">(<expr pos:start="285:13" pos:end="285:26"><name pos:start="285:13" pos:end="285:26">TCG_NEED_BSWAP</name></expr>)</condition> <block pos:start="285:29" pos:end="291:9">{<block_content pos:start="287:13" pos:end="289:66">

            <expr_stmt pos:start="287:13" pos:end="287:54"><expr pos:start="287:13" pos:end="287:53"><call pos:start="287:13" pos:end="287:53"><name pos:start="287:13" pos:end="287:27">tcg_out_bswap16</name><argument_list pos:start="287:28" pos:end="287:53">(<argument pos:start="287:29" pos:end="287:29"><expr pos:start="287:29" pos:end="287:29"><name pos:start="287:29" pos:end="287:29">s</name></expr></argument>, <argument pos:start="287:32" pos:end="287:41"><expr pos:start="287:32" pos:end="287:41"><name pos:start="287:32" pos:end="287:41">TCG_REG_T0</name></expr></argument>, <argument pos:start="287:44" pos:end="287:52"><expr pos:start="287:44" pos:end="287:52"><name pos:start="287:44" pos:end="287:52">data_reg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="289:13" pos:end="289:66"><expr pos:start="289:13" pos:end="289:65"><call pos:start="289:13" pos:end="289:65"><name pos:start="289:13" pos:end="289:27">tcg_out_opc_imm</name><argument_list pos:start="289:28" pos:end="289:65">(<argument pos:start="289:29" pos:end="289:29"><expr pos:start="289:29" pos:end="289:29"><name pos:start="289:29" pos:end="289:29">s</name></expr></argument>, <argument pos:start="289:32" pos:end="289:37"><expr pos:start="289:32" pos:end="289:37"><name pos:start="289:32" pos:end="289:37">OPC_SH</name></expr></argument>, <argument pos:start="289:40" pos:end="289:49"><expr pos:start="289:40" pos:end="289:49"><name pos:start="289:40" pos:end="289:49">TCG_REG_T0</name></expr></argument>, <argument pos:start="289:52" pos:end="289:61"><expr pos:start="289:52" pos:end="289:61"><name pos:start="289:52" pos:end="289:61">TCG_REG_A0</name></expr></argument>, <argument pos:start="289:64" pos:end="289:64"><expr pos:start="289:64" pos:end="289:64"><literal type="number" pos:start="289:64" pos:end="289:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="291:11" pos:end="295:9">else <block pos:start="291:16" pos:end="295:9">{<block_content pos:start="293:13" pos:end="293:65">

            <expr_stmt pos:start="293:13" pos:end="293:65"><expr pos:start="293:13" pos:end="293:64"><call pos:start="293:13" pos:end="293:64"><name pos:start="293:13" pos:end="293:27">tcg_out_opc_imm</name><argument_list pos:start="293:28" pos:end="293:64">(<argument pos:start="293:29" pos:end="293:29"><expr pos:start="293:29" pos:end="293:29"><name pos:start="293:29" pos:end="293:29">s</name></expr></argument>, <argument pos:start="293:32" pos:end="293:37"><expr pos:start="293:32" pos:end="293:37"><name pos:start="293:32" pos:end="293:37">OPC_SH</name></expr></argument>, <argument pos:start="293:40" pos:end="293:48"><expr pos:start="293:40" pos:end="293:48"><name pos:start="293:40" pos:end="293:48">data_reg1</name></expr></argument>, <argument pos:start="293:51" pos:end="293:60"><expr pos:start="293:51" pos:end="293:60"><name pos:start="293:51" pos:end="293:60">TCG_REG_A0</name></expr></argument>, <argument pos:start="293:63" pos:end="293:63"><expr pos:start="293:63" pos:end="293:63"><literal type="number" pos:start="293:63" pos:end="293:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="297:9" pos:end="297:14">break;</break>

    <case pos:start="299:5" pos:end="299:11">case <expr pos:start="299:10" pos:end="299:10"><literal type="number" pos:start="299:10" pos:end="299:10">2</literal></expr>:</case>

        <if_stmt pos:start="301:9" pos:end="311:9"><if pos:start="301:9" pos:end="307:9">if <condition pos:start="301:12" pos:end="301:27">(<expr pos:start="301:13" pos:end="301:26"><name pos:start="301:13" pos:end="301:26">TCG_NEED_BSWAP</name></expr>)</condition> <block pos:start="301:29" pos:end="307:9">{<block_content pos:start="303:13" pos:end="305:66">

            <expr_stmt pos:start="303:13" pos:end="303:54"><expr pos:start="303:13" pos:end="303:53"><call pos:start="303:13" pos:end="303:53"><name pos:start="303:13" pos:end="303:27">tcg_out_bswap32</name><argument_list pos:start="303:28" pos:end="303:53">(<argument pos:start="303:29" pos:end="303:29"><expr pos:start="303:29" pos:end="303:29"><name pos:start="303:29" pos:end="303:29">s</name></expr></argument>, <argument pos:start="303:32" pos:end="303:41"><expr pos:start="303:32" pos:end="303:41"><name pos:start="303:32" pos:end="303:41">TCG_REG_T0</name></expr></argument>, <argument pos:start="303:44" pos:end="303:52"><expr pos:start="303:44" pos:end="303:52"><name pos:start="303:44" pos:end="303:52">data_reg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="305:13" pos:end="305:66"><expr pos:start="305:13" pos:end="305:65"><call pos:start="305:13" pos:end="305:65"><name pos:start="305:13" pos:end="305:27">tcg_out_opc_imm</name><argument_list pos:start="305:28" pos:end="305:65">(<argument pos:start="305:29" pos:end="305:29"><expr pos:start="305:29" pos:end="305:29"><name pos:start="305:29" pos:end="305:29">s</name></expr></argument>, <argument pos:start="305:32" pos:end="305:37"><expr pos:start="305:32" pos:end="305:37"><name pos:start="305:32" pos:end="305:37">OPC_SW</name></expr></argument>, <argument pos:start="305:40" pos:end="305:49"><expr pos:start="305:40" pos:end="305:49"><name pos:start="305:40" pos:end="305:49">TCG_REG_T0</name></expr></argument>, <argument pos:start="305:52" pos:end="305:61"><expr pos:start="305:52" pos:end="305:61"><name pos:start="305:52" pos:end="305:61">TCG_REG_A0</name></expr></argument>, <argument pos:start="305:64" pos:end="305:64"><expr pos:start="305:64" pos:end="305:64"><literal type="number" pos:start="305:64" pos:end="305:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="307:11" pos:end="311:9">else <block pos:start="307:16" pos:end="311:9">{<block_content pos:start="309:13" pos:end="309:65">

            <expr_stmt pos:start="309:13" pos:end="309:65"><expr pos:start="309:13" pos:end="309:64"><call pos:start="309:13" pos:end="309:64"><name pos:start="309:13" pos:end="309:27">tcg_out_opc_imm</name><argument_list pos:start="309:28" pos:end="309:64">(<argument pos:start="309:29" pos:end="309:29"><expr pos:start="309:29" pos:end="309:29"><name pos:start="309:29" pos:end="309:29">s</name></expr></argument>, <argument pos:start="309:32" pos:end="309:37"><expr pos:start="309:32" pos:end="309:37"><name pos:start="309:32" pos:end="309:37">OPC_SW</name></expr></argument>, <argument pos:start="309:40" pos:end="309:48"><expr pos:start="309:40" pos:end="309:48"><name pos:start="309:40" pos:end="309:48">data_reg1</name></expr></argument>, <argument pos:start="309:51" pos:end="309:60"><expr pos:start="309:51" pos:end="309:60"><name pos:start="309:51" pos:end="309:60">TCG_REG_A0</name></expr></argument>, <argument pos:start="309:63" pos:end="309:63"><expr pos:start="309:63" pos:end="309:63"><literal type="number" pos:start="309:63" pos:end="309:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="313:9" pos:end="313:14">break;</break>

    <case pos:start="315:5" pos:end="315:11">case <expr pos:start="315:10" pos:end="315:10"><literal type="number" pos:start="315:10" pos:end="315:10">3</literal></expr>:</case>

        <if_stmt pos:start="317:9" pos:end="333:9"><if pos:start="317:9" pos:end="327:9">if <condition pos:start="317:12" pos:end="317:27">(<expr pos:start="317:13" pos:end="317:26"><name pos:start="317:13" pos:end="317:26">TCG_NEED_BSWAP</name></expr>)</condition> <block pos:start="317:29" pos:end="327:9">{<block_content pos:start="319:13" pos:end="325:66">

            <expr_stmt pos:start="319:13" pos:end="319:54"><expr pos:start="319:13" pos:end="319:53"><call pos:start="319:13" pos:end="319:53"><name pos:start="319:13" pos:end="319:27">tcg_out_bswap32</name><argument_list pos:start="319:28" pos:end="319:53">(<argument pos:start="319:29" pos:end="319:29"><expr pos:start="319:29" pos:end="319:29"><name pos:start="319:29" pos:end="319:29">s</name></expr></argument>, <argument pos:start="319:32" pos:end="319:41"><expr pos:start="319:32" pos:end="319:41"><name pos:start="319:32" pos:end="319:41">TCG_REG_T0</name></expr></argument>, <argument pos:start="319:44" pos:end="319:52"><expr pos:start="319:44" pos:end="319:52"><name pos:start="319:44" pos:end="319:52">data_reg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="321:13" pos:end="321:66"><expr pos:start="321:13" pos:end="321:65"><call pos:start="321:13" pos:end="321:65"><name pos:start="321:13" pos:end="321:27">tcg_out_opc_imm</name><argument_list pos:start="321:28" pos:end="321:65">(<argument pos:start="321:29" pos:end="321:29"><expr pos:start="321:29" pos:end="321:29"><name pos:start="321:29" pos:end="321:29">s</name></expr></argument>, <argument pos:start="321:32" pos:end="321:37"><expr pos:start="321:32" pos:end="321:37"><name pos:start="321:32" pos:end="321:37">OPC_SW</name></expr></argument>, <argument pos:start="321:40" pos:end="321:49"><expr pos:start="321:40" pos:end="321:49"><name pos:start="321:40" pos:end="321:49">TCG_REG_T0</name></expr></argument>, <argument pos:start="321:52" pos:end="321:61"><expr pos:start="321:52" pos:end="321:61"><name pos:start="321:52" pos:end="321:61">TCG_REG_A0</name></expr></argument>, <argument pos:start="321:64" pos:end="321:64"><expr pos:start="321:64" pos:end="321:64"><literal type="number" pos:start="321:64" pos:end="321:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="323:13" pos:end="323:54"><expr pos:start="323:13" pos:end="323:53"><call pos:start="323:13" pos:end="323:53"><name pos:start="323:13" pos:end="323:27">tcg_out_bswap32</name><argument_list pos:start="323:28" pos:end="323:53">(<argument pos:start="323:29" pos:end="323:29"><expr pos:start="323:29" pos:end="323:29"><name pos:start="323:29" pos:end="323:29">s</name></expr></argument>, <argument pos:start="323:32" pos:end="323:41"><expr pos:start="323:32" pos:end="323:41"><name pos:start="323:32" pos:end="323:41">TCG_REG_T0</name></expr></argument>, <argument pos:start="323:44" pos:end="323:52"><expr pos:start="323:44" pos:end="323:52"><name pos:start="323:44" pos:end="323:52">data_reg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="325:13" pos:end="325:66"><expr pos:start="325:13" pos:end="325:65"><call pos:start="325:13" pos:end="325:65"><name pos:start="325:13" pos:end="325:27">tcg_out_opc_imm</name><argument_list pos:start="325:28" pos:end="325:65">(<argument pos:start="325:29" pos:end="325:29"><expr pos:start="325:29" pos:end="325:29"><name pos:start="325:29" pos:end="325:29">s</name></expr></argument>, <argument pos:start="325:32" pos:end="325:37"><expr pos:start="325:32" pos:end="325:37"><name pos:start="325:32" pos:end="325:37">OPC_SW</name></expr></argument>, <argument pos:start="325:40" pos:end="325:49"><expr pos:start="325:40" pos:end="325:49"><name pos:start="325:40" pos:end="325:49">TCG_REG_T0</name></expr></argument>, <argument pos:start="325:52" pos:end="325:61"><expr pos:start="325:52" pos:end="325:61"><name pos:start="325:52" pos:end="325:61">TCG_REG_A0</name></expr></argument>, <argument pos:start="325:64" pos:end="325:64"><expr pos:start="325:64" pos:end="325:64"><literal type="number" pos:start="325:64" pos:end="325:64">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="327:11" pos:end="333:9">else <block pos:start="327:16" pos:end="333:9">{<block_content pos:start="329:13" pos:end="331:65">

            <expr_stmt pos:start="329:13" pos:end="329:65"><expr pos:start="329:13" pos:end="329:64"><call pos:start="329:13" pos:end="329:64"><name pos:start="329:13" pos:end="329:27">tcg_out_opc_imm</name><argument_list pos:start="329:28" pos:end="329:64">(<argument pos:start="329:29" pos:end="329:29"><expr pos:start="329:29" pos:end="329:29"><name pos:start="329:29" pos:end="329:29">s</name></expr></argument>, <argument pos:start="329:32" pos:end="329:37"><expr pos:start="329:32" pos:end="329:37"><name pos:start="329:32" pos:end="329:37">OPC_SW</name></expr></argument>, <argument pos:start="329:40" pos:end="329:48"><expr pos:start="329:40" pos:end="329:48"><name pos:start="329:40" pos:end="329:48">data_reg1</name></expr></argument>, <argument pos:start="329:51" pos:end="329:60"><expr pos:start="329:51" pos:end="329:60"><name pos:start="329:51" pos:end="329:60">TCG_REG_A0</name></expr></argument>, <argument pos:start="329:63" pos:end="329:63"><expr pos:start="329:63" pos:end="329:63"><literal type="number" pos:start="329:63" pos:end="329:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="331:13" pos:end="331:65"><expr pos:start="331:13" pos:end="331:64"><call pos:start="331:13" pos:end="331:64"><name pos:start="331:13" pos:end="331:27">tcg_out_opc_imm</name><argument_list pos:start="331:28" pos:end="331:64">(<argument pos:start="331:29" pos:end="331:29"><expr pos:start="331:29" pos:end="331:29"><name pos:start="331:29" pos:end="331:29">s</name></expr></argument>, <argument pos:start="331:32" pos:end="331:37"><expr pos:start="331:32" pos:end="331:37"><name pos:start="331:32" pos:end="331:37">OPC_SW</name></expr></argument>, <argument pos:start="331:40" pos:end="331:48"><expr pos:start="331:40" pos:end="331:48"><name pos:start="331:40" pos:end="331:48">data_reg2</name></expr></argument>, <argument pos:start="331:51" pos:end="331:60"><expr pos:start="331:51" pos:end="331:60"><name pos:start="331:51" pos:end="331:60">TCG_REG_A0</name></expr></argument>, <argument pos:start="331:63" pos:end="331:63"><expr pos:start="331:63" pos:end="331:63"><literal type="number" pos:start="331:63" pos:end="331:63">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="335:9" pos:end="335:14">break;</break>

    <default pos:start="337:5" pos:end="337:12">default:</default>

        <expr_stmt pos:start="339:9" pos:end="339:20"><expr pos:start="339:9" pos:end="339:19"><call pos:start="339:9" pos:end="339:19"><name pos:start="339:9" pos:end="339:17">tcg_abort</name><argument_list pos:start="339:18" pos:end="339:19">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



<cpp:if pos:start="345:1" pos:end="345:27">#<cpp:directive pos:start="345:2" pos:end="345:3">if</cpp:directive> <expr pos:start="345:5" pos:end="345:27"><call pos:start="345:5" pos:end="345:27"><name pos:start="345:5" pos:end="345:11">defined</name><argument_list pos:start="345:12" pos:end="345:27">(<argument pos:start="345:13" pos:end="345:26"><expr pos:start="345:13" pos:end="345:26"><name pos:start="345:13" pos:end="345:26">CONFIG_SOFTMMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="347:5" pos:end="350:0"><expr pos:start="347:5" pos:end="347:57"><call pos:start="347:5" pos:end="347:57"><name pos:start="347:5" pos:end="347:14">reloc_pc16</name><argument_list pos:start="347:15" pos:end="347:57">(<argument pos:start="347:16" pos:end="347:25"><expr pos:start="347:16" pos:end="347:25"><name pos:start="347:16" pos:end="347:25">label2_ptr</name></expr></argument>, <argument pos:start="347:28" pos:end="347:56"><expr pos:start="347:28" pos:end="347:56"><operator pos:start="347:28" pos:end="347:28">(</operator><name pos:start="347:29" pos:end="347:43">tcg_target_long</name><operator pos:start="347:44" pos:end="347:44">)</operator> <name pos:start="347:46" pos:end="347:56"><name pos:start="347:46" pos:end="347:46">s</name><operator pos:start="347:47" pos:end="347:48">-&gt;</operator><name pos:start="347:49" pos:end="347:56">code_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="349:1" pos:end="349:6">#<cpp:directive pos:start="349:2" pos:end="349:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
