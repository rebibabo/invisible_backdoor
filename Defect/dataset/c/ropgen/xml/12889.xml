<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12889.c" pos:tabs="8"><function pos:start="1:1" pos:end="211:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:26">gen_intermediate_code</name><parameter_list pos:start="1:27" pos:end="1:74">(<parameter pos:start="1:28" pos:end="1:44"><decl pos:start="1:28" pos:end="1:44"><type pos:start="1:28" pos:end="1:44"><name pos:start="1:28" pos:end="1:38">CPUSH4State</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type> <name pos:start="1:42" pos:end="1:44">env</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:73"><decl pos:start="1:47" pos:end="1:73"><type pos:start="1:47" pos:end="1:73"><name pos:start="1:47" pos:end="1:69"><name pos:start="1:47" pos:end="1:52">struct</name> <name pos:start="1:54" pos:end="1:69">TranslationBlock</name></name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:73">tb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="211:1">{<block_content pos:start="5:5" pos:end="210:0">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">SuperHCPU</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:18">cpu</name> <init pos:start="5:20" pos:end="5:40">= <expr pos:start="5:22" pos:end="5:40"><call pos:start="5:22" pos:end="5:40"><name pos:start="5:22" pos:end="5:35">sh_env_get_cpu</name><argument_list pos:start="5:36" pos:end="5:40">(<argument pos:start="5:37" pos:end="5:39"><expr pos:start="5:37" pos:end="5:39"><name pos:start="5:37" pos:end="5:39">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">cs</name> <init pos:start="7:18" pos:end="7:27">= <expr pos:start="7:20" pos:end="7:27"><call pos:start="7:20" pos:end="7:27"><name pos:start="7:20" pos:end="7:22">CPU</name><argument_list pos:start="7:23" pos:end="7:27">(<argument pos:start="7:24" pos:end="7:26"><expr pos:start="7:24" pos:end="7:26"><name pos:start="7:24" pos:end="7:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">DisasContext</name></type> <name pos:start="9:18" pos:end="9:20">ctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16">target_ulong</name></type> <name pos:start="11:18" pos:end="11:25">pc_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:17">num_insns</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">max_insns</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:22"><expr pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:12">pc_start</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <name pos:start="19:16" pos:end="19:21"><name pos:start="19:16" pos:end="19:17">tb</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:21">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:22"><expr pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:7">ctx</name><operator pos:start="21:8" pos:end="21:8">.</operator><name pos:start="21:9" pos:end="21:10">pc</name></name> <operator pos:start="21:12" pos:end="21:12">=</operator> <name pos:start="21:14" pos:end="21:21">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:38"><expr pos:start="23:5" pos:end="23:37"><name pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:7">ctx</name><operator pos:start="23:8" pos:end="23:8">.</operator><name pos:start="23:9" pos:end="23:15">tbflags</name></name> <operator pos:start="23:17" pos:end="23:17">=</operator> <operator pos:start="23:19" pos:end="23:19">(</operator><name pos:start="23:20" pos:end="23:27">uint32_t</name><operator pos:start="23:28" pos:end="23:28">)</operator><name pos:start="23:29" pos:end="23:37"><name pos:start="23:29" pos:end="23:30">tb</name><operator pos:start="23:31" pos:end="23:32">-&gt;</operator><name pos:start="23:33" pos:end="23:37">flags</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:47"><expr pos:start="25:5" pos:end="25:46"><name pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:7">ctx</name><operator pos:start="25:8" pos:end="25:8">.</operator><name pos:start="25:9" pos:end="25:16">envflags</name></name> <operator pos:start="25:18" pos:end="25:18">=</operator> <name pos:start="25:20" pos:end="25:28"><name pos:start="25:20" pos:end="25:21">tb</name><operator pos:start="25:22" pos:end="25:23">-&gt;</operator><name pos:start="25:24" pos:end="25:28">flags</name></name> <operator pos:start="25:30" pos:end="25:30">&amp;</operator> <name pos:start="25:32" pos:end="25:46">DELAY_SLOT_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:25"><expr pos:start="27:5" pos:end="27:24"><name pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:7">ctx</name><operator pos:start="27:8" pos:end="27:8">.</operator><name pos:start="27:9" pos:end="27:14">bstate</name></name> <operator pos:start="27:16" pos:end="27:16">=</operator> <name pos:start="27:18" pos:end="27:24">BS_NONE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:60"><expr pos:start="29:5" pos:end="29:59"><name pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:7">ctx</name><operator pos:start="29:8" pos:end="29:8">.</operator><name pos:start="29:9" pos:end="29:14">memidx</name></name> <operator pos:start="29:16" pos:end="29:16">=</operator> <ternary pos:start="29:18" pos:end="29:59"><condition pos:start="29:18" pos:end="29:53"><expr pos:start="29:18" pos:end="29:51"><operator pos:start="29:18" pos:end="29:18">(</operator><name pos:start="29:19" pos:end="29:29"><name pos:start="29:19" pos:end="29:21">ctx</name><operator pos:start="29:22" pos:end="29:22">.</operator><name pos:start="29:23" pos:end="29:29">tbflags</name></name> <operator pos:start="29:31" pos:end="29:31">&amp;</operator> <operator pos:start="29:33" pos:end="29:33">(</operator><literal type="number" pos:start="29:34" pos:end="29:35">1u</literal> <operator pos:start="29:37" pos:end="29:38">&lt;&lt;</operator> <name pos:start="29:40" pos:end="29:44">SR_MD</name><operator pos:start="29:45" pos:end="29:45">)</operator><operator pos:start="29:46" pos:end="29:46">)</operator> <operator pos:start="29:48" pos:end="29:49">==</operator> <literal type="number" pos:start="29:51" pos:end="29:51">0</literal></expr> ?</condition><then pos:start="29:55" pos:end="29:55"> <expr pos:start="29:55" pos:end="29:55"><literal type="number" pos:start="29:55" pos:end="29:55">1</literal></expr> </then><else pos:start="29:57" pos:end="29:59">: <expr pos:start="29:59" pos:end="29:59"><literal type="number" pos:start="29:59" pos:end="29:59">0</literal></expr></else></ternary></expr>;</expr_stmt>

    <comment type="block" pos:start="31:5" pos:end="33:44">/* We don't know if the delayed pc came from a dynamic or static branch,

       so assume it is a dynamic branch.  */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:24"><expr pos:start="35:5" pos:end="35:23"><name pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:7">ctx</name><operator pos:start="35:8" pos:end="35:8">.</operator><name pos:start="35:9" pos:end="35:18">delayed_pc</name></name> <operator pos:start="35:20" pos:end="35:20">=</operator> <operator pos:start="35:22" pos:end="35:22">-</operator><literal type="number" pos:start="35:23" pos:end="35:23">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="35:26" pos:end="35:62">/* use delayed pc from env pointer */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:16"><expr pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:10"><name pos:start="37:5" pos:end="37:7">ctx</name><operator pos:start="37:8" pos:end="37:8">.</operator><name pos:start="37:9" pos:end="37:10">tb</name></name> <operator pos:start="37:12" pos:end="37:12">=</operator> <name pos:start="37:14" pos:end="37:15">tb</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:52"><expr pos:start="39:5" pos:end="39:51"><name pos:start="39:5" pos:end="39:26"><name pos:start="39:5" pos:end="39:7">ctx</name><operator pos:start="39:8" pos:end="39:8">.</operator><name pos:start="39:9" pos:end="39:26">singlestep_enabled</name></name> <operator pos:start="39:28" pos:end="39:28">=</operator> <name pos:start="39:30" pos:end="39:51"><name pos:start="39:30" pos:end="39:31">cs</name><operator pos:start="39:32" pos:end="39:33">-&gt;</operator><name pos:start="39:34" pos:end="39:51">singlestep_enabled</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:33"><expr pos:start="41:5" pos:end="41:32"><name pos:start="41:5" pos:end="41:16"><name pos:start="41:5" pos:end="41:7">ctx</name><operator pos:start="41:8" pos:end="41:8">.</operator><name pos:start="41:9" pos:end="41:16">features</name></name> <operator pos:start="41:18" pos:end="41:18">=</operator> <name pos:start="41:20" pos:end="41:32"><name pos:start="41:20" pos:end="41:22">env</name><operator pos:start="41:23" pos:end="41:24">-&gt;</operator><name pos:start="41:25" pos:end="41:32">features</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:59"><expr pos:start="43:5" pos:end="43:58"><name pos:start="43:5" pos:end="43:18"><name pos:start="43:5" pos:end="43:7">ctx</name><operator pos:start="43:8" pos:end="43:8">.</operator><name pos:start="43:9" pos:end="43:18">has_movcal</name></name> <operator pos:start="43:20" pos:end="43:20">=</operator> <operator pos:start="43:22" pos:end="43:22">(</operator><name pos:start="43:23" pos:end="43:33"><name pos:start="43:23" pos:end="43:25">ctx</name><operator pos:start="43:26" pos:end="43:26">.</operator><name pos:start="43:27" pos:end="43:33">tbflags</name></name> <operator pos:start="43:35" pos:end="43:35">&amp;</operator> <name pos:start="43:37" pos:end="43:57">TB_FLAG_PENDING_MOVCA</name><operator pos:start="43:58" pos:end="43:58">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:18"><expr pos:start="47:5" pos:end="47:17"><name pos:start="47:5" pos:end="47:13">num_insns</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <literal type="number" pos:start="47:17" pos:end="47:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:43"><expr pos:start="49:5" pos:end="49:42"><name pos:start="49:5" pos:end="49:13">max_insns</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <name pos:start="49:17" pos:end="49:26"><name pos:start="49:17" pos:end="49:18">tb</name><operator pos:start="49:19" pos:end="49:20">-&gt;</operator><name pos:start="49:21" pos:end="49:26">cflags</name></name> <operator pos:start="49:28" pos:end="49:28">&amp;</operator> <name pos:start="49:30" pos:end="49:42">CF_COUNT_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:23">(<expr pos:start="51:9" pos:end="51:22"><name pos:start="51:9" pos:end="51:17">max_insns</name> <operator pos:start="51:19" pos:end="51:20">==</operator> <literal type="number" pos:start="51:22" pos:end="51:22">0</literal></expr>)</condition> <block pos:start="51:25" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:34">

        <expr_stmt pos:start="53:9" pos:end="53:34"><expr pos:start="53:9" pos:end="53:33"><name pos:start="53:9" pos:end="53:17">max_insns</name> <operator pos:start="53:19" pos:end="53:19">=</operator> <name pos:start="53:21" pos:end="53:33">CF_COUNT_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:34">(<expr pos:start="57:9" pos:end="57:33"><name pos:start="57:9" pos:end="57:17">max_insns</name> <operator pos:start="57:19" pos:end="57:19">&gt;</operator> <name pos:start="57:21" pos:end="57:33">TCG_MAX_INSNS</name></expr>)</condition> <block pos:start="57:36" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:34">

        <expr_stmt pos:start="59:9" pos:end="59:34"><expr pos:start="59:9" pos:end="59:33"><name pos:start="59:9" pos:end="59:17">max_insns</name> <operator pos:start="59:19" pos:end="59:19">=</operator> <name pos:start="59:21" pos:end="59:33">TCG_MAX_INSNS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:21"><expr pos:start="65:5" pos:end="65:20"><call pos:start="65:5" pos:end="65:20"><name pos:start="65:5" pos:end="65:16">gen_tb_start</name><argument_list pos:start="65:17" pos:end="65:20">(<argument pos:start="65:18" pos:end="65:19"><expr pos:start="65:18" pos:end="65:19"><name pos:start="65:18" pos:end="65:19">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="67:5" pos:end="133:5">while <condition pos:start="67:11" pos:end="67:55">(<expr pos:start="67:12" pos:end="67:54"><name pos:start="67:12" pos:end="67:21"><name pos:start="67:12" pos:end="67:14">ctx</name><operator pos:start="67:15" pos:end="67:15">.</operator><name pos:start="67:16" pos:end="67:21">bstate</name></name> <operator pos:start="67:23" pos:end="67:24">==</operator> <name pos:start="67:26" pos:end="67:32">BS_NONE</name> <operator pos:start="67:34" pos:end="67:35">&amp;&amp;</operator> <operator pos:start="67:37" pos:end="67:37">!</operator><call pos:start="67:38" pos:end="67:54"><name pos:start="67:38" pos:end="67:52">tcg_op_buf_full</name><argument_list pos:start="67:53" pos:end="67:54">()</argument_list></call></expr>)</condition> <block pos:start="67:57" pos:end="133:5">{<block_content pos:start="69:9" pos:end="131:18">

        <expr_stmt pos:start="69:9" pos:end="69:49"><expr pos:start="69:9" pos:end="69:48"><call pos:start="69:9" pos:end="69:48"><name pos:start="69:9" pos:end="69:26">tcg_gen_insn_start</name><argument_list pos:start="69:27" pos:end="69:48">(<argument pos:start="69:28" pos:end="69:33"><expr pos:start="69:28" pos:end="69:33"><name pos:start="69:28" pos:end="69:33"><name pos:start="69:28" pos:end="69:30">ctx</name><operator pos:start="69:31" pos:end="69:31">.</operator><name pos:start="69:32" pos:end="69:33">pc</name></name></expr></argument>, <argument pos:start="69:36" pos:end="69:47"><expr pos:start="69:36" pos:end="69:47"><name pos:start="69:36" pos:end="69:47"><name pos:start="69:36" pos:end="69:38">ctx</name><operator pos:start="69:39" pos:end="69:39">.</operator><name pos:start="69:40" pos:end="69:47">envflags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:20"><expr pos:start="71:9" pos:end="71:19"><name pos:start="71:9" pos:end="71:17">num_insns</name><operator pos:start="71:18" pos:end="71:19">++</operator></expr>;</expr_stmt>



        <if_stmt pos:start="75:9" pos:end="97:9"><if pos:start="75:9" pos:end="97:9">if <condition pos:start="75:12" pos:end="75:62">(<expr pos:start="75:13" pos:end="75:61"><call pos:start="75:13" pos:end="75:61"><name pos:start="75:13" pos:end="75:20">unlikely</name><argument_list pos:start="75:21" pos:end="75:61">(<argument pos:start="75:22" pos:end="75:60"><expr pos:start="75:22" pos:end="75:60"><call pos:start="75:22" pos:end="75:60"><name pos:start="75:22" pos:end="75:40">cpu_breakpoint_test</name><argument_list pos:start="75:41" pos:end="75:60">(<argument pos:start="75:42" pos:end="75:43"><expr pos:start="75:42" pos:end="75:43"><name pos:start="75:42" pos:end="75:43">cs</name></expr></argument>, <argument pos:start="75:46" pos:end="75:51"><expr pos:start="75:46" pos:end="75:51"><name pos:start="75:46" pos:end="75:51"><name pos:start="75:46" pos:end="75:48">ctx</name><operator pos:start="75:49" pos:end="75:49">.</operator><name pos:start="75:50" pos:end="75:51">pc</name></name></expr></argument>, <argument pos:start="75:54" pos:end="75:59"><expr pos:start="75:54" pos:end="75:59"><name pos:start="75:54" pos:end="75:59">BP_ANY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:64" pos:end="97:9">{<block_content pos:start="79:13" pos:end="95:18">

            <comment type="block" pos:start="77:13" pos:end="77:71">/* We have hit a breakpoint - make sure PC is up-to-date */</comment>

            <expr_stmt pos:start="79:13" pos:end="79:43"><expr pos:start="79:13" pos:end="79:42"><call pos:start="79:13" pos:end="79:42"><name pos:start="79:13" pos:end="79:30">gen_save_cpu_state</name><argument_list pos:start="79:31" pos:end="79:42">(<argument pos:start="79:32" pos:end="79:35"><expr pos:start="79:32" pos:end="79:35"><operator pos:start="79:32" pos:end="79:32">&amp;</operator><name pos:start="79:33" pos:end="79:35">ctx</name></expr></argument>, <argument pos:start="79:38" pos:end="79:41"><expr pos:start="79:38" pos:end="79:41"><name pos:start="79:38" pos:end="79:41">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:38"><expr pos:start="81:13" pos:end="81:37"><call pos:start="81:13" pos:end="81:37"><name pos:start="81:13" pos:end="81:28">gen_helper_debug</name><argument_list pos:start="81:29" pos:end="81:37">(<argument pos:start="81:30" pos:end="81:36"><expr pos:start="81:30" pos:end="81:36"><name pos:start="81:30" pos:end="81:36">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:33"><expr pos:start="83:13" pos:end="83:32"><name pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:15">ctx</name><operator pos:start="83:16" pos:end="83:16">.</operator><name pos:start="83:17" pos:end="83:22">bstate</name></name> <operator pos:start="83:24" pos:end="83:24">=</operator> <name pos:start="83:26" pos:end="83:32">BS_EXCP</name></expr>;</expr_stmt>

            <comment type="block" pos:start="85:13" pos:end="91:73">/* The address covered by the breakpoint must be included in

               [tb-&gt;pc, tb-&gt;pc + tb-&gt;size) in order to for it to be

               properly cleared -- thus we increment the PC here so that

               the logic setting tb-&gt;size below does the right thing.  */</comment>

            <expr_stmt pos:start="93:13" pos:end="93:24"><expr pos:start="93:13" pos:end="93:23"><name pos:start="93:13" pos:end="93:18"><name pos:start="93:13" pos:end="93:15">ctx</name><operator pos:start="93:16" pos:end="93:16">.</operator><name pos:start="93:17" pos:end="93:18">pc</name></name> <operator pos:start="93:20" pos:end="93:21">+=</operator> <literal type="number" pos:start="93:23" pos:end="93:23">2</literal></expr>;</expr_stmt>

            <break pos:start="95:13" pos:end="95:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="101:9" pos:end="105:9"><if pos:start="101:9" pos:end="105:9">if <condition pos:start="101:12" pos:end="101:64">(<expr pos:start="101:13" pos:end="101:63"><name pos:start="101:13" pos:end="101:21">num_insns</name> <operator pos:start="101:23" pos:end="101:24">==</operator> <name pos:start="101:26" pos:end="101:34">max_insns</name> <operator pos:start="101:36" pos:end="101:37">&amp;&amp;</operator> <operator pos:start="101:39" pos:end="101:39">(</operator><name pos:start="101:40" pos:end="101:49"><name pos:start="101:40" pos:end="101:41">tb</name><operator pos:start="101:42" pos:end="101:43">-&gt;</operator><name pos:start="101:44" pos:end="101:49">cflags</name></name> <operator pos:start="101:51" pos:end="101:51">&amp;</operator> <name pos:start="101:53" pos:end="101:62">CF_LAST_IO</name><operator pos:start="101:63" pos:end="101:63">)</operator></expr>)</condition> <block pos:start="101:66" pos:end="105:9">{<block_content pos:start="103:13" pos:end="103:27">

            <expr_stmt pos:start="103:13" pos:end="103:27"><expr pos:start="103:13" pos:end="103:26"><call pos:start="103:13" pos:end="103:26"><name pos:start="103:13" pos:end="103:24">gen_io_start</name><argument_list pos:start="103:25" pos:end="103:26">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="109:9" pos:end="109:48"><expr pos:start="109:9" pos:end="109:47"><name pos:start="109:9" pos:end="109:18"><name pos:start="109:9" pos:end="109:11">ctx</name><operator pos:start="109:12" pos:end="109:12">.</operator><name pos:start="109:13" pos:end="109:18">opcode</name></name> <operator pos:start="109:20" pos:end="109:20">=</operator> <call pos:start="109:22" pos:end="109:47"><name pos:start="109:22" pos:end="109:34">cpu_lduw_code</name><argument_list pos:start="109:35" pos:end="109:47">(<argument pos:start="109:36" pos:end="109:38"><expr pos:start="109:36" pos:end="109:38"><name pos:start="109:36" pos:end="109:38">env</name></expr></argument>, <argument pos:start="109:41" pos:end="109:46"><expr pos:start="109:41" pos:end="109:46"><name pos:start="109:41" pos:end="109:46"><name pos:start="109:41" pos:end="109:43">ctx</name><operator pos:start="109:44" pos:end="109:44">.</operator><name pos:start="109:45" pos:end="109:46">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="111:9" pos:end="111:25"><expr pos:start="111:9" pos:end="111:24"><call pos:start="111:9" pos:end="111:24"><name pos:start="111:9" pos:end="111:18">decode_opc</name><argument_list pos:start="111:19" pos:end="111:24">(<argument pos:start="111:20" pos:end="111:23"><expr pos:start="111:20" pos:end="111:23"><operator pos:start="111:20" pos:end="111:20">&amp;</operator><name pos:start="111:21" pos:end="111:23">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="113:9" pos:end="113:20"><expr pos:start="113:9" pos:end="113:19"><name pos:start="113:9" pos:end="113:14"><name pos:start="113:9" pos:end="113:11">ctx</name><operator pos:start="113:12" pos:end="113:12">.</operator><name pos:start="113:13" pos:end="113:14">pc</name></name> <operator pos:start="113:16" pos:end="113:17">+=</operator> <literal type="number" pos:start="113:19" pos:end="113:19">2</literal></expr>;</expr_stmt>

	<if_stmt pos:start="115:9" pos:end="117:18"><if pos:start="115:9" pos:end="117:18">if <condition pos:start="115:12" pos:end="115:51">(<expr pos:start="115:13" pos:end="115:50"><operator pos:start="115:13" pos:end="115:13">(</operator><name pos:start="115:14" pos:end="115:19"><name pos:start="115:14" pos:end="115:16">ctx</name><operator pos:start="115:17" pos:end="115:17">.</operator><name pos:start="115:18" pos:end="115:19">pc</name></name> <operator pos:start="115:21" pos:end="115:21">&amp;</operator> <operator pos:start="115:23" pos:end="115:23">(</operator><name pos:start="115:24" pos:end="115:39">TARGET_PAGE_SIZE</name> <operator pos:start="115:41" pos:end="115:41">-</operator> <literal type="number" pos:start="115:43" pos:end="115:43">1</literal><operator pos:start="115:44" pos:end="115:44">)</operator><operator pos:start="115:45" pos:end="115:45">)</operator> <operator pos:start="115:47" pos:end="115:48">==</operator> <literal type="number" pos:start="115:50" pos:end="115:50">0</literal></expr>)</condition><block type="pseudo" pos:start="117:13" pos:end="117:18"><block_content pos:start="117:13" pos:end="117:18">

	    <break pos:start="117:13" pos:end="117:18">break;</break></block_content></block></if></if_stmt>

        <if_stmt pos:start="119:9" pos:end="123:9"><if pos:start="119:9" pos:end="123:9">if <condition pos:start="119:12" pos:end="119:35">(<expr pos:start="119:13" pos:end="119:34"><name pos:start="119:13" pos:end="119:34"><name pos:start="119:13" pos:end="119:14">cs</name><operator pos:start="119:15" pos:end="119:16">-&gt;</operator><name pos:start="119:17" pos:end="119:34">singlestep_enabled</name></name></expr>)</condition> <block pos:start="119:37" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:18">

	    <break pos:start="121:13" pos:end="121:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="125:9" pos:end="127:18"><if pos:start="125:9" pos:end="127:18">if <condition pos:start="125:12" pos:end="125:35">(<expr pos:start="125:13" pos:end="125:34"><name pos:start="125:13" pos:end="125:21">num_insns</name> <operator pos:start="125:23" pos:end="125:24">&gt;=</operator> <name pos:start="125:26" pos:end="125:34">max_insns</name></expr>)</condition><block type="pseudo" pos:start="127:13" pos:end="127:18"><block_content pos:start="127:13" pos:end="127:18">

            <break pos:start="127:13" pos:end="127:18">break;</break></block_content></block></if></if_stmt>

        <if_stmt pos:start="129:9" pos:end="131:18"><if pos:start="129:9" pos:end="131:18">if <condition pos:start="129:12" pos:end="129:23">(<expr pos:start="129:13" pos:end="129:22"><name pos:start="129:13" pos:end="129:22">singlestep</name></expr>)</condition><block type="pseudo" pos:start="131:13" pos:end="131:18"><block_content pos:start="131:13" pos:end="131:18">

            <break pos:start="131:13" pos:end="131:18">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="135:5" pos:end="137:21"><if pos:start="135:5" pos:end="137:21">if <condition pos:start="135:8" pos:end="135:32">(<expr pos:start="135:9" pos:end="135:31"><name pos:start="135:9" pos:end="135:18"><name pos:start="135:9" pos:end="135:10">tb</name><operator pos:start="135:11" pos:end="135:12">-&gt;</operator><name pos:start="135:13" pos:end="135:18">cflags</name></name> <operator pos:start="135:20" pos:end="135:20">&amp;</operator> <name pos:start="135:22" pos:end="135:31">CF_LAST_IO</name></expr>)</condition><block type="pseudo" pos:start="137:9" pos:end="137:21"><block_content pos:start="137:9" pos:end="137:21">

        <expr_stmt pos:start="137:9" pos:end="137:21"><expr pos:start="137:9" pos:end="137:20"><call pos:start="137:9" pos:end="137:20"><name pos:start="137:9" pos:end="137:18">gen_io_end</name><argument_list pos:start="137:19" pos:end="137:20">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="139:5" pos:end="177:5"><if pos:start="139:5" pos:end="145:5">if <condition pos:start="139:8" pos:end="139:31">(<expr pos:start="139:9" pos:end="139:30"><name pos:start="139:9" pos:end="139:30"><name pos:start="139:9" pos:end="139:10">cs</name><operator pos:start="139:11" pos:end="139:12">-&gt;</operator><name pos:start="139:13" pos:end="139:30">singlestep_enabled</name></name></expr>)</condition> <block pos:start="139:33" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:34">

        <expr_stmt pos:start="141:9" pos:end="141:39"><expr pos:start="141:9" pos:end="141:38"><call pos:start="141:9" pos:end="141:38"><name pos:start="141:9" pos:end="141:26">gen_save_cpu_state</name><argument_list pos:start="141:27" pos:end="141:38">(<argument pos:start="141:28" pos:end="141:31"><expr pos:start="141:28" pos:end="141:31"><operator pos:start="141:28" pos:end="141:28">&amp;</operator><name pos:start="141:29" pos:end="141:31">ctx</name></expr></argument>, <argument pos:start="141:34" pos:end="141:37"><expr pos:start="141:34" pos:end="141:37"><name pos:start="141:34" pos:end="141:37">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:34"><expr pos:start="143:9" pos:end="143:33"><call pos:start="143:9" pos:end="143:33"><name pos:start="143:9" pos:end="143:24">gen_helper_debug</name><argument_list pos:start="143:25" pos:end="143:33">(<argument pos:start="143:26" pos:end="143:32"><expr pos:start="143:26" pos:end="143:32"><name pos:start="143:26" pos:end="143:32">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="145:7" pos:end="177:5">else <block pos:start="145:12" pos:end="177:5">{<block_content pos:start="147:9" pos:end="175:9">

	<switch pos:start="147:9" pos:end="175:9">switch <condition pos:start="147:16" pos:end="147:27">(<expr pos:start="147:17" pos:end="147:26"><name pos:start="147:17" pos:end="147:26"><name pos:start="147:17" pos:end="147:19">ctx</name><operator pos:start="147:20" pos:end="147:20">.</operator><name pos:start="147:21" pos:end="147:26">bstate</name></name></expr>)</condition> <block pos:start="147:29" pos:end="175:9">{<block_content pos:start="149:9" pos:end="173:18">

        <case pos:start="149:9" pos:end="149:21">case <expr pos:start="149:14" pos:end="149:20"><name pos:start="149:14" pos:end="149:20">BS_STOP</name></expr>:</case>

            <expr_stmt pos:start="151:13" pos:end="151:43"><expr pos:start="151:13" pos:end="151:42"><call pos:start="151:13" pos:end="151:42"><name pos:start="151:13" pos:end="151:30">gen_save_cpu_state</name><argument_list pos:start="151:31" pos:end="151:42">(<argument pos:start="151:32" pos:end="151:35"><expr pos:start="151:32" pos:end="151:35"><operator pos:start="151:32" pos:end="151:32">&amp;</operator><name pos:start="151:33" pos:end="151:35">ctx</name></expr></argument>, <argument pos:start="151:38" pos:end="151:41"><expr pos:start="151:38" pos:end="151:41"><name pos:start="151:38" pos:end="151:41">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:31"><expr pos:start="153:13" pos:end="153:30"><call pos:start="153:13" pos:end="153:30"><name pos:start="153:13" pos:end="153:27">tcg_gen_exit_tb</name><argument_list pos:start="153:28" pos:end="153:30">(<argument pos:start="153:29" pos:end="153:29"><expr pos:start="153:29" pos:end="153:29"><literal type="number" pos:start="153:29" pos:end="153:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="155:13" pos:end="155:18">break;</break>

        <case pos:start="157:9" pos:end="157:21">case <expr pos:start="157:14" pos:end="157:20"><name pos:start="157:14" pos:end="157:20">BS_NONE</name></expr>:</case>

            <expr_stmt pos:start="159:13" pos:end="159:44"><expr pos:start="159:13" pos:end="159:43"><call pos:start="159:13" pos:end="159:43"><name pos:start="159:13" pos:end="159:30">gen_save_cpu_state</name><argument_list pos:start="159:31" pos:end="159:43">(<argument pos:start="159:32" pos:end="159:35"><expr pos:start="159:32" pos:end="159:35"><operator pos:start="159:32" pos:end="159:32">&amp;</operator><name pos:start="159:33" pos:end="159:35">ctx</name></expr></argument>, <argument pos:start="159:38" pos:end="159:42"><expr pos:start="159:38" pos:end="159:42"><name pos:start="159:38" pos:end="159:42">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:41"><expr pos:start="161:13" pos:end="161:40"><call pos:start="161:13" pos:end="161:40"><name pos:start="161:13" pos:end="161:23">gen_goto_tb</name><argument_list pos:start="161:24" pos:end="161:40">(<argument pos:start="161:25" pos:end="161:28"><expr pos:start="161:25" pos:end="161:28"><operator pos:start="161:25" pos:end="161:25">&amp;</operator><name pos:start="161:26" pos:end="161:28">ctx</name></expr></argument>, <argument pos:start="161:31" pos:end="161:31"><expr pos:start="161:31" pos:end="161:31"><literal type="number" pos:start="161:31" pos:end="161:31">0</literal></expr></argument>, <argument pos:start="161:34" pos:end="161:39"><expr pos:start="161:34" pos:end="161:39"><name pos:start="161:34" pos:end="161:39"><name pos:start="161:34" pos:end="161:36">ctx</name><operator pos:start="161:37" pos:end="161:37">.</operator><name pos:start="161:38" pos:end="161:39">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="163:13" pos:end="163:18">break;</break>

        <case pos:start="165:9" pos:end="165:21">case <expr pos:start="165:14" pos:end="165:20"><name pos:start="165:14" pos:end="165:20">BS_EXCP</name></expr>:</case>

            <comment type="block" pos:start="167:13" pos:end="167:30">/* fall through */</comment>

        <case pos:start="169:9" pos:end="169:23">case <expr pos:start="169:14" pos:end="169:22"><name pos:start="169:14" pos:end="169:22">BS_BRANCH</name></expr>:</case>

        <default pos:start="171:9" pos:end="171:16">default:</default>

            <break pos:start="173:13" pos:end="173:18">break;</break>

	</block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="181:5" pos:end="181:30"><expr pos:start="181:5" pos:end="181:29"><call pos:start="181:5" pos:end="181:29"><name pos:start="181:5" pos:end="181:14">gen_tb_end</name><argument_list pos:start="181:15" pos:end="181:29">(<argument pos:start="181:16" pos:end="181:17"><expr pos:start="181:16" pos:end="181:17"><name pos:start="181:16" pos:end="181:17">tb</name></expr></argument>, <argument pos:start="181:20" pos:end="181:28"><expr pos:start="181:20" pos:end="181:28"><name pos:start="181:20" pos:end="181:28">num_insns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="185:5" pos:end="185:33"><expr pos:start="185:5" pos:end="185:32"><name pos:start="185:5" pos:end="185:12"><name pos:start="185:5" pos:end="185:6">tb</name><operator pos:start="185:7" pos:end="185:8">-&gt;</operator><name pos:start="185:9" pos:end="185:12">size</name></name> <operator pos:start="185:14" pos:end="185:14">=</operator> <name pos:start="185:16" pos:end="185:21"><name pos:start="185:16" pos:end="185:18">ctx</name><operator pos:start="185:19" pos:end="185:19">.</operator><name pos:start="185:20" pos:end="185:21">pc</name></name> <operator pos:start="185:23" pos:end="185:23">-</operator> <name pos:start="185:25" pos:end="185:32">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="192:0"><expr pos:start="187:5" pos:end="187:26"><name pos:start="187:5" pos:end="187:14"><name pos:start="187:5" pos:end="187:6">tb</name><operator pos:start="187:7" pos:end="187:8">-&gt;</operator><name pos:start="187:9" pos:end="187:14">icount</name></name> <operator pos:start="187:16" pos:end="187:16">=</operator> <name pos:start="187:18" pos:end="187:26">num_insns</name></expr>;</expr_stmt>



<cpp:ifdef pos:start="191:1" pos:end="191:18">#<cpp:directive pos:start="191:2" pos:end="191:6">ifdef</cpp:directive> <name pos:start="191:8" pos:end="191:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="193:5" pos:end="210:0"><if pos:start="193:5" pos:end="210:0">if <condition pos:start="193:8" pos:end="195:44">(<expr pos:start="193:9" pos:end="195:43"><call pos:start="193:9" pos:end="193:45"><name pos:start="193:9" pos:end="193:26">qemu_loglevel_mask</name><argument_list pos:start="193:27" pos:end="193:45">(<argument pos:start="193:28" pos:end="193:44"><expr pos:start="193:28" pos:end="193:44"><name pos:start="193:28" pos:end="193:44">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call>

        <operator pos:start="195:9" pos:end="195:10">&amp;&amp;</operator> <call pos:start="195:12" pos:end="195:43"><name pos:start="195:12" pos:end="195:33">qemu_log_in_addr_range</name><argument_list pos:start="195:34" pos:end="195:43">(<argument pos:start="195:35" pos:end="195:42"><expr pos:start="195:35" pos:end="195:42"><name pos:start="195:35" pos:end="195:42">pc_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="195:46" pos:end="210:0">{<block_content pos:start="197:9" pos:end="205:26">

        <expr_stmt pos:start="197:9" pos:end="197:24"><expr pos:start="197:9" pos:end="197:23"><call pos:start="197:9" pos:end="197:23"><name pos:start="197:9" pos:end="197:21">qemu_log_lock</name><argument_list pos:start="197:22" pos:end="197:23">()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="199:9" pos:end="199:26"><expr pos:start="199:9" pos:end="199:25"><call pos:start="199:9" pos:end="199:25"><name pos:start="199:9" pos:end="199:16">qemu_log</name><argument_list pos:start="199:17" pos:end="199:25">(<argument pos:start="199:18" pos:end="199:24"><expr pos:start="199:18" pos:end="199:24"><literal type="string" pos:start="199:18" pos:end="199:24">"IN:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block" pos:start="199:33" pos:end="199:65">/* , lookup_symbol(pc_start)); */</comment>

        <expr_stmt pos:start="201:9" pos:end="201:61"><expr pos:start="201:9" pos:end="201:60"><call pos:start="201:9" pos:end="201:60"><name pos:start="201:9" pos:end="201:24">log_target_disas</name><argument_list pos:start="201:25" pos:end="201:60">(<argument pos:start="201:26" pos:end="201:27"><expr pos:start="201:26" pos:end="201:27"><name pos:start="201:26" pos:end="201:27">cs</name></expr></argument>, <argument pos:start="201:30" pos:end="201:37"><expr pos:start="201:30" pos:end="201:37"><name pos:start="201:30" pos:end="201:37">pc_start</name></expr></argument>, <argument pos:start="201:40" pos:end="201:56"><expr pos:start="201:40" pos:end="201:56"><name pos:start="201:40" pos:end="201:45"><name pos:start="201:40" pos:end="201:42">ctx</name><operator pos:start="201:43" pos:end="201:43">.</operator><name pos:start="201:44" pos:end="201:45">pc</name></name> <operator pos:start="201:47" pos:end="201:47">-</operator> <name pos:start="201:49" pos:end="201:56">pc_start</name></expr></argument>, <argument pos:start="201:59" pos:end="201:59"><expr pos:start="201:59" pos:end="201:59"><literal type="number" pos:start="201:59" pos:end="201:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="203:9" pos:end="203:23"><expr pos:start="203:9" pos:end="203:22"><call pos:start="203:9" pos:end="203:22"><name pos:start="203:9" pos:end="203:16">qemu_log</name><argument_list pos:start="203:17" pos:end="203:22">(<argument pos:start="203:18" pos:end="203:21"><expr pos:start="203:18" pos:end="203:21"><literal type="string" pos:start="203:18" pos:end="203:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:26"><expr pos:start="205:9" pos:end="205:25"><call pos:start="205:9" pos:end="205:25"><name pos:start="205:9" pos:end="205:23">qemu_log_unlock</name><argument_list pos:start="205:24" pos:end="205:25">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="209:1" pos:end="209:6">#<cpp:directive pos:start="209:2" pos:end="209:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
