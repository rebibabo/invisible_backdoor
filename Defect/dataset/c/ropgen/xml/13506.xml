<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13506.c" pos:tabs="8"><function pos:start="1:1" pos:end="231:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">parse_numa_opts</name><parameter_list pos:start="1:21" pos:end="1:38">(<parameter pos:start="1:22" pos:end="1:37"><decl pos:start="1:22" pos:end="1:37"><type pos:start="1:22" pos:end="1:35"><name pos:start="1:22" pos:end="1:33">MachineState</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:37">ms</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="231:1">{<block_content pos:start="5:5" pos:end="229:5">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:25"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:23">CPUArchIdList</name> <modifier pos:start="7:25" pos:end="7:25">*</modifier></type><name pos:start="7:26" pos:end="7:38">possible_cpus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:45"><decl pos:start="9:5" pos:end="9:44"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">MachineClass</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:20">mc</name> <init pos:start="9:22" pos:end="9:44">= <expr pos:start="9:24" pos:end="9:44"><call pos:start="9:24" pos:end="9:44"><name pos:start="9:24" pos:end="9:40">MACHINE_GET_CLASS</name><argument_list pos:start="9:41" pos:end="9:44">(<argument pos:start="9:42" pos:end="9:43"><expr pos:start="9:42" pos:end="9:43"><name pos:start="9:42" pos:end="9:43">ms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <for pos:start="13:5" pos:end="17:5">for <control pos:start="13:9" pos:end="13:35">(<init pos:start="13:10" pos:end="13:15"><expr pos:start="13:10" pos:end="13:14"><name pos:start="13:10" pos:end="13:10">i</name> <operator pos:start="13:12" pos:end="13:12">=</operator> <literal type="number" pos:start="13:14" pos:end="13:14">0</literal></expr>;</init> <condition pos:start="13:17" pos:end="13:30"><expr pos:start="13:17" pos:end="13:29"><name pos:start="13:17" pos:end="13:17">i</name> <operator pos:start="13:19" pos:end="13:19">&lt;</operator> <name pos:start="13:21" pos:end="13:29">MAX_NODES</name></expr>;</condition> <incr pos:start="13:32" pos:end="13:34"><expr pos:start="13:32" pos:end="13:34"><name pos:start="13:32" pos:end="13:32">i</name><operator pos:start="13:33" pos:end="13:34">++</operator></expr></incr>)</control> <block pos:start="13:37" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:53">

        <expr_stmt pos:start="15:9" pos:end="15:53"><expr pos:start="15:9" pos:end="15:52"><name pos:start="15:9" pos:end="15:20"><name pos:start="15:9" pos:end="15:17">numa_info</name><index pos:start="15:18" pos:end="15:20">[<expr pos:start="15:19" pos:end="15:19"><name pos:start="15:19" pos:end="15:19">i</name></expr>]</index></name><operator pos:start="15:21" pos:end="15:21">.</operator><name pos:start="15:22" pos:end="15:29">node_cpu</name> <operator pos:start="15:31" pos:end="15:31">=</operator> <call pos:start="15:33" pos:end="15:52"><name pos:start="15:33" pos:end="15:42">bitmap_new</name><argument_list pos:start="15:43" pos:end="15:52">(<argument pos:start="15:44" pos:end="15:51"><expr pos:start="15:44" pos:end="15:51"><name pos:start="15:44" pos:end="15:51">max_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:72">(<expr pos:start="21:9" pos:end="21:71"><call pos:start="21:9" pos:end="21:71"><name pos:start="21:9" pos:end="21:25">qemu_opts_foreach</name><argument_list pos:start="21:26" pos:end="21:71">(<argument pos:start="21:27" pos:end="21:48"><expr pos:start="21:27" pos:end="21:48"><call pos:start="21:27" pos:end="21:48"><name pos:start="21:27" pos:end="21:40">qemu_find_opts</name><argument_list pos:start="21:41" pos:end="21:48">(<argument pos:start="21:42" pos:end="21:47"><expr pos:start="21:42" pos:end="21:47"><literal type="string" pos:start="21:42" pos:end="21:47">"numa"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="21:51" pos:end="21:60"><expr pos:start="21:51" pos:end="21:60"><name pos:start="21:51" pos:end="21:60">parse_numa</name></expr></argument>, <argument pos:start="21:63" pos:end="21:64"><expr pos:start="21:63" pos:end="21:64"><name pos:start="21:63" pos:end="21:64">ms</name></expr></argument>, <argument pos:start="21:67" pos:end="21:70"><expr pos:start="21:67" pos:end="21:70"><name pos:start="21:67" pos:end="21:70">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:74" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:16">

        <expr_stmt pos:start="23:9" pos:end="23:16"><expr pos:start="23:9" pos:end="23:15"><call pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:12">exit</name><argument_list pos:start="23:13" pos:end="23:15">(<argument pos:start="23:14" pos:end="23:14"><expr pos:start="23:14" pos:end="23:14"><literal type="number" pos:start="23:14" pos:end="23:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:41"><expr pos:start="29:5" pos:end="29:40"><call pos:start="29:5" pos:end="29:40"><name pos:start="29:5" pos:end="29:10">assert</name><argument_list pos:start="29:11" pos:end="29:40">(<argument pos:start="29:12" pos:end="29:39"><expr pos:start="29:12" pos:end="29:39"><name pos:start="29:12" pos:end="29:26">max_numa_nodeid</name> <operator pos:start="29:28" pos:end="29:29">&lt;=</operator> <name pos:start="29:31" pos:end="29:39">MAX_NODES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:50">/* No support for sparse NUMA node IDs yet: */</comment>

    <for pos:start="35:5" pos:end="47:5">for <control pos:start="35:9" pos:end="35:46">(<init pos:start="35:10" pos:end="35:33"><expr pos:start="35:10" pos:end="35:32"><name pos:start="35:10" pos:end="35:10">i</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <name pos:start="35:14" pos:end="35:28">max_numa_nodeid</name> <operator pos:start="35:30" pos:end="35:30">-</operator> <literal type="number" pos:start="35:32" pos:end="35:32">1</literal></expr>;</init> <condition pos:start="35:35" pos:end="35:41"><expr pos:start="35:35" pos:end="35:40"><name pos:start="35:35" pos:end="35:35">i</name> <operator pos:start="35:37" pos:end="35:38">&gt;=</operator> <literal type="number" pos:start="35:40" pos:end="35:40">0</literal></expr>;</condition> <incr pos:start="35:43" pos:end="35:45"><expr pos:start="35:43" pos:end="35:45"><name pos:start="35:43" pos:end="35:43">i</name><operator pos:start="35:44" pos:end="35:45">--</operator></expr></incr>)</control> <block pos:start="35:48" pos:end="47:5">{<block_content pos:start="39:9" pos:end="45:9">

        <comment type="block" pos:start="37:9" pos:end="37:74">/* Report large node IDs first, to make mistakes easier to spot */</comment>

        <if_stmt pos:start="39:9" pos:end="45:9"><if pos:start="39:9" pos:end="45:9">if <condition pos:start="39:12" pos:end="39:34">(<expr pos:start="39:13" pos:end="39:33"><operator pos:start="39:13" pos:end="39:13">!</operator><name pos:start="39:14" pos:end="39:25"><name pos:start="39:14" pos:end="39:22">numa_info</name><index pos:start="39:23" pos:end="39:25">[<expr pos:start="39:24" pos:end="39:24"><name pos:start="39:24" pos:end="39:24">i</name></expr>]</index></name><operator pos:start="39:26" pos:end="39:26">.</operator><name pos:start="39:27" pos:end="39:33">present</name></expr>)</condition> <block pos:start="39:36" pos:end="45:9">{<block_content pos:start="41:13" pos:end="43:20">

            <expr_stmt pos:start="41:13" pos:end="41:57"><expr pos:start="41:13" pos:end="41:56"><call pos:start="41:13" pos:end="41:56"><name pos:start="41:13" pos:end="41:24">error_report</name><argument_list pos:start="41:25" pos:end="41:56">(<argument pos:start="41:26" pos:end="41:52"><expr pos:start="41:26" pos:end="41:52"><literal type="string" pos:start="41:26" pos:end="41:52">"numa: Node ID missing: %d"</literal></expr></argument>, <argument pos:start="41:55" pos:end="41:55"><expr pos:start="41:55" pos:end="41:55"><name pos:start="41:55" pos:end="41:55">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:20"><expr pos:start="43:13" pos:end="43:19"><call pos:start="43:13" pos:end="43:19"><name pos:start="43:13" pos:end="43:16">exit</name><argument_list pos:start="43:17" pos:end="43:19">(<argument pos:start="43:18" pos:end="43:18"><expr pos:start="43:18" pos:end="43:18"><literal type="number" pos:start="43:18" pos:end="43:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="51:5" pos:end="51:60">/* This must be always true if all nodes are present: */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:45"><expr pos:start="53:5" pos:end="53:44"><call pos:start="53:5" pos:end="53:44"><name pos:start="53:5" pos:end="53:10">assert</name><argument_list pos:start="53:11" pos:end="53:44">(<argument pos:start="53:12" pos:end="53:43"><expr pos:start="53:12" pos:end="53:43"><name pos:start="53:12" pos:end="53:24">nb_numa_nodes</name> <operator pos:start="53:26" pos:end="53:27">==</operator> <name pos:start="53:29" pos:end="53:43">max_numa_nodeid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="57:5" pos:end="229:5"><if pos:start="57:5" pos:end="225:5">if <condition pos:start="57:8" pos:end="57:26">(<expr pos:start="57:9" pos:end="57:25"><name pos:start="57:9" pos:end="57:21">nb_numa_nodes</name> <operator pos:start="57:23" pos:end="57:23">&gt;</operator> <literal type="number" pos:start="57:25" pos:end="57:25">0</literal></expr>)</condition> <block pos:start="57:28" pos:end="225:5">{<block_content pos:start="59:9" pos:end="223:9">

        <decl_stmt pos:start="59:9" pos:end="59:28"><decl pos:start="59:9" pos:end="59:27"><type pos:start="59:9" pos:end="59:16"><name pos:start="59:9" pos:end="59:16">uint64_t</name></type> <name pos:start="59:18" pos:end="59:27">numa_total</name></decl>;</decl_stmt>



        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:38">(<expr pos:start="63:13" pos:end="63:37"><name pos:start="63:13" pos:end="63:25">nb_numa_nodes</name> <operator pos:start="63:27" pos:end="63:27">&gt;</operator> <name pos:start="63:29" pos:end="63:37">MAX_NODES</name></expr>)</condition> <block pos:start="63:40" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:38">

            <expr_stmt pos:start="65:13" pos:end="65:38"><expr pos:start="65:13" pos:end="65:37"><name pos:start="65:13" pos:end="65:25">nb_numa_nodes</name> <operator pos:start="65:27" pos:end="65:27">=</operator> <name pos:start="65:29" pos:end="65:37">MAX_NODES</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="71:9" pos:end="75:11">/* If no memory size is given for any node, assume the default case

         * and distribute the available memory equally across all nodes

         */</comment>

        <for pos:start="77:9" pos:end="85:9">for <control pos:start="77:13" pos:end="77:43">(<init pos:start="77:14" pos:end="77:19"><expr pos:start="77:14" pos:end="77:18"><name pos:start="77:14" pos:end="77:14">i</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <literal type="number" pos:start="77:18" pos:end="77:18">0</literal></expr>;</init> <condition pos:start="77:21" pos:end="77:38"><expr pos:start="77:21" pos:end="77:37"><name pos:start="77:21" pos:end="77:21">i</name> <operator pos:start="77:23" pos:end="77:23">&lt;</operator> <name pos:start="77:25" pos:end="77:37">nb_numa_nodes</name></expr>;</condition> <incr pos:start="77:40" pos:end="77:42"><expr pos:start="77:40" pos:end="77:42"><name pos:start="77:40" pos:end="77:40">i</name><operator pos:start="77:41" pos:end="77:42">++</operator></expr></incr>)</control> <block pos:start="77:45" pos:end="85:9">{<block_content pos:start="79:13" pos:end="83:13">

            <if_stmt pos:start="79:13" pos:end="83:13"><if pos:start="79:13" pos:end="83:13">if <condition pos:start="79:16" pos:end="79:43">(<expr pos:start="79:17" pos:end="79:42"><name pos:start="79:17" pos:end="79:28"><name pos:start="79:17" pos:end="79:25">numa_info</name><index pos:start="79:26" pos:end="79:28">[<expr pos:start="79:27" pos:end="79:27"><name pos:start="79:27" pos:end="79:27">i</name></expr>]</index></name><operator pos:start="79:29" pos:end="79:29">.</operator><name pos:start="79:30" pos:end="79:37">node_mem</name> <operator pos:start="79:39" pos:end="79:40">!=</operator> <literal type="number" pos:start="79:42" pos:end="79:42">0</literal></expr>)</condition> <block pos:start="79:45" pos:end="83:13">{<block_content pos:start="81:17" pos:end="81:22">

                <break pos:start="81:17" pos:end="81:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="87:9" pos:end="93:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:31">(<expr pos:start="87:13" pos:end="87:30"><name pos:start="87:13" pos:end="87:13">i</name> <operator pos:start="87:15" pos:end="87:16">==</operator> <name pos:start="87:18" pos:end="87:30">nb_numa_nodes</name></expr>)</condition> <block pos:start="87:33" pos:end="93:9">{<block_content pos:start="89:13" pos:end="91:77">

            <expr_stmt pos:start="89:13" pos:end="89:45"><expr pos:start="89:13" pos:end="89:44"><call pos:start="89:13" pos:end="89:44"><name pos:start="89:13" pos:end="89:18">assert</name><argument_list pos:start="89:19" pos:end="89:44">(<argument pos:start="89:20" pos:end="89:43"><expr pos:start="89:20" pos:end="89:43"><name pos:start="89:20" pos:end="89:43"><name pos:start="89:20" pos:end="89:21">mc</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:43">numa_auto_assign_ram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:77"><expr pos:start="91:13" pos:end="91:76"><call pos:start="91:13" pos:end="91:76"><name pos:start="91:13" pos:end="91:36"><name pos:start="91:13" pos:end="91:14">mc</name><operator pos:start="91:15" pos:end="91:16">-&gt;</operator><name pos:start="91:17" pos:end="91:36">numa_auto_assign_ram</name></name><argument_list pos:start="91:37" pos:end="91:76">(<argument pos:start="91:38" pos:end="91:39"><expr pos:start="91:38" pos:end="91:39"><name pos:start="91:38" pos:end="91:39">mc</name></expr></argument>, <argument pos:start="91:42" pos:end="91:50"><expr pos:start="91:42" pos:end="91:50"><name pos:start="91:42" pos:end="91:50">numa_info</name></expr></argument>, <argument pos:start="91:53" pos:end="91:65"><expr pos:start="91:53" pos:end="91:65"><name pos:start="91:53" pos:end="91:65">nb_numa_nodes</name></expr></argument>, <argument pos:start="91:68" pos:end="91:75"><expr pos:start="91:68" pos:end="91:75"><name pos:start="91:68" pos:end="91:75">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="97:9" pos:end="97:23"><expr pos:start="97:9" pos:end="97:22"><name pos:start="97:9" pos:end="97:18">numa_total</name> <operator pos:start="97:20" pos:end="97:20">=</operator> <literal type="number" pos:start="97:22" pos:end="97:22">0</literal></expr>;</expr_stmt>

        <for pos:start="99:9" pos:end="103:9">for <control pos:start="99:13" pos:end="99:43">(<init pos:start="99:14" pos:end="99:19"><expr pos:start="99:14" pos:end="99:18"><name pos:start="99:14" pos:end="99:14">i</name> <operator pos:start="99:16" pos:end="99:16">=</operator> <literal type="number" pos:start="99:18" pos:end="99:18">0</literal></expr>;</init> <condition pos:start="99:21" pos:end="99:38"><expr pos:start="99:21" pos:end="99:37"><name pos:start="99:21" pos:end="99:21">i</name> <operator pos:start="99:23" pos:end="99:23">&lt;</operator> <name pos:start="99:25" pos:end="99:37">nb_numa_nodes</name></expr>;</condition> <incr pos:start="99:40" pos:end="99:42"><expr pos:start="99:40" pos:end="99:42"><name pos:start="99:40" pos:end="99:40">i</name><operator pos:start="99:41" pos:end="99:42">++</operator></expr></incr>)</control> <block pos:start="99:45" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:48">

            <expr_stmt pos:start="101:13" pos:end="101:48"><expr pos:start="101:13" pos:end="101:47"><name pos:start="101:13" pos:end="101:22">numa_total</name> <operator pos:start="101:24" pos:end="101:25">+=</operator> <name pos:start="101:27" pos:end="101:38"><name pos:start="101:27" pos:end="101:35">numa_info</name><index pos:start="101:36" pos:end="101:38">[<expr pos:start="101:37" pos:end="101:37"><name pos:start="101:37" pos:end="101:37">i</name></expr>]</index></name><operator pos:start="101:39" pos:end="101:39">.</operator><name pos:start="101:40" pos:end="101:47">node_mem</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="105:9" pos:end="115:9"><if pos:start="105:9" pos:end="115:9">if <condition pos:start="105:12" pos:end="105:35">(<expr pos:start="105:13" pos:end="105:34"><name pos:start="105:13" pos:end="105:22">numa_total</name> <operator pos:start="105:24" pos:end="105:25">!=</operator> <name pos:start="105:27" pos:end="105:34">ram_size</name></expr>)</condition> <block pos:start="105:37" pos:end="115:9">{<block_content pos:start="107:13" pos:end="113:20">

            <expr_stmt pos:start="107:13" pos:end="111:47"><expr pos:start="107:13" pos:end="111:46"><call pos:start="107:13" pos:end="111:46"><name pos:start="107:13" pos:end="107:24">error_report</name><argument_list pos:start="107:25" pos:end="111:46">(<argument pos:start="107:26" pos:end="109:70"><expr pos:start="107:26" pos:end="109:70"><literal type="string" pos:start="107:26" pos:end="107:59">"total memory for NUMA nodes (0x%"</literal> <name pos:start="107:61" pos:end="107:66">PRIx64</name> <literal type="string" pos:start="107:68" pos:end="107:70">")"</literal>

                         <literal type="string" pos:start="109:26" pos:end="109:53">" should equal RAM size (0x"</literal> <name pos:start="109:55" pos:end="109:66">RAM_ADDR_FMT</name> <literal type="string" pos:start="109:68" pos:end="109:70">")"</literal></expr></argument>,

                         <argument pos:start="111:26" pos:end="111:35"><expr pos:start="111:26" pos:end="111:35"><name pos:start="111:26" pos:end="111:35">numa_total</name></expr></argument>, <argument pos:start="111:38" pos:end="111:45"><expr pos:start="111:38" pos:end="111:45"><name pos:start="111:38" pos:end="111:45">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:20"><expr pos:start="113:13" pos:end="113:19"><call pos:start="113:13" pos:end="113:19"><name pos:start="113:13" pos:end="113:16">exit</name><argument_list pos:start="113:17" pos:end="113:19">(<argument pos:start="113:18" pos:end="113:18"><expr pos:start="113:18" pos:end="113:18"><literal type="number" pos:start="113:18" pos:end="113:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="119:9" pos:end="123:9">for <control pos:start="119:13" pos:end="119:43">(<init pos:start="119:14" pos:end="119:19"><expr pos:start="119:14" pos:end="119:18"><name pos:start="119:14" pos:end="119:14">i</name> <operator pos:start="119:16" pos:end="119:16">=</operator> <literal type="number" pos:start="119:18" pos:end="119:18">0</literal></expr>;</init> <condition pos:start="119:21" pos:end="119:38"><expr pos:start="119:21" pos:end="119:37"><name pos:start="119:21" pos:end="119:21">i</name> <operator pos:start="119:23" pos:end="119:23">&lt;</operator> <name pos:start="119:25" pos:end="119:37">nb_numa_nodes</name></expr>;</condition> <incr pos:start="119:40" pos:end="119:42"><expr pos:start="119:40" pos:end="119:42"><name pos:start="119:40" pos:end="119:40">i</name><operator pos:start="119:41" pos:end="119:42">++</operator></expr></incr>)</control> <block pos:start="119:45" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:43">

            <expr_stmt pos:start="121:13" pos:end="121:43"><expr pos:start="121:13" pos:end="121:42"><call pos:start="121:13" pos:end="121:42"><name pos:start="121:13" pos:end="121:22">QLIST_INIT</name><argument_list pos:start="121:23" pos:end="121:42">(<argument pos:start="121:24" pos:end="121:41"><expr pos:start="121:24" pos:end="121:41"><operator pos:start="121:24" pos:end="121:24">&amp;</operator><name pos:start="121:25" pos:end="121:36"><name pos:start="121:25" pos:end="121:33">numa_info</name><index pos:start="121:34" pos:end="121:36">[<expr pos:start="121:35" pos:end="121:35"><name pos:start="121:35" pos:end="121:35">i</name></expr>]</index></name><operator pos:start="121:37" pos:end="121:37">.</operator><name pos:start="121:38" pos:end="121:41">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="127:9" pos:end="127:30"><expr pos:start="127:9" pos:end="127:29"><call pos:start="127:9" pos:end="127:29"><name pos:start="127:9" pos:end="127:27">numa_set_mem_ranges</name><argument_list pos:start="127:28" pos:end="127:29">()</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="131:9" pos:end="131:71">/* assign CPUs to nodes using board provided default mapping */</comment>

        <if_stmt pos:start="133:9" pos:end="139:9"><if pos:start="133:9" pos:end="139:9">if <condition pos:start="133:12" pos:end="133:75">(<expr pos:start="133:13" pos:end="133:74"><operator pos:start="133:13" pos:end="133:13">!</operator><name pos:start="133:14" pos:end="133:44"><name pos:start="133:14" pos:end="133:15">mc</name><operator pos:start="133:16" pos:end="133:17">-&gt;</operator><name pos:start="133:18" pos:end="133:44">cpu_index_to_instance_props</name></name> <operator pos:start="133:46" pos:end="133:47">||</operator> <operator pos:start="133:49" pos:end="133:49">!</operator><name pos:start="133:50" pos:end="133:74"><name pos:start="133:50" pos:end="133:51">mc</name><operator pos:start="133:52" pos:end="133:53">-&gt;</operator><name pos:start="133:54" pos:end="133:74">possible_cpu_arch_ids</name></name></expr>)</condition> <block pos:start="133:77" pos:end="139:9">{<block_content pos:start="135:13" pos:end="137:20">

            <expr_stmt pos:start="135:13" pos:end="135:78"><expr pos:start="135:13" pos:end="135:77"><call pos:start="135:13" pos:end="135:77"><name pos:start="135:13" pos:end="135:24">error_report</name><argument_list pos:start="135:25" pos:end="135:77">(<argument pos:start="135:26" pos:end="135:76"><expr pos:start="135:26" pos:end="135:76"><literal type="string" pos:start="135:26" pos:end="135:76">"default CPUs to NUMA node mapping isn't supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:20"><expr pos:start="137:13" pos:end="137:19"><call pos:start="137:13" pos:end="137:19"><name pos:start="137:13" pos:end="137:16">exit</name><argument_list pos:start="137:17" pos:end="137:19">(<argument pos:start="137:18" pos:end="137:18"><expr pos:start="137:18" pos:end="137:18"><literal type="number" pos:start="137:18" pos:end="137:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="143:9" pos:end="143:54"><expr pos:start="143:9" pos:end="143:53"><name pos:start="143:9" pos:end="143:21">possible_cpus</name> <operator pos:start="143:23" pos:end="143:23">=</operator> <call pos:start="143:25" pos:end="143:53"><name pos:start="143:25" pos:end="143:49"><name pos:start="143:25" pos:end="143:26">mc</name><operator pos:start="143:27" pos:end="143:28">-&gt;</operator><name pos:start="143:29" pos:end="143:49">possible_cpu_arch_ids</name></name><argument_list pos:start="143:50" pos:end="143:53">(<argument pos:start="143:51" pos:end="143:52"><expr pos:start="143:51" pos:end="143:52"><name pos:start="143:51" pos:end="143:52">ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="145:9" pos:end="153:9">for <control pos:start="145:13" pos:end="145:48">(<init pos:start="145:14" pos:end="145:19"><expr pos:start="145:14" pos:end="145:18"><name pos:start="145:14" pos:end="145:14">i</name> <operator pos:start="145:16" pos:end="145:16">=</operator> <literal type="number" pos:start="145:18" pos:end="145:18">0</literal></expr>;</init> <condition pos:start="145:21" pos:end="145:43"><expr pos:start="145:21" pos:end="145:42"><name pos:start="145:21" pos:end="145:21">i</name> <operator pos:start="145:23" pos:end="145:23">&lt;</operator> <name pos:start="145:25" pos:end="145:42"><name pos:start="145:25" pos:end="145:37">possible_cpus</name><operator pos:start="145:38" pos:end="145:39">-&gt;</operator><name pos:start="145:40" pos:end="145:42">len</name></name></expr>;</condition> <incr pos:start="145:45" pos:end="145:47"><expr pos:start="145:45" pos:end="145:47"><name pos:start="145:45" pos:end="145:45">i</name><operator pos:start="145:46" pos:end="145:47">++</operator></expr></incr>)</control> <block pos:start="145:50" pos:end="153:9">{<block_content pos:start="147:13" pos:end="151:13">

            <if_stmt pos:start="147:13" pos:end="151:13"><if pos:start="147:13" pos:end="151:13">if <condition pos:start="147:16" pos:end="147:57">(<expr pos:start="147:17" pos:end="147:56"><name pos:start="147:17" pos:end="147:38"><name pos:start="147:17" pos:end="147:29">possible_cpus</name><operator pos:start="147:30" pos:end="147:31">-&gt;</operator><name pos:start="147:32" pos:end="147:35">cpus</name><index pos:start="147:36" pos:end="147:38">[<expr pos:start="147:37" pos:end="147:37"><name pos:start="147:37" pos:end="147:37">i</name></expr>]</index></name><operator pos:start="147:39" pos:end="147:39">.</operator><name pos:start="147:40" pos:end="147:56"><name pos:start="147:40" pos:end="147:44">props</name><operator pos:start="147:45" pos:end="147:45">.</operator><name pos:start="147:46" pos:end="147:56">has_node_id</name></name></expr>)</condition> <block pos:start="147:59" pos:end="151:13">{<block_content pos:start="149:17" pos:end="149:22">

                <break pos:start="149:17" pos:end="149:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="157:9" pos:end="157:48">/* no CPUs are assigned to NUMA nodes */</comment>

        <if_stmt pos:start="159:9" pos:end="179:9"><if pos:start="159:9" pos:end="179:9">if <condition pos:start="159:12" pos:end="159:36">(<expr pos:start="159:13" pos:end="159:35"><name pos:start="159:13" pos:end="159:13">i</name> <operator pos:start="159:15" pos:end="159:16">==</operator> <name pos:start="159:18" pos:end="159:35"><name pos:start="159:18" pos:end="159:30">possible_cpus</name><operator pos:start="159:31" pos:end="159:32">-&gt;</operator><name pos:start="159:33" pos:end="159:35">len</name></name></expr>)</condition> <block pos:start="159:38" pos:end="179:9">{<block_content pos:start="161:13" pos:end="177:13">

            <for pos:start="161:13" pos:end="177:13">for <control pos:start="161:17" pos:end="161:42">(<init pos:start="161:18" pos:end="161:23"><expr pos:start="161:18" pos:end="161:22"><name pos:start="161:18" pos:end="161:18">i</name> <operator pos:start="161:20" pos:end="161:20">=</operator> <literal type="number" pos:start="161:22" pos:end="161:22">0</literal></expr>;</init> <condition pos:start="161:25" pos:end="161:37"><expr pos:start="161:25" pos:end="161:36"><name pos:start="161:25" pos:end="161:25">i</name> <operator pos:start="161:27" pos:end="161:27">&lt;</operator> <name pos:start="161:29" pos:end="161:36">max_cpus</name></expr>;</condition> <incr pos:start="161:39" pos:end="161:41"><expr pos:start="161:39" pos:end="161:41"><name pos:start="161:39" pos:end="161:39">i</name><operator pos:start="161:40" pos:end="161:41">++</operator></expr></incr>)</control> <block pos:start="161:44" pos:end="177:13">{<block_content pos:start="163:17" pos:end="175:68">

                <decl_stmt pos:start="163:17" pos:end="163:44"><decl pos:start="163:17" pos:end="163:43"><type pos:start="163:17" pos:end="163:37"><name pos:start="163:17" pos:end="163:37">CpuInstanceProperties</name></type> <name pos:start="163:39" pos:end="163:43">props</name></decl>;</decl_stmt>

                <comment type="block" pos:start="165:17" pos:end="165:68">/* fetch default mapping from board and enable it */</comment>

                <expr_stmt pos:start="167:17" pos:end="167:63"><expr pos:start="167:17" pos:end="167:62"><name pos:start="167:17" pos:end="167:21">props</name> <operator pos:start="167:23" pos:end="167:23">=</operator> <call pos:start="167:25" pos:end="167:62"><name pos:start="167:25" pos:end="167:55"><name pos:start="167:25" pos:end="167:26">mc</name><operator pos:start="167:27" pos:end="167:28">-&gt;</operator><name pos:start="167:29" pos:end="167:55">cpu_index_to_instance_props</name></name><argument_list pos:start="167:56" pos:end="167:62">(<argument pos:start="167:57" pos:end="167:58"><expr pos:start="167:57" pos:end="167:58"><name pos:start="167:57" pos:end="167:58">ms</name></expr></argument>, <argument pos:start="167:61" pos:end="167:61"><expr pos:start="167:61" pos:end="167:61"><name pos:start="167:61" pos:end="167:61">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="169:17" pos:end="169:41"><expr pos:start="169:17" pos:end="169:40"><name pos:start="169:17" pos:end="169:33"><name pos:start="169:17" pos:end="169:21">props</name><operator pos:start="169:22" pos:end="169:22">.</operator><name pos:start="169:23" pos:end="169:33">has_node_id</name></name> <operator pos:start="169:35" pos:end="169:35">=</operator> <name pos:start="169:37" pos:end="169:40">true</name></expr>;</expr_stmt>



                <expr_stmt pos:start="173:17" pos:end="173:62"><expr pos:start="173:17" pos:end="173:61"><call pos:start="173:17" pos:end="173:61"><name pos:start="173:17" pos:end="173:23">set_bit</name><argument_list pos:start="173:24" pos:end="173:61">(<argument pos:start="173:25" pos:end="173:25"><expr pos:start="173:25" pos:end="173:25"><name pos:start="173:25" pos:end="173:25">i</name></expr></argument>, <argument pos:start="173:28" pos:end="173:60"><expr pos:start="173:28" pos:end="173:60"><name pos:start="173:28" pos:end="173:51"><name pos:start="173:28" pos:end="173:36">numa_info</name><index pos:start="173:37" pos:end="173:51">[<expr pos:start="173:38" pos:end="173:50"><name pos:start="173:38" pos:end="173:50"><name pos:start="173:38" pos:end="173:42">props</name><operator pos:start="173:43" pos:end="173:43">.</operator><name pos:start="173:44" pos:end="173:50">node_id</name></name></expr>]</index></name><operator pos:start="173:52" pos:end="173:52">.</operator><name pos:start="173:53" pos:end="173:60">node_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="175:17" pos:end="175:68"><expr pos:start="175:17" pos:end="175:67"><call pos:start="175:17" pos:end="175:67"><name pos:start="175:17" pos:end="175:41">machine_set_cpu_numa_node</name><argument_list pos:start="175:42" pos:end="175:67">(<argument pos:start="175:43" pos:end="175:44"><expr pos:start="175:43" pos:end="175:44"><name pos:start="175:43" pos:end="175:44">ms</name></expr></argument>, <argument pos:start="175:47" pos:end="175:52"><expr pos:start="175:47" pos:end="175:52"><operator pos:start="175:47" pos:end="175:47">&amp;</operator><name pos:start="175:48" pos:end="175:52">props</name></expr></argument>, <argument pos:start="175:55" pos:end="175:66"><expr pos:start="175:55" pos:end="175:66"><operator pos:start="175:55" pos:end="175:55">&amp;</operator><name pos:start="175:56" pos:end="175:66">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="183:9" pos:end="183:29"><expr pos:start="183:9" pos:end="183:28"><call pos:start="183:9" pos:end="183:28"><name pos:start="183:9" pos:end="183:26">validate_numa_cpus</name><argument_list pos:start="183:27" pos:end="183:28">()</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="187:9" pos:end="209:11">/* QEMU needs at least all unique node pair distances to build

         * the whole NUMA distance table. QEMU treats the distance table

         * as symmetric by default, i.e. distance A-&gt;B == distance B-&gt;A.

         * Thus, QEMU is able to complete the distance table

         * initialization even though only distance A-&gt;B is provided and

         * distance B-&gt;A is not. QEMU knows the distance of a node to

         * itself is always 10, so A-&gt;A distances may be omitted. When

         * the distances of two nodes of a pair differ, i.e. distance

         * A-&gt;B != distance B-&gt;A, then that means the distance table is

         * asymmetric. In this case, the distances for both directions

         * of all node pairs are required.

         */</comment>

        <if_stmt pos:start="211:9" pos:end="223:9"><if pos:start="211:9" pos:end="223:9">if <condition pos:start="211:12" pos:end="211:31">(<expr pos:start="211:13" pos:end="211:30"><name pos:start="211:13" pos:end="211:30">have_numa_distance</name></expr>)</condition> <block pos:start="211:33" pos:end="223:9">{<block_content pos:start="215:13" pos:end="221:42">

            <comment type="block" pos:start="213:13" pos:end="213:73">/* Validate enough NUMA distance information was provided. */</comment>

            <expr_stmt pos:start="215:13" pos:end="215:37"><expr pos:start="215:13" pos:end="215:36"><call pos:start="215:13" pos:end="215:36"><name pos:start="215:13" pos:end="215:34">validate_numa_distance</name><argument_list pos:start="215:35" pos:end="215:36">()</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="219:13" pos:end="219:74">/* Validation succeeded, now fill in any missing distances. */</comment>

            <expr_stmt pos:start="221:13" pos:end="221:42"><expr pos:start="221:13" pos:end="221:41"><call pos:start="221:13" pos:end="221:41"><name pos:start="221:13" pos:end="221:39">complete_init_numa_distance</name><argument_list pos:start="221:40" pos:end="221:41">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="225:7" pos:end="229:5">else <block pos:start="225:12" pos:end="229:5">{<block_content pos:start="227:9" pos:end="227:45">

        <expr_stmt pos:start="227:9" pos:end="227:45"><expr pos:start="227:9" pos:end="227:44"><call pos:start="227:9" pos:end="227:44"><name pos:start="227:9" pos:end="227:28">numa_set_mem_node_id</name><argument_list pos:start="227:29" pos:end="227:44">(<argument pos:start="227:30" pos:end="227:30"><expr pos:start="227:30" pos:end="227:30"><literal type="number" pos:start="227:30" pos:end="227:30">0</literal></expr></argument>, <argument pos:start="227:33" pos:end="227:40"><expr pos:start="227:33" pos:end="227:40"><name pos:start="227:33" pos:end="227:40">ram_size</name></expr></argument>, <argument pos:start="227:43" pos:end="227:43"><expr pos:start="227:43" pos:end="227:43"><literal type="number" pos:start="227:43" pos:end="227:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
