<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14578.c" pos:tabs="8"><function pos:start="1:1" pos:end="191:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">usb_host_handle_data</name><parameter_list pos:start="1:32" pos:end="1:61">(<parameter pos:start="1:33" pos:end="1:46"><decl pos:start="1:33" pos:end="1:46"><type pos:start="1:33" pos:end="1:46"><name pos:start="1:33" pos:end="1:41">USBDevice</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">dev</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:60"><decl pos:start="1:49" pos:end="1:60"><type pos:start="1:49" pos:end="1:60"><name pos:start="1:49" pos:end="1:57">USBPacket</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:60">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="191:1">{<block_content pos:start="5:5" pos:end="189:25">

    <decl_stmt pos:start="5:5" pos:end="5:58"><decl pos:start="5:5" pos:end="5:57"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">USBHostDevice</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:57">= <expr pos:start="5:24" pos:end="5:57"><call pos:start="5:24" pos:end="5:57"><name pos:start="5:24" pos:end="5:32">DO_UPCAST</name><argument_list pos:start="5:33" pos:end="5:57">(<argument pos:start="5:34" pos:end="5:46"><expr pos:start="5:34" pos:end="5:46"><name pos:start="5:34" pos:end="5:46">USBHostDevice</name></expr></argument>, <argument pos:start="5:49" pos:end="5:51"><expr pos:start="5:49" pos:end="5:51"><name pos:start="5:49" pos:end="5:51">dev</name></expr></argument>, <argument pos:start="5:54" pos:end="5:56"><expr pos:start="5:54" pos:end="5:56"><name pos:start="5:54" pos:end="5:56">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:23">usbdevfs_urb</name></name> <modifier pos:start="7:25" pos:end="7:25">*</modifier></type><name pos:start="7:26" pos:end="7:28">urb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">AsyncURB</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:18">aurb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>, <decl pos:start="11:14" pos:end="11:16"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:16">rem</name></decl>, <decl pos:start="11:19" pos:end="11:22"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:19" pos:end="11:22">prem</name></decl>, <decl pos:start="11:25" pos:end="11:25"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:25" pos:end="11:25">v</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:17">pbuf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">uint8_t</name></type> <name pos:start="15:13" pos:end="15:14">ep</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="23:51"><expr pos:start="19:5" pos:end="23:50"><call pos:start="19:5" pos:end="23:50"><name pos:start="19:5" pos:end="19:27">trace_usb_host_req_data</name><argument_list pos:start="19:28" pos:end="23:50">(<argument pos:start="19:29" pos:end="19:38"><expr pos:start="19:29" pos:end="19:38"><name pos:start="19:29" pos:end="19:38"><name pos:start="19:29" pos:end="19:29">s</name><operator pos:start="19:30" pos:end="19:31">-&gt;</operator><name pos:start="19:32" pos:end="19:38">bus_num</name></name></expr></argument>, <argument pos:start="19:41" pos:end="19:47"><expr pos:start="19:41" pos:end="19:47"><name pos:start="19:41" pos:end="19:47"><name pos:start="19:41" pos:end="19:41">s</name><operator pos:start="19:42" pos:end="19:43">-&gt;</operator><name pos:start="19:44" pos:end="19:47">addr</name></name></expr></argument>,

                            <argument pos:start="21:29" pos:end="21:50"><expr pos:start="21:29" pos:end="21:50"><name pos:start="21:29" pos:end="21:34"><name pos:start="21:29" pos:end="21:29">p</name><operator pos:start="21:30" pos:end="21:31">-&gt;</operator><name pos:start="21:32" pos:end="21:34">pid</name></name> <operator pos:start="21:36" pos:end="21:37">==</operator> <name pos:start="21:39" pos:end="21:50">USB_TOKEN_IN</name></expr></argument>,

                            <argument pos:start="23:29" pos:end="23:36"><expr pos:start="23:29" pos:end="23:36"><name pos:start="23:29" pos:end="23:36"><name pos:start="23:29" pos:end="23:29">p</name><operator pos:start="23:30" pos:end="23:31">-&gt;</operator><name pos:start="23:32" pos:end="23:36">devep</name></name></expr></argument>, <argument pos:start="23:39" pos:end="23:49"><expr pos:start="23:39" pos:end="23:49"><name pos:start="23:39" pos:end="23:49"><name pos:start="23:39" pos:end="23:39">p</name><operator pos:start="23:40" pos:end="23:41">-&gt;</operator><name pos:start="23:42" pos:end="23:44">iov</name><operator pos:start="23:45" pos:end="23:45">.</operator><name pos:start="23:46" pos:end="23:49">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:39">(<expr pos:start="27:9" pos:end="27:38"><operator pos:start="27:9" pos:end="27:9">!</operator><call pos:start="27:10" pos:end="27:38"><name pos:start="27:10" pos:end="27:17">is_valid</name><argument_list pos:start="27:18" pos:end="27:38">(<argument pos:start="27:19" pos:end="27:19"><expr pos:start="27:19" pos:end="27:19"><name pos:start="27:19" pos:end="27:19">s</name></expr></argument>, <argument pos:start="27:22" pos:end="27:27"><expr pos:start="27:22" pos:end="27:27"><name pos:start="27:22" pos:end="27:27"><name pos:start="27:22" pos:end="27:22">p</name><operator pos:start="27:23" pos:end="27:24">-&gt;</operator><name pos:start="27:25" pos:end="27:27">pid</name></name></expr></argument>, <argument pos:start="27:30" pos:end="27:37"><expr pos:start="27:30" pos:end="27:37"><name pos:start="27:30" pos:end="27:37"><name pos:start="27:30" pos:end="27:30">p</name><operator pos:start="27:31" pos:end="27:32">-&gt;</operator><name pos:start="27:33" pos:end="27:37">devep</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:41" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:27">

        <expr_stmt pos:start="29:9" pos:end="29:70"><expr pos:start="29:9" pos:end="29:69"><call pos:start="29:9" pos:end="29:69"><name pos:start="29:9" pos:end="29:35">trace_usb_host_req_complete</name><argument_list pos:start="29:36" pos:end="29:69">(<argument pos:start="29:37" pos:end="29:46"><expr pos:start="29:37" pos:end="29:46"><name pos:start="29:37" pos:end="29:46"><name pos:start="29:37" pos:end="29:37">s</name><operator pos:start="29:38" pos:end="29:39">-&gt;</operator><name pos:start="29:40" pos:end="29:46">bus_num</name></name></expr></argument>, <argument pos:start="29:49" pos:end="29:55"><expr pos:start="29:49" pos:end="29:55"><name pos:start="29:49" pos:end="29:55"><name pos:start="29:49" pos:end="29:49">s</name><operator pos:start="29:50" pos:end="29:51">-&gt;</operator><name pos:start="29:52" pos:end="29:55">addr</name></name></expr></argument>, <argument pos:start="29:58" pos:end="29:68"><expr pos:start="29:58" pos:end="29:68"><name pos:start="29:58" pos:end="29:68">USB_RET_NAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:27">return <expr pos:start="31:16" pos:end="31:26"><name pos:start="31:16" pos:end="31:26">USB_RET_NAK</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:31">(<expr pos:start="37:9" pos:end="37:30"><name pos:start="37:9" pos:end="37:14"><name pos:start="37:9" pos:end="37:9">p</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:14">pid</name></name> <operator pos:start="37:16" pos:end="37:17">==</operator> <name pos:start="37:19" pos:end="37:30">USB_TOKEN_IN</name></expr>)</condition> <block pos:start="37:33" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:29">

        <expr_stmt pos:start="39:9" pos:end="39:29"><expr pos:start="39:9" pos:end="39:28"><name pos:start="39:9" pos:end="39:10">ep</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <name pos:start="39:14" pos:end="39:21"><name pos:start="39:14" pos:end="39:14">p</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:21">devep</name></name> <operator pos:start="39:23" pos:end="39:23">|</operator> <literal type="number" pos:start="39:25" pos:end="39:28">0x80</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="45:5">else <block pos:start="41:12" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:22">

        <expr_stmt pos:start="43:9" pos:end="43:22"><expr pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:10">ep</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <name pos:start="43:14" pos:end="43:21"><name pos:start="43:14" pos:end="43:14">p</name><operator pos:start="43:15" pos:end="43:16">-&gt;</operator><name pos:start="43:17" pos:end="43:21">devep</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="49:5" pos:end="67:5"><if pos:start="49:5" pos:end="67:5">if <condition pos:start="49:8" pos:end="49:39">(<expr pos:start="49:9" pos:end="49:38"><call pos:start="49:9" pos:end="49:38"><name pos:start="49:9" pos:end="49:17">is_halted</name><argument_list pos:start="49:18" pos:end="49:38">(<argument pos:start="49:19" pos:end="49:19"><expr pos:start="49:19" pos:end="49:19"><name pos:start="49:19" pos:end="49:19">s</name></expr></argument>, <argument pos:start="49:22" pos:end="49:27"><expr pos:start="49:22" pos:end="49:27"><name pos:start="49:22" pos:end="49:27"><name pos:start="49:22" pos:end="49:22">p</name><operator pos:start="49:23" pos:end="49:24">-&gt;</operator><name pos:start="49:25" pos:end="49:27">pid</name></name></expr></argument>, <argument pos:start="49:30" pos:end="49:37"><expr pos:start="49:30" pos:end="49:37"><name pos:start="49:30" pos:end="49:37"><name pos:start="49:30" pos:end="49:30">p</name><operator pos:start="49:31" pos:end="49:32">-&gt;</operator><name pos:start="49:33" pos:end="49:37">devep</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:41" pos:end="67:5">{<block_content pos:start="51:9" pos:end="65:40">

        <decl_stmt pos:start="51:9" pos:end="51:30"><decl pos:start="51:9" pos:end="51:29"><type pos:start="51:9" pos:end="51:20"><name pos:start="51:9" pos:end="51:16">unsigned</name> <name pos:start="51:18" pos:end="51:20">int</name></type> <name pos:start="51:22" pos:end="51:24">arg</name> <init pos:start="51:26" pos:end="51:29">= <expr pos:start="51:28" pos:end="51:29"><name pos:start="51:28" pos:end="51:29">ep</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:54"><expr pos:start="53:9" pos:end="53:53"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:53"><name pos:start="53:15" pos:end="53:19">ioctl</name><argument_list pos:start="53:20" pos:end="53:53">(<argument pos:start="53:21" pos:end="53:25"><expr pos:start="53:21" pos:end="53:25"><name pos:start="53:21" pos:end="53:25"><name pos:start="53:21" pos:end="53:21">s</name><operator pos:start="53:22" pos:end="53:23">-&gt;</operator><name pos:start="53:24" pos:end="53:25">fd</name></name></expr></argument>, <argument pos:start="53:28" pos:end="53:46"><expr pos:start="53:28" pos:end="53:46"><name pos:start="53:28" pos:end="53:46">USBDEVFS_CLEAR_HALT</name></expr></argument>, <argument pos:start="53:49" pos:end="53:52"><expr pos:start="53:49" pos:end="53:52"><operator pos:start="53:49" pos:end="53:49">&amp;</operator><name pos:start="53:50" pos:end="53:52">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="63:9"><if pos:start="55:9" pos:end="63:9">if <condition pos:start="55:12" pos:end="55:20">(<expr pos:start="55:13" pos:end="55:19"><name pos:start="55:13" pos:end="55:15">ret</name> <operator pos:start="55:17" pos:end="55:17">&lt;</operator> <literal type="number" pos:start="55:19" pos:end="55:19">0</literal></expr>)</condition> <block pos:start="55:22" pos:end="63:9">{<block_content pos:start="57:13" pos:end="61:31">

            <expr_stmt pos:start="57:13" pos:end="57:42"><expr pos:start="57:13" pos:end="57:41"><call pos:start="57:13" pos:end="57:41"><name pos:start="57:13" pos:end="57:18">perror</name><argument_list pos:start="57:19" pos:end="57:41">(<argument pos:start="57:20" pos:end="57:40"><expr pos:start="57:20" pos:end="57:40"><literal type="string" pos:start="57:20" pos:end="57:40">"USBDEVFS_CLEAR_HALT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:74"><expr pos:start="59:13" pos:end="59:73"><call pos:start="59:13" pos:end="59:73"><name pos:start="59:13" pos:end="59:39">trace_usb_host_req_complete</name><argument_list pos:start="59:40" pos:end="59:73">(<argument pos:start="59:41" pos:end="59:50"><expr pos:start="59:41" pos:end="59:50"><name pos:start="59:41" pos:end="59:50"><name pos:start="59:41" pos:end="59:41">s</name><operator pos:start="59:42" pos:end="59:43">-&gt;</operator><name pos:start="59:44" pos:end="59:50">bus_num</name></name></expr></argument>, <argument pos:start="59:53" pos:end="59:59"><expr pos:start="59:53" pos:end="59:59"><name pos:start="59:53" pos:end="59:59"><name pos:start="59:53" pos:end="59:53">s</name><operator pos:start="59:54" pos:end="59:55">-&gt;</operator><name pos:start="59:56" pos:end="59:59">addr</name></name></expr></argument>, <argument pos:start="59:62" pos:end="59:72"><expr pos:start="59:62" pos:end="59:72"><name pos:start="59:62" pos:end="59:72">USB_RET_NAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="61:13" pos:end="61:31">return <expr pos:start="61:20" pos:end="61:30"><name pos:start="61:20" pos:end="61:30">USB_RET_NAK</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:40"><expr pos:start="65:9" pos:end="65:39"><call pos:start="65:9" pos:end="65:39"><name pos:start="65:9" pos:end="65:18">clear_halt</name><argument_list pos:start="65:19" pos:end="65:39">(<argument pos:start="65:20" pos:end="65:20"><expr pos:start="65:20" pos:end="65:20"><name pos:start="65:20" pos:end="65:20">s</name></expr></argument>, <argument pos:start="65:23" pos:end="65:28"><expr pos:start="65:23" pos:end="65:28"><name pos:start="65:23" pos:end="65:28"><name pos:start="65:23" pos:end="65:23">p</name><operator pos:start="65:24" pos:end="65:25">-&gt;</operator><name pos:start="65:26" pos:end="65:28">pid</name></name></expr></argument>, <argument pos:start="65:31" pos:end="65:38"><expr pos:start="65:31" pos:end="65:38"><name pos:start="65:31" pos:end="65:38"><name pos:start="65:31" pos:end="65:31">p</name><operator pos:start="65:32" pos:end="65:33">-&gt;</operator><name pos:start="65:34" pos:end="65:38">devep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="71:5" pos:end="75:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:37">(<expr pos:start="71:9" pos:end="71:36"><call pos:start="71:9" pos:end="71:36"><name pos:start="71:9" pos:end="71:15">is_isoc</name><argument_list pos:start="71:16" pos:end="71:36">(<argument pos:start="71:17" pos:end="71:17"><expr pos:start="71:17" pos:end="71:17"><name pos:start="71:17" pos:end="71:17">s</name></expr></argument>, <argument pos:start="71:20" pos:end="71:25"><expr pos:start="71:20" pos:end="71:25"><name pos:start="71:20" pos:end="71:25"><name pos:start="71:20" pos:end="71:20">p</name><operator pos:start="71:21" pos:end="71:22">-&gt;</operator><name pos:start="71:23" pos:end="71:25">pid</name></name></expr></argument>, <argument pos:start="71:28" pos:end="71:35"><expr pos:start="71:28" pos:end="71:35"><name pos:start="71:28" pos:end="71:35"><name pos:start="71:28" pos:end="71:28">p</name><operator pos:start="71:29" pos:end="71:30">-&gt;</operator><name pos:start="71:31" pos:end="71:35">devep</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="71:39" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:70">

        <return pos:start="73:9" pos:end="73:70">return <expr pos:start="73:16" pos:end="73:69"><call pos:start="73:16" pos:end="73:69"><name pos:start="73:16" pos:end="73:39">usb_host_handle_iso_data</name><argument_list pos:start="73:40" pos:end="73:69">(<argument pos:start="73:41" pos:end="73:41"><expr pos:start="73:41" pos:end="73:41"><name pos:start="73:41" pos:end="73:41">s</name></expr></argument>, <argument pos:start="73:44" pos:end="73:44"><expr pos:start="73:44" pos:end="73:44"><name pos:start="73:44" pos:end="73:44">p</name></expr></argument>, <argument pos:start="73:47" pos:end="73:68"><expr pos:start="73:47" pos:end="73:68"><name pos:start="73:47" pos:end="73:52"><name pos:start="73:47" pos:end="73:47">p</name><operator pos:start="73:48" pos:end="73:49">-&gt;</operator><name pos:start="73:50" pos:end="73:52">pid</name></name> <operator pos:start="73:54" pos:end="73:55">==</operator> <name pos:start="73:57" pos:end="73:68">USB_TOKEN_IN</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:10"><expr pos:start="79:5" pos:end="79:9"><name pos:start="79:5" pos:end="79:5">v</name> <operator pos:start="79:7" pos:end="79:7">=</operator> <literal type="number" pos:start="79:9" pos:end="79:9">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:33"><expr pos:start="81:5" pos:end="81:32"><name pos:start="81:5" pos:end="81:8">prem</name> <operator pos:start="81:10" pos:end="81:10">=</operator> <name pos:start="81:12" pos:end="81:24"><name pos:start="81:12" pos:end="81:12">p</name><operator pos:start="81:13" pos:end="81:14">-&gt;</operator><name pos:start="81:15" pos:end="81:17">iov</name><operator pos:start="81:18" pos:end="81:18">.</operator><name pos:start="81:19" pos:end="81:21">iov</name><index pos:start="81:22" pos:end="81:24">[<expr pos:start="81:23" pos:end="81:23"><name pos:start="81:23" pos:end="81:23">v</name></expr>]</index></name><operator pos:start="81:25" pos:end="81:25">.</operator><name pos:start="81:26" pos:end="81:32">iov_len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:34"><expr pos:start="83:5" pos:end="83:33"><name pos:start="83:5" pos:end="83:8">pbuf</name> <operator pos:start="83:10" pos:end="83:10">=</operator> <name pos:start="83:12" pos:end="83:24"><name pos:start="83:12" pos:end="83:12">p</name><operator pos:start="83:13" pos:end="83:14">-&gt;</operator><name pos:start="83:15" pos:end="83:17">iov</name><operator pos:start="83:18" pos:end="83:18">.</operator><name pos:start="83:19" pos:end="83:21">iov</name><index pos:start="83:22" pos:end="83:24">[<expr pos:start="83:23" pos:end="83:23"><name pos:start="83:23" pos:end="83:23">v</name></expr>]</index></name><operator pos:start="83:25" pos:end="83:25">.</operator><name pos:start="83:26" pos:end="83:33">iov_base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:22"><expr pos:start="85:5" pos:end="85:21"><name pos:start="85:5" pos:end="85:7">rem</name> <operator pos:start="85:9" pos:end="85:9">=</operator> <name pos:start="85:11" pos:end="85:21"><name pos:start="85:11" pos:end="85:11">p</name><operator pos:start="85:12" pos:end="85:13">-&gt;</operator><name pos:start="85:14" pos:end="85:16">iov</name><operator pos:start="85:17" pos:end="85:17">.</operator><name pos:start="85:18" pos:end="85:21">size</name></name></expr>;</expr_stmt>

    <while pos:start="87:5" pos:end="185:5">while <condition pos:start="87:11" pos:end="87:15">(<expr pos:start="87:12" pos:end="87:14"><name pos:start="87:12" pos:end="87:14">rem</name></expr>)</condition> <block pos:start="87:17" pos:end="185:5">{<block_content pos:start="89:9" pos:end="183:9">

        <if_stmt pos:start="89:9" pos:end="101:9"><if pos:start="89:9" pos:end="101:9">if <condition pos:start="89:12" pos:end="89:22">(<expr pos:start="89:13" pos:end="89:21"><name pos:start="89:13" pos:end="89:16">prem</name> <operator pos:start="89:18" pos:end="89:19">==</operator> <literal type="number" pos:start="89:21" pos:end="89:21">0</literal></expr>)</condition> <block pos:start="89:24" pos:end="101:9">{<block_content pos:start="91:13" pos:end="99:32">

            <expr_stmt pos:start="91:13" pos:end="91:16"><expr pos:start="91:13" pos:end="91:15"><name pos:start="91:13" pos:end="91:13">v</name><operator pos:start="91:14" pos:end="91:15">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:36"><expr pos:start="93:13" pos:end="93:35"><call pos:start="93:13" pos:end="93:35"><name pos:start="93:13" pos:end="93:18">assert</name><argument_list pos:start="93:19" pos:end="93:35">(<argument pos:start="93:20" pos:end="93:34"><expr pos:start="93:20" pos:end="93:34"><name pos:start="93:20" pos:end="93:20">v</name> <operator pos:start="93:22" pos:end="93:22">&lt;</operator> <name pos:start="93:24" pos:end="93:34"><name pos:start="93:24" pos:end="93:24">p</name><operator pos:start="93:25" pos:end="93:26">-&gt;</operator><name pos:start="93:27" pos:end="93:29">iov</name><operator pos:start="93:30" pos:end="93:30">.</operator><name pos:start="93:31" pos:end="93:34">niov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:41"><expr pos:start="95:13" pos:end="95:40"><name pos:start="95:13" pos:end="95:16">prem</name> <operator pos:start="95:18" pos:end="95:18">=</operator> <name pos:start="95:20" pos:end="95:32"><name pos:start="95:20" pos:end="95:20">p</name><operator pos:start="95:21" pos:end="95:22">-&gt;</operator><name pos:start="95:23" pos:end="95:25">iov</name><operator pos:start="95:26" pos:end="95:26">.</operator><name pos:start="95:27" pos:end="95:29">iov</name><index pos:start="95:30" pos:end="95:32">[<expr pos:start="95:31" pos:end="95:31"><name pos:start="95:31" pos:end="95:31">v</name></expr>]</index></name><operator pos:start="95:33" pos:end="95:33">.</operator><name pos:start="95:34" pos:end="95:40">iov_len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:42"><expr pos:start="97:13" pos:end="97:41"><name pos:start="97:13" pos:end="97:16">pbuf</name> <operator pos:start="97:18" pos:end="97:18">=</operator> <name pos:start="97:20" pos:end="97:32"><name pos:start="97:20" pos:end="97:20">p</name><operator pos:start="97:21" pos:end="97:22">-&gt;</operator><name pos:start="97:23" pos:end="97:25">iov</name><operator pos:start="97:26" pos:end="97:26">.</operator><name pos:start="97:27" pos:end="97:29">iov</name><index pos:start="97:30" pos:end="97:32">[<expr pos:start="97:31" pos:end="97:31"><name pos:start="97:31" pos:end="97:31">v</name></expr>]</index></name><operator pos:start="97:33" pos:end="97:33">.</operator><name pos:start="97:34" pos:end="97:41">iov_base</name></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:32"><expr pos:start="99:13" pos:end="99:31"><call pos:start="99:13" pos:end="99:31"><name pos:start="99:13" pos:end="99:18">assert</name><argument_list pos:start="99:19" pos:end="99:31">(<argument pos:start="99:20" pos:end="99:30"><expr pos:start="99:20" pos:end="99:30"><name pos:start="99:20" pos:end="99:23">prem</name> <operator pos:start="99:25" pos:end="99:26">&lt;=</operator> <name pos:start="99:28" pos:end="99:30">rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:30"><expr pos:start="103:9" pos:end="103:29"><name pos:start="103:9" pos:end="103:12">aurb</name> <operator pos:start="103:14" pos:end="103:14">=</operator> <call pos:start="103:16" pos:end="103:29"><name pos:start="103:16" pos:end="103:26">async_alloc</name><argument_list pos:start="103:27" pos:end="103:29">(<argument pos:start="103:28" pos:end="103:28"><expr pos:start="103:28" pos:end="103:28"><name pos:start="103:28" pos:end="103:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:25"><expr pos:start="105:9" pos:end="105:24"><name pos:start="105:9" pos:end="105:20"><name pos:start="105:9" pos:end="105:12">aurb</name><operator pos:start="105:13" pos:end="105:14">-&gt;</operator><name pos:start="105:15" pos:end="105:20">packet</name></name> <operator pos:start="105:22" pos:end="105:22">=</operator> <name pos:start="105:24" pos:end="105:24">p</name></expr>;</expr_stmt>



        <expr_stmt pos:start="109:9" pos:end="109:25"><expr pos:start="109:9" pos:end="109:24"><name pos:start="109:9" pos:end="109:11">urb</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <operator pos:start="109:15" pos:end="109:15">&amp;</operator><name pos:start="109:16" pos:end="109:24"><name pos:start="109:16" pos:end="109:19">aurb</name><operator pos:start="109:20" pos:end="109:21">-&gt;</operator><name pos:start="109:22" pos:end="109:24">urb</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:32"><expr pos:start="111:9" pos:end="111:31"><name pos:start="111:9" pos:end="111:21"><name pos:start="111:9" pos:end="111:11">urb</name><operator pos:start="111:12" pos:end="111:13">-&gt;</operator><name pos:start="111:14" pos:end="111:21">endpoint</name></name>      <operator pos:start="111:28" pos:end="111:28">=</operator> <name pos:start="111:30" pos:end="111:31">ep</name></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:55"><expr pos:start="113:9" pos:end="113:54"><name pos:start="113:9" pos:end="113:17"><name pos:start="113:9" pos:end="113:11">urb</name><operator pos:start="113:12" pos:end="113:13">-&gt;</operator><name pos:start="113:14" pos:end="113:17">type</name></name>          <operator pos:start="113:28" pos:end="113:28">=</operator> <call pos:start="113:30" pos:end="113:54"><name pos:start="113:30" pos:end="113:48">usb_host_usbfs_type</name><argument_list pos:start="113:49" pos:end="113:54">(<argument pos:start="113:50" pos:end="113:50"><expr pos:start="113:50" pos:end="113:50"><name pos:start="113:50" pos:end="113:50">s</name></expr></argument>, <argument pos:start="113:53" pos:end="113:53"><expr pos:start="113:53" pos:end="113:53"><name pos:start="113:53" pos:end="113:53">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:31"><expr pos:start="115:9" pos:end="115:30"><name pos:start="115:9" pos:end="115:24"><name pos:start="115:9" pos:end="115:11">urb</name><operator pos:start="115:12" pos:end="115:13">-&gt;</operator><name pos:start="115:14" pos:end="115:24">usercontext</name></name>   <operator pos:start="115:28" pos:end="115:28">=</operator> <name pos:start="115:30" pos:end="115:30">s</name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:34"><expr pos:start="117:9" pos:end="117:33"><name pos:start="117:9" pos:end="117:19"><name pos:start="117:9" pos:end="117:11">urb</name><operator pos:start="117:12" pos:end="117:13">-&gt;</operator><name pos:start="117:14" pos:end="117:19">buffer</name></name>        <operator pos:start="117:28" pos:end="117:28">=</operator> <name pos:start="117:30" pos:end="117:33">pbuf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:34"><expr pos:start="119:9" pos:end="119:33"><name pos:start="119:9" pos:end="119:26"><name pos:start="119:9" pos:end="119:11">urb</name><operator pos:start="119:12" pos:end="119:13">-&gt;</operator><name pos:start="119:14" pos:end="119:26">buffer_length</name></name> <operator pos:start="119:28" pos:end="119:28">=</operator> <name pos:start="119:30" pos:end="119:33">prem</name></expr>;</expr_stmt>



        <if_stmt pos:start="123:9" pos:end="127:9"><if pos:start="123:9" pos:end="127:9">if <condition pos:start="123:12" pos:end="123:55">(<expr pos:start="123:13" pos:end="123:54"><name pos:start="123:13" pos:end="123:30"><name pos:start="123:13" pos:end="123:15">urb</name><operator pos:start="123:16" pos:end="123:17">-&gt;</operator><name pos:start="123:18" pos:end="123:30">buffer_length</name></name> <operator pos:start="123:32" pos:end="123:32">&gt;</operator> <name pos:start="123:34" pos:end="123:54">MAX_USBFS_BUFFER_SIZE</name></expr>)</condition> <block pos:start="123:57" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:55">

            <expr_stmt pos:start="125:13" pos:end="125:55"><expr pos:start="125:13" pos:end="125:54"><name pos:start="125:13" pos:end="125:30"><name pos:start="125:13" pos:end="125:15">urb</name><operator pos:start="125:16" pos:end="125:17">-&gt;</operator><name pos:start="125:18" pos:end="125:30">buffer_length</name></name> <operator pos:start="125:32" pos:end="125:32">=</operator> <name pos:start="125:34" pos:end="125:54">MAX_USBFS_BUFFER_SIZE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:35"><expr pos:start="129:9" pos:end="129:34"><name pos:start="129:9" pos:end="129:12">pbuf</name> <operator pos:start="129:14" pos:end="129:15">+=</operator> <name pos:start="129:17" pos:end="129:34"><name pos:start="129:17" pos:end="129:19">urb</name><operator pos:start="129:20" pos:end="129:21">-&gt;</operator><name pos:start="129:22" pos:end="129:34">buffer_length</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:35"><expr pos:start="131:9" pos:end="131:34"><name pos:start="131:9" pos:end="131:12">prem</name> <operator pos:start="131:14" pos:end="131:15">-=</operator> <name pos:start="131:17" pos:end="131:34"><name pos:start="131:17" pos:end="131:19">urb</name><operator pos:start="131:20" pos:end="131:21">-&gt;</operator><name pos:start="131:22" pos:end="131:34">buffer_length</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:35"><expr pos:start="133:9" pos:end="133:34"><name pos:start="133:9" pos:end="133:11">rem</name>  <operator pos:start="133:14" pos:end="133:15">-=</operator> <name pos:start="133:17" pos:end="133:34"><name pos:start="133:17" pos:end="133:19">urb</name><operator pos:start="133:20" pos:end="133:21">-&gt;</operator><name pos:start="133:22" pos:end="133:34">buffer_length</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="135:9" pos:end="139:9"><if pos:start="135:9" pos:end="139:9">if <condition pos:start="135:12" pos:end="135:16">(<expr pos:start="135:13" pos:end="135:15"><name pos:start="135:13" pos:end="135:15">rem</name></expr>)</condition> <block pos:start="135:18" pos:end="139:9">{<block_content pos:start="137:13" pos:end="137:35">

            <expr_stmt pos:start="137:13" pos:end="137:35"><expr pos:start="137:13" pos:end="137:34"><name pos:start="137:13" pos:end="137:22"><name pos:start="137:13" pos:end="137:16">aurb</name><operator pos:start="137:17" pos:end="137:18">-&gt;</operator><name pos:start="137:19" pos:end="137:22">more</name></name>         <operator pos:start="137:32" pos:end="137:32">=</operator> <literal type="number" pos:start="137:34" pos:end="137:34">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="143:9" pos:end="145:66"><expr pos:start="143:9" pos:end="145:65"><call pos:start="143:9" pos:end="145:65"><name pos:start="143:9" pos:end="143:33">trace_usb_host_urb_submit</name><argument_list pos:start="143:34" pos:end="145:65">(<argument pos:start="143:35" pos:end="143:44"><expr pos:start="143:35" pos:end="143:44"><name pos:start="143:35" pos:end="143:44"><name pos:start="143:35" pos:end="143:35">s</name><operator pos:start="143:36" pos:end="143:37">-&gt;</operator><name pos:start="143:38" pos:end="143:44">bus_num</name></name></expr></argument>, <argument pos:start="143:47" pos:end="143:53"><expr pos:start="143:47" pos:end="143:53"><name pos:start="143:47" pos:end="143:53"><name pos:start="143:47" pos:end="143:47">s</name><operator pos:start="143:48" pos:end="143:49">-&gt;</operator><name pos:start="143:50" pos:end="143:53">addr</name></name></expr></argument>, <argument pos:start="143:56" pos:end="143:59"><expr pos:start="143:56" pos:end="143:59"><name pos:start="143:56" pos:end="143:59">aurb</name></expr></argument>,

                                  <argument pos:start="145:35" pos:end="145:52"><expr pos:start="145:35" pos:end="145:52"><name pos:start="145:35" pos:end="145:52"><name pos:start="145:35" pos:end="145:37">urb</name><operator pos:start="145:38" pos:end="145:39">-&gt;</operator><name pos:start="145:40" pos:end="145:52">buffer_length</name></name></expr></argument>, <argument pos:start="145:55" pos:end="145:64"><expr pos:start="145:55" pos:end="145:64"><name pos:start="145:55" pos:end="145:64"><name pos:start="145:55" pos:end="145:58">aurb</name><operator pos:start="145:59" pos:end="145:60">-&gt;</operator><name pos:start="145:61" pos:end="145:64">more</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:52"><expr pos:start="147:9" pos:end="147:51"><name pos:start="147:9" pos:end="147:11">ret</name> <operator pos:start="147:13" pos:end="147:13">=</operator> <call pos:start="147:15" pos:end="147:51"><name pos:start="147:15" pos:end="147:19">ioctl</name><argument_list pos:start="147:20" pos:end="147:51">(<argument pos:start="147:21" pos:end="147:25"><expr pos:start="147:21" pos:end="147:25"><name pos:start="147:21" pos:end="147:25"><name pos:start="147:21" pos:end="147:21">s</name><operator pos:start="147:22" pos:end="147:23">-&gt;</operator><name pos:start="147:24" pos:end="147:25">fd</name></name></expr></argument>, <argument pos:start="147:28" pos:end="147:45"><expr pos:start="147:28" pos:end="147:45"><name pos:start="147:28" pos:end="147:45">USBDEVFS_SUBMITURB</name></expr></argument>, <argument pos:start="147:48" pos:end="147:50"><expr pos:start="147:48" pos:end="147:50"><name pos:start="147:48" pos:end="147:50">urb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="151:9" pos:end="153:72"><expr pos:start="151:9" pos:end="153:71"><call pos:start="151:9" pos:end="153:71"><name pos:start="151:9" pos:end="151:15">DPRINTF</name><argument_list pos:start="151:16" pos:end="153:71">(<argument pos:start="151:17" pos:end="151:83"><expr pos:start="151:17" pos:end="151:83"><literal type="string" pos:start="151:17" pos:end="151:83">"husb: data submit: ep 0x%x, len %u, more %d, packet %p, aurb %p\n"</literal></expr></argument>,

                <argument pos:start="153:17" pos:end="153:29"><expr pos:start="153:17" pos:end="153:29"><name pos:start="153:17" pos:end="153:29"><name pos:start="153:17" pos:end="153:19">urb</name><operator pos:start="153:20" pos:end="153:21">-&gt;</operator><name pos:start="153:22" pos:end="153:29">endpoint</name></name></expr></argument>, <argument pos:start="153:32" pos:end="153:49"><expr pos:start="153:32" pos:end="153:49"><name pos:start="153:32" pos:end="153:49"><name pos:start="153:32" pos:end="153:34">urb</name><operator pos:start="153:35" pos:end="153:36">-&gt;</operator><name pos:start="153:37" pos:end="153:49">buffer_length</name></name></expr></argument>, <argument pos:start="153:52" pos:end="153:61"><expr pos:start="153:52" pos:end="153:61"><name pos:start="153:52" pos:end="153:61"><name pos:start="153:52" pos:end="153:55">aurb</name><operator pos:start="153:56" pos:end="153:57">-&gt;</operator><name pos:start="153:58" pos:end="153:61">more</name></name></expr></argument>, <argument pos:start="153:64" pos:end="153:64"><expr pos:start="153:64" pos:end="153:64"><name pos:start="153:64" pos:end="153:64">p</name></expr></argument>, <argument pos:start="153:67" pos:end="153:70"><expr pos:start="153:67" pos:end="153:70"><name pos:start="153:67" pos:end="153:70">aurb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="157:9" pos:end="183:9"><if pos:start="157:9" pos:end="183:9">if <condition pos:start="157:12" pos:end="157:20">(<expr pos:start="157:13" pos:end="157:19"><name pos:start="157:13" pos:end="157:15">ret</name> <operator pos:start="157:17" pos:end="157:17">&lt;</operator> <literal type="number" pos:start="157:19" pos:end="157:19">0</literal></expr>)</condition> <block pos:start="157:22" pos:end="183:9">{<block_content pos:start="159:13" pos:end="181:13">

            <expr_stmt pos:start="159:13" pos:end="159:41"><expr pos:start="159:13" pos:end="159:40"><call pos:start="159:13" pos:end="159:40"><name pos:start="159:13" pos:end="159:18">perror</name><argument_list pos:start="159:19" pos:end="159:40">(<argument pos:start="159:20" pos:end="159:39"><expr pos:start="159:20" pos:end="159:39"><literal type="string" pos:start="159:20" pos:end="159:39">"USBDEVFS_SUBMITURB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:29"><expr pos:start="161:13" pos:end="161:28"><call pos:start="161:13" pos:end="161:28"><name pos:start="161:13" pos:end="161:22">async_free</name><argument_list pos:start="161:23" pos:end="161:28">(<argument pos:start="161:24" pos:end="161:27"><expr pos:start="161:24" pos:end="161:27"><name pos:start="161:24" pos:end="161:27">aurb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <switch pos:start="165:13" pos:end="181:13">switch<condition pos:start="165:19" pos:end="165:25">(<expr pos:start="165:20" pos:end="165:24"><name pos:start="165:20" pos:end="165:24">errno</name></expr>)</condition> <block pos:start="165:27" pos:end="181:13">{<block_content pos:start="167:13" pos:end="179:37">

            <case pos:start="167:13" pos:end="167:27">case <expr pos:start="167:18" pos:end="167:26"><name pos:start="167:18" pos:end="167:26">ETIMEDOUT</name></expr>:</case>

                <expr_stmt pos:start="169:17" pos:end="169:78"><expr pos:start="169:17" pos:end="169:77"><call pos:start="169:17" pos:end="169:77"><name pos:start="169:17" pos:end="169:43">trace_usb_host_req_complete</name><argument_list pos:start="169:44" pos:end="169:77">(<argument pos:start="169:45" pos:end="169:54"><expr pos:start="169:45" pos:end="169:54"><name pos:start="169:45" pos:end="169:54"><name pos:start="169:45" pos:end="169:45">s</name><operator pos:start="169:46" pos:end="169:47">-&gt;</operator><name pos:start="169:48" pos:end="169:54">bus_num</name></name></expr></argument>, <argument pos:start="169:57" pos:end="169:63"><expr pos:start="169:57" pos:end="169:63"><name pos:start="169:57" pos:end="169:63"><name pos:start="169:57" pos:end="169:57">s</name><operator pos:start="169:58" pos:end="169:59">-&gt;</operator><name pos:start="169:60" pos:end="169:63">addr</name></name></expr></argument>, <argument pos:start="169:66" pos:end="169:76"><expr pos:start="169:66" pos:end="169:76"><name pos:start="169:66" pos:end="169:76">USB_RET_NAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="171:17" pos:end="171:35">return <expr pos:start="171:24" pos:end="171:34"><name pos:start="171:24" pos:end="171:34">USB_RET_NAK</name></expr>;</return>

            <case pos:start="173:13" pos:end="173:23">case <expr pos:start="173:18" pos:end="173:22"><name pos:start="173:18" pos:end="173:22">EPIPE</name></expr>:</case>

            <default pos:start="175:13" pos:end="175:20">default:</default>

                <expr_stmt pos:start="177:17" pos:end="177:80"><expr pos:start="177:17" pos:end="177:79"><call pos:start="177:17" pos:end="177:79"><name pos:start="177:17" pos:end="177:43">trace_usb_host_req_complete</name><argument_list pos:start="177:44" pos:end="177:79">(<argument pos:start="177:45" pos:end="177:54"><expr pos:start="177:45" pos:end="177:54"><name pos:start="177:45" pos:end="177:54"><name pos:start="177:45" pos:end="177:45">s</name><operator pos:start="177:46" pos:end="177:47">-&gt;</operator><name pos:start="177:48" pos:end="177:54">bus_num</name></name></expr></argument>, <argument pos:start="177:57" pos:end="177:63"><expr pos:start="177:57" pos:end="177:63"><name pos:start="177:57" pos:end="177:63"><name pos:start="177:57" pos:end="177:57">s</name><operator pos:start="177:58" pos:end="177:59">-&gt;</operator><name pos:start="177:60" pos:end="177:63">addr</name></name></expr></argument>, <argument pos:start="177:66" pos:end="177:78"><expr pos:start="177:66" pos:end="177:78"><name pos:start="177:66" pos:end="177:78">USB_RET_STALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="179:17" pos:end="179:37">return <expr pos:start="179:24" pos:end="179:36"><name pos:start="179:24" pos:end="179:36">USB_RET_STALL</name></expr>;</return>

            </block_content>}</block></switch>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <return pos:start="189:5" pos:end="189:25">return <expr pos:start="189:12" pos:end="189:24"><name pos:start="189:12" pos:end="189:24">USB_RET_ASYNC</name></expr>;</return>

</block_content>}</block></function>
</unit>
