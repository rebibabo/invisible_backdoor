<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9568.c" pos:tabs="8"><function pos:start="1:1" pos:end="147:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">tlb_set_page</name><parameter_list pos:start="1:18" pos:end="5:49">(<parameter pos:start="1:19" pos:end="1:31"><decl pos:start="1:19" pos:end="1:31"><type pos:start="1:19" pos:end="1:31"><name pos:start="1:19" pos:end="1:26">CPUState</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:31">cpu</name></decl></parameter>, <parameter pos:start="1:34" pos:end="1:51"><decl pos:start="1:34" pos:end="1:51"><type pos:start="1:34" pos:end="1:51"><name pos:start="1:34" pos:end="1:45">target_ulong</name></type> <name pos:start="1:47" pos:end="1:51">vaddr</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:30"><decl pos:start="3:19" pos:end="3:30"><type pos:start="3:19" pos:end="3:30"><name pos:start="3:19" pos:end="3:24">hwaddr</name></type> <name pos:start="3:26" pos:end="3:30">paddr</name></decl></parameter>, <parameter pos:start="3:33" pos:end="3:40"><decl pos:start="3:33" pos:end="3:40"><type pos:start="3:33" pos:end="3:40"><name pos:start="3:33" pos:end="3:35">int</name></type> <name pos:start="3:37" pos:end="3:40">prot</name></decl></parameter>,

                  <parameter pos:start="5:19" pos:end="5:29"><decl pos:start="5:19" pos:end="5:29"><type pos:start="5:19" pos:end="5:29"><name pos:start="5:19" pos:end="5:21">int</name></type> <name pos:start="5:23" pos:end="5:29">mmu_idx</name></decl></parameter>, <parameter pos:start="5:32" pos:end="5:48"><decl pos:start="5:32" pos:end="5:48"><type pos:start="5:32" pos:end="5:48"><name pos:start="5:32" pos:end="5:43">target_ulong</name></type> <name pos:start="5:45" pos:end="5:48">size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="147:1">{<block_content pos:start="9:5" pos:end="145:5">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">CPUArchState</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">env</name> <init pos:start="9:23" pos:end="9:36">= <expr pos:start="9:25" pos:end="9:36"><name pos:start="9:25" pos:end="9:36"><name pos:start="9:25" pos:end="9:27">cpu</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:36">env_ptr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:23">MemoryRegionSection</name> <modifier pos:start="11:25" pos:end="11:25">*</modifier></type><name pos:start="11:26" pos:end="11:32">section</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:16">int</name></type> <name pos:start="13:18" pos:end="13:22">index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16">target_ulong</name></type> <name pos:start="15:18" pos:end="15:24">address</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:30"><decl pos:start="17:5" pos:end="17:29"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:16">target_ulong</name></type> <name pos:start="17:18" pos:end="17:29">code_address</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:13">uintptr_t</name></type> <name pos:start="19:15" pos:end="19:20">addend</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:20"><decl pos:start="21:5" pos:end="21:19"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:15">CPUTLBEntry</name> <modifier pos:start="21:17" pos:end="21:17">*</modifier></type><name pos:start="21:18" pos:end="21:19">te</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:27"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:10">hwaddr</name></type> <name pos:start="23:12" pos:end="23:16">iotlb</name></decl>, <decl pos:start="23:19" pos:end="23:22"><type ref="prev" pos:start="23:5" pos:end="23:10"/><name pos:start="23:19" pos:end="23:22">xlat</name></decl>, <decl pos:start="23:25" pos:end="23:26"><type ref="prev" pos:start="23:5" pos:end="23:10"/><name pos:start="23:25" pos:end="23:26">sz</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:37"><expr pos:start="27:5" pos:end="27:36"><call pos:start="27:5" pos:end="27:36"><name pos:start="27:5" pos:end="27:10">assert</name><argument_list pos:start="27:11" pos:end="27:36">(<argument pos:start="27:12" pos:end="27:35"><expr pos:start="27:12" pos:end="27:35"><name pos:start="27:12" pos:end="27:15">size</name> <operator pos:start="27:17" pos:end="27:18">&gt;=</operator> <name pos:start="27:20" pos:end="27:35">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:33">(<expr pos:start="29:9" pos:end="29:32"><name pos:start="29:9" pos:end="29:12">size</name> <operator pos:start="29:14" pos:end="29:15">!=</operator> <name pos:start="29:17" pos:end="29:32">TARGET_PAGE_SIZE</name></expr>)</condition> <block pos:start="29:35" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:45">

        <expr_stmt pos:start="31:9" pos:end="31:45"><expr pos:start="31:9" pos:end="31:44"><call pos:start="31:9" pos:end="31:44"><name pos:start="31:9" pos:end="31:26">tlb_add_large_page</name><argument_list pos:start="31:27" pos:end="31:44">(<argument pos:start="31:28" pos:end="31:30"><expr pos:start="31:28" pos:end="31:30"><name pos:start="31:28" pos:end="31:30">env</name></expr></argument>, <argument pos:start="31:33" pos:end="31:37"><expr pos:start="31:33" pos:end="31:37"><name pos:start="31:33" pos:end="31:37">vaddr</name></expr></argument>, <argument pos:start="31:40" pos:end="31:43"><expr pos:start="31:40" pos:end="31:43"><name pos:start="31:40" pos:end="31:43">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:14"><expr pos:start="37:5" pos:end="37:13"><name pos:start="37:5" pos:end="37:6">sz</name> <operator pos:start="37:8" pos:end="37:8">=</operator> <name pos:start="37:10" pos:end="37:13">size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="41:60"><expr pos:start="39:5" pos:end="41:59"><name pos:start="39:5" pos:end="39:11">section</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="41:59"><name pos:start="39:15" pos:end="39:47">address_space_translate_for_iotlb</name><argument_list pos:start="39:48" pos:end="41:59">(<argument pos:start="39:49" pos:end="39:55"><expr pos:start="39:49" pos:end="39:55"><name pos:start="39:49" pos:end="39:55"><name pos:start="39:49" pos:end="39:51">cpu</name><operator pos:start="39:52" pos:end="39:53">-&gt;</operator><name pos:start="39:54" pos:end="39:55">as</name></name></expr></argument>, <argument pos:start="39:58" pos:end="39:62"><expr pos:start="39:58" pos:end="39:62"><name pos:start="39:58" pos:end="39:62">paddr</name></expr></argument>,

                                                <argument pos:start="41:49" pos:end="41:53"><expr pos:start="41:49" pos:end="41:53"><operator pos:start="41:49" pos:end="41:49">&amp;</operator><name pos:start="41:50" pos:end="41:53">xlat</name></expr></argument>, <argument pos:start="41:56" pos:end="41:58"><expr pos:start="41:56" pos:end="41:58"><operator pos:start="41:56" pos:end="41:56">&amp;</operator><name pos:start="41:57" pos:end="41:58">sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="48:0"><expr pos:start="43:5" pos:end="43:34"><call pos:start="43:5" pos:end="43:34"><name pos:start="43:5" pos:end="43:10">assert</name><argument_list pos:start="43:11" pos:end="43:34">(<argument pos:start="43:12" pos:end="43:33"><expr pos:start="43:12" pos:end="43:33"><name pos:start="43:12" pos:end="43:13">sz</name> <operator pos:start="43:15" pos:end="43:16">&gt;=</operator> <name pos:start="43:18" pos:end="43:33">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="47:1" pos:end="47:22">#<cpp:directive pos:start="47:2" pos:end="47:3">if</cpp:directive> <expr pos:start="47:5" pos:end="47:22"><call pos:start="47:5" pos:end="47:22"><name pos:start="47:5" pos:end="47:11">defined</name><argument_list pos:start="47:12" pos:end="47:22">(<argument pos:start="47:13" pos:end="47:21"><expr pos:start="47:13" pos:end="47:21"><name pos:start="47:13" pos:end="47:21">DEBUG_TLB</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="49:5" pos:end="56:0"><expr pos:start="49:5" pos:end="53:39"><call pos:start="49:5" pos:end="53:39"><name pos:start="49:5" pos:end="49:10">printf</name><argument_list pos:start="49:11" pos:end="53:39">(<argument pos:start="49:12" pos:end="51:30"><expr pos:start="49:12" pos:end="51:30"><literal type="string" pos:start="49:12" pos:end="49:33">"tlb_set_page: vaddr="</literal> <name pos:start="49:35" pos:end="49:47">TARGET_FMT_lx</name> <literal type="string" pos:start="49:49" pos:end="49:59">" paddr=0x"</literal> <name pos:start="49:61" pos:end="49:74">TARGET_FMT_plx</name>

           <literal type="string" pos:start="51:12" pos:end="51:30">" prot=%x idx=%d\n"</literal></expr></argument>,

           <argument pos:start="53:12" pos:end="53:16"><expr pos:start="53:12" pos:end="53:16"><name pos:start="53:12" pos:end="53:16">vaddr</name></expr></argument>, <argument pos:start="53:19" pos:end="53:23"><expr pos:start="53:19" pos:end="53:23"><name pos:start="53:19" pos:end="53:23">paddr</name></expr></argument>, <argument pos:start="53:26" pos:end="53:29"><expr pos:start="53:26" pos:end="53:29"><name pos:start="53:26" pos:end="53:29">prot</name></expr></argument>, <argument pos:start="53:32" pos:end="53:38"><expr pos:start="53:32" pos:end="53:38"><name pos:start="53:32" pos:end="53:38">mmu_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="55:1" pos:end="55:6">#<cpp:directive pos:start="55:2" pos:end="55:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="59:5" pos:end="59:20"><expr pos:start="59:5" pos:end="59:19"><name pos:start="59:5" pos:end="59:11">address</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <name pos:start="59:15" pos:end="59:19">vaddr</name></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="75:5"><if pos:start="61:5" pos:end="69:5">if <condition pos:start="61:8" pos:end="61:82">(<expr pos:start="61:9" pos:end="61:81"><operator pos:start="61:9" pos:end="61:9">!</operator><call pos:start="61:10" pos:end="61:42"><name pos:start="61:10" pos:end="61:29">memory_region_is_ram</name><argument_list pos:start="61:30" pos:end="61:42">(<argument pos:start="61:31" pos:end="61:41"><expr pos:start="61:31" pos:end="61:41"><name pos:start="61:31" pos:end="61:41"><name pos:start="61:31" pos:end="61:37">section</name><operator pos:start="61:38" pos:end="61:39">-&gt;</operator><name pos:start="61:40" pos:end="61:41">mr</name></name></expr></argument>)</argument_list></call> <operator pos:start="61:44" pos:end="61:45">&amp;&amp;</operator> <operator pos:start="61:47" pos:end="61:47">!</operator><call pos:start="61:48" pos:end="61:81"><name pos:start="61:48" pos:end="61:68">memory_region_is_romd</name><argument_list pos:start="61:69" pos:end="61:81">(<argument pos:start="61:70" pos:end="61:80"><expr pos:start="61:70" pos:end="61:80"><name pos:start="61:70" pos:end="61:80"><name pos:start="61:70" pos:end="61:76">section</name><operator pos:start="61:77" pos:end="61:78">-&gt;</operator><name pos:start="61:79" pos:end="61:80">mr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:84" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:19">

        <comment type="block" pos:start="63:9" pos:end="63:28">/* IO memory case */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:28"><expr pos:start="65:9" pos:end="65:27"><name pos:start="65:9" pos:end="65:15">address</name> <operator pos:start="65:17" pos:end="65:18">|=</operator> <name pos:start="65:20" pos:end="65:27">TLB_MMIO</name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:19"><expr pos:start="67:9" pos:end="67:18"><name pos:start="67:9" pos:end="67:14">addend</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <literal type="number" pos:start="67:18" pos:end="67:18">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="69:7" pos:end="75:5">else <block pos:start="69:12" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:74">

        <comment type="block" pos:start="71:9" pos:end="71:49">/* TLB_MMIO for rom/romd handled below */</comment>

        <expr_stmt pos:start="73:9" pos:end="73:74"><expr pos:start="73:9" pos:end="73:73"><name pos:start="73:9" pos:end="73:14">addend</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <operator pos:start="73:18" pos:end="73:18">(</operator><name pos:start="73:19" pos:end="73:27">uintptr_t</name><operator pos:start="73:28" pos:end="73:28">)</operator><call pos:start="73:29" pos:end="73:66"><name pos:start="73:29" pos:end="73:53">memory_region_get_ram_ptr</name><argument_list pos:start="73:54" pos:end="73:66">(<argument pos:start="73:55" pos:end="73:65"><expr pos:start="73:55" pos:end="73:65"><name pos:start="73:55" pos:end="73:65"><name pos:start="73:55" pos:end="73:61">section</name><operator pos:start="73:62" pos:end="73:63">-&gt;</operator><name pos:start="73:64" pos:end="73:65">mr</name></name></expr></argument>)</argument_list></call> <operator pos:start="73:68" pos:end="73:68">+</operator> <name pos:start="73:70" pos:end="73:73">xlat</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:27"><expr pos:start="79:5" pos:end="79:26"><name pos:start="79:5" pos:end="79:16">code_address</name> <operator pos:start="79:18" pos:end="79:18">=</operator> <name pos:start="79:20" pos:end="79:26">address</name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="83:60"><expr pos:start="81:5" pos:end="83:59"><name pos:start="81:5" pos:end="81:9">iotlb</name> <operator pos:start="81:11" pos:end="81:11">=</operator> <call pos:start="81:13" pos:end="83:59"><name pos:start="81:13" pos:end="81:43">memory_region_section_get_iotlb</name><argument_list pos:start="81:44" pos:end="83:59">(<argument pos:start="81:45" pos:end="81:47"><expr pos:start="81:45" pos:end="81:47"><name pos:start="81:45" pos:end="81:47">cpu</name></expr></argument>, <argument pos:start="81:50" pos:end="81:56"><expr pos:start="81:50" pos:end="81:56"><name pos:start="81:50" pos:end="81:56">section</name></expr></argument>, <argument pos:start="81:59" pos:end="81:63"><expr pos:start="81:59" pos:end="81:63"><name pos:start="81:59" pos:end="81:63">vaddr</name></expr></argument>, <argument pos:start="81:66" pos:end="81:70"><expr pos:start="81:66" pos:end="81:70"><name pos:start="81:66" pos:end="81:70">paddr</name></expr></argument>, <argument pos:start="81:73" pos:end="81:76"><expr pos:start="81:73" pos:end="81:76"><name pos:start="81:73" pos:end="81:76">xlat</name></expr></argument>,

                                            <argument pos:start="83:45" pos:end="83:48"><expr pos:start="83:45" pos:end="83:48"><name pos:start="83:45" pos:end="83:48">prot</name></expr></argument>, <argument pos:start="83:51" pos:end="83:58"><expr pos:start="83:51" pos:end="83:58"><operator pos:start="83:51" pos:end="83:51">&amp;</operator><name pos:start="83:52" pos:end="83:58">address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:61"><expr pos:start="87:5" pos:end="87:60"><name pos:start="87:5" pos:end="87:9">index</name> <operator pos:start="87:11" pos:end="87:11">=</operator> <operator pos:start="87:13" pos:end="87:13">(</operator><name pos:start="87:14" pos:end="87:18">vaddr</name> <operator pos:start="87:20" pos:end="87:21">&gt;&gt;</operator> <name pos:start="87:23" pos:end="87:38">TARGET_PAGE_BITS</name><operator pos:start="87:39" pos:end="87:39">)</operator> <operator pos:start="87:41" pos:end="87:41">&amp;</operator> <operator pos:start="87:43" pos:end="87:43">(</operator><name pos:start="87:44" pos:end="87:55">CPU_TLB_SIZE</name> <operator pos:start="87:57" pos:end="87:57">-</operator> <literal type="number" pos:start="87:59" pos:end="87:59">1</literal><operator pos:start="87:60" pos:end="87:60">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:47"><expr pos:start="89:5" pos:end="89:46"><name pos:start="89:5" pos:end="89:30"><name pos:start="89:5" pos:end="89:7">env</name><operator pos:start="89:8" pos:end="89:9">-&gt;</operator><name pos:start="89:10" pos:end="89:14">iotlb</name><index pos:start="89:15" pos:end="89:23">[<expr pos:start="89:16" pos:end="89:22"><name pos:start="89:16" pos:end="89:22">mmu_idx</name></expr>]</index><index pos:start="89:24" pos:end="89:30">[<expr pos:start="89:25" pos:end="89:29"><name pos:start="89:25" pos:end="89:29">index</name></expr>]</index></name> <operator pos:start="89:32" pos:end="89:32">=</operator> <name pos:start="89:34" pos:end="89:38">iotlb</name> <operator pos:start="89:40" pos:end="89:40">-</operator> <name pos:start="89:42" pos:end="89:46">vaddr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:41"><expr pos:start="91:5" pos:end="91:40"><name pos:start="91:5" pos:end="91:6">te</name> <operator pos:start="91:8" pos:end="91:8">=</operator> <operator pos:start="91:10" pos:end="91:10">&amp;</operator><name pos:start="91:11" pos:end="91:40"><name pos:start="91:11" pos:end="91:13">env</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:24">tlb_table</name><index pos:start="91:25" pos:end="91:33">[<expr pos:start="91:26" pos:end="91:32"><name pos:start="91:26" pos:end="91:32">mmu_idx</name></expr>]</index><index pos:start="91:34" pos:end="91:40">[<expr pos:start="91:35" pos:end="91:39"><name pos:start="91:35" pos:end="91:39">index</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:32"><expr pos:start="93:5" pos:end="93:31"><name pos:start="93:5" pos:end="93:14"><name pos:start="93:5" pos:end="93:6">te</name><operator pos:start="93:7" pos:end="93:8">-&gt;</operator><name pos:start="93:9" pos:end="93:14">addend</name></name> <operator pos:start="93:16" pos:end="93:16">=</operator> <name pos:start="93:18" pos:end="93:23">addend</name> <operator pos:start="93:25" pos:end="93:25">-</operator> <name pos:start="93:27" pos:end="93:31">vaddr</name></expr>;</expr_stmt>

    <if_stmt pos:start="95:5" pos:end="103:5"><if pos:start="95:5" pos:end="99:5">if <condition pos:start="95:8" pos:end="95:25">(<expr pos:start="95:9" pos:end="95:24"><name pos:start="95:9" pos:end="95:12">prot</name> <operator pos:start="95:14" pos:end="95:14">&amp;</operator> <name pos:start="95:16" pos:end="95:24">PAGE_READ</name></expr>)</condition> <block pos:start="95:27" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:32">

        <expr_stmt pos:start="97:9" pos:end="97:32"><expr pos:start="97:9" pos:end="97:31"><name pos:start="97:9" pos:end="97:21"><name pos:start="97:9" pos:end="97:10">te</name><operator pos:start="97:11" pos:end="97:12">-&gt;</operator><name pos:start="97:13" pos:end="97:21">addr_read</name></name> <operator pos:start="97:23" pos:end="97:23">=</operator> <name pos:start="97:25" pos:end="97:31">address</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="99:7" pos:end="103:5">else <block pos:start="99:12" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:27">

        <expr_stmt pos:start="101:9" pos:end="101:27"><expr pos:start="101:9" pos:end="101:26"><name pos:start="101:9" pos:end="101:21"><name pos:start="101:9" pos:end="101:10">te</name><operator pos:start="101:11" pos:end="101:12">-&gt;</operator><name pos:start="101:13" pos:end="101:21">addr_read</name></name> <operator pos:start="101:23" pos:end="101:23">=</operator> <operator pos:start="101:25" pos:end="101:25">-</operator><literal type="number" pos:start="101:26" pos:end="101:26">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="107:5" pos:end="115:5"><if pos:start="107:5" pos:end="111:5">if <condition pos:start="107:8" pos:end="107:25">(<expr pos:start="107:9" pos:end="107:24"><name pos:start="107:9" pos:end="107:12">prot</name> <operator pos:start="107:14" pos:end="107:14">&amp;</operator> <name pos:start="107:16" pos:end="107:24">PAGE_EXEC</name></expr>)</condition> <block pos:start="107:27" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:37">

        <expr_stmt pos:start="109:9" pos:end="109:37"><expr pos:start="109:9" pos:end="109:36"><name pos:start="109:9" pos:end="109:21"><name pos:start="109:9" pos:end="109:10">te</name><operator pos:start="109:11" pos:end="109:12">-&gt;</operator><name pos:start="109:13" pos:end="109:21">addr_code</name></name> <operator pos:start="109:23" pos:end="109:23">=</operator> <name pos:start="109:25" pos:end="109:36">code_address</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="111:7" pos:end="115:5">else <block pos:start="111:12" pos:end="115:5">{<block_content pos:start="113:9" pos:end="113:27">

        <expr_stmt pos:start="113:9" pos:end="113:27"><expr pos:start="113:9" pos:end="113:26"><name pos:start="113:9" pos:end="113:21"><name pos:start="113:9" pos:end="113:10">te</name><operator pos:start="113:11" pos:end="113:12">-&gt;</operator><name pos:start="113:13" pos:end="113:21">addr_code</name></name> <operator pos:start="113:23" pos:end="113:23">=</operator> <operator pos:start="113:25" pos:end="113:25">-</operator><literal type="number" pos:start="113:26" pos:end="113:26">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="117:5" pos:end="145:5"><if pos:start="117:5" pos:end="141:5">if <condition pos:start="117:8" pos:end="117:26">(<expr pos:start="117:9" pos:end="117:25"><name pos:start="117:9" pos:end="117:12">prot</name> <operator pos:start="117:14" pos:end="117:14">&amp;</operator> <name pos:start="117:16" pos:end="117:25">PAGE_WRITE</name></expr>)</condition> <block pos:start="117:28" pos:end="141:5">{<block_content pos:start="119:9" pos:end="139:9">

        <if_stmt pos:start="119:9" pos:end="139:9"><if pos:start="119:9" pos:end="127:9">if <condition pos:start="119:12" pos:end="121:50">(<expr pos:start="119:13" pos:end="121:49"><operator pos:start="119:13" pos:end="119:13">(</operator><call pos:start="119:14" pos:end="119:46"><name pos:start="119:14" pos:end="119:33">memory_region_is_ram</name><argument_list pos:start="119:34" pos:end="119:46">(<argument pos:start="119:35" pos:end="119:45"><expr pos:start="119:35" pos:end="119:45"><name pos:start="119:35" pos:end="119:45"><name pos:start="119:35" pos:end="119:41">section</name><operator pos:start="119:42" pos:end="119:43">-&gt;</operator><name pos:start="119:44" pos:end="119:45">mr</name></name></expr></argument>)</argument_list></call> <operator pos:start="119:48" pos:end="119:49">&amp;&amp;</operator> <name pos:start="119:51" pos:end="119:67"><name pos:start="119:51" pos:end="119:57">section</name><operator pos:start="119:58" pos:end="119:59">-&gt;</operator><name pos:start="119:60" pos:end="119:67">readonly</name></name><operator pos:start="119:68" pos:end="119:68">)</operator>

            <operator pos:start="121:13" pos:end="121:14">||</operator> <call pos:start="121:16" pos:end="121:49"><name pos:start="121:16" pos:end="121:36">memory_region_is_romd</name><argument_list pos:start="121:37" pos:end="121:49">(<argument pos:start="121:38" pos:end="121:48"><expr pos:start="121:38" pos:end="121:48"><name pos:start="121:38" pos:end="121:48"><name pos:start="121:38" pos:end="121:44">section</name><operator pos:start="121:45" pos:end="121:46">-&gt;</operator><name pos:start="121:47" pos:end="121:48">mr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="121:52" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:48">

            <comment type="block" pos:start="123:13" pos:end="123:55">/* Write access calls the I/O callback.  */</comment>

            <expr_stmt pos:start="125:13" pos:end="125:48"><expr pos:start="125:13" pos:end="125:47"><name pos:start="125:13" pos:end="125:26"><name pos:start="125:13" pos:end="125:14">te</name><operator pos:start="125:15" pos:end="125:16">-&gt;</operator><name pos:start="125:17" pos:end="125:26">addr_write</name></name> <operator pos:start="125:28" pos:end="125:28">=</operator> <name pos:start="125:30" pos:end="125:36">address</name> <operator pos:start="125:38" pos:end="125:38">|</operator> <name pos:start="125:40" pos:end="125:47">TLB_MMIO</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="127:11" pos:end="135:9">else if <condition pos:start="127:19" pos:end="131:59">(<expr pos:start="127:20" pos:end="131:58"><call pos:start="127:20" pos:end="127:52"><name pos:start="127:20" pos:end="127:39">memory_region_is_ram</name><argument_list pos:start="127:40" pos:end="127:52">(<argument pos:start="127:41" pos:end="127:51"><expr pos:start="127:41" pos:end="127:51"><name pos:start="127:41" pos:end="127:51"><name pos:start="127:41" pos:end="127:47">section</name><operator pos:start="127:48" pos:end="127:49">-&gt;</operator><name pos:start="127:50" pos:end="127:51">mr</name></name></expr></argument>)</argument_list></call>

                   <operator pos:start="129:20" pos:end="129:21">&amp;&amp;</operator> <call pos:start="129:23" pos:end="131:58"><name pos:start="129:23" pos:end="129:50">cpu_physical_memory_is_clean</name><argument_list pos:start="129:51" pos:end="131:58">(<argument pos:start="129:52" pos:end="131:57"><expr pos:start="129:52" pos:end="131:57"><name pos:start="129:52" pos:end="129:72"><name pos:start="129:52" pos:end="129:58">section</name><operator pos:start="129:59" pos:end="129:60">-&gt;</operator><name pos:start="129:61" pos:end="129:62">mr</name><operator pos:start="129:63" pos:end="129:64">-&gt;</operator><name pos:start="129:65" pos:end="129:72">ram_addr</name></name>

                                                   <operator pos:start="131:52" pos:end="131:52">+</operator> <name pos:start="131:54" pos:end="131:57">xlat</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="131:61" pos:end="135:9">{<block_content pos:start="133:13" pos:end="133:52">

            <expr_stmt pos:start="133:13" pos:end="133:52"><expr pos:start="133:13" pos:end="133:51"><name pos:start="133:13" pos:end="133:26"><name pos:start="133:13" pos:end="133:14">te</name><operator pos:start="133:15" pos:end="133:16">-&gt;</operator><name pos:start="133:17" pos:end="133:26">addr_write</name></name> <operator pos:start="133:28" pos:end="133:28">=</operator> <name pos:start="133:30" pos:end="133:36">address</name> <operator pos:start="133:38" pos:end="133:38">|</operator> <name pos:start="133:40" pos:end="133:51">TLB_NOTDIRTY</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="135:11" pos:end="139:9">else <block pos:start="135:16" pos:end="139:9">{<block_content pos:start="137:13" pos:end="137:37">

            <expr_stmt pos:start="137:13" pos:end="137:37"><expr pos:start="137:13" pos:end="137:36"><name pos:start="137:13" pos:end="137:26"><name pos:start="137:13" pos:end="137:14">te</name><operator pos:start="137:15" pos:end="137:16">-&gt;</operator><name pos:start="137:17" pos:end="137:26">addr_write</name></name> <operator pos:start="137:28" pos:end="137:28">=</operator> <name pos:start="137:30" pos:end="137:36">address</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="141:7" pos:end="145:5">else <block pos:start="141:12" pos:end="145:5">{<block_content pos:start="143:9" pos:end="143:28">

        <expr_stmt pos:start="143:9" pos:end="143:28"><expr pos:start="143:9" pos:end="143:27"><name pos:start="143:9" pos:end="143:22"><name pos:start="143:9" pos:end="143:10">te</name><operator pos:start="143:11" pos:end="143:12">-&gt;</operator><name pos:start="143:13" pos:end="143:22">addr_write</name></name> <operator pos:start="143:24" pos:end="143:24">=</operator> <operator pos:start="143:26" pos:end="143:26">-</operator><literal type="number" pos:start="143:27" pos:end="143:27">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
