<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5341.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">scsi_handle_rw_error</name><parameter_list pos:start="1:32" pos:end="1:68">(<parameter pos:start="1:33" pos:end="1:46"><decl pos:start="1:33" pos:end="1:46"><type pos:start="1:33" pos:end="1:46"><name pos:start="1:33" pos:end="1:43">SCSIDiskReq</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">r</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:57"><decl pos:start="1:49" pos:end="1:57"><type pos:start="1:49" pos:end="1:57"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:57">error</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:67"><decl pos:start="1:60" pos:end="1:67"><type pos:start="1:60" pos:end="1:67"><name pos:start="1:60" pos:end="1:62">int</name></type> <name pos:start="1:64" pos:end="1:67">type</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="5:5" pos:end="57:13">

    <decl_stmt pos:start="5:5" pos:end="5:55"><decl pos:start="5:5" pos:end="5:54"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:15">is_read</name> <init pos:start="5:17" pos:end="5:54">= <expr pos:start="5:19" pos:end="5:54"><operator pos:start="5:19" pos:end="5:19">(</operator><name pos:start="5:20" pos:end="5:23">type</name> <operator pos:start="5:25" pos:end="5:26">==</operator> <name pos:start="5:28" pos:end="5:53">SCSI_REQ_STATUS_RETRY_READ</name><operator pos:start="5:54" pos:end="5:54">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:66"><decl pos:start="7:5" pos:end="7:65"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">SCSIDiskState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:65">= <expr pos:start="7:24" pos:end="7:65"><call pos:start="7:24" pos:end="7:65"><name pos:start="7:24" pos:end="7:32">DO_UPCAST</name><argument_list pos:start="7:33" pos:end="7:65">(<argument pos:start="7:34" pos:end="7:46"><expr pos:start="7:34" pos:end="7:46"><name pos:start="7:34" pos:end="7:46">SCSIDiskState</name></expr></argument>, <argument pos:start="7:49" pos:end="7:52"><expr pos:start="7:49" pos:end="7:52"><name pos:start="7:49" pos:end="7:52">qdev</name></expr></argument>, <argument pos:start="7:55" pos:end="7:64"><expr pos:start="7:55" pos:end="7:64"><name pos:start="7:55" pos:end="7:64"><name pos:start="7:55" pos:end="7:55">r</name><operator pos:start="7:56" pos:end="7:57">-&gt;</operator><name pos:start="7:58" pos:end="7:60">req</name><operator pos:start="7:61" pos:end="7:61">.</operator><name pos:start="7:62" pos:end="7:64">dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:64"><decl pos:start="9:5" pos:end="9:63"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:20">BlockErrorAction</name></type> <name pos:start="9:22" pos:end="9:27">action</name> <init pos:start="9:29" pos:end="9:63">= <expr pos:start="9:31" pos:end="9:63"><call pos:start="9:31" pos:end="9:63"><name pos:start="9:31" pos:end="9:47">bdrv_get_on_error</name><argument_list pos:start="9:48" pos:end="9:63">(<argument pos:start="9:49" pos:end="9:53"><expr pos:start="9:49" pos:end="9:53"><name pos:start="9:49" pos:end="9:53"><name pos:start="9:49" pos:end="9:49">s</name><operator pos:start="9:50" pos:end="9:51">-&gt;</operator><name pos:start="9:52" pos:end="9:53">bs</name></name></expr></argument>, <argument pos:start="9:56" pos:end="9:62"><expr pos:start="9:56" pos:end="9:62"><name pos:start="9:56" pos:end="9:62">is_read</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:35">(<expr pos:start="13:9" pos:end="13:34"><name pos:start="13:9" pos:end="13:14">action</name> <operator pos:start="13:16" pos:end="13:17">==</operator> <name pos:start="13:19" pos:end="13:34">BLOCK_ERR_IGNORE</name></expr>)</condition> <block pos:start="13:37" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:17">

        <expr_stmt pos:start="15:9" pos:end="15:59"><expr pos:start="15:9" pos:end="15:58"><call pos:start="15:9" pos:end="15:58"><name pos:start="15:9" pos:end="15:22">bdrv_mon_event</name><argument_list pos:start="15:23" pos:end="15:58">(<argument pos:start="15:24" pos:end="15:28"><expr pos:start="15:24" pos:end="15:28"><name pos:start="15:24" pos:end="15:28"><name pos:start="15:24" pos:end="15:24">s</name><operator pos:start="15:25" pos:end="15:26">-&gt;</operator><name pos:start="15:27" pos:end="15:28">bs</name></name></expr></argument>, <argument pos:start="15:31" pos:end="15:48"><expr pos:start="15:31" pos:end="15:48"><name pos:start="15:31" pos:end="15:48">BDRV_ACTION_IGNORE</name></expr></argument>, <argument pos:start="15:51" pos:end="15:57"><expr pos:start="15:51" pos:end="15:57"><name pos:start="15:51" pos:end="15:57">is_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:17">return <expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="53:5"><if pos:start="23:5" pos:end="39:5">if <condition pos:start="23:8" pos:end="25:44">(<expr pos:start="23:9" pos:end="25:43"><operator pos:start="23:9" pos:end="23:9">(</operator><name pos:start="23:10" pos:end="23:14">error</name> <operator pos:start="23:16" pos:end="23:17">==</operator> <name pos:start="23:19" pos:end="23:24">ENOSPC</name> <operator pos:start="23:26" pos:end="23:27">&amp;&amp;</operator> <name pos:start="23:29" pos:end="23:34">action</name> <operator pos:start="23:36" pos:end="23:37">==</operator> <name pos:start="23:39" pos:end="23:59">BLOCK_ERR_STOP_ENOSPC</name><operator pos:start="23:60" pos:end="23:60">)</operator>

            <operator pos:start="25:13" pos:end="25:14">||</operator> <name pos:start="25:16" pos:end="25:21">action</name> <operator pos:start="25:23" pos:end="25:24">==</operator> <name pos:start="25:26" pos:end="25:43">BLOCK_ERR_STOP_ANY</name></expr>)</condition> <block pos:start="25:46" pos:end="39:5">{<block_content pos:start="29:9" pos:end="37:33">



        <expr_stmt pos:start="29:9" pos:end="29:48"><expr pos:start="29:9" pos:end="29:47"><name pos:start="29:9" pos:end="29:12">type</name> <operator pos:start="29:14" pos:end="29:15">&amp;=</operator> <name pos:start="29:17" pos:end="29:47">SCSI_REQ_STATUS_RETRY_TYPE_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:50"><expr pos:start="31:9" pos:end="31:49"><name pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:9">r</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:17">status</name></name> <operator pos:start="31:19" pos:end="31:20">|=</operator> <name pos:start="31:22" pos:end="31:42">SCSI_REQ_STATUS_RETRY</name> <operator pos:start="31:44" pos:end="31:44">|</operator> <name pos:start="31:46" pos:end="31:49">type</name></expr>;</expr_stmt>



        <expr_stmt pos:start="35:9" pos:end="35:57"><expr pos:start="35:9" pos:end="35:56"><call pos:start="35:9" pos:end="35:56"><name pos:start="35:9" pos:end="35:22">bdrv_mon_event</name><argument_list pos:start="35:23" pos:end="35:56">(<argument pos:start="35:24" pos:end="35:28"><expr pos:start="35:24" pos:end="35:28"><name pos:start="35:24" pos:end="35:28"><name pos:start="35:24" pos:end="35:24">s</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:28">bs</name></name></expr></argument>, <argument pos:start="35:31" pos:end="35:46"><expr pos:start="35:31" pos:end="35:46"><name pos:start="35:31" pos:end="35:46">BDRV_ACTION_STOP</name></expr></argument>, <argument pos:start="35:49" pos:end="35:55"><expr pos:start="35:49" pos:end="35:55"><name pos:start="35:49" pos:end="35:55">is_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:33"><expr pos:start="37:9" pos:end="37:32"><call pos:start="37:9" pos:end="37:32"><name pos:start="37:9" pos:end="37:15">vm_stop</name><argument_list pos:start="37:16" pos:end="37:32">(<argument pos:start="37:17" pos:end="37:31"><expr pos:start="37:17" pos:end="37:31"><name pos:start="37:17" pos:end="37:31">VMSTOP_DISKFULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="39:7" pos:end="53:5">else <block pos:start="39:12" pos:end="53:5">{<block_content pos:start="41:9" pos:end="51:59">

        <if_stmt pos:start="41:9" pos:end="45:9"><if pos:start="41:9" pos:end="45:9">if <condition pos:start="41:12" pos:end="41:47">(<expr pos:start="41:13" pos:end="41:46"><name pos:start="41:13" pos:end="41:16">type</name> <operator pos:start="41:18" pos:end="41:19">==</operator> <name pos:start="41:21" pos:end="41:46">SCSI_REQ_STATUS_RETRY_READ</name></expr>)</condition> <block pos:start="41:49" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:38">

            <expr_stmt pos:start="43:13" pos:end="43:38"><expr pos:start="43:13" pos:end="43:37"><call pos:start="43:13" pos:end="43:37"><name pos:start="43:13" pos:end="43:25">scsi_req_data</name><argument_list pos:start="43:26" pos:end="43:37">(<argument pos:start="43:27" pos:end="43:33"><expr pos:start="43:27" pos:end="43:33"><operator pos:start="43:27" pos:end="43:27">&amp;</operator><name pos:start="43:28" pos:end="43:33"><name pos:start="43:28" pos:end="43:28">r</name><operator pos:start="43:29" pos:end="43:30">-&gt;</operator><name pos:start="43:31" pos:end="43:33">req</name></name></expr></argument>, <argument pos:start="43:36" pos:end="43:36"><expr pos:start="43:36" pos:end="43:36"><literal type="number" pos:start="43:36" pos:end="43:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="47:9" pos:end="49:32"><expr pos:start="47:9" pos:end="49:31"><call pos:start="47:9" pos:end="49:31"><name pos:start="47:9" pos:end="47:29">scsi_command_complete</name><argument_list pos:start="47:30" pos:end="49:31">(<argument pos:start="47:31" pos:end="47:31"><expr pos:start="47:31" pos:end="47:31"><name pos:start="47:31" pos:end="47:31">r</name></expr></argument>, <argument pos:start="47:34" pos:end="47:48"><expr pos:start="47:34" pos:end="47:48"><name pos:start="47:34" pos:end="47:48">CHECK_CONDITION</name></expr></argument>,

                <argument pos:start="49:17" pos:end="49:30"><expr pos:start="49:17" pos:end="49:30"><name pos:start="49:17" pos:end="49:30">HARDWARE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:59"><expr pos:start="51:9" pos:end="51:58"><call pos:start="51:9" pos:end="51:58"><name pos:start="51:9" pos:end="51:22">bdrv_mon_event</name><argument_list pos:start="51:23" pos:end="51:58">(<argument pos:start="51:24" pos:end="51:28"><expr pos:start="51:24" pos:end="51:28"><name pos:start="51:24" pos:end="51:28"><name pos:start="51:24" pos:end="51:24">s</name><operator pos:start="51:25" pos:end="51:26">-&gt;</operator><name pos:start="51:27" pos:end="51:28">bs</name></name></expr></argument>, <argument pos:start="51:31" pos:end="51:48"><expr pos:start="51:31" pos:end="51:48"><name pos:start="51:31" pos:end="51:48">BDRV_ACTION_REPORT</name></expr></argument>, <argument pos:start="51:51" pos:end="51:57"><expr pos:start="51:51" pos:end="51:57"><name pos:start="51:51" pos:end="51:57">is_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="57:5" pos:end="57:13">return <expr pos:start="57:12" pos:end="57:12"><literal type="number" pos:start="57:12" pos:end="57:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
