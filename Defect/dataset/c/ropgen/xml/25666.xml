<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25666.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:26">do_compare_and_swap32</name><parameter_list pos:start="1:27" pos:end="1:50">(<parameter pos:start="1:28" pos:end="1:40"><decl pos:start="1:28" pos:end="1:40"><type pos:start="1:28" pos:end="1:40"><name pos:start="1:28" pos:end="1:31">void</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:40">cpu_env</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:49"><decl pos:start="1:43" pos:end="1:49"><type pos:start="1:43" pos:end="1:49"><name pos:start="1:43" pos:end="1:45">int</name></type> <name pos:start="1:47" pos:end="1:49">num</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="47:1">{<block_content pos:start="7:5" pos:end="46:0">

<cpp:ifdef pos:start="5:1" pos:end="5:18">#<cpp:directive pos:start="5:2" pos:end="5:6">ifdef</cpp:directive> <name pos:start="5:8" pos:end="5:18">TARGET_I386</name></cpp:ifdef>

    <decl_stmt pos:start="7:5" pos:end="7:56"><decl pos:start="7:5" pos:end="7:55"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:16">old</name> <init pos:start="7:18" pos:end="7:55">= <expr pos:start="7:20" pos:end="7:55"><operator pos:start="7:20" pos:end="7:20">(</operator><operator pos:start="7:21" pos:end="7:21">(</operator><name pos:start="7:22" pos:end="7:32">CPUX86State</name><operator pos:start="7:33" pos:end="7:33">*</operator><operator pos:start="7:34" pos:end="7:34">)</operator><name pos:start="7:35" pos:end="7:41">cpu_env</name><operator pos:start="7:42" pos:end="7:42">)</operator><operator pos:start="7:43" pos:end="7:44">-&gt;</operator><name pos:start="7:45" pos:end="7:55"><name pos:start="7:45" pos:end="7:48">regs</name><index pos:start="7:49" pos:end="7:55">[<expr pos:start="7:50" pos:end="7:54"><name pos:start="7:50" pos:end="7:54">R_EAX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:70"><decl pos:start="9:5" pos:end="9:69"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">uint32_t</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:19">value</name> <init pos:start="9:21" pos:end="9:69">= <expr pos:start="9:23" pos:end="9:69"><operator pos:start="9:23" pos:end="9:23">(</operator><name pos:start="9:24" pos:end="9:31">uint32_t</name><operator pos:start="9:32" pos:end="9:32">*</operator><operator pos:start="9:33" pos:end="9:33">)</operator><operator pos:start="9:34" pos:end="9:34">(</operator><operator pos:start="9:35" pos:end="9:35">(</operator><name pos:start="9:36" pos:end="9:46">CPUX86State</name><operator pos:start="9:47" pos:end="9:47">*</operator><operator pos:start="9:48" pos:end="9:48">)</operator><name pos:start="9:49" pos:end="9:55">cpu_env</name><operator pos:start="9:56" pos:end="9:56">)</operator><operator pos:start="9:57" pos:end="9:58">-&gt;</operator><name pos:start="9:59" pos:end="9:69"><name pos:start="9:59" pos:end="9:62">regs</name><index pos:start="9:63" pos:end="9:69">[<expr pos:start="9:64" pos:end="9:68"><name pos:start="9:64" pos:end="9:68">R_ECX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:69"><expr pos:start="11:5" pos:end="11:68"><call pos:start="11:5" pos:end="11:68"><name pos:start="11:5" pos:end="11:11">DPRINTF</name><argument_list pos:start="11:12" pos:end="11:68">(<argument pos:start="11:13" pos:end="11:55"><expr pos:start="11:13" pos:end="11:55"><literal type="string" pos:start="11:13" pos:end="11:55">"commpage: compare_and_swap32(%x,new,%p)\n"</literal></expr></argument>, <argument pos:start="11:58" pos:end="11:60"><expr pos:start="11:58" pos:end="11:60"><name pos:start="11:58" pos:end="11:60">old</name></expr></argument>, <argument pos:start="11:63" pos:end="11:67"><expr pos:start="11:63" pos:end="11:67"><name pos:start="11:63" pos:end="11:67">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="15:5" pos:end="42:0"><if pos:start="15:5" pos:end="27:5">if<condition pos:start="15:7" pos:end="15:39">(<expr pos:start="15:8" pos:end="15:38"><name pos:start="15:8" pos:end="15:12">value</name> <operator pos:start="15:14" pos:end="15:15">&amp;&amp;</operator> <name pos:start="15:17" pos:end="15:19">old</name> <operator pos:start="15:21" pos:end="15:22">==</operator> <call pos:start="15:24" pos:end="15:38"><name pos:start="15:24" pos:end="15:30">tswap32</name><argument_list pos:start="15:31" pos:end="15:38">(<argument pos:start="15:32" pos:end="15:37"><expr pos:start="15:32" pos:end="15:37"><operator pos:start="15:32" pos:end="15:32">*</operator><name pos:start="15:33" pos:end="15:37">value</name></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="17:5" pos:end="27:5">{<block_content pos:start="19:9" pos:end="25:48">

        <decl_stmt pos:start="19:9" pos:end="19:60"><decl pos:start="19:9" pos:end="19:59"><type pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:16">uint32_t</name></type> <name pos:start="19:18" pos:end="19:20">new</name> <init pos:start="19:22" pos:end="19:59">= <expr pos:start="19:24" pos:end="19:59"><operator pos:start="19:24" pos:end="19:24">(</operator><operator pos:start="19:25" pos:end="19:25">(</operator><name pos:start="19:26" pos:end="19:36">CPUX86State</name><operator pos:start="19:37" pos:end="19:37">*</operator><operator pos:start="19:38" pos:end="19:38">)</operator><name pos:start="19:39" pos:end="19:45">cpu_env</name><operator pos:start="19:46" pos:end="19:46">)</operator><operator pos:start="19:47" pos:end="19:48">-&gt;</operator><name pos:start="19:49" pos:end="19:59"><name pos:start="19:49" pos:end="19:52">regs</name><index pos:start="19:53" pos:end="19:59">[<expr pos:start="19:54" pos:end="19:58"><name pos:start="19:54" pos:end="19:58">R_EDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:30"><expr pos:start="21:9" pos:end="21:29"><operator pos:start="21:9" pos:end="21:9">*</operator><name pos:start="21:10" pos:end="21:14">value</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <call pos:start="21:18" pos:end="21:29"><name pos:start="21:18" pos:end="21:24">tswap32</name><argument_list pos:start="21:25" pos:end="21:29">(<argument pos:start="21:26" pos:end="21:28"><expr pos:start="21:26" pos:end="21:28"><name pos:start="21:26" pos:end="21:28">new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="23:9" pos:end="23:25">/* set zf flag */</comment>

        <expr_stmt pos:start="25:9" pos:end="25:48"><expr pos:start="25:9" pos:end="25:47"><operator pos:start="25:9" pos:end="25:9">(</operator><operator pos:start="25:10" pos:end="25:10">(</operator><name pos:start="25:11" pos:end="25:21">CPUX86State</name><operator pos:start="25:22" pos:end="25:22">*</operator><operator pos:start="25:23" pos:end="25:23">)</operator><name pos:start="25:24" pos:end="25:30">cpu_env</name><operator pos:start="25:31" pos:end="25:31">)</operator><operator pos:start="25:32" pos:end="25:33">-&gt;</operator><name pos:start="25:34" pos:end="25:39">eflags</name> <operator pos:start="25:41" pos:end="25:42">|=</operator> <literal type="number" pos:start="25:44" pos:end="25:47">0x40</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <else pos:start="29:5" pos:end="42:0">else

    <block pos:start="31:5" pos:end="42:0">{<block_content pos:start="33:9" pos:end="37:49">

        <expr_stmt pos:start="33:9" pos:end="33:63"><expr pos:start="33:9" pos:end="33:62"><operator pos:start="33:9" pos:end="33:9">(</operator><operator pos:start="33:10" pos:end="33:10">(</operator><name pos:start="33:11" pos:end="33:21">CPUX86State</name><operator pos:start="33:22" pos:end="33:22">*</operator><operator pos:start="33:23" pos:end="33:23">)</operator><name pos:start="33:24" pos:end="33:30">cpu_env</name><operator pos:start="33:31" pos:end="33:31">)</operator><operator pos:start="33:32" pos:end="33:33">-&gt;</operator><name pos:start="33:34" pos:end="33:44"><name pos:start="33:34" pos:end="33:37">regs</name><index pos:start="33:38" pos:end="33:44">[<expr pos:start="33:39" pos:end="33:43"><name pos:start="33:39" pos:end="33:43">R_EAX</name></expr>]</index></name> <operator pos:start="33:46" pos:end="33:46">=</operator> <call pos:start="33:48" pos:end="33:62"><name pos:start="33:48" pos:end="33:54">tswap32</name><argument_list pos:start="33:55" pos:end="33:62">(<argument pos:start="33:56" pos:end="33:61"><expr pos:start="33:56" pos:end="33:61"><operator pos:start="33:56" pos:end="33:56">*</operator><name pos:start="33:57" pos:end="33:61">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="35:9" pos:end="35:27">/* unset zf flag */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:49"><expr pos:start="37:9" pos:end="37:48"><operator pos:start="37:9" pos:end="37:9">(</operator><operator pos:start="37:10" pos:end="37:10">(</operator><name pos:start="37:11" pos:end="37:21">CPUX86State</name><operator pos:start="37:22" pos:end="37:22">*</operator><operator pos:start="37:23" pos:end="37:23">)</operator><name pos:start="37:24" pos:end="37:30">cpu_env</name><operator pos:start="37:31" pos:end="37:31">)</operator><operator pos:start="37:32" pos:end="37:33">-&gt;</operator><name pos:start="37:34" pos:end="37:39">eflags</name> <operator pos:start="37:41" pos:end="37:42">&amp;=</operator> <operator pos:start="37:44" pos:end="37:44">~</operator><literal type="number" pos:start="37:45" pos:end="37:48">0x40</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:else pos:start="41:1" pos:end="41:5">#<cpp:directive pos:start="41:2" pos:end="41:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="43:5" pos:end="46:0"><expr pos:start="43:5" pos:end="43:49"><call pos:start="43:5" pos:end="43:49"><name pos:start="43:5" pos:end="43:10">qerror</name><argument_list pos:start="43:11" pos:end="43:49">(<argument pos:start="43:12" pos:end="43:48"><expr pos:start="43:12" pos:end="43:48"><literal type="string" pos:start="43:12" pos:end="43:48">"do_compare_and_swap32 unimplemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
