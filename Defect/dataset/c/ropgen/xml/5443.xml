<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5443.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">mov_read_stps</name><parameter_list pos:start="1:25" pos:end="1:70">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:35">MOVContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">c</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:55"><decl pos:start="1:41" pos:end="1:55"><type pos:start="1:41" pos:end="1:55"><name pos:start="1:41" pos:end="1:51">AVIOContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:55">pb</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:69"><decl pos:start="1:58" pos:end="1:69"><type pos:start="1:58" pos:end="1:69"><name pos:start="1:58" pos:end="1:64">MOVAtom</name></type> <name pos:start="1:66" pos:end="1:69">atom</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="55:1">{<block_content pos:start="5:5" pos:end="53:13">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">AVStream</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">MOVStreamContext</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">sc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">unsigned</name></type> <name pos:start="9:14" pos:end="9:14">i</name></decl>, <decl pos:start="9:17" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:17" pos:end="9:23">entries</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="15:17"><if pos:start="13:5" pos:end="15:17">if <condition pos:start="13:8" pos:end="13:30">(<expr pos:start="13:9" pos:end="13:29"><name pos:start="13:9" pos:end="13:25"><name pos:start="13:9" pos:end="13:9">c</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:13">fc</name><operator pos:start="13:14" pos:end="13:15">-&gt;</operator><name pos:start="13:16" pos:end="13:25">nb_streams</name></name> <operator pos:start="13:27" pos:end="13:27">&lt;</operator> <literal type="number" pos:start="13:29" pos:end="13:29">1</literal></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:17"><block_content pos:start="15:9" pos:end="15:17">

        <return pos:start="15:9" pos:end="15:17">return <expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:45"><expr pos:start="17:5" pos:end="17:44"><name pos:start="17:5" pos:end="17:6">st</name> <operator pos:start="17:8" pos:end="17:8">=</operator> <name pos:start="17:10" pos:end="17:44"><name pos:start="17:10" pos:end="17:10">c</name><operator pos:start="17:11" pos:end="17:12">-&gt;</operator><name pos:start="17:13" pos:end="17:14">fc</name><operator pos:start="17:15" pos:end="17:16">-&gt;</operator><name pos:start="17:17" pos:end="17:23">streams</name><index pos:start="17:24" pos:end="17:44">[<expr pos:start="17:25" pos:end="17:43"><name pos:start="17:25" pos:end="17:41"><name pos:start="17:25" pos:end="17:25">c</name><operator pos:start="17:26" pos:end="17:27">-&gt;</operator><name pos:start="17:28" pos:end="17:29">fc</name><operator pos:start="17:30" pos:end="17:31">-&gt;</operator><name pos:start="17:32" pos:end="17:41">nb_streams</name></name><operator pos:start="17:42" pos:end="17:42">-</operator><literal type="number" pos:start="17:43" pos:end="17:43">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:23"><expr pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:6">sc</name> <operator pos:start="19:8" pos:end="19:8">=</operator> <name pos:start="19:10" pos:end="19:22"><name pos:start="19:10" pos:end="19:11">st</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:22">priv_data</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:18"><expr pos:start="23:5" pos:end="23:17"><call pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:13">avio_rb32</name><argument_list pos:start="23:14" pos:end="23:17">(<argument pos:start="23:15" pos:end="23:16"><expr pos:start="23:15" pos:end="23:16"><name pos:start="23:15" pos:end="23:16">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="23:20" pos:end="23:37">// version + flags</comment>



    <expr_stmt pos:start="27:5" pos:end="27:28"><expr pos:start="27:5" pos:end="27:27"><name pos:start="27:5" pos:end="27:11">entries</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <call pos:start="27:15" pos:end="27:27"><name pos:start="27:15" pos:end="27:23">avio_rb32</name><argument_list pos:start="27:24" pos:end="27:27">(<argument pos:start="27:25" pos:end="27:26"><expr pos:start="27:25" pos:end="27:26"><name pos:start="27:25" pos:end="27:26">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="31:35"><if pos:start="29:5" pos:end="31:35">if <condition pos:start="29:8" pos:end="29:53">(<expr pos:start="29:9" pos:end="29:52"><name pos:start="29:9" pos:end="29:15">entries</name> <operator pos:start="29:17" pos:end="29:18">&gt;=</operator> <name pos:start="29:20" pos:end="29:27">UINT_MAX</name> <operator pos:start="29:29" pos:end="29:29">/</operator> <sizeof pos:start="29:31" pos:end="29:52">sizeof<argument_list pos:start="29:37" pos:end="29:52">(<argument pos:start="29:38" pos:end="29:51"><expr pos:start="29:38" pos:end="29:51"><operator pos:start="29:38" pos:end="29:38">*</operator><name pos:start="29:39" pos:end="29:51"><name pos:start="29:39" pos:end="29:40">sc</name><operator pos:start="29:41" pos:end="29:42">-&gt;</operator><name pos:start="29:43" pos:end="29:51">stps_data</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:35"><block_content pos:start="31:9" pos:end="31:35">

        <return pos:start="31:9" pos:end="31:35">return <expr pos:start="31:16" pos:end="31:34"><name pos:start="31:16" pos:end="31:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:64"><expr pos:start="33:5" pos:end="33:63"><name pos:start="33:5" pos:end="33:17"><name pos:start="33:5" pos:end="33:6">sc</name><operator pos:start="33:7" pos:end="33:8">-&gt;</operator><name pos:start="33:9" pos:end="33:17">stps_data</name></name> <operator pos:start="33:19" pos:end="33:19">=</operator> <call pos:start="33:21" pos:end="33:63"><name pos:start="33:21" pos:end="33:29">av_malloc</name><argument_list pos:start="33:30" pos:end="33:63">(<argument pos:start="33:31" pos:end="33:62"><expr pos:start="33:31" pos:end="33:62"><name pos:start="33:31" pos:end="33:37">entries</name> <operator pos:start="33:39" pos:end="33:39">*</operator> <sizeof pos:start="33:41" pos:end="33:62">sizeof<argument_list pos:start="33:47" pos:end="33:62">(<argument pos:start="33:48" pos:end="33:61"><expr pos:start="33:48" pos:end="33:61"><operator pos:start="33:48" pos:end="33:48">*</operator><name pos:start="33:49" pos:end="33:61"><name pos:start="33:49" pos:end="33:50">sc</name><operator pos:start="33:51" pos:end="33:52">-&gt;</operator><name pos:start="33:53" pos:end="33:61">stps_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="37:31"><if pos:start="35:5" pos:end="37:31">if <condition pos:start="35:8" pos:end="35:23">(<expr pos:start="35:9" pos:end="35:22"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:22"><name pos:start="35:10" pos:end="35:11">sc</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:22">stps_data</name></name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:31"><block_content pos:start="37:9" pos:end="37:31">

        <return pos:start="37:9" pos:end="37:31">return <expr pos:start="37:16" pos:end="37:30"><call pos:start="37:16" pos:end="37:30"><name pos:start="37:16" pos:end="37:22">AVERROR</name><argument_list pos:start="37:23" pos:end="37:30">(<argument pos:start="37:24" pos:end="37:29"><expr pos:start="37:24" pos:end="37:29"><name pos:start="37:24" pos:end="37:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:29"><expr pos:start="39:5" pos:end="39:28"><name pos:start="39:5" pos:end="39:18"><name pos:start="39:5" pos:end="39:6">sc</name><operator pos:start="39:7" pos:end="39:8">-&gt;</operator><name pos:start="39:9" pos:end="39:18">stps_count</name></name> <operator pos:start="39:20" pos:end="39:20">=</operator> <name pos:start="39:22" pos:end="39:28">entries</name></expr>;</expr_stmt>



    <for pos:start="43:5" pos:end="49:5">for <control pos:start="43:9" pos:end="43:33">(<init pos:start="43:10" pos:end="43:15"><expr pos:start="43:10" pos:end="43:14"><name pos:start="43:10" pos:end="43:10">i</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <literal type="number" pos:start="43:14" pos:end="43:14">0</literal></expr>;</init> <condition pos:start="43:17" pos:end="43:28"><expr pos:start="43:17" pos:end="43:27"><name pos:start="43:17" pos:end="43:17">i</name> <operator pos:start="43:19" pos:end="43:19">&lt;</operator> <name pos:start="43:21" pos:end="43:27">entries</name></expr>;</condition> <incr pos:start="43:30" pos:end="43:32"><expr pos:start="43:30" pos:end="43:32"><name pos:start="43:30" pos:end="43:30">i</name><operator pos:start="43:31" pos:end="43:32">++</operator></expr></incr>)</control> <block pos:start="43:35" pos:end="49:5">{<block_content pos:start="45:9" pos:end="45:41">

        <expr_stmt pos:start="45:9" pos:end="45:41"><expr pos:start="45:9" pos:end="45:40"><name pos:start="45:9" pos:end="45:24"><name pos:start="45:9" pos:end="45:10">sc</name><operator pos:start="45:11" pos:end="45:12">-&gt;</operator><name pos:start="45:13" pos:end="45:21">stps_data</name><index pos:start="45:22" pos:end="45:24">[<expr pos:start="45:23" pos:end="45:23"><name pos:start="45:23" pos:end="45:23">i</name></expr>]</index></name> <operator pos:start="45:26" pos:end="45:26">=</operator> <call pos:start="45:28" pos:end="45:40"><name pos:start="45:28" pos:end="45:36">avio_rb32</name><argument_list pos:start="45:37" pos:end="45:40">(<argument pos:start="45:38" pos:end="45:39"><expr pos:start="45:38" pos:end="45:39"><name pos:start="45:38" pos:end="45:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="47:9" pos:end="47:56">//av_dlog(c-&gt;fc, "stps %d\n", sc-&gt;stps_data[i]);</comment>

    </block_content>}</block></for>



    <return pos:start="53:5" pos:end="53:13">return <expr pos:start="53:12" pos:end="53:12"><literal type="number" pos:start="53:12" pos:end="53:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
