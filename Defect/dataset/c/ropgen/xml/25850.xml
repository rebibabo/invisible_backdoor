<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25850.c" pos:tabs="8"><function pos:start="1:1" pos:end="195:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">check_refblocks</name><parameter_list pos:start="1:27" pos:end="5:75">(<parameter pos:start="1:28" pos:end="1:47"><decl pos:start="1:28" pos:end="1:47"><type pos:start="1:28" pos:end="1:47"><name pos:start="1:28" pos:end="1:43">BlockDriverState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:47">bs</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:69"><decl pos:start="1:50" pos:end="1:69"><type pos:start="1:50" pos:end="1:69"><name pos:start="1:50" pos:end="1:64">BdrvCheckResult</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">res</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:44"><decl pos:start="3:28" pos:end="3:44"><type pos:start="3:28" pos:end="3:44"><name pos:start="3:28" pos:end="3:40">BdrvCheckMode</name></type> <name pos:start="3:42" pos:end="3:44">fix</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:59"><decl pos:start="3:47" pos:end="3:59"><type pos:start="3:47" pos:end="3:59"><name pos:start="3:47" pos:end="3:50">bool</name> <modifier pos:start="3:52" pos:end="3:52">*</modifier></type><name pos:start="3:53" pos:end="3:59">rebuild</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:52"><decl pos:start="5:28" pos:end="5:52"><type pos:start="5:28" pos:end="5:52"><name pos:start="5:28" pos:end="5:35">uint16_t</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier><modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:52">refcount_table</name></decl></parameter>, <parameter pos:start="5:55" pos:end="5:74"><decl pos:start="5:55" pos:end="5:74"><type pos:start="5:55" pos:end="5:74"><name pos:start="5:55" pos:end="5:61">int64_t</name> <modifier pos:start="5:63" pos:end="5:63">*</modifier></type><name pos:start="5:64" pos:end="5:74">nb_clusters</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="195:1">{<block_content pos:start="9:5" pos:end="193:13">

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">BDRVQcowState</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:20">s</name> <init pos:start="9:22" pos:end="9:33">= <expr pos:start="9:24" pos:end="9:33"><name pos:start="9:24" pos:end="9:33"><name pos:start="9:24" pos:end="9:25">bs</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:13">i</name></decl>, <decl pos:start="11:16" pos:end="11:19"><type ref="prev" pos:start="11:5" pos:end="11:11"/><name pos:start="11:16" pos:end="11:19">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <for pos:start="17:5" pos:end="189:5">for<control pos:start="17:8" pos:end="17:47">(<init pos:start="17:9" pos:end="17:14"><expr pos:start="17:9" pos:end="17:13"><name pos:start="17:9" pos:end="17:9">i</name> <operator pos:start="17:11" pos:end="17:11">=</operator> <literal type="number" pos:start="17:13" pos:end="17:13">0</literal></expr>;</init> <condition pos:start="17:16" pos:end="17:42"><expr pos:start="17:16" pos:end="17:41"><name pos:start="17:16" pos:end="17:16">i</name> <operator pos:start="17:18" pos:end="17:18">&lt;</operator> <name pos:start="17:20" pos:end="17:41"><name pos:start="17:20" pos:end="17:20">s</name><operator pos:start="17:21" pos:end="17:22">-&gt;</operator><name pos:start="17:23" pos:end="17:41">refcount_table_size</name></name></expr>;</condition> <incr pos:start="17:44" pos:end="17:46"><expr pos:start="17:44" pos:end="17:46"><name pos:start="17:44" pos:end="17:44">i</name><operator pos:start="17:45" pos:end="17:46">++</operator></expr></incr>)</control> <block pos:start="17:49" pos:end="189:5">{<block_content pos:start="19:9" pos:end="187:9">

        <decl_stmt pos:start="19:9" pos:end="19:33"><decl pos:start="19:9" pos:end="19:23"><type pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:16">uint64_t</name></type> <name pos:start="19:18" pos:end="19:23">offset</name></decl>, <decl pos:start="19:26" pos:end="19:32"><type ref="prev" pos:start="19:9" pos:end="19:16"/><name pos:start="19:26" pos:end="19:32">cluster</name></decl>;</decl_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:38"><expr pos:start="21:9" pos:end="21:37"><name pos:start="21:9" pos:end="21:14">offset</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <name pos:start="21:18" pos:end="21:37"><name pos:start="21:18" pos:end="21:18">s</name><operator pos:start="21:19" pos:end="21:20">-&gt;</operator><name pos:start="21:21" pos:end="21:34">refcount_table</name><index pos:start="21:35" pos:end="21:37">[<expr pos:start="21:36" pos:end="21:36"><name pos:start="21:36" pos:end="21:36">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:44"><expr pos:start="23:9" pos:end="23:43"><name pos:start="23:9" pos:end="23:15">cluster</name> <operator pos:start="23:17" pos:end="23:17">=</operator> <name pos:start="23:19" pos:end="23:24">offset</name> <operator pos:start="23:26" pos:end="23:27">&gt;&gt;</operator> <name pos:start="23:29" pos:end="23:43"><name pos:start="23:29" pos:end="23:29">s</name><operator pos:start="23:30" pos:end="23:31">-&gt;</operator><name pos:start="23:32" pos:end="23:43">cluster_bits</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="27:9" pos:end="27:49">/* Refcount blocks are cluster aligned */</comment>

        <if_stmt pos:start="29:9" pos:end="41:9"><if pos:start="29:9" pos:end="41:9">if <condition pos:start="29:12" pos:end="29:43">(<expr pos:start="29:13" pos:end="29:42"><call pos:start="29:13" pos:end="29:42"><name pos:start="29:13" pos:end="29:31">offset_into_cluster</name><argument_list pos:start="29:32" pos:end="29:42">(<argument pos:start="29:33" pos:end="29:33"><expr pos:start="29:33" pos:end="29:33"><name pos:start="29:33" pos:end="29:33">s</name></expr></argument>, <argument pos:start="29:36" pos:end="29:41"><expr pos:start="29:36" pos:end="29:41"><name pos:start="29:36" pos:end="29:41">offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:45" pos:end="41:9">{<block_content pos:start="31:13" pos:end="39:21">

            <expr_stmt pos:start="31:13" pos:end="33:72"><expr pos:start="31:13" pos:end="33:71"><call pos:start="31:13" pos:end="33:71"><name pos:start="31:13" pos:end="31:19">fprintf</name><argument_list pos:start="31:20" pos:end="33:71">(<argument pos:start="31:21" pos:end="31:26"><expr pos:start="31:21" pos:end="31:26"><name pos:start="31:21" pos:end="31:26">stderr</name></expr></argument>, <argument pos:start="31:29" pos:end="33:67"><expr pos:start="31:29" pos:end="33:67"><literal type="string" pos:start="31:29" pos:end="31:52">"ERROR refcount block %"</literal> <name pos:start="31:54" pos:end="31:59">PRId64</name> <literal type="string" pos:start="31:61" pos:end="31:70">" is not "</literal>

                <literal type="string" pos:start="33:17" pos:end="33:67">"cluster aligned; refcount table entry corrupted\n"</literal></expr></argument>, <argument pos:start="33:70" pos:end="33:70"><expr pos:start="33:70" pos:end="33:70"><name pos:start="33:70" pos:end="33:70">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:31"><expr pos:start="35:13" pos:end="35:30"><name pos:start="35:13" pos:end="35:28"><name pos:start="35:13" pos:end="35:15">res</name><operator pos:start="35:16" pos:end="35:17">-&gt;</operator><name pos:start="35:18" pos:end="35:28">corruptions</name></name><operator pos:start="35:29" pos:end="35:30">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:28"><expr pos:start="37:13" pos:end="37:27"><operator pos:start="37:13" pos:end="37:13">*</operator><name pos:start="37:14" pos:end="37:20">rebuild</name> <operator pos:start="37:22" pos:end="37:22">=</operator> <name pos:start="37:24" pos:end="37:27">true</name></expr>;</expr_stmt>

            <continue pos:start="39:13" pos:end="39:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="45:9" pos:end="159:9"><if pos:start="45:9" pos:end="159:9">if <condition pos:start="45:12" pos:end="45:36">(<expr pos:start="45:13" pos:end="45:35"><name pos:start="45:13" pos:end="45:19">cluster</name> <operator pos:start="45:21" pos:end="45:22">&gt;=</operator> <operator pos:start="45:24" pos:end="45:24">*</operator><name pos:start="45:25" pos:end="45:35">nb_clusters</name></expr>)</condition> <block pos:start="45:38" pos:end="159:9">{<block_content pos:start="47:13" pos:end="157:21">

            <expr_stmt pos:start="47:13" pos:end="49:70"><expr pos:start="47:13" pos:end="49:69"><call pos:start="47:13" pos:end="49:69"><name pos:start="47:13" pos:end="47:19">fprintf</name><argument_list pos:start="47:20" pos:end="49:69">(<argument pos:start="47:21" pos:end="47:26"><expr pos:start="47:21" pos:end="47:26"><name pos:start="47:21" pos:end="47:26">stderr</name></expr></argument>, <argument pos:start="47:29" pos:end="47:78"><expr pos:start="47:29" pos:end="47:78"><literal type="string" pos:start="47:29" pos:end="47:49">"%s refcount block %"</literal> <name pos:start="47:51" pos:end="47:56">PRId64</name> <literal type="string" pos:start="47:58" pos:end="47:78">" is outside image\n"</literal></expr></argument>,

                    <argument pos:start="49:21" pos:end="49:65"><expr pos:start="49:21" pos:end="49:65"><ternary pos:start="49:21" pos:end="49:65"><condition pos:start="49:21" pos:end="49:43"><expr pos:start="49:21" pos:end="49:41"><name pos:start="49:21" pos:end="49:23">fix</name> <operator pos:start="49:25" pos:end="49:25">&amp;</operator> <name pos:start="49:27" pos:end="49:41">BDRV_FIX_ERRORS</name></expr> ?</condition><then pos:start="49:45" pos:end="49:55"> <expr pos:start="49:45" pos:end="49:55"><literal type="string" pos:start="49:45" pos:end="49:55">"Repairing"</literal></expr> </then><else pos:start="49:57" pos:end="49:65">: <expr pos:start="49:59" pos:end="49:65"><literal type="string" pos:start="49:59" pos:end="49:65">"ERROR"</literal></expr></else></ternary></expr></argument>, <argument pos:start="49:68" pos:end="49:68"><expr pos:start="49:68" pos:end="49:68"><name pos:start="49:68" pos:end="49:68">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="53:13" pos:end="155:13"><if pos:start="53:13" pos:end="151:13">if <condition pos:start="53:16" pos:end="53:38">(<expr pos:start="53:17" pos:end="53:37"><name pos:start="53:17" pos:end="53:19">fix</name> <operator pos:start="53:21" pos:end="53:21">&amp;</operator> <name pos:start="53:23" pos:end="53:37">BDRV_FIX_ERRORS</name></expr>)</condition> <block pos:start="53:40" pos:end="151:13">{<block_content pos:start="55:17" pos:end="149:40">

                <decl_stmt pos:start="55:17" pos:end="55:40"><decl pos:start="55:17" pos:end="55:39"><type pos:start="55:17" pos:end="55:23"><name pos:start="55:17" pos:end="55:23">int64_t</name></type> <name pos:start="55:25" pos:end="55:39">new_nb_clusters</name></decl>;</decl_stmt>



                <if_stmt pos:start="59:17" pos:end="65:17"><if pos:start="59:17" pos:end="65:17">if <condition pos:start="59:20" pos:end="59:57">(<expr pos:start="59:21" pos:end="59:56"><name pos:start="59:21" pos:end="59:26">offset</name> <operator pos:start="59:28" pos:end="59:28">&gt;</operator> <name pos:start="59:30" pos:end="59:38">INT64_MAX</name> <operator pos:start="59:40" pos:end="59:40">-</operator> <name pos:start="59:42" pos:end="59:56"><name pos:start="59:42" pos:end="59:42">s</name><operator pos:start="59:43" pos:end="59:44">-&gt;</operator><name pos:start="59:45" pos:end="59:56">cluster_size</name></name></expr>)</condition> <block pos:start="59:59" pos:end="65:17">{<block_content pos:start="61:21" pos:end="63:37">

                    <expr_stmt pos:start="61:21" pos:end="61:34"><expr pos:start="61:21" pos:end="61:33"><name pos:start="61:21" pos:end="61:23">ret</name> <operator pos:start="61:25" pos:end="61:25">=</operator> <operator pos:start="61:27" pos:end="61:27">-</operator><name pos:start="61:28" pos:end="61:33">EINVAL</name></expr>;</expr_stmt>

                    <goto pos:start="63:21" pos:end="63:37">goto <name pos:start="63:26" pos:end="63:36">resize_fail</name>;</goto>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="69:17" pos:end="69:72"><expr pos:start="69:17" pos:end="69:71"><name pos:start="69:17" pos:end="69:19">ret</name> <operator pos:start="69:21" pos:end="69:21">=</operator> <call pos:start="69:23" pos:end="69:71"><name pos:start="69:23" pos:end="69:35">bdrv_truncate</name><argument_list pos:start="69:36" pos:end="69:71">(<argument pos:start="69:37" pos:end="69:44"><expr pos:start="69:37" pos:end="69:44"><name pos:start="69:37" pos:end="69:44"><name pos:start="69:37" pos:end="69:38">bs</name><operator pos:start="69:39" pos:end="69:40">-&gt;</operator><name pos:start="69:41" pos:end="69:44">file</name></name></expr></argument>, <argument pos:start="69:47" pos:end="69:70"><expr pos:start="69:47" pos:end="69:70"><name pos:start="69:47" pos:end="69:52">offset</name> <operator pos:start="69:54" pos:end="69:54">+</operator> <name pos:start="69:56" pos:end="69:70"><name pos:start="69:56" pos:end="69:56">s</name><operator pos:start="69:57" pos:end="69:58">-&gt;</operator><name pos:start="69:59" pos:end="69:70">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="71:17" pos:end="75:17"><if pos:start="71:17" pos:end="75:17">if <condition pos:start="71:20" pos:end="71:28">(<expr pos:start="71:21" pos:end="71:27"><name pos:start="71:21" pos:end="71:23">ret</name> <operator pos:start="71:25" pos:end="71:25">&lt;</operator> <literal type="number" pos:start="71:27" pos:end="71:27">0</literal></expr>)</condition> <block pos:start="71:30" pos:end="75:17">{<block_content pos:start="73:21" pos:end="73:37">

                    <goto pos:start="73:21" pos:end="73:37">goto <name pos:start="73:26" pos:end="73:36">resize_fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:48"><expr pos:start="77:17" pos:end="77:47"><name pos:start="77:17" pos:end="77:20">size</name> <operator pos:start="77:22" pos:end="77:22">=</operator> <call pos:start="77:24" pos:end="77:47"><name pos:start="77:24" pos:end="77:37">bdrv_getlength</name><argument_list pos:start="77:38" pos:end="77:47">(<argument pos:start="77:39" pos:end="77:46"><expr pos:start="77:39" pos:end="77:46"><name pos:start="77:39" pos:end="77:46"><name pos:start="77:39" pos:end="77:40">bs</name><operator pos:start="77:41" pos:end="77:42">-&gt;</operator><name pos:start="77:43" pos:end="77:46">file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="79:17" pos:end="85:17"><if pos:start="79:17" pos:end="85:17">if <condition pos:start="79:20" pos:end="79:29">(<expr pos:start="79:21" pos:end="79:28"><name pos:start="79:21" pos:end="79:24">size</name> <operator pos:start="79:26" pos:end="79:26">&lt;</operator> <literal type="number" pos:start="79:28" pos:end="79:28">0</literal></expr>)</condition> <block pos:start="79:31" pos:end="85:17">{<block_content pos:start="81:21" pos:end="83:37">

                    <expr_stmt pos:start="81:21" pos:end="81:31"><expr pos:start="81:21" pos:end="81:30"><name pos:start="81:21" pos:end="81:23">ret</name> <operator pos:start="81:25" pos:end="81:25">=</operator> <name pos:start="81:27" pos:end="81:30">size</name></expr>;</expr_stmt>

                    <goto pos:start="83:21" pos:end="83:37">goto <name pos:start="83:26" pos:end="83:36">resize_fail</name>;</goto>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="89:17" pos:end="89:60"><expr pos:start="89:17" pos:end="89:59"><name pos:start="89:17" pos:end="89:31">new_nb_clusters</name> <operator pos:start="89:33" pos:end="89:33">=</operator> <call pos:start="89:35" pos:end="89:59"><name pos:start="89:35" pos:end="89:50">size_to_clusters</name><argument_list pos:start="89:51" pos:end="89:59">(<argument pos:start="89:52" pos:end="89:52"><expr pos:start="89:52" pos:end="89:52"><name pos:start="89:52" pos:end="89:52">s</name></expr></argument>, <argument pos:start="89:55" pos:end="89:58"><expr pos:start="89:55" pos:end="89:58"><name pos:start="89:55" pos:end="89:58">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="91:17" pos:end="91:56"><expr pos:start="91:17" pos:end="91:55"><call pos:start="91:17" pos:end="91:55"><name pos:start="91:17" pos:end="91:22">assert</name><argument_list pos:start="91:23" pos:end="91:55">(<argument pos:start="91:24" pos:end="91:54"><expr pos:start="91:24" pos:end="91:54"><name pos:start="91:24" pos:end="91:38">new_nb_clusters</name> <operator pos:start="91:40" pos:end="91:41">&gt;=</operator> <operator pos:start="91:43" pos:end="91:43">*</operator><name pos:start="91:44" pos:end="91:54">nb_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="95:17" pos:end="97:75"><expr pos:start="95:17" pos:end="97:74"><name pos:start="95:17" pos:end="95:19">ret</name> <operator pos:start="95:21" pos:end="95:21">=</operator> <call pos:start="95:23" pos:end="97:74"><name pos:start="95:23" pos:end="95:44">realloc_refcount_array</name><argument_list pos:start="95:45" pos:end="97:74">(<argument pos:start="95:46" pos:end="95:46"><expr pos:start="95:46" pos:end="95:46"><name pos:start="95:46" pos:end="95:46">s</name></expr></argument>, <argument pos:start="95:49" pos:end="95:62"><expr pos:start="95:49" pos:end="95:62"><name pos:start="95:49" pos:end="95:62">refcount_table</name></expr></argument>,

                                             <argument pos:start="97:46" pos:end="97:56"><expr pos:start="97:46" pos:end="97:56"><name pos:start="97:46" pos:end="97:56">nb_clusters</name></expr></argument>, <argument pos:start="97:59" pos:end="97:73"><expr pos:start="97:59" pos:end="97:73"><name pos:start="97:59" pos:end="97:73">new_nb_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="99:17" pos:end="105:17"><if pos:start="99:17" pos:end="105:17">if <condition pos:start="99:20" pos:end="99:28">(<expr pos:start="99:21" pos:end="99:27"><name pos:start="99:21" pos:end="99:23">ret</name> <operator pos:start="99:25" pos:end="99:25">&lt;</operator> <literal type="number" pos:start="99:27" pos:end="99:27">0</literal></expr>)</condition> <block pos:start="99:30" pos:end="105:17">{<block_content pos:start="101:21" pos:end="103:31">

                    <expr_stmt pos:start="101:21" pos:end="101:40"><expr pos:start="101:21" pos:end="101:39"><name pos:start="101:21" pos:end="101:37"><name pos:start="101:21" pos:end="101:23">res</name><operator pos:start="101:24" pos:end="101:25">-&gt;</operator><name pos:start="101:26" pos:end="101:37">check_errors</name></name><operator pos:start="101:38" pos:end="101:39">++</operator></expr>;</expr_stmt>

                    <return pos:start="103:21" pos:end="103:31">return <expr pos:start="103:28" pos:end="103:30"><name pos:start="103:28" pos:end="103:30">ret</name></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="109:17" pos:end="115:17"><if pos:start="109:17" pos:end="115:17">if <condition pos:start="109:20" pos:end="109:44">(<expr pos:start="109:21" pos:end="109:43"><name pos:start="109:21" pos:end="109:27">cluster</name> <operator pos:start="109:29" pos:end="109:30">&gt;=</operator> <operator pos:start="109:32" pos:end="109:32">*</operator><name pos:start="109:33" pos:end="109:43">nb_clusters</name></expr>)</condition> <block pos:start="109:46" pos:end="115:17">{<block_content pos:start="111:21" pos:end="113:37">

                    <expr_stmt pos:start="111:21" pos:end="111:34"><expr pos:start="111:21" pos:end="111:33"><name pos:start="111:21" pos:end="111:23">ret</name> <operator pos:start="111:25" pos:end="111:25">=</operator> <operator pos:start="111:27" pos:end="111:27">-</operator><name pos:start="111:28" pos:end="111:33">EINVAL</name></expr>;</expr_stmt>

                    <goto pos:start="113:21" pos:end="113:37">goto <name pos:start="113:26" pos:end="113:36">resize_fail</name>;</goto>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="119:17" pos:end="119:41"><expr pos:start="119:17" pos:end="119:40"><name pos:start="119:17" pos:end="119:38"><name pos:start="119:17" pos:end="119:19">res</name><operator pos:start="119:20" pos:end="119:21">-&gt;</operator><name pos:start="119:22" pos:end="119:38">corruptions_fixed</name></name><operator pos:start="119:39" pos:end="119:40">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="121:17" pos:end="123:61"><expr pos:start="121:17" pos:end="123:60"><name pos:start="121:17" pos:end="121:19">ret</name> <operator pos:start="121:21" pos:end="121:21">=</operator> <call pos:start="121:23" pos:end="123:60"><name pos:start="121:23" pos:end="121:35">inc_refcounts</name><argument_list pos:start="121:36" pos:end="123:60">(<argument pos:start="121:37" pos:end="121:38"><expr pos:start="121:37" pos:end="121:38"><name pos:start="121:37" pos:end="121:38">bs</name></expr></argument>, <argument pos:start="121:41" pos:end="121:43"><expr pos:start="121:41" pos:end="121:43"><name pos:start="121:41" pos:end="121:43">res</name></expr></argument>, <argument pos:start="121:46" pos:end="121:59"><expr pos:start="121:46" pos:end="121:59"><name pos:start="121:46" pos:end="121:59">refcount_table</name></expr></argument>, <argument pos:start="121:62" pos:end="121:72"><expr pos:start="121:62" pos:end="121:72"><name pos:start="121:62" pos:end="121:72">nb_clusters</name></expr></argument>,

                                    <argument pos:start="123:37" pos:end="123:42"><expr pos:start="123:37" pos:end="123:42"><name pos:start="123:37" pos:end="123:42">offset</name></expr></argument>, <argument pos:start="123:45" pos:end="123:59"><expr pos:start="123:45" pos:end="123:59"><name pos:start="123:45" pos:end="123:59"><name pos:start="123:45" pos:end="123:45">s</name><operator pos:start="123:46" pos:end="123:47">-&gt;</operator><name pos:start="123:48" pos:end="123:59">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="125:17" pos:end="129:17"><if pos:start="125:17" pos:end="129:17">if <condition pos:start="125:20" pos:end="125:28">(<expr pos:start="125:21" pos:end="125:27"><name pos:start="125:21" pos:end="125:23">ret</name> <operator pos:start="125:25" pos:end="125:25">&lt;</operator> <literal type="number" pos:start="125:27" pos:end="125:27">0</literal></expr>)</condition> <block pos:start="125:30" pos:end="129:17">{<block_content pos:start="127:21" pos:end="127:31">

                    <return pos:start="127:21" pos:end="127:31">return <expr pos:start="127:28" pos:end="127:30"><name pos:start="127:28" pos:end="127:30">ret</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="131:17" pos:end="135:53">/* No need to check whether the refcount is now greater than 1:

                 * This area was just allocated and zeroed, so it can only be

                 * exactly 1 after inc_refcounts() */</comment>

                <continue pos:start="137:17" pos:end="137:25">continue;</continue>



<label pos:start="141:1" pos:end="141:12"><name pos:start="141:1" pos:end="141:11">resize_fail</name>:</label>

                <expr_stmt pos:start="143:17" pos:end="143:35"><expr pos:start="143:17" pos:end="143:34"><name pos:start="143:17" pos:end="143:32"><name pos:start="143:17" pos:end="143:19">res</name><operator pos:start="143:20" pos:end="143:21">-&gt;</operator><name pos:start="143:22" pos:end="143:32">corruptions</name></name><operator pos:start="143:33" pos:end="143:34">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="145:17" pos:end="145:32"><expr pos:start="145:17" pos:end="145:31"><operator pos:start="145:17" pos:end="145:17">*</operator><name pos:start="145:18" pos:end="145:24">rebuild</name> <operator pos:start="145:26" pos:end="145:26">=</operator> <name pos:start="145:28" pos:end="145:31">true</name></expr>;</expr_stmt>

                <expr_stmt pos:start="147:17" pos:end="149:40"><expr pos:start="147:17" pos:end="149:39"><call pos:start="147:17" pos:end="149:39"><name pos:start="147:17" pos:end="147:23">fprintf</name><argument_list pos:start="147:24" pos:end="149:39">(<argument pos:start="147:25" pos:end="147:30"><expr pos:start="147:25" pos:end="147:30"><name pos:start="147:25" pos:end="147:30">stderr</name></expr></argument>, <argument pos:start="147:33" pos:end="147:68"><expr pos:start="147:33" pos:end="147:68"><literal type="string" pos:start="147:33" pos:end="147:68">"ERROR could not resize image: %s\n"</literal></expr></argument>,

                        <argument pos:start="149:25" pos:end="149:38"><expr pos:start="149:25" pos:end="149:38"><call pos:start="149:25" pos:end="149:38"><name pos:start="149:25" pos:end="149:32">strerror</name><argument_list pos:start="149:33" pos:end="149:38">(<argument pos:start="149:34" pos:end="149:37"><expr pos:start="149:34" pos:end="149:37"><operator pos:start="149:34" pos:end="149:34">-</operator><name pos:start="149:35" pos:end="149:37">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="151:15" pos:end="155:13">else <block pos:start="151:20" pos:end="155:13">{<block_content pos:start="153:17" pos:end="153:35">

                <expr_stmt pos:start="153:17" pos:end="153:35"><expr pos:start="153:17" pos:end="153:34"><name pos:start="153:17" pos:end="153:32"><name pos:start="153:17" pos:end="153:19">res</name><operator pos:start="153:20" pos:end="153:21">-&gt;</operator><name pos:start="153:22" pos:end="153:32">corruptions</name></name><operator pos:start="153:33" pos:end="153:34">++</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <continue pos:start="157:13" pos:end="157:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="163:9" pos:end="187:9"><if pos:start="163:9" pos:end="187:9">if <condition pos:start="163:12" pos:end="163:24">(<expr pos:start="163:13" pos:end="163:23"><name pos:start="163:13" pos:end="163:18">offset</name> <operator pos:start="163:20" pos:end="163:21">!=</operator> <literal type="number" pos:start="163:23" pos:end="163:23">0</literal></expr>)</condition> <block pos:start="163:26" pos:end="187:9">{<block_content pos:start="165:13" pos:end="185:13">

            <expr_stmt pos:start="165:13" pos:end="167:57"><expr pos:start="165:13" pos:end="167:56"><name pos:start="165:13" pos:end="165:15">ret</name> <operator pos:start="165:17" pos:end="165:17">=</operator> <call pos:start="165:19" pos:end="167:56"><name pos:start="165:19" pos:end="165:31">inc_refcounts</name><argument_list pos:start="165:32" pos:end="167:56">(<argument pos:start="165:33" pos:end="165:34"><expr pos:start="165:33" pos:end="165:34"><name pos:start="165:33" pos:end="165:34">bs</name></expr></argument>, <argument pos:start="165:37" pos:end="165:39"><expr pos:start="165:37" pos:end="165:39"><name pos:start="165:37" pos:end="165:39">res</name></expr></argument>, <argument pos:start="165:42" pos:end="165:55"><expr pos:start="165:42" pos:end="165:55"><name pos:start="165:42" pos:end="165:55">refcount_table</name></expr></argument>, <argument pos:start="165:58" pos:end="165:68"><expr pos:start="165:58" pos:end="165:68"><name pos:start="165:58" pos:end="165:68">nb_clusters</name></expr></argument>,

                                <argument pos:start="167:33" pos:end="167:38"><expr pos:start="167:33" pos:end="167:38"><name pos:start="167:33" pos:end="167:38">offset</name></expr></argument>, <argument pos:start="167:41" pos:end="167:55"><expr pos:start="167:41" pos:end="167:55"><name pos:start="167:41" pos:end="167:55"><name pos:start="167:41" pos:end="167:41">s</name><operator pos:start="167:42" pos:end="167:43">-&gt;</operator><name pos:start="167:44" pos:end="167:55">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="169:13" pos:end="173:13"><if pos:start="169:13" pos:end="173:13">if <condition pos:start="169:16" pos:end="169:24">(<expr pos:start="169:17" pos:end="169:23"><name pos:start="169:17" pos:end="169:19">ret</name> <operator pos:start="169:21" pos:end="169:21">&lt;</operator> <literal type="number" pos:start="169:23" pos:end="169:23">0</literal></expr>)</condition> <block pos:start="169:26" pos:end="173:13">{<block_content pos:start="171:17" pos:end="171:27">

                <return pos:start="171:17" pos:end="171:27">return <expr pos:start="171:24" pos:end="171:26"><name pos:start="171:24" pos:end="171:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="175:13" pos:end="185:13"><if pos:start="175:13" pos:end="185:13">if <condition pos:start="175:16" pos:end="175:48">(<expr pos:start="175:17" pos:end="175:47"><operator pos:start="175:17" pos:end="175:17">(</operator><operator pos:start="175:18" pos:end="175:18">*</operator><name pos:start="175:19" pos:end="175:32">refcount_table</name><operator pos:start="175:33" pos:end="175:33">)</operator><index pos:start="175:34" pos:end="175:42">[<expr pos:start="175:35" pos:end="175:41"><name pos:start="175:35" pos:end="175:41">cluster</name></expr>]</index> <operator pos:start="175:44" pos:end="175:45">!=</operator> <literal type="number" pos:start="175:47" pos:end="175:47">1</literal></expr>)</condition> <block pos:start="175:50" pos:end="185:13">{<block_content pos:start="177:17" pos:end="183:32">

                <expr_stmt pos:start="177:17" pos:end="179:73"><expr pos:start="177:17" pos:end="179:72"><call pos:start="177:17" pos:end="179:72"><name pos:start="177:17" pos:end="177:23">fprintf</name><argument_list pos:start="177:24" pos:end="179:72">(<argument pos:start="177:25" pos:end="177:30"><expr pos:start="177:25" pos:end="177:30"><name pos:start="177:25" pos:end="177:30">stderr</name></expr></argument>, <argument pos:start="177:33" pos:end="179:40"><expr pos:start="177:33" pos:end="179:40"><literal type="string" pos:start="177:33" pos:end="177:56">"ERROR refcount block %"</literal> <name pos:start="177:58" pos:end="177:63">PRId64</name>

                        <literal type="string" pos:start="179:25" pos:end="179:40">" refcount=%d\n"</literal></expr></argument>, <argument pos:start="179:43" pos:end="179:43"><expr pos:start="179:43" pos:end="179:43"><name pos:start="179:43" pos:end="179:43">i</name></expr></argument>, <argument pos:start="179:46" pos:end="179:71"><expr pos:start="179:46" pos:end="179:71"><operator pos:start="179:46" pos:end="179:46">(</operator><operator pos:start="179:47" pos:end="179:47">*</operator><name pos:start="179:48" pos:end="179:61">refcount_table</name><operator pos:start="179:62" pos:end="179:62">)</operator><index pos:start="179:63" pos:end="179:71">[<expr pos:start="179:64" pos:end="179:70"><name pos:start="179:64" pos:end="179:70">cluster</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="181:17" pos:end="181:35"><expr pos:start="181:17" pos:end="181:34"><name pos:start="181:17" pos:end="181:32"><name pos:start="181:17" pos:end="181:19">res</name><operator pos:start="181:20" pos:end="181:21">-&gt;</operator><name pos:start="181:22" pos:end="181:32">corruptions</name></name><operator pos:start="181:33" pos:end="181:34">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="183:17" pos:end="183:32"><expr pos:start="183:17" pos:end="183:31"><operator pos:start="183:17" pos:end="183:17">*</operator><name pos:start="183:18" pos:end="183:24">rebuild</name> <operator pos:start="183:26" pos:end="183:26">=</operator> <name pos:start="183:28" pos:end="183:31">true</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <return pos:start="193:5" pos:end="193:13">return <expr pos:start="193:12" pos:end="193:12"><literal type="number" pos:start="193:12" pos:end="193:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
