<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21090.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:4">void</name> <name pos:start="1:6" pos:end="1:11">HELPER</name></type>(<name pos:start="1:13" pos:end="1:16">idte</name>)<parameter_list pos:start="1:18" pos:end="1:76">(<parameter pos:start="1:19" pos:end="1:36"><decl pos:start="1:19" pos:end="1:36"><type pos:start="1:19" pos:end="1:36"><name pos:start="1:19" pos:end="1:31">CPUS390XState</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">env</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:49"><decl pos:start="1:39" pos:end="1:49"><type pos:start="1:39" pos:end="1:49"><name pos:start="1:39" pos:end="1:46">uint64_t</name></type> <name pos:start="1:48" pos:end="1:49">r1</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:62"><decl pos:start="1:52" pos:end="1:62"><type pos:start="1:52" pos:end="1:62"><name pos:start="1:52" pos:end="1:59">uint64_t</name></type> <name pos:start="1:61" pos:end="1:62">r2</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:75"><decl pos:start="1:65" pos:end="1:75"><type pos:start="1:65" pos:end="1:75"><name pos:start="1:65" pos:end="1:72">uint32_t</name></type> <name pos:start="1:74" pos:end="1:75">m4</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="99:1">{<block_content pos:start="5:5" pos:end="97:5">

    <decl_stmt pos:start="5:5" pos:end="5:46"><decl pos:start="5:5" pos:end="5:45"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">cs</name> <init pos:start="5:18" pos:end="5:45">= <expr pos:start="5:20" pos:end="5:45"><call pos:start="5:20" pos:end="5:45"><name pos:start="5:20" pos:end="5:22">CPU</name><argument_list pos:start="5:23" pos:end="5:45">(<argument pos:start="5:24" pos:end="5:44"><expr pos:start="5:24" pos:end="5:44"><call pos:start="5:24" pos:end="5:44"><name pos:start="5:24" pos:end="5:39">s390_env_get_cpu</name><argument_list pos:start="5:40" pos:end="5:44">(<argument pos:start="5:41" pos:end="5:43"><expr pos:start="5:41" pos:end="5:43"><name pos:start="5:41" pos:end="5:43">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:19">uintptr_t</name></type> <name pos:start="7:21" pos:end="7:22">ra</name> <init pos:start="7:24" pos:end="7:32">= <expr pos:start="7:26" pos:end="7:32"><call pos:start="7:26" pos:end="7:32"><name pos:start="7:26" pos:end="7:30">GETPC</name><argument_list pos:start="7:31" pos:end="7:32">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:18">table</name></decl>, <decl pos:start="9:21" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:21" pos:end="9:25">entry</name></decl>, <decl pos:start="9:28" pos:end="9:32"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:28" pos:end="9:32">raddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint16_t</name></type> <name pos:start="11:14" pos:end="11:20">entries</name></decl>, <decl pos:start="11:23" pos:end="11:23"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:23" pos:end="11:23">i</name></decl>, <decl pos:start="11:26" pos:end="11:34"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:26" pos:end="11:30">index</name> <init pos:start="11:32" pos:end="11:34">= <expr pos:start="11:34" pos:end="11:34"><literal type="number" pos:start="11:34" pos:end="11:34">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:21">(<expr pos:start="15:9" pos:end="15:20"><name pos:start="15:9" pos:end="15:10">r2</name> <operator pos:start="15:12" pos:end="15:12">&amp;</operator> <literal type="number" pos:start="15:14" pos:end="15:20">0xff000</literal></expr>)</condition> <block pos:start="15:23" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:53">

        <expr_stmt pos:start="17:9" pos:end="17:34"><expr pos:start="17:9" pos:end="17:33"><call pos:start="17:9" pos:end="17:33"><name pos:start="17:9" pos:end="17:25">cpu_restore_state</name><argument_list pos:start="17:26" pos:end="17:33">(<argument pos:start="17:27" pos:end="17:28"><expr pos:start="17:27" pos:end="17:28"><name pos:start="17:27" pos:end="17:28">cs</name></expr></argument>, <argument pos:start="17:31" pos:end="17:32"><expr pos:start="17:31" pos:end="17:32"><name pos:start="17:31" pos:end="17:32">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:53"><expr pos:start="19:9" pos:end="19:52"><call pos:start="19:9" pos:end="19:52"><name pos:start="19:9" pos:end="19:25">program_interrupt</name><argument_list pos:start="19:26" pos:end="19:52">(<argument pos:start="19:27" pos:end="19:29"><expr pos:start="19:27" pos:end="19:29"><name pos:start="19:27" pos:end="19:29">env</name></expr></argument>, <argument pos:start="19:32" pos:end="19:48"><expr pos:start="19:32" pos:end="19:48"><name pos:start="19:32" pos:end="19:48">PGM_SPECIFICATION</name></expr></argument>, <argument pos:start="19:51" pos:end="19:51"><expr pos:start="19:51" pos:end="19:51"><literal type="number" pos:start="19:51" pos:end="19:51">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="83:5"><if pos:start="25:5" pos:end="83:5">if <condition pos:start="25:8" pos:end="25:22">(<expr pos:start="25:9" pos:end="25:21"><operator pos:start="25:9" pos:end="25:9">!</operator><operator pos:start="25:10" pos:end="25:10">(</operator><name pos:start="25:11" pos:end="25:12">r2</name> <operator pos:start="25:14" pos:end="25:14">&amp;</operator> <literal type="number" pos:start="25:16" pos:end="25:20">0x800</literal><operator pos:start="25:21" pos:end="25:21">)</operator></expr>)</condition> <block pos:start="25:24" pos:end="83:5">{<block_content pos:start="29:9" pos:end="81:9">

        <comment type="block" pos:start="27:9" pos:end="27:49">/* invalidation-and-clearing operation */</comment>

        <expr_stmt pos:start="29:9" pos:end="29:34"><expr pos:start="29:9" pos:end="29:33"><name pos:start="29:9" pos:end="29:13">table</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <name pos:start="29:17" pos:end="29:18">r1</name> <operator pos:start="29:20" pos:end="29:20">&amp;</operator> <name pos:start="29:22" pos:end="29:33">_ASCE_ORIGIN</name></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:35"><expr pos:start="31:9" pos:end="31:34"><name pos:start="31:9" pos:end="31:15">entries</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <operator pos:start="31:19" pos:end="31:19">(</operator><name pos:start="31:20" pos:end="31:21">r2</name> <operator pos:start="31:23" pos:end="31:23">&amp;</operator> <literal type="number" pos:start="31:25" pos:end="31:29">0x7ff</literal><operator pos:start="31:30" pos:end="31:30">)</operator> <operator pos:start="31:32" pos:end="31:32">+</operator> <literal type="number" pos:start="31:34" pos:end="31:34">1</literal></expr>;</expr_stmt>



        <switch pos:start="35:9" pos:end="61:9">switch <condition pos:start="35:16" pos:end="35:37">(<expr pos:start="35:17" pos:end="35:36"><name pos:start="35:17" pos:end="35:18">r1</name> <operator pos:start="35:20" pos:end="35:20">&amp;</operator> <name pos:start="35:22" pos:end="35:36">_ASCE_TYPE_MASK</name></expr>)</condition> <block pos:start="35:39" pos:end="61:9">{<block_content pos:start="37:9" pos:end="59:18">

        <case pos:start="37:9" pos:end="37:32">case <expr pos:start="37:14" pos:end="37:31"><name pos:start="37:14" pos:end="37:31">_ASCE_TYPE_REGION1</name></expr>:</case>

            <expr_stmt pos:start="39:13" pos:end="39:39"><expr pos:start="39:13" pos:end="39:38"><name pos:start="39:13" pos:end="39:17">index</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <operator pos:start="39:21" pos:end="39:21">(</operator><name pos:start="39:22" pos:end="39:23">r2</name> <operator pos:start="39:25" pos:end="39:26">&gt;&gt;</operator> <literal type="number" pos:start="39:28" pos:end="39:29">53</literal><operator pos:start="39:30" pos:end="39:30">)</operator> <operator pos:start="39:32" pos:end="39:32">&amp;</operator> <literal type="number" pos:start="39:34" pos:end="39:38">0x7ff</literal></expr>;</expr_stmt>

            <break pos:start="41:13" pos:end="41:18">break;</break>

        <case pos:start="43:9" pos:end="43:32">case <expr pos:start="43:14" pos:end="43:31"><name pos:start="43:14" pos:end="43:31">_ASCE_TYPE_REGION2</name></expr>:</case>

            <expr_stmt pos:start="45:13" pos:end="45:39"><expr pos:start="45:13" pos:end="45:38"><name pos:start="45:13" pos:end="45:17">index</name> <operator pos:start="45:19" pos:end="45:19">=</operator> <operator pos:start="45:21" pos:end="45:21">(</operator><name pos:start="45:22" pos:end="45:23">r2</name> <operator pos:start="45:25" pos:end="45:26">&gt;&gt;</operator> <literal type="number" pos:start="45:28" pos:end="45:29">42</literal><operator pos:start="45:30" pos:end="45:30">)</operator> <operator pos:start="45:32" pos:end="45:32">&amp;</operator> <literal type="number" pos:start="45:34" pos:end="45:38">0x7ff</literal></expr>;</expr_stmt>

            <break pos:start="47:13" pos:end="47:18">break;</break>

        <case pos:start="49:9" pos:end="49:32">case <expr pos:start="49:14" pos:end="49:31"><name pos:start="49:14" pos:end="49:31">_ASCE_TYPE_REGION3</name></expr>:</case>

            <expr_stmt pos:start="51:13" pos:end="51:39"><expr pos:start="51:13" pos:end="51:38"><name pos:start="51:13" pos:end="51:17">index</name> <operator pos:start="51:19" pos:end="51:19">=</operator> <operator pos:start="51:21" pos:end="51:21">(</operator><name pos:start="51:22" pos:end="51:23">r2</name> <operator pos:start="51:25" pos:end="51:26">&gt;&gt;</operator> <literal type="number" pos:start="51:28" pos:end="51:29">31</literal><operator pos:start="51:30" pos:end="51:30">)</operator> <operator pos:start="51:32" pos:end="51:32">&amp;</operator> <literal type="number" pos:start="51:34" pos:end="51:38">0x7ff</literal></expr>;</expr_stmt>

            <break pos:start="53:13" pos:end="53:18">break;</break>

        <case pos:start="55:9" pos:end="55:32">case <expr pos:start="55:14" pos:end="55:31"><name pos:start="55:14" pos:end="55:31">_ASCE_TYPE_SEGMENT</name></expr>:</case>

            <expr_stmt pos:start="57:13" pos:end="57:39"><expr pos:start="57:13" pos:end="57:38"><name pos:start="57:13" pos:end="57:17">index</name> <operator pos:start="57:19" pos:end="57:19">=</operator> <operator pos:start="57:21" pos:end="57:21">(</operator><name pos:start="57:22" pos:end="57:23">r2</name> <operator pos:start="57:25" pos:end="57:26">&gt;&gt;</operator> <literal type="number" pos:start="57:28" pos:end="57:29">20</literal><operator pos:start="57:30" pos:end="57:30">)</operator> <operator pos:start="57:32" pos:end="57:32">&amp;</operator> <literal type="number" pos:start="57:34" pos:end="57:38">0x7ff</literal></expr>;</expr_stmt>

            <break pos:start="59:13" pos:end="59:18">break;</break>

        </block_content>}</block></switch>

        <for pos:start="63:9" pos:end="81:9">for <control pos:start="63:13" pos:end="63:37">(<init pos:start="63:14" pos:end="63:19"><expr pos:start="63:14" pos:end="63:18"><name pos:start="63:14" pos:end="63:14">i</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <literal type="number" pos:start="63:18" pos:end="63:18">0</literal></expr>;</init> <condition pos:start="63:21" pos:end="63:32"><expr pos:start="63:21" pos:end="63:31"><name pos:start="63:21" pos:end="63:21">i</name> <operator pos:start="63:23" pos:end="63:23">&lt;</operator> <name pos:start="63:25" pos:end="63:31">entries</name></expr>;</condition> <incr pos:start="63:34" pos:end="63:36"><expr pos:start="63:34" pos:end="63:36"><name pos:start="63:34" pos:end="63:34">i</name><operator pos:start="63:35" pos:end="63:36">++</operator></expr></incr>)</control> <block pos:start="63:39" pos:end="81:9">{<block_content pos:start="67:13" pos:end="79:13">

            <comment type="block" pos:start="65:13" pos:end="65:79">/* addresses are not wrapped in 24/31bit mode but table index is */</comment>

            <expr_stmt pos:start="67:13" pos:end="67:66"><expr pos:start="67:13" pos:end="67:65"><name pos:start="67:13" pos:end="67:17">raddr</name> <operator pos:start="67:19" pos:end="67:19">=</operator> <name pos:start="67:21" pos:end="67:25">table</name> <operator pos:start="67:27" pos:end="67:27">+</operator> <operator pos:start="67:29" pos:end="67:29">(</operator><operator pos:start="67:30" pos:end="67:30">(</operator><name pos:start="67:31" pos:end="67:35">index</name> <operator pos:start="67:37" pos:end="67:37">+</operator> <name pos:start="67:39" pos:end="67:39">i</name><operator pos:start="67:40" pos:end="67:40">)</operator> <operator pos:start="67:42" pos:end="67:42">&amp;</operator> <literal type="number" pos:start="67:44" pos:end="67:48">0x7ff</literal><operator pos:start="67:49" pos:end="67:49">)</operator> <operator pos:start="67:51" pos:end="67:51">*</operator> <sizeof pos:start="67:53" pos:end="67:65">sizeof<argument_list pos:start="67:59" pos:end="67:65">(<argument pos:start="67:60" pos:end="67:64"><expr pos:start="67:60" pos:end="67:64"><name pos:start="67:60" pos:end="67:64">entry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:52"><expr pos:start="69:13" pos:end="69:51"><name pos:start="69:13" pos:end="69:17">entry</name> <operator pos:start="69:19" pos:end="69:19">=</operator> <call pos:start="69:21" pos:end="69:51"><name pos:start="69:21" pos:end="69:35">cpu_ldq_real_ra</name><argument_list pos:start="69:36" pos:end="69:51">(<argument pos:start="69:37" pos:end="69:39"><expr pos:start="69:37" pos:end="69:39"><name pos:start="69:37" pos:end="69:39">env</name></expr></argument>, <argument pos:start="69:42" pos:end="69:46"><expr pos:start="69:42" pos:end="69:46"><name pos:start="69:42" pos:end="69:46">raddr</name></expr></argument>, <argument pos:start="69:49" pos:end="69:50"><expr pos:start="69:49" pos:end="69:50"><name pos:start="69:49" pos:end="69:50">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="71:13" pos:end="79:13"><if pos:start="71:13" pos:end="79:13">if <condition pos:start="71:16" pos:end="71:45">(<expr pos:start="71:17" pos:end="71:44"><operator pos:start="71:17" pos:end="71:17">!</operator><operator pos:start="71:18" pos:end="71:18">(</operator><name pos:start="71:19" pos:end="71:23">entry</name> <operator pos:start="71:25" pos:end="71:25">&amp;</operator> <name pos:start="71:27" pos:end="71:43">_REGION_ENTRY_INV</name><operator pos:start="71:44" pos:end="71:44">)</operator></expr>)</condition> <block pos:start="71:47" pos:end="79:13">{<block_content pos:start="75:17" pos:end="77:55">

                <comment type="block" pos:start="73:17" pos:end="73:68">/* we are allowed to not store if already invalid */</comment>

                <expr_stmt pos:start="75:17" pos:end="75:43"><expr pos:start="75:17" pos:end="75:42"><name pos:start="75:17" pos:end="75:21">entry</name> <operator pos:start="75:23" pos:end="75:24">|=</operator> <name pos:start="75:26" pos:end="75:42">_REGION_ENTRY_INV</name></expr>;</expr_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:55"><expr pos:start="77:17" pos:end="77:54"><call pos:start="77:17" pos:end="77:54"><name pos:start="77:17" pos:end="77:31">cpu_stq_real_ra</name><argument_list pos:start="77:32" pos:end="77:54">(<argument pos:start="77:33" pos:end="77:35"><expr pos:start="77:33" pos:end="77:35"><name pos:start="77:33" pos:end="77:35">env</name></expr></argument>, <argument pos:start="77:38" pos:end="77:42"><expr pos:start="77:38" pos:end="77:42"><name pos:start="77:38" pos:end="77:42">raddr</name></expr></argument>, <argument pos:start="77:45" pos:end="77:49"><expr pos:start="77:45" pos:end="77:49"><name pos:start="77:45" pos:end="77:49">entry</name></expr></argument>, <argument pos:start="77:52" pos:end="77:53"><expr pos:start="77:52" pos:end="77:53"><name pos:start="77:52" pos:end="77:53">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:71">/* We simply flush the complete tlb, therefore we can ignore r3. */</comment>

    <if_stmt pos:start="89:5" pos:end="97:5"><if pos:start="89:5" pos:end="93:5">if <condition pos:start="89:8" pos:end="89:15">(<expr pos:start="89:9" pos:end="89:14"><name pos:start="89:9" pos:end="89:10">m4</name> <operator pos:start="89:12" pos:end="89:12">&amp;</operator> <literal type="number" pos:start="89:14" pos:end="89:14">1</literal></expr>)</condition> <block pos:start="89:17" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:22">

        <expr_stmt pos:start="91:9" pos:end="91:22"><expr pos:start="91:9" pos:end="91:21"><call pos:start="91:9" pos:end="91:21"><name pos:start="91:9" pos:end="91:17">tlb_flush</name><argument_list pos:start="91:18" pos:end="91:21">(<argument pos:start="91:19" pos:end="91:20"><expr pos:start="91:19" pos:end="91:20"><name pos:start="91:19" pos:end="91:20">cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="93:7" pos:end="97:5">else <block pos:start="93:12" pos:end="97:5">{<block_content pos:start="95:9" pos:end="95:38">

        <expr_stmt pos:start="95:9" pos:end="95:38"><expr pos:start="95:9" pos:end="95:37"><call pos:start="95:9" pos:end="95:37"><name pos:start="95:9" pos:end="95:33">tlb_flush_all_cpus_synced</name><argument_list pos:start="95:34" pos:end="95:37">(<argument pos:start="95:35" pos:end="95:36"><expr pos:start="95:35" pos:end="95:36"><name pos:start="95:35" pos:end="95:36">cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
