<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11996.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:37">thread_get_buffer_internal</name><parameter_list pos:start="1:38" pos:end="1:87">(<parameter pos:start="1:39" pos:end="1:59"><decl pos:start="1:39" pos:end="1:59"><type pos:start="1:39" pos:end="1:59"><name pos:start="1:39" pos:end="1:52">AVCodecContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:59">avctx</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:75"><decl pos:start="1:62" pos:end="1:75"><type pos:start="1:62" pos:end="1:75"><name pos:start="1:62" pos:end="1:72">ThreadFrame</name> <modifier pos:start="1:74" pos:end="1:74">*</modifier></type><name pos:start="1:75" pos:end="1:75">f</name></decl></parameter>, <parameter pos:start="1:78" pos:end="1:86"><decl pos:start="1:78" pos:end="1:86"><type pos:start="1:78" pos:end="1:86"><name pos:start="1:78" pos:end="1:80">int</name></type> <name pos:start="1:82" pos:end="1:86">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="125:1">{<block_content pos:start="5:5" pos:end="123:15">

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">PerThreadContext</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:23">p</name> <init pos:start="5:25" pos:end="5:46">= <expr pos:start="5:27" pos:end="5:46"><name pos:start="5:27" pos:end="5:46"><name pos:start="5:27" pos:end="5:31">avctx</name><operator pos:start="5:32" pos:end="5:33">-&gt;</operator><name pos:start="5:34" pos:end="5:46">thread_opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">err</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:21"><expr pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:5">f</name><operator pos:start="11:6" pos:end="11:7">-&gt;</operator><name pos:start="11:8" pos:end="11:12">owner</name></name> <operator pos:start="11:14" pos:end="11:14">=</operator> <name pos:start="11:16" pos:end="11:20">avctx</name></expr>;</expr_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:37"><expr pos:start="15:5" pos:end="15:36"><call pos:start="15:5" pos:end="15:36"><name pos:start="15:5" pos:end="15:23">ff_init_buffer_info</name><argument_list pos:start="15:24" pos:end="15:36">(<argument pos:start="15:25" pos:end="15:29"><expr pos:start="15:25" pos:end="15:29"><name pos:start="15:25" pos:end="15:29">avctx</name></expr></argument>, <argument pos:start="15:32" pos:end="15:35"><expr pos:start="15:32" pos:end="15:35"><name pos:start="15:32" pos:end="15:35"><name pos:start="15:32" pos:end="15:32">f</name><operator pos:start="15:33" pos:end="15:34">-&gt;</operator><name pos:start="15:35" pos:end="15:35">f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="21:49"><if pos:start="19:5" pos:end="21:49">if <condition pos:start="19:8" pos:end="19:55">(<expr pos:start="19:9" pos:end="19:54"><operator pos:start="19:9" pos:end="19:9">!</operator><operator pos:start="19:10" pos:end="19:10">(</operator><name pos:start="19:11" pos:end="19:35"><name pos:start="19:11" pos:end="19:15">avctx</name><operator pos:start="19:16" pos:end="19:17">-&gt;</operator><name pos:start="19:18" pos:end="19:35">active_thread_type</name></name> <operator pos:start="19:37" pos:end="19:37">&amp;</operator> <name pos:start="19:39" pos:end="19:53">FF_THREAD_FRAME</name><operator pos:start="19:54" pos:end="19:54">)</operator></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:49"><block_content pos:start="21:9" pos:end="21:49">

        <return pos:start="21:9" pos:end="21:49">return <expr pos:start="21:16" pos:end="21:48"><call pos:start="21:16" pos:end="21:48"><name pos:start="21:16" pos:end="21:28">ff_get_buffer</name><argument_list pos:start="21:29" pos:end="21:48">(<argument pos:start="21:30" pos:end="21:34"><expr pos:start="21:30" pos:end="21:34"><name pos:start="21:30" pos:end="21:34">avctx</name></expr></argument>, <argument pos:start="21:37" pos:end="21:40"><expr pos:start="21:37" pos:end="21:40"><name pos:start="21:37" pos:end="21:40"><name pos:start="21:37" pos:end="21:37">f</name><operator pos:start="21:38" pos:end="21:39">-&gt;</operator><name pos:start="21:40" pos:end="21:40">f</name></name></expr></argument>, <argument pos:start="21:43" pos:end="21:47"><expr pos:start="21:43" pos:end="21:47"><name pos:start="21:43" pos:end="21:47">flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="35:5"><if pos:start="25:5" pos:end="35:5">if <condition pos:start="25:8" pos:end="29:66">(<expr pos:start="25:9" pos:end="29:65"><name pos:start="25:9" pos:end="25:16"><name pos:start="25:9" pos:end="25:9">p</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:16">state</name></name> <operator pos:start="25:18" pos:end="25:19">!=</operator> <name pos:start="25:21" pos:end="25:36">STATE_SETTING_UP</name> <operator pos:start="25:38" pos:end="25:39">&amp;&amp;</operator>

        <operator pos:start="27:9" pos:end="27:9">(</operator><name pos:start="27:10" pos:end="27:44"><name pos:start="27:10" pos:end="27:14">avctx</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:21">codec</name><operator pos:start="27:22" pos:end="27:23">-&gt;</operator><name pos:start="27:24" pos:end="27:44">update_thread_context</name></name> <operator pos:start="27:46" pos:end="27:47">||</operator> <operator pos:start="27:49" pos:end="27:49">(</operator><operator pos:start="27:50" pos:end="27:50">!</operator><name pos:start="27:51" pos:end="27:78"><name pos:start="27:51" pos:end="27:55">avctx</name><operator pos:start="27:56" pos:end="27:57">-&gt;</operator><name pos:start="27:58" pos:end="27:78">thread_safe_callbacks</name></name> <operator pos:start="27:80" pos:end="27:81">&amp;&amp;</operator>

                <name pos:start="29:17" pos:end="29:33"><name pos:start="29:17" pos:end="29:21">avctx</name><operator pos:start="29:22" pos:end="29:23">-&gt;</operator><name pos:start="29:24" pos:end="29:33">get_buffer</name></name> <operator pos:start="29:35" pos:end="29:36">!=</operator> <name pos:start="29:38" pos:end="29:63">avcodec_default_get_buffer</name><operator pos:start="29:64" pos:end="29:64">)</operator><operator pos:start="29:65" pos:end="29:65">)</operator></expr>)</condition> <block pos:start="29:68" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:18">

        <expr_stmt pos:start="31:9" pos:end="31:102"><expr pos:start="31:9" pos:end="31:101"><call pos:start="31:9" pos:end="31:101"><name pos:start="31:9" pos:end="31:14">av_log</name><argument_list pos:start="31:15" pos:end="31:101">(<argument pos:start="31:16" pos:end="31:20"><expr pos:start="31:16" pos:end="31:20"><name pos:start="31:16" pos:end="31:20">avctx</name></expr></argument>, <argument pos:start="31:23" pos:end="31:34"><expr pos:start="31:23" pos:end="31:34"><name pos:start="31:23" pos:end="31:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:37" pos:end="31:100"><expr pos:start="31:37" pos:end="31:100"><literal type="string" pos:start="31:37" pos:end="31:100">"get_buffer() cannot be called after ff_thread_finish_setup()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:18">return <expr pos:start="33:16" pos:end="33:17"><operator pos:start="33:16" pos:end="33:16">-</operator><literal type="number" pos:start="33:17" pos:end="33:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="57:5"><if pos:start="39:5" pos:end="57:5">if <condition pos:start="39:8" pos:end="39:43">(<expr pos:start="39:9" pos:end="39:42"><name pos:start="39:9" pos:end="39:42"><name pos:start="39:9" pos:end="39:13">avctx</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:23">internal</name><operator pos:start="39:24" pos:end="39:25">-&gt;</operator><name pos:start="39:26" pos:end="39:42">allocate_progress</name></name></expr>)</condition> <block pos:start="39:45" pos:end="57:5">{<block_content pos:start="41:9" pos:end="55:39">

        <decl_stmt pos:start="41:9" pos:end="41:22"><decl pos:start="41:9" pos:end="41:21"><type pos:start="41:9" pos:end="41:13"><name pos:start="41:9" pos:end="41:11">int</name> <modifier pos:start="41:13" pos:end="41:13">*</modifier></type><name pos:start="41:14" pos:end="41:21">progress</name></decl>;</decl_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:55"><expr pos:start="43:9" pos:end="43:54"><name pos:start="43:9" pos:end="43:19"><name pos:start="43:9" pos:end="43:9">f</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:19">progress</name></name> <operator pos:start="43:21" pos:end="43:21">=</operator> <call pos:start="43:23" pos:end="43:54"><name pos:start="43:23" pos:end="43:37">av_buffer_alloc</name><argument_list pos:start="43:38" pos:end="43:54">(<argument pos:start="43:39" pos:end="43:53"><expr pos:start="43:39" pos:end="43:53"><literal type="number" pos:start="43:39" pos:end="43:39">2</literal> <operator pos:start="43:41" pos:end="43:41">*</operator> <sizeof pos:start="43:43" pos:end="43:53">sizeof<argument_list pos:start="43:49" pos:end="43:53">(<argument pos:start="43:50" pos:end="43:52"><expr pos:start="43:50" pos:end="43:52"><name pos:start="43:50" pos:end="43:52">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="49:9"><if pos:start="45:9" pos:end="49:9">if <condition pos:start="45:12" pos:end="45:25">(<expr pos:start="45:13" pos:end="45:24"><operator pos:start="45:13" pos:end="45:13">!</operator><name pos:start="45:14" pos:end="45:24"><name pos:start="45:14" pos:end="45:14">f</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:24">progress</name></name></expr>)</condition> <block pos:start="45:27" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:35">

            <return pos:start="47:13" pos:end="47:35">return <expr pos:start="47:20" pos:end="47:34"><call pos:start="47:20" pos:end="47:34"><name pos:start="47:20" pos:end="47:26">AVERROR</name><argument_list pos:start="47:27" pos:end="47:34">(<argument pos:start="47:28" pos:end="47:33"><expr pos:start="47:28" pos:end="47:33"><name pos:start="47:28" pos:end="47:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:43"><expr pos:start="51:9" pos:end="51:42"><name pos:start="51:9" pos:end="51:16">progress</name> <operator pos:start="51:18" pos:end="51:18">=</operator> <operator pos:start="51:20" pos:end="51:20">(</operator><name pos:start="51:21" pos:end="51:23">int</name><operator pos:start="51:24" pos:end="51:24">*</operator><operator pos:start="51:25" pos:end="51:25">)</operator><name pos:start="51:26" pos:end="51:42"><name pos:start="51:26" pos:end="51:26">f</name><operator pos:start="51:27" pos:end="51:28">-&gt;</operator><name pos:start="51:29" pos:end="51:36">progress</name><operator pos:start="51:37" pos:end="51:38">-&gt;</operator><name pos:start="51:39" pos:end="51:42">data</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:39"><expr pos:start="55:9" pos:end="55:38"><name pos:start="55:9" pos:end="55:19"><name pos:start="55:9" pos:end="55:16">progress</name><index pos:start="55:17" pos:end="55:19">[<expr pos:start="55:18" pos:end="55:18"><literal type="number" pos:start="55:18" pos:end="55:18">0</literal></expr>]</index></name> <operator pos:start="55:21" pos:end="55:21">=</operator> <name pos:start="55:23" pos:end="55:33"><name pos:start="55:23" pos:end="55:30">progress</name><index pos:start="55:31" pos:end="55:33">[<expr pos:start="55:32" pos:end="55:32"><literal type="number" pos:start="55:32" pos:end="55:32">1</literal></expr>]</index></name> <operator pos:start="55:35" pos:end="55:35">=</operator> <operator pos:start="55:37" pos:end="55:37">-</operator><literal type="number" pos:start="55:38" pos:end="55:38">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:49"><expr pos:start="61:5" pos:end="61:48"><call pos:start="61:5" pos:end="61:48"><name pos:start="61:5" pos:end="61:22">pthread_mutex_lock</name><argument_list pos:start="61:23" pos:end="61:48">(<argument pos:start="61:24" pos:end="61:47"><expr pos:start="61:24" pos:end="61:47"><operator pos:start="61:24" pos:end="61:24">&amp;</operator><name pos:start="61:25" pos:end="61:47"><name pos:start="61:25" pos:end="61:25">p</name><operator pos:start="61:26" pos:end="61:27">-&gt;</operator><name pos:start="61:28" pos:end="61:33">parent</name><operator pos:start="61:34" pos:end="61:35">-&gt;</operator><name pos:start="61:36" pos:end="61:47">buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="65:5" pos:end="109:5"><if pos:start="65:5" pos:end="77:5">if <condition pos:start="65:8" pos:end="73:59">(<expr pos:start="65:9" pos:end="73:58"><name pos:start="65:9" pos:end="65:36"><name pos:start="65:9" pos:end="65:13">avctx</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:36">thread_safe_callbacks</name></name> <operator pos:start="65:38" pos:end="65:39">||</operator> <operator pos:start="65:41" pos:end="68:0">(</operator>

<cpp:if pos:start="67:1" pos:end="67:21">#<cpp:directive pos:start="67:2" pos:end="67:3">if</cpp:directive> <expr pos:start="67:5" pos:end="67:21"><name pos:start="67:5" pos:end="67:21">FF_API_GET_BUFFER</name></expr></cpp:if>

        <operator pos:start="69:9" pos:end="69:9">!</operator><name pos:start="69:10" pos:end="69:26"><name pos:start="69:10" pos:end="69:14">avctx</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:26">get_buffer</name></name> <operator pos:start="69:28" pos:end="72:0">&amp;&amp;</operator>

<cpp:endif pos:start="71:1" pos:end="71:6">#<cpp:directive pos:start="71:2" pos:end="71:6">endif</cpp:directive></cpp:endif>

        <name pos:start="73:9" pos:end="73:26"><name pos:start="73:9" pos:end="73:13">avctx</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:26">get_buffer2</name></name> <operator pos:start="73:28" pos:end="73:29">==</operator> <name pos:start="73:31" pos:end="73:57">avcodec_default_get_buffer2</name><operator pos:start="73:58" pos:end="73:58">)</operator></expr>)</condition> <block pos:start="73:61" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:48">

        <expr_stmt pos:start="75:9" pos:end="75:48"><expr pos:start="75:9" pos:end="75:47"><name pos:start="75:9" pos:end="75:11">err</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="75:47"><name pos:start="75:15" pos:end="75:27">ff_get_buffer</name><argument_list pos:start="75:28" pos:end="75:47">(<argument pos:start="75:29" pos:end="75:33"><expr pos:start="75:29" pos:end="75:33"><name pos:start="75:29" pos:end="75:33">avctx</name></expr></argument>, <argument pos:start="75:36" pos:end="75:39"><expr pos:start="75:36" pos:end="75:39"><name pos:start="75:36" pos:end="75:39"><name pos:start="75:36" pos:end="75:36">f</name><operator pos:start="75:37" pos:end="75:38">-&gt;</operator><name pos:start="75:39" pos:end="75:39">f</name></name></expr></argument>, <argument pos:start="75:42" pos:end="75:46"><expr pos:start="75:42" pos:end="75:46"><name pos:start="75:42" pos:end="75:46">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="77:7" pos:end="109:5">else <block pos:start="77:12" pos:end="109:5">{<block_content pos:start="79:9" pos:end="107:42">

        <expr_stmt pos:start="79:9" pos:end="79:47"><expr pos:start="79:9" pos:end="79:46"><call pos:start="79:9" pos:end="79:46"><name pos:start="79:9" pos:end="79:26">pthread_mutex_lock</name><argument_list pos:start="79:27" pos:end="79:46">(<argument pos:start="79:28" pos:end="79:45"><expr pos:start="79:28" pos:end="79:45"><operator pos:start="79:28" pos:end="79:28">&amp;</operator><name pos:start="79:29" pos:end="79:45"><name pos:start="79:29" pos:end="79:29">p</name><operator pos:start="79:30" pos:end="79:31">-&gt;</operator><name pos:start="79:32" pos:end="79:45">progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:34"><expr pos:start="81:9" pos:end="81:33"><name pos:start="81:9" pos:end="81:26"><name pos:start="81:9" pos:end="81:9">p</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:26">requested_frame</name></name> <operator pos:start="81:28" pos:end="81:28">=</operator> <name pos:start="81:30" pos:end="81:33"><name pos:start="81:30" pos:end="81:30">f</name><operator pos:start="81:31" pos:end="81:32">-&gt;</operator><name pos:start="81:33" pos:end="81:33">f</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:35"><expr pos:start="83:9" pos:end="83:34"><name pos:start="83:9" pos:end="83:26"><name pos:start="83:9" pos:end="83:9">p</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:26">requested_flags</name></name> <operator pos:start="83:28" pos:end="83:28">=</operator> <name pos:start="83:30" pos:end="83:34">flags</name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:36"><expr pos:start="85:9" pos:end="85:35"><name pos:start="85:9" pos:end="85:16"><name pos:start="85:9" pos:end="85:9">p</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:16">state</name></name> <operator pos:start="85:18" pos:end="85:18">=</operator> <name pos:start="85:20" pos:end="85:35">STATE_GET_BUFFER</name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:50"><expr pos:start="87:9" pos:end="87:49"><call pos:start="87:9" pos:end="87:49"><name pos:start="87:9" pos:end="87:30">pthread_cond_broadcast</name><argument_list pos:start="87:31" pos:end="87:49">(<argument pos:start="87:32" pos:end="87:48"><expr pos:start="87:32" pos:end="87:48"><operator pos:start="87:32" pos:end="87:32">&amp;</operator><name pos:start="87:33" pos:end="87:48"><name pos:start="87:33" pos:end="87:33">p</name><operator pos:start="87:34" pos:end="87:35">-&gt;</operator><name pos:start="87:36" pos:end="87:48">progress_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <while pos:start="91:9" pos:end="93:69">while <condition pos:start="91:15" pos:end="91:44">(<expr pos:start="91:16" pos:end="91:43"><name pos:start="91:16" pos:end="91:23"><name pos:start="91:16" pos:end="91:16">p</name><operator pos:start="91:17" pos:end="91:18">-&gt;</operator><name pos:start="91:19" pos:end="91:23">state</name></name> <operator pos:start="91:25" pos:end="91:26">!=</operator> <name pos:start="91:28" pos:end="91:43">STATE_SETTING_UP</name></expr>)</condition><block type="pseudo" pos:start="93:13" pos:end="93:69"><block_content pos:start="93:13" pos:end="93:69">

            <expr_stmt pos:start="93:13" pos:end="93:69"><expr pos:start="93:13" pos:end="93:68"><call pos:start="93:13" pos:end="93:68"><name pos:start="93:13" pos:end="93:29">pthread_cond_wait</name><argument_list pos:start="93:30" pos:end="93:68">(<argument pos:start="93:31" pos:end="93:47"><expr pos:start="93:31" pos:end="93:47"><operator pos:start="93:31" pos:end="93:31">&amp;</operator><name pos:start="93:32" pos:end="93:47"><name pos:start="93:32" pos:end="93:32">p</name><operator pos:start="93:33" pos:end="93:34">-&gt;</operator><name pos:start="93:35" pos:end="93:47">progress_cond</name></name></expr></argument>, <argument pos:start="93:50" pos:end="93:67"><expr pos:start="93:50" pos:end="93:67"><operator pos:start="93:50" pos:end="93:50">&amp;</operator><name pos:start="93:51" pos:end="93:67"><name pos:start="93:51" pos:end="93:51">p</name><operator pos:start="93:52" pos:end="93:53">-&gt;</operator><name pos:start="93:54" pos:end="93:67">progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>



        <expr_stmt pos:start="97:9" pos:end="97:24"><expr pos:start="97:9" pos:end="97:23"><name pos:start="97:9" pos:end="97:11">err</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <name pos:start="97:15" pos:end="97:23"><name pos:start="97:15" pos:end="97:15">p</name><operator pos:start="97:16" pos:end="97:17">-&gt;</operator><name pos:start="97:18" pos:end="97:23">result</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="101:9" pos:end="101:49"><expr pos:start="101:9" pos:end="101:48"><call pos:start="101:9" pos:end="101:48"><name pos:start="101:9" pos:end="101:28">pthread_mutex_unlock</name><argument_list pos:start="101:29" pos:end="101:48">(<argument pos:start="101:30" pos:end="101:47"><expr pos:start="101:30" pos:end="101:47"><operator pos:start="101:30" pos:end="101:30">&amp;</operator><name pos:start="101:31" pos:end="101:47"><name pos:start="101:31" pos:end="101:31">p</name><operator pos:start="101:32" pos:end="101:33">-&gt;</operator><name pos:start="101:34" pos:end="101:47">progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="105:9" pos:end="107:42"><if pos:start="105:9" pos:end="107:42">if <condition pos:start="105:12" pos:end="105:49">(<expr pos:start="105:13" pos:end="105:48"><operator pos:start="105:13" pos:end="105:13">!</operator><name pos:start="105:14" pos:end="105:48"><name pos:start="105:14" pos:end="105:18">avctx</name><operator pos:start="105:19" pos:end="105:20">-&gt;</operator><name pos:start="105:21" pos:end="105:25">codec</name><operator pos:start="105:26" pos:end="105:27">-&gt;</operator><name pos:start="105:28" pos:end="105:48">update_thread_context</name></name></expr>)</condition><block type="pseudo" pos:start="107:13" pos:end="107:42"><block_content pos:start="107:13" pos:end="107:42">

            <expr_stmt pos:start="107:13" pos:end="107:42"><expr pos:start="107:13" pos:end="107:41"><call pos:start="107:13" pos:end="107:41"><name pos:start="107:13" pos:end="107:34">ff_thread_finish_setup</name><argument_list pos:start="107:35" pos:end="107:41">(<argument pos:start="107:36" pos:end="107:40"><expr pos:start="107:36" pos:end="107:40"><name pos:start="107:36" pos:end="107:40">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="113:5" pos:end="115:38"><if pos:start="113:5" pos:end="115:38">if <condition pos:start="113:8" pos:end="113:12">(<expr pos:start="113:9" pos:end="113:11"><name pos:start="113:9" pos:end="113:11">err</name></expr>)</condition><block type="pseudo" pos:start="115:9" pos:end="115:38"><block_content pos:start="115:9" pos:end="115:38">

        <expr_stmt pos:start="115:9" pos:end="115:38"><expr pos:start="115:9" pos:end="115:37"><call pos:start="115:9" pos:end="115:37"><name pos:start="115:9" pos:end="115:23">av_buffer_unref</name><argument_list pos:start="115:24" pos:end="115:37">(<argument pos:start="115:25" pos:end="115:36"><expr pos:start="115:25" pos:end="115:36"><operator pos:start="115:25" pos:end="115:25">&amp;</operator><name pos:start="115:26" pos:end="115:36"><name pos:start="115:26" pos:end="115:26">f</name><operator pos:start="115:27" pos:end="115:28">-&gt;</operator><name pos:start="115:29" pos:end="115:36">progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:51"><expr pos:start="119:5" pos:end="119:50"><call pos:start="119:5" pos:end="119:50"><name pos:start="119:5" pos:end="119:24">pthread_mutex_unlock</name><argument_list pos:start="119:25" pos:end="119:50">(<argument pos:start="119:26" pos:end="119:49"><expr pos:start="119:26" pos:end="119:49"><operator pos:start="119:26" pos:end="119:26">&amp;</operator><name pos:start="119:27" pos:end="119:49"><name pos:start="119:27" pos:end="119:27">p</name><operator pos:start="119:28" pos:end="119:29">-&gt;</operator><name pos:start="119:30" pos:end="119:35">parent</name><operator pos:start="119:36" pos:end="119:37">-&gt;</operator><name pos:start="119:38" pos:end="119:49">buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="123:5" pos:end="123:15">return <expr pos:start="123:12" pos:end="123:14"><name pos:start="123:12" pos:end="123:14">err</name></expr>;</return>

</block_content>}</block></function>
</unit>
