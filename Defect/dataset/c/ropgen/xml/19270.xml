<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19270.c" pos:tabs="8"><function pos:start="1:1" pos:end="695:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:33">rtl8139_do_receive</name><parameter_list pos:start="1:34" pos:end="1:106">(<parameter pos:start="1:35" pos:end="1:53"><decl pos:start="1:35" pos:end="1:53"><type pos:start="1:35" pos:end="1:53"><name pos:start="1:35" pos:end="1:49">VLANClientState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:53">nc</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:73"><decl pos:start="1:56" pos:end="1:73"><type pos:start="1:56" pos:end="1:73"><specifier pos:start="1:56" pos:end="1:60">const</specifier> <name pos:start="1:62" pos:end="1:68">uint8_t</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:73">buf</name></decl></parameter>, <parameter pos:start="1:76" pos:end="1:87"><decl pos:start="1:76" pos:end="1:87"><type pos:start="1:76" pos:end="1:87"><name pos:start="1:76" pos:end="1:81">size_t</name></type> <name pos:start="1:83" pos:end="1:87">size_</name></decl></parameter>, <parameter pos:start="1:90" pos:end="1:105"><decl pos:start="1:90" pos:end="1:105"><type pos:start="1:90" pos:end="1:105"><name pos:start="1:90" pos:end="1:92">int</name></type> <name pos:start="1:94" pos:end="1:105">do_interrupt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="695:1">{<block_content pos:start="5:5" pos:end="693:17">

    <decl_stmt pos:start="5:5" pos:end="5:58"><decl pos:start="5:5" pos:end="5:57"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">RTL8139State</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:57">= <expr pos:start="5:23" pos:end="5:57"><call pos:start="5:23" pos:end="5:49"><name pos:start="5:23" pos:end="5:31">DO_UPCAST</name><argument_list pos:start="5:32" pos:end="5:49">(<argument pos:start="5:33" pos:end="5:40"><expr pos:start="5:33" pos:end="5:40"><name pos:start="5:33" pos:end="5:40">NICState</name></expr></argument>, <argument pos:start="5:43" pos:end="5:44"><expr pos:start="5:43" pos:end="5:44"><name pos:start="5:43" pos:end="5:44">nc</name></expr></argument>, <argument pos:start="5:47" pos:end="5:48"><expr pos:start="5:47" pos:end="5:48"><name pos:start="5:47" pos:end="5:48">nc</name></expr></argument>)</argument_list></call><operator pos:start="5:50" pos:end="5:51">-&gt;</operator><name pos:start="5:52" pos:end="5:57">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">size</name> <init pos:start="7:14" pos:end="7:20">= <expr pos:start="7:16" pos:end="7:20"><name pos:start="7:16" pos:end="7:20">size_</name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:26">packet_header</name> <init pos:start="11:28" pos:end="11:30">= <expr pos:start="11:30" pos:end="11:30"><literal type="number" pos:start="11:30" pos:end="11:30">0</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">uint8_t</name></type> <name pos:start="15:13" pos:end="15:20"><name pos:start="15:13" pos:end="15:16">buf1</name><index pos:start="15:17" pos:end="15:20">[<expr pos:start="15:18" pos:end="15:19"><literal type="number" pos:start="15:18" pos:end="15:19">60</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="19:47"><decl pos:start="17:5" pos:end="19:46"><type pos:start="17:5" pos:end="17:24"><specifier pos:start="17:5" pos:end="17:10">static</specifier> <specifier pos:start="17:12" pos:end="17:16">const</specifier> <name pos:start="17:18" pos:end="17:24">uint8_t</name></type> <name pos:start="17:26" pos:end="17:45"><name pos:start="17:26" pos:end="17:42">broadcast_macaddr</name><index pos:start="17:43" pos:end="17:45">[<expr pos:start="17:44" pos:end="17:44"><literal type="number" pos:start="17:44" pos:end="17:44">6</literal></expr>]</index></name> <init pos:start="17:47" pos:end="19:46">=

        <expr pos:start="19:9" pos:end="19:46"><block pos:start="19:9" pos:end="19:46">{ <expr pos:start="19:11" pos:end="19:14"><literal type="number" pos:start="19:11" pos:end="19:14">0xff</literal></expr>, <expr pos:start="19:17" pos:end="19:20"><literal type="number" pos:start="19:17" pos:end="19:20">0xff</literal></expr>, <expr pos:start="19:23" pos:end="19:26"><literal type="number" pos:start="19:23" pos:end="19:26">0xff</literal></expr>, <expr pos:start="19:29" pos:end="19:32"><literal type="number" pos:start="19:29" pos:end="19:32">0xff</literal></expr>, <expr pos:start="19:35" pos:end="19:38"><literal type="number" pos:start="19:35" pos:end="19:38">0xff</literal></expr>, <expr pos:start="19:41" pos:end="19:44"><literal type="number" pos:start="19:41" pos:end="19:44">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:58"><expr pos:start="23:5" pos:end="23:57"><call pos:start="23:5" pos:end="23:57"><name pos:start="23:5" pos:end="23:15">DEBUG_PRINT</name><argument_list pos:start="23:16" pos:end="23:57">(<argument pos:start="23:17" pos:end="23:56"><expr pos:start="23:17" pos:end="23:56"><operator pos:start="23:17" pos:end="23:17">(</operator><literal type="string" pos:start="23:18" pos:end="23:49">"&gt;&gt;&gt; RTL8139: received len=%d\n"</literal><operator pos:start="23:50" pos:end="23:50">,</operator> <name pos:start="23:52" pos:end="23:55">size</name><operator pos:start="23:56" pos:end="23:56">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:40">/* test if board clock is stopped */</comment>

    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="29:26">(<expr pos:start="29:9" pos:end="29:25"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:25"><name pos:start="29:10" pos:end="29:10">s</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:25">clock_enabled</name></name></expr>)</condition>

    <block pos:start="31:5" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:18">

        <expr_stmt pos:start="33:9" pos:end="33:71"><expr pos:start="33:9" pos:end="33:70"><call pos:start="33:9" pos:end="33:70"><name pos:start="33:9" pos:end="33:19">DEBUG_PRINT</name><argument_list pos:start="33:20" pos:end="33:70">(<argument pos:start="33:21" pos:end="33:69"><expr pos:start="33:21" pos:end="33:69"><operator pos:start="33:21" pos:end="33:21">(</operator><literal type="string" pos:start="33:22" pos:end="33:68">"RTL8139: stopped ==========================\n"</literal><operator pos:start="33:69" pos:end="33:69">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:18">return <expr pos:start="35:16" pos:end="35:17"><operator pos:start="35:16" pos:end="35:16">-</operator><literal type="number" pos:start="35:17" pos:end="35:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:44">/* first check if receiver is enabled */</comment>



    <if_stmt pos:start="45:5" pos:end="53:5"><if pos:start="45:5" pos:end="53:5">if <condition pos:start="45:8" pos:end="45:37">(<expr pos:start="45:9" pos:end="45:36"><operator pos:start="45:9" pos:end="45:9">!</operator><call pos:start="45:10" pos:end="45:36"><name pos:start="45:10" pos:end="45:33">rtl8139_receiver_enabled</name><argument_list pos:start="45:34" pos:end="45:36">(<argument pos:start="45:35" pos:end="45:35"><expr pos:start="45:35" pos:end="45:35"><name pos:start="45:35" pos:end="45:35">s</name></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="47:5" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:18">

        <expr_stmt pos:start="49:9" pos:end="49:71"><expr pos:start="49:9" pos:end="49:70"><call pos:start="49:9" pos:end="49:70"><name pos:start="49:9" pos:end="49:19">DEBUG_PRINT</name><argument_list pos:start="49:20" pos:end="49:70">(<argument pos:start="49:21" pos:end="49:69"><expr pos:start="49:21" pos:end="49:69"><operator pos:start="49:21" pos:end="49:21">(</operator><literal type="string" pos:start="49:22" pos:end="49:68">"RTL8139: receiver disabled ================\n"</literal><operator pos:start="49:69" pos:end="49:69">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:18">return <expr pos:start="51:16" pos:end="51:17"><operator pos:start="51:16" pos:end="51:16">-</operator><literal type="number" pos:start="51:17" pos:end="51:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:25">/* XXX: check this */</comment>

    <if_stmt pos:start="59:5" pos:end="235:5"><if pos:start="59:5" pos:end="67:5">if <condition pos:start="59:8" pos:end="59:36">(<expr pos:start="59:9" pos:end="59:35"><name pos:start="59:9" pos:end="59:19"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:19">RxConfig</name></name> <operator pos:start="59:21" pos:end="59:21">&amp;</operator> <name pos:start="59:23" pos:end="59:35">AcceptAllPhys</name></expr>)</condition> <block pos:start="59:38" pos:end="67:5">{<block_content pos:start="63:9" pos:end="63:76">

        <comment type="block" pos:start="61:9" pos:end="61:38">/* promiscuous: receive all */</comment>

        <expr_stmt pos:start="63:9" pos:end="63:76"><expr pos:start="63:9" pos:end="63:75"><call pos:start="63:9" pos:end="63:75"><name pos:start="63:9" pos:end="63:19">DEBUG_PRINT</name><argument_list pos:start="63:20" pos:end="63:75">(<argument pos:start="63:21" pos:end="63:74"><expr pos:start="63:21" pos:end="63:74"><operator pos:start="63:21" pos:end="63:21">(</operator><literal type="string" pos:start="63:22" pos:end="63:73">"&gt;&gt;&gt; RTL8139: packet received in promiscuous mode\n"</literal><operator pos:start="63:74" pos:end="63:74">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <else pos:start="67:7" pos:end="235:5">else <block pos:start="67:12" pos:end="235:5">{<block_content pos:start="69:9" pos:end="233:9">

        <if_stmt pos:start="69:9" pos:end="233:9"><if pos:start="69:9" pos:end="107:9">if <condition pos:start="69:12" pos:end="69:48">(<expr pos:start="69:13" pos:end="69:47"><operator pos:start="69:13" pos:end="69:13">!</operator><call pos:start="69:14" pos:end="69:47"><name pos:start="69:14" pos:end="69:19">memcmp</name><argument_list pos:start="69:20" pos:end="69:47">(<argument pos:start="69:21" pos:end="69:23"><expr pos:start="69:21" pos:end="69:23"><name pos:start="69:21" pos:end="69:23">buf</name></expr></argument>,  <argument pos:start="69:27" pos:end="69:43"><expr pos:start="69:27" pos:end="69:43"><name pos:start="69:27" pos:end="69:43">broadcast_macaddr</name></expr></argument>, <argument pos:start="69:46" pos:end="69:46"><expr pos:start="69:46" pos:end="69:46"><literal type="number" pos:start="69:46" pos:end="69:46">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:50" pos:end="107:9">{<block_content pos:start="73:13" pos:end="103:40">

            <comment type="block" pos:start="71:13" pos:end="71:35">/* broadcast address */</comment>

            <if_stmt pos:start="73:13" pos:end="89:13"><if pos:start="73:13" pos:end="89:13">if <condition pos:start="73:16" pos:end="73:49">(<expr pos:start="73:17" pos:end="73:48"><operator pos:start="73:17" pos:end="73:17">!</operator><operator pos:start="73:18" pos:end="73:18">(</operator><name pos:start="73:19" pos:end="73:29"><name pos:start="73:19" pos:end="73:19">s</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:29">RxConfig</name></name> <operator pos:start="73:31" pos:end="73:31">&amp;</operator> <name pos:start="73:33" pos:end="73:47">AcceptBroadcast</name><operator pos:start="73:48" pos:end="73:48">)</operator></expr>)</condition>

            <block pos:start="75:13" pos:end="89:13">{<block_content pos:start="77:17" pos:end="87:28">

                <expr_stmt pos:start="77:17" pos:end="77:74"><expr pos:start="77:17" pos:end="77:73"><call pos:start="77:17" pos:end="77:73"><name pos:start="77:17" pos:end="77:27">DEBUG_PRINT</name><argument_list pos:start="77:28" pos:end="77:73">(<argument pos:start="77:29" pos:end="77:72"><expr pos:start="77:29" pos:end="77:72"><operator pos:start="77:29" pos:end="77:29">(</operator><literal type="string" pos:start="77:30" pos:end="77:71">"&gt;&gt;&gt; RTL8139: broadcast packet rejected\n"</literal><operator pos:start="77:72" pos:end="77:72">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="81:17" pos:end="81:42">/* update tally counter */</comment>

                <expr_stmt pos:start="83:17" pos:end="83:42"><expr pos:start="83:17" pos:end="83:41"><operator pos:start="83:17" pos:end="83:18">++</operator><name pos:start="83:19" pos:end="83:41"><name pos:start="83:19" pos:end="83:19">s</name><operator pos:start="83:20" pos:end="83:21">-&gt;</operator><name pos:start="83:22" pos:end="83:35">tally_counters</name><operator pos:start="83:36" pos:end="83:36">.</operator><name pos:start="83:37" pos:end="83:41">RxERR</name></name></expr>;</expr_stmt>



                <return pos:start="87:17" pos:end="87:28">return <expr pos:start="87:24" pos:end="87:27"><name pos:start="87:24" pos:end="87:27">size</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="93:13" pos:end="93:41"><expr pos:start="93:13" pos:end="93:40"><name pos:start="93:13" pos:end="93:25">packet_header</name> <operator pos:start="93:27" pos:end="93:28">|=</operator> <name pos:start="93:30" pos:end="93:40">RxBroadcast</name></expr>;</expr_stmt>



            <expr_stmt pos:start="97:13" pos:end="97:70"><expr pos:start="97:13" pos:end="97:69"><call pos:start="97:13" pos:end="97:69"><name pos:start="97:13" pos:end="97:23">DEBUG_PRINT</name><argument_list pos:start="97:24" pos:end="97:69">(<argument pos:start="97:25" pos:end="97:68"><expr pos:start="97:25" pos:end="97:68"><operator pos:start="97:25" pos:end="97:25">(</operator><literal type="string" pos:start="97:26" pos:end="97:67">"&gt;&gt;&gt; RTL8139: broadcast packet received\n"</literal><operator pos:start="97:68" pos:end="97:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="101:13" pos:end="101:38">/* update tally counter */</comment>

            <expr_stmt pos:start="103:13" pos:end="103:40"><expr pos:start="103:13" pos:end="103:39"><operator pos:start="103:13" pos:end="103:14">++</operator><name pos:start="103:15" pos:end="103:39"><name pos:start="103:15" pos:end="103:15">s</name><operator pos:start="103:16" pos:end="103:17">-&gt;</operator><name pos:start="103:18" pos:end="103:31">tally_counters</name><operator pos:start="103:32" pos:end="103:32">.</operator><name pos:start="103:33" pos:end="103:39">RxOkBrd</name></name></expr>;</expr_stmt>



        </block_content>}</block></if> <if type="elseif" pos:start="107:11" pos:end="169:9">else if <condition pos:start="107:19" pos:end="107:33">(<expr pos:start="107:20" pos:end="107:32"><name pos:start="107:20" pos:end="107:25"><name pos:start="107:20" pos:end="107:22">buf</name><index pos:start="107:23" pos:end="107:25">[<expr pos:start="107:24" pos:end="107:24"><literal type="number" pos:start="107:24" pos:end="107:24">0</literal></expr>]</index></name> <operator pos:start="107:27" pos:end="107:27">&amp;</operator> <literal type="number" pos:start="107:29" pos:end="107:32">0x01</literal></expr>)</condition> <block pos:start="107:35" pos:end="169:9">{<block_content pos:start="111:13" pos:end="165:40">

            <comment type="block" pos:start="109:13" pos:end="109:27">/* multicast */</comment>

            <if_stmt pos:start="111:13" pos:end="127:13"><if pos:start="111:13" pos:end="127:13">if <condition pos:start="111:16" pos:end="111:49">(<expr pos:start="111:17" pos:end="111:48"><operator pos:start="111:17" pos:end="111:17">!</operator><operator pos:start="111:18" pos:end="111:18">(</operator><name pos:start="111:19" pos:end="111:29"><name pos:start="111:19" pos:end="111:19">s</name><operator pos:start="111:20" pos:end="111:21">-&gt;</operator><name pos:start="111:22" pos:end="111:29">RxConfig</name></name> <operator pos:start="111:31" pos:end="111:31">&amp;</operator> <name pos:start="111:33" pos:end="111:47">AcceptMulticast</name><operator pos:start="111:48" pos:end="111:48">)</operator></expr>)</condition>

            <block pos:start="113:13" pos:end="127:13">{<block_content pos:start="115:17" pos:end="125:28">

                <expr_stmt pos:start="115:17" pos:end="115:74"><expr pos:start="115:17" pos:end="115:73"><call pos:start="115:17" pos:end="115:73"><name pos:start="115:17" pos:end="115:27">DEBUG_PRINT</name><argument_list pos:start="115:28" pos:end="115:73">(<argument pos:start="115:29" pos:end="115:72"><expr pos:start="115:29" pos:end="115:72"><operator pos:start="115:29" pos:end="115:29">(</operator><literal type="string" pos:start="115:30" pos:end="115:71">"&gt;&gt;&gt; RTL8139: multicast packet rejected\n"</literal><operator pos:start="115:72" pos:end="115:72">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="119:17" pos:end="119:42">/* update tally counter */</comment>

                <expr_stmt pos:start="121:17" pos:end="121:42"><expr pos:start="121:17" pos:end="121:41"><operator pos:start="121:17" pos:end="121:18">++</operator><name pos:start="121:19" pos:end="121:41"><name pos:start="121:19" pos:end="121:19">s</name><operator pos:start="121:20" pos:end="121:21">-&gt;</operator><name pos:start="121:22" pos:end="121:35">tally_counters</name><operator pos:start="121:36" pos:end="121:36">.</operator><name pos:start="121:37" pos:end="121:41">RxERR</name></name></expr>;</expr_stmt>



                <return pos:start="125:17" pos:end="125:28">return <expr pos:start="125:24" pos:end="125:27"><name pos:start="125:24" pos:end="125:27">size</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <decl_stmt pos:start="131:13" pos:end="131:51"><decl pos:start="131:13" pos:end="131:50"><type pos:start="131:13" pos:end="131:15"><name pos:start="131:13" pos:end="131:15">int</name></type> <name pos:start="131:17" pos:end="131:25">mcast_idx</name> <init pos:start="131:27" pos:end="131:50">= <expr pos:start="131:29" pos:end="131:50"><call pos:start="131:29" pos:end="131:50"><name pos:start="131:29" pos:end="131:45">compute_mcast_idx</name><argument_list pos:start="131:46" pos:end="131:50">(<argument pos:start="131:47" pos:end="131:49"><expr pos:start="131:47" pos:end="131:49"><name pos:start="131:47" pos:end="131:49">buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="135:13" pos:end="151:13"><if pos:start="135:13" pos:end="151:13">if <condition pos:start="135:16" pos:end="135:68">(<expr pos:start="135:17" pos:end="135:67"><operator pos:start="135:17" pos:end="135:17">!</operator><operator pos:start="135:18" pos:end="135:18">(</operator><name pos:start="135:19" pos:end="135:41"><name pos:start="135:19" pos:end="135:19">s</name><operator pos:start="135:20" pos:end="135:21">-&gt;</operator><name pos:start="135:22" pos:end="135:25">mult</name><index pos:start="135:26" pos:end="135:41">[<expr pos:start="135:27" pos:end="135:40"><name pos:start="135:27" pos:end="135:35">mcast_idx</name> <operator pos:start="135:37" pos:end="135:38">&gt;&gt;</operator> <literal type="number" pos:start="135:40" pos:end="135:40">3</literal></expr>]</index></name> <operator pos:start="135:43" pos:end="135:43">&amp;</operator> <operator pos:start="135:45" pos:end="135:45">(</operator><literal type="number" pos:start="135:46" pos:end="135:46">1</literal> <operator pos:start="135:48" pos:end="135:49">&lt;&lt;</operator> <operator pos:start="135:51" pos:end="135:51">(</operator><name pos:start="135:52" pos:end="135:60">mcast_idx</name> <operator pos:start="135:62" pos:end="135:62">&amp;</operator> <literal type="number" pos:start="135:64" pos:end="135:64">7</literal><operator pos:start="135:65" pos:end="135:65">)</operator><operator pos:start="135:66" pos:end="135:66">)</operator><operator pos:start="135:67" pos:end="135:67">)</operator></expr>)</condition>

            <block pos:start="137:13" pos:end="151:13">{<block_content pos:start="139:17" pos:end="149:28">

                <expr_stmt pos:start="139:17" pos:end="139:75"><expr pos:start="139:17" pos:end="139:74"><call pos:start="139:17" pos:end="139:74"><name pos:start="139:17" pos:end="139:27">DEBUG_PRINT</name><argument_list pos:start="139:28" pos:end="139:74">(<argument pos:start="139:29" pos:end="139:73"><expr pos:start="139:29" pos:end="139:73"><operator pos:start="139:29" pos:end="139:29">(</operator><literal type="string" pos:start="139:30" pos:end="139:72">"&gt;&gt;&gt; RTL8139: multicast address mismatch\n"</literal><operator pos:start="139:73" pos:end="139:73">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="143:17" pos:end="143:42">/* update tally counter */</comment>

                <expr_stmt pos:start="145:17" pos:end="145:42"><expr pos:start="145:17" pos:end="145:41"><operator pos:start="145:17" pos:end="145:18">++</operator><name pos:start="145:19" pos:end="145:41"><name pos:start="145:19" pos:end="145:19">s</name><operator pos:start="145:20" pos:end="145:21">-&gt;</operator><name pos:start="145:22" pos:end="145:35">tally_counters</name><operator pos:start="145:36" pos:end="145:36">.</operator><name pos:start="145:37" pos:end="145:41">RxERR</name></name></expr>;</expr_stmt>



                <return pos:start="149:17" pos:end="149:28">return <expr pos:start="149:24" pos:end="149:27"><name pos:start="149:24" pos:end="149:27">size</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="155:13" pos:end="155:41"><expr pos:start="155:13" pos:end="155:40"><name pos:start="155:13" pos:end="155:25">packet_header</name> <operator pos:start="155:27" pos:end="155:28">|=</operator> <name pos:start="155:30" pos:end="155:40">RxMulticast</name></expr>;</expr_stmt>



            <expr_stmt pos:start="159:13" pos:end="159:70"><expr pos:start="159:13" pos:end="159:69"><call pos:start="159:13" pos:end="159:69"><name pos:start="159:13" pos:end="159:23">DEBUG_PRINT</name><argument_list pos:start="159:24" pos:end="159:69">(<argument pos:start="159:25" pos:end="159:68"><expr pos:start="159:25" pos:end="159:68"><operator pos:start="159:25" pos:end="159:25">(</operator><literal type="string" pos:start="159:26" pos:end="159:67">"&gt;&gt;&gt; RTL8139: multicast packet received\n"</literal><operator pos:start="159:68" pos:end="159:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="163:13" pos:end="163:38">/* update tally counter */</comment>

            <expr_stmt pos:start="165:13" pos:end="165:40"><expr pos:start="165:13" pos:end="165:39"><operator pos:start="165:13" pos:end="165:14">++</operator><name pos:start="165:15" pos:end="165:39"><name pos:start="165:15" pos:end="165:15">s</name><operator pos:start="165:16" pos:end="165:17">-&gt;</operator><name pos:start="165:18" pos:end="165:31">tally_counters</name><operator pos:start="165:32" pos:end="165:32">.</operator><name pos:start="165:33" pos:end="165:39">RxOkMul</name></name></expr>;</expr_stmt>



        </block_content>}</block></if> <if type="elseif" pos:start="169:11" pos:end="217:9">else if <condition pos:start="169:19" pos:end="179:40">(<expr pos:start="169:20" pos:end="179:39"><name pos:start="169:20" pos:end="169:29"><name pos:start="169:20" pos:end="169:20">s</name><operator pos:start="169:21" pos:end="169:22">-&gt;</operator><name pos:start="169:23" pos:end="169:26">phys</name><index pos:start="169:27" pos:end="169:29">[<expr pos:start="169:28" pos:end="169:28"><literal type="number" pos:start="169:28" pos:end="169:28">0</literal></expr>]</index></name> <operator pos:start="169:31" pos:end="169:32">==</operator> <name pos:start="169:34" pos:end="169:39"><name pos:start="169:34" pos:end="169:36">buf</name><index pos:start="169:37" pos:end="169:39">[<expr pos:start="169:38" pos:end="169:38"><literal type="number" pos:start="169:38" pos:end="169:38">0</literal></expr>]</index></name> <operator pos:start="169:41" pos:end="169:42">&amp;&amp;</operator>

                   <name pos:start="171:20" pos:end="171:29"><name pos:start="171:20" pos:end="171:20">s</name><operator pos:start="171:21" pos:end="171:22">-&gt;</operator><name pos:start="171:23" pos:end="171:26">phys</name><index pos:start="171:27" pos:end="171:29">[<expr pos:start="171:28" pos:end="171:28"><literal type="number" pos:start="171:28" pos:end="171:28">1</literal></expr>]</index></name> <operator pos:start="171:31" pos:end="171:32">==</operator> <name pos:start="171:34" pos:end="171:39"><name pos:start="171:34" pos:end="171:36">buf</name><index pos:start="171:37" pos:end="171:39">[<expr pos:start="171:38" pos:end="171:38"><literal type="number" pos:start="171:38" pos:end="171:38">1</literal></expr>]</index></name> <operator pos:start="171:41" pos:end="171:42">&amp;&amp;</operator>

                   <name pos:start="173:20" pos:end="173:29"><name pos:start="173:20" pos:end="173:20">s</name><operator pos:start="173:21" pos:end="173:22">-&gt;</operator><name pos:start="173:23" pos:end="173:26">phys</name><index pos:start="173:27" pos:end="173:29">[<expr pos:start="173:28" pos:end="173:28"><literal type="number" pos:start="173:28" pos:end="173:28">2</literal></expr>]</index></name> <operator pos:start="173:31" pos:end="173:32">==</operator> <name pos:start="173:34" pos:end="173:39"><name pos:start="173:34" pos:end="173:36">buf</name><index pos:start="173:37" pos:end="173:39">[<expr pos:start="173:38" pos:end="173:38"><literal type="number" pos:start="173:38" pos:end="173:38">2</literal></expr>]</index></name> <operator pos:start="173:41" pos:end="173:42">&amp;&amp;</operator>

                   <name pos:start="175:20" pos:end="175:29"><name pos:start="175:20" pos:end="175:20">s</name><operator pos:start="175:21" pos:end="175:22">-&gt;</operator><name pos:start="175:23" pos:end="175:26">phys</name><index pos:start="175:27" pos:end="175:29">[<expr pos:start="175:28" pos:end="175:28"><literal type="number" pos:start="175:28" pos:end="175:28">3</literal></expr>]</index></name> <operator pos:start="175:31" pos:end="175:32">==</operator> <name pos:start="175:34" pos:end="175:39"><name pos:start="175:34" pos:end="175:36">buf</name><index pos:start="175:37" pos:end="175:39">[<expr pos:start="175:38" pos:end="175:38"><literal type="number" pos:start="175:38" pos:end="175:38">3</literal></expr>]</index></name> <operator pos:start="175:41" pos:end="175:42">&amp;&amp;</operator>

                   <name pos:start="177:20" pos:end="177:29"><name pos:start="177:20" pos:end="177:20">s</name><operator pos:start="177:21" pos:end="177:22">-&gt;</operator><name pos:start="177:23" pos:end="177:26">phys</name><index pos:start="177:27" pos:end="177:29">[<expr pos:start="177:28" pos:end="177:28"><literal type="number" pos:start="177:28" pos:end="177:28">4</literal></expr>]</index></name> <operator pos:start="177:31" pos:end="177:32">==</operator> <name pos:start="177:34" pos:end="177:39"><name pos:start="177:34" pos:end="177:36">buf</name><index pos:start="177:37" pos:end="177:39">[<expr pos:start="177:38" pos:end="177:38"><literal type="number" pos:start="177:38" pos:end="177:38">4</literal></expr>]</index></name> <operator pos:start="177:41" pos:end="177:42">&amp;&amp;</operator>

                   <name pos:start="179:20" pos:end="179:29"><name pos:start="179:20" pos:end="179:20">s</name><operator pos:start="179:21" pos:end="179:22">-&gt;</operator><name pos:start="179:23" pos:end="179:26">phys</name><index pos:start="179:27" pos:end="179:29">[<expr pos:start="179:28" pos:end="179:28"><literal type="number" pos:start="179:28" pos:end="179:28">5</literal></expr>]</index></name> <operator pos:start="179:31" pos:end="179:32">==</operator> <name pos:start="179:34" pos:end="179:39"><name pos:start="179:34" pos:end="179:36">buf</name><index pos:start="179:37" pos:end="179:39">[<expr pos:start="179:38" pos:end="179:38"><literal type="number" pos:start="179:38" pos:end="179:38">5</literal></expr>]</index></name></expr>)</condition> <block pos:start="179:42" pos:end="217:9">{<block_content pos:start="183:13" pos:end="213:40">

            <comment type="block" pos:start="181:13" pos:end="181:23">/* match */</comment>

            <if_stmt pos:start="183:13" pos:end="199:13"><if pos:start="183:13" pos:end="199:13">if <condition pos:start="183:16" pos:end="183:46">(<expr pos:start="183:17" pos:end="183:45"><operator pos:start="183:17" pos:end="183:17">!</operator><operator pos:start="183:18" pos:end="183:18">(</operator><name pos:start="183:19" pos:end="183:29"><name pos:start="183:19" pos:end="183:19">s</name><operator pos:start="183:20" pos:end="183:21">-&gt;</operator><name pos:start="183:22" pos:end="183:29">RxConfig</name></name> <operator pos:start="183:31" pos:end="183:31">&amp;</operator> <name pos:start="183:33" pos:end="183:44">AcceptMyPhys</name><operator pos:start="183:45" pos:end="183:45">)</operator></expr>)</condition>

            <block pos:start="185:13" pos:end="199:13">{<block_content pos:start="187:17" pos:end="197:28">

                <expr_stmt pos:start="187:17" pos:end="187:91"><expr pos:start="187:17" pos:end="187:90"><call pos:start="187:17" pos:end="187:90"><name pos:start="187:17" pos:end="187:27">DEBUG_PRINT</name><argument_list pos:start="187:28" pos:end="187:90">(<argument pos:start="187:29" pos:end="187:89"><expr pos:start="187:29" pos:end="187:89"><operator pos:start="187:29" pos:end="187:29">(</operator><literal type="string" pos:start="187:30" pos:end="187:88">"&gt;&gt;&gt; RTL8139: rejecting physical address matching packet\n"</literal><operator pos:start="187:89" pos:end="187:89">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="191:17" pos:end="191:42">/* update tally counter */</comment>

                <expr_stmt pos:start="193:17" pos:end="193:42"><expr pos:start="193:17" pos:end="193:41"><operator pos:start="193:17" pos:end="193:18">++</operator><name pos:start="193:19" pos:end="193:41"><name pos:start="193:19" pos:end="193:19">s</name><operator pos:start="193:20" pos:end="193:21">-&gt;</operator><name pos:start="193:22" pos:end="193:35">tally_counters</name><operator pos:start="193:36" pos:end="193:36">.</operator><name pos:start="193:37" pos:end="193:41">RxERR</name></name></expr>;</expr_stmt>



                <return pos:start="197:17" pos:end="197:28">return <expr pos:start="197:24" pos:end="197:27"><name pos:start="197:24" pos:end="197:27">size</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="203:13" pos:end="203:40"><expr pos:start="203:13" pos:end="203:39"><name pos:start="203:13" pos:end="203:25">packet_header</name> <operator pos:start="203:27" pos:end="203:28">|=</operator> <name pos:start="203:30" pos:end="203:39">RxPhysical</name></expr>;</expr_stmt>



            <expr_stmt pos:start="207:13" pos:end="207:86"><expr pos:start="207:13" pos:end="207:85"><call pos:start="207:13" pos:end="207:85"><name pos:start="207:13" pos:end="207:23">DEBUG_PRINT</name><argument_list pos:start="207:24" pos:end="207:85">(<argument pos:start="207:25" pos:end="207:84"><expr pos:start="207:25" pos:end="207:84"><operator pos:start="207:25" pos:end="207:25">(</operator><literal type="string" pos:start="207:26" pos:end="207:83">"&gt;&gt;&gt; RTL8139: physical address matching packet received\n"</literal><operator pos:start="207:84" pos:end="207:84">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="211:13" pos:end="211:38">/* update tally counter */</comment>

            <expr_stmt pos:start="213:13" pos:end="213:40"><expr pos:start="213:13" pos:end="213:39"><operator pos:start="213:13" pos:end="213:14">++</operator><name pos:start="213:15" pos:end="213:39"><name pos:start="213:15" pos:end="213:15">s</name><operator pos:start="213:16" pos:end="213:17">-&gt;</operator><name pos:start="213:18" pos:end="213:31">tally_counters</name><operator pos:start="213:32" pos:end="213:32">.</operator><name pos:start="213:33" pos:end="213:39">RxOkPhy</name></name></expr>;</expr_stmt>



        </block_content>}</block></if> <else pos:start="217:11" pos:end="233:9">else <block pos:start="217:16" pos:end="233:9">{<block_content pos:start="221:13" pos:end="231:24">



            <expr_stmt pos:start="221:13" pos:end="221:59"><expr pos:start="221:13" pos:end="221:58"><call pos:start="221:13" pos:end="221:58"><name pos:start="221:13" pos:end="221:23">DEBUG_PRINT</name><argument_list pos:start="221:24" pos:end="221:58">(<argument pos:start="221:25" pos:end="221:57"><expr pos:start="221:25" pos:end="221:57"><operator pos:start="221:25" pos:end="221:25">(</operator><literal type="string" pos:start="221:26" pos:end="221:56">"&gt;&gt;&gt; RTL8139: unknown packet\n"</literal><operator pos:start="221:57" pos:end="221:57">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="225:13" pos:end="225:38">/* update tally counter */</comment>

            <expr_stmt pos:start="227:13" pos:end="227:38"><expr pos:start="227:13" pos:end="227:37"><operator pos:start="227:13" pos:end="227:14">++</operator><name pos:start="227:15" pos:end="227:37"><name pos:start="227:15" pos:end="227:15">s</name><operator pos:start="227:16" pos:end="227:17">-&gt;</operator><name pos:start="227:18" pos:end="227:31">tally_counters</name><operator pos:start="227:32" pos:end="227:32">.</operator><name pos:start="227:33" pos:end="227:37">RxERR</name></name></expr>;</expr_stmt>



            <return pos:start="231:13" pos:end="231:24">return <expr pos:start="231:20" pos:end="231:23"><name pos:start="231:20" pos:end="231:23">size</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="239:5" pos:end="239:45">/* if too small buffer, then expand it */</comment>

    <if_stmt pos:start="241:5" pos:end="251:5"><if pos:start="241:5" pos:end="251:5">if <condition pos:start="241:8" pos:end="241:28">(<expr pos:start="241:9" pos:end="241:27"><name pos:start="241:9" pos:end="241:12">size</name> <operator pos:start="241:14" pos:end="241:14">&lt;</operator> <name pos:start="241:16" pos:end="241:27">MIN_BUF_SIZE</name></expr>)</condition> <block pos:start="241:30" pos:end="251:5">{<block_content pos:start="243:9" pos:end="249:28">

        <expr_stmt pos:start="243:9" pos:end="243:32"><expr pos:start="243:9" pos:end="243:31"><call pos:start="243:9" pos:end="243:31"><name pos:start="243:9" pos:end="243:14">memcpy</name><argument_list pos:start="243:15" pos:end="243:31">(<argument pos:start="243:16" pos:end="243:19"><expr pos:start="243:16" pos:end="243:19"><name pos:start="243:16" pos:end="243:19">buf1</name></expr></argument>, <argument pos:start="243:22" pos:end="243:24"><expr pos:start="243:22" pos:end="243:24"><name pos:start="243:22" pos:end="243:24">buf</name></expr></argument>, <argument pos:start="243:27" pos:end="243:30"><expr pos:start="243:27" pos:end="243:30"><name pos:start="243:27" pos:end="243:30">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="245:9" pos:end="245:52"><expr pos:start="245:9" pos:end="245:51"><call pos:start="245:9" pos:end="245:51"><name pos:start="245:9" pos:end="245:14">memset</name><argument_list pos:start="245:15" pos:end="245:51">(<argument pos:start="245:16" pos:end="245:26"><expr pos:start="245:16" pos:end="245:26"><name pos:start="245:16" pos:end="245:19">buf1</name> <operator pos:start="245:21" pos:end="245:21">+</operator> <name pos:start="245:23" pos:end="245:26">size</name></expr></argument>, <argument pos:start="245:29" pos:end="245:29"><expr pos:start="245:29" pos:end="245:29"><literal type="number" pos:start="245:29" pos:end="245:29">0</literal></expr></argument>, <argument pos:start="245:32" pos:end="245:50"><expr pos:start="245:32" pos:end="245:50"><name pos:start="245:32" pos:end="245:43">MIN_BUF_SIZE</name> <operator pos:start="245:45" pos:end="245:45">-</operator> <name pos:start="245:47" pos:end="245:50">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:19"><expr pos:start="247:9" pos:end="247:18"><name pos:start="247:9" pos:end="247:11">buf</name> <operator pos:start="247:13" pos:end="247:13">=</operator> <name pos:start="247:15" pos:end="247:18">buf1</name></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:28"><expr pos:start="249:9" pos:end="249:27"><name pos:start="249:9" pos:end="249:12">size</name> <operator pos:start="249:14" pos:end="249:14">=</operator> <name pos:start="249:16" pos:end="249:27">MIN_BUF_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="255:5" pos:end="675:5"><if pos:start="255:5" pos:end="579:5">if <condition pos:start="255:8" pos:end="255:39">(<expr pos:start="255:9" pos:end="255:38"><call pos:start="255:9" pos:end="255:38"><name pos:start="255:9" pos:end="255:35">rtl8139_cp_receiver_enabled</name><argument_list pos:start="255:36" pos:end="255:38">(<argument pos:start="255:37" pos:end="255:37"><expr pos:start="255:37" pos:end="255:37"><name pos:start="255:37" pos:end="255:37">s</name></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="257:5" pos:end="579:5">{<block_content pos:start="259:9" pos:end="575:69">

        <expr_stmt pos:start="259:9" pos:end="286:0"><expr pos:start="259:9" pos:end="259:66"><call pos:start="259:9" pos:end="259:66"><name pos:start="259:9" pos:end="259:19">DEBUG_PRINT</name><argument_list pos:start="259:20" pos:end="259:66">(<argument pos:start="259:21" pos:end="259:65"><expr pos:start="259:21" pos:end="259:65"><operator pos:start="259:21" pos:end="259:21">(</operator><literal type="string" pos:start="259:22" pos:end="259:64">"RTL8139: in C+ Rx mode ================\n"</literal><operator pos:start="259:65" pos:end="259:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="263:9" pos:end="263:36">/* begin C+ receiver mode */</comment>



<comment type="block" pos:start="267:1" pos:end="267:23">/* w0 ownership flag */</comment>

<cpp:define pos:start="269:1" pos:end="269:25">#<cpp:directive pos:start="269:2" pos:end="269:7">define</cpp:directive> <cpp:macro pos:start="269:9" pos:end="269:17"><name pos:start="269:9" pos:end="269:17">CP_RX_OWN</name></cpp:macro> <cpp:value pos:start="269:19" pos:end="269:25">(1&lt;&lt;31)</cpp:value></cpp:define>

<comment type="block" pos:start="271:1" pos:end="271:25">/* w0 end of ring flag */</comment>

<cpp:define pos:start="273:1" pos:end="273:25">#<cpp:directive pos:start="273:2" pos:end="273:7">define</cpp:directive> <cpp:macro pos:start="273:9" pos:end="273:17"><name pos:start="273:9" pos:end="273:17">CP_RX_EOR</name></cpp:macro> <cpp:value pos:start="273:19" pos:end="273:25">(1&lt;&lt;30)</cpp:value></cpp:define>

<comment type="block" pos:start="275:1" pos:end="275:34">/* w0 bits 0...12 : buffer size */</comment>

<cpp:define pos:start="277:1" pos:end="277:44">#<cpp:directive pos:start="277:2" pos:end="277:7">define</cpp:directive> <cpp:macro pos:start="277:9" pos:end="277:30"><name pos:start="277:9" pos:end="277:30">CP_RX_BUFFER_SIZE_MASK</name></cpp:macro> <cpp:value pos:start="277:32" pos:end="277:44">((1&lt;&lt;13) - 1)</cpp:value></cpp:define>

<comment type="block" pos:start="279:1" pos:end="279:27">/* w1 tag available flag */</comment>

<cpp:define pos:start="281:1" pos:end="281:26">#<cpp:directive pos:start="281:2" pos:end="281:7">define</cpp:directive> <cpp:macro pos:start="281:9" pos:end="281:18"><name pos:start="281:9" pos:end="281:18">CP_RX_TAVA</name></cpp:macro> <cpp:value pos:start="281:20" pos:end="281:26">(1&lt;&lt;16)</cpp:value></cpp:define>

<comment type="block" pos:start="283:1" pos:end="283:31">/* w1 bits 0...15 : VLAN tag */</comment>

<cpp:define pos:start="285:1" pos:end="285:41">#<cpp:directive pos:start="285:2" pos:end="285:7">define</cpp:directive> <cpp:macro pos:start="285:9" pos:end="285:27"><name pos:start="285:9" pos:end="285:27">CP_RX_VLAN_TAG_MASK</name></cpp:macro> <cpp:value pos:start="285:29" pos:end="285:41">((1&lt;&lt;16) - 1)</cpp:value></cpp:define>

<comment type="block" pos:start="287:1" pos:end="287:36">/* w2 low  32bit of Rx buffer ptr */</comment>

<comment type="block" pos:start="289:1" pos:end="289:36">/* w3 high 32bit of Rx buffer ptr */</comment>



        <decl_stmt pos:start="293:9" pos:end="293:44"><decl pos:start="293:9" pos:end="293:43"><type pos:start="293:9" pos:end="293:11"><name pos:start="293:9" pos:end="293:11">int</name></type> <name pos:start="293:13" pos:end="293:22">descriptor</name> <init pos:start="293:24" pos:end="293:43">= <expr pos:start="293:26" pos:end="293:43"><name pos:start="293:26" pos:end="293:43"><name pos:start="293:26" pos:end="293:26">s</name><operator pos:start="293:27" pos:end="293:28">-&gt;</operator><name pos:start="293:29" pos:end="293:43">currCPlusRxDesc</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="295:9" pos:end="295:46"><decl pos:start="295:9" pos:end="295:45"><type pos:start="295:9" pos:end="295:26"><name pos:start="295:9" pos:end="295:26">target_phys_addr_t</name></type> <name pos:start="295:28" pos:end="295:45">cplus_rx_ring_desc</name></decl>;</decl_stmt>



        <expr_stmt pos:start="299:9" pos:end="299:78"><expr pos:start="299:9" pos:end="299:77"><name pos:start="299:9" pos:end="299:26">cplus_rx_ring_desc</name> <operator pos:start="299:28" pos:end="299:28">=</operator> <call pos:start="299:30" pos:end="299:77"><name pos:start="299:30" pos:end="299:43">rtl8139_addr64</name><argument_list pos:start="299:44" pos:end="299:77">(<argument pos:start="299:45" pos:end="299:59"><expr pos:start="299:45" pos:end="299:59"><name pos:start="299:45" pos:end="299:59"><name pos:start="299:45" pos:end="299:45">s</name><operator pos:start="299:46" pos:end="299:47">-&gt;</operator><name pos:start="299:48" pos:end="299:59">RxRingAddrLO</name></name></expr></argument>, <argument pos:start="299:62" pos:end="299:76"><expr pos:start="299:62" pos:end="299:76"><name pos:start="299:62" pos:end="299:76"><name pos:start="299:62" pos:end="299:62">s</name><operator pos:start="299:63" pos:end="299:64">-&gt;</operator><name pos:start="299:65" pos:end="299:76">RxRingAddrHI</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="301:9" pos:end="301:46"><expr pos:start="301:9" pos:end="301:45"><name pos:start="301:9" pos:end="301:26">cplus_rx_ring_desc</name> <operator pos:start="301:28" pos:end="301:29">+=</operator> <literal type="number" pos:start="301:31" pos:end="301:32">16</literal> <operator pos:start="301:34" pos:end="301:34">*</operator> <name pos:start="301:36" pos:end="301:45">descriptor</name></expr>;</expr_stmt>



        <expr_stmt pos:start="305:9" pos:end="307:92"><expr pos:start="305:9" pos:end="307:91"><call pos:start="305:9" pos:end="307:91"><name pos:start="305:9" pos:end="305:19">DEBUG_PRINT</name><argument_list pos:start="305:20" pos:end="307:91">(<argument pos:start="305:21" pos:end="307:90"><expr pos:start="305:21" pos:end="307:90"><operator pos:start="305:21" pos:end="305:21">(</operator><literal type="string" pos:start="305:22" pos:end="305:105">"RTL8139: +++ C+ mode reading RX descriptor %d from host memory at %08x %08x = %016"</literal> <name pos:start="305:107" pos:end="305:112">PRIx64</name> <literal type="string" pos:start="305:114" pos:end="305:117">"\n"</literal><operator pos:start="305:118" pos:end="305:118">,</operator>

               <name pos:start="307:16" pos:end="307:25">descriptor</name><operator pos:start="307:26" pos:end="307:26">,</operator> <name pos:start="307:28" pos:end="307:42"><name pos:start="307:28" pos:end="307:28">s</name><operator pos:start="307:29" pos:end="307:30">-&gt;</operator><name pos:start="307:31" pos:end="307:42">RxRingAddrHI</name></name><operator pos:start="307:43" pos:end="307:43">,</operator> <name pos:start="307:45" pos:end="307:59"><name pos:start="307:45" pos:end="307:45">s</name><operator pos:start="307:46" pos:end="307:47">-&gt;</operator><name pos:start="307:48" pos:end="307:59">RxRingAddrLO</name></name><operator pos:start="307:60" pos:end="307:60">,</operator> <operator pos:start="307:62" pos:end="307:62">(</operator><name pos:start="307:63" pos:end="307:70">uint64_t</name><operator pos:start="307:71" pos:end="307:71">)</operator><name pos:start="307:72" pos:end="307:89">cplus_rx_ring_desc</name><operator pos:start="307:90" pos:end="307:90">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <decl_stmt pos:start="311:9" pos:end="311:50"><decl pos:start="311:9" pos:end="311:20"><type pos:start="311:9" pos:end="311:16"><name pos:start="311:9" pos:end="311:16">uint32_t</name></type> <name pos:start="311:18" pos:end="311:20">val</name></decl>, <decl pos:start="311:23" pos:end="311:27"><type ref="prev" pos:start="311:9" pos:end="311:16"/><name pos:start="311:23" pos:end="311:27">rxdw0</name></decl>,<decl pos:start="311:29" pos:end="311:33"><type ref="prev" pos:start="311:9" pos:end="311:16"/><name pos:start="311:29" pos:end="311:33">rxdw1</name></decl>,<decl pos:start="311:35" pos:end="311:41"><type ref="prev" pos:start="311:9" pos:end="311:16"/><name pos:start="311:35" pos:end="311:41">rxbufLO</name></decl>,<decl pos:start="311:43" pos:end="311:49"><type ref="prev" pos:start="311:9" pos:end="311:16"/><name pos:start="311:43" pos:end="311:49">rxbufHI</name></decl>;</decl_stmt>



        <expr_stmt pos:start="315:9" pos:end="315:76"><expr pos:start="315:9" pos:end="315:75"><call pos:start="315:9" pos:end="315:75"><name pos:start="315:9" pos:end="315:32">cpu_physical_memory_read</name><argument_list pos:start="315:33" pos:end="315:75">(<argument pos:start="315:34" pos:end="315:51"><expr pos:start="315:34" pos:end="315:51"><name pos:start="315:34" pos:end="315:51">cplus_rx_ring_desc</name></expr></argument>,    <argument pos:start="315:57" pos:end="315:71"><expr pos:start="315:57" pos:end="315:71"><operator pos:start="315:57" pos:end="315:57">(</operator><name pos:start="315:58" pos:end="315:64">uint8_t</name> <operator pos:start="315:66" pos:end="315:66">*</operator><operator pos:start="315:67" pos:end="315:67">)</operator><operator pos:start="315:68" pos:end="315:68">&amp;</operator><name pos:start="315:69" pos:end="315:71">val</name></expr></argument>, <argument pos:start="315:74" pos:end="315:74"><expr pos:start="315:74" pos:end="315:74"><literal type="number" pos:start="315:74" pos:end="315:74">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="317:9" pos:end="317:33"><expr pos:start="317:9" pos:end="317:32"><name pos:start="317:9" pos:end="317:13">rxdw0</name> <operator pos:start="317:15" pos:end="317:15">=</operator> <call pos:start="317:17" pos:end="317:32"><name pos:start="317:17" pos:end="317:27">le32_to_cpu</name><argument_list pos:start="317:28" pos:end="317:32">(<argument pos:start="317:29" pos:end="317:31"><expr pos:start="317:29" pos:end="317:31"><name pos:start="317:29" pos:end="317:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="319:9" pos:end="319:76"><expr pos:start="319:9" pos:end="319:75"><call pos:start="319:9" pos:end="319:75"><name pos:start="319:9" pos:end="319:32">cpu_physical_memory_read</name><argument_list pos:start="319:33" pos:end="319:75">(<argument pos:start="319:34" pos:end="319:53"><expr pos:start="319:34" pos:end="319:53"><name pos:start="319:34" pos:end="319:51">cplus_rx_ring_desc</name><operator pos:start="319:52" pos:end="319:52">+</operator><literal type="number" pos:start="319:53" pos:end="319:53">4</literal></expr></argument>,  <argument pos:start="319:57" pos:end="319:71"><expr pos:start="319:57" pos:end="319:71"><operator pos:start="319:57" pos:end="319:57">(</operator><name pos:start="319:58" pos:end="319:64">uint8_t</name> <operator pos:start="319:66" pos:end="319:66">*</operator><operator pos:start="319:67" pos:end="319:67">)</operator><operator pos:start="319:68" pos:end="319:68">&amp;</operator><name pos:start="319:69" pos:end="319:71">val</name></expr></argument>, <argument pos:start="319:74" pos:end="319:74"><expr pos:start="319:74" pos:end="319:74"><literal type="number" pos:start="319:74" pos:end="319:74">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="321:9" pos:end="321:33"><expr pos:start="321:9" pos:end="321:32"><name pos:start="321:9" pos:end="321:13">rxdw1</name> <operator pos:start="321:15" pos:end="321:15">=</operator> <call pos:start="321:17" pos:end="321:32"><name pos:start="321:17" pos:end="321:27">le32_to_cpu</name><argument_list pos:start="321:28" pos:end="321:32">(<argument pos:start="321:29" pos:end="321:31"><expr pos:start="321:29" pos:end="321:31"><name pos:start="321:29" pos:end="321:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="323:9" pos:end="323:76"><expr pos:start="323:9" pos:end="323:75"><call pos:start="323:9" pos:end="323:75"><name pos:start="323:9" pos:end="323:32">cpu_physical_memory_read</name><argument_list pos:start="323:33" pos:end="323:75">(<argument pos:start="323:34" pos:end="323:53"><expr pos:start="323:34" pos:end="323:53"><name pos:start="323:34" pos:end="323:51">cplus_rx_ring_desc</name><operator pos:start="323:52" pos:end="323:52">+</operator><literal type="number" pos:start="323:53" pos:end="323:53">8</literal></expr></argument>,  <argument pos:start="323:57" pos:end="323:71"><expr pos:start="323:57" pos:end="323:71"><operator pos:start="323:57" pos:end="323:57">(</operator><name pos:start="323:58" pos:end="323:64">uint8_t</name> <operator pos:start="323:66" pos:end="323:66">*</operator><operator pos:start="323:67" pos:end="323:67">)</operator><operator pos:start="323:68" pos:end="323:68">&amp;</operator><name pos:start="323:69" pos:end="323:71">val</name></expr></argument>, <argument pos:start="323:74" pos:end="323:74"><expr pos:start="323:74" pos:end="323:74"><literal type="number" pos:start="323:74" pos:end="323:74">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="325:9" pos:end="325:35"><expr pos:start="325:9" pos:end="325:34"><name pos:start="325:9" pos:end="325:15">rxbufLO</name> <operator pos:start="325:17" pos:end="325:17">=</operator> <call pos:start="325:19" pos:end="325:34"><name pos:start="325:19" pos:end="325:29">le32_to_cpu</name><argument_list pos:start="325:30" pos:end="325:34">(<argument pos:start="325:31" pos:end="325:33"><expr pos:start="325:31" pos:end="325:33"><name pos:start="325:31" pos:end="325:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="327:9" pos:end="327:76"><expr pos:start="327:9" pos:end="327:75"><call pos:start="327:9" pos:end="327:75"><name pos:start="327:9" pos:end="327:32">cpu_physical_memory_read</name><argument_list pos:start="327:33" pos:end="327:75">(<argument pos:start="327:34" pos:end="327:54"><expr pos:start="327:34" pos:end="327:54"><name pos:start="327:34" pos:end="327:51">cplus_rx_ring_desc</name><operator pos:start="327:52" pos:end="327:52">+</operator><literal type="number" pos:start="327:53" pos:end="327:54">12</literal></expr></argument>, <argument pos:start="327:57" pos:end="327:71"><expr pos:start="327:57" pos:end="327:71"><operator pos:start="327:57" pos:end="327:57">(</operator><name pos:start="327:58" pos:end="327:64">uint8_t</name> <operator pos:start="327:66" pos:end="327:66">*</operator><operator pos:start="327:67" pos:end="327:67">)</operator><operator pos:start="327:68" pos:end="327:68">&amp;</operator><name pos:start="327:69" pos:end="327:71">val</name></expr></argument>, <argument pos:start="327:74" pos:end="327:74"><expr pos:start="327:74" pos:end="327:74"><literal type="number" pos:start="327:74" pos:end="327:74">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="329:9" pos:end="329:35"><expr pos:start="329:9" pos:end="329:34"><name pos:start="329:9" pos:end="329:15">rxbufHI</name> <operator pos:start="329:17" pos:end="329:17">=</operator> <call pos:start="329:19" pos:end="329:34"><name pos:start="329:19" pos:end="329:29">le32_to_cpu</name><argument_list pos:start="329:30" pos:end="329:34">(<argument pos:start="329:31" pos:end="329:33"><expr pos:start="329:31" pos:end="329:33"><name pos:start="329:31" pos:end="329:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="333:9" pos:end="337:48"><expr pos:start="333:9" pos:end="337:47"><call pos:start="333:9" pos:end="337:47"><name pos:start="333:9" pos:end="333:19">DEBUG_PRINT</name><argument_list pos:start="333:20" pos:end="337:47">(<argument pos:start="333:21" pos:end="337:46"><expr pos:start="333:21" pos:end="337:46"><operator pos:start="333:21" pos:end="333:21">(</operator><literal type="string" pos:start="333:22" pos:end="333:82">"RTL8139: +++ C+ mode RX descriptor %d %08x %08x %08x %08x\n"</literal><operator pos:start="333:83" pos:end="333:83">,</operator>

               <name pos:start="335:16" pos:end="335:25">descriptor</name><operator pos:start="335:26" pos:end="335:26">,</operator>

               <name pos:start="337:16" pos:end="337:20">rxdw0</name><operator pos:start="337:21" pos:end="337:21">,</operator> <name pos:start="337:23" pos:end="337:27">rxdw1</name><operator pos:start="337:28" pos:end="337:28">,</operator> <name pos:start="337:30" pos:end="337:36">rxbufLO</name><operator pos:start="337:37" pos:end="337:37">,</operator> <name pos:start="337:39" pos:end="337:45">rxbufHI</name><operator pos:start="337:46" pos:end="337:46">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="341:9" pos:end="367:9"><if pos:start="341:9" pos:end="367:9">if <condition pos:start="341:12" pos:end="341:33">(<expr pos:start="341:13" pos:end="341:32"><operator pos:start="341:13" pos:end="341:13">!</operator><operator pos:start="341:14" pos:end="341:14">(</operator><name pos:start="341:15" pos:end="341:19">rxdw0</name> <operator pos:start="341:21" pos:end="341:21">&amp;</operator> <name pos:start="341:23" pos:end="341:31">CP_RX_OWN</name><operator pos:start="341:32" pos:end="341:32">)</operator></expr>)</condition>

        <block pos:start="343:9" pos:end="367:9">{<block_content pos:start="345:13" pos:end="365:25">

            <expr_stmt pos:start="345:13" pos:end="345:96"><expr pos:start="345:13" pos:end="345:95"><call pos:start="345:13" pos:end="345:95"><name pos:start="345:13" pos:end="345:23">DEBUG_PRINT</name><argument_list pos:start="345:24" pos:end="345:95">(<argument pos:start="345:25" pos:end="345:94"><expr pos:start="345:25" pos:end="345:94"><operator pos:start="345:25" pos:end="345:25">(</operator><literal type="string" pos:start="345:26" pos:end="345:81">"RTL8139: C+ Rx mode : descriptor %d is owned by host\n"</literal><operator pos:start="345:82" pos:end="345:82">,</operator> <name pos:start="345:84" pos:end="345:93">descriptor</name><operator pos:start="345:94" pos:end="345:94">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="349:13" pos:end="349:40"><expr pos:start="349:13" pos:end="349:39"><name pos:start="349:13" pos:end="349:25"><name pos:start="349:13" pos:end="349:13">s</name><operator pos:start="349:14" pos:end="349:15">-&gt;</operator><name pos:start="349:16" pos:end="349:25">IntrStatus</name></name> <operator pos:start="349:27" pos:end="349:28">|=</operator> <name pos:start="349:30" pos:end="349:39">RxOverflow</name></expr>;</expr_stmt>

            <expr_stmt pos:start="351:13" pos:end="351:26"><expr pos:start="351:13" pos:end="351:25"><operator pos:start="351:13" pos:end="351:14">++</operator><name pos:start="351:15" pos:end="351:25"><name pos:start="351:15" pos:end="351:15">s</name><operator pos:start="351:16" pos:end="351:17">-&gt;</operator><name pos:start="351:18" pos:end="351:25">RxMissed</name></name></expr>;</expr_stmt>



            <comment type="block" pos:start="355:13" pos:end="355:38">/* update tally counter */</comment>

            <expr_stmt pos:start="357:13" pos:end="357:38"><expr pos:start="357:13" pos:end="357:37"><operator pos:start="357:13" pos:end="357:14">++</operator><name pos:start="357:15" pos:end="357:37"><name pos:start="357:15" pos:end="357:15">s</name><operator pos:start="357:16" pos:end="357:17">-&gt;</operator><name pos:start="357:18" pos:end="357:31">tally_counters</name><operator pos:start="357:32" pos:end="357:32">.</operator><name pos:start="357:33" pos:end="357:37">RxERR</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="359:13" pos:end="359:40"><expr pos:start="359:13" pos:end="359:39"><operator pos:start="359:13" pos:end="359:14">++</operator><name pos:start="359:15" pos:end="359:39"><name pos:start="359:15" pos:end="359:15">s</name><operator pos:start="359:16" pos:end="359:17">-&gt;</operator><name pos:start="359:18" pos:end="359:31">tally_counters</name><operator pos:start="359:32" pos:end="359:32">.</operator><name pos:start="359:33" pos:end="359:39">MissPkt</name></name></expr>;</expr_stmt>



            <expr_stmt pos:start="363:13" pos:end="363:34"><expr pos:start="363:13" pos:end="363:33"><call pos:start="363:13" pos:end="363:33"><name pos:start="363:13" pos:end="363:30">rtl8139_update_irq</name><argument_list pos:start="363:31" pos:end="363:33">(<argument pos:start="363:32" pos:end="363:32"><expr pos:start="363:32" pos:end="363:32"><name pos:start="363:32" pos:end="363:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="365:13" pos:end="365:25">return <expr pos:start="365:20" pos:end="365:24"><name pos:start="365:20" pos:end="365:24">size_</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <decl_stmt pos:start="371:9" pos:end="371:59"><decl pos:start="371:9" pos:end="371:58"><type pos:start="371:9" pos:end="371:16"><name pos:start="371:9" pos:end="371:16">uint32_t</name></type> <name pos:start="371:18" pos:end="371:25">rx_space</name> <init pos:start="371:27" pos:end="371:58">= <expr pos:start="371:29" pos:end="371:58"><name pos:start="371:29" pos:end="371:33">rxdw0</name> <operator pos:start="371:35" pos:end="371:35">&amp;</operator> <name pos:start="371:37" pos:end="371:58">CP_RX_BUFFER_SIZE_MASK</name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="375:9" pos:end="375:84">/* TODO: scatter the packet over available receive ring descriptors space */</comment>



        <if_stmt pos:start="379:9" pos:end="407:9"><if pos:start="379:9" pos:end="407:9">if <condition pos:start="379:12" pos:end="379:30">(<expr pos:start="379:13" pos:end="379:29"><name pos:start="379:13" pos:end="379:16">size</name><operator pos:start="379:17" pos:end="379:17">+</operator><literal type="number" pos:start="379:18" pos:end="379:18">4</literal> <operator pos:start="379:20" pos:end="379:20">&gt;</operator> <name pos:start="379:22" pos:end="379:29">rx_space</name></expr>)</condition>

        <block pos:start="381:9" pos:end="407:9">{<block_content pos:start="383:13" pos:end="405:25">

            <expr_stmt pos:start="383:13" pos:end="385:48"><expr pos:start="383:13" pos:end="385:47"><call pos:start="383:13" pos:end="385:47"><name pos:start="383:13" pos:end="383:23">DEBUG_PRINT</name><argument_list pos:start="383:24" pos:end="385:47">(<argument pos:start="383:25" pos:end="385:46"><expr pos:start="383:25" pos:end="385:46"><operator pos:start="383:25" pos:end="383:25">(</operator><literal type="string" pos:start="383:26" pos:end="383:88">"RTL8139: C+ Rx mode : descriptor %d size %d received %d + 4\n"</literal><operator pos:start="383:89" pos:end="383:89">,</operator>

                   <name pos:start="385:20" pos:end="385:29">descriptor</name><operator pos:start="385:30" pos:end="385:30">,</operator> <name pos:start="385:32" pos:end="385:39">rx_space</name><operator pos:start="385:40" pos:end="385:40">,</operator> <name pos:start="385:42" pos:end="385:45">size</name><operator pos:start="385:46" pos:end="385:46">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="389:13" pos:end="389:40"><expr pos:start="389:13" pos:end="389:39"><name pos:start="389:13" pos:end="389:25"><name pos:start="389:13" pos:end="389:13">s</name><operator pos:start="389:14" pos:end="389:15">-&gt;</operator><name pos:start="389:16" pos:end="389:25">IntrStatus</name></name> <operator pos:start="389:27" pos:end="389:28">|=</operator> <name pos:start="389:30" pos:end="389:39">RxOverflow</name></expr>;</expr_stmt>

            <expr_stmt pos:start="391:13" pos:end="391:26"><expr pos:start="391:13" pos:end="391:25"><operator pos:start="391:13" pos:end="391:14">++</operator><name pos:start="391:15" pos:end="391:25"><name pos:start="391:15" pos:end="391:15">s</name><operator pos:start="391:16" pos:end="391:17">-&gt;</operator><name pos:start="391:18" pos:end="391:25">RxMissed</name></name></expr>;</expr_stmt>



            <comment type="block" pos:start="395:13" pos:end="395:38">/* update tally counter */</comment>

            <expr_stmt pos:start="397:13" pos:end="397:38"><expr pos:start="397:13" pos:end="397:37"><operator pos:start="397:13" pos:end="397:14">++</operator><name pos:start="397:15" pos:end="397:37"><name pos:start="397:15" pos:end="397:15">s</name><operator pos:start="397:16" pos:end="397:17">-&gt;</operator><name pos:start="397:18" pos:end="397:31">tally_counters</name><operator pos:start="397:32" pos:end="397:32">.</operator><name pos:start="397:33" pos:end="397:37">RxERR</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="399:13" pos:end="399:40"><expr pos:start="399:13" pos:end="399:39"><operator pos:start="399:13" pos:end="399:14">++</operator><name pos:start="399:15" pos:end="399:39"><name pos:start="399:15" pos:end="399:15">s</name><operator pos:start="399:16" pos:end="399:17">-&gt;</operator><name pos:start="399:18" pos:end="399:31">tally_counters</name><operator pos:start="399:32" pos:end="399:32">.</operator><name pos:start="399:33" pos:end="399:39">MissPkt</name></name></expr>;</expr_stmt>



            <expr_stmt pos:start="403:13" pos:end="403:34"><expr pos:start="403:13" pos:end="403:33"><call pos:start="403:13" pos:end="403:33"><name pos:start="403:13" pos:end="403:30">rtl8139_update_irq</name><argument_list pos:start="403:31" pos:end="403:33">(<argument pos:start="403:32" pos:end="403:32"><expr pos:start="403:32" pos:end="403:32"><name pos:start="403:32" pos:end="403:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="405:13" pos:end="405:25">return <expr pos:start="405:20" pos:end="405:24"><name pos:start="405:20" pos:end="405:24">size_</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <decl_stmt pos:start="411:9" pos:end="411:70"><decl pos:start="411:9" pos:end="411:69"><type pos:start="411:9" pos:end="411:26"><name pos:start="411:9" pos:end="411:26">target_phys_addr_t</name></type> <name pos:start="411:28" pos:end="411:34">rx_addr</name> <init pos:start="411:36" pos:end="411:69">= <expr pos:start="411:38" pos:end="411:69"><call pos:start="411:38" pos:end="411:69"><name pos:start="411:38" pos:end="411:51">rtl8139_addr64</name><argument_list pos:start="411:52" pos:end="411:69">(<argument pos:start="411:53" pos:end="411:59"><expr pos:start="411:53" pos:end="411:59"><name pos:start="411:53" pos:end="411:59">rxbufLO</name></expr></argument>, <argument pos:start="411:62" pos:end="411:68"><expr pos:start="411:62" pos:end="411:68"><name pos:start="411:62" pos:end="411:68">rxbufHI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="415:9" pos:end="415:43">/* receive/copy to target memory */</comment>

        <expr_stmt pos:start="417:9" pos:end="417:56"><expr pos:start="417:9" pos:end="417:55"><call pos:start="417:9" pos:end="417:55"><name pos:start="417:9" pos:end="417:33">cpu_physical_memory_write</name><argument_list pos:start="417:34" pos:end="417:55">( <argument pos:start="417:36" pos:end="417:42"><expr pos:start="417:36" pos:end="417:42"><name pos:start="417:36" pos:end="417:42">rx_addr</name></expr></argument>, <argument pos:start="417:45" pos:end="417:47"><expr pos:start="417:45" pos:end="417:47"><name pos:start="417:45" pos:end="417:47">buf</name></expr></argument>, <argument pos:start="417:50" pos:end="417:53"><expr pos:start="417:50" pos:end="417:53"><name pos:start="417:50" pos:end="417:53">size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="421:9" pos:end="434:0"><if pos:start="421:9" pos:end="434:0">if <condition pos:start="421:12" pos:end="421:37">(<expr pos:start="421:13" pos:end="421:36"><name pos:start="421:13" pos:end="421:20"><name pos:start="421:13" pos:end="421:13">s</name><operator pos:start="421:14" pos:end="421:15">-&gt;</operator><name pos:start="421:16" pos:end="421:20">CpCmd</name></name> <operator pos:start="421:22" pos:end="421:22">&amp;</operator> <name pos:start="421:24" pos:end="421:36">CPlusRxChkSum</name></expr>)</condition>

        <block pos:start="423:9" pos:end="434:0">{<block_content>

            <comment type="block" pos:start="425:13" pos:end="425:45">/* do some packet checksumming */</comment>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="431:9" pos:end="431:28">/* write checksum */</comment>

<cpp:if pos:start="433:1" pos:end="433:37">#<cpp:directive pos:start="433:2" pos:end="433:3">if</cpp:directive> <expr pos:start="433:5" pos:end="433:37"><call pos:start="433:5" pos:end="433:37"><name pos:start="433:5" pos:end="433:11">defined</name> <argument_list pos:start="433:13" pos:end="433:37">(<argument pos:start="433:14" pos:end="433:36"><expr pos:start="433:14" pos:end="433:36"><name pos:start="433:14" pos:end="433:36">RTL8139_CALCULATE_RXCRC</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="435:9" pos:end="438:0"><expr pos:start="435:9" pos:end="435:46"><name pos:start="435:9" pos:end="435:11">val</name> <operator pos:start="435:13" pos:end="435:13">=</operator> <call pos:start="435:15" pos:end="435:46"><name pos:start="435:15" pos:end="435:25">cpu_to_le32</name><argument_list pos:start="435:26" pos:end="435:46">(<argument pos:start="435:27" pos:end="435:45"><expr pos:start="435:27" pos:end="435:45"><call pos:start="435:27" pos:end="435:45"><name pos:start="435:27" pos:end="435:31">crc32</name><argument_list pos:start="435:32" pos:end="435:45">(<argument pos:start="435:33" pos:end="435:33"><expr pos:start="435:33" pos:end="435:33"><literal type="number" pos:start="435:33" pos:end="435:33">0</literal></expr></argument>, <argument pos:start="435:36" pos:end="435:38"><expr pos:start="435:36" pos:end="435:38"><name pos:start="435:36" pos:end="435:38">buf</name></expr></argument>, <argument pos:start="435:41" pos:end="435:44"><expr pos:start="435:41" pos:end="435:44"><name pos:start="435:41" pos:end="435:44">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="437:1" pos:end="437:5">#<cpp:directive pos:start="437:2" pos:end="437:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="439:9" pos:end="442:0"><expr pos:start="439:9" pos:end="439:15"><name pos:start="439:9" pos:end="439:11">val</name> <operator pos:start="439:13" pos:end="439:13">=</operator> <literal type="number" pos:start="439:15" pos:end="439:15">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="441:1" pos:end="441:6">#<cpp:directive pos:start="441:2" pos:end="441:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="443:9" pos:end="486:0"><expr pos:start="443:9" pos:end="443:68"><call pos:start="443:9" pos:end="443:68"><name pos:start="443:9" pos:end="443:33">cpu_physical_memory_write</name><argument_list pos:start="443:34" pos:end="443:68">( <argument pos:start="443:36" pos:end="443:47"><expr pos:start="443:36" pos:end="443:47"><name pos:start="443:36" pos:end="443:42">rx_addr</name><operator pos:start="443:43" pos:end="443:43">+</operator><name pos:start="443:44" pos:end="443:47">size</name></expr></argument>, <argument pos:start="443:50" pos:end="443:64"><expr pos:start="443:50" pos:end="443:64"><operator pos:start="443:50" pos:end="443:50">(</operator><name pos:start="443:51" pos:end="443:57">uint8_t</name> <operator pos:start="443:59" pos:end="443:59">*</operator><operator pos:start="443:60" pos:end="443:60">)</operator><operator pos:start="443:61" pos:end="443:61">&amp;</operator><name pos:start="443:62" pos:end="443:64">val</name></expr></argument>, <argument pos:start="443:67" pos:end="443:67"><expr pos:start="443:67" pos:end="443:67"><literal type="number" pos:start="443:67" pos:end="443:67">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<comment type="block" pos:start="447:1" pos:end="447:43">/* first segment of received packet flag */</comment>

<cpp:define pos:start="449:1" pos:end="449:31">#<cpp:directive pos:start="449:2" pos:end="449:7">define</cpp:directive> <cpp:macro pos:start="449:9" pos:end="449:23"><name pos:start="449:9" pos:end="449:23">CP_RX_STATUS_FS</name></cpp:macro> <cpp:value pos:start="449:25" pos:end="449:31">(1&lt;&lt;29)</cpp:value></cpp:define>

<comment type="block" pos:start="451:1" pos:end="451:42">/* last segment of received packet flag */</comment>

<cpp:define pos:start="453:1" pos:end="453:31">#<cpp:directive pos:start="453:2" pos:end="453:7">define</cpp:directive> <cpp:macro pos:start="453:9" pos:end="453:23"><name pos:start="453:9" pos:end="453:23">CP_RX_STATUS_LS</name></cpp:macro> <cpp:value pos:start="453:25" pos:end="453:31">(1&lt;&lt;28)</cpp:value></cpp:define>

<comment type="block" pos:start="455:1" pos:end="455:27">/* multicast packet flag */</comment>

<cpp:define pos:start="457:1" pos:end="457:32">#<cpp:directive pos:start="457:2" pos:end="457:7">define</cpp:directive> <cpp:macro pos:start="457:9" pos:end="457:24"><name pos:start="457:9" pos:end="457:24">CP_RX_STATUS_MAR</name></cpp:macro> <cpp:value pos:start="457:26" pos:end="457:32">(1&lt;&lt;26)</cpp:value></cpp:define>

<comment type="block" pos:start="459:1" pos:end="459:35">/* physical-matching packet flag */</comment>

<cpp:define pos:start="461:1" pos:end="461:32">#<cpp:directive pos:start="461:2" pos:end="461:7">define</cpp:directive> <cpp:macro pos:start="461:9" pos:end="461:24"><name pos:start="461:9" pos:end="461:24">CP_RX_STATUS_PAM</name></cpp:macro> <cpp:value pos:start="461:26" pos:end="461:32">(1&lt;&lt;25)</cpp:value></cpp:define>

<comment type="block" pos:start="463:1" pos:end="463:27">/* broadcast packet flag */</comment>

<cpp:define pos:start="465:1" pos:end="465:32">#<cpp:directive pos:start="465:2" pos:end="465:7">define</cpp:directive> <cpp:macro pos:start="465:9" pos:end="465:24"><name pos:start="465:9" pos:end="465:24">CP_RX_STATUS_BAR</name></cpp:macro> <cpp:value pos:start="465:26" pos:end="465:32">(1&lt;&lt;24)</cpp:value></cpp:define>

<comment type="block" pos:start="467:1" pos:end="467:22">/* runt packet flag */</comment>

<cpp:define pos:start="469:1" pos:end="469:33">#<cpp:directive pos:start="469:2" pos:end="469:7">define</cpp:directive> <cpp:macro pos:start="469:9" pos:end="469:25"><name pos:start="469:9" pos:end="469:25">CP_RX_STATUS_RUNT</name></cpp:macro> <cpp:value pos:start="469:27" pos:end="469:33">(1&lt;&lt;19)</cpp:value></cpp:define>

<comment type="block" pos:start="471:1" pos:end="471:20">/* crc error flag */</comment>

<cpp:define pos:start="473:1" pos:end="473:32">#<cpp:directive pos:start="473:2" pos:end="473:7">define</cpp:directive> <cpp:macro pos:start="473:9" pos:end="473:24"><name pos:start="473:9" pos:end="473:24">CP_RX_STATUS_CRC</name></cpp:macro> <cpp:value pos:start="473:26" pos:end="473:32">(1&lt;&lt;18)</cpp:value></cpp:define>

<comment type="block" pos:start="475:1" pos:end="475:28">/* IP checksum error flag */</comment>

<cpp:define pos:start="477:1" pos:end="477:32">#<cpp:directive pos:start="477:2" pos:end="477:7">define</cpp:directive> <cpp:macro pos:start="477:9" pos:end="477:24"><name pos:start="477:9" pos:end="477:24">CP_RX_STATUS_IPF</name></cpp:macro> <cpp:value pos:start="477:26" pos:end="477:32">(1&lt;&lt;15)</cpp:value></cpp:define>

<comment type="block" pos:start="479:1" pos:end="479:29">/* UDP checksum error flag */</comment>

<cpp:define pos:start="481:1" pos:end="481:33">#<cpp:directive pos:start="481:2" pos:end="481:7">define</cpp:directive> <cpp:macro pos:start="481:9" pos:end="481:25"><name pos:start="481:9" pos:end="481:25">CP_RX_STATUS_UDPF</name></cpp:macro> <cpp:value pos:start="481:27" pos:end="481:33">(1&lt;&lt;14)</cpp:value></cpp:define>

<comment type="block" pos:start="483:1" pos:end="483:29">/* TCP checksum error flag */</comment>

<cpp:define pos:start="485:1" pos:end="485:33">#<cpp:directive pos:start="485:2" pos:end="485:7">define</cpp:directive> <cpp:macro pos:start="485:9" pos:end="485:25"><name pos:start="485:9" pos:end="485:25">CP_RX_STATUS_TCPF</name></cpp:macro> <cpp:value pos:start="485:27" pos:end="485:33">(1&lt;&lt;13)</cpp:value></cpp:define>



        <comment type="block" pos:start="489:9" pos:end="489:42">/* transfer ownership to target */</comment>

        <expr_stmt pos:start="491:9" pos:end="491:28"><expr pos:start="491:9" pos:end="491:27"><name pos:start="491:9" pos:end="491:13">rxdw0</name> <operator pos:start="491:15" pos:end="491:16">&amp;=</operator> <operator pos:start="491:18" pos:end="491:18">~</operator><name pos:start="491:19" pos:end="491:27">CP_RX_OWN</name></expr>;</expr_stmt>



        <comment type="block" pos:start="495:9" pos:end="495:35">/* set first segment bit */</comment>

        <expr_stmt pos:start="497:9" pos:end="497:33"><expr pos:start="497:9" pos:end="497:32"><name pos:start="497:9" pos:end="497:13">rxdw0</name> <operator pos:start="497:15" pos:end="497:16">|=</operator> <name pos:start="497:18" pos:end="497:32">CP_RX_STATUS_FS</name></expr>;</expr_stmt>



        <comment type="block" pos:start="501:9" pos:end="501:34">/* set last segment bit */</comment>

        <expr_stmt pos:start="503:9" pos:end="503:33"><expr pos:start="503:9" pos:end="503:32"><name pos:start="503:9" pos:end="503:13">rxdw0</name> <operator pos:start="503:15" pos:end="503:16">|=</operator> <name pos:start="503:18" pos:end="503:32">CP_RX_STATUS_LS</name></expr>;</expr_stmt>



        <comment type="block" pos:start="507:9" pos:end="507:44">/* set received packet type flags */</comment>

        <if_stmt pos:start="509:9" pos:end="511:38"><if pos:start="509:9" pos:end="511:38">if <condition pos:start="509:12" pos:end="509:40">(<expr pos:start="509:13" pos:end="509:39"><name pos:start="509:13" pos:end="509:25">packet_header</name> <operator pos:start="509:27" pos:end="509:27">&amp;</operator> <name pos:start="509:29" pos:end="509:39">RxBroadcast</name></expr>)</condition><block type="pseudo" pos:start="511:13" pos:end="511:38"><block_content pos:start="511:13" pos:end="511:38">

            <expr_stmt pos:start="511:13" pos:end="511:38"><expr pos:start="511:13" pos:end="511:37"><name pos:start="511:13" pos:end="511:17">rxdw0</name> <operator pos:start="511:19" pos:end="511:20">|=</operator> <name pos:start="511:22" pos:end="511:37">CP_RX_STATUS_BAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="513:9" pos:end="515:38"><if pos:start="513:9" pos:end="515:38">if <condition pos:start="513:12" pos:end="513:40">(<expr pos:start="513:13" pos:end="513:39"><name pos:start="513:13" pos:end="513:25">packet_header</name> <operator pos:start="513:27" pos:end="513:27">&amp;</operator> <name pos:start="513:29" pos:end="513:39">RxMulticast</name></expr>)</condition><block type="pseudo" pos:start="515:13" pos:end="515:38"><block_content pos:start="515:13" pos:end="515:38">

            <expr_stmt pos:start="515:13" pos:end="515:38"><expr pos:start="515:13" pos:end="515:37"><name pos:start="515:13" pos:end="515:17">rxdw0</name> <operator pos:start="515:19" pos:end="515:20">|=</operator> <name pos:start="515:22" pos:end="515:37">CP_RX_STATUS_MAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="517:9" pos:end="519:38"><if pos:start="517:9" pos:end="519:38">if <condition pos:start="517:12" pos:end="517:39">(<expr pos:start="517:13" pos:end="517:38"><name pos:start="517:13" pos:end="517:25">packet_header</name> <operator pos:start="517:27" pos:end="517:27">&amp;</operator> <name pos:start="517:29" pos:end="517:38">RxPhysical</name></expr>)</condition><block type="pseudo" pos:start="519:13" pos:end="519:38"><block_content pos:start="519:13" pos:end="519:38">

            <expr_stmt pos:start="519:13" pos:end="519:38"><expr pos:start="519:13" pos:end="519:37"><name pos:start="519:13" pos:end="519:17">rxdw0</name> <operator pos:start="519:19" pos:end="519:20">|=</operator> <name pos:start="519:22" pos:end="519:37">CP_RX_STATUS_PAM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="523:9" pos:end="523:31">/* set received size */</comment>

        <expr_stmt pos:start="525:9" pos:end="525:41"><expr pos:start="525:9" pos:end="525:40"><name pos:start="525:9" pos:end="525:13">rxdw0</name> <operator pos:start="525:15" pos:end="525:16">&amp;=</operator> <operator pos:start="525:18" pos:end="525:18">~</operator><name pos:start="525:19" pos:end="525:40">CP_RX_BUFFER_SIZE_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="527:9" pos:end="527:26"><expr pos:start="527:9" pos:end="527:25"><name pos:start="527:9" pos:end="527:13">rxdw0</name> <operator pos:start="527:15" pos:end="527:16">|=</operator> <operator pos:start="527:18" pos:end="527:18">(</operator><name pos:start="527:19" pos:end="527:22">size</name><operator pos:start="527:23" pos:end="527:23">+</operator><literal type="number" pos:start="527:24" pos:end="527:24">4</literal><operator pos:start="527:25" pos:end="527:25">)</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="531:9" pos:end="531:33">/* reset VLAN tag flag */</comment>

        <expr_stmt pos:start="533:9" pos:end="533:29"><expr pos:start="533:9" pos:end="533:28"><name pos:start="533:9" pos:end="533:13">rxdw1</name> <operator pos:start="533:15" pos:end="533:16">&amp;=</operator> <operator pos:start="533:18" pos:end="533:18">~</operator><name pos:start="533:19" pos:end="533:28">CP_RX_TAVA</name></expr>;</expr_stmt>



        <comment type="block" pos:start="537:9" pos:end="537:30">/* update ring data */</comment>

        <expr_stmt pos:start="539:9" pos:end="539:33"><expr pos:start="539:9" pos:end="539:32"><name pos:start="539:9" pos:end="539:11">val</name> <operator pos:start="539:13" pos:end="539:13">=</operator> <call pos:start="539:15" pos:end="539:32"><name pos:start="539:15" pos:end="539:25">cpu_to_le32</name><argument_list pos:start="539:26" pos:end="539:32">(<argument pos:start="539:27" pos:end="539:31"><expr pos:start="539:27" pos:end="539:31"><name pos:start="539:27" pos:end="539:31">rxdw0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="541:9" pos:end="541:77"><expr pos:start="541:9" pos:end="541:76"><call pos:start="541:9" pos:end="541:76"><name pos:start="541:9" pos:end="541:33">cpu_physical_memory_write</name><argument_list pos:start="541:34" pos:end="541:76">(<argument pos:start="541:35" pos:end="541:52"><expr pos:start="541:35" pos:end="541:52"><name pos:start="541:35" pos:end="541:52">cplus_rx_ring_desc</name></expr></argument>,    <argument pos:start="541:58" pos:end="541:72"><expr pos:start="541:58" pos:end="541:72"><operator pos:start="541:58" pos:end="541:58">(</operator><name pos:start="541:59" pos:end="541:65">uint8_t</name> <operator pos:start="541:67" pos:end="541:67">*</operator><operator pos:start="541:68" pos:end="541:68">)</operator><operator pos:start="541:69" pos:end="541:69">&amp;</operator><name pos:start="541:70" pos:end="541:72">val</name></expr></argument>, <argument pos:start="541:75" pos:end="541:75"><expr pos:start="541:75" pos:end="541:75"><literal type="number" pos:start="541:75" pos:end="541:75">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="543:9" pos:end="543:33"><expr pos:start="543:9" pos:end="543:32"><name pos:start="543:9" pos:end="543:11">val</name> <operator pos:start="543:13" pos:end="543:13">=</operator> <call pos:start="543:15" pos:end="543:32"><name pos:start="543:15" pos:end="543:25">cpu_to_le32</name><argument_list pos:start="543:26" pos:end="543:32">(<argument pos:start="543:27" pos:end="543:31"><expr pos:start="543:27" pos:end="543:31"><name pos:start="543:27" pos:end="543:31">rxdw1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="545:9" pos:end="545:77"><expr pos:start="545:9" pos:end="545:76"><call pos:start="545:9" pos:end="545:76"><name pos:start="545:9" pos:end="545:33">cpu_physical_memory_write</name><argument_list pos:start="545:34" pos:end="545:76">(<argument pos:start="545:35" pos:end="545:54"><expr pos:start="545:35" pos:end="545:54"><name pos:start="545:35" pos:end="545:52">cplus_rx_ring_desc</name><operator pos:start="545:53" pos:end="545:53">+</operator><literal type="number" pos:start="545:54" pos:end="545:54">4</literal></expr></argument>,  <argument pos:start="545:58" pos:end="545:72"><expr pos:start="545:58" pos:end="545:72"><operator pos:start="545:58" pos:end="545:58">(</operator><name pos:start="545:59" pos:end="545:65">uint8_t</name> <operator pos:start="545:67" pos:end="545:67">*</operator><operator pos:start="545:68" pos:end="545:68">)</operator><operator pos:start="545:69" pos:end="545:69">&amp;</operator><name pos:start="545:70" pos:end="545:72">val</name></expr></argument>, <argument pos:start="545:75" pos:end="545:75"><expr pos:start="545:75" pos:end="545:75"><literal type="number" pos:start="545:75" pos:end="545:75">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="549:9" pos:end="549:34">/* update tally counter */</comment>

        <expr_stmt pos:start="551:9" pos:end="551:33"><expr pos:start="551:9" pos:end="551:32"><operator pos:start="551:9" pos:end="551:10">++</operator><name pos:start="551:11" pos:end="551:32"><name pos:start="551:11" pos:end="551:11">s</name><operator pos:start="551:12" pos:end="551:13">-&gt;</operator><name pos:start="551:14" pos:end="551:27">tally_counters</name><operator pos:start="551:28" pos:end="551:28">.</operator><name pos:start="551:29" pos:end="551:32">RxOk</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="555:9" pos:end="555:40">/* seek to next Rx descriptor */</comment>

        <if_stmt pos:start="557:9" pos:end="571:9"><if pos:start="557:9" pos:end="563:9">if <condition pos:start="557:12" pos:end="557:30">(<expr pos:start="557:13" pos:end="557:29"><name pos:start="557:13" pos:end="557:17">rxdw0</name> <operator pos:start="557:19" pos:end="557:19">&amp;</operator> <name pos:start="557:21" pos:end="557:29">CP_RX_EOR</name></expr>)</condition>

        <block pos:start="559:9" pos:end="563:9">{<block_content pos:start="561:13" pos:end="561:35">

            <expr_stmt pos:start="561:13" pos:end="561:35"><expr pos:start="561:13" pos:end="561:34"><name pos:start="561:13" pos:end="561:30"><name pos:start="561:13" pos:end="561:13">s</name><operator pos:start="561:14" pos:end="561:15">-&gt;</operator><name pos:start="561:16" pos:end="561:30">currCPlusRxDesc</name></name> <operator pos:start="561:32" pos:end="561:32">=</operator> <literal type="number" pos:start="561:34" pos:end="561:34">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if>

        <else pos:start="565:9" pos:end="571:9">else

        <block pos:start="567:9" pos:end="571:9">{<block_content pos:start="569:13" pos:end="569:33">

            <expr_stmt pos:start="569:13" pos:end="569:33"><expr pos:start="569:13" pos:end="569:32"><operator pos:start="569:13" pos:end="569:14">++</operator><name pos:start="569:15" pos:end="569:32"><name pos:start="569:15" pos:end="569:15">s</name><operator pos:start="569:16" pos:end="569:17">-&gt;</operator><name pos:start="569:18" pos:end="569:32">currCPlusRxDesc</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="575:9" pos:end="575:69"><expr pos:start="575:9" pos:end="575:68"><call pos:start="575:9" pos:end="575:68"><name pos:start="575:9" pos:end="575:19">DEBUG_PRINT</name><argument_list pos:start="575:20" pos:end="575:68">(<argument pos:start="575:21" pos:end="575:67"><expr pos:start="575:21" pos:end="575:67"><operator pos:start="575:21" pos:end="575:21">(</operator><literal type="string" pos:start="575:22" pos:end="575:66">"RTL8139: done C+ Rx mode ----------------\n"</literal><operator pos:start="575:67" pos:end="575:67">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if>

    <else pos:start="581:5" pos:end="675:5">else

    <block pos:start="583:5" pos:end="675:5">{<block_content pos:start="585:9" pos:end="673:60">

        <expr_stmt pos:start="585:9" pos:end="585:69"><expr pos:start="585:9" pos:end="585:68"><call pos:start="585:9" pos:end="585:68"><name pos:start="585:9" pos:end="585:19">DEBUG_PRINT</name><argument_list pos:start="585:20" pos:end="585:68">(<argument pos:start="585:21" pos:end="585:67"><expr pos:start="585:21" pos:end="585:67"><operator pos:start="585:21" pos:end="585:21">(</operator><literal type="string" pos:start="585:22" pos:end="585:66">"RTL8139: in ring Rx mode ================\n"</literal><operator pos:start="585:67" pos:end="585:67">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="589:9" pos:end="589:38">/* begin ring receiver mode */</comment>

        <decl_stmt pos:start="591:9" pos:end="591:88"><decl pos:start="591:9" pos:end="591:87"><type pos:start="591:9" pos:end="591:11"><name pos:start="591:9" pos:end="591:11">int</name></type> <name pos:start="591:13" pos:end="591:17">avail</name> <init pos:start="591:19" pos:end="591:87">= <expr pos:start="591:21" pos:end="591:87"><call pos:start="591:21" pos:end="591:87"><name pos:start="591:21" pos:end="591:24">MOD2</name><argument_list pos:start="591:25" pos:end="591:87">(<argument pos:start="591:26" pos:end="591:69"><expr pos:start="591:26" pos:end="591:69"><name pos:start="591:26" pos:end="591:40"><name pos:start="591:26" pos:end="591:26">s</name><operator pos:start="591:27" pos:end="591:28">-&gt;</operator><name pos:start="591:29" pos:end="591:40">RxBufferSize</name></name> <operator pos:start="591:42" pos:end="591:42">+</operator> <name pos:start="591:44" pos:end="591:54"><name pos:start="591:44" pos:end="591:44">s</name><operator pos:start="591:45" pos:end="591:46">-&gt;</operator><name pos:start="591:47" pos:end="591:54">RxBufPtr</name></name> <operator pos:start="591:56" pos:end="591:56">-</operator> <name pos:start="591:58" pos:end="591:69"><name pos:start="591:58" pos:end="591:58">s</name><operator pos:start="591:59" pos:end="591:60">-&gt;</operator><name pos:start="591:61" pos:end="591:69">RxBufAddr</name></name></expr></argument>, <argument pos:start="591:72" pos:end="591:86"><expr pos:start="591:72" pos:end="591:86"><name pos:start="591:72" pos:end="591:86"><name pos:start="591:72" pos:end="591:72">s</name><operator pos:start="591:73" pos:end="591:74">-&gt;</operator><name pos:start="591:75" pos:end="591:86">RxBufferSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="595:9" pos:end="595:57">/* if receiver buffer is empty then avail == 0 */</comment>



        <if_stmt pos:start="599:9" pos:end="617:9"><if pos:start="599:9" pos:end="617:9">if <condition pos:start="599:12" pos:end="599:44">(<expr pos:start="599:13" pos:end="599:43"><name pos:start="599:13" pos:end="599:17">avail</name> <operator pos:start="599:19" pos:end="599:20">!=</operator> <literal type="number" pos:start="599:22" pos:end="599:22">0</literal> <operator pos:start="599:24" pos:end="599:25">&amp;&amp;</operator> <name pos:start="599:27" pos:end="599:30">size</name> <operator pos:start="599:32" pos:end="599:32">+</operator> <literal type="number" pos:start="599:34" pos:end="599:34">8</literal> <operator pos:start="599:36" pos:end="599:37">&gt;=</operator> <name pos:start="599:39" pos:end="599:43">avail</name></expr>)</condition>

        <block pos:start="601:9" pos:end="617:9">{<block_content pos:start="603:13" pos:end="615:25">

            <expr_stmt pos:start="603:13" pos:end="605:81"><expr pos:start="603:13" pos:end="605:80"><call pos:start="603:13" pos:end="605:80"><name pos:start="603:13" pos:end="603:23">DEBUG_PRINT</name><argument_list pos:start="603:24" pos:end="605:80">(<argument pos:start="603:25" pos:end="605:79"><expr pos:start="603:25" pos:end="605:79"><operator pos:start="603:25" pos:end="603:25">(</operator><literal type="string" pos:start="603:26" pos:end="603:118">"rx overflow: rx buffer length %d head 0x%04x read 0x%04x === available 0x%04x need 0x%04x\n"</literal><operator pos:start="603:119" pos:end="603:119">,</operator>

                   <name pos:start="605:20" pos:end="605:34"><name pos:start="605:20" pos:end="605:20">s</name><operator pos:start="605:21" pos:end="605:22">-&gt;</operator><name pos:start="605:23" pos:end="605:34">RxBufferSize</name></name><operator pos:start="605:35" pos:end="605:35">,</operator> <name pos:start="605:37" pos:end="605:48"><name pos:start="605:37" pos:end="605:37">s</name><operator pos:start="605:38" pos:end="605:39">-&gt;</operator><name pos:start="605:40" pos:end="605:48">RxBufAddr</name></name><operator pos:start="605:49" pos:end="605:49">,</operator> <name pos:start="605:51" pos:end="605:61"><name pos:start="605:51" pos:end="605:51">s</name><operator pos:start="605:52" pos:end="605:53">-&gt;</operator><name pos:start="605:54" pos:end="605:61">RxBufPtr</name></name><operator pos:start="605:62" pos:end="605:62">,</operator> <name pos:start="605:64" pos:end="605:68">avail</name><operator pos:start="605:69" pos:end="605:69">,</operator> <name pos:start="605:71" pos:end="605:74">size</name> <operator pos:start="605:76" pos:end="605:76">+</operator> <literal type="number" pos:start="605:78" pos:end="605:78">8</literal><operator pos:start="605:79" pos:end="605:79">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="609:13" pos:end="609:40"><expr pos:start="609:13" pos:end="609:39"><name pos:start="609:13" pos:end="609:25"><name pos:start="609:13" pos:end="609:13">s</name><operator pos:start="609:14" pos:end="609:15">-&gt;</operator><name pos:start="609:16" pos:end="609:25">IntrStatus</name></name> <operator pos:start="609:27" pos:end="609:28">|=</operator> <name pos:start="609:30" pos:end="609:39">RxOverflow</name></expr>;</expr_stmt>

            <expr_stmt pos:start="611:13" pos:end="611:26"><expr pos:start="611:13" pos:end="611:25"><operator pos:start="611:13" pos:end="611:14">++</operator><name pos:start="611:15" pos:end="611:25"><name pos:start="611:15" pos:end="611:15">s</name><operator pos:start="611:16" pos:end="611:17">-&gt;</operator><name pos:start="611:18" pos:end="611:25">RxMissed</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="613:13" pos:end="613:34"><expr pos:start="613:13" pos:end="613:33"><call pos:start="613:13" pos:end="613:33"><name pos:start="613:13" pos:end="613:30">rtl8139_update_irq</name><argument_list pos:start="613:31" pos:end="613:33">(<argument pos:start="613:32" pos:end="613:32"><expr pos:start="613:32" pos:end="613:32"><name pos:start="613:32" pos:end="613:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="615:13" pos:end="615:25">return <expr pos:start="615:20" pos:end="615:24"><name pos:start="615:20" pos:end="615:24">size_</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="621:9" pos:end="621:36"><expr pos:start="621:9" pos:end="621:35"><name pos:start="621:9" pos:end="621:21">packet_header</name> <operator pos:start="621:23" pos:end="621:24">|=</operator> <name pos:start="621:26" pos:end="621:35">RxStatusOK</name></expr>;</expr_stmt>



        <expr_stmt pos:start="625:9" pos:end="625:57"><expr pos:start="625:9" pos:end="625:56"><name pos:start="625:9" pos:end="625:21">packet_header</name> <operator pos:start="625:23" pos:end="625:24">|=</operator> <operator pos:start="625:26" pos:end="625:26">(</operator><operator pos:start="625:27" pos:end="625:27">(</operator><operator pos:start="625:28" pos:end="625:28">(</operator><name pos:start="625:29" pos:end="625:32">size</name><operator pos:start="625:33" pos:end="625:33">+</operator><literal type="number" pos:start="625:34" pos:end="625:34">4</literal><operator pos:start="625:35" pos:end="625:35">)</operator> <operator pos:start="625:37" pos:end="625:38">&lt;&lt;</operator> <literal type="number" pos:start="625:40" pos:end="625:41">16</literal><operator pos:start="625:42" pos:end="625:42">)</operator> <operator pos:start="625:44" pos:end="625:44">&amp;</operator> <literal type="number" pos:start="625:46" pos:end="625:55">0xffff0000</literal><operator pos:start="625:56" pos:end="625:56">)</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="629:9" pos:end="629:26">/* write header */</comment>

        <decl_stmt pos:start="631:9" pos:end="631:50"><decl pos:start="631:9" pos:end="631:49"><type pos:start="631:9" pos:end="631:16"><name pos:start="631:9" pos:end="631:16">uint32_t</name></type> <name pos:start="631:18" pos:end="631:20">val</name> <init pos:start="631:22" pos:end="631:49">= <expr pos:start="631:24" pos:end="631:49"><call pos:start="631:24" pos:end="631:49"><name pos:start="631:24" pos:end="631:34">cpu_to_le32</name><argument_list pos:start="631:35" pos:end="631:49">(<argument pos:start="631:36" pos:end="631:48"><expr pos:start="631:36" pos:end="631:48"><name pos:start="631:36" pos:end="631:48">packet_header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="635:9" pos:end="635:52"><expr pos:start="635:9" pos:end="635:51"><call pos:start="635:9" pos:end="635:51"><name pos:start="635:9" pos:end="635:28">rtl8139_write_buffer</name><argument_list pos:start="635:29" pos:end="635:51">(<argument pos:start="635:30" pos:end="635:30"><expr pos:start="635:30" pos:end="635:30"><name pos:start="635:30" pos:end="635:30">s</name></expr></argument>, <argument pos:start="635:33" pos:end="635:47"><expr pos:start="635:33" pos:end="635:47"><operator pos:start="635:33" pos:end="635:33">(</operator><name pos:start="635:34" pos:end="635:40">uint8_t</name> <operator pos:start="635:42" pos:end="635:42">*</operator><operator pos:start="635:43" pos:end="635:43">)</operator><operator pos:start="635:44" pos:end="635:44">&amp;</operator><name pos:start="635:45" pos:end="635:47">val</name></expr></argument>, <argument pos:start="635:50" pos:end="635:50"><expr pos:start="635:50" pos:end="635:50"><literal type="number" pos:start="635:50" pos:end="635:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="639:9" pos:end="646:0"><expr pos:start="639:9" pos:end="639:42"><call pos:start="639:9" pos:end="639:42"><name pos:start="639:9" pos:end="639:28">rtl8139_write_buffer</name><argument_list pos:start="639:29" pos:end="639:42">(<argument pos:start="639:30" pos:end="639:30"><expr pos:start="639:30" pos:end="639:30"><name pos:start="639:30" pos:end="639:30">s</name></expr></argument>, <argument pos:start="639:33" pos:end="639:35"><expr pos:start="639:33" pos:end="639:35"><name pos:start="639:33" pos:end="639:35">buf</name></expr></argument>, <argument pos:start="639:38" pos:end="639:41"><expr pos:start="639:38" pos:end="639:41"><name pos:start="639:38" pos:end="639:41">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="643:9" pos:end="643:28">/* write checksum */</comment>

<cpp:if pos:start="645:1" pos:end="645:37">#<cpp:directive pos:start="645:2" pos:end="645:3">if</cpp:directive> <expr pos:start="645:5" pos:end="645:37"><call pos:start="645:5" pos:end="645:37"><name pos:start="645:5" pos:end="645:11">defined</name> <argument_list pos:start="645:13" pos:end="645:37">(<argument pos:start="645:14" pos:end="645:36"><expr pos:start="645:14" pos:end="645:36"><name pos:start="645:14" pos:end="645:36">RTL8139_CALCULATE_RXCRC</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="647:9" pos:end="650:0"><expr pos:start="647:9" pos:end="647:46"><name pos:start="647:9" pos:end="647:11">val</name> <operator pos:start="647:13" pos:end="647:13">=</operator> <call pos:start="647:15" pos:end="647:46"><name pos:start="647:15" pos:end="647:25">cpu_to_le32</name><argument_list pos:start="647:26" pos:end="647:46">(<argument pos:start="647:27" pos:end="647:45"><expr pos:start="647:27" pos:end="647:45"><call pos:start="647:27" pos:end="647:45"><name pos:start="647:27" pos:end="647:31">crc32</name><argument_list pos:start="647:32" pos:end="647:45">(<argument pos:start="647:33" pos:end="647:33"><expr pos:start="647:33" pos:end="647:33"><literal type="number" pos:start="647:33" pos:end="647:33">0</literal></expr></argument>, <argument pos:start="647:36" pos:end="647:38"><expr pos:start="647:36" pos:end="647:38"><name pos:start="647:36" pos:end="647:38">buf</name></expr></argument>, <argument pos:start="647:41" pos:end="647:44"><expr pos:start="647:41" pos:end="647:44"><name pos:start="647:41" pos:end="647:44">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="649:1" pos:end="649:5">#<cpp:directive pos:start="649:2" pos:end="649:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="651:9" pos:end="654:0"><expr pos:start="651:9" pos:end="651:15"><name pos:start="651:9" pos:end="651:11">val</name> <operator pos:start="651:13" pos:end="651:13">=</operator> <literal type="number" pos:start="651:15" pos:end="651:15">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="653:1" pos:end="653:6">#<cpp:directive pos:start="653:2" pos:end="653:6">endif</cpp:directive></cpp:endif>



        <expr_stmt pos:start="657:9" pos:end="657:52"><expr pos:start="657:9" pos:end="657:51"><call pos:start="657:9" pos:end="657:51"><name pos:start="657:9" pos:end="657:28">rtl8139_write_buffer</name><argument_list pos:start="657:29" pos:end="657:51">(<argument pos:start="657:30" pos:end="657:30"><expr pos:start="657:30" pos:end="657:30"><name pos:start="657:30" pos:end="657:30">s</name></expr></argument>, <argument pos:start="657:33" pos:end="657:47"><expr pos:start="657:33" pos:end="657:47"><operator pos:start="657:33" pos:end="657:33">(</operator><name pos:start="657:34" pos:end="657:40">uint8_t</name> <operator pos:start="657:42" pos:end="657:42">*</operator><operator pos:start="657:43" pos:end="657:43">)</operator><operator pos:start="657:44" pos:end="657:44">&amp;</operator><name pos:start="657:45" pos:end="657:47">val</name></expr></argument>, <argument pos:start="657:50" pos:end="657:50"><expr pos:start="657:50" pos:end="657:50"><literal type="number" pos:start="657:50" pos:end="657:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="661:9" pos:end="661:42">/* correct buffer write pointer */</comment>

        <expr_stmt pos:start="663:9" pos:end="663:72"><expr pos:start="663:9" pos:end="663:71"><name pos:start="663:9" pos:end="663:20"><name pos:start="663:9" pos:end="663:9">s</name><operator pos:start="663:10" pos:end="663:11">-&gt;</operator><name pos:start="663:12" pos:end="663:20">RxBufAddr</name></name> <operator pos:start="663:22" pos:end="663:22">=</operator> <call pos:start="663:24" pos:end="663:71"><name pos:start="663:24" pos:end="663:27">MOD2</name><argument_list pos:start="663:28" pos:end="663:71">(<argument pos:start="663:29" pos:end="663:53"><expr pos:start="663:29" pos:end="663:53"><operator pos:start="663:29" pos:end="663:29">(</operator><name pos:start="663:30" pos:end="663:41"><name pos:start="663:30" pos:end="663:30">s</name><operator pos:start="663:31" pos:end="663:32">-&gt;</operator><name pos:start="663:33" pos:end="663:41">RxBufAddr</name></name> <operator pos:start="663:43" pos:end="663:43">+</operator> <literal type="number" pos:start="663:45" pos:end="663:45">3</literal><operator pos:start="663:46" pos:end="663:46">)</operator> <operator pos:start="663:48" pos:end="663:48">&amp;</operator> <operator pos:start="663:50" pos:end="663:50">~</operator><literal type="number" pos:start="663:51" pos:end="663:53">0x3</literal></expr></argument>, <argument pos:start="663:56" pos:end="663:70"><expr pos:start="663:56" pos:end="663:70"><name pos:start="663:56" pos:end="663:70"><name pos:start="663:56" pos:end="663:56">s</name><operator pos:start="663:57" pos:end="663:58">-&gt;</operator><name pos:start="663:59" pos:end="663:70">RxBufferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="667:9" pos:end="667:58">/* now we can signal we have received something */</comment>



        <expr_stmt pos:start="671:9" pos:end="673:60"><expr pos:start="671:9" pos:end="673:59"><call pos:start="671:9" pos:end="673:59"><name pos:start="671:9" pos:end="671:19">DEBUG_PRINT</name><argument_list pos:start="671:20" pos:end="673:59">(<argument pos:start="671:21" pos:end="673:58"><expr pos:start="671:21" pos:end="673:58"><operator pos:start="671:21" pos:end="671:21">(</operator><literal type="string" pos:start="671:22" pos:end="671:81">"   received: rx buffer length %d head 0x%04x read 0x%04x\n"</literal><operator pos:start="671:82" pos:end="671:82">,</operator>

               <name pos:start="673:16" pos:end="673:30"><name pos:start="673:16" pos:end="673:16">s</name><operator pos:start="673:17" pos:end="673:18">-&gt;</operator><name pos:start="673:19" pos:end="673:30">RxBufferSize</name></name><operator pos:start="673:31" pos:end="673:31">,</operator> <name pos:start="673:33" pos:end="673:44"><name pos:start="673:33" pos:end="673:33">s</name><operator pos:start="673:34" pos:end="673:35">-&gt;</operator><name pos:start="673:36" pos:end="673:44">RxBufAddr</name></name><operator pos:start="673:45" pos:end="673:45">,</operator> <name pos:start="673:47" pos:end="673:57"><name pos:start="673:47" pos:end="673:47">s</name><operator pos:start="673:48" pos:end="673:49">-&gt;</operator><name pos:start="673:50" pos:end="673:57">RxBufPtr</name></name><operator pos:start="673:58" pos:end="673:58">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="679:5" pos:end="679:26"><expr pos:start="679:5" pos:end="679:25"><name pos:start="679:5" pos:end="679:17"><name pos:start="679:5" pos:end="679:5">s</name><operator pos:start="679:6" pos:end="679:7">-&gt;</operator><name pos:start="679:8" pos:end="679:17">IntrStatus</name></name> <operator pos:start="679:19" pos:end="679:20">|=</operator> <name pos:start="679:22" pos:end="679:25">RxOK</name></expr>;</expr_stmt>



    <if_stmt pos:start="683:5" pos:end="689:5"><if pos:start="683:5" pos:end="689:5">if <condition pos:start="683:8" pos:end="683:21">(<expr pos:start="683:9" pos:end="683:20"><name pos:start="683:9" pos:end="683:20">do_interrupt</name></expr>)</condition>

    <block pos:start="685:5" pos:end="689:5">{<block_content pos:start="687:9" pos:end="687:30">

        <expr_stmt pos:start="687:9" pos:end="687:30"><expr pos:start="687:9" pos:end="687:29"><call pos:start="687:9" pos:end="687:29"><name pos:start="687:9" pos:end="687:26">rtl8139_update_irq</name><argument_list pos:start="687:27" pos:end="687:29">(<argument pos:start="687:28" pos:end="687:28"><expr pos:start="687:28" pos:end="687:28"><name pos:start="687:28" pos:end="687:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="693:5" pos:end="693:17">return <expr pos:start="693:12" pos:end="693:16"><name pos:start="693:12" pos:end="693:16">size_</name></expr>;</return>

</block_content>}</block></function>
</unit>
