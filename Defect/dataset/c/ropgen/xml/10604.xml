<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10604.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">check_guest_output</name><parameter_list pos:start="1:31" pos:end="1:61">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:52"><specifier pos:start="1:32" pos:end="1:36">const</specifier> <name pos:start="1:38" pos:end="1:46">testdef_t</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:52">test</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:60"><decl pos:start="1:55" pos:end="1:60"><type pos:start="1:55" pos:end="1:60"><name pos:start="1:55" pos:end="1:57">int</name></type> <name pos:start="1:59" pos:end="1:60">fd</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="53:1">{<block_content pos:start="5:5" pos:end="51:24">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">bool</name></type> <name pos:start="5:10" pos:end="5:18">output_ok</name> <init pos:start="5:20" pos:end="5:26">= <expr pos:start="5:22" pos:end="5:26"><name pos:start="5:22" pos:end="5:26">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:14">nbr</name></decl>, <decl pos:start="7:17" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:17" pos:end="7:19">pos</name> <init pos:start="7:21" pos:end="7:23">= <expr pos:start="7:23" pos:end="7:23"><literal type="number" pos:start="7:23" pos:end="7:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:11">ch</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:55">/* Poll serial output... Wait at most 60 seconds */</comment>

    <for pos:start="15:5" pos:end="45:5">for <control pos:start="15:9" pos:end="15:30">(<init pos:start="15:10" pos:end="15:15"><expr pos:start="15:10" pos:end="15:14"><name pos:start="15:10" pos:end="15:10">i</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <literal type="number" pos:start="15:14" pos:end="15:14">0</literal></expr>;</init> <condition pos:start="15:17" pos:end="15:25"><expr pos:start="15:17" pos:end="15:24"><name pos:start="15:17" pos:end="15:17">i</name> <operator pos:start="15:19" pos:end="15:19">&lt;</operator> <literal type="number" pos:start="15:21" pos:end="15:24">6000</literal></expr>;</condition> <incr pos:start="15:27" pos:end="15:29"><expr pos:start="15:27" pos:end="15:29"><operator pos:start="15:27" pos:end="15:28">++</operator><name pos:start="15:29" pos:end="15:29">i</name></expr></incr>)</control> <block pos:start="15:32" pos:end="45:5">{<block_content pos:start="17:9" pos:end="43:24">

        <while pos:start="17:9" pos:end="39:9">while <condition pos:start="17:15" pos:end="17:45">(<expr pos:start="17:16" pos:end="17:44"><operator pos:start="17:16" pos:end="17:16">(</operator><name pos:start="17:17" pos:end="17:19">nbr</name> <operator pos:start="17:21" pos:end="17:21">=</operator> <call pos:start="17:23" pos:end="17:38"><name pos:start="17:23" pos:end="17:26">read</name><argument_list pos:start="17:27" pos:end="17:38">(<argument pos:start="17:28" pos:end="17:29"><expr pos:start="17:28" pos:end="17:29"><name pos:start="17:28" pos:end="17:29">fd</name></expr></argument>, <argument pos:start="17:32" pos:end="17:34"><expr pos:start="17:32" pos:end="17:34"><operator pos:start="17:32" pos:end="17:32">&amp;</operator><name pos:start="17:33" pos:end="17:34">ch</name></expr></argument>, <argument pos:start="17:37" pos:end="17:37"><expr pos:start="17:37" pos:end="17:37"><literal type="number" pos:start="17:37" pos:end="17:37">1</literal></expr></argument>)</argument_list></call><operator pos:start="17:39" pos:end="17:39">)</operator> <operator pos:start="17:41" pos:end="17:42">==</operator> <literal type="number" pos:start="17:44" pos:end="17:44">1</literal></expr>)</condition> <block pos:start="17:47" pos:end="39:9">{<block_content pos:start="19:13" pos:end="37:13">

            <if_stmt pos:start="19:13" pos:end="37:13"><if pos:start="19:13" pos:end="33:13">if <condition pos:start="19:16" pos:end="19:40">(<expr pos:start="19:17" pos:end="19:39"><name pos:start="19:17" pos:end="19:18">ch</name> <operator pos:start="19:20" pos:end="19:21">==</operator> <name pos:start="19:23" pos:end="19:39"><name pos:start="19:23" pos:end="19:26">test</name><operator pos:start="19:27" pos:end="19:28">-&gt;</operator><name pos:start="19:29" pos:end="19:34">expect</name><index pos:start="19:35" pos:end="19:39">[<expr pos:start="19:36" pos:end="19:38"><name pos:start="19:36" pos:end="19:38">pos</name></expr>]</index></name></expr>)</condition> <block pos:start="19:42" pos:end="33:13">{<block_content pos:start="21:17" pos:end="31:17">

                <expr_stmt pos:start="21:17" pos:end="21:25"><expr pos:start="21:17" pos:end="21:24"><name pos:start="21:17" pos:end="21:19">pos</name> <operator pos:start="21:21" pos:end="21:22">+=</operator> <literal type="number" pos:start="21:24" pos:end="21:24">1</literal></expr>;</expr_stmt>

                <if_stmt pos:start="23:17" pos:end="31:17"><if pos:start="23:17" pos:end="31:17">if <condition pos:start="23:20" pos:end="23:46">(<expr pos:start="23:21" pos:end="23:45"><name pos:start="23:21" pos:end="23:37"><name pos:start="23:21" pos:end="23:24">test</name><operator pos:start="23:25" pos:end="23:26">-&gt;</operator><name pos:start="23:27" pos:end="23:32">expect</name><index pos:start="23:33" pos:end="23:37">[<expr pos:start="23:34" pos:end="23:36"><name pos:start="23:34" pos:end="23:36">pos</name></expr>]</index></name> <operator pos:start="23:39" pos:end="23:40">==</operator> <literal type="char" pos:start="23:42" pos:end="23:45">'\0'</literal></expr>)</condition> <block pos:start="23:48" pos:end="31:17">{<block_content pos:start="27:21" pos:end="29:30">

                    <comment type="block" pos:start="25:21" pos:end="25:71">/* We've reached the end of the expected string! */</comment>

                    <expr_stmt pos:start="27:21" pos:end="27:37"><expr pos:start="27:21" pos:end="27:36"><name pos:start="27:21" pos:end="27:29">output_ok</name> <operator pos:start="27:31" pos:end="27:31">=</operator> <name pos:start="27:33" pos:end="27:36">true</name></expr>;</expr_stmt>

                    <goto pos:start="29:21" pos:end="29:30">goto <name pos:start="29:26" pos:end="29:29">done</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="33:15" pos:end="37:13">else <block pos:start="33:20" pos:end="37:13">{<block_content pos:start="35:17" pos:end="35:24">

                <expr_stmt pos:start="35:17" pos:end="35:24"><expr pos:start="35:17" pos:end="35:23"><name pos:start="35:17" pos:end="35:19">pos</name> <operator pos:start="35:21" pos:end="35:21">=</operator> <literal type="number" pos:start="35:23" pos:end="35:23">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="41:9" pos:end="41:27"><expr pos:start="41:9" pos:end="41:26"><call pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:16">g_assert</name><argument_list pos:start="41:17" pos:end="41:26">(<argument pos:start="41:18" pos:end="41:25"><expr pos:start="41:18" pos:end="41:25"><name pos:start="41:18" pos:end="41:20">nbr</name> <operator pos:start="41:22" pos:end="41:23">&gt;=</operator> <literal type="number" pos:start="41:25" pos:end="41:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:24"><expr pos:start="43:9" pos:end="43:23"><call pos:start="43:9" pos:end="43:23"><name pos:start="43:9" pos:end="43:16">g_usleep</name><argument_list pos:start="43:17" pos:end="43:23">(<argument pos:start="43:18" pos:end="43:22"><expr pos:start="43:18" pos:end="43:22"><literal type="number" pos:start="43:18" pos:end="43:22">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



<label pos:start="49:1" pos:end="49:5"><name pos:start="49:1" pos:end="49:4">done</name>:</label>

    <expr_stmt pos:start="51:5" pos:end="51:24"><expr pos:start="51:5" pos:end="51:23"><call pos:start="51:5" pos:end="51:23"><name pos:start="51:5" pos:end="51:12">g_assert</name><argument_list pos:start="51:13" pos:end="51:23">(<argument pos:start="51:14" pos:end="51:22"><expr pos:start="51:14" pos:end="51:22"><name pos:start="51:14" pos:end="51:22">output_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
