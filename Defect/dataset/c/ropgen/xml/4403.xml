<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4403.c" pos:tabs="8"><function pos:start="1:1" pos:end="165:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">async_complete</name><parameter_list pos:start="1:27" pos:end="1:40">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:33"><name pos:start="1:28" pos:end="1:31">void</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:39">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="165:1">{<block_content pos:start="5:5" pos:end="163:5">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">USBHostDevice</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:29">= <expr pos:start="5:24" pos:end="5:29"><name pos:start="5:24" pos:end="5:29">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">AsyncURB</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:18">aurb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">urbs</name> <init pos:start="9:14" pos:end="9:16">= <expr pos:start="9:16" pos:end="9:16"><literal type="number" pos:start="9:16" pos:end="9:16">0</literal></expr></init></decl>;</decl_stmt>



    <while pos:start="13:5" pos:end="163:5">while <condition pos:start="13:11" pos:end="13:13">(<expr pos:start="13:12" pos:end="13:12"><literal type="number" pos:start="13:12" pos:end="13:12">1</literal></expr>)</condition> <block pos:start="13:15" pos:end="163:5">{<block_content pos:start="15:9" pos:end="161:25">

        <decl_stmt pos:start="15:9" pos:end="15:21"><decl pos:start="15:9" pos:end="15:20"><type pos:start="15:9" pos:end="15:19"><name pos:start="15:9" pos:end="15:17">USBPacket</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:20">p</name></decl>;</decl_stmt>



        <decl_stmt pos:start="19:9" pos:end="19:60"><decl pos:start="19:9" pos:end="19:59"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:13">r</name> <init pos:start="19:15" pos:end="19:59">= <expr pos:start="19:17" pos:end="19:59"><call pos:start="19:17" pos:end="19:59"><name pos:start="19:17" pos:end="19:21">ioctl</name><argument_list pos:start="19:22" pos:end="19:59">(<argument pos:start="19:23" pos:end="19:27"><expr pos:start="19:23" pos:end="19:27"><name pos:start="19:23" pos:end="19:27"><name pos:start="19:23" pos:end="19:23">s</name><operator pos:start="19:24" pos:end="19:25">-&gt;</operator><name pos:start="19:26" pos:end="19:27">fd</name></name></expr></argument>, <argument pos:start="19:30" pos:end="19:51"><expr pos:start="19:30" pos:end="19:51"><name pos:start="19:30" pos:end="19:51">USBDEVFS_REAPURBNDELAY</name></expr></argument>, <argument pos:start="19:54" pos:end="19:58"><expr pos:start="19:54" pos:end="19:58"><operator pos:start="19:54" pos:end="19:54">&amp;</operator><name pos:start="19:55" pos:end="19:58">aurb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="21:9" pos:end="55:9"><if pos:start="21:9" pos:end="55:9">if <condition pos:start="21:12" pos:end="21:18">(<expr pos:start="21:13" pos:end="21:17"><name pos:start="21:13" pos:end="21:13">r</name> <operator pos:start="21:15" pos:end="21:15">&lt;</operator> <literal type="number" pos:start="21:17" pos:end="21:17">0</literal></expr>)</condition> <block pos:start="21:20" pos:end="55:9">{<block_content pos:start="23:13" pos:end="53:19">

            <if_stmt pos:start="23:13" pos:end="33:13"><if pos:start="23:13" pos:end="33:13">if <condition pos:start="23:16" pos:end="23:32">(<expr pos:start="23:17" pos:end="23:31"><name pos:start="23:17" pos:end="23:21">errno</name> <operator pos:start="23:23" pos:end="23:24">==</operator> <name pos:start="23:26" pos:end="23:31">EAGAIN</name></expr>)</condition> <block pos:start="23:34" pos:end="33:13">{<block_content pos:start="25:17" pos:end="31:23">

                <if_stmt pos:start="25:17" pos:end="29:17"><if pos:start="25:17" pos:end="29:17">if <condition pos:start="25:20" pos:end="25:29">(<expr pos:start="25:21" pos:end="25:28"><name pos:start="25:21" pos:end="25:24">urbs</name> <operator pos:start="25:26" pos:end="25:26">&gt;</operator> <literal type="number" pos:start="25:28" pos:end="25:28">2</literal></expr>)</condition> <block pos:start="25:31" pos:end="29:17">{<block_content pos:start="27:21" pos:end="27:82">

                    <expr_stmt pos:start="27:21" pos:end="27:82"><expr pos:start="27:21" pos:end="27:81"><call pos:start="27:21" pos:end="27:81"><name pos:start="27:21" pos:end="27:27">fprintf</name><argument_list pos:start="27:28" pos:end="27:81">(<argument pos:start="27:29" pos:end="27:34"><expr pos:start="27:29" pos:end="27:34"><name pos:start="27:29" pos:end="27:34">stderr</name></expr></argument>, <argument pos:start="27:37" pos:end="27:74"><expr pos:start="27:37" pos:end="27:74"><literal type="string" pos:start="27:37" pos:end="27:74">"husb: %d iso urbs finished at once\n"</literal></expr></argument>, <argument pos:start="27:77" pos:end="27:80"><expr pos:start="27:77" pos:end="27:80"><name pos:start="27:77" pos:end="27:80">urbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <return pos:start="31:17" pos:end="31:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="35:13" pos:end="47:13"><if pos:start="35:13" pos:end="47:13">if <condition pos:start="35:16" pos:end="35:32">(<expr pos:start="35:17" pos:end="35:31"><name pos:start="35:17" pos:end="35:21">errno</name> <operator pos:start="35:23" pos:end="35:24">==</operator> <name pos:start="35:26" pos:end="35:31">ENODEV</name></expr>)</condition> <block pos:start="35:34" pos:end="47:13">{<block_content pos:start="37:17" pos:end="45:23">

                <if_stmt pos:start="37:17" pos:end="43:17"><if pos:start="37:17" pos:end="43:17">if <condition pos:start="37:20" pos:end="37:32">(<expr pos:start="37:21" pos:end="37:31"><operator pos:start="37:21" pos:end="37:21">!</operator><name pos:start="37:22" pos:end="37:31"><name pos:start="37:22" pos:end="37:22">s</name><operator pos:start="37:23" pos:end="37:24">-&gt;</operator><name pos:start="37:25" pos:end="37:31">closing</name></name></expr>)</condition> <block pos:start="37:34" pos:end="43:17">{<block_content pos:start="39:21" pos:end="41:37">

                    <expr_stmt pos:start="39:21" pos:end="39:67"><expr pos:start="39:21" pos:end="39:66"><call pos:start="39:21" pos:end="39:66"><name pos:start="39:21" pos:end="39:45">trace_usb_host_disconnect</name><argument_list pos:start="39:46" pos:end="39:66">(<argument pos:start="39:47" pos:end="39:56"><expr pos:start="39:47" pos:end="39:56"><name pos:start="39:47" pos:end="39:56"><name pos:start="39:47" pos:end="39:47">s</name><operator pos:start="39:48" pos:end="39:49">-&gt;</operator><name pos:start="39:50" pos:end="39:56">bus_num</name></name></expr></argument>, <argument pos:start="39:59" pos:end="39:65"><expr pos:start="39:59" pos:end="39:65"><name pos:start="39:59" pos:end="39:65"><name pos:start="39:59" pos:end="39:59">s</name><operator pos:start="39:60" pos:end="39:61">-&gt;</operator><name pos:start="39:62" pos:end="39:65">addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="41:21" pos:end="41:37"><expr pos:start="41:21" pos:end="41:36"><call pos:start="41:21" pos:end="41:36"><name pos:start="41:21" pos:end="41:33">do_disconnect</name><argument_list pos:start="41:34" pos:end="41:36">(<argument pos:start="41:35" pos:end="41:35"><expr pos:start="41:35" pos:end="41:35"><name pos:start="41:35" pos:end="41:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <return pos:start="45:17" pos:end="45:23">return;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="51:13" pos:end="51:45"><expr pos:start="51:13" pos:end="51:44"><call pos:start="51:13" pos:end="51:44"><name pos:start="51:13" pos:end="51:18">perror</name><argument_list pos:start="51:19" pos:end="51:44">(<argument pos:start="51:20" pos:end="51:43"><expr pos:start="51:20" pos:end="51:43"><literal type="string" pos:start="51:20" pos:end="51:43">"USBDEVFS_REAPURBNDELAY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="59:9" pos:end="61:65"><expr pos:start="59:9" pos:end="61:64"><call pos:start="59:9" pos:end="61:64"><name pos:start="59:9" pos:end="59:15">DPRINTF</name><argument_list pos:start="59:16" pos:end="61:64">(<argument pos:start="59:17" pos:end="59:68"><expr pos:start="59:17" pos:end="59:68"><literal type="string" pos:start="59:17" pos:end="59:68">"husb: async completed. aurb %p status %d alen %d\n"</literal></expr></argument>,

                <argument pos:start="61:17" pos:end="61:20"><expr pos:start="61:17" pos:end="61:20"><name pos:start="61:17" pos:end="61:20">aurb</name></expr></argument>, <argument pos:start="61:23" pos:end="61:38"><expr pos:start="61:23" pos:end="61:38"><name pos:start="61:23" pos:end="61:38"><name pos:start="61:23" pos:end="61:26">aurb</name><operator pos:start="61:27" pos:end="61:28">-&gt;</operator><name pos:start="61:29" pos:end="61:31">urb</name><operator pos:start="61:32" pos:end="61:32">.</operator><name pos:start="61:33" pos:end="61:38">status</name></name></expr></argument>, <argument pos:start="61:41" pos:end="61:63"><expr pos:start="61:41" pos:end="61:63"><name pos:start="61:41" pos:end="61:63"><name pos:start="61:41" pos:end="61:44">aurb</name><operator pos:start="61:45" pos:end="61:46">-&gt;</operator><name pos:start="61:47" pos:end="61:49">urb</name><operator pos:start="61:50" pos:end="61:50">.</operator><name pos:start="61:51" pos:end="61:63">actual_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="65:9" pos:end="67:79">/* If this is a buffered iso urb mark it as complete and don't do

           anything else (it is handled further in usb_host_handle_iso_data) */</comment>

        <if_stmt pos:start="69:9" pos:end="99:9"><if pos:start="69:9" pos:end="99:9">if <condition pos:start="69:12" pos:end="69:38">(<expr pos:start="69:13" pos:end="69:37"><name pos:start="69:13" pos:end="69:31"><name pos:start="69:13" pos:end="69:16">aurb</name><operator pos:start="69:17" pos:end="69:18">-&gt;</operator><name pos:start="69:19" pos:end="69:31">iso_frame_idx</name></name> <operator pos:start="69:33" pos:end="69:34">==</operator> <operator pos:start="69:36" pos:end="69:36">-</operator><literal type="number" pos:start="69:37" pos:end="69:37">1</literal></expr>)</condition> <block pos:start="69:40" pos:end="99:9">{<block_content pos:start="71:13" pos:end="97:21">

            <decl_stmt pos:start="71:13" pos:end="71:25"><decl pos:start="71:13" pos:end="71:24"><type pos:start="71:13" pos:end="71:15"><name pos:start="71:13" pos:end="71:15">int</name></type> <name pos:start="71:17" pos:end="71:24">inflight</name></decl>;</decl_stmt>

            <decl_stmt pos:start="73:13" pos:end="75:45"><decl pos:start="73:13" pos:end="75:44"><type pos:start="73:13" pos:end="73:15"><name pos:start="73:13" pos:end="73:15">int</name></type> <name pos:start="73:17" pos:end="73:19">pid</name> <init pos:start="73:21" pos:end="75:44">= <expr pos:start="73:23" pos:end="75:44"><ternary pos:start="73:23" pos:end="75:44"><condition pos:start="73:23" pos:end="73:57"><expr pos:start="73:23" pos:end="73:55"><operator pos:start="73:23" pos:end="73:23">(</operator><name pos:start="73:24" pos:end="73:41"><name pos:start="73:24" pos:end="73:27">aurb</name><operator pos:start="73:28" pos:end="73:29">-&gt;</operator><name pos:start="73:30" pos:end="73:32">urb</name><operator pos:start="73:33" pos:end="73:33">.</operator><name pos:start="73:34" pos:end="73:41">endpoint</name></name> <operator pos:start="73:43" pos:end="73:43">&amp;</operator> <name pos:start="73:45" pos:end="73:54">USB_DIR_IN</name><operator pos:start="73:55" pos:end="73:55">)</operator></expr> ?</condition><then pos:start="75:17" pos:end="75:28">

                <expr pos:start="75:17" pos:end="75:28"><name pos:start="75:17" pos:end="75:28">USB_TOKEN_IN</name></expr> </then><else pos:start="75:30" pos:end="75:44">: <expr pos:start="75:32" pos:end="75:44"><name pos:start="75:32" pos:end="75:44">USB_TOKEN_OUT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="77:13" pos:end="77:46"><decl pos:start="77:13" pos:end="77:45"><type pos:start="77:13" pos:end="77:15"><name pos:start="77:13" pos:end="77:15">int</name></type> <name pos:start="77:17" pos:end="77:18">ep</name> <init pos:start="77:20" pos:end="77:45">= <expr pos:start="77:22" pos:end="77:45"><name pos:start="77:22" pos:end="77:39"><name pos:start="77:22" pos:end="77:25">aurb</name><operator pos:start="77:26" pos:end="77:27">-&gt;</operator><name pos:start="77:28" pos:end="77:30">urb</name><operator pos:start="77:31" pos:end="77:31">.</operator><name pos:start="77:32" pos:end="77:39">endpoint</name></name> <operator pos:start="77:41" pos:end="77:41">&amp;</operator> <literal type="number" pos:start="77:43" pos:end="77:45">0xf</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="79:13" pos:end="83:13"><if pos:start="79:13" pos:end="83:13">if <condition pos:start="79:16" pos:end="79:43">(<expr pos:start="79:17" pos:end="79:42"><name pos:start="79:17" pos:end="79:32"><name pos:start="79:17" pos:end="79:20">aurb</name><operator pos:start="79:21" pos:end="79:22">-&gt;</operator><name pos:start="79:23" pos:end="79:25">urb</name><operator pos:start="79:26" pos:end="79:26">.</operator><name pos:start="79:27" pos:end="79:32">status</name></name> <operator pos:start="79:34" pos:end="79:35">==</operator> <operator pos:start="79:37" pos:end="79:37">-</operator><name pos:start="79:38" pos:end="79:42">EPIPE</name></expr>)</condition> <block pos:start="79:45" pos:end="83:13">{<block_content pos:start="81:17" pos:end="81:37">

                <expr_stmt pos:start="81:17" pos:end="81:37"><expr pos:start="81:17" pos:end="81:36"><call pos:start="81:17" pos:end="81:36"><name pos:start="81:17" pos:end="81:24">set_halt</name><argument_list pos:start="81:25" pos:end="81:36">(<argument pos:start="81:26" pos:end="81:26"><expr pos:start="81:26" pos:end="81:26"><name pos:start="81:26" pos:end="81:26">s</name></expr></argument>, <argument pos:start="81:29" pos:end="81:31"><expr pos:start="81:29" pos:end="81:31"><name pos:start="81:29" pos:end="81:31">pid</name></expr></argument>, <argument pos:start="81:34" pos:end="81:35"><expr pos:start="81:34" pos:end="81:35"><name pos:start="81:34" pos:end="81:35">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:36"><expr pos:start="85:13" pos:end="85:35"><name pos:start="85:13" pos:end="85:31"><name pos:start="85:13" pos:end="85:16">aurb</name><operator pos:start="85:17" pos:end="85:18">-&gt;</operator><name pos:start="85:19" pos:end="85:31">iso_frame_idx</name></name> <operator pos:start="85:33" pos:end="85:33">=</operator> <literal type="number" pos:start="85:35" pos:end="85:35">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:19"><expr pos:start="87:13" pos:end="87:18"><name pos:start="87:13" pos:end="87:16">urbs</name><operator pos:start="87:17" pos:end="87:18">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:59"><expr pos:start="89:13" pos:end="89:58"><name pos:start="89:13" pos:end="89:20">inflight</name> <operator pos:start="89:22" pos:end="89:22">=</operator> <call pos:start="89:24" pos:end="89:58"><name pos:start="89:24" pos:end="89:42">change_iso_inflight</name><argument_list pos:start="89:43" pos:end="89:58">(<argument pos:start="89:44" pos:end="89:44"><expr pos:start="89:44" pos:end="89:44"><name pos:start="89:44" pos:end="89:44">s</name></expr></argument>, <argument pos:start="89:47" pos:end="89:49"><expr pos:start="89:47" pos:end="89:49"><name pos:start="89:47" pos:end="89:49">pid</name></expr></argument>, <argument pos:start="89:52" pos:end="89:53"><expr pos:start="89:52" pos:end="89:53"><name pos:start="89:52" pos:end="89:53">ep</name></expr></argument>, <argument pos:start="89:56" pos:end="89:57"><expr pos:start="89:56" pos:end="89:57"><operator pos:start="89:56" pos:end="89:56">-</operator><literal type="number" pos:start="89:57" pos:end="89:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="91:13" pos:end="95:13"><if pos:start="91:13" pos:end="95:13">if <condition pos:start="91:16" pos:end="91:60">(<expr pos:start="91:17" pos:end="91:59"><name pos:start="91:17" pos:end="91:24">inflight</name> <operator pos:start="91:26" pos:end="91:27">==</operator> <literal type="number" pos:start="91:29" pos:end="91:29">0</literal> <operator pos:start="91:31" pos:end="91:32">&amp;&amp;</operator> <call pos:start="91:34" pos:end="91:59"><name pos:start="91:34" pos:end="91:47">is_iso_started</name><argument_list pos:start="91:48" pos:end="91:59">(<argument pos:start="91:49" pos:end="91:49"><expr pos:start="91:49" pos:end="91:49"><name pos:start="91:49" pos:end="91:49">s</name></expr></argument>, <argument pos:start="91:52" pos:end="91:54"><expr pos:start="91:52" pos:end="91:54"><name pos:start="91:52" pos:end="91:54">pid</name></expr></argument>, <argument pos:start="91:57" pos:end="91:58"><expr pos:start="91:57" pos:end="91:58"><name pos:start="91:57" pos:end="91:58">ep</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:62" pos:end="95:13">{<block_content pos:start="93:17" pos:end="93:73">

                <expr_stmt pos:start="93:17" pos:end="93:73"><expr pos:start="93:17" pos:end="93:72"><call pos:start="93:17" pos:end="93:72"><name pos:start="93:17" pos:end="93:23">fprintf</name><argument_list pos:start="93:24" pos:end="93:72">(<argument pos:start="93:25" pos:end="93:30"><expr pos:start="93:25" pos:end="93:30"><name pos:start="93:25" pos:end="93:30">stderr</name></expr></argument>, <argument pos:start="93:33" pos:end="93:71"><expr pos:start="93:33" pos:end="93:71"><literal type="string" pos:start="93:33" pos:end="93:71">"husb: out of buffers for iso stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <continue pos:start="97:13" pos:end="97:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="103:9" pos:end="103:25"><expr pos:start="103:9" pos:end="103:24"><name pos:start="103:9" pos:end="103:9">p</name> <operator pos:start="103:11" pos:end="103:11">=</operator> <name pos:start="103:13" pos:end="103:24"><name pos:start="103:13" pos:end="103:16">aurb</name><operator pos:start="103:17" pos:end="103:18">-&gt;</operator><name pos:start="103:19" pos:end="103:24">packet</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="107:73"><expr pos:start="105:9" pos:end="107:72"><call pos:start="105:9" pos:end="107:72"><name pos:start="105:9" pos:end="105:35">trace_usb_host_urb_complete</name><argument_list pos:start="105:36" pos:end="107:72">(<argument pos:start="105:37" pos:end="105:46"><expr pos:start="105:37" pos:end="105:46"><name pos:start="105:37" pos:end="105:46"><name pos:start="105:37" pos:end="105:37">s</name><operator pos:start="105:38" pos:end="105:39">-&gt;</operator><name pos:start="105:40" pos:end="105:46">bus_num</name></name></expr></argument>, <argument pos:start="105:49" pos:end="105:55"><expr pos:start="105:49" pos:end="105:55"><name pos:start="105:49" pos:end="105:55"><name pos:start="105:49" pos:end="105:49">s</name><operator pos:start="105:50" pos:end="105:51">-&gt;</operator><name pos:start="105:52" pos:end="105:55">addr</name></name></expr></argument>, <argument pos:start="105:58" pos:end="105:61"><expr pos:start="105:58" pos:end="105:61"><name pos:start="105:58" pos:end="105:61">aurb</name></expr></argument>, <argument pos:start="105:64" pos:end="105:79"><expr pos:start="105:64" pos:end="105:79"><name pos:start="105:64" pos:end="105:79"><name pos:start="105:64" pos:end="105:67">aurb</name><operator pos:start="105:68" pos:end="105:69">-&gt;</operator><name pos:start="105:70" pos:end="105:72">urb</name><operator pos:start="105:73" pos:end="105:73">.</operator><name pos:start="105:74" pos:end="105:79">status</name></name></expr></argument>,

                                    <argument pos:start="107:37" pos:end="107:59"><expr pos:start="107:37" pos:end="107:59"><name pos:start="107:37" pos:end="107:59"><name pos:start="107:37" pos:end="107:40">aurb</name><operator pos:start="107:41" pos:end="107:42">-&gt;</operator><name pos:start="107:43" pos:end="107:45">urb</name><operator pos:start="107:46" pos:end="107:46">.</operator><name pos:start="107:47" pos:end="107:59">actual_length</name></name></expr></argument>, <argument pos:start="107:62" pos:end="107:71"><expr pos:start="107:62" pos:end="107:71"><name pos:start="107:62" pos:end="107:71"><name pos:start="107:62" pos:end="107:65">aurb</name><operator pos:start="107:66" pos:end="107:67">-&gt;</operator><name pos:start="107:68" pos:end="107:71">more</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="111:9" pos:end="157:9"><if pos:start="111:9" pos:end="157:9">if <condition pos:start="111:12" pos:end="111:14">(<expr pos:start="111:13" pos:end="111:13"><name pos:start="111:13" pos:end="111:13">p</name></expr>)</condition> <block pos:start="111:16" pos:end="157:9">{<block_content pos:start="113:13" pos:end="155:13">

            <switch pos:start="113:13" pos:end="139:13">switch <condition pos:start="113:20" pos:end="113:37">(<expr pos:start="113:21" pos:end="113:36"><name pos:start="113:21" pos:end="113:36"><name pos:start="113:21" pos:end="113:24">aurb</name><operator pos:start="113:25" pos:end="113:26">-&gt;</operator><name pos:start="113:27" pos:end="113:29">urb</name><operator pos:start="113:30" pos:end="113:30">.</operator><name pos:start="113:31" pos:end="113:36">status</name></name></expr>)</condition> <block pos:start="113:39" pos:end="139:13">{<block_content pos:start="115:13" pos:end="137:22">

            <case pos:start="115:13" pos:end="115:19">case <expr pos:start="115:18" pos:end="115:18"><literal type="number" pos:start="115:18" pos:end="115:18">0</literal></expr>:</case>

                <expr_stmt pos:start="117:17" pos:end="117:53"><expr pos:start="117:17" pos:end="117:52"><name pos:start="117:17" pos:end="117:25"><name pos:start="117:17" pos:end="117:17">p</name><operator pos:start="117:18" pos:end="117:19">-&gt;</operator><name pos:start="117:20" pos:end="117:25">result</name></name> <operator pos:start="117:27" pos:end="117:28">+=</operator> <name pos:start="117:30" pos:end="117:52"><name pos:start="117:30" pos:end="117:33">aurb</name><operator pos:start="117:34" pos:end="117:35">-&gt;</operator><name pos:start="117:36" pos:end="117:38">urb</name><operator pos:start="117:39" pos:end="117:39">.</operator><name pos:start="117:40" pos:end="117:52">actual_length</name></name></expr>;</expr_stmt>

                <break pos:start="119:17" pos:end="119:22">break;</break>



            <case pos:start="123:13" pos:end="123:24">case <expr pos:start="123:18" pos:end="123:23"><operator pos:start="123:18" pos:end="123:18">-</operator><name pos:start="123:19" pos:end="123:23">EPIPE</name></expr>:</case>

                <expr_stmt pos:start="125:17" pos:end="125:46"><expr pos:start="125:17" pos:end="125:45"><call pos:start="125:17" pos:end="125:45"><name pos:start="125:17" pos:end="125:24">set_halt</name><argument_list pos:start="125:25" pos:end="125:45">(<argument pos:start="125:26" pos:end="125:26"><expr pos:start="125:26" pos:end="125:26"><name pos:start="125:26" pos:end="125:26">s</name></expr></argument>, <argument pos:start="125:29" pos:end="125:34"><expr pos:start="125:29" pos:end="125:34"><name pos:start="125:29" pos:end="125:34"><name pos:start="125:29" pos:end="125:29">p</name><operator pos:start="125:30" pos:end="125:31">-&gt;</operator><name pos:start="125:32" pos:end="125:34">pid</name></name></expr></argument>, <argument pos:start="125:37" pos:end="125:44"><expr pos:start="125:37" pos:end="125:44"><name pos:start="125:37" pos:end="125:44"><name pos:start="125:37" pos:end="125:37">p</name><operator pos:start="125:38" pos:end="125:39">-&gt;</operator><name pos:start="125:40" pos:end="125:44">devep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:42"><expr pos:start="127:17" pos:end="127:41"><name pos:start="127:17" pos:end="127:25"><name pos:start="127:17" pos:end="127:17">p</name><operator pos:start="127:18" pos:end="127:19">-&gt;</operator><name pos:start="127:20" pos:end="127:25">result</name></name> <operator pos:start="127:27" pos:end="127:27">=</operator> <name pos:start="127:29" pos:end="127:41">USB_RET_STALL</name></expr>;</expr_stmt>

                <break pos:start="129:17" pos:end="129:22">break;</break>



            <default pos:start="133:13" pos:end="133:20">default:</default>

                <expr_stmt pos:start="135:17" pos:end="135:40"><expr pos:start="135:17" pos:end="135:39"><name pos:start="135:17" pos:end="135:25"><name pos:start="135:17" pos:end="135:17">p</name><operator pos:start="135:18" pos:end="135:19">-&gt;</operator><name pos:start="135:20" pos:end="135:25">result</name></name> <operator pos:start="135:27" pos:end="135:27">=</operator> <name pos:start="135:29" pos:end="135:39">USB_RET_NAK</name></expr>;</expr_stmt>

                <break pos:start="137:17" pos:end="137:22">break;</break>

            </block_content>}</block></switch>



            <if_stmt pos:start="143:13" pos:end="155:13"><if pos:start="143:13" pos:end="149:13">if <condition pos:start="143:16" pos:end="143:60">(<expr pos:start="143:17" pos:end="143:59"><name pos:start="143:17" pos:end="143:30"><name pos:start="143:17" pos:end="143:20">aurb</name><operator pos:start="143:21" pos:end="143:22">-&gt;</operator><name pos:start="143:23" pos:end="143:25">urb</name><operator pos:start="143:26" pos:end="143:26">.</operator><name pos:start="143:27" pos:end="143:30">type</name></name> <operator pos:start="143:32" pos:end="143:33">==</operator> <name pos:start="143:35" pos:end="143:59">USBDEVFS_URB_TYPE_CONTROL</name></expr>)</condition> <block pos:start="143:62" pos:end="149:13">{<block_content pos:start="145:17" pos:end="147:60">

                <expr_stmt pos:start="145:17" pos:end="145:76"><expr pos:start="145:17" pos:end="145:75"><call pos:start="145:17" pos:end="145:75"><name pos:start="145:17" pos:end="145:43">trace_usb_host_req_complete</name><argument_list pos:start="145:44" pos:end="145:75">(<argument pos:start="145:45" pos:end="145:54"><expr pos:start="145:45" pos:end="145:54"><name pos:start="145:45" pos:end="145:54"><name pos:start="145:45" pos:end="145:45">s</name><operator pos:start="145:46" pos:end="145:47">-&gt;</operator><name pos:start="145:48" pos:end="145:54">bus_num</name></name></expr></argument>, <argument pos:start="145:57" pos:end="145:63"><expr pos:start="145:57" pos:end="145:63"><name pos:start="145:57" pos:end="145:63"><name pos:start="145:57" pos:end="145:57">s</name><operator pos:start="145:58" pos:end="145:59">-&gt;</operator><name pos:start="145:60" pos:end="145:63">addr</name></name></expr></argument>, <argument pos:start="145:66" pos:end="145:74"><expr pos:start="145:66" pos:end="145:74"><name pos:start="145:66" pos:end="145:74"><name pos:start="145:66" pos:end="145:66">p</name><operator pos:start="145:67" pos:end="145:68">-&gt;</operator><name pos:start="145:69" pos:end="145:74">result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="147:17" pos:end="147:60"><expr pos:start="147:17" pos:end="147:59"><call pos:start="147:17" pos:end="147:59"><name pos:start="147:17" pos:end="147:47">usb_generic_async_ctrl_complete</name><argument_list pos:start="147:48" pos:end="147:59">(<argument pos:start="147:49" pos:end="147:55"><expr pos:start="147:49" pos:end="147:55"><operator pos:start="147:49" pos:end="147:49">&amp;</operator><name pos:start="147:50" pos:end="147:55"><name pos:start="147:50" pos:end="147:50">s</name><operator pos:start="147:51" pos:end="147:52">-&gt;</operator><name pos:start="147:53" pos:end="147:55">dev</name></name></expr></argument>, <argument pos:start="147:58" pos:end="147:58"><expr pos:start="147:58" pos:end="147:58"><name pos:start="147:58" pos:end="147:58">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="149:15" pos:end="155:13">else if <condition pos:start="149:23" pos:end="149:35">(<expr pos:start="149:24" pos:end="149:34"><operator pos:start="149:24" pos:end="149:24">!</operator><name pos:start="149:25" pos:end="149:34"><name pos:start="149:25" pos:end="149:28">aurb</name><operator pos:start="149:29" pos:end="149:30">-&gt;</operator><name pos:start="149:31" pos:end="149:34">more</name></name></expr>)</condition> <block pos:start="149:37" pos:end="155:13">{<block_content pos:start="151:17" pos:end="153:48">

                <expr_stmt pos:start="151:17" pos:end="151:76"><expr pos:start="151:17" pos:end="151:75"><call pos:start="151:17" pos:end="151:75"><name pos:start="151:17" pos:end="151:43">trace_usb_host_req_complete</name><argument_list pos:start="151:44" pos:end="151:75">(<argument pos:start="151:45" pos:end="151:54"><expr pos:start="151:45" pos:end="151:54"><name pos:start="151:45" pos:end="151:54"><name pos:start="151:45" pos:end="151:45">s</name><operator pos:start="151:46" pos:end="151:47">-&gt;</operator><name pos:start="151:48" pos:end="151:54">bus_num</name></name></expr></argument>, <argument pos:start="151:57" pos:end="151:63"><expr pos:start="151:57" pos:end="151:63"><name pos:start="151:57" pos:end="151:63"><name pos:start="151:57" pos:end="151:57">s</name><operator pos:start="151:58" pos:end="151:59">-&gt;</operator><name pos:start="151:60" pos:end="151:63">addr</name></name></expr></argument>, <argument pos:start="151:66" pos:end="151:74"><expr pos:start="151:66" pos:end="151:74"><name pos:start="151:66" pos:end="151:74"><name pos:start="151:66" pos:end="151:66">p</name><operator pos:start="151:67" pos:end="151:68">-&gt;</operator><name pos:start="151:69" pos:end="151:74">result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="153:17" pos:end="153:48"><expr pos:start="153:17" pos:end="153:47"><call pos:start="153:17" pos:end="153:47"><name pos:start="153:17" pos:end="153:35">usb_packet_complete</name><argument_list pos:start="153:36" pos:end="153:47">(<argument pos:start="153:37" pos:end="153:43"><expr pos:start="153:37" pos:end="153:43"><operator pos:start="153:37" pos:end="153:37">&amp;</operator><name pos:start="153:38" pos:end="153:43"><name pos:start="153:38" pos:end="153:38">s</name><operator pos:start="153:39" pos:end="153:40">-&gt;</operator><name pos:start="153:41" pos:end="153:43">dev</name></name></expr></argument>, <argument pos:start="153:46" pos:end="153:46"><expr pos:start="153:46" pos:end="153:46"><name pos:start="153:46" pos:end="153:46">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="161:9" pos:end="161:25"><expr pos:start="161:9" pos:end="161:24"><call pos:start="161:9" pos:end="161:24"><name pos:start="161:9" pos:end="161:18">async_free</name><argument_list pos:start="161:19" pos:end="161:24">(<argument pos:start="161:20" pos:end="161:23"><expr pos:start="161:20" pos:end="161:23"><name pos:start="161:20" pos:end="161:23">aurb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
