<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10096.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:55"><name pos:start="1:1" pos:end="1:22">matroska_parse_cluster</name> <argument_list pos:start="1:24" pos:end="1:55">(<argument pos:start="1:25" pos:end="1:54">MatroskaDemuxContext *matroska</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="127:1">{<block_content pos:start="5:5" pos:end="125:15">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">res</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:15">id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:25">cluster_time</name> <init pos:start="9:27" pos:end="9:29">= <expr pos:start="9:29" pos:end="9:29"><literal type="number" pos:start="9:29" pos:end="9:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:17">data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:15">pos</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:13"><decl pos:start="15:5" pos:end="15:12"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">size</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="21:76"><expr pos:start="19:5" pos:end="21:75"><call pos:start="19:5" pos:end="21:75"><name pos:start="19:5" pos:end="19:10">av_log</name><argument_list pos:start="19:11" pos:end="21:75">(<argument pos:start="19:12" pos:end="19:24"><expr pos:start="19:12" pos:end="19:24"><name pos:start="19:12" pos:end="19:24"><name pos:start="19:12" pos:end="19:19">matroska</name><operator pos:start="19:20" pos:end="19:21">-&gt;</operator><name pos:start="19:22" pos:end="19:24">ctx</name></name></expr></argument>, <argument pos:start="19:27" pos:end="19:38"><expr pos:start="19:27" pos:end="19:38"><name pos:start="19:27" pos:end="19:38">AV_LOG_DEBUG</name></expr></argument>,

           <argument pos:start="21:12" pos:end="21:43"><expr pos:start="21:12" pos:end="21:43"><literal type="string" pos:start="21:12" pos:end="21:33">"parsing cluster at %"</literal><name pos:start="21:34" pos:end="21:39">PRId64</name><literal type="string" pos:start="21:40" pos:end="21:43">"\n"</literal></expr></argument>, <argument pos:start="21:46" pos:end="21:74"><expr pos:start="21:46" pos:end="21:74"><call pos:start="21:46" pos:end="21:74"><name pos:start="21:46" pos:end="21:54">url_ftell</name><argument_list pos:start="21:55" pos:end="21:74">(<argument pos:start="21:56" pos:end="21:73"><expr pos:start="21:56" pos:end="21:73"><operator pos:start="21:56" pos:end="21:56">&amp;</operator><name pos:start="21:57" pos:end="21:73"><name pos:start="21:57" pos:end="21:64">matroska</name><operator pos:start="21:65" pos:end="21:66">-&gt;</operator><name pos:start="21:67" pos:end="21:69">ctx</name><operator pos:start="21:70" pos:end="21:71">-&gt;</operator><name pos:start="21:72" pos:end="21:73">pb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="25:5" pos:end="121:5">while <condition pos:start="25:11" pos:end="25:20">(<expr pos:start="25:12" pos:end="25:19"><name pos:start="25:12" pos:end="25:14">res</name> <operator pos:start="25:16" pos:end="25:17">==</operator> <literal type="number" pos:start="25:19" pos:end="25:19">0</literal></expr>)</condition> <block pos:start="25:22" pos:end="121:5">{<block_content pos:start="27:9" pos:end="119:9">

        <if_stmt pos:start="27:9" pos:end="39:9"><if pos:start="27:9" pos:end="33:9">if <condition pos:start="27:12" pos:end="27:64">(<expr pos:start="27:13" pos:end="27:63"><operator pos:start="27:13" pos:end="27:13">!</operator><operator pos:start="27:14" pos:end="27:14">(</operator><name pos:start="27:15" pos:end="27:16">id</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <call pos:start="27:20" pos:end="27:62"><name pos:start="27:20" pos:end="27:31">ebml_peek_id</name><argument_list pos:start="27:32" pos:end="27:62">(<argument pos:start="27:33" pos:end="27:40"><expr pos:start="27:33" pos:end="27:40"><name pos:start="27:33" pos:end="27:40">matroska</name></expr></argument>, <argument pos:start="27:43" pos:end="27:61"><expr pos:start="27:43" pos:end="27:61"><operator pos:start="27:43" pos:end="27:43">&amp;</operator><name pos:start="27:44" pos:end="27:61"><name pos:start="27:44" pos:end="27:51">matroska</name><operator pos:start="27:52" pos:end="27:53">-&gt;</operator><name pos:start="27:54" pos:end="27:61">level_up</name></name></expr></argument>)</argument_list></call><operator pos:start="27:63" pos:end="27:63">)</operator></expr>)</condition> <block pos:start="27:66" pos:end="33:9">{<block_content pos:start="29:13" pos:end="31:18">

            <expr_stmt pos:start="29:13" pos:end="29:29"><expr pos:start="29:13" pos:end="29:28"><name pos:start="29:13" pos:end="29:15">res</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <name pos:start="29:19" pos:end="29:28">AVERROR_IO</name></expr>;</expr_stmt>

            <break pos:start="31:13" pos:end="31:18">break;</break>

        </block_content>}</block></if> <if type="elseif" pos:start="33:11" pos:end="39:9">else if <condition pos:start="33:19" pos:end="33:38">(<expr pos:start="33:20" pos:end="33:37"><name pos:start="33:20" pos:end="33:37"><name pos:start="33:20" pos:end="33:27">matroska</name><operator pos:start="33:28" pos:end="33:29">-&gt;</operator><name pos:start="33:30" pos:end="33:37">level_up</name></name></expr>)</condition> <block pos:start="33:40" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:18">

            <expr_stmt pos:start="35:13" pos:end="35:33"><expr pos:start="35:13" pos:end="35:32"><name pos:start="35:13" pos:end="35:30"><name pos:start="35:13" pos:end="35:20">matroska</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:30">level_up</name></name><operator pos:start="35:31" pos:end="35:32">--</operator></expr>;</expr_stmt>

            <break pos:start="37:13" pos:end="37:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="43:9" pos:end="109:9">switch <condition pos:start="43:16" pos:end="43:19">(<expr pos:start="43:17" pos:end="43:18"><name pos:start="43:17" pos:end="43:18">id</name></expr>)</condition> <block pos:start="43:21" pos:end="109:9">{<block_content pos:start="47:13" pos:end="107:22">

            <comment type="block" pos:start="45:13" pos:end="45:34">/* cluster timecode */</comment>

            <case pos:start="47:13" pos:end="47:45">case <expr pos:start="47:18" pos:end="47:44"><name pos:start="47:18" pos:end="47:44">MATROSKA_ID_CLUSTERTIMECODE</name></expr>:</case> <block pos:start="47:47" pos:end="59:13">{<block_content pos:start="49:17" pos:end="57:22">

                <decl_stmt pos:start="49:17" pos:end="49:29"><decl pos:start="49:17" pos:end="49:28"><type pos:start="49:17" pos:end="49:24"><name pos:start="49:17" pos:end="49:24">uint64_t</name></type> <name pos:start="49:26" pos:end="49:28">num</name></decl>;</decl_stmt>

                <if_stmt pos:start="51:17" pos:end="53:26"><if pos:start="51:17" pos:end="53:26">if <condition pos:start="51:20" pos:end="51:68">(<expr pos:start="51:21" pos:end="51:67"><operator pos:start="51:21" pos:end="51:21">(</operator><name pos:start="51:22" pos:end="51:24">res</name> <operator pos:start="51:26" pos:end="51:26">=</operator> <call pos:start="51:28" pos:end="51:62"><name pos:start="51:28" pos:end="51:41">ebml_read_uint</name><argument_list pos:start="51:42" pos:end="51:62">(<argument pos:start="51:43" pos:end="51:50"><expr pos:start="51:43" pos:end="51:50"><name pos:start="51:43" pos:end="51:50">matroska</name></expr></argument>, <argument pos:start="51:53" pos:end="51:55"><expr pos:start="51:53" pos:end="51:55"><operator pos:start="51:53" pos:end="51:53">&amp;</operator><name pos:start="51:54" pos:end="51:55">id</name></expr></argument>, <argument pos:start="51:58" pos:end="51:61"><expr pos:start="51:58" pos:end="51:61"><operator pos:start="51:58" pos:end="51:58">&amp;</operator><name pos:start="51:59" pos:end="51:61">num</name></expr></argument>)</argument_list></call><operator pos:start="51:63" pos:end="51:63">)</operator> <operator pos:start="51:65" pos:end="51:65">&lt;</operator> <literal type="number" pos:start="51:67" pos:end="51:67">0</literal></expr>)</condition><block type="pseudo" pos:start="53:21" pos:end="53:26"><block_content pos:start="53:21" pos:end="53:26">

                    <break pos:start="53:21" pos:end="53:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:35"><expr pos:start="55:17" pos:end="55:34"><name pos:start="55:17" pos:end="55:28">cluster_time</name> <operator pos:start="55:30" pos:end="55:30">=</operator> <name pos:start="55:32" pos:end="55:34">num</name></expr>;</expr_stmt>

                <break pos:start="57:17" pos:end="57:22">break;</break>

            </block_content>}</block>



                <comment type="block" pos:start="63:17" pos:end="63:56">/* a group of blocks inside a cluster */</comment>

            <case pos:start="65:13" pos:end="65:40">case <expr pos:start="65:18" pos:end="65:39"><name pos:start="65:18" pos:end="65:39">MATROSKA_ID_BLOCKGROUP</name></expr>:</case>

                <if_stmt pos:start="67:17" pos:end="69:26"><if pos:start="67:17" pos:end="69:26">if <condition pos:start="67:20" pos:end="67:64">(<expr pos:start="67:21" pos:end="67:63"><operator pos:start="67:21" pos:end="67:21">(</operator><name pos:start="67:22" pos:end="67:24">res</name> <operator pos:start="67:26" pos:end="67:26">=</operator> <call pos:start="67:28" pos:end="67:58"><name pos:start="67:28" pos:end="67:43">ebml_read_master</name><argument_list pos:start="67:44" pos:end="67:58">(<argument pos:start="67:45" pos:end="67:52"><expr pos:start="67:45" pos:end="67:52"><name pos:start="67:45" pos:end="67:52">matroska</name></expr></argument>, <argument pos:start="67:55" pos:end="67:57"><expr pos:start="67:55" pos:end="67:57"><operator pos:start="67:55" pos:end="67:55">&amp;</operator><name pos:start="67:56" pos:end="67:57">id</name></expr></argument>)</argument_list></call><operator pos:start="67:59" pos:end="67:59">)</operator> <operator pos:start="67:61" pos:end="67:61">&lt;</operator> <literal type="number" pos:start="67:63" pos:end="67:63">0</literal></expr>)</condition><block type="pseudo" pos:start="69:21" pos:end="69:26"><block_content pos:start="69:21" pos:end="69:26">

                    <break pos:start="69:21" pos:end="69:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:72"><expr pos:start="71:17" pos:end="71:71"><name pos:start="71:17" pos:end="71:19">res</name> <operator pos:start="71:21" pos:end="71:21">=</operator> <call pos:start="71:23" pos:end="71:71"><name pos:start="71:23" pos:end="71:47">matroska_parse_blockgroup</name><argument_list pos:start="71:48" pos:end="71:71">(<argument pos:start="71:49" pos:end="71:56"><expr pos:start="71:49" pos:end="71:56"><name pos:start="71:49" pos:end="71:56">matroska</name></expr></argument>, <argument pos:start="71:59" pos:end="71:70"><expr pos:start="71:59" pos:end="71:70"><name pos:start="71:59" pos:end="71:70">cluster_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="73:17" pos:end="73:22">break;</break>



            <case pos:start="77:13" pos:end="77:41">case <expr pos:start="77:18" pos:end="77:40"><name pos:start="77:18" pos:end="77:40">MATROSKA_ID_SIMPLEBLOCK</name></expr>:</case>

                <expr_stmt pos:start="79:17" pos:end="79:52"><expr pos:start="79:17" pos:end="79:51"><name pos:start="79:17" pos:end="79:19">pos</name> <operator pos:start="79:21" pos:end="79:21">=</operator> <call pos:start="79:23" pos:end="79:51"><name pos:start="79:23" pos:end="79:31">url_ftell</name><argument_list pos:start="79:32" pos:end="79:51">(<argument pos:start="79:33" pos:end="79:50"><expr pos:start="79:33" pos:end="79:50"><operator pos:start="79:33" pos:end="79:33">&amp;</operator><name pos:start="79:34" pos:end="79:50"><name pos:start="79:34" pos:end="79:41">matroska</name><operator pos:start="79:42" pos:end="79:43">-&gt;</operator><name pos:start="79:44" pos:end="79:46">ctx</name><operator pos:start="79:47" pos:end="79:48">-&gt;</operator><name pos:start="79:49" pos:end="79:50">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:68"><expr pos:start="81:17" pos:end="81:67"><name pos:start="81:17" pos:end="81:19">res</name> <operator pos:start="81:21" pos:end="81:21">=</operator> <call pos:start="81:23" pos:end="81:67"><name pos:start="81:23" pos:end="81:38">ebml_read_binary</name><argument_list pos:start="81:39" pos:end="81:67">(<argument pos:start="81:40" pos:end="81:47"><expr pos:start="81:40" pos:end="81:47"><name pos:start="81:40" pos:end="81:47">matroska</name></expr></argument>, <argument pos:start="81:50" pos:end="81:52"><expr pos:start="81:50" pos:end="81:52"><operator pos:start="81:50" pos:end="81:50">&amp;</operator><name pos:start="81:51" pos:end="81:52">id</name></expr></argument>, <argument pos:start="81:55" pos:end="81:59"><expr pos:start="81:55" pos:end="81:59"><operator pos:start="81:55" pos:end="81:55">&amp;</operator><name pos:start="81:56" pos:end="81:59">data</name></expr></argument>, <argument pos:start="81:62" pos:end="81:66"><expr pos:start="81:62" pos:end="81:66"><operator pos:start="81:62" pos:end="81:62">&amp;</operator><name pos:start="81:63" pos:end="81:66">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="83:17" pos:end="87:77"><if pos:start="83:17" pos:end="87:77">if <condition pos:start="83:20" pos:end="83:29">(<expr pos:start="83:21" pos:end="83:28"><name pos:start="83:21" pos:end="83:23">res</name> <operator pos:start="83:25" pos:end="83:26">==</operator> <literal type="number" pos:start="83:28" pos:end="83:28">0</literal></expr>)</condition><block type="pseudo" pos:start="85:21" pos:end="87:77"><block_content pos:start="85:21" pos:end="87:77">

                    <expr_stmt pos:start="85:21" pos:end="87:77"><expr pos:start="85:21" pos:end="87:76"><name pos:start="85:21" pos:end="85:23">res</name> <operator pos:start="85:25" pos:end="85:25">=</operator> <call pos:start="85:27" pos:end="87:76"><name pos:start="85:27" pos:end="85:46">matroska_parse_block</name><argument_list pos:start="85:47" pos:end="87:76">(<argument pos:start="85:48" pos:end="85:55"><expr pos:start="85:48" pos:end="85:55"><name pos:start="85:48" pos:end="85:55">matroska</name></expr></argument>, <argument pos:start="85:58" pos:end="85:61"><expr pos:start="85:58" pos:end="85:61"><name pos:start="85:58" pos:end="85:61">data</name></expr></argument>, <argument pos:start="85:64" pos:end="85:67"><expr pos:start="85:64" pos:end="85:67"><name pos:start="85:64" pos:end="85:67">size</name></expr></argument>, <argument pos:start="85:70" pos:end="85:72"><expr pos:start="85:70" pos:end="85:72"><name pos:start="85:70" pos:end="85:72">pos</name></expr></argument>,

                                               <argument pos:start="87:48" pos:end="87:59"><expr pos:start="87:48" pos:end="87:59"><name pos:start="87:48" pos:end="87:59">cluster_time</name></expr></argument>, <argument pos:start="87:62" pos:end="87:63"><expr pos:start="87:62" pos:end="87:63"><operator pos:start="87:62" pos:end="87:62">-</operator><literal type="number" pos:start="87:63" pos:end="87:63">1</literal></expr></argument>, <argument pos:start="87:66" pos:end="87:69"><expr pos:start="87:66" pos:end="87:69"><name pos:start="87:66" pos:end="87:69">NULL</name></expr></argument>, <argument pos:start="87:72" pos:end="87:75"><expr pos:start="87:72" pos:end="87:75"><name pos:start="87:72" pos:end="87:75">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <break pos:start="89:17" pos:end="89:22">break;</break>



            <default pos:start="93:13" pos:end="93:20">default:</default>

                <expr_stmt pos:start="95:17" pos:end="97:67"><expr pos:start="95:17" pos:end="97:66"><call pos:start="95:17" pos:end="97:66"><name pos:start="95:17" pos:end="95:22">av_log</name><argument_list pos:start="95:23" pos:end="97:66">(<argument pos:start="95:24" pos:end="95:36"><expr pos:start="95:24" pos:end="95:36"><name pos:start="95:24" pos:end="95:36"><name pos:start="95:24" pos:end="95:31">matroska</name><operator pos:start="95:32" pos:end="95:33">-&gt;</operator><name pos:start="95:34" pos:end="95:36">ctx</name></name></expr></argument>, <argument pos:start="95:39" pos:end="95:49"><expr pos:start="95:39" pos:end="95:49"><name pos:start="95:39" pos:end="95:49">AV_LOG_INFO</name></expr></argument>,

                       <argument pos:start="97:24" pos:end="97:61"><expr pos:start="97:24" pos:end="97:61"><literal type="string" pos:start="97:24" pos:end="97:61">"Unknown entry 0x%x in cluster data\n"</literal></expr></argument>, <argument pos:start="97:64" pos:end="97:65"><expr pos:start="97:64" pos:end="97:65"><name pos:start="97:64" pos:end="97:65">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="99:17" pos:end="99:34">/* fall-through */</comment>



            <case pos:start="103:13" pos:end="103:30">case <expr pos:start="103:18" pos:end="103:29"><name pos:start="103:18" pos:end="103:29">EBML_ID_VOID</name></expr>:</case>

                <expr_stmt pos:start="105:17" pos:end="105:47"><expr pos:start="105:17" pos:end="105:46"><name pos:start="105:17" pos:end="105:19">res</name> <operator pos:start="105:21" pos:end="105:21">=</operator> <call pos:start="105:23" pos:end="105:46"><name pos:start="105:23" pos:end="105:36">ebml_read_skip</name><argument_list pos:start="105:37" pos:end="105:46">(<argument pos:start="105:38" pos:end="105:45"><expr pos:start="105:38" pos:end="105:45"><name pos:start="105:38" pos:end="105:45">matroska</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="107:17" pos:end="107:22">break;</break>

        </block_content>}</block></switch>



        <if_stmt pos:start="113:9" pos:end="119:9"><if pos:start="113:9" pos:end="119:9">if <condition pos:start="113:12" pos:end="113:31">(<expr pos:start="113:13" pos:end="113:30"><name pos:start="113:13" pos:end="113:30"><name pos:start="113:13" pos:end="113:20">matroska</name><operator pos:start="113:21" pos:end="113:22">-&gt;</operator><name pos:start="113:23" pos:end="113:30">level_up</name></name></expr>)</condition> <block pos:start="113:33" pos:end="119:9">{<block_content pos:start="115:13" pos:end="117:18">

            <expr_stmt pos:start="115:13" pos:end="115:33"><expr pos:start="115:13" pos:end="115:32"><name pos:start="115:13" pos:end="115:30"><name pos:start="115:13" pos:end="115:20">matroska</name><operator pos:start="115:21" pos:end="115:22">-&gt;</operator><name pos:start="115:23" pos:end="115:30">level_up</name></name><operator pos:start="115:31" pos:end="115:32">--</operator></expr>;</expr_stmt>

            <break pos:start="117:13" pos:end="117:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <return pos:start="125:5" pos:end="125:15">return <expr pos:start="125:12" pos:end="125:14"><name pos:start="125:12" pos:end="125:14">res</name></expr>;</return>

</block_content>}</block>
</unit>
