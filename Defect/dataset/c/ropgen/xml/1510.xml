<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1510.c" pos:tabs="8"><function pos:start="1:1" pos:end="43:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:43">sd_co_flush_to_disk</name><parameter_list pos:start="1:44" pos:end="1:65">(<parameter pos:start="1:45" pos:end="1:64"><decl pos:start="1:45" pos:end="1:64"><type pos:start="1:45" pos:end="1:62"><name pos:start="1:45" pos:end="1:60">BlockDriverState</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:64">bs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="43:1">{<block_content pos:start="5:5" pos:end="41:20">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:21">BDRVSheepdogState</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:24">s</name> <init pos:start="5:26" pos:end="5:37">= <expr pos:start="5:28" pos:end="5:37"><name pos:start="5:28" pos:end="5:37"><name pos:start="5:28" pos:end="5:29">bs</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:37">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">SheepdogAIOCB</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">acb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:10">AIOReq</name> <modifier pos:start="9:12" pos:end="9:12">*</modifier></type><name pos:start="9:13" pos:end="9:19">aio_req</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:44">(<expr pos:start="13:9" pos:end="13:43"><name pos:start="13:9" pos:end="13:22"><name pos:start="13:9" pos:end="13:9">s</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:22">cache_flags</name></name> <operator pos:start="13:24" pos:end="13:25">!=</operator> <name pos:start="13:27" pos:end="13:43">SD_FLAG_CMD_CACHE</name></expr>)</condition> <block pos:start="13:46" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:17">

        <return pos:start="15:9" pos:end="15:17">return <expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:39"><expr pos:start="21:5" pos:end="21:38"><name pos:start="21:5" pos:end="21:7">acb</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:38"><name pos:start="21:11" pos:end="21:22">sd_aio_setup</name><argument_list pos:start="21:23" pos:end="21:38">(<argument pos:start="21:24" pos:end="21:25"><expr pos:start="21:24" pos:end="21:25"><name pos:start="21:24" pos:end="21:25">bs</name></expr></argument>, <argument pos:start="21:28" pos:end="21:31"><expr pos:start="21:28" pos:end="21:31"><name pos:start="21:28" pos:end="21:31">NULL</name></expr></argument>, <argument pos:start="21:34" pos:end="21:34"><expr pos:start="21:34" pos:end="21:34"><literal type="number" pos:start="21:34" pos:end="21:34">0</literal></expr></argument>, <argument pos:start="21:37" pos:end="21:37"><expr pos:start="21:37" pos:end="21:37"><literal type="number" pos:start="21:37" pos:end="21:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:40"><expr pos:start="23:5" pos:end="23:39"><name pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:7">acb</name><operator pos:start="23:8" pos:end="23:9">-&gt;</operator><name pos:start="23:10" pos:end="23:19">aiocb_type</name></name> <operator pos:start="23:21" pos:end="23:21">=</operator> <name pos:start="23:23" pos:end="23:39">AIOCB_FLUSH_CACHE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:41"><expr pos:start="25:5" pos:end="25:40"><name pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:7">acb</name><operator pos:start="25:8" pos:end="25:9">-&gt;</operator><name pos:start="25:10" pos:end="25:22">aio_done_func</name></name> <operator pos:start="25:24" pos:end="25:24">=</operator> <name pos:start="25:26" pos:end="25:40">sd_finish_aiocb</name></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="31:43"><expr pos:start="29:5" pos:end="31:42"><name pos:start="29:5" pos:end="29:11">aio_req</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="31:42"><name pos:start="29:15" pos:end="29:27">alloc_aio_req</name><argument_list pos:start="29:28" pos:end="31:42">(<argument pos:start="29:29" pos:end="29:29"><expr pos:start="29:29" pos:end="29:29"><name pos:start="29:29" pos:end="29:29">s</name></expr></argument>, <argument pos:start="29:32" pos:end="29:34"><expr pos:start="29:32" pos:end="29:34"><name pos:start="29:32" pos:end="29:34">acb</name></expr></argument>, <argument pos:start="29:37" pos:end="29:67"><expr pos:start="29:37" pos:end="29:67"><call pos:start="29:37" pos:end="29:67"><name pos:start="29:37" pos:end="29:50">vid_to_vdi_oid</name><argument_list pos:start="29:51" pos:end="29:67">(<argument pos:start="29:52" pos:end="29:66"><expr pos:start="29:52" pos:end="29:66"><name pos:start="29:52" pos:end="29:66"><name pos:start="29:52" pos:end="29:52">s</name><operator pos:start="29:53" pos:end="29:54">-&gt;</operator><name pos:start="29:55" pos:end="29:59">inode</name><operator pos:start="29:60" pos:end="29:60">.</operator><name pos:start="29:61" pos:end="29:66">vdi_id</name></name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="31:29" pos:end="31:29"><expr pos:start="31:29" pos:end="31:29"><literal type="number" pos:start="31:29" pos:end="31:29">0</literal></expr></argument>, <argument pos:start="31:32" pos:end="31:32"><expr pos:start="31:32" pos:end="31:32"><literal type="number" pos:start="31:32" pos:end="31:32">0</literal></expr></argument>, <argument pos:start="31:35" pos:end="31:35"><expr pos:start="31:35" pos:end="31:35"><literal type="number" pos:start="31:35" pos:end="31:35">0</literal></expr></argument>, <argument pos:start="31:38" pos:end="31:38"><expr pos:start="31:38" pos:end="31:38"><literal type="number" pos:start="31:38" pos:end="31:38">0</literal></expr></argument>, <argument pos:start="31:41" pos:end="31:41"><expr pos:start="31:41" pos:end="31:41"><literal type="number" pos:start="31:41" pos:end="31:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:68"><expr pos:start="33:5" pos:end="33:67"><call pos:start="33:5" pos:end="33:67"><name pos:start="33:5" pos:end="33:21">QLIST_INSERT_HEAD</name><argument_list pos:start="33:22" pos:end="33:67">(<argument pos:start="33:23" pos:end="33:43"><expr pos:start="33:23" pos:end="33:43"><operator pos:start="33:23" pos:end="33:23">&amp;</operator><name pos:start="33:24" pos:end="33:43"><name pos:start="33:24" pos:end="33:24">s</name><operator pos:start="33:25" pos:end="33:26">-&gt;</operator><name pos:start="33:27" pos:end="33:43">inflight_aio_head</name></name></expr></argument>, <argument pos:start="33:46" pos:end="33:52"><expr pos:start="33:46" pos:end="33:52"><name pos:start="33:46" pos:end="33:52">aio_req</name></expr></argument>, <argument pos:start="33:55" pos:end="33:66"><expr pos:start="33:55" pos:end="33:66"><name pos:start="33:55" pos:end="33:66">aio_siblings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:65"><expr pos:start="35:5" pos:end="35:64"><call pos:start="35:5" pos:end="35:64"><name pos:start="35:5" pos:end="35:19">add_aio_request</name><argument_list pos:start="35:20" pos:end="35:64">(<argument pos:start="35:21" pos:end="35:21"><expr pos:start="35:21" pos:end="35:21"><name pos:start="35:21" pos:end="35:21">s</name></expr></argument>, <argument pos:start="35:24" pos:end="35:30"><expr pos:start="35:24" pos:end="35:30"><name pos:start="35:24" pos:end="35:30">aio_req</name></expr></argument>, <argument pos:start="35:33" pos:end="35:36"><expr pos:start="35:33" pos:end="35:36"><name pos:start="35:33" pos:end="35:36">NULL</name></expr></argument>, <argument pos:start="35:39" pos:end="35:39"><expr pos:start="35:39" pos:end="35:39"><literal type="number" pos:start="35:39" pos:end="35:39">0</literal></expr></argument>, <argument pos:start="35:42" pos:end="35:46"><expr pos:start="35:42" pos:end="35:46"><name pos:start="35:42" pos:end="35:46">false</name></expr></argument>, <argument pos:start="35:49" pos:end="35:63"><expr pos:start="35:49" pos:end="35:63"><name pos:start="35:49" pos:end="35:63"><name pos:start="35:49" pos:end="35:51">acb</name><operator pos:start="35:52" pos:end="35:53">-&gt;</operator><name pos:start="35:54" pos:end="35:63">aiocb_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:27"><expr pos:start="39:5" pos:end="39:26"><call pos:start="39:5" pos:end="39:26"><name pos:start="39:5" pos:end="39:24">qemu_coroutine_yield</name><argument_list pos:start="39:25" pos:end="39:26">()</argument_list></call></expr>;</expr_stmt>

    <return pos:start="41:5" pos:end="41:20">return <expr pos:start="41:12" pos:end="41:19"><name pos:start="41:12" pos:end="41:19"><name pos:start="41:12" pos:end="41:14">acb</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:19">ret</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
