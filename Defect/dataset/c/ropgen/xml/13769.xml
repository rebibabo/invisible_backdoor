<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13769.c" pos:tabs="8"><function pos:start="1:1" pos:end="225:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:29">pci_default_write_config</name><parameter_list pos:start="1:30" pos:end="3:70">(<parameter pos:start="1:31" pos:end="1:42"><decl pos:start="1:31" pos:end="1:42"><type pos:start="1:31" pos:end="1:42"><name pos:start="1:31" pos:end="1:39">PCIDevice</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">d</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:46"><decl pos:start="3:31" pos:end="3:46"><type pos:start="3:31" pos:end="3:46"><name pos:start="3:31" pos:end="3:38">uint32_t</name></type> <name pos:start="3:40" pos:end="3:46">address</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:60"><decl pos:start="3:49" pos:end="3:60"><type pos:start="3:49" pos:end="3:60"><name pos:start="3:49" pos:end="3:56">uint32_t</name></type> <name pos:start="3:58" pos:end="3:60">val</name></decl></parameter>, <parameter pos:start="3:63" pos:end="3:69"><decl pos:start="3:63" pos:end="3:69"><type pos:start="3:63" pos:end="3:69"><name pos:start="3:63" pos:end="3:65">int</name></type> <name pos:start="3:67" pos:end="3:69">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="225:1">{<block_content pos:start="7:5" pos:end="223:5">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">can_write</name></decl>, <decl pos:start="7:20" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:20" pos:end="7:20">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">end</name></decl>, <decl pos:start="9:19" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:19" pos:end="9:22">addr</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="61:5"><if pos:start="13:5" pos:end="61:5">if <condition pos:start="13:8" pos:end="15:58">(<expr pos:start="13:9" pos:end="15:57"><name pos:start="13:9" pos:end="13:11">len</name> <operator pos:start="13:13" pos:end="13:14">==</operator> <literal type="number" pos:start="13:16" pos:end="13:16">4</literal> <operator pos:start="13:18" pos:end="13:19">&amp;&amp;</operator> <operator pos:start="13:21" pos:end="13:21">(</operator><operator pos:start="13:22" pos:end="13:22">(</operator><name pos:start="13:23" pos:end="13:29">address</name> <operator pos:start="13:31" pos:end="13:32">&gt;=</operator> <literal type="number" pos:start="13:34" pos:end="13:37">0x10</literal> <operator pos:start="13:39" pos:end="13:40">&amp;&amp;</operator> <name pos:start="13:42" pos:end="13:48">address</name> <operator pos:start="13:50" pos:end="13:50">&lt;</operator> <literal type="number" pos:start="13:52" pos:end="13:57">0x10</literal> <operator pos:start="13:57" pos:end="13:57">+</operator> <literal type="number" pos:start="13:59" pos:end="13:59">4</literal> <operator pos:start="13:61" pos:end="13:61">*</operator> <literal type="number" pos:start="13:63" pos:end="13:63">6</literal><operator pos:start="13:64" pos:end="13:64">)</operator> <operator pos:start="13:66" pos:end="13:67">||</operator>

                     <operator pos:start="15:22" pos:end="15:22">(</operator><name pos:start="15:23" pos:end="15:29">address</name> <operator pos:start="15:31" pos:end="15:32">&gt;=</operator> <literal type="number" pos:start="15:34" pos:end="15:37">0x30</literal> <operator pos:start="15:39" pos:end="15:40">&amp;&amp;</operator> <name pos:start="15:42" pos:end="15:48">address</name> <operator pos:start="15:50" pos:end="15:50">&lt;</operator> <literal type="number" pos:start="15:52" pos:end="15:55">0x34</literal><operator pos:start="15:56" pos:end="15:56">)</operator><operator pos:start="15:57" pos:end="15:57">)</operator></expr>)</condition> <block pos:start="15:60" pos:end="61:5">{<block_content pos:start="17:9" pos:end="59:15">

        <decl_stmt pos:start="17:9" pos:end="17:23"><decl pos:start="17:9" pos:end="17:22"><type pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:19">PCIIORegion</name> <modifier pos:start="17:21" pos:end="17:21">*</modifier></type><name pos:start="17:22" pos:end="17:22">r</name></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:16"><decl pos:start="19:9" pos:end="19:15"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:15">reg</name></decl>;</decl_stmt>



        <if_stmt pos:start="23:9" pos:end="31:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:30">( <expr pos:start="23:14" pos:end="23:28"><name pos:start="23:14" pos:end="23:20">address</name> <operator pos:start="23:22" pos:end="23:23">&gt;=</operator> <literal type="number" pos:start="23:25" pos:end="23:28">0x30</literal></expr> )</condition> <block pos:start="23:32" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:31">

            <expr_stmt pos:start="25:13" pos:end="25:31"><expr pos:start="25:13" pos:end="25:30"><name pos:start="25:13" pos:end="25:15">reg</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <name pos:start="25:19" pos:end="25:30">PCI_ROM_SLOT</name></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="27:10" pos:end="31:9">else<block pos:start="27:14" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:40">

            <expr_stmt pos:start="29:13" pos:end="29:40"><expr pos:start="29:13" pos:end="29:39"><name pos:start="29:13" pos:end="29:15">reg</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <operator pos:start="29:19" pos:end="29:19">(</operator><name pos:start="29:20" pos:end="29:26">address</name> <operator pos:start="29:28" pos:end="29:28">-</operator> <literal type="number" pos:start="29:30" pos:end="29:33">0x10</literal><operator pos:start="29:34" pos:end="29:34">)</operator> <operator pos:start="29:36" pos:end="29:37">&gt;&gt;</operator> <literal type="number" pos:start="29:39" pos:end="29:39">2</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:32"><expr pos:start="33:9" pos:end="33:31"><name pos:start="33:9" pos:end="33:9">r</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <operator pos:start="33:13" pos:end="33:13">&amp;</operator><name pos:start="33:14" pos:end="33:31"><name pos:start="33:14" pos:end="33:14">d</name><operator pos:start="33:15" pos:end="33:16">-&gt;</operator><name pos:start="33:17" pos:end="33:26">io_regions</name><index pos:start="33:27" pos:end="33:31">[<expr pos:start="33:28" pos:end="33:30"><name pos:start="33:28" pos:end="33:30">reg</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="37:32"><if pos:start="35:9" pos:end="37:32">if <condition pos:start="35:12" pos:end="35:25">(<expr pos:start="35:13" pos:end="35:24"><name pos:start="35:13" pos:end="35:19"><name pos:start="35:13" pos:end="35:13">r</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:19">size</name></name> <operator pos:start="35:21" pos:end="35:22">==</operator> <literal type="number" pos:start="35:24" pos:end="35:24">0</literal></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:32"><block_content pos:start="37:13" pos:end="37:32">

            <goto pos:start="37:13" pos:end="37:32">goto <name pos:start="37:18" pos:end="37:31">default_config</name>;</goto></block_content></block></if></if_stmt>

        <comment type="block" pos:start="39:9" pos:end="39:38">/* compute the stored value */</comment>

        <if_stmt pos:start="41:9" pos:end="53:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:32">(<expr pos:start="41:13" pos:end="41:31"><name pos:start="41:13" pos:end="41:15">reg</name> <operator pos:start="41:17" pos:end="41:18">==</operator> <name pos:start="41:20" pos:end="41:31">PCI_ROM_SLOT</name></expr>)</condition> <block pos:start="41:34" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:40">

            <comment type="block" pos:start="43:13" pos:end="43:37">/* keep ROM enable bit */</comment>

            <expr_stmt pos:start="45:13" pos:end="45:40"><expr pos:start="45:13" pos:end="45:39"><name pos:start="45:13" pos:end="45:15">val</name> <operator pos:start="45:17" pos:end="45:18">&amp;=</operator> <operator pos:start="45:20" pos:end="45:20">(</operator><operator pos:start="45:21" pos:end="45:21">~</operator><operator pos:start="45:22" pos:end="45:22">(</operator><name pos:start="45:23" pos:end="45:29"><name pos:start="45:23" pos:end="45:23">r</name><operator pos:start="45:24" pos:end="45:25">-&gt;</operator><name pos:start="45:26" pos:end="45:29">size</name></name> <operator pos:start="45:31" pos:end="45:31">-</operator> <literal type="number" pos:start="45:33" pos:end="45:33">1</literal><operator pos:start="45:34" pos:end="45:34">)</operator><operator pos:start="45:35" pos:end="45:35">)</operator> <operator pos:start="45:37" pos:end="45:37">|</operator> <literal type="number" pos:start="45:39" pos:end="45:39">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="47:11" pos:end="53:9">else <block pos:start="47:16" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:27">

            <expr_stmt pos:start="49:13" pos:end="49:34"><expr pos:start="49:13" pos:end="49:33"><name pos:start="49:13" pos:end="49:15">val</name> <operator pos:start="49:17" pos:end="49:18">&amp;=</operator> <operator pos:start="49:20" pos:end="49:20">~</operator><operator pos:start="49:21" pos:end="49:21">(</operator><name pos:start="49:22" pos:end="49:28"><name pos:start="49:22" pos:end="49:22">r</name><operator pos:start="49:23" pos:end="49:24">-&gt;</operator><name pos:start="49:25" pos:end="49:28">size</name></name> <operator pos:start="49:30" pos:end="49:30">-</operator> <literal type="number" pos:start="49:32" pos:end="49:32">1</literal><operator pos:start="49:33" pos:end="49:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:27"><expr pos:start="51:13" pos:end="51:26"><name pos:start="51:13" pos:end="51:15">val</name> <operator pos:start="51:17" pos:end="51:18">|=</operator> <name pos:start="51:20" pos:end="51:26"><name pos:start="51:20" pos:end="51:20">r</name><operator pos:start="51:21" pos:end="51:22">-&gt;</operator><name pos:start="51:23" pos:end="51:26">type</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:62"><expr pos:start="55:9" pos:end="55:61"><operator pos:start="55:9" pos:end="55:9">*</operator><operator pos:start="55:10" pos:end="55:10">(</operator><name pos:start="55:11" pos:end="55:18">uint32_t</name> <operator pos:start="55:20" pos:end="55:20">*</operator><operator pos:start="55:21" pos:end="55:21">)</operator><operator pos:start="55:22" pos:end="55:22">(</operator><name pos:start="55:23" pos:end="55:31"><name pos:start="55:23" pos:end="55:23">d</name><operator pos:start="55:24" pos:end="55:25">-&gt;</operator><name pos:start="55:26" pos:end="55:31">config</name></name> <operator pos:start="55:33" pos:end="55:33">+</operator> <name pos:start="55:35" pos:end="55:41">address</name><operator pos:start="55:42" pos:end="55:42">)</operator> <operator pos:start="55:44" pos:end="55:44">=</operator> <call pos:start="55:46" pos:end="55:61"><name pos:start="55:46" pos:end="55:56">cpu_to_le32</name><argument_list pos:start="55:57" pos:end="55:61">(<argument pos:start="55:58" pos:end="55:60"><expr pos:start="55:58" pos:end="55:60"><name pos:start="55:58" pos:end="55:60">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:31"><expr pos:start="57:9" pos:end="57:30"><call pos:start="57:9" pos:end="57:30"><name pos:start="57:9" pos:end="57:27">pci_update_mappings</name><argument_list pos:start="57:28" pos:end="57:30">(<argument pos:start="57:29" pos:end="57:29"><expr pos:start="57:29" pos:end="57:29"><name pos:start="57:29" pos:end="57:29">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:15">return;</return>

    </block_content>}</block></if></if_stmt>

 <label pos:start="63:2" pos:end="63:16"><name pos:start="63:2" pos:end="63:15">default_config</name>:</label>

    <comment type="block" pos:start="65:5" pos:end="65:35">/* not efficient, but simple */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:19"><expr pos:start="67:5" pos:end="67:18"><name pos:start="67:5" pos:end="67:8">addr</name> <operator pos:start="67:10" pos:end="67:10">=</operator> <name pos:start="67:12" pos:end="67:18">address</name></expr>;</expr_stmt>

    <for pos:start="69:5" pos:end="211:5">for<control pos:start="69:8" pos:end="69:28">(<init pos:start="69:9" pos:end="69:14"><expr pos:start="69:9" pos:end="69:13"><name pos:start="69:9" pos:end="69:9">i</name> <operator pos:start="69:11" pos:end="69:11">=</operator> <literal type="number" pos:start="69:13" pos:end="69:13">0</literal></expr>;</init> <condition pos:start="69:16" pos:end="69:23"><expr pos:start="69:16" pos:end="69:22"><name pos:start="69:16" pos:end="69:16">i</name> <operator pos:start="69:18" pos:end="69:18">&lt;</operator> <name pos:start="69:20" pos:end="69:22">len</name></expr>;</condition> <incr pos:start="69:25" pos:end="69:27"><expr pos:start="69:25" pos:end="69:27"><name pos:start="69:25" pos:end="69:25">i</name><operator pos:start="69:26" pos:end="69:27">++</operator></expr></incr>)</control> <block pos:start="69:30" pos:end="211:5">{<block_content pos:start="73:9" pos:end="209:18">

        <comment type="block" pos:start="71:9" pos:end="71:41">/* default read/write accesses */</comment>

        <switch pos:start="73:9" pos:end="173:9">switch<condition pos:start="73:15" pos:end="73:31">(<expr pos:start="73:16" pos:end="73:30"><name pos:start="73:16" pos:end="73:30"><name pos:start="73:16" pos:end="73:16">d</name><operator pos:start="73:17" pos:end="73:18">-&gt;</operator><name pos:start="73:19" pos:end="73:24">config</name><index pos:start="73:25" pos:end="73:30">[<expr pos:start="73:26" pos:end="73:29"><literal type="number" pos:start="73:26" pos:end="73:29">0x0e</literal></expr>]</index></name></expr>)</condition> <block pos:start="73:33" pos:end="173:9">{<block_content pos:start="75:9" pos:end="171:18">

        <case pos:start="75:9" pos:end="75:18">case <expr pos:start="75:14" pos:end="75:17"><literal type="number" pos:start="75:14" pos:end="75:17">0x00</literal></expr>:</case>

        <case pos:start="77:9" pos:end="77:18">case <expr pos:start="77:14" pos:end="77:17"><literal type="number" pos:start="77:14" pos:end="77:17">0x80</literal></expr>:</case>

            <switch pos:start="79:13" pos:end="121:13">switch<condition pos:start="79:19" pos:end="79:24">(<expr pos:start="79:20" pos:end="79:23"><name pos:start="79:20" pos:end="79:23">addr</name></expr>)</condition> <block pos:start="79:26" pos:end="121:13">{<block_content pos:start="81:13" pos:end="119:22">

            <case pos:start="81:13" pos:end="81:22">case <expr pos:start="81:18" pos:end="81:21"><literal type="number" pos:start="81:18" pos:end="81:21">0x00</literal></expr>:</case>

            <case pos:start="83:13" pos:end="83:22">case <expr pos:start="83:18" pos:end="83:21"><literal type="number" pos:start="83:18" pos:end="83:21">0x01</literal></expr>:</case>

            <case pos:start="85:13" pos:end="85:22">case <expr pos:start="85:18" pos:end="85:21"><literal type="number" pos:start="85:18" pos:end="85:21">0x02</literal></expr>:</case>

            <case pos:start="87:13" pos:end="87:22">case <expr pos:start="87:18" pos:end="87:21"><literal type="number" pos:start="87:18" pos:end="87:21">0x03</literal></expr>:</case>

            <case pos:start="89:13" pos:end="89:22">case <expr pos:start="89:18" pos:end="89:21"><literal type="number" pos:start="89:18" pos:end="89:21">0x06</literal></expr>:</case>

            <case pos:start="91:13" pos:end="91:22">case <expr pos:start="91:18" pos:end="91:21"><literal type="number" pos:start="91:18" pos:end="91:21">0x07</literal></expr>:</case>

            <case pos:start="93:13" pos:end="93:22">case <expr pos:start="93:18" pos:end="93:21"><literal type="number" pos:start="93:18" pos:end="93:21">0x08</literal></expr>:</case>

            <case pos:start="95:13" pos:end="95:22">case <expr pos:start="95:18" pos:end="95:21"><literal type="number" pos:start="95:18" pos:end="95:21">0x09</literal></expr>:</case>

            <case pos:start="97:13" pos:end="97:22">case <expr pos:start="97:18" pos:end="97:21"><literal type="number" pos:start="97:18" pos:end="97:21">0x0a</literal></expr>:</case>

            <case pos:start="99:13" pos:end="99:22">case <expr pos:start="99:18" pos:end="99:21"><literal type="number" pos:start="99:18" pos:end="99:21">0x0b</literal></expr>:</case>

            <case pos:start="101:13" pos:end="101:22">case <expr pos:start="101:18" pos:end="101:21"><literal type="number" pos:start="101:18" pos:end="101:21">0x0e</literal></expr>:</case>

            <case pos:start="103:13" pos:end="103:31">case <expr pos:start="103:18" pos:end="103:30"><literal type="number" pos:start="103:18" pos:end="103:21">0x10</literal> <operator pos:start="103:23" pos:end="103:25">...</operator> <literal type="number" pos:start="103:27" pos:end="103:30">0x27</literal></expr>:</case> <comment type="block" pos:start="103:33" pos:end="103:42">/* base */</comment>

            <case pos:start="105:13" pos:end="105:31">case <expr pos:start="105:18" pos:end="105:30"><literal type="number" pos:start="105:18" pos:end="105:21">0x2c</literal> <operator pos:start="105:23" pos:end="105:25">...</operator> <literal type="number" pos:start="105:27" pos:end="105:30">0x2f</literal></expr>:</case> <comment type="block" pos:start="105:33" pos:end="105:72">/* read-only subsystem ID &amp; vendor ID */</comment>

            <case pos:start="107:13" pos:end="107:31">case <expr pos:start="107:18" pos:end="107:30"><literal type="number" pos:start="107:18" pos:end="107:21">0x30</literal> <operator pos:start="107:23" pos:end="107:25">...</operator> <literal type="number" pos:start="107:27" pos:end="107:30">0x33</literal></expr>:</case> <comment type="block" pos:start="107:33" pos:end="107:41">/* rom */</comment>

            <case pos:start="109:13" pos:end="109:22">case <expr pos:start="109:18" pos:end="109:21"><literal type="number" pos:start="109:18" pos:end="109:21">0x3d</literal></expr>:</case>

                <expr_stmt pos:start="111:17" pos:end="111:30"><expr pos:start="111:17" pos:end="111:29"><name pos:start="111:17" pos:end="111:25">can_write</name> <operator pos:start="111:27" pos:end="111:27">=</operator> <literal type="number" pos:start="111:29" pos:end="111:29">0</literal></expr>;</expr_stmt>

                <break pos:start="113:17" pos:end="113:22">break;</break>

            <default pos:start="115:13" pos:end="115:20">default:</default>

                <expr_stmt pos:start="117:17" pos:end="117:30"><expr pos:start="117:17" pos:end="117:29"><name pos:start="117:17" pos:end="117:25">can_write</name> <operator pos:start="117:27" pos:end="117:27">=</operator> <literal type="number" pos:start="117:29" pos:end="117:29">1</literal></expr>;</expr_stmt>

                <break pos:start="119:17" pos:end="119:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="123:13" pos:end="123:18">break;</break>

        <default pos:start="125:9" pos:end="125:16">default:</default>

        <case pos:start="127:9" pos:end="127:18">case <expr pos:start="127:14" pos:end="127:17"><literal type="number" pos:start="127:14" pos:end="127:17">0x01</literal></expr>:</case>

            <switch pos:start="129:13" pos:end="169:13">switch<condition pos:start="129:19" pos:end="129:24">(<expr pos:start="129:20" pos:end="129:23"><name pos:start="129:20" pos:end="129:23">addr</name></expr>)</condition> <block pos:start="129:26" pos:end="169:13">{<block_content pos:start="131:13" pos:end="167:22">

            <case pos:start="131:13" pos:end="131:22">case <expr pos:start="131:18" pos:end="131:21"><literal type="number" pos:start="131:18" pos:end="131:21">0x00</literal></expr>:</case>

            <case pos:start="133:13" pos:end="133:22">case <expr pos:start="133:18" pos:end="133:21"><literal type="number" pos:start="133:18" pos:end="133:21">0x01</literal></expr>:</case>

            <case pos:start="135:13" pos:end="135:22">case <expr pos:start="135:18" pos:end="135:21"><literal type="number" pos:start="135:18" pos:end="135:21">0x02</literal></expr>:</case>

            <case pos:start="137:13" pos:end="137:22">case <expr pos:start="137:18" pos:end="137:21"><literal type="number" pos:start="137:18" pos:end="137:21">0x03</literal></expr>:</case>

            <case pos:start="139:13" pos:end="139:22">case <expr pos:start="139:18" pos:end="139:21"><literal type="number" pos:start="139:18" pos:end="139:21">0x06</literal></expr>:</case>

            <case pos:start="141:13" pos:end="141:22">case <expr pos:start="141:18" pos:end="141:21"><literal type="number" pos:start="141:18" pos:end="141:21">0x07</literal></expr>:</case>

            <case pos:start="143:13" pos:end="143:22">case <expr pos:start="143:18" pos:end="143:21"><literal type="number" pos:start="143:18" pos:end="143:21">0x08</literal></expr>:</case>

            <case pos:start="145:13" pos:end="145:22">case <expr pos:start="145:18" pos:end="145:21"><literal type="number" pos:start="145:18" pos:end="145:21">0x09</literal></expr>:</case>

            <case pos:start="147:13" pos:end="147:22">case <expr pos:start="147:18" pos:end="147:21"><literal type="number" pos:start="147:18" pos:end="147:21">0x0a</literal></expr>:</case>

            <case pos:start="149:13" pos:end="149:22">case <expr pos:start="149:18" pos:end="149:21"><literal type="number" pos:start="149:18" pos:end="149:21">0x0b</literal></expr>:</case>

            <case pos:start="151:13" pos:end="151:22">case <expr pos:start="151:18" pos:end="151:21"><literal type="number" pos:start="151:18" pos:end="151:21">0x0e</literal></expr>:</case>

            <case pos:start="153:13" pos:end="153:31">case <expr pos:start="153:18" pos:end="153:30"><literal type="number" pos:start="153:18" pos:end="153:21">0x2c</literal> <operator pos:start="153:23" pos:end="153:25">...</operator> <literal type="number" pos:start="153:27" pos:end="153:30">0x2f</literal></expr>:</case> <comment type="block" pos:start="153:33" pos:end="153:72">/* read-only subsystem ID &amp; vendor ID */</comment>

            <case pos:start="155:13" pos:end="155:31">case <expr pos:start="155:18" pos:end="155:30"><literal type="number" pos:start="155:18" pos:end="155:21">0x38</literal> <operator pos:start="155:23" pos:end="155:25">...</operator> <literal type="number" pos:start="155:27" pos:end="155:30">0x3b</literal></expr>:</case> <comment type="block" pos:start="155:33" pos:end="155:41">/* rom */</comment>

            <case pos:start="157:13" pos:end="157:22">case <expr pos:start="157:18" pos:end="157:21"><literal type="number" pos:start="157:18" pos:end="157:21">0x3d</literal></expr>:</case>

                <expr_stmt pos:start="159:17" pos:end="159:30"><expr pos:start="159:17" pos:end="159:29"><name pos:start="159:17" pos:end="159:25">can_write</name> <operator pos:start="159:27" pos:end="159:27">=</operator> <literal type="number" pos:start="159:29" pos:end="159:29">0</literal></expr>;</expr_stmt>

                <break pos:start="161:17" pos:end="161:22">break;</break>

            <default pos:start="163:13" pos:end="163:20">default:</default>

                <expr_stmt pos:start="165:17" pos:end="165:30"><expr pos:start="165:17" pos:end="165:29"><name pos:start="165:17" pos:end="165:25">can_write</name> <operator pos:start="165:27" pos:end="165:27">=</operator> <literal type="number" pos:start="165:29" pos:end="165:29">1</literal></expr>;</expr_stmt>

                <break pos:start="167:17" pos:end="167:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="171:13" pos:end="171:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="175:9" pos:end="203:9"><if pos:start="175:9" pos:end="203:9">if <condition pos:start="175:12" pos:end="175:22">(<expr pos:start="175:13" pos:end="175:21"><name pos:start="175:13" pos:end="175:21">can_write</name></expr>)</condition> <block pos:start="175:24" pos:end="203:9">{<block_content pos:start="179:13" pos:end="201:34">

            <comment type="block" pos:start="177:13" pos:end="177:63">/* Mask out writes to reserved bits in registers */</comment>

            <switch pos:start="179:13" pos:end="199:13">switch <condition pos:start="179:20" pos:end="179:25">(<expr pos:start="179:21" pos:end="179:24"><name pos:start="179:21" pos:end="179:24">addr</name></expr>)</condition> <block pos:start="179:27" pos:end="199:13">{<block_content pos:start="181:13" pos:end="197:22">

	    <case pos:start="181:13" pos:end="181:22">case <expr pos:start="181:18" pos:end="181:21"><literal type="number" pos:start="181:18" pos:end="181:21">0x05</literal></expr>:</case>

                <expr_stmt pos:start="183:17" pos:end="183:53"><expr pos:start="183:17" pos:end="183:52"><name pos:start="183:17" pos:end="183:19">val</name> <operator pos:start="183:21" pos:end="183:22">&amp;=</operator> <operator pos:start="183:24" pos:end="183:24">~</operator><name pos:start="183:25" pos:end="183:52">PCI_COMMAND_RESERVED_MASK_HI</name></expr>;</expr_stmt>

                <break pos:start="185:17" pos:end="185:22">break;</break>

            <case pos:start="187:13" pos:end="187:22">case <expr pos:start="187:18" pos:end="187:21"><literal type="number" pos:start="187:18" pos:end="187:21">0x06</literal></expr>:</case>

                <expr_stmt pos:start="189:17" pos:end="189:52"><expr pos:start="189:17" pos:end="189:51"><name pos:start="189:17" pos:end="189:19">val</name> <operator pos:start="189:21" pos:end="189:22">&amp;=</operator> <operator pos:start="189:24" pos:end="189:24">~</operator><name pos:start="189:25" pos:end="189:51">PCI_STATUS_RESERVED_MASK_LO</name></expr>;</expr_stmt>

                <break pos:start="191:17" pos:end="191:22">break;</break>

            <case pos:start="193:13" pos:end="193:22">case <expr pos:start="193:18" pos:end="193:21"><literal type="number" pos:start="193:18" pos:end="193:21">0x07</literal></expr>:</case>

                <expr_stmt pos:start="195:17" pos:end="195:52"><expr pos:start="195:17" pos:end="195:51"><name pos:start="195:17" pos:end="195:19">val</name> <operator pos:start="195:21" pos:end="195:22">&amp;=</operator> <operator pos:start="195:24" pos:end="195:24">~</operator><name pos:start="195:25" pos:end="195:51">PCI_STATUS_RESERVED_MASK_HI</name></expr>;</expr_stmt>

                <break pos:start="197:17" pos:end="197:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="201:13" pos:end="201:34"><expr pos:start="201:13" pos:end="201:33"><name pos:start="201:13" pos:end="201:27"><name pos:start="201:13" pos:end="201:13">d</name><operator pos:start="201:14" pos:end="201:15">-&gt;</operator><name pos:start="201:16" pos:end="201:21">config</name><index pos:start="201:22" pos:end="201:27">[<expr pos:start="201:23" pos:end="201:26"><name pos:start="201:23" pos:end="201:26">addr</name></expr>]</index></name> <operator pos:start="201:29" pos:end="201:29">=</operator> <name pos:start="201:31" pos:end="201:33">val</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="205:9" pos:end="207:22"><if pos:start="205:9" pos:end="207:22">if <condition pos:start="205:12" pos:end="205:26">(<expr pos:start="205:13" pos:end="205:25"><operator pos:start="205:13" pos:end="205:14">++</operator><name pos:start="205:15" pos:end="205:18">addr</name> <operator pos:start="205:20" pos:end="205:20">&gt;</operator> <literal type="number" pos:start="205:22" pos:end="205:25">0xff</literal></expr>)</condition><block type="pseudo" pos:start="207:17" pos:end="207:22"><block_content pos:start="207:17" pos:end="207:22">

        	<break pos:start="207:17" pos:end="207:22">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:18"><expr pos:start="209:9" pos:end="209:17"><name pos:start="209:9" pos:end="209:11">val</name> <operator pos:start="209:13" pos:end="209:15">&gt;&gt;=</operator> <literal type="number" pos:start="209:17" pos:end="209:17">8</literal></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="215:5" pos:end="215:24"><expr pos:start="215:5" pos:end="215:23"><name pos:start="215:5" pos:end="215:7">end</name> <operator pos:start="215:9" pos:end="215:9">=</operator> <name pos:start="215:11" pos:end="215:17">address</name> <operator pos:start="215:19" pos:end="215:19">+</operator> <name pos:start="215:21" pos:end="215:23">len</name></expr>;</expr_stmt>

    <if_stmt pos:start="217:5" pos:end="223:5"><if pos:start="217:5" pos:end="223:5">if <condition pos:start="217:8" pos:end="217:57">(<expr pos:start="217:9" pos:end="217:56"><name pos:start="217:9" pos:end="217:11">end</name> <operator pos:start="217:13" pos:end="217:13">&gt;</operator> <name pos:start="217:15" pos:end="217:25">PCI_COMMAND</name> <operator pos:start="217:27" pos:end="217:28">&amp;&amp;</operator> <name pos:start="217:30" pos:end="217:36">address</name> <operator pos:start="217:38" pos:end="217:38">&lt;</operator> <operator pos:start="217:40" pos:end="217:40">(</operator><name pos:start="217:41" pos:end="217:51">PCI_COMMAND</name> <operator pos:start="217:53" pos:end="217:53">+</operator> <literal type="number" pos:start="217:55" pos:end="217:55">2</literal><operator pos:start="217:56" pos:end="217:56">)</operator></expr>)</condition> <block pos:start="217:59" pos:end="223:5">{<block_content pos:start="221:9" pos:end="221:31">

        <comment type="block" pos:start="219:9" pos:end="219:78">/* if the command register is modified, we must modify the mappings */</comment>

        <expr_stmt pos:start="221:9" pos:end="221:31"><expr pos:start="221:9" pos:end="221:30"><call pos:start="221:9" pos:end="221:30"><name pos:start="221:9" pos:end="221:27">pci_update_mappings</name><argument_list pos:start="221:28" pos:end="221:30">(<argument pos:start="221:29" pos:end="221:29"><expr pos:start="221:29" pos:end="221:29"><name pos:start="221:29" pos:end="221:29">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
