<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22205.c" pos:tabs="8"><function pos:start="1:1" pos:end="31:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:25">cpu_breakpoint_remove</name><parameter_list pos:start="1:26" pos:end="1:68">(<parameter pos:start="1:27" pos:end="1:39"><decl pos:start="1:27" pos:end="1:39"><type pos:start="1:27" pos:end="1:39"><name pos:start="1:27" pos:end="1:34">CPUState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">env</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:56"><decl pos:start="1:42" pos:end="1:56"><type pos:start="1:42" pos:end="1:56"><name pos:start="1:42" pos:end="1:53">target_ulong</name></type> <name pos:start="1:55" pos:end="1:56">pc</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:67"><decl pos:start="1:59" pos:end="1:67"><type pos:start="1:59" pos:end="1:67"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:67">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="31:1">{<block_content pos:start="7:5" pos:end="30:0">

<cpp:if pos:start="5:1" pos:end="5:27">#<cpp:directive pos:start="5:2" pos:end="5:3">if</cpp:directive> <expr pos:start="5:5" pos:end="5:27"><call pos:start="5:5" pos:end="5:27"><name pos:start="5:5" pos:end="5:11">defined</name><argument_list pos:start="5:12" pos:end="5:27">(<argument pos:start="5:13" pos:end="5:26"><expr pos:start="5:13" pos:end="5:26"><name pos:start="5:13" pos:end="5:26">TARGET_HAS_ICE</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">CPUBreakpoint</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:21">bp</name></decl>;</decl_stmt>



    <macro pos:start="11:5" pos:end="11:47"><name pos:start="11:5" pos:end="11:17">TAILQ_FOREACH</name><argument_list pos:start="11:18" pos:end="11:47">(<argument pos:start="11:19" pos:end="11:20">bp</argument>, <argument pos:start="11:23" pos:end="11:39">&amp;env-&gt;breakpoints</argument>, <argument pos:start="11:42" pos:end="11:46">entry</argument>)</argument_list></macro> <block pos:start="11:49" pos:end="21:5">{<block_content pos:start="13:9" pos:end="19:9">

        <if_stmt pos:start="13:9" pos:end="19:9"><if pos:start="13:9" pos:end="19:9">if <condition pos:start="13:12" pos:end="13:47">(<expr pos:start="13:13" pos:end="13:46"><name pos:start="13:13" pos:end="13:18"><name pos:start="13:13" pos:end="13:14">bp</name><operator pos:start="13:15" pos:end="13:16">-&gt;</operator><name pos:start="13:17" pos:end="13:18">pc</name></name> <operator pos:start="13:20" pos:end="13:21">==</operator> <name pos:start="13:23" pos:end="13:24">pc</name> <operator pos:start="13:26" pos:end="13:27">&amp;&amp;</operator> <name pos:start="13:29" pos:end="13:37"><name pos:start="13:29" pos:end="13:30">bp</name><operator pos:start="13:31" pos:end="13:32">-&gt;</operator><name pos:start="13:33" pos:end="13:37">flags</name></name> <operator pos:start="13:39" pos:end="13:40">==</operator> <name pos:start="13:42" pos:end="13:46">flags</name></expr>)</condition> <block pos:start="13:49" pos:end="19:9">{<block_content pos:start="15:13" pos:end="17:21">

            <expr_stmt pos:start="15:13" pos:end="15:50"><expr pos:start="15:13" pos:end="15:49"><call pos:start="15:13" pos:end="15:49"><name pos:start="15:13" pos:end="15:40">cpu_breakpoint_remove_by_ref</name><argument_list pos:start="15:41" pos:end="15:49">(<argument pos:start="15:42" pos:end="15:44"><expr pos:start="15:42" pos:end="15:44"><name pos:start="15:42" pos:end="15:44">env</name></expr></argument>, <argument pos:start="15:47" pos:end="15:48"><expr pos:start="15:47" pos:end="15:48"><name pos:start="15:47" pos:end="15:48">bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="17:13" pos:end="17:21">return <expr pos:start="17:20" pos:end="17:20"><literal type="number" pos:start="17:20" pos:end="17:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

    <return pos:start="23:5" pos:end="26:0">return <expr pos:start="23:12" pos:end="23:18"><operator pos:start="23:12" pos:end="23:12">-</operator><name pos:start="23:13" pos:end="23:18">ENOENT</name></expr>;</return>

<cpp:else pos:start="25:1" pos:end="25:5">#<cpp:directive pos:start="25:2" pos:end="25:5">else</cpp:directive></cpp:else>

    <return pos:start="27:5" pos:end="30:0">return <expr pos:start="27:12" pos:end="27:18"><operator pos:start="27:12" pos:end="27:12">-</operator><name pos:start="27:13" pos:end="27:18">ENOSYS</name></expr>;</return>

<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
