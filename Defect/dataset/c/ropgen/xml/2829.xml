<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2829.c" pos:tabs="8"><function pos:start="1:1" pos:end="211:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">ppc6xx_set_irq</name> <parameter_list pos:start="1:28" pos:end="1:61">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:40"><name pos:start="1:29" pos:end="1:32">void</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:40">opaque</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:49"><decl pos:start="1:43" pos:end="1:49"><type pos:start="1:43" pos:end="1:49"><name pos:start="1:43" pos:end="1:45">int</name></type> <name pos:start="1:47" pos:end="1:49">pin</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:60"><decl pos:start="1:52" pos:end="1:60"><type pos:start="1:52" pos:end="1:60"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:60">level</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="211:1">{<block_content pos:start="5:5" pos:end="209:5">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">env</name> <init pos:start="5:19" pos:end="5:26">= <expr pos:start="5:21" pos:end="5:26"><name pos:start="5:21" pos:end="5:26">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="12:0"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">cur_level</name></decl>;</decl_stmt>



<cpp:if pos:start="11:1" pos:end="11:26">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:26"><call pos:start="11:5" pos:end="11:26"><name pos:start="11:5" pos:end="11:11">defined</name><argument_list pos:start="11:12" pos:end="11:26">(<argument pos:start="11:13" pos:end="11:25"><expr pos:start="11:13" pos:end="11:25"><name pos:start="11:13" pos:end="11:25">PPC_DEBUG_IRQ</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="13:5" pos:end="22:0"><if pos:start="13:5" pos:end="22:0">if <condition pos:start="13:8" pos:end="13:31">(<expr pos:start="13:9" pos:end="13:30"><name pos:start="13:9" pos:end="13:16">loglevel</name> <operator pos:start="13:18" pos:end="13:18">&amp;</operator> <name pos:start="13:20" pos:end="13:30">CPU_LOG_INT</name></expr>)</condition> <block pos:start="13:33" pos:end="22:0">{<block_content pos:start="15:9" pos:end="17:33">

        <expr_stmt pos:start="15:9" pos:end="17:33"><expr pos:start="15:9" pos:end="17:32"><call pos:start="15:9" pos:end="17:32"><name pos:start="15:9" pos:end="15:15">fprintf</name><argument_list pos:start="15:16" pos:end="17:32">(<argument pos:start="15:17" pos:end="15:23"><expr pos:start="15:17" pos:end="15:23"><name pos:start="15:17" pos:end="15:23">logfile</name></expr></argument>, <argument pos:start="15:26" pos:end="15:55"><expr pos:start="15:26" pos:end="15:55"><literal type="string" pos:start="15:26" pos:end="15:55">"%s: env %p pin %d level %d\n"</literal></expr></argument>, <argument pos:start="15:58" pos:end="15:65"><expr pos:start="15:58" pos:end="15:65"><name pos:start="15:58" pos:end="15:65">__func__</name></expr></argument>,

                <argument pos:start="17:17" pos:end="17:19"><expr pos:start="17:17" pos:end="17:19"><name pos:start="17:17" pos:end="17:19">env</name></expr></argument>, <argument pos:start="17:22" pos:end="17:24"><expr pos:start="17:22" pos:end="17:24"><name pos:start="17:22" pos:end="17:24">pin</name></expr></argument>, <argument pos:start="17:27" pos:end="17:31"><expr pos:start="17:27" pos:end="17:31"><name pos:start="17:27" pos:end="17:31">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="23:5" pos:end="23:50"><expr pos:start="23:5" pos:end="23:49"><name pos:start="23:5" pos:end="23:13">cur_level</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <operator pos:start="23:17" pos:end="23:17">(</operator><name pos:start="23:18" pos:end="23:37"><name pos:start="23:18" pos:end="23:20">env</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:37">irq_input_state</name></name> <operator pos:start="23:39" pos:end="23:40">&gt;&gt;</operator> <name pos:start="23:42" pos:end="23:44">pin</name><operator pos:start="23:45" pos:end="23:45">)</operator> <operator pos:start="23:47" pos:end="23:47">&amp;</operator> <literal type="number" pos:start="23:49" pos:end="23:49">1</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="25:5" pos:end="25:40">/* Don't generate spurious events */</comment>

    <if_stmt pos:start="27:5" pos:end="209:5"><if pos:start="27:5" pos:end="209:5">if <condition pos:start="27:8" pos:end="27:73">(<expr pos:start="27:9" pos:end="27:72"><operator pos:start="27:9" pos:end="27:9">(</operator><name pos:start="27:10" pos:end="27:18">cur_level</name> <operator pos:start="27:20" pos:end="27:21">==</operator> <literal type="number" pos:start="27:23" pos:end="27:23">1</literal> <operator pos:start="27:25" pos:end="27:26">&amp;&amp;</operator> <name pos:start="27:28" pos:end="27:32">level</name> <operator pos:start="27:34" pos:end="27:35">==</operator> <literal type="number" pos:start="27:37" pos:end="27:37">0</literal><operator pos:start="27:38" pos:end="27:38">)</operator> <operator pos:start="27:40" pos:end="27:41">||</operator> <operator pos:start="27:43" pos:end="27:43">(</operator><name pos:start="27:44" pos:end="27:52">cur_level</name> <operator pos:start="27:54" pos:end="27:55">==</operator> <literal type="number" pos:start="27:57" pos:end="27:57">0</literal> <operator pos:start="27:59" pos:end="27:60">&amp;&amp;</operator> <name pos:start="27:62" pos:end="27:66">level</name> <operator pos:start="27:68" pos:end="27:69">!=</operator> <literal type="number" pos:start="27:71" pos:end="27:71">0</literal><operator pos:start="27:72" pos:end="27:72">)</operator></expr>)</condition> <block pos:start="27:75" pos:end="209:5">{<block_content pos:start="29:9" pos:end="207:48">

        <switch pos:start="29:9" pos:end="199:9">switch <condition pos:start="29:16" pos:end="29:20">(<expr pos:start="29:17" pos:end="29:19"><name pos:start="29:17" pos:end="29:19">pin</name></expr>)</condition> <block pos:start="29:22" pos:end="199:9">{<block_content pos:start="31:9" pos:end="197:19">

        <case pos:start="31:9" pos:end="36:0">case <expr pos:start="31:14" pos:end="31:29"><name pos:start="31:14" pos:end="31:29">PPC6xx_INPUT_INT</name></expr>:</case>

            <comment type="block" pos:start="33:13" pos:end="33:47">/* Level sensitive - active high */</comment>

<cpp:if pos:start="35:1" pos:end="35:26">#<cpp:directive pos:start="35:2" pos:end="35:3">if</cpp:directive> <expr pos:start="35:5" pos:end="35:26"><call pos:start="35:5" pos:end="35:26"><name pos:start="35:5" pos:end="35:11">defined</name><argument_list pos:start="35:12" pos:end="35:26">(<argument pos:start="35:13" pos:end="35:25"><expr pos:start="35:13" pos:end="35:25"><name pos:start="35:13" pos:end="35:25">PPC_DEBUG_IRQ</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="37:13" pos:end="46:0"><if pos:start="37:13" pos:end="46:0">if <condition pos:start="37:16" pos:end="37:39">(<expr pos:start="37:17" pos:end="37:38"><name pos:start="37:17" pos:end="37:24">loglevel</name> <operator pos:start="37:26" pos:end="37:26">&amp;</operator> <name pos:start="37:28" pos:end="37:38">CPU_LOG_INT</name></expr>)</condition> <block pos:start="37:41" pos:end="46:0">{<block_content pos:start="39:17" pos:end="41:41">

                <expr_stmt pos:start="39:17" pos:end="41:41"><expr pos:start="39:17" pos:end="41:40"><call pos:start="39:17" pos:end="41:40"><name pos:start="39:17" pos:end="39:23">fprintf</name><argument_list pos:start="39:24" pos:end="41:40">(<argument pos:start="39:25" pos:end="39:31"><expr pos:start="39:25" pos:end="39:31"><name pos:start="39:25" pos:end="39:31">logfile</name></expr></argument>, <argument pos:start="39:34" pos:end="39:73"><expr pos:start="39:34" pos:end="39:73"><literal type="string" pos:start="39:34" pos:end="39:73">"%s: set the external IRQ state to %d\n"</literal></expr></argument>,

                        <argument pos:start="41:25" pos:end="41:32"><expr pos:start="41:25" pos:end="41:32"><name pos:start="41:25" pos:end="41:32">__func__</name></expr></argument>, <argument pos:start="41:35" pos:end="41:39"><expr pos:start="41:35" pos:end="41:39"><name pos:start="41:35" pos:end="41:39">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="47:13" pos:end="47:55"><expr pos:start="47:13" pos:end="47:54"><call pos:start="47:13" pos:end="47:54"><name pos:start="47:13" pos:end="47:23">ppc_set_irq</name><argument_list pos:start="47:24" pos:end="47:54">(<argument pos:start="47:25" pos:end="47:27"><expr pos:start="47:25" pos:end="47:27"><name pos:start="47:25" pos:end="47:27">env</name></expr></argument>, <argument pos:start="47:30" pos:end="47:46"><expr pos:start="47:30" pos:end="47:46"><name pos:start="47:30" pos:end="47:46">PPC_INTERRUPT_EXT</name></expr></argument>, <argument pos:start="47:49" pos:end="47:53"><expr pos:start="47:49" pos:end="47:53"><name pos:start="47:49" pos:end="47:53">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="49:13" pos:end="49:18">break;</break>

        <case pos:start="51:9" pos:end="56:0">case <expr pos:start="51:14" pos:end="51:29"><name pos:start="51:14" pos:end="51:29">PPC6xx_INPUT_SMI</name></expr>:</case>

            <comment type="block" pos:start="53:13" pos:end="53:47">/* Level sensitive - active high */</comment>

<cpp:if pos:start="55:1" pos:end="55:26">#<cpp:directive pos:start="55:2" pos:end="55:3">if</cpp:directive> <expr pos:start="55:5" pos:end="55:26"><call pos:start="55:5" pos:end="55:26"><name pos:start="55:5" pos:end="55:11">defined</name><argument_list pos:start="55:12" pos:end="55:26">(<argument pos:start="55:13" pos:end="55:25"><expr pos:start="55:13" pos:end="55:25"><name pos:start="55:13" pos:end="55:25">PPC_DEBUG_IRQ</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="57:13" pos:end="66:0"><if pos:start="57:13" pos:end="66:0">if <condition pos:start="57:16" pos:end="57:39">(<expr pos:start="57:17" pos:end="57:38"><name pos:start="57:17" pos:end="57:24">loglevel</name> <operator pos:start="57:26" pos:end="57:26">&amp;</operator> <name pos:start="57:28" pos:end="57:38">CPU_LOG_INT</name></expr>)</condition> <block pos:start="57:41" pos:end="66:0">{<block_content pos:start="59:17" pos:end="61:41">

                <expr_stmt pos:start="59:17" pos:end="61:41"><expr pos:start="59:17" pos:end="61:40"><call pos:start="59:17" pos:end="61:40"><name pos:start="59:17" pos:end="59:23">fprintf</name><argument_list pos:start="59:24" pos:end="61:40">(<argument pos:start="59:25" pos:end="59:31"><expr pos:start="59:25" pos:end="59:31"><name pos:start="59:25" pos:end="59:31">logfile</name></expr></argument>, <argument pos:start="59:34" pos:end="59:68"><expr pos:start="59:34" pos:end="59:68"><literal type="string" pos:start="59:34" pos:end="59:68">"%s: set the SMI IRQ state to %d\n"</literal></expr></argument>,

                        <argument pos:start="61:25" pos:end="61:32"><expr pos:start="61:25" pos:end="61:32"><name pos:start="61:25" pos:end="61:32">__func__</name></expr></argument>, <argument pos:start="61:35" pos:end="61:39"><expr pos:start="61:35" pos:end="61:39"><name pos:start="61:35" pos:end="61:39">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="67:13" pos:end="67:55"><expr pos:start="67:13" pos:end="67:54"><call pos:start="67:13" pos:end="67:54"><name pos:start="67:13" pos:end="67:23">ppc_set_irq</name><argument_list pos:start="67:24" pos:end="67:54">(<argument pos:start="67:25" pos:end="67:27"><expr pos:start="67:25" pos:end="67:27"><name pos:start="67:25" pos:end="67:27">env</name></expr></argument>, <argument pos:start="67:30" pos:end="67:46"><expr pos:start="67:30" pos:end="67:46"><name pos:start="67:30" pos:end="67:46">PPC_INTERRUPT_SMI</name></expr></argument>, <argument pos:start="67:49" pos:end="67:53"><expr pos:start="67:49" pos:end="67:53"><name pos:start="67:49" pos:end="67:53">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="69:13" pos:end="69:18">break;</break>

        <case pos:start="71:9" pos:end="71:30">case <expr pos:start="71:14" pos:end="71:29"><name pos:start="71:14" pos:end="71:29">PPC6xx_INPUT_MCP</name></expr>:</case>

            <comment type="block" pos:start="73:13" pos:end="73:41">/* Negative edge sensitive */</comment>

            <comment type="block" pos:start="75:13" pos:end="79:15">/* XXX: TODO: actual reaction may depends on HID0 status

             *            603/604/740/750: check HID0[EMCP]

             */</comment>

            <if_stmt pos:start="81:13" pos:end="97:13"><if pos:start="81:13" pos:end="97:13">if <condition pos:start="81:16" pos:end="81:45">(<expr pos:start="81:17" pos:end="81:44"><name pos:start="81:17" pos:end="81:25">cur_level</name> <operator pos:start="81:27" pos:end="81:28">==</operator> <literal type="number" pos:start="81:30" pos:end="81:30">1</literal> <operator pos:start="81:32" pos:end="81:33">&amp;&amp;</operator> <name pos:start="81:35" pos:end="81:39">level</name> <operator pos:start="81:41" pos:end="81:42">==</operator> <literal type="number" pos:start="81:44" pos:end="81:44">0</literal></expr>)</condition> <block pos:start="81:47" pos:end="97:13">{<block_content pos:start="85:17" pos:end="95:55">

<cpp:if pos:start="83:1" pos:end="83:26">#<cpp:directive pos:start="83:2" pos:end="83:3">if</cpp:directive> <expr pos:start="83:5" pos:end="83:26"><call pos:start="83:5" pos:end="83:26"><name pos:start="83:5" pos:end="83:11">defined</name><argument_list pos:start="83:12" pos:end="83:26">(<argument pos:start="83:13" pos:end="83:25"><expr pos:start="83:13" pos:end="83:25"><name pos:start="83:13" pos:end="83:25">PPC_DEBUG_IRQ</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <if_stmt pos:start="85:17" pos:end="94:0"><if pos:start="85:17" pos:end="94:0">if <condition pos:start="85:20" pos:end="85:43">(<expr pos:start="85:21" pos:end="85:42"><name pos:start="85:21" pos:end="85:28">loglevel</name> <operator pos:start="85:30" pos:end="85:30">&amp;</operator> <name pos:start="85:32" pos:end="85:42">CPU_LOG_INT</name></expr>)</condition> <block pos:start="85:45" pos:end="94:0">{<block_content pos:start="87:21" pos:end="89:38">

                    <expr_stmt pos:start="87:21" pos:end="89:38"><expr pos:start="87:21" pos:end="89:37"><call pos:start="87:21" pos:end="89:37"><name pos:start="87:21" pos:end="87:27">fprintf</name><argument_list pos:start="87:28" pos:end="89:37">(<argument pos:start="87:29" pos:end="87:35"><expr pos:start="87:29" pos:end="87:35"><name pos:start="87:29" pos:end="87:35">logfile</name></expr></argument>, <argument pos:start="87:38" pos:end="87:70"><expr pos:start="87:38" pos:end="87:70"><literal type="string" pos:start="87:38" pos:end="87:70">"%s: raise machine check state\n"</literal></expr></argument>,

                            <argument pos:start="89:29" pos:end="89:36"><expr pos:start="89:29" pos:end="89:36"><name pos:start="89:29" pos:end="89:36">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="93:1" pos:end="93:6">#<cpp:directive pos:start="93:2" pos:end="93:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="95:17" pos:end="95:55"><expr pos:start="95:17" pos:end="95:54"><call pos:start="95:17" pos:end="95:54"><name pos:start="95:17" pos:end="95:27">ppc_set_irq</name><argument_list pos:start="95:28" pos:end="95:54">(<argument pos:start="95:29" pos:end="95:31"><expr pos:start="95:29" pos:end="95:31"><name pos:start="95:29" pos:end="95:31">env</name></expr></argument>, <argument pos:start="95:34" pos:end="95:50"><expr pos:start="95:34" pos:end="95:50"><name pos:start="95:34" pos:end="95:50">PPC_INTERRUPT_MCK</name></expr></argument>, <argument pos:start="95:53" pos:end="95:53"><expr pos:start="95:53" pos:end="95:53"><literal type="number" pos:start="95:53" pos:end="95:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="99:13" pos:end="99:18">break;</break>

        <case pos:start="101:9" pos:end="101:35">case <expr pos:start="101:14" pos:end="101:34"><name pos:start="101:14" pos:end="101:34">PPC6xx_INPUT_CKSTP_IN</name></expr>:</case>

            <comment type="block" pos:start="103:13" pos:end="103:46">/* Level sensitive - active low */</comment>

            <comment type="block" pos:start="105:13" pos:end="105:62">/* XXX: TODO: relay the signal to CKSTP_OUT pin */</comment>

            <if_stmt pos:start="107:13" pos:end="135:13"><if pos:start="107:13" pos:end="121:13">if <condition pos:start="107:16" pos:end="107:22">(<expr pos:start="107:17" pos:end="107:21"><name pos:start="107:17" pos:end="107:21">level</name></expr>)</condition> <block pos:start="107:24" pos:end="121:13">{<block_content pos:start="111:17" pos:end="119:32">

<cpp:if pos:start="109:1" pos:end="109:26">#<cpp:directive pos:start="109:2" pos:end="109:3">if</cpp:directive> <expr pos:start="109:5" pos:end="109:26"><call pos:start="109:5" pos:end="109:26"><name pos:start="109:5" pos:end="109:11">defined</name><argument_list pos:start="109:12" pos:end="109:26">(<argument pos:start="109:13" pos:end="109:25"><expr pos:start="109:13" pos:end="109:25"><name pos:start="109:13" pos:end="109:25">PPC_DEBUG_IRQ</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <if_stmt pos:start="111:17" pos:end="118:0"><if pos:start="111:17" pos:end="118:0">if <condition pos:start="111:20" pos:end="111:43">(<expr pos:start="111:21" pos:end="111:42"><name pos:start="111:21" pos:end="111:28">loglevel</name> <operator pos:start="111:30" pos:end="111:30">&amp;</operator> <name pos:start="111:32" pos:end="111:42">CPU_LOG_INT</name></expr>)</condition> <block pos:start="111:45" pos:end="118:0">{<block_content pos:start="113:21" pos:end="113:69">

                    <expr_stmt pos:start="113:21" pos:end="113:69"><expr pos:start="113:21" pos:end="113:68"><call pos:start="113:21" pos:end="113:68"><name pos:start="113:21" pos:end="113:27">fprintf</name><argument_list pos:start="113:28" pos:end="113:68">(<argument pos:start="113:29" pos:end="113:35"><expr pos:start="113:29" pos:end="113:35"><name pos:start="113:29" pos:end="113:35">logfile</name></expr></argument>, <argument pos:start="113:38" pos:end="113:57"><expr pos:start="113:38" pos:end="113:57"><literal type="string" pos:start="113:38" pos:end="113:57">"%s: stop the CPU\n"</literal></expr></argument>, <argument pos:start="113:60" pos:end="113:67"><expr pos:start="113:60" pos:end="113:67"><name pos:start="113:60" pos:end="113:67">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="117:1" pos:end="117:6">#<cpp:directive pos:start="117:2" pos:end="117:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="119:17" pos:end="119:32"><expr pos:start="119:17" pos:end="119:31"><name pos:start="119:17" pos:end="119:27"><name pos:start="119:17" pos:end="119:19">env</name><operator pos:start="119:20" pos:end="119:21">-&gt;</operator><name pos:start="119:22" pos:end="119:27">halted</name></name> <operator pos:start="119:29" pos:end="119:29">=</operator> <literal type="number" pos:start="119:31" pos:end="119:31">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="121:15" pos:end="135:13">else <block pos:start="121:20" pos:end="135:13">{<block_content pos:start="125:17" pos:end="133:32">

<cpp:if pos:start="123:1" pos:end="123:26">#<cpp:directive pos:start="123:2" pos:end="123:3">if</cpp:directive> <expr pos:start="123:5" pos:end="123:26"><call pos:start="123:5" pos:end="123:26"><name pos:start="123:5" pos:end="123:11">defined</name><argument_list pos:start="123:12" pos:end="123:26">(<argument pos:start="123:13" pos:end="123:25"><expr pos:start="123:13" pos:end="123:25"><name pos:start="123:13" pos:end="123:25">PPC_DEBUG_IRQ</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <if_stmt pos:start="125:17" pos:end="132:0"><if pos:start="125:17" pos:end="132:0">if <condition pos:start="125:20" pos:end="125:43">(<expr pos:start="125:21" pos:end="125:42"><name pos:start="125:21" pos:end="125:28">loglevel</name> <operator pos:start="125:30" pos:end="125:30">&amp;</operator> <name pos:start="125:32" pos:end="125:42">CPU_LOG_INT</name></expr>)</condition> <block pos:start="125:45" pos:end="132:0">{<block_content pos:start="127:21" pos:end="127:72">

                    <expr_stmt pos:start="127:21" pos:end="127:72"><expr pos:start="127:21" pos:end="127:71"><call pos:start="127:21" pos:end="127:71"><name pos:start="127:21" pos:end="127:27">fprintf</name><argument_list pos:start="127:28" pos:end="127:71">(<argument pos:start="127:29" pos:end="127:35"><expr pos:start="127:29" pos:end="127:35"><name pos:start="127:29" pos:end="127:35">logfile</name></expr></argument>, <argument pos:start="127:38" pos:end="127:60"><expr pos:start="127:38" pos:end="127:60"><literal type="string" pos:start="127:38" pos:end="127:60">"%s: restart the CPU\n"</literal></expr></argument>, <argument pos:start="127:63" pos:end="127:70"><expr pos:start="127:63" pos:end="127:70"><name pos:start="127:63" pos:end="127:70">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="131:1" pos:end="131:6">#<cpp:directive pos:start="131:2" pos:end="131:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="133:17" pos:end="133:32"><expr pos:start="133:17" pos:end="133:31"><name pos:start="133:17" pos:end="133:27"><name pos:start="133:17" pos:end="133:19">env</name><operator pos:start="133:20" pos:end="133:21">-&gt;</operator><name pos:start="133:22" pos:end="133:27">halted</name></name> <operator pos:start="133:29" pos:end="133:29">=</operator> <literal type="number" pos:start="133:31" pos:end="133:31">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="137:13" pos:end="137:18">break;</break>

        <case pos:start="139:9" pos:end="139:33">case <expr pos:start="139:14" pos:end="139:32"><name pos:start="139:14" pos:end="139:32">PPC6xx_INPUT_HRESET</name></expr>:</case>

            <comment type="block" pos:start="141:13" pos:end="141:46">/* Level sensitive - active low */</comment>

            <if_stmt pos:start="143:13" pos:end="161:13"><if pos:start="143:13" pos:end="161:13">if <condition pos:start="143:16" pos:end="143:22">(<expr pos:start="143:17" pos:end="143:21"><name pos:start="143:17" pos:end="143:21">level</name></expr>)</condition> <block pos:start="143:24" pos:end="161:13">{<block_content>

<cpp:if pos:start="145:1" pos:end="145:5">#<cpp:directive pos:start="145:2" pos:end="145:3">if</cpp:directive> <expr pos:start="145:5" pos:end="145:5"><literal type="number" pos:start="145:5" pos:end="145:5">0</literal></expr></cpp:if> <comment type="line" pos:start="145:7" pos:end="145:19">// XXX: TOFIX</comment>

<cpp:if pos:start="147:1" pos:end="147:26">#<cpp:directive pos:start="147:2" pos:end="147:3">if</cpp:directive> <expr pos:start="147:5" pos:end="147:26"><call pos:start="147:5" pos:end="147:26"><name pos:start="147:5" pos:end="147:11">defined</name><argument_list pos:start="147:12" pos:end="147:26">(<argument pos:start="147:13" pos:end="147:25"><expr pos:start="147:13" pos:end="147:25"><name pos:start="147:13" pos:end="147:25">PPC_DEBUG_IRQ</name></expr></argument>)</argument_list></call></expr></cpp:if>

                if (loglevel &amp; CPU_LOG_INT) {

                    fprintf(logfile, "%s: reset the CPU\n", __func__);

                }

<cpp:endif pos:start="155:1" pos:end="155:6">#<cpp:directive pos:start="155:2" pos:end="155:6">endif</cpp:directive></cpp:endif>

                cpu_reset(env);

<cpp:endif pos:start="159:1" pos:end="159:6">#<cpp:directive pos:start="159:2" pos:end="159:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if></if_stmt>

            <break pos:start="163:13" pos:end="163:18">break;</break>

        <case pos:start="165:9" pos:end="168:0">case <expr pos:start="165:14" pos:end="165:32"><name pos:start="165:14" pos:end="165:32">PPC6xx_INPUT_SRESET</name></expr>:</case>

<cpp:if pos:start="167:1" pos:end="167:26">#<cpp:directive pos:start="167:2" pos:end="167:3">if</cpp:directive> <expr pos:start="167:5" pos:end="167:26"><call pos:start="167:5" pos:end="167:26"><name pos:start="167:5" pos:end="167:11">defined</name><argument_list pos:start="167:12" pos:end="167:26">(<argument pos:start="167:13" pos:end="167:25"><expr pos:start="167:13" pos:end="167:25"><name pos:start="167:13" pos:end="167:25">PPC_DEBUG_IRQ</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="169:13" pos:end="178:0"><if pos:start="169:13" pos:end="178:0">if <condition pos:start="169:16" pos:end="169:39">(<expr pos:start="169:17" pos:end="169:38"><name pos:start="169:17" pos:end="169:24">loglevel</name> <operator pos:start="169:26" pos:end="169:26">&amp;</operator> <name pos:start="169:28" pos:end="169:38">CPU_LOG_INT</name></expr>)</condition> <block pos:start="169:41" pos:end="178:0">{<block_content pos:start="171:17" pos:end="173:41">

                <expr_stmt pos:start="171:17" pos:end="173:41"><expr pos:start="171:17" pos:end="173:40"><call pos:start="171:17" pos:end="173:40"><name pos:start="171:17" pos:end="171:23">fprintf</name><argument_list pos:start="171:24" pos:end="173:40">(<argument pos:start="171:25" pos:end="171:31"><expr pos:start="171:25" pos:end="171:31"><name pos:start="171:25" pos:end="171:31">logfile</name></expr></argument>, <argument pos:start="171:34" pos:end="171:70"><expr pos:start="171:34" pos:end="171:70"><literal type="string" pos:start="171:34" pos:end="171:70">"%s: set the RESET IRQ state to %d\n"</literal></expr></argument>,

                        <argument pos:start="173:25" pos:end="173:32"><expr pos:start="173:25" pos:end="173:32"><name pos:start="173:25" pos:end="173:32">__func__</name></expr></argument>, <argument pos:start="173:35" pos:end="173:39"><expr pos:start="173:35" pos:end="173:39"><name pos:start="173:35" pos:end="173:39">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="177:1" pos:end="177:6">#<cpp:directive pos:start="177:2" pos:end="177:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="179:13" pos:end="179:57"><expr pos:start="179:13" pos:end="179:56"><call pos:start="179:13" pos:end="179:56"><name pos:start="179:13" pos:end="179:23">ppc_set_irq</name><argument_list pos:start="179:24" pos:end="179:56">(<argument pos:start="179:25" pos:end="179:27"><expr pos:start="179:25" pos:end="179:27"><name pos:start="179:25" pos:end="179:27">env</name></expr></argument>, <argument pos:start="179:30" pos:end="179:48"><expr pos:start="179:30" pos:end="179:48"><name pos:start="179:30" pos:end="179:48">PPC_INTERRUPT_RESET</name></expr></argument>, <argument pos:start="179:51" pos:end="179:55"><expr pos:start="179:51" pos:end="179:55"><name pos:start="179:51" pos:end="179:55">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="181:13" pos:end="181:18">break;</break>

        <default pos:start="183:9" pos:end="188:0">default:</default>

            <comment type="block" pos:start="185:13" pos:end="185:42">/* Unknown pin - do nothing */</comment>

<cpp:if pos:start="187:1" pos:end="187:26">#<cpp:directive pos:start="187:2" pos:end="187:3">if</cpp:directive> <expr pos:start="187:5" pos:end="187:26"><call pos:start="187:5" pos:end="187:26"><name pos:start="187:5" pos:end="187:11">defined</name><argument_list pos:start="187:12" pos:end="187:26">(<argument pos:start="187:13" pos:end="187:25"><expr pos:start="187:13" pos:end="187:25"><name pos:start="187:13" pos:end="187:25">PPC_DEBUG_IRQ</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="189:13" pos:end="196:0"><if pos:start="189:13" pos:end="196:0">if <condition pos:start="189:16" pos:end="189:39">(<expr pos:start="189:17" pos:end="189:38"><name pos:start="189:17" pos:end="189:24">loglevel</name> <operator pos:start="189:26" pos:end="189:26">&amp;</operator> <name pos:start="189:28" pos:end="189:38">CPU_LOG_INT</name></expr>)</condition> <block pos:start="189:41" pos:end="196:0">{<block_content pos:start="191:17" pos:end="191:76">

                <expr_stmt pos:start="191:17" pos:end="191:76"><expr pos:start="191:17" pos:end="191:75"><call pos:start="191:17" pos:end="191:75"><name pos:start="191:17" pos:end="191:23">fprintf</name><argument_list pos:start="191:24" pos:end="191:75">(<argument pos:start="191:25" pos:end="191:31"><expr pos:start="191:25" pos:end="191:31"><name pos:start="191:25" pos:end="191:31">logfile</name></expr></argument>, <argument pos:start="191:34" pos:end="191:59"><expr pos:start="191:34" pos:end="191:59"><literal type="string" pos:start="191:34" pos:end="191:59">"%s: unknown IRQ pin %d\n"</literal></expr></argument>, <argument pos:start="191:62" pos:end="191:69"><expr pos:start="191:62" pos:end="191:69"><name pos:start="191:62" pos:end="191:69">__func__</name></expr></argument>, <argument pos:start="191:72" pos:end="191:74"><expr pos:start="191:72" pos:end="191:74"><name pos:start="191:72" pos:end="191:74">pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="195:1" pos:end="195:6">#<cpp:directive pos:start="195:2" pos:end="195:6">endif</cpp:directive></cpp:endif>

            <return pos:start="197:13" pos:end="197:19">return;</return>

        </block_content>}</block></switch>

        <if_stmt pos:start="201:9" pos:end="207:48"><if pos:start="201:9" pos:end="203:45">if <condition pos:start="201:12" pos:end="201:18">(<expr pos:start="201:13" pos:end="201:17"><name pos:start="201:13" pos:end="201:17">level</name></expr>)</condition><block type="pseudo" pos:start="203:13" pos:end="203:45"><block_content pos:start="203:13" pos:end="203:45">

            <expr_stmt pos:start="203:13" pos:end="203:45"><expr pos:start="203:13" pos:end="203:44"><name pos:start="203:13" pos:end="203:32"><name pos:start="203:13" pos:end="203:15">env</name><operator pos:start="203:16" pos:end="203:17">-&gt;</operator><name pos:start="203:18" pos:end="203:32">irq_input_state</name></name> <operator pos:start="203:34" pos:end="203:35">|=</operator> <literal type="number" pos:start="203:37" pos:end="203:37">1</literal> <operator pos:start="203:39" pos:end="203:40">&lt;&lt;</operator> <name pos:start="203:42" pos:end="203:44">pin</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="205:9" pos:end="207:48">else<block type="pseudo" pos:start="207:13" pos:end="207:48"><block_content pos:start="207:13" pos:end="207:48">

            <expr_stmt pos:start="207:13" pos:end="207:48"><expr pos:start="207:13" pos:end="207:47"><name pos:start="207:13" pos:end="207:32"><name pos:start="207:13" pos:end="207:15">env</name><operator pos:start="207:16" pos:end="207:17">-&gt;</operator><name pos:start="207:18" pos:end="207:32">irq_input_state</name></name> <operator pos:start="207:34" pos:end="207:35">&amp;=</operator> <operator pos:start="207:37" pos:end="207:37">~</operator><operator pos:start="207:38" pos:end="207:38">(</operator><literal type="number" pos:start="207:39" pos:end="207:39">1</literal> <operator pos:start="207:41" pos:end="207:42">&lt;&lt;</operator> <name pos:start="207:44" pos:end="207:46">pin</name><operator pos:start="207:47" pos:end="207:47">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
