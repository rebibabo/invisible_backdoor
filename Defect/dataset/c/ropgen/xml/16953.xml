<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16953.c" pos:tabs="8"><function pos:start="1:1" pos:end="283:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:49">gen_intermediate_code_internal</name><parameter_list pos:start="1:50" pos:end="3:78">(<parameter pos:start="1:51" pos:end="1:71"><decl pos:start="1:51" pos:end="1:71"><type pos:start="1:51" pos:end="1:71"><name pos:start="1:51" pos:end="1:66">TranslationBlock</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type> <name pos:start="1:70" pos:end="1:71">tb</name></decl></parameter>,

                                                  <parameter pos:start="3:51" pos:end="3:57"><decl pos:start="3:51" pos:end="3:57"><type pos:start="3:51" pos:end="3:57"><name pos:start="3:51" pos:end="3:53">int</name></type> <name pos:start="3:55" pos:end="3:57">spc</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:77"><decl pos:start="3:60" pos:end="3:77"><type pos:start="3:60" pos:end="3:77"><name pos:start="3:60" pos:end="3:72">CPUSPARCState</name> <modifier pos:start="3:74" pos:end="3:74">*</modifier></type><name pos:start="3:75" pos:end="3:77">env</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="283:1">{<block_content pos:start="7:5" pos:end="282:0">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">target_ulong</name></type> <name pos:start="7:18" pos:end="7:25">pc_start</name></decl>, <decl pos:start="7:28" pos:end="7:34"><type ref="prev" pos:start="7:5" pos:end="7:16"/><name pos:start="7:28" pos:end="7:34">last_pc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">uint16_t</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:25">gen_opc_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16">DisasContext</name></type> <name pos:start="11:18" pos:end="11:20">dc1</name></decl>, <decl pos:start="11:23" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:16"><modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:25">dc</name> <init pos:start="11:27" pos:end="11:32">= <expr pos:start="11:29" pos:end="11:32"><operator pos:start="11:29" pos:end="11:29">&amp;</operator><name pos:start="11:30" pos:end="11:32">dc1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17">CPUBreakpoint</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:21">bp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">j</name></decl>, <decl pos:start="15:12" pos:end="15:18"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:13">lj</name> <init pos:start="15:15" pos:end="15:18">= <expr pos:start="15:17" pos:end="15:18"><operator pos:start="15:17" pos:end="15:17">-</operator><literal type="number" pos:start="15:18" pos:end="15:18">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:17">num_insns</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:17">max_insns</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:40"><expr pos:start="23:5" pos:end="23:39"><call pos:start="23:5" pos:end="23:39"><name pos:start="23:5" pos:end="23:10">memset</name><argument_list pos:start="23:11" pos:end="23:39">(<argument pos:start="23:12" pos:end="23:13"><expr pos:start="23:12" pos:end="23:13"><name pos:start="23:12" pos:end="23:13">dc</name></expr></argument>, <argument pos:start="23:16" pos:end="23:16"><expr pos:start="23:16" pos:end="23:16"><literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr></argument>, <argument pos:start="23:19" pos:end="23:38"><expr pos:start="23:19" pos:end="23:38"><sizeof pos:start="23:19" pos:end="23:38">sizeof<argument_list pos:start="23:25" pos:end="23:38">(<argument pos:start="23:26" pos:end="23:37"><expr pos:start="23:26" pos:end="23:37"><name pos:start="23:26" pos:end="23:37">DisasContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:16"><expr pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:6">dc</name><operator pos:start="25:7" pos:end="25:8">-&gt;</operator><name pos:start="25:9" pos:end="25:10">tb</name></name> <operator pos:start="25:12" pos:end="25:12">=</operator> <name pos:start="25:14" pos:end="25:15">tb</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:22"><expr pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:12">pc_start</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <name pos:start="27:16" pos:end="27:21"><name pos:start="27:16" pos:end="27:17">tb</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:21">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:22"><expr pos:start="29:5" pos:end="29:21"><name pos:start="29:5" pos:end="29:10"><name pos:start="29:5" pos:end="29:6">dc</name><operator pos:start="29:7" pos:end="29:8">-&gt;</operator><name pos:start="29:9" pos:end="29:10">pc</name></name> <operator pos:start="29:12" pos:end="29:12">=</operator> <name pos:start="29:14" pos:end="29:21">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:21"><expr pos:start="31:5" pos:end="31:20"><name pos:start="31:5" pos:end="31:11">last_pc</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:20"><name pos:start="31:15" pos:end="31:16">dc</name><operator pos:start="31:17" pos:end="31:18">-&gt;</operator><name pos:start="31:19" pos:end="31:20">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:41"><expr pos:start="33:5" pos:end="33:40"><name pos:start="33:5" pos:end="33:11"><name pos:start="33:5" pos:end="33:6">dc</name><operator pos:start="33:7" pos:end="33:8">-&gt;</operator><name pos:start="33:9" pos:end="33:11">npc</name></name> <operator pos:start="33:13" pos:end="33:13">=</operator> <operator pos:start="33:15" pos:end="33:15">(</operator><name pos:start="33:16" pos:end="33:27">target_ulong</name><operator pos:start="33:28" pos:end="33:28">)</operator> <name pos:start="33:30" pos:end="33:40"><name pos:start="33:30" pos:end="33:31">tb</name><operator pos:start="33:32" pos:end="33:33">-&gt;</operator><name pos:start="33:34" pos:end="33:40">cs_base</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:30"><expr pos:start="35:5" pos:end="35:29"><name pos:start="35:5" pos:end="35:13"><name pos:start="35:5" pos:end="35:6">dc</name><operator pos:start="35:7" pos:end="35:8">-&gt;</operator><name pos:start="35:9" pos:end="35:13">cc_op</name></name> <operator pos:start="35:15" pos:end="35:15">=</operator> <name pos:start="35:17" pos:end="35:29">CC_OP_DYNAMIC</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:37"><expr pos:start="37:5" pos:end="37:36"><name pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:6">dc</name><operator pos:start="37:7" pos:end="37:8">-&gt;</operator><name pos:start="37:9" pos:end="37:15">mem_idx</name></name> <operator pos:start="37:17" pos:end="37:17">=</operator> <call pos:start="37:19" pos:end="37:36"><name pos:start="37:19" pos:end="37:31">cpu_mmu_index</name><argument_list pos:start="37:32" pos:end="37:36">(<argument pos:start="37:33" pos:end="37:35"><expr pos:start="37:33" pos:end="37:35"><name pos:start="37:33" pos:end="37:35">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:23"><expr pos:start="39:5" pos:end="39:22"><name pos:start="39:5" pos:end="39:11"><name pos:start="39:5" pos:end="39:6">dc</name><operator pos:start="39:7" pos:end="39:8">-&gt;</operator><name pos:start="39:9" pos:end="39:11">def</name></name> <operator pos:start="39:13" pos:end="39:13">=</operator> <name pos:start="39:15" pos:end="39:22"><name pos:start="39:15" pos:end="39:17">env</name><operator pos:start="39:18" pos:end="39:19">-&gt;</operator><name pos:start="39:20" pos:end="39:22">def</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="50:0"><if pos:start="41:5" pos:end="43:47">if <condition pos:start="41:8" pos:end="41:48">(<expr pos:start="41:9" pos:end="41:47"><operator pos:start="41:9" pos:end="41:9">(</operator><name pos:start="41:10" pos:end="41:26"><name pos:start="41:10" pos:end="41:11">dc</name><operator pos:start="41:12" pos:end="41:13">-&gt;</operator><name pos:start="41:14" pos:end="41:16">def</name><operator pos:start="41:17" pos:end="41:18">-&gt;</operator><name pos:start="41:19" pos:end="41:26">features</name></name> <operator pos:start="41:28" pos:end="41:28">&amp;</operator> <name pos:start="41:30" pos:end="41:46">CPU_FEATURE_FLOAT</name><operator pos:start="41:47" pos:end="41:47">)</operator></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:47"><block_content pos:start="43:9" pos:end="43:47">

        <expr_stmt pos:start="43:9" pos:end="43:47"><expr pos:start="43:9" pos:end="43:46"><name pos:start="43:9" pos:end="43:23"><name pos:start="43:9" pos:end="43:10">dc</name><operator pos:start="43:11" pos:end="43:12">-&gt;</operator><name pos:start="43:13" pos:end="43:23">fpu_enabled</name></name> <operator pos:start="43:25" pos:end="43:25">=</operator> <call pos:start="43:27" pos:end="43:46"><name pos:start="43:27" pos:end="43:41">cpu_fpu_enabled</name><argument_list pos:start="43:42" pos:end="43:46">(<argument pos:start="43:43" pos:end="43:45"><expr pos:start="43:43" pos:end="43:45"><name pos:start="43:43" pos:end="43:45">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="45:5" pos:end="50:0">else<block type="pseudo" pos:start="47:9" pos:end="50:0"><block_content pos:start="47:9" pos:end="50:0">

        <expr_stmt pos:start="47:9" pos:end="50:0"><expr pos:start="47:9" pos:end="47:27"><name pos:start="47:9" pos:end="47:23"><name pos:start="47:9" pos:end="47:10">dc</name><operator pos:start="47:11" pos:end="47:12">-&gt;</operator><name pos:start="47:13" pos:end="47:23">fpu_enabled</name></name> <operator pos:start="47:25" pos:end="47:25">=</operator> <literal type="number" pos:start="47:27" pos:end="47:27">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:ifdef pos:start="49:1" pos:end="49:21">#<cpp:directive pos:start="49:2" pos:end="49:6">ifdef</cpp:directive> <name pos:start="49:8" pos:end="49:21">TARGET_SPARC64</name></cpp:ifdef>

    <expr_stmt pos:start="51:5" pos:end="54:0"><expr pos:start="51:5" pos:end="51:48"><name pos:start="51:5" pos:end="51:26"><name pos:start="51:5" pos:end="51:6">dc</name><operator pos:start="51:7" pos:end="51:8">-&gt;</operator><name pos:start="51:9" pos:end="51:26">address_mask_32bit</name></name> <operator pos:start="51:28" pos:end="51:28">=</operator> <name pos:start="51:30" pos:end="51:40"><name pos:start="51:30" pos:end="51:32">env</name><operator pos:start="51:33" pos:end="51:34">-&gt;</operator><name pos:start="51:35" pos:end="51:40">pstate</name></name> <operator pos:start="51:42" pos:end="51:42">&amp;</operator> <name pos:start="51:44" pos:end="51:48">PS_AM</name></expr>;</expr_stmt>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="55:5" pos:end="55:45"><expr pos:start="55:5" pos:end="55:44"><name pos:start="55:5" pos:end="55:15">gen_opc_end</name> <operator pos:start="55:17" pos:end="55:17">=</operator> <name pos:start="55:19" pos:end="55:29">gen_opc_buf</name> <operator pos:start="55:31" pos:end="55:31">+</operator> <name pos:start="55:33" pos:end="55:44">OPC_MAX_SIZE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:30"><expr pos:start="59:5" pos:end="59:29"><name pos:start="59:5" pos:end="59:12">cpu_tmp0</name> <operator pos:start="59:14" pos:end="59:14">=</operator> <call pos:start="59:16" pos:end="59:29"><name pos:start="59:16" pos:end="59:27">tcg_temp_new</name><argument_list pos:start="59:28" pos:end="59:29">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:35"><expr pos:start="61:5" pos:end="61:34"><name pos:start="61:5" pos:end="61:13">cpu_tmp32</name> <operator pos:start="61:15" pos:end="61:15">=</operator> <call pos:start="61:17" pos:end="61:34"><name pos:start="61:17" pos:end="61:32">tcg_temp_new_i32</name><argument_list pos:start="61:33" pos:end="61:34">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:35"><expr pos:start="63:5" pos:end="63:34"><name pos:start="63:5" pos:end="63:13">cpu_tmp64</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <call pos:start="63:17" pos:end="63:34"><name pos:start="63:17" pos:end="63:32">tcg_temp_new_i64</name><argument_list pos:start="63:33" pos:end="63:34">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:35"><expr pos:start="67:5" pos:end="67:34"><name pos:start="67:5" pos:end="67:11">cpu_dst</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <call pos:start="67:15" pos:end="67:34"><name pos:start="67:15" pos:end="67:32">tcg_temp_local_new</name><argument_list pos:start="67:33" pos:end="67:34">()</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="71:5" pos:end="71:23">// loads and stores</comment>

    <expr_stmt pos:start="73:5" pos:end="73:35"><expr pos:start="73:5" pos:end="73:34"><name pos:start="73:5" pos:end="73:11">cpu_val</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <call pos:start="73:15" pos:end="73:34"><name pos:start="73:15" pos:end="73:32">tcg_temp_local_new</name><argument_list pos:start="73:33" pos:end="73:34">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:36"><expr pos:start="75:5" pos:end="75:35"><name pos:start="75:5" pos:end="75:12">cpu_addr</name> <operator pos:start="75:14" pos:end="75:14">=</operator> <call pos:start="75:16" pos:end="75:35"><name pos:start="75:16" pos:end="75:33">tcg_temp_local_new</name><argument_list pos:start="75:34" pos:end="75:35">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:18"><expr pos:start="79:5" pos:end="79:17"><name pos:start="79:5" pos:end="79:13">num_insns</name> <operator pos:start="79:15" pos:end="79:15">=</operator> <literal type="number" pos:start="79:17" pos:end="79:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:43"><expr pos:start="81:5" pos:end="81:42"><name pos:start="81:5" pos:end="81:13">max_insns</name> <operator pos:start="81:15" pos:end="81:15">=</operator> <name pos:start="81:17" pos:end="81:26"><name pos:start="81:17" pos:end="81:18">tb</name><operator pos:start="81:19" pos:end="81:20">-&gt;</operator><name pos:start="81:21" pos:end="81:26">cflags</name></name> <operator pos:start="81:28" pos:end="81:28">&amp;</operator> <name pos:start="81:30" pos:end="81:42">CF_COUNT_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="85:34"><if pos:start="83:5" pos:end="85:34">if <condition pos:start="83:8" pos:end="83:23">(<expr pos:start="83:9" pos:end="83:22"><name pos:start="83:9" pos:end="83:17">max_insns</name> <operator pos:start="83:19" pos:end="83:20">==</operator> <literal type="number" pos:start="83:22" pos:end="83:22">0</literal></expr>)</condition><block type="pseudo" pos:start="85:9" pos:end="85:34"><block_content pos:start="85:9" pos:end="85:34">

        <expr_stmt pos:start="85:9" pos:end="85:34"><expr pos:start="85:9" pos:end="85:33"><name pos:start="85:9" pos:end="85:17">max_insns</name> <operator pos:start="85:19" pos:end="85:19">=</operator> <name pos:start="85:21" pos:end="85:33">CF_COUNT_MASK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:23"><expr pos:start="87:5" pos:end="87:22"><call pos:start="87:5" pos:end="87:22"><name pos:start="87:5" pos:end="87:20">gen_icount_start</name><argument_list pos:start="87:21" pos:end="87:22">()</argument_list></call></expr>;</expr_stmt>

    <do pos:start="89:5" pos:end="189:36">do <block pos:start="89:8" pos:end="185:5">{<block_content pos:start="91:9" pos:end="183:9">

        <if_stmt pos:start="91:9" pos:end="113:9"><if pos:start="91:9" pos:end="113:9">if <condition pos:start="91:12" pos:end="91:54">(<expr pos:start="91:13" pos:end="91:53"><call pos:start="91:13" pos:end="91:53"><name pos:start="91:13" pos:end="91:20">unlikely</name><argument_list pos:start="91:21" pos:end="91:53">(<argument pos:start="91:22" pos:end="91:52"><expr pos:start="91:22" pos:end="91:52"><operator pos:start="91:22" pos:end="91:22">!</operator><call pos:start="91:23" pos:end="91:52"><name pos:start="91:23" pos:end="91:33">TAILQ_EMPTY</name><argument_list pos:start="91:34" pos:end="91:52">(<argument pos:start="91:35" pos:end="91:51"><expr pos:start="91:35" pos:end="91:51"><operator pos:start="91:35" pos:end="91:35">&amp;</operator><name pos:start="91:36" pos:end="91:51"><name pos:start="91:36" pos:end="91:38">env</name><operator pos:start="91:39" pos:end="91:40">-&gt;</operator><name pos:start="91:41" pos:end="91:51">breakpoints</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:56" pos:end="113:9">{<block_content pos:start="93:13" pos:end="111:13">

            <macro pos:start="93:13" pos:end="93:55"><name pos:start="93:13" pos:end="93:25">TAILQ_FOREACH</name><argument_list pos:start="93:26" pos:end="93:55">(<argument pos:start="93:27" pos:end="93:28">bp</argument>, <argument pos:start="93:31" pos:end="93:47">&amp;env-&gt;breakpoints</argument>, <argument pos:start="93:50" pos:end="93:54">entry</argument>)</argument_list></macro> <block pos:start="93:57" pos:end="111:13">{<block_content pos:start="95:17" pos:end="109:17">

                <if_stmt pos:start="95:17" pos:end="109:17"><if pos:start="95:17" pos:end="109:17">if <condition pos:start="95:20" pos:end="95:37">(<expr pos:start="95:21" pos:end="95:36"><name pos:start="95:21" pos:end="95:26"><name pos:start="95:21" pos:end="95:22">bp</name><operator pos:start="95:23" pos:end="95:24">-&gt;</operator><name pos:start="95:25" pos:end="95:26">pc</name></name> <operator pos:start="95:28" pos:end="95:29">==</operator> <name pos:start="95:31" pos:end="95:36"><name pos:start="95:31" pos:end="95:32">dc</name><operator pos:start="95:33" pos:end="95:34">-&gt;</operator><name pos:start="95:35" pos:end="95:36">pc</name></name></expr>)</condition> <block pos:start="95:39" pos:end="109:17">{<block_content pos:start="97:21" pos:end="107:39">

                    <if_stmt pos:start="97:21" pos:end="99:49"><if pos:start="97:21" pos:end="99:49">if <condition pos:start="97:24" pos:end="97:43">(<expr pos:start="97:25" pos:end="97:42"><name pos:start="97:25" pos:end="97:30"><name pos:start="97:25" pos:end="97:26">dc</name><operator pos:start="97:27" pos:end="97:28">-&gt;</operator><name pos:start="97:29" pos:end="97:30">pc</name></name> <operator pos:start="97:32" pos:end="97:33">!=</operator> <name pos:start="97:35" pos:end="97:42">pc_start</name></expr>)</condition><block type="pseudo" pos:start="99:25" pos:end="99:49"><block_content pos:start="99:25" pos:end="99:49">

                        <expr_stmt pos:start="99:25" pos:end="99:49"><expr pos:start="99:25" pos:end="99:48"><call pos:start="99:25" pos:end="99:48"><name pos:start="99:25" pos:end="99:34">save_state</name><argument_list pos:start="99:35" pos:end="99:48">(<argument pos:start="99:36" pos:end="99:37"><expr pos:start="99:36" pos:end="99:37"><name pos:start="99:36" pos:end="99:37">dc</name></expr></argument>, <argument pos:start="99:40" pos:end="99:47"><expr pos:start="99:40" pos:end="99:47"><name pos:start="99:40" pos:end="99:47">cpu_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="101:21" pos:end="101:39"><expr pos:start="101:21" pos:end="101:38"><call pos:start="101:21" pos:end="101:38"><name pos:start="101:21" pos:end="101:36">gen_helper_debug</name><argument_list pos:start="101:37" pos:end="101:38">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="103:21" pos:end="103:39"><expr pos:start="103:21" pos:end="103:38"><call pos:start="103:21" pos:end="103:38"><name pos:start="103:21" pos:end="103:35">tcg_gen_exit_tb</name><argument_list pos:start="103:36" pos:end="103:38">(<argument pos:start="103:37" pos:end="103:37"><expr pos:start="103:37" pos:end="103:37"><literal type="number" pos:start="103:37" pos:end="103:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="105:21" pos:end="105:34"><expr pos:start="105:21" pos:end="105:33"><name pos:start="105:21" pos:end="105:29"><name pos:start="105:21" pos:end="105:22">dc</name><operator pos:start="105:23" pos:end="105:24">-&gt;</operator><name pos:start="105:25" pos:end="105:29">is_br</name></name> <operator pos:start="105:31" pos:end="105:31">=</operator> <literal type="number" pos:start="105:33" pos:end="105:33">1</literal></expr>;</expr_stmt>

                    <goto pos:start="107:21" pos:end="107:39">goto <name pos:start="107:26" pos:end="107:38">exit_gen_loop</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="115:9" pos:end="139:9"><if pos:start="115:9" pos:end="139:9">if <condition pos:start="115:12" pos:end="115:16">(<expr pos:start="115:13" pos:end="115:15"><name pos:start="115:13" pos:end="115:15">spc</name></expr>)</condition> <block pos:start="115:18" pos:end="139:9">{<block_content pos:start="117:13" pos:end="137:13">

            <expr_stmt pos:start="117:13" pos:end="117:39"><expr pos:start="117:13" pos:end="117:38"><call pos:start="117:13" pos:end="117:38"><name pos:start="117:13" pos:end="117:20">qemu_log</name><argument_list pos:start="117:21" pos:end="117:38">(<argument pos:start="117:22" pos:end="117:37"><expr pos:start="117:22" pos:end="117:37"><literal type="string" pos:start="117:22" pos:end="117:37">"Search PC...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:42"><expr pos:start="119:13" pos:end="119:41"><name pos:start="119:13" pos:end="119:13">j</name> <operator pos:start="119:15" pos:end="119:15">=</operator> <name pos:start="119:17" pos:end="119:27">gen_opc_ptr</name> <operator pos:start="119:29" pos:end="119:29">-</operator> <name pos:start="119:31" pos:end="119:41">gen_opc_buf</name></expr>;</expr_stmt>

            <if_stmt pos:start="121:13" pos:end="137:13"><if pos:start="121:13" pos:end="137:13">if <condition pos:start="121:16" pos:end="121:23">(<expr pos:start="121:17" pos:end="121:22"><name pos:start="121:17" pos:end="121:18">lj</name> <operator pos:start="121:20" pos:end="121:20">&lt;</operator> <name pos:start="121:22" pos:end="121:22">j</name></expr>)</condition> <block pos:start="121:25" pos:end="137:13">{<block_content pos:start="123:17" pos:end="135:47">

                <expr_stmt pos:start="123:17" pos:end="123:21"><expr pos:start="123:17" pos:end="123:20"><name pos:start="123:17" pos:end="123:18">lj</name><operator pos:start="123:19" pos:end="123:20">++</operator></expr>;</expr_stmt>

                <while pos:start="125:17" pos:end="127:50">while <condition pos:start="125:23" pos:end="125:30">(<expr pos:start="125:24" pos:end="125:29"><name pos:start="125:24" pos:end="125:25">lj</name> <operator pos:start="125:27" pos:end="125:27">&lt;</operator> <name pos:start="125:29" pos:end="125:29">j</name></expr>)</condition><block type="pseudo" pos:start="127:21" pos:end="127:50"><block_content pos:start="127:21" pos:end="127:50">

                    <expr_stmt pos:start="127:21" pos:end="127:50"><expr pos:start="127:21" pos:end="127:49"><name pos:start="127:21" pos:end="127:45"><name pos:start="127:21" pos:end="127:39">gen_opc_instr_start</name><index pos:start="127:40" pos:end="127:45">[<expr pos:start="127:41" pos:end="127:44"><name pos:start="127:41" pos:end="127:42">lj</name><operator pos:start="127:43" pos:end="127:44">++</operator></expr>]</index></name> <operator pos:start="127:47" pos:end="127:47">=</operator> <literal type="number" pos:start="127:49" pos:end="127:49">0</literal></expr>;</expr_stmt></block_content></block></while>

                <expr_stmt pos:start="129:17" pos:end="129:40"><expr pos:start="129:17" pos:end="129:39"><name pos:start="129:17" pos:end="129:30"><name pos:start="129:17" pos:end="129:26">gen_opc_pc</name><index pos:start="129:27" pos:end="129:30">[<expr pos:start="129:28" pos:end="129:29"><name pos:start="129:28" pos:end="129:29">lj</name></expr>]</index></name> <operator pos:start="129:32" pos:end="129:32">=</operator> <name pos:start="129:34" pos:end="129:39"><name pos:start="129:34" pos:end="129:35">dc</name><operator pos:start="129:36" pos:end="129:37">-&gt;</operator><name pos:start="129:38" pos:end="129:39">pc</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:42"><expr pos:start="131:17" pos:end="131:41"><name pos:start="131:17" pos:end="131:31"><name pos:start="131:17" pos:end="131:27">gen_opc_npc</name><index pos:start="131:28" pos:end="131:31">[<expr pos:start="131:29" pos:end="131:30"><name pos:start="131:29" pos:end="131:30">lj</name></expr>]</index></name> <operator pos:start="131:33" pos:end="131:33">=</operator> <name pos:start="131:35" pos:end="131:41"><name pos:start="131:35" pos:end="131:36">dc</name><operator pos:start="131:37" pos:end="131:38">-&gt;</operator><name pos:start="131:39" pos:end="131:41">npc</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:44"><expr pos:start="133:17" pos:end="133:43"><name pos:start="133:17" pos:end="133:39"><name pos:start="133:17" pos:end="133:35">gen_opc_instr_start</name><index pos:start="133:36" pos:end="133:39">[<expr pos:start="133:37" pos:end="133:38"><name pos:start="133:37" pos:end="133:38">lj</name></expr>]</index></name> <operator pos:start="133:41" pos:end="133:41">=</operator> <literal type="number" pos:start="133:43" pos:end="133:43">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="135:17" pos:end="135:47"><expr pos:start="135:17" pos:end="135:46"><name pos:start="135:17" pos:end="135:34"><name pos:start="135:17" pos:end="135:30">gen_opc_icount</name><index pos:start="135:31" pos:end="135:34">[<expr pos:start="135:32" pos:end="135:33"><name pos:start="135:32" pos:end="135:33">lj</name></expr>]</index></name> <operator pos:start="135:36" pos:end="135:36">=</operator> <name pos:start="135:38" pos:end="135:46">num_insns</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="141:9" pos:end="143:27"><if pos:start="141:9" pos:end="143:27">if <condition pos:start="141:12" pos:end="141:68">(<expr pos:start="141:13" pos:end="141:67"><name pos:start="141:13" pos:end="141:21">num_insns</name> <operator pos:start="141:23" pos:end="141:23">+</operator> <literal type="number" pos:start="141:25" pos:end="141:25">1</literal> <operator pos:start="141:27" pos:end="141:28">==</operator> <name pos:start="141:30" pos:end="141:38">max_insns</name> <operator pos:start="141:40" pos:end="141:41">&amp;&amp;</operator> <operator pos:start="141:43" pos:end="141:43">(</operator><name pos:start="141:44" pos:end="141:53"><name pos:start="141:44" pos:end="141:45">tb</name><operator pos:start="141:46" pos:end="141:47">-&gt;</operator><name pos:start="141:48" pos:end="141:53">cflags</name></name> <operator pos:start="141:55" pos:end="141:55">&amp;</operator> <name pos:start="141:57" pos:end="141:66">CF_LAST_IO</name><operator pos:start="141:67" pos:end="141:67">)</operator></expr>)</condition><block type="pseudo" pos:start="143:13" pos:end="143:27"><block_content pos:start="143:13" pos:end="143:27">

            <expr_stmt pos:start="143:13" pos:end="143:27"><expr pos:start="143:13" pos:end="143:26"><call pos:start="143:13" pos:end="143:26"><name pos:start="143:13" pos:end="143:24">gen_io_start</name><argument_list pos:start="143:25" pos:end="143:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:25"><expr pos:start="145:9" pos:end="145:24"><name pos:start="145:9" pos:end="145:15">last_pc</name> <operator pos:start="145:17" pos:end="145:17">=</operator> <name pos:start="145:19" pos:end="145:24"><name pos:start="145:19" pos:end="145:20">dc</name><operator pos:start="145:21" pos:end="145:22">-&gt;</operator><name pos:start="145:23" pos:end="145:24">pc</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:29"><expr pos:start="147:9" pos:end="147:28"><call pos:start="147:9" pos:end="147:28"><name pos:start="147:9" pos:end="147:24">disas_sparc_insn</name><argument_list pos:start="147:25" pos:end="147:28">(<argument pos:start="147:26" pos:end="147:27"><expr pos:start="147:26" pos:end="147:27"><name pos:start="147:26" pos:end="147:27">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:20"><expr pos:start="149:9" pos:end="149:19"><name pos:start="149:9" pos:end="149:17">num_insns</name><operator pos:start="149:18" pos:end="149:19">++</operator></expr>;</expr_stmt>



        <if_stmt pos:start="153:9" pos:end="155:18"><if pos:start="153:9" pos:end="155:18">if <condition pos:start="153:12" pos:end="153:22">(<expr pos:start="153:13" pos:end="153:21"><name pos:start="153:13" pos:end="153:21"><name pos:start="153:13" pos:end="153:14">dc</name><operator pos:start="153:15" pos:end="153:16">-&gt;</operator><name pos:start="153:17" pos:end="153:21">is_br</name></name></expr>)</condition><block type="pseudo" pos:start="155:13" pos:end="155:18"><block_content pos:start="155:13" pos:end="155:18">

            <break pos:start="155:13" pos:end="155:18">break;</break></block_content></block></if></if_stmt>

        <comment type="block" pos:start="157:9" pos:end="157:55">/* if the next PC is different, we abort now */</comment>

        <if_stmt pos:start="159:9" pos:end="161:18"><if pos:start="159:9" pos:end="161:18">if <condition pos:start="159:12" pos:end="159:36">(<expr pos:start="159:13" pos:end="159:35"><name pos:start="159:13" pos:end="159:18"><name pos:start="159:13" pos:end="159:14">dc</name><operator pos:start="159:15" pos:end="159:16">-&gt;</operator><name pos:start="159:17" pos:end="159:18">pc</name></name> <operator pos:start="159:20" pos:end="159:21">!=</operator> <operator pos:start="159:23" pos:end="159:23">(</operator><name pos:start="159:24" pos:end="159:30">last_pc</name> <operator pos:start="159:32" pos:end="159:32">+</operator> <literal type="number" pos:start="159:34" pos:end="159:34">4</literal><operator pos:start="159:35" pos:end="159:35">)</operator></expr>)</condition><block type="pseudo" pos:start="161:13" pos:end="161:18"><block_content pos:start="161:13" pos:end="161:18">

            <break pos:start="161:13" pos:end="161:18">break;</break></block_content></block></if></if_stmt>

        <comment type="block" pos:start="163:9" pos:end="165:69">/* if we reach a page boundary, we stop generation so that the

           PC of a TT_TFAULT exception is always in the right page */</comment>

        <if_stmt pos:start="167:9" pos:end="169:18"><if pos:start="167:9" pos:end="169:18">if <condition pos:start="167:12" pos:end="167:51">(<expr pos:start="167:13" pos:end="167:50"><operator pos:start="167:13" pos:end="167:13">(</operator><name pos:start="167:14" pos:end="167:19"><name pos:start="167:14" pos:end="167:15">dc</name><operator pos:start="167:16" pos:end="167:17">-&gt;</operator><name pos:start="167:18" pos:end="167:19">pc</name></name> <operator pos:start="167:21" pos:end="167:21">&amp;</operator> <operator pos:start="167:23" pos:end="167:23">(</operator><name pos:start="167:24" pos:end="167:39">TARGET_PAGE_SIZE</name> <operator pos:start="167:41" pos:end="167:41">-</operator> <literal type="number" pos:start="167:43" pos:end="167:43">1</literal><operator pos:start="167:44" pos:end="167:44">)</operator><operator pos:start="167:45" pos:end="167:45">)</operator> <operator pos:start="167:47" pos:end="167:48">==</operator> <literal type="number" pos:start="167:50" pos:end="167:50">0</literal></expr>)</condition><block type="pseudo" pos:start="169:13" pos:end="169:18"><block_content pos:start="169:13" pos:end="169:18">

            <break pos:start="169:13" pos:end="169:18">break;</break></block_content></block></if></if_stmt>

        <comment type="block" pos:start="171:9" pos:end="173:35">/* if single step mode, we generate only one instruction and

           generate an exception */</comment>

        <if_stmt pos:start="175:9" pos:end="183:9"><if pos:start="175:9" pos:end="183:9">if <condition pos:start="175:12" pos:end="175:50">(<expr pos:start="175:13" pos:end="175:49"><name pos:start="175:13" pos:end="175:35"><name pos:start="175:13" pos:end="175:15">env</name><operator pos:start="175:16" pos:end="175:17">-&gt;</operator><name pos:start="175:18" pos:end="175:35">singlestep_enabled</name></name> <operator pos:start="175:37" pos:end="175:38">||</operator> <name pos:start="175:40" pos:end="175:49">singlestep</name></expr>)</condition> <block pos:start="175:52" pos:end="183:9">{<block_content pos:start="177:13" pos:end="181:18">

            <expr_stmt pos:start="177:13" pos:end="177:44"><expr pos:start="177:13" pos:end="177:43"><call pos:start="177:13" pos:end="177:43"><name pos:start="177:13" pos:end="177:27">tcg_gen_movi_tl</name><argument_list pos:start="177:28" pos:end="177:43">(<argument pos:start="177:29" pos:end="177:34"><expr pos:start="177:29" pos:end="177:34"><name pos:start="177:29" pos:end="177:34">cpu_pc</name></expr></argument>, <argument pos:start="177:37" pos:end="177:42"><expr pos:start="177:37" pos:end="177:42"><name pos:start="177:37" pos:end="177:42"><name pos:start="177:37" pos:end="177:38">dc</name><operator pos:start="177:39" pos:end="177:40">-&gt;</operator><name pos:start="177:41" pos:end="177:42">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:31"><expr pos:start="179:13" pos:end="179:30"><call pos:start="179:13" pos:end="179:30"><name pos:start="179:13" pos:end="179:27">tcg_gen_exit_tb</name><argument_list pos:start="179:28" pos:end="179:30">(<argument pos:start="179:29" pos:end="179:29"><expr pos:start="179:29" pos:end="179:29"><literal type="number" pos:start="179:29" pos:end="179:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="181:13" pos:end="181:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="185:13" pos:end="189:35">(<expr pos:start="185:14" pos:end="189:34"><operator pos:start="185:14" pos:end="185:14">(</operator><name pos:start="185:15" pos:end="185:25">gen_opc_ptr</name> <operator pos:start="185:27" pos:end="185:27">&lt;</operator> <name pos:start="185:29" pos:end="185:39">gen_opc_end</name><operator pos:start="185:40" pos:end="185:40">)</operator> <operator pos:start="185:42" pos:end="185:43">&amp;&amp;</operator>

             <operator pos:start="187:14" pos:end="187:14">(</operator><name pos:start="187:15" pos:end="187:20"><name pos:start="187:15" pos:end="187:16">dc</name><operator pos:start="187:17" pos:end="187:18">-&gt;</operator><name pos:start="187:19" pos:end="187:20">pc</name></name> <operator pos:start="187:22" pos:end="187:22">-</operator> <name pos:start="187:24" pos:end="187:31">pc_start</name><operator pos:start="187:32" pos:end="187:32">)</operator> <operator pos:start="187:34" pos:end="187:34">&lt;</operator> <operator pos:start="187:36" pos:end="187:36">(</operator><name pos:start="187:37" pos:end="187:52">TARGET_PAGE_SIZE</name> <operator pos:start="187:54" pos:end="187:54">-</operator> <literal type="number" pos:start="187:56" pos:end="187:57">32</literal><operator pos:start="187:58" pos:end="187:58">)</operator> <operator pos:start="187:60" pos:end="187:61">&amp;&amp;</operator>

             <name pos:start="189:14" pos:end="189:22">num_insns</name> <operator pos:start="189:24" pos:end="189:24">&lt;</operator> <name pos:start="189:26" pos:end="189:34">max_insns</name></expr>)</condition>;</do>



 <label pos:start="193:2" pos:end="193:15"><name pos:start="193:2" pos:end="193:14">exit_gen_loop</name>:</label>

    <expr_stmt pos:start="195:5" pos:end="195:28"><expr pos:start="195:5" pos:end="195:27"><call pos:start="195:5" pos:end="195:27"><name pos:start="195:5" pos:end="195:17">tcg_temp_free</name><argument_list pos:start="195:18" pos:end="195:27">(<argument pos:start="195:19" pos:end="195:26"><expr pos:start="195:19" pos:end="195:26"><name pos:start="195:19" pos:end="195:26">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:27"><expr pos:start="197:5" pos:end="197:26"><call pos:start="197:5" pos:end="197:26"><name pos:start="197:5" pos:end="197:17">tcg_temp_free</name><argument_list pos:start="197:18" pos:end="197:26">(<argument pos:start="197:19" pos:end="197:25"><expr pos:start="197:19" pos:end="197:25"><name pos:start="197:19" pos:end="197:25">cpu_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:27"><expr pos:start="199:5" pos:end="199:26"><call pos:start="199:5" pos:end="199:26"><name pos:start="199:5" pos:end="199:17">tcg_temp_free</name><argument_list pos:start="199:18" pos:end="199:26">(<argument pos:start="199:19" pos:end="199:25"><expr pos:start="199:19" pos:end="199:25"><name pos:start="199:19" pos:end="199:25">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:33"><expr pos:start="201:5" pos:end="201:32"><call pos:start="201:5" pos:end="201:32"><name pos:start="201:5" pos:end="201:21">tcg_temp_free_i64</name><argument_list pos:start="201:22" pos:end="201:32">(<argument pos:start="201:23" pos:end="201:31"><expr pos:start="201:23" pos:end="201:31"><name pos:start="201:23" pos:end="201:31">cpu_tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:33"><expr pos:start="203:5" pos:end="203:32"><call pos:start="203:5" pos:end="203:32"><name pos:start="203:5" pos:end="203:21">tcg_temp_free_i32</name><argument_list pos:start="203:22" pos:end="203:32">(<argument pos:start="203:23" pos:end="203:31"><expr pos:start="203:23" pos:end="203:31"><name pos:start="203:23" pos:end="203:31">cpu_tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:28"><expr pos:start="205:5" pos:end="205:27"><call pos:start="205:5" pos:end="205:27"><name pos:start="205:5" pos:end="205:17">tcg_temp_free</name><argument_list pos:start="205:18" pos:end="205:27">(<argument pos:start="205:19" pos:end="205:26"><expr pos:start="205:19" pos:end="205:26"><name pos:start="205:19" pos:end="205:26">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="207:5" pos:end="209:21"><if pos:start="207:5" pos:end="209:21">if <condition pos:start="207:8" pos:end="207:32">(<expr pos:start="207:9" pos:end="207:31"><name pos:start="207:9" pos:end="207:18"><name pos:start="207:9" pos:end="207:10">tb</name><operator pos:start="207:11" pos:end="207:12">-&gt;</operator><name pos:start="207:13" pos:end="207:18">cflags</name></name> <operator pos:start="207:20" pos:end="207:20">&amp;</operator> <name pos:start="207:22" pos:end="207:31">CF_LAST_IO</name></expr>)</condition><block type="pseudo" pos:start="209:9" pos:end="209:21"><block_content pos:start="209:9" pos:end="209:21">

        <expr_stmt pos:start="209:9" pos:end="209:21"><expr pos:start="209:9" pos:end="209:20"><call pos:start="209:9" pos:end="209:20"><name pos:start="209:9" pos:end="209:18">gen_io_end</name><argument_list pos:start="209:19" pos:end="209:20">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="211:5" pos:end="233:5"><if pos:start="211:5" pos:end="233:5">if <condition pos:start="211:8" pos:end="211:19">(<expr pos:start="211:9" pos:end="211:18"><operator pos:start="211:9" pos:end="211:9">!</operator><name pos:start="211:10" pos:end="211:18"><name pos:start="211:10" pos:end="211:11">dc</name><operator pos:start="211:12" pos:end="211:13">-&gt;</operator><name pos:start="211:14" pos:end="211:18">is_br</name></name></expr>)</condition> <block pos:start="211:21" pos:end="233:5">{<block_content pos:start="213:9" pos:end="231:9">

        <if_stmt pos:start="213:9" pos:end="231:9"><if pos:start="213:9" pos:end="221:9">if <condition pos:start="213:12" pos:end="215:58">(<expr pos:start="213:13" pos:end="215:57"><name pos:start="213:13" pos:end="213:18"><name pos:start="213:13" pos:end="213:14">dc</name><operator pos:start="213:15" pos:end="213:16">-&gt;</operator><name pos:start="213:17" pos:end="213:18">pc</name></name> <operator pos:start="213:20" pos:end="213:21">!=</operator> <name pos:start="213:23" pos:end="213:32">DYNAMIC_PC</name> <operator pos:start="213:34" pos:end="213:35">&amp;&amp;</operator>

            <operator pos:start="215:13" pos:end="215:13">(</operator><name pos:start="215:14" pos:end="215:20"><name pos:start="215:14" pos:end="215:15">dc</name><operator pos:start="215:16" pos:end="215:17">-&gt;</operator><name pos:start="215:18" pos:end="215:20">npc</name></name> <operator pos:start="215:22" pos:end="215:23">!=</operator> <name pos:start="215:25" pos:end="215:34">DYNAMIC_PC</name> <operator pos:start="215:36" pos:end="215:37">&amp;&amp;</operator> <name pos:start="215:39" pos:end="215:45"><name pos:start="215:39" pos:end="215:40">dc</name><operator pos:start="215:41" pos:end="215:42">-&gt;</operator><name pos:start="215:43" pos:end="215:45">npc</name></name> <operator pos:start="215:47" pos:end="215:48">!=</operator> <name pos:start="215:50" pos:end="215:56">JUMP_PC</name><operator pos:start="215:57" pos:end="215:57">)</operator></expr>)</condition> <block pos:start="215:60" pos:end="221:9">{<block_content pos:start="219:13" pos:end="219:48">

            <comment type="block" pos:start="217:13" pos:end="217:63">/* static PC and NPC: we can use direct chaining */</comment>

            <expr_stmt pos:start="219:13" pos:end="219:48"><expr pos:start="219:13" pos:end="219:47"><call pos:start="219:13" pos:end="219:47"><name pos:start="219:13" pos:end="219:23">gen_goto_tb</name><argument_list pos:start="219:24" pos:end="219:47">(<argument pos:start="219:25" pos:end="219:26"><expr pos:start="219:25" pos:end="219:26"><name pos:start="219:25" pos:end="219:26">dc</name></expr></argument>, <argument pos:start="219:29" pos:end="219:29"><expr pos:start="219:29" pos:end="219:29"><literal type="number" pos:start="219:29" pos:end="219:29">0</literal></expr></argument>, <argument pos:start="219:32" pos:end="219:37"><expr pos:start="219:32" pos:end="219:37"><name pos:start="219:32" pos:end="219:37"><name pos:start="219:32" pos:end="219:33">dc</name><operator pos:start="219:34" pos:end="219:35">-&gt;</operator><name pos:start="219:36" pos:end="219:37">pc</name></name></expr></argument>, <argument pos:start="219:40" pos:end="219:46"><expr pos:start="219:40" pos:end="219:46"><name pos:start="219:40" pos:end="219:46"><name pos:start="219:40" pos:end="219:41">dc</name><operator pos:start="219:42" pos:end="219:43">-&gt;</operator><name pos:start="219:44" pos:end="219:46">npc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="221:11" pos:end="231:9">else <block pos:start="221:16" pos:end="231:9">{<block_content pos:start="223:13" pos:end="229:31">

            <if_stmt pos:start="223:13" pos:end="225:48"><if pos:start="223:13" pos:end="225:48">if <condition pos:start="223:16" pos:end="223:37">(<expr pos:start="223:17" pos:end="223:36"><name pos:start="223:17" pos:end="223:22"><name pos:start="223:17" pos:end="223:18">dc</name><operator pos:start="223:19" pos:end="223:20">-&gt;</operator><name pos:start="223:21" pos:end="223:22">pc</name></name> <operator pos:start="223:24" pos:end="223:25">!=</operator> <name pos:start="223:27" pos:end="223:36">DYNAMIC_PC</name></expr>)</condition><block type="pseudo" pos:start="225:17" pos:end="225:48"><block_content pos:start="225:17" pos:end="225:48">

                <expr_stmt pos:start="225:17" pos:end="225:48"><expr pos:start="225:17" pos:end="225:47"><call pos:start="225:17" pos:end="225:47"><name pos:start="225:17" pos:end="225:31">tcg_gen_movi_tl</name><argument_list pos:start="225:32" pos:end="225:47">(<argument pos:start="225:33" pos:end="225:38"><expr pos:start="225:33" pos:end="225:38"><name pos:start="225:33" pos:end="225:38">cpu_pc</name></expr></argument>, <argument pos:start="225:41" pos:end="225:46"><expr pos:start="225:41" pos:end="225:46"><name pos:start="225:41" pos:end="225:46"><name pos:start="225:41" pos:end="225:42">dc</name><operator pos:start="225:43" pos:end="225:44">-&gt;</operator><name pos:start="225:45" pos:end="225:46">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="227:13" pos:end="227:35"><expr pos:start="227:13" pos:end="227:34"><call pos:start="227:13" pos:end="227:34"><name pos:start="227:13" pos:end="227:20">save_npc</name><argument_list pos:start="227:21" pos:end="227:34">(<argument pos:start="227:22" pos:end="227:23"><expr pos:start="227:22" pos:end="227:23"><name pos:start="227:22" pos:end="227:23">dc</name></expr></argument>, <argument pos:start="227:26" pos:end="227:33"><expr pos:start="227:26" pos:end="227:33"><name pos:start="227:26" pos:end="227:33">cpu_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="229:13" pos:end="229:31"><expr pos:start="229:13" pos:end="229:30"><call pos:start="229:13" pos:end="229:30"><name pos:start="229:13" pos:end="229:27">tcg_gen_exit_tb</name><argument_list pos:start="229:28" pos:end="229:30">(<argument pos:start="229:29" pos:end="229:29"><expr pos:start="229:29" pos:end="229:29"><literal type="number" pos:start="229:29" pos:end="229:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="235:5" pos:end="235:34"><expr pos:start="235:5" pos:end="235:33"><call pos:start="235:5" pos:end="235:33"><name pos:start="235:5" pos:end="235:18">gen_icount_end</name><argument_list pos:start="235:19" pos:end="235:33">(<argument pos:start="235:20" pos:end="235:21"><expr pos:start="235:20" pos:end="235:21"><name pos:start="235:20" pos:end="235:21">tb</name></expr></argument>, <argument pos:start="235:24" pos:end="235:32"><expr pos:start="235:24" pos:end="235:32"><name pos:start="235:24" pos:end="235:32">num_insns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="237:5" pos:end="237:32"><expr pos:start="237:5" pos:end="237:31"><operator pos:start="237:5" pos:end="237:5">*</operator><name pos:start="237:6" pos:end="237:16">gen_opc_ptr</name> <operator pos:start="237:18" pos:end="237:18">=</operator> <name pos:start="237:20" pos:end="237:31">INDEX_op_end</name></expr>;</expr_stmt>

    <if_stmt pos:start="239:5" pos:end="268:0"><if pos:start="239:5" pos:end="259:5">if <condition pos:start="239:8" pos:end="239:12">(<expr pos:start="239:9" pos:end="239:11"><name pos:start="239:9" pos:end="239:11">spc</name></expr>)</condition> <block pos:start="239:14" pos:end="259:5">{<block_content pos:start="241:9" pos:end="257:44">

        <expr_stmt pos:start="241:9" pos:end="241:38"><expr pos:start="241:9" pos:end="241:37"><name pos:start="241:9" pos:end="241:9">j</name> <operator pos:start="241:11" pos:end="241:11">=</operator> <name pos:start="241:13" pos:end="241:23">gen_opc_ptr</name> <operator pos:start="241:25" pos:end="241:25">-</operator> <name pos:start="241:27" pos:end="241:37">gen_opc_buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="243:9" pos:end="243:13"><expr pos:start="243:9" pos:end="243:12"><name pos:start="243:9" pos:end="243:10">lj</name><operator pos:start="243:11" pos:end="243:12">++</operator></expr>;</expr_stmt>

        <while pos:start="245:9" pos:end="254:0">while <condition pos:start="245:15" pos:end="245:23">(<expr pos:start="245:16" pos:end="245:22"><name pos:start="245:16" pos:end="245:17">lj</name> <operator pos:start="245:19" pos:end="245:20">&lt;=</operator> <name pos:start="245:22" pos:end="245:22">j</name></expr>)</condition><block type="pseudo" pos:start="247:13" pos:end="254:0"><block_content pos:start="247:13" pos:end="254:0">

            <expr_stmt pos:start="247:13" pos:end="254:0"><expr pos:start="247:13" pos:end="247:41"><name pos:start="247:13" pos:end="247:37"><name pos:start="247:13" pos:end="247:31">gen_opc_instr_start</name><index pos:start="247:32" pos:end="247:37">[<expr pos:start="247:33" pos:end="247:36"><name pos:start="247:33" pos:end="247:34">lj</name><operator pos:start="247:35" pos:end="247:36">++</operator></expr>]</index></name> <operator pos:start="247:39" pos:end="247:39">=</operator> <literal type="number" pos:start="247:41" pos:end="247:41">0</literal></expr>;</expr_stmt></block_content></block></while>

<cpp:if pos:start="249:1" pos:end="249:5">#<cpp:directive pos:start="249:2" pos:end="249:3">if</cpp:directive> <expr pos:start="249:5" pos:end="249:5"><literal type="number" pos:start="249:5" pos:end="249:5">0</literal></expr></cpp:if>

        log_page_dump();

<cpp:endif pos:start="253:1" pos:end="253:6">#<cpp:directive pos:start="253:2" pos:end="253:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="255:9" pos:end="255:44"><expr pos:start="255:9" pos:end="255:43"><name pos:start="255:9" pos:end="255:26"><name pos:start="255:9" pos:end="255:23">gen_opc_jump_pc</name><index pos:start="255:24" pos:end="255:26">[<expr pos:start="255:25" pos:end="255:25"><literal type="number" pos:start="255:25" pos:end="255:25">0</literal></expr>]</index></name> <operator pos:start="255:28" pos:end="255:28">=</operator> <name pos:start="255:30" pos:end="255:43"><name pos:start="255:30" pos:end="255:31">dc</name><operator pos:start="255:32" pos:end="255:33">-&gt;</operator><name pos:start="255:34" pos:end="255:40">jump_pc</name><index pos:start="255:41" pos:end="255:43">[<expr pos:start="255:42" pos:end="255:42"><literal type="number" pos:start="255:42" pos:end="255:42">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:44"><expr pos:start="257:9" pos:end="257:43"><name pos:start="257:9" pos:end="257:26"><name pos:start="257:9" pos:end="257:23">gen_opc_jump_pc</name><index pos:start="257:24" pos:end="257:26">[<expr pos:start="257:25" pos:end="257:25"><literal type="number" pos:start="257:25" pos:end="257:25">1</literal></expr>]</index></name> <operator pos:start="257:28" pos:end="257:28">=</operator> <name pos:start="257:30" pos:end="257:43"><name pos:start="257:30" pos:end="257:31">dc</name><operator pos:start="257:32" pos:end="257:33">-&gt;</operator><name pos:start="257:34" pos:end="257:40">jump_pc</name><index pos:start="257:41" pos:end="257:43">[<expr pos:start="257:42" pos:end="257:42"><literal type="number" pos:start="257:42" pos:end="257:42">1</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="259:7" pos:end="268:0">else <block pos:start="259:12" pos:end="268:0">{<block_content pos:start="261:9" pos:end="263:31">

        <expr_stmt pos:start="261:9" pos:end="261:42"><expr pos:start="261:9" pos:end="261:41"><name pos:start="261:9" pos:end="261:16"><name pos:start="261:9" pos:end="261:10">tb</name><operator pos:start="261:11" pos:end="261:12">-&gt;</operator><name pos:start="261:13" pos:end="261:16">size</name></name> <operator pos:start="261:18" pos:end="261:18">=</operator> <name pos:start="261:20" pos:end="261:26">last_pc</name> <operator pos:start="261:28" pos:end="261:28">+</operator> <literal type="number" pos:start="261:30" pos:end="261:32">4</literal> <operator pos:start="261:32" pos:end="261:32">-</operator> <name pos:start="261:34" pos:end="261:41">pc_start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="263:9" pos:end="263:31"><expr pos:start="263:9" pos:end="263:30"><name pos:start="263:9" pos:end="263:18"><name pos:start="263:9" pos:end="263:10">tb</name><operator pos:start="263:11" pos:end="263:12">-&gt;</operator><name pos:start="263:13" pos:end="263:18">icount</name></name> <operator pos:start="263:20" pos:end="263:20">=</operator> <name pos:start="263:22" pos:end="263:30">num_insns</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="267:1" pos:end="267:18">#<cpp:directive pos:start="267:2" pos:end="267:6">ifdef</cpp:directive> <name pos:start="267:8" pos:end="267:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="269:5" pos:end="282:0"><if pos:start="269:5" pos:end="282:0">if <condition pos:start="269:8" pos:end="269:46">(<expr pos:start="269:9" pos:end="269:45"><call pos:start="269:9" pos:end="269:45"><name pos:start="269:9" pos:end="269:26">qemu_loglevel_mask</name><argument_list pos:start="269:27" pos:end="269:45">(<argument pos:start="269:28" pos:end="269:44"><expr pos:start="269:28" pos:end="269:44"><name pos:start="269:28" pos:end="269:44">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="269:48" pos:end="282:0">{<block_content pos:start="271:9" pos:end="277:23">

        <expr_stmt pos:start="271:9" pos:end="271:37"><expr pos:start="271:9" pos:end="271:36"><call pos:start="271:9" pos:end="271:36"><name pos:start="271:9" pos:end="271:16">qemu_log</name><argument_list pos:start="271:17" pos:end="271:36">(<argument pos:start="271:18" pos:end="271:35"><expr pos:start="271:18" pos:end="271:35"><literal type="string" pos:start="271:18" pos:end="271:35">"--------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:54"><expr pos:start="273:9" pos:end="273:53"><call pos:start="273:9" pos:end="273:53"><name pos:start="273:9" pos:end="273:16">qemu_log</name><argument_list pos:start="273:17" pos:end="273:53">(<argument pos:start="273:18" pos:end="273:27"><expr pos:start="273:18" pos:end="273:27"><literal type="string" pos:start="273:18" pos:end="273:27">"IN: %s\n"</literal></expr></argument>, <argument pos:start="273:30" pos:end="273:52"><expr pos:start="273:30" pos:end="273:52"><call pos:start="273:30" pos:end="273:52"><name pos:start="273:30" pos:end="273:42">lookup_symbol</name><argument_list pos:start="273:43" pos:end="273:52">(<argument pos:start="273:44" pos:end="273:51"><expr pos:start="273:44" pos:end="273:51"><name pos:start="273:44" pos:end="273:51">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:62"><expr pos:start="275:9" pos:end="275:61"><call pos:start="275:9" pos:end="275:61"><name pos:start="275:9" pos:end="275:24">log_target_disas</name><argument_list pos:start="275:25" pos:end="275:61">(<argument pos:start="275:26" pos:end="275:33"><expr pos:start="275:26" pos:end="275:33"><name pos:start="275:26" pos:end="275:33">pc_start</name></expr></argument>, <argument pos:start="275:36" pos:end="275:57"><expr pos:start="275:36" pos:end="275:57"><name pos:start="275:36" pos:end="275:42">last_pc</name> <operator pos:start="275:44" pos:end="275:44">+</operator> <literal type="number" pos:start="275:46" pos:end="275:48">4</literal> <operator pos:start="275:48" pos:end="275:48">-</operator> <name pos:start="275:50" pos:end="275:57">pc_start</name></expr></argument>, <argument pos:start="275:60" pos:end="275:60"><expr pos:start="275:60" pos:end="275:60"><literal type="number" pos:start="275:60" pos:end="275:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="277:9" pos:end="277:23"><expr pos:start="277:9" pos:end="277:22"><call pos:start="277:9" pos:end="277:22"><name pos:start="277:9" pos:end="277:16">qemu_log</name><argument_list pos:start="277:17" pos:end="277:22">(<argument pos:start="277:18" pos:end="277:21"><expr pos:start="277:18" pos:end="277:21"><literal type="string" pos:start="277:18" pos:end="277:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="281:1" pos:end="281:6">#<cpp:directive pos:start="281:2" pos:end="281:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
