<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20011.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:36">copy_sectors</name><parameter_list pos:start="1:37" pos:end="7:60">(<parameter pos:start="1:38" pos:end="1:57"><decl pos:start="1:38" pos:end="1:57"><type pos:start="1:38" pos:end="1:57"><name pos:start="1:38" pos:end="1:53">BlockDriverState</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:57">bs</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:56"><decl pos:start="3:38" pos:end="3:56"><type pos:start="3:38" pos:end="3:56"><name pos:start="3:38" pos:end="3:45">uint64_t</name></type> <name pos:start="3:47" pos:end="3:56">start_sect</name></decl></parameter>,

                                     <parameter pos:start="5:38" pos:end="5:60"><decl pos:start="5:38" pos:end="5:60"><type pos:start="5:38" pos:end="5:60"><name pos:start="5:38" pos:end="5:45">uint64_t</name></type> <name pos:start="5:47" pos:end="5:60">cluster_offset</name></decl></parameter>,

                                     <parameter pos:start="7:38" pos:end="7:48"><decl pos:start="7:38" pos:end="7:48"><type pos:start="7:38" pos:end="7:48"><name pos:start="7:38" pos:end="7:40">int</name></type> <name pos:start="7:42" pos:end="7:48">n_start</name></decl></parameter>, <parameter pos:start="7:51" pos:end="7:59"><decl pos:start="7:51" pos:end="7:59"><type pos:start="7:51" pos:end="7:59"><name pos:start="7:51" pos:end="7:53">int</name></type> <name pos:start="7:55" pos:end="7:59">n_end</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="115:1">{<block_content pos:start="11:5" pos:end="113:15">

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">BDRVQcowState</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:20">s</name> <init pos:start="11:22" pos:end="11:33">= <expr pos:start="11:24" pos:end="11:33"><name pos:start="11:24" pos:end="11:33"><name pos:start="11:24" pos:end="11:25">bs</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">QEMUIOVector</name></type> <name pos:start="13:18" pos:end="13:21">qiov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:16">iovec</name></name></type> <name pos:start="15:18" pos:end="15:20">iov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">n</name></decl>, <decl pos:start="17:12" pos:end="17:14"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:14">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:24"><expr pos:start="21:5" pos:end="21:23"><name pos:start="21:5" pos:end="21:5">n</name> <operator pos:start="21:7" pos:end="21:7">=</operator> <name pos:start="21:9" pos:end="21:13">n_end</name> <operator pos:start="21:15" pos:end="21:15">-</operator> <name pos:start="21:17" pos:end="21:23">n_start</name></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:15">(<expr pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:9">n</name> <operator pos:start="23:11" pos:end="23:12">&lt;=</operator> <literal type="number" pos:start="23:14" pos:end="23:14">0</literal></expr>)</condition> <block pos:start="23:17" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:17">

        <return pos:start="25:9" pos:end="25:17">return <expr pos:start="25:16" pos:end="25:16"><literal type="number" pos:start="25:16" pos:end="25:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:39"><expr pos:start="31:5" pos:end="31:38"><name pos:start="31:5" pos:end="31:15"><name pos:start="31:5" pos:end="31:7">iov</name><operator pos:start="31:8" pos:end="31:8">.</operator><name pos:start="31:9" pos:end="31:15">iov_len</name></name> <operator pos:start="31:17" pos:end="31:17">=</operator> <name pos:start="31:19" pos:end="31:19">n</name> <operator pos:start="31:21" pos:end="31:21">*</operator> <name pos:start="31:23" pos:end="31:38">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:52"><expr pos:start="33:5" pos:end="33:51"><name pos:start="33:5" pos:end="33:16"><name pos:start="33:5" pos:end="33:7">iov</name><operator pos:start="33:8" pos:end="33:8">.</operator><name pos:start="33:9" pos:end="33:16">iov_base</name></name> <operator pos:start="33:18" pos:end="33:18">=</operator> <call pos:start="33:20" pos:end="33:51"><name pos:start="33:20" pos:end="33:34">qemu_blockalign</name><argument_list pos:start="33:35" pos:end="33:51">(<argument pos:start="33:36" pos:end="33:37"><expr pos:start="33:36" pos:end="33:37"><name pos:start="33:36" pos:end="33:37">bs</name></expr></argument>, <argument pos:start="33:40" pos:end="33:50"><expr pos:start="33:40" pos:end="33:50"><name pos:start="33:40" pos:end="33:50"><name pos:start="33:40" pos:end="33:42">iov</name><operator pos:start="33:43" pos:end="33:43">.</operator><name pos:start="33:44" pos:end="33:50">iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:45"><expr pos:start="37:5" pos:end="37:44"><call pos:start="37:5" pos:end="37:44"><name pos:start="37:5" pos:end="37:28">qemu_iovec_init_external</name><argument_list pos:start="37:29" pos:end="37:44">(<argument pos:start="37:30" pos:end="37:34"><expr pos:start="37:30" pos:end="37:34"><operator pos:start="37:30" pos:end="37:30">&amp;</operator><name pos:start="37:31" pos:end="37:34">qiov</name></expr></argument>, <argument pos:start="37:37" pos:end="37:40"><expr pos:start="37:37" pos:end="37:40"><operator pos:start="37:37" pos:end="37:37">&amp;</operator><name pos:start="37:38" pos:end="37:40">iov</name></expr></argument>, <argument pos:start="37:43" pos:end="37:43"><expr pos:start="37:43" pos:end="37:43"><literal type="number" pos:start="37:43" pos:end="37:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:44"><expr pos:start="41:5" pos:end="41:43"><call pos:start="41:5" pos:end="41:43"><name pos:start="41:5" pos:end="41:16">BLKDBG_EVENT</name><argument_list pos:start="41:17" pos:end="41:43">(<argument pos:start="41:18" pos:end="41:25"><expr pos:start="41:18" pos:end="41:25"><name pos:start="41:18" pos:end="41:25"><name pos:start="41:18" pos:end="41:19">bs</name><operator pos:start="41:20" pos:end="41:21">-&gt;</operator><name pos:start="41:22" pos:end="41:25">file</name></name></expr></argument>, <argument pos:start="41:28" pos:end="41:42"><expr pos:start="41:28" pos:end="41:42"><name pos:start="41:28" pos:end="41:42">BLKDBG_COW_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:17">(<expr pos:start="45:9" pos:end="45:16"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:16"><name pos:start="45:10" pos:end="45:11">bs</name><operator pos:start="45:12" pos:end="45:13">-&gt;</operator><name pos:start="45:14" pos:end="45:16">drv</name></name></expr>)</condition> <block pos:start="45:19" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:26">

        <return pos:start="47:9" pos:end="47:26">return <expr pos:start="47:16" pos:end="47:25"><operator pos:start="47:16" pos:end="47:16">-</operator><name pos:start="47:17" pos:end="47:25">ENOMEDIUM</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="53:5" pos:end="59:7">/* Call .bdrv_co_readv() directly instead of using the public block-layer

     * interface.  This avoids double I/O throttling and request tracking,

     * which can lead to deadlock when block layer copy-on-read is enabled.

     */</comment>

    <expr_stmt pos:start="61:5" pos:end="61:69"><expr pos:start="61:5" pos:end="61:68"><name pos:start="61:5" pos:end="61:7">ret</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:68"><name pos:start="61:11" pos:end="61:32"><name pos:start="61:11" pos:end="61:12">bs</name><operator pos:start="61:13" pos:end="61:14">-&gt;</operator><name pos:start="61:15" pos:end="61:17">drv</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:32">bdrv_co_readv</name></name><argument_list pos:start="61:33" pos:end="61:68">(<argument pos:start="61:34" pos:end="61:35"><expr pos:start="61:34" pos:end="61:35"><name pos:start="61:34" pos:end="61:35">bs</name></expr></argument>, <argument pos:start="61:38" pos:end="61:57"><expr pos:start="61:38" pos:end="61:57"><name pos:start="61:38" pos:end="61:47">start_sect</name> <operator pos:start="61:49" pos:end="61:49">+</operator> <name pos:start="61:51" pos:end="61:57">n_start</name></expr></argument>, <argument pos:start="61:60" pos:end="61:60"><expr pos:start="61:60" pos:end="61:60"><name pos:start="61:60" pos:end="61:60">n</name></expr></argument>, <argument pos:start="61:63" pos:end="61:67"><expr pos:start="61:63" pos:end="61:67"><operator pos:start="61:63" pos:end="61:63">&amp;</operator><name pos:start="61:64" pos:end="61:67">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:16">(<expr pos:start="63:9" pos:end="63:15"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">&lt;</operator> <literal type="number" pos:start="63:15" pos:end="63:15">0</literal></expr>)</condition> <block pos:start="63:18" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:17">

        <goto pos:start="65:9" pos:end="65:17">goto <name pos:start="65:14" pos:end="65:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="71:5" pos:end="79:5"><if pos:start="71:5" pos:end="79:5">if <condition pos:start="71:8" pos:end="71:24">(<expr pos:start="71:9" pos:end="71:23"><name pos:start="71:9" pos:end="71:23"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:23">crypt_method</name></name></expr>)</condition> <block pos:start="71:26" pos:end="79:5">{<block_content pos:start="73:9" pos:end="77:45">

        <expr_stmt pos:start="73:9" pos:end="77:45"><expr pos:start="73:9" pos:end="77:44"><call pos:start="73:9" pos:end="77:44"><name pos:start="73:9" pos:end="73:29">qcow2_encrypt_sectors</name><argument_list pos:start="73:30" pos:end="77:44">(<argument pos:start="73:31" pos:end="73:31"><expr pos:start="73:31" pos:end="73:31"><name pos:start="73:31" pos:end="73:31">s</name></expr></argument>, <argument pos:start="73:34" pos:end="73:53"><expr pos:start="73:34" pos:end="73:53"><name pos:start="73:34" pos:end="73:43">start_sect</name> <operator pos:start="73:45" pos:end="73:45">+</operator> <name pos:start="73:47" pos:end="73:53">n_start</name></expr></argument>,

                        <argument pos:start="75:25" pos:end="75:36"><expr pos:start="75:25" pos:end="75:36"><name pos:start="75:25" pos:end="75:36"><name pos:start="75:25" pos:end="75:27">iov</name><operator pos:start="75:28" pos:end="75:28">.</operator><name pos:start="75:29" pos:end="75:36">iov_base</name></name></expr></argument>, <argument pos:start="75:39" pos:end="75:50"><expr pos:start="75:39" pos:end="75:50"><name pos:start="75:39" pos:end="75:50"><name pos:start="75:39" pos:end="75:41">iov</name><operator pos:start="75:42" pos:end="75:42">.</operator><name pos:start="75:43" pos:end="75:50">iov_base</name></name></expr></argument>, <argument pos:start="75:53" pos:end="75:53"><expr pos:start="75:53" pos:end="75:53"><name pos:start="75:53" pos:end="75:53">n</name></expr></argument>, <argument pos:start="75:56" pos:end="75:56"><expr pos:start="75:56" pos:end="75:56"><literal type="number" pos:start="75:56" pos:end="75:56">1</literal></expr></argument>,

                        <argument pos:start="77:25" pos:end="77:43"><expr pos:start="77:25" pos:end="77:43"><operator pos:start="77:25" pos:end="77:25">&amp;</operator><name pos:start="77:26" pos:end="77:43"><name pos:start="77:26" pos:end="77:26">s</name><operator pos:start="77:27" pos:end="77:28">-&gt;</operator><name pos:start="77:29" pos:end="77:43">aes_encrypt_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="85:79"><expr pos:start="83:5" pos:end="85:78"><name pos:start="83:5" pos:end="83:7">ret</name> <operator pos:start="83:9" pos:end="83:9">=</operator> <call pos:start="83:11" pos:end="85:78"><name pos:start="83:11" pos:end="83:39">qcow2_pre_write_overlap_check</name><argument_list pos:start="83:40" pos:end="85:78">(<argument pos:start="83:41" pos:end="83:42"><expr pos:start="83:41" pos:end="83:42"><name pos:start="83:41" pos:end="83:42">bs</name></expr></argument>, <argument pos:start="83:45" pos:end="83:45"><expr pos:start="83:45" pos:end="83:45"><literal type="number" pos:start="83:45" pos:end="83:45">0</literal></expr></argument>,

            <argument pos:start="85:13" pos:end="85:55"><expr pos:start="85:13" pos:end="85:55"><name pos:start="85:13" pos:end="85:26">cluster_offset</name> <operator pos:start="85:28" pos:end="85:28">+</operator> <name pos:start="85:30" pos:end="85:36">n_start</name> <operator pos:start="85:38" pos:end="85:38">*</operator> <name pos:start="85:40" pos:end="85:55">BDRV_SECTOR_SIZE</name></expr></argument>, <argument pos:start="85:58" pos:end="85:77"><expr pos:start="85:58" pos:end="85:77"><name pos:start="85:58" pos:end="85:58">n</name> <operator pos:start="85:60" pos:end="85:60">*</operator> <name pos:start="85:62" pos:end="85:77">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="91:5"><if pos:start="87:5" pos:end="91:5">if <condition pos:start="87:8" pos:end="87:16">(<expr pos:start="87:9" pos:end="87:15"><name pos:start="87:9" pos:end="87:11">ret</name> <operator pos:start="87:13" pos:end="87:13">&lt;</operator> <literal type="number" pos:start="87:15" pos:end="87:15">0</literal></expr>)</condition> <block pos:start="87:18" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:17">

        <goto pos:start="89:9" pos:end="89:17">goto <name pos:start="89:14" pos:end="89:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:45"><expr pos:start="95:5" pos:end="95:44"><call pos:start="95:5" pos:end="95:44"><name pos:start="95:5" pos:end="95:16">BLKDBG_EVENT</name><argument_list pos:start="95:17" pos:end="95:44">(<argument pos:start="95:18" pos:end="95:25"><expr pos:start="95:18" pos:end="95:25"><name pos:start="95:18" pos:end="95:25"><name pos:start="95:18" pos:end="95:19">bs</name><operator pos:start="95:20" pos:end="95:21">-&gt;</operator><name pos:start="95:22" pos:end="95:25">file</name></name></expr></argument>, <argument pos:start="95:28" pos:end="95:43"><expr pos:start="95:28" pos:end="95:43"><name pos:start="95:28" pos:end="95:43">BLKDBG_COW_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:78"><expr pos:start="97:5" pos:end="97:77"><name pos:start="97:5" pos:end="97:7">ret</name> <operator pos:start="97:9" pos:end="97:9">=</operator> <call pos:start="97:11" pos:end="97:77"><name pos:start="97:11" pos:end="97:24">bdrv_co_writev</name><argument_list pos:start="97:25" pos:end="97:77">(<argument pos:start="97:26" pos:end="97:33"><expr pos:start="97:26" pos:end="97:33"><name pos:start="97:26" pos:end="97:33"><name pos:start="97:26" pos:end="97:27">bs</name><operator pos:start="97:28" pos:end="97:29">-&gt;</operator><name pos:start="97:30" pos:end="97:33">file</name></name></expr></argument>, <argument pos:start="97:36" pos:end="97:66"><expr pos:start="97:36" pos:end="97:66"><operator pos:start="97:36" pos:end="97:36">(</operator><name pos:start="97:37" pos:end="97:50">cluster_offset</name> <operator pos:start="97:52" pos:end="97:53">&gt;&gt;</operator> <literal type="number" pos:start="97:55" pos:end="97:55">9</literal><operator pos:start="97:56" pos:end="97:56">)</operator> <operator pos:start="97:58" pos:end="97:58">+</operator> <name pos:start="97:60" pos:end="97:66">n_start</name></expr></argument>, <argument pos:start="97:69" pos:end="97:69"><expr pos:start="97:69" pos:end="97:69"><name pos:start="97:69" pos:end="97:69">n</name></expr></argument>, <argument pos:start="97:72" pos:end="97:76"><expr pos:start="97:72" pos:end="97:76"><operator pos:start="97:72" pos:end="97:72">&amp;</operator><name pos:start="97:73" pos:end="97:76">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="103:5"><if pos:start="99:5" pos:end="103:5">if <condition pos:start="99:8" pos:end="99:16">(<expr pos:start="99:9" pos:end="99:15"><name pos:start="99:9" pos:end="99:11">ret</name> <operator pos:start="99:13" pos:end="99:13">&lt;</operator> <literal type="number" pos:start="99:15" pos:end="99:15">0</literal></expr>)</condition> <block pos:start="99:18" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:17">

        <goto pos:start="101:9" pos:end="101:17">goto <name pos:start="101:14" pos:end="101:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:12"><expr pos:start="107:5" pos:end="107:11"><name pos:start="107:5" pos:end="107:7">ret</name> <operator pos:start="107:9" pos:end="107:9">=</operator> <literal type="number" pos:start="107:11" pos:end="107:11">0</literal></expr>;</expr_stmt>

<label pos:start="109:1" pos:end="109:4"><name pos:start="109:1" pos:end="109:3">out</name>:</label>

    <expr_stmt pos:start="111:5" pos:end="111:29"><expr pos:start="111:5" pos:end="111:28"><call pos:start="111:5" pos:end="111:28"><name pos:start="111:5" pos:end="111:14">qemu_vfree</name><argument_list pos:start="111:15" pos:end="111:28">(<argument pos:start="111:16" pos:end="111:27"><expr pos:start="111:16" pos:end="111:27"><name pos:start="111:16" pos:end="111:27"><name pos:start="111:16" pos:end="111:18">iov</name><operator pos:start="111:19" pos:end="111:19">.</operator><name pos:start="111:20" pos:end="111:27">iov_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="113:5" pos:end="113:15">return <expr pos:start="113:12" pos:end="113:14"><name pos:start="113:12" pos:end="113:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
