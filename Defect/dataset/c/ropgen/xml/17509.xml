<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17509.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">vhost_dev_sync_region</name><parameter_list pos:start="1:34" pos:end="5:66">(<parameter pos:start="1:35" pos:end="1:55"><decl pos:start="1:35" pos:end="1:55"><type pos:start="1:35" pos:end="1:55"><name pos:start="1:35" pos:end="1:50"><name pos:start="1:35" pos:end="1:40">struct</name> <name pos:start="1:42" pos:end="1:50">vhost_dev</name></name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">dev</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:49"><decl pos:start="3:35" pos:end="3:49"><type pos:start="3:35" pos:end="3:49"><name pos:start="3:35" pos:end="3:42">uint64_t</name></type> <name pos:start="3:44" pos:end="3:49">mfirst</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:65"><decl pos:start="3:52" pos:end="3:65"><type pos:start="3:52" pos:end="3:65"><name pos:start="3:52" pos:end="3:59">uint64_t</name></type> <name pos:start="3:61" pos:end="3:65">mlast</name></decl></parameter>,

                                  <parameter pos:start="5:35" pos:end="5:49"><decl pos:start="5:35" pos:end="5:49"><type pos:start="5:35" pos:end="5:49"><name pos:start="5:35" pos:end="5:42">uint64_t</name></type> <name pos:start="5:44" pos:end="5:49">rfirst</name></decl></parameter>, <parameter pos:start="5:52" pos:end="5:65"><decl pos:start="5:52" pos:end="5:65"><type pos:start="5:52" pos:end="5:65"><name pos:start="5:52" pos:end="5:59">uint64_t</name></type> <name pos:start="5:61" pos:end="5:65">rlast</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="75:1">{<block_content pos:start="9:5" pos:end="73:5">

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:18">start</name> <init pos:start="9:20" pos:end="9:40">= <expr pos:start="9:22" pos:end="9:40"><call pos:start="9:22" pos:end="9:40"><name pos:start="9:22" pos:end="9:24">MAX</name><argument_list pos:start="9:25" pos:end="9:40">(<argument pos:start="9:26" pos:end="9:31"><expr pos:start="9:26" pos:end="9:31"><name pos:start="9:26" pos:end="9:31">mfirst</name></expr></argument>, <argument pos:start="9:34" pos:end="9:39"><expr pos:start="9:34" pos:end="9:39"><name pos:start="9:34" pos:end="9:39">rfirst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:16">end</name> <init pos:start="11:18" pos:end="11:36">= <expr pos:start="11:20" pos:end="11:36"><call pos:start="11:20" pos:end="11:36"><name pos:start="11:20" pos:end="11:22">MIN</name><argument_list pos:start="11:23" pos:end="11:36">(<argument pos:start="11:24" pos:end="11:28"><expr pos:start="11:24" pos:end="11:28"><name pos:start="11:24" pos:end="11:28">mlast</name></expr></argument>, <argument pos:start="11:31" pos:end="11:35"><expr pos:start="11:31" pos:end="11:35"><name pos:start="11:31" pos:end="11:35">rlast</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:65"><decl pos:start="13:5" pos:end="13:64"><type pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:21">vhost_log_chunk_t</name> <modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:27">from</name> <init pos:start="13:29" pos:end="13:64">= <expr pos:start="13:31" pos:end="13:64"><name pos:start="13:31" pos:end="13:38"><name pos:start="13:31" pos:end="13:33">dev</name><operator pos:start="13:34" pos:end="13:35">-&gt;</operator><name pos:start="13:36" pos:end="13:38">log</name></name> <operator pos:start="13:40" pos:end="13:40">+</operator> <name pos:start="13:42" pos:end="13:46">start</name> <operator pos:start="13:48" pos:end="13:48">/</operator> <name pos:start="13:50" pos:end="13:64">VHOST_LOG_CHUNK</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:65"><decl pos:start="15:5" pos:end="15:64"><type pos:start="15:5" pos:end="15:23"><name pos:start="15:5" pos:end="15:21">vhost_log_chunk_t</name> <modifier pos:start="15:23" pos:end="15:23">*</modifier></type><name pos:start="15:24" pos:end="15:25">to</name> <init pos:start="15:27" pos:end="15:64">= <expr pos:start="15:29" pos:end="15:64"><name pos:start="15:29" pos:end="15:36"><name pos:start="15:29" pos:end="15:31">dev</name><operator pos:start="15:32" pos:end="15:33">-&gt;</operator><name pos:start="15:34" pos:end="15:36">log</name></name> <operator pos:start="15:38" pos:end="15:38">+</operator> <name pos:start="15:40" pos:end="15:42">end</name> <operator pos:start="15:44" pos:end="15:44">/</operator> <name pos:start="15:46" pos:end="15:60">VHOST_LOG_CHUNK</name> <operator pos:start="15:62" pos:end="15:62">+</operator> <literal type="number" pos:start="15:64" pos:end="15:64">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:64"><decl pos:start="17:5" pos:end="17:63"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:17">addr</name> <init pos:start="17:19" pos:end="17:63">= <expr pos:start="17:21" pos:end="17:63"><operator pos:start="17:21" pos:end="17:21">(</operator><name pos:start="17:22" pos:end="17:26">start</name> <operator pos:start="17:28" pos:end="17:28">/</operator> <name pos:start="17:30" pos:end="17:44">VHOST_LOG_CHUNK</name><operator pos:start="17:45" pos:end="17:45">)</operator> <operator pos:start="17:47" pos:end="17:47">*</operator> <name pos:start="17:49" pos:end="17:63">VHOST_LOG_CHUNK</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:50"><expr pos:start="21:5" pos:end="21:49"><call pos:start="21:5" pos:end="21:49"><name pos:start="21:5" pos:end="21:10">assert</name><argument_list pos:start="21:11" pos:end="21:49">(<argument pos:start="21:12" pos:end="21:48"><expr pos:start="21:12" pos:end="21:48"><name pos:start="21:12" pos:end="21:14">end</name> <operator pos:start="21:16" pos:end="21:16">/</operator> <name pos:start="21:18" pos:end="21:32">VHOST_LOG_CHUNK</name> <operator pos:start="21:34" pos:end="21:34">&lt;</operator> <name pos:start="21:36" pos:end="21:48"><name pos:start="21:36" pos:end="21:38">dev</name><operator pos:start="21:39" pos:end="21:40">-&gt;</operator><name pos:start="21:41" pos:end="21:48">log_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:52"><expr pos:start="23:5" pos:end="23:51"><call pos:start="23:5" pos:end="23:51"><name pos:start="23:5" pos:end="23:10">assert</name><argument_list pos:start="23:11" pos:end="23:51">(<argument pos:start="23:12" pos:end="23:50"><expr pos:start="23:12" pos:end="23:50"><name pos:start="23:12" pos:end="23:16">start</name> <operator pos:start="23:18" pos:end="23:18">/</operator> <name pos:start="23:20" pos:end="23:34">VHOST_LOG_CHUNK</name> <operator pos:start="23:36" pos:end="23:36">&lt;</operator> <name pos:start="23:38" pos:end="23:50"><name pos:start="23:38" pos:end="23:40">dev</name><operator pos:start="23:41" pos:end="23:42">-&gt;</operator><name pos:start="23:43" pos:end="23:50">log_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:20">(<expr pos:start="25:9" pos:end="25:19"><name pos:start="25:9" pos:end="25:11">end</name> <operator pos:start="25:13" pos:end="25:13">&lt;</operator> <name pos:start="25:15" pos:end="25:19">start</name></expr>)</condition> <block pos:start="25:22" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:15">

        <return pos:start="27:9" pos:end="27:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <for pos:start="31:5" pos:end="73:5">for <control pos:start="31:9" pos:end="31:28">(<init pos:start="31:10" pos:end="31:10">;</init><condition pos:start="31:11" pos:end="31:20"><expr pos:start="31:11" pos:end="31:19"><name pos:start="31:11" pos:end="31:14">from</name> <operator pos:start="31:16" pos:end="31:16">&lt;</operator> <name pos:start="31:18" pos:end="31:19">to</name></expr>;</condition> <incr pos:start="31:22" pos:end="31:27"><expr pos:start="31:22" pos:end="31:27"><operator pos:start="31:22" pos:end="31:23">++</operator><name pos:start="31:24" pos:end="31:27">from</name></expr></incr>)</control> <block pos:start="31:30" pos:end="73:5">{<block_content pos:start="33:9" pos:end="71:32">

        <decl_stmt pos:start="33:9" pos:end="33:30"><decl pos:start="33:9" pos:end="33:29"><type pos:start="33:9" pos:end="33:25"><name pos:start="33:9" pos:end="33:25">vhost_log_chunk_t</name></type> <name pos:start="33:27" pos:end="33:29">log</name></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:16"><decl pos:start="35:9" pos:end="35:15"><type pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:11">int</name></type> <name pos:start="35:13" pos:end="35:15">bit</name></decl>;</decl_stmt>

        <comment type="block" pos:start="37:9" pos:end="39:60">/* We first check with non-atomic: much cheaper,

         * and we expect non-dirty to be the common case. */</comment>

        <if_stmt pos:start="41:9" pos:end="47:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:19">(<expr pos:start="41:13" pos:end="41:18"><operator pos:start="41:13" pos:end="41:13">!</operator><operator pos:start="41:14" pos:end="41:14">*</operator><name pos:start="41:15" pos:end="41:18">from</name></expr>)</condition> <block pos:start="41:21" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:21">

            <expr_stmt pos:start="43:13" pos:end="43:36"><expr pos:start="43:13" pos:end="43:35"><name pos:start="43:13" pos:end="43:16">addr</name> <operator pos:start="43:18" pos:end="43:19">+=</operator> <name pos:start="43:21" pos:end="43:35">VHOST_LOG_CHUNK</name></expr>;</expr_stmt>

            <continue pos:start="45:13" pos:end="45:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="49:9" pos:end="55:27">/* Data must be read atomically. We don't really

         * need the barrier semantics of __sync

         * builtins, but it's easier to use them than

         * roll our own. */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:44"><expr pos:start="57:9" pos:end="57:43"><name pos:start="57:9" pos:end="57:11">log</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="57:43"><name pos:start="57:15" pos:end="57:34">__sync_fetch_and_and</name><argument_list pos:start="57:35" pos:end="57:43">(<argument pos:start="57:36" pos:end="57:39"><expr pos:start="57:36" pos:end="57:39"><name pos:start="57:36" pos:end="57:39">from</name></expr></argument>, <argument pos:start="57:42" pos:end="57:42"><expr pos:start="57:42" pos:end="57:42"><literal type="number" pos:start="57:42" pos:end="57:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while pos:start="59:9" pos:end="69:9">while <condition pos:start="59:15" pos:end="61:39">(<expr pos:start="59:16" pos:end="61:38"><operator pos:start="59:16" pos:end="59:16">(</operator><name pos:start="59:17" pos:end="59:19">bit</name> <operator pos:start="59:21" pos:end="59:21">=</operator> <ternary pos:start="59:23" pos:end="61:37"><condition pos:start="59:23" pos:end="59:49"><expr pos:start="59:23" pos:end="59:47"><sizeof pos:start="59:23" pos:end="59:33">sizeof<argument_list pos:start="59:29" pos:end="59:33">(<argument pos:start="59:30" pos:end="59:32"><expr pos:start="59:30" pos:end="59:32"><name pos:start="59:30" pos:end="59:32">log</name></expr></argument>)</argument_list></sizeof> <operator pos:start="59:35" pos:end="59:35">&gt;</operator> <sizeof pos:start="59:37" pos:end="59:47">sizeof<argument_list pos:start="59:43" pos:end="59:47">(<argument pos:start="59:44" pos:end="59:46"><expr pos:start="59:44" pos:end="59:46"><name pos:start="59:44" pos:end="59:46">int</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then pos:start="61:17" pos:end="61:26">

                <expr pos:start="61:17" pos:end="61:26"><call pos:start="61:17" pos:end="61:26"><name pos:start="61:17" pos:end="61:21">ffsll</name><argument_list pos:start="61:22" pos:end="61:26">(<argument pos:start="61:23" pos:end="61:25"><expr pos:start="61:23" pos:end="61:25"><name pos:start="61:23" pos:end="61:25">log</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="61:28" pos:end="61:37">: <expr pos:start="61:30" pos:end="61:37"><call pos:start="61:30" pos:end="61:37"><name pos:start="61:30" pos:end="61:32">ffs</name><argument_list pos:start="61:33" pos:end="61:37">(<argument pos:start="61:34" pos:end="61:36"><expr pos:start="61:34" pos:end="61:36"><name pos:start="61:34" pos:end="61:36">log</name></expr></argument>)</argument_list></call></expr></else></ternary><operator pos:start="61:38" pos:end="61:38">)</operator></expr>)</condition> <block pos:start="61:41" pos:end="69:9">{<block_content pos:start="63:13" pos:end="67:36">

            <expr_stmt pos:start="63:13" pos:end="63:21"><expr pos:start="63:13" pos:end="63:20"><name pos:start="63:13" pos:end="63:15">bit</name> <operator pos:start="63:17" pos:end="63:18">-=</operator> <literal type="number" pos:start="63:20" pos:end="63:20">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:71"><expr pos:start="65:13" pos:end="65:70"><call pos:start="65:13" pos:end="65:70"><name pos:start="65:13" pos:end="65:41">cpu_physical_memory_set_dirty</name><argument_list pos:start="65:42" pos:end="65:70">(<argument pos:start="65:43" pos:end="65:69"><expr pos:start="65:43" pos:end="65:69"><name pos:start="65:43" pos:end="65:46">addr</name> <operator pos:start="65:48" pos:end="65:48">+</operator> <name pos:start="65:50" pos:end="65:52">bit</name> <operator pos:start="65:54" pos:end="65:54">*</operator> <name pos:start="65:56" pos:end="65:69">VHOST_LOG_PAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:36"><expr pos:start="67:13" pos:end="67:35"><name pos:start="67:13" pos:end="67:15">log</name> <operator pos:start="67:17" pos:end="67:18">&amp;=</operator> <operator pos:start="67:20" pos:end="67:20">~</operator><operator pos:start="67:21" pos:end="67:21">(</operator><literal type="number" pos:start="67:22" pos:end="67:27">0x1ull</literal> <operator pos:start="67:29" pos:end="67:30">&lt;&lt;</operator> <name pos:start="67:32" pos:end="67:34">bit</name><operator pos:start="67:35" pos:end="67:35">)</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="71:9" pos:end="71:32"><expr pos:start="71:9" pos:end="71:31"><name pos:start="71:9" pos:end="71:12">addr</name> <operator pos:start="71:14" pos:end="71:15">+=</operator> <name pos:start="71:17" pos:end="71:31">VHOST_LOG_CHUNK</name></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
